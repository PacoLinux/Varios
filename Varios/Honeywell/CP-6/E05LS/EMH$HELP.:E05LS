VERSION E05

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:1    
        1        1        /*M*     EMH$HELP - HELP MESSAGE REPORTER */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*/
        8        8        /*P*     NAME:     EMH$HELP
        9        9        *
       10       10                 PURPOSE:  EMH$HELP is a monitor service called to read messages
       11       11                      from a file and output them to the user.  */
       12       12        /**/
       13       13        /*F*     NAME:     EMH$HELP
       14       14        *
       15       15                 FUNCTION: EMH$HELP is a service called by the user to read
       16       16                      messages from a file into the users buffer and to optionally
       17       17                      output them through the users DCBs. The message is requested
       18       18                      from the appropriate error message file with a set of KEYWORDS
       19       19                      with the possibility of a substitue message being supplied
       20       20                      if the requested one doesn't exist. The requested message
       21       21                      may be output, or placed in a buffer to be returned to the caller. */
       22       22        /**/
       23       23        /*D*     NAME:     EMH$HELP
       24       24        *
       25       25                 CALL:     EMH$HELP is called via a PMME with an FPT containing
       26       26                      the following parameters:
       27       27        *
       28       28                      V - Value field of FPT contains:
       29       29                          OUTDCB1 - number of DCB through which message it to be output.
       30       30                          OUTDCB2 - number of secode output DCB.
       31       31                          LIST - bit indicating that a list of HELP topics, not
       32       32                                 the actual text, is to be output.
       33       33                          ALL - bit indicating that all of the remaining HELP on the
       34       34                                current topic is to be output.
       35       35                          MORE - bit indicating that the next subtopic of the current
       36       36                                 topic is to be output.
       37       37                          RANGE - bit indicating that the passed keywords specify a
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:2    
       38       38                                  range of HELP text, rather than a single message.
       39       39                          SUBTOPIC - bit permitting HELP to provide a default TOPIC
       40       40                                     if the passed one is unavailable.
       41       41                          SUBSTOPIC - bit permitting HELP to provide a default
       42       42                                       subtopic if the passed one is unavailable.
       43       43                          LANG - native language byte to be used instead of that in
       44       44                                 the user's JIT.
       45       45        *
       46       46                      KEY1 - Keyword used to find a HELP message.
       47       47        *
       48       48                      KEY2 - Second keyword used to find a HELP message.
       49       49        *
       50       50                      BUF - User's buffer consisting of some number of 79-character
       51       51                            slots into which the message is read.
       52       52        *
       53       53                      PROCNAME - The name of the processor for which HELP is requested.
       54       54        *
       55       55                      PROCACCT - The account in which the HELP database resides.
       56       56        *
       57       57                      PROCPASS - The password assigned to the HELP database.
       58       58        *
       59       59                      RESULTS - A status and scratch area for M$HELP.  RESULTS contains:
       60       60                          BADCALL - bit indicating that the call contained one or more
       61       61                                    illegal parameters.
       62       62                          NOMSG - bit indicating that M$HELP was unable to find a message.
       63       63                          ALTMSG - bit indicating that M$HELP supplied a substitute message.
       64       64                          MSGCOMP - bit indicating that the buffer contains the complete
       65       65                                    message.
       66       66                          OUTERR1 - bit indicating that an error occured on OUTDCB1.
       67       67                          OUTERR2 - bit indicating that an error occured on OUTDCB1.
       68       68                          INERR - bit indicating that an error occured on input.
       69       69                          NNATIVE - bit indicating that the supplied HELP is not in
       70       70                                    the user's native language.
       71       71                          BUFERR - bit indicating that the passed buffer was bad.
       72       72                          RECCNT - UBIN(18) count of records read into the buffer.
       73       73                          ERRCODE1 - the error code encountered on OUTDCB1.
       74       74                          ERRCODE2 - the error code encountered on OUTDCB1.
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:3    
       75       75                          CODEUSED - a scratch area used by M$HELP for finding the
       76       76                                     next chunk of text for ALL and MORE.
       77       77        */
       78       78        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:4    
       79       79        EMH$HELP: PROC ;
       80       80        /**/
       81       81        /*************************************************************/
       82       82        /*   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   */
       83       83        /*************************************************************/
       84       84        /**/
       85       85                                                /* Logical SUBs                       */
       86       86        %SUB TRUE# = '1'B;
       87       87        %SUB FALSE# = '0'B;
       88       88                                                /* Record type SUBs                   */
       89       89        %SUB TEXT_REC# = 1;
       90       90        %SUB DICT_REC# = 2;
       91       91        %SUB SYN_REC# = 3;
       92       92                                                /* DO group SUBs                      */
       93       93        %SUB FOREVER# = '1'B;
       94       94        %SUB NEVER# = '0'B;
       95       95                                                /* EQUs for output format             */
       96       96        %EQU LINES# = 1;
       97       97        %EQU COLUMNS# = 2;
       98       98        %EQU FINISH# = 3;
       99       99                                                /* %SUBs for parameter stack level    */
      100      100        %SUB V_PS# = 0;
      101      101        %SUB KEY1_PS# = 1;
      102      102        %SUB KEY2_PS# = 2;
      103      103        %SUB BUF_PS# = 3;
      104      104        %SUB PROCNAME_PS# = 4;
      105      105        %SUB PROCACCT_PS# = 5;
      106      106        %SUB PROCPASS_PS# = 6;
      107      107        %SUB RESULTS_PS# = 7;
      108      108        %SUB PROCPSN_PS# = 7;
      109      109                                                /* SUBS for parameter stack pointers  */
      110      110        %SUB V$# = B$PS0$;
      111      111        %SUB KEY1$# = B$PS1$;
      112      112        %SUB KEY2$# = B$PS2$;
      113      113        %SUB BUF$# = B$PS3$;
      114      114        %SUB PROCNAME$# = B$PS4$;
      115      115        %SUB PROCACCT$# = B$PS5$;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:5    
      116      116        %SUB PROCPASS$# = B$PS6$;
      117      117        %SUB RESULTS$# = B$PS7$;
      118      118        %SUB PROCPSN$# = B$PS8$;
      119      119                                                /* SUBS for fundamental constants     */
      120      120        %SUB SLOT_SIZE# = 79;
      121      121        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:6    
      122      122        /***********************************************************************/
      123      123        /*    ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   */
      124      124        /**********************************************************************/
      125      125        /**/
      126      126    1   DCL FMF$ICORRES ENTRY(4);               /* To check DCBs                      */
      127      127    1   DCL FMM$DFLOPNSYS ENTRY;                /* OPEN M$* without checking WSR=0/1  */
      128      128    1   DCL FMM$DFLOPN ENTRY;                   /* OPEN M$* (WSR must be 0 or 1)      */
      129      129    1   DCL FMN$OPNF ENTRY(1);                  /* TO OPEN NEXT HELP FILE             */
      130      130    1   DCL FMM$SCRUB ENTRY(1);
      131      131    1   DCL FMP$CLSJ ENTRY;
      132      132    1   DCL HFF$NILERASE ENTRY(1) ALTRET;       /* TO TEST PS DESC. FOR NULL          */
      133      133    1   DCL HFF$DSIZ ENTRY(2) ALTRET;           /* RETURN SIZE OF A PARAMETER         */
      134      134    1   DCL HFF$TRAPALT ENTRY ALTRET;           /* TO PROVIDE TRAP ENTRY ADDRESS      */
      135      135    1   DCL M$MREAD ENTRY(1) ALTRET;            /* INTERNAL READ                      */
      136      136    1   DCL M$MWRITE ENTRY(1) ALTRET;           /* INTERNAL WRITE                     */
      137      137    1   DCL M$MPRECORD ENTRY(1) ALTRET;         /* INTERNAL PRECORD                   */
      138      138    1   DCL M$MFID ENTRY(1) ALTRET;             /* INTERNAL FID                       */
      139      139    1   DCL FMO$GETDOMAIN ENTRY(1);             /* Find out WSR for caller            */
      140      140    1   DCL UMD$CHKOPN ENTRY ALTRET;            /* OPEN M$DRIBBLE IF NEEDED           */
      141      141    1   DCL FMD$GBUF ENTRY(1);                  /* TO ALLOCATE A POOL BUFFER          */
      142      142    1   DCL FMD$RBUF ENTRY(1);                  /* TO RELEASE A POOL BUFFER           */
      143      143        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:7    
      144      144        /**/
      145      145        /*********************************************************************/
      146      146        /*   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   */
      147      147        /*********************************************************************/
      148      148        /**/
      149      149        %INCLUDE F$DCB;
      150      198        %INCLUDE CP_6_SUBS;
      151      738        %INCLUDE CP_6;
      152     6297        %INCLUDE B$JIT;
      153     6900        %INCLUDE UM$CP6V_C;
      154     7087        %INCLUDE B$USER;                        /* USER TABLE ENTRY                   */
      155     7303        %INCLUDE B_ERRORS_C;                    /* Error EQUs                         */
      156     8430        %INCLUDE B$TABLES_C;
      157     8538        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:8    
      158     8539        /********************************************************************/
      159     8540        /*   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   */
      160     8541        /********************************************************************/
      161     8542        /**/
      162     8543        %FPT_READ     (FPTN = INIT_RFPT,
      163     8544                       KEYR = YES,              /* RETURN KEY                         */
      164     8545                       STCLASS = CONSTANT);
      165     8584        %FPT_WRITE    (FPTN = INIT_WFPT,
      166     8585                       STCLASS = CONSTANT);
      167     8616        %FPT_PRECORD  (FPTN = INIT_PRECFPT,
      168     8617                       N = -2,                  /* Backup before record we just read  */
      169     8618                       KEYR = YES,              /* Return key found                   */
      170     8619                       STCLASS = CONSTANT);
      171     8640        %FPT_OPEN     (FPTN = INIT_OPEN,
      172     8641                       NXTF = YES,
      173     8642                       THISF = NO,
      174     8643                        TEST = YES,
      175     8644                       FUN = IN,
      176     8645                       ASN = FILE,
      177     8646                       ACS = DIRECT,
      178     8647                       PFMT = PTR,              /* FPT for internal CALL              */
      179     8648                       VECTOR = ADDR,           /* FPT for internal CALL              */
      180     8649                       STCLASS = CONSTANT);
      181     8758        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:9    
      182     8759        /*****************************************************************************/
      183     8760        /*   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   */
      184     8761        /*****************************************************************************/
      185     8762        /**/
      186     8763    1   DCL M$STAR_NUM UBIN(36) CONSTANT INIT(1); /* M$* IS DCB ONE                   */
      187     8764    1   DCL ZERO_CHAR CHAR(1) CONSTANT INIT(BITASC('000'O));
      188     8765    1   DCL HIGH_CHAR CHAR(1) CONSTANT INIT(BITASC('777'O));
      189     8766        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:10   
      190     8767        /*****************************************************************/
      191     8768        /*   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   */
      192     8769        /*****************************************************************/
      193     8770        /**/
      194     8771    1   DCL B$JIT$ PTR SYMREF READONLY;         /* Locates current user's JIT         */
      195     8772    1   DCL S$CU$ PTR SYMREF;          /* Locates current USER TABLE entry   */
      196     8773        /**/
      197     8774    1   DCL B$PS0$ PTR SYMREF READONLY;
      198     8775    1   DCL B$PS1$ PTR SYMREF READONLY;
      199     8776    1   DCL B$PS2$ PTR SYMREF READONLY;
      200     8777    1   DCL B$PS3$ PTR SYMREF READONLY;
      201     8778    1   DCL B$PS4$ PTR SYMREF READONLY;
      202     8779    1   DCL B$PS5$ PTR SYMREF READONLY;
      203     8780    1   DCL B$PS6$ PTR SYMREF READONLY;
      204     8781    1   DCL B$PS7$ PTR SYMREF READONLY;
      205     8782    1   DCL B$PS8$ PTR SYMREF READONLY;
      206     8783        /**/
      207     8784        %B$SR_NON_DEC (NAME=SRCH_TBL);
      208     8788        %B$XL_UPPER (NAME=EMH_UC_XLATE_TBL);
      209     8792        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:11   
      210     8793        /*****************************************************************/
      211     8794        /*   LOCAL MACROS        LOCAL MACROS        LOCAL MACROS        */
      212     8795        /*****************************************************************/
      213     8796        /**/
      214     8797        %MACRO TEXTCX (NAME=NAME, STCLASS=STCLASS, SIZE=SIZE);
      215     8798        DCL 1 NAME STCLASS ALIGNED,
      216     8799              2 LEN UBIN(9) CALIGNED,
      217     8800              2 TEXT CHAR(SIZE) CALIGNED,
      218     8801              2 TCHAR(0:%(SIZE-1)) REDEF TEXT CHAR(1) CALIGNED,
      219     8802              2 TUBIN(0:%(SIZE-1)) REDEF TEXT UBIN(9) CALIGNED;
      220     8803        %MEND;
      221     8804        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:12   
      222     8805        /***************************************************************/
      223     8806        /* AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   */
      224     8807        /***************************************************************/
      225     8808        /**/
      226     8809                                                /* Local copies of passed things      */
      227     8810    1   DCL HELP_RECS UBIN WORD;
      228     8811    1   DCL BUFLEN SBIN WORD;
      229     8812    1   DCL LEN SBIN WORD;
      230     8813    1   DCL NAME_PASSED BIT(1);
      231     8814    1   DCL CASE_TRANS_OK BIT(1);
      232     8815    1   DCL BUF$ PTR ALIGNED;
      233     8816                                                /* Various local stuff                */
      234     8817    1   DCL NATIVE_LANG CHAR(1);                /* From JIT, blank if default         */
      235     8818    1   DCL RECORD_TYPE UBIN WORD;              /* TEXT/DICT/SYN record type          */
      236     8819    1   DCL I SBIN;                             /* INDEX                              */
      237     8820    1   DCL ERROR UBIN;                         /* ERROR CODE (NONE IF ZERO)          */
      238     8821    1   DCL COLUMN SBIN WORD;                   /* Counter for list formatting        */
      239     8822    1   DCL M$STAR$ PTR ALIGNED;                /* POINTER TO M$*                     */
      240     8823    1   DCL WILDCARDING BIT(1) ALIGNED;
      241     8824    1   DCL RANGE BIT(1) ALIGNED;
      242     8825                                                /* KEYS                               */
      243     8826        %TEXTCX (NAME = RETURNKEY, STCLASS = AUTO, SIZE = 63);
      244     8833    1   DCL POSITION UBIN;                      /* INDEX INTO RETURNKEY               */
      245     8834        %TEXTCX (NAME = ENDKEY, STCLASS = AUTO, SIZE = 63);
      246     8841        %TEXTCX (NAME = TRYKEY, STCLASS = AUTO, SIZE = 63);
      247     8848    1   DCL C_COUNT UBIN;                       /* INDEX INTO RETURNKEY               */
      248     8849    1   DCL SRCH_IDX UBIN WORD;
      249     8850    1   DCL SRCH_VAL UBIN WORD;
      250     8851    1   DCL SRCH_START UBIN WORD;
      251     8852    1   DCL CONV_UBIN UBIN WORD;
      252     8853                                                /* POINTERS FOR ALLOCATED DATA        */
      253     8854    1   DCL POOLBUF$ PTR AUTO;
      254     8855    1   DCL AD_RFPT$ PTR AUTO;                  /* READ FPT                           */
      255     8856    1   DCL AD_WFPT$ PTR AUTO;                  /* WRITE FPT                          */
      256     8857    1   DCL AD_PFPT$ PTR AUTO;                  /* PRECORD FPT                        */
      257     8858    1   DCL AD_OFPT$ PTR AUTO;                  /* OPEN FPT                           */
      258     8859    1   DCL AD_TBUF$ PTR AUTO;                  /* LIST FORMATTING BUFFER             */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:13   
      259     8860    1   DCL AD_KEY1$ PTR AUTO;                  /* KEYWORD1 BUFFER                    */
      260     8861    1   DCL AD_KEY2$ PTR AUTO;                  /* KEYWORD2 BUFFER                    */
      261     8862    1   DCL AD_RSLT$ PTR AUTO;                  /* VLR_HELP                           */
      262     8863        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:14   
      263     8864        /*****************************************************************************/
      264     8865        /*   ALLOCATED DATA      ALLOCATED DATA       ALLOCATED DATA                 */
      265     8866        /*****************************************************************************/
      266     8867        /**/
      267     8868        /*  The following data resides in a one-page pool buffer that we request on   */
      268     8869        /*  entry and must release on exit.  Implied pointers are used so that this   */
      269     8870        /*  area 'looks like' AUTO                                                    */
      270     8871        /**/
      271     8872        %FPT_READ     (FPTN = FPT_READ,
      272     8873                       STCLASS = "BASED(AD_RFPT$)");
      273     8912        %FPT_WRITE    (FPTN = FPT_WRITE,
      274     8913                       STCLASS = "BASED(AD_WFPT$)");
      275     8944        %FPT_PRECORD  (FPTN = FPT_PREC,
      276     8945                       STCLASS = "BASED(AD_PFPT$)");
      277     8966        %FPT_OPEN     (FPTN = FPT_OPEN,
      278     8967                       STCLASS = "BASED(AD_OFPT$)");
      279     9076    1   DCL TEXT CHAR(SLOT_SIZE#) BASED(AD_TBUF$); /* Buffer for list formatting      */
      280     9077        %TEXTCX (NAME = KEY1, STCLASS = "BASED(AD_KEY1$)", SIZE = 31);
      281     9084        %TEXTCX (NAME = KEY2, STCLASS = "BASED(AD_KEY2$)", SIZE = 31);
      282     9091        %VLR_HELP (FPTN = RESULTS, STCLASS = "BASED(AD_RSLT$)");
      283     9120        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:15   
      284     9121        /**********************************************************************/
      285     9122        /*   BASED DATA   BASED DATA   BASED DATA   BASED DATA   BASED DATA   */
      286     9123        /**********************************************************************/
      287     9124        /**/
      288     9125        %FPT$HELP_V  (FPTN = FPT$HELP_V);
      289     9129        %VLR_HELP (FPTN = B$RESULTS,STCLASS = BASED);
      290     9158    1   DCL 1 TEXT$C BASED,
      291     9159    1         2 C UBIN(9) CALIGNED,
      292     9160    1         2 TEXT CHAR(TEXT$C.C) ;
      293     9161    1   DCL B$BUFFER CHAR(SLOT_SIZE#) BASED;
      294     9162    1   DCL CHAR$8 CHAR(8) BASED;
      295     9163    1   DCL CHAR$6 CHAR(6) BASED;
      296     9164        /**/
      297     9165        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:16   
      298     9166        /**/
      299     9167        /*****************************************************************************/
      300     9168        /*   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   */
      301     9169        /*****************************************************************************/
      302     9170        /**/
      303     9171                                                /* Allocate storage with each thing   */
      304     9172                                                /* on a double-word boundary.         */
      305     9173    1           CALL FMD$GBUF(POOLBUF$);        /* Get a pool buffer                  */
      306     9174    1           CALL HFF$TRAPALT ALTRET(HELP_BAILOUT); /* Release it if we trap       */
      307     9175    1           AD_RFPT$ = POOLBUF$;
      308     9176    1           AD_WFPT$ = PINCRW(AD_RFPT$,(SIZEW(FPT_READ)*2+1)/2);
      309     9177    1           AD_PFPT$ = PINCRW(AD_WFPT$,(SIZEW(FPT_WRITE)*2+1)/2);
      310     9178    1           AD_OFPT$ = PINCRW(AD_PFPT$,(SIZEW(FPT_PREC)*2+1)/2);
      311     9179    1           AD_TBUF$ = PINCRW(AD_OFPT$,(SIZEW(FPT_OPEN)*2+1)/2);
      312     9180    1           AD_KEY1$ = PINCRW(AD_TBUF$,(SIZEW(TEXT)*2+1)/2);
      313     9181    1           AD_KEY2$ = PINCRW(AD_KEY1$,(SIZEW(KEY1)*2+1)/2);
      314     9182    1           AD_RSLT$ = PINCRW(AD_KEY2$,(SIZEW(KEY2)*2+1)/2);
      315     9183                                                /* INIT local storage                 */
      316     9184    1           RESULTS = FALSE#;               /* Clear HELP RESULTS                 */
      317     9185    1           ERROR = 0;                      /* No error yet                       */
      318     9186    1           COLUMN = 0;                     /* Initialize counter for list format */
      319     9187    1           RESULTS.MSGCOMP = TRUE#;        /* Assume message will fit in buffer  */
      320     9188    1           WILDCARDING = FALSE#;
      321     9189    1           RANGE = V$# -> FPT$HELP_V.RANGE;
      322     9190                                                /* Set up output DCB                  */
      323     9191    1           M$STAR$ = DCBADDR(M$STAR_NUM);  /* Create pointer to STAR DCB         */
      324     9192    1           IF (M$STAR$ -> F$DCB.FCD = TRUE#)
      325     9193    1           THEN                            /* STAR is open, so close it          */
      326     9194    2           DO;
      327     9195    2              B$JIT$ -> B$JIT.DCB$ = M$STAR$;
      328     9196    2              CALL FMP$CLSJ;
      329     9197    2              CALL HFF$TRAPALT ALTRET(HELP_BAILOUT);
      330     9198    2              END;
      331     9199    1           CALL FMM$SCRUB(M$STAR$);
      332     9200    1           CALL HFF$TRAPALT ALTRET(HELP_BAILOUT);
      333     9201        /**/
      334     9202    1           IF ( B$JIT$ -> B$JIT.LANG ~= BINASC(0))AND
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:17   
      335     9203    1             ( B$JIT$ -> B$JIT.LANG ~= ' ')
      336     9204    1           THEN                            /* Native lang exists, set value      */
      337     9205    1              NATIVE_LANG = B$JIT$ -> B$JIT.LANG;
      338     9206    1           ELSE                            /* No native lang exists, reset value */
      339     9207    1              NATIVE_LANG = ' ';
      340     9208    1           IF V$# -> FPT$HELP_V.LANG ~= ' '
      341     9209    1            AND V$# -> FPT$HELP_V.LANG ~= BINASC(0)
      342     9210    1            THEN                           /* LANG in FPT overides JIT           */
      343     9211    1               NATIVE_LANG = V$# -> FPT$HELP_V.LANG;
      344     9212        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:18   
      345     9213                                                /* Move parameters into local storage */
      346     9214    1           CALL HFF$DSIZ(BUF_PS#,BUFLEN) ALTRET (BUF_ERR); /* Buffer passed?     */
      347     9215    1           BUF$ = BUF$#;                   /* Point to user buffer               */
      348     9216    1           HELP_RECS = BUFLEN/SLOT_SIZE#;  /* Number of record slots in buffer   */
      349     9217    1           IF (HELP_RECS < 1)
      350     9218    1            THEN                           /* Buffer too small                   */
      351     9219    2             DO;
      352     9220    2   BUF_ERR:   RESULTS.BUFERR = TRUE#;      /* Buffer error                       */
      353     9221    2              RESULTS.BADCALL = TRUE#;
      354     9222    2              ERROR = %E$BADHPARAM;
      355     9223    2              GOTO HELP_EXIT;
      356     9224    2              END;
      357     9225    1           HELP_RECS = HELP_RECS -1;       /* Convert number of slots to index   */
      358     9226    1           BUF$ -> B$BUFFER = ' ';         /* Clear first buffer slot            */
      359     9227        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:19   
      360     9228    1           CALL HFF$DSIZ(KEY2_PS#,LEN) ALTRET(NO_KEY2); /* See if KEY2 exists    */
      361     9229    1           KEY2.LEN = KEY2$# -> TEXT$C.C;  /* KEY2 exists, move it in            */
      362     9230    1           IF KEY2.LEN > 31
      363     9231    1            OR KEY2.LEN +1 > LEN           /* OR bad framing vector              */
      364     9232    1            THEN                           /* KEY2 too long                      */
      365     9233    2               DO;
      366     9234    2   BAD_KEY:       ERROR = %E$BADHPARAM;
      367     9235    2                  GOTO HELP_EXIT;
      368     9236    2                  END;
      369     9237    1           KEY2.TEXT = KEY2$# -> TEXT$C.TEXT;
      370     9238    1           IF KEY2.TEXT = ' '
      371     9239    1            THEN                           /* Null keyword passed                */
      372     9240    1              GOTO NO_KEY2;
      373     9241    1           CALL INDEX (I,'?',KEY2.TEXT);
      374     9242    1           IF I < KEY2.LEN THEN            /* IF ANY '?'                         */
      375     9243    2              DO;
      376     9244    2   ILLWILD:     ERROR = %E$ILLWILD;
      377     9245    2                GOTO HELP_EXIT;
      378     9246    2                END;
      379     9247
      380     9248    2           DO WHILE (NEVER#);
      381     9249    2   NO_KEY2:   KEY2.LEN = 0;                /* No KEY2, null it                   */
      382     9250    2              KEY2.TEXT = ' ';
      383     9251    2              END;
      384     9252        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:20   
      385     9253    1           CALL HFF$DSIZ(KEY1_PS#,LEN) ALTRET(NO_KEY1); /* See if KEY1 exists    */
      386     9254    1           KEY1.LEN = KEY1$# -> TEXT$C.C;  /* KEY1 exists, move it in            */
      387     9255    1           IF KEY1.LEN > 31
      388     9256    1            OR KEY1.LEN +1 > LEN           /* OR bad framing vector              */
      389     9257    1            THEN                           /* KEY1 too long                      */
      390     9258    1              GOTO BAD_KEY;
      391     9259    1           KEY1.TEXT = KEY1$# -> TEXT$C.TEXT;
      392     9260    1           IF KEY1.TEXT = ' '
      393     9261    1            THEN                           /* Null keyword passed                */
      394     9262    1              GOTO NO_KEY1;
      395     9263    1           CALL INDEX (I,'?',KEY1.TEXT);
      396     9264    1           IF I < KEY1.LEN-1 THEN          /* IF '?' NOT LAST CHARACTER          */
      397     9265    1              GOTO ILLWILD;
      398     9266    1           IF I = KEY1.LEN-1 THEN          /* IF '?' LAST CHARACTER              */
      399     9267    2              DO;
      400     9268    2                WILDCARDING = TRUE#;
      401     9269    2                IF KEY2.LEN > 0            /* IF SECOND KEY EXISTS               */
      402     9270    2                 OR NOT V$# -> FPT$HELP_V.LIST THEN /* OR HELP TEXT              */
      403     9271    2                   GOTO ILLWILD;
      404     9272    2                END;
      405     9273
      406     9274    2           DO WHILE (NEVER#);
      407     9275    2   NO_KEY1:   KEY1.LEN = 0;                /* No KEY1, null it                   */
      408     9276    2              KEY1.TEXT = ' ';
      409     9277    2              END;
      410     9278        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:21   
      411     9279        /**/                                    /* Check DCBs                         */
      412     9280    1           CALL FMF$ICORRES(V$# -> FPT$HELP_V.OUTDCB1,
      413     9281    1            V$# -> FPT$HELP_V.OUTDCB2,
      414     9282    1            RESULTS.ERRCODE1,
      415     9283    1            RESULTS.ERRCODE2);
      416     9284    1           CALL HFF$TRAPALT ALTRET(HELP_BAILOUT);
      417     9285    1           IF RESULTS.ERRCODE1.ERR# ~= 0
      418     9286    1            THEN                           /* Bad DCB1                           */
      419     9287    1              RESULTS.OUTERR1 = TRUE#;
      420     9288    1           IF RESULTS.ERRCODE2.ERR# ~= 0
      421     9289    1            THEN                           /* Bad DCB2 or corresponds to DCB1    */
      422     9290    1              RESULTS.OUTERR2 = TRUE#;
      423     9291        /**/
      424     9292    1           IF V$# -> FPT$HELP_V.OUTDCB1 ~= 0
      425     9293    1            AND RESULTS.OUTERR1 = FALSE#
      426     9294    1            AND NOT DCBADDR(V$# -> FPT$HELP_V.OUTDCB1) -> F$DCB.FCD
      427     9295    1            THEN                           /* We have to OPEN the DCB            */
      428     9296    2              DO;
      429     9297    2                IF DCBADDR(V$# -> FPT$HELP_V.OUTDCB1) -> F$DCB.FUN = 0
      430     9298    2                 THEN                      /* FUN unknown                        */
      431     9299    2                   DCBADDR(V$# -> FPT$HELP_V.OUTDCB1) -> F$DCB.FUN = %CREATE#;
      432     9300    2                B$JIT$ -> B$JIT.DCB$ = DCBADDR(V$# -> FPT$HELP_V.OUTDCB1);
      433     9301    2                CALL FMM$DFLOPN;           /* OPEN it                            */
      434     9302    2                CALL HFF$TRAPALT ALTRET(BAD_OUTDCB1);
      435     9303    2                IF DCBADDR(V$# -> FPT$HELP_V.OUTDCB1) -> F$DCB.FCD = FALSE#
      436     9304    2                 THEN                      /* OPEN didn't work                   */
      437     9305    3   BAD_OUTDCB1:    DO;
      438     9306    3                     RESULTS.OUTERR1 = TRUE#;
      439     9307    3                     RESULTS.ERRCODE1 = B$JIT$ -> B$JIT.ERR;
      440     9308    3                     END;
      441     9309    2                END;
      442     9310    1           IF V$# -> FPT$HELP_V.OUTDCB2 ~= 0
      443     9311    1            AND RESULTS.OUTERR2 = FALSE#
      444     9312    1            AND NOT DCBADDR(V$# -> FPT$HELP_V.OUTDCB2) -> F$DCB.FCD
      445     9313    1            THEN                           /* We have to OPEN the DCB            */
      446     9314    2              DO;
      447     9315    2                IF DCBADDR(V$# -> FPT$HELP_V.OUTDCB2) -> F$DCB.FUN = 0
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:22   
      448     9316    2                 THEN                      /* FUN unknown                        */
      449     9317    2                  DCBADDR(V$# -> FPT$HELP_V.OUTDCB2) -> F$DCB.FUN = %CREATE#;
      450     9318    2                B$JIT$ -> B$JIT.DCB$ = DCBADDR(V$# -> FPT$HELP_V.OUTDCB2);
      451     9319    2                CALL FMM$DFLOPN;           /* OPEN it                            */
      452     9320    2                CALL HFF$TRAPALT ALTRET(BAD_OUTDCB2);
      453     9321    2                IF DCBADDR(V$# -> FPT$HELP_V.OUTDCB2) -> F$DCB.FCD = FALSE#
      454     9322    2                 THEN                      /* OPEN didn't work                   */
      455     9323    3   BAD_OUTDCB2:    DO;
      456     9324    3                     RESULTS.OUTERR2 = TRUE#;
      457     9325    3                     RESULTS.ERRCODE2 = B$JIT$ -> B$JIT.ERR;
      458     9326    3                     END;
      459     9327    2                END;
      460     9328        /**/
      461     9329        /*  This is a quickie fix for STAR #8807.  It should be replaced by a more    */
      462     9330        /*  classy fix in C00.  Note similar fix to M$ERRMSG.                         */
      463     9331    1           CALL UMD$CHKOPN ALTRET(DRIB_ALT); /* OPEN M$DRIBBLE IF NEEDED         */
      464     9332    1           CALL HFF$TRAPALT ALTRET(HELP_BAILOUT);
      465     9333    1   DRIB_ALT: ;
      466     9334        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:23   
      467     9335                                                /* Move PROCFID parts into DCB and    */
      468     9336                                                /* local storage                      */
      469     9337    1           CALL HFF$NILERASE(PROCNAME_PS#) ALTRET(NO_PROCNAME);
      470     9338    1           IF PROCNAME$# -> TEXT$C.C = 0
      471     9339    1            THEN                           /* No NAME passed                     */
      472     9340    1             GOTO NO_PROCNAME;
      473     9341    1           IF PROCNAME$# -> TEXT$C.C > 31 -7 /* Name too long to add prefix?     */
      474     9342    1            THEN                           /* Illegal NAME passed                */
      475     9343    2               DO;
      476     9344    2   BAD_PROCNAME: ERROR = %E$BADHPARAM;
      477     9345    2                 GOTO HELP_EXIT;
      478     9346    2                 END;
      479     9347    1           IF PROCNAME$# -> TEXT$C.TEXT = ' '
      480     9348    1            THEN                           /* Dummy name passed                  */
      481     9349    1              GOTO NO_PROCNAME;
      482     9350    1           CALL INDEX (I,'?',PROCNAME$# -> TEXT$C.TEXT);
      483     9351    1           IF I < PROCNAME$# -> TEXT$C.C THEN  /* IF '?' USED                    */
      484     9352    1              GOTO ILLWILD;
      485     9353    1           NAME_PASSED = TRUE#;
      486     9354    2           DO WHILE (NEVER#);
      487     9355    2   NO_PROCNAME: NAME_PASSED = FALSE#;
      488     9356    2                END;
      489     9357        /**/
      490     9358    1           CALL HFF$NILERASE(PROCACCT_PS#) ALTRET (NO_PROCACCT);
      491     9359    1           IF PROCACCT$# -> CHAR$8 = ' '
      492     9360    1            THEN                           /* Caller passed a blank account      */
      493     9361    1               GOTO NO_PROCACCT;           /* Take the default                   */
      494     9362    1           M$STAR$ -> F$DCB.ACCT = PROCACCT$# -> CHAR$8;
      495     9363    2           DO WHILE(NEVER#);
      496     9364    2   NO_PROCACCT: M$STAR$ -> F$DCB.ACCT = ':SYS'; /* HELP files default to :SYS    */
      497     9365    2                END;
      498     9366        /**/
      499     9367    1           CALL HFF$NILERASE(PROCPASS_PS#) ALTRET(NO_PROCPASS);
      500     9368    1           M$STAR$ -> F$DCB.PASS = PROCPASS$# -> CHAR$8;
      501     9369    2           DO WHILE (NEVER#);
      502     9370    2   NO_PROCPASS: M$STAR$ -> F$DCB.PASS = ' '; /* Default to no password           */
      503     9371    2              END;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:24   
      504     9372        /**/
      505     9373    1           CALL HFF$NILERASE(PROCPSN_PS#) ALTRET(NO_PROCPSN);
      506     9374        /*      M$STAR$ -> F$DCB.PSN = PROCPSN$# -> CHAR$6;  */
      507     9375    2           DO WHILE (NEVER#);
      508     9376    2   NO_PROCPSN: M$STAR$ -> F$DCB.PSN = ' '; /* Default to no PSN                 */
      509     9377    2              END;
      510     9378        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:25   
      511     9379                                                /* FPT INITIALIZATION                 */
      512     9380        /**/
      513     9381    1           FPT_READ = INIT_RFPT;
      514     9382    1           FPT_READ.V_ = VECTOR(FPT_READ.V);
      515     9383    1           FPT_READ.V.DCB# = M$STAR_NUM;
      516     9384    1           FPT_READ.BUF_ = VECTOR(TEXT);   /* Always read into TEXT buffer       */
      517     9385    1           FPT_READ.KEY_ = VECTOR(RETURNKEY);
      518     9386        /**/
      519     9387    1           FPT_WRITE = INIT_WFPT;
      520     9388    1           FPT_WRITE.V_ = VECTOR(FPT_WRITE.V);
      521     9389    1           FPT_WRITE.BUF_.BOUND = SLOT_SIZE# -1; /* Set BUF_.BUF$ later          */
      522     9390        /**/
      523     9391    1           FPT_PREC = INIT_PRECFPT;
      524     9392    1           FPT_PREC.V_ = VECTOR(FPT_PREC.V);
      525     9393    1           FPT_PREC.V.DCB# = M$STAR_NUM;
      526     9394    1           FPT_PREC.KEY_ = VECTOR(RETURNKEY);
      527     9395        /**/
      528     9396    1           FPT_OPEN = INIT_OPEN;
      529     9397    1           FPT_OPEN.V.DCB# = M$STAR_NUM;
      530     9398        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:26   
      531     9399                                                /* Find out if list of processors is  */
      532     9400                                                /* required.                          */
      533     9401    1           IF NAME_PASSED
      534     9402    1           THEN
      535     9403    1              CALL SPECIFIC_FILE ALTRET(HELP_EXIT);
      536     9404    1           ELSE
      537     9405    1              CALL LIST_PROCS ALTRET(HELP_EXIT);
      538     9406        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:27   
      539     9407    1   HELP_EXIT:                              /* Return to PMME handler after set-  */
      540     9408                                                /* ing up any error conditions        */
      541     9409    1           IF COLUMN > 0
      542     9410    1            THEN                           /* A dangling list exists             */
      543     9411    1               CALL BUFFER_HELP(%FINISH#) ALTRET(IGNORE_W_ALT); /* Finish it     */
      544     9412    1   IGNORE_W_ALT:
      545     9413        /**/
      546     9414    1           CALL HFF$NILERASE(RESULTS_PS#) ALTRET (NO_RESULTS); /* Are RESULTS wanted */
      547     9415        /**/
      548     9416    1           IF RECORD_TYPE ~= TEXT_REC#
      549     9417    1            OR SUBSTR(KEY1.TEXT,0,KEY1.LEN) ~= SUBSTR(RETURNKEY.TEXT,0,C_COUNT)
      550     9418    1            OR V$# -> FPT$HELP_V.LIST      /* '?' not legal for TOPICS           */
      551     9419    1            THEN                           /* We won't take ? or ?? next time    */
      552     9420    1              RESULTS.CODEUSED = FALSE#;   /* Stomp on CODEUSED                  */
      553     9421    1            ELSE                           /* Keep RETURNKEY for later bumping   */
      554     9422    2              DO;
      555     9423    2                  RESULTS.CODEUSED.LEN = RETURNKEY.LEN;
      556     9424    2                  RESULTS.CODEUSED.TEXT = RETURNKEY.TEXT;
      557     9425    2                  END;
      558     9426        /**/
      559     9427    1           RESULTS$# -> B$RESULTS = RESULTS; /* Move RESULTS to user's field       */
      560     9428        /**/
      561     9429    1   NO_RESULTS: ;
      562     9430        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:28   
      563     9431    1           IF ERROR = 0
      564     9432    1           THEN                            /* No error happened                  */
      565     9433    1             B$JIT.ERR = FALSE#;           /* ZERO B$JIT.ERR for normal return   */
      566     9434    1           ELSE                            /* Error encountered                  */
      567     9435    2           DO;
      568     9436    2              B$JIT.ERR.FCG = '0515'O;     /* EM                                 */
      569     9437    2              B$JIT.ERR.MID = '10'O;       /* H                                  */
      570     9438    2              B$JIT.ERR.MON = '1'B;
      571     9439    2              B$JIT.ERR.CODE = ERROR;
      572     9440    2              B$JIT.ERR.SEV = 0;
      573     9441    2              END;
      574     9442        /**/
      575     9443    1   HELP_BAILOUT: ;
      576     9444    1           CALL FMD$RBUF(POOLBUF$);        /* Release the pool buffer            */
      577     9445        /**/
      578     9446    1           IF M$STAR$ -> F$DCB.FCD
      579     9447    1            THEN                           /* M$STAR is open                     */
      580     9448    2              DO;
      581     9449    2                 B$JIT$ -> B$JIT.DCB$ = M$STAR$;
      582     9450    2                 CALL FMP$CLSJ;            /* CLOSE it                           */
      583     9451    2                 END;
      584     9452        /**/
      585     9453    1           RETURN;
      586     9454        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:29   
      587     9455        /******************************************************************************/
      588     9456        /*      THE FOLLOWING CODES INDICATE ERRORS BY THE TERMINAL OPERATOR.  THEY   */
      589     9457        /*      SHOULD BE REPORTED AS OBSERVED                                        */
      590     9458        /******************************************************************************/
      591     9459        /**/
      592     9460        /*E*    ERROR:    EMH-E$NOHPROC-1
      593     9461                MESSAGE: No HELP is available for that processor.
      594     9462        */
      595     9463        /*E*    ERROR:    EMH-E$BADHOPT-1
      596     9464                MESSAGE: Conflicting options
      597     9465        */
      598     9466        /*E*    ERROR:    EMH-E$NOMOREHELP-1
      599     9467                MESSAGE: End of topic.
      600     9468               MESSAGE1: No further HELP exists for that topic
      601     9469        */
      602     9470        /*E*    ERROR:    EMH-E$NOTOPIC-1
      603     9471                MESSAGE: No such topic
      604     9472        */
      605     9473        /*E*    ERROR:    EMH-E$BADHFID-1
      606     9474                MESSAGE: Bad processor FID
      607     9475        */
      608     9476        /*E*    ERROR:    EMH-E$ILLWILD-1
      609     9477                MESSAGE: Incorrect usage of ? (wildcard).
      610     9478        */
      611     9479        /*E*    ERROR:    EMH-E$BREAK-1
      612     9480                MESSAGE: Break or CTRL-Y during HELP.
      613     9481        */
      614     9482        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:30   
      615     9483        /******************************************************************************/
      616     9484        /*      THE FOLLOWING ERRORS SHOULD BE CAUGHT BY THE CALLING PROGRAMME AND    */
      617     9485        /*      NOT REPORTED TO THE TERMINAL OPERATOR                                 */
      618     9486        /******************************************************************************/
      619     9487        /**/
      620     9488        /*E*    ERROR:    EMH-E$NEEDRESULTS-1
      621     9489                MESSAGE: ALL and MORE options require the RESULTS area
      622     9490        */
      623     9491        /*E*    ERROR:    EMH-E$HERROR-1
      624     9492                MESSAGE: HELP ERROR
      625     9493               MESSAGE1: M$HELP either has generated an error, or the CALL was bad
      626     9494        */
      627     9495        /*E*    ERROR:    EMH-E$HELPDERR-1
      628     9496                MESSAGE: HELP database error
      629     9497               MESSAGE1: That M$HELP database is malformed
      630     9498        */
      631     9499        /*E*    ERROR:    EMH-E$BADHPARAM;
      632     9500                MESSAGE: Bad CALLing parameter
      633     9501        */
      634     9502        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:31   
      635     9503    1   SPECIFIC_FILE: PROC ALTRET;             /* The caller wants either HELP text  */
      636     9504                                                /* or a list of HELP topics.  Either  */
      637     9505                                                /* way, he has provided a processor   */
      638     9506                                                /* name to be converted into a FID    */
      639     9507                                                /* name of the form 'HELP:name:l'     */
      640     9508                                                /* where 'l' is the native language   */
      641     9509                                                /* passed by the caller, or from the  */
      642     9510                                                /* JIT.  Note that this character     */
      643     9511                                                /* will not be included in the name   */
      644     9512                                                /* if it is nil                       */
      645     9513        /**/
      646     9514                                                /* Create file name  from processor   */
      647     9515    2           CALL CONCAT(M$STAR$ -> F$DCB.NAME.C,'HELP:',
      648     9516    2            PROCNAME$# -> TEXT$C.TEXT,':');
      649     9517    2           M$STAR$ -> F$DCB.NAME.L = PROCNAME$# -> TEXT$C.C +6;
      650     9518    2           IF M$STAR$ -> F$DCB.ACCT = ':SYS'
      651     9519    2            THEN                           /* System processor, translate to UC  */
      652     9520    2              CALL XLATE(M$STAR$->F$DCB.NAME.C,EMH_UC_XLATE_TBL,M$STAR$->F$DCB.NAME.C);
      653     9521    2           IF NATIVE_LANG ~= ' '
      654     9522    2           THEN                            /* Native language exists             */
      655     9523    3           DO;
      656     9524    3              CALL INSERT(M$STAR$ -> F$DCB.NAME.C,
      657     9525    3               M$STAR$ -> F$DCB.NAME.L,1,NATIVE_LANG);
      658     9526    3              M$STAR$ -> F$DCB.NAME.L = M$STAR$ -> F$DCB.NAME.L +1;
      659     9527    3              END;
      660     9528        /**/
      661     9529    2           M$STAR$ -> F$DCB.FUN = %IN#;
      662     9530    2           M$STAR$ -> F$DCB.ASN = %FILE#;
      663     9531    2           M$STAR$ -> F$DCB.ACS = %DIRECT#;
      664     9532    2           M$STAR$ -> F$DCB.RES = ' ';
      665     9533    2           M$STAR$ -> F$DCB.AMFLG = FALSE#;
      666     9534    2           B$JIT$ -> B$JIT.DCB$ = M$STAR$;
      667     9535        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:32   
      668     9536    2   UOPEN_SPEC:
      669     9537    2           CALL FMO$GETDOMAIN(I);          /* Find caller's domain               */
      670     9538    2           M$STAR$ -> F$DCB.WSR = I;
      671     9539    2   OPEN_SPEC:
      672     9540    2           CALL FMM$DFLOPNSYS;             /* OPEN specific file                 */
      673     9541    2           CALL HFF$TRAPALT ALTRET(SPECIFIC_ABORT); /* Re-establish TRAP control */
      674     9542    2           IF NOT M$STAR$ -> F$DCB.FCD
      675     9543    2            THEN                           /* DCB didn't get OPENed              */
      676     9544    3             DO;
      677     9545    3              IF NATIVE_LANG ~= ' '
      678     9546    3              THEN                         /* Native lang didn't work, remove it */
      679     9547    4              DO;
      680     9548    4                 NATIVE_LANG = ' ';
      681     9549    4                 M$STAR$ -> F$DCB.NAME.L = M$STAR$ -> F$DCB.NAME.L -1;
      682     9550    4                 CALL INSERT(M$STAR$ -> F$DCB.NAME.C,
      683     9551    4                  M$STAR$ -> F$DCB.NAME.L,1,' '); /* Step on native language     */
      684     9552    4                 RESULTS.NNATIVE = TRUE#;
      685     9553    4                 GOTO UOPEN_SPEC;
      686     9554    4                 END;
      687     9555                                                /* Nothing worked, processor was bad  */
      688     9556    3              RESULTS.NOFILE = TRUE#;
      689     9557    3              ERROR = %E$NOHPROC;
      690     9558    3              ALTRETURN;
      691     9559    3              END;
      692     9560        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:33   
      693     9561                                                /* OPEN worked                        */
      694     9562    2           M$STAR$ -> F$DCB.WSR = 0;       /* Insure WSR of opener matches that  */
      695     9563                                                /* of later M$MREAD in case EXEC only */
      696     9564    2           IF M$STAR$ -> F$DCB.ORG ~= %KEYED# THEN
      697     9565    3              DO;
      698     9566    3                ERROR = %E$HELPDERR;       /* Unsuitable for message file        */
      699     9567    3                GOTO SPECIFIC_ABORT;
      700     9568    3                END;
      701     9569    2           IF V$# -> FPT$HELP_V.LIST
      702     9570    2           THEN                            /* He wants a list of topics          */
      703     9571    3             DO;
      704     9572    3                IF V$# -> FPT$HELP_V.ALL OR
      705     9573    3                  V$# -> FPT$HELP_V.MORE
      706     9574    3                THEN
      707     9575    4                DO;
      708     9576    4                   ERROR = %E$BADHOPT;
      709     9577    4                   GOTO SPECIFIC_ABORT;
      710     9578    4                   END;
      711     9579    3                IF KEY1.LEN > 0
      712     9580    3                 AND NOT WILDCARDING
      713     9581    3                 AND NOT RANGE
      714     9582    3                 AND KEY2.LEN = 0 THEN     /* He gave ONE keyword to find subs   */
      715     9583    3                    CALL LIST_SUB_TOPICS ALTRET(SPECIFIC_ABORT);
      716     9584    3                ELSE
      717     9585    3                    CALL LIST_MAJOR_TOPICS ALTRET(SPECIFIC_ABORT);
      718     9586    3                END;
      719     9587    2           ELSE                            /* He wants HELP text                 */
      720     9588    2              CALL HELP_TEXT ALTRET(SPECIFIC_ABORT);
      721     9589    2           RETURN;
      722     9590        /**/
      723     9591    2   SPECIFIC_ABORT: ;
      724     9592    2           ALTRETURN;
      725     9593        /**/
      726     9594    2   END SPECIFIC_FILE;
      727     9595        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:34   
      728     9596    1   HELP_TEXT: PROC ALTRET;
      729     9597    2           IF RANGE
      730     9598    2           THEN                            /* He wants a range of HELP text msgs */
      731     9599    3           DO;
      732     9600    3              IF V$# -> FPT$HELP_V.ALL OR
      733     9601    3                V$# -> FPT$HELP_V.MORE
      734     9602    3              THEN
      735     9603    4              DO;
      736     9604    4                 ERROR = %E$BADHOPT;
      737     9605    4                 ALTRETURN;
      738     9606    4                 END;
      739     9607    3              CALL CONCAT(ENDKEY.TEXT,
      740     9608    3               SUBSTR(KEY2.TEXT,0,KEY2.LEN),BITASC('777'O));
      741     9609    3              ENDKEY.LEN = KEY2.LEN +1;    /* Add high stuff to make range end   */
      742     9610    3              IF KEY1.LEN = 0
      743     9611    3               THEN                        /* Start at beginning, can't READKEY  */
      744     9612    3                 CALL READSEQ ALTRET(HELPTEXT_ABORT);
      745     9613    3               ELSE                        /* KEY1 is valid to READKEY with      */
      746     9614    4                 DO;
      747     9615    4                    RETURNKEY.LEN = KEY1.LEN;    /* Set first key to try         */
      748     9616    4                    RETURNKEY.TEXT = KEY1.TEXT;
      749     9617    4                    END;
      750     9618    3              GOTO USE_END;
      751     9619    3              END;
      752     9620        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:35   
      753     9621                                                /* He wants HELP for a single TOPIC   */
      754     9622    2           IF V$# -> FPT$HELP_V.ALL
      755     9623    2             OR V$# -> FPT$HELP_V.MORE
      756     9624    2             THEN                          /* Single TOPIC ALL or MORE           */
      757     9625    3              DO;                          /* Set up RETURNKEY to next text      */
      758     9626    3                 CALL HFF$NILERASE(RESULTS_PS#) ALTRET(NEED_RESULTS);
      759     9627    4                 DO WHILE (NEVER#);
      760     9628    4   NEED_RESULTS:    ERROR = %E$NEEDRESULTS;    /* ALL & MORE require RESULTS     */
      761     9629    4                    IF FOREVER# THEN GOTO HELPTEXT_ABORT;
      762     9630    4                    END;
      763     9631    3                 RETURNKEY.LEN = RESULTS$# -> B$RESULTS.CODEUSED.LEN;   /* First key */
      764     9632    3                 RETURNKEY.TEXT = RESULTS$# -> B$RESULTS.CODEUSED.TEXT;
      765     9633    3                 CALL INDEX(C_COUNT,ZERO_CHAR,
      766     9634    3                  RETURNKEY.TEXT,0);       /* Find binary zero separator         */
      767     9635    3                 IF C_COUNT >= RETURNKEY.LEN
      768     9636    3                  THEN                     /* No binary zero, CODEUSED not TEXT  */
      769     9637    4                   DO;
      770     9638    4                    ERROR = %E$NOMOREHELP;    /* Treat unable to '?' as NO MORE  */
      771     9639    4                    RESULTS.NOMSG = TRUE#;
      772     9640    4                    GOTO HELPTEXT_ABORT;
      773     9641    4                    END;
      774     9642    3                 KEY1.TEXT = SUBSTR(RETURNKEY.TEXT,0,C_COUNT);
      775     9643    3                 KEY1.LEN = C_COUNT;       /* Pretend user passed KEY1           */
      776     9644    3                 GOTO MAKE_END;
      777     9645    3                 END;
      778     9646        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:36   
      779     9647                                                /* Single TOPIC, not ALL or MORE      */
      780     9648    2              IF KEY1.LEN ~= 0
      781     9649    2              THEN                    /* Not the processor's default message     */
      782     9650    3              DO;
      783     9651    3                 IF V$# -> FPT$HELP_V.XLATEKEY
      784     9652    3                  THEN                     /* KEY translation to upper case OK   */
      785     9653    3                    CASE_TRANS_OK = TRUE#;
      786     9654    3                  ELSE
      787     9655    3                    CASE_TRANS_OK = FALSE#;
      788     9656    3   TRY_KEY1:     TRYKEY.LEN = KEY1.LEN;    /* Set starting key                   */
      789     9657    3                 TRYKEY.TEXT = KEY1.TEXT;
      790     9658    3                 CALL ABBREV ALTRET(HELPTEXT_ABORT);     /* Find TOPIC  */
      791     9659    3                 IF RETURNKEY.LEN = 0
      792     9660    3                  THEN                     /* Abbreviation not found             */
      793     9661    4                   DO;
      794     9662    4   NO_SUCH_TOPIC:   ;
      795     9663    4                    IF CASE_TRANS_OK
      796     9664    4                     THEN                  /* We failed in (perhaps) lower case  */
      797     9665    5                       DO;
      798     9666    5                         CALL XLATE(KEY1.TEXT,EMH_UC_XLATE_TBL,KEY1.TEXT);
      799     9667    5                         CASE_TRANS_OK = FALSE#;    /* Don't try this again      */
      800     9668    5                         GOTO TRY_KEY1;
      801     9669    5                         END;
      802     9670    4                    IF V$# -> FPT$HELP_V.SUBTOPIC
      803     9671    4                     THEN                  /* TOPIC SUBST'N OK, try default msg  */
      804     9672    5                       DO;
      805     9673    5                         RESULTS.ALTMSG = TRUE#;
      806     9674    5                         GOTO DFLT_TOPIC;
      807     9675    5                         END;
      808     9676    4                      ELSE                 /* TOPIC SUBST'N not allowed          */
      809     9677    5                        DO;
      810     9678    5                          ERROR = %E$NOTOPIC;
      811     9679    5                          RESULTS.NOMSG = TRUE#;
      812     9680    5   HELPTEXT_ABORT:        ALTRETURN;
      813     9681    5                          END;
      814     9682    4                    END;
      815     9683        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:37   
      816     9684                                                /* Major key found                    */
      817     9685    3                 IF RECORD_TYPE = SYN_REC#
      818     9686    3                  THEN                     /* User passed a synonym              */
      819     9687    4                     DO;
      820     9688    4                       KEY1.LEN = M$STAR$ -> F$DCB.ARS;    /* Key len<-data len  */
      821     9689    4                       KEY1.TEXT = SUBSTR(TEXT,0,KEY1.LEN);
      822     9690    4                       GOTO FIND_SUBTOPIC;
      823     9691    4                       END;
      824     9692    3                  ELSE                     /* User passed a real TOPIC name      */
      825     9693    4                    DO;
      826     9694    4                      KEY1.TEXT = SUBSTR(RETURNKEY.TEXT,0,C_COUNT);
      827     9695    4                      KEY1.LEN = C_COUNT;    /* Abbreviate it to match database  */
      828     9696    4                      END;
      829     9697    3   FIND_SUBTOPIC:
      830     9698    3                 IF KEY2.LEN ~= 0
      831     9699    3                 THEN                      /* A subtopic exists                  */
      832     9700    4                 DO;
      833     9701    4                    IF V$# -> FPT$HELP_V.XLATEKEY
      834     9702    4                     THEN                  /* KEY translation to upper case OK   */
      835     9703    4                       CASE_TRANS_OK = TRUE#;
      836     9704    4   TRY_KEY2:        CALL CONCAT(TRYKEY.TEXT,SUBSTR(KEY1.TEXT,0,KEY1.LEN),
      837     9705    4                      ' ',SUBSTR(KEY2.TEXT,0,KEY2.LEN));
      838     9706    4                    TRYKEY.LEN = KEY1.LEN + KEY2.LEN +1;
      839     9707    4                    CALL ABBREV ALTRET(HELPTEXT_ABORT);
      840     9708    4                    IF RETURNKEY.LEN = 0
      841     9709    4                     THEN                  /* Abbreviation not found             */
      842     9710    5                      DO;
      843     9711    5   NO_SUCH_STOPIC:      ;
      844     9712    5                        IF CASE_TRANS_OK
      845     9713    5                         THEN              /* We failed in (perhaps) lower case  */
      846     9714    6                           DO;
      847     9715    6                             CALL XLATE(KEY2.TEXT,EMH_UC_XLATE_TBL,KEY2.TEXT);
      848     9716    6                             CASE_TRANS_OK = FALSE#;    /* Don't try this again  */
      849     9717    6                             GOTO TRY_KEY2;
      850     9718    6                             END;
      851     9719    5                        IF V$# -> FPT$HELP_V.SUBSTOPIC
      852     9720    5                         THEN              /* SUBST'N specified, try without KEY2 */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:38   
      853     9721    6                           DO;
      854     9722    6                             RESULTS.ALTMSG = TRUE#;
      855     9723    6                             GOTO DFLT_STOPIC;
      856     9724    6                             END;
      857     9725    5                         ELSE              /* SUBST'N not specified, error him   */
      858     9726    6                           DO;
      859     9727    6                             ERROR = %E$NOTOPIC;
      860     9728    6                             RESULTS.NOMSG = TRUE#;
      861     9729    6                             ALTRETURN;
      862     9730    6                             END;
      863     9731    5                        END;
      864     9732                                                /* Check II and munge into key        */
      865     9733    4                    SRCH_START = 0;
      866     9734    4   SEARCH_IT:       CALL SEARCH(SRCH_IDX,SRCH_VAL,SRCH_TBL,
      867     9735    4                     TEXT,SRCH_START) ALTRET(SEARCH_DONE);
      868     9736    4                    IF SUBSTR(TEXT,SRCH_IDX,1) ~= ' '
      869     9737    4                     THEN                  /* Trash encountered                  */
      870     9738    5                      DO;
      871     9739    5   DB_ERROR:            ERROR = %E$HELPDERR;    /* HELP database error           */
      872     9740    5                        GOTO HELPTEXT_ABORT;
      873     9741    5                        END;
      874     9742    4                      IF SRCH_START = SRCH_IDX
      875     9743    4                        THEN               /* Consecutive spaces, keep looking   */
      876     9744    5                          DO;
      877     9745    5                            SRCH_START = SRCH_IDX +1;
      878     9746    5                            GOTO SEARCH_IT;    /* Continue searching             */
      879     9747    5                            END;
      880     9748    4                        ELSE               /* Spaces skipped a number            */
      881     9749    5   SEARCH_DONE:           DO;
      882     9750    5                            CALL CHARBIN(CONV_UBIN,
      883     9751    5                             SUBSTR(TEXT,SRCH_START,
      884     9752    5                              SRCH_IDX - SRCH_START));
      885     9753    5                            IF CONV_UBIN > BITBIN('777'O)
      886     9754    5                             THEN          /* II is too big                      */
      887     9755    5                               GOTO DB_ERROR;    /* Database error               */
      888     9756    5                            CALL CONCAT(RETURNKEY.TEXT,SUBSTR(KEY1.TEXT,0,KEY1.LEN),
      889     9757    5                            ZERO_CHAR,BINASC(CONV_UBIN),ZERO_CHAR);
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:39   
      890     9758    5                           RETURNKEY.LEN = KEY1.LEN +3;   /* Make read key w/ II */
      891     9759    5                            END;
      892     9760    4                    END;
      893     9761    3                 ELSE                      /* No SUBTOPIC was passed             */
      894     9762    4                 DO;
      895     9763    4   DFLT_STOPIC:     CALL CONCAT(RETURNKEY.TEXT,SUBSTR(KEY1.TEXT,0,KEY1.LEN),
      896     9764    4                      ZERO_CHAR,ZERO_CHAR,ZERO_CHAR);    /* II,JJ of zero        */
      897     9765    4                    RETURNKEY.LEN = KEY1.LEN +3;
      898     9766    4                    END;
      899     9767    3                 END;
      900     9768
      901     9769    2               ELSE                        /* No TOPIC was passed                */
      902     9770    3              DO;
      903     9771    3   DFLT_TOPIC:    CALL CONCAT(RETURNKEY.TEXT,ZERO_CHAR,ZERO_CHAR,ZERO_CHAR);
      904     9772    3                  RETURNKEY.LEN = 3;
      905     9773    3                 END;
      906     9774
      907     9775    2   MAKE_END:  CALL CONCAT(ENDKEY.TEXT,SUBSTR(RETURNKEY.TEXT,0,RETURNKEY.LEN -1),
      908     9776    2                HIGH_CHAR);
      909     9777    2              ENDKEY.LEN = RETURNKEY.LEN;     /* Use '99' to make range end      */
      910     9778
      911     9779    2              IF V$# -> FPT$HELP_V.ALL
      912     9780    2              THEN                         /* ?? specified, bump II to 99        */
      913     9781    2                 CALL INSERT(ENDKEY.TEXT,ENDKEY.LEN -2,1,HIGH_CHAR);
      914     9782
      915     9783        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:40   
      916     9784    2   USE_END:
      917     9785                                                /* Now, one way or another, we have   */
      918     9786                                                /* created a range of keys for HELP   */
      919     9787                                                /* message text                       */
      920     9788    2           CALL READKEY ALTRET(HELPTEXT_ABORT);    /* Position to range start    */
      921     9789    3           DO WHILE (RETURNKEY.TEXT < ENDKEY.TEXT AND RETURNKEY.LEN ~= 0);
      922     9790    3              IF RECORD_TYPE = TEXT_REC#
      923     9791    3              THEN
      924     9792    3                 CALL BUFFER_HELP(%LINES#) ALTRET(HELPTEXT_ABORT);
      925     9793    3              CALL READSEQ ALTRET(HELPTEXT_ABORT);
      926     9794    3              END;
      927     9795
      928     9796    2           IF RESULTS.RECCNT = 0
      929     9797    2            THEN                           /* We couldn't find anything          */
      930     9798    2              IF V$# -> FPT$HELP_V.ALL
      931     9799    2               OR V$# -> FPT$HELP_V.MORE
      932     9800    2               THEN                        /* No HELP remains                    */
      933     9801    2                  ERROR = %E$NOMOREHELP;
      934     9802    2               ELSE                        /* Bad or empty HELP range            */
      935     9803    2                  ERROR = %E$NOTOPIC;
      936     9804
      937     9805    2        RETURN;
      938     9806    2   END HELP_TEXT;
      939     9807        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:41   
      940     9808    1   LIST_SUB_TOPICS: PROC ALTRET;
      941     9809    2             IF V$# -> FPT$HELP_V.XLATEKEY
      942     9810    2              THEN                     /* KEY translation to upper case OK   */
      943     9811    2                CASE_TRANS_OK = TRUE#;
      944     9812    2              ELSE
      945     9813    2                CASE_TRANS_OK = FALSE#;
      946     9814    2   TRY_KEY1: TRYKEY.LEN = KEY1.LEN;    /* Set starting key                   */
      947     9815    2             TRYKEY.TEXT = KEY1.TEXT;
      948     9816    2             CALL ABBREV ALTRET(ABORT_LIST_LOW_TOPIC);     /* Find TOPIC         */
      949     9817    2             IF RETURNKEY.LEN = 0
      950     9818    2              THEN                     /* Abbreviation not found             */
      951     9819    3               DO;
      952     9820    3                IF CASE_TRANS_OK
      953     9821    3                 THEN                  /* We failed in (perhaps) lower case  */
      954     9822    4                   DO;
      955     9823    4                     CALL XLATE(KEY1.TEXT,EMH_UC_XLATE_TBL,KEY1.TEXT);
      956     9824    4                     CASE_TRANS_OK = FALSE#;    /* Don't try this again      */
      957     9825    4                     GOTO TRY_KEY1;
      958     9826    4                     END;
      959     9827    3                ERROR = %E$NOTOPIC;
      960     9828    3                RESULTS.NOMSG = TRUE#;
      961     9829    3                ALTRETURN;
      962     9830    3                END;
      963     9831                                            /* Major key found                    */
      964     9832    2             IF RECORD_TYPE = SYN_REC#
      965     9833    2              THEN                     /* User passed a synonym              */
      966     9834    3                 DO;
      967     9835    3                   KEY1.LEN = M$STAR$ -> F$DCB.ARS;    /* Key len<-data len  */
      968     9836    3                   KEY1.TEXT = SUBSTR(TEXT,0,KEY1.LEN);
      969     9837    3                   END;
      970     9838    2              ELSE                     /* User passed a real TOPIC name      */
      971     9839    3                DO;
      972     9840    3                  KEY1.TEXT = SUBSTR(RETURNKEY.TEXT,0,C_COUNT);
      973     9841    3                  KEY1.LEN = C_COUNT;    /* Abbreviate it to match database  */
      974     9842    3                  END;
      975     9843                                                /* KEY1 is now REAL major key         */
      976     9844    2             CALL CONCAT(RETURNKEY.TEXT,
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:42   
      977     9845    2                         SUBSTR(KEY1.TEXT,0,KEY1.LEN),
      978     9846    2                         ' ');
      979     9847    2             RETURNKEY.LEN = KEY1.LEN +1;
      980     9848    2             CALL READKEY ALTRET(ABORT_LIST_LOW_TOPIC);
      981     9849    3             DO WHILE (RETURNKEY.LEN ~= 0
      982     9850    3                AND RECORD_TYPE = DICT_REC#);
      983     9851    3                    TEXT = SUBSTR(RETURNKEY.TEXT,
      984     9852    3                                  KEY1.LEN +1,
      985     9853    3                                  RETURNKEY.LEN - KEY1.LEN -1);
      986     9854    3                    CALL BUFFER_HELP (%COLUMNS#) ALTRET(ABORT_LIST_LOW_TOPIC);
      987     9855    3                    CALL READSEQ ALTRET(ABORT_LIST_LOW_TOPIC);
      988     9856    3                    END;
      989     9857    2             RETURN;
      990     9858        /**/
      991     9859    2   ABORT_LIST_LOW_TOPIC: ;
      992     9860    2             ALTRETURN;
      993     9861        /**/
      994     9862    2             END LIST_SUB_TOPICS;
      995     9863        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:43   
      996     9864    1   LIST_MAJOR_TOPICS: PROC ALTRET;
      997     9865    2             IF V$# -> FPT$HELP_V.XLATEKEY
      998     9866    2              THEN                     /* KEY translation to upper case OK   */
      999     9867    2                CASE_TRANS_OK = TRUE#;
     1000     9868    2              ELSE
     1001     9869    2                CASE_TRANS_OK = FALSE#;
     1002     9870    2             IF WILDCARDING THEN
     1003     9871    3                DO;
     1004     9872    3                  KEY1.LEN = KEY1.LEN -1;  /* LEFT (CONSTANT) = RANGE START      */
     1005     9873    3                  KEY2 = KEY1;             /* RANGE IS KEY1>KEY1                 */
     1006     9874    3                  END;
     1007     9875    2   TRY_KEY1:
     1008     9876    2             CALL CONCAT(ENDKEY.TEXT,SUBSTR(KEY2.TEXT,0,KEY2.LEN),HIGH_CHAR);
     1009     9877    2             ENDKEY.LEN = KEY2.LEN +1;     /* ENDKEY is now set for a range up   */
     1010     9878                                                /* to the last key to match wildcard  */
     1011     9879    2             IF KEY1.LEN = 0
     1012     9880    2               THEN                        /* Can't position with KEY1           */
     1013     9881    3                DO;                        /* Make a real (low) KEY1             */
     1014     9882    3                   KEY1.LEN = 1;
     1015     9883    3                   KEY1.TEXT = BITASC('002'O);
     1016     9884    3                   END;
     1017     9885                                                /* Position to first TOPIC to list    */
     1018     9886    2             RETURNKEY = KEY1;             /* Set trial key                      */
     1019     9887    2             CALL READKEY ALTRET(ABORT_LIST_MAJOR_TOPICS);
     1020     9888    2             IF RETURNKEY.LEN = 0
     1021     9889    2              THEN                     /* Abbreviation not found             */
     1022     9890    3               DO;
     1023     9891    3                IF CASE_TRANS_OK
     1024     9892    3                 THEN                  /* We failed in (perhaps) lower case  */
     1025     9893    4                   DO;
     1026     9894    4                     CALL XLATE(KEY1.TEXT,EMH_UC_XLATE_TBL,KEY1.TEXT);
     1027     9895    4                     CASE_TRANS_OK = FALSE#;    /* Don't try this again      */
     1028     9896    4                     IF WILDCARDING THEN
     1029     9897    4                        KEY2 = KEY1;
     1030     9898    4                     GOTO TRY_KEY1;
     1031     9899    4                     END;
     1032     9900    3                END;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:44   
     1033     9901    3             DO WHILE (RETURNKEY.LEN ~= 0  /* DO WHILE RETURNKEY exists          */
     1034     9902    3               AND RETURNKEY.TEXT < ENDKEY.TEXT); /* AND it's in the range       */
     1035     9903    3               IF RECORD_TYPE ~= DICT_REC#
     1036     9904    3                THEN                       /* It is a topic or SYN, to be listed */
     1037     9905    4                DO;
     1038     9906    4                   TEXT = SUBSTR(RETURNKEY.TEXT,0,C_COUNT);
     1039     9907    4                   CALL BUFFER_HELP(%COLUMNS#) ALTRET(ABORT_LIST_MAJOR_TOPICS);
     1040     9908                                                /* Bump text to make the next key     */
     1041     9909    4                   RETURNKEY.LEN = RETURNKEY.LEN+1; /* SYN has no 0 at C_COUNT   */
     1042     9910    4                   RETURNKEY.TUBIN(C_COUNT) = 1;
     1043     9911    4                   CALL READKEY ALTRET(ABORT_LIST_MAJOR_TOPICS); /* Get next key  */
     1044     9912    4                   END;
     1045     9913    3                ELSE                       /* A DICT record, don't list it       */
     1046     9914    3                   CALL READSEQ ALTRET(ABORT_LIST_MAJOR_TOPICS);
     1047     9915    3                END;
     1048     9916    2   LIST_DONE:   ;
     1049     9917    2             RETURN;
     1050     9918        /**/
     1051     9919    2   ABORT_LIST_MAJOR_TOPICS: ;
     1052     9920    2             ALTRETURN;
     1053     9921        /**/
     1054     9922    2             END LIST_MAJOR_TOPICS;
     1055     9923        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:45   
     1056     9924    1   LIST_PROCS: PROC ALTRET;                /* The caller wants a list of         */
     1057     9925                                                /* processors that use M$HELP         */
     1058     9926                                                /* will have to do OPEN NEXTs         */
     1059     9927                                                /* ALTRETURN if an error              */
     1060     9928    2           IF (NOT V$# -> FPT$HELP_V.LIST) OR
     1061     9929    2             V$# -> FPT$HELP_V.ALL OR
     1062     9930    2             V$# -> FPT$HELP_V.MORE
     1063     9931    2           THEN
     1064     9932    3           DO;
     1065     9933    3              ERROR = %E$BADHOPT;
     1066     9934    3              ALTRETURN;
     1067     9935    3              END;
     1068     9936    2           IF WILDCARDING THEN
     1069     9937    2              KEY1.LEN = KEY1.LEN -1;      /* LEFT (CONSTANT) BECOMES RANGE START*/
     1070     9938    2           CALL CONCAT(M$STAR$ -> F$DCB.NAME.C,
     1071     9939    2            'HELP:',SUBSTR(KEY1.TEXT,0,KEY1.LEN));
     1072     9940    2           M$STAR$ -> F$DCB.NAME.L = KEY1.LEN +5;
     1073     9941    2           M$STAR$ -> F$DCB.WSR = 0;       /* OPEN from user's domain            */
     1074     9942    2           IF KEY2.LEN = 0                 /* IF KEY2 wasn't specified           */
     1075     9943    2            AND NOT RANGE                  /* AND it's not a RANGE               */
     1076     9944    2           THEN                            /* Wildcard for processor list        */
     1077     9945    2              KEY2 = KEY1;                 /* Make range end from wildcard       */
     1078     9946    2           CALL CONCAT(ENDKEY.TEXT,'HELP:',SUBSTR(KEY2.TEXT,0,KEY2.LEN),BITASC('777'O))
              9946                    ;
     1079     9947    2           ENDKEY.LEN = KEY2.LEN +6;       /* Make high end of range             */
     1080     9948                                                /* We now have (in one way or another)*/
     1081     9949                                                /* created a range of list file names */
     1082     9950    3           DO WHILE (FOREVER#);
     1083     9951    3              B$JIT$ -> B$JIT.DCB$ = M$STAR$;
     1084     9952    3              CALL FMN$OPNF(FPT_OPEN);     /* OPEN NEXT file                     */
     1085     9953    3              CALL HFF$TRAPALT ALTRET(FIN_P_LIST); /* Re-establish TRAP control  */
     1086     9954    3              IF M$STAR$ -> F$DCB.NAME.C > ENDKEY.TEXT /* If end of range hit    */
     1087     9955    3               OR M$STAR$ -> F$DCB.NAME.L = 0 /* No files left                   */
     1088     9956    3               THEN                        /* Quit                               */
     1089     9957    3                 GOTO FIN_P_LIST;
     1090     9958    3              TEXT = SUBSTR(M$STAR$ -> F$DCB.NAME.C,5); /* Remove 'HELP:'        */
     1091     9959    3              CALL INDEX1R(I,':',TEXT,M$STAR$ -> F$DCB.NAME.L -5)
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:46   
     1092     9960    3               ALTRET(BAD_NAME);           /* Point to ':' before LANG           */
     1093     9961    4              DO WHILE (NEVER#);
     1094     9962    4   BAD_NAME:     ERROR = %E$HELPDERR;      /* Call it database error             */
     1095     9963    4                 IF FOREVER# THEN ALTRETURN;
     1096     9964    4                 END;
     1097     9965    3              IF SUBSTR(TEXT,I +1,1) = NATIVE_LANG
     1098     9966    3              THEN                         /* Current file matches user's lang.  */
     1099     9967    4              DO;
     1100     9968    4                 CALL INSERT(TEXT,I,2,'  '); /* Stomp on :L                      */
     1101     9969    4                 CALL BUFFER_HELP(%COLUMNS#) ALTRET(PL_ABORT);
     1102     9970    5                 DO WHILE (NEVER#);
     1103     9971    5   PL_ABORT:        IF FOREVER# THEN ALTRETURN; /* Compiler kludge               */
     1104     9972    5                    END;
     1105     9973    4                 END;
     1106     9974    3              END;
     1107     9975    2   FIN_P_LIST:
     1108     9976    2           RETURN;
     1109     9977    2   END LIST_PROCS;
     1110     9978        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:47   
     1111     9979        /**/
     1112     9980        /*F*     NAME: ABBREV
     1113     9981        *
     1114     9982                 DESCRIPTION: ABBREV uses TRYKEY to find any record that
     1115     9983                      has a similar key.
     1116     9984
     1117     9985                      If an error occurs, this routine will ALTRET.
     1118     9986
     1119     9987                      This routine does a keyed READ with TRYKEY.  The first
     1120     9988                      C_COUNT characters of RETURNKEY are then compared to
     1121     9989                      TRYKEY.  The following situations are possible:
     1122     9990                       1) TRYKEY longer than RETURNKEY... ALTRETURN.
     1123     9991                       2) TRYKEY is equal in length to RETURNKEY:
     1124     9992                          A) contents match exactly... normal RETURN.
     1125     9993                          B) contents differ in any way... ALTRETURN.
     1126     9994                       3) TRYKEY is shorter than RETURNKEY:
     1127     9995                          A) TRYKEY is a substring of RETURNKEY:
     1128     9996                             a) RETURNKEY is the only key resembling
     1129     9997                                TRYKEY... normal RETURN.
     1130     9998                             b) TRYKEY is a substring of several topics...
     1131     9999                                ALTRETURN.
     1132    10000                          B) TRYKEY is not a substring of RETURNKEY... ALTRETURN.
     1133    10001
     1134    10002                      If all attempts to find a record fail, RETURNKEY.LEN is
     1135    10003                      set to 0.  If a record is found, RETURNKEY is its key.
     1136    10004        */
     1137    10005    1   ABBREV: PROC ALTRET;
     1138    10006        /**/
     1139    10007    2            RETURNKEY.LEN = TRYKEY.LEN;    /* Set up a key                       */
     1140    10008    2            RETURNKEY.TEXT = TRYKEY.TEXT;
     1141    10009    2            CALL READKEY ALTRET(ABBREV_ALT); /* Try it                           */
     1142    10010    2            IF RETURNKEY.LEN = 0           /* IF we didn't get a record          */
     1143    10011    2             THEN
     1144    10012    2               GOTO TRY_PREV;              /* Try previous record                */
     1145    10013    2            IF SUBSTR(TRYKEY.TEXT,0,TRYKEY.LEN)
     1146    10014    2             ~= SUBSTR(RETURNKEY.TEXT,0,TRYKEY.LEN)
     1147    10015    2             THEN                          /* TRYKEY isn't a SUBSTR of RETURNKEY */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:48   
     1148    10016    3               DO;
     1149    10017    3                 RETURNKEY.LEN = 0;
     1150    10018    3                 RETURNKEY.TEXT = ' ';
     1151    10019    3   TRY_PREV:     CALL READ_BACK ALTRET(ABBREV_ALT);
     1152    10020    3                 IF RETURNKEY.LEN = 0
     1153    10021    3                  THEN                     /* We didn't get a record             */
     1154    10022    3                    GOTO NO_MATCH;
     1155    10023    3                 IF SUBSTR(TRYKEY.TEXT,0,TRYKEY.LEN)
     1156    10024    3                  ~= SUBSTR(RETURNKEY.TEXT,0,TRYKEY.LEN)
     1157    10025    3                  THEN                     /* NOTHING CLOSE                      */
     1158    10026    4                  DO;
     1159    10027    4   NO_MATCH:        RETURNKEY.LEN = 0;
     1160    10028    4                    RETURN;
     1161    10029    4                    END;
     1162    10030    3                 END;
     1163    10031        /******************************************************************************/
     1164    10032        /*                                                                            */
     1165    10033        /*       fancy checking for unique substrings goes here (someday)             */
     1166    10034        /*                                                                            */
     1167    10035        /******************************************************************************/
     1168    10036    2   GOT_ABBREV:   RETURN;                   /* Pass it back                       */
     1169    10037        /**/
     1170    10038    2   ABBREV_ALT: ALTRETURN;                  /* Some error occured                 */
     1171    10039        /**/
     1172    10040    2   END ABBREV;
     1173    10041        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:49   
     1174    10042        /**/
     1175    10043        /*F*     NAME: BUFFER_HELP
     1176    10044        *
     1177    10045                 DESCRIPTION: BUFFER_HELP is called to show the TEXT buffer to
     1178    10046                      the user.  The parameter FUNCTION determines in what
     1179    10047                      form this is to be done.
     1180    10048
     1181    10049                      If FORMAT = %LINES#, TEXT is stuffed into the current buffer
     1182    10050                      chunk and output.
     1183    10051
     1184    10052                      If FORMAT = %COLUMNS#, TEXT is appended onto the end of
     1185    10053                      the currently growing buffer chunk.  Enough spaces are
     1186    10054                      provided so that the result will be seven 11-character
     1187    10055                      columns.
     1188    10056
     1189    10057                      If FORMAT = %FINISH#, the currently growing buffer chunk is
     1190    10058                      written out.
     1191    10059
     1192    10060                      If an error occurs, this routine will ALTRET.
     1193    10061
     1194    10062                      The internal routine HELP_WRITE is used to output the
     1195    10063                      data.
     1196    10064
     1197    10065        */
     1198    10066    1   BUFFER_HELP: PROC(FUNCTION) ALTRET;
     1199    10067        /**/
     1200    10068    2   DCL FUNCTION SBIN WORD;
     1201    10069    2   DCL LENGTH SBIN WORD;
     1202    10070        /**/
     1203    10071    3            DO CASE(FUNCTION);
     1204    10072    3             CASE(%LINES#);                 /* Write out TEXT on one line         */
     1205    10073    3                 IF RESULTS.RECCNT > HELP_RECS
     1206    10074    3                   AND (V$#->FPT$HELP_V.OUTDCB1 = 0
     1207    10075    3                    OR RESULTS.OUTERR1)
     1208    10076    3                   AND (V$#->FPT$HELP_V.OUTDCB2 = 0
     1209    10077    3                    OR RESULTS.OUTERR2)
     1210    10078    3                   THEN GOTO SKIP_PUT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:50   
     1211    10079    3                    BUF$ -> B$BUFFER = TEXT;
     1212    10080    3   SKIP_PUT:
     1213    10081    3                 CALL HELP_WRITE ALTRET(BUFFER_HELP_ALT);
     1214    10082    3             CASE(%COLUMNS#);               /* Add TEXT onto growing buffer chunk */
     1215    10083    3                CALL INDEX(LENGTH,' ',TEXT);  /* Find entry length               */
     1216    10084    3                IF COLUMN + LENGTH > SLOT_SIZE#
     1217    10085    3                 THEN                      /* No room on current line            */
     1218    10086    4                   DO;
     1219    10087    4                     CALL HELP_WRITE ALTRET(BUFFER_HELP_ALT);
     1220    10088    4                     COLUMN = 0;           /* Start a new line                   */
     1221    10089    4                     BUF$ -> B$BUFFER = ' ';
     1222    10090    4                     END;
     1223    10091    3                CALL INSERT(BUF$ -> B$BUFFER,COLUMN,LENGTH,TEXT);
     1224    10092    3                COLUMN = COLUMN + LENGTH + (11 - MOD(LENGTH,11));
     1225    10093    3             CASE(%FINISH#);                /* Finish a growing buffer            */
     1226    10094    3                 CALL HELP_WRITE ALTRET(BUFFER_HELP_ALT);
     1227    10095    3             END;                          /* END DO CASE                        */
     1228    10096    2            RETURN;
     1229    10097        /**/
     1230    10098    2   BUFFER_HELP_ALT: ALTRETURN;             /* Some error occured                 */
     1231    10099        /**/
     1232    10100        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:51   
     1233    10101        /**/
     1234    10102        /*F*     NAME: HELP_WRITE
     1235    10103        *
     1236    10104                 DESCRIPTION: HELP_WRITE WRITEs a line of HELP through any
     1237    10105                      user passed DCBs and bumps BUF$ to the next available
     1238    10106                      buffer slot.
     1239    10107
     1240    10108                      This routine is internal to BUFFER_HELP.
     1241    10109
     1242    10110                      If an error occurs, the RESULTS.OUTERRn flag is set and
     1243    10111                      the error code is placed in RESULTS.ERRCODEn.  Further
     1244    10112                      WRITEs through that DCB are inhibited.
     1245    10113
     1246    10114                      If Buffer slots run out, BUF$ will not be incremented.
     1247    10115                      This over-writes the last buffer slot.
     1248    10116
     1249    10117                      This routine takes the ALTRETURN only if no DCB
     1250    10118                      is fit(HA, HA) to WRITE output AND the buffer slots are
     1251    10119                      all used up.
     1252    10120        */
     1253    10121    2   HELP_WRITE: PROC ALTRET;
     1254    10122        /**/
     1255    10123        /*  Insure we have someplace to put message.  */
     1256    10124        /**/
     1257    10125    3           IF RESULTS.RECCNT > HELP_RECS   /* No buffer slots left               */
     1258    10126    3            AND (V$# -> FPT$HELP_V.OUTDCB1 = 0
     1259    10127    3             OR RESULTS.OUTERR1)           /* AND OUTDCB1 is worthless           */
     1260    10128    3            AND (V$# -> FPT$HELP_V.OUTDCB2 = 0
     1261    10129    3             OR RESULTS.OUTERR2)           /* AND OUTDCB2 is worthless           */
     1262    10130    3            THEN                           /* Noplace to write to, and no buffer */
     1263    10131    3              GOTO ABORT_WRITE;
     1264    10132        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:52   
     1265    10133        /**/
     1266    10134        /*  Abort if CTRL-Y or BREAK hit us.  */
     1267    10135        /**/
     1268    10136    3           IF S$CU$ -> B$U.ASYNCH & (%U_BRK|%U_YC)
     1269    10137    3            THEN
     1270    10138    4              DO;
     1271    10139    4                ERROR = %E$BREAK;
     1272    10140    4                GOTO ABORT_WRITE;
     1273    10141    4                END;
     1274    10142        /**/
     1275    10143    3           FPT_WRITE.BUF_.BUF$ = BUF$;     /* Point WRITE to current buf slot    */
     1276    10144        /**/
     1277    10145    3           IF (( V$# -> FPT$HELP_V.OUTDCB1 ~= 0) AND
     1278    10146    3             (RESULTS.OUTERR1 = FALSE#))
     1279    10147    3           THEN                            /* OUTDCB1 is functional              */
     1280    10148    4           DO;
     1281    10149    4              FPT_WRITE.V.DCB# = V$# -> FPT$HELP_V.OUTDCB1;
     1282    10150    4              CALL M$MWRITE (FPT_WRITE) ALTRET (HELP_W1ERR);
     1283    10151    5              DO WHILE (NEVER#);
     1284    10152    5   HELP_W1ERR:   ;
     1285    10153    5                 RESULTS.OUTERR1 = TRUE#;
     1286    10154    5                 RESULTS.ERRCODE1 = B$JIT$ -> B$JIT.ERR;
     1287    10155    5                 END;
     1288    10156    4              CALL HFF$TRAPALT ALTRET(ABORT_WRITE);
     1289    10157    4              END;
     1290    10158        /**/
     1291    10159    3   WRITE_2:
     1292    10160    3           IF (( V$# -> FPT$HELP_V.OUTDCB2 ~= 0) AND
     1293    10161    3             (RESULTS.OUTERR2 = FALSE#))
     1294    10162    3           THEN                            /* OUTDCB2 is functional              */
     1295    10163    4           DO;
     1296    10164    4              FPT_WRITE.V.DCB# = V$# -> FPT$HELP_V.OUTDCB2;
     1297    10165    4              CALL M$MWRITE (FPT_WRITE) ALTRET (HELP_W2ERR);
     1298    10166    5              DO WHILE (NEVER#);
     1299    10167    5   HELP_W2ERR:   RESULTS.OUTERR2 = TRUE#;
     1300    10168    5                 RESULTS.ERRCODE2 = B$JIT$ -> B$JIT.ERR;
     1301    10169    5                 END;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:53   
     1302    10170    4              CALL HFF$TRAPALT ALTRET(ABORT_WRITE);
     1303    10171    4              END;
     1304    10172        /**/
     1305    10173    3           RESULTS.RECCNT = RESULTS.RECCNT +1; /* Count this record processed    */
     1306    10174    3           IF RESULTS.RECCNT = 0
     1307    10175    3            THEN                           /* RECCNT has overflowed              */
     1308    10176    4              DO;
     1309    10177    4                 ERROR = %E$HERROR;        /* HELP ERROR                         */
     1310    10178    4                 ALTRETURN;
     1311    10179    4                 END;
     1312    10180    3           IF RESULTS.RECCNT > HELP_RECS
     1313    10181    3            THEN                           /* Buffer exhausted                   */
     1314    10182    3              RESULTS.MSGCOMP = FALSE#;    /* Overwrite the last buffer slot     */
     1315    10183    3            ELSE                           /* Buffer slots remain                */
     1316    10184    3              BUF$ = PINCRC(BUF$,SLOT_SIZE#); /* Bump to next buffer slot        */
     1317    10185        /**/
     1318    10186    3           RETURN;
     1319    10187        /**/
     1320    10188    3   ABORT_WRITE: ;
     1321    10189    3           ALTRETURN;
     1322    10190        /**/
     1323    10191    3   END HELP_WRITE;
     1324    10192        /**/
     1325    10193    2   END BUFFER_HELP;
     1326    10194        /**/
     1327    10195        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:54   
     1328    10196        /**/
     1329    10197        /*F*     NAME: READKEY
     1330    10198        *
     1331    10199                 DESCRIPTION: READKEY does an M$MREAD into the TEXT buffer, telling
     1332    10200                      it to position to RETURNKEY.
     1333    10201
     1334    10202                      If the specified key does not exist (and a next record
     1335    10203                      does exist), the routine falls into READSEQ to process
     1336    10204                      the next record.
     1337    10205
     1338    10206                      If the specified key does not exist and the next record is
     1339    10207                      EOF, the normal return is taken, with a key length of 0.
     1340    10208
     1341    10209                      The routine then examines RETURNKEY by falling into EVAL_KEY.
     1342    10210                      See EVAL_KEY for details of the check.
     1343    10211
     1344    10212                      In the event of an error on the M$MREAD, this proc will ALTRET.
     1345    10213        */
     1346    10214    1   READKEY: PROC ALTRET;
     1347    10215        /**/
     1348    10216    2           TEXT = ' ';
     1349    10217    2           FPT_READ.V.KEYS# = TRUE#; /* Keyed READs                */
     1350    10218    2           CALL M$MREAD(FPT_READ) ALTRET(RDKY_ALT);
     1351    10219    2           CALL HFF$TRAPALT ALTRET(HIN_ERR);
     1352    10220    3           DO WHILE (NEVER#);
     1353    10221    3   RDKY_ALT:  ;
     1354    10222    3              CALL HFF$TRAPALT ALTRET(HIN_ERR);
     1355    10223    3              IF B$JIT$ -> B$JIT.ERR.CODE = %E$NOKEY
     1356    10224    3              THEN                         /* No such key on a READ              */
     1357    10225    3                 IF RETURNKEY.LEN = 0
     1358    10226    3                  THEN                     /* Next record is EOF                 */
     1359    10227    3                    GOTO NO_REC_LEFT;
     1360    10228    3                  ELSE                     /* A next record does exist           */
     1361    10229    3                     GOTO R_SEQN;          /* Read it                            */
     1362    10230    3               ELSE                        /* Some other (fatal) READ error      */
     1363    10231    3              IF B$JIT$ -> B$JIT.ERR.CODE = %E$LD /* Database record too big     */
     1364    10232    3               THEN                        /* Database error                     */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:55   
     1365    10233    3                  GOTO DIN_ERR;
     1366    10234                                                /* Some other (fatal) input error     */
     1367    10235    3              GOTO HIN_ERR;
     1368    10236    3              END;
     1369    10237    2           GOTO EVAL_KEY;                  /* Skip code for READSEQ ENTRY        */
     1370    10238        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:56   
     1371    10239        /**/
     1372    10240        /*F*     NAME: READ_BACK
     1373    10241        *
     1374    10242                 DESCRIPTION: READ_BACK does an M$MPRECORD of -2 on the HELP file
     1375    10243                      to position before the record before the one we just read.
     1376    10244
     1377    10245                      If a preceeding record is found, it is read by falling
     1378    10246                      into READSEQ.
     1379    10247
     1380    10248                      PRECORDing to BOF will normal return with RETURNKEY.LEN = 0.
     1381    10249
     1382    10250                      In the event of an error on the M$MPRECORD, this proc will ALTRET.
     1383    10251        */
     1384    10252    2   READ_BACK: ENTRY ALTRET;
     1385    10253        /**/
     1386    10254    2           CALL M$MPRECORD(FPT_PREC) ALTRET(PREC_ALT);
     1387    10255    2           CALL HFF$TRAPALT ALTRET(HIN_ERR);
     1388    10256    3           DO WHILE (NEVER#);
     1389    10257    3   PREC_ALT:  ;
     1390    10258    3              CALL HFF$TRAPALT ALTRET(HIN_ERR);
     1391    10259    3              IF B$JIT$ -> B$JIT.ERR.CODE = %E$BOF
     1392    10260    3              THEN                         /* BOF on precord                     */
     1393    10261    3                GOTO NO_REC_LEFT;
     1394    10262    3              ELSE                         /* Some other (fatal) error occured   */
     1395    10263    4              DO;
     1396    10264    4                 ERROR = %E$HERROR;
     1397    10265    4                 RESULTS.INERR = TRUE#;
     1398    10266    4                 ALTRETURN;
     1399    10267    4                 END;
     1400    10268    3              END;
     1401    10269    2           GOTO R_SEQN;
     1402    10270        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:57   
     1403    10271        /**/
     1404    10272        /*F*     NAME: READSEQ
     1405    10273        *
     1406    10274                 DESCRIPTION: READSEQ does a sequential M$MREAD on the HELP file
     1407    10275                      into the TEXT buffer.
     1408    10276                      The resulting key is placed in RETURNKEY.
     1409    10277
     1410    10278                      READing to EOF will normal return with RETURNKEY.LEN = 0.
     1411    10279
     1412    10280                      The routine then examines RETURNKEY by falling into EVAL_KEY.
     1413    10281                      See EVAL_KEY for details of the check.
     1414    10282
     1415    10283                      In the event of an error on the M$MREAD, this proc will ALTRET.
     1416    10284        */
     1417    10285    2   READSEQ: ENTRY ALTRET;
     1418    10286        /**/
     1419    10287    2   R_SEQN: TEXT = ' ';
     1420    10288    2           FPT_READ.V.KEYS# = FALSE#;  /* SEQUEN */
     1421    10289    2           CALL M$MREAD(FPT_READ) ALTRET(READ_ALT);
     1422    10290    2           CALL HFF$TRAPALT ALTRET(HIN_ERR);
     1423    10291    3           DO WHILE (NEVER#);
     1424    10292    3   READ_ALT:  ;
     1425    10293    3              CALL HFF$TRAPALT ALTRET(HIN_ERR);
     1426    10294    3              IF B$JIT$ -> B$JIT.ERR.CODE = %E$EOF
     1427    10295    3              THEN                         /* Only an EOF on input               */
     1428    10296    4   NO_REC_LEFT: DO;
     1429    10297    4                  RETURNKEY.LEN = 0;       /* Flag 'no records left'             */
     1430    10298    4                  RETURN;                  /* Normal return                      */
     1431    10299    4                  END;
     1432    10300    3              IF B$JIT$ -> B$JIT.ERR.CODE = %E$LD /* Database record too big     */
     1433    10301    3               THEN                        /* Database error                     */
     1434    10302    4                  DO;
     1435    10303    4   DIN_ERR:         ERROR = %E$HELPDERR;
     1436    10304    4                    GOTO IN_ERR;
     1437    10305    4                    END;
     1438    10306                                                /* Some other (fatal) input error     */
     1439    10307    3   HIN_ERR:   ERROR = %E$HERROR;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:58   
     1440    10308    3   IN_ERR:    RESULTS.INERR = TRUE#;
     1441    10309    3              ALTRETURN;
     1442    10310    3              END;
     1443    10311        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:59   
     1444    10312        /**/
     1445    10313        /*F*     NAME: EVAL_KEY
     1446    10314        *
     1447    10315                 DESCRIPTION: EVAL_KEY evaluates RETURNKEY after a READ or
     1448    10316                      PRECORD.
     1449    10317
     1450    10318                      RECORD_TYPE is set to TEXT_REC#, DICT_REC#, or SYN_REC#.
     1451    10319
     1452    10320                      C_COUNT is set to the number of characters in the beginning
     1453    10321                      of the key (before any separator).
     1454    10322
     1455    10323                      POSITION becomes C_COUNT +1, the index of any second part
     1456    10324                      of the key that may exist.
     1457    10325        */
     1458    10326    2   EVAL_KEY:
     1459    10327        /**/
     1460    10328    2           CALL INDEX(C_COUNT,ZERO_CHAR,
     1461    10329    2            RETURNKEY.TEXT,0);             /* Look for binary zeroes             */
     1462    10330    2           IF C_COUNT < RETURNKEY.LEN
     1463    10331    2            THEN                           /* Binary zeroes found, TEXT record   */
     1464    10332    3              DO;
     1465    10333    3                POSITION = C_COUNT +1;
     1466    10334    3                RECORD_TYPE = TEXT_REC#;
     1467    10335    3                END;
     1468    10336    2            ELSE                           /* No zeroes found, SYN or DICT rec   */
     1469    10337    3              DO;
     1470    10338    3                CALL INDEX(C_COUNT,' ',RETURNKEY.TEXT,0); /* Look for a blank    */
     1471    10339    3                IF C_COUNT < RETURNKEY.LEN
     1472    10340    3                 THEN                      /* Blank found, must be DICTIONARY    */
     1473    10341    4                   DO;
     1474    10342    4                     POSITION = C_COUNT +1; /* Point to SUBTOPIC in RETURNKEY    */
     1475    10343    4                     RECORD_TYPE = DICT_REC#;
     1476    10344    4                     END;
     1477    10345    3                 ELSE                           /* No blank, SYN record          */
     1478    10346    4                   DO;
     1479    10347    4                     C_COUNT = RETURNKEY.LEN; /* Fake a pointer for KEY1 testing */
     1480    10348    4                     POSITION = C_COUNT +1;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:60   
     1481    10349    4                     RECORD_TYPE = SYN_REC#;
     1482    10350    4                     END;
     1483    10351    3                  END;
     1484    10352        /**/
     1485    10353    2           RETURN;
     1486    10354        /**/
     1487    10355    2   END READKEY;
     1488    10356        /**/
     1489    10357    1   END EMH$HELP;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:61   
--  Include file information  --

   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   UM$CP6V_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure EMH$HELP.

   Procedure EMH$HELP requires 1876 words for executable code.
   Procedure EMH$HELP requires 94 words of local(AUTO) storage.

    No errors detected in file EMH$HELP.:E05TSI    .

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:62   

 Object Unit name= EMH$HELP                                   File name= EMH$HELP.:E05TOU
 UTS= JUL 29 '97 15:20:45.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     84    124  EMH$HELP
    2   Proc  even  none  1876   3524  EMH$HELP
    3  RoData even  none    23     27  EMH$HELP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  EMH$HELP
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:63   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
         yes           Std       1 FMD$GBUF
 yes     yes           Std       0 HFF$TRAPALT
 yes     yes           Std       2 HFF$DSIZ
 yes     yes           Std       1 HFF$NILERASE
         yes           Std       0 FMP$CLSJ
         yes           Std       1 FMM$SCRUB
         yes           Std       4 FMF$ICORRES
         yes           Std       1 FMD$RBUF
         yes           Std       0 FMM$DFLOPN
 yes     yes           Std       0 UMD$CHKOPN
         yes           Std       1 FMO$GETDOMAIN
         yes           Std       0 FMM$DFLOPNSYS
         yes           Std       1 FMN$OPNF
 yes     yes           Std       1 M$MWRITE
 yes     yes           Std       1 M$MREAD
 yes     yes           Std       1 M$MPRECORD
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    B$JIT$                                S$CU$
r    B$PS0$                           r    B$PS1$                           r    B$PS2$
r    B$PS3$                           r    B$PS4$                           r    B$PS5$
r    B$PS6$                           r    B$PS7$                           r    B$SR_NON_DEC$
r    B$XL_UPPER$                           B_VECTNIL
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:64   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:65   


        1        1        /*M*     EMH$HELP - HELP MESSAGE REPORTER */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*/
        8        8        /*P*     NAME:     EMH$HELP
        9        9        *
       10       10                 PURPOSE:  EMH$HELP is a monitor service called to read messages
       11       11                      from a file and output them to the user.  */
       12       12        /**/
       13       13        /*F*     NAME:     EMH$HELP
       14       14        *
       15       15                 FUNCTION: EMH$HELP is a service called by the user to read
       16       16                      messages from a file into the users buffer and to optionally
       17       17                      output them through the users DCBs. The message is requested
       18       18                      from the appropriate error message file with a set of KEYWORDS
       19       19                      with the possibility of a substitue message being supplied
       20       20                      if the requested one doesn't exist. The requested message
       21       21                      may be output, or placed in a buffer to be returned to the caller. */
       22       22        /**/
       23       23        /*D*     NAME:     EMH$HELP
       24       24        *
       25       25                 CALL:     EMH$HELP is called via a PMME with an FPT containing
       26       26                      the following parameters:
       27       27        *
       28       28                      V - Value field of FPT contains:
       29       29                          OUTDCB1 - number of DCB through which message it to be output.
       30       30                          OUTDCB2 - number of secode output DCB.
       31       31                          LIST - bit indicating that a list of HELP topics, not
       32       32                                 the actual text, is to be output.
       33       33                          ALL - bit indicating that all of the remaining HELP on the
       34       34                                current topic is to be output.
       35       35                          MORE - bit indicating that the next subtopic of the current
       36       36                                 topic is to be output.
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:66   
       37       37                          RANGE - bit indicating that the passed keywords specify a
       38       38                                  range of HELP text, rather than a single message.
       39       39                          SUBTOPIC - bit permitting HELP to provide a default TOPIC
       40       40                                     if the passed one is unavailable.
       41       41                          SUBSTOPIC - bit permitting HELP to provide a default
       42       42                                       subtopic if the passed one is unavailable.
       43       43                          LANG - native language byte to be used instead of that in
       44       44                                 the user's JIT.
       45       45        *
       46       46                      KEY1 - Keyword used to find a HELP message.
       47       47        *
       48       48                      KEY2 - Second keyword used to find a HELP message.
       49       49        *
       50       50                      BUF - User's buffer consisting of some number of 79-character
       51       51                            slots into which the message is read.
       52       52        *
       53       53                      PROCNAME - The name of the processor for which HELP is requested.
       54       54        *
       55       55                      PROCACCT - The account in which the HELP database resides.
       56       56        *
       57       57                      PROCPASS - The password assigned to the HELP database.
       58       58        *
       59       59                      RESULTS - A status and scratch area for M$HELP.  RESULTS contains:
       60       60                          BADCALL - bit indicating that the call contained one or more
       61       61                                    illegal parameters.
       62       62                          NOMSG - bit indicating that M$HELP was unable to find a message.
       63       63                         ALTMSG - bit indicating that M$HELP supplied a substitute message.
       64       64                          MSGCOMP - bit indicating that the buffer contains the complete
       65       65                                    message.
       66       66                          OUTERR1 - bit indicating that an error occured on OUTDCB1.
       67       67                          OUTERR2 - bit indicating that an error occured on OUTDCB1.
       68       68                          INERR - bit indicating that an error occured on input.
       69       69                          NNATIVE - bit indicating that the supplied HELP is not in
       70       70                                    the user's native language.
       71       71                          BUFERR - bit indicating that the passed buffer was bad.
       72       72                          RECCNT - UBIN(18) count of records read into the buffer.
       73       73                          ERRCODE1 - the error code encountered on OUTDCB1.
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:67   
       74       74                          ERRCODE2 - the error code encountered on OUTDCB1.
       75       75                          CODEUSED - a scratch area used by M$HELP for finding the
       76       76                                     next chunk of text for ALL and MORE.
       77       77        */
       78       78        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:68   
       79       79        EMH$HELP: PROC ;

     79  2 000000   000000 700200 xent  EMH$HELP     TSX0  ! X66_AUTO_0
         2 000001   000136 000000                    ZERO    94,0

       80       80        /**/
       81       81        /*************************************************************/
       82       82        /*   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   */
       83       83        /*************************************************************/
       84       84        /**/
       85       85                                                /* Logical SUBs                       */
       86       86        %SUB TRUE# = '1'B;
       87       87        %SUB FALSE# = '0'B;
       88       88                                                /* Record type SUBs                   */
       89       89        %SUB TEXT_REC# = 1;
       90       90        %SUB DICT_REC# = 2;
       91       91        %SUB SYN_REC# = 3;
       92       92                                                /* DO group SUBs                      */
       93       93        %SUB FOREVER# = '1'B;
       94       94        %SUB NEVER# = '0'B;
       95       95                                                /* EQUs for output format             */
       96       96        %EQU LINES# = 1;
       97       97        %EQU COLUMNS# = 2;
       98       98        %EQU FINISH# = 3;
       99       99                                                /* %SUBs for parameter stack level    */
      100      100        %SUB V_PS# = 0;
      101      101        %SUB KEY1_PS# = 1;
      102      102        %SUB KEY2_PS# = 2;
      103      103        %SUB BUF_PS# = 3;
      104      104        %SUB PROCNAME_PS# = 4;
      105      105        %SUB PROCACCT_PS# = 5;
      106      106        %SUB PROCPASS_PS# = 6;
      107      107        %SUB RESULTS_PS# = 7;
      108      108        %SUB PROCPSN_PS# = 7;
      109      109                                                /* SUBS for parameter stack pointers  */
      110      110        %SUB V$# = B$PS0$;
      111      111        %SUB KEY1$# = B$PS1$;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:69   
      112      112        %SUB KEY2$# = B$PS2$;
      113      113        %SUB BUF$# = B$PS3$;
      114      114        %SUB PROCNAME$# = B$PS4$;
      115      115        %SUB PROCACCT$# = B$PS5$;
      116      116        %SUB PROCPASS$# = B$PS6$;
      117      117        %SUB RESULTS$# = B$PS7$;
      118      118        %SUB PROCPSN$# = B$PS8$;
      119      119                                                /* SUBS for fundamental constants     */
      120      120        %SUB SLOT_SIZE# = 79;
      121      121        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:70   
      122      122        /***********************************************************************/
      123      123        /*    ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   */
      124      124        /**********************************************************************/
      125      125        /**/
      126      126    1   DCL FMF$ICORRES ENTRY(4);               /* To check DCBs                      */
      127      127    1   DCL FMM$DFLOPNSYS ENTRY;                /* OPEN M$* without checking WSR=0/1  */
      128      128    1   DCL FMM$DFLOPN ENTRY;                   /* OPEN M$* (WSR must be 0 or 1)      */
      129      129    1   DCL FMN$OPNF ENTRY(1);                  /* TO OPEN NEXT HELP FILE             */
      130      130    1   DCL FMM$SCRUB ENTRY(1);
      131      131    1   DCL FMP$CLSJ ENTRY;
      132      132    1   DCL HFF$NILERASE ENTRY(1) ALTRET;       /* TO TEST PS DESC. FOR NULL          */
      133      133    1   DCL HFF$DSIZ ENTRY(2) ALTRET;           /* RETURN SIZE OF A PARAMETER         */
      134      134    1   DCL HFF$TRAPALT ENTRY ALTRET;           /* TO PROVIDE TRAP ENTRY ADDRESS      */
      135      135    1   DCL M$MREAD ENTRY(1) ALTRET;            /* INTERNAL READ                      */
      136      136    1   DCL M$MWRITE ENTRY(1) ALTRET;           /* INTERNAL WRITE                     */
      137      137    1   DCL M$MPRECORD ENTRY(1) ALTRET;         /* INTERNAL PRECORD                   */
      138      138    1   DCL M$MFID ENTRY(1) ALTRET;             /* INTERNAL FID                       */
      139      139    1   DCL FMO$GETDOMAIN ENTRY(1);             /* Find out WSR for caller            */
      140      140    1   DCL UMD$CHKOPN ENTRY ALTRET;            /* OPEN M$DRIBBLE IF NEEDED           */
      141      141    1   DCL FMD$GBUF ENTRY(1);                  /* TO ALLOCATE A POOL BUFFER          */
      142      142    1   DCL FMD$RBUF ENTRY(1);                  /* TO RELEASE A POOL BUFFER           */
      143      143        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:71   
      144      144        /**/
      145      145        /*********************************************************************/
      146      146        /*   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   */
      147      147        /*********************************************************************/
      148      148        /**/
      149      149        %INCLUDE F$DCB;
      150      198        %INCLUDE CP_6_SUBS;
      151      738        %INCLUDE CP_6;
      152     6297        %INCLUDE B$JIT;
      153     6900        %INCLUDE UM$CP6V_C;
      154     7087        %INCLUDE B$USER;                        /* USER TABLE ENTRY                   */
      155     7303        %INCLUDE B_ERRORS_C;                    /* Error EQUs                         */
      156     8430        %INCLUDE B$TABLES_C;
      157     8538        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:72   
      158     8539        /********************************************************************/
      159     8540        /*   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   */
      160     8541        /********************************************************************/
      161     8542        /**/
      162     8543        %FPT_READ     (FPTN = INIT_RFPT,
      163     8544                       KEYR = YES,              /* RETURN KEY                         */
      164     8545                       STCLASS = CONSTANT);
      165     8584        %FPT_WRITE    (FPTN = INIT_WFPT,
      166     8585                       STCLASS = CONSTANT);
      167     8616        %FPT_PRECORD  (FPTN = INIT_PRECFPT,
      168     8617                       N = -2,                  /* Backup before record we just read  */
      169     8618                       KEYR = YES,              /* Return key found                   */
      170     8619                       STCLASS = CONSTANT);
      171     8640        %FPT_OPEN     (FPTN = INIT_OPEN,
      172     8641                       NXTF = YES,
      173     8642                       THISF = NO,
      174     8643                        TEST = YES,
      175     8644                       FUN = IN,
      176     8645                       ASN = FILE,
      177     8646                       ACS = DIRECT,
      178     8647                       PFMT = PTR,              /* FPT for internal CALL              */
      179     8648                       VECTOR = ADDR,           /* FPT for internal CALL              */
      180     8649                       STCLASS = CONSTANT);
      181     8758        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:73   
      182     8759        /*****************************************************************************/
      183     8760        /*   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   */
      184     8761        /*****************************************************************************/
      185     8762        /**/
      186     8763    1   DCL M$STAR_NUM UBIN(36) CONSTANT INIT(1); /* M$* IS DCB ONE                   */
      187     8764    1   DCL ZERO_CHAR CHAR(1) CONSTANT INIT(BITASC('000'O));
      188     8765    1   DCL HIGH_CHAR CHAR(1) CONSTANT INIT(BITASC('777'O));
      189     8766        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:74   
      190     8767        /*****************************************************************/
      191     8768        /*   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   */
      192     8769        /*****************************************************************/
      193     8770        /**/
      194     8771    1   DCL B$JIT$ PTR SYMREF READONLY;         /* Locates current user's JIT         */
      195     8772    1   DCL S$CU$ PTR SYMREF;          /* Locates current USER TABLE entry   */
      196     8773        /**/
      197     8774    1   DCL B$PS0$ PTR SYMREF READONLY;
      198     8775    1   DCL B$PS1$ PTR SYMREF READONLY;
      199     8776    1   DCL B$PS2$ PTR SYMREF READONLY;
      200     8777    1   DCL B$PS3$ PTR SYMREF READONLY;
      201     8778    1   DCL B$PS4$ PTR SYMREF READONLY;
      202     8779    1   DCL B$PS5$ PTR SYMREF READONLY;
      203     8780    1   DCL B$PS6$ PTR SYMREF READONLY;
      204     8781    1   DCL B$PS7$ PTR SYMREF READONLY;
      205     8782    1   DCL B$PS8$ PTR SYMREF READONLY;
      206     8783        /**/
      207     8784        %B$SR_NON_DEC (NAME=SRCH_TBL);
      208     8788        %B$XL_UPPER (NAME=EMH_UC_XLATE_TBL);
      209     8792        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:75   
      210     8793        /*****************************************************************/
      211     8794        /*   LOCAL MACROS        LOCAL MACROS        LOCAL MACROS        */
      212     8795        /*****************************************************************/
      213     8796        /**/
      214     8797        %MACRO TEXTCX (NAME=NAME, STCLASS=STCLASS, SIZE=SIZE);
      215     8798        DCL 1 NAME STCLASS ALIGNED,
      216     8799              2 LEN UBIN(9) CALIGNED,
      217     8800              2 TEXT CHAR(SIZE) CALIGNED,
      218     8801              2 TCHAR(0:%(SIZE-1)) REDEF TEXT CHAR(1) CALIGNED,
      219     8802              2 TUBIN(0:%(SIZE-1)) REDEF TEXT UBIN(9) CALIGNED;
      220     8803        %MEND;
      221     8804        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:76   
      222     8805        /***************************************************************/
      223     8806        /* AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   */
      224     8807        /***************************************************************/
      225     8808        /**/
      226     8809                                                /* Local copies of passed things      */
      227     8810    1   DCL HELP_RECS UBIN WORD;
      228     8811    1   DCL BUFLEN SBIN WORD;
      229     8812    1   DCL LEN SBIN WORD;
      230     8813    1   DCL NAME_PASSED BIT(1);
      231     8814    1   DCL CASE_TRANS_OK BIT(1);
      232     8815    1   DCL BUF$ PTR ALIGNED;
      233     8816                                                /* Various local stuff                */
      234     8817    1   DCL NATIVE_LANG CHAR(1);                /* From JIT, blank if default         */
      235     8818    1   DCL RECORD_TYPE UBIN WORD;              /* TEXT/DICT/SYN record type          */
      236     8819    1   DCL I SBIN;                             /* INDEX                              */
      237     8820    1   DCL ERROR UBIN;                         /* ERROR CODE (NONE IF ZERO)          */
      238     8821    1   DCL COLUMN SBIN WORD;                   /* Counter for list formatting        */
      239     8822    1   DCL M$STAR$ PTR ALIGNED;                /* POINTER TO M$*                     */
      240     8823    1   DCL WILDCARDING BIT(1) ALIGNED;
      241     8824    1   DCL RANGE BIT(1) ALIGNED;
      242     8825                                                /* KEYS                               */
      243     8826        %TEXTCX (NAME = RETURNKEY, STCLASS = AUTO, SIZE = 63);
      244     8833    1   DCL POSITION UBIN;                      /* INDEX INTO RETURNKEY               */
      245     8834        %TEXTCX (NAME = ENDKEY, STCLASS = AUTO, SIZE = 63);
      246     8841        %TEXTCX (NAME = TRYKEY, STCLASS = AUTO, SIZE = 63);
      247     8848    1   DCL C_COUNT UBIN;                       /* INDEX INTO RETURNKEY               */
      248     8849    1   DCL SRCH_IDX UBIN WORD;
      249     8850    1   DCL SRCH_VAL UBIN WORD;
      250     8851    1   DCL SRCH_START UBIN WORD;
      251     8852    1   DCL CONV_UBIN UBIN WORD;
      252     8853                                                /* POINTERS FOR ALLOCATED DATA        */
      253     8854    1   DCL POOLBUF$ PTR AUTO;
      254     8855    1   DCL AD_RFPT$ PTR AUTO;                  /* READ FPT                           */
      255     8856    1   DCL AD_WFPT$ PTR AUTO;                  /* WRITE FPT                          */
      256     8857    1   DCL AD_PFPT$ PTR AUTO;                  /* PRECORD FPT                        */
      257     8858    1   DCL AD_OFPT$ PTR AUTO;                  /* OPEN FPT                           */
      258     8859    1   DCL AD_TBUF$ PTR AUTO;                  /* LIST FORMATTING BUFFER             */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:77   
      259     8860    1   DCL AD_KEY1$ PTR AUTO;                  /* KEYWORD1 BUFFER                    */
      260     8861    1   DCL AD_KEY2$ PTR AUTO;                  /* KEYWORD2 BUFFER                    */
      261     8862    1   DCL AD_RSLT$ PTR AUTO;                  /* VLR_HELP                           */
      262     8863        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:78   
      263     8864        /*****************************************************************************/
      264     8865        /*   ALLOCATED DATA      ALLOCATED DATA       ALLOCATED DATA                 */
      265     8866        /*****************************************************************************/
      266     8867        /**/
      267     8868        /*  The following data resides in a one-page pool buffer that we request on   */
      268     8869        /*  entry and must release on exit.  Implied pointers are used so that this   */
      269     8870        /*  area 'looks like' AUTO                                                    */
      270     8871        /**/
      271     8872        %FPT_READ     (FPTN = FPT_READ,
      272     8873                       STCLASS = "BASED(AD_RFPT$)");
      273     8912        %FPT_WRITE    (FPTN = FPT_WRITE,
      274     8913                       STCLASS = "BASED(AD_WFPT$)");
      275     8944        %FPT_PRECORD  (FPTN = FPT_PREC,
      276     8945                       STCLASS = "BASED(AD_PFPT$)");
      277     8966        %FPT_OPEN     (FPTN = FPT_OPEN,
      278     8967                       STCLASS = "BASED(AD_OFPT$)");
      279     9076    1   DCL TEXT CHAR(SLOT_SIZE#) BASED(AD_TBUF$); /* Buffer for list formatting      */
      280     9077        %TEXTCX (NAME = KEY1, STCLASS = "BASED(AD_KEY1$)", SIZE = 31);
      281     9084        %TEXTCX (NAME = KEY2, STCLASS = "BASED(AD_KEY2$)", SIZE = 31);
      282     9091        %VLR_HELP (FPTN = RESULTS, STCLASS = "BASED(AD_RSLT$)");
      283     9120        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:79   
      284     9121        /**********************************************************************/
      285     9122        /*   BASED DATA   BASED DATA   BASED DATA   BASED DATA   BASED DATA   */
      286     9123        /**********************************************************************/
      287     9124        /**/
      288     9125        %FPT$HELP_V  (FPTN = FPT$HELP_V);
      289     9129        %VLR_HELP (FPTN = B$RESULTS,STCLASS = BASED);
      290     9158    1   DCL 1 TEXT$C BASED,
      291     9159    1         2 C UBIN(9) CALIGNED,
      292     9160    1         2 TEXT CHAR(TEXT$C.C) ;
      293     9161    1   DCL B$BUFFER CHAR(SLOT_SIZE#) BASED;
      294     9162    1   DCL CHAR$8 CHAR(8) BASED;
      295     9163    1   DCL CHAR$6 CHAR(6) BASED;
      296     9164        /**/
      297     9165        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:80   
      298     9166        /**/
      299     9167        /*****************************************************************************/
      300     9168        /*   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   */
      301     9169        /*****************************************************************************/
      302     9170        /**/
      303     9171                                                /* Allocate storage with each thing   */
      304     9172                                                /* on a double-word boundary.         */
      305     9173    1           CALL FMD$GBUF(POOLBUF$);        /* Get a pool buffer                  */

   9173  2 000002   200107 630500                    EPPR0   POOLBUF$,,AUTO
         2 000003   200132 450500                    STP0    LENGTH+4,,AUTO
         2 000004   200132 630500                    EPPR0   LENGTH+4,,AUTO
         2 000005   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000006   000000 701000 xent               TSX1    FMD$GBUF
         2 000007   000000 011000                    NOP     0

      306     9174    1           CALL HFF$TRAPALT ALTRET(HELP_BAILOUT); /* Release it if we trap       */

   9174  2 000010   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000011   000000 701000 xent               TSX1    HFF$TRAPALT
         2 000012   001056 702000 2                  TSX2    HELP_BAILOUT

      307     9175    1           AD_RFPT$ = POOLBUF$;

   9175  2 000013   200107 236100                    LDQ     POOLBUF$,,AUTO
         2 000014   200110 756100                    STQ     AD_RFPT$,,AUTO

      308     9176    1           AD_WFPT$ = PINCRW(AD_RFPT$,(SIZEW(FPT_READ)*2+1)/2);

   9176  2 000015   000016 036003                    ADLQ    14,DU
         2 000016   200111 756100                    STQ     AD_WFPT$,,AUTO

      309     9177    1           AD_PFPT$ = PINCRW(AD_WFPT$,(SIZEW(FPT_WRITE)*2+1)/2);

   9177  2 000017   000014 036003                    ADLQ    12,DU
         2 000020   200112 756100                    STQ     AD_PFPT$,,AUTO

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:81   
      310     9178    1           AD_OFPT$ = PINCRW(AD_PFPT$,(SIZEW(FPT_PREC)*2+1)/2);

   9178  2 000021   000012 036003                    ADLQ    10,DU
         2 000022   200113 756100                    STQ     AD_OFPT$,,AUTO

      311     9179    1           AD_TBUF$ = PINCRW(AD_OFPT$,(SIZEW(FPT_OPEN)*2+1)/2);

   9179  2 000023   000072 036003                    ADLQ    58,DU
         2 000024   200114 756100                    STQ     AD_TBUF$,,AUTO

      312     9180    1           AD_KEY1$ = PINCRW(AD_TBUF$,(SIZEW(TEXT)*2+1)/2);

   9180  2 000025   000024 036003                    ADLQ    20,DU
         2 000026   200115 756100                    STQ     AD_KEY1$,,AUTO

      313     9181    1           AD_KEY2$ = PINCRW(AD_KEY1$,(SIZEW(KEY1)*2+1)/2);

   9181  2 000027   000010 036003                    ADLQ    8,DU
         2 000030   200116 756100                    STQ     AD_KEY2$,,AUTO

      314     9182    1           AD_RSLT$ = PINCRW(AD_KEY2$,(SIZEW(KEY2)*2+1)/2);

   9182  2 000031   000010 036003                    ADLQ    8,DU
         2 000032   200117 756100                    STQ     AD_RSLT$,,AUTO

      315     9183                                                /* INIT local storage                 */
      316     9184    1           RESULTS = FALSE#;               /* Clear HELP RESULTS                 */

   9184  2 000033   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 000034   000100 100400                    MLR     fill='000'O
         2 000035   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000036   000000 000070                    ADSC9   0,,PR0                   cn=0,n=56

      317     9185    1           ERROR = 0;                      /* No error yet                       */

   9185  2 000037   200014 450100                    STZ     ERROR,,AUTO

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:82   
      318     9186    1           COLUMN = 0;                     /* Initialize counter for list format */

   9186  2 000040   200015 450100                    STZ     COLUMN,,AUTO

      319     9187    1           RESULTS.MSGCOMP = TRUE#;        /* Assume message will fit in buffer  */

   9187  2 000041   020000 236003                    LDQ     8192,DU
         2 000042   000000 256100                    ORSQ    0,,PR0

      320     9188    1           WILDCARDING = FALSE#;

   9188  2 000043   200017 450100                    STZ     WILDCARDING,,AUTO

      321     9189    1           RANGE = V$# -> FPT$HELP_V.RANGE;

   9189  2 000044   000000 471400 xsym               LDP1    B$PS0$
         2 000045   100001 236100                    LDQ     1,,PR1
         2 000046   000043 736000                    QLS     35
         2 000047   200020 756100                    STQ     RANGE,,AUTO

      322     9190                                                /* Set up output DCB                  */
      323     9191    1           M$STAR$ = DCBADDR(M$STAR_NUM);  /* Create pointer to STAR DCB         */

   9191  2 000050   000000 473400 3                  LDP3    0
         2 000051   300000 474500                    LDP4    0,,PR3
         2 000052   000114 720000 1                  LXL0    M$STAR_NUM
         2 000053   400000 236110                    LDQ     0,X0,PR4
         2 000054   200016 756100                    STQ     M$STAR$,,AUTO

      324     9192    1           IF (M$STAR$ -> F$DCB.FCD = TRUE#)

   9192  2 000055   200016 475500                    LDP5    M$STAR$,,AUTO
         2 000056   500031 236100                    LDQ     25,,PR5
         2 000057   020000 316007                    CANQ    8192,DL
         2 000060   000072 600000 2                  TZE     s:9199

      325     9193    1           THEN                            /* STAR is open, so close it          */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:83   
      326     9194    2           DO;

      327     9195    2              B$JIT$ -> B$JIT.DCB$ = M$STAR$;

   9195  2 000061   200016 236100                    LDQ     M$STAR$,,AUTO
         2 000062   000000 476400 xsym               LDP6    B$JIT$
         2 000063   600232 756100                    STQ     154,,PR6

      328     9196    2              CALL FMP$CLSJ;

   9196  2 000064   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000065   000000 701000 xent               TSX1    FMP$CLSJ
         2 000066   000000 011000                    NOP     0

      329     9197    2              CALL HFF$TRAPALT ALTRET(HELP_BAILOUT);

   9197  2 000067   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000070   000000 701000 xent               TSX1    HFF$TRAPALT
         2 000071   001056 702000 2                  TSX2    HELP_BAILOUT

      330     9198    2              END;

      331     9199    1           CALL FMM$SCRUB(M$STAR$);

   9199  2 000072   200016 630500                    EPPR0   M$STAR$,,AUTO
         2 000073   200132 450500                    STP0    LENGTH+4,,AUTO
         2 000074   200132 630500                    EPPR0   LENGTH+4,,AUTO
         2 000075   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000076   000000 701000 xent               TSX1    FMM$SCRUB
         2 000077   000000 011000                    NOP     0

      332     9200    1           CALL HFF$TRAPALT ALTRET(HELP_BAILOUT);

   9200  2 000100   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000101   000000 701000 xent               TSX1    HFF$TRAPALT
         2 000102   001056 702000 2                  TSX2    HELP_BAILOUT

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:84   
      333     9201        /**/
      334     9202    1           IF ( B$JIT$ -> B$JIT.LANG ~= BINASC(0))AND

   9202  2 000103   000000 470400 xsym               LDP0    B$JIT$
         2 000104   000145 236100                    LDQ     101,,PR0
         2 000105   000777 376007                    ANQ     511,DL
         2 000106   000000 116003                    CMPQ    0,DU
         2 000107   000121 600000 2                  TZE     s:9207
         2 000110   000145 236100                    LDQ     101,,PR0
         2 000111   000777 376007                    ANQ     511,DL
         2 000112   000040 116007                    CMPQ    32,DL
         2 000113   000121 600000 2                  TZE     s:9207

      335     9203    1             ( B$JIT$ -> B$JIT.LANG ~= ' ')
      336     9204    1           THEN                            /* Native lang exists, set value      */
      337     9205    1              NATIVE_LANG = B$JIT$ -> B$JIT.LANG;

   9205  2 000114   000145 236100                    LDQ     101,,PR0
         2 000115   000033 736000                    QLS     27
         2 000116   000001 276000 3                  ORQ     1
         2 000117   200011 756100                    STQ     NATIVE_LANG,,AUTO
         2 000120   000123 710000 2                  TRA     s:9208

      338     9206    1           ELSE                            /* No native lang exists, reset value */
      339     9207    1              NATIVE_LANG = ' ';

   9207  2 000121   040000 236003                    LDQ     16384,DU
         2 000122   200011 756100                    STQ     NATIVE_LANG,,AUTO

      340     9208    1           IF V$# -> FPT$HELP_V.LANG ~= ' '

   9208  2 000123   000000 471400 xsym               LDP1    B$PS0$
         2 000124   100001 236100                    LDQ     1,,PR1
         2 000125   777000 376003                    ANQ     -512,DU
         2 000126   040000 116003                    CMPQ    16384,DU
         2 000127   000140 600000 2                  TZE     s:9214
         2 000130   100001 236100                    LDQ     1,,PR1
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:85   
         2 000131   777000 376003                    ANQ     -512,DU
         2 000132   000000 116003                    CMPQ    0,DU
         2 000133   000140 600000 2                  TZE     s:9214

      341     9209    1            AND V$# -> FPT$HELP_V.LANG ~= BINASC(0)
      342     9210    1            THEN                           /* LANG in FPT overides JIT           */
      343     9211    1               NATIVE_LANG = V$# -> FPT$HELP_V.LANG;

   9211  2 000134   100001 236100                    LDQ     1,,PR1
         2 000135   777000 376003                    ANQ     -512,DU
         2 000136   000001 276000 3                  ORQ     1
         2 000137   200011 756100                    STQ     NATIVE_LANG,,AUTO

      344     9212        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:86   
      345     9213                                                /* Move parameters into local storage */
      346     9214    1           CALL HFF$DSIZ(BUF_PS#,BUFLEN) ALTRET (BUF_ERR); /* Buffer passed?     */

   9214  2 000140   200004 633500                    EPPR3   BUFLEN,,AUTO
         2 000141   200133 453500                    STP3    LENGTH+5,,AUTO
         2 000142   000002 236000 3                  LDQ     2
         2 000143   200132 756100                    STQ     LENGTH+4,,AUTO
         2 000144   200132 630500                    EPPR0   LENGTH+4,,AUTO
         2 000145   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000146   000000 701000 xent               TSX1    HFF$DSIZ
         2 000147   000157 702000 2                  TSX2    BUF_ERR

      347     9215    1           BUF$ = BUF$#;                   /* Point to user buffer               */

   9215  2 000150   000000 236000 xsym               LDQ     B$PS3$
         2 000151   200010 756100                    STQ     BUF$,,AUTO

      348     9216    1           HELP_RECS = BUFLEN/SLOT_SIZE#;  /* Number of record slots in buffer   */

   9216  2 000152   200004 236100                    LDQ     BUFLEN,,AUTO
         2 000153   000117 506007                    DIV     79,DL
         2 000154   200003 756100                    STQ     HELP_RECS,,AUTO

      349     9217    1           IF (HELP_RECS < 1)

   9217  2 000155   000000 116003                    CMPQ    0,DU
         2 000156   000167 601000 2                  TNZ     s:9225

      350     9218    1            THEN                           /* Buffer too small                   */
      351     9219    2             DO;

      352     9220    2   BUF_ERR:   RESULTS.BUFERR = TRUE#;      /* Buffer error                       */

   9220  2 000157   200117 470500       BUF_ERR      LDP0    AD_RSLT$,,AUTO
         2 000160   001000 236003                    LDQ     512,DU
         2 000161   000000 256100                    ORSQ    0,,PR0

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:87   
      353     9221    2              RESULTS.BADCALL = TRUE#;

   9221  2 000162   400000 236003                    LDQ     -131072,DU
         2 000163   000000 256100                    ORSQ    0,,PR0

      354     9222    2              ERROR = %E$BADHPARAM;

   9222  2 000164   001521 235007                    LDA     849,DL
         2 000165   200014 755100                    STA     ERROR,,AUTO

      355     9223    2              GOTO HELP_EXIT;

   9223  2 000166   000761 710000 2                  TRA     HELP_EXIT

      356     9224    2              END;
      357     9225    1           HELP_RECS = HELP_RECS -1;       /* Convert number of slots to index   */

   9225  2 000167   000001 136007                    SBLQ    1,DL
         2 000170   200003 756100                    STQ     HELP_RECS,,AUTO

      358     9226    1           BUF$ -> B$BUFFER = ' ';         /* Clear first buffer slot            */

   9226  2 000171   200010 470500                    LDP0    BUF$,,AUTO
         2 000172   040100 100400                    MLR     fill='040'O
         2 000173   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000174   000000 000117                    ADSC9   0,,PR0                   cn=0,n=79

      359     9227        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:88   
      360     9228    1           CALL HFF$DSIZ(KEY2_PS#,LEN) ALTRET(NO_KEY2); /* See if KEY2 exists    */

   9228  2 000175   200005 631500                    EPPR1   LEN,,AUTO
         2 000176   200133 451500                    STP1    LENGTH+5,,AUTO
         2 000177   000003 236000 3                  LDQ     3
         2 000200   200132 756100                    STQ     LENGTH+4,,AUTO
         2 000201   200132 630500                    EPPR0   LENGTH+4,,AUTO
         2 000202   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000203   000000 701000 xent               TSX1    HFF$DSIZ
         2 000204   000254 702000 2                  TSX2    NO_KEY2

      361     9229    1           KEY2.LEN = KEY2$# -> TEXT$C.C;  /* KEY2 exists, move it in            */

   9229  2 000205   000000 470400 xsym               LDP0    B$PS2$
         2 000206   200116 471500                    LDP1    AD_KEY2$,,AUTO
         2 000207   000100 100500                    MLR     fill='000'O
         2 000210   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000211   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      362     9230    1           IF KEY2.LEN > 31

   9230  2 000212   100000 236100                    LDQ     0,,PR1
         2 000213   777000 376003                    ANQ     -512,DU
         2 000214   040000 116003                    CMPQ    16384,DU
         2 000215   000222 603000 2                  TRC     BAD_KEY
         2 000216   100000 236100                    LDQ     0,,PR1
         2 000217   000033 772000                    QRL     27
         2 000220   200005 116100                    CMPQ    LEN,,AUTO
         2 000221   000225 604000 2                  TMI     s:9237

      363     9231    1            OR KEY2.LEN +1 > LEN           /* OR bad framing vector              */
      364     9232    1            THEN                           /* KEY2 too long                      */
      365     9233    2               DO;

      366     9234    2   BAD_KEY:       ERROR = %E$BADHPARAM;

   9234  2 000222   001521 235007       BAD_KEY      LDA     849,DL
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:89   
         2 000223   200014 755100                    STA     ERROR,,AUTO

      367     9235    2                  GOTO HELP_EXIT;

   9235  2 000224   000761 710000 2                  TRA     HELP_EXIT

      368     9236    2                  END;
      369     9237    1           KEY2.TEXT = KEY2$# -> TEXT$C.TEXT;

   9237  2 000225   000100 101500                    MRL     fill='000'O
         2 000226   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000227   200132 000002                    ADSC9   LENGTH+4,,AUTO           cn=0,n=2
         2 000230   200132 220100                    LDX0    LENGTH+4,,AUTO
         2 000231   040100 100540                    MLR     fill='040'O
         2 000232   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 000233   100000 200037                    ADSC9   0,,PR1                   cn=1,n=31

      370     9238    1           IF KEY2.TEXT = ' '

   9238  2 000234   040000 106500                    CMPC    fill='040'O
         2 000235   100000 200037                    ADSC9   0,,PR1                   cn=1,n=31
         2 000236   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000237   000254 600000 2                  TZE     NO_KEY2

      371     9239    1            THEN                           /* Null keyword passed                */
      372     9240    1              GOTO NO_KEY2;
      373     9241    1           CALL INDEX (I,'?',KEY2.TEXT);

   9241  2 000240   000000 124500                    SCM     mask='000'O
         2 000241   100000 200037                    ADSC9   0,,PR1                   cn=1,n=31
         2 000242   000004 000001 3                  ADSC9   4                        cn=0,n=1
         2 000243   200013 000100                    ARG     I,,AUTO

      374     9242    1           IF I < KEY2.LEN THEN            /* IF ANY '?'                         */

   9242  2 000244   100000 236100                    LDQ     0,,PR1
         2 000245   000033 772000                    QRL     27
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:90   
         2 000246   200013 116100                    CMPQ    I,,AUTO
         2 000247   000253 604400 2                  TMOZ    s:9248

      375     9243    2              DO;

      376     9244    2   ILLWILD:     ERROR = %E$ILLWILD;

   9244  2 000250   001515 235007       ILLWILD      LDA     845,DL
         2 000251   200014 755100                    STA     ERROR,,AUTO

      377     9245    2                GOTO HELP_EXIT;

   9245  2 000252   000761 710000 2                  TRA     HELP_EXIT

      378     9246    2                END;
      379     9247
      380     9248    2           DO WHILE (NEVER#);

   9248  2 000253   000262 710000 2                  TRA     s:9253

      381     9249    2   NO_KEY2:   KEY2.LEN = 0;                /* No KEY2, null it                   */

   9249  2 000254   200116 470500       NO_KEY2      LDP0    AD_KEY2$,,AUTO
         2 000255   000000 236003                    LDQ     0,DU
         2 000256   000000 552140                    STBQ    0,'40'O,PR0

      382     9250    2              KEY2.TEXT = ' ';

   9250  2 000257   040100 100400                    MLR     fill='040'O
         2 000260   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000261   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31

      383     9251    2              END;

      384     9252        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:91   
      385     9253    1           CALL HFF$DSIZ(KEY1_PS#,LEN) ALTRET(NO_KEY1); /* See if KEY1 exists    */

   9253  2 000262   200005 630500                    EPPR0   LEN,,AUTO
         2 000263   200133 450500                    STP0    LENGTH+5,,AUTO
         2 000264   000005 236000 3                  LDQ     5
         2 000265   200132 756100                    STQ     LENGTH+4,,AUTO
         2 000266   200132 630500                    EPPR0   LENGTH+4,,AUTO
         2 000267   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000270   000000 701000 xent               TSX1    HFF$DSIZ
         2 000271   000347 702000 2                  TSX2    NO_KEY1

      386     9254    1           KEY1.LEN = KEY1$# -> TEXT$C.C;  /* KEY1 exists, move it in            */

   9254  2 000272   000000 470400 xsym               LDP0    B$PS1$
         2 000273   200115 471500                    LDP1    AD_KEY1$,,AUTO
         2 000274   000100 100500                    MLR     fill='000'O
         2 000275   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000276   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      387     9255    1           IF KEY1.LEN > 31

   9255  2 000277   100000 236100                    LDQ     0,,PR1
         2 000300   777000 376003                    ANQ     -512,DU
         2 000301   040000 116003                    CMPQ    16384,DU
         2 000302   000222 603000 2                  TRC     BAD_KEY
         2 000303   100000 236100                    LDQ     0,,PR1
         2 000304   000033 772000                    QRL     27
         2 000305   200005 116100                    CMPQ    LEN,,AUTO
         2 000306   000222 605000 2                  TPL     BAD_KEY

      388     9256    1            OR KEY1.LEN +1 > LEN           /* OR bad framing vector              */
      389     9257    1            THEN                           /* KEY1 too long                      */
      390     9258    1              GOTO BAD_KEY;
      391     9259    1           KEY1.TEXT = KEY1$# -> TEXT$C.TEXT;

   9259  2 000307   000100 101500                    MRL     fill='000'O
         2 000310   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:92   
         2 000311   200132 000002                    ADSC9   LENGTH+4,,AUTO           cn=0,n=2
         2 000312   200132 220100                    LDX0    LENGTH+4,,AUTO
         2 000313   040100 100540                    MLR     fill='040'O
         2 000314   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 000315   100000 200037                    ADSC9   0,,PR1                   cn=1,n=31

      392     9260    1           IF KEY1.TEXT = ' '

   9260  2 000316   040000 106500                    CMPC    fill='040'O
         2 000317   100000 200037                    ADSC9   0,,PR1                   cn=1,n=31
         2 000320   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000321   000347 600000 2                  TZE     NO_KEY1

      393     9261    1            THEN                           /* Null keyword passed                */
      394     9262    1              GOTO NO_KEY1;
      395     9263    1           CALL INDEX (I,'?',KEY1.TEXT);

   9263  2 000322   000000 124500                    SCM     mask='000'O
         2 000323   100000 200037                    ADSC9   0,,PR1                   cn=1,n=31
         2 000324   000004 000001 3                  ADSC9   4                        cn=0,n=1
         2 000325   200013 000100                    ARG     I,,AUTO

      396     9264    1           IF I < KEY1.LEN-1 THEN          /* IF '?' NOT LAST CHARACTER          */

   9264  2 000326   100000 236100                    LDQ     0,,PR1
         2 000327   000033 772000                    QRL     27
         2 000330   000001 136007                    SBLQ    1,DL
         2 000331   200013 116100                    CMPQ    I,,AUTO
         2 000332   000250 605400 2                  TPNZ    ILLWILD

      397     9265    1              GOTO ILLWILD;
      398     9266    1           IF I = KEY1.LEN-1 THEN          /* IF '?' LAST CHARACTER              */

   9266  2 000333   000346 601000 2                  TNZ     s:9274

      399     9267    2              DO;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:93   
      400     9268    2                WILDCARDING = TRUE#;

   9268  2 000334   400000 236003                    LDQ     -131072,DU
         2 000335   200017 756100                    STQ     WILDCARDING,,AUTO

      401     9269    2                IF KEY2.LEN > 0            /* IF SECOND KEY EXISTS               */

   9269  2 000336   200116 473500                    LDP3    AD_KEY2$,,AUTO
         2 000337   300000 236100                    LDQ     0,,PR3
         2 000340   777000 316003                    CANQ    -512,DU
         2 000341   000250 601000 2                  TNZ     ILLWILD
         2 000342   000000 474400 xsym               LDP4    B$PS0$
         2 000343   400001 236100                    LDQ     1,,PR4
         2 000344   000010 316007                    CANQ    8,DL
         2 000345   000250 600000 2                  TZE     ILLWILD

      402     9270    2                 OR NOT V$# -> FPT$HELP_V.LIST THEN /* OR HELP TEXT              */
      403     9271    2                   GOTO ILLWILD;
      404     9272    2                END;

      405     9273
      406     9274    2           DO WHILE (NEVER#);

   9274  2 000346   000355 710000 2                  TRA     s:9280

      407     9275    2   NO_KEY1:   KEY1.LEN = 0;                /* No KEY1, null it                   */

   9275  2 000347   200115 470500       NO_KEY1      LDP0    AD_KEY1$,,AUTO
         2 000350   000000 236003                    LDQ     0,DU
         2 000351   000000 552140                    STBQ    0,'40'O,PR0

      408     9276    2              KEY1.TEXT = ' ';

   9276  2 000352   040100 100400                    MLR     fill='040'O
         2 000353   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000354   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:94   
      409     9277    2              END;

      410     9278        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:95   
      411     9279        /**/                                    /* Check DCBs                         */
      412     9280    1           CALL FMF$ICORRES(V$# -> FPT$HELP_V.OUTDCB1,

   9280  2 000355   200117 236100                    LDQ     AD_RSLT$,,AUTO
         2 000356   000003 036003                    ADLQ    3,DU
         2 000357   200135 756100                    STQ     LENGTH+7,,AUTO
         2 000360   200117 236100                    LDQ     AD_RSLT$,,AUTO
         2 000361   000002 036003                    ADLQ    2,DU
         2 000362   200134 756100                    STQ     LENGTH+6,,AUTO
         2 000363   000000 236000 xsym               LDQ     B$PS0$
         2 000364   400000 036007                    ADLQ    -131072,DL
         2 000365   000000 235000 xsym               LDA     B$PS0$
         2 000366   200132 757100                    STAQ    LENGTH+4,,AUTO
         2 000367   200132 630500                    EPPR0   LENGTH+4,,AUTO
         2 000370   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000371   000000 701000 xent               TSX1    FMF$ICORRES
         2 000372   000000 011000                    NOP     0

      413     9281    1            V$# -> FPT$HELP_V.OUTDCB2,
      414     9282    1            RESULTS.ERRCODE1,
      415     9283    1            RESULTS.ERRCODE2);
      416     9284    1           CALL HFF$TRAPALT ALTRET(HELP_BAILOUT);

   9284  2 000373   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000374   000000 701000 xent               TSX1    HFF$TRAPALT
         2 000375   001056 702000 2                  TSX2    HELP_BAILOUT

      417     9285    1           IF RESULTS.ERRCODE1.ERR# ~= 0

   9285  2 000376   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 000377   000002 236100                    LDQ     2,,PR0
         2 000400   377770 316007                    CANQ    131064,DL
         2 000401   000404 600000 2                  TZE     s:9288

      418     9286    1            THEN                           /* Bad DCB1                           */
      419     9287    1              RESULTS.OUTERR1 = TRUE#;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:96   
   9287  2 000402   010000 236003                    LDQ     4096,DU
         2 000403   000000 256100                    ORSQ    0,,PR0

      420     9288    1           IF RESULTS.ERRCODE2.ERR# ~= 0

   9288  2 000404   000003 236100                    LDQ     3,,PR0
         2 000405   377770 316007                    CANQ    131064,DL
         2 000406   000411 600000 2                  TZE     s:9292

      421     9289    1            THEN                           /* Bad DCB2 or corresponds to DCB1    */
      422     9290    1              RESULTS.OUTERR2 = TRUE#;

   9290  2 000407   004000 236003                    LDQ     2048,DU
         2 000410   000000 256100                    ORSQ    0,,PR0

      423     9291        /**/
      424     9292    1           IF V$# -> FPT$HELP_V.OUTDCB1 ~= 0

   9292  2 000411   000000 471400 xsym               LDP1    B$PS0$
         2 000412   100000 220100                    LDX0    0,,PR1
         2 000413   000462 600000 2                  TZE     s:9310
         2 000414   000000 236100                    LDQ     0,,PR0
         2 000415   010000 316003                    CANQ    4096,DU
         2 000416   000462 601000 2                  TNZ     s:9310
         2 000417   000000 473400 3                  LDP3    0
         2 000420   300000 474500                    LDP4    0,,PR3
         2 000421   400000 475510                    LDP5    0,X0,PR4
         2 000422   500031 236100                    LDQ     25,,PR5
         2 000423   020000 316007                    CANQ    8192,DL
         2 000424   000462 601000 2                  TNZ     s:9310

      425     9293    1            AND RESULTS.OUTERR1 = FALSE#
      426     9294    1            AND NOT DCBADDR(V$# -> FPT$HELP_V.OUTDCB1) -> F$DCB.FCD
      427     9295    1            THEN                           /* We have to OPEN the DCB            */
      428     9296    2              DO;

      429     9297    2                IF DCBADDR(V$# -> FPT$HELP_V.OUTDCB1) -> F$DCB.FUN = 0
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:97   

   9297  2 000425   500032 236100                    LDQ     26,,PR5
         2 000426   000777 316003                    CANQ    511,DU
         2 000427   000432 601000 2                  TNZ     s:9300

      430     9298    2                 THEN                      /* FUN unknown                        */
      431     9299    2                   DCBADDR(V$# -> FPT$HELP_V.OUTDCB1) -> F$DCB.FUN = %CREATE#;

   9299  2 000430   000003 236003                    LDQ     3,DU
         2 000431   500032 552120                    STBQ    26,'20'O,PR5

      432     9300    2                B$JIT$ -> B$JIT.DCB$ = DCBADDR(V$# -> FPT$HELP_V.OUTDCB1);

   9300  2 000432   100000 220100                    LDX0    0,,PR1
         2 000433   400000 236110                    LDQ     0,X0,PR4
         2 000434   000000 475400 xsym               LDP5    B$JIT$
         2 000435   500232 756100                    STQ     154,,PR5

      433     9301    2                CALL FMM$DFLOPN;           /* OPEN it                            */

   9301  2 000436   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000437   000000 701000 xent               TSX1    FMM$DFLOPN
         2 000440   000000 011000                    NOP     0

      434     9302    2                CALL HFF$TRAPALT ALTRET(BAD_OUTDCB1);

   9302  2 000441   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000442   000000 701000 xent               TSX1    HFF$TRAPALT
         2 000443   000454 702000 2                  TSX2    BAD_OUTDCB1

      435     9303    2                IF DCBADDR(V$# -> FPT$HELP_V.OUTDCB1) -> F$DCB.FCD = FALSE#

   9303  2 000444   000000 470400 3                  LDP0    0
         2 000445   000000 471500                    LDP1    0,,PR0
         2 000446   000000 473400 xsym               LDP3    B$PS0$
         2 000447   300000 220100                    LDX0    0,,PR3
         2 000450   100000 474510                    LDP4    0,X0,PR1
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:98   
         2 000451   400031 236100                    LDQ     25,,PR4
         2 000452   020000 316007                    CANQ    8192,DL
         2 000453   000462 601000 2                  TNZ     s:9310

      436     9304    2                 THEN                      /* OPEN didn't work                   */
      437     9305    3   BAD_OUTDCB1:    DO;

   9305  2 000454                       BAD_OUTDCB1  null
      438     9306    3                     RESULTS.OUTERR1 = TRUE#;

   9306  2 000454   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 000455   010000 236003                    LDQ     4096,DU
         2 000456   000000 256100                    ORSQ    0,,PR0

      439     9307    3                     RESULTS.ERRCODE1 = B$JIT$ -> B$JIT.ERR;

   9307  2 000457   000000 471400 xsym               LDP1    B$JIT$
         2 000460   100012 236100                    LDQ     10,,PR1
         2 000461   000002 756100                    STQ     2,,PR0

      440     9308    3                     END;

      441     9309    2                END;

      442     9310    1           IF V$# -> FPT$HELP_V.OUTDCB2 ~= 0

   9310  2 000462   000000 470400 xsym               LDP0    B$PS0$
         2 000463   000000 720100                    LXL0    0,,PR0
         2 000464   000534 600000 2                  TZE     s:9331
         2 000465   200117 471500                    LDP1    AD_RSLT$,,AUTO
         2 000466   100000 236100                    LDQ     0,,PR1
         2 000467   004000 316003                    CANQ    2048,DU
         2 000470   000534 601000 2                  TNZ     s:9331
         2 000471   000000 473400 3                  LDP3    0
         2 000472   300000 474500                    LDP4    0,,PR3
         2 000473   400000 475510                    LDP5    0,X0,PR4
         2 000474   500031 236100                    LDQ     25,,PR5
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:99   
         2 000475   020000 316007                    CANQ    8192,DL
         2 000476   000534 601000 2                  TNZ     s:9331

      443     9311    1            AND RESULTS.OUTERR2 = FALSE#
      444     9312    1            AND NOT DCBADDR(V$# -> FPT$HELP_V.OUTDCB2) -> F$DCB.FCD
      445     9313    1            THEN                           /* We have to OPEN the DCB            */
      446     9314    2              DO;

      447     9315    2                IF DCBADDR(V$# -> FPT$HELP_V.OUTDCB2) -> F$DCB.FUN = 0

   9315  2 000477   500032 236100                    LDQ     26,,PR5
         2 000500   000777 316003                    CANQ    511,DU
         2 000501   000504 601000 2                  TNZ     s:9318

      448     9316    2                 THEN                      /* FUN unknown                        */
      449     9317    2                  DCBADDR(V$# -> FPT$HELP_V.OUTDCB2) -> F$DCB.FUN = %CREATE#;

   9317  2 000502   000003 236003                    LDQ     3,DU
         2 000503   500032 552120                    STBQ    26,'20'O,PR5

      450     9318    2                B$JIT$ -> B$JIT.DCB$ = DCBADDR(V$# -> FPT$HELP_V.OUTDCB2);

   9318  2 000504   000000 720100                    LXL0    0,,PR0
         2 000505   400000 236110                    LDQ     0,X0,PR4
         2 000506   000000 475400 xsym               LDP5    B$JIT$
         2 000507   500232 756100                    STQ     154,,PR5

      451     9319    2                CALL FMM$DFLOPN;           /* OPEN it                            */

   9319  2 000510   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000511   000000 701000 xent               TSX1    FMM$DFLOPN
         2 000512   000000 011000                    NOP     0

      452     9320    2                CALL HFF$TRAPALT ALTRET(BAD_OUTDCB2);

   9320  2 000513   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000514   000000 701000 xent               TSX1    HFF$TRAPALT
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:100  
         2 000515   000526 702000 2                  TSX2    BAD_OUTDCB2

      453     9321    2                IF DCBADDR(V$# -> FPT$HELP_V.OUTDCB2) -> F$DCB.FCD = FALSE#

   9321  2 000516   000000 470400 3                  LDP0    0
         2 000517   000000 471500                    LDP1    0,,PR0
         2 000520   000000 473400 xsym               LDP3    B$PS0$
         2 000521   300000 720100                    LXL0    0,,PR3
         2 000522   100000 474510                    LDP4    0,X0,PR1
         2 000523   400031 236100                    LDQ     25,,PR4
         2 000524   020000 316007                    CANQ    8192,DL
         2 000525   000534 601000 2                  TNZ     s:9331

      454     9322    2                 THEN                      /* OPEN didn't work                   */
      455     9323    3   BAD_OUTDCB2:    DO;

   9323  2 000526                       BAD_OUTDCB2  null
      456     9324    3                     RESULTS.OUTERR2 = TRUE#;

   9324  2 000526   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 000527   004000 236003                    LDQ     2048,DU
         2 000530   000000 256100                    ORSQ    0,,PR0

      457     9325    3                     RESULTS.ERRCODE2 = B$JIT$ -> B$JIT.ERR;

   9325  2 000531   000000 471400 xsym               LDP1    B$JIT$
         2 000532   100012 236100                    LDQ     10,,PR1
         2 000533   000003 756100                    STQ     3,,PR0

      458     9326    3                     END;

      459     9327    2                END;

      460     9328        /**/
      461     9329        /*  This is a quickie fix for STAR #8807.  It should be replaced by a more    */
      462     9330        /*  classy fix in C00.  Note similar fix to M$ERRMSG.                         */
      463     9331    1           CALL UMD$CHKOPN ALTRET(DRIB_ALT); /* OPEN M$DRIBBLE IF NEEDED         */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:101  

   9331  2 000534   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000535   000000 701000 xent               TSX1    UMD$CHKOPN
         2 000536   000542 702000 2                  TSX2    DRIB_ALT

      464     9332    1           CALL HFF$TRAPALT ALTRET(HELP_BAILOUT);

   9332  2 000537   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000540   000000 701000 xent               TSX1    HFF$TRAPALT
         2 000541   001056 702000 2                  TSX2    HELP_BAILOUT

   9323  2 000542                       DRIB_ALT     null
      465     9333    1   DRIB_ALT: ;
      466     9334        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:102  
      467     9335                                                /* Move PROCFID parts into DCB and    */
      468     9336                                                /* local storage                      */
      469     9337    1           CALL HFF$NILERASE(PROCNAME_PS#) ALTRET(NO_PROCNAME);

   9337  2 000542   000006 630400 3                  EPPR0   6
         2 000543   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000544   000000 701000 xent               TSX1    HFF$NILERASE
         2 000545   000617 702000 2                  TSX2    NO_PROCNAME

      470     9338    1           IF PROCNAME$# -> TEXT$C.C = 0

   9338  2 000546   000000 470400 xsym               LDP0    B$PS4$
         2 000547   000100 101500                    MRL     fill='000'O
         2 000550   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000551   200132 000004                    ADSC9   LENGTH+4,,AUTO           cn=0,n=4
         2 000552   200132 236100                    LDQ     LENGTH+4,,AUTO
         2 000553   000000 116003                    CMPQ    0,DU
         2 000554   000617 600000 2                  TZE     NO_PROCNAME

      471     9339    1            THEN                           /* No NAME passed                     */
      472     9340    1             GOTO NO_PROCNAME;
      473     9341    1           IF PROCNAME$# -> TEXT$C.C > 31 -7 /* Name too long to add prefix?     */

   9341  2 000555   000100 101500                    MRL     fill='000'O
         2 000556   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000557   200132 000004                    ADSC9   LENGTH+4,,AUTO           cn=0,n=4
         2 000560   200132 236100                    LDQ     LENGTH+4,,AUTO
         2 000561   000031 116007                    CMPQ    25,DL
         2 000562   000566 604000 2                  TMI     s:9347

      474     9342    1            THEN                           /* Illegal NAME passed                */
      475     9343    2               DO;

      476     9344    2   BAD_PROCNAME: ERROR = %E$BADHPARAM;

   9344  2 000563   001521 235007       BAD_PROCNAME LDA     849,DL
         2 000564   200014 755100                    STA     ERROR,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:103  

      477     9345    2                 GOTO HELP_EXIT;

   9345  2 000565   000761 710000 2                  TRA     HELP_EXIT

      478     9346    2                 END;
      479     9347    1           IF PROCNAME$# -> TEXT$C.TEXT = ' '

   9347  2 000566   000100 101500                    MRL     fill='000'O
         2 000567   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000570   200132 000002                    ADSC9   LENGTH+4,,AUTO           cn=0,n=2
         2 000571   200132 220100                    LDX0    LENGTH+4,,AUTO
         2 000572   040000 106540                    CMPC    fill='040'O
         2 000573   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 000574   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000575   000617 600000 2                  TZE     NO_PROCNAME

      480     9348    1            THEN                           /* Dummy name passed                  */
      481     9349    1              GOTO NO_PROCNAME;
      482     9350    1           CALL INDEX (I,'?',PROCNAME$# -> TEXT$C.TEXT);

   9350  2 000576   000100 101500                    MRL     fill='000'O
         2 000577   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000600   200132 000002                    ADSC9   LENGTH+4,,AUTO           cn=0,n=2
         2 000601   200132 220100                    LDX0    LENGTH+4,,AUTO
         2 000602   000000 124540                    SCM     mask='000'O
         2 000603   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 000604   000004 000001 3                  ADSC9   4                        cn=0,n=1
         2 000605   200013 000100                    ARG     I,,AUTO

      483     9351    1           IF I < PROCNAME$# -> TEXT$C.C THEN  /* IF '?' USED                    */

   9351  2 000606   000100 101500                    MRL     fill='000'O
         2 000607   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000610   200132 000004                    ADSC9   LENGTH+4,,AUTO           cn=0,n=4
         2 000611   200132 236100                    LDQ     LENGTH+4,,AUTO
         2 000612   200013 116100                    CMPQ    I,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:104  
         2 000613   000250 605400 2                  TPNZ    ILLWILD

      484     9352    1              GOTO ILLWILD;
      485     9353    1           NAME_PASSED = TRUE#;

   9353  2 000614   400000 236003                    LDQ     -131072,DU
         2 000615   200006 756100                    STQ     NAME_PASSED,,AUTO

      486     9354    2           DO WHILE (NEVER#);

   9354  2 000616   000620 710000 2                  TRA     s:9358

      487     9355    2   NO_PROCNAME: NAME_PASSED = FALSE#;

   9355  2 000617   200006 450100       NO_PROCNAME  STZ     NAME_PASSED,,AUTO

      488     9356    2                END;

      489     9357        /**/
      490     9358    1           CALL HFF$NILERASE(PROCACCT_PS#) ALTRET (NO_PROCACCT);

   9358  2 000620   000007 630400 3                  EPPR0   7
         2 000621   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000622   000000 701000 xent               TSX1    HFF$NILERASE
         2 000623   000636 702000 2                  TSX2    NO_PROCACCT

      491     9359    1           IF PROCACCT$# -> CHAR$8 = ' '

   9359  2 000624   000000 470400 xsym               LDP0    B$PS5$
         2 000625   040000 106500                    CMPC    fill='040'O
         2 000626   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         2 000627   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000630   000636 600000 2                  TZE     NO_PROCACCT

      492     9360    1            THEN                           /* Caller passed a blank account      */
      493     9361    1               GOTO NO_PROCACCT;           /* Take the default                   */
      494     9362    1           M$STAR$ -> F$DCB.ACCT = PROCACCT$# -> CHAR$8;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:105  

   9362  2 000631   200016 471500                    LDP1    M$STAR$,,AUTO
         2 000632   040100 100500                    MLR     fill='040'O
         2 000633   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         2 000634   100020 000010                    ADSC9   16,,PR1                  cn=0,n=8

      495     9363    2           DO WHILE(NEVER#);

   9363  2 000635   000642 710000 2                  TRA     s:9367

      496     9364    2   NO_PROCACCT: M$STAR$ -> F$DCB.ACCT = ':SYS'; /* HELP files default to :SYS    */

   9364  2 000636   000117 235000 1     NO_PROCACCT  LDA     HIGH_CHAR+1
         2 000637   000035 236000 xsym               LDQ     B_VECTNIL+29
         2 000640   200016 470500                    LDP0    M$STAR$,,AUTO
         2 000641   000020 757100                    STAQ    16,,PR0

      497     9365    2                END;

      498     9366        /**/
      499     9367    1           CALL HFF$NILERASE(PROCPASS_PS#) ALTRET(NO_PROCPASS);

   9367  2 000642   000010 630400 3                  EPPR0   8
         2 000643   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000644   000000 701000 xent               TSX1    HFF$NILERASE
         2 000645   000654 702000 2                  TSX2    NO_PROCPASS

      500     9368    1           M$STAR$ -> F$DCB.PASS = PROCPASS$# -> CHAR$8;

   9368  2 000646   000000 470400 xsym               LDP0    B$PS6$
         2 000647   200016 471500                    LDP1    M$STAR$,,AUTO
         2 000650   040100 100500                    MLR     fill='040'O
         2 000651   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         2 000652   100022 000010                    ADSC9   18,,PR1                  cn=0,n=8

      501     9369    2           DO WHILE (NEVER#);

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:106  
   9369  2 000653   000660 710000 2                  TRA     s:9373

      502     9370    2   NO_PROCPASS: M$STAR$ -> F$DCB.PASS = ' '; /* Default to no password           */

   9370  2 000654   000035 235000 xsym  NO_PROCPASS  LDA     B_VECTNIL+29
         2 000655   000035 236000 xsym               LDQ     B_VECTNIL+29
         2 000656   200016 470500                    LDP0    M$STAR$,,AUTO
         2 000657   000022 757100                    STAQ    18,,PR0

      503     9371    2              END;

      504     9372        /**/
      505     9373    1           CALL HFF$NILERASE(PROCPSN_PS#) ALTRET(NO_PROCPSN);

   9373  2 000660   000011 630400 3                  EPPR0   9
         2 000661   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000662   000000 701000 xent               TSX1    HFF$NILERASE
         2 000663   000665 702000 2                  TSX2    NO_PROCPSN

      506     9374        /*      M$STAR$ -> F$DCB.PSN = PROCPSN$# -> CHAR$6;  */
      507     9375    2           DO WHILE (NEVER#);

   9375  2 000664   000671 710000 2                  TRA     s:9381

      508     9376    2   NO_PROCPSN: M$STAR$ -> F$DCB.PSN = ' '; /* Default to no PSN                 */

   9376  2 000665   200016 470500       NO_PROCPSN   LDP0    M$STAR$,,AUTO
         2 000666   040100 100400                    MLR     fill='040'O
         2 000667   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000670   000024 000006                    ADSC9   20,,PR0                  cn=0,n=6

      509     9377    2              END;

      510     9378        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:107  
      511     9379                                                /* FPT INITIALIZATION                 */
      512     9380        /**/
      513     9381    1           FPT_READ = INIT_RFPT;

   9381  2 000671   200110 470500                    LDP0    AD_RFPT$,,AUTO
         2 000672   000100 100400                    MLR     fill='000'O
         2 000673   000000 000070 1                  ADSC9   INIT_RFPT                cn=0,n=56
         2 000674   000000 000070                    ADSC9   0,,PR0                   cn=0,n=56

      514     9382    1           FPT_READ.V_ = VECTOR(FPT_READ.V);

   9382  2 000675   000012 235000 3                  LDA     10
         2 000676   200110 236100                    LDQ     AD_RFPT$,,AUTO
         2 000677   000010 036003                    ADLQ    8,DU
         2 000700   000000 757100                    STAQ    0,,PR0

      515     9383    1           FPT_READ.V.DCB# = M$STAR_NUM;

   9383  2 000701   000114 720000 1                  LXL0    M$STAR_NUM
         2 000702   000010 740100                    STX0    8,,PR0

      516     9384    1           FPT_READ.BUF_ = VECTOR(TEXT);   /* Always read into TEXT buffer       */

   9384  2 000703   000013 235000 3                  LDA     11
         2 000704   200114 236100                    LDQ     AD_TBUF$,,AUTO
         2 000705   000004 757100                    STAQ    4,,PR0

      517     9385    1           FPT_READ.KEY_ = VECTOR(RETURNKEY);

   9385  2 000706   000014 235000 3                  LDA     12
         2 000707   200132 452500                    STP2    LENGTH+4,,AUTO
         2 000710   200132 236100                    LDQ     LENGTH+4,,AUTO
         2 000711   000021 036003                    ADLQ    17,DU
         2 000712   000002 757100                    STAQ    2,,PR0

      518     9386        /**/
      519     9387    1           FPT_WRITE = INIT_WFPT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:108  

   9387  2 000713   200111 471500                    LDP1    AD_WFPT$,,AUTO
         2 000714   000100 100400                    MLR     fill='000'O
         2 000715   000016 000060 1                  ADSC9   INIT_WFPT                cn=0,n=48
         2 000716   100000 000060                    ADSC9   0,,PR1                   cn=0,n=48

      520     9388    1           FPT_WRITE.V_ = VECTOR(FPT_WRITE.V);

   9388  2 000717   000015 235000 3                  LDA     13
         2 000720   200111 236100                    LDQ     AD_WFPT$,,AUTO
         2 000721   000010 036003                    ADLQ    8,DU
         2 000722   100000 757100                    STAQ    0,,PR1

      521     9389    1           FPT_WRITE.BUF_.BOUND = SLOT_SIZE# -1; /* Set BUF_.BUF$ later          */

   9389  2 000723   100004 236100                    LDQ     4,,PR1
         2 000724   177777 376007                    ANQ     65535,DL
         2 000725   000016 276000 3                  ORQ     14
         2 000726   100004 756100                    STQ     4,,PR1

      522     9390        /**/
      523     9391    1           FPT_PREC = INIT_PRECFPT;

   9391  2 000727   200112 473500                    LDP3    AD_PFPT$,,AUTO
         2 000730   000100 100400                    MLR     fill='000'O
         2 000731   000032 000050 1                  ADSC9   INIT_PRECFPT             cn=0,n=40
         2 000732   300000 000050                    ADSC9   0,,PR3                   cn=0,n=40

      524     9392    1           FPT_PREC.V_ = VECTOR(FPT_PREC.V);

   9392  2 000733   000015 235000 3                  LDA     13
         2 000734   200112 236100                    LDQ     AD_PFPT$,,AUTO
         2 000735   000006 036003                    ADLQ    6,DU
         2 000736   300000 757100                    STAQ    0,,PR3

      525     9393    1           FPT_PREC.V.DCB# = M$STAR_NUM;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:109  
   9393  2 000737   300006 740100                    STX0    6,,PR3

      526     9394    1           FPT_PREC.KEY_ = VECTOR(RETURNKEY);

   9394  2 000740   000014 235000 3                  LDA     12
         2 000741   200132 452500                    STP2    LENGTH+4,,AUTO
         2 000742   200132 236100                    LDQ     LENGTH+4,,AUTO
         2 000743   000021 036003                    ADLQ    17,DU
         2 000744   300002 757100                    STAQ    2,,PR3

      527     9395        /**/
      528     9396    1           FPT_OPEN = INIT_OPEN;

   9396  2 000745   200113 474500                    LDP4    AD_OFPT$,,AUTO
         2 000746   000100 100400                    MLR     fill='000'O
         2 000747   000044 000240 1                  ADSC9   INIT_OPEN                cn=0,n=160
         2 000750   400000 000350                    ADSC9   0,,PR4                   cn=0,n=232

      529     9397    1           FPT_OPEN.V.DCB# = M$STAR_NUM;

   9397  2 000751   400044 740100                    STX0    36,,PR4

      530     9398        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:110  
      531     9399                                                /* Find out if list of processors is  */
      532     9400                                                /* required.                          */
      533     9401    1           IF NAME_PASSED

   9401  2 000752   200006 234100                    SZN     NAME_PASSED,,AUTO
         2 000753   000757 605000 2                  TPL     s:9405

      534     9402    1           THEN
      535     9403    1              CALL SPECIFIC_FILE ALTRET(HELP_EXIT);

   9403  2 000754   001077 701000 2                  TSX1    SPECIFIC_FILE
         2 000755   000761 702000 2                  TSX2    HELP_EXIT
         2 000756   000761 710000 2                  TRA     HELP_EXIT

      536     9404    1           ELSE
      537     9405    1              CALL LIST_PROCS ALTRET(HELP_EXIT);

   9405  2 000757   002565 701000 2                  TSX1    LIST_PROCS
         2 000760   000761 702000 2                  TSX2    HELP_EXIT

      538     9406        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:111  
      539     9407    1   HELP_EXIT:                              /* Return to PMME handler after set-  */
      540     9408                                                /* ing up any error conditions        */
      541     9409    1           IF COLUMN > 0

   9409  2 000761   200015 235100       HELP_EXIT    LDA     COLUMN,,AUTO
         2 000762   000767 604400 2                  TMOZ    IGNORE_W_ALT

      542     9410    1            THEN                           /* A dangling list exists             */
      543     9411    1               CALL BUFFER_HELP(%FINISH#) ALTRET(IGNORE_W_ALT); /* Finish it     */

   9411  2 000763   000002 236000 3                  LDQ     2
         2 000764   200125 756100                    STQ     AD_RSLT$+6,,AUTO
         2 000765   003044 701000 2                  TSX1    BUFFER_HELP
         2 000766   000767 702000 2                  TSX2    IGNORE_W_ALT

      544     9412    1   IGNORE_W_ALT:
      545     9413        /**/
      546     9414    1          CALL HFF$NILERASE(RESULTS_PS#) ALTRET (NO_RESULTS); /* Are RESULTS wanted */

   9414  2 000767   000011 630400 3     IGNORE_W_ALT EPPR0   9
         2 000770   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000771   000000 701000 xent               TSX1    HFF$NILERASE
         2 000772   001033 702000 2                  TSX2    NO_RESULTS

      547     9415        /**/
      548     9416    1           IF RECORD_TYPE ~= TEXT_REC#

   9416  2 000773   200012 235100                    LDA     RECORD_TYPE,,AUTO
         2 000774   000001 115007                    CMPA    1,DL
         2 000775   001013 601000 2                  TNZ     s:9420
         2 000776   200115 470500                    LDP0    AD_KEY1$,,AUTO
         2 000777   000000 236100                    LDQ     0,,PR0
         2 001000   000033 772000                    QRL     27
         2 001001   000000 620006                    EAX0    0,QL
         2 001002   200102 721100                    LXL1    C_COUNT,,AUTO
         2 001003   040140 106540                    CMPC    fill='040'O
         2 001004   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:112  
         2 001005   200021 200011                    ADSC9   RETURNKEY,,AUTO          cn=1,n=*X1
         2 001006   001013 601000 2                  TNZ     s:9420
         2 001007   000000 471400 xsym               LDP1    B$PS0$
         2 001010   100001 236100                    LDQ     1,,PR1
         2 001011   000010 316007                    CANQ    8,DL
         2 001012   001020 600000 2                  TZE     s:9423

      549     9417    1            OR SUBSTR(KEY1.TEXT,0,KEY1.LEN) ~= SUBSTR(RETURNKEY.TEXT,0,C_COUNT)
      550     9418    1            OR V$# -> FPT$HELP_V.LIST      /* '?' not legal for TOPICS           */
      551     9419    1            THEN                           /* We won't take ? or ?? next time    */
      552     9420    1              RESULTS.CODEUSED = FALSE#;   /* Stomp on CODEUSED                  */

   9420  2 001013   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 001014   000100 100400                    MLR     fill='000'O
         2 001015   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 001016   000004 000043                    ADSC9   4,,PR0                   cn=0,n=35
         2 001017   001026 710000 2                  TRA     s:9427

      553     9421    1            ELSE                           /* Keep RETURNKEY for later bumping   */
      554     9422    2              DO;

      555     9423    2                  RESULTS.CODEUSED.LEN = RETURNKEY.LEN;

   9423  2 001020   200117 473500                    LDP3    AD_RSLT$,,AUTO
         2 001021   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 001022   300004 552140                    STBQ    4,'40'O,PR3

      556     9424    2                  RESULTS.CODEUSED.TEXT = RETURNKEY.TEXT;

   9424  2 001023   040100 100500                    MLR     fill='040'O
         2 001024   200021 200042                    ADSC9   RETURNKEY,,AUTO          cn=1,n=34
         2 001025   300004 200042                    ADSC9   4,,PR3                   cn=1,n=34

      557     9425    2                  END;

      558     9426        /**/
      559     9427    1           RESULTS$# -> B$RESULTS = RESULTS; /* Move RESULTS to user's field       */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:113  

   9427  2 001026   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 001027   000000 471400 xsym               LDP1    B$PS7$
         2 001030   000100 100500                    MLR     fill='000'O
         2 001031   000000 000070                    ADSC9   0,,PR0                   cn=0,n=56
         2 001032   100000 000070                    ADSC9   0,,PR1                   cn=0,n=56

   9427  2 001033                       NO_RESULTS   null
      560     9428        /**/
      561     9429    1   NO_RESULTS: ;
      562     9430        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:114  
      563     9431    1           IF ERROR = 0

   9431  2 001033   200014 235100                    LDA     ERROR,,AUTO
         2 001034   001040 601000 2                  TNZ     s:9436

      564     9432    1           THEN                            /* No error happened                  */
      565     9433    1             B$JIT.ERR = FALSE#;           /* ZERO B$JIT.ERR for normal return   */

   9433  2 001035   000000 470400 xsym               LDP0    B$JIT$
         2 001036   000012 450100                    STZ     10,,PR0
         2 001037   001056 710000 2                  TRA     HELP_BAILOUT

      566     9434    1           ELSE                            /* Error encountered                  */
      567     9435    2           DO;

      568     9436    2              B$JIT.ERR.FCG = '0515'O;     /* EM                                 */

   9436  2 001040   000000 470400 xsym               LDP0    B$JIT$
         2 001041   051500 236003                    LDQ     21312,DU
         2 001042   000012 752160                    STCQ    10,'60'O,PR0

      569     9437    2              B$JIT.ERR.MID = '10'O;       /* H                                  */

   9437  2 001043   000010 236003                    LDQ     8,DU
         2 001044   000012 752110                    STCQ    10,'10'O,PR0

      570     9438    2              B$JIT.ERR.MON = '1'B;

   9438  2 001045   400000 236007                    LDQ     -131072,DL
         2 001046   000012 256100                    ORSQ    10,,PR0

      571     9439    2              B$JIT.ERR.CODE = ERROR;

   9439  2 001047   200014 236100                    LDQ     ERROR,,AUTO
         2 001050   000003 736000                    QLS     3
         2 001051   000012 676100                    ERQ     10,,PR0
         2 001052   377770 376007                    ANQ     131064,DL
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:115  
         2 001053   000012 656100                    ERSQ    10,,PR0

      572     9440    2              B$JIT.ERR.SEV = 0;

   9440  2 001054   000017 236000 3                  LDQ     15
         2 001055   000012 356100                    ANSQ    10,,PR0

      573     9441    2              END;

   9440  2 001056                       HELP_BAILOUT null
      574     9442        /**/
      575     9443    1   HELP_BAILOUT: ;
      576     9444    1           CALL FMD$RBUF(POOLBUF$);        /* Release the pool buffer            */

   9444  2 001056   200107 630500                    EPPR0   POOLBUF$,,AUTO
         2 001057   200132 450500                    STP0    LENGTH+4,,AUTO
         2 001060   200132 630500                    EPPR0   LENGTH+4,,AUTO
         2 001061   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001062   000000 701000 xent               TSX1    FMD$RBUF
         2 001063   000000 011000                    NOP     0

      577     9445        /**/
      578     9446    1           IF M$STAR$ -> F$DCB.FCD

   9446  2 001064   200016 470500                    LDP0    M$STAR$,,AUTO
         2 001065   000031 236100                    LDQ     25,,PR0
         2 001066   020000 316007                    CANQ    8192,DL
         2 001067   001076 600000 2                  TZE     s:9453

      579     9447    1            THEN                           /* M$STAR is open                     */
      580     9448    2              DO;

      581     9449    2                 B$JIT$ -> B$JIT.DCB$ = M$STAR$;

   9449  2 001070   200016 236100                    LDQ     M$STAR$,,AUTO
         2 001071   000000 471400 xsym               LDP1    B$JIT$
         2 001072   100232 756100                    STQ     154,,PR1
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:116  

      582     9450    2                 CALL FMP$CLSJ;            /* CLOSE it                           */

   9450  2 001073   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001074   000000 701000 xent               TSX1    FMP$CLSJ
         2 001075   000000 011000                    NOP     0

      583     9451    2                 END;

      584     9452        /**/
      585     9453    1           RETURN;

   9453  2 001076   000000 702200 xent               TSX2  ! X66_ARET

      586     9454        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:117  
      587     9455        /******************************************************************************/
      588     9456        /*      THE FOLLOWING CODES INDICATE ERRORS BY THE TERMINAL OPERATOR.  THEY   */
      589     9457        /*      SHOULD BE REPORTED AS OBSERVED                                        */
      590     9458        /******************************************************************************/
      591     9459        /**/
      592     9460        /*E*    ERROR:    EMH-E$NOHPROC-1
      593     9461                MESSAGE: No HELP is available for that processor.
      594     9462        */
      595     9463        /*E*    ERROR:    EMH-E$BADHOPT-1
      596     9464                MESSAGE: Conflicting options
      597     9465        */
      598     9466        /*E*    ERROR:    EMH-E$NOMOREHELP-1
      599     9467                MESSAGE: End of topic.
      600     9468               MESSAGE1: No further HELP exists for that topic
      601     9469        */
      602     9470        /*E*    ERROR:    EMH-E$NOTOPIC-1
      603     9471                MESSAGE: No such topic
      604     9472        */
      605     9473        /*E*    ERROR:    EMH-E$BADHFID-1
      606     9474                MESSAGE: Bad processor FID
      607     9475        */
      608     9476        /*E*    ERROR:    EMH-E$ILLWILD-1
      609     9477                MESSAGE: Incorrect usage of ? (wildcard).
      610     9478        */
      611     9479        /*E*    ERROR:    EMH-E$BREAK-1
      612     9480                MESSAGE: Break or CTRL-Y during HELP.
      613     9481        */
      614     9482        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:118  
      615     9483        /******************************************************************************/
      616     9484        /*      THE FOLLOWING ERRORS SHOULD BE CAUGHT BY THE CALLING PROGRAMME AND    */
      617     9485        /*      NOT REPORTED TO THE TERMINAL OPERATOR                                 */
      618     9486        /******************************************************************************/
      619     9487        /**/
      620     9488        /*E*    ERROR:    EMH-E$NEEDRESULTS-1
      621     9489                MESSAGE: ALL and MORE options require the RESULTS area
      622     9490        */
      623     9491        /*E*    ERROR:    EMH-E$HERROR-1
      624     9492                MESSAGE: HELP ERROR
      625     9493               MESSAGE1: M$HELP either has generated an error, or the CALL was bad
      626     9494        */
      627     9495        /*E*    ERROR:    EMH-E$HELPDERR-1
      628     9496                MESSAGE: HELP database error
      629     9497               MESSAGE1: That M$HELP database is malformed
      630     9498        */
      631     9499        /*E*    ERROR:    EMH-E$BADHPARAM;
      632     9500                MESSAGE: Bad CALLing parameter
      633     9501        */
      634     9502        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:119  
      635     9503    1   SPECIFIC_FILE: PROC ALTRET;             /* The caller wants either HELP text  */

   9503  2 001077   200120 741300       SPECIFIC_FI* STX1  ! AD_RSLT$+1,,AUTO

      636     9504                                                /* or a list of HELP topics.  Either  */
      637     9505                                                /* way, he has provided a processor   */
      638     9506                                                /* name to be converted into a FID    */
      639     9507                                                /* name of the form 'HELP:name:l'     */
      640     9508                                                /* where 'l' is the native language   */
      641     9509                                                /* passed by the caller, or from the  */
      642     9510                                                /* JIT.  Note that this character     */
      643     9511                                                /* will not be included in the name   */
      644     9512                                                /* if it is nil                       */
      645     9513        /**/
      646     9514                                                /* Create file name  from processor   */
      647     9515    2           CALL CONCAT(M$STAR$ -> F$DCB.NAME.C,'HELP:',

   9515  2 001100   000000 470400 xsym               LDP0    B$PS4$
         2 001101   000100 101500                    MRL     fill='000'O
         2 001102   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 001103   200132 000002                    ADSC9   LENGTH+4,,AUTO           cn=0,n=2
         2 001104   200132 220100                    LDX0    LENGTH+4,,AUTO
         2 001105   200016 471500                    LDP1    M$STAR$,,AUTO
         2 001106   040100 100400                    MLR     fill='040'O
         2 001107   000120 000005 1                  ADSC9   HIGH_CHAR+2              cn=0,n=5
         2 001110   100010 200005                    ADSC9   8,,PR1                   cn=1,n=5
         2 001111   200016 471500                    LDP1    M$STAR$,,AUTO
         2 001112   040100 100540                    MLR     fill='040'O
         2 001113   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 001114   100011 400032                    ADSC9   9,,PR1                   cn=2,n=26
         2 001115   000000 636010                    EAQ     0,X0
         2 001116   000022 772000                    QRL     18
         2 001117   000032 116007                    CMPQ    26,DL
         2 001120   001132 603000 2                  TRC     s:9517
         2 001121   200133 740100                    STX0    LENGTH+5,,AUTO
         2 001122   777745 620010                    EAX0    -27,X0
         2 001123   777777 660003                    ERX0    -1,DU
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:120  
         2 001124   200016 471500                    LDP1    M$STAR$,,AUTO
         2 001125   200133 235100                    LDA     LENGTH+5,,AUTO
         2 001126   000022 771000                    ARL     18
         2 001127   040145 100400                    MLR     fill='040'O
         2 001130   000020 000001 3                  ADSC9   16                       cn=0,n=1
         2 001131   100011 400010                    ADSC9   9,A,PR1                  cn=2,n=*X0

      648     9516    2            PROCNAME$# -> TEXT$C.TEXT,':');
      649     9517    2           M$STAR$ -> F$DCB.NAME.L = PROCNAME$# -> TEXT$C.C +6;

   9517  2 001132   200016 471500                    LDP1    M$STAR$,,AUTO
         2 001133   000100 101500                    MRL     fill='000'O
         2 001134   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 001135   200132 000004                    ADSC9   LENGTH+4,,AUTO           cn=0,n=4
         2 001136   200132 236100                    LDQ     LENGTH+4,,AUTO
         2 001137   000006 036007                    ADLQ    6,DL
         2 001140   000033 736000                    QLS     27
         2 001141   100010 552140                    STBQ    8,'40'O,PR1

      650     9518    2           IF M$STAR$ -> F$DCB.ACCT = ':SYS'

   9518  2 001142   200016 471500                    LDP1    M$STAR$,,AUTO
         2 001143   040000 106500                    CMPC    fill='040'O
         2 001144   100020 000010                    ADSC9   16,,PR1                  cn=0,n=8
         2 001145   000117 000004 1                  ADSC9   HIGH_CHAR+1              cn=0,n=4
         2 001146   001154 601000 2                  TNZ     s:9521

      651     9519    2            THEN                           /* System processor, translate to UC  */
      652     9520    2             CALL XLATE(M$STAR$->F$DCB.NAME.C,EMH_UC_XLATE_TBL,M$STAR$->F$DCB.NAME.C);

   9520  2 001147   000000 473400 xsym               LDP3    B$XL_UPPER$
         2 001150   040100 160500                    MVT     fill='040'O
         2 001151   100010 200037                    ADSC9   8,,PR1                   cn=1,n=31
         2 001152   100010 200037                    ADSC9   8,,PR1                   cn=1,n=31
         2 001153   300000 000100                    ARG     0,,PR3

      653     9521    2           IF NATIVE_LANG ~= ' '
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:121  

   9521  2 001154   200011 236100                    LDQ     NATIVE_LANG,,AUTO
         2 001155   777000 376003                    ANQ     -512,DU
         2 001156   040000 116003                    CMPQ    16384,DU
         2 001157   001172 600000 2                  TZE     s:9529

      654     9522    2           THEN                            /* Native language exists             */
      655     9523    3           DO;

      656     9524    3              CALL INSERT(M$STAR$ -> F$DCB.NAME.C,

   9524  2 001160   200016 471500                    LDP1    M$STAR$,,AUTO
         2 001161   100010 236100                    LDQ     8,,PR1
         2 001162   000033 772000                    QRL     27
         2 001163   040106 100500                    MLR     fill='040'O
         2 001164   200011 000001                    ADSC9   NATIVE_LANG,,AUTO        cn=0,n=1
         2 001165   100010 200001                    ADSC9   8,Q,PR1                  cn=1,n=1

      657     9525    3               M$STAR$ -> F$DCB.NAME.L,1,NATIVE_LANG);
      658     9526    3              M$STAR$ -> F$DCB.NAME.L = M$STAR$ -> F$DCB.NAME.L +1;

   9526  2 001166   200016 471500                    LDP1    M$STAR$,,AUTO
         2 001167   100010 236100                    LDQ     8,,PR1
         2 001170   001000 036003                    ADLQ    512,DU
         2 001171   100010 552140                    STBQ    8,'40'O,PR1

      659     9527    3              END;

      660     9528        /**/
      661     9529    2           M$STAR$ -> F$DCB.FUN = %IN#;

   9529  2 001172   200016 471500                    LDP1    M$STAR$,,AUTO
         2 001173   000002 236003                    LDQ     2,DU
         2 001174   100032 552120                    STBQ    26,'20'O,PR1

      662     9530    2           M$STAR$ -> F$DCB.ASN = %FILE#;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:122  
   9530  2 001175   001000 236007                    LDQ     512,DL
         2 001176   100032 552110                    STBQ    26,'10'O,PR1

      663     9531    2           M$STAR$ -> F$DCB.ACS = %DIRECT#;

   9531  2 001177   000002 236007                    LDQ     2,DL
         2 001200   100036 552104                    STBQ    30,'04'O,PR1

      664     9532    2           M$STAR$ -> F$DCB.RES = ' ';

   9532  2 001201   000035 236000 xsym               LDQ     B_VECTNIL+29
         2 001202   100026 756100                    STQ     22,,PR1

      665     9533    2           M$STAR$ -> F$DCB.AMFLG = FALSE#;

   9533  2 001203   000021 236000 3                  LDQ     17
         2 001204   100064 356100                    ANSQ    52,,PR1

      666     9534    2           B$JIT$ -> B$JIT.DCB$ = M$STAR$;

   9534  2 001205   200016 236100                    LDQ     M$STAR$,,AUTO
         2 001206   000000 473400 xsym               LDP3    B$JIT$
         2 001207   300232 756100                    STQ     154,,PR3

      667     9535        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:123  
      668     9536    2   UOPEN_SPEC:
      669     9537    2           CALL FMO$GETDOMAIN(I);          /* Find caller's domain               */

   9537  2 001210   200013 630500       UOPEN_SPEC   EPPR0   I,,AUTO
         2 001211   200132 450500                    STP0    LENGTH+4,,AUTO
         2 001212   200132 630500                    EPPR0   LENGTH+4,,AUTO
         2 001213   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001214   000000 701000 xent               TSX1    FMO$GETDOMAIN
         2 001215   000000 011000                    NOP     0

      670     9538    2           M$STAR$ -> F$DCB.WSR = I;

   9538  2 001216   200016 470500                    LDP0    M$STAR$,,AUTO
         2 001217   200013 236100                    LDQ     I,,AUTO
         2 001220   000022 736000                    QLS     18
         2 001221   000040 552120                    STBQ    32,'20'O,PR0

      671     9539    2   OPEN_SPEC:
      672     9540    2           CALL FMM$DFLOPNSYS;             /* OPEN specific file                 */

   9540  2 001222   000002 631400 xsym  OPEN_SPEC    EPPR1   B_VECTNIL+2
         2 001223   000000 701000 xent               TSX1    FMM$DFLOPNSYS
         2 001224   000000 011000                    NOP     0

      673     9541    2           CALL HFF$TRAPALT ALTRET(SPECIFIC_ABORT); /* Re-establish TRAP control */

   9541  2 001225   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001226   000000 701000 xent               TSX1    HFF$TRAPALT
         2 001227   001340 702000 2                  TSX2    SPECIFIC_ABORT

      674     9542    2           IF NOT M$STAR$ -> F$DCB.FCD

   9542  2 001230   200016 470500                    LDP0    M$STAR$,,AUTO
         2 001231   000031 236100                    LDQ     25,,PR0
         2 001232   020000 316007                    CANQ    8192,DL
         2 001233   001266 601000 2                  TNZ     s:9562

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:124  
      675     9543    2            THEN                           /* DCB didn't get OPENed              */
      676     9544    3             DO;

      677     9545    3              IF NATIVE_LANG ~= ' '

   9545  2 001234   200011 236100                    LDQ     NATIVE_LANG,,AUTO
         2 001235   777000 376003                    ANQ     -512,DU
         2 001236   040000 116003                    CMPQ    16384,DU
         2 001237   001257 600000 2                  TZE     s:9556

      678     9546    3              THEN                         /* Native lang didn't work, remove it */
      679     9547    4              DO;

      680     9548    4                 NATIVE_LANG = ' ';

   9548  2 001240   040000 236003                    LDQ     16384,DU
         2 001241   200011 756100                    STQ     NATIVE_LANG,,AUTO

      681     9549    4                 M$STAR$ -> F$DCB.NAME.L = M$STAR$ -> F$DCB.NAME.L -1;

   9549  2 001242   000010 236100                    LDQ     8,,PR0
         2 001243   777000 036003                    ADLQ    -512,DU
         2 001244   000010 552140                    STBQ    8,'40'O,PR0

      682     9550    4                 CALL INSERT(M$STAR$ -> F$DCB.NAME.C,

   9550  2 001245   200016 470500                    LDP0    M$STAR$,,AUTO
         2 001246   000010 236100                    LDQ     8,,PR0
         2 001247   000033 772000                    QRL     27
         2 001250   040106 100400                    MLR     fill='040'O
         2 001251   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001252   000010 200001                    ADSC9   8,Q,PR0                  cn=1,n=1

      683     9551    4                  M$STAR$ -> F$DCB.NAME.L,1,' '); /* Step on native language     */
      684     9552    4                 RESULTS.NNATIVE = TRUE#;

   9552  2 001253   200117 470500                    LDP0    AD_RSLT$,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:125  
         2 001254   002000 236003                    LDQ     1024,DU
         2 001255   000000 256100                    ORSQ    0,,PR0

      685     9553    4                 GOTO UOPEN_SPEC;

   9553  2 001256   001210 710000 2                  TRA     UOPEN_SPEC

      686     9554    4                 END;
      687     9555                                                /* Nothing worked, processor was bad  */
      688     9556    3              RESULTS.NOFILE = TRUE#;

   9556  2 001257   200117 471500                    LDP1    AD_RSLT$,,AUTO
         2 001260   200000 236003                    LDQ     65536,DU
         2 001261   100000 256100                    ORSQ    0,,PR1

      689     9557    3              ERROR = %E$NOHPROC;

   9557  2 001262   001510 235007                    LDA     840,DL
         2 001263   200014 755100                    STA     ERROR,,AUTO

      690     9558    3              ALTRETURN;

   9558  2 001264   200120 221300                    LDX1  ! AD_RSLT$+1,,AUTO
         2 001265   000000 702211                    TSX2  ! 0,X1

      691     9559    3              END;
      692     9560        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:126  
      693     9561                                                /* OPEN worked                        */
      694     9562    2           M$STAR$ -> F$DCB.WSR = 0;       /* Insure WSR of opener matches that  */

   9562  2 001266   000000 236003                    LDQ     0,DU
         2 001267   000040 552120                    STBQ    32,'20'O,PR0

      695     9563                                                /* of later M$MREAD in case EXEC only */
      696     9564    2           IF M$STAR$ -> F$DCB.ORG ~= %KEYED# THEN

   9564  2 001270   000032 236100                    LDQ     26,,PR0
         2 001271   777000 376003                    ANQ     -512,DU
         2 001272   002000 116003                    CMPQ    1024,DU
         2 001273   001277 600000 2                  TZE     s:9569

      697     9565    3              DO;

      698     9566    3                ERROR = %E$HELPDERR;       /* Unsuitable for message file        */

   9566  2 001274   001520 235007                    LDA     848,DL
         2 001275   200014 755100                    STA     ERROR,,AUTO

      699     9567    3                GOTO SPECIFIC_ABORT;

   9567  2 001276   001340 710000 2                  TRA     SPECIFIC_ABORT

      700     9568    3                END;
      701     9569    2           IF V$# -> FPT$HELP_V.LIST

   9569  2 001277   000000 471400 xsym               LDP1    B$PS0$
         2 001300   100001 236100                    LDQ     1,,PR1
         2 001301   000010 316007                    CANQ    8,DL
         2 001302   001334 600000 2                  TZE     s:9588

      702     9570    2           THEN                            /* He wants a list of topics          */
      703     9571    3             DO;

      704     9572    3                IF V$# -> FPT$HELP_V.ALL OR
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:127  

   9572  2 001303   000004 316007                    CANQ    4,DL
         2 001304   001307 601000 2                  TNZ     s:9576
         2 001305   000002 316007                    CANQ    2,DL
         2 001306   001312 600000 2                  TZE     s:9579

      705     9573    3                  V$# -> FPT$HELP_V.MORE
      706     9574    3                THEN
      707     9575    4                DO;

      708     9576    4                   ERROR = %E$BADHOPT;

   9576  2 001307   001511 235007                    LDA     841,DL
         2 001310   200014 755100                    STA     ERROR,,AUTO

      709     9577    4                   GOTO SPECIFIC_ABORT;

   9577  2 001311   001340 710000 2                  TRA     SPECIFIC_ABORT

      710     9578    4                   END;
      711     9579    3                IF KEY1.LEN > 0

   9579  2 001312   200115 473500                    LDP3    AD_KEY1$,,AUTO
         2 001313   300000 236100                    LDQ     0,,PR3
         2 001314   777000 316003                    CANQ    -512,DU
         2 001315   001331 600000 2                  TZE     s:9585
         2 001316   200017 234100                    SZN     WILDCARDING,,AUTO
         2 001317   001331 604000 2                  TMI     s:9585
         2 001320   200020 234100                    SZN     RANGE,,AUTO
         2 001321   001331 604000 2                  TMI     s:9585
         2 001322   200116 474500                    LDP4    AD_KEY2$,,AUTO
         2 001323   400000 236100                    LDQ     0,,PR4
         2 001324   777000 316003                    CANQ    -512,DU
         2 001325   001331 601000 2                  TNZ     s:9585

      712     9580    3                 AND NOT WILDCARDING
      713     9581    3                 AND NOT RANGE
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:128  
      714     9582    3                 AND KEY2.LEN = 0 THEN     /* He gave ONE keyword to find subs   */
      715     9583    3                    CALL LIST_SUB_TOPICS ALTRET(SPECIFIC_ABORT);

   9583  2 001326   002230 701000 2                  TSX1    LIST_SUB_TOPICS
         2 001327   001340 702000 2                  TSX2    SPECIFIC_ABORT
         2 001330   001336 710000 2                  TRA     s:9589

      716     9584    3                ELSE
      717     9585    3                    CALL LIST_MAJOR_TOPICS ALTRET(SPECIFIC_ABORT);

   9585  2 001331   002412 701000 2                  TSX1    LIST_MAJOR_TOPICS
         2 001332   001340 702000 2                  TSX2    SPECIFIC_ABORT

      718     9586    3                END;

   9586  2 001333   001336 710000 2                  TRA     s:9589

      719     9587    2           ELSE                            /* He wants HELP text                 */
      720     9588    2              CALL HELP_TEXT ALTRET(SPECIFIC_ABORT);

   9588  2 001334   001342 701000 2                  TSX1    HELP_TEXT
         2 001335   001340 702000 2                  TSX2    SPECIFIC_ABORT

      721     9589    2           RETURN;

   9589  2 001336   200120 221300                    LDX1  ! AD_RSLT$+1,,AUTO
         2 001337   000001 702211                    TSX2  ! 1,X1

   9583  2 001340                       SPECIFIC_AB* null
      722     9590        /**/
      723     9591    2   SPECIFIC_ABORT: ;
      724     9592    2           ALTRETURN;

   9592  2 001340   200120 221300                    LDX1  ! AD_RSLT$+1,,AUTO
         2 001341   000000 702211                    TSX2  ! 0,X1

      725     9593        /**/
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:129  
      726     9594    2   END SPECIFIC_FILE;
      727     9595        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:130  
      728     9596    1   HELP_TEXT: PROC ALTRET;

   9596  2 001342   200122 741300       HELP_TEXT    STX1  ! AD_RSLT$+3,,AUTO

      729     9597    2           IF RANGE

   9597  2 001343   200020 234100                    SZN     RANGE,,AUTO
         2 001344   001415 605000 2                  TPL     s:9622

      730     9598    2           THEN                            /* He wants a range of HELP text msgs */
      731     9599    3           DO;

      732     9600    3              IF V$# -> FPT$HELP_V.ALL OR

   9600  2 001345   000000 470400 xsym               LDP0    B$PS0$
         2 001346   000001 236100                    LDQ     1,,PR0
         2 001347   000004 316007                    CANQ    4,DL
         2 001350   001353 601000 2                  TNZ     s:9604
         2 001351   000002 316007                    CANQ    2,DL
         2 001352   001356 600000 2                  TZE     s:9607

      733     9601    3                V$# -> FPT$HELP_V.MORE
      734     9602    3              THEN
      735     9603    4              DO;

      736     9604    4                 ERROR = %E$BADHOPT;

   9604  2 001353   001511 235007                    LDA     841,DL
         2 001354   200014 755100                    STA     ERROR,,AUTO

      737     9605    4                 ALTRETURN;

   9605  2 001355   000000 702211                    TSX2  ! 0,X1

      738     9606    4                 END;
      739     9607    3              CALL CONCAT(ENDKEY.TEXT,

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:131  
   9607  2 001356   200116 471500                    LDP1    AD_KEY2$,,AUTO
         2 001357   100000 236100                    LDQ     0,,PR1
         2 001360   000033 772000                    QRL     27
         2 001361   000000 620006                    EAX0    0,QL
         2 001362   040100 100540                    MLR     fill='040'O
         2 001363   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         2 001364   200042 200077                    ADSC9   ENDKEY,,AUTO             cn=1,n=63
         2 001365   000077 116007                    CMPQ    63,DL
         2 001366   001374 603000 2                  TRC     s:9609
         2 001367   777700 620006                    EAX0    -64,QL
         2 001370   777777 660003                    ERX0    -1,DU
         2 001371   040146 100400                    MLR     fill='040'O
         2 001372   000022 000001 3                  ADSC9   18                       cn=0,n=1
         2 001373   200042 200010                    ADSC9   ENDKEY,Q,AUTO            cn=1,n=*X0

      740     9608    3               SUBSTR(KEY2.TEXT,0,KEY2.LEN),BITASC('777'O));
      741     9609    3              ENDKEY.LEN = KEY2.LEN +1;    /* Add high stuff to make range end   */

   9609  2 001374   100000 236100                    LDQ     0,,PR1
         2 001375   000033 772000                    QRL     27
         2 001376   000001 036007                    ADLQ    1,DL
         2 001377   000033 736000                    QLS     27
         2 001400   200042 552140                    STBQ    ENDKEY,'40'O,AUTO

      742     9610    3              IF KEY1.LEN = 0

   9610  2 001401   200115 473500                    LDP3    AD_KEY1$,,AUTO
         2 001402   300000 236100                    LDQ     0,,PR3
         2 001403   777000 316003                    CANQ    -512,DU
         2 001404   001410 601000 2                  TNZ     s:9615

      743     9611    3               THEN                        /* Start at beginning, can't READKEY  */
      744     9612    3                 CALL READSEQ ALTRET(HELPTEXT_ABORT);

   9612  2 001405   003411 701000 2                  TSX1    READSEQ
         2 001406   001546 702000 2                  TSX2    HELPTEXT_ABORT
         2 001407   001414 710000 2                  TRA     s:9618
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:132  

      745     9613    3               ELSE                        /* KEY1 is valid to READKEY with      */
      746     9614    4                 DO;

      747     9615    4                    RETURNKEY.LEN = KEY1.LEN;    /* Set first key to try         */

   9615  2 001410   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

      748     9616    4                    RETURNKEY.TEXT = KEY1.TEXT;

   9616  2 001411   040100 100500                    MLR     fill='040'O
         2 001412   300000 200037                    ADSC9   0,,PR3                   cn=1,n=31
         2 001413   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63

      749     9617    4                    END;

      750     9618    3              GOTO USE_END;

   9618  2 001414   002165 710000 2                  TRA     USE_END

      751     9619    3              END;
      752     9620        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:133  
      753     9621                                                /* He wants HELP for a single TOPIC   */
      754     9622    2           IF V$# -> FPT$HELP_V.ALL

   9622  2 001415   000000 470400 xsym               LDP0    B$PS0$
         2 001416   000001 236100                    LDQ     1,,PR0
         2 001417   000004 316007                    CANQ    4,DL
         2 001420   001423 601000 2                  TNZ     s:9626
         2 001421   000002 316007                    CANQ    2,DL
         2 001422   001471 600000 2                  TZE     s:9648

      755     9623    2             OR V$# -> FPT$HELP_V.MORE
      756     9624    2             THEN                          /* Single TOPIC ALL or MORE           */
      757     9625    3              DO;                          /* Set up RETURNKEY to next text      */

      758     9626    3                 CALL HFF$NILERASE(RESULTS_PS#) ALTRET(NEED_RESULTS);

   9626  2 001423   000011 630400 3                  EPPR0   9
         2 001424   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001425   000000 701000 xent               TSX1    HFF$NILERASE
         2 001426   001430 702000 2                  TSX2    NEED_RESULTS

      759     9627    4                 DO WHILE (NEVER#);

   9627  2 001427   001433 710000 2                  TRA     s:9631

      760     9628    4   NEED_RESULTS:    ERROR = %E$NEEDRESULTS;    /* ALL & MORE require RESULTS     */

   9628  2 001430   001517 235007       NEED_RESULTS LDA     847,DL
         2 001431   200014 755100                    STA     ERROR,,AUTO

      761     9629    4                    IF FOREVER# THEN GOTO HELPTEXT_ABORT;

   9629  2 001432   001546 710000 2                  TRA     HELPTEXT_ABORT

      762     9630    4                    END;

      763     9631    3                 RETURNKEY.LEN = RESULTS$# -> B$RESULTS.CODEUSED.LEN;  /* First key */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:134  

   9631  2 001433   000000 470400 xsym               LDP0    B$PS7$
         2 001434   000004 236100                    LDQ     4,,PR0
         2 001435   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

      764     9632    3                 RETURNKEY.TEXT = RESULTS$# -> B$RESULTS.CODEUSED.TEXT;

   9632  2 001436   040100 100500                    MLR     fill='040'O
         2 001437   000004 200042                    ADSC9   4,,PR0                   cn=1,n=34
         2 001440   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63

      765     9633    3                 CALL INDEX(C_COUNT,ZERO_CHAR,

   9633  2 001441   000000 124500                    SCM     mask='000'O
         2 001442   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63
         2 001443   000115 000001 1                  ADSC9   ZERO_CHAR                cn=0,n=1
         2 001444   200102 000100                    ARG     C_COUNT,,AUTO

      766     9634    3                  RETURNKEY.TEXT,0);       /* Find binary zero separator         */
      767     9635    3                 IF C_COUNT >= RETURNKEY.LEN

   9635  2 001445   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 001446   000033 772000                    QRL     27
         2 001447   200102 116100                    CMPQ    C_COUNT,,AUTO
         2 001450   001452 600000 2                  TZE     s:9638
         2 001451   001460 603000 2                  TRC     s:9642

      768     9636    3                  THEN                     /* No binary zero, CODEUSED not TEXT  */
      769     9637    4                   DO;

      770     9638    4                    ERROR = %E$NOMOREHELP;    /* Treat unable to '?' as NO MORE  */

   9638  2 001452   001512 235007                    LDA     842,DL
         2 001453   200014 755100                    STA     ERROR,,AUTO

      771     9639    4                    RESULTS.NOMSG = TRUE#;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:135  
   9639  2 001454   200117 471500                    LDP1    AD_RSLT$,,AUTO
         2 001455   100000 236003                    LDQ     32768,DU
         2 001456   100000 256100                    ORSQ    0,,PR1

      772     9640    4                    GOTO HELPTEXT_ABORT;

   9640  2 001457   001546 710000 2                  TRA     HELPTEXT_ABORT

      773     9641    4                    END;
      774     9642    3                 KEY1.TEXT = SUBSTR(RETURNKEY.TEXT,0,C_COUNT);

   9642  2 001460   200102 720100                    LXL0    C_COUNT,,AUTO
         2 001461   200115 471500                    LDP1    AD_KEY1$,,AUTO
         2 001462   040100 100540                    MLR     fill='040'O
         2 001463   200021 200010                    ADSC9   RETURNKEY,,AUTO          cn=1,n=*X0
         2 001464   100000 200037                    ADSC9   0,,PR1                   cn=1,n=31

      775     9643    3                 KEY1.LEN = C_COUNT;       /* Pretend user passed KEY1           */

   9643  2 001465   200102 236100                    LDQ     C_COUNT,,AUTO
         2 001466   000033 736000                    QLS     27
         2 001467   100000 552140                    STBQ    0,'40'O,PR1

      776     9644    3                 GOTO MAKE_END;

   9644  2 001470   002130 710000 2                  TRA     MAKE_END

      777     9645    3                 END;
      778     9646        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:136  
      779     9647                                                /* Single TOPIC, not ALL or MORE      */
      780     9648    2              IF KEY1.LEN ~= 0

   9648  2 001471   200115 471500                    LDP1    AD_KEY1$,,AUTO
         2 001472   100000 236100                    LDQ     0,,PR1
         2 001473   777000 316003                    CANQ    -512,DU
         2 001474   002115 600000 2                  TZE     DFLT_TOPIC

      781     9649    2              THEN                    /* Not the processor's default message     */
      782     9650    3              DO;

      783     9651    3                 IF V$# -> FPT$HELP_V.XLATEKEY

   9651  2 001475   000001 236100                    LDQ     1,,PR0
         2 001476   000040 316007                    CANQ    32,DL
         2 001477   001503 600000 2                  TZE     s:9655

      784     9652    3                  THEN                     /* KEY translation to upper case OK   */
      785     9653    3                    CASE_TRANS_OK = TRUE#;

   9653  2 001500   400000 236003                    LDQ     -131072,DU
         2 001501   200007 756100                    STQ     CASE_TRANS_OK,,AUTO
         2 001502   001504 710000 2                  TRA     TRY_KEY1

      786     9654    3                  ELSE
      787     9655    3                    CASE_TRANS_OK = FALSE#;

   9655  2 001503   200007 450100                    STZ     CASE_TRANS_OK,,AUTO

      788     9656    3   TRY_KEY1:     TRYKEY.LEN = KEY1.LEN;    /* Set starting key                   */

   9656  2 001504   200115 470500       TRY_KEY1     LDP0    AD_KEY1$,,AUTO
         2 001505   000000 236100                    LDQ     0,,PR0
         2 001506   200062 552140                    STBQ    TRYKEY,'40'O,AUTO

      789     9657    3                 TRYKEY.TEXT = KEY1.TEXT;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:137  
   9657  2 001507   040100 100500                    MLR     fill='040'O
         2 001510   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         2 001511   200062 200077                    ADSC9   TRYKEY,,AUTO             cn=1,n=63

      790     9658    3                 CALL ABBREV ALTRET(HELPTEXT_ABORT);     /* Find TOPIC  */

   9658  2 001512   002763 701000 2                  TSX1    ABBREV
         2 001513   001546 702000 2                  TSX2    HELPTEXT_ABORT

      791     9659    3                 IF RETURNKEY.LEN = 0

   9659  2 001514   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 001515   777000 316003                    CANQ    -512,DU
         2 001516   001550 601000 2                  TNZ     s:9685

      792     9660    3                  THEN                     /* Abbreviation not found             */
      793     9661    4                   DO;

   9655  2 001517                       NO_SUCH_TOP* null
      794     9662    4   NO_SUCH_TOPIC:   ;
      795     9663    4                    IF CASE_TRANS_OK

   9663  2 001517   200007 234100                    SZN     CASE_TRANS_OK,,AUTO
         2 001520   001531 605000 2                  TPL     s:9670

      796     9664    4                     THEN                  /* We failed in (perhaps) lower case  */
      797     9665    5                       DO;

      798     9666    5                         CALL XLATE(KEY1.TEXT,EMH_UC_XLATE_TBL,KEY1.TEXT);

   9666  2 001521   200115 470500                    LDP0    AD_KEY1$,,AUTO
         2 001522   000000 471400 xsym               LDP1    B$XL_UPPER$
         2 001523   040100 160500                    MVT     fill='040'O
         2 001524   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         2 001525   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         2 001526   100000 000100                    ARG     0,,PR1

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:138  
      799     9667    5                         CASE_TRANS_OK = FALSE#;    /* Don't try this again      */

   9667  2 001527   200007 450100                    STZ     CASE_TRANS_OK,,AUTO

      800     9668    5                         GOTO TRY_KEY1;

   9668  2 001530   001504 710000 2                  TRA     TRY_KEY1

      801     9669    5                         END;
      802     9670    4                    IF V$# -> FPT$HELP_V.SUBTOPIC

   9670  2 001531   000000 470400 xsym               LDP0    B$PS0$
         2 001532   000001 236100                    LDQ     1,,PR0
         2 001533   000020 316007                    CANQ    16,DL
         2 001534   001541 600000 2                  TZE     s:9678

      803     9671    4                     THEN                  /* TOPIC SUBST'N OK, try default msg  */
      804     9672    5                       DO;

      805     9673    5                         RESULTS.ALTMSG = TRUE#;

   9673  2 001535   200117 471500                    LDP1    AD_RSLT$,,AUTO
         2 001536   040000 236003                    LDQ     16384,DU
         2 001537   100000 256100                    ORSQ    0,,PR1

      806     9674    5                         GOTO DFLT_TOPIC;

   9674  2 001540   002115 710000 2                  TRA     DFLT_TOPIC

      807     9675    5                         END;
      808     9676    4                      ELSE                 /* TOPIC SUBST'N not allowed          */
      809     9677    5                        DO;

      810     9678    5                          ERROR = %E$NOTOPIC;

   9678  2 001541   001514 235007                    LDA     844,DL
         2 001542   200014 755100                    STA     ERROR,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:139  

      811     9679    5                          RESULTS.NOMSG = TRUE#;

   9679  2 001543   200117 471500                    LDP1    AD_RSLT$,,AUTO
         2 001544   100000 236003                    LDQ     32768,DU
         2 001545   100000 256100                    ORSQ    0,,PR1

      812     9680    5   HELPTEXT_ABORT:        ALTRETURN;

   9680  2 001546   200122 221300       HELPTEXT_AB* LDX1  ! AD_RSLT$+3,,AUTO
         2 001547   000000 702211                    TSX2  ! 0,X1

      813     9681    5                          END;
      814     9682    4                    END;
      815     9683        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:140  
      816     9684                                                /* Major key found                    */
      817     9685    3                 IF RECORD_TYPE = SYN_REC#

   9685  2 001550   200012 235100                    LDA     RECORD_TYPE,,AUTO
         2 001551   000003 115007                    CMPA    3,DL
         2 001552   001570 601000 2                  TNZ     s:9694

      818     9686    3                  THEN                     /* User passed a synonym              */
      819     9687    4                     DO;

      820     9688    4                       KEY1.LEN = M$STAR$ -> F$DCB.ARS;    /* Key len<-data len  */

   9688  2 001553   200115 470500                    LDP0    AD_KEY1$,,AUTO
         2 001554   200016 471500                    LDP1    M$STAR$,,AUTO
         2 001555   100000 236100                    LDQ     0,,PR1
         2 001556   000033 736000                    QLS     27
         2 001557   000000 552140                    STBQ    0,'40'O,PR0

      821     9689    4                       KEY1.TEXT = SUBSTR(TEXT,0,KEY1.LEN);

   9689  2 001560   000000 236100                    LDQ     0,,PR0
         2 001561   000033 772000                    QRL     27
         2 001562   200114 471500                    LDP1    AD_TBUF$,,AUTO
         2 001563   000000 620006                    EAX0    0,QL
         2 001564   040100 100540                    MLR     fill='040'O
         2 001565   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         2 001566   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31

      822     9690    4                       GOTO FIND_SUBTOPIC;

   9690  2 001567   001600 710000 2                  TRA     FIND_SUBTOPIC

      823     9691    4                       END;
      824     9692    3                  ELSE                     /* User passed a real TOPIC name      */
      825     9693    4                    DO;

      826     9694    4                      KEY1.TEXT = SUBSTR(RETURNKEY.TEXT,0,C_COUNT);
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:141  

   9694  2 001570   200102 720100                    LXL0    C_COUNT,,AUTO
         2 001571   200115 470500                    LDP0    AD_KEY1$,,AUTO
         2 001572   040100 100540                    MLR     fill='040'O
         2 001573   200021 200010                    ADSC9   RETURNKEY,,AUTO          cn=1,n=*X0
         2 001574   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31

      827     9695    4                      KEY1.LEN = C_COUNT;    /* Abbreviate it to match database  */

   9695  2 001575   200102 236100                    LDQ     C_COUNT,,AUTO
         2 001576   000033 736000                    QLS     27
         2 001577   000000 552140                    STBQ    0,'40'O,PR0

      828     9696    4                      END;

      829     9697    3   FIND_SUBTOPIC:
      830     9698    3                 IF KEY2.LEN ~= 0

   9698  2 001600   200116 471500       FIND_SUBTOP* LDP1    AD_KEY2$,,AUTO
         2 001601   100000 236100                    LDQ     0,,PR1
         2 001602   777000 316003                    CANQ    -512,DU
         2 001603   002053 600000 2                  TZE     DFLT_STOPIC

      831     9699    3                 THEN                      /* A subtopic exists                  */
      832     9700    4                 DO;

      833     9701    4                    IF V$# -> FPT$HELP_V.XLATEKEY

   9701  2 001604   000000 473400 xsym               LDP3    B$PS0$
         2 001605   300001 236100                    LDQ     1,,PR3
         2 001606   000040 316007                    CANQ    32,DL
         2 001607   001612 600000 2                  TZE     TRY_KEY2

      834     9702    4                     THEN                  /* KEY translation to upper case OK   */
      835     9703    4                       CASE_TRANS_OK = TRUE#;

   9703  2 001610   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:142  
         2 001611   200007 756100                    STQ     CASE_TRANS_OK,,AUTO

      836     9704    4   TRY_KEY2:        CALL CONCAT(TRYKEY.TEXT,SUBSTR(KEY1.TEXT,0,KEY1.LEN),

   9704  2 001612   200115 470500       TRY_KEY2     LDP0    AD_KEY1$,,AUTO
         2 001613   000000 236100                    LDQ     0,,PR0
         2 001614   000033 772000                    QRL     27
         2 001615   200116 471500                    LDP1    AD_KEY2$,,AUTO
         2 001616   000000 620006                    EAX0    0,QL
         2 001617   100000 236100                    LDQ     0,,PR1
         2 001620   000033 772000                    QRL     27
         2 001621   040100 100540                    MLR     fill='040'O
         2 001622   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 001623   200062 200077                    ADSC9   TRYKEY,,AUTO             cn=1,n=63
         2 001624   000000 621006                    EAX1    0,QL
         2 001625   000000 636010                    EAQ     0,X0
         2 001626   000022 772000                    QRL     18
         2 001627   000077 116007                    CMPQ    63,DL
         2 001630   001652 603000 2                  TRC     s:9706
         2 001631   200132 740100                    STX0    LENGTH+4,,AUTO
         2 001632   777700 620010                    EAX0    -64,X0
         2 001633   777777 660003                    ERX0    -1,DU
         2 001634   200132 235100                    LDA     LENGTH+4,,AUTO
         2 001635   000022 771000                    ARL     18
         2 001636   040145 100400                    MLR     fill='040'O
         2 001637   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001640   200062 200010                    ADSC9   TRYKEY,A,AUTO            cn=1,n=*X0
         2 001641   200132 236100                    LDQ     LENGTH+4,,AUTO
         2 001642   000022 772000                    QRL     18
         2 001643   000076 116007                    CMPQ    62,DL
         2 001644   001652 603000 2                  TRC     s:9706
         2 001645   777701 620006                    EAX0    -63,QL
         2 001646   777777 660003                    ERX0    -1,DU
         2 001647   040146 100540                    MLR     fill='040'O
         2 001650   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
         2 001651   200062 400010                    ADSC9   TRYKEY,Q,AUTO            cn=2,n=*X0

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:143  
      837     9705    4                      ' ',SUBSTR(KEY2.TEXT,0,KEY2.LEN));
      838     9706    4                    TRYKEY.LEN = KEY1.LEN + KEY2.LEN +1;

   9706  2 001652   100000 236100                    LDQ     0,,PR1
         2 001653   000033 772000                    QRL     27
         2 001654   200132 756100                    STQ     LENGTH+4,,AUTO
         2 001655   000000 236100                    LDQ     0,,PR0
         2 001656   000033 772000                    QRL     27
         2 001657   200132 036100                    ADLQ    LENGTH+4,,AUTO
         2 001660   000001 036007                    ADLQ    1,DL
         2 001661   000033 736000                    QLS     27
         2 001662   200062 552140                    STBQ    TRYKEY,'40'O,AUTO

      839     9707    4                    CALL ABBREV ALTRET(HELPTEXT_ABORT);

   9707  2 001663   002763 701000 2                  TSX1    ABBREV
         2 001664   001546 702000 2                  TSX2    HELPTEXT_ABORT

      840     9708    4                    IF RETURNKEY.LEN = 0

   9708  2 001665   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 001666   777000 316003                    CANQ    -512,DU
         2 001667   001720 601000 2                  TNZ     s:9733

      841     9709    4                     THEN                  /* Abbreviation not found             */
      842     9710    5                      DO;

   9705  2 001670                       NO_SUCH_STO* null
      843     9711    5   NO_SUCH_STOPIC:      ;
      844     9712    5                        IF CASE_TRANS_OK

   9712  2 001670   200007 234100                    SZN     CASE_TRANS_OK,,AUTO
         2 001671   001702 605000 2                  TPL     s:9719

      845     9713    5                         THEN              /* We failed in (perhaps) lower case  */
      846     9714    6                           DO;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:144  
      847     9715    6                             CALL XLATE(KEY2.TEXT,EMH_UC_XLATE_TBL,KEY2.TEXT);

   9715  2 001672   200116 470500                    LDP0    AD_KEY2$,,AUTO
         2 001673   000000 471400 xsym               LDP1    B$XL_UPPER$
         2 001674   040100 160500                    MVT     fill='040'O
         2 001675   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         2 001676   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         2 001677   100000 000100                    ARG     0,,PR1

      848     9716    6                             CASE_TRANS_OK = FALSE#;    /* Don't try this again  */

   9716  2 001700   200007 450100                    STZ     CASE_TRANS_OK,,AUTO

      849     9717    6                             GOTO TRY_KEY2;

   9717  2 001701   001612 710000 2                  TRA     TRY_KEY2

      850     9718    6                             END;
      851     9719    5                        IF V$# -> FPT$HELP_V.SUBSTOPIC

   9719  2 001702   000000 470400 xsym               LDP0    B$PS0$
         2 001703   000002 234100                    SZN     2,,PR0
         2 001704   001711 605000 2                  TPL     s:9727

      852     9720    5                         THEN              /* SUBST'N specified, try without KEY2 */
      853     9721    6                           DO;

      854     9722    6                             RESULTS.ALTMSG = TRUE#;

   9722  2 001705   200117 471500                    LDP1    AD_RSLT$,,AUTO
         2 001706   040000 236003                    LDQ     16384,DU
         2 001707   100000 256100                    ORSQ    0,,PR1

      855     9723    6                             GOTO DFLT_STOPIC;

   9723  2 001710   002053 710000 2                  TRA     DFLT_STOPIC

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:145  
      856     9724    6                             END;
      857     9725    5                         ELSE              /* SUBST'N not specified, error him   */
      858     9726    6                           DO;

      859     9727    6                             ERROR = %E$NOTOPIC;

   9727  2 001711   001514 235007                    LDA     844,DL
         2 001712   200014 755100                    STA     ERROR,,AUTO

      860     9728    6                             RESULTS.NOMSG = TRUE#;

   9728  2 001713   200117 471500                    LDP1    AD_RSLT$,,AUTO
         2 001714   100000 236003                    LDQ     32768,DU
         2 001715   100000 256100                    ORSQ    0,,PR1

      861     9729    6                             ALTRETURN;

   9729  2 001716   200122 221300                    LDX1  ! AD_RSLT$+3,,AUTO
         2 001717   000000 702211                    TSX2  ! 0,X1

      862     9730    6                             END;
      863     9731    5                        END;
      864     9732                                                /* Check II and munge into key        */
      865     9733    4                    SRCH_START = 0;

   9733  2 001720   200105 450100                    STZ     SRCH_START,,AUTO

      866     9734    4   SEARCH_IT:       CALL SEARCH(SRCH_IDX,SRCH_VAL,SRCH_TBL,

   9734  2 001721   200105 720100       SEARCH_IT    LXL0    SRCH_START,,AUTO
         2 001722   777660 620010                    EAX0    -80,X0
         2 001723   777777 660003                    ERX0    -1,DU
         2 001724   200105 236100                    LDQ     SRCH_START,,AUTO
         2 001725   000000 470400 xsym               LDP0    B$SR_NON_DEC$
         2 001726   200114 471500                    LDP1    AD_TBUF$,,AUTO
         2 001727   000000 164546                    TCT
         2 001730   100000 000010                    ADSC9   0,Q,PR1                  cn=0,n=*X0
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:146  
         2 001731   000000 000100                    ARG     0,,PR0
         2 001732   200103 000100                    ARG     SRCH_IDX,,AUTO
         2 001733   200103 235100                    LDA     SRCH_IDX,,AUTO
         2 001734   000033 771000                    ARL     27
         2 001735   200104 755100                    STA     SRCH_VAL,,AUTO
         2 001736   200103 551140                    STBA    SRCH_IDX,'40'O,AUTO
         2 001737   200103 056100                    ASQ     SRCH_IDX,,AUTO
         2 001740   001756 606400 2                  TTN     SEARCH_DONE

      867     9735    4                     TEXT,SRCH_START) ALTRET(SEARCH_DONE);
      868     9736    4                    IF SUBSTR(TEXT,SRCH_IDX,1) ~= ' '

   9736  2 001741   200103 235100                    LDA     SRCH_IDX,,AUTO
         2 001742   040000 106505                    CMPC    fill='040'O
         2 001743   100000 000001                    ADSC9   0,A,PR1                  cn=0,n=1
         2 001744   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001745   001751 600000 2                  TZE     s:9742

      869     9737    4                     THEN                  /* Trash encountered                  */
      870     9738    5                      DO;

      871     9739    5   DB_ERROR:            ERROR = %E$HELPDERR;    /* HELP database error           */

   9739  2 001746   001520 235007       DB_ERROR     LDA     848,DL
         2 001747   200014 755100                    STA     ERROR,,AUTO

      872     9740    5                        GOTO HELPTEXT_ABORT;

   9740  2 001750   001546 710000 2                  TRA     HELPTEXT_ABORT

      873     9741    5                        END;
      874     9742    4                      IF SRCH_START = SRCH_IDX

   9742  2 001751   200103 116100                    CMPQ    SRCH_IDX,,AUTO
         2 001752   001756 601000 2                  TNZ     SEARCH_DONE

      875     9743    4                        THEN               /* Consecutive spaces, keep looking   */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:147  
      876     9744    5                          DO;

      877     9745    5                            SRCH_START = SRCH_IDX +1;

   9745  2 001753   000001 035007                    ADLA    1,DL
         2 001754   200105 755100                    STA     SRCH_START,,AUTO

      878     9746    5                            GOTO SEARCH_IT;    /* Continue searching             */

   9746  2 001755   001721 710000 2                  TRA     SEARCH_IT

      879     9747    5                            END;
      880     9748    4                        ELSE               /* Spaces skipped a number            */
      881     9749    5   SEARCH_DONE:           DO;

   9749  2 001756                       SEARCH_DONE  null
      882     9750    5                            CALL CHARBIN(CONV_UBIN,

   9750  2 001756   200103 236100                    LDQ     SRCH_IDX,,AUTO
         2 001757   200105 136100                    SBLQ    SRCH_START,,AUTO
         2 001760   200114 470500                    LDP0    AD_TBUF$,,AUTO
         2 001761   000000 620006                    EAX0    0,QL
         2 001762   200105 235100                    LDA     SRCH_START,,AUTO
         2 001763   000100 305545                    DTB
         2 001764   000000 030010                    NDSC9   0,A,PR0                  cn=0,s=nosgn,sf=0,n=*X0
         2 001765   200132 000010                    NDSC9   LENGTH+4,,AUTO           cn=0,s=lsgnf,sf=0,n=8
         2 001766   200133 236100                    LDQ     LENGTH+5,,AUTO
         2 001767   200106 756100                    STQ     CONV_UBIN,,AUTO

      883     9751    5                             SUBSTR(TEXT,SRCH_START,
      884     9752    5                              SRCH_IDX - SRCH_START));
      885     9753    5                            IF CONV_UBIN > BITBIN('777'O)

   9753  2 001770   001000 116007                    CMPQ    512,DL
         2 001771   001746 603000 2                  TRC     DB_ERROR

      886     9754    5                             THEN          /* II is too big                      */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:148  
      887     9755    5                               GOTO DB_ERROR;    /* Database error               */
      888     9756    5                            CALL CONCAT(RETURNKEY.TEXT,SUBSTR(KEY1.TEXT,0,KEY1.LEN),

   9756  2 001772   200115 471500                    LDP1    AD_KEY1$,,AUTO
         2 001773   100000 236100                    LDQ     0,,PR1
         2 001774   000033 772000                    QRL     27
         2 001775   000000 620006                    EAX0    0,QL
         2 001776   200106 236100                    LDQ     CONV_UBIN,,AUTO
         2 001777   000033 736000                    QLS     27
         2 002000   000001 276000 3                  ORQ     1
         2 002001   040100 100540                    MLR     fill='040'O
         2 002002   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         2 002003   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63
         2 002004   200132 756100                    STQ     LENGTH+4,,AUTO
         2 002005   000000 636010                    EAQ     0,X0
         2 002006   000022 772000                    QRL     18
         2 002007   000077 116007                    CMPQ    63,DL
         2 002010   002045 603000 2                  TRC     s:9758
         2 002011   200133 740100                    STX0    LENGTH+5,,AUTO
         2 002012   777700 620010                    EAX0    -64,X0
         2 002013   777777 660003                    ERX0    -1,DU
         2 002014   200133 236100                    LDQ     LENGTH+5,,AUTO
         2 002015   000022 772000                    QRL     18
         2 002016   040146 100400                    MLR     fill='040'O
         2 002017   000115 000001 1                  ADSC9   ZERO_CHAR                cn=0,n=1
         2 002020   200021 200010                    ADSC9   RETURNKEY,Q,AUTO         cn=1,n=*X0
         2 002021   000076 116007                    CMPQ    62,DL
         2 002022   002045 603000 2                  TRC     s:9758
         2 002023   200132 236100                    LDQ     LENGTH+4,,AUTO
         2 002024   200134 756100                    STQ     LENGTH+6,,AUTO
         2 002025   000076 220003                    LDX0    62,DU
         2 002026   200133 120100                    SBLX0   LENGTH+5,,AUTO
         2 002027   200133 235100                    LDA     LENGTH+5,,AUTO
         2 002030   000022 771000                    ARL     18
         2 002031   040145 100500                    MLR     fill='040'O
         2 002032   200134 000004                    ADSC9   LENGTH+6,,AUTO           cn=0,n=4
         2 002033   200021 400010                    ADSC9   RETURNKEY,A,AUTO         cn=2,n=*X0
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:149  
         2 002034   200133 236100                    LDQ     LENGTH+5,,AUTO
         2 002035   000022 772000                    QRL     18
         2 002036   000075 116007                    CMPQ    61,DL
         2 002037   002045 603000 2                  TRC     s:9758
         2 002040   777702 621006                    EAX1    -62,QL
         2 002041   777777 661003                    ERX1    -1,DU
         2 002042   040146 100400                    MLR     fill='040'O
         2 002043   000115 000001 1                  ADSC9   ZERO_CHAR                cn=0,n=1
         2 002044   200021 600011                    ADSC9   RETURNKEY,Q,AUTO         cn=3,n=*X1

      889     9757    5                            ZERO_CHAR,BINASC(CONV_UBIN),ZERO_CHAR);
      890     9758    5                           RETURNKEY.LEN = KEY1.LEN +3;   /* Make read key w/ II */

   9758  2 002045   100000 236100                    LDQ     0,,PR1
         2 002046   000033 772000                    QRL     27
         2 002047   000003 036007                    ADLQ    3,DL
         2 002050   000033 736000                    QLS     27
         2 002051   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

      891     9759    5                            END;

      892     9760    4                    END;

   9760  2 002052   002130 710000 2                  TRA     MAKE_END

      893     9761    3                 ELSE                      /* No SUBTOPIC was passed             */
      894     9762    4                 DO;

      895     9763    4   DFLT_STOPIC:     CALL CONCAT(RETURNKEY.TEXT,SUBSTR(KEY1.TEXT,0,KEY1.LEN),

   9763  2 002053   200115 470500       DFLT_STOPIC  LDP0    AD_KEY1$,,AUTO
         2 002054   000000 236100                    LDQ     0,,PR0
         2 002055   000033 772000                    QRL     27
         2 002056   000000 620006                    EAX0    0,QL
         2 002057   040100 100540                    MLR     fill='040'O
         2 002060   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 002061   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:150  
         2 002062   000077 116007                    CMPQ    63,DL
         2 002063   002107 603000 2                  TRC     s:9765
         2 002064   777700 620006                    EAX0    -64,QL
         2 002065   777777 660003                    ERX0    -1,DU
         2 002066   040146 100400                    MLR     fill='040'O
         2 002067   000115 000001 1                  ADSC9   ZERO_CHAR                cn=0,n=1
         2 002070   200021 200010                    ADSC9   RETURNKEY,Q,AUTO         cn=1,n=*X0
         2 002071   000076 116007                    CMPQ    62,DL
         2 002072   002107 603000 2                  TRC     s:9765
         2 002073   777701 620006                    EAX0    -63,QL
         2 002074   777777 660003                    ERX0    -1,DU
         2 002075   040146 100400                    MLR     fill='040'O
         2 002076   000115 000001 1                  ADSC9   ZERO_CHAR                cn=0,n=1
         2 002077   200021 400010                    ADSC9   RETURNKEY,Q,AUTO         cn=2,n=*X0
         2 002100   000075 116007                    CMPQ    61,DL
         2 002101   002107 603000 2                  TRC     s:9765
         2 002102   777702 620006                    EAX0    -62,QL
         2 002103   777777 660003                    ERX0    -1,DU
         2 002104   040146 100400                    MLR     fill='040'O
         2 002105   000115 000001 1                  ADSC9   ZERO_CHAR                cn=0,n=1
         2 002106   200021 600010                    ADSC9   RETURNKEY,Q,AUTO         cn=3,n=*X0

      896     9764    4                      ZERO_CHAR,ZERO_CHAR,ZERO_CHAR);    /* II,JJ of zero        */
      897     9765    4                    RETURNKEY.LEN = KEY1.LEN +3;

   9765  2 002107   000000 236100                    LDQ     0,,PR0
         2 002110   000033 772000                    QRL     27
         2 002111   000003 036007                    ADLQ    3,DL
         2 002112   000033 736000                    QLS     27
         2 002113   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

      898     9766    4                    END;

      899     9767    3                 END;

   9767  2 002114   002130 710000 2                  TRA     MAKE_END

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:151  
      900     9768
      901     9769    2               ELSE                        /* No TOPIC was passed                */
      902     9770    3              DO;

      903     9771    3   DFLT_TOPIC:    CALL CONCAT(RETURNKEY.TEXT,ZERO_CHAR,ZERO_CHAR,ZERO_CHAR);

   9771  2 002115   000115 236000 1     DFLT_TOPIC   LDQ     ZERO_CHAR
         2 002116   000011 772000                    QRL     9
         2 002117   200021 552120                    STBQ    RETURNKEY,'20'O,AUTO
         2 002120   000115 236000 1                  LDQ     ZERO_CHAR
         2 002121   000022 772000                    QRL     18
         2 002122   200021 552110                    STBQ    RETURNKEY,'10'O,AUTO
         2 002123   040100 100400                    MLR     fill='040'O
         2 002124   000115 000001 1                  ADSC9   ZERO_CHAR                cn=0,n=1
         2 002125   200021 600075                    ADSC9   RETURNKEY,,AUTO          cn=3,n=61

      904     9772    3                  RETURNKEY.LEN = 3;

   9772  2 002126   003000 236003                    LDQ     1536,DU
         2 002127   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

      905     9773    3                 END;

      906     9774
      907     9775    2   MAKE_END:  CALL CONCAT(ENDKEY.TEXT,SUBSTR(RETURNKEY.TEXT,0,RETURNKEY.LEN -1),

   9775  2 002130   200021 236100       MAKE_END     LDQ     RETURNKEY,,AUTO
         2 002131   000033 772000                    QRL     27
         2 002132   777777 620006                    EAX0    -1,QL
         2 002133   040100 100540                    MLR     fill='040'O
         2 002134   200021 200010                    ADSC9   RETURNKEY,,AUTO          cn=1,n=*X0
         2 002135   200042 200077                    ADSC9   ENDKEY,,AUTO             cn=1,n=63
         2 002136   000000 636010                    EAQ     0,X0
         2 002137   000022 772000                    QRL     18
         2 002140   000077 116007                    CMPQ    63,DL
         2 002141   002152 603000 2                  TRC     s:9777
         2 002142   200132 740100                    STX0    LENGTH+4,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:152  
         2 002143   777700 620010                    EAX0    -64,X0
         2 002144   777777 660003                    ERX0    -1,DU
         2 002145   200132 235100                    LDA     LENGTH+4,,AUTO
         2 002146   000022 771000                    ARL     18
         2 002147   040145 100400                    MLR     fill='040'O
         2 002150   000116 000001 1                  ADSC9   HIGH_CHAR                cn=0,n=1
         2 002151   200042 200010                    ADSC9   ENDKEY,A,AUTO            cn=1,n=*X0

      908     9776    2                HIGH_CHAR);
      909     9777    2              ENDKEY.LEN = RETURNKEY.LEN;     /* Use '99' to make range end      */

   9777  2 002152   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 002153   200042 552140                    STBQ    ENDKEY,'40'O,AUTO

      910     9778
      911     9779    2              IF V$# -> FPT$HELP_V.ALL

   9779  2 002154   000000 470400 xsym               LDP0    B$PS0$
         2 002155   000001 236100                    LDQ     1,,PR0
         2 002156   000004 316007                    CANQ    4,DL
         2 002157   002165 600000 2                  TZE     USE_END

      912     9780    2              THEN                         /* ?? specified, bump II to 99        */
      913     9781    2                 CALL INSERT(ENDKEY.TEXT,ENDKEY.LEN -2,1,HIGH_CHAR);

   9781  2 002160   200042 236100                    LDQ     ENDKEY,,AUTO
         2 002161   000033 772000                    QRL     27
         2 002162   040106 100400                    MLR     fill='040'O
         2 002163   000116 000001 1                  ADSC9   HIGH_CHAR                cn=0,n=1
         2 002164   200041 600001                    ADSC9   POSITION,Q,AUTO          cn=3,n=1

      914     9782
      915     9783        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:153  
      916     9784    2   USE_END:
      917     9785                                                /* Now, one way or another, we have   */
      918     9786                                                /* created a range of keys for HELP   */
      919     9787                                                /* message text                       */
      920     9788    2           CALL READKEY ALTRET(HELPTEXT_ABORT);    /* Position to range start    */

   9788  2 002165   003320 701000 2     USE_END      TSX1    READKEY
         2 002166   001546 702000 2                  TSX2    HELPTEXT_ABORT

      921     9789    3           DO WHILE (RETURNKEY.TEXT < ENDKEY.TEXT AND RETURNKEY.LEN ~= 0);

   9789  2 002167   002201 710000 2                  TRA     s:9794

      922     9790    3              IF RECORD_TYPE = TEXT_REC#

   9790  2 002170   200012 235100                    LDA     RECORD_TYPE,,AUTO
         2 002171   000001 115007                    CMPA    1,DL
         2 002172   002177 601000 2                  TNZ     s:9793

      923     9791    3              THEN
      924     9792    3                 CALL BUFFER_HELP(%LINES#) ALTRET(HELPTEXT_ABORT);

   9792  2 002173   000005 236000 3                  LDQ     5
         2 002174   200125 756100                    STQ     AD_RSLT$+6,,AUTO
         2 002175   003044 701000 2                  TSX1    BUFFER_HELP
         2 002176   001546 702000 2                  TSX2    HELPTEXT_ABORT

      925     9793    3              CALL READSEQ ALTRET(HELPTEXT_ABORT);

   9793  2 002177   003411 701000 2                  TSX1    READSEQ
         2 002200   001546 702000 2                  TSX2    HELPTEXT_ABORT

      926     9794    3              END;

   9794  2 002201   040100 106500                    CMPC    fill='040'O
         2 002202   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63
         2 002203   200042 200077                    ADSC9   ENDKEY,,AUTO             cn=1,n=63
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:154  
         2 002204   002210 603000 2                  TRC     s:9796
         2 002205   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 002206   777000 316003                    CANQ    -512,DU
         2 002207   002170 601000 2                  TNZ     s:9790

      927     9795
      928     9796    2           IF RESULTS.RECCNT = 0

   9796  2 002210   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 002211   000001 720100                    LXL0    1,,PR0
         2 002212   002226 601000 2                  TNZ     s:9805

      929     9797    2            THEN                           /* We couldn't find anything          */
      930     9798    2              IF V$# -> FPT$HELP_V.ALL

   9798  2 002213   000000 471400 xsym               LDP1    B$PS0$
         2 002214   100001 236100                    LDQ     1,,PR1
         2 002215   000004 316007                    CANQ    4,DL
         2 002216   002221 601000 2                  TNZ     s:9801
         2 002217   000002 316007                    CANQ    2,DL
         2 002220   002224 600000 2                  TZE     s:9803

      931     9799    2               OR V$# -> FPT$HELP_V.MORE
      932     9800    2               THEN                        /* No HELP remains                    */
      933     9801    2                  ERROR = %E$NOMOREHELP;

   9801  2 002221   001512 235007                    LDA     842,DL
         2 002222   200014 755100                    STA     ERROR,,AUTO
         2 002223   002226 710000 2                  TRA     s:9805

      934     9802    2               ELSE                        /* Bad or empty HELP range            */
      935     9803    2                  ERROR = %E$NOTOPIC;

   9803  2 002224   001514 235007                    LDA     844,DL
         2 002225   200014 755100                    STA     ERROR,,AUTO

      936     9804
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:155  
      937     9805    2        RETURN;

   9805  2 002226   200122 221300                    LDX1  ! AD_RSLT$+3,,AUTO
         2 002227   000001 702211                    TSX2  ! 1,X1

      938     9806    2   END HELP_TEXT;
      939     9807        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:156  
      940     9808    1   LIST_SUB_TOPICS: PROC ALTRET;

   9808  2 002230   200122 741300       LIST_SUB_TO* STX1  ! AD_RSLT$+3,,AUTO

      941     9809    2             IF V$# -> FPT$HELP_V.XLATEKEY

   9809  2 002231   000000 470400 xsym               LDP0    B$PS0$
         2 002232   000001 236100                    LDQ     1,,PR0
         2 002233   000040 316007                    CANQ    32,DL
         2 002234   002240 600000 2                  TZE     s:9813

      942     9810    2              THEN                     /* KEY translation to upper case OK   */
      943     9811    2                CASE_TRANS_OK = TRUE#;

   9811  2 002235   400000 236003                    LDQ     -131072,DU
         2 002236   200007 756100                    STQ     CASE_TRANS_OK,,AUTO
         2 002237   002241 710000 2                  TRA     TRY_KEY1

      944     9812    2              ELSE
      945     9813    2                CASE_TRANS_OK = FALSE#;

   9813  2 002240   200007 450100                    STZ     CASE_TRANS_OK,,AUTO

      946     9814    2   TRY_KEY1: TRYKEY.LEN = KEY1.LEN;    /* Set starting key                   */

   9814  2 002241   200115 470500       TRY_KEY1     LDP0    AD_KEY1$,,AUTO
         2 002242   000000 236100                    LDQ     0,,PR0
         2 002243   200062 552140                    STBQ    TRYKEY,'40'O,AUTO

      947     9815    2             TRYKEY.TEXT = KEY1.TEXT;

   9815  2 002244   040100 100500                    MLR     fill='040'O
         2 002245   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         2 002246   200062 200077                    ADSC9   TRYKEY,,AUTO             cn=1,n=63

      948     9816    2             CALL ABBREV ALTRET(ABORT_LIST_LOW_TOPIC);     /* Find TOPIC         */

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:157  
   9816  2 002247   002763 701000 2                  TSX1    ABBREV
         2 002250   002410 702000 2                  TSX2    ABORT_LIST_LOW_TOPIC

      949     9817    2             IF RETURNKEY.LEN = 0

   9817  2 002251   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 002252   777000 316003                    CANQ    -512,DU
         2 002253   002275 601000 2                  TNZ     s:9832

      950     9818    2              THEN                     /* Abbreviation not found             */
      951     9819    3               DO;

      952     9820    3                IF CASE_TRANS_OK

   9820  2 002254   200007 234100                    SZN     CASE_TRANS_OK,,AUTO
         2 002255   002266 605000 2                  TPL     s:9827

      953     9821    3                 THEN                  /* We failed in (perhaps) lower case  */
      954     9822    4                   DO;

      955     9823    4                     CALL XLATE(KEY1.TEXT,EMH_UC_XLATE_TBL,KEY1.TEXT);

   9823  2 002256   200115 470500                    LDP0    AD_KEY1$,,AUTO
         2 002257   000000 471400 xsym               LDP1    B$XL_UPPER$
         2 002260   040100 160500                    MVT     fill='040'O
         2 002261   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         2 002262   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         2 002263   100000 000100                    ARG     0,,PR1

      956     9824    4                     CASE_TRANS_OK = FALSE#;    /* Don't try this again      */

   9824  2 002264   200007 450100                    STZ     CASE_TRANS_OK,,AUTO

      957     9825    4                     GOTO TRY_KEY1;

   9825  2 002265   002241 710000 2                  TRA     TRY_KEY1

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:158  
      958     9826    4                     END;
      959     9827    3                ERROR = %E$NOTOPIC;

   9827  2 002266   001514 235007                    LDA     844,DL
         2 002267   200014 755100                    STA     ERROR,,AUTO

      960     9828    3                RESULTS.NOMSG = TRUE#;

   9828  2 002270   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 002271   100000 236003                    LDQ     32768,DU
         2 002272   000000 256100                    ORSQ    0,,PR0

      961     9829    3                ALTRETURN;

   9829  2 002273   200122 221300                    LDX1  ! AD_RSLT$+3,,AUTO
         2 002274   000000 702211                    TSX2  ! 0,X1

      962     9830    3                END;
      963     9831                                            /* Major key found                    */
      964     9832    2             IF RECORD_TYPE = SYN_REC#

   9832  2 002275   200012 235100                    LDA     RECORD_TYPE,,AUTO
         2 002276   000003 115007                    CMPA    3,DL
         2 002277   002315 601000 2                  TNZ     s:9840

      965     9833    2              THEN                     /* User passed a synonym              */
      966     9834    3                 DO;

      967     9835    3                   KEY1.LEN = M$STAR$ -> F$DCB.ARS;    /* Key len<-data len  */

   9835  2 002300   200115 470500                    LDP0    AD_KEY1$,,AUTO
         2 002301   200016 471500                    LDP1    M$STAR$,,AUTO
         2 002302   100000 236100                    LDQ     0,,PR1
         2 002303   000033 736000                    QLS     27
         2 002304   000000 552140                    STBQ    0,'40'O,PR0

      968     9836    3                   KEY1.TEXT = SUBSTR(TEXT,0,KEY1.LEN);
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:159  

   9836  2 002305   000000 236100                    LDQ     0,,PR0
         2 002306   000033 772000                    QRL     27
         2 002307   200114 471500                    LDP1    AD_TBUF$,,AUTO
         2 002310   000000 620006                    EAX0    0,QL
         2 002311   040100 100540                    MLR     fill='040'O
         2 002312   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         2 002313   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31

      969     9837    3                   END;

   9837  2 002314   002325 710000 2                  TRA     s:9844

      970     9838    2              ELSE                     /* User passed a real TOPIC name      */
      971     9839    3                DO;

      972     9840    3                  KEY1.TEXT = SUBSTR(RETURNKEY.TEXT,0,C_COUNT);

   9840  2 002315   200102 720100                    LXL0    C_COUNT,,AUTO
         2 002316   200115 470500                    LDP0    AD_KEY1$,,AUTO
         2 002317   040100 100540                    MLR     fill='040'O
         2 002320   200021 200010                    ADSC9   RETURNKEY,,AUTO          cn=1,n=*X0
         2 002321   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31

      973     9841    3                  KEY1.LEN = C_COUNT;    /* Abbreviate it to match database  */

   9841  2 002322   200102 236100                    LDQ     C_COUNT,,AUTO
         2 002323   000033 736000                    QLS     27
         2 002324   000000 552140                    STBQ    0,'40'O,PR0

      974     9842    3                  END;

      975     9843                                                /* KEY1 is now REAL major key         */
      976     9844    2             CALL CONCAT(RETURNKEY.TEXT,

   9844  2 002325   000000 236100                    LDQ     0,,PR0
         2 002326   000033 772000                    QRL     27
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:160  
         2 002327   000000 620006                    EAX0    0,QL
         2 002330   040100 100540                    MLR     fill='040'O
         2 002331   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 002332   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63
         2 002333   000077 116007                    CMPQ    63,DL
         2 002334   002342 603000 2                  TRC     s:9847
         2 002335   777700 620006                    EAX0    -64,QL
         2 002336   777777 660003                    ERX0    -1,DU
         2 002337   040146 100400                    MLR     fill='040'O
         2 002340   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002341   200021 200010                    ADSC9   RETURNKEY,Q,AUTO         cn=1,n=*X0

      977     9845    2                         SUBSTR(KEY1.TEXT,0,KEY1.LEN),
      978     9846    2                         ' ');
      979     9847    2             RETURNKEY.LEN = KEY1.LEN +1;

   9847  2 002342   000000 236100                    LDQ     0,,PR0
         2 002343   000033 772000                    QRL     27
         2 002344   000001 036007                    ADLQ    1,DL
         2 002345   000033 736000                    QLS     27
         2 002346   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

      980     9848    2             CALL READKEY ALTRET(ABORT_LIST_LOW_TOPIC);

   9848  2 002347   003320 701000 2                  TSX1    READKEY
         2 002350   002410 702000 2                  TSX2    ABORT_LIST_LOW_TOPIC

      981     9849    3             DO WHILE (RETURNKEY.LEN ~= 0

   9849  2 002351   002400 710000 2                  TRA     s:9856

      982     9850    3                AND RECORD_TYPE = DICT_REC#);
      983     9851    3                    TEXT = SUBSTR(RETURNKEY.TEXT,

   9851  2 002352   200115 470500                    LDP0    AD_KEY1$,,AUTO
         2 002353   000000 236100                    LDQ     0,,PR0
         2 002354   000033 772000                    QRL     27
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:161  
         2 002355   200132 756100                    STQ     LENGTH+4,,AUTO
         2 002356   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 002357   000033 772000                    QRL     27
         2 002360   200132 136100                    SBLQ    LENGTH+4,,AUTO
         2 002361   200133 756100                    STQ     LENGTH+5,,AUTO
         2 002362   000000 236100                    LDQ     0,,PR0
         2 002363   000033 772000                    QRL     27
         2 002364   200133 720100                    LXL0    LENGTH+5,,AUTO
         2 002365   777777 621010                    EAX1    -1,X0
         2 002366   200114 471500                    LDP1    AD_TBUF$,,AUTO
         2 002367   040100 100546                    MLR     fill='040'O
         2 002370   200021 400011                    ADSC9   RETURNKEY,Q,AUTO         cn=2,n=*X1
         2 002371   100000 000117                    ADSC9   0,,PR1                   cn=0,n=79

      984     9852    3                                  KEY1.LEN +1,
      985     9853    3                                  RETURNKEY.LEN - KEY1.LEN -1);
      986     9854    3                    CALL BUFFER_HELP (%COLUMNS#) ALTRET(ABORT_LIST_LOW_TOPIC);

   9854  2 002372   000003 236000 3                  LDQ     3
         2 002373   200125 756100                    STQ     AD_RSLT$+6,,AUTO
         2 002374   003044 701000 2                  TSX1    BUFFER_HELP
         2 002375   002410 702000 2                  TSX2    ABORT_LIST_LOW_TOPIC

      987     9855    3                    CALL READSEQ ALTRET(ABORT_LIST_LOW_TOPIC);

   9855  2 002376   003411 701000 2                  TSX1    READSEQ
         2 002377   002410 702000 2                  TSX2    ABORT_LIST_LOW_TOPIC

      988     9856    3                    END;

   9856  2 002400   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 002401   777000 316003                    CANQ    -512,DU
         2 002402   002406 600000 2                  TZE     s:9857
         2 002403   200012 235100                    LDA     RECORD_TYPE,,AUTO
         2 002404   000002 115007                    CMPA    2,DL
         2 002405   002352 600000 2                  TZE     s:9851

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:162  
      989     9857    2             RETURN;

   9857  2 002406   200122 221300                    LDX1  ! AD_RSLT$+3,,AUTO
         2 002407   000001 702211                    TSX2  ! 1,X1

   9851  2 002410                       ABORT_LIST_* null
      990     9858        /**/
      991     9859    2   ABORT_LIST_LOW_TOPIC: ;
      992     9860    2             ALTRETURN;

   9860  2 002410   200122 221300                    LDX1  ! AD_RSLT$+3,,AUTO
         2 002411   000000 702211                    TSX2  ! 0,X1

      993     9861        /**/
      994     9862    2             END LIST_SUB_TOPICS;
      995     9863        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:163  
      996     9864    1   LIST_MAJOR_TOPICS: PROC ALTRET;

   9864  2 002412   200122 741300       LIST_MAJOR_* STX1  ! AD_RSLT$+3,,AUTO

      997     9865    2             IF V$# -> FPT$HELP_V.XLATEKEY

   9865  2 002413   000000 470400 xsym               LDP0    B$PS0$
         2 002414   000001 236100                    LDQ     1,,PR0
         2 002415   000040 316007                    CANQ    32,DL
         2 002416   002422 600000 2                  TZE     s:9869

      998     9866    2              THEN                     /* KEY translation to upper case OK   */
      999     9867    2                CASE_TRANS_OK = TRUE#;

   9867  2 002417   400000 236003                    LDQ     -131072,DU
         2 002420   200007 756100                    STQ     CASE_TRANS_OK,,AUTO
         2 002421   002423 710000 2                  TRA     s:9870

     1000     9868    2              ELSE
     1001     9869    2                CASE_TRANS_OK = FALSE#;

   9869  2 002422   200007 450100                    STZ     CASE_TRANS_OK,,AUTO

     1002     9870    2             IF WILDCARDING THEN

   9870  2 002423   200017 234100                    SZN     WILDCARDING,,AUTO
         2 002424   002435 605000 2                  TPL     TRY_KEY1

     1003     9871    3                DO;

     1004     9872    3                  KEY1.LEN = KEY1.LEN -1;  /* LEFT (CONSTANT) = RANGE START      */

   9872  2 002425   200115 471500                    LDP1    AD_KEY1$,,AUTO
         2 002426   100000 236100                    LDQ     0,,PR1
         2 002427   777000 036003                    ADLQ    -512,DU
         2 002430   100000 552140                    STBQ    0,'40'O,PR1

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:164  
     1005     9873    3                  KEY2 = KEY1;             /* RANGE IS KEY1>KEY1                 */

   9873  2 002431   200116 473500                    LDP3    AD_KEY2$,,AUTO
         2 002432   000100 100500                    MLR     fill='000'O
         2 002433   100000 000040                    ADSC9   0,,PR1                   cn=0,n=32
         2 002434   300000 000040                    ADSC9   0,,PR3                   cn=0,n=32

     1006     9874    3                  END;

     1007     9875    2   TRY_KEY1:
     1008     9876    2             CALL CONCAT(ENDKEY.TEXT,SUBSTR(KEY2.TEXT,0,KEY2.LEN),HIGH_CHAR);

   9876  2 002435   200116 470500       TRY_KEY1     LDP0    AD_KEY2$,,AUTO
         2 002436   000000 236100                    LDQ     0,,PR0
         2 002437   000033 772000                    QRL     27
         2 002440   000000 620006                    EAX0    0,QL
         2 002441   040100 100540                    MLR     fill='040'O
         2 002442   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 002443   200042 200077                    ADSC9   ENDKEY,,AUTO             cn=1,n=63
         2 002444   000077 116007                    CMPQ    63,DL
         2 002445   002453 603000 2                  TRC     s:9877
         2 002446   777700 620006                    EAX0    -64,QL
         2 002447   777777 660003                    ERX0    -1,DU
         2 002450   040146 100400                    MLR     fill='040'O
         2 002451   000116 000001 1                  ADSC9   HIGH_CHAR                cn=0,n=1
         2 002452   200042 200010                    ADSC9   ENDKEY,Q,AUTO            cn=1,n=*X0

     1009     9877    2             ENDKEY.LEN = KEY2.LEN +1;     /* ENDKEY is now set for a range up   */

   9877  2 002453   000000 236100                    LDQ     0,,PR0
         2 002454   000033 772000                    QRL     27
         2 002455   000001 036007                    ADLQ    1,DL
         2 002456   000033 736000                    QLS     27
         2 002457   200042 552140                    STBQ    ENDKEY,'40'O,AUTO

     1010     9878                                                /* to the last key to match wildcard  */
     1011     9879    2             IF KEY1.LEN = 0
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:165  

   9879  2 002460   200115 471500                    LDP1    AD_KEY1$,,AUTO
         2 002461   100000 236100                    LDQ     0,,PR1
         2 002462   777000 316003                    CANQ    -512,DU
         2 002463   002471 601000 2                  TNZ     s:9886

     1012     9880    2               THEN                        /* Can't position with KEY1           */
     1013     9881    3                DO;                        /* Make a real (low) KEY1             */

     1014     9882    3                   KEY1.LEN = 1;

   9882  2 002464   001000 236003                    LDQ     512,DU
         2 002465   100000 552140                    STBQ    0,'40'O,PR1

     1015     9883    3                   KEY1.TEXT = BITASC('002'O);

   9883  2 002466   040100 100400                    MLR     fill='040'O
         2 002467   000023 000001 3                  ADSC9   19                       cn=0,n=1
         2 002470   100000 200037                    ADSC9   0,,PR1                   cn=1,n=31

     1016     9884    3                   END;

     1017     9885                                                /* Position to first TOPIC to list    */
     1018     9886    2             RETURNKEY = KEY1;             /* Set trial key                      */

   9886  2 002471   000100 100500                    MLR     fill='000'O
         2 002472   100000 000040                    ADSC9   0,,PR1                   cn=0,n=32
         2 002473   200021 000100                    ADSC9   RETURNKEY,,AUTO          cn=0,n=64

     1019     9887    2             CALL READKEY ALTRET(ABORT_LIST_MAJOR_TOPICS);

   9887  2 002474   003320 701000 2                  TSX1    READKEY
         2 002475   002563 702000 2                  TSX2    ABORT_LIST_MAJOR_TOPICS

     1020     9888    2             IF RETURNKEY.LEN = 0

   9888  2 002476   200021 236100                    LDQ     RETURNKEY,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:166  
         2 002477   777000 316003                    CANQ    -512,DU
         2 002500   002521 601000 2                  TNZ     s:9901

     1021     9889    2              THEN                     /* Abbreviation not found             */
     1022     9890    3               DO;

     1023     9891    3                IF CASE_TRANS_OK

   9891  2 002501   200007 234100                    SZN     CASE_TRANS_OK,,AUTO
         2 002502   002521 605000 2                  TPL     s:9901

     1024     9892    3                 THEN                  /* We failed in (perhaps) lower case  */
     1025     9893    4                   DO;

     1026     9894    4                     CALL XLATE(KEY1.TEXT,EMH_UC_XLATE_TBL,KEY1.TEXT);

   9894  2 002503   200115 470500                    LDP0    AD_KEY1$,,AUTO
         2 002504   000000 471400 xsym               LDP1    B$XL_UPPER$
         2 002505   040100 160500                    MVT     fill='040'O
         2 002506   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         2 002507   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         2 002510   100000 000100                    ARG     0,,PR1

     1027     9895    4                     CASE_TRANS_OK = FALSE#;    /* Don't try this again      */

   9895  2 002511   200007 450100                    STZ     CASE_TRANS_OK,,AUTO

     1028     9896    4                     IF WILDCARDING THEN

   9896  2 002512   200017 234100                    SZN     WILDCARDING,,AUTO
         2 002513   002520 605000 2                  TPL     s:9898

     1029     9897    4                        KEY2 = KEY1;

   9897  2 002514   200116 473500                    LDP3    AD_KEY2$,,AUTO
         2 002515   000100 100500                    MLR     fill='000'O
         2 002516   000000 000040                    ADSC9   0,,PR0                   cn=0,n=32
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:167  
         2 002517   300000 000040                    ADSC9   0,,PR3                   cn=0,n=32

     1030     9898    4                     GOTO TRY_KEY1;

   9898  2 002520   002435 710000 2                  TRA     TRY_KEY1

     1031     9899    4                     END;
     1032     9900    3                END;
     1033     9901    3             DO WHILE (RETURNKEY.LEN ~= 0  /* DO WHILE RETURNKEY exists          */

   9901  2 002521   002552 710000 2                  TRA     s:9915

     1034     9902    3               AND RETURNKEY.TEXT < ENDKEY.TEXT); /* AND it's in the range       */
     1035     9903    3               IF RECORD_TYPE ~= DICT_REC#

   9903  2 002522   200012 235100                    LDA     RECORD_TYPE,,AUTO
         2 002523   000002 115007                    CMPA    2,DL
         2 002524   002550 600000 2                  TZE     s:9914

     1036     9904    3                THEN                       /* It is a topic or SYN, to be listed */
     1037     9905    4                DO;

     1038     9906    4                   TEXT = SUBSTR(RETURNKEY.TEXT,0,C_COUNT);

   9906  2 002525   200102 720100                    LXL0    C_COUNT,,AUTO
         2 002526   200114 470500                    LDP0    AD_TBUF$,,AUTO
         2 002527   040100 100540                    MLR     fill='040'O
         2 002530   200021 200010                    ADSC9   RETURNKEY,,AUTO          cn=1,n=*X0
         2 002531   000000 000117                    ADSC9   0,,PR0                   cn=0,n=79

     1039     9907    4                   CALL BUFFER_HELP(%COLUMNS#) ALTRET(ABORT_LIST_MAJOR_TOPICS);

   9907  2 002532   000003 236000 3                  LDQ     3
         2 002533   200125 756100                    STQ     AD_RSLT$+6,,AUTO
         2 002534   003044 701000 2                  TSX1    BUFFER_HELP
         2 002535   002563 702000 2                  TSX2    ABORT_LIST_MAJOR_TOPICS

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:168  
     1040     9908                                                /* Bump text to make the next key     */
     1041     9909    4                   RETURNKEY.LEN = RETURNKEY.LEN+1; /* SYN has no 0 at C_COUNT   */

   9909  2 002536   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 002537   001000 036003                    ADLQ    512,DU
         2 002540   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

     1042     9910    4                   RETURNKEY.TUBIN(C_COUNT) = 1;

   9910  2 002541   200102 235100                    LDA     C_COUNT,,AUTO
         2 002542   000105 101400                    MRL     fill='000'O
         2 002543   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         2 002544   200021 200001                    ADSC9   RETURNKEY,A,AUTO         cn=1,n=1

     1043     9911    4                   CALL READKEY ALTRET(ABORT_LIST_MAJOR_TOPICS); /* Get next key  */

   9911  2 002545   003320 701000 2                  TSX1    READKEY
         2 002546   002563 702000 2                  TSX2    ABORT_LIST_MAJOR_TOPICS

     1044     9912    4                   END;

   9912  2 002547   002552 710000 2                  TRA     s:9915

     1045     9913    3                ELSE                       /* A DICT record, don't list it       */
     1046     9914    3                   CALL READSEQ ALTRET(ABORT_LIST_MAJOR_TOPICS);

   9914  2 002550   003411 701000 2                  TSX1    READSEQ
         2 002551   002563 702000 2                  TSX2    ABORT_LIST_MAJOR_TOPICS

     1047     9915    3                END;

   9915  2 002552   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 002553   777000 316003                    CANQ    -512,DU
         2 002554   002561 600000 2                  TZE     LIST_DONE
         2 002555   040100 106500                    CMPC    fill='040'O
         2 002556   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63
         2 002557   200042 200077                    ADSC9   ENDKEY,,AUTO             cn=1,n=63
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:169  
         2 002560   002522 602000 2                  TNC     s:9903

   9909  2 002561                       LIST_DONE    null
     1048     9916    2   LIST_DONE:   ;
     1049     9917    2             RETURN;

   9917  2 002561   200122 221300                    LDX1  ! AD_RSLT$+3,,AUTO
         2 002562   000001 702211                    TSX2  ! 1,X1

   9909  2 002563                       ABORT_LIST_* null
     1050     9918        /**/
     1051     9919    2   ABORT_LIST_MAJOR_TOPICS: ;
     1052     9920    2             ALTRETURN;

   9920  2 002563   200122 221300                    LDX1  ! AD_RSLT$+3,,AUTO
         2 002564   000000 702211                    TSX2  ! 0,X1

     1053     9921        /**/
     1054     9922    2             END LIST_MAJOR_TOPICS;
     1055     9923        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:170  
     1056     9924    1   LIST_PROCS: PROC ALTRET;                /* The caller wants a list of         */

   9924  2 002565   200120 741300       LIST_PROCS   STX1  ! AD_RSLT$+1,,AUTO

     1057     9925                                                /* processors that use M$HELP         */
     1058     9926                                                /* will have to do OPEN NEXTs         */
     1059     9927                                                /* ALTRETURN if an error              */
     1060     9928    2           IF (NOT V$# -> FPT$HELP_V.LIST) OR

   9928  2 002566   000000 470400 xsym               LDP0    B$PS0$
         2 002567   000001 236100                    LDQ     1,,PR0
         2 002570   000010 316007                    CANQ    8,DL
         2 002571   002576 600000 2                  TZE     s:9933
         2 002572   000004 316007                    CANQ    4,DL
         2 002573   002576 601000 2                  TNZ     s:9933
         2 002574   000002 316007                    CANQ    2,DL
         2 002575   002601 600000 2                  TZE     s:9936

     1061     9929    2             V$# -> FPT$HELP_V.ALL OR
     1062     9930    2             V$# -> FPT$HELP_V.MORE
     1063     9931    2           THEN
     1064     9932    3           DO;

     1065     9933    3              ERROR = %E$BADHOPT;

   9933  2 002576   001511 235007                    LDA     841,DL
         2 002577   200014 755100                    STA     ERROR,,AUTO

     1066     9934    3              ALTRETURN;

   9934  2 002600   000000 702211                    TSX2  ! 0,X1

     1067     9935    3              END;
     1068     9936    2           IF WILDCARDING THEN

   9936  2 002601   200017 234100                    SZN     WILDCARDING,,AUTO
         2 002602   002607 605000 2                  TPL     s:9938
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:171  

     1069     9937    2              KEY1.LEN = KEY1.LEN -1;      /* LEFT (CONSTANT) BECOMES RANGE START*/

   9937  2 002603   200115 471500                    LDP1    AD_KEY1$,,AUTO
         2 002604   100000 236100                    LDQ     0,,PR1
         2 002605   777000 036003                    ADLQ    -512,DU
         2 002606   100000 552140                    STBQ    0,'40'O,PR1

     1070     9938    2           CALL CONCAT(M$STAR$ -> F$DCB.NAME.C,

   9938  2 002607   200115 471500                    LDP1    AD_KEY1$,,AUTO
         2 002610   100000 236100                    LDQ     0,,PR1
         2 002611   000033 772000                    QRL     27
         2 002612   200016 473500                    LDP3    M$STAR$,,AUTO
         2 002613   040100 100400                    MLR     fill='040'O
         2 002614   000120 000005 1                  ADSC9   HIGH_CHAR+2              cn=0,n=5
         2 002615   300010 200005                    ADSC9   8,,PR3                   cn=1,n=5
         2 002616   000000 620006                    EAX0    0,QL
         2 002617   200016 473500                    LDP3    M$STAR$,,AUTO
         2 002620   040100 100540                    MLR     fill='040'O
         2 002621   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         2 002622   300011 400032                    ADSC9   9,,PR3                   cn=2,n=26

     1071     9939    2            'HELP:',SUBSTR(KEY1.TEXT,0,KEY1.LEN));
     1072     9940    2           M$STAR$ -> F$DCB.NAME.L = KEY1.LEN +5;

   9940  2 002623   200115 470500                    LDP0    AD_KEY1$,,AUTO
         2 002624   200016 471500                    LDP1    M$STAR$,,AUTO
         2 002625   000000 236100                    LDQ     0,,PR0
         2 002626   000033 772000                    QRL     27
         2 002627   000005 036007                    ADLQ    5,DL
         2 002630   000033 736000                    QLS     27
         2 002631   100010 552140                    STBQ    8,'40'O,PR1

     1073     9941    2           M$STAR$ -> F$DCB.WSR = 0;       /* OPEN from user's domain            */

   9941  2 002632   200016 471500                    LDP1    M$STAR$,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:172  
         2 002633   000000 236003                    LDQ     0,DU
         2 002634   100040 552120                    STBQ    32,'20'O,PR1

     1074     9942    2           IF KEY2.LEN = 0                 /* IF KEY2 wasn't specified           */

   9942  2 002635   200116 473500                    LDP3    AD_KEY2$,,AUTO
         2 002636   300000 236100                    LDQ     0,,PR3
         2 002637   777000 316003                    CANQ    -512,DU
         2 002640   002646 601000 2                  TNZ     s:9946
         2 002641   200020 234100                    SZN     RANGE,,AUTO
         2 002642   002646 604000 2                  TMI     s:9946

     1075     9943    2            AND NOT RANGE                  /* AND it's not a RANGE               */
     1076     9944    2           THEN                            /* Wildcard for processor list        */
     1077     9945    2              KEY2 = KEY1;                 /* Make range end from wildcard       */

   9945  2 002643   000100 100500                    MLR     fill='000'O
         2 002644   000000 000040                    ADSC9   0,,PR0                   cn=0,n=32
         2 002645   300000 000040                    ADSC9   0,,PR3                   cn=0,n=32

     1078     9946    2          CALL CONCAT(ENDKEY.TEXT,'HELP:',SUBSTR(KEY2.TEXT,0,KEY2.LEN),BITASC('777'O))
              9946                    ;

   9946  2 002646   300000 236100                    LDQ     0,,PR3
         2 002647   000033 772000                    QRL     27
         2 002650   040100 100400                    MLR     fill='040'O
         2 002651   000120 000005 1                  ADSC9   HIGH_CHAR+2              cn=0,n=5
         2 002652   200042 200005                    ADSC9   ENDKEY,,AUTO             cn=1,n=5
         2 002653   000000 620006                    EAX0    0,QL
         2 002654   040100 100540                    MLR     fill='040'O
         2 002655   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
         2 002656   200043 400072                    ADSC9   ENDKEY+1,,AUTO           cn=2,n=58
         2 002657   000072 116007                    CMPQ    58,DL
         2 002660   002666 603000 2                  TRC     s:9947
         2 002661   777705 620006                    EAX0    -59,QL
         2 002662   777777 660003                    ERX0    -1,DU
         2 002663   040146 100400                    MLR     fill='040'O
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:173  
         2 002664   000022 000001 3                  ADSC9   18                       cn=0,n=1
         2 002665   200043 400010                    ADSC9   ENDKEY+1,Q,AUTO          cn=2,n=*X0

     1079     9947    2           ENDKEY.LEN = KEY2.LEN +6;       /* Make high end of range             */

   9947  2 002666   300000 236100                    LDQ     0,,PR3
         2 002667   000033 772000                    QRL     27
         2 002670   000006 036007                    ADLQ    6,DL
         2 002671   000033 736000                    QLS     27
         2 002672   200042 552140                    STBQ    ENDKEY,'40'O,AUTO

     1080     9948                                                /* We now have (in one way or another)*/
     1081     9949                                                /* created a range of list file names */
     1082     9950    3           DO WHILE (FOREVER#);

     1083     9951    3              B$JIT$ -> B$JIT.DCB$ = M$STAR$;

   9951  2 002673   200016 236100                    LDQ     M$STAR$,,AUTO
         2 002674   000000 470400 xsym               LDP0    B$JIT$
         2 002675   000232 756100                    STQ     154,,PR0

     1084     9952    3              CALL FMN$OPNF(FPT_OPEN);     /* OPEN NEXT file                     */

   9952  2 002676   200113 630500                    EPPR0   AD_OFPT$,,AUTO
         2 002677   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002700   000000 701000 xent               TSX1    FMN$OPNF
         2 002701   000000 011000                    NOP     0

     1085     9953    3              CALL HFF$TRAPALT ALTRET(FIN_P_LIST); /* Re-establish TRAP control  */

   9953  2 002702   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002703   000000 701000 xent               TSX1    HFF$TRAPALT
         2 002704   002761 702000 2                  TSX2    FIN_P_LIST

     1086     9954    3              IF M$STAR$ -> F$DCB.NAME.C > ENDKEY.TEXT /* If end of range hit    */

   9954  2 002705   200016 470500                    LDP0    M$STAR$,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:174  
         2 002706   040100 106500                    CMPC    fill='040'O
         2 002707   200042 200077                    ADSC9   ENDKEY,,AUTO             cn=1,n=63
         2 002710   000010 200037                    ADSC9   8,,PR0                   cn=1,n=31
         2 002711   002761 602000 2                  TNC     FIN_P_LIST
         2 002712   000010 236100                    LDQ     8,,PR0
         2 002713   777000 316003                    CANQ    -512,DU
         2 002714   002761 600000 2                  TZE     FIN_P_LIST

     1087     9955    3               OR M$STAR$ -> F$DCB.NAME.L = 0 /* No files left                   */
     1088     9956    3               THEN                        /* Quit                               */
     1089     9957    3                 GOTO FIN_P_LIST;
     1090     9958    3              TEXT = SUBSTR(M$STAR$ -> F$DCB.NAME.C,5); /* Remove 'HELP:'        */

   9958  2 002715   200114 471500                    LDP1    AD_TBUF$,,AUTO
         2 002716   040100 100500                    MLR     fill='040'O
         2 002717   000011 400032                    ADSC9   9,,PR0                   cn=2,n=26
         2 002720   100000 000117                    ADSC9   0,,PR1                   cn=0,n=79

     1091     9959    3              CALL INDEX1R(I,':',TEXT,M$STAR$ -> F$DCB.NAME.L -5)

   9959  2 002721   200016 470500                    LDP0    M$STAR$,,AUTO
         2 002722   000010 236100                    LDQ     8,,PR0
         2 002723   000033 772000                    QRL     27
         2 002724   777773 620006                    EAX0    -5,QL
         2 002725   000005 136007                    SBLQ    5,DL
         2 002726   000000 125540                    SCMR    mask='000'O
         2 002727   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         2 002730   000020 000001 3                  ADSC9   16                       cn=0,n=1
         2 002731   200013 000100                    ARG     I,,AUTO
         2 002732   002736 606400 2                  TTN     BAD_NAME
         2 002733   200013 054100                    AOS     I,,AUTO
         2 002734   200013 156100                    SSQ     I,,AUTO

     1092     9960    3               ALTRET(BAD_NAME);           /* Point to ':' before LANG           */
     1093     9961    4              DO WHILE (NEVER#);

   9961  2 002735   002742 710000 2                  TRA     s:9965
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:175  

     1094     9962    4   BAD_NAME:     ERROR = %E$HELPDERR;      /* Call it database error             */

   9962  2 002736   001520 235007       BAD_NAME     LDA     848,DL
         2 002737   200014 755100                    STA     ERROR,,AUTO

     1095     9963    4                 IF FOREVER# THEN ALTRETURN;

   9963  2 002740   200120 221300                    LDX1  ! AD_RSLT$+1,,AUTO
         2 002741   000000 702211                    TSX2  ! 0,X1

     1096     9964    4                 END;

     1097     9965    3              IF SUBSTR(TEXT,I +1,1) = NATIVE_LANG

   9965  2 002742   200013 235100                    LDA     I,,AUTO
         2 002743   040100 106505                    CMPC    fill='040'O
         2 002744   100000 200001                    ADSC9   0,A,PR1                  cn=1,n=1
         2 002745   200011 000001                    ADSC9   NATIVE_LANG,,AUTO        cn=0,n=1
         2 002746   002673 601000 2                  TNZ     s:9951

     1098     9966    3              THEN                         /* Current file matches user's lang.  */
     1099     9967    4              DO;

     1100     9968    4                 CALL INSERT(TEXT,I,2,'  '); /* Stomp on :L                      */

   9968  2 002747   040105 100400                    MLR     fill='040'O
         2 002750   000122 000002 1                  ADSC9   HIGH_CHAR+4              cn=0,n=2
         2 002751   100000 000002                    ADSC9   0,A,PR1                  cn=0,n=2

     1101     9969    4                 CALL BUFFER_HELP(%COLUMNS#) ALTRET(PL_ABORT);

   9969  2 002752   000003 236000 3                  LDQ     3
         2 002753   200125 756100                    STQ     AD_RSLT$+6,,AUTO
         2 002754   003044 701000 2                  TSX1    BUFFER_HELP
         2 002755   002757 702000 2                  TSX2    PL_ABORT

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:176  
     1102     9970    5                 DO WHILE (NEVER#);

   9970  2 002756   002673 710000 2                  TRA     s:9951

     1103     9971    5   PL_ABORT:        IF FOREVER# THEN ALTRETURN; /* Compiler kludge               */

   9971  2 002757                       PL_ABORT     null
   9971  2 002757   200120 221300                    LDX1  ! AD_RSLT$+1,,AUTO
         2 002760   000000 702211                    TSX2  ! 0,X1

     1104     9972    5                    END;

     1105     9973    4                 END;
     1106     9974    3              END;

     1107     9975    2   FIN_P_LIST:
     1108     9976    2           RETURN;

   9976  2 002761   200120 221300       FIN_P_LIST   LDX1  ! AD_RSLT$+1,,AUTO
         2 002762   000001 702211                    TSX2  ! 1,X1

     1109     9977    2   END LIST_PROCS;
     1110     9978        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:177  
     1111     9979        /**/
     1112     9980        /*F*     NAME: ABBREV
     1113     9981        *
     1114     9982                 DESCRIPTION: ABBREV uses TRYKEY to find any record that
     1115     9983                      has a similar key.
     1116     9984
     1117     9985                      If an error occurs, this routine will ALTRET.
     1118     9986
     1119     9987                      This routine does a keyed READ with TRYKEY.  The first
     1120     9988                      C_COUNT characters of RETURNKEY are then compared to
     1121     9989                      TRYKEY.  The following situations are possible:
     1122     9990                       1) TRYKEY longer than RETURNKEY... ALTRETURN.
     1123     9991                       2) TRYKEY is equal in length to RETURNKEY:
     1124     9992                          A) contents match exactly... normal RETURN.
     1125     9993                          B) contents differ in any way... ALTRETURN.
     1126     9994                       3) TRYKEY is shorter than RETURNKEY:
     1127     9995                          A) TRYKEY is a substring of RETURNKEY:
     1128     9996                             a) RETURNKEY is the only key resembling
     1129     9997                                TRYKEY... normal RETURN.
     1130     9998                             b) TRYKEY is a substring of several topics...
     1131     9999                                ALTRETURN.
     1132    10000                          B) TRYKEY is not a substring of RETURNKEY... ALTRETURN.
     1133    10001
     1134    10002                      If all attempts to find a record fail, RETURNKEY.LEN is
     1135    10003                      set to 0.  If a record is found, RETURNKEY is its key.
     1136    10004        */
     1137    10005    1   ABBREV: PROC ALTRET;

  10005  2 002763   200124 741300       ABBREV       STX1  ! AD_RSLT$+5,,AUTO

     1138    10006        /**/
     1139    10007    2            RETURNKEY.LEN = TRYKEY.LEN;    /* Set up a key                       */

  10007  2 002764   200062 236100                    LDQ     TRYKEY,,AUTO
         2 002765   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

     1140    10008    2            RETURNKEY.TEXT = TRYKEY.TEXT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:178  

  10008  2 002766   040100 100500                    MLR     fill='040'O
         2 002767   200062 200077                    ADSC9   TRYKEY,,AUTO             cn=1,n=63
         2 002770   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63

     1141    10009    2            CALL READKEY ALTRET(ABBREV_ALT); /* Try it                           */

  10009  2 002771   003320 701000 2                  TSX1    READKEY
         2 002772   003042 702000 2                  TSX2    ABBREV_ALT

     1142    10010    2            IF RETURNKEY.LEN = 0           /* IF we didn't get a record          */

  10010  2 002773   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 002774   777000 316003                    CANQ    -512,DU
         2 002775   003015 600000 2                  TZE     TRY_PREV

     1143    10011    2             THEN
     1144    10012    2               GOTO TRY_PREV;              /* Try previous record                */
     1145    10013    2            IF SUBSTR(TRYKEY.TEXT,0,TRYKEY.LEN)

  10013  2 002776   200062 236100                    LDQ     TRYKEY,,AUTO
         2 002777   000033 772000                    QRL     27
         2 003000   000000 620006                    EAX0    0,QL
         2 003001   200062 236100                    LDQ     TRYKEY,,AUTO
         2 003002   000033 772000                    QRL     27
         2 003003   000000 621006                    EAX1    0,QL
         2 003004   040140 106540                    CMPC    fill='040'O
         2 003005   200062 200010                    ADSC9   TRYKEY,,AUTO             cn=1,n=*X0
         2 003006   200021 200011                    ADSC9   RETURNKEY,,AUTO          cn=1,n=*X1
         2 003007   003040 600000 2                  TZE     GOT_ABBREV

     1146    10014    2             ~= SUBSTR(RETURNKEY.TEXT,0,TRYKEY.LEN)
     1147    10015    2             THEN                          /* TRYKEY isn't a SUBSTR of RETURNKEY */
     1148    10016    3               DO;

     1149    10017    3                 RETURNKEY.LEN = 0;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:179  
  10017  2 003010   000000 236003                    LDQ     0,DU
         2 003011   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

     1150    10018    3                 RETURNKEY.TEXT = ' ';

  10018  2 003012   040100 100400                    MLR     fill='040'O
         2 003013   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003014   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63

     1151    10019    3   TRY_PREV:     CALL READ_BACK ALTRET(ABBREV_ALT);

  10019  2 003015   003360 701000 2     TRY_PREV     TSX1    READ_BACK
         2 003016   003042 702000 2                  TSX2    ABBREV_ALT

     1152    10020    3                 IF RETURNKEY.LEN = 0

  10020  2 003017   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 003020   777000 316003                    CANQ    -512,DU
         2 003021   003034 600000 2                  TZE     NO_MATCH

     1153    10021    3                  THEN                     /* We didn't get a record             */
     1154    10022    3                    GOTO NO_MATCH;
     1155    10023    3                 IF SUBSTR(TRYKEY.TEXT,0,TRYKEY.LEN)

  10023  2 003022   200062 236100                    LDQ     TRYKEY,,AUTO
         2 003023   000033 772000                    QRL     27
         2 003024   000000 620006                    EAX0    0,QL
         2 003025   200062 236100                    LDQ     TRYKEY,,AUTO
         2 003026   000033 772000                    QRL     27
         2 003027   000000 621006                    EAX1    0,QL
         2 003030   040140 106540                    CMPC    fill='040'O
         2 003031   200062 200010                    ADSC9   TRYKEY,,AUTO             cn=1,n=*X0
         2 003032   200021 200011                    ADSC9   RETURNKEY,,AUTO          cn=1,n=*X1
         2 003033   003040 600000 2                  TZE     GOT_ABBREV

     1156    10024    3                  ~= SUBSTR(RETURNKEY.TEXT,0,TRYKEY.LEN)
     1157    10025    3                  THEN                     /* NOTHING CLOSE                      */
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:180  
     1158    10026    4                  DO;

     1159    10027    4   NO_MATCH:        RETURNKEY.LEN = 0;

  10027  2 003034   000000 236003       NO_MATCH     LDQ     0,DU
         2 003035   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

     1160    10028    4                    RETURN;

  10028  2 003036   200124 221300                    LDX1  ! AD_RSLT$+5,,AUTO
         2 003037   000001 702211                    TSX2  ! 1,X1

     1161    10029    4                    END;
     1162    10030    3                 END;
     1163    10031        /******************************************************************************/
     1164    10032        /*                                                                            */
     1165    10033        /*       fancy checking for unique substrings goes here (someday)             */
     1166    10034        /*                                                                            */
     1167    10035        /******************************************************************************/
     1168    10036    2   GOT_ABBREV:   RETURN;                   /* Pass it back                       */

  10036  2 003040   200124 221300       GOT_ABBREV   LDX1  ! AD_RSLT$+5,,AUTO
         2 003041   000001 702211                    TSX2  ! 1,X1

     1169    10037        /**/
     1170    10038    2   ABBREV_ALT: ALTRETURN;                  /* Some error occured                 */

  10038  2 003042   200124 221300       ABBREV_ALT   LDX1  ! AD_RSLT$+5,,AUTO
         2 003043   000000 702211                    TSX2  ! 0,X1

     1171    10039        /**/
     1172    10040    2   END ABBREV;
     1173    10041        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:181  
     1174    10042        /**/
     1175    10043        /*F*     NAME: BUFFER_HELP
     1176    10044        *
     1177    10045                 DESCRIPTION: BUFFER_HELP is called to show the TEXT buffer to
     1178    10046                      the user.  The parameter FUNCTION determines in what
     1179    10047                      form this is to be done.
     1180    10048
     1181    10049                      If FORMAT = %LINES#, TEXT is stuffed into the current buffer
     1182    10050                      chunk and output.
     1183    10051
     1184    10052                      If FORMAT = %COLUMNS#, TEXT is appended onto the end of
     1185    10053                      the currently growing buffer chunk.  Enough spaces are
     1186    10054                      provided so that the result will be seven 11-character
     1187    10055                      columns.
     1188    10056
     1189    10057                      If FORMAT = %FINISH#, the currently growing buffer chunk is
     1190    10058                      written out.
     1191    10059
     1192    10060                      If an error occurs, this routine will ALTRET.
     1193    10061
     1194    10062                      The internal routine HELP_WRITE is used to output the
     1195    10063                      data.
     1196    10064
     1197    10065        */
     1198    10066    1   BUFFER_HELP: PROC(FUNCTION) ALTRET;

  10066  2 003044   200124 741300       BUFFER_HELP  STX1  ! AD_RSLT$+5,,AUTO

     1199    10067        /**/
     1200    10068    2   DCL FUNCTION SBIN WORD;
     1201    10069    2   DCL LENGTH SBIN WORD;
     1202    10070        /**/
     1203    10071    3            DO CASE(FUNCTION);

  10071  2 003045   200125 470500                    LDP0    @FUNCTION,,AUTO
         2 003046   000000 235100                    LDA     0,,PR0
         2 003047   000004 115007                    CMPA    4,DL
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:182  
         2 003050   003052 602005 2                  TNC     s:10071+5,AL
         2 003051   003153 710000 2                  TRA     s:10096
         2 003052   003153 710000 2                  TRA     s:10096
         2 003053   003056 710000 2                  TRA     s:10073
         2 003054   003107 710000 2                  TRA     s:10083
         2 003055   003151 710000 2                  TRA     s:10094

     1204    10072    3             CASE(%LINES#);                 /* Write out TEXT on one line         */

     1205    10073    3                 IF RESULTS.RECCNT > HELP_RECS

  10073  2 003056   200117 471500                    LDP1    AD_RSLT$,,AUTO
         2 003057   100001 236100                    LDQ     1,,PR1
         2 003060   777777 376007                    ANQ     -1,DL
         2 003061   200003 116100                    CMPQ    HELP_RECS,,AUTO
         2 003062   003077 602000 2                  TNC     s:10079
         2 003063   003077 600000 2                  TZE     s:10079
         2 003064   000000 473400 xsym               LDP3    B$PS0$
         2 003065   300000 220100                    LDX0    0,,PR3
         2 003066   003072 600000 2                  TZE     s:10073+12
         2 003067   100000 236100                    LDQ     0,,PR1
         2 003070   010000 316003                    CANQ    4096,DU
         2 003071   003077 600000 2                  TZE     s:10079
         2 003072   300000 722100                    LXL2    0,,PR3
         2 003073   003104 600000 2                  TZE     SKIP_PUT
         2 003074   100000 236100                    LDQ     0,,PR1
         2 003075   004000 316003                    CANQ    2048,DU
         2 003076   003104 601000 2                  TNZ     SKIP_PUT

     1206    10074    3                   AND (V$#->FPT$HELP_V.OUTDCB1 = 0
     1207    10075    3                    OR RESULTS.OUTERR1)
     1208    10076    3                   AND (V$#->FPT$HELP_V.OUTDCB2 = 0
     1209    10077    3                    OR RESULTS.OUTERR2)
     1210    10078    3                   THEN GOTO SKIP_PUT;
     1211    10079    3                    BUF$ -> B$BUFFER = TEXT;

  10079  2 003077   200114 473500                    LDP3    AD_TBUF$,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:183  
         2 003100   200010 474500                    LDP4    BUF$,,AUTO
         2 003101   040100 100500                    MLR     fill='040'O
         2 003102   300000 000117                    ADSC9   0,,PR3                   cn=0,n=79
         2 003103   400000 000117                    ADSC9   0,,PR4                   cn=0,n=79

     1212    10080    3   SKIP_PUT:
     1213    10081    3                 CALL HELP_WRITE ALTRET(BUFFER_HELP_ALT);

  10081  2 003104   003157 701000 2     SKIP_PUT     TSX1    HELP_WRITE
         2 003105   003155 702000 2                  TSX2    BUFFER_HELP_ALT
         2 003106   003153 710000 2                  TRA     s:10096

     1214    10082    3             CASE(%COLUMNS#);               /* Add TEXT onto growing buffer chunk */

     1215    10083    3                CALL INDEX(LENGTH,' ',TEXT);  /* Find entry length               */

  10083  2 003107   200114 471500                    LDP1    AD_TBUF$,,AUTO
         2 003110   000000 124500                    SCM     mask='000'O
         2 003111   100000 000117                    ADSC9   0,,PR1                   cn=0,n=79
         2 003112   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003113   200126 000100                    ARG     LENGTH,,AUTO

     1216    10084    3                IF COLUMN + LENGTH > SLOT_SIZE#

  10084  2 003114   200015 236100                    LDQ     COLUMN,,AUTO
         2 003115   200126 036100                    ADLQ    LENGTH,,AUTO
         2 003116   000117 116007                    CMPQ    79,DL
         2 003117   003127 604400 2                  TMOZ    s:10091

     1217    10085    3                 THEN                      /* No room on current line            */
     1218    10086    4                   DO;

     1219    10087    4                     CALL HELP_WRITE ALTRET(BUFFER_HELP_ALT);

  10087  2 003120   003157 701000 2                  TSX1    HELP_WRITE
         2 003121   003155 702000 2                  TSX2    BUFFER_HELP_ALT

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:184  
     1220    10088    4                     COLUMN = 0;           /* Start a new line                   */

  10088  2 003122   200015 450100                    STZ     COLUMN,,AUTO

     1221    10089    4                     BUF$ -> B$BUFFER = ' ';

  10089  2 003123   200010 470500                    LDP0    BUF$,,AUTO
         2 003124   040100 100400                    MLR     fill='040'O
         2 003125   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003126   000000 000117                    ADSC9   0,,PR0                   cn=0,n=79

     1222    10090    4                     END;

     1223    10091    3                CALL INSERT(BUF$ -> B$BUFFER,COLUMN,LENGTH,TEXT);

  10091  2 003127   200114 470500                    LDP0    AD_TBUF$,,AUTO
         2 003130   200010 471500                    LDP1    BUF$,,AUTO
         2 003131   200126 720100                    LXL0    LENGTH,,AUTO
         2 003132   200015 235100                    LDA     COLUMN,,AUTO
         2 003133   040145 100500                    MLR     fill='040'O
         2 003134   000000 000117                    ADSC9   0,,PR0                   cn=0,n=79
         2 003135   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0

     1224    10092    3                COLUMN = COLUMN + LENGTH + (11 - MOD(LENGTH,11));

  10092  2 003136   200015 236100                    LDQ     COLUMN,,AUTO
         2 003137   200126 036100                    ADLQ    LENGTH,,AUTO
         2 003140   200132 756100                    STQ     LENGTH+4,,AUTO
         2 003141   200126 236100                    LDQ     LENGTH,,AUTO
         2 003142   000013 506007                    DIV     11,DL
         2 003143   200133 755100                    STA     LENGTH+5,,AUTO
         2 003144   200132 236100                    LDQ     LENGTH+4,,AUTO
         2 003145   200133 136100                    SBLQ    LENGTH+5,,AUTO
         2 003146   000013 036007                    ADLQ    11,DL
         2 003147   200015 756100                    STQ     COLUMN,,AUTO
         2 003150   003153 710000 2                  TRA     s:10096

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:185  
     1225    10093    3             CASE(%FINISH#);                /* Finish a growing buffer            */

     1226    10094    3                 CALL HELP_WRITE ALTRET(BUFFER_HELP_ALT);

  10094  2 003151   003157 701000 2                  TSX1    HELP_WRITE
         2 003152   003155 702000 2                  TSX2    BUFFER_HELP_ALT

     1227    10095    3             END;                          /* END DO CASE                        */

     1228    10096    2            RETURN;

  10096  2 003153   200124 221300                    LDX1  ! AD_RSLT$+5,,AUTO
         2 003154   000001 702211                    TSX2  ! 1,X1

     1229    10097        /**/
     1230    10098    2   BUFFER_HELP_ALT: ALTRETURN;             /* Some error occured                 */

  10098  2 003155   200124 221300       BUFFER_HELP* LDX1  ! AD_RSLT$+5,,AUTO
         2 003156   000000 702211                    TSX2  ! 0,X1

     1231    10099        /**/
     1232    10100        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:186  
     1233    10101        /**/
     1234    10102        /*F*     NAME: HELP_WRITE
     1235    10103        *
     1236    10104                 DESCRIPTION: HELP_WRITE WRITEs a line of HELP through any
     1237    10105                      user passed DCBs and bumps BUF$ to the next available
     1238    10106                      buffer slot.
     1239    10107
     1240    10108                      This routine is internal to BUFFER_HELP.
     1241    10109
     1242    10110                      If an error occurs, the RESULTS.OUTERRn flag is set and
     1243    10111                      the error code is placed in RESULTS.ERRCODEn.  Further
     1244    10112                      WRITEs through that DCB are inhibited.
     1245    10113
     1246    10114                      If Buffer slots run out, BUF$ will not be incremented.
     1247    10115                      This over-writes the last buffer slot.
     1248    10116
     1249    10117                      This routine takes the ALTRETURN only if no DCB
     1250    10118                      is fit(HA, HA) to WRITE output AND the buffer slots are
     1251    10119                      all used up.
     1252    10120        */
     1253    10121    2   HELP_WRITE: PROC ALTRET;

  10121  2 003157   200130 741300       HELP_WRITE   STX1  ! LENGTH+2,,AUTO

     1254    10122        /**/
     1255    10123        /*  Insure we have someplace to put message.  */
     1256    10124        /**/
     1257    10125    3           IF RESULTS.RECCNT > HELP_RECS   /* No buffer slots left               */

  10125  2 003160   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 003161   000001 236100                    LDQ     1,,PR0
         2 003162   777777 376007                    ANQ     -1,DL
         2 003163   200003 116100                    CMPQ    HELP_RECS,,AUTO
         2 003164   003201 602000 2                  TNC     s:10136
         2 003165   003201 600000 2                  TZE     s:10136
         2 003166   000000 471400 xsym               LDP1    B$PS0$
         2 003167   100000 220100                    LDX0    0,,PR1
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:187  
         2 003170   003174 600000 2                  TZE     s:10125+12
         2 003171   000000 236100                    LDQ     0,,PR0
         2 003172   010000 316003                    CANQ    4096,DU
         2 003173   003201 600000 2                  TZE     s:10136
         2 003174   100000 722100                    LXL2    0,,PR1
         2 003175   003316 600000 2                  TZE     ABORT_WRITE
         2 003176   000000 236100                    LDQ     0,,PR0
         2 003177   004000 316003                    CANQ    2048,DU
         2 003200   003316 601000 2                  TNZ     ABORT_WRITE

     1258    10126    3            AND (V$# -> FPT$HELP_V.OUTDCB1 = 0
     1259    10127    3             OR RESULTS.OUTERR1)           /* AND OUTDCB1 is worthless           */
     1260    10128    3            AND (V$# -> FPT$HELP_V.OUTDCB2 = 0
     1261    10129    3             OR RESULTS.OUTERR2)           /* AND OUTDCB2 is worthless           */
     1262    10130    3            THEN                           /* Noplace to write to, and no buffer */
     1263    10131    3              GOTO ABORT_WRITE;
     1264    10132        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:188  
     1265    10133        /**/
     1266    10134        /*  Abort if CTRL-Y or BREAK hit us.  */
     1267    10135        /**/
     1268    10136    3           IF S$CU$ -> B$U.ASYNCH & (%U_BRK|%U_YC)

  10136  2 003201   000030 236000 xsym               LDQ     B_VECTNIL+24
         2 003202   000123 276000 1                  ORQ     HIGH_CHAR+5
         2 003203   000000 471400 xsym               LDP1    S$CU$
         2 003204   100001 376100                    ANQ     1,,PR1
         2 003205   003211 600000 2                  TZE     s:10143

     1269    10137    3            THEN
     1270    10138    4              DO;

     1271    10139    4                ERROR = %E$BREAK;

  10139  2 003206   001451 235007                    LDA     809,DL
         2 003207   200014 755100                    STA     ERROR,,AUTO

     1272    10140    4                GOTO ABORT_WRITE;

  10140  2 003210   003316 710000 2                  TRA     ABORT_WRITE

     1273    10141    4                END;
     1274    10142        /**/
     1275    10143    3           FPT_WRITE.BUF_.BUF$ = BUF$;     /* Point WRITE to current buf slot    */

  10143  2 003211   200010 236100                    LDQ     BUF$,,AUTO
         2 003212   200111 473500                    LDP3    AD_WFPT$,,AUTO
         2 003213   300005 756100                    STQ     5,,PR3

     1276    10144        /**/
     1277    10145    3           IF (( V$# -> FPT$HELP_V.OUTDCB1 ~= 0) AND

  10145  2 003214   000000 474400 xsym               LDP4    B$PS0$
         2 003215   400000 220100                    LDX0    0,,PR4
         2 003216   003241 600000 2                  TZE     WRITE_2
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:189  
         2 003217   000000 236100                    LDQ     0,,PR0
         2 003220   010000 316003                    CANQ    4096,DU
         2 003221   003241 601000 2                  TNZ     WRITE_2

     1278    10146    3             (RESULTS.OUTERR1 = FALSE#))
     1279    10147    3           THEN                            /* OUTDCB1 is functional              */
     1280    10148    4           DO;

     1281    10149    4              FPT_WRITE.V.DCB# = V$# -> FPT$HELP_V.OUTDCB1;

  10149  2 003222   300010 740100                    STX0    8,,PR3

     1282    10150    4              CALL M$MWRITE (FPT_WRITE) ALTRET (HELP_W1ERR);

  10150  2 003223   200111 630500                    EPPR0   AD_WFPT$,,AUTO
         2 003224   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003225   000000 701000 xent               TSX1    M$MWRITE
         2 003226   003230 702000 2                  TSX2    HELP_W1ERR

     1283    10151    5              DO WHILE (NEVER#);

  10151  2 003227   003236 710000 2                  TRA     s:10156

  10150  2 003230                       HELP_W1ERR   null
     1284    10152    5   HELP_W1ERR:   ;
     1285    10153    5                 RESULTS.OUTERR1 = TRUE#;

  10153  2 003230   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 003231   010000 236003                    LDQ     4096,DU
         2 003232   000000 256100                    ORSQ    0,,PR0

     1286    10154    5                 RESULTS.ERRCODE1 = B$JIT$ -> B$JIT.ERR;

  10154  2 003233   000000 471400 xsym               LDP1    B$JIT$
         2 003234   100012 236100                    LDQ     10,,PR1
         2 003235   000002 756100                    STQ     2,,PR0

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:190  
     1287    10155    5                 END;

     1288    10156    4              CALL HFF$TRAPALT ALTRET(ABORT_WRITE);

  10156  2 003236   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003237   000000 701000 xent               TSX1    HFF$TRAPALT
         2 003240   003316 702000 2                  TSX2    ABORT_WRITE

     1289    10157    4              END;

     1290    10158        /**/
     1291    10159    3   WRITE_2:
     1292    10160    3           IF (( V$# -> FPT$HELP_V.OUTDCB2 ~= 0) AND

  10160  2 003241   000000 470400 xsym  WRITE_2      LDP0    B$PS0$
         2 003242   000000 720100                    LXL0    0,,PR0
         2 003243   003270 600000 2                  TZE     s:10173
         2 003244   200117 471500                    LDP1    AD_RSLT$,,AUTO
         2 003245   100000 236100                    LDQ     0,,PR1
         2 003246   004000 316003                    CANQ    2048,DU
         2 003247   003270 601000 2                  TNZ     s:10173

     1293    10161    3             (RESULTS.OUTERR2 = FALSE#))
     1294    10162    3           THEN                            /* OUTDCB2 is functional              */
     1295    10163    4           DO;

     1296    10164    4              FPT_WRITE.V.DCB# = V$# -> FPT$HELP_V.OUTDCB2;

  10164  2 003250   200111 473500                    LDP3    AD_WFPT$,,AUTO
         2 003251   300010 740100                    STX0    8,,PR3

     1297    10165    4              CALL M$MWRITE (FPT_WRITE) ALTRET (HELP_W2ERR);

  10165  2 003252   200111 630500                    EPPR0   AD_WFPT$,,AUTO
         2 003253   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003254   000000 701000 xent               TSX1    M$MWRITE
         2 003255   003257 702000 2                  TSX2    HELP_W2ERR
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:191  

     1298    10166    5              DO WHILE (NEVER#);

  10166  2 003256   003265 710000 2                  TRA     s:10170

     1299    10167    5   HELP_W2ERR:   RESULTS.OUTERR2 = TRUE#;

  10167  2 003257   200117 470500       HELP_W2ERR   LDP0    AD_RSLT$,,AUTO
         2 003260   004000 236003                    LDQ     2048,DU
         2 003261   000000 256100                    ORSQ    0,,PR0

     1300    10168    5                 RESULTS.ERRCODE2 = B$JIT$ -> B$JIT.ERR;

  10168  2 003262   000000 471400 xsym               LDP1    B$JIT$
         2 003263   100012 236100                    LDQ     10,,PR1
         2 003264   000003 756100                    STQ     3,,PR0

     1301    10169    5                 END;

     1302    10170    4              CALL HFF$TRAPALT ALTRET(ABORT_WRITE);

  10170  2 003265   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003266   000000 701000 xent               TSX1    HFF$TRAPALT
         2 003267   003316 702000 2                  TSX2    ABORT_WRITE

     1303    10171    4              END;

     1304    10172        /**/
     1305    10173    3           RESULTS.RECCNT = RESULTS.RECCNT +1; /* Count this record processed    */

  10173  2 003270   200117 470500                    LDP0    AD_RSLT$,,AUTO
         2 003271   000001 720100                    LXL0    1,,PR0
         2 003272   000001 621010                    EAX1    1,X0
         2 003273   000001 441100                    SXL1    1,,PR0

     1306    10174    3           IF RESULTS.RECCNT = 0

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:192  
  10174  2 003274   003301 601000 2                  TNZ     s:10180

     1307    10175    3            THEN                           /* RECCNT has overflowed              */
     1308    10176    4              DO;

     1309    10177    4                 ERROR = %E$HERROR;        /* HELP ERROR                         */

  10177  2 003275   001516 235007                    LDA     846,DL
         2 003276   200014 755100                    STA     ERROR,,AUTO

     1310    10178    4                 ALTRETURN;

  10178  2 003277   200130 221300                    LDX1  ! LENGTH+2,,AUTO
         2 003300   000000 702211                    TSX2  ! 0,X1

     1311    10179    4                 END;
     1312    10180    3           IF RESULTS.RECCNT > HELP_RECS

  10180  2 003301   000001 236100                    LDQ     1,,PR0
         2 003302   777777 376007                    ANQ     -1,DL
         2 003303   200003 116100                    CMPQ    HELP_RECS,,AUTO
         2 003304   003311 602000 2                  TNC     s:10184
         2 003305   003311 600000 2                  TZE     s:10184

     1313    10181    3            THEN                           /* Buffer exhausted                   */
     1314    10182    3              RESULTS.MSGCOMP = FALSE#;    /* Overwrite the last buffer slot     */

  10182  2 003306   000024 236000 3                  LDQ     20
         2 003307   000000 356100                    ANSQ    0,,PR0
         2 003310   003314 710000 2                  TRA     s:10186

     1315    10183    3            ELSE                           /* Buffer slots remain                */
     1316    10184    3              BUF$ = PINCRC(BUF$,SLOT_SIZE#); /* Bump to next buffer slot        */

  10184  2 003311   200010 236100                    LDQ     BUF$,,AUTO
         2 003312   000025 036000 3                  ADLQ    21
         2 003313   200010 756100                    STQ     BUF$,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:193  

     1317    10185        /**/
     1318    10186    3           RETURN;

  10186  2 003314   200130 221300                    LDX1  ! LENGTH+2,,AUTO
         2 003315   000001 702211                    TSX2  ! 1,X1

  10180  2 003316                       ABORT_WRITE  null
     1319    10187        /**/
     1320    10188    3   ABORT_WRITE: ;
     1321    10189    3           ALTRETURN;

  10189  2 003316   200130 221300                    LDX1  ! LENGTH+2,,AUTO
         2 003317   000000 702211                    TSX2  ! 0,X1

     1322    10190        /**/
     1323    10191    3   END HELP_WRITE;
     1324    10192        /**/
     1325    10193    2   END BUFFER_HELP;
     1326    10194        /**/
     1327    10195        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:194  
     1328    10196        /**/
     1329    10197        /*F*     NAME: READKEY
     1330    10198        *
     1331    10199                 DESCRIPTION: READKEY does an M$MREAD into the TEXT buffer, telling
     1332    10200                      it to position to RETURNKEY.
     1333    10201
     1334    10202                      If the specified key does not exist (and a next record
     1335    10203                      does exist), the routine falls into READSEQ to process
     1336    10204                      the next record.
     1337    10205
     1338    10206                      If the specified key does not exist and the next record is
     1339    10207                      EOF, the normal return is taken, with a key length of 0.
     1340    10208
     1341    10209                      The routine then examines RETURNKEY by falling into EVAL_KEY.
     1342    10210                      See EVAL_KEY for details of the check.
     1343    10211
     1344    10212                      In the event of an error on the M$MREAD, this proc will ALTRET.
     1345    10213        */
     1346    10214    1   READKEY: PROC ALTRET;

  10214  2 003320   200126 741300       READKEY      STX1  ! LENGTH,,AUTO

     1347    10215        /**/
     1348    10216    2           TEXT = ' ';

  10216  2 003321   200114 470500                    LDP0    AD_TBUF$,,AUTO
         2 003322   040100 100400                    MLR     fill='040'O
         2 003323   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003324   000000 000117                    ADSC9   0,,PR0                   cn=0,n=79

     1349    10217    2           FPT_READ.V.KEYS# = TRUE#; /* Keyed READs                */

  10217  2 003325   200110 471500                    LDP1    AD_RFPT$,,AUTO
         2 003326   200000 236007                    LDQ     65536,DL
         2 003327   100010 256100                    ORSQ    8,,PR1

     1350    10218    2           CALL M$MREAD(FPT_READ) ALTRET(RDKY_ALT);
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:195  

  10218  2 003330   200110 630500                    EPPR0   AD_RFPT$,,AUTO
         2 003331   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003332   000000 701000 xent               TSX1    M$MREAD
         2 003333   003340 702000 2                  TSX2    RDKY_ALT

     1351    10219    2           CALL HFF$TRAPALT ALTRET(HIN_ERR);

  10219  2 003334   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003335   000000 701000 xent               TSX1    HFF$TRAPALT
         2 003336   003452 702000 2                  TSX2    HIN_ERR

     1352    10220    3           DO WHILE (NEVER#);

  10220  2 003337   003357 710000 2                  TRA     s:10237

  10219  2 003340                       RDKY_ALT     null
     1353    10221    3   RDKY_ALT:  ;
     1354    10222    3              CALL HFF$TRAPALT ALTRET(HIN_ERR);

  10222  2 003340   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003341   000000 701000 xent               TSX1    HFF$TRAPALT
         2 003342   003452 702000 2                  TSX2    HIN_ERR

     1355    10223    3              IF B$JIT$ -> B$JIT.ERR.CODE = %E$NOKEY

  10223  2 003343   000000 470400 xsym               LDP0    B$JIT$
         2 003344   000012 236100                    LDQ     10,,PR0
         2 003345   377770 376007                    ANQ     131064,DL
         2 003346   001020 116007                    CMPQ    528,DL
         2 003347   003354 601000 2                  TNZ     s:10231

     1356    10224    3              THEN                         /* No such key on a READ              */
     1357    10225    3                 IF RETURNKEY.LEN = 0

  10225  2 003350   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 003351   777000 316003                    CANQ    -512,DU
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:196  
         2 003352   003441 600000 2                  TZE     NO_REC_LEFT

     1358    10226    3                  THEN                     /* Next record is EOF                 */
     1359    10227    3                    GOTO NO_REC_LEFT;
     1360    10228    3                  ELSE                     /* A next record does exist           */
     1361    10229    3                     GOTO R_SEQN;          /* Read it                            */

  10229  2 003353   003412 710000 2                  TRA     R_SEQN

     1362    10230    3               ELSE                        /* Some other (fatal) READ error      */
     1363    10231    3              IF B$JIT$ -> B$JIT.ERR.CODE = %E$LD /* Database record too big     */

  10231  2 003354   000070 116007                    CMPQ    56,DL
         2 003355   003447 600000 2                  TZE     DIN_ERR

     1364    10232    3               THEN                        /* Database error                     */
     1365    10233    3                  GOTO DIN_ERR;
     1366    10234                                                /* Some other (fatal) input error     */
     1367    10235    3              GOTO HIN_ERR;

  10235  2 003356   003452 710000 2                  TRA     HIN_ERR

     1368    10236    3              END;

     1369    10237    2           GOTO EVAL_KEY;                  /* Skip code for READSEQ ENTRY        */

  10237  2 003357   003461 710000 2                  TRA     EVAL_KEY

     1370    10238        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:197  
     1371    10239        /**/
     1372    10240        /*F*     NAME: READ_BACK
     1373    10241        *
     1374    10242                 DESCRIPTION: READ_BACK does an M$MPRECORD of -2 on the HELP file
     1375    10243                      to position before the record before the one we just read.
     1376    10244
     1377    10245                      If a preceeding record is found, it is read by falling
     1378    10246                      into READSEQ.
     1379    10247
     1380    10248                      PRECORDing to BOF will normal return with RETURNKEY.LEN = 0.
     1381    10249
     1382    10250                      In the event of an error on the M$MPRECORD, this proc will ALTRET.
     1383    10251        */
     1384    10252    2   READ_BACK: ENTRY ALTRET;

  10252  2 003360   200126 741300       READ_BACK    STX1  ! LENGTH,,AUTO

     1385    10253        /**/
     1386    10254    2           CALL M$MPRECORD(FPT_PREC) ALTRET(PREC_ALT);

  10254  2 003361   200112 630500                    EPPR0   AD_PFPT$,,AUTO
         2 003362   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003363   000000 701000 xent               TSX1    M$MPRECORD
         2 003364   003371 702000 2                  TSX2    PREC_ALT

     1387    10255    2           CALL HFF$TRAPALT ALTRET(HIN_ERR);

  10255  2 003365   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003366   000000 701000 xent               TSX1    HFF$TRAPALT
         2 003367   003452 702000 2                  TSX2    HIN_ERR

     1388    10256    3           DO WHILE (NEVER#);

  10256  2 003370   003410 710000 2                  TRA     s:10269

  10255  2 003371                       PREC_ALT     null
     1389    10257    3   PREC_ALT:  ;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:198  
     1390    10258    3              CALL HFF$TRAPALT ALTRET(HIN_ERR);

  10258  2 003371   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003372   000000 701000 xent               TSX1    HFF$TRAPALT
         2 003373   003452 702000 2                  TSX2    HIN_ERR

     1391    10259    3              IF B$JIT$ -> B$JIT.ERR.CODE = %E$BOF

  10259  2 003374   000000 470400 xsym               LDP0    B$JIT$
         2 003375   000012 236100                    LDQ     10,,PR0
         2 003376   377770 376007                    ANQ     131064,DL
         2 003377   000040 116007                    CMPQ    32,DL
         2 003400   003441 600000 2                  TZE     NO_REC_LEFT

     1392    10260    3              THEN                         /* BOF on precord                     */
     1393    10261    3                GOTO NO_REC_LEFT;
     1394    10262    3              ELSE                         /* Some other (fatal) error occured   */
     1395    10263    4              DO;

     1396    10264    4                 ERROR = %E$HERROR;

  10264  2 003401   001516 235007                    LDA     846,DL
         2 003402   200014 755100                    STA     ERROR,,AUTO

     1397    10265    4                 RESULTS.INERR = TRUE#;

  10265  2 003403   200117 471500                    LDP1    AD_RSLT$,,AUTO
         2 003404   000400 236003                    LDQ     256,DU
         2 003405   100000 256100                    ORSQ    0,,PR1

     1398    10266    4                 ALTRETURN;

  10266  2 003406   200126 221300                    LDX1  ! LENGTH,,AUTO
         2 003407   000000 702211                    TSX2  ! 0,X1

     1399    10267    4                 END;
     1400    10268    3              END;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:199  

     1401    10269    2           GOTO R_SEQN;

  10269  2 003410   003412 710000 2                  TRA     R_SEQN

     1402    10270        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:200  
     1403    10271        /**/
     1404    10272        /*F*     NAME: READSEQ
     1405    10273        *
     1406    10274                 DESCRIPTION: READSEQ does a sequential M$MREAD on the HELP file
     1407    10275                      into the TEXT buffer.
     1408    10276                      The resulting key is placed in RETURNKEY.
     1409    10277
     1410    10278                      READing to EOF will normal return with RETURNKEY.LEN = 0.
     1411    10279
     1412    10280                      The routine then examines RETURNKEY by falling into EVAL_KEY.
     1413    10281                      See EVAL_KEY for details of the check.
     1414    10282
     1415    10283                      In the event of an error on the M$MREAD, this proc will ALTRET.
     1416    10284        */
     1417    10285    2   READSEQ: ENTRY ALTRET;

  10285  2 003411   200126 741300       READSEQ      STX1  ! LENGTH,,AUTO

     1418    10286        /**/
     1419    10287    2   R_SEQN: TEXT = ' ';

  10287  2 003412   200114 470500       R_SEQN       LDP0    AD_TBUF$,,AUTO
         2 003413   040100 100400                    MLR     fill='040'O
         2 003414   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003415   000000 000117                    ADSC9   0,,PR0                   cn=0,n=79

     1420    10288    2           FPT_READ.V.KEYS# = FALSE#;  /* SEQUEN */

  10288  2 003416   200110 471500                    LDP1    AD_RFPT$,,AUTO
         2 003417   000026 236000 3                  LDQ     22
         2 003420   100010 356100                    ANSQ    8,,PR1

     1421    10289    2           CALL M$MREAD(FPT_READ) ALTRET(READ_ALT);

  10289  2 003421   200110 630500                    EPPR0   AD_RFPT$,,AUTO
         2 003422   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003423   000000 701000 xent               TSX1    M$MREAD
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:201  
         2 003424   003431 702000 2                  TSX2    READ_ALT

     1422    10290    2           CALL HFF$TRAPALT ALTRET(HIN_ERR);

  10290  2 003425   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003426   000000 701000 xent               TSX1    HFF$TRAPALT
         2 003427   003452 702000 2                  TSX2    HIN_ERR

     1423    10291    3           DO WHILE (NEVER#);

  10291  2 003430   003461 710000 2                  TRA     EVAL_KEY

  10290  2 003431                       READ_ALT     null
     1424    10292    3   READ_ALT:  ;
     1425    10293    3              CALL HFF$TRAPALT ALTRET(HIN_ERR);

  10293  2 003431   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003432   000000 701000 xent               TSX1    HFF$TRAPALT
         2 003433   003452 702000 2                  TSX2    HIN_ERR

     1426    10294    3              IF B$JIT$ -> B$JIT.ERR.CODE = %E$EOF

  10294  2 003434   000000 470400 xsym               LDP0    B$JIT$
         2 003435   000012 236100                    LDQ     10,,PR0
         2 003436   377770 376007                    ANQ     131064,DL
         2 003437   000060 116007                    CMPQ    48,DL
         2 003440   003445 601000 2                  TNZ     s:10300

     1427    10295    3              THEN                         /* Only an EOF on input               */
     1428    10296    4   NO_REC_LEFT: DO;

  10296  2 003441                       NO_REC_LEFT  null
     1429    10297    4                  RETURNKEY.LEN = 0;       /* Flag 'no records left'             */

  10297  2 003441   000000 236003                    LDQ     0,DU
         2 003442   200021 552140                    STBQ    RETURNKEY,'40'O,AUTO

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:202  
     1430    10298    4                  RETURN;                  /* Normal return                      */

  10298  2 003443   200126 221300                    LDX1  ! LENGTH,,AUTO
         2 003444   000001 702211                    TSX2  ! 1,X1

     1431    10299    4                  END;
     1432    10300    3              IF B$JIT$ -> B$JIT.ERR.CODE = %E$LD /* Database record too big     */

  10300  2 003445   000070 116007                    CMPQ    56,DL
         2 003446   003452 601000 2                  TNZ     HIN_ERR

     1433    10301    3               THEN                        /* Database error                     */
     1434    10302    4                  DO;

     1435    10303    4   DIN_ERR:         ERROR = %E$HELPDERR;

  10303  2 003447   001520 235007       DIN_ERR      LDA     848,DL
         2 003450   200014 755100                    STA     ERROR,,AUTO

     1436    10304    4                    GOTO IN_ERR;

  10304  2 003451   003454 710000 2                  TRA     IN_ERR

     1437    10305    4                    END;
     1438    10306                                                /* Some other (fatal) input error     */
     1439    10307    3   HIN_ERR:   ERROR = %E$HERROR;

  10307  2 003452   001516 235007       HIN_ERR      LDA     846,DL
         2 003453   200014 755100                    STA     ERROR,,AUTO

     1440    10308    3   IN_ERR:    RESULTS.INERR = TRUE#;

  10308  2 003454   200117 470500       IN_ERR       LDP0    AD_RSLT$,,AUTO
         2 003455   000400 236003                    LDQ     256,DU
         2 003456   000000 256100                    ORSQ    0,,PR0

     1441    10309    3              ALTRETURN;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:203  

  10309  2 003457   200126 221300                    LDX1  ! LENGTH,,AUTO
         2 003460   000000 702211                    TSX2  ! 0,X1

     1442    10310    3              END;

     1443    10311        %EJECT;
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:204  
     1444    10312        /**/
     1445    10313        /*F*     NAME: EVAL_KEY
     1446    10314        *
     1447    10315                 DESCRIPTION: EVAL_KEY evaluates RETURNKEY after a READ or
     1448    10316                      PRECORD.
     1449    10317
     1450    10318                      RECORD_TYPE is set to TEXT_REC#, DICT_REC#, or SYN_REC#.
     1451    10319
     1452    10320                      C_COUNT is set to the number of characters in the beginning
     1453    10321                      of the key (before any separator).
     1454    10322
     1455    10323                      POSITION becomes C_COUNT +1, the index of any second part
     1456    10324                      of the key that may exist.
     1457    10325        */
     1458    10326    2   EVAL_KEY:
     1459    10327        /**/
     1460    10328    2           CALL INDEX(C_COUNT,ZERO_CHAR,

  10328  2 003461   000000 124500       EVAL_KEY     SCM     mask='000'O
         2 003462   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63
         2 003463   000115 000001 1                  ADSC9   ZERO_CHAR                cn=0,n=1
         2 003464   200102 000100                    ARG     C_COUNT,,AUTO

     1461    10329    2            RETURNKEY.TEXT,0);             /* Look for binary zeroes             */
     1462    10330    2           IF C_COUNT < RETURNKEY.LEN

  10330  2 003465   200021 236100                    LDQ     RETURNKEY,,AUTO
         2 003466   000033 772000                    QRL     27
         2 003467   200102 116100                    CMPQ    C_COUNT,,AUTO
         2 003470   003500 602000 2                  TNC     s:10338
         2 003471   003500 600000 2                  TZE     s:10338

     1463    10331    2            THEN                           /* Binary zeroes found, TEXT record   */
     1464    10332    3              DO;

     1465    10333    3                POSITION = C_COUNT +1;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:205  
  10333  2 003472   200102 235100                    LDA     C_COUNT,,AUTO
         2 003473   000001 035007                    ADLA    1,DL
         2 003474   200041 755100                    STA     POSITION,,AUTO

     1466    10334    3                RECORD_TYPE = TEXT_REC#;

  10334  2 003475   000001 235007                    LDA     1,DL
         2 003476   200012 755100                    STA     RECORD_TYPE,,AUTO

     1467    10335    3                END;

  10335  2 003477   003522 710000 2                  TRA     s:10353

     1468    10336    2            ELSE                           /* No zeroes found, SYN or DICT rec   */
     1469    10337    3              DO;

     1470    10338    3                CALL INDEX(C_COUNT,' ',RETURNKEY.TEXT,0); /* Look for a blank    */

  10338  2 003500   000000 124500                    SCM     mask='000'O
         2 003501   200021 200077                    ADSC9   RETURNKEY,,AUTO          cn=1,n=63
         2 003502   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003503   200102 000100                    ARG     C_COUNT,,AUTO

     1471    10339    3                IF C_COUNT < RETURNKEY.LEN

  10339  2 003504   200102 116100                    CMPQ    C_COUNT,,AUTO
         2 003505   003515 602000 2                  TNC     s:10347
         2 003506   003515 600000 2                  TZE     s:10347

     1472    10340    3                 THEN                      /* Blank found, must be DICTIONARY    */
     1473    10341    4                   DO;

     1474    10342    4                     POSITION = C_COUNT +1; /* Point to SUBTOPIC in RETURNKEY    */

  10342  2 003507   200102 235100                    LDA     C_COUNT,,AUTO
         2 003510   000001 035007                    ADLA    1,DL
         2 003511   200041 755100                    STA     POSITION,,AUTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:206  

     1475    10343    4                     RECORD_TYPE = DICT_REC#;

  10343  2 003512   000002 235007                    LDA     2,DL
         2 003513   200012 755100                    STA     RECORD_TYPE,,AUTO

     1476    10344    4                     END;

  10344  2 003514   003522 710000 2                  TRA     s:10353

     1477    10345    3                 ELSE                           /* No blank, SYN record          */
     1478    10346    4                   DO;

     1479    10347    4                     C_COUNT = RETURNKEY.LEN; /* Fake a pointer for KEY1 testing */

  10347  2 003515   200102 756100                    STQ     C_COUNT,,AUTO

     1480    10348    4                     POSITION = C_COUNT +1;

  10348  2 003516   000001 036007                    ADLQ    1,DL
         2 003517   200041 756100                    STQ     POSITION,,AUTO

     1481    10349    4                     RECORD_TYPE = SYN_REC#;

  10349  2 003520   000003 235007                    LDA     3,DL
         2 003521   200012 755100                    STA     RECORD_TYPE,,AUTO

     1482    10350    4                     END;

     1483    10351    3                  END;

     1484    10352        /**/
     1485    10353    2           RETURN;

  10353  2 003522   200126 221300                    LDX1  ! LENGTH,,AUTO
         2 003523   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:207  
INIT_RFPT
 Sect OctLoc
   1     000   000005 777640   000010 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     010   000000 500000   000000 000000   000000 000000   000000 000000    ................
   1     014   000000 000000   000000 000000                                    ........

INIT_WFPT
 Sect OctLoc
   1     016   000003 777640   000026 006000   000000 177640   000000 006014    ................
   1     022   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     026   000000 400400   000000 000000   000000 000000   000000 000000    ................

INIT_PRECFPT
 Sect OctLoc
   1     032   000003 777640   000040 006000   000000 177640   000000 006014    ..... ..........
   1     036   000000 177640   000000 006014   000000 200000   777777 777776    ................
   1     042   000000 000000   0***** ******                                    ........

INIT_OPEN
 Sect OctLoc
   1     044   000066 006000   000000 006014   000000 006014   000000 006014    .6..............
   1     050   000000 006014   000000 006014   000000 006014   000000 006014    ................
   1     064*  000000 006014   000000 006014   000000 024042   000000 002001    ..........."....
   1     070   252525 000002   000040 252520   000040 040040   000000 000000    ..... ...   ....
   1     074   000000 777777   000000 000000   000000 000000   000000 000000    ................
   1     100   000000 000000   000000 000000   251000 622000   000000 000000    ................
   1     104   000000 000000   111250 000000   040040 040040   000000 000000    ....I...    ....
   1     110   000000 000000   000000 000000   000000 000000   ****** ******    ................

M$STAR_NUM
 Sect OctLoc
   1     114   000000 000001                                                    ....

ZERO_CHAR
 Sect OctLoc
   1     115   000*** ******                                                    ....
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:208  

HIGH_CHAR
 Sect OctLoc
   1     116   777*** ******                                                    ....

(unnamed)
 Sect OctLoc
   1     117   072123 131123   110105 114120   072040 040040   040040 040040    :SYSHELP:
   1     123   200000 000000                                                    ....

(unnamed)
 Sect OctLoc
   3     000   000000 006003   000040 040040   000005 006000   000004 006000    .....   ........
   3     004   077040 040040   000003 006000   000006 006000   000007 006000    ?   ............
   3     010   000010 006000   000011 006000   000005 777640   000023 577640    ................
   3     014   000017 777640   000003 777640   000023 400000   777777 777770    ................
   3     020   072040 040040   777007 777777   777040 040040   002040 040040    :   .....   .
   3     024   757777 777777   000023 600000   777777 577777                    ............
     1486    10354        /**/
     1487    10355    2   END READKEY;
     1488    10356        /**/
     1489    10357    1   END EMH$HELP;

PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:209  
--  Include file information  --

   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   UM$CP6V_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure EMH$HELP.
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:210  

 **** Variables and constants ****

  ****  Section 001 RoData EMH$HELP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   116-0-0/c CHAR        r     1 HIGH_CHAR                 44-0-0/d STRC(1440)  r     1 INIT_OPEN
    32-0-0/d STRC(360)   r     1 INIT_PRECFPT               0-0-0/d STRC(504)   r     1 INIT_RFPT
    16-0-0/d STRC(432)   r     1 INIT_WFPT                114-0-0/w UBIN        r     1 M$STAR_NUM
   115-0-0/c CHAR        r     1 ZERO_CHAR

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   125-0-0/w PTR         r     1 @FUNCTION                115-0-0/w PTR         r     1 AD_KEY1$
   116-0-0/w PTR         r     1 AD_KEY2$                 113-0-0/w PTR         r     1 AD_OFPT$
   112-0-0/w PTR         r     1 AD_PFPT$                 110-0-0/w PTR         r     1 AD_RFPT$
   117-0-0/w PTR         r     1 AD_RSLT$                 114-0-0/w PTR         r     1 AD_TBUF$
   111-0-0/w PTR         r     1 AD_WFPT$                  10-0-0/w PTR         r     1 BUF$
     4-0-0/w SBIN        r     1 BUFLEN                     7-0-0/b BIT         r     1 CASE_TRANS_OK
    15-0-0/w SBIN        r     1 COLUMN                   106-0-0/w UBIN        r     1 CONV_UBIN
   102-0-0/w UBIN        r     1 C_COUNT                   42-0-0/w STRC(576)   r     1 ENDKEY
    14-0-0/w UBIN        r     1 ERROR                     *0-0-0/w SBIN        r     1 FUNCTION
     3-0-0/w UBIN        r     1 HELP_RECS                 13-0-0/w SBIN        r     1 I
     5-0-0/w SBIN        r     1 LEN                      126-0-0/w SBIN        r     1 LENGTH
    16-0-0/w PTR         r     1 M$STAR$                    6-0-0/b BIT         r     1 NAME_PASSED
    11-0-0/c CHAR        r     1 NATIVE_LANG              107-0-0/w PTR         r     1 POOLBUF$
    41-0-0/w UBIN        r     1 POSITION                  20-0-0/w BIT         r     1 RANGE
    12-0-0/w UBIN        r     1 RECORD_TYPE               21-0-0/w STRC(576)   r     1 RETURNKEY
   103-0-0/w UBIN        r     1 SRCH_IDX                 105-0-0/w UBIN        r     1 SRCH_START
   104-0-0/w UBIN        r     1 SRCH_VAL                  62-0-0/w STRC(576)   r     1 TRYKEY
    17-0-0/w BIT         r     1 WILDCARDING

  ****  SYMREF variables  ****
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:211  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$PS0$
     0-0-0/w PTR         r     1 B$PS1$                     0-0-0/w PTR         r     1 B$PS2$
     0-0-0/w PTR         r     1 B$PS3$                     0-0-0/w PTR         r     1 B$PS4$
     0-0-0/w PTR         r     1 B$PS5$                     0-0-0/w PTR         r     1 B$PS6$
     0-0-0/w PTR         r     1 B$PS7$                     0-0-0/w PTR         r     1 B$SR_NON_DEC$
     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/w PTR         r     1 S$CU$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(79)    r     1 B$BUFFER                   0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/d STRC(504)   r     1 B$RESULTS                  0-0-0/d STRC(576)   r     1 B$U
     0-0-0/c CHAR(8)     r     1 CHAR$8                     0-0-0/d STRC(4608)  r     1 EMH_UC_XLATE_TBL
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/d STRC(144)   r     1 FPT$HELP_V
     0-0-0/d STRC(2088)  r     1 FPT_OPEN                   0-0-0/d STRC(360)   r     1 FPT_PREC
     0-0-0/d STRC(504)   r     1 FPT_READ                   0-0-0/d STRC(432)   r     1 FPT_WRITE
     0-0-0/w STRC(288)   r     1 KEY1                       0-0-0/w STRC(288)   r     1 KEY2
     0-0-0/d STRC(504)   r     1 RESULTS                    0-0-0/d STRC(4608)  r     1 SRCH_TBL
     0-0-0/c CHAR(79)    r     1 TEXT                       0-0-0/c ASTR(9)     r     1 TEXT$C


   Procedure EMH$HELP requires 1876 words for executable code.
   Procedure EMH$HELP requires 94 words of local(AUTO) storage.

    No errors detected in file EMH$HELP.:E05TSI    .
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:212  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:213  
          MINI XREF LISTING

ABBREV
     10005**PROC     9658--CALL     9707--CALL     9816--CALL
ABBREV_ALT IN PROCEDURE ABBREV
     10038**LABEL   10009--CALLALT 10019--CALLALT
ABORT_LIST_LOW_TOPIC IN PROCEDURE LIST_SUB_TOPICS
      9851**LABEL    9816--CALLALT  9848--CALLALT  9854--CALLALT  9855--CALLALT
ABORT_LIST_MAJOR_TOPICS IN PROCEDURE LIST_MAJOR_TOPICS
      9909**LABEL    9887--CALLALT  9907--CALLALT  9911--CALLALT  9914--CALLALT
ABORT_WRITE IN PROCEDURE HELP_WRITE
     10180**LABEL   10131--GOTO    10140--GOTO    10156--CALLALT 10170--CALLALT
AD_KEY1$
      8860**DCL      9078--IMP-PTR  9180<<ASSIGN   9181>>ASSIGN   9254>>ASSIGN   9255>>IF       9255>>IF
      9259>>ASSIGN   9260>>IF       9263>>CALLBLT  9264>>IF       9266>>IF       9275>>ASSIGN   9276>>ASSIGN
      9416>>IF       9416>>IF       9579>>IF       9610>>IF       9615>>ASSIGN   9616>>ASSIGN   9642>>ASSIGN
      9643>>ASSIGN   9648>>IF       9656>>ASSIGN   9657>>ASSIGN   9666>>CALLBLT  9666>>CALLBLT  9688>>ASSIGN
      9689>>ASSIGN   9689>>ASSIGN   9694>>ASSIGN   9695>>ASSIGN   9704>>CALLBLT  9704>>CALLBLT  9706>>ASSIGN
      9756>>CALLBLT  9756>>CALLBLT  9758>>ASSIGN   9763>>CALLBLT  9763>>CALLBLT  9765>>ASSIGN   9814>>ASSIGN
      9815>>ASSIGN   9823>>CALLBLT  9823>>CALLBLT  9835>>ASSIGN   9836>>ASSIGN   9836>>ASSIGN   9840>>ASSIGN
      9841>>ASSIGN   9844>>CALLBLT  9844>>CALLBLT  9847>>ASSIGN   9851>>ASSIGN   9851>>ASSIGN   9872>>ASSIGN
      9872>>ASSIGN   9873>>ASSIGN   9879>>IF       9882>>ASSIGN   9883>>ASSIGN   9886>>ASSIGN   9894>>CALLBLT
      9894>>CALLBLT  9897>>ASSIGN   9937>>ASSIGN   9937>>ASSIGN   9938>>CALLBLT  9938>>CALLBLT  9940>>ASSIGN
      9945>>ASSIGN
AD_KEY2$
      8861**DCL      9085--IMP-PTR  9181<<ASSIGN   9182>>ASSIGN   9229>>ASSIGN   9230>>IF       9230>>IF
      9237>>ASSIGN   9238>>IF       9241>>CALLBLT  9242>>IF       9249>>ASSIGN   9250>>ASSIGN   9269>>IF
      9579>>IF       9607>>CALLBLT  9607>>CALLBLT  9609>>ASSIGN   9698>>IF       9704>>CALLBLT  9704>>CALLBLT
      9706>>ASSIGN   9715>>CALLBLT  9715>>CALLBLT  9873>>ASSIGN   9876>>CALLBLT  9876>>CALLBLT  9877>>ASSIGN
      9897>>ASSIGN   9942>>IF       9945>>ASSIGN   9946>>CALLBLT  9946>>CALLBLT  9947>>ASSIGN
AD_OFPT$
      8858**DCL      9032--IMP-PTR  9178<<ASSIGN   9179>>ASSIGN   9396>>ASSIGN   9397>>ASSIGN   9952>>CALL
AD_PFPT$
      8857**DCL      8956--IMP-PTR  9177<<ASSIGN   9178>>ASSIGN   9391>>ASSIGN   9392>>ASSIGN   9392>>ASSIGN
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:214  
      9393>>ASSIGN   9394>>ASSIGN  10254>>CALL
AD_RFPT$
      8855**DCL      8890--IMP-PTR  9175<<ASSIGN   9176>>ASSIGN   9381>>ASSIGN   9382>>ASSIGN   9382>>ASSIGN
      9383>>ASSIGN   9384>>ASSIGN   9385>>ASSIGN  10217>>ASSIGN  10218>>CALL    10288>>ASSIGN  10289>>CALL
AD_RSLT$
      8862**DCL      9103--IMP-PTR  9182<<ASSIGN   9184>>ASSIGN   9187>>ASSIGN   9220>>ASSIGN   9221>>ASSIGN
      9280>>CALL     9280>>CALL     9285>>IF       9287>>ASSIGN   9288>>IF       9290>>ASSIGN   9292>>IF
      9306>>ASSIGN   9307>>ASSIGN   9310>>IF       9324>>ASSIGN   9325>>ASSIGN   9420>>ASSIGN   9423>>ASSIGN
      9424>>ASSIGN   9427>>ASSIGN   9552>>ASSIGN   9556>>ASSIGN   9639>>ASSIGN   9673>>ASSIGN   9679>>ASSIGN
      9722>>ASSIGN   9728>>ASSIGN   9796>>IF       9828>>ASSIGN  10073>>IF      10073>>IF      10073>>IF
     10125>>IF      10125>>IF      10125>>IF      10145>>IF      10153>>ASSIGN  10154>>ASSIGN  10160>>IF
     10167>>ASSIGN  10168>>ASSIGN  10173>>ASSIGN  10173>>ASSIGN  10174>>IF      10180>>IF      10182>>ASSIGN
     10265>>ASSIGN  10308>>ASSIGN
AD_TBUF$
      8859**DCL      9076--IMP-PTR  9179<<ASSIGN   9180>>ASSIGN   9384>>ASSIGN   9689>>ASSIGN   9734>>CALLBLT
      9736>>IF       9750>>CALLBLT  9836>>ASSIGN   9851>>ASSIGN   9906>>ASSIGN   9958>>ASSIGN   9959>>CALLBLT
      9965>>IF       9968>>CALLBLT 10079>>ASSIGN  10083>>CALLBLT 10091>>CALLBLT 10216>>ASSIGN  10287>>ASSIGN
AD_WFPT$
      8856**DCL      8930--IMP-PTR  9176<<ASSIGN   9177>>ASSIGN   9387>>ASSIGN   9388>>ASSIGN   9388>>ASSIGN
      9389>>ASSIGN  10143>>ASSIGN  10149>>ASSIGN  10150>>CALL    10164>>ASSIGN  10165>>CALL
B$BUFFER
      9161**DCL      9226<<ASSIGN  10079<<ASSIGN  10089<<ASSIGN  10091<<CALLBLT
B$DO.ECCINFO
      7238**DCL      7239--REDEF
B$JIT.CPFLAGS1.SLEAZE
      6718**DCL      6718--REDEF
B$JIT.DCB$
      6792**DCL      9195<<ASSIGN   9300<<ASSIGN   9318<<ASSIGN   9449<<ASSIGN   9534<<ASSIGN   9951<<ASSIGN
B$JIT.ERR
      6624**DCL      9307>>ASSIGN   9325>>ASSIGN   9433<<ASSIGN  10154>>ASSIGN  10168>>ASSIGN
B$JIT.ERR.CODE
      6625**DCL      9439<<ASSIGN  10223>>IF      10231>>IF      10259>>IF      10294>>IF      10300>>IF
B$JIT.ERR.FCG
      6624**DCL      9436<<ASSIGN
B$JIT.ERR.MID
      6625**DCL      6625--REDEF    9437<<ASSIGN
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:215  
B$JIT.ERR.MON
      6625**DCL      9438<<ASSIGN
B$JIT.ERR.SEV
      6625**DCL      9440<<ASSIGN
B$JIT.JRESPEAK
      6786**DCL      6787--REDEF
B$JIT.LANG
      6760**DCL      9202>>IF       9202>>IF       9205>>ASSIGN
B$JIT.ORIGINATOR_PORT.FROM_CR
      6895**DCL      6895--REDEF    6896--REDEF
B$JIT.PNR
      6799**DCL      6799--REDEF
B$JIT.TSLINE
      6893**DCL      6894--REDEF
B$JIT$
      8771**DCL      6619--IMP-PTR  9195>>ASSIGN   9202>>IF       9202>>IF       9205>>ASSIGN   9300>>ASSIGN
      9307>>ASSIGN   9318>>ASSIGN   9325>>ASSIGN   9433>>ASSIGN   9436>>ASSIGN   9437>>ASSIGN   9438>>ASSIGN
      9439>>ASSIGN   9440>>ASSIGN   9449>>ASSIGN   9534>>ASSIGN   9951>>ASSIGN  10154>>ASSIGN  10168>>ASSIGN
     10223>>IF      10231>>IF      10259>>IF      10294>>IF      10300>>IF
B$PS0$
      8774**DCL      9189>>ASSIGN   9208>>IF       9208>>IF       9211>>ASSIGN   9269>>IF       9280>>CALL
      9280>>CALL     9292>>IF       9292>>IF       9297>>IF       9299>>ASSIGN   9300>>ASSIGN   9303>>IF
      9310>>IF       9310>>IF       9315>>IF       9317>>ASSIGN   9318>>ASSIGN   9321>>IF       9416>>IF
      9569>>IF       9572>>IF       9572>>IF       9600>>IF       9600>>IF       9622>>IF       9622>>IF
      9651>>IF       9670>>IF       9701>>IF       9719>>IF       9779>>IF       9798>>IF       9798>>IF
      9809>>IF       9865>>IF       9928>>IF       9928>>IF       9928>>IF      10073>>IF      10073>>IF
     10125>>IF      10125>>IF      10145>>IF      10149>>ASSIGN  10160>>IF      10164>>ASSIGN
B$PS1$
      8775**DCL      9254>>ASSIGN   9259>>ASSIGN   9259>>ASSIGN
B$PS2$
      8776**DCL      9229>>ASSIGN   9237>>ASSIGN   9237>>ASSIGN
B$PS3$
      8777**DCL      9215>>ASSIGN
B$PS4$
      8778**DCL      9338>>IF       9341>>IF       9347>>IF       9347>>IF       9350>>CALLBLT  9350>>CALLBLT
      9351>>IF       9515>>CALLBLT  9515>>CALLBLT  9517>>ASSIGN
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:216  
B$PS5$
      8779**DCL      9359>>IF       9362>>ASSIGN
B$PS6$
      8780**DCL      9368>>ASSIGN
B$PS7$
      8781**DCL      9427>>ASSIGN   9631>>ASSIGN   9632>>ASSIGN
B$RESULTS
      9141**DCL      9427<<ASSIGN
B$RESULTS.CODEUSED.LEN
      9154**DCL      9631>>ASSIGN
B$RESULTS.CODEUSED.TEXT
      9155**DCL      9632>>ASSIGN
B$SR_NON_DEC$
      8785**DCL      8786--IMP-PTR  9734>>CALLBLT
B$U.ASYNCH
      7175**DCL     10136>>IF
B$U.MISC
      7217**DCL      7218--REDEF
B$USER.MISC
      7293**DCL      7294--REDEF
B$XL_UPPER$
      8789**DCL      8790--IMP-PTR  9520>>CALLBLT  9666>>CALLBLT  9715>>CALLBLT  9823>>CALLBLT  9894>>CALLBLT
BAD_KEY
      9234**LABEL    9258--GOTO
BAD_NAME IN PROCEDURE LIST_PROCS
      9962**LABEL    9959--CALLALT
BAD_OUTDCB1
      9305**LABEL    9302--CALLALT
BAD_OUTDCB2
      9323**LABEL    9320--CALLALT
BUF$
      8815**DCL      9215<<ASSIGN   9226>>ASSIGN  10079>>ASSIGN  10089>>ASSIGN  10091>>CALLBLT 10143>>ASSIGN
     10184<<ASSIGN  10184>>ASSIGN
BUFFER_HELP
     10066**PROC     9411--CALL     9792--CALL     9854--CALL     9907--CALL     9969--CALL
BUFFER_HELP_ALT IN PROCEDURE BUFFER_HELP
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:217  
     10098**LABEL   10081--CALLALT 10087--CALLALT 10094--CALLALT
BUFLEN
      8811**DCL      9214<>CALL     9216>>ASSIGN
BUF_ERR
      9220**LABEL    9214--CALLALT
CASE_TRANS_OK
      8814**DCL      9653<<ASSIGN   9655<<ASSIGN   9663>>IF       9667<<ASSIGN   9703<<ASSIGN   9712>>IF
      9716<<ASSIGN   9811<<ASSIGN   9813<<ASSIGN   9820>>IF       9824<<ASSIGN   9867<<ASSIGN   9869<<ASSIGN
      9891>>IF       9895<<ASSIGN
CHAR$8
      9162**DCL      9359>>IF       9362>>ASSIGN   9368>>ASSIGN
COLUMN
      8821**DCL      9186<<ASSIGN   9409>>IF      10084>>IF      10088<<ASSIGN  10091>>CALLBLT 10092<<ASSIGN
     10092>>ASSIGN
CONV_UBIN
      8852**DCL      9750<<CALLBLT  9753>>IF       9756>>CALLBLT
C_COUNT
      8848**DCL      9416>>IF       9633<<CALLBLT  9635>>IF       9642>>ASSIGN   9643>>ASSIGN   9694>>ASSIGN
      9695>>ASSIGN   9840>>ASSIGN   9841>>ASSIGN   9906>>ASSIGN   9910>>ASSIGN  10328<<CALLBLT 10330>>IF
     10333>>ASSIGN  10338<<CALLBLT 10339>>IF      10342>>ASSIGN  10347<<ASSIGN  10348>>ASSIGN
DB_ERROR IN PROCEDURE HELP_TEXT
      9739**LABEL    9755--GOTO
DFLT_STOPIC IN PROCEDURE HELP_TEXT
      9763**LABEL    9723--GOTO
DFLT_TOPIC IN PROCEDURE HELP_TEXT
      9771**LABEL    9674--GOTO
DIN_ERR IN PROCEDURE READKEY
     10303**LABEL   10233--GOTO
DRIB_ALT
      9323**LABEL    9331--CALLALT
EMH_UC_XLATE_TBL
      8790**DCL      9520>>CALLBLT  9666>>CALLBLT  9715>>CALLBLT  9823>>CALLBLT  9894>>CALLBLT
ENDKEY.LEN
      8836**DCL      9609<<ASSIGN   9777<<ASSIGN   9781>>CALLBLT  9877<<ASSIGN   9947<<ASSIGN
ENDKEY.TEXT
      8837**DCL      8838--REDEF    8839--REDEF    9607<<CALLBLT  9775<<CALLBLT  9781<<CALLBLT  9789>>DOWHILE
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:218  
      9876<<CALLBLT  9901>>DOWHILE  9946<<CALLBLT  9954>>IF
ERROR
      8820**DCL      9185<<ASSIGN   9222<<ASSIGN   9234<<ASSIGN   9244<<ASSIGN   9344<<ASSIGN   9431>>IF
      9439>>ASSIGN   9557<<ASSIGN   9566<<ASSIGN   9576<<ASSIGN   9604<<ASSIGN   9628<<ASSIGN   9638<<ASSIGN
      9678<<ASSIGN   9727<<ASSIGN   9739<<ASSIGN   9801<<ASSIGN   9803<<ASSIGN   9827<<ASSIGN   9933<<ASSIGN
      9962<<ASSIGN  10139<<ASSIGN  10177<<ASSIGN  10264<<ASSIGN  10303<<ASSIGN  10307<<ASSIGN
EVAL_KEY IN PROCEDURE READKEY
     10328**LABEL   10237--GOTO
F$DCB.ACCT
       160**DCL      9362<<ASSIGN   9364<<ASSIGN   9518>>IF
F$DCB.ACS
       167**DCL      9531<<ASSIGN
F$DCB.ACTPOS
       175**DCL       175--REDEF
F$DCB.AMFLG
       179**DCL      9533<<ASSIGN
F$DCB.ARS
       150**DCL       150--REDEF    9688>>ASSIGN   9835>>ASSIGN
F$DCB.ASN
       165**DCL      9530<<ASSIGN
F$DCB.ATTR
       168**DCL       169--REDEF
F$DCB.BORROW
       183**DCL       183--REDEF     183--REDEF     183--REDEF
F$DCB.DCBNAME.L
       197**DCL       197--IMP-SIZ
F$DCB.EOMCHAR
       154**DCL       154--REDEF
F$DCB.FCD
       163**DCL      9192>>IF       9292>>IF       9303>>IF       9310>>IF       9321>>IF       9446>>IF
      9542>>IF
F$DCB.FLDID
       178**DCL       178--REDEF
F$DCB.FORM$
       172**DCL       172--REDEF
F$DCB.FSECT
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:219  
       188**DCL       188--REDEF
F$DCB.FSN
       165**DCL       165--REDEF     165--REDEF     166--REDEF
F$DCB.FUN
       164**DCL      9297>>IF       9299<<ASSIGN   9315>>IF       9317<<ASSIGN   9529<<ASSIGN
F$DCB.HEADER$
       171**DCL       171--REDEF
F$DCB.IXTNSIZE
       169**DCL       169--REDEF
F$DCB.LASTSTA$
       159**DCL       159--REDEF
F$DCB.LVL
       184**DCL       184--REDEF
F$DCB.NAME.C
       159**DCL       159--REDEF    9515<<CALLBLT  9520<<CALLBLT  9520>>CALLBLT  9524<<CALLBLT  9550<<CALLBLT
      9938<<CALLBLT  9954>>IF       9958>>ASSIGN
F$DCB.NAME.L
       159**DCL      9517<<ASSIGN   9524>>CALLBLT  9526<<ASSIGN   9526>>ASSIGN   9549<<ASSIGN   9549>>ASSIGN
      9550>>CALLBLT  9940<<ASSIGN   9954>>IF       9959>>CALLBLT
F$DCB.NOEOF
       180**DCL       180--REDEF
F$DCB.NRECS
       170**DCL       170--REDEF
F$DCB.NRECX
       189**DCL       189--REDEF
F$DCB.OHDR
       181**DCL       181--REDEF
F$DCB.ORG
       164**DCL       164--REDEF    9564>>IF
F$DCB.PASS
       160**DCL      9368<<ASSIGN   9370<<ASSIGN
F$DCB.PRECNO
       187**DCL       187--REDEF
F$DCB.PSN
       160**DCL      9376<<ASSIGN
F$DCB.RCSZ
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:220  
       192**DCL       192--REDEF
F$DCB.RES
       160**DCL       160--REDEF    9532<<ASSIGN
F$DCB.SETX
       172**DCL       172--REDEF
F$DCB.TAB$
       171**DCL       172--REDEF
F$DCB.TDA
       186**DCL       186--REDEF
F$DCB.WSN
       161**DCL       161--REDEF
F$DCB.WSR
       167**DCL      9538<<ASSIGN   9562<<ASSIGN   9941<<ASSIGN
FIND_SUBTOPIC IN PROCEDURE HELP_TEXT
      9698**LABEL    9690--GOTO
FIN_P_LIST IN PROCEDURE LIST_PROCS
      9976**LABEL    9953--CALLALT  9957--GOTO
FMD$GBUF
       141**DCL-ENT  9173--CALL
FMD$RBUF
       142**DCL-ENT  9444--CALL
FMF$ICORRES
       126**DCL-ENT  9280--CALL
FMM$DFLOPN
       128**DCL-ENT  9301--CALL     9319--CALL
FMM$DFLOPNSYS
       127**DCL-ENT  9540--CALL
FMM$SCRUB
       130**DCL-ENT  9199--CALL
FMN$OPNF
       129**DCL-ENT  9952--CALL
FMO$GETDOMAIN
       139**DCL-ENT  9537--CALL
FMP$CLSJ
       131**DCL-ENT  9196--CALL     9450--CALL
FPT$HELP_V.ALL
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:221  
      9127**DCL      9572>>IF       9600>>IF       9622>>IF       9779>>IF       9798>>IF       9928>>IF
FPT$HELP_V.LANG
      9126**DCL      9208>>IF       9208>>IF       9211>>ASSIGN
FPT$HELP_V.LIST
      9127**DCL      9269>>IF       9416>>IF       9569>>IF       9928>>IF
FPT$HELP_V.MORE
      9127**DCL      9572>>IF       9600>>IF       9622>>IF       9798>>IF       9928>>IF
FPT$HELP_V.OUTDCB1
      9126**DCL      9280<>CALL     9292>>IF       9292--IF       9297--IF       9299--ASSIGN   9300--ASSIGN
      9303--IF      10073>>IF      10125>>IF      10145>>IF      10149>>ASSIGN
FPT$HELP_V.OUTDCB2
      9126**DCL      9280<>CALL     9310>>IF       9310--IF       9315--IF       9317--ASSIGN   9318--ASSIGN
      9321--IF      10073>>IF      10125>>IF      10160>>IF      10164>>ASSIGN
FPT$HELP_V.RANGE
      9127**DCL      9189>>ASSIGN
FPT$HELP_V.SUBSTOPIC
      9127**DCL      9719>>IF
FPT$HELP_V.SUBTOPIC
      9126**DCL      9670>>IF
FPT$HELP_V.XLATEKEY
      9126**DCL      9651>>IF       9701>>IF       9809>>IF       9865>>IF
FPT_OPEN
      9032**DCL      9179--ASSIGN   9396<<ASSIGN   9952<>CALL
FPT_OPEN.ACSVEH_
      9034**DCL      9035--REDEF
FPT_OPEN.ALTKEYS_
      9040**DCL      9041--REDEF    9041--REDEF
FPT_OPEN.HDR_
      9039**DCL      9040--REDEF
FPT_OPEN.TAB_
      9038**DCL      9039--REDEF
FPT_OPEN.UHL_
      9032**DCL      9033--REDEF    9033--REDEF
FPT_OPEN.V.DCB#
      9041**DCL      9397<<ASSIGN
FPT_OPEN.V.FSN#
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:222  
      9072**DCL      9072--REDEF    9072--REDEF
FPT_OPEN.WSN_
      9038**DCL      9038--REDEF
FPT_PREC
      8956**DCL      9178--ASSIGN   9391<<ASSIGN  10254<>CALL
FPT_PREC.KEY_
      8956**DCL      9394<<ASSIGN
FPT_PREC.V
      8958**DCL      9392--ASSIGN
FPT_PREC.V.DCB#
      8958**DCL      9393<<ASSIGN
FPT_PREC.V_
      8956**DCL      9392<<ASSIGN
FPT_READ
      8890**DCL      9176--ASSIGN   9381<<ASSIGN  10218<>CALL    10289<>CALL
FPT_READ.BUF_
      8892**DCL      9384<<ASSIGN
FPT_READ.KEY_
      8890**DCL      9385<<ASSIGN
FPT_READ.STATION_
      8893**DCL      8894--REDEF
FPT_READ.V
      8894**DCL      9382--ASSIGN
FPT_READ.V.DCB#
      8894**DCL      9383<<ASSIGN
FPT_READ.V.DVBYTE.REREAD#
      8905**DCL      8905--REDEF
FPT_READ.V.INDX#
      8903**DCL      8903--REDEF
FPT_READ.V.KEYS#
      8895**DCL     10217<<ASSIGN  10288<<ASSIGN
FPT_READ.V_
      8890**DCL      9382<<ASSIGN
FPT_WRITE
      8930**DCL      9177--ASSIGN   9387<<ASSIGN  10150<>CALL    10165<>CALL
FPT_WRITE.BUF_.BOUND
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:223  
      8930**DCL      9389<<ASSIGN
FPT_WRITE.BUF_.BUF$
      8932**DCL     10143<<ASSIGN
FPT_WRITE.STATION_
      8932**DCL      8932--REDEF
FPT_WRITE.V
      8933**DCL      9388--ASSIGN
FPT_WRITE.V.DCB#
      8933**DCL     10149<<ASSIGN  10164<<ASSIGN
FPT_WRITE.V.DVBYTE.VFC#
      8939**DCL      8939--REDEF
FPT_WRITE.V_
      8930**DCL      9388<<ASSIGN
FUNCTION IN PROCEDURE BUFFER_HELP
     10068**DCL     10066--PROC    10071>>DOCASE
HELPTEXT_ABORT IN PROCEDURE HELP_TEXT
      9680**LABEL    9612--CALLALT  9629--GOTO     9640--GOTO     9658--CALLALT  9707--CALLALT  9740--GOTO
      9788--CALLALT  9792--CALLALT  9793--CALLALT
HELP_BAILOUT
      9440**LABEL    9174--CALLALT  9197--CALLALT  9200--CALLALT  9284--CALLALT  9332--CALLALT
HELP_EXIT
      9409**LABEL    9223--GOTO     9235--GOTO     9245--GOTO     9345--GOTO     9403--CALLALT  9405--CALLALT
HELP_RECS
      8810**DCL      9216<<ASSIGN   9217>>IF       9225<<ASSIGN   9225>>ASSIGN  10073>>IF      10125>>IF
     10180>>IF
HELP_TEXT
      9596**PROC     9588--CALL
HELP_W1ERR IN PROCEDURE HELP_WRITE
     10150**LABEL   10150--CALLALT
HELP_W2ERR IN PROCEDURE HELP_WRITE
     10167**LABEL   10165--CALLALT
HELP_WRITE IN PROCEDURE BUFFER_HELP
     10121**PROC    10081--CALL    10087--CALL    10094--CALL
HFF$DSIZ
       133**DCL-ENT  9214--CALL     9228--CALL     9253--CALL
HFF$NILERASE
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:224  
       132**DCL-ENT  9337--CALL     9358--CALL     9367--CALL     9373--CALL     9414--CALL     9626--CALL
HFF$TRAPALT
       134**DCL-ENT  9174--CALL     9197--CALL     9200--CALL     9284--CALL     9302--CALL     9320--CALL
      9332--CALL     9541--CALL     9953--CALL    10156--CALL    10170--CALL    10219--CALL    10222--CALL
     10255--CALL    10258--CALL    10290--CALL    10293--CALL
HIGH_CHAR
      8765**DCL      9775>>CALLBLT  9781>>CALLBLT  9876>>CALLBLT
HIN_ERR IN PROCEDURE READKEY
     10307**LABEL   10219--CALLALT 10222--CALLALT 10235--GOTO    10255--CALLALT 10258--CALLALT 10290--CALLALT
     10293--CALLALT
I
      8819**DCL      9241<<CALLBLT  9242>>IF       9263<<CALLBLT  9264>>IF       9266>>IF       9350<<CALLBLT
      9351>>IF       9537<>CALL     9538>>ASSIGN   9959<<CALLBLT  9965>>IF       9968>>CALLBLT
IGNORE_W_ALT
      9414**LABEL    9411--CALLALT
ILLWILD
      9244**LABEL    9265--GOTO     9271--GOTO     9352--GOTO
INIT_OPEN
      8714**DCL      9396>>ASSIGN
INIT_OPEN.ACSVEH_
      8716**DCL      8717--REDEF
INIT_OPEN.ALTKEYS_
      8722**DCL      8723--REDEF    8723--REDEF
INIT_OPEN.HDR_
      8721**DCL      8722--REDEF
INIT_OPEN.TAB_
      8720**DCL      8721--REDEF
INIT_OPEN.UHL_
      8714**DCL      8715--REDEF    8715--REDEF
INIT_OPEN.V
      8723**DCL      8714--DCLINIT
INIT_OPEN.V.FSN#
      8754**DCL      8754--REDEF    8754--REDEF
INIT_OPEN.WSN_
      8720**DCL      8720--REDEF
INIT_PRECFPT
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:225  
      8630**DCL      9391>>ASSIGN
INIT_PRECFPT.V
      8632**DCL      8630--DCLINIT
INIT_RFPT
      8562**DCL      9381>>ASSIGN
INIT_RFPT.STATION_
      8565**DCL      8566--REDEF
INIT_RFPT.V
      8566**DCL      8562--DCLINIT
INIT_RFPT.V.DVBYTE.REREAD#
      8577**DCL      8577--REDEF
INIT_RFPT.V.INDX#
      8575**DCL      8575--REDEF
INIT_WFPT
      8602**DCL      9387>>ASSIGN
INIT_WFPT.STATION_
      8604**DCL      8604--REDEF
INIT_WFPT.V
      8605**DCL      8602--DCLINIT
INIT_WFPT.V.DVBYTE.VFC#
      8611**DCL      8611--REDEF
IN_ERR IN PROCEDURE READKEY
     10308**LABEL   10304--GOTO
KEY1
      9078**DCL      9181--ASSIGN   9873>>ASSIGN   9886>>ASSIGN   9897>>ASSIGN   9945>>ASSIGN
KEY1.LEN
      9079**DCL      9254<<ASSIGN   9255>>IF       9255>>IF       9264>>IF       9266>>IF       9275<<ASSIGN
      9416>>IF       9579>>IF       9610>>IF       9615>>ASSIGN   9643<<ASSIGN   9648>>IF       9656>>ASSIGN
      9688<<ASSIGN   9689>>ASSIGN   9695<<ASSIGN   9704>>CALLBLT  9706>>ASSIGN   9756>>CALLBLT  9758>>ASSIGN
      9763>>CALLBLT  9765>>ASSIGN   9814>>ASSIGN   9835<<ASSIGN   9836>>ASSIGN   9841<<ASSIGN   9844>>CALLBLT
      9847>>ASSIGN   9851>>ASSIGN   9851>>ASSIGN   9872<<ASSIGN   9872>>ASSIGN   9879>>IF       9882<<ASSIGN
      9937<<ASSIGN   9937>>ASSIGN   9938>>CALLBLT  9940>>ASSIGN
KEY1.TEXT
      9080**DCL      9081--REDEF    9082--REDEF    9259<<ASSIGN   9260>>IF       9263>>CALLBLT  9276<<ASSIGN
      9416>>IF       9616>>ASSIGN   9642<<ASSIGN   9657>>ASSIGN   9666<<CALLBLT  9666>>CALLBLT  9689<<ASSIGN
      9694<<ASSIGN   9704>>CALLBLT  9756>>CALLBLT  9763>>CALLBLT  9815>>ASSIGN   9823<<CALLBLT  9823>>CALLBLT
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:226  
      9836<<ASSIGN   9840<<ASSIGN   9844>>CALLBLT  9883<<ASSIGN   9894<<CALLBLT  9894>>CALLBLT  9938>>CALLBLT
KEY2
      9085**DCL      9182--ASSIGN   9873<<ASSIGN   9897<<ASSIGN   9945<<ASSIGN
KEY2.LEN
      9086**DCL      9229<<ASSIGN   9230>>IF       9230>>IF       9242>>IF       9249<<ASSIGN   9269>>IF
      9579>>IF       9607>>CALLBLT  9609>>ASSIGN   9698>>IF       9704>>CALLBLT  9706>>ASSIGN   9876>>CALLBLT
      9877>>ASSIGN   9942>>IF       9946>>CALLBLT  9947>>ASSIGN
KEY2.TEXT
      9087**DCL      9088--REDEF    9089--REDEF    9237<<ASSIGN   9238>>IF       9241>>CALLBLT  9250<<ASSIGN
      9607>>CALLBLT  9704>>CALLBLT  9715<<CALLBLT  9715>>CALLBLT  9876>>CALLBLT  9946>>CALLBLT
LEN
      8812**DCL      9228<>CALL     9230>>IF       9253<>CALL     9255>>IF
LENGTH IN PROCEDURE BUFFER_HELP
     10069**DCL     10083<<CALLBLT 10084>>IF      10091>>CALLBLT 10092>>ASSIGN  10092>>ASSIGN
LIST_MAJOR_TOPICS
      9864**PROC     9585--CALL
LIST_PROCS
      9924**PROC     9405--CALL
LIST_SUB_TOPICS
      9808**PROC     9583--CALL
M$MPRECORD
       137**DCL-ENT 10254--CALL
M$MREAD
       135**DCL-ENT 10218--CALL    10289--CALL
M$MWRITE
       136**DCL-ENT 10150--CALL    10165--CALL
M$STAR$
      8822**DCL      9191<<ASSIGN   9192>>IF       9195>>ASSIGN   9199<>CALL     9362>>ASSIGN   9364>>ASSIGN
      9368>>ASSIGN   9370>>ASSIGN   9376>>ASSIGN   9446>>IF       9449>>ASSIGN   9515>>CALLBLT  9517>>ASSIGN
      9518>>IF       9520>>CALLBLT  9520>>CALLBLT  9524>>CALLBLT  9524>>CALLBLT  9526>>ASSIGN   9526>>ASSIGN
      9529>>ASSIGN   9530>>ASSIGN   9531>>ASSIGN   9532>>ASSIGN   9533>>ASSIGN   9534>>ASSIGN   9538>>ASSIGN
      9542>>IF       9549>>ASSIGN   9549>>ASSIGN   9550>>CALLBLT  9550>>CALLBLT  9562>>ASSIGN   9564>>IF
      9688>>ASSIGN   9835>>ASSIGN   9938>>CALLBLT  9940>>ASSIGN   9941>>ASSIGN   9951>>ASSIGN   9954>>IF
      9954>>IF       9958>>ASSIGN   9959>>CALLBLT
M$STAR_NUM
      8763**DCL      9191--ASSIGN   9383>>ASSIGN   9393>>ASSIGN   9397>>ASSIGN
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:227  
MAKE_END IN PROCEDURE HELP_TEXT
      9775**LABEL    9644--GOTO
NAME_PASSED
      8813**DCL      9353<<ASSIGN   9355<<ASSIGN   9401>>IF
NATIVE_LANG
      8817**DCL      9205<<ASSIGN   9207<<ASSIGN   9211<<ASSIGN   9521>>IF       9524>>CALLBLT  9545>>IF
      9548<<ASSIGN   9965>>IF
NEED_RESULTS IN PROCEDURE HELP_TEXT
      9628**LABEL    9626--CALLALT
NO_KEY1
      9275**LABEL    9253--CALLALT  9262--GOTO
NO_KEY2
      9249**LABEL    9228--CALLALT  9240--GOTO
NO_MATCH IN PROCEDURE ABBREV
     10027**LABEL   10022--GOTO
NO_PROCACCT
      9364**LABEL    9358--CALLALT  9361--GOTO
NO_PROCNAME
      9355**LABEL    9337--CALLALT  9340--GOTO     9349--GOTO
NO_PROCPASS
      9370**LABEL    9367--CALLALT
NO_PROCPSN
      9376**LABEL    9373--CALLALT
NO_REC_LEFT IN PROCEDURE READKEY
     10296**LABEL   10227--GOTO    10261--GOTO
NO_RESULTS
      9427**LABEL    9414--CALLALT
PL_ABORT IN PROCEDURE LIST_PROCS
      9971**LABEL    9969--CALLALT
POOLBUF$
      8854**DCL      9173<>CALL     9175>>ASSIGN   9444<>CALL
POSITION
      8833**DCL     10333<<ASSIGN  10342<<ASSIGN  10348<<ASSIGN
PREC_ALT IN PROCEDURE READKEY
     10255**LABEL   10254--CALLALT
RANGE
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:228  
      8824**DCL      9189<<ASSIGN   9579>>IF       9597>>IF       9942>>IF
RDKY_ALT IN PROCEDURE READKEY
     10219**LABEL   10218--CALLALT
READKEY
     10214**PROC     9788--CALL     9848--CALL     9887--CALL     9911--CALL    10009--CALL
READSEQ IN PROCEDURE READKEY
     10285**ENTRY    9612--CALL     9793--CALL     9855--CALL     9914--CALL
READ_ALT IN PROCEDURE READKEY
     10290**LABEL   10289--CALLALT
READ_BACK IN PROCEDURE READKEY
     10252**ENTRY   10019--CALL
RECORD_TYPE
      8818**DCL      9416>>IF       9685>>IF       9790>>IF       9832>>IF       9849>>DOWHILE  9903>>IF
     10334<<ASSIGN  10343<<ASSIGN  10349<<ASSIGN
RESULTS
      9103**DCL      9184<<ASSIGN   9427>>ASSIGN
RESULTS.ALTMSG
      9108**DCL      9673<<ASSIGN   9722<<ASSIGN
RESULTS.BADCALL
      9107**DCL      9221<<ASSIGN
RESULTS.BUFERR
      9110**DCL      9220<<ASSIGN
RESULTS.CODEUSED
      9116**DCL      9420<<ASSIGN
RESULTS.CODEUSED.LEN
      9116**DCL      9423<<ASSIGN
RESULTS.CODEUSED.TEXT
      9117**DCL      9424<<ASSIGN
RESULTS.ERRCODE1
      9112**DCL      9280<>CALL     9307<<ASSIGN  10154<<ASSIGN
RESULTS.ERRCODE1.ERR#
      9113**DCL      9285>>IF
RESULTS.ERRCODE2
      9114**DCL      9280<>CALL     9325<<ASSIGN  10168<<ASSIGN
RESULTS.ERRCODE2.ERR#
      9115**DCL      9288>>IF
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:229  
RESULTS.INERR
      9110**DCL     10265<<ASSIGN  10308<<ASSIGN
RESULTS.MSGCOMP
      9108**DCL      9187<<ASSIGN  10182<<ASSIGN
RESULTS.NNATIVE
      9109**DCL      9552<<ASSIGN
RESULTS.NOFILE
      9107**DCL      9556<<ASSIGN
RESULTS.NOMSG
      9107**DCL      9639<<ASSIGN   9679<<ASSIGN   9728<<ASSIGN   9828<<ASSIGN
RESULTS.OUTERR1
      9109**DCL      9287<<ASSIGN   9292>>IF       9306<<ASSIGN  10073>>IF      10125>>IF      10145>>IF
     10153<<ASSIGN
RESULTS.OUTERR2
      9109**DCL      9290<<ASSIGN   9310>>IF       9324<<ASSIGN  10073>>IF      10125>>IF      10160>>IF
     10167<<ASSIGN
RESULTS.RECCNT
      9111**DCL      9796>>IF      10073>>IF      10125>>IF      10173<<ASSIGN  10173>>ASSIGN  10174>>IF
     10180>>IF
RETURNKEY
      8827**DCL      9385--ASSIGN   9394--ASSIGN   9886<<ASSIGN
RETURNKEY.LEN
      8828**DCL      9423>>ASSIGN   9615<<ASSIGN   9631<<ASSIGN   9635>>IF       9659>>IF       9708>>IF
      9758<<ASSIGN   9765<<ASSIGN   9772<<ASSIGN   9775>>CALLBLT  9777>>ASSIGN   9789>>DOWHILE  9817>>IF
      9847<<ASSIGN   9849>>DOWHILE  9851>>ASSIGN   9888>>IF       9901>>DOWHILE  9909<<ASSIGN   9909>>ASSIGN
     10007<<ASSIGN  10010>>IF      10017<<ASSIGN  10020>>IF      10027<<ASSIGN  10225>>IF      10297<<ASSIGN
     10330>>IF      10339>>IF      10347>>ASSIGN
RETURNKEY.TEXT
      8829**DCL      8830--REDEF    8831--REDEF    9416>>IF       9424>>ASSIGN   9616<<ASSIGN   9632<<ASSIGN
      9633>>CALLBLT  9642>>ASSIGN   9694>>ASSIGN   9756<<CALLBLT  9763<<CALLBLT  9771<<CALLBLT  9775>>CALLBLT
      9789>>DOWHILE  9840>>ASSIGN   9844<<CALLBLT  9851>>ASSIGN   9901>>DOWHILE  9906>>ASSIGN  10008<<ASSIGN
     10013>>IF      10018<<ASSIGN  10023>>IF      10328>>CALLBLT 10338>>CALLBLT
RETURNKEY.TUBIN
      8831**DCL      9910<<ASSIGN
R_SEQN IN PROCEDURE READKEY
     10287**LABEL   10229--GOTO    10269--GOTO
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:230  
S$CU$
      8772**DCL     10136>>IF
SEARCH_DONE IN PROCEDURE HELP_TEXT
      9749**LABEL    9734--CALLALT
SEARCH_IT IN PROCEDURE HELP_TEXT
      9734**LABEL    9746--GOTO
SKIP_PUT IN PROCEDURE BUFFER_HELP
     10081**LABEL   10078--GOTO
SPECIFIC_ABORT IN PROCEDURE SPECIFIC_FILE
      9583**LABEL    9541--CALLALT  9567--GOTO     9577--GOTO     9583--CALLALT  9585--CALLALT  9588--CALLALT
SPECIFIC_FILE
      9503**PROC     9403--CALL
SRCH_IDX
      8849**DCL      9734<<CALLBLT  9736>>IF       9742>>IF       9745>>ASSIGN   9750>>CALLBLT
SRCH_START
      8851**DCL      9733<<ASSIGN   9734>>CALLBLT  9742>>IF       9745<<ASSIGN   9750>>CALLBLT  9750>>CALLBLT
SRCH_TBL
      8786**DCL      9734>>CALLBLT
SRCH_VAL
      8850**DCL      9734<<CALLBLT
TEXT
      9076**DCL      9180--ASSIGN   9384--ASSIGN   9689>>ASSIGN   9734>>CALLBLT  9736>>IF       9750>>CALLBLT
      9836>>ASSIGN   9851<<ASSIGN   9906<<ASSIGN   9958<<ASSIGN   9959>>CALLBLT  9965>>IF       9968<<CALLBLT
     10079>>ASSIGN  10083>>CALLBLT 10091>>CALLBLT 10216<<ASSIGN  10287<<ASSIGN
TEXT$C.C
      9159**DCL      9160--IMP-SIZ  9229>>ASSIGN   9237>>ASSIGN   9254>>ASSIGN   9259>>ASSIGN   9338>>IF
      9341>>IF       9347>>IF       9350>>CALLBLT  9351>>IF       9515>>CALLBLT  9517>>ASSIGN
TEXT$C.TEXT
      9160**DCL      9237>>ASSIGN   9259>>ASSIGN   9347>>IF       9350>>CALLBLT  9515>>CALLBLT
TRYKEY.LEN
      8843**DCL      9656<<ASSIGN   9706<<ASSIGN   9814<<ASSIGN  10007>>ASSIGN  10013>>IF      10013>>IF
     10023>>IF      10023>>IF
TRYKEY.TEXT
      8844**DCL      8845--REDEF    8846--REDEF    9657<<ASSIGN   9704<<CALLBLT  9815<<ASSIGN  10008>>ASSIGN
     10013>>IF      10023>>IF
TRY_KEY1 IN PROCEDURE HELP_TEXT
PL6.E3A0      #001=EMH$HELP File=EMH$HELP.:E05TSI                                TUE 07/29/97 15:20 Page:231  
      9656**LABEL    9668--GOTO
TRY_KEY1 IN PROCEDURE LIST_MAJOR_TOPICS
      9876**LABEL    9898--GOTO
TRY_KEY1 IN PROCEDURE LIST_SUB_TOPICS
      9814**LABEL    9825--GOTO
TRY_KEY2 IN PROCEDURE HELP_TEXT
      9704**LABEL    9717--GOTO
TRY_PREV IN PROCEDURE ABBREV
     10019**LABEL   10012--GOTO
UMD$CHKOPN
       140**DCL-ENT  9331--CALL
UOPEN_SPEC IN PROCEDURE SPECIFIC_FILE
      9537**LABEL    9553--GOTO
USE_END IN PROCEDURE HELP_TEXT
      9788**LABEL    9618--GOTO
WILDCARDING
      8823**DCL      9188<<ASSIGN   9268<<ASSIGN   9579>>IF       9870>>IF       9896>>IF       9936>>IF
ZERO_CHAR
      8764**DCL      9633>>CALLBLT  9756>>CALLBLT  9756>>CALLBLT  9763>>CALLBLT  9763>>CALLBLT  9763>>CALLBLT
      9771>>CALLBLT  9771>>CALLBLT  9771>>CALLBLT 10328>>CALLBLT
