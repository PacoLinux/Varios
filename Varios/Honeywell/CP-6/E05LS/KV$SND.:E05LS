

14:54 JUL 28 '97 KV$SND.:E05SI                                             1    
    1      /*M* KV$SND KV$SND_... (message send) items */
    2      /*T***********************************************************/

14:54 JUL 28 '97 KV$SND.:E05SI                                             2    
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      %EJECT;
    8      /*F* NAME: KV$SND - SND Header.
    9
   10      */
   11      %MACRO KV$SND(NAME = KV$SND, LVL = 1, LAST = ";", STCLASS = BASED,
   12      FNC = ,
   13      HDR(YES='1'B, NO='0'B)='1'B,
   14      VLP(YES='1'B, NO='0'B)='1'B,
   15      VDOVLP_CG_MSGID$ = NIL,
   16      VDOVLP_CG_MSGTYP$ = NIL,
   17      VDOVLP_CG_STA$ = NIL,
   18      VDOVLP_ERR$ = NIL,
   19      VDOVLP_FLDID$ = NIL,
   20      VDOVLP_KEY$ = NIL,
   21      VDOVLP_MRK$ = NIL,
   22      RQSMRK_DLTRCVDAT = '0'B,
   23      RQSMRK_DLTRCVRQS = '0'B,
   24      RQSMRK_ONL = '0'B);
   25      %LSET LISTDIR = '0'B;
   26      %LSET LISTEXP = '1'B;
   27      %LSET LISTCOM = '0'B;
   28      %LSET LISTSUB = '1'B;
   29      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
   30      %IF (STC = 'STA')OR(STC = 'CON')OR(STC = 'EXT');
   31      %LSET INIT = CHARTEXT('INIT');
   32      %LSET ENIT = CHARTEXT('');
   33      %ELSE;
   34      %LSET INIT = CHARTEXT('/*');
   35      %LSET ENIT = CHARTEXT('*/');
   36      %ENDIF;
   37      %LSET SUBLVL=LVL;
   38      %IF LVL = 1;
   39      DCL 1 NAME STCLASS ALIGNED,
14:54 JUL 28 '97 KV$SND.:E05SI                                             3    
   40      %LSET SUBLVL = 2;
   41      %ENDIF;
   42      %IF HDR;
   43      %SUBLVL %CHARTEXT('FNC') UBIN BYTE %INIT(FNC)%ENIT UNAL,
   44      /*K* FNC = value.  Function being requested.
   45      */
   46      %SUBLVL RQSMRK UNAL,
   47      /*K* RQSMRK = group.   If non-zero, we should send a request for a marker to
   48      the distant end, for the purpose declared by the subordinate flags.
   49      If KV$SND_....MRK$ is NIL, and (if this is a KV$SND_RQSMRK)
   50      KV$SND_RQSMRK.VDH_MRK$ is NIL, then the marker data will be automatically
   51      generated.
   52      */
   53      %(SUBLVL+1) %CHARTEXT('DLTRCVDAT') BIT(1) %INIT(RQSMRK_DLTRCVDAT)%ENIT UNAL,
   54      /*K* RQSMRK_DLTRCVDAT = flag.  Set indicates we should send a marker to
   55      delete received (by us) data until the marker is returned by the distant
   56      end.
   57      */
   58      %(SUBLVL+1) %CHARTEXT('DLTRCVRQS') BIT(1) %INIT(RQSMRK_DLTRCVRQS)%ENIT UNAL,
   59      /*K* RQSMRK_DLTRCVRQS = flag.  Set indicates we should send a marker to
   60      delete received (by us) requests until the marker is returned by the distant
   61      end.
   62      */
   63      %(SUBLVL+1) %CHARTEXT('ONL') BIT(1) %INIT(RQSMRK_ONL)%ENIT UNAL,
   64      /*K* RQSMRK_ONL = flag.  Set indicates we should send a marker to
   65      the other end.  We aren't to place any significance on the marker value.
   66      */
   67      %ENDIF; /* HDR */
   68      %IF HDR AND VLP;
   69      %SUBLVL * BIT(5) %INIT('0'B)%ENIT UNAL,
   70      %ENDIF;
   71      %IF VLP;
   72      %SUBLVL VDOVLP,
   73      /* Group containing pointers to all VDOVLPs except the data VLP.
   74      */
   75      %(SUBLVL+1) CG_MSGID$ PTR %INIT(ADDR(VDOVLP_CG_MSGID$))%ENIT,
   76      /*K* VDOVLP_CG_MSGID$ = pointer to the KV$VDOVLP_CG_MSGID being sent.
14:54 JUL 28 '97 KV$SND.:E05SI                                             4    
   77      */
   78      %(SUBLVL+1) CG_MSGTYP$ PTR %INIT(ADDR(VDOVLP_CG_MSGTYP$))%ENIT,
   79      /*K* VDOVLP_CG_MSGTYP$ = pointer to the KV$VDOVLP_CG_MSGTYP being sent.
   80      */
   81      %(SUBLVL+1) CG_STA$ PTR %INIT(ADDR(VDOVLP_CG_STA$))%ENIT,
   82      /*K* VDOVLP_CG_STA$ = pointer to the KV$VDOVLP_CG_STA being sent.
   83      */
   84      %(SUBLVL+1) ERR$ PTR %INIT(ADDR(VDOVLP_ERR$))%ENIT,
   85      /*K* VDOVLP_ERR$ = pointer to the KV$VDOVLP_ERR being sent.
   86      */
   87      %(SUBLVL+1) FLDID$ PTR %INIT(ADDR(VDOVLP_FLDID$))%ENIT,
   88      /*K* VDOVLP_FLDID$ = pointer to the KV$VDOVLP_FLDID being sent.
   89      */
   90      %(SUBLVL+1) KEY$ PTR %INIT(ADDR(VDOVLP_KEY$))%ENIT,
   91      /*K* VDOVLP_KEY$ = pointer to the KV$VDOVLP_KEY being sent.
   92      */
   93      %(SUBLVL+1) MRK$ PTR %INIT(ADDR(VDOVLP_MRK$))%ENIT,
   94      /*K* VDOVLP_MRK$ = pointer to the KV$VDOVLP_MRK being sent.
   95      */
   96      %SUBLVL VDOVLP_ARY(0:6) REDEF VDOVLP PTR LAST
   97      /* VDOVLP array of pointers.  Pointers point to KV$VDOVLP_ structures.
   98      */
   99      %ENDIF;
  100      %MEND;
  101      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             5    
  102      /*F* NAME:  KV$SND_CLSSSN - Close session.
  103      */
  104      %MACRO KV$SND_CLSSSN(NAME = KV$SND_CLSSSN, LVL = 1, LAST = ";", STCLASS = BASED,
  105      VDOVLP_CG_MSGID$ = NIL,
  106      VDOVLP_CG_MSGTYP$ = NIL,
  107      VDOVLP_CG_STA$ = NIL,
  108      VDOVLP_ERR$ = NIL,
  109      VDOVLP_FLDID$ = NIL,
  110      VDOVLP_KEY$ = NIL,
  111      VDOVLP_MRK$ = NIL);
  112      %LSET LISTDIR = '0'B;
  113      %LSET LISTEXP = '1'B;
  114      %LSET LISTCOM = '0'B;
  115      %LSET LISTSUB = '1'B;
  116      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  117      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  118      %LSET INIT = CHARTEXT('INIT');
  119      %LSET ENIT = CHARTEXT('');
  120      %ELSE;
  121      %LSET INIT = CHARTEXT('/*');
  122      %LSET ENIT = CHARTEXT('*/');
  123      %ENDIF;
  124      %IF LVL = 1;
  125      DCL 1 NAME STCLASS ALIGNED,
  126      %ELSE;
  127      %(LVL) NAME,
  128      %ENDIF;
  129      %LSET NXTLVL = LVL+1;
  130      %KV$SND (LVL = NXTLVL, STCLASS = STCLASS, LAST = ",", FNC = %KV_SND_FNC_CLSSSN,
  131      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  132      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  133      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  134      VDOVLP_ERR$ = VDOVLP_ERR$,
  135      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  136      VDOVLP_KEY$ = VDOVLP_KEY$,
  137      VDOVLP_MRK$ = VDOVLP_MRK$);
  138            %(LVL+1) * UBIN %INIT(0)%ENIT LAST
14:54 JUL 28 '97 KV$SND.:E05SI                                             6    
  139      %MEND;
  140      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             7    
  141      /*F* NAME:  KV$SND_CMPDSCSSN - Complete disconnect session.
  142      */
  143      %MACRO KV$SND_CMPDSCSSN(NAME = KV$SND_CMPDSCSSN, LVL = 1, LAST = ";", STCLASS = BASED,
  144      VDOVLP_CG_MSGID$ = NIL,
  145      VDOVLP_CG_MSGTYP$ = NIL,
  146      VDOVLP_CG_STA$ = NIL,
  147      VDOVLP_ERR$ = NIL,
  148      VDOVLP_FLDID$ = NIL,
  149      VDOVLP_KEY$ = NIL,
  150      VDOVLP_MRK$ = NIL);
  151      %LSET LISTDIR = '0'B;
  152      %LSET LISTEXP = '1'B;
  153      %LSET LISTCOM = '0'B;
  154      %LSET LISTSUB = '1'B;
  155      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  156      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  157      %LSET INIT = CHARTEXT('INIT');
  158      %LSET ENIT = CHARTEXT('');
  159      %ELSE;
  160      %LSET INIT = CHARTEXT('/*');
  161      %LSET ENIT = CHARTEXT('*/');
  162      %ENDIF;
  163      %IF LVL = 1;
  164      DCL 1 NAME STCLASS ALIGNED,
  165      %ELSE;
  166      %(LVL) NAME,
  167      %ENDIF;
  168      %LSET NXTLVL = LVL+1;
  169      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, LAST=LAST, FNC=%KV_SND_FNC_CMPDSCSSN,
  170      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  171      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  172      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  173      VDOVLP_ERR$ = VDOVLP_ERR$,
  174      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  175      VDOVLP_KEY$ = VDOVLP_KEY$,
  176      VDOVLP_MRK$ = VDOVLP_MRK$);
  177      %MEND;
14:54 JUL 28 '97 KV$SND.:E05SI                                             8    
  178      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             9    
  179      /*F* NAME:  KV$SND_CNC - Connect.
  180      */
  181      %MACRO KV$SND_CNC(NAME = KV$SND_CNC, LVL = 1, LAST = ";", STCLASS = BASED,
  182      VDOVLP_CG_MSGID$ = NIL,
  183      VDOVLP_CG_MSGTYP$ = NIL,
  184      VDOVLP_CG_STA$ = NIL,
  185      VDOVLP_ERR$ = NIL,
  186      VDOVLP_FLDID$ = NIL,
  187      VDOVLP_KEY$ = NIL,
  188      VDOVLP_MRK$ = NIL,
  189      LGN_ = NIL,
  190      CNCTYP = 0,
  191      LINSPD = 0,
  192      ERR = '0'B,
  193      DSTNTWRSR = ' ');
  194      %LSET LISTDIR = '0'B;
  195      %LSET LISTEXP = '1'B;
  196      %LSET LISTCOM = '0'B;
  197      %LSET LISTSUB = '1'B;
  198      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  199      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  200      %LSET INIT = CHARTEXT('INIT');
  201      %LSET ENIT = CHARTEXT('');
  202      %ELSE;
  203      %LSET INIT = CHARTEXT('/*');
  204      %LSET ENIT = CHARTEXT('*/');
  205      %ENDIF;
  206      %IF LVL = 1;
  207      DCL 1 NAME STCLASS ALIGNED,
  208      %ELSE;
  209      %(LVL) NAME,
  210      %ENDIF;
  211      %LSET NXTLVL = LVL+1;
  212      %KV$SND (LVL = NXTLVL, STCLASS = STCLASS, LAST = ",", FNC = %KV_SND_FNC_CNC,
  213      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  214      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  215      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
14:54 JUL 28 '97 KV$SND.:E05SI                                             10   
  216      VDOVLP_ERR$ = VDOVLP_ERR$,
  217      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  218      VDOVLP_KEY$ = VDOVLP_KEY$,
  219      VDOVLP_MRK$ = VDOVLP_MRK$);
  220            2 %CHARTEXT('ERR') BIT(1) %INIT(ERR)%ENIT,
  221      /*K* ERR = BIT(1).  Specifies that an error occurred attempting to make
  222      a connection.  The error code is presumed to be in KV$STR.ERR.COD. */
  223            2 %CHARTEXT('LGN_') VECTOR %INIT(VECTOR(LGN_))%ENIT,
  224      /*K* LGN_ = vector.  Specifies a logon (string), if any exists. */
  225            2 %CHARTEXT('CNCTYP') UBIN BYTE CALIGNED %INIT(CNCTYP)%ENIT,
  226      /*K* CNCTYP = value.  Specifies the connection type (interactive
  227      terminal, batch terminal, program, etc.).  Values are KV_CNCTYP_...
  228      */
  229            2 %CHARTEXT('LINSPD') UBIN BYTE CALIGNED %INIT(LINSPD)%ENIT,
  230      /*K* LINSPD = line speed, in CP-6 standard (M$LINEATTR) units.
  231      */
  232            %B$TERMINAL_ID (FPTN = SCNENDPNTID, LAST = ",", LVL = 2, ALGN = WALIGNED);
  233      /*K* SCNENDPNTID = group.  Specifies the secondary (network) end-point
  234      ID. Used in identifying what is logging on, and for later
  235      reference to what is logged on.  The items subordinate to this
  236      group are defined by KL_TERMINAL_ID.
  237      */
  238            2 %CHARTEXT('DSTNTWADR'),
  239              3 * BIT(16) %INIT('0'B)%ENIT,
  240              3 LDCTX UBIN(16) %INIT(0)%ENIT,
  241      /*K* DSTNTWADR = RLCID.  Specifies the distant (end) network
  242      address that we're connecting to.
  243      */
  244            2 %CHARTEXT('DSTNTWRSR') CHAR(8) %INIT(DSTNTWRSR)%ENIT LAST
  245      /*K* DSTNTWRSR = CHAR(8).  Specifies the distant (end) network
  246      resource that we're connecting to.
  247      */
  248      %MEND;
  249      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             11   
  250      /*F* NAME:  KV$SND_DAT - Data.
  251      */
  252      %MACRO KV$SND_DAT(NAME = KV$SND_DAT, LVL = 1, LAST = ";", STCLASS = BASED,
  253      VDOVLP_CG_MSGID$ = NIL,
  254      VDOVLP_CG_MSGTYP$ = NIL,
  255      VDOVLP_CG_STA$ = NIL,
  256      VDOVLP_ERR$ = NIL,
  257      VDOVLP_FLDID$ = NIL,
  258      VDOVLP_KEY$ = NIL,
  259      VDOVLP_MRK$ = NIL,
  260      ACTPOS=0,
  261      KONCAT = '0'B,
  262      CTN = '0'B,
  263      DATCTRCHRTYP = 0,
  264      DATMOD = 0,
  265      DATCTRCHR = ' ');
  266      %LSET LISTDIR = '0'B;
  267      %LSET LISTEXP = '1'B;
  268      %LSET LISTCOM = '0'B;
  269      %LSET LISTSUB = '1'B;
  270      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  271      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  272      %LSET INIT = CHARTEXT('INIT');
  273      %LSET ENIT = CHARTEXT('');
  274      %ELSE;
  275      %LSET INIT = CHARTEXT('/*');
  276      %LSET ENIT = CHARTEXT('*/');
  277      %ENDIF;
  278      %IF LVL = 1;
  279      DCL 1 NAME STCLASS ALIGNED,
  280      %ELSE;
  281      %(LVL) NAME,
  282      %ENDIF;
  283      %LSET NXTLVL = LVL+1;
  284      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, FNC=%KV_SND_FNC_DAT, VLP=NO);
  285            %(LVL+1) %CHARTEXT('CTN') BIT(1) %INIT(CTN)%ENIT,
  286      /*K* CTN=continue.  Another block follows this block, and is logically */
14:54 JUL 28 '97 KV$SND.:E05SI                                             12   
  287      /* part of the same group of data. */
  288            %(LVL+1) %CHARTEXT('DATCTRCHRTYP') UBIN(2) %INIT(DATCTRCHRTYP)%ENIT UNAL,
  289      /*K* DATCTRCHRTYP=value.  Specifies the type of control character
  290      (if any) being passed.  Values are KV_DATCTRCHRTYP_...,
  291      specifying, for instance, VFC character, activation character,
  292      or no character passed.
  293      */
  294            %(LVL+1) %CHARTEXT('DATMOD') UBIN(2) %INIT(DATMOD)%ENIT UNAL,
  295      /*K* DATMOD=value.  Specifies the mode of the data:
  296      Binary, transparent, or 'normal' (not binary or transparent).
  297      Values are KV_DATMOD_...
  298      */
  299      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, LAST=",", HDR=NO,
  300      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  301      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  302      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  303      VDOVLP_ERR$ = VDOVLP_ERR$,
  304      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  305      VDOVLP_KEY$ = VDOVLP_KEY$,
  306      VDOVLP_MRK$ = VDOVLP_MRK$);
  307      %LSET LVL1 = LVL+1;
  308      %KV$BFRDSC (NAME = DAT__, LVL = %LVL1, STCLASS = STCLASS, LAST = ",");
  309      /* VDH buffer descriptor to the buffer containing the data.
  310      */
  311            %(LVL+1) %CHARTEXT('DATCTRCHR') CHAR(1) %INIT(DATCTRCHR)%ENIT,
  312      /*K* DATCTRCHR = value.  Specifies the VFC or activation character,
  313      if any.
  314      */
  315            %(LVL+1) %CHARTEXT('KONCAT') BIT(1) UNAL %INIT(KONCAT)%ENIT,
  316      /*K* KONCAT = concatenate.  Used by KVF$SND to implement KV$SSN.REDMLT. */
  317            %(LVL+1) * BIT(7) %INIT('0'B)%ENIT,
  318            %(LVL+1) %CHARTEXT('ACTPOS') SBIN %INIT(ACTPOS)%ENIT LAST
  319      /*K* ACTPOS = value.  Specifies the activation position (as a column number).
  320      Zero indicates activation after the last character.
  321      */
  322      %MEND;
  323      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             13   
  324      /*F* NAME:  KV$SND_DSCSSN - Disconnect session.
  325      */
  326      %MACRO KV$SND_DSCSSN(NAME = KV$SND_DSCSSN, LVL = 1, LAST = ";", STCLASS = BASED,
  327      VDOVLP_CG_MSGID$ = NIL,
  328      VDOVLP_CG_MSGTYP$ = NIL,
  329      VDOVLP_CG_STA$ = NIL,
  330      VDOVLP_ERR$ = NIL,
  331      VDOVLP_FLDID$ = NIL,
  332      VDOVLP_KEY$ = NIL,
  333      VDOVLP_MRK$ = NIL);
  334      %LSET LISTDIR = '0'B;
  335      %LSET LISTEXP = '1'B;
  336      %LSET LISTCOM = '0'B;
  337      %LSET LISTSUB = '1'B;
  338      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  339      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  340      %LSET INIT = CHARTEXT('INIT');
  341      %LSET ENIT = CHARTEXT('');
  342      %ELSE;
  343      %LSET INIT = CHARTEXT('/*');
  344      %LSET ENIT = CHARTEXT('*/');
  345      %ENDIF;
  346      %IF LVL = 1;
  347      DCL 1 NAME STCLASS ALIGNED,
  348      %ELSE;
  349      %(LVL) NAME,
  350      %ENDIF;
  351      %LSET NXTLVL = LVL+1;
  352      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, LAST=LAST, FNC=%KV_SND_FNC_DSCSSN,
  353      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  354      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  355      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  356      VDOVLP_ERR$ = VDOVLP_ERR$,
  357      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  358      VDOVLP_KEY$ = VDOVLP_KEY$,
  359      VDOVLP_MRK$ = VDOVLP_MRK$);
  360      %MEND;
14:54 JUL 28 '97 KV$SND.:E05SI                                             14   
  361      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             15   
  362      /*F* NAME:  KV$SND_EVT - Event.
  363      */
  364      %MACRO KV$SND_EVT(NAME = KV$SND_EVT, LVL = 1, LAST = ";", STCLASS = BASED,
  365      VDOVLP_CG_MSGID$ = NIL,
  366      VDOVLP_CG_MSGTYP$ = NIL,
  367      VDOVLP_CG_STA$ = NIL,
  368      VDOVLP_ERR$ = NIL,
  369      VDOVLP_FLDID$ = NIL,
  370      VDOVLP_KEY$ = NIL,
  371      VDOVLP_MRK$ = NIL,
  372      RQSMRK_DLTRCVDAT (YES = '1'B, NO = '0'B) = '0'B,
  373      RQSMRK_DLTRCVRQS (YES = '1'B, NO = '0'B) = '0'B,
  374      RQSMRK_ONL (YES = '1'B, NO = '0'B) = '0'B,
  375      BRKCNT = 0, EVTTYP (KV_EVTTYP_BRK = %KV_EVTTYP_BRK,
  376       KV_EVTTYP_MNTATN = %KV_EVTTYP_MNTATN) = 0);
  377      %LSET LISTDIR = '0'B;
  378      %LSET LISTEXP = '1'B;
  379      %LSET LISTCOM = '0'B;
  380      %LSET LISTSUB = '1'B;
  381      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  382      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  383      %LSET INIT = CHARTEXT('INIT');
  384      %LSET ENIT = CHARTEXT('');
  385      %ELSE;
  386      %LSET INIT = CHARTEXT('/*');
  387      %LSET ENIT = CHARTEXT('*/');
  388      %ENDIF;
  389      %IF LVL = 1;
  390      DCL 1 NAME STCLASS ALIGNED,
  391      %ELSE;
  392      %(LVL) NAME,
  393      %ENDIF;
  394      %LSET NXTLVL = LVL+1;
  395      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, FNC=%KV_SND_FNC_EVT, VLP=NO,
  396      RQSMRK_DLTRCVDAT = RQSMRK_DLTRCVDAT,
  397      RQSMRK_DLTRCVRQS = RQSMRK_DLTRCVRQS,
  398      RQSMRK_ONL = RQSMRK_ONL);
14:54 JUL 28 '97 KV$SND.:E05SI                                             16   
  399      %(LVL+1) %CHARTEXT('BRKCNT') UBIN(5)UNAL %INIT(BRKCNT)%ENIT,
  400      /*K* BRKCNT - value.  For KV_EVTTYP_BRK, BRKCNT specifies the
  401      contiguous break count.
  402      */
  403      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, LAST=",", HDR=NO,
  404      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  405      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  406      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  407      VDOVLP_ERR$ = VDOVLP_ERR$,
  408      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  409      VDOVLP_KEY$ = VDOVLP_KEY$,
  410      VDOVLP_MRK$ = VDOVLP_MRK$);
  411      %LSET NXTLVL = LVL+1;
  412      %(LVL+1) %CHARTEXT('EVTTYP') UBIN BYTE CALIGNED %INIT(EVTTYP)%ENIT,
  413      %(LVL+1) * UBIN BYTE CALIGNED %INIT(0)%ENIT LAST
  414      /*K* EVTTYP = value.  Specifies the type of event (e.g., break,
  415      monitor attention, etc.).
  416      Values are KV_EVTTYP_...
  417      */
  418      %MEND;
  419      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             17   
  420      /*F* NAME:  KV$SND_MRK - Marker.
  421      */
  422      %MACRO KV$SND_MRK(NAME = KV$SND_MRK, LVL = 1, LAST = ";", STCLASS = BASED,
  423      VDOVLP_CG_MSGID$ = NIL,
  424      VDOVLP_CG_MSGTYP$ = NIL,
  425      VDOVLP_CG_STA$ = NIL,
  426      VDOVLP_ERR$ = NIL,
  427      VDOVLP_FLDID$ = NIL,
  428      VDOVLP_KEY$ = NIL,
  429      VDOVLP_MRK$ = NIL,
  430      VDH_MRK$ = NIL);
  431      %LSET LISTDIR = '0'B;
  432      %LSET LISTEXP = '1'B;
  433      %LSET LISTCOM = '0'B;
  434      %LSET LISTSUB = '1'B;
  435      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  436      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  437      %LSET INIT = CHARTEXT('INIT');
  438      %LSET ENIT = CHARTEXT('');
  439      %ELSE;
  440      %LSET INIT = CHARTEXT('/*');
  441      %LSET ENIT = CHARTEXT('*/');
  442      %ENDIF;
  443      %IF LVL = 1;
  444      DCL 1 NAME STCLASS ALIGNED,
  445      %ELSE;
  446      %(LVL) NAME,
  447      %ENDIF;
  448      %LSET NXTLVL = LVL+1;
  449      %KV$SND (LVL = NXTLVL, STCLASS = STCLASS, LAST = ",", FNC = %KV_SND_FNC_MRK,
  450      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  451      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  452      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  453      VDOVLP_ERR$ = VDOVLP_ERR$,
  454      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  455      VDOVLP_KEY$ = VDOVLP_KEY$,
  456      VDOVLP_MRK$ = VDOVLP_MRK$);
14:54 JUL 28 '97 KV$SND.:E05SI                                             18   
  457            %(LVL+1) %CHARTEXT('VDH_MRK$') PTR %INIT(ADDR(VDH_MRK$))%ENIT LAST
  458      /*K* VDH_MRK$ = pointer to KV$VDH_MRK structure to examine for
  459      arguments.
  460      */
  461      %MEND;
  462      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             19   
  463      /*F* NAME:  KV$SND_OPNSSN - Open session.
  464      */
  465      %MACRO KV$SND_OPNSSN(NAME = KV$SND_OPNSSN, LVL = 1, LAST = ";", STCLASS = BASED,
  466      VDOVLP_CG_MSGID$ = NIL,
  467      VDOVLP_CG_MSGTYP$ = NIL,
  468      VDOVLP_CG_STA$ = NIL,
  469      VDOVLP_ERR$ = NIL,
  470      VDOVLP_FLDID$ = NIL,
  471      VDOVLP_KEY$ = NIL,
  472      VDOVLP_MRK$ = NIL);
  473      %LSET LISTDIR = '0'B;
  474      %LSET LISTEXP = '1'B;
  475      %LSET LISTCOM = '0'B;
  476      %LSET LISTSUB = '1'B;
  477      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  478      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  479      %LSET INIT = CHARTEXT('INIT');
  480      %LSET ENIT = CHARTEXT('');
  481      %ELSE;
  482      %LSET INIT = CHARTEXT('/*');
  483      %LSET ENIT = CHARTEXT('*/');
  484      %ENDIF;
  485      %IF LVL = 1;
  486      DCL 1 NAME STCLASS ALIGNED,
  487      %ELSE;
  488      %(LVL) NAME,
  489      %ENDIF;
  490      %LSET NXTLVL = LVL+1;
  491      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, LAST=LAST, FNC=%KV_SND_FNC_OPNSSN,
  492      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  493      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  494      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  495      VDOVLP_ERR$ = VDOVLP_ERR$,
  496      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  497      VDOVLP_KEY$ = VDOVLP_KEY$,
  498      VDOVLP_MRK$ = VDOVLP_MRK$);
  499      %MEND;
14:54 JUL 28 '97 KV$SND.:E05SI                                             20   
  500      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             21   
  501      /*F* NAME:  KV$SND_PRM - Parameters.
  502      */
  503      %MACRO KV$SND_PRM(NAME = KV$SND_PRM, LVL = 1, LAST = ";", STCLASS = BASED,
  504      VDOVLP_CG_MSGID$ = NIL,
  505      VDOVLP_CG_MSGTYP$ = NIL,
  506      VDOVLP_CG_STA$ = NIL,
  507      VDOVLP_ERR$ = NIL,
  508      VDOVLP_FLDID$ = NIL,
  509      VDOVLP_KEY$ = NIL,
  510      VDOVLP_MRK$ = NIL,
  511      CMPCOD = 0,
  512      CTN = '0'B);
  513      %LSET LISTDIR = '0'B;
  514      %LSET LISTEXP = '1'B;
  515      %LSET LISTCOM = '0'B;
  516      %LSET LISTSUB = '1'B;
  517      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  518      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  519      %LSET INIT = CHARTEXT('INIT');
  520      %LSET ENIT = CHARTEXT('');
  521      %ELSE;
  522      %LSET INIT = CHARTEXT('/*');
  523      %LSET ENIT = CHARTEXT('*/');
  524      %ENDIF;
  525      %IF LVL = 1;
  526      DCL 1 NAME STCLASS ALIGNED,
  527      %ELSE;
  528      %(LVL) NAME,
  529      %ENDIF;
  530      %LSET NXTLVL = LVL+1;
  531      %KV$SND (LVL = NXTLVL, STCLASS = STCLASS, LAST = ",", FNC = %KV_SND_FNC_PRM,
  532      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  533      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  534      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  535      VDOVLP_ERR$ = VDOVLP_ERR$,
  536      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  537      VDOVLP_KEY$ = VDOVLP_KEY$,
14:54 JUL 28 '97 KV$SND.:E05SI                                             22   
  538      VDOVLP_MRK$ = VDOVLP_MRK$);
  539      %LSET LVL1 = LVL+1;
  540      %KV$BFRDSC (NAME = DAT__, LVL = %LVL1, STCLASS = STCLASS, LAST = ",");
  541      /* VDH buffer descriptor to the buffer containing the data.
  542      */
  543            %(LVL+1) %CHARTEXT('CMPCOD') UBIN(8) UNAL %INIT(CMPCOD)%ENIT,
  544      /*K* CMPCOD = completion code.  Values are KV#CMPCOD... */
  545            %(LVL+1) %CHARTEXT('CTN') BIT(1) %INIT(CTN)%ENIT,
  546      /*K* CTN = continue.  Another block follows this block, and is logically */
  547      /* part of the same group of data. */
  548            %(LVL+1) * BIT(7) %INIT('0'B)%ENIT LAST
  549      %MEND;
  550      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             23   
  551      /*F* NAME:  KV$SND_RQSDAT_GNR - Request data, general.
  552      */
  553      %MACRO KV$SND_RQSDAT_GNR(NAME = KV$SND_RQSDAT_GNR, LVL = 1, LAST = ";", STCLASS = BASED,
  554      VDOVLP_CG_MSGID$ = NIL,
  555      VDOVLP_CG_MSGTYP$ = NIL,
  556      VDOVLP_CG_STA$ = NIL,
  557      VDOVLP_ERR$ = NIL,
  558      VDOVLP_FLDID$ = NIL,
  559      VDOVLP_KEY$ = NIL,
  560      VDOVLP_MRK$ = NIL);
  561      %LSET LISTDIR = '0'B;
  562      %LSET LISTEXP = '1'B;
  563      %LSET LISTCOM = '0'B;
  564      %LSET LISTSUB = '1'B;
  565      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  566      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  567      %LSET INIT = CHARTEXT('INIT');
  568      %LSET ENIT = CHARTEXT('');
  569      %ELSE;
  570      %LSET INIT = CHARTEXT('/*');
  571      %LSET ENIT = CHARTEXT('*/');
  572      %ENDIF;
  573      %IF LVL = 1;
  574      DCL 1 NAME STCLASS ALIGNED,
  575      %ELSE;
  576      %(LVL) NAME,
  577      %ENDIF;
  578      %LSET NXTLVL = LVL+1;
  579      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, LAST=LAST, FNC=%KV_SND_FNC_RQSDAT_GNR,
  580      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  581      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  582      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  583      VDOVLP_ERR$ = VDOVLP_ERR$,
  584      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  585      VDOVLP_KEY$ = VDOVLP_KEY$,
  586      VDOVLP_MRK$ = VDOVLP_MRK$);
  587      %MEND;
14:54 JUL 28 '97 KV$SND.:E05SI                                             24   
  588      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             25   
  589      /*F* NAME:  KV$SND_RQSMRK - Request marker.
  590      */
  591      %MACRO KV$SND_RQSMRK(NAME = KV$SND_RQSMRK, LVL = 1, LAST = ";", STCLASS = BASED,
  592      VDOVLP_CG_MSGID$ = NIL,
  593      VDOVLP_CG_MSGTYP$ = NIL,
  594      VDOVLP_CG_STA$ = NIL,
  595      VDOVLP_ERR$ = NIL,
  596      VDOVLP_FLDID$ = NIL,
  597      VDOVLP_KEY$ = NIL,
  598      VDOVLP_MRK$ = NIL,
  599      RQSMRK_DLTRCVDAT (YES = '1'B, NO = '0'B) = '0'B,
  600      RQSMRK_DLTRCVRQS (YES = '1'B, NO = '0'B) = '0'B,
  601      RQSMRK_ONL (YES = '1'B, NO = '0'B) = '0'B);
  602      %LSET LISTDIR = '0'B;
  603      %LSET LISTEXP = '1'B;
  604      %LSET LISTCOM = '0'B;
  605      %LSET LISTSUB = '1'B;
  606      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  607      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  608      %LSET INIT = CHARTEXT('INIT');
  609      %LSET ENIT = CHARTEXT('');
  610      %ELSE;
  611      %LSET INIT = CHARTEXT('/*');
  612      %LSET ENIT = CHARTEXT('*/');
  613      %ENDIF;
  614      %IF LVL = 1;
  615      DCL 1 NAME STCLASS ALIGNED,
  616      %ELSE;
  617      %(LVL) NAME,
  618      %ENDIF;
  619      %LSET NXTLVL = LVL+1;
  620      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, LAST=LAST, FNC=%KV_SND_FNC_RQSMRK,
  621      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  622      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  623      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  624      VDOVLP_ERR$ = VDOVLP_ERR$,
  625      VDOVLP_FLDID$ = VDOVLP_FLDID$,
14:54 JUL 28 '97 KV$SND.:E05SI                                             26   
  626      VDOVLP_KEY$ = VDOVLP_KEY$,
  627      VDOVLP_MRK$ = VDOVLP_MRK$,
  628      RQSMRK_DLTRCVDAT = RQSMRK_DLTRCVDAT,
  629      RQSMRK_DLTRCVRQS = RQSMRK_DLTRCVRQS,
  630      RQSMRK_ONL = RQSMRK_ONL);
  631      %MEND;
  632      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             27   
  633      /*F* NAME:  KV$SND_RQSSTT - Request status (e.g., ESC-Q).
  634      */
  635      %MACRO KV$SND_RQSSTT(NAME = KV$SND_RQSSTT, LVL = 1, LAST = ";", STCLASS = BASED,
  636      VDOVLP_CG_MSGID$ = NIL,
  637      VDOVLP_CG_MSGTYP$ = NIL,
  638      VDOVLP_CG_STA$ = NIL,
  639      VDOVLP_ERR$ = NIL,
  640      VDOVLP_FLDID$ = NIL,
  641      VDOVLP_KEY$ = NIL,
  642      VDOVLP_MRK$ = NIL);
  643      %LSET LISTDIR = '0'B;
  644      %LSET LISTEXP = '1'B;
  645      %LSET LISTCOM = '0'B;
  646      %LSET LISTSUB = '1'B;
  647      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  648      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  649      %LSET INIT = CHARTEXT('INIT');
  650      %LSET ENIT = CHARTEXT('');
  651      %ELSE;
  652      %LSET INIT = CHARTEXT('/*');
  653      %LSET ENIT = CHARTEXT('*/');
  654      %ENDIF;
  655      %IF LVL = 1;
  656      DCL 1 NAME STCLASS ALIGNED,
  657      %ELSE;
  658      %(LVL) NAME,
  659      %ENDIF;
  660      %LSET NXTLVL = LVL+1;
  661      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, LAST=LAST, FNC=%KV_SND_FNC_RQSSTT,
  662      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  663      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  664      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  665      VDOVLP_ERR$ = VDOVLP_ERR$,
  666      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  667      VDOVLP_KEY$ = VDOVLP_KEY$,
  668      VDOVLP_MRK$ = VDOVLP_MRK$);
  669      %MEND;
14:54 JUL 28 '97 KV$SND.:E05SI                                             28   
  670      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             29   
  671      /*F* NAME:  KV$SND_SCHLCLSSN - schedule this (local) session for execution
  672      */
  673      %MACRO KV$SND_SCHLCLSSN(NAME = KV$SND_SCHLCLSSN, LVL = 1, LAST = ";", STCLASS = BASED,
  674      VDOVLP_CG_MSGID$ = NIL,
  675      VDOVLP_CG_MSGTYP$ = NIL,
  676      VDOVLP_CG_STA$ = NIL,
  677      VDOVLP_ERR$ = NIL,
  678      VDOVLP_FLDID$ = NIL,
  679      VDOVLP_KEY$ = NIL,
  680      VDOVLP_MRK$ = NIL);
  681      %LSET LISTDIR = '0'B;
  682      %LSET LISTEXP = '1'B;
  683      %LSET LISTCOM = '0'B;
  684      %LSET LISTSUB = '1'B;
  685      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  686      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  687      %LSET INIT = CHARTEXT('INIT');
  688      %LSET ENIT = CHARTEXT('');
  689      %ELSE;
  690      %LSET INIT = CHARTEXT('/*');
  691      %LSET ENIT = CHARTEXT('*/');
  692      %ENDIF;
  693      %IF LVL = 1;
  694      DCL 1 NAME STCLASS ALIGNED,
  695      %ELSE;
  696      %(LVL) NAME,
  697      %ENDIF;
  698      %LSET NXTLVL = LVL+1;
  699      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, LAST=LAST, FNC=%KV_SND_FNC_SCH,
  700      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  701      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  702      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  703      VDOVLP_ERR$ = VDOVLP_ERR$,
  704      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  705      VDOVLP_KEY$ = VDOVLP_KEY$,
  706      VDOVLP_MRK$ = VDOVLP_MRK$);
  707      %MEND;
14:54 JUL 28 '97 KV$SND.:E05SI                                             30   
  708      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             31   
  709      /*F* NAME:  KV$SND_STT - Status (e.g., ESC-Q).
  710      */
  711      %MACRO KV$SND_STT(NAME = KV$SND_STT, LVL = 1, LAST = ";", STCLASS = BASED,
  712      VDOVLP_CG_MSGID$ = NIL,
  713      VDOVLP_CG_MSGTYP$ = NIL,
  714      VDOVLP_CG_STA$ = NIL,
  715      VDOVLP_ERR$ = NIL,
  716      VDOVLP_FLDID$ = NIL,
  717      VDOVLP_KEY$ = NIL,
  718      VDOVLP_MRK$ = NIL);
  719      %LSET LISTDIR = '0'B;
  720      %LSET LISTEXP = '1'B;
  721      %LSET LISTCOM = '0'B;
  722      %LSET LISTSUB = '1'B;
  723      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  724      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  725      %LSET INIT = CHARTEXT('INIT');
  726      %LSET ENIT = CHARTEXT('');
  727      %ELSE;
  728      %LSET INIT = CHARTEXT('/*');
  729      %LSET ENIT = CHARTEXT('*/');
  730      %ENDIF;
  731      %IF LVL = 1;
  732      DCL 1 NAME STCLASS ALIGNED,
  733      %ELSE;
  734      %(LVL) NAME,
  735      %ENDIF;
  736      %LSET NXTLVL = LVL+1;
  737      %KV$SND (LVL=NXTLVL, STCLASS=STCLASS, LAST=LAST, FNC=%KV_SND_FNC_STT,
  738      VDOVLP_CG_MSGID$ = VDOVLP_CG_MSGID$,
  739      VDOVLP_CG_MSGTYP$ = VDOVLP_CG_MSGTYP$,
  740      VDOVLP_CG_STA$ = VDOVLP_CG_STA$,
  741      VDOVLP_ERR$ = VDOVLP_ERR$,
  742      VDOVLP_FLDID$ = VDOVLP_FLDID$,
  743      VDOVLP_KEY$ = VDOVLP_KEY$,
  744      VDOVLP_MRK$ = VDOVLP_MRK$);
  745      %MEND;
14:54 JUL 28 '97 KV$SND.:E05SI                                             32   
  746      %EJECT;

14:54 JUL 28 '97 KV$SND.:E05SI                                             33   
  747      /*
  748      Define KV$SND.FNC values.
  749      */
  750      %MACRO KV_SND_FNC_E;
  751      %EQU KV_SND_FNC_CLSSSN = 1;
  752      %EQU KV_SND_FNC_CMPDSCSSN = 2;
  753      %EQU KV_SND_FNC_CNC = 3;
  754      %EQU KV_SND_FNC_DAT = 4;
  755      %EQU KV_SND_FNC_DSCSSN = 5;
  756      %EQU KV_SND_FNC_EVT = 6;
  757      %EQU KV_SND_FNC_MRK = 7;
  758      %EQU KV_SND_FNC_OPNSSN = 8;
  759      %EQU KV_SND_FNC_PRM = 9;
  760      %EQU KV_SND_FNC_RQSDAT_GNR = 10;
  761      %EQU KV_SND_FNC_RQSMRK = 11;
  762      %EQU KV_SND_FNC_RQSSTT = 12;
  763      %EQU KV_SND_FNC_STT = 13;
  764      %EQU KV_SND_FNC_SCH = 14;
  765      %MEND;

