VERSION E05

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:1    
        1        1        /*M* KVM$UIFT  User Input Function Table update routine */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*     NSO,PLM=3,SQB=Y,AND=Y,ENI=0,SDI=3,MCL=10,CSI=0,ECI=0,IND=0,IAD=3 */
        8        8        /*P*
        9        9            NAME: KVM$UIFT
       10       10            PURPOSE:
       11       11                  To update the user input function table according to the
       12       12                  commands entered through IMP.
       13       13        */
       14       14        /*D*
       15       15            NAME: KVM$UIFT
       16       16            CALL: CALL KVM$UIFT(KV$VDH_SETPRM)
       17       17            PARAMETERS:
       18       18                  The KV$VDH_SETPRM structures that frames a block of
       19       19                  KV$PRM_(DCL/RLS)INPFNC structures.
       20       20            INTERFACE:
       21       21                  It calls KVS$GETBFR and KVS$RLSBFR to get and release
       22       22                  shared buffers while modifying the table.
       23       23                  It calls KHD$SCREECH if there is an error in the parameter.
       24       24                  It calls KVI$NEWINPFNCTBL to clean up the table.
       25       25            DESCRIPTION:
       26       26                  Looks at each KV$PRM_... structure and perform the adding
       27       27                  or deleting of input functions in the table.
       28       28        */
       29       29        KVM$UIFT: PROC (KV$VDH_SETPRM);
       30       30
       31       31 S      %INCLUDE KV$GLB;
       32       32 S      %INCLUDE KV$GLBCTX;
       33       33        %INCLUDE KV$INPFNC;
       34      592 S      %INCLUDE KV$INT;
       35      593 S      %INCLUDE KV$VDH;
       36      594        %INCLUDE KV$PRM;
       37      807        %INCLUDE KV_ERRORS_C;                   /* error code equates                 */
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:2    
       38      867 S      %INCLUDE KV_GLBCNS_E;
       39      868 S      %INCLUDE KV_PRMID_E;
       40      869
       41      870        %KV_PRM_INPFNC_E;
       42      880
       43      881        %KV_INPFNC_E;                           /*  VDH INPUT FUNCTION DEFS           */
       44      895        %KV_STRTYP_E;
       45      933        %KV$VDH_SETPRM(STCLASS="");        /* the parameter with which UIFT is called */
       46      995        %KV$STR;
       47     1082        %KV$MVD;                                /*  MASTER VIRT. DEVICE CONTEXT       */
       48     1126        %KV$INPFNCTBL(STCLASS = "BASED(FNCTBL$)");
       49     1210        %KV$INPOPR (STCLASS="BASED(TO$)");
       50     1309        %KV_INPOPR_E;
       51     1322        %KV$PTR;                                /*  VDH POINTER BLOCK                 */
       52     1365        %KV$SHRBFR;                             /*  SHARED BUFFER TEMPLATE            */
       53     1397        %KV$VDI;                                /*  NEEDED TO GET USER PRAM$          */
       54     1468        %KV$PRM_DCLINPFNC(STCLASS = "BASED(MSG$)");
       55     1511        %KV$PRM_RLSINPFNC(STCLASS = "BASED(MSG$)");
       56     1541
       57     1542    1   DCL ORGUSRTBL$ PTR;
       58     1543    1   DCL FNCTBL$ PTR;
       59     1544    1   DCL TBL$ PTR;
       60     1545    1   DCL ENDMSG$ PTR;
       61     1546    1   DCL MSG$ PTR;
       62     1547    1   DCL TBLTYP UBIN WORD;
       63     1548    1   DCL ERRCODE UBIN WORD;
       64     1549    1   DCL ID_TKN UBIN WORD;
       65     1550    1   DCL ID_TKNTYP UBIN WORD;
       66     1551    1   DCL NEWTBLSIZ UBIN WORD;
       67     1552    1   DCL INPOPR_SIZ SBIN WORD;
       68     1553    1   DCL PRM_LNG SBIN WORD;
       69     1554    1   DCL DLT_INPOPR_SIZ SBIN WORD;
       70     1555    1   DCL ADD_SIZ UBIN WORD;
       71     1556    1   DCL DLT_FNC_CNT SBIN WORD;
       72     1557    1   DCL TTL_ID_CNT UBIN WORD;
       73     1558
       74     1559    1   DCL ID_CHR_ARY$ PTR;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:3    
       75     1560    1   DCL ID_CHR_ARY(0:0) UBIN BYTE CALIGNED BASED(ID_CHR_ARY$);
       76     1561    1   DCL OPRX_ARY$ PTR;
       77     1562    1   DCL OPRX_ARY(0:0) SBIN WORD BASED(OPRX_ARY$);
       78     1563
       79     1564    1   DCL SRCLOWX SBIN WORD;
       80     1565    1   DCL SRCHGHX SBIN WORD;
       81     1566    1   DCL MATCHX SBIN WORD;
       82     1567    1   DCL FND BIT(1);
       83     1568    1   DCL TBL_END SBIN WORD;
       84     1569    1   DCL UPBND SBIN WORD;
       85     1570    1   DCL LWBND SBIN WORD;
       86     1571    1   DCL I SBIN;
       87     1572    1   DCL Y@BYTSIZ UBIN;
       88     1573
       89     1574    1   DCL TRBL BIT(1);
       90     1575
       91     1576    1   DCL FRM$ PTR;
       92     1577    1   DCL TO$ PTR;
       93     1578    1   DCL WRD_TO_MOV UBIN;
       94     1579    1   DCL WRD_TO_MOV_S REDEF WRD_TO_MOV SBIN;
       95     1580
       96     1581        %KV$VDH_GETBFR(NAME = VDH_GETBFR, STCLASS = "");
       97     1646        %KV$VDH_RLSBFR(NAME = VDH_RLSBFR, STCLASS = "");
       98     1682        %KV$VDH_GETBFR(NAME = KV_VDH_GETBFR, STCLASS = "SYMREF READONLY");
       99     1747        %KV$VDH_RLSBFR(NAME = KV_VDH_RLSBFR, STCLASS = "SYMREF READONLY");
      100     1783
      101     1784    1   DCL KV_MAXUFTSIZ UBIN SYMREF;
      102     1785
      103     1786        /* constant input function table header for initialization  */
      104     1787
      105     1788        %KV_FNCID (NAME=KV_INPFNCTBL);
      106     1875        %EQU KV_INPOPR0=KV_INPOPRX;
      107     1876        %KV$INPFNCTBL (NAME=FOR_INIT, STCLASS=EXT);
      108     1960
      109     1961        /* CHARS FOR MOVES */
      110     1962    1   DCL CHARS CHAR(255) BASED;
      111     1963
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:4    
      112     1964
      113     1965        /* external procs and entries */
      114     1966
      115     1967
      116     1968    1   DCL KVS$GETBFR ENTRY(1) ALTRET;
      117     1969    1   DCL KVS$RLSBFR ENTRY(1) ALTRET;
      118     1970    1   DCL KVI$NEWINPFNCTBL ENTRY;
      119     1971
      120     1972        %EQU TBL_LST = KV_INPFNCTYP_SHFFNCKEY;
      121     1973        %EQU KV_INPFNCTYP_LST = TBL_LST;
      122     1974
      123     1975        /* Set up pointers, shared bufs, validate message..                 */
      124     1976
      125     1977    1      CALL Y$SETUP ;
      126     1978
      127     1979        /* Process the KV$PRM declare and release functions. - loop until              */
      128     1980        /* at end of message buffer or until the trouble flag is set.                 */
      129     1981
      130     1982    2      DO WHILE ((MSG$ < ENDMSG$) AND NOT TRBL);
      131     1983
      132     1984        /* Branch on KV$PRM TYPE - Declare and release are only ones valid.           */
      133     1985
      134     1986    3         DO SELECT(KV$PRM_RLSINPFNC.TYP);
      135     1987
      136     1988    3            SELECT(%KV_PRM_IMP_TYP_DCLINPFNC);
      137     1989        /* Adjust length to words (NOTE. LNG IS ALWAYS AN EVEN NO.)                   */
      138     1990    3            PRM_LNG = KV$PRM_DCLINPFNC.LNG/2+2;
      139     1991    3            IF PINCRW(MSG$, PRM_LNG) <= ENDMSG$
      140     1992    3              AND KV$PRM_DCLINPFNC.LNG > SIZEC(KV$PRM_DCLINPFNC)-3
      141     1993    3            THEN CALL Y$ADD ;
      142     1994
      143     1995    3            SELECT(%KV_PRM_IMP_TYP_RLSINPFNC);
      144     1996    3            PRM_LNG = KV$PRM_RLSINPFNC.LNG/2 + 1;
      145     1997    3            CALL Y$DELETE ;
      146     1998
      147     1999    3            SELECT (ELSE);
      148     2000    3         ERRCODE = %E$IMP_ILGCMNTYP;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:5    
      149     2001        /*E* ERROR: KVM-E$IMP_ILGCMNTYP-E
      150     2002             MESSAGE:Bad IMP command or function type.
      151     2003             MESSAGE1:IMP command not ADD or DELETE, or function type not one of:
      152     2004                      PRIMARY or SECONDARY ESCAPE, SPECIAL CHAR, CONTROL STRING,
      153     2005                      FUNCTION KEY, or SHIFTED FUNCTION KEY.
      154     2006        */
      155     2007    3         CALL Y$PROCESS_ERR ;
      156     2008    3         END /* SELECT */;
      157     2009
      158     2010    2      MSG$ = PINCRW (MSG$, PRM_LNG);
      159     2011
      160     2012    2      END /* LOOP */;
      161     2013
      162     2014        /* Clean up any empty space in tables or copied buffers.                      */
      163     2015
      164     2016    1      CALL Y$CLEANUP ;
      165     2017    1      RETURN;
      166     2018        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:6    
      167     2019        /*F* NAME: Y$SETUP
      168     2020             PURPOSE:
      169     2021                   Set up some pointers. Make a copy of the table to be
      170     2022                   modified if there are more than one user on it.
      171     2023        */
      172     2024
      173     2025    1   Y$SETUP: PROC;
      174     2026
      175     2027
      176     2028        /* INIT UIFT DATA                                                           */
      177     2029
      178     2030    2      TRBL = '0'B;
      179     2031    2      ERRCODE = 0;
      180     2032
      181     2033        /* SET UP POINTER TO THE MESSAGE (FIRST KV$PRM STRUCTURE)                     */
      182     2034
      183     2035    2      MSG$ = PINCRW(KV$VDH_SETPRM.VAL_.ADR$, KV$VDH_SETPRM.VAL_.BYTX/2);
      184     2036
      185     2037        /* CALCULATE END OF MESSAGE AND SET POINTER TO IT                             */
      186     2038
      187     2039    2      ENDMSG$ = PINCRW(KV$VDH_SETPRM.VAL_.ADR$, (KV$VDH_SETPRM.VAL_.BYTSIZ+1)/2);
      188     2040    2      FNCTBL$ = %KV_MVD.USRINPFNCTBL$;
      189     2041    2      ORGUSRTBL$ = FNCTBL$;
      190     2042
      191     2043    3      IF (FNCTBL$ ~= ADDR(NIL)) THEN DO;
      192     2044    4         IF (ORGUSRTBL$->KV$SHRBFR.USRCNT > 1) THEN DO;
      193     2045        /* If more than 1 user, make a copy of the table and work on it.              */
      194     2046
      195     2047    4            VDH_GETBFR = KV_VDH_GETBFR;
      196     2048    4            VDH_GETBFR.STRTYP = %KV_STRTYP_USRINPFNCTBL;
      197     2049    4            VDH_GETBFR.DAT_.BYTSIZ = KV$INPFNCTBL.BYTSIZ-LENGTHC(KV$SHRBFR);
      198     2050    4            VDH_GETBFR.DAT_.ADR$ = FNCTBL$;
      199     2051    4            VDH_GETBFR.DAT_.BYTX = LENGTHC(KV$SHRBFR);
      200     2052    4            VDH_GETBFR.SHRBFR = '0'B;
      201     2053    4            VDH_GETBFR.SHRBFR.GET = '1'B;
      202     2054    4            VDH_GETBFR.SCRNO_MMR = '0'B;
      203     2055    4            CALL KVS$GETBFR(VDH_GETBFR)
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:7    
      204     2056    5            WHENRETURN DO;
      205     2057    5               FNCTBL$ = VDH_GETBFR.BFR$;
      206     2058    5               FNCTBL$->KV$SHRBFR.USRCNT = 1;
      207     2059    5            END; WHENALTRETURN DO;
      208     2060    5               ERRCODE = %E$IMP_CNTGETMMR;
      209     2061        /*E* ERROR: KVM-E$IMP_CNTGETMMR-C
      210     2062             MESSAGE:Can't get memory for your IMP table.
      211     2063        */
      212     2064    5               CALL Y$PROCESS_ERR;
      213     2065    5               FNCTBL$ = ADDR(NIL);
      214     2066    5            END;
      215     2067    4         END;
      216     2068    3         ELSE
      217     2069        /* USRCNT is 1. We'll modify it directly, but first set USRCNT to
      218     2070        0 to make it find-inhibited. */
      219     2071    3         FNCTBL$->KV$SHRBFR.USRCNT = 0;
      220     2072    3      END /* IF FNCTBL$ ~= ADDR(NIL) */;
      221     2073
      222     2074        /* Calculate the total number of identifiers in the table */
      223     2075
      224     2076    2      TTL_ID_CNT = 0;
      225     2077    2      TBL_END = SIZEW(KV$INPFNCTBL);
      226     2078    3      IF FNCTBL$ ~= ADDR(NIL) THEN DO;
      227     2079    3         TTL_ID_CNT = KV$INPFNCTBL.ID_CHRCNT(%TBL_LST) +
      228     2080    3           KV$INPFNCTBL.ID_CHROFS(%TBL_LST) - KV$INPFNCTBL.ID_CHROFS(0);
      229     2081    3         TBL_END = (TTL_ID_CNT+KV$INPFNCTBL.ID_CHROFS(0)+1)/2;
      230     2082    3      END;
      231     2083    2      RETURN;
      232     2084    2   END Y$SETUP;
      233     2085        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:8    
      234     2086
      235     2087        /*I*
      236     2088            NAME: Y$DELETE
      237     2089            PURPOSE:
      238     2090                  The function to perform is delete. It may be delete all,
      239     2091                  delete one table type, or delete one function.
      240     2092        */
      241     2093
      242     2094    1   Y$DELETE: PROC;
      243     2095
      244     2096    2      IF (FNCTBL$ = ADDR(NIL)) THEN RETURN; /* no table to delete                */
      245     2097
      246     2098        /* Verify release input function structure */
      247     2099
      248     2100    2      TBLTYP = KV$PRM_RLSINPFNC.INPFNCTYP;
      249     2101    3      IF (TBLTYP > %KV_INPFNCTYP_LST) THEN DO;
      250     2102    3         ERRCODE = %E$IMP_ILGCMNTYP;
      251     2103    3         CALL Y$PROCESS_ERR;
      252     2104    3         RETURN;
      253     2105    3      END;
      254     2106
      255     2107    3      IF KV$PRM_RLSINPFNC.ID_TKNTYP > %KV_INPFNCTKNTYP_HI THEN DO;
      256     2108    3         ERRCODE = %E$IMP_ILGID_TKNTYP;
      257     2109        /*E* ERROR: KVM-E$IMP_ILGID_TKNTYP-E
      258     2110             MESSAGE:this error never happens.
      259     2111        */
      260     2112    3         CALL Y$PROCESS_ERR;
      261     2113    3         RETURN;
      262     2114    3      END /* IF */;
      263     2115
      264     2116        /* Clear the table or call Y$DLT_CMN according to the ALLINPFNCTYP bit. */
      265     2117
      266     2118    3      IF KV$PRM_RLSINPFNC.ALLINPFNCTYP THEN DO;
      267     2119    3         Y@BYTSIZ = KV$INPFNCTBL.BYTSIZ;   /* save the byte size                 */
      268     2120    3         SUBSTR(FNCTBL$->CHARS,SIZEC(KV$SHRBFR),
      269     2121    3           SIZEC(KV$INPFNCTBL)-SIZEC(KV$SHRBFR))
      270     2122    3           = SUBSTR(ADDR(KV_INPFNCTBL.FOR_INIT)->CHARS,SIZEC(KV$SHRBFR),
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:9    
      271     2123    3           SIZEC(KV$INPFNCTBL)-SIZEC(KV$SHRBFR));
      272     2124    3         KV$INPFNCTBL.BYTSIZ = Y@BYTSIZ;   /* restore byte size                  */
      273     2125    3         TBL_END = SIZEW(KV$INPFNCTBL);
      274     2126    3         KV$INPFNCTBL.FREWRDSIZ = Y@BYTSIZ/2 - TBL_END;
      275     2127    3         TTL_ID_CNT = 0;
      276     2128    3      END;
      277     2129    3      ELSE IF (KV$INPFNCTBL.ID_CHRCNT(TBLTYP) > 0) THEN DO;
      278     2130    3         ID_TKNTYP = KV$PRM_RLSINPFNC.ID_TKNTYP;
      279     2131    3         ID_TKN = KV$PRM_RLSINPFNC.ID_TKN;
      280     2132    4         IF (ID_TKNTYP ~= %KV_INPFNCTKNTYP_NON) THEN DO;
      281     2133    4            DLT_FNC_CNT = 1;
      282     2134    4         END;
      283     2135    4         ELSE DO;
      284     2136    4            DLT_FNC_CNT = KV$INPFNCTBL.ID_CHRCNT(TBLTYP);
      285     2137    4         END;
      286     2138
      287     2139    3         CALL Y$SRC(TBLTYP,ID_TKNTYP,ID_TKN);
      288     2140    3         IF (ID_TKNTYP = %KV_INPFNCTKNTYP_NON OR FND) THEN
      289     2141    3         CALL Y$DLT_CMN;
      290     2142    3      END;
      291     2143    2      RETURN;
      292     2144    2   END Y$DELETE;
      293     2145        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:10   
      294     2146
      295     2147        /*F*
      296     2148             NAME: Y$SRC
      297     2149             PURPOSE:
      298     2150                   To find the Y@SRC_ID_TKN in the array of ID_CHR's for the
      299     2151                   specified Y@SRC_TBLTYP. FND will indicate whether the
      300     2152                   search was successful or not.
      301     2153        */
      302     2154
      303     2155    1   Y$SRC: PROC (Y@SRC_TBLTYP, Y@SRC_ID_TKNTYP, Y@SRC_ID_TKN);
      304     2156
      305     2157    2   DCL Y@SRC_TBLTYP UBIN;
      306     2158    2   DCL Y@SRC_ID_TKNTYP UBIN;
      307     2159    2   DCL Y@SRC_ID_TKN UBIN;
      308     2160    2   DCL 1 Y@SRC_CHR REDEF Y@SRC_ID_TKN,
      309     2161    2          2 * BIT(8),
      310     2162    2          2 C CHAR(1);
      311     2163    2   DCL J UBIN;
      312     2164    2   DCL 1 JB REDEF J,
      313     2165    2          2 * BIT(8),
      314     2166    2          2 N UBIN(8) UNAL;
      315     2167
      316     2168    2      ID_CHR_ARY$ = PINCRW(FNCTBL$, KV$INPFNCTBL.ID_CHROFS(0)/2);
      317     2169    2      SRCLOWX = KV$INPFNCTBL.ID_CHROFS(Y@SRC_TBLTYP)-KV$INPFNCTBL.ID_CHROFS(0);
      318     2170    2      J = KV$INPFNCTBL.ID_CHRCNT(Y@SRC_TBLTYP);
      319     2171    2      SRCHGHX = SRCLOWX + J - 1;
      320     2172
      321     2173        /* Start searching for the identifier */
      322     2174
      323     2175    2      MATCHX = SRCLOWX;
      324     2176    2      FND = '0'B;
      325     2177    2      IF (Y@SRC_ID_TKNTYP ~= %KV_INPFNCTKNTYP_NON) AND J>0 THEN
      326     2178    2      CALL INDEX (J, Y@SRC_CHR.C,
      327     2179    3        SUBSTR(ID_CHR_ARY$->CHARS,SRCLOWX,JB.N)) WHENRETURN DO;
      328     2180    3         MATCHX = J + SRCLOWX;
      329     2181    3         FND = '1'B;
      330     2182    3      END;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:11   
      331     2183    2      RETURN;
      332     2184    2   END Y$SRC;
      333     2185        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:12   
      334     2186
      335     2187        /*F*
      336     2188             NAME: Y$DLT_CMN
      337     2189             PURPOSE:
      338     2190                   To delete a table type or a single function.
      339     2191        */
      340     2192
      341     2193    1   Y$DLT_CMN: PROC ;
      342     2194
      343     2195        /* figure out size of INPOPR to delete */
      344     2196
      345     2197    2      OPRX_ARY$ = PINCRW(FNCTBL$,KV$INPFNCTBL.OPRX_OFS(0));
      346     2198    2      IF MATCHX+DLT_FNC_CNT = TTL_ID_CNT
      347     2199    2      THEN UPBND = KV$INPFNCTBL.OPRX_OFS(0);
      348     2200    2      ELSE UPBND = OPRX_ARY(MATCHX+DLT_FNC_CNT);
      349     2201    2      DLT_INPOPR_SIZ = UPBND - OPRX_ARY(MATCHX);
      350     2202
      351     2203        /* move data up to eat up the delete INPOPR(s) */
      352     2204
      353     2205    2      WRD_TO_MOV = TBL_END - UPBND;
      354     2206    2      TO$ = PINCRW(FNCTBL$,OPRX_ARY(MATCHX));
      355     2207    2      FRM$ = PINCRW(TO$,DLT_INPOPR_SIZ);
      356     2208    2      CALL Y$MOVDAT;
      357     2209
      358     2210        /* update offsets */
      359     2211
      360     2212    3      DO I = 0 TO %TBL_LST;
      361     2213    3         KV$INPFNCTBL.OPRX_OFS(I) = KV$INPFNCTBL.OPRX_OFS(I) - DLT_INPOPR_SIZ;
      362     2214    3         KV$INPFNCTBL.ID_CHROFS(I) = KV$INPFNCTBL.ID_CHROFS(I) -
      363     2215    3           (DLT_INPOPR_SIZ + DLT_FNC_CNT) * 2;
      364     2216    3      END;
      365     2217
      366     2218    2      OPRX_ARY$ = PINCRW(FNCTBL$,KV$INPFNCTBL.OPRX_OFS(0));
      367     2219    2      TBL_END = TBL_END - DLT_INPOPR_SIZ;
      368     2220    3      DO I = (MATCHX + DLT_FNC_CNT) TO (TTL_ID_CNT - 1);
      369     2221    3         OPRX_ARY(I) = OPRX_ARY(I) - DLT_INPOPR_SIZ;
      370     2222    3      END;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:13   
      371     2223
      372     2224        /* Move up to delete OPRX(s) */
      373     2225
      374     2226    2      WRD_TO_MOV = TBL_END - KV$INPFNCTBL.OPRX_OFS(0) - MATCHX - DLT_FNC_CNT;
      375     2227    2      TO$ = PINCRW(FNCTBL$,(KV$INPFNCTBL.OPRX_OFS(0)+MATCHX));
      376     2228    2      FRM$ = PINCRW(TO$,DLT_FNC_CNT);
      377     2229    2      CALL Y$MOVDAT;
      378     2230
      379     2231        /* update offsets */
      380     2232
      381     2233    3      DO I = (TBLTYP + 1) TO %TBL_LST;
      382     2234    3         KV$INPFNCTBL.OPRX_OFS(I) = KV$INPFNCTBL.OPRX_OFS(I) - DLT_FNC_CNT;
      383     2235    3         KV$INPFNCTBL.ID_CHROFS(I) = KV$INPFNCTBL.ID_CHROFS(I) - DLT_FNC_CNT;
      384     2236    3      END;
      385     2237
      386     2238        /* Move up to delete ID_CHR entries */
      387     2239
      388     2240    2      ID_CHR_ARY$ = PINCRW(FNCTBL$,KV$INPFNCTBL.ID_CHROFS(0)/2);
      389     2241    2      WRD_TO_MOV = TTL_ID_CNT - MATCHX - DLT_FNC_CNT;
      390     2242    2      SUBSTR (FNCTBL$->CHARS, KV$INPFNCTBL.ID_CHROFS(0)+MATCHX, WRD_TO_MOV)
      391     2243    2        = SUBSTR (FNCTBL$->CHARS,
      392     2244    2        KV$INPFNCTBL.ID_CHROFS(0)+MATCHX+DLT_FNC_CNT, WRD_TO_MOV);
      393     2245
      394     2246        /* other updating needed */
      395     2247
      396     2248    2      KV$INPFNCTBL.ID_CHRCNT(TBLTYP)
      397     2249    2        = KV$INPFNCTBL.ID_CHRCNT(TBLTYP) - DLT_FNC_CNT;
      398     2250    2      KV$INPFNCTBL.FREWRDSIZ = KV$INPFNCTBL.FREWRDSIZ + DLT_INPOPR_SIZ +
      399     2251    2        DLT_FNC_CNT + (DLT_FNC_CNT + MOD(TTL_ID_CNT,2))/2;
      400     2252
      401     2253        /* take care of SPCCHR and ESCINTn_CHR */
      402     2254
      403     2255    3      IF (KV$INPFNCTBL.ID_CHRCNT(TBLTYP) = 0) AND TBLTYP<2 THEN DO;
      404     2256    3         CALL Y$SRC(%KV_INPFNCTYP_SPCCHR,%KV_INPFNCTKNTYP_CHR,
      405     2257    3           KV$INPFNCTBL.ESCINT1_CHR(TBLTYP));
      406     2258    3         IF NOT FND THEN
      407     2259    3         KV$INPFNCTBL.SPCCHR(KV$INPFNCTBL.ESCINT1_CHR(TBLTYP)) = '0'B;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:14   
      408     2260    3         KV$INPFNCTBL.ESCINT1_CHR(TBLTYP) = %KV_ESCINTCHR_NON;
      409     2261
      410     2262    3         KV$INPFNCTBL.ESCINT2_CHR(TBLTYP) = %KV_ESCINTCHR_NON;
      411     2263
      412     2264    3      END;
      413     2265
      414     2266
      415     2267    2      IF (TBLTYP = %KV_INPFNCTYP_SPCCHR) THEN
      416     2268    2      IF (ID_TKNTYP ~= %KV_INPFNCTKNTYP_NON) THEN
      417     2269    2      KV$INPFNCTBL.SPCCHR(ID_TKN) = '0'B;
      418     2270    2      ELSE                            /* we just deleted all special characters  */
      419     2271    2      KV$INPFNCTBL.SPCCHR = '0'B;
      420     2272        /* restore the bits corresponding to the introducer characters */
      421     2273    3      DO I = 0 TO 1;
      422     2274    3         IF NOT BINBIT(KV$INPFNCTBL.ESCINT1_CHR(I),16)&'FF00'X THEN
      423     2275    3         KV$INPFNCTBL.SPCCHR(KV$INPFNCTBL.ESCINT1_CHR(I)) = '1'B;
      424     2276    3      END;
      425     2277    2      TBL_END = TBL_END - DLT_FNC_CNT - (DLT_FNC_CNT + MOD(TTL_ID_CNT,2))/2;
      426     2278    2      TTL_ID_CNT = TTL_ID_CNT - DLT_FNC_CNT;
      427     2279    2   END Y$DLT_CMN;
      428     2280        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:15   
      429     2281
      430     2282
      431     2283        /*F*
      432     2284            NAME: Y$ADD
      433     2285            PURPOSE:
      434     2286                  The function to perform is to add one IMP.
      435     2287        */
      436     2288
      437     2289    1   Y$ADD: PROC ;
      438     2290
      439     2291    2   DCL INT1_TKNTYP SBIN;
      440     2292    2   DCL TYP_OFS(0:3) SBIN CONSTANT INIT(0,%KV_INPCTRSTRCHR_BIS,%KV_INPFNCKEY_BIS,0);
      441     2293
      442     2294        /* Validate declare input function structure */
      443     2295
      444     2296    2      TBLTYP = KV$PRM_DCLINPFNC.INPFNCTYP;
      445     2297    3      IF TBLTYP > %KV_INPFNCTYP_LST THEN DO;
      446     2298    3         ERRCODE = %E$IMP_ILGCMNTYP;
      447     2299    3         CALL Y$PROCESS_ERR;
      448     2300    3         RETURN;
      449     2301    3      END;
      450     2302
      451     2303    2      IF KV$PRM_DCLINPFNC.INT1_TKNTYP > %KV_INPFNCTKNTYP_HI OR
      452     2304    3        KV$PRM_DCLINPFNC.INT2_TKNTYP > %KV_INPFNCTKNTYP_HI THEN DO;
      453     2305    3         ERRCODE = %E$IMP_ILGINTTKNTYP;
      454     2306        /*E* ERROR: KVM-E$IMP_ILGINTTKNTYP-E
      455     2307             MESSAGE:Bad IMP introducer type.
      456     2308        */
      457     2309    3         CALL Y$PROCESS_ERR;
      458     2310    3         RETURN;
      459     2311    3      END /* IF */;
      460     2312
      461     2313    2      INT1_TKNTYP = KV$PRM_DCLINPFNC.INT1_TKNTYP;
      462     2314    2      IF FNCTBL$~=ADDR(NIL) AND TBLTYP<%KV_INPFNCTYP_SPCCHR
      463     2315    2      THEN IF KV$INPFNCTBL.ID_CHRCNT(TBLTYP)~=0
      464     2316    2        AND INT1_TKNTYP~=%KV_INPFNCTKNTYP_NON
      465     2317    2        AND (KV$PRM_DCLINPFNC.INT1_TKN+TYP_OFS(INT1_TKNTYP)~=
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:16   
      466     2318    2        KV$INPFNCTBL.ESCINT1_CHR(TBLTYP)
      467     2319    2        OR KV$PRM_DCLINPFNC.INT2_TKNTYP=%KV_INPFNCTKNTYP_NON
      468     2320    2        AND KV$INPFNCTBL.ESCINT2_CHR(TBLTYP)~=%KV_ESCINTCHR_NON
      469     2321    2        OR KV$PRM_DCLINPFNC.INT2_TKNTYP~=%KV_INPFNCTKNTYP_NON
      470     2322    2        AND KV$PRM_DCLINPFNC.INT2_TKN~=KV$INPFNCTBL.ESCINT2_CHR(TBLTYP))
      471     2323    3      THEN IF NOT %KV_MVD.INPFNCCPY(TBLTYP) THEN DO;
      472     2324    3         ERRCODE = %E$IMP_ILGINTTKN;
      473     2325        /*E* ERROR: KVM-E$IMP_ILGINTTKN-E
      474     2326             MESSAGE:IMP introducer conflicts with existing IMPs.
      475     2327        */
      476     2328    3         CALL Y$PROCESS_ERR;
      477     2329    3         RETURN;
      478     2330    3      END; ELSE DO;
      479     2331
      480     2332        /* The old ones were only copied, just get rid of them */
      481     2333
      482     2334    3         ID_TKNTYP = %KV_INPFNCTKNTYP_NON;
      483     2335    3         DLT_FNC_CNT = KV$INPFNCTBL.ID_CHRCNT(TBLTYP);
      484     2336    3         CALL Y$SRC (TBLTYP,ID_TKNTYP);
      485     2337    3         CALL Y$DLT_CMN;
      486     2338    3      END;
      487     2339        /* PROCESS FUNCTION IDENTIFIER                                                */
      488     2340    2      ID_TKNTYP = KV$PRM_DCLINPFNC.ID_TKNTYP;
      489     2341    2      ID_TKN = KV$PRM_DCLINPFNC.ID_TKN;
      490     2342    3      IF (ID_TKNTYP = %KV_INPFNCTKNTYP_NON) THEN DO;
      491     2343    3         ERRCODE = %E$IMP_ILGID_TKNTYP;
      492     2344    3         CALL Y$PROCESS_ERR;
      493     2345    3         RETURN;
      494     2346    3      END;
      495     2347
      496     2348    2      INPOPR_SIZ = PRM_LNG - SIZEW(KV$PRM_DCLINPFNC);
      497     2349
      498     2350    2      IF (FNCTBL$ = ADDR(NIL)) THEN
      499     2351    2      FNCTBL$ = ADDR(KV_INPFNCTBL.FOR_INIT);
      500     2352    3      ELSE DO;
      501     2353    3         DLT_FNC_CNT = 1;
      502     2354    3         CALL Y$SRC(TBLTYP,ID_TKNTYP,ID_TKN);
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:17   
      503     2355    3         IF FND THEN CALL Y$DLT_CMN;
      504     2356    3      END;
      505     2357
      506     2358    2      ADD_SIZ = INPOPR_SIZ + 1 + MOD((TTL_ID_CNT + 1), 2);
      507     2359    2      IF KV$INPFNCTBL.FREWRDSIZ >= ADD_SIZ THEN
      508     2360    2      KV$INPFNCTBL.FREWRDSIZ = KV$INPFNCTBL.FREWRDSIZ - ADD_SIZ;
      509     2361    3      ELSE DO;
      510     2362
      511     2363        /* Otherwise GO THROUGH EXPANDING THE TABLE ORDEAL                            */
      512     2364
      513     2365        /* CHECK TO SEE IF THIS TABLE HAS EXCEEDED THE MAXIMUM SIZE THAT              */
      514     2366        /* A USER INPUT FUNCTION TABLE MAY GROW TO. THIS CHECK IS SORT OF             */
      515     2367        /* A BALLPARK CHECK IN THAT WE STILL GET 40 BYTES OF PAD IF THE CHECK         */
      516     2368        /* PASSES, SO WE MAY BE OFF BY 20 WORDS. IT SERVES THE PRIMARY PURPOSE        */
      517     2369        /* THOUGH, IN THAT IT WILL PREVENT THE TABLES FROM GETTING REDICULOUSLY       */
      518     2370        /* LARGE                                                                      */
      519     2371
      520     2372    3         NEWTBLSIZ = FNCTBL$->KV$SHRBFR.BYTSIZ/2 + ADD_SIZ -
      521     2373    3           KV$INPFNCTBL.FREWRDSIZ;
      522     2374    4         IF NEWTBLSIZ > KV_MAXUFTSIZ THEN DO;
      523     2375
      524     2376        /* WE'VE EXCEEDED THE SIZE, CALL Y$PROCESS_ERR AND RETURN.                    */
      525     2377
      526     2378    4            ERRCODE = %E$IMP_TBLSIZLMTEXC;
      527     2379        /*E* ERROR: KVM-E$IMP_TBLSIZLMTEXC-E
      528     2380             MESSAGE:Your IMP request would exceed the IMP memory limit.
      529     2381        */
      530     2382    4            CALL Y$PROCESS_ERR;
      531     2383    4            RETURN;
      532     2384    4         END /* IF */;
      533     2385
      534     2386        /* SETUP FOR AND CALL A ROUTINE TO ACQUIRE A BUFFER OF THE CORRECT SIZE.      */
      535     2387
      536     2388    3         VDH_GETBFR = KV_VDH_GETBFR;
      537     2389    3         VDH_GETBFR.STRTYP = %KV_STRTYP_USRINPFNCTBL;
      538     2390
      539     2391        /* ADJUST BYTE SIZE TO THE NEW REQUIREMENT                                    */
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:18   
      540     2392
      541     2393    3         VDH_GETBFR.BYTSIZ = NEWTBLSIZ * 2 + 40;
      542     2394        /*
      543     2395           Make it a power-of-2.
      544     2396        */
      545     2397    4         DO WHILE BITBIN(BINBIT(VDH_GETBFR.BYTSIZ,16)&
      546     2398    4           BINBIT(-VDH_GETBFR.BYTSIZ,16))~=VDH_GETBFR.BYTSIZ;
      547     2399    4            VDH_GETBFR.BYTSIZ = VDH_GETBFR.BYTSIZ + BITBIN
      548     2400    4              (BINBIT(VDH_GETBFR.BYTSIZ,16)&BINBIT(-VDH_GETBFR.BYTSIZ,16));
      549     2401    4         END;
      550     2402    3         VDH_GETBFR.DAT_.BYTSIZ = KV$INPFNCTBL.BYTSIZ - LENGTHC(KV$SHRBFR);
      551     2403    3         VDH_GETBFR.DAT_.ADR$ = FNCTBL$;
      552     2404    3         VDH_GETBFR.DAT_.BYTX = LENGTHC(KV$SHRBFR);
      553     2405    3         VDH_GETBFR.SHRBFR = '0'B;
      554     2406    3         VDH_GETBFR.SHRBFR.GET = '1'B;
      555     2407    3         VDH_GETBFR.SCRNO_MMR = '0'B;
      556     2408    3         CALL KVS$GETBFR(VDH_GETBFR)
      557     2409    4         WHENALTRETURN DO;
      558     2410    4            ERRCODE = %E$IMP_CNTGETMMR;
      559     2411    4            CALL Y$PROCESS_ERR;
      560     2412    4            RETURN;
      561     2413    4         END /* ALTRETURN */;
      562     2414
      563     2415        /* IF THE OLD BUFFER WAS A COPY, FREE IT                                      */
      564     2416
      565     2417    3         IF (FNCTBL$ ~= ORGUSRTBL$ AND FNCTBL$ ~= ADDR(KV_INPFNCTBL.FOR_INIT)) THEN
      566     2418    3         CALL Y$RELEASE(FNCTBL$,'0'B);
      567     2419    3         FNCTBL$ = VDH_GETBFR.BFR$;
      568     2420
      569     2421        /* NOW LOOK AT THE RETURNED BUFFER BYTE SIZE AND CALCULATE                    */
      570     2422        /* WHAT THE NEW FREE WORD SIZE IS.                                            */
      571     2423
      572     2424    3         KV$INPFNCTBL.BYTSIZ = VDH_GETBFR.BYTSIZ;
      573     2425    3         KV$INPFNCTBL.FREWRDSIZ = KV$INPFNCTBL.BYTSIZ/2 - NEWTBLSIZ;
      574     2426    3      END;
      575     2427    2      IF TBLTYP = %TBL_LST
      576     2428    2      THEN MATCHX = TTL_ID_CNT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:19   
      577     2429    2      ELSE MATCHX = KV$INPFNCTBL.OPRX_OFS(TBLTYP+1) - KV$INPFNCTBL.OPRX_OFS(0);
      578     2430
      579     2431    2      OPRX_ARY$ = PINCRW(FNCTBL$,KV$INPFNCTBL.OPRX_OFS(0));
      580     2432    2      IF MATCHX = TTL_ID_CNT THEN
      581     2433    2      LWBND = KV$INPFNCTBL.OPRX_OFS(0);
      582     2434    2      ELSE LWBND = OPRX_ARY(MATCHX);
      583     2435
      584     2436    2      WRD_TO_MOV = TBL_END - LWBND;
      585     2437    2      FRM$ = PINCRW(FNCTBL$,LWBND);
      586     2438    2      TO$ = PINCRW(FRM$,INPOPR_SIZ);
      587     2439    2      CALL Y$MOVDAT;
      588     2440
      589     2441        /* update offsets */
      590     2442
      591     2443    3      DO I = 0 TO %TBL_LST;
      592     2444    3         KV$INPFNCTBL.OPRX_OFS(I) = KV$INPFNCTBL.OPRX_OFS(I) + INPOPR_SIZ;
      593     2445    3         KV$INPFNCTBL.ID_CHROFS(I) = KV$INPFNCTBL.ID_CHROFS(I) + (INPOPR_SIZ * 2);
      594     2446    3      END;
      595     2447    2      OPRX_ARY$ = PINCRW(FNCTBL$, KV$INPFNCTBL.OPRX_OFS(0));
      596     2448    3      DO I = MATCHX TO (TTL_ID_CNT - 1);
      597     2449    3         OPRX_ARY(I) = OPRX_ARY(I) + INPOPR_SIZ;
      598     2450    3      END;
      599     2451    2      TBL_END = TBL_END + INPOPR_SIZ;
      600     2452
      601     2453        /* put INPOPR in the hole */
      602     2454
      603     2455    2      WRD_TO_MOV = INPOPR_SIZ;
      604     2456        /* LWBND points to the beginning of the hole.  */
      605     2457    2      TO$ = PINCRW(FNCTBL$,LWBND);
      606     2458    2      FRM$ = PINCRW(MSG$,SIZEW(KV$PRM_DCLINPFNC));
      607     2459    2      CALL Y$MOVDAT;
      608     2460
      609     2461    2      I = INPOPR_SIZ;
      610     2462    2      FRM$ = TO$;
      611     2463    3      DO WHILE '1'B;
      612     2464        /*
      613     2465           Take a look at the operators to make sure we don't crash, etc.
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:20   
      614     2466        */
      615     2467        /*N* Remove this line some time */
      616     2468    3         KV$INPOPR.TYP=%KV_INPOPR_TYP_TXT;
      617     2469    4         IF KV$INPOPR.TYP=%KV_INPOPR_TYP_TXT THEN DO;
      618     2470        /*
      619     2471           Limit TXT operator strings to the size of the function string.
      620     2472        */
      621     2473    4            IF SIZEW(KV$INPOPR_TXT)>I THEN KV$INPOPR_TXT.L
      622     2474    4              = KV$INPOPR_TXT.L-2*(SIZEW(KV$INPOPR_TXT)-I);
      623     2475    4            WRD_TO_MOV = SIZEW(KV$INPOPR_TXT);
      624     2476    4         END;
      625     2477    3         I = I-WRD_TO_MOV;
      626     2478    3         FRM$ = TO$;
      627     2479    3         IF I<=0 THEN EXIT;
      628     2480    3         TO$ = PINCRW(TO$,WRD_TO_MOV_S);
      629     2481    3      END;
      630     2482    3      IF I<0 THEN DO;
      631     2483        /*
      632     2484           Bad one, make it a NOP
      633     2485        */
      634     2486    3         KV$INPOPR = '0'B;
      635     2487    3         KV$INPOPR.TYP = %KV_INPOPR_TYP_MSC;
      636     2488    3         KV$INPOPR.IMD = '1'B;
      637     2489    2      END; ELSE FRM$->KV$INPOPR.CHN = '0'B;
      638     2490
      639     2491        /* Make room for the OPRX entry */
      640     2492
      641     2493    2      WRD_TO_MOV = TBL_END - KV$INPFNCTBL.OPRX_OFS(0) - MATCHX;
      642     2494    2      FRM$ = PINCRW(OPRX_ARY$,MATCHX);
      643     2495    2      TO$ = PINCRW(FRM$,1);
      644     2496    2      CALL Y$MOVDAT;
      645     2497
      646     2498        /* update offsets */
      647     2499
      648     2500    3      DO I = 0 TO %TBL_LST;
      649     2501    3         KV$INPFNCTBL.ID_CHROFS(I) = KV$INPFNCTBL.ID_CHROFS(I) + 2;
      650     2502    3      END;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:21   
      651     2503    3      DO I = (TBLTYP + 1) TO %TBL_LST;
      652     2504    3         KV$INPFNCTBL.OPRX_OFS(I) = KV$INPFNCTBL.OPRX_OFS(I) + 1;
      653     2505    3      END;
      654     2506
      655     2507        /* put the OPRX in the hole */
      656     2508
      657     2509    2      OPRX_ARY(MATCHX) = LWBND;
      658     2510
      659     2511        /* make room for ID_CHR */
      660     2512
      661     2513    2      ID_CHR_ARY$ = PINCRW(FNCTBL$,KV$INPFNCTBL.ID_CHROFS(0)/2);
      662     2514    3      DO I = (TTL_ID_CNT - 1) DOWNTO MATCHX;
      663     2515    3         ID_CHR_ARY(I+1) = ID_CHR_ARY(I);
      664     2516    3      END;
      665     2517
      666     2518        /* update offsets */
      667     2519
      668     2520    3      DO I = (TBLTYP + 1) TO %TBL_LST;
      669     2521    3         KV$INPFNCTBL.ID_CHROFS(I) = KV$INPFNCTBL.ID_CHROFS(I) + 1;
      670     2522    3      END;
      671     2523
      672     2524        /* put the ID_CHR in the hole */
      673     2525
      674     2526    2      ID_CHR_ARY(MATCHX) = ID_TKN;
      675     2527
      676     2528        /* other updates to do */
      677     2529
      678     2530    2      KV$INPFNCTBL.ID_CHRCNT(TBLTYP) = KV$INPFNCTBL.ID_CHRCNT(TBLTYP) + 1;
      679     2531
      680     2532        /* take care of the SPCCHR and ESCINT */
      681     2533
      682     2534    2      IF (TBLTYP = %KV_INPFNCTYP_SPCCHR) THEN
      683     2535    2      KV$INPFNCTBL.SPCCHR(ID_TKN) = '1'B;
      684     2536
      685     2537    2      ELSE IF TBLTYP<%KV_INPFNCTYP_SPCCHR
      686     2538    3        AND KV$PRM_DCLINPFNC.INT1_TKNTYP~=%KV_INPFNCTKNTYP_NON THEN DO;
      687     2539    3         %KV_MVD.INPFNCCPY(TBLTYP) = '0'B;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:22   
      688     2540    3         KV$INPFNCTBL.ESCINT1_CHR(TBLTYP) = KV$PRM_DCLINPFNC.INT1_TKN+
      689     2541    3           TYP_OFS(INT1_TKNTYP);
      690     2542    3         IF INT1_TKNTYP=%KV_INPFNCTKNTYP_CHR
      691     2543    3         THEN KV$INPFNCTBL.SPCCHR(KV$PRM_DCLINPFNC.INT1_TKN) = '1'B;
      692     2544    4         IF (KV$PRM_DCLINPFNC.INT2_TKNTYP ~= %KV_INPFNCTKNTYP_NON) THEN DO;
      693     2545    4            KV$INPFNCTBL.ESCINT2_CHR(TBLTYP) = KV$PRM_DCLINPFNC.INT2_TKN;
      694     2546    4         END;
      695     2547    3      END;
      696     2548    2      TTL_ID_CNT = TTL_ID_CNT + 1;
      697     2549    2      TBL_END = TBL_END + 1 + MOD(TTL_ID_CNT,2);
      698     2550
      699     2551    2   END Y$ADD;
      700     2552
      701     2553        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:23   
      702     2554        /*F* NAME: Y$CLEANUP
      703     2555             PURPOSE:
      704     2556                   To clean up extra space or multiple copies of input function
      705     2557                   tables after modifications occurr.
      706     2558        */
      707     2559
      708     2560    1   Y$CLEANUP: PROC;
      709     2561
      710     2562        /* IF THE TROUBLE FLAG IS SET, DONT DO ANY MODIFICATIONS CAUSE SOMETHING      */
      711     2563        /* FUNNY HAPPENED. RELEASE ANY BUFFER COPIES, RESET FIND-INHIBIT IF SET       */
      712     2564        /* AND EXIT                                                                   */
      713     2565
      714     2566    3      IF TRBL THEN DO;
      715     2567
      716     2568    3         IF FNCTBL$~=ORGUSRTBL$ THEN
      717     2569    3         CALL Y$RELEASE(FNCTBL$,'0'B);
      718     2570
      719     2571    4         IF ORGUSRTBL$ ~= ADDR(NIL) THEN DO;
      720     2572    5            IF ORGUSRTBL$->KV$SHRBFR.USRCNT = 0 THEN DO;
      721     2573    5               ORGUSRTBL$->KV$SHRBFR.USRCNT = 1;
      722     2574    5            END /* IF */;
      723     2575    4         END;
      724     2576
      725     2577    3         RETURN;
      726     2578    3      END /* IF TRBL */;
      727     2579
      728     2580        /* If after all the modifications, we are left with an empty table,
      729     2581        we will set the input function table pointer to nil.                          */
      730     2582
      731     2583    3      IF TTL_ID_CNT = 0 THEN DO;
      732     2584    3         %KV_MVD.USRINPFNCTBL$ = ADDR(NIL);
      733     2585    3         IF FNCTBL$~=ORGUSRTBL$ THEN
      734     2586    3         CALL Y$RELEASE(FNCTBL$,'0'B);
      735     2587    3         CALL Y$RELEASE(ORGUSRTBL$,'1'B);
      736     2588    3         RETURN;
      737     2589    3      END;
      738     2590        /* The table is still non_empty, but it is possible that                      */
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:24   
      739     2591        /* it now has more than 31 free words. If so, we request a smaller            */
      740     2592        /* one with less than 31 free words.                                         */
      741     2593
      742     2594    3      IF (KV$INPFNCTBL.FREWRDSIZ > 31) THEN DO;
      743     2595
      744     2596        /* SETUP TO AND ACQUIRE A SMALLER BUFFER                                      */
      745     2597
      746     2598    3         VDH_GETBFR = KV_VDH_GETBFR;
      747     2599    3         VDH_GETBFR.STRTYP = %KV_STRTYP_USRINPFNCTBL;
      748     2600    3         NEWTBLSIZ = FNCTBL$->KV$SHRBFR.BYTSIZ/2 - KV$INPFNCTBL.FREWRDSIZ;
      749     2601    3         VDH_GETBFR.DAT_.BYTSIZ = NEWTBLSIZ*2 - LENGTHC(KV$SHRBFR);
      750     2602
      751     2603        /* Pick a buffer size that only does one fracturization */
      752     2604
      753     2605    3         I = 128;
      754     2606    4         DO WHILE I*2<NEWTBLSIZ;
      755     2607    4            I = I*2;
      756     2608    4         END;
      757     2609    3         IF I+I/2 < NEWTBLSIZ THEN VDH_GETBFR.BYTSIZ = I*4;
      758     2610    3         ELSE VDH_GETBFR.BYTSIZ = I*3;
      759     2611    3         VDH_GETBFR.DAT_.ADR$ = FNCTBL$;
      760     2612    3         VDH_GETBFR.DAT_.BYTX = LENGTHC(KV$SHRBFR);
      761     2613    3         VDH_GETBFR.SHRBFR = '0'B;
      762     2614    3         VDH_GETBFR.SHRBFR.GET = '1'B;
      763     2615    3         VDH_GETBFR.SCRNO_MMR = '0'B;
      764     2616    3         CALL KVS$GETBFR(VDH_GETBFR)
      765     2617    4         WHENRETURN DO;
      766     2618        /* Ignore the altreturn. Well just use the overly-large buffer. */
      767     2619
      768     2620        /* GET RID OF THE OLD BUFFER IF IT WAS A COPY.                                */
      769     2621    4            IF (FNCTBL$ ~= ORGUSRTBL$) THEN
      770     2622    4            CALL Y$RELEASE(FNCTBL$,'0'B);
      771     2623
      772     2624    4            FNCTBL$ = VDH_GETBFR.BFR$;
      773     2625        /* Recalculate free word size */
      774     2626
      775     2627    4            KV$INPFNCTBL.BYTSIZ = VDH_GETBFR.BYTSIZ;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:25   
      776     2628    4            KV$INPFNCTBL.FREWRDSIZ = VDH_GETBFR.BYTSIZ/2 - NEWTBLSIZ;
      777     2629
      778     2630    4         END /* IF VDH_GETBFR.ERR */;
      779     2631    3      END;                                 /* IF .FREWRDSIZ > 20                 */
      780     2632
      781     2633        /* SEE IF THE MISC BUFFER POINTED TO BY FNCTBL$ EXISTS ELSEWHERE IN           */
      782     2634        /* THE SHARED BUFFER CHAIN FOR THIS BUFFER TYPE. IF IT DOES, WE WANT TO       */
      783     2635        /* USE THE ONE THATS THERE AND NOT HAVE TWO OR MORE AROUND.                   */
      784     2636
      785     2637        /* SETUP AND CALL A ROUTINE TO CHECK FOR OTHER COPIES                         */
      786     2638
      787     2639
      788     2640        /* IF THE ORIGINAL BUFFER IS STILL FIND-INHIBIT, SET ITS USAGE COUNT          */
      789     2641        /* BACK TO ONE, SO WE'LL FIND IT IF WE HAVE CREATED AN IDENTICAL BUFFER       */
      790     2642
      791     2643    3      IF (ORGUSRTBL$ ~= ADDR(NIL)) THEN DO;
      792     2644    4         IF (ORGUSRTBL$->KV$SHRBFR.USRCNT = 0) THEN DO;
      793     2645    4            ORGUSRTBL$->KV$SHRBFR.USRCNT = 1;
      794     2646    4         END /* IF */;
      795     2647    3      END;
      796     2648    2      VDH_GETBFR = KV_VDH_GETBFR;
      797     2649    2      VDH_GETBFR.STRTYP = %KV_STRTYP_USRINPFNCTBL;
      798     2650        /* Only compare the significant portion of the data. */
      799     2651    2      VDH_GETBFR.DAT_.BYTSIZ =
      800     2652    2        KV$INPFNCTBL.ID_CHROFS(%TBL_LST) +
      801     2653    2        KV$INPFNCTBL.ID_CHRCNT(%TBL_LST) - LENGTHC(KV$SHRBFR);
      802     2654    2      VDH_GETBFR.DAT_.ADR$ = FNCTBL$;
      803     2655    2      VDH_GETBFR.DAT_.BYTX = LENGTHC(KV$SHRBFR);
      804     2656    2      VDH_GETBFR.SHRBFR = '0'B;
      805     2657    2      VDH_GETBFR.SHRBFR.SRC = '1'B;
      806     2658    2      CALL KVS$GETBFR(VDH_GETBFR) ;
      807     2659    2      TBL$ = VDH_GETBFR.BFR$;
      808     2660
      809     2661    3      IF (TBL$ ~= ADDR(NIL)) THEN DO;
      810     2662
      811     2663        /* WE FOUND A MATCH                                                           */
      812     2664
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:26   
      813     2665    3         %KV_MVD.USRINPFNCTBL$ = TBL$;
      814     2666
      815     2667        /* IF WE WERE PLAYING WITH A COPY, RELEASE IT                                 */
      816     2668
      817     2669    3         IF (FNCTBL$ ~= ORGUSRTBL$) THEN
      818     2670    3         CALL Y$RELEASE(FNCTBL$,'0'B);
      819     2671    3      END; ELSE DO;
      820     2672
      821     2673        /* THIS BUFFER SHOULD BE ADDED TO THE CHAIN. IT DOES NOT EXIST ANYWHERE       */
      822     2674        /* ELSE                                                                       */
      823     2675
      824     2676
      825     2677        /* IF WE MODIFIED THE BUFFER IN PLACE, DONT ADD IT                            */
      826     2678
      827     2679    4         IF (FNCTBL$ = ORGUSRTBL$) THEN DO;
      828     2680    4            FNCTBL$->KV$SHRBFR.USRCNT = 2;
      829     2681    4         END; ELSE DO;
      830     2682    4            VDH_GETBFR.BFR$ = FNCTBL$;
      831     2683    4            VDH_GETBFR.SHRBFR = '0'B;
      832     2684    4            VDH_GETBFR.SHRBFR.ADD = '1'B;
      833     2685    4            CALL KVS$GETBFR(VDH_GETBFR) ;
      834     2686    4            %KV_MVD.USRINPFNCTBL$ = VDH_GETBFR.BFR$;
      835     2687    4         END /* IF */;
      836     2688    3      END /* IF */;
      837     2689
      838     2690        /* Do a release on the original shared buffer.                                */
      839     2691
      840     2692    2      CALL Y$RELEASE(ORGUSRTBL$,'1'B);
      841     2693
      842     2694        /* CALL A MAGICAL PAUL STENDAL ROUTINE TO LOOK AT THE NEW INPUT FUNCTION      */
      843     2695        /* TABLE AND CLEAN UP ANY DUPLICATELY DEFINED INPUT FUNCTIONS AS WELL         */
      844     2696        /* AS SOME OTHER VODOO                                                        */
      845     2697
      846     2698    2      CALL KVI$NEWINPFNCTBL;
      847     2699    2   END Y$CLEANUP;
      848     2700
      849     2701        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:27   
      850     2702
      851     2703        /*I*
      852     2704            NAME: Y$RELEASE
      853     2705            PURPOSE:
      854     2706                  To call KVS$RLSBFR if the address of the buffer is non null.
      855     2707        */
      856     2708
      857     2709    1   Y$RELEASE: PROC(Y@BFR$,Y@BFRSRC);
      858     2710    2   DCL Y@BFR$ PTR;
      859     2711    2   DCL Y@BFRSRC BIT(1) ALIGNED/* required by PL6 */;
      860     2712
      861     2713    2      IF Y@BFR$ = ADDR(NIL) OR Y@BFR$ = ADDR(KV_INPFNCTBL.FOR_INIT) THEN RETURN;
      862     2714
      863     2715    2      VDH_RLSBFR = KV_VDH_RLSBFR;
      864     2716    2      VDH_RLSBFR.SHRBFRSRC = Y@BFRSRC;
      865     2717    2      VDH_RLSBFR.BFR$ = Y@BFR$;
      866     2718    2      VDH_RLSBFR.STRTYP = %KV_STRTYP_USRINPFNCTBL;
      867     2719    2      CALL KVS$RLSBFR(VDH_RLSBFR) ;
      868     2720    2      RETURN;
      869     2721    2   END Y$RELEASE;
      870     2722        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:28   
      871     2723
      872     2724        /*I*
      873     2725            NAME: Y$MOVDAT
      874     2726            PURPOSE:
      875     2727                  To slide data up or down in the user input function table.
      876     2728            DESCRIPTION:
      877     2729           THE PURPOSE OF THIS ROUTINE IS TO MOVE WRD_TO_MOV WORDS FROM THE LOCATION
      878     2730           POINTED TO BY FRM$, TO THE LOCATION POINTED TO BY TO$. IT IS USED TO SLIDE
      879     2731           BLOCKS OF DATA IN THE USER INPUT FUNCTION TABLE UP AND DOWN TO
      880     2732           SUPPORT ADD AND DELETE OPERATIONS. FOR EFFICIENCY, THE DATA IS
      881     2733           MOVED IN DOUBLE WORD BLOCKS, WITH A POSSIBLE SINGLE WORD MOVE
      882     2734           AT THE END IF NECESSARY. IT SHOULD BE NOTED THAT THE DATA BEGINS
      883     2735           AT LOCATION FRM$ AND EXTENDS WRD_TO_MOV WORDS FROM THERE.
      884     2736
      885     2737           INPUT. FRM$ - FROM LOCATION
      886     2738           TO$ - TO LOCATION
      887     2739           WRD_TO_MOV - NUMBER OF WORDS TO MOVE
      888     2740        */
      889     2741
      890     2742    1   Y$MOVDAT: PROC;
      891     2743
      892     2744    2   DCL Y@X SBIN;
      893     2745    2   DCL Y_DWORD(0:0) UBIN(32) ALIGNED BASED;
      894     2746    2   DCL Y_CHRS CHAR(Y@X) BASED;
      895     2747    2   DCL Y_WORD UBIN WORD ALIGNED BASED;
      896     2748
      897     2749        /* IF THIS IS A ADDR(NIL) MOVE, JUST RETURN                                   */
      898     2750
      899     2751    3      IF (WRD_TO_MOV = 0) THEN DO;
      900     2752    3         RETURN;
      901     2753    3      END /* IF */;
      902     2754
      903     2755        /* DETERMINE HOW MANY DOUBLE WORD MOVES WILL BE DONE AND WHETHER A            */
      904     2756        /* SINGLE WORD MOVE IS NECESSARY                                              */
      905     2757
      906     2758
      907     2759        /* IF THE FROM LOCATION IS ABOVE THE TO LOCATION, DATA IS MOVING DOWN AND     */
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:29   
      908     2760        /* POINTERS ARE DECREMENTED. THE FROM LOCATION SHOULD POINT TO THE END OF     */
      909     2761        /* THE DATA BLOCK AND THE TO LOCATION SHOULD POINT TO THE LAST WORD OF        */
      910     2762        /* FREE SPACE. DATA IS PULLED DOWN. THIS IS THE 'ADD' CASE. OTHERWISE         */
      911     2763        /* DATA IS BEING PULLED UP AND FROM POINTS TO THE FIRST DATA WORD AND         */
      912     2764        /* TO POINTS TO THE FIRST WORD OF FREE SPACE. POINTERS ARE INCREMENTED        */
      913     2765        /* HERE                                                                       */
      914     2766
      915     2767    2      Y@X = WRD_TO_MOV - 1;
      916     2768    3      IF FRM$ > TO$ OR PINCRW(FRM$, Y@X) < TO$ THEN DO;
      917     2769        /*
      918     2770           We can do it with one move.
      919     2771        */
      920     2772    3         Y@X = WRD_TO_MOV*2;
      921     2773    3         TO$->Y_CHRS = FRM$->Y_CHRS;
      922     2774    3         RETURN;
      923     2775    3      END /* IF */;
      924     2776
      925     2777        /* MOVE DOUBLE WORDS                                                          */
      926     2778
      927     2779
      928     2780        /* IF THERE IS ONE SINGLE WORD LEFT, MOVE IT                                  */
      929     2781
      930     2782    3      IF (MOD(WRD_TO_MOV,2) = 1) THEN DO;
      931     2783
      932     2784    3         PINCRW(TO$,Y@X)->Y_WORD = PINCRW(FRM$,Y@X)->Y_WORD;
      933     2785    3      END;
      934     2786    2      IF WRD_TO_MOV > 1
      935     2787    3      THEN DO Y@X = WRD_TO_MOV/2-1 DOWNTO 0; /* LOOP START                       */
      936     2788    3         TO$->Y_DWORD(Y@X) = FRM$->Y_DWORD(Y@X);
      937     2789    3      END /* IF */;
      938     2790    2   END Y$MOVDAT;
      939     2791
      940     2792        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:30   
      941     2793
      942     2794        /*I*
      943     2795            NAME: Y$PROCESS_ERR
      944     2796            PURPOSE:
      945     2797                  THE PURPOSE OF THIS ROUTINE IS TO INFORM VDH THAT THE REQUESTED
      946     2798                  IMP FUNCTIONS COULD NOT BE COMPLETED FOR ONE REASON OR ANOTHER
      947     2799        */
      948     2800
      949     2801    1   Y$PROCESS_ERR: PROC;
      950     2802
      951     2803    2      TRBL = '1'B;
      952     2804    2      %KV_STR.ERR.COD = ERRCODE;
      953     2805    2      RETURN;
      954     2806    2   END Y$PROCESS_ERR;
      955     2807    1   END KVM$UIFT;

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:31   
--  Include file information  --

   KV_ERRORS_C.:E05TOU  is referenced.
   KV$PRM.:E05TOU  is referenced.
   KV$INPFNC.:E05TOU  is referenced.
   KV_PRMID_E.:E05TOU  was found in the system file and is referenced.
   KV_GLBCNS_E.:E05TOU  was found in the system file and is referenced.
   KV$VDO.:E05TOU  was found in the system file and is never referenced.
   KV$VDH.:E05TOU  was found in the system file and is referenced.
   KV$USR.:E05TOU  was found in the system file and is never referenced.
   KV$SND.:E05TOU  was found in the system file and is never referenced.
   KV$INT.:E05TOU  was found in the system file and is referenced.
   KV$GLBCTX.:E05TOU  was found in the system file and is referenced.
   KV$GLB.:E05TOU  was found in the system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is never referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure KVM$UIFT.

   Procedure KVM$UIFT requires 2206 words for executable code.
   Procedure KVM$UIFT requires 82 words of local(AUTO) storage.

    No errors detected in file KVM$UIFT.:E05TSI    .

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:32   

 Object Unit name= KVM$UIFT                                   File name= KVM$UIFT.:E05TOU
 UTS= JUL 30 '97 02:07:49.92 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS     50     32  KVM$UIFT
    1   Proc  even  none  2206    89E  KVM$UIFT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        1  KVM$UIFT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KVS$GETBFR
         yes           Std       0 KVI$NEWINPFNCTBL
 yes     yes           Std       1 KVS$RLSBFR
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KV$PTR$                          r    KV_VDH_GETBFR                    r    KV_VDH_RLSBFR
     KV_MAXUFTSIZ                     r    G$ROS$
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:33   


        1        1        /*M* KVM$UIFT  User Input Function Table update routine */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*     NSO,PLM=3,SQB=Y,AND=Y,ENI=0,SDI=3,MCL=10,CSI=0,ECI=0,IND=0,IAD=3 */
        8        8        /*P*
        9        9            NAME: KVM$UIFT
       10       10            PURPOSE:
       11       11                  To update the user input function table according to the
       12       12                  commands entered through IMP.
       13       13        */
       14       14        /*D*
       15       15            NAME: KVM$UIFT
       16       16            CALL: CALL KVM$UIFT(KV$VDH_SETPRM)
       17       17            PARAMETERS:
       18       18                  The KV$VDH_SETPRM structures that frames a block of
       19       19                  KV$PRM_(DCL/RLS)INPFNC structures.
       20       20            INTERFACE:
       21       21                  It calls KVS$GETBFR and KVS$RLSBFR to get and release
       22       22                  shared buffers while modifying the table.
       23       23                  It calls KHD$SCREECH if there is an error in the parameter.
       24       24                  It calls KVI$NEWINPFNCTBL to clean up the table.
       25       25            DESCRIPTION:
       26       26                  Looks at each KV$PRM_... structure and perform the adding
       27       27                  or deleting of input functions in the table.
       28       28        */
       29       29        KVM$UIFT: PROC (KV$VDH_SETPRM);

     29   1 000000  D380 0000 0000  xent KVM$UIFT        LNJ,B5   X6A_AUTO_1
          1 000003       0052 0001                       DC       82,1

       30       30
       31       31 S      %INCLUDE KV$GLB;
       32       32 S      %INCLUDE KV$GLBCTX;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:34   
       33       33        %INCLUDE KV$INPFNC;
       34      592 S      %INCLUDE KV$INT;
       35      593 S      %INCLUDE KV$VDH;
       36      594        %INCLUDE KV$PRM;
       37      807        %INCLUDE KV_ERRORS_C;                   /* error code equates                 */
       38      867 S      %INCLUDE KV_GLBCNS_E;
       39      868 S      %INCLUDE KV_PRMID_E;
       40      869
       41      870        %KV_PRM_INPFNC_E;
       42      880
       43      881        %KV_INPFNC_E;                           /*  VDH INPUT FUNCTION DEFS           */
       44      895        %KV_STRTYP_E;
       45      933        %KV$VDH_SETPRM(STCLASS="");        /* the parameter with which UIFT is called */
       46      995        %KV$STR;
       47     1082        %KV$MVD;                                /*  MASTER VIRT. DEVICE CONTEXT       */
       48     1126        %KV$INPFNCTBL(STCLASS = "BASED(FNCTBL$)");
       49     1210        %KV$INPOPR (STCLASS="BASED(TO$)");
       50     1309        %KV_INPOPR_E;
       51     1322        %KV$PTR;                                /*  VDH POINTER BLOCK                 */
       52     1365        %KV$SHRBFR;                             /*  SHARED BUFFER TEMPLATE            */
       53     1397        %KV$VDI;                                /*  NEEDED TO GET USER PRAM$          */
       54     1468        %KV$PRM_DCLINPFNC(STCLASS = "BASED(MSG$)");
       55     1511        %KV$PRM_RLSINPFNC(STCLASS = "BASED(MSG$)");
       56     1541
       57     1542    1   DCL ORGUSRTBL$ PTR;
       58     1543    1   DCL FNCTBL$ PTR;
       59     1544    1   DCL TBL$ PTR;
       60     1545    1   DCL ENDMSG$ PTR;
       61     1546    1   DCL MSG$ PTR;
       62     1547    1   DCL TBLTYP UBIN WORD;
       63     1548    1   DCL ERRCODE UBIN WORD;
       64     1549    1   DCL ID_TKN UBIN WORD;
       65     1550    1   DCL ID_TKNTYP UBIN WORD;
       66     1551    1   DCL NEWTBLSIZ UBIN WORD;
       67     1552    1   DCL INPOPR_SIZ SBIN WORD;
       68     1553    1   DCL PRM_LNG SBIN WORD;
       69     1554    1   DCL DLT_INPOPR_SIZ SBIN WORD;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:35   
       70     1555    1   DCL ADD_SIZ UBIN WORD;
       71     1556    1   DCL DLT_FNC_CNT SBIN WORD;
       72     1557    1   DCL TTL_ID_CNT UBIN WORD;
       73     1558
       74     1559    1   DCL ID_CHR_ARY$ PTR;
       75     1560    1   DCL ID_CHR_ARY(0:0) UBIN BYTE CALIGNED BASED(ID_CHR_ARY$);
       76     1561    1   DCL OPRX_ARY$ PTR;
       77     1562    1   DCL OPRX_ARY(0:0) SBIN WORD BASED(OPRX_ARY$);
       78     1563
       79     1564    1   DCL SRCLOWX SBIN WORD;
       80     1565    1   DCL SRCHGHX SBIN WORD;
       81     1566    1   DCL MATCHX SBIN WORD;
       82     1567    1   DCL FND BIT(1);
       83     1568    1   DCL TBL_END SBIN WORD;
       84     1569    1   DCL UPBND SBIN WORD;
       85     1570    1   DCL LWBND SBIN WORD;
       86     1571    1   DCL I SBIN;
       87     1572    1   DCL Y@BYTSIZ UBIN;
       88     1573
       89     1574    1   DCL TRBL BIT(1);
       90     1575
       91     1576    1   DCL FRM$ PTR;
       92     1577    1   DCL TO$ PTR;
       93     1578    1   DCL WRD_TO_MOV UBIN;
       94     1579    1   DCL WRD_TO_MOV_S REDEF WRD_TO_MOV SBIN;
       95     1580
       96     1581        %KV$VDH_GETBFR(NAME = VDH_GETBFR, STCLASS = "");
       97     1646        %KV$VDH_RLSBFR(NAME = VDH_RLSBFR, STCLASS = "");
       98     1682        %KV$VDH_GETBFR(NAME = KV_VDH_GETBFR, STCLASS = "SYMREF READONLY");
       99     1747        %KV$VDH_RLSBFR(NAME = KV_VDH_RLSBFR, STCLASS = "SYMREF READONLY");
      100     1783
      101     1784    1   DCL KV_MAXUFTSIZ UBIN SYMREF;
      102     1785
      103     1786        /* constant input function table header for initialization  */
      104     1787
      105     1788        %KV_FNCID (NAME=KV_INPFNCTBL);
      106     1875        %EQU KV_INPOPR0=KV_INPOPRX;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:36   
      107     1876        %KV$INPFNCTBL (NAME=FOR_INIT, STCLASS=EXT);
      108     1960
      109     1961        /* CHARS FOR MOVES */
      110     1962    1   DCL CHARS CHAR(255) BASED;
      111     1963
      112     1964
      113     1965        /* external procs and entries */
      114     1966
      115     1967
      116     1968    1   DCL KVS$GETBFR ENTRY(1) ALTRET;
      117     1969    1   DCL KVS$RLSBFR ENTRY(1) ALTRET;
      118     1970    1   DCL KVI$NEWINPFNCTBL ENTRY;
      119     1971
      120     1972        %EQU TBL_LST = KV_INPFNCTYP_SHFFNCKEY;
      121     1973        %EQU KV_INPFNCTYP_LST = TBL_LST;
      122     1974
      123     1975        /* Set up pointers, shared bufs, validate message..                 */
      124     1976
      125     1977    1      CALL Y$SETUP ;

   1977   1 000005  E3C0 0052                            LNJ,B6   s:0,PREL
          1 000007       0001                            DC       s:1982,PREL

      126     1978
      127     1979        /* Process the KV$PRM declare and release functions. - loop until              */
      128     1980        /* at end of message buffer or until the trouble flag is set.                 */
      129     1981
      130     1982    2      DO WHILE ((MSG$ < ENDMSG$) AND NOT TRBL);

   1982   1 000008  0F81 003F                            B        s:2012,PREL

      131     1983
      132     1984        /* Branch on KV$PRM TYPE - Declare and release are only ones valid.           */
      133     1985
      134     1986    3         DO SELECT(KV$PRM_RLSINPFNC.TYP);

   1986   1 00000A  ECC7 000E                            LDB,B6   MSG$,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:37   
          1 00000C  E286                                 LLH,R6   ,B6
          1 00000D  E970 0004                            CMR,R6   4,IMO
          1 00000F  0201 002A                            BL       s:2000,PREL
          1 000011  0901 0006                            BE       s:1990,PREL
          1 000013  6D0A                                 CMV,R6   10
          1 000014  0981 0025                            BNE      s:2000,PREL
          1 000016  0F81 0017                            B        s:1996,PREL

      135     1987
      136     1988    3            SELECT(%KV_PRM_IMP_TYP_DCLINPFNC);

      137     1989        /* Adjust length to words (NOTE. LNG IS ALWAYS AN EVEN NO.)                   */
      138     1990    3            PRM_LNG = KV$PRM_DCLINPFNC.LNG/2+2;

   1990   1 000018  D846 0001                            LDR,R5   1,B6
          1 00001A  5041                                 SOR,R5   1
          1 00001B  5E02                                 ADV,R5   2
          1 00001C  DF47 0016                            STR,R5   PRM_LNG,AUTO

      139     1991    3            IF PINCRW(MSG$, PRM_LNG) <= ENDMSG$

   1991   1 00001E  B855                                 LDR,R3   R5
          1 00001F  DBB6                                 LAB,B5   ,B6,R3
          1 000020  DDC7 000C                            CMB,B5   ENDMSG$,AUTO
          1 000022  0301 001E                            BG       s:2010,PREL
          1 000024  C846 0001                            LDR,R4   1,B6
          1 000026  4D07                                 CMV,R4   7
          1 000027  0381 0019                            BLE      s:2010,PREL

      140     1992    3              AND KV$PRM_DCLINPFNC.LNG > SIZEC(KV$PRM_DCLINPFNC)-3
      141     1993    3            THEN CALL Y$ADD ;

   1993   1 000029  E3C0 0322                            LNJ,B6   s:0,PREL
          1 00002B       0001                            DC       s:1993+3,PREL
          1 00002C  0F81 0014                            B        s:2010,PREL

      142     1994
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:38   
      143     1995    3            SELECT(%KV_PRM_IMP_TYP_RLSINPFNC);

      144     1996    3            PRM_LNG = KV$PRM_RLSINPFNC.LNG/2 + 1;

   1996   1 00002E  D806                                 LDR,R5   ,B6
          1 00002F  D570 00FF                            AND,R5   255,IMO
          1 000031  5041                                 SOR,R5   1
          1 000032  5E01                                 ADV,R5   1
          1 000033  DF47 0016                            STR,R5   PRM_LNG,AUTO

      145     1997    3            CALL Y$DELETE ;

   1997   1 000035  E3C0 00BA                            LNJ,B6   s:0,PREL
          1 000037       0001                            DC       s:1997+3,PREL
          1 000038  0F81 0008                            B        s:2010,PREL

      146     1998
      147     1999    3            SELECT (ELSE);

      148     2000    3         ERRCODE = %E$IMP_ILGCMNTYP;

   2000   1 00003A  D870 057C                            LDR,R5   1404,IMO
          1 00003C  DF47 0011                            STR,R5   ERRCODE,AUTO

      149     2001        /*E* ERROR: KVM-E$IMP_ILGCMNTYP-E
      150     2002             MESSAGE:Bad IMP command or function type.
      151     2003             MESSAGE1:IMP command not ADD or DELETE, or function type not one of:
      152     2004                      PRIMARY or SECONDARY ESCAPE, SPECIAL CHAR, CONTROL STRING,
      153     2005                      FUNCTION KEY, or SHIFTED FUNCTION KEY.
      154     2006        */
      155     2007    3         CALL Y$PROCESS_ERR ;

   2007   1 00003E  E3C0 084D                            LNJ,B6   s:0,PREL
          1 000040       0001                            DC       s:2010,PREL

      156     2008    3         END /* SELECT */;

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:39   
      157     2009
      158     2010    2      MSG$ = PINCRW (MSG$, PRM_LNG);

   2010   1 000041  ECC7 000E                            LDB,B6   MSG$,AUTO
          1 000043  B847 0016                            LDR,R3   PRM_LNG,AUTO
          1 000045  DBB6                                 LAB,B5   ,B6,R3
          1 000046  DFC7 000E                            STB,B5   MSG$,AUTO

      159     2011
      160     2012    2      END /* LOOP */;

   2012   1 000048  ECC7 000E                            LDB,B6   MSG$,AUTO
          1 00004A  EDC7 000C                            CMB,B6   ENDMSG$,AUTO
          1 00004C  0281 0005                            BGE      s:2016,PREL
          1 00004E  89C7 0028                            CMZ      TRBL,AUTO
          1 000050  0881 FFB9                            BAGE     s:1986,PREL

      161     2013
      162     2014        /* Clean up any empty space in tables or copied buffers.                      */
      163     2015
      164     2016    1      CALL Y$CLEANUP ;

   2016   1 000052  E3C0 063D                            LNJ,B6   s:0,PREL
          1 000054       0001                            DC       s:2017,PREL

      165     2017    1      RETURN;

   2017   1 000055  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      166     2018        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:40   
      167     2019        /*F* NAME: Y$SETUP
      168     2020             PURPOSE:
      169     2021                   Set up some pointers. Make a copy of the table to be
      170     2022                   modified if there are more than one user on it.
      171     2023        */
      172     2024
      173     2025    1   Y$SETUP: PROC;

   2025   1 000058  EFC7 0040            Y$SETUP         STB,B6   VDH_RLSBFR+7,AUTO

      174     2026
      175     2027
      176     2028        /* INIT UIFT DATA                                                           */
      177     2029
      178     2030    2      TRBL = '0'B;

   2030   1 00005A  8747 0028                            CL       TRBL,AUTO

      179     2031    2      ERRCODE = 0;

   2031   1 00005C  8747 0011                            CL       ERRCODE,AUTO

      180     2032
      181     2033        /* SET UP POINTER TO THE MESSAGE (FIRST KV$PRM STRUCTURE)                     */
      182     2034
      183     2035    2      MSG$ = PINCRW(KV$VDH_SETPRM.VAL_.ADR$, KV$VDH_SETPRM.VAL_.BYTX/2);

   2035   1 00005E  DCC7 0004                            LDB,B5   @KV$VDH_SETPRM,AUTO
          1 000060  E845 0005                            LDR,R6   5,B5
          1 000062  E370 0002                            DIV,R6   2,IMO
          1 000064  CCC5 0003                            LDB,B4   3,B5
          1 000066  B856                                 LDR,R3   R6
          1 000067  BBB4                                 LAB,B3   ,B4,R3
          1 000068  BFC7 000E                            STB,B3   MSG$,AUTO

      184     2036
      185     2037        /* CALCULATE END OF MESSAGE AND SET POINTER TO IT                             */
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:41   
      186     2038
      187     2039    2      ENDMSG$ = PINCRW(KV$VDH_SETPRM.VAL_.ADR$, (KV$VDH_SETPRM.VAL_.BYTSIZ+1)/2);

   2039   1 00006A  E845 0006                            LDR,R6   6,B5
          1 00006C  6E01                                 ADV,R6   1
          1 00006D  6041                                 SOR,R6   1
          1 00006E  CFC7 0050                            STB,B4   J+2,AUTO
          1 000070  F856                                 LDR,R7   R6
          1 000071  6C00                                 LDV,R6   0
          1 000072  8447 0050                            AID      J+2,AUTO
          1 000074  8D47 000C                            SDI      ENDMSG$,AUTO

      188     2040    2      FNCTBL$ = %KV_MVD.USRINPFNCTBL$;

   2040   1 000076  AC80 0000 0000  xsym                 LDB,B2   KV$PTR$
          1 000079  9CC2 0006                            LDB,B1   6,B2
          1 00007B  ECC1 0008                            LDB,B6   8,B1
          1 00007D  EFC7 0008                            STB,B6   FNCTBL$,AUTO

      189     2041    2      ORGUSRTBL$ = FNCTBL$;

   2041   1 00007F  EFC7 0006                            STB,B6   ORGUSRTBL$,AUTO

      190     2042
      191     2043    3      IF (FNCTBL$ ~= ADDR(NIL)) THEN DO;

   2043   1 000081  8DC7 0008                            CMN      FNCTBL$,AUTO
          1 000083  0901 004B                            BE       s:2076,PREL

      192     2044    4         IF (ORGUSRTBL$->KV$SHRBFR.USRCNT > 1) THEN DO;

   2044   1 000085  D846 0003                            LDR,R5   3,B6
          1 000087  5D01                                 CMV,R5   1
          1 000088  0381 0044                            BLE      s:2071,PREL

      193     2045        /* If more than 1 user, make a copy of the table and work on it.              */
      194     2046
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:42   
      195     2047    4            VDH_GETBFR = KV_VDH_GETBFR;

   2047   1 00008A  AB80 0000 0000  xsym                 LAB,B2   KV_VDH_GETBFR
          1 00008D  2C00                                 LDV,R2   0
          1 00008E  6C16                                 LDV,R6   22
          1 00008F  BB87                                 LAB,B3   ,AUTO
          1 000090  3C5C                                 LDV,R3   92
          1 000091  0008                                 MMM

      196     2048    4            VDH_GETBFR.STRTYP = %KV_STRTYP_USRINPFNCTBL;

   2048   1 000092  6C1A                                 LDV,R6   26
          1 000093  E7C7 0034                            STH,R6   VDH_GETBFR+6,AUTO

      197     2049    4            VDH_GETBFR.DAT_.BYTSIZ = KV$INPFNCTBL.BYTSIZ-LENGTHC(KV$SHRBFR);

   2049   1 000095  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000097  D846 0002                            LDR,R5   2,B6
          1 000099  5EF8                                 ADV,R5   -8
          1 00009A  DF47 0038                            STR,R5   VDH_GETBFR+10,AUTO

      198     2050    4            VDH_GETBFR.DAT_.ADR$ = FNCTBL$;

   2050   1 00009C  EFC7 0035                            STB,B6   VDH_GETBFR+7,AUTO

      199     2051    4            VDH_GETBFR.DAT_.BYTX = LENGTHC(KV$SHRBFR);

   2051   1 00009E  4C08                                 LDV,R4   8
          1 00009F  CF47 0037                            STR,R4   VDH_GETBFR+9,AUTO

      200     2052    4            VDH_GETBFR.SHRBFR = '0'B;

   2052   1 0000A1  8847 0034                            LBF,'00E0'X       VDH_GETBFR+6,AUTO
   2052   1 0000A3       00E0

      201     2053    4            VDH_GETBFR.SHRBFR.GET = '1'B;

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:43   
   2053   1 0000A4  8947 0034                            LBT,'0040'X       VDH_GETBFR+6,AUTO
   2053   1 0000A6       0040

      202     2054    4            VDH_GETBFR.SCRNO_MMR = '0'B;

   2054   1 0000A7  8847 0034                            LBF,'0001'X       VDH_GETBFR+6,AUTO
   2054   1 0000A9       0001

      203     2055    4            CALL KVS$GETBFR(VDH_GETBFR)

   2055   1 0000AA  CBC7 002E                            LAB,B4   VDH_GETBFR,AUTO
          1 0000AC  CFC7 0050                            STB,B4   J+2,AUTO
          1 0000AE  BBC7 0050                            LAB,B3   J+2,AUTO
          1 0000B0  CBF0 0100                            LAB,B4   256,IMO
          1 0000B2  E380 0000 0000  xent                 LNJ,B6   KVS$GETBFR
          1 0000B5       000A                            DC       s:2060,PREL

      204     2056    5            WHENRETURN DO;

      205     2057    5               FNCTBL$ = VDH_GETBFR.BFR$;

   2057   1 0000B6  ECC7 002F                            LDB,B6   VDH_GETBFR+1,AUTO
          1 0000B8  EFC7 0008                            STB,B6   FNCTBL$,AUTO

      206     2058    5               FNCTBL$->KV$SHRBFR.USRCNT = 1;

   2058   1 0000BA  6C01                                 LDV,R6   1
          1 0000BB  EF46 0003                            STR,R6   3,B6

      207     2059    5            END; WHENALTRETURN DO;

   2059   1 0000BD  0F81 000D                            B        s:2067,PREL

      208     2060    5               ERRCODE = %E$IMP_CNTGETMMR;

   2060   1 0000BF  E870 057F                            LDR,R6   1407,IMO
          1 0000C1  EF47 0011                            STR,R6   ERRCODE,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:44   

      209     2061        /*E* ERROR: KVM-E$IMP_CNTGETMMR-C
      210     2062             MESSAGE:Can't get memory for your IMP table.
      211     2063        */
      212     2064    5               CALL Y$PROCESS_ERR;

   2064   1 0000C3  E3C0 07C8                            LNJ,B6   s:0,PREL
          1 0000C5       0001                            DC       s:2065,PREL

      213     2065    5               FNCTBL$ = ADDR(NIL);

   2065   1 0000C6  EB80 0000 0000                       LAB,B6   0
          1 0000C9  EFC7 0008                            STB,B6   FNCTBL$,AUTO

      214     2066    5            END;

      215     2067    4         END;

   2067   1 0000CB  0F81 0003                            B        s:2076,PREL

      216     2068    3         ELSE
      217     2069        /* USRCNT is 1. We'll modify it directly, but first set USRCNT to
      218     2070        0 to make it find-inhibited. */
      219     2071    3         FNCTBL$->KV$SHRBFR.USRCNT = 0;

   2071   1 0000CD  8746 0003                            CL       3,B6

      220     2072    3      END /* IF FNCTBL$ ~= ADDR(NIL) */;

      221     2073
      222     2074        /* Calculate the total number of identifiers in the table */
      223     2075
      224     2076    2      TTL_ID_CNT = 0;

   2076   1 0000CF  8747 001A                            CL       TTL_ID_CNT,AUTO

      225     2077    2      TBL_END = SIZEW(KV$INPFNCTBL);
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:45   

   2077   1 0000D1  6C2E                                 LDV,R6   46
          1 0000D2  EF47 0023                            STR,R6   TBL_END,AUTO

      226     2078    3      IF FNCTBL$ ~= ADDR(NIL) THEN DO;

   2078   1 0000D4  8DC7 0008                            CMN      FNCTBL$,AUTO
          1 0000D6  0901 0015                            BE       s:2083,PREL

      227     2079    3         TTL_ID_CNT = KV$INPFNCTBL.ID_CHRCNT(%TBL_LST) +

   2079   1 0000D8  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 0000DA  D846 000A                            LDR,R5   10,B6
          1 0000DC  D570 00FF                            AND,R5   255,IMO
          1 0000DE  DA46 0027                            ADD,R5   39,B6
          1 0000E0  D246 0022                            SUB,R5   34,B6
          1 0000E2  DF47 001A                            STR,R5   TTL_ID_CNT,AUTO

      228     2080    3           KV$INPFNCTBL.ID_CHROFS(%TBL_LST) - KV$INPFNCTBL.ID_CHROFS(0);
      229     2081    3         TBL_END = (TTL_ID_CNT+KV$INPFNCTBL.ID_CHROFS(0)+1)/2;

   2081   1 0000E4  DA46 0022                            ADD,R5   34,B6
          1 0000E6  5E01                                 ADV,R5   1
          1 0000E7  D370 0002                            DIV,R5   2,IMO
          1 0000E9  E855                                 LDR,R6   R5
          1 0000EA  EF47 0023                            STR,R6   TBL_END,AUTO

      230     2082    3      END;

      231     2083    2      RETURN;

   2083   1 0000EC  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 0000EE  C3C6 0001                            LNJ,B4   1,B6

      232     2084    2   END Y$SETUP;
      233     2085        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:46   
      234     2086
      235     2087        /*I*
      236     2088            NAME: Y$DELETE
      237     2089            PURPOSE:
      238     2090                  The function to perform is delete. It may be delete all,
      239     2091                  delete one table type, or delete one function.
      240     2092        */
      241     2093
      242     2094    1   Y$DELETE: PROC;

   2094   1 0000F0  EFC7 0040            Y$DELETE        STB,B6   VDH_RLSBFR+7,AUTO

      243     2095
      244     2096    2      IF (FNCTBL$ = ADDR(NIL)) THEN RETURN; /* no table to delete                */

   2096   1 0000F2  8DC7 0008                            CMN      FNCTBL$,AUTO
          1 0000F4  0981 0005                            BNE      s:2100,PREL

   2096   1 0000F6  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 0000F8  C3C6 0001                            LNJ,B4   1,B6

      245     2097
      246     2098        /* Verify release input function structure */
      247     2099
      248     2100    2      TBLTYP = KV$PRM_RLSINPFNC.INPFNCTYP;

   2100   1 0000FA  DCC7 000E                            LDB,B5   MSG$,AUTO
          1 0000FC  E845 0001                            LDR,R6   1,B5
          1 0000FE  6041                                 SOR,R6   1
          1 0000FF  E570 000F                            AND,R6   15,IMO
          1 000101  EF47 0010                            STR,R6   TBLTYP,AUTO

      249     2101    3      IF (TBLTYP > %KV_INPFNCTYP_LST) THEN DO;

   2101   1 000103  6D05                                 CMV,R6   5
          1 000104  0381 000C                            BLE      s:2107,PREL

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:47   
      250     2102    3         ERRCODE = %E$IMP_ILGCMNTYP;

   2102   1 000106  D870 057C                            LDR,R5   1404,IMO
          1 000108  DF47 0011                            STR,R5   ERRCODE,AUTO

      251     2103    3         CALL Y$PROCESS_ERR;

   2103   1 00010A  E3C0 0781                            LNJ,B6   s:0,PREL
          1 00010C       0001                            DC       s:2104,PREL

      252     2104    3         RETURN;

   2104   1 00010D  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 00010F  C3C6 0001                            LNJ,B4   1,B6

      253     2105    3      END;
      254     2106
      255     2107    3      IF KV$PRM_RLSINPFNC.ID_TKNTYP > %KV_INPFNCTKNTYP_HI THEN DO;

   2107   1 000111  D845 0001                            LDR,R5   1,B5
          1 000113  5045                                 SOR,R5   5
          1 000114  D570 0007                            AND,R5   7,IMO
          1 000116  5D03                                 CMV,R5   3
          1 000117  0381 000C                            BLE      s:2118,PREL

      256     2108    3         ERRCODE = %E$IMP_ILGID_TKNTYP;

   2108   1 000119  C870 057D                            LDR,R4   1405,IMO
          1 00011B  CF47 0011                            STR,R4   ERRCODE,AUTO

      257     2109        /*E* ERROR: KVM-E$IMP_ILGID_TKNTYP-E
      258     2110             MESSAGE:this error never happens.
      259     2111        */
      260     2112    3         CALL Y$PROCESS_ERR;

   2112   1 00011D  E3C0 076E                            LNJ,B6   s:0,PREL
          1 00011F       0001                            DC       s:2113,PREL
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:48   

      261     2113    3         RETURN;

   2113   1 000120  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 000122  C3C6 0001                            LNJ,B4   1,B6

      262     2114    3      END /* IF */;
      263     2115
      264     2116        /* Clear the table or call Y$DLT_CMN according to the ALLINPFNCTYP bit. */
      265     2117
      266     2118    3      IF KV$PRM_RLSINPFNC.ALLINPFNCTYP THEN DO;

   2118   1 000124  82C5 0001                            LB,'0001'X        1,B5
   2118   1 000126       0001
          1 000127  0581 0022                            BBF      s:2129,PREL

      267     2119    3         Y@BYTSIZ = KV$INPFNCTBL.BYTSIZ;   /* save the byte size                 */

   2119   1 000129  CCC7 0008                            LDB,B4   FNCTBL$,AUTO
          1 00012B  C844 0002                            LDR,R4   2,B4
          1 00012D  CF47 0027                            STR,R4   Y@BYTSIZ,AUTO

      268     2120    3         SUBSTR(FNCTBL$->CHARS,SIZEC(KV$SHRBFR),

   2120   1 00012F  AB80 0000 0000  00                   LAB,B2   KV_INPFNCTBL
          1 000132  2C08                                 LDV,R2   8
          1 000133  6C54                                 LDV,R6   84
          1 000134  BB84                                 LAB,B3   ,B4
          1 000135  3C08                                 LDV,R3   8
          1 000136  0008                                 MMM

      269     2121    3           SIZEC(KV$INPFNCTBL)-SIZEC(KV$SHRBFR))
      270     2122    3           = SUBSTR(ADDR(KV_INPFNCTBL.FOR_INIT)->CHARS,SIZEC(KV$SHRBFR),
      271     2123    3           SIZEC(KV$INPFNCTBL)-SIZEC(KV$SHRBFR));
      272     2124    3         KV$INPFNCTBL.BYTSIZ = Y@BYTSIZ;   /* restore byte size                  */

   2124   1 000137  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:49   
          1 000139  E847 0027                            LDR,R6   Y@BYTSIZ,AUTO
          1 00013B  EF46 0002                            STR,R6   2,B6

      273     2125    3         TBL_END = SIZEW(KV$INPFNCTBL);

   2125   1 00013D  5C2E                                 LDV,R5   46
          1 00013E  DF47 0023                            STR,R5   TBL_END,AUTO

      274     2126    3         KV$INPFNCTBL.FREWRDSIZ = Y@BYTSIZ/2 - TBL_END;

   2126   1 000140  6041                                 SOR,R6   1
          1 000141  E255                                 SUB,R6   R5
          1 000142  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000144  EF46 002D                            STR,R6   45,B6

      275     2127    3         TTL_ID_CNT = 0;

   2127   1 000146  8747 001A                            CL       TTL_ID_CNT,AUTO

      276     2128    3      END;

   2128   1 000148  0F81 0034                            B        s:2143,PREL

      277     2129    3      ELSE IF (KV$INPFNCTBL.ID_CHRCNT(TBLTYP) > 0) THEN DO;

   2129   1 00014A  CCC7 0008                            LDB,B4   FNCTBL$,AUTO
          1 00014C  B856                                 LDR,R3   R6
          1 00014D  3E10                                 ADV,R3   16
          1 00014E  C2B4                                 LLH,R4   ,B4,R3
          1 00014F  4901 002D                            BEZ,R4   s:2143,PREL

      278     2130    3         ID_TKNTYP = KV$PRM_RLSINPFNC.ID_TKNTYP;

   2130   1 000151  DF47 0013                            STR,R5   ID_TKNTYP,AUTO

      279     2131    3         ID_TKN = KV$PRM_RLSINPFNC.ID_TKN;

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:50   
   2131   1 000153  C2C5 0001                            LLH,R4   1,B5
          1 000155  CF47 0012                            STR,R4   ID_TKN,AUTO

      280     2132    4         IF (ID_TKNTYP ~= %KV_INPFNCTKNTYP_NON) THEN DO;

   2132   1 000157  5D03                                 CMV,R5   3
          1 000158  0901 0006                            BE       s:2136,PREL

      281     2133    4            DLT_FNC_CNT = 1;

   2133   1 00015A  2C01                                 LDV,R2   1
          1 00015B  AF47 0019                            STR,R2   DLT_FNC_CNT,AUTO

      282     2134    4         END;

   2134   1 00015D  0F81 0004                            B        s:2139,PREL

      283     2135    4         ELSE DO;

      284     2136    4            DLT_FNC_CNT = KV$INPFNCTBL.ID_CHRCNT(TBLTYP);

   2136   1 00015F  A2B4                                 LLH,R2   ,B4,R3
          1 000160  AF47 0019                            STR,R2   DLT_FNC_CNT,AUTO

      285     2137    4         END;

      286     2138
      287     2139    3         CALL Y$SRC(TBLTYP,ID_TKNTYP,ID_TKN);

   2139   1 000162  BBC7 0012                            LAB,B3   ID_TKN,AUTO
          1 000164  BFC7 004C                            STB,B3   @Y@SRC_ID_TKNTYP+2,AUTO
          1 000166  ABC7 0013                            LAB,B2   ID_TKNTYP,AUTO
          1 000168  AFC7 004A                            STB,B2   Y@X+2,AUTO
          1 00016A  9BC7 0010                            LAB,B1   TBLTYP,AUTO
          1 00016C  9FC7 0048                            STB,B1   @Y@BFR$+2,AUTO
          1 00016E  E3C0 0012                            LNJ,B6   s:0,PREL
          1 000170       0001                            DC       s:2140,PREL
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:51   

      288     2140    3         IF (ID_TKNTYP = %KV_INPFNCTKNTYP_NON OR FND) THEN

   2140   1 000171  E847 0013                            LDR,R6   ID_TKNTYP,AUTO
          1 000173  6D03                                 CMV,R6   3
          1 000174  0901 0005                            BE       s:2141,PREL
          1 000176  89C7 0022                            CMZ      FND,AUTO
          1 000178  0881 0004                            BAGE     s:2143,PREL

      289     2141    3         CALL Y$DLT_CMN;

   2141   1 00017A  E3C0 005E                            LNJ,B6   s:0,PREL
          1 00017C       0001                            DC       s:2143,PREL

      290     2142    3      END;

      291     2143    2      RETURN;

   2143   1 00017D  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 00017F  C3C6 0001                            LNJ,B4   1,B6

      292     2144    2   END Y$DELETE;
      293     2145        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:52   
      294     2146
      295     2147        /*F*
      296     2148             NAME: Y$SRC
      297     2149             PURPOSE:
      298     2150                   To find the Y@SRC_ID_TKN in the array of ID_CHR's for the
      299     2151                   specified Y@SRC_TBLTYP. FND will indicate whether the
      300     2152                   search was successful or not.
      301     2153        */
      302     2154
      303     2155    1   Y$SRC: PROC (Y@SRC_TBLTYP, Y@SRC_ID_TKNTYP, Y@SRC_ID_TKN);

   2155   1 000181  EFC7 0046            Y$SRC           STB,B6   INT1_TKNTYP+4,AUTO

      304     2156
      305     2157    2   DCL Y@SRC_TBLTYP UBIN;
      306     2158    2   DCL Y@SRC_ID_TKNTYP UBIN;
      307     2159    2   DCL Y@SRC_ID_TKN UBIN;
      308     2160    2   DCL 1 Y@SRC_CHR REDEF Y@SRC_ID_TKN,
      309     2161    2          2 * BIT(8),
      310     2162    2          2 C CHAR(1);
      311     2163    2   DCL J UBIN;
      312     2164    2   DCL 1 JB REDEF J,
      313     2165    2          2 * BIT(8),
      314     2166    2          2 N UBIN(8) UNAL;
      315     2167
      316     2168    2      ID_CHR_ARY$ = PINCRW(FNCTBL$, KV$INPFNCTBL.ID_CHROFS(0)/2);

   2168   1 000183  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 000185  E845 0022                            LDR,R6   34,B5
          1 000187  E370 0002                            DIV,R6   2,IMO
          1 000189  B856                                 LDR,R3   R6
          1 00018A  CBB5                                 LAB,B4   ,B5,R3
          1 00018B  CFC7 001B                            STB,B4   ID_CHR_ARY$,AUTO

      317     2169    2      SRCLOWX = KV$INPFNCTBL.ID_CHROFS(Y@SRC_TBLTYP)-KV$INPFNCTBL.ID_CHROFS(0);

   2169   1 00018D  BCC7 0048                            LDB,B3   @Y@SRC_TBLTYP,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:53   
          1 00018F  B803                                 LDR,R3   ,B3
          1 000190  BF47 0050                            STR,R3   J+2,AUTO
          1 000192  3E22                                 ADV,R3   34
          1 000193  B847 0050                            LDR,R3   J+2,AUTO
          1 000195  3E22                                 ADV,R3   34
          1 000196  E835                                 LDR,R6   ,B5,R3
          1 000197  E245 0022                            SUB,R6   34,B5
          1 000199  EF47 001F                            STR,R6   SRCLOWX,AUTO

      318     2170    2      J = KV$INPFNCTBL.ID_CHRCNT(Y@SRC_TBLTYP);

   2170   1 00019B  A803                                 LDR,R2   ,B3
          1 00019C  2E10                                 ADV,R2   16
          1 00019D  D2A5                                 LLH,R5   ,B5,R2
          1 00019E  DF47 004E                            STR,R5   J,AUTO

      319     2171    2      SRCHGHX = SRCLOWX + J - 1;

   2171   1 0001A0  EA55                                 ADD,R6   R5
          1 0001A1  6EFF                                 ADV,R6   -1
          1 0001A2  EF47 0020                            STR,R6   SRCHGHX,AUTO

      320     2172
      321     2173        /* Start searching for the identifier */
      322     2174
      323     2175    2      MATCHX = SRCLOWX;

   2175   1 0001A4  C847 001F                            LDR,R4   SRCLOWX,AUTO
          1 0001A6  CF47 0021                            STR,R4   MATCHX,AUTO

      324     2176    2      FND = '0'B;

   2176   1 0001A8  8747 0022                            CL       FND,AUTO

      325     2177    2      IF (Y@SRC_ID_TKNTYP ~= %KV_INPFNCTKNTYP_NON) AND J>0 THEN

   2177   1 0001AA  ACC7 004A                            LDB,B2   @Y@SRC_ID_TKNTYP,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:54   
          1 0001AC  A802                                 LDR,R2   ,B2
          1 0001AD  2D03                                 CMV,R2   3
          1 0001AE  0901 0026                            BE       s:2183,PREL
          1 0001B0  5901 0024                            BEZ,R5   s:2183,PREL

      326     2178    2      CALL INDEX (J, Y@SRC_CHR.C,

   2178   1 0001B2  9847 004E                            LDR,R1   J,AUTO
          1 0001B4  9570 00FF                            AND,R1   255,IMO
          1 0001B6  9CC7 004C                            LDB,B1   @Y@SRC_ID_TKN,AUTO
          1 0001B8  B854                                 LDR,R3   R4
          1 0001B9  E851                                 LDR,R6   R1
          1 0001BA  EA70 0100                            ADD,R6   256,IMO
          1 0001BC  0028                                 SRH      ;
          1 0001BD       C101 0000                                ALPHANUM(0,B1,1,1),;
          1 0001BF       4407 0050                                BINARY(J+2,AUTO,,4),;
          1 0001C1       4034 0000                                ALPHANUM(0,B4,R3,,R6)
          1 0001C3  5381 0006                            CBE      s:2178+24,PREL
          1 0001C5  D851                                 LDR,R5   R1
          1 0001C6  DF47 004E                            STR,R5   J,AUTO
          1 0001C8  0F81 000C                            B        s:2183,PREL
          1 0001CA  D847 0051                            LDR,R5   J+3,AUTO
          1 0001CC  DF47 004E                            STR,R5   J,AUTO

      327     2179    3        SUBSTR(ID_CHR_ARY$->CHARS,SRCLOWX,JB.N)) WHENRETURN DO;

      328     2180    3         MATCHX = J + SRCLOWX;

   2180   1 0001CE  DA53                                 ADD,R5   R3
          1 0001CF  B855                                 LDR,R3   R5
          1 0001D0  BF47 0021                            STR,R3   MATCHX,AUTO

      329     2181    3         FND = '1'B;

   2181   1 0001D2  8947 0022                            LBT,'8000'X       FND,AUTO
   2181   1 0001D4       8000

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:55   
      330     2182    3      END;

      331     2183    2      RETURN;

   2183   1 0001D5  ECC7 0046                            LDB,B6   INT1_TKNTYP+4,AUTO
          1 0001D7  C3C6 0001                            LNJ,B4   1,B6

      332     2184    2   END Y$SRC;
      333     2185        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:56   
      334     2186
      335     2187        /*F*
      336     2188             NAME: Y$DLT_CMN
      337     2189             PURPOSE:
      338     2190                   To delete a table type or a single function.
      339     2191        */
      340     2192
      341     2193    1   Y$DLT_CMN: PROC ;

   2193   1 0001D9  EFC7 0044            Y$DLT_CMN       STB,B6   INT1_TKNTYP+2,AUTO

      342     2194
      343     2195        /* figure out size of INPOPR to delete */
      344     2196
      345     2197    2      OPRX_ARY$ = PINCRW(FNCTBL$,KV$INPFNCTBL.OPRX_OFS(0));

   2197   1 0001DB  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 0001DD  B845 001C                            LDR,R3   28,B5
          1 0001DF  CBB5                                 LAB,B4   ,B5,R3
          1 0001E0  CFC7 001D                            STB,B4   OPRX_ARY$,AUTO

      346     2198    2      IF MATCHX+DLT_FNC_CNT = TTL_ID_CNT

   2198   1 0001E2  E847 0021                            LDR,R6   MATCHX,AUTO
          1 0001E4  EA47 0019                            ADD,R6   DLT_FNC_CNT,AUTO
          1 0001E6  6801 0009                            BLZ,R6   s:2200,PREL
          1 0001E8  E947 001A                            CMR,R6   TTL_ID_CNT,AUTO
          1 0001EA  0981 0005                            BNE      s:2200,PREL

      347     2199    2      THEN UPBND = KV$INPFNCTBL.OPRX_OFS(0);

   2199   1 0001EC  BF47 0024                            STR,R3   UPBND,AUTO
          1 0001EE  0F81 0009                            B        s:2201,PREL

      348     2200    2      ELSE UPBND = OPRX_ARY(MATCHX+DLT_FNC_CNT);

   2200   1 0001F0  E847 0021                            LDR,R6   MATCHX,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:57   
          1 0001F2  EA47 0019                            ADD,R6   DLT_FNC_CNT,AUTO
          1 0001F4  A856                                 LDR,R2   R6
          1 0001F5  E824                                 LDR,R6   ,B4,R2
          1 0001F6  EF47 0024                            STR,R6   UPBND,AUTO

      349     2201    2      DLT_INPOPR_SIZ = UPBND - OPRX_ARY(MATCHX);

   2201   1 0001F8  A847 0021                            LDR,R2   MATCHX,AUTO
          1 0001FA  E847 0024                            LDR,R6   UPBND,AUTO
          1 0001FC  E224                                 SUB,R6   ,B4,R2
          1 0001FD  EF47 0017                            STR,R6   DLT_INPOPR_SIZ,AUTO

      350     2202
      351     2203        /* move data up to eat up the delete INPOPR(s) */
      352     2204
      353     2205    2      WRD_TO_MOV = TBL_END - UPBND;

   2205   1 0001FF  D847 0023                            LDR,R5   TBL_END,AUTO
          1 000201  D247 0024                            SUB,R5   UPBND,AUTO
          1 000203  DF47 002D                            STR,R5   WRD_TO_MOV,AUTO

      354     2206    2      TO$ = PINCRW(FNCTBL$,OPRX_ARY(MATCHX));

   2206   1 000205  9824                                 LDR,R1   ,B4,R2
          1 000206  BB95                                 LAB,B3   ,B5,R1
          1 000207  BFC7 002B                            STB,B3   TO$,AUTO

      355     2207    2      FRM$ = PINCRW(TO$,DLT_INPOPR_SIZ);

   2207   1 000209  B856                                 LDR,R3   R6
          1 00020A  ABB3                                 LAB,B2   ,B3,R3
          1 00020B  AFC7 0029                            STB,B2   FRM$,AUTO

      356     2208    2      CALL Y$MOVDAT;

   2208   1 00020D  E3C0 062E                            LNJ,B6   s:0,PREL
          1 00020F       0001                            DC       s:2212,PREL
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:58   

      357     2209
      358     2210        /* update offsets */
      359     2211
      360     2212    3      DO I = 0 TO %TBL_LST;

   2212   1 000210  8747 0026                            CL       I,AUTO

      361     2213    3         KV$INPFNCTBL.OPRX_OFS(I) = KV$INPFNCTBL.OPRX_OFS(I) - DLT_INPOPR_SIZ;

   2213   1 000212  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000214  B847 0026                            LDR,R3   I,AUTO
          1 000216  3E1C                                 ADV,R3   28
          1 000217  E836                                 LDR,R6   ,B6,R3
          1 000218  E247 0017                            SUB,R6   DLT_INPOPR_SIZ,AUTO
          1 00021A  EF36                                 STR,R6   ,B6,R3

      362     2214    3         KV$INPFNCTBL.ID_CHROFS(I) = KV$INPFNCTBL.ID_CHROFS(I) -

   2214   1 00021B  E847 0017                            LDR,R6   DLT_INPOPR_SIZ,AUTO
          1 00021D  EA47 0019                            ADD,R6   DLT_FNC_CNT,AUTO
          1 00021F  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000221  A847 0026                            LDR,R2   I,AUTO
          1 000223  2E22                                 ADV,R2   34
          1 000224  6001                                 SOL,R6   1
          1 000225  8256                                 NEG      R6
          1 000226  EA26                                 ADD,R6   ,B6,R2
          1 000227  EF26                                 STR,R6   ,B6,R2

      363     2215    3           (DLT_INPOPR_SIZ + DLT_FNC_CNT) * 2;
      364     2216    3      END;

   2216   1 000228  8AC7 0026                            INC      I,AUTO
          1 00022A  E847 0026                            LDR,R6   I,AUTO
          1 00022C  6D05                                 CMV,R6   5
          1 00022D  0AE5                                 BALE     s:2213,SPREL

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:59   
      365     2217
      366     2218    2      OPRX_ARY$ = PINCRW(FNCTBL$,KV$INPFNCTBL.OPRX_OFS(0));

   2218   1 00022E  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000230  B846 001C                            LDR,R3   28,B6
          1 000232  DBB6                                 LAB,B5   ,B6,R3
          1 000233  DFC7 001D                            STB,B5   OPRX_ARY$,AUTO

      367     2219    2      TBL_END = TBL_END - DLT_INPOPR_SIZ;

   2219   1 000235  D847 0023                            LDR,R5   TBL_END,AUTO
          1 000237  D247 0017                            SUB,R5   DLT_INPOPR_SIZ,AUTO
          1 000239  DF47 0023                            STR,R5   TBL_END,AUTO

      368     2220    3      DO I = (MATCHX + DLT_FNC_CNT) TO (TTL_ID_CNT - 1);

   2220   1 00023B  C847 0021                            LDR,R4   MATCHX,AUTO
          1 00023D  CA47 0019                            ADD,R4   DLT_FNC_CNT,AUTO
          1 00023F  E854                                 LDR,R6   R4
          1 000240  EF47 0026                            STR,R6   I,AUTO
          1 000242  0F81 000B                            B        s:2222+2,PREL

      369     2221    3         OPRX_ARY(I) = OPRX_ARY(I) - DLT_INPOPR_SIZ;

   2221   1 000244  ECC7 001D                            LDB,B6   OPRX_ARY$,AUTO
          1 000246  B847 0026                            LDR,R3   I,AUTO
          1 000248  E836                                 LDR,R6   ,B6,R3
          1 000249  E247 0017                            SUB,R6   DLT_INPOPR_SIZ,AUTO
          1 00024B  EF36                                 STR,R6   ,B6,R3

      370     2222    3      END;

   2222   1 00024C  8AC7 0026                            INC      I,AUTO
          1 00024E  E847 0026                            LDR,R6   I,AUTO
          1 000250  6874                                 BLZ,R6   s:2221,SPREL
          1 000251  E947 001A                            CMR,R6   TTL_ID_CNT,AUTO
          1 000253  0271                                 BL       s:2221,SPREL
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:60   

      371     2223
      372     2224        /* Move up to delete OPRX(s) */
      373     2225
      374     2226    2      WRD_TO_MOV = TBL_END - KV$INPFNCTBL.OPRX_OFS(0) - MATCHX - DLT_FNC_CNT;

   2226   1 000254  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000256  D847 0023                            LDR,R5   TBL_END,AUTO
          1 000258  D246 001C                            SUB,R5   28,B6
          1 00025A  D247 0021                            SUB,R5   MATCHX,AUTO
          1 00025C  D247 0019                            SUB,R5   DLT_FNC_CNT,AUTO
          1 00025E  DF47 002D                            STR,R5   WRD_TO_MOV,AUTO

      375     2227    2      TO$ = PINCRW(FNCTBL$,(KV$INPFNCTBL.OPRX_OFS(0)+MATCHX));

   2227   1 000260  C846 001C                            LDR,R4   28,B6
          1 000262  CA47 0021                            ADD,R4   MATCHX,AUTO
          1 000264  B854                                 LDR,R3   R4
          1 000265  DBB6                                 LAB,B5   ,B6,R3
          1 000266  DFC7 002B                            STB,B5   TO$,AUTO

      376     2228    2      FRM$ = PINCRW(TO$,DLT_FNC_CNT);

   2228   1 000268  B847 0019                            LDR,R3   DLT_FNC_CNT,AUTO
          1 00026A  CBB5                                 LAB,B4   ,B5,R3
          1 00026B  CFC7 0029                            STB,B4   FRM$,AUTO

      377     2229    2      CALL Y$MOVDAT;

   2229   1 00026D  E3C0 05CE                            LNJ,B6   s:0,PREL
          1 00026F       0001                            DC       s:2233,PREL

      378     2230
      379     2231        /* update offsets */
      380     2232
      381     2233    3      DO I = (TBLTYP + 1) TO %TBL_LST;

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:61   
   2233   1 000270  E847 0010                            LDR,R6   TBLTYP,AUTO
          1 000272  6E01                                 ADV,R6   1
          1 000273  EF47 0026                            STR,R6   I,AUTO
          1 000275  0F81 0015                            B        s:2236+2,PREL

      382     2234    3         KV$INPFNCTBL.OPRX_OFS(I) = KV$INPFNCTBL.OPRX_OFS(I) - DLT_FNC_CNT;

   2234   1 000277  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000279  B847 0026                            LDR,R3   I,AUTO
          1 00027B  3E1C                                 ADV,R3   28
          1 00027C  E836                                 LDR,R6   ,B6,R3
          1 00027D  E247 0019                            SUB,R6   DLT_FNC_CNT,AUTO
          1 00027F  EF36                                 STR,R6   ,B6,R3

      383     2235    3         KV$INPFNCTBL.ID_CHROFS(I) = KV$INPFNCTBL.ID_CHROFS(I) - DLT_FNC_CNT;

   2235   1 000280  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000282  A847 0026                            LDR,R2   I,AUTO
          1 000284  2E22                                 ADV,R2   34
          1 000285  E826                                 LDR,R6   ,B6,R2
          1 000286  E247 0019                            SUB,R6   DLT_FNC_CNT,AUTO
          1 000288  EF26                                 STR,R6   ,B6,R2

      384     2236    3      END;

   2236   1 000289  8AC7 0026                            INC      I,AUTO
          1 00028B  E847 0026                            LDR,R6   I,AUTO
          1 00028D  6D05                                 CMV,R6   5
          1 00028E  0AE9                                 BALE     s:2234,SPREL

      385     2237
      386     2238        /* Move up to delete ID_CHR entries */
      387     2239
      388     2240    2      ID_CHR_ARY$ = PINCRW(FNCTBL$,KV$INPFNCTBL.ID_CHROFS(0)/2);

   2240   1 00028F  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000291  D846 0022                            LDR,R5   34,B6
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:62   
          1 000293  D370 0002                            DIV,R5   2,IMO
          1 000295  B855                                 LDR,R3   R5
          1 000296  DBB6                                 LAB,B5   ,B6,R3
          1 000297  DFC7 001B                            STB,B5   ID_CHR_ARY$,AUTO

      389     2241    2      WRD_TO_MOV = TTL_ID_CNT - MATCHX - DLT_FNC_CNT;

   2241   1 000299  D847 001A                            LDR,R5   TTL_ID_CNT,AUTO
          1 00029B  D247 0021                            SUB,R5   MATCHX,AUTO
          1 00029D  D247 0019                            SUB,R5   DLT_FNC_CNT,AUTO
          1 00029F  DF47 002D                            STR,R5   WRD_TO_MOV,AUTO

      390     2242    2      SUBSTR (FNCTBL$->CHARS, KV$INPFNCTBL.ID_CHROFS(0)+MATCHX, WRD_TO_MOV)

   2242   1 0002A1  C846 0022                            LDR,R4   34,B6
          1 0002A3  CA47 0021                            ADD,R4   MATCHX,AUTO
          1 0002A5  B846 0022                            LDR,R3   34,B6
          1 0002A7  BA47 0021                            ADD,R3   MATCHX,AUTO
          1 0002A9  BA47 0019                            ADD,R3   DLT_FNC_CNT,AUTO
          1 0002AB  AB86                                 LAB,B2   ,B6
          1 0002AC  A853                                 LDR,R2   R3
          1 0002AD  E855                                 LDR,R6   R5
          1 0002AE  BB82                                 LAB,B3   ,B2
          1 0002AF  B854                                 LDR,R3   R4
          1 0002B0  0008                                 MMM

      391     2243    2        = SUBSTR (FNCTBL$->CHARS,
      392     2244    2        KV$INPFNCTBL.ID_CHROFS(0)+MATCHX+DLT_FNC_CNT, WRD_TO_MOV);
      393     2245
      394     2246        /* other updating needed */
      395     2247
      396     2248    2      KV$INPFNCTBL.ID_CHRCNT(TBLTYP)

   2248   1 0002B1  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 0002B3  B847 0010                            LDR,R3   TBLTYP,AUTO
          1 0002B5  3E10                                 ADV,R3   16
          1 0002B6  E2B5                                 LLH,R6   ,B5,R3
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:63   
          1 0002B7  E247 0019                            SUB,R6   DLT_FNC_CNT,AUTO
          1 0002B9  E7B5                                 STH,R6   ,B5,R3

      397     2249    2        = KV$INPFNCTBL.ID_CHRCNT(TBLTYP) - DLT_FNC_CNT;
      398     2250    2      KV$INPFNCTBL.FREWRDSIZ = KV$INPFNCTBL.FREWRDSIZ + DLT_INPOPR_SIZ +

   2250   1 0002BA  E847 001A                            LDR,R6   TTL_ID_CNT,AUTO
          1 0002BC  E570 0001                            AND,R6   1,IMO
          1 0002BE  EA47 0019                            ADD,R6   DLT_FNC_CNT,AUTO
          1 0002C0  E370 0002                            DIV,R6   2,IMO
          1 0002C2  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 0002C4  C845 002D                            LDR,R4   45,B5
          1 0002C6  CA47 0017                            ADD,R4   DLT_INPOPR_SIZ,AUTO
          1 0002C8  CA47 0019                            ADD,R4   DLT_FNC_CNT,AUTO
          1 0002CA  EA54                                 ADD,R6   R4
          1 0002CB  EF45 002D                            STR,R6   45,B5

      399     2251    2        DLT_FNC_CNT + (DLT_FNC_CNT + MOD(TTL_ID_CNT,2))/2;
      400     2252
      401     2253        /* take care of SPCCHR and ESCINTn_CHR */
      402     2254
      403     2255    3      IF (KV$INPFNCTBL.ID_CHRCNT(TBLTYP) = 0) AND TBLTYP<2 THEN DO;

   2255   1 0002CD  B847 0010                            LDR,R3   TBLTYP,AUTO
          1 0002CF  3E10                                 ADV,R3   16
          1 0002D0  C2B5                                 LLH,R4   ,B5,R3
          1 0002D1  4981 002F                            BNEZ,R4  s:2267,PREL
          1 0002D3  A847 0010                            LDR,R2   TBLTYP,AUTO
          1 0002D5  2D02                                 CMV,R2   2
          1 0002D6  0281 002A                            BGE      s:2267,PREL

      404     2256    3         CALL Y$SRC(%KV_INPFNCTYP_SPCCHR,%KV_INPFNCTKNTYP_CHR,

   2256   1 0002D8  CBF0 0002                            LAB,B4   2,IMO
          1 0002DA  9BF0 0000                            LAB,B1   0,IMO
          1 0002DC  2E28                                 ADV,R2   40
          1 0002DD  EBA5                                 LAB,B6   ,B5,R2
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:64   
          1 0002DE  EFC7 004C                            STB,B6   @Y@SRC_ID_TKN,AUTO
          1 0002E0  9FC7 004A                            STB,B1   @Y@SRC_ID_TKNTYP,AUTO
          1 0002E2  CFC7 0048                            STB,B4   @Y@SRC_TBLTYP,AUTO
          1 0002E4  E3C0 FE9C                            LNJ,B6   s:0,PREL
          1 0002E6       0001                            DC       s:2258,PREL

      405     2257    3           KV$INPFNCTBL.ESCINT1_CHR(TBLTYP));
      406     2258    3         IF NOT FND THEN

   2258   1 0002E7  89C7 0022                            CMZ      FND,AUTO
          1 0002E9  0801 000A                            BAL      s:2260,PREL

      407     2259    3         KV$INPFNCTBL.SPCCHR(KV$INPFNCTBL.ESCINT1_CHR(TBLTYP)) = '0'B;

   2259   1 0002EB  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 0002ED  B847 0010                            LDR,R3   TBLTYP,AUTO
          1 0002EF  3E28                                 ADV,R3   40
          1 0002F0  A836                                 LDR,R2   ,B6,R3
          1 0002F1  DBC6 000B                            LAB,B5   11,B6
          1 0002F3  8825                                 LBF      ,B5,R2

      408     2260    3         KV$INPFNCTBL.ESCINT1_CHR(TBLTYP) = %KV_ESCINTCHR_NON;

   2260   1 0002F4  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 0002F6  B847 0010                            LDR,R3   TBLTYP,AUTO
          1 0002F8  3E28                                 ADV,R3   40
          1 0002F9  6CFF                                 LDV,R6   -1
          1 0002FA  EF36                                 STR,R6   ,B6,R3

      409     2261
      410     2262    3         KV$INPFNCTBL.ESCINT2_CHR(TBLTYP) = %KV_ESCINTCHR_NON;

   2262   1 0002FB  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 0002FD  B847 0010                            LDR,R3   TBLTYP,AUTO
          1 0002FF  3E2A                                 ADV,R3   42
          1 000300  EF36                                 STR,R6   ,B6,R3

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:65   
      411     2263
      412     2264    3      END;

      413     2265
      414     2266
      415     2267    2      IF (TBLTYP = %KV_INPFNCTYP_SPCCHR) THEN

   2267   1 000301  E847 0010                            LDR,R6   TBLTYP,AUTO
          1 000303  6D02                                 CMV,R6   2
          1 000304  0981 0017                            BNE      s:2273,PREL

      416     2268    2      IF (ID_TKNTYP ~= %KV_INPFNCTKNTYP_NON) THEN

   2268   1 000306  D847 0013                            LDR,R5   ID_TKNTYP,AUTO
          1 000308  5D03                                 CMV,R5   3
          1 000309  0901 000A                            BE       s:2271,PREL

      417     2269    2      KV$INPFNCTBL.SPCCHR(ID_TKN) = '0'B;

   2269   1 00030B  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 00030D  DBC6 000B                            LAB,B5   11,B6
          1 00030F  B847 0012                            LDR,R3   ID_TKN,AUTO
          1 000311  8835                                 LBF      ,B5,R3
          1 000312  0F81 0009                            B        s:2273,PREL

      418     2270    2      ELSE                            /* we just deleted all special characters  */
      419     2271    2      KV$INPFNCTBL.SPCCHR = '0'B;

   2271   1 000314  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000316  5C20                                 LDV,R5   32
          1 000317  0021                                 ALR      ;
          1 000318       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 00031A       4006 000B                                ALPHANUM(11,B6,,R5,FILL)

      420     2272        /* restore the bits corresponding to the introducer characters */
      421     2273    3      DO I = 0 TO 1;

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:66   
   2273   1 00031C  437F                                 CSYNC    s:2271+7,SPREL
          1 00031D  8747 0026                            CL       I,AUTO

      422     2274    3         IF NOT BINBIT(KV$INPFNCTBL.ESCINT1_CHR(I),16)&'FF00'X THEN

   2274   1 00031F  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000321  B847 0026                            LDR,R3   I,AUTO
          1 000323  3E28                                 ADV,R3   40
          1 000324  E836                                 LDR,R6   ,B6,R3
          1 000325  E570 FF00                            AND,R6   -256,IMO
          1 000327  6981 0005                            BNEZ,R6  s:2276,PREL

      423     2275    3         KV$INPFNCTBL.SPCCHR(KV$INPFNCTBL.ESCINT1_CHR(I)) = '1'B;

   2275   1 000329  A836                                 LDR,R2   ,B6,R3
          1 00032A  DBC6 000B                            LAB,B5   11,B6
          1 00032C  8925                                 LBT      ,B5,R2

      424     2276    3      END;

   2276   1 00032D  8AC7 0026                            INC      I,AUTO
          1 00032F  E847 0026                            LDR,R6   I,AUTO
          1 000331  6D01                                 CMV,R6   1
          1 000332  0AED                                 BALE     s:2274,SPREL

      425     2277    2      TBL_END = TBL_END - DLT_FNC_CNT - (DLT_FNC_CNT + MOD(TTL_ID_CNT,2))/2;

   2277   1 000333  D847 0023                            LDR,R5   TBL_END,AUTO
          1 000335  D247 0019                            SUB,R5   DLT_FNC_CNT,AUTO
          1 000337  C847 001A                            LDR,R4   TTL_ID_CNT,AUTO
          1 000339  C570 0001                            AND,R4   1,IMO
          1 00033B  CA47 0019                            ADD,R4   DLT_FNC_CNT,AUTO
          1 00033D  C370 0002                            DIV,R4   2,IMO
          1 00033F  D254                                 SUB,R5   R4
          1 000340  DF47 0023                            STR,R5   TBL_END,AUTO

      426     2278    2      TTL_ID_CNT = TTL_ID_CNT - DLT_FNC_CNT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:67   

   2278   1 000342  C847 001A                            LDR,R4   TTL_ID_CNT,AUTO
          1 000344  C247 0019                            SUB,R4   DLT_FNC_CNT,AUTO
          1 000346  CF47 001A                            STR,R4   TTL_ID_CNT,AUTO

      427     2279    2   END Y$DLT_CMN;

   2279   1 000348  ECC7 0044                            LDB,B6   INT1_TKNTYP+2,AUTO
          1 00034A  C3C6 0001                            LNJ,B4   1,B6

      428     2280        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:68   
      429     2281
      430     2282
      431     2283        /*F*
      432     2284            NAME: Y$ADD
      433     2285            PURPOSE:
      434     2286                  The function to perform is to add one IMP.
      435     2287        */
      436     2288
      437     2289    1   Y$ADD: PROC ;

   2289   1 00034C  EFC7 0040            Y$ADD           STB,B6   VDH_RLSBFR+7,AUTO

      438     2290
      439     2291    2   DCL INT1_TKNTYP SBIN;
      440     2292    2   DCL TYP_OFS(0:3) SBIN CONSTANT INIT(0,%KV_INPCTRSTRCHR_BIS,%KV_INPFNCKEY_BIS,0);
      441     2293
      442     2294        /* Validate declare input function structure */
      443     2295
      444     2296    2      TBLTYP = KV$PRM_DCLINPFNC.INPFNCTYP;

   2296   1 00034E  DCC7 000E                            LDB,B5   MSG$,AUTO
          1 000350  E845 0004                            LDR,R6   4,B5
          1 000352  6048                                 SOR,R6   8
          1 000353  E570 000F                            AND,R6   15,IMO
          1 000355  EF47 0010                            STR,R6   TBLTYP,AUTO

      445     2297    3      IF TBLTYP > %KV_INPFNCTYP_LST THEN DO;

   2297   1 000357  6D05                                 CMV,R6   5
          1 000358  0381 000C                            BLE      s:2303,PREL

      446     2298    3         ERRCODE = %E$IMP_ILGCMNTYP;

   2298   1 00035A  D870 057C                            LDR,R5   1404,IMO
          1 00035C  DF47 0011                            STR,R5   ERRCODE,AUTO

      447     2299    3         CALL Y$PROCESS_ERR;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:69   

   2299   1 00035E  E3C0 052D                            LNJ,B6   s:0,PREL
          1 000360       0001                            DC       s:2300,PREL

      448     2300    3         RETURN;

   2300   1 000361  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 000363  C3C6 0001                            LNJ,B4   1,B6

      449     2301    3      END;
      450     2302
      451     2303    2      IF KV$PRM_DCLINPFNC.INT1_TKNTYP > %KV_INPFNCTKNTYP_HI OR

   2303   1 000365  D845 0003                            LDR,R5   3,B5
          1 000367  5043                                 SOR,R5   3
          1 000368  D570 0007                            AND,R5   7,IMO
          1 00036A  5D03                                 CMV,R5   3
          1 00036B  0301 0008                            BG       s:2305,PREL
          1 00036D  C845 0003                            LDR,R4   3,B5
          1 00036F  C570 0007                            AND,R4   7,IMO
          1 000371  4D03                                 CMV,R4   3
          1 000372  0381 000C                            BLE      s:2313,PREL

      452     2304    3        KV$PRM_DCLINPFNC.INT2_TKNTYP > %KV_INPFNCTKNTYP_HI THEN DO;

      453     2305    3         ERRCODE = %E$IMP_ILGINTTKNTYP;

   2305   1 000374  C870 057E                            LDR,R4   1406,IMO
          1 000376  CF47 0011                            STR,R4   ERRCODE,AUTO

      454     2306        /*E* ERROR: KVM-E$IMP_ILGINTTKNTYP-E
      455     2307             MESSAGE:Bad IMP introducer type.
      456     2308        */
      457     2309    3         CALL Y$PROCESS_ERR;

   2309   1 000378  E3C0 0513                            LNJ,B6   s:0,PREL
          1 00037A       0001                            DC       s:2310,PREL
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:70   

      458     2310    3         RETURN;

   2310   1 00037B  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 00037D  C3C6 0001                            LNJ,B4   1,B6

      459     2311    3      END /* IF */;
      460     2312
      461     2313    2      INT1_TKNTYP = KV$PRM_DCLINPFNC.INT1_TKNTYP;

   2313   1 00037F  DF47 0042                            STR,R5   INT1_TKNTYP,AUTO

      462     2314    2      IF FNCTBL$~=ADDR(NIL) AND TBLTYP<%KV_INPFNCTYP_SPCCHR

   2314   1 000381  8DC7 0008                            CMN      FNCTBL$,AUTO
          1 000383  0901 0065                            BE       s:2340,PREL
          1 000385  6D02                                 CMV,R6   2
          1 000386  0281 0062                            BGE      s:2340,PREL

      463     2315    2      THEN IF KV$INPFNCTBL.ID_CHRCNT(TBLTYP)~=0

   2315   1 000388  CCC7 0008                            LDB,B4   FNCTBL$,AUTO
          1 00038A  B856                                 LDR,R3   R6
          1 00038B  3E10                                 ADV,R3   16
          1 00038C  A2B4                                 LLH,R2   ,B4,R3
          1 00038D  2901 005B                            BEZ,R2   s:2340,PREL
          1 00038F  5D03                                 CMV,R5   3
          1 000390  0901 0058                            BE       s:2340,PREL
          1 000392  9855                                 LDR,R1   R5
          1 000393  E2C5 0002                            LLH,R6   2,B5
          1 000395  EA10 0000 002E  00                   ADD,R6   TYP_OFS,R1
          1 000398  B847 0010                            LDR,R3   TBLTYP,AUTO
          1 00039A  3E28                                 ADV,R3   40
          1 00039B  E934                                 CMR,R6   ,B4,R3
          1 00039C  0981 0018                            BNE      s:2323,PREL
          1 00039E  4D03                                 CMV,R4   3
          1 00039F  0981 0008                            BNE      s:2315+32,PREL
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:71   
          1 0003A1  A847 0010                            LDR,R2   TBLTYP,AUTO
          1 0003A3  2E2A                                 ADV,R2   42
          1 0003A4  E824                                 LDR,R6   ,B4,R2
          1 0003A5  6DFF                                 CMV,R6   -1
          1 0003A6  0981 000E                            BNE      s:2323,PREL
          1 0003A8  4D03                                 CMV,R4   3
          1 0003A9  0901 003F                            BE       s:2340,PREL
          1 0003AB  A847 0010                            LDR,R2   TBLTYP,AUTO
          1 0003AD  2E2A                                 ADV,R2   42
          1 0003AE  E845 0002                            LDR,R6   2,B5
          1 0003B0  E570 00FF                            AND,R6   255,IMO
          1 0003B2  E924                                 CMR,R6   ,B4,R2
          1 0003B3  0901 0035                            BE       s:2340,PREL

      464     2316    2        AND INT1_TKNTYP~=%KV_INPFNCTKNTYP_NON
      465     2317    2        AND (KV$PRM_DCLINPFNC.INT1_TKN+TYP_OFS(INT1_TKNTYP)~=
      466     2318    2        KV$INPFNCTBL.ESCINT1_CHR(TBLTYP)
      467     2319    2        OR KV$PRM_DCLINPFNC.INT2_TKNTYP=%KV_INPFNCTKNTYP_NON
      468     2320    2        AND KV$INPFNCTBL.ESCINT2_CHR(TBLTYP)~=%KV_ESCINTCHR_NON
      469     2321    2        OR KV$PRM_DCLINPFNC.INT2_TKNTYP~=%KV_INPFNCTKNTYP_NON
      470     2322    2        AND KV$PRM_DCLINPFNC.INT2_TKN~=KV$INPFNCTBL.ESCINT2_CHR(TBLTYP))
      471     2323    3      THEN IF NOT %KV_MVD.INPFNCCPY(TBLTYP) THEN DO;

   2323   1 0003B5  BC80 0000 0000  xsym                 LDB,B3   KV$PTR$
          1 0003B8  ACC3 0006                            LDB,B2   6,B3
          1 0003BA  9BC2 001F                            LAB,B1   31,B2
          1 0003BC  A847 0010                            LDR,R2   TBLTYP,AUTO
          1 0003BE  2E09                                 ADV,R2   9
          1 0003BF  82A1                                 LB       ,B1,R2
          1 0003C0  0501 000C                            BBT      s:2334,PREL

      472     2324    3         ERRCODE = %E$IMP_ILGINTTKN;

   2324   1 0003C2  E870 05C7                            LDR,R6   1479,IMO
          1 0003C4  EF47 0011                            STR,R6   ERRCODE,AUTO

      473     2325        /*E* ERROR: KVM-E$IMP_ILGINTTKN-E
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:72   
      474     2326             MESSAGE:IMP introducer conflicts with existing IMPs.
      475     2327        */
      476     2328    3         CALL Y$PROCESS_ERR;

   2328   1 0003C6  E3C0 04C5                            LNJ,B6   s:0,PREL
          1 0003C8       0001                            DC       s:2329,PREL

      477     2329    3         RETURN;

   2329   1 0003C9  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 0003CB  C3C6 0001                            LNJ,B4   1,B6

      478     2330    3      END; ELSE DO;

      479     2331
      480     2332        /* The old ones were only copied, just get rid of them */
      481     2333
      482     2334    3         ID_TKNTYP = %KV_INPFNCTKNTYP_NON;

   2334   1 0003CD  6C03                                 LDV,R6   3
          1 0003CE  EF47 0013                            STR,R6   ID_TKNTYP,AUTO

      483     2335    3         DLT_FNC_CNT = KV$INPFNCTBL.ID_CHRCNT(TBLTYP);

   2335   1 0003D0  B847 0010                            LDR,R3   TBLTYP,AUTO
          1 0003D2  3E10                                 ADV,R3   16
          1 0003D3  C2B4                                 LLH,R4   ,B4,R3
          1 0003D4  CF47 0019                            STR,R4   DLT_FNC_CNT,AUTO

      484     2336    3         CALL Y$SRC (TBLTYP,ID_TKNTYP);

   2336   1 0003D6  AB80 0000 0000                       LAB,B2   0
          1 0003D9  AFC7 004C                            STB,B2   @Y@SRC_ID_TKN,AUTO
          1 0003DB  9BC7 0013                            LAB,B1   ID_TKNTYP,AUTO
          1 0003DD  9FC7 004A                            STB,B1   @Y@SRC_ID_TKNTYP,AUTO
          1 0003DF  EBC7 0010                            LAB,B6   TBLTYP,AUTO
          1 0003E1  EFC7 0048                            STB,B6   @Y@SRC_TBLTYP,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:73   
          1 0003E3  E3C0 FD9D                            LNJ,B6   s:0,PREL
          1 0003E5       0001                            DC       s:2337,PREL

      485     2337    3         CALL Y$DLT_CMN;

   2337   1 0003E6  E3C0 FDF2                            LNJ,B6   s:0,PREL
          1 0003E8       0001                            DC       s:2340,PREL

      486     2338    3      END;

      487     2339        /* PROCESS FUNCTION IDENTIFIER                                                */
      488     2340    2      ID_TKNTYP = KV$PRM_DCLINPFNC.ID_TKNTYP;

   2340   1 0003E9  ECC7 000E                            LDB,B6   MSG$,AUTO
          1 0003EB  E846 0004                            LDR,R6   4,B6
          1 0003ED  604C                                 SOR,R6   12
          1 0003EE  E570 0007                            AND,R6   7,IMO
          1 0003F0  EF47 0013                            STR,R6   ID_TKNTYP,AUTO

      489     2341    2      ID_TKN = KV$PRM_DCLINPFNC.ID_TKN;

   2341   1 0003F2  D2C6 0003                            LLH,R5   3,B6
          1 0003F4  DF47 0012                            STR,R5   ID_TKN,AUTO

      490     2342    3      IF (ID_TKNTYP = %KV_INPFNCTKNTYP_NON) THEN DO;

   2342   1 0003F6  6D03                                 CMV,R6   3
          1 0003F7  0981 000C                            BNE      s:2348,PREL

      491     2343    3         ERRCODE = %E$IMP_ILGID_TKNTYP;

   2343   1 0003F9  C870 057D                            LDR,R4   1405,IMO
          1 0003FB  CF47 0011                            STR,R4   ERRCODE,AUTO

      492     2344    3         CALL Y$PROCESS_ERR;

   2344   1 0003FD  E3C0 048E                            LNJ,B6   s:0,PREL
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:74   
          1 0003FF       0001                            DC       s:2345,PREL

      493     2345    3         RETURN;

   2345   1 000400  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 000402  C3C6 0001                            LNJ,B4   1,B6

      494     2346    3      END;
      495     2347
      496     2348    2      INPOPR_SIZ = PRM_LNG - SIZEW(KV$PRM_DCLINPFNC);

   2348   1 000404  C847 0016                            LDR,R4   PRM_LNG,AUTO
          1 000406  4EFB                                 ADV,R4   -5
          1 000407  CF47 0015                            STR,R4   INPOPR_SIZ,AUTO

      497     2349
      498     2350    2      IF (FNCTBL$ = ADDR(NIL)) THEN

   2350   1 000409  8DC7 0008                            CMN      FNCTBL$,AUTO
          1 00040B  0981 0008                            BNE      s:2353,PREL

      499     2351    2      FNCTBL$ = ADDR(KV_INPFNCTBL.FOR_INIT);

   2351   1 00040D  DB80 0000 0000  00                   LAB,B5   KV_INPFNCTBL
          1 000410  DFC7 0008                            STB,B5   FNCTBL$,AUTO
          1 000412  0F81 001A                            B        s:2358,PREL

      500     2352    3      ELSE DO;

      501     2353    3         DLT_FNC_CNT = 1;

   2353   1 000414  3C01                                 LDV,R3   1
          1 000415  BF47 0019                            STR,R3   DLT_FNC_CNT,AUTO

      502     2354    3         CALL Y$SRC(TBLTYP,ID_TKNTYP,ID_TKN);

   2354   1 000417  DBC7 0012                            LAB,B5   ID_TKN,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:75   
          1 000419  DFC7 004C                            STB,B5   @Y@SRC_ID_TKN,AUTO
          1 00041B  CBC7 0013                            LAB,B4   ID_TKNTYP,AUTO
          1 00041D  CFC7 004A                            STB,B4   @Y@SRC_ID_TKNTYP,AUTO
          1 00041F  BBC7 0010                            LAB,B3   TBLTYP,AUTO
          1 000421  BFC7 0048                            STB,B3   @Y@SRC_TBLTYP,AUTO
          1 000423  E3C0 FD5D                            LNJ,B6   s:0,PREL
          1 000425       0001                            DC       s:2355,PREL

      503     2355    3         IF FND THEN CALL Y$DLT_CMN;

   2355   1 000426  89C7 0022                            CMZ      FND,AUTO
          1 000428  0881 0004                            BAGE     s:2358,PREL

   2355   1 00042A  E3C0 FDAE                            LNJ,B6   s:0,PREL
          1 00042C       0001                            DC       s:2358,PREL

      504     2356    3      END;

      505     2357
      506     2358    2      ADD_SIZ = INPOPR_SIZ + 1 + MOD((TTL_ID_CNT + 1), 2);

   2358   1 00042D  E847 001A                            LDR,R6   TTL_ID_CNT,AUTO
          1 00042F  6E01                                 ADV,R6   1
          1 000430  E570 0001                            AND,R6   1,IMO
          1 000432  EA47 0015                            ADD,R6   INPOPR_SIZ,AUTO
          1 000434  6E01                                 ADV,R6   1
          1 000435  EF47 0018                            STR,R6   ADD_SIZ,AUTO

      507     2359    2      IF KV$INPFNCTBL.FREWRDSIZ >= ADD_SIZ THEN

   2359   1 000437  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000439  E946 002D                            CMR,R6   45,B6
          1 00043B  0301 0008                            BG       s:2372,PREL

      508     2360    2      KV$INPFNCTBL.FREWRDSIZ = KV$INPFNCTBL.FREWRDSIZ - ADD_SIZ;

   2360   1 00043D  E246 002D                            SUB,R6   45,B6
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:76   
          1 00043F  8256                                 NEG      R6
          1 000440  EF46 002D                            STR,R6   45,B6
          1 000442  0F81 0094                            B        s:2427,PREL

      509     2361    3      ELSE DO;

      510     2362
      511     2363        /* Otherwise GO THROUGH EXPANDING THE TABLE ORDEAL                            */
      512     2364
      513     2365        /* CHECK TO SEE IF THIS TABLE HAS EXCEEDED THE MAXIMUM SIZE THAT              */
      514     2366        /* A USER INPUT FUNCTION TABLE MAY GROW TO. THIS CHECK IS SORT OF             */
      515     2367        /* A BALLPARK CHECK IN THAT WE STILL GET 40 BYTES OF PAD IF THE CHECK         */
      516     2368        /* PASSES, SO WE MAY BE OFF BY 20 WORDS. IT SERVES THE PRIMARY PURPOSE        */
      517     2369        /* THOUGH, IN THAT IT WILL PREVENT THE TABLES FROM GETTING REDICULOUSLY       */
      518     2370        /* LARGE                                                                      */
      519     2371
      520     2372    3         NEWTBLSIZ = FNCTBL$->KV$SHRBFR.BYTSIZ/2 + ADD_SIZ -

   2372   1 000444  D846 0002                            LDR,R5   2,B6
          1 000446  5041                                 SOR,R5   1
          1 000447  DA56                                 ADD,R5   R6
          1 000448  D246 002D                            SUB,R5   45,B6
          1 00044A  DF47 0014                            STR,R5   NEWTBLSIZ,AUTO

      521     2373    3           KV$INPFNCTBL.FREWRDSIZ;
      522     2374    4         IF NEWTBLSIZ > KV_MAXUFTSIZ THEN DO;

   2374   1 00044C  D900 0000 0000  xsym                 CMR,R5   KV_MAXUFTSIZ
          1 00044F  0381 000C                            BLE      s:2388,PREL

      523     2375
      524     2376        /* WE'VE EXCEEDED THE SIZE, CALL Y$PROCESS_ERR AND RETURN.                    */
      525     2377
      526     2378    4            ERRCODE = %E$IMP_TBLSIZLMTEXC;

   2378   1 000451  C870 0580                            LDR,R4   1408,IMO
          1 000453  CF47 0011                            STR,R4   ERRCODE,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:77   

      527     2379        /*E* ERROR: KVM-E$IMP_TBLSIZLMTEXC-E
      528     2380             MESSAGE:Your IMP request would exceed the IMP memory limit.
      529     2381        */
      530     2382    4            CALL Y$PROCESS_ERR;

   2382   1 000455  E3C0 0436                            LNJ,B6   s:0,PREL
          1 000457       0001                            DC       s:2383,PREL

      531     2383    4            RETURN;

   2383   1 000458  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 00045A  C3C6 0001                            LNJ,B4   1,B6

      532     2384    4         END /* IF */;
      533     2385
      534     2386        /* SETUP FOR AND CALL A ROUTINE TO ACQUIRE A BUFFER OF THE CORRECT SIZE.      */
      535     2387
      536     2388    3         VDH_GETBFR = KV_VDH_GETBFR;

   2388   1 00045C  AB80 0000 0000  xsym                 LAB,B2   KV_VDH_GETBFR
          1 00045F  2C00                                 LDV,R2   0
          1 000460  6C16                                 LDV,R6   22
          1 000461  BB87                                 LAB,B3   ,AUTO
          1 000462  3C5C                                 LDV,R3   92
          1 000463  0008                                 MMM

      537     2389    3         VDH_GETBFR.STRTYP = %KV_STRTYP_USRINPFNCTBL;

   2389   1 000464  6C1A                                 LDV,R6   26
          1 000465  E7C7 0034                            STH,R6   VDH_GETBFR+6,AUTO

      538     2390
      539     2391        /* ADJUST BYTE SIZE TO THE NEW REQUIREMENT                                    */
      540     2392
      541     2393    3         VDH_GETBFR.BYTSIZ = NEWTBLSIZ * 2 + 40;

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:78   
   2393   1 000467  D847 0014                            LDR,R5   NEWTBLSIZ,AUTO
          1 000469  5001                                 SOL,R5   1
          1 00046A  5E28                                 ADV,R5   40
          1 00046B  DF47 0031                            STR,R5   VDH_GETBFR+3,AUTO

      542     2394        /*
      543     2395           Make it a power-of-2.
      544     2396        */
      545     2397    4         DO WHILE BITBIN(BINBIT(VDH_GETBFR.BYTSIZ,16)&

   2397   1 00046D  0F81 000A                            B        s:2401,PREL

      546     2398    4           BINBIT(-VDH_GETBFR.BYTSIZ,16))~=VDH_GETBFR.BYTSIZ;
      547     2399    4            VDH_GETBFR.BYTSIZ = VDH_GETBFR.BYTSIZ + BITBIN

   2399   1 00046F  E847 0031                            LDR,R6   VDH_GETBFR+3,AUTO
          1 000471  8256                                 NEG      R6
          1 000472  E547 0031                            AND,R6   VDH_GETBFR+3,AUTO
          1 000474  EA47 0031                            ADD,R6   VDH_GETBFR+3,AUTO
          1 000476  EF47 0031                            STR,R6   VDH_GETBFR+3,AUTO

      548     2400    4              (BINBIT(VDH_GETBFR.BYTSIZ,16)&BINBIT(-VDH_GETBFR.BYTSIZ,16));
      549     2401    4         END;

   2401   1 000478  E847 0031                            LDR,R6   VDH_GETBFR+3,AUTO
          1 00047A  8256                                 NEG      R6
          1 00047B  E547 0031                            AND,R6   VDH_GETBFR+3,AUTO
          1 00047D  E947 0031                            CMR,R6   VDH_GETBFR+3,AUTO
          1 00047F  09F0                                 BNE      s:2399,SPREL

      550     2402    3         VDH_GETBFR.DAT_.BYTSIZ = KV$INPFNCTBL.BYTSIZ - LENGTHC(KV$SHRBFR);

   2402   1 000480  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000482  E846 0002                            LDR,R6   2,B6
          1 000484  6EF8                                 ADV,R6   -8
          1 000485  EF47 0038                            STR,R6   VDH_GETBFR+10,AUTO

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:79   
      551     2403    3         VDH_GETBFR.DAT_.ADR$ = FNCTBL$;

   2403   1 000487  EFC7 0035                            STB,B6   VDH_GETBFR+7,AUTO

      552     2404    3         VDH_GETBFR.DAT_.BYTX = LENGTHC(KV$SHRBFR);

   2404   1 000489  5C08                                 LDV,R5   8
          1 00048A  DF47 0037                            STR,R5   VDH_GETBFR+9,AUTO

      553     2405    3         VDH_GETBFR.SHRBFR = '0'B;

   2405   1 00048C  8847 0034                            LBF,'00E0'X       VDH_GETBFR+6,AUTO
   2405   1 00048E       00E0

      554     2406    3         VDH_GETBFR.SHRBFR.GET = '1'B;

   2406   1 00048F  8947 0034                            LBT,'0040'X       VDH_GETBFR+6,AUTO
   2406   1 000491       0040

      555     2407    3         VDH_GETBFR.SCRNO_MMR = '0'B;

   2407   1 000492  8847 0034                            LBF,'0001'X       VDH_GETBFR+6,AUTO
   2407   1 000494       0001

      556     2408    3         CALL KVS$GETBFR(VDH_GETBFR)

   2408   1 000495  DBC7 002E                            LAB,B5   VDH_GETBFR,AUTO
          1 000497  DFC7 0050                            STB,B5   J+2,AUTO
          1 000499  BBC7 0050                            LAB,B3   J+2,AUTO
          1 00049B  CBF0 0100                            LAB,B4   256,IMO
          1 00049D  E380 0000 0000  xent                 LNJ,B6   KVS$GETBFR
          1 0004A0       0003                            DC       s:2410,PREL
          1 0004A1  0F81 000C                            B        s:2417,PREL

      557     2409    4         WHENALTRETURN DO;

      558     2410    4            ERRCODE = %E$IMP_CNTGETMMR;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:80   

   2410   1 0004A3  E870 057F                            LDR,R6   1407,IMO
          1 0004A5  EF47 0011                            STR,R6   ERRCODE,AUTO

      559     2411    4            CALL Y$PROCESS_ERR;

   2411   1 0004A7  E3C0 03E4                            LNJ,B6   s:0,PREL
          1 0004A9       0001                            DC       s:2412,PREL

      560     2412    4            RETURN;

   2412   1 0004AA  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 0004AC  C3C6 0001                            LNJ,B4   1,B6

      561     2413    4         END /* ALTRETURN */;
      562     2414
      563     2415        /* IF THE OLD BUFFER WAS A COPY, FREE IT                                      */
      564     2416
      565     2417    3         IF (FNCTBL$ ~= ORGUSRTBL$ AND FNCTBL$ ~= ADDR(KV_INPFNCTBL.FOR_INIT)) THEN

   2417   1 0004AE  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 0004B0  EDC7 0006                            CMB,B6   ORGUSRTBL$,AUTO
          1 0004B2  0901 0013                            BE       s:2419,PREL
          1 0004B4  DB80 0000 0000  00                   LAB,B5   KV_INPFNCTBL
          1 0004B7  DDC7 0008                            CMB,B5   FNCTBL$,AUTO
          1 0004B9  0901 000C                            BE       s:2419,PREL

      566     2418    3         CALL Y$RELEASE(FNCTBL$,'0'B);

   2418   1 0004BB  DBF0 0000                            LAB,B5   0,IMO
          1 0004BD  DFC7 0048                            STB,B5   @Y@SRC_TBLTYP,AUTO
          1 0004BF  CBC7 0008                            LAB,B4   FNCTBL$,AUTO
          1 0004C1  CFC7 0046                            STB,B4   INT1_TKNTYP+4,AUTO
          1 0004C3  E3C0 0342                            LNJ,B6   s:0,PREL
          1 0004C5       0001                            DC       s:2419,PREL

      567     2419    3         FNCTBL$ = VDH_GETBFR.BFR$;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:81   

   2419   1 0004C6  ECC7 002F                            LDB,B6   VDH_GETBFR+1,AUTO
          1 0004C8  EFC7 0008                            STB,B6   FNCTBL$,AUTO

      568     2420
      569     2421        /* NOW LOOK AT THE RETURNED BUFFER BYTE SIZE AND CALCULATE                    */
      570     2422        /* WHAT THE NEW FREE WORD SIZE IS.                                            */
      571     2423
      572     2424    3         KV$INPFNCTBL.BYTSIZ = VDH_GETBFR.BYTSIZ;

   2424   1 0004CA  E847 0031                            LDR,R6   VDH_GETBFR+3,AUTO
          1 0004CC  EF46 0002                            STR,R6   2,B6

      573     2425    3         KV$INPFNCTBL.FREWRDSIZ = KV$INPFNCTBL.BYTSIZ/2 - NEWTBLSIZ;

   2425   1 0004CE  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 0004D0  E846 0002                            LDR,R6   2,B6
          1 0004D2  6041                                 SOR,R6   1
          1 0004D3  E247 0014                            SUB,R6   NEWTBLSIZ,AUTO
          1 0004D5  EF46 002D                            STR,R6   45,B6

      574     2426    3      END;

      575     2427    2      IF TBLTYP = %TBL_LST

   2427   1 0004D7  D847 0010                            LDR,R5   TBLTYP,AUTO
          1 0004D9  5D05                                 CMV,R5   5
          1 0004DA  0981 0007                            BNE      s:2429,PREL

      576     2428    2      THEN MATCHX = TTL_ID_CNT;

   2428   1 0004DC  C847 001A                            LDR,R4   TTL_ID_CNT,AUTO
          1 0004DE  CF47 0021                            STR,R4   MATCHX,AUTO
          1 0004E0  0F81 0008                            B        s:2431,PREL

      577     2429    2      ELSE MATCHX = KV$INPFNCTBL.OPRX_OFS(TBLTYP+1) - KV$INPFNCTBL.OPRX_OFS(0);

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:82   
   2429   1 0004E2  B855                                 LDR,R3   R5
          1 0004E3  3E1D                                 ADV,R3   29
          1 0004E4  C836                                 LDR,R4   ,B6,R3
          1 0004E5  C246 001C                            SUB,R4   28,B6
          1 0004E7  CF47 0021                            STR,R4   MATCHX,AUTO

      578     2430
      579     2431    2      OPRX_ARY$ = PINCRW(FNCTBL$,KV$INPFNCTBL.OPRX_OFS(0));

   2431   1 0004E9  B846 001C                            LDR,R3   28,B6
          1 0004EB  DBB6                                 LAB,B5   ,B6,R3
          1 0004EC  DFC7 001D                            STB,B5   OPRX_ARY$,AUTO

      580     2432    2      IF MATCHX = TTL_ID_CNT THEN

   2432   1 0004EE  4801 0009                            BLZ,R4   s:2434,PREL
          1 0004F0  C947 001A                            CMR,R4   TTL_ID_CNT,AUTO
          1 0004F2  0981 0005                            BNE      s:2434,PREL

      581     2433    2      LWBND = KV$INPFNCTBL.OPRX_OFS(0);

   2433   1 0004F4  BF47 0025                            STR,R3   LWBND,AUTO
          1 0004F6  0F81 0005                            B        s:2436,PREL

      582     2434    2      ELSE LWBND = OPRX_ARY(MATCHX);

   2434   1 0004F8  A854                                 LDR,R2   R4
          1 0004F9  9825                                 LDR,R1   ,B5,R2
          1 0004FA  9F47 0025                            STR,R1   LWBND,AUTO

      583     2435
      584     2436    2      WRD_TO_MOV = TBL_END - LWBND;

   2436   1 0004FC  A847 0023                            LDR,R2   TBL_END,AUTO
          1 0004FE  A247 0025                            SUB,R2   LWBND,AUTO
          1 000500  AF47 002D                            STR,R2   WRD_TO_MOV,AUTO

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:83   
      585     2437    2      FRM$ = PINCRW(FNCTBL$,LWBND);

   2437   1 000502  9847 0025                            LDR,R1   LWBND,AUTO
          1 000504  CB96                                 LAB,B4   ,B6,R1
          1 000505  CFC7 0029                            STB,B4   FRM$,AUTO

      586     2438    2      TO$ = PINCRW(FRM$,INPOPR_SIZ);

   2438   1 000507  B847 0015                            LDR,R3   INPOPR_SIZ,AUTO
          1 000509  BBB4                                 LAB,B3   ,B4,R3
          1 00050A  BFC7 002B                            STB,B3   TO$,AUTO

      587     2439    2      CALL Y$MOVDAT;

   2439   1 00050C  E3C0 032F                            LNJ,B6   s:0,PREL
          1 00050E       0001                            DC       s:2443,PREL

      588     2440
      589     2441        /* update offsets */
      590     2442
      591     2443    3      DO I = 0 TO %TBL_LST;

   2443   1 00050F  8747 0026                            CL       I,AUTO

      592     2444    3         KV$INPFNCTBL.OPRX_OFS(I) = KV$INPFNCTBL.OPRX_OFS(I) + INPOPR_SIZ;

   2444   1 000511  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000513  B847 0026                            LDR,R3   I,AUTO
          1 000515  3E1C                                 ADV,R3   28
          1 000516  E836                                 LDR,R6   ,B6,R3
          1 000517  EA47 0015                            ADD,R6   INPOPR_SIZ,AUTO
          1 000519  EF36                                 STR,R6   ,B6,R3

      593     2445    3         KV$INPFNCTBL.ID_CHROFS(I) = KV$INPFNCTBL.ID_CHROFS(I) + (INPOPR_SIZ * 2);

   2445   1 00051A  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 00051C  A847 0026                            LDR,R2   I,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:84   
          1 00051E  2E22                                 ADV,R2   34
          1 00051F  E847 0015                            LDR,R6   INPOPR_SIZ,AUTO
          1 000521  6001                                 SOL,R6   1
          1 000522  EA26                                 ADD,R6   ,B6,R2
          1 000523  EF26                                 STR,R6   ,B6,R2

      594     2446    3      END;

   2446   1 000524  8AC7 0026                            INC      I,AUTO
          1 000526  E847 0026                            LDR,R6   I,AUTO
          1 000528  6D05                                 CMV,R6   5
          1 000529  0AE8                                 BALE     s:2444,SPREL

      595     2447    2      OPRX_ARY$ = PINCRW(FNCTBL$, KV$INPFNCTBL.OPRX_OFS(0));

   2447   1 00052A  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 00052C  B846 001C                            LDR,R3   28,B6
          1 00052E  DBB6                                 LAB,B5   ,B6,R3
          1 00052F  DFC7 001D                            STB,B5   OPRX_ARY$,AUTO

      596     2448    3      DO I = MATCHX TO (TTL_ID_CNT - 1);

   2448   1 000531  E847 0021                            LDR,R6   MATCHX,AUTO
          1 000533  EF47 0026                            STR,R6   I,AUTO
          1 000535  0F81 000B                            B        s:2450+2,PREL

      597     2449    3         OPRX_ARY(I) = OPRX_ARY(I) + INPOPR_SIZ;

   2449   1 000537  ECC7 001D                            LDB,B6   OPRX_ARY$,AUTO
          1 000539  B847 0026                            LDR,R3   I,AUTO
          1 00053B  E836                                 LDR,R6   ,B6,R3
          1 00053C  EA47 0015                            ADD,R6   INPOPR_SIZ,AUTO
          1 00053E  EF36                                 STR,R6   ,B6,R3

      598     2450    3      END;

   2450   1 00053F  8AC7 0026                            INC      I,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:85   
          1 000541  E847 0026                            LDR,R6   I,AUTO
          1 000543  6874                                 BLZ,R6   s:2449,SPREL
          1 000544  E947 001A                            CMR,R6   TTL_ID_CNT,AUTO
          1 000546  0271                                 BL       s:2449,SPREL

      599     2451    2      TBL_END = TBL_END + INPOPR_SIZ;

   2451   1 000547  D847 0023                            LDR,R5   TBL_END,AUTO
          1 000549  DA47 0015                            ADD,R5   INPOPR_SIZ,AUTO
          1 00054B  DF47 0023                            STR,R5   TBL_END,AUTO

      600     2452
      601     2453        /* put INPOPR in the hole */
      602     2454
      603     2455    2      WRD_TO_MOV = INPOPR_SIZ;

   2455   1 00054D  C847 0015                            LDR,R4   INPOPR_SIZ,AUTO
          1 00054F  CF47 002D                            STR,R4   WRD_TO_MOV,AUTO

      604     2456        /* LWBND points to the beginning of the hole.  */
      605     2457    2      TO$ = PINCRW(FNCTBL$,LWBND);

   2457   1 000551  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000553  B847 0025                            LDR,R3   LWBND,AUTO
          1 000555  DBB6                                 LAB,B5   ,B6,R3
          1 000556  DFC7 002B                            STB,B5   TO$,AUTO

      606     2458    2      FRM$ = PINCRW(MSG$,SIZEW(KV$PRM_DCLINPFNC));

   2458   1 000558  CCC7 000E                            LDB,B4   MSG$,AUTO
          1 00055A  BBC4 0005                            LAB,B3   5,B4
          1 00055C  BFC7 0029                            STB,B3   FRM$,AUTO

      607     2459    2      CALL Y$MOVDAT;

   2459   1 00055E  E3C0 02DD                            LNJ,B6   s:0,PREL
          1 000560       0001                            DC       s:2461,PREL
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:86   

      608     2460
      609     2461    2      I = INPOPR_SIZ;

   2461   1 000561  E847 0015                            LDR,R6   INPOPR_SIZ,AUTO
          1 000563  EF47 0026                            STR,R6   I,AUTO

      610     2462    2      FRM$ = TO$;

   2462   1 000565  ECC7 002B                            LDB,B6   TO$,AUTO
          1 000567  EFC7 0029                            STB,B6   FRM$,AUTO

      611     2463    3      DO WHILE '1'B;

      612     2464        /*
      613     2465           Take a look at the operators to make sure we don't crash, etc.
      614     2466        */
      615     2467        /*N* Remove this line some time */
      616     2468    3         KV$INPOPR.TYP=%KV_INPOPR_TYP_TXT;

   2468   1 000569  E870 0900                            LDR,R6   2304,IMO
          1 00056B  ECC7 002B                            LDB,B6   TO$,AUTO
          1 00056D  EA86                                 SRM,R6,'0F00'X    ,B6
          1 00056E       0F00

      617     2469    4         IF KV$INPOPR.TYP=%KV_INPOPR_TYP_TXT THEN DO;

   2469   1 00056F  D806                                 LDR,R5   ,B6
          1 000570  5048                                 SOR,R5   8
          1 000571  D570 000F                            AND,R5   15,IMO
          1 000573  5D09                                 CMV,R5   9
          1 000574  0981 0021                            BNE      s:2477,PREL

      618     2470        /*
      619     2471           Limit TXT operator strings to the size of the function string.
      620     2472        */
      621     2473    4            IF SIZEW(KV$INPOPR_TXT)>I THEN KV$INPOPR_TXT.L
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:87   

   2473   1 000576  C2C6 0001                            LLH,R4   1,B6
          1 000578  4003                                 SOL,R4   3
          1 000579  4E27                                 ADV,R4   39
          1 00057A  4044                                 SOR,R4   4
          1 00057B  4801 0005                            BLZ,R4   s:2473+11,PREL
          1 00057D  C947 0026                            CMR,R4   I,AUTO
          1 00057F  0A81 000F                            BALE     s:2475,PREL

   2473   1 000581  C2C6 0001                            LLH,R4   1,B6
          1 000583  4003                                 SOL,R4   3
          1 000584  4E27                                 ADV,R4   39
          1 000585  4044                                 SOR,R4   4
          1 000586  C247 0026                            SUB,R4   I,AUTO
          1 000588  4001                                 SOL,R4   1
          1 000589  8254                                 NEG      R4
          1 00058A  B2C6 0001                            LLH,R3   1,B6
          1 00058C  CA53                                 ADD,R4   R3
          1 00058D  C7C6 0001                            STH,R4   1,B6

      622     2474    4              = KV$INPOPR_TXT.L-2*(SIZEW(KV$INPOPR_TXT)-I);
      623     2475    4            WRD_TO_MOV = SIZEW(KV$INPOPR_TXT);

   2475   1 00058F  C2C6 0001                            LLH,R4   1,B6
          1 000591  4003                                 SOL,R4   3
          1 000592  4E27                                 ADV,R4   39
          1 000593  4044                                 SOR,R4   4
          1 000594  CF47 002D                            STR,R4   WRD_TO_MOV,AUTO

      624     2476    4         END;

      625     2477    3         I = I-WRD_TO_MOV;

   2477   1 000596  C847 0026                            LDR,R4   I,AUTO
          1 000598  C247 002D                            SUB,R4   WRD_TO_MOV,AUTO
          1 00059A  CF47 0026                            STR,R4   I,AUTO

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:88   
      626     2478    3         FRM$ = TO$;

   2478   1 00059C  EFC7 0029                            STB,B6   FRM$,AUTO

      627     2479    3         IF I<=0 THEN EXIT;

   2479   1 00059E  4A81 0007                            BLEZ,R4  s:2482,PREL

      628     2480    3         TO$ = PINCRW(TO$,WRD_TO_MOV_S);

   2480   1 0005A0  B847 002D                            LDR,R3   WRD_TO_MOV,AUTO
          1 0005A2  DBB6                                 LAB,B5   ,B6,R3
          1 0005A3  DFC7 002B                            STB,B5   TO$,AUTO

      629     2481    3      END;

   2481   1 0005A5  0FC4                                 B        s:2468,SPREL

      630     2482    3      IF I<0 THEN DO;

   2482   1 0005A6  4881 000A                            BGEZ,R4  s:2489+2,PREL

      631     2483        /*
      632     2484           Bad one, make it a NOP
      633     2485        */
      634     2486    3         KV$INPOPR = '0'B;

   2486   1 0005A8  8706                                 CL       ,B6

      635     2487    3         KV$INPOPR.TYP = %KV_INPOPR_TYP_MSC;

   2487   1 0005A9  D870 0400                            LDR,R5   1024,IMO
          1 0005AB  DA86                                 SRM,R5,'0F00'X    ,B6
          1 0005AC       0F00

      636     2488    3         KV$INPOPR.IMD = '1'B;

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:89   
   2488   1 0005AD  8906                                 LBT,'8000'X       ,B6
   2488   1 0005AE       8000

      637     2489    2      END; ELSE FRM$->KV$INPOPR.CHN = '0'B;

   2489   1 0005AF  0F81 0003                            B        s:2493,PREL

   2489   1 0005B1  8806                                 LBF,'2000'X       ,B6
   2489   1 0005B2       2000

      638     2490
      639     2491        /* Make room for the OPRX entry */
      640     2492
      641     2493    2      WRD_TO_MOV = TBL_END - KV$INPFNCTBL.OPRX_OFS(0) - MATCHX;

   2493   1 0005B3  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 0005B5  D847 0023                            LDR,R5   TBL_END,AUTO
          1 0005B7  D245 001C                            SUB,R5   28,B5
          1 0005B9  D247 0021                            SUB,R5   MATCHX,AUTO
          1 0005BB  DF47 002D                            STR,R5   WRD_TO_MOV,AUTO

      642     2494    2      FRM$ = PINCRW(OPRX_ARY$,MATCHX);

   2494   1 0005BD  CCC7 001D                            LDB,B4   OPRX_ARY$,AUTO
          1 0005BF  B847 0021                            LDR,R3   MATCHX,AUTO
          1 0005C1  BBB4                                 LAB,B3   ,B4,R3
          1 0005C2  BFC7 0029                            STB,B3   FRM$,AUTO

      643     2495    2      TO$ = PINCRW(FRM$,1);

   2495   1 0005C4  ABC3 0001                            LAB,B2   1,B3
          1 0005C6  AFC7 002B                            STB,B2   TO$,AUTO

      644     2496    2      CALL Y$MOVDAT;

   2496   1 0005C8  E3C0 0273                            LNJ,B6   s:0,PREL
          1 0005CA       0001                            DC       s:2500,PREL
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:90   

      645     2497
      646     2498        /* update offsets */
      647     2499
      648     2500    3      DO I = 0 TO %TBL_LST;

   2500   1 0005CB  8747 0026                            CL       I,AUTO

      649     2501    3         KV$INPFNCTBL.ID_CHROFS(I) = KV$INPFNCTBL.ID_CHROFS(I) + 2;

   2501   1 0005CD  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 0005CF  B847 0026                            LDR,R3   I,AUTO
          1 0005D1  3E22                                 ADV,R3   34
          1 0005D2  E836                                 LDR,R6   ,B6,R3
          1 0005D3  6E02                                 ADV,R6   2
          1 0005D4  EF36                                 STR,R6   ,B6,R3

      650     2502    3      END;

   2502   1 0005D5  8AC7 0026                            INC      I,AUTO
          1 0005D7  E847 0026                            LDR,R6   I,AUTO
          1 0005D9  6D05                                 CMV,R6   5
          1 0005DA  0AF3                                 BALE     s:2501,SPREL

      651     2503    3      DO I = (TBLTYP + 1) TO %TBL_LST;

   2503   1 0005DB  E847 0010                            LDR,R6   TBLTYP,AUTO
          1 0005DD  6E01                                 ADV,R6   1
          1 0005DE  EF47 0026                            STR,R6   I,AUTO
          1 0005E0  0F81 0009                            B        s:2505+2,PREL

      652     2504    3         KV$INPFNCTBL.OPRX_OFS(I) = KV$INPFNCTBL.OPRX_OFS(I) + 1;

   2504   1 0005E2  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 0005E4  B847 0026                            LDR,R3   I,AUTO
          1 0005E6  3E1C                                 ADV,R3   28
          1 0005E7  8AB6                                 INC      ,B6,R3
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:91   

      653     2505    3      END;

   2505   1 0005E8  8AC7 0026                            INC      I,AUTO
          1 0005EA  E847 0026                            LDR,R6   I,AUTO
          1 0005EC  6D05                                 CMV,R6   5
          1 0005ED  0AF5                                 BALE     s:2504,SPREL

      654     2506
      655     2507        /* put the OPRX in the hole */
      656     2508
      657     2509    2      OPRX_ARY(MATCHX) = LWBND;

   2509   1 0005EE  ECC7 001D                            LDB,B6   OPRX_ARY$,AUTO
          1 0005F0  B847 0021                            LDR,R3   MATCHX,AUTO
          1 0005F2  D847 0025                            LDR,R5   LWBND,AUTO
          1 0005F4  DF36                                 STR,R5   ,B6,R3

      658     2510
      659     2511        /* make room for ID_CHR */
      660     2512
      661     2513    2      ID_CHR_ARY$ = PINCRW(FNCTBL$,KV$INPFNCTBL.ID_CHROFS(0)/2);

   2513   1 0005F5  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 0005F7  C845 0022                            LDR,R4   34,B5
          1 0005F9  C370 0002                            DIV,R4   2,IMO
          1 0005FB  A854                                 LDR,R2   R4
          1 0005FC  CBA5                                 LAB,B4   ,B5,R2
          1 0005FD  CFC7 001B                            STB,B4   ID_CHR_ARY$,AUTO

      662     2514    3      DO I = (TTL_ID_CNT - 1) DOWNTO MATCHX;

   2514   1 0005FF  E847 001A                            LDR,R6   TTL_ID_CNT,AUTO
          1 000601  6EFF                                 ADV,R6   -1
          1 000602  EF47 0026                            STR,R6   I,AUTO
          1 000604  0F81 000A                            B        s:2516+2,PREL

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:92   
      663     2515    3         ID_CHR_ARY(I+1) = ID_CHR_ARY(I);

   2515   1 000606  ECC7 001B                            LDB,B6   ID_CHR_ARY$,AUTO
          1 000608  B847 0026                            LDR,R3   I,AUTO
          1 00060A  E2B6                                 LLH,R6   ,B6,R3
          1 00060B  3E01                                 ADV,R3   1
          1 00060C  E7B6                                 STH,R6   ,B6,R3

      664     2516    3      END;

   2516   1 00060D  88C7 0026                            DEC      I,AUTO
          1 00060F  E847 0026                            LDR,R6   I,AUTO
          1 000611  E947 0021                            CMR,R6   MATCHX,AUTO
          1 000613  08F3                                 BAGE     s:2515,SPREL

      665     2517
      666     2518        /* update offsets */
      667     2519
      668     2520    3      DO I = (TBLTYP + 1) TO %TBL_LST;

   2520   1 000614  E847 0010                            LDR,R6   TBLTYP,AUTO
          1 000616  6E01                                 ADV,R6   1
          1 000617  EF47 0026                            STR,R6   I,AUTO
          1 000619  0F81 0009                            B        s:2522+2,PREL

      669     2521    3         KV$INPFNCTBL.ID_CHROFS(I) = KV$INPFNCTBL.ID_CHROFS(I) + 1;

   2521   1 00061B  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 00061D  B847 0026                            LDR,R3   I,AUTO
          1 00061F  3E22                                 ADV,R3   34
          1 000620  8AB6                                 INC      ,B6,R3

      670     2522    3      END;

   2522   1 000621  8AC7 0026                            INC      I,AUTO
          1 000623  E847 0026                            LDR,R6   I,AUTO
          1 000625  6D05                                 CMV,R6   5
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:93   
          1 000626  0AF5                                 BALE     s:2521,SPREL

      671     2523
      672     2524        /* put the ID_CHR in the hole */
      673     2525
      674     2526    2      ID_CHR_ARY(MATCHX) = ID_TKN;

   2526   1 000627  D847 0012                            LDR,R5   ID_TKN,AUTO
          1 000629  ECC7 001B                            LDB,B6   ID_CHR_ARY$,AUTO
          1 00062B  B847 0021                            LDR,R3   MATCHX,AUTO
          1 00062D  D7B6                                 STH,R5   ,B6,R3

      675     2527
      676     2528        /* other updates to do */
      677     2529
      678     2530    2      KV$INPFNCTBL.ID_CHRCNT(TBLTYP) = KV$INPFNCTBL.ID_CHRCNT(TBLTYP) + 1;

   2530   1 00062E  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 000630  A847 0010                            LDR,R2   TBLTYP,AUTO
          1 000632  2E10                                 ADV,R2   16
          1 000633  D2A5                                 LLH,R5   ,B5,R2
          1 000634  5E01                                 ADV,R5   1
          1 000635  D7A5                                 STH,R5   ,B5,R2

      679     2531
      680     2532        /* take care of the SPCCHR and ESCINT */
      681     2533
      682     2534    2      IF (TBLTYP = %KV_INPFNCTYP_SPCCHR) THEN

   2534   1 000636  D847 0010                            LDR,R5   TBLTYP,AUTO
          1 000638  5D02                                 CMV,R5   2
          1 000639  0981 000A                            BNE      s:2537,PREL

      683     2535    2      KV$INPFNCTBL.SPCCHR(ID_TKN) = '1'B;

   2535   1 00063B  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 00063D  CBC5 000B                            LAB,B4   11,B5
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:94   
          1 00063F  A847 0012                            LDR,R2   ID_TKN,AUTO
          1 000641  8924                                 LBT      ,B4,R2
          1 000642  0F81 003E                            B        s:2548,PREL

      684     2536
      685     2537    2      ELSE IF TBLTYP<%KV_INPFNCTYP_SPCCHR

   2537   1 000644  0281 003C                            BGE      s:2548,PREL
          1 000646  DCC7 000E                            LDB,B5   MSG$,AUTO
          1 000648  C845 0003                            LDR,R4   3,B5
          1 00064A  4043                                 SOR,R4   3
          1 00064B  C570 0007                            AND,R4   7,IMO
          1 00064D  4D03                                 CMV,R4   3
          1 00064E  0901 0032                            BE       s:2548,PREL

      686     2538    3        AND KV$PRM_DCLINPFNC.INT1_TKNTYP~=%KV_INPFNCTKNTYP_NON THEN DO;

      687     2539    3         %KV_MVD.INPFNCCPY(TBLTYP) = '0'B;

   2539   1 000650  CC80 0000 0000  xsym                 LDB,B4   KV$PTR$
          1 000653  BCC4 0006                            LDB,B3   6,B4
          1 000655  ABC3 001F                            LAB,B2   31,B3
          1 000657  A855                                 LDR,R2   R5
          1 000658  2E09                                 ADV,R2   9
          1 000659  8822                                 LBF      ,B2,R2

      688     2540    3         KV$INPFNCTBL.ESCINT1_CHR(TBLTYP) = KV$PRM_DCLINPFNC.INT1_TKN+

   2540   1 00065A  9847 0042                            LDR,R1   INT1_TKNTYP,AUTO
          1 00065C  C2C5 0002                            LLH,R4   2,B5
          1 00065E  CA10 0000 002E  00                   ADD,R4   TYP_OFS,R1
          1 000661  CCC7 0008                            LDB,B4   FNCTBL$,AUTO
          1 000663  B847 0010                            LDR,R3   TBLTYP,AUTO
          1 000665  3E28                                 ADV,R3   40
          1 000666  CF34                                 STR,R4   ,B4,R3

      689     2541    3           TYP_OFS(INT1_TKNTYP);
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:95   
      690     2542    3         IF INT1_TKNTYP=%KV_INPFNCTKNTYP_CHR

   2542   1 000667  1981 0008                            BNEZ,R1  s:2544,PREL

      691     2543    3         THEN KV$INPFNCTBL.SPCCHR(KV$PRM_DCLINPFNC.INT1_TKN) = '1'B;

   2543   1 000669  B2C5 0002                            LLH,R3   2,B5
          1 00066B  CCC7 0008                            LDB,B4   FNCTBL$,AUTO
          1 00066D  BBC4 000B                            LAB,B3   11,B4
          1 00066F  8933                                 LBT      ,B3,R3

      692     2544    4         IF (KV$PRM_DCLINPFNC.INT2_TKNTYP ~= %KV_INPFNCTKNTYP_NON) THEN DO;

   2544   1 000670  C845 0003                            LDR,R4   3,B5
          1 000672  C570 0007                            AND,R4   7,IMO
          1 000674  4D03                                 CMV,R4   3
          1 000675  0901 000B                            BE       s:2548,PREL

      693     2545    4            KV$INPFNCTBL.ESCINT2_CHR(TBLTYP) = KV$PRM_DCLINPFNC.INT2_TKN;

   2545   1 000677  CCC7 0008                            LDB,B4   FNCTBL$,AUTO
          1 000679  B847 0010                            LDR,R3   TBLTYP,AUTO
          1 00067B  3E2A                                 ADV,R3   42
          1 00067C  E845 0002                            LDR,R6   2,B5
          1 00067E  E570 00FF                            AND,R6   255,IMO
          1 000680  EF34                                 STR,R6   ,B4,R3

      694     2546    4         END;

      695     2547    3      END;

      696     2548    2      TTL_ID_CNT = TTL_ID_CNT + 1;

   2548   1 000681  8AC7 001A                            INC      TTL_ID_CNT,AUTO

      697     2549    2      TBL_END = TBL_END + 1 + MOD(TTL_ID_CNT,2);

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:96   
   2549   1 000683  E847 001A                            LDR,R6   TTL_ID_CNT,AUTO
          1 000685  E570 0001                            AND,R6   1,IMO
          1 000687  EA47 0023                            ADD,R6   TBL_END,AUTO
          1 000689  6E01                                 ADV,R6   1
          1 00068A  EF47 0023                            STR,R6   TBL_END,AUTO

      698     2550
      699     2551    2   END Y$ADD;

   2551   1 00068C  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 00068E  C3C6 0001                            LNJ,B4   1,B6

      700     2552
      701     2553        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:97   
      702     2554        /*F* NAME: Y$CLEANUP
      703     2555             PURPOSE:
      704     2556                   To clean up extra space or multiple copies of input function
      705     2557                   tables after modifications occurr.
      706     2558        */
      707     2559
      708     2560    1   Y$CLEANUP: PROC;

   2560   1 000690  EFC7 0040            Y$CLEANUP       STB,B6   VDH_RLSBFR+7,AUTO

      709     2561
      710     2562        /* IF THE TROUBLE FLAG IS SET, DONT DO ANY MODIFICATIONS CAUSE SOMETHING      */
      711     2563        /* FUNNY HAPPENED. RELEASE ANY BUFFER COPIES, RESET FIND-INHIBIT IF SET       */
      712     2564        /* AND EXIT                                                                   */
      713     2565
      714     2566    3      IF TRBL THEN DO;

   2566   1 000692  89C7 0028                            CMZ      TRBL,AUTO
          1 000694  0881 0023                            BAGE     s:2583,PREL

      715     2567
      716     2568    3         IF FNCTBL$~=ORGUSRTBL$ THEN

   2568   1 000696  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 000698  DDC7 0006                            CMB,B5   ORGUSRTBL$,AUTO
          1 00069A  0901 000C                            BE       s:2571,PREL

      717     2569    3         CALL Y$RELEASE(FNCTBL$,'0'B);

   2569   1 00069C  CBF0 0000                            LAB,B4   0,IMO
          1 00069E  CFC7 0048                            STB,B4   @Y@SRC_TBLTYP,AUTO
          1 0006A0  BBC7 0008                            LAB,B3   FNCTBL$,AUTO
          1 0006A2  BFC7 0046                            STB,B3   INT1_TKNTYP+4,AUTO
          1 0006A4  E3C0 0161                            LNJ,B6   s:0,PREL
          1 0006A6       0001                            DC       s:2571,PREL

      718     2570
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:98   
      719     2571    4         IF ORGUSRTBL$ ~= ADDR(NIL) THEN DO;

   2571   1 0006A7  8DC7 0006                            CMN      ORGUSRTBL$,AUTO
          1 0006A9  0901 000A                            BE       s:2577,PREL

      720     2572    5            IF ORGUSRTBL$->KV$SHRBFR.USRCNT = 0 THEN DO;

   2572   1 0006AB  ECC7 0006                            LDB,B6   ORGUSRTBL$,AUTO
          1 0006AD  E846 0003                            LDR,R6   3,B6
          1 0006AF  6981 0004                            BNEZ,R6  s:2577,PREL

      721     2573    5               ORGUSRTBL$->KV$SHRBFR.USRCNT = 1;

   2573   1 0006B1  6C01                                 LDV,R6   1
          1 0006B2  EF46 0003                            STR,R6   3,B6

      722     2574    5            END /* IF */;

      723     2575    4         END;

      724     2576
      725     2577    3         RETURN;

   2577   1 0006B4  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 0006B6  C3C6 0001                            LNJ,B4   1,B6

      726     2578    3      END /* IF TRBL */;
      727     2579
      728     2580        /* If after all the modifications, we are left with an empty table,
      729     2581        we will set the input function table pointer to nil.                          */
      730     2582
      731     2583    3      IF TTL_ID_CNT = 0 THEN DO;

   2583   1 0006B8  E847 001A                            LDR,R6   TTL_ID_CNT,AUTO
          1 0006BA  6981 002B                            BNEZ,R6  s:2594,PREL

      732     2584    3         %KV_MVD.USRINPFNCTBL$ = ADDR(NIL);
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:99   

   2584   1 0006BC  DC80 0000 0000  xsym                 LDB,B5   KV$PTR$
          1 0006BF  CCC5 0006                            LDB,B4   6,B5
          1 0006C1  BB80 0000 0000                       LAB,B3   0
          1 0006C4  BFC4 0008                            STB,B3   8,B4

      733     2585    3         IF FNCTBL$~=ORGUSRTBL$ THEN

   2585   1 0006C6  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 0006C8  EDC7 0006                            CMB,B6   ORGUSRTBL$,AUTO
          1 0006CA  0901 000C                            BE       s:2587,PREL

      734     2586    3         CALL Y$RELEASE(FNCTBL$,'0'B);

   2586   1 0006CC  CBF0 0000                            LAB,B4   0,IMO
          1 0006CE  CFC7 0048                            STB,B4   @Y@SRC_TBLTYP,AUTO
          1 0006D0  BBC7 0008                            LAB,B3   FNCTBL$,AUTO
          1 0006D2  BFC7 0046                            STB,B3   INT1_TKNTYP+4,AUTO
          1 0006D4  E3C0 0131                            LNJ,B6   s:0,PREL
          1 0006D6       0001                            DC       s:2587,PREL

      735     2587    3         CALL Y$RELEASE(ORGUSRTBL$,'1'B);

   2587   1 0006D7  EBF0 8000                            LAB,B6   -32768,IMO
          1 0006D9  EFC7 0048                            STB,B6   @Y@SRC_TBLTYP,AUTO
          1 0006DB  DBC7 0006                            LAB,B5   ORGUSRTBL$,AUTO
          1 0006DD  DFC7 0046                            STB,B5   INT1_TKNTYP+4,AUTO
          1 0006DF  E3C0 0126                            LNJ,B6   s:0,PREL
          1 0006E1       0001                            DC       s:2588,PREL

      736     2588    3         RETURN;

   2588   1 0006E2  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 0006E4  C3C6 0001                            LNJ,B4   1,B6

      737     2589    3      END;
      738     2590        /* The table is still non_empty, but it is possible that                      */
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:100  
      739     2591        /* it now has more than 31 free words. If so, we request a smaller            */
      740     2592        /* one with less than 31 free words.                                         */
      741     2593
      742     2594    3      IF (KV$INPFNCTBL.FREWRDSIZ > 31) THEN DO;

   2594   1 0006E6  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 0006E8  D845 002D                            LDR,R5   45,B5
          1 0006EA  5D1F                                 CMV,R5   31
          1 0006EB  0381 0081                            BLE      s:2643,PREL

      743     2595
      744     2596        /* SETUP TO AND ACQUIRE A SMALLER BUFFER                                      */
      745     2597
      746     2598    3         VDH_GETBFR = KV_VDH_GETBFR;

   2598   1 0006ED  AB80 0000 0000  xsym                 LAB,B2   KV_VDH_GETBFR
          1 0006F0  2C00                                 LDV,R2   0
          1 0006F1  6C16                                 LDV,R6   22
          1 0006F2  BB87                                 LAB,B3   ,AUTO
          1 0006F3  3C5C                                 LDV,R3   92
          1 0006F4  0008                                 MMM

      747     2599    3         VDH_GETBFR.STRTYP = %KV_STRTYP_USRINPFNCTBL;

   2599   1 0006F5  6C1A                                 LDV,R6   26
          1 0006F6  E7C7 0034                            STH,R6   VDH_GETBFR+6,AUTO

      748     2600    3         NEWTBLSIZ = FNCTBL$->KV$SHRBFR.BYTSIZ/2 - KV$INPFNCTBL.FREWRDSIZ;

   2600   1 0006F8  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 0006FA  D846 0002                            LDR,R5   2,B6
          1 0006FC  5041                                 SOR,R5   1
          1 0006FD  D246 002D                            SUB,R5   45,B6
          1 0006FF  DF47 0014                            STR,R5   NEWTBLSIZ,AUTO

      749     2601    3         VDH_GETBFR.DAT_.BYTSIZ = NEWTBLSIZ*2 - LENGTHC(KV$SHRBFR);

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:101  
   2601   1 000701  5001                                 SOL,R5   1
          1 000702  5EF8                                 ADV,R5   -8
          1 000703  DF47 0038                            STR,R5   VDH_GETBFR+10,AUTO

      750     2602
      751     2603        /* Pick a buffer size that only does one fracturization */
      752     2604
      753     2605    3         I = 128;

   2605   1 000705  C870 0080                            LDR,R4   128,IMO
          1 000707  CF47 0026                            STR,R4   I,AUTO

      754     2606    4         DO WHILE I*2<NEWTBLSIZ;

   2606   1 000709  0F81 0006                            B        s:2608,PREL

      755     2607    4            I = I*2;

   2607   1 00070B  E847 0026                            LDR,R6   I,AUTO
          1 00070D  6001                                 SOL,R6   1
          1 00070E  EF47 0026                            STR,R6   I,AUTO

      756     2608    4         END;

   2608   1 000710  E847 0026                            LDR,R6   I,AUTO
          1 000712  6001                                 SOL,R6   1
          1 000713  6878                                 BLZ,R6   s:2607,SPREL
          1 000714  E947 0014                            CMR,R6   NEWTBLSIZ,AUTO
          1 000716  0275                                 BL       s:2607,SPREL

      757     2609    3         IF I+I/2 < NEWTBLSIZ THEN VDH_GETBFR.BYTSIZ = I*4;

   2609   1 000717  D847 0026                            LDR,R5   I,AUTO
          1 000719  D370 0002                            DIV,R5   2,IMO
          1 00071B  DA47 0026                            ADD,R5   I,AUTO
          1 00071D  5801 0005                            BLZ,R5   s:2609+12,PREL
          1 00071F  D947 0014                            CMR,R5   NEWTBLSIZ,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:102  
          1 000721  0281 0008                            BGE      s:2610,PREL

   2609   1 000723  D847 0026                            LDR,R5   I,AUTO
          1 000725  5002                                 SOL,R5   2
          1 000726  DF47 0031                            STR,R5   VDH_GETBFR+3,AUTO
          1 000728  0F81 0006                            B        s:2611,PREL

      758     2610    3         ELSE VDH_GETBFR.BYTSIZ = I*3;

   2610   1 00072A  D847 0026                            LDR,R5   I,AUTO
          1 00072C  5F03                                 MLV,R5   3
          1 00072D  DF47 0031                            STR,R5   VDH_GETBFR+3,AUTO

      759     2611    3         VDH_GETBFR.DAT_.ADR$ = FNCTBL$;

   2611   1 00072F  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000731  EFC7 0035                            STB,B6   VDH_GETBFR+7,AUTO

      760     2612    3         VDH_GETBFR.DAT_.BYTX = LENGTHC(KV$SHRBFR);

   2612   1 000733  4C08                                 LDV,R4   8
          1 000734  CF47 0037                            STR,R4   VDH_GETBFR+9,AUTO

      761     2613    3         VDH_GETBFR.SHRBFR = '0'B;

   2613   1 000736  8847 0034                            LBF,'00E0'X       VDH_GETBFR+6,AUTO
   2613   1 000738       00E0

      762     2614    3         VDH_GETBFR.SHRBFR.GET = '1'B;

   2614   1 000739  8947 0034                            LBT,'0040'X       VDH_GETBFR+6,AUTO
   2614   1 00073B       0040

      763     2615    3         VDH_GETBFR.SCRNO_MMR = '0'B;

   2615   1 00073C  8847 0034                            LBF,'0001'X       VDH_GETBFR+6,AUTO
   2615   1 00073E       0001
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:103  

      764     2616    3         CALL KVS$GETBFR(VDH_GETBFR)

   2616   1 00073F  DBC7 002E                            LAB,B5   VDH_GETBFR,AUTO
          1 000741  DFC7 0050                            STB,B5   J+2,AUTO
          1 000743  BBC7 0050                            LAB,B3   J+2,AUTO
          1 000745  CBF0 0100                            LAB,B4   256,IMO
          1 000747  E380 0000 0000  xent                 LNJ,B6   KVS$GETBFR
          1 00074A       0023                            DC       s:2643,PREL

      765     2617    4         WHENRETURN DO;

      766     2618        /* Ignore the altreturn. Well just use the overly-large buffer. */
      767     2619
      768     2620        /* GET RID OF THE OLD BUFFER IF IT WAS A COPY.                                */
      769     2621    4            IF (FNCTBL$ ~= ORGUSRTBL$) THEN

   2621   1 00074B  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 00074D  EDC7 0006                            CMB,B6   ORGUSRTBL$,AUTO
          1 00074F  0901 000C                            BE       s:2624,PREL

      770     2622    4            CALL Y$RELEASE(FNCTBL$,'0'B);

   2622   1 000751  DBF0 0000                            LAB,B5   0,IMO
          1 000753  DFC7 0048                            STB,B5   @Y@SRC_TBLTYP,AUTO
          1 000755  CBC7 0008                            LAB,B4   FNCTBL$,AUTO
          1 000757  CFC7 0046                            STB,B4   INT1_TKNTYP+4,AUTO
          1 000759  E3C0 00AC                            LNJ,B6   s:0,PREL
          1 00075B       0001                            DC       s:2624,PREL

      771     2623
      772     2624    4            FNCTBL$ = VDH_GETBFR.BFR$;

   2624   1 00075C  ECC7 002F                            LDB,B6   VDH_GETBFR+1,AUTO
          1 00075E  EFC7 0008                            STB,B6   FNCTBL$,AUTO

      773     2625        /* Recalculate free word size */
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:104  
      774     2626
      775     2627    4            KV$INPFNCTBL.BYTSIZ = VDH_GETBFR.BYTSIZ;

   2627   1 000760  E847 0031                            LDR,R6   VDH_GETBFR+3,AUTO
          1 000762  EF46 0002                            STR,R6   2,B6

      776     2628    4            KV$INPFNCTBL.FREWRDSIZ = VDH_GETBFR.BYTSIZ/2 - NEWTBLSIZ;

   2628   1 000764  E847 0031                            LDR,R6   VDH_GETBFR+3,AUTO
          1 000766  6041                                 SOR,R6   1
          1 000767  E247 0014                            SUB,R6   NEWTBLSIZ,AUTO
          1 000769  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 00076B  EF46 002D                            STR,R6   45,B6

      777     2629
      778     2630    4         END /* IF VDH_GETBFR.ERR */;

      779     2631    3      END;                                 /* IF .FREWRDSIZ > 20                 */

      780     2632
      781     2633        /* SEE IF THE MISC BUFFER POINTED TO BY FNCTBL$ EXISTS ELSEWHERE IN           */
      782     2634        /* THE SHARED BUFFER CHAIN FOR THIS BUFFER TYPE. IF IT DOES, WE WANT TO       */
      783     2635        /* USE THE ONE THATS THERE AND NOT HAVE TWO OR MORE AROUND.                   */
      784     2636
      785     2637        /* SETUP AND CALL A ROUTINE TO CHECK FOR OTHER COPIES                         */
      786     2638
      787     2639
      788     2640        /* IF THE ORIGINAL BUFFER IS STILL FIND-INHIBIT, SET ITS USAGE COUNT          */
      789     2641        /* BACK TO ONE, SO WE'LL FIND IT IF WE HAVE CREATED AN IDENTICAL BUFFER       */
      790     2642
      791     2643    3      IF (ORGUSRTBL$ ~= ADDR(NIL)) THEN DO;

   2643   1 00076D  8DC7 0006                            CMN      ORGUSRTBL$,AUTO
          1 00076F  0901 000A                            BE       s:2648,PREL

      792     2644    4         IF (ORGUSRTBL$->KV$SHRBFR.USRCNT = 0) THEN DO;

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:105  
   2644   1 000771  ECC7 0006                            LDB,B6   ORGUSRTBL$,AUTO
          1 000773  E846 0003                            LDR,R6   3,B6
          1 000775  6981 0004                            BNEZ,R6  s:2648,PREL

      793     2645    4            ORGUSRTBL$->KV$SHRBFR.USRCNT = 1;

   2645   1 000777  6C01                                 LDV,R6   1
          1 000778  EF46 0003                            STR,R6   3,B6

      794     2646    4         END /* IF */;

      795     2647    3      END;

      796     2648    2      VDH_GETBFR = KV_VDH_GETBFR;

   2648   1 00077A  AB80 0000 0000  xsym                 LAB,B2   KV_VDH_GETBFR
          1 00077D  2C00                                 LDV,R2   0
          1 00077E  6C16                                 LDV,R6   22
          1 00077F  BB87                                 LAB,B3   ,AUTO
          1 000780  3C5C                                 LDV,R3   92
          1 000781  0008                                 MMM

      797     2649    2      VDH_GETBFR.STRTYP = %KV_STRTYP_USRINPFNCTBL;

   2649   1 000782  6C1A                                 LDV,R6   26
          1 000783  E7C7 0034                            STH,R6   VDH_GETBFR+6,AUTO

      798     2650        /* Only compare the significant portion of the data. */
      799     2651    2      VDH_GETBFR.DAT_.BYTSIZ =

   2651   1 000785  ECC7 0008                            LDB,B6   FNCTBL$,AUTO
          1 000787  D846 000A                            LDR,R5   10,B6
          1 000789  D570 00FF                            AND,R5   255,IMO
          1 00078B  DA46 0027                            ADD,R5   39,B6
          1 00078D  5EF8                                 ADV,R5   -8
          1 00078E  DF47 0038                            STR,R5   VDH_GETBFR+10,AUTO

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:106  
      800     2652    2        KV$INPFNCTBL.ID_CHROFS(%TBL_LST) +
      801     2653    2        KV$INPFNCTBL.ID_CHRCNT(%TBL_LST) - LENGTHC(KV$SHRBFR);
      802     2654    2      VDH_GETBFR.DAT_.ADR$ = FNCTBL$;

   2654   1 000790  EFC7 0035                            STB,B6   VDH_GETBFR+7,AUTO

      803     2655    2      VDH_GETBFR.DAT_.BYTX = LENGTHC(KV$SHRBFR);

   2655   1 000792  4C08                                 LDV,R4   8
          1 000793  CF47 0037                            STR,R4   VDH_GETBFR+9,AUTO

      804     2656    2      VDH_GETBFR.SHRBFR = '0'B;

   2656   1 000795  8847 0034                            LBF,'00E0'X       VDH_GETBFR+6,AUTO
   2656   1 000797       00E0

      805     2657    2      VDH_GETBFR.SHRBFR.SRC = '1'B;

   2657   1 000798  8947 0034                            LBT,'0080'X       VDH_GETBFR+6,AUTO
   2657   1 00079A       0080

      806     2658    2      CALL KVS$GETBFR(VDH_GETBFR) ;

   2658   1 00079B  DBC7 002E                            LAB,B5   VDH_GETBFR,AUTO
          1 00079D  DFC7 0050                            STB,B5   J+2,AUTO
          1 00079F  BBC7 0050                            LAB,B3   J+2,AUTO
          1 0007A1  CBF0 0100                            LAB,B4   256,IMO
          1 0007A3  E380 0000 0000  xent                 LNJ,B6   KVS$GETBFR
          1 0007A6       0001                            DC       s:2659,PREL

      807     2659    2      TBL$ = VDH_GETBFR.BFR$;

   2659   1 0007A7  ECC7 002F                            LDB,B6   VDH_GETBFR+1,AUTO
          1 0007A9  EFC7 000A                            STB,B6   TBL$,AUTO

      808     2660
      809     2661    3      IF (TBL$ ~= ADDR(NIL)) THEN DO;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:107  

   2661   1 0007AB  8DC7 000A                            CMN      TBL$,AUTO
          1 0007AD  0901 001B                            BE       s:2679,PREL

      810     2662
      811     2663        /* WE FOUND A MATCH                                                           */
      812     2664
      813     2665    3         %KV_MVD.USRINPFNCTBL$ = TBL$;

   2665   1 0007AF  DC80 0000 0000  xsym                 LDB,B5   KV$PTR$
          1 0007B2  CCC5 0006                            LDB,B4   6,B5
          1 0007B4  EFC4 0008                            STB,B6   8,B4

      814     2666
      815     2667        /* IF WE WERE PLAYING WITH A COPY, RELEASE IT                                 */
      816     2668
      817     2669    3         IF (FNCTBL$ ~= ORGUSRTBL$) THEN

   2669   1 0007B6  CCC7 0008                            LDB,B4   FNCTBL$,AUTO
          1 0007B8  CDC7 0006                            CMB,B4   ORGUSRTBL$,AUTO
          1 0007BA  0901 0036                            BE       s:2692,PREL

      818     2670    3         CALL Y$RELEASE(FNCTBL$,'0'B);

   2670   1 0007BC  BBF0 0000                            LAB,B3   0,IMO
          1 0007BE  BFC7 0048                            STB,B3   @Y@SRC_TBLTYP,AUTO
          1 0007C0  ABC7 0008                            LAB,B2   FNCTBL$,AUTO
          1 0007C2  AFC7 0046                            STB,B2   INT1_TKNTYP+4,AUTO
          1 0007C4  E3C0 0041                            LNJ,B6   s:0,PREL
          1 0007C6       0001                            DC       s:2671,PREL

      819     2671    3      END; ELSE DO;

   2671   1 0007C7  0F81 0029                            B        s:2692,PREL

      820     2672
      821     2673        /* THIS BUFFER SHOULD BE ADDED TO THE CHAIN. IT DOES NOT EXIST ANYWHERE       */
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:108  
      822     2674        /* ELSE                                                                       */
      823     2675
      824     2676
      825     2677        /* IF WE MODIFIED THE BUFFER IN PLACE, DONT ADD IT                            */
      826     2678
      827     2679    4         IF (FNCTBL$ = ORGUSRTBL$) THEN DO;

   2679   1 0007C9  DCC7 0008                            LDB,B5   FNCTBL$,AUTO
          1 0007CB  DDC7 0006                            CMB,B5   ORGUSRTBL$,AUTO
          1 0007CD  0981 0006                            BNE      s:2682,PREL

      828     2680    4            FNCTBL$->KV$SHRBFR.USRCNT = 2;

   2680   1 0007CF  6C02                                 LDV,R6   2
          1 0007D0  EF45 0003                            STR,R6   3,B5

      829     2681    4         END; ELSE DO;

   2681   1 0007D2  0F81 001E                            B        s:2692,PREL

      830     2682    4            VDH_GETBFR.BFR$ = FNCTBL$;

   2682   1 0007D4  DFC7 002F                            STB,B5   VDH_GETBFR+1,AUTO

      831     2683    4            VDH_GETBFR.SHRBFR = '0'B;

   2683   1 0007D6  8847 0034                            LBF,'00E0'X       VDH_GETBFR+6,AUTO
   2683   1 0007D8       00E0

      832     2684    4            VDH_GETBFR.SHRBFR.ADD = '1'B;

   2684   1 0007D9  8947 0034                            LBT,'0020'X       VDH_GETBFR+6,AUTO
   2684   1 0007DB       0020

      833     2685    4            CALL KVS$GETBFR(VDH_GETBFR) ;

   2685   1 0007DC  CBC7 002E                            LAB,B4   VDH_GETBFR,AUTO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:109  
          1 0007DE  CFC7 0050                            STB,B4   J+2,AUTO
          1 0007E0  BBC7 0050                            LAB,B3   J+2,AUTO
          1 0007E2  CBF0 0100                            LAB,B4   256,IMO
          1 0007E4  E380 0000 0000  xent                 LNJ,B6   KVS$GETBFR
          1 0007E7       0001                            DC       s:2686,PREL

      834     2686    4            %KV_MVD.USRINPFNCTBL$ = VDH_GETBFR.BFR$;

   2686   1 0007E8  EC80 0000 0000  xsym                 LDB,B6   KV$PTR$
          1 0007EB  DCC6 0006                            LDB,B5   6,B6
          1 0007ED  CCC7 002F                            LDB,B4   VDH_GETBFR+1,AUTO
          1 0007EF  CFC5 0008                            STB,B4   8,B5

      835     2687    4         END /* IF */;

      836     2688    3      END /* IF */;

      837     2689
      838     2690        /* Do a release on the original shared buffer.                                */
      839     2691
      840     2692    2      CALL Y$RELEASE(ORGUSRTBL$,'1'B);

   2692   1 0007F1  EBF0 8000                            LAB,B6   -32768,IMO
          1 0007F3  EFC7 0048                            STB,B6   @Y@SRC_TBLTYP,AUTO
          1 0007F5  DBC7 0006                            LAB,B5   ORGUSRTBL$,AUTO
          1 0007F7  DFC7 0046                            STB,B5   INT1_TKNTYP+4,AUTO
          1 0007F9  E3C0 000C                            LNJ,B6   s:0,PREL
          1 0007FB       0001                            DC       s:2698,PREL

      841     2693
      842     2694        /* CALL A MAGICAL PAUL STENDAL ROUTINE TO LOOK AT THE NEW INPUT FUNCTION      */
      843     2695        /* TABLE AND CLEAN UP ANY DUPLICATELY DEFINED INPUT FUNCTIONS AS WELL         */
      844     2696        /* AS SOME OTHER VODOO                                                        */
      845     2697
      846     2698    2      CALL KVI$NEWINPFNCTBL;

   2698   1 0007FC  CBF0 0000                            LAB,B4   0,IMO
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:110  
          1 0007FE  E380 0000 0000  xent                 LNJ,B6   KVI$NEWINPFNCTBL
          1 000801       0001                            DC       s:2699,PREL

      847     2699    2   END Y$CLEANUP;

   2699   1 000802  ECC7 0040                            LDB,B6   VDH_RLSBFR+7,AUTO
          1 000804  C3C6 0001                            LNJ,B4   1,B6

      848     2700
      849     2701        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:111  
      850     2702
      851     2703        /*I*
      852     2704            NAME: Y$RELEASE
      853     2705            PURPOSE:
      854     2706                  To call KVS$RLSBFR if the address of the buffer is non null.
      855     2707        */
      856     2708
      857     2709    1   Y$RELEASE: PROC(Y@BFR$,Y@BFRSRC);

   2709   1 000806  EFC7 0044            Y$RELEASE       STB,B6   INT1_TKNTYP+2,AUTO

      858     2710    2   DCL Y@BFR$ PTR;
      859     2711    2   DCL Y@BFRSRC BIT(1) ALIGNED/* required by PL6 */;
      860     2712
      861     2713    2      IF Y@BFR$ = ADDR(NIL) OR Y@BFR$ = ADDR(KV_INPFNCTBL.FOR_INIT) THEN RETURN;

   2713   1 000808  DCC7 0046                            LDB,B5   @Y@BFR$,AUTO
          1 00080A  8D85                                 CMN      ,B5
          1 00080B  0901 0007                            BE       s:2713+11,PREL
          1 00080D  CB80 0000 0000  00                   LAB,B4   KV_INPFNCTBL
          1 000810  CD85                                 CMB,B4   ,B5
          1 000811  0981 0005                            BNE      s:2715,PREL

   2713   1 000813  ECC7 0044                            LDB,B6   INT1_TKNTYP+2,AUTO
          1 000815  C3C6 0001                            LNJ,B4   1,B6

      862     2714
      863     2715    2      VDH_RLSBFR = KV_VDH_RLSBFR;

   2715   1 000817  AB80 0000 0000  xsym                 LAB,B2   KV_VDH_RLSBFR
          1 00081A  2C00                                 LDV,R2   0
          1 00081B  6C0E                                 LDV,R6   14
          1 00081C  BB87                                 LAB,B3   ,AUTO
          1 00081D  3C72                                 LDV,R3   114
          1 00081E  0008                                 MMM

      864     2716    2      VDH_RLSBFR.SHRBFRSRC = Y@BFRSRC;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:112  

   2716   1 00081F  ECC7 0048                            LDB,B6   @Y@BFRSRC,AUTO
          1 000821  E806                                 LDR,R6   ,B6
          1 000822  6048                                 SOR,R6   8
          1 000823  EAC7 003F                            SRM,R6,'0080'X    VDH_RLSBFR+6,AUTO
          1 000825       0080

      865     2717    2      VDH_RLSBFR.BFR$ = Y@BFR$;

   2717   1 000826  CC85                                 LDB,B4   ,B5
          1 000827  CFC7 003A                            STB,B4   VDH_RLSBFR+1,AUTO

      866     2718    2      VDH_RLSBFR.STRTYP = %KV_STRTYP_USRINPFNCTBL;

   2718   1 000829  6C1A                                 LDV,R6   26
          1 00082A  E7C7 003F                            STH,R6   VDH_RLSBFR+6,AUTO

      867     2719    2      CALL KVS$RLSBFR(VDH_RLSBFR) ;

   2719   1 00082C  ABC7 0039                            LAB,B2   VDH_RLSBFR,AUTO
          1 00082E  AFC7 0050                            STB,B2   J+2,AUTO
          1 000830  BBC7 0050                            LAB,B3   J+2,AUTO
          1 000832  CBF0 0100                            LAB,B4   256,IMO
          1 000834  E380 0000 0000  xent                 LNJ,B6   KVS$RLSBFR
          1 000837       0001                            DC       s:2720,PREL

      868     2720    2      RETURN;

   2720   1 000838  ECC7 0044                            LDB,B6   INT1_TKNTYP+2,AUTO
          1 00083A  C3C6 0001                            LNJ,B4   1,B6

      869     2721    2   END Y$RELEASE;
      870     2722        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:113  
      871     2723
      872     2724        /*I*
      873     2725            NAME: Y$MOVDAT
      874     2726            PURPOSE:
      875     2727                  To slide data up or down in the user input function table.
      876     2728            DESCRIPTION:
      877     2729           THE PURPOSE OF THIS ROUTINE IS TO MOVE WRD_TO_MOV WORDS FROM THE LOCATION
      878     2730           POINTED TO BY FRM$, TO THE LOCATION POINTED TO BY TO$. IT IS USED TO SLIDE
      879     2731           BLOCKS OF DATA IN THE USER INPUT FUNCTION TABLE UP AND DOWN TO
      880     2732           SUPPORT ADD AND DELETE OPERATIONS. FOR EFFICIENCY, THE DATA IS
      881     2733           MOVED IN DOUBLE WORD BLOCKS, WITH A POSSIBLE SINGLE WORD MOVE
      882     2734           AT THE END IF NECESSARY. IT SHOULD BE NOTED THAT THE DATA BEGINS
      883     2735           AT LOCATION FRM$ AND EXTENDS WRD_TO_MOV WORDS FROM THERE.
      884     2736
      885     2737           INPUT. FRM$ - FROM LOCATION
      886     2738           TO$ - TO LOCATION
      887     2739           WRD_TO_MOV - NUMBER OF WORDS TO MOVE
      888     2740        */
      889     2741
      890     2742    1   Y$MOVDAT: PROC;

   2742   1 00083C  EFC7 0046            Y$MOVDAT        STB,B6   @Y@BFR$,AUTO

      891     2743
      892     2744    2   DCL Y@X SBIN;
      893     2745    2   DCL Y_DWORD(0:0) UBIN(32) ALIGNED BASED;
      894     2746    2   DCL Y_CHRS CHAR(Y@X) BASED;
      895     2747    2   DCL Y_WORD UBIN WORD ALIGNED BASED;
      896     2748
      897     2749        /* IF THIS IS A ADDR(NIL) MOVE, JUST RETURN                                   */
      898     2750
      899     2751    3      IF (WRD_TO_MOV = 0) THEN DO;

   2751   1 00083E  E847 002D                            LDR,R6   WRD_TO_MOV,AUTO
          1 000840  6981 0005                            BNEZ,R6  s:2767,PREL

      900     2752    3         RETURN;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:114  

   2752   1 000842  ECC7 0046                            LDB,B6   @Y@BFR$,AUTO
          1 000844  C3C6 0001                            LNJ,B4   1,B6

      901     2753    3      END /* IF */;
      902     2754
      903     2755        /* DETERMINE HOW MANY DOUBLE WORD MOVES WILL BE DONE AND WHETHER A            */
      904     2756        /* SINGLE WORD MOVE IS NECESSARY                                              */
      905     2757
      906     2758
      907     2759        /* IF THE FROM LOCATION IS ABOVE THE TO LOCATION, DATA IS MOVING DOWN AND     */
      908     2760        /* POINTERS ARE DECREMENTED. THE FROM LOCATION SHOULD POINT TO THE END OF     */
      909     2761        /* THE DATA BLOCK AND THE TO LOCATION SHOULD POINT TO THE LAST WORD OF        */
      910     2762        /* FREE SPACE. DATA IS PULLED DOWN. THIS IS THE 'ADD' CASE. OTHERWISE         */
      911     2763        /* DATA IS BEING PULLED UP AND FROM POINTS TO THE FIRST DATA WORD AND         */
      912     2764        /* TO POINTS TO THE FIRST WORD OF FREE SPACE. POINTERS ARE INCREMENTED        */
      913     2765        /* HERE                                                                       */
      914     2766
      915     2767    2      Y@X = WRD_TO_MOV - 1;

   2767   1 000846  6EFF                                 ADV,R6   -1
          1 000847  EF47 0048                            STR,R6   Y@X,AUTO

      916     2768    3      IF FRM$ > TO$ OR PINCRW(FRM$, Y@X) < TO$ THEN DO;

   2768   1 000849  DCC7 0029                            LDB,B5   FRM$,AUTO
          1 00084B  DDC7 002B                            CMB,B5   TO$,AUTO
          1 00084D  0301 0007                            BG       s:2772,PREL
          1 00084F  B856                                 LDR,R3   R6
          1 000850  CBB5                                 LAB,B4   ,B5,R3
          1 000851  CDC7 002B                            CMB,B4   TO$,AUTO
          1 000853  0281 0010                            BGE      s:2782,PREL

      917     2769        /*
      918     2770           We can do it with one move.
      919     2771        */
      920     2772    3         Y@X = WRD_TO_MOV*2;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:115  

   2772   1 000855  E847 002D                            LDR,R6   WRD_TO_MOV,AUTO
          1 000857  6001                                 SOL,R6   1
          1 000858  EF47 0048                            STR,R6   Y@X,AUTO

      921     2773    3         TO$->Y_CHRS = FRM$->Y_CHRS;

   2773   1 00085A  AB85                                 LAB,B2   ,B5
          1 00085B  2C00                                 LDV,R2   0
          1 00085C  BCC7 002B                            LDB,B3   TO$,AUTO
          1 00085E  3C00                                 LDV,R3   0
          1 00085F  0008                                 MMM

      922     2774    3         RETURN;

   2774   1 000860  ECC7 0046                            LDB,B6   @Y@BFR$,AUTO
          1 000862  C3C6 0001                            LNJ,B4   1,B6

      923     2775    3      END /* IF */;
      924     2776
      925     2777        /* MOVE DOUBLE WORDS                                                          */
      926     2778
      927     2779
      928     2780        /* IF THERE IS ONE SINGLE WORD LEFT, MOVE IT                                  */
      929     2781
      930     2782    3      IF (MOD(WRD_TO_MOV,2) = 1) THEN DO;

   2782   1 000864  D847 002D                            LDR,R5   WRD_TO_MOV,AUTO
          1 000866  D570 0001                            AND,R5   1,IMO
          1 000868  5D01                                 CMV,R5   1
          1 000869  0981 0005                            BNE      s:2786,PREL

      931     2783
      932     2784    3         PINCRW(TO$,Y@X)->Y_WORD = PINCRW(FRM$,Y@X)->Y_WORD;

   2784   1 00086B  CCC7 002B                            LDB,B4   TO$,AUTO
          1 00086D  D835                                 LDR,R5   ,B5,R3
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:116  
          1 00086E  DF34                                 STR,R5   ,B4,R3

      933     2785    3      END;

      934     2786    2      IF WRD_TO_MOV > 1

   2786   1 00086F  D847 002D                            LDR,R5   WRD_TO_MOV,AUTO
          1 000871  5D01                                 CMV,R5   1
          1 000872  0381 0015                            BLE      s:2790,PREL

      935     2787    3      THEN DO Y@X = WRD_TO_MOV/2-1 DOWNTO 0; /* LOOP START                       */

   2787   1 000874  5041                                 SOR,R5   1
          1 000875  B855                                 LDR,R3   R5
          1 000876  3EFF                                 ADV,R3   -1
          1 000877  BF47 0048                            STR,R3   Y@X,AUTO
          1 000879  0F81 000B                            B        s:2789+2,PREL

      936     2788    3         TO$->Y_DWORD(Y@X) = FRM$->Y_DWORD(Y@X);

   2788   1 00087B  ECC7 0029                            LDB,B6   FRM$,AUTO
          1 00087D  B847 0048                            LDR,R3   Y@X,AUTO
          1 00087F  8CB6                                 LDI      ,B6,R3
          1 000880  DCC7 002B                            LDB,B5   TO$,AUTO
          1 000882  8D35                                 SDI      ,B5,R3

      937     2789    3      END /* IF */;

   2789   1 000883  88C7 0048                            DEC      Y@X,AUTO
          1 000885  E847 0048                            LDR,R6   Y@X,AUTO
          1 000887  68F4                                 BGEZ,R6  s:2788,SPREL

      938     2790    2   END Y$MOVDAT;

   2790   1 000888  ECC7 0046                            LDB,B6   @Y@BFR$,AUTO
          1 00088A  C3C6 0001                            LNJ,B4   1,B6

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:117  
      939     2791
      940     2792        %EJECT;
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:118  
      941     2793
      942     2794        /*I*
      943     2795            NAME: Y$PROCESS_ERR
      944     2796            PURPOSE:
      945     2797                  THE PURPOSE OF THIS ROUTINE IS TO INFORM VDH THAT THE REQUESTED
      946     2798                  IMP FUNCTIONS COULD NOT BE COMPLETED FOR ONE REASON OR ANOTHER
      947     2799        */
      948     2800
      949     2801    1   Y$PROCESS_ERR: PROC;

   2801   1 00088C  EFC7 0044            Y$PROCESS_ERR   STB,B6   INT1_TKNTYP+2,AUTO

      950     2802
      951     2803    2      TRBL = '1'B;

   2803   1 00088E  8947 0028                            LBT,'8000'X       TRBL,AUTO
   2803   1 000890       8000

      952     2804    2      %KV_STR.ERR.COD = ERRCODE;

   2804   1 000891  DC80 0000 0000  xsym                 LDB,B5   KV$PTR$
          1 000894  CCC5 0004                            LDB,B4   4,B5
          1 000896  E847 0011                            LDR,R6   ERRCODE,AUTO
          1 000898  EF44 0013                            STR,R6   19,B4

      953     2805    2      RETURN;

   2805   1 00089A  ECC7 0044                            LDB,B6   INT1_TKNTYP+2,AUTO
          1 00089C  C3C6 0001                            LNJ,B4   1,B6
      954     2806    2   END Y$PROCESS_ERR;
      955     2807    1   END KVM$UIFT;

PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:119  
--  Include file information  --

   KV_ERRORS_C.:E05TOU  is referenced.
   KV$PRM.:E05TOU  is referenced.
   KV$INPFNC.:E05TOU  is referenced.
   KV_PRMID_E.:E05TOU  was found in the system file and is referenced.
   KV_GLBCNS_E.:E05TOU  was found in the system file and is referenced.
   KV$VDO.:E05TOU  was found in the system file and is never referenced.
   KV$VDH.:E05TOU  was found in the system file and is referenced.
   KV$USR.:E05TOU  was found in the system file and is never referenced.
   KV$SND.:E05TOU  was found in the system file and is never referenced.
   KV$INT.:E05TOU  was found in the system file and is referenced.
   KV$GLBCTX.:E05TOU  was found in the system file and is referenced.
   KV$GLB.:E05TOU  was found in the system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is never referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure KVM$UIFT.
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:120  

 **** Variables and constants ****

  ****  Section 000 RoData KVM$UIFT

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(736)   r     1 KV_INPFNCTBL
    2E-0-0/w SBIN(16)    r     1 TYP_OFS(0:3)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @KV$VDH_SETPRM            46-0-0/w PTR         r     1 @Y@BFR$
    48-0-0/w PTR         r     1 @Y@BFRSRC                 4C-0-0/w PTR         r     1 @Y@SRC_ID_TKN
    4A-0-0/w PTR         r     1 @Y@SRC_ID_TKNTYP          48-0-0/w PTR         r     1 @Y@SRC_TBLTYP
    18-0-0/w UBIN(16)    r     1 ADD_SIZ                   19-0-0/w SBIN(16)    r     1 DLT_FNC_CNT
    17-0-0/w SBIN(16)    r     1 DLT_INPOPR_SIZ             C-0-0/w PTR         r     1 ENDMSG$
    11-0-0/w UBIN(16)    r     1 ERRCODE                    8-0-0/w PTR         r     1 FNCTBL$
    22-0-0/b BIT         r     1 FND                       29-0-0/w PTR         r     1 FRM$
    26-0-0/w SBIN(16)    r     1 I                         1B-0-0/w PTR         r     1 ID_CHR_ARY$
    12-0-0/w UBIN(16)    r     1 ID_TKN                    13-0-0/w UBIN(16)    r     1 ID_TKNTYP
    15-0-0/w SBIN(16)    r     1 INPOPR_SIZ                42-0-0/w SBIN(16)    r     1 INT1_TKNTYP
    4E-0-0/w UBIN(16)    r     1 J                         4E-0-0/w STRC(16)    r     1 JB
    *0-0-0/w STRC(128)   r     1 KV$VDH_SETPRM             25-0-0/w SBIN(16)    r     1 LWBND
    21-0-0/w SBIN(16)    r     1 MATCHX                     E-0-0/w PTR         r     1 MSG$
    14-0-0/w UBIN(16)    r     1 NEWTBLSIZ                 1D-0-0/w PTR         r     1 OPRX_ARY$
     6-0-0/w PTR         r     1 ORGUSRTBL$                16-0-0/w SBIN(16)    r     1 PRM_LNG
    20-0-0/w SBIN(16)    r     1 SRCHGHX                   1F-0-0/w SBIN(16)    r     1 SRCLOWX
     A-0-0/w PTR         r     1 TBL$                      10-0-0/w UBIN(16)    r     1 TBLTYP
    23-0-0/w SBIN(16)    r     1 TBL_END                   2B-0-0/w PTR         r     1 TO$
    28-0-0/b BIT         r     1 TRBL                      1A-0-0/w UBIN(16)    r     1 TTL_ID_CNT
    24-0-0/w SBIN(16)    r     1 UPBND                     2E-0-0/w STRC(176)   r     1 VDH_GETBFR
    39-0-0/w STRC(112)   r     1 VDH_RLSBFR                2D-0-0/w UBIN(16)    r     1 WRD_TO_MOV
    2D-0-0/w SBIN(16)    r     1 WRD_TO_MOV_S              *0-0-0/w PTR         r     1 Y@BFR$
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:121  
    *0-0-0/w BIT         r     1 Y@BFRSRC                  27-0-0/w UBIN(16)    r     1 Y@BYTSIZ
    *0-0-0/w STRC(16)    r     1 Y@SRC_CHR                 *0-0-0/w UBIN(16)    r     1 Y@SRC_ID_TKN
    *0-0-0/w UBIN(16)    r     1 Y@SRC_ID_TKNTYP           *0-0-0/w UBIN(16)    r     1 Y@SRC_TBLTYP
    48-0-0/w SBIN(16)    r     1 Y@X

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 KV$PTR$                    0-0-0/w UBIN(16)    r     1 KV_MAXUFTSIZ
     0-0-0/w STRC(176)   r     1 KV_VDH_GETBFR              0-0-0/w STRC(112)   r     1 KV_VDH_RLSBFR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(255)   r     1 CHARS
     0-0-0/c UBIN(8)     r     1 ID_CHR_ARY(0:0)
     0-0-0/w STRC(736)   r     1 KV$INPFNCTBL               0-0-0/w STRC(16)    r     1 KV$INPOPR
     0-0-0/w ACHR        r     1 KV$INPOPR_DUMMY            0-0-0/w ASTR(24)    r     1 KV$INPOPR_TXT
     0-0-0/w STRC(512)   r     1 KV$MVD                     0-0-0/w STRC(72)    r     1 KV$PRM_DCLINPFNC
     0-0-0/w STRC(32)    r     1 KV$PRM_RLSINPFNC           0-0-0/w STRC(480)   r     1 KV$PTR
     0-0-0/w STRC(64)    r     1 KV$SHRBFR                  0-0-0/w STRC(512)   r     1 KV$STR
     0-0-0/w SBIN(16)    r     1 OPRX_ARY(0:0)
     0-0-0/c ACHR        r     1 Y_CHRS
     0-0-0/w UBIN(32)    r     1 Y_DWORD(0:0)
     0-0-0/w UBIN(16)    r     1 Y_WORD


   Procedure KVM$UIFT requires 2206 words for executable code.
   Procedure KVM$UIFT requires 82 words of local(AUTO) storage.

    No errors detected in file KVM$UIFT.:E05TSI    .
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:122  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:123  
          MINI XREF LISTING

ADD_SIZ
      1555**DCL      2358<<ASSIGN   2359>>IF       2360>>ASSIGN   2372>>ASSIGN
CHARS
      1962**DCL      2120<<ASSIGN   2120>>ASSIGN   2178>>CALLBLT  2242<<ASSIGN   2242>>ASSIGN
DLT_FNC_CNT
      1556**DCL      2133<<ASSIGN   2136<<ASSIGN   2198>>IF       2200>>ASSIGN   2214>>ASSIGN   2220>>DOINDEX
      2226>>ASSIGN   2228>>ASSIGN   2234>>ASSIGN   2235>>ASSIGN   2241>>ASSIGN   2242>>ASSIGN   2248>>ASSIGN
      2250>>ASSIGN   2250>>ASSIGN   2277>>ASSIGN   2277>>ASSIGN   2278>>ASSIGN   2335<<ASSIGN   2353<<ASSIGN
DLT_INPOPR_SIZ
      1554**DCL      2201<<ASSIGN   2207>>ASSIGN   2213>>ASSIGN   2214>>ASSIGN   2219>>ASSIGN   2221>>ASSIGN
      2250>>ASSIGN
ENDMSG$
      1545**DCL      1982>>DOWHILE  1991>>IF       2039<<ASSIGN
ERRCODE
      1548**DCL      2000<<ASSIGN   2031<<ASSIGN   2060<<ASSIGN   2102<<ASSIGN   2108<<ASSIGN   2298<<ASSIGN
      2305<<ASSIGN   2324<<ASSIGN   2343<<ASSIGN   2378<<ASSIGN   2410<<ASSIGN   2804>>ASSIGN
FNCTBL$
      1543**DCL      1174--IMP-PTR  2040<<ASSIGN   2041>>ASSIGN   2043>>IF       2049>>ASSIGN   2050>>ASSIGN
      2057<<ASSIGN   2058>>ASSIGN   2065<<ASSIGN   2071>>ASSIGN   2078>>IF       2079>>ASSIGN   2079>>ASSIGN
      2079>>ASSIGN   2081>>ASSIGN   2096>>IF       2119>>ASSIGN   2120>>ASSIGN   2124>>ASSIGN   2126>>ASSIGN
      2129>>IF       2136>>ASSIGN   2168>>ASSIGN   2168>>ASSIGN   2169>>ASSIGN   2169>>ASSIGN   2170>>ASSIGN
      2197>>ASSIGN   2197>>ASSIGN   2199>>ASSIGN   2206>>ASSIGN   2213>>ASSIGN   2213>>ASSIGN   2214>>ASSIGN
      2214>>ASSIGN   2218>>ASSIGN   2218>>ASSIGN   2226>>ASSIGN   2227>>ASSIGN   2227>>ASSIGN   2234>>ASSIGN
      2234>>ASSIGN   2235>>ASSIGN   2235>>ASSIGN   2240>>ASSIGN   2240>>ASSIGN   2242>>ASSIGN   2242>>ASSIGN
      2242>>ASSIGN   2242>>ASSIGN   2248>>ASSIGN   2248>>ASSIGN   2250>>ASSIGN   2250>>ASSIGN   2255>>IF
      2256>>CALL     2259>>ASSIGN   2259>>ASSIGN   2260>>ASSIGN   2262>>ASSIGN   2269>>ASSIGN   2271>>ASSIGN
      2274>>IF       2275>>ASSIGN   2275>>ASSIGN   2314>>IF       2315>>IF       2315>>IF       2315>>IF
      2315>>IF       2335>>ASSIGN   2350>>IF       2351<<ASSIGN   2359>>IF       2360>>ASSIGN   2360>>ASSIGN
      2372>>ASSIGN   2372>>ASSIGN   2402>>ASSIGN   2403>>ASSIGN   2417>>IF       2417>>IF       2418<>CALL
      2419<<ASSIGN   2424>>ASSIGN   2425>>ASSIGN   2425>>ASSIGN   2429>>ASSIGN   2429>>ASSIGN   2431>>ASSIGN
      2431>>ASSIGN   2433>>ASSIGN   2437>>ASSIGN   2444>>ASSIGN   2444>>ASSIGN   2445>>ASSIGN   2445>>ASSIGN
      2447>>ASSIGN   2447>>ASSIGN   2457>>ASSIGN   2493>>ASSIGN   2501>>ASSIGN   2501>>ASSIGN   2504>>ASSIGN
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:124  
      2504>>ASSIGN   2513>>ASSIGN   2513>>ASSIGN   2521>>ASSIGN   2521>>ASSIGN   2530>>ASSIGN   2530>>ASSIGN
      2535>>ASSIGN   2540>>ASSIGN   2543>>ASSIGN   2545>>ASSIGN   2568>>IF       2569<>CALL     2585>>IF
      2586<>CALL     2594>>IF       2600>>ASSIGN   2600>>ASSIGN   2611>>ASSIGN   2621>>IF       2622<>CALL
      2624<<ASSIGN   2627>>ASSIGN   2628>>ASSIGN   2651>>ASSIGN   2651>>ASSIGN   2654>>ASSIGN   2669>>IF
      2670<>CALL     2679>>IF       2680>>ASSIGN   2682>>ASSIGN
FND
      1567**DCL      2140>>IF       2176<<ASSIGN   2181<<ASSIGN   2258>>IF       2355>>IF
FRM$
      1576**DCL      2207<<ASSIGN   2228<<ASSIGN   2437<<ASSIGN   2438>>ASSIGN   2458<<ASSIGN   2462<<ASSIGN
      2478<<ASSIGN   2489>>ASSIGN   2494<<ASSIGN   2495>>ASSIGN   2768>>IF       2768>>IF       2773>>ASSIGN
      2784>>ASSIGN   2788>>ASSIGN
I
      1571**DCL      2212<<DOINDEX  2213>>ASSIGN   2213>>ASSIGN   2214>>ASSIGN   2214>>ASSIGN   2220<<DOINDEX
      2221>>ASSIGN   2221>>ASSIGN   2233<<DOINDEX  2234>>ASSIGN   2234>>ASSIGN   2235>>ASSIGN   2235>>ASSIGN
      2273<<DOINDEX  2274>>IF       2275>>ASSIGN   2443<<DOINDEX  2444>>ASSIGN   2444>>ASSIGN   2445>>ASSIGN
      2445>>ASSIGN   2448<<DOINDEX  2449>>ASSIGN   2449>>ASSIGN   2461<<ASSIGN   2473>>IF       2473>>ASSIGN
      2477<<ASSIGN   2477>>ASSIGN   2479>>IF       2482>>IF       2500<<DOINDEX  2501>>ASSIGN   2501>>ASSIGN
      2503<<DOINDEX  2504>>ASSIGN   2504>>ASSIGN   2514<<DOINDEX  2515>>ASSIGN   2515>>ASSIGN   2520<<DOINDEX
      2521>>ASSIGN   2521>>ASSIGN   2605<<ASSIGN   2606>>DOWHILE  2607<<ASSIGN   2607>>ASSIGN   2609>>IF
      2609>>IF       2609>>ASSIGN   2610>>ASSIGN
ID_CHR_ARY
      1560**DCL      2515<<ASSIGN   2515>>ASSIGN   2526<<ASSIGN
ID_CHR_ARY$
      1559**DCL      1560--IMP-PTR  2168<<ASSIGN   2178>>CALLBLT  2240<<ASSIGN   2513<<ASSIGN   2515>>ASSIGN
      2515>>ASSIGN   2526>>ASSIGN
ID_TKN
      1549**DCL      2131<<ASSIGN   2139<>CALL     2269>>ASSIGN   2341<<ASSIGN   2354<>CALL     2526>>ASSIGN
      2535>>ASSIGN
ID_TKNTYP
      1550**DCL      2130<<ASSIGN   2132>>IF       2139<>CALL     2140>>IF       2268>>IF       2334<<ASSIGN
      2336<>CALL     2340<<ASSIGN   2342>>IF       2354<>CALL
INPOPR_SIZ
      1552**DCL      2348<<ASSIGN   2358>>ASSIGN   2438>>ASSIGN   2444>>ASSIGN   2445>>ASSIGN   2449>>ASSIGN
      2451>>ASSIGN   2455>>ASSIGN   2461>>ASSIGN
INT1_TKNTYP IN PROCEDURE Y$ADD
      2291**DCL      2313<<ASSIGN   2315>>IF       2315>>IF       2540>>ASSIGN   2542>>IF
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:125  
J IN PROCEDURE Y$SRC
      2163**DCL      2164--REDEF    2170<<ASSIGN   2171>>ASSIGN   2177>>IF       2178<<CALLBLT  2180>>ASSIGN
JB.N IN PROCEDURE Y$SRC
      2166**DCL      2178>>CALLBLT
KV$INPFNCTBL
      1174**DCL      2077--ASSIGN   2120--ASSIGN   2120--ASSIGN   2125--ASSIGN
KV$INPFNCTBL.BYTSIZ
      1183**DCL      2049>>ASSIGN   2119>>ASSIGN   2124<<ASSIGN   2402>>ASSIGN   2424<<ASSIGN   2425>>ASSIGN
      2627<<ASSIGN
KV$INPFNCTBL.ESCINT1_CHR
      1192**DCL      2256<>CALL     2259>>ASSIGN   2260<<ASSIGN   2274>>IF       2275>>ASSIGN   2315>>IF
      2540<<ASSIGN
KV$INPFNCTBL.ESCINT2_CHR
      1192**DCL      2262<<ASSIGN   2315>>IF       2315>>IF       2545<<ASSIGN
KV$INPFNCTBL.FREWRDSIZ
      1193**DCL      2126<<ASSIGN   2250<<ASSIGN   2250>>ASSIGN   2359>>IF       2360<<ASSIGN   2360>>ASSIGN
      2372>>ASSIGN   2425<<ASSIGN   2594>>IF       2600>>ASSIGN   2628<<ASSIGN
KV$INPFNCTBL.ID_CHRCNT
      1191**DCL      2079>>ASSIGN   2129>>IF       2136>>ASSIGN   2170>>ASSIGN   2248<<ASSIGN   2248>>ASSIGN
      2255>>IF       2315>>IF       2335>>ASSIGN   2530<<ASSIGN   2530>>ASSIGN   2651>>ASSIGN
KV$INPFNCTBL.ID_CHROFS
      1192**DCL      2079>>ASSIGN   2079>>ASSIGN   2081>>ASSIGN   2168>>ASSIGN   2169>>ASSIGN   2169>>ASSIGN
      2214<<ASSIGN   2214>>ASSIGN   2235<<ASSIGN   2235>>ASSIGN   2240>>ASSIGN   2242>>ASSIGN   2242>>ASSIGN
      2445<<ASSIGN   2445>>ASSIGN   2501<<ASSIGN   2501>>ASSIGN   2513>>ASSIGN   2521<<ASSIGN   2521>>ASSIGN
      2651>>ASSIGN
KV$INPFNCTBL.OPRX_OFS
      1192**DCL      2197>>ASSIGN   2199>>ASSIGN   2213<<ASSIGN   2213>>ASSIGN   2218>>ASSIGN   2226>>ASSIGN
      2227>>ASSIGN   2234<<ASSIGN   2234>>ASSIGN   2429>>ASSIGN   2429>>ASSIGN   2431>>ASSIGN   2433>>ASSIGN
      2444<<ASSIGN   2444>>ASSIGN   2447>>ASSIGN   2493>>ASSIGN   2504<<ASSIGN   2504>>ASSIGN
KV$INPFNCTBL.SPCCHR
      1191**DCL      2259<<ASSIGN   2269<<ASSIGN   2271<<ASSIGN   2275<<ASSIGN   2535<<ASSIGN   2543<<ASSIGN
KV$INPOPR
      1218**DCL      2486<<ASSIGN
KV$INPOPR.CHN
      1220**DCL      2489<<ASSIGN
KV$INPOPR.ID
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:126  
      1220**DCL      1218--IMP-SIZ  1220--REDEF    1221--REDEF    1221--REDEF
KV$INPOPR.IMD
      1220**DCL      2488<<ASSIGN
KV$INPOPR.TYP
      1220**DCL      2468<<ASSIGN   2469>>IF       2487<<ASSIGN
KV$INPOPR_DUMMY
      1218**DCL      1218--REDEF    1221--REDEF    1224--REDEF    1232--REDEF
KV$INPOPR_PST.VDH_PST.PSTVAL
      1298**DCL      1303--REDEF
KV$INPOPR_TXT
      1224**DCL      2473--IF       2473--ASSIGN   2475--ASSIGN
KV$INPOPR_TXT.L
      1229**DCL      1229--IMP-SIZ  2473>>IF       2473<<ASSIGN   2473>>ASSIGN   2473>>ASSIGN   2475>>ASSIGN
KV$MVD.INPFNCCPY
      1124**DCL      2323>>IF       2539<<ASSIGN
KV$MVD.USRINPFNCTBL$
      1105**DCL      2040>>ASSIGN   2584<<ASSIGN   2665<<ASSIGN   2686<<ASSIGN
KV$PRM_DCLINPFNC
      1483**DCL      1991--IF       2348--ASSIGN   2458--ASSIGN
KV$PRM_DCLINPFNC.ID_TKN
      1496**DCL      2341>>ASSIGN
KV$PRM_DCLINPFNC.ID_TKNTYP
      1509**DCL      2340>>ASSIGN
KV$PRM_DCLINPFNC.INPFNCTYP
      1509**DCL      2296>>ASSIGN
KV$PRM_DCLINPFNC.INT1_TKN
      1496**DCL      2315>>IF       2540>>ASSIGN   2543>>ASSIGN
KV$PRM_DCLINPFNC.INT1_TKNTYP
      1503**DCL      2303>>IF       2313>>ASSIGN   2537>>IF
KV$PRM_DCLINPFNC.INT2_TKN
      1496**DCL      2315>>IF       2545>>ASSIGN
KV$PRM_DCLINPFNC.INT2_TKNTYP
      1503**DCL      2303>>IF       2315>>IF       2315>>IF       2544>>IF
KV$PRM_DCLINPFNC.LNG
      1492**DCL      1990>>ASSIGN   1991>>IF
KV$PRM_RLSINPFNC.ALLINPFNCTYP
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:127  
      1538**DCL      2118>>IF
KV$PRM_RLSINPFNC.ID_TKN
      1533**DCL      2131>>ASSIGN
KV$PRM_RLSINPFNC.ID_TKNTYP
      1538**DCL      2107>>IF       2130>>ASSIGN
KV$PRM_RLSINPFNC.INPFNCTYP
      1538**DCL      2100>>ASSIGN
KV$PRM_RLSINPFNC.LNG
      1533**DCL      1996>>ASSIGN
KV$PRM_RLSINPFNC.TYP
      1533**DCL      1986>>DOSELCT
KV$PTR.INPCNDPND
      1349**DCL      1358--REDEF    1362--REDEF
KV$PTR.LINLST$
      1345**DCL      1346--REDEF
KV$PTR.MVD$
      1344**DCL      2040>>ASSIGN   2323>>IF       2539>>ASSIGN   2584>>ASSIGN   2665>>ASSIGN   2686>>ASSIGN
KV$PTR.STR$
      1343**DCL      2804>>ASSIGN
KV$PTR$
      1337**DCL      1343--IMP-PTR  2040>>ASSIGN   2323>>IF       2539>>ASSIGN   2584>>ASSIGN   2665>>ASSIGN
      2686>>ASSIGN   2804>>ASSIGN
KV$SHRBFR
      1382**DCL      2049--ASSIGN   2051--ASSIGN   2120--ASSIGN   2120--ASSIGN   2120--ASSIGN   2120--ASSIGN
      2402--ASSIGN   2404--ASSIGN   2601--ASSIGN   2612--ASSIGN   2651--ASSIGN   2655--ASSIGN
KV$SHRBFR.BYTSIZ
      1391**DCL      2372>>ASSIGN   2600>>ASSIGN
KV$SHRBFR.USRCNT
      1395**DCL      2044>>IF       2058<<ASSIGN   2071<<ASSIGN   2572>>IF       2573<<ASSIGN   2644>>IF
      2645<<ASSIGN   2680<<ASSIGN
KV$STR.ERR.COD
      1070**DCL      2804<<ASSIGN
KV$VDH_SETPRM
       960**DCL        29--PROC
KV$VDH_SETPRM.VAL_.ADR$
       990**DCL      2035>>ASSIGN   2039>>ASSIGN
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:128  
KV$VDH_SETPRM.VAL_.BYTSIZ
       990**DCL      2039>>ASSIGN
KV$VDH_SETPRM.VAL_.BYTX
       990**DCL      2035>>ASSIGN
KVI$NEWINPFNCTBL
      1970**DCL-ENT  2698--CALL
KVS$GETBFR
      1968**DCL-ENT  2055--CALL     2408--CALL     2616--CALL     2658--CALL     2685--CALL
KVS$RLSBFR
      1969**DCL-ENT  2719--CALL
KV_INPFNCTBL.FOR_INIT
      1926**DCL      2120--ASSIGN   2351--ASSIGN   2417--IF       2713--IF
KV_MAXUFTSIZ
      1784**DCL      2374>>IF
KV_VDH_GETBFR
      1709**DCL      2047>>ASSIGN   2388>>ASSIGN   2598>>ASSIGN   2648>>ASSIGN
KV_VDH_RLSBFR
      1774**DCL      2715>>ASSIGN
LWBND
      1570**DCL      2433<<ASSIGN   2434<<ASSIGN   2436>>ASSIGN   2437>>ASSIGN   2457>>ASSIGN   2509>>ASSIGN
MATCHX
      1566**DCL      2175<<ASSIGN   2180<<ASSIGN   2198>>IF       2200>>ASSIGN   2201>>ASSIGN   2206>>ASSIGN
      2220>>DOINDEX  2226>>ASSIGN   2227>>ASSIGN   2241>>ASSIGN   2242>>ASSIGN   2242>>ASSIGN   2428<<ASSIGN
      2429<<ASSIGN   2432>>IF       2434>>ASSIGN   2448>>DOINDEX  2493>>ASSIGN   2494>>ASSIGN   2509>>ASSIGN
      2514>>DOINDEX  2526>>ASSIGN
MSG$
      1546**DCL      1483--IMP-PTR  1526--IMP-PTR  1982>>DOWHILE  1986>>DOSELCT  1990>>ASSIGN   1991>>IF
      1991>>IF       1996>>ASSIGN   2010<<ASSIGN   2010>>ASSIGN   2035<<ASSIGN   2100>>ASSIGN   2107>>IF
      2118>>IF       2130>>ASSIGN   2131>>ASSIGN   2296>>ASSIGN   2303>>IF       2303>>IF       2313>>ASSIGN
      2315>>IF       2315>>IF       2315>>IF       2315>>IF       2340>>ASSIGN   2341>>ASSIGN   2458>>ASSIGN
      2537>>IF       2540>>ASSIGN   2543>>ASSIGN   2544>>IF       2545>>ASSIGN
NEWTBLSIZ
      1551**DCL      2372<<ASSIGN   2374>>IF       2393>>ASSIGN   2425>>ASSIGN   2600<<ASSIGN   2601>>ASSIGN
      2606>>DOWHILE  2609>>IF       2628>>ASSIGN
OPRX_ARY
      1562**DCL      2200>>ASSIGN   2201>>ASSIGN   2206>>ASSIGN   2221<<ASSIGN   2221>>ASSIGN   2434>>ASSIGN
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:129  
      2449<<ASSIGN   2449>>ASSIGN   2509<<ASSIGN
OPRX_ARY$
      1561**DCL      1562--IMP-PTR  2197<<ASSIGN   2200>>ASSIGN   2201>>ASSIGN   2206>>ASSIGN   2218<<ASSIGN
      2221>>ASSIGN   2221>>ASSIGN   2431<<ASSIGN   2434>>ASSIGN   2447<<ASSIGN   2449>>ASSIGN   2449>>ASSIGN
      2494>>ASSIGN   2509>>ASSIGN
ORGUSRTBL$
      1542**DCL      2041<<ASSIGN   2044>>IF       2417>>IF       2568>>IF       2571>>IF       2572>>IF
      2573>>ASSIGN   2585>>IF       2587<>CALL     2621>>IF       2643>>IF       2644>>IF       2645>>ASSIGN
      2669>>IF       2679>>IF       2692<>CALL
PRM_LNG
      1553**DCL      1990<<ASSIGN   1991>>IF       1996<<ASSIGN   2010>>ASSIGN   2348>>ASSIGN
SRCHGHX
      1565**DCL      2171<<ASSIGN
SRCLOWX
      1564**DCL      2169<<ASSIGN   2171>>ASSIGN   2175>>ASSIGN   2178>>CALLBLT  2180>>ASSIGN
TBL$
      1544**DCL      2659<<ASSIGN   2661>>IF       2665>>ASSIGN
TBLTYP
      1547**DCL      2100<<ASSIGN   2101>>IF       2129>>IF       2136>>ASSIGN   2139<>CALL     2233>>DOINDEX
      2248>>ASSIGN   2248>>ASSIGN   2255>>IF       2255>>IF       2256>>CALL     2259>>ASSIGN   2260>>ASSIGN
      2262>>ASSIGN   2267>>IF       2296<<ASSIGN   2297>>IF       2314>>IF       2315>>IF       2315>>IF
      2315>>IF       2315>>IF       2323>>IF       2335>>ASSIGN   2336<>CALL     2354<>CALL     2427>>IF
      2429>>ASSIGN   2503>>DOINDEX  2520>>DOINDEX  2530>>ASSIGN   2530>>ASSIGN   2534>>IF       2537>>IF
      2539>>ASSIGN   2540>>ASSIGN   2545>>ASSIGN
TBL_END
      1568**DCL      2077<<ASSIGN   2081<<ASSIGN   2125<<ASSIGN   2126>>ASSIGN   2205>>ASSIGN   2219<<ASSIGN
      2219>>ASSIGN   2226>>ASSIGN   2277<<ASSIGN   2277>>ASSIGN   2436>>ASSIGN   2451<<ASSIGN   2451>>ASSIGN
      2493>>ASSIGN   2549<<ASSIGN   2549>>ASSIGN
TO$
      1577**DCL      1218--IMP-PTR  1218--IMP-PTR  1221--IMP-PTR  1224--IMP-PTR  1232--IMP-PTR  2206<<ASSIGN
      2207>>ASSIGN   2227<<ASSIGN   2228>>ASSIGN   2438<<ASSIGN   2457<<ASSIGN   2462>>ASSIGN   2468>>ASSIGN
      2469>>IF       2473>>IF       2473>>IF       2473>>ASSIGN   2473>>ASSIGN   2473>>ASSIGN   2473>>ASSIGN
      2475>>ASSIGN   2475>>ASSIGN   2478>>ASSIGN   2480<<ASSIGN   2480>>ASSIGN   2486>>ASSIGN   2487>>ASSIGN
      2488>>ASSIGN   2495<<ASSIGN   2768>>IF       2768>>IF       2773>>ASSIGN   2784>>ASSIGN   2788>>ASSIGN
TRBL
      1574**DCL      1982>>DOWHILE  2030<<ASSIGN   2566>>IF       2803<<ASSIGN
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:130  
TTL_ID_CNT
      1557**DCL      2076<<ASSIGN   2079<<ASSIGN   2081>>ASSIGN   2127<<ASSIGN   2198>>IF       2220>>DOINDEX
      2241>>ASSIGN   2250>>ASSIGN   2277>>ASSIGN   2278<<ASSIGN   2278>>ASSIGN   2358>>ASSIGN   2428>>ASSIGN
      2432>>IF       2448>>DOINDEX  2514>>DOINDEX  2548<<ASSIGN   2548>>ASSIGN   2549>>ASSIGN   2583>>IF
TYP_OFS IN PROCEDURE Y$ADD
      2292**DCL      2315>>IF       2540>>ASSIGN
UPBND
      1569**DCL      2199<<ASSIGN   2200<<ASSIGN   2201>>ASSIGN   2205>>ASSIGN
VDH_GETBFR
      1608**DCL      2047<<ASSIGN   2055<>CALL     2388<<ASSIGN   2408<>CALL     2598<<ASSIGN   2616<>CALL
      2648<<ASSIGN   2658<>CALL     2685<>CALL
VDH_GETBFR.BFR$
      1614**DCL      2057>>ASSIGN   2419>>ASSIGN   2624>>ASSIGN   2659>>ASSIGN   2682<<ASSIGN   2686>>ASSIGN
VDH_GETBFR.BYTSIZ
      1614**DCL      2393<<ASSIGN   2397>>DOWHILE  2397>>DOWHILE  2397>>DOWHILE  2399<<ASSIGN   2399>>ASSIGN
      2399>>ASSIGN   2399>>ASSIGN   2424>>ASSIGN   2609<<ASSIGN   2610<<ASSIGN   2627>>ASSIGN   2628>>ASSIGN
VDH_GETBFR.DAT_.ADR$
      1642**DCL      2050<<ASSIGN   2403<<ASSIGN   2611<<ASSIGN   2654<<ASSIGN
VDH_GETBFR.DAT_.BYTSIZ
      1642**DCL      2049<<ASSIGN   2402<<ASSIGN   2601<<ASSIGN   2651<<ASSIGN
VDH_GETBFR.DAT_.BYTX
      1642**DCL      2051<<ASSIGN   2404<<ASSIGN   2612<<ASSIGN   2655<<ASSIGN
VDH_GETBFR.SCRNO_MMR
      1618**DCL      2054<<ASSIGN   2407<<ASSIGN   2615<<ASSIGN
VDH_GETBFR.SHRBFR
      1615**DCL      2052<<ASSIGN   2405<<ASSIGN   2613<<ASSIGN   2656<<ASSIGN   2683<<ASSIGN
VDH_GETBFR.SHRBFR.ADD
      1616**DCL      2684<<ASSIGN
VDH_GETBFR.SHRBFR.GET
      1615**DCL      2053<<ASSIGN   2406<<ASSIGN   2614<<ASSIGN
VDH_GETBFR.SHRBFR.SRC
      1615**DCL      2657<<ASSIGN
VDH_GETBFR.STRTYP
      1614**DCL      2048<<ASSIGN   2389<<ASSIGN   2599<<ASSIGN   2649<<ASSIGN
VDH_RLSBFR
      1673**DCL      2715<<ASSIGN   2719<>CALL
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:131  
VDH_RLSBFR.BFR$
      1679**DCL      2717<<ASSIGN
VDH_RLSBFR.SHRBFRSRC
      1680**DCL      2716<<ASSIGN
VDH_RLSBFR.STRTYP
      1679**DCL      2718<<ASSIGN
WRD_TO_MOV
      1578**DCL      1579--REDEF    2205<<ASSIGN   2226<<ASSIGN   2241<<ASSIGN   2242>>ASSIGN   2242>>ASSIGN
      2436<<ASSIGN   2455<<ASSIGN   2475<<ASSIGN   2477>>ASSIGN   2493<<ASSIGN   2751>>IF       2767>>ASSIGN
      2772>>ASSIGN   2782>>IF       2786>>IF       2787>>DOINDEX
WRD_TO_MOV_S
      1579**DCL      2480>>ASSIGN
Y$ADD
      2289**PROC     1993--CALL
Y$CLEANUP
      2560**PROC     2016--CALL
Y$DELETE
      2094**PROC     1997--CALL
Y$DLT_CMN
      2193**PROC     2141--CALL     2337--CALL     2355--CALL
Y$MOVDAT
      2742**PROC     2208--CALL     2229--CALL     2439--CALL     2459--CALL     2496--CALL
Y$PROCESS_ERR
      2801**PROC     2007--CALL     2064--CALL     2103--CALL     2112--CALL     2299--CALL     2309--CALL
      2328--CALL     2344--CALL     2382--CALL     2411--CALL
Y$RELEASE
      2709**PROC     2418--CALL     2569--CALL     2586--CALL     2587--CALL     2622--CALL     2670--CALL
      2692--CALL
Y$SETUP
      2025**PROC     1977--CALL
Y$SRC
      2155**PROC     2139--CALL     2256--CALL     2336--CALL     2354--CALL
Y@BFR$ IN PROCEDURE Y$RELEASE
      2710**DCL      2709--PROC     2713>>IF       2713>>IF       2717>>ASSIGN
Y@BFRSRC IN PROCEDURE Y$RELEASE
      2711**DCL      2709--PROC     2716>>ASSIGN
PL6.E3A0      #001=KVM$UIFT File=KVM$UIFT.:E05TSI                                WED 07/30/97 02:07 Page:132  
Y@BYTSIZ
      1572**DCL      2119<<ASSIGN   2124>>ASSIGN   2126>>ASSIGN
Y@SRC_CHR.C IN PROCEDURE Y$SRC
      2162**DCL      2178>>CALLBLT
Y@SRC_ID_TKN IN PROCEDURE Y$SRC
      2159**DCL      2155--PROC     2160--REDEF
Y@SRC_ID_TKNTYP IN PROCEDURE Y$SRC
      2158**DCL      2155--PROC     2177>>IF
Y@SRC_TBLTYP IN PROCEDURE Y$SRC
      2157**DCL      2155--PROC     2169>>ASSIGN   2170>>ASSIGN
Y@X IN PROCEDURE Y$MOVDAT
      2744**DCL      2746--IMP-SIZ  2767<<ASSIGN   2768>>IF       2772<<ASSIGN   2773>>ASSIGN   2773>>ASSIGN
      2784>>ASSIGN   2784>>ASSIGN   2787<<DOINDEX  2788>>ASSIGN   2788>>ASSIGN
Y_CHRS IN PROCEDURE Y$MOVDAT
      2746**DCL      2773<<ASSIGN   2773>>ASSIGN
Y_DWORD IN PROCEDURE Y$MOVDAT
      2745**DCL      2788<<ASSIGN   2788>>ASSIGN
Y_WORD IN PROCEDURE Y$MOVDAT
      2747**DCL      2784<<ASSIGN   2784>>ASSIGN
