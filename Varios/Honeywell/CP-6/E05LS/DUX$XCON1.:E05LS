VERSION E05

PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:1    
        1        1        /*M* DUX$XCON1 - DELTA's Exit Control Routine - part 2.   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0     */
        8        8
        9        9        /*F*     NAME:   DUX$XCON1.
       10       10
       11       11                 PURPOSE: To process exit control conditions in DELTA.
       12       12        */
       13       13
       14       14        DUX$XCON1: PROC;
       15       15
       16       16        %INCLUDE B$JIT;
       17      306        %INCLUDE B_STRINGS_C;
       18      435        %INCLUDE B_ERRORS_C;
       19     1562        %INCLUDE CP_6;
       20     1643        %INCLUDE XUH_MACRO_C;
       21     1727        %INCLUDE DD_SD_M;
       22     3063        %S_D;
       23     4381        %INCLUDE DD$BASED;
       24     5684        %FPRG$CONTEXT;
       25     5747        %INCLUDE DD_SUBS_C;
       26     6018        %INCLUDE DD_DEBUG_C;
       27     6039        %INCLUDE DU_SCODE_C;
       28     6052        %INCLUDE IR_DATA_M;
       29     6216
       30     6217        %B$ALT;
       31     6225        %B$TCB;
       32     6228        %B$XCON;
       33     6238        %B$EXCFR;
       34     6256        %F$DCB;
       35     6313
       36     6314    1   DCL B$JIT$ PTR SYMREF;
       37     6315    1   DCL B$TCB$ PTR SYMREF;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:2    
       38     6316    1   DCL D_XDELTA BIT(1) SYMREF;
       39     6317
       40     6318        %FPT_SCREECH (FPTN=SNAP_XCON, STCLASS=CONSTANT SYMDEF, SCODE=SC_XCON);
       41     6332        %VLP_SCODE (FPTN=SC_XCON, STCLASS=CONSTANT SYMDEF, FCG=DU, MID=X,
       42     6333               MON=NO, CODE=%S$DUXCON, SEV=SEV_SNAP, CUSR=YES, ROSEG=YES,
       43     6334               ISEG=YES, DDSEG=YES, DBSEG=YES, ASLSEG=YES);
       44     6395        %RV_DFNAME (NAME=DUMP_FILE_NAME,
       45     6396                    STCLASS=AUTO);
       46     6400        %FPT_SCREECH (FPTN=FPT_SCREECH,
       47     6401                      STCLASS=AUTO);
       48     6415        %FPT_RELDCB(FPTN=FPT_RELDCB,
       49     6416                    STCLASS=SYMREF);
       50     6430        %FPT_RELDCB(FPTN=FPTRELDCB,
       51     6431                    STCLASS=);
       52     6445        %FPT_CLOSE (FPTN=FPT_CLOSE, STCLASS=SYMREF);
       53     6487        %FPT_CLOSE (FPTN=FPT$CLOSE, STCLASS=AUTO);
       54     6529        %FPT_EOM (FPTN=FPT_EOM,
       55     6530                  STCLASS=CONSTANT,
       56     6531                  EOMTABLE=VLP_EOMTABLE);
       57     6561        %VLP_EOMTABLE (FPTN=VLP_EOMTABLE,
       58     6562                  STCLASS=CONSTANT,
       59     6563                  VALUES=STD);
       60     6582        %FPT_WRITE (FPTN=MEM_WRITE, BUF=MEM_BUF,STCLASS=CONSTANT);
       61     6613        %FPT_WRITE (FPTN=MEM$WRITE, STCLASS=);
       62     6644    1   DCL MEM_BUF CHAR(0) CONSTANT INIT ('User- or installation-set memory limit reached.'
              6644            );
       63     6645    1   DCL D_M$DO# UBIN SYMREF;
       64     6646
       65     6647    1   DCL REM UBIN;
       66     6648    1   DCL OUT$ PTR;
       67     6649    1   DCL MSG_LENGTH UBIN;
       68     6650    1   DCL TFPRG$ PTR;
       69     6651
       70     6652    1   DCL DDR$MOVE ENTRY(4) ALTRET;
       71     6653    1   DCL DDQ$WRITE ENTRY(2);
       72     6654    1   DCL DDB$PLANT ENTRY ALTRET;
       73     6655    1   DCL DFA$QUIT ENTRY(1) ALTRET;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:3    
       74     6656    1   DCL DUA$KILL_ANLZ ENTRY ALTRET;
       75     6657    1   DCL DUA$KILL_RUM ENTRY;
       76     6658    1   DCL DUR$ECCRPT ENTRY(1);
       77     6659    1   DCL DUD$MINI ENTRY(1);
       78     6660    1   DCL DUE$ERRMSG ENTRY;
       79     6661    1   DCL DUU$TRUNC ENTRY(0) ALTRET;
       80     6662    1   DCL X66_TRTN ENTRY;
       81     6663        %EJECT;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:4    
       82     6664
       83     6665        /*D*     NAME:   DUX$XCON1.
       84     6666
       85     6667                 CALL:   TSX1  DUX$XCON1
       86     6668
       87     6669                 INTERFACE:  Called by DUX$XCON (a BMAP module) after
       88     6670                             determining that Exit Control processing
       89     6671                             is possible; i.e. DELTA's TCB is not over-
       90     6672                             flowing.
       91     6673
       92     6674        */
       93     6675
       94     6676        /*
       95     6677           Set USVFC to indicate use of special VFC to avoid overprinting.
       96     6678        */
       97     6679    1      S_D.USVFC = '1'B;                    /* Asynchronous entry                 */
       98     6680    1      IF B$TCB$ -> B$TCB.STK$ -> B$EXCFR.ISR.WSR = %DBWSR
       99     6681    1      THEN S_D.DLIB = '1'B;
      100     6682    1      ELSE S_D.DLIB = '0'B;
      101     6683
      102     6684        /*
      103     6685          First we check the internal debug flags to determine if we
      104     6686          are to report the Exit Control condition and/or enter Mini-Delta.
      105     6687        */
      106     6688    1      IF S_D.DEBUGA(%DB@ECC)
      107     6689    1        AND NOT(B$JIT.RNST & %RS_DROP#) AND NOT(B$JIT.FRS & %RS_DROP#)
      108     6690    2      THEN DO;
      109     6691    2           CALL DUR$ECCRPT(ECCRPT_DELTAXCON);
      110     6692    2           IF S_D.DEBUG
      111     6693    3           THEN DO;
      112     6694    3                CALL DUD$MINI;
      113     6695    3                S_D.PROMPT_SIZE = 0;
      114     6696    3                END;
      115     6697    2           END;
      116     6698
      117     6699        /*
      118     6700           If Exit Control processing has been entered for SAVE, we simply
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:5    
      119     6701           establish the break points as if returning to the user and exit.
      120     6702           We will be re-entered on GO or an eventual GET of the saved image.
      121     6703        */
      122     6704    1      IF B$TCB$->B$TCB.STK$->B$XCON.CECCB.CPSAVE
      123     6705    1        OR B$TCB$->B$TCB.STK$->B$XCON.CECCB.SAVE
      124     6706    2      THEN DO;
      125     6707        /*      IF B$TCB$->B$TCB.STK$->B$XCON.ECSC =0    if DIC
      126     6708                THEN CALL DDB$PLANT;  Commented out per 30807 */
      127     6709    2           CALL M$EXIT;
      128     6710    2           END;
      129     6711
      130     6712        /*
      131     6713           If Exit Control processing has been entered because of Quit or
      132     6714           for run-up after all user processing is completed, we release
      133     6715           our DCB and exit.
      134     6716        */
      135     6717    1      IF B$TCB$->B$TCB.STK$->B$XCON.RNST.OPERR /* a quit directive or IBEX command */
      136     6718    1        OR B$TCB$->B$TCB.STK$->B$XCON.ECSC = 1 /*SPECIAL RUNUP*/
      137     6719    2      THEN DO;
      138     6720                                                /* Release any DCBs for FPRGs         */
      139     6721    2           IF S_D.FPRG_CONTEXT$ ~= ADDR(NIL)
      140     6722    3           THEN DO;
      141     6723    3                FPT$CLOSE = FPT_CLOSE;
      142     6724    3                FPT$CLOSE.V_ = VECTOR(FPT$CLOSE.V);
      143     6725    3                FPTRELDCB = FPT_RELDCB;
      144     6726    3                FPTRELDCB.V_ = VECTOR(FPTRELDCB.V);
      145     6727    3                TFPRG$ = S_D.FPRG_CONTEXT$;
      146     6728    4                DO WHILE (TFPRG$ ~= ADDR(NIL));
      147     6729    4                     IF TFPRG$ -> FPRG$CONTEXT.XDELTA
      148     6730    5                     THEN DO;
      149     6731    5                          CALL DFA$QUIT (TFPRG$)
      150     6732    6                          WHENALTRETURN DO;
      151     6733    6                               CALL DUE$ERRMSG;
      152     6734    6                               END;
      153     6735    5                          END;
      154     6736    4                     IF DCBADDR(TFPRG$ -> FPRG$CONTEXT.DCBNO) ~= ADDR(NIL)
      155     6737    5                     THEN DO;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:6    
      156     6738    5                          IF DCBADDR(TFPRG$ -> FPRG$CONTEXT.DCBNO)->F$DCB.FCD#
      157     6739    6                          THEN DO;         /* CLOSE IT                           */
      158     6740    6                               FPT$CLOSE.V.DCB# = TFPRG$ -> FPRG$CONTEXT.DCBNO;
      159     6741    6                               FPT$CLOSE.V.DISP# = 0;
      160     6742    6                               CALL M$CLOSE (FPT$CLOSE) ALTRET(XXX);
      161     6743    6                               END;
      162     6744    5                          FPTRELDCB.V.DCB# = TFPRG$ -> FPRG$CONTEXT.DCBNO;
      163     6745    5                          CALL M$RELDCB (FPTRELDCB) ALTRET(XXX);
      164     6746    5                          END;
      165     6747    4                     TFPRG$ = TFPRG$ -> FPRG$CONTEXT.NEXT$;
      166     6748    4                     END;
      167     6749    3                END;
      168     6750    2           CALL CLS_RLS_DCB;
      169     6751    2           CALL M$EXIT;          /* Off into the sunset, another job well done!  */
      170     6752    2           END;
      171     6753
      172     6754        /*
      173     6755           If entered for limit exceeded or Operator abort, the reason for
      174     6756           the abort is output through M$DO.  If the condition occurred
      175     6757           in Batch, we are probably in the middle of doing a post-mortum
      176     6758           dump, so we continue processing as long as possible.  If on-line
      177     6759           we are probably waiting for a command from the user, so we exit.
      178     6760        */
      179     6761    1      IF NOT(B$JIT.RNST & %RS_DROP#) AND NOT(B$JIT.FRS & %RS_DROP#)
      180     6762    1      THEN CALL DUR$ECCRPT(ECCRPT_DELTA);
      181     6763
      182     6764    1      IF B$TCB$->B$TCB.STK$->B$XCON.CECCB.LIMIT /* If limit exceeded             */
      183     6765    1        OR B$TCB$->B$TCB.STK$->B$XCON.CECCB.CL3 /* or !X                         */
      184     6766    1        OR B$TCB$->B$TCB.STK$->B$XCON.RNST.SSPABRT
              6766                 /* or Special Shared Processor Abort */
      185     6767    2      THEN DO;
      186     6768    2           IF B$JIT$->B$JIT.MODE = %M_BATCH#
      187     6769    2           THEN CALL X66_TRTN;             /* continue till max time if batch    */
      188     6770    2           ELSE CALL M$EXIT;
      189     6771    2           END;
      190     6772        /* If we ran out of memory, just say so and die */
      191     6773    1      IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$MEMLIMIT THEN
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:7    
      192     6774    2      DO;
      193     6775    2           MEM$WRITE = MEM_WRITE;
      194     6776    2           MEM$WRITE.V_ = VECTOR(MEM$WRITE.V);
      195     6777    2           MEM$WRITE.V.DCB# = D_M$DO#;
      196     6778    2           CALL M$WRITE (MEM$WRITE);
      197     6779    2           CALL M$EXIT;
      198     6780    2           END;
      199     6781        /*
      200     6782           If not entered for SAVE, Operator abort, line hang-up, or
      201     6783           limit exceeded, it is obviously a problem with DELTA.  We
      202     6784           take a Snapshot Dump if we have not yet done so, close and
      203     6785           release our DCB and abort the Job Step.
      204     6786        */
      205     6787    1      IF NOT S_D.SNAP_TAKEN
      206     6788    2      THEN DO;
      207     6789    2           FPT_SCREECH = SNAP_XCON;
      208     6790    2           FPT_SCREECH.SCREECHID_ = VECTOR(DUMP_FILE_NAME);
      209     6791    2           CALL M$SCREECH(FPT_SCREECH) ALTRET(XXX);
      210     6792
      211     6793        /*S* SCREECH_CODE: DUX-S$DUXCON
      212     6794             TYPE: SNAP
      213     6795             MESSAGE: DELTA is aborting.
      214     6796             REMARKS: Just before DELTA aborts, it issues an M$SCREECH so that
      215     6797                      a snap dump is taken. */
      216     6798
      217     6799    2           REM = LENGTHC(S_D.OUTPUT);
      218     6800    2           OUT$ = ADDR(S_D.OUTPUT);
      219     6801    2           CALL DDR$MOVE ( '*** ', LENGTHC('*** '), OUT$, REM);
      220     6802    2           MSG_LENGTH = DUMP_FILE_NAME.L;
      221     6803    2           CALL DDR$MOVE ( DUMP_FILE_NAME.N1, MSG_LENGTH, OUT$, REM);
      222     6804    2           CALL DDR$MOVE ( ' is M$SCREECH dump file ID.',
      223     6805    2             LENGTHC(' is M$SCREECH dump file ID.'), OUT$,REM);
      224     6806    2           MSG_LENGTH = POFFC(OUT$, ADDR(S_D.OUTPUT) );
      225     6807    2           CALL DDQ$WRITE (ADDR(S_D.OUTPUT), MSG_LENGTH);
      226     6808    2           END;
      227     6809    1   XXX: ;
      228     6810    1      CALL CLS_RLS_DCB;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:8    
      229     6811    1      CALL M$XXX;
      230     6812
      231     6813        %EJECT;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:9    
      232     6814
      233     6815        /*F*     NAME:   DUX$XCON1_REL.
      234     6816
      235     6817                 PURPOSE: To provide an entry point for other routines
      236     6818                          that may wish to close and release the DCB.
      237     6819        */
      238     6820    1   DUX$XCON1_REL: ENTRY;
      239     6821    1      CALL CLS_RLS_DCB;
      240     6822    1      RETURN;
      241     6823
      242     6824        %EJECT;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:10   
      243     6825
      244     6826        /*I*     NAME:   CLS_RLS_DCB.
      245     6827
      246     6828                 PURPOSE:  To close and release DELTA's DCB.
      247     6829
      248     6830        */
      249     6831
      250     6832    1   CLS_RLS_DCB: PROC;
      251     6833
      252     6834        %FPT_CLOSE (FPTN=FPT_CLOSE, STCLASS=SYMREF);
      253     6876        %FPT_CLOSE (FPTN=FPT$CLOSE, STCLASS=AUTO);
      254     6918        %FPT_RELDCB (FPTN=FPT_RELDCB, STCLASS=SYMREF);
      255     6932        %FPT_RELDCB (FPTN=FPT$RELDCB, STCLASS=AUTO);
      256     6946    2   DCL D_M$DELT# UBIN SYMREF;
      257     6947        %F$DCB;
      258     7004
      259     7005    2      IF S_D.RUM THEN CALL DUU$TRUNC;      /* Ignore altret                      */
      260     7006    2      IF S_D.RUM THEN CALL DUA$KILL_RUM;
      261     7007    2      IF S_D.ANLZ THEN CALL DUA$KILL_ANLZ;
      262     7008    2      IF (NOT D_XDELTA) AND (NOT S_D.BATCH)
      263     7009    3      THEN DO;
      264     7010    3           S_D.EOM = '0'B;
      265     7011    3           CALL M$EOM(FPT_EOM) ALTRET(NOEOM); /* Reset to standard set           */
      266     7012    4           DO WHILE ('0'B);
      267     7013    4   NOEOM:
      268     7014    4                IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.SEV ~= 0
      269     7015    4                THEN CALL DUE$ERRMSG;
      270     7016    4                END;
      271     7017    3           END;
      272     7018
      273     7019    2      IF DCBADDR(D_M$DELT#)~=ADDR(NIL)
      274     7020    3      THEN DO;
      275     7021    3           IF DCBADDR(D_M$DELT#)->F$DCB.FCD#
      276     7022    4           THEN DO;                        /* CLOSE IT                           */
      277     7023    4                FPT$CLOSE = FPT_CLOSE;
      278     7024    4                FPT$CLOSE.V_ = VECTOR(FPT$CLOSE.V);
      279     7025    4                FPT$CLOSE.V.DCB# = D_M$DELT#;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:11   
      280     7026    4                CALL M$CLOSE (FPT$CLOSE) ALTRET(REL);
      281     7027    4                END;
      282     7028    3   REL:    FPT$RELDCB = FPT_RELDCB;
      283     7029    3           FPT$RELDCB.V_ = VECTOR(FPT$RELDCB.V);
      284     7030    3           FPT$RELDCB.V.DCB# = D_M$DELT#;
      285     7031    3           CALL M$RELDCB(FPT$RELDCB) ALTRET(RETN);
      286     7032    3           END;
      287     7033    2   RETN: RETURN;
      288     7034    2   END CLS_RLS_DCB;
      289     7035
      290     7036    1   END DUX$XCON1;

PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:12   
--  Include file information  --

   IR_DATA_M.:E05TOU  is referenced.
   DU_SCODE_C.:E05TOU  is referenced.
   DD_DEBUG_C.:E05TOU  is referenced.
   DD_SUBS_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure DUX$XCON1.

   Procedure DUX$XCON1 requires 347 words for executable code.
   Procedure DUX$XCON1 requires 106 words of local(AUTO) storage.

    No errors detected in file DUX$XCON1.:E05TSI    .

PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:13   

 Object Unit name= DUX$XCON1                                  File name= DUX$XCON1.:E05TOU
 UTS= JUL 29 '97 15:04:48.88 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     58     72  DUX$XCON1
    2   Proc  even  none   347    533  DUX$XCON1
    3  RoData even  none    12     14  DUX$XCON1

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  DUX$XCON1
     2    411                  yes      Std        0  DUX$XCON1_REL

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1      0  SNAP_XCON                          1      6  SC_XCON
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:14   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 DUR$ECCRPT
 yes     yes           Std       1 DFA$QUIT
 yes     yes           Std       4 DDR$MOVE
         yes           Std       1 DUD$MINI
         yes           Std       0 DUE$ERRMSG
         yes           Std       2 DDQ$WRITE
         yes           Std       0 X66_TRTN
 yes     yes           Std       0 DUU$TRUNC
         yes           Std       0 DUA$KILL_RUM
 yes     yes           Std       0 DUA$KILL_ANLZ
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    S_D$                                  B$JIT$
     B$TCB$                                D_XDELTA                              FPT_RELDCB
     FPT_CLOSE                             D_M$DO#                               FPT_CLOSE
     FPT_RELDCB                            D_M$DELT#                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:15   


        1        1        /*M* DUX$XCON1 - DELTA's Exit Control Routine - part 2.   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0     */
        8        8
        9        9        /*F*     NAME:   DUX$XCON1.
       10       10
       11       11                 PURPOSE: To process exit control conditions in DELTA.
       12       12        */
       13       13
       14       14        DUX$XCON1: PROC;

     14  2 000000   000000 700200 xent  DUX$XCON1    TSX0  ! X66_AUTO_0
         2 000001   000152 000000                    ZERO    106,0

       15       15
       16       16        %INCLUDE B$JIT;
       17      306        %INCLUDE B_STRINGS_C;
       18      435        %INCLUDE B_ERRORS_C;
       19     1562        %INCLUDE CP_6;
       20     1643        %INCLUDE XUH_MACRO_C;
       21     1727        %INCLUDE DD_SD_M;
       22     3063        %S_D;
       23     4381        %INCLUDE DD$BASED;
       24     5684        %FPRG$CONTEXT;
       25     5747        %INCLUDE DD_SUBS_C;
       26     6018        %INCLUDE DD_DEBUG_C;
       27     6039        %INCLUDE DU_SCODE_C;
       28     6052        %INCLUDE IR_DATA_M;
       29     6216
       30     6217        %B$ALT;
       31     6225        %B$TCB;
       32     6228        %B$XCON;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:16   
       33     6238        %B$EXCFR;
       34     6256        %F$DCB;
       35     6313
       36     6314    1   DCL B$JIT$ PTR SYMREF;
       37     6315    1   DCL B$TCB$ PTR SYMREF;
       38     6316    1   DCL D_XDELTA BIT(1) SYMREF;
       39     6317
       40     6318        %FPT_SCREECH (FPTN=SNAP_XCON, STCLASS=CONSTANT SYMDEF, SCODE=SC_XCON);
       41     6332        %VLP_SCODE (FPTN=SC_XCON, STCLASS=CONSTANT SYMDEF, FCG=DU, MID=X,
       42     6333               MON=NO, CODE=%S$DUXCON, SEV=SEV_SNAP, CUSR=YES, ROSEG=YES,
       43     6334               ISEG=YES, DDSEG=YES, DBSEG=YES, ASLSEG=YES);
       44     6395        %RV_DFNAME (NAME=DUMP_FILE_NAME,
       45     6396                    STCLASS=AUTO);
       46     6400        %FPT_SCREECH (FPTN=FPT_SCREECH,
       47     6401                      STCLASS=AUTO);
       48     6415        %FPT_RELDCB(FPTN=FPT_RELDCB,
       49     6416                    STCLASS=SYMREF);
       50     6430        %FPT_RELDCB(FPTN=FPTRELDCB,
       51     6431                    STCLASS=);
       52     6445        %FPT_CLOSE (FPTN=FPT_CLOSE, STCLASS=SYMREF);
       53     6487        %FPT_CLOSE (FPTN=FPT$CLOSE, STCLASS=AUTO);
       54     6529        %FPT_EOM (FPTN=FPT_EOM,
       55     6530                  STCLASS=CONSTANT,
       56     6531                  EOMTABLE=VLP_EOMTABLE);
       57     6561        %VLP_EOMTABLE (FPTN=VLP_EOMTABLE,
       58     6562                  STCLASS=CONSTANT,
       59     6563                  VALUES=STD);
       60     6582        %FPT_WRITE (FPTN=MEM_WRITE, BUF=MEM_BUF,STCLASS=CONSTANT);
       61     6613        %FPT_WRITE (FPTN=MEM$WRITE, STCLASS=);
       62     6644    1  DCL MEM_BUF CHAR(0) CONSTANT INIT ('User- or installation-set memory limit reached.'
              6644            );
       63     6645    1   DCL D_M$DO# UBIN SYMREF;
       64     6646
       65     6647    1   DCL REM UBIN;
       66     6648    1   DCL OUT$ PTR;
       67     6649    1   DCL MSG_LENGTH UBIN;
       68     6650    1   DCL TFPRG$ PTR;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:17   
       69     6651
       70     6652    1   DCL DDR$MOVE ENTRY(4) ALTRET;
       71     6653    1   DCL DDQ$WRITE ENTRY(2);
       72     6654    1   DCL DDB$PLANT ENTRY ALTRET;
       73     6655    1   DCL DFA$QUIT ENTRY(1) ALTRET;
       74     6656    1   DCL DUA$KILL_ANLZ ENTRY ALTRET;
       75     6657    1   DCL DUA$KILL_RUM ENTRY;
       76     6658    1   DCL DUR$ECCRPT ENTRY(1);
       77     6659    1   DCL DUD$MINI ENTRY(1);
       78     6660    1   DCL DUE$ERRMSG ENTRY;
       79     6661    1   DCL DUU$TRUNC ENTRY(0) ALTRET;
       80     6662    1   DCL X66_TRTN ENTRY;
       81     6663        %EJECT;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:18   
       82     6664
       83     6665        /*D*     NAME:   DUX$XCON1.
       84     6666
       85     6667                 CALL:   TSX1  DUX$XCON1
       86     6668
       87     6669                 INTERFACE:  Called by DUX$XCON (a BMAP module) after
       88     6670                             determining that Exit Control processing
       89     6671                             is possible; i.e. DELTA's TCB is not over-
       90     6672                             flowing.
       91     6673
       92     6674        */
       93     6675
       94     6676        /*
       95     6677           Set USVFC to indicate use of special VFC to avoid overprinting.
       96     6678        */
       97     6679    1      S_D.USVFC = '1'B;                    /* Asynchronous entry                 */

   6679  2 000002   400000 236003                    LDQ     -131072,DU
         2 000003   000000 470400 xsym               LDP0    S_D$
         2 000004   005144 756100                    STQ     2660,,PR0

       98     6680    1      IF B$TCB$ -> B$TCB.STK$ -> B$EXCFR.ISR.WSR = %DBWSR

   6680  2 000005   000000 471400 xsym               LDP1    B$TCB$
         2 000006   100001 473500                    LDP3    1,,PR1
         2 000007   300010 236100                    LDQ     8,,PR3
         2 000010   000160 376007                    ANQ     112,DL
         2 000011   000120 116007                    CMPQ    80,DL
         2 000012   000016 601000 2                  TNZ     s:6682

       99     6681    1      THEN S_D.DLIB = '1'B;

   6681  2 000013   400000 236003                    LDQ     -131072,DU
         2 000014   005010 756100                    STQ     2568,,PR0
         2 000015   000017 710000 2                  TRA     s:6688

      100     6682    1      ELSE S_D.DLIB = '0'B;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:19   

   6682  2 000016   005010 450100                    STZ     2568,,PR0

      101     6683
      102     6684        /*
      103     6685          First we check the internal debug flags to determine if we
      104     6686          are to report the Exit Control condition and/or enter Mini-Delta.
      105     6687        */
      106     6688    1      IF S_D.DEBUGA(%DB@ECC)

   6688  2 000017   000053 236100                    LDQ     43,,PR0
         2 000020   000040 316007                    CANQ    32,DL
         2 000021   000050 600000 2                  TZE     s:6704
         2 000022   000000 473400 xsym               LDP3    B$JIT$
         2 000023   300314 236100                    LDQ     204,,PR3
         2 000024   777000 376003                    ANQ     -512,DU
         2 000025   200000 376003                    ANQ     65536,DU
         2 000026   000050 601000 2                  TNZ     s:6704
         2 000027   300314 236100                    LDQ     204,,PR3
         2 000030   000011 736000                    QLS     9
         2 000031   777000 376003                    ANQ     -512,DU
         2 000032   200000 376003                    ANQ     65536,DU
         2 000033   000050 601000 2                  TNZ     s:6704

      107     6689    1        AND NOT(B$JIT.RNST & %RS_DROP#) AND NOT(B$JIT.FRS & %RS_DROP#)
      108     6690    2      THEN DO;

      109     6691    2           CALL DUR$ECCRPT(ECCRPT_DELTAXCON);

   6691  2 000034   000000 630400 3                  EPPR0   0
         2 000035   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000036   000000 701000 xent               TSX1    DUR$ECCRPT
         2 000037   000000 011000                    NOP     0

      110     6692    2           IF S_D.DEBUG

   6692  2 000040   000000 470400 xsym               LDP0    S_D$
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:20   
         2 000041   004732 234100                    SZN     2522,,PR0
         2 000042   000050 605000 2                  TPL     s:6704

      111     6693    3           THEN DO;

      112     6694    3                CALL DUD$MINI;

   6694  2 000043   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000044   000000 701000 xent               TSX1    DUD$MINI
         2 000045   000000 011000                    NOP     0

      113     6695    3                S_D.PROMPT_SIZE = 0;

   6695  2 000046   000000 470400 xsym               LDP0    S_D$
         2 000047   005147 450100                    STZ     2663,,PR0

      114     6696    3                END;

      115     6697    2           END;

      116     6698
      117     6699        /*
      118     6700           If Exit Control processing has been entered for SAVE, we simply
      119     6701           establish the break points as if returning to the user and exit.
      120     6702           We will be re-entered on GO or an eventual GET of the saved image.
      121     6703        */
      122     6704    1      IF B$TCB$->B$TCB.STK$->B$XCON.CECCB.CPSAVE

   6704  2 000050   000000 471400 xsym               LDP1    B$TCB$
         2 000051   100001 473500                    LDP3    1,,PR1
         2 000052   300100 236100                    LDQ     64,,PR3
         2 000053   002000 316003                    CANQ    1024,DU
         2 000054   000057 601000 2                  TNZ     s:6709
         2 000055   004000 316003                    CANQ    2048,DU
         2 000056   000061 600000 2                  TZE     s:6717

      123     6705    1        OR B$TCB$->B$TCB.STK$->B$XCON.CECCB.SAVE
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:21   
      124     6706    2      THEN DO;

      125     6707        /*      IF B$TCB$->B$TCB.STK$->B$XCON.ECSC =0    if DIC
      126     6708                THEN CALL DDB$PLANT;  Commented out per 30807 */
      127     6709    2           CALL M$EXIT;

   6709  2 000057   000001 713400                    CLIMB   exit
         2 000060   000000 401760                    pmme    nvectors=0

      128     6710    2           END;

      129     6711
      130     6712        /*
      131     6713           If Exit Control processing has been entered because of Quit or
      132     6714           for run-up after all user processing is completed, we release
      133     6715           our DCB and exit.
      134     6716        */
      135     6717    1      IF B$TCB$->B$TCB.STK$->B$XCON.RNST.OPERR /* a quit directive or IBEX command */

   6717  2 000061   000000 470400 xsym               LDP0    B$TCB$
         2 000062   000001 471500                    LDP1    1,,PR0
         2 000063   100101 236100                    LDQ     65,,PR1
         2 000064   020000 316003                    CANQ    8192,DU
         2 000065   000071 601000 2                  TNZ     s:6721
         2 000066   100100 720100                    LXL0    64,,PR1
         2 000067   000001 100003                    CMPX0   1,DU
         2 000070   000200 601000 2                  TNZ     s:6761

      136     6718    1        OR B$TCB$->B$TCB.STK$->B$XCON.ECSC = 1 /*SPECIAL RUNUP*/
      137     6719    2      THEN DO;

      138     6720                                                /* Release any DCBs for FPRGs         */
      139     6721    2           IF S_D.FPRG_CONTEXT$ ~= ADDR(NIL)

   6721  2 000071   000000 473400 xsym               LDP3    S_D$
         2 000072   300076 236100                    LDQ     62,,PR3
         2 000073   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:22   
         2 000074   000174 600000 2                  TZE     s:6750

      140     6722    3           THEN DO;

      141     6723    3                FPT$CLOSE = FPT_CLOSE;

   6723  2 000075   000100 100400                    MLR     fill='000'O
         2 000076   000000 000170 xsym               ADSC9   FPT_CLOSE                cn=0,n=120
         2 000077   200022 000170                    ADSC9   FPT$CLOSE,,AUTO          cn=0,n=120

      142     6724    3                FPT$CLOSE.V_ = VECTOR(FPT$CLOSE.V);

   6724  2 000100   000001 235000 3                  LDA     1
         2 000101   200144 452500                    STP2    FPT$RELDCB+4,,AUTO
         2 000102   200144 236100                    LDQ     FPT$RELDCB+4,,AUTO
         2 000103   000054 036003                    ADLQ    44,DU
         2 000104   200022 757100                    STAQ    FPT$CLOSE,,AUTO

      143     6725    3                FPTRELDCB = FPT_RELDCB;

   6725  2 000105   000100 100400                    MLR     fill='000'O
         2 000106   000000 000020 xsym               ADSC9   FPT_RELDCB               cn=0,n=16
         2 000107   200016 000020                    ADSC9   FPTRELDCB,,AUTO          cn=0,n=16

      144     6726    3                FPTRELDCB.V_ = VECTOR(FPTRELDCB.V);

   6726  2 000110   000002 235000 3                  LDA     2
         2 000111   200144 452500                    STP2    FPT$RELDCB+4,,AUTO
         2 000112   200144 236100                    LDQ     FPT$RELDCB+4,,AUTO
         2 000113   000020 036003                    ADLQ    16,DU
         2 000114   200016 757100                    STAQ    FPTRELDCB,,AUTO

      145     6727    3                TFPRG$ = S_D.FPRG_CONTEXT$;

   6727  2 000115   300076 236100                    LDQ     62,,PR3
         2 000116   200077 756100                    STQ     TFPRG$,,AUTO

PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:23   
      146     6728    4                DO WHILE (TFPRG$ ~= ADDR(NIL));

   6728  2 000117   000172 710000 2                  TRA     s:6748

      147     6729    4                     IF TFPRG$ -> FPRG$CONTEXT.XDELTA

   6729  2 000120   200077 470500                    LDP0    TFPRG$,,AUTO
         2 000121   000001 236100                    LDQ     1,,PR0
         2 000122   002000 316003                    CANQ    1024,DU
         2 000123   000136 600000 2                  TZE     s:6736

      148     6730    5                     THEN DO;

      149     6731    5                          CALL DFA$QUIT (TFPRG$)

   6731  2 000124   200077 631500                    EPPR1   TFPRG$,,AUTO
         2 000125   200144 451500                    STP1    FPT$RELDCB+4,,AUTO
         2 000126   200144 630500                    EPPR0   FPT$RELDCB+4,,AUTO
         2 000127   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000130   000000 701000 xent               TSX1    DFA$QUIT
         2 000131   000133 702000 2                  TSX2    s:6733
         2 000132   000136 710000 2                  TRA     s:6736

      150     6732    6                          WHENALTRETURN DO;

      151     6733    6                               CALL DUE$ERRMSG;

   6733  2 000133   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000134   000000 701000 xent               TSX1    DUE$ERRMSG
         2 000135   000000 011000                    NOP     0

      152     6734    6                               END;

      153     6735    5                          END;

      154     6736    4                     IF DCBADDR(TFPRG$ -> FPRG$CONTEXT.DCBNO) ~= ADDR(NIL)

PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:24   
   6736  2 000136   000003 470400 3                  LDP0    3
         2 000137   000000 471500                    LDP1    0,,PR0
         2 000140   200077 473500                    LDP3    TFPRG$,,AUTO
         2 000141   300001 720100                    LXL0    1,,PR3
         2 000142   100000 236110                    LDQ     0,X0,PR1
         2 000143   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000144   000167 600000 2                  TZE     s:6747

      155     6737    5                     THEN DO;

      156     6738    5                          IF DCBADDR(TFPRG$ -> FPRG$CONTEXT.DCBNO)->F$DCB.FCD#

   6738  2 000145   100000 474510                    LDP4    0,X0,PR1
         2 000146   400031 236100                    LDQ     25,,PR4
         2 000147   020000 316007                    CANQ    8192,DL
         2 000150   000160 600000 2                  TZE     s:6744

      157     6739    6                          THEN DO;         /* CLOSE IT                           */

      158     6740    6                               FPT$CLOSE.V.DCB# = TFPRG$ -> FPRG$CONTEXT.DCBNO;

   6740  2 000151   200054 740100                    STX0    FPT$CLOSE+26,,AUTO

      159     6741    6                               FPT$CLOSE.V.DISP# = 0;

   6741  2 000152   000000 236003                    LDQ     0,DU
         2 000153   200054 552104                    STBQ    FPT$CLOSE+26,'04'O,AUTO

      160     6742    6                               CALL M$CLOSE (FPT$CLOSE) ALTRET(XXX);

   6742  2 000154   200022 630500                    EPPR0   FPT$CLOSE,,AUTO
         2 000155   450001 713400                    CLIMB   alt,close
         2 000156   406000 401760                    pmme    nvectors=13
         2 000157   000404 702000 2                  TSX2    XXX

      161     6743    6                               END;

PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:25   
      162     6744    5                          FPTRELDCB.V.DCB# = TFPRG$ -> FPRG$CONTEXT.DCBNO;

   6744  2 000160   200077 470500                    LDP0    TFPRG$,,AUTO
         2 000161   000001 720100                    LXL0    1,,PR0
         2 000162   200020 740100                    STX0    FPTRELDCB+2,,AUTO

      163     6745    5                          CALL M$RELDCB (FPTRELDCB) ALTRET(XXX);

   6745  2 000163   200016 630500                    EPPR0   FPTRELDCB,,AUTO
         2 000164   460003 713400                    CLIMB   alt,+24579
         2 000165   400000 401760                    pmme    nvectors=1
         2 000166   000404 702000 2                  TSX2    XXX

      164     6746    5                          END;

      165     6747    4                     TFPRG$ = TFPRG$ -> FPRG$CONTEXT.NEXT$;

   6747  2 000167   200077 470500                    LDP0    TFPRG$,,AUTO
         2 000170   000000 236100                    LDQ     0,,PR0
         2 000171   200077 756100                    STQ     TFPRG$,,AUTO

      166     6748    4                     END;

   6748  2 000172   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000173   000120 601000 2                  TNZ     s:6729

      167     6749    3                END;

      168     6750    2           CALL CLS_RLS_DCB;

   6750  2 000174   000416 701000 2                  TSX1    CLS_RLS_DCB
         2 000175   000000 011000                    NOP     0

      169     6751    2           CALL M$EXIT;          /* Off into the sunset, another job well done!  */

   6751  2 000176   000001 713400                    CLIMB   exit
         2 000177   000000 401760                    pmme    nvectors=0
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:26   

      170     6752    2           END;

      171     6753
      172     6754        /*
      173     6755           If entered for limit exceeded or Operator abort, the reason for
      174     6756           the abort is output through M$DO.  If the condition occurred
      175     6757           in Batch, we are probably in the middle of doing a post-mortum
      176     6758           dump, so we continue processing as long as possible.  If on-line
      177     6759           we are probably waiting for a command from the user, so we exit.
      178     6760        */
      179     6761    1      IF NOT(B$JIT.RNST & %RS_DROP#) AND NOT(B$JIT.FRS & %RS_DROP#)

   6761  2 000200   000000 470400 xsym               LDP0    B$JIT$
         2 000201   000314 236100                    LDQ     204,,PR0
         2 000202   777000 376003                    ANQ     -512,DU
         2 000203   200000 376003                    ANQ     65536,DU
         2 000204   000216 601000 2                  TNZ     s:6764
         2 000205   000314 236100                    LDQ     204,,PR0
         2 000206   000011 736000                    QLS     9
         2 000207   777000 376003                    ANQ     -512,DU
         2 000210   200000 376003                    ANQ     65536,DU
         2 000211   000216 601000 2                  TNZ     s:6764

      180     6762    1      THEN CALL DUR$ECCRPT(ECCRPT_DELTA);

   6762  2 000212   000004 630400 3                  EPPR0   4
         2 000213   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000214   000000 701000 xent               TSX1    DUR$ECCRPT
         2 000215   000000 011000                    NOP     0

      181     6763
      182     6764    1      IF B$TCB$->B$TCB.STK$->B$XCON.CECCB.LIMIT /* If limit exceeded             */

   6764  2 000216   000000 470400 xsym               LDP0    B$TCB$
         2 000217   000001 471500                    LDP1    1,,PR0
         2 000220   100100 236100                    LDQ     64,,PR1
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:27   
         2 000221   100000 316003                    CANQ    32768,DU
         2 000222   000230 601000 2                  TNZ     s:6768
         2 000223   040000 316003                    CANQ    16384,DU
         2 000224   000230 601000 2                  TNZ     s:6768
         2 000225   100101 236100                    LDQ     65,,PR1
         2 000226   004000 316003                    CANQ    2048,DU
         2 000227   000243 600000 2                  TZE     s:6773

      183     6765    1        OR B$TCB$->B$TCB.STK$->B$XCON.CECCB.CL3 /* or !X                         */
      184     6766    1        OR B$TCB$->B$TCB.STK$->B$XCON.RNST.SSPABRT
              6766                 /* or Special Shared Processor Abort */
      185     6767    2      THEN DO;

      186     6768    2           IF B$JIT$->B$JIT.MODE = %M_BATCH#

   6768  2 000230   000000 473400 xsym               LDP3    B$JIT$
         2 000231   300000 236100                    LDQ     0,,PR3
         2 000232   740000 376003                    ANQ     -16384,DU
         2 000233   040000 116003                    CMPQ    16384,DU
         2 000234   000241 601000 2                  TNZ     s:6770

      187     6769    2           THEN CALL X66_TRTN;             /* continue till max time if batch    */

   6769  2 000235   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000236   000000 701000 xent               TSX1    X66_TRTN
         2 000237   000000 011000                    NOP     0
         2 000240   000243 710000 2                  TRA     s:6773

      188     6770    2           ELSE CALL M$EXIT;

   6770  2 000241   000001 713400                    CLIMB   exit
         2 000242   000000 401760                    pmme    nvectors=0

      189     6771    2           END;

      190     6772        /* If we ran out of memory, just say so and die */
      191     6773    1      IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$MEMLIMIT THEN
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:28   

   6773  2 000243   000000 470400 xsym               LDP0    B$TCB$
         2 000244   000000 471500                    LDP1    0,,PR0
         2 000245   100102 236100                    LDQ     66,,PR1
         2 000246   377770 376007                    ANQ     131064,DL
         2 000247   011350 116007                    CMPQ    4840,DL
         2 000250   000270 601000 2                  TNZ     s:6787

      192     6774    2      DO;

      193     6775    2           MEM$WRITE = MEM_WRITE;

   6775  2 000251   000100 100400                    MLR     fill='000'O
         2 000252   000032 000060 1                  ADSC9   MEM_WRITE                cn=0,n=48
         2 000253   200060 000060                    ADSC9   MEM$WRITE,,AUTO          cn=0,n=48

      194     6776    2           MEM$WRITE.V_ = VECTOR(MEM$WRITE.V);

   6776  2 000254   000001 235000 3                  LDA     1
         2 000255   200144 452500                    STP2    FPT$RELDCB+4,,AUTO
         2 000256   200144 236100                    LDQ     FPT$RELDCB+4,,AUTO
         2 000257   000070 036003                    ADLQ    56,DU
         2 000260   200060 757100                    STAQ    MEM$WRITE,,AUTO

      195     6777    2           MEM$WRITE.V.DCB# = D_M$DO#;

   6777  2 000261   000000 720000 xsym               LXL0    D_M$DO#
         2 000262   200070 740100                    STX0    MEM$WRITE+8,,AUTO

      196     6778    2           CALL M$WRITE (MEM$WRITE);

   6778  2 000263   200060 630500                    EPPR0   MEM$WRITE,,AUTO
         2 000264   040001 713400                    CLIMB   write
         2 000265   401400 401760                    pmme    nvectors=4

      197     6779    2           CALL M$EXIT;

PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:29   
   6779  2 000266   000001 713400                    CLIMB   exit
         2 000267   000000 401760                    pmme    nvectors=0

      198     6780    2           END;

      199     6781        /*
      200     6782           If not entered for SAVE, Operator abort, line hang-up, or
      201     6783           limit exceeded, it is obviously a problem with DELTA.  We
      202     6784           take a Snapshot Dump if we have not yet done so, close and
      203     6785           release our DCB and abort the Job Step.
      204     6786        */
      205     6787    1      IF NOT S_D.SNAP_TAKEN

   6787  2 000270   000000 470400 xsym               LDP0    S_D$
         2 000271   004673 234100                    SZN     2491,,PR0
         2 000272   000404 604000 2                  TMI     XXX

      206     6788    2      THEN DO;

      207     6789    2           FPT_SCREECH = SNAP_XCON;

   6789  2 000273   000100 100400                    MLR     fill='000'O
         2 000274   000000 000030 1                  ADSC9   SNAP_XCON                cn=0,n=24
         2 000275   200010 000030                    ADSC9   FPT_SCREECH,,AUTO        cn=0,n=24

      208     6790    2           FPT_SCREECH.SCREECHID_ = VECTOR(DUMP_FILE_NAME);

   6790  2 000276   000001 235000 3                  LDA     1
         2 000277   200144 452500                    STP2    FPT$RELDCB+4,,AUTO
         2 000300   200144 236100                    LDQ     FPT$RELDCB+4,,AUTO
         2 000301   000004 036003                    ADLQ    4,DU
         2 000302   200014 757100                    STAQ    FPT_SCREECH+4,,AUTO

      209     6791    2           CALL M$SCREECH(FPT_SCREECH) ALTRET(XXX);

   6791  2 000303   200010 630500                    EPPR0   FPT_SCREECH,,AUTO
         2 000304   400013 713400                    CLIMB   alt,+11
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:30   
         2 000305   401000 401760                    pmme    nvectors=3
         2 000306   000404 702000 2                  TSX2    XXX

      210     6792
      211     6793        /*S* SCREECH_CODE: DUX-S$DUXCON
      212     6794             TYPE: SNAP
      213     6795             MESSAGE: DELTA is aborting.
      214     6796             REMARKS: Just before DELTA aborts, it issues an M$SCREECH so that
      215     6797                      a snap dump is taken. */
      216     6798
      217     6799    2           REM = LENGTHC(S_D.OUTPUT);

   6799  2 000307   004000 235007                    LDA     2048,DL
         2 000310   200074 755100                    STA     REM,,AUTO

      218     6800    2           OUT$ = ADDR(S_D.OUTPUT);

   6800  2 000311   000000 236000 xsym               LDQ     S_D$
         2 000312   005335 036003                    ADLQ    2781,DU
         2 000313   200075 756100                    STQ     OUT$,,AUTO

      219     6801    2           CALL DDR$MOVE ( '*** ', LENGTHC('*** '), OUT$, REM);

   6801  2 000314   200074 630500                    EPPR0   REM,,AUTO
         2 000315   200147 450500                    STP0    FPT$RELDCB+7,,AUTO
         2 000316   200075 631500                    EPPR1   OUT$,,AUTO
         2 000317   200146 451500                    STP1    FPT$RELDCB+6,,AUTO
         2 000320   000006 237000 3                  LDAQ    6
         2 000321   200144 757100                    STAQ    FPT$RELDCB+4,,AUTO
         2 000322   200144 630500                    EPPR0   FPT$RELDCB+4,,AUTO
         2 000323   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000324   000000 701000 xent               TSX1    DDR$MOVE
         2 000325   000000 011000                    NOP     0

      220     6802    2           MSG_LENGTH = DUMP_FILE_NAME.L;

   6802  2 000326   200004 236100                    LDQ     DUMP_FILE_NAME,,AUTO
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:31   
         2 000327   000033 772000                    QRL     27
         2 000330   200076 756100                    STQ     MSG_LENGTH,,AUTO

      221     6803    2           CALL DDR$MOVE ( DUMP_FILE_NAME.N1, MSG_LENGTH, OUT$, REM);

   6803  2 000331   200074 630500                    EPPR0   REM,,AUTO
         2 000332   200147 450500                    STP0    FPT$RELDCB+7,,AUTO
         2 000333   200075 631500                    EPPR1   OUT$,,AUTO
         2 000334   200146 451500                    STP1    FPT$RELDCB+6,,AUTO
         2 000335   200076 633500                    EPPR3   MSG_LENGTH,,AUTO
         2 000336   200145 453500                    STP3    FPT$RELDCB+5,,AUTO
         2 000337   200150 452500                    STP2    FPT$RELDCB+8,,AUTO
         2 000340   200150 236100                    LDQ     FPT$RELDCB+8,,AUTO
         2 000341   000010 036000 3                  ADLQ    8
         2 000342   200144 756100                    STQ     FPT$RELDCB+4,,AUTO
         2 000343   200144 630500                    EPPR0   FPT$RELDCB+4,,AUTO
         2 000344   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000345   000000 701000 xent               TSX1    DDR$MOVE
         2 000346   000000 011000                    NOP     0

      222     6804    2           CALL DDR$MOVE ( ' is M$SCREECH dump file ID.',

   6804  2 000347   200074 630500                    EPPR0   REM,,AUTO
         2 000350   200147 450500                    STP0    FPT$RELDCB+7,,AUTO
         2 000351   200075 631500                    EPPR1   OUT$,,AUTO
         2 000352   200146 451500                    STP1    FPT$RELDCB+6,,AUTO
         2 000353   000012 237000 3                  LDAQ    10
         2 000354   200144 757100                    STAQ    FPT$RELDCB+4,,AUTO
         2 000355   200144 630500                    EPPR0   FPT$RELDCB+4,,AUTO
         2 000356   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000357   000000 701000 xent               TSX1    DDR$MOVE
         2 000360   000000 011000                    NOP     0

      223     6805    2             LENGTHC(' is M$SCREECH dump file ID.'), OUT$,REM);
      224     6806    2           MSG_LENGTH = POFFC(OUT$, ADDR(S_D.OUTPUT) );

   6806  2 000361   000000 236000 xsym               LDQ     S_D$
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:32   
         2 000362   005335 036003                    ADLQ    2781,DU
         2 000363   000020 772000                    QRL     16
         2 000364   200144 756100                    STQ     FPT$RELDCB+4,,AUTO
         2 000365   200075 236100                    LDQ     OUT$,,AUTO
         2 000366   000020 772000                    QRL     16
         2 000367   200144 136100                    SBLQ    FPT$RELDCB+4,,AUTO
         2 000370   200076 756100                    STQ     MSG_LENGTH,,AUTO

      225     6807    2           CALL DDQ$WRITE (ADDR(S_D.OUTPUT), MSG_LENGTH);

   6807  2 000371   000000 236000 xsym               LDQ     S_D$
         2 000372   005335 036003                    ADLQ    2781,DU
         2 000373   200144 756100                    STQ     FPT$RELDCB+4,,AUTO
         2 000374   200076 630500                    EPPR0   MSG_LENGTH,,AUTO
         2 000375   200147 450500                    STP0    FPT$RELDCB+7,,AUTO
         2 000376   200144 631500                    EPPR1   FPT$RELDCB+4,,AUTO
         2 000377   200146 451500                    STP1    FPT$RELDCB+6,,AUTO
         2 000400   200146 630500                    EPPR0   FPT$RELDCB+6,,AUTO
         2 000401   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000402   000000 701000 xent               TSX1    DDQ$WRITE
         2 000403   000000 011000                    NOP     0

      226     6808    2           END;

   6806  2 000404                       XXX          null
      227     6809    1   XXX: ;
      228     6810    1      CALL CLS_RLS_DCB;

   6810  2 000404   000416 701000 2                  TSX1    CLS_RLS_DCB
         2 000405   000000 011000                    NOP     0

      229     6811    1      CALL M$XXX;

   6811  2 000406   000003 713400                    CLIMB   3
         2 000407   000000 401760                    pmme    nvectors=0
         2 000410   000413 710000 2                  TRA     s:6821

PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:33   
      230     6812
      231     6813        %EJECT;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:34   
      232     6814
      233     6815        /*F*     NAME:   DUX$XCON1_REL.
      234     6816
      235     6817                 PURPOSE: To provide an entry point for other routines
      236     6818                          that may wish to close and release the DCB.
      237     6819        */
      238     6820    1   DUX$XCON1_REL: ENTRY;

   6820  2 000411   000000 700200 xent  DUX$XCON1_R* TSX0  ! X66_AUTO_0
         2 000412   000152 000000                    ZERO    106,0

      239     6821    1      CALL CLS_RLS_DCB;

   6821  2 000413   000416 701000 2                  TSX1    CLS_RLS_DCB
         2 000414   000000 011000                    NOP     0

      240     6822    1      RETURN;

   6822  2 000415   000000 702200 xent               TSX2  ! X66_ARET

      241     6823
      242     6824        %EJECT;
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:35   
      243     6825
      244     6826        /*I*     NAME:   CLS_RLS_DCB.
      245     6827
      246     6828                 PURPOSE:  To close and release DELTA's DCB.
      247     6829
      248     6830        */
      249     6831
      250     6832    1   CLS_RLS_DCB: PROC;

   6832  2 000416   200100 741300       CLS_RLS_DCB  STX1  ! TFPRG$+1,,AUTO

      251     6833
      252     6834        %FPT_CLOSE (FPTN=FPT_CLOSE, STCLASS=SYMREF);
      253     6876        %FPT_CLOSE (FPTN=FPT$CLOSE, STCLASS=AUTO);
      254     6918        %FPT_RELDCB (FPTN=FPT_RELDCB, STCLASS=SYMREF);
      255     6932        %FPT_RELDCB (FPTN=FPT$RELDCB, STCLASS=AUTO);
      256     6946    2   DCL D_M$DELT# UBIN SYMREF;
      257     6947        %F$DCB;
      258     7004
      259     7005    2      IF S_D.RUM THEN CALL DUU$TRUNC;      /* Ignore altret                      */

   7005  2 000417   000000 470400 xsym               LDP0    S_D$
         2 000420   004755 234100                    SZN     2541,,PR0
         2 000421   000425 605000 2                  TPL     s:7006

   7005  2 000422   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000423   000000 701000 xent               TSX1    DUU$TRUNC
         2 000424   000000 011000                    NOP     0

      260     7006    2      IF S_D.RUM THEN CALL DUA$KILL_RUM;

   7006  2 000425   000000 470400 xsym               LDP0    S_D$
         2 000426   004755 234100                    SZN     2541,,PR0
         2 000427   000433 605000 2                  TPL     s:7007

   7006  2 000430   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000431   000000 701000 xent               TSX1    DUA$KILL_RUM
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:36   
         2 000432   000000 011000                    NOP     0

      261     7007    2      IF S_D.ANLZ THEN CALL DUA$KILL_ANLZ;

   7007  2 000433   000000 470400 xsym               LDP0    S_D$
         2 000434   004756 234100                    SZN     2542,,PR0
         2 000435   000441 605000 2                  TPL     s:7008

   7007  2 000436   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000437   000000 701000 xent               TSX1    DUA$KILL_ANLZ
         2 000440   000000 011000                    NOP     0

      262     7008    2      IF (NOT D_XDELTA) AND (NOT S_D.BATCH)

   7008  2 000441   000000 234000 xsym               SZN     D_XDELTA
         2 000442   000464 604000 2                  TMI     s:7019
         2 000443   000000 470400 xsym               LDP0    S_D$
         2 000444   004625 234100                    SZN     2453,,PR0
         2 000445   000464 604000 2                  TMI     s:7019

      263     7009    3      THEN DO;

      264     7010    3           S_D.EOM = '0'B;

   7010  2 000446   004752 450100                    STZ     2538,,PR0

      265     7011    3           CALL M$EOM(FPT_EOM) ALTRET(NOEOM); /* Reset to standard set           */

   7011  2 000447   000010 630400 1                  EPPR0   FPT_EOM
         2 000450   560003 713400                    CLIMB   alt,+57347
         2 000451   401000 401760                    pmme    nvectors=3
         2 000452   000454 702000 2                  TSX2    NOEOM

      266     7012    4           DO WHILE ('0'B);

   7012  2 000453   000464 710000 2                  TRA     s:7019

PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:37   
      267     7013    4   NOEOM:
      268     7014    4                IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.SEV ~= 0

   7014  2 000454   000000 470400 xsym  NOEOM        LDP0    B$TCB$
         2 000455   000000 471500                    LDP1    0,,PR0
         2 000456   100102 236100                    LDQ     66,,PR1
         2 000457   000007 316007                    CANQ    7,DL
         2 000460   000464 600000 2                  TZE     s:7019

      269     7015    4                THEN CALL DUE$ERRMSG;

   7015  2 000461   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000462   000000 701000 xent               TSX1    DUE$ERRMSG
         2 000463   000000 011000                    NOP     0

      270     7016    4                END;

      271     7017    3           END;

      272     7018
      273     7019    2      IF DCBADDR(D_M$DELT#)~=ADDR(NIL)

   7019  2 000464   000003 470400 3                  LDP0    3
         2 000465   000000 471500                    LDP1    0,,PR0
         2 000466   000000 720000 xsym               LXL0    D_M$DELT#
         2 000467   100000 236110                    LDQ     0,X0,PR1
         2 000470   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000471   000531 600000 2                  TZE     RETN

      274     7020    3      THEN DO;

      275     7021    3           IF DCBADDR(D_M$DELT#)->F$DCB.FCD#

   7021  2 000472   100000 473510                    LDP3    0,X0,PR1
         2 000473   300031 236100                    LDQ     25,,PR3
         2 000474   020000 316007                    CANQ    8192,DL
         2 000475   000513 600000 2                  TZE     REL
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:38   

      276     7022    4           THEN DO;                        /* CLOSE IT                           */

      277     7023    4                FPT$CLOSE = FPT_CLOSE;

   7023  2 000476   000100 100400                    MLR     fill='000'O
         2 000477   000000 000170 xsym               ADSC9   FPT_CLOSE                cn=0,n=120
         2 000500   200102 000170                    ADSC9   FPT$CLOSE,,AUTO          cn=0,n=120

      278     7024    4                FPT$CLOSE.V_ = VECTOR(FPT$CLOSE.V);

   7024  2 000501   000001 235000 3                  LDA     1
         2 000502   200144 452500                    STP2    FPT$RELDCB+4,,AUTO
         2 000503   200144 236100                    LDQ     FPT$RELDCB+4,,AUTO
         2 000504   000134 036003                    ADLQ    92,DU
         2 000505   200102 757100                    STAQ    FPT$CLOSE,,AUTO

      279     7025    4                FPT$CLOSE.V.DCB# = D_M$DELT#;

   7025  2 000506   200134 740100                    STX0    FPT$CLOSE+26,,AUTO

      280     7026    4                CALL M$CLOSE (FPT$CLOSE) ALTRET(REL);

   7026  2 000507   200102 630500                    EPPR0   FPT$CLOSE,,AUTO
         2 000510   450001 713400                    CLIMB   alt,close
         2 000511   406000 401760                    pmme    nvectors=13
         2 000512   000513 702000 2                  TSX2    REL

      281     7027    4                END;

      282     7028    3   REL:    FPT$RELDCB = FPT_RELDCB;

   7028  2 000513   000100 100400       REL          MLR     fill='000'O
         2 000514   000000 000020 xsym               ADSC9   FPT_RELDCB               cn=0,n=16
         2 000515   200140 000020                    ADSC9   FPT$RELDCB,,AUTO         cn=0,n=16

      283     7029    3           FPT$RELDCB.V_ = VECTOR(FPT$RELDCB.V);
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:39   

   7029  2 000516   000002 235000 3                  LDA     2
         2 000517   200144 452500                    STP2    FPT$RELDCB+4,,AUTO
         2 000520   200144 236100                    LDQ     FPT$RELDCB+4,,AUTO
         2 000521   000142 036003                    ADLQ    98,DU
         2 000522   200140 757100                    STAQ    FPT$RELDCB,,AUTO

      284     7030    3           FPT$RELDCB.V.DCB# = D_M$DELT#;

   7030  2 000523   000000 720000 xsym               LXL0    D_M$DELT#
         2 000524   200142 740100                    STX0    FPT$RELDCB+2,,AUTO

      285     7031    3           CALL M$RELDCB(FPT$RELDCB) ALTRET(RETN);

   7031  2 000525   200140 630500                    EPPR0   FPT$RELDCB,,AUTO
         2 000526   460003 713400                    CLIMB   alt,+24579
         2 000527   400000 401760                    pmme    nvectors=1
         2 000530   000531 702000 2                  TSX2    RETN

      286     7032    3           END;

      287     7033    2   RETN: RETURN;

   7033  2 000531   200100 221300       RETN         LDX1  ! TFPRG$+1,,AUTO
         2 000532   000001 702211                    TSX2  ! 1,X1

SNAP_XCON
 Sect OctLoc
   1     000   000001 777640   000006 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014                                    ........

SC_XCON
 Sect OctLoc
   1     006   042530 013265   000000 101740                                    ".....A.

FPT_EOM
 Sect OctLoc
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:40   
   1     010   000003 777640   000016 006000   000000 177640   000000 006014    ................
   1     014   000007 777640   000022 006000   000000 000000   000000 000000    ................
   1     020   001000 000000   000000 000000                                    ........

VLP_EOMTABLE
 Sect OctLoc
   1     022   010054 000057   000000 000000   000000 000000   000000 000000    .,./............
   1     026   010054 000057   000000 000000   000000 000000   000000 000000    .,./............

MEM_WRITE
 Sect OctLoc
   1     032   000003 777640   000042 006000   000000 177640   000000 006014    ....."..........
   1     036   000013 577640   000046 006000   000000 177640   000000 006014    .....&..........
   1     042   000000 400400   000000 000000   000000 000000   000000 000000    ................

MEM_BUF
 Sect OctLoc
   1     046   125163 145162   055040 157162   040151 156163   164141 154154    User- or install
   1     052   141164 151157   156055 163145   164040 155145   155157 162171    ation-set memory
   1     056   040154 151155   151164 040162   145141 143150   145144 056***     limit reached..

(unnamed)
 Sect OctLoc
   1     062   052052 052040   040151 163040   115044 123103   122105 105103    ***  is M$SCREEC
   1     066   110040 144165   155160 040146   151154 145040   111104 056040    H dump file ID.

(unnamed)
 Sect OctLoc
   3     000   000007 006000   000003 777640   000001 777640   000000 006003    ................
   3     004   000003 006000   000000 000000   000062 006000   000006 006000    .........2......
   3     010   000004 200000   000000 000033   000063 006000   000011 006000    .........3......
      288     7034    2   END CLS_RLS_DCB;
      289     7035
      290     7036    1   END DUX$XCON1;

PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:41   
--  Include file information  --

   IR_DATA_M.:E05TOU  is referenced.
   DU_SCODE_C.:E05TOU  is referenced.
   DD_DEBUG_C.:E05TOU  is referenced.
   DD_SUBS_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure DUX$XCON1.

   Procedure DUX$XCON1 requires 347 words for executable code.
   Procedure DUX$XCON1 requires 106 words of local(AUTO) storage.

    No errors detected in file DUX$XCON1.:E05TSI    .
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:42   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:43   
          MINI XREF LISTING

B$ALT.CODE
      6219**DCL      6219--REDEF    6220--REDEF    6220--REDEF
B$ALT.ERR.ERR#
      6221**DCL      6221--REDEF    6773>>IF
B$ALT.ERR.SEV
      6221**DCL      7014>>IF
B$ALT.EVID
      6220**DCL      6220--REDEF    6220--REDEF
B$EXCFR.ASL
      6239**DCL      6239--REDEF
B$EXCFR.ERR.ERR#
      6253**DCL      6253--REDEF
B$EXCFR.EVID
      6252**DCL      6252--REDEF    6253--REDEF
B$EXCFR.IR
      6240**DCL      6240--REDEF
B$EXCFR.ISR.WSR
      6245**DCL      6680>>IF
B$EXCFR.PREVSZ
      6239**DCL      6239--REDEF
B$EXCFR.SUBC
      6251**DCL      6251--REDEF    6252--REDEF    6252--REDEF
B$JIT.CPFLAGS1.SLEAZE
       124**DCL       124--REDEF
B$JIT.ERR.MID
        31**DCL        31--REDEF
B$JIT.FRS
       226**DCL      6688>>IF       6761>>IF
B$JIT.JRESPEAK
       192**DCL       193--REDEF
B$JIT.MODE
        25**DCL      6768>>IF
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:44   
B$JIT.ORIGINATOR_PORT.FROM_CR
       301**DCL       301--REDEF     302--REDEF
B$JIT.PNR
       205**DCL       205--REDEF
B$JIT.RNST
       209**DCL      6688>>IF       6761>>IF
B$JIT.TSLINE
       299**DCL       300--REDEF
B$JIT$
      6314**DCL        25--IMP-PTR  6688>>IF       6688>>IF       6761>>IF       6761>>IF       6768>>IF
B$TCB.ALT$
      6226**DCL      6773>>IF       7014>>IF
B$TCB.STK$
      6226**DCL      6680>>IF       6704>>IF       6704>>IF       6717>>IF       6717>>IF       6764>>IF
      6764>>IF       6764>>IF
B$TCB$
      6315**DCL      6680>>IF       6704>>IF       6704>>IF       6717>>IF       6717>>IF       6764>>IF
      6764>>IF       6764>>IF       6773>>IF       7014>>IF
B$XCON.CECCB.CL3
      6229**DCL      6764>>IF
B$XCON.CECCB.CPSAVE
      6230**DCL      6704>>IF
B$XCON.CECCB.LIMIT
      6229**DCL      6764>>IF
B$XCON.CECCB.SAVE
      6230**DCL      6704>>IF
B$XCON.ECSC
      6230**DCL      6717>>IF
B$XCON.ERR.ERR#
      6235**DCL      6235--REDEF
B$XCON.LIMIT.MEM
      6233**DCL      6233--REDEF
B$XCON.RNST.OPERR
      6231**DCL      6717>>IF
B$XCON.RNST.SSPABRT
      6231**DCL      6764>>IF
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:45   
CLS_RLS_DCB
      6832**PROC     6750--CALL     6810--CALL     6821--CALL
DDQ$WRITE
      6653**DCL-ENT  6807--CALL
DDR$MOVE
      6652**DCL-ENT  6801--CALL     6803--CALL     6804--CALL
DFA$QUIT
      6655**DCL-ENT  6731--CALL
DUA$KILL_ANLZ
      6656**DCL-ENT  7007--CALL
DUA$KILL_RUM
      6657**DCL-ENT  7006--CALL
DUD$MINI
      6659**DCL-ENT  6694--CALL
DUE$ERRMSG
      6660**DCL-ENT  6733--CALL     7015--CALL
DUMP_FILE_NAME
      6397**DCL      6790--ASSIGN
DUMP_FILE_NAME.L
      6397**DCL      6802>>ASSIGN
DUMP_FILE_NAME.MONID
      6397**DCL      6397--REDEF
DUMP_FILE_NAME.N1
      6397**DCL      6803<>CALL
DUR$ECCRPT
      6658**DCL-ENT  6691--CALL     6762--CALL
DUU$TRUNC
      6661**DCL-ENT  7005--CALL
D_M$DELT# IN PROCEDURE CLS_RLS_DCB
      6946**DCL      7019--IF       7021--IF       7025>>ASSIGN   7030>>ASSIGN
D_M$DO#
      6645**DCL      6777>>ASSIGN
D_XDELTA
      6316**DCL      7008>>IF
F$DCB.ACTPOS
      6289**DCL      6289--REDEF
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:46   
F$DCB.ARS#
      6263**DCL      6263--REDEF
F$DCB.ATTR
      6282**DCL      6283--REDEF
F$DCB.BORROW
      6297**DCL      6297--REDEF    6297--REDEF    6297--REDEF
F$DCB.DCBNAME.L
      6311**DCL      6311--IMP-SIZ
F$DCB.EOMCHAR#
      6267**DCL      6267--REDEF
F$DCB.FCD#
      6276**DCL      6738>>IF
F$DCB.FLDID
      6292**DCL      6292--REDEF
F$DCB.FORM$
      6286**DCL      6286--REDEF
F$DCB.FSECT
      6302**DCL      6302--REDEF
F$DCB.FSN#
      6279**DCL      6279--REDEF    6279--REDEF    6280--REDEF
F$DCB.HEADER$
      6285**DCL      6285--REDEF
F$DCB.IXTNSIZE#
      6283**DCL      6283--REDEF
F$DCB.LASTSTA$
      6272**DCL      6272--REDEF
F$DCB.LVL
      6298**DCL      6298--REDEF
F$DCB.NAME#.C
      6273**DCL      6273--REDEF
F$DCB.NOEOF
      6295**DCL      6295--REDEF
F$DCB.NRECS#
      6284**DCL      6284--REDEF
F$DCB.NRECX
      6303**DCL      6303--REDEF
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:47   
F$DCB.OHDR
      6295**DCL      6295--REDEF
F$DCB.ORG#
      6278**DCL      6278--REDEF
F$DCB.PRECNO
      6301**DCL      6301--REDEF
F$DCB.RCSZ
      6307**DCL      6307--REDEF
F$DCB.RES#
      6274**DCL      6274--REDEF
F$DCB.SETX
      6286**DCL      6286--REDEF
F$DCB.TAB$
      6286**DCL      6286--REDEF
F$DCB.TDA
      6300**DCL      6301--REDEF
F$DCB.WSN#
      6274**DCL      6274--REDEF
F$DCB.ACTPOS IN PROCEDURE CLS_RLS_DCB
      6980**DCL      6980--REDEF
F$DCB.ARS# IN PROCEDURE CLS_RLS_DCB
      6954**DCL      6954--REDEF
F$DCB.ATTR IN PROCEDURE CLS_RLS_DCB
      6973**DCL      6974--REDEF
F$DCB.BORROW IN PROCEDURE CLS_RLS_DCB
      6988**DCL      6988--REDEF    6988--REDEF    6988--REDEF
F$DCB.DCBNAME.L IN PROCEDURE CLS_RLS_DCB
      7002**DCL      7002--IMP-SIZ
F$DCB.EOMCHAR# IN PROCEDURE CLS_RLS_DCB
      6958**DCL      6958--REDEF
F$DCB.FCD# IN PROCEDURE CLS_RLS_DCB
      6967**DCL      7021>>IF
F$DCB.FLDID IN PROCEDURE CLS_RLS_DCB
      6983**DCL      6983--REDEF
F$DCB.FORM$ IN PROCEDURE CLS_RLS_DCB
      6977**DCL      6977--REDEF
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:48   
F$DCB.FSECT IN PROCEDURE CLS_RLS_DCB
      6993**DCL      6993--REDEF
F$DCB.FSN# IN PROCEDURE CLS_RLS_DCB
      6970**DCL      6970--REDEF    6970--REDEF    6971--REDEF
F$DCB.HEADER$ IN PROCEDURE CLS_RLS_DCB
      6976**DCL      6976--REDEF
F$DCB.IXTNSIZE# IN PROCEDURE CLS_RLS_DCB
      6974**DCL      6974--REDEF
F$DCB.LASTSTA$ IN PROCEDURE CLS_RLS_DCB
      6963**DCL      6963--REDEF
F$DCB.LVL IN PROCEDURE CLS_RLS_DCB
      6989**DCL      6989--REDEF
F$DCB.NAME#.C IN PROCEDURE CLS_RLS_DCB
      6964**DCL      6964--REDEF
F$DCB.NOEOF IN PROCEDURE CLS_RLS_DCB
      6986**DCL      6986--REDEF
F$DCB.NRECS# IN PROCEDURE CLS_RLS_DCB
      6975**DCL      6975--REDEF
F$DCB.NRECX IN PROCEDURE CLS_RLS_DCB
      6994**DCL      6994--REDEF
F$DCB.OHDR IN PROCEDURE CLS_RLS_DCB
      6986**DCL      6986--REDEF
F$DCB.ORG# IN PROCEDURE CLS_RLS_DCB
      6969**DCL      6969--REDEF
F$DCB.PRECNO IN PROCEDURE CLS_RLS_DCB
      6992**DCL      6992--REDEF
F$DCB.RCSZ IN PROCEDURE CLS_RLS_DCB
      6998**DCL      6998--REDEF
F$DCB.RES# IN PROCEDURE CLS_RLS_DCB
      6965**DCL      6965--REDEF
F$DCB.SETX IN PROCEDURE CLS_RLS_DCB
      6977**DCL      6977--REDEF
F$DCB.TAB$ IN PROCEDURE CLS_RLS_DCB
      6977**DCL      6977--REDEF
F$DCB.TDA IN PROCEDURE CLS_RLS_DCB
      6991**DCL      6992--REDEF
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:49   
F$DCB.WSN# IN PROCEDURE CLS_RLS_DCB
      6965**DCL      6965--REDEF
FPRG$CONTEXT.DCBNO
      5702**DCL      6736--IF       6738--IF       6740>>ASSIGN   6744>>ASSIGN
FPRG$CONTEXT.NEXT$
      5686**DCL      6747>>ASSIGN
FPRG$CONTEXT.XDELTA
      5698**DCL      6729>>IF
FPT$CLOSE
      6510**DCL      6723<<ASSIGN   6742<>CALL
FPT$CLOSE.SN_
      6510**DCL      6510--REDEF
FPT$CLOSE.UTL_
      6511**DCL      6511--REDEF
FPT$CLOSE.V
      6515**DCL      6724--ASSIGN
FPT$CLOSE.V.DCB#
      6516**DCL      6740<<ASSIGN
FPT$CLOSE.V.DISP#
      6519**DCL      6741<<ASSIGN
FPT$CLOSE.V.EXPIRE#
      6525**DCL      6525--REDEF
FPT$CLOSE.V.TYPE#
      6523**DCL      6523--REDEF
FPT$CLOSE.V.XTNSIZE#
      6520**DCL      6520--REDEF    6522--REDEF
FPT$CLOSE.V_
      6510**DCL      6724<<ASSIGN
FPT$CLOSE IN PROCEDURE CLS_RLS_DCB
      6899**DCL      7023<<ASSIGN   7026<>CALL
FPT$CLOSE.SN_ IN PROCEDURE CLS_RLS_DCB
      6899**DCL      6899--REDEF
FPT$CLOSE.UTL_ IN PROCEDURE CLS_RLS_DCB
      6900**DCL      6900--REDEF
FPT$CLOSE.V IN PROCEDURE CLS_RLS_DCB
      6904**DCL      7024--ASSIGN
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:50   
FPT$CLOSE.V.DCB# IN PROCEDURE CLS_RLS_DCB
      6905**DCL      7025<<ASSIGN
FPT$CLOSE.V.EXPIRE# IN PROCEDURE CLS_RLS_DCB
      6914**DCL      6914--REDEF
FPT$CLOSE.V.TYPE# IN PROCEDURE CLS_RLS_DCB
      6912**DCL      6912--REDEF
FPT$CLOSE.V.XTNSIZE# IN PROCEDURE CLS_RLS_DCB
      6909**DCL      6909--REDEF    6911--REDEF
FPT$CLOSE.V_ IN PROCEDURE CLS_RLS_DCB
      6899**DCL      7024<<ASSIGN
FPT$RELDCB IN PROCEDURE CLS_RLS_DCB
      6943**DCL      7028<<ASSIGN   7031<>CALL
FPT$RELDCB.V IN PROCEDURE CLS_RLS_DCB
      6943**DCL      7029--ASSIGN
FPT$RELDCB.V.DCB# IN PROCEDURE CLS_RLS_DCB
      6943**DCL      7030<<ASSIGN
FPT$RELDCB.V_ IN PROCEDURE CLS_RLS_DCB
      6943**DCL      7029<<ASSIGN
FPTRELDCB
      6442**DCL      6725<<ASSIGN   6745<>CALL
FPTRELDCB.V
      6442**DCL      6726--ASSIGN
FPTRELDCB.V.DCB#
      6442**DCL      6744<<ASSIGN
FPTRELDCB.V_
      6442**DCL      6726<<ASSIGN
FPT_CLOSE
      6468**DCL      6723>>ASSIGN
FPT_CLOSE.SN_
      6468**DCL      6468--REDEF
FPT_CLOSE.UTL_
      6469**DCL      6469--REDEF
FPT_CLOSE.V.EXPIRE#
      6483**DCL      6483--REDEF
FPT_CLOSE.V.TYPE#
      6481**DCL      6481--REDEF
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:51   
FPT_CLOSE.V.XTNSIZE#
      6478**DCL      6478--REDEF    6480--REDEF
FPT_CLOSE IN PROCEDURE CLS_RLS_DCB
      6857**DCL      7023>>ASSIGN
FPT_CLOSE.SN_ IN PROCEDURE CLS_RLS_DCB
      6857**DCL      6857--REDEF
FPT_CLOSE.UTL_ IN PROCEDURE CLS_RLS_DCB
      6858**DCL      6858--REDEF
FPT_CLOSE.V.EXPIRE# IN PROCEDURE CLS_RLS_DCB
      6872**DCL      6872--REDEF
FPT_CLOSE.V.TYPE# IN PROCEDURE CLS_RLS_DCB
      6870**DCL      6870--REDEF
FPT_CLOSE.V.XTNSIZE# IN PROCEDURE CLS_RLS_DCB
      6867**DCL      6867--REDEF    6869--REDEF
FPT_EOM
      6549**DCL      7011<>CALL
FPT_EOM.V
      6557**DCL      6551--DCLINIT
FPT_RELDCB
      6427**DCL      6725>>ASSIGN
FPT_RELDCB IN PROCEDURE CLS_RLS_DCB
      6929**DCL      7028>>ASSIGN
FPT_SCREECH
      6412**DCL      6789<<ASSIGN   6791<>CALL
FPT_SCREECH.SCREECHID_
      6413**DCL      6790<<ASSIGN
M$CLOSE
      1571**DCL-ENT  6742--CALL     7026--CALL
M$EOM
      1596**DCL-ENT  7011--CALL
M$EXIT
      1583**DCL-ENT  6709--CALL     6751--CALL     6770--CALL     6779--CALL
M$RELDCB
      1577**DCL-ENT  6745--CALL     7031--CALL
M$SCREECH
      1585**DCL-ENT  6791--CALL
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:52   
M$WRITE
      1572**DCL-ENT  6778--CALL
M$XXX
      1583**DCL-ENT  6811--CALL
MEM$WRITE
      6630**DCL      6775<<ASSIGN   6778<>CALL
MEM$WRITE.STATION_
      6632**DCL      6632--REDEF
MEM$WRITE.V
      6633**DCL      6776--ASSIGN
MEM$WRITE.V.DCB#
      6633**DCL      6777<<ASSIGN
MEM$WRITE.V.DVBYTE.VFC#
      6639**DCL      6639--REDEF
MEM$WRITE.V_
      6630**DCL      6776<<ASSIGN
MEM_BUF
      6644**DCL      6600--DCLINIT  6601--DCLINIT
MEM_WRITE
      6599**DCL      6775>>ASSIGN
MEM_WRITE.STATION_
      6601**DCL      6601--REDEF
MEM_WRITE.V
      6602**DCL      6599--DCLINIT
MEM_WRITE.V.DVBYTE.VFC#
      6608**DCL      6608--REDEF
MSG_LENGTH
      6649**DCL      6802<<ASSIGN   6803<>CALL     6806<<ASSIGN   6807<>CALL
NOEOM IN PROCEDURE CLS_RLS_DCB
      7014**LABEL    7011--CALLALT
OUT$
      6648**DCL      6800<<ASSIGN   6801<>CALL     6803<>CALL     6804<>CALL     6806>>ASSIGN
REL IN PROCEDURE CLS_RLS_DCB
      7028**LABEL    7026--CALLALT
REM
      6647**DCL      6799<<ASSIGN   6801<>CALL     6803<>CALL     6804<>CALL
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:53   
RETN IN PROCEDURE CLS_RLS_DCB
      7033**LABEL    7031--CALLALT
SC_XCON
      6349**DCL      6329--DCLINIT
SNAP_XCON
      6329**DCL      6789>>ASSIGN
S_D.ANLZ
      3715**DCL      7007>>IF
S_D.BATCH
      3542**DCL      7008>>IF
S_D.CURRENT_CHANNEL
      4015**DCL      4017--REDEF
S_D.DEBUG
      3670**DCL      6692>>IF
S_D.DEBUGA
      3167**DCL      3169--REDEF    6688>>IF
S_D.DLIB
      3769**DCL      6681<<ASSIGN   6682<<ASSIGN
S_D.EIS
      4125**DCL      4154--REDEF
S_D.EOM
      3707**DCL      7010<<ASSIGN
S_D.FPRG_CONTEXT$
      3207**DCL      6721>>IF       6727>>ASSIGN
S_D.HOST_MESSAGE_BUF_REMOTE
      4058**DCL      4059--REDEF    4073--REDEF
S_D.JDE
      3672**DCL      3673--REDEF
S_D.L$.VALUE
      3225**DCL      3231--REDEF    3239--REDEF    3242--REDEF    3245--REDEF    3248--REDEF
S_D.L$.VALUE.L
      3226**DCL      3227--REDEF    3228--REDEF
S_D.L6_MESSAGE_BUF
      4079**DCL      4081--REDEF
S_D.OUTPUT
      4045**DCL      4047--REDEF    6799--ASSIGN   6800--ASSIGN   6806--ASSIGN   6807--CALL
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:54   
S_D.PROMPT_SIZE
      3841**DCL      6695<<ASSIGN
S_D.REMOTE_MSG.FNCC
      4064**DCL      4065--REDEF
S_D.REMOTE_MSG.STXC
      4060**DCL      4061--REDEF
S_D.REMOTE_MSG.SUBFNCC
      4068**DCL      4069--REDEF
S_D.RUM
      3713**DCL      7005>>IF       7006>>IF
S_D.SNAP_TAKEN
      3599**DCL      6787>>IF
S_D.SV
      3124**DCL      3145--REDEF
S_D.USVFC
      3835**DCL      6679<<ASSIGN
S_D$
      4376**DCL      3072--IMP-PTR  6679>>ASSIGN   6681>>ASSIGN   6682>>ASSIGN   6688>>IF       6692>>IF
      6695>>ASSIGN   6721>>IF       6727>>ASSIGN   6787>>IF       6800>>ASSIGN   6806>>ASSIGN   6807>>CALL
      7005>>IF       7006>>IF       7007>>IF       7008>>IF       7010>>ASSIGN
TFPRG$
      6650**DCL      6727<<ASSIGN   6728>>DOWHILE  6729>>IF       6731<>CALL     6736>>IF       6738>>IF
      6740>>ASSIGN   6744>>ASSIGN   6747<<ASSIGN   6747>>ASSIGN
VLP_EOMTABLE
      6580**DCL      6555--DCLINIT
X66_TRTN
      6662**DCL-ENT  6769--CALL
XXX
      6806**LABEL    6742--CALLALT  6745--CALLALT  6791--CALLALT
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:55   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:56   
              MINI UREF LISTING

DDB$PLANT    6654**DCL-ENT
DUX$XCON1      14**PROC
DUX$XCON1_REL    6820**ENTRY
M$ACCT    1588**DCL-ENT
M$ACTIVATE    1591**DCL-ENT
M$ALIB    1584**DCL-ENT
M$ASUSER    1586**DCL-ENT
M$ATTACH    1593**DCL-ENT
M$BADPP    1611**DCL-ENT
M$CGCTL    1592**DCL-ENT
M$CGINFO    1592**DCL-ENT
M$CHECK    1573**DCL-ENT
M$CHGUNIT    1631**DCL-ENT
M$CLRSTK    1629**DCL-ENT
M$CMDVAR    1640**DCL-ENT
M$CONFIG    1601**DCL-ENT
M$CORRES    1576**DCL-ENT
M$CPEXIT    1585**DCL-ENT
M$CVM    1609**DCL-ENT
M$CVOL    1574**DCL-ENT
M$DCLFLD    1601**DCL-ENT
M$DEACTIVATE    1591**DCL-ENT
M$DELREC    1573**DCL-ENT
M$DEQ    1638**DCL-ENT
M$DETACH    1593**DCL-ENT
M$DEVICE    1575**DCL-ENT
M$DISPLAY    1638**DCL-ENT
M$DISPRES    1578**DCL-ENT
M$DLIB    1584**DCL-ENT
M$DRIBBLE    1601**DCL-ENT
M$DRTN    1629**DCL-ENT
M$DSUSER    1586**DCL-ENT
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:57   
M$ENQ    1637**DCL-ENT
M$ERASE    1602**DCL-ENT
M$ERR    1583**DCL-ENT
M$ERRMSG    1634**DCL-ENT
M$EVENT    1626**DCL-ENT
M$EXHUME    1635**DCL-ENT
M$EXTEND    1575**DCL-ENT
M$FDP    1607**DCL-ENT
M$FDS    1606**DCL-ENT
M$FEBOOT    1599**DCL-ENT
M$FECTL    1600**DCL-ENT
M$FEDUMP    1599**DCL-ENT
M$FID    1634**DCL-ENT
M$FINDPROC    1588**DCL-ENT
M$FSUSER    1586**DCL-ENT
M$FVP    1608**DCL-ENT
M$FWCG    1592**DCL-ENT
M$GBPL    1612**DCL-ENT
M$GDDL    1608**DCL-ENT
M$GDP    1607**DCL-ENT
M$GDS    1606**DCL-ENT
M$GETDCB    1577**DCL-ENT
M$GETMOUSE    1617**DCL-ENT
M$GETPM    1618**DCL-ENT
M$GJOB    1636**DCL-ENT
M$GLINEATTR    1596**DCL-ENT
M$GOODPP    1611**DCL-ENT
M$GPLATEN    1604**DCL-ENT
M$GPROMPT    1603**DCL-ENT
M$GTRMATTR    1597**DCL-ENT
M$GTRMCTL    1595**DCL-ENT
M$GTRMTAB    1598**DCL-ENT
M$GVP    1607**DCL-ENT
M$HELP    1634**DCL-ENT
M$INT    1626**DCL-ENT
M$INTRTN    1587**DCL-ENT
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:58   
M$IOQ    1622**DCL-ENT
M$JOBSTATS    1636**DCL-ENT
M$KEYIN    1576**DCL-ENT
M$LDEV    1571**DCL-ENT
M$LDTRC    1584**DCL-ENT
M$LIMIT    1577**DCL-ENT
M$LINES    1576**DCL-ENT
M$LINK    1583**DCL-ENT
M$MADMUCK    1579**DCL-ENT
M$MAKUSER    1610**DCL-ENT
M$MBS    1578**DCL-ENT
M$MDFFLD    1602**DCL-ENT
M$MERC    1627**DCL-ENT
M$MERCS    1628**DCL-ENT
M$MIRROR    1622**DCL-ENT
M$MONINFO    1639**DCL-ENT
M$MPL    1612**DCL-ENT
M$NODEINFO    1603**DCL-ENT
M$NXTUSR    1637**DCL-ENT
M$OCMSG    1635**DCL-ENT
M$OLAY    1583**DCL-ENT
M$OPEN    1571**DCL-ENT
M$PAS    1612**DCL-ENT
M$PATHCON    1635**DCL-ENT
M$PDS    1606**DCL-ENT
M$PFIL    1573**DCL-ENT
M$PLATEN    1597**DCL-ENT
M$PRECORD    1575**DCL-ENT
M$PROCNAME    1588**DCL-ENT
M$PROFILE    1599**DCL-ENT
M$PROMPT    1595**DCL-ENT
M$RACST    1579**DCL-ENT
M$RDSYSLOG    1620**DCL-ENT
M$READ    1572**DCL-ENT
M$RELRES    1578**DCL-ENT
M$RELSTARF    1580**DCL-ENT
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:59   
M$REM    1580**DCL-ENT
M$RENV    1627**DCL-ENT
M$REQUIRE    1579**DCL-ENT
M$RETRY    1628**DCL-ENT
M$RETRYS    1628**DCL-ENT
M$REW    1574**DCL-ENT
M$RLSFLD    1602**DCL-ENT
M$RPRIV    1630**DCL-ENT
M$RSPP    1609**DCL-ENT
M$RSWITCH    1631**DCL-ENT
M$RUE    1637**DCL-ENT
M$SAD    1610**DCL-ENT
M$SAVE    1586**DCL-ENT
M$SCON    1587**DCL-ENT
M$SENV    1627**DCL-ENT
M$SETFMA    1571**DCL-ENT
M$SETFP    1600**DCL-ENT
M$SINPUT    1598**DCL-ENT
M$SLCFLD    1603**DCL-ENT
M$SMOUSE    1617**DCL-ENT
M$SMPRT    1609**DCL-ENT
M$SPRIV    1630**DCL-ENT
M$SSC    1610**DCL-ENT
M$SSWITCH    1630**DCL-ENT
M$STATE    1639**DCL-ENT
M$STD    1611**DCL-ENT
M$STIMER    1625**DCL-ENT
M$STLPP    1608**DCL-ENT
M$STRAP    1625**DCL-ENT
M$STRMATTR    1597**DCL-ENT
M$STRMCTL    1595**DCL-ENT
M$STRMTAB    1598**DCL-ENT
M$SYMBIO    1636**DCL-ENT
M$SYSCON    1622**DCL-ENT
M$SYSID    1640**DCL-ENT
M$TDCLOSE    1621**DCL-ENT
PL6.E3A0      #001=DUX$XCON1 File=DUX$XCON1.:E05TSI                              TUE 07/29/97 15:04 Page:60   
M$TDIO    1621**DCL-ENT
M$TDOPEN    1620**DCL-ENT
M$TDREQCPU    1621**DCL-ENT
M$TEMPWROC    1615**DCL-ENT
M$TIME    1638**DCL-ENT
M$TRAP    1625**DCL-ENT
M$TRMISC    1600**DCL-ENT
M$TRMPRG    1596**DCL-ENT
M$TRTN    1629**DCL-ENT
M$TRUNC    1572**DCL-ENT
M$TTIMER    1625**DCL-ENT
M$UC    1595**DCL
M$UMPL    1612**DCL-ENT
M$UNFID    1634**DCL-ENT
M$UNLATCH    1591**DCL-ENT
M$UNSHARE    1588**DCL-ENT
M$USRFIELD    1631**DCL-ENT
M$VIRTUAL    1606**DCL-ENT
M$WAIT    1629**DCL-ENT
M$WEOF    1574**DCL-ENT
M$WRSYSLOG    1620**DCL-ENT
M$XCON    1626**DCL-ENT
M$XCONRTN    1587**DCL-ENT
M$XEQTIME    1639**DCL-ENT
M$XFLUSH    1580**DCL-ENT
M$XMOUSE    1617**DCL-ENT
M$YC    1585**DCL-ENT
