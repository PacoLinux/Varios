

15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        1    
    1      /*M* K_ADDRESS_M - Macros to generate the structures for OSI Network Addresses. */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*X* MEC,MOC,EXM=20,CLM=20,CRM=80 */
    9
   10      /*F* NAME: K_ADDRESS_M
   11
   12      This file contains the macros to generate the various formats
   13      of OSI Network Addresses.  This includes:
   14
   15      }  K$SSAP - Session Service Access Point
   16      }  K$TSAP - Transport Service Access Point
   17      }  K$NSAP - Network Service Access Point
   18      }  K$SNPA - Subnetwork Point of Attachment
   19      }  K$ADDRESS - Session Address (TSAP plus NSAP)
   20      }  K$ADDRMUNGE - Internal macro for K$ADDRESS
   21      }  K$MAC - ???
   22      */
   23
   24
   25
   26      /*F* NAME: K$SSAP
   27
   28      The K$SSAP macro generates the structure for the
   29      Session Service Access Point.
   30      */
   31      %MACRO K$SSAP( NAME=K$SSAP, STCLASS=BASED, LVL=1, LAST=";",
   32                     LEN=,
   33                     SSAP=);
   34      %LSET L6 = BITBIN( MODE_FEP);
   35      %LSET LISTDIR = '0'B;
   36      %LSET LISTEXP = '1'B;
   37      %LSET LISTCOM = '0'B;
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        2    
   38      %LSET LISTSUB = '1'B;
   39      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
   40      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
   41          %LSET INIT = CHARTEXT( ' INIT');
   42          %LSET ENIT = CHARTEXT( ' ');
   43      %ELSE;
   44          %LSET INIT = CHARTEXT( '/*');
   45          %LSET ENIT = CHARTEXT( '*/');
   46      %ENDIF;
   47      %IF LENGTHC( 'NAME') = 0;
   48          %LSET LVL = LVL - 1;
   49      %ELSE;
   50          %IF LVL = 1;
   51      DCL 1 NAME STCLASS ALIGNED,
   52          %ELSE;
   53              %LVL NAME CALIGNED,
   54          %ENDIF;
   55      %ENDIF;
   56      %LSET LVL1 = LVL + 1;
   57      %LSET LVL2 = LVL1 + 1;
   58      %LSET S = TEXTCHAR(SSAP);
   59      %LSET L = TEXTCHAR(LEN);
   60      %IF LENGTHC( S) > 0;
   61          %LSET XSSAP = SSAP;
   62          %IF LENGTHC( L) = 0;
   63              %LSET XLEN = LENGTHC( XSSAP);
   64          %ELSE;
   65              %LSET XLEN = L;
   66          %ENDIF;
   67      %ELSE;
   68          %LSET XLEN = 0;
   69          %LSET XSSAP = '                ';
   70      %ENDIF;
   71
   72                %LVL1 %CHARTEXT( 'LEN') UBIN BYTE %INIT( %XLEN)%ENIT CALIGNED,
   73                %LVL1 %CHARTEXT( 'SSAP') CHAR(16) %INIT( %XSSAP)%ENIT CALIGNED LAST
   74
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        3    
   75      %MEND;
   76
   77
   78
   79      /*F* NAME: K$TSAP
   80
   81      The K$TSAP macro generates the format for the
   82      Transport Service Access Point.  This structure
   83      is part of the connect fpt passed from OSI Session
   84      to host transport.  The TSAPs are maintained in
   85      the host TCTX.
   86
   87      The TSAP contains:
   88      */
   89      %MACRO K$TSAP (NAME=K$TSAP,STCLASS=BASED,LVL=1,LAST=";",ALGN=ALIGNED,
   90                     PROTOCOL(CP6=2,OSI_CL0=16,OSI_CL4=32,ANY)=32,
   91                     LEN=0,TTSAP="' '");
   92      %LSET LISTDIR='0'B;
   93      %LSET LISTEXP='1'B;
   94      %LSET LISTCOM='0'B;
   95      %LSET LISTSUB='1'B;
   96      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'      ');
   97      %IF (SUBSTR(STR,0,6)='STATIC') OR
   98          (SUBSTR(STR,0,5)='CONST') OR
   99          (SUBSTR(STR,0,3)='EXT');
  100        %LSET INIT=CHARTEXT(' INIT');
  101        %LSET ENIT=CHARTEXT(' ');
  102      %ELSE;
  103        %LSET INIT=CHARTEXT('/*');
  104        %LSET ENIT=CHARTEXT('*/');
  105      %ENDIF;
  106      %IF LVL=1;
  107      DCL 1 NAME STCLASS ALGN,
  108      %ELSE;
  109          %(LVL) NAME ALGN,
  110      %ENDIF;
  111              %(LVL+1) %CHARTEXT('LEN ') UBIN(%(18-BITBIN(MODE_FEP)*2)) UNAL %INIT(LEN)%ENIT,
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        4    
  112                          /*K* LEN - UBIN(18).
  113                          Contains the number of bytes in the TSAP.
  114                          Permissable values are 0 through 32.
  115
  116                          The NBS Implementation Agreements, Phase II limits
  117                          TSAP length to 16 IA5 digits for Class 0; to 32
  118                          octets for Class 4.
  119                          */
  120                %(LVL+1) TSAP CHAR(PROTOCOL) CALIGNED %INIT(TTSAP)%ENIT LAST
  121                          /*K* TSAP - CHAR(n).
  122                          Contains a 1 to 32 byte identifier.  The contents
  123                          of these bytes are specified by the session layer
  124                          when requesting the T_CONNECT function.
  125                          */
  126      %MEND;
  127
  128
  129
  130
  131      /*F* NAME: K$NSAP
  132
  133      This structure is used to define the nsap for locally defined
  134      addresses(eg other cp6 nodes, lan addresses).
  135      */
  136      %MACRO K$NSAP (FPTN=K$NSAP,
  137                          STCLASS="BASED",
  138                          LVL=1,
  139                          ADRTYP(X121=1,FEP=2,LACS=3,NET=4,ANY)=4,
  140                          AFI=0,
  141                          ADDRESS="0*0",
  142                          LEN=0,
  143                          LAST=";");
  144
  145       %LSET LISTDIR='0'B;
  146       %LSET LISTEXP='1'B;
  147       %LSET LISTCOM='0'B;
  148       %LSET LISTSUB='1'B;
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        5    
  149       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  150       %IF (SUBSTR(STR,0,6)='STATIC') OR
  151       (SUBSTR(STR,0,5)='CONST') OR
  152       (SUBSTR(STR,0,3)='EXT');
  153       %LSET INIT=CHARTEXT('INIT');
  154       %LSET ENIT=CHARTEXT('');
  155       %ELSE;
  156       %LSET INIT=CHARTEXT('/*');
  157       %LSET ENIT=CHARTEXT('*/');
  158       %ENDIF;
  159      %IF LVL=1;
  160
  161      DCL 1 FPTN STCLASS CALIGNED,
  162      %ELSE;
  163           %(LVL) FPTN CALIGNED,
  164      %ENDIF;
  165
  166        %(LVL+1) %CHARTEXT('LEN') UBIN BYTE CALIGNED %INIT(LEN)%ENIT,
  167                          /*K* LEN - UBIN BYTE.
  168                          Contains the number of bytes in the NSAP.
  169                          This includes the AFI (1 byte) as well.
  170                          */
  171
  172        %(LVL+1) %CHARTEXT('AFI') UBIN BYTE UNAL %INIT(AFI)%ENIT,
  173
  174      %IF ADRTYP=1;
  175           %(LVL+1) %CHARTEXT('ADDRESS')(0:%(K_X121_IDPLEN-2)) UBIN BYTE UNAL,
  176           %(LVL+1) ADR(0:%(K_X121_IDPLEN-2)) REDEF %CHARTEXT('ADDRESS'),
  177           %IF NOT(MODE_FEP);
  178             %(LVL+2) * UBIN(1) UNAL,
  179           %ENDIF;
  180           %(LVL+2) BCD0 UBIN(4) UNAL,
  181           %(LVL+2) BCD1 UBIN(4) UNAL,
  182           %(LVL+1) DSP(0:%(K_X121_DSPLEN)) UBIN BYTE UNAL %INIT(0*0)%ENIT,
  183           %(LVL+1) * CHAR(3) UNAL %INIT(' ')%ENIT LAST
  184      %ELSEIF ADRTYP=2;
  185           %(LVL+1) TYPE UBIN BYTE UNAL %INIT(%K_TYPE_FEP)%ENIT,
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        6    
  186           %(LVL+1) NODE# UBIN BYTE UNAL %INIT(0)%ENIT,
  187           %(LVL+1) * CHAR(18) UNAL %INIT(' ')%ENIT LAST
  188      %ELSEIF ADRTYP=3;
  189           %(LVL+1) TYPE UBIN BYTE UNAL %INIT(%K_TYPE_LACS)%ENIT,
  190           %(LVL+1) SUBNET UBIN(%(18-BITBIN(MODE_FEP)*2)) UNAL %INIT(0)%ENIT,
  191           %(LVL+1) SUBNETAP(0:6) UBIN BYTE UNAL %INIT(0)%ENIT,
  192           %LSET NXTLVL = %(LVL+1);
  193           %K$MAC(NAME=MAC,LVL=%NXTLVL,LAST=",");
  194           %(LVL+1) * CHAR(3) UNAL %INIT(' ')%ENIT LAST
  195        %ELSE;
  196           %(LVL+1) ADDRESS_N(0:%(K_NSAP_MAX_OCTETS-1)) CALIGNED UBIN(%(9-1*BITBIN(MODE_FEP))) %INIT(ADDRESS)%ENIT,
  197           %(LVL+1) %CHARTEXT('ADDRESS') REDEF ADDRESS_N CHAR(%(K_NSAP_MAX_OCTETS)) CALIGNED LAST
  198      %ENDIF;
  199      %MEND;
  200
  201
  202
  203
  204      /*F* NAME: K$SNPA
  205      This structure is used to define the SubNetwork Point of Attachment
  206      (SNPA) of the distant end.  This is usually the X.121 address.
  207      */
  208
  209      %MACRO K$SNPA (FPTN=K$SNPA,
  210                          STCLASS="BASED",
  211                          LVL=1,
  212                          LEN=0,
  213                          LAST=";");
  214
  215       %LSET LISTDIR='0'B;
  216       %LSET LISTEXP='1'B;
  217       %LSET LISTCOM='0'B;
  218       %LSET LISTSUB='1'B;
  219       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  220       %IF (SUBSTR(STR,0,6)='STATIC') OR
  221       (SUBSTR(STR,0,5)='CONST') OR
  222       (SUBSTR(STR,0,3)='EXT');
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        7    
  223       %LSET INIT=CHARTEXT('INIT');
  224       %LSET ENIT=CHARTEXT('');
  225       %ELSE;
  226       %LSET INIT=CHARTEXT('/*');
  227       %LSET ENIT=CHARTEXT('*/');
  228       %ENDIF;
  229      %IF LVL=1;
  230
  231      DCL 1 FPTN STCLASS ALIGNED,
  232      %ELSE;
  233           %(LVL) FPTN CALIGNED,
  234      %ENDIF;
  235
  236        %(LVL+1) %CHARTEXT('LEN') UBIN BYTE CALIGNED %INIT(LEN)%ENIT,
  237                          /*K* LEN - UBIN BYTE.
  238                          Contains the number of digits (nibbles)
  239                          in the ADDRESS.
  240                          */
  241        %(LVL+1) ADDRESS CHAR(7) UNAL %INIT(BITASC('0'B))%ENIT LAST
  242                          /*K* ADDRESS - CHAR(7).
  243                          Contains the network address.
  244                          */
  245      %MEND;
  246
  247
  248
  249
  250      /*F* NAME: K_AFI_equs
  251
  252      AFI- Authority and Format Identifier (from ISO document 8348-DAD2).
  253
  254      AFIs are all coded using the preferred binary format.   Other formats
  255      include decimal, character (ISO 646) and National Character.
  256      Unless specified in the AFI name all encodings are BCD.
  257
  258      The EQUs are of the form:   K_AFI_(BIN|DEC)_[SIG_]idiformat
  259      }   where
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        8    
  260      }    DEC indicates decmial encoding of DISP1
  261      }    BIN indicates binary encoding of the DSP.
  262      }    SIG indicates leading 0s are significant.
  263      }    idiformat indicates ????
  264      */
  265      %EQU K_AFI_BIN_LOCAL = %BITBIN('49'X); /* local                               */
  266      %EQU K_AFI_DEC_LOCAL = %BITBIN('48'X); /* local decimal dsp                   */
  267
  268      %EQU K_AFI_BIN_ISO6523_ICD = %BITBIN('47'X); /* ISO 6523-ICD                  */
  269      %EQU K_AFI_DEC_ISO6523_ICD = %BITBIN('46'X); /* ISO 6523-ICD decimal dsp      */
  270
  271      %EQU K_AFI_BIN_E164 = %BITBIN('45'X); /* E.164                                */
  272      %EQU K_AFI_DEC_E164 = %BITBIN('44'X); /* E.164 decimal dsp                    */
  273      %EQU K_AFI_BIN_SIG_E164 = %BITBIN('59'X); /* E.164 decimal dsp                */
  274      %EQU K_AFI_DEC_SIG_E164 = %BITBIN('58'X); /* E.164 decimal dsp                */
  275
  276      %EQU K_AFI_BIN_E163 = %BITBIN('43'X); /* E.163                                */
  277      %EQU K_AFI_DEC_E163 = %BITBIN('42'X); /* E.163 decimal dsp                    */
  278      %EQU K_AFI_BIN_SIG_E163 = %BITBIN('57'X); /* E.163 decimal dsp                */
  279      %EQU K_AFI_DEC_SIG_E163 = %BITBIN('56'X); /* E.163 decimal dsp                */
  280
  281      %EQU K_AFI_BIN_F69 = %BITBIN('41'X); /* E.69                                  */
  282      %EQU K_AFI_DEC_F69 = %BITBIN('40'X); /* E.69 decimal dsp                      */
  283      %EQU K_AFI_BIN_SIG_F69     = %BITBIN('55'X);
  284      %EQU K_AFI_DEC_SIG_F69     = %BITBIN('54'X);
  285
  286      %EQU K_AFI_BIN_ISODCC = %BITBIN('39'X); /* ISO DCC                            */
  287      %EQU K_AFI_DEC_ISODCC = %BITBIN('38'X); /* ISO DCC decimal                    */
  288
  289      %EQU K_AFI_BIN_X121 = %BITBIN('37'X); /* X.121 DTE dsp binary format          */
  290      %EQU K_AFI_DEC_X121 = %BITBIN('36'X); /* X.121 DTE dsp decimal format         */
  291      %EQU K_AFI_BIN_SIG_X121    = %BITBIN('53'X);
  292      %EQU K_AFI_DEC_SIG_X121    = %BITBIN('52'X);
  293      %EQU K_AFI_X121 = '37'X; /* remove this once you fix the macro                */
  294      %EQU K_AFI_LOCAL = '49'X; /* ditto                                            */
  295
  296      /*
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        9    
  297      TYPE equs - used when the AFI = X'49'.  Allows for multiple local address
  298      structures.  Currently only feps and the lacs board are defined.
  299      */
  300      %EQU K_TYPE_FEP = 1; /* address is for an fep                                 */
  301      %EQU K_TYPE_LACS = 2; /* LAN address                                          */
  302
  303
  304      %EQU K_X121_IDPLEN = 8; /* length in bytes of the idp for x121                */
  305      %EQU K_X121_DSPLEN = 9; /* length in bytes of the idp for x121                */
  306      %EQU K_NSAP_MAX_OCTETS = 20; /* max number of octets that a nsap can be       */
  307
  308      /*
  309      IDP lengths(in number of digits) of the different AFIs, as defined in ISO 8348-ADD2.
  310      The value includes the 2 digit AFI, but no length field.
  311      */
  312      %EQU K_IDPLEN_LOCAL = 2;
  313      %EQU K_IDPLEN_ISODCC = 5;
  314      %EQU K_IDPLEN_ISO6523_ICD = 6;
  315      %EQU K_IDPLEN_F69 = 10;
  316      %EQU K_IDPLEN_E163 = 14;
  317      %EQU K_IDPLEN_X121 = 16;
  318      %EQU K_IDPLEN_E164 = 17;
  319
  320      /*
  321      Equs for type of network service access points and type of network.
  322      These are here for lack of a better "common" place.
  323      */
  324
  325      /*F* NAME: K_TYPE_equ
  326
  327      K_TYPE_equs are used with KNN$OSIROUTE.TYPE and KL_UPDOSI.TYPE.
  328      */
  329      /*K* VALUES -
  330      The values for NSAP type are defined in file K_ADDRESS_M.
  331      Currently there are only two defined:
  332      .fif
  333         K_TYPE_LNSAP  1
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        10   
  334         K_TYPE_RNSAP  2
  335      .fin
  336      */
  337      %EQU K_TYPE_LNSAP = 1;
  338      %EQU K_TYPE_RNSAP = 2;
  339
  340
  341
  342      /*F* NAME: K_NWTYPE_equ
  343
  344      K_TYPE_equs are used with KNN$OSIROUTE.NW_TYPE and KL_UPDOSI.NW_TYPE.
  345      */
  346      /*K* VALUES -
  347      The values for network type are defined in file K_ADDRESS_M.
  348      Currently there are only two defined:
  349      .fif
  350         K_NWTYPE_X2580    1
  351         K_NWTYPE_X2584    2
  352         K_NWTYPE_ISO8348  3
  353      .fin
  354      */
  355
  356      %EQU K_NWTYPE_X2580 = 1;
  357      %EQU K_NWTYPE_X2584 = 2;
  358      %EQU K_NWTYPE_ISO8348 = 3;
  359
  360
  361
  362
  363      /*F* NAME: K$ADDRESS
  364
  365      The K$ADDRESS macro is used by the OSI Session Library.  See
  366      file XSS_SESSION_M.
  367      */
  368      %MACRO K$ADDRESS( NAME=K$ADDRESS, STCLASS=BASED, LVL=1, LAST=";",
  369                        TSAP=,
  370                        NSAP=);
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        11   
  371      %LSET L6 = BITBIN( MODE_FEP);
  372      %LSET LISTDIR = '0'B;
  373      %LSET LISTEXP = '0'B;
  374      %LSET LISTSUB = '0'B;
  375      %LSET LISTMAC = '0'B;
  376      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  377      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  378          %LSET INIT = CHARTEXT( ' INIT');
  379          %LSET ENIT = CHARTEXT( ' ');
  380      %ELSE;
  381          %LSET INIT = CHARTEXT( '/*');
  382          %LSET ENIT = CHARTEXT( '*/');
  383      %ENDIF;
  384      %IF LENGTHC( 'NAME') = 0;
  385          %LSET LVL = LVL - 1;
  386      %ELSE;
  387          %IF LVL = 1;
  388      DCL 1 NAME STCLASS ALIGNED,
  389          %ELSE;
  390              %LVL NAME CALIGNED,
  391          %ENDIF;
  392      %ENDIF;
  393      %LSET LVL1 = LVL + 1;
  394      %LSET LVL2 = LVL1 + 1;
  395      %LSET TT = CHARTEXT( 'TSAP');
  396      %LSET NN = CHARTEXT( 'NSAP');
  397      %LSET T = TEXTCHAR(TSAP);
  398      %LSET N = TEXTCHAR(NSAP);
  399      %IF LENGTHC( T) > 0;
  400          %LSET XTSAP = TSAP;
  401          %LSET TLEN = LENGTHC( XTSAP);
  402      %ELSE;
  403          %LSET XTSAP = ' ';
  404          %LSET TLEN = 0;
  405      %ENDIF;
  406      %LSET NLEN = 0;
  407      %LSET XADDR = CHARTEXT( '0*20'); /* will be a list of ubin byte values        */
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        12   
  408      %IF LENGTHC( N) > 0;
  409          %IF '''' = SUBSTR( N, 0, 1);
  410              %LSET R = SUBSTR( N, LENGTHC( N) - 1, 1); /* radix char               */
  411              %LSET ADDR = SUBSTR( N, 1, LENGTHC( N) - 3); /* value chars           */
  412              %LSET XADDR = '';
  413              %IF R = 'O';
  414                %K$ADDRMUNGE( W=3, R=R);
  415              %ELSEIF R = 'B';
  416                  %LSET W = CHARTEXT( BINCHAR( 9 - L6));
  417              %K$ADDRMUNGE( W=%W, R=R);
  418              %ELSEIF R = 'X';
  419              %K$ADDRMUNGE( W=2, R=R);
  420              %ELSE;
  421                  %ERROR( '1'B, 'NSAP format not one of O, B, or X');
  422              %ENDIF;
  423              %IF LENGTHC( %XADDR) > 0;
  424                  %LSET NLEN = NLEN + 1;
  425                  %LSET XADDR = CHARTEXT( %XADDR);
  426              %ELSE;
  427                  %LSET XADDR = CHARTEXT( '0*20');
  428              %ENDIF;
  429          %ELSE;
  430              %ERROR( '1'B, 'NSAP must be given in ''ooo''O, ''bbb''B, or ''xxx''X format');
  431          %ENDIF;
  432      %ENDIF;
  433
  434              %K$TSAP( NAME=%TT, STCLASS=STCLASS, LVL=%LVL1, LAST=",",
  435              LEN=%TLEN, TTSAP=%XTSAP);
  436              %K$NSAP( FPTN=%NN, STCLASS=STCLASS, LVL=%LVL1, LAST=LAST,
  437              ADRTYP=NET, AFI="BITBIN( '37'X)", LEN=%NLEN, ADDRESS=%XADDR);
  438      %MEND;
  439
  440
  441
  442
  443      /*F* NAME: K$ADDRMUNGE
  444
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        13   
  445      The K$ADDRMUNGE macro is used internally by
  446      the K$ADDRESS macro.
  447      */
  448      %MACRO K$ADDRMUNGE( W=, R=);
  449      %LSET LISTEXP = '0'B;
  450      %LSET LISTMAC = '0'B;
  451      %LSET LISTSUB = '0'B;
  452      %LSET LISTDIR = '0'B;
  453      %LSET L6 = BITBIN( MODE_FEP);
  454      %IF LENGTHC( %ADDR) > 0;
  455          %LSET XX = SUBSTR( %ADDR, 0, W);
  456          %LSET COMMA = ',';
  457          %IF LENGTHC( %ADDR) <= W;
  458              %LSET COMMA = '';
  459          %ENDIF;
  460          %SET XADDR = CONCAT( %XADDR, 'BITBIN(', '''', %XX, '''', %R, ')', %COMMA);
  461          %SET NLEN = NLEN + 1;
  462          %LSET ADDR = SUBSTR( %ADDR, W);
  463              %K$ADDRMUNGE( W=W, R=R);
  464      %ENDIF;
  465      %MEND;
  466
  467
  468
  469
  470
  471
  472      /*F* NAME: K$MAC
  473
  474      This macro is never used???
  475      */
  476
  477      %MACRO K$MAC (NAME=K$MAC,STCLASS=BASED,LVL=1,LAST=";",
  478                      ADD="' '",LSAP="' '") ;
  479       %LSET LISTDIR='0'B;
  480       %LSET LISTEXP='1'B;
  481       %LSET LISTCOM='0'B;
15:02 JUL 28 '97 K_ADDRESS_M.:E05SI                                        14   
  482       %LSET LISTSUB='1'B;
  483       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  484       %IF (SUBSTR(STR,0,6)='STATIC') OR
  485       (SUBSTR(STR,0,5)='CONST') OR
  486       (SUBSTR(STR,0,3)='EXT');
  487       %LSET INIT=CHARTEXT(' INIT');
  488       %LSET ENIT=CHARTEXT(' ');
  489       %ELSE;
  490       %LSET INIT=CHARTEXT('/*');
  491       %LSET ENIT=CHARTEXT('*/');
  492       %ENDIF;
  493      %IF LVL=1 ;
  494      DCL 1 NAME STCLASS ALIGNED,
  495      %ELSE;
  496             %(LVL) NAME CALIGNED,
  497      %ENDIF;
  498                %(LVL+1) %CHARTEXT('ADD') CHAR(6) CALIGNED %INIT(ADD)%ENIT,
  499                %(LVL+1) %CHARTEXT('LSAP') CHAR(1) CALIGNED %INIT(LSAP)%ENIT LAST
  500      %MEND;
  501
  502

