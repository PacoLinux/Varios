

14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          1    
    1      /*M* KV$GLBCTX VDH Global context */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      %EJECT;

14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          2    
    9
   10      /*F* NAME: KV$ERD - Shared Profile-dependent Context
   11
   12      KV$ERD contains many of the items defined in terminal profiles.
   13      For additional explanation of many of these options, see the CP-6
   14      System Support Reference manual in the discussion of SUPER and
   15      Profiles. */
   16
   17
   18      %MACRO KV$ERD(NAME = KV$ERD, LAST = ";", STCLASS = BASED);
   19      %LSET LISTDIR = '0'B;
   20      %LSET LISTEXP = '1'B;
   21      %LSET LISTCOM = '0'B;
   22      %LSET LISTSUB = '1'B;
   23      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
   24      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
   25      %IF STC = 1;
   26      %LSET INIT = CHARTEXT('INIT');
   27      %LSET ENIT = CHARTEXT('');
   28      %ELSE;
   29      %LSET INIT = CHARTEXT('/*');
   30      %LSET ENIT = CHARTEXT('*/');
   31      %ENDIF;
   32      %LSET FEP = BITBIN(MODE_FEP);
   33      %LSET KV_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
   34      %LSET KV_FILBIT = CONCAT(' 2 * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
   35      %LSET KV_FILBIT = CHARTEXT(SUBSTR(KV_FILBIT, FEP*LENGTHC(KV_FILBIT)));
   36      %KV$SHRBFR (NAME = NAME, STCLASS = STCLASS, LAST = ",");
   37
   38      /*K* TMNALG_AFTCR - UBIN BYTE.
   39      Contains the timing algorithm:  After CR.*/
   40
   41            2 TMNALG_AFTCR UBIN BYTE CALIGNED %INIT(0)%ENIT,
   42
   43      /*K* TMNALG_BFRCR - UBIN BYTE.
   44      Contains the timing algorithm:  Before CR. */
   45
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          3    
   46            2 TMNALG_BFRCR UBIN BYTE CALIGNED %INIT(0)%ENIT,
   47
   48      /*K* TMNALG_AFTLF - UBIN BYTE.
   49      Contains the timing algorithm:  After LF. */
   50
   51            2 TMNALG_AFTLF UBIN BYTE CALIGNED %INIT(0)%ENIT,
   52
   53      /*K* TMNALG_BFRLF - UBIN BYTE.
   54      Contains the timing algorithm:  Before LF. */
   55
   56            2 TMNALG_BFRLF UBIN BYTE CALIGNED %INIT(0)%ENIT,
   57
   58      /*K* TMNALG_AFTHT - UBIN BYTE.
   59      Contains the timing algorithm:  After HT. */
   60
   61            2 TMNALG_AFTHT UBIN BYTE CALIGNED %INIT(0)%ENIT,
   62
   63      /*K* TMNALG_AFTCUP - UBIN BYTE.
   64      Contains the timing algorithm:  After cursor position. */
   65
   66            2 TMNALG_AFTCUP UBIN BYTE CALIGNED %INIT(0)%ENIT,
   67
   68      /*K* TMNALG_AFTHPA - UBIN BYTE.
   69      Contains the timing algorithm:  After Horizontal Position Absolute. */
   70
   71            2 TMNALG_AFTHPA UBIN BYTE CALIGNED %INIT(0)%ENIT,
   72
   73      /*K* TMNALG_FILCHR - CHAR(1).
   74      Contains the timing algorithm:  Fill character (USU DEL). */
   75
   76            2 TMNALG_FILCHR CHAR(1) %INIT(BINASC(0))%ENIT,
   77
   78      /*K* CTRFNCTIM - UBIN WORD.
   79      Contains the time after a control function. */
   80
   81            2 CTRFNCTIM UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
   82
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          4    
   83      /*K* BS_TIM - UBIN WORD.
   84      Contains the time after a backspace. */
   85
   86            2 BS_TIM UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
   87
   88      /*K* ERSTIM - UBIN WORD.
   89      Contains the time after a screen erase. */
   90
   91            2 ERSTIM UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
   92
   93      /*K* TRMALG_PRM1 - SBIN WORD.
   94      Contains the timing algorithm parameter 1.*/
   95
   96            2 TMNALG_PRM1 SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
   97
   98      /*K* TRMALG_PRM2 - SBIN WORD.
   99      Contains the timing algorithm parameter 2. */
  100
  101            2 TMNALG_PRM2 SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
  102
  103      /*K* TRMALG_PRM3 - SBIN WORD.
  104      Contains the timing algorithm parameter 3. */
  105
  106            2 TMNALG_PRM3 SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
  107
  108      /*K* TRMALG_PRM4 - SBIN WORD.
  109      Contains the timing algorithm parameter 4. */
  110
  111            2 TMNALG_PRM4 SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
  112
  113      /*K* TRMALG_PRM5 - SBIN WORD.
  114      Contains the timing algorithm parameter 5. */
  115
  116            2 TMNALG_PRM5 SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
  117
  118      /*K* TRMALG_PRM6 - SBIN WORD.
  119      Contains the timing algorithm parameter 6. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          5    
  120
  121            2 TMNALG_PRM6 SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
  122
  123      /*K* TRMALG_PRM7 - SBIN WORD.
  124      Contains the timing algorithm parameter 7. */
  125
  126            2 TMNALG_PRM7 SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
  127
  128      /*K* TRMALG_PRM8 - SBIN WORD.
  129      Contains the timing algorithm parameter 8. */
  130
  131            2 TMNALG_PRM8 SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
  132
  133
  134      /*K* DVCOTPBFRSIZ - UBIN WORD.
  135      Contains the output buffer size (of the output buffer in the device).*/
  136
  137            2 DVCOTPBFRSIZ UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
  138
  139            2 * UBIN BYTE CALIGNED %INIT(0)%ENIT,
  140
  141      /*K* HPA_ALG - UBIN BYTE.
  142      Horizontal Position Absolute Algorithm.  HPA_ALG contains the
  143      algorithm number. */
  144
  145            2 HPA_ALG UBIN BYTE CALIGNED %INIT(0)%ENIT,
  146
  147      /*K* CUP_ALG - UBIN BYTE.
  148      Cursor Position Algorithm.  CUP_ALG contains the algorithm number. */
  149
  150            2 CUP_ALG UBIN BYTE CALIGNED %INIT(0)%ENIT,
  151
  152      /*K* CUP_BIS - UBIN BYTE.
  153      Contains the cursor position bias. */
  154
  155            2 CUP_BIS UBIN BYTE CALIGNED %INIT(0)%ENIT,
  156      %KV_FILBIT
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          6    
  157
  158      /*K* CUP_CLMFRS - BIT(1).
  159      If set, means that in the cursor position (CUP_ALG) the column is
  160      sent first, followed by the row.   */
  161
  162            2 CUP_CLMFRS BIT(1) UNAL %INIT('0'B)%ENIT,
  163
  164      /*K* CUP_CMP - BIT(1).
  165      If set, means to subtract the
  166      column and row values from CUP_BIS instead of adding them.  */
  167
  168            2 CUP_CMP BIT(1) UNAL %INIT('0'B)%ENIT,
  169
  170      /*K* ICHRQRDCH - BIT(1).
  171      If set, means there is no bit-bucket for character-insertion. */
  172
  173            2 ICHRQRDCH BIT(1) %INIT('0'B)%ENIT,
  174
  175      /*K* ILNRQRDLN - BIT(1).
  176      If set, means there is no bit-bucket for line-insertion. */
  177
  178            2 ILNRQRDLN BIT(1) %INIT('0'B)%ENIT,
  179
  180      /*K* SGRINCDAQ - BIT(1).
  181      If set, means that the SRB algorithm specified takes the DAQ algorithm
  182      into account. */
  183
  184            2 SGRINCDAQ BIT(1) UNAL %INIT('0'B)%ENIT,
  185
  186      /*K* DFLMODPRT - BIT(1).
  187      If set, the default protect mode is protected. */
  188
  189            2 DFLMODPRT BIT(1) UNAL %INIT('0'B)%ENIT,
  190
  191      /*K* FRSCLMFLD - BIT(1).
  192      First column always has a field.  If FRSCLMFLD is set, an attempt to
  193      delete a field in column 1 will probably cause a device error.  Also,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          7    
  194      KV$MRD.MAXATRPERLIN includes this field.  */
  195
  196            2 FRSCLMFLD BIT(1) %INIT('0'B)%ENIT,
  197
  198      /*K* SPCDLTFLD - BIT(1).
  199      If set, means erasing with blanks removes field definitions. */
  200
  201            2 SPCDLTFLD BIT(1) %INIT('0'B)%ENIT,
  202      %KV_FILBIT
  203            2 * BIT(4) UNAL %INIT('0'B)%ENIT,
  204
  205      /*K* RGNSCR - BIT(1).
  206      If set, means a single full-width scrolling region can be adjusted according
  207      to the DEC VT100 algorithm:  ESC [ topline; bottomline r.  For example,
  208      ESC^[^1;^23^r would make the region cover lines 1 through 23.  */
  209
  210            2 RGNSCR BIT(1) %INIT('0'B)%ENIT,
  211
  212      /*K* EL0DLTFLD - BIT(1).
  213      If set, means erasing with EL0_CHR removes field definitions. */
  214
  215            2 EL0DLTFLD BIT(1) %INIT('0'B)%ENIT,
  216
  217      /*K* ED0DLTFLD - BIT(1).
  218      If set, means erasing with ED0_CHR removes field definitions. */
  219
  220            2 ED0DLTFLD BIT(1) %INIT('0'B)%ENIT,
  221
  222      /*K* ED2DLTFLD - BIT(1).
  223      If set, means erasing with ED2_CHR removes field definitions. */
  224
  225            2 ED2DLTFLD BIT(1) %INIT('0'B)%ENIT,
  226
  227      /*K* SGR_ALG - UBIN BYTE.
  228      Contains the number of the algorithm used to select graphic rendition
  229      (visual attributes) for this device. */
  230
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          8    
  231            2 SGR_ALG UBIN BYTE CALIGNED %INIT(0)%ENIT,
  232
  233      /*K* DAQ_ALG - UBIN BYTE.
  234      Contains the number of the algorithm used to declare AREAD qualification
  235      (logical attributes) for this device. */
  236
  237            2 DAQ_ALG UBIN BYTE CALIGNED %INIT(0)%ENIT,
  238
  239      /*K* DCLFLD_ALG - UBIN BYTE.
  240      Contains the number of the algorithm used to declare fields on this
  241      device. */
  242
  243            2 DCLFLD_ALG UBIN BYTE CALIGNED %INIT(0)%ENIT,
  244
  245      /*K* SGRHDN_CHR - CHAR(1).
  246      Contains the character which follows the optional SGRINTRO_CHR and
  247      causes the characters in this field to be hidden. */
  248
  249            2 SGRHDN_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  250
  251      /*K* SGRINCINT_CHR - CHAR(1).
  252      Contains the character which follows the optional SGRINTRO_CHR and
  253      causes the characters in this field to be displayed at increased
  254      intensity. */
  255
  256            2 SGRINCINT_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  257
  258      /*K* SGRDCRINT_CHR - CHAR(1).
  259      Contains the character which follows the optional SGRINTRO_CHR and
  260      causes the characters in this field to be displayed at a decreased
  261      intensity. */
  262
  263            2 SGRDCRINT_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  264
  265      /*K* SGRUNDSCR_CHR - CHAR(1)
  266      Contains the character which follows the optional SGRINTRO_CHR and
  267      causes the characters in this field to be underscored. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          9    
  268
  269            2 SGRUNDSCR_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  270
  271      /*K* SGRSLWBLN_CHR - CHAR(1).
  272      Contains the character which follows the optional SGRINTRO_CHR and
  273      causes the characters in this field to blink slowly. */
  274
  275            2 SGRSLWBLN_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  276
  277      /*K* SGRFSTBLN_CHR - CHAR(1).
  278      Contains the character which follows the optional SGRINTRO_CHR and
  279      causes the characters in this field to blink quickly. */
  280
  281            2 SGRFSTBLN_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  282
  283      /*K* SGRRVRVID_CHR - CHAR(1).
  284      Contains the character which follows the optional SGRINTRO_CHR and
  285      causes the characters in this field to be reverse video. */
  286
  287            2 SGRRVRVID_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  288
  289      /*K* SGRPRT_CHR - CHAR(1).
  290      Contains the character which follows the optional SGRINTRO_CHR and
  291      causes the characters in this field to be protected. */
  292
  293            2 SGRPRT_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  294
  295      /*K* SGRINP_CHR - CHAR(1).
  296      Contains the character which follows the optional SGRINTRO_CHR and
  297      causes this field to be input (unprotected). */
  298
  299            2 SGRINP_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  300
  301      /*K* SGRPRTGRD_CHR - CHAR(1).
  302      Contains the character which follows the optional SGRINTRO_CHR and
  303      causes the characters in this field to be protected and guarded. */
  304
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          10   
  305            2 SGRPRTGRD_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  306
  307      /*K* DAQPRT_CHR - CHAR(1).
  308      Contains the character which follows the optional DAQINTRO_CHR and
  309      causes the characters in this field to be protected. */
  310
  311            2 DAQPRT_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  312
  313      /*K* DAQINP_CHR - CHAR(1).
  314      Contains the character which follows the optional DAQINTRO_CHR and
  315      causes this field to be input (unprotected). */
  316
  317            2 DAQINP_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  318
  319      /*K* DAQPRTGRD_CHR - CHAR(1).
  320      Contains the character which follows the optional DAQINTRO_CHR and
  321      causes the characters in this field to be protected and guarded. */
  322
  323            2 DAQPRTGRD_CHR CHAR(1) %INIT(BINASC(0))%ENIT,
  324
  325      /*K* ICH_CHR - UBIN BYTE.
  326      Contains the ICH (Insert Character) fixed characters. */
  327
  328            2 ICH_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  329
  330      /*K* DCH_CHR - UBIN BYTE.
  331      Contains the DCH (Delete Character) fixed characters. */
  332
  333            2 DCH_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  334
  335      /*K* RSTINSMOD_CHR - UBIN BYTE.
  336      Contains the Reset Insert Mode fixed characters. */
  337
  338            2 RSTINSMOD_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  339
  340      /*K* CUP_CHR - UBIN BYTE.
  341      Contains the CUP (Cursor Position) fixed characters. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          11   
  342
  343            2 CUP_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  344
  345      /*K* ED0_CHR - UBIN BYTE.
  346      Contains the ED (Erase Display) fixed characters. */
  347
  348            2 ED0_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  349
  350      /*K* EL0_CHR - UBIN BYTE.
  351      Contains the EL (Erase Line) fixed characters. */
  352
  353            2 EL0_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  354
  355      /*K* CUB_CHR - UBIN BYTE.
  356      Contains the CUB (Cursor Back) fixed characters. */
  357
  358            2 CUB_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  359
  360      /*K* CUF_CHR - UBIN BYTE.
  361      Contains the CUF (Cursor Forward) fixed characters. */
  362
  363            2 CUF_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  364
  365      /*K* CUU_CHR - UBIN BYTE.
  366      Contains the CUU (Cursor Up) fixed characters. */
  367
  368            2 CUU_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  369
  370      /*K* CUD_CHR - UBIN BYTE.
  371      Contains the CUD (Cursor Down) fixed characters. */
  372
  373            2 CUD_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  374
  375      /*K* ED2_CHR - UBIN BYTE.
  376      Contains the Erase (screen) fixed characters. */
  377
  378            2 ED2_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          12   
  379
  380      /*K* HOM_CHR - UBIN BYTE.
  381      Contains the Home fixed characters. */
  382
  383            2 HOM_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  384
  385      /*K* HTS_CHR - UBIN BYTE.
  386      Contains the Horizontal Tab Set fixed characters. */
  387
  388            2 HTS_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  389
  390      /*K* TCB3_CHR - UBIN BYTE.
  391      Contains the Tab Clear fixed characters. */
  392
  393            2 TBC3_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  394
  395      /*K* SETFRMLNG_CHR - UBIN BYTE.
  396      Contains the Set Page Length fixed characters. */
  397
  398            2 SETFRMLNG_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  399
  400      /*K* FRMFED_CHR - UBIN BYTE.
  401      Contains the Top Page fixed characters. */
  402
  403            2 FRMFED_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  404
  405      /*K* SGRINTRO_CHR - UBIN BYTE.
  406      Contains the character string which introduces a Set Graphics
  407      Rendition (SGR) sequence. */
  408
  409            2 SGRINTRO_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  410
  411      /*K* DAQINTRO_CHR - UBIN BYTE.
  412      Contains the character string which introduces a Define Area
  413      Qualification (DAQ) sequence. */
  414
  415            2 DAQINTRO_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          13   
  416
  417      /*K* DCLFRM_CHR - UBIN BYTE.
  418      Contains the character string which places the device into a 'FORMS
  419      BUILD' mode. */
  420
  421            2 DCLFRM_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  422
  423      /*K* ENDDCLFRM_CHR - UBIN BYTE.
  424      Contains the character string which takes the device out of 'FORMS
  425      BUILD' mode. */
  426
  427            2 ENDDCLFRM_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  428
  429      /*K* RESTORE_DFLTSCRN_CHR - UBIN BYTE.
  430      Contains the character string which restores the screen
  431      to its default mode after an attribute has
  432      been declared in a previous position. */
  433
  434            2 RESTORE_DFLTSCRN_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  435
  436      /*K* DLTALLFLDS_CHR - UBIN BYTE.
  437      Contains the character string which will erase and delete all
  438      fields on this device. */
  439
  440            2 DLTALLFLDS_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  441
  442      /*K* ILN_CHR - UBIN BYTE.
  443      Contains the character string which inserts a line, pushing the rest down. */
  444
  445            2 ILN_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  446
  447      /*K* DLN_CHR - UBIN BYTE.
  448      Contains the character string which deletes a line, scrolling the rest up. */
  449            2 DLN_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  450
  451      /*K* ERASEFLD_CHR - UBIN BYTE.
  452      Contains the character string which will erase the current field. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          14   
  453
  454            2 ERASEFLD_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  455
  456      /*K* MSGLIN_CHR - UBIN BYTE.
  457      Contains the character string to send before WRT_IMD messages. */
  458
  459            2 MSGLIN_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  460
  461      /*K* ENDMSGLIN_CHR - UBIN BYTE.
  462      Contains the character string to send after WRTIMD messages. */
  463
  464            2 ENDMSGLIN_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  465
  466      /*K* DLTFLD_CHR - UBIN BYTE.
  467      Contains the character string which will delete the current field. */
  468
  469            2 DLTFLD_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  470
  471      /*K* EXTSRD_CHR - UBIN BYTE.
  472      Contains the character string to send to the device when exiting an SRD. */
  473
  474            2 EXTSRD_CHR UBIN BYTE CALIGNED %INIT(0)%ENIT,
  475
  476      /*K* TXT.
  477      Is a text area containing packed TEXTCs whose offsets into KV$ERD.TXT are
  478      contained in ERD.function_CHR. The first character is not used (0 = none)
  479      and is in fact a redefinition of the last xxx_CHR. */
  480
  481            2 TXT REDEF EXTSRD_CHR CHAR(1),
  482
  483      /*K* CNT.
  484      Is a redefinition of EXTSRD_CHR. */
  485
  486            2 CNT(0:0) REDEF EXTSRD_CHR UBIN BYTE CALIGNED LAST
  487      %IF TEXTCHAR(STCLASS) = 'BASED' AND TEXTCHAR(NAME) = 'KV$ERD';
  488      %EQU KV_ERD = CHARTEXT('KV$PTR.MRD$->KV$MRD.ERD$->KV$ERD');
  489      %ENDIF;
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          15   
  490      %MEND;
  491      %EJECT;

14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          16   
  492      /*F* NAME: KV$MRD - VDH Master Real Device Context Block
  493
  494      KV$MRD contains the master real device context block definition. */
  495
  496
  497      %MACRO KV$MRD(NAME = KV$MRD, LAST = ";", STCLASS = BASED);
  498      %LSET LISTDIR = '0'B;
  499      %LSET LISTEXP = '1'B;
  500      %LSET LISTCOM = '0'B;
  501      %LSET LISTSUB = '1'B;
  502      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  503      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
  504      %IF STC = 1;
  505      %LSET INIT = CHARTEXT(' INIT');
  506      %LSET ENIT = CHARTEXT('');
  507      %ELSE;
  508      %LSET INIT = CHARTEXT('/*');
  509      %LSET ENIT = CHARTEXT('*/');
  510      %ENDIF;
  511      %IF TEXTCHAR(STCLASS) = 'BASED' AND TEXTCHAR(NAME) = 'KV$MRD';
  512      %EQU KV_MRD = CHARTEXT('KV$PTR.MRD$->KV$MRD');
  513      %ENDIF;
  514      %LSET FEP = BITBIN(MODE_FEP);
  515      %LSET KV_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
  516      %LSET KV_FILBIT = CONCAT(' 2 * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
  517      %LSET KV_FILBIT = CHARTEXT(SUBSTR(KV_FILBIT, FEP*LENGTHC(KV_FILBIT)));
  518      DCL 1 NAME STCLASS %KV_DBLBYTALG,
  519
  520      /*K* LNK$ - PTR.
  521      Is the link to next KV$MRD in the chain. */
  522
  523            2 LNK$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
  524
  525      /*K* SRD$ - PTR.
  526      Points to the subordinate real device context block chain. */
  527
  528            2 SRD$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          17   
  529
  530      /*K* TRMTAB$ - PTR.
  531      Points to the device tab block. */
  532
  533            2 TRMTAB$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
  534
  535      /*K* PRFINPFNCTBL$ - PTR.
  536      Points to the input-function-table (KV$INPFNCTBL) for function-keys. */
  537
  538            2 PRFINPFNCTBL$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
  539
  540      /*K* ERD$ - PTR.
  541      KV$ERD pointer.  Points to the extended real device
  542      definition shared context. */
  543
  544            2 ERD$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
  545
  546      /*K* DSPHEIGHT - UBIN BYTE.
  547      Display height.  If non-zero, DSPHEIGHT contains the actual number
  548      of visible lines on the screen.  HEIGHT (MV$MRD.LNG)
  549      would then be the number of addressable lines (e.g. via
  550      CUP_ALG).  In one-window-scrolling mode, the window will occupy only
  551      the bottom DSPHEIGHT lines of the screen. */
  552
  553            2 DSPHEIGHT UBIN BYTE CALIGNED %INIT(24)%ENIT,
  554
  555      /*K* USRCNT - UBIN BYTE.
  556      User count.  USRCNT contains the number of other contexts that are using
  557      (have pointers pointing into) this context block.
  558      This is the number of KV$SRDs pointing into this KV$MRD. */
  559
  560            2 USRCNT UBIN BYTE CALIGNED %INIT(1)%ENIT,
  561
  562      /*K* WDT - UBIN WORD.
  563      Contains the width.  WDT corresponds to the SUPER profile option
  564      AWIDTH.
  565      */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          18   
  566
  567            2 WDT UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(80)%ENIT,
  568
  569      /*K* MINSP_FORPST - UBIN BYTE.
  570      Minimum spaces for position.  MINSP_FORPST contains the minimum number
  571      of spaces (on output) for VDH to call the VDH-user specifying
  572      'position' (KV$USR_PST).  Fewer than this number of spaces
  573      causes spaces to be buffered by VDH.
  574      Local unit record line printers and non-compressed RBTs
  575      would set this to a high value.  Compressed HASP and interactive
  576      devices would set this to a low value.  */
  577
  578            2 MINSP_FORPST UBIN BYTE CALIGNED %INIT(0)%ENIT,
  579      %KV_FILBIT
  580
  581      /*K* CALUSR_ERS - BIT(1).
  582      If set, means call the VDH-user for KV$USR_ERS functions, rather than
  583      using the VDH profile-driven erase routines. */
  584
  585            2 CALUSR_ERS BIT(1) %INIT('1'B)%ENIT,
  586
  587      /*K* CALUSR_PST - BIT(1).
  588      If set, means call the VDH-user for KV$USR_PST functions, rather than
  589      using the VDH profile-driven positioning routines. */
  590
  591            2 CALUSR_PST BIT(1) %INIT('1'B)%ENIT,
  592
  593      /*K* CALUSR_SETATR - BIT(1).
  594      If set, means call the VDH-user for KV$USR_SETATR functions, rather than
  595      using the VDH profile-driven set-attributes routines. */
  596
  597            2 CALUSR_SETATR BIT(1) %INIT('1'B)%ENIT,
  598            2 * BIT(5)%INIT('0'B)%ENIT,
  599
  600      /*K* MVD$ - PTR.
  601      Points to the head of the chain of KV$MVDs.  MVD$ is used for finding
  602      the FORM/SE ones. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          19   
  603
  604            2 MVD$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
  605
  606      /*K* PRFNAM - CHAR(12).
  607      Contains the profile name (in TEXTC format). */
  608
  609            2 PRFNAM CHAR(12) %INIT(%CONCAT(BINASC(4), 'NONE'))%ENIT,
  610
  611      /*K* LNG - UBIN BYTE.
  612      Length.  LNG contains the number of lines that may appear.  LNG
  613      corresponds to the SUPER option HEIGHT, or LENGTH if HEIGHT=0.  */
  614
  615            2 LNG UBIN BYTE CALIGNED %INIT(24)%ENIT,
  616
  617      /*K* DVCFLWCTRALG - UBIN BYTE.
  618      Device flow control algorithm.  Equate identifiers for DVCFLWCTRALG
  619      are listed in the following table.
  620      ..::TB "^\Identifier\#20\Meaning"
  621      .xeq G_LCP6_E DVCFLWCTRALG_E DC1DC3#
  622      .xeq G_LCP6_E DVCFLWCTRALG_E ENQACK#
  623      .xeq G_LCP6_E DVCFLWCTRALG_E ETXACK#
  624      .xeq G_LCP6_E DVCFLWCTRALG_E NONE#
  625      ..::TB
  626      */
  627
  628            2 DVCFLWCTRALG UBIN BYTE %INIT(0)%ENIT CALIGNED,
  629
  630      /*K* MAXATRPERLIN - UBIN BYTE.
  631      Contains the maximum number of fields per line.  MAXATRPERLIN is
  632      significant only for real devices
  633      that have a limit other than one based on screen size
  634      (e.g, VIP7801). */
  635
  636            2 MAXATRPERLIN UBIN BYTE %INIT(255)%ENIT CALIGNED,
  637      %KV_FILBIT
  638
  639      /*K* NO_FLDTRM - BIT(1).
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          20   
  640      No field termination.  If set, NO_FLDTRM specifies that fields are not terminated
  641      by end of line. */
  642
  643            2 NO_FLDTRM BIT(1) %INIT('0'B)%ENIT,
  644
  645      /*K* SMLHDNATR - BIT(1).
  646      Simulate the "hidden" attribute.  If SMLHDNATR is set, the device has no real hidden
  647      attribute, so VDH must send blanks to such fields instead of real
  648      characters. */
  649
  650            2 SMLHDNATR BIT(1) %INIT('0'B)%ENIT,
  651
  652      /*K* LOWERCASEPRINTS - BIT(1).
  653      If set, means the device is capable of lower case printing. */
  654
  655            2 LOWERCASEPRINTS BIT(1) %INIT('0'B)%ENIT,
  656
  657      /*K* INPUT - BIT(1).
  658      If set, means the device is capable of sending input (data from device to computer). */
  659
  660            2 INPUT BIT(1) %INIT('1'B)%ENIT,
  661
  662      /*K* OUTPUT - BIT(1).
  663      If set, means the device is capable of receiving output (data from computer to device). */
  664
  665            2 OUTPUT BIT(1) %INIT('1'B)%ENIT,
  666
  667      /*K* TRMTABSET - BIT(1).
  668      If set, means the device tabs have been set and are usable. */
  669
  670            2 TRMTABSET BIT(1) %INIT('0'B)%ENIT,
  671
  672      /*K* BLANKERASES - BIT(1).
  673      Destructive space.  If BLANKSERASES is set and a space is sent to the device, it is
  674      placed over an existing character, the existing character
  675      will be destroyed, and only the space will remain in that
  676      position. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          21   
  677
  678            2 BLANKERASES BIT(1) %INIT('0'B)%ENIT,
  679
  680      /*K* DEVICEBS - BIT(1).
  681      Device Backspaces.  If DEVICEBS is set and a backspace character is sent to the
  682      device, the cursor will move one column to the left (unless it is at
  683      column 1). */
  684
  685            2 DEVICEBS BIT(1) %INIT('1'B)%ENIT,
  686      %KV_FILBIT
  687
  688      /*K* DEVICECR - BIT(1).
  689      If set, means
  690      the device does a carriage return when sent a carriage return
  691      character.  The cursor goes to the left margin on the same line.  */
  692
  693            2 DEVICECR BIT(1) %INIT('1'B)%ENIT,
  694
  695      /*K* DEVICELF - BIT(1).
  696      If set, means
  697      the device does a line feed when sent a line feed character.
  698      The cursor goes to the next line down (upspace), and the column
  699      does not change. */
  700
  701            2 DEVICELF BIT(1) %INIT('1'B)%ENIT,
  702
  703      /*K* CRISNL - BIT(1).
  704      If set, means
  705      the device does a "new-line" when sent a carriage return character.
  706      The cursor goes to the next line down (upspace), and the column
  707      is set to the left margin. */
  708
  709            2 CRISNL BIT(1) %INIT('0'B)%ENIT,
  710
  711      /*K* AUTONL - BIT(1).
  712      If set, means the device does a "new-line" at the right margin.
  713      If the cursor is positioned in the
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          22   
  714      right margin column (usually column 80 or 132) and a character is
  715      sent to the device that causes the cursor to go one column to the right
  716      (graphics or space), the device will go to the left margin on the
  717      next line after printing (or spacing) the character. */
  718
  719            2 AUTONL BIT(1) %INIT('0'B)%ENIT,
  720
  721      /*K* OPDTAB - BIT(1).
  722      If set, means the device has operator-settable tab stops. */
  723
  724            2 OPDTAB BIT(1) %INIT('0'B)%ENIT,
  725
  726      /*K* PROGDTAB - BIT(1).
  727      If set, means the device has program-settable tab stops. */
  728
  729            2 PROGDTAB BIT(1) %INIT('0'B)%ENIT,
  730
  731      /*K* DEVSCROLL - BIT(1).
  732      If set, means the device scrolls (as opposed to being paged). */
  733
  734            2 DEVSCROLL BIT(1) %INIT('0'B)%ENIT,
  735
  736      /*K* LFISNL - BIT(1).
  737      If set, means the device does a new line when sent a line feed character.
  738      The cursor goes to the next line down (upspace), and the column
  739      is set to the left margin.  */
  740
  741            2 LFISNL BIT(1) %INIT('0'B)%ENIT,
  742      %KV_FILBIT
  743
  744      /*K* TRUOVRPRT - BIT(1).
  745      If set, means the device is capable of over-printing. */
  746
  747            2 TRUOVRPRT BIT(1) %INIT('0'B)%ENIT,
  748
  749      /*K* DEVPOSOPTS - BIT(1).
  750      If set, means the device does positioning optimization.  Contiguous
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          23   
  751      horizontal positioning requests are integrated by the device into a
  752      single internal destination.  For example, tab-to-column-10 followed by
  753      a backspace would cause the carriage to go directly to column 9,
  754      and not go through column 10 on the way (assuming it is in Catch-up Mode). */
  755
  756            2 DEVPOSOPTS BIT(1) %INIT('0'B)%ENIT,
  757
  758      /*K* HRZSCR - BIT(1).
  759      If set, means fast horizontal scrolling is possible
  760      (the INS/DLT-CHR functions exist). */
  761            2 HRZSCR BIT(1) UNAL %INIT('0'B)%ENIT,
  762
  763      /*K* PRINTTYPE - BIT(1).
  764      If set, means the device is capable of vertical positioning, e.g., it is not a
  765      card punch. */
  766
  767            2 PRINTTYPE BIT(1) %INIT('1'B)%ENIT,
  768
  769      /*K* TTYTYPE - BIT(1).
  770      The device is capable of displaying what was input (e.g., capable
  771      of echoplex, but echoplex is not necessarily turned on). */
  772
  773            2 TTYTYPE BIT(1) %INIT('1'B)%ENIT,
  774
  775      /*K* BIN - BIT(1).
  776      If set, means the device is capable of doing binary I/O. */
  777
  778            2 BIN BIT(1) %INIT('0'B)%ENIT,
  779
  780      /*K* CURSORUP - BIT(1).
  781      If set, means the device is capable of reverse vertical positioning (going back
  782      up the page). */
  783
  784            2 CURSORUP BIT(1) %INIT('0'B)%ENIT,
  785
  786      /*K* FSTERS - BIT(1).
  787      Fast erase.  If FSTERS is set, the device has a function to allow fast
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          24   
  788      erasure, for example, to erase to the end of the display. */
  789
  790            2 FSTERS BIT(1) %INIT('0'B)%ENIT,
  791      %KV_FILBIT
  792
  793      /*K* ATRRQRDSPPST - BIT(1).
  794      If set, means an attribute (declaration) requires a display position. */
  795
  796            2 ATRRQRDSPPST BIT(1) %INIT('0'B)%ENIT,
  797
  798      /*K* INPTABTRQFLD - BIT(1).
  799      If set, means input tabs require a field declaration (for each stop). */
  800
  801            2 INPTABRQRFLD BIT(1) %INIT('0'B)%ENIT,
  802
  803      /*K* TRN - BIT(1).
  804      Transparent.  If TRN is set, the device is in transparent mode.
  805      If requested, VDH will report to the VDH-user (via KV$USR_EVT)
  806      transitions to and from transparent mode. */
  807
  808            2 TRN BIT(1) %INIT('0'B)%ENIT,
  809
  810      /*K* BNR - BIT(1).
  811      If set, means the device is in binary mode.
  812      If requested, VDH will report to the VDH-user (via KV$USR_EVT)
  813      transitions to/from binary mode. */
  814
  815            2 BNR BIT(1) %INIT('0'B)%ENIT,
  816
  817      /*K* CTNFRM - BIT(1).
  818      Continuous form.  If CTNFRM is set, this device normally supports a presentation
  819      space composed of a continuous form, i.e., one page after another.
  820      Typical examples are line printers and hardcopy terminals.
  821      Devices such as CRT displays are not part of this group.
  822      This flag determines if a screen is erased
  823      at the end of a device, or if a top-of-page operation is performed
  824      instead. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          25   
  825
  826            2 CTNFRM BIT(1) %INIT('1'B)%ENIT,
  827
  828      /*K* PHSFRM - BIT(1).
  829      Physical form.  If PHSFRM is set, this device has real, fixed size
  830      pages.  This flag is set if HEIGHT is non-zero in the profile.  If
  831      PHSFRM is set, a platen length change
  832      will result only in a different number of data lines on each page,
  833      not a different page size. */
  834
  835            2 PHSFRM BIT(1) %INIT('0'B)%ENIT,
  836
  837      /*K* DCLATRWHNOTP - BIT(1).
  838      If set, means that this device requires a control sequence to
  839      be sent out prior to writing or reading text, in order to affect
  840      attributes on this field. */
  841
  842            2 DCLATRWHNOTP BIT(1) %INIT('0'B)%ENIT,
  843
  844      /*K* CALUSR_OTPRPTCHR - BIT(1).
  845      If set, call the user for KV$USR_OTPRPTCHR, instead of buffering the
  846      repeated characters directly into the buffer framed by
  847      KV$VDI.OTPBFR_. */
  848
  849            2 CALUSR_OTPRPTCHR BIT(1) %INIT('1'B)%ENIT,
  850      %KV_FILBIT
  851
  852      /*K* LIMBOCLM - BIT(1).
  853      If set, means the cursor can backspace back into the last column after
  854      a character has been displayed there. */
  855
  856            2 LIMBOCLM BIT(1) %INIT('1'B)%ENIT,
  857
  858      /*K* LOCALECHO - BIT(1).
  859      If set, means any character coming from the device
  860      has already been displayed there. */
  861
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          26   
  862            2 LOCALECHO BIT(1) %INIT('0'B)%ENIT,
  863
  864      /*K* VRTSCR - BIT(1).
  865      If set, means fast vertical scrolling is possible (SUPER profile
  866      options INSLIN_CHR and DLTLIN_CHR exist; also see KV$ERD.ILN_CHR and
  867      KV$ERD.DLN_CHR.)
  868      */
  869            2 VRTSCR BIT(1) UNAL %INIT('0'B)%ENIT,
  870
  871      /*K* FRSCLMFLD - BIT(1).
  872      If set, means column 1 always has a field defined (usually true if NO_FLDTRM=NO). */
  873
  874            2 FRSCLMFLD BIT(1) %INIT('0'B)%ENIT,
  875
  876      /*K* MSGLIN - BIT(1).
  877      If set, means a message line is usable (MSGLIN_CHR and ENDMSGLIN_CHR exist). */
  878
  879            2 MSGLIN BIT(1) %INIT('0'B)%ENIT,
  880
  881      /*K* FF_FLUSH - BIT(1).
  882      Form-feed flush.  If FF_FLUSH is set, the device (usually a plotter, for example) needs a
  883      page-eject to finish printing all the data that has been sent to it.
  884      This flag is used to decide whether to send a new-line or a page-eject at the end of
  885      a symbiont file. */
  886
  887            2 FF_FLUSH BIT(1) %INIT('0'B)%ENIT,
  888
  889      /*
  890      Used to restore the original setting of SRD.SCROLL when the number of
  891      SRDs is again reduced to one. */
  892
  893      /*K* FF_INCCR - BIT(1).
  894      Form-feed includes carriage return.  When KV$USR_PST with TOPPAGCNT>0
  895      is requested, the cursor passes through the top-left corner even if
  896      KV$USR_PST.PST.CLM is the same as the previous column.
  897      */
  898            2 FF_INCCR BIT(1) %INIT('1'B)%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          27   
  899
  900      /*K* DCHMOVFLD - BIT(1).
  901      If set, inhibits the use of DCH_CHR and ICH_CHR for forms input editing, because
  902      their use slides the fields around in an unpredictable fashion. */
  903
  904            2 DCHMOVFLD BIT(1) %INIT('0'B)%ENIT,
  905
  906      /*K* ABSGRPRND - BIT(8) ARRAY.
  907      Abstract graphic rendition.
  908      This array is indexed by KV_ABSGRPRND_..., yielding a KV$GRPRND
  909      substructure.  Equate identifiers for ABSGRPRND are listed in the
  910      following table.
  911      ..::TB "^\Identifier\#20\Meaning"
  912      .xeq KV_GLBCNS_E KV_ABSGRPRND_E EMPHASIS
  913      .xeq KV_GLBCNS_E KV_ABSGRPRND_E ERROR
  914      .xeq KV_GLBCNS_E KV_ABSGRPRND_E HIDDEN
  915      .xeq KV_GLBCNS_E KV_ABSGRPRND_E INPUT
  916      .xeq KV_GLBCNS_E KV_ABSGRPRND_E NULL
  917      .xeq KV_GLBCNS_E KV_ABSGRPRND_E OUTPUT
  918      .xeq KV_GLBCNS_E KV_ABSGRPRND_E WARNING
  919      ..::TB
  920      */
  921
  922      %IF FEP = 1;
  923            2 ABSGRPRND(0:7) BIT(8) CALIGNED %INIT('0'B*0)%ENIT,
  924      %ELSE;
  925            2 ABSGRPRND(0:7) UBIN BYTE CALIGNED %INIT(0*0)%ENIT,
  926      %ENDIF;
  927
  928      /*K* DVCLIN - SBIN WORD.
  929      Contains the device line position of cursor. */
  930
  931            2 DVCLIN SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(1)%ENIT,
  932
  933      /*K* DVCCLM - UBIN WORD.
  934      Contains the device column position of the cursor. */
  935
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          28   
  936            2 DVCCLM UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(1)%ENIT,
  937
  938      /*K* DVCATR - BIT(8).
  939      Contains, for devices with DCLATRWHNOTP=YES, a KV$GRPRND value corresponding
  940      to the current state of the terminal.  This field is used to eliminate
  941      unnecessary attribute setting operations. */
  942
  943            2 DVCATR BIT(%(9-FEP)) %INIT('0'B)%ENIT,
  944
  945            2 * BIT(%(9-FEP)) %INIT('0'B)%ENIT LAST
  946      %MEND;
  947      %EJECT;

14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          29   
  948      /*F* NAME: KV$MVD - Master Virtual Device Context Block
  949
  950      KV$MVD contains the master virtual device context block definition. */
  951
  952
  953      %MACRO KV$MVD(NAME = KV$MVD, LAST = ";", STCLASS = BASED);
  954      %LSET LISTDIR = '0'B;
  955      %LSET LISTEXP = '1'B;
  956      %LSET LISTCOM = '0'B;
  957      %LSET LISTSUB = '1'B;
  958      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  959      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
  960      %IF STC = 1;
  961      %LSET INIT = CHARTEXT(' INIT');
  962      %LSET ENIT = CHARTEXT('');
  963      %ELSE;
  964      %LSET INIT = CHARTEXT('/*');
  965      %LSET ENIT = CHARTEXT('*/');
  966      %LSET KV#VD_ORG_TERMINAL = 0;
  967      %ENDIF;
  968      %IF TEXTCHAR(STCLASS) = 'BASED' AND TEXTCHAR(NAME) = 'KV$MVD';
  969      %EQU KV_MVD = CHARTEXT('KV$PTR.MVD$->KV$MVD');
  970      %ENDIF;
  971      %LSET FEP = BITBIN(MODE_FEP);
  972      %LSET KV_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
  973      %LSET KV_FILBIT = CONCAT(' 2 * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
  974      %LSET KV_FILBIT = CHARTEXT(SUBSTR(KV_FILBIT, FEP*LENGTHC(KV_FILBIT)));
  975      DCL 1 NAME STCLASS %KV_DBLBYTALG,
  976
  977      /*K* SRD$ - PTR.
  978      Points to the subordinate real device for this virtual device. */
  979
  980            2 SRD$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
  981
  982      /*K* LNK$ - PTR.
  983      Is the link to next KV$MVD in the chain. */
  984
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          30   
  985            2 LNK$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
  986
  987      /*K* INPTAB$ - PTR.
  988      Points to the input tabs. */
  989
  990            2 INPTAB$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
  991
  992      /*K* DCBHDN$ - PTR.
  993      Points to the DCB page heading pointer. */
  994
  995            2 DCBHDN$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
  996
  997      /*K* USRINPFNCTBL$ - PTR.
  998      Points to the user input-function-table (IMPs), i.e., KV$INPFNCTBL. */
  999
 1000            2 USRINPFNCTBL$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1001
 1002      /*K* SSTINPFNCTBL$ - PTR.
 1003      Points to the system input-function-table (FCNTBL), i.e., KV$INPFNCTBL. */
 1004
 1005            2 SSTINPFNCTBL$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1006
 1007      /*K* VFU$ - PTR.
 1008      Points to the VFU table. */
 1009
 1010            2 VFU$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1011
 1012      /*K* TRNTBL$ - PTR.
 1013      Points to the translate table. */
 1014
 1015            2 TRNTBL$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1016
 1017      /*K* LINLST$ - PTR.
 1018      Points to the line list, i.e., the KV$LINLST structure. */
 1019
 1020            2 LINLST$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1021
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          31   
 1022      /*K* USRCNT - UBIN WORD.
 1023      User count.  USRCNT contains the number of other context blocks that are using
 1024      (have pointers pointing into) this context block.
 1025      This is the number of KV$STRs pointing to this KV$MVD. */
 1026
 1027            2 USRCNT UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1028
 1029      /*K* WDT - UBIN WORD.
 1030      Contains the width. */
 1031
 1032            2 WDT UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(80)%ENIT,
 1033
 1034      /*K* LNG - UBIN BYTE.
 1035      Contains the length (in lines). */
 1036
 1037            2 LNG UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1038
 1039      /*K* LMB - UBIN BYTE.
 1040      Contains the page limbo size (the space between the bottom line and top line
 1041      on the next page). */
 1042
 1043            2 LMB UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1044
 1045      /*K* ORG - UBIN BYTE.
 1046      Organization.  Identifiers for ORGs are listed in the following table.
 1047      ..::TB "^\Identifier\#20\Meaning"
 1048      .xeq KV_GLBCNS_E KV#VD_ORG_E KV#VD_ORG_FORM
 1049      .xeq KV_GLBCNS_E KV#VD_ORG_E KV#VD_ORG_SE
 1050      .xeq KV_GLBCNS_E KV#VD_ORG_E KV#VD_ORG_TERMINAL
 1051      .xeq KV_GLBCNS_E KV#VD_ORG_E KV#VD_ORG_UR
 1052      .xeq KV_GLBCNS_E KV#VD_ORG_E KV#VD_ORG_X364
 1053      ..::TB
 1054      */
 1055
 1056            2 ORG UBIN BYTE CALIGNED %INIT(%KV#VD_ORG_TERMINAL)%ENIT,
 1057      %KV_FILBIT
 1058
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          32   
 1059      /*K* DISPINPUT - BIT(1).
 1060      Display input.  If DISPINPUT is set, characters entered should be
 1061      displayed on the real device. */
 1062
 1063            2 DISPINPUT BIT(1) %INIT('1'B)%ENIT,
 1064
 1065      /*K* EDTRHT - BIT(1).
 1066      Edit right.  If EDTRHT is set, the default direction for searches is
 1067      to the right. */
 1068
 1069            2 EDTRHT BIT(1) %INIT('0'B)%ENIT,
 1070
 1071      /*K* LOWERCASE - BIT(1).
 1072      Lower case shift.  If LOWERCASE is set, shift upper-case input
 1073      characters to lower case. */
 1074
 1075            2 LOWERCASE BIT(1) %INIT('0'B)%ENIT,
 1076
 1077      /*K* OVRSTR - BIT(1).
 1078      Over-strike.  If OVRSTR is set and input characters are entered on top
 1079      of existing input characters, send the old
 1080      and new characters separated by a backspace, rather
 1081      than replacing the old characters with the new characters. */
 1082
 1083            2 OVRSTR BIT(1) %INIT('0'B)%ENIT,
 1084
 1085      /*K* SPACEINSERT - BIT(1).
 1086      Space insert.  If SPACEINSERT is set and an HT (horizontal tab) is entered, replace
 1087      it with spaces in the input record being built. */
 1088
 1089            2 SPACEINSERT BIT(1) %INIT('1'B)%ENIT,
 1090
 1091      /*K* TABRELATIVE - BIT(1).
 1092      Tab relative.  If TABSIM is set, tab stops should be computed relative to the end
 1093      of the prompt (start of input area), rather that relative to
 1094      the left margin. */
 1095
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          33   
 1096            2 TABRELATIVE BIT(1) %INIT('1'B)%ENIT,
 1097
 1098      /*K* TABSIM - BIT(1).
 1099      Tab simulation.  If TABSIM is set, analyze HT (horizontal tab) characters in the
 1100      output stream, determining their positioning effect, and generate
 1101      whatever sequence is appropriate to effect the tabbing function.
 1102      If tab simulation is not on, the HT characters are translated and
 1103      sent to the device directly. */
 1104
 1105            2 TABSIM BIT(1) %INIT('1'B)%ENIT,
 1106
 1107      /*K* UPPERCASE - BIT(1).
 1108      Upper case shift.  If UPPERCASE is set, lower case input characters should be shifted
 1109      to upper case. */
 1110
 1111            2 UPPERCASE BIT(1) %INIT('0'B)%ENIT,
 1112
 1113      /*K* HRZSCRSHF - UBIN BYTE.
 1114      Horizontal scroll shift.  HRZSCRSHF specifies how far to slide
 1115      the image when it happens. */
 1116
 1117            2 HRZSCRSHF UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1118      %KV_FILBIT
 1119
 1120      /*K* RETYPOVR - BIT(1).
 1121      Re-type in place.  If RETYPOVR is set, do re-types (e.g., ESC-R) in place, rather
 1122      than going to a clean line. */
 1123
 1124            2 RETYPOVR BIT(1) %INIT('0'B)%ENIT,
 1125
 1126      /*K* EDITOVR - BIT(1).
 1127      If set, edit (do inserts, deletes, etc.) in place, rather than
 1128      showing inserts below and deletes as slashes. */
 1129
 1130            2 EDITOVR BIT(1) %INIT('0'B)%ENIT,
 1131
 1132      /*K* APLLCNRM - BIT(1).
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          34   
 1133      Partial APL.  If APLLCNRM is set and an APL font is in use,
 1134      'lowercase' characters are to
 1135      be simply printed as uppercase (as opposed to being underscored). */
 1136
 1137            2 APLLCNRM BIT(1) %INIT('1'B)%ENIT,
 1138
 1139      /*K* FRMSCNINH - BIT(1).
 1140      Form scan inhibit.  FRMSCNINH is set when the form scanner is entered,
 1141      to prevent recursion through the scanner itself.  It is also used to
 1142      prevent recursion through the page-topping procedure and for non-scrolling
 1143      screen-editing windows to control partial display for rapid vertical cursor
 1144      motion. */
 1145
 1146            2 FRMSCNINH BIT(1) %INIT('0'B)%ENIT,
 1147
 1148      /*K* INSMOD - BIT(1).
 1149      Insert mode.  If INSMOD is set, the device is in non-position-dependent
 1150      insert mode.  That is, everything is inserted. */
 1151
 1152            2 INSMOD BIT(1) %INIT('0'B)%ENIT,
 1153
 1154      /*K* HRZSCR - BIT(1).
 1155      Horizontal scroll.  If HRZSCR is set, multi-line input slides back
 1156      and forth on one line. */
 1157
 1158            2 HRZSCR BIT(1) %INIT('0'B)%ENIT,
 1159
 1160      /*K* SIMPERF - BIT(1).
 1161      Simulate perforation.  If SIMPERF is set and the device is
 1162      printing on continuous, non-perforated
 1163      paper, print a 'perforation' on the paper to make it easier
 1164      to fold the paper. */
 1165
 1166            2 SIMPERF BIT(1) %INIT('0'B)%ENIT,
 1167
 1168      /*K* PAGBRKPND - BIT(1).
 1169      If set, means a page break is pending. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          35   
 1170
 1171            2 PAGBRKPND BIT(1) %INIT('0'B)%ENIT,
 1172
 1173      /*K* HRZSCRMRG - UBIN BYTE.
 1174      Horizontal scroll margin.  HRZSCRMSG specifies how close to the edge
 1175      to scroll.  */
 1176
 1177            2 HRZSCRMRG UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1178
 1179      /*K* HRZSCRMRGINT - UBIN BYTE.
 1180      Is the HRZSCRMRG initial value specified by the user.  The three
 1181      possibilities are percentage, columns, or "center".  */
 1182
 1183            2 HRZSCRMRGINT UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1184
 1185      /*K* ESCX - BIT(8) ARRAY.
 1186      Escape indexes.  ESCX is indexed by the
 1187      current escape type(PRM/SCN) + 2*table type(PRF/USR); an entry in ESCX is
 1188      the proper value for KV$PTR.INPCNDPND.ESC to indicate
 1189      the other escapes with the same ESCINT1 character and any ESCINT2 characters. */
 1190
 1191      %IF FEP = 1;
 1192            2 ESCX(0:3) BIT(8) %INIT('0'B*0)%ENIT,
 1193      %ELSE;
 1194            2 ESCX(0:3) UBIN BYTE %INIT(0*0)%ENIT CALIGNED,
 1195      %ENDIF;
 1196
 1197      /*K* VRTLIN - UBIN WORD.
 1198      Contains the virtual line of the cursor. */
 1199
 1200            2 VRTLIN UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(1)%ENIT,
 1201
 1202      /*K* VRTCLM - SBIN WORD.
 1203      Contains the virtual column of the cursor. */
 1204
 1205            2 VRTCLM SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(1)%ENIT,
 1206      %KV_FILBIT
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          36   
 1207
 1208      /*K* ESCCNTMSK - BIT(8).
 1209      Specifies the INPFNCLVLs for which ESC-CNT-ID is legal.
 1210      ESCCNTMSK is used to reset the other INPFNCLVLs when the
 1211      CNT portion has been encountered.  ESCCNTMSK is actually a BIT
 1212      array, indexed by INPFNCLVL, but never used that way.  */
 1213
 1214            2 ESCCNTMSK BIT(8) %INIT('0'B)%ENIT,
 1215
 1216      /*K* LPI - UBIN BYTE.
 1217      Lines per inch.  LPI is used by some printers. */
 1218
 1219            2 LPI UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1220
 1221      /*K* FRMLIN - UBIN BYTE.
 1222      Form line of cursor. FRMLIN contains the line relative to FRSLIN. */
 1223
 1224            2 FRMLIN UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1225
 1226      /*K* FRSLIN - UBIN BYTE.
 1227      Page first line.  FRSLIN contains the lines from top-of-page to the
 1228      first printable line. */
 1229
 1230            2 FRSLIN UBIN BYTE %INIT(1)%ENIT CALIGNED,
 1231
 1232      /*K* PAGNMB - UBIN WORD.
 1233      Contains the page number (for headers). */
 1234
 1235            2 PAGNMB UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(1)%ENIT,
 1236
 1237      /*K* REDSSNID - UBIN BYTE.
 1238      Read SeSsioN ID.  REDSSNID contains the KV$SSN.SSNID value for the session
 1239      whose currently pending read is currently displayed at the current position
 1240      of this window.  REDSSNID is used to make sure the user is not confused when
 1241      switching sessions or when interrupted by operator messages. */
 1242
 1243            2 REDSSNID UBIN BYTE CALIGNED %INIT(0)%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          37   
 1244
 1245      %KV_FILBIT
 1246
 1247      /*K* RCRWRAP - BIT(1).
 1248      Record-wrap-mode.  RCRWRAP is only ever set if ORG=SE.  Setting
 1249      RCRWRAP affects the behavior of edit positioning and delete. */
 1250
 1251            2 RCRWRAP BIT(1) %INIT('0'B)%ENIT,
 1252
 1253      /*K* INPFNCCPY - BIT(1) ARRAY.
 1254      Input-function copy.  INPFNCCPY is indexed by function-level (primary
 1255      escape or secondary) to resolve introducer conflicts.  INPFNCCPY is
 1256      set if the level was inherited by window creation, causing a conflict
 1257      to delete the level instead of reporting an error. */
 1258
 1259            2 INPFNCCPY(0:1) BIT(1) %INIT('0'B*2)%ENIT,
 1260            2 *  BIT(5) %INIT('0'B)%ENIT LAST
 1261      %MEND;
 1262      %EJECT;

14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          38   
 1263      /*F* NAME: KV$PTR - VDH Pointer Block
 1264
 1265      The KV$PTR structure contains pointers and other data for identifying
 1266      where in the hierarchy of structures the current field or
 1267      other interesting item lies.  This is a generalized
 1268      scratchpad for passing information within VDH and among
 1269      the users of VDH. */
 1270
 1271      %MACRO KV$PTR(NAME = KV$PTR, LAST = ";", STCLASS = "BASED(KV$PTR$)");
 1272      %LSET LISTDIR = '0'B;
 1273      %LSET LISTEXP = '1'B;
 1274      %LSET LISTCOM = '0'B;
 1275      %LSET LISTSUB = '1'B;
 1276      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
 1277      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
 1278      %IF STC = 1;
 1279      %LSET INIT = CHARTEXT(' INIT');
 1280      %LSET ENIT = CHARTEXT('');
 1281      %ELSE;
 1282      %LSET INIT = CHARTEXT('/*');
 1283      %LSET ENIT = CHARTEXT('*/');
 1284      %ENDIF;
 1285      %IF TEXTCHAR(STCLASS) = 'BASED(KV$PTR$)' AND TEXTCHAR(NAME) = 'KV$PTR';
 1286      DCL KV$PTR$ PTR SYMREF;
 1287      %ENDIF;
 1288      %LSET FEP = BITBIN(MODE_FEP);
 1289      %LSET KV_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
 1290      %LSET KV_FILBIT = CONCAT(' 2 * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
 1291      %LSET KV_FILBIT = CHARTEXT(SUBSTR(KV_FILBIT, FEP*LENGTHC(KV_FILBIT)));
 1292      DCL 1 NAME STCLASS %KV_DBLBYTALG,
 1293
 1294      /*K* VDI$ - PTR.
 1295      Points to the virtual device interface context (KV$VDI). */
 1296
 1297            2 VDI$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1298
 1299      /*K* SSN$ - PTR.
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          39   
 1300      Points to the session context (KV$SSN). */
 1301
 1302            2 SSN$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1303
 1304      /*K* STR$ - PTR.
 1305      Points to the stream context block (KV$STR). */
 1306
 1307            2 STR$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1308
 1309      /*K* MVD$ - PTR.
 1310      Points to the master virtual device context block (KV$MVD). */
 1311
 1312            2 MVD$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1313
 1314      /*K* MRD$ - PTR.
 1315      Points to the master real device context block (KV$MRD). */
 1316
 1317            2 MRD$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1318
 1319      /*K* SRD$ - PTR.
 1320      Points to the subordinate real device context block (KV$SRD). */
 1321
 1322            2 SRD$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1323
 1324      /*N* Formerly PAG$ - PTR.
 1325      Page context (KV$PAG) pointer.
 1326      */
 1327            2 * PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1328      /*K* LINLST$ - PTR.
 1329      Points to the line list buffer (KV$LINLST) for MVDs with ORG=FORM.
 1330      */
 1331
 1332            2 LINLST$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1333
 1334      /*K* RCRLST$ - PTR.
 1335      Points to the record list buffer (KV$RCRLST) for MVDs with ORG=SE.
 1336      RCRLST$ is a redefinition of LINLST$. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          40   
 1337            2 RCRLST$ REDEF LINLST$ PTR %KV_DBLBYTALG,
 1338
 1339      /*K* LIN$ - PTR.
 1340      Points to the line context structure (KV$LIN).
 1341      */
 1342
 1343            2 LIN$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1344
 1345      /*K* FLDLST$ - PTR.
 1346      Points to the field list buffer (KV$FLDLST).
 1347      */
 1348
 1349            2 FLDLST$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1350
 1351      /*K* FLD$ - PTR.
 1352      Points to the field context structure (KV$FLD).
 1353      */
 1354
 1355            2 FLD$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1356
 1357            2 * PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1358
 1359      /*K* FLDWRDX - SBIN WORD.
 1360      Is the field context structure word index (from KV$FLDLST to KV$FLD).
 1361      */
 1362
 1363            2 FLDWRDX SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1364
 1365      /*K* VRTLIN - SBIN WORD.
 1366      Contains the virtual line of the current field. */
 1367
 1368            2 VRTLIN SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1369
 1370      /*K* VRTCLM - UBIN WORD.
 1371      The virtual column of the current field. */
 1372
 1373            2 VRTCLM UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          41   
 1374
 1375      /*K* INPCNDPND.
 1376      Contains the input conditions pending. */
 1377
 1378            2 INPCNDPND %KV_DBLBYTALG,
 1379      %IF FEP = 0;
 1380       3 * BIT(1) %INIT('0'B)%ENIT,
 1381      %ENDIF;
 1382
 1383
 1384      /*K* INPCNDPND.TRN - BIT(1).
 1385      If set, specifies input condition:  transparent mode read pending. */
 1386
 1387              3 TRN BIT(1) %INIT('0'B)%ENIT,
 1388
 1389      /*K* INPCNDPND.INPOPR - BIT(1).
 1390      If set, specifies input condition:  input function pending (see INPCNDPND.OPRX). */
 1391
 1392              3 INPOPR BIT(1) UNAL %INIT('0'B)%ENIT,
 1393
 1394      /*K* INPCNDPND.CTRSTR - BIT(1).
 1395      If set, specifies input condition:  control string.  The first character in the
 1396      control string was received; the second character is awaited. */
 1397
 1398              3 CTRSTR BIT(1) %INIT('0'B)%ENIT,
 1399              3 * BIT(5) %INIT('0'B)%ENIT,
 1400      %IF FEP = 0;
 1401       3 * BIT(1) %INIT('0'B)%ENIT,
 1402      %ENDIF;
 1403
 1404      /*K* INPCNDPND.ESC.
 1405      If set, specifies input condition:  escape pending. */
 1406
 1407              3 ESC,
 1408
 1409      /*K* INPCNDPND.ESC.PRF - BIT(1) ARRAY.
 1410      Indicates Profile table escapes pending (primary then secondary). */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          42   
 1411                4 PRF(0:1) BIT(1) %INIT('0'B*0)%ENIT,
 1412
 1413      /*K* INPCNDPND.ESC.USR - BIT(1) ARRAY.
 1414      Indicates User table escapes pending (primary then secondary). */
 1415                4 USR(0:1) BIT(1) %INIT('0'B*0)%ENIT,
 1416
 1417      /*K* INPCNDPND.ESC.SST - BIT(1) ARRAY.
 1418      Indicates System table escapes pending (primary then secondary). */
 1419                4 SST(0:1) BIT(1) %INIT('0'B*0)%ENIT,
 1420
 1421      /*K* INPCNDPND.ESC.INT2 - BIT(1).
 1422      If set, indicates that some pending escapes have 2-character introducers.
 1423      This flag is reset when any ESCINT2 character is successfully received. */
 1424                4 INT2 BIT(1) %INIT('0'B*0)%ENIT,
 1425                4 * BIT(1) %INIT('0'B*0)%ENIT,
 1426
 1427      /*K* INPCNDPND.OPRX - SBIN WORD.
 1428      Contains the INPOPR index (into the System table) to interpret if
 1429      INPCNDPND.INPOPR is set.  Otherwise, used to accumulate and indicate the
 1430      count portion of numeric escapes. */
 1431              3 OPRX SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1432            2 INPCNDPND_MSK REDEF INPCNDPND,
 1433
 1434      /*K* INPCNDPND_MSK.NOT_TRN - BIT(15).
 1435      Provides a redefinition of INPCNDPND for access to the flags affected by
 1436      incoming characters (all except TRN). */
 1437
 1438      %IF FEP = 0;
 1439       3 * BIT(1) %INIT('0'B)%ENIT,
 1440      %ENDIF;
 1441              3 * BIT(1),                     /* TRN                                */
 1442              3 NOT_TRN BIT(%(16-FEP)),
 1443              3 * BIT(%(18-2*FEP)) ,                    /* OPRX                               */
 1444      /*K* INPCNDFLG.
 1445      Is a redefinition of INPCNDPND. */
 1446            2 INPCNDFLG REDEF INPCNDPND,
 1447
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          43   
 1448      /*K* INPCNDFLG.BITS - BIT(16).
 1449      Provides a redefinition for efficient testing of whether any flags are set. */
 1450
 1451              3 BITS BIT(%(18-2*FEP)) ,
 1452              3 OPRX UBIN(%(18-2*FEP)) CALIGNED,
 1453
 1454      /*K* STT - UBIN BYTE.
 1455      Contains the current field status.  STT indicates the validity of
 1456      other items in this structure.  Identifiers for STT values are listed
 1457      in the following table.
 1458      ..::TB "^\Identifier\#10\Meaning"
 1459      ..::IT "AFTLSTFLD"
 1460      .xeq KV_GLBCNS_E KV_PTR_STT_E AFTLSTFLD
 1461      ..::IT "BFRFRSFLD"
 1462      .xeq KV_GLBCNS_E KV_PTR_STT_E BFRFRSFLD
 1463      ..::IT "BGNOF_FRM"
 1464      .xeq KV_GLBCNS_E KV_PTR_STT_E BGNOF_FRM
 1465      ..::IT "BTWFLD"
 1466      .xeq KV_GLBCNS_E KV_PTR_STT_E BTWFLD
 1467      ..::IT "ENDOF_FRM"
 1468      .xeq KV_GLBCNS_E KV_PTR_STT_E ENDOF_FRM
 1469      ..::IT "ILGCLM"
 1470      .xeq KV_GLBCNS_E KV_PTR_STT_E ILGCLM
 1471      ..::IT "ILGLIN"
 1472      .xeq KV_GLBCNS_E KV_PTR_STT_E ILGLIN
 1473      ..::IT "ILGVD_ORG"
 1474      .xeq KV_GLBCNS_E KV_PTR_STT_E ILGVD_ORG
 1475      ..::IT "IN_FLDCLM1"
 1476      .xeq KV_GLBCNS_E KV_PTR_STT_E IN_FLDCLM1
 1477      ..::IT "IN_FLDCLMN"
 1478      .xeq KV_GLBCNS_E KV_PTR_STT_E IN_FLDCLMN
 1479      ..::IT "NO_FLD"
 1480      .xeq KV_GLBCNS_E KV_PTR_STT_E NO_FLD
 1481      ..::TB
 1482      */
 1483
 1484            2 STT UBIN BYTE CALIGNED %INIT(0)%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          44   
 1485      %KV_FILBIT
 1486
 1487      /*K* USRINPFNCINH - BIT(1).
 1488      If set, means inhibit user input functions
 1489      because an input function is already being processed. */
 1490
 1491            2 USRINPFNCINH BIT(1) %INIT('0'B)%ENIT,
 1492            2 * BIT(7) %INIT('0'B)%ENIT LAST
 1493      %MEND;
 1494      %EJECT;

14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          45   
 1495      /*F* NAME: KV$SRD - VDH Subordinate Real Device Context Block
 1496
 1497      KV$SRD contains the VDH subordinate real device context. */
 1498
 1499
 1500      %MACRO KV$SRD(NAME = KV$SRD, LAST = ";", STCLASS = BASED);
 1501      %LSET LISTDIR = '0'B;
 1502      %LSET LISTEXP = '1'B;
 1503      %LSET LISTCOM = '0'B;
 1504      %LSET LISTSUB = '1'B;
 1505      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
 1506      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
 1507      %IF STC = 1;
 1508      %LSET INIT = CHARTEXT(' INIT');
 1509      %LSET ENIT = CHARTEXT('');
 1510      %ELSE;
 1511      %LSET INIT = CHARTEXT('/*');
 1512      %LSET ENIT = CHARTEXT('*/');
 1513      %ENDIF;
 1514      %IF TEXTCHAR(STCLASS) = 'BASED' AND TEXTCHAR(NAME) = 'KV$SRD';
 1515      %EQU KV_SRD = CHARTEXT('KV$PTR.SRD$->KV$SRD');
 1516      %ENDIF;
 1517      %LSET FEP = BITBIN(MODE_FEP);
 1518      %LSET KV_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
 1519      %LSET KV_FILBIT = CONCAT(' 2 * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
 1520      %LSET KV_FILBIT = CHARTEXT(SUBSTR(KV_FILBIT, FEP*LENGTHC(KV_FILBIT)));
 1521      DCL 1 NAME STCLASS %KV_DBLBYTALG,
 1522
 1523      /*K* MRD$ - PTR.
 1524      Points to the master real device (KV$MRD) to which this device is
 1525      subordinate. */
 1526
 1527            2 MRD$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1528
 1529      /*K* LNK$ - PTR.
 1530      Is the link to the next subordinate real device context block in the chain. */
 1531
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          46   
 1532            2 LNK$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1533
 1534      /*K* ENTSRDCHR$ - PTR.
 1535      Points to a buffer containing a string to be sent to
 1536      the device whenever the cursor moves to this SRD.  ENTSRDCHR$ is
 1537      used for graphics. */
 1538
 1539            2 ENTSRDCHR$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1540
 1541      /*K* USRCNT - UBIN WORD.
 1542      User count.  USRCNT contains the number of other contexts that are using
 1543      (have pointers pointing into) this context block.
 1544      This is the number of KV$MVDs pointing to this KV$SRD. */
 1545
 1546            2 USRCNT UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(1)%ENIT,
 1547
 1548      /*K* ORG - position (KV$PST substructure).
 1549      Contains the origin physical position. */
 1550
 1551      %KV$PST (LVL = 2, NAME = ORG, LIN = 0, CLM = 0, STCLASS = STCLASS, LAST = ",");
 1552
 1553      /*K* TOPLFT - position (KV$PST substructure).
 1554      Contains the top left physical position. */
 1555
 1556      %KV$PST (LVL = 2, NAME = TOPLFT, STCLASS = STCLASS, LAST = ",");
 1557
 1558      /*K* BTMRHT - position (KV$PST substructure).
 1559      Contains the bottom right physical position. */
 1560
 1561      %KV$PST (LVL=2, NAME=BTMRHT, LIN=24, CLM=80, STCLASS=STCLASS, LAST=",");
 1562
 1563      /*K* WDT - UBIN WORD.
 1564      Contains the width. */
 1565
 1566            2 WDT UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(80)%ENIT,
 1567
 1568      /*K* LNG - UBIN BYTE.
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          47   
 1569      Contains the length; i.e., the  number of lines that may appear. */
 1570
 1571            2 LNG UBIN BYTE %INIT(24)%ENIT CALIGNED,
 1572      %KV_FILBIT
 1573
 1574      /*K* PRINTHALT - BIT(1).
 1575      If set, means display the print halt (e.g., '(CR TO GO)') message at device
 1576      pagination time if halting. */
 1577
 1578            2 PRINTHALT BIT(1) %INIT('1'B)%ENIT,
 1579
 1580      /*K* RELPAGE - BIT(1).
 1581      Relative device pagination.  If RELPAGE is set, do device pagination relative to
 1582      the start of the last read, rather that every n lines. */
 1583
 1584            2 RELPAGE BIT(1) %INIT('1'B)%ENIT,
 1585
 1586      /*K* PAGEHALT - BIT(1).
 1587      Device pagination halt.  If PAGEHALT is set, halt after each page,
 1588      waiting for the
 1589      user to signal a go-ahead before displaying further data. */
 1590
 1591            2 PAGEHALT BIT(1) %INIT('0'B)%ENIT,
 1592
 1593      /*K* VRTPSTOK - BIT(1).
 1594      Virtual position OK.  If VRTPSTOK is set, VDH has not typed an
 1595      <ESC Q> response. */
 1596
 1597            2 VRTPSTOK BIT(1) %INIT('0'B)%ENIT,
 1598
 1599      /*K* SCROLL - BIT(1).
 1600      If set, means scroll the device (as opposed to paging, e.g., home/erase). */
 1601
 1602            2 SCROLL BIT(1) %INIT('0'B)%ENIT,
 1603
 1604      /*K* TRUNCATE - BIT(1).
 1605      Output truncate.  If TRUNCATE is set, truncate long lines rather than
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          48   
 1606      wrapping. */
 1607
 1608            2 TRUNCATE BIT(1) %INIT('0'B)%ENIT,
 1609
 1610      /*K* HI_NONBLNVRT - BIT(1).
 1611      If set, means HI_NONBLN was set while sending characters in the
 1612      "update-virtual-position" mode. */
 1613
 1614            2 HI_NONBLNVRT BIT(1) %INIT('1'B)%ENIT,
 1615
 1616      /*K* WRPPAG - BIT(1).
 1617      Wrap page.  If WRPPAG is set and VDH gets to the end of the SRD page,
 1618      continue outputting at the top of the SRD, without erasing
 1619      the SRD.  Erasure occurs as VDH progresses through the SRD. */
 1620
 1621            2 WRPPAG BIT(1) %INIT('0'B)%ENIT,
 1622
 1623      /*K* LFTMRGCLM - UBIN BYTE.
 1624      Contains the left margin column (i.e., from the LDEV MARGIN option). */
 1625
 1626            2 LFTMRGCLM UBIN BYTE CALIGNED %INIT(1)%ENIT,
 1627
 1628      %KV_FILBIT
 1629
 1630      /*K* ENBENTEXTSRDCHR - BIT(1).
 1631      Enable enter/exit SRD characters.  If the flag is set, KV$ERD.EXTSRDCHR
 1632      will be sent to the terminal when exiting this SRD, and
 1633      KV$SRD.ENTSRDCHR$->KV$SHRBFR will be sent when entering this SRD. */
 1634
 1635            2 ENBENTEXTSRDCHR BIT(1) %INIT('0'B)%ENIT,
 1636
 1637      /*K* FSTERS - BIT(1).
 1638      If set, means the erase-to-end function exists. */
 1639            2 FSTERS BIT(1) UNAL %INIT('0'B)%ENIT,
 1640
 1641      /*K* BRDEXS - BIT(1).
 1642      If set, means that some borders exist. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          49   
 1643            2 BRDEXS BIT(1) UNAL %INIT('0'B)%ENIT,
 1644
 1645      /*K* BRDUPD - BIT(1).
 1646      If set, means that border specifications have changed, but they have
 1647      not been redrawn. */
 1648            2 BRDUPD BIT(1) UNAL %INIT('0'B)%ENIT,
 1649
 1650      /*K* ADJTOPLFT - BIT(1).
 1651      Adjust Top Left.  If set, means that window size changes directed to
 1652      this window will default to affecting the top or left boundary.  If
 1653      reset, the bottom or right boundary would be adjusted by default instead. */
 1654            2 ADJTOPLFT BIT(1) UNAL %INIT('0'B)%ENIT,
 1655
 1656      /*K* PRKCRS - BIT(1).
 1657      Park Cursor.  If this flag is set, the cursor is moved to the home
 1658      position of the window when an activation occurs in a forms or
 1659      screen-editing window, or when a CLRWND VFC is issued for a scrolling
 1660      window. */
 1661
 1662            2 PRKCRS BIT(1) UNAL %INIT('0'B)%ENIT,
 1663
 1664      /*K* UNKRGN - BIT(1).
 1665      If set and if KV$ERD.RGNSCR is true, the current scrolling region is not the same
 1666      as this SRD.  Even to position into this window, the region needs setting. */
 1667
 1668            2 UNKRGN BIT(1) %INIT('0'B)%ENIT,
 1669
 1670      /*K* SAVSCROLL - BIT(1).
 1671      Is used to restore the original setting of KV$SRD.SCROLL when it again becomes
 1672      possible, either because WDT grows to MRD.WDT, or MRD.USRCNT goes to one. */
 1673
 1674            2 SAVSCROLL BIT(1) %INIT('0'B)%ENIT,
 1675
 1676      /*K* FLDEND - KV$PST.
 1677      Field end (position).  FLDEND contains the last position in which
 1678      a character may be displayed in the current field. */
 1679      %KV$PST (LVL = 2, NAME = FLDEND, LIN = 0, CLM = 0, STCLASS = STCLASS, LAST = ",");
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          50   
 1680
 1681      /*K* PRMVRTCLM - UBIN WORD.
 1682      Prompt virtual column.  PRMVRTCLM contains the virtual column of last character of
 1683      the prompt. */
 1684
 1685            2 PRMVRTCLM UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(1)%ENIT,
 1686
 1687      /*K* CRTVRTLINPHSLIN - SBIN WORD.
 1688      Current virtual line physical line.  This field contains the number of
 1689      the first physical line of this virtual line. */
 1690
 1691            2 CRTVRTLINPHSLIN SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(1)%ENIT,
 1692
 1693      /*K* NXTNONBLNLIN - UBIN WORD.
 1694      Contains the next unblanked line (used in wrappage mode). */
 1695
 1696            2 NXTNONBLNLIN UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(255)%ENIT,
 1697
 1698      /*K* CRT - position (KV$PST substructure).
 1699      Contains the current physical position of the cursor. */
 1700
 1701      %KV$PST (LVL = 2, NAME = CRT, STCLASS = STCLASS, LAST = ",");
 1702
 1703      /*K* HI_NONBLN - position (KV$PST substructure).
 1704      Contains the high non-blank physical position of the cursor. */
 1705
 1706      %KV$PST (LVL = 2, NAME = HI_NONBLN, STCLASS = STCLASS, LAST = ",");
 1707
 1708      /*K* DVCLINBIS - SBIN WORD.
 1709      Device line bias.  DVCLINBIS is used for scrolling terminals to
 1710      keep track of where (CR to GO) needs to occur.
 1711      Device line = physical line + device line bias. */
 1712
 1713            2 DVCLINBIS SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1714
 1715      /*K* SRDEND - position (KV$PST substructure).
 1716      SRD end physical position.  SRDEND includes borders (which BTMRHT does not). */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          51   
 1717
 1718      %KV$PST (LVL=2, NAME=SRDEND, LIN=24, CLM=80, STCLASS=STCLASS, LAST=",");
 1719      %KV_FILBIT
 1720
 1721      /*K* OPT - BIT(1).
 1722      If set, means the window is optional (i.e., REMOVABLE in VLP_WINDOW). */
 1723            2 OPT BIT(1) UNAL %INIT('0'B)%ENIT,
 1724
 1725      /*K* UNKPST - BIT(1).
 1726      Unknown position.  If UNKPST is set, the condition will be corrected
 1727      when the cursor is moved into this window. */
 1728            2 UNKPST BIT(1) UNAL %INIT('0'b)%ENIT,
 1729
 1730      /*K* TOPBRD - BIT(1).
 1731      If set, means a top border exists. */
 1732            2 TOPBRD BIT(1) UNAL %INIT('0'B)%ENIT,
 1733
 1734      /*K* BTMBRD - BIT(1).
 1735      If set, means a bottom border exists. */
 1736            2 BTMBRD BIT(1) UNAL %INIT('0'B)%ENIT,
 1737
 1738      /*K* HBRDSIZ - UBIN(4).
 1739      Contains the horizontal border width. */
 1740            2 HBRDSIZ UBIN(4) UNAL %INIT(1)%ENIT,
 1741
 1742      /*K* HBRDCHR - CHAR(1).
 1743      Contains the horizontal border character. */
 1744            2 HBRDCHR CHAR(1) %INIT(' ')%ENIT,
 1745      %KV_FILBIT
 1746
 1747      /*K* NOOPTMIZ - BIT(1).
 1748      If set, means there is no positioning optimization. */
 1749            2 NOOPTMIZ BIT(1) UNAL %INIT('0'B)%ENIT,
 1750
 1751      /*K* VRTSCR - BIT(1).
 1752      If set, means fast vertical scrolling is possible
 1753      (WDT = MRD.WDT and MRD.VRTSCR). */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          52   
 1754            2 VRTSCR BIT(1) UNAL %INIT('0'B)%ENIT,
 1755
 1756      /*K* LFTBRD - BIT(1).
 1757      If set, means a left border exists. */
 1758            2 LFTBRD BIT(1) UNAL %INIT('0'B)%ENIT,
 1759
 1760      /*K* RHTBRD - BIT(1).
 1761      If set, means a right border exists. */
 1762            2 RHTBRD BIT(1) UNAL %INIT('0'B)%ENIT,
 1763
 1764      /*K* VBRDSIZ - UBIN(4).
 1765      Contains the vertical border width. */
 1766            2 VBRDSIZ UBIN(4) UNAL %INIT(1)%ENIT,
 1767
 1768      /*K* VBRDCHR - CHAR(1).
 1769      Contains the vertical border character. */
 1770            2 VBRDCHR CHAR(1) %INIT(' ')%ENIT,
 1771
 1772      /*K* MINWDT - UBIN BYTE.
 1773      Contains the minimum width. */
 1774            2 MINWDT UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1775
 1776      /*K* MINLNG - UBIN BYTE.
 1777      Contains the minimum length. */
 1778            2 MINLNG UBIN BYTE CALIGNED %INIT(0)%ENIT LAST
 1779      %MEND;
 1780      %EJECT;

14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          53   
 1781      /*F* NAME: KV$SSN - VDH Session Context
 1782
 1783      KV$SSN contains the session context block definition. */
 1784
 1785
 1786      %MACRO KV$SSN(NAME = KV$SSN, LAST = ";", STCLASS = BASED);
 1787      %LSET LISTDIR = '0'B;
 1788      %LSET LISTEXP = '1'B;
 1789      %LSET LISTCOM = '0'B;
 1790      %LSET LISTSUB = '1'B;
 1791      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
 1792      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
 1793      %IF STC = 1;
 1794      %LSET INIT = CHARTEXT(' INIT');
 1795      %LSET ENIT = CHARTEXT('');
 1796      %ELSE;
 1797      %LSET INIT = CHARTEXT('/*');
 1798      %LSET ENIT = CHARTEXT('*/');
 1799      %LSET KV_BFRRLSDSP_MSG = 0;
 1800      %LSET KV_STRTYP_REDBFR = 0;
 1801      %ENDIF;
 1802      %IF TEXTCHAR(STCLASS) = 'BASED' AND TEXTCHAR(NAME) = 'KV$SSN';
 1803      %EQU KV_SSN = CHARTEXT('KV$PTR.SSN$->KV$SSN');
 1804      %ENDIF;
 1805      %LSET FEP = BITBIN(MODE_FEP);
 1806      %LSET KV_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
 1807      %LSET KV_FILBIT = CONCAT(' 2 * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
 1808      %LSET KV_FILBIT = CHARTEXT(SUBSTR(KV_FILBIT, FEP*LENGTHC(KV_FILBIT)));
 1809      DCL 1 NAME STCLASS %KV_DBLBYTALG,
 1810
 1811      /*K* VDI$ - PTR.
 1812      Points to the virtual device interface (KV$VDI) context block. */
 1813
 1814            2 VDI$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1815
 1816      /*K* LNK$ - PTR.
 1817      Is the link to next KV$SSN in the chain. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          54   
 1818
 1819            2 LNK$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1820
 1821      /*K* STR$ - PTR.
 1822      Points to the chain of stream context blocks (KV$STRs). */
 1823
 1824            2 STR$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1825
 1826      /*K* SSNHDN$ - PTR.
 1827      Points to the session heading (KV$TITLE). */
 1828
 1829            2 SSNHDN$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1830
 1831      /*K* SNCPTR$ - PTR.
 1832      Synchronous KV$PTR pointer.  SNCPTR$ points to the KV$PTR block
 1833      used for synchronous (to this session) requests.  These
 1834      include normal read and write requests.
 1835      This pointer block always exists. */
 1836
 1837            2 SNCPTR$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1838
 1839      /*K* TYPAHDBFRHED$ - PTR.
 1840      Points to the type-ahead buffer head. */
 1841
 1842            2 TYPAHDBFRHED$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1843
 1844      /*K* TYPAHDBFRINPFNC$ - PTR.
 1845      Type-ahead buffer input function pointer.  TYPAHDBFRINPFNC$ points to
 1846      the buffer containing the partial input function string. */
 1847
 1848            2 TYPAHDBFRINPFNC$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1849
 1850      /*K* TYPAHDBFRINS$ - PTR.
 1851      Type-ahead buffer insert pointer.  TYPAHDBFRINS$ points to the buffer
 1852      to insert the next type-ahead character into, if the character is from the
 1853      receive buffer. */
 1854
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          55   
 1855            2 TYPAHDBFRINS$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1856
 1857      /*K* TRCBFR$ - PTR.
 1858      Trace buffer pointer.  TRCBFR$ points to the VDH trace buffer (KV$TRCBFR). */
 1859
 1860            2 TRCBFR$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1861
 1862      /*K* INPCHRCNT - UBIN DOUBLEWORD.
 1863      Contains the input character count (grand total) sent to distant end. */
 1864
 1865            2 INPCHRCNT UBIN(%(36-4*FEP))  %KV_DBLBYTALG %INIT(0)%ENIT,
 1866
 1867      /*K* SNDMAXNMBBYT - UBIN WORD.
 1868      Send maximum number of bytes.  This field contains the maximum number
 1869      of bytes that can be sent without getting a further request for data
 1870      from the other end. */
 1871
 1872            2 SNDMAXNMBBYT UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1873
 1874      /*K* MRKNMB - UBIN WORD.
 1875      Contains the marker number. */
 1876
 1877            2 MRKNMB UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1878
 1879      /*K* OTPDLTMRKNMB - UBIN WORD.
 1880      Contains the output delete marker number. */
 1881
 1882            2 OTPDLTMRKNMB UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1883
 1884      /*K* INPDLTMRKNMB - UBIN WORD.
 1885      Contains the input delete marker number. */
 1886
 1887            2 INPDLTMRKNMB UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1888
 1889      /*K* OTPCHRCNT - UBIN DOUBLEWORD.
 1890      Contains the output character count (grand total) received from distant end. */
 1891
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          56   
 1892            2 OTPCHRCNT UBIN(%(36-4*FEP))  %KV_DBLBYTALG %INIT(0)%ENIT,
 1893
 1894      /*K* REDRSPCNT - UBIN DOUBLEWORD.
 1895      Contains the read response count. */
 1896
 1897            2 REDRSPCNT UBIN(%(36-4*FEP))  %KV_DBLBYTALG %INIT(0)%ENIT,
 1898
 1899      /*N* REDTIMOUT.
 1900      */
 1901
 1902            2 REDTIMOUT REDEF REDRSPCNT,
 1903              3 * BIT(%(18-2*FEP)) ,
 1904
 1905      /*K* REDTIMOUT.MRKNMB - UBIN WORD.
 1906      Is a redefinition of REDRSPCNT
 1907      for access to a one word item that changes with each read. */
 1908      */
 1909              3 MRKNMB UBIN(%(18-2*FEP)) %KV_DBLBYTALG,
 1910
 1911      /*K* LSTOTPRCRID - BIT(32).
 1912      Last output record ID.  LSTOTPRCRID contains the last record ID (typically
 1913      symbiont block and record number) that was passed to
 1914      the VDH-user and successfully processed by the VDH-user.
 1915      Each time the VDH-user successfully processes the data
 1916      associated with a record that requests this sort
 1917      of tracking, the record ID from the record is put into
 1918      this item.  Upon demand (receipt of particular messages)
 1919      the contents of this item will be sent to the other end. */
 1920
 1921            2 LSTOTPRCRID BIT(%(36-4*FEP))  %INIT('0'B)%ENIT,
 1922
 1923      /*K* RCVFLWCTRCRDINC - UBIN WORD.
 1924      Receive flow control credit increment.  This field contains the
 1925      sum of the data sizes on KV$VDO_DAT
 1926      messages received since KV_VDO_RQSDAT was last sent to the
 1927      other end. */
 1928
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          57   
 1929            2 RCVFLWCTRCRDINC UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1930
 1931      /*K* RCVFLWCTRTMPMAXCRD - UBIN WORD.
 1932      Receive flow control temporary maximum credit.  This field is used
 1933      when the other end
 1934      has a large record (greater than the block limit) to
 1935      send. */
 1936
 1937            2 RCVFLWCTRTMPMAXCRD UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1938
 1939      /*K* WRTRQSCNT - UBIN DOUBLEWORD.
 1940      Contains the write request count. */
 1941
 1942            2 WRTRQSCNT UBIN(%(36-4*FEP))  %KV_DBLBYTALG %INIT(0)%ENIT,
 1943
 1944      /*K* SNDPRMBFRHED$ - PTR.
 1945      Get parameter buffer head pointer.  SNDPRMBFRHED$ points to the a KV$GETPRM
 1946      structure in the head buffer
 1947      in a chain of buffers built by KVP$GETPRM in response
 1948      to a request to get parameters (explicit, save/get, or
 1949      autosave) from the other end of the path. */
 1950
 1951            2 SNDPRMBFRHED$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 1952
 1953      /*K* SSNCNCID - UBIN WORD.
 1954      Contains the session connection ID. */
 1955
 1956            2 SSNCNCID UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 1957
 1958      /*K* BRKCNT - UBIN BYTE.
 1959      Contains the break count. */
 1960
 1961            2 BRKCNT UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1962
 1963      /*K* MINEDTBFRSIZ - UBIN BYTE.
 1964      Minimum edit buffer size.  If the size of the read
 1965      record (exclusive of activation character) is greater than
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          58   
 1966      or equal to this value, the record is saved for later
 1967      recall via re-read. */
 1968
 1969            2 MINEDTBFRSIZ UBIN BYTE %INIT(3)%ENIT CALIGNED,
 1970
 1971      /*K* LSTEDTBFRSTRID - UBIN BYTE.
 1972      Last edit buffer stream ID.
 1973      This field contains the stream ID of the last edit
 1974      buffer saved. */
 1975
 1976            2 LSTEDTBFRSTRID UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1977
 1978      /*K* TYPAHDBFRINPFNCX - UBIN BYTE.
 1979      Type-ahead buffer input function index.  This field is the index
 1980      to the start of
 1981      the partial input function string in the buffer pointed to by
 1982      KV$MVD.TYPAHDBFRINPFNC$. */
 1983
 1984            2 TYPAHDBFRINPFNCX UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1985
 1986      /*K* TYPAHDBFRCNT - UBIN BYTE.
 1987      Contains the type-ahead buffer count. */
 1988
 1989            2 TYPAHDBFRCNT UBIN BYTE CALIGNED %INIT(0)%ENIT,
 1990      %KV_FILBIT
 1991
 1992      /*K* CHNCAS - BIT(1).
 1993      If this flag is set, any input-editing operation that positions right
 1994      in the text toggles the case of any alphabetic characters under the
 1995      cursor. */
 1996
 1997            2 CHNCAS BIT(1) %INIT('0'B)%ENIT,
 1998
 1999      /*K* HDNTYPIS_DCB - BIT(1).
 2000      If set, means the page heading type is DCB (not SSN). */
 2001
 2002            2 HDNTYPIS_DCB BIT(1) %INIT('0'B)%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          59   
 2003
 2004      /*K* TYPAHD.
 2005      Type-ahead character control flags.  These flags are manipulated
 2006      throughout input character processing in order to determine
 2007      whether the character needs to be buffered in a type-ahead
 2008      buffer for later processing, or if the character has been
 2009      completely processed and can be discarded. */
 2010
 2011            2 TYPAHD,
 2012
 2013      /*K* TYPAHD.BFRCHR - BIT(1).
 2014      If set, means the character is to be buffered and is not part of an
 2015      input function sequence.  */
 2016
 2017              3 BFRCHR BIT(1) %INIT('0'B)%ENIT,
 2018
 2019      /*K* TYPAHD.BFRINPFNCCHR - BIT(1).
 2020      If set, means the character is to be buffered but is part of an
 2021      input function sequence.  */
 2022
 2023              3 BFRINPFNCCHR BIT(1) %INIT('0'B)%ENIT,
 2024
 2025      /*K* CLSPND - BIT(1).
 2026      Close pending.  VDH has taken an action (e.g., send end-of-file
 2027      that will cause the other end to initiate VDO_CLSRQS) that will
 2028      eventually cause VDH to close the path. */
 2029
 2030            2 CLSPND BIT(1) %INIT('0'B)%ENIT,
 2031
 2032      /*K* SND_CLSSSN_RSP - BIT(1).
 2033      Send close session response.  If this flag is set and VDH sends a close session,
 2034      VDH should send the response form instead of the request. */
 2035
 2036            2 SND_CLSSSN_RSP BIT(1) %INIT('0'B)%ENIT,
 2037
 2038      /*K* SND_OPNSSN_RSP - BIT(1).
 2039      Send open session response.  If this flag is set and VDH sends an open session,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          60   
 2040      VDH should send the response form instead of the request. */
 2041
 2042            2 SND_OPNSSN_RSP BIT(1) %INIT('0'B)%ENIT,
 2043
 2044      /*K* LGN - BIT(1).
 2045      If set, means that VDH is communicating to logon currently. */
 2046
 2047            2 LGN BIT(1) %INIT('0'B)%ENIT,
 2048      %KV_FILBIT
 2049
 2050      /*K* MRKRQSENB - BIT(1).
 2051      If set, specifies that the marker request gate is enabled. */
 2052
 2053            2 MRKRQSENB BIT(1) %INIT('0'B)%ENIT,
 2054
 2055      /*K* OTPBLK - BIT(1).
 2056      If set, means that output is blocked. */
 2057
 2058            2 OTPBLK BIT(1) %INIT('0'B)%ENIT,
 2059
 2060      /*K* WATOTPDLTMRK - BIT(1).
 2061      Wait for output delete marker.  If this flag is set, ignore output text. */
 2062
 2063            2 WATOTPDLTMRK BIT(1) %INIT('0'B)%ENIT,
 2064
 2065      /*K* WATINPDLTMRK - BIT(1).
 2066      Wait for read delete marker.  If this flag is set, ignore read requests. */
 2067
 2068            2 WATINPDLTMRK BIT(1) %INIT('0'B)%ENIT,
 2069
 2070      /*K* OUTPUTDISCARD - BIT(1).
 2071      If set, means ignore output mode. */
 2072
 2073            2 OUTPUTDISCARD BIT(1) %INIT('0'B)%ENIT,
 2074
 2075      /*K* LGCDSC - BIT(1).
 2076      If set, means a logical disconnect has occurred (INTDSCRQS was received). */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          61   
 2077
 2078            2 LGCDSC BIT(1) %INIT('0'B)%ENIT,
 2079
 2080      /*K* REDONL - BIT(1).
 2081      If set, the currently pending read is not to modify the read buffer.
 2082      Instead, any character that would otherwise go into the buffer is
 2083      re-interpreted via the user and system function tables as if it were
 2084      the NUL character. */
 2085
 2086            2 REDONL BIT(1) %INIT('0'B)%ENIT,
 2087
 2088      /*K* RLSSSN - BIT(1).
 2089      If set, means a release path request message has been received. */
 2090
 2091            2 RLSSSN BIT(1) %INIT('0'B)%ENIT,
 2092      %KV_FILBIT
 2093
 2094      /*K* DSCRSPRCV - BIT(1).
 2095      If set, means a DSCRSP message has been received. */
 2096
 2097            2 DSCRSPRCV BIT(1) %INIT('0'B)%ENIT,
 2098
 2099      /*K* OPN - BIT(1).
 2100      If set, means the path is open, i.e., VDH has received VDO_OPNSSN, and has not
 2101      received VDO_CLSSSN since. */
 2102
 2103            2 OPN BIT(1) %INIT('0'B)%ENIT,
 2104
 2105      /*K* STTRQSENB - BIT(1).
 2106      If set, means status requests (VDO_STTRQS) are enabled.  In simple
 2107      terms, setting this flag prevents
 2108      multiple outstanding status requests. */
 2109
 2110            2 STTRQSENB BIT(1) %INIT('1'B)%ENIT,
 2111
 2112      /*K* USRHLTINH - BIT(1).
 2113      User halt inhibit.  If this flag is set, do not allow user halts
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          62   
 2114      (pagination and ESC-H).  USRHLTINH is used for operator's consoles. */
 2115
 2116            2 USRHLTINH BIT(1) %INIT('0'B)%ENIT,
 2117
 2118      /*K* SSNCNCINT - BIT(1).
 2119      Session connection initiator.  If this flag is set, VDH initiated the session
 2120      connection (e.g., sent the KN_FCN_INIT), as opposed to
 2121      receiving a session connection request (e.g., receiving
 2122      KN_FCN_INIT_ACK). */
 2123
 2124            2 SSNCNCINT BIT(1) %INIT('0'B)%ENIT,
 2125
 2126      /*K* NO_WATREDTRG - BIT(1).
 2127      No-wait read request trigger.  If this flag is set, there is a
 2128      no-wait read request
 2129      waiting to be enabled. */
 2130
 2131            2 NO_WATREDTRG BIT(1) %INIT('0'B)%ENIT,
 2132
 2133      /*K* REDRQSPND - BIT(1).
 2134      Read request pending.  If this flag is set, incoming characters
 2135      directed at this
 2136      session should be gathered into a REDBFR if they do not comprise
 2137      an input function. */
 2138
 2139            2 REDRQSPND BIT(1) %INIT('0'B)%ENIT,
 2140
 2141      /*K* INPECH - BIT(1).
 2142      Input echoing flag.  This flag is set when INPCHR is nominally to be echoed.  */
 2143
 2144            2 INPECH BIT(1) %INIT('0'B)%ENIT,
 2145
 2146      /*K* INPCHR - CHAR(1).
 2147      Contains the input character to process next. */
 2148
 2149            2 INPCHR CHAR(1) %INIT(' ')%ENIT,
 2150      %KV_FILBIT
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          63   
 2151
 2152      /*K* CLKSET - BIT(1) ARRAY.
 2153      Contains flags indicating which of the eight VDH clocks have been set. */
 2154
 2155            2 CLKSET(0:7) BIT(1) %INIT('0'B*0)%ENIT,
 2156
 2157      /*K* REDBFR.
 2158      Contains the read buffer indexes and columns. */
 2159
 2160            2 REDBFR %KV_DBLBYTALG,
 2161
 2162      /*K* REDBFR.NXTX - SBIN WORD.
 2163      Next character index.  NXTX is the index into the read buffer where the next
 2164      character will go (assuming it goes at the end). */
 2165
 2166              3 NXTX SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2167
 2168      /*K* REDBFR.EDTLOWX - SBIN WORD.
 2169      Edit low index.  EDTLOWX is the index into the read buffer that corresponds to the
 2170      first character at the current edit point. */
 2171
 2172              3 EDTLOWX SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2173
 2174      /*K* REDBFR.EDTHI_X - SBIN WORD.
 2175      Edit high index.  EDTHI_X is the index into the read buffer that corresponds to the
 2176      last character at the current edit point. */
 2177
 2178              3 EDTHI_X SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2179
 2180      /*K* REDBFR.INSLOWX - SBIN WORD.
 2181      Insert Low Index.  INSLOWX is the edit-low-index of the left edge of the
 2182      editing window.  Moving below this character exits insert mode. */
 2183
 2184              3 INSLOWX SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2185
 2186      /*K* REDBFR.INSMODX - SBIN WORD.
 2187      Insert mode index.  INSMODX is the edit-low-index of the right edge of
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          64   
 2188      the editing window.
 2189      INSMODX may have been adjusted during editing to compensate
 2190      for shifts. */
 2191
 2192              3 INSMODX SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2193
 2194      /*K* REDBFR.DSPLOWX - SBIN WORD.
 2195      Low display index.  In horizontal scrolling, characters below DSPLOWX
 2196      are off the screen. */
 2197
 2198              3 DSPLOWX SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2199
 2200      /*K* REDBFR__ - KV$BFRDSC substructure.
 2201      Read buffer vector.  REDBFR__ describes the active portion of
 2202      the read buffer. */
 2203
 2204         %KV$BFRDSC (LVL = 2, NAME = REDBFR__, STCLASS = STCLASS, LAST = ",",
 2205           STRTYP = %KV_STRTYP_REDBFR, BFRRLSDSP = %KV_BFRRLSDSP_MSG);
 2206
 2207      /*K* RE_REDCLM - UBIN WORD.
 2208      Re-read column.  RE_REDCLM is the virtual column to position to when the current
 2209      input edit buffer is recalled. */
 2210
 2211            2 RE_REDCLM UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2212
 2213      /*K* SSNID - UBIN BYTE.
 2214      Contains the session ID which differentiates markers, etc. when there
 2215      are multiple sessions. */
 2216
 2217            2 SSNID UBIN BYTE CALIGNED %INIT(1)%ENIT,
 2218      %KV_FILBIT
 2219
 2220      /*K* CLMIS_BYTX - BIT(1).
 2221      Column is a byte index into the buffer.  If this flag is set,
 2222      the current input record has all "1-column characters".  "1-column
 2223      characters" means each character in the buffer occupies
 2224      one column, i.e., there are no backspaces or other control characters.*/
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          65   
 2225
 2226            2 CLMIS_BYTX BIT(1) %INIT('0'B)%ENIT,
 2227
 2228      /*K* MSGHLT - BIT(1).
 2229      Message halt.  If MSGHLT is set, halt the user after display of
 2230      DAT_IMD message. */
 2231
 2232            2 MSGHLT BIT(1) %INIT('0'B)%ENIT,
 2233
 2234      /*K* MSGLIN - BIT(1).
 2235      Message line.  The message line is to be used for DAT_IMD messages. */
 2236
 2237            2 MSGLIN BIT(1) %INIT('0'B)%ENIT,
 2238
 2239      /*K* BP - BIT(1).
 2240      Blank preservation.  If BP is set, trailing blanks are preserved on
 2241      the current input data. */
 2242
 2243            2 BP BIT(1) %INIT('1'B)%ENIT,
 2244
 2245      /*K* REDMLT - BIT(1).  Read multiple.  If REDMLT is set, the currently
 2246      active read operation is capable of accepting multiple data VDOs at once.
 2247      The remaining buffer size is in KV$SSN.SNDMAXNMBBYT. */
 2248
 2249            2 REDMLT BIT(1) %INIT('0'B)%ENIT,
 2250
 2251            2 * BIT(3) %INIT('0'B)%ENIT,
 2252
 2253      /*K* REDSTRID - UBIN BYTE.
 2254      Contains the stream ID of the currently reading stream. */
 2255
 2256            2 REDSTRID UBIN BYTE CALIGNED %INIT(0)%ENIT,
 2257      %KV_FILBIT
 2258            2 * BIT(8) %INIT('0'B)%ENIT,
 2259      /*K* TYPCND - BIT(32).
 2260      Contains a copy of KV$PTR.INPCNDPND reflecting conditions pending at the
 2261      beginning of the current type-ahead buffer stream. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          66   
 2262
 2263            2 TYPCND,
 2264              3 TRN BIT(%(2-FEP)) %INIT('0'B)%ENIT,
 2265              3 NOT_TRN BIT(%(16-FEP)) %INIT('0'B)%ENIT,
 2266              3 OPRX SBIN(%(18-2*FEP)) %INIT(0)%ENIT,
 2267
 2268      /*K* LSTPRMID - UBIN BYTE.
 2269      Last Parameter ID.  Contains the PRMID of the parameter most recently
 2270      used in a SETPRM, RSTPRM, or TGLPRM input operator.  The value is reset
 2271      to zero after the next VDHINPPRC input operator, so that tightly coupled
 2272      sequences like "reset EDTRHT - position word" can be detected and honored
 2273      properly. */
 2274
 2275            2 LSTPRMID UBIN BYTE CALIGNED %INIT(0)%ENIT,
 2276
 2277      %KV_FILBIT
 2278            2 * BIT(8) %INIT('0'B)%ENIT,
 2279            2 * (0:7) UBIN BYTE CALIGNED %INIT(0*0)%ENIT LAST
 2280      %MEND;
 2281      %EJECT;

14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          67   
 2282      /*F* NAME: KV$STR_ - VDH Stream Context
 2283
 2284      KV$STR contains the stream context block definition. */
 2285      /* Possible items to add: */
 2286      /* INPVRTDVC$ */
 2287      /* OTPVRTDVC$ */
 2288      /* DFLINPVRTDVC$ */
 2289      /* DFLOTPVRTDVC$ */
 2290      /* DVBYTE */
 2291
 2292      /* Stream context */
 2293
 2294
 2295      %MACRO KV$STR(NAME = KV$STR, LAST = ";", STCLASS = BASED, ACTCHRTBL = NIL);
 2296      %LSET LISTDIR = '0'B;
 2297      %LSET LISTEXP = '1'B;
 2298      %LSET LISTCOM = '0'B;
 2299      %LSET LISTSUB = '1'B;
 2300      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
 2301      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
 2302      %IF STC = 1;
 2303      %LSET INIT = CHARTEXT(' INIT');
 2304      %LSET ENIT = CHARTEXT('');
 2305      %ELSE;
 2306      %LSET INIT = CHARTEXT('/*');
 2307      %LSET ENIT = CHARTEXT('*/');
 2308      %ENDIF;
 2309      %IF TEXTCHAR(STCLASS) = 'BASED' AND TEXTCHAR(NAME) = 'KV$STR';
 2310      %EQU KV_STR = CHARTEXT('KV$PTR.STR$->KV$STR');
 2311      %ENDIF;
 2312      %LSET FEP = BITBIN(MODE_FEP);
 2313      %LSET KV_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
 2314      %LSET KV_FILBIT = CONCAT(' 2 * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
 2315      %LSET KV_FILBIT = CHARTEXT(SUBSTR(KV_FILBIT, FEP*LENGTHC(KV_FILBIT)));
 2316      DCL 1 NAME STCLASS %KV_DBLBYTALG,
 2317
 2318      /*K* SSN$ - PTR.
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          68   
 2319      Points to the session context block (KV$SSN). */
 2320
 2321            2 SSN$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2322
 2323      /*K* LNK$ - PTR.
 2324      Is the link to next KV$STR in the chain. */
 2325
 2326            2 LNK$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2327
 2328      /*K* MVD$ - PTR.
 2329      Points to the master virtual device context block (KV$MVD). */
 2330
 2331            2 MVD$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2332
 2333      /*K* OTPTAB$ - PTR.
 2334      Points to the output tabs. */
 2335
 2336            2 OTPTAB$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2337
 2338      /*K* PRM$ - PTR.
 2339      Points to the prompt. */
 2340
 2341            2 PRM$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2342
 2343      /*K* ACTCHRTBL$ - PTR.
 2344      Points to the activation character set. */
 2345
 2346            2 ACTCHRTBL$ PTR %KV_DBLBYTALG %INIT(ADDR(ACTCHRTBL))%ENIT,
 2347
 2348      /*K* EDTBFR__ - KV$BFRDSC substructure.
 2349      Contains the input edit buffer descriptor (that is, the saved input record). */
 2350
 2351      %KV$BFRDSC (LVL = 2, NAME = EDTBFR__, STCLASS = STCLASS, LAST = ",");
 2352
 2353      /*K* RE_REDCLM - UBIN WORD.
 2354      Re-read column.  RE_REDCLM contains the virtual column to position to
 2355      when the current
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          69   
 2356      input edit buffer is recalled. */
 2357
 2358            2 RE_REDCLM UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2359
 2360      /*K* ERR - KV$ERR.
 2361      Error status.  ERR contains information on the first error encountered
 2362      since reporting an error to the other end. */
 2363
 2364      %KV$ERR (LVL = 2, NAME = ERR, STCLASS = STCLASS, LAST = ",");
 2365
 2366      /*K* MAXRCRBYTSIZ - UBIN WORD.
 2367      Contains the maximum record byte size. */
 2368
 2369            2 MAXRCRBYTSIZ UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2370
 2371      /*K* DFLINPFLDSIZ - UBIN WORD.
 2372      Default input field size.  This field is used in computing the number of
 2373      columns to allocate for a non-forms input field on a 3270-type device. */
 2374
 2375            2 DFLINPFLDSIZ UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(80)%ENIT,
 2376
 2377      /*K* CNTWRTBFR$ - PTR.
 2378      Continued write buffer.  CNTWRTBFR$ points to a buffer being built
 2379      that contains concatenated continued writes, waiting for the
 2380      last segment in the series. */
 2381
 2382            2 CTNWRTBFR$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2383
 2384      /*K* SNDMAXNMBRCR - SBIN WORD.
 2385      Send maximum number of records.  This field contains the maximum
 2386      number of records VDH can
 2387      send without getting a further request for data from the other end. */
 2388
 2389            2 SNDMAXNMBRCR SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2390
 2391      /*K* LFTMRGCLM - UBIN WORD.
 2392      Contains the left margin column. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          70   
 2393
 2394            2 LFTMRGCLM UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(1)%ENIT,
 2395
 2396      /*K* REDTIMOUTPRDUNT - UBIN BYTE.
 2397      Read timeout period units.  Values for REDTIMOUTPRDUNT are
 2398      0 = 10 milliseconds, 1 = seconds, 2 = minutes. */
 2399
 2400            2 REDTIMOUTPRDUNT UBIN BYTE CALIGNED %INIT(0)%ENIT,
 2401
 2402      /*K* REDTIMOUTPRD - UBIN BYTE.
 2403      Contains the read time out period. */
 2404
 2405            2 REDTIMOUTPRD UBIN BYTE CALIGNED %INIT(0)%ENIT,
 2406
 2407      /*K* ID - UBIN BYTE.
 2408      Contains the stream ID. */
 2409
 2410            2 ID UBIN BYTE CALIGNED %INIT(0)%ENIT,
 2411      %KV_FILBIT
 2412
 2413      /*K* ACTONTRN - BIT(1).
 2414      If set, means honor the activation character set (KV$STR.ACTCHRTBL$)
 2415      on transparent IO. */
 2416
 2417            2 ACTONTRN BIT(1) %INIT('0'B)%ENIT,
 2418
 2419      /*K* RE_RED - BIT(1).
 2420      If set, means the last REDRQS was re-read. */
 2421
 2422            2 RE_RED BIT(1) %INIT('0'B)%ENIT,
 2423
 2424            2 * BIT(1) %INIT('0'B)%ENIT,
 2425
 2426            2 * BIT(1) %INIT('0'B)%ENIT,
 2427
 2428            2 * BIT(1) %INIT('0'B)%ENIT,
 2429
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          71   
 2430      /*K* WATRED - BIT(1).
 2431      Wait read.  If WATRED is set, the current read (if any) is a wait read. */
 2432
 2433            2 WATRED BIT(1) %INIT('0'B)%ENIT,
 2434
 2435      /*K* SNDIN_PRG - BIT(1).
 2436      If set, means a send is in progress (for a forms virtual device). */
 2437
 2438            2 SNDIN_PRG BIT(1) %INIT('0'B)%ENIT,
 2439
 2440      /*K* OPN - BIT(1).
 2441      If set, indicates that OPNSTR VDO has been received but not
 2442      CLSSTR.  */
 2443
 2444            2 OPN BIT(1) %INIT('0'B)%ENIT,
 2445
 2446      /*K* WRDWRPCLM - UBIN BYTE.
 2447      Wordwrap column.  This option breaks input at word boundaries before WRDWRPCLM. */
 2448
 2449            2 WRDWRPCLM UBIN BYTE CALIGNED %INIT(0)%ENIT,
 2450
 2451      /*K* WRDWRPSIZ - UBIN BYTE.
 2452      Contains the number of characters to be reused from last EDTBFR for word-wrap. */
 2453
 2454            2 WRDWRPSIZ UBIN BYTE CALIGNED %INIT(0)%ENIT,
 2455
 2456      /*K* AUTTABCLM - UBIN BYTE.
 2457      Autotab column.  This option starts new input at column AUTTABCLM. */
 2458
 2459            2 AUTTABCLM UBIN BYTE CALIGNED %INIT(0)%ENIT,
 2460
 2461      %KV_FILBIT
 2462
 2463      /*K* TRNUSRINPFNC - BIT(1).
 2464      If set, means process user input functions, when doing a transparent read.
 2465      Or, if no function-keys are IMPed, it means activate on them and
 2466      reset this bit. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          72   
 2467
 2468            2 TRNUSRINPFNC BIT(1) %INIT('0'B)%ENIT,
 2469
 2470      /*K* WRDWRP - BIT(1).
 2471      Word wrap.  This flag is used to turn word wrap on or off without changing WRDWRPCLM.*/
 2472            2 WRDWRP BIT(1) %INIT('0'B)%ENIT,
 2473            2 * BIT(6) %INIT('0'B)%ENIT,
 2474
 2475      /*K* GRPRND - BIT(8).
 2476      Contains a KV$GRPRND indicating the desired graphic rendition of output
 2477      for the stream. */
 2478
 2479            2 GRPRND BIT(%(9-FEP)) %INIT('0'B)%ENIT,
 2480
 2481            2 * BIT(%(9-FEP)) %INIT('0'B)%ENIT LAST
 2482      %MEND;
 2483      /*F* NAME: KV@USRENT - VDH User Entry Auto Structure
 2484
 2485      The KV@USRENT macro must be invoked by a procedure invoking the
 2486      KV$USRENT macro.  KV@USRENT provides storage in AUTO for saved
 2487      parameters.
 2488      */
 2489      %MACRO KV@USRENT(NAME = KV@USRENT, LAST = ";", STCLASS = AUTO);
 2490      %LSET LISTDIR = '0'B;
 2491      %LSET LISTEXP = '1'B;
 2492      %LSET LISTCOM = '0'B;
 2493      %LSET LISTSUB = '1'B;
 2494      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
 2495      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
 2496      %IF STC = 1;
 2497      %LSET INIT = CHARTEXT(' INIT');
 2498      %LSET ENIT = CHARTEXT('');
 2499      %ELSE;
 2500      %LSET INIT = CHARTEXT('/*');
 2501      %LSET ENIT = CHARTEXT('*/');
 2502      %ENDIF;
 2503      %LSET FEP = BITBIN(MODE_FEP);
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          73   
 2504      %LSET KV_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
 2505      %LSET KV_FILBIT = CONCAT(' 2 * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
 2506      %LSET KV_FILBIT = CHARTEXT(SUBSTR(KV_FILBIT, FEP*LENGTHC(KV_FILBIT)));
 2507      DCL 1 NAME STCLASS %KV_DBLBYTALG,
 2508
 2509      /*K* SVDPTR$ - PTR.
 2510      Points to the saved KV$PTR$. */
 2511
 2512            2 SVDPTR$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT;
 2513      %MEND;
 2514      /*F* NAME: KV$USRPRM__ - VDH User Parameters
 2515
 2516      KV$USRPRM is the VDH user parameters table.
 2517      The KV$USRPRM_INT macro must be invoked before invoking this macro
 2518      to build a static or constant KV$USRPRM.
 2519
 2520      */
 2521      %MACRO KV$USRPRM(NAME = KV$USRPRM, LAST = ";", STCLASS = BASED,
 2522                       INHLVL = 63, HLTMSG = "'(CR TO GO)'", TRNTBLHEDPTR$ = NIL, INPFNCTBLHEDPTR$ = NIL,
 2523                       PRFFNCTBL = NIL, USRSBR = NIL, STT = NIL);
 2524      %LSET LISTDIR = '0'B;
 2525      %LSET LISTEXP = '1'B;
 2526      %LSET LISTCOM = '0'B;
 2527      %LSET LISTSUB = '1'B;
 2528      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
 2529      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
 2530      %IF STC = 1;
 2531      %LSET INIT = CHARTEXT(' INIT');
 2532      %LSET ENIT = CHARTEXT('');
 2533      %ELSE;
 2534      %LSET INIT = CHARTEXT('/*');
 2535      %LSET ENIT = CHARTEXT('*/');
 2536      %ENDIF;
 2537      %IF TEXTCHAR(STCLASS) = 'BASED' AND TEXTCHAR(NAME) = 'KV$USRPRM';
 2538      %SET KV_USRPRM = CHARTEXT('KV$PTR.VDI$->KV$VDI.USRPRM$->KV$USRPRM');
 2539      %ENDIF;
 2540      %LSET FEP = BITBIN(MODE_FEP);
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          74   
 2541      %LSET KV_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
 2542      %LSET KV_FILBIT = CONCAT(' 2 * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
 2543      %LSET KV_FILBIT = CHARTEXT(SUBSTR(KV_FILBIT, FEP*LENGTHC(KV_FILBIT)));
 2544      DCL 1 NAME STCLASS %KV_DBLBYTALG,
 2545
 2546      /*K* INHLVL - UBIN WORD.
 2547      Contains the inhibit level to be used to prevent any interference from
 2548      interrupts.  This field is not used (it is superseded by the handler
 2549      parameter of the same name).  */
 2550
 2551            2 %CHARTEXT('INHLVL') UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(INHLVL)%ENIT,
 2552
 2553      /*K* HLTMSGSIZ - UBIN BYTE.
 2554      Contains the size of HLTMSG. */
 2555
 2556            2 HLTMSGSIZ UBIN BYTE CALIGNED %INIT(%LENGTHC(HLTMSG))%ENIT,
 2557
 2558      /*K* HLTMSG - CHAR(19).
 2559      Contains the text to print at end-of-device-page on screen terminals,
 2560      e.g, '(CR TO GO)'. */
 2561            2 %CHARTEXT('HLTMSG') CHAR(19) %INIT(HLTMSG)%ENIT,
 2562
 2563      /*K* SETPRMPREPRC - BIT(1) ARRAY.
 2564      Set-parameter pre-processing.  SETPRMPREPRC is indexed by parameter ID
 2565      (KV_PRMID_...), yielding a flag indicating VDH should call the
 2566      VDH-user before setting this parameter in VDH context (via
 2567      KV$USR_SETPRM).  For a discussion of parameter IDs, see KV$VDH_SETPRM,
 2568      PRMID.  */
 2569
 2570      %IF STC = 1;
 2571            2 SETPRMPREPRC %KV_DBLBYTALG,
 2572              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPREPRC0, 0, 32))%ENIT,
 2573              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPREPRC0, 32))%ENIT,
 2574              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPREPRC1, 0, 32))%ENIT,
 2575              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPREPRC1, 32))%ENIT,
 2576              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPREPRC2, 0, 32))%ENIT,
 2577              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPREPRC2, 32))%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          75   
 2578              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPREPRC3, 0, 32))%ENIT,
 2579              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPREPRC3, 32))%ENIT,
 2580      %ELSE;
 2581            2 SETPRMPREPRC(0:%(287-32*FEP)) BIT(1) UNAL,
 2582      %ENDIF;
 2583
 2584      /*K* SETPRMPSTPRC - BIT(1) ARRAY.
 2585      Set-parameter post-processing.  SETPRMPSTPRC is indexed by parameter
 2586      ID (KV_PRMID_...), yielding a flag indicating VDH should call the
 2587      VDH-user after setting this parameter in VDH context (via
 2588      KV$USR_SETPRM).  For a discussion of parameter IDs, see KV$VDH_SETPRM,
 2589      PRMID.  */
 2590
 2591      %IF STC = 1;
 2592            2 SETPRMPSTPRC %KV_DBLBYTALG,
 2593              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPSTPRC0, 0, 32))%ENIT,
 2594              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPSTPRC0, 32))%ENIT,
 2595              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPSTPRC1, 0, 32))%ENIT,
 2596              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPSTPRC1, 32))%ENIT,
 2597              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPSTPRC2, 0, 32))%ENIT,
 2598              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPSTPRC2, 32))%ENIT,
 2599              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPSTPRC3, 0, 32))%ENIT,
 2600              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(SETPRMPSTPRC3, 32))%ENIT,
 2601      %ELSE;
 2602            2 SETPRMPSTPRC(0:%(287-32*FEP)) BIT(1) UNAL,
 2603      %ENDIF;
 2604
 2605      /*K* STREVTENB - BIT(1) ARRAY.
 2606      Structure event enable.  STREVTENB is indexed by structure type
 2607      (KV_STRTYP_...), yielding a flag indicating the VDH-user wants to be
 2608      called whenever a structure of that type is allocated
 2609      (KV$USR_EVT/KV_USR_EVT_ID_GETSTR) or released (KV$USR_EVT/KV_USR_EVT_ID_RLSSTR).
 2610      See KV$VDH_GETBFR, STRTYP, for a list of structure types.
 2611
 2612      The proper KV$VDI.USREVTENB bit must also be set. */
 2613
 2614      %IF STC = 1;
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          76   
 2615            2 STREVTENB %KV_DBLBYTALG,
 2616              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(STREVTENB0, 0, 32))%ENIT,
 2617              3 * BIT(%(36-4*FEP))  %INIT(%SUBBIT(STREVTENB0, 32))%ENIT,
 2618      %ELSE;
 2619            2 STREVTENB(0:%(71-8*FEP)) BIT(1),
 2620      %ENDIF;
 2621
 2622      /*K* INPFNCTBLHEDPTR$ - PTR.
 2623      Input function table head pointer pointer.
 2624      This pointer points to the first KV$INPFNCTBL in the chain.
 2625      e.g., INPFNCTBLHEDPTR$ points to X, and X points to the first KV$INPFNCTBL. */
 2626
 2627            2 %CHARTEXT('INPFNCTBLHEDPTR$') PTR %KV_DBLBYTALG %INIT(ADDR(INPFNCTBLHEDPTR$))%ENIT,
 2628
 2629      /*K* TRNTBLHEDPTR$ - PTR.
 2630      Translate table head pointer pointer.
 2631      This pointer points to the first KV$TRNTBL in the chain,
 2632      e.g., TRNTBLHEDPTR$ points to X, and X points to the first KV$TRNTBL. */
 2633
 2634            2 %CHARTEXT('TRNTBLHEDPTR$') PTR %KV_DBLBYTALG %INIT(ADDR(TRNTBLHEDPTR$))%ENIT,
 2635
 2636      /*K* STT$ - PTR.
 2637      Points to the KV$STT (statistics) buffer.  This structure
 2638      contains statistics that are maintained by VDH. */
 2639
 2640            2 STT$ PTR %KV_DBLBYTALG %INIT(ADDR(STT))%ENIT,
 2641
 2642      /*K* USRSBR$ - EPTR.
 2643      User subroutine pointer.  USRSBR$ points to the subroutine contained
 2644      in the user of VDH (e.g.,  RDH or real device handler) that is called by
 2645      VDH when VDH has a request for the RDH to perform. */
 2646
 2647            2 USRSBR$ EPTR %KV_DBLBYTALG %INIT(ENTADDR(USRSBR))%ENIT,
 2648
 2649      /*N* LCLFNCTBL$ - PTR.  Points to an input-function-table to be used when
 2650      KV$VDI.LCLMOD is set.  If any input-function-table invokes the LDLMOD
 2651      VDHPRC, then this pointer must be non-nil. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          77   
 2652
 2653      /*K* PFRFNCTBL$ - PTR.
 2654      Points to the default profile-function-table to be
 2655      used when making new context.  This pointer is currently used only
 2656      by 3270, where all the devices can use the same table. */
 2657
 2658
 2659            2 PRFFNCTBL$ PTR %KV_DBLBYTALG %INIT(ADDR(PRFFNCTBL))%ENIT LAST
 2660      %MEND;
 2661      %EJECT;

14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          78   
 2662      /*F* NAME: KV$VDI - VDH Interface Context
 2663
 2664      KV$VDI is the interface context block definition. */
 2665
 2666      /*N* items we may need: */
 2667      /*N* un-reg conditions (phsdsc, etc.) */
 2668      /* VDI (virtual device interface) context. */
 2669
 2670
 2671      %MACRO KV$VDI(NAME = KV$VDI, LAST = ";", STCLASS = BASED,
 2672      PTREQU (YES = '1'B, NO = '0'B) = '1'B);
 2673      %LSET LISTDIR = '0'B;
 2674      %LSET LISTEXP = '1'B;
 2675      %LSET LISTCOM = '0'B;
 2676      %LSET LISTSUB = '1'B;
 2677      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
 2678      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
 2679      %IF STC = 1;
 2680      %LSET INIT = CHARTEXT(' INIT');
 2681      %LSET ENIT = CHARTEXT('');
 2682      %ELSE;
 2683      %LSET INIT = CHARTEXT('/*');
 2684      %LSET ENIT = CHARTEXT('*/');
 2685      %ENDIF;
 2686      %IF TEXTCHAR(STCLASS) = 'BASED' AND TEXTCHAR(NAME) = 'KV$VDI' AND PTREQU;
 2687      %EQU KV_VDI = CHARTEXT('KV$PTR.VDI$->KV$VDI');
 2688      %ENDIF;
 2689      %LSET FEP = BITBIN(MODE_FEP);
 2690      %LSET KV_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
 2691      %LSET KV_FILBIT = CONCAT(' 2 * BIT(1)', SUBSTR('INIT(''0''B)', 10-10*STC), ', ');
 2692      %LSET KV_FILBIT = CHARTEXT(SUBSTR(KV_FILBIT, FEP*LENGTHC(KV_FILBIT)));
 2693      DCL 1 NAME STCLASS %KV_DBLBYTALG,
 2694
 2695      /*K* CHN$ - PTR.
 2696      Is the channel table (KH$CHN) entry pointer.  */
 2697
 2698            2 CHN$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          79   
 2699
 2700      /*K* USRCTX$ - PTR.
 2701      User context pointer.  USRCTX$ points to a context block in the
 2702      user of VDH which identifies to the user which device,
 2703      program, etc. is being referenced.  VDH has no knowledge
 2704      of the structure of this context. */
 2705
 2706            2 USRCTX$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2707
 2708      /*K* SSN$ - PTR.
 2709      Points to the session context (KV$SSN). */
 2710
 2711            2 SSN$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2712
 2713      /*K* ASNINPPTR$ - PTR.
 2714      Asynchronous input KV$PTR pointer.  ASNINPPTR$ points to the KV$PTR block
 2715      used for asynchronous (to all sessions) requests.  These
 2716      include such things as immediate-only character
 2717      processing. */
 2718
 2719      /* When there is no type-ahead for this session, */
 2720      /* asynchronous (immediate) processing is in sync */
 2721      /* with synchronous-to-this-session (read) processing. */
 2722      /* If the asynchronous KV$PTR points to this session, */
 2723      /* we copy the synchronous KV$PTR structure over the asynchronous */
 2724      /* KV$PTR structure so that asynchronous (immediate) */
 2725      /* processing can proceed without disturbing the data we'll */
 2726      /* need later (e.g., when we get a read or write) to pick */
 2727      /* up where we left off.  Simple, eh? */
 2728
 2729            2 ASNINPPTR$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2730
 2731      /*K* USRPRM$ - PTR.
 2732      Points to KV$USRPRM. */
 2733
 2734            2 USRPRM$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2735
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          80   
 2736      /*K* OTPBFR_ - KV$VECTOR.
 2737      Output buffer vector.  OTPBFR_ describes the remaining portion of
 2738      the output buffer. */
 2739
 2740      %KV$VECTOR (LVL = 2, NAME = OTPBFR_, STCLASS = STCLASS, LAST = ",");
 2741
 2742      /*K* SSNCNT - UBIN WORD.
 2743      Contains the number of sessions attached to this instance. */
 2744
 2745            2 SSNCNT UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2746            2 * UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2747
 2748      /*K* EDTWND$ - PTR.
 2749      Points to any saved edit window text (the buffer is a KV$INPOPR_TXT, but with
 2750      STRBYTSIZ in word 0 like KV$RCR). */
 2751
 2752            2 EDTWND$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2753
 2754      /*K* TRCBFR$ - PTR.
 2755      Points to KV$TRCBFR (the VDH trace buffer). */
 2756
 2757            2 TRCBFR$ PTR %KV_DBLBYTALG %INIT(ADDR(NIL))%ENIT,
 2758
 2759      /*K* TRCBFRBYTSIZ - UBIN WORD.
 2760      Contains the trace buffer (KV$TRCBFR) byte size. */
 2761
 2762            2 TRCBFRBYTSIZ UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2763
 2764      /*K* TMPOTPCHRCNT - SBIN WORD.
 2765      Temporary output character count.  VDH increments this count
 2766      whenever it increments KV$SSN.OTPCHRCNT.  The VDH-user may
 2767      do whatever it wants with this cell.  The intent of
 2768      this cell is to allow the VDH-user to easily monitor
 2769      the increments to the output character count since some event
 2770      of significance to the VDH-user. */
 2771
 2772            2 TMPOTPCHRCNT SBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          81   
 2773
 2774      /*K* RE_DSPLOWX - UBIN WORD.
 2775      Re-display-input starting point. If RE_DSPINP is set,
 2776      the lowest EDTX that needs to be displayed is maintained here. */
 2777
 2778            2 RE_DSPLOWX UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2779
 2780      /*K* RCVFLWCTRMAXCRD - UBIN WORD.
 2781      Receive flow control maximum credits.  In simple terms, this is the
 2782      number of bytes that the other end can send before it has to
 2783      wait for an acknowledgement of the data. */
 2784
 2785            2 RCVFLWCTRMAXCRD UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(1000)%ENIT,
 2786      /*N* GET RID OF TEMP INIT OF RCVFLWCTRMAXCRD */
 2787      %KV_FILBIT
 2788
 2789      /*K* DFR.
 2790      Contains deferred execution information. */
 2791
 2792            2 DFR,
 2793
 2794      /*K* DRF.USR - BIT(1) ARRAY.
 2795      Deferred user execution.  Which bit is set indicates to the
 2796      VDH-user what process was deferred.  VDH does not understand
 2797      the meaning of particular bits, but only the relevance of the
 2798      group. */
 2799
 2800              3 USR(0:3) BIT(1) %INIT('0'B*0)%ENIT,
 2801
 2802      /*K* DRF.SCH - BIT(1).
 2803      Schedule.  The VDH-user requested that this user be scheduled,
 2804      for other than re-entrancy deferring. */
 2805
 2806              3 SCH BIT(1) %INIT('0'B)%ENIT,
 2807
 2808      /*K* PRG.
 2809      Contains the purge flags. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          82   
 2810
 2811            2 PRG,
 2812
 2813      /*K* PRG.OTP - BIT(1).
 2814      If set, means output data has been purged. */
 2815
 2816              3 OTP BIT(1) %INIT('0'B)%ENIT,
 2817
 2818      /*K* PRG.RED - BIT(1).
 2819      If set, means read data has been purged. */
 2820              3 RED BIT(1) %INIT('0'B)%ENIT,
 2821
 2822      /*K* PRG.TYPAHD - BIT(1).
 2823      If set, means type-ahead data has been purged. */
 2824              3 TYPAHD BIT(1) %INIT('0'B)%ENIT,
 2825
 2826      %KV_FILBIT
 2827      /*K* CRSRED - BIT(1).
 2828      Cursor-read.  The cursor only stops on reading sessions when moved
 2829      from the keyboard or by terminating the active session.
 2830      */
 2831            2 CRSRED BIT(1) %INIT('0'B)%ENIT,
 2832      /*K* KEPTYP - BIT(1).
 2833      Keep type-ahead.  When the cursor moves automatically to a new read,
 2834      the typeahead moves with it.
 2835      */
 2836            2 KEPTYP BIT(1) %INIT('0'B)%ENIT,
 2837            2 * BIT(6) %INIT('0'B)%ENIT,
 2838
 2839      /*K* PRTTYP - UBIN BYTE.
 2840      Contains the parity type (even/odd/zero/one/none). */
 2841
 2842            2 PRTTYP UBIN BYTE CALIGNED %INIT(0)%ENIT,
 2843      %KV_FILBIT
 2844
 2845      /*K* BSY - BIT(1).
 2846      Busy.  If BSY is set, VDH is executing or has never executed (awaiting
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          83   
 2847      connect ACK). */
 2848
 2849            2 BSY BIT(1) %INIT('1'B)%ENIT,
 2850
 2851      /*K* PHSDSC - BIT(1).
 2852      If set, means a physical disconnect was reported. */
 2853
 2854            2 PHSDSC BIT(1) %INIT('0'B)%ENIT,
 2855
 2856      /*K* FULLDUPLEXPAPERTAPE - BIT(1).
 2857      Full duplex paper tape.  If this flag is set, send DC1/DC3 (XON/XOFF)
 2858      to start and stop the paper tape reader. */
 2859
 2860            2 FULLDUPLEXPAPERTAPE BIT(1) %INIT('0'B)%ENIT,
 2861
 2862      /*K* RE_DSPINP - BIT(1).
 2863      Re-display input.  If this flag is set, when exiting input processing for
 2864      the last input block, re-display the current read buffer, if any. */
 2865
 2866            2 RE_DSPINP BIT(1) %INIT('0'B)%ENIT,
 2867
 2868      /*K* RQSOTP - BIT(1).
 2869      Request output.  If this flag is set, the user has requested output. */
 2870
 2871            2 RQSOTP BIT(1) %INIT('1'B)%ENIT,
 2872
 2873      /*K* DVCPGNENB - BIT(1).
 2874      Device pagination is enabled.   DVCPGNENB is only reset while doing
 2875      device pagination. */
 2876
 2877            2 DVCPGNENB BIT(1) %INIT('1'B)%ENIT,
 2878
 2879      /*K* HALFDUPLEXPAPERTAPE - BIT(1).
 2880      Half duplex paper tape.  If this flag is set, FULLDUXPAPERTAPE
 2881      conventions are to be followed and absolutely no characters are to
 2882      be sent to the terminal for either output or echoing.  */
 2883
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          84   
 2884            2 HALFDUPLEXPAPERTAPE BIT(1) %INIT('0'B)%ENIT,
 2885
 2886      /*K* AUTCRS - BIT(1).
 2887      Auto-cursor.  When a new read starts, the cursor moves to it if it
 2888      isn't already in a reading session.
 2889      */
 2890            2 AUTCRS BIT(1) %INIT('1'B)%ENIT,
 2891
 2892      /*K* OTPCNDPND.
 2893      Contains the output conditions pending. */
 2894
 2895            2 OTPCNDPND %KV_DBLBYTALG,
 2896
 2897      /*K* OTPCNDPND.PST - UBIN WORD.
 2898      Contains the output condition:  positioning. */
 2899
 2900              3 PST UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2901
 2902      /*K* RCVFLWCTRMINCRDINC - UBIN WORD.
 2903      Receive flow control minimum credit increment.  If VDH is
 2904      about to send a credit increment for flow control, it checks
 2905      to make sure the increment is greater that this value.
 2906      The purpose of this is to avoid sending a lot of small increments,
 2907      which does little other than waste CPU.  This does not apply
 2908      if VDH blocks on output. */
 2909
 2910            2 RCVFLWCTRMINCRDINC UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(125)%ENIT,
 2911
 2912      /*K* OTPCHRCNTAFTLF - UBIN WORD.
 2913      Contains the output character count after the last line feed. */
 2914
 2915            2 OTPCHRCNTAFTLF UBIN(%(18-2*FEP)) %KV_DBLBYTALG %INIT(0)%ENIT,
 2916      %KV_FILBIT
 2917
 2918      /*K* INTREDINH - BIT(1).
 2919      Initialize read inhibit.  This flag is used by VDH to inhibit recursion
 2920      while a read is being initialized. */
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          85   
 2921
 2922            2 INTREDINH BIT(1) %INIT('0'B)%ENIT,
 2923
 2924      /*K* PRTCHK - BIT(1).
 2925      If set, means perform a parity check.     */
 2926
 2927            2 PRTCHK BIT(1) %INIT('0'B)%ENIT,
 2928
 2929      /*K* INPDATLST - BIT(1).
 2930      If set, means read data has been lost. */
 2931
 2932            2 INPDATLST BIT(1) %INIT('0'B)%ENIT,
 2933
 2934      /*K* UN_KNWPST - BIT(1).
 2935      Unknown position.  VDH does not know the current position of the
 2936      real device's cursor or carriage.  This flag is generally set at the
 2937      start of a session or after an output purge. */
 2938
 2939            2 UN_KNWPST BIT(1) %INIT('1'B)%ENIT,
 2940
 2941      /*K* INTPHSDSC - BIT(1).
 2942      Initiate physical disconnect.  If this flag is set and this instance of VDI
 2943      disconnects, disconnect the line.
 2944      The actual disconnecting of the line is the responsibility
 2945      of the VDH-user. */
 2946
 2947            2 INTPHSDSC BIT(1) %INIT('0'B)%ENIT,
 2948
 2949      /*K* RLSVDI - BIT(1).
 2950      Release VDI.  If this flag is set when disconnecting the last session associated
 2951      with this instance of VDI, release this instance of VDI
 2952      (essentially KV$VDI and a KV$PTR). */
 2953
 2954            2 RLSVDI BIT(1) %INIT('0'B)%ENIT,
 2955
 2956      /*K* USEOTPBFR - BIT(1).
 2957      Use output buffer.  If this flag is set, use KV$VDI.OTPBFR_ for output requests
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          86   
 2958      (rather than KV$USR_DAT) that are not binary or transparent. */
 2959
 2960            2 USEOTPBFR BIT(1) %INIT('1'B)%ENIT,
 2961
 2962      /*K* USEOTPBFRBNR - BIT(1).
 2963      Use output buffer, binary.  If this flag is set,
 2964      use KV$VDI.OTPBFR_ for output requests
 2965      (rather than KV$USR_DAT) that are binary. */
 2966
 2967            2 USEOTPBFRBNR BIT(1) %INIT('1'B)%ENIT,
 2968      %KV_FILBIT
 2969
 2970      /*K* USEOTPBFRTRN - BIT(1).
 2971      Use output buffer, transparent.  If this flag is set,
 2972      use KV$VDI.OTPBFR_ for output requests
 2973      (rather than KV$USR_DAT) that are transparent. */
 2974
 2975            2 USEOTPBFRTRN BIT(1) %INIT('1'B)%ENIT,
 2976
 2977      /*K* INPUNT - UBIN(2).
 2978      Input unit.  Equate identifiers for INPUNT are listed in the following
 2979      table.
 2980      ..::TB "^\Identifier\#20\Meaning"
 2981      .xeq KV_GLBCNS_E KV_INPUNT_E KV_INPUNT_BLK
 2982      .xeq KV_GLBCNS_E KV_INPUNT_E KV_INPUNT_CHR
 2983      .xeq KV_GLBCNS_E KV_INPUNT_E KV_INPUNT_RCR
 2984      ..::TB
 2985      */
 2986
 2987            2 INPUNT UBIN(2) UNAL %INIT(2)%ENIT,
 2988
 2989      /*K* USRRQSDAT.
 2990      User request data.  VDH is expecting data from the VDH-user.
 2991      */
 2992
 2993            2 USRRQSDAT,
 2994
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          87   
 2995      /*K* USRRQSDAT.RED - BIT(1).
 2996      User request data; read.  If this flag is set, VDH is expecting input
 2997      data from the VDH-user, that is, a read is outstanding. */
 2998
 2999              3 RED BIT(1) %INIT('0'B)%ENIT,
 3000
 3001      /*K* USRRQSDAT.TYPAHD - BIT(1).
 3002      User request data; type-ahead.  If this flag is set, VDH is expecting
 3003      input data from the VDH-user, but no read is currently pending.*/
 3004
 3005              3 TYPAHD BIT(1) %INIT('0'B)%ENIT,
 3006
 3007      /*N* LCLMOD - BIT(1).
 3008      If set, indicates that the terminal user has entered local
 3009      mode.  In this mode, the system-input-function table is pointed to
 3010      by KV$USRPRM.LCLFNCTBL$ and includes functions such as window manipulation. */
 3011
 3012            2 LCLMOD BIT(1) %INIT('0'B)%ENIT,
 3013
 3014      /*K* SHRTRCBFR - BIT(1).
 3015      Share trace buffer.  If this flag is set, KV$TRCBFR should be shared between
 3016      KV$VDI and KV$SSN.  Otherwise, they each get their own trace buffers. */
 3017
 3018            2 SHRTRCBFR BIT(1) %INIT('1'B)%ENIT,
 3019      /*K* MCRFPL - BIT(1).
 3020      MicroFPL.  The terminal is a PC with microFPL capabilities.
 3021      */
 3022            2 MCRFPL BIT(1) %INIT('0'B)%ENIT,
 3023
 3024      /*K* LINSPD - UBIN BYTE.
 3025      Line speed.  Units are those passed on SET/GET parameters requests. */
 3026
 3027            2 LINSPD UBIN BYTE CALIGNED %INIT(0)%ENIT,
 3028      %KV_FILBIT
 3029
 3030      /*K* USREVTENB - BIT(1) ARRAY.
 3031      User event enable.  This array is indexed by event id (KV_USR_EVT_ID_...),
14:53 JUL 28 '97 KV$GLBCTX.:E05SI                                          88   
 3032      yielding a flag indicating whether the VDH-user wants to be notified
 3033      of that event.  See KV$USR_EVT, ID, for a list of event IDs. */
 3034
 3035            2 USREVTENB(0:%KV_USR_EVT_ID_HI) BIT(1) %INIT('0'B*0)%ENIT,
 3036
 3037      /*K* VDHEVTENB - BIT(1) ARRAY.
 3038      VDH event enable.  This array is indexed by event id (KV_VDH_EVT_ID_...),
 3039      yielding a flag indicating whether the VDH wants to be notified of
 3040      of that event.  See KV$USR_EVT, ID, for a list of event IDs. */
 3041
 3042      %LSET FILLER = 16-MOD(KV_USR_EVT_ID_HI+KV_VDH_EVT_ID_HI+10, 16);
 3043      %IF FILLER ~= 16;
 3044            2 * BIT(%FILLER)%INIT('0'B)%ENIT,
 3045      %ENDIF;
 3046            2 VDHEVTENB(0:%KV_VDH_EVT_ID_HI) BIT(1) %INIT('0'B*0)%ENIT LAST
 3047      %MEND;

