VERSION E05

Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:1
        1                     *M* KXS$SLCC
        2                     *T***********************************************************
        3                     *T*                                                         *
        4                     *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
        5                     *T*                                                         *
        6                     *T***********************************************************
        7     1                   OUNAME KXS$SLCC
        8     2                   SYMDEF    KXS$SPM,KXS$00
        9     3                   INCLUDE KW_SLCC_E
       10    73                   INCLUDE KX_L2_E
       11   241                   INCLUDE KX_SLCC_E,LIST
        1                     /*M* KX_SLCC_E equates for KXS$SLCC */
        2                     /*T***********************************************************/
        3                     /*T*                                                         */
        4                     /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5                     /*T*                                                         */
        6                     /*T***********************************************************/
        7                     /*X* DFC */
        8                     /*  CCB offsets - in bytes */
        9   242  000          %EQU K$CCB_LNK = 0;
       10   243  004          %EQU K$CCB_DATA_ADR = 4;
       11   244  006          %EQU K$CCB_RANGE = 6;                   /* Original range                     *
                              /
       12   245  008          %EQU K$CCB_R_RANGE = 8;                 /* Remaining range                    *
                              /
       13                     /* Frame offsets - in bytes */
       14   246  000          %EQU K$FRAME_ADR = 0;
       15   247  001          %EQU K$FRAME_CTL_SI = 1;
       16   248  002          %EQU K$FRAME_CTL_RPF = 2;
       17                     /* System area offsets */
       18   249  056          %EQU KX_L2_T1S = KX_L2_T1S#/8;
       19   250  02C          %EQU KX_L2_K = KX_L2_K#/8;
       20   251  02E          %EQU KX_L2_N2 = KX_L2_N2#/8;
       21   252  03C          %EQU KX_L2_ADR_CMND = KX_L2_ADR_CMND#/8;
       22   253  03D          %EQU KX_L2_ADR_RESP = KX_L2_ADR_RESP#/8;
       23   254  03E          %EQU KX_L2_P_CCB_LNK = KX_L2_P_CCB_LNK#/8;
Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:2
       24   255  042          %EQU KX_L2_P_CCB_DATA_ADR = KX_L2_P_CCB_DATA_ADR#/8;
       25   256  044          %EQU KX_L2_P_CCB_RANGE = KX_L2_P_CCB_RANGE#/8;
       26   257  04E          %EQU KX_L2_P_FRAME_ADR = KX_L2_P_FRAME_ADR#/8;
       27   258  04F          %EQU KX_L2_P_FRAME_CTLSI = KX_L2_P_FRAME_CTLSI#/8;
       28   259  050          %EQU KX_L2_P_FRAME_CTLRPF = KX_L2_P_FRAME_CTLRPF#/8;
       29   260  051          %EQU KX_L2_P_FRAME_FRMR_CTL = KX_L2_P_FRAME_FRMR_CTL#/8;
       30   261  053          %EQU KX_L2_P_FRAME_FRMR_VS = KX_L2_P_FRAME_FRMR_VS#/8;
       31   262  054          %EQU KX_L2_P_FRAME_FRMR_CRVR = KX_L2_P_FRAME_FRMR_CRVR#/8;
       32   263  055          %EQU KX_L2_P_FRAME_FRMR_BITS = KX_L2_P_FRAME_FRMR_BITS#/8;
       33   264  05C          %EQU KX_L2_FLG = KX_L2_FLG#/8;
       34   265  080          %EQU KX_L2_FLG_BLK@M = 128**-(KX_L2_FLG_BLK#&7);
       35   266  008          %EQU KX_L2_FLG_OK@M = 128**-(KX_L2_FLG_OK#&7);
       36   267  03A          %EQU KX_L2_STATES = KX_L2_STATES#/8;
       37   268  00B          %EQU KX_L2_SLCCSTT = KX_L2_SLCCSTT#/8;
       38   269  0EC          %EQU KX_L2_COMBUF = KX_L2_COMBUF#/8;
       39   270  080          %EQU KX_L2_COMBUF_DATAVL@M = 128**-(KX_L2_COMBUF_DATAVL#&7);
       40   271  040          %EQU KX_L2_COMBUF_FEPRDY@M = 128**-(KX_L2_COMBUF_FEPRDY#&7);
       41   272  020          %EQU KX_L2_COMBUF_FEPBSY@M = 128**-(KX_L2_COMBUF_FEPBSY#&7);
       42   273  0FF          %EQU KX_L2_COMBUF_FNC@M = 255**-(KX_L2_COMBUF_FNC#&7);
       43   274  0E8          %EQU KX_L2_XMTCCB_LOCK = KX_L2_XMTCCB_LOCK#/8;
       44   275  0E6          %EQU KX_L2_XMTCCB_TAIL = KX_L2_XMTCCB_TAIL#/8;
       45   276  0EA          %EQU KX_L2_XMTCCB_NEXT = KX_L2_XMTCCB_NEXT#/8;
       46   277  002          %EQU KX_CCB_LNK_FEP = KX_L2_P_CCB_LNK_FEP#/8-KX_L2_P_CCB#/8;
       47   278  000          %EQU KX_CCB_LNK_SLCC = KX_L2_P_CCB_LNK_SLCC#/8-KX_L2_P_CCB#/8;
       48                     /* Frame level states */
       49   279  000          %EQU Y_ST_NULL# = 0*23;
       50   280  017          %EQU Y_ST_DISC# = 1*23;
       51   281  02E          %EQU Y_ST_DISC_TO# = 2*23;
       52   282  045          %EQU Y_ST_DOWN# = 3*23;
       53   283  05C          %EQU Y_ST_SETUP# = 4*23;
       54   284  073          %EQU Y_ST_SETUP_TO# = 5*23;
       55   285  08A          %EQU Y_ST_NORMAL# = 6*23;
       56   286  0A1          %EQU Y_ST_RESET# = 7*23;
       57   287  0B8          %EQU Y_ST_RESET_TO# = 8*23;
       58   288  0CF          %EQU Y_ST_FRMR# = 9*23;
       59   289  0E6          %EQU Y_ST_TIMER_REC# = 10*23;

Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:3
       61                     /* Frame level events */
       62                     /* Correspond if possible to the actual incoming control field */
       63   291  000          %EQU Y_EV_RR_F# = 0;
       64   292  001          %EQU Y_EV_RR# = 1;
       65   293  002          %EQU Y_EV_UA_F# = 2;
       66   294  003          %EQU Y_EV_UA# = 3;
       67   295  004          %EQU Y_EV_RNR_F# = 4;
       68   296  005          %EQU Y_EV_RNR# = 5;
       69   297  006          %EQU Y_EV_FRMR_F# = 6;
       70   298  007          %EQU Y_EV_FRMR# = 7;
       71   299  008          %EQU Y_EV_REJ_F# = 8;
       72   300  009          %EQU Y_EV_REJ# = 9;
       73   301  00A          %EQU Y_EV_ERR# = 10;          /* Any of several non_specific "bad" frames     *
                              /
       74   302  00B          %EQU Y_EV_GARBAGE# = 11;
       75   303  00C          %EQU Y_EV_DISC# = 12;
       76   304  00D          %EQU Y_EV_I# = 13;
       77   305  00E          %EQU Y_EV_SABM# = 14;
       78   306  00F          %EQU Y_EV_DM# = 15;
       79   307  010          %EQU Y_EV_BAD_NS# = 16;
       80   308  011          %EQU Y_EV_TO# = 17;
       81   309  012          %EQU Y_EV_TO_N2# = 18;
       82   310  013          %EQU Y_EV_NOP# = 19;
       83                     /* 20 THRU 22 AVAILABLE (23*11# = 253) */

Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:4
       85                     /* Frame level event response operations */
       86   312  000          %EQU Y_OP_NULL# = 0*3;
       87   313  003          %EQU Y_OP_LOG# = 1*3;
       88   314  006          %EQU Y_OP_DISC# = 2*3;
       89   315  009          %EQU Y_OP_DISC_TO# = 3*3;
       90   316  00C          %EQU Y_OP_DISC_R# = 4*3;
       91   317  00F          %EQU Y_OP_DISC_L# = 5*3;
       92   318  012          %EQU Y_OP_DISC_LU# = 6*3;
       93   319  015          %EQU Y_OP_DISC_NV# = 7*3;
       94   320  018          %EQU Y_OP_DISC_UNV# = 8*3;
       95   321  01B          %EQU Y_OP_DOWN# = 9*3;
       96   322  01E          %EQU Y_OP_SABM# = 10*3;
       97   323  021          %EQU Y_OP_SABM_TO# = 11*3;
       98   324  024          %EQU Y_OP_SABM_R# = 12*3;
       99   325  027          %EQU Y_OP_SABM_U# = 13*3;
      100   326  02A          %EQU Y_OP_UP# = 14*3;
      101   327  02D          %EQU Y_OP_UP_UA# = 15*3;
      102   328  030          %EQU Y_OP_FRMR# = 16*3;
      103   329  033          %EQU Y_OP_FRMR_TO# = 17*3;
      104   330  036          %EQU Y_OP_REJ# = 18*3;
      105   331  039          %EQU Y_OP_RESET# = 19*3;
      106   332  03C          %EQU Y_OP_RESET_TO# = 20*3;
      107   333  03F          %EQU Y_OP_BAD_I# = 21*3;
      108   334  042          %EQU Y_OP_CL_TR# = 22*3;
      109   335  045          %EQU Y_OP_CL_RESET# = 23*3;
      110   336  048          %EQU Y_OP_RR_TO# = 24*3;
      111   337  04B          %EQU Y_OP_RR_R# = 25*3;
      112   338  04E          %EQU Y_OP_RESP# = 26*3;
      113   339  051          %EQU Y_OP_UA# = 27*3;
      114   340  054          %EQU Y_OP_I# = 28*3;
      115                     /* OP flags to decide what to do. */
      116   341  001          %EQU Y_OPLOG# = '01'X;                  /* Log the event                      *
                              /
      117   342  002          %EQU Y_OPSND# = '02'X;                  /* Insert a protocol frame            *
                              /
      118   343  004          %EQU Y_OPRST# = '04'X;                  /* Reset the counters                 *
Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:5
                              /
      119   344  008          %EQU Y_OPCLQ# = '08'X;                  /* Abort the transmit queue           *
                              /
      120   345  010          %EQU Y_OPREQ# = '10'X;                  /* Retransmit the transmit queue      *
                              /
      121   346  020          %EQU Y_OPDSC# = '20'X;                  /* Shut down the link.                *
                              /
      122                     /* 2 spares */

Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:6
      124                     /*  Picture of scratchpad memory                                */
      125                     /*  0 - 00    System area                                       */
      126                     /*  0 - 10    System area                                       */
      127                     /*  0 - 20    System area                                       */
      128                     /*  0 - 30    System area                                       */
      129                     /*  0 - 40    System area                                       */
      130                     /*  0 - 50    System area                                       */
      131                     /*  0 - 60    System area                                       */
      132                     /*  0 - 70    System area                                       */
      133                     /*  0 - 80    System area                                       */
      134                     /*  0 - 90    System area                                       */
      135                     /*  0 - A0    System area                                       */
      136                     /*  0 - B0    Interrupt Registers                               */
      137                     /*  0 - C0    Trap Registers - Interrupt Vectors                */
      138                     /*  0 - D0    (unused)                                          */
      139                     /*  0 - E0    (unused)                                          */
      140                     /*  0 - F0    (unused)                                          */
      141                     /*  1 - 00    RCVEOF - State-Event Registers                    */
      142                     /*  1 - 10    XMTCCB Queue Registers                            */
      143                     /*  1 - 20    Miscellaneous Data (non-register usage)           */
      144                     /*  1 - 30    STATS                                             */
      145                     /*  1 - 40    Background Registers                              */
      146                     /*  1 - 50    (unused)                                          */
      147                     /*  1 - 60    (unused)                                          */
      148                     /*  1 - 70    (unused)                                          */
      149                     /*  1 - 80    XEOF - NewCCB Trace Buffer                        */
      150                     /*  1 - 90    XEOF - NewCCB Trace Buffer                        */
      151                     /*  1 - A0    XEOF - NewCCB Trace Buffer                        */
      152                     /*  1 - B0    XEOF - NewCCB Trace Buffer                        */
      153                     /*  1 - C0    State-Event Trace Buffer                          */
      154                     /*  1 - D0    State-Event Trace Buffer                          */
      155                     /*  1 - E0    State-Event Trace Buffer                          */
      156                     /*  1 - F0    State-Event Trace Buffer                          */
      157                     /*  2 - 00    Frame Trace Buffer                                */

Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:7
      159                     /****************************************************************/
      160                     /* Registers for XMTGNF.  Located in IRA for speed. */
      161                     /****************************************************************/
      162   349  02C          %EQU RXPX_XGNF# = 0*64+11*4;            /* Page 0, block 11 (.B0), px=1       *
                              /
      163                     /****************************************************************/
      164   350  000          %EQU R$CCB = R0;
      165                     /* R2-R3 clobbered by interrupts, so they're scratch */
      166   351  004          %EQU R$AC = R4;          /* ADR and next NS to send. NS is shifted, with I=1  *
                              /
      167   352  0B4          %EQU P$L2_ADR_CMND = $P0+11*16+(R$AC-R0);
      168   353  005          %EQU R$NSI = R5;              /* Next NS byte to send. Shifted and with I=1   *
                              /
      169   354  0B5          %EQU P$L2_NSI = $P0+11*16+(R$NSI-R0);
      170   355  006          %EQU R$RK = R6;                         /* Remaining Window (k)               *
                              /
      171   356  0B6          %EQU P$L2_RK = $P0+11*16+(R$RK-R0);
      172   357  007          %EQU R$XFL = R7;                        /* Xmit Control flags                 *
                              /
      173   358  0B7          %EQU P$L2_XFL = $P0+11*16+(R$XFL-R0);
      174   359  001          %EQU P$L2_XFL_TN@M = '01'X;             /* Timer running (oN)                 *
                              /
      175   360  002          %EQU P$L2_XFL_TS@M = '02'X;             /* Set timer                          *
                              /
      176   361  004          %EQU P$L2_XFL_AK@M = '04'X;             /* ACK needed                         *
                              /
      177   362  020          %EQU P$L2_XFL_NRR@M = '20'X;            /* RNR received                       *
                              /
      178   363  040          %EQU P$L2_XFL_WF@M = '40'X;             /* Output blocked (window full)       *
                              /
      179   364  080          %EQU P$L2_XFL_IF@M = '80'X;             /* Insert protocol frame              *
                              /
      180   365  008          %EQU R$NRP = R8;              /* Next NR-P byte to send. Shifted with P set 1 *
                              /
      181   366  0B8          %EQU P$L2_NRP = $P0+11*16+(R$NRP-R0);
      182   367  009          %EQU R$TQ = R9;                         /* Size of the Active-Temporary Queue *
Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:8
                              /
      183   368  0B9          %EQU P$L2_TQ = $P0+11*16+(R$TQ-R0);
      184   369  00C          %EQU R$NCCB = R12;                      /* Ptr to CCB to insert               *
                              /
      185   370  0BC          %EQU P$L2_NCCB = $P0+11*16+(R$NCCB-R0);
      186                     /* R14-R15 are needed by XEOF so GIVE can put P-queue head in R0-R1 */
      187                     /****************************************************************/
      188                     /* TRAP handler uses .C0 as regs just to save the TSA at .C0 - .C3 */
      189   371  031          %EQU RXPX_TRAP# = 0*64+12*4+1;
      190   372  0CF          %EQU P$L2_TRRX = $PX+207;          /* RX value for TRAP handler to load from  *
                              /
      191                     /****************************************************************/

Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:9
      193                     /****************************************************************/
      194                     /* Registers for RCV_FRAME code */
      195                     /****************************************************************/
      196   374  000          %EQU P$RF_R$CCB = $PX;
      197   375  041          %EQU RXPX_RF# = 1*64+0*4+1;
      198                     /* %EQU R$CCB = R0; */
      199                     /* R$CCB+1 = R1 */
      200   376  002          %EQU R$ADR = R2;
      201   377  002          %EQU P$L2_ADR = $PX+(R$ADR-R0);
      202   378  003          %EQU R$SI = R3;
      203   379  003          %EQU P$L2_SI = $PX+(R$SI-R0);
      204   380  004          %EQU R$RPF = R4;
      205   381  004          %EQU P$L2_RPF = $PX+(R$RPF-R0);
      206   382  005          %EQU R$EV = R5;
      207   383  005          %EQU P$L2_EV = $PX+(R$EV-R0);
      208   384  006          %EQU R$ST = R6;
      209   385  006          %EQU P$L2_ST = $PX+(R$ST-R0);
      210   386  007          %EQU R$NR = R7;
      211   387  008          %EQU R$B1 = R8;
      212   388  008          %EQU P$RF_B1 = $PX+(R$B1-R0);
      213                     /* R$B1+1 = R9 */
      214   389  00A          %EQU R$OP = R10;
      215   390  00A          %EQU P$L2_OP = $PX+(R$OP-R0);
      216   391  00B          %EQU R$OPF = R11;
      217   392  00B          %EQU P$L2_OPF = $PX+(R$OPF-R0);
      218   393  00C          %EQU R$VS = R12;
      219   394  00C          %EQU P$L2_VS = $PX+(R$VS-R0);
      220   395  00D          %EQU R$STT = R13;
      221   396  00D          %EQU P$L2_STT = $PX+(R$STT-R0);
      222                     /* Bits in STT */
      223   397  080          %EQU P$L2_STT_PS@M = '80'X;             /* Poll sent                          *
                              /
      224   398  040          %EQU P$L2_STT_PR@M = '40'X;             /* Poll received                      *
                              /
      225   399  020          %EQU P$L2_STT_RJR@M = '20'X;            /* REJ received                       *
                              /
Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:10
      226   400  010          %EQU P$L2_STT_RJS@M = '10'X;            /* REJ sent                           *
                              /
      227   401  008          %EQU P$L2_STT_NRS@M = '08'X;            /* RNR sent                           *
                              /
      228   402  004          %EQU P$L2_STT_REQ@M = '04'X;            /* REQ needed                         *
                              /
      229   403  002          %EQU P$L2_STT_PCB@M = '02'X;            /* Protocol CCB busy                  *
                              /
      230   404  00E          %EQU R$B2 = R14;
      231   405  00E          %EQU P$RF_B2 = $PX+(R$B2-R0);
      232                     /* R$B2+1 = R15 */

Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:11
      234                     /****************************************************************/
      235                     /* Registers for manipulating the XMT Quasi-P-queue */
      236                     /****************************************************************/
      237   407  045          %EQU RXPX_XQ# = 1*64+1*4+1;
      238   408  000          %EQU R$HD = R0;
      239   409  010          %EQU P$L2_I_HD$ = $PX+16+(R$HD-R0);
      240   410  002          %EQU R$TL = R2;
      241   411  012          %EQU P$L2_I_TL$ = $PX+16+(R$TL-R0);
      242   412  004          %EQU R$NXQ = R4;
      243   413  014          %EQU P$L2_NXQ = $PX+16+(R$NXQ-R0);
      244   414  006          %EQU R$DED = R6;                        /* and R7                             *
                              /
      245   415  016          %EQU P$L2_I_DED = $PX+16+(R$DED-R0);
      246                     /* R$B1 = R8 and R9 */
      247   416  00A          %EQU R$XQ1 = R10;                       /* and R11                            *
                              /
      248   417  01A          %EQU P$L2_I_XQ1$ = $PX+16+(R$XQ1-R0);
      249   418  00C          %EQU R$NPR = R12;
      250   419  01C          %EQU P$L2_NPR = $PX+16+(R$NPR-R0);
      251   420  00D          %EQU R$NNR = R13;
      252   421  01D          %EQU P$L2_NNR = $PX+16+(R$NNR-R0);
      253                     /* R$B2 = R14 and R15 */

Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:12
      255                     /****************************************************************/
      256                     /* STATS counters - Page 1 block 3 (at 48) */
      257                     /****************************************************************/
      258   423  030          %EQU P$STATS = $PX+48;
      259   424  030          %EQU P$STATS_TO = $PX+48;
      260   425  031          %EQU P$STATS_BADADR = $PX+48+1;
      261   426  032          %EQU P$STATS_RSS = $PX+48+2;
      262   427  033          %EQU P$STATS_BADLNG = $PX+48+3;
      263   428  034          %EQU P$STATS_LNG = $PX+48+4;
      264   429  035          %EQU P$STATS_INVNS = $PX+48+5;
      265   430  036          %EQU P$STATS_RJS = $PX+48+6;
      266   431  037          %EQU P$STATS_RJR = $PX+48+7;
      267   432  038          %EQU P$STATS_BADNR = $PX+48+8;
      268   433  039          %EQU P$STATS_BADF = $PX+48+9;
      269   434  03A          %EQU P$STATS_RSR = $PX+48+10;
      270   435  03B          %EQU P$STATS_DM = $PX+48+11;
      271   436  03C          %EQU P$STATS_CRC = $PX+48+12;
      272   437  03D          %EQU P$STATS_OR = $PX+48+13;
      273   438  03E          %EQU P$STATS_GRBADR = $PX+48+14;
      274   439  03F          %EQU P$STATS_GRBSHRT = $PX+48+15;

Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:13
      276                     /****************************************************************/
      277                     /* Basic background loop registers. */
      278                     /****************************************************************/
      279   441  051          %EQU RXPX_B# = 1*64+4*4+1;              /* Page 1, block 4 (at 64), px=1      *
                              /
      280   442  004          %EQU R$EVT = R4;
      281   443  044          %EQU P$L2_EVT = $PX+4*16+(R$EVT-R0);
      282                     /* Masks for EVT - 'FC'X are hardware EVENT interrupts */
      283                     /* But TM0 ('80'X) never gets into EVT */
      284   444  080          %EQU P$L2_EVT_STT@M = '80'X;  /* STT buf has changed, copy to system area     *
                              /
      285   445  002          %EQU P$L2_EVT_CCB@M = '02'X;            /* Something to do for XMT CCBs       *
                              /
      286   446  001          %EQU P$L2_EVT_OK@M = '01'X;        /* OK status or state may have changed     *
                              /
      287   447  005          %EQU R$T1 = R5;
      288   448  006          %EQU R$B3 = R6;                         /* and R7                             *
                              /
      289                     /* R$B1 = R8 and R9 */
      290                     /* R$B2 = R14 and R15 */
      291                     /****************************************************************/
      292                     /* Stuff that never needs to be a register - at block 2 */
      293                     /****************************************************************/
      294   449  020          %EQU P$L2_K = $PX+32;
      295   450  021          %EQU P$L2_ADR_RESP = P$L2_K+1;
      296   451  022          %EQU P$L2_N2 = P$L2_K+2;
      297   452  023          %EQU P$L2_RC = P$L2_K+3;
      298   453  024          %EQU P$L2_UR = P$L2_K+4;
      299   454  025          %EQU P$L2_ERR = P$L2_K+5;
      300   455  026          %EQU P$L2_FRMRSI = P$L2_K+6;
      301   456  027          %EQU P$L2_LSCLK = P$L2_K+7;             /* Line status chang timer            *
                              /
      302                     /****************************************************************/
      303                     /* XMTEOF trace buffer  - page 1 block 8-B (at 128) */
      304   457  080          %EQU P$L2_EOFTRC = $PX+128;
      305   458  07D          %EQU P$L2_EOFTRCX = P$L2_EOFTRC-3;
Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:14
      306                     /* Use page 2 for the first 6 bytes of the last 40-odd incoming frames */
      307   459  07E          %EQU P$L2_TRCX = P$L2_EOFTRC-2;
      308                     /* Event buffer - last 64 bytes of page 1 */
      309   460  07F          %EQU P$L2_EVBFX = P$L2_EOFTRC-1;
      310   461  0C0          %EQU P$L2_EVBF = $PX+192;
       12                     *
       13                     *
       14                     *
       15                     *
       16                     *
       17   462               KXS$SPM LCTS
       18   463                   ADDR      LOC=K_TSA_P,REF=Y$BACKGROUND
       19   464                   LCT       LOC=K_TSA_RBASE,VALUE=RXPX_B#
       20   465                   ADDR      LOC=K_IV_TRAP,REF=Y$TRAP      Px=1, Cx=x
       21   466                   ADDR      LOC=K_IV_XMTGNF,REF=Y$XMTGNF  Px=1, Cx=T
       22   467                   ADDR      LOC=K_IV_RCVEOF,REF=Y$RCVEOF  Px=2, Cx=R
       23   468                   ADDR      LOC=K_IV_XMTEOF,REF=Y$XMTEOF  Px=1, Cx=T
       24   469                   ADDR      LOC=K_IV_EVENT,REF=Y$EVENT    Px=1, Cx=T
       25   470                   ADDR      LOC=K_IV_TASK,REF=Y$TASK      Px=1, Cx=T
       26   471                   LCT       LOC=(P$L2_TRRX-$PX),VALUE=RXPX_TRAP#  Trap runs with PX=0!
       27   472                   LCT       LOC=256+(P$L2_EVBFX-$PX),VALUE=254
       28   473                   LCT       LOC=256+(P$L2_I_DED-$PX),VALUE=255
       29   474                   LCT       LOC=256+(P$L2_I_DED+1-$PX),VALUE=255
       30   475                   ENDLCTS
                 0A8                   00000000 05960051
                 0B0 00000000 00000000 00000000 00000000
                 0C0 04330527 01570449 049D0523 00000031
                 0D0 00000000 00000000 00000000 00000000
                 0E0 00000000 00000000 00000000 00000000
                 0F0 00000000 00000000 00000000 00000000
                 100 00000000 00000000 00000000 00000000
                 110 00000000 0000FFFF 00000000 00000000
                 120 00000000 00000000 00000000 00000000
                 130 00000000 00000000 00000000 00000000
                 140 00000000 00000000 00000000 00000000
                 150 00000000 00000000 00000000 00000000
Elsie.D00  OU Name=KXS$SLCC                File=KXS$SLCC.:E05TSI                WED JUL 30 '97 02:24 Page:15
                 160 00000000 00000000 00000000 00000000
                 170 00000000 00000000 00000000 000000FE
       31                     *
       32                     *
       33                     *

Elsie.D00  State-Event-Operation Tables                                         WED JUL 30 '97 02:24 Page:16
       35                     *
       36   477  000          KXS$00 CCP
       37                     *   Put the state/event transition table first, since it needs a
       38                     *   256-byte boundary for simple arithmetic.
       39                     *
       40                     *Events:                             States
       41                     *
       42                     *      DISC   DSC_TO DOWN   SETUP  STP_TO NORMAL RESET  RST_TO FRMR   T_REC
       43                     *
       44                     * RR_F -      -      -      -      -      FRMR   -      -      FMR_TO CL_TR
       45                     * RR   -      -      DSC_NV -      -      RESP   -      -      FMR_TO RESP
       46                     * UA_F -      SABM   -      -      UP     FRMR   -      CL_RST FMR_TO FRMR
       47                     * UA   SABM   SABM   DSC_NV UP     -      FRMR   CL_RST -      FMR_TO FRMR
       48                     * RNR_F -     -      -      -      -      FRMR   -      -      FMR_TO CL_TR
       49                     * RNR  -      -      DSC_NV -      -      RESP   -      -      FMR_TO RESP
       50                     * NOP   -     -      -      -      -      -      -      -      -      -
       51                     * FRMR -      -      DSC_NV SABM   -      RESET  -      -      RESET  RESET
       52                     * REJ_F -     -      -      -      -      FRMR   -      -      FMR_TO REJ
       53                     * REJ  -      -      DSC_NV -      -      REJ    -      -      FMR_TO -
       54                     * ERR  -      -      DSC_NV -      -      FRMR   -      -      FMR_TO FRMR
       55                     * GARBAGE LOG LOG    LOG    LOG    LOG    LOG    LOG    LOG    LOG    LOG
       56                     * DISC UA     UA     DS_UNV UA     DS_UNV DSC_LU DSC_LU DSC_LU DSC_LU DSC_LU
       57                     * I    -      -      DSC_NV -      -      I      -      -      FMR_TO I
       58                     * SABM UP_UA  UP_UA  DSC_NV UA     UA     SABM_U UA     UA     SABM_U SABM_U
       59                     * DM   SABM   SABM   SABM   SABM   SABM   RESET  UA     UA     RESET  RESET
       60                     * BAD_NS -    -      -      -      -      BAD_I  -      -      FMR_TO -
       61                     * TO   DSC_TO DSC_R  -      SAB_TO SABM_R RR_TO  RST_TO SABM_R FMR_TO RR_R
       62                     * TO_N2 -     DOWN   -      -      DISC   -      -      DSC_L  RESET  RESET
       63                     *
       64
       65   478  000          Y_ACTTBL LABEL
       66                     *   from Y_ST_NULL
       67   479                   BYTE      Y_OP_DISC#,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                 000 06000000 00000000 00000000 00000000
                 010 00000000 000000
       68                     *   from Y_ST_DISC
Elsie.D00  State-Event-Operation Tables                                         WED JUL 30 '97 02:24 Page:17
       69   480                   BYTE      0,0,0,Y_OP_SABM#,0,0,0,0,0,0,;
       70                                   0,Y_OP_LOG#,Y_OP_UA#,0,Y_OP_UP_UA#,Y_OP_SABM#,0,;
       71                                   Y_OP_DISC_TO#,0,0,0,0,0
                 017 0000001E 00000000 00000003 51002D1E
                 027 00090000 000000
       72                     *   from Y_ST_DISC_TO
       73   481                   BYTE      0,0,Y_OP_SABM#,Y_OP_SABM#,0,0,0,0,0,0,;
       74                                   0,Y_OP_LOG#,Y_OP_UA#,0,Y_OP_UP_UA#,Y_OP_SABM#,0,;
       75                                   Y_OP_DISC_R#,Y_OP_DOWN#,0,0,0,0
                 02E 00001E1E 00000000 00000003 51002D1E
                 03E 000C1B00 000000
       76                     *   from Y_ST_DOWN
       77   482                   BYTE      0,Y_OP_DISC_NV#,0,Y_OP_DISC_NV#,0,Y_OP_DISC_NV#,;
       78                                     0,Y_OP_DISC_NV#,0,Y_OP_DISC_NV#,;
       79                                   Y_OP_DISC_NV#,Y_OP_LOG#,Y_OP_DISC_UNV#,;
       80                                     Y_OP_DISC_NV#,Y_OP_DISC_NV#,Y_OP_SABM#,0,;
       81                                   0,0,0,0,0,0
                 045 00150015 00150015 00151503 1815151E
                 055 00000000 000000
       82                     *   from Y_ST_SETUP
       83   483                   BYTE      0,0,0,Y_OP_UP#,0,0,0,Y_OP_SABM#,0,0,;
       84                                   0,Y_OP_LOG#,Y_OP_UA#,0,Y_OP_UA#,Y_OP_SABM#,0,;
       85                                   Y_OP_SABM_TO#,0,0,0,0,0
                 05C 0000002A 0000001E 00000003 5100511E
                 06C 00210000 000000
       86                     *   from Y_ST_SETUP_TO
       87   484                   BYTE      0,0,Y_OP_UP#,0,0,0,0,0,0,0,;
       88                                   0,Y_OP_LOG#,Y_OP_DISC_UNV#,0,Y_OP_UA#,Y_OP_SABM#,0,;
       89                                   Y_OP_SABM_R#,Y_OP_DISC#,0,0,0,0
                 073 00002A00 00000000 00000003 1800511E
                 083 00240600 000000
       90                     *   from Y_ST_NORMAL
       91   485                   BYTE      Y_OP_FRMR#,Y_OP_RESP#,Y_OP_FRMR#,Y_OP_FRMR#,;
       92                                     Y_OP_FRMR#,Y_OP_RESP#,Y_OP_FRMR#,Y_OP_RESET#,;
       93                                     Y_OP_FRMR#,Y_OP_REJ#,;
       94                                   Y_OP_FRMR#,Y_OP_LOG#,Y_OP_DISC_LU#,Y_OP_I#,Y_OP_SABM_U#,;
Elsie.D00  State-Event-Operation Tables                                         WED JUL 30 '97 02:24 Page:18
       95                                     Y_OP_RESET#,Y_OP_BAD_I#,;
       96                                   Y_OP_RR_TO#,0,0,0,0,0
                 08A 304E3030 304E3039 30363003 12542739
                 09A 3F480000 000000
       97                     *   from Y_ST_RESET
       98   486                   BYTE      0,0,0,Y_OP_CL_RESET#,0,0,0,0,0,0,;
       99                                   0,Y_OP_LOG#,Y_OP_DISC_LU#,0,Y_OP_UA#,Y_OP_UA#,0,;
      100                                   Y_OP_RESET_TO#,0,0,0,0,0
                 0A1 00000045 00000000 00000003 12005151
                 0B1 003C0000 000000
      101                     *   from Y_ST_RESET_TO
      102   487                   BYTE      0,0,Y_OP_CL_RESET#,0,0,0,0,0,0,0,;
      103                                   0,Y_OP_LOG#,Y_OP_DISC_LU#,0,Y_OP_UA#,Y_OP_UA#,0,;
      104                                   Y_OP_SABM_R#,Y_OP_DISC_L#,0,0,0,0
                 0B8 00004500 00000000 00000003 12005151
                 0C8 00240F00 000000
      105                     *   from Y_ST_FRMR
      106   488                   BYTE      Y_OP_FRMR_TO#,Y_OP_FRMR_TO#,Y_OP_FRMR_TO#,Y_OP_FRMR_TO#,;
      107                                     Y_OP_FRMR_TO#,Y_OP_FRMR_TO#,Y_OP_FRMR_TO#,Y_OP_RESET#,;
      108                                     Y_OP_FRMR_TO#,Y_OP_FRMR_TO#,;
      109                                   Y_OP_FRMR_TO#,Y_OP_LOG#,Y_OP_DISC_LU#,Y_OP_FRMR_TO#,;
      110                                     Y_OP_SABM_U#,Y_OP_RESET#,Y_OP_FRMR_TO#,;
      111                                   Y_OP_FRMR_TO#,Y_OP_RESET#,0,0,0,0
                 0CF 33333333 33333339 33333303 12332739
                 0DF 33333900 000000
      112                     *   from Y_ST_TIMER_REC
      113   489                   BYTE      Y_OP_CL_TR#,Y_OP_RESP#,Y_OP_FRMR#,Y_OP_FRMR#,;
      114                                     Y_OP_CL_TR#,Y_OP_RESP#,Y_OP_RESET#,Y_OP_RESET#,;
      115                                     Y_OP_REJ#,0,;
      116                                   Y_OP_FRMR#,Y_OP_LOG#,Y_OP_DISC_LU#,Y_OP_I#,;
      117                                     Y_OP_SABM_U#,Y_OP_RESET#,0,;
      118                                   Y_OP_RR_R#,Y_OP_RESET#,0,0,0,0
                 0E6 424E3030 424E3939 36003003 12542739
                 0F6 004B3900 000000
      119                     *   filler to get from 253 to 256
      120   490  0FD 000000       BYTE      0,0,0

Elsie.D00  Operations table                                                     WED JUL 30 '97 02:24 Page:19
      121   491                   TITLE     'Operations table'
      122   492  100          Y_OPS_TBL LABEL
      123                     *   Three bytes per OP.  First is new state if there is one.
      124                     *   Next is flags for what to do.
      125                     *   Last is usually the type of frame to send.
      126   493  100 000000       BYTE      0,0,0                                   Y_OP_NULL#
      127   494  103 000100       BYTE      0,Y_OPLOG#,0                            Y_OP_LOG#
      128   495  106 170352       BYTE      Y_ST_DISC#,Y_OPLOG#|Y_OPSND#,'52'X      Y_OP_DISC#
      129   496  109 2E0352       BYTE      Y_ST_DISC_TO#,Y_OPLOG#|Y_OPSND#,'52'X   Y_OP_DISC_TO#
      130   497  10C 000352       BYTE      0,Y_OPLOG#|Y_OPSND#,'52'X               Y_OP_DISC_R#
      131   498  10F 172001       BYTE      Y_ST_DISC#,Y_OPDSC#,1                   Y_OP_DISC_L#
      132   499  112 172002       BYTE      Y_ST_DISC#,Y_OPDSC#,2                   Y_OP_DISC_LU#
      133   500  115 170652       BYTE      Y_ST_DISC#,Y_OPSND#|Y_OPRST#,'52'X      Y_OP_DISC_NV#
      134   501  118 170662       BYTE      Y_ST_DISC#,Y_OPSND#|Y_OPRST#,'62'X      Y_OP_DISC_UNV#
      135   502  11B 450100       BYTE      Y_ST_DOWN#,Y_OPLOG#,0                   Y_OP_DOWN#
      136   503  11E 5C027E       BYTE      Y_ST_SETUP#,Y_OPSND#,'7E'X              Y_OP_SABM#
      137   504  121 73027E       BYTE      Y_ST_SETUP_TO#,Y_OPSND#,'7E'X           Y_OP_SABM_TO#
      138   505  124 00027E       BYTE      0,Y_OPSND#,'7E'X                        Y_OP_SABM_R#
      139   506  127 8A1E63       BYTE      Y_ST_NORMAL#,;
      140                                   Y_OPSND#|Y_OPREQ#|Y_OPRST#|Y_OPCLQ#,'63'X Y_OP_SABM_U#
      141   507  12A 8A0400       BYTE      Y_ST_NORMAL#,Y_OPRST#,0                 Y_OP_UP#
      142   508  12D 8A0663       BYTE      Y_ST_NORMAL#,Y_OPSND#|Y_OPRST#,'63'X    Y_OP_UP_UA#
      143   509  130 CF0B86       BYTE      Y_ST_FRMR#,;
      144                                   Y_OPLOG#|Y_OPSND#|Y_OPCLQ#,'86'X        Y_OP_FRMR#
      145   510  133 000386       BYTE      0,Y_OPLOG#|Y_OPSND#,'86'X               Y_OP_FRMR_TO#
      146   511  136 8A1B00       BYTE      Y_ST_NORMAL#,Y_OPLOG#|;
      147                                   Y_OPSND#|Y_OPCLQ#|Y_OPREQ#,'00'X        Y_OP_REJ#
      148   512  139 A10B7E       BYTE      Y_ST_RESET#,;
      149                                   Y_OPLOG#|Y_OPCLQ#|Y_OPSND#,'7E'X        Y_OP_RESET#
      150   513  13C B8037E       BYTE      Y_ST_RESET_TO#,Y_OPLOG#|Y_OPSND#,'7E'X  Y_OP_RESET_TO#
      151   514  13F 000218       BYTE      0,Y_OPSND#,'18'X                        Y_OP_BAD_I#
      152   515  142 8A1000       BYTE      Y_ST_NORMAL#,Y_OPREQ#,0                 Y_OP_CL_TR#
      153   516  145 8A1400       BYTE      Y_ST_NORMAL#,Y_OPREQ#|Y_OPRST#,0        Y_OP_CL_RESET#
      154   517  148 E60B10       BYTE      Y_ST_TIMER_REC#,;
      155                                   Y_OPLOG#|Y_OPCLQ#|Y_OPSND#,'10'X        Y_OP_RR_TO#
      156   518  14B 000310       BYTE      0,Y_OPLOG#|Y_OPSND#,'10'X               Y_OP_RR_R#
Elsie.D00  Operations table                                                     WED JUL 30 '97 02:24 Page:20
      157   519  14E 000201       BYTE      0,Y_OPSND#,'01'X                        Y_OP_RESP#
      158   520  151 000263       BYTE      0,Y_OPSND#,'63'X                        Y_OP_UA#
      159   521  154 000001       BYTE      0,0,'01'X                               Y_OP_I#

Elsie.D00  RCVEOF Interrupt                                                     WED JUL 30 '97 02:24 Page:21
      160   522                   TITLE     'RCVEOF Interrupt'
      161   523  157 2341     Y$RCVEOF ;
      162                     *
      163                     *   This code checks a new frame for good address and control fields.
      164                     *
      165                         LD,R3     =RXPX_RF#           Use the proper register block.
      166   524  159 E630         LDPX      R3                  And PX base (page 1).
      167   525  15B 1205         ST,R2     P$L2_EV             Put status flags in R$EV
      168   526  15D 1000         ST,R0     P$RF_R$CCB          Store the CCB pointer in
      169   527  15F 1101         ST,R1     P$RF_R$CCB+1        the RCVEOF registers.
      170   528  161 E830         LDRX      R3
      171   529  163 65FF         LB,R$EV   =255                Check for errors
      172   530  165 8145         BBF       Y$RF_NEXT           None
      173   531  167 A789         CLR       R$B1,R$B1+1         Prepare the trace entry
      174   532  169 A723         CLR       R$ADR,R$SI          All zeros,
      175   533  16B A554         LD,R$RPF  R$EV                Except status twice in the middle
      176   534  16D B20024       CALL      Y$RF_TRACE
      177   535  170 650C         LB,R$EV   =K_IR2_REOF_RAB|;   Too many CCBs (big frame)
      178                                   K_IR2_REOF_IFR      could have run out after one.
      179   536  172 8913         BBT       Y$RF_ERR_LNG
      180   537  174 6502         LB,R$EV   =K_IR2_REOF_OR
      181   538  176 8908         BBT       Y$RF_ERR_OR
      182   539  178 C33C01       ADDM,P$STATS_CRC =1
      183   540  17B 6501         LB,R$EV   =K_IR2_REOF_CRC
      184   541  17D 8904         BBT       Y$RF_ERR_GARB
      185   542  17F FF           BYTE      255                 Screech for the others
      186   543  180 C33D01   Y$RF_ERR_OR ;
      187                         ADDM,P$STATS_OR =1
      188   544  183 250B     Y$RF_ERR_GARB ;
      189                         LD,R$EV   =Y_EV_GARBAGE#
      190   545  185 88E4         B         Y$RF_EVN
      191   546  187 F7       Y$RF_ERR_LNG ;
      192                         ROF
      193   547  188 F6           RON
      194   548  189 2504         LD,R$EV   =4
      195   549  18B 1525         ST,R$EV   P$L2_ERR
Elsie.D00  RCVEOF Interrupt                                                     WED JUL 30 '97 02:24 Page:22
      196   550  18D C33401       ADDM,P$STATS_LNG =1
      197   551  190 250A         LD,R$EV   =Y_EV_ERR#
      198   552  192 88D7         B         Y$RF_EVN
      199                     *
      200                     *   Subroutine to add a trace entry
      201                     *
      202   553  194 0E7E     Y$RF_TRACE ;
      203                         LD,R$B2   P$L2_TRCX           Save the frame header in page 2
      204   554  196 2A02         LD,R$OP   =2                  PX for page 2
      205   555  198 E6A0         LDPX      R$OP
      206   556  19A C9E2         ST2,R$ADR $PX,R$B2
      207   557  19C 3E02         ADD,R$B2  =2
      208   558  19E C9E4         ST2,R$RPF $PX,R$B2
      209   559  1A0 3E02         ADD,R$B2  =2
      210   560  1A2 C9E8         ST2,R$B1  $PX,R$B2
      211   561  1A4 2A01         LD,R$OP   =1
      212   562  1A6 E6A0         LDPX      R$OP
      213   563  1A8 C37E06       ADDM,P$L2_TRCX =6
      214   564  1AB F1           RSR
      215   565  1AC D20808   Y$RF_NEXT ;
      216                         LMCW,R$B1 K$CCB_R_RANGE,R$CCB Compute the frame length
      217   566  1AF D20E06       LMCW,R$B2 K$CCB_RANGE,R$CCB
      218   567  1B2 A19F         SUB,R$B2+1 R$B1+1
      219   568  1B4 A98E         SBC,R$B2  R$B1
      220   569  1B6 8102         BEZ       Y$RF_LNG1
      221   570  1B8 2FFF         LD,R$B2+1 =255                Use 255 for longer ones.
      222   571  1BA 7F03     Y$RF_LNG1 ;
      223                         C,R$B2+1  =3                  Shortest valid one is 3
      224   572  1BC 8BBC         BL        Y$RF_SHORT
      225   573  1BE D20804       LMCW,R$B1  K$CCB_DATA_ADR,R$CCB
      226   574  1C1 D28402       LMCW,R$RPF K$FRAME_CTL_RPF,R$B1  R$EV is clobbered here
      227   575  1C4 D28200       LMCW,R$ADR K$FRAME_ADR,R$B1   Loads ADR and CTL_S/I bytes.
      228   576  1C7 D28804       LMCW,R$B1  K$FRAME_ADR+4,R$B1 Loads a couple more bytes.
      229   577  1CA B2FFC7       CALL      Y$RF_TRACE          Save in the trace buffer
      230                     *   LD,R$ST   P$L2_STATE          Current state
      231   578  1CD 250D         LD,R$EV   =Y_EV_I#            Probable event
Elsie.D00  RCVEOF Interrupt                                                     WED JUL 30 '97 02:24 Page:23
      232   579  1CF DAB40A       STM,P$L2_ADR_CMND P$L2_OP     Check ADR value
      233   580  1D2 0821         LD,R$B1   P$L2_ADR_RESP
      234   581  1D4 A6A2         C,R$ADR   R$OP
      235   582  1D6 8104         BE        Y$RF_ADR_OK
      236   583  1D8 A482         XOR,R$ADR R$B1                Must be CMND or RESP
      237   584  1DA 8999         BNEZ      Y$RF_GARBADR        Neither, its garbage
      238   585  1DC 7301     Y$RF_ADR_OK ;
      239                         C,R$SI    =1                  Check for I-frame (and RR, too).
      240   586  1DE 8CC1         BEVN      Y$RF_NOT_I          Evn/Odd is set from the subtraction
      241   587  1E0 7F06         C,R$B2+1  =6
      242   588  1E2 8BAD         BL        Y$RF_BADLNG         Too short
      243   589  1E4 7200         C,R$ADR   =0
      244   590  1E6 89A5         BNE       Y$RF_BADADR
      245   591  1E8 7400     Y$RF_SET_PR ;
      246                         C,R$RPF   =0
      247   592  1EA 8C02         BEVN      Y$NR
      248   593  1EC 5D40         OR,R$STT  =P$L2_STT_PR@M      Poll received
      249   594  1EE 768A     Y$NR ;
      250                         C,R$ST    =Y_ST_NORMAL#
      251   595  1F0 8108         BE        Y$NR_1              Check NR if normal ...
      252   596  1F2 76E6         C,R$ST    =Y_ST_TIMER_REC#
      253   597  1F4 894A         BNE       Y$RF_GIVCCB         or in timer_recovery ...
      254   598  1F6 7200         C,R$ADR   =0
      255   599  1F8 8133         BE        Y$RF_CK_NS          but then only for commands.
      256   600  1FA A547     Y$NR_1 ;
      257                         LD,R$NR   R$RPF
      258   601  1FC AB71         SOR,R$NR  1                   Remove P/F bit.
      259   602  1FE A6C7         C,R$NR    R$VS                Must be between NPR and VS.
      260   603  200 8D83         BG        Y$RF_BADNR          VS exceeds the modulus until ACKed,
      261   604  202 081C         LD,R$B1   P$L2_NPR            but N'r doesn't.
      262   605  204 A687         C,R$NR    R$B1
      263   606  206 8306         BGE       Y$RF_SV_NR
      264   607  208 3780         ADD,R$NR  =128                Check for wrapping
      265   608  20A A6C7         C,R$NR    R$VS                Must still not exceed Vs.
      266   609  20C 8D77         BG        Y$RF_BADNR
      267   610  20E 0E1D     Y$RF_SV_NR ;
Elsie.D00  RCVEOF Interrupt                                                     WED JUL 30 '97 02:24 Page:24
      268                         LD,R$B2   P$L2_NNR
      269   611  210 A6E7         C,R$NR    R$B2                Is this a new one?
      270   612  212 8119         BE        Y$RF_CK_NS          No. Nothing to do here.
      271   613  214 171D         ST,R$NR   P$L2_NNR            Save for background CCB release.
      272   614  216 C14402       ORM,P$L2_EVT =P$L2_EVT_CCB@M  Say there's something to do.
      273   615  219 768A         C,R$ST    =Y_ST_NORMAL#
      274   616  21B 8910         BNE       Y$RF_CK_NS
      275   617  21D A7EF         CLR       R$B2,R$B2+1
      276   618  21F A6C7         C,R$NR    R$VS
      277   619  221 8103         BE        Y$RF_NEWTIME
      278   620  223 D4EE56       LMSW,R$B2 KX_L2_T1S,R$B2      Restart the timer for a new ACK
      279   621  226 BCE0     Y$RF_NEWTIME ;
      280                         LDT0      R$B2                Stop the timer if all frames are ACKed
      281   622  228 8903         BNEZ      Y$RF_CK_NS
      282   623  22A ECB7FE       ANDM,P$L2_XFL =~P$L2_XFL_TN@M
      283   624  22D DAB80A   Y$RF_CK_NS ;
      284                         STM,P$L2_NRP P$L2_OP          (NRP is already shifted)
      285   625  230 4AFE         AND,R$OP  =~1                 Clear the I-bit
      286   626  232 A6A3         C,R$SI    R$OP
      287   627  234 840A         BODD      Y$RF_GIVCCB         Check NS only for I-frames
      288   628  236 8918         BNE       Y$RF_BADNS
      289   629  238 4DEF         AND,R$STT =~P$L2_STT_RJS@M    NS is right, clear any reject
      290   630  23A EFB802       ADDM,P$L2_NRP  =2             Increment VR
      291   631  23D EDB704       ORM,P$L2_XFL =P$L2_XFL_AK@M   Indicate ACK needed
      292   632  240 A50E     Y$RF_GIVCCB ;                     Send good I-frames to packet,
      293                     *                                 bad ones back to RCV SLCC
      294                         LD,R$B2   R$CCB               Set up for GIVE to update R$CCB
      295   633  242 A51F         LD,R$B2+1 R$CCB+1           (R$B2 is R$CCB-2 mod 16)
      296   634  244 750D         C,R$EV    =Y_EV_I#
      297   635  246 8121         BE        Y$RF_GIVL6
      298   636  248 A701         CLR       R$CCB,R$CCB+1       To reuse, GIVE a nil head to delink
      299   637  24A DD0E         GIVE      R$CCB,R$B2          without sending to L6,
      300   638  24C DCEE         APP       R$B2,R$B2           Then APP back onto Next-Queue
      301   639  24E 881B         B         Y$RF_EVN
      302                     *
      303   640  250 0520     Y$RF_BADNS ;
Elsie.D00  RCVEOF Interrupt                                                     WED JUL 30 '97 02:24 Page:25
      304                         LD,R$EV   P$L2_K
      305   641  252 A13A         SUB,R$OP  R$SI                Check for invalid NS
      306   642  254 ABA1         SOR,R$OP  1                   Which is one outside the window
      307   643  256 A05A         ADD,R$OP  R$EV
      308   644  258 8D27         BGZ       Y$RF_INVNS
      309   645  25A 2513         LD,R$EV   =Y_EV_NOP#
      310   646  25C 6D10         LB,R$STT  =P$L2_STT_RJS@M     Only one REJ condition at a time.
      311   647  25E 99E0         BBT       Y$RF_GIVCCB
      312   648  260 5D10         OR,R$STT  =P$L2_STT_RJS@M
      313   649  262 C33601       ADDM,P$STATS_RJS =1
      314   650  265 2510         LD,R$EV   =Y_EV_BAD_NS#
      315   651  267 98D7         B         Y$RF_GIVCCB
      316   652  269 DDEE     Y$RF_GIVL6 ;
      317                         GIVE      R$B2,R$B2
      318                     *
      319   653  26B B200A2   Y$RF_EVN ;
      320                         CALL      Y$EV
      321   654  26E 4DBF         AND,R$STT =~P$L2_STT_PR@M     Always reset the poll-received flag.
      322   655  270 7000         C,R$CCB   =0                  Are we done with the P-queue?
      323   656  272 9938         BNE       Y$RF_NEXT           No.
      324   657  274 F3           RTI
      325                     *
      326   658  275 C33E01   Y$RF_GARBADR ;
      327                         ADDM,P$STATS_GRBADR =1
      328   659  278 8803         B         Y$RF_GARBAGE
      329   660  27A C33F01   Y$RF_SHORT ;
      330                         ADDM,P$STATS_GRBSHRT =1
      331   661  27D 250B     Y$RF_GARBAGE ;
      332                         LD,R$EV   =Y_EV_GARBAGE#
      333   662  27F 98BF         B         Y$RF_GIVCCB
      334                     *
      335   663  281 2505     Y$RF_INVNS ;
      336                         LD,R$EV   =5
      337   664  283 880E         B         Y$RF_BAD
      338   665  285 2508     Y$RF_BADNR ;
      339                         LD,R$EV   =8
Elsie.D00  RCVEOF Interrupt                                                     WED JUL 30 '97 02:24 Page:26
      340   666  287 880A         B         Y$RF_BAD
      341   667  289 2509     Y$RF_BADF ;
      342                         LD,R$EV   =9
      343   668  28B 8806         B         Y$RF_BAD
      344   669  28D 2501     Y$RF_BADADR ;
      345                         LD,R$EV   =1
      346   670  28F 8802         B         Y$RF_BAD
      347   671  291 2503     Y$RF_BADLNG ;
      348                         LD,R$EV   =3
      349   672  293 1525     Y$RF_BAD ;
      350                         ST,R$EV   P$L2_ERR            Save the error type for FRMR and LOG
      351   673  295 3530         ADD,R$EV  =P$STATS-$PX
      352   674  297 C55A         LD,R$OP   $PX,R$EV
      353   675  299 BAA0         INC       R$OP
      354   676  29B C65A         ST,R$OP   $PX,R$EV
      355   677  29D 250A         LD,R$EV   =Y_EV_ERR#
      356   678  29F 989F         B         Y$RF_GIVCCB
      357                     *

Elsie.D00  RCVEOF Interrupt - Supervisory/Unnumbered Frames                     WED JUL 30 '97 02:24 Page:27
      358   679                   TITLE     'RCVEOF Interrupt - Supervisory/Unnumbered Frames'
      359   680  2A1 810B     Y$RF_NOT_I ;
      360                     *   C,R$SI    =1                  This compare got us here.
      361                         BE        Y$RF_PF
      362   681  2A3 7305         C,R$SI    =5                  Check for RNR
      363   682  2A5 8107         BE        Y$RF_PF             Yup, same code as RR
      364   683  2A7 7309         C,R$SI    =9                  REJ, more of the same
      365   684  2A9 8919         BNE       Y$RF_CK_DM
      366   685  2AB C33701       ADDM,P$STATS_RJR =1
      367   686  2AE 7F03     Y$RF_PF ;                         Common processing for RR,RNR,REJ
      368                         C,R$B2+1  =3                  Check length
      369   687  2B0 99DF         BNE       Y$RF_BADLNG         No good.
      370   688  2B2 A535         LD,R$EV   R$SI                Possible event
      371   689  2B4 7200         C,R$ADR   =0                  Command or response?
      372   690  2B6 9130         BE        Y$RF_SET_PR         Command, PF means poll
      373   691  2B8 7400         C,R$RPF   =0                  Response, PF means final
      374   692  2BA 9C32         BEVN      Y$NR                Just an ACK
      375   693  2BC 6D80         LB,R$STT  =P$L2_STT_PS@M      Did we poll?
      376   694  2BE 91C9         BBF       Y$RF_BADF           No.
      377   695  2C0 BB50         DEC       R$EV                Yes, notice the response.
      378   696  2C2 982A         B         Y$NR
      379                     *
      380   697  2C4 43EF     Y$RF_CK_DM ;
      381                         AND,R$SI  ='EF'X              ignore mod7 PF bit if unnumbered
      382   698  2C6 7F03         C,R$B2+1  =3                  All but FRMR are 3 bytes
      383   699  2C8 8921         BNE       Y$RF_CK_FRMR
      384   700  2CA 7200         C,R$ADR   =0                  DM, UA, and FRMR are responses
      385   701  2CC 812E         BE        Y$RF_CK_SABME
      386   702  2CE 7363         C,R$SI    ='63'X              UA?
      387   703  2D0 8109         BE        Y$RF_RESP
      388   704  2D2 730F         C,R$SI    =15                 DM?
      389   705  2D4 99B7         BNE       Y$RF_BADADR
      390   706  2D6 C33B01       ADDM,P$STATS_DM =1
      391   707  2D9 2400     Y$RF_RESP0 ;
      392                         LD,R$RPF  =0                  DM/FRMR final doesn't matter
      393   708  2DB A535     Y$RF_RESP ;
Elsie.D00  RCVEOF Interrupt - Supervisory/Unnumbered Frames                     WED JUL 30 '97 02:24 Page:28
      394                         LD,R$EV   R$SI
      395   709  2DD 450F         AND,R$EV  =15
      396   710  2DF 7400         C,R$RPF   =0
      397   711  2E1 9C5D         BEVN      Y$RF_GIVCCB
      398   712  2E3 6D80         LB,R$STT  =P$L2_STT_PS@M      Did we poll?
      399   713  2E5 91A2         BBF       Y$RF_BADF           No
      400   714  2E7 BB50         DEC       R$EV
      401   715  2E9 9855         B         Y$RF_GIVCCB
      402                     *
      403   716  2EB 7387     Y$RF_CK_FRMR ;
      404                         C,R$SI    ='87'X              FRMR?
      405   717  2ED 99A2         BNE       Y$RF_BADLNG
      406   718  2EF 2504         LD,R$EV   =4                  Too long is a different error
      407   719  2F1 7F08         C,R$B2+1  =8                  FRMR is 8 bytes
      408   720  2F3 9B9C         BL        Y$RF_BADLNG
      409   721  2F5 9D9C         BG        Y$RF_BAD
      410   722  2F7 C33A01       ADDM,P$STATS_RSR =1
      411   723  2FA 98DD         B         Y$RF_RESP0
      412                     *
      413   724  2FC 250E     Y$RF_CK_SABME ;
      414                         LD,R$EV   =Y_EV_SABM#
      415   725  2FE 736F         C,R$SI    ='6F'X              SABME?
      416   726  300 8106         BE        Y$RF_CMND
      417   727  302 250C         LD,R$EV   =Y_EV_DISC#
      418   728  304 7343         C,R$SI    ='43'X              DISC?
      419   729  306 9985         BNE       Y$RF_BADADR
      420   730  308 7400     Y$RF_CMND ;
      421                         C,R$RPF   =0
      422   731  30A 9C34         BEVN      Y$RF_GIVCCB
      423   732  30C 5D40         OR,R$STT  =P$L2_STT_PR@M
      424   733  30E 9830         B         Y$RF_GIVCCB
      425                     *

Elsie.D00  Report Event                                                         WED JUL 30 '97 02:24 Page:29
      426   734                   TITLE     'Report Event'
      427                     *
      428                     *   Report-event logic
      429                     *
      430   735  310 087F     Y$EV ;
      431                         LD,R$B1   P$L2_EVBFX                    Record the event
      432   736  312 CA85         C2,R$EV   $PX,R$B1                      R$ST = R$EV+1 we hope
      433   737  314 8108         BE        Y$EV0
      434                     *   OR,R$EV   =128
      435                     *   C2,R$EV   $PX,R$B1
      436                     *   BE        Y$EV0
      437   738  316 3802         ADD,R$B1  =2
      438   739  318 58C0         OR,R$B1   =(P$L2_EVBF-$PX)              Uses the last 2**N bytes
      439   740  31A 187F         ST,R$B1   P$L2_EVBFX
      440   741  31C C985         ST2,R$EV  $PX,R$B1                      R$ST = R$EV+1 we hope
      441   742  31E A789     Y$EV0 ;
      442                     *   AND,R$EV  =~128
      443                     *   LRA,R$B1  Y_ACTTBL                      Point to the action table
      444                         CLR       R$B1,R$B1+1                   (which turns out to be at 0)
      445   743  320 A069         ADD,R$B1+1 R$ST                         States are 23-tuples
      446   744  322 A059         ADD,R$B1+1 R$EV                         Events are <23
      447   745  324 D88A         LD,R$OP   ,R$B1                         Get the operation code
      448   746  326 812B         BEZ       Y$EVX                         Nothing to do.
      449                     *   LRA,R$B1  Y_NEWST_TBL                   This one is at 256 ... so ...
      450   747  328 2801         LD,R$B1   =(Y_OPS_TBL-KXS$00)/256
      451   748  32A A5A9         LD,R$B1+1  R$OP
      452   749  32C D88E         LD,R$B2   ,R$B1                         Get new state, if there is one
      453   750  32E 8110         BEZ       Y$EV1
      454   751  330 A5E6         LD,R$ST   R$B2
      455   752  332 A7EF         CLR       R$B2,R$B2+1
      456   753  334 BCE0         LDT0      R$B2                          Stop timing if new state
      457   754  336 ECB7FE       ANDM,P$L2_XFL =P$L2_XFL_TN@M\255
      458   755  339 C14401       ORM,P$L2_EVT =P$L2_EVT_OK@M   ok status may have changed.
      459   756  33C 0E22         LD,R$B2   P$L2_N2
      460   757  33E 1E23         ST,R$B2   P$L2_RC                       Also counting timeouts
      461   758  340 BA90     Y$EV1 ;
Elsie.D00  Report Event                                                         WED JUL 30 '97 02:24 Page:30
      462                     *   Now for what to do
      463                         INC       R$B1+1
      464   759  342 D88B         LD,R$OPF  ,R$B1                         Get the flags
      465   760  344 BA90         INC       R$B1+1
      466   761  346 D887         LD,R$NR   ,R$B1                         And "additional info"
      467   762  348 A789         CLR       R$B1,R$B1+1

Elsie.D00  Report Event - OP Flags Processing                                   WED JUL 30 '97 02:24 Page:31
      468   763                   TITLE     'Report Event - OP Flags Processing'
      469   764  34A 6B20         LB,R$OPF  =Y_OPDSC#           Time to shut down?
      470   765  34C 8106         BBF       Y$EV_DSCX           Nope.
      471   766  34E D5860A       SMSW,R$NR-1 KX_L2_SLCCSTT-1,R$B1 Set the subcode.
      472   767  351 88EC         B         Y$DSC_RCV           Interrupt and hang.
      473   768  353 F1       Y$EVX ;
      474                         RSR
      475   769  354 6B04     Y$EV_DSCX ;
      476                         LB,R$OPF  =Y_OPRST#           Reset the counters if needed
      477   770  356 810F         BBF       Y$EV_RSTX
      478   771  358 A7C4         CLR       R$VS,R$RPF
      479   772  35A 181C         ST,R$B1   P$L2_NPR
      480   773  35C 181D         ST,R$B1   P$L2_NNR
      481   774  35E DBB808       LDM,P$L2_NRP P$RF_B1
      482   775  361 DBB620       LDM,P$L2_RK P$L2_K
      483   776  364 DBB508       LDM,P$L2_NSI P$RF_B1
      484   777  367 6B01     Y$EV_RSTX ;
      485                         LB,R$OPF  =Y_OPLOG#           Something got logged,
      486   778  369 8103         BBF       Y$EV_LOGX
      487   779  36B C14480       ORM,P$L2_EVT =P$L2_EVT_STT@M  Tell background to copy it down.
      488   780  36E 6B08     Y$EV_LOGX ;
      489                         LB,R$OPF  =Y_OPCLQ#           Stop transmitting if desired
      490   781  370 8108         BBF       Y$EV_CLQX
      491   782  372 EDB720       ORM,P$L2_XFL =P$L2_XFL_NRR@M  Make like the other end is busy
      492   783  375 C14401       ORM,P$L2_EVT =P$L2_EVT_OK@M   ok status may have changed.
      493   784  378 4DFB         AND,R$STT =~P$L2_STT_REQ@M    REQ might be leftover. E.g.,REJ>FRMR
      494   785  37A 6B10     Y$EV_CLQX ;
      495                         LB,R$OPF  =Y_OPREQ#           Retransmit if desired
      496   786  37C 8109         BBF       Y$EV_REQX
      497   787  37E 5D04         OR,R$STT  =P$L2_STT_REQ@M     Set flag for background
      498   788  380 0C1D         LD,R$VS   P$L2_NNR
      499   789  382 44FE         AND,R$RPF =~1
      500   790  384 DBB504       LDM,P$L2_NSI P$L2_RPF
      501   791  387 7A54     Y$EV_REQX ;
      502                         C,R$OP    =Y_OP_I#            Send RR if not transmitting
      503   792  389 8905         BNE       Y$EV2
Elsie.D00  Report Event - OP Flags Processing                                   WED JUL 30 '97 02:24 Page:32
      504   793  38B C24410       LBM,P$L2_EVT =K_IR2_EVENT_XLE
      505   794  38E 890C         BBT       Y$EV_SND0
      506   795  390 6B02     Y$EV2 ;
      507                         LB,R$OPF  =Y_OPSND#           Are we to send a frame?
      508   796  392 819E         BBF       Y$EV_SNDX           No.
      509   797  394 7701         C,R$NR    ='01'X              RESP/REJ only does if polled
      510   798  396 8904         BNE       Y$EV_SND0
      511   799  398 6D40         LB,R$STT  =P$L2_STT_PR@M
      512   800  39A 8196         BBF       Y$EV_SNDX
      513   801  39C A7EF     Y$EV_SND0 ;
      514                         CLR       R$B2,R$B2+1
      515   802  39E 2F03         LD,R$B2+1 =3                            Set the frame size
      516   803  3A0 D58E44       SMSW,R$B2 KX_L2_P_CCB_RANGE,R$B1
      517   804  3A3 7786         C,R$NR    ='86'X                        If FRMR, build the rest first
      518   805  3A5 8929         BNE       Y$EV_SND1
      519   806  3A7 2F08         LD,R$B2+1 =8
      520   807  3A9 D58E44       SMSW,R$B2 KX_L2_P_CCB_RANGE,R$B1
      521   808  3AC 7A30         C,R$OP    =Y_OP_FRMR#         Only build it the first time
      522   809  3AE 8920         BNE       Y$EV_SND1
      523   810  3B0 1326         ST,R$SI   P$L2_FRMRSI
      524   811  3B2 A54E         LD,R$B2   R$RPF
      525   812  3B4 DAB50F       STM,P$L2_NSI P$RF_B2+1
      526   813  3B7 D58E52       SMSW,R$B2 KX_L2_P_FRAME_FRMR_CTL+1,R$B1
      527   814  3BA DAB80E       STM,P$L2_NRP P$RF_B2
      528   815  3BD 4EFE         AND,R$B2  =~1
      529   816  3BF 4201         AND,R$ADR =1
      530   817  3C1 A32E         OR,R$B2   R$ADR
      531   818  3C3 0F25         LD,R$B2+1 P$L2_ERR
      532   819  3C5 4F0F         AND,R$B2+1 =15
      533   820  3C7 D58E54       SMSW,R$B2 KX_L2_P_FRAME_FRMR_CRVR,R$B1
      534   821  3CA C33201       ADDM,P$STATS_RSS =1
      535   822  3CD ECB7FB       ANDM,P$L2_XFL =~P$L2_XFL_AK@M No need for ack anymore.
      536   823  3D0 A57F     Y$EV_SND1 ;
      537                         LD,R$B2+1 R$NR                What we're sending
      538   824  3D2 0E21         LD,R$B2   P$L2_ADR_RESP       Decide whether to send CMND or RESP
      539   825  3D4 6711         LB,R$NR   ='11'X              01 => RESP
Elsie.D00  Report Event - OP Flags Processing                                   WED JUL 30 '97 02:24 Page:33
      540   826  3D6 840A         BODD      Y$EV_SND10
      541   827  3D8 8103         BBF       Y$EV_SND9           10 => CMND, 00 => RESP w/ timer
      542   828  3DA DAB40E       STM,P$L2_ADR_CMND P$RF_B2     Send a CMND
      543   829  3DD ECB7FD   Y$EV_SND9 ;                       Send a CMND
      544                         ANDM,P$L2_XFL =~P$L2_XFL_TS@M We want the timer started
      545   830  3E0 5F01         OR,R$B2+1 =1
      546   831  3E2 4FEF     Y$EV_SND10 ;
      547                         AND,R$B2+1 =~'10'X            Zero the RSU bit.
      548   832  3E4 D58E4E       SMSW,R$B2 KX_L2_P_FRAME_ADR,R$B1
      549                     *                                 Now to decide the P/F bit
      550   833  3E7 2E01         LD,R$B2   =1
      551   834  3E9 6710         LB,R$NR   ='10'X              Only commands are polled
      552   835  3EB 8108         BBF       Y$EV_SND11
      553   836  3ED 7511         C,R$EV    =Y_EV_TO#           And then only timeouts
      554   837  3EF 8908         BNE       Y$EV_SND19
      555   838  3F1 5D80         OR,R$STT  =P$L2_STT_PS@M
      556   839  3F3 8806         B         Y$EV_SND20
      557   840  3F5 6D40     Y$EV_SND11 ;
      558                         LB,R$STT  =P$L2_STT_PR@M      Send a final RESP if CMND was polled
      559   841  3F7 8902         BBT       Y$EV_SND20
      560   842  3F9 4EFE     Y$EV_SND19 ;
      561                         AND,R$B2  =~1
      562   843  3FB 6702     Y$EV_SND20 ;
      563                         LB,R$NR   ='2'X               If it's a supervisory frame,
      564   844  3FD 890A         BBT       Y$EV_SND21          send NR, too.
      565   845  3FF DAB80F       STM,P$L2_NRP P$RF_B2+1
      566   846  402 ECB7FB       ANDM,P$L2_XFL =~P$L2_XFL_AK@M
      567   847  405 4FFE         AND,R$B2+1 =~1
      568   848  407 A3FE         OR,R$B2   R$B2+1
      569   849  409 0F26     Y$EV_SND21 ;
      570                         LD,R$B2+1 P$L2_FRMRSI         (Start of a FRMR just is case)
      571   850  40B D58E50       SMSW,R$B2 KX_L2_P_FRAME_CTLRPF,R$B1
      572                     *                                 The frame is built, get it sent.
      573   851  40E 6D02         LB,R$STT  =P$L2_STT_PCB@M     Give up if already pending.
      574   852  410 8920         BBT       Y$EV_SNDX
      575   853  412 FB           TCX                           Use transmit context of course
Elsie.D00  Report Event - OP Flags Processing                                   WED JUL 30 '97 02:24 Page:34
      576   854  413 EDB780       ORM,P$L2_XFL =P$L2_XFL_IF@M   Set the flag for XGNF
      577   855  416 5D02         OR,R$STT  =P$L2_STT_PCB@M     And for us.
      578   856  418 D5883E       SMSW,R$B1 KX_L2_P_CCB_LNK,R$B1
      579   857  41B D48E42       LMSW,R$B2 KX_L2_P_CCB_DATA_ADR,R$B1
      580   858  41E 3FF0         ADD,R$B2+1 =KX_L2_P_CCB_LNK-KX_L2_P_FRAME_ADR Compute CCB addr
      581                     *!* LNC       R$B2,R$B2           Try to link it in
      582   859  420 C214FF       LBM,P$L2_NXQ =255
      583   860  423 8906         BNEZ      Y$EV_SND25          Already have a Q - XGNF will do it.
      584   861  425 1E14         ST,R$B2   P$L2_NXQ
      585   862  427 DCEE         APP       R$B2,R$B2
      586   863  429 A7EF         CLR       R$B2,R$B2+1         No Q - make sure XGNF knows.
      587   864  42B DBBC0E   Y$EV_SND25 ;
      588                         LDM,P$L2_NCCB P$RF_B2
      589   865  42E DBBD0F       LDM,P$L2_NCCB+1 P$RF_B2+1
      590                     *!* TON                           And turn on the transmitter
      591   866  431 FA           RCX
      592   867  432 F1       Y$EV_SNDX ;
      593                         RSR

Elsie.D00  Trap handler                                                         WED JUL 30 '97 02:24 Page:35
      594   868                   TITLE     'Trap handler'
      595   869  433 F9       Y$TRAP ;
      596                         TOF
      597   870  434 F7           ROF
      598   871  435 B5CF         SWRX      P$L2_TRRX
      599   872  437 20AC         LD,R0     =K_TSA_P            Save the trap location
      600   873  439 C800         LD2,R0    $PX,R0
      601   874  43B 22AE         LD,R2     =K_TSA_P+2
      602   875  43D C822         LD2,R2    $PX,R2
      603   876  43F FB       Y$DSC_RCV ;
      604                         TCX                           Interrupt with output channel.
      605   877  440 A7CD         CLR       R12,R13
      606   878  442 D5CCE8       SMSW,R12  KX_L2_XMTCCB_LOCK,R12 Dont hang up the FEP too.
      607   879  445 EB0B         INT       =11                 Tell the FEP to disconnect
      608   880  447 98FE     Y$TR1 ;
      609                         B         Y$TR1

Elsie.D00  Xmit EOF Interrupt                                                   WED JUL 30 '97 02:24 Page:36
      610   881                   TITLE     'Xmit EOF Interrupt'
      611                     *
      612                     *   XMTEOF Interrupt Code
      613                     *   Since I can't figure how else to remove supervisory-frame CCBs
      614                     *   from the P-queue, we'll have to manage our own P-queue.
      615                     *   So here, GIVE nothing to clear the P-queue, and add to our Q
      616                     *   unless it's the supervisory CCB.
      617                     *
      618   882  449 62FE     Y$XMTEOF ;
      619                         LB,R2     =~K_IR2_XEOF_UR
      620   883  44B 8101         BBF       Y$XE1
      621   884  44D FF           BYTE      255                           screech
      622   885  44E 6201     Y$XE1 ;
      623                         LB,R2     =K_IR2_XEOF_UR                Log underruns,
      624   886  450 8141         BBF       Y$XEX                         they get resent automatically
      625   887  452 C32401       ADDM,P$L2_UR =1
      626   888  455 F3           RTI
      627   889  456 39FF     Y$XE2 ;
      628                         ADD,R$TQ  =-1                 Count down data_pump frames
      629   890  458 8D04         BG        Y$SCREECH3
      630   891  45A F9           TOF                           Turn off the transmitter
      631   892  45B 8101         BE        Y$SCREECH3          If last frame in the Q.
      632   893  45D FF           BYTE      255
      633   894  45E A50E     Y$SCREECH3 ;
      634                         LD,R14    R0
      635   895  460 A51F         LD,R15    R1
      636                     *N* More Debug code - trace where we were in the frame trace
      637   896  462 037D         LD,R3     P$L2_EOFTRCX
      638   897  464 3302         ADD,R3    =2
      639   898  466 433F         AND,R3    =63
      640   899  468 137D         ST,R3     P$L2_EOFTRCX
      641   900  46A 3380         ADD,R3    =(P$L2_EOFTRC-$PX)
      642   901  46C 027E         LD,R2     P$L2_TRCX
      643   902  46E C931         ST2,R1    $PX,R3
      644   903  470 A701         CLR       R0,R1
      645   904  472 DD0E         GIVE      R0,R14
Elsie.D00  Xmit EOF Interrupt                                                   WED JUL 30 '97 02:24 Page:37
      646   905  474 6F0F         LB,R15    =15                           Sup CCB isn't 8-aligned
      647   906  476 8920         BBT       Y$XE5
      648   907  478 0313         LD,R3     P$L2_I_TL$+1
      649   908  47A 0212         LD,R2     P$L2_I_TL$
      650   909  47C 8906         BNEZ      Y$XE3
      651   910  47E 1E10         ST,R14    P$L2_I_HD$                    No chain, make one.
      652   911  480 1F11         ST,R15    P$L2_I_HD$+1
      653   912  482 880B         B         Y$XE4
      654   913  484 D32E00   Y$XE3 ;
      655                         SMCW,R14  K$CCB_LNK,R2
      656   914  487 D22202       LMCW,R2   KX_CCB_LNK_FEP,R2   Must match the FEPS link
      657   915  48A A6E2         C,R2      R14
      658   916  48C 8101         BE        Y$XE4
      659   917  48E FF           BYTE      255
      660   918  48F 1E12     Y$XE4 ;
      661                         ST,R14    P$L2_I_TL$
      662   919  491 1F13         ST,R15    P$L2_I_TL$+1
      663   920  493 7000     Y$XEX ;
      664                         C,R0      =0                  On the off chance that there's more,
      665   921  495 99BF         BNE       Y$XE2               Repeat the process.
      666   922  497 F3           RTI
      667   923  498 C00DFD   Y$XE5 ;
      668                         ANDM,P$L2_STT =~P$L2_STT_PCB@M  It's not busy anymore.
      669   924  49B 98F6         B         Y$XEX

Elsie.D00  Event Interrupt                                                      WED JUL 30 '97 02:24 Page:38
      670   925                   TITLE     'Event Interrupt'
      671                     *
      672                     *   EVENT interrupt code
      673                     *
      674   926  49D 6280     Y$EVENT ;
      675                         LB,R2     =K_IR2_EVENT_TM0
      676   927  49F 8913         BBT       Y$EVENT_T0
      677   928  4A1 6220         LB,R2     =K_IR2_EVENT_LNS
      678   929  4A3 8926         BBT       Y$EVENT_LS
      679   930  4A5 6240         LB,R2     =K_IR2_EVENT_TM1
      680   931  4A7 8937         BBT       Y$EVENT_T1
      681   932  4A9 6210         LB,R2     =K_IR2_EVENT_XLE
      682   933  4AB 8953         BBT       Y$EVENT_XE
      683   934  4AD 0344         LD,R3     P$L2_EVT
      684   935  4AF A323         OR,R3     R2
      685   936  4B1 1344         ST,R3     P$L2_EVT
      686   937  4B3 F3           RTI
      687   938  4B4 C33001   Y$EVENT_T0 ;
      688                         ADDM,P$STATS_TO =1
      689   939  4B7 2341         LD,R3     =RXPX_RF#                     Timer runout.  Report an event
      690   940  4B9 ECB7FE       ANDM,P$L2_XFL =P$L2_XFL_TN@M\255        Indicate not running
      691   941  4BC E830         LDRX      R3                            Use the right registers
      692   942  4BE 2511         LD,R$EV   =Y_EV_TO#
      693   943  4C0 C323FF       ADDM,P$L2_RC =-1                        Is this a final one?
      694   944  4C3 8902         BNEZ      Y$EVENT_T01
      695   945  4C5 2512         LD,R$EV   =Y_EV_TO_N2#                  Yup.
      696   946  4C7 B2FE46   Y$EVENT_T01 ;
      697                         CALL      Y$EV                          Report the event.
      698   947  4CA F3           RTI                                     all done.
      699                     *   Line status change
      700   948  4CB B800     Y$EVENT_LS  ;
      701                         STLS      R0                  What did it change to?
      702   949  4CD 40C0         AND,R0    ='C0'X
      703   950  4CF 70C0         C,R0      ='C0'X
      704   951  4D1 8904         BNE       Y$EVENT_LS1         (Still?) not up.
      705   952  4D3 C02700       ANDM,P$L2_LSCLK =0            Signals back. Stop the timer
Elsie.D00  Event Interrupt                                                      WED JUL 30 '97 02:24 Page:39
      706   953  4D6 F3           RTI
      707   954  4D7 C227FF   Y$EVENT_LS1 ;
      708                         LBM,P$L2_LSCLK =255           Is the timer already running?
      709   955  4DA 8903         BNEZ      Y$EVENT_LS2         Yup
      710   956  4DC C32704       ADDM,P$L2_LSCLK =4            Set a 4 to 5 second clock
      711   957  4DF F3       Y$EVENT_LS2 ;
      712                         RTI
      713                     *   And when the clock runs out - give up the ghost
      714   958  4E0 A701     Y$EVENT_T1 ;
      715                         CLR       R0,R1
      716   959  4E2 C227FF       LBM,P$L2_LSCLK =255           Are we timing lost signals?
      717   960  4E5 810C         BBF       Y$EVENT_T11
      718   961  4E7 C327FF       ADDM,P$L2_LSCLK =-1
      719   962  4EA 8907         BNEZ      Y$EVENT_T11
      720   963  4EC 2203         LD,R2     =3                  Set the subcode
      721   964  4EE D5010A       SMSW,R1   KX_L2_SLCCSTT-1,R0
      722   965  4F1 984C         B         Y$DSC_RCV
      723   966  4F3 FD       Y$EVENT_T11 ;
      724                         TIR                           Fire off an interrupt every second
      725   967  4F4 8902         BNEZ      Y$EVENT_T12         just in case]
      726   968  4F6 EB0C         INT       =12                 XMT first - cause we're already there
      727   969  4F8 FA       Y$EVENT_T12 ;
      728                         RCX
      729   970  4F9 EB01         INT       =1                  Then RCV - can't tell if pending
      730   971  4FB 213C         LD,R1     =60                 Restart the clock
      731   972  4FD BE00         LDT1      R0
      732   973  4FF F3           RTI
      733                     *
      734   974  500 C14410   Y$EVENT_XE ;
      735                         ORM,P$L2_EVT =K_IR2_EVENT_XLE
      736   975  503 C37D02       ADDM,P$L2_EOFTRCX =2
      737   976  506 037D         LD,R3     P$L2_EOFTRCX
      738   977  508 433F         AND,R3    =63
      739   978  50A 3380         ADD,R3    =(P$L2_EOFTRC-$PX)
      740   979  50C 027E         LD,R2     P$L2_TRCX
      741   980  50E 21FF         LD,R1     =255
Elsie.D00  Event Interrupt                                                      WED JUL 30 '97 02:24 Page:40
      742   981  510 C931         ST2,R1    $PX,R3
      743   982  512 EEB704       LBM,P$L2_XFL =P$L2_XFL_AK@M   Send an RR if needed.
      744   983  515 810B         BBF       Y$EVENT_XE2
      745   984  517 2341         LD,R3     =RXPX_RF#
      746   985  519 E830         LDRX      R3
      747   986  51B 2701         LD,R$NR   ='01'X
      748   987  51D A789         CLR       R$B1,R$B1+1
      749   988  51F B2FE7A       CALL      Y$EV_SND0
      750   989  522 F3       Y$EVENT_XE2 ;
      751                         RTI

Elsie.D00  Task Interrupt                                                       WED JUL 30 '97 02:24 Page:41
      752   990                   TITLE     'Task Interrupt'
      753                     *
      754                     *   Used to wake up the SLCC for new XMT CCBs or initial startup.
      755                     *
      756   991  523 C14402   Y$TASK ;
      757                         ORM,P$L2_EVT =P$L2_EVT_CCB@M
      758   992  526 F3           RTI

Elsie.D00  XMT Get-Next-Frame Interrupt                                         WED JUL 30 '97 02:24 Page:42
      759   993                   TITLE     'XMT Get-Next-Frame Interrupt'
      760                     *
      761                     *   XMTGNF code.  Put NS and NR into I(nformation frames).
      762                     *   If supervisory frame wants to be sent, send it first.
      763                     *   Set timer-0 if that is desired.
      764                     *
      765   994  527 C044EF   Y$XMTGNF ;
      766                         ANDM,P$L2_EVT =~K_IR2_EVENT_XLE         N-queue obviously not empty
      767   995  52A 67E0         LB,R$XFL  =P$L2_XFL_IF@M|;    Check frame insertion,
      768                                   P$L2_XFL_WF@M|;     Window full,
      769                                   P$L2_XFL_NRR@M      and RNR rec'd conditions.
      770   996  52C 8208         BMT       Y$XG1               IF is the "sign" bit
      771   997  52E 8150         BEZ       Y$XG2               Others MBZ to send an I-frame
      772   998  530 A51D         LD,R$NCCB+1 R$CCB+1           Remove when bugfree for speed
      773   999  532 A701         CLR       R$CCB,R$CCB+1       Out of credits, shut off the DMA
      774  1000  534 8829         B         Y$DEBUG1            Remove when bugfree for speed
      775                     *?? RTI
      776                     *?? BYTE      255                 With window-block in Fep, can't get here
      777                     *
      778  1001  536 477F     Y$XG1 ;
      779                         AND,R$XFL =127                We are to interject a frame.
      780  1002  538 7D00         C,R$NCCB+1 =0                 If cleared, it's the only CCB
      781  1003  53A 810B         BE        Y$XG_ST             And it's already in the queue
      782  1004  53C 6720         LB,R$XFL  =P$L2_XFL_NRR@M     Clear the N-queue if in restart
      783  1005  53E 8903         BBT       Y$XG11
      784  1006  540 D3C000       SMCW,R$CCB K$CCB_LNK,R$NCCB   R$NCCB stored by frame builder for us
      785  1007  543 A5C0     Y$XG11 ;
      786                         LD,R$CCB  R$NCCB
      787  1008  545 A5D1         LD,R$CCB+1 R$NCCB+1
      788  1009  547 BA90     Y$XG_ST ;
      789                         INC       R$TQ                Count data_pump frames
      790  1010  549 6703         LB,R$XFL  =P$L2_XFL_TN@M|P$L2_XFL_TS@M
      791                     *             Both flags off means we need to set the timer. TS is inverted
      792  1011  54B 8909         BBT       Y$XG_ST1            Running or not needed, don't load it.
      793  1012  54D A7CD         CLR       R$NCCB,R$NCCB+1
      794  1013  54F D4CC56       LMSW,R$NCCB KX_L2_T1S,R$NCCB
Elsie.D00  XMT Get-Next-Frame Interrupt                                         WED JUL 30 '97 02:24 Page:43
      795  1014  552 BCC0         LDT0      R$NCCB
      796  1015  554 5701         OR,R$XFL  =P$L2_XFL_TN@M      Set running
      797  1016  556 5702     Y$XG_ST1 ;
      798                         OR,R$XFL  =P$L2_XFL_TS@M      Indicate not needed for next frame
      799  1017  558 D20E00       LMCW,R$B2 0,R$CCB
      800  1018  55B 1E14         ST,R$B2   P$L2_NXQ            Save flink for EV_SND
      801                     *   These lines for debug purposes only - comment out when obsolete
      802  1019  55D A51D         LD,R$NCCB+1 R$CCB+1           debug
      803  1020  55F A50C     Y$DEBUG1 LD,R$NCCB R$CCB          debug
      804  1021  561 027E         LD,R2     P$L2_TRCX           debug
      805  1022  563 C37E06       ADDM,P$L2_TRCX =6             debug
      806  1023  566 2302         LD,R3     =2                  debug
      807  1024  568 E630         LDPX      R3                  debug
      808  1025  56A C92C         ST2,R$NCCB $PX,R2             debug
      809  1026  56C 610F         LB,R$CCB+1 =15                debug
      810  1027  56E 8107         BBF       Y$XGT1              debug
      811  1028  570 D20E10       LMCW,R$B2 16,R$CCB            debug
      812  1029  573 5E80         OR,R$B2   =128                debug
      813  1030  575 C92E         ST2,R$B2 $PX,R2               debug
      814  1031  577 3202     Y$XGT1 ;                          debug
      815                         ADD,R2    =2                  debug
      816  1032  579 C925         ST2,R$NSI $PX,R2              debug
      817  1033  57B 3202         ADD,R2    =2                  debug
      818  1034  57D C927         ST2,R$XFL $PX,R2              debug
      819  1035  57F F3           RTI
      820                     *
      821  1036  580 D20C04   Y$XG2 ;                           Send an information frame.
      822                         LMCW,R$NCCB K$CCB_DATA_ADR,R$CCB
      823  1037  583 D3C400       SMCW,R$AC  K$FRAME_ADR,R$NCCB Store ADR and first CTL byte.
      824  1038  586 3502         ADD,R$NSI =2                  Increment NS.
      825  1039  588 C30C01       ADDM,P$L2_VS =1               (actually Vs)
      826  1040  58B D1C802       SMDB,R$NRP K$FRAME_CTL_RPF,R$NCCB Set NR and poll
      827  1041  58E 48FE         AND,R$NRP =~1                 Only poll once.
      828  1042  590 47F9         AND,R$XFL =~(P$L2_XFL_TS@M;   Set timer if stopped.
      829                                    |P$L2_XFL_AK@M)    ACK sent now.
      830  1043  592 BB60         DEC       R$RK                Decrement the window.
Elsie.D00  XMT Get-Next-Frame Interrupt                                         WED JUL 30 '97 02:24 Page:44
      831                     *?? BNEZ      Y$XG_ST             Still some left
      832                     *?? OR,R$XFL  =P$L2_XFL_WF@M      Full, set the flag for next time
      833  1044  594 98B1         B         Y$XG_ST

Elsie.D00  Background Processing                                                WED JUL 30 '97 02:24 Page:45
      834  1045                   TITLE     'Background Processing'
      835  1046  596 2080     Y$BACKGROUND ;
      836                     *                                 First thing to do is raise DTR
      837                     *                                 and wait for a response
      838                         LD,R0     ='80'X
      839  1047  598 B700         LDLC      R0
      840  1048  59A B810     Y$BG1 ;
      841                         STLS      R1
      842  1049  59C 6190         LB,R1     ='90'X              Is DSR or RING up yet?
      843  1050  59E 91FA         BBF       Y$BG1               No, wait(?!) some more
      844  1051  5A0 20C0         LD,R0     ='C0'X              Ok.  Raise RTS too
      845  1052  5A2 B700         LDLC      R0
      846  1053  5A4 B810     Y$BG2 ;
      847                         STLS      R1                  And wait for CTS
      848  1054  5A6 6180         LB,R1     ='80'X
      849  1055  5A8 91F0         BBF       Y$BG1               (making sure we don't lose DSR)
      850  1056  5AA 6140         LB,R1     ='40'X
      851  1057  5AC 91F6         BBF       Y$BG2
      852  1058  5AE EB0C         INT       =12                 Interrupt the FEP to get a system area
      853  1059  5B0 FC           WAIT
      854  1060  5B1 B900         LDLM      R0                  Get an event if DSR goes away
      855                     *                                 Copy the parameters from the FEP
      856  1061  5B3 A701         CLR       R0,R1
      857  1062  5B5 223C         LD,R2     =60                 Start a 1-second clock
      858  1063  5B7 BE10         LDT1      R1
      859  1064  5B9 D4023C       LMSW,R2   KX_L2_ADR_CMND,R0   CMND and RESP address fields
      860  1065  5BC DBB442       LDM,P$L2_ADR_CMND $PX+(RXPX_B#&'3C'X)*4+2
      861  1066  5BF 1321         ST,R3     P$L2_ADR_RESP
      862  1067  5C1 D4022C       LMSW,R2   KX_L2_K&~1,R0       Window size
      863  1068  5C4 1220         ST,R2+(KX_L2_K&1) P$L2_K
      864  1069  5C6 D4022E       LMSW,R2   KX_L2_N2&~1,R0      Retransmissions
      865  1070  5C9 1222         ST,R2+(KX_L2_N2&1) P$L2_N2
      866  1071  5CB DBB620       LDM,P$L2_RK P$L2_K            Move K to XGNF regs
      867  1072  5CE F6           RON
      868  1073  5CF F5           REN                           Start by reporting an event
      869  1074  5D0 2F41         LD,R15     =RXPX_RF#
Elsie.D00  Background Processing                                                WED JUL 30 '97 02:24 Page:46
      870  1075  5D2 E8F0         LDRX      R15
      871  1076  5D4 B2FD39       CALL      Y$EV
      872  1077  5D7 2F51         LD,R15    =RXPX_B#
      873  1078  5D9 E8F0         LDRX      R15
      874  1079  5DB F4           SEN                           Allow interrupts again.
      875  1080  5DC FB           TCX
      876  1081  5DD 0514     Y$BG3 ;                           Wait for link setup
      877                         LD,R$T1   P$L2_NXQ            Turn on the transmitter
      878  1082  5DF 8101         BEZ       Y$BG4               If needed
      879  1083  5E1 F8           TON
      880  1084  5E2 0506     Y$BG4 ;
      881                         LD,R$T1   P$L2_ST
      882  1085  5E4 758A         C,R$T1    =Y_ST_NORMAL#
      883  1086  5E6 99F5         BNE       Y$BG3
      884  1087  5E8 EB03         INT       =3                  Tell the FEP
      885  1088  5EA FD       Y$BG5 ;
      886                         TIR                           Wait for the Fep to hear it.
      887  1089  5EB 99FD         BNEZ      Y$BG5
      888                     *                                 Here's the main loop
      889  1090  5ED A789     Y$BG_LOP ;
      890                         CLR       R$B1,R$B1+1
      891  1091  5EF 6401         LB,R$EVT  =P$L2_EVT_OK@M
      892  1092  5F1 812D         BBF       Y$BG_OKX            No change in state or "ok"
      893  1093  5F3 44FE         AND,R$EVT =~P$L2_EVT_OK@M
      894  1094  5F5 0E06         LD,R$B2   P$L2_ST
      895  1095  5F7 2508         LD,R$T1   =KX_L2_FLG_OK@M     Set BLK and OK properly.
      896  1096  5F9 295C         LD,R$B1+1 =KX_L2_FLG
      897  1097  5FB EEB720       LBM,P$L2_XFL =P$L2_XFL_NRR@M
      898  1098  5FE 8902         BBT       Y$BG_OK0
      899  1099  600 7E8A         C,R$B2    =Y_ST_NORMAL#
      900  1100  602 B20172   Y$BG_OK0 ;
      901                         CALL      Y$SETIFFALSE
      902                     *?? LD,R$T1   =KX_L2_FLG_BLK@M
      903                     *?? LBM,P$L2_XFL =P$L2_XFL_WF@M   BLK is known here as Window-Full
      904                     *?? CALL      Y$SETIFTRUE
      905  1101  605 A799         CLR       R$B1+1
Elsie.D00  Background Processing                                                WED JUL 30 '97 02:24 Page:47
      906  1102  607 A5EF         LD,R$B2+1 R$B2                Copy the current state to the FEP
      907  1103  609 ABF2         SOR,R$B2+1 2                  (ST-ST/4)/16 is what the FEP wants
      908  1104  60B A1FE         SUB,R$B2  R$B2+1
      909  1105  60D ABE4         SOR,R$B2  4
      910  1106  60F D4863A       LMSW,R$B3 KX_L2_STATES,R$B1   Set previous state if different
      911  1107  612 A57F         LD,R$B2+1 R$B3+1
      912  1108  614 A6E6         C,R$B3    R$B2
      913  1109  616 8102         BE        Y$BG_OK1
      914  1110  618 A56F         LD,R$B2+1 R$B3
      915  1111  61A D58E3A   Y$BG_OK1 ;
      916                         SMSW,R$B2 KX_L2_STATES,R$B1
      917  1112  61D D48EEC       LMSW,R$B2 KX_L2_COMBUF,R$B1
      918                     *                                 Release any ACKed XMT frames
      919  1113  620 6402     Y$BG_OKX ;
      920                         LB,R$EVT  =P$L2_EVT_CCB@M     Anything to do here?
      921  1114  622 8905         BBT       Y$BG_XQ0
      922  1115  624 C20D04       LBM,P$L2_STT =P$L2_STT_REQ@M
      923  1116  627 81C1         BBF       Y$BG_XQX
      924  1117  629 44FD     Y$BG_XQ0 ;
      925                         AND,R$EVT =~P$L2_EVT_CCB@M
      926  1118  62B 2545         LD,R$T1   =RXPX_XQ#
      927  1119  62D E850         LDRX      R$T1
      928  1120  62F F5           REN
      929  1121  630 2A02     Y$BG_XQW ;
      930                         LD,R$XQ1  =2                  Lock out the FEP
      931  1122  632 D68AE9       TSSB,R$XQ1 KX_L2_XMTCCB_LOCK+1,R$B1
      932  1123  635 99F9         BBT       Y$BG_XQW            Or wait for it.  Whatever's fair.
      933                     *   First see if there's any CCBs to get into the Next Queue
      934  1124  637 D48EEA       LMSW,R$B2 KX_L2_XMTCCB_NEXT,R$B1
      935  1125  63A 8120         BEZ       Y$BG_NXX
      936  1126  63C EEB720       LBM,P$L2_XFL =P$L2_XFL_NRR@M  But wait if we're requeueing
      937  1127  63F 891B         BBT       Y$BG_NXX
      938  1128  641 D48AE6       LMSW,R$XQ1 KX_L2_XMTCCB_TAIL,R$B1
      939                     *!* LNC       R$XQ1,R$B2
      940                     *!* BEZ       Y$BG_NX1
      941  1129  644 A5E4         ST,R$B2   R$NXQ               There IS a next Q.
Elsie.D00  Background Processing                                                WED JUL 30 '97 02:24 Page:48
      942  1130  646 DCEA         APP       R$B2,R$XQ1
      943  1131  648 D588EA   Y$BG_NX1 ;
      944                         SMSW,R$B1 KX_L2_XMTCCB_NEXT,R$B1
      945  1132  64B C37D02       ADDM,P$L2_EOFTRCX =2
      946  1133  64E 0A7D         LD,R$XQ1  P$L2_EOFTRCX
      947  1134  650 4A3F         AND,R$XQ1 =63
      948  1135  652 3A80         ADD,R$XQ1 =(P$L2_EOFTRC-$PX)
      949  1136  654 A5FE         LD,R$B2   R$B2+1
      950  1137  656 0F7E         LD,R$B2+1 P$L2_TRCX
      951  1138  658 5E04         OR,R$B2   =4
      952  1139  65A C9AE         ST2,R$B2  $PX,R$XQ1
      953  1140  65C A6CD     Y$BG_NXX ;
      954                         C,R$NNR   R$NPR
      955  1141  65E 812C         BE        Y$BG_XQ3            Nothing to release.
      956  1142  660 EFB601   Y$BG_XQ1 ;
      957                         ADDM,P$L2_RK =1
      958  1143  663 3C01         ADD,R$NPR =1
      959  1144  665 8A07         BMF       Y$BG_XQ2            Fix all three when the lowest wraps
      960  1145  667 4D7F         AND,R$NNR =127
      961  1146  669 4C7F         AND,R$NPR =127
      962  1147  66B C00C7F       ANDM,P$L2_VS =127             Vs too, we've seen a wrapped Nr.
      963  1148  66E 7000     Y$BG_XQ2 ;
      964                         C,R$HD    =0                  Screech if ZERO
      965  1149  670 8901         BNE       Y$SCREECH1
      966  1150  672 FF           BYTE      255
      967  1151  673 D20A00   Y$SCREECH1 ;
      968                         LMCW,R$XQ1 K$CCB_LNK,R$HD
      969  1152  676 D30600       SMCW,R$DED K$CCB_LNK,R$HD
      970  1153  679 D480E4       LMSW,R$HD KX_L2_XMTCCB_HEAD#/8,R$B1
      971  1154  67C D20000       LMCW,R$HD K$CCB_LNK,R$HD      Make sure the first is DED
      972  1155  67F 8201         BMT       Y$SCREECH2
      973  1156  681 FF           BYTE      255
      974  1157  682 A5A0     Y$SCREECH2 ;
      975                         LD,R$HD   R$XQ1
      976  1158  684 A5B1         LD,R$HD+1 R$XQ1+1
      977  1159  686 A6CD         C,R$NNR   R$NPR
Elsie.D00  Background Processing                                                WED JUL 30 '97 02:24 Page:49
      978  1160  688 99D6         BNE       Y$BG_XQ1
      979  1161  68A EB0C         INT       =12
      980  1162  68C C20D04   Y$BG_XQ3 ;
      981                         LBM,P$L2_STT =P$L2_STT_REQ@M  Check for requeue needed.
      982  1163  68F 8146         BBF       Y$BG_XQ5
      983  1164  691 EEB9FF       LBM,P$L2_TQ =255              Wait for all data_pump frames
      984  1165  694 8941         BBT       Y$BG_XQ5            to get XEOF interrupts.
      985  1166  696 C00DFB       ANDM,P$L2_STT =~P$L2_STT_REQ@M
      986  1167  699 7000         C,R$HD    =0                  Anything left to send?
      987  1168  69B 8915         BNE       Y$BG_XQ35           Yes. Just relink the queue
      988  1169  69D D482E4       LMSW,R$TL KX_L2_XMTCCB_HEAD#/8,R$B1
      989  1170  6A0 A520     Y$BG_XQ31 ;                       Find the first unacknowledged frame.
      990                         LD,R$HD   R$TL
      991  1171  6A2 812D         BEZ       Y$BG_XQ4            None. Nothing to do.
      992  1172  6A4 A531         LD,R$HD+1 R$TL+1
      993  1173  6A6 D20202       LMCW,R$TL KX_CCB_LNK_FEP,R$HD
      994  1174  6A9 D20A00       LMCW,R$XQ1 KX_CCB_LNK_SLCC,R$HD
      995  1175  6AC 92F2         BMT       Y$BG_XQ31           Acked, flink along some.
      996  1176  6AE A502         LD,R$TL   R$HD
      997  1177  6B0 A513         LD,R$TL+1 R$HD+1
      998  1178  6B2 D22A02   Y$BG_XQ35 ;
      999                         LMCW,R$XQ1 KX_CCB_LNK_FEP,R$TL
     1000  1179  6B5 D32A00       SMCW,R$XQ1 KX_CCB_LNK_SLCC,R$TL
     1001  1180  6B8 8106         BEZ       Y$BG_XQ36           Found the end.
     1002  1181  6BA A5A2         LD,R$TL   R$XQ1
     1003  1182  6BC A5B3         LD,R$TL+1 R$XQ1+1
     1004  1183  6BE 98F2         B         Y$BG_XQ35
     1005  1184  6C0 D588EA   Y$BG_XQ36 ;
     1006                         SMSW,R$B1 KX_L2_XMTCCB_NEXT,R$B1 Can't be any more now.
     1007  1185  6C3 DC02         APP       R$HD,R$TL
     1008  1186  6C5 A504         ST,R$HD   R$NXQ               There IS a next Q.
     1009                     *!* LNC       R$TL,R$HD
     1010                     *!* BEZ       Y$SCREECH5          Next-queue MUST be empty.
     1011                     *!* BYTE      255
     1012  1187  6C7 A701     Y$SCREECH5 ;
     1013                         CLR       R$HD,R$HD+1
Elsie.D00  Background Processing                                                WED JUL 30 '97 02:24 Page:50
     1014  1188  6C9 A723         CLR       R$TL,R$TL+1
     1015  1189  6CB ECB7BF       ANDM,P$L2_XFL =~P$L2_XFL_WF@M
     1016  1190  6CE DBB620       LDM,P$L2_RK P$L2_K            Window is now empty
     1017  1191  6D1 ECB7DF   Y$BG_XQ4 ;
     1018                         ANDM,P$L2_XFL =~P$L2_XFL_NRR@M
     1019  1192  6D4 C14401       ORM,P$L2_EVT =P$L2_EVT_OK@M   ok status may have changed.
     1020                     *!* TON
     1021  1193  6D7 7000     Y$BG_XQ5 ;
     1022                         C,R$HD    =0
     1023  1194  6D9 8902         BNE       Y$BG_XQ6
     1024  1195  6DB A723         CLR       R$TL,R$TL+1
     1025  1196  6DD 2E03     Y$BG_XQ6 ;
     1026                         LD,R$B2   =3
     1027  1197  6DF D78EE9       RSSB,R$B2 KX_L2_XMTCCB_LOCK+1,R$B1
     1028  1198  6E2 F4           SEN
     1029  1199  6E3 2E51         LD,R$B2   =RXPX_B#
     1030  1200  6E5 E8E0         LDRX      R$B2
     1031  1201  6E7 D48EEC       LMSW,R$B2 KX_L2_COMBUF,R$B1
     1032  1202  6EA F0       Y$BG_XQX NOP
     1033                     *   Turn on the transmitter if there's frames to send
     1034                     *   And it's currently off.
     1035  1203  6EB EA50         STCS      R$T1
     1036  1204  6ED 6504         LB,R$T1   =K_ISA_XDMAI@M
     1037  1205  6EF 8105         BBF       Y$BG_TOX
     1038  1206  6F1 0514         LD,R$T1   P$L2_NXQ
     1039  1207  6F3 8101         BEZ       Y$BG_TOX            Nothing to send
     1040  1208  6F5 F8           TON
     1041  1209  6F6 F0       Y$BG_TOX NOP
     1042  1210  6F7 A5E5         LD,R$T1   R$B2                Save the flags.
     1043                     *   Debugging stuff
     1044  1211  6F9 6E60         LB,R$B2   =KX_L2_COMBUF_FEPRDY@M|KX_L2_COMBUF_FEPBSY@M
     1045  1212  6FB 8918         BBT       Y$BG_DBX            FEP wants our attention
     1046  1213  6FD 7E01         C,R$B2    =1
     1047  1214  6FF 8904         BNE       Y$BG_DB1            Get from page 0 if not =1
     1048  1215  701 C8FE         LD2,R$B2  $PX,R$B2+1
     1049  1216  703 880A         B         Y$BG_DB2
Elsie.D00  Background Processing                                                WED JUL 30 '97 02:24 Page:51
     1050  1217  705 7FA8     Y$BG_DB1 ;
     1051                         C,R$B2+1  ='A8'X              Try not to trap
     1052  1218  707 8B0C         BL        Y$BG_DBX
     1053  1219  709 CBFE         LD,R$B2   $P0,R$B2+1
     1054  1220  70B BAF0         INC       R$B2+1
     1055  1221  70D CBFF         LD,R$B2+1 $P0,R$B2+1
     1056  1222  70F D58EAB   Y$BG_DB2 ;
     1057                         SMSW,R$B2 KX_L2_IDL_PRD#/8,R$B1
     1058  1223  712 D48EEC       LMSW,R$B2 KX_L2_COMBUF,R$B1
     1059  1224  715 457F     Y$BG_DBX ;
     1060                         AND,R$T1  =~KX_L2_COMBUF_DATAVL@M
     1061  1225  717 2930         LD,R$B1+1 =P$STATS-$PX        Copy stats to the Fep
     1062  1226  719 6560         LB,R$T1   =KX_L2_COMBUF_FEPRDY@M|KX_L2_COMBUF_FEPBSY@M
     1063  1227  71B 890A         BBT       Y$BG_ST0            Always do the reset.
     1064  1228  71D F5           REN                           Test-and-clear needed
     1065  1229  71E A546         LD,R$B3   R$EVT
     1066  1230  720 447F         AND,R$EVT =255\P$L2_EVT_STT@M
     1067  1231  722 F4           SEN
     1068  1232  723 6680         LB,R$B3   =P$L2_EVT_STT@M     But only copy new stuff
     1069  1233  725 813F         BBF       Y$BG_ST6
     1070  1234  727 F5       Y$BG_ST0 ;
     1071                         REN                           Dont change the counts for a bit
     1072  1235  728 C89E         LD2,R$B2  $PX,R$B1+1
     1073  1236  72A 811C         BEZ       Y$BG_ST3
     1074  1237  72C 5580         OR,R$T1   =KX_L2_COMBUF_DATAVL@M
     1075  1238  72E 6540     Y$BG_ST1 ;
     1076                         LB,R$T1   =KX_L2_COMBUF_FEPRDY@M
     1077  1239  730 810B         BBF       Y$BG_ST2
     1078  1240  732 D486BE       LMSW,R$B3 KX_L2_COMBUF+2-(P$STATS-$PX),R$B1 Fep has started -
     1079  1241  735 A16E         SUB,R$B2  R$B3                Reset the counters.
     1080  1242  737 A17F         SUB,R$B2+1 R$B3+1
     1081  1243  739 C99E         ST2,R$B2  $PX,R$B1+1
     1082  1244  73B 880B         B         Y$BG_ST3
     1083  1245  73D 6520     Y$BG_ST2 ;
     1084                         LB,R$T1   =KX_L2_COMBUF_FEPBSY@M
     1085  1246  73F 8907         BBT       Y$BG_ST3            No store while FEP is working
Elsie.D00  Background Processing                                                WED JUL 30 '97 02:24 Page:52
     1086  1247  741 6580         LB,R$T1   =KX_L2_COMBUF_DATAVL@M Or if there's nothing to store
     1087  1248  743 8103         BBF       Y$BG_ST3
     1088  1249  745 D58EBE       SMSW,R$B2 KX_L2_COMBUF+2-(P$STATS-$PX),R$B1
     1089  1250  748 F4       Y$BG_ST3 ;
     1090                         SEN
     1091  1251  749 3902         ADD,R$B1+1 =2
     1092  1252  74B 7940         C,R$B1+1  =P$STATS-$PX+16
     1093  1253  74D 99D8         BNE       Y$BG_ST0
     1094  1254  74F 29EC         LD,R$B1+1 =KX_L2_COMBUF       Prepare to twiddle the flags.
     1095  1255  751 6540         LB,R$T1   =KX_L2_COMBUF_FEPRDY@M
     1096  1256  753 8107         BBF       Y$BG_ST4
     1097  1257  755 25C0         LD,R$T1   =KX_L2_COMBUF_FEPRDY@M|KX_L2_COMBUF_DATAVL@M
     1098  1258  757 B2001F       CALL      Y$RESET             Say we've seen it.
     1099  1259  75A 8807         B         Y$BG_ST5
     1100  1260  75C 4580     Y$BG_ST4 ;
     1101                         AND,R$T1  =KX_L2_COMBUF_DATAVL@M
     1102  1261  75E 8103         BEZ       Y$BG_ST5
     1103  1262  760 B20010       CALL      Y$SET               Set DATAVL if desired.
     1104  1263  763 D48E00   Y$BG_ST5 ;
     1105                         LMSW,R$B2 0,R$B1              Restore R$B2 (R$B1 has =COMBUF in it)
     1106  1264  766 6408     Y$BG_ST6 ;
     1107                         LB,R$EVT  =K_IR2_EVENT_RLE    Turn on the receiver
     1108  1265  768 8103         BBF       Y$BG_REX            If we ran out of CCBs
     1109  1266  76A 44F7         AND,R$EVT =~K_IR2_EVENT_RLE
     1110  1267  76C F6           RON
     1111  1268  76D F0       Y$BG_REX ;
     1112                         NOP
     1113  1269  76E B0FE7C       JUMP      Y$BG_LOP

Elsie.D00  Background Subroutines                                               WED JUL 30 '97 02:24 Page:53
     1114  1270                   TITLE     'Background Subroutines'
     1115  1271  771 8106     Y$SETIFTRUE ;
     1116                         BBF       Y$RESET
     1117  1272  773 D68500   Y$SET ;
     1118                         TSSB,R$T1 0,R$B1
     1119  1273  776 F1           RSR
     1120  1274  777 91FA     Y$SETIFFALSE ;
     1121                         BBF       Y$SET
     1122  1275  779 D78500   Y$RESET ;
     1123                         RSSB,R$T1 0,R$B1
     1124  1276  77C F1           RSR

Elsie.D00  patch space                                                          WED JUL 30 '97 02:24 Page:54
     1125  1277                   TITLE     'patch space'
     1126  1278  77D FFFFFFFF     BYTE      255,255,255,255
     1127  1279  781 FFFFFFFF     BYTE      255,255,255,255
     1128  1280  785 FFFFFFFF     BYTE      255,255,255,255
     1129  1281  789 FFFFFFFF     BYTE      255,255,255,255
     1130  1282  78D FFFFFFFF     BYTE      255,255,255,255
     1131  1283  791 FFFFFFFF     BYTE      255,255,255,255
     1132  1284  795 FFFFFFFF     BYTE      255,255,255,255
     1133  1285  799 FFFFFFFF     BYTE      255,255,255,255
     1134  1286  79D FFFFFFFF     BYTE      255,255,255,255
     1135  1287  7A1 FFFFFFFF     BYTE      255,255,255,255
     1136  1288  7A5 FFFFFFFF     BYTE      255,255,255,255
     1137  1289  7A9 FFFFFFFF     BYTE      255,255,255,255
     1138  1290  7AD FFFFFFFF     BYTE      255,255,255,255
     1139  1291  7B1 FFFFFFFF     BYTE      255,255,255,255
     1140  1292  7B5 FFFFFFFF     BYTE      255,255,255,255
     1141  1293  7B9 FFFFFFFF     BYTE      255,255,255,255
     1142  1294  7BD FFFFFFFF     BYTE      255,255,255,255
     1143  1295  7C1 FFFFFFFF     BYTE      255,255,255,255
     1144  1296  7C5 FFFFFFFF     BYTE      255,255,255,255
     1145  1297  7C9 FFFFFFFF     BYTE      255,255,255,255
     1146  1298  7CD FFFFFFFF     BYTE      255,255,255,255
     1147  1299  7D1 FFFFFFFF     BYTE      255,255,255,255
     1148  1300  7D5 FFFFFFFF     BYTE      255,255,255,255
     1149  1301  7D9 FFFFFFFF     BYTE      255,255,255,255
     1150  1302  7DD FFFFFFFF     BYTE      255,255,255,255
     1151  1303                   END
 LC0-00001-0              No Errors in this assembly.
