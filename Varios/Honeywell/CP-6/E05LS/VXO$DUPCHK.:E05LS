VERSION E05

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:1    
        1        1        /*M* VXO$DUPCHK - Checks for multiply defined symbols.     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
        8        8        VXO$DUPCHK: PROC;
        9        9
       10       10        /*
       11       11                      Include files
       12       12        */
       13       13        %INCLUDE VX_SWITCH_C;
       14       21        %INCLUDE VX_SUBS_C;
       15      239        %INCLUDE VX_MACRO_C;
       16     1376        %INCLUDE B$OBJECT_C;
       17     4806        %INCLUDE VX_DATA_R;
       18     6425        %VX$NODE;

              6437    1   /*******************************************************************************
              6438    1   *                                                                              *
              6439    1   *                          VX$NODE                                                 *
              6440    1   *                                                                              *
              6441    1   *******************************************************************************/

              6457    1   DCL 1 VX$NODE      ALIGNED    BASED,
              6458    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
              6459    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
              6460    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
              6461    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
              6462    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
              6463                              to list of file nodes for this node            */
              6464    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
              6465    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
              6465                  /* Head pointer to shared library list */
              6466    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
              6466                  /* Head pointer to list of shared libraries
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:2    
              6467                                          which have been mapped to included libraries */
              6468    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
              6469    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
              6470    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
              6471    1         2 ADDR_START REDEF  ADDR_START_A,
              6472    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
              6473    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
              6474    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
              6475    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
              6476    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
              6477    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
              6478    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
              6479    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
              6480    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
              6481    1         2 START_PAGE# REDEF START_PAGE#_A,
              6482    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
              6483    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
              6484    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
              6485    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
              6486    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
              6487    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
              6488    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
              6489    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
              6490    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
              6490                  /* Starting pointer for common sections for this node */
              6491    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
              6491                  /* Stopping pointer for common sections for this node */
              6492    1         2 L_START,
              6493    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
              6494    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
              6495    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
              6496    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
              6497    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
              6498    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
              6499    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
              6500    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
              6501    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:3    
              6502    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
              6503    1         2 L_START_A$(0:9)     REDEF L_START PTR,
              6504    1         2 L_STOP,
              6505    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
              6506    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
              6507    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
              6508    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
              6509    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
              6510    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
              6511    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
              6512    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
              6513    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
              6514    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
              6515    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
              6516    1         2 L_SIZE,
              6517    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
              6518    1           3 DN      UBIN /*(0)*/, /* Def names                          */
              6519    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
              6520    1           3 SC      UBIN /*(0)*/, /* Sections                           */
              6521    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
              6522    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
              6523    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
              6524    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
              6525    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
              6526    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
              6527    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
              6528    1         2 L_PREV_SIZE,
              6529    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
              6530    1           3 DN      UBIN /*(0)*/, /* Def names                          */
              6531    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
              6532    1           3 SC      UBIN /*(0)*/, /* Sections                           */
              6533    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
              6534    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
              6535    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
              6536    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
              6537    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
              6538    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:4    
              6539    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
              6540    1         2 BIT_MAP                ALIGNED,
              6541    1           3 DATA                  ALIGNED,
              6542    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              6543    1           3 RPROC                 ALIGNED,
              6544    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              6545    1           3 ROS                   ALIGNED,
              6546    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              6547    1         2 L_SC_START,
              6548    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
              6549    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
              6550    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
              6551    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
              6552    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
              6553    1         2 L_SC_STOP,
              6554    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
              6555    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
              6556    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
              6557    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
              6558    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
              6559    1         2 PROMOTE_HEAD,
              6560    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
              6561    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
              6562    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
              6563    1         2 PROMOTE_TAIL,
              6564    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
              6565    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
              6566    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
              6567    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
              6568    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
              6569    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
              6570    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
              6571    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       19     6575        %VXD$TMPLT;

              6588    1   /*******************************************************************************
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:5    
              6589    1   *                                                                              *
              6590    1   *                          VXD$TMPLT                                               *
              6591    1   *                                                                              *
              6592    1   *******************************************************************************/

              6596        /*
              6597                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
              6598                  ENTDEFs, SYMDEFs and SEGDEFs.
              6599        */
              6601    1   DCL 1 VXD$TMPLT BASED ALIGNED,
              6602    1         2 VALUE SBIN UNAL,
              6603                /*K*  VALUE is the value if this entry is a constant.  */
              6604    1         2 AD REDEF VALUE,
              6605                /*K*  AD is the address if this entry is not constant.  */
              6606    1           3 LFLAGS UNAL,
              6607                  /*K*  LFLAGS is the field reserved for loader to flag load
              6608                        time attributes of the definition and must be zero
              6609                        in the object unit. */
              6610    1             4 SOURCE UBIN(3) UNAL,
              6611                    /*K*  SOURCE - Source of this DEF */
              6612    1             4 DEFINED BIT(1) UNAL,
              6613                    /*K*  DEFINED - Set if this DEF defined */
              6614    1             4 MULTIPLE BIT(1) UNAL,
              6615                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
              6616    1             4 USED BIT(1) UNAL,
              6617                    /*K*  USED - Set if this DEF is used. */
              6618    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
              6619                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
              6620                        than 2048 (RU).  */
              6621    1           3 SECTNUM UBIN(11) UNAL,
              6622                  /*K*  SECTNUM contains an entry number into the section
              6623                        table (TYPE 3).  */
              6624    1           3 ISADDR UBIN HALF UNAL,
              6625                  /*K*  ISADDR - Is Address (RU)  */
              6626    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
              6627                  /*K*  OFFSET is the word offset from the origin of the section. */
              6628    1         2 NPOINTER SBIN HALF UNAL,
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:6    
              6629                /*K*  NPOINTER is a word displacement into the name record
              6630                      (TYPE 1) locating the name (of this entry). */
              6631    1         2 CONSTNT BIT(1) UNAL,
              6632                /*K*  CONSTNT is a flag bit to determine the interpretation
              6633                      of word 0.
              6634                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
              6635                                    SECTNUM, and ISADDR or OFFSET.
              6636                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
              6637    1         2 LFLAGS UNAL,
              6638                /*K*  LFLAGS is the field reserved for loader to flag load
              6639                      time attributes and must be zero in the object unit. */
              6640    1           3 MULTIPLE BIT(1) UNAL,
              6641                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
              6642    1           3 USED BIT(1) UNAL,
              6643                  /*K*  USED - Set if this DEF is used. */
              6644    1           3 SOURCE UBIN(4) UNAL,
              6645                  /*K*  SOURCE - Source of this DEF */
              6646    1           3 IS_DCB BIT(1) UNAL,
              6647                  /*K* IS_DCB - Set if this is a DCB */
              6648    1           3 * BIT(10) UNAL,
              6649                  /*K*  * is reserved for future use and must be zero.  */
              6650    1         2 PROTECTION REDEF LFLAGS,
              6651                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
              6652    1           3 TYPE UBIN(5) UNAL,
              6653                  /*K*  TYPE is the Protection type.  */
              6654    1           3 * UBIN(12) UNAL;
              6655                  /*K*  * is reserved for future use and must be zero.  */
       20     6670        %VX$SECTNUM;

              6683    1   /*******************************************************************************
              6684    1   *                                                                              *
              6685    1   *                          VX$SECTNUM                                              *
              6686    1   *                                                                              *
              6687    1   *******************************************************************************/

              6692    1   DCL 1 VX$SECTNUM ALIGNED BASED,
              6693    1         2 NEXT$ PTR,
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:7    
              6694    1         2 SECT#    UBIN HALF HALIGNED,
              6695    1         2 NPOINTER UBIN HALF HALIGNED,
              6696    1         2 NODE#    UBIN HALF HALIGNED,
              6697    1         2 RU_SECT# UBIN HALF HALIGNED;
       21     6700        %TMPLT;

              6712    1   /*******************************************************************************
              6713    1   *                                                                              *
              6714    1   *                          TMPLT                                                 *
              6715    1   *                                                                              *
              6716    1   *******************************************************************************/

              6721    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
              6722    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
              6723    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
              6724    1         2 W       REDEF     A,            /* By name                            */
              6725    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
              6726    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       22     6729        %SET LISTMAC='1'B;
       23     6730        %SET LISTSUB='1'B;
       24     6731        %SET LISTEXP='1'B;
       25     6732        %BANNER(ARG=SUBS);
              6733        %LSET LISTDIR='0'B;

              6740    1   /*******************************************************************************
              6741    1   *                                                                              *
              6742    1   *                          SUBS                                                 *
              6743    1   *                                                                              *
              6744    1   *******************************************************************************/

       26     6748        %B$RECORDSUBS;
              6749        %EQU TYPHEAD=0 ;
              6750        %EQU TYPDNAM=1 ;
              6751        %EQU TYPRNAM=2 ;
              6752        %EQU TYPSECT=3 ;
              6753        %EQU TYPEDEF=4 ;
              6754        %EQU TYPEREF=5 ;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:8    
              6755        %EQU TYPSDEF=6 ;
              6756        %EQU TYPSREF=7 ;
              6757        %EQU TYPSEGDEF=8 ;
              6758        %EQU TYPSEGREF=9 ;
              6759        %EQU TYPPROG=10 ;
              6760        %EQU SUBTYPPROG=0 ;
              6761        %EQU SUBTYPREL=1 ;
              6762        %EQU TYPLOGBLK=11 ;
              6763        %EQU TYPINTNTRY=12 ;
              6764        %EQU TYPEXST=13 ;
              6765        %EQU TYPVREBL=14 ;
              6766        %EQU TYPDBGNAM=15 ;
              6767        %EQU TYPLV1LB=16 ;
              6768        %EQU TYPLV1=17 ;
              6769        %EQU TYPDATASEG=18 ;
              6770        %EQU TYPRUM=20 ;
              6771        %EQU TYPBIRTH=21 ;
              6772        %EQU TYPPLOVER=22 ;
              6773        %EQU TYPCOMPID=23 ;
              6774        %EQU TYPROS=30 ;
       27     6776        %SUB_LINKFLAGS;
              6777        %EQU SOURCE_OBJECT#=0 ;
              6778        %EQU SOURCE_SLIB#=1 ;
              6779        %EQU SOURCE_ALIB#=2 ;
              6780        %EQU SOURCE_ULIB#=3 ;
              6781        %EQU SOURCE_RLIB#=4 ;
              6782        %EQU SOURCE_REMOVED#=5 ;
              6783        %EQU SOURCE_LINKER#=6 ;
       28     6785        %BANNER(ARG=B$DNAME);
              6786        %LSET LISTDIR='0'B;

              6793    1   /*******************************************************************************
              6794    1   *                                                                              *
              6795    1   *                          B$DNAME                                                 *
              6796    1   *                                                                              *
              6797    1   *******************************************************************************/

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:9    
       29     6801        %B$DNAME( NAME=B$DNAME, STCLASS=BASED);
              6802            %LSET STR='BASED        ';
              6803            %IF
              6804                '0'B;
              6806            %ELSE;
              6807                %LSET INIT=/*;
              6808            %ENDIF;
              6809    1   DCL 1 B$DNAME BASED ALIGNED,
              6810    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
              6811                /*K*  COUNT is the number of characters in the name */
              6812            %IF
              6813                '0'B;
              6816            %ELSE;
              6817    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
              6818            %ENDIF;
       30     6820        %B;
              6821        %LSET LISTDIR='0'B;

              6828    1   /*******************************************************************************
              6829    1   *                                                                              *
              6830    1   *                          BIT                                                 *
              6831    1   *                                                                              *
              6832    1   *******************************************************************************/

       31     6836    1   DCL ABOVE_MULT         BIT(1)   ALIGNED AUTO;
       32     6837    1   DCL BELOW_MULT         BIT(1)   ALIGNED AUTO;
       33     6838    1   DCL ABOVE_OBJECT       BIT(1)   ALIGNED AUTO;
       34     6839    1   DCL BELOW_OBJECT       BIT(1)   ALIGNED AUTO;
       35     6840    1   DCL FIRST              BIT(1)   ALIGNED AUTO;
       36     6841    1   DCL FIRST_LOOP         BIT(1)   ALIGNED AUTO;
       37     6842    1   DCL ANY_OBJECT         BIT(1)   ALIGNED AUTO;
       38     6843    1   DCL FIRST_MOVE         BIT(1)   ALIGNED AUTO;
       39     6844    1   DCL FOUN               BIT(1)   ALIGNED AUTO;
       40     6845    1   DCL BY_PASS            BIT(1)   ALIGNED AUTO;
       41     6846    1   DCL FINISHED           BIT(1)   ALIGNED AUTO;
       42     6847        %E;
              6848        %LSET LISTDIR='0'B;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:10   

              6855    1   /*******************************************************************************
              6856    1   *                                                                              *
              6857    1   *                          ENTRY                                                 *
              6858    1   *                                                                              *
              6859    1   *******************************************************************************/

       43     6863        %ENTRIES;
              6864    1   DCL VXE$ERROR       ENTRY(4);
              6865    1   DCL VXE$ERR         ENTRY(3);
              6866    1   DCL VXE$MERC        ENTRY;
              6867    1   DCL VXE$ERRMSG      ENTRY(3);
              6868    1   DCL VXR$READ        ENTRY( 3 );
              6869    1   DCL VXW$WRITE       ENTRY( 3 );
              6870    1   DCL VXW$WRITE_DO    ENTRY( 2 );
              6871    1   DCL VXD$B2C         ENTRY( 5 );
              6872    1   DCL VXD$C2B         ENTRY( 3 );
              6873    1   DCL VXA$GET         ENTRY( 3 );
              6874    1   DCL VXF$FREE        ENTRY( 3 );
              6875    1   DCL VXQ$SORT        ENTRY( 7 );
              6876    1   DCL VXY$YESNO       ENTRY( 1 );
       44     6878        %ENTRIES_IO;
              6879    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
              6880    1   DCL VXF$CLOSE       ENTRY(3);
              6881    1   DCL VXU$PREAD       ENTRY(12);
              6882    1   DCL VXK$KEY         ENTRY(4);
              6883    1   DCL VXI$READ        ENTRY(4)  ALTRET;
              6884    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       45     6886    1   DCL VXU$NEW_SECTNUM ENTRY(4);
       46     6887    1   DCL VXU$FIND_SECTNUM ENTRY(4);
       47     6888        %PTR;
              6889        %LSET LISTDIR='0'B;

              6896    1   /*******************************************************************************
              6897    1   *                                                                              *
              6898    1   *                          PTR                                                 *
              6899    1   *                                                                              *
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:11   
              6900    1   *******************************************************************************/

       48     6904        %POINTER;
              6905    1   DCL P$         PTR       ALIGNED AUTO;
              6906    1   DCL Q$         PTR       ALIGNED AUTO;
              6907    1   DCL R$         PTR       ALIGNED AUTO;
       49     6909    1   DCL CURR$           PTR       ALIGNED   AUTO;
       50     6910    1   DCL SEC_CURR$       PTR       ALIGNED   AUTO;
       51     6911    1   DCL SEC_RESULT$     PTR       ALIGNED   AUTO;
       52     6912    1   DCL PATH_CURR$      PTR       ALIGNED   AUTO;
       53     6913    1   DCL DUPSTOP$        PTR       ALIGNED   AUTO;
       54     6914    1   DCL PN$             PTR       ALIGNED   AUTO;
       55     6915    1   DCL QN$             PTR       ALIGNED   AUTO;
       56     6916    1   DCL PNAM$           PTR       ALIGNED   AUTO;
       57     6917    1   DCL STOP$           PTR       ALIGNED   AUTO;
       58     6918    1   DCL FIRST_START$    PTR       ALIGNED   AUTO;
       59     6919    1   DCL FIRST_STOP$     PTR       ALIGNED   AUTO;
       60     6920    1   DCL WHICH$          PTR       ALIGNED   AUTO;
       61     6921    1   DCL NEXT_P$         PTR       ALIGNED   AUTO;
       62     6922    1   DCL STOP_P$         PTR       ALIGNED   AUTO;
       63     6923    1   DCL HOLD$                PTR  ALIGNED   AUTO;
       64     6924        %U;
              6925        %LSET LISTDIR='0'B;

              6932    1   /*******************************************************************************
              6933    1   *                                                                              *
              6934    1   *                          UBIN                                                 *
              6935    1   *                                                                              *
              6936    1   *******************************************************************************/

       65     6940        %INDEX;
              6941    1   DCL I          UBIN(36) ALIGNED AUTO;
              6942    1   DCL SI REDEF I SBIN WORD ALIGNED;
              6943    1   DCL J          UBIN(36) ALIGNED AUTO;
              6944    1   DCL SJ REDEF J SBIN WORD ALIGNED;
              6945    1   DCL K          UBIN(36) ALIGNED AUTO;
              6946    1   DCL SK REDEF K SBIN WORD ALIGNED;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:12   
              6947    1   DCL L          UBIN(36) ALIGNED AUTO;
              6948    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       66     6950    1   DCL RTYPE           UBIN(36)  ALIGNED   AUTO;
       67     6951    1   DCL VALUE           UBIN(36)  ALIGNED   AUTO;
       68     6952    1   DCL SAVE_NAME_DISP  UBIN(36)  ALIGNED   AUTO;
       69     6953    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       70     6954    1   DCL J1              UBIN(36)  ALIGNED   AUTO;
       71     6955    1   DCL WHERE_TYPE      UBIN(36)  ALIGNED   AUTO;
       72     6956    1   DCL CURRENT_TYPE         UBIN(36)  ALIGNED   AUTO;
       73     6957    1   DCL ABOVE_VALUE          UBIN(36)  ALIGNED   AUTO;
       74     6958    1   DCL BELOW_VALUE          UBIN(36)  ALIGNED   AUTO;
       75     6959    1   DCL ABOVE_PREC           UBIN(36)  ALIGNED   AUTO;
       76     6960    1   DCL CURRENT_PREC         UBIN(36)  ALIGNED   AUTO;
       77     6961        /**/
       78     6962    1   DCL SYM_PREC(0:7)        UBIN(36)  ALIGNED   CONSTANT  INIT(
       79     6963    1              15,
       80     6964    1              14,
       81     6965    1              13,
       82     6966    1              15,
       83     6967    1              12,
       84     6968    1               0,
       85     6969    1               0,
       86     6970    1               0);
       87     6971    1   DCL DEF_OBJECT_COUNT UBIN(36)  ALIGNED   AUTO;
       88     6972        %BIN_SEARCH_TEMPS(
       89     6973                   LOW=BIN_LOW,
       90     6974                   HIGH=BIN_HIGH,
       91     6975                   START1$=BIN_START1$,
       92     6976                   MID=BIN_MID,
       93     6977                   NTEMP$=BIN_NTEMP$);
              6978    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
              6979    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
              6980    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
              6981    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
              6982    1   DCL BIN_START1$         PTR       ALIGNED AUTO;
       94     6984        %BIN_SEARCH_VARS(
       95     6985                   START$=BIN_START$,
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:13   
       96     6986                   STOP$=BIN_STOP$,
       97     6987                   RESULT$=BIN_RESULT$,
       98     6988                   N$=BIN_N$,
       99     6989                   MATCH$=BIN_MATCH$,
      100     6990                   NAME_DISP=BIN_NAME_DISP,
      101     6991                   SIZE=BIN_SIZE);
              6992    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
              6993    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
              6994    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
              6995    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
              6996    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
              6997    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
              6998    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
      102     7000        %PLIST;
      103     7001        %SET LISTEXP='0'B;
      104     7002        %EJECT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:14   
      105     7003    1         PATH_CURR$ = VX_CURR$;
      106     7004    1         PATH_CURR$ -> VX$NODE.PATH$ = ADDR(NIL);
      107     7005    2         DO WHILE( PATH_CURR$ -> VX$NODE.FATHER$ ~= ADDR(NIL) );
      108     7006    2             PATH_CURR$ -> VX$NODE.FATHER$ -> VX$NODE.PATH$ = PATH_CURR$;
      109     7007    2             PATH_CURR$ = PATH_CURR$ -> VX$NODE.FATHER$;
      110     7008    2            END;
      111     7009    1         PNAM$ = VX_CURR$ -> VX$NODE.L_START.DN$;
      112     7010    2         DO J = 1 TO SIZEW( VX_DEF_REC_A ) - 1;
      113     7011    2             J1 = J - 1;
      114     7012    2             RTYPE = VX_DEF_REC_A(J);
      115     7013    2             P$ = VX_CURR$ -> VX$NODE.L_START_A$(RTYPE); /* Get starting point */
      116     7014    3             IF P$ ~= ADDR(NIL) THEN DO;   /* Do if some */
      117     7015    3                 STOP$ = VX_CURR$ -> VX$NODE.L_STOP_A$(RTYPE);
      118     7016    4                 IF VX_NODE_NUMBER > 0 THEN DO;
      119     7017    5                     DO WHILE( P$ <= STOP$ );
      120     7018    5                         PN$ = PINCRW( PNAM$, P$ -> VXD$TMPLT.NPOINTER );
              7018                                  /* Get pointer to name for this entry */
      121     7019    5                         NEXT_P$ = PINCRW( P$, SIZEW( VXD$TMPLT ) );
      122     7020    5                         IF NEXT_P$ > STOP$ THEN GOTO JUMP_OUT;
      123     7021    6                         DO WHILE( PN$ -> B$DNAME.TEXT =
      124     7022    6                                 PINCRW( PNAM$, NEXT_P$ -> VXD$TMPLT.NPOINTER ) ->
              7022                                          B$DNAME.TEXT );
      125     7023    6                             NEXT_P$ = PINCRW( NEXT_P$, SIZEW( VXD$TMPLT ) );
      126     7024    6                             IF NEXT_P$ > STOP$ THEN GOTO JUMP_OUT;
      127     7025    6                            END;           /* Do while ... */
      128     7026    5   JUMP_OUT:             STOP_P$ = PINCRW( NEXT_P$, -SIZEW(VXD$TMPLT) );
      129     7027    5                         CALL GET_VALS(P$,BELOW_VALUE,BELOW_MULT);
      130     7028    6                         DO CASE(BELOW_VALUE);
      131     7029    6                           CASE(%SOURCE_REMOVED#);
      132     7030    6                             GOTO SET_NEXT_P;
      133     7031    6                           CASE(%SOURCE_OBJECT#,%SOURCE_ULIB#);
      134     7032    6                             BELOW_OBJECT='1'B;
      135     7033    6                           CASE(ELSE);
      136     7034    6                             BELOW_OBJECT='0'B;
      137     7035    6                           END;
      138     7036        /**/
      139     7037    5                         CURR$ = VX_ROOT$;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:15   
      140     7038    5   CHECK_DOWN_PATH:
      141     7039    5                         IF CURR$ = VX_CURR$ THEN GOTO SET_NEXT_P;
      142     7040    5                         BIN_START$ = CURR$ -> VX$NODE.L_START_A$(RTYPE);
      143     7041    5                         BIN_STOP$  = CURR$ -> VX$NODE.L_STOP_A$(RTYPE);
      144     7042    5                         BIN_N$ = CURR$ -> VX$NODE.L_START.DN$;
      145     7043
      146     7044        /* Search defs */
      147     7045                              %BIN_SEARCH(
      148     7046                              START$=BIN_START$,
      149     7047                              STOP$=BIN_STOP$,
      150     7048                              RESULT$=BIN_RESULT$,
      151     7049                              N$=BIN_N$,
      152     7050                              MATCH$=PN$,
      153     7051                              NAME_DISP=2,
      154     7052                              SIZE="SIZEW(VXD$TMPLT)",
      155     7053                              NEG=%@COMMENT,
      156     7054                              GEN=%@TNEMMOC,
      157     7055                              ALTRETURN=NO_DUPS_THIS_ANCESTOR_IN_DEFS,
      158     7056                              EMPTY=NO_DUPS_THIS_ANCESTOR_IN_DEFS);
              7058    5           IF BIN_START$ = ADDR(NIL) THEN GOTO NO_DUPS_THIS_ANCESTOR_IN_DEFS;
              7059    6           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;
              7060    6              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
              7061    7              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
              7062    7                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
              7063    7                 IF BIN_NTEMP$ -> B$DNAME.TEXT
              7064    7                   >=
              7065    8                   PN$ -> B$DNAME.TEXT THEN DO;
              7066    8                    IF BIN_NTEMP$ -> B$DNAME.TEXT
              7067    8                      =
              7068    8                      PN$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND;
              7069    8                    ELSE GOTO NO_DUPS_THIS_ANCESTOR_IN_DEFS;
              7070    8                    END;
              7071    7                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );
              7072    7                 END;                      /* Do while                           */
              7073    6              GOTO NO_DUPS_THIS_ANCESTOR_IN_DEFS;
              7074    6              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
              7075    6           ELSE DO;                        /* Binary search                      */
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:16   
              7076    6              BIN_LOW = 0;
              7077    6              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
              7078    6              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );
              7079    6   BIN_SPLIT:     ;
              7080    6              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
              7081    6              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );
              7082    6              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
              7083    6              IF BIN_NTEMP$ -> B$DNAME.TEXT
              7084    6                <
              7085    7                PN$ -> B$DNAME.TEXT THEN DO;
              7086    7                 BIN_LOW = BIN_MID;
              7087    7                 GOTO BIN_CHECK;
              7088    7                 END;
              7089    6              IF BIN_NTEMP$ -> B$DNAME.TEXT
              7090    6                >
              7091    7                PN$ -> B$DNAME.TEXT THEN DO;
              7092    7                 BIN_HIGH = BIN_MID;
              7093    7   BIN_CHECK:        ;
              7094    7                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT;
              7095                                                /* Here => looping or not found       */
              7096                                      /* Result -> < match => a boundary condition    */
              7097    7                 %@COMMENT
              7098    7                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
              7099    7                   <
              7100    7                   PN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
              7100                            VXD$TMPLT) );
              7101    7                 %@TNEMMOC
              7102    7                   GOTO NO_DUPS_THIS_ANCESTOR_IN_DEFS;
              7103    7                 END;
              7104    6              END;                         /* Else do;                           */
              7105    5   BIN_FOUND:
              7106        /* Here -> found */
      159     7108        /* Here => found a duplicate */
      160     7109        /**/
      161     7110        /**/
      162     7111        /**/
      163     7112    5                         BY_PASS = '0'B/*@FALSE_B*/;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:17   
      164     7113    5   BIN_FOUND_AGAIN:
      165     7114    5                         CALL GET_VALS(BIN_RESULT$,ABOVE_VALUE,ABOVE_MULT);
      166     7115    6                         DO CASE(ABOVE_VALUE);
      167     7116    6                           CASE(%SOURCE_REMOVED#);
      168     7117    6                             IF NOT BY_PASS
      169     7118    6                             THEN GOTO NO_DUPS_THIS_ANCESTOR_IN_DEFS;
      170     7119    6                           CASE(%SOURCE_OBJECT#,%SOURCE_ULIB#);
      171     7120    6                             ABOVE_OBJECT='1'B;
      172     7121    6                           CASE(ELSE);
      173     7122    6                             ABOVE_OBJECT='0'B;
      174     7123    6                           END;
      175     7124        /**/
      176     7125        /**/
      177     7126        /**/
      178     7127        /**/
      179     7128        /**/
      180     7129    6                         IF ABOVE_OBJECT OR BY_PASS THEN DO;
      181     7130        /**/
      182     7131    6   MOVE_ABOVE_TO_BELOW:
      183     7132    7                             IF ABOVE_MULT THEN DO;
      184     7133    7                                 IF BELOW_MULT THEN VX_ERRORS.MULTIPLE=VX_ERRORS.
              7133                                          MULTIPLE-1;
      185     7134    7                                END;       /* If ABOVE_MULT then do; */
      186     7135    6                             ELSE IF NOT BELOW_MULT AND
      187     7136    6                                         (VX_O.SIN.DUPLICATE ~= 0
      188     7137    6                                         OR (ABOVE_OBJECT AND BELOW_OBJECT))
      189     7138    7                                 THEN DO;
      190     7139                                          %DUP_STATS;
      191     7142                                          %CHECK( SEV = @MULTIPLE );
      192     7145    7                                     VX_RU_HEAD.MAP_BITS_A.MULTIPLE(J1) = '1'B
              7145                                              /*@TRUE_B*/;
      193     7146    7                                     IF RTYPE~=%TYPEDEF AND BIN_RESULT$->VXD$TMPLT.
              7146                                              CONSTNT
      194     7147    7                                     THEN BIN_RESULT$->VXD$TMPLT.LFLAGS.MULTIPLE='1'B;
      195     7148    7                                     ELSE BIN_RESULT$->VXD$TMPLT.AD.LFLAGS.MULTIPLE=
              7148                                              '1'B;
      196     7149    7                                    END;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:18   
      197     7150    6                             CALL MOVE(P$,STOP_P$,VX_CURR$->VX$NODE.NUM,BIN_RESULT$,
              7150                                      CURR$->VX$NODE.NUM);
      198     7151        /**/
      199     7152    6                             GOTO SET_NEXT_P;
      200     7153    6                            END;           /* If ABOVE_OBJECT then do; */
      201     7154        /**/
      202     7155        /**/
      203     7156        /**/
      204     7157    6                         ELSE DO;
      205     7158    6                             ABOVE_PREC = SYM_PREC(ABOVE_VALUE);
      206     7159    7                             IF ABOVE_PREC >= SYM_PREC(BELOW_VALUE) THEN DO;
      207     7160    7                                 CURRENT_PREC = ABOVE_PREC;
      208     7161    7                                 HOLD$ = BIN_RESULT$;
      209     7162    7                                END;
      210     7163    7                             ELSE DO;
      211     7164    7                                 CURRENT_PREC = SYM_PREC(BELOW_VALUE);
      212     7165    7                                 HOLD$ = P$;
      213     7166    7                                END;
      214     7167    6                             SEC_CURR$ = CURR$;
      215     7168    6   SEC_CHECK_DOWN_PATH:
      216     7169        /**/
      217     7170    6                             SEC_CURR$ = SEC_CURR$ -> VX$NODE.PATH$;
      218     7171    7                             IF SEC_CURR$ = VX_CURR$ THEN DO;
      219     7172    7                                 IF ABOVE_PREC >= CURRENT_PREC THEN
      220     7173    7                                     GOTO MOVE_ABOVE_TO_BELOW;
      221     7174    7                                 SEC_RESULT$ = HOLD$;
      222     7175    7                                 BY_PASS='1'B;
      223     7176    7                                 GOTO MOVE_BELOW_2_ABOVE;
      224     7177    7                                END;
      225     7178    6                             BIN_START$ = SEC_CURR$ -> VX$NODE.L_START_A$(RTYPE);
      226     7179    6                             BIN_STOP$  = SEC_CURR$ -> VX$NODE.L_STOP_A$(RTYPE);
      227     7180    6                             BIN_N$ = SEC_CURR$ -> VX$NODE.L_START.DN$;
      228     7181        /* Search defs */
      229     7182                                  %BIN_SEARCH(
      230     7183                                  START$=BIN_START$,
      231     7184                                  STOP$=BIN_STOP$,
      232     7185                                  RESULT$=SEC_RESULT$,
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:19   
      233     7186                                  N$=BIN_N$,
      234     7187                                  MATCH$=PN$,
      235     7188                                  NAME_DISP=2,
      236     7189                                  SIZE="SIZEW(VXD$TMPLT)",
      237     7190                                  NEG=%@COMMENT,
      238     7191                                  GEN=%@TNEMMOC,
      239     7192                                  SPLIT=BIN_SPLIT_SEC,
      240     7193                                  FOUND=BIN_FOUND_SEC,
      241     7194                                  CHECK=BIN_CHECK_SEC,
      242     7195                                  ALTRETURN=SEC_CHECK_DOWN_PATH,
      243     7196                                  EMPTY=SEC_CHECK_DOWN_PATH);
              7198    6           IF BIN_START$ = ADDR(NIL) THEN GOTO SEC_CHECK_DOWN_PATH;
              7199    7           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;
              7200    7              SEC_RESULT$ = BIN_START$;        /* Sequential search                  */
              7201    8              DO WHILE( SEC_RESULT$ <= BIN_STOP$ );
              7202    8                 BIN_NTEMP$ = PINCRW( BIN_N$, SEC_RESULT$ -> VX$TMPLT.A(2) );
              7203    8                 IF BIN_NTEMP$ -> B$DNAME.TEXT
              7204    8                   >=
              7205    9                   PN$ -> B$DNAME.TEXT THEN DO;
              7206    9                    IF BIN_NTEMP$ -> B$DNAME.TEXT
              7207    9                      =
              7208    9                      PN$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND_SEC;
              7209    9                    ELSE GOTO SEC_CHECK_DOWN_PATH;
              7210    9                    END;
              7211    8                 SEC_RESULT$ = PINCRW( SEC_RESULT$, SIZEW(VXD$TMPLT) );
              7212    8                 END;                      /* Do while                           */
              7213    7              GOTO SEC_CHECK_DOWN_PATH;
              7214    7              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
              7215    7           ELSE DO;                        /* Binary search                      */
              7216    7              BIN_LOW = 0;
              7217    7              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
              7218    7              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );
              7219    7   BIN_SPLIT_SEC:     ;
              7220    7              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
              7221    7              SEC_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );
              7222    7              BIN_NTEMP$ = PINCRW( BIN_N$, SEC_RESULT$ -> VX$TMPLT.A(2) );
              7223    7              IF BIN_NTEMP$ -> B$DNAME.TEXT
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:20   
              7224    7                <
              7225    8                PN$ -> B$DNAME.TEXT THEN DO;
              7226    8                 BIN_LOW = BIN_MID;
              7227    8                 GOTO BIN_CHECK_SEC;
              7228    8                 END;
              7229    7              IF BIN_NTEMP$ -> B$DNAME.TEXT
              7230    7                >
              7231    8                PN$ -> B$DNAME.TEXT THEN DO;
              7232    8                 BIN_HIGH = BIN_MID;
              7233    8   BIN_CHECK_SEC:        ;
              7234    8                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_SEC;
              7235                                                /* Here => looping or not found       */
              7236                                      /* Result -> < match => a boundary condition    */
              7237    8                 %@COMMENT
              7238    8                   IF PINCRW( BIN_N$, SEC_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
              7239    8                   <
              7240    8                   PN$ -> B$DNAME.TEXT THEN SEC_RESULT$ = PINCRW( SEC_RESULT$, SIZEW(
              7240                            VXD$TMPLT) );
              7241    8                 %@TNEMMOC
              7242    8                   GOTO SEC_CHECK_DOWN_PATH;
              7243    8                 END;
              7244    7              END;                         /* Else do;                           */
              7245    6   BIN_FOUND_SEC:
              7246        /* Here -> found */
      244     7248        /* Here => found */
      245     7249    6                             CALL GET_VALS(SEC_RESULT$,BELOW_VALUE,BELOW_MULT);
      246     7250    7                             DO CASE(BELOW_VALUE);
      247     7251    7                               CASE(%SOURCE_REMOVED#);
      248     7252    7                                 GOTO SEC_CHECK_DOWN_PATH;
      249     7253    7                               CASE(%SOURCE_OBJECT#,%SOURCE_ULIB#);
      250     7254    7                               CASE(ELSE);
      251     7255    8                                 IF SYM_PREC(VALUE) > CURRENT_PREC THEN DO;
      252     7256    8                                     CURRENT_PREC = SYM_PREC(VALUE);
      253     7257    8                                     HOLD$ = SEC_RESULT$;
      254     7258    8                                    END;
      255     7259    7                                 GOTO SEC_CHECK_DOWN_PATH;
      256     7260    7                               END;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:21   
      257     7261        /**/
      258     7262        /*
      259     7263              Here => found an intermediary
      260     7264        */
      261     7265        /**/
      262     7266    6   MOVE_BELOW_2_ABOVE:
      263     7267    6                             IF ABOVE_MULT ~= BELOW_MULT THEN VX_ERRORS.MULTIPLE =
              7267                                      VX_ERRORS.MULTIPLE + 1;
      264     7268    7                             IF ABOVE_MULT AND NOT BELOW_MULT THEN DO;
      265     7269    8                                 IF RTYPE ~= %TYPEDEF AND SEC_RESULT$ -> VXD$TMPLT.
              7269                                          CONSTNT THEN DO;
      266     7270    8                                     SEC_RESULT$ -> VXD$TMPLT.LFLAGS.MULTIPLE = '1'B
              7270                                              /*@TRUE_B*/;
      267     7271    8                                    END;
      268     7272    8                                 ELSE DO;
      269     7273    8                                     SEC_RESULT$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE = '1'B
              7273                                              /*@TRUE_B*/;
      270     7274    8                                    END;
              7274                     /* If rtype ~= typedef and SEC_RESULT$ -> VXD$TMPLT.CONSTNT then do; */
      271     7275
      272     7276    7                                END;   /* if ABOVE_MULT and ~BELOW_MULT then do */
      273     7277    6                             FIRST_START$ = BIN_RESULT$;
      274     7278    6                             FIRST_STOP$ = BIN_RESULT$;
      275     7279    6                             FINISHED = '0'B/*@FALSE_B*/;
      276     7280    7                             DO WHILE ( NOT FINISHED );
      277     7281    7                                 IF FIRST_START$ = BIN_START$ THEN
      278     7282    7                                     FINISHED = '1'B/*@TRUE_B*/;
      279     7283    8                                 ELSE DO;
      280     7284    8                                     R$ = PINCRW(FIRST_START$, -SIZEW(VXD$TMPLT) );
      281     7285    8                                     IF PINCRW(BIN_N$, R$ -> VXD$TMPLT.NPOINTER)
      282     7286    8                                             -> B$DNAME.TEXT = PN$ -> B$DNAME.TEXT
      283     7287    8                                     THEN FIRST_START$ = R$;
      284     7288    8                                     ELSE FINISHED = '1'B/*@TRUE_B*/;
      285     7289    8                                    END;
      286     7290    7                                END;       /* do while( ~finished ) */
      287     7291    6                             FINISHED = '0'B/*@FALSE_B*/;
      288     7292    7                             DO WHILE ( NOT FINISHED );
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:22   
      289     7293    7                                 IF FIRST_STOP$ = BIN_STOP$ THEN
      290     7294    7                                     FINISHED = '1'B/*@TRUE_B*/;
      291     7295    8                                 ELSE DO;
      292     7296    8                                     R$ = PINCRW(FIRST_STOP$, SIZEW(VXD$TMPLT) );
      293     7297    8                                     IF PINCRW(BIN_N$, R$ -> VXD$TMPLT.NPOINTER)
      294     7298    8                                             -> B$DNAME.TEXT = PN$ -> B$DNAME.TEXT
      295     7299    8                                     THEN FIRST_STOP$ = R$;
      296     7300    8                                     ELSE FINISHED = '1'B/*@TRUE_B*/;
      297     7301    8                                    END;
      298     7302    7                                END;       /* do while( ~finished )  */
      299     7303
      300     7304
      301     7305    6                             CALL MOVE(FIRST_START$,FIRST_STOP$,CURR$->VX$NODE.NUM,
              7305                                      SEC_RESULT$,SEC_CURR$->VX$NODE.NUM);
      302     7306    6                             CALL GET_VALS(P$,BELOW_VALUE,BELOW_MULT);
      303     7307    6                             BELOW_OBJECT=ABOVE_OBJECT;
      304     7308        /**/
      305     7309    6                             GOTO BIN_FOUND_AGAIN;
      306     7310    6                            END;
      307     7311        /**/
      308     7312        /**/
      309     7313    5   NO_DUPS_THIS_ANCESTOR_IN_DEFS:
      310     7314    5                         CURR$ = CURR$ -> VX$NODE.PATH$; /* Move down and go check */
      311     7315    5                         GOTO CHECK_DOWN_PATH;
      312     7316        %EJECT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:23   
      313     7317    5   SET_NEXT_P:
      314     7318    5                         P$ = NEXT_P$;
      315     7319    5                        END;               /* Do while( P$ <= STOP$ ) */
      316     7320    4                    END;                   /* If VX_NODE_NUMBER > 0 then do; */
      317     7321    3                 SIZE = VX_CURR$ -> VX$NODE.L_SIZE_A(RTYPE);
      318     7322    3                 CALL VXK$KEY( 1/*@RF*/, RTYPE, VX_CURR$ -> VX$NODE.NUM, 0 );
      319     7323    3                 CALL VXI$WRITE( 1/*@RF*/,
      320     7324    3                         VX_CURR$ -> VX$NODE.L_START_A$(RTYPE),
      321     7325    3                         SIZE,
      322     7326    3                         1/*@RF*/ );
      323     7327    3                 CALL VXF$FREE( VX_PASS1_ALL_TYPE(RTYPE), SIZE, 1 );
      324     7328    3                END;                       /* If do */
      325     7329    2            END;                           /* Do j = 1 to SIZEW...*/
      326     7330    1         RETURN;
      327     7331        %EJECT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:24   
      328     7332    1   GET_VALS: PROC(DEF$,VALUE,MULT);
      329     7333
      330     7334    2   DCL DEF$      PTR;
      331     7335    2   DCL VALUE     UBIN;
      332     7336    2   DCL MULT      BIT(1) ALIGNED;
      333     7337
      334     7338    2         IF RTYPE~=%TYPEDEF AND DEF$->VXD$TMPLT.CONSTNT
      335     7339    3         THEN DO;
      336     7340    3             VALUE=DEF$->VXD$TMPLT.LFLAGS.SOURCE;
      337     7341    3             MULT =DEF$->VXD$TMPLT.LFLAGS.MULTIPLE;
      338     7342    3            END;
      339     7343    3         ELSE DO;
      340     7344    3             VALUE=DEF$->VXD$TMPLT.AD.LFLAGS.SOURCE;
      341     7345    3             MULT =DEF$->VXD$TMPLT.AD.LFLAGS.MULTIPLE;
      342     7346    3            END;
      343     7347
      344     7348    2   END GET_VALS;
      345     7349
      346     7350        %EJECT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:25   
      347     7351    1   MOVE: PROC(START$,STOP$,NODE#,RESULT$,RESULT_NODE#);
      348     7352
      349     7353    2   DCL START$    PTR;
      350     7354    2   DCL STOP$     PTR;
      351     7355    2   DCL NODE#     SBIN;
      352     7356    2   DCL RESULT$   PTR;
      353     7357    2   DCL RESULT_NODE# SBIN;
      354     7358    2   DCL TEMP$     PTR;
      355     7359    2   DCL NPOINTER  SBIN;
      356     7360    2   DCL RESULT_SECT# SBIN;
      357     7361    2   DCL SECT#     SBIN;
      358     7362    2   DCL SECTNUM$  PTR;
      359     7363
      360     7364    2         TEMP$=START$;
      361     7365    3         DO WHILE(TEMP$<=STOP$);
      362     7366    3             NPOINTER=TEMP$->VXD$TMPLT.NPOINTER;
      363     7367    3             IF (RTYPE~=%TYPEDEF AND RESULT$->VXD$TMPLT.CONSTNT)
      364     7368    3                     OR NOT RESULT$->VXD$TMPLT.AD.LOOKUP_SECTNUM
      365     7369    4             THEN DO;
      366     7370    4                 TEMP$->VXD$TMPLT=RESULT$->VXD$TMPLT;
      367     7371    4                 TEMP$->VXD$TMPLT.NPOINTER=NPOINTER;
      368     7372    4                END;
      369     7373    4             ELSE DO;
      370     7374    4                 CALL VXU$FIND_SECTNUM(RESULT$->VXD$TMPLT,RESULT_NODE#,RESULT_SECT#);
      371     7375    4                 IF (RTYPE~=%TYPEDEF AND TEMP$->VXD$TMPLT.CONSTNT)
      372     7376    4                         OR NOT TEMP$->VXD$TMPLT.AD.LOOKUP_SECTNUM
      373     7377    5                 THEN DO;
      374     7378    5                     TEMP$->VXD$TMPLT=RESULT$->VXD$TMPLT;
      375     7379    5                     TEMP$->VXD$TMPLT.NPOINTER=NPOINTER;
      376     7380    5                     CALL VXU$NEW_SECTNUM(TEMP$->VXD$TMPLT,NODE#,RESULT_SECT#);
      377     7381    5                    END;
      378     7382    5                 ELSE DO;
      379     7383    5                     CALL VXU$FIND_SECTNUM(TEMP$->VXD$TMPLT,NODE#,SECT#,SECTNUM$);
      380     7384    5                     SECTNUM$->VX$SECTNUM.RU_SECT#=RESULT_SECT#;
      381     7385    5                     SECT#=TEMP$->VXD$TMPLT.AD.SECTNUM;
      382     7386    5                     TEMP$->VXD$TMPLT=RESULT$->VXD$TMPLT;
      383     7387    5                     TEMP$->VXD$TMPLT.AD.SECTNUM=SECT#;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:26   
      384     7388    5                     TEMP$->VXD$TMPLT.NPOINTER=NPOINTER;
      385     7389    5                    END;
      386     7390    4                END;
      387     7391    3             TEMP$=PINCRW(TEMP$,SIZEW(VXD$TMPLT));
      388     7392    3            END;
      389     7393
      390     7394    2   END MOVE;
      391     7395
      392     7396        %EJECT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:27   
      393     7397    1   VXO$CHKSET: ENTRY;
      394     7398    1         PNAM$ = VX_CURR$ -> VX$NODE.L_START.DN$;
      395     7399    2         DO J = 1 TO SIZEW( VX_DEF_REC_A ) - 1;
      396     7400    2             J1 = J - 1;
      397     7401    2             RTYPE = VX_DEF_REC_A(J);
      398     7402    2             P$ = VX_CURR$ -> VX$NODE.L_START_A$(RTYPE); /* Get starting point */
      399     7403    3             IF P$ ~= ADDR(NIL) THEN DO;   /* Do if some */
      400     7404    3                 STOP$ = VX_CURR$ -> VX$NODE.L_STOP_A$(RTYPE);
      401     7405    4                 DO WHILE( P$ < STOP$ );
      402     7406    4                     PN$ = PINCRW( PNAM$, P$ -> VXD$TMPLT.NPOINTER );
              7406                              /* Get pointer to name for this entry */
      403     7407    4                     Q$ = PINCRW( P$, SIZEW(VXD$TMPLT) );
      404     7408    4                     IF PN$ -> B$DNAME.TEXT ~= PINCRW( PNAM$, Q$ -> VXD$TMPLT.NPOINTER
              7408                              )
      405     7409    4                             -> B$DNAME.TEXT THEN GOTO NO_DUPS_LOCAL;
      406     7410    4                     DUPSTOP$ = P$;
      407     7411    4                     IF RTYPE ~= %TYPEDEF AND P$ -> VXD$TMPLT.CONSTNT THEN CURRENT_TYPE
              7411                              = P$ -> VXD$TMPLT.LFLAGS.SOURCE;
      408     7412    4                     ELSE CURRENT_TYPE = P$ -> VXD$TMPLT.AD.LFLAGS.SOURCE;
      409     7413    4                     IF CURRENT_TYPE = %SOURCE_OBJECT# OR CURRENT_TYPE = %SOURCE_ULIB#
              7413                              THEN DEF_OBJECT_COUNT = 1;
      410     7414    4                     ELSE DEF_OBJECT_COUNT = 0;
      411     7415    4                     WHICH$ = P$;
      412     7416    4                     VALUE = P$ -> VXD$TMPLT.NPOINTER;
      413     7417    5                     DO WHILE ( Q$ <= STOP$ );
      414     7418    5                         QN$ = PINCRW( PNAM$, Q$ -> VXD$TMPLT.NPOINTER );
      415     7419    5                         IF PN$ -> B$DNAME.TEXT
      416     7420    5                                 ~=
      417     7421    5                                 QN$ -> B$DNAME.TEXT THEN GOTO CHECK_ANY_DUPS;
      418     7422    5                         DUPSTOP$ = Q$;
      419     7423    6                         IF RTYPE ~= %TYPEDEF AND Q$ -> VXD$TMPLT.CONSTNT THEN DO;
              7423                                  /* A constant data def */
      420     7424    6                             WHERE_TYPE = Q$ -> VXD$TMPLT.LFLAGS.SOURCE;
      421     7425    6                            END;
      422     7426    6                         ELSE DO;
      423     7427    6                             WHERE_TYPE = Q$ -> VXD$TMPLT.AD.LFLAGS.SOURCE;
      424     7428    6                            END;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:28   
      425     7429    6                         IF DEF_OBJECT_COUNT > 0 THEN DO;
      426     7430    7                             IF WHERE_TYPE = %SOURCE_OBJECT# OR WHERE_TYPE = %
              7430                                      SOURCE_ULIB# THEN DO;
      427     7431    7                                 DEF_OBJECT_COUNT = DEF_OBJECT_COUNT + 1;
      428     7432    7   CHECK_FIRST:
      429     7433    8                                 IF VALUE > Q$ -> VXD$TMPLT.NPOINTER THEN DO;
      430     7434    8   HAVE_FIRST:
      431     7435    8                                     CURRENT_TYPE = WHERE_TYPE;
      432     7436    8                                     VALUE = Q$ -> VXD$TMPLT.NPOINTER;
      433     7437    8                                     WHICH$ = Q$;
      434     7438    8                                    END;
              7438                                          /* If value > Q$ -> VXD$TMPLT.NPOINTER then do; */
      435     7439    7                                END;
              7439                        /* If Q$ -> VXD$TMPLT.AD.LFLAGS.SOURCE = %SOURCE_OBJECT# then do; */
      436     7440    6                            END;           /* If DEF_OBJECT_COUNT > 0 then do; */
      437     7441    6                         ELSE DO;
      438     7442    7                             DO CASE( WHERE_TYPE );
      439     7443    7                               CASE( %SOURCE_OBJECT#, %SOURCE_ULIB# );
      440     7444    7                                 DEF_OBJECT_COUNT = 1;
      441     7445    7                                 GOTO HAVE_FIRST;
      442     7446    7                               CASE( %SOURCE_SLIB# );
      443     7447    7                                 IF CURRENT_TYPE = %SOURCE_SLIB# THEN
      444     7448    7                                     GOTO CHECK_FIRST;
      445     7449    7                                 ELSE
      446     7450    7                                     GOTO HAVE_FIRST;
      447     7451    7                               CASE( %SOURCE_ALIB# );
      448     7452    7                                 IF CURRENT_TYPE = %SOURCE_ALIB# THEN GOTO CHECK_FIRST;
      449     7453    7                                 IF CURRENT_TYPE = %SOURCE_RLIB# THEN GOTO HAVE_FIRST;
      450     7454    7                               CASE( %SOURCE_RLIB# );
      451     7455    7                                 IF CURRENT_TYPE = %SOURCE_RLIB# THEN GOTO CHECK_FIRST;
      452     7456    7                                 IF CURRENT_TYPE = %SOURCE_REMOVED# THEN GOTO
              7456                                          HAVE_FIRST;
      453     7457    7                               CASE( %SOURCE_REMOVED# );
      454     7458    7                                 IF CURRENT_TYPE = %SOURCE_REMOVED# THEN GOTO
              7458                                          CHECK_FIRST;
      455     7459    7                               END;
      456     7460    6                            END;           /* Else do; */
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:29   
      457     7461    5                         Q$ = PINCRW( Q$, SIZEW(VXD$TMPLT) );
      458     7462    5                        END;               /* Do while ( Q$ <= STOP$ */
      459     7463    4   CHECK_ANY_DUPS:
      460     7464    4                     IF DUPSTOP$ <= P$ THEN GOTO NO_DUPS_LOCAL;
      461     7465    5                     IF DEF_OBJECT_COUNT >= 2 OR VX_O.SIN.DUPLICATE ~= 0 THEN DO;
      462     7466    6                         IF RTYPE ~= %TYPEDEF AND WHICH$ -> VXD$TMPLT.CONSTNT THEN DO;
              7466                                  /* A constant data def */
      463     7467    6                             WHICH$ -> VXD$TMPLT.LFLAGS.MULTIPLE = '1'B/*@YES_B*/;
              7467                                      /* Also here */
      464     7468    6                            END;
      465     7469    6                         ELSE DO;
      466     7470    6                             WHICH$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE = '1'B/*@YES_B*/;
              7470                                      /* Also here */
      467     7471    6                            END;
      468     7472                              %DUP_STATS;
      469     7475                              %CHECK( SEV = @MULTIPLE );
      470     7478    5                         VX_RU_HEAD.MAP_BITS_A.MULTIPLE(J1) = '1'B/*@TRUE_B*/;
      471     7479    5                        END;
              7479                               /* If DEF_OBJECT_COUNT >= 2 or VX_O.SIN.DUPLICATE then do; */
      472     7480    4                     R$ = P$;
      473     7481    4                     P$ = DUPSTOP$;
      474     7482    5                     DO WHILE( R$ <= DUPSTOP$ );
      475     7483    6                         IF R$ ~= WHICH$ THEN DO;
      476     7484    6                             R$ -> VXD$TMPLT = WHICH$ -> VXD$TMPLT;
      477     7485    6                            END;           /* If R$ ~= WHICH$ then do; */
      478     7486    5                         R$ = PINCRW( R$, SIZEW(VXD$TMPLT) );
      479     7487    5                        END;               /* Do while ( R$ <= DUPSTOP$ ) */
      480     7488    4   NO_DUPS_LOCAL:
      481     7489    4                     P$ = PINCRW( P$, SIZEW(VXD$TMPLT)); /* Bump up */
      482     7490    4                    END;                   /* Do while( P$ <= STOP$ ) */
      483     7491    3                END;
      484     7492    2            END;                           /* Do j = 1 to SIZEW...*/
      485     7493    1   END VXO$DUPCHK;

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:30   
--  Include file information  --

   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
      No diagnostics issued in procedure VXO$DUPCHK.

   Procedure VXO$DUPCHK requires 979 words for executable code.
   Procedure VXO$DUPCHK requires 76 words of local(AUTO) storage.

    No errors detected in file VXO$DUPCHK.:E05TSI    .

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:31   

 Object Unit name= VXO$DUPCHK                                 File name= VXO$DUPCHK.:E05TOU
 UTS= JUL 30 '97 08:24:35.64 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      8     10  VXO$DUPCHK
    1   Proc  even  none   979   1723  VXO$DUPCHK
    2  RoData even  none     2      2  VXO$DUPCHK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        0  VXO$DUPCHK
     1   1356                  yes      Std        0  VXO$CHKSET

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 VXK$KEY
         yes           Std       3 VXF$FREE
 yes     yes           Std       4 VXI$WRITE
         yes           Std       4 VXU$FIND_SECTNUM
         yes           Std       4 VXU$NEW_SECTNUM
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:32   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VX_RU_HEAD                            VX_OU_HEAD                            VX_NODE_NUMBER
     VX_ROOT$                              VX_CURR$                              VX_ERRORS
     VX_ERR_SEV                            VX_O                                  VX_PASS1_ALL_TYPE
     VX_DEF_REC_A                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:33   


        1        1        /*M* VXO$DUPCHK - Checks for multiply defined symbols.     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
        8        8        VXO$DUPCHK: PROC;

      8  1 000000   000000 700200 xent  VXO$DUPCHK   TSX0  ! X66_AUTO_0
         1 000001   000114 000000                    ZERO    76,0

        9        9
       10       10        /*
       11       11                      Include files
       12       12        */
       13       13        %INCLUDE VX_SWITCH_C;
       14       21        %INCLUDE VX_SUBS_C;
       15      239        %INCLUDE VX_MACRO_C;
       16     1376        %INCLUDE B$OBJECT_C;
       17     4806        %INCLUDE VX_DATA_R;
       18     6425        %VX$NODE;

              6437    1   /*******************************************************************************
              6438    1   *                                                                              *
              6439    1   *                          VX$NODE                                                *
              6440    1   *                                                                              *
              6441    1   *******************************************************************************/

              6457    1   DCL 1 VX$NODE      ALIGNED    BASED,
              6458    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
              6459    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
              6460    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
              6461    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
              6462    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
              6463                              to list of file nodes for this node            */
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:34   
              6464    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
              6465    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
              6465                  /* Head pointer to shared library list */
              6466    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
              6466                  /* Head pointer to list of shared libraries
              6467                                          which have been mapped to included libraries */
              6468    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
              6469    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
              6470    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
              6471    1         2 ADDR_START REDEF  ADDR_START_A,
              6472    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
              6473    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
              6474    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
              6475    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
              6476    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
              6477    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
              6478    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
              6479    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
              6480    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
              6481    1         2 START_PAGE# REDEF START_PAGE#_A,
              6482    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
              6483    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
              6484    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
              6485    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
              6486    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
              6487    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
              6488    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
              6489    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
              6490    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
              6490                  /* Starting pointer for common sections for this node */
              6491    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
              6491                  /* Stopping pointer for common sections for this node */
              6492    1         2 L_START,
              6493    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
              6494    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
              6495    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
              6496    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:35   
              6497    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
              6498    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
              6499    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
              6500    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
              6501    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
              6502    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
              6503    1         2 L_START_A$(0:9)     REDEF L_START PTR,
              6504    1         2 L_STOP,
              6505    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
              6506    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
              6507    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
              6508    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
              6509    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
              6510    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
              6511    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
              6512    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
              6513    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
              6514    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
              6515    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
              6516    1         2 L_SIZE,
              6517    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
              6518    1           3 DN      UBIN /*(0)*/, /* Def names                          */
              6519    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
              6520    1           3 SC      UBIN /*(0)*/, /* Sections                           */
              6521    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
              6522    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
              6523    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
              6524    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
              6525    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
              6526    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
              6527    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
              6528    1         2 L_PREV_SIZE,
              6529    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
              6530    1           3 DN      UBIN /*(0)*/, /* Def names                          */
              6531    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
              6532    1           3 SC      UBIN /*(0)*/, /* Sections                           */
              6533    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:36   
              6534    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
              6535    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
              6536    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
              6537    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
              6538    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
              6539    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
              6540    1         2 BIT_MAP                ALIGNED,
              6541    1           3 DATA                  ALIGNED,
              6542    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              6543    1           3 RPROC                 ALIGNED,
              6544    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              6545    1           3 ROS                   ALIGNED,
              6546    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
              6547    1         2 L_SC_START,
              6548    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
              6549    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
              6550    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
              6551    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
              6552    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
              6553    1         2 L_SC_STOP,
              6554    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
              6555    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
              6556    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
              6557    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
              6558    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
              6559    1         2 PROMOTE_HEAD,
              6560    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
              6561    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
              6562    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
              6563    1         2 PROMOTE_TAIL,
              6564    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
              6565    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
              6566    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
              6567    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
              6568    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
              6569    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
              6570    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:37   
              6571    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       19     6575        %VXD$TMPLT;

              6588    1   /*******************************************************************************
              6589    1   *                                                                              *
              6590    1   *                          VXD$TMPLT                                              *
              6591    1   *                                                                              *
              6592    1   *******************************************************************************/

              6596        /*
              6597                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
              6598                  ENTDEFs, SYMDEFs and SEGDEFs.
              6599        */
              6601    1   DCL 1 VXD$TMPLT BASED ALIGNED,
              6602    1         2 VALUE SBIN UNAL,
              6603                /*K*  VALUE is the value if this entry is a constant.  */
              6604    1         2 AD REDEF VALUE,
              6605                /*K*  AD is the address if this entry is not constant.  */
              6606    1           3 LFLAGS UNAL,
              6607                  /*K*  LFLAGS is the field reserved for loader to flag load
              6608                        time attributes of the definition and must be zero
              6609                        in the object unit. */
              6610    1             4 SOURCE UBIN(3) UNAL,
              6611                    /*K*  SOURCE - Source of this DEF */
              6612    1             4 DEFINED BIT(1) UNAL,
              6613                    /*K*  DEFINED - Set if this DEF defined */
              6614    1             4 MULTIPLE BIT(1) UNAL,
              6615                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
              6616    1             4 USED BIT(1) UNAL,
              6617                    /*K*  USED - Set if this DEF is used. */
              6618    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
              6619                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
              6620                        than 2048 (RU).  */
              6621    1           3 SECTNUM UBIN(11) UNAL,
              6622                  /*K*  SECTNUM contains an entry number into the section
              6623                        table (TYPE 3).  */
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:38   
              6624    1           3 ISADDR UBIN HALF UNAL,
              6625                  /*K*  ISADDR - Is Address (RU)  */
              6626    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
              6627                  /*K*  OFFSET is the word offset from the origin of the section. */
              6628    1         2 NPOINTER SBIN HALF UNAL,
              6629                /*K*  NPOINTER is a word displacement into the name record
              6630                      (TYPE 1) locating the name (of this entry). */
              6631    1         2 CONSTNT BIT(1) UNAL,
              6632                /*K*  CONSTNT is a flag bit to determine the interpretation
              6633                      of word 0.
              6634                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
              6635                                    SECTNUM, and ISADDR or OFFSET.
              6636                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
              6637    1         2 LFLAGS UNAL,
              6638                /*K*  LFLAGS is the field reserved for loader to flag load
              6639                      time attributes and must be zero in the object unit. */
              6640    1           3 MULTIPLE BIT(1) UNAL,
              6641                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
              6642    1           3 USED BIT(1) UNAL,
              6643                  /*K*  USED - Set if this DEF is used. */
              6644    1           3 SOURCE UBIN(4) UNAL,
              6645                  /*K*  SOURCE - Source of this DEF */
              6646    1           3 IS_DCB BIT(1) UNAL,
              6647                  /*K* IS_DCB - Set if this is a DCB */
              6648    1           3 * BIT(10) UNAL,
              6649                  /*K*  * is reserved for future use and must be zero.  */
              6650    1         2 PROTECTION REDEF LFLAGS,
              6651                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
              6652    1           3 TYPE UBIN(5) UNAL,
              6653                  /*K*  TYPE is the Protection type.  */
              6654    1           3 * UBIN(12) UNAL;
              6655                  /*K*  * is reserved for future use and must be zero.  */
       20     6670        %VX$SECTNUM;

              6683    1   /*******************************************************************************
              6684    1   *                                                                              *
              6685    1   *                          VX$SECTNUM                                             *
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:39   
              6686    1   *                                                                              *
              6687    1   *******************************************************************************/

              6692    1   DCL 1 VX$SECTNUM ALIGNED BASED,
              6693    1         2 NEXT$ PTR,
              6694    1         2 SECT#    UBIN HALF HALIGNED,
              6695    1         2 NPOINTER UBIN HALF HALIGNED,
              6696    1         2 NODE#    UBIN HALF HALIGNED,
              6697    1         2 RU_SECT# UBIN HALF HALIGNED;
       21     6700        %TMPLT;

              6712    1   /*******************************************************************************
              6713    1   *                                                                              *
              6714    1   *                          TMPLT                                                 *
              6715    1   *                                                                              *
              6716    1   *******************************************************************************/

              6721    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
              6722    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
              6723    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
              6724    1         2 W       REDEF     A,            /* By name                            */
              6725    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
              6726    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       22     6729        %SET LISTMAC='1'B;
       23     6730        %SET LISTSUB='1'B;
       24     6731        %SET LISTEXP='1'B;
       25     6732        %BANNER(ARG=SUBS);
              6733        %LSET LISTDIR='0'B;

              6740    1   /*******************************************************************************
              6741    1   *                                                                              *
              6742    1   *                          SUBS                                                 *
              6743    1   *                                                                              *
              6744    1   *******************************************************************************/

       26     6748        %B$RECORDSUBS;
              6749        %EQU TYPHEAD=0 ;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:40   
              6750        %EQU TYPDNAM=1 ;
              6751        %EQU TYPRNAM=2 ;
              6752        %EQU TYPSECT=3 ;
              6753        %EQU TYPEDEF=4 ;
              6754        %EQU TYPEREF=5 ;
              6755        %EQU TYPSDEF=6 ;
              6756        %EQU TYPSREF=7 ;
              6757        %EQU TYPSEGDEF=8 ;
              6758        %EQU TYPSEGREF=9 ;
              6759        %EQU TYPPROG=10 ;
              6760        %EQU SUBTYPPROG=0 ;
              6761        %EQU SUBTYPREL=1 ;
              6762        %EQU TYPLOGBLK=11 ;
              6763        %EQU TYPINTNTRY=12 ;
              6764        %EQU TYPEXST=13 ;
              6765        %EQU TYPVREBL=14 ;
              6766        %EQU TYPDBGNAM=15 ;
              6767        %EQU TYPLV1LB=16 ;
              6768        %EQU TYPLV1=17 ;
              6769        %EQU TYPDATASEG=18 ;
              6770        %EQU TYPRUM=20 ;
              6771        %EQU TYPBIRTH=21 ;
              6772        %EQU TYPPLOVER=22 ;
              6773        %EQU TYPCOMPID=23 ;
              6774        %EQU TYPROS=30 ;
       27     6776        %SUB_LINKFLAGS;
              6777        %EQU SOURCE_OBJECT#=0 ;
              6778        %EQU SOURCE_SLIB#=1 ;
              6779        %EQU SOURCE_ALIB#=2 ;
              6780        %EQU SOURCE_ULIB#=3 ;
              6781        %EQU SOURCE_RLIB#=4 ;
              6782        %EQU SOURCE_REMOVED#=5 ;
              6783        %EQU SOURCE_LINKER#=6 ;
       28     6785        %BANNER(ARG=B$DNAME);
              6786        %LSET LISTDIR='0'B;

              6793    1   /*******************************************************************************
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:41   
              6794    1   *                                                                              *
              6795    1   *                          B$DNAME                                                *
              6796    1   *                                                                              *
              6797    1   *******************************************************************************/

       29     6801        %B$DNAME( NAME=B$DNAME, STCLASS=BASED);
              6802            %LSET STR='BASED        ';
              6803            %IF
              6804                '0'B;
              6806            %ELSE;
              6807                %LSET INIT=/*;
              6808            %ENDIF;
              6809    1   DCL 1 B$DNAME BASED ALIGNED,
              6810    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
              6811                /*K*  COUNT is the number of characters in the name */
              6812            %IF
              6813                '0'B;
              6816            %ELSE;
              6817    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
              6818            %ENDIF;
       30     6820        %B;
              6821        %LSET LISTDIR='0'B;

              6828    1   /*******************************************************************************
              6829    1   *                                                                              *
              6830    1   *                          BIT                                                 *
              6831    1   *                                                                              *
              6832    1   *******************************************************************************/

       31     6836    1   DCL ABOVE_MULT         BIT(1)   ALIGNED AUTO;
       32     6837    1   DCL BELOW_MULT         BIT(1)   ALIGNED AUTO;
       33     6838    1   DCL ABOVE_OBJECT       BIT(1)   ALIGNED AUTO;
       34     6839    1   DCL BELOW_OBJECT       BIT(1)   ALIGNED AUTO;
       35     6840    1   DCL FIRST              BIT(1)   ALIGNED AUTO;
       36     6841    1   DCL FIRST_LOOP         BIT(1)   ALIGNED AUTO;
       37     6842    1   DCL ANY_OBJECT         BIT(1)   ALIGNED AUTO;
       38     6843    1   DCL FIRST_MOVE         BIT(1)   ALIGNED AUTO;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:42   
       39     6844    1   DCL FOUN               BIT(1)   ALIGNED AUTO;
       40     6845    1   DCL BY_PASS            BIT(1)   ALIGNED AUTO;
       41     6846    1   DCL FINISHED           BIT(1)   ALIGNED AUTO;
       42     6847        %E;
              6848        %LSET LISTDIR='0'B;

              6855    1   /*******************************************************************************
              6856    1   *                                                                              *
              6857    1   *                          ENTRY                                                 *
              6858    1   *                                                                              *
              6859    1   *******************************************************************************/

       43     6863        %ENTRIES;
              6864    1   DCL VXE$ERROR       ENTRY(4);
              6865    1   DCL VXE$ERR         ENTRY(3);
              6866    1   DCL VXE$MERC        ENTRY;
              6867    1   DCL VXE$ERRMSG      ENTRY(3);
              6868    1   DCL VXR$READ        ENTRY( 3 );
              6869    1   DCL VXW$WRITE       ENTRY( 3 );
              6870    1   DCL VXW$WRITE_DO    ENTRY( 2 );
              6871    1   DCL VXD$B2C         ENTRY( 5 );
              6872    1   DCL VXD$C2B         ENTRY( 3 );
              6873    1   DCL VXA$GET         ENTRY( 3 );
              6874    1   DCL VXF$FREE        ENTRY( 3 );
              6875    1   DCL VXQ$SORT        ENTRY( 7 );
              6876    1   DCL VXY$YESNO       ENTRY( 1 );
       44     6878        %ENTRIES_IO;
              6879    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
              6880    1   DCL VXF$CLOSE       ENTRY(3);
              6881    1   DCL VXU$PREAD       ENTRY(12);
              6882    1   DCL VXK$KEY         ENTRY(4);
              6883    1   DCL VXI$READ        ENTRY(4)  ALTRET;
              6884    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       45     6886    1   DCL VXU$NEW_SECTNUM ENTRY(4);
       46     6887    1   DCL VXU$FIND_SECTNUM ENTRY(4);
       47     6888        %PTR;
              6889        %LSET LISTDIR='0'B;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:43   

              6896    1   /*******************************************************************************
              6897    1   *                                                                              *
              6898    1   *                          PTR                                                 *
              6899    1   *                                                                              *
              6900    1   *******************************************************************************/

       48     6904        %POINTER;
              6905    1   DCL P$         PTR       ALIGNED AUTO;
              6906    1   DCL Q$         PTR       ALIGNED AUTO;
              6907    1   DCL R$         PTR       ALIGNED AUTO;
       49     6909    1   DCL CURR$           PTR       ALIGNED   AUTO;
       50     6910    1   DCL SEC_CURR$       PTR       ALIGNED   AUTO;
       51     6911    1   DCL SEC_RESULT$     PTR       ALIGNED   AUTO;
       52     6912    1   DCL PATH_CURR$      PTR       ALIGNED   AUTO;
       53     6913    1   DCL DUPSTOP$        PTR       ALIGNED   AUTO;
       54     6914    1   DCL PN$             PTR       ALIGNED   AUTO;
       55     6915    1   DCL QN$             PTR       ALIGNED   AUTO;
       56     6916    1   DCL PNAM$           PTR       ALIGNED   AUTO;
       57     6917    1   DCL STOP$           PTR       ALIGNED   AUTO;
       58     6918    1   DCL FIRST_START$    PTR       ALIGNED   AUTO;
       59     6919    1   DCL FIRST_STOP$     PTR       ALIGNED   AUTO;
       60     6920    1   DCL WHICH$          PTR       ALIGNED   AUTO;
       61     6921    1   DCL NEXT_P$         PTR       ALIGNED   AUTO;
       62     6922    1   DCL STOP_P$         PTR       ALIGNED   AUTO;
       63     6923    1   DCL HOLD$                PTR  ALIGNED   AUTO;
       64     6924        %U;
              6925        %LSET LISTDIR='0'B;

              6932    1   /*******************************************************************************
              6933    1   *                                                                              *
              6934    1   *                          UBIN                                                 *
              6935    1   *                                                                              *
              6936    1   *******************************************************************************/

       65     6940        %INDEX;
              6941    1   DCL I          UBIN(36) ALIGNED AUTO;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:44   
              6942    1   DCL SI REDEF I SBIN WORD ALIGNED;
              6943    1   DCL J          UBIN(36) ALIGNED AUTO;
              6944    1   DCL SJ REDEF J SBIN WORD ALIGNED;
              6945    1   DCL K          UBIN(36) ALIGNED AUTO;
              6946    1   DCL SK REDEF K SBIN WORD ALIGNED;
              6947    1   DCL L          UBIN(36) ALIGNED AUTO;
              6948    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       66     6950    1   DCL RTYPE           UBIN(36)  ALIGNED   AUTO;
       67     6951    1   DCL VALUE           UBIN(36)  ALIGNED   AUTO;
       68     6952    1   DCL SAVE_NAME_DISP  UBIN(36)  ALIGNED   AUTO;
       69     6953    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       70     6954    1   DCL J1              UBIN(36)  ALIGNED   AUTO;
       71     6955    1   DCL WHERE_TYPE      UBIN(36)  ALIGNED   AUTO;
       72     6956    1   DCL CURRENT_TYPE         UBIN(36)  ALIGNED   AUTO;
       73     6957    1   DCL ABOVE_VALUE          UBIN(36)  ALIGNED   AUTO;
       74     6958    1   DCL BELOW_VALUE          UBIN(36)  ALIGNED   AUTO;
       75     6959    1   DCL ABOVE_PREC           UBIN(36)  ALIGNED   AUTO;
       76     6960    1   DCL CURRENT_PREC         UBIN(36)  ALIGNED   AUTO;
       77     6961        /**/
       78     6962    1   DCL SYM_PREC(0:7)        UBIN(36)  ALIGNED   CONSTANT  INIT(
       79     6963    1              15,
       80     6964    1              14,
       81     6965    1              13,
       82     6966    1              15,
       83     6967    1              12,
       84     6968    1               0,
       85     6969    1               0,
       86     6970    1               0);
       87     6971    1   DCL DEF_OBJECT_COUNT UBIN(36)  ALIGNED   AUTO;
       88     6972        %BIN_SEARCH_TEMPS(
       89     6973                   LOW=BIN_LOW,
       90     6974                   HIGH=BIN_HIGH,
       91     6975                   START1$=BIN_START1$,
       92     6976                   MID=BIN_MID,
       93     6977                   NTEMP$=BIN_NTEMP$);
              6978    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
              6979    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:45   
              6980    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
              6981    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
              6982    1   DCL BIN_START1$         PTR       ALIGNED AUTO;
       94     6984        %BIN_SEARCH_VARS(
       95     6985                   START$=BIN_START$,
       96     6986                   STOP$=BIN_STOP$,
       97     6987                   RESULT$=BIN_RESULT$,
       98     6988                   N$=BIN_N$,
       99     6989                   MATCH$=BIN_MATCH$,
      100     6990                   NAME_DISP=BIN_NAME_DISP,
      101     6991                   SIZE=BIN_SIZE);
              6992    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
              6993    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
              6994    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
              6995    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
              6996    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
              6997    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
              6998    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
      102     7000        %PLIST;
      103     7001        %SET LISTEXP='0'B;
      104     7002        %EJECT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:46   
      105     7003    1         PATH_CURR$ = VX_CURR$;

   7003  1 000002   000000 236000 xsym               LDQ     VX_CURR$
         1 000003   200024 756100                    STQ     PATH_CURR$,,AUTO

      106     7004    1         PATH_CURR$ -> VX$NODE.PATH$ = ADDR(NIL);

   7004  1 000004   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000005   200024 470500                    LDP0    PATH_CURR$,,AUTO
         1 000006   000003 756100                    STQ     3,,PR0

      107     7005    2         DO WHILE( PATH_CURR$ -> VX$NODE.FATHER$ ~= ADDR(NIL) );

   7005  1 000007   000016 710000 1                  TRA     s:7008

      108     7006    2             PATH_CURR$ -> VX$NODE.FATHER$ -> VX$NODE.PATH$ = PATH_CURR$;

   7006  1 000010   200024 470500                    LDP0    PATH_CURR$,,AUTO
         1 000011   000002 471500                    LDP1    2,,PR0
         1 000012   200024 236100                    LDQ     PATH_CURR$,,AUTO
         1 000013   100003 756100                    STQ     3,,PR1

      109     7007    2             PATH_CURR$ = PATH_CURR$ -> VX$NODE.FATHER$;

   7007  1 000014   000002 236100                    LDQ     2,,PR0
         1 000015   200024 756100                    STQ     PATH_CURR$,,AUTO

      110     7008    2            END;

   7008  1 000016   200024 470500                    LDP0    PATH_CURR$,,AUTO
         1 000017   000002 236100                    LDQ     2,,PR0
         1 000020   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000021   000010 601000 1                  TNZ     s:7006

      111     7009    1         PNAM$ = VX_CURR$ -> VX$NODE.L_START.DN$;

   7009  1 000022   000000 471400 xsym               LDP1    VX_CURR$
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:47   
         1 000023   100031 236100                    LDQ     25,,PR1
         1 000024   200030 756100                    STQ     PNAM$,,AUTO

      112     7010    2         DO J = 1 TO SIZEW( VX_DEF_REC_A ) - 1;

   7010  1 000025   000001 235007                    LDA     1,DL
         1 000026   200041 755100                    STA     J,,AUTO
         1 000027   001134 710000 1                  TRA     s:7329+3

      113     7011    2             J1 = J - 1;

   7011  1 000030   200041 235100                    LDA     J,,AUTO
         1 000031   000001 135007                    SBLA    1,DL
         1 000032   200050 755100                    STA     J1,,AUTO

      114     7012    2             RTYPE = VX_DEF_REC_A(J);

   7012  1 000033   200041 720100                    LXL0    J,,AUTO
         1 000034   000000 235010 xsym               LDA     VX_DEF_REC_A,X0
         1 000035   200044 755100                    STA     RTYPE,,AUTO

      115     7013    2             P$ = VX_CURR$ -> VX$NODE.L_START_A$(RTYPE); /* Get starting point */

   7013  1 000036   000000 470400 xsym               LDP0    VX_CURR$
         1 000037   000030 236105                    LDQ     24,AL,PR0
         1 000040   200016 756100                    STQ     P$,,AUTO

      116     7014    3             IF P$ ~= ADDR(NIL) THEN DO;   /* Do if some */

   7014  1 000041   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000042   001131 600000 1                  TZE     s:7329

      117     7015    3                 STOP$ = VX_CURR$ -> VX$NODE.L_STOP_A$(RTYPE);

   7015  1 000043   200044 721100                    LXL1    RTYPE,,AUTO
         1 000044   000042 236111                    LDQ     34,X1,PR0
         1 000045   200031 756100                    STQ     STOP$,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:48   

      118     7016    4                 IF VX_NODE_NUMBER > 0 THEN DO;

   7016  1 000046   000000 235000 xsym               LDA     VX_NODE_NUMBER
         1 000047   001057 604400 1                  TMOZ    s:7321

      119     7017    5                     DO WHILE( P$ <= STOP$ );

   7017  1 000050   200016 116100                    CMPQ    P$,,AUTO
         1 000051   001057 602000 1                  TNC     s:7321

      120     7018    5                         PN$ = PINCRW( PNAM$, P$ -> VXD$TMPLT.NPOINTER );
              7018                                  /* Get pointer to name for this entry */

   7018  1 000052   200016 470500                    LDP0    P$,,AUTO
         1 000053   000001 220100                    LDX0    1,,PR0
         1 000054   000000 636010                    EAQ     0,X0
         1 000055   200030 036100                    ADLQ    PNAM$,,AUTO
         1 000056   200026 756100                    STQ     PN$,,AUTO

      121     7019    5                         NEXT_P$ = PINCRW( P$, SIZEW( VXD$TMPLT ) );

   7019  1 000057   200016 236100                    LDQ     P$,,AUTO
         1 000060   000002 036003                    ADLQ    2,DU
         1 000061   200035 756100                    STQ     NEXT_P$,,AUTO

      122     7020    5                         IF NEXT_P$ > STOP$ THEN GOTO JUMP_OUT;

   7020  1 000062   200031 116100                    CMPQ    STOP$,,AUTO
         1 000063   000065 600000 1                  TZE     s:7021
         1 000064   000123 603000 1                  TRC     JUMP_OUT

      123     7021    6                         DO WHILE( PN$ -> B$DNAME.TEXT =

   7021  1 000065   200026 471500                    LDP1    PN$,,AUTO
         1 000066   100000 221100                    LDX1    0,,PR1
         1 000067   200035 473500                    LDP3    NEXT_P$,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:49   
         1 000070   300001 222100                    LDX2    1,,PR3
         1 000071   200030 474500                    LDP4    PNAM$,,AUTO
         1 000072   400000 223112                    LDX3    0,X2,PR4
         1 000073   000000 635012                    EAA     0,X2
         1 000074   000020 731000                    ARS     16
         1 000075   040145 106540                    CMPC    fill='040'O
         1 000076   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         1 000077   400000 400013                    ADSC9   0,A,PR4                  cn=2,n=*X3
         1 000100   000123 601000 1                  TNZ     JUMP_OUT

      124     7022    6                                 PINCRW( PNAM$, NEXT_P$ -> VXD$TMPLT.NPOINTER ) ->
              7022                                          B$DNAME.TEXT );
      125     7023    6                             NEXT_P$ = PINCRW( NEXT_P$, SIZEW( VXD$TMPLT ) );

   7023  1 000101   200035 236100                    LDQ     NEXT_P$,,AUTO
         1 000102   000002 036003                    ADLQ    2,DU
         1 000103   200035 756100                    STQ     NEXT_P$,,AUTO

      126     7024    6                             IF NEXT_P$ > STOP$ THEN GOTO JUMP_OUT;

   7024  1 000104   200031 116100                    CMPQ    STOP$,,AUTO
         1 000105   000107 600000 1                  TZE     s:7025
         1 000106   000123 603000 1                  TRC     JUMP_OUT

      127     7025    6                            END;           /* Do while ... */

   7025  1 000107   200026 470500                    LDP0    PN$,,AUTO
         1 000110   000000 220100                    LDX0    0,,PR0
         1 000111   200035 471500                    LDP1    NEXT_P$,,AUTO
         1 000112   100001 221100                    LDX1    1,,PR1
         1 000113   200030 473500                    LDP3    PNAM$,,AUTO
         1 000114   300000 222111                    LDX2    0,X1,PR3
         1 000115   000000 635011                    EAA     0,X1
         1 000116   000020 731000                    ARS     16
         1 000117   040145 106540                    CMPC    fill='040'O
         1 000120   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         1 000121   300000 400012                    ADSC9   0,A,PR3                  cn=2,n=*X2
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:50   
         1 000122   000101 600000 1                  TZE     s:7023

      128     7026    5   JUMP_OUT:             STOP_P$ = PINCRW( NEXT_P$, -SIZEW(VXD$TMPLT) );

   7026  1 000123   777776 036003       JUMP_OUT     ADLQ    -2,DU
         1 000124   200036 756100                    STQ     STOP_P$,,AUTO

      129     7027    5                         CALL GET_VALS(P$,BELOW_VALUE,BELOW_MULT);

   7027  1 000125   200004 630500                    EPPR0   BELOW_MULT,,AUTO
         1 000126   200077 450500                    STP0    @STOP$+1,,AUTO
         1 000127   200054 631500                    EPPR1   BELOW_VALUE,,AUTO
         1 000130   200076 451500                    STP1    @START$+1,,AUTO
         1 000131   200016 633500                    EPPR3   P$,,AUTO
         1 000132   200075 453500                    STP3    BIN_N$+5,,AUTO
         1 000133   001137 701000 1                  TSX1    GET_VALS
         1 000134   000000 011000                    NOP     0

      130     7028    6                         DO CASE(BELOW_VALUE);

   7028  1 000135   200054 235100                    LDA     BELOW_VALUE,,AUTO
         1 000136   000006 115007                    CMPA    6,DL
         1 000137   000141 602005 1                  TNC     s:7028+4,AL
         1 000140   000153 710000 1                  TRA     s:7034
         1 000141   000150 710000 1                  TRA     s:7032
         1 000142   000153 710000 1                  TRA     s:7034
         1 000143   000153 710000 1                  TRA     s:7034
         1 000144   000150 710000 1                  TRA     s:7032
         1 000145   000153 710000 1                  TRA     s:7034
         1 000146   000147 710000 1                  TRA     s:7030

      131     7029    6                           CASE(%SOURCE_REMOVED#);

      132     7030    6                             GOTO SET_NEXT_P;

   7030  1 000147   001052 710000 1                  TRA     SET_NEXT_P

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:51   
      133     7031    6                           CASE(%SOURCE_OBJECT#,%SOURCE_ULIB#);

      134     7032    6                             BELOW_OBJECT='1'B;

   7032  1 000150   400000 236003                    LDQ     -131072,DU
         1 000151   200006 756100                    STQ     BELOW_OBJECT,,AUTO
         1 000152   000154 710000 1                  TRA     s:7037

      135     7033    6                           CASE(ELSE);

      136     7034    6                             BELOW_OBJECT='0'B;

   7034  1 000153   200006 450100                    STZ     BELOW_OBJECT,,AUTO

      137     7035    6                           END;

      138     7036        /**/
      139     7037    5                         CURR$ = VX_ROOT$;

   7037  1 000154   000000 236000 xsym               LDQ     VX_ROOT$
         1 000155   200021 756100                    STQ     CURR$,,AUTO

      140     7038    5   CHECK_DOWN_PATH:
      141     7039    5                         IF CURR$ = VX_CURR$ THEN GOTO SET_NEXT_P;

   7039  1 000156   200021 236100       CHECK_DOWN_* LDQ     CURR$,,AUTO
         1 000157   000000 116000 xsym               CMPQ    VX_CURR$
         1 000160   001052 600000 1                  TZE     SET_NEXT_P

      142     7040    5                         BIN_START$ = CURR$ -> VX$NODE.L_START_A$(RTYPE);

   7040  1 000161   200021 470500                    LDP0    CURR$,,AUTO
         1 000162   200044 720100                    LXL0    RTYPE,,AUTO
         1 000163   000030 236110                    LDQ     24,X0,PR0
         1 000164   200065 756100                    STQ     BIN_START$,,AUTO

      143     7041    5                         BIN_STOP$  = CURR$ -> VX$NODE.L_STOP_A$(RTYPE);
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:52   

   7041  1 000165   000042 236110                    LDQ     34,X0,PR0
         1 000166   200066 756100                    STQ     BIN_STOP$,,AUTO

      144     7042    5                         BIN_N$ = CURR$ -> VX$NODE.L_START.DN$;

   7042  1 000167   000031 236100                    LDQ     25,,PR0
         1 000170   200070 756100                    STQ     BIN_N$,,AUTO

      145     7043
      146     7044        /* Search defs */
      147     7045                              %BIN_SEARCH(
      148     7046                              START$=BIN_START$,
      149     7047                              STOP$=BIN_STOP$,
      150     7048                              RESULT$=BIN_RESULT$,
      151     7049                              N$=BIN_N$,
      152     7050                              MATCH$=PN$,
      153     7051                              NAME_DISP=2,
      154     7052                              SIZE="SIZEW(VXD$TMPLT)",
      155     7053                              NEG=%@COMMENT,
      156     7054                              GEN=%@TNEMMOC,
      157     7055                              ALTRETURN=NO_DUPS_THIS_ANCESTOR_IN_DEFS,
      158     7056                              EMPTY=NO_DUPS_THIS_ANCESTOR_IN_DEFS);
              7058    5           IF BIN_START$ = ADDR(NIL) THEN GOTO NO_DUPS_THIS_ANCESTOR_IN_DEFS;

   7058  1 000171   200065 236100                    LDQ     BIN_START$,,AUTO
         1 000172   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000173   001046 600000 1                  TZE     NO_DUPS_THIS_ANCESTOR_IN_DEFS

              7059    6           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;

   7059  1 000174   200065 235100                    LDA     BIN_START$,,AUTO
         1 000175   000022 771000                    ARL     18
         1 000176   200110 755100                    STA     SECTNUM$+2,,AUTO
         1 000177   200066 236100                    LDQ     BIN_STOP$,,AUTO
         1 000200   000022 772000                    QRL     18
         1 000201   200110 136100                    SBLQ    SECTNUM$+2,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:53   
         1 000202   000002 506007                    DIV     2,DL
         1 000203   000021 116007                    CMPQ    17,DL
         1 000204   000240 605000 1                  TPL     s:7076

              7060    6              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

   7060  1 000205   200065 236100                    LDQ     BIN_START$,,AUTO
         1 000206   200067 756100                    STQ     BIN_RESULT$,,AUTO

              7061    7              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

   7061  1 000207   200066 116100                    CMPQ    BIN_STOP$,,AUTO
         1 000210   000212 600000 1                  TZE     s:7062
         1 000211   000237 603000 1                  TRC     s:7073

              7062    7                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

   7062  1 000212   200067 470500                    LDP0    BIN_RESULT$,,AUTO
         1 000213   000001 220100                    LDX0    1,,PR0
         1 000214   000000 636010                    EAQ     0,X0
         1 000215   200070 036100                    ADLQ    BIN_N$,,AUTO
         1 000216   200063 756100                    STQ     BIN_NTEMP$,,AUTO

              7063    7                 IF BIN_NTEMP$ -> B$DNAME.TEXT

   7063  1 000217   200063 471500                    LDP1    BIN_NTEMP$,,AUTO
         1 000220   100000 221100                    LDX1    0,,PR1
         1 000221   200026 473500                    LDP3    PN$,,AUTO
         1 000222   300000 222100                    LDX2    0,,PR3
         1 000223   040140 106540                    CMPC    fill='040'O
         1 000224   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         1 000225   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         1 000226   000231 602000 1                  TNC     s:7071

              7064    7                   >=
              7065    8                   PN$ -> B$DNAME.TEXT THEN DO;

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:54   
              7066    8                    IF BIN_NTEMP$ -> B$DNAME.TEXT

   7066  1 000227   000315 600000 1                  TZE     BIN_FOUND

              7067    8                      =
              7068    8                      PN$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND;
              7069    8                    ELSE GOTO NO_DUPS_THIS_ANCESTOR_IN_DEFS;

   7069  1 000230   001046 710000 1                  TRA     NO_DUPS_THIS_ANCESTOR_IN_DEFS

              7070    8                    END;
              7071    7                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );

   7071  1 000231   200067 236100                    LDQ     BIN_RESULT$,,AUTO
         1 000232   000002 036003                    ADLQ    2,DU
         1 000233   200067 756100                    STQ     BIN_RESULT$,,AUTO

              7072    7                 END;                      /* Do while                           */

   7072  1 000234   200066 116100                    CMPQ    BIN_STOP$,,AUTO
         1 000235   000212 602000 1                  TNC     s:7062
         1 000236   000212 600000 1                  TZE     s:7062

              7073    6              GOTO NO_DUPS_THIS_ANCESTOR_IN_DEFS;

   7073  1 000237   001046 710000 1                  TRA     NO_DUPS_THIS_ANCESTOR_IN_DEFS

              7074    6              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
              7075    6           ELSE DO;                        /* Binary search                      */

              7076    6              BIN_LOW = 0;

   7076  1 000240   200060 450100                    STZ     BIN_LOW,,AUTO

              7077    6              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;

   7077  1 000241   200065 235100                    LDA     BIN_START$,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:55   
         1 000242   000022 771000                    ARL     18
         1 000243   200110 755100                    STA     SECTNUM$+2,,AUTO
         1 000244   200066 236100                    LDQ     BIN_STOP$,,AUTO
         1 000245   000022 772000                    QRL     18
         1 000246   200110 136100                    SBLQ    SECTNUM$+2,,AUTO
         1 000247   000002 506007                    DIV     2,DL
         1 000250   000002 036007                    ADLQ    2,DL
         1 000251   200061 756100                    STQ     BIN_HIGH,,AUTO

              7078    6              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );

   7078  1 000252   200065 236100                    LDQ     BIN_START$,,AUTO
         1 000253   777776 036003                    ADLQ    -2,DU
         1 000254   200064 756100                    STQ     BIN_START1$,,AUTO

   7078  1 000255                       BIN_SPLIT    null
              7079    6   BIN_SPLIT:     ;
              7080    6              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

   7080  1 000255   200060 236100                    LDQ     BIN_LOW,,AUTO
         1 000256   200061 036100                    ADLQ    BIN_HIGH,,AUTO
         1 000257   000001 772000                    QRL     1
         1 000260   200062 756100                    STQ     BIN_MID,,AUTO

              7081    6              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );

   7081  1 000261   000023 736000                    QLS     19
         1 000262   200064 036100                    ADLQ    BIN_START1$,,AUTO
         1 000263   200067 756100                    STQ     BIN_RESULT$,,AUTO

              7082    6              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

   7082  1 000264   200067 470500                    LDP0    BIN_RESULT$,,AUTO
         1 000265   000001 220100                    LDX0    1,,PR0
         1 000266   000000 636010                    EAQ     0,X0
         1 000267   200070 036100                    ADLQ    BIN_N$,,AUTO
         1 000270   200063 756100                    STQ     BIN_NTEMP$,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:56   

              7083    6              IF BIN_NTEMP$ -> B$DNAME.TEXT

   7083  1 000271   200063 471500                    LDP1    BIN_NTEMP$,,AUTO
         1 000272   100000 221100                    LDX1    0,,PR1
         1 000273   200026 473500                    LDP3    PN$,,AUTO
         1 000274   300000 222100                    LDX2    0,,PR3
         1 000275   040140 106540                    CMPC    fill='040'O
         1 000276   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         1 000277   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         1 000300   000304 603000 1                  TRC     s:7089

              7084    6                <
              7085    7                PN$ -> B$DNAME.TEXT THEN DO;

              7086    7                 BIN_LOW = BIN_MID;

   7086  1 000301   200062 235100                    LDA     BIN_MID,,AUTO
         1 000302   200060 755100                    STA     BIN_LOW,,AUTO

              7087    7                 GOTO BIN_CHECK;

   7087  1 000303   000310 710000 1                  TRA     BIN_CHECK

              7088    7                 END;
              7089    6              IF BIN_NTEMP$ -> B$DNAME.TEXT

   7089  1 000304   000315 602000 1                  TNC     BIN_FOUND
         1 000305   000315 600000 1                  TZE     BIN_FOUND

              7090    6                >
              7091    7                PN$ -> B$DNAME.TEXT THEN DO;

              7092    7                 BIN_HIGH = BIN_MID;

   7092  1 000306   200062 235100                    LDA     BIN_MID,,AUTO
         1 000307   200061 755100                    STA     BIN_HIGH,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:57   

   7092  1 000310                       BIN_CHECK    null
              7093    7   BIN_CHECK:        ;
              7094    7                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT;

   7094  1 000310   200060 236100                    LDQ     BIN_LOW,,AUTO
         1 000311   000001 036007                    ADLQ    1,DL
         1 000312   200061 116100                    CMPQ    BIN_HIGH,,AUTO
         1 000313   000255 602000 1                  TNC     BIN_SPLIT

              7095                                                /* Here => looping or not found       */
              7096                                      /* Result -> < match => a boundary condition    */
              7097    7                 %@COMMENT
              7098    7                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
              7099    7                   <
              7100    7                   PN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
              7100                            VXD$TMPLT) );
              7101    7                 %@TNEMMOC
              7102    7                   GOTO NO_DUPS_THIS_ANCESTOR_IN_DEFS;

   7102  1 000314   001046 710000 1                  TRA     NO_DUPS_THIS_ANCESTOR_IN_DEFS

              7103    7                 END;
              7104    6              END;                         /* Else do;                           */
              7105    5   BIN_FOUND:
              7106        /* Here -> found */
      159     7108        /* Here => found a duplicate */
      160     7109        /**/
      161     7110        /**/
      162     7111        /**/
      163     7112    5                         BY_PASS = '0'B/*@FALSE_B*/;

   7112  1 000315   200014 450100       BIN_FOUND    STZ     BY_PASS,,AUTO

      164     7113    5   BIN_FOUND_AGAIN:
      165     7114    5                         CALL GET_VALS(BIN_RESULT$,ABOVE_VALUE,ABOVE_MULT);

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:58   
   7114  1 000316   200003 630500       BIN_FOUND_A* EPPR0   ABOVE_MULT,,AUTO
         1 000317   200077 450500                    STP0    @STOP$+1,,AUTO
         1 000320   200053 631500                    EPPR1   ABOVE_VALUE,,AUTO
         1 000321   200076 451500                    STP1    @START$+1,,AUTO
         1 000322   200067 633500                    EPPR3   BIN_RESULT$,,AUTO
         1 000323   200075 453500                    STP3    BIN_N$+5,,AUTO
         1 000324   001137 701000 1                  TSX1    GET_VALS
         1 000325   000000 011000                    NOP     0

      166     7115    6                         DO CASE(ABOVE_VALUE);

   7115  1 000326   200053 235100                    LDA     ABOVE_VALUE,,AUTO
         1 000327   000006 115007                    CMPA    6,DL
         1 000330   000332 602005 1                  TNC     s:7115+4,AL
         1 000331   000346 710000 1                  TRA     s:7122
         1 000332   000343 710000 1                  TRA     s:7120
         1 000333   000346 710000 1                  TRA     s:7122
         1 000334   000346 710000 1                  TRA     s:7122
         1 000335   000343 710000 1                  TRA     s:7120
         1 000336   000346 710000 1                  TRA     s:7122
         1 000337   000340 710000 1                  TRA     s:7117

      167     7116    6                           CASE(%SOURCE_REMOVED#);

      168     7117    6                             IF NOT BY_PASS

   7117  1 000340   200014 234100                    SZN     BY_PASS,,AUTO
         1 000341   001046 605000 1                  TPL     NO_DUPS_THIS_ANCESTOR_IN_DEFS
         1 000342   000347 710000 1                  TRA     s:7129

      169     7118    6                             THEN GOTO NO_DUPS_THIS_ANCESTOR_IN_DEFS;
      170     7119    6                           CASE(%SOURCE_OBJECT#,%SOURCE_ULIB#);

      171     7120    6                             ABOVE_OBJECT='1'B;

   7120  1 000343   400000 236003                    LDQ     -131072,DU
         1 000344   200005 756100                    STQ     ABOVE_OBJECT,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:59   
         1 000345   000347 710000 1                  TRA     s:7129

      172     7121    6                           CASE(ELSE);

      173     7122    6                             ABOVE_OBJECT='0'B;

   7122  1 000346   200005 450100                    STZ     ABOVE_OBJECT,,AUTO

      174     7123    6                           END;

      175     7124        /**/
      176     7125        /**/
      177     7126        /**/
      178     7127        /**/
      179     7128        /**/
      180     7129    6                         IF ABOVE_OBJECT OR BY_PASS THEN DO;

   7129  1 000347   200005 234100                    SZN     ABOVE_OBJECT,,AUTO
         1 000350   000353 604000 1                  TMI     MOVE_ABOVE_TO_BELOW
         1 000351   200014 234100                    SZN     BY_PASS,,AUTO
         1 000352   000444 605000 1                  TPL     s:7158

      181     7130        /**/
      182     7131    6   MOVE_ABOVE_TO_BELOW:
      183     7132    7                             IF ABOVE_MULT THEN DO;

   7132  1 000353   200003 234100       MOVE_ABOVE_* SZN     ABOVE_MULT,,AUTO
         1 000354   000363 605000 1                  TPL     s:7135

      184     7133    7                                 IF BELOW_MULT THEN VX_ERRORS.MULTIPLE=VX_ERRORS.
              7133                                          MULTIPLE-1;

   7133  1 000355   200004 234100                    SZN     BELOW_MULT,,AUTO
         1 000356   000425 605000 1                  TPL     s:7150

   7133  1 000357   000000 235000 xsym               LDA     VX_ERRORS
         1 000360   000001 135007                    SBLA    1,DL
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:60   
         1 000361   000000 755000 xsym               STA     VX_ERRORS

      185     7134    7                                END;       /* If ABOVE_MULT then do; */

   7134  1 000362   000425 710000 1                  TRA     s:7150

      186     7135    6                             ELSE IF NOT BELOW_MULT AND

   7135  1 000363   200004 234100                    SZN     BELOW_MULT,,AUTO
         1 000364   000425 604000 1                  TMI     s:7150
         1 000365   000021 235000 xsym               LDA     VX_O+17
         1 000366   000373 601000 1                  TNZ     s:7140
         1 000367   200005 234100                    SZN     ABOVE_OBJECT,,AUTO
         1 000370   000425 605000 1                  TPL     s:7150
         1 000371   200006 234100                    SZN     BELOW_OBJECT,,AUTO
         1 000372   000425 605000 1                  TPL     s:7150

      187     7136    6                                         (VX_O.SIN.DUPLICATE ~= 0
      188     7137    6                                         OR (ABOVE_OBJECT AND BELOW_OBJECT))
      189     7138    7                                 THEN DO;

      190     7139                                          %DUP_STATS;

   7140  1 000373   000000 236000 xsym               LDQ     VX_ERRORS
         1 000374   000001 036007                    ADLQ    1,DL
         1 000375   000000 756000 xsym               STQ     VX_ERRORS

      191     7142                                          %CHECK( SEV = @MULTIPLE );

   7143  1 000376   000000 235000 xsym               LDA     VX_ERR_SEV
         1 000377   000004 115007                    CMPA    4,DL
         1 000400   000403 603000 1                  TRC     s:7145

   7143  1 000401   000004 235007                    LDA     4,DL
         1 000402   000000 755000 xsym               STA     VX_ERR_SEV

      192     7145    7                                     VX_RU_HEAD.MAP_BITS_A.MULTIPLE(J1) = '1'B
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:61   
              7145                                              /*@TRUE_B*/;

   7145  1 000403   200050 235100                    LDA     J1,,AUTO
         1 000404   000002 735000                    ALS     2
         1 000405   003005 060400                    CSL     bolr='003'O
         1 000406   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         1 000407   000011 200001 xsym               BDSC    VX_RU_HEAD+9,A           by=1,bit=0,n=1

      193     7146    7                                     IF RTYPE~=%TYPEDEF AND BIN_RESULT$->VXD$TMPLT.
              7146                                              CONSTNT

   7146  1 000410   200044 235100                    LDA     RTYPE,,AUTO
         1 000411   000004 115007                    CMPA    4,DL
         1 000412   000422 600000 1                  TZE     s:7148
         1 000413   200067 470500                    LDP0    BIN_RESULT$,,AUTO
         1 000414   000001 236100                    LDQ     1,,PR0
         1 000415   400000 316007                    CANQ    -131072,DL
         1 000416   000422 600000 1                  TZE     s:7148

      194     7147    7                                     THEN BIN_RESULT$->VXD$TMPLT.LFLAGS.MULTIPLE='1'B;

   7147  1 000417   200000 236007                    LDQ     65536,DL
         1 000420   000001 256100                    ORSQ    1,,PR0
         1 000421   000425 710000 1                  TRA     s:7150

      195     7148    7                                     ELSE BIN_RESULT$->VXD$TMPLT.AD.LFLAGS.MULTIPLE=
              7148                                              '1'B;

   7148  1 000422   200067 470500                    LDP0    BIN_RESULT$,,AUTO
         1 000423   020000 236003                    LDQ     8192,DU
         1 000424   000000 256100                    ORSQ    0,,PR0

      196     7149    7                                    END;

      197     7150    6                             CALL MOVE(P$,STOP_P$,VX_CURR$->VX$NODE.NUM,BIN_RESULT$,
              7150                                      CURR$->VX$NODE.NUM);

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:62   
   7150  1 000425   200021 236100                    LDQ     CURR$,,AUTO
         1 000426   000010 036003                    ADLQ    8,DU
         1 000427   200101 756100                    STQ     @RESULT$+1,,AUTO
         1 000430   200067 630500                    EPPR0   BIN_RESULT$,,AUTO
         1 000431   200100 450500                    STP0    @NODE#+1,,AUTO
         1 000432   000000 236000 xsym               LDQ     VX_CURR$
         1 000433   000010 036003                    ADLQ    8,DU
         1 000434   200077 756100                    STQ     @STOP$+1,,AUTO
         1 000435   200036 631500                    EPPR1   STOP_P$,,AUTO
         1 000436   200076 451500                    STP1    @START$+1,,AUTO
         1 000437   200016 633500                    EPPR3   P$,,AUTO
         1 000440   200075 453500                    STP3    BIN_N$+5,,AUTO
         1 000441   001202 701000 1                  TSX1    MOVE
         1 000442   000000 011000                    NOP     0

      198     7151        /**/
      199     7152    6                             GOTO SET_NEXT_P;

   7152  1 000443   001052 710000 1                  TRA     SET_NEXT_P

      200     7153    6                            END;           /* If ABOVE_OBJECT then do; */
      201     7154        /**/
      202     7155        /**/
      203     7156        /**/
      204     7157    6                         ELSE DO;

      205     7158    6                             ABOVE_PREC = SYM_PREC(ABOVE_VALUE);

   7158  1 000444   000000 235005 0                  LDA     SYM_PREC,AL
         1 000445   200055 755100                    STA     ABOVE_PREC,,AUTO

      206     7159    7                             IF ABOVE_PREC >= SYM_PREC(BELOW_VALUE) THEN DO;

   7159  1 000446   200054 720100                    LXL0    BELOW_VALUE,,AUTO
         1 000447   200055 236100                    LDQ     ABOVE_PREC,,AUTO
         1 000450   000000 116010 0                  CMPQ    SYM_PREC,X0
         1 000451   000456 602000 1                  TNC     s:7164
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:63   

      207     7160    7                                 CURRENT_PREC = ABOVE_PREC;

   7160  1 000452   200056 756100                    STQ     CURRENT_PREC,,AUTO

      208     7161    7                                 HOLD$ = BIN_RESULT$;

   7161  1 000453   200067 236100                    LDQ     BIN_RESULT$,,AUTO
         1 000454   200037 756100                    STQ     HOLD$,,AUTO

      209     7162    7                                END;

   7162  1 000455   000462 710000 1                  TRA     s:7167

      210     7163    7                             ELSE DO;

      211     7164    7                                 CURRENT_PREC = SYM_PREC(BELOW_VALUE);

   7164  1 000456   000000 235010 0                  LDA     SYM_PREC,X0
         1 000457   200056 755100                    STA     CURRENT_PREC,,AUTO

      212     7165    7                                 HOLD$ = P$;

   7165  1 000460   200016 236100                    LDQ     P$,,AUTO
         1 000461   200037 756100                    STQ     HOLD$,,AUTO

      213     7166    7                                END;

      214     7167    6                             SEC_CURR$ = CURR$;

   7167  1 000462   200021 236100                    LDQ     CURR$,,AUTO
         1 000463   200022 756100                    STQ     SEC_CURR$,,AUTO

      215     7168    6   SEC_CHECK_DOWN_PATH:
      216     7169        /**/
      217     7170    6                             SEC_CURR$ = SEC_CURR$ -> VX$NODE.PATH$;

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:64   
   7170  1 000464   200022 470500       SEC_CHECK_D* LDP0    SEC_CURR$,,AUTO
         1 000465   000003 236100                    LDQ     3,,PR0
         1 000466   200022 756100                    STQ     SEC_CURR$,,AUTO

      218     7171    7                             IF SEC_CURR$ = VX_CURR$ THEN DO;

   7171  1 000467   000000 116000 xsym               CMPQ    VX_CURR$
         1 000470   000501 601000 1                  TNZ     s:7178

      219     7172    7                                 IF ABOVE_PREC >= CURRENT_PREC THEN

   7172  1 000471   200055 236100                    LDQ     ABOVE_PREC,,AUTO
         1 000472   200056 116100                    CMPQ    CURRENT_PREC,,AUTO
         1 000473   000353 603000 1                  TRC     MOVE_ABOVE_TO_BELOW

      220     7173    7                                     GOTO MOVE_ABOVE_TO_BELOW;
      221     7174    7                                 SEC_RESULT$ = HOLD$;

   7174  1 000474   200037 236100                    LDQ     HOLD$,,AUTO
         1 000475   200023 756100                    STQ     SEC_RESULT$,,AUTO

      222     7175    7                                 BY_PASS='1'B;

   7175  1 000476   400000 236003                    LDQ     -131072,DU
         1 000477   200014 756100                    STQ     BY_PASS,,AUTO

      223     7176    7                                 GOTO MOVE_BELOW_2_ABOVE;

   7176  1 000500   000671 710000 1                  TRA     MOVE_BELOW_2_ABOVE

      224     7177    7                                END;
      225     7178    6                             BIN_START$ = SEC_CURR$ -> VX$NODE.L_START_A$(RTYPE);

   7178  1 000501   200022 470500                    LDP0    SEC_CURR$,,AUTO
         1 000502   200044 720100                    LXL0    RTYPE,,AUTO
         1 000503   000030 236110                    LDQ     24,X0,PR0
         1 000504   200065 756100                    STQ     BIN_START$,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:65   

      226     7179    6                             BIN_STOP$  = SEC_CURR$ -> VX$NODE.L_STOP_A$(RTYPE);

   7179  1 000505   000042 236110                    LDQ     34,X0,PR0
         1 000506   200066 756100                    STQ     BIN_STOP$,,AUTO

      227     7180    6                             BIN_N$ = SEC_CURR$ -> VX$NODE.L_START.DN$;

   7180  1 000507   000031 236100                    LDQ     25,,PR0
         1 000510   200070 756100                    STQ     BIN_N$,,AUTO

      228     7181        /* Search defs */
      229     7182                                  %BIN_SEARCH(
      230     7183                                  START$=BIN_START$,
      231     7184                                  STOP$=BIN_STOP$,
      232     7185                                  RESULT$=SEC_RESULT$,
      233     7186                                  N$=BIN_N$,
      234     7187                                  MATCH$=PN$,
      235     7188                                  NAME_DISP=2,
      236     7189                                  SIZE="SIZEW(VXD$TMPLT)",
      237     7190                                  NEG=%@COMMENT,
      238     7191                                  GEN=%@TNEMMOC,
      239     7192                                  SPLIT=BIN_SPLIT_SEC,
      240     7193                                  FOUND=BIN_FOUND_SEC,
      241     7194                                  CHECK=BIN_CHECK_SEC,
      242     7195                                  ALTRETURN=SEC_CHECK_DOWN_PATH,
      243     7196                                  EMPTY=SEC_CHECK_DOWN_PATH);
              7198    6           IF BIN_START$ = ADDR(NIL) THEN GOTO SEC_CHECK_DOWN_PATH;

   7198  1 000511   200065 236100                    LDQ     BIN_START$,,AUTO
         1 000512   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000513   000464 600000 1                  TZE     SEC_CHECK_DOWN_PATH

              7199    7           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;

   7199  1 000514   200065 235100                    LDA     BIN_START$,,AUTO
         1 000515   000022 771000                    ARL     18
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:66   
         1 000516   200110 755100                    STA     SECTNUM$+2,,AUTO
         1 000517   200066 236100                    LDQ     BIN_STOP$,,AUTO
         1 000520   000022 772000                    QRL     18
         1 000521   200110 136100                    SBLQ    SECTNUM$+2,,AUTO
         1 000522   000002 506007                    DIV     2,DL
         1 000523   000021 116007                    CMPQ    17,DL
         1 000524   000560 605000 1                  TPL     s:7216

              7200    7              SEC_RESULT$ = BIN_START$;        /* Sequential search                 */

   7200  1 000525   200065 236100                    LDQ     BIN_START$,,AUTO
         1 000526   200023 756100                    STQ     SEC_RESULT$,,AUTO

              7201    8              DO WHILE( SEC_RESULT$ <= BIN_STOP$ );

   7201  1 000527   200066 116100                    CMPQ    BIN_STOP$,,AUTO
         1 000530   000532 600000 1                  TZE     s:7202
         1 000531   000557 603000 1                  TRC     s:7213

              7202    8                 BIN_NTEMP$ = PINCRW( BIN_N$, SEC_RESULT$ -> VX$TMPLT.A(2) );

   7202  1 000532   200023 470500                    LDP0    SEC_RESULT$,,AUTO
         1 000533   000001 220100                    LDX0    1,,PR0
         1 000534   000000 636010                    EAQ     0,X0
         1 000535   200070 036100                    ADLQ    BIN_N$,,AUTO
         1 000536   200063 756100                    STQ     BIN_NTEMP$,,AUTO

              7203    8                 IF BIN_NTEMP$ -> B$DNAME.TEXT

   7203  1 000537   200063 471500                    LDP1    BIN_NTEMP$,,AUTO
         1 000540   100000 221100                    LDX1    0,,PR1
         1 000541   200026 473500                    LDP3    PN$,,AUTO
         1 000542   300000 222100                    LDX2    0,,PR3
         1 000543   040140 106540                    CMPC    fill='040'O
         1 000544   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         1 000545   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         1 000546   000551 602000 1                  TNC     s:7211
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:67   

              7204    8                   >=
              7205    9                   PN$ -> B$DNAME.TEXT THEN DO;

              7206    9                    IF BIN_NTEMP$ -> B$DNAME.TEXT

   7206  1 000547   000635 600000 1                  TZE     BIN_FOUND_SEC

              7207    9                      =
              7208    9                      PN$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND_SEC;
              7209    9                    ELSE GOTO SEC_CHECK_DOWN_PATH;

   7209  1 000550   000464 710000 1                  TRA     SEC_CHECK_DOWN_PATH

              7210    9                    END;
              7211    8                 SEC_RESULT$ = PINCRW( SEC_RESULT$, SIZEW(VXD$TMPLT) );

   7211  1 000551   200023 236100                    LDQ     SEC_RESULT$,,AUTO
         1 000552   000002 036003                    ADLQ    2,DU
         1 000553   200023 756100                    STQ     SEC_RESULT$,,AUTO

              7212    8                 END;                      /* Do while                           */

   7212  1 000554   200066 116100                    CMPQ    BIN_STOP$,,AUTO
         1 000555   000532 602000 1                  TNC     s:7202
         1 000556   000532 600000 1                  TZE     s:7202

              7213    7              GOTO SEC_CHECK_DOWN_PATH;

   7213  1 000557   000464 710000 1                  TRA     SEC_CHECK_DOWN_PATH

              7214    7              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
              7215    7           ELSE DO;                        /* Binary search                      */

              7216    7              BIN_LOW = 0;

   7216  1 000560   200060 450100                    STZ     BIN_LOW,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:68   

              7217    7              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;

   7217  1 000561   200065 235100                    LDA     BIN_START$,,AUTO
         1 000562   000022 771000                    ARL     18
         1 000563   200110 755100                    STA     SECTNUM$+2,,AUTO
         1 000564   200066 236100                    LDQ     BIN_STOP$,,AUTO
         1 000565   000022 772000                    QRL     18
         1 000566   200110 136100                    SBLQ    SECTNUM$+2,,AUTO
         1 000567   000002 506007                    DIV     2,DL
         1 000570   000002 036007                    ADLQ    2,DL
         1 000571   200061 756100                    STQ     BIN_HIGH,,AUTO

              7218    7              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );

   7218  1 000572   200065 236100                    LDQ     BIN_START$,,AUTO
         1 000573   777776 036003                    ADLQ    -2,DU
         1 000574   200064 756100                    STQ     BIN_START1$,,AUTO

   7218  1 000575                       BIN_SPLIT_S* null
              7219    7   BIN_SPLIT_SEC:     ;
              7220    7              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

   7220  1 000575   200060 236100                    LDQ     BIN_LOW,,AUTO
         1 000576   200061 036100                    ADLQ    BIN_HIGH,,AUTO
         1 000577   000001 772000                    QRL     1
         1 000600   200062 756100                    STQ     BIN_MID,,AUTO

              7221    7              SEC_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );

   7221  1 000601   000023 736000                    QLS     19
         1 000602   200064 036100                    ADLQ    BIN_START1$,,AUTO
         1 000603   200023 756100                    STQ     SEC_RESULT$,,AUTO

              7222    7              BIN_NTEMP$ = PINCRW( BIN_N$, SEC_RESULT$ -> VX$TMPLT.A(2) );

   7222  1 000604   200023 470500                    LDP0    SEC_RESULT$,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:69   
         1 000605   000001 220100                    LDX0    1,,PR0
         1 000606   000000 636010                    EAQ     0,X0
         1 000607   200070 036100                    ADLQ    BIN_N$,,AUTO
         1 000610   200063 756100                    STQ     BIN_NTEMP$,,AUTO

              7223    7              IF BIN_NTEMP$ -> B$DNAME.TEXT

   7223  1 000611   200063 471500                    LDP1    BIN_NTEMP$,,AUTO
         1 000612   100000 221100                    LDX1    0,,PR1
         1 000613   200026 473500                    LDP3    PN$,,AUTO
         1 000614   300000 222100                    LDX2    0,,PR3
         1 000615   040140 106540                    CMPC    fill='040'O
         1 000616   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         1 000617   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         1 000620   000624 603000 1                  TRC     s:7229

              7224    7                <
              7225    8                PN$ -> B$DNAME.TEXT THEN DO;

              7226    8                 BIN_LOW = BIN_MID;

   7226  1 000621   200062 235100                    LDA     BIN_MID,,AUTO
         1 000622   200060 755100                    STA     BIN_LOW,,AUTO

              7227    8                 GOTO BIN_CHECK_SEC;

   7227  1 000623   000630 710000 1                  TRA     BIN_CHECK_SEC

              7228    8                 END;
              7229    7              IF BIN_NTEMP$ -> B$DNAME.TEXT

   7229  1 000624   000635 602000 1                  TNC     BIN_FOUND_SEC
         1 000625   000635 600000 1                  TZE     BIN_FOUND_SEC

              7230    7                >
              7231    8                PN$ -> B$DNAME.TEXT THEN DO;

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:70   
              7232    8                 BIN_HIGH = BIN_MID;

   7232  1 000626   200062 235100                    LDA     BIN_MID,,AUTO
         1 000627   200061 755100                    STA     BIN_HIGH,,AUTO

   7232  1 000630                       BIN_CHECK_S* null
              7233    8   BIN_CHECK_SEC:        ;
              7234    8                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_SEC;

   7234  1 000630   200060 236100                    LDQ     BIN_LOW,,AUTO
         1 000631   000001 036007                    ADLQ    1,DL
         1 000632   200061 116100                    CMPQ    BIN_HIGH,,AUTO
         1 000633   000575 602000 1                  TNC     BIN_SPLIT_SEC

              7235                                                /* Here => looping or not found       */
              7236                                      /* Result -> < match => a boundary condition    */
              7237    8                 %@COMMENT
              7238    8                   IF PINCRW( BIN_N$, SEC_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
              7239    8                   <
              7240    8                   PN$ -> B$DNAME.TEXT THEN SEC_RESULT$ = PINCRW( SEC_RESULT$, SIZEW(
              7240                            VXD$TMPLT) );
              7241    8                 %@TNEMMOC
              7242    8                   GOTO SEC_CHECK_DOWN_PATH;

   7242  1 000634   000464 710000 1                  TRA     SEC_CHECK_DOWN_PATH

              7243    8                 END;
              7244    7              END;                         /* Else do;                           */
              7245    6   BIN_FOUND_SEC:
              7246        /* Here -> found */
      244     7248        /* Here => found */
      245     7249    6                             CALL GET_VALS(SEC_RESULT$,BELOW_VALUE,BELOW_MULT);

   7249  1 000635   200004 634500       BIN_FOUND_S* EPPR4   BELOW_MULT,,AUTO
         1 000636   200077 454500                    STP4    @STOP$+1,,AUTO
         1 000637   200054 635500                    EPPR5   BELOW_VALUE,,AUTO
         1 000640   200076 455500                    STP5    @START$+1,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:71   
         1 000641   200023 636500                    EPPR6   SEC_RESULT$,,AUTO
         1 000642   200075 456500                    STP6    BIN_N$+5,,AUTO
         1 000643   001137 701000 1                  TSX1    GET_VALS
         1 000644   000000 011000                    NOP     0

      246     7250    7                             DO CASE(BELOW_VALUE);

   7250  1 000645   200054 235100                    LDA     BELOW_VALUE,,AUTO
         1 000646   000006 115007                    CMPA    6,DL
         1 000647   000651 602005 1                  TNC     s:7250+4,AL
         1 000650   000660 710000 1                  TRA     s:7255
         1 000651   000671 710000 1                  TRA     MOVE_BELOW_2_ABOVE
         1 000652   000660 710000 1                  TRA     s:7255
         1 000653   000660 710000 1                  TRA     s:7255
         1 000654   000671 710000 1                  TRA     MOVE_BELOW_2_ABOVE
         1 000655   000660 710000 1                  TRA     s:7255
         1 000656   000657 710000 1                  TRA     s:7252

      247     7251    7                               CASE(%SOURCE_REMOVED#);

      248     7252    7                                 GOTO SEC_CHECK_DOWN_PATH;

   7252  1 000657   000464 710000 1                  TRA     SEC_CHECK_DOWN_PATH

      249     7253    7                               CASE(%SOURCE_OBJECT#,%SOURCE_ULIB#);

      250     7254    7                               CASE(ELSE);

      251     7255    8                                 IF SYM_PREC(VALUE) > CURRENT_PREC THEN DO;

   7255  1 000660   200045 720100                    LXL0    VALUE,,AUTO
         1 000661   200056 236100                    LDQ     CURRENT_PREC,,AUTO
         1 000662   000000 116010 0                  CMPQ    SYM_PREC,X0
         1 000663   000670 603000 1                  TRC     s:7259

      252     7256    8                                     CURRENT_PREC = SYM_PREC(VALUE);

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:72   
   7256  1 000664   000000 235010 0                  LDA     SYM_PREC,X0
         1 000665   200056 755100                    STA     CURRENT_PREC,,AUTO

      253     7257    8                                     HOLD$ = SEC_RESULT$;

   7257  1 000666   200023 236100                    LDQ     SEC_RESULT$,,AUTO
         1 000667   200037 756100                    STQ     HOLD$,,AUTO

      254     7258    8                                    END;

      255     7259    7                                 GOTO SEC_CHECK_DOWN_PATH;

   7259  1 000670   000464 710000 1                  TRA     SEC_CHECK_DOWN_PATH

      256     7260    7                               END;

      257     7261        /**/
      258     7262        /*
      259     7263              Here => found an intermediary
      260     7264        */
      261     7265        /**/
      262     7266    6   MOVE_BELOW_2_ABOVE:
      263     7267    6                             IF ABOVE_MULT ~= BELOW_MULT THEN VX_ERRORS.MULTIPLE =
              7267                                      VX_ERRORS.MULTIPLE + 1;

   7267  1 000671   200003 236100       MOVE_BELOW_* LDQ     ABOVE_MULT,,AUTO
         1 000672   200004 676100                    ERQ     BELOW_MULT,,AUTO
         1 000673   400000 376003                    ANQ     -131072,DU
         1 000674   000700 600000 1                  TZE     s:7268

   7267  1 000675   000000 235000 xsym               LDA     VX_ERRORS
         1 000676   000001 035007                    ADLA    1,DL
         1 000677   000000 755000 xsym               STA     VX_ERRORS

      264     7268    7                             IF ABOVE_MULT AND NOT BELOW_MULT THEN DO;

   7268  1 000700   200003 234100                    SZN     ABOVE_MULT,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:73   
         1 000701   000721 605000 1                  TPL     s:7277
         1 000702   200004 234100                    SZN     BELOW_MULT,,AUTO
         1 000703   000721 604000 1                  TMI     s:7277

      265     7269    8                                 IF RTYPE ~= %TYPEDEF AND SEC_RESULT$ -> VXD$TMPLT.
              7269                                          CONSTNT THEN DO;

   7269  1 000704   200044 235100                    LDA     RTYPE,,AUTO
         1 000705   000004 115007                    CMPA    4,DL
         1 000706   000716 600000 1                  TZE     s:7273
         1 000707   200023 470500                    LDP0    SEC_RESULT$,,AUTO
         1 000710   000001 236100                    LDQ     1,,PR0
         1 000711   400000 316007                    CANQ    -131072,DL
         1 000712   000716 600000 1                  TZE     s:7273

      266     7270    8                                     SEC_RESULT$ -> VXD$TMPLT.LFLAGS.MULTIPLE = '1'B
              7270                                              /*@TRUE_B*/;

   7270  1 000713   200000 236007                    LDQ     65536,DL
         1 000714   000001 256100                    ORSQ    1,,PR0

      267     7271    8                                    END;

   7271  1 000715   000721 710000 1                  TRA     s:7277

      268     7272    8                                 ELSE DO;

      269     7273    8                                    SEC_RESULT$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE = '1'B
              7273                                              /*@TRUE_B*/;

   7273  1 000716   200023 470500                    LDP0    SEC_RESULT$,,AUTO
         1 000717   020000 236003                    LDQ     8192,DU
         1 000720   000000 256100                    ORSQ    0,,PR0

      270     7274    8                                    END;
              7274                    /* If rtype ~= typedef and SEC_RESULT$ -> VXD$TMPLT.CONSTNT then do; */

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:74   
      271     7275
      272     7276    7                                END;   /* if ABOVE_MULT and ~BELOW_MULT then do */

      273     7277    6                             FIRST_START$ = BIN_RESULT$;

   7277  1 000721   200067 236100                    LDQ     BIN_RESULT$,,AUTO
         1 000722   200032 756100                    STQ     FIRST_START$,,AUTO

      274     7278    6                             FIRST_STOP$ = BIN_RESULT$;

   7278  1 000723   200033 756100                    STQ     FIRST_STOP$,,AUTO

      275     7279    6                             FINISHED = '0'B/*@FALSE_B*/;

   7279  1 000724   200015 450100                    STZ     FINISHED,,AUTO

      276     7280    7                             DO WHILE ( NOT FINISHED );

   7280  1 000725   000756 710000 1                  TRA     s:7290

      277     7281    7                                 IF FIRST_START$ = BIN_START$ THEN

   7281  1 000726   200032 236100                    LDQ     FIRST_START$,,AUTO
         1 000727   200065 116100                    CMPQ    BIN_START$,,AUTO
         1 000730   000734 601000 1                  TNZ     s:7284

      278     7282    7                                     FINISHED = '1'B/*@TRUE_B*/;

   7282  1 000731   400000 236003                    LDQ     -131072,DU
         1 000732   200015 756100                    STQ     FINISHED,,AUTO
         1 000733   000756 710000 1                  TRA     s:7290

      279     7283    8                                 ELSE DO;

      280     7284    8                                     R$ = PINCRW(FIRST_START$, -SIZEW(VXD$TMPLT) );

   7284  1 000734   777776 036003                    ADLQ    -2,DU
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:75   
         1 000735   200020 756100                    STQ     R$,,AUTO

      281     7285    8                                     IF PINCRW(BIN_N$, R$ -> VXD$TMPLT.NPOINTER)

   7285  1 000736   200020 470500                    LDP0    R$,,AUTO
         1 000737   000001 220100                    LDX0    1,,PR0
         1 000740   200070 471500                    LDP1    BIN_N$,,AUTO
         1 000741   100000 221110                    LDX1    0,X0,PR1
         1 000742   200026 473500                    LDP3    PN$,,AUTO
         1 000743   300000 222100                    LDX2    0,,PR3
         1 000744   000000 635010                    EAA     0,X0
         1 000745   000020 731000                    ARS     16
         1 000746   040140 106545                    CMPC    fill='040'O
         1 000747   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         1 000750   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         1 000751   000754 601000 1                  TNZ     s:7288

      282     7286    8                                             -> B$DNAME.TEXT = PN$ -> B$DNAME.TEXT
      283     7287    8                                     THEN FIRST_START$ = R$;

   7287  1 000752   200032 756100                    STQ     FIRST_START$,,AUTO
         1 000753   000756 710000 1                  TRA     s:7290

      284     7288    8                                     ELSE FINISHED = '1'B/*@TRUE_B*/;

   7288  1 000754   400000 236003                    LDQ     -131072,DU
         1 000755   200015 756100                    STQ     FINISHED,,AUTO

      285     7289    8                                    END;

      286     7290    7                                END;       /* do while( ~finished ) */

   7290  1 000756   200015 234100                    SZN     FINISHED,,AUTO
         1 000757   000726 605000 1                  TPL     s:7281

      287     7291    6                             FINISHED = '0'B/*@FALSE_B*/;

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:76   
   7291  1 000760   200015 450100                    STZ     FINISHED,,AUTO

      288     7292    7                             DO WHILE ( NOT FINISHED );

   7292  1 000761   001012 710000 1                  TRA     s:7302

      289     7293    7                                 IF FIRST_STOP$ = BIN_STOP$ THEN

   7293  1 000762   200033 236100                    LDQ     FIRST_STOP$,,AUTO
         1 000763   200066 116100                    CMPQ    BIN_STOP$,,AUTO
         1 000764   000770 601000 1                  TNZ     s:7296

      290     7294    7                                     FINISHED = '1'B/*@TRUE_B*/;

   7294  1 000765   400000 236003                    LDQ     -131072,DU
         1 000766   200015 756100                    STQ     FINISHED,,AUTO
         1 000767   001012 710000 1                  TRA     s:7302

      291     7295    8                                 ELSE DO;

      292     7296    8                                     R$ = PINCRW(FIRST_STOP$, SIZEW(VXD$TMPLT) );

   7296  1 000770   000002 036003                    ADLQ    2,DU
         1 000771   200020 756100                    STQ     R$,,AUTO

      293     7297    8                                     IF PINCRW(BIN_N$, R$ -> VXD$TMPLT.NPOINTER)

   7297  1 000772   200020 470500                    LDP0    R$,,AUTO
         1 000773   000001 220100                    LDX0    1,,PR0
         1 000774   200070 471500                    LDP1    BIN_N$,,AUTO
         1 000775   100000 221110                    LDX1    0,X0,PR1
         1 000776   200026 473500                    LDP3    PN$,,AUTO
         1 000777   300000 222100                    LDX2    0,,PR3
         1 001000   000000 635010                    EAA     0,X0
         1 001001   000020 731000                    ARS     16
         1 001002   040140 106545                    CMPC    fill='040'O
         1 001003   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:77   
         1 001004   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         1 001005   001010 601000 1                  TNZ     s:7300

      294     7298    8                                             -> B$DNAME.TEXT = PN$ -> B$DNAME.TEXT
      295     7299    8                                     THEN FIRST_STOP$ = R$;

   7299  1 001006   200033 756100                    STQ     FIRST_STOP$,,AUTO
         1 001007   001012 710000 1                  TRA     s:7302

      296     7300    8                                     ELSE FINISHED = '1'B/*@TRUE_B*/;

   7300  1 001010   400000 236003                    LDQ     -131072,DU
         1 001011   200015 756100                    STQ     FINISHED,,AUTO

      297     7301    8                                    END;

      298     7302    7                                END;       /* do while( ~finished )  */

   7302  1 001012   200015 234100                    SZN     FINISHED,,AUTO
         1 001013   000762 605000 1                  TPL     s:7293

      299     7303
      300     7304
      301     7305    6                             CALL MOVE(FIRST_START$,FIRST_STOP$,CURR$->VX$NODE.NUM,
              7305                                      SEC_RESULT$,SEC_CURR$->VX$NODE.NUM);

   7305  1 001014   200022 236100                    LDQ     SEC_CURR$,,AUTO
         1 001015   000010 036003                    ADLQ    8,DU
         1 001016   200101 756100                    STQ     @RESULT$+1,,AUTO
         1 001017   200023 630500                    EPPR0   SEC_RESULT$,,AUTO
         1 001020   200100 450500                    STP0    @NODE#+1,,AUTO
         1 001021   200021 236100                    LDQ     CURR$,,AUTO
         1 001022   000010 036003                    ADLQ    8,DU
         1 001023   200077 756100                    STQ     @STOP$+1,,AUTO
         1 001024   200033 631500                    EPPR1   FIRST_STOP$,,AUTO
         1 001025   200076 451500                    STP1    @START$+1,,AUTO
         1 001026   200032 633500                    EPPR3   FIRST_START$,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:78   
         1 001027   200075 453500                    STP3    BIN_N$+5,,AUTO
         1 001030   001202 701000 1                  TSX1    MOVE
         1 001031   000000 011000                    NOP     0

      302     7306    6                             CALL GET_VALS(P$,BELOW_VALUE,BELOW_MULT);

   7306  1 001032   200004 630500                    EPPR0   BELOW_MULT,,AUTO
         1 001033   200077 450500                    STP0    @STOP$+1,,AUTO
         1 001034   200054 631500                    EPPR1   BELOW_VALUE,,AUTO
         1 001035   200076 451500                    STP1    @START$+1,,AUTO
         1 001036   200016 633500                    EPPR3   P$,,AUTO
         1 001037   200075 453500                    STP3    BIN_N$+5,,AUTO
         1 001040   001137 701000 1                  TSX1    GET_VALS
         1 001041   000000 011000                    NOP     0

      303     7307    6                             BELOW_OBJECT=ABOVE_OBJECT;

   7307  1 001042   200005 236100                    LDQ     ABOVE_OBJECT,,AUTO
         1 001043   400000 376003                    ANQ     -131072,DU
         1 001044   200006 756100                    STQ     BELOW_OBJECT,,AUTO

      304     7308        /**/
      305     7309    6                             GOTO BIN_FOUND_AGAIN;

   7309  1 001045   000316 710000 1                  TRA     BIN_FOUND_AGAIN

      306     7310    6                            END;
      307     7311        /**/
      308     7312        /**/
      309     7313    5   NO_DUPS_THIS_ANCESTOR_IN_DEFS:
      310     7314    5                         CURR$ = CURR$ -> VX$NODE.PATH$; /* Move down and go check */

   7314  1 001046   200021 470500       NO_DUPS_THI* LDP0    CURR$,,AUTO
         1 001047   000003 236100                    LDQ     3,,PR0
         1 001050   200021 756100                    STQ     CURR$,,AUTO

      311     7315    5                         GOTO CHECK_DOWN_PATH;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:79   

   7315  1 001051   000156 710000 1                  TRA     CHECK_DOWN_PATH

      312     7316        %EJECT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:80   
      313     7317    5   SET_NEXT_P:
      314     7318    5                         P$ = NEXT_P$;

   7318  1 001052   200035 236100       SET_NEXT_P   LDQ     NEXT_P$,,AUTO
         1 001053   200016 756100                    STQ     P$,,AUTO

      315     7319    5                        END;               /* Do while( P$ <= STOP$ ) */

   7319  1 001054   200031 116100                    CMPQ    STOP$,,AUTO
         1 001055   000052 602000 1                  TNC     s:7018
         1 001056   000052 600000 1                  TZE     s:7018

      316     7320    4                    END;                   /* If VX_NODE_NUMBER > 0 then do; */

      317     7321    3                 SIZE = VX_CURR$ -> VX$NODE.L_SIZE_A(RTYPE);

   7321  1 001057   000000 470400 xsym               LDP0    VX_CURR$
         1 001060   200044 720100                    LXL0    RTYPE,,AUTO
         1 001061   000054 235110                    LDA     44,X0,PR0
         1 001062   200047 755100                    STA     SIZE,,AUTO

      318     7322    3                 CALL VXK$KEY( 1/*@RF*/, RTYPE, VX_CURR$ -> VX$NODE.NUM, 0 );

   7322  1 001063   000000 236000 2                  LDQ     0
         1 001064   200113 756100                    STQ     SECTNUM$+5,,AUTO
         1 001065   000000 236000 xsym               LDQ     VX_CURR$
         1 001066   000010 036003                    ADLQ    8,DU
         1 001067   200112 756100                    STQ     SECTNUM$+4,,AUTO
         1 001070   200044 631500                    EPPR1   RTYPE,,AUTO
         1 001071   200111 451500                    STP1    SECTNUM$+3,,AUTO
         1 001072   000001 236000 2                  LDQ     1
         1 001073   200110 756100                    STQ     SECTNUM$+2,,AUTO
         1 001074   200110 630500                    EPPR0   SECTNUM$+2,,AUTO
         1 001075   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001076   000000 701000 xent               TSX1    VXK$KEY
         1 001077   000000 011000                    NOP     0

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:81   
      319     7323    3                 CALL VXI$WRITE( 1/*@RF*/,

   7323  1 001100   000001 236000 2                  LDQ     1
         1 001101   200113 756100                    STQ     SECTNUM$+5,,AUTO
         1 001102   200047 630500                    EPPR0   SIZE,,AUTO
         1 001103   200112 450500                    STP0    SECTNUM$+4,,AUTO
         1 001104   200044 236100                    LDQ     RTYPE,,AUTO
         1 001105   000022 736000                    QLS     18
         1 001106   000030 036003                    ADLQ    24,DU
         1 001107   000000 036000 xsym               ADLQ    VX_CURR$
         1 001110   000001 235000 2                  LDA     1
         1 001111   200110 757100                    STAQ    SECTNUM$+2,,AUTO
         1 001112   200110 630500                    EPPR0   SECTNUM$+2,,AUTO
         1 001113   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001114   000000 701000 xent               TSX1    VXI$WRITE
         1 001115   000000 011000                    NOP     0

      320     7324    3                         VX_CURR$ -> VX$NODE.L_START_A$(RTYPE),
      321     7325    3                         SIZE,
      322     7326    3                         1/*@RF*/ );
      323     7327    3                 CALL VXF$FREE( VX_PASS1_ALL_TYPE(RTYPE), SIZE, 1 );

   7327  1 001116   000001 236000 2                  LDQ     1
         1 001117   200112 756100                    STQ     SECTNUM$+4,,AUTO
         1 001120   200047 630500                    EPPR0   SIZE,,AUTO
         1 001121   200111 450500                    STP0    SECTNUM$+3,,AUTO
         1 001122   200044 720100                    LXL0    RTYPE,,AUTO
         1 001123   000000 631410 xsym               EPPR1   VX_PASS1_ALL_TYPE,X0
         1 001124   200110 451500                    STP1    SECTNUM$+2,,AUTO
         1 001125   200110 630500                    EPPR0   SECTNUM$+2,,AUTO
         1 001126   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001127   000000 701000 xent               TSX1    VXF$FREE
         1 001130   000000 011000                    NOP     0

      324     7328    3                END;                       /* If do */

      325     7329    2            END;                           /* Do j = 1 to SIZEW...*/
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:82   

   7329  1 001131   200041 235100                    LDA     J,,AUTO
         1 001132   000001 035007                    ADLA    1,DL
         1 001133   200041 755100                    STA     J,,AUTO
         1 001134   000004 115007                    CMPA    4,DL
         1 001135   000030 602000 1                  TNC     s:7011

      326     7330    1         RETURN;

   7330  1 001136   000000 702200 xent               TSX2  ! X66_ARET

      327     7331        %EJECT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:83   
      328     7332    1   GET_VALS: PROC(DEF$,VALUE,MULT);

   7332  1 001137   200074 741300       GET_VALS     STX1  ! BIN_N$+4,,AUTO

      329     7333
      330     7334    2   DCL DEF$      PTR;
      331     7335    2   DCL VALUE     UBIN;
      332     7336    2   DCL MULT      BIT(1) ALIGNED;
      333     7337
      334     7338    2         IF RTYPE~=%TYPEDEF AND DEF$->VXD$TMPLT.CONSTNT

   7338  1 001140   200044 235100                    LDA     RTYPE,,AUTO
         1 001141   000004 115007                    CMPA    4,DL
         1 001142   001164 600000 1                  TZE     s:7344
         1 001143   200075 470500                    LDP0    @DEF$,,AUTO
         1 001144   000000 471500                    LDP1    0,,PR0
         1 001145   100001 236100                    LDQ     1,,PR1
         1 001146   400000 316007                    CANQ    -131072,DL
         1 001147   001164 600000 1                  TZE     s:7344

      335     7339    3         THEN DO;

      336     7340    3             VALUE=DEF$->VXD$TMPLT.LFLAGS.SOURCE;

   7340  1 001150   200076 473500                    LDP3    @VALUE,,AUTO
         1 001151   100001 236100                    LDQ     1,,PR1
         1 001152   000013 772000                    QRL     11
         1 001153   000017 376007                    ANQ     15,DL
         1 001154   300000 756100                    STQ     0,,PR3

      337     7341    3             MULT =DEF$->VXD$TMPLT.LFLAGS.MULTIPLE;

   7341  1 001155   000000 471500                    LDP1    0,,PR0
         1 001156   100001 236100                    LDQ     1,,PR1
         1 001157   000023 736000                    QLS     19
         1 001160   400000 376003                    ANQ     -131072,DU
         1 001161   200077 474500                    LDP4    @MULT,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:84   
         1 001162   400000 756100                    STQ     0,,PR4

      338     7342    3            END;

   7342  1 001163   001200 710000 1                  TRA     s:7348

      339     7343    3         ELSE DO;

      340     7344    3             VALUE=DEF$->VXD$TMPLT.AD.LFLAGS.SOURCE;

   7344  1 001164   200075 470500                    LDP0    @DEF$,,AUTO
         1 001165   000000 471500                    LDP1    0,,PR0
         1 001166   200076 473500                    LDP3    @VALUE,,AUTO
         1 001167   100000 236100                    LDQ     0,,PR1
         1 001170   000041 772000                    QRL     33
         1 001171   300000 756100                    STQ     0,,PR3

      341     7345    3             MULT =DEF$->VXD$TMPLT.AD.LFLAGS.MULTIPLE;

   7345  1 001172   000000 471500                    LDP1    0,,PR0
         1 001173   100000 236100                    LDQ     0,,PR1
         1 001174   000004 736000                    QLS     4
         1 001175   400000 376003                    ANQ     -131072,DU
         1 001176   200077 474500                    LDP4    @MULT,,AUTO
         1 001177   400000 756100                    STQ     0,,PR4

      342     7346    3            END;

      343     7347
      344     7348    2   END GET_VALS;

   7348  1 001200   200074 221300                    LDX1  ! BIN_N$+4,,AUTO
         1 001201   000001 702211                    TSX2  ! 1,X1

      345     7349
      346     7350        %EJECT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:85   
      347     7351    1   MOVE: PROC(START$,STOP$,NODE#,RESULT$,RESULT_NODE#);

   7351  1 001202   200074 741300       MOVE         STX1  ! BIN_N$+4,,AUTO

      348     7352
      349     7353    2   DCL START$    PTR;
      350     7354    2   DCL STOP$     PTR;
      351     7355    2   DCL NODE#     SBIN;
      352     7356    2   DCL RESULT$   PTR;
      353     7357    2   DCL RESULT_NODE# SBIN;
      354     7358    2   DCL TEMP$     PTR;
      355     7359    2   DCL NPOINTER  SBIN;
      356     7360    2   DCL RESULT_SECT# SBIN;
      357     7361    2   DCL SECT#     SBIN;
      358     7362    2   DCL SECTNUM$  PTR;
      359     7363
      360     7364    2         TEMP$=START$;

   7364  1 001203   200075 470500                    LDP0    @START$,,AUTO
         1 001204   000000 236100                    LDQ     0,,PR0
         1 001205   200102 756100                    STQ     TEMP$,,AUTO

      361     7365    3         DO WHILE(TEMP$<=STOP$);

   7365  1 001206   200076 471500                    LDP1    @STOP$,,AUTO
         1 001207   100000 116100                    CMPQ    0,,PR1
         1 001210   001212 600000 1                  TZE     s:7366
         1 001211   001354 603000 1                  TRC     s:7394

      362     7366    3             NPOINTER=TEMP$->VXD$TMPLT.NPOINTER;

   7366  1 001212   200102 470500                    LDP0    TEMP$,,AUTO
         1 001213   000001 236100                    LDQ     1,,PR0
         1 001214   000022 732000                    QRS     18
         1 001215   200103 756100                    STQ     NPOINTER,,AUTO

      363     7367    3             IF (RTYPE~=%TYPEDEF AND RESULT$->VXD$TMPLT.CONSTNT)
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:86   

   7367  1 001216   200044 235100                    LDA     RTYPE,,AUTO
         1 001217   000004 115007                    CMPA    4,DL
         1 001220   001226 600000 1                  TZE     s:7367+8
         1 001221   200100 471500                    LDP1    @RESULT$,,AUTO
         1 001222   100000 473500                    LDP3    0,,PR1
         1 001223   300001 236100                    LDQ     1,,PR3
         1 001224   400000 316007                    CANQ    -131072,DL
         1 001225   001233 601000 1                  TNZ     s:7370
         1 001226   200100 471500                    LDP1    @RESULT$,,AUTO
         1 001227   100000 473500                    LDP3    0,,PR1
         1 001230   300000 236100                    LDQ     0,,PR3
         1 001231   004000 316003                    CANQ    2048,DU
         1 001232   001241 601000 1                  TNZ     s:7374

      364     7368    3                     OR NOT RESULT$->VXD$TMPLT.AD.LOOKUP_SECTNUM
      365     7369    4             THEN DO;

      366     7370    4                 TEMP$->VXD$TMPLT=RESULT$->VXD$TMPLT;

   7370  1 001233   000100 100500                    MLR     fill='000'O
         1 001234   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
         1 001235   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      367     7371    4                 TEMP$->VXD$TMPLT.NPOINTER=NPOINTER;

   7371  1 001236   200103 720100                    LXL0    NPOINTER,,AUTO
         1 001237   000001 740100                    STX0    1,,PR0

      368     7372    4                END;

   7372  1 001240   001345 710000 1                  TRA     s:7391

      369     7373    4             ELSE DO;

      370     7374    4                 CALL VXU$FIND_SECTNUM(RESULT$->VXD$TMPLT,RESULT_NODE#,RESULT_SECT#);

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:87   
   7374  1 001241   200104 634500                    EPPR4   RESULT_SECT#,,AUTO
         1 001242   200112 454500                    STP4    SECTNUM$+4,,AUTO
         1 001243   200101 236100                    LDQ     @RESULT_NODE#,,AUTO
         1 001244   200111 756100                    STQ     SECTNUM$+3,,AUTO
         1 001245   200110 453500                    STP3    SECTNUM$+2,,AUTO
         1 001246   200110 630500                    EPPR0   SECTNUM$+2,,AUTO
         1 001247   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001250   000000 701000 xent               TSX1    VXU$FIND_SECTNUM
         1 001251   000000 011000                    NOP     0

      371     7375    4                 IF (RTYPE~=%TYPEDEF AND TEMP$->VXD$TMPLT.CONSTNT)

   7375  1 001252   200044 235100                    LDA     RTYPE,,AUTO
         1 001253   000004 115007                    CMPA    4,DL
         1 001254   001261 600000 1                  TZE     s:7375+7
         1 001255   200102 470500                    LDP0    TEMP$,,AUTO
         1 001256   000001 236100                    LDQ     1,,PR0
         1 001257   400000 316007                    CANQ    -131072,DL
         1 001260   001265 601000 1                  TNZ     s:7378
         1 001261   200102 470500                    LDP0    TEMP$,,AUTO
         1 001262   000000 236100                    LDQ     0,,PR0
         1 001263   004000 316003                    CANQ    2048,DU
         1 001264   001306 601000 1                  TNZ     s:7383

      372     7376    4                         OR NOT TEMP$->VXD$TMPLT.AD.LOOKUP_SECTNUM
      373     7377    5                 THEN DO;

      374     7378    5                     TEMP$->VXD$TMPLT=RESULT$->VXD$TMPLT;

   7378  1 001265   200100 471500                    LDP1    @RESULT$,,AUTO
         1 001266   100000 473500                    LDP3    0,,PR1
         1 001267   000100 100500                    MLR     fill='000'O
         1 001270   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
         1 001271   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      375     7379    5                     TEMP$->VXD$TMPLT.NPOINTER=NPOINTER;

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:88   
   7379  1 001272   200103 720100                    LXL0    NPOINTER,,AUTO
         1 001273   000001 740100                    STX0    1,,PR0

      376     7380    5                     CALL VXU$NEW_SECTNUM(TEMP$->VXD$TMPLT,NODE#,RESULT_SECT#);

   7380  1 001274   200104 633500                    EPPR3   RESULT_SECT#,,AUTO
         1 001275   200112 453500                    STP3    SECTNUM$+4,,AUTO
         1 001276   200077 236100                    LDQ     @NODE#,,AUTO
         1 001277   200102 235100                    LDA     TEMP$,,AUTO
         1 001300   200110 757100                    STAQ    SECTNUM$+2,,AUTO
         1 001301   200110 630500                    EPPR0   SECTNUM$+2,,AUTO
         1 001302   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001303   000000 701000 xent               TSX1    VXU$NEW_SECTNUM
         1 001304   000000 011000                    NOP     0

      377     7381    5                    END;

   7381  1 001305   001345 710000 1                  TRA     s:7391

      378     7382    5                 ELSE DO;

      379     7383    5                     CALL VXU$FIND_SECTNUM(TEMP$->VXD$TMPLT,NODE#,SECT#,SECTNUM$);

   7383  1 001306   200106 631500                    EPPR1   SECTNUM$,,AUTO
         1 001307   200113 451500                    STP1    SECTNUM$+5,,AUTO
         1 001310   200105 633500                    EPPR3   SECT#,,AUTO
         1 001311   200112 453500                    STP3    SECTNUM$+4,,AUTO
         1 001312   200077 236100                    LDQ     @NODE#,,AUTO
         1 001313   200102 235100                    LDA     TEMP$,,AUTO
         1 001314   200110 757100                    STAQ    SECTNUM$+2,,AUTO
         1 001315   200110 630500                    EPPR0   SECTNUM$+2,,AUTO
         1 001316   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001317   000000 701000 xent               TSX1    VXU$FIND_SECTNUM
         1 001320   000000 011000                    NOP     0

      380     7384    5                     SECTNUM$->VX$SECTNUM.RU_SECT#=RESULT_SECT#;

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:89   
   7384  1 001321   200104 720100                    LXL0    RESULT_SECT#,,AUTO
         1 001322   200106 470500                    LDP0    SECTNUM$,,AUTO
         1 001323   000002 440100                    SXL0    2,,PR0

      381     7385    5                     SECT#=TEMP$->VXD$TMPLT.AD.SECTNUM;

   7385  1 001324   200102 470500                    LDP0    TEMP$,,AUTO
         1 001325   000000 236100                    LDQ     0,,PR0
         1 001326   000022 772000                    QRL     18
         1 001327   003777 376007                    ANQ     2047,DL
         1 001330   200105 756100                    STQ     SECT#,,AUTO

      382     7386    5                     TEMP$->VXD$TMPLT=RESULT$->VXD$TMPLT;

   7386  1 001331   200100 471500                    LDP1    @RESULT$,,AUTO
         1 001332   100000 473500                    LDP3    0,,PR1
         1 001333   000100 100500                    MLR     fill='000'O
         1 001334   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
         1 001335   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      383     7387    5                     TEMP$->VXD$TMPLT.AD.SECTNUM=SECT#;

   7387  1 001336   200105 236100                    LDQ     SECT#,,AUTO
         1 001337   000022 736000                    QLS     18
         1 001340   000000 676100                    ERQ     0,,PR0
         1 001341   003777 376003                    ANQ     2047,DU
         1 001342   000000 656100                    ERSQ    0,,PR0

      384     7388    5                     TEMP$->VXD$TMPLT.NPOINTER=NPOINTER;

   7388  1 001343   200103 720100                    LXL0    NPOINTER,,AUTO
         1 001344   000001 740100                    STX0    1,,PR0

      385     7389    5                    END;

      386     7390    4                END;

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:90   
      387     7391    3             TEMP$=PINCRW(TEMP$,SIZEW(VXD$TMPLT));

   7391  1 001345   200102 236100                    LDQ     TEMP$,,AUTO
         1 001346   000002 036003                    ADLQ    2,DU
         1 001347   200102 756100                    STQ     TEMP$,,AUTO

      388     7392    3            END;

   7392  1 001350   200076 470500                    LDP0    @STOP$,,AUTO
         1 001351   000000 116100                    CMPQ    0,,PR0
         1 001352   001212 602000 1                  TNC     s:7366
         1 001353   001212 600000 1                  TZE     s:7366

      389     7393
      390     7394    2   END MOVE;

   7394  1 001354   200074 221300                    LDX1  ! BIN_N$+4,,AUTO
         1 001355   000001 702211                    TSX2  ! 1,X1

      391     7395
      392     7396        %EJECT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:91   
      393     7397    1   VXO$CHKSET: ENTRY;

   7397  1 001356   000000 700200 xent  VXO$CHKSET   TSX0  ! X66_AUTO_0
         1 001357   000114 000000                    ZERO    76,0

      394     7398    1         PNAM$ = VX_CURR$ -> VX$NODE.L_START.DN$;

   7398  1 001360   000000 470400 xsym               LDP0    VX_CURR$
         1 001361   000031 236100                    LDQ     25,,PR0
         1 001362   200030 756100                    STQ     PNAM$,,AUTO

      395     7399    2         DO J = 1 TO SIZEW( VX_DEF_REC_A ) - 1;

   7399  1 001363   000001 235007                    LDA     1,DL
         1 001364   200041 755100                    STA     J,,AUTO
         1 001365   001720 710000 1                  TRA     s:7492+3

      396     7400    2             J1 = J - 1;

   7400  1 001366   200041 235100                    LDA     J,,AUTO
         1 001367   000001 135007                    SBLA    1,DL
         1 001370   200050 755100                    STA     J1,,AUTO

      397     7401    2             RTYPE = VX_DEF_REC_A(J);

   7401  1 001371   200041 720100                    LXL0    J,,AUTO
         1 001372   000000 235010 xsym               LDA     VX_DEF_REC_A,X0
         1 001373   200044 755100                    STA     RTYPE,,AUTO

      398     7402    2             P$ = VX_CURR$ -> VX$NODE.L_START_A$(RTYPE); /* Get starting point */

   7402  1 001374   000000 470400 xsym               LDP0    VX_CURR$
         1 001375   000030 236105                    LDQ     24,AL,PR0
         1 001376   200016 756100                    STQ     P$,,AUTO

      399     7403    3             IF P$ ~= ADDR(NIL) THEN DO;   /* Do if some */

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:92   
   7403  1 001377   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001400   001715 600000 1                  TZE     s:7492

      400     7404    3                 STOP$ = VX_CURR$ -> VX$NODE.L_STOP_A$(RTYPE);

   7404  1 001401   200044 721100                    LXL1    RTYPE,,AUTO
         1 001402   000042 236111                    LDQ     34,X1,PR0
         1 001403   200031 756100                    STQ     STOP$,,AUTO

      401     7405    4                 DO WHILE( P$ < STOP$ );

   7405  1 001404   200016 116100                    CMPQ    P$,,AUTO
         1 001405   001715 602000 1                  TNC     s:7492
         1 001406   001715 600000 1                  TZE     s:7492

      402     7406    4                     PN$ = PINCRW( PNAM$, P$ -> VXD$TMPLT.NPOINTER );
              7406                              /* Get pointer to name for this entry */

   7406  1 001407   200016 470500                    LDP0    P$,,AUTO
         1 001410   000001 220100                    LDX0    1,,PR0
         1 001411   000000 636010                    EAQ     0,X0
         1 001412   200030 036100                    ADLQ    PNAM$,,AUTO
         1 001413   200026 756100                    STQ     PN$,,AUTO

      403     7407    4                     Q$ = PINCRW( P$, SIZEW(VXD$TMPLT) );

   7407  1 001414   200016 236100                    LDQ     P$,,AUTO
         1 001415   000002 036003                    ADLQ    2,DU
         1 001416   200017 756100                    STQ     Q$,,AUTO

      404     7408    4                     IF PN$ -> B$DNAME.TEXT ~= PINCRW( PNAM$, Q$ -> VXD$TMPLT.NPOINTER
              7408                              )

   7408  1 001417   200026 471500                    LDP1    PN$,,AUTO
         1 001420   100000 221100                    LDX1    0,,PR1
         1 001421   200017 473500                    LDP3    Q$,,AUTO
         1 001422   300001 222100                    LDX2    1,,PR3
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:93   
         1 001423   200030 474500                    LDP4    PNAM$,,AUTO
         1 001424   400000 223112                    LDX3    0,X2,PR4
         1 001425   000000 635012                    EAA     0,X2
         1 001426   000020 731000                    ARS     16
         1 001427   040145 106540                    CMPC    fill='040'O
         1 001430   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         1 001431   400000 400013                    ADSC9   0,A,PR4                  cn=2,n=*X3
         1 001432   001710 601000 1                  TNZ     NO_DUPS_LOCAL

      405     7409    4                             -> B$DNAME.TEXT THEN GOTO NO_DUPS_LOCAL;
      406     7410    4                     DUPSTOP$ = P$;

   7410  1 001433   200016 236100                    LDQ     P$,,AUTO
         1 001434   200025 756100                    STQ     DUPSTOP$,,AUTO

      407     7411    4                    IF RTYPE ~= %TYPEDEF AND P$ -> VXD$TMPLT.CONSTNT THEN CURRENT_TYPE
              7411                              = P$ -> VXD$TMPLT.LFLAGS.SOURCE;

   7411  1 001435   200044 235100                    LDA     RTYPE,,AUTO
         1 001436   000004 115007                    CMPA    4,DL
         1 001437   001450 600000 1                  TZE     s:7412
         1 001440   000001 236100                    LDQ     1,,PR0
         1 001441   400000 316007                    CANQ    -131072,DL
         1 001442   001450 600000 1                  TZE     s:7412

   7411  1 001443   000001 236100                    LDQ     1,,PR0
         1 001444   000013 772000                    QRL     11
         1 001445   000017 376007                    ANQ     15,DL
         1 001446   200052 756100                    STQ     CURRENT_TYPE,,AUTO
         1 001447   001453 710000 1                  TRA     s:7413

      408     7412    4                     ELSE CURRENT_TYPE = P$ -> VXD$TMPLT.AD.LFLAGS.SOURCE;

   7412  1 001450   000000 236100                    LDQ     0,,PR0
         1 001451   000041 772000                    QRL     33
         1 001452   200052 756100                    STQ     CURRENT_TYPE,,AUTO

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:94   
      409     7413    4                     IF CURRENT_TYPE = %SOURCE_OBJECT# OR CURRENT_TYPE = %SOURCE_ULIB#
              7413                              THEN DEF_OBJECT_COUNT = 1;

   7413  1 001453   001456 600000 1                  TZE     s:7413+3
         1 001454   000003 116007                    CMPQ    3,DL
         1 001455   001461 601000 1                  TNZ     s:7414

   7413  1 001456   000001 235007                    LDA     1,DL
         1 001457   200057 755100                    STA     DEF_OBJECT_COUNT,,AUTO
         1 001460   001462 710000 1                  TRA     s:7415

      410     7414    4                     ELSE DEF_OBJECT_COUNT = 0;

   7414  1 001461   200057 450100                    STZ     DEF_OBJECT_COUNT,,AUTO

      411     7415    4                     WHICH$ = P$;

   7415  1 001462   200016 236100                    LDQ     P$,,AUTO
         1 001463   200034 756100                    STQ     WHICH$,,AUTO

      412     7416    4                     VALUE = P$ -> VXD$TMPLT.NPOINTER;

   7416  1 001464   000001 236100                    LDQ     1,,PR0
         1 001465   000022 732000                    QRS     18
         1 001466   200045 756100                    STQ     VALUE,,AUTO

      413     7417    5                     DO WHILE ( Q$ <= STOP$ );

   7417  1 001467   200031 236100                    LDQ     STOP$,,AUTO
         1 001470   200017 116100                    CMPQ    Q$,,AUTO
         1 001471   001623 602000 1                  TNC     CHECK_ANY_DUPS

      414     7418    5                         QN$ = PINCRW( PNAM$, Q$ -> VXD$TMPLT.NPOINTER );

   7418  1 001472   200017 470500                    LDP0    Q$,,AUTO
         1 001473   000001 220100                    LDX0    1,,PR0
         1 001474   000000 636010                    EAQ     0,X0
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:95   
         1 001475   200030 036100                    ADLQ    PNAM$,,AUTO
         1 001476   200027 756100                    STQ     QN$,,AUTO

      415     7419    5                         IF PN$ -> B$DNAME.TEXT

   7419  1 001477   200026 471500                    LDP1    PN$,,AUTO
         1 001500   100000 221100                    LDX1    0,,PR1
         1 001501   200027 473500                    LDP3    QN$,,AUTO
         1 001502   300000 222100                    LDX2    0,,PR3
         1 001503   040140 106540                    CMPC    fill='040'O
         1 001504   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         1 001505   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         1 001506   001623 601000 1                  TNZ     CHECK_ANY_DUPS

      416     7420    5                                 ~=
      417     7421    5                                 QN$ -> B$DNAME.TEXT THEN GOTO CHECK_ANY_DUPS;
      418     7422    5                         DUPSTOP$ = Q$;

   7422  1 001507   200017 236100                    LDQ     Q$,,AUTO
         1 001510   200025 756100                    STQ     DUPSTOP$,,AUTO

      419     7423    6                         IF RTYPE ~= %TYPEDEF AND Q$ -> VXD$TMPLT.CONSTNT THEN DO;
              7423                                  /* A constant data def */

   7423  1 001511   200044 235100                    LDA     RTYPE,,AUTO
         1 001512   000004 115007                    CMPA    4,DL
         1 001513   001524 600000 1                  TZE     s:7427
         1 001514   000001 236100                    LDQ     1,,PR0
         1 001515   400000 316007                    CANQ    -131072,DL
         1 001516   001524 600000 1                  TZE     s:7427

      420     7424    6                             WHERE_TYPE = Q$ -> VXD$TMPLT.LFLAGS.SOURCE;

   7424  1 001517   000001 236100                    LDQ     1,,PR0
         1 001520   000013 772000                    QRL     11
         1 001521   000017 376007                    ANQ     15,DL
         1 001522   200051 756100                    STQ     WHERE_TYPE,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:96   

      421     7425    6                            END;

   7425  1 001523   001527 710000 1                  TRA     s:7429

      422     7426    6                         ELSE DO;

      423     7427    6                             WHERE_TYPE = Q$ -> VXD$TMPLT.AD.LFLAGS.SOURCE;

   7427  1 001524   000000 236100                    LDQ     0,,PR0
         1 001525   000041 772000                    QRL     33
         1 001526   200051 756100                    STQ     WHERE_TYPE,,AUTO

      424     7428    6                            END;

      425     7429    6                         IF DEF_OBJECT_COUNT > 0 THEN DO;

   7429  1 001527   200057 235100                    LDA     DEF_OBJECT_COUNT,,AUTO
         1 001530   001556 600000 1                  TZE     s:7442

      426     7430    7                             IF WHERE_TYPE = %SOURCE_OBJECT# OR WHERE_TYPE = %
              7430                                      SOURCE_ULIB# THEN DO;

   7430  1 001531   000000 116003                    CMPQ    0,DU
         1 001532   001535 600000 1                  TZE     s:7431
         1 001533   000003 116007                    CMPQ    3,DL
         1 001534   001615 601000 1                  TNZ     s:7461

      427     7431    7                                 DEF_OBJECT_COUNT = DEF_OBJECT_COUNT + 1;

   7431  1 001535   000001 035007                    ADLA    1,DL
         1 001536   200057 755100                    STA     DEF_OBJECT_COUNT,,AUTO

      428     7432    7   CHECK_FIRST:
      429     7433    8                                 IF VALUE > Q$ -> VXD$TMPLT.NPOINTER THEN DO;

   7433  1 001537   200017 470500       CHECK_FIRST  LDP0    Q$,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:97   
         1 001540   000001 236100                    LDQ     1,,PR0
         1 001541   000022 732000                    QRS     18
         1 001542   001545 604000 1                  TMI     HAVE_FIRST
         1 001543   200045 116100                    CMPQ    VALUE,,AUTO
         1 001544   001615 603000 1                  TRC     s:7461

      430     7434    8   HAVE_FIRST:
      431     7435    8                                     CURRENT_TYPE = WHERE_TYPE;

   7435  1 001545   200051 235100       HAVE_FIRST   LDA     WHERE_TYPE,,AUTO
         1 001546   200052 755100                    STA     CURRENT_TYPE,,AUTO

      432     7436    8                                     VALUE = Q$ -> VXD$TMPLT.NPOINTER;

   7436  1 001547   200017 470500                    LDP0    Q$,,AUTO
         1 001550   000001 236100                    LDQ     1,,PR0
         1 001551   000022 732000                    QRS     18
         1 001552   200045 756100                    STQ     VALUE,,AUTO

      433     7437    8                                     WHICH$ = Q$;

   7437  1 001553   200017 236100                    LDQ     Q$,,AUTO
         1 001554   200034 756100                    STQ     WHICH$,,AUTO

      434     7438    8                                    END;
              7438                                         /* If value > Q$ -> VXD$TMPLT.NPOINTER then do; */

      435     7439    7                                END;
              7439                       /* If Q$ -> VXD$TMPLT.AD.LFLAGS.SOURCE = %SOURCE_OBJECT# then do; */

      436     7440    6                            END;           /* If DEF_OBJECT_COUNT > 0 then do; */

   7440  1 001555   001615 710000 1                  TRA     s:7461

      437     7441    6                         ELSE DO;

      438     7442    7                             DO CASE( WHERE_TYPE );
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:98   

   7442  1 001556   000006 116007                    CMPQ    6,DL
         1 001557   001561 602006 1                  TNC     s:7442+3,QL
         1 001560   001615 710000 1                  TRA     s:7461
         1 001561   001567 710000 1                  TRA     s:7444
         1 001562   001572 710000 1                  TRA     s:7447
         1 001563   001576 710000 1                  TRA     s:7452
         1 001564   001567 710000 1                  TRA     s:7444
         1 001565   001604 710000 1                  TRA     s:7455
         1 001566   001612 710000 1                  TRA     s:7458

      439     7443    7                               CASE( %SOURCE_OBJECT#, %SOURCE_ULIB# );

      440     7444    7                                 DEF_OBJECT_COUNT = 1;

   7444  1 001567   000001 235007                    LDA     1,DL
         1 001570   200057 755100                    STA     DEF_OBJECT_COUNT,,AUTO

      441     7445    7                                 GOTO HAVE_FIRST;

   7445  1 001571   001545 710000 1                  TRA     HAVE_FIRST

      442     7446    7                               CASE( %SOURCE_SLIB# );

      443     7447    7                                 IF CURRENT_TYPE = %SOURCE_SLIB# THEN

   7447  1 001572   200052 235100                    LDA     CURRENT_TYPE,,AUTO
         1 001573   000001 115007                    CMPA    1,DL
         1 001574   001537 600000 1                  TZE     CHECK_FIRST

      444     7448    7                                     GOTO CHECK_FIRST;
      445     7449    7                                 ELSE
      446     7450    7                                     GOTO HAVE_FIRST;

   7450  1 001575   001545 710000 1                  TRA     HAVE_FIRST

      447     7451    7                               CASE( %SOURCE_ALIB# );
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:99   

      448     7452    7                                IF CURRENT_TYPE = %SOURCE_ALIB# THEN GOTO CHECK_FIRST;

   7452  1 001576   200052 235100                    LDA     CURRENT_TYPE,,AUTO
         1 001577   000002 115007                    CMPA    2,DL
         1 001600   001537 600000 1                  TZE     CHECK_FIRST

      449     7453    7                                 IF CURRENT_TYPE = %SOURCE_RLIB# THEN GOTO HAVE_FIRST;

   7453  1 001601   000004 115007                    CMPA    4,DL
         1 001602   001545 600000 1                  TZE     HAVE_FIRST
         1 001603   001615 710000 1                  TRA     s:7461

      450     7454    7                               CASE( %SOURCE_RLIB# );

      451     7455    7                                IF CURRENT_TYPE = %SOURCE_RLIB# THEN GOTO CHECK_FIRST;

   7455  1 001604   200052 235100                    LDA     CURRENT_TYPE,,AUTO
         1 001605   000004 115007                    CMPA    4,DL
         1 001606   001537 600000 1                  TZE     CHECK_FIRST

      452     7456    7                                 IF CURRENT_TYPE = %SOURCE_REMOVED# THEN GOTO
              7456                                          HAVE_FIRST;

   7456  1 001607   000005 115007                    CMPA    5,DL
         1 001610   001545 600000 1                  TZE     HAVE_FIRST
         1 001611   001615 710000 1                  TRA     s:7461

      453     7457    7                               CASE( %SOURCE_REMOVED# );

      454     7458    7                                 IF CURRENT_TYPE = %SOURCE_REMOVED# THEN GOTO
              7458                                          CHECK_FIRST;

   7458  1 001612   200052 235100                    LDA     CURRENT_TYPE,,AUTO
         1 001613   000005 115007                    CMPA    5,DL
         1 001614   001537 600000 1                  TZE     CHECK_FIRST

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:100  
      455     7459    7                               END;

      456     7460    6                            END;           /* Else do; */

      457     7461    5                         Q$ = PINCRW( Q$, SIZEW(VXD$TMPLT) );

   7461  1 001615   200017 236100                    LDQ     Q$,,AUTO
         1 001616   000002 036003                    ADLQ    2,DU
         1 001617   200017 756100                    STQ     Q$,,AUTO

      458     7462    5                        END;               /* Do while ( Q$ <= STOP$ */

   7462  1 001620   200031 116100                    CMPQ    STOP$,,AUTO
         1 001621   001472 602000 1                  TNC     s:7418
         1 001622   001472 600000 1                  TZE     s:7418

      459     7463    4   CHECK_ANY_DUPS:
      460     7464    4                     IF DUPSTOP$ <= P$ THEN GOTO NO_DUPS_LOCAL;

   7464  1 001623   200016 236100       CHECK_ANY_D* LDQ     P$,,AUTO
         1 001624   200025 116100                    CMPQ    DUPSTOP$,,AUTO
         1 001625   001710 603000 1                  TRC     NO_DUPS_LOCAL

      461     7465    5                     IF DEF_OBJECT_COUNT >= 2 OR VX_O.SIN.DUPLICATE ~= 0 THEN DO;

   7465  1 001626   200057 235100                    LDA     DEF_OBJECT_COUNT,,AUTO
         1 001627   000002 115007                    CMPA    2,DL
         1 001630   001633 603000 1                  TRC     s:7466
         1 001631   000021 235000 xsym               LDA     VX_O+17
         1 001632   001665 600000 1                  TZE     s:7480

      462     7466    6                         IF RTYPE ~= %TYPEDEF AND WHICH$ -> VXD$TMPLT.CONSTNT THEN DO;
              7466                                  /* A constant data def */

   7466  1 001633   200044 235100                    LDA     RTYPE,,AUTO
         1 001634   000004 115007                    CMPA    4,DL
         1 001635   001645 600000 1                  TZE     s:7470
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:101  
         1 001636   200034 470500                    LDP0    WHICH$,,AUTO
         1 001637   000001 236100                    LDQ     1,,PR0
         1 001640   400000 316007                    CANQ    -131072,DL
         1 001641   001645 600000 1                  TZE     s:7470

      463     7467    6                             WHICH$ -> VXD$TMPLT.LFLAGS.MULTIPLE = '1'B/*@YES_B*/;
              7467                                      /* Also here */

   7467  1 001642   200000 236007                    LDQ     65536,DL
         1 001643   000001 256100                    ORSQ    1,,PR0

      464     7468    6                            END;

   7468  1 001644   001650 710000 1                  TRA     s:7473

      465     7469    6                         ELSE DO;

      466     7470    6                             WHICH$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE = '1'B/*@YES_B*/;
              7470                                      /* Also here */

   7470  1 001645   200034 470500                    LDP0    WHICH$,,AUTO
         1 001646   020000 236003                    LDQ     8192,DU
         1 001647   000000 256100                    ORSQ    0,,PR0

      467     7471    6                            END;

      468     7472                              %DUP_STATS;

   7473  1 001650   000000 235000 xsym               LDA     VX_ERRORS
         1 001651   000001 035007                    ADLA    1,DL
         1 001652   000000 755000 xsym               STA     VX_ERRORS

      469     7475                              %CHECK( SEV = @MULTIPLE );

   7476  1 001653   000000 236000 xsym               LDQ     VX_ERR_SEV
         1 001654   000004 116007                    CMPQ    4,DL
         1 001655   001660 603000 1                  TRC     s:7478
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:102  

   7476  1 001656   000004 235007                    LDA     4,DL
         1 001657   000000 755000 xsym               STA     VX_ERR_SEV

      470     7478    5                         VX_RU_HEAD.MAP_BITS_A.MULTIPLE(J1) = '1'B/*@TRUE_B*/;

   7478  1 001660   200050 235100                    LDA     J1,,AUTO
         1 001661   000002 735000                    ALS     2
         1 001662   003005 060400                    CSL     bolr='003'O
         1 001663   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         1 001664   000011 200001 xsym               BDSC    VX_RU_HEAD+9,A           by=1,bit=0,n=1

      471     7479    5                        END;
              7479                              /* If DEF_OBJECT_COUNT >= 2 or VX_O.SIN.DUPLICATE then do; */

      472     7480    4                     R$ = P$;

   7480  1 001665   200016 236100                    LDQ     P$,,AUTO
         1 001666   200020 756100                    STQ     R$,,AUTO

      473     7481    4                     P$ = DUPSTOP$;

   7481  1 001667   200025 236100                    LDQ     DUPSTOP$,,AUTO
         1 001670   200016 756100                    STQ     P$,,AUTO

      474     7482    5                     DO WHILE( R$ <= DUPSTOP$ );

   7482  1 001671   200020 116100                    CMPQ    R$,,AUTO
         1 001672   001710 602000 1                  TNC     NO_DUPS_LOCAL

      475     7483    6                         IF R$ ~= WHICH$ THEN DO;

   7483  1 001673   200020 236100                    LDQ     R$,,AUTO
         1 001674   200034 116100                    CMPQ    WHICH$,,AUTO
         1 001675   001703 600000 1                  TZE     s:7486

      476     7484    6                             R$ -> VXD$TMPLT = WHICH$ -> VXD$TMPLT;
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:103  

   7484  1 001676   200034 470500                    LDP0    WHICH$,,AUTO
         1 001677   200020 471500                    LDP1    R$,,AUTO
         1 001700   000100 100500                    MLR     fill='000'O
         1 001701   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         1 001702   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

      477     7485    6                            END;           /* If R$ ~= WHICH$ then do; */

      478     7486    5                         R$ = PINCRW( R$, SIZEW(VXD$TMPLT) );

   7486  1 001703   000002 036003                    ADLQ    2,DU
         1 001704   200020 756100                    STQ     R$,,AUTO

      479     7487    5                        END;               /* Do while ( R$ <= DUPSTOP$ ) */

   7487  1 001705   200025 116100                    CMPQ    DUPSTOP$,,AUTO
         1 001706   001673 602000 1                  TNC     s:7483
         1 001707   001673 600000 1                  TZE     s:7483

      480     7488    4   NO_DUPS_LOCAL:
      481     7489    4                     P$ = PINCRW( P$, SIZEW(VXD$TMPLT)); /* Bump up */

   7489  1 001710   200016 236100       NO_DUPS_LOC* LDQ     P$,,AUTO
         1 001711   000002 036003                    ADLQ    2,DU
         1 001712   200016 756100                    STQ     P$,,AUTO

      482     7490    4                    END;                   /* Do while( P$ <= STOP$ ) */

   7490  1 001713   200031 116100                    CMPQ    STOP$,,AUTO
         1 001714   001407 602000 1                  TNC     s:7406

      483     7491    3                END;

      484     7492    2            END;                           /* Do j = 1 to SIZEW...*/

   7492  1 001715   200041 235100                    LDA     J,,AUTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:104  
         1 001716   000001 035007                    ADLA    1,DL
         1 001717   200041 755100                    STA     J,,AUTO
         1 001720   000004 115007                    CMPA    4,DL
         1 001721   001366 602000 1                  TNC     s:7400

      485     7493    1   END VXO$DUPCHK;

   7493  1 001722   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:105  
--  Include file information  --

   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
      No diagnostics issued in procedure VXO$DUPCHK.
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:106  

 **** Variables and constants ****

  ****  Section 000 RoData VXO$DUPCHK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 SYM_PREC(0:7)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    75-0-0/w PTR         r     1 @DEF$                     77-0-0/w PTR         r     1 @MULT
    77-0-0/w PTR         r     1 @NODE#                   100-0-0/w PTR         r     1 @RESULT$
   101-0-0/w PTR         r     1 @RESULT_NODE#             75-0-0/w PTR         r     1 @START$
    76-0-0/w PTR         r     1 @STOP$                    76-0-0/w PTR         r     1 @VALUE
     3-0-0/w BIT         r     1 ABOVE_MULT                 5-0-0/w BIT         r     1 ABOVE_OBJECT
    55-0-0/w UBIN        r     1 ABOVE_PREC                53-0-0/w UBIN        r     1 ABOVE_VALUE
     4-0-0/w BIT         r     1 BELOW_MULT                 6-0-0/w BIT         r     1 BELOW_OBJECT
    54-0-0/w UBIN        r     1 BELOW_VALUE               61-0-0/w UBIN        r     1 BIN_HIGH
    60-0-0/w UBIN        r     1 BIN_LOW                   62-0-0/w UBIN        r     1 BIN_MID
    70-0-0/w PTR         r     1 BIN_N$                    63-0-0/w PTR         r     1 BIN_NTEMP$
    67-0-0/w PTR         r     1 BIN_RESULT$               65-0-0/w PTR         r     1 BIN_START$
    64-0-0/w PTR         r     1 BIN_START1$               66-0-0/w PTR         r     1 BIN_STOP$
    14-0-0/w BIT         r     1 BY_PASS                   21-0-0/w PTR         r     1 CURR$
    56-0-0/w UBIN        r     1 CURRENT_PREC              52-0-0/w UBIN        r     1 CURRENT_TYPE
    *0-0-0/w PTR         r     1 DEF$                      57-0-0/w UBIN        r     1 DEF_OBJECT_COUNT
    25-0-0/w PTR         r     1 DUPSTOP$                  15-0-0/w BIT         r     1 FINISHED
    32-0-0/w PTR         r     1 FIRST_START$              33-0-0/w PTR         r     1 FIRST_STOP$
    37-0-0/w PTR         r     1 HOLD$                     41-0-0/w UBIN        r     1 J
    50-0-0/w UBIN        r     1 J1                        *0-0-0/w BIT         r     1 MULT
    35-0-0/w PTR         r     1 NEXT_P$                   *0-0-0/w SBIN        r     1 NODE#
   103-0-0/w SBIN        r     1 NPOINTER                  16-0-0/w PTR         r     1 P$
    24-0-0/w PTR         r     1 PATH_CURR$                26-0-0/w PTR         r     1 PN$
    30-0-0/w PTR         r     1 PNAM$                     17-0-0/w PTR         r     1 Q$
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:107  
    27-0-0/w PTR         r     1 QN$                       20-0-0/w PTR         r     1 R$
    *0-0-0/w PTR         r     1 RESULT$                   *0-0-0/w SBIN        r     1 RESULT_NODE#
   104-0-0/w SBIN        r     1 RESULT_SECT#              44-0-0/w UBIN        r     1 RTYPE
   105-0-0/w SBIN        r     1 SECT#                    106-0-0/w PTR         r     1 SECTNUM$
    22-0-0/w PTR         r     1 SEC_CURR$                 23-0-0/w PTR         r     1 SEC_RESULT$
    47-0-0/w UBIN        r     1 SIZE                      *0-0-0/w PTR         r     1 START$
    31-0-0/w PTR         r     1 STOP$                     *0-0-0/w PTR         r     1 STOP$
    36-0-0/w PTR         r     1 STOP_P$                  102-0-0/w PTR         r     1 TEMP$
    45-0-0/w UBIN        r     1 VALUE                     *0-0-0/w UBIN        r     1 VALUE
    51-0-0/w UBIN        r     1 WHERE_TYPE                34-0-0/w PTR         r     1 WHICH$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 VX_CURR$
     0-0-0/w UBIN        r     1 VX_DEF_REC_A(0:3)
     0-0-0/w STRC(216)   r     1 VX_ERRORS                  0-0-0/w UBIN        r     1 VX_ERR_SEV
     0-0-0/w SBIN        r     1 VX_NODE_NUMBER             0-0-0/w STRC(4572)  r     1 VX_O
     0-0-0/w SBIN        r     1 VX_PASS1_ALL_TYPE(0:9)
     0-0-0/w PTR         r     1 VX_ROOT$                   0-0-0/w STRC(1440)  r     1 VX_RU_HEAD

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC(3672)  r     1 VX$NODE
     0-0-0/w STRC(108)   r     1 VX$SECTNUM                 0-0-0/w STRC(72)    r     1 VX$TMPLT
     0-0-0/w STRC(72)    r     1 VXD$TMPLT


   Procedure VXO$DUPCHK requires 979 words for executable code.
   Procedure VXO$DUPCHK requires 76 words of local(AUTO) storage.
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:108  

    No errors detected in file VXO$DUPCHK.:E05TSI    .
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:109  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:110  
          MINI XREF LISTING

ABOVE_MULT
      6836**DCL      7114<>CALL     7132>>IF       7267>>IF       7268>>IF
ABOVE_OBJECT
      6838**DCL      7120<<ASSIGN   7122<<ASSIGN   7129>>IF       7135>>IF       7307>>ASSIGN
ABOVE_PREC
      6959**DCL      7158<<ASSIGN   7159>>IF       7160>>ASSIGN   7172>>IF
ABOVE_VALUE
      6957**DCL      7114<>CALL     7115>>DOCASE   7158>>ASSIGN
B$DNAME.COUNT
      6810**DCL      6817--IMP-SIZ  7021>>DOWHILE  7021>>DOWHILE  7063>>IF       7063>>IF       7066>>IF
      7066>>IF       7083>>IF       7083>>IF       7089>>IF       7089>>IF       7203>>IF       7203>>IF
      7206>>IF       7206>>IF       7223>>IF       7223>>IF       7229>>IF       7229>>IF       7285>>IF
      7285>>IF       7297>>IF       7297>>IF       7408>>IF       7408>>IF       7419>>IF       7419>>IF
B$DNAME.TEXT
      6817**DCL      7021>>DOWHILE  7021>>DOWHILE  7063>>IF       7063>>IF       7066>>IF       7066>>IF
      7083>>IF       7083>>IF       7089>>IF       7089>>IF       7203>>IF       7203>>IF       7206>>IF
      7206>>IF       7223>>IF       7223>>IF       7229>>IF       7229>>IF       7285>>IF       7285>>IF
      7297>>IF       7297>>IF       7408>>IF       7408>>IF       7419>>IF       7419>>IF
BELOW_MULT
      6837**DCL      7027<>CALL     7133>>IF       7135>>IF       7249<>CALL     7267>>IF       7268>>IF
      7306<>CALL
BELOW_OBJECT
      6839**DCL      7032<<ASSIGN   7034<<ASSIGN   7135>>IF       7307<<ASSIGN
BELOW_VALUE
      6958**DCL      7027<>CALL     7028>>DOCASE   7159>>IF       7164>>ASSIGN   7249<>CALL     7250>>DOCASE
      7306<>CALL
BIN_CHECK
      7092**LABEL    7087--GOTO
BIN_CHECK_SEC
      7232**LABEL    7227--GOTO
BIN_FOUND
      7112**LABEL    7068--GOTO
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:111  
BIN_FOUND_AGAIN
      7114**LABEL    7309--GOTO
BIN_FOUND_SEC
      7249**LABEL    7208--GOTO
BIN_HIGH
      6979**DCL      7077<<ASSIGN   7080>>ASSIGN   7092<<ASSIGN   7094>>IF       7217<<ASSIGN   7220>>ASSIGN
      7232<<ASSIGN   7234>>IF
BIN_LOW
      6978**DCL      7076<<ASSIGN   7080>>ASSIGN   7086<<ASSIGN   7094>>IF       7216<<ASSIGN   7220>>ASSIGN
      7226<<ASSIGN   7234>>IF
BIN_MID
      6980**DCL      7080<<ASSIGN   7081>>ASSIGN   7086>>ASSIGN   7092>>ASSIGN   7220<<ASSIGN   7221>>ASSIGN
      7226>>ASSIGN   7232>>ASSIGN
BIN_N$
      6995**DCL      7042<<ASSIGN   7062>>ASSIGN   7082>>ASSIGN   7180<<ASSIGN   7202>>ASSIGN   7222>>ASSIGN
      7285>>IF       7285>>IF       7297>>IF       7297>>IF
BIN_NTEMP$
      6981**DCL      7062<<ASSIGN   7063>>IF       7063>>IF       7066>>IF       7066>>IF       7082<<ASSIGN
      7083>>IF       7083>>IF       7089>>IF       7089>>IF       7202<<ASSIGN   7203>>IF       7203>>IF
      7206>>IF       7206>>IF       7222<<ASSIGN   7223>>IF       7223>>IF       7229>>IF       7229>>IF
BIN_RESULT$
      6994**DCL      7060<<ASSIGN   7061>>DOWHILE  7062>>ASSIGN   7071<<ASSIGN   7071>>ASSIGN   7081<<ASSIGN
      7082>>ASSIGN   7114<>CALL     7146>>IF       7147>>ASSIGN   7148>>ASSIGN   7150<>CALL     7161>>ASSIGN
      7277>>ASSIGN   7278>>ASSIGN
BIN_SPLIT
      7078**LABEL    7094--GOTO
BIN_SPLIT_SEC
      7218**LABEL    7234--GOTO
BIN_START$
      6992**DCL      7040<<ASSIGN   7058>>IF       7059>>IF       7060>>ASSIGN   7077>>ASSIGN   7078>>ASSIGN
      7178<<ASSIGN   7198>>IF       7199>>IF       7200>>ASSIGN   7217>>ASSIGN   7218>>ASSIGN   7281>>IF
BIN_START1$
      6982**DCL      7078<<ASSIGN   7081>>ASSIGN   7218<<ASSIGN   7221>>ASSIGN
BIN_STOP$
      6993**DCL      7041<<ASSIGN   7059>>IF       7061>>DOWHILE  7077>>ASSIGN   7179<<ASSIGN   7199>>IF
      7201>>DOWHILE  7217>>ASSIGN   7293>>IF
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:112  
BY_PASS
      6845**DCL      7112<<ASSIGN   7117>>IF       7129>>IF       7175<<ASSIGN
CHECK_ANY_DUPS
      7464**LABEL    7421--GOTO
CHECK_DOWN_PATH
      7039**LABEL    7315--GOTO
CHECK_FIRST
      7433**LABEL    7448--GOTO     7452--GOTO     7455--GOTO     7458--GOTO
CURR$
      6909**DCL      7037<<ASSIGN   7039>>IF       7040>>ASSIGN   7041>>ASSIGN   7042>>ASSIGN   7150>>CALL
      7167>>ASSIGN   7305>>CALL     7314<<ASSIGN   7314>>ASSIGN
CURRENT_PREC
      6960**DCL      7160<<ASSIGN   7164<<ASSIGN   7172>>IF       7255>>IF       7256<<ASSIGN
CURRENT_TYPE
      6956**DCL      7411<<ASSIGN   7412<<ASSIGN   7413>>IF       7413>>IF       7435<<ASSIGN   7447>>IF
      7452>>IF       7453>>IF       7455>>IF       7456>>IF       7458>>IF
DEF$ IN PROCEDURE GET_VALS
      7334**DCL      7332--PROC     7338>>IF       7340>>ASSIGN   7341>>ASSIGN   7344>>ASSIGN   7345>>ASSIGN
DEF_OBJECT_COUNT
      6971**DCL      7413<<ASSIGN   7414<<ASSIGN   7429>>IF       7431<<ASSIGN   7431>>ASSIGN   7444<<ASSIGN
      7465>>IF
DUPSTOP$
      6913**DCL      7410<<ASSIGN   7422<<ASSIGN   7464>>IF       7481>>ASSIGN   7482>>DOWHILE
FINISHED
      6846**DCL      7279<<ASSIGN   7280>>DOWHILE  7282<<ASSIGN   7288<<ASSIGN   7291<<ASSIGN   7292>>DOWHILE
      7294<<ASSIGN   7300<<ASSIGN
FIRST_START$
      6918**DCL      7277<<ASSIGN   7281>>IF       7284>>ASSIGN   7287<<ASSIGN   7305<>CALL
FIRST_STOP$
      6919**DCL      7278<<ASSIGN   7293>>IF       7296>>ASSIGN   7299<<ASSIGN   7305<>CALL
GET_VALS
      7332**PROC     7027--CALL     7114--CALL     7249--CALL     7306--CALL
HAVE_FIRST
      7435**LABEL    7445--GOTO     7450--GOTO     7453--GOTO     7456--GOTO
HOLD$
      6923**DCL      7161<<ASSIGN   7165<<ASSIGN   7174>>ASSIGN   7257<<ASSIGN
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:113  
I
      6941**DCL      6942--REDEF
J
      6943**DCL      6944--REDEF    7010<<DOINDEX  7011>>ASSIGN   7012>>ASSIGN   7399<<DOINDEX  7400>>ASSIGN
      7401>>ASSIGN
J1
      6954**DCL      7011<<ASSIGN   7145>>ASSIGN   7400<<ASSIGN   7478>>ASSIGN
JUMP_OUT
      7026**LABEL    7020--GOTO     7024--GOTO
K
      6945**DCL      6946--REDEF
L
      6947**DCL      6948--REDEF
MOVE
      7351**PROC     7150--CALL     7305--CALL
MOVE_ABOVE_TO_BELOW
      7132**LABEL    7173--GOTO
MOVE_BELOW_2_ABOVE
      7267**LABEL    7176--GOTO
MULT IN PROCEDURE GET_VALS
      7336**DCL      7332--PROC     7341<<ASSIGN   7345<<ASSIGN
NEXT_P$
      6921**DCL      7019<<ASSIGN   7020>>IF       7021>>DOWHILE  7021>>DOWHILE  7023<<ASSIGN   7023>>ASSIGN
      7024>>IF       7026>>ASSIGN   7318>>ASSIGN
NODE# IN PROCEDURE MOVE
      7355**DCL      7351--PROC     7380<>CALL     7383<>CALL
NO_DUPS_LOCAL
      7489**LABEL    7409--GOTO     7464--GOTO
NO_DUPS_THIS_ANCESTOR_IN_DEFS
      7314**LABEL    7058--GOTO     7069--GOTO     7073--GOTO     7102--GOTO     7118--GOTO
NPOINTER IN PROCEDURE MOVE
      7359**DCL      7366<<ASSIGN   7371>>ASSIGN   7379>>ASSIGN   7388>>ASSIGN
P$
      6905**DCL      7013<<ASSIGN   7014>>IF       7017>>DOWHILE  7018>>ASSIGN   7019>>ASSIGN   7027<>CALL
      7150<>CALL     7165>>ASSIGN   7306<>CALL     7318<<ASSIGN   7402<<ASSIGN   7403>>IF       7405>>DOWHILE
      7406>>ASSIGN   7407>>ASSIGN   7410>>ASSIGN   7411>>IF       7411>>ASSIGN   7412>>ASSIGN   7415>>ASSIGN
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:114  
      7416>>ASSIGN   7464>>IF       7480>>ASSIGN   7481<<ASSIGN   7489<<ASSIGN   7489>>ASSIGN
PATH_CURR$
      6912**DCL      7003<<ASSIGN   7004>>ASSIGN   7005>>DOWHILE  7006>>ASSIGN   7006>>ASSIGN   7007<<ASSIGN
      7007>>ASSIGN
PN$
      6914**DCL      7018<<ASSIGN   7021>>DOWHILE  7021>>DOWHILE  7063>>IF       7063>>IF       7066>>IF
      7066>>IF       7083>>IF       7083>>IF       7089>>IF       7089>>IF       7203>>IF       7203>>IF
      7206>>IF       7206>>IF       7223>>IF       7223>>IF       7229>>IF       7229>>IF       7285>>IF
      7285>>IF       7297>>IF       7297>>IF       7406<<ASSIGN   7408>>IF       7408>>IF       7419>>IF
      7419>>IF
PNAM$
      6916**DCL      7009<<ASSIGN   7018>>ASSIGN   7021>>DOWHILE  7021>>DOWHILE  7398<<ASSIGN   7406>>ASSIGN
      7408>>IF       7408>>IF       7418>>ASSIGN
Q$
      6906**DCL      7407<<ASSIGN   7408>>IF       7408>>IF       7417>>DOWHILE  7418>>ASSIGN   7422>>ASSIGN
      7423>>IF       7424>>ASSIGN   7427>>ASSIGN   7433>>IF       7436>>ASSIGN   7437>>ASSIGN   7461<<ASSIGN
      7461>>ASSIGN
QN$
      6915**DCL      7418<<ASSIGN   7419>>IF       7419>>IF
R$
      6907**DCL      7284<<ASSIGN   7285>>IF       7285>>IF       7287>>ASSIGN   7296<<ASSIGN   7297>>IF
      7297>>IF       7299>>ASSIGN   7480<<ASSIGN   7482>>DOWHILE  7483>>IF       7484>>ASSIGN   7486<<ASSIGN
      7486>>ASSIGN
RESULT$ IN PROCEDURE MOVE
      7356**DCL      7351--PROC     7367>>IF       7367>>IF       7370>>ASSIGN   7374>>CALL     7378>>ASSIGN
      7386>>ASSIGN
RESULT_NODE# IN PROCEDURE MOVE
      7357**DCL      7351--PROC     7374<>CALL
RESULT_SECT# IN PROCEDURE MOVE
      7360**DCL      7374<>CALL     7380<>CALL     7384>>ASSIGN
RTYPE
      6950**DCL      7012<<ASSIGN   7013>>ASSIGN   7015>>ASSIGN   7040>>ASSIGN   7041>>ASSIGN   7146>>IF
      7178>>ASSIGN   7179>>ASSIGN   7269>>IF       7321>>ASSIGN   7322<>CALL     7323>>CALL     7327>>CALL
      7338>>IF       7367>>IF       7375>>IF       7401<<ASSIGN   7402>>ASSIGN   7404>>ASSIGN   7411>>IF
      7423>>IF       7466>>IF
SECT# IN PROCEDURE MOVE
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:115  
      7361**DCL      7383<>CALL     7385<<ASSIGN   7387>>ASSIGN
SECTNUM$ IN PROCEDURE MOVE
      7362**DCL      7383<>CALL     7384>>ASSIGN
SEC_CHECK_DOWN_PATH
      7170**LABEL    7198--GOTO     7209--GOTO     7213--GOTO     7242--GOTO     7252--GOTO     7259--GOTO
SEC_CURR$
      6910**DCL      7167<<ASSIGN   7170<<ASSIGN   7170>>ASSIGN   7171>>IF       7178>>ASSIGN   7179>>ASSIGN
      7180>>ASSIGN   7305>>CALL
SEC_RESULT$
      6911**DCL      7174<<ASSIGN   7200<<ASSIGN   7201>>DOWHILE  7202>>ASSIGN   7211<<ASSIGN   7211>>ASSIGN
      7221<<ASSIGN   7222>>ASSIGN   7249<>CALL     7257>>ASSIGN   7269>>IF       7270>>ASSIGN   7273>>ASSIGN
      7305<>CALL
SET_NEXT_P
      7318**LABEL    7030--GOTO     7039--GOTO     7152--GOTO
SIZE
      6953**DCL      7321<<ASSIGN   7323<>CALL     7327<>CALL
START$ IN PROCEDURE MOVE
      7353**DCL      7351--PROC     7364>>ASSIGN
STOP$
      6917**DCL      7015<<ASSIGN   7017>>DOWHILE  7020>>IF       7024>>IF       7404<<ASSIGN   7405>>DOWHILE
      7417>>DOWHILE
STOP$ IN PROCEDURE MOVE
      7354**DCL      7351--PROC     7365>>DOWHILE
STOP_P$
      6922**DCL      7026<<ASSIGN   7150<>CALL
SYM_PREC
      6962**DCL      7158>>ASSIGN   7159>>IF       7164>>ASSIGN   7255>>IF       7256>>ASSIGN
TEMP$ IN PROCEDURE MOVE
      7358**DCL      7364<<ASSIGN   7365>>DOWHILE  7366>>ASSIGN   7370>>ASSIGN   7371>>ASSIGN   7375>>IF
      7375>>IF       7378>>ASSIGN   7379>>ASSIGN   7380>>CALL     7383>>CALL     7385>>ASSIGN   7386>>ASSIGN
      7387>>ASSIGN   7388>>ASSIGN   7391<<ASSIGN   7391>>ASSIGN
VALUE
      6951**DCL      7255>>IF       7256>>ASSIGN   7416<<ASSIGN   7433>>IF       7436<<ASSIGN
VALUE IN PROCEDURE GET_VALS
      7335**DCL      7332--PROC     7340<<ASSIGN   7344<<ASSIGN
VX$NODE.ADDR_START_A
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:116  
      6470**DCL      6471--REDEF
VX$NODE.ADDR_STOP_A
      6475**DCL      6476--REDEF
VX$NODE.FATHER$
      6460**DCL      7005>>DOWHILE  7006>>ASSIGN   7007>>ASSIGN
VX$NODE.L_PREV_SIZE
      6528**DCL      6539--REDEF
VX$NODE.L_SC_START
      6547**DCL      6552--REDEF
VX$NODE.L_SC_STOP
      6553**DCL      6558--REDEF
VX$NODE.L_SIZE
      6516**DCL      6527--REDEF
VX$NODE.L_SIZE_A
      6527**DCL      7321>>ASSIGN
VX$NODE.L_START
      6492**DCL      6503--REDEF
VX$NODE.L_START.DN$
      6494**DCL      7009>>ASSIGN   7042>>ASSIGN   7180>>ASSIGN   7398>>ASSIGN
VX$NODE.L_START_A$
      6503**DCL      7013>>ASSIGN   7040>>ASSIGN   7178>>ASSIGN   7323<>CALL     7402>>ASSIGN
VX$NODE.L_STOP
      6504**DCL      6515--REDEF
VX$NODE.L_STOP_A$
      6515**DCL      7015>>ASSIGN   7041>>ASSIGN   7179>>ASSIGN   7404>>ASSIGN
VX$NODE.NUM
      6468**DCL      7150<>CALL     7150<>CALL     7305<>CALL     7305<>CALL     7322<>CALL
VX$NODE.PATH$
      6461**DCL      7004<<ASSIGN   7006<<ASSIGN   7170>>ASSIGN   7314>>ASSIGN
VX$NODE.PROMOTE_HEAD
      6559**DCL      6562--REDEF
VX$NODE.PROMOTE_TAIL
      6563**DCL      6566--REDEF
VX$NODE.START_PAGE#_A
      6480**DCL      6481--REDEF
VX$NODE.STOP_PAGE#_A
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:117  
      6485**DCL      6486--REDEF
VX$SECTNUM.RU_SECT#
      6697**DCL      7384<<ASSIGN
VX$TMPLT.A
      6722**DCL      6723--REDEF    6724--REDEF    7062>>ASSIGN   7082>>ASSIGN   7202>>ASSIGN   7222>>ASSIGN
VXD$TMPLT
      6601**DCL      7019--ASSIGN   7023--ASSIGN   7026--ASSIGN   7059--IF       7071--ASSIGN   7077--ASSIGN
      7078--ASSIGN   7081--ASSIGN   7199--IF       7211--ASSIGN   7217--ASSIGN   7218--ASSIGN   7221--ASSIGN
      7284--ASSIGN   7296--ASSIGN   7370<<ASSIGN   7370>>ASSIGN   7374<>CALL     7378<<ASSIGN   7378>>ASSIGN
      7380<>CALL     7383<>CALL     7386<<ASSIGN   7386>>ASSIGN   7391--ASSIGN   7407--ASSIGN   7461--ASSIGN
      7484<<ASSIGN   7484>>ASSIGN   7486--ASSIGN   7489--ASSIGN
VXD$TMPLT.AD.ISADDR
      6624**DCL      6626--REDEF
VXD$TMPLT.AD.LFLAGS.MULTIPLE
      6614**DCL      7148<<ASSIGN   7273<<ASSIGN   7345>>ASSIGN   7470<<ASSIGN
VXD$TMPLT.AD.LFLAGS.SOURCE
      6610**DCL      7344>>ASSIGN   7412>>ASSIGN   7427>>ASSIGN
VXD$TMPLT.AD.LOOKUP_SECTNUM
      6618**DCL      7367>>IF       7375>>IF
VXD$TMPLT.AD.SECTNUM
      6621**DCL      7385>>ASSIGN   7387<<ASSIGN
VXD$TMPLT.CONSTNT
      6631**DCL      7146>>IF       7269>>IF       7338>>IF       7367>>IF       7375>>IF       7411>>IF
      7423>>IF       7466>>IF
VXD$TMPLT.LFLAGS
      6637**DCL      6650--REDEF
VXD$TMPLT.LFLAGS.MULTIPLE
      6640**DCL      7147<<ASSIGN   7270<<ASSIGN   7341>>ASSIGN   7467<<ASSIGN
VXD$TMPLT.LFLAGS.SOURCE
      6644**DCL      7340>>ASSIGN   7411>>ASSIGN   7424>>ASSIGN
VXD$TMPLT.NPOINTER
      6628**DCL      7018>>ASSIGN   7021>>DOWHILE  7021>>DOWHILE  7285>>IF       7285>>IF       7297>>IF
      7297>>IF       7366>>ASSIGN   7371<<ASSIGN   7379<<ASSIGN   7388<<ASSIGN   7406>>ASSIGN   7408>>IF
      7408>>IF       7416>>ASSIGN   7418>>ASSIGN   7433>>IF       7436>>ASSIGN
VXD$TMPLT.VALUE
      6602**DCL      6604--REDEF
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:118  
VXF$FREE
      6874**DCL-ENT  7327--CALL
VXI$WRITE
      6884**DCL-ENT  7323--CALL
VXK$KEY
      6882**DCL-ENT  7322--CALL
VXU$FIND_SECTNUM
      6887**DCL-ENT  7374--CALL     7383--CALL
VXU$NEW_SECTNUM
      6886**DCL-ENT  7380--CALL
VX_BIAS.A
      5469**DCL      5470--REDEF
VX_CBUF.CHARS_A
      5403**DCL      5404--REDEF
VX_CURR$
      5438**DCL      7003>>ASSIGN   7009>>ASSIGN   7013>>ASSIGN   7015>>ASSIGN   7039>>IF       7150>>CALL
      7171>>IF       7321>>ASSIGN   7322>>CALL     7323>>CALL     7398>>ASSIGN   7402>>ASSIGN   7404>>ASSIGN
VX_DEF_REC_A
      6110**DCL      7010--DOINDEX  7012>>ASSIGN   7399--DOINDEX  7401>>ASSIGN
VX_EBUF.CHARS_A
      5992**DCL      5993--REDEF
VX_EFIELD1.CHARS
      6001**DCL      6002--REDEF
VX_EFIELD2.CHARS
      6005**DCL      6006--REDEF
VX_EFIELD3.CHARS
      6009**DCL      6010--REDEF
VX_EI_KEY_BUF.KEY
      6385**DCL      6386--REDEF
VX_ERRORS
      5446**DCL      5457--REDEF
VX_ERRORS.CONFLICT_A
      5452**DCL      5453--REDEF
VX_ERRORS.MULTIPLE
      5447**DCL      7133<<ASSIGN   7133>>ASSIGN   7140<<ASSIGN   7140>>ASSIGN   7267<<ASSIGN   7267>>ASSIGN
      7473<<ASSIGN   7473>>ASSIGN
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:119  
VX_ERRORS.UNSAT_A
      5448**DCL      5449--REDEF
VX_ERR_SEV
      5459**DCL      7143>>IF       7143<<ASSIGN   7476>>IF       7476<<ASSIGN
VX_NODE_NUMBER
      5429**DCL      7016>>IF
VX_O.ACCTN_A$
      5598**DCL      5599--REDEF
VX_O.DCB_MATCH_A$
      5607**DCL      5608--REDEF
VX_O.DCB_MATCH_HIT_A
      5613**DCL      5614--REDEF
VX_O.FIDN_A$
      5592**DCL      5593--REDEF
VX_O.FID_A$
      5584**DCL      5585--REDEF
VX_O.INCLUDE_A$
      5604**DCL      5605--REDEF
VX_O.MAP_A
      5578**DCL      5579--REDEF
VX_O.NODCB_A
      5635**DCL      5636--REDEF
VX_O.NUM_A
      5523**DCL      5525--REDEF
VX_O.OPT_A
      5623**DCL      5624--REDEF
VX_O.PRIV_A
      5539**DCL      5541--REDEF
VX_O.SIN.DUPLICATE
      5511**DCL      7135>>IF       7465>>IF
VX_O.SIN_A
      5492**DCL      5493--REDEF
VX_O.TCB_A
      5619**DCL      5620--REDEF
VX_OD.ACCTN_A$
      5796**DCL      5797--REDEF
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:120  
VX_OD.DCB_MATCH_A$
      5805**DCL      5806--REDEF
VX_OD.FIDN_A$
      5790**DCL      5791--REDEF
VX_OD.FID_A$
      5782**DCL      5783--REDEF
VX_OD.INCLUDE_A$
      5802**DCL      5803--REDEF
VX_OD.MAP_A
      5776**DCL      5777--REDEF
VX_OD.NODCB_A
      5820**DCL      5821--REDEF
VX_OD.NUM_A
      5723**DCL      5724--REDEF
VX_OD.PRIV_A
      5738**DCL      5739--REDEF
VX_OD.SIN_A
      5692**DCL      5693--REDEF
VX_OD.VECTOR_A$
      5811**DCL      5812--REDEF
VX_OL.MAX_A
      5667**DCL      5669--REDEF
VX_OL.MIN_A
      5652**DCL      5653--REDEF
VX_ON.ACCTN_A$
      5941**DCL      5943--REDEF
VX_ON.DCB_MATCH_A$
      5952**DCL      5954--REDEF
VX_ON.FIDN_A$
      5934**DCL      5936--REDEF
VX_ON.FID_A$
      5925**DCL      5927--REDEF
VX_ON.INCLUDE_A$
      5948**DCL      5950--REDEF
VX_ON.MAP_A
      5918**DCL      5920--REDEF
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:121  
VX_ON.NODCB_A$
      5968**DCL      5969--REDEF
VX_ON.NUM_A
      5863**DCL      5865--REDEF
VX_ON.PRIV_A
      5879**DCL      5881--REDEF
VX_ON.SIN_A
      5831**DCL      5833--REDEF
VX_ON.VECTOR_A$
      5959**DCL      5960--REDEF
VX_OUHEAD.VERSION
      5278**DCL      5280--REDEF
VX_OU_HEAD
      5221**DCL      5260--REDEF
VX_OU_HEAD.REC_A
      5233**DCL      5236--REDEF
VX_PASS1_ALL_TYPE
      6106**DCL      7327<>CALL
VX_PASS2_REF.OU.L_START
      6171**DCL      6176--REDEF
VX_PASS2_REF.OU.L_STOP
      6177**DCL      6182--REDEF
VX_PASS2_REF.OU.MAX
      6165**DCL      6170--REDEF
VX_PASS2_REF.OU.SIZE
      6183**DCL      6188--REDEF
VX_PASS2_REF.SAT.COUNT
      6210**DCL      6216--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
      6217**DCL      6223--REDEF
VX_PASS2_REF.SAT.L_START
      6196**DCL      6202--REDEF
VX_PASS2_REF.SAT.L_STOP
      6203**DCL      6209--REDEF
VX_PASS2_REF.SAT.MAX
      6190**DCL      6195--REDEF
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:122  
VX_PASS2_REF.UNSAT.L_START
      6258**DCL      6263--REDEF
VX_PASS2_REF.UNSAT.L_STOP
      6264**DCL      6269--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
      6270**DCL      6275--REDEF
VX_PASS2_REF.UNSAT.MAX
      6252**DCL      6257--REDEF
VX_PASS2_REF.UNSAT.PAGE#
      6282**DCL      6287--REDEF
VX_PASS2_REF.UNSAT.SIZE
      6276**DCL      6281--REDEF
VX_PHRASE.PHRASE
      5684**DCL      5686--REDEF
VX_PROGRAM_BIAS.A
      5462**DCL      5463--REDEF
VX_ROOT$
      5435**DCL      7037>>ASSIGN
VX_RU_HEAD.MAP_BITS_A.MULTIPLE
      4897**DCL      7145<<ASSIGN   7478<<ASSIGN
VX_SPC.B$.MINE
      6353**DCL      6359--REDEF
VX_SPC.B$.NAME
      6332**DCL      6338--REDEF
VX_SPC.B$.SKIP
      6346**DCL      6352--REDEF
VX_SPC.B$.VALUE
      6339**DCL      6345--REDEF
VX_SPC.SEG.NAME
      6301**DCL      6307--REDEF
VX_SPC.SEG.VALUE
      6308**DCL      6314--REDEF
VX_TSX0_OVERLAY.H
      6076**DCL      6079--REDEF
WHERE_TYPE
      6955**DCL      7424<<ASSIGN   7427<<ASSIGN   7430>>IF       7430>>IF       7435>>ASSIGN   7442>>DOCASE
PL6.E3A0      #001=VXO$DUPCHK File=VXO$DUPCHK.:E05TSI                            WED 07/30/97 08:24 Page:123  
WHICH$
      6920**DCL      7415<<ASSIGN   7437<<ASSIGN   7466>>IF       7467>>ASSIGN   7470>>ASSIGN   7483>>IF
      7484>>ASSIGN
