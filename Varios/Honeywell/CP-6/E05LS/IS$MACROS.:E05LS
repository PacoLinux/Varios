

14:39 JUL 28 '97 IS$MACROS.:E05SI                                          1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /* AARDVARK Macros and Equs */
    7      /**/
    8      /**/
    9      %EQU OC#=1;
   10      %EQU LP#=1;
   11      %EQU CR#=1;
   12      %EQU MT#=17;
   13      %EQU DP#=2;
   14      %EQU FRSTLP=%OC#;
   15      %EQU FRSTCR=%(OC#+LP#);
   16      %EQU FRSTMT=%(OC#+LP#+CR#);
   17      %EQU FRSTDP=%(OC#+LP#+CR#+MT#);
   18      %EQU DIM=%(OC#+LP#+CR#+MT#+DP#);
   19      %EQU DFLTMT=%(FRSTMT+1);     /* Default PO tape */
   20      %EQU HIGH_CHAN = 63;
   21      %EQU HIGH_RPM_CHAN = 127;
   22      %EQU HIGHEST_IOM=3;
   23      %EQU MBOXSIZ=768;
   24      %EQU STSMSK='377237777760'O; /* Mask for PO tape status answer */
   25      %EQU BINCP6='206500551542'O; /* Binary value for'CP-6' */
   26      %EQU NIFWHDR=11; /* Size of header in NI$FW */
   27      %EQU MAXDCFW=1024*10; /* Max size of disk firmware */
   28      %EQU FWHDR#=20; /* Max nr of firmware modules */
   29      %EQU STATUS_MASK='77000777'O; /* Status mask after performing an IO operation */
   30      %EQU TERM_STATUS='4'O; /* Terminate status */
   31      %EQU NLPP=38; /*Nr of actual lines/printer page */
   32      %EQU IM_NSPG=16; /* Implicit nr of sectors/granule */
   33      %EQU G_VID=0; /* VID granule number */
   34      %EQU PATCH_GRS=1200; /* Nr of grans reserved on disk for patches */
   35      /* Firmware modules names */
   36      %EQU URFWNM='UCMN'; /* UR-MPC common firmware module name */
   37      %EQU URFWN2='URTP'; /* ELS MT/UR MPC common firmware */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          2    
   38      %EQU URFWN3='NONE'; /* No fw */
   39      %EQU LPFWNM='U400'; /* UR PRT400 firmware module name */
   40      %EQU CRPFWNM='UCRP'; /* UR CR/CP firmware module name */
   41      %EQU TPFWNM='M601'; /* Name of tape firmware module */
   42      %EQU TPFWN2='M610'; /* Name of tape firmware module */
   43      %EQU TPFWN3='TPUR'; /* Name of tape firmware module */
   44      %EQU DCFWNM='M191'; /* Name of disk firmware module */
   45      %EQU DCFWN2='D500'; /* Name of 509 disk firmware module */
   46      %EQU DCFWN3='MSP8'; /* Name of PPU disk firmware module */
   47      /**/
   48      %EQU CB_SAP=64; /* Control byte for Space after Print */
   49      %EQU CB_TOF=112; /* Control byte for Top of Form */
   50      /**/
   51      /* Device command codes */
   52      %EQU FCNRCRA=0; /* Read card ASCII */
   53      %EQU FCNRTB=0; /* Read tape binary */
   54      %EQU FCNWTB=1; /* Write tape binary */
   55      %EQU FCNRT9=2; /* Read tape nine */
   56      %EQU FCNSRB=12; /* Skip record backward */
   57      %EQU FCNWT9=3; /* Write tape nine */
   58      %EQU FCNWTE=5; /* Write EOF record */
   59      %EQU FCNREW=8; /* Rewind */
   60      %EQU FCNSDT8=6; /* Set density 800 */
   61      %EQU FCNSDT16=7; /* Set density 1600 */
   62      %EQU FCNSDT62=15;/* Set density 6250 */
   63      %EQU FCNUNL=9; /* Rewind and unload */
   64      %EQU FCNPER=14;
   65      %EQU FCNWFM=5;
   66      %EQU FCNSKR=10; /* Forward one record */
   67      %EQU FCNRDB=0; /* Read disk binary */
   68      %EQU FCNWDB=1; /* Write disk binary */
   69      %EQU FCNRDA=2; /* Read disk ASCII */
   70      %EQU FCNWDA=3; /* Write disk ASCII */
   71      %EQU FCNRDCNF=4; /* Read disk configuration */
   72      %EQU FCNRCA=0; /* Read console ASCII */
   73      %EQU FCNWCA=1; /* Write console ASCII */
   74      %EQU FCNWCM=2; /* Write console ASCII, no CR */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          3    
   75      %EQU FCNRCR=3; /* Read console ASCII, ret on Time-out */
   76      %EQU FCNRDC3 = 3;  /* Read data for channel 3 */
   77      %EQU FCNWDC3 = 13;  /* Write data for channel 3 */
   78      %EQU FCNWTC3 = 11 ;  /* Write text for channel 3 */
   79      %EQU FCNRSS = 32;  /* Reset status for channel 3 */
   80      /**/
   81      %EQU FIPS_3380D = 3;
   82      %EQU FIPS_3380E = 4;
   83      %EQU FIPS_3390J = 22;      /* .26 for model Js */
   84      %EQU FIPS_3391K = 21;      /* .25 for model Ks */
   85      %EQU MDS_1 = 5;      /* MDS I - FDS I  */
   86      %EQU MDS_2 = 7;      /* MDS II - SABRE V */
   87      /* Header type codes */
   88      %EQU XDLTLSTC=0;
   89      %EQU XDLTTC=1;
   90      %EQU MHJITTC=2;
   91      %EQU MDATATC=3;
   92      %EQU MPROCTC=4;
   93      %EQU MEDEFTC=5;
   94      %EQU MSDEFTC=6;
   95      %EQU MDNAMTC=7;
   96      %EQU MSCHEMTC=8;
   97      %EQU G1ROTC=9;
   98      %EQU G1DATATC=10;
   99      %EQU G1PROCTC=11;
  100      %EQU AEDEFTC=12;
  101      %EQU ASDEFTC=13;
  102      %EQU ADNAMTC=14;
  103      %EQU ASCHEMTC=15;
  104      %EQU SITEINFOTC=16;
  105      %EQU MROSEGTC=17;
  106      %EQU PATCHTC=18;
  107      %EQU NUMTC=19;
  108      /**/
  109      %EQU MAXMEMPG=16383; /* Max page number on DP8, L66, ELS systems */
  110      %EQU RPM_MAXMEMPG=65535; /* Max page number on RPM systems */
  111      %EQU S1000_MAXMEMPG=65535; /* Max page number on DPS90 systems */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          4    
  112      /**/
  113      /* PTR_STRUCT */
  114      /**/
  115      %MACRO PTR_STRUCT(NAME=PTR_STRUCT,STCLASS="STATIC SYMDEF");
  116      /**/
  117         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  118         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  119               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  120               (SUBSTR(STR,0,3) = 'EXT');
  121            %LSET INIT = CHARTEXT('INIT');
  122         %ELSE;
  123            %LSET INIT = CHARTEXT('/*');
  124         %ENDIF;
  125      /**/
  126      DCL 1 NAME STCLASS ALIGNED,
  127            2 WOFFS UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  128            2 BYTEPOS UBIN(2) UNAL %INIT(0)%CHARTEXT('/**/'),
  129            2 BITPOS UBIN(4) UNAL %INIT(0)%CHARTEXT('/**/'),
  130            2 S_D_FIELD BIT(12) UNAL %INIT('6000'O)%CHARTEXT('/**/');
  131      /**/
  132      %MEND;
  133      /**/
  134      /**/
  135      /* DEVICE INFO */
  136      /**/
  137      %MACRO DEVINFO(NAME=DEVINFO,STCLASS="STATIC SYMDEF");
  138      /**/
  139         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  140         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  141               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  142               (SUBSTR(STR,0,3) = 'EXT');
  143            %LSET INIT = CHARTEXT('INIT');
  144         %ELSE;
  145            %LSET INIT = CHARTEXT('/*');
  146         %ENDIF;
  147      /**/
  148      DCL 1 NAME(0:%(DIM-1)) STCLASS DALIGNED,
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          5    
  149            2 CHN# UBIN(9) UNAL %INIT(0*%OC#,24*%LP#,26*%CR#,0*%MT#,8*%DP#)%CHARTEXT('/**/'),
  150            2 DEV# UBIN(6) UNAL %INIT(0,1*%(DIM-1))%CHARTEXT('/**/'),
  151            2 IOM# UBIN(2) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  152            2 BITS BIT(36) ALIGNED %INIT('0'B*0)%CHARTEXT('/**/'),
  153            2 PCWS DALIGNED,
  154              3 PCW1,
  155                4 CHINFO1 BIT(6) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  156                4 DEV# UBIN(6) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  157                4 ADEXT BIT(6) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  158                4 PCWID BIT(3) UNAL %INIT('7'O*0)%CHARTEXT('/**/'),
  159                4 M BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  160                4 CHINFO2 BIT(14) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  161              3 PCW2 ALIGNED,
  162                4 CHN# UBIN(9) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  163                4 * BIT(27) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  164            2 RPM_PTRS REDEF PCWS,
  165              3 MBX$ PTR,
  166              3 EF_DCWS$ PTR,
  167              3 EF_DCWS_PTR REDEF EF_DCWS$,
  168                4 WOFFS UBIN HALF UNAL,
  169                4 * BIT(18),
  170            2 STATUS DALIGNED,
  171              3 TBIT BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  172              3 PBIT BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  173              3 MAJ_STAT BIT(4) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  174              3 SUB_STAT BIT(6) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  175              3 SS1 BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  176              3 MRK BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  177              3 SS2 BIT(2) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  178              3 IBIT BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  179              3 ABIT BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  180              3 IOM_CHAN_STAT BIT(3) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  181              3 IOM_CENT_STAT BIT(3) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  182              3 ADEXT BIT(6) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  183              3 REC_RESID UBIN(6) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  184              3 NEXT_ADDR UBIN(18) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  185              3 CHAR_POS UBIN(3) UNAL %INIT(0*0)%CHARTEXT('/**/'),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          6    
  186              3 RBIT BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  187              3 ACTION_CODE BIT(2) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  188              3 TALLY_RESID UBIN(12) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  189            2 BSTAT REDEF STATUS,
  190              3 W1,
  191                4 H1 BIT(18),
  192                4 H2 BIT(18),
  193              3 W2,
  194                4 H1 BIT(18),
  195                4 H2 BIT(18),
  196            2 DEVNAME CHAR(8) UNAL %INIT('TY 0-000'*%OC#,'LP 0-024'*%LP#,'CR 0-026'*%CR#,
  197                                         '0-000-01'*%MT#,'0-008-01'*%DP#)%CHARTEXT('/**/'),
  198            2 HANDROUT$ EPTR %INIT(ENTADDR(OCIO)*%OC#,ENTADDR(LPIO)*%LP#,ENTADDR(CRIO)*%CR#,
  199                                  ENTADDR(MTIO)*%MT#,ENTADDR(DPIO)*%DP#)%CHARTEXT('/**/'),
  200            2 CLEANROUT$ EPTR %INIT(ENTADDR(OCCU)*%OC#,ENTADDR(LPCU)*%LP#,ENTADDR(CRCU)*%CR#,
  201                                   ENTADDR(MTCU)*%MT#,ENTADDR(DPCU)*%DP#)%CHARTEXT('/**/'),
  202            2 FUNCTAB$ PTR %INIT(ADDR(OCIDCW)*%OC#,ADDR(LPIDCW)*%LP#,ADDR(CRIDCW)*%CR#,
  203                                ADDR(MTIDCW)*%MT#,ADDR(DPIDCW)*%DP#)%CHARTEXT('/**/');
  204      /**/
  205      %MEND;
  206      /**/
  207      /* IOM-s TABLE */
  208      /**/
  209      %MACRO IOM_TAB(NAME=IOM_TAB,STCLASS="STATIC SYMDEF");
  210      /**/
  211         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  212         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  213               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  214               (SUBSTR(STR,0,3) = 'EXT');
  215            %LSET INIT = CHARTEXT('INIT');
  216         %ELSE;
  217            %LSET INIT = CHARTEXT('/*');
  218         %ENDIF;
  219      /**/
  220      DCL 1 NAME(0:3) STCLASS ALIGNED,
  221            2 MAILBAD UBIN(18) UNAL %INIT(0*4)%CHARTEXT('/**/'),
  222            2 * BIT(15) UNAL %INIT('0'B*4)%CHARTEXT('/**/'),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          7    
  223            2 PORT# UBIN(3) UNAL %INIT(0*4)%CHARTEXT('/**/');
  224      /**/
  225      %MEND;
  226      /**/
  227      %MACRO CONNECT_TAB(NAME=CONNECT_TABLE,STCLASS="STATIC SYMDEF");
  228      /**/
  229         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  230         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  231               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  232               (SUBSTR(STR,0,3) = 'EXT');
  233            %LSET INIT = CHARTEXT('INIT');
  234         %ELSE;
  235            %LSET INIT = CHARTEXT('/*');
  236         %ENDIF;
  237      /**/
  238      DCL 1 NAME STCLASS DALIGNED,
  239            2 ENTRI(0:23) UNAL,
  240              3 SCU_PORT UBIN(3) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  241              3 VALID BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  242              3 MBZ BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  243              3 RFU BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  244              3 IMUID UBIN(2) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  245              3 SYSID UBIN(4) UNAL %INIT(0*0)%CHARTEXT('/**/');
  246      %MEND;
  247      /**/
  248      /**/
  249      /* IMX MAILBOX */
  250      /**/
  251      %MACRO IMX_MBX(NAME=IMX_MBX,STCLASS="STATIC SYMDEF");
  252      /**/
  253         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  254         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  255               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  256               (SUBSTR(STR,0,3) = 'EXT');
  257            %LSET INIT = CHARTEXT('INIT');
  258         %ELSE;
  259            %LSET INIT = CHARTEXT('/*');
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          8    
  260         %ENDIF;
  261      /**/
  262      DCL 1 NAME STCLASS,
  263            2 BASE0 UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  264            2 BASE1 UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  265            2 BASE2 UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  266            2 BASE3 UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  267            2 SIZE0 SBIN HALF UNAL %INIT(-1)%CHARTEXT('/**/'),
  268            2 SIZE1 SBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  269            2 SIZE2 SBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  270            2 SIZE3 SBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  271            2 CHN_LINK,
  272               3 REL_MBAD SBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  273               3 * BIT(6) %INIT('0'B)%CHARTEXT('/**/'),
  274               3 MARK_LVL UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
  275               3 SYNC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  276               3 BASE_ID UBIN(2) UNAL %INIT(0)%CHARTEXT('/**/'),
  277               3 TERM_LVL UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
  278               3 STOP_ERR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  279               3 TERM_INHIB BIT(1) UNAL %INIT('1'B)%CHARTEXT('/**/'),
  280               3 CONTINUE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  281            2 LPW,
  282               3 DCW_ADDR UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  283               3 INH_BASCH0 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  284               3 DATA_BASE UBIN(2) UNAL %INIT(0)%CHARTEXT('/**/'),
  285               3 * BIT(6) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  286               3 INH_BASCH1 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  287               3 DCW_BASE UBIN(2) UNAL %INIT(0)%CHARTEXT('/**/'),
  288               3 * BIT(4) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  289               3 RESTR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  290               3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  291            2 STATUS,
  292              3 W8,
  293                4 TBIT BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  294                4 * BIT(35) %INIT('0'B)%CHARTEXT('/**/'),
  295              3 W8_INFO REDEF W8,
  296                4 TERM BIT(12),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          9    
  297                4 * BIT(24),
  298              3 W9 BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  299              3 W10 BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  300              3 W11 BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  301              3 W12 BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  302              3 W13 BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  303              3 W14 BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  304              3 W15 BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  305            2 EXTEND_STAT(0:7) BIT(36) %INIT('0'B*0)%CHARTEXT('/**/');
  306      /**/
  307      %MEND;
  308      /**/
  309      %MACRO DCW_STRUCT(NAME=DCW_STRUCT,STCLASS="STATIC SYMDEF");
  310         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  311         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  312               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  313               (SUBSTR(STR,0,3) = 'EXT');
  314            %LSET INIT = CHARTEXT('INIT');
  315         %ELSE;
  316            %LSET INIT = CHARTEXT('/*');
  317         %ENDIF;
  318      /**/
  319      DCL 1 NAME STCLASS ALIGNED,
  320            2 AD UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  321            2 CP UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
  322            2 NU BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  323            2 TYPE BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  324            2 TALLY UBIN(12) UNAL %INIT(0)%CHARTEXT('/**/');
  325      /**/
  326      %MEND;
  327      /**/
  328      /**/
  329      /* DOIO_COMZONE */
  330      /**/
  331      %MACRO DOIO_COMZONE(NAME=DOIO_COMZONE,STCLASS="STATIC SYMDEF");
  332      /**/
  333         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          10   
  334         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  335               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  336               (SUBSTR(STR,0,3) = 'EXT');
  337            %LSET INIT = CHARTEXT('INIT');
  338         %ELSE;
  339            %LSET INIT = CHARTEXT('/*');
  340         %ENDIF;
  341      /**/
  342      DCL 1 NAME STCLASS ALIGNED,
  343            2 W1,
  344              3 WOFFS UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  345              3 BYTEPOS UBIN(2) UNAL %INIT(0)%CHARTEXT('/**/'),
  346              3 BITPOS UBIN(4) UNAL %INIT(0)%CHARTEXT('/**/'),
  347              3 S_D_FIELD BIT(12) UNAL %INIT('6000'O)%CHARTEXT('/**/'),
  348           2 IDCW$ REDEF W1 PTR,
  349           2 DCW,
  350             3 BUFAD UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  351             3 * BIT(6) %INIT('0'B)%CHARTEXT('/**/'),
  352             3 TALLY UBIN(12) UNAL %INIT(0)%CHARTEXT('/**/'),
  353           2 BDCW REDEF DCW,
  354             3 H1 BIT(18),
  355             3 H2 BIT(18),
  356           2 DCW$ REDEF DCW PTR,
  357           2 TDCW REDEF DCW,
  358             3 AD UBIN(18) UNAL,
  359             3 * BIT(4),
  360             3 TYPE BIT(2),
  361             3 * BIT(12);
  362      /**/
  363      %MEND;
  364      /* Channel Mailbox structure */
  365      %MACRO CHANMBOX(NAME=CHANMBOX,STCLASS="BASED(CHAN$)");
  366      DCL 1 NAME STCLASS ALIGNED,
  367            2 W1,
  368              3 H1 BIT(18),
  369              3 H2,
  370                4 RES BIT(1),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          11   
  371                4 REL1 BIT(1),
  372                4 AE BIT(1),
  373                4 NC BIT(1),
  374                4 TAL BIT(1),
  375                4 REL BIT(1),
  376                4 TALLY UBIN(12) UNAL,
  377            2 LPW$ REDEF W1 PTR,
  378            2 W2,
  379              3 H1 BIT(18),
  380              3 H2 BIT(18),
  381            2 W3,
  382              3 H1 BIT(18),
  383              3 H2 BIT(18),
  384            2 SCW$ REDEF W3 PTR,
  385            2 W4,
  386              3 H1 BIT(18),
  387              3 H2 BIT(18),
  388            2 DCW$ REDEF W4 PTR;
  389      %MEND;
  390      %MACRO TEXTC(N#=N#,M#=M#);
  391      DCL 1 N# STATIC SYMDEF ALIGNED,
  392            2 * UBIN WORD INIT(LENGTHC(M#)),
  393            2 * CHAR(0) INIT(M#);
  394      %MEND;
  395      /**/
  396      /* Description of a firmware header */
  397      %MACRO FWHDR(NAME=FWHDR,STCLASS="BASED(FWHDR$)");
  398      DCL 1 NAME STCLASS ALIGNED,
  399            2 H11 BIT(18),
  400            2 BUFAD UBIN(18) UNAL,
  401            2 W2 BIT(36),
  402            2 CSOSIZE UBIN HALF UNAL,
  403            2 MMOSIZE UBIN HALF UNAL,
  404            2 FWNAME CHAR(4);
  405      %MEND;
  406      /**/
  407      /* Firmware table structure */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          12   
  408      /**/
  409      %MACRO FW_TAB(NAME=FW_TAB,STCLASS="STATIC SYMDEF",ENT#=1);
  410      /**/
  411         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  412         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  413               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  414               (SUBSTR(STR,0,3) = 'EXT');
  415            %LSET INIT = CHARTEXT('INIT');
  416         %ELSE;
  417            %LSET INIT = CHARTEXT('/*');
  418         %ENDIF;
  419      /**/
  420      DCL 1 NAME STCLASS ALIGNED,
  421            2 FWM# UBIN WORD %INIT(ENT#)%CHARTEXT('/**/'),
  422            2 FW_INDX SBIN WORD %INIT(-1)%CHARTEXT('/**/'),
  423            2 MODN(0:%(ENT#-1)) CHAR(4) %INIT(' '*0)%CHARTEXT('/**/');
  424      /**/
  425      %MEND;
  426      %MACRO FM$VID (NAME=FM$VID,STCLASS="BASED");
  427      DCL 1 NAME STCLASS ALIGNED,
  428                               /*****************************************/
  429                               /** VOLUME IDENTIFICATION GRANULE (0)              */
  430                               /*****************************************/
  431            2 ID CHAR(4),
  432                               /* SYSTEM ID.. 'CP6 ' IF FM$VID FITS               */
  433            2 INSTID BIT(36),
  434                               /* INSTALLATION ID                                 */
  435            2 VSN UBIN,
  436                               /* VOLUME SERIAL NUMBER                            */
  437            2 PSN CHAR(6),
  438                               /* PACKSET NAME                                    */
  439            2 VOLCNT UBIN HALF UNAL,
  440                               /* NUMBER OF VOLUMES IN THE SET. 0 IF SCRATCH PACK */
  441            2 SYSSIZE UBIN,
  442                          /* NUMBER OF GRANULES USED BY CP6 FOR INITIALIZATION    */
  443            2 SYSDIRDA UBIN WORD,
  444                /* GRANULE NUMBER OF SYSTEM AREA DIRECTORY - TOP GRANULE OF PACK  */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          13   
  445            2 INITTIME UBIN,
  446                               /* UTS OF LAST VID WRITE                           */
  447            2 SECTSTRT(0:25) UBIN,
  448                               /* GRANULE NUMBERS TO START EACH SECTION           */
  449            2 *(0:157)UBIN,
  450                               /* RESERVED FOR FUTURE USE                         */
  451            2 DGT(0:63),       /* DEFECTIVE GRANULE TABLE                         */
  452              3 FGRAN UBIN(18) UNAL, /* FIRST GRANULE OF TRACK                    */
  453              3 LGRAN UBIN(18) UNAL, /* LAST GRANULE OF TRACK                     */
  454            2 DTT(0:63)UBIN(18), /* DEFECTIVE TRACK TABLE                         */
  455                               /*   '777777'O = UNUSED ENTRY,                     */
  456                               /*   WORD 63 = ONES COMP CHECKSUM                  */
  457            2 DT(0:63)REDEF DTT,
  458              3 CYL UBIN(10) UNAL, /* CYLINDER NUMBER                             */
  459              3 HD UBIN(8) UNAL, /* HEAD NUMBER                                   */
  460              3 * BIT(18),
  461            2 SNLIST(0:175),
  462              3 VSN,
  463                4 S UBIN BYTE UNAL,
  464                               /* SECTION # CONTAINING PART OF THIS SET           */
  465                4 N UBIN (27) UNAL,
  466                               /* SERIAL NUMBER OF ANOTHER VOLUME                 */
  467              3 SIZE UBIN,
  468                               /* ITS SIZE IN GRANULES                            */
  469              3 TYPE CHAR(8);
  470                               /* ITS MODEL NUMBER                                */
  471      %MEND;
  472      /**/
  473      /* Directory header */
  474      %MACRO DIRHDR(NAME=DIRHDR,STCLASS="STATIC SYMDEF");
  475      DCL 1 NAME STCLASS ALIGNED,
  476            2 BASE SBIN WORD,
  477            2 DA UBIN WORD,
  478            2 TINF REDEF DA,
  479              3 * BIT(18),
  480              3 TYPE SBIN HALF UNAL,
  481            2 SIZE UBIN WORD,
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          14   
  482            2 TYPE UBIN HALF UNAL,
  483            2 START UBIN HALF UNAL;
  484      %MEND;
  485      /**/
  486      /* Debug header */
  487      %MACRO DB_HDR(NAME=DB_HDR,STCLASS="STATIC");
  488      /**/
  489         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  490         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  491               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  492               (SUBSTR(STR,0,3) = 'EXT');
  493            %LSET INIT = CHARTEXT('INIT');
  494         %ELSE;
  495            %LSET INIT = CHARTEXT('/*');
  496         %ENDIF;
  497      /**/
  498      DCL 1 NAME STCLASS ALIGNED,
  499            2 NPTR UBIN WORD UNAL %INIT(0)%CHARTEXT('/**/'),
  500            2 RECS(0:4),
  501              3 BASE UBIN WORD UNAL %INIT(0*0)%CHARTEXT('/**/'),
  502              3 RECPTR REDEF BASE,
  503                4 WOFFS UBIN HALF UNAL,
  504                4 * UBIN(6) UNAL,
  505                4 S_D_FIELD BIT(12),
  506              3 HBASE REDEF BASE,
  507                4 H1 UBIN HALF UNAL,
  508                4 H2 UBIN HALF UNAL,
  509              3 SIZE UBIN WORD  UNAL %INIT(0*0)%CHARTEXT('/**/'),
  510              3 HSIZE REDEF SIZE,
  511                4 H1 UBIN HALF UNAL,
  512                4 H2 UBIN HALF UNAL;
  513      /**/
  514      %MEND;
  515      /**/
  516      /* System area directory description */
  517      %MACRO DISKDIR(NAME=DISKDIR,STCLASS="STATIC SYMDEF");
  518      /**/
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          15   
  519         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  520         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  521               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  522               (SUBSTR(STR,0,3) = 'EXT');
  523            %LSET INIT = CHARTEXT('INIT');
  524         %ELSE;
  525            %LSET INIT = CHARTEXT('/*');
  526         %ENDIF;
  527      /**/
  528      DCL 1 NAME STCLASS ALIGNED,
  529            2 AARDVARK,
  530              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  531              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  532              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  533              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  534              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  535            2 LOWREAL,
  536              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  537              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  538              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  539              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  540              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  541            2 MONHJIT,
  542              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  543              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  544              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  545              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  546              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  547            2 MONDATA,
  548              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  549              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  550              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  551              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  552              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  553            2 MONPROC,
  554              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  555              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          16   
  556              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  557              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  558              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  559            2 MONPROC1,
  560              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  561              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  562              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  563              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  564              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  565            2 MONPROC2,
  566              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  567              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  568              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  569              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  570              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  571            2 MONPROC3,
  572              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  573              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  574              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  575              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  576              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  577            2 MONPROC4,
  578              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  579              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  580              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  581              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  582              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  583            2 MONPROC5,
  584              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  585              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  586              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  587              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  588              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  589            2 MONPROC6,
  590              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  591              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  592              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          17   
  593              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  594              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  595            2 MONPROC7,
  596              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  597              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  598              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  599              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  600              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  601            2 MONPROC8,
  602              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  603              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  604              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  605              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  606              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  607            2 MONPROC9,
  608              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  609              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  610              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  611              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  612              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  613            2 MONPROC10,
  614              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  615              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  616              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  617              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  618              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  619            2 MONPROC11,
  620              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  621              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  622              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  623              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  624              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  625            2 MONPROC12,
  626              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  627              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  628              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  629              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          18   
  630              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  631            2 MONPROC13,
  632              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  633              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  634              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  635              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  636              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  637            2 MONPROC14,
  638              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  639              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  640              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  641              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  642              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  643            2 TIGRDATA,
  644              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  645              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  646              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  647              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  648              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  649            2 G1RO,
  650              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  651              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  652              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  653              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  654              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  655            2 G1DATA,
  656              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  657              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  658              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  659              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  660              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  661            2 G1PROC,
  662              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  663              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  664              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  665              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  666              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          19   
  667            2 XDLS,
  668              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  669              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  670              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  671              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  672              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  673            2 XDPROC,
  674              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  675              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  676              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  677              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  678              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  679            2 SCHEMADIR,
  680              3 * BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  681              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  682              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  683              3 * BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  684            2 ENTDEFS,
  685              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  686              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  687              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  688              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  689              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  690            2 SYMDEFS,
  691              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  692              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  693              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  694              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  695              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  696            2 DEFNAMES,
  697              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  698              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  699              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  700              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  701              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  702            2 DEFDIR,
  703              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          20   
  704              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  705              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  706              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  707              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  708            2 SCHEMA,
  709              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  710              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  711              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  712              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  713              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  714            2 PATCH,
  715              3 * BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  716              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  717              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  718              3 * BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  719            2 DUMP,
  720              3 SCOUNT UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  721              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  722              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  723              3 LDUMP UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  724            2 RCVR2(0:3),
  725              3 DA UBIN WORD %INIT(0*0)%CHARTEXT('/**/'),
  726           2 MONID,
  727              3 A,                            /* AARDVARKS VERSION                  */
  728                4 VER CHAR(3) UNAL %INIT('___')%CHARTEXT('/**/'),  /*A00*/
  729                4 BOOTC UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),  /*BUMPED ON EACH BOOT OF A00          */
  730              3 M,                            /* FILE NAME VERSION                  */
  731                4 VER CHAR(3) UNAL,           /*A00                                 */
  732                4 BOOTC CHAR(1) UNAL,         /* A-Z                                */
  733                  3 M_CHAR4 REDEF M CHAR(4),
  734              3 * BIT(72),
  735            2 AENTDEFS,
  736              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  737              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  738              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  739              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  740              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          21   
  741            2 ASYMDEFS,
  742              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  743              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  744              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  745              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  746              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  747            2 ADEFNAMES,
  748              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  749              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  750              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  751              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  752              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  753            2 ASCHEMA,
  754              3 BASE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  755              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  756              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  757              3 TYPE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  758              3 START UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  759            2 SITEINFO,
  760              3 * BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  761              3 DA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  762              3 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  763              3 * BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  764            2 FW(0:19),
  765              3 INMEM BIT(1) %INIT('0'B*0)%CHARTEXT('/**/'),
  766              3 BASE UBIN(35) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  767              3 DA UBIN WORD %INIT(0*0)%CHARTEXT('/**/'),
  768              3 CS0SIZE UBIN HALF UNAL %INIT(0*0)%CHARTEXT('/**/'),
  769              3 MM0SIZE UBIN HALF UNAL %INIT(0*0)%CHARTEXT('/**/'),
  770              3 NAME CHAR(4) UNAL %INIT(' '*0)%CHARTEXT('/**/'),
  771              3 NAMEBIN REDEF NAME UBIN WORD UNAL;
  772      %MEND;
  773      /**/
  774      /* Macro to generate a template for a standard NSA descr */
  775      %MACRO DESCR(NAME=DESCR,STCLASS="STATIC SYMDEF",LVL=1,LAST=",");
  776         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  777         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          22   
  778               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  779               (SUBSTR(STR,0,3) = 'EXT');
  780            %LSET INIT = CHARTEXT('INIT');
  781         %ELSE;
  782            %LSET INIT = CHARTEXT('/*');
  783         %ENDIF;
  784      /**/
  785      %IF LVL=1;
  786      DCL 1 NAME STCLASS DALIGNED,
  787      %ELSE;
  788          %LVL NAME DALIGNED,
  789      %ENDIF;
  790            %(LVL+1) BOUND UBIN(20) UNAL %INIT(0)%CHARTEXT('/**/'), /* Bound field */
  791            %(LVL+1) FLGS BIT(9) UNAL %INIT('0'B)%CHARTEXT('/**/'), /* Flags */
  792            %(LVL+1) WSR UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'), /* Working space register number */
  793            %(LVL+1) TYP UBIN(4) UNAL %INIT(0)%CHARTEXT('/**/'), /* Descriptor type */
  794            %(LVL+1) BASE SBIN WORD %INIT(0)%CHARTEXT('/**/') LAST /* Base */
  795      /**/
  796      %MEND;
  797      /**/
  798      /*   AARDVARK Linkage Segment    */
  799      %MACRO AALS(NAME=AALS,STCLASS="STATIC SYMDEF");
  800      /**/
  801         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  802         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  803               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  804               (SUBSTR(STR,0,3) = 'EXT');
  805            %LSET INIT = CHARTEXT('INIT');
  806         %ELSE;
  807            %LSET INIT = CHARTEXT('/*');
  808         %ENDIF;
  809      /**/
  810      DCL 1 NAME STCLASS,
  811      %DESCR(NAME=AARDIS,STCLASS=STCLASS,LVL=2); /* AARD IS */
  812      %DESCR(NAME=TGAAIS,STCLASS=STCLASS,LVL=2); /* AARD IS for TIGR */
  813      %DESCR(NAME=MONLSR,STCLASS=STCLASS,LVL=2); /* MON LS */
  814      %DESCR(NAME=DESCPPUT,STCLASS=STCLASS,LVL=2); /* MM_PPUT */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          23   
  815      %DESCR(NAME=DESCTEMP,STCLASS=STCLASS,LVL=2);
  816      %DESCR(NAME=MEMDESC,STCLASS=STCLASS,LVL=2);
  817      %DESCR(NAME=PODESC,STCLASS=STCLASS,LVL=2);
  818      %DESCR(NAME=OUHDESC,STCLASS=STCLASS,LVL=2);
  819      %DESCR(NAME=DESCXL,STCLASS=STCLASS,LVL=2); /* 10 XDELTA LS */
  820      %DESCR(NAME=DESCXI,STCLASS=STCLASS,LVL=2); /* 11 XDELTA IS */
  821      %DESCR(NAME=DESCH,STCLASS=STCLASS,LVL=2); /* 12 MON HJIT */
  822      %DESCR(NAME=DESCMD,STCLASS=STCLASS,LVL=2); /* 13 MON DATA */
  823      %DESCR(NAME=DESCMP,STCLASS=STCLASS,LVL=2); /* 14 MON PROC */
  824      %DESCR(NAME=DESCENT,STCLASS=STCLASS,LVL=2); /* 15 ENTDEFS */
  825      %DESCR(NAME=DESCSYM,STCLASS=STCLASS,LVL=2); /* 16 SYMDEFS */
  826      %DESCR(NAME=DESCDEF,STCLASS=STCLASS,LVL=2); /* 17 DEFNAMES */
  827      %DESCR(NAME=DESCSCH,STCLASS=STCLASS,LVL=2); /* 20 DEBUG SCHEMA */
  828      %DESCR(NAME=DESCGR,STCLASS=STCLASS,LVL=2); /* 21 GHOST1 ROSEG */
  829      %DESCR(NAME=DESCGD,STCLASS=STCLASS,LVL=2); /* 22 GHOST1 DATA */
  830      %DESCR(NAME=DESCGP,STCLASS=STCLASS,LVL=2); /* 23 GHOST1 PROC */
  831      %DESCR(NAME=DESCENT1,STCLASS=STCLASS,LVL=2); /* 24 ALT ENTDEFS */
  832      %DESCR(NAME=DESCSYM1,STCLASS=STCLASS,LVL=2); /* 25 ALT SYMDEFS */
  833      %DESCR(NAME=DESCDEF1,STCLASS=STCLASS,LVL=2); /* 26 ALT DEFNAMES */
  834      %DESCR(NAME=DESCASCH,STCLASS=STCLASS,LVL=2); /* 27 ALT DEBUG SCHEMA */
  835      %DESCR(NAME=DESCTGM,STCLASS=STCLASS,LVL=2); /* 30 TIGR MISCELLANEOUS */
  836      %DESCR(NAME=DESCDDIR,STCLASS=STCLASS,LVL=2); /* 31 MON NODE INFO */
  837      %DESCR(NAME=DESCMP1,STCLASS=STCLASS,LVL=2); /* 32 MON PROC */
  838      %DESCR(NAME=DESCMP2,STCLASS=STCLASS,LVL=2); /* 33 MON PROC */
  839      %DESCR(NAME=DESCMP3,STCLASS=STCLASS,LVL=2); /* 34 MON PROC */
  840      %DESCR(NAME=DESCMP4,STCLASS=STCLASS,LVL=2); /* 35 MON PROC */
  841      %DESCR(NAME=DESCMP5,STCLASS=STCLASS,LVL=2); /* 36 MON PROC */
  842      %DESCR(NAME=DESCMP6,STCLASS=STCLASS,LVL=2); /* 37 MON PROC */
  843      %DESCR(NAME=DESCMP7,STCLASS=STCLASS,LVL=2); /* 40 MON PROC */
  844      %DESCR(NAME=DESCMP8,STCLASS=STCLASS,LVL=2); /* 41 MON PROC */
  845      %DESCR(NAME=DESCMP9,STCLASS=STCLASS,LVL=2); /* 42 MON PROC */
  846      %DESCR(NAME=DESCMP10,STCLASS=STCLASS,LVL=2); /* 43 MON PROC */
  847      %DESCR(NAME=DESCMP11,STCLASS=STCLASS,LVL=2); /* 44 MON PROC */
  848      %DESCR(NAME=DESCMP12,STCLASS=STCLASS,LVL=2); /* 45 MON PROC */
  849      %DESCR(NAME=DESCMP13,STCLASS=STCLASS,LVL=2); /* 46 MON PROC */
  850      %DESCR(NAME=DESCMP14,STCLASS=STCLASS,LVL=2); /* 47 MON PROC */
  851      %DESCR(NAME=DESCMI,STCLASS=STCLASS,LVL=2); /* 50 MON ISR */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          24   
  852      %DESCR(NAME=DESCGI,STCLASS=STCLASS,LVL=2); /* 51 GHOST1 ISR */
  853      %DESCR(NAME=DESCJ,STCLASS=STCLASS,LVL=2); /* 52 MON JIT */
  854      %DESCR(NAME=DESCJ1,STCLASS=STCLASS,LVL=2); /* 53 GHOST1 JIT */
  855      %DESCR(NAME=DESCH1,STCLASS=STCLASS,LVL=2); /* 54 GHOST1 HJIT */
  856      %DESCR(NAME=DESCS,STCLASS=STCLASS,LVL=2); /* 55 BISON SAFE STORE STACK DESCRIPTOR */
  857      %DESCR(NAME=DESCSM,STCLASS=STCLASS,LVL=2); /* 56 MONITOR SAFE STORE STACK DESCRIPTOR */
  858      %DESCR(NAME=DESCS1,STCLASS=STCLASS,LVL=2); /* 57 GHOST1 SAFE STORE STACK DESCRIPTOR */
  859      %DESCR(NAME=DESCTM,STCLASS=STCLASS,LVL=2); /* 60 MONITOR TSTACK DESCRIPTOR */
  860      %DESCR(NAME=DESCT1,STCLASS=STCLASS,LVL=2); /* 61 GHOST1 TSTACK DESCRIPTOR */
  861      %DESCR(NAME=DESCAM,STCLASS=STCLASS,LVL=2); /* 62 MONITOR ARGUMENT STACK DESCRIPTOR */
  862      %DESCR(NAME=DESCA1,STCLASS=STCLASS,LVL=2); /* 63 GHOST1 ARGUMENT STACK DESCRIPTOR */
  863      /* DESCSCH0 thru DESCSCH11 frame debug schema OU records */
  864      %DESCR(NAME=DESCSCH0,STCLASS=STCLASS,LVL=2); /* 64 */
  865      %DESCR(NAME=DESCSCH1,STCLASS=STCLASS,LVL=2); /* 65 */
  866      %DESCR(NAME=DESCSCH2,STCLASS=STCLASS,LVL=2); /* 66 */
  867      %DESCR(NAME=DESCSCH3,STCLASS=STCLASS,LVL=2); /* 67 */
  868      %DESCR(NAME=DESCSCH4,STCLASS=STCLASS,LVL=2); /* 70 */
  869      %DESCR(NAME=DESCSCH5,STCLASS=STCLASS,LVL=2); /* 71 */
  870      %DESCR(NAME=DESCSCH6,STCLASS=STCLASS,LVL=2); /* 72 */
  871      %DESCR(NAME=DESCSCH7,STCLASS=STCLASS,LVL=2); /* 73 */
  872      %DESCR(NAME=DESCSCH8,STCLASS=STCLASS,LVL=2); /* 74 */
  873      %DESCR(NAME=DESCSCH9,STCLASS=STCLASS,LVL=2); /* 75 */
  874      %DESCR(NAME=DESCSCH10,STCLASS=STCLASS,LVL=2); /* 76 */
  875      %DESCR(NAME=DESCSCH11,STCLASS=STCLASS,LVL=2); /* 77 */
  876      /* DESCASCH0 thru DESCASCH11 frame alternate debug schema OU records */
  877      %DESCR(NAME=DESCASCH0,STCLASS=STCLASS,LVL=2); /* 100 */
  878      %DESCR(NAME=DESCASCH1,STCLASS=STCLASS,LVL=2); /* 101 */
  879      %DESCR(NAME=DESCASCH2,STCLASS=STCLASS,LVL=2); /* 102 */
  880      %DESCR(NAME=DESCASCH3,STCLASS=STCLASS,LVL=2); /* 103 */
  881      %DESCR(NAME=DESCASCH4,STCLASS=STCLASS,LVL=2); /* 104 */
  882      %DESCR(NAME=DESCASCH5,STCLASS=STCLASS,LVL=2); /* 105 */
  883      %DESCR(NAME=DESCASCH6,STCLASS=STCLASS,LVL=2); /* 106 */
  884      %DESCR(NAME=DESCASCH7,STCLASS=STCLASS,LVL=2); /* 107 */
  885      %DESCR(NAME=DESCASCH8,STCLASS=STCLASS,LVL=2); /* 110 */
  886      %DESCR(NAME=DESCASCH9,STCLASS=STCLASS,LVL=2); /* 111 */
  887      %DESCR(NAME=DESCASCH10,STCLASS=STCLASS,LVL=2); /* 112 */
  888      %DESCR(NAME=DESCASCH11,STCLASS=STCLASS,LVL=2); /* 113 */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          25   
  889      %DESCR(NAME=DESCMPT,STCLASS=STCLASS,LVL=2); /* 114 MON PAGE TABLE DESCRIPTOR */
  890      %DESCR(NAME=DESCGPT,STCLASS=STCLASS,LVL=2); /* 115 GHOST1 PAGE TABLE DESCRIPTOR */
  891      %DESCR(NAME=DESCCP,STCLASS=STCLASS,LVL=2); /* 116 COMMAND PROCESSOR ISR */
  892      %DESCR(NAME=DESCCPPT,STCLASS=STCLASS,LVL=2); /* 117 COMMAND PROCESSOR PAGE TABLE */
  893      %DESCR(NAME=DESCSU,STCLASS=STCLASS,LVL=2); /* 120 CURRENT USER SAFE STORE STACK DESCRIPTOR */
  894      %DESCR(NAME=DESCTU,STCLASS=STCLASS,LVL=2); /* 121 CURRENT USER TSTACK DESCRIPTOR */
  895      %DESCR(NAME=DESCAU,STCLASS=STCLASS,LVL=2); /* 122 CURRENT USER ASTACK DESCRIPTOR */
  896      %DESCR(NAME=DESCJU,STCLASS=STCLASS,LVL=2); /* 123 CURRENT USER JIT DESCRIPTOR */
  897      %DESCR(NAME=DESCUPT,STCLASS=STCLASS,LVL=2); /* 124 CURRENT USER(MAPPED) JIT DESCRIPTOR */
  898      %DESCR(NAME=DESCHU,STCLASS=STCLASS,LVL=2); /* 125 CURRENT USER(MAPPED) HJIT DESCRIPTOR */
  899      %DESCR(NAME=DESCUI,STCLASS=STCLASS,LVL=2); /* 126 CURRENT USER(MAPPED) ISR DESCRIPTOR */
  900      %DESCR(NAME=DESCAALS,STCLASS=STCLASS,LVL=2); /* 127 AARDVARK LINKAGE SEGMENT DESCRIPTOR */
  901      %DESCR(NAME=DESCMLS,STCLASS=STCLASS,LVL=2); /* 130 MONITOR LINKAGE SEGMENT DESCRIPTOR */
  902      %DESCR(NAME=DESCULS,STCLASS=STCLASS,LVL=2); /* 131 USER LINKAGE SEGMENT DESCRIPTOR */
  903      %DESCR(NAME=DESCDLS,STCLASS=STCLASS,LVL=2); /* 132 DEBUGGER LINKAGE SEGMENT DESCRIPTOR */
  904      %DESCR(NAME=DESCALS,STCLASS=STCLASS,LVL=2); /* 133 ALT SHARED LIB LINKAGE SEGMENT DESCRIPTOR */
  905      %DESCR(NAME=DESCCLS,STCLASS=STCLASS,LVL=2); /* 134 COMMAND PROCESSOR LINKAGE SEGMENT DESCRIPTOR */
  906      %DESCR(NAME=DESCRL,STCLASS=STCLASS,LVL=2); /* 135 USED TO ACCESS REAL MEMORY */
  907      %DESCR(NAME=RAUTO,STCLASS=STCLASS,LVL=2); /* 136 RECOVERY AUTO */
  908      /* Recovery extra descriptors */
  909      %DESCR(NAME=DESCRV1,STCLASS=STCLASS,LVL=2); /* 137 */
  910      %DESCR(NAME=DESCRV2,STCLASS=STCLASS,LVL=2); /* 140 */
  911      %DESCR(NAME=DESCRV3,STCLASS=STCLASS,LVL=2); /* 141 */
  912      %DESCR(NAME=DESCRV4,STCLASS=STCLASS,LVL=2); /* 142 */
  913      %DESCR(NAME=DESAAAUTO,STCLASS=STCLASS,LVL=2); /* 143 AARDV AUTO */
  914      %DESCR(NAME=DESCWS#0,STCLASS=STCLASS,LVL=2); /* 144 WS#0 PT */
  915      %DESCR(NAME=DESCSGT,STCLASS=STCLASS,LVL=2); /* 145 MON OVERLAY */
  916      %DESCR(NAME=DESCMONSS,STCLASS=STCLASS,LVL=2); /* 146 MON SSR */
  917      %DESCR(NAME=DESCRV5,STCLASS=STCLASS,LVL=2); /* 147 */
  918      %DESCR(NAME=DESCD,STCLASS=STCLASS,LVL=2,LAST=";"); /* 150 DUMMY DESC */
  919      /**/
  920      %MEND;
  921      /* S_D fields for pointers to areas framed by
  922                 different descriptors in AARDV LS   */
  923      %EQU ALS_AIS='6000'O; /* AARDVARK ISR */
  924      %EQU ALS_AIS_T='6001'O; /* AARDVARK ISR for TIGR use */
  925      %EQU ALS_MONLS='6002'O; /* MON LSR */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          26   
  926      %EQU ALS_PPUT='6003'O; /* MM_PPUT */
  927      %EQU ALS_TEMP='6004'O; /* Bound checking */
  928      %EQU ALS_MEM='6005'O; /* Calculate mem size */
  929      %EQU ALS_PO='6006'O; /* Frame PO blocks */
  930      %EQU ALS_OUH='6007'O; /* Frame debug schema */
  931      %EQU ALS_TYP0='6010'O; /* Symbol definition */
  932      %EQU ALS_XLS='6010'O; /* XDELTA LS */
  933      %EQU ALS_XIS='6011'O; /* XDELTA IS */
  934      %EQU ALS_HJIT='6012'O; /* MON HJIT */
  935      %EQU ALS_MOND='6013'O; /* MON DATA */
  936      %EQU ALS_MONP='6014'O; /* MON PROC */
  937      %EQU ALS_ENTD='6015'O; /* ENTDEFS */
  938      %EQU ALS_SYMD='6016'O; /* SYMDEFS */
  939      %EQU ALS_DEFN='6017'O; /* DEFNAMES */
  940      %EQU ALS_SCH='6020'O; /* Debug schema */
  941      %EQU ALS_G1RO='6021'O; /* GHOST1 ROSEG */
  942      %EQU ALS_G1D='6022'O; /* GHOST1 DATA */
  943      %EQU ALS_G1P='6023'O; /* GHOST1 PROC */
  944      %EQU ALS_ENTD1='6024'O; /* ALT ENTDEFS */
  945      %EQU ALS_SYMD1='6025'O; /* ALT SYMDEFS */
  946      %EQU ALS_DEFN1='6026'O; /* ALT DEFNAMES */
  947      %EQU ALS_ASCH='6027'O; /* ALT schema */
  948      %EQU ALS_TIGR='6030'O; /* TIGR */
  949      %EQU ALS_DEFDIR='6031'O;
  950      %EQU ALS_PATCH='6032'O; /* Patches */
  951      %EQU ALS_MONIS='6050'O;
  952      %EQU ALS_JIT='6052'O;
  953      %EQU ALS_JIT1='6053'O;
  954      %EQU ALS_HJIT1='6054'O; /* GHOST1 HJIT */
  955      %EQU ALS_MPGTBL='6114'O;
  956      %EQU ALS_G1PGTBL='6115'O;
  957      %EQU ALS_WS0='6144'O;
  958      %EQU ALS_MONSSR='6146'O;
  959      /*  S_D fields for pointers to areas framed by
  960              different descriptors in XDELTA LS */
  961      %EQU XDLS_ENT='6004'O;
  962      %EQU XDLS_SYM='6005'O;
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          27   
  963      %EQU XDLS_DEF='6006'O;
  964      %EQU XDLS_SCH0='6046'O;
  965      %EQU XDLS_ASCH0='6066'O;
  966      /* Ghost1 S_D field definitions */
  967      %EQU GLS_ROS='6003'O; /* ROSEG segid */
  968      %EQU GLS_NULL='6014'O; /* NULL segid */
  969      /**/
  970      /* EQUs defining Patch Owners */
  971      %EQU WHOMINI='01'O;
  972      %EQU WHOXDEL='02'O;
  973      %EQU WHOTIGR='04'O;
  974      %EQU WHORUM='10'O;
  975      %EQU WHOPLV='20'O;
  976      %EQU WHOBTM='40'O;
  977      %EQU WHOFIN='77'O;
  978      %EQU LONGPATCH=200; /* Patch image size (in bytes) for Mini, Xdel */
  979      %EQU SHORTPATCH=80; /* Patch image size (in bytes) for R,P,B */
  980      /*   Memory management Macros and Equs   */
  981      /* Macro to generate a PT Directory word */
  982      %MACRO DIRW(NAME=DIRW,STCLASS="STATIC",LVL=1);
  983         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
  984         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
  985               (SUBSTR(STR,0,8) = 'CONSTANT') OR
  986               (SUBSTR(STR,0,3) = 'EXT');
  987            %LSET INIT = CHARTEXT('INIT');
  988         %ELSE;
  989            %LSET INIT = CHARTEXT('/*');
  990         %ENDIF;
  991      /**/
  992      %IF LVL=1;
  993      DCL 1 NAME STCLASS ALIGNED,
  994            2 BLKNO UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'), /* mod 64 or 1024 addr of PT */
  995            2 Q BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'), /* WSQ access control */
  996            2 P BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'), /* Page table present bit  */
  997            2 T BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'), /* Table type */
  998            2 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'), /* Unused */
  999            2 NBLKS UBIN(12) UNAL %INIT(0)%CHARTEXT('/**/'); /* No of blocks in Page Table */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          28   
 1000      %ELSE;
 1001            2 BLKNO UBIN(18) HALIGNED, /* mod 64 or 1024 addr of PT */
 1002            2 Q BIT(2) UNAL, /* WSQ access control */
 1003            2 P BIT(1) UNAL, /* Page table present bit  */
 1004            2 T BIT(2) UNAL, /* Table type */
 1005            2 * BIT(1) UNAL, /* Unused */
 1006            2 NBLKS UBIN(12) UNAL; /* No of blocks in Page Table */
 1007      %ENDIF;
 1008      /**/
 1009      %MEND;
 1010      /**/
 1011      /* Macro to generate a Page Table word */
 1012      %MACRO PTW(NAME=DIRW,STCLASS="STATIC",LVL=1);
 1013         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
 1014         %IF (SUBSTR(STR,0,6) = 'STATIC')     OR
 1015               (SUBSTR(STR,0,8) = 'CONSTANT') OR
 1016               (SUBSTR(STR,0,3) = 'EXT');
 1017            %LSET INIT = CHARTEXT('INIT');
 1018         %ELSE;
 1019            %LSET INIT = CHARTEXT('/*');
 1020         %ENDIF;
 1021      /**/
 1022      %IF LVL=1;
 1023      DCL 1 NAME STCLASS ALIGNED,
 1024            2 RPN UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'), /* Real (physical) page number */
 1025            2 SRPN REDEF RPN SBIN(18) UNAL,
 1026            2 SCTRL BIT(10) UNAL %INIT('0'B)%CHARTEXT('/**/'), /* Software control flags */
 1027            2 VLINK REDEF SCTRL UBIN(10) UNAL,
 1028            2 Z2 BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'), /* Must be zero */
 1029            2 CTRL BIT(6) UNAL %INIT('0'B)%CHARTEXT('/**/'); /* Hardware control bits */
 1030      %ELSE;
 1031            2 RPN UBIN(18) HALIGNED, /* Real (physical) page number */
 1032            2 SRPN REDEF RPN SBIN(18) UNAL,
 1033            2 SCTRL BIT(10) UNAL, /* Software control flags */
 1034            2 VLINK REDEF SCTRL UBIN(10) UNAL,
 1035            2 Z2 BIT(2) UNAL, /* Must be zero */
 1036            2 CTRL BIT(6) UNAL; /* Hardware control bits */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          29   
 1037      %ENDIF;
 1038      /**/
 1039      %MEND;
 1040      %MACRO MCA_HDR(NAME=MCA_HDR,STCLASS="STATIC");
 1041         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
 1042         %IF (SUBSTR(STR,0,6) = 'STATIC')  OR
 1043              (SUBSTR(STR,0,8) = 'CONSTANT') OR
 1044              (SUBSTR(STR,0,3) = 'EXT') ;
 1045            %LSET INIT = CHARTEXT('INIT');
 1046         %ELSE;
 1047            %LSET INIT = CHARTEXT('/*');
 1048         %ENDIF;
 1049      /**/
 1050      DCL   1 NAME  STCLASS ALIGNED,
 1051              2 TYPE  BIT(9) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1052              2 DEFINER SBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 1053              2 CONTROL BIT(18) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1054              2 STATUS BIT(18) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1055              2 USEDISK SBIN(9) UNAL %INIT(1)%CHARTEXT('/**/'),
 1056              2 ACTIVE ,
 1057
 1058                3 FLAG BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1059                3 LFC_VALUE BIT(7) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1060              2 FILE_CMD,
 1061                3 *  BIT(14) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1062                3 VOL_OPEN BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1063                3 BYTE_WISE_OPEN BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1064                3 IO_CMD BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1065              2 STSPTR SBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
 1066              2 PNAME CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/'),
 1067              2 OPTIONS BIT(18) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1068              2 SRCPTR SBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
 1069              2 SRCLEN SBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
 1070              2 DSTPTR SBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
 1071              2 BLKCNT SBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
 1072              2 TBYTES SBIN(18) UNAL %INIT(0)%CHARTEXT('/**/');
 1073      /**/
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          30   
 1074      %MEND;
 1075      %MACRO MCA_CFG(NAME=MCA_CFG,STCLASS="STATIC SYMDEF");
 1076         %LSET STR = CONCAT (TEXTCHAR(STCLASS),'        ');
 1077         %IF (SUBSTR(STR,0,6) = 'STATIC')  OR
 1078              (SUBSTR(STR,0,8) = 'CONSTANT') OR
 1079              (SUBSTR(STR,0,3) = 'EXT') ;
 1080            %LSET INIT = CHARTEXT('INIT');
 1081         %ELSE;
 1082            %LSET INIT = CHARTEXT('/*');
 1083         %ENDIF;
 1084      /**/
 1085      DCL   1 NAME  STCLASS ALIGNED,
 1086              2 UNIQUE_ID CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/'),
 1087              2 DATE_CREATED CHAR(6) UNAL %INIT(' ')%CHARTEXT('/**/'),
 1088              2 DATE_CHANGED CHAR(6) UNAL %INIT(' ')%CHARTEXT('/**/'),
 1089              2 CONFIG_PN CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/'),
 1090              2 IMX_STATE UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 1091              2 OS_TYPE,
 1092                3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1093                3 MODE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1094                3 SP_BYPASS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1095                3 REV_BIT0 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1096                3 PTW_WRITE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1097                3 REV_BIT1 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1098                3 OS UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
 1099              2 IMX_NUMBER,
 1100                3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1101                3 IMU_NUM UBIN(4) UNAL %INIT(0)%CHARTEXT('/**/'),
 1102                3 * BIT(4) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1103              2 DISK_TAB UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 1104              2 PS_DISK_TAB UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 1105              2 PS_STATE UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 1106              2 REV_NO CHAR(1) UNAL %INIT(' ')%CHARTEXT('/**/'),
 1107              2 CONTROL,
 1108                3 * BIT(5) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1109                3 BP_BYPASS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1110                3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          31   
 1111                3 MPF_PRESENT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1112                3 WRITE_PROTECT_ENF BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1113              2 PS_CONTROL,
 1114                3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1115                3 MEM_PORT UBIN(4) UNAL %INIT(0)%CHARTEXT('/**/'),
 1116                3 * BIT(4) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1117              2 * CHAR(1) UNAL %INIT(' ')%CHARTEXT('/**/'),
 1118              2 BOOTSTRAP_CONTROL UBIN(9) UNAL %INIT(0) %CHARTEXT('/**/'),
 1119              2 BOOTSTRAP_PORT UBIN(9) UNAL %INIT(0) %CHARTEXT('/**/'),
 1120              2 BOOTSTRAP_CHANNEL UBIN(9) UNAL %INIT(0) %CHARTEXT('/**/'),
 1121              2 BOOTSTRAP_DEVICE UBIN(9) UNAL %INIT(0) %CHARTEXT('/**/'),
 1122              2 BOOTSTRAP_INTBASE  UBIN WORD UNAL %INIT(0) %CHARTEXT('/**/'),
 1123              2 BOOTSTRAP_MBBASE  UBIN WORD UNAL %INIT(0) %CHARTEXT('/**/'),
 1124              2 BOOTSTRAP_SOURCE  UBIN(9) UNAL %INIT(0) %CHARTEXT('/**/'),
 1125              2 BOOTSTRAP_OPTIONS,
 1126                3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1127                3 CONT_D_FAULTS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1128                3 CONT_B_FAULTS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1129                3 * BIT(3) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1130                3 TRACE_DEBUG BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1131                3 TRACE_BOOT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1132                3 TRACE_FAULT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1133              2 BOOTSTRAP_STATE UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 1134              2 * UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 1135              2 PORT_INFO(0:3),
 1136                3 STATE UBIN(9) UNAL %INIT(0*0)%CHARTEXT('/**/'),
 1137                3 P_INIT BIT(9) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1138                3 ILACE BIT(9) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1139                3 SIZE UBIN(9) UNAL %INIT(0*0)%CHARTEXT('/**/'),
 1140                3 * BIT(9) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1141                3 DISK_TAB UBIN(9) UNAL %INIT(0*0)%CHARTEXT('/**/'),
 1142                3 * BIT(9) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1143                3 START_ADDR UBIN(9) UNAL %INIT(0*0)%CHARTEXT('/**/'),
 1144                3 * BIT(9) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1145              2 LEVEL_1 (0:15),
 1146                3 STATE UBIN(9) UNAL %INIT(0*0)%CHARTEXT('/**/'),
 1147                3 CONSOLE_CNTL,
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          32   
 1148                  4 * BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1149                  4 REM_MAINT BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1150                  4 MASTER BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1151                  4 * BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1152                  4 POLL UBIN(5) UNAL %INIT(0*0)%CHARTEXT('/**/'),
 1153                3 NDIC_CNTL REDEF CONSOLE_CNTL,
 1154                  4 * BIT(2) UNAL,
 1155                  4 DATANET66 BIT(1) UNAL,
 1156                  4 * BIT(6) UNAL,
 1157                3 PSIA_CNTL REDEF CONSOLE_CNTL,
 1158                  4 * BIT(1) UNAL,
 1159                  4 RSO_REQ BIT(1) UNAL,
 1160                  4 * BIT(4) UNAL,
 1161                  4 DEVICE_TYPE BIT(3) UNAL,
 1162                3 DISK_TAB UBIN(9) UNAL %INIT(0*0)%CHARTEXT('/**/'),
 1163                3 FIRMWARE_ID,
 1164                  4 * BIT(1) UNAL %INIT('0'B*0) %CHARTEXT('/**/'),
 1165                  4 ALTER BIT(1) UNAL %INIT('0'B*0) %CHARTEXT('/**/'),
 1166                  4 * BIT(2) UNAL %INIT('0'B*0) %CHARTEXT('/**/'),
 1167                  4 ID UBIN(5) UNAL %INIT(0*0) %CHARTEXT('/**/'),
 1168                3 HARDWARE_ID UBIN(9) UNAL %INIT(0*0) %CHARTEXT('/**/'),
 1169                3 REV_NO CHAR(1) UNAL %INIT(' '*0) %CHARTEXT('/**/'),
 1170                3 PRI_CHN UBIN(9) UNAL %INIT(0*0) %CHARTEXT('/**/'),
 1171                3 LOG_CHNS UBIN(9) UNAL %INIT(0*0) %CHARTEXT('/**/'),
 1172                3 TOT_BUS UBIN(9) UNAL %INIT(0*0) %CHARTEXT('/**/'),
 1173                3 CTL2,
 1174                  4 * BIT(6) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1175                  4 SOC_ENABLED BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1176                  4 MPF_PRESENT BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1177                  4 * BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1178                3 * BIT(9) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1179              2 LEVEL_2(0:127),
 1180                3 WORD1 BIT(36) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1181                3 WORD2 BIT(36) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1182                3 WORD3 BIT(18) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
 1183              2 SOC_CONTROLS CHAR(78) UNAL %INIT(' ')%CHARTEXT('/**/');
 1184      %MEND;
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          33   
 1185      /**/
 1186      /* XDELTA Linkage Segment definitions */
 1187      %EQU XL_ISR=0; /*            XDELTA ISR DESCRIPTOR */
 1188      %EQU XL_LSR=%(XL_ISR+1); /*    XDELTA LSR DESCRIPTOR */
 1189      %EQU XL_SSR=%(XL_LSR+1); /*    XDELTA SSR DESCRIPTOR */
 1190      %EQU XL_AUTO=%(XL_SSR+1); /*    XDELTA AUTO */
 1191      %EQU XL_ENT=%(XL_AUTO+1); /*   MON ENTDEFS */
 1192      %EQU XL_SYM=%(XL_ENT+1); /*    MON SYMDEFS */
 1193      %EQU XL_DEF=%(XL_SYM+1); /*    MON DEF NAMES */
 1194      %EQU XL_SCH=%(XL_DEF+1); /*    MON SCHEMA DIRECTORY */
 1195      %EQU XL_MLS0=%(XL_SCH+1); /*    MON LS -- TYPE 0 */
 1196      %EQU XL_MLS1=%(XL_MLS0+1); /*   MON LS -- TYPE 1 */
 1197      %EQU XL_MIS=%(XL_MLS1+1); /*   MON ISR DESCRIPTOR */
 1198      %EQU XL_MSS=%(XL_MIS+1); /*    MON SSR DESCRIPTOR -- TYPE 1 */
 1199      %EQU XL_NULL=%(XL_MSS+1); /*    NULL */
 1200      %EQU XL_MINIQ=%(XL_NULL+1); /*   AARDVARK ISR DESC FOR MINIQ */
 1201      %EQU XL_REAL=%(XL_MINIQ+1); /*  REAL */
 1202      %EQU XL_REALX=%(XL_REAL+1); /*   REAL SCRATCH */
 1203      %EQU XL_MAP256=%(XL_REALX+1); /*  MAP 0-256K */
 1204      %EQU XL_MAPX=%(XL_MAP256+1); /* MAP 256-512K */
 1205      %EQU XL_FLT=%(XL_MAPX+1); /*   XDELTA FAULT ENTRY DESCRIPTOR */
 1206      %EQU XL_SSR0=%(XL_FLT+1); /*    XDELTA SSR -- TYPE 0 */
 1207      %EQU XL_MSSR0=%(XL_SSR0+1); /*   MON SSR --  TYPE 0 */
 1208      %EQU XL_SC1=%(XL_MSSR0+1); /*  SCRATCH DESCRIPTOR 1 */
 1209      %EQU XL_SC2=%(XL_SC1+1); /*    SCRATCH DESCRIPTOR 2 */
 1210      %EQU XL_AENT=%(XL_SC2+1); /* ENTRY DESCRIPTOR FOR AARDVARK */
 1211      %EQU XL_UDR2=%(XL_AENT+1); /*    DR2 FROM CURRENT SS */
 1212      %EQU XL_JITU=%(XL_UDR2+1); /*   USER JIT */
 1213      %EQU XL_HJITU=%(XL_JITU+1); /*   USER HJIT */
 1214      %EQU XL_ULS=%(XL_HJITU+1); /*  USER LS */
 1215      %EQU XL_DBLS=%(XL_ULS+1); /*    DEBUGGER LS */
 1216      %EQU XL_ASLLS=%(XL_DBLS+1); /*   ASL LS */
 1217      %EQU XL_CPLS=%(XL_ASLLS+1); /*  CP LS */
 1218      %EQU XL_ASR=%(XL_CPLS+1); /*   ASR */
 1219      %EQU XL_PSR=%(XL_ASR+1); /*    PSR */
 1220      %EQU XL_UISR=%(XL_PSR+1); /*    USER ISR */
 1221      %EQU XL_SDS=%(XL_UISR+1); /*   MON SPECIAL DESCRIPTOR STORAGE */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          34   
 1222      %EQU XL_MJIT=%(XL_SDS+1); /*    MON JIT */
 1223      %EQU XL_MHJIT=%(XL_MJIT+1); /*   MON HJIT */
 1224      %EQU XL_SSISR=%(XL_MHJIT+1); /*  ISR FROM SAFE STORE */
 1225      %EQU XL_SCH0=%(XL_SSISR+1); /*  SCHEMA DESC -DEBUG RECORDS */
 1226      %EQU XL_SCH1=%(XL_SCH0+1); /*   DITTO */
 1227      %EQU XL_SCH2=%(XL_SCH1+1); /*   DITTO */
 1228      %EQU XL_SCH3=%(XL_SCH2+1); /*   DITTO */
 1229      %EQU XL_SCH4=%(XL_SCH3+1); /*   DITTO */
 1230      %EQU XL_SCH5=%(XL_SCH4+1); /*   DITTO */
 1231      %EQU XL_SCH6=%(XL_SCH5+1); /*   DITTO */
 1232      %EQU XL_SCH7=%(XL_SCH6+1); /*   DITTO */
 1233      %EQU XL_SCH8=%( XL_SCH7+1); /*   DITTO */
 1234      %EQU XL_SCH9=%(XL_SCH8+1); /*   DITTO */
 1235      %EQU XL_SCH10=%(XL_SCH9+1); /*   DITTO */
 1236      %EQU XL_SCH11=%(XL_SCH10+1); /*  DITTO */
 1237      %EQU XL_SCHLAST=%(XL_SCH11); /*    LAST SCHEMA DESCRIPTOR */
 1238      %EQU XL_ENT1=%(XL_SCHLAST+1); /*ALTERNATE ENTDEFS */
 1239      %EQU XL_SYM1=%(XL_ENT1+1); /*   ALTERNATE SYMDEFS */
 1240      %EQU XL_DEF1=%(XL_SYM1+1); /*   ALTERNATE DEFNAMES */
 1241      %EQU XL_ASCH=%(XL_DEF1+1); /*   ALTERNATE DEBUG SCHEMA HEADERS */
 1242      %EQU XL_ASCH0=%(XL_ASCH+1); /*   ALTERNATE SCHEMA DESC -DEBUG RECORDS */
 1243      %EQU XL_ASCH1=%(XL_ASCH0+1); /*  DITTO */
 1244      %EQU XL_ASCH2=%(XL_ASCH1+1); /*  DITTO */
 1245      %EQU XL_ASCH3=%(XL_ASCH2+1); /*  DITTO */
 1246      %EQU XL_ASCH4=%(XL_ASCH3+1); /*  DITTO */
 1247      %EQU XL_ASCH5=%(XL_ASCH4+1); /*  DITTO */
 1248      %EQU XL_ASCH6=%(XL_ASCH5+1); /*  DITTO */
 1249      %EQU XL_ASCH7=%(XL_ASCH6+1); /*  DITTO */
 1250      %EQU XL_ASCH8=%(XL_ASCH7+1); /*  DITTO */
 1251      %EQU XL_ASCH9=%(XL_ASCH8+1); /*  DITTO */
 1252      %EQU XL_ASCH10=%(XL_ASCH9+1); /*  DITTO */
 1253      %EQU XL_ASCH11=%(XL_ASCH10+1); /* DITTO */
 1254      %EQU XL_ASCHLAST=%(XL_ASCH11); /*   LAST ALTERNATE SCHEMA DESCRIPTOR */
 1255      %EQU XL_SEGTBL=%(XL_ASCHLAST+1); /* MON OVERLAY SEGMENT TABLE */
 1256      %EQU XL_DEFDIR=%(XL_SEGTBL+1); /*   MON NODE INFO TABLE */
 1257      %EQU XL_IPHY=%(XL_DEFDIR+1); /* PHYSICAL->REAL MAP */
 1258      /* DPS8000 MCA - EQUS    */
14:39 JUL 28 '97 IS$MACROS.:E05SI                                          35   
 1259      %EQU MCA_CMD_CONFIG# = 0;  /* READ THE CONFIG FILE */
 1260      %EQU MCA_CMD_CCINIT# = 1;  /* CCINIT COMMAND */
 1261      %EQU MCA_CMD_SWITCH_CPU0# = 2;  /* SWITCH CPU 0 PORT B OFF */
 1262      %EQU MCA_CMD_SWITCH_CPU1# = 3;  /* SWITCH CPU 0 PORT A OFF */
 1263      %EQU MCA_CMD_SWITCH_CPU2# = 4;  /* SWITCH CPU 2 PORT B OFF */
 1264      %EQU MCA_CMD_SWITCH_CPU3# = 5;  /* SWITCH CPU 2 PORT A OFF */
 1265      %EQU MCA_CMD_STATE_SCU0# = 6;  /* SCU STATE 0 */
 1266      %EQU MCA_CMD_STATE_SCU1# = 7;  /* SCU STATE 1 */
 1267
 1268      %EQU MCA_DEF_READ# = 1;  /* DEFINER TYPE OF READ */
 1269      %EQU MCA_DEF_READDATA# = 2; /* DEFINEER TYPE OF READDATA */
 1270      %EQU MCA_DEF_DATA# = 7; /* DEFINEER TYPE OF DATA */
 1271      %EQU MCA_DEF_STATUS# = 9; /* DEFINEER TYPE OF STATUS */
 1272      %EQU IS_CFG_SINGLE_CAB# = 0; /* BOOTED ON ONE CABINET*/
 1273      %EQU IS_CFG_MULT_CAB# = 1; /* BOOTED WITH MULTIPLE CABINETS */
 1274      %EQU IS_CFG_MULT_CAB_REL# = 2; /* BOOTED WITH MULTIPLE CABINETS AND HALF RELEASED */

