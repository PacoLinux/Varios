VERSION E05

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:1    
        1        1        /*M* TOO$TOLTS_MMES     TOLTS MME Service Routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOO$TOLTS_MMES
       12       12             PURPOSE:      TOLTS MME Service Routines.
       13       13             DESCRIPTION:  Contains the following MME Service Routines:
       14       14                           MME GECALL(GCOS)    MME ABSTIME
       15       15                           MME GEMORE(GCOS)    MME ACCWRT
       16       16                           MME GEMREL(GCOS)    MME CONTML
       17       17                           MME GERELC(GCOS)    MME DISPRT
       18       18                           MME GEROAD(GCOS)    MME GEPROC
       19       19                           MME GESNAP(GCOS)    MME PROCTM
       20       20                           MME GETIME(GCOS)    MME READIO
       21       21                           MME GEWAKE(GCOS)    MME SETPR2
       22       22                                               MME SETPRT
       23       23                                               MME SETTYP
       24       24                                               MME TADIOD
       25       25                                               MME TERMIN
       26       26                                               MME TOLDIS
       27       27                                               MME TOLGON
       28       28                                               MME TOLTIN
       29       29                                               MME TRACIO
       30       30             LAST UPDATE:  09/17/85
       31       31             REFERENCE:    CP-6 Release D0B0
       32       32                           Scott Sheppard
       33       33        */
       34       34        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:2    
       35       35        TOO$TOLTS_MMES: PROC (MME, MREG, MME_INSTR$, RETURN_DELTA);
       36       36
       37       37        /* Include Files */
       38       38
       39       39           %INCLUDE B$JIT;
       40      642           %INCLUDE CP_6;
       41     6201           %INCLUDE CP_6_SUBS;
       42     6741           %INCLUDE TOT_TOLTS_M;
       43     7859           %INCLUDE TOT_RQSTS_E ;
       44     7901           %INCLUDE TO_PERR_C ;
       45     8486
       46     8487        /* Parameters */
       47     8488
       48     8489           %MME ;
       49     8510           %MREG ;
       50     8532           %MME_INSTR$ ;
       51     8535           %RETURN_DELTA ;
       52     8538           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:3    
       53     8539        /* Function Parameter Tables */
       54     8540
       55     8541           %FPT_FDP(FPTN = FDP_FPT,
       56     8542                    RESULTS = GEMREL_VEC);
       57     8556           %FPT_GDP(FPTN = GDP_FPT,
       58     8557                    RESULTS = GEMORE_VEC);
       59     8571           %FPT_TIME(FPTN = TIME_FPT,
       60     8572                     SOURCE = CLOCK,
       61     8573                     DATE = DATE_BUFFER_ASCII,
       62     8574                     TSTAMP = TIME_BUFFER);
       63     8593           %FPT_READ(FPTN = READ_IO,
       64     8594                     STCLASS = SYMREF);
       65     8633           %FPT_WRITE(FPTN = CONSOLE_FPT,
       66     8634                      STCLASS = SYMREF);
       67     8665           %FPT_WAIT(FPTN = WAIT_FPT);
       68     8679
       69     8680        /* External Variables and Flags */
       70     8681
       71     8682    1      DCL B$JIT$ PTR SYMREF;
       72     8683           %TOF$BAR (STCLASS = SYMREF) ;
       73     8706           %TOQ$DCP (STCLASS = SYMREF) ;
       74     8738           %TOT$DMC (STCLASS = SYMREF) ;
       75     8772           %TOO$IO_BUFFER (STCLASS = "BASED (TOT$DMC.TOO$IO_BUFFER.PTR$)") ;
       76     8820           %TOP$TCP (STCLASS = "BASED (TOT$DMC.TOP$TCP.PTR$)") ;
       77     8908           %TOT$ECP (STCLASS = SYMREF) ;
       78     8957           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:4    
       79     8958        /* Local Variables and Flags */
       80     8959
       81     8960    1      DCL CHAR_COUNT        SBIN ALIGNED ;
       82     8961    1      DCL DATE_BUFFER_ASCII (0:5) CHAR(1) STATIC;
       83     8962    1      DCL 1 ID_CODE_TBL (0:11) STATIC,
       84     8963    1            2 *             UBIN(18) UNAL INIT (0*0),
       85     8964    1            2 EXEC_NUM      UBIN(6) UNAL INIT (0*0),
       86     8965    1            2 ASSGN_FLAG    UBIN(12) UNAL INIT (0*0);
       87     8966           %IS$ (STCLASS = CONSTANT) ;
       88     8980           %VLP_VECTOR (FPTN = GEMORE_VEC);
       89     8995           %VLP_VECTOR (FPTN = GEMREL_VEC);
       90     9010    1      DCL IONUM             SBIN HALF STATIC INIT (0);
       91     9011    1      DCL QUEUE_ENTRY       (0:2) UBIN(36);
       92     9012    1      DCL REQUEST_TYPE      UBIN(36);
       93     9013    1      DCL SERVICE_CODE      UBIN(18);
       94     9014    1      DCL TIME_BUFFER       UBIN(36) STATIC;
       95     9015    1      DCL 1 WRITE_BUF_VECTOR STATIC DALIGNED,
       96     9016    1            2 BOUNDS        UBIN(20) UNAL,
       97     9017    1            2 FLAGS         BIT(9) UNAL INIT ('777'O),
       98     9018    1            2 V             BIT(2) UNAL INIT ('01'B),
       99     9019    1            2 *             UBIN(5) UNAL,
      100     9020    1            2 BASE          UBIN(18) UNAL,
      101     9021    1            2 *             UBIN (6) UNAL INIT (0),
      102     9022    1            2 SEGID         UBIN(12) UNAL;
      103     9023           %VLP_ERRCODE (FPTN = TOO_ERROR_CODE,
      104     9024                         FCG  = 'TO',
      105     9025                         MID  = 'O',
      106     9026                         SEV  = 0) ;
      107     9071           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:5    
      108     9072        /* External Entries */
      109     9073
      110     9074    1      DCL TOD$DISPATCHER    ENTRY(3);
      111     9075    1      DCL TOL$GET_DECK      ENTRY (7) ALTRET ;
      112     9076    1      DCL TOQ$DEBUG         ENTRY ;
      113     9077    1      DCL TOT$ASCII_BCD     ENTRY(3);
      114     9078    1      DCL TOT$BCD_ASCII     ENTRY(3);
      115     9079    1      DCL TOT$CONSOLE_OUT   ENTRY;
      116     9080    1      DCL TOT$PROMPT_OUT    ENTRY;
      117     9081    1      DCL TOT$RESTART       ENTRY;
      118     9082    1      DCL TOX$ERROR         ENTRY (1) ;
      119     9083    1      DCL TOT$WRITE_READ_IO ENTRY;
      120     9084           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:6    
      121     9085        /* Main Code */
      122     9086
      123     9087    1      IF MME.INST.NO > 0
      124     9088    2      THEN DO CASE (MME.INST.NO);
      125     9089    2              CASE (%GECALL);
      126     9090    2                 CALL TOO$MME_GECALL (MME.WD_1, MME.WD_2, MME.WD_3, MREG.A, MREG.Q,
      127     9091    2                         MME_INSTR$, MREG.X2, MREG.X3, RETURN_DELTA);
      128     9092    2              CASE (%GEMORE);
      129     9093    2                 CALL TOO$MME_GEMORE (MME.WD_1, RETURN_DELTA);
      130     9094    2              CASE (%GEMREL);
      131     9095    2                 CALL TOO$MME_GEMREL (MREG.A, MREG.Q, MME_INSTR$, RETURN_DELTA);
      132     9096    2              CASE (%GERELC);
      133     9097    2                 CALL TOO$MME_GERELC (RETURN_DELTA);
      134     9098    2              CASE (%GEROAD);
      135     9099    2                 CALL TOO$MME_GEROAD (RETURN_DELTA);
      136     9100    2              CASE (%GESNAP);
      137     9101    2                 CALL TOO$MME_GESNAP (MME.WD_1, RETURN_DELTA);
      138     9102    2              CASE (%GETIME);
      139     9103    2                 CALL TOO$MME_GETIME (MREG.A, MREG.Q, RETURN_DELTA);
      140     9104    2              CASE (%GEWAKE);
      141     9105    2                 CALL TOO$MME_GEWAKE (MREG.Q, RETURN_DELTA);
      142     9106    2           END /* DO CASE */ ;
      143     9107    2      ELSE DO CASE (-MME.INST.NO);
      144     9108    2              CASE (%ABSTIM);
      145     9109    2                 CALL TOO$MME_ABSTIM (MREG.A, RETURN_DELTA);
      146     9110    2              CASE (%ACCWRT);
      147     9111    2                 CALL TOO$MME_ACCWRT (MREG.X1, RETURN_DELTA);
      148     9112    2              CASE (%CONTML);
      149     9113    2                 CALL TOO$MME_CONTML (MREG.X1, RETURN_DELTA);
      150     9114    2              CASE (%DISPRT);
      151     9115    2                 CALL TOO$MME_DISPRT (RETURN_DELTA);
      152     9116    2              CASE (%GEPROC);
      153     9117    2                 CALL TOO$MME_GEPROC (MME.WD_1, MME.WD_2, RETURN_DELTA);
      154     9118    2              CASE (%PROCTM);
      155     9119    2                 CALL TOO$MME_PROCTM (MREG.A, RETURN_DELTA);
      156     9120    2              CASE (%READIO);
      157     9121    2                 CALL TOO$MME_READIO (MREG.X1, MREG.X4, RETURN_DELTA);
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:7    
      158     9122    2              CASE (%SETPR2);
      159     9123    2                 CALL TOO$MME_SETPR2 (RETURN_DELTA);
      160     9124    2              CASE (%SETPRT);
      161     9125    2                 CALL TOO$MME_SETPRT (RETURN_DELTA);
      162     9126    2              CASE (%SETTYP);
      163     9127    2                 CALL TOO$MME_GESNAP (MME.WD_1, RETURN_DELTA);
      164     9128    2              CASE (%TADIOD);
      165     9129    2                 CALL TOO$MME_TADIOD (MREG.A,MME.WD_1,MME.WD_2,MME.WD_3,MME.WD_4,
      166     9130    2                         MME.WD_5, MME.WD_6, RETURN_DELTA);
      167     9131    2              CASE (%TERMIN);
      168     9132    2                 CALL TOO$MME_TERMIN (MME.WD_1, RETURN_DELTA);
      169     9133    2              CASE (%TOLDIS);
      170     9134    2                 CALL TOO$MME_TOLDIS (MREG.X1, RETURN_DELTA);
      171     9135    2              CASE (%TOLGON);
      172     9136    2                 CALL TOO$MME_TOLGON (MREG.X1, RETURN_DELTA);
      173     9137    2              CASE (%TOLTIN);
      174     9138    2                 CALL TOO$MME_TOLTIN (MREG.Q, RETURN_DELTA);
      175     9139    2              CASE (%TRACIO) ;
      176     9140    2                 CALL TOO$MME_TRACIO (RETURN_DELTA) ;
      177     9141    2           END /* DO CASE */ ;
      178     9142    1      RETURN /* to TOF$FAULTS */ ;
      179     9143
      180     9144        /* End of Main */
      181     9145        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:8    
      182     9146        /*I*      NAME:    TOO$MME_ABSTIM
      183     9147                  PURPOSE: SETS SOURCE AND DEST OPTIONS IN TIME_FPTS INDICATING
      184     9148                           THE SOURCE AND FORMAT OF THE TIME TO BE RETURNED.
      185     9149                           CALLS MONITOR SERVICE ROUTINE M$TIME
      186     9150                           CONVERTS TIME RETURNED IN TIME_BUFFER FROM MILLISECONDS TO
      187     9151                           1/64th MILLISECONDS BY MULTIPLYING TIME BY 64 AND
      188     9152                           ASSIGNING PRODUCT TO ABSTIM_BUF.
      189     9153                           RETURNS TIME OF DAY IN 1/64th MILLISECOND INCREMENTS SINCE
      190     9154                           MIDNIGHT IN ABSTIM_BUF.
      191     9155                           RETURNS TO MME HANDLER.
      192     9156        */
      193     9157
      194     9158    1   TOO$MME_ABSTIM: PROC (ABSTIM_BUF, RETURN_DELTA);
      195     9159
      196     9160    2      DCL ABSTIM_BUF  UBIN (36) ALIGNED ;
      197     9161    2      DCL RETURN_DELTA SBIN HALF;
      198     9162
      199     9163        /* Code */
      200     9164
      201     9165    2      TIME_FPT.V.DEST# = %TUN# ;
      202     9166    2      CALL M$TIME (TIME_FPT) ;
      203     9167    2      ABSTIM_BUF = 64 * TIME_BUFFER ;
      204     9168    2      RETURN_DELTA = 1 ;
      205     9169    2      RETURN ;
      206     9170
      207     9171    2   END TOO$MME_ABSTIM;
      208     9172        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:9    
      209     9173        /*I*      NAME:    TOO$MME_ACCWRT
      210     9174                  PURPOSE: USED IN GCOS TO WRITE A MESSAGE TO THE SYSTEM ACCOUNTING
      211     9175                           FILE.  PRESENTLY UNUSED IN CP6.
      212     9176        */
      213     9177
      214     9178    1   TOO$MME_ACCWRT: PROC (X1, RETURN_DELTA);
      215     9179
      216     9180    2      DCL X1 UBIN(18) HALIGNED ;
      217     9181    2      DCL RETURN_DELTA SBIN HALF;
      218     9182
      219     9183        /* Code */
      220     9184
      221     9185    2      RETURN_DELTA = 1 ;
      222     9186    2      RETURN ;
      223     9187
      224     9188    2   END TOO$MME_ACCWRT;
      225     9189        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:10   
      226     9190        /*I*      NAME:    TOO$MME_CONTML
      227     9191                  PURPOSE: CHECKS "ID", PASSED AS A PARAMETER, FOR VALIDITY.
      228     9192                           "ID" IS A REFERENCE LOGICAL ID AND SHOULD CORRESPOND TO
      229     9193                           USERS TERMINAL, I.E., = 0.  IF INVALID, I.E., ~=0 THEN
      230     9194                           ABORTS PROGRAM.
      231     9195                           IF VALID THEN FINDS FIRST ASSIGNABLE ENTRY FROM LAST 8
      232     9196                           ELEMENTS OF ID_CODE_TBL ARRAY.  AN ENTRY IS ASSIGNABLE
      233     9197                           IF ID_CODE_TBL.ASSGN_FLAG = O.
      234     9198                           IF ENTRY IS ASSIGNABLE SETS ID EQUAL TO ARRAY INDEX,
      235     9199                           SETS ASSGN_FLAG = 7777 OCTAL AND SETS RETURN_DELTA=5 FOR
      236     9200                           NORMAL RETURN.
      237     9201                           IF NO ASSIGNABLE ENTRIES EXIST SETS "ID" = 77 OCTAL, AND
      238     9202                           SETS RETURN_DELTA = 3 FOR REQUEST DENIAL.
      239     9203                           THE "ID" RETURNED AS A PARAMETER IS A LOGICAL ID AND
      240     9204                           IDENTIFIES A TEST READY FOR EXECUTION.
      241     9205                           RETURNS TO MME HANDLER.
      242     9206        */
      243     9207
      244     9208    1   TOO$MME_CONTML: PROC (ID, RETURN_DELTA);
      245     9209
      246     9210    2      DCL I       SBIN HALF HALIGNED ;
      247     9211    2      DCL ID      UBIN (18) HALIGNED ;
      248     9212    2      DCL 1 ID_ REDEF ID HALIGNED,
      249     9213    2            2 EXEC#   UBIN (3) UNAL,
      250     9214    2            2 *       UBIN (9) UNAL,
      251     9215    2            2 RLID    UBIN (6) UNAL;
      252     9216    2      DCL RETURN_DELTA SBIN HALF ;
      253     9217           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:11   
      254     9218        /* Code */
      255     9219
      256     9220    2      IF ID_.RLID = 0
      257     9221    3      THEN DO ;
      258     9222    3              I = 4 ;
      259     9223    4              DO WHILE (I < 12 & ID_CODE_TBL.ASSGN_FLAG(I) ~= 0) ;
      260     9224    4                 I = I + 1 ;
      261     9225    4              END /* WHILE */ ;
      262     9226    3              IF I = 12
      263     9227    4              THEN DO ;
      264     9228    4                      ID_.RLID = 63;
      265     9229    4                      RETURN_DELTA = 3 ;
      266     9230    4                   END /* THEN */ ;
      267     9231    4              ELSE DO;
      268     9232    4                      ID_CODE_TBL.ASSGN_FLAG(I) = 4095;
      269     9233    4                      ID_.RLID = I ;
      270     9234    4                      ID_.EXEC# = 0 ;
      271     9235    4                      RETURN_DELTA = 5 ;
      272     9236    4                   END /* ELSE */ ;
      273     9237    3           END /* THEN */ ;
      274     9238    3      ELSE DO ;
      275     9239    3              TOO_ERROR_CODE.ERR# = %E$BADLOGID ;
      276     9240    3              CALL TOX$ERROR (TOO_ERROR_CODE) ;
      277     9241    3           END /* THEN */ ;
      278     9242    2      RETURN;
      279     9243
      280     9244    2   END TOO$MME_CONTML;
      281     9245        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:12   
      282     9246        /*I*      NAME:    TOO$MME_DISPRT
      283     9247                  PURPOSE: USED IN GCOS TO CALL THE APPROPRIATE TOLTS MODULE TO
      284     9248                           FLAG DROPPING THE PRINTER.  THIS ROUTINE PRESENTLY
      285     9249                           UNUSED IN CP6 TOLTS.
      286     9250        */
      287     9251
      288     9252    1   TOO$MME_DISPRT: PROC (RETURN_DELTA);
      289     9253
      290     9254    2      DCL RETURN_DELTA SBIN HALF;
      291     9255
      292     9256        /* Code */
      293     9257
      294     9258    2      RETURN_DELTA = 3 ;
      295     9259    2      RETURN;
      296     9260
      297     9261    2   END TOO$MME_DISPRT;
      298     9262        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:13   
      299     9263        /*I*      NAME:    TOO$MME_GECALL
      300     9264                  PURPOSE: SETS BASE ADDRESS IN GECALL_VECTOR EQUAL TO THE BASE OF
      301     9265                           WHERE THE TEST PAGE IS TO BE LOADED (CONTAINED IN BITS
      302     9266                            0-17 OF THE PARAMETER "ADDRESS_A").
      303     9267                           SETS NAME OF TEST PAGE TO BE READ, IN THE STRUCTURE "TEST_
      304     9268                           PG_ID" EQUAL TO THE PARAMETER "TEST_PG_NAME".
      305     9269                           "TEST_PG_ID" IS USED AS THE KEY FOR "TEST_PG_FPT" AND
      306     9270                           "BOUNDS_FPT".
      307     9271                           CALLS M$OPEN(TABLE_FPT) WHICH INITIALIZES DCB CONTAINING
      308     9272                           TABLE SIZES.
      309     9273                           CALLS M$READ(BOUNDS_FPT) WHICH READS THE TEST PAGE BOUNDS
      310     9274                           (IN BYTES) INTO THE STRUCTURE "TEST_PG_CODES".
      311     9275                           SETS BOUNDS IN GECALL_VECTOR.  GECALL_VECTOR FRAMES THE
      312     9276                           MEMORY AREA INTO WHICH THE TEST PAGE WILL BE READ INTO.
      313     9277                           CALLS M$READ(TEST_PG_FPT) WHICH READS IN TEST PAGE.
      314     9278                           SETS RETURN_DELTA AND RETURN PARAMETERS "A_REG", AND "Q_REG".
      315     9279                           CONTROL RETURNS TO MME HANDLER.
      316     9280
      317     9281
      318     9282             ADDENDUM:     by GC.
      319     9283                           The format of GECALL for slave mode subexecs now
      320     9284                           includes passing X3 containing the test page base
      321     9285                           (i.e., where to start loading the GECALLed module),
      322     9286                           and X2 containing the maximum load address beyond
      323     9287                           which loading should not continue.
      324     9288
      325     9289                           Currently the remainants of the old GECALL scheme
      326     9290                           are left in place for some last minute debug before
      327     9291                           the A00 release.  One day this needs to be cleaned
      328     9292                           up.
      329     9293
      330     9294                           The subroutine TOO$READ_TEST_PAGE reads all the test pages
      331     9295                           off the T&D Deckfile.
      332     9296        */
      333     9297        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:14   
      334     9298    1   TOO$MME_GECALL: PROC (TEST_PG_NAME, ADDRESS_A, ADDRESS_B, A_REG, Q_REG, MME_IC,
      335     9299    1              P_X2REG, P_X3REG, RETURN_DELTA);
      336     9300
      337     9301    2      DCL A_REG UBIN(36);
      338     9302    2      DCL 1 A_REG_FORMAT REDEF A_REG,
      339     9303    2            2 ORIGIN UBIN(18) UNAL,
      340     9304    2            2 NUM_WDS UBIN(18) UNAL;
      341     9305    2      DCL ADDRESS_A UBIN(36);
      342     9306    2      DCL 1 ADDRESS_A_FORMAT REDEF ADDRESS_A,
      343     9307    2            2 LOCATION_WD_1 UBIN(18) UNAL,
      344     9308    2            2 ERROR_ADDR UBIN(18) UNAL;
      345     9309    2      DCL ADDRESS_B UBIN(36);
      346     9310    2      DCL 1 ADDRESS_B_FORMAT REDEF ADDRESS_B,
      347     9311    2            2 TRANSFER_ADDR UBIN(18) UNAL,
      348     9312    2            2 SEGID UBIN(18) UNAL;
      349     9313    2      DCL MME_IC PTR;
      350     9314    2      DCL 1 MME_IC_FORMAT REDEF MME_IC,
      351     9315    2            2 IC_ADDR UBIN(18) UNAL,
      352     9316    2            2 SEGID UBIN(18) UNAL;
      353     9317    2      DCL TEST_PG_NAME UBIN(36);
      354     9318    2      DCL P_X2REG UBIN(18) HALIGNED ;
      355     9319    2      DCL P_X3REG UBIN(18) HALIGNED ;
      356     9320    2      DCL Q_REG UBIN(36);
      357     9321    2      DCL 1 Q_REG_FORMAT REDEF Q_REG,
      358     9322    2            2 TRANSFER_ADDR UBIN(18) UNAL,
      359     9323    2            2 ERROR_CODE BIT (18) UNAL;
      360     9324    2      DCL RETURN_DELTA SBIN HALF;
      361     9325    2      DCL J UBIN (36);
      362     9326    2      DCL DUMMY_WORD UBIN (36) BASED;
      363     9327    2      DCL DUMMY$ PTR;
      364     9328    2      DCL LOAD_SIZE UBIN WORD ALIGNED ;
      365     9329           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:15   
      366     9330        /* Code */
      367     9331
      368     9332    2      IF ADDRESS_A_FORMAT.LOCATION_WD_1 = 0
      369     9333    3      THEN DO ;
      370     9334    3              TOO_ERROR_CODE.ERR# = %E$BADGECALL ;
      371     9335    3              CALL TOX$ERROR (TOO_ERROR_CODE) ;
      372     9336    3           END /* THEN */ ;
      373     9337    2      CALL TOO$READ_TEST_PAGE;
      374     9338    2      DUMMY$ = PINCRW (IS$, ADDRESS_A_FORMAT.LOCATION_WD_1) ;
      375     9339    3      DO J = 0 TO 71;
      376     9340    3         DUMMY$ -> DUMMY_WORD = 0;
      377     9341    3         DUMMY$ = PINCRW(DUMMY$, 1);
      378     9342    3      END /* DO */ ;
      379     9343    2      A_REG_FORMAT.ORIGIN = ADDRESS_A_FORMAT.LOCATION_WD_1;
      380     9344    2      A_REG_FORMAT.NUM_WDS = LOAD_SIZE ;
      381     9345    2      Q_REG_FORMAT.TRANSFER_ADDR = 0;
      382     9346    2      IF ADDRESS_B = 0
      383     9347    2      THEN RETURN_DELTA = (P_X3REG + 72) - MME_IC_FORMAT.IC_ADDR;
      384     9348    2      ELSE RETURN_DELTA = ADDRESS_B_FORMAT.TRANSFER_ADDR - MME_IC_FORMAT.IC_ADDR;
      385     9349    2      IF TOQ$DCP.PF.ENABLED
      386     9350    3      THEN DO ;
      387     9351    3              TOQ$DCP.PF.REASON = %GECALL ;
      388     9352    3              CALL TOQ$DEBUG ;
      389     9353    3           END /* THEN */ ;
      390     9354    2      ELSE /* Do nothing */ ;
      391     9355    2      RETURN ;
      392     9356
      393     9357        /* END TOO$MME_GECALL */
      394     9358        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:16   
      395     9359        /*I* NAME:         TOO$READ_TEST_PAGE
      396     9360             CALL:         CALL TOO$READ_TEST_PAGE;
      397     9361             INTERFACE:    TOT$BCD_ASCII
      398     9362                           TOL$GET_DECK
      399     9363             INPUT:        None explicitly
      400     9364             OUTPUT:       A test page is loaded.
      401     9365             DESCRIPTION:  Basically, P-X3REG specifies where to load the
      402     9366                           test page, and P_X2REG specifies the load limit
      403     9367                           for that test page, and TEST_PG_NAME specifies
      404     9368                           the 6 character BCD test page name.  All this
      405     9369                           information has to be fitted into the specific
      406     9370                           calling sequence required by the routine
      407     9371                           TOG$GET_DECK to load the test page from the Deckfile.
      408     9372                           If to the casual observer, this is a cumbersome
      409     9373                           interface, don't worry, it is.  However, that is
      410     9374                           the way the crazy thing was implemented, and
      411     9375                           it must be accomodated here.
      412     9376
      413     9377                           First the BCD test page name must be converted to
      414     9378                           ASCII and a "key" built for the test page.  This
      415     9379                           key is defined in KEY_VALUE.  Next a DCW list must
      416     9380                           be built which exactly reflects the number of
      417     9381                           words to load.  The number of DCWs (a maximum of
      418     9382                           7 at the current time, set by a %SUB at the
      419     9383                           start of this subroutine) is calculated using
      420     9384                           the load address in X3 and the maximum load
      421     9385                           address in X2, as well as the word residue for the
      422     9386                           last DCW word count.  Thus the DCW list is built
      423     9387                           in DCWLIST.  The proper number of IOTPs are inserted,
      424     9388                           and the list is terminated with an IOTD.  The
      425     9389                           proper word count is inserted into the last DCW,
      426     9390                           less 72 to account for a Slave Prefix Area for
      427     9391                           the test page.
      428     9392
      429     9393                           Next, the address of this DCW list has to be put
      430     9394                           into the calling sequence, as well as an address
      431     9395                           of a status buffer.  Finally, with CALL_SEQUENCE
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:17   
      432     9396                           built, the other arguments for TOL$GET_DECK
      433     9397                           are set, and the call is made to load the test
      434     9398                           page.  Any errors in the loading process will
      435     9399                           result in an ALTRET with an error code in ERROR_CODE.
      436     9400
      437     9401        II                 Should problems arise at some future time, have fun.
      438     9402                           The error codes returned are not very well documented,
      439     9403                           or available, and TOL$GET_DECK's operation is a
      440     9404                           big mystery to everyone except one person.
      441     9405                           big mystery.  No more troubleshooting info
      442     9406                           can be given at this time.
      443     9407        */
      444     9408
      445     9409    2   TOO$READ_TEST_PAGE: PROC;
      446     9410
      447     9411           %EQU LISTSIZE = 20;
      448     9412    3      DCL 1 CALL_SEQUENCE STATIC,
      449     9413    3            2 DCWLIST_ADR UBIN(18) UNAL,
      450     9414    3            2 STATUS_ADR UBIN(18) UNAL,
      451     9415    3            2 * UBIN(18) UNAL,
      452     9416    3            2 * UBIN(18) UNAL,
      453     9417    3            2 * UBIN(36) UNAL,
      454     9418    3            2 * UBIN(36) UNAL,
      455     9419    3            2 * UBIN(36) UNAL,
      456     9420    3            2 * UBIN(36) UNAL,
      457     9421    3            2 * UBIN(36) UNAL,
      458     9422    3            2 * UBIN(36) UNAL,
      459     9423    3            2 * UBIN(36) UNAL,
      460     9424    3            2 * UBIN(36) UNAL;
      461     9425    3      DCL EDIT_NAME   CHAR (4) ALIGNED ;
      462     9426    3      DCL ERROR_CODE UBIN(36);
      463     9427    3      DCL 1 DCWLIST(0:%LISTSIZE) STATIC,
      464     9428    3            2 ADR UBIN(18) UNAL,
      465     9429    3            2 CHAR_ADR UBIN(3) UNAL INIT (0*0),
      466     9430    3            2 * UBIN(1) UNAL INIT (0*0),
      467     9431    3            2 TYPE UBIN(2) UNAL INIT (1*0),
      468     9432    3            2 WORD_COUNT UBIN(12) UNAL INIT (0*0);
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:18   
      469     9433    3      DCL DCWLIST$ PTR;
      470     9434    3      DCL 1 DCWLIST_PTR REDEF DCWLIST$,
      471     9435    3            2 ADR UBIN(18) UNAL,
      472     9436    3            2 * UBIN(18) UNAL;
      473     9437    3      DCL 1 KEY_VALUE STATIC,
      474     9438    3            2 SIZE         UBIN BYTE UNAL INIT (23),
      475     9439    3            2 CATA         CHAR (3) UNAL,
      476     9440    3            2 *            CHAR (1) UNAL INIT ('.'),
      477     9441    3            2 GECALL_NAME  CHAR (6) UNAL,
      478     9442    3            2 *            CHAR (13) UNAL INIT (' ');
      479     9443    3      DCL LOAD_OFFSET UBIN(18);
      480     9444    3      DCL MAX_LOAD UBIN(18);
      481     9445    3      DCL STATUS (0:1) UBIN(36) STATIC;
      482     9446    3      DCL STATUS$ PTR;
      483     9447    3      DCL 1 STATUS_PTR REDEF STATUS$,
      484     9448    3            2 ADR UBIN(18) UNAL,
      485     9449    3            2 * UBIN(18) UNAL;
      486     9450        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:19   
      487     9451        /* Code */
      488     9452
      489     9453    3      CALL TOO$SET_GECALL_KEY ;
      490     9454    3      CALL TOO$SETUP_DCW_LIST ;
      491     9455    3      CALL_SEQUENCE = '0'B;
      492     9456    3      CALL_SEQUENCE.DCWLIST_ADR = DCWLIST_PTR.ADR;
      493     9457    3      STATUS$ = ADDR(STATUS);
      494     9458    3      CALL_SEQUENCE.STATUS_ADR = STATUS_PTR.ADR;
      495     9459    3      ERROR_CODE = 0;
      496     9460    3      LOAD_SIZE = 0;
      497     9461    3      STATUS = '0'B;
      498     9462    3      LOAD_OFFSET = P_X3REG;
      499     9463    3      MAX_LOAD = P_X2REG;
      500     9464    3      CALL TOL$GET_DECK (KEY_VALUE, LOAD_OFFSET, CALL_SEQUENCE, MAX_LOAD,
      501     9465    3              LOAD_SIZE, ERROR_CODE, EDIT_NAME) WHENALTRETURN
      502     9466    4           DO ;
      503     9467    4              KEY_VALUE.CATA = 'UTL' ;
      504     9468    4              ERROR_CODE = 0 ;
      505     9469    4              CALL TOL$GET_DECK (KEY_VALUE, LOAD_OFFSET, CALL_SEQUENCE, MAX_LOAD,
      506     9470    4                      LOAD_SIZE, ERROR_CODE, EDIT_NAME) ALTRET (LOAD_ERROR) ;
      507     9471    4           END /* WHENALTRETURN */ ;
      508     9472    3      CALL TOO$RETURN_TEST_PAGE_STATS ;
      509     9473    3      RETURN;
      510     9474
      511     9475    3   LOAD_ERROR:
      512     9476    3      TOO_ERROR_CODE.ERR# = %E$NOLOAD ;
      513     9477    3      CALL TOX$ERROR (TOO_ERROR_CODE) ;
      514     9478
      515     9479        /* END TOO$READ_TEST_PAGE */
      516     9480        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:20   
      517     9481    3   TOO$SET_GECALL_KEY: PROC ;
      518     9482
      519     9483    4      DCL SIZE UBIN WORD ALIGNED ;
      520     9484
      521     9485        /* Code */
      522     9486
      523     9487    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;
      524     9488    5         CASE (%COLTS) ;
      525     9489    5            KEY_VALUE.CATA = 'CLT' ;
      526     9490    5         CASE (%MOLTS) ;
      527     9491    5            KEY_VALUE.CATA = 'MLT' ;
      528     9492    5         CASE (%POLTS) ;
      529     9493    5            KEY_VALUE.CATA = 'PLT' ;
      530     9494    5         CASE (%SOLTS, %PACT, %SLTA) ;
      531     9495    5            KEY_VALUE.CATA = 'SLT' ;
      532     9496    5      END /* ELSE */ ;
      533     9497    4      SIZE = 6 ;
      534     9498    4      CALL TOT$BCD_ASCII (TEST_PG_NAME, KEY_VALUE.GECALL_NAME, SIZE) ;
      535     9499    4      RETURN ;
      536     9500
      537     9501    4   END TOO$SET_GECALL_KEY ;
      538     9502        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:21   
      539     9503    3   TOO$SETUP_DCW_LIST: PROC ;
      540     9504
      541     9505    4      DCL LAST_COUNT UBIN(12);
      542     9506    4      DCL LOAD_WORDS UBIN(18);
      543     9507    4      DCL N UBIN(36);
      544     9508    4      DCL NUMBER_DCWS UBIN(36);
      545     9509
      546     9510        /* Code */
      547     9511
      548     9512    4      LOAD_WORDS = P_X2REG - P_X3REG - 72;
      549     9513    4      NUMBER_DCWS = LOAD_WORDS / 4096 ;
      550     9514    4      IF NUMBER_DCWS > %LISTSIZE
      551     9515    5      THEN DO ;
      552     9516    5              TOO_ERROR_CODE.ERR# = %E$BADLOADSIZE ;
      553     9517    5              CALL TOX$ERROR (TOO_ERROR_CODE) ;
      554     9518    5           END /* THEN */ ;
      555     9519    5      ELSE DO ;
      556     9520    5              LAST_COUNT = MOD (LOAD_WORDS, 4096);
      557     9521    5              DCWLIST.ADR(0) = P_X3REG;
      558     9522    5              DCWLIST.TYPE(0) = %IOTP ;
      559     9523    5              DCWLIST.WORD_COUNT(0) = 0 ;
      560     9524    6              DO N = 1 TO %LISTSIZE;
      561     9525    6                 DCWLIST.ADR(N) = DCWLIST.ADR(N-1) + 4096;
      562     9526    6                 DCWLIST.TYPE(N) = %IOTP ;
      563     9527    6                 DCWLIST.WORD_COUNT(N) = 0 ;
      564     9528    6              END;
      565     9529    5              DCWLIST.TYPE(NUMBER_DCWS) = %IOTD ;
      566     9530    5              DCWLIST.WORD_COUNT(NUMBER_DCWS) = LAST_COUNT;
      567     9531    5              DCWLIST$ = ADDR(DCWLIST);
      568     9532    5           END /* ELSE */ ;
      569     9533    4      RETURN ;
      570     9534
      571     9535    4   END TOO$SETUP_DCW_LIST ;
      572     9536        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:22   
      573     9537    3   TOO$RETURN_TEST_PAGE_STATS: PROC ;
      574     9538
      575     9539    4      DCL LOAD_ADDR_INX UBIN WORD ALIGNED ;
      576     9540    4      DCL LOAD_ADDR_MATCH BIT (1) ;
      577     9541
      578     9542        /* Code */
      579     9543
      580     9544    4      LOAD_ADDR_MATCH = %FALSE ;
      581     9545    4      LOAD_ADDR_INX = 0 ;
      582     9546    5      DO WHILE LOAD_ADDR_INX < TOT$ECP.SUBEXEC.TEST_PAGE_COUNT AND ~LOAD_ADDR_MATCH ;
      583     9547    5         IF TOP$TCP.STATS.LOAD_ADDR(LOAD_ADDR_INX) = LOAD_OFFSET
      584     9548    5         THEN LOAD_ADDR_MATCH = %TRUE ;
      585     9549    5         ELSE LOAD_ADDR_INX = LOAD_ADDR_INX + 1 ;
      586     9550    5      END ;
      587     9551    4      IF LOAD_ADDR_INX > TOT$ECP.SUBEXEC.TEST_PAGE_COUNT - 1
      588     9552    4      THEN TOT$ECP.SUBEXEC.TEST_PAGE_COUNT = LOAD_ADDR_INX + 1 ;
      589     9553    4      TOP$TCP.STATS.LOAD_ADDR(LOAD_ADDR_INX) = LOAD_OFFSET ;
      590     9554    4      TOP$TCP.STATS.MAX_LOAD(LOAD_ADDR_INX) = MAX_LOAD ;
      591     9555    4      TOP$TCP.STATS.GECALL_NAME(LOAD_ADDR_INX) = KEY_VALUE.GECALL_NAME ;
      592     9556    4      TOP$TCP.STATS.EDIT_NAME(LOAD_ADDR_INX) = EDIT_NAME ;
      593     9557
      594     9558    4      TOQ$DCP.TP.GECALL_NAME = KEY_VALUE.GECALL_NAME ;
      595     9559    4      TOQ$DCP.TP.EDIT_NAME = EDIT_NAME ;
      596     9560    4      TOQ$DCP.TP.ADDRESS = P_X3REG ;
      597     9561    4      RETURN ;
      598     9562
      599     9563    4   END TOO$RETURN_TEST_PAGE_STATS ;
      600     9564    3   END TOO$READ_TEST_PAGE;
      601     9565    2   END TOO$MME_GECALL;
      602     9566        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:23   
      603     9567        /*I*      NAME:    TOO$MME_GEMORE
      604     9568                  PURPOSE: VERIFIES THAT GEMORE REQUEST IS FOR ADDITIONAL MEMORY
      605     9569                           i.e., BITS 0-17 OF "PARAM_1" = 0.
      606     9570                           IF REQUEST IS FOR MEMORY THEN SETS THE "PAGES" SPECI-
      607     9571                           FICATION IN THE "GDP_FPT" EQUAL TO THE NUMBER OF 1K PAGES
      608     9572                           SPECIFIED IN BITS 18-35 IN "PARAM_1".
      609     9573                           CALLS M$GDP WHICH ALLOCATES MEMORY IN 1K INCREMENTS.
      610     9574                           RETURN_DELTA IS SET EQUAL TO 3 FOR NORMAL RETURN.
      611     9575                           IF FOR SOME REASON MEMORY CANNOT BE ALLOCATED THEN RETURN_
      612     9576                           DELTA IS SET EQUAL TO 2 INDICATING REQUEST DENIAL AND A
      613     9577                           CALL TO TOF$ERROR_MSG IS MADE WHICH OUTPUTS ERROR MESSAGE.
      614     9578                           RETURN IS BACK TO MME HANDLER.
      615     9579
      616     9580
      617     9581             ADDENDUM:     by GC
      618     9582                           TOF$BAR.CURRENT is a variable which at all times must
      619     9583                           reflect the base and bounds of the current running
      620     9584                           TOLTS in order for the Fault Handler to simulate
      621     9585                           the SBAR (Store BAR) instruction.  It contains
      622     9586                           the BAR value which should be in effect whenever
      623     9587                           "GELBAR" mode is broken and the ISR is not shrunken.
      624     9588                           Thus the base address is 0 (since the base is
      625     9589                           really the ISR base), and the bounds(in the number
      626     9590                           of 512 word blocks) is the highest memory address
      627     9591                           available to TOLTS.  Thus this field,
      628     9592                           (TOF$BAR.CURRENT.SIZE) must be increased whenever
      629     9593                           more memory is allocated to TOLTS, and correspondingly
      630     9594                           decreased whenever memory is released from TOLTS.
      631     9595                           TOF$BAR.CURRENT must reflect whar simulated BAR is
      632     9596                           in effect at the moment, and is set equal to the
      633     9597                           full bar at this time.  It changes when TOLTS
      634     9598                           goes into simulted GELBAR mode and shrinks the
      635     9599                           ISR around a test page.  See Fault Handler
      636     9600                           documentation for more details about this, and the
      637     9601                           shrinking of the ISR.
      638     9602        */
      639     9603        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:24   
      640     9604    1   TOO$MME_GEMORE: PROC (PARAM_1, RETURN_DELTA);
      641     9605
      642     9606    2      DCL PARAM_1 UBIN(36);
      643     9607    2      DCL 1 GEMORE_PARAM REDEF PARAM_1,
      644     9608    2            2 MEM_REQ UBIN(18) UNAL,
      645     9609    2            2 GEMORE_PAGES UBIN(18) UNAL;
      646     9610    2      DCL RETURN_DELTA SBIN HALF;
      647     9611    2      DCL PAGE (0:1023) UBIN WORD ALIGNED BASED;
      648     9612    2      DCL PAGE$ PTR ALIGNED;
      649     9613    2      DCL PAGE# UBIN WORD ALIGNED;
      650     9614
      651     9615        /* Code */
      652     9616
      653     9617    2      IF GEMORE_PARAM.MEM_REQ ~= 0
      654     9618    2      THEN RETURN_DELTA = 2;
      655     9619    3      ELSE DO;
      656     9620    3              GDP_FPT.V.PAGES# = GEMORE_PARAM.GEMORE_PAGES;
      657     9621    3              TOT$ECP.DYNAMIC_PAGE_COUNT = TOT$ECP.DYNAMIC_PAGE_COUNT + GEMORE_PARAM.
              9621                       GEMORE_PAGES;
      658     9622    3              CALL M$GDP(GDP_FPT) ALTRET(DENY_MEM_REQ);
      659     9623    4              DO PAGE# = 0 TO GDP_FPT.V.PAGES# - 1;
      660     9624    4                 PAGE$ = PINCRW (GEMORE_VEC.PTR$, PAGE# * 1024);
      661     9625    4                 PAGE$ -> PAGE = '0'B;
      662     9626    4              END /* DO */;
      663     9627    3              TOF$BAR.CURRENT.SIZE = TOF$BAR.CURRENT.SIZE + GEMORE_PARAM.GEMORE_PAGES*2
              9627                       ;
      664     9628    3              TOF$BAR.CURRENT = TOF$BAR.CURRENT;
      665     9629    3              RETURN_DELTA = 3;
      666     9630    3           END /* ELSE */ ;
      667     9631    2      RETURN;
      668     9632
      669     9633    2   DENY_MEM_REQ:
      670     9634    2      RETURN_DELTA = 2;
      671     9635    2      RETURN;
      672     9636
      673     9637    2   END TOO$MME_GEMORE;
      674     9638        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:25   
      675     9639        /*I*      NAME:    TOO$MME_GEMREL
      676     9640                  PURPOSE: VERIFIES THAT MEMORY REQUESTED FOR RELEASE
      677     9641                           IS NOT IN LOWER MEMORY SEGMENT, i.e., BITS
      678     9642                           0-17    OF THE PARAMETER "WORDS" MUST = 0.
      679     9643                           ABORTS IF THIS IS NOT THE CASE.
      680     9644                           TRANSLATES REQUESTED NUMBER OF WORDS OF UPPER
      681     9645                           MEMORY TO BE RELEASED TO 1K PAGES, i.e., DIVIDES THE
      682     9646                           18 BITS OF PARAMETER "WORDS" BY 1024.
      683     9647                           "UPPER_MEM" FIELD (BITS 18-35) OF THE PARAMETER "WORDS"
      684     9648                           BY 1024 AND ASSIGNS THE QUOTIENT TO "GEMREL_WDS".
      685     9649                           SETS PAGES SPECIFICATION IN FDP_FPT EQUAL TO
      686     9650                           TRUNCATED QUOTIENT.
      687     9651                           CALLS M$FDP WHICH RELEASES MEMORY BY 1K PAGES.
      688     9652                           CALLS TOF$IO_ERROR TO OUTPUT ERROR_MESSAGE WHEN 1st
      689     9653                           AVAILIABLE MEMORY PAGE HAS BEEN RELEASED.
      690     9654                           SETS RETURN_DELTA AND RETURNS TO MME HANDLER.
      691     9655
      692     9656
      693     9657             ADDENDUM:     by GC
      694     9658                           See the documentation for TOO$MME_GEMORE for the
      695     9659                           description of use, definition and purpose of the
      696     9660                           2 variables TOF$BAR.CURRENT and TOF$BAR.CURRENT.
      697     9661        */
      698     9662        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:26   
      699     9663    1   TOO$MME_GEMREL: PROC (ADDRESS, WORDS, MME_IC, RETURN_DELTA);
      700     9664
      701     9665    2      DCL ADDRESS UBIN(36);
      702     9666    2      DCL 1 ADDR_BUF REDEF ADDRESS,
      703     9667    2            2 RETURN_ADDR UBIN(18) UNAL,
      704     9668    2            2 * UBIN(18) UNAL;
      705     9669    2      DCL GEMREL_PAGES SBIN(36);
      706     9670    2      DCL MME_IC PTR;
      707     9671    2      DCL 1 MME_IC_FORMAT REDEF MME_IC,
      708     9672    2            2 IC_ADDR UBIN(18) UNAL,
      709     9673    2            2 SEGID UBIN(18) UNAL;
      710     9674    2      DCL RETURN_DELTA SBIN HALF;
      711     9675    2      DCL WORDS UBIN(36);
      712     9676    2      DCL 1 GEMREL_WDS REDEF WORDS,
      713     9677    2            2 LOWER_MEM SBIN(18) UNAL,
      714     9678    2            2 UPPER_MEM SBIN(18) UNAL;
      715     9679           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:27   
      716     9680        /* Code */
      717     9681
      718     9682    2      IF GEMREL_WDS.LOWER_MEM > 0
      719     9683    3      THEN DO ;
      720     9684    3              TOO_ERROR_CODE.ERR# = %E$BADGEMREL ;
      721     9685    3              CALL TOX$ERROR (TOO_ERROR_CODE) ;
      722     9686    3           END /* THEN */ ;
      723     9687    3      ELSE DO;
      724     9688    3              GEMREL_PAGES = GEMREL_WDS.UPPER_MEM/1024;
      725     9689    3              FDP_FPT.V.PAGES# = GEMREL_PAGES;
      726     9690    3              TOT$ECP.DYNAMIC_PAGE_COUNT = TOT$ECP.DYNAMIC_PAGE_COUNT - GEMREL_PAGES;
      727     9691    3              CALL M$FDP(FDP_FPT) ;
      728     9692    3              TOF$BAR.CURRENT.SIZE = TOF$BAR.CURRENT.SIZE - GEMREL_PAGES * 2;
      729     9693    3              TOF$BAR.CURRENT = TOF$BAR.CURRENT;
      730     9694    3              RETURN_DELTA = ADDR_BUF.RETURN_ADDR - MME_IC_FORMAT.IC_ADDR;
      731     9695    3           END /* ELSE */ ;
      732     9696    2      RETURN;
      733     9697
      734     9698    2   END TOO$MME_GEMREL;
      735     9699        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:28   
      736     9700        /*I*      NAME:    TOO$MME_GEPROC
      737     9701                  PURPOSE: IN GCOS USED TO CONVERT GEPR ORIGINATED TEST REQUESTS
      738     9702                           INTO STANDARD FORMAT.  THIS ROUTINE PRESENTLY UNUSED IN
      739     9703                           CP6 TOLTS.
      740     9704        */
      741     9705
      742     9706    1   TOO$MME_GEPROC: PROC (PARAM_1, PARAM_2, RETURN_DELTA);
      743     9707
      744     9708    2      DCL PARAM_1 UBIN(36);
      745     9709    2      DCL PARAM_2 UBIN(36);
      746     9710    2      DCL RETURN_DELTA SBIN HALF;
      747     9711
      748     9712        /* Code */
      749     9713
      750     9714    2      RETURN_DELTA = 3;
      751     9715    2      RETURN;
      752     9716
      753     9717    2   END TOO$MME_GEPROC;
      754     9718        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:29   
      755     9719        /*I* NAME:         TOO$MME_GERELC
      756     9720             CALL:         CALL TOO$MME_GERELC(RETURN_DELTA);
      757     9721             INTERFACE:    M$WAIT
      758     9722             INPUT:
      759     9723             OUTPUT:       RETURN_DELTA = 1
      760     9724             DESCRIPTION:  In the GCOS world, this MME removes the program
      761     9725                           from execution until the next I/O completes, or
      762     9726                           an interrupt occurrs.  This function is simulated
      763     9727                           here.
      764     9728
      765     9729                           A check is made to see if there is any outstanding
      766     9730                           I/O; included in this count are (1) no wait test
      767     9731                           I/O and (2) outstanding interslave I/O (reads).
      768     9732                           If there is none, this routine exits back to the
      769     9733                           subexec.  If there is outstanding I/O, the
      770     9734                           flag TOT$ECP.ISC.GERELC_WAIT is set, and a wait loop entered
      771     9735                           until the flag is reset.  It will be reset by the
      772     9736                           Event Handler when a no wait I/O completes, and by
      773     9737                           TOG$GCOS_MMES/TOG$MME_GEINOS when an interslave
      774     9738                           I/O completes.  The wait loop here is implemented
      775     9739                           by calling M$WAIT.  Control will return here
      776     9740                           whenever (1) the flag gets reset or (2) an interrupt
      777     9741                           occurs.
      778     9742        */
      779     9743        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:30   
      780     9744    1   TOO$MME_GERELC: PROC (RETURN_DELTA);
      781     9745
      782     9746    2      DCL RETURN_DELTA SBIN HALF;
      783     9747
      784     9748        /* Code */
      785     9749
      786     9750    2      IF TOT$ECP.IO.COUNT > 0
      787     9751    3      THEN DO;
      788     9752    3              TOT$ECP.ISC.GERELC_WAIT = %TRUE ;
      789     9753    4              DO WHILE (TOT$ECP.ISC.GERELC_WAIT) ;
      790     9754    4                 WAIT_FPT.V.UNITS# = 1;
      791     9755    4                 CALL M$WAIT(WAIT_FPT) ;
      792     9756    4              END /* WHILE */ ;
      793     9757    3           END /* THEN */ ;
      794     9758    2      ELSE /* Do Nothing */ ;
      795     9759    2      RETURN_DELTA = 1;
      796     9760    2      RETURN;
      797     9761
      798     9762    2   END TOO$MME_GERELC;
      799     9763        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:31   
      800     9764        /*I* NAME:         TOO$MME_GEROAD
      801     9765             CALL:         CALL TOO$TMME_GEROAD(RETURN_DELTA);
      802     9766             INTERFACE:    M$WAIT
      803     9767             INPUT:
      804     9768             OUTPUT:
      805     9769             DESCRIPTION:  Waits until all outstanding I/O completes before
      806     9770                           returning to the subexec.  This condition is
      807     9771                           indicated by TOT$ECP.IO.COUNT being equal to 0.  The
      808     9772                           Monitor Service Routine M$WAIT is called continually
      809     9773                           until the count of outstanding I/O goes to 0.  (This
      810     9774                           count includes all no wait I/O as well as interslave
      811     9775                           read requests from the subexecs.)
      812     9776        */
      813     9777
      814     9778    1   TOO$MME_GEROAD: PROC (RETURN_DELTA);
      815     9779
      816     9780    2      DCL RETURN_DELTA SBIN HALF;
      817     9781
      818     9782        /* Code */
      819     9783
      820     9784    3      DO WHILE (TOT$ECP.IO.COUNT ~= 0);
      821     9785    3         WAIT_FPT.V.UNITS# = 1;
      822     9786    3         CALL M$WAIT(WAIT_FPT) ;
      823     9787    3      END /* WHILE */ ;
      824     9788    2      RETURN_DELTA = 1;
      825     9789    2      RETURN;
      826     9790
      827     9791    2   END TOO$MME_GEROAD;
      828     9792        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:32   
      829     9793        /*I* NAME:         TOO$MME_GESNAP
      830     9794             CALL:         CALL TOO$MME_GESNAP(PARAM-1, RETURN_DELTA);
      831     9795             INPUT:
      832     9796             OUTPUT:
      833     9797             DESCRIPTION:  Not implemented in CP6 because of DELTA capability
      834     9798                           for debug purposes.
      835     9799        */
      836     9800
      837     9801    1   TOO$MME_GESNAP: PROC (PARAM_1, RETURN_DELTA);
      838     9802
      839     9803    2      DCL PARAM_1 UBIN(36);
      840     9804    2      DCL RETURN_DELTA SBIN HALF;
      841     9805
      842     9806        /* Code */
      843     9807
      844     9808    2      RETURN_DELTA = 2;
      845     9809    2      RETURN;
      846     9810
      847     9811    2   END TOO$MME_GESNAP;
      848     9812        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:33   
      849     9813        /*I*      NAME:    TOO$MME_GETIME
      850     9814                  PURPOSE: CALLED BY MME HANDLER FOR DATE AND TIME.
      851     9815                           SPECIFIES DEST AND SOURCE OPTIONS IN TIME_FPT INDICATING
      852     9816                           SOURCE AND FORMAT OF  DATE TO BE RETURNED.
      853     9817                           CALLS M$TIME WHICH RETURNS DATE TO DATE_BUFFER_ASCII
      854     9818                           IN FORMAT OF YYMMDD.
      855     9819                           CALLS TOT$ASCII_BCD TO CONVERT DATE FROM ASCII FORMAT TO
      856     9820                           BCD FORMAT .
      857     9821                           CALLS TOO$MME-ABSTIM TO RETURN TIME IN 1/64th MILLI_
      858     9822                           SECOND INCREMENTS SINCE MIDNIGHT.
      859     9823                           ASSIGNS RETURN_DELTA.
      860     9824                           RETURNS TO MME HANDLER WITH TIME AND DATE IN "GETIME_
      861     9825                           BUFFER" AND "DATE_BUFFER" RESPECTIVELY.
      862     9826        */
      863     9827        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:34   
      864     9828    1   TOO$MME_GETIME: PROC (DATE_BUFFER, GETIME_BUFFER, RETURN_DELTA);
      865     9829
      866     9830    2      DCL DATE_BUFFER UBIN(36);
      867     9831    2      DCL DATE_BUF_TEMP(0:5) REDEF DATE_BUFFER UBIN(6) UNAL;
      868     9832    2      DCL DATE_BUFFER_BCD(0:5) UBIN(6)  STATIC UNAL;
      869     9833    2      DCL GETIME_BUFFER UBIN(36);
      870     9834    2      DCL RETURN_DELTA SBIN HALF;
      871     9835
      872     9836        /* Code */
      873     9837
      874     9838    2      TIME_FPT.V.DEST# = %ANS#;
      875     9839    2      TIME_FPT.V.SOURCE# = %CLOCK#;
      876     9840
      877     9841    2      CALL M$TIME(TIME_FPT) ;
      878     9842    2      CHAR_COUNT = 6;
      879     9843    2      CALL TOT$ASCII_BCD(DATE_BUFFER_ASCII, DATE_BUFFER_BCD, CHAR_COUNT);
      880     9844    2      DATE_BUF_TEMP = DATE_BUFFER_BCD;
      881     9845
      882     9846    2      CALL TOO$MME_ABSTIM(GETIME_BUFFER, RETURN_DELTA);
      883     9847    2      RETURN_DELTA = 1;
      884     9848    2      RETURN;
      885     9849
      886     9850    2   END TOO$MME_GETIME;
      887     9851        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:35   
      888     9852        /*I* NAME:         TOO$MME_GEWAKE
      889     9853             INTERFACE:    M$WAIT Monitor Service
      890     9854                           MOD builtin function
      891     9855             INPUT:        GEWAKE_TIME = time to put program to sleep,
      892     9856                                         in 1/64 millisecond increments
      893     9857                           TOO$IO_COUNT
      894     9858             OUTPUT:       TOLTS sleeps for N seconds.
      895     9859                           RETURN_DELTA
      896     9860             DESCRIPTION:  This MME is supposed to put the program to sleep
      897     9861                           for the  specified period of time  or  until  an
      898     9862                           interrupt occurrs.    The implementation in CP-6
      899     9863                           in the form of an Interslave Read. The rationale
      900     9864                           for this is that between the time a subexec does
      901     9865                           MME GEWAKE  and the time it takes to get to this
      902     9866                           Service Routine,  the I/O the subexec is waiting
      903     9867                           on may have completed and  TOLTS will needlessly
      904     9868                           be put to sleep.
      905     9869
      906     9870                           The sleep increment  passed in GEWAKE_TIME is in
      907     9871                           1/64 millisecond increments.  It is converted to
      908     9872                           1 second increments, because that is the smallest
      909     9873                           increment M$WAIT will handle. If this conversion
      910     9874                           would result in a value less than 1 second,  the
      911     9875                           value is ignored.
      912     9876        */
      913     9877        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:36   
      914     9878    1   TOO$MME_GEWAKE: PROC (GEWAKE_TIME, RETURN_DELTA) ;
      915     9879
      916     9880    2      DCL GEWAKE_TIME       SBIN WORD ALIGNED ;
      917     9881    2      DCL RETURN_DELTA      SBIN HALF HALIGNED ;
      918     9882    2      DCL GEWAKE_COUNT      UBIN WORD STATIC ALIGNED INIT (0);
      919     9883
      920     9884        /* Code */
      921     9885
      922     9886    2      GEWAKE_TIME = GEWAKE_TIME / 64 ;
      923     9887    2      IF GEWAKE_TIME < 1000
      924     9888    2      THEN /* Ignore GEWAKE times less than 1 full second. */ ;
      925     9889    2      ELSE IF TOT$ECP.IO.COUNT > 1
      926     9890    3         THEN DO ;
      927     9891    3                 WAIT_FPT.V.UNITS# = GEWAKE_TIME / 1000 ;
      928     9892    3                 CALL M$WAIT (WAIT_FPT) ;
      929     9893    3              END /* THEN */ ;
      930     9894    3         ELSE DO ;
      931     9895    3                 GEWAKE_COUNT = GEWAKE_COUNT + 1 ;
      932     9896    3                 IF MOD (GEWAKE_COUNT, 20) = 0
      933     9897    4                 THEN DO ;
      934     9898    4                         WAIT_FPT.V.UNITS# = GEWAKE_TIME / 1000 ;
      935     9899    4                         CALL M$WAIT(WAIT_FPT) ;
      936     9900    4                      END /* ELSE */ ;
      937     9901    3                 ELSE /* Omit this GEWAKE for performance */ ;
      938     9902    3              END /* ELSE */ ;
      939     9903    2      RETURN_DELTA = 1;
      940     9904    2      RETURN;
      941     9905
      942     9906    2   END TOO$MME_GEWAKE;
      943     9907        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:37   
      944     9908        /*I*      NAME:    TOO$MME_PROCTM
      945     9909                  PURPOSE: BUILDS POINTER(CPU_TIME_PTR) TO STRUCTURE ELEMENT
      946     9910                           (B$JIT.TUEXT) IN JIT CONTAINING USERS EXECUTION TIME.
      947     9911                           CONVERTS USERS EXECTUION TIME FROM MILLISECONDS TO 1/64th
      948     9912                           MILLISECONDS BY MULTIPLYING THE BASED VARIABLE "EXECUTION_
      949     9913                           TIME" BY 64 AND ASSIGNING THE PRODUCT TO THE RETURN
      950     9914                           PARAMETER "CPU_TIME".
      951     9915                           THE RETURN PARAMETER "CPU_TIME".
      952     9916                           ASSIGNS RETURN_DELTA AND RETURNS TO MME HANDLER.
      953     9917        */
      954     9918
      955     9919    1   TOO$MME_PROCTM: PROC (CPU_TIME, RETURN_DELTA);
      956     9920
      957     9921    2      DCL CPU_TIME SBIN(36);
      958     9922    2      DCL CPU_TIME_PTR PTR;
      959     9923    2      DCL EXECUTION_TIME SBIN WORD BASED(CPU_TIME_PTR);
      960     9924    2      DCL RETURN_DELTA SBIN HALF;
      961     9925
      962     9926        /* Code */
      963     9927
      964     9928    2      CPU_TIME_PTR = ADDR(B$JIT.TUEXT);
      965     9929    2      CPU_TIME = 64*EXECUTION_TIME;
      966     9930    2      RETURN_DELTA = 1;
      967     9931    2      RETURN;
      968     9932
      969     9933    2   END TOO$MME_PROCTM;
      970     9934        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:38   
      971     9935        /*I* NAME:         TOO$MME_READIO
      972     9936             PURPOSE:      Handles MME Read I/O
      973     9937             INTERFACE:    TOT$ASCII_BCD
      974     9938             PARAMETERS:   CONTROLLING - ID (not used by CP-6)
      975     9939                           PARAM_ADDR - address of 3 word entry
      976     9940                           RETURN_DELTA
      977     9941             DATA:         IONUM - decremented by 1
      978     9942                           WRITE_BUF_VECTOR.SEGID - dynamic segment
      979     9943             DESCRIPTION:  This  procedure  handles  MME  read  i/o.  The
      980     9944                           actual read of the  data has already been done
      981     9945                           on a previous MME TADIOD. During that MME, the
      982     9946                           address of the buffer  into which the data was
      983     9947                           read was returned to the Subexec. (The address
      984     9948                           represents the offset into the dynamic segment
      985     9949                           overlaid by TOO$IO_BUFFER).  PARAM_ADDR is the
      986     9950                           address  of  a  3  word  entry  containing the
      987     9951                           buffer  address  mentioned  above,  TDPCN (T&D
      988     9952                           Page   Control   Number),   and   other  items
      989     9953                           presently  not used  by CP-6.  RETURN_DELTA is
      990     9954                           set to 3 to signify a normal return.
      991     9955
      992     9956                           Algorithm:
      993     9957                              obtain pointer to 3 word entry
      994     9958                              obtain pointer to where TOLTS has already
      995     9959                                 saved the ASCII data
      996     9960                              use indirect method to find where the test
      997     9961                                 page wants the BCD data
      998     9962
      999     9963                              find last non-blank ASCII character
     1000     9964                              convert ASCII to BCD
     1001     9965                              pad BCD with desired pad character
     1002     9966
     1003     9967                              update TOLTS table to reflect that the
     1004     9968                                 buffer was processed
     1005     9969        */
     1006     9970        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:39   
     1007     9971    1   TOO$MME_READIO: PROC (CONTROLLING, PARAM_ADDR, RETURN_DELTA);
     1008     9972
     1009     9973    2      DCL 1 CONTROLLING HALIGNED,
     1010     9974    2            2 *                      BIT (12) UNAL,
     1011     9975    2            2 ID                     BIT (6) UNAL ;
     1012     9976    2      DCL PARAM_ADDR                 UBIN HALF HALIGNED ;
     1013     9977    2      DCL RETURN_DELTA               SBIN HALF HALIGNED ;
     1014     9978
     1015     9979    2      DCL PARAM$                     PTR ALIGNED ;
     1016     9980    2      DCL 1 PARAMS BASED ALIGNED,
     1017     9981    2            2 WD1,
     1018     9982    2              3 *                    BIT (18) UNAL,
     1019     9983    2              3 TDPCN                UBIN (18) UNAL,
     1020     9984    2            2 WD2,
     1021     9985    2              3 BUFF_ADDR            UBIN (18) UNAL,
     1022     9986    2              3 *                    BIT (6) UNAL,
     1023     9987    2              3 EXEC_NUM             UBIN (6) UNAL,
     1024     9988    2              3 *                    BIT (6) UNAL,
     1025     9989    2            2 WD3,
     1026     9990    2              3 OPTION               UBIN (18) UNAL,
     1027     9991    2              3 *                    BIT (6) UNAL,
     1028     9992    2              3 TRUE_ID              UBIN (12) UNAL ;
     1029     9993    2      DCL BUFFER$                    PTR ALIGNED ;
     1030     9994    2      DCL 1 BUFFER_PTR REDEF BUFFER$ ALIGNED,
     1031     9995    2            2 ADDRESS                UBIN HALF UNAL,
     1032     9996    2            2 SEGID                  UBIN HALF UNAL ;
     1033     9997    2      DCL 1 BUFFER BASED ALIGNED,
     1034     9998    2            2 BUF_AVAILABLE_FLAG     BIT (1) UNAL,
     1035     9999    2            2 IO_REQ_SERVICED_FLAG   BIT (1) UNAL,
     1036    10000    2            2 READ_FLAG              BIT (1) UNAL,
     1037    10001    2            2 *                      UBIN(18) UNAL,
     1038    10002    2            2 PAD_CHAR               UBIN(6) UNAL,
     1039    10003    2            2 *                      UBIN(6) UNAL,
     1040    10004    2            2 *                      UBIN(3) UNAL,
     1041    10005    2            2 *                      UBIN(18) UNAL,
     1042    10006    2            2 *                      UBIN(6) UNAL,
     1043    10007    2            2 *                      UBIN(12) UNAL,
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:40   
     1044    10008    2            2 CHAR_COUNT             SBIN UNAL,
     1045    10009    2            2 WRITE_DATA             CHAR(7200) CALIGNED,
     1046    10010    2            2 READ_DATA              (0:83) CHAR (1) CALIGNED ;
     1047    10011    2      DCL INDIRECT$                  PTR ALIGNED ;
     1048    10012    2      DCL 1 INDIRECT BASED ALIGNED,
     1049    10013    2            2 *                      UBIN (18) UNAL,
     1050    10014    2            2 ADDRESS                UBIN (18) UNAL ;
     1051    10015    2      DCL TEST_PAGE_READ$            PTR ALIGNED ;
     1052    10016    2      DCL 1 TEST_PAGE_READ           BASED CALIGNED,
     1053    10017    2            2 DATA                   (0:83) UBIN (6) UNAL ;
     1054    10018    2      DCL I                          SBIN HALF HALIGNED ;
     1055    10019           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:41   
     1056    10020        /* Code */
     1057    10021
     1058    10022        /* Initialization */
     1059    10023    2      PARAM$ = PINCRW (IS$, PARAM_ADDR) ;
     1060    10024    2      INDIRECT$ = PINCRW (IS$, PARAM$ -> PARAMS.WD1.TDPCN) ;
     1061    10025    2      BUFFER_PTR.ADDRESS = PARAM$ -> PARAMS.WD2.BUFF_ADDR ;
     1062    10026    2      BUFFER_PTR.SEGID = WRITE_BUF_VECTOR.SEGID ;
     1063    10027    2      TEST_PAGE_READ$ = PINCRW (IS$, INDIRECT$ -> INDIRECT.ADDRESS + 88) ;
     1064    10028
     1065    10029        /* Convert TOLTS read data to BCD and store in Test Page Area */
     1066    10030    2      BUFFER$ -> BUFFER.CHAR_COUNT = 84 ;
     1067    10031    3      DO WHILE (BUFFER$->BUFFER.READ_DATA(BUFFER$->BUFFER.CHAR_COUNT - 1) = ' ');
     1068    10032    3         BUFFER$ -> BUFFER.CHAR_COUNT = BUFFER$ -> BUFFER.CHAR_COUNT - 1 ;
     1069    10033    3      END /* WHILE */ ;
     1070    10034    2      CALL TOT$ASCII_BCD (BUFFER$ -> BUFFER.READ_DATA,
     1071    10035    2              TEST_PAGE_READ$ -> TEST_PAGE_READ.DATA,
     1072    10036    2              BUFFER$ -> BUFFER.CHAR_COUNT) ;
     1073    10037    3      DO I = BUFFER$ -> BUFFER.CHAR_COUNT TO 83 ;
     1074    10038    3         TEST_PAGE_READ$ -> TEST_PAGE_READ.DATA(I) = BUFFER$ -> BUFFER.PAD_CHAR ;
     1075    10039    3      END /* DO */ ;
     1076    10040
     1077    10041        /* Update the TOLTS buffer to reflect new status */
     1078    10042    2      BUFFER$ -> BUFFER.READ_FLAG = %FALSE ;
     1079    10043    2      BUFFER$ -> BUFFER.BUF_AVAILABLE_FLAG = %FALSE ;
     1080    10044    2      BUFFER$ -> BUFFER.IO_REQ_SERVICED_FLAG = %FALSE ;
     1081    10045    2      IONUM = IONUM - 1 ;
     1082    10046    2      RETURN_DELTA = 3 ;
     1083    10047    2      RETURN;
     1084    10048
     1085    10049    2   END TOO$MME_READIO;
     1086    10050        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:42   
     1087    10051        /*I*      NAME:    TOO$MME_SETPR2
     1088    10052                  PURPOSE: USED IN GCOS TO ASSIGN A DEDICATED PRINTER.  PRESENTLY
     1089    10053                           UNUSED IN CP6 TOLTS.  RETURN_DELTA IS SET = 3 FOR REQUEST
     1090    10054                           DENIAL.
     1091    10055        */
     1092    10056
     1093    10057    1   TOO$MME_SETPR2: PROC (RETURN_DELTA);
     1094    10058
     1095    10059    2      DCL RETURN_DELTA SBIN HALF;
     1096    10060
     1097    10061        /* Code */
     1098    10062
     1099    10063    2      RETURN_DELTA = 3;
     1100    10064    2      RETURN;
     1101    10065
     1102    10066    2   END TOO$MME_SETPR2;
     1103    10067        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:43   
     1104    10068        /*I*      NAME:    TOO$MME_SETPRT
     1105    10069                  PURPOSE: USED IN GCOS TO ASSIGN A PRINTER.  THIS ROUTINE IS
     1106    10070                           PRESENTLY UNUSED IN CP6 TOLTS.  RETURN_DELTA IS SET
     1107    10071                           EQUAL TO 3 FOR REQUEST DENIAL.
     1108    10072        */
     1109    10073
     1110    10074    1   TOO$MME_SETPRT: PROC (RETURN_DELTA);
     1111    10075
     1112    10076    2      DCL RETURN_DELTA SBIN HALF;
     1113    10077
     1114    10078        /* Code */
     1115    10079
     1116    10080    2      RETURN_DELTA = 3;
     1117    10081    2      RETURN;
     1118    10082
     1119    10083    2   END TOO$MME_SETPRT;
     1120    10084        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:44   
     1121    10085        /*I*      NAME:    TOO$MME_TADIOD
     1122    10086                  PURPOSE: CALLED BY MME HANDLER TO SERVICE I/O REQUESTS.
     1123    10087                           INCREMENTS NUMBER OF I/O OPERATIONS CURRENTLY ASSIGNED I/O
     1124    10088                           BUFFER(IONUM) BY NUMBER OF REQUESTS PRESENTLY MADE.
     1125    10089                           DENIES ALL I/O REQUESTS IF IONUM>8.
     1126    10090                           CHECKS WRITE WORD COUNT FIELS OF THE 5 I/O PARAMETERS
     1127    10091                           PASSED(REDEFINED AS PARAM(0:4)).  IF ANY ARE >85 THEN ALL
     1128    10092                           I/O REQUESTS MADE ARRE DENIED, RETURN_DELTA IS SET,
     1129    10093                           AND CONTROL RETURNS TO MME HANDLER.
     1130    10094                           ALLOCATES AN AVAILIABLE I/O BUFFER, i.e., BUFFER WITH
     1131    10095                           TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG = 0, AND SETS TOF$IO_
     1132    10096                           BUFFER.BUF_AVAILIABLE_FLAG = 1.  SETS BUF_NUM ACCORDING TO
     1133    10097                           ARRAY INDEX OF I/O BUFFER ALLOCATED.
     1134    10098                           MOVES WRITE_WD_CNT_BCD, AND IO_REQ_BITS FIELDS FROM
     1135    10099                           PARAM(NUM_REQUESTS) TO RESPECTIVE FIELDS IN TOF$$$IO_BUFFER(
     1136    10100                           BUF_NUM). SIMILARLY MOVES TDPCN, PAD_CHAR, EXEC_NUM, AND
     1137    10101                           LID FIELDS FROM CONTROL_CODE  FIELDS TO THE ALLOCATED
     1138    10102                           BUFFER.  MAKES ENTRY OF THE FORM 'IO ' IN OCTAL FORMAT IN
     1139    10103                           IO_BUFFER ALLOCATED.
     1140    10104                           BUILDS POINTER(DCW_LIST_PTR) TO THE BASED VARIABLE DCW_LIST
     1141    10105                           LIST_ENTRY USING DCW LIST_ADDR FIELD CONTAINED IN
     1142    10106                           PARAM(NUM_REQUESTS).  SETS DCW_WORD STRUCTURE EQUAL TO DCW_
     1143    10107                           LIST _ENTRY.
     1144    10108                           DECREMENTS NUM_REQUESTS; INITIALIZES VARIABLES K, M, AND
     1145    10109                           CHECK TO ZERO.
     1146    10110                           INCREMENTS CHECK BY THE WORD COUNT FIELD CONTAINED IN DCW_
     1147    10111                           WORD.
     1148    10112                           SETS VARIABLE K = M. M INDICATES THE NEXT ARRAY ELEMENT
     1149    10113                           POSITION IN WRITE_BUF_BCD_REDEF   INTO WHICH DCW_DATA
     1150    10114                           WORD IS TTO BE MOVED IN THE EVENT THAT THERE ARE
     1151    10115                           MULTIPLE DCW_WORD ENTRIES FOR A SINGLE  I/O REQUEST.
     1152    10116                           MOVES DCW_DATA WORD INTO READ_BUF_BCD_REDEF. INCREMENTS
     1153    10117                           DCW_DATA_PTR TO POINT TO NEXT DCW_DATA WORD.  REPEATS
     1154    10118                           PROCESS UNTIL NUMBER OF WORDS SPECIFIED BY DCW_WORD.
     1155    10119                           WORD_COUNT HAS BEEN MOVED.
     1156    10120                           EVALUATES CODE FIELD IN DCW_WORD.  IF DCW_WORD.CODE = 1 THEN
     1157    10121                           MORE DATA EXISTS FOR THE I/O REQUEST PRESENTLY BEING
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:45   
     1158    10122                           SERVICED.  DCW_LIST_PTR IS INCREMENTED TO POINT TO NEXT
     1159    10123                           DCW_LIST_ENTRY AND DATA IS MOVED AS PREVIOUSLY
     1160    10124                           DESCRIBED.
     1161    10125                           IF DCW_WORD.CODE = 0 THEN ALL DATA HAS BEEN MOVED FOR
     1162    10126                           THIS I/O REQUEST.CHECK IS THEN COMPARED TO WRITE_WD_CNT_BCD
     1163    10127                           FIELD IN PARAMETER(NUM_REQUESTS).  IF THE VARIABLES ARE
     1164    10128                           EQUAL THEN M$XXX IS CALLED TO ABORT PROGRAM.  OTHERWISE
     1165    10129                           TOT$BCD_ASCII IS CALLED TO CONVERT DATA.  CONVERTED DATA
     1166    10130                           IS THEN MOVED INTO PREVIOUSLY ALLOCATED BUFFER.
     1167    10131                           IF IO_REQUESTS REMAIN TO BE SERVICED (i.e., NUM_REQUESTS ~= 0)
     1168    10132                           THEN THE NEXT IO_REQUEST IS SIMILARLY SERVICED.
     1169    10133                           IF NO I/O REQUESTS REMAIN THEN TOO$PROCESS_IO_REQ IS CALLED,
     1170    10134                           CALLED, RETURN_DELTA IS ASSIGNED AND CONTROL RETURNS TO
     1171    10135                           MME HANDLER.
     1172    10136        */
     1173    10137        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:46   
     1174    10138    1   TOO$MME_TADIOD: PROC (IO_CONTROL, NUMBER_OF_REQUESTS,
     1175    10139    1              PARAM_0, PARAM_1, PARAM_2, PARAM_3, PARAM_4, RETURN_DELTA);
     1176    10140
     1177    10141    2      DCL BUF_NUM SBIN HALF;
     1178    10142    2      DCL CHECK SBIN HALF;
     1179    10143    2      DCL DCW_DATA SBIN WORD BASED(DCW_DATA_PTR);
     1180    10144    2      DCL 1 DCW_DATA_PTR_FORMAT STATIC,
     1181    10145    2            2 DCW_DATA_ADDR UBIN(18) UNAL,
     1182    10146    2            2 ID UBIN(18) UNAL INIT (%IS_SEGID) ;
     1183    10147    2      DCL DCW_DATA_PTR REDEF DCW_DATA_PTR_FORMAT PTR;
     1184    10148    2      DCL DCW_LIST_ENTRY BIT(36) ALIGNED BASED (DCW_LIST_PTR) ;
     1185    10149    2      DCL 1 DCW_LIST_PTR_FORMAT STATIC,
     1186    10150    2            2 DCW_LIST_ADDR UBIN(18) UNAL,
     1187    10151    2            2 ID UBIN(18) UNAL INIT (%IS_SEGID);
     1188    10152    2      DCL DCW_LIST_PTR REDEF DCW_LIST_PTR_FORMAT PTR;
     1189    10153    2      DCL 1 DCW_WORD,
     1190    10154    2            2 DATA_ADDR UBIN(18) UNAL,
     1191    10155    2            2 CHAR_POSITION UBIN(3) UNAL,
     1192    10156    2            2 * UBIN(1) UNAL,
     1193    10157    2            2 CODE UBIN(2) UNAL,
     1194    10158    2            2 WORD_COUNT UBIN(12) UNAL;
     1195    10159    2      DCL I SBIN HALF;
     1196    10160    2      DCL IO_CONTROL UBIN(36);
     1197    10161    2      DCL 1 CONTROL_CODE REDEF IO_CONTROL,
     1198    10162    2            2 TDPCN UBIN(18) UNAL,
     1199    10163    2            2 PAD_CHAR UBIN(6) UNAL,
     1200    10164    2            2 * UBIN(3) UNAL,
     1201    10165    2            2 EXEC_NUM UBIN(3) UNAL,
     1202    10166    2            2 LID UBIN(6) UNAL;
     1203    10167    2      DCL J SBIN HALF;
     1204    10168    2      DCL K SBIN HALF;
     1205    10169    2      DCL M SBIN HALF;
     1206    10170    2      DCL NUM_REQUESTS UBIN(18);
     1207    10171    2      DCL NUMBER_OF_REQUESTS UBIN (36);
     1208    10172    2      DCL 1 NOR REDEF NUMBER_OF_REQUESTS,
     1209    10173    2            2 NO UBIN (18) UNAL,
     1210    10174    2            2 * UBIN (18) UNAL;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:47   
     1211    10175    2      DCL PARAM_0 BIT (36) ALIGNED;
     1212    10176    2      DCL PARAM_1 BIT (36) ALIGNED;
     1213    10177    2      DCL PARAM_2 BIT (36) ALIGNED;
     1214    10178    2      DCL PARAM_3 BIT (36) ALIGNED;
     1215    10179    2      DCL PARAM_4 BIT (36) ALIGNED;
     1216    10180    2      DCL 1 PARAMETER(0:4),
     1217    10181    2            2 DCW_LIST_ADDR UBIN(18) UNAL,
     1218    10182    2            2 IO_REQ_BITS UNAL,
     1219    10183    2              3 E UBIN(1) UNAL,
     1220    10184    2              3 R UBIN(1) UNAL,
     1221    10185    2              3 M UBIN(1) UNAL,
     1222    10186    2              3 S UBIN(1) UNAL,
     1223    10187    2              3 C UBIN(1) UNAL,
     1224    10188    2              3 P UBIN(1) UNAL,
     1225    10189    2            2 WRITE_WD_CNT_BCD UBIN(12) UNAL;
     1226    10190    2      DCL RETURN_DELTA SBIN HALF;
     1227    10191    2      DCL RETURN_DELTA_COUNT SBIN HALF;
     1228    10192    2      DCL WRITE_BUF_ASCII(0:7199) CHAR(1) STATIC CALIGNED;
     1229    10193    2      DCL WRITE_BUF_ASCII_REDEF REDEF WRITE_BUF_ASCII CHAR(7200);
     1230    10194    2      DCL WRITE_BUF_BCD(0:7199) UBIN(6) STATIC UNAL;
     1231    10195    2      DCL WRITE_BUF_BCD_REDEF(0:1199) REDEF WRITE_BUF_BCD UBIN(36);
     1232    10196        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:48   
     1233    10197        /* Code */
     1234    10198
     1235    10199    2      NUM_REQUESTS = NOR.NO;
     1236    10200
     1237    10201    2      RETURN_DELTA_COUNT = NUM_REQUESTS;
     1238    10202    2      PARAMETER(0) = PARAM_0;
     1239    10203    2      PARAMETER(1) = PARAM_1;
     1240    10204    2      PARAMETER(2) = PARAM_2;
     1241    10205    2      PARAMETER(3) = PARAM_3;
     1242    10206    2      PARAMETER(4) = PARAM_4;
     1243    10207
     1244    10208    2      IONUM = IONUM + NUM_REQUESTS;
     1245    10209    2      IF IONUM > 8
     1246    10210    3      THEN DO ;
     1247    10211    3              IONUM = IONUM - NUM_REQUESTS;
     1248    10212    3              RETURN_DELTA = 4 + RETURN_DELTA_COUNT;
     1249    10213    3              RETURN ;
     1250    10214    3           END /* THEN */ ;
     1251    10215    3      ELSE DO I = 0 TO (NUM_REQUESTS-1) BY 1;
     1252    10216    3              IF PARAMETER.WRITE_WD_CNT_BCD(I) > 1019
     1253    10217    4              THEN DO ;
     1254    10218    4                      TOO_ERROR_CODE.ERR# = %E$BADMSGSIZE ;
     1255    10219    4                      CALL TOX$ERROR (TOO_ERROR_CODE) ;
     1256    10220    4                   END /* THEN */ ;
     1257    10221    3           END /* ELSE */ ;
     1258    10222
     1259    10223    2   ALLOC_IO_BUFFER:
     1260    10224    3      DO I = 0 TO 7 BY 1;
     1261    10225    3         IF TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG(I) = 0
     1262    10226    4         THEN DO ;
     1263    10227    4                 TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG(I) = 1;
     1264    10228    4                 BUF_NUM = I;
     1265    10229    4                 GOTO NEXT_ENTRY;
     1266    10230    4              END;
     1267    10231    3      END;
     1268    10232           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:49   
     1269    10233    2   NEXT_ENTRY:
     1270    10234    2      NUM_REQUESTS = NUM_REQUESTS-1;
     1271    10235    2      CHECK = 0;
     1272    10236    2      TOO$IO_BUFFER.IO_REQ_BITS(BUF_NUM) = PARAMETER.IO_REQ_BITS(NUM_REQUESTS);
     1273    10237    2      TOO$IO_BUFFER.WRITE_WD_CNT_BCD(BUF_NUM) =
     1274    10238    2              PARAMETER.WRITE_WD_CNT_BCD(NUM_REQUESTS);
     1275    10239    2      TOO$IO_BUFFER.TDPCN(BUF_NUM) = CONTROL_CODE.TDPCN;
     1276    10240    2      TOO$IO_BUFFER.PAD_CHAR(BUF_NUM) = CONTROL_CODE.PAD_CHAR;
     1277    10241    2      TOO$IO_BUFFER.EXEC_NUM(BUF_NUM) = CONTROL_CODE.EXEC_NUM;
     1278    10242    2      TOO$IO_BUFFER.LID(BUF_NUM) = CONTROL_CODE.LID;
     1279    10243    2      TOO$IO_BUFFER.IO_ENTRY(BUF_NUM) = '314620'O;
     1280    10244
     1281    10245    2      DCW_LIST_PTR_FORMAT.DCW_LIST_ADDR = PARAMETER.DCW_LIST_ADDR(NUM_REQUESTS);
     1282    10246
     1283    10247    2      K = 0;
     1284    10248    2      M = 0;
     1285    10249    2   NEXT_DCW_WD:
     1286    10250    2      DCW_WORD = DCW_LIST_ENTRY;
     1287    10251    2      CHECK = CHECK + DCW_WORD.WORD_COUNT;
     1288    10252    2      DCW_DATA_PTR_FORMAT.DCW_DATA_ADDR = DCW_WORD.DATA_ADDR;
     1289    10253
     1290    10254    2      K = M;
     1291    10255    3      DO J = K TO (K + DCW_WORD.WORD_COUNT-1) BY 1;
     1292    10256    3         WRITE_BUF_BCD_REDEF(J) = DCW_DATA;
     1293    10257    3         M = J + 1;
     1294    10258    3         DCW_DATA_PTR = PINCRW(DCW_DATA_PTR, 1);
     1295    10259    3      END;
     1296    10260           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:50   
     1297    10261    3      DO CASE (DCW_WORD.CODE);
     1298    10262    3         CASE (0);
     1299    10263    3            IF CHECK ~= PARAMETER.WRITE_WD_CNT_BCD(NUM_REQUESTS)
     1300    10264    4            THEN DO ;
     1301    10265    4                    TOO_ERROR_CODE.ERR# = %E$BADWORDCT ;
     1302    10266    4                    CALL TOX$ERROR (TOO_ERROR_CODE) ;
     1303    10267    4                 END /* THEN */ ;
     1304    10268    4            ELSE DO;
     1305    10269    4                    CHAR_COUNT = TOO$IO_BUFFER.WRITE_WD_CNT_BCD(BUF_NUM) * 6;
     1306    10270    4                    CALL TOT$BCD_ASCII(WRITE_BUF_BCD, WRITE_BUF_ASCII, CHAR_COUNT);
     1307    10271    4                    TOO$IO_BUFFER.CHAR_COUNT(BUF_NUM) = CHAR_COUNT;
     1308    10272    4                    TOO$IO_BUFFER.WRITE_DATA(BUF_NUM) = WRITE_BUF_ASCII_REDEF;
     1309    10273    4                 END;
     1310    10274    3            IF NUM_REQUESTS ~= 0
     1311    10275    3            THEN GOTO ALLOC_IO_BUFFER;
     1312    10276    4            ELSE DO;
     1313    10277    4                    CALL TOO$PROCESS_IO_REQ;
     1314    10278    4                    RETURN_DELTA = 5 + RETURN_DELTA_COUNT;
     1315    10279    4                 END;
     1316    10280    3         CASE (1);
     1317    10281    3            DCW_LIST_PTR = PINCRW(DCW_LIST_PTR, 1);
     1318    10282    3            GOTO NEXT_DCW_WD;
     1319    10283    3      END /* CASE */ ;
     1320    10284    2      RETURN;
     1321    10285
     1322    10286        /* END TOO$MME_TADIOD */
     1323    10287        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:51   
     1324    10288        /*I*      NAME:    TOO$PROCESS_IO_REQ
     1325    10289                  PURPOSE: CALLED BY TOO$MME_TADIOD TO PROCESS IO REQUESTS
     1326    10290                           CURRENTLY IN TOO$IO_BUFFER STRUCTURE.
     1327    10291                           FINDS BUFFER WITH I/O REQUEST WHICH HASN'T BEEN SERVICED
     1328    10292                           AND SET IO_REQ_SERVICED_FLAG = 1.
     1329    10293                           VERIFIES THAT LID FOR THIS REQUEST IS VALID.  IF NOT
     1330    10294                           VALID THEN REQUEST IS NOT PROCESSED.
     1331    10295                           CALLS TOF$ERROR_MSG TO OUTPUT MESSAGE IF E, S, OR
     1332    10296                           P I/O REQUEST BITS ARE SET.  IF ANY OF THESE BITS
     1333    10297                           ARE SET THEN REQUEST IS NOT PROCESSED.
     1334    10298                           (9/17/85 KEL) If M bit is set, sets C bit and clears M.
     1335    10299                           IF R BIT IS SET THEN SETS TOO$IO_BUFFER.READ_FLAG = 1,
     1336    10300                           AND CALLS TOO$SERVICE_W_R_REQ.
     1337    10301                           IF C BIT IS SET THEN C BIT IS RESET AND TOO$SERVICE_WRITE
     1338    10302                           _REQUEST IS CALLED.
     1339    10303                           PROCESS IS REPEATED UNTIL ALL I/O BUFFERS HAVE BEEN
     1340    10304                           SERVICED.
     1341    10305                           RETURNS BACK TO TOO$MME_TADIOD.
     1342    10306        */
     1343    10307        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:52   
     1344    10308    2   TOO$PROCESS_IO_REQ: PROC;
     1345    10309
     1346    10310    3      DCL I SBIN HALF STATIC INIT (-1);
     1347    10311    3      DCL TEMP_LID UBIN(18);
     1348    10312
     1349    10313        /* Code */
     1350    10314
     1351    10315    3      I = -1;
     1352    10316
     1353    10317    3   START_LOOP:
     1354    10318    3      IF I = 7 THEN RETURN ;
     1355    10319    3      I = I+1;
     1356    10320
     1357    10321    3      IF TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG(I) = 0
     1358    10322    3      THEN GOTO START_LOOP;
     1359    10323
     1360    10324    3      IF TOO$IO_BUFFER.IO_REQ_SERVICED_FLAG(I) = 1
     1361    10325    3      THEN GOTO START_LOOP;
     1362    10326
     1363    10327    3      TOO$IO_BUFFER.IO_REQ_SERVICED_FLAG(I) = 1;
     1364    10328    3      TEMP_LID = TOO$IO_BUFFER.LID(I);
     1365    10329
     1366    10330    3      IF(TOO$IO_BUFFER.IO_REQ_BITS.E(I) = 1)|
     1367    10331    3              (TOO$IO_BUFFER.IO_REQ_BITS.S(I) = 1)|
     1368    10332    3              (TOO$IO_BUFFER.IO_REQ_BITS.P(I) = 1)
     1369    10333    4      THEN DO ;
     1370    10334    4              TOO_ERROR_CODE.ERR# = %E$BADIOBITS ;
     1371    10335    4              CALL TOX$ERROR (TOO_ERROR_CODE) ;
     1372    10336    4           END /* THEN */ ;
     1373    10337           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:53   
     1374    10338    3      IF TOO$IO_BUFFER.IO_REQ_BITS.R(I) = 1
     1375    10339    4      THEN DO;
     1376    10340    4              TOO$IO_BUFFER.READ_FLAG(I) = 1;
     1377    10341    4              TOO$IO_BUFFER.IO_REQ_BITS.R(I) = 0;
     1378    10342    4              CALL TOO$SERVICE_W_R_REQ(I);
     1379    10343    4              GOTO START_LOOP;
     1380    10344    4           END;
     1381    10345    3      ELSE IF (TOO$IO_BUFFER.IO_REQ_BITS.C(I) = 1)|
     1382    10346    3                 (TOO$IO_BUFFER.IO_REQ_BITS.M(I) = 1)
     1383    10347    4         THEN DO;
     1384    10348    4                 TOO$IO_BUFFER.IO_REQ_BITS.C(I) = 0;
     1385    10349    4                 TOO$IO_BUFFER.IO_REQ_BITS.M(I) = 0;
     1386    10350    4                 CALL TOO$SERVICE_WRITE_REQ(I);
     1387    10351    4                 GOTO START_LOOP;
     1388    10352    4              END;
     1389    10353    3      RETURN;
     1390    10354
     1391    10355    3   END TOO$PROCESS_IO_REQ;
     1392    10356        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:54   
     1393    10357        /*I*      NAME:    TOO$SERVICE_WRITE_REQ
     1394    10358                  PURPOSE: CALLED BY TOO$MME_TADIOD TO SERVICED WRITE REQUEST.
     1395    10359                           SETS BOUNDS IN WRITE_BUF_VECTOR.
     1396    10360                           SPECIFIES WAIT WRITE OPTION FOR WRITE I/O FPT.
     1397    10361                           FRAMES WRITE DATA AREA IN I/O BUFFER WITH PREVIOUSLY
     1398    10362                           BUILT VECTOR.
     1399    10363                           CALLS TOT$CONSOLE_OUT TO DO OUTPUT.
     1400    10364                           RETURNS TO TOO$PROCESS_IO_REQ.
     1401    10365        */
     1402    10366
     1403    10367    2   TOO$SERVICE_WRITE_REQ: PROC (BUF_NUM);
     1404    10368
     1405    10369    3      DCL BUF_ADDR PTR;
     1406    10370    3      DCL 1 BUF_ADDR_FORMAT REDEF BUF_ADDR,
     1407    10371    3            2 BASE UBIN(18) UNAL,
     1408    10372    3            2 SEGID UBIN(18) UNAL;
     1409    10373    3      DCL BUF_NUM SBIN HALF;
     1410    10374    3      DCL SERVICE_TYPE UBIN WORD ALIGNED ;
     1411    10375
     1412    10376        /* Code */
     1413    10377
     1414    10378    3      SERVICE_TYPE = %WRITE ;
     1415    10379    3      BUF_ADDR = ADDR(TOO$IO_BUFFER.WRITE_DATA(BUF_NUM));
     1416    10380    3      WRITE_BUF_VECTOR.BASE = BUF_ADDR_FORMAT.BASE;
     1417    10381    3      WRITE_BUF_VECTOR.SEGID = BUF_ADDR_FORMAT.SEGID ;
     1418    10382    3      WRITE_BUF_VECTOR.BOUNDS = TOO$IO_BUFFER.CHAR_COUNT(BUF_NUM) - 1;
     1419    10383    3      CALL TOO$BREAK_MESSAGE (SERVICE_TYPE, BUF_ADDR) ;
     1420    10384    3      CALL TOO$COURTESY_CALL(BUF_NUM);
     1421    10385    3      RETURN;
     1422    10386
     1423    10387    3   END TOO$SERVICE_WRITE_REQ;
     1424    10388        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:55   
     1425    10389        /*I* NAME:         TOO$BREAK_MESSAGE
     1426    10390             CALL:         CALL TOO$BREAK_MESSAGE (SERVICE_TYPE) ;
     1427    10391             INTERFACE:    INDEX library subroutine
     1428    10392                           TOT$CONSOLE_OUT
     1429    10393             INPUT:        Long message to be printed
     1430    10394             OUTPUT:       Small subsets of the long message
     1431    10395             DESCRIPTION:  Takes a long ASCII string of text from a subexec
     1432    10396                           and breaks in up into many little messages at
     1433    10397                           each CRLF because CP-6 cannot handle terminal
     1434    10398                           messages greater than 120 bytes in length, and the
     1435    10399                           messages from the subexecs far exceed that limit.
     1436    10400
     1437    10401                           See the code itself for details on how the message
     1438    10402                           string is broken up.
     1439    10403        */
     1440    10404
     1441    10405    2   TOO$BREAK_MESSAGE: PROC (SERVICE_TYPE, MSG$) ;
     1442    10406
     1443    10407    3      DCL 1 CRLF_ CONSTANT CALIGNED,
     1444    10408    3            2 CR CHAR(1) UNAL INIT (BITASC('015'O)),
     1445    10409    3            2 LF CHAR(1) UNAL INIT (BITASC('012'O));
     1446    10410    3      DCL CRLF REDEF CRLF_ CHAR(2) CALIGNED ;
     1447    10411    3      DCL CRLF_INDEX UBIN (36) ALIGNED ;
     1448    10412    3      DCL MESSAGE CHAR(7200) BASED CALIGNED;
     1449    10413    3      DCL MESSAGE_ (0:7199) CHAR (1) BASED CALIGNED ;
     1450    10414    3      DCL MESSAGE_SIZE UBIN(36);
     1451    10415    3      DCL MSG$ PTR ALIGNED ;
     1452    10416    3      DCL MSG_START_INDEX UBIN (36) ALIGNED ;
     1453    10417    3      DCL MSG_LGTH        UBIN (36) ;
     1454    10418    3      DCL OUT_LGTH        UBIN (36) ;
     1455    10419    3      DCL SERVICE_TYPE UBIN WORD ALIGNED ;
     1456    10420           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:56   
     1457    10421        /* Code */
     1458    10422
     1459    10423    3      MESSAGE_SIZE = WRITE_BUF_VECTOR.BOUNDS + 1 ;
     1460    10424
     1461    10425           /* Get first non CRLF character to print */
     1462    10426    3      MSG_START_INDEX = 0 ;
     1463    10427    3      CALL INDEX (CRLF_INDEX,
     1464    10428    3              CRLF,
     1465    10429    3              MSG$ -> MESSAGE,
     1466    10430    3              MSG_START_INDEX) ;
     1467    10431    4      DO WHILE (MSG_START_INDEX = CRLF_INDEX) ;
     1468    10432    4         MSG_START_INDEX = MSG_START_INDEX + 2 ;
     1469    10433    4         CALL INDEX (CRLF_INDEX,
     1470    10434    4                 CRLF,
     1471    10435    4                 MSG$ -> MESSAGE,
     1472    10436    4                 MSG_START_INDEX) ;
     1473    10437    4      END /* WHILE */ ;
     1474    10438
     1475    10439           /* Loop through and print all parts of the message */
     1476    10440    4      DO WHILE (MSG_START_INDEX < MESSAGE_SIZE) ;
     1477    10441              /* Set up message part length */
     1478    10442    4         IF CRLF_INDEX < MESSAGE_SIZE
     1479    10443    4         THEN MSG_LGTH = CRLF_INDEX - MSG_START_INDEX ;
     1480    10444    4         ELSE MSG_LGTH = MESSAGE_SIZE - MSG_START_INDEX ;
     1481    10445
     1482    10446    4         IF MSG_LGTH + MSG_START_INDEX >= MESSAGE_SIZE
     1483    10447    5         THEN DO ;
     1484    10448    5                 IF SERVICE_TYPE = %WRITE_READ
     1485    10449    5                 THEN CALL TOO$FORMAT_SIMULATED_PROMPT (MSG_LGTH, OUT_LGTH) ;
     1486    10450    5                 ELSE OUT_LGTH = MSG_LGTH ;
     1487    10451    5                 CONSOLE_FPT.BUF_ = VECTOR (SUBSTR (MSG$->MESSAGE,
     1488    10452    5                         MSG_START_INDEX,
     1489    10453    5                         OUT_LGTH)) ;
     1490    10454    5                 IF SERVICE_TYPE = %WRITE_READ
     1491    10455    5                 THEN CALL TOT$PROMPT_OUT ;
     1492    10456    5                 ELSE CALL TOT$CONSOLE_OUT ;
     1493    10457    5                 MSG_START_INDEX = MSG_START_INDEX + MSG_LGTH ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:57   
     1494    10458    5              END ;
     1495    10459    5         ELSE DO ;
     1496    10460    5                 CONSOLE_FPT.BUF_ = VECTOR (SUBSTR (MSG$->MESSAGE,
     1497    10461    5                         MSG_START_INDEX,
     1498    10462    5                         MSG_LGTH)) ;
     1499    10463    5                 CALL TOT$CONSOLE_OUT ;
     1500    10464
     1501    10465                      /* Get next non CRLF character to print */
     1502    10466    5                 MSG_START_INDEX = MSG_START_INDEX + MSG_LGTH ;
     1503    10467    5                 CALL INDEX (CRLF_INDEX,
     1504    10468    5                         CRLF,
     1505    10469    5                         MSG$ -> MESSAGE,
     1506    10470    5                         MSG_START_INDEX) ;
     1507    10471    6                 DO WHILE (MSG_START_INDEX = CRLF_INDEX) ;
     1508    10472    6                    MSG_START_INDEX = MSG_START_INDEX + 2 ;
     1509    10473    6                    CALL INDEX (CRLF_INDEX,
     1510    10474    6                            CRLF,
     1511    10475    6                            MSG$ -> MESSAGE,
     1512    10476    6                            MSG_START_INDEX) ;
     1513    10477    6                 END /* WHILE */ ;
     1514    10478    5              END ; /* ELSE DO */
     1515    10479    4      END /* WHILE */ ;
     1516    10480    3      RETURN ;
     1517    10481
     1518    10482        /* END TOO$BREAK_MESSAGE */
     1519    10483        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:58   
     1520    10484    3   TOO$FORMAT_SIMULATED_PROMPT: PROC (MSG_LGTH, OUT_LGTH) ;
     1521    10485
     1522    10486    4      DCL MSG_LGTH    UBIN WORD ALIGNED ;
     1523    10487    4      DCL OUT_LGTH    UBIN WORD ALIGNED ;
     1524    10488
     1525    10489        /* Code */
     1526    10490
     1527    10491    4      OUT_LGTH = MSG_LGTH ;
     1528    10492    5      DO WHILE (MSG$ -> MESSAGE_(MSG_START_INDEX+OUT_LGTH-1) = ' ') ;
     1529    10493    5         OUT_LGTH = OUT_LGTH - 1 ;
     1530    10494    5      END /* WHILE */ ;
     1531    10495    4      IF MSG$ -> MESSAGE_(MSG_START_INDEX+OUT_LGTH-1) = ':' |
     1532    10496    4              MSG$ -> MESSAGE_(MSG_START_INDEX+OUT_LGTH-1) = '-'
     1533    10497    4      THEN OUT_LGTH = OUT_LGTH + 1 ;
     1534    10498    5      ELSE DO ;
     1535    10499    5              MSG$ -> MESSAGE_(MSG_START_INDEX+OUT_LGTH) = ':' ;
     1536    10500    5              OUT_LGTH = OUT_LGTH + 2 ;
     1537    10501    5           END /* ELSE */ ;
     1538    10502    4      RETURN ;
     1539    10503
     1540    10504    4   END TOO$FORMAT_SIMULATED_PROMPT ;
     1541    10505    3   END TOO$BREAK_MESSAGE ;
     1542    10506        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:59   
     1543    10507        /*I*      NAME:    TOO$SERVICE_W_R_REQ
     1544    10508                  PURPOSE: CALLED BY TOO$PROCESS_IO_REQ TO PROCESS A WRITE THEN READ
     1545    10509                           OPERATION.
     1546    10510                           SETS BOUNDS IN WRITE_BUF_VECTOR.
     1547    10511                           FRAMES WRITE DATA IN TOO$IO_BUFFER WITH WRITE_BUF_VECTOR.
     1548    10512                           FRAMES 84 CHARACTER READ BUFFER WITH VECTOR.
     1549    10513                           CALLS TOT$WRITE_READ_IO.
     1550    10514                           RETURNS TO TOF$PROCESS_REQ.
     1551    10515        */
     1552    10516
     1553    10517    2   TOO$SERVICE_W_R_REQ: PROC (BUF_NUM);
     1554    10518
     1555    10519    3      DCL SERVICE_TYPE UBIN WORD ALIGNED ;
     1556    10520    3      DCL BUF_ADDR PTR;
     1557    10521    3      DCL 1 BUF_ADDR_FORMAT REDEF BUF_ADDR,
     1558    10522    3            2 BASE  UBIN(18) UNAL,
     1559    10523    3            2 SEGID UBIN(18) UNAL;
     1560    10524    3      DCL BUF_NUM SBIN HALF;
     1561    10525
     1562    10526        /* Code */
     1563    10527
     1564    10528    3      SERVICE_TYPE = %WRITE_READ ;
     1565    10529    3      BUF_ADDR = ADDR(TOO$IO_BUFFER.WRITE_DATA(BUF_NUM));
     1566    10530    3      WRITE_BUF_VECTOR.BASE = BUF_ADDR_FORMAT.BASE;
     1567    10531    3      WRITE_BUF_VECTOR.BOUNDS = TOO$IO_BUFFER.CHAR_COUNT(BUF_NUM) -1;
     1568    10532    3      WRITE_BUF_VECTOR.SEGID = BUF_ADDR_FORMAT.SEGID ;
     1569    10533    3      CALL TOO$BREAK_MESSAGE (SERVICE_TYPE, BUF_ADDR) ;
     1570    10534    3      READ_IO.BUF_ = VECTOR(TOO$IO_BUFFER.READ_DATA(BUF_NUM));
     1571    10535    3      TOO$IO_BUFFER.READ_DATA(BUF_NUM) = ' ';
     1572    10536    3      CALL TOT$WRITE_READ_IO;
     1573    10537    3      CALL TOO$COURTESY_CALL(BUF_NUM);
     1574    10538    3      RETURN;
     1575    10539
     1576    10540    3   END TOO$SERVICE_W_R_REQ;
     1577    10541    2   END TOO$MME_TADIOD ;
     1578    10542        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:60   
     1579    10543        /*I*      NAME:    TOO$MME_TERMIN
     1580    10544                  PURPOSE: CALLED BY MME HANDLER TO TERMINATE TOLTS.
     1581    10545                           CALLS TOT$RESTART ROUTINE TO TERMINATE TOLTS.
     1582    10546        */
     1583    10547
     1584    10548    1   TOO$MME_TERMIN: PROC (WD1, RETURN_DELTA);
     1585    10549
     1586    10550    2      DCL RETURN_DELTA SBIN HALF;
     1587    10551    2      DCL WD1 UBIN(36);
     1588    10552
     1589    10553        /* Code */
     1590    10554
     1591    10555    2      IF TOQ$DCP.PF.ENABLED
     1592    10556    3      THEN DO ;
     1593    10557    3              TOQ$DCP.PF.REASON = %TERMIN ;
     1594    10558    3              CALL TOQ$DEBUG ;
     1595    10559    3           END /* THEN */ ;
     1596    10560    2      ELSE /* No need to terminate DELTA association. */ ;
     1597    10561    2      CALL TOT$RESTART;
     1598    10562    2      RETURN;
     1599    10563
     1600    10564    2   END TOO$MME_TERMIN ;
     1601    10565        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:61   
     1602    10566        /*I*      NAME:    TOO$MME_TOLDIS
     1603    10567                  PURPOSE: CALLED BY MME HANDLER TO DISCONNECT A PREVIOUSLY
     1604    10568                           ASSIGNED LID.
     1605    10569                           VERIFIES THAT LID BEING DISCONNECTED IS VALID.  IF
     1606    10570                           INVALID THEN ABORTS.
     1607    10571                           IF VALID THEN SETS LID = 63(=77 OCTAL) SETS RETURN_DELTA
     1608    10572                           AND RETURNS TO MME HANDLER.
     1609    10573        */
     1610    10574
     1611    10575    1   TOO$MME_TOLDIS: PROC (LID, RETURN_DELTA);
     1612    10576
     1613    10577    2      DCL 1 LID HALIGNED,
     1614    10578    2            2 *     UBIN(12) UNAL,
     1615    10579    2            2 DATA  UBIN(6) UNAL;
     1616    10580    2      DCL RETURN_DELTA SBIN HALF ;
     1617    10581
     1618    10582        /* Code */
     1619    10583
     1620    10584    2      IF LID.DATA > 3 AND LID.DATA < 12
     1621    10585    3      THEN DO ;
     1622    10586    3              ID_CODE_TBL.ASSGN_FLAG(LID.DATA) = 0;
     1623    10587    3              LID.DATA = 63;
     1624    10588    3              RETURN_DELTA = 3;
     1625    10589    3              RETURN;
     1626    10590    3           END /* THEN */ ;
     1627    10591    3      ELSE DO ;
     1628    10592    3              TOO_ERROR_CODE.ERR# = %E$BADLOGID ;
     1629    10593    3              CALL TOX$ERROR (TOO_ERROR_CODE) ;
     1630    10594    3           END /* ELSE */ ;
     1631    10595
     1632    10596    2   END TOO$MME_TOLDIS;
     1633    10597        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:62   
     1634    10598        /*I*      NAME:    TOO$MME_TOLGON
     1635    10599                  PURPOSE: USED IN GCOS TO INFORM TOLTS THAT POLTS IS TERMINATING.
     1636    10600                           PRESENTLY UNUSED IN CP6 TOLTS.
     1637    10601        */
     1638    10602
     1639    10603    1   TOO$MME_TOLGON: PROC (EXEC_NUM, RETURN_DELTA);
     1640    10604
     1641    10605    2      DCL EXEC_NUM UBIN(18) HALIGNED ;
     1642    10606    2      DCL RETURN_DELTA SBIN HALF;
     1643    10607        /*
     1644    10608        Code
     1645    10609        */
     1646    10610    2      RETURN_DELTA = 3;
     1647    10611    2      RETURN;
     1648    10612    2   END TOO$MME_TOLGON;
     1649    10613        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:63   
     1650    10614        /*I*      NAME:    TOO$MME_TOLTIN
     1651    10615                  PURPOSE: CALLS TOO$MME_GEWAKE TO PUT PROGRAM TO SLEEP
     1652    10616                           FOR SPECIFIED PERIOD OF TIME.
     1653    10617                           Always assume TOLTS in core.
     1654    10618                           Do a MME GEWAKE unconditionally.
     1655    10619        */
     1656    10620
     1657    10621    1   TOO$MME_TOLTIN: PROC (TIME_PARAM, RETURN_DELTA);
     1658    10622
     1659    10623    2      DCL RETURN_DELTA SBIN HALF;
     1660    10624    2      DCL TIME_PARAM   UBIN(36);
     1661    10625
     1662    10626        /* Code */
     1663    10627
     1664    10628    2      CALL TOO$MME_GEWAKE (TIME_PARAM, RETURN_DELTA);
     1665    10629    2      RETURN_DELTA = 2;
     1666    10630    2      RETURN;
     1667    10631
     1668    10632    2   END TOO$MME_TOLTIN;
     1669    10633        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:64   
     1670    10634        /*I* NAME:         TOO$MME_TRACIO
     1671    10635             AUTHOR:       Scott S. Sheppard
     1672    10636             PURPOSE:      Allows MME TRACIO to be issued
     1673    10637             INTERFACE:    None called.
     1674    10638             PARAMETERS:   RETURN_DELTA - output
     1675    10639             DATA:         No external data accessed.
     1676    10640             DESCRIPTION:  This procedure handles MME TRACIO for CP-6. On
     1677    10641                           GCOS, the  MME dumps four lines  of octal data
     1678    10642                           to a dedicated  printer for later analysis. In
     1679    10643                           the  CP-6  world,  this  functionality  can be
     1680    10644                           duplicated and even surpassed using options on
     1681    10645                           DEBUG   test  requests  so   the  MME  is  not
     1682    10646                           implemented. This MME is allowed however since
     1683    10647                           a  'Z' option  on a  POLTS request  results in
     1684    10648                           this   MME   being    issued   by   the   CPLT
     1685    10649                           Subexecutive.
     1686    10650        */
     1687    10651
     1688    10652    1   TOO$MME_TRACIO: PROC (RETURN_DELTA) ;
     1689    10653
     1690    10654    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
     1691    10655
     1692    10656        /* Code */
     1693    10657
     1694    10658    2      RETURN_DELTA = 2 ;
     1695    10659    2      RETURN ;
     1696    10660
     1697    10661    2   END TOO$MME_TRACIO ;
     1698    10662        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:65   
     1699    10663        /*I*      NAME:    TOO$COURTESY_CLL
     1700    10664                  PURPOSE: CALLED BY EVENT HANDLER, AFTER COMPLETION OF WRITE
     1701    10665                           OR WRITE THEN READ OPERATION, TO BUILD A STATUS ENTRY.
     1702    10666                           DERIVES TOO$IO_BUFFER ARRAY INDEX OF I/O BUFFER JUST
     1703    10667                           SERVICED FROM EVENT ID.
     1704    10668                           ENTERS ADDRESS OF I/O BUFFER JUST SERVICED IN STATUS_WD_B.
     1705    10669                           BUF_ADDR.
     1706    10670                           MOVES TDPCN FROM I/O BUFFER TO STATUS_WD_A.TDPCN.
     1707    10671                           IF READ COMPLETED THEN BUILDS ENTRY OF THE FORM' O-'
     1708    10672                           IN IO_ENTRY FIELD OF STATUS_WD_A IN AN OCTAL FORMAT.
     1709    10673                           IF WRITE COMPLETED THEN BUILDS ENTRY OF THE FORM
     1710    10674                           ' S-' IN IO_ENTRY FIELD OF STATUS_WD_A IN AN OCTAL
     1711    10675                           FORMAT.  TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG AND
     1712    10676                           TOO$IO_BUFFER.IO_REQ_SERVICED_FLAG ARE RESET.
     1713    10677                           IONUM IS DECREMENTED BY 1.
     1714    10678                           TOT$BUILD_DISP_SUBEXEC IS THEN CALLED TO MOVE ENTRIES
     1715    10679                           INTO SUBEXEC QUEUE.
     1716    10680                           RETURN IS BACK TO EVENT HANDLER.
     1717    10681        */
     1718    10682        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:66   
     1719    10683    1   TOO$COURTESY_CALL: PROC (BUF_INDEX);
     1720    10684
     1721    10685    2      DCL BUF_INDEX SBIN HALF;
     1722    10686    2      DCL 1 BUFFER_ADDR_FORMAT ,
     1723    10687    2            2 BUF_ADDR UBIN(18) UNAL,
     1724    10688    2            2 ID UBIN(18) UNAL;
     1725    10689    2      DCL BUFFER_PTR REDEF BUFFER_ADDR_FORMAT PTR;
     1726    10690    2      DCL 1 STATUS_WD_A ,
     1727    10691    2            2 IO_ENTRY BIT(18) UNAL,
     1728    10692    2            2 TDPCN UBIN(18) UNAL;
     1729    10693    2      DCL ENTRY_A REDEF STATUS_WD_A UBIN(36);
     1730    10694    2      DCL 1 STATUS_WD_B ,
     1731    10695    2            2 BUF_ADDR UBIN(18) UNAL,
     1732    10696    2            2 LID UBIN(18) UNAL;
     1733    10697    2      DCL ENTRY_B REDEF STATUS_WD_B UBIN(36);
     1734    10698           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:67   
     1735    10699        /* Code */
     1736    10700
     1737    10701    2      IF BUF_INDEX > 7
     1738    10702    2      THEN BUF_INDEX = BUF_INDEX-8;
     1739    10703    2      ELSE /* Do Nothing */ ;
     1740    10704
     1741    10705    2      BUFFER_PTR = ADDR(TOO$IO_BUFFER(BUF_INDEX));
     1742    10706    2      STATUS_WD_B.BUF_ADDR = BUFFER_ADDR_FORMAT.BUF_ADDR;
     1743    10707    2      STATUS_WD_B.LID = TOO$IO_BUFFER.LID (BUF_INDEX) ;
     1744    10708    2      STATUS_WD_A.TDPCN = TOO$IO_BUFFER.TDPCN(BUF_INDEX);
     1745    10709
     1746    10710    2      IF TOO$IO_BUFFER.READ_FLAG(BUF_INDEX) = 1
     1747    10711    2      THEN STATUS_WD_A.IO_ENTRY = '204652'O;
     1748    10712    3      ELSE DO;
     1749    10713    3              STATUS_WD_A.IO_ENTRY = '206252'O;
     1750    10714    3              TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG(BUF_INDEX) = 0;
     1751    10715    3              TOO$IO_BUFFER.IO_REQ_SERVICED_FLAG(BUF_INDEX) = 0;
     1752    10716    3           END /* ELSE */ ;
     1753    10717    2      IONUM = IONUM - 1;
     1754    10718
     1755    10719    2      QUEUE_ENTRY(0) = ENTRY_A;
     1756    10720    2      QUEUE_ENTRY(1) = ENTRY_B;
     1757    10721    2      QUEUE_ENTRY(2) = 0;
     1758    10722    2      SERVICE_CODE = %DSC_ISC;
     1759    10723    2      REQUEST_TYPE = %DRT_BUILD;
     1760    10724    2      CALL TOD$DISPATCHER(REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY);
     1761    10725    2      RETURN;
     1762    10726
     1763    10727    2   END TOO$COURTESY_CALL;
     1764    10728    1   END TOO$TOLTS_MMES ;

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:68   
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOO$TOLTS_MMES.

   Procedure TOO$TOLTS_MMES requires 1930 words for executable code.
   Procedure TOO$TOLTS_MMES requires 64 words of local(AUTO) storage.

    No errors detected in file TOO$TOLTS_MMES.:E05TSI    .

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:69   

 Object Unit name= TOO$TOLTS_MMES                             File name= TOO$TOLTS_MMES.:E05TOU
 UTS= JUL 30 '97 06:26:50.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none  3097   6031  TOO$TOLTS_MMES
    2  RoData even  UTS      7      7  TOO$TOLTS_MMES
    3   Proc  even  none  1930   3612  TOO$TOLTS_MMES
    4  RoData even  none    26     32  TOO$TOLTS_MMES

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        4  TOO$TOLTS_MMES
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:70   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 TOX$ERROR
         yes           Std       0 TOQ$DEBUG
 yes     yes           Std       7 TOL$GET_DECK
         yes           Std       3 TOT$BCD_ASCII
         yes           Std       3 TOT$ASCII_BCD
         yes           Std       0 TOT$PROMPT_OUT
         yes           Std       0 TOT$CONSOLE_OUT
         yes           Std       0 TOT$WRITE_READ_IO
         yes           Std       0 TOT$RESTART
         yes           Std       3 TOD$DISPATCHER
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  READ_IO                               CONSOLE_FPT
     B$JIT$                                TOF$BAR                               TOQ$DCP
     TOT$DMC                               TOT$ECP                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:71   


        1        1        /*M* TOO$TOLTS_MMES     TOLTS MME Service Routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOO$TOLTS_MMES
       12       12             PURPOSE:      TOLTS MME Service Routines.
       13       13             DESCRIPTION:  Contains the following MME Service Routines:
       14       14                           MME GECALL(GCOS)    MME ABSTIME
       15       15                           MME GEMORE(GCOS)    MME ACCWRT
       16       16                           MME GEMREL(GCOS)    MME CONTML
       17       17                           MME GERELC(GCOS)    MME DISPRT
       18       18                           MME GEROAD(GCOS)    MME GEPROC
       19       19                           MME GESNAP(GCOS)    MME PROCTM
       20       20                           MME GETIME(GCOS)    MME READIO
       21       21                           MME GEWAKE(GCOS)    MME SETPR2
       22       22                                               MME SETPRT
       23       23                                               MME SETTYP
       24       24                                               MME TADIOD
       25       25                                               MME TERMIN
       26       26                                               MME TOLDIS
       27       27                                               MME TOLGON
       28       28                                               MME TOLTIN
       29       29                                               MME TRACIO
       30       30             LAST UPDATE:  09/17/85
       31       31             REFERENCE:    CP-6 Release D0B0
       32       32                           Scott Sheppard
       33       33        */
       34       34        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:72   
       35       35        TOO$TOLTS_MMES: PROC (MME, MREG, MME_INSTR$, RETURN_DELTA);

     35  3 000000   000000 700200 xent  TOO$TOLTS_M* TSX0  ! X66_AUTO_4
         3 000001   000100 000004                    ZERO    64,4

       36       36
       37       37        /* Include Files */
       38       38
       39       39           %INCLUDE B$JIT;
       40      642           %INCLUDE CP_6;
       41     6201           %INCLUDE CP_6_SUBS;
       42     6741           %INCLUDE TOT_TOLTS_M;
       43     7859           %INCLUDE TOT_RQSTS_E ;
       44     7901           %INCLUDE TO_PERR_C ;
       45     8486
       46     8487        /* Parameters */
       47     8488
       48     8489           %MME ;
       49     8510           %MREG ;
       50     8532           %MME_INSTR$ ;
       51     8535           %RETURN_DELTA ;
       52     8538           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:73   
       53     8539        /* Function Parameter Tables */
       54     8540
       55     8541           %FPT_FDP(FPTN = FDP_FPT,
       56     8542                    RESULTS = GEMREL_VEC);
       57     8556           %FPT_GDP(FPTN = GDP_FPT,
       58     8557                    RESULTS = GEMORE_VEC);
       59     8571           %FPT_TIME(FPTN = TIME_FPT,
       60     8572                     SOURCE = CLOCK,
       61     8573                     DATE = DATE_BUFFER_ASCII,
       62     8574                     TSTAMP = TIME_BUFFER);
       63     8593           %FPT_READ(FPTN = READ_IO,
       64     8594                     STCLASS = SYMREF);
       65     8633           %FPT_WRITE(FPTN = CONSOLE_FPT,
       66     8634                      STCLASS = SYMREF);
       67     8665           %FPT_WAIT(FPTN = WAIT_FPT);
       68     8679
       69     8680        /* External Variables and Flags */
       70     8681
       71     8682    1      DCL B$JIT$ PTR SYMREF;
       72     8683           %TOF$BAR (STCLASS = SYMREF) ;
       73     8706           %TOQ$DCP (STCLASS = SYMREF) ;
       74     8738           %TOT$DMC (STCLASS = SYMREF) ;
       75     8772           %TOO$IO_BUFFER (STCLASS = "BASED (TOT$DMC.TOO$IO_BUFFER.PTR$)") ;
       76     8820           %TOP$TCP (STCLASS = "BASED (TOT$DMC.TOP$TCP.PTR$)") ;
       77     8908           %TOT$ECP (STCLASS = SYMREF) ;
       78     8957           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:74   
       79     8958        /* Local Variables and Flags */
       80     8959
       81     8960    1      DCL CHAR_COUNT        SBIN ALIGNED ;
       82     8961    1      DCL DATE_BUFFER_ASCII (0:5) CHAR(1) STATIC;
       83     8962    1      DCL 1 ID_CODE_TBL (0:11) STATIC,
       84     8963    1            2 *             UBIN(18) UNAL INIT (0*0),
       85     8964    1            2 EXEC_NUM      UBIN(6) UNAL INIT (0*0),
       86     8965    1            2 ASSGN_FLAG    UBIN(12) UNAL INIT (0*0);
       87     8966           %IS$ (STCLASS = CONSTANT) ;
       88     8980           %VLP_VECTOR (FPTN = GEMORE_VEC);
       89     8995           %VLP_VECTOR (FPTN = GEMREL_VEC);
       90     9010    1      DCL IONUM             SBIN HALF STATIC INIT (0);
       91     9011    1      DCL QUEUE_ENTRY       (0:2) UBIN(36);
       92     9012    1      DCL REQUEST_TYPE      UBIN(36);
       93     9013    1      DCL SERVICE_CODE      UBIN(18);
       94     9014    1      DCL TIME_BUFFER       UBIN(36) STATIC;
       95     9015    1      DCL 1 WRITE_BUF_VECTOR STATIC DALIGNED,
       96     9016    1            2 BOUNDS        UBIN(20) UNAL,
       97     9017    1            2 FLAGS         BIT(9) UNAL INIT ('777'O),
       98     9018    1            2 V             BIT(2) UNAL INIT ('01'B),
       99     9019    1            2 *             UBIN(5) UNAL,
      100     9020    1            2 BASE          UBIN(18) UNAL,
      101     9021    1            2 *             UBIN (6) UNAL INIT (0),
      102     9022    1            2 SEGID         UBIN(12) UNAL;
      103     9023           %VLP_ERRCODE (FPTN = TOO_ERROR_CODE,
      104     9024                         FCG  = 'TO',
      105     9025                         MID  = 'O',
      106     9026                         SEV  = 0) ;
      107     9071           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:75   
      108     9072        /* External Entries */
      109     9073
      110     9074    1      DCL TOD$DISPATCHER    ENTRY(3);
      111     9075    1      DCL TOL$GET_DECK      ENTRY (7) ALTRET ;
      112     9076    1      DCL TOQ$DEBUG         ENTRY ;
      113     9077    1      DCL TOT$ASCII_BCD     ENTRY(3);
      114     9078    1      DCL TOT$BCD_ASCII     ENTRY(3);
      115     9079    1      DCL TOT$CONSOLE_OUT   ENTRY;
      116     9080    1      DCL TOT$PROMPT_OUT    ENTRY;
      117     9081    1      DCL TOT$RESTART       ENTRY;
      118     9082    1      DCL TOX$ERROR         ENTRY (1) ;
      119     9083    1      DCL TOT$WRITE_READ_IO ENTRY;
      120     9084           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:76   
      121     9085        /* Main Code */
      122     9086
      123     9087    1      IF MME.INST.NO > 0

   9087  3 000002   200003 470500                    LDP0    @MME,,AUTO
         3 000003   000000 220100                    LDX0    0,,PR0
         3 000004   000172 604400 3                  TMOZ    s:9107

      124     9088    2      THEN DO CASE (MME.INST.NO);

   9088  3 000005   000035 100003                    CMPX0   29,DU
         3 000006   000010 602010 3                  TNC     s:9088+3,X0
         3 000007   000465 710000 3                  TRA     s:9142
         3 000010   000171 710000 3                  TRA     s:9106
         3 000011   000171 710000 3                  TRA     s:9106
         3 000012   000132 710000 3                  TRA     s:9099
         3 000013   000171 710000 3                  TRA     s:9106
         3 000014   000171 710000 3                  TRA     s:9106
         3 000015   000137 710000 3                  TRA     s:9101
         3 000016   000171 710000 3                  TRA     s:9106
         3 000017   000171 710000 3                  TRA     s:9106
         3 000020   000171 710000 3                  TRA     s:9106
         3 000021   000100 710000 3                  TRA     s:9093
         3 000022   000171 710000 3                  TRA     s:9106
         3 000023   000171 710000 3                  TRA     s:9106
         3 000024   000171 710000 3                  TRA     s:9106
         3 000025   000171 710000 3                  TRA     s:9106
         3 000026   000171 710000 3                  TRA     s:9106
         3 000027   000125 710000 3                  TRA     s:9097
         3 000030   000171 710000 3                  TRA     s:9106
         3 000031   000147 710000 3                  TRA     s:9103
         3 000032   000045 710000 3                  TRA     s:9090
         3 000033   000171 710000 3                  TRA     s:9106
         3 000034   000171 710000 3                  TRA     s:9106
         3 000035   000110 710000 3                  TRA     s:9095
         3 000036   000171 710000 3                  TRA     s:9106
         3 000037   000171 710000 3                  TRA     s:9106
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:77   
         3 000040   000171 710000 3                  TRA     s:9106
         3 000041   000171 710000 3                  TRA     s:9106
         3 000042   000171 710000 3                  TRA     s:9106
         3 000043   000171 710000 3                  TRA     s:9106
         3 000044   000162 710000 3                  TRA     s:9105

      125     9089    2              CASE (%GECALL);

      126     9090    2                 CALL TOO$MME_GECALL (MME.WD_1, MME.WD_2, MME.WD_3, MREG.A, MREG.Q,

   9090  3 000045   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000046   200027 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000047   200004 236100                    LDQ     @MREG,,AUTO
         3 000050   000000 036000 4                  ADLQ    0
         3 000051   200026 756100                    STQ     @PARAM_4+1,,AUTO
         3 000052   200004 236100                    LDQ     @MREG,,AUTO
         3 000053   000001 036003                    ADLQ    1,DU
         3 000054   200005 235100                    LDA     @MME_INSTR$,,AUTO
         3 000055   200024 757100                    STAQ    @PARAM_2+1,,AUTO
         3 000056   200004 236100                    LDQ     @MREG,,AUTO
         3 000057   000005 036003                    ADLQ    5,DU
         3 000060   200023 756100                    STQ     @PARAM_1+1,,AUTO
         3 000061   200004 236100                    LDQ     @MREG,,AUTO
         3 000062   000004 036003                    ADLQ    4,DU
         3 000063   200022 756100                    STQ     @PARAM_0+1,,AUTO
         3 000064   200003 236100                    LDQ     @MME,,AUTO
         3 000065   000003 036003                    ADLQ    3,DU
         3 000066   200021 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000067   200003 236100                    LDQ     @MME,,AUTO
         3 000070   000002 036003                    ADLQ    2,DU
         3 000071   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000072   200003 236100                    LDQ     @MME,,AUTO
         3 000073   000001 036003                    ADLQ    1,DU
         3 000074   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000075   000617 701000 3                  TSX1    TOO$MME_GECALL
         3 000076   000000 011000                    NOP     0
         3 000077   000465 710000 3                  TRA     s:9142
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:78   

      127     9091    2                         MME_INSTR$, MREG.X2, MREG.X3, RETURN_DELTA);
      128     9092    2              CASE (%GEMORE);

      129     9093    2                 CALL TOO$MME_GEMORE (MME.WD_1, RETURN_DELTA);

   9093  3 000100   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000101   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000102   200003 236100                    LDQ     @MME,,AUTO
         3 000103   000001 036003                    ADLQ    1,DU
         3 000104   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000105   001335 701000 3                  TSX1    TOO$MME_GEMORE
         3 000106   000000 011000                    NOP     0
         3 000107   000465 710000 3                  TRA     s:9142

      130     9094    2              CASE (%GEMREL);

      131     9095    2                 CALL TOO$MME_GEMREL (MREG.A, MREG.Q, MME_INSTR$, RETURN_DELTA);

   9095  3 000110   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000111   200022 756100                    STQ     @PARAM_0+1,,AUTO
         3 000112   200005 236100                    LDQ     @MME_INSTR$,,AUTO
         3 000113   200021 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000114   200004 236100                    LDQ     @MREG,,AUTO
         3 000115   000005 036003                    ADLQ    5,DU
         3 000116   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000117   200004 236100                    LDQ     @MREG,,AUTO
         3 000120   000004 036003                    ADLQ    4,DU
         3 000121   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000122   001430 701000 3                  TSX1    TOO$MME_GEMREL
         3 000123   000000 011000                    NOP     0
         3 000124   000465 710000 3                  TRA     s:9142

      132     9096    2              CASE (%GERELC);

      133     9097    2                 CALL TOO$MME_GERELC (RETURN_DELTA);

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:79   
   9097  3 000125   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000126   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000127   001517 701000 3                  TSX1    TOO$MME_GERELC
         3 000130   000000 011000                    NOP     0
         3 000131   000465 710000 3                  TRA     s:9142

      134     9098    2              CASE (%GEROAD);

      135     9099    2                 CALL TOO$MME_GEROAD (RETURN_DELTA);

   9099  3 000132   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000133   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000134   001544 701000 3                  TSX1    TOO$MME_GEROAD
         3 000135   000000 011000                    NOP     0
         3 000136   000465 710000 3                  TRA     s:9142

      136     9100    2              CASE (%GESNAP);

      137     9101    2                 CALL TOO$MME_GESNAP (MME.WD_1, RETURN_DELTA);

   9101  3 000137   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000140   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000141   200003 236100                    LDQ     @MME,,AUTO
         3 000142   000001 036003                    ADLQ    1,DU
         3 000143   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000144   001563 701000 3                  TSX1    TOO$MME_GESNAP
         3 000145   000000 011000                    NOP     0
         3 000146   000465 710000 3                  TRA     s:9142

      138     9102    2              CASE (%GETIME);

      139     9103    2                 CALL TOO$MME_GETIME (MREG.A, MREG.Q, RETURN_DELTA);

   9103  3 000147   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000150   200021 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000151   200004 236100                    LDQ     @MREG,,AUTO
         3 000152   000005 036003                    ADLQ    5,DU
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:80   
         3 000153   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000154   200004 236100                    LDQ     @MREG,,AUTO
         3 000155   000004 036003                    ADLQ    4,DU
         3 000156   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000157   001571 701000 3                  TSX1    TOO$MME_GETIME
         3 000160   000000 011000                    NOP     0
         3 000161   000465 710000 3                  TRA     s:9142

      140     9104    2              CASE (%GEWAKE);

      141     9105    2                 CALL TOO$MME_GEWAKE (MREG.Q, RETURN_DELTA);

   9105  3 000162   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000163   200024 756100                    STQ     @PARAM_2+1,,AUTO
         3 000164   200004 236100                    LDQ     @MREG,,AUTO
         3 000165   000005 036003                    ADLQ    5,DU
         3 000166   200023 756100                    STQ     @PARAM_1+1,,AUTO
         3 000167   001631 701000 3                  TSX1    TOO$MME_GEWAKE
         3 000170   000000 011000                    NOP     0

      142     9106    2           END /* DO CASE */ ;

   9106  3 000171   000465 710000 3                  TRA     s:9142

      143     9107    2      ELSE DO CASE (-MME.INST.NO);

   9107  3 000172   000000 236100                    LDQ     0,,PR0
         3 000173   000022 732000                    QRS     18
         3 000174   000027 676000 xsym               ERQ     B_VECTNIL+23
         3 000175   000001 036007                    ADLQ    1,DL
         3 000176   000051 116007                    CMPQ    41,DL
         3 000177   000201 602006 3                  TNC     s:9107+7,QL
         3 000200   000465 710000 3                  TRA     s:9142
         3 000201   000465 710000 3                  TRA     s:9142
         3 000202   000252 710000 3                  TRA     s:9109
         3 000203   000262 710000 3                  TRA     s:9111
         3 000204   000465 710000 3                  TRA     s:9142
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:81   
         3 000205   000465 710000 3                  TRA     s:9142
         3 000206   000465 710000 3                  TRA     s:9142
         3 000207   000465 710000 3                  TRA     s:9142
         3 000210   000465 710000 3                  TRA     s:9142
         3 000211   000272 710000 3                  TRA     s:9113
         3 000212   000465 710000 3                  TRA     s:9142
         3 000213   000465 710000 3                  TRA     s:9142
         3 000214   000302 710000 3                  TRA     s:9115
         3 000215   000465 710000 3                  TRA     s:9142
         3 000216   000307 710000 3                  TRA     s:9117
         3 000217   000465 710000 3                  TRA     s:9142
         3 000220   000465 710000 3                  TRA     s:9142
         3 000221   000465 710000 3                  TRA     s:9142
         3 000222   000465 710000 3                  TRA     s:9142
         3 000223   000465 710000 3                  TRA     s:9142
         3 000224   000465 710000 3                  TRA     s:9142
         3 000225   000465 710000 3                  TRA     s:9142
         3 000226   000322 710000 3                  TRA     s:9119
         3 000227   000465 710000 3                  TRA     s:9142
         3 000230   000465 710000 3                  TRA     s:9142
         3 000231   000332 710000 3                  TRA     s:9121
         3 000232   000465 710000 3                  TRA     s:9142
         3 000233   000465 710000 3                  TRA     s:9142
         3 000234   000465 710000 3                  TRA     s:9142
         3 000235   000465 710000 3                  TRA     s:9142
         3 000236   000465 710000 3                  TRA     s:9142
         3 000237   000345 710000 3                  TRA     s:9123
         3 000240   000352 710000 3                  TRA     s:9125
         3 000241   000465 710000 3                  TRA     s:9142
         3 000242   000357 710000 3                  TRA     s:9127
         3 000243   000367 710000 3                  TRA     s:9129
         3 000244   000421 710000 3                  TRA     s:9132
         3 000245   000465 710000 3                  TRA     s:9142
         3 000246   000431 710000 3                  TRA     s:9134
         3 000247   000441 710000 3                  TRA     s:9136
         3 000250   000451 710000 3                  TRA     s:9138
         3 000251   000461 710000 3                  TRA     s:9140
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:82   

      144     9108    2              CASE (%ABSTIM);

      145     9109    2                 CALL TOO$MME_ABSTIM (MREG.A, RETURN_DELTA);

   9109  3 000252   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000253   200024 756100                    STQ     @PARAM_2+1,,AUTO
         3 000254   200004 236100                    LDQ     @MREG,,AUTO
         3 000255   000004 036003                    ADLQ    4,DU
         3 000256   200023 756100                    STQ     @PARAM_1+1,,AUTO
         3 000257   000466 701000 3                  TSX1    TOO$MME_ABSTIM
         3 000260   000000 011000                    NOP     0
         3 000261   000465 710000 3                  TRA     s:9142

      146     9110    2              CASE (%ACCWRT);

      147     9111    2                 CALL TOO$MME_ACCWRT (MREG.X1, RETURN_DELTA);

   9111  3 000262   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000263   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000264   200004 236100                    LDQ     @MREG,,AUTO
         3 000265   400000 036007                    ADLQ    -131072,DL
         3 000266   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000267   000505 701000 3                  TSX1    TOO$MME_ACCWRT
         3 000270   000000 011000                    NOP     0
         3 000271   000465 710000 3                  TRA     s:9142

      148     9112    2              CASE (%CONTML);

      149     9113    2                 CALL TOO$MME_CONTML (MREG.X1, RETURN_DELTA);

   9113  3 000272   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000273   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000274   200004 236100                    LDQ     @MREG,,AUTO
         3 000275   400000 036007                    ADLQ    -131072,DL
         3 000276   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000277   000513 701000 3                  TSX1    TOO$MME_CONTML
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:83   
         3 000300   000000 011000                    NOP     0
         3 000301   000465 710000 3                  TRA     s:9142

      150     9114    2              CASE (%DISPRT);

      151     9115    2                 CALL TOO$MME_DISPRT (RETURN_DELTA);

   9115  3 000302   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000303   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000304   000611 701000 3                  TSX1    TOO$MME_DISPRT
         3 000305   000000 011000                    NOP     0
         3 000306   000465 710000 3                  TRA     s:9142

      152     9116    2              CASE (%GEPROC);

      153     9117    2                 CALL TOO$MME_GEPROC (MME.WD_1, MME.WD_2, RETURN_DELTA);

   9117  3 000307   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000310   200021 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000311   200003 236100                    LDQ     @MME,,AUTO
         3 000312   000002 036003                    ADLQ    2,DU
         3 000313   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000314   200003 236100                    LDQ     @MME,,AUTO
         3 000315   000001 036003                    ADLQ    1,DU
         3 000316   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000317   001511 701000 3                  TSX1    TOO$MME_GEPROC
         3 000320   000000 011000                    NOP     0
         3 000321   000465 710000 3                  TRA     s:9142

      154     9118    2              CASE (%PROCTM);

      155     9119    2                 CALL TOO$MME_PROCTM (MREG.A, RETURN_DELTA);

   9119  3 000322   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000323   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000324   200004 236100                    LDQ     @MREG,,AUTO
         3 000325   000004 036003                    ADLQ    4,DU
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:84   
         3 000326   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000327   001674 701000 3                  TSX1    TOO$MME_PROCTM
         3 000330   000000 011000                    NOP     0
         3 000331   000465 710000 3                  TRA     s:9142

      156     9120    2              CASE (%READIO);

      157     9121    2                 CALL TOO$MME_READIO (MREG.X1, MREG.X4, RETURN_DELTA);

   9121  3 000332   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000333   200021 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000334   200004 236100                    LDQ     @MREG,,AUTO
         3 000335   000002 036003                    ADLQ    2,DU
         3 000336   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000337   200004 236100                    LDQ     @MREG,,AUTO
         3 000340   400000 036007                    ADLQ    -131072,DL
         3 000341   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000342   001712 701000 3                  TSX1    TOO$MME_READIO
         3 000343   000000 011000                    NOP     0
         3 000344   000465 710000 3                  TRA     s:9142

      158     9122    2              CASE (%SETPR2);

      159     9123    2                 CALL TOO$MME_SETPR2 (RETURN_DELTA);

   9123  3 000345   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000346   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000347   002041 701000 3                  TSX1    TOO$MME_SETPR2
         3 000350   000000 011000                    NOP     0
         3 000351   000465 710000 3                  TRA     s:9142

      160     9124    2              CASE (%SETPRT);

      161     9125    2                 CALL TOO$MME_SETPRT (RETURN_DELTA);

   9125  3 000352   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000353   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:85   
         3 000354   002047 701000 3                  TSX1    TOO$MME_SETPRT
         3 000355   000000 011000                    NOP     0
         3 000356   000465 710000 3                  TRA     s:9142

      162     9126    2              CASE (%SETTYP);

      163     9127    2                 CALL TOO$MME_GESNAP (MME.WD_1, RETURN_DELTA);

   9127  3 000357   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000360   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000361   200003 236100                    LDQ     @MME,,AUTO
         3 000362   000001 036003                    ADLQ    1,DU
         3 000363   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000364   001563 701000 3                  TSX1    TOO$MME_GESNAP
         3 000365   000000 011000                    NOP     0
         3 000366   000465 710000 3                  TRA     s:9142

      164     9128    2              CASE (%TADIOD);

      165     9129    2                 CALL TOO$MME_TADIOD (MREG.A,MME.WD_1,MME.WD_2,MME.WD_3,MME.WD_4,

   9129  3 000367   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000370   200026 756100                    STQ     @PARAM_4+1,,AUTO
         3 000371   200003 236100                    LDQ     @MME,,AUTO
         3 000372   000006 036003                    ADLQ    6,DU
         3 000373   200025 756100                    STQ     @PARAM_3+1,,AUTO
         3 000374   200003 236100                    LDQ     @MME,,AUTO
         3 000375   000005 036003                    ADLQ    5,DU
         3 000376   200024 756100                    STQ     @PARAM_2+1,,AUTO
         3 000377   200003 236100                    LDQ     @MME,,AUTO
         3 000400   000004 036003                    ADLQ    4,DU
         3 000401   200023 756100                    STQ     @PARAM_1+1,,AUTO
         3 000402   200003 236100                    LDQ     @MME,,AUTO
         3 000403   000003 036003                    ADLQ    3,DU
         3 000404   200022 756100                    STQ     @PARAM_0+1,,AUTO
         3 000405   200003 236100                    LDQ     @MME,,AUTO
         3 000406   000002 036003                    ADLQ    2,DU
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:86   
         3 000407   200021 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000410   200003 236100                    LDQ     @MME,,AUTO
         3 000411   000001 036003                    ADLQ    1,DU
         3 000412   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000413   200004 236100                    LDQ     @MREG,,AUTO
         3 000414   000004 036003                    ADLQ    4,DU
         3 000415   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000416   002055 701000 3                  TSX1    TOO$MME_TADIOD
         3 000417   000000 011000                    NOP     0
         3 000420   000465 710000 3                  TRA     s:9142

      166     9130    2                         MME.WD_5, MME.WD_6, RETURN_DELTA);
      167     9131    2              CASE (%TERMIN);

      168     9132    2                 CALL TOO$MME_TERMIN (MME.WD_1, RETURN_DELTA);

   9132  3 000421   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000422   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000423   200003 236100                    LDQ     @MME,,AUTO
         3 000424   000001 036003                    ADLQ    1,DU
         3 000425   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000426   003355 701000 3                  TSX1    TOO$MME_TERMIN
         3 000427   000000 011000                    NOP     0
         3 000430   000465 710000 3                  TRA     s:9142

      169     9133    2              CASE (%TOLDIS);

      170     9134    2                 CALL TOO$MME_TOLDIS (MREG.X1, RETURN_DELTA);

   9134  3 000431   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000432   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000433   200004 236100                    LDQ     @MREG,,AUTO
         3 000434   400000 036007                    ADLQ    -131072,DL
         3 000435   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000436   003372 701000 3                  TSX1    TOO$MME_TOLDIS
         3 000437   000000 011000                    NOP     0
         3 000440   000465 710000 3                  TRA     s:9142
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:87   

      171     9135    2              CASE (%TOLGON);

      172     9136    2                 CALL TOO$MME_TOLGON (MREG.X1, RETURN_DELTA);

   9136  3 000441   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000442   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000443   200004 236100                    LDQ     @MREG,,AUTO
         3 000444   400000 036007                    ADLQ    -131072,DL
         3 000445   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000446   003440 701000 3                  TSX1    TOO$MME_TOLGON
         3 000447   000000 011000                    NOP     0
         3 000450   000465 710000 3                  TRA     s:9142

      173     9137    2              CASE (%TOLTIN);

      174     9138    2                 CALL TOO$MME_TOLTIN (MREG.Q, RETURN_DELTA);

   9138  3 000451   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000452   200020 756100                    STQ     @RETURN_DELTA+1,,AUTO
         3 000453   200004 236100                    LDQ     @MREG,,AUTO
         3 000454   000005 036003                    ADLQ    5,DU
         3 000455   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000456   003446 701000 3                  TSX1    TOO$MME_TOLTIN
         3 000457   000000 011000                    NOP     0
         3 000460   000465 710000 3                  TRA     s:9142

      175     9139    2              CASE (%TRACIO) ;

      176     9140    2                 CALL TOO$MME_TRACIO (RETURN_DELTA) ;

   9140  3 000461   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000462   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000463   003462 701000 3                  TSX1    TOO$MME_TRACIO
         3 000464   000000 011000                    NOP     0

      177     9141    2           END /* DO CASE */ ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:88   

      178     9142    1      RETURN /* to TOF$FAULTS */ ;

   9142  3 000465   000000 702200 xent               TSX2  ! X66_ARET

      179     9143
      180     9144        /* End of Main */
      181     9145        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:89   
      182     9146        /*I*      NAME:    TOO$MME_ABSTIM
      183     9147                  PURPOSE: SETS SOURCE AND DEST OPTIONS IN TIME_FPTS INDICATING
      184     9148                           THE SOURCE AND FORMAT OF THE TIME TO BE RETURNED.
      185     9149                           CALLS MONITOR SERVICE ROUTINE M$TIME
      186     9150                           CONVERTS TIME RETURNED IN TIME_BUFFER FROM MILLISECONDS TO
      187     9151                           1/64th MILLISECONDS BY MULTIPLYING TIME BY 64 AND
      188     9152                           ASSIGNING PRODUCT TO ABSTIM_BUF.
      189     9153                           RETURNS TIME OF DAY IN 1/64th MILLISECOND INCREMENTS SINCE
      190     9154                           MIDNIGHT IN ABSTIM_BUF.
      191     9155                           RETURNS TO MME HANDLER.
      192     9156        */
      193     9157
      194     9158    1   TOO$MME_ABSTIM: PROC (ABSTIM_BUF, RETURN_DELTA);

   9158  3 000466   200022 741300       TOO$MME_ABS* STX1  ! @PARAM_0+1,,AUTO

      195     9159
      196     9160    2      DCL ABSTIM_BUF  UBIN (36) ALIGNED ;
      197     9161    2      DCL RETURN_DELTA SBIN HALF;
      198     9162
      199     9163        /* Code */
      200     9164
      201     9165    2      TIME_FPT.V.DEST# = %TUN# ;

   9165  3 000467   000005 236003                    LDQ     5,DU
         3 000470   000026 552020 1                  STBQ    TIME_FPT+10,'20'O

      202     9166    2      CALL M$TIME (TIME_FPT) ;

   9166  3 000471   000014 630400 1                  EPPR0   TIME_FPT
         3 000472   020004 713400                    CLIMB   8196
         3 000473   402000 401760                    pmme    nvectors=5

      203     9167    2      ABSTIM_BUF = 64 * TIME_BUFFER ;

   9167  3 000474   200023 470500                    LDP0    @ABSTIM_BUF,,AUTO
         3 000475   000061 235000 1                  LDA     TIME_BUFFER
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:90   
         3 000476   000006 735000                    ALS     6
         3 000477   000000 755100                    STA     0,,PR0

      204     9168    2      RETURN_DELTA = 1 ;

   9168  3 000500   000001 220003                    LDX0    1,DU
         3 000501   200024 471500                    LDP1    @RETURN_DELTA,,AUTO
         3 000502   100000 740100                    STX0    0,,PR1

      205     9169    2      RETURN ;

   9169  3 000503   200022 221300                    LDX1  ! @PARAM_0+1,,AUTO
         3 000504   000001 702211                    TSX2  ! 1,X1

      206     9170
      207     9171    2   END TOO$MME_ABSTIM;
      208     9172        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:91   
      209     9173        /*I*      NAME:    TOO$MME_ACCWRT
      210     9174                  PURPOSE: USED IN GCOS TO WRITE A MESSAGE TO THE SYSTEM ACCOUNTING
      211     9175                           FILE.  PRESENTLY UNUSED IN CP6.
      212     9176        */
      213     9177
      214     9178    1   TOO$MME_ACCWRT: PROC (X1, RETURN_DELTA);

   9178  3 000505   200016 741300       TOO$MME_ACC* STX1  ! SERVICE_CODE+2,,AUTO

      215     9179
      216     9180    2      DCL X1 UBIN(18) HALIGNED ;
      217     9181    2      DCL RETURN_DELTA SBIN HALF;
      218     9182
      219     9183        /* Code */
      220     9184
      221     9185    2      RETURN_DELTA = 1 ;

   9185  3 000506   000001 220003                    LDX0    1,DU
         3 000507   200020 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 000510   000000 740100                    STX0    0,,PR0

      222     9186    2      RETURN ;

   9186  3 000511   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 000512   000001 702211                    TSX2  ! 1,X1

      223     9187
      224     9188    2   END TOO$MME_ACCWRT;
      225     9189        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:92   
      226     9190        /*I*      NAME:    TOO$MME_CONTML
      227     9191                  PURPOSE: CHECKS "ID", PASSED AS A PARAMETER, FOR VALIDITY.
      228     9192                           "ID" IS A REFERENCE LOGICAL ID AND SHOULD CORRESPOND TO
      229     9193                           USERS TERMINAL, I.E., = 0.  IF INVALID, I.E., ~=0 THEN
      230     9194                           ABORTS PROGRAM.
      231     9195                           IF VALID THEN FINDS FIRST ASSIGNABLE ENTRY FROM LAST 8
      232     9196                           ELEMENTS OF ID_CODE_TBL ARRAY.  AN ENTRY IS ASSIGNABLE
      233     9197                           IF ID_CODE_TBL.ASSGN_FLAG = O.
      234     9198                           IF ENTRY IS ASSIGNABLE SETS ID EQUAL TO ARRAY INDEX,
      235     9199                           SETS ASSGN_FLAG = 7777 OCTAL AND SETS RETURN_DELTA=5 FOR
      236     9200                           NORMAL RETURN.
      237     9201                           IF NO ASSIGNABLE ENTRIES EXIST SETS "ID" = 77 OCTAL, AND
      238     9202                           SETS RETURN_DELTA = 3 FOR REQUEST DENIAL.
      239     9203                           THE "ID" RETURNED AS A PARAMETER IS A LOGICAL ID AND
      240     9204                           IDENTIFIES A TEST READY FOR EXECUTION.
      241     9205                           RETURNS TO MME HANDLER.
      242     9206        */
      243     9207
      244     9208    1   TOO$MME_CONTML: PROC (ID, RETURN_DELTA);

   9208  3 000513   200016 741300       TOO$MME_CON* STX1  ! SERVICE_CODE+2,,AUTO

      245     9209
      246     9210    2      DCL I       SBIN HALF HALIGNED ;
      247     9211    2      DCL ID      UBIN (18) HALIGNED ;
      248     9212    2      DCL 1 ID_ REDEF ID HALIGNED,
      249     9213    2            2 EXEC#   UBIN (3) UNAL,
      250     9214    2            2 *       UBIN (9) UNAL,
      251     9215    2            2 RLID    UBIN (6) UNAL;
      252     9216    2      DCL RETURN_DELTA SBIN HALF ;
      253     9217           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:93   
      254     9218        /* Code */
      255     9219
      256     9220    2      IF ID_.RLID = 0

   9220  3 000514   200017 470500                    LDP0    @ID,,AUTO
         3 000515   003100 061500                    CSR     bolr='003'O
         3 000516   000000 230006                    BDSC    0,,PR0                   by=1,bit=3,n=6
         3 000517   200070 000044                    BDSC    @OUT_LGTH+2,,AUTO        by=0,bit=0,n=36
         3 000520   200070 236100                    LDQ     @OUT_LGTH+2,,AUTO
         3 000521   000000 116003                    CMPQ    0,DU
         3 000522   000577 601000 3                  TNZ     s:9239

      257     9221    3      THEN DO ;

      258     9222    3              I = 4 ;

   9222  3 000523   000004 220003                    LDX0    4,DU
         3 000524   200021 740100                    STX0    I,,AUTO

      259     9223    4              DO WHILE (I < 12 & ID_CODE_TBL.ASSGN_FLAG(I) ~= 0) ;

   9223  3 000525   000531 710000 3                  TRA     s:9225

      260     9224    4                 I = I + 1 ;

   9224  3 000526   200021 220100                    LDX0    I,,AUTO
         3 000527   000001 621010                    EAX1    1,X0
         3 000530   200021 741100                    STX1    I,,AUTO

      261     9225    4              END /* WHILE */ ;

   9225  3 000531   400000 220003                    LDX0    -131072,DU
         3 000532   200021 221100                    LDX1    I,,AUTO
         3 000533   000014 101003                    CMPX1   12,DU
         3 000534   000536 604000 3                  TMI     s:9225+5
         3 000535   000000 220003                    LDX0    0,DU
         3 000536   400000 222003                    LDX2    -131072,DU
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:94   
         3 000537   000040 236011 1                  LDQ     ID_CODE_TBL,X1
         3 000540   007777 316007                    CANQ    4095,DL
         3 000541   000543 601000 3                  TNZ     s:9225+10
         3 000542   000000 222003                    LDX2    0,DU
         3 000543   000000 636012                    EAQ     0,X2
         3 000544   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 000545   000000 636010                    EAQ     0,X0
         3 000546   200070 376100                    ANQ     @OUT_LGTH+2,,AUTO
         3 000547   000526 601000 3                  TNZ     s:9224

      262     9226    3              IF I = 12

   9226  3 000550   000014 101003                    CMPX1   12,DU
         3 000551   000562 601000 3                  TNZ     s:9232

      263     9227    4              THEN DO ;

      264     9228    4                      ID_.RLID = 63;

   9228  3 000552   200017 470500                    LDP0    @ID,,AUTO
         3 000553   003100 061400                    CSR     bolr='003'O
         3 000554   000001 000044 4                  BDSC    1                        by=0,bit=0,n=36
         3 000555   000000 230006                    BDSC    0,,PR0                   by=1,bit=3,n=6

      265     9229    4                      RETURN_DELTA = 3 ;

   9229  3 000556   000003 220003                    LDX0    3,DU
         3 000557   200020 471500                    LDP1    @RETURN_DELTA,,AUTO
         3 000560   100000 740100                    STX0    0,,PR1

      266     9230    4                   END /* THEN */ ;

   9230  3 000561   000607 710000 3                  TRA     s:9242

      267     9231    4              ELSE DO;

      268     9232    4                      ID_CODE_TBL.ASSGN_FLAG(I) = 4095;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:95   

   9232  3 000562   007777 236007                    LDQ     4095,DL
         3 000563   000040 256011 1                  ORSQ    ID_CODE_TBL,X1

      269     9233    4                      ID_.RLID = I ;

   9233  3 000564   200017 470500                    LDP0    @ID,,AUTO
         3 000565   003100 061500                    CSR     bolr='003'O
         3 000566   200021 000022                    BDSC    I,,AUTO                  by=0,bit=0,n=18
         3 000567   000000 230006                    BDSC    0,,PR0                   by=1,bit=3,n=6

      270     9234    4                      ID_.EXEC# = 0 ;

   9234  3 000570   003100 061400                    CSR     bolr='003'O
         3 000571   000002 000044 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=36
         3 000572   000000 000003                    BDSC    0,,PR0                   by=0,bit=0,n=3

      271     9235    4                      RETURN_DELTA = 5 ;

   9235  3 000573   000005 220003                    LDX0    5,DU
         3 000574   200020 471500                    LDP1    @RETURN_DELTA,,AUTO
         3 000575   100000 740100                    STX0    0,,PR1

      272     9236    4                   END /* ELSE */ ;

      273     9237    3           END /* THEN */ ;

   9237  3 000576   000607 710000 3                  TRA     s:9242

      274     9238    3      ELSE DO ;

      275     9239    3              TOO_ERROR_CODE.ERR# = %E$BADLOGID ;

   9239  3 000577   000064 236000 1                  LDQ     TOO_ERROR_CODE
         3 000600   000002 376000 4                  ANQ     2
         3 000601   000030 276007                    ORQ     24,DL
         3 000602   000064 756000 1                  STQ     TOO_ERROR_CODE
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:96   

      276     9240    3              CALL TOX$ERROR (TOO_ERROR_CODE) ;

   9240  3 000603   000003 630400 4                  EPPR0   3
         3 000604   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000605   000000 701000 xent               TSX1    TOX$ERROR
         3 000606   000000 011000                    NOP     0

      277     9241    3           END /* THEN */ ;

      278     9242    2      RETURN;

   9242  3 000607   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 000610   000001 702211                    TSX2  ! 1,X1

      279     9243
      280     9244    2   END TOO$MME_CONTML;
      281     9245        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:97   
      282     9246        /*I*      NAME:    TOO$MME_DISPRT
      283     9247                  PURPOSE: USED IN GCOS TO CALL THE APPROPRIATE TOLTS MODULE TO
      284     9248                           FLAG DROPPING THE PRINTER.  THIS ROUTINE PRESENTLY
      285     9249                           UNUSED IN CP6 TOLTS.
      286     9250        */
      287     9251
      288     9252    1   TOO$MME_DISPRT: PROC (RETURN_DELTA);

   9252  3 000611   200016 741300       TOO$MME_DIS* STX1  ! SERVICE_CODE+2,,AUTO

      289     9253
      290     9254    2      DCL RETURN_DELTA SBIN HALF;
      291     9255
      292     9256        /* Code */
      293     9257
      294     9258    2      RETURN_DELTA = 3 ;

   9258  3 000612   000003 220003                    LDX0    3,DU
         3 000613   200017 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 000614   000000 740100                    STX0    0,,PR0

      295     9259    2      RETURN;

   9259  3 000615   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 000616   000001 702211                    TSX2  ! 1,X1

      296     9260
      297     9261    2   END TOO$MME_DISPRT;
      298     9262        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:98   
      299     9263        /*I*      NAME:    TOO$MME_GECALL
      300     9264                  PURPOSE: SETS BASE ADDRESS IN GECALL_VECTOR EQUAL TO THE BASE OF
      301     9265                           WHERE THE TEST PAGE IS TO BE LOADED (CONTAINED IN BITS
      302     9266                            0-17 OF THE PARAMETER "ADDRESS_A").
      303     9267                           SETS NAME OF TEST PAGE TO BE READ, IN THE STRUCTURE "TEST_
      304     9268                           PG_ID" EQUAL TO THE PARAMETER "TEST_PG_NAME".
      305     9269                           "TEST_PG_ID" IS USED AS THE KEY FOR "TEST_PG_FPT" AND
      306     9270                           "BOUNDS_FPT".
      307     9271                           CALLS M$OPEN(TABLE_FPT) WHICH INITIALIZES DCB CONTAINING
      308     9272                           TABLE SIZES.
      309     9273                           CALLS M$READ(BOUNDS_FPT) WHICH READS THE TEST PAGE BOUNDS
      310     9274                           (IN BYTES) INTO THE STRUCTURE "TEST_PG_CODES".
      311     9275                           SETS BOUNDS IN GECALL_VECTOR.  GECALL_VECTOR FRAMES THE
      312     9276                           MEMORY AREA INTO WHICH THE TEST PAGE WILL BE READ INTO.
      313     9277                           CALLS M$READ(TEST_PG_FPT) WHICH READS IN TEST PAGE.
      314     9278                           SETS RETURN_DELTA AND RETURN PARAMETERS "A_REG", AND "Q_REG".
      315     9279                           CONTROL RETURNS TO MME HANDLER.
      316     9280
      317     9281
      318     9282             ADDENDUM:     by GC.
      319     9283                           The format of GECALL for slave mode subexecs now
      320     9284                           includes passing X3 containing the test page base
      321     9285                           (i.e., where to start loading the GECALLed module),
      322     9286                           and X2 containing the maximum load address beyond
      323     9287                           which loading should not continue.
      324     9288
      325     9289                           Currently the remainants of the old GECALL scheme
      326     9290                           are left in place for some last minute debug before
      327     9291                           the A00 release.  One day this needs to be cleaned
      328     9292                           up.
      329     9293
      330     9294                           The subroutine TOO$READ_TEST_PAGE reads all the test pages
      331     9295                           off the T&D Deckfile.
      332     9296        */
      333     9297        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:99   
      334     9298    1   TOO$MME_GECALL: PROC (TEST_PG_NAME, ADDRESS_A, ADDRESS_B, A_REG, Q_REG, MME_IC,

   9298  3 000617   200016 741300       TOO$MME_GEC* STX1  ! SERVICE_CODE+2,,AUTO

      335     9299    1              P_X2REG, P_X3REG, RETURN_DELTA);
      336     9300
      337     9301    2      DCL A_REG UBIN(36);
      338     9302    2      DCL 1 A_REG_FORMAT REDEF A_REG,
      339     9303    2            2 ORIGIN UBIN(18) UNAL,
      340     9304    2            2 NUM_WDS UBIN(18) UNAL;
      341     9305    2      DCL ADDRESS_A UBIN(36);
      342     9306    2      DCL 1 ADDRESS_A_FORMAT REDEF ADDRESS_A,
      343     9307    2            2 LOCATION_WD_1 UBIN(18) UNAL,
      344     9308    2            2 ERROR_ADDR UBIN(18) UNAL;
      345     9309    2      DCL ADDRESS_B UBIN(36);
      346     9310    2      DCL 1 ADDRESS_B_FORMAT REDEF ADDRESS_B,
      347     9311    2            2 TRANSFER_ADDR UBIN(18) UNAL,
      348     9312    2            2 SEGID UBIN(18) UNAL;
      349     9313    2      DCL MME_IC PTR;
      350     9314    2      DCL 1 MME_IC_FORMAT REDEF MME_IC,
      351     9315    2            2 IC_ADDR UBIN(18) UNAL,
      352     9316    2            2 SEGID UBIN(18) UNAL;
      353     9317    2      DCL TEST_PG_NAME UBIN(36);
      354     9318    2      DCL P_X2REG UBIN(18) HALIGNED ;
      355     9319    2      DCL P_X3REG UBIN(18) HALIGNED ;
      356     9320    2      DCL Q_REG UBIN(36);
      357     9321    2      DCL 1 Q_REG_FORMAT REDEF Q_REG,
      358     9322    2            2 TRANSFER_ADDR UBIN(18) UNAL,
      359     9323    2            2 ERROR_CODE BIT (18) UNAL;
      360     9324    2      DCL RETURN_DELTA SBIN HALF;
      361     9325    2      DCL J UBIN (36);
      362     9326    2      DCL DUMMY_WORD UBIN (36) BASED;
      363     9327    2      DCL DUMMY$ PTR;
      364     9328    2      DCL LOAD_SIZE UBIN WORD ALIGNED ;
      365     9329           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:100  
      366     9330        /* Code */
      367     9331
      368     9332    2      IF ADDRESS_A_FORMAT.LOCATION_WD_1 = 0

   9332  3 000620   200020 470500                    LDP0    @ADDRESS_A,,AUTO
         3 000621   000000 220100                    LDX0    0,,PR0
         3 000622   000633 601000 3                  TNZ     s:9337

      369     9333    3      THEN DO ;

      370     9334    3              TOO_ERROR_CODE.ERR# = %E$BADGECALL ;

   9334  3 000623   000064 236000 1                  LDQ     TOO_ERROR_CODE
         3 000624   000002 376000 4                  ANQ     2
         3 000625   002640 276007                    ORQ     1440,DL
         3 000626   000064 756000 1                  STQ     TOO_ERROR_CODE

      371     9335    3              CALL TOX$ERROR (TOO_ERROR_CODE) ;

   9335  3 000627   000003 630400 4                  EPPR0   3
         3 000630   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000631   000000 701000 xent               TSX1    TOX$ERROR
         3 000632   000000 011000                    NOP     0

      372     9336    3           END /* THEN */ ;

      373     9337    2      CALL TOO$READ_TEST_PAGE;

   9337  3 000633   000732 701000 3                  TSX1    TOO$READ_TEST_PAGE
         3 000634   000000 011000                    NOP     0

      374     9338    2      DUMMY$ = PINCRW (IS$, ADDRESS_A_FORMAT.LOCATION_WD_1) ;

   9338  3 000635   200020 470500                    LDP0    @ADDRESS_A,,AUTO
         3 000636   000000 220100                    LDX0    0,,PR0
         3 000637   000000 636010                    EAQ     0,X0
         3 000640   000000 036000 2                  ADLQ    FPTN_
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:101  
         3 000641   200031 756100                    STQ     DUMMY$,,AUTO

      375     9339    3      DO J = 0 TO 71;

   9339  3 000642   200030 450100                    STZ     J,,AUTO

      376     9340    3         DUMMY$ -> DUMMY_WORD = 0;

   9340  3 000643   200031 470500                    LDP0    DUMMY$,,AUTO
         3 000644   000000 450100                    STZ     0,,PR0

      377     9341    3         DUMMY$ = PINCRW(DUMMY$, 1);

   9341  3 000645   200031 236100                    LDQ     DUMMY$,,AUTO
         3 000646   000001 036003                    ADLQ    1,DU
         3 000647   200031 756100                    STQ     DUMMY$,,AUTO

      378     9342    3      END /* DO */ ;

   9342  3 000650   200030 235100                    LDA     J,,AUTO
         3 000651   000001 035007                    ADLA    1,DL
         3 000652   200030 755100                    STA     J,,AUTO
         3 000653   000110 115007                    CMPA    72,DL
         3 000654   000643 602000 3                  TNC     s:9340

      379     9343    2      A_REG_FORMAT.ORIGIN = ADDRESS_A_FORMAT.LOCATION_WD_1;

   9343  3 000655   200020 470500                    LDP0    @ADDRESS_A,,AUTO
         3 000656   000000 220100                    LDX0    0,,PR0
         3 000657   200022 471500                    LDP1    @A_REG,,AUTO
         3 000660   100000 740100                    STX0    0,,PR1

      380     9344    2      A_REG_FORMAT.NUM_WDS = LOAD_SIZE ;

   9344  3 000661   200032 721100                    LXL1    LOAD_SIZE,,AUTO
         3 000662   100000 441100                    SXL1    0,,PR1

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:102  
      381     9345    2      Q_REG_FORMAT.TRANSFER_ADDR = 0;

   9345  3 000663   000000 222003                    LDX2    0,DU
         3 000664   200023 473500                    LDP3    @Q_REG,,AUTO
         3 000665   300000 742100                    STX2    0,,PR3

      382     9346    2      IF ADDRESS_B = 0

   9346  3 000666   200021 474500                    LDP4    @ADDRESS_B,,AUTO
         3 000667   400000 235100                    LDA     0,,PR4
         3 000670   000707 601000 3                  TNZ     s:9348

      383     9347    2      THEN RETURN_DELTA = (P_X3REG + 72) - MME_IC_FORMAT.IC_ADDR;

   9347  3 000671   200024 475500                    LDP5    @MME_IC,,AUTO
         3 000672   500000 236100                    LDQ     0,,PR5
         3 000673   000022 772000                    QRL     18
         3 000674   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 000675   200026 476500                    LDP6    @P_X3REG,,AUTO
         3 000676   000100 101500                    MRL     fill='000'O
         3 000677   600000 000002                    ADSC9   0,,PR6                   cn=0,n=2
         3 000700   200071 000004                    ADSC9   @OUT_LGTH+3,,AUTO        cn=0,n=4
         3 000701   200071 236100                    LDQ     @OUT_LGTH+3,,AUTO
         3 000702   200070 136100                    SBLQ    @OUT_LGTH+2,,AUTO
         3 000703   000110 620006                    EAX0    72,QL
         3 000704   200027 477500                    LDP7    @RETURN_DELTA,,AUTO
         3 000705   700000 740100                    STX0    0,,PR7
         3 000706   000721 710000 3                  TRA     s:9349

      384     9348    2      ELSE RETURN_DELTA = ADDRESS_B_FORMAT.TRANSFER_ADDR - MME_IC_FORMAT.IC_ADDR;

   9348  3 000707   200024 475500                    LDP5    @MME_IC,,AUTO
         3 000710   500000 236100                    LDQ     0,,PR5
         3 000711   000022 772000                    QRL     18
         3 000712   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 000713   400000 236100                    LDQ     0,,PR4
         3 000714   000022 772000                    QRL     18
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:103  
         3 000715   200070 136100                    SBLQ    @OUT_LGTH+2,,AUTO
         3 000716   000000 620006                    EAX0    0,QL
         3 000717   200027 476500                    LDP6    @RETURN_DELTA,,AUTO
         3 000720   600000 740100                    STX0    0,,PR6

      385     9349    2      IF TOQ$DCP.PF.ENABLED

   9349  3 000721   000000 234000 xsym               SZN     TOQ$DCP
         3 000722   000730 605000 3                  TPL     s:9355

      386     9350    3      THEN DO ;

      387     9351    3              TOQ$DCP.PF.REASON = %GECALL ;

   9351  3 000723   000022 236003                    LDQ     18,DU
         3 000724   000000 552020 xsym               STBQ    TOQ$DCP,'20'O

      388     9352    3              CALL TOQ$DEBUG ;

   9352  3 000725   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000726   000000 701000 xent               TSX1    TOQ$DEBUG
         3 000727   000000 011000                    NOP     0

      389     9353    3           END /* THEN */ ;

      390     9354    2      ELSE /* Do nothing */ ;
      391     9355    2      RETURN ;

   9355  3 000730   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 000731   000001 702211                    TSX2  ! 1,X1

      392     9356
      393     9357        /* END TOO$MME_GECALL */
      394     9358        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:104  
      395     9359        /*I* NAME:         TOO$READ_TEST_PAGE
      396     9360             CALL:         CALL TOO$READ_TEST_PAGE;
      397     9361             INTERFACE:    TOT$BCD_ASCII
      398     9362                           TOL$GET_DECK
      399     9363             INPUT:        None explicitly
      400     9364             OUTPUT:       A test page is loaded.
      401     9365             DESCRIPTION:  Basically, P-X3REG specifies where to load the
      402     9366                           test page, and P_X2REG specifies the load limit
      403     9367                           for that test page, and TEST_PG_NAME specifies
      404     9368                           the 6 character BCD test page name.  All this
      405     9369                           information has to be fitted into the specific
      406     9370                           calling sequence required by the routine
      407     9371                           TOG$GET_DECK to load the test page from the Deckfile.
      408     9372                           If to the casual observer, this is a cumbersome
      409     9373                           interface, don't worry, it is.  However, that is
      410     9374                           the way the crazy thing was implemented, and
      411     9375                           it must be accomodated here.
      412     9376
      413     9377                           First the BCD test page name must be converted to
      414     9378                           ASCII and a "key" built for the test page.  This
      415     9379                           key is defined in KEY_VALUE.  Next a DCW list must
      416     9380                           be built which exactly reflects the number of
      417     9381                           words to load.  The number of DCWs (a maximum of
      418     9382                           7 at the current time, set by a %SUB at the
      419     9383                           start of this subroutine) is calculated using
      420     9384                           the load address in X3 and the maximum load
      421     9385                           address in X2, as well as the word residue for the
      422     9386                           last DCW word count.  Thus the DCW list is built
      423     9387                           in DCWLIST.  The proper number of IOTPs are inserted,
      424     9388                           and the list is terminated with an IOTD.  The
      425     9389                           proper word count is inserted into the last DCW,
      426     9390                           less 72 to account for a Slave Prefix Area for
      427     9391                           the test page.
      428     9392
      429     9393                           Next, the address of this DCW list has to be put
      430     9394                           into the calling sequence, as well as an address
      431     9395                           of a status buffer.  Finally, with CALL_SEQUENCE
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:105  
      432     9396                           built, the other arguments for TOL$GET_DECK
      433     9397                           are set, and the call is made to load the test
      434     9398                           page.  Any errors in the loading process will
      435     9399                           result in an ALTRET with an error code in ERROR_CODE.
      436     9400
      437     9401        II                 Should problems arise at some future time, have fun.
      438     9402                           The error codes returned are not very well documented,
      439     9403                           or available, and TOL$GET_DECK's operation is a
      440     9404                           big mystery to everyone except one person.
      441     9405                           big mystery.  No more troubleshooting info
      442     9406                           can be given at this time.
      443     9407        */
      444     9408
      445     9409    2   TOO$READ_TEST_PAGE: PROC;

   9409  3 000732   200034 741300       TOO$READ_TE* STX1  ! J+1,,AUTO

      446     9410
      447     9411           %EQU LISTSIZE = 20;
      448     9412    3      DCL 1 CALL_SEQUENCE STATIC,
      449     9413    3            2 DCWLIST_ADR UBIN(18) UNAL,
      450     9414    3            2 STATUS_ADR UBIN(18) UNAL,
      451     9415    3            2 * UBIN(18) UNAL,
      452     9416    3            2 * UBIN(18) UNAL,
      453     9417    3            2 * UBIN(36) UNAL,
      454     9418    3            2 * UBIN(36) UNAL,
      455     9419    3            2 * UBIN(36) UNAL,
      456     9420    3            2 * UBIN(36) UNAL,
      457     9421    3            2 * UBIN(36) UNAL,
      458     9422    3            2 * UBIN(36) UNAL,
      459     9423    3            2 * UBIN(36) UNAL,
      460     9424    3            2 * UBIN(36) UNAL;
      461     9425    3      DCL EDIT_NAME   CHAR (4) ALIGNED ;
      462     9426    3      DCL ERROR_CODE UBIN(36);
      463     9427    3      DCL 1 DCWLIST(0:%LISTSIZE) STATIC,
      464     9428    3            2 ADR UBIN(18) UNAL,
      465     9429    3            2 CHAR_ADR UBIN(3) UNAL INIT (0*0),
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:106  
      466     9430    3            2 * UBIN(1) UNAL INIT (0*0),
      467     9431    3            2 TYPE UBIN(2) UNAL INIT (1*0),
      468     9432    3            2 WORD_COUNT UBIN(12) UNAL INIT (0*0);
      469     9433    3      DCL DCWLIST$ PTR;
      470     9434    3      DCL 1 DCWLIST_PTR REDEF DCWLIST$,
      471     9435    3            2 ADR UBIN(18) UNAL,
      472     9436    3            2 * UBIN(18) UNAL;
      473     9437    3      DCL 1 KEY_VALUE STATIC,
      474     9438    3            2 SIZE         UBIN BYTE UNAL INIT (23),
      475     9439    3            2 CATA         CHAR (3) UNAL,
      476     9440    3            2 *            CHAR (1) UNAL INIT ('.'),
      477     9441    3            2 GECALL_NAME  CHAR (6) UNAL,
      478     9442    3            2 *            CHAR (13) UNAL INIT (' ');
      479     9443    3      DCL LOAD_OFFSET UBIN(18);
      480     9444    3      DCL MAX_LOAD UBIN(18);
      481     9445    3      DCL STATUS (0:1) UBIN(36) STATIC;
      482     9446    3      DCL STATUS$ PTR;
      483     9447    3      DCL 1 STATUS_PTR REDEF STATUS$,
      484     9448    3            2 ADR UBIN(18) UNAL,
      485     9449    3            2 * UBIN(18) UNAL;
      486     9450        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:107  
      487     9451        /* Code */
      488     9452
      489     9453    3      CALL TOO$SET_GECALL_KEY ;

   9453  3 000733   001053 701000 3                  TSX1    TOO$SET_GECALL_KEY
         3 000734   000000 011000                    NOP     0

      490     9454    3      CALL TOO$SETUP_DCW_LIST ;

   9454  3 000735   001123 701000 3                  TSX1    TOO$SETUP_DCW_LIST
         3 000736   000000 011000                    NOP     0

      491     9455    3      CALL_SEQUENCE = '0'B;

   9455  3 000737   000000 100400                    MLR     fill='000'O
         3 000740   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 000741   000065 000050 1                  ADSC9   CALL_SEQUENCE            cn=0,n=40

      492     9456    3      CALL_SEQUENCE.DCWLIST_ADR = DCWLIST_PTR.ADR;

   9456  3 000742   200037 220100                    LDX0    DCWLIST$,,AUTO
         3 000743   000065 740000 1                  STX0    CALL_SEQUENCE

      493     9457    3      STATUS$ = ADDR(STATUS);

   9457  3 000744   000004 236000 4                  LDQ     4
         3 000745   200042 756100                    STQ     STATUS$,,AUTO

      494     9458    3      CALL_SEQUENCE.STATUS_ADR = STATUS_PTR.ADR;

   9458  3 000746   200042 221100                    LDX1    STATUS$,,AUTO
         3 000747   000065 441000 1                  SXL1    CALL_SEQUENCE

      495     9459    3      ERROR_CODE = 0;

   9459  3 000750   200036 450100                    STZ     ERROR_CODE,,AUTO

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:108  
      496     9460    3      LOAD_SIZE = 0;

   9460  3 000751   200032 450100                    STZ     LOAD_SIZE,,AUTO

      497     9461    3      STATUS = '0'B;

   9461  3 000752   000000 235003                    LDA     0,DU
         3 000753   000000 236003                    LDQ     0,DU
         3 000754   000132 757000 1                  STAQ    STATUS

      498     9462    3      LOAD_OFFSET = P_X3REG;

   9462  3 000755   200026 470500                    LDP0    @P_X3REG,,AUTO
         3 000756   000100 100500                    MLR     fill='000'O
         3 000757   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000760   200040 000002                    ADSC9   LOAD_OFFSET,,AUTO        cn=0,n=2

      499     9463    3      MAX_LOAD = P_X2REG;

   9463  3 000761   200025 471500                    LDP1    @P_X2REG,,AUTO
         3 000762   000100 100500                    MLR     fill='000'O
         3 000763   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         3 000764   200041 000002                    ADSC9   MAX_LOAD,,AUTO           cn=0,n=2

      500     9464    3      CALL TOL$GET_DECK (KEY_VALUE, LOAD_OFFSET, CALL_SEQUENCE, MAX_LOAD,

   9464  3 000765   200035 633500                    EPPR3   EDIT_NAME,,AUTO
         3 000766   200076 453500                    STP3    @OUT_LGTH+8,,AUTO
         3 000767   200036 634500                    EPPR4   ERROR_CODE,,AUTO
         3 000770   200075 454500                    STP4    @OUT_LGTH+7,,AUTO
         3 000771   200032 635500                    EPPR5   LOAD_SIZE,,AUTO
         3 000772   200074 455500                    STP5    @OUT_LGTH+6,,AUTO
         3 000773   200041 636500                    EPPR6   MAX_LOAD,,AUTO
         3 000774   200073 456500                    STP6    @OUT_LGTH+5,,AUTO
         3 000775   000005 236000 4                  LDQ     5
         3 000776   200072 756100                    STQ     @OUT_LGTH+4,,AUTO
         3 000777   200040 637500                    EPPR7   LOAD_OFFSET,,AUTO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:109  
         3 001000   200071 457500                    STP7    @OUT_LGTH+3,,AUTO
         3 001001   000006 236000 4                  LDQ     6
         3 001002   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 001003   200070 630500                    EPPR0   @OUT_LGTH+2,,AUTO
         3 001004   000025 631400 xsym               EPPR1   B_VECTNIL+21
         3 001005   000000 701000 xent               TSX1    TOL$GET_DECK
         3 001006   001010 702000 3                  TSX2    s:9467
         3 001007   001036 710000 3                  TRA     s:9472

      501     9465    3              LOAD_SIZE, ERROR_CODE, EDIT_NAME) WHENALTRETURN
      502     9466    4           DO ;

      503     9467    4              KEY_VALUE.CATA = 'UTL' ;

   9467  3 001010   000002 236000 2                  LDQ     CRLF_+1
         3 001011   000011 772000                    QRL     9
         3 001012   000124 552034 1                  STBQ    KEY_VALUE,'34'O

      504     9468    4              ERROR_CODE = 0 ;

   9468  3 001013   200036 450100                    STZ     ERROR_CODE,,AUTO

      505     9469    4              CALL TOL$GET_DECK (KEY_VALUE, LOAD_OFFSET, CALL_SEQUENCE, MAX_LOAD,

   9469  3 001014   200035 630500                    EPPR0   EDIT_NAME,,AUTO
         3 001015   200076 450500                    STP0    @OUT_LGTH+8,,AUTO
         3 001016   200036 631500                    EPPR1   ERROR_CODE,,AUTO
         3 001017   200075 451500                    STP1    @OUT_LGTH+7,,AUTO
         3 001020   200032 633500                    EPPR3   LOAD_SIZE,,AUTO
         3 001021   200074 453500                    STP3    @OUT_LGTH+6,,AUTO
         3 001022   200041 634500                    EPPR4   MAX_LOAD,,AUTO
         3 001023   200073 454500                    STP4    @OUT_LGTH+5,,AUTO
         3 001024   000005 236000 4                  LDQ     5
         3 001025   200072 756100                    STQ     @OUT_LGTH+4,,AUTO
         3 001026   200040 635500                    EPPR5   LOAD_OFFSET,,AUTO
         3 001027   200071 455500                    STP5    @OUT_LGTH+3,,AUTO
         3 001030   000006 236000 4                  LDQ     6
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:110  
         3 001031   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 001032   200070 630500                    EPPR0   @OUT_LGTH+2,,AUTO
         3 001033   000025 631400 xsym               EPPR1   B_VECTNIL+21
         3 001034   000000 701000 xent               TSX1    TOL$GET_DECK
         3 001035   001042 702000 3                  TSX2    LOAD_ERROR

      506     9470    4                      LOAD_SIZE, ERROR_CODE, EDIT_NAME) ALTRET (LOAD_ERROR) ;
      507     9471    4           END /* WHENALTRETURN */ ;

      508     9472    3      CALL TOO$RETURN_TEST_PAGE_STATS ;

   9472  3 001036   001232 701000 3                  TSX1    TOO$RETURN_TEST_PAGE_STATS
         3 001037   000000 011000                    NOP     0

      509     9473    3      RETURN;

   9473  3 001040   200034 221300                    LDX1  ! J+1,,AUTO
         3 001041   000001 702211                    TSX2  ! 1,X1

      510     9474
      511     9475    3   LOAD_ERROR:
      512     9476    3      TOO_ERROR_CODE.ERR# = %E$NOLOAD ;

   9476  3 001042   000064 236000 1     LOAD_ERROR   LDQ     TOO_ERROR_CODE
         3 001043   000002 376000 4                  ANQ     2
         3 001044   002670 276007                    ORQ     1464,DL
         3 001045   000064 756000 1                  STQ     TOO_ERROR_CODE

      513     9477    3      CALL TOX$ERROR (TOO_ERROR_CODE) ;

   9477  3 001046   000003 630400 4                  EPPR0   3
         3 001047   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001050   000000 701000 xent               TSX1    TOX$ERROR
         3 001051   000000 011000                    NOP     0
         3 001052   001333 710000 3                  TRA     s:9564

      514     9478
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:111  
      515     9479        /* END TOO$READ_TEST_PAGE */
      516     9480        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:112  
      517     9481    3   TOO$SET_GECALL_KEY: PROC ;

   9481  3 001053   200044 741300       TOO$SET_GEC* STX1  ! STATUS$+2,,AUTO

      518     9482
      519     9483    4      DCL SIZE UBIN WORD ALIGNED ;
      520     9484
      521     9485        /* Code */
      522     9486
      523     9487    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;

   9487  3 001054   000007 235000 xsym               LDA     TOT$ECP+7
         3 001055   000010 135007                    SBLA    8,DL
         3 001056   000006 115007                    CMPA    6,DL
         3 001057   001061 602005 3                  TNC     s:9487+5,AL
         3 001060   001106 710000 3                  TRA     s:9497
         3 001061   001067 710000 3                  TRA     s:9489
         3 001062   001073 710000 3                  TRA     s:9491
         3 001063   001077 710000 3                  TRA     s:9493
         3 001064   001103 710000 3                  TRA     s:9495
         3 001065   001103 710000 3                  TRA     s:9495
         3 001066   001103 710000 3                  TRA     s:9495

      524     9488    5         CASE (%COLTS) ;

      525     9489    5            KEY_VALUE.CATA = 'CLT' ;

   9489  3 001067   000003 236000 2                  LDQ     CRLF_+2
         3 001070   000011 772000                    QRL     9
         3 001071   000124 552034 1                  STBQ    KEY_VALUE,'34'O
         3 001072   001106 710000 3                  TRA     s:9497

      526     9490    5         CASE (%MOLTS) ;

      527     9491    5            KEY_VALUE.CATA = 'MLT' ;

   9491  3 001073   000004 236000 2                  LDQ     CRLF_+3
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:113  
         3 001074   000011 772000                    QRL     9
         3 001075   000124 552034 1                  STBQ    KEY_VALUE,'34'O
         3 001076   001106 710000 3                  TRA     s:9497

      528     9492    5         CASE (%POLTS) ;

      529     9493    5            KEY_VALUE.CATA = 'PLT' ;

   9493  3 001077   000005 236000 2                  LDQ     CRLF_+4
         3 001100   000011 772000                    QRL     9
         3 001101   000124 552034 1                  STBQ    KEY_VALUE,'34'O
         3 001102   001106 710000 3                  TRA     s:9497

      530     9494    5         CASE (%SOLTS, %PACT, %SLTA) ;

      531     9495    5            KEY_VALUE.CATA = 'SLT' ;

   9495  3 001103   000006 236000 2                  LDQ     CRLF_+5
         3 001104   000011 772000                    QRL     9
         3 001105   000124 552034 1                  STBQ    KEY_VALUE,'34'O

      532     9496    5      END /* ELSE */ ;

      533     9497    4      SIZE = 6 ;

   9497  3 001106   000006 236007                    LDQ     6,DL
         3 001107   200045 756100                    STQ     SIZE,,AUTO

      534     9498    4      CALL TOT$BCD_ASCII (TEST_PG_NAME, KEY_VALUE.GECALL_NAME, SIZE) ;

   9498  3 001110   200045 630500                    EPPR0   SIZE,,AUTO
         3 001111   200072 450500                    STP0    @OUT_LGTH+4,,AUTO
         3 001112   000007 236000 4                  LDQ     7
         3 001113   200017 235100                    LDA     @TEST_PG_NAME,,AUTO
         3 001114   200070 757100                    STAQ    @OUT_LGTH+2,,AUTO
         3 001115   200070 630500                    EPPR0   @OUT_LGTH+2,,AUTO
         3 001116   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:114  
         3 001117   000000 701000 xent               TSX1    TOT$BCD_ASCII
         3 001120   000000 011000                    NOP     0

      535     9499    4      RETURN ;

   9499  3 001121   200044 221300                    LDX1  ! STATUS$+2,,AUTO
         3 001122   000001 702211                    TSX2  ! 1,X1

      536     9500
      537     9501    4   END TOO$SET_GECALL_KEY ;
      538     9502        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:115  
      539     9503    3   TOO$SETUP_DCW_LIST: PROC ;

   9503  3 001123   200044 741300       TOO$SETUP_D* STX1  ! STATUS$+2,,AUTO

      540     9504
      541     9505    4      DCL LAST_COUNT UBIN(12);
      542     9506    4      DCL LOAD_WORDS UBIN(18);
      543     9507    4      DCL N UBIN(36);
      544     9508    4      DCL NUMBER_DCWS UBIN(36);
      545     9509
      546     9510        /* Code */
      547     9511
      548     9512    4      LOAD_WORDS = P_X2REG - P_X3REG - 72;

   9512  3 001124   200026 470500                    LDP0    @P_X3REG,,AUTO
         3 001125   000100 101500                    MRL     fill='000'O
         3 001126   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 001127   200070 000004                    ADSC9   @OUT_LGTH+2,,AUTO        cn=0,n=4
         3 001130   200025 471500                    LDP1    @P_X2REG,,AUTO
         3 001131   000100 101500                    MRL     fill='000'O
         3 001132   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         3 001133   200071 000004                    ADSC9   @OUT_LGTH+3,,AUTO        cn=0,n=4
         3 001134   200071 236100                    LDQ     @OUT_LGTH+3,,AUTO
         3 001135   200070 136100                    SBLQ    @OUT_LGTH+2,,AUTO
         3 001136   777670 620006                    EAX0    -72,QL
         3 001137   200046 740100                    STX0    LOAD_WORDS,,AUTO

      549     9513    4      NUMBER_DCWS = LOAD_WORDS / 4096 ;

   9513  3 001140   200046 236100                    LDQ     LOAD_WORDS,,AUTO
         3 001141   000022 772000                    QRL     18
         3 001142   000014 772000                    QRL     12
         3 001143   200050 756100                    STQ     NUMBER_DCWS,,AUTO

      550     9514    4      IF NUMBER_DCWS > %LISTSIZE

   9514  3 001144   000025 116007                    CMPQ    21,DL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:116  
         3 001145   001157 602000 3                  TNC     s:9520

      551     9515    5      THEN DO ;

      552     9516    5              TOO_ERROR_CODE.ERR# = %E$BADLOADSIZE ;

   9516  3 001146   000064 236000 1                  LDQ     TOO_ERROR_CODE
         3 001147   000002 376000 4                  ANQ     2
         3 001150   002620 276007                    ORQ     1424,DL
         3 001151   000064 756000 1                  STQ     TOO_ERROR_CODE

      553     9517    5              CALL TOX$ERROR (TOO_ERROR_CODE) ;

   9517  3 001152   000003 630400 4                  EPPR0   3
         3 001153   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001154   000000 701000 xent               TSX1    TOX$ERROR
         3 001155   000000 011000                    NOP     0

      554     9518    5           END /* THEN */ ;

   9518  3 001156   001230 710000 3                  TRA     s:9533

      555     9519    5      ELSE DO ;

      556     9520    5              LAST_COUNT = MOD (LOAD_WORDS, 4096);

   9520  3 001157   200046 236100                    LDQ     LOAD_WORDS,,AUTO
         3 001160   000022 772000                    QRL     18
         3 001161   007777 376007                    ANQ     4095,DL
         3 001162   000030 736000                    QLS     24
         3 001163   200045 756100                    STQ     LAST_COUNT,,AUTO

      557     9521    5              DCWLIST.ADR(0) = P_X3REG;

   9521  3 001164   000000 100500                    MLR     fill='000'O
         3 001165   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 001166   000077 000002 1                  ADSC9   DCWLIST                  cn=0,n=2
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:117  

      558     9522    5              DCWLIST.TYPE(0) = %IOTP ;

   9522  3 001167   000077 236000 1                  LDQ     DCWLIST
         3 001170   000010 376000 4                  ANQ     8
         3 001171   010000 276007                    ORQ     4096,DL
         3 001172   000077 756000 1                  STQ     DCWLIST

      559     9523    5              DCWLIST.WORD_COUNT(0) = 0 ;

   9523  3 001173   000000 236003                    LDQ     0,DU
         3 001174   000077 752003 1                  STCQ    DCWLIST,'03'O

      560     9524    6              DO N = 1 TO %LISTSIZE;

   9524  3 001175   000001 235007                    LDA     1,DL
         3 001176   200047 755100                    STA     N,,AUTO

      561     9525    6                 DCWLIST.ADR(N) = DCWLIST.ADR(N-1) + 4096;

   9525  3 001177   200047 720100                    LXL0    N,,AUTO
         3 001200   000076 221010 1                  LDX1    CALL_SEQUENCE+9,X0
         3 001201   010000 622011                    EAX2    4096,X1
         3 001202   000077 742010 1                  STX2    DCWLIST,X0

      562     9526    6                 DCWLIST.TYPE(N) = %IOTP ;

   9526  3 001203   000077 236010 1                  LDQ     DCWLIST,X0
         3 001204   000010 376000 4                  ANQ     8
         3 001205   010000 276007                    ORQ     4096,DL
         3 001206   000077 756010 1                  STQ     DCWLIST,X0

      563     9527    6                 DCWLIST.WORD_COUNT(N) = 0 ;

   9527  3 001207   000011 236000 4                  LDQ     9
         3 001210   000077 356010 1                  ANSQ    DCWLIST,X0

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:118  
      564     9528    6              END;

   9528  3 001211   200047 235100                    LDA     N,,AUTO
         3 001212   000001 035007                    ADLA    1,DL
         3 001213   200047 755100                    STA     N,,AUTO
         3 001214   000025 115007                    CMPA    21,DL
         3 001215   001177 602000 3                  TNC     s:9525

      565     9529    5              DCWLIST.TYPE(NUMBER_DCWS) = %IOTD ;

   9529  3 001216   200050 720100                    LXL0    NUMBER_DCWS,,AUTO
         3 001217   000010 236000 4                  LDQ     8
         3 001220   000077 356010 1                  ANSQ    DCWLIST,X0

      566     9530    5              DCWLIST.WORD_COUNT(NUMBER_DCWS) = LAST_COUNT;

   9530  3 001221   200045 236100                    LDQ     LAST_COUNT,,AUTO
         3 001222   000030 772000                    QRL     24
         3 001223   000077 676010 1                  ERQ     DCWLIST,X0
         3 001224   007777 376007                    ANQ     4095,DL
         3 001225   000077 656010 1                  ERSQ    DCWLIST,X0

      567     9531    5              DCWLIST$ = ADDR(DCWLIST);

   9531  3 001226   000012 236000 4                  LDQ     10
         3 001227   200037 756100                    STQ     DCWLIST$,,AUTO

      568     9532    5           END /* ELSE */ ;

      569     9533    4      RETURN ;

   9533  3 001230   200044 221300                    LDX1  ! STATUS$+2,,AUTO
         3 001231   000001 702211                    TSX2  ! 1,X1

      570     9534
      571     9535    4   END TOO$SETUP_DCW_LIST ;
      572     9536        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:119  
      573     9537    3   TOO$RETURN_TEST_PAGE_STATS: PROC ;

   9537  3 001232   200044 741300       TOO$RETURN_* STX1  ! STATUS$+2,,AUTO

      574     9538
      575     9539    4      DCL LOAD_ADDR_INX UBIN WORD ALIGNED ;
      576     9540    4      DCL LOAD_ADDR_MATCH BIT (1) ;
      577     9541
      578     9542        /* Code */
      579     9543
      580     9544    4      LOAD_ADDR_MATCH = %FALSE ;

   9544  3 001233   200046 450100                    STZ     LOAD_ADDR_MATCH,,AUTO

      581     9545    4      LOAD_ADDR_INX = 0 ;

   9545  3 001234   200045 450100                    STZ     LOAD_ADDR_INX,,AUTO

      582     9546    5      DO WHILE LOAD_ADDR_INX < TOT$ECP.SUBEXEC.TEST_PAGE_COUNT AND ~LOAD_ADDR_MATCH ;

   9546  3 001235   001254 710000 3                  TRA     s:9550

      583     9547    5         IF TOP$TCP.STATS.LOAD_ADDR(LOAD_ADDR_INX) = LOAD_OFFSET

   9547  3 001236   200045 236100                    LDQ     LOAD_ADDR_INX,,AUTO
         3 001237   000244 402007                    MPY     164,DL
         3 001240   000003 470400 xsym               LDP0    TOT$DMC+3
         3 001241   000000 620006                    EAX0    0,QL
         3 001242   200040 236100                    LDQ     LOAD_OFFSET,,AUTO
         3 001243   000022 772000                    QRL     18
         3 001244   000016 116110                    CMPQ    14,X0,PR0
         3 001245   001251 601000 3                  TNZ     s:9549

      584     9548    5         THEN LOAD_ADDR_MATCH = %TRUE ;

   9548  3 001246   400000 236003                    LDQ     -131072,DU
         3 001247   200046 756100                    STQ     LOAD_ADDR_MATCH,,AUTO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:120  
         3 001250   001254 710000 3                  TRA     s:9550

      585     9549    5         ELSE LOAD_ADDR_INX = LOAD_ADDR_INX + 1 ;

   9549  3 001251   200045 235100                    LDA     LOAD_ADDR_INX,,AUTO
         3 001252   000001 035007                    ADLA    1,DL
         3 001253   200045 755100                    STA     LOAD_ADDR_INX,,AUTO

      586     9550    5      END ;

   9550  3 001254   200045 236100                    LDQ     LOAD_ADDR_INX,,AUTO
         3 001255   001264 604000 3                  TMI     s:9551
         3 001256   000014 116000 xsym               CMPQ    TOT$ECP+12
         3 001257   001264 605000 3                  TPL     s:9551
         3 001260   200046 236100                    LDQ     LOAD_ADDR_MATCH,,AUTO
         3 001261   400000 376003                    ANQ     -131072,DU
         3 001262   400000 676003                    ERQ     -131072,DU
         3 001263   001236 601000 3                  TNZ     s:9547

      587     9551    4      IF LOAD_ADDR_INX > TOT$ECP.SUBEXEC.TEST_PAGE_COUNT - 1

   9551  3 001264   200045 236100                    LDQ     LOAD_ADDR_INX,,AUTO
         3 001265   001270 604000 3                  TMI     s:9552
         3 001266   000014 116000 xsym               CMPQ    TOT$ECP+12
         3 001267   001272 604000 3                  TMI     s:9553

      588     9552    4      THEN TOT$ECP.SUBEXEC.TEST_PAGE_COUNT = LOAD_ADDR_INX + 1 ;

   9552  3 001270   000001 036007                    ADLQ    1,DL
         3 001271   000014 756000 xsym               STQ     TOT$ECP+12

      589     9553    4      TOP$TCP.STATS.LOAD_ADDR(LOAD_ADDR_INX) = LOAD_OFFSET ;

   9553  3 001272   200045 236100                    LDQ     LOAD_ADDR_INX,,AUTO
         3 001273   000244 402007                    MPY     164,DL
         3 001274   200040 235100                    LDA     LOAD_OFFSET,,AUTO
         3 001275   000022 771000                    ARL     18
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:121  
         3 001276   000003 470400 xsym               LDP0    TOT$DMC+3
         3 001277   000016 755106                    STA     14,QL,PR0

      590     9554    4      TOP$TCP.STATS.MAX_LOAD(LOAD_ADDR_INX) = MAX_LOAD ;

   9554  3 001300   200041 235100                    LDA     MAX_LOAD,,AUTO
         3 001301   000022 771000                    ARL     18
         3 001302   000003 470400 xsym               LDP0    TOT$DMC+3
         3 001303   000017 755106                    STA     15,QL,PR0

      591     9555    4      TOP$TCP.STATS.GECALL_NAME(LOAD_ADDR_INX) = KEY_VALUE.GECALL_NAME ;

   9555  3 001304   000002 736000                    QLS     2
         3 001305   000003 470400 xsym               LDP0    TOT$DMC+3
         3 001306   040106 100400                    MLR     fill='040'O
         3 001307   000125 200006 1                  ADSC9   KEY_VALUE+1              cn=1,n=6
         3 001310   000021 000006                    ADSC9   17,Q,PR0                 cn=0,n=6

      592     9556    4      TOP$TCP.STATS.EDIT_NAME(LOAD_ADDR_INX) = EDIT_NAME ;

   9556  3 001311   200045 236100                    LDQ     LOAD_ADDR_INX,,AUTO
         3 001312   000244 402007                    MPY     164,DL
         3 001313   000000 620006                    EAX0    0,QL
         3 001314   200035 236100                    LDQ     EDIT_NAME,,AUTO
         3 001315   000003 470400 xsym               LDP0    TOT$DMC+3
         3 001316   000020 756110                    STQ     16,X0,PR0

      593     9557
      594     9558    4      TOQ$DCP.TP.GECALL_NAME = KEY_VALUE.GECALL_NAME ;

   9558  3 001317   040000 100400                    MLR     fill='040'O
         3 001320   000125 200006 1                  ADSC9   KEY_VALUE+1              cn=1,n=6
         3 001321   000004 000006 xsym               ADSC9   TOQ$DCP+4                cn=0,n=6

      595     9559    4      TOQ$DCP.TP.EDIT_NAME = EDIT_NAME ;

   9559  3 001322   040000 100500                    MLR     fill='040'O
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:122  
         3 001323   200035 000004                    ADSC9   EDIT_NAME,,AUTO          cn=0,n=4
         3 001324   000005 400004 xsym               ADSC9   TOQ$DCP+5                cn=2,n=4

      596     9560    4      TOQ$DCP.TP.ADDRESS = P_X3REG ;

   9560  3 001325   200026 470500                    LDP0    @P_X3REG,,AUTO
         3 001326   000000 101500                    MRL     fill='000'O
         3 001327   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 001330   000007 000004 xsym               ADSC9   TOQ$DCP+7                cn=0,n=4

      597     9561    4      RETURN ;

   9561  3 001331   200044 221300                    LDX1  ! STATUS$+2,,AUTO
         3 001332   000001 702211                    TSX2  ! 1,X1

      598     9562
      599     9563    4   END TOO$RETURN_TEST_PAGE_STATS ;
      600     9564    3   END TOO$READ_TEST_PAGE;

   9564  3 001333   200034 221300                    LDX1  ! J+1,,AUTO
         3 001334   000001 702211                    TSX2  ! 1,X1

      601     9565    2   END TOO$MME_GECALL;
      602     9566        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:123  
      603     9567        /*I*      NAME:    TOO$MME_GEMORE
      604     9568                  PURPOSE: VERIFIES THAT GEMORE REQUEST IS FOR ADDITIONAL MEMORY
      605     9569                           i.e., BITS 0-17 OF "PARAM_1" = 0.
      606     9570                           IF REQUEST IS FOR MEMORY THEN SETS THE "PAGES" SPECI-
      607     9571                           FICATION IN THE "GDP_FPT" EQUAL TO THE NUMBER OF 1K PAGES
      608     9572                           SPECIFIED IN BITS 18-35 IN "PARAM_1".
      609     9573                           CALLS M$GDP WHICH ALLOCATES MEMORY IN 1K INCREMENTS.
      610     9574                           RETURN_DELTA IS SET EQUAL TO 3 FOR NORMAL RETURN.
      611     9575                           IF FOR SOME REASON MEMORY CANNOT BE ALLOCATED THEN RETURN_
      612     9576                           DELTA IS SET EQUAL TO 2 INDICATING REQUEST DENIAL AND A
      613     9577                           CALL TO TOF$ERROR_MSG IS MADE WHICH OUTPUTS ERROR MESSAGE.
      614     9578                           RETURN IS BACK TO MME HANDLER.
      615     9579
      616     9580
      617     9581             ADDENDUM:     by GC
      618     9582                           TOF$BAR.CURRENT is a variable which at all times must
      619     9583                           reflect the base and bounds of the current running
      620     9584                           TOLTS in order for the Fault Handler to simulate
      621     9585                           the SBAR (Store BAR) instruction.  It contains
      622     9586                           the BAR value which should be in effect whenever
      623     9587                           "GELBAR" mode is broken and the ISR is not shrunken.
      624     9588                           Thus the base address is 0 (since the base is
      625     9589                           really the ISR base), and the bounds(in the number
      626     9590                           of 512 word blocks) is the highest memory address
      627     9591                           available to TOLTS.  Thus this field,
      628     9592                           (TOF$BAR.CURRENT.SIZE) must be increased whenever
      629     9593                           more memory is allocated to TOLTS, and correspondingly
      630     9594                           decreased whenever memory is released from TOLTS.
      631     9595                           TOF$BAR.CURRENT must reflect whar simulated BAR is
      632     9596                           in effect at the moment, and is set equal to the
      633     9597                           full bar at this time.  It changes when TOLTS
      634     9598                           goes into simulted GELBAR mode and shrinks the
      635     9599                           ISR around a test page.  See Fault Handler
      636     9600                           documentation for more details about this, and the
      637     9601                           shrinking of the ISR.
      638     9602        */
      639     9603        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:124  
      640     9604    1   TOO$MME_GEMORE: PROC (PARAM_1, RETURN_DELTA);

   9604  3 001335   200016 741300       TOO$MME_GEM* STX1  ! SERVICE_CODE+2,,AUTO

      641     9605
      642     9606    2      DCL PARAM_1 UBIN(36);
      643     9607    2      DCL 1 GEMORE_PARAM REDEF PARAM_1,
      644     9608    2            2 MEM_REQ UBIN(18) UNAL,
      645     9609    2            2 GEMORE_PAGES UBIN(18) UNAL;
      646     9610    2      DCL RETURN_DELTA SBIN HALF;
      647     9611    2      DCL PAGE (0:1023) UBIN WORD ALIGNED BASED;
      648     9612    2      DCL PAGE$ PTR ALIGNED;
      649     9613    2      DCL PAGE# UBIN WORD ALIGNED;
      650     9614
      651     9615        /* Code */
      652     9616
      653     9617    2      IF GEMORE_PARAM.MEM_REQ ~= 0

   9617  3 001336   200017 470500                    LDP0    @PARAM_1,,AUTO
         3 001337   000000 220100                    LDX0    0,,PR0
         3 001340   001345 600000 3                  TZE     s:9620

      654     9618    2      THEN RETURN_DELTA = 2;

   9618  3 001341   000002 222003                    LDX2    2,DU
         3 001342   200020 471500                    LDP1    @RETURN_DELTA,,AUTO
         3 001343   100000 742100                    STX2    0,,PR1
         3 001344   001421 710000 3                  TRA     s:9631

      655     9619    3      ELSE DO;

      656     9620    3              GDP_FPT.V.PAGES# = GEMORE_PARAM.GEMORE_PAGES;

   9620  3 001345   000000 236100                    LDQ     0,,PR0
         3 001346   777777 376007                    ANQ     -1,DL
         3 001347   000012 756000 1                  STQ     GDP_FPT+4

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:125  
      657     9621    3              TOT$ECP.DYNAMIC_PAGE_COUNT = TOT$ECP.DYNAMIC_PAGE_COUNT + GEMORE_PARAM.
              9621                       GEMORE_PAGES;

   9621  3 001350   000000 236100                    LDQ     0,,PR0
         3 001351   777777 376007                    ANQ     -1,DL
         3 001352   000006 036000 xsym               ADLQ    TOT$ECP+6
         3 001353   000006 756000 xsym               STQ     TOT$ECP+6

      658     9622    3              CALL M$GDP(GDP_FPT) ALTRET(DENY_MEM_REQ);

   9622  3 001354   000006 630400 1                  EPPR0   GDP_FPT
         3 001355   430003 713400                    CLIMB   alt,+12291
         3 001356   400400 401760                    pmme    nvectors=2
         3 001357   001423 702000 3                  TSX2    DENY_MEM_REQ

      659     9623    4              DO PAGE# = 0 TO GDP_FPT.V.PAGES# - 1;

   9623  3 001360   200022 450100                    STZ     PAGE#,,AUTO
         3 001361   001376 710000 3                  TRA     s:9626+3

      660     9624    4                 PAGE$ = PINCRW (GEMORE_VEC.PTR$, PAGE# * 1024);

   9624  3 001362   200022 236100                    LDQ     PAGE#,,AUTO
         3 001363   000034 736000                    QLS     28
         3 001364   000055 036000 1                  ADLQ    GEMORE_VEC+1
         3 001365   200021 756100                    STQ     PAGE$,,AUTO

      661     9625    4                 PAGE$ -> PAGE = '0'B;

   9625  3 001366   200021 470500                    LDP0    PAGE$,,AUTO
         3 001367   010000 220003                    LDX0    4096,DU
         3 001370   000140 100400                    MLR     fill='000'O
         3 001371   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 001372   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

      662     9626    4              END /* DO */;

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:126  
   9626  3 001373   200022 235100                    LDA     PAGE#,,AUTO
         3 001374   000001 035007                    ADLA    1,DL
         3 001375   200022 755100                    STA     PAGE#,,AUTO
         3 001376   200022 236100                    LDQ     PAGE#,,AUTO
         3 001377   000012 116000 1                  CMPQ    GDP_FPT+4
         3 001400   001362 602000 3                  TNC     s:9624

      663     9627    3             TOF$BAR.CURRENT.SIZE = TOF$BAR.CURRENT.SIZE + GEMORE_PARAM.GEMORE_PAGES*2
              9627                       ;

   9627  3 001401   000000 236000 xsym               LDQ     TOF$BAR
         3 001402   000022 772000                    QRL     18
         3 001403   000777 376007                    ANQ     511,DL
         3 001404   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 001405   200017 470500                    LDP0    @PARAM_1,,AUTO
         3 001406   000000 236100                    LDQ     0,,PR0
         3 001407   000001 736000                    QLS     1
         3 001410   000013 376000 4                  ANQ     11
         3 001411   200070 036100                    ADLQ    @OUT_LGTH+2,,AUTO
         3 001412   000022 736000                    QLS     18
         3 001413   000000 552020 xsym               STBQ    TOF$BAR,'20'O

      664     9628    3              TOF$BAR.CURRENT = TOF$BAR.CURRENT;

   9628  3 001414   000000 220000 xsym               LDX0    TOF$BAR
         3 001415   000000 740000 xsym               STX0    TOF$BAR

      665     9629    3              RETURN_DELTA = 3;

   9629  3 001416   000003 221003                    LDX1    3,DU
         3 001417   200020 471500                    LDP1    @RETURN_DELTA,,AUTO
         3 001420   100000 741100                    STX1    0,,PR1

      666     9630    3           END /* ELSE */ ;

      667     9631    2      RETURN;

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:127  
   9631  3 001421   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001422   000001 702211                    TSX2  ! 1,X1

      668     9632
      669     9633    2   DENY_MEM_REQ:
      670     9634    2      RETURN_DELTA = 2;

   9634  3 001423   000002 220003       DENY_MEM_REQ LDX0    2,DU
         3 001424   200020 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001425   000000 740100                    STX0    0,,PR0

      671     9635    2      RETURN;

   9635  3 001426   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001427   000001 702211                    TSX2  ! 1,X1

      672     9636
      673     9637    2   END TOO$MME_GEMORE;
      674     9638        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:128  
      675     9639        /*I*      NAME:    TOO$MME_GEMREL
      676     9640                  PURPOSE: VERIFIES THAT MEMORY REQUESTED FOR RELEASE
      677     9641                           IS NOT IN LOWER MEMORY SEGMENT, i.e., BITS
      678     9642                           0-17    OF THE PARAMETER "WORDS" MUST = 0.
      679     9643                           ABORTS IF THIS IS NOT THE CASE.
      680     9644                           TRANSLATES REQUESTED NUMBER OF WORDS OF UPPER
      681     9645                           MEMORY TO BE RELEASED TO 1K PAGES, i.e., DIVIDES THE
      682     9646                           18 BITS OF PARAMETER "WORDS" BY 1024.
      683     9647                           "UPPER_MEM" FIELD (BITS 18-35) OF THE PARAMETER "WORDS"
      684     9648                           BY 1024 AND ASSIGNS THE QUOTIENT TO "GEMREL_WDS".
      685     9649                           SETS PAGES SPECIFICATION IN FDP_FPT EQUAL TO
      686     9650                           TRUNCATED QUOTIENT.
      687     9651                           CALLS M$FDP WHICH RELEASES MEMORY BY 1K PAGES.
      688     9652                           CALLS TOF$IO_ERROR TO OUTPUT ERROR_MESSAGE WHEN 1st
      689     9653                           AVAILIABLE MEMORY PAGE HAS BEEN RELEASED.
      690     9654                           SETS RETURN_DELTA AND RETURNS TO MME HANDLER.
      691     9655
      692     9656
      693     9657             ADDENDUM:     by GC
      694     9658                           See the documentation for TOO$MME_GEMORE for the
      695     9659                           description of use, definition and purpose of the
      696     9660                           2 variables TOF$BAR.CURRENT and TOF$BAR.CURRENT.
      697     9661        */
      698     9662        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:129  
      699     9663    1   TOO$MME_GEMREL: PROC (ADDRESS, WORDS, MME_IC, RETURN_DELTA);

   9663  3 001430   200016 741300       TOO$MME_GEM* STX1  ! SERVICE_CODE+2,,AUTO

      700     9664
      701     9665    2      DCL ADDRESS UBIN(36);
      702     9666    2      DCL 1 ADDR_BUF REDEF ADDRESS,
      703     9667    2            2 RETURN_ADDR UBIN(18) UNAL,
      704     9668    2            2 * UBIN(18) UNAL;
      705     9669    2      DCL GEMREL_PAGES SBIN(36);
      706     9670    2      DCL MME_IC PTR;
      707     9671    2      DCL 1 MME_IC_FORMAT REDEF MME_IC,
      708     9672    2            2 IC_ADDR UBIN(18) UNAL,
      709     9673    2            2 SEGID UBIN(18) UNAL;
      710     9674    2      DCL RETURN_DELTA SBIN HALF;
      711     9675    2      DCL WORDS UBIN(36);
      712     9676    2      DCL 1 GEMREL_WDS REDEF WORDS,
      713     9677    2            2 LOWER_MEM SBIN(18) UNAL,
      714     9678    2            2 UPPER_MEM SBIN(18) UNAL;
      715     9679           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:130  
      716     9680        /* Code */
      717     9681
      718     9682    2      IF GEMREL_WDS.LOWER_MEM > 0

   9682  3 001431   200020 470500                    LDP0    @WORDS,,AUTO
         3 001432   000000 220100                    LDX0    0,,PR0
         3 001433   001445 604400 3                  TMOZ    s:9688

      719     9683    3      THEN DO ;

      720     9684    3              TOO_ERROR_CODE.ERR# = %E$BADGEMREL ;

   9684  3 001434   000064 236000 1                  LDQ     TOO_ERROR_CODE
         3 001435   000002 376000 4                  ANQ     2
         3 001436   002600 276007                    ORQ     1408,DL
         3 001437   000064 756000 1                  STQ     TOO_ERROR_CODE

      721     9685    3              CALL TOX$ERROR (TOO_ERROR_CODE) ;

   9685  3 001440   000003 630400 4                  EPPR0   3
         3 001441   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001442   000000 701000 xent               TSX1    TOX$ERROR
         3 001443   000000 011000                    NOP     0

      722     9686    3           END /* THEN */ ;

   9686  3 001444   001507 710000 3                  TRA     s:9696

      723     9687    3      ELSE DO;

      724     9688    3              GEMREL_PAGES = GEMREL_WDS.UPPER_MEM/1024;

   9688  3 001445   000000 236100                    LDQ     0,,PR0
         3 001446   000022 736000                    QLS     18
         3 001447   000022 732000                    QRS     18
         3 001450   002000 506007                    DIV     1024,DL
         3 001451   200023 756100                    STQ     GEMREL_PAGES,,AUTO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:131  

      725     9689    3              FDP_FPT.V.PAGES# = GEMREL_PAGES;

   9689  3 001452   000004 756000 1                  STQ     FDP_FPT+4

      726     9690    3              TOT$ECP.DYNAMIC_PAGE_COUNT = TOT$ECP.DYNAMIC_PAGE_COUNT - GEMREL_PAGES;

   9690  3 001453   000006 236000 xsym               LDQ     TOT$ECP+6
         3 001454   200023 136100                    SBLQ    GEMREL_PAGES,,AUTO
         3 001455   000006 756000 xsym               STQ     TOT$ECP+6

      727     9691    3              CALL M$FDP(FDP_FPT) ;

   9691  3 001456   000000 630400 1                  EPPR0   FDP_FPT
         3 001457   030004 713400                    CLIMB   12292
         3 001460   400400 401760                    pmme    nvectors=2

      728     9692    3              TOF$BAR.CURRENT.SIZE = TOF$BAR.CURRENT.SIZE - GEMREL_PAGES * 2;

   9692  3 001461   000000 236000 xsym               LDQ     TOF$BAR
         3 001462   000022 772000                    QRL     18
         3 001463   000777 376007                    ANQ     511,DL
         3 001464   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 001465   200023 336100                    LCQ     GEMREL_PAGES,,AUTO
         3 001466   000001 736000                    QLS     1
         3 001467   200070 036100                    ADLQ    @OUT_LGTH+2,,AUTO
         3 001470   000022 736000                    QLS     18
         3 001471   000000 552020 xsym               STBQ    TOF$BAR,'20'O

      729     9693    3              TOF$BAR.CURRENT = TOF$BAR.CURRENT;

   9693  3 001472   000000 220000 xsym               LDX0    TOF$BAR
         3 001473   000000 740000 xsym               STX0    TOF$BAR

      730     9694    3              RETURN_DELTA = ADDR_BUF.RETURN_ADDR - MME_IC_FORMAT.IC_ADDR;

   9694  3 001474   200021 470500                    LDP0    @MME_IC,,AUTO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:132  
         3 001475   000000 236100                    LDQ     0,,PR0
         3 001476   000022 772000                    QRL     18
         3 001477   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 001500   200017 471500                    LDP1    @ADDRESS,,AUTO
         3 001501   100000 236100                    LDQ     0,,PR1
         3 001502   000022 772000                    QRL     18
         3 001503   200070 136100                    SBLQ    @OUT_LGTH+2,,AUTO
         3 001504   000000 621006                    EAX1    0,QL
         3 001505   200022 473500                    LDP3    @RETURN_DELTA,,AUTO
         3 001506   300000 741100                    STX1    0,,PR3

      731     9695    3           END /* ELSE */ ;

      732     9696    2      RETURN;

   9696  3 001507   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001510   000001 702211                    TSX2  ! 1,X1

      733     9697
      734     9698    2   END TOO$MME_GEMREL;
      735     9699        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:133  
      736     9700        /*I*      NAME:    TOO$MME_GEPROC
      737     9701                  PURPOSE: IN GCOS USED TO CONVERT GEPR ORIGINATED TEST REQUESTS
      738     9702                           INTO STANDARD FORMAT.  THIS ROUTINE PRESENTLY UNUSED IN
      739     9703                           CP6 TOLTS.
      740     9704        */
      741     9705
      742     9706    1   TOO$MME_GEPROC: PROC (PARAM_1, PARAM_2, RETURN_DELTA);

   9706  3 001511   200016 741300       TOO$MME_GEP* STX1  ! SERVICE_CODE+2,,AUTO

      743     9707
      744     9708    2      DCL PARAM_1 UBIN(36);
      745     9709    2      DCL PARAM_2 UBIN(36);
      746     9710    2      DCL RETURN_DELTA SBIN HALF;
      747     9711
      748     9712        /* Code */
      749     9713
      750     9714    2      RETURN_DELTA = 3;

   9714  3 001512   000003 220003                    LDX0    3,DU
         3 001513   200021 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001514   000000 740100                    STX0    0,,PR0

      751     9715    2      RETURN;

   9715  3 001515   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001516   000001 702211                    TSX2  ! 1,X1

      752     9716
      753     9717    2   END TOO$MME_GEPROC;
      754     9718        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:134  
      755     9719        /*I* NAME:         TOO$MME_GERELC
      756     9720             CALL:         CALL TOO$MME_GERELC(RETURN_DELTA);
      757     9721             INTERFACE:    M$WAIT
      758     9722             INPUT:
      759     9723             OUTPUT:       RETURN_DELTA = 1
      760     9724             DESCRIPTION:  In the GCOS world, this MME removes the program
      761     9725                           from execution until the next I/O completes, or
      762     9726                           an interrupt occurrs.  This function is simulated
      763     9727                           here.
      764     9728
      765     9729                           A check is made to see if there is any outstanding
      766     9730                           I/O; included in this count are (1) no wait test
      767     9731                           I/O and (2) outstanding interslave I/O (reads).
      768     9732                           If there is none, this routine exits back to the
      769     9733                           subexec.  If there is outstanding I/O, the
      770     9734                           flag TOT$ECP.ISC.GERELC_WAIT is set, and a wait loop entered
      771     9735                           until the flag is reset.  It will be reset by the
      772     9736                           Event Handler when a no wait I/O completes, and by
      773     9737                           TOG$GCOS_MMES/TOG$MME_GEINOS when an interslave
      774     9738                           I/O completes.  The wait loop here is implemented
      775     9739                           by calling M$WAIT.  Control will return here
      776     9740                           whenever (1) the flag gets reset or (2) an interrupt
      777     9741                           occurs.
      778     9742        */
      779     9743        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:135  
      780     9744    1   TOO$MME_GERELC: PROC (RETURN_DELTA);

   9744  3 001517   200016 741300       TOO$MME_GER* STX1  ! SERVICE_CODE+2,,AUTO

      781     9745
      782     9746    2      DCL RETURN_DELTA SBIN HALF;
      783     9747
      784     9748        /* Code */
      785     9749
      786     9750    2      IF TOT$ECP.IO.COUNT > 0

   9750  3 001520   000004 235000 xsym               LDA     TOT$ECP+4
         3 001521   001537 604400 3                  TMOZ    s:9759

      787     9751    3      THEN DO;

      788     9752    3              TOT$ECP.ISC.GERELC_WAIT = %TRUE ;

   9752  3 001522   100000 236003                    LDQ     32768,DU
         3 001523   000005 256000 xsym               ORSQ    TOT$ECP+5

      789     9753    4              DO WHILE (TOT$ECP.ISC.GERELC_WAIT) ;

   9753  3 001524   000005 236000 xsym               LDQ     TOT$ECP+5
         3 001525   100000 316003                    CANQ    32768,DU
         3 001526   001537 600000 3                  TZE     s:9759

      790     9754    4                 WAIT_FPT.V.UNITS# = 1;

   9754  3 001527   000001 235007                    LDA     1,DL
         3 001530   000034 755000 1                  STA     WAIT_FPT+4

      791     9755    4                 CALL M$WAIT(WAIT_FPT) ;

   9755  3 001531   000030 630400 1                  EPPR0   WAIT_FPT
         3 001532   020006 713400                    CLIMB   8198
         3 001533   400400 401760                    pmme    nvectors=2
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:136  

      792     9756    4              END /* WHILE */ ;

   9756  3 001534   000005 236000 xsym               LDQ     TOT$ECP+5
         3 001535   100000 316003                    CANQ    32768,DU
         3 001536   001527 601000 3                  TNZ     s:9754

      793     9757    3           END /* THEN */ ;

      794     9758    2      ELSE /* Do Nothing */ ;
      795     9759    2      RETURN_DELTA = 1;

   9759  3 001537   000001 220003                    LDX0    1,DU
         3 001540   200017 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001541   000000 740100                    STX0    0,,PR0

      796     9760    2      RETURN;

   9760  3 001542   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001543   000001 702211                    TSX2  ! 1,X1

      797     9761
      798     9762    2   END TOO$MME_GERELC;
      799     9763        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:137  
      800     9764        /*I* NAME:         TOO$MME_GEROAD
      801     9765             CALL:         CALL TOO$TMME_GEROAD(RETURN_DELTA);
      802     9766             INTERFACE:    M$WAIT
      803     9767             INPUT:
      804     9768             OUTPUT:
      805     9769             DESCRIPTION:  Waits until all outstanding I/O completes before
      806     9770                           returning to the subexec.  This condition is
      807     9771                           indicated by TOT$ECP.IO.COUNT being equal to 0.  The
      808     9772                           Monitor Service Routine M$WAIT is called continually
      809     9773                           until the count of outstanding I/O goes to 0.  (This
      810     9774                           count includes all no wait I/O as well as interslave
      811     9775                           read requests from the subexecs.)
      812     9776        */
      813     9777
      814     9778    1   TOO$MME_GEROAD: PROC (RETURN_DELTA);

   9778  3 001544   200016 741300       TOO$MME_GER* STX1  ! SERVICE_CODE+2,,AUTO

      815     9779
      816     9780    2      DCL RETURN_DELTA SBIN HALF;
      817     9781
      818     9782        /* Code */
      819     9783
      820     9784    3      DO WHILE (TOT$ECP.IO.COUNT ~= 0);

   9784  3 001545   000004 235000 xsym               LDA     TOT$ECP+4
         3 001546   001556 600000 3                  TZE     s:9788

      821     9785    3         WAIT_FPT.V.UNITS# = 1;

   9785  3 001547   000001 235007                    LDA     1,DL
         3 001550   000034 755000 1                  STA     WAIT_FPT+4

      822     9786    3         CALL M$WAIT(WAIT_FPT) ;

   9786  3 001551   000030 630400 1                  EPPR0   WAIT_FPT
         3 001552   020006 713400                    CLIMB   8198
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:138  
         3 001553   400400 401760                    pmme    nvectors=2

      823     9787    3      END /* WHILE */ ;

   9787  3 001554   000004 235000 xsym               LDA     TOT$ECP+4
         3 001555   001547 601000 3                  TNZ     s:9785

      824     9788    2      RETURN_DELTA = 1;

   9788  3 001556   000001 220003                    LDX0    1,DU
         3 001557   200017 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001560   000000 740100                    STX0    0,,PR0

      825     9789    2      RETURN;

   9789  3 001561   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001562   000001 702211                    TSX2  ! 1,X1

      826     9790
      827     9791    2   END TOO$MME_GEROAD;
      828     9792        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:139  
      829     9793        /*I* NAME:         TOO$MME_GESNAP
      830     9794             CALL:         CALL TOO$MME_GESNAP(PARAM-1, RETURN_DELTA);
      831     9795             INPUT:
      832     9796             OUTPUT:
      833     9797             DESCRIPTION:  Not implemented in CP6 because of DELTA capability
      834     9798                           for debug purposes.
      835     9799        */
      836     9800
      837     9801    1   TOO$MME_GESNAP: PROC (PARAM_1, RETURN_DELTA);

   9801  3 001563   200016 741300       TOO$MME_GES* STX1  ! SERVICE_CODE+2,,AUTO

      838     9802
      839     9803    2      DCL PARAM_1 UBIN(36);
      840     9804    2      DCL RETURN_DELTA SBIN HALF;
      841     9805
      842     9806        /* Code */
      843     9807
      844     9808    2      RETURN_DELTA = 2;

   9808  3 001564   000002 220003                    LDX0    2,DU
         3 001565   200020 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001566   000000 740100                    STX0    0,,PR0

      845     9809    2      RETURN;

   9809  3 001567   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001570   000001 702211                    TSX2  ! 1,X1

      846     9810
      847     9811    2   END TOO$MME_GESNAP;
      848     9812        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:140  
      849     9813        /*I*      NAME:    TOO$MME_GETIME
      850     9814                  PURPOSE: CALLED BY MME HANDLER FOR DATE AND TIME.
      851     9815                           SPECIFIES DEST AND SOURCE OPTIONS IN TIME_FPT INDICATING
      852     9816                           SOURCE AND FORMAT OF  DATE TO BE RETURNED.
      853     9817                           CALLS M$TIME WHICH RETURNS DATE TO DATE_BUFFER_ASCII
      854     9818                           IN FORMAT OF YYMMDD.
      855     9819                           CALLS TOT$ASCII_BCD TO CONVERT DATE FROM ASCII FORMAT TO
      856     9820                           BCD FORMAT .
      857     9821                           CALLS TOO$MME-ABSTIM TO RETURN TIME IN 1/64th MILLI_
      858     9822                           SECOND INCREMENTS SINCE MIDNIGHT.
      859     9823                           ASSIGNS RETURN_DELTA.
      860     9824                           RETURNS TO MME HANDLER WITH TIME AND DATE IN "GETIME_
      861     9825                           BUFFER" AND "DATE_BUFFER" RESPECTIVELY.
      862     9826        */
      863     9827        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:141  
      864     9828    1   TOO$MME_GETIME: PROC (DATE_BUFFER, GETIME_BUFFER, RETURN_DELTA);

   9828  3 001571   200016 741300       TOO$MME_GET* STX1  ! SERVICE_CODE+2,,AUTO

      865     9829
      866     9830    2      DCL DATE_BUFFER UBIN(36);
      867     9831    2      DCL DATE_BUF_TEMP(0:5) REDEF DATE_BUFFER UBIN(6) UNAL;
      868     9832    2      DCL DATE_BUFFER_BCD(0:5) UBIN(6)  STATIC UNAL;
      869     9833    2      DCL GETIME_BUFFER UBIN(36);
      870     9834    2      DCL RETURN_DELTA SBIN HALF;
      871     9835
      872     9836        /* Code */
      873     9837
      874     9838    2      TIME_FPT.V.DEST# = %ANS#;

   9838  3 001572   000002 236003                    LDQ     2,DU
         3 001573   000026 552020 1                  STBQ    TIME_FPT+10,'20'O

      875     9839    2      TIME_FPT.V.SOURCE# = %CLOCK#;

   9839  3 001574   000000 236003                    LDQ     0,DU
         3 001575   000026 552040 1                  STBQ    TIME_FPT+10,'40'O

      876     9840
      877     9841    2      CALL M$TIME(TIME_FPT) ;

   9841  3 001576   000014 630400 1                  EPPR0   TIME_FPT
         3 001577   020004 713400                    CLIMB   8196
         3 001600   402000 401760                    pmme    nvectors=5

      878     9842    2      CHAR_COUNT = 6;

   9842  3 001601   000006 235007                    LDA     6,DL
         3 001602   200007 755100                    STA     CHAR_COUNT,,AUTO

      879     9843    2      CALL TOT$ASCII_BCD(DATE_BUFFER_ASCII, DATE_BUFFER_BCD, CHAR_COUNT);

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:142  
   9843  3 001603   200007 630500                    EPPR0   CHAR_COUNT,,AUTO
         3 001604   200072 450500                    STP0    @OUT_LGTH+4,,AUTO
         3 001605   000014 237000 4                  LDAQ    12
         3 001606   200070 757100                    STAQ    @OUT_LGTH+2,,AUTO
         3 001607   200070 630500                    EPPR0   @OUT_LGTH+2,,AUTO
         3 001610   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 001611   000000 701000 xent               TSX1    TOT$ASCII_BCD
         3 001612   000000 011000                    NOP     0

      880     9844    2      DATE_BUF_TEMP = DATE_BUFFER_BCD;

   9844  3 001613   000134 236000 1                  LDQ     DATE_BUFFER_BCD
         3 001614   200017 470500                    LDP0    @DATE_BUFFER,,AUTO
         3 001615   000000 756100                    STQ     0,,PR0

      881     9845
      882     9846    2      CALL TOO$MME_ABSTIM(GETIME_BUFFER, RETURN_DELTA);

   9846  3 001616   200021 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 001617   200024 756100                    STQ     @MME_IC,,AUTO
         3 001620   200020 236100                    LDQ     @GETIME_BUFFER,,AUTO
         3 001621   200023 756100                    STQ     GEMREL_PAGES,,AUTO
         3 001622   000466 701000 3                  TSX1    TOO$MME_ABSTIM
         3 001623   000000 011000                    NOP     0

      883     9847    2      RETURN_DELTA = 1;

   9847  3 001624   000001 220003                    LDX0    1,DU
         3 001625   200021 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001626   000000 740100                    STX0    0,,PR0

      884     9848    2      RETURN;

   9848  3 001627   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001630   000001 702211                    TSX2  ! 1,X1

      885     9849
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:143  
      886     9850    2   END TOO$MME_GETIME;
      887     9851        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:144  
      888     9852        /*I* NAME:         TOO$MME_GEWAKE
      889     9853             INTERFACE:    M$WAIT Monitor Service
      890     9854                           MOD builtin function
      891     9855             INPUT:        GEWAKE_TIME = time to put program to sleep,
      892     9856                                         in 1/64 millisecond increments
      893     9857                           TOO$IO_COUNT
      894     9858             OUTPUT:       TOLTS sleeps for N seconds.
      895     9859                           RETURN_DELTA
      896     9860             DESCRIPTION:  This MME is supposed to put the program to sleep
      897     9861                           for the  specified period of time  or  until  an
      898     9862                           interrupt occurrs.    The implementation in CP-6
      899     9863                           in the form of an Interslave Read. The rationale
      900     9864                           for this is that between the time a subexec does
      901     9865                           MME GEWAKE  and the time it takes to get to this
      902     9866                           Service Routine,  the I/O the subexec is waiting
      903     9867                           on may have completed and  TOLTS will needlessly
      904     9868                           be put to sleep.
      905     9869
      906     9870                           The sleep increment  passed in GEWAKE_TIME is in
      907     9871                           1/64 millisecond increments.  It is converted to
      908     9872                           1 second increments, because that is the smallest
      909     9873                           increment M$WAIT will handle. If this conversion
      910     9874                           would result in a value less than 1 second,  the
      911     9875                           value is ignored.
      912     9876        */
      913     9877        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:145  
      914     9878    1   TOO$MME_GEWAKE: PROC (GEWAKE_TIME, RETURN_DELTA) ;

   9878  3 001631   200022 741300       TOO$MME_GEW* STX1  ! @RETURN_DELTA,,AUTO

      915     9879
      916     9880    2      DCL GEWAKE_TIME       SBIN WORD ALIGNED ;
      917     9881    2      DCL RETURN_DELTA      SBIN HALF HALIGNED ;
      918     9882    2      DCL GEWAKE_COUNT      UBIN WORD STATIC ALIGNED INIT (0);
      919     9883
      920     9884        /* Code */
      921     9885
      922     9886    2      GEWAKE_TIME = GEWAKE_TIME / 64 ;

   9886  3 001632   200023 470500                    LDP0    @GEWAKE_TIME,,AUTO
         3 001633   000000 236100                    LDQ     0,,PR0
         3 001634   000100 506007                    DIV     64,DL
         3 001635   000000 756100                    STQ     0,,PR0

      923     9887    2      IF GEWAKE_TIME < 1000

   9887  3 001636   001750 116007                    CMPQ    1000,DL
         3 001637   001666 604000 3                  TMI     s:9903

      924     9888    2      THEN /* Ignore GEWAKE times less than 1 full second. */ ;
      925     9889    2      ELSE IF TOT$ECP.IO.COUNT > 1

   9889  3 001640   000004 235000 xsym               LDA     TOT$ECP+4
         3 001641   000001 115007                    CMPA    1,DL
         3 001642   001651 604400 3                  TMOZ    s:9895

      926     9890    3         THEN DO ;

      927     9891    3                 WAIT_FPT.V.UNITS# = GEWAKE_TIME / 1000 ;

   9891  3 001643   001750 506007                    DIV     1000,DL
         3 001644   000034 756000 1                  STQ     WAIT_FPT+4

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:146  
      928     9892    3                 CALL M$WAIT (WAIT_FPT) ;

   9892  3 001645   000030 630400 1                  EPPR0   WAIT_FPT
         3 001646   020006 713400                    CLIMB   8198
         3 001647   400400 401760                    pmme    nvectors=2

      929     9893    3              END /* THEN */ ;

   9893  3 001650   001666 710000 3                  TRA     s:9903

      930     9894    3         ELSE DO ;

      931     9895    3                 GEWAKE_COUNT = GEWAKE_COUNT + 1 ;

   9895  3 001651   000135 235000 1                  LDA     GEWAKE_COUNT
         3 001652   000001 035007                    ADLA    1,DL
         3 001653   000135 755000 1                  STA     GEWAKE_COUNT

      932     9896    3                 IF MOD (GEWAKE_COUNT, 20) = 0

   9896  3 001654   000043 773000                    LRL     35
         3 001655   000024 507007                    DVF     20,DL
         3 001656   000000 116003                    CMPQ    0,DU
         3 001657   001666 601000 3                  TNZ     s:9903

      933     9897    4                 THEN DO ;

      934     9898    4                         WAIT_FPT.V.UNITS# = GEWAKE_TIME / 1000 ;

   9898  3 001660   000000 236100                    LDQ     0,,PR0
         3 001661   001750 506007                    DIV     1000,DL
         3 001662   000034 756000 1                  STQ     WAIT_FPT+4

      935     9899    4                         CALL M$WAIT(WAIT_FPT) ;

   9899  3 001663   000030 630400 1                  EPPR0   WAIT_FPT
         3 001664   020006 713400                    CLIMB   8198
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:147  
         3 001665   400400 401760                    pmme    nvectors=2

      936     9900    4                      END /* ELSE */ ;

      937     9901    3                 ELSE /* Omit this GEWAKE for performance */ ;
      938     9902    3              END /* ELSE */ ;

      939     9903    2      RETURN_DELTA = 1;

   9903  3 001666   200024 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001667   000100 101400                    MRL     fill='000'O
         3 001670   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 001671   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      940     9904    2      RETURN;

   9904  3 001672   200022 221300                    LDX1  ! @RETURN_DELTA,,AUTO
         3 001673   000001 702211                    TSX2  ! 1,X1

      941     9905
      942     9906    2   END TOO$MME_GEWAKE;
      943     9907        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:148  
      944     9908        /*I*      NAME:    TOO$MME_PROCTM
      945     9909                  PURPOSE: BUILDS POINTER(CPU_TIME_PTR) TO STRUCTURE ELEMENT
      946     9910                           (B$JIT.TUEXT) IN JIT CONTAINING USERS EXECUTION TIME.
      947     9911                           CONVERTS USERS EXECTUION TIME FROM MILLISECONDS TO 1/64th
      948     9912                           MILLISECONDS BY MULTIPLYING THE BASED VARIABLE "EXECUTION_
      949     9913                           TIME" BY 64 AND ASSIGNING THE PRODUCT TO THE RETURN
      950     9914                           PARAMETER "CPU_TIME".
      951     9915                           THE RETURN PARAMETER "CPU_TIME".
      952     9916                           ASSIGNS RETURN_DELTA AND RETURNS TO MME HANDLER.
      953     9917        */
      954     9918
      955     9919    1   TOO$MME_PROCTM: PROC (CPU_TIME, RETURN_DELTA);

   9919  3 001674   200016 741300       TOO$MME_PRO* STX1  ! SERVICE_CODE+2,,AUTO

      956     9920
      957     9921    2      DCL CPU_TIME SBIN(36);
      958     9922    2      DCL CPU_TIME_PTR PTR;
      959     9923    2      DCL EXECUTION_TIME SBIN WORD BASED(CPU_TIME_PTR);
      960     9924    2      DCL RETURN_DELTA SBIN HALF;
      961     9925
      962     9926        /* Code */
      963     9927
      964     9928    2      CPU_TIME_PTR = ADDR(B$JIT.TUEXT);

   9928  3 001675   000000 236000 xsym               LDQ     B$JIT$
         3 001676   000273 036003                    ADLQ    187,DU
         3 001677   200021 756100                    STQ     CPU_TIME_PTR,,AUTO

      965     9929    2      CPU_TIME = 64*EXECUTION_TIME;

   9929  3 001700   200021 470500                    LDP0    CPU_TIME_PTR,,AUTO
         3 001701   200017 471500                    LDP1    @CPU_TIME,,AUTO
         3 001702   000000 235100                    LDA     0,,PR0
         3 001703   000006 735000                    ALS     6
         3 001704   100000 755100                    STA     0,,PR1

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:149  
      966     9930    2      RETURN_DELTA = 1;

   9930  3 001705   000001 220003                    LDX0    1,DU
         3 001706   200020 473500                    LDP3    @RETURN_DELTA,,AUTO
         3 001707   300000 740100                    STX0    0,,PR3

      967     9931    2      RETURN;

   9931  3 001710   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001711   000001 702211                    TSX2  ! 1,X1

      968     9932
      969     9933    2   END TOO$MME_PROCTM;
      970     9934        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:150  
      971     9935        /*I* NAME:         TOO$MME_READIO
      972     9936             PURPOSE:      Handles MME Read I/O
      973     9937             INTERFACE:    TOT$ASCII_BCD
      974     9938             PARAMETERS:   CONTROLLING - ID (not used by CP-6)
      975     9939                           PARAM_ADDR - address of 3 word entry
      976     9940                           RETURN_DELTA
      977     9941             DATA:         IONUM - decremented by 1
      978     9942                           WRITE_BUF_VECTOR.SEGID - dynamic segment
      979     9943             DESCRIPTION:  This  procedure  handles  MME  read  i/o.  The
      980     9944                           actual read of the  data has already been done
      981     9945                           on a previous MME TADIOD. During that MME, the
      982     9946                           address of the buffer  into which the data was
      983     9947                           read was returned to the Subexec. (The address
      984     9948                           represents the offset into the dynamic segment
      985     9949                           overlaid by TOO$IO_BUFFER).  PARAM_ADDR is the
      986     9950                           address  of  a  3  word  entry  containing the
      987     9951                           buffer  address  mentioned  above,  TDPCN (T&D
      988     9952                           Page   Control   Number),   and   other  items
      989     9953                           presently  not used  by CP-6.  RETURN_DELTA is
      990     9954                           set to 3 to signify a normal return.
      991     9955
      992     9956                           Algorithm:
      993     9957                              obtain pointer to 3 word entry
      994     9958                              obtain pointer to where TOLTS has already
      995     9959                                 saved the ASCII data
      996     9960                              use indirect method to find where the test
      997     9961                                 page wants the BCD data
      998     9962
      999     9963                              find last non-blank ASCII character
     1000     9964                              convert ASCII to BCD
     1001     9965                              pad BCD with desired pad character
     1002     9966
     1003     9967                              update TOLTS table to reflect that the
     1004     9968                                 buffer was processed
     1005     9969        */
     1006     9970        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:151  
     1007     9971    1   TOO$MME_READIO: PROC (CONTROLLING, PARAM_ADDR, RETURN_DELTA);

   9971  3 001712   200016 741300       TOO$MME_REA* STX1  ! SERVICE_CODE+2,,AUTO

     1008     9972
     1009     9973    2      DCL 1 CONTROLLING HALIGNED,
     1010     9974    2            2 *                      BIT (12) UNAL,
     1011     9975    2            2 ID                     BIT (6) UNAL ;
     1012     9976    2      DCL PARAM_ADDR                 UBIN HALF HALIGNED ;
     1013     9977    2      DCL RETURN_DELTA               SBIN HALF HALIGNED ;
     1014     9978
     1015     9979    2      DCL PARAM$                     PTR ALIGNED ;
     1016     9980    2      DCL 1 PARAMS BASED ALIGNED,
     1017     9981    2            2 WD1,
     1018     9982    2              3 *                    BIT (18) UNAL,
     1019     9983    2              3 TDPCN                UBIN (18) UNAL,
     1020     9984    2            2 WD2,
     1021     9985    2              3 BUFF_ADDR            UBIN (18) UNAL,
     1022     9986    2              3 *                    BIT (6) UNAL,
     1023     9987    2              3 EXEC_NUM             UBIN (6) UNAL,
     1024     9988    2              3 *                    BIT (6) UNAL,
     1025     9989    2            2 WD3,
     1026     9990    2              3 OPTION               UBIN (18) UNAL,
     1027     9991    2              3 *                    BIT (6) UNAL,
     1028     9992    2              3 TRUE_ID              UBIN (12) UNAL ;
     1029     9993    2      DCL BUFFER$                    PTR ALIGNED ;
     1030     9994    2      DCL 1 BUFFER_PTR REDEF BUFFER$ ALIGNED,
     1031     9995    2            2 ADDRESS                UBIN HALF UNAL,
     1032     9996    2            2 SEGID                  UBIN HALF UNAL ;
     1033     9997    2      DCL 1 BUFFER BASED ALIGNED,
     1034     9998    2            2 BUF_AVAILABLE_FLAG     BIT (1) UNAL,
     1035     9999    2            2 IO_REQ_SERVICED_FLAG   BIT (1) UNAL,
     1036    10000    2            2 READ_FLAG              BIT (1) UNAL,
     1037    10001    2            2 *                      UBIN(18) UNAL,
     1038    10002    2            2 PAD_CHAR               UBIN(6) UNAL,
     1039    10003    2            2 *                      UBIN(6) UNAL,
     1040    10004    2            2 *                      UBIN(3) UNAL,
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:152  
     1041    10005    2            2 *                      UBIN(18) UNAL,
     1042    10006    2            2 *                      UBIN(6) UNAL,
     1043    10007    2            2 *                      UBIN(12) UNAL,
     1044    10008    2            2 CHAR_COUNT             SBIN UNAL,
     1045    10009    2            2 WRITE_DATA             CHAR(7200) CALIGNED,
     1046    10010    2            2 READ_DATA              (0:83) CHAR (1) CALIGNED ;
     1047    10011    2      DCL INDIRECT$                  PTR ALIGNED ;
     1048    10012    2      DCL 1 INDIRECT BASED ALIGNED,
     1049    10013    2            2 *                      UBIN (18) UNAL,
     1050    10014    2            2 ADDRESS                UBIN (18) UNAL ;
     1051    10015    2      DCL TEST_PAGE_READ$            PTR ALIGNED ;
     1052    10016    2      DCL 1 TEST_PAGE_READ           BASED CALIGNED,
     1053    10017    2            2 DATA                   (0:83) UBIN (6) UNAL ;
     1054    10018    2      DCL I                          SBIN HALF HALIGNED ;
     1055    10019           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:153  
     1056    10020        /* Code */
     1057    10021
     1058    10022        /* Initialization */
     1059    10023    2      PARAM$ = PINCRW (IS$, PARAM_ADDR) ;

  10023  3 001713   200020 470500                    LDP0    @PARAM_ADDR,,AUTO
         3 001714   000100 100500                    MLR     fill='000'O
         3 001715   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 001716   200070 000004                    ADSC9   @OUT_LGTH+2,,AUTO        cn=0,n=4
         3 001717   200070 220100                    LDX0    @OUT_LGTH+2,,AUTO
         3 001720   000000 636010                    EAQ     0,X0
         3 001721   000000 036000 2                  ADLQ    FPTN_
         3 001722   200022 756100                    STQ     PARAM$,,AUTO

     1060    10024    2      INDIRECT$ = PINCRW (IS$, PARAM$ -> PARAMS.WD1.TDPCN) ;

  10024  3 001723   200022 471500                    LDP1    PARAM$,,AUTO
         3 001724   100000 720100                    LXL0    0,,PR1
         3 001725   000000 636010                    EAQ     0,X0
         3 001726   000000 036000 2                  ADLQ    FPTN_
         3 001727   200024 756100                    STQ     INDIRECT$,,AUTO

     1061    10025    2      BUFFER_PTR.ADDRESS = PARAM$ -> PARAMS.WD2.BUFF_ADDR ;

  10025  3 001730   100001 222100                    LDX2    1,,PR1
         3 001731   200023 742100                    STX2    BUFFER$,,AUTO

     1062    10026    2      BUFFER_PTR.SEGID = WRITE_BUF_VECTOR.SEGID ;

  10026  3 001732   000063 723000 1                  LXL3    WRITE_BUF_VECTOR+1
         3 001733   007777 363003                    ANX3    4095,DU
         3 001734   200023 443100                    SXL3    BUFFER$,,AUTO

     1063    10027    2      TEST_PAGE_READ$ = PINCRW (IS$, INDIRECT$ -> INDIRECT.ADDRESS + 88) ;

  10027  3 001735   200024 473500                    LDP3    INDIRECT$,,AUTO
         3 001736   300000 724100                    LXL4    0,,PR3
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:154  
         3 001737   000130 636014                    EAQ     88,X4
         3 001740   000000 036000 2                  ADLQ    FPTN_
         3 001741   200025 756100                    STQ     TEST_PAGE_READ$,,AUTO

     1064    10028
     1065    10029        /* Convert TOLTS read data to BCD and store in Test Page Area */
     1066    10030    2      BUFFER$ -> BUFFER.CHAR_COUNT = 84 ;

  10030  3 001742   000124 235007                    LDA     84,DL
         3 001743   200023 474500                    LDP4    BUFFER$,,AUTO
         3 001744   400002 755100                    STA     2,,PR4

     1067    10031    3      DO WHILE (BUFFER$->BUFFER.READ_DATA(BUFFER$->BUFFER.CHAR_COUNT - 1) = ' ');

  10031  3 001745   040000 106505                    CMPC    fill='040'O
         3 001746   403412 600001                    ADSC9   1802,A,PR4               cn=3,n=1
         3 001747   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 001750   001761 601000 3                  TNZ     s:10034

     1068    10032    3         BUFFER$ -> BUFFER.CHAR_COUNT = BUFFER$ -> BUFFER.CHAR_COUNT - 1 ;

  10032  3 001751   200023 470500                    LDP0    BUFFER$,,AUTO
         3 001752   000001 336007                    LCQ     1,DL
         3 001753   000002 056100                    ASQ     2,,PR0

     1069    10033    3      END /* WHILE */ ;

  10033  3 001754   000002 235100                    LDA     2,,PR0
         3 001755   040000 106505                    CMPC    fill='040'O
         3 001756   003412 600001                    ADSC9   1802,A,PR0               cn=3,n=1
         3 001757   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 001760   001751 600000 3                  TZE     s:10032

     1070    10034    2      CALL TOT$ASCII_BCD (BUFFER$ -> BUFFER.READ_DATA,

  10034  3 001761   200023 236100                    LDQ     BUFFER$,,AUTO
         3 001762   000002 036003                    ADLQ    2,DU
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:155  
         3 001763   200072 756100                    STQ     @OUT_LGTH+4,,AUTO
         3 001764   200025 236100                    LDQ     TEST_PAGE_READ$,,AUTO
         3 001765   200071 756100                    STQ     @OUT_LGTH+3,,AUTO
         3 001766   200023 236100                    LDQ     BUFFER$,,AUTO
         3 001767   003413 036003                    ADLQ    1803,DU
         3 001770   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 001771   200070 630500                    EPPR0   @OUT_LGTH+2,,AUTO
         3 001772   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 001773   000000 701000 xent               TSX1    TOT$ASCII_BCD
         3 001774   000000 011000                    NOP     0

     1071    10035    2              TEST_PAGE_READ$ -> TEST_PAGE_READ.DATA,
     1072    10036    2              BUFFER$ -> BUFFER.CHAR_COUNT) ;
     1073    10037    3      DO I = BUFFER$ -> BUFFER.CHAR_COUNT TO 83 ;

  10037  3 001775   200023 470500                    LDP0    BUFFER$,,AUTO
         3 001776   000002 720100                    LXL0    2,,PR0
         3 001777   200026 740100                    STX0    I,,AUTO
         3 002000   002017 710000 3                  TRA     s:10039+3

     1074    10038    3         TEST_PAGE_READ$ -> TEST_PAGE_READ.DATA(I) = BUFFER$ -> BUFFER.PAD_CHAR ;

  10038  3 002001   200026 236100                    LDQ     I,,AUTO
         3 002002   000022 732000                    QRS     18
         3 002003   000006 402007                    MPY     6,DL
         3 002004   000000 116003                    CMPQ    0,DU
         3 002005   002007 605000 3                  TPL     s:10038+6
         3 002006   000044 036003                    ADLQ    36,DU
         3 002007   200023 470500                    LDP0    BUFFER$,,AUTO
         3 002010   200025 471500                    LDP1    TEST_PAGE_READ$,,AUTO
         3 002011   003106 060500                    CSL     bolr='003'O
         3 002012   000000 430006                    BDSC    0,,PR0                   by=2,bit=3,n=6
         3 002013   100000 000006                    BDSC    0,Q,PR1                  by=0,bit=0,n=6

     1075    10039    3      END /* DO */ ;

  10039  3 002014   200026 220100                    LDX0    I,,AUTO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:156  
         3 002015   000001 621010                    EAX1    1,X0
         3 002016   200026 741100                    STX1    I,,AUTO
         3 002017   200026 220100                    LDX0    I,,AUTO
         3 002020   000123 100003                    CMPX0   83,DU
         3 002021   002001 604400 3                  TMOZ    s:10038

     1076    10040
     1077    10041        /* Update the TOLTS buffer to reflect new status */
     1078    10042    2      BUFFER$ -> BUFFER.READ_FLAG = %FALSE ;

  10042  3 002022   000016 236000 4                  LDQ     14
         3 002023   000000 356100                    ANSQ    0,,PR0

     1079    10043    2      BUFFER$ -> BUFFER.BUF_AVAILABLE_FLAG = %FALSE ;

  10043  3 002024   000031 236000 xsym               LDQ     B_VECTNIL+25
         3 002025   000000 356100                    ANSQ    0,,PR0

     1080    10044    2      BUFFER$ -> BUFFER.IO_REQ_SERVICED_FLAG = %FALSE ;

  10044  3 002026   000017 236000 4                  LDQ     15
         3 002027   000000 356100                    ANSQ    0,,PR0

     1081    10045    2      IONUM = IONUM - 1 ;

  10045  3 002030   000060 221000 1                  LDX1    IONUM
         3 002031   777777 622011                    EAX2    -1,X1
         3 002032   000060 742000 1                  STX2    IONUM

     1082    10046    2      RETURN_DELTA = 3 ;

  10046  3 002033   200021 471500                    LDP1    @RETURN_DELTA,,AUTO
         3 002034   000100 101400                    MRL     fill='000'O
         3 002035   000005 000004 xsym               ADSC9   B_VECTNIL+5              cn=0,n=4
         3 002036   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

     1083    10047    2      RETURN;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:157  

  10047  3 002037   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 002040   000001 702211                    TSX2  ! 1,X1

     1084    10048
     1085    10049    2   END TOO$MME_READIO;
     1086    10050        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:158  
     1087    10051        /*I*      NAME:    TOO$MME_SETPR2
     1088    10052                  PURPOSE: USED IN GCOS TO ASSIGN A DEDICATED PRINTER.  PRESENTLY
     1089    10053                           UNUSED IN CP6 TOLTS.  RETURN_DELTA IS SET = 3 FOR REQUEST
     1090    10054                           DENIAL.
     1091    10055        */
     1092    10056
     1093    10057    1   TOO$MME_SETPR2: PROC (RETURN_DELTA);

  10057  3 002041   200016 741300       TOO$MME_SET* STX1  ! SERVICE_CODE+2,,AUTO

     1094    10058
     1095    10059    2      DCL RETURN_DELTA SBIN HALF;
     1096    10060
     1097    10061        /* Code */
     1098    10062
     1099    10063    2      RETURN_DELTA = 3;

  10063  3 002042   000003 220003                    LDX0    3,DU
         3 002043   200017 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 002044   000000 740100                    STX0    0,,PR0

     1100    10064    2      RETURN;

  10064  3 002045   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 002046   000001 702211                    TSX2  ! 1,X1

     1101    10065
     1102    10066    2   END TOO$MME_SETPR2;
     1103    10067        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:159  
     1104    10068        /*I*      NAME:    TOO$MME_SETPRT
     1105    10069                  PURPOSE: USED IN GCOS TO ASSIGN A PRINTER.  THIS ROUTINE IS
     1106    10070                           PRESENTLY UNUSED IN CP6 TOLTS.  RETURN_DELTA IS SET
     1107    10071                           EQUAL TO 3 FOR REQUEST DENIAL.
     1108    10072        */
     1109    10073
     1110    10074    1   TOO$MME_SETPRT: PROC (RETURN_DELTA);

  10074  3 002047   200016 741300       TOO$MME_SET* STX1  ! SERVICE_CODE+2,,AUTO

     1111    10075
     1112    10076    2      DCL RETURN_DELTA SBIN HALF;
     1113    10077
     1114    10078        /* Code */
     1115    10079
     1116    10080    2      RETURN_DELTA = 3;

  10080  3 002050   000003 220003                    LDX0    3,DU
         3 002051   200017 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 002052   000000 740100                    STX0    0,,PR0

     1117    10081    2      RETURN;

  10081  3 002053   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 002054   000001 702211                    TSX2  ! 1,X1

     1118    10082
     1119    10083    2   END TOO$MME_SETPRT;
     1120    10084        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:160  
     1121    10085        /*I*      NAME:    TOO$MME_TADIOD
     1122    10086                  PURPOSE: CALLED BY MME HANDLER TO SERVICE I/O REQUESTS.
     1123    10087                           INCREMENTS NUMBER OF I/O OPERATIONS CURRENTLY ASSIGNED I/O
     1124    10088                           BUFFER(IONUM) BY NUMBER OF REQUESTS PRESENTLY MADE.
     1125    10089                           DENIES ALL I/O REQUESTS IF IONUM>8.
     1126    10090                           CHECKS WRITE WORD COUNT FIELS OF THE 5 I/O PARAMETERS
     1127    10091                           PASSED(REDEFINED AS PARAM(0:4)).  IF ANY ARE >85 THEN ALL
     1128    10092                           I/O REQUESTS MADE ARRE DENIED, RETURN_DELTA IS SET,
     1129    10093                           AND CONTROL RETURNS TO MME HANDLER.
     1130    10094                           ALLOCATES AN AVAILIABLE I/O BUFFER, i.e., BUFFER WITH
     1131    10095                           TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG = 0, AND SETS TOF$IO_
     1132    10096                           BUFFER.BUF_AVAILIABLE_FLAG = 1.  SETS BUF_NUM ACCORDING TO
     1133    10097                           ARRAY INDEX OF I/O BUFFER ALLOCATED.
     1134    10098                           MOVES WRITE_WD_CNT_BCD, AND IO_REQ_BITS FIELDS FROM
     1135    10099                           PARAM(NUM_REQUESTS) TO RESPECTIVE FIELDS IN TOF$$$IO_BUFFER(
     1136    10100                           BUF_NUM). SIMILARLY MOVES TDPCN, PAD_CHAR, EXEC_NUM, AND
     1137    10101                           LID FIELDS FROM CONTROL_CODE  FIELDS TO THE ALLOCATED
     1138    10102                           BUFFER.  MAKES ENTRY OF THE FORM 'IO ' IN OCTAL FORMAT IN
     1139    10103                           IO_BUFFER ALLOCATED.
     1140    10104                           BUILDS POINTER(DCW_LIST_PTR) TO THE BASED VARIABLE DCW_LIST
     1141    10105                           LIST_ENTRY USING DCW LIST_ADDR FIELD CONTAINED IN
     1142    10106                           PARAM(NUM_REQUESTS).  SETS DCW_WORD STRUCTURE EQUAL TO DCW_
     1143    10107                           LIST _ENTRY.
     1144    10108                           DECREMENTS NUM_REQUESTS; INITIALIZES VARIABLES K, M, AND
     1145    10109                           CHECK TO ZERO.
     1146    10110                           INCREMENTS CHECK BY THE WORD COUNT FIELD CONTAINED IN DCW_
     1147    10111                           WORD.
     1148    10112                           SETS VARIABLE K = M. M INDICATES THE NEXT ARRAY ELEMENT
     1149    10113                           POSITION IN WRITE_BUF_BCD_REDEF   INTO WHICH DCW_DATA
     1150    10114                           WORD IS TTO BE MOVED IN THE EVENT THAT THERE ARE
     1151    10115                           MULTIPLE DCW_WORD ENTRIES FOR A SINGLE  I/O REQUEST.
     1152    10116                           MOVES DCW_DATA WORD INTO READ_BUF_BCD_REDEF. INCREMENTS
     1153    10117                           DCW_DATA_PTR TO POINT TO NEXT DCW_DATA WORD.  REPEATS
     1154    10118                           PROCESS UNTIL NUMBER OF WORDS SPECIFIED BY DCW_WORD.
     1155    10119                           WORD_COUNT HAS BEEN MOVED.
     1156    10120                           EVALUATES CODE FIELD IN DCW_WORD.  IF DCW_WORD.CODE = 1 THEN
     1157    10121                           MORE DATA EXISTS FOR THE I/O REQUEST PRESENTLY BEING
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:161  
     1158    10122                           SERVICED.  DCW_LIST_PTR IS INCREMENTED TO POINT TO NEXT
     1159    10123                           DCW_LIST_ENTRY AND DATA IS MOVED AS PREVIOUSLY
     1160    10124                           DESCRIBED.
     1161    10125                           IF DCW_WORD.CODE = 0 THEN ALL DATA HAS BEEN MOVED FOR
     1162    10126                           THIS I/O REQUEST.CHECK IS THEN COMPARED TO WRITE_WD_CNT_BCD
     1163    10127                           FIELD IN PARAMETER(NUM_REQUESTS).  IF THE VARIABLES ARE
     1164    10128                           EQUAL THEN M$XXX IS CALLED TO ABORT PROGRAM.  OTHERWISE
     1165    10129                           TOT$BCD_ASCII IS CALLED TO CONVERT DATA.  CONVERTED DATA
     1166    10130                           IS THEN MOVED INTO PREVIOUSLY ALLOCATED BUFFER.
     1167    10131                           IF IO_REQUESTS REMAIN TO BE SERVICED (i.e., NUM_REQUESTS ~= 0)
     1168    10132                           THEN THE NEXT IO_REQUEST IS SIMILARLY SERVICED.
     1169    10133                           IF NO I/O REQUESTS REMAIN THEN TOO$PROCESS_IO_REQ IS CALLED,
     1170    10134                           CALLED, RETURN_DELTA IS ASSIGNED AND CONTROL RETURNS TO
     1171    10135                           MME HANDLER.
     1172    10136        */
     1173    10137        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:162  
     1174    10138    1   TOO$MME_TADIOD: PROC (IO_CONTROL, NUMBER_OF_REQUESTS,

  10138  3 002055   200016 741300       TOO$MME_TAD* STX1  ! SERVICE_CODE+2,,AUTO

     1175    10139    1              PARAM_0, PARAM_1, PARAM_2, PARAM_3, PARAM_4, RETURN_DELTA);
     1176    10140
     1177    10141    2      DCL BUF_NUM SBIN HALF;
     1178    10142    2      DCL CHECK SBIN HALF;
     1179    10143    2      DCL DCW_DATA SBIN WORD BASED(DCW_DATA_PTR);
     1180    10144    2      DCL 1 DCW_DATA_PTR_FORMAT STATIC,
     1181    10145    2            2 DCW_DATA_ADDR UBIN(18) UNAL,
     1182    10146    2            2 ID UBIN(18) UNAL INIT (%IS_SEGID) ;
     1183    10147    2      DCL DCW_DATA_PTR REDEF DCW_DATA_PTR_FORMAT PTR;
     1184    10148    2      DCL DCW_LIST_ENTRY BIT(36) ALIGNED BASED (DCW_LIST_PTR) ;
     1185    10149    2      DCL 1 DCW_LIST_PTR_FORMAT STATIC,
     1186    10150    2            2 DCW_LIST_ADDR UBIN(18) UNAL,
     1187    10151    2            2 ID UBIN(18) UNAL INIT (%IS_SEGID);
     1188    10152    2      DCL DCW_LIST_PTR REDEF DCW_LIST_PTR_FORMAT PTR;
     1189    10153    2      DCL 1 DCW_WORD,
     1190    10154    2            2 DATA_ADDR UBIN(18) UNAL,
     1191    10155    2            2 CHAR_POSITION UBIN(3) UNAL,
     1192    10156    2            2 * UBIN(1) UNAL,
     1193    10157    2            2 CODE UBIN(2) UNAL,
     1194    10158    2            2 WORD_COUNT UBIN(12) UNAL;
     1195    10159    2      DCL I SBIN HALF;
     1196    10160    2      DCL IO_CONTROL UBIN(36);
     1197    10161    2      DCL 1 CONTROL_CODE REDEF IO_CONTROL,
     1198    10162    2            2 TDPCN UBIN(18) UNAL,
     1199    10163    2            2 PAD_CHAR UBIN(6) UNAL,
     1200    10164    2            2 * UBIN(3) UNAL,
     1201    10165    2            2 EXEC_NUM UBIN(3) UNAL,
     1202    10166    2            2 LID UBIN(6) UNAL;
     1203    10167    2      DCL J SBIN HALF;
     1204    10168    2      DCL K SBIN HALF;
     1205    10169    2      DCL M SBIN HALF;
     1206    10170    2      DCL NUM_REQUESTS UBIN(18);
     1207    10171    2      DCL NUMBER_OF_REQUESTS UBIN (36);
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:163  
     1208    10172    2      DCL 1 NOR REDEF NUMBER_OF_REQUESTS,
     1209    10173    2            2 NO UBIN (18) UNAL,
     1210    10174    2            2 * UBIN (18) UNAL;
     1211    10175    2      DCL PARAM_0 BIT (36) ALIGNED;
     1212    10176    2      DCL PARAM_1 BIT (36) ALIGNED;
     1213    10177    2      DCL PARAM_2 BIT (36) ALIGNED;
     1214    10178    2      DCL PARAM_3 BIT (36) ALIGNED;
     1215    10179    2      DCL PARAM_4 BIT (36) ALIGNED;
     1216    10180    2      DCL 1 PARAMETER(0:4),
     1217    10181    2            2 DCW_LIST_ADDR UBIN(18) UNAL,
     1218    10182    2            2 IO_REQ_BITS UNAL,
     1219    10183    2              3 E UBIN(1) UNAL,
     1220    10184    2              3 R UBIN(1) UNAL,
     1221    10185    2              3 M UBIN(1) UNAL,
     1222    10186    2              3 S UBIN(1) UNAL,
     1223    10187    2              3 C UBIN(1) UNAL,
     1224    10188    2              3 P UBIN(1) UNAL,
     1225    10189    2            2 WRITE_WD_CNT_BCD UBIN(12) UNAL;
     1226    10190    2      DCL RETURN_DELTA SBIN HALF;
     1227    10191    2      DCL RETURN_DELTA_COUNT SBIN HALF;
     1228    10192    2      DCL WRITE_BUF_ASCII(0:7199) CHAR(1) STATIC CALIGNED;
     1229    10193    2      DCL WRITE_BUF_ASCII_REDEF REDEF WRITE_BUF_ASCII CHAR(7200);
     1230    10194    2      DCL WRITE_BUF_BCD(0:7199) UBIN(6) STATIC UNAL;
     1231    10195    2      DCL WRITE_BUF_BCD_REDEF(0:1199) REDEF WRITE_BUF_BCD UBIN(36);
     1232    10196        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:164  
     1233    10197        /* Code */
     1234    10198
     1235    10199    2      NUM_REQUESTS = NOR.NO;

  10199  3 002056   200020 470500                    LDP0    @NUMBER_OF_REQUESTS,,AUTO
         3 002057   000000 220100                    LDX0    0,,PR0
         3 002060   200036 740100                    STX0    NUM_REQUESTS,,AUTO

     1236    10200
     1237    10201    2      RETURN_DELTA_COUNT = NUM_REQUESTS;

  10201  3 002061   200044 740100                    STX0    RETURN_DELTA_COUNT,,AUTO

     1238    10202    2      PARAMETER(0) = PARAM_0;

  10202  3 002062   200021 471500                    LDP1    @PARAM_0,,AUTO
         3 002063   100000 236100                    LDQ     0,,PR1
         3 002064   200037 756100                    STQ     PARAMETER,,AUTO

     1239    10203    2      PARAMETER(1) = PARAM_1;

  10203  3 002065   200022 473500                    LDP3    @PARAM_1,,AUTO
         3 002066   300000 236100                    LDQ     0,,PR3
         3 002067   200040 756100                    STQ     LOAD_OFFSET,,AUTO

     1240    10204    2      PARAMETER(2) = PARAM_2;

  10204  3 002070   200023 474500                    LDP4    @PARAM_2,,AUTO
         3 002071   400000 236100                    LDQ     0,,PR4
         3 002072   200041 756100                    STQ     MAX_LOAD,,AUTO

     1241    10205    2      PARAMETER(3) = PARAM_3;

  10205  3 002073   200024 475500                    LDP5    @PARAM_3,,AUTO
         3 002074   500000 236100                    LDQ     0,,PR5
         3 002075   200042 756100                    STQ     STATUS$,,AUTO

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:165  
     1242    10206    2      PARAMETER(4) = PARAM_4;

  10206  3 002076   200025 476500                    LDP6    @PARAM_4,,AUTO
         3 002077   600000 236100                    LDQ     0,,PR6
         3 002100   200043 756100                    STQ     STATUS$+1,,AUTO

     1243    10207
     1244    10208    2      IONUM = IONUM + NUM_REQUESTS;

  10208  3 002101   200036 235100                    LDA     NUM_REQUESTS,,AUTO
         3 002102   000022 771000                    ARL     18
         3 002103   200070 755100                    STA     @OUT_LGTH+2,,AUTO
         3 002104   000060 236000 1                  LDQ     IONUM
         3 002105   000022 732000                    QRS     18
         3 002106   200070 036100                    ADLQ    @OUT_LGTH+2,,AUTO
         3 002107   000000 622006                    EAX2    0,QL
         3 002110   000060 742000 1                  STX2    IONUM

     1245    10209    2      IF IONUM > 8

  10209  3 002111   000010 102003                    CMPX2   8,DU
         3 002112   002126 604400 3                  TMOZ    s:10215

     1246    10210    3      THEN DO ;

     1247    10211    3              IONUM = IONUM - NUM_REQUESTS;

  10211  3 002113   200070 755100                    STA     @OUT_LGTH+2,,AUTO
         3 002114   000060 236000 1                  LDQ     IONUM
         3 002115   000022 732000                    QRS     18
         3 002116   200070 136100                    SBLQ    @OUT_LGTH+2,,AUTO
         3 002117   000000 623006                    EAX3    0,QL
         3 002120   000060 743000 1                  STX3    IONUM

     1248    10212    3              RETURN_DELTA = 4 + RETURN_DELTA_COUNT;

  10212  3 002121   000004 622010                    EAX2    4,X0
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:166  
         3 002122   200026 477500                    LDP7    @RETURN_DELTA,,AUTO
         3 002123   700000 742100                    STX2    0,,PR7

     1249    10213    3              RETURN ;

  10213  3 002124   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 002125   000001 702211                    TSX2  ! 1,X1

     1250    10214    3           END /* THEN */ ;
     1251    10215    3      ELSE DO I = 0 TO (NUM_REQUESTS-1) BY 1;

  10215  3 002126   000000 223003                    LDX3    0,DU
         3 002127   200032 743100                    STX3    I,,AUTO
         3 002130   002151 710000 3                  TRA     s:10221+3

     1252    10216    3              IF PARAMETER.WRITE_WD_CNT_BCD(I) > 1019

  10216  3 002131   200032 220100                    LDX0    I,,AUTO
         3 002132   200037 236110                    LDQ     PARAMETER,X0,AUTO
         3 002133   007777 376007                    ANQ     4095,DL
         3 002134   001774 116007                    CMPQ    1020,DL
         3 002135   002146 602000 3                  TNC     s:10221

     1253    10217    4              THEN DO ;

     1254    10218    4                      TOO_ERROR_CODE.ERR# = %E$BADMSGSIZE ;

  10218  3 002136   000064 236000 1                  LDQ     TOO_ERROR_CODE
         3 002137   000002 376000 4                  ANQ     2
         3 002140   002610 276007                    ORQ     1416,DL
         3 002141   000064 756000 1                  STQ     TOO_ERROR_CODE

     1255    10219    4                      CALL TOX$ERROR (TOO_ERROR_CODE) ;

  10219  3 002142   000003 630400 4                  EPPR0   3
         3 002143   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002144   000000 701000 xent               TSX1    TOX$ERROR
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:167  
         3 002145   000000 011000                    NOP     0

     1256    10220    4                   END /* THEN */ ;

     1257    10221    3           END /* ELSE */ ;

  10221  3 002146   200032 220100                    LDX0    I,,AUTO
         3 002147   000001 621010                    EAX1    1,X0
         3 002150   200032 741100                    STX1    I,,AUTO
         3 002151   200036 235100                    LDA     NUM_REQUESTS,,AUTO
         3 002152   000022 771000                    ARL     18
         3 002153   200070 755100                    STA     @OUT_LGTH+2,,AUTO
         3 002154   200032 236100                    LDQ     I,,AUTO
         3 002155   000022 732000                    QRS     18
         3 002156   200070 116100                    CMPQ    @OUT_LGTH+2,,AUTO
         3 002157   002131 604000 3                  TMI     s:10216

     1258    10222
     1259    10223    2   ALLOC_IO_BUFFER:
     1260    10224    3      DO I = 0 TO 7 BY 1;

  10224  3 002160   000000 220003       ALLOC_IO_BU* LDX0    0,DU
         3 002161   200032 740100                    STX0    I,,AUTO

     1261    10225    3         IF TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG(I) = 0

  10225  3 002162   200032 236100                    LDQ     I,,AUTO
         3 002163   000022 732000                    QRS     18
         3 002164   003440 402007                    MPY     1824,DL
         3 002165   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002166   000000 236106                    LDQ     0,QL,PR0
         3 002167   400000 316003                    CANQ    -131072,DU
         3 002170   002202 601000 3                  TNZ     s:10231

     1262    10226    4         THEN DO ;

     1263    10227    4                 TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG(I) = 1;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:168  

  10227  3 002171   200032 236100                    LDQ     I,,AUTO
         3 002172   000022 732000                    QRS     18
         3 002173   003440 402007                    MPY     1824,DL
         3 002174   000000 620006                    EAX0    0,QL
         3 002175   400000 236003                    LDQ     -131072,DU
         3 002176   000000 256110                    ORSQ    0,X0,PR0

     1264    10228    4                 BUF_NUM = I;

  10228  3 002177   200032 221100                    LDX1    I,,AUTO
         3 002200   200027 741100                    STX1    BUF_NUM,,AUTO

     1265    10229    4                 GOTO NEXT_ENTRY;

  10229  3 002201   002207 710000 3                  TRA     NEXT_ENTRY

     1266    10230    4              END;
     1267    10231    3      END;

  10231  3 002202   200032 220100                    LDX0    I,,AUTO
         3 002203   000001 621010                    EAX1    1,X0
         3 002204   200032 741100                    STX1    I,,AUTO
         3 002205   000007 101003                    CMPX1   7,DU
         3 002206   002162 604400 3                  TMOZ    s:10225

     1268    10232           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:169  
     1269    10233    2   NEXT_ENTRY:
     1270    10234    2      NUM_REQUESTS = NUM_REQUESTS-1;

  10234  3 002207   200036 220100       NEXT_ENTRY   LDX0    NUM_REQUESTS,,AUTO
         3 002210   777777 622010                    EAX2    -1,X0
         3 002211   200036 742100                    STX2    NUM_REQUESTS,,AUTO

     1271    10235    2      CHECK = 0;

  10235  3 002212   000000 220003                    LDX0    0,DU
         3 002213   200030 740100                    STX0    CHECK,,AUTO

     1272    10236    2      TOO$IO_BUFFER.IO_REQ_BITS(BUF_NUM) = PARAMETER.IO_REQ_BITS(NUM_REQUESTS);

  10236  3 002214   200027 236100                    LDQ     BUF_NUM,,AUTO
         3 002215   000022 732000                    QRS     18
         3 002216   003440 402007                    MPY     1824,DL
         3 002217   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002220   000000 623006                    EAX3    0,QL
         3 002221   200037 236112                    LDQ     PARAMETER,X2,AUTO
         3 002222   000001 676113                    ERQ     1,X3,PR0
         3 002223   770000 376007                    ANQ     -4096,DL
         3 002224   000001 656113                    ERSQ    1,X3,PR0

     1273    10237    2      TOO$IO_BUFFER.WRITE_WD_CNT_BCD(BUF_NUM) =

  10237  3 002225   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002226   200037 236112                    LDQ     PARAMETER,X2,AUTO
         3 002227   000001 676113                    ERQ     1,X3,PR0
         3 002230   007777 376007                    ANQ     4095,DL
         3 002231   000001 656113                    ERSQ    1,X3,PR0

     1274    10238    2              PARAMETER.WRITE_WD_CNT_BCD(NUM_REQUESTS);
     1275    10239    2      TOO$IO_BUFFER.TDPCN(BUF_NUM) = CONTROL_CODE.TDPCN;

  10239  3 002232   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002233   200017 471500                    LDP1    @IO_CONTROL,,AUTO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:170  
         3 002234   100000 236100                    LDQ     0,,PR1
         3 002235   000003 772000                    QRL     3
         3 002236   000000 676113                    ERQ     0,X3,PR0
         3 002237   000020 376000 4                  ANQ     16
         3 002240   000000 656113                    ERSQ    0,X3,PR0

     1276    10240    2      TOO$IO_BUFFER.PAD_CHAR(BUF_NUM) = CONTROL_CODE.PAD_CHAR;

  10240  3 002241   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002242   100000 236100                    LDQ     0,,PR1
         3 002243   000003 772000                    QRL     3
         3 002244   000000 676113                    ERQ     0,X3,PR0
         3 002245   077000 376007                    ANQ     32256,DL
         3 002246   000000 656113                    ERSQ    0,X3,PR0

     1277    10241    2      TOO$IO_BUFFER.EXEC_NUM(BUF_NUM) = CONTROL_CODE.EXEC_NUM;

  10241  3 002247   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002250   100000 236100                    LDQ     0,,PR1
         3 002251   000006 772000                    QRL     6
         3 002252   000000 676113                    ERQ     0,X3,PR0
         3 002253   000007 376007                    ANQ     7,DL
         3 002254   000000 656113                    ERSQ    0,X3,PR0

     1278    10242    2      TOO$IO_BUFFER.LID(BUF_NUM) = CONTROL_CODE.LID;

  10242  3 002255   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002256   100000 236100                    LDQ     0,,PR1
         3 002257   000003 736000                    QLS     3
         3 002260   000000 676113                    ERQ     0,X3,PR0
         3 002261   000770 376007                    ANQ     504,DL
         3 002262   000000 656113                    ERSQ    0,X3,PR0

     1279    10243    2      TOO$IO_BUFFER.IO_ENTRY(BUF_NUM) = '314620'O;

  10243  3 002263   314620 224003                    LDX4    104848,DU
         3 002264   000001 470400 xsym               LDP0    TOT$DMC+1
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:171  
         3 002265   000001 744113                    STX4    1,X3,PR0

     1280    10244
     1281    10245    2      DCW_LIST_PTR_FORMAT.DCW_LIST_ADDR = PARAMETER.DCW_LIST_ADDR(NUM_REQUESTS);

  10245  3 002266   200037 225112                    LDX5    PARAMETER,X2,AUTO
         3 002267   000137 745000 1                  STX5    DCW_LIST_PTR_FORMAT

     1282    10246
     1283    10247    2      K = 0;

  10247  3 002270   200034 740100                    STX0    K,,AUTO

     1284    10248    2      M = 0;

  10248  3 002271   200035 740100                    STX0    M,,AUTO

     1285    10249    2   NEXT_DCW_WD:
     1286    10250    2      DCW_WORD = DCW_LIST_ENTRY;

  10250  3 002272   000137 470400 1     NEXT_DCW_WD  LDP0    DCW_LIST_PTR_FORMAT
         3 002273   000000 236100                    LDQ     0,,PR0
         3 002274   200031 756100                    STQ     DCW_WORD,,AUTO

     1287    10251    2      CHECK = CHECK + DCW_WORD.WORD_COUNT;

  10251  3 002275   200031 236100                    LDQ     DCW_WORD,,AUTO
         3 002276   007777 376007                    ANQ     4095,DL
         3 002277   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 002300   200030 236100                    LDQ     CHECK,,AUTO
         3 002301   000022 732000                    QRS     18
         3 002302   200070 036100                    ADLQ    @OUT_LGTH+2,,AUTO
         3 002303   000000 620006                    EAX0    0,QL
         3 002304   200030 740100                    STX0    CHECK,,AUTO

     1288    10252    2      DCW_DATA_PTR_FORMAT.DCW_DATA_ADDR = DCW_WORD.DATA_ADDR;

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:172  
  10252  3 002305   200031 221100                    LDX1    DCW_WORD,,AUTO
         3 002306   000136 741000 1                  STX1    DCW_DATA_PTR_FORMAT

     1289    10253
     1290    10254    2      K = M;

  10254  3 002307   200035 222100                    LDX2    M,,AUTO
         3 002310   200034 742100                    STX2    K,,AUTO

     1291    10255    3      DO J = K TO (K + DCW_WORD.WORD_COUNT-1) BY 1;

  10255  3 002311   200033 742100                    STX2    J,,AUTO
         3 002312   002325 710000 3                  TRA     s:10259+1

     1292    10256    3         WRITE_BUF_BCD_REDEF(J) = DCW_DATA;

  10256  3 002313   000136 470400 1                  LDP0    DCW_DATA_PTR_FORMAT
         3 002314   000000 235100                    LDA     0,,PR0
         3 002315   200033 220100                    LDX0    J,,AUTO
         3 002316   003550 755010 1                  STA     WRITE_BUF_BCD,X0

     1293    10257    3         M = J + 1;

  10257  3 002317   000001 621010                    EAX1    1,X0
         3 002320   200035 741100                    STX1    M,,AUTO

     1294    10258    3         DCW_DATA_PTR = PINCRW(DCW_DATA_PTR, 1);

  10258  3 002321   000136 236000 1                  LDQ     DCW_DATA_PTR_FORMAT
         3 002322   000001 036003                    ADLQ    1,DU
         3 002323   000136 756000 1                  STQ     DCW_DATA_PTR_FORMAT

     1295    10259    3      END;

  10259  3 002324   200033 741100                    STX1    J,,AUTO
         3 002325   200031 236100                    LDQ     DCW_WORD,,AUTO
         3 002326   007777 376007                    ANQ     4095,DL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:173  
         3 002327   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 002330   200034 236100                    LDQ     K,,AUTO
         3 002331   000022 732000                    QRS     18
         3 002332   200070 036100                    ADLQ    @OUT_LGTH+2,,AUTO
         3 002333   200071 756100                    STQ     @OUT_LGTH+3,,AUTO
         3 002334   200033 236100                    LDQ     J,,AUTO
         3 002335   000022 732000                    QRS     18
         3 002336   200071 116100                    CMPQ    @OUT_LGTH+3,,AUTO
         3 002337   002313 604000 3                  TMI     s:10256

     1296    10260           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:174  
     1297    10261    3      DO CASE (DCW_WORD.CODE);

  10261  3 002340   200031 236100                    LDQ     DCW_WORD,,AUTO
         3 002341   000014 772000                    QRL     12
         3 002342   000003 376007                    ANQ     3,DL
         3 002343   000002 116007                    CMPQ    2,DL
         3 002344   002346 602006 3                  TNC     s:10261+6,QL
         3 002345   002444 710000 3                  TRA     s:10284
         3 002346   002350 710000 3                  TRA     s:10263
         3 002347   002440 710000 3                  TRA     s:10281

     1298    10262    3         CASE (0);

     1299    10263    3            IF CHECK ~= PARAMETER.WRITE_WD_CNT_BCD(NUM_REQUESTS)

  10263  3 002350   200036 220100                    LDX0    NUM_REQUESTS,,AUTO
         3 002351   200037 236110                    LDQ     PARAMETER,X0,AUTO
         3 002352   007777 376007                    ANQ     4095,DL
         3 002353   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 002354   200030 236100                    LDQ     CHECK,,AUTO
         3 002355   000022 732000                    QRS     18
         3 002356   200070 116100                    CMPQ    @OUT_LGTH+2,,AUTO
         3 002357   002371 600000 3                  TZE     s:10269

     1300    10264    4            THEN DO ;

     1301    10265    4                    TOO_ERROR_CODE.ERR# = %E$BADWORDCT ;

  10265  3 002360   000064 236000 1                  LDQ     TOO_ERROR_CODE
         3 002361   000002 376000 4                  ANQ     2
         3 002362   002700 276007                    ORQ     1472,DL
         3 002363   000064 756000 1                  STQ     TOO_ERROR_CODE

     1302    10266    4                    CALL TOX$ERROR (TOO_ERROR_CODE) ;

  10266  3 002364   000003 630400 4                  EPPR0   3
         3 002365   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:175  
         3 002366   000000 701000 xent               TSX1    TOX$ERROR
         3 002367   000000 011000                    NOP     0

     1303    10267    4                 END /* THEN */ ;

  10267  3 002370   002427 710000 3                  TRA     s:10274

     1304    10268    4            ELSE DO;

     1305    10269    4                    CHAR_COUNT = TOO$IO_BUFFER.WRITE_WD_CNT_BCD(BUF_NUM) * 6;

  10269  3 002371   200027 236100                    LDQ     BUF_NUM,,AUTO
         3 002372   000022 732000                    QRS     18
         3 002373   003440 402007                    MPY     1824,DL
         3 002374   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002375   000001 236106                    LDQ     1,QL,PR0
         3 002376   007777 376007                    ANQ     4095,DL
         3 002377   000006 402007                    MPY     6,DL
         3 002400   200007 756100                    STQ     CHAR_COUNT,,AUTO

     1306    10270    4                    CALL TOT$BCD_ASCII(WRITE_BUF_BCD, WRITE_BUF_ASCII, CHAR_COUNT);

  10270  3 002401   200007 631500                    EPPR1   CHAR_COUNT,,AUTO
         3 002402   200072 451500                    STP1    @OUT_LGTH+4,,AUTO
         3 002403   000022 237000 4                  LDAQ    18
         3 002404   200070 757100                    STAQ    @OUT_LGTH+2,,AUTO
         3 002405   200070 630500                    EPPR0   @OUT_LGTH+2,,AUTO
         3 002406   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 002407   000000 701000 xent               TSX1    TOT$BCD_ASCII
         3 002410   000000 011000                    NOP     0

     1307    10271    4                    TOO$IO_BUFFER.CHAR_COUNT(BUF_NUM) = CHAR_COUNT;

  10271  3 002411   200027 236100                    LDQ     BUF_NUM,,AUTO
         3 002412   000022 732000                    QRS     18
         3 002413   003440 402007                    MPY     1824,DL
         3 002414   000001 470400 xsym               LDP0    TOT$DMC+1
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:176  
         3 002415   200007 235100                    LDA     CHAR_COUNT,,AUTO
         3 002416   000002 755106                    STA     2,QL,PR0

     1308    10272    4                    TOO$IO_BUFFER.WRITE_DATA(BUF_NUM) = WRITE_BUF_ASCII_REDEF;

  10272  3 002417   200027 236100                    LDQ     BUF_NUM,,AUTO
         3 002420   000022 732000                    QRS     18
         3 002421   016200 402007                    MPY     7296,DL
         3 002422   016040 220003                    LDX0    7200,DU
         3 002423   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002424   040146 100440                    MLR     fill='040'O
         3 002425   000140 000010 1                  ADSC9   WRITE_BUF_ASCII          cn=0,n=*X0
         3 002426   000003 000010                    ADSC9   3,Q,PR0                  cn=0,n=*X0

     1309    10273    4                 END;

     1310    10274    3            IF NUM_REQUESTS ~= 0

  10274  3 002427   200036 220100                    LDX0    NUM_REQUESTS,,AUTO
         3 002430   002160 601000 3                  TNZ     ALLOC_IO_BUFFER

     1311    10275    3            THEN GOTO ALLOC_IO_BUFFER;
     1312    10276    4            ELSE DO;

     1313    10277    4                    CALL TOO$PROCESS_IO_REQ;

  10277  3 002431   002446 701000 3                  TSX1    TOO$PROCESS_IO_REQ
         3 002432   000000 011000                    NOP     0

     1314    10278    4                    RETURN_DELTA = 5 + RETURN_DELTA_COUNT;

  10278  3 002433   200044 220100                    LDX0    RETURN_DELTA_COUNT,,AUTO
         3 002434   000005 621010                    EAX1    5,X0
         3 002435   200026 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 002436   000000 741100                    STX1    0,,PR0

     1315    10279    4                 END;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:177  

  10279  3 002437   002444 710000 3                  TRA     s:10284

     1316    10280    3         CASE (1);

     1317    10281    3            DCW_LIST_PTR = PINCRW(DCW_LIST_PTR, 1);

  10281  3 002440   000137 236000 1                  LDQ     DCW_LIST_PTR_FORMAT
         3 002441   000001 036003                    ADLQ    1,DU
         3 002442   000137 756000 1                  STQ     DCW_LIST_PTR_FORMAT

     1318    10282    3            GOTO NEXT_DCW_WD;

  10282  3 002443   002272 710000 3                  TRA     NEXT_DCW_WD

     1319    10283    3      END /* CASE */ ;

     1320    10284    2      RETURN;

  10284  3 002444   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 002445   000001 702211                    TSX2  ! 1,X1

     1321    10285
     1322    10286        /* END TOO$MME_TADIOD */
     1323    10287        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:178  
     1324    10288        /*I*      NAME:    TOO$PROCESS_IO_REQ
     1325    10289                  PURPOSE: CALLED BY TOO$MME_TADIOD TO PROCESS IO REQUESTS
     1326    10290                           CURRENTLY IN TOO$IO_BUFFER STRUCTURE.
     1327    10291                           FINDS BUFFER WITH I/O REQUEST WHICH HASN'T BEEN SERVICED
     1328    10292                           AND SET IO_REQ_SERVICED_FLAG = 1.
     1329    10293                           VERIFIES THAT LID FOR THIS REQUEST IS VALID.  IF NOT
     1330    10294                           VALID THEN REQUEST IS NOT PROCESSED.
     1331    10295                           CALLS TOF$ERROR_MSG TO OUTPUT MESSAGE IF E, S, OR
     1332    10296                           P I/O REQUEST BITS ARE SET.  IF ANY OF THESE BITS
     1333    10297                           ARE SET THEN REQUEST IS NOT PROCESSED.
     1334    10298                           (9/17/85 KEL) If M bit is set, sets C bit and clears M.
     1335    10299                           IF R BIT IS SET THEN SETS TOO$IO_BUFFER.READ_FLAG = 1,
     1336    10300                           AND CALLS TOO$SERVICE_W_R_REQ.
     1337    10301                           IF C BIT IS SET THEN C BIT IS RESET AND TOO$SERVICE_WRITE
     1338    10302                           _REQUEST IS CALLED.
     1339    10303                           PROCESS IS REPEATED UNTIL ALL I/O BUFFERS HAVE BEEN
     1340    10304                           SERVICED.
     1341    10305                           RETURNS BACK TO TOO$MME_TADIOD.
     1342    10306        */
     1343    10307        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:179  
     1344    10308    2   TOO$PROCESS_IO_REQ: PROC;

  10308  3 002446   200046 741300       TOO$PROCESS* STX1  ! LOAD_ADDR_MATCH,,AUTO

     1345    10309
     1346    10310    3      DCL I SBIN HALF STATIC INIT (-1);
     1347    10311    3      DCL TEMP_LID UBIN(18);
     1348    10312
     1349    10313        /* Code */
     1350    10314
     1351    10315    3      I = -1;

  10315  3 002447   777777 220003                    LDX0    -1,DU
         3 002450   006030 740000 1                  STX0    I

     1352    10316
     1353    10317    3   START_LOOP:
     1354    10318    3      IF I = 7 THEN RETURN ;

  10318  3 002451   006030 220000 1     START_LOOP   LDX0    I
         3 002452   000007 100003                    CMPX0   7,DU
         3 002453   002456 601000 3                  TNZ     s:10319

  10318  3 002454   200046 221300                    LDX1  ! LOAD_ADDR_MATCH,,AUTO
         3 002455   000001 702211                    TSX2  ! 1,X1

     1355    10319    3      I = I+1;

  10319  3 002456   000001 621010                    EAX1    1,X0
         3 002457   006030 741000 1                  STX1    I

     1356    10320
     1357    10321    3      IF TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG(I) = 0

  10321  3 002460   006030 236000 1                  LDQ     I
         3 002461   000022 732000                    QRS     18
         3 002462   003440 402007                    MPY     1824,DL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:180  
         3 002463   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002464   000000 236106                    LDQ     0,QL,PR0
         3 002465   400000 316003                    CANQ    -131072,DU
         3 002466   002451 600000 3                  TZE     START_LOOP

     1358    10322    3      THEN GOTO START_LOOP;
     1359    10323
     1360    10324    3      IF TOO$IO_BUFFER.IO_REQ_SERVICED_FLAG(I) = 1

  10324  3 002467   006030 236000 1                  LDQ     I
         3 002470   000022 732000                    QRS     18
         3 002471   003440 402007                    MPY     1824,DL
         3 002472   000000 236106                    LDQ     0,QL,PR0
         3 002473   200000 376003                    ANQ     65536,DU
         3 002474   200000 116003                    CMPQ    65536,DU
         3 002475   002451 600000 3                  TZE     START_LOOP

     1361    10325    3      THEN GOTO START_LOOP;
     1362    10326
     1363    10327    3      TOO$IO_BUFFER.IO_REQ_SERVICED_FLAG(I) = 1;

  10327  3 002476   006030 236000 1                  LDQ     I
         3 002477   000022 732000                    QRS     18
         3 002500   003440 402007                    MPY     1824,DL
         3 002501   000000 620006                    EAX0    0,QL
         3 002502   200000 236003                    LDQ     65536,DU
         3 002503   000000 256110                    ORSQ    0,X0,PR0

     1364    10328    3      TEMP_LID = TOO$IO_BUFFER.LID(I);

  10328  3 002504   006030 236000 1                  LDQ     I
         3 002505   000022 732000                    QRS     18
         3 002506   003440 402007                    MPY     1824,DL
         3 002507   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002510   000000 236106                    LDQ     0,QL,PR0
         3 002511   000003 772000                    QRL     3
         3 002512   000077 376007                    ANQ     63,DL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:181  
         3 002513   000000 620006                    EAX0    0,QL
         3 002514   200047 740100                    STX0    TEMP_LID,,AUTO

     1365    10329
     1366    10330    3      IF(TOO$IO_BUFFER.IO_REQ_BITS.E(I) = 1)|

  10330  3 002515   400000 221003                    LDX1    -131072,DU
         3 002516   006030 236000 1                  LDQ     I
         3 002517   000022 732000                    QRS     18
         3 002520   003440 402007                    MPY     1824,DL
         3 002521   000001 236106                    LDQ     1,QL,PR0
         3 002522   400000 376007                    ANQ     -131072,DL
         3 002523   400000 116007                    CMPQ    -131072,DL
         3 002524   002526 600000 3                  TZE     s:10330+9
         3 002525   000000 221003                    LDX1    0,DU
         3 002526   400000 222003                    LDX2    -131072,DU
         3 002527   006030 236000 1                  LDQ     I
         3 002530   000022 732000                    QRS     18
         3 002531   003440 402007                    MPY     1824,DL
         3 002532   000001 236106                    LDQ     1,QL,PR0
         3 002533   040000 376007                    ANQ     16384,DL
         3 002534   040000 116007                    CMPQ    16384,DL
         3 002535   002537 600000 3                  TZE     s:10330+18
         3 002536   000000 222003                    LDX2    0,DU
         3 002537   000000 636012                    EAQ     0,X2
         3 002540   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 002541   000000 636011                    EAQ     0,X1
         3 002542   200070 276100                    ORQ     @OUT_LGTH+2,,AUTO
         3 002543   400000 221003                    LDX1    -131072,DU
         3 002544   200071 756100                    STQ     @OUT_LGTH+3,,AUTO
         3 002545   006030 236000 1                  LDQ     I
         3 002546   000022 732000                    QRS     18
         3 002547   003440 402007                    MPY     1824,DL
         3 002550   000001 236106                    LDQ     1,QL,PR0
         3 002551   010000 376007                    ANQ     4096,DL
         3 002552   010000 116007                    CMPQ    4096,DL
         3 002553   002555 600000 3                  TZE     s:10330+32
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:182  
         3 002554   000000 221003                    LDX1    0,DU
         3 002555   000000 636011                    EAQ     0,X1
         3 002556   200071 276100                    ORQ     @OUT_LGTH+3,,AUTO
         3 002557   002570 600000 3                  TZE     s:10338

     1367    10331    3              (TOO$IO_BUFFER.IO_REQ_BITS.S(I) = 1)|
     1368    10332    3              (TOO$IO_BUFFER.IO_REQ_BITS.P(I) = 1)
     1369    10333    4      THEN DO ;

     1370    10334    4              TOO_ERROR_CODE.ERR# = %E$BADIOBITS ;

  10334  3 002560   000064 236000 1                  LDQ     TOO_ERROR_CODE
         3 002561   000002 376000 4                  ANQ     2
         3 002562   002630 276007                    ORQ     1432,DL
         3 002563   000064 756000 1                  STQ     TOO_ERROR_CODE

     1371    10335    4              CALL TOX$ERROR (TOO_ERROR_CODE) ;

  10335  3 002564   000003 630400 4                  EPPR0   3
         3 002565   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002566   000000 701000 xent               TSX1    TOX$ERROR
         3 002567   000000 011000                    NOP     0

     1372    10336    4           END /* THEN */ ;

     1373    10337           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:183  
     1374    10338    3      IF TOO$IO_BUFFER.IO_REQ_BITS.R(I) = 1

  10338  3 002570   006030 236000 1                  LDQ     I
         3 002571   000022 732000                    QRS     18
         3 002572   003440 402007                    MPY     1824,DL
         3 002573   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002574   000001 236106                    LDQ     1,QL,PR0
         3 002575   200000 376007                    ANQ     65536,DL
         3 002576   200000 116007                    CMPQ    65536,DL
         3 002577   002622 601000 3                  TNZ     s:10345

     1375    10339    4      THEN DO;

     1376    10340    4              TOO$IO_BUFFER.READ_FLAG(I) = 1;

  10340  3 002600   006030 236000 1                  LDQ     I
         3 002601   000022 732000                    QRS     18
         3 002602   003440 402007                    MPY     1824,DL
         3 002603   000000 620006                    EAX0    0,QL
         3 002604   100000 236003                    LDQ     32768,DU
         3 002605   000000 256110                    ORSQ    0,X0,PR0

     1377    10341    4              TOO$IO_BUFFER.IO_REQ_BITS.R(I) = 0;

  10341  3 002606   006030 236000 1                  LDQ     I
         3 002607   000022 732000                    QRS     18
         3 002610   003440 402007                    MPY     1824,DL
         3 002611   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002612   000000 620006                    EAX0    0,QL
         3 002613   000021 236000 4                  LDQ     17
         3 002614   000001 356110                    ANSQ    1,X0,PR0

     1378    10342    4              CALL TOO$SERVICE_W_R_REQ(I);

  10342  3 002615   000024 236000 4                  LDQ     20
         3 002616   200051 756100                    STQ     NUMBER_DCWS+1,,AUTO
         3 002617   003264 701000 3                  TSX1    TOO$SERVICE_W_R_REQ
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:184  
         3 002620   000000 011000                    NOP     0

     1379    10343    4              GOTO START_LOOP;

  10343  3 002621   002451 710000 3                  TRA     START_LOOP

     1380    10344    4           END;
     1381    10345    3      ELSE IF (TOO$IO_BUFFER.IO_REQ_BITS.C(I) = 1)|

  10345  3 002622   400000 220003                    LDX0    -131072,DU
         3 002623   006030 236000 1                  LDQ     I
         3 002624   000022 732000                    QRS     18
         3 002625   003440 402007                    MPY     1824,DL
         3 002626   000001 236106                    LDQ     1,QL,PR0
         3 002627   020000 376007                    ANQ     8192,DL
         3 002630   020000 116007                    CMPQ    8192,DL
         3 002631   002633 600000 3                  TZE     s:10345+9
         3 002632   000000 220003                    LDX0    0,DU
         3 002633   400000 221003                    LDX1    -131072,DU
         3 002634   006030 236000 1                  LDQ     I
         3 002635   000022 732000                    QRS     18
         3 002636   003440 402007                    MPY     1824,DL
         3 002637   000001 236106                    LDQ     1,QL,PR0
         3 002640   100000 376007                    ANQ     32768,DL
         3 002641   100000 116007                    CMPQ    32768,DL
         3 002642   002644 600000 3                  TZE     s:10345+18
         3 002643   000000 221003                    LDX1    0,DU
         3 002644   000000 636011                    EAQ     0,X1
         3 002645   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 002646   000000 636010                    EAQ     0,X0
         3 002647   200070 276100                    ORQ     @OUT_LGTH+2,,AUTO
         3 002650   002673 600000 3                  TZE     s:10353

     1382    10346    3                 (TOO$IO_BUFFER.IO_REQ_BITS.M(I) = 1)
     1383    10347    4         THEN DO;

     1384    10348    4                 TOO$IO_BUFFER.IO_REQ_BITS.C(I) = 0;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:185  

  10348  3 002651   006030 236000 1                  LDQ     I
         3 002652   000022 732000                    QRS     18
         3 002653   003440 402007                    MPY     1824,DL
         3 002654   000000 620006                    EAX0    0,QL
         3 002655   000025 236000 4                  LDQ     21
         3 002656   000001 356110                    ANSQ    1,X0,PR0

     1385    10349    4                 TOO$IO_BUFFER.IO_REQ_BITS.M(I) = 0;

  10349  3 002657   006030 236000 1                  LDQ     I
         3 002660   000022 732000                    QRS     18
         3 002661   003440 402007                    MPY     1824,DL
         3 002662   000001 470400 xsym               LDP0    TOT$DMC+1
         3 002663   000000 620006                    EAX0    0,QL
         3 002664   000026 236000 4                  LDQ     22
         3 002665   000001 356110                    ANSQ    1,X0,PR0

     1386    10350    4                 CALL TOO$SERVICE_WRITE_REQ(I);

  10350  3 002666   000024 236000 4                  LDQ     20
         3 002667   200051 756100                    STQ     NUMBER_DCWS+1,,AUTO
         3 002670   002675 701000 3                  TSX1    TOO$SERVICE_WRITE_REQ
         3 002671   000000 011000                    NOP     0

     1387    10351    4                 GOTO START_LOOP;

  10351  3 002672   002451 710000 3                  TRA     START_LOOP

     1388    10352    4              END;
     1389    10353    3      RETURN;

  10353  3 002673   200046 221300                    LDX1  ! LOAD_ADDR_MATCH,,AUTO
         3 002674   000001 702211                    TSX2  ! 1,X1

     1390    10354
     1391    10355    3   END TOO$PROCESS_IO_REQ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:186  
     1392    10356        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:187  
     1393    10357        /*I*      NAME:    TOO$SERVICE_WRITE_REQ
     1394    10358                  PURPOSE: CALLED BY TOO$MME_TADIOD TO SERVICED WRITE REQUEST.
     1395    10359                           SETS BOUNDS IN WRITE_BUF_VECTOR.
     1396    10360                           SPECIFIES WAIT WRITE OPTION FOR WRITE I/O FPT.
     1397    10361                           FRAMES WRITE DATA AREA IN I/O BUFFER WITH PREVIOUSLY
     1398    10362                           BUILT VECTOR.
     1399    10363                           CALLS TOT$CONSOLE_OUT TO DO OUTPUT.
     1400    10364                           RETURNS TO TOO$PROCESS_IO_REQ.
     1401    10365        */
     1402    10366
     1403    10367    2   TOO$SERVICE_WRITE_REQ: PROC (BUF_NUM);

  10367  3 002675   200050 741300       TOO$SERVICE* STX1  ! NUMBER_DCWS,,AUTO

     1404    10368
     1405    10369    3      DCL BUF_ADDR PTR;
     1406    10370    3      DCL 1 BUF_ADDR_FORMAT REDEF BUF_ADDR,
     1407    10371    3            2 BASE UBIN(18) UNAL,
     1408    10372    3            2 SEGID UBIN(18) UNAL;
     1409    10373    3      DCL BUF_NUM SBIN HALF;
     1410    10374    3      DCL SERVICE_TYPE UBIN WORD ALIGNED ;
     1411    10375
     1412    10376        /* Code */
     1413    10377
     1414    10378    3      SERVICE_TYPE = %WRITE ;

  10378  3 002676   000001 235007                    LDA     1,DL
         3 002677   200053 755100                    STA     SERVICE_TYPE,,AUTO

     1415    10379    3      BUF_ADDR = ADDR(TOO$IO_BUFFER.WRITE_DATA(BUF_NUM));

  10379  3 002700   200051 470500                    LDP0    @BUF_NUM,,AUTO
         3 002701   000000 236100                    LDQ     0,,PR0
         3 002702   000022 732000                    QRS     18
         3 002703   003440 402007                    MPY     1824,DL
         3 002704   000022 736000                    QLS     18
         3 002705   000003 036003                    ADLQ    3,DU
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:188  
         3 002706   000001 036000 xsym               ADLQ    TOT$DMC+1
         3 002707   200052 756100                    STQ     BUF_ADDR,,AUTO

     1416    10380    3      WRITE_BUF_VECTOR.BASE = BUF_ADDR_FORMAT.BASE;

  10380  3 002710   200052 220100                    LDX0    BUF_ADDR,,AUTO
         3 002711   000063 740000 1                  STX0    WRITE_BUF_VECTOR+1

     1417    10381    3      WRITE_BUF_VECTOR.SEGID = BUF_ADDR_FORMAT.SEGID ;

  10381  3 002712   200052 236100                    LDQ     BUF_ADDR,,AUTO
         3 002713   000063 752003 1                  STCQ    WRITE_BUF_VECTOR+1,'03'O

     1418    10382    3      WRITE_BUF_VECTOR.BOUNDS = TOO$IO_BUFFER.CHAR_COUNT(BUF_NUM) - 1;

  10382  3 002714   000000 236100                    LDQ     0,,PR0
         3 002715   000022 732000                    QRS     18
         3 002716   003440 402007                    MPY     1824,DL
         3 002717   000001 471400 xsym               LDP1    TOT$DMC+1
         3 002720   100002 236106                    LDQ     2,QL,PR1
         3 002721   000001 136007                    SBLQ    1,DL
         3 002722   000020 736000                    QLS     16
         3 002723   000062 676000 1                  ERQ     WRITE_BUF_VECTOR
         3 002724   000034 376000 xsym               ANQ     B_VECTNIL+28
         3 002725   000062 656000 1                  ERSQ    WRITE_BUF_VECTOR

     1419    10383    3      CALL TOO$BREAK_MESSAGE (SERVICE_TYPE, BUF_ADDR) ;

  10383  3 002726   200052 633500                    EPPR3   BUF_ADDR,,AUTO
         3 002727   200056 453500                    STP3    @BUF_INDEX+1,,AUTO
         3 002730   200053 634500                    EPPR4   SERVICE_TYPE,,AUTO
         3 002731   200055 454500                    STP4    BUF_ADDR+2,,AUTO
         3 002732   002742 701000 3                  TSX1    TOO$BREAK_MESSAGE
         3 002733   000000 011000                    NOP     0

     1420    10384    3      CALL TOO$COURTESY_CALL(BUF_NUM);

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:189  
  10384  3 002734   200051 236100                    LDQ     @BUF_NUM,,AUTO
         3 002735   200055 756100                    STQ     BUF_ADDR+2,,AUTO
         3 002736   003471 701000 3                  TSX1    TOO$COURTESY_CALL
         3 002737   000000 011000                    NOP     0

     1421    10385    3      RETURN;

  10385  3 002740   200050 221300                    LDX1  ! NUMBER_DCWS,,AUTO
         3 002741   000001 702211                    TSX2  ! 1,X1

     1422    10386
     1423    10387    3   END TOO$SERVICE_WRITE_REQ;
     1424    10388        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:190  
     1425    10389        /*I* NAME:         TOO$BREAK_MESSAGE
     1426    10390             CALL:         CALL TOO$BREAK_MESSAGE (SERVICE_TYPE) ;
     1427    10391             INTERFACE:    INDEX library subroutine
     1428    10392                           TOT$CONSOLE_OUT
     1429    10393             INPUT:        Long message to be printed
     1430    10394             OUTPUT:       Small subsets of the long message
     1431    10395             DESCRIPTION:  Takes a long ASCII string of text from a subexec
     1432    10396                           and breaks in up into many little messages at
     1433    10397                           each CRLF because CP-6 cannot handle terminal
     1434    10398                           messages greater than 120 bytes in length, and the
     1435    10399                           messages from the subexecs far exceed that limit.
     1436    10400
     1437    10401                           See the code itself for details on how the message
     1438    10402                           string is broken up.
     1439    10403        */
     1440    10404
     1441    10405    2   TOO$BREAK_MESSAGE: PROC (SERVICE_TYPE, MSG$) ;

  10405  3 002742   200054 741300       TOO$BREAK_M* STX1  ! BUF_ADDR+1,,AUTO

     1442    10406
     1443    10407    3      DCL 1 CRLF_ CONSTANT CALIGNED,
     1444    10408    3            2 CR CHAR(1) UNAL INIT (BITASC('015'O)),
     1445    10409    3            2 LF CHAR(1) UNAL INIT (BITASC('012'O));
     1446    10410    3      DCL CRLF REDEF CRLF_ CHAR(2) CALIGNED ;
     1447    10411    3      DCL CRLF_INDEX UBIN (36) ALIGNED ;
     1448    10412    3      DCL MESSAGE CHAR(7200) BASED CALIGNED;
     1449    10413    3      DCL MESSAGE_ (0:7199) CHAR (1) BASED CALIGNED ;
     1450    10414    3      DCL MESSAGE_SIZE UBIN(36);
     1451    10415    3      DCL MSG$ PTR ALIGNED ;
     1452    10416    3      DCL MSG_START_INDEX UBIN (36) ALIGNED ;
     1453    10417    3      DCL MSG_LGTH        UBIN (36) ;
     1454    10418    3      DCL OUT_LGTH        UBIN (36) ;
     1455    10419    3      DCL SERVICE_TYPE UBIN WORD ALIGNED ;
     1456    10420           %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:191  
     1457    10421        /* Code */
     1458    10422
     1459    10423    3      MESSAGE_SIZE = WRITE_BUF_VECTOR.BOUNDS + 1 ;

  10423  3 002743   000062 236000 1                  LDQ     WRITE_BUF_VECTOR
         3 002744   000020 772000                    QRL     16
         3 002745   000001 036007                    ADLQ    1,DL
         3 002746   200060 756100                    STQ     MESSAGE_SIZE,,AUTO

     1460    10424
     1461    10425           /* Get first non CRLF character to print */
     1462    10426    3      MSG_START_INDEX = 0 ;

  10426  3 002747   200061 450100                    STZ     MSG_START_INDEX,,AUTO

     1463    10427    3      CALL INDEX (CRLF_INDEX,

  10427  3 002750   200056 470500                    LDP0    @MSG$,,AUTO
         3 002751   000000 471500                    LDP1    0,,PR0
         3 002752   200061 720100                    LXL0    MSG_START_INDEX,,AUTO
         3 002753   761737 620010                    EAX0    -7201,X0
         3 002754   777777 660003                    ERX0    -1,DU
         3 002755   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 002756   200061 235100                    LDA     MSG_START_INDEX,,AUTO
         3 002757   000000 120545                    SCD
         3 002760   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         3 002761   000001 000002 2                  ADSC9   CRLF_                    cn=0,n=2
         3 002762   200057 000100                    ARG     CRLF_INDEX,,AUTO
         3 002763   200057 056100                    ASQ     CRLF_INDEX,,AUTO
         3 002764   002766 607000 3                  TTF     s:10431
         3 002765   200057 054100                    AOS     CRLF_INDEX,,AUTO

     1464    10428    3              CRLF,
     1465    10429    3              MSG$ -> MESSAGE,
     1466    10430    3              MSG_START_INDEX) ;
     1467    10431    4      DO WHILE (MSG_START_INDEX = CRLF_INDEX) ;

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:192  
  10431  3 002766   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 002767   200057 116100                    CMPQ    CRLF_INDEX,,AUTO
         3 002770   003013 601000 3                  TNZ     s:10440

     1468    10432    4         MSG_START_INDEX = MSG_START_INDEX + 2 ;

  10432  3 002771   200061 235100                    LDA     MSG_START_INDEX,,AUTO
         3 002772   000002 035007                    ADLA    2,DL
         3 002773   200061 755100                    STA     MSG_START_INDEX,,AUTO

     1469    10433    4         CALL INDEX (CRLF_INDEX,

  10433  3 002774   200056 470500                    LDP0    @MSG$,,AUTO
         3 002775   000000 471500                    LDP1    0,,PR0
         3 002776   761737 620005                    EAX0    -7201,AL
         3 002777   777777 660003                    ERX0    -1,DU
         3 003000   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003001   000000 120545                    SCD
         3 003002   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         3 003003   000001 000002 2                  ADSC9   CRLF_                    cn=0,n=2
         3 003004   200057 000100                    ARG     CRLF_INDEX,,AUTO
         3 003005   200057 056100                    ASQ     CRLF_INDEX,,AUTO
         3 003006   003010 607000 3                  TTF     s:10437
         3 003007   200057 054100                    AOS     CRLF_INDEX,,AUTO

     1470    10434    4                 CRLF,
     1471    10435    4                 MSG$ -> MESSAGE,
     1472    10436    4                 MSG_START_INDEX) ;
     1473    10437    4      END /* WHILE */ ;

  10437  3 003010   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003011   200057 116100                    CMPQ    CRLF_INDEX,,AUTO
         3 003012   002771 600000 3                  TZE     s:10432

     1474    10438
     1475    10439           /* Loop through and print all parts of the message */
     1476    10440    4      DO WHILE (MSG_START_INDEX < MESSAGE_SIZE) ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:193  

  10440  3 003013   200060 116100                    CMPQ    MESSAGE_SIZE,,AUTO
         3 003014   003162 603000 3                  TRC     s:10480

     1477    10441              /* Set up message part length */
     1478    10442    4         IF CRLF_INDEX < MESSAGE_SIZE

  10442  3 003015   200057 236100                    LDQ     CRLF_INDEX,,AUTO
         3 003016   200060 116100                    CMPQ    MESSAGE_SIZE,,AUTO
         3 003017   003023 603000 3                  TRC     s:10444

     1479    10443    4         THEN MSG_LGTH = CRLF_INDEX - MSG_START_INDEX ;

  10443  3 003020   200061 136100                    SBLQ    MSG_START_INDEX,,AUTO
         3 003021   200062 756100                    STQ     MSG_LGTH,,AUTO
         3 003022   003026 710000 3                  TRA     s:10446

     1480    10444    4         ELSE MSG_LGTH = MESSAGE_SIZE - MSG_START_INDEX ;

  10444  3 003023   200060 236100                    LDQ     MESSAGE_SIZE,,AUTO
         3 003024   200061 136100                    SBLQ    MSG_START_INDEX,,AUTO
         3 003025   200062 756100                    STQ     MSG_LGTH,,AUTO

     1481    10445
     1482    10446    4         IF MSG_LGTH + MSG_START_INDEX >= MESSAGE_SIZE

  10446  3 003026   200061 036100                    ADLQ    MSG_START_INDEX,,AUTO
         3 003027   200060 116100                    CMPQ    MESSAGE_SIZE,,AUTO
         3 003030   003077 602000 3                  TNC     s:10460

     1483    10447    5         THEN DO ;

     1484    10448    5                 IF SERVICE_TYPE = %WRITE_READ

  10448  3 003031   200055 470500                    LDP0    @SERVICE_TYPE,,AUTO
         3 003032   000000 235100                    LDA     0,,PR0
         3 003033   000002 115007                    CMPA    2,DL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:194  
         3 003034   003044 601000 3                  TNZ     s:10450

     1485    10449    5                 THEN CALL TOO$FORMAT_SIMULATED_PROMPT (MSG_LGTH, OUT_LGTH) ;

  10449  3 003035   200063 631500                    EPPR1   OUT_LGTH,,AUTO
         3 003036   200066 451500                    STP1    @MSG_LGTH+1,,AUTO
         3 003037   200062 633500                    EPPR3   MSG_LGTH,,AUTO
         3 003040   200065 453500                    STP3    OUT_LGTH+2,,AUTO
         3 003041   003164 701000 3                  TSX1    TOO$FORMAT_SIMULATED_PROMPT
         3 003042   000000 011000                    NOP     0
         3 003043   003046 710000 3                  TRA     s:10451

     1486    10450    5                 ELSE OUT_LGTH = MSG_LGTH ;

  10450  3 003044   200062 236100                    LDQ     MSG_LGTH,,AUTO
         3 003045   200063 756100                    STQ     OUT_LGTH,,AUTO

     1487    10451    5                 CONSOLE_FPT.BUF_ = VECTOR (SUBSTR (MSG$->MESSAGE,

  10451  3 003046   200056 470500                    LDP0    @MSG$,,AUTO
         3 003047   000000 471500                    LDP1    0,,PR0
         3 003050   200063 235100                    LDA     OUT_LGTH,,AUTO
         3 003051   000020 735000                    ALS     16
         3 003052   000140 135007                    SBLA    96,DL
         3 003053   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003054   100000 500506                    A9BD    0,QL,PR1
         3 003055   200070 451500                    STP1    @OUT_LGTH+2,,AUTO
         3 003056   200070 236100                    LDQ     @OUT_LGTH+2,,AUTO
         3 003057   000004 757000 xsym               STAQ    CONSOLE_FPT+4

     1488    10452    5                         MSG_START_INDEX,
     1489    10453    5                         OUT_LGTH)) ;
     1490    10454    5                 IF SERVICE_TYPE = %WRITE_READ

  10454  3 003060   200055 471500                    LDP1    @SERVICE_TYPE,,AUTO
         3 003061   100000 235100                    LDA     0,,PR1
         3 003062   000002 115007                    CMPA    2,DL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:195  
         3 003063   003070 601000 3                  TNZ     s:10456

     1491    10455    5                 THEN CALL TOT$PROMPT_OUT ;

  10455  3 003064   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 003065   000000 701000 xent               TSX1    TOT$PROMPT_OUT
         3 003066   000000 011000                    NOP     0
         3 003067   003073 710000 3                  TRA     s:10457

     1492    10456    5                 ELSE CALL TOT$CONSOLE_OUT ;

  10456  3 003070   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 003071   000000 701000 xent               TSX1    TOT$CONSOLE_OUT
         3 003072   000000 011000                    NOP     0

     1493    10457    5                 MSG_START_INDEX = MSG_START_INDEX + MSG_LGTH ;

  10457  3 003073   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003074   200062 036100                    ADLQ    MSG_LGTH,,AUTO
         3 003075   200061 756100                    STQ     MSG_START_INDEX,,AUTO

     1494    10458    5              END ;

  10458  3 003076   003160 710000 3                  TRA     s:10479

     1495    10459    5         ELSE DO ;

     1496    10460    5                 CONSOLE_FPT.BUF_ = VECTOR (SUBSTR (MSG$->MESSAGE,

  10460  3 003077   200056 470500                    LDP0    @MSG$,,AUTO
         3 003100   000000 471500                    LDP1    0,,PR0
         3 003101   200062 235100                    LDA     MSG_LGTH,,AUTO
         3 003102   000020 735000                    ALS     16
         3 003103   000140 135007                    SBLA    96,DL
         3 003104   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003105   100000 500506                    A9BD    0,QL,PR1
         3 003106   200070 451500                    STP1    @OUT_LGTH+2,,AUTO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:196  
         3 003107   200070 236100                    LDQ     @OUT_LGTH+2,,AUTO
         3 003110   000004 757000 xsym               STAQ    CONSOLE_FPT+4

     1497    10461    5                         MSG_START_INDEX,
     1498    10462    5                         MSG_LGTH)) ;
     1499    10463    5                 CALL TOT$CONSOLE_OUT ;

  10463  3 003111   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 003112   000000 701000 xent               TSX1    TOT$CONSOLE_OUT
         3 003113   000000 011000                    NOP     0

     1500    10464
     1501    10465                      /* Get next non CRLF character to print */
     1502    10466    5                 MSG_START_INDEX = MSG_START_INDEX + MSG_LGTH ;

  10466  3 003114   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003115   200062 036100                    ADLQ    MSG_LGTH,,AUTO
         3 003116   200061 756100                    STQ     MSG_START_INDEX,,AUTO

     1503    10467    5                 CALL INDEX (CRLF_INDEX,

  10467  3 003117   200056 470500                    LDP0    @MSG$,,AUTO
         3 003120   000000 471500                    LDP1    0,,PR0
         3 003121   761737 620006                    EAX0    -7201,QL
         3 003122   777777 660003                    ERX0    -1,DU
         3 003123   200061 235100                    LDA     MSG_START_INDEX,,AUTO
         3 003124   000000 120545                    SCD
         3 003125   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         3 003126   000001 000002 2                  ADSC9   CRLF_                    cn=0,n=2
         3 003127   200057 000100                    ARG     CRLF_INDEX,,AUTO
         3 003130   200057 056100                    ASQ     CRLF_INDEX,,AUTO
         3 003131   003133 607000 3                  TTF     s:10471
         3 003132   200057 054100                    AOS     CRLF_INDEX,,AUTO

     1504    10468    5                         CRLF,
     1505    10469    5                         MSG$ -> MESSAGE,
     1506    10470    5                         MSG_START_INDEX) ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:197  
     1507    10471    6                 DO WHILE (MSG_START_INDEX = CRLF_INDEX) ;

  10471  3 003133   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003134   200057 116100                    CMPQ    CRLF_INDEX,,AUTO
         3 003135   003160 601000 3                  TNZ     s:10479

     1508    10472    6                    MSG_START_INDEX = MSG_START_INDEX + 2 ;

  10472  3 003136   200061 235100                    LDA     MSG_START_INDEX,,AUTO
         3 003137   000002 035007                    ADLA    2,DL
         3 003140   200061 755100                    STA     MSG_START_INDEX,,AUTO

     1509    10473    6                    CALL INDEX (CRLF_INDEX,

  10473  3 003141   200056 470500                    LDP0    @MSG$,,AUTO
         3 003142   000000 471500                    LDP1    0,,PR0
         3 003143   761737 620005                    EAX0    -7201,AL
         3 003144   777777 660003                    ERX0    -1,DU
         3 003145   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003146   000000 120545                    SCD
         3 003147   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         3 003150   000001 000002 2                  ADSC9   CRLF_                    cn=0,n=2
         3 003151   200057 000100                    ARG     CRLF_INDEX,,AUTO
         3 003152   200057 056100                    ASQ     CRLF_INDEX,,AUTO
         3 003153   003155 607000 3                  TTF     s:10477
         3 003154   200057 054100                    AOS     CRLF_INDEX,,AUTO

     1510    10474    6                            CRLF,
     1511    10475    6                            MSG$ -> MESSAGE,
     1512    10476    6                            MSG_START_INDEX) ;
     1513    10477    6                 END /* WHILE */ ;

  10477  3 003155   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003156   200057 116100                    CMPQ    CRLF_INDEX,,AUTO
         3 003157   003136 600000 3                  TZE     s:10472

     1514    10478    5              END ; /* ELSE DO */
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:198  

     1515    10479    4      END /* WHILE */ ;

  10479  3 003160   200060 116100                    CMPQ    MESSAGE_SIZE,,AUTO
         3 003161   003015 602000 3                  TNC     s:10442

     1516    10480    3      RETURN ;

  10480  3 003162   200054 221300                    LDX1  ! BUF_ADDR+1,,AUTO
         3 003163   000001 702211                    TSX2  ! 1,X1

     1517    10481
     1518    10482        /* END TOO$BREAK_MESSAGE */
     1519    10483        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:199  
     1520    10484    3   TOO$FORMAT_SIMULATED_PROMPT: PROC (MSG_LGTH, OUT_LGTH) ;

  10484  3 003164   200064 741300       TOO$FORMAT_* STX1  ! OUT_LGTH+1,,AUTO

     1521    10485
     1522    10486    4      DCL MSG_LGTH    UBIN WORD ALIGNED ;
     1523    10487    4      DCL OUT_LGTH    UBIN WORD ALIGNED ;
     1524    10488
     1525    10489        /* Code */
     1526    10490
     1527    10491    4      OUT_LGTH = MSG_LGTH ;

  10491  3 003165   200065 470500                    LDP0    @MSG_LGTH,,AUTO
         3 003166   200066 471500                    LDP1    @OUT_LGTH,,AUTO
         3 003167   000000 235100                    LDA     0,,PR0
         3 003170   100000 755100                    STA     0,,PR1

     1528    10492    5      DO WHILE (MSG$ -> MESSAGE_(MSG_START_INDEX+OUT_LGTH-1) = ' ') ;

  10492  3 003171   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003172   100000 036100                    ADLQ    0,,PR1
         3 003173   200056 473500                    LDP3    @MSG$,,AUTO
         3 003174   300000 474500                    LDP4    0,,PR3
         3 003175   040000 106506                    CMPC    fill='040'O
         3 003176   477777 600001                    ADSC9   -1,Q,PR4                 cn=3,n=1
         3 003177   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 003200   003215 601000 3                  TNZ     s:10495

     1529    10493    5         OUT_LGTH = OUT_LGTH - 1 ;

  10493  3 003201   200066 470500                    LDP0    @OUT_LGTH,,AUTO
         3 003202   000000 235100                    LDA     0,,PR0
         3 003203   000001 135007                    SBLA    1,DL
         3 003204   000000 755100                    STA     0,,PR0

     1530    10494    5      END /* WHILE */ ;

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:200  
  10494  3 003205   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003206   000000 036100                    ADLQ    0,,PR0
         3 003207   200056 471500                    LDP1    @MSG$,,AUTO
         3 003210   100000 473500                    LDP3    0,,PR1
         3 003211   040000 106506                    CMPC    fill='040'O
         3 003212   377777 600001                    ADSC9   -1,Q,PR3                 cn=3,n=1
         3 003213   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 003214   003201 600000 3                  TZE     s:10493

     1531    10495    4      IF MSG$ -> MESSAGE_(MSG_START_INDEX+OUT_LGTH-1) = ':' |

  10495  3 003215   200066 470500                    LDP0    @OUT_LGTH,,AUTO
         3 003216   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003217   000000 036100                    ADLQ    0,,PR0
         3 003220   200056 471500                    LDP1    @MSG$,,AUTO
         3 003221   100000 473500                    LDP3    0,,PR1
         3 003222   400000 220003                    LDX0    -131072,DU
         3 003223   040000 106506                    CMPC    fill='040'O
         3 003224   377777 600001                    ADSC9   -1,Q,PR3                 cn=3,n=1
         3 003225   000027 000001 4                  ADSC9   23                       cn=0,n=1
         3 003226   003230 600000 3                  TZE     s:10495+11
         3 003227   000000 220003                    LDX0    0,DU
         3 003230   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003231   000000 036100                    ADLQ    0,,PR0
         3 003232   400000 221003                    LDX1    -131072,DU
         3 003233   040000 106506                    CMPC    fill='040'O
         3 003234   377777 600001                    ADSC9   -1,Q,PR3                 cn=3,n=1
         3 003235   000030 000001 4                  ADSC9   24                       cn=0,n=1
         3 003236   003240 600000 3                  TZE     s:10495+19
         3 003237   000000 221003                    LDX1    0,DU
         3 003240   000000 636011                    EAQ     0,X1
         3 003241   200070 756100                    STQ     @OUT_LGTH+2,,AUTO
         3 003242   000000 636010                    EAQ     0,X0
         3 003243   200070 276100                    ORQ     @OUT_LGTH+2,,AUTO
         3 003244   003251 600000 3                  TZE     s:10499

     1532    10496    4              MSG$ -> MESSAGE_(MSG_START_INDEX+OUT_LGTH-1) = '-'
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:201  
     1533    10497    4      THEN OUT_LGTH = OUT_LGTH + 1 ;

  10497  3 003245   000000 235100                    LDA     0,,PR0
         3 003246   000001 035007                    ADLA    1,DL
         3 003247   000000 755100                    STA     0,,PR0
         3 003250   003262 710000 3                  TRA     s:10502

     1534    10498    5      ELSE DO ;

     1535    10499    5              MSG$ -> MESSAGE_(MSG_START_INDEX+OUT_LGTH) = ':' ;

  10499  3 003251   200061 236100                    LDQ     MSG_START_INDEX,,AUTO
         3 003252   000000 036100                    ADLQ    0,,PR0
         3 003253   100000 473500                    LDP3    0,,PR1
         3 003254   040106 100400                    MLR     fill='040'O
         3 003255   000027 000001 4                  ADSC9   23                       cn=0,n=1
         3 003256   300000 000001                    ADSC9   0,Q,PR3                  cn=0,n=1

     1536    10500    5              OUT_LGTH = OUT_LGTH + 2 ;

  10500  3 003257   000000 235100                    LDA     0,,PR0
         3 003260   000002 035007                    ADLA    2,DL
         3 003261   000000 755100                    STA     0,,PR0

     1537    10501    5           END /* ELSE */ ;

     1538    10502    4      RETURN ;

  10502  3 003262   200064 221300                    LDX1  ! OUT_LGTH+1,,AUTO
         3 003263   000001 702211                    TSX2  ! 1,X1

     1539    10503
     1540    10504    4   END TOO$FORMAT_SIMULATED_PROMPT ;
     1541    10505    3   END TOO$BREAK_MESSAGE ;
     1542    10506        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:202  
     1543    10507        /*I*      NAME:    TOO$SERVICE_W_R_REQ
     1544    10508                  PURPOSE: CALLED BY TOO$PROCESS_IO_REQ TO PROCESS A WRITE THEN READ
     1545    10509                           OPERATION.
     1546    10510                           SETS BOUNDS IN WRITE_BUF_VECTOR.
     1547    10511                           FRAMES WRITE DATA IN TOO$IO_BUFFER WITH WRITE_BUF_VECTOR.
     1548    10512                           FRAMES 84 CHARACTER READ BUFFER WITH VECTOR.
     1549    10513                           CALLS TOT$WRITE_READ_IO.
     1550    10514                           RETURNS TO TOF$PROCESS_REQ.
     1551    10515        */
     1552    10516
     1553    10517    2   TOO$SERVICE_W_R_REQ: PROC (BUF_NUM);

  10517  3 003264   200050 741300       TOO$SERVICE* STX1  ! NUMBER_DCWS,,AUTO

     1554    10518
     1555    10519    3      DCL SERVICE_TYPE UBIN WORD ALIGNED ;
     1556    10520    3      DCL BUF_ADDR PTR;
     1557    10521    3      DCL 1 BUF_ADDR_FORMAT REDEF BUF_ADDR,
     1558    10522    3            2 BASE  UBIN(18) UNAL,
     1559    10523    3            2 SEGID UBIN(18) UNAL;
     1560    10524    3      DCL BUF_NUM SBIN HALF;
     1561    10525
     1562    10526        /* Code */
     1563    10527
     1564    10528    3      SERVICE_TYPE = %WRITE_READ ;

  10528  3 003265   000002 235007                    LDA     2,DL
         3 003266   200052 755100                    STA     SERVICE_TYPE,,AUTO

     1565    10529    3      BUF_ADDR = ADDR(TOO$IO_BUFFER.WRITE_DATA(BUF_NUM));

  10529  3 003267   200051 470500                    LDP0    @BUF_NUM,,AUTO
         3 003270   000000 236100                    LDQ     0,,PR0
         3 003271   000022 732000                    QRS     18
         3 003272   003440 402007                    MPY     1824,DL
         3 003273   000022 736000                    QLS     18
         3 003274   000003 036003                    ADLQ    3,DU
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:203  
         3 003275   000001 036000 xsym               ADLQ    TOT$DMC+1
         3 003276   200053 756100                    STQ     BUF_ADDR,,AUTO

     1566    10530    3      WRITE_BUF_VECTOR.BASE = BUF_ADDR_FORMAT.BASE;

  10530  3 003277   200053 220100                    LDX0    BUF_ADDR,,AUTO
         3 003300   000063 740000 1                  STX0    WRITE_BUF_VECTOR+1

     1567    10531    3      WRITE_BUF_VECTOR.BOUNDS = TOO$IO_BUFFER.CHAR_COUNT(BUF_NUM) -1;

  10531  3 003301   000000 236100                    LDQ     0,,PR0
         3 003302   000022 732000                    QRS     18
         3 003303   003440 402007                    MPY     1824,DL
         3 003304   000001 471400 xsym               LDP1    TOT$DMC+1
         3 003305   100002 236106                    LDQ     2,QL,PR1
         3 003306   000001 136007                    SBLQ    1,DL
         3 003307   000020 736000                    QLS     16
         3 003310   000062 676000 1                  ERQ     WRITE_BUF_VECTOR
         3 003311   000034 376000 xsym               ANQ     B_VECTNIL+28
         3 003312   000062 656000 1                  ERSQ    WRITE_BUF_VECTOR

     1568    10532    3      WRITE_BUF_VECTOR.SEGID = BUF_ADDR_FORMAT.SEGID ;

  10532  3 003313   200053 236100                    LDQ     BUF_ADDR,,AUTO
         3 003314   000063 752003 1                  STCQ    WRITE_BUF_VECTOR+1,'03'O

     1569    10533    3      CALL TOO$BREAK_MESSAGE (SERVICE_TYPE, BUF_ADDR) ;

  10533  3 003315   200053 633500                    EPPR3   BUF_ADDR,,AUTO
         3 003316   200056 453500                    STP3    @MSG$,,AUTO
         3 003317   200052 634500                    EPPR4   SERVICE_TYPE,,AUTO
         3 003320   200055 454500                    STP4    @SERVICE_TYPE,,AUTO
         3 003321   002742 701000 3                  TSX1    TOO$BREAK_MESSAGE
         3 003322   000000 011000                    NOP     0

     1570    10534    3      READ_IO.BUF_ = VECTOR(TOO$IO_BUFFER.READ_DATA(BUF_NUM));

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:204  
  10534  3 003323   200051 470500                    LDP0    @BUF_NUM,,AUTO
         3 003324   000000 236100                    LDQ     0,,PR0
         3 003325   000022 732000                    QRS     18
         3 003326   003440 402007                    MPY     1824,DL
         3 003327   000031 235000 4                  LDA     25
         3 003330   000022 736000                    QLS     18
         3 003331   003413 036003                    ADLQ    1803,DU
         3 003332   000001 036000 xsym               ADLQ    TOT$DMC+1
         3 003333   000004 757000 xsym               STAQ    READ_IO+4

     1571    10535    3      TOO$IO_BUFFER.READ_DATA(BUF_NUM) = ' ';

  10535  3 003334   000000 236100                    LDQ     0,,PR0
         3 003335   000022 732000                    QRS     18
         3 003336   003440 402007                    MPY     1824,DL
         3 003337   000002 736000                    QLS     2
         3 003340   000001 471400 xsym               LDP1    TOT$DMC+1
         3 003341   040106 100400                    MLR     fill='040'O
         3 003342   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 003343   103413 000124                    ADSC9   1803,Q,PR1               cn=0,n=84

     1572    10536    3      CALL TOT$WRITE_READ_IO;

  10536  3 003344   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 003345   000000 701000 xent               TSX1    TOT$WRITE_READ_IO
         3 003346   000000 011000                    NOP     0

     1573    10537    3      CALL TOO$COURTESY_CALL(BUF_NUM);

  10537  3 003347   200051 236100                    LDQ     @BUF_NUM,,AUTO
         3 003350   200055 756100                    STQ     @SERVICE_TYPE,,AUTO
         3 003351   003471 701000 3                  TSX1    TOO$COURTESY_CALL
         3 003352   000000 011000                    NOP     0

     1574    10538    3      RETURN;

  10538  3 003353   200050 221300                    LDX1  ! NUMBER_DCWS,,AUTO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:205  
         3 003354   000001 702211                    TSX2  ! 1,X1

     1575    10539
     1576    10540    3   END TOO$SERVICE_W_R_REQ;
     1577    10541    2   END TOO$MME_TADIOD ;
     1578    10542        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:206  
     1579    10543        /*I*      NAME:    TOO$MME_TERMIN
     1580    10544                  PURPOSE: CALLED BY MME HANDLER TO TERMINATE TOLTS.
     1581    10545                           CALLS TOT$RESTART ROUTINE TO TERMINATE TOLTS.
     1582    10546        */
     1583    10547
     1584    10548    1   TOO$MME_TERMIN: PROC (WD1, RETURN_DELTA);

  10548  3 003355   200016 741300       TOO$MME_TER* STX1  ! SERVICE_CODE+2,,AUTO

     1585    10549
     1586    10550    2      DCL RETURN_DELTA SBIN HALF;
     1587    10551    2      DCL WD1 UBIN(36);
     1588    10552
     1589    10553        /* Code */
     1590    10554
     1591    10555    2      IF TOQ$DCP.PF.ENABLED

  10555  3 003356   000000 234000 xsym               SZN     TOQ$DCP
         3 003357   003365 605000 3                  TPL     s:10561

     1592    10556    3      THEN DO ;

     1593    10557    3              TOQ$DCP.PF.REASON = %TERMIN ;

  10557  3 003360   000043 236003                    LDQ     35,DU
         3 003361   000000 552020 xsym               STBQ    TOQ$DCP,'20'O

     1594    10558    3              CALL TOQ$DEBUG ;

  10558  3 003362   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 003363   000000 701000 xent               TSX1    TOQ$DEBUG
         3 003364   000000 011000                    NOP     0

     1595    10559    3           END /* THEN */ ;

     1596    10560    2      ELSE /* No need to terminate DELTA association. */ ;
     1597    10561    2      CALL TOT$RESTART;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:207  

  10561  3 003365   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 003366   000000 701000 xent               TSX1    TOT$RESTART
         3 003367   000000 011000                    NOP     0

     1598    10562    2      RETURN;

  10562  3 003370   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 003371   000001 702211                    TSX2  ! 1,X1

     1599    10563
     1600    10564    2   END TOO$MME_TERMIN ;
     1601    10565        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:208  
     1602    10566        /*I*      NAME:    TOO$MME_TOLDIS
     1603    10567                  PURPOSE: CALLED BY MME HANDLER TO DISCONNECT A PREVIOUSLY
     1604    10568                           ASSIGNED LID.
     1605    10569                           VERIFIES THAT LID BEING DISCONNECTED IS VALID.  IF
     1606    10570                           INVALID THEN ABORTS.
     1607    10571                           IF VALID THEN SETS LID = 63(=77 OCTAL) SETS RETURN_DELTA
     1608    10572                           AND RETURNS TO MME HANDLER.
     1609    10573        */
     1610    10574
     1611    10575    1   TOO$MME_TOLDIS: PROC (LID, RETURN_DELTA);

  10575  3 003372   200016 741300       TOO$MME_TOL* STX1  ! SERVICE_CODE+2,,AUTO

     1612    10576
     1613    10577    2      DCL 1 LID HALIGNED,
     1614    10578    2            2 *     UBIN(12) UNAL,
     1615    10579    2            2 DATA  UBIN(6) UNAL;
     1616    10580    2      DCL RETURN_DELTA SBIN HALF ;
     1617    10581
     1618    10582        /* Code */
     1619    10583
     1620    10584    2      IF LID.DATA > 3 AND LID.DATA < 12

  10584  3 003373   200017 470500                    LDP0    @LID,,AUTO
         3 003374   003100 061500                    CSR     bolr='003'O
         3 003375   000000 230006                    BDSC    0,,PR0                   by=1,bit=3,n=6
         3 003376   200070 000044                    BDSC    @OUT_LGTH+2,,AUTO        by=0,bit=0,n=36
         3 003377   200070 236100                    LDQ     @OUT_LGTH+2,,AUTO
         3 003400   000004 116007                    CMPQ    4,DL
         3 003401   003426 604000 3                  TMI     s:10592
         3 003402   003100 061500                    CSR     bolr='003'O
         3 003403   000000 230006                    BDSC    0,,PR0                   by=1,bit=3,n=6
         3 003404   200071 000044                    BDSC    @OUT_LGTH+3,,AUTO        by=0,bit=0,n=36
         3 003405   200071 236100                    LDQ     @OUT_LGTH+3,,AUTO
         3 003406   000014 116007                    CMPQ    12,DL
         3 003407   003426 605000 3                  TPL     s:10592

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:209  
     1621    10585    3      THEN DO ;

     1622    10586    3              ID_CODE_TBL.ASSGN_FLAG(LID.DATA) = 0;

  10586  3 003410   003100 061500                    CSR     bolr='003'O
         3 003411   000000 230006                    BDSC    0,,PR0                   by=1,bit=3,n=6
         3 003412   200070 000022                    BDSC    @OUT_LGTH+2,,AUTO        by=0,bit=0,n=18
         3 003413   200070 220100                    LDX0    @OUT_LGTH+2,,AUTO
         3 003414   000011 236000 4                  LDQ     9
         3 003415   000040 356010 1                  ANSQ    ID_CODE_TBL,X0

     1623    10587    3              LID.DATA = 63;

  10587  3 003416   003100 061400                    CSR     bolr='003'O
         3 003417   000001 000044 4                  BDSC    1                        by=0,bit=0,n=36
         3 003420   000000 230006                    BDSC    0,,PR0                   by=1,bit=3,n=6

     1624    10588    3              RETURN_DELTA = 3;

  10588  3 003421   000003 220003                    LDX0    3,DU
         3 003422   200020 471500                    LDP1    @RETURN_DELTA,,AUTO
         3 003423   100000 740100                    STX0    0,,PR1

     1625    10589    3              RETURN;

  10589  3 003424   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 003425   000001 702211                    TSX2  ! 1,X1

     1626    10590    3           END /* THEN */ ;
     1627    10591    3      ELSE DO ;

     1628    10592    3              TOO_ERROR_CODE.ERR# = %E$BADLOGID ;

  10592  3 003426   000064 236000 1                  LDQ     TOO_ERROR_CODE
         3 003427   000002 376000 4                  ANQ     2
         3 003430   000030 276007                    ORQ     24,DL
         3 003431   000064 756000 1                  STQ     TOO_ERROR_CODE
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:210  

     1629    10593    3              CALL TOX$ERROR (TOO_ERROR_CODE) ;

  10593  3 003432   000003 630400 4                  EPPR0   3
         3 003433   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003434   000000 701000 xent               TSX1    TOX$ERROR
         3 003435   000000 011000                    NOP     0

     1630    10594    3           END /* ELSE */ ;

     1631    10595
     1632    10596    2   END TOO$MME_TOLDIS;

  10596  3 003436   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 003437   000001 702211                    TSX2  ! 1,X1

     1633    10597        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:211  
     1634    10598        /*I*      NAME:    TOO$MME_TOLGON
     1635    10599                  PURPOSE: USED IN GCOS TO INFORM TOLTS THAT POLTS IS TERMINATING.
     1636    10600                           PRESENTLY UNUSED IN CP6 TOLTS.
     1637    10601        */
     1638    10602
     1639    10603    1   TOO$MME_TOLGON: PROC (EXEC_NUM, RETURN_DELTA);

  10603  3 003440   200016 741300       TOO$MME_TOL* STX1  ! SERVICE_CODE+2,,AUTO

     1640    10604
     1641    10605    2      DCL EXEC_NUM UBIN(18) HALIGNED ;
     1642    10606    2      DCL RETURN_DELTA SBIN HALF;
     1643    10607        /*
     1644    10608        Code
     1645    10609        */
     1646    10610    2      RETURN_DELTA = 3;

  10610  3 003441   000003 220003                    LDX0    3,DU
         3 003442   200020 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 003443   000000 740100                    STX0    0,,PR0

     1647    10611    2      RETURN;

  10611  3 003444   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 003445   000001 702211                    TSX2  ! 1,X1

     1648    10612    2   END TOO$MME_TOLGON;
     1649    10613        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:212  
     1650    10614        /*I*      NAME:    TOO$MME_TOLTIN
     1651    10615                  PURPOSE: CALLS TOO$MME_GEWAKE TO PUT PROGRAM TO SLEEP
     1652    10616                           FOR SPECIFIED PERIOD OF TIME.
     1653    10617                           Always assume TOLTS in core.
     1654    10618                           Do a MME GEWAKE unconditionally.
     1655    10619        */
     1656    10620
     1657    10621    1   TOO$MME_TOLTIN: PROC (TIME_PARAM, RETURN_DELTA);

  10621  3 003446   200016 741300       TOO$MME_TOL* STX1  ! SERVICE_CODE+2,,AUTO

     1658    10622
     1659    10623    2      DCL RETURN_DELTA SBIN HALF;
     1660    10624    2      DCL TIME_PARAM   UBIN(36);
     1661    10625
     1662    10626        /* Code */
     1663    10627
     1664    10628    2      CALL TOO$MME_GEWAKE (TIME_PARAM, RETURN_DELTA);

  10628  3 003447   200020 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 003450   200024 756100                    STQ     @PARAM_3,,AUTO
         3 003451   200017 236100                    LDQ     @TIME_PARAM,,AUTO
         3 003452   200023 756100                    STQ     @PARAM_2,,AUTO
         3 003453   001631 701000 3                  TSX1    TOO$MME_GEWAKE
         3 003454   000000 011000                    NOP     0

     1665    10629    2      RETURN_DELTA = 2;

  10629  3 003455   000002 220003                    LDX0    2,DU
         3 003456   200020 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 003457   000000 740100                    STX0    0,,PR0

     1666    10630    2      RETURN;

  10630  3 003460   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 003461   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:213  
     1667    10631
     1668    10632    2   END TOO$MME_TOLTIN;
     1669    10633        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:214  
     1670    10634        /*I* NAME:         TOO$MME_TRACIO
     1671    10635             AUTHOR:       Scott S. Sheppard
     1672    10636             PURPOSE:      Allows MME TRACIO to be issued
     1673    10637             INTERFACE:    None called.
     1674    10638             PARAMETERS:   RETURN_DELTA - output
     1675    10639             DATA:         No external data accessed.
     1676    10640             DESCRIPTION:  This procedure handles MME TRACIO for CP-6. On
     1677    10641                           GCOS, the  MME dumps four lines  of octal data
     1678    10642                           to a dedicated  printer for later analysis. In
     1679    10643                           the  CP-6  world,  this  functionality  can be
     1680    10644                           duplicated and even surpassed using options on
     1681    10645                           DEBUG   test  requests  so   the  MME  is  not
     1682    10646                           implemented. This MME is allowed however since
     1683    10647                           a  'Z' option  on a  POLTS request  results in
     1684    10648                           this   MME   being    issued   by   the   CPLT
     1685    10649                           Subexecutive.
     1686    10650        */
     1687    10651
     1688    10652    1   TOO$MME_TRACIO: PROC (RETURN_DELTA) ;

  10652  3 003462   200016 741300       TOO$MME_TRA* STX1  ! SERVICE_CODE+2,,AUTO

     1689    10653
     1690    10654    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
     1691    10655
     1692    10656        /* Code */
     1693    10657
     1694    10658    2      RETURN_DELTA = 2 ;

  10658  3 003463   200017 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 003464   000100 101400                    MRL     fill='000'O
         3 003465   000004 000004 xsym               ADSC9   B_VECTNIL+4              cn=0,n=4
         3 003466   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

     1695    10659    2      RETURN ;

  10659  3 003467   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:215  
         3 003470   000001 702211                    TSX2  ! 1,X1

     1696    10660
     1697    10661    2   END TOO$MME_TRACIO ;
     1698    10662        %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:216  
     1699    10663        /*I*      NAME:    TOO$COURTESY_CLL
     1700    10664                  PURPOSE: CALLED BY EVENT HANDLER, AFTER COMPLETION OF WRITE
     1701    10665                           OR WRITE THEN READ OPERATION, TO BUILD A STATUS ENTRY.
     1702    10666                           DERIVES TOO$IO_BUFFER ARRAY INDEX OF I/O BUFFER JUST
     1703    10667                           SERVICED FROM EVENT ID.
     1704    10668                           ENTERS ADDRESS OF I/O BUFFER JUST SERVICED IN STATUS_WD_B.
     1705    10669                           BUF_ADDR.
     1706    10670                           MOVES TDPCN FROM I/O BUFFER TO STATUS_WD_A.TDPCN.
     1707    10671                           IF READ COMPLETED THEN BUILDS ENTRY OF THE FORM' O-'
     1708    10672                           IN IO_ENTRY FIELD OF STATUS_WD_A IN AN OCTAL FORMAT.
     1709    10673                           IF WRITE COMPLETED THEN BUILDS ENTRY OF THE FORM
     1710    10674                           ' S-' IN IO_ENTRY FIELD OF STATUS_WD_A IN AN OCTAL
     1711    10675                           FORMAT.  TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG AND
     1712    10676                           TOO$IO_BUFFER.IO_REQ_SERVICED_FLAG ARE RESET.
     1713    10677                           IONUM IS DECREMENTED BY 1.
     1714    10678                           TOT$BUILD_DISP_SUBEXEC IS THEN CALLED TO MOVE ENTRIES
     1715    10679                           INTO SUBEXEC QUEUE.
     1716    10680                           RETURN IS BACK TO EVENT HANDLER.
     1717    10681        */
     1718    10682        %EJECT;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:217  
     1719    10683    1   TOO$COURTESY_CALL: PROC (BUF_INDEX);

  10683  3 003471   200054 741300       TOO$COURTES* STX1  ! BUF_ADDR+1,,AUTO

     1720    10684
     1721    10685    2      DCL BUF_INDEX SBIN HALF;
     1722    10686    2      DCL 1 BUFFER_ADDR_FORMAT ,
     1723    10687    2            2 BUF_ADDR UBIN(18) UNAL,
     1724    10688    2            2 ID UBIN(18) UNAL;
     1725    10689    2      DCL BUFFER_PTR REDEF BUFFER_ADDR_FORMAT PTR;
     1726    10690    2      DCL 1 STATUS_WD_A ,
     1727    10691    2            2 IO_ENTRY BIT(18) UNAL,
     1728    10692    2            2 TDPCN UBIN(18) UNAL;
     1729    10693    2      DCL ENTRY_A REDEF STATUS_WD_A UBIN(36);
     1730    10694    2      DCL 1 STATUS_WD_B ,
     1731    10695    2            2 BUF_ADDR UBIN(18) UNAL,
     1732    10696    2            2 LID UBIN(18) UNAL;
     1733    10697    2      DCL ENTRY_B REDEF STATUS_WD_B UBIN(36);
     1734    10698           %EJECT ;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:218  
     1735    10699        /* Code */
     1736    10700
     1737    10701    2      IF BUF_INDEX > 7

  10701  3 003472   200055 470500                    LDP0    @BUF_INDEX,,AUTO
         3 003473   000000 220100                    LDX0    0,,PR0
         3 003474   000007 100003                    CMPX0   7,DU
         3 003475   003500 604400 3                  TMOZ    s:10705

     1738    10702    2      THEN BUF_INDEX = BUF_INDEX-8;

  10702  3 003476   777770 622010                    EAX2    -8,X0
         3 003477   000000 742100                    STX2    0,,PR0

     1739    10703    2      ELSE /* Do Nothing */ ;
     1740    10704
     1741    10705    2      BUFFER_PTR = ADDR(TOO$IO_BUFFER(BUF_INDEX));

  10705  3 003500   000000 236100                    LDQ     0,,PR0
         3 003501   000022 732000                    QRS     18
         3 003502   003440 402007                    MPY     1824,DL
         3 003503   000022 736000                    QLS     18
         3 003504   000001 036000 xsym               ADLQ    TOT$DMC+1
         3 003505   200056 756100                    STQ     BUFFER_ADDR_FORMAT,,AUTO

     1742    10706    2      STATUS_WD_B.BUF_ADDR = BUFFER_ADDR_FORMAT.BUF_ADDR;

  10706  3 003506   200056 220100                    LDX0    BUFFER_ADDR_FORMAT,,AUTO
         3 003507   200060 740100                    STX0    STATUS_WD_B,,AUTO

     1743    10707    2      STATUS_WD_B.LID = TOO$IO_BUFFER.LID (BUF_INDEX) ;

  10707  3 003510   000000 236100                    LDQ     0,,PR0
         3 003511   000022 732000                    QRS     18
         3 003512   003440 402007                    MPY     1824,DL
         3 003513   000001 471400 xsym               LDP1    TOT$DMC+1
         3 003514   100000 236106                    LDQ     0,QL,PR1
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:219  
         3 003515   000003 772000                    QRL     3
         3 003516   000077 376007                    ANQ     63,DL
         3 003517   000000 621006                    EAX1    0,QL
         3 003520   200060 441100                    SXL1    STATUS_WD_B,,AUTO

     1744    10708    2      STATUS_WD_A.TDPCN = TOO$IO_BUFFER.TDPCN(BUF_INDEX);

  10708  3 003521   000000 236100                    LDQ     0,,PR0
         3 003522   000022 732000                    QRS     18
         3 003523   003440 402007                    MPY     1824,DL
         3 003524   100000 236106                    LDQ     0,QL,PR1
         3 003525   000017 772000                    QRL     15
         3 003526   777777 376007                    ANQ     -1,DL
         3 003527   000000 622006                    EAX2    0,QL
         3 003530   200057 442100                    SXL2    STATUS_WD_A,,AUTO

     1745    10709
     1746    10710    2      IF TOO$IO_BUFFER.READ_FLAG(BUF_INDEX) = 1

  10710  3 003531   000000 236100                    LDQ     0,,PR0
         3 003532   000022 732000                    QRS     18
         3 003533   003440 402007                    MPY     1824,DL
         3 003534   100000 236106                    LDQ     0,QL,PR1
         3 003535   100000 376003                    ANQ     32768,DU
         3 003536   100000 116003                    CMPQ    32768,DU
         3 003537   003543 601000 3                  TNZ     s:10713

     1747    10711    2      THEN STATUS_WD_A.IO_ENTRY = '204652'O;

  10711  3 003540   204652 223003                    LDX3    68010,DU
         3 003541   200057 743100                    STX3    STATUS_WD_A,,AUTO
         3 003542   003562 710000 3                  TRA     s:10717

     1748    10712    3      ELSE DO;

     1749    10713    3              STATUS_WD_A.IO_ENTRY = '206252'O;

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:220  
  10713  3 003543   206252 223003                    LDX3    68778,DU
         3 003544   200057 743100                    STX3    STATUS_WD_A,,AUTO

     1750    10714    3              TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG(BUF_INDEX) = 0;

  10714  3 003545   000000 236100                    LDQ     0,,PR0
         3 003546   000022 732000                    QRS     18
         3 003547   003440 402007                    MPY     1824,DL
         3 003550   000000 624006                    EAX4    0,QL
         3 003551   000031 236000 xsym               LDQ     B_VECTNIL+25
         3 003552   100000 356114                    ANSQ    0,X4,PR1

     1751    10715    3              TOO$IO_BUFFER.IO_REQ_SERVICED_FLAG(BUF_INDEX) = 0;

  10715  3 003553   000000 236100                    LDQ     0,,PR0
         3 003554   000022 732000                    QRS     18
         3 003555   003440 402007                    MPY     1824,DL
         3 003556   000001 471400 xsym               LDP1    TOT$DMC+1
         3 003557   000000 624006                    EAX4    0,QL
         3 003560   000017 236000 4                  LDQ     15
         3 003561   100000 356114                    ANSQ    0,X4,PR1

     1752    10716    3           END /* ELSE */ ;

     1753    10717    2      IONUM = IONUM - 1;

  10717  3 003562   000060 224000 1                  LDX4    IONUM
         3 003563   777777 625014                    EAX5    -1,X4
         3 003564   000060 745000 1                  STX5    IONUM

     1754    10718
     1755    10719    2      QUEUE_ENTRY(0) = ENTRY_A;

  10719  3 003565   200057 235100                    LDA     STATUS_WD_A,,AUTO
         3 003566   200010 755100                    STA     QUEUE_ENTRY,,AUTO

     1756    10720    2      QUEUE_ENTRY(1) = ENTRY_B;
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:221  

  10720  3 003567   200060 236100                    LDQ     STATUS_WD_B,,AUTO
         3 003570   200011 756100                    STQ     QUEUE_ENTRY+1,,AUTO

     1757    10721    2      QUEUE_ENTRY(2) = 0;

  10721  3 003571   200012 450100                    STZ     QUEUE_ENTRY+2,,AUTO

     1758    10722    2      SERVICE_CODE = %DSC_ISC;

  10722  3 003572   000002 224003                    LDX4    2,DU
         3 003573   200014 744100                    STX4    SERVICE_CODE,,AUTO

     1759    10723    2      REQUEST_TYPE = %DRT_BUILD;

  10723  3 003574   000001 235007                    LDA     1,DL
         3 003575   200013 755100                    STA     REQUEST_TYPE,,AUTO

     1760    10724    2      CALL TOD$DISPATCHER(REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY);

  10724  3 003576   200010 631500                    EPPR1   QUEUE_ENTRY,,AUTO
         3 003577   200072 451500                    STP1    @OUT_LGTH+4,,AUTO
         3 003600   200014 633500                    EPPR3   SERVICE_CODE,,AUTO
         3 003601   200071 453500                    STP3    @OUT_LGTH+3,,AUTO
         3 003602   200013 634500                    EPPR4   REQUEST_TYPE,,AUTO
         3 003603   200070 454500                    STP4    @OUT_LGTH+2,,AUTO
         3 003604   200070 630500                    EPPR0   @OUT_LGTH+2,,AUTO
         3 003605   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 003606   000000 701000 xent               TSX1    TOD$DISPATCHER
         3 003607   000000 011000                    NOP     0

     1761    10725    2      RETURN;

  10725  3 003610   200054 221300                    LDX1  ! BUF_ADDR+1,,AUTO
         3 003611   000001 702211                    TSX2  ! 1,X1

FDP_FPT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:222  
 Sect OctLoc
   1     000   000001 777640   000004 006000   000001 777640   000056 006000    ................
   1     004   000000 000000   ****** ******                                    ........

GDP_FPT
 Sect OctLoc
   1     006   000001 777640   000012 006000   000001 777640   000054 006000    .............,..
   1     012   000000 000000   ****** ******                                    ........

TIME_FPT
 Sect OctLoc
   1     014   000001 777640   000026 006000   000001 377640   000036 006000    ................
   1     020   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     024   000000 777640   000061 006000   000001 000000   ****** ******    .....1..........

WAIT_FPT
 Sect OctLoc
   1     030   000001 777640   000034 006000   000000 177640   000000 006014    ................
   1     034   000000 000000   000000 000001                                    ........

ID_CODE_TBL
 Sect OctLoc
   1     040   000000 000000   000000 000000   000000 000000   000000 000000    ................
   1     050*  000000 000000   000000 000000   000000 000000   000000 000000    ................

GEMORE_VEC
 Sect OctLoc
   1     054   000000 177640   000000 006014                                    ........

GEMREL_VEC
 Sect OctLoc
   1     056   000000 177640   000000 006014                                    ........

IONUM
 Sect OctLoc
   1     060   000000 ******                                                    ....

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:223  
WRITE_BUF_VECTOR
 Sect OctLoc
   1     062   ****** *7764*   ****** 00****                                    ........

TOO_ERROR_CODE
 Sect OctLoc
   1     064   241717 000000                                                    ....

CALL_SEQUENCE
 Sect OctLoc
   1     065   ****** ******   ****** ******   ****** ******   ****** ******    ................

DCWLIST
 Sect OctLoc
   1     077   ****** 010000   ****** 010000   ****** 010000   ****** 010000    ................
   1     123*  ****** 010000                                                    ....

KEY_VALUE
 Sect OctLoc
   1     124   027*** ******   056*** ******   ****** ***040   040040 040040    ...........
   1     130   040040 040040   040040 040040

GEWAKE_COUNT
 Sect OctLoc
   1     135   000000 000000                                                    ....

DCW_DATA_PTR_FORMAT
 Sect OctLoc
   1     136   ****** 006000                                                    ....

DCW_LIST_PTR_FORMAT
 Sect OctLoc
   1     137   ****** 006000                                                    ....

WRITE_BUF_ASCII
 Sect OctLoc
   1     140   ****** ******   ****** ******   ****** ******   ****** ******    ................
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:224  

WRITE_BUF_BCD
 Sect OctLoc
   1    3550   ****** ******   ****** ******   ****** ******   ****** ******    ................

I
 Sect OctLoc
   1    6030   777777 ******                                                    ....

FPTN_
 Sect OctLoc
   2     000   000000 006000                                                    ....

CRLF_
 Sect OctLoc
   2     001   015012 ******                                                    ....

(unnamed)
 Sect OctLoc
   2     002   125124 114040   103114 124040   115114 124040   120114 124040    UTL CLT MLT PLT
   2     006   123114 124040                                                    SLT

(unnamed)
 Sect OctLoc
   4     000   000001 400000   000000 000077   777777 400007   000064 006000    .......?.....4..
   4     004   000132 006000   000065 006000   000124 006000   000125 206000    .Z...5...T...U..
   4     010   777777 747777   777777 770000   000077 006000   000001 777776    .........?......
   4     014   000036 006000   000134 006000   677777 777777   577777 777777    .....\..........
   4     020   077777 700000   777777 577777   003550 006000   000140 006000    ?............`..
   4     024   006030 006000   777777 757777   777777 677777   072040 040040    ............:
   4     030   055040 040040   000024 777640                                    -   ....
     1762    10726
     1763    10727    2   END TOO$COURTESY_CALL;
     1764    10728    1   END TOO$TOLTS_MMES ;

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:225  
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOO$TOLTS_MMES.
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:226  

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    35- 10728    529   113     3      0  y   y    4   1 TOO$TOLTS_MMES
  1  9158-  9171      6     4     3    466  y   y    2     2 TOO$MME_ABSTIM
  2  9178-  9188      3     4     3    505  y   y    2     2 TOO$MME_ACCWRT
  3  9208-  9244     24     8     3    513  y   y    2     2 TOO$MME_CONTML
  4  9252-  9261      3     2     3    611  y   y    1     2 TOO$MME_DISPRT
  5  9298-  9565    102    33     3    617  y   y    9     2 TOO$MME_GECALL
  6  9409-  9564     78    21     3    732  y   y    0      3 TOO$READ_TEST_PAGE
  7  9481-  9501     14     1     3   1053  y   y    0       4 TOO$SET_GECALL_KEY
  8  9503-  9535     23     4     3   1123  y   y    0       4 TOO$SETUP_DCW_LIST
  9  9537-  9563     18     2     3   1232  y   y    0       4 TOO$RETURN_TEST_PAGE_STATS
 10  9604-  9637     18    10     3   1335  y   y    2     2 TOO$MME_GEMORE
 11  9663-  9698     16    16     3   1430  y   y    4     2 TOO$MME_GEMREL
 12  9706-  9717      3     6     3   1511  y   y    3     2 TOO$MME_GEPROC
 13  9744-  9762     11     2     3   1517  y   y    1     2 TOO$MME_GERELC
 14  9778-  9791      7     2     3   1544  y   y    1     2 TOO$MME_GEROAD
 15  9801-  9811      3     4     3   1563  y   y    2     2 TOO$MME_GESNAP
 16  9828-  9850     10     8     3   1571  y   y    3     2 TOO$MME_GETIME
 17  9878-  9906     18     5     3   1631  y   y    2     2 TOO$MME_GEWAKE
 18  9919-  9933      5     6     3   1674  y   y    2     2 TOO$MME_PROCTM
 19  9971- 10049     20    30     3   1712  y   y    3     2 TOO$MME_READIO
 20 10057- 10066      3     2     3   2041  y   y    1     2 TOO$MME_SETPR2
 21 10074- 10083      3     2     3   2047  y   y    1     2 TOO$MME_SETPRT
 22 10138- 10541    167    51     3   2055  y   y    8     2 TOO$MME_TADIOD
 23 10308- 10355     27     2     3   2446  y   y    0      3 TOO$PROCESS_IO_REQ
 24 10367- 10387      9     7     3   2675  y   y    1      3 TOO$SERVICE_WRITE_REQ
 25 10405- 10505     47    13     3   2742  y   y    2      3 TOO$BREAK_MESSAGE
 26 10484- 10504     12     4     3   3164  y   y    2       4 TOO$FORMAT_SIMULATED_PROMPT
 27 10517- 10540     12     7     3   3264  y   y    1      3 TOO$SERVICE_W_R_REQ
 28 10548- 10564      8     4     3   3355  y   y    2     2 TOO$MME_TERMIN
 29 10575- 10596     12     5     3   3372  y   y    2     2 TOO$MME_TOLDIS
 30 10603- 10612      3     4     3   3440  y   y    2     2 TOO$MME_TOLGON
 31 10621- 10632      4     4     3   3446  y   y    2     2 TOO$MME_TOLTIN
 32 10652- 10661      3     2     3   3462  y   y    1     2 TOO$MME_TRACIO
 33 10683- 10727     22    13     3   3471  y   y    1     2 TOO$COURTESY_CALL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:227  

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              35   3      0 Proc    0                              9087   3      2 If      0
$$$$$$$$$$  9088   3      5 DoCase  0                              9089   3     45 Case    0
  $$$$$$$$  9090   3     45 Call    0                              9092   3    100 Case    0
         $  9093   3    100 Call    0                              9094   3    110 Case    0
       $$$  9095   3    110 Call    0                              9096   3    125 Case    0
            9097   3    125 Call    0                              9098   3    132 Case    0
            9099   3    132 Call    0                              9100   3    137 Case    0
         $  9101   3    137 Call    0                              9102   3    147 Case    0
       $$$  9103   3    147 Call    0                              9104   3    162 Case    0
         $  9105   3    162 Call    0                              9106   3    171 EndCse  0
$$$$$$$$$$  9107   3    172 DoCase  0                              9108   3    252 Case    0
         $  9109   3    252 Call    0                              9110   3    262 Case    0
         $  9111   3    262 Call    0                              9112   3    272 Case    0
         $  9113   3    272 Call    0                              9114   3    302 Case    0
            9115   3    302 Call    0                              9116   3    307 Case    0
       $$$  9117   3    307 Call    0                              9118   3    322 Case    0
         $  9119   3    322 Call    0                              9120   3    332 Case    0
       $$$  9121   3    332 Call    0                              9122   3    345 Case    0
            9123   3    345 Call    0                              9124   3    352 Case    0
            9125   3    352 Call    0                              9126   3    357 Case    0
         $  9127   3    357 Call    0                              9128   3    367 Case    0
  $$$$$$$$  9129   3    367 Call    0                              9131   3    421 Case    0
         $  9132   3    421 Call    0                              9133   3    431 Case    0
         $  9134   3    431 Call    0                              9135   3    441 Case    0
         $  9136   3    441 Call    0                              9137   3    451 Case    0
         $  9138   3    451 Call    0                              9139   3    461 Case    0
            9140   3    461 Call    0                              9141   3    465 EndCse  0
            9142   3    465 Return  0                              9158   3    466 Proc    1
            9165   3    467 Assign  1                  $$$$$$$$$$  9166   3    471 MonCal  1
         $  9167   3    474 Assign  1                              9168   3    500 Assign  1
            9169   3    503 Return  1                              9178   3    505 Proc    2
            9185   3    506 Assign  2                              9186   3    511 Return  2
            9208   3    513 Proc    3                  $$$$$$$$$$  9220   3    514 If      3
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:228  
            9221   3    523 Do      3                              9222   3    523 Assign  3
            9223   3    525 DoWhil  3                              9224   3    526 Assign  3
       $$$  9225   3    531 EndWhi  3                              9226   3    550 If      3
            9227   3    552 Do      3                   $$$$$$$$$  9228   3    552 Assign  3
            9229   3    556 Assign  3                              9230   3    561 EndDo   3
            9231   3    562 Do      3                              9232   3    562 Assign  3
 $$$$$$$$$  9233   3    564 Assign  3                     $$$$$$$  9234   3    570 Assign  3
            9235   3    573 Assign  3                              9236   3    576 EndDo   3
            9237   3    576 EndDo   3                              9238   3    577 Do      3
            9239   3    577 Assign  3                              9240   3    603 Call    3
            9241   3    607 EndDo   3                              9242   3    607 Return  3
            9252   3    611 Proc    4                              9258   3    612 Assign  4
            9259   3    615 Return  4                              9298   3    617 Proc    5
            9332   3    620 If      5                              9333   3    623 Do      5
            9334   3    623 Assign  5                              9335   3    627 Call    5
            9336   3    633 EndDo   5                              9337   3    633 Call    5
         $  9338   3    635 Assign  5                              9339   3    642 DoIndx  5
            9340   3    643 Assign  5                              9341   3    645 Assign  5
            9342   3    650 EndInd  5                          $$  9343   3    655 Assign  5
            9344   3    661 Assign  5                              9345   3    663 Assign  5
            9346   3    666 If      5                     $$$$$$$  9347   3    671 Assign  5
      $$$$  9348   3    707 Assign  5                              9349   3    721 If      5
            9350   3    723 Do      5                              9351   3    723 Assign  5
            9352   3    725 Call    5                              9353   3    730 EndDo   5
            9355   3    730 Return  5                              9409   3    732 Proc    6
            9453   3    733 Call    6                              9454   3    735 Call    6
            9455   3    737 Assign  6                              9456   3    742 Assign  6
            9457   3    744 Assign  6                              9458   3    746 Assign  6
            9459   3    750 Assign  6                              9460   3    751 Assign  6
            9461   3    752 Assign  6                           $  9462   3    755 Assign  6
         $  9463   3    761 Assign  6                     $$$$$$$  9464   3    765 Call    6
            9466   3   1010 Do      6                              9467   3   1010 Assign  6
            9468   3   1013 Assign  6                      $$$$$$  9469   3   1014 Call    6
            9471   3   1036 EndDo   6                              9472   3   1036 Call    6
            9473   3   1040 Return  6                              9476   3   1042 Assign  6 LOAD_ERROR
            9477   3   1046 Call    6                              9481   3   1053 Proc    7
       $$$  9487   3   1054 DoCase  7                              9488   3   1067 Case    7
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:229  
            9489   3   1067 Assign  7                              9490   3   1073 Case    7
            9491   3   1073 Assign  7                              9492   3   1077 Case    7
            9493   3   1077 Assign  7                              9494   3   1103 Case    7
            9495   3   1103 Assign  7                              9496   3   1106 EndCse  7
            9497   3   1106 Assign  7                          $$  9498   3   1110 Call    7
            9499   3   1121 Return  7                              9503   3   1123 Proc    8
    $$$$$$  9512   3   1124 Assign  8                              9513   3   1140 Assign  8
            9514   3   1144 If      8                              9515   3   1146 Do      8
            9516   3   1146 Assign  8                              9517   3   1152 Call    8
            9518   3   1156 EndDo   8                              9519   3   1157 Do      8
            9520   3   1157 Assign  8                              9521   3   1164 Assign  8
            9522   3   1167 Assign  8                              9523   3   1173 Assign  8
            9524   3   1175 DoIndx  8                              9525   3   1177 Assign  8
            9526   3   1203 Assign  8                              9527   3   1207 Assign  8
            9528   3   1211 EndInd  8                              9529   3   1216 Assign  8
            9530   3   1221 Assign  8                              9531   3   1226 Assign  8
            9532   3   1230 EndDo   8                              9533   3   1230 Return  8
            9537   3   1232 Proc    9                              9544   3   1233 Assign  9
            9545   3   1234 Assign  9                              9546   3   1235 DoWhil  9
      $$$$  9547   3   1236 If      9                              9548   3   1246 Assign  9
            9549   3   1251 Assign  9                           $  9550   3   1254 EndWhi  9
            9551   3   1264 If      9                              9552   3   1270 Assign  9
       $$$  9553   3   1272 Assign  9                           $  9554   3   1300 Assign  9
        $$  9555   3   1304 Assign  9                         $$$  9556   3   1311 Assign  9
            9558   3   1317 Assign  9                              9559   3   1322 Assign  9
        $$  9560   3   1325 Assign  9                              9561   3   1331 Return  9
            9564   3   1333 EndPrc  6                              9604   3   1335 Proc   10
            9617   3   1336 If     10                           $  9618   3   1341 Assign 10
            9619   3   1345 Do     10                              9620   3   1345 Assign 10
            9621   3   1350 Assign 10                  $$$$$$$$$$  9622   3   1354 MonCal 10
            9623   3   1360 DoIndx 10                              9624   3   1362 Assign 10
         $  9625   3   1366 Assign 10                              9626   3   1373 EndInd 10
       $$$  9627   3   1401 Assign 10                              9628   3   1414 Assign 10
            9629   3   1416 Assign 10                              9630   3   1421 EndDo  10
            9631   3   1421 Return 10                              9634   3   1423 Assign 10 DENY_MEM_REQ
            9635   3   1426 Return 10                              9663   3   1430 Proc   11
            9682   3   1431 If     11                              9683   3   1434 Do     11
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:230  
            9684   3   1434 Assign 11                              9685   3   1440 Call   11
            9686   3   1444 EndDo  11                              9687   3   1445 Do     11
      $$$$  9688   3   1445 Assign 11                              9689   3   1452 Assign 11
            9690   3   1453 Assign 11                  $$$$$$$$$$  9691   3   1456 MonCal 11
        $$  9692   3   1461 Assign 11                              9693   3   1472 Assign 11
     $$$$$  9694   3   1474 Assign 11                              9695   3   1507 EndDo  11
            9696   3   1507 Return 11                              9706   3   1511 Proc   12
            9714   3   1512 Assign 12                              9715   3   1515 Return 12
            9744   3   1517 Proc   13                              9750   3   1520 If     13
            9751   3   1522 Do     13                              9752   3   1522 Assign 13
            9753   3   1524 DoWhil 13                              9754   3   1527 Assign 13
$$$$$$$$$$  9755   3   1531 MonCal 13                              9756   3   1534 EndWhi 13
            9757   3   1537 EndDo  13                              9759   3   1537 Assign 13
            9760   3   1542 Return 13                              9778   3   1544 Proc   14
            9784   3   1545 DoWhil 14                              9785   3   1547 Assign 14
$$$$$$$$$$  9786   3   1551 MonCal 14                              9787   3   1554 EndWhi 14
            9788   3   1556 Assign 14                              9789   3   1561 Return 14
            9801   3   1563 Proc   15                              9808   3   1564 Assign 15
            9809   3   1567 Return 15                              9828   3   1571 Proc   16
            9838   3   1572 Assign 16                              9839   3   1574 Assign 16
$$$$$$$$$$  9841   3   1576 MonCal 16                              9842   3   1601 Assign 16
        $$  9843   3   1603 Call   16                              9844   3   1613 Assign 16
         $  9846   3   1616 Call   16                              9847   3   1624 Assign 16
            9848   3   1627 Return 16                              9878   3   1631 Proc   17
      $$$$  9886   3   1632 Assign 17                              9887   3   1636 If     17
            9889   3   1640 If     17                              9890   3   1643 Do     17
       $$$  9891   3   1643 Assign 17                  $$$$$$$$$$  9892   3   1645 MonCal 17
            9893   3   1650 EndDo  17                              9894   3   1651 Do     17
            9895   3   1651 Assign 17                         $$$  9896   3   1654 If     17
            9897   3   1660 Do     17                         $$$  9898   3   1660 Assign 17
$$$$$$$$$$  9899   3   1663 MonCal 17                              9900   3   1666 EndDo  17
            9902   3   1666 EndDo  17                          $$  9903   3   1666 Assign 17
            9904   3   1672 Return 17                              9919   3   1674 Proc   18
            9928   3   1675 Assign 18                          $$  9929   3   1700 Assign 18
            9930   3   1705 Assign 18                              9931   3   1710 Return 18
            9971   3   1712 Proc   19                          $$ 10023   3   1713 Assign 19
         $ 10024   3   1723 Assign 19                             10025   3   1730 Assign 19
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:231  
           10026   3   1732 Assign 19                           $ 10027   3   1735 Assign 19
           10030   3   1742 Assign 19                             10031   3   1745 DoWhil 19
         $ 10032   3   1751 Assign 19                           $ 10033   3   1754 EndWhi 19
       $$$ 10034   3   1761 Call   19                           $ 10037   3   1775 DoIndx 19
  $$$$$$$$ 10038   3   2001 Assign 19                             10039   3   2014 EndInd 19
           10042   3   2022 Assign 19                             10043   3   2024 Assign 19
           10044   3   2026 Assign 19                             10045   3   2030 Assign 19
        $$ 10046   3   2033 Assign 19                             10047   3   2037 Return 19
           10057   3   2041 Proc   20                             10063   3   2042 Assign 20
           10064   3   2045 Return 20                             10074   3   2047 Proc   21
           10080   3   2050 Assign 21                             10081   3   2053 Return 21
           10138   3   2055 Proc   22                             10199   3   2056 Assign 22
           10201   3   2061 Assign 22                             10202   3   2062 Assign 22
           10203   3   2065 Assign 22                             10204   3   2070 Assign 22
           10205   3   2073 Assign 22                             10206   3   2076 Assign 22
         $ 10208   3   2101 Assign 22                             10209   3   2111 If     22
           10210   3   2113 Do     22                           $ 10211   3   2113 Assign 22
           10212   3   2121 Assign 22                             10213   3   2124 Return 22
           10215   3   2126 DoIndx 22                             10216   3   2131 If     22
           10217   3   2136 Do     22                             10218   3   2136 Assign 22
           10219   3   2142 Call   22                             10220   3   2146 EndDo  22
        $$ 10221   3   2146 EndInd 22                             10224   3   2160 DoIndx 22 ALLOC_IO_BUFFER
       $$$ 10225   3   2162 If     22                             10226   3   2171 Do     22
        $$ 10227   3   2171 Assign 22                             10228   3   2177 Assign 22
           10229   3   2201 GoTo   22                             10231   3   2202 EndInd 22
           10234   3   2207 Assign 22 NEXT_ENTRY                  10235   3   2212 Assign 22
      $$$$ 10236   3   2214 Assign 22                           $ 10237   3   2225 Assign 22
       $$$ 10239   3   2232 Assign 22                          $$ 10240   3   2241 Assign 22
        $$ 10241   3   2247 Assign 22                          $$ 10242   3   2255 Assign 22
           10243   3   2263 Assign 22                             10245   3   2266 Assign 22
           10247   3   2270 Assign 22                             10248   3   2271 Assign 22
           10250   3   2272 Assign 22 NEXT_DCW_WD               $ 10251   3   2275 Assign 22
           10252   3   2305 Assign 22                             10254   3   2307 Assign 22
           10255   3   2311 DoIndx 22                           $ 10256   3   2313 Assign 22
           10257   3   2317 Assign 22                             10258   3   2321 Assign 22
       $$$ 10259   3   2324 EndInd 22                          $$ 10261   3   2340 DoCase 22
           10262   3   2350 Case   22                           $ 10263   3   2350 If     22
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:232  
           10264   3   2360 Do     22                             10265   3   2360 Assign 22
           10266   3   2364 Call   22                             10267   3   2370 EndDo  22
           10268   3   2371 Do     22                       $$$$$ 10269   3   2371 Assign 22
        $$ 10270   3   2401 Call   22                         $$$ 10271   3   2411 Assign 22
      $$$$ 10272   3   2417 Assign 22                             10273   3   2427 EndDo  22
           10274   3   2427 If     22                             10276   3   2431 Do     22
           10277   3   2431 Call   22                           $ 10278   3   2433 Assign 22
           10279   3   2437 EndDo  22                             10280   3   2440 Case   22
           10281   3   2440 Assign 22                             10282   3   2443 GoTo   22
           10283   3   2444 EndCse 22                             10284   3   2444 Return 22
           10308   3   2446 Proc   23                             10315   3   2447 Assign 23
           10318   3   2451 If     23 START_LOOP                  10318   3   2454 Return 23
           10319   3   2456 Assign 23                         $$$ 10321   3   2460 If     23
        $$ 10324   3   2467 If     23                          $$ 10327   3   2476 Assign 23
      $$$$ 10328   3   2504 Assign 23                  $$$$$$$$$$ 10330   3   2515 If     23
           10333   3   2560 Do     23                             10334   3   2560 Assign 23
           10335   3   2564 Call   23                             10336   3   2570 EndDo  23
      $$$$ 10338   3   2570 If     23                             10339   3   2600 Do     23
        $$ 10340   3   2600 Assign 23                         $$$ 10341   3   2606 Assign 23
           10342   3   2615 Call   23                             10343   3   2621 GoTo   23
 $$$$$$$$$ 10345   3   2622 If     23                             10347   3   2651 Do     23
        $$ 10348   3   2651 Assign 23                         $$$ 10349   3   2657 Assign 23
           10350   3   2666 Call   23                             10351   3   2672 GoTo   23
           10353   3   2673 Return 23                             10367   3   2675 Proc   24
           10378   3   2676 Assign 24                        $$$$ 10379   3   2700 Assign 24
           10380   3   2710 Assign 24                             10381   3   2712 Assign 24
     $$$$$ 10382   3   2714 Assign 24                           $ 10383   3   2726 Call   24
           10384   3   2734 Call   24                             10385   3   2740 Return 24
           10405   3   2742 Proc   25                             10423   3   2743 Assign 25
           10426   3   2747 Assign 25                     $$$$$$$ 10427   3   2750 IntCal 25
           10431   3   2766 DoWhil 25                             10432   3   2771 Assign 25
    $$$$$$ 10433   3   2774 IntCal 25                             10437   3   3010 EndWhi 25
           10440   3   3013 DoWhil 25                             10442   3   3015 If     25
           10443   3   3020 Assign 25                             10444   3   3023 Assign 25
           10446   3   3026 If     25                             10447   3   3031 Do     25
         $ 10448   3   3031 If     25                          $$ 10449   3   3035 Call   25
           10450   3   3044 Assign 25                        $$$$ 10451   3   3046 Assign 25
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:233  
         $ 10454   3   3060 If     25                             10455   3   3064 Call   25
           10456   3   3070 Call   25                             10457   3   3073 Assign 25
           10458   3   3076 EndDo  25                             10459   3   3077 Do     25
      $$$$ 10460   3   3077 Assign 25                             10463   3   3111 Call   25
           10466   3   3114 Assign 25                      $$$$$$ 10467   3   3117 IntCal 25
           10471   3   3133 DoWhil 25                             10472   3   3136 Assign 25
    $$$$$$ 10473   3   3141 IntCal 25                             10477   3   3155 EndWhi 25
           10478   3   3160 EndDo  25                             10479   3   3160 EndWhi 25
           10480   3   3162 Return 25                             10484   3   3164 Proc   26
        $$ 10491   3   3165 Assign 26                         $$$ 10492   3   3171 DoWhil 26
         $ 10493   3   3201 Assign 26                         $$$ 10494   3   3205 EndWhi 26
$$$$$$$$$$ 10495   3   3215 If     26                             10497   3   3245 Assign 26
           10498   3   3251 Do     26                          $$ 10499   3   3251 Assign 26
           10500   3   3257 Assign 26                             10501   3   3262 EndDo  26
           10502   3   3262 Return 26                             10517   3   3264 Proc   27
           10528   3   3265 Assign 27                        $$$$ 10529   3   3267 Assign 27
           10530   3   3277 Assign 27                       $$$$$ 10531   3   3301 Assign 27
           10532   3   3313 Assign 27                           $ 10533   3   3315 Call   27
      $$$$ 10534   3   3323 Assign 27                        $$$$ 10535   3   3334 Assign 27
           10536   3   3344 Call   27                             10537   3   3347 Call   27
           10538   3   3353 Return 27                             10548   3   3355 Proc   28
           10555   3   3356 If     28                             10556   3   3360 Do     28
           10557   3   3360 Assign 28                             10558   3   3362 Call   28
           10559   3   3365 EndDo  28                             10561   3   3365 Call   28
           10562   3   3370 Return 28                             10575   3   3372 Proc   29
$$$$$$$$$$ 10584   3   3373 If     29                             10585   3   3410 Do     29
 $$$$$$$$$ 10586   3   3410 Assign 29                     $$$$$$$ 10587   3   3416 Assign 29
           10588   3   3421 Assign 29                             10589   3   3424 Return 29
           10591   3   3426 Do     29                             10592   3   3426 Assign 29
           10593   3   3432 Call   29                             10594   3   3436 EndDo  29
           10596   3   3436 EndPrc 29                             10603   3   3440 Proc   30
           10610   3   3441 Assign 30                             10611   3   3444 Return 30
           10621   3   3446 Proc   31                           $ 10628   3   3447 Call   31
           10629   3   3455 Assign 31                             10630   3   3460 Return 31
           10652   3   3462 Proc   32                          $$ 10658   3   3463 Assign 32
           10659   3   3467 Return 32                             10683   3   3471 Proc   33
         $ 10701   3   3472 If     33                             10702   3   3476 Assign 33
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:234  
        $$ 10705   3   3500 Assign 33                             10706   3   3506 Assign 33
      $$$$ 10707   3   3510 Assign 33                         $$$ 10708   3   3521 Assign 33
        $$ 10710   3   3531 If     33                             10711   3   3540 Assign 33
           10712   3   3543 Do     33                             10713   3   3543 Assign 33
        $$ 10714   3   3545 Assign 33                         $$$ 10715   3   3553 Assign 33
           10716   3   3562 EndDo  33                             10717   3   3562 Assign 33
           10719   3   3565 Assign 33                             10720   3   3567 Assign 33
           10721   3   3571 Assign 33                             10722   3   3572 Assign 33
           10723   3   3574 Assign 33                         $$$ 10724   3   3576 Call   33
           10725   3   3610 Return 33

  **** Statement type totals  ****

   215 Assign    61 Call       8 MonCal    35 If        30 Case       4 GoTo
    37 Return     4 IntCal     7 DoIndx     9 DoWhil     4 DoCase    32 Do
     7 EndInd     9 EndWhi     4 EndCse    27 EndDo     34 Proc       2 EndPrc
     6 Labels

 # major stmts=  384 Code/major= 5.02 # stmts=  529 Code/stmt= 3.64  Point total=107.5
 Cost/major stmt=  5.5 Cost/stmt=  4.0 Total cost=   2139.7

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$$$
   6-8  $$$$$$
  8-10  $$$$$
 10-12  $$$
 12-14
 14-16  $
 16-18  $
 18-20
 20-22
 22-??  $$$
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:235  

 **** Variables and constants ****

  ****  Section 001  Data  TOO$TOLTS_MMES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    36-0-0/c CHAR        r     1 DATE_BUFFER_ASCII(0:5)
   134-0-0/b UBIN(6)     r     1 DATE_BUFFER_BCD(0:5)
   136-0-0/w PTR         r     1 DCW_DATA_PTR             137-0-0/w PTR         r     1 DCW_LIST_PTR
    56-0-0/d STRC(72)    r     1 GEMREL_VEC               135-0-0/w UBIN        r     1 GEWAKE_COUNT
  6030-0-0/w SBIN(18)    r     1 I                         60-0-0/w SBIN(18)    r     1 IONUM
   132-0-0/w UBIN        r     1 STATUS(0:1)               61-0-0/w UBIN        r     1 TIME_BUFFER
   140-0-0/c CHAR        r     1 WRITE_BUF_ASCII(0:7199)
   140-0-0/c CHAR(7200)  r     1 WRITE_BUF_ASCII_REDEF
  3550-0-0/b UBIN(6)     r     1 WRITE_BUF_BCD(0:7199)
  3550-0-0/w UBIN        r     1 WRITE_BUF_BCD_REDEF(0:1199)

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    65-0-0/b STRC(360)   r     1 CALL_SEQUENCE
    65-0-0/b UBIN(18)    r         2 DCWLIST_ADR
    65-2-0/b UBIN(18)    r         2 STATUS_ADR

    77-0-0/b STRC        r     1 DCWLIST(0:20)
    77-0-0/b UBIN(18)    r         2 ADR
    77-2-4/b UBIN(2)     r         2 TYPE
    77-2-6/b UBIN(12)    r         2 WORD_COUNT

   136-0-0/b STRC        r     1 DCW_DATA_PTR_FORMAT
   136-0-0/b UBIN(18)    r         2 DCW_DATA_ADDR

   137-0-0/b STRC        r     1 DCW_LIST_PTR_FORMAT
   137-0-0/b UBIN(18)    r         2 DCW_LIST_ADDR

     0-0-0/d STRC(216)   r     1 FDP_FPT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:236  
     4-0-0/d STRC        r         2 V
     4-0-0/w UBIN        r          3 PAGES#

     6-0-0/d STRC(216)   r     1 GDP_FPT
    12-0-0/d STRC        r         2 V
    12-0-0/w UBIN        r          3 PAGES#

    54-0-0/d STRC(72)    r     1 GEMORE_VEC
    55-0-0/w PTR         r         2 PTR$

    40-0-0/b STRC        r     1 ID_CODE_TBL(0:11)
    40-2-6/b UBIN(12)    r         2 ASSGN_FLAG

   124-0-0/c STRC(216)   r     1 KEY_VALUE
   124-1-0/c CHAR(3)     r         2 CATA
   125-1-0/c CHAR(6)     r         2 GECALL_NAME

    14-0-0/d STRC(432)   r     1 TIME_FPT
    26-0-0/d STRC        r         2 V
    26-0-0/b UBIN(9)     r          3 SOURCE#
    26-1-0/b UBIN(9)     r          3 DEST#

    64-0-0/w STRC        r     1 TOO_ERROR_CODE
    64-2-1/b UBIN(14)    r         2 ERR#

    30-0-0/d STRC(216)   r     1 WAIT_FPT
    34-0-0/d STRC(72)    r         2 V
    34-0-0/w UBIN        r          3 UNITS#

    62-0-0/d STRC(72)    r     1 WRITE_BUF_VECTOR
    62-0-0/b UBIN(20)    r         2 BOUNDS
    63-0-0/b UBIN(18)    r         2 BASE
    63-2-6/b UBIN(12)    r         2 SEGID


  ****  Section 002 RoData TOO$TOLTS_MMES

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:237  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/c CHAR(2)     r     1 CRLF                       1-0-0/c STRC(18)    r     1 CRLF_
     0-0-0/w STRC        r     1 FPTN_                      0-0-0/w PTR         r     1 IS$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    23-0-0/w PTR         r     1 @ABSTIM_BUF               17-0-0/w PTR         r     1 @ADDRESS
    20-0-0/w PTR         r     1 @ADDRESS_A                21-0-0/w PTR         r     1 @ADDRESS_B
    22-0-0/w PTR         r     1 @A_REG                    55-0-0/w PTR         r     1 @BUF_INDEX
    51-0-0/w PTR         r     1 @BUF_NUM                  51-0-0/w PTR         r     1 @BUF_NUM
    17-0-0/w PTR         r     1 @CONTROLLING              17-0-0/w PTR         r     1 @CPU_TIME
    17-0-0/w PTR         r     1 @DATE_BUFFER              17-0-0/w PTR         r     1 @EXEC_NUM
    20-0-0/w PTR         r     1 @GETIME_BUFFER            23-0-0/w PTR         r     1 @GEWAKE_TIME
    17-0-0/w PTR         r     1 @ID                       17-0-0/w PTR         r     1 @IO_CONTROL
    17-0-0/w PTR         r     1 @LID                       3-0-0/w PTR         r     1 @MME
    24-0-0/w PTR         r     1 @MME_IC                   21-0-0/w PTR         r     1 @MME_IC
     5-0-0/w PTR         r     1 @MME_INSTR$                4-0-0/w PTR         r     1 @MREG
    56-0-0/w PTR         r     1 @MSG$                     65-0-0/w PTR         r     1 @MSG_LGTH
    20-0-0/w PTR         r     1 @NUMBER_OF_REQUESTS       66-0-0/w PTR         r     1 @OUT_LGTH
    21-0-0/w PTR         r     1 @PARAM_0                  17-0-0/w PTR         r     1 @PARAM_1
    17-0-0/w PTR         r     1 @PARAM_1                  17-0-0/w PTR         r     1 @PARAM_1
    22-0-0/w PTR         r     1 @PARAM_1                  20-0-0/w PTR         r     1 @PARAM_2
    23-0-0/w PTR         r     1 @PARAM_2                  24-0-0/w PTR         r     1 @PARAM_3
    25-0-0/w PTR         r     1 @PARAM_4                  20-0-0/w PTR         r     1 @PARAM_ADDR
    25-0-0/w PTR         r     1 @P_X2REG                  26-0-0/w PTR         r     1 @P_X3REG
    23-0-0/w PTR         r     1 @Q_REG                     6-0-0/w PTR         r     1 @RETURN_DELTA
    24-0-0/w PTR         r     1 @RETURN_DELTA             20-0-0/w PTR         r     1 @RETURN_DELTA
    20-0-0/w PTR         r     1 @RETURN_DELTA             17-0-0/w PTR         r     1 @RETURN_DELTA
    27-0-0/w PTR         r     1 @RETURN_DELTA             20-0-0/w PTR         r     1 @RETURN_DELTA
    22-0-0/w PTR         r     1 @RETURN_DELTA             21-0-0/w PTR         r     1 @RETURN_DELTA
    17-0-0/w PTR         r     1 @RETURN_DELTA             17-0-0/w PTR         r     1 @RETURN_DELTA
    20-0-0/w PTR         r     1 @RETURN_DELTA             21-0-0/w PTR         r     1 @RETURN_DELTA
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:238  
    24-0-0/w PTR         r     1 @RETURN_DELTA             20-0-0/w PTR         r     1 @RETURN_DELTA
    21-0-0/w PTR         r     1 @RETURN_DELTA             17-0-0/w PTR         r     1 @RETURN_DELTA
    17-0-0/w PTR         r     1 @RETURN_DELTA             26-0-0/w PTR         r     1 @RETURN_DELTA
    20-0-0/w PTR         r     1 @RETURN_DELTA             20-0-0/w PTR         r     1 @RETURN_DELTA
    20-0-0/w PTR         r     1 @RETURN_DELTA             20-0-0/w PTR         r     1 @RETURN_DELTA
    17-0-0/w PTR         r     1 @RETURN_DELTA             55-0-0/w PTR         r     1 @SERVICE_TYPE
    17-0-0/w PTR         r     1 @TEST_PG_NAME             17-0-0/w PTR         r     1 @TIME_PARAM
    17-0-0/w PTR         r     1 @WD1                      20-0-0/w PTR         r     1 @WORDS
    17-0-0/w PTR         r     1 @X1                       *0-0-0/w UBIN        r     1 ABSTIM_BUF
    *0-0-0/w UBIN        r     1 ADDRESS                   *0-0-0/w UBIN        r     1 ADDRESS_A
    *0-0-0/w UBIN        r     1 ADDRESS_B                 *0-0-0/w UBIN        r     1 A_REG
    23-0-0/w PTR         r     1 BUFFER$                   56-0-0/w PTR         r     1 BUFFER_PTR
    52-0-0/w PTR         r     1 BUF_ADDR                  53-0-0/w PTR         r     1 BUF_ADDR
    *0-0-0/w SBIN(18)    r     1 BUF_INDEX                 27-0-0/w SBIN(18)    r     1 BUF_NUM
    *0-0-0/w SBIN(18)    r     1 BUF_NUM                   *0-0-0/w SBIN(18)    r     1 BUF_NUM
     7-0-0/w SBIN        r     1 CHAR_COUNT                30-0-0/w SBIN(18)    r     1 CHECK
    *0-0-0/h STRC(18)    r     1 CONTROLLING               *0-0-0/w SBIN        r     1 CPU_TIME
    21-0-0/w PTR         r     1 CPU_TIME_PTR              57-0-0/w UBIN        r     1 CRLF_INDEX
    *0-0-0/w UBIN        r     1 DATE_BUFFER
    *0-0-0/w UBIN(6)     r     1 DATE_BUF_TEMP(0:5)
    37-0-0/w PTR         r     1 DCWLIST$                  31-0-0/w PTR         r     1 DUMMY$
    35-0-0/w CHAR(4)     r     1 EDIT_NAME                 57-0-0/w UBIN        r     1 ENTRY_A
    60-0-0/w UBIN        r     1 ENTRY_B                   36-0-0/w UBIN        r     1 ERROR_CODE
    *0-0-0/h UBIN(18)    r     1 EXEC_NUM                  23-0-0/w SBIN        r     1 GEMREL_PAGES
    *0-0-0/w UBIN        r     1 GETIME_BUFFER             *0-0-0/w SBIN        r     1 GEWAKE_TIME
    21-0-0/h SBIN(18)    r     1 I                         26-0-0/h SBIN(18)    r     1 I
    32-0-0/w SBIN(18)    r     1 I                         *0-0-0/h UBIN(18)    r     1 ID
    24-0-0/w PTR         r     1 INDIRECT$                 *0-0-0/w UBIN        r     1 IO_CONTROL
    30-0-0/w UBIN        r     1 J                         33-0-0/w SBIN(18)    r     1 J
    34-0-0/w SBIN(18)    r     1 K                         45-0-0/w UBIN(12)    r     1 LAST_COUNT
    45-0-0/w UBIN        r     1 LOAD_ADDR_INX             46-0-0/b BIT         r     1 LOAD_ADDR_MATCH
    40-0-0/w UBIN(18)    r     1 LOAD_OFFSET               32-0-0/w UBIN        r     1 LOAD_SIZE
    46-0-0/w UBIN(18)    r     1 LOAD_WORDS                35-0-0/w SBIN(18)    r     1 M
    41-0-0/w UBIN(18)    r     1 MAX_LOAD                  60-0-0/w UBIN        r     1 MESSAGE_SIZE
    *0-0-0/w PTR         r     1 MME_IC                    *0-0-0/w PTR         r     1 MME_IC
    *0-0-0/w PTR         r     1 MME_INSTR$                *0-0-0/w PTR         r     1 MSG$
    62-0-0/w UBIN        r     1 MSG_LGTH                  *0-0-0/w UBIN        r     1 MSG_LGTH
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:239  
    61-0-0/w UBIN        r     1 MSG_START_INDEX           47-0-0/w UBIN        r     1 N
    50-0-0/w UBIN        r     1 NUMBER_DCWS               *0-0-0/w UBIN        r     1 NUMBER_OF_REQUESTS
    36-0-0/w UBIN(18)    r     1 NUM_REQUESTS              63-0-0/w UBIN        r     1 OUT_LGTH
    *0-0-0/w UBIN        r     1 OUT_LGTH                  22-0-0/w UBIN        r     1 PAGE#
    21-0-0/w PTR         r     1 PAGE$                     22-0-0/w PTR         r     1 PARAM$
    *0-0-0/w BIT         r     1 PARAM_0                   *0-0-0/w UBIN        r     1 PARAM_1
    *0-0-0/w UBIN        r     1 PARAM_1                   *0-0-0/w UBIN        r     1 PARAM_1
    *0-0-0/w BIT         r     1 PARAM_1                   *0-0-0/w UBIN        r     1 PARAM_2
    *0-0-0/w BIT         r     1 PARAM_2                   *0-0-0/w BIT         r     1 PARAM_3
    *0-0-0/w BIT         r     1 PARAM_4                   *0-0-0/h UBIN(18)    r     1 PARAM_ADDR
    *0-0-0/h UBIN(18)    r     1 P_X2REG                   *0-0-0/h UBIN(18)    r     1 P_X3REG
    10-0-0/w UBIN        r     1 QUEUE_ENTRY(0:2)
    *0-0-0/w UBIN        r     1 Q_REG                     13-0-0/w UBIN        r     1 REQUEST_TYPE
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/h SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/h SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/h SBIN(18)    r     1 RETURN_DELTA
    44-0-0/w SBIN(18)    r     1 RETURN_DELTA_COUNT        14-0-0/w UBIN(18)    r     1 SERVICE_CODE
    53-0-0/w UBIN        r     1 SERVICE_TYPE              *0-0-0/w UBIN        r     1 SERVICE_TYPE
    52-0-0/w UBIN        r     1 SERVICE_TYPE              45-0-0/w UBIN        r     1 SIZE
    42-0-0/w PTR         r     1 STATUS$                   47-0-0/w UBIN(18)    r     1 TEMP_LID
    25-0-0/w PTR         r     1 TEST_PAGE_READ$           *0-0-0/w UBIN        r     1 TEST_PG_NAME
    *0-0-0/w UBIN        r     1 TIME_PARAM                *0-0-0/w UBIN        r     1 WD1
    *0-0-0/w UBIN        r     1 WORDS                     *0-0-0/h UBIN(18)    r     1 X1

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    *0-0-0/w STRC        r     1 ADDRESS_A_FORMAT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:240  
     0-0-0/b UBIN(18)    r         2 LOCATION_WD_1

    *0-0-0/w STRC        r     1 ADDRESS_B_FORMAT
     0-0-0/b UBIN(18)    r         2 TRANSFER_ADDR

    *0-0-0/w STRC        r     1 ADDR_BUF
     0-0-0/b UBIN(18)    r         2 RETURN_ADDR

    *0-0-0/w STRC        r     1 A_REG_FORMAT
     0-0-0/b UBIN(18)    r         2 ORIGIN
     0-2-0/b UBIN(18)    r         2 NUM_WDS

    56-0-0/b STRC        r     1 BUFFER_ADDR_FORMAT
    56-0-0/b UBIN(18)    r         2 BUF_ADDR

    23-0-0/w STRC        r     1 BUFFER_PTR
    23-0-0/b UBIN(18)    r         2 ADDRESS
    23-2-0/b UBIN(18)    r         2 SEGID

    52-0-0/w STRC        r     1 BUF_ADDR_FORMAT
    52-0-0/b UBIN(18)    r         2 BASE
    52-2-0/b UBIN(18)    r         2 SEGID

    53-0-0/w STRC        r     1 BUF_ADDR_FORMAT
    53-0-0/b UBIN(18)    r         2 BASE
    53-2-0/b UBIN(18)    r         2 SEGID

    *0-0-0/w STRC        r     1 CONTROL_CODE
     0-0-0/b UBIN(18)    r         2 TDPCN
     0-2-0/b UBIN(6)     r         2 PAD_CHAR
     0-3-0/b UBIN(3)     r         2 EXEC_NUM
     0-3-3/b UBIN(6)     r         2 LID

    37-0-0/w STRC        r     1 DCWLIST_PTR
    37-0-0/b UBIN(18)    r         2 ADR

    31-0-0/b STRC        r     1 DCW_WORD
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:241  
    31-0-0/b UBIN(18)    r         2 DATA_ADDR
    31-2-4/b UBIN(2)     r         2 CODE
    31-2-6/b UBIN(12)    r         2 WORD_COUNT

    *0-0-0/w STRC        r     1 GEMORE_PARAM
     0-0-0/b UBIN(18)    r         2 MEM_REQ
     0-2-0/b UBIN(18)    r         2 GEMORE_PAGES

    *0-0-0/w STRC        r     1 GEMREL_WDS
     0-0-0/b SBIN(18)    r         2 LOWER_MEM
     0-2-0/b SBIN(18)    r         2 UPPER_MEM

    *0-0-0/h STRC(18)    r     1 ID_
     0-0-0/b UBIN(3)     r         2 EXEC#
     0-1-3/b UBIN(6)     r         2 RLID

    *0-0-0/h STRC(18)    r     1 LID
     0-1-3/b UBIN(6)     r         2 DATA

    *0-0-0/w STRC(252)   r     1 MME
     0-0-0/b STRC        r         2 INST
     0-0-0/b SBIN(18)    r          3 NO
     1-0-0/w UBIN        r         2 WD_1
     2-0-0/w UBIN        r         2 WD_2
     3-0-0/w UBIN        r         2 WD_3
     4-0-0/w UBIN        r         2 WD_4
     5-0-0/w UBIN        r         2 WD_5
     6-0-0/w UBIN        r         2 WD_6

    *0-0-0/w STRC        r     1 MME_IC_FORMAT
     0-0-0/b UBIN(18)    r         2 IC_ADDR

    *0-0-0/w STRC        r     1 MME_IC_FORMAT
     0-0-0/b UBIN(18)    r         2 IC_ADDR

    *0-0-0/d STRC(252)   r     1 MREG
     0-2-0/b UBIN(18)    r         2 X1
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:242  
     1-0-0/b UBIN(18)    r         2 X2
     1-2-0/b UBIN(18)    r         2 X3
     2-0-0/b UBIN(18)    r         2 X4
     4-0-0/b UBIN        r         2 A
     5-0-0/b UBIN        r         2 Q

    *0-0-0/w STRC        r     1 NOR
     0-0-0/b UBIN(18)    r         2 NO

    37-0-0/b STRC        r     1 PARAMETER(0:4)
    37-0-0/b UBIN(18)    r         2 DCW_LIST_ADDR
    37-2-0/b STRC(6)     r         2 IO_REQ_BITS
    37-2-6/b UBIN(12)    r         2 WRITE_WD_CNT_BCD

    *0-0-0/w STRC        r     1 Q_REG_FORMAT
     0-0-0/b UBIN(18)    r         2 TRANSFER_ADDR

    42-0-0/w STRC        r     1 STATUS_PTR
    42-0-0/b UBIN(18)    r         2 ADR

    57-0-0/b STRC        r     1 STATUS_WD_A
    57-0-0/b BIT (18)    r         2 IO_ENTRY
    57-2-0/b UBIN(18)    r         2 TDPCN

    60-0-0/b STRC        r     1 STATUS_WD_B
    60-0-0/b UBIN(18)    r         2 BUF_ADDR
    60-2-0/b UBIN(18)    r         2 LID


  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$

  ****  Structures  ****
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:243  
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 CONSOLE_FPT
     4-0-0/w STRC(72)    r         2 BUF_

     0-0-0/d STRC(504)   r     1 READ_IO
     4-0-0/w STRC(72)    r         2 BUF_

     0-0-0/h STRC(45)    r     1 TOF$BAR
     0-0-0/h STRC(18)    r         2 CURRENT
     0-1-0/b UBIN(9)     r          3 SIZE

     0-0-0/w STRC(396)   r     1 TOQ$DCP
     0-0-0/c STRC(18)    r         2 PF
     0-0-0/b BIT         r          3 ENABLED
     0-1-0/c UBIN(9)     r          3 REASON
     4-0-0/w STRC(144)   r         2 TP
     4-0-0/c CHAR(6)     r          3 GECALL_NAME
     5-2-0/c CHAR(4)     r          3 EDIT_NAME
     7-0-0/w UBIN        r          3 ADDRESS

     0-0-0/d STRC(288)   r     1 TOT$DMC
     0-0-0/d STRC(72)    r         2 TOO$IO_BUFFER
     1-0-0/b PTR         r          3 PTR$
     2-0-0/d STRC(72)    r         2 TOP$TCP
     3-0-0/b PTR         r          3 PTR$

     0-0-0/w STRC(495)   r     1 TOT$ECP
     3-0-0/w STRC(72)    r         2 IO
     4-0-0/w SBIN        r          3 COUNT
     5-0-0/c STRC(4)     r         2 ISC
     5-0-2/b BIT         r          3 GERELC_WAIT
     6-0-0/w UBIN        r         2 DYNAMIC_PAGE_COUNT
     7-0-0/w STRC(216)   r         2 SUBEXEC
     7-0-0/w UBIN        r          3 CURRENT
    14-0-0/w SBIN        r          3 TEST_PAGE_COUNT

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:244  

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 DCW_DATA                   0-0-0/w BIT         r     1 DCW_LIST_ENTRY
     0-0-0/w UBIN        r     1 DUMMY_WORD                 0-0-0/w SBIN        r     1 EXECUTION_TIME
     0-0-0/c CHAR(7200)  r     1 MESSAGE                    0-0-0/c CHAR        r     1 MESSAGE_(0:7199)
     0-0-0/w UBIN        r     1 PAGE(0:1023)

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT
   273-0-0/w SBIN        r         2 TUEXT

     0-0-0/w STRC(65664) r     1 BUFFER
     0-0-0/b BIT         r         2 BUF_AVAILABLE_FLAG
     0-0-1/b BIT         r         2 IO_REQ_SERVICED_FLAG
     0-0-2/b BIT         r         2 READ_FLAG
     0-2-3/b UBIN(6)     r         2 PAD_CHAR
     2-0-0/b SBIN        r         2 CHAR_COUNT
  3413-0-0/c CHAR        r         2 READ_DATA(0:83)

     0-0-0/w STRC        r     1 INDIRECT
     0-2-0/b UBIN(18)    r         2 ADDRESS

     0-0-0/w STRC(108)   r     1 PARAMS
     0-0-0/b STRC        r         2 WD1
     0-2-0/b UBIN(18)    r          3 TDPCN
     1-0-0/b STRC        r         2 WD2
     1-0-0/b UBIN(18)    r          3 BUFF_ADDR

     0-0-0/c STRC(504)   r     1 TEST_PAGE_READ
     0-0-0/b UBIN(6)     r         2 DATA(0:83)

PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:245  
     0-0-0/w STRC(65664) r     1 TOO$IO_BUFFER(0:7)
     0-0-0/b UBIN        r         2 BUF_AVAILIABLE_FLAG
     0-0-1/b UBIN        r         2 IO_REQ_SERVICED_FLAG
     0-0-2/b UBIN        r         2 READ_FLAG
     0-0-3/b UBIN(18)    r         2 TDPCN
     0-2-3/b UBIN(6)     r         2 PAD_CHAR
     0-3-0/b UBIN(6)     r         2 LID
     0-3-6/b UBIN(3)     r         2 EXEC_NUM
     1-0-0/b BIT (18)    r         2 IO_ENTRY
     1-2-0/b STRC(6)     r         2 IO_REQ_BITS
     1-2-0/b UBIN        r          3 E
     1-2-1/b UBIN        r          3 R
     1-2-2/b UBIN        r          3 M
     1-2-3/b UBIN        r          3 S
     1-2-4/b UBIN        r          3 C
     1-2-5/b UBIN        r          3 P
     1-2-6/b UBIN(12)    r         2 WRITE_WD_CNT_BCD
     2-0-0/b SBIN        r         2 CHAR_COUNT
     3-0-0/c CHAR(7200)  r         2 WRITE_DATA
  3413-0-0/c CHAR(84)    r         2 READ_DATA

     0-0-0/d STRC(5904)  r     1 TOP$TCP(0:7)
    16-0-0/w STRC(162)   r         2 STATS
    16-0-0/w UBIN        r          3 LOAD_ADDR
    17-0-0/w UBIN        r          3 MAX_LOAD
    20-0-0/c CHAR(4)     r          3 EDIT_NAME
    21-0-0/c CHAR(6)     r          3 GECALL_NAME



   Procedure TOO$TOLTS_MMES requires 1930 words for executable code.
   Procedure TOO$TOLTS_MMES requires 64 words of local(AUTO) storage.

    No errors detected in file TOO$TOLTS_MMES.:E05TSI    .
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:246  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:247  
          MINI XREF LISTING

ABSTIM_BUF IN PROCEDURE TOO$MME_ABSTIM
      9160**DCL      9158--PROC     9167<<ASSIGN
ADDRESS IN PROCEDURE TOO$MME_GEMREL
      9665**DCL      9663--PROC     9666--REDEF
ADDRESS_A IN PROCEDURE TOO$MME_GECALL
      9305**DCL      9298--PROC     9306--REDEF
ADDRESS_A_FORMAT.LOCATION_WD_1 IN PROCEDURE TOO$MME_GECALL
      9307**DCL      9332>>IF       9338>>ASSIGN   9343>>ASSIGN
ADDRESS_B IN PROCEDURE TOO$MME_GECALL
      9309**DCL      9298--PROC     9310--REDEF    9346>>IF
ADDRESS_B_FORMAT.TRANSFER_ADDR IN PROCEDURE TOO$MME_GECALL
      9311**DCL      9348>>ASSIGN
ADDR_BUF.RETURN_ADDR IN PROCEDURE TOO$MME_GEMREL
      9667**DCL      9694>>ASSIGN
ALLOC_IO_BUFFER IN PROCEDURE TOO$MME_TADIOD
     10224**LABEL   10275--GOTO
A_REG IN PROCEDURE TOO$MME_GECALL
      9301**DCL      9298--PROC     9302--REDEF
A_REG_FORMAT.NUM_WDS IN PROCEDURE TOO$MME_GECALL
      9304**DCL      9344<<ASSIGN
A_REG_FORMAT.ORIGIN IN PROCEDURE TOO$MME_GECALL
      9303**DCL      9343<<ASSIGN
B$JIT.CPFLAGS1.SLEAZE
       460**DCL       460--REDEF
B$JIT.ERR.MID
       367**DCL       367--REDEF
B$JIT.JRESPEAK
       528**DCL       529--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       637**DCL       637--REDEF     638--REDEF
B$JIT.PNR
       541**DCL       541--REDEF
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:248  
B$JIT.TSLINE
       635**DCL       636--REDEF
B$JIT.TUEXT
       540**DCL      9928--ASSIGN
B$JIT$
      8682**DCL       361--IMP-PTR  9928>>ASSIGN
BUFFER.BUF_AVAILABLE_FLAG IN PROCEDURE TOO$MME_READIO
      9998**DCL     10043<<ASSIGN
BUFFER.CHAR_COUNT IN PROCEDURE TOO$MME_READIO
     10008**DCL     10030<<ASSIGN  10031>>DOWHILE 10032<<ASSIGN  10032>>ASSIGN  10034<>CALL    10037>>DOINDEX
BUFFER.IO_REQ_SERVICED_FLAG IN PROCEDURE TOO$MME_READIO
      9999**DCL     10044<<ASSIGN
BUFFER.PAD_CHAR IN PROCEDURE TOO$MME_READIO
     10002**DCL     10038>>ASSIGN
BUFFER.READ_DATA IN PROCEDURE TOO$MME_READIO
     10010**DCL     10031>>DOWHILE 10034<>CALL
BUFFER.READ_FLAG IN PROCEDURE TOO$MME_READIO
     10000**DCL     10042<<ASSIGN
BUFFER$ IN PROCEDURE TOO$MME_READIO
      9993**DCL      9994--REDEF   10030>>ASSIGN  10031>>DOWHILE 10031>>DOWHILE 10032>>ASSIGN  10032>>ASSIGN
     10034>>CALL    10034>>CALL    10037>>DOINDEX 10038>>ASSIGN  10042>>ASSIGN  10043>>ASSIGN  10044>>ASSIGN
BUFFER_ADDR_FORMAT IN PROCEDURE TOO$COURTESY_CALL
     10686**DCL     10689--REDEF
BUFFER_ADDR_FORMAT.BUF_ADDR IN PROCEDURE TOO$COURTESY_CALL
     10687**DCL     10706>>ASSIGN
BUFFER_PTR IN PROCEDURE TOO$COURTESY_CALL
     10689**DCL     10705<<ASSIGN
BUFFER_PTR.ADDRESS IN PROCEDURE TOO$MME_READIO
      9995**DCL     10025<<ASSIGN
BUFFER_PTR.SEGID IN PROCEDURE TOO$MME_READIO
      9996**DCL     10026<<ASSIGN
BUF_ADDR IN PROCEDURE TOO$SERVICE_WRITE_REQ
     10369**DCL     10370--REDEF   10379<<ASSIGN  10383<>CALL
BUF_ADDR IN PROCEDURE TOO$SERVICE_W_R_REQ
     10520**DCL     10521--REDEF   10529<<ASSIGN  10533<>CALL
BUF_ADDR_FORMAT.BASE IN PROCEDURE TOO$SERVICE_WRITE_REQ
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:249  
     10371**DCL     10380>>ASSIGN
BUF_ADDR_FORMAT.SEGID IN PROCEDURE TOO$SERVICE_WRITE_REQ
     10372**DCL     10381>>ASSIGN
BUF_ADDR_FORMAT.BASE IN PROCEDURE TOO$SERVICE_W_R_REQ
     10522**DCL     10530>>ASSIGN
BUF_ADDR_FORMAT.SEGID IN PROCEDURE TOO$SERVICE_W_R_REQ
     10523**DCL     10532>>ASSIGN
BUF_INDEX IN PROCEDURE TOO$COURTESY_CALL
     10685**DCL     10683--PROC    10701>>IF      10702<<ASSIGN  10702>>ASSIGN  10705>>ASSIGN  10707>>ASSIGN
     10708>>ASSIGN  10710>>IF      10714>>ASSIGN  10715>>ASSIGN
BUF_NUM IN PROCEDURE TOO$MME_TADIOD
     10141**DCL     10228<<ASSIGN  10236>>ASSIGN  10237>>ASSIGN  10239>>ASSIGN  10240>>ASSIGN  10241>>ASSIGN
     10242>>ASSIGN  10243>>ASSIGN  10269>>ASSIGN  10271>>ASSIGN  10272>>ASSIGN
BUF_NUM IN PROCEDURE TOO$SERVICE_WRITE_REQ
     10373**DCL     10367--PROC    10379>>ASSIGN  10382>>ASSIGN  10384<>CALL
BUF_NUM IN PROCEDURE TOO$SERVICE_W_R_REQ
     10524**DCL     10517--PROC    10529>>ASSIGN  10531>>ASSIGN  10534>>ASSIGN  10535>>ASSIGN  10537<>CALL
CALL_SEQUENCE IN PROCEDURE TOO$READ_TEST_PAGE
      9412**DCL      9455<<ASSIGN   9464<>CALL     9469<>CALL
CALL_SEQUENCE.DCWLIST_ADR IN PROCEDURE TOO$READ_TEST_PAGE
      9413**DCL      9456<<ASSIGN
CALL_SEQUENCE.STATUS_ADR IN PROCEDURE TOO$READ_TEST_PAGE
      9414**DCL      9458<<ASSIGN
CHAR_COUNT
      8960**DCL      9842<<ASSIGN   9843<>CALL    10269<<ASSIGN  10270<>CALL    10271>>ASSIGN
CHECK IN PROCEDURE TOO$MME_TADIOD
     10142**DCL     10235<<ASSIGN  10251<<ASSIGN  10251>>ASSIGN  10263>>IF
CONSOLE_FPT.BUF_
      8651**DCL     10451<<ASSIGN  10460<<ASSIGN
CONSOLE_FPT.STATION_
      8653**DCL      8653--REDEF
CONSOLE_FPT.V.DVBYTE.VFC#
      8660**DCL      8660--REDEF
CONTROLLING IN PROCEDURE TOO$MME_READIO
      9973**DCL      9971--PROC
CONTROL_CODE.EXEC_NUM IN PROCEDURE TOO$MME_TADIOD
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:250  
     10165**DCL     10241>>ASSIGN
CONTROL_CODE.LID IN PROCEDURE TOO$MME_TADIOD
     10166**DCL     10242>>ASSIGN
CONTROL_CODE.PAD_CHAR IN PROCEDURE TOO$MME_TADIOD
     10163**DCL     10240>>ASSIGN
CONTROL_CODE.TDPCN IN PROCEDURE TOO$MME_TADIOD
     10162**DCL     10239>>ASSIGN
CPU_TIME IN PROCEDURE TOO$MME_PROCTM
      9921**DCL      9919--PROC     9929<<ASSIGN
CPU_TIME_PTR IN PROCEDURE TOO$MME_PROCTM
      9922**DCL      9923--IMP-PTR  9928<<ASSIGN   9929>>ASSIGN
CRLF IN PROCEDURE TOO$BREAK_MESSAGE
     10410**DCL     10427>>CALLBLT 10433>>CALLBLT 10467>>CALLBLT 10473>>CALLBLT
CRLF_ IN PROCEDURE TOO$BREAK_MESSAGE
     10407**DCL     10410--REDEF
CRLF_INDEX IN PROCEDURE TOO$BREAK_MESSAGE
     10411**DCL     10427<<CALLBLT 10431>>DOWHILE 10433<<CALLBLT 10442>>IF      10443>>ASSIGN  10467<<CALLBLT
     10471>>DOWHILE 10473<<CALLBLT
DATE_BUFFER IN PROCEDURE TOO$MME_GETIME
      9830**DCL      9828--PROC     9831--REDEF
DATE_BUFFER_ASCII
      8961**DCL      8585--DCLINIT  8586--DCLINIT  9843<>CALL
DATE_BUFFER_BCD IN PROCEDURE TOO$MME_GETIME
      9832**DCL      9843<>CALL     9844>>ASSIGN
DATE_BUF_TEMP IN PROCEDURE TOO$MME_GETIME
      9831**DCL      9844<<ASSIGN
DCWLIST IN PROCEDURE TOO$READ_TEST_PAGE
      9427**DCL      9531--ASSIGN
DCWLIST.ADR IN PROCEDURE TOO$READ_TEST_PAGE
      9428**DCL      9521<<ASSIGN   9525<<ASSIGN   9525>>ASSIGN
DCWLIST.TYPE IN PROCEDURE TOO$READ_TEST_PAGE
      9431**DCL      9522<<ASSIGN   9526<<ASSIGN   9529<<ASSIGN
DCWLIST.WORD_COUNT IN PROCEDURE TOO$READ_TEST_PAGE
      9432**DCL      9523<<ASSIGN   9527<<ASSIGN   9530<<ASSIGN
DCWLIST$ IN PROCEDURE TOO$READ_TEST_PAGE
      9433**DCL      9434--REDEF    9531<<ASSIGN
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:251  
DCWLIST_PTR.ADR IN PROCEDURE TOO$READ_TEST_PAGE
      9435**DCL      9456>>ASSIGN
DCW_DATA IN PROCEDURE TOO$MME_TADIOD
     10143**DCL     10256>>ASSIGN
DCW_DATA_PTR IN PROCEDURE TOO$MME_TADIOD
     10147**DCL     10143--IMP-PTR 10256>>ASSIGN  10258<<ASSIGN  10258>>ASSIGN
DCW_DATA_PTR_FORMAT IN PROCEDURE TOO$MME_TADIOD
     10144**DCL     10147--REDEF
DCW_DATA_PTR_FORMAT.DCW_DATA_ADDR IN PROCEDURE TOO$MME_TADIOD
     10145**DCL     10252<<ASSIGN
DCW_LIST_ENTRY IN PROCEDURE TOO$MME_TADIOD
     10148**DCL     10250>>ASSIGN
DCW_LIST_PTR IN PROCEDURE TOO$MME_TADIOD
     10152**DCL     10148--IMP-PTR 10250>>ASSIGN  10281<<ASSIGN  10281>>ASSIGN
DCW_LIST_PTR_FORMAT IN PROCEDURE TOO$MME_TADIOD
     10149**DCL     10152--REDEF
DCW_LIST_PTR_FORMAT.DCW_LIST_ADDR IN PROCEDURE TOO$MME_TADIOD
     10150**DCL     10245<<ASSIGN
DCW_WORD IN PROCEDURE TOO$MME_TADIOD
     10153**DCL     10250<<ASSIGN
DCW_WORD.CODE IN PROCEDURE TOO$MME_TADIOD
     10157**DCL     10261>>DOCASE
DCW_WORD.DATA_ADDR IN PROCEDURE TOO$MME_TADIOD
     10154**DCL     10252>>ASSIGN
DCW_WORD.WORD_COUNT IN PROCEDURE TOO$MME_TADIOD
     10158**DCL     10251>>ASSIGN  10255>>DOINDEX
DENY_MEM_REQ IN PROCEDURE TOO$MME_GEMORE
      9634**LABEL    9622--CALLALT
DUMMY$ IN PROCEDURE TOO$MME_GECALL
      9327**DCL      9338<<ASSIGN   9340>>ASSIGN   9341<<ASSIGN   9341>>ASSIGN
DUMMY_WORD IN PROCEDURE TOO$MME_GECALL
      9326**DCL      9340<<ASSIGN
EDIT_NAME IN PROCEDURE TOO$READ_TEST_PAGE
      9425**DCL      9464<>CALL     9469<>CALL     9556>>ASSIGN   9559>>ASSIGN
ENTRY_A IN PROCEDURE TOO$COURTESY_CALL
     10693**DCL     10719>>ASSIGN
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:252  
ENTRY_B IN PROCEDURE TOO$COURTESY_CALL
     10697**DCL     10720>>ASSIGN
ERROR_CODE IN PROCEDURE TOO$READ_TEST_PAGE
      9426**DCL      9459<<ASSIGN   9464<>CALL     9468<<ASSIGN   9469<>CALL
EXECUTION_TIME IN PROCEDURE TOO$MME_PROCTM
      9923**DCL      9929>>ASSIGN
EXEC_NUM IN PROCEDURE TOO$MME_TOLGON
     10605**DCL     10603--PROC
FDP_FPT
      8553**DCL      9691<>CALL
FDP_FPT.V
      8553**DCL      8553--DCLINIT
FDP_FPT.V.PAGES#
      8554**DCL      9689<<ASSIGN
FPTN_
      8975**DCL      8978--REDEF
GDP_FPT
      8568**DCL      9622<>CALL
GDP_FPT.V
      8568**DCL      8568--DCLINIT
GDP_FPT.V.PAGES#
      8569**DCL      9620<<ASSIGN   9623>>DOINDEX
GEMORE_PARAM.GEMORE_PAGES IN PROCEDURE TOO$MME_GEMORE
      9609**DCL      9620>>ASSIGN   9621>>ASSIGN   9627>>ASSIGN
GEMORE_PARAM.MEM_REQ IN PROCEDURE TOO$MME_GEMORE
      9608**DCL      9617>>IF
GEMORE_VEC
      8991**DCL      8568--DCLINIT
GEMORE_VEC.PTR$
      8993**DCL      9624>>ASSIGN
GEMORE_VEC.W2
      8992**DCL      8993--REDEF
GEMREL_PAGES IN PROCEDURE TOO$MME_GEMREL
      9669**DCL      9688<<ASSIGN   9689>>ASSIGN   9690>>ASSIGN   9692>>ASSIGN
GEMREL_VEC
      9006**DCL      8553--DCLINIT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:253  
GEMREL_VEC.W2
      9007**DCL      9008--REDEF
GEMREL_WDS.LOWER_MEM IN PROCEDURE TOO$MME_GEMREL
      9677**DCL      9682>>IF
GEMREL_WDS.UPPER_MEM IN PROCEDURE TOO$MME_GEMREL
      9678**DCL      9688>>ASSIGN
GETIME_BUFFER IN PROCEDURE TOO$MME_GETIME
      9833**DCL      9828--PROC     9846<>CALL
GEWAKE_COUNT IN PROCEDURE TOO$MME_GEWAKE
      9882**DCL      9895<<ASSIGN   9895>>ASSIGN   9896>>IF
GEWAKE_TIME IN PROCEDURE TOO$MME_GEWAKE
      9880**DCL      9878--PROC     9886<<ASSIGN   9886>>ASSIGN   9887>>IF       9891>>ASSIGN   9898>>ASSIGN
I IN PROCEDURE TOO$MME_CONTML
      9210**DCL      9222<<ASSIGN   9223>>DOWHILE  9223>>DOWHILE  9224<<ASSIGN   9224>>ASSIGN   9226>>IF
      9232>>ASSIGN   9233>>ASSIGN
I IN PROCEDURE TOO$MME_READIO
     10018**DCL     10037<<DOINDEX 10038>>ASSIGN
I IN PROCEDURE TOO$MME_TADIOD
     10159**DCL     10215<<DOINDEX 10216>>IF      10224<<DOINDEX 10225>>IF      10227>>ASSIGN  10228>>ASSIGN
I IN PROCEDURE TOO$PROCESS_IO_REQ
     10310**DCL     10315<<ASSIGN  10318>>IF      10319<<ASSIGN  10319>>ASSIGN  10321>>IF      10324>>IF
     10327>>ASSIGN  10328>>ASSIGN  10330>>IF      10330>>IF      10330>>IF      10338>>IF      10340>>ASSIGN
     10341>>ASSIGN  10342<>CALL    10345>>IF      10345>>IF      10348>>ASSIGN  10349>>ASSIGN  10350<>CALL
ID IN PROCEDURE TOO$MME_CONTML
      9211**DCL      9208--PROC     9212--REDEF
ID_.EXEC# IN PROCEDURE TOO$MME_CONTML
      9213**DCL      9234<<ASSIGN
ID_.RLID IN PROCEDURE TOO$MME_CONTML
      9215**DCL      9220>>IF       9228<<ASSIGN   9233<<ASSIGN
ID_CODE_TBL.ASSGN_FLAG
      8965**DCL      9223>>DOWHILE  9232<<ASSIGN  10586<<ASSIGN
INDIRECT.ADDRESS IN PROCEDURE TOO$MME_READIO
     10014**DCL     10027>>ASSIGN
INDIRECT$ IN PROCEDURE TOO$MME_READIO
     10011**DCL     10024<<ASSIGN  10027>>ASSIGN
IONUM
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:254  
      9010**DCL     10045<<ASSIGN  10045>>ASSIGN  10208<<ASSIGN  10208>>ASSIGN  10209>>IF      10211<<ASSIGN
     10211>>ASSIGN  10717<<ASSIGN  10717>>ASSIGN
IO_CONTROL IN PROCEDURE TOO$MME_TADIOD
     10160**DCL     10138--PROC    10161--REDEF
IS$
      8978**DCL      9338>>ASSIGN  10023>>ASSIGN  10024>>ASSIGN  10027>>ASSIGN
J IN PROCEDURE TOO$MME_GECALL
      9325**DCL      9339<<DOINDEX
J IN PROCEDURE TOO$MME_TADIOD
     10167**DCL     10255<<DOINDEX 10256>>ASSIGN  10257>>ASSIGN
K IN PROCEDURE TOO$MME_TADIOD
     10168**DCL     10247<<ASSIGN  10254<<ASSIGN  10255>>DOINDEX 10255>>DOINDEX
KEY_VALUE IN PROCEDURE TOO$READ_TEST_PAGE
      9437**DCL      9464<>CALL     9469<>CALL
KEY_VALUE.CATA IN PROCEDURE TOO$READ_TEST_PAGE
      9439**DCL      9467<<ASSIGN   9489<<ASSIGN   9491<<ASSIGN   9493<<ASSIGN   9495<<ASSIGN
KEY_VALUE.GECALL_NAME IN PROCEDURE TOO$READ_TEST_PAGE
      9441**DCL      9498<>CALL     9555>>ASSIGN   9558>>ASSIGN
LAST_COUNT IN PROCEDURE TOO$SETUP_DCW_LIST
      9505**DCL      9520<<ASSIGN   9530>>ASSIGN
LID IN PROCEDURE TOO$MME_TOLDIS
     10577**DCL     10575--PROC
LID.DATA IN PROCEDURE TOO$MME_TOLDIS
     10579**DCL     10584>>IF      10584>>IF      10586>>ASSIGN  10587<<ASSIGN
LOAD_ADDR_INX IN PROCEDURE TOO$RETURN_TEST_PAGE_STATS
      9539**DCL      9545<<ASSIGN   9546>>DOWHILE  9547>>IF       9549<<ASSIGN   9549>>ASSIGN   9551>>IF
      9552>>ASSIGN   9553>>ASSIGN   9554>>ASSIGN   9555>>ASSIGN   9556>>ASSIGN
LOAD_ADDR_MATCH IN PROCEDURE TOO$RETURN_TEST_PAGE_STATS
      9540**DCL      9544<<ASSIGN   9546>>DOWHILE  9548<<ASSIGN
LOAD_ERROR IN PROCEDURE TOO$READ_TEST_PAGE
      9476**LABEL    9469--CALLALT
LOAD_OFFSET IN PROCEDURE TOO$READ_TEST_PAGE
      9443**DCL      9462<<ASSIGN   9464<>CALL     9469<>CALL     9547>>IF       9553>>ASSIGN
LOAD_SIZE IN PROCEDURE TOO$MME_GECALL
      9328**DCL      9344>>ASSIGN   9460<<ASSIGN   9464<>CALL     9469<>CALL
LOAD_WORDS IN PROCEDURE TOO$SETUP_DCW_LIST
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:255  
      9506**DCL      9512<<ASSIGN   9513>>ASSIGN   9520>>ASSIGN
M IN PROCEDURE TOO$MME_TADIOD
     10169**DCL     10248<<ASSIGN  10254>>ASSIGN  10257<<ASSIGN
M$FDP
      6165**DCL-ENT  9691--CALL
M$GDP
      6165**DCL-ENT  9622--CALL
M$TIME
      6196**DCL-ENT  9166--CALL     9841--CALL
M$WAIT
      6187**DCL-ENT  9755--CALL     9786--CALL     9892--CALL     9899--CALL
MAX_LOAD IN PROCEDURE TOO$READ_TEST_PAGE
      9444**DCL      9463<<ASSIGN   9464<>CALL     9469<>CALL     9554>>ASSIGN
MESSAGE IN PROCEDURE TOO$BREAK_MESSAGE
     10412**DCL     10427>>CALLBLT 10433>>CALLBLT 10451--ASSIGN  10460--ASSIGN  10467>>CALLBLT 10473>>CALLBLT
MESSAGE_ IN PROCEDURE TOO$BREAK_MESSAGE
     10413**DCL     10492>>DOWHILE 10495>>IF      10495>>IF      10499<<ASSIGN
MESSAGE_SIZE IN PROCEDURE TOO$BREAK_MESSAGE
     10414**DCL     10423<<ASSIGN  10440>>DOWHILE 10442>>IF      10444>>ASSIGN  10446>>IF
MME
      8498**DCL        35--PROC
MME.INST.NO
      8501**DCL      9087>>IF       9088>>DOCASE   9107>>DOCASE
MME.INSTR
      8499**DCL      8500--REDEF
MME.WD_1
      8503**DCL      9090<>CALL     9093<>CALL     9101<>CALL     9117<>CALL     9127<>CALL     9129<>CALL
      9132<>CALL
MME.WD_2
      8504**DCL      9090<>CALL     9117<>CALL     9129<>CALL
MME.WD_3
      8505**DCL      9090<>CALL     9129<>CALL
MME.WD_4
      8506**DCL      9129<>CALL
MME.WD_5
      8507**DCL      9129<>CALL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:256  
MME.WD_6
      8508**DCL      9129<>CALL
MME_IC IN PROCEDURE TOO$MME_GECALL
      9313**DCL      9298--PROC     9314--REDEF
MME_IC IN PROCEDURE TOO$MME_GEMREL
      9670**DCL      9663--PROC     9671--REDEF
MME_IC_FORMAT.IC_ADDR IN PROCEDURE TOO$MME_GECALL
      9315**DCL      9347>>ASSIGN   9348>>ASSIGN
MME_IC_FORMAT.IC_ADDR IN PROCEDURE TOO$MME_GEMREL
      9672**DCL      9694>>ASSIGN
MME_INSTR$
      8533**DCL        35--PROC     9090<>CALL     9095<>CALL
MREG
      8519**DCL        35--PROC
MREG.A
      8528**DCL      9090<>CALL     9095<>CALL     9103<>CALL     9109<>CALL     9119<>CALL     9129<>CALL
MREG.Q
      8529**DCL      9090<>CALL     9095<>CALL     9103<>CALL     9105<>CALL     9138<>CALL
MREG.X1
      8521**DCL      9111<>CALL     9113<>CALL     9121<>CALL     9134<>CALL     9136<>CALL
MREG.X2
      8522**DCL      9090<>CALL
MREG.X3
      8523**DCL      9090<>CALL
MREG.X4
      8524**DCL      9121<>CALL
MSG$ IN PROCEDURE TOO$BREAK_MESSAGE
     10415**DCL     10405--PROC    10427>>CALLBLT 10433>>CALLBLT 10451>>ASSIGN  10460>>ASSIGN  10467>>CALLBLT
     10473>>CALLBLT 10492>>DOWHILE 10495>>IF      10495>>IF      10499>>ASSIGN
MSG_LGTH IN PROCEDURE TOO$BREAK_MESSAGE
     10417**DCL     10443<<ASSIGN  10444<<ASSIGN  10446>>IF      10449<>CALL    10450>>ASSIGN  10457>>ASSIGN
     10460>>ASSIGN  10466>>ASSIGN
MSG_LGTH IN PROCEDURE TOO$FORMAT_SIMULATED_PROMPT
     10486**DCL     10484--PROC    10491>>ASSIGN
MSG_START_INDEX IN PROCEDURE TOO$BREAK_MESSAGE
     10416**DCL     10426<<ASSIGN  10427>>CALLBLT 10431>>DOWHILE 10432<<ASSIGN  10432>>ASSIGN  10433>>CALLBLT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:257  
     10440>>DOWHILE 10443>>ASSIGN  10444>>ASSIGN  10446>>IF      10451>>ASSIGN  10457<<ASSIGN  10457>>ASSIGN
     10460>>ASSIGN  10466<<ASSIGN  10466>>ASSIGN  10467>>CALLBLT 10471>>DOWHILE 10472<<ASSIGN  10472>>ASSIGN
     10473>>CALLBLT 10492>>DOWHILE 10495>>IF      10495>>IF      10499>>ASSIGN
N IN PROCEDURE TOO$SETUP_DCW_LIST
      9507**DCL      9524<<DOINDEX  9525>>ASSIGN   9525>>ASSIGN   9526>>ASSIGN   9527>>ASSIGN
NEXT_DCW_WD IN PROCEDURE TOO$MME_TADIOD
     10250**LABEL   10282--GOTO
NEXT_ENTRY IN PROCEDURE TOO$MME_TADIOD
     10234**LABEL   10229--GOTO
NOR.NO IN PROCEDURE TOO$MME_TADIOD
     10173**DCL     10199>>ASSIGN
NUMBER_DCWS IN PROCEDURE TOO$SETUP_DCW_LIST
      9508**DCL      9513<<ASSIGN   9514>>IF       9529>>ASSIGN   9530>>ASSIGN
NUMBER_OF_REQUESTS IN PROCEDURE TOO$MME_TADIOD
     10171**DCL     10138--PROC    10172--REDEF
NUM_REQUESTS IN PROCEDURE TOO$MME_TADIOD
     10170**DCL     10199<<ASSIGN  10201>>ASSIGN  10208>>ASSIGN  10211>>ASSIGN  10215>>DOINDEX 10234<<ASSIGN
     10234>>ASSIGN  10236>>ASSIGN  10237>>ASSIGN  10245>>ASSIGN  10263>>IF      10274>>IF
OUT_LGTH IN PROCEDURE TOO$BREAK_MESSAGE
     10418**DCL     10449<>CALL    10450<<ASSIGN  10451>>ASSIGN
OUT_LGTH IN PROCEDURE TOO$FORMAT_SIMULATED_PROMPT
     10487**DCL     10484--PROC    10491<<ASSIGN  10492>>DOWHILE 10493<<ASSIGN  10493>>ASSIGN  10495>>IF
     10495>>IF      10497<<ASSIGN  10497>>ASSIGN  10499>>ASSIGN  10500<<ASSIGN  10500>>ASSIGN
PAGE IN PROCEDURE TOO$MME_GEMORE
      9611**DCL      9625<<ASSIGN
PAGE# IN PROCEDURE TOO$MME_GEMORE
      9613**DCL      9623<<DOINDEX  9624>>ASSIGN
PAGE$ IN PROCEDURE TOO$MME_GEMORE
      9612**DCL      9624<<ASSIGN   9625>>ASSIGN
PARAM$ IN PROCEDURE TOO$MME_READIO
      9979**DCL     10023<<ASSIGN  10024>>ASSIGN  10025>>ASSIGN
PARAMETER IN PROCEDURE TOO$MME_TADIOD
     10180**DCL     10202<<ASSIGN  10203<<ASSIGN  10204<<ASSIGN  10205<<ASSIGN  10206<<ASSIGN
PARAMETER.DCW_LIST_ADDR IN PROCEDURE TOO$MME_TADIOD
     10181**DCL     10245>>ASSIGN
PARAMETER.IO_REQ_BITS IN PROCEDURE TOO$MME_TADIOD
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:258  
     10182**DCL     10236>>ASSIGN
PARAMETER.WRITE_WD_CNT_BCD IN PROCEDURE TOO$MME_TADIOD
     10189**DCL     10216>>IF      10237>>ASSIGN  10263>>IF
PARAMS.WD1.TDPCN IN PROCEDURE TOO$MME_READIO
      9983**DCL     10024>>ASSIGN
PARAMS.WD2.BUFF_ADDR IN PROCEDURE TOO$MME_READIO
      9985**DCL     10025>>ASSIGN
PARAM_0 IN PROCEDURE TOO$MME_TADIOD
     10175**DCL     10138--PROC    10202>>ASSIGN
PARAM_1 IN PROCEDURE TOO$MME_GEMORE
      9606**DCL      9604--PROC     9607--REDEF
PARAM_1 IN PROCEDURE TOO$MME_GEPROC
      9708**DCL      9706--PROC
PARAM_1 IN PROCEDURE TOO$MME_GESNAP
      9803**DCL      9801--PROC
PARAM_1 IN PROCEDURE TOO$MME_TADIOD
     10176**DCL     10138--PROC    10203>>ASSIGN
PARAM_2 IN PROCEDURE TOO$MME_GEPROC
      9709**DCL      9706--PROC
PARAM_2 IN PROCEDURE TOO$MME_TADIOD
     10177**DCL     10138--PROC    10204>>ASSIGN
PARAM_3 IN PROCEDURE TOO$MME_TADIOD
     10178**DCL     10138--PROC    10205>>ASSIGN
PARAM_4 IN PROCEDURE TOO$MME_TADIOD
     10179**DCL     10138--PROC    10206>>ASSIGN
PARAM_ADDR IN PROCEDURE TOO$MME_READIO
      9976**DCL      9971--PROC    10023>>ASSIGN
P_X2REG IN PROCEDURE TOO$MME_GECALL
      9318**DCL      9298--PROC     9463>>ASSIGN   9512>>ASSIGN
P_X3REG IN PROCEDURE TOO$MME_GECALL
      9319**DCL      9298--PROC     9347>>ASSIGN   9462>>ASSIGN   9512>>ASSIGN   9521>>ASSIGN   9560>>ASSIGN
QUEUE_ENTRY
      9011**DCL     10719<<ASSIGN  10720<<ASSIGN  10721<<ASSIGN  10724<>CALL
Q_REG IN PROCEDURE TOO$MME_GECALL
      9320**DCL      9298--PROC     9321--REDEF
Q_REG_FORMAT.TRANSFER_ADDR IN PROCEDURE TOO$MME_GECALL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:259  
      9322**DCL      9345<<ASSIGN
READ_IO.BUF_
      8613**DCL     10534<<ASSIGN
READ_IO.STATION_
      8614**DCL      8615--REDEF
READ_IO.V.DVBYTE.REREAD#
      8626**DCL      8626--REDEF
READ_IO.V.INDX#
      8624**DCL      8624--REDEF
REQUEST_TYPE
      9012**DCL     10723<<ASSIGN  10724<>CALL
RETURN_DELTA
      8536**DCL        35--PROC     9090<>CALL     9093<>CALL     9095<>CALL     9097<>CALL     9099<>CALL
      9101<>CALL     9103<>CALL     9105<>CALL     9109<>CALL     9111<>CALL     9113<>CALL     9115<>CALL
      9117<>CALL     9119<>CALL     9121<>CALL     9123<>CALL     9125<>CALL     9127<>CALL     9129<>CALL
      9132<>CALL     9134<>CALL     9136<>CALL     9138<>CALL     9140<>CALL
RETURN_DELTA IN PROCEDURE TOO$MME_ABSTIM
      9161**DCL      9158--PROC     9168<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_ACCWRT
      9181**DCL      9178--PROC     9185<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_CONTML
      9216**DCL      9208--PROC     9229<<ASSIGN   9235<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_DISPRT
      9254**DCL      9252--PROC     9258<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_GECALL
      9324**DCL      9298--PROC     9347<<ASSIGN   9348<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_GEMORE
      9610**DCL      9604--PROC     9618<<ASSIGN   9629<<ASSIGN   9634<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_GEMREL
      9674**DCL      9663--PROC     9694<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_GEPROC
      9710**DCL      9706--PROC     9714<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_GERELC
      9746**DCL      9744--PROC     9759<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_GEROAD
      9780**DCL      9778--PROC     9788<<ASSIGN
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:260  
RETURN_DELTA IN PROCEDURE TOO$MME_GESNAP
      9804**DCL      9801--PROC     9808<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_GETIME
      9834**DCL      9828--PROC     9846<>CALL     9847<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_GEWAKE
      9881**DCL      9878--PROC     9903<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_PROCTM
      9924**DCL      9919--PROC     9930<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_READIO
      9977**DCL      9971--PROC    10046<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_SETPR2
     10059**DCL     10057--PROC    10063<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_SETPRT
     10076**DCL     10074--PROC    10080<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_TADIOD
     10190**DCL     10138--PROC    10212<<ASSIGN  10278<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_TERMIN
     10550**DCL     10548--PROC
RETURN_DELTA IN PROCEDURE TOO$MME_TOLDIS
     10580**DCL     10575--PROC    10588<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_TOLGON
     10606**DCL     10603--PROC    10610<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_TOLTIN
     10623**DCL     10621--PROC    10628<>CALL    10629<<ASSIGN
RETURN_DELTA IN PROCEDURE TOO$MME_TRACIO
     10654**DCL     10652--PROC    10658<<ASSIGN
RETURN_DELTA_COUNT IN PROCEDURE TOO$MME_TADIOD
     10191**DCL     10201<<ASSIGN  10212>>ASSIGN  10278>>ASSIGN
SERVICE_CODE
      9013**DCL     10722<<ASSIGN  10724<>CALL
SERVICE_TYPE IN PROCEDURE TOO$BREAK_MESSAGE
     10419**DCL     10405--PROC    10448>>IF      10454>>IF
SERVICE_TYPE IN PROCEDURE TOO$SERVICE_WRITE_REQ
     10374**DCL     10378<<ASSIGN  10383<>CALL
SERVICE_TYPE IN PROCEDURE TOO$SERVICE_W_R_REQ
     10519**DCL     10528<<ASSIGN  10533<>CALL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:261  
SIZE IN PROCEDURE TOO$SET_GECALL_KEY
      9483**DCL      9497<<ASSIGN   9498<>CALL
START_LOOP IN PROCEDURE TOO$PROCESS_IO_REQ
     10318**LABEL   10322--GOTO    10325--GOTO    10343--GOTO    10351--GOTO
STATUS IN PROCEDURE TOO$READ_TEST_PAGE
      9445**DCL      9457--ASSIGN   9461<<ASSIGN
STATUS$ IN PROCEDURE TOO$READ_TEST_PAGE
      9446**DCL      9447--REDEF    9457<<ASSIGN
STATUS_PTR.ADR IN PROCEDURE TOO$READ_TEST_PAGE
      9448**DCL      9458>>ASSIGN
STATUS_WD_A IN PROCEDURE TOO$COURTESY_CALL
     10690**DCL     10693--REDEF
STATUS_WD_A.IO_ENTRY IN PROCEDURE TOO$COURTESY_CALL
     10691**DCL     10711<<ASSIGN  10713<<ASSIGN
STATUS_WD_A.TDPCN IN PROCEDURE TOO$COURTESY_CALL
     10692**DCL     10708<<ASSIGN
STATUS_WD_B IN PROCEDURE TOO$COURTESY_CALL
     10694**DCL     10697--REDEF
STATUS_WD_B.BUF_ADDR IN PROCEDURE TOO$COURTESY_CALL
     10695**DCL     10706<<ASSIGN
STATUS_WD_B.LID IN PROCEDURE TOO$COURTESY_CALL
     10696**DCL     10707<<ASSIGN
TEMP_LID IN PROCEDURE TOO$PROCESS_IO_REQ
     10311**DCL     10328<<ASSIGN
TEST_PAGE_READ.DATA IN PROCEDURE TOO$MME_READIO
     10017**DCL     10034<>CALL    10038<<ASSIGN
TEST_PAGE_READ$ IN PROCEDURE TOO$MME_READIO
     10015**DCL     10027<<ASSIGN  10034>>CALL    10038>>ASSIGN
TEST_PG_NAME IN PROCEDURE TOO$MME_GECALL
      9317**DCL      9298--PROC     9498<>CALL
TIME_BUFFER
      9014**DCL      8589--DCLINIT  9167>>ASSIGN
TIME_FPT
      8585**DCL      9166<>CALL     9841<>CALL
TIME_FPT.V
      8589**DCL      8585--DCLINIT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:262  
TIME_FPT.V.DEST#
      8589**DCL      9165<<ASSIGN   9838<<ASSIGN
TIME_FPT.V.SOURCE#
      8589**DCL      9839<<ASSIGN
TIME_PARAM IN PROCEDURE TOO$MME_TOLTIN
     10624**DCL     10621--PROC    10628<>CALL
TOD$DISPATCHER
      9074**DCL-ENT 10724--CALL
TOF$BAR.CURRENT
      8693**DCL      9628<<ASSIGN   9628>>ASSIGN   9693<<ASSIGN   9693>>ASSIGN
TOF$BAR.CURRENT.SIZE
      8696**DCL      9627<<ASSIGN   9627>>ASSIGN   9692<<ASSIGN   9692>>ASSIGN
TOL$GET_DECK
      9075**DCL-ENT  9464--CALL     9469--CALL
TOO$BREAK_MESSAGE IN PROCEDURE TOO$MME_TADIOD
     10405**PROC    10383--CALL    10533--CALL
TOO$COURTESY_CALL
     10683**PROC    10384--CALL    10537--CALL
TOO$FORMAT_SIMULATED_PROMPT IN PROCEDURE TOO$BREAK_MESSAGE
     10484**PROC    10449--CALL
TOO$IO_BUFFER
      8781**DCL     10705--ASSIGN
TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG
      8782**DCL     10225>>IF      10227<<ASSIGN  10321>>IF      10714<<ASSIGN
TOO$IO_BUFFER.CHAR_COUNT
      8813**DCL     10271<<ASSIGN  10382>>ASSIGN  10531>>ASSIGN
TOO$IO_BUFFER.EXEC_NUM
      8794**DCL     10241<<ASSIGN
TOO$IO_BUFFER.IO_ENTRY
      8796**DCL     10243<<ASSIGN
TOO$IO_BUFFER.IO_REQ_BITS
      8798**DCL     10236<<ASSIGN
TOO$IO_BUFFER.IO_REQ_BITS.C
      8807**DCL     10345>>IF      10348<<ASSIGN
TOO$IO_BUFFER.IO_REQ_BITS.E
      8799**DCL     10330>>IF
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:263  
TOO$IO_BUFFER.IO_REQ_BITS.M
      8803**DCL     10345>>IF      10349<<ASSIGN
TOO$IO_BUFFER.IO_REQ_BITS.P
      8809**DCL     10330>>IF
TOO$IO_BUFFER.IO_REQ_BITS.R
      8801**DCL     10338>>IF      10341<<ASSIGN
TOO$IO_BUFFER.IO_REQ_BITS.S
      8805**DCL     10330>>IF
TOO$IO_BUFFER.IO_REQ_SERVICED_FLAG
      8784**DCL     10324>>IF      10327<<ASSIGN  10715<<ASSIGN
TOO$IO_BUFFER.LID
      8792**DCL     10242<<ASSIGN  10328>>ASSIGN  10707>>ASSIGN
TOO$IO_BUFFER.PAD_CHAR
      8790**DCL     10240<<ASSIGN
TOO$IO_BUFFER.READ_DATA
      8817**DCL     10534--ASSIGN  10535<<ASSIGN
TOO$IO_BUFFER.READ_FLAG
      8786**DCL     10340<<ASSIGN  10710>>IF
TOO$IO_BUFFER.TDPCN
      8788**DCL     10239<<ASSIGN  10708>>ASSIGN
TOO$IO_BUFFER.WRITE_DATA
      8815**DCL     10272<<ASSIGN  10379--ASSIGN  10529--ASSIGN
TOO$IO_BUFFER.WRITE_WD_CNT_BCD
      8811**DCL     10237<<ASSIGN  10269>>ASSIGN
TOO$MME_ABSTIM
      9158**PROC     9109--CALL     9846--CALL
TOO$MME_ACCWRT
      9178**PROC     9111--CALL
TOO$MME_CONTML
      9208**PROC     9113--CALL
TOO$MME_DISPRT
      9252**PROC     9115--CALL
TOO$MME_GECALL
      9298**PROC     9090--CALL
TOO$MME_GEMORE
      9604**PROC     9093--CALL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:264  
TOO$MME_GEMREL
      9663**PROC     9095--CALL
TOO$MME_GEPROC
      9706**PROC     9117--CALL
TOO$MME_GERELC
      9744**PROC     9097--CALL
TOO$MME_GEROAD
      9778**PROC     9099--CALL
TOO$MME_GESNAP
      9801**PROC     9101--CALL     9127--CALL
TOO$MME_GETIME
      9828**PROC     9103--CALL
TOO$MME_GEWAKE
      9878**PROC     9105--CALL    10628--CALL
TOO$MME_PROCTM
      9919**PROC     9119--CALL
TOO$MME_READIO
      9971**PROC     9121--CALL
TOO$MME_SETPR2
     10057**PROC     9123--CALL
TOO$MME_SETPRT
     10074**PROC     9125--CALL
TOO$MME_TADIOD
     10138**PROC     9129--CALL
TOO$MME_TERMIN
     10548**PROC     9132--CALL
TOO$MME_TOLDIS
     10575**PROC     9134--CALL
TOO$MME_TOLGON
     10603**PROC     9136--CALL
TOO$MME_TOLTIN
     10621**PROC     9138--CALL
TOO$MME_TRACIO
     10652**PROC     9140--CALL
TOO$PROCESS_IO_REQ IN PROCEDURE TOO$MME_TADIOD
     10308**PROC    10277--CALL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:265  
TOO$READ_TEST_PAGE IN PROCEDURE TOO$MME_GECALL
      9409**PROC     9337--CALL
TOO$RETURN_TEST_PAGE_STATS IN PROCEDURE TOO$READ_TEST_PAGE
      9537**PROC     9472--CALL
TOO$SERVICE_WRITE_REQ IN PROCEDURE TOO$MME_TADIOD
     10367**PROC    10350--CALL
TOO$SERVICE_W_R_REQ IN PROCEDURE TOO$MME_TADIOD
     10517**PROC    10342--CALL
TOO$SETUP_DCW_LIST IN PROCEDURE TOO$READ_TEST_PAGE
      9503**PROC     9454--CALL
TOO$SET_GECALL_KEY IN PROCEDURE TOO$READ_TEST_PAGE
      9481**PROC     9453--CALL
TOO_ERROR_CODE
      9038**DCL      9240<>CALL     9335<>CALL     9477<>CALL     9517<>CALL     9685<>CALL    10219<>CALL
     10266<>CALL    10335<>CALL    10593<>CALL
TOO_ERROR_CODE.ERR#
      9068**DCL      9239<<ASSIGN   9334<<ASSIGN   9476<<ASSIGN   9516<<ASSIGN   9684<<ASSIGN  10218<<ASSIGN
     10265<<ASSIGN  10334<<ASSIGN  10592<<ASSIGN
TOP$TCP.FICCDD
      8832**DCL      8838--REDEF    8841--REDEF
TOP$TCP.STATS.EDIT_NAME
      8898**DCL      9556<<ASSIGN
TOP$TCP.STATS.GECALL_NAME
      8900**DCL      9555<<ASSIGN
TOP$TCP.STATS.LOAD_ADDR
      8894**DCL      9547>>IF       9553<<ASSIGN
TOP$TCP.STATS.MAX_LOAD
      8896**DCL      9554<<ASSIGN
TOQ$DCP.PF.ENABLED
      8717**DCL      9349>>IF      10555>>IF
TOQ$DCP.PF.REASON
      8724**DCL      9351<<ASSIGN  10557<<ASSIGN
TOQ$DCP.TP.ADDRESS
      8732**DCL      9560<<ASSIGN
TOQ$DCP.TP.EDIT_NAME
      8731**DCL      9559<<ASSIGN
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:266  
TOQ$DCP.TP.GECALL_NAME
      8730**DCL      9558<<ASSIGN
TOQ$DEBUG
      9076**DCL-ENT  9352--CALL    10558--CALL
TOT$ASCII_BCD
      9077**DCL-ENT  9843--CALL    10034--CALL
TOT$BCD_ASCII
      9078**DCL-ENT  9498--CALL    10270--CALL
TOT$CONSOLE_OUT
      9079**DCL-ENT 10456--CALL    10463--CALL
TOT$DMC.TOO$IO_BUFFER.PTR$
      8754**DCL      8781--IMP-PTR 10225>>IF      10227>>ASSIGN  10236>>ASSIGN  10237>>ASSIGN  10239>>ASSIGN
     10240>>ASSIGN  10241>>ASSIGN  10242>>ASSIGN  10243>>ASSIGN  10269>>ASSIGN  10271>>ASSIGN  10272>>ASSIGN
     10321>>IF      10324>>IF      10327>>ASSIGN  10328>>ASSIGN  10330>>IF      10330>>IF      10330>>IF
     10338>>IF      10340>>ASSIGN  10341>>ASSIGN  10345>>IF      10345>>IF      10348>>ASSIGN  10349>>ASSIGN
     10379>>ASSIGN  10382>>ASSIGN  10529>>ASSIGN  10531>>ASSIGN  10534>>ASSIGN  10535>>ASSIGN  10705>>ASSIGN
     10707>>ASSIGN  10708>>ASSIGN  10710>>IF      10714>>ASSIGN  10715>>ASSIGN
TOT$DMC.TOP$TCP.PTR$
      8759**DCL      8829--IMP-PTR  9547>>IF       9553>>ASSIGN   9554>>ASSIGN   9555>>ASSIGN   9556>>ASSIGN
TOT$ECP.DYNAMIC_PAGE_COUNT
      8935**DCL      9621<<ASSIGN   9621>>ASSIGN   9690<<ASSIGN   9690>>ASSIGN
TOT$ECP.IO.COUNT
      8924**DCL      9750>>IF       9784>>DOWHILE  9889>>IF
TOT$ECP.ISC.GERELC_WAIT
      8931**DCL      9752<<ASSIGN   9753>>DOWHILE
TOT$ECP.SUBEXEC.CURRENT
      8938**DCL      9487>>DOCASE
TOT$ECP.SUBEXEC.TEST_PAGE_COUNT
      8948**DCL      9546>>DOWHILE  9551>>IF       9552<<ASSIGN
TOT$ECP.TEST_REQ
      8918**DCL      8920--REDEF
TOT$PROMPT_OUT
      9080**DCL-ENT 10455--CALL
TOT$RESTART
      9081**DCL-ENT 10561--CALL
TOT$WRITE_READ_IO
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:267  
      9083**DCL-ENT 10536--CALL
TOX$ERROR
      9082**DCL-ENT  9240--CALL     9335--CALL     9477--CALL     9517--CALL     9685--CALL    10219--CALL
     10266--CALL    10335--CALL    10593--CALL
WAIT_FPT
      8676**DCL      9755<>CALL     9786<>CALL     9892<>CALL     9899<>CALL
WAIT_FPT.V
      8677**DCL      8676--DCLINIT
WAIT_FPT.V.UNITS#
      8677**DCL      9754<<ASSIGN   9785<<ASSIGN   9891<<ASSIGN   9898<<ASSIGN
WD1 IN PROCEDURE TOO$MME_TERMIN
     10551**DCL     10548--PROC
WORDS IN PROCEDURE TOO$MME_GEMREL
      9675**DCL      9663--PROC     9676--REDEF
WRITE_BUF_ASCII IN PROCEDURE TOO$MME_TADIOD
     10192**DCL     10193--REDEF   10270<>CALL
WRITE_BUF_ASCII_REDEF IN PROCEDURE TOO$MME_TADIOD
     10193**DCL     10272>>ASSIGN
WRITE_BUF_BCD IN PROCEDURE TOO$MME_TADIOD
     10194**DCL     10195--REDEF   10270<>CALL
WRITE_BUF_BCD_REDEF IN PROCEDURE TOO$MME_TADIOD
     10195**DCL     10256<<ASSIGN
WRITE_BUF_VECTOR.BASE
      9020**DCL     10380<<ASSIGN  10530<<ASSIGN
WRITE_BUF_VECTOR.BOUNDS
      9016**DCL     10382<<ASSIGN  10423>>ASSIGN  10531<<ASSIGN
WRITE_BUF_VECTOR.SEGID
      9022**DCL     10026>>ASSIGN  10381<<ASSIGN  10532<<ASSIGN
X1 IN PROCEDURE TOO$MME_ACCWRT
      9180**DCL      9178--PROC
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:268  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:269  
              FULL UREF LISTING

ADDRESS_A_FORMAT IN PROCEDURE TOO$MME_GECALL
      9306**DCL
ADDRESS_A_FORMAT.ERROR_ADDR IN PROCEDURE TOO$MME_GECALL
      9308**DCL
ADDRESS_B_FORMAT IN PROCEDURE TOO$MME_GECALL
      9310**DCL
ADDRESS_B_FORMAT.SEGID IN PROCEDURE TOO$MME_GECALL
      9312**DCL
ADDR_BUF IN PROCEDURE TOO$MME_GEMREL
      9666**DCL
A_REG_FORMAT IN PROCEDURE TOO$MME_GECALL
      9302**DCL
B$JIT
       361**DCL
B$JIT.ACCEPT_FLAGS
       514**DCL
B$JIT.ACCEPT_FLAGS.ANNOUNCE
       514**DCL
B$JIT.ACCEPT_FLAGS.BROADCAST
       514**DCL
B$JIT.ACCEPT_FLAGS.SEND
       514**DCL
B$JIT.ACCESS
       634**DCL
B$JIT.ACCESS.FORMS
       634**DCL
B$JIT.ACCESS.PACKS
       634**DCL
B$JIT.ACCESS.TAPES
       634**DCL
B$JIT.ACCN
       366**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:270  
B$JIT.APATTR
       639**DCL
B$JIT.ARECX
       634**DCL
B$JIT.BILL
       514**DCL
B$JIT.BLINDACCTNG
       514**DCL
B$JIT.BUDLIM
       503**DCL
B$JIT.CALCNT
       540**DCL
B$JIT.CCARS
       454**DCL
B$JIT.CCBUF
       454**DCL
B$JIT.CCDISP
       454**DCL
B$JIT.CHECK_CFU
       536**DCL
B$JIT.CLRES
       633**DCL
B$JIT.CPFLAGS1
       455**DCL
B$JIT.CPFLAGS1.BRK
       459**DCL
B$JIT.CPFLAGS1.BUFFULL
       459**DCL
B$JIT.CPFLAGS1.CFREAD
       459**DCL
B$JIT.CPFLAGS1.DELTA
       460**DCL
B$JIT.CPFLAGS1.DONTRFEXT3
       456**DCL
B$JIT.CPFLAGS1.DRIBBLE
       458**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:271  
B$JIT.CPFLAGS1.ECHO
       459**DCL
B$JIT.CPFLAGS1.ECHO_LINK
       456**DCL
B$JIT.CPFLAGS1.EXIT#
       458**DCL
B$JIT.CPFLAGS1.FIRSTCP
       457**DCL
B$JIT.CPFLAGS1.INITIALIZE
       458**DCL
B$JIT.CPFLAGS1.JSTEP
       455**DCL
B$JIT.CPFLAGS1.KEEPDS
       458**DCL
B$JIT.CPFLAGS1.LASTCP
       457**DCL
B$JIT.CPFLAGS1.LASTCPEXISTS
       457**DCL
B$JIT.CPFLAGS1.LNKPMME
       456**DCL
B$JIT.CPFLAGS1.LOGOFF
       455**DCL
B$JIT.CPFLAGS1.NOTIFY
       458**DCL
B$JIT.CPFLAGS1.PROCACCT
       458**DCL
B$JIT.CPFLAGS1.PROTECT
       459**DCL
B$JIT.CPFLAGS1.RUND
       455**DCL
B$JIT.CPFLAGS1.SCREECH
       459**DCL
B$JIT.CPFLAGS1.SKIPABORT
       458**DCL
B$JIT.CPFLAGS1.SOMENOTIFY
       457**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:272  
B$JIT.CPFLAGS1.SSTART
       456**DCL
B$JIT.CPFLAGS1.STARPROC
       457**DCL
B$JIT.CPFLAGS1.STARSACC
       457**DCL
B$JIT.CPFLAGS1.STEPACCT
       459**DCL
B$JIT.CPFLAGS1.STEPLMT
       459**DCL
B$JIT.CPFLAGS1.TESTMODE
       457**DCL
B$JIT.CPFLAGS1.TRMNATE
       458**DCL
B$JIT.CPFLAGS1.WHEN_INPUT
       456**DCL
B$JIT.CPFLAGS1.YC
       455**DCL
B$JIT.CPFLAGS1.YCGET
       456**DCL
B$JIT.CPFLAGS1.YCPMME
       456**DCL
B$JIT.CSLEV
       521**DCL
B$JIT.CTIME
       539**DCL
B$JIT.CURPNUM
       620**DCL
B$JIT.CURRCORE
       528**DCL
B$JIT.CURSUDO
       635**DCL
B$JIT.CURTMPDP
       535**DCL
B$JIT.DCB$
       534**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:273  
B$JIT.DCBNO
       447**DCL
B$JIT.DDLL
       524**DCL
B$JIT.DDUL
       524**DCL
B$JIT.DEFEXP
       534**DCL
B$JIT.DEFPRI
       514**DCL
B$JIT.DLL
       524**DCL
B$JIT.DO$
       534**DCL
B$JIT.DUL
       524**DCL
B$JIT.ENQS
       639**DCL
B$JIT.ERR
       366**DCL
B$JIT.ERR.CODE
       367**DCL
B$JIT.ERR.FCG
       366**DCL
B$JIT.ERR.MON
       367**DCL
B$JIT.ERR.SEV
       367**DCL
B$JIT.ERR.UMID
       367**DCL
B$JIT.EUP
       526**DCL
B$JIT.EXTUS
       542**DCL
B$JIT.FACCN
       366**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:274  
B$JIT.FACNACS
       534**DCL
B$JIT.FACNCM
       536**DCL
B$JIT.FBUC
       526**DCL
B$JIT.FBUL
       526**DCL
B$JIT.FEXT
       534**DCL
B$JIT.FPSN
       447**DCL
B$JIT.FRS
       562**DCL
B$JIT.GAC
       535**DCL
B$JIT.HIGHPNUM
       620**DCL
B$JIT.HPSN
       534**DCL
B$JIT.IDELTAT
       540**DCL
B$JIT.INSTWORD
       454**DCL
B$JIT.INTER
       633**DCL
B$JIT.INTTIME
       539**DCL
B$JIT.JOBNAME
       515**DCL
B$JIT.JOBUNIT
       455**DCL
B$JIT.JORG
       502**DCL
B$JIT.JPEAK
       528**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:275  
B$JIT.JSLEV
       503**DCL
B$JIT.JTMPDPPK
       535**DCL
B$JIT.JUNK
       566**DCL
B$JIT.JUNK2
       620**DCL
B$JIT.LANG
       502**DCL
B$JIT.LBJID
       542**DCL
B$JIT.LLL
       530**DCL
B$JIT.LNKCNT
       566**DCL
B$JIT.LOCK
       515**DCL
B$JIT.LOGONTIME
       503**DCL
B$JIT.LUL
       530**DCL
B$JIT.MAXCORE
       527**DCL
B$JIT.MAXENQ
       639**DCL
B$JIT.MAXEXP
       534**DCL
B$JIT.MAXPRI
       514**DCL
B$JIT.MAXTMPDP
       535**DCL
B$JIT.MMFLGS
       527**DCL
B$JIT.MMFLGS.FREE_PPGS
       527**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:276  
B$JIT.MODE
       361**DCL
B$JIT.MOUNTS
       634**DCL
B$JIT.MRT
       540**DCL
B$JIT.MSGID
       515**DCL
B$JIT.MSGID.PRIMARY
       515**DCL
B$JIT.MSGID.XT
       516**DCL
B$JIT.NEXTCC
       508**DCL
B$JIT.NODOEVER
       633**DCL
B$JIT.NOLOEVER
       633**DCL
B$JIT.NOPOEVER
       633**DCL
B$JIT.NUTS
       541**DCL
B$JIT.OLTA
       634**DCL
B$JIT.ORIGINATOR_MODE
       633**DCL
B$JIT.ORIGINATOR_PORT
       636**DCL
B$JIT.ORIGINATOR_PORT.FROM_CR.DEVICE
       637**DCL
B$JIT.ORIGINATOR_PORT.FROM_CR.TNAME
       637**DCL
B$JIT.ORIGINATOR_PORT.FROM_GHOST
       637**DCL
B$JIT.ORIGINATOR_PORT.FROM_GHOST.SYSID
       637**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:277  
B$JIT.ORIGINATOR_PORT.FROM_INT
       638**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT.SYSID
       638**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT.TSLINE
       638**DCL
B$JIT.OUTPRIO
       447**DCL
B$JIT.PCADS
       530**DCL
B$JIT.PCC
       525**DCL
B$JIT.PCD
       525**DCL
B$JIT.PCDD
       526**DCL
B$JIT.PCDDS
       529**DCL
B$JIT.PCDS
       525**DCL
B$JIT.PCL
       530**DCL
B$JIT.PCP
       525**DCL
B$JIT.PCROS
       525**DCL
B$JIT.PCV
       530**DCL
B$JIT.PLL
       524**DCL
B$JIT.PMEMTIM
       540**DCL
B$JIT.PMME_COUNT
       638**DCL
B$JIT.PMME_DATA
       638**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:278  
B$JIT.PMME_DATA.CPU
       638**DCL
B$JIT.PMME_DATA.I_O
       638**DCL
B$JIT.PMME_DATA.MISC1
       638**DCL
B$JIT.PMME_DATA.MISC2
       639**DCL
B$JIT.PPC
       527**DCL
B$JIT.PPRIV
       422**DCL
B$JIT.PPRIV.CNTRLC
       422**DCL
B$JIT.PPRIV.CNTRLD
       422**DCL
B$JIT.PPRIV.EFT
       422**DCL
B$JIT.PPRIV.EL
       422**DCL
B$JIT.PPRIV.LABEL
       423**DCL
B$JIT.PPRIV.NETCON
       423**DCL
B$JIT.PPRIV.PADMIN
       424**DCL
B$JIT.PPRIV.PIGC
       423**DCL
B$JIT.PPRIV.PIGD
       423**DCL
B$JIT.PPRIV.PIGETTE
       425**DCL
B$JIT.PPRIV.RATES
       424**DCL
B$JIT.PPRIV.REPLAY
       424**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:279  
B$JIT.PPRIV.SPIDERC
       423**DCL
B$JIT.PPRIV.SPIDERD
       423**DCL
B$JIT.PPRIV.SUPER
       423**DCL
B$JIT.PPRIV.SUPERAUTH
       423**DCL
B$JIT.PPRIV.SUPERD
       424**DCL
B$JIT.PPRIV.SUPERFORM
       424**DCL
B$JIT.PPRIV.SUPERWSN
       424**DCL
B$JIT.PPRIV.SYSCON
       424**DCL
B$JIT.PPRIV.VOLINIT
       424**DCL
B$JIT.PRDPRM
       535**DCL
B$JIT.PRFLAGS
       450**DCL
B$JIT.PRFLAGS.COMMENT
       450**DCL
B$JIT.PRFLAGS.CONTINUED
       450**DCL
B$JIT.PRFLAGS.CORRECT
       451**DCL
B$JIT.PRFLAGS.EXPOUND
       451**DCL
B$JIT.PRFLAGS.LIST
       450**DCL
B$JIT.PRFLAGS.LS
       450**DCL
B$JIT.PRFLAGS.NOSCAN
       451**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:280  
B$JIT.PRFLAGS.NSSYNTAX
       450**DCL
B$JIT.PRFLAGS.OU
       450**DCL
B$JIT.PRFLAGS.OUTPUT
       450**DCL
B$JIT.PRFLAGS.POINT
       451**DCL
B$JIT.PRFLAGS.POSITION
       451**DCL
B$JIT.PRFLAGS.SI
       450**DCL
B$JIT.PRFLAGS.UI
       450**DCL
B$JIT.PRFLAGS.WHEN
       451**DCL
B$JIT.PRIINC
       541**DCL
B$JIT.PRIOB
       539**DCL
B$JIT.PRIOCORE
       527**DCL
B$JIT.PRIOR_CP
       630**DCL
B$JIT.PRIV
       367**DCL
B$JIT.PRIV.ACTIVE
       367**DCL
B$JIT.PRIV.ACTIVE.ASAVE
       369**DCL
B$JIT.PRIV.ACTIVE.CFEP
       370**DCL
B$JIT.PRIV.ACTIVE.CQ
       370**DCL
B$JIT.PRIV.ACTIVE.DISPJOB
       369**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:281  
B$JIT.PRIV.ACTIVE.DOMANE
       368**DCL
B$JIT.PRIV.ACTIVE.EXMM
       371**DCL
B$JIT.PRIV.ACTIVE.EXPM
       370**DCL
B$JIT.PRIV.ACTIVE.FMBLK
       367**DCL
B$JIT.PRIV.ACTIVE.FMDIAG
       368**DCL
B$JIT.PRIV.ACTIVE.FMEFT
       367**DCL
B$JIT.PRIV.ACTIVE.FMREAD
       368**DCL
B$JIT.PRIV.ACTIVE.FMSEC
       368**DCL
B$JIT.PRIV.ACTIVE.GPP
       369**DCL
B$JIT.PRIV.ACTIVE.INTCON
       370**DCL
B$JIT.PRIV.ACTIVE.IOQ
       370**DCL
B$JIT.PRIV.ACTIVE.IOQW
       370**DCL
B$JIT.PRIV.ACTIVE.JIT
       371**DCL
B$JIT.PRIV.ACTIVE.MAXMEM
       371**DCL
B$JIT.PRIV.ACTIVE.MFEP
       370**DCL
B$JIT.PRIV.ACTIVE.MODE
       368**DCL
B$JIT.PRIV.ACTIVE.MSYS
       371**DCL
B$JIT.PRIV.ACTIVE.PM
       370**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:282  
B$JIT.PRIV.ACTIVE.SCREECH
       369**DCL
B$JIT.PRIV.ACTIVE.SNAP
       369**DCL
B$JIT.PRIV.ACTIVE.SPCLMM
       371**DCL
B$JIT.PRIV.ACTIVE.SYSACCT
       368**DCL
B$JIT.PRIV.ACTIVE.SYSCON
       369**DCL
B$JIT.PRIV.ACTIVE.SYSLOG
       370**DCL
B$JIT.PRIV.ACTIVE.TND
       370**DCL
B$JIT.PRIV.AUTH
       407**DCL
B$JIT.PRIV.AUTH.ASAVE
       408**DCL
B$JIT.PRIV.AUTH.CFEP
       409**DCL
B$JIT.PRIV.AUTH.CQ
       409**DCL
B$JIT.PRIV.AUTH.DISPJOB
       408**DCL
B$JIT.PRIV.AUTH.DOMANE
       407**DCL
B$JIT.PRIV.AUTH.EXMM
       410**DCL
B$JIT.PRIV.AUTH.EXPM
       409**DCL
B$JIT.PRIV.AUTH.FMBLK
       407**DCL
B$JIT.PRIV.AUTH.FMDIAG
       407**DCL
B$JIT.PRIV.AUTH.FMEFT
       407**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:283  
B$JIT.PRIV.AUTH.FMREAD
       407**DCL
B$JIT.PRIV.AUTH.FMSEC
       407**DCL
B$JIT.PRIV.AUTH.GPP
       409**DCL
B$JIT.PRIV.AUTH.INTCON
       409**DCL
B$JIT.PRIV.AUTH.IOQ
       409**DCL
B$JIT.PRIV.AUTH.IOQW
       409**DCL
B$JIT.PRIV.AUTH.JIT
       410**DCL
B$JIT.PRIV.AUTH.MAXMEM
       410**DCL
B$JIT.PRIV.AUTH.MFEP
       409**DCL
B$JIT.PRIV.AUTH.MODE
       407**DCL
B$JIT.PRIV.AUTH.MSYS
       410**DCL
B$JIT.PRIV.AUTH.PM
       410**DCL
B$JIT.PRIV.AUTH.SCREECH
       408**DCL
B$JIT.PRIV.AUTH.SNAP
       408**DCL
B$JIT.PRIV.AUTH.SPCLMM
       410**DCL
B$JIT.PRIV.AUTH.SYSACCT
       407**DCL
B$JIT.PRIV.AUTH.SYSCON
       408**DCL
B$JIT.PRIV.AUTH.SYSLOG
       409**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:284  
B$JIT.PRIV.AUTH.TND
       410**DCL
B$JIT.PRIV.JOB
       410**DCL
B$JIT.PRIV.JOB.ASAVE
       412**DCL
B$JIT.PRIV.JOB.CFEP
       413**DCL
B$JIT.PRIV.JOB.CQ
       413**DCL
B$JIT.PRIV.JOB.DISPJOB
       412**DCL
B$JIT.PRIV.JOB.DOMANE
       411**DCL
B$JIT.PRIV.JOB.EXMM
       414**DCL
B$JIT.PRIV.JOB.EXPM
       413**DCL
B$JIT.PRIV.JOB.FMBLK
       411**DCL
B$JIT.PRIV.JOB.FMDIAG
       411**DCL
B$JIT.PRIV.JOB.FMEFT
       410**DCL
B$JIT.PRIV.JOB.FMREAD
       411**DCL
B$JIT.PRIV.JOB.FMSEC
       411**DCL
B$JIT.PRIV.JOB.GPP
       412**DCL
B$JIT.PRIV.JOB.INTCON
       413**DCL
B$JIT.PRIV.JOB.IOQ
       413**DCL
B$JIT.PRIV.JOB.IOQW
       413**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:285  
B$JIT.PRIV.JOB.JIT
       414**DCL
B$JIT.PRIV.JOB.MAXMEM
       414**DCL
B$JIT.PRIV.JOB.MFEP
       413**DCL
B$JIT.PRIV.JOB.MODE
       411**DCL
B$JIT.PRIV.JOB.MSYS
       414**DCL
B$JIT.PRIV.JOB.PM
       413**DCL
B$JIT.PRIV.JOB.SCREECH
       412**DCL
B$JIT.PRIV.JOB.SNAP
       412**DCL
B$JIT.PRIV.JOB.SPCLMM
       414**DCL
B$JIT.PRIV.JOB.SYSACCT
       411**DCL
B$JIT.PRIV.JOB.SYSCON
       412**DCL
B$JIT.PRIV.JOB.SYSLOG
       413**DCL
B$JIT.PRIV.JOB.TND
       414**DCL
B$JIT.PRIV.PRC
       414**DCL
B$JIT.PRIV.PRC.ASAVE
       416**DCL
B$JIT.PRIV.PRC.CFEP
       417**DCL
B$JIT.PRIV.PRC.CQ
       417**DCL
B$JIT.PRIV.PRC.DISPJOB
       416**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:286  
B$JIT.PRIV.PRC.DOMANE
       415**DCL
B$JIT.PRIV.PRC.EXMM
       418**DCL
B$JIT.PRIV.PRC.EXPM
       417**DCL
B$JIT.PRIV.PRC.FMBLK
       414**DCL
B$JIT.PRIV.PRC.FMDIAG
       415**DCL
B$JIT.PRIV.PRC.FMEFT
       414**DCL
B$JIT.PRIV.PRC.FMREAD
       415**DCL
B$JIT.PRIV.PRC.FMSEC
       415**DCL
B$JIT.PRIV.PRC.GPP
       416**DCL
B$JIT.PRIV.PRC.INTCON
       417**DCL
B$JIT.PRIV.PRC.IOQ
       417**DCL
B$JIT.PRIV.PRC.IOQW
       417**DCL
B$JIT.PRIV.PRC.JIT
       418**DCL
B$JIT.PRIV.PRC.MAXMEM
       418**DCL
B$JIT.PRIV.PRC.MFEP
       417**DCL
B$JIT.PRIV.PRC.MODE
       415**DCL
B$JIT.PRIV.PRC.MSYS
       418**DCL
B$JIT.PRIV.PRC.PM
       417**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:287  
B$JIT.PRIV.PRC.SCREECH
       416**DCL
B$JIT.PRIV.PRC.SNAP
       416**DCL
B$JIT.PRIV.PRC.SPCLMM
       418**DCL
B$JIT.PRIV.PRC.SYSACCT
       415**DCL
B$JIT.PRIV.PRC.SYSCON
       416**DCL
B$JIT.PRIV.PRC.SYSLOG
       416**DCL
B$JIT.PRIV.PRC.TND
       417**DCL
B$JIT.PRIV.SAVED
       418**DCL
B$JIT.PRIV.SAVED.ASAVE
       420**DCL
B$JIT.PRIV.SAVED.CFEP
       421**DCL
B$JIT.PRIV.SAVED.CQ
       421**DCL
B$JIT.PRIV.SAVED.DISPJOB
       420**DCL
B$JIT.PRIV.SAVED.DOMANE
       419**DCL
B$JIT.PRIV.SAVED.EXMM
       422**DCL
B$JIT.PRIV.SAVED.EXPM
       421**DCL
B$JIT.PRIV.SAVED.FMBLK
       418**DCL
B$JIT.PRIV.SAVED.FMDIAG
       419**DCL
B$JIT.PRIV.SAVED.FMEFT
       418**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:288  
B$JIT.PRIV.SAVED.FMREAD
       419**DCL
B$JIT.PRIV.SAVED.FMSEC
       418**DCL
B$JIT.PRIV.SAVED.GPP
       420**DCL
B$JIT.PRIV.SAVED.INTCON
       421**DCL
B$JIT.PRIV.SAVED.IOQ
       421**DCL
B$JIT.PRIV.SAVED.IOQW
       421**DCL
B$JIT.PRIV.SAVED.JIT
       421**DCL
B$JIT.PRIV.SAVED.MAXMEM
       422**DCL
B$JIT.PRIV.SAVED.MFEP
       421**DCL
B$JIT.PRIV.SAVED.MODE
       419**DCL
B$JIT.PRIV.SAVED.MSYS
       422**DCL
B$JIT.PRIV.SAVED.PM
       421**DCL
B$JIT.PRIV.SAVED.SCREECH
       420**DCL
B$JIT.PRIV.SAVED.SNAP
       420**DCL
B$JIT.PRIV.SAVED.SPCLMM
       422**DCL
B$JIT.PRIV.SAVED.SYSACCT
       419**DCL
B$JIT.PRIV.SAVED.SYSCON
       420**DCL
B$JIT.PRIV.SAVED.SYSLOG
       420**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:289  
B$JIT.PRIV.SAVED.TND
       421**DCL
B$JIT.PROG_ENTRY
       516**DCL
B$JIT.PROMPTS
       515**DCL
B$JIT.PSEUDOPGS
       529**DCL
B$JIT.PSEUDO_COUNT
       630**DCL
B$JIT.PSEUDO_TEXT
       630**DCL
B$JIT.PSLEV
       503**DCL
B$JIT.PTSIZ
       530**DCL
B$JIT.PUL
       524**DCL
B$JIT.QUAN
       539**DCL
B$JIT.REMCPO
       639**DCL
B$JIT.REMDO
       639**DCL
B$JIT.REMLO
       639**DCL
B$JIT.RERUN
       541**DCL
B$JIT.RESCORE
       635**DCL
B$JIT.RESPEAK
       529**DCL
B$JIT.RNST
       545**DCL
B$JIT.RUNFLAGS
       562**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:290  
B$JIT.SAVEDCB$
       536**DCL
B$JIT.SCHTIME
       539**DCL
B$JIT.SINPUTSZ
       515**DCL
B$JIT.SPEAK
       528**DCL
B$JIT.SRESPEAK
       529**DCL
B$JIT.SSLEV
       503**DCL
B$JIT.STAR
       534**DCL
B$JIT.STAR.DA
       534**DCL
B$JIT.STDLOPGS
       634**DCL
B$JIT.STEPCC
       593**DCL
B$JIT.STEPS
       587**DCL
B$JIT.STEPUNIT
       455**DCL
B$JIT.STIME
       539**DCL
B$JIT.STMPDPPK
       535**DCL
B$JIT.SVLDTF
       607**DCL
B$JIT.SVTUS
       542**DCL
B$JIT.SWITCH
       454**DCL
B$JIT.SYSID
       366**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:291  
B$JIT.TDP
       526**DCL
B$JIT.TMPGAC
       535**DCL
B$JIT.TMPGAC.N
       535**DCL
B$JIT.TMPGAC.TIME
       535**DCL
B$JIT.TPEXT
       540**DCL
B$JIT.TPSVT
       540**DCL
B$JIT.TSLINE.FEX
       635**DCL
B$JIT.TSLINE.LEV
       636**DCL
B$JIT.TSLINE.PORT
       635**DCL
B$JIT.TSLINE.SPEED
       635**DCL
B$JIT.TSLINE.SUBDEVICE
       636**DCL
B$JIT.TSLINE.SUBSUBDEVICE
       636**DCL
B$JIT.TSLINE.TTYP
       636**DCL
B$JIT.TUSVT
       540**DCL
B$JIT.UMEMTIM
       540**DCL
B$JIT.UNAME
       366**DCL
B$JIT.USER
       366**DCL
B$JIT.USERWORD
       454**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:292  
B$JIT.USRDCB
       515**DCL
B$JIT.USRERR
       502**DCL
B$JIT.USRERR.CODE
       502**DCL
B$JIT.USRERR.FCG
       502**DCL
B$JIT.USRERR.MID
       502**DCL
B$JIT.USRERR.MON
       502**DCL
B$JIT.USRERR.SEV
       502**DCL
B$JIT.USRIC
       503**DCL
B$JIT.USRRNST
       502**DCL
B$JIT.UTIMER
       541**DCL
B$JIT.VIRTUAL
       531**DCL
B$JIT.VIRTUAL.DCB#
       531**DCL
B$JIT.WOO
       366**DCL
B$JIT.XCONF
       587**DCL
B$JIT.XLIMFLG
       597**DCL
B$JIT.XTIME
       539**DCL
B$JIT.YC0SZ
       503**DCL
B$JIT.YC2SZ
       521**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:293  
BUFFER IN PROCEDURE TOO$MME_READIO
      9997**DCL
BUFFER.WRITE_DATA IN PROCEDURE TOO$MME_READIO
     10009**DCL
BUFFER_ADDR_FORMAT.ID IN PROCEDURE TOO$COURTESY_CALL
     10688**DCL
BUFFER_PTR IN PROCEDURE TOO$MME_READIO
      9994**DCL
BUF_ADDR_FORMAT IN PROCEDURE TOO$SERVICE_WRITE_REQ
     10370**DCL
BUF_ADDR_FORMAT IN PROCEDURE TOO$SERVICE_W_R_REQ
     10521**DCL
CONSOLE_FPT
      8651**DCL
CONSOLE_FPT.BUF_.BOUND
      8651**DCL
CONSOLE_FPT.BUF_.BUF$
      8653**DCL
CONSOLE_FPT.IDBUF_
      8653**DCL
CONSOLE_FPT.KEY_
      8651**DCL
CONSOLE_FPT.V
      8654**DCL
CONSOLE_FPT.V.DCB#
      8654**DCL
CONSOLE_FPT.V.DVBYTE
      8659**DCL
CONSOLE_FPT.V.DVBYTE.BIN#
      8660**DCL
CONSOLE_FPT.V.DVBYTE.BP#
      8660**DCL
CONSOLE_FPT.V.DVBYTE.CONT#
      8662**DCL
CONSOLE_FPT.V.DVBYTE.NODAT#
      8661**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:294  
CONSOLE_FPT.V.DVBYTE.REREAD#
      8660**DCL
CONSOLE_FPT.V.DVBYTE.RRR#
      8661**DCL
CONSOLE_FPT.V.DVBYTE.TOP#
      8659**DCL
CONSOLE_FPT.V.DVBYTE.TRANS#
      8661**DCL
CONSOLE_FPT.V.EVENT#
      8659**DCL
CONSOLE_FPT.V.FULL#
      8656**DCL
CONSOLE_FPT.V.ID#
      8655**DCL
CONSOLE_FPT.V.IOERROK#
      8658**DCL
CONSOLE_FPT.V.KEYTYPE#
      8658**DCL
CONSOLE_FPT.V.NEWKEY#
      8657**DCL
CONSOLE_FPT.V.NOTIME#
      8657**DCL
CONSOLE_FPT.V.ODFNC#
      8663**DCL
CONSOLE_FPT.V.ONEWKEY#
      8656**DCL
CONSOLE_FPT.V.REWRITE#
      8657**DCL
CONSOLE_FPT.V.SEED#
      8659**DCL
CONSOLE_FPT.V.WAIT#
      8654**DCL
CONSOLE_FPT.V_
      8651**DCL
CONTROLLING.ID IN PROCEDURE TOO$MME_READIO
      9975**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:295  
CONTROL_CODE IN PROCEDURE TOO$MME_TADIOD
     10161**DCL
CRLF_.CR IN PROCEDURE TOO$BREAK_MESSAGE
     10408**DCL
CRLF_.LF IN PROCEDURE TOO$BREAK_MESSAGE
     10409**DCL
DCWLIST.CHAR_ADR IN PROCEDURE TOO$READ_TEST_PAGE
      9429**DCL
DCWLIST_PTR IN PROCEDURE TOO$READ_TEST_PAGE
      9434**DCL
DCW_DATA_PTR_FORMAT.ID IN PROCEDURE TOO$MME_TADIOD
     10146**DCL
DCW_LIST_PTR_FORMAT.ID IN PROCEDURE TOO$MME_TADIOD
     10151**DCL
DCW_WORD.CHAR_POSITION IN PROCEDURE TOO$MME_TADIOD
     10155**DCL
FDP_FPT.RESULTS_
      8553**DCL
FDP_FPT.V_
      8553**DCL
GDP_FPT.RESULTS_
      8568**DCL
GDP_FPT.V_
      8568**DCL
GEMORE_PARAM IN PROCEDURE TOO$MME_GEMORE
      9607**DCL
GEMORE_VEC.W1
      8991**DCL
GEMORE_VEC.W1.FLAGS#
      8991**DCL
GEMORE_VEC.W1.TYP#
      8991**DCL
GEMORE_VEC.W1.VSIZE#
      8991**DCL
GEMORE_VEC.W2.BASE#
      8992**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:296  
GEMORE_VEC.W2.SEGID#
      8993**DCL
GEMREL_VEC.PTR$
      9008**DCL
GEMREL_VEC.W1
      9006**DCL
GEMREL_VEC.W1.FLAGS#
      9006**DCL
GEMREL_VEC.W1.TYP#
      9006**DCL
GEMREL_VEC.W1.VSIZE#
      9006**DCL
GEMREL_VEC.W2.BASE#
      9007**DCL
GEMREL_VEC.W2.SEGID#
      9008**DCL
GEMREL_WDS IN PROCEDURE TOO$MME_GEMREL
      9676**DCL
ID_ IN PROCEDURE TOO$MME_CONTML
      9212**DCL
ID_CODE_TBL
      8962**DCL
ID_CODE_TBL.EXEC_NUM
      8964**DCL
INDIRECT IN PROCEDURE TOO$MME_READIO
     10012**DCL
KEY_VALUE.SIZE IN PROCEDURE TOO$READ_TEST_PAGE
      9438**DCL
M$ACCT
      6146**DCL-ENT
M$ACTIVATE
      6149**DCL-ENT
M$ALIB
      6142**DCL-ENT
M$ASUSER
      6144**DCL-ENT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:297  
M$ATTACH
      6151**DCL-ENT
M$BADPP
      6169**DCL-ENT
M$CGCTL
      6150**DCL-ENT
M$CGINFO
      6150**DCL-ENT
M$CHECK
      6131**DCL-ENT
M$CHGUNIT
      6189**DCL-ENT
M$CLOSE
      6129**DCL-ENT
M$CLRSTK
      6187**DCL-ENT
M$CMDVAR
      6198**DCL-ENT
M$CONFIG
      6159**DCL-ENT
M$CORRES
      6134**DCL-ENT
M$CPEXIT
      6143**DCL-ENT
M$CVM
      6167**DCL-ENT
M$CVOL
      6132**DCL-ENT
M$DCLFLD
      6159**DCL-ENT
M$DEACTIVATE
      6149**DCL-ENT
M$DELREC
      6131**DCL-ENT
M$DEQ
      6196**DCL-ENT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:298  
M$DETACH
      6151**DCL-ENT
M$DEVICE
      6133**DCL-ENT
M$DISPLAY
      6196**DCL-ENT
M$DISPRES
      6136**DCL-ENT
M$DLIB
      6142**DCL-ENT
M$DRIBBLE
      6159**DCL-ENT
M$DRTN
      6187**DCL-ENT
M$DSUSER
      6144**DCL-ENT
M$ENQ
      6195**DCL-ENT
M$EOM
      6154**DCL-ENT
M$ERASE
      6160**DCL-ENT
M$ERR
      6141**DCL-ENT
M$ERRMSG
      6192**DCL-ENT
M$EVENT
      6184**DCL-ENT
M$EXHUME
      6193**DCL-ENT
M$EXIT
      6141**DCL-ENT
M$EXTEND
      6133**DCL-ENT
M$FDS
      6164**DCL-ENT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:299  
M$FEBOOT
      6157**DCL-ENT
M$FECTL
      6158**DCL-ENT
M$FEDUMP
      6157**DCL-ENT
M$FID
      6192**DCL-ENT
M$FINDPROC
      6146**DCL-ENT
M$FSUSER
      6144**DCL-ENT
M$FVP
      6166**DCL-ENT
M$FWCG
      6150**DCL-ENT
M$GBPL
      6170**DCL-ENT
M$GDDL
      6166**DCL-ENT
M$GDS
      6164**DCL-ENT
M$GETDCB
      6135**DCL-ENT
M$GETMOUSE
      6175**DCL-ENT
M$GETPM
      6176**DCL-ENT
M$GJOB
      6194**DCL-ENT
M$GLINEATTR
      6154**DCL-ENT
M$GOODPP
      6169**DCL-ENT
M$GPLATEN
      6162**DCL-ENT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:300  
M$GPROMPT
      6161**DCL-ENT
M$GTRMATTR
      6155**DCL-ENT
M$GTRMCTL
      6153**DCL-ENT
M$GTRMTAB
      6156**DCL-ENT
M$GVP
      6165**DCL-ENT
M$HELP
      6192**DCL-ENT
M$INT
      6184**DCL-ENT
M$INTRTN
      6145**DCL-ENT
M$IOQ
      6180**DCL-ENT
M$JOBSTATS
      6194**DCL-ENT
M$KEYIN
      6134**DCL-ENT
M$LDEV
      6129**DCL-ENT
M$LDTRC
      6142**DCL-ENT
M$LIMIT
      6135**DCL-ENT
M$LINES
      6134**DCL-ENT
M$LINK
      6141**DCL-ENT
M$MADMUCK
      6137**DCL-ENT
M$MAKUSER
      6168**DCL-ENT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:301  
M$MBS
      6136**DCL-ENT
M$MDFFLD
      6160**DCL-ENT
M$MERC
      6185**DCL-ENT
M$MERCS
      6186**DCL-ENT
M$MIRROR
      6180**DCL-ENT
M$MONINFO
      6197**DCL-ENT
M$MPL
      6170**DCL-ENT
M$NODEINFO
      6161**DCL-ENT
M$NXTUSR
      6195**DCL-ENT
M$OCMSG
      6193**DCL-ENT
M$OLAY
      6141**DCL-ENT
M$OPEN
      6129**DCL-ENT
M$PAS
      6170**DCL-ENT
M$PATHCON
      6193**DCL-ENT
M$PDS
      6164**DCL-ENT
M$PFIL
      6131**DCL-ENT
M$PLATEN
      6155**DCL-ENT
M$PRECORD
      6133**DCL-ENT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:302  
M$PROCNAME
      6146**DCL-ENT
M$PROFILE
      6157**DCL-ENT
M$PROMPT
      6153**DCL-ENT
M$RACST
      6137**DCL-ENT
M$RDSYSLOG
      6178**DCL-ENT
M$READ
      6130**DCL-ENT
M$RELDCB
      6135**DCL-ENT
M$RELRES
      6136**DCL-ENT
M$RELSTARF
      6138**DCL-ENT
M$REM
      6138**DCL-ENT
M$RENV
      6185**DCL-ENT
M$REQUIRE
      6137**DCL-ENT
M$RETRY
      6186**DCL-ENT
M$RETRYS
      6186**DCL-ENT
M$REW
      6132**DCL-ENT
M$RLSFLD
      6160**DCL-ENT
M$RPRIV
      6188**DCL-ENT
M$RSPP
      6167**DCL-ENT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:303  
M$RSWITCH
      6189**DCL-ENT
M$RUE
      6195**DCL-ENT
M$SAD
      6168**DCL-ENT
M$SAVE
      6144**DCL-ENT
M$SCON
      6145**DCL-ENT
M$SCREECH
      6143**DCL-ENT
M$SENV
      6185**DCL-ENT
M$SETFMA
      6129**DCL-ENT
M$SETFP
      6158**DCL-ENT
M$SINPUT
      6156**DCL-ENT
M$SLCFLD
      6161**DCL-ENT
M$SMOUSE
      6175**DCL-ENT
M$SMPRT
      6167**DCL-ENT
M$SPRIV
      6188**DCL-ENT
M$SSC
      6168**DCL-ENT
M$SSWITCH
      6188**DCL-ENT
M$STATE
      6197**DCL-ENT
M$STD
      6169**DCL-ENT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:304  
M$STIMER
      6183**DCL-ENT
M$STLPP
      6166**DCL-ENT
M$STRAP
      6183**DCL-ENT
M$STRMATTR
      6155**DCL-ENT
M$STRMCTL
      6153**DCL-ENT
M$STRMTAB
      6156**DCL-ENT
M$SYMBIO
      6194**DCL-ENT
M$SYSCON
      6180**DCL-ENT
M$SYSID
      6198**DCL-ENT
M$TDCLOSE
      6179**DCL-ENT
M$TDIO
      6179**DCL-ENT
M$TDOPEN
      6178**DCL-ENT
M$TDREQCPU
      6179**DCL-ENT
M$TEMPWROC
      6173**DCL-ENT
M$TRAP
      6183**DCL-ENT
M$TRMISC
      6158**DCL-ENT
M$TRMPRG
      6154**DCL-ENT
M$TRTN
      6187**DCL-ENT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:305  
M$TRUNC
      6130**DCL-ENT
M$TTIMER
      6183**DCL-ENT
M$UC
      6153**DCL
M$UMPL
      6170**DCL-ENT
M$UNFID
      6192**DCL-ENT
M$UNLATCH
      6149**DCL-ENT
M$UNSHARE
      6146**DCL-ENT
M$USRFIELD
      6189**DCL-ENT
M$VIRTUAL
      6164**DCL-ENT
M$WEOF
      6132**DCL-ENT
M$WRITE
      6130**DCL-ENT
M$WRSYSLOG
      6178**DCL-ENT
M$XCON
      6184**DCL-ENT
M$XCONRTN
      6145**DCL-ENT
M$XEQTIME
      6197**DCL-ENT
M$XFLUSH
      6138**DCL-ENT
M$XMOUSE
      6175**DCL-ENT
M$XXX
      6141**DCL-ENT
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:306  
M$YC
      6143**DCL-ENT
MME.INST
      8500**DCL
MME.INST.OP
      8502**DCL
MME_IC_FORMAT IN PROCEDURE TOO$MME_GECALL
      9314**DCL
MME_IC_FORMAT.SEGID IN PROCEDURE TOO$MME_GECALL
      9316**DCL
MME_IC_FORMAT IN PROCEDURE TOO$MME_GEMREL
      9671**DCL
MME_IC_FORMAT.SEGID IN PROCEDURE TOO$MME_GEMREL
      9673**DCL
MREG.E
      8530**DCL
MREG.X0
      8520**DCL
MREG.X5
      8525**DCL
MREG.X6
      8526**DCL
MREG.X7
      8527**DCL
NOR IN PROCEDURE TOO$MME_TADIOD
     10172**DCL
PARAMETER.IO_REQ_BITS.C IN PROCEDURE TOO$MME_TADIOD
     10187**DCL
PARAMETER.IO_REQ_BITS.E IN PROCEDURE TOO$MME_TADIOD
     10183**DCL
PARAMETER.IO_REQ_BITS.M IN PROCEDURE TOO$MME_TADIOD
     10185**DCL
PARAMETER.IO_REQ_BITS.P IN PROCEDURE TOO$MME_TADIOD
     10188**DCL
PARAMETER.IO_REQ_BITS.R IN PROCEDURE TOO$MME_TADIOD
     10184**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:307  
PARAMETER.IO_REQ_BITS.S IN PROCEDURE TOO$MME_TADIOD
     10186**DCL
PARAMS IN PROCEDURE TOO$MME_READIO
      9980**DCL
PARAMS.WD1 IN PROCEDURE TOO$MME_READIO
      9981**DCL
PARAMS.WD2 IN PROCEDURE TOO$MME_READIO
      9984**DCL
PARAMS.WD2.EXEC_NUM IN PROCEDURE TOO$MME_READIO
      9987**DCL
PARAMS.WD3 IN PROCEDURE TOO$MME_READIO
      9989**DCL
PARAMS.WD3.OPTION IN PROCEDURE TOO$MME_READIO
      9990**DCL
PARAMS.WD3.TRUE_ID IN PROCEDURE TOO$MME_READIO
      9992**DCL
Q_REG_FORMAT IN PROCEDURE TOO$MME_GECALL
      9321**DCL
Q_REG_FORMAT.ERROR_CODE IN PROCEDURE TOO$MME_GECALL
      9323**DCL
READ_IO
      8611**DCL
READ_IO.BUF_.BOUND
      8613**DCL
READ_IO.BUF_.BUF$
      8614**DCL
READ_IO.IDBUF_
      8615**DCL
READ_IO.KEY_
      8611**DCL
READ_IO.KEY_.BOUND
      8611**DCL
READ_IO.KEY_.KEY$
      8612**DCL
READ_IO.V
      8615**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:308  
READ_IO.V.DCB#
      8615**DCL
READ_IO.V.DVBYTE
      8625**DCL
READ_IO.V.DVBYTE.BIN#
      8626**DCL
READ_IO.V.DVBYTE.BP#
      8625**DCL
READ_IO.V.DVBYTE.CONT#
      8628**DCL
READ_IO.V.DVBYTE.NODAT#
      8627**DCL
READ_IO.V.DVBYTE.TOP#
      8625**DCL
READ_IO.V.DVBYTE.TRANS#
      8627**DCL
READ_IO.V.DVBYTE.VFC#
      8626**DCL
READ_IO.V.EVENT#
      8624**DCL
READ_IO.V.FULL#
      8617**DCL
READ_IO.V.ID#
      8616**DCL
READ_IO.V.IDS#
      8617**DCL
READ_IO.V.IOERROK#
      8618**DCL
READ_IO.V.KEYCHNG#
      8617**DCL
READ_IO.V.KEYR#
      8616**DCL
READ_IO.V.KEYS#
      8616**DCL
READ_IO.V.KEYTYPE#
      8624**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:309  
READ_IO.V.ODFNC#
      8629**DCL
READ_IO.V.RECNUM#
      8629**DCL
READ_IO.V.REREADPOS#
      8630**DCL
READ_IO.V.SEED#
      8625**DCL
READ_IO.V.SINPUTSIZE#
      8629**DCL
READ_IO.V.STRPVFC#
      8628**DCL
READ_IO.V.WAIT#
      8615**DCL
READ_IO.V_
      8611**DCL
STATUS_PTR IN PROCEDURE TOO$READ_TEST_PAGE
      9447**DCL
TEST_PAGE_READ IN PROCEDURE TOO$MME_READIO
     10016**DCL
TIME_FPT.DATE_
      8585**DCL
TIME_FPT.DATE_.BOUND
      8585**DCL
TIME_FPT.DATE_.DATE$
      8586**DCL
TIME_FPT.DAY_
      8588**DCL
TIME_FPT.TIME_
      8587**DCL
TIME_FPT.TIME_.BOUND
      8587**DCL
TIME_FPT.TIME_.TIME$
      8588**DCL
TIME_FPT.TSTAMP_
      8588**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:310  
TIME_FPT.V.DEST_BASIS#
      8590**DCL
TIME_FPT.V.SOURCE_BASIS#
      8590**DCL
TIME_FPT.V_
      8585**DCL
TOF$BAR
      8692**DCL
TOF$BAR.CURRENT.BASE
      8694**DCL
TOF$BAR.FULL
      8698**DCL
TOF$BAR.FULL.BASE
      8699**DCL
TOF$BAR.FULL.SIZE
      8701**DCL
TOF$BAR.GELBAR_MODE
      8703**DCL
TOO$TOLTS_MMES
        35**PROC
TOO_ERROR_CODE.FCG
      9054**DCL
TOO_ERROR_CODE.MID
      9067**DCL
TOO_ERROR_CODE.MON
      9067**DCL
TOO_ERROR_CODE.SEV
      9068**DCL
TOP$TCP
      8829**DCL
TOP$TCP.ADR
      8853**DCL
TOP$TCP.ADR.CSCT
      8856**DCL
TOP$TCP.ADR.IOENTRY
      8860**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:311  
TOP$TCP.ADR.PAT
      8858**DCL
TOP$TCP.ADR.SCT
      8854**DCL
TOP$TCP.BFR
      8902**DCL
TOP$TCP.BFR.TRAIN_IMAGE
      8903**DCL
TOP$TCP.BFR.VFC_IMAGE
      8905**DCL
TOP$TCP.DCB#
      8851**DCL
TOP$TCP.DEVICE_CODE
      8849**DCL
TOP$TCP.DEVICE_MODEL
      8848**DCL
TOP$TCP.FICCDD.CHAN#
      8836**DCL
TOP$TCP.FICCDD.DEV#
      8837**DCL
TOP$TCP.FICCDD.FLAG#
      8833**DCL
TOP$TCP.FICCDD.FORMAT#
      8834**DCL
TOP$TCP.FICCDD.IOM#
      8835**DCL
TOP$TCP.FIRMWARE
      8884**DCL
TOP$TCP.FIRMWARE.CHOICE_MADE
      8885**DCL
TOP$TCP.FIRMWARE.LP_TYPE
      8889**DCL
TOP$TCP.FIRMWARE.RP_TYPE
      8891**DCL
TOP$TCP.FIRMWARE.TYPE
      8887**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:312  
TOP$TCP.ICC
      8841**DCL
TOP$TCP.ICC.ICC#
      8843**DCL
TOP$TCP.ICCDD
      8838**DCL
TOP$TCP.ICCDD.ICCDD#
      8840**DCL
TOP$TCP.IN_USE
      8830**DCL
TOP$TCP.IO
      8862**DCL
TOP$TCP.IO.CC_PAID
      8873**DCL
TOP$TCP.IO.CONTROLLER
      8867**DCL
TOP$TCP.IO.DONE
      8871**DCL
TOP$TCP.IO.ISSUED
      8869**DCL
TOP$TCP.IO.ITR_INTERRUPT
      8863**DCL
TOP$TCP.IO.TERMINATED
      8865**DCL
TOP$TCP.MPC_MODEL
      8847**DCL
TOP$TCP.SCT
      8875**DCL
TOP$TCP.SCT.BIT12
      8880**DCL
TOP$TCP.SCT.BIT13
      8878**DCL
TOP$TCP.SCT.BIT17
      8876**DCL
TOP$TCP.SCT.TAPE_DENSITY
      8882**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:313  
TOP$TCP.STATS
      8893**DCL
TOP$TCP.TEST_TYPE
      8845**DCL
TOQ$DCP
      8715**DCL
TOQ$DCP.BR
      8733**DCL
TOQ$DCP.BR.ADDRESS
      8734**DCL
TOQ$DCP.BR.IC
      8735**DCL
TOQ$DCP.MME
      8736**DCL
TOQ$DCP.PF
      8716**DCL
TOQ$DCP.PF.DEBUG_TOLTS
      8719**DCL
TOQ$DCP.PF.DISP_MMES
      8723**DCL
TOQ$DCP.PF.GELBARRED
      8718**DCL
TOQ$DCP.PF.STOP_AT_SE
      8722**DCL
TOQ$DCP.PF.STOP_ON_GELBARS
      8720**DCL
TOQ$DCP.PF.STOP_ON_IO
      8721**DCL
TOQ$DCP.SE
      8725**DCL
TOQ$DCP.SE.ADDRESS
      8728**DCL
TOQ$DCP.SE.CATALOG
      8727**DCL
TOQ$DCP.SE.EDIT_NAME
      8726**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:314  
TOQ$DCP.TP
      8729**DCL
TOT$DMC
      8750**DCL
TOT$DMC.TOM$ITRTBL
      8761**DCL
TOT$DMC.TOM$ITRTBL.PTR$
      8764**DCL
TOT$DMC.TOM$SEGTBLS
      8766**DCL
TOT$DMC.TOM$SEGTBLS.PTR$
      8769**DCL
TOT$DMC.TOO$IO_BUFFER
      8751**DCL
TOT$DMC.TOP$TCP
      8756**DCL
TOT$ECP
      8917**DCL
TOT$ECP.BOOT_CPU_TYPE
      8954**DCL
TOT$ECP.BREAK_ALLOWED
      8950**DCL
TOT$ECP.BREAK_RECEIVED
      8952**DCL
TOT$ECP.IO
      8921**DCL
TOT$ECP.IO.TYPE
      8922**DCL
TOT$ECP.ISC
      8926**DCL
TOT$ECP.ISC.READ_OUT
      8927**DCL
TOT$ECP.ISC.READ_PENDING
      8933**DCL
TOT$ECP.ISC.WRITE_OUT
      8929**DCL
PL6.E3A0      #001=TOO$TOLTS_MMES File=TOO$TOLTS_MMES.:E05TSI                    WED 07/30/97 06:26 Page:315  
TOT$ECP.SUBEXEC
      8937**DCL
TOT$ECP.SUBEXEC.ADDRESS
      8940**DCL
TOT$ECP.SUBEXEC.EDIT_NAME
      8942**DCL
TOT$ECP.SUBEXEC.WRAPUP$
      8946**DCL
TOT$ECP.SUBEXEC.WRAPUP_TRIED
      8944**DCL
TOT$ECP.TEST_REQ_
      8920**DCL
WAIT_FPT.UETIME_
      8676**DCL
WAIT_FPT.V.UTYPE#
      8677**DCL
WAIT_FPT.V_
      8676**DCL
WRITE_BUF_VECTOR
      9015**DCL
WRITE_BUF_VECTOR.FLAGS
      9017**DCL
WRITE_BUF_VECTOR.V
      9018**DCL
