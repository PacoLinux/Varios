

14:44 JUL 28 '97 KA_GLB_E.:E05SI                                           1    
    1      /*M* KA_GLB_E Async handler EQUs */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /* ASYNC HANDLER INPUT FUNCTION ITEM DEFINITIONS */
    9
   10      %MACRO KA_INPFNC_E;
   11
   12      %SET Y#INCVAL = %KV_INPOPRX_HI+1;
   13
   14      %EQU KA#SPCCHR_BS = Y#INCVAL; /* BS (backspace) */
   15      %SET Y#INCVAL = Y#INCVAL+1;
   16      %EQU KA#SPCCHR_CAN = Y#INCVAL; /* CAN (control-x) */
   17      %SET Y#INCVAL = Y#INCVAL+1;
   18      %EQU KA#SPCCHR_CR = Y#INCVAL; /* CR (carriage return) */
   19      %SET Y#INCVAL = Y#INCVAL+1;
   20      %EQU KA#SPCCHR_DC1 = Y#INCVAL; /* DC1 (XON) */
   21      %SET Y#INCVAL = Y#INCVAL+1;
   22      %EQU KA#SPCCHR_DC2 = Y#INCVAL; /* DC2 (control-r) */
   23      %SET Y#INCVAL = Y#INCVAL+1;
   24      %EQU KA#SPCCHR_DC3 = Y#INCVAL; /* DC3 (XOFF) */
   25      %SET Y#INCVAL = Y#INCVAL+1;
   26      %EQU KA#SPCCHR_DEL = Y#INCVAL; /* DEl (delete) */
   27      %SET Y#INCVAL = Y#INCVAL+1;
   28      %EQU KA#SPCCHR_EM = Y#INCVAL; /* EM (control-y) */
   29      %SET Y#INCVAL = Y#INCVAL+1;
   30      %EQU KA#SPCCHR_ESC = Y#INCVAL; /* ESC (escape) */
   31      %SET Y#INCVAL = Y#INCVAL+1;
   32      %EQU KA#SPCCHR_FF = Y#INCVAL; /* FF (form feed) */
   33      %SET Y#INCVAL = Y#INCVAL+1;
   34      %EQU KA#SPCCHR_HT = Y#INCVAL; /* HT (horizontal tab) */
   35      %SET Y#INCVAL = Y#INCVAL+1;
   36      %EQU KA#SPCCHR_LF = Y#INCVAL; /* LF (line feed) */
   37      %SET Y#INCVAL = Y#INCVAL+1;
14:44 JUL 28 '97 KA_GLB_E.:E05SI                                           2    
   38      %EQU KA#SPCCHR_FLWON = Y#INCVAL; /* For telnet negotiation */
   39
   40      /* INPUT PROCEDURE CODES: */
   41
   42      %EQU KA#INPPRC_LOW = 1; /* Low value */
   43      %SET Y#INCVAL = %KA#INPPRC_LOW;
   44
   45      %EQU KA#INPPRC_CLAOVRRUN = Y#INCVAL; /* CLA over-run */
   46      %SET Y#INCVAL = Y#INCVAL+1;
   47      %EQU KA#INPPRC_DVCOTPBFRCLR = Y#INCVAL; /* Device output buffer cleared */
   48      %SET Y#INCVAL = Y#INCVAL+1;
   49      %EQU KA#INPPRC_HLTOTP = Y#INCVAL; /* Halt output  */
   50      %SET Y#INCVAL = Y#INCVAL+1;
   51      %EQU KA#INPPRC_PRTERR = Y#INCVAL; /* Parity error */
   52      %SET Y#INCVAL = Y#INCVAL+1;
   53      %EQU KA#INPPRC_SETTRNTBL = Y#INCVAL; /* Set translate table (re APL) */
   54      %SET Y#INCVAL = Y#INCVAL+1;
   55      %EQU KA#INPPRC_IAC = Y#INCVAL; /* telnet negotiation commands */
   56      %SET Y#INCVAL = Y#INCVAL+1;
   57      %EQU KA#INPPRC_FLWON = Y#INCVAL; /* telnet negotiation data */
   58      %SET Y#INCVAL = Y#INCVAL+1;
   59      %EQU KA#INPPRC_HI = Y#INCVAL-1; /* Hi value */
   60
   61      %MEND;
   62      %EJECT;

14:44 JUL 28 '97 KA_GLB_E.:E05SI                                           3    
   63      %EJECT;

14:44 JUL 28 '97 KA_GLB_E.:E05SI                                           4    
   64
   65      /* TRACE CODE DECLARATIONS */
   66
   67      %MACRO KA_TRC_E;
   68
   69      %SET Y#INCVAL = 0;
   70
   71      /* TRACE CALLS TO KAA$ADM - ASYNC HANDLER ADMINISTRATIVE ENTRY POINT */
   72
   73      %EQU KA#TRC_ADM = Y#INCVAL; /* administrative (KAA$ADM) functions */
   74      %SET Y#INCVAL = Y#INCVAL+1;
   75
   76      /* TRACE BUFFER GETS. */
   77
   78      %EQU KA#TRC_BFRGET = Y#INCVAL; /* buffer gets */
   79      %SET Y#INCVAL = Y#INCVAL+1;
   80
   81      /* TRACE BUFFER RELEASES. */
   82
   83      %EQU KA#TRC_BFRRLS = Y#INCVAL; /* buffer releases */
   84      %SET Y#INCVAL = Y#INCVAL+1;
   85
   86      /* TRACE INPUT INTERRUPTS. */
   87
   88      %EQU KA#TRC_INPINT = Y#INCVAL; /* input interrupts */
   89      %SET Y#INCVAL = Y#INCVAL+1;
   90
   91      /* TRACE IO INSTRUCTIONS. */
   92
   93      %EQU KA#TRC_IO = Y#INCVAL; /* IO instructions */
   94      %SET Y#INCVAL = Y#INCVAL+1;
   95
   96      /* TRACE IOLD INSTRUCTIONS. */
   97
   98      %EQU KA#TRC_IOLD = Y#INCVAL; /* IOLD instructions */
   99      %SET Y#INCVAL = Y#INCVAL+1;
  100
14:44 JUL 28 '97 KA_GLB_E.:E05SI                                           5    
  101      /* TRACE OUTPUT INTERRUPTS. */
  102
  103      %EQU KA#TRC_OTPINT = Y#INCVAL; /* output interrupts */
  104      %SET Y#INCVAL = Y#INCVAL+1;
  105
  106      %MEND;
  107      %EJECT;

14:44 JUL 28 '97 KA_GLB_E.:E05SI                                           6    
  108
  109      /* Output halt flag index definitions */
  110
  111      %MACRO KA_HLTOTP_E;
  112
  113      %EQU KA#HLTOTP_LOWX = 0; /* low value */
  114
  115      %SET Y#INCVAL = KA#HLTOTP_LOWX;
  116
  117      %EQU KA#HLTOTP_DVCX = Y#INCVAL; /* device (e.g., ETX/ACK flow control */
  118      %SET Y#INCVAL = Y#INCVAL+1;
  119      %EQU KA#HLTOTP_USRX = Y#INCVAL; /* user (e.g., end of page) */
  120      %SET Y#INCVAL = Y#INCVAL+1;
  121
  122      %EQU KA#HLTOTP_HI_X = Y#INCVAL-1; /* hi value */
  123      %MEND;

