VERSION E05

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:1    
        1        1        /*M* TOL$BAD_CARD   TOLTS LOADER BAD CARD Error Message Reporter */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        TOL$BAD_CARD: PROC (ERR_VEC);
       12       12
       13       13        /* Include Files */
       14       14
       15       15           %INCLUDE B_ERRORS_C;
       16     1142           %INCLUDE CP_6;
       17     6701           %INCLUDE CP_6_SUBS;
       18     7241           %INCLUDE TO_PERR_C ;
       19     7826
       20     7827        /* Data Control Blocks */
       21     7828
       22     7829    1      DCL M$DECKFILE DCB;
       23     7830    1      DCL M$DO       DCB;
       24     7831
       25     7832        /* Parameters */
       26     7833
       27     7834    1      DCL 1 ERR_VEC DALIGNED,
       28     7835    1            2 BOUND UBIN (20) UNAL,
       29     7836    1            2 *     UBIN (16) UNAL,
       30     7837    1            2 BASE  UBIN (20) UNAL,
       31     7838    1            2 *     UBIN (4) UNAL,
       32     7839    1            2 SEGID UBIN (12) UNAL;
       33     7840           %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:2    
       34     7841        /* External Variables */
       35     7842
       36     7843    1      DCL B$TCB$ PTR SYMREF ;
       37     7844           %B$TCB ;
       38     7847           %B$ALT ;
       39     7855    1      DCL TOL$CARD_SEQ SYMREF UBIN (36) ALIGNED;
       40     7856    1      DCL TOL$DECKFILE_ARS# SYMREF UBIN (36) ALIGNED;
       41     7857    1      DCL TOL$I SYMREF UBIN (36) ALIGNED;
       42     7858    1      DCL TOL$J SYMREF UBIN (36) ALIGNED;
       43     7859    1      DCL TOL$K SYMREF UBIN (36) ALIGNED;
       44     7860    1      DCL TOL$START_LOAD$ SYMREF PTR ALIGNED;
       45     7861    1      DCL TOL$BINARY$ SYMREF PTR ALIGNED;
       46     7862    1      DCL TOL$CALL_SEQ$ SYMREF PTR ALIGNED;
       47     7863    1      DCL 1 TOL$CATALOG_ENTRY_KEY SYMREF UNAL,
       48     7864    1            2 SIZE UBIN (9) UNAL,
       49     7865    1            2 DECK# UBIN (18) UNAL,
       50     7866    1            2 ENTRY# UBIN (18) UNAL;
       51     7867    1      DCL 1 TOL$CATALOG_KEY SYMREF ALIGNED,
       52     7868    1            2 SIZE UBIN (9) UNAL,
       53     7869    1            2 DATA CHAR (23) UNAL,
       54     7870    1            2 SPLIT REDEF DATA UNAL,
       55     7871    1              3 DATA CHAR (21) UNAL,
       56     7872    1              3 CLEAR CHAR (2) UNAL,
       57     7873    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
       58     7874    1      DCL 1 TOL$DKEND_CARD SYMREF ALIGNED,
       59     7875    1            2 CONTROL CHAR (7) UNAL,
       60     7876    1            2 TYPE CHAR (8) UNAL,
       61     7877    1            2 * CHAR (51) UNAL,
       62     7878    1            2 REVISION CHAR (6) UNAL,
       63     7879    1            2 LBL CHAR (4) UNAL,
       64     7880    1            2 SEQ CHAR (4) UNAL,
       65     7881    1            2 CHECKSUM UBIN (36) ALIGNED;
       66     7882    1      DCL 1 TOL$OBJECT SYMREF ALIGNED,
       67     7883    1            2 BCD ALIGNED,
       68     7884    1              3 CONTROL CHAR (7) UNAL,
       69     7885    1              3 TYPE CHAR (8) UNAL,
       70     7886    1              3 * CHAR (6) UNAL,
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:3    
       71     7887    1              3 LOAD_TYPE CHAR (1) UNAL,
       72     7888    1              3 * CHAR (37) UNAL,
       73     7889    1              3 ASSEMBLER CHAR (1) UNAL,
       74     7890    1              3 * CHAR (12) UNAL,
       75     7891    1              3 LBL CHAR (4) ALIGNED,
       76     7892    1              3 SEQ CHAR (4) ALIGNED,
       77     7893    1            2 DECK# UBIN (18) UNAL,
       78     7894    1            2 BINARY_COUNT UBIN (18) UNAL,
       79     7895    1            2 TOTAL_COUNT UBIN (18) UNAL,
       80     7896    1            2 LOAD_SIZE UBIN (18) UNAL,
       81     7897    1            2 DECK_CHECKSUM UBIN (36) ALIGNED,
       82     7898    1            2 CHECKSUM UBIN (36) ALIGNED;
       83     7899    1      DCL 1 TOL$OBJECT_KEY SYMREF ALIGNED,
       84     7900    1            2 SIZE UBIN (9) UNAL,
       85     7901    1            2 DATA CHAR (23) UNAL,
       86     7902    1            2 SPLIT REDEF DATA UNAL,
       87     7903    1              3 DATA CHAR (21) UNAL,
       88     7904    1              3 CLEAR CHAR (2) UNAL,
       89     7905    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
       90     7906    1      DCL 1 TOL$PATCH_CARD SYMREF ALIGNED,
       91     7907    1            2 * CHAR (7) UNAL,
       92     7908    1            2 TYPE CHAR (8) UNAL,
       93     7909    1            2 * CHAR (57) UNAL,
       94     7910    1            2 LBL CHAR (4) ALIGNED,
       95     7911    1            2 SEQ CHAR (4) ALIGNED,
       96     7912    1            2 CHECKSUM UBIN (36) ALIGNED;
       97     7913    1      DCL 1 PATCH_ASCII REDEF TOL$PATCH_CARD ALIGNED,
       98     7914    1            2 DATA CHAR (80) ALIGNED,
       99     7915    1            2 CHARS (0:79) REDEF DATA CHAR (1) UNAL,
      100     7916    1            2 * UBIN (36) ALIGNED;
      101     7917    1      DCL 1 HEX_CARD REDEF TOL$PATCH_CARD ALIGNED,
      102     7918    1            2 * CHAR (6) UNAL,
      103     7919    1            2 CR CHAR (1) UNAL,
      104     7920    1            2 TYPE CHAR (8) UNAL,
      105     7921    1            2 * CHAR (21) UNAL,
      106     7922    1            2 REVISION CHAR (6) UNAL,
      107     7923    1            2 * CHAR (38) UNAL,
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:4    
      108     7924    1            2 * UBIN (36) ALIGNED;
      109     7925    1      DCL 1 HEX_ASCII REDEF TOL$PATCH_CARD ALIGNED,
      110     7926    1            2 DATA CHAR (80) ALIGNED,
      111     7927    1            2 CHARS (0:79) REDEF DATA CHAR (1) UNAL,
      112     7928    1            2 * UBIN (36) ALIGNED;
      113     7929    1      DCL 1 TOL$PATCH_KEY SYMREF UNAL,
      114     7930    1            2 SIZE UBIN (9) UNAL,
      115     7931    1            2 DECK# UBIN (18) UNAL,
      116     7932    1            2 CARD# UBIN (18) UNAL;
      117     7933    1      DCL 1 TOL$RELOC (0:27) SYMREF ALIGNED,
      118     7934    1            2 UPPER UBIN (18) UNAL,
      119     7935    1            2 LOWER UBIN (18) UNAL;
      120     7936        %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:5    
      121     7937        /* Variables */
      122     7938
      123     7939    1      DCL CATALOG_DECK# UBIN (18) UNAL;
      124     7940    1      DCL L UBIN (36) ALIGNED;
      125     7941    1      DCL M UBIN (36) ALIGNED;
      126     7942    1      DCL MESSAGE BASED (ERR_PTR$) CHAR (140) ALIGNED;
      127     7943    1      DCL 1 BINARY BASED (TOL$BINARY$) ALIGNED,
      128     7944    1            2 WD1 UBIN (36) ALIGNED,
      129     7945    1            2 LOAD REDEF WD1 ALIGNED,
      130     7946    1              3 TYPE UBIN (3) UNAL,
      131     7947    1              3 * UBIN (9) UNAL,
      132     7948    1              3 SIZE UBIN (6) UNAL,
      133     7949    1              3 ADDRESS UBIN (18) UNAL,
      134     7950    1            2 CHECKSUM UBIN (36) ALIGNED,
      135     7951    1            2 RELOC (0:2) UBIN (36) ALIGNED,
      136     7952    1            2 DATA (0:20) UBIN (36) ALIGNED,
      137     7953    1            2 SPLIT (0:20) REDEF DATA UNAL,
      138     7954    1              3 UPPER UBIN (18) UNAL,
      139     7955    1              3 LOWER UBIN (18) UNAL;
      140     7956    1      DCL 1 BINARY_LBLSEQ REDEF BINARY ALIGNED,
      141     7957    1            2 * CHAR (96) ALIGNED,
      142     7958    1            2 LBL CHAR (4) ALIGNED,
      143     7959    1            2 SEQ CHAR (4) ALIGNED;
      144     7960    1      DCL 1 CALL_SEQUENCE BASED (TOL$CALL_SEQ$) ALIGNED,
      145     7961    1            2 FDCWP UBIN (18) UNAL,
      146     7962    1            2 STATUSP UBIN (18) UNAL,
      147     7963    1            2 CATALOG# UBIN (18) UNAL,
      148     7964    1            2 NEXT_ENTRY UBIN (18) UNAL,
      149     7965    1            2 CATALOG_CKSUM ALIGNED,
      150     7966    1              3 UPPER UBIN (18) UNAL,
      151     7967    1              3 LOWER UBIN (18) UNAL,
      152     7968    1            2 CATALOG_CHECKSUM REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
      153     7969    1            2 DECK_OFFSET REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
      154     7970    1            2 DECK# UBIN (18) UNAL,
      155     7971    1            2 ENTRY_COUNT UBIN (18) UNAL,
      156     7972    1            2 CARD_COUNT REDEF ENTRY_COUNT UBIN (18) UNAL,
      157     7973    1            2 CHECKSUM UBIN (36) ALIGNED,
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:6    
      158     7974    1            2 RELOCATION UBIN (36) ALIGNED,
      159     7975    1            2 NO_MORE SBIN (36) ALIGNED;
      160     7976    1      DCL ERR_PTR$ PTR ALIGNED;
      161     7977    1      DCL 1 ERR_PTRP REDEF ERR_PTR$ ALIGNED,
      162     7978    1            2 ADDRESS UBIN (20) UNAL,
      163     7979    1            2 * UBIN (4) UNAL,
      164     7980    1            2 SEGID UBIN (12) UNAL;
      165     7981    1      DCL 1 LOAD BASED (TOL$START_LOAD$) ALIGNED,
      166     7982    1            2 TYPE UBIN (3) UNAL,
      167     7983    1            2 * UBIN (9) UNAL,
      168     7984    1            2 SIZE UBIN (6) UNAL,
      169     7985    1            2 ADDRESS UBIN (18) UNAL,
      170     7986    1            2 DATA (0:27) UBIN (36) ALIGNED;
      171     7987    1      DCL 1 MASTER_ENTRY_KEY STATIC UNAL,
      172     7988    1            2 SIZE UBIN (9) UNAL INIT (4),
      173     7989    1            2 DECK# UBIN (18) UNAL INIT (1),
      174     7990    1            2 ENTRY# UBIN (18) UNAL;
      175     7991    1      DCL 1 MASTER_KEY STATIC ALIGNED,
      176     7992    1            2 SIZE UBIN (9) UNAL,
      177     7993    1            2 DATA CHAR (23) UNAL,
      178     7994    1            2 SPLIT REDEF DATA UNAL,
      179     7995    1              3 DATA CHAR (21) UNAL,
      180     7996    1              3 CLEAR CHAR (2) UNAL,
      181     7997    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      182     7998           %VLP_ERRCODE (FPTN = TOL_ERROR_CODE,
      183     7999                         FCG  = 'TO',
      184     8000                         MID  = 'L',
      185     8001                         SEV  = 0) ;
      186     8046           %EJECT ;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:7    
      187     8047        /* External Entries */
      188     8048
      189     8049    1      DCL TOT$CONSOLE_OUT   ENTRY ;
      190     8050    1      DCL TOX$ABORT         ENTRY (1);
      191     8051    1      DCL TOX$ERROR         ENTRY (1);
      192     8052           %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:8    
      193     8053        /* Code */
      194     8054
      195     8055    1      ERR_PTRP = '0'B;
      196     8056    1      ERR_PTRP.SEGID = ERR_VEC.SEGID;
      197     8057    1      ERR_PTRP.ADDRESS = ERR_VEC.BASE;
      198     8058    1      IF SUBSTR (MESSAGE, 0, 8) = '--ALTRET'
      199     8059    1      THEN CALL TOX$ABORT (B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR) ;
      200     8060    2      ELSE DO ;
      201     8061    2              CALL TOL$REPLACE (ERR_VEC);
      202     8062    2              CALL TOL$PRINT_ERROR_MESSAGE (ERR_VEC) ;
      203     8063    2              TOL_ERROR_CODE.ERR# = %E$COULDNOTLOAD ;
      204     8064    2              CALL TOX$ERROR (TOL_ERROR_CODE) ;
      205     8065    2           END /* ELSE */ ;
      206     8066    1      RETURN;
      207     8067
      208     8068        /* END TOL$BAD_CARD */
      209     8069        %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:9    
      210     8070    1   TOL$REPLACE: PROC (ERR_VEC);
      211     8071
      212     8072    2      DCL 1 ERR_VEC ALIGNED,
      213     8073    2            2 BOUND UBIN (20) UNAL,
      214     8074    2            2 * UBIN (16) UNAL,
      215     8075    2            2 BASE UBIN (20) UNAL,
      216     8076    2            2 * UBIN (4) UNAL,
      217     8077    2            2 SEGID UBIN (12) UNAL;
      218     8078    2      DCL FIRST_CHAR CHAR (1) UNAL;
      219     8079    2      DCL REPLACE_CASE STATIC CHAR (10) UNAL INIT ('BCDEHJLOPS');
      220     8080    2      DCL REPLACE_INDEX UBIN (36) ALIGNED;
      221     8081    2      DCL REPLACE_SIZE UBIN (36) ALIGNED;
      222     8082    2      DCL REPLACE_START UBIN (36) ALIGNED;
      223     8083    2      DCL 1 EIGHTEEN ALIGNED,
      224     8084    2            2 * UBIN (18) UNAL,
      225     8085    2            2 DATA UBIN (18) UNAL;
      226     8086    2      DCL 1 NINE REDEF EIGHTEEN ALIGNED,
      227     8087    2            2 * UBIN (27) UNAL,
      228     8088    2            2 DATA UBIN (9) UNAL;
      229     8089    2      DCL 1 SIX REDEF EIGHTEEN ALIGNED,
      230     8090    2            2 * UBIN (30) UNAL,
      231     8091    2            2 DATA UBIN (6) UNAL;
      232     8092    2      DCL 1 THREE REDEF EIGHTEEN ALIGNED,
      233     8093    2            2 * UBIN (33) UNAL,
      234     8094    2            2 DATA UBIN (3) UNAL;
      235     8095    2      DCL FULLWD REDEF EIGHTEEN UBIN (36) ALIGNED;
      236     8096           %EJECT ;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:10   
      237     8097        /* Code */
      238     8098
      239     8099    2      REPLACE_INDEX = 0;
      240     8100    2      REPLACE_SIZE = ERR_VEC.BOUND;
      241     8101    3      DO WHILE (REPLACE_INDEX < ERR_VEC.BOUND);
      242     8102    3         REPLACE_START = REPLACE_INDEX;
      243     8103    3         CALL INDEX
      244     8104    3                 (REPLACE_INDEX,
      245     8105    3                 '%',
      246     8106    3                 MESSAGE,
      247     8107    3                 REPLACE_START);
      248     8108    3         IF (REPLACE_INDEX < ERR_VEC.BOUND)
      249     8109    4         THEN DO;
      250     8110    4                 REPLACE_START = REPLACE_INDEX;
      251     8111    4                 FIRST_CHAR = SUBSTR (MESSAGE, REPLACE_START + 1, 1);
      252     8112    4                 CALL INDEX
      253     8113    4                         (L,
      254     8114    4                         FIRST_CHAR,
      255     8115    4                         REPLACE_CASE);
      256     8116    4                 FULLWD = 0;
      257     8117    5                 DO CASE (L);
      258     8118    5                    CASE (0);
      259     8119    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%BIN')
      260     8120    5                       THEN CALL TOL$CONVERT_BINARY (4, TOL$I + 1);
      261     8121    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%BLB')
      262     8122    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 4, BINARY_LBLSEQ.LBL);
      263     8123    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%BL')
      264     8124    6                       THEN DO;
      265     8125    6                               THREE.DATA = BINARY.LOAD.TYPE;
      266     8126    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);
      267     8127    6                            END;
      268     8128    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%BR')
      269     8129    6                       THEN DO;
      270     8130    6                               EIGHTEEN.DATA = TOL$RELOC.LOWER(TOL$J);
      271     8131    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);
      272     8132    6                            END;
      273     8133    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%BU')
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:11   
      274     8134    6                       THEN DO;
      275     8135    6                               EIGHTEEN.DATA = TOL$RELOC.UPPER(TOL$J) ;
      276     8136    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);
      277     8137    6                            END;
      278     8138    5                    CASE (1);
      279     8139    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%CAT')
      280     8140    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 21, TOL$CATALOG_KEY.
              8140                                SPLIT.DATA);
      281     8141    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%CLM')
      282     8142    5                       THEN CALL TOL$CONVERT_BINARY (4, TOL$J + 77);
      283     8143    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%COL')
      284     8144    5                       THEN CALL TOL$CONVERT_BINARY (4, TOL$K + 1);
      285     8145    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 6) = '%COUNT')
      286     8146    6                       THEN DO;
      287     8147    6                               EIGHTEEN.DATA = TOL$OBJECT.BINARY_COUNT;
      288     8148    6                               CALL TOL$CONVERT_BINARY (6, FULLWD);
      289     8149    6                            END;
      290     8150    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%CZ')
      291     8151    6                       THEN DO;
      292     8152    6                               NINE.DATA = TOL$CATALOG_KEY.SIZE;
      293     8153    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);
      294     8154    6                            END;
      295     8155    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%C#')
      296     8156    5                       THEN CALL TOL$GET_CATALOG#;
      297     8157    5                    CASE (2);
      298     8158    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%DEK')
      299     8159    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 4, TOL$OBJECT.BCD.LBL);
      300     8160    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%DLB')
      301     8161    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 4, TOL$DKEND_CARD.LBL);
      302     8162    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%DR')
      303     8163    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 6, TOL$DKEND_CARD.
              8163                                REVISION);
      304     8164    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%D#')
      305     8165    6                       THEN DO;
      306     8166    6                               EIGHTEEN.DATA = TOL$OBJECT.DECK#;
      307     8167    6                               CALL TOL$CONVERT_BINARY (6, FULLWD);
      308     8168    6                            END;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:12   
      309     8169    5                    CASE (3);
      310     8170    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%E#')
      311     8171    6                       THEN DO;
      312     8172    6                               EIGHTEEN.DATA = TOL$CATALOG_ENTRY_KEY.ENTRY#;
      313     8173    6                               CALL TOL$CONVERT_BINARY (6, FULLWD);
      314     8174    6                            END;
      315     8175    5                    CASE (4);
      316     8176    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%HR')
      317     8177    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 6, HEX_CARD.REVISION);
      318     8178    5                    CASE (5);
      319     8179    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 2) = '%J')
      320     8180    5                       THEN CALL TOL$CONVERT_BINARY (2, TOL$J);
      321     8181    5                    CASE (6);
      322     8182    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%LTT')
      323     8183    6                       THEN DO;
      324     8184    6                               THREE.DATA = LOAD.TYPE;
      325     8185    6                               CALL TOL$CONVERT_BINARY (4, FULLWD);
      326     8186    6                            END;
      327     8187    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%LTZ')
      328     8188    6                       THEN DO;
      329     8189    6                               SIX.DATA = LOAD.SIZE;
      330     8190    6                               CALL TOL$CONVERT_BINARY (4, FULLWD);
      331     8191    6                            END;
      332     8192    5                    CASE (7);
      333     8193    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%OA')
      334     8194    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 3, TOL$OBJECT.BCD.
              8194                                ASSEMBLER);
      335     8195    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%OD')
      336     8196    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 23, TOL$OBJECT_KEY.DATA
              8196                                );
      337     8197    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%OL')
      338     8198    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 3, TOL$OBJECT.BCD.
              8198                                LOAD_TYPE);
      339     8199    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%OS')
      340     8200    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 4, TOL$OBJECT.BCD.SEQ);
      341     8201    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%OZ')
      342     8202    6                       THEN DO;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:13   
      343     8203    6                               NINE.DATA = TOL$OBJECT_KEY.SIZE;
      344     8204    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);
      345     8205    6                            END;
      346     8206    5                    CASE (8);
      347     8207    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%PLB')
      348     8208    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 4, TOL$PATCH_CARD.LBL);
      349     8209    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%P#')
      350     8210    6                       THEN DO;
      351     8211    6                               EIGHTEEN.DATA = TOL$PATCH_KEY.CARD#;
      352     8212    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);
      353     8213    6                            END;
      354     8214    5                    CASE (9);
      355     8215    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 5) = '%SIZE')
      356     8216    5                       THEN CALL TOL$CONVERT_BINARY (6, TOL$DECKFILE_ARS#);
      357     8217    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%SEQ')
      358     8218    5                       THEN CALL TOL$CONVERT_BINARY (6, TOL$CARD_SEQ);
      359     8219    5                 END;
      360     8220    4              END;
      361     8221    3         IF (SUBSTR
      362     8222    3                 (MESSAGE,
      363     8223    3                 REPLACE_START,
      364     8224    3                 1) =
      365     8225    3                 '%')
      366     8226    3         THEN REPLACE_INDEX = REPLACE_INDEX + 1;
      367     8227    3      END;
      368     8228    2      RETURN;
      369     8229
      370     8230        /* END TOL$REPLACE */
      371     8231        %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:14   
      372     8232    2   TOL$CONVERT_BINARY: PROC (SIZE, BINARY) ;
      373     8233
      374     8234    3      DCL BINARY UBIN (36) ALIGNED;
      375     8235    3      DCL SIZE UBIN (36) ALIGNED;
      376     8236    3      DCL STRING CHAR (8) ALIGNED;
      377     8237    3      DCL STRING_CHAR (0:7) REDEF STRING CHAR (1) UNAL;
      378     8238
      379     8239        /* Code */
      380     8240
      381     8241    3      CALL BINCHAR (STRING, BINARY);
      382     8242    3      M = 0;
      383     8243    4      DO WHILE (STRING_CHAR (M) = '0' AND M < 7);
      384     8244    4         STRING_CHAR (M) = ' ';
      385     8245    4         M = M + 1;
      386     8246    4      END;
      387     8247    3      CALL INSERT (MESSAGE,
      388     8248    3              REPLACE_START,
      389     8249    3              SIZE,
      390     8250    3              SUBSTR (STRING, 8 - SIZE));
      391     8251    3      RETURN;
      392     8252
      393     8253    3   END TOL$CONVERT_BINARY;
      394     8254        %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:15   
      395     8255    2   TOL$GET_CATALOG#: PROC;
      396     8256
      397     8257           %FPT_READ (FPTN = READ_MASTER_ENTRY,
      398     8258                      BUF = MASTER_KEY,
      399     8259                      DCB = M$DECKFILE,
      400     8260                      KEY = MASTER_ENTRY_KEY,
      401     8261                      KEYS = YES,
      402     8262                      WAIT = YES);
      403     8301
      404     8302        /* Code */
      405     8303
      406     8304    3      CATALOG_DECK# = 0;
      407     8305    3      IF (SUBSTR (TOL$OBJECT_KEY.DATA, 3, 1) ~= '.' OR
      408     8306    3              SUBSTR (TOL$OBJECT_KEY.DATA, 0, 3) = 'ITR' OR
      409     8307    3              SUBSTR (TOL$OBJECT_KEY.DATA, 0, 3) = 'MDR')
      410     8308    3      THEN CATALOG_DECK# = CALL_SEQUENCE.CATALOG#;
      411     8309    4      ELSE DO MASTER_ENTRY_KEY.ENTRY# = 1 TO 100;
      412     8310    4              CALL M$READ (READ_MASTER_ENTRY) ALTRET (FORGET_IT);
      413     8311    4              IF (SUBSTR (TOL$OBJECT_KEY.DATA,0,3) = SUBSTR (MASTER_KEY.DATA,0,3))
      414     8312    5              THEN DO;
      415     8313    5                      MASTER_ENTRY_KEY.ENTRY# = 100;
      416     8314    5                      CATALOG_DECK# = MASTER_KEY.SPLIT.DECK#;
      417     8315    5                   END;
      418     8316    4           END;
      419     8317    3   FORGET_IT:
      420     8318    3      IF (CATALOG_DECK# = 0)
      421     8319    3      THEN CALL INSERT(MESSAGE, REPLACE_START, 6, 'UNK');
      422     8320    4      ELSE DO;
      423     8321    4              EIGHTEEN.DATA = CATALOG_DECK#;
      424     8322    4              CALL TOL$CONVERT_BINARY (6, FULLWD);
      425     8323    4           END;
      426     8324    3      RETURN;
      427     8325    3   END TOL$GET_CATALOG#;
      428     8326    2   END TOL$REPLACE;
      429     8327        %EJECT ;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:16   
      430     8328        /*I* NAME:         TOL$PRINT_ERROR_MESSAGE
      431     8329             PURPOSE:      Prints TOLTS Loader Error Message
      432     8330             DESCRIPTION:  The TOLTS Loader uses error messages that contain
      433     8331                           numerous text replacement strings.     Hence, the
      434     8332                           library service, XUR$ERRMSG will  not  work since
      435     8333                           it only allows 3 text replacements.  This routine
      436     8334                           is called to print loader error messages instead.
      437     8335        */
      438     8336
      439     8337    1   TOL$PRINT_ERROR_MESSAGE: PROC (ERR_VEC) ;
      440     8338
      441     8339    2      DCL ERR_VEC     BIT (72) DALIGNED ;
      442     8340           %FPT_WRITE (FPTN = CONSOLE_FPT,
      443     8341                       STCLASS = SYMREF) ;
      444     8372
      445     8373        /* Code */
      446     8374
      447     8375    2      CONSOLE_FPT.BUF_ = ERR_VEC ;
      448     8376    2      CALL TOT$CONSOLE_OUT ;
      449     8377    2      RETURN ;
      450     8378
      451     8379    2   END TOL$PRINT_ERROR_MESSAGE ;
      452     8380    1   END TOL$BAD_CARD;

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:17   
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure TOL$BAD_CARD.

   Procedure TOL$BAD_CARD requires 553 words for executable code.
   Procedure TOL$BAD_CARD requires 30 words of local(AUTO) storage.

    No errors detected in file TOL$BAD_CARD.:E05TSI    .

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:18   

 Object Unit name= TOL$BAD_CARD                               File name= TOL$BAD_CARD.:E05TOU
 UTS= JUL 30 '97 06:24:44.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$DECKFILE
    2   DCB   even  none     0      0  M$DO
    3   Data  even  none    26     32  TOL$BAD_CARD
    4  RoData even  UTS     35     43  TOL$BAD_CARD
    5   Proc  even  none   553   1051  TOL$BAD_CARD
    6  RoData even  none    12     14  TOL$BAD_CARD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     5      0   yes            yes      Std        1  TOL$BAD_CARD

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 TOX$ABORT
         yes           Std       1 TOX$ERROR
         yes           Std       0 TOT$CONSOLE_OUT
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:19   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$DECKFILE                            M$DO
     B$TCB$                                TOL$CARD_SEQ                          TOL$DECKFILE_ARS#
     TOL$I                                 TOL$J                                 TOL$K
     TOL$START_LOAD$                       TOL$BINARY$                           TOL$CALL_SEQ$
     TOL$CATALOG_ENTRY_KEY                 TOL$CATALOG_KEY                       TOL$DKEND_CARD
     TOL$OBJECT                            TOL$OBJECT_KEY                        TOL$PATCH_CARD
     TOL$PATCH_KEY                         TOL$RELOC                             CONSOLE_FPT
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:20   


        1        1        /*M* TOL$BAD_CARD   TOLTS LOADER BAD CARD Error Message Reporter */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        TOL$BAD_CARD: PROC (ERR_VEC);

     11  5 000000   000000 700200 xent  TOL$BAD_CARD TSX0  ! X66_AUTO_1
         5 000001   000036 000001                    ZERO    30,1

       12       12
       13       13        /* Include Files */
       14       14
       15       15           %INCLUDE B_ERRORS_C;
       16     1142           %INCLUDE CP_6;
       17     6701           %INCLUDE CP_6_SUBS;
       18     7241           %INCLUDE TO_PERR_C ;
       19     7826
       20     7827        /* Data Control Blocks */
       21     7828
       22     7829    1      DCL M$DECKFILE DCB;
       23     7830    1      DCL M$DO       DCB;
       24     7831
       25     7832        /* Parameters */
       26     7833
       27     7834    1      DCL 1 ERR_VEC DALIGNED,
       28     7835    1            2 BOUND UBIN (20) UNAL,
       29     7836    1            2 *     UBIN (16) UNAL,
       30     7837    1            2 BASE  UBIN (20) UNAL,
       31     7838    1            2 *     UBIN (4) UNAL,
       32     7839    1            2 SEGID UBIN (12) UNAL;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:21   
       33     7840           %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:22   
       34     7841        /* External Variables */
       35     7842
       36     7843    1      DCL B$TCB$ PTR SYMREF ;
       37     7844           %B$TCB ;
       38     7847           %B$ALT ;
       39     7855    1      DCL TOL$CARD_SEQ SYMREF UBIN (36) ALIGNED;
       40     7856    1      DCL TOL$DECKFILE_ARS# SYMREF UBIN (36) ALIGNED;
       41     7857    1      DCL TOL$I SYMREF UBIN (36) ALIGNED;
       42     7858    1      DCL TOL$J SYMREF UBIN (36) ALIGNED;
       43     7859    1      DCL TOL$K SYMREF UBIN (36) ALIGNED;
       44     7860    1      DCL TOL$START_LOAD$ SYMREF PTR ALIGNED;
       45     7861    1      DCL TOL$BINARY$ SYMREF PTR ALIGNED;
       46     7862    1      DCL TOL$CALL_SEQ$ SYMREF PTR ALIGNED;
       47     7863    1      DCL 1 TOL$CATALOG_ENTRY_KEY SYMREF UNAL,
       48     7864    1            2 SIZE UBIN (9) UNAL,
       49     7865    1            2 DECK# UBIN (18) UNAL,
       50     7866    1            2 ENTRY# UBIN (18) UNAL;
       51     7867    1      DCL 1 TOL$CATALOG_KEY SYMREF ALIGNED,
       52     7868    1            2 SIZE UBIN (9) UNAL,
       53     7869    1            2 DATA CHAR (23) UNAL,
       54     7870    1            2 SPLIT REDEF DATA UNAL,
       55     7871    1              3 DATA CHAR (21) UNAL,
       56     7872    1              3 CLEAR CHAR (2) UNAL,
       57     7873    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
       58     7874    1      DCL 1 TOL$DKEND_CARD SYMREF ALIGNED,
       59     7875    1            2 CONTROL CHAR (7) UNAL,
       60     7876    1            2 TYPE CHAR (8) UNAL,
       61     7877    1            2 * CHAR (51) UNAL,
       62     7878    1            2 REVISION CHAR (6) UNAL,
       63     7879    1            2 LBL CHAR (4) UNAL,
       64     7880    1            2 SEQ CHAR (4) UNAL,
       65     7881    1            2 CHECKSUM UBIN (36) ALIGNED;
       66     7882    1      DCL 1 TOL$OBJECT SYMREF ALIGNED,
       67     7883    1            2 BCD ALIGNED,
       68     7884    1              3 CONTROL CHAR (7) UNAL,
       69     7885    1              3 TYPE CHAR (8) UNAL,
       70     7886    1              3 * CHAR (6) UNAL,
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:23   
       71     7887    1              3 LOAD_TYPE CHAR (1) UNAL,
       72     7888    1              3 * CHAR (37) UNAL,
       73     7889    1              3 ASSEMBLER CHAR (1) UNAL,
       74     7890    1              3 * CHAR (12) UNAL,
       75     7891    1              3 LBL CHAR (4) ALIGNED,
       76     7892    1              3 SEQ CHAR (4) ALIGNED,
       77     7893    1            2 DECK# UBIN (18) UNAL,
       78     7894    1            2 BINARY_COUNT UBIN (18) UNAL,
       79     7895    1            2 TOTAL_COUNT UBIN (18) UNAL,
       80     7896    1            2 LOAD_SIZE UBIN (18) UNAL,
       81     7897    1            2 DECK_CHECKSUM UBIN (36) ALIGNED,
       82     7898    1            2 CHECKSUM UBIN (36) ALIGNED;
       83     7899    1      DCL 1 TOL$OBJECT_KEY SYMREF ALIGNED,
       84     7900    1            2 SIZE UBIN (9) UNAL,
       85     7901    1            2 DATA CHAR (23) UNAL,
       86     7902    1            2 SPLIT REDEF DATA UNAL,
       87     7903    1              3 DATA CHAR (21) UNAL,
       88     7904    1              3 CLEAR CHAR (2) UNAL,
       89     7905    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
       90     7906    1      DCL 1 TOL$PATCH_CARD SYMREF ALIGNED,
       91     7907    1            2 * CHAR (7) UNAL,
       92     7908    1            2 TYPE CHAR (8) UNAL,
       93     7909    1            2 * CHAR (57) UNAL,
       94     7910    1            2 LBL CHAR (4) ALIGNED,
       95     7911    1            2 SEQ CHAR (4) ALIGNED,
       96     7912    1            2 CHECKSUM UBIN (36) ALIGNED;
       97     7913    1      DCL 1 PATCH_ASCII REDEF TOL$PATCH_CARD ALIGNED,
       98     7914    1            2 DATA CHAR (80) ALIGNED,
       99     7915    1            2 CHARS (0:79) REDEF DATA CHAR (1) UNAL,
      100     7916    1            2 * UBIN (36) ALIGNED;
      101     7917    1      DCL 1 HEX_CARD REDEF TOL$PATCH_CARD ALIGNED,
      102     7918    1            2 * CHAR (6) UNAL,
      103     7919    1            2 CR CHAR (1) UNAL,
      104     7920    1            2 TYPE CHAR (8) UNAL,
      105     7921    1            2 * CHAR (21) UNAL,
      106     7922    1            2 REVISION CHAR (6) UNAL,
      107     7923    1            2 * CHAR (38) UNAL,
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:24   
      108     7924    1            2 * UBIN (36) ALIGNED;
      109     7925    1      DCL 1 HEX_ASCII REDEF TOL$PATCH_CARD ALIGNED,
      110     7926    1            2 DATA CHAR (80) ALIGNED,
      111     7927    1            2 CHARS (0:79) REDEF DATA CHAR (1) UNAL,
      112     7928    1            2 * UBIN (36) ALIGNED;
      113     7929    1      DCL 1 TOL$PATCH_KEY SYMREF UNAL,
      114     7930    1            2 SIZE UBIN (9) UNAL,
      115     7931    1            2 DECK# UBIN (18) UNAL,
      116     7932    1            2 CARD# UBIN (18) UNAL;
      117     7933    1      DCL 1 TOL$RELOC (0:27) SYMREF ALIGNED,
      118     7934    1            2 UPPER UBIN (18) UNAL,
      119     7935    1            2 LOWER UBIN (18) UNAL;
      120     7936        %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:25   
      121     7937        /* Variables */
      122     7938
      123     7939    1      DCL CATALOG_DECK# UBIN (18) UNAL;
      124     7940    1      DCL L UBIN (36) ALIGNED;
      125     7941    1      DCL M UBIN (36) ALIGNED;
      126     7942    1      DCL MESSAGE BASED (ERR_PTR$) CHAR (140) ALIGNED;
      127     7943    1      DCL 1 BINARY BASED (TOL$BINARY$) ALIGNED,
      128     7944    1            2 WD1 UBIN (36) ALIGNED,
      129     7945    1            2 LOAD REDEF WD1 ALIGNED,
      130     7946    1              3 TYPE UBIN (3) UNAL,
      131     7947    1              3 * UBIN (9) UNAL,
      132     7948    1              3 SIZE UBIN (6) UNAL,
      133     7949    1              3 ADDRESS UBIN (18) UNAL,
      134     7950    1            2 CHECKSUM UBIN (36) ALIGNED,
      135     7951    1            2 RELOC (0:2) UBIN (36) ALIGNED,
      136     7952    1            2 DATA (0:20) UBIN (36) ALIGNED,
      137     7953    1            2 SPLIT (0:20) REDEF DATA UNAL,
      138     7954    1              3 UPPER UBIN (18) UNAL,
      139     7955    1              3 LOWER UBIN (18) UNAL;
      140     7956    1      DCL 1 BINARY_LBLSEQ REDEF BINARY ALIGNED,
      141     7957    1            2 * CHAR (96) ALIGNED,
      142     7958    1            2 LBL CHAR (4) ALIGNED,
      143     7959    1            2 SEQ CHAR (4) ALIGNED;
      144     7960    1      DCL 1 CALL_SEQUENCE BASED (TOL$CALL_SEQ$) ALIGNED,
      145     7961    1            2 FDCWP UBIN (18) UNAL,
      146     7962    1            2 STATUSP UBIN (18) UNAL,
      147     7963    1            2 CATALOG# UBIN (18) UNAL,
      148     7964    1            2 NEXT_ENTRY UBIN (18) UNAL,
      149     7965    1            2 CATALOG_CKSUM ALIGNED,
      150     7966    1              3 UPPER UBIN (18) UNAL,
      151     7967    1              3 LOWER UBIN (18) UNAL,
      152     7968    1            2 CATALOG_CHECKSUM REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
      153     7969    1            2 DECK_OFFSET REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
      154     7970    1            2 DECK# UBIN (18) UNAL,
      155     7971    1            2 ENTRY_COUNT UBIN (18) UNAL,
      156     7972    1            2 CARD_COUNT REDEF ENTRY_COUNT UBIN (18) UNAL,
      157     7973    1            2 CHECKSUM UBIN (36) ALIGNED,
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:26   
      158     7974    1            2 RELOCATION UBIN (36) ALIGNED,
      159     7975    1            2 NO_MORE SBIN (36) ALIGNED;
      160     7976    1      DCL ERR_PTR$ PTR ALIGNED;
      161     7977    1      DCL 1 ERR_PTRP REDEF ERR_PTR$ ALIGNED,
      162     7978    1            2 ADDRESS UBIN (20) UNAL,
      163     7979    1            2 * UBIN (4) UNAL,
      164     7980    1            2 SEGID UBIN (12) UNAL;
      165     7981    1      DCL 1 LOAD BASED (TOL$START_LOAD$) ALIGNED,
      166     7982    1            2 TYPE UBIN (3) UNAL,
      167     7983    1            2 * UBIN (9) UNAL,
      168     7984    1            2 SIZE UBIN (6) UNAL,
      169     7985    1            2 ADDRESS UBIN (18) UNAL,
      170     7986    1            2 DATA (0:27) UBIN (36) ALIGNED;
      171     7987    1      DCL 1 MASTER_ENTRY_KEY STATIC UNAL,
      172     7988    1            2 SIZE UBIN (9) UNAL INIT (4),
      173     7989    1            2 DECK# UBIN (18) UNAL INIT (1),
      174     7990    1            2 ENTRY# UBIN (18) UNAL;
      175     7991    1      DCL 1 MASTER_KEY STATIC ALIGNED,
      176     7992    1            2 SIZE UBIN (9) UNAL,
      177     7993    1            2 DATA CHAR (23) UNAL,
      178     7994    1            2 SPLIT REDEF DATA UNAL,
      179     7995    1              3 DATA CHAR (21) UNAL,
      180     7996    1              3 CLEAR CHAR (2) UNAL,
      181     7997    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      182     7998           %VLP_ERRCODE (FPTN = TOL_ERROR_CODE,
      183     7999                         FCG  = 'TO',
      184     8000                         MID  = 'L',
      185     8001                         SEV  = 0) ;
      186     8046           %EJECT ;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:27   
      187     8047        /* External Entries */
      188     8048
      189     8049    1      DCL TOT$CONSOLE_OUT   ENTRY ;
      190     8050    1      DCL TOX$ABORT         ENTRY (1);
      191     8051    1      DCL TOX$ERROR         ENTRY (1);
      192     8052           %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:28   
      193     8053        /* Code */
      194     8054
      195     8055    1      ERR_PTRP = '0'B;

   8055  5 000002   200007 450100                    STZ     ERR_PTR$,,AUTO

      196     8056    1      ERR_PTRP.SEGID = ERR_VEC.SEGID;

   8056  5 000003   200003 470500                    LDP0    @ERR_VEC,,AUTO
         5 000004   000001 236100                    LDQ     1,,PR0
         5 000005   200007 752103                    STCQ    ERR_PTR$,'03'O,AUTO

      197     8057    1      ERR_PTRP.ADDRESS = ERR_VEC.BASE;

   8057  5 000006   200007 676100                    ERQ     ERR_PTR$,,AUTO
         5 000007   000034 376000 xsym               ANQ     B_VECTNIL+28
         5 000010   200007 656100                    ERSQ    ERR_PTR$,,AUTO

      198     8058    1      IF SUBSTR (MESSAGE, 0, 8) = '--ALTRET'

   8058  5 000011   200007 471500                    LDP1    ERR_PTR$,,AUTO
         5 000012   040000 106500                    CMPC    fill='040'O
         5 000013   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         5 000014   000000 000010 4                  ADSC9   0                        cn=0,n=8
         5 000015   000027 601000 5                  TNZ     s:8061

      199     8059    1      THEN CALL TOX$ABORT (B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR) ;

   8059  5 000016   000000 473400 xsym               LDP3    B$TCB$
         5 000017   300000 474500                    LDP4    0,,PR3
         5 000020   400102 635500                    EPPR5   66,,PR4
         5 000021   200030 455500                    STP5    STRING+3,,AUTO
         5 000022   200030 630500                    EPPR0   STRING+3,,AUTO
         5 000023   000017 631400 xsym               EPPR1   B_VECTNIL+15
         5 000024   000000 701000 xent               TSX1    TOX$ABORT
         5 000025   000000 011000                    NOP     0
         5 000026   000047 710000 5                  TRA     s:8066
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:29   

      200     8060    2      ELSE DO ;

      201     8061    2              CALL TOL$REPLACE (ERR_VEC);

   8061  5 000027   200003 236100                    LDQ     @ERR_VEC,,AUTO
         5 000030   200011 756100                    STQ     ERR_PTR$+2,,AUTO
         5 000031   000050 701000 5                  TSX1    TOL$REPLACE
         5 000032   000000 011000                    NOP     0

      202     8062    2              CALL TOL$PRINT_ERROR_MESSAGE (ERR_VEC) ;

   8062  5 000033   200003 236100                    LDQ     @ERR_VEC,,AUTO
         5 000034   200011 756100                    STQ     ERR_PTR$+2,,AUTO
         5 000035   001040 701000 5                  TSX1    TOL$PRINT_ERROR_MESSAGE
         5 000036   000000 011000                    NOP     0

      203     8063    2              TOL_ERROR_CODE.ERR# = %E$COULDNOTLOAD ;

   8063  5 000037   000010 236000 3                  LDQ     TOL_ERROR_CODE
         5 000040   000000 376000 6                  ANQ     0
         5 000041   002100 276007                    ORQ     1088,DL
         5 000042   000010 756000 3                  STQ     TOL_ERROR_CODE

      204     8064    2              CALL TOX$ERROR (TOL_ERROR_CODE) ;

   8064  5 000043   000001 630400 6                  EPPR0   1
         5 000044   000017 631400 xsym               EPPR1   B_VECTNIL+15
         5 000045   000000 701000 xent               TSX1    TOX$ERROR
         5 000046   000000 011000                    NOP     0

      205     8065    2           END /* ELSE */ ;

      206     8066    1      RETURN;

   8066  5 000047   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:30   
      207     8067
      208     8068        /* END TOL$BAD_CARD */
      209     8069        %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:31   
      210     8070    1   TOL$REPLACE: PROC (ERR_VEC);

   8070  5 000050   200010 741300       TOL$REPLACE  STX1  ! ERR_PTR$+1,,AUTO

      211     8071
      212     8072    2      DCL 1 ERR_VEC ALIGNED,
      213     8073    2            2 BOUND UBIN (20) UNAL,
      214     8074    2            2 * UBIN (16) UNAL,
      215     8075    2            2 BASE UBIN (20) UNAL,
      216     8076    2            2 * UBIN (4) UNAL,
      217     8077    2            2 SEGID UBIN (12) UNAL;
      218     8078    2      DCL FIRST_CHAR CHAR (1) UNAL;
      219     8079    2      DCL REPLACE_CASE STATIC CHAR (10) UNAL INIT ('BCDEHJLOPS');
      220     8080    2      DCL REPLACE_INDEX UBIN (36) ALIGNED;
      221     8081    2      DCL REPLACE_SIZE UBIN (36) ALIGNED;
      222     8082    2      DCL REPLACE_START UBIN (36) ALIGNED;
      223     8083    2      DCL 1 EIGHTEEN ALIGNED,
      224     8084    2            2 * UBIN (18) UNAL,
      225     8085    2            2 DATA UBIN (18) UNAL;
      226     8086    2      DCL 1 NINE REDEF EIGHTEEN ALIGNED,
      227     8087    2            2 * UBIN (27) UNAL,
      228     8088    2            2 DATA UBIN (9) UNAL;
      229     8089    2      DCL 1 SIX REDEF EIGHTEEN ALIGNED,
      230     8090    2            2 * UBIN (30) UNAL,
      231     8091    2            2 DATA UBIN (6) UNAL;
      232     8092    2      DCL 1 THREE REDEF EIGHTEEN ALIGNED,
      233     8093    2            2 * UBIN (33) UNAL,
      234     8094    2            2 DATA UBIN (3) UNAL;
      235     8095    2      DCL FULLWD REDEF EIGHTEEN UBIN (36) ALIGNED;
      236     8096           %EJECT ;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:32   
      237     8097        /* Code */
      238     8098
      239     8099    2      REPLACE_INDEX = 0;

   8099  5 000051   200013 450100                    STZ     REPLACE_INDEX,,AUTO

      240     8100    2      REPLACE_SIZE = ERR_VEC.BOUND;

   8100  5 000052   200011 470500                    LDP0    @ERR_VEC,,AUTO
         5 000053   000000 236100                    LDQ     0,,PR0
         5 000054   000020 772000                    QRL     16
         5 000055   200014 756100                    STQ     REPLACE_SIZE,,AUTO

      241     8101    3      DO WHILE (REPLACE_INDEX < ERR_VEC.BOUND);

   8101  5 000056   200013 116100                    CMPQ    REPLACE_INDEX,,AUTO
         5 000057   000667 602000 5                  TNC     s:8228
         5 000060   000667 600000 5                  TZE     s:8228

      242     8102    3         REPLACE_START = REPLACE_INDEX;

   8102  5 000061   200013 235100                    LDA     REPLACE_INDEX,,AUTO
         5 000062   200015 755100                    STA     REPLACE_START,,AUTO

      243     8103    3         CALL INDEX

   8103  5 000063   777563 620005                    EAX0    -141,AL
         5 000064   777777 660003                    ERX0    -1,DU
         5 000065   200015 236100                    LDQ     REPLACE_START,,AUTO
         5 000066   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000067   000000 124545                    SCM     mask='000'O
         5 000070   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         5 000071   000002 000001 6                  ADSC9   2                        cn=0,n=1
         5 000072   200013 000100                    ARG     REPLACE_INDEX,,AUTO
         5 000073   200013 056100                    ASQ     REPLACE_INDEX,,AUTO

      244     8104    3                 (REPLACE_INDEX,
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:33   
      245     8105    3                 '%',
      246     8106    3                 MESSAGE,
      247     8107    3                 REPLACE_START);
      248     8108    3         IF (REPLACE_INDEX < ERR_VEC.BOUND)

   8108  5 000074   200011 471500                    LDP1    @ERR_VEC,,AUTO
         5 000075   100000 236100                    LDQ     0,,PR1
         5 000076   000020 772000                    QRL     16
         5 000077   200013 116100                    CMPQ    REPLACE_INDEX,,AUTO
         5 000100   000650 602000 5                  TNC     s:8221
         5 000101   000650 600000 5                  TZE     s:8221

      249     8109    4         THEN DO;

      250     8110    4                 REPLACE_START = REPLACE_INDEX;

   8110  5 000102   200013 235100                    LDA     REPLACE_INDEX,,AUTO
         5 000103   200015 755100                    STA     REPLACE_START,,AUTO

      251     8111    4                 FIRST_CHAR = SUBSTR (MESSAGE, REPLACE_START + 1, 1);

   8111  5 000104   040100 100505                    MLR     fill='040'O
         5 000105   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
         5 000106   200012 000001                    ADSC9   FIRST_CHAR,,AUTO         cn=0,n=1

      252     8112    4                 CALL INDEX

   8112  5 000107   000100 124400                    SCM     mask='000'O
         5 000110   000011 000012 3                  ADSC9   REPLACE_CASE             cn=0,n=10
         5 000111   200012 000001                    ADSC9   FIRST_CHAR,,AUTO         cn=0,n=1
         5 000112   200005 000100                    ARG     L,,AUTO

      253     8113    4                         (L,
      254     8114    4                         FIRST_CHAR,
      255     8115    4                         REPLACE_CASE);
      256     8116    4                 FULLWD = 0;

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:34   
   8116  5 000113   200016 450100                    STZ     EIGHTEEN,,AUTO

      257     8117    5                 DO CASE (L);

   8117  5 000114   200005 236100                    LDQ     L,,AUTO
         5 000115   000012 116007                    CMPQ    10,DL
         5 000116   000120 602006 5                  TNC     s:8117+4,QL
         5 000117   000650 710000 5                  TRA     s:8221
         5 000120   000132 710000 5                  TRA     s:8119
         5 000121   000240 710000 5                  TRA     s:8139
         5 000122   000351 710000 5                  TRA     s:8158
         5 000123   000413 710000 5                  TRA     s:8170
         5 000124   000434 710000 5                  TRA     s:8176
         5 000125   000444 710000 5                  TRA     s:8179
         5 000126   000457 710000 5                  TRA     s:8182
         5 000127   000520 710000 5                  TRA     s:8193
         5 000130   000572 710000 5                  TRA     s:8207
         5 000131   000622 710000 5                  TRA     s:8215

      258     8118    5                    CASE (0);

      259     8119    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%BIN')

   8119  5 000132   040000 106505                    CMPC    fill='040'O
         5 000133   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000134   000002 000004 4                  ADSC9   2                        cn=0,n=4
         5 000135   000147 601000 5                  TNZ     s:8121

      260     8120    5                       THEN CALL TOL$CONVERT_BINARY (4, TOL$I + 1);

   8120  5 000136   000000 235000 xsym               LDA     TOL$I
         5 000137   000001 035007                    ADLA    1,DL
         5 000140   200032 755100                    STA     STRING+5,,AUTO
         5 000141   200032 633500                    EPPR3   STRING+5,,AUTO
         5 000142   200024 453500                    STP3    @SIZE+1,,AUTO
         5 000143   000003 236000 6                  LDQ     3
         5 000144   200023 756100                    STQ     EIGHTEEN+5,,AUTO
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:35   
         5 000145   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000146   000000 011000                    NOP     0

      261     8121    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%BLB')

   8121  5 000147   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000150   200015 235100                    LDA     REPLACE_START,,AUTO
         5 000151   040000 106505                    CMPC    fill='040'O
         5 000152   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000153   000003 000004 4                  ADSC9   3                        cn=0,n=4
         5 000154   000161 601000 5                  TNZ     s:8123

      262     8122    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 4, BINARY_LBLSEQ.LBL);

   8122  5 000155   000000 471400 xsym               LDP1    TOL$BINARY$
         5 000156   040105 100500                    MLR     fill='040'O
         5 000157   100030 000004                    ADSC9   24,,PR1                  cn=0,n=4
         5 000160   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4

      263     8123    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%BL')

   8123  5 000161   040000 106505                    CMPC    fill='040'O
         5 000162   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000163   000003 000003 4                  ADSC9   3                        cn=0,n=3
         5 000164   000201 601000 5                  TNZ     s:8128

      264     8124    6                       THEN DO;

      265     8125    6                               THREE.DATA = BINARY.LOAD.TYPE;

   8125  5 000165   000000 471400 xsym               LDP1    TOL$BINARY$
         5 000166   100000 236100                    LDQ     0,,PR1
         5 000167   000041 772000                    QRL     33
         5 000170   200016 676100                    ERQ     EIGHTEEN,,AUTO
         5 000171   000007 376007                    ANQ     7,DL
         5 000172   200016 656100                    ERSQ    EIGHTEEN,,AUTO

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:36   
      266     8126    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);

   8126  5 000173   200016 633500                    EPPR3   EIGHTEEN,,AUTO
         5 000174   200024 453500                    STP3    @SIZE+1,,AUTO
         5 000175   000004 236000 6                  LDQ     4
         5 000176   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000177   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000200   000000 011000                    NOP     0

      267     8127    6                            END;

      268     8128    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%BR')

   8128  5 000201   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000202   200015 235100                    LDA     REPLACE_START,,AUTO
         5 000203   040000 106505                    CMPC    fill='040'O
         5 000204   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000205   000004 000003 4                  ADSC9   4                        cn=0,n=3
         5 000206   000220 601000 5                  TNZ     s:8133

      269     8129    6                       THEN DO;

      270     8130    6                               EIGHTEEN.DATA = TOL$RELOC.LOWER(TOL$J);

   8130  5 000207   000000 720000 xsym               LXL0    TOL$J
         5 000210   000000 721010 xsym               LXL1    TOL$RELOC,X0
         5 000211   200016 441100                    SXL1    EIGHTEEN,,AUTO

      271     8131    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);

   8131  5 000212   200016 631500                    EPPR1   EIGHTEEN,,AUTO
         5 000213   200024 451500                    STP1    @SIZE+1,,AUTO
         5 000214   000004 236000 6                  LDQ     4
         5 000215   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000216   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000217   000000 011000                    NOP     0

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:37   
      272     8132    6                            END;

      273     8133    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%BU')

   8133  5 000220   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000221   200015 235100                    LDA     REPLACE_START,,AUTO
         5 000222   040000 106505                    CMPC    fill='040'O
         5 000223   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000224   000005 000003 4                  ADSC9   5                        cn=0,n=3
         5 000225   000650 601000 5                  TNZ     s:8221

      274     8134    6                       THEN DO;

      275     8135    6                               EIGHTEEN.DATA = TOL$RELOC.UPPER(TOL$J) ;

   8135  5 000226   000000 720000 xsym               LXL0    TOL$J
         5 000227   000000 221010 xsym               LDX1    TOL$RELOC,X0
         5 000230   200016 441100                    SXL1    EIGHTEEN,,AUTO

      276     8136    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);

   8136  5 000231   200016 631500                    EPPR1   EIGHTEEN,,AUTO
         5 000232   200024 451500                    STP1    @SIZE+1,,AUTO
         5 000233   000004 236000 6                  LDQ     4
         5 000234   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000235   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000236   000000 011000                    NOP     0

      277     8137    6                            END;

   8137  5 000237   000650 710000 5                  TRA     s:8221

      278     8138    5                    CASE (1);

      279     8139    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%CAT')

   8139  5 000240   040000 106505                    CMPC    fill='040'O
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:38   
         5 000241   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000242   000006 000004 4                  ADSC9   6                        cn=0,n=4
         5 000243   000247 601000 5                  TNZ     s:8141

      280     8140    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 21, TOL$CATALOG_KEY.
              8140                                SPLIT.DATA);

   8140  5 000244   040105 100400                    MLR     fill='040'O
         5 000245   000000 200025 xsym               ADSC9   TOL$CATALOG_KEY          cn=1,n=21
         5 000246   000000 000025                    ADSC9   0,A,PR0                  cn=0,n=21

      281     8141    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%CLM')

   8141  5 000247   040000 106505                    CMPC    fill='040'O
         5 000250   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000251   000007 000004 4                  ADSC9   7                        cn=0,n=4
         5 000252   000264 601000 5                  TNZ     s:8143

      282     8142    5                       THEN CALL TOL$CONVERT_BINARY (4, TOL$J + 77);

   8142  5 000253   000000 235000 xsym               LDA     TOL$J
         5 000254   000115 035007                    ADLA    77,DL
         5 000255   200033 755100                    STA     STRING+6,,AUTO
         5 000256   200033 633500                    EPPR3   STRING+6,,AUTO
         5 000257   200024 453500                    STP3    @SIZE+1,,AUTO
         5 000260   000003 236000 6                  LDQ     3
         5 000261   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000262   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000263   000000 011000                    NOP     0

      283     8143    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%COL')

   8143  5 000264   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000265   200015 235100                    LDA     REPLACE_START,,AUTO
         5 000266   040000 106505                    CMPC    fill='040'O
         5 000267   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000270   000010 000004 4                  ADSC9   8                        cn=0,n=4
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:39   
         5 000271   000303 601000 5                  TNZ     s:8145

      284     8144    5                       THEN CALL TOL$CONVERT_BINARY (4, TOL$K + 1);

   8144  5 000272   000000 236000 xsym               LDQ     TOL$K
         5 000273   000001 036007                    ADLQ    1,DL
         5 000274   200034 756100                    STQ     STRING+7,,AUTO
         5 000275   200034 631500                    EPPR1   STRING+7,,AUTO
         5 000276   200024 451500                    STP1    @SIZE+1,,AUTO
         5 000277   000003 236000 6                  LDQ     3
         5 000300   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000301   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000302   000000 011000                    NOP     0

      285     8145    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 6) = '%COUNT')

   8145  5 000303   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000304   200015 235100                    LDA     REPLACE_START,,AUTO
         5 000305   040000 106505                    CMPC    fill='040'O
         5 000306   000000 000006                    ADSC9   0,A,PR0                  cn=0,n=6
         5 000307   000011 000006 4                  ADSC9   9                        cn=0,n=6
         5 000310   000321 601000 5                  TNZ     s:8150

      286     8146    6                       THEN DO;

      287     8147    6                               EIGHTEEN.DATA = TOL$OBJECT.BINARY_COUNT;

   8147  5 000311   000024 720000 xsym               LXL0    TOL$OBJECT+20
         5 000312   200016 440100                    SXL0    EIGHTEEN,,AUTO

      288     8148    6                               CALL TOL$CONVERT_BINARY (6, FULLWD);

   8148  5 000313   200016 631500                    EPPR1   EIGHTEEN,,AUTO
         5 000314   200024 451500                    STP1    @SIZE+1,,AUTO
         5 000315   000005 236000 6                  LDQ     5
         5 000316   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000317   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:40   
         5 000320   000000 011000                    NOP     0

      289     8149    6                            END;

      290     8150    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%CZ')

   8150  5 000321   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000322   200015 235100                    LDA     REPLACE_START,,AUTO
         5 000323   040000 106505                    CMPC    fill='040'O
         5 000324   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000325   000013 000003 4                  ADSC9   11                       cn=0,n=3
         5 000326   000340 601000 5                  TNZ     s:8155

      291     8151    6                       THEN DO;

      292     8152    6                               NINE.DATA = TOL$CATALOG_KEY.SIZE;

   8152  5 000327   000000 236000 xsym               LDQ     TOL$CATALOG_KEY
         5 000330   000033 772000                    QRL     27
         5 000331   200016 552104                    STBQ    EIGHTEEN,'04'O,AUTO

      293     8153    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);

   8153  5 000332   200016 631500                    EPPR1   EIGHTEEN,,AUTO
         5 000333   200024 451500                    STP1    @SIZE+1,,AUTO
         5 000334   000004 236000 6                  LDQ     4
         5 000335   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000336   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000337   000000 011000                    NOP     0

      294     8154    6                            END;

      295     8155    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%C#')

   8155  5 000340   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000341   200015 235100                    LDA     REPLACE_START,,AUTO
         5 000342   040000 106505                    CMPC    fill='040'O
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:41   
         5 000343   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000344   000014 000003 4                  ADSC9   12                       cn=0,n=3
         5 000345   000650 601000 5                  TNZ     s:8221

      296     8156    5                       THEN CALL TOL$GET_CATALOG#;

   8156  5 000346   000735 701000 5                  TSX1    TOL$GET_CATALOG#
         5 000347   000000 011000                    NOP     0
         5 000350   000650 710000 5                  TRA     s:8221

      297     8157    5                    CASE (2);

      298     8158    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%DEK')

   8158  5 000351   040000 106505                    CMPC    fill='040'O
         5 000352   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000353   000015 000004 4                  ADSC9   13                       cn=0,n=4
         5 000354   000360 601000 5                  TNZ     s:8160

      299     8159    5                      THEN CALL INSERT(MESSAGE, REPLACE_START, 4, TOL$OBJECT.BCD.LBL);

   8159  5 000355   040105 100400                    MLR     fill='040'O
         5 000356   000022 000004 xsym               ADSC9   TOL$OBJECT+18            cn=0,n=4
         5 000357   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4

      300     8160    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%DLB')

   8160  5 000360   040000 106505                    CMPC    fill='040'O
         5 000361   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000362   000016 000004 4                  ADSC9   14                       cn=0,n=4
         5 000363   000367 601000 5                  TNZ     s:8162

      301     8161    5                      THEN CALL INSERT(MESSAGE, REPLACE_START, 4, TOL$DKEND_CARD.LBL);

   8161  5 000364   040105 100400                    MLR     fill='040'O
         5 000365   000022 000004 xsym               ADSC9   TOL$DKEND_CARD+18        cn=0,n=4
         5 000366   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:42   

      302     8162    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%DR')

   8162  5 000367   040000 106505                    CMPC    fill='040'O
         5 000370   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000371   000017 000003 4                  ADSC9   15                       cn=0,n=3
         5 000372   000376 601000 5                  TNZ     s:8164

      303     8163    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 6, TOL$DKEND_CARD.
              8163                                REVISION);

   8163  5 000373   040105 100400                    MLR     fill='040'O
         5 000374   000020 400006 xsym               ADSC9   TOL$DKEND_CARD+16        cn=2,n=6
         5 000375   000000 000006                    ADSC9   0,A,PR0                  cn=0,n=6

      304     8164    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%D#')

   8164  5 000376   040000 106505                    CMPC    fill='040'O
         5 000377   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000400   000020 000003 4                  ADSC9   16                       cn=0,n=3
         5 000401   000650 601000 5                  TNZ     s:8221

      305     8165    6                       THEN DO;

      306     8166    6                               EIGHTEEN.DATA = TOL$OBJECT.DECK#;

   8166  5 000402   000024 220000 xsym               LDX0    TOL$OBJECT+20
         5 000403   200016 440100                    SXL0    EIGHTEEN,,AUTO

      307     8167    6                               CALL TOL$CONVERT_BINARY (6, FULLWD);

   8167  5 000404   200016 633500                    EPPR3   EIGHTEEN,,AUTO
         5 000405   200024 453500                    STP3    @SIZE+1,,AUTO
         5 000406   000005 236000 6                  LDQ     5
         5 000407   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000410   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000411   000000 011000                    NOP     0
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:43   

      308     8168    6                            END;

   8168  5 000412   000650 710000 5                  TRA     s:8221

      309     8169    5                    CASE (3);

      310     8170    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%E#')

   8170  5 000413   040000 106505                    CMPC    fill='040'O
         5 000414   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000415   000021 000003 4                  ADSC9   17                       cn=0,n=3
         5 000416   000650 601000 5                  TNZ     s:8221

      311     8171    6                       THEN DO;

      312     8172    6                               EIGHTEEN.DATA = TOL$CATALOG_ENTRY_KEY.ENTRY#;

   8172  5 000417   000000 235000 xsym               LDA     TOL$CATALOG_ENTRY_KEY
         5 000420   000001 236000 xsym               LDQ     TOL$CATALOG_ENTRY_KEY+1
         5 000421   000033 773000                    LRL     27
         5 000422   777777 376007                    ANQ     -1,DL
         5 000423   000000 620006                    EAX0    0,QL
         5 000424   200016 440100                    SXL0    EIGHTEEN,,AUTO

      313     8173    6                               CALL TOL$CONVERT_BINARY (6, FULLWD);

   8173  5 000425   200016 633500                    EPPR3   EIGHTEEN,,AUTO
         5 000426   200024 453500                    STP3    @SIZE+1,,AUTO
         5 000427   000005 236000 6                  LDQ     5
         5 000430   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000431   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000432   000000 011000                    NOP     0

      314     8174    6                            END;

   8174  5 000433   000650 710000 5                  TRA     s:8221
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:44   

      315     8175    5                    CASE (4);

      316     8176    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%HR')

   8176  5 000434   040000 106505                    CMPC    fill='040'O
         5 000435   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000436   000022 000003 4                  ADSC9   18                       cn=0,n=3
         5 000437   000650 601000 5                  TNZ     s:8221

      317     8177    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 6, HEX_CARD.REVISION);

   8177  5 000440   040105 100400                    MLR     fill='040'O
         5 000441   000011 000006 xsym               ADSC9   TOL$PATCH_CARD+9         cn=0,n=6
         5 000442   000000 000006                    ADSC9   0,A,PR0                  cn=0,n=6
         5 000443   000650 710000 5                  TRA     s:8221

      318     8178    5                    CASE (5);

      319     8179    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 2) = '%J')

   8179  5 000444   040000 106505                    CMPC    fill='040'O
         5 000445   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         5 000446   000023 000002 4                  ADSC9   19                       cn=0,n=2
         5 000447   000650 601000 5                  TNZ     s:8221

      320     8180    5                       THEN CALL TOL$CONVERT_BINARY (2, TOL$J);

   8180  5 000450   000006 236000 6                  LDQ     6
         5 000451   200024 756100                    STQ     @SIZE+1,,AUTO
         5 000452   000007 236000 6                  LDQ     7
         5 000453   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000454   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000455   000000 011000                    NOP     0
         5 000456   000650 710000 5                  TRA     s:8221

      321     8181    5                    CASE (6);
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:45   

      322     8182    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%LTT')

   8182  5 000457   040000 106505                    CMPC    fill='040'O
         5 000460   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000461   000024 000004 4                  ADSC9   20                       cn=0,n=4
         5 000462   000477 601000 5                  TNZ     s:8187

      323     8183    6                       THEN DO;

      324     8184    6                               THREE.DATA = LOAD.TYPE;

   8184  5 000463   000000 473400 xsym               LDP3    TOL$START_LOAD$
         5 000464   300000 236100                    LDQ     0,,PR3
         5 000465   000041 772000                    QRL     33
         5 000466   200016 676100                    ERQ     EIGHTEEN,,AUTO
         5 000467   000007 376007                    ANQ     7,DL
         5 000470   200016 656100                    ERSQ    EIGHTEEN,,AUTO

      325     8185    6                               CALL TOL$CONVERT_BINARY (4, FULLWD);

   8185  5 000471   200016 634500                    EPPR4   EIGHTEEN,,AUTO
         5 000472   200024 454500                    STP4    @SIZE+1,,AUTO
         5 000473   000003 236000 6                  LDQ     3
         5 000474   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000475   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000476   000000 011000                    NOP     0

      326     8186    6                            END;

      327     8187    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%LTZ')

   8187  5 000477   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000500   200015 235100                    LDA     REPLACE_START,,AUTO
         5 000501   040000 106505                    CMPC    fill='040'O
         5 000502   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000503   000025 000004 4                  ADSC9   21                       cn=0,n=4
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:46   
         5 000504   000650 601000 5                  TNZ     s:8221

      328     8188    6                       THEN DO;

      329     8189    6                               SIX.DATA = LOAD.SIZE;

   8189  5 000505   000000 471400 xsym               LDP1    TOL$START_LOAD$
         5 000506   100000 236100                    LDQ     0,,PR1
         5 000507   000022 772000                    QRL     18
         5 000510   200016 752101                    STCQ    EIGHTEEN,'01'O,AUTO

      330     8190    6                               CALL TOL$CONVERT_BINARY (4, FULLWD);

   8190  5 000511   200016 633500                    EPPR3   EIGHTEEN,,AUTO
         5 000512   200024 453500                    STP3    @SIZE+1,,AUTO
         5 000513   000003 236000 6                  LDQ     3
         5 000514   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000515   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000516   000000 011000                    NOP     0

      331     8191    6                            END;

   8191  5 000517   000650 710000 5                  TRA     s:8221

      332     8192    5                    CASE (7);

      333     8193    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%OA')

   8193  5 000520   040000 106505                    CMPC    fill='040'O
         5 000521   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000522   000026 000003 4                  ADSC9   22                       cn=0,n=3
         5 000523   000527 601000 5                  TNZ     s:8195

      334     8194    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 3, TOL$OBJECT.BCD.
              8194                                ASSEMBLER);

   8194  5 000524   040105 100400                    MLR     fill='040'O
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:47   
         5 000525   000016 600001 xsym               ADSC9   TOL$OBJECT+14            cn=3,n=1
         5 000526   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3

      335     8195    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%OD')

   8195  5 000527   040000 106505                    CMPC    fill='040'O
         5 000530   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000531   000027 000003 4                  ADSC9   23                       cn=0,n=3
         5 000532   000536 601000 5                  TNZ     s:8197

      336     8196    5                      THEN CALL INSERT(MESSAGE, REPLACE_START, 23, TOL$OBJECT_KEY.DATA
              8196                                );

   8196  5 000533   040105 100400                    MLR     fill='040'O
         5 000534   000000 200027 xsym               ADSC9   TOL$OBJECT_KEY           cn=1,n=23
         5 000535   000000 000027                    ADSC9   0,A,PR0                  cn=0,n=23

      337     8197    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%OL')

   8197  5 000536   040000 106505                    CMPC    fill='040'O
         5 000537   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000540   000030 000003 4                  ADSC9   24                       cn=0,n=3
         5 000541   000545 601000 5                  TNZ     s:8199

      338     8198    5                       THEN CALL INSERT(MESSAGE, REPLACE_START, 3, TOL$OBJECT.BCD.
              8198                                LOAD_TYPE);

   8198  5 000542   040105 100400                    MLR     fill='040'O
         5 000543   000005 200001 xsym               ADSC9   TOL$OBJECT+5             cn=1,n=1
         5 000544   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3

      339     8199    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%OS')

   8199  5 000545   040000 106505                    CMPC    fill='040'O
         5 000546   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000547   000031 000003 4                  ADSC9   25                       cn=0,n=3
         5 000550   000554 601000 5                  TNZ     s:8201
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:48   

      340     8200    5                      THEN CALL INSERT(MESSAGE, REPLACE_START, 4, TOL$OBJECT.BCD.SEQ);

   8200  5 000551   040105 100400                    MLR     fill='040'O
         5 000552   000023 000004 xsym               ADSC9   TOL$OBJECT+19            cn=0,n=4
         5 000553   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4

      341     8201    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%OZ')

   8201  5 000554   040000 106505                    CMPC    fill='040'O
         5 000555   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000556   000032 000003 4                  ADSC9   26                       cn=0,n=3
         5 000557   000650 601000 5                  TNZ     s:8221

      342     8202    6                       THEN DO;

      343     8203    6                               NINE.DATA = TOL$OBJECT_KEY.SIZE;

   8203  5 000560   000000 236000 xsym               LDQ     TOL$OBJECT_KEY
         5 000561   000033 772000                    QRL     27
         5 000562   200016 552104                    STBQ    EIGHTEEN,'04'O,AUTO

      344     8204    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);

   8204  5 000563   200016 633500                    EPPR3   EIGHTEEN,,AUTO
         5 000564   200024 453500                    STP3    @SIZE+1,,AUTO
         5 000565   000004 236000 6                  LDQ     4
         5 000566   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000567   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000570   000000 011000                    NOP     0

      345     8205    6                            END;

   8205  5 000571   000650 710000 5                  TRA     s:8221

      346     8206    5                    CASE (8);

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:49   
      347     8207    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%PLB')

   8207  5 000572   040000 106505                    CMPC    fill='040'O
         5 000573   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000574   000033 000004 4                  ADSC9   27                       cn=0,n=4
         5 000575   000601 601000 5                  TNZ     s:8209

      348     8208    5                      THEN CALL INSERT(MESSAGE, REPLACE_START, 4, TOL$PATCH_CARD.LBL);

   8208  5 000576   040105 100400                    MLR     fill='040'O
         5 000577   000022 000004 xsym               ADSC9   TOL$PATCH_CARD+18        cn=0,n=4
         5 000600   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4

      349     8209    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 3) = '%P#')

   8209  5 000601   040000 106505                    CMPC    fill='040'O
         5 000602   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
         5 000603   000034 000003 4                  ADSC9   28                       cn=0,n=3
         5 000604   000650 601000 5                  TNZ     s:8221

      350     8210    6                       THEN DO;

      351     8211    6                               EIGHTEEN.DATA = TOL$PATCH_KEY.CARD#;

   8211  5 000605   000000 235000 xsym               LDA     TOL$PATCH_KEY
         5 000606   000001 236000 xsym               LDQ     TOL$PATCH_KEY+1
         5 000607   000033 773000                    LRL     27
         5 000610   777777 376007                    ANQ     -1,DL
         5 000611   000000 620006                    EAX0    0,QL
         5 000612   200016 440100                    SXL0    EIGHTEEN,,AUTO

      352     8212    6                               CALL TOL$CONVERT_BINARY (3, FULLWD);

   8212  5 000613   200016 633500                    EPPR3   EIGHTEEN,,AUTO
         5 000614   200024 453500                    STP3    @SIZE+1,,AUTO
         5 000615   000004 236000 6                  LDQ     4
         5 000616   200023 756100                    STQ     EIGHTEEN+5,,AUTO
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:50   
         5 000617   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000620   000000 011000                    NOP     0

      353     8213    6                            END;

   8213  5 000621   000650 710000 5                  TRA     s:8221

      354     8214    5                    CASE (9);

      355     8215    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 5) = '%SIZE')

   8215  5 000622   040000 106505                    CMPC    fill='040'O
         5 000623   000000 000005                    ADSC9   0,A,PR0                  cn=0,n=5
         5 000624   000035 000005 4                  ADSC9   29                       cn=0,n=5
         5 000625   000634 601000 5                  TNZ     s:8217

      356     8216    5                       THEN CALL TOL$CONVERT_BINARY (6, TOL$DECKFILE_ARS#);

   8216  5 000626   000010 236000 6                  LDQ     8
         5 000627   200024 756100                    STQ     @SIZE+1,,AUTO
         5 000630   000005 236000 6                  LDQ     5
         5 000631   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000632   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000633   000000 011000                    NOP     0

      357     8217    5                       IF (SUBSTR(MESSAGE, REPLACE_START, 4) = '%SEQ')

   8217  5 000634   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000635   200015 235100                    LDA     REPLACE_START,,AUTO
         5 000636   040000 106505                    CMPC    fill='040'O
         5 000637   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         5 000640   000037 000004 4                  ADSC9   31                       cn=0,n=4
         5 000641   000650 601000 5                  TNZ     s:8221

      358     8218    5                       THEN CALL TOL$CONVERT_BINARY (6, TOL$CARD_SEQ);

   8218  5 000642   000011 236000 6                  LDQ     9
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:51   
         5 000643   200024 756100                    STQ     @SIZE+1,,AUTO
         5 000644   000005 236000 6                  LDQ     5
         5 000645   200023 756100                    STQ     EIGHTEEN+5,,AUTO
         5 000646   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 000647   000000 011000                    NOP     0

      359     8219    5                 END;

      360     8220    4              END;

      361     8221    3         IF (SUBSTR

   8221  5 000650   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 000651   200015 235100                    LDA     REPLACE_START,,AUTO
         5 000652   040000 106505                    CMPC    fill='040'O
         5 000653   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         5 000654   000002 000001 6                  ADSC9   2                        cn=0,n=1
         5 000655   000661 601000 5                  TNZ     s:8227

      362     8222    3                 (MESSAGE,
      363     8223    3                 REPLACE_START,
      364     8224    3                 1) =
      365     8225    3                 '%')
      366     8226    3         THEN REPLACE_INDEX = REPLACE_INDEX + 1;

   8226  5 000656   200013 236100                    LDQ     REPLACE_INDEX,,AUTO
         5 000657   000001 036007                    ADLQ    1,DL
         5 000660   200013 756100                    STQ     REPLACE_INDEX,,AUTO

      367     8227    3      END;

   8227  5 000661   200011 471500                    LDP1    @ERR_VEC,,AUTO
         5 000662   100000 236100                    LDQ     0,,PR1
         5 000663   000020 772000                    QRL     16
         5 000664   200013 116100                    CMPQ    REPLACE_INDEX,,AUTO
         5 000665   000667 600000 5                  TZE     s:8228
         5 000666   000061 603000 5                  TRC     s:8102
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:52   

      368     8228    2      RETURN;

   8228  5 000667   200010 221300                    LDX1  ! ERR_PTR$+1,,AUTO
         5 000670   000001 702211                    TSX2  ! 1,X1

      369     8229
      370     8230        /* END TOL$REPLACE */
      371     8231        %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:53   
      372     8232    2   TOL$CONVERT_BINARY: PROC (SIZE, BINARY) ;

   8232  5 000671   200022 741300       TOL$CONVERT* STX1  ! EIGHTEEN+4,,AUTO

      373     8233
      374     8234    3      DCL BINARY UBIN (36) ALIGNED;
      375     8235    3      DCL SIZE UBIN (36) ALIGNED;
      376     8236    3      DCL STRING CHAR (8) ALIGNED;
      377     8237    3      DCL STRING_CHAR (0:7) REDEF STRING CHAR (1) UNAL;
      378     8238
      379     8239        /* Code */
      380     8240
      381     8241    3      CALL BINCHAR (STRING, BINARY);

   8241  5 000672   200024 470500                    LDP0    @BINARY,,AUTO
         5 000673   000000 235100                    LDA     0,,PR0
         5 000674   000044 773000                    LRL     36
         5 000675   200030 757100                    STAQ    STRING+3,,AUTO
         5 000676   000100 301500                    BTD
         5 000677   200030 000010                    NDSC9   STRING+3,,AUTO           cn=0,s=lsgnf,sf=0,n=8
         5 000700   200025 030010                    NDSC9   STRING,,AUTO             cn=0,s=nosgn,sf=0,n=8

      382     8242    3      M = 0;

   8242  5 000701   200006 450100                    STZ     M,,AUTO

      383     8243    4      DO WHILE (STRING_CHAR (M) = '0' AND M < 7);

   8243  5 000702   000711 710000 5                  TRA     s:8246

      384     8244    4         STRING_CHAR (M) = ' ';

   8244  5 000703   200006 235100                    LDA     M,,AUTO
         5 000704   040105 100400                    MLR     fill='040'O
         5 000705   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         5 000706   200025 000001                    ADSC9   STRING,A,AUTO            cn=0,n=1

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:54   
      385     8245    4         M = M + 1;

   8245  5 000707   000001 035007                    ADLA    1,DL
         5 000710   200006 755100                    STA     M,,AUTO

      386     8246    4      END;

   8246  5 000711   200006 235100                    LDA     M,,AUTO
         5 000712   040000 106505                    CMPC    fill='040'O
         5 000713   200025 000001                    ADSC9   STRING,A,AUTO            cn=0,n=1
         5 000714   000012 000001 6                  ADSC9   10                       cn=0,n=1
         5 000715   000720 601000 5                  TNZ     s:8247
         5 000716   000007 115007                    CMPA    7,DL
         5 000717   000703 602000 5                  TNC     s:8244

      387     8247    3      CALL INSERT (MESSAGE,

   8247  5 000720   200023 470500                    LDP0    @SIZE,,AUTO
         5 000721   000000 235100                    LDA     0,,PR0
         5 000722   000000 720100                    LXL0    0,,PR0
         5 000723   000000 721100                    LXL1    0,,PR0
         5 000724   000027 675000 xsym               ERA     B_VECTNIL+23
         5 000725   000001 035007                    ADLA    1,DL
         5 000726   200007 471500                    LDP1    ERR_PTR$,,AUTO
         5 000727   200015 236100                    LDQ     REPLACE_START,,AUTO
         5 000730   040146 100545                    MLR     fill='040'O
         5 000731   200027 000010                    ADSC9   STRING+2,A,AUTO          cn=0,n=*X0
         5 000732   100000 000011                    ADSC9   0,Q,PR1                  cn=0,n=*X1

      388     8248    3              REPLACE_START,
      389     8249    3              SIZE,
      390     8250    3              SUBSTR (STRING, 8 - SIZE));
      391     8251    3      RETURN;

   8251  5 000733   200022 221300                    LDX1  ! EIGHTEEN+4,,AUTO
         5 000734   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:55   
      392     8252
      393     8253    3   END TOL$CONVERT_BINARY;
      394     8254        %EJECT;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:56   
      395     8255    2   TOL$GET_CATALOG#: PROC;

   8255  5 000735   200020 741300       TOL$GET_CAT* STX1  ! EIGHTEEN+2,,AUTO

      396     8256
      397     8257           %FPT_READ (FPTN = READ_MASTER_ENTRY,
      398     8258                      BUF = MASTER_KEY,
      399     8259                      DCB = M$DECKFILE,
      400     8260                      KEY = MASTER_ENTRY_KEY,
      401     8261                      KEYS = YES,
      402     8262                      WAIT = YES);
      403     8301
      404     8302        /* Code */
      405     8303
      406     8304    3      CATALOG_DECK# = 0;

   8304  5 000736   000000 220003                    LDX0    0,DU
         5 000737   200004 740100                    STX0    CATALOG_DECK#,,AUTO

      407     8305    3      IF (SUBSTR (TOL$OBJECT_KEY.DATA, 3, 1) ~= '.' OR

   8305  5 000740   000001 236000 xsym               LDQ     TOL$OBJECT_KEY+1
         5 000741   777000 376003                    ANQ     -512,DU
         5 000742   056000 116003                    CMPQ    23552,DU
         5 000743   000754 601000 5                  TNZ     s:8308
         5 000744   040000 106400                    CMPC    fill='040'O
         5 000745   000000 200003 xsym               ADSC9   TOL$OBJECT_KEY           cn=1,n=3
         5 000746   000040 000003 4                  ADSC9   32                       cn=0,n=3
         5 000747   000754 600000 5                  TZE     s:8308
         5 000750   040000 106400                    CMPC    fill='040'O
         5 000751   000000 200003 xsym               ADSC9   TOL$OBJECT_KEY           cn=1,n=3
         5 000752   000041 000003 4                  ADSC9   33                       cn=0,n=3
         5 000753   000760 601000 5                  TNZ     s:8309

      408     8306    3              SUBSTR (TOL$OBJECT_KEY.DATA, 0, 3) = 'ITR' OR
      409     8307    3              SUBSTR (TOL$OBJECT_KEY.DATA, 0, 3) = 'MDR')
      410     8308    3      THEN CATALOG_DECK# = CALL_SEQUENCE.CATALOG#;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:57   

   8308  5 000754   000000 470400 xsym               LDP0    TOL$CALL_SEQ$
         5 000755   000001 222100                    LDX2    1,,PR0
         5 000756   200004 742100                    STX2    CATALOG_DECK#,,AUTO
         5 000757   001017 710000 5                  TRA     FORGET_IT

      411     8309    4      ELSE DO MASTER_ENTRY_KEY.ENTRY# = 1 TO 100;

   8309  5 000760   000000 101400                    MRL     fill='000'O
         5 000761   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         5 000762   000000 600002 3                  ADSC9   MASTER_ENTRY_KEY         cn=3,n=2

      412     8310    4              CALL M$READ (READ_MASTER_ENTRY) ALTRET (FORGET_IT);

   8310  5 000763   000014 630400 3                  EPPR0   READ_MASTER_ENTRY
         5 000764   440000 713400                    CLIMB   alt,read
         5 000765   401400 401760                    pmme    nvectors=4
         5 000766   001017 702000 5                  TSX2    FORGET_IT

      413     8311    4              IF (SUBSTR (TOL$OBJECT_KEY.DATA,0,3) = SUBSTR (MASTER_KEY.DATA,0,3))

   8311  5 000767   000000 236000 xsym               LDQ     TOL$OBJECT_KEY
         5 000770   000002 676000 3                  ERQ     MASTER_KEY
         5 000771   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 000772   001000 601000 5                  TNZ     s:8316

      414     8312    5              THEN DO;

      415     8313    5                      MASTER_ENTRY_KEY.ENTRY# = 100;

   8313  5 000773   000000 101400                    MRL     fill='000'O
         5 000774   000013 000004 6                  ADSC9   11                       cn=0,n=4
         5 000775   000000 600002 3                  ADSC9   MASTER_ENTRY_KEY         cn=3,n=2

      416     8314    5                      CATALOG_DECK# = MASTER_KEY.SPLIT.DECK#;

   8314  5 000776   000007 720000 3                  LXL0    MASTER_KEY+5
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:58   
         5 000777   200004 740100                    STX0    CATALOG_DECK#,,AUTO

      417     8315    5                   END;

      418     8316    4           END;

   8316  5 001000   000000 235000 3                  LDA     MASTER_ENTRY_KEY
         5 001001   000001 236000 3                  LDQ     MASTER_ENTRY_KEY+1
         5 001002   000033 773000                    LRL     27
         5 001003   777777 376007                    ANQ     -1,DL
         5 001004   000001 036007                    ADLQ    1,DL
         5 001005   200030 756100                    STQ     STRING+3,,AUTO
         5 001006   000000 101500                    MRL     fill='000'O
         5 001007   200030 000004                    ADSC9   STRING+3,,AUTO           cn=0,n=4
         5 001010   000000 600002 3                  ADSC9   MASTER_ENTRY_KEY         cn=3,n=2
         5 001011   000000 235000 3                  LDA     MASTER_ENTRY_KEY
         5 001012   000001 236000 3                  LDQ     MASTER_ENTRY_KEY+1
         5 001013   000033 773000                    LRL     27
         5 001014   777777 376007                    ANQ     -1,DL
         5 001015   000145 116007                    CMPQ    101,DL
         5 001016   000763 604000 5                  TMI     s:8310

      419     8317    3   FORGET_IT:
      420     8318    3      IF (CATALOG_DECK# = 0)

   8318  5 001017   200004 220100       FORGET_IT    LDX0    CATALOG_DECK#,,AUTO
         5 001020   001027 601000 5                  TNZ     s:8321

      421     8319    3      THEN CALL INSERT(MESSAGE, REPLACE_START, 6, 'UNK');

   8319  5 001021   200007 470500                    LDP0    ERR_PTR$,,AUTO
         5 001022   200015 235100                    LDA     REPLACE_START,,AUTO
         5 001023   040105 100400                    MLR     fill='040'O
         5 001024   000042 000003 4                  ADSC9   34                       cn=0,n=3
         5 001025   000000 000006                    ADSC9   0,A,PR0                  cn=0,n=6
         5 001026   001036 710000 5                  TRA     s:8324

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:59   
      422     8320    4      ELSE DO;

      423     8321    4              EIGHTEEN.DATA = CATALOG_DECK#;

   8321  5 001027   200016 440100                    SXL0    EIGHTEEN,,AUTO

      424     8322    4              CALL TOL$CONVERT_BINARY (6, FULLWD);

   8322  5 001030   200016 630500                    EPPR0   EIGHTEEN,,AUTO
         5 001031   200024 450500                    STP0    @BINARY,,AUTO
         5 001032   000005 236000 6                  LDQ     5
         5 001033   200023 756100                    STQ     @SIZE,,AUTO
         5 001034   000671 701000 5                  TSX1    TOL$CONVERT_BINARY
         5 001035   000000 011000                    NOP     0

      425     8323    4           END;

      426     8324    3      RETURN;

   8324  5 001036   200020 221300                    LDX1  ! EIGHTEEN+2,,AUTO
         5 001037   000001 702211                    TSX2  ! 1,X1

      427     8325    3   END TOL$GET_CATALOG#;
      428     8326    2   END TOL$REPLACE;
      429     8327        %EJECT ;
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:60   
      430     8328        /*I* NAME:         TOL$PRINT_ERROR_MESSAGE
      431     8329             PURPOSE:      Prints TOLTS Loader Error Message
      432     8330             DESCRIPTION:  The TOLTS Loader uses error messages that contain
      433     8331                           numerous text replacement strings.     Hence, the
      434     8332                           library service, XUR$ERRMSG will  not  work since
      435     8333                           it only allows 3 text replacements.  This routine
      436     8334                           is called to print loader error messages instead.
      437     8335        */
      438     8336
      439     8337    1   TOL$PRINT_ERROR_MESSAGE: PROC (ERR_VEC) ;

   8337  5 001040   200010 741300       TOL$PRINT_E* STX1  ! ERR_PTR$+1,,AUTO

      440     8338
      441     8339    2      DCL ERR_VEC     BIT (72) DALIGNED ;
      442     8340           %FPT_WRITE (FPTN = CONSOLE_FPT,
      443     8341                       STCLASS = SYMREF) ;
      444     8372
      445     8373        /* Code */
      446     8374
      447     8375    2      CONSOLE_FPT.BUF_ = ERR_VEC ;

   8375  5 001041   200011 470500                    LDP0    @ERR_VEC,,AUTO
         5 001042   000000 237100                    LDAQ    0,,PR0
         5 001043   000004 757000 xsym               STAQ    CONSOLE_FPT+4

      448     8376    2      CALL TOT$CONSOLE_OUT ;

   8376  5 001044   000002 631400 xsym               EPPR1   B_VECTNIL+2
         5 001045   000000 701000 xent               TSX1    TOT$CONSOLE_OUT
         5 001046   000000 011000                    NOP     0

      449     8377    2      RETURN ;

   8377  5 001047   200010 221300                    LDX1  ! ERR_PTR$+1,,AUTO
         5 001050   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:61   
MASTER_ENTRY_KEY
 Sect OctLoc
   3     000   004000 001***   ****** ******                                    ........

MASTER_KEY
 Sect OctLoc
   3     002   ****** ******   ****** ******   ****** ******   ****** ******    ................

TOL_ERROR_CODE
 Sect OctLoc
   3     010   241714 000000                                                    ....

REPLACE_CASE
 Sect OctLoc
   3     011   102103 104105   110112 114117   120123 ******                    BCDEHJLOPS..

READ_MASTER_ENTRY
 Sect OctLoc
   3     014   000005 777640   000024 006000   000001 177640   000000 006000    ................
   3     020   000005 777640   000002 006000   000000 177640   000000 006014    ................
   3     024   000000 600000   000000 000000   000000 000000   000000 000000    ................
   3     030   000000 000000   000000 000000                                    ........

(unnamed)
 Sect OctLoc
   4     000   055055 101114   124122 105124   045102 111116   045102 114102    --ALTRET%BIN%BLB
   4     004   045102 122040   045102 125040   045103 101124   045103 114115    %BR %BU %CAT%CLM
   4     010   045103 117114   045103 117125   116124 040040   045103 132040    %COL%COUNT  %CZ
   4     014   045103 043040   045104 105113   045104 114102   045104 122040    %C# %DEK%DLB%DR
   4     020   045104 043040   045105 043040   045110 122040   045112 040040    %D# %E# %HR %J
   4     024   045114 124124   045114 124132   045117 101040   045117 104040    %LTT%LTZ%OA %OD
   4     030   045117 114040   045117 123040   045117 132040   045120 114102    %OL %OS %OZ %PLB
   4     034   045120 043040   045123 111132   105040 040040   045123 105121    %P# %SIZE   %SEQ
   4     040   111124 122040   115104 122040   125116 113040                    ITR MDR UNK

(unnamed)
 Sect OctLoc
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:62   
   6     000   777777 400007   000010 006000   045040 040040   000006 006000    ........%   ....
   6     004   000005 006000   000010 006000   000000 006000   000004 006000    ................
   6     010   000000 006000   000000 006000   060040 040040   000000 000144    ........0   ...d
      450     8378
      451     8379    2   END TOL$PRINT_ERROR_MESSAGE ;
      452     8380    1   END TOL$BAD_CARD;

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:63   
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure TOL$BAD_CARD.
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:64   

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    11-  8380    165    73     5      0  y   y    1   1 TOL$BAD_CARD
  1  8070-  8326    148    17     5     50  y   y    1     2 TOL$REPLACE
  2  8232-  8253      9     6     5    671  y   y    2      3 TOL$CONVERT_BINARY
  3  8255-  8325     19     2     5    735  y   y    0      3 TOL$GET_CATALOG#
  4  8337-  8379      4     4     5   1040  y   y    1     2 TOL$PRINT_ERROR_MESSAGE
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:65   

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              11   5      0 Proc    0                              8055   5      2 Assign  0
            8056   5      3 Assign  0                              8057   5      6 Assign  0
        $$  8058   5     11 If      0                        $$$$  8059   5     16 Call    0
            8060   5     27 Do      0                              8061   5     27 Call    0
            8062   5     33 Call    0                              8063   5     37 Assign  0
            8064   5     43 Call    0                              8065   5     47 EndDo   0
            8066   5     47 Return  0                              8070   5     50 Proc    1
            8099   5     51 Assign  1                           $  8100   5     52 Assign  1
            8101   5     56 DoWhil  1                              8102   5     61 Assign  1
      $$$$  8103   5     63 IntCal  1                           $  8108   5     74 If      1
            8109   5    102 Do      1                              8110   5    102 Assign  1
            8111   5    104 Assign  1                          $$  8112   5    107 IntCal  1
            8116   5    113 Assign  1                        $$$$  8117   5    114 DoCase  1
            8118   5    132 Case    1                              8119   5    132 If      1
        $$  8120   5    136 Call    1                          $$  8121   5    147 If      1
         $  8122   5    155 IntCal  1                              8123   5    161 If      1
            8124   5    165 Do      1                          $$  8125   5    165 Assign  1
         $  8126   5    173 Call    1                              8127   5    201 EndDo   1
        $$  8128   5    201 If      1                              8129   5    207 Do      1
            8130   5    207 Assign  1                           $  8131   5    212 Call    1
            8132   5    220 EndDo   1                          $$  8133   5    220 If      1
            8134   5    226 Do      1                              8135   5    226 Assign  1
         $  8136   5    231 Call    1                              8137   5    237 EndDo   1
            8138   5    240 Case    1                              8139   5    240 If      1
            8140   5    244 IntCal  1                              8141   5    247 If      1
        $$  8142   5    253 Call    1                          $$  8143   5    264 If      1
        $$  8144   5    272 Call    1                          $$  8145   5    303 If      1
            8146   5    311 Do      1                              8147   5    311 Assign  1
         $  8148   5    313 Call    1                              8149   5    321 EndDo   1
        $$  8150   5    321 If      1                              8151   5    327 Do      1
            8152   5    327 Assign  1                           $  8153   5    332 Call    1
            8154   5    340 EndDo   1                          $$  8155   5    340 If      1
            8156   5    346 Call    1                              8157   5    351 Case    1
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:66   
            8158   5    351 If      1                              8159   5    355 IntCal  1
            8160   5    360 If      1                              8161   5    364 IntCal  1
            8162   5    367 If      1                              8163   5    373 IntCal  1
            8164   5    376 If      1                              8165   5    402 Do      1
            8166   5    402 Assign  1                           $  8167   5    404 Call    1
            8168   5    412 EndDo   1                              8169   5    413 Case    1
            8170   5    413 If      1                              8171   5    417 Do      1
         $  8172   5    417 Assign  1                           $  8173   5    425 Call    1
            8174   5    433 EndDo   1                              8175   5    434 Case    1
            8176   5    434 If      1                              8177   5    440 IntCal  1
            8178   5    444 Case    1                              8179   5    444 If      1
         $  8180   5    450 Call    1                              8181   5    457 Case    1
            8182   5    457 If      1                              8183   5    463 Do      1
        $$  8184   5    463 Assign  1                           $  8185   5    471 Call    1
            8186   5    477 EndDo   1                          $$  8187   5    477 If      1
            8188   5    505 Do      1                           $  8189   5    505 Assign  1
         $  8190   5    511 Call    1                              8191   5    517 EndDo   1
            8192   5    520 Case    1                              8193   5    520 If      1
            8194   5    524 IntCal  1                              8195   5    527 If      1
            8196   5    533 IntCal  1                              8197   5    536 If      1
            8198   5    542 IntCal  1                              8199   5    545 If      1
            8200   5    551 IntCal  1                              8201   5    554 If      1
            8202   5    560 Do      1                              8203   5    560 Assign  1
         $  8204   5    563 Call    1                              8205   5    571 EndDo   1
            8206   5    572 Case    1                              8207   5    572 If      1
            8208   5    576 IntCal  1                              8209   5    601 If      1
            8210   5    605 Do      1                           $  8211   5    605 Assign  1
         $  8212   5    613 Call    1                              8213   5    621 EndDo   1
            8214   5    622 Case    1                              8215   5    622 If      1
         $  8216   5    626 Call    1                          $$  8217   5    634 If      1
         $  8218   5    642 Call    1                              8219   5    650 EndCse  1
            8220   5    650 EndDo   1                          $$  8221   5    650 If      1
            8226   5    656 Assign  1                           $  8227   5    661 EndWhi  1
            8228   5    667 Return  1                              8232   5    671 Proc    2
 $$$$$$$$$  8241   5    672 IntCal  2                              8242   5    701 Assign  2
            8243   5    702 DoWhil  2                              8244   5    703 Assign  2
            8245   5    707 Assign  2                           $  8246   5    711 EndWhi  2
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:67   
      $$$$  8247   5    720 IntCal  2                              8251   5    733 Return  2
            8255   5    735 Proc    3                              8304   5    736 Assign  3
      $$$$  8305   5    740 If      3                           $  8308   5    754 Assign  3
         $  8309   5    760 DoIndx  3                  $$$$$$$$$$  8310   5    763 MonCal  3
            8311   5    767 If      3                              8312   5    773 Do      3
         $  8313   5    773 Assign  3                              8314   5    776 Assign  3
            8315   5   1000 EndDo   3                       $$$$$  8316   5   1000 EndInd  3
            8318   5   1017 If      3 FORGET_IT                $$  8319   5   1021 IntCal  3
            8320   5   1027 Do      3                              8321   5   1027 Assign  3
         $  8322   5   1030 Call    3                              8323   5   1036 EndDo   3
            8324   5   1036 Return  3                              8337   5   1040 Proc    4
            8375   5   1041 Assign  4                              8376   5   1044 Call    4
            8377   5   1047 Return  4

  **** Statement type totals  ****

    31 Assign    24 Call       1 MonCal    35 If        10 Case       5 Return
    16 IntCal     1 DoIndx     2 DoWhil     1 DoCase    15 Do         1 EndInd
     2 EndWhi     1 EndCse    15 EndDo      5 Proc       1 Labels

 # major stmts=  116 Code/major= 4.76 # stmts=  165 Code/stmt= 3.35  Point total=103.0
 Cost/major stmt=  4.7 Cost/stmt=  3.3 Total cost=    549.7

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$$$$$$$$$$$$$$
   6-8  $$$$$$$$$$$$$
  8-10
 10-12  $$$
 12-14
 14-16
 16-18
 18-20
 20-22
 22-??
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:68   

 **** Variables and constants ****

  ****  Section 003  Data  TOL$BAD_CARD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    11-0-0/c CHAR(10)    r     1 REPLACE_CASE

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b STRC(45)    r     1 MASTER_ENTRY_KEY
     0-3-0/b UBIN(18)    r         2 ENTRY#

     2-0-0/w STRC(216)   r     1 MASTER_KEY
     2-1-0/c CHAR(23)    r         2 DATA
     2-1-0/c STRC(207)   r         2 SPLIT
     7-2-0/b UBIN(18)    r          3 DECK#

    14-0-0/d STRC(504)   r     1 READ_MASTER_ENTRY
    24-0-0/d STRC(216)   r         2 V

    10-0-0/w STRC        r     1 TOL_ERROR_CODE
    10-2-1/b UBIN(14)    r         2 ERR#


  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    24-0-0/w PTR         r     1 @BINARY                    3-0-0/w PTR         r     1 @ERR_VEC
    11-0-0/w PTR         r     1 @ERR_VEC                  11-0-0/w PTR         r     1 @ERR_VEC
    23-0-0/w PTR         r     1 @SIZE                     *0-0-0/w UBIN        r     1 BINARY
     4-0-0/b UBIN(18)    r     1 CATALOG_DECK#              7-0-0/w PTR         r     1 ERR_PTR$
    *0-0-0/d BIT (72)    r     1 ERR_VEC                   12-0-0/c CHAR        r     1 FIRST_CHAR
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:69   
    16-0-0/w UBIN        r     1 FULLWD                     5-0-0/w UBIN        r     1 L
     6-0-0/w UBIN        r     1 M                         13-0-0/w UBIN        r     1 REPLACE_INDEX
    14-0-0/w UBIN        r     1 REPLACE_SIZE              15-0-0/w UBIN        r     1 REPLACE_START
    *0-0-0/w UBIN        r     1 SIZE                      25-0-0/w CHAR(8)     r     1 STRING
    25-0-0/w CHAR        r     1 STRING_CHAR(0:7)

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    16-0-0/w STRC        r     1 EIGHTEEN
    16-2-0/b UBIN(18)    r         2 DATA

     7-0-0/w STRC        r     1 ERR_PTRP
     7-0-0/b UBIN(20)    r         2 ADDRESS
     7-2-6/b UBIN(12)    r         2 SEGID

    *0-0-0/d STRC(72)    r     1 ERR_VEC
     1-0-0/b UBIN(20)    r         2 BASE
     1-2-6/b UBIN(12)    r         2 SEGID

    *0-0-0/w STRC(72)    r     1 ERR_VEC
     0-0-0/b UBIN(20)    r         2 BOUND

    16-0-0/w STRC        r     1 NINE
    16-3-0/b UBIN(9)     r         2 DATA

    16-0-0/w STRC        r     1 SIX
    16-3-3/b UBIN(6)     r         2 DATA

    16-0-0/w STRC        r     1 THREE
    16-3-6/b UBIN(3)     r         2 DATA


  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:70   

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 TOL$BINARY$
     0-0-0/w PTR         r     1 TOL$CALL_SEQ$              0-0-0/w UBIN        r     1 TOL$CARD_SEQ
     0-0-0/w UBIN        r     1 TOL$DECKFILE_ARS#          0-0-0/w UBIN        r     1 TOL$I
     0-0-0/w UBIN        r     1 TOL$J                      0-0-0/w UBIN        r     1 TOL$K
     0-0-0/w PTR         r     1 TOL$START_LOAD$

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 CONSOLE_FPT
     4-0-0/w STRC(72)    r         2 BUF_

     0-0-0/w STRC(756)   r     1 HEX_CARD
    11-0-0/c CHAR(6)     r         2 REVISION

     0-0-0/b STRC(45)    r     1 TOL$CATALOG_ENTRY_KEY
     0-3-0/b UBIN(18)    r         2 ENTRY#

     0-0-0/w STRC(216)   r     1 TOL$CATALOG_KEY
     0-0-0/b UBIN(9)     r         2 SIZE
     0-1-0/c STRC(207)   r         2 SPLIT
     0-1-0/c CHAR(21)    r          3 DATA

     0-0-0/w STRC(756)   r     1 TOL$DKEND_CARD
    20-2-0/c CHAR(6)     r         2 REVISION
    22-0-0/c CHAR(4)     r         2 LBL

     0-0-0/w STRC(864)   r     1 TOL$OBJECT
     0-0-0/w STRC(720)   r         2 BCD
     5-1-0/c CHAR        r          3 LOAD_TYPE
    16-3-0/c CHAR        r          3 ASSEMBLER
    22-0-0/w CHAR(4)     r          3 LBL
    23-0-0/w CHAR(4)     r          3 SEQ
    24-0-0/b UBIN(18)    r         2 DECK#
    24-2-0/b UBIN(18)    r         2 BINARY_COUNT

PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:71   
     0-0-0/w STRC(216)   r     1 TOL$OBJECT_KEY
     0-0-0/b UBIN(9)     r         2 SIZE
     0-1-0/c CHAR(23)    r         2 DATA

     0-0-0/w STRC(756)   r     1 TOL$PATCH_CARD
    22-0-0/w CHAR(4)     r         2 LBL

     0-0-0/b STRC(45)    r     1 TOL$PATCH_KEY
     0-3-0/b UBIN(18)    r         2 CARD#

     0-0-0/w STRC        r     1 TOL$RELOC(0:27)
     0-0-0/b UBIN(18)    r         2 UPPER
     0-2-0/b UBIN(18)    r         2 LOWER


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DECKFILE                 0-0-0/w CHAR(140)   r     1 MESSAGE

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT
   102-0-0/b STRC        r         2 ERR

     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w PTR         r         2 ALT$

     0-0-0/w STRC(936)   r     1 BINARY
     0-0-0/w STRC        r         2 LOAD
     0-0-0/b UBIN(3)     r          3 TYPE

     0-0-0/w STRC(936)   r     1 BINARY_LBLSEQ
    30-0-0/w CHAR(4)     r         2 LBL
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:72   

     0-0-0/w STRC(252)   r     1 CALL_SEQUENCE
     1-0-0/b UBIN(18)    r         2 CATALOG#

     0-0-0/w STRC(1044)  r     1 LOAD
     0-0-0/b UBIN(3)     r         2 TYPE
     0-1-3/b UBIN(6)     r         2 SIZE



   Procedure TOL$BAD_CARD requires 553 words for executable code.
   Procedure TOL$BAD_CARD requires 30 words of local(AUTO) storage.

    No errors detected in file TOL$BAD_CARD.:E05TSI    .
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:73   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:74   
          MINI XREF LISTING

B$ALT.CODE
      7849**DCL      7849--REDEF    7850--REDEF    7850--REDEF
B$ALT.ERR
      7850**DCL      8059<>CALL
B$ALT.ERR.ERR#
      7851**DCL      7851--REDEF
B$ALT.EVID
      7850**DCL      7850--REDEF    7850--REDEF
B$TCB.ALT$
      7845**DCL      8059>>CALL
B$TCB$
      7843**DCL      8059>>CALL
BINARY
      7943**DCL      7956--REDEF
BINARY.DATA
      7952**DCL      7953--REDEF
BINARY.LOAD.TYPE
      7946**DCL      8125>>ASSIGN
BINARY.WD1
      7944**DCL      7945--REDEF
BINARY IN PROCEDURE TOL$CONVERT_BINARY
      8234**DCL      8232--PROC     8241>>CALLBLT
BINARY_LBLSEQ.LBL
      7958**DCL      8122>>CALLBLT
CALL_SEQUENCE.CATALOG#
      7963**DCL      8308>>ASSIGN
CALL_SEQUENCE.CATALOG_CKSUM
      7965**DCL      7968--REDEF    7969--REDEF
CALL_SEQUENCE.ENTRY_COUNT
      7971**DCL      7972--REDEF
CATALOG_DECK#
      7939**DCL      8304<<ASSIGN   8308<<ASSIGN   8314<<ASSIGN   8318>>IF       8321>>ASSIGN
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:75   
CONSOLE_FPT.BUF_ IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8358**DCL      8375<<ASSIGN
CONSOLE_FPT.STATION_ IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8360**DCL      8360--REDEF
CONSOLE_FPT.V.DVBYTE.VFC# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8367**DCL      8367--REDEF
EIGHTEEN IN PROCEDURE TOL$REPLACE
      8083**DCL      8086--REDEF    8089--REDEF    8092--REDEF    8095--REDEF
EIGHTEEN.DATA IN PROCEDURE TOL$REPLACE
      8085**DCL      8130<<ASSIGN   8135<<ASSIGN   8147<<ASSIGN   8166<<ASSIGN   8172<<ASSIGN   8211<<ASSIGN
      8321<<ASSIGN
ERR_PTR$
      7976**DCL      7942--IMP-PTR  7977--REDEF    8058>>IF       8103>>CALLBLT  8111>>ASSIGN   8119>>IF
      8121>>IF       8122>>CALLBLT  8123>>IF       8128>>IF       8133>>IF       8139>>IF       8140>>CALLBLT
      8141>>IF       8143>>IF       8145>>IF       8150>>IF       8155>>IF       8158>>IF       8159>>CALLBLT
      8160>>IF       8161>>CALLBLT  8162>>IF       8163>>CALLBLT  8164>>IF       8170>>IF       8176>>IF
      8177>>CALLBLT  8179>>IF       8182>>IF       8187>>IF       8193>>IF       8194>>CALLBLT  8195>>IF
      8196>>CALLBLT  8197>>IF       8198>>CALLBLT  8199>>IF       8200>>CALLBLT  8201>>IF       8207>>IF
      8208>>CALLBLT  8209>>IF       8215>>IF       8217>>IF       8221>>IF       8247>>CALLBLT  8319>>CALLBLT
ERR_PTRP
      7977**DCL      8055<<ASSIGN
ERR_PTRP.ADDRESS
      7978**DCL      8057<<ASSIGN
ERR_PTRP.SEGID
      7980**DCL      8056<<ASSIGN
ERR_VEC
      7834**DCL        11--PROC     8061<>CALL     8062<>CALL
ERR_VEC.BASE
      7837**DCL      8057>>ASSIGN
ERR_VEC.SEGID
      7839**DCL      8056>>ASSIGN
ERR_VEC IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8339**DCL      8337--PROC     8375>>ASSIGN
ERR_VEC IN PROCEDURE TOL$REPLACE
      8072**DCL      8070--PROC
ERR_VEC.BOUND IN PROCEDURE TOL$REPLACE
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:76   
      8073**DCL      8100>>ASSIGN   8101>>DOWHILE  8108>>IF
FIRST_CHAR IN PROCEDURE TOL$REPLACE
      8078**DCL      8111<<ASSIGN   8112>>CALLBLT
FORGET_IT IN PROCEDURE TOL$GET_CATALOG#
      8318**LABEL    8310--CALLALT
FULLWD IN PROCEDURE TOL$REPLACE
      8095**DCL      8116<<ASSIGN   8126<>CALL     8131<>CALL     8136<>CALL     8148<>CALL     8153<>CALL
      8167<>CALL     8173<>CALL     8185<>CALL     8190<>CALL     8204<>CALL     8212<>CALL     8322<>CALL
HEX_ASCII.DATA
      7926**DCL      7927--REDEF
HEX_CARD.REVISION
      7922**DCL      8177>>CALLBLT
L
      7940**DCL      8112<<CALLBLT  8117>>DOCASE
LOAD.SIZE
      7984**DCL      8189>>ASSIGN
LOAD.TYPE
      7982**DCL      8184>>ASSIGN
M
      7941**DCL      8242<<ASSIGN   8243>>DOWHILE  8243>>DOWHILE  8244>>ASSIGN   8245<<ASSIGN   8245>>ASSIGN
M$READ
      6630**DCL-ENT  8310--CALL
MASTER_ENTRY_KEY
      7987**DCL      8279--DCLINIT  8280--DCLINIT
MASTER_ENTRY_KEY.ENTRY#
      7990**DCL      8309<<DOINDEX  8313<<ASSIGN
MASTER_KEY
      7991**DCL      8281--DCLINIT  8282--DCLINIT
MASTER_KEY.DATA
      7993**DCL      7994--REDEF    8311>>IF
MASTER_KEY.SPLIT.CLEAR
      7996**DCL      7997--REDEF
MASTER_KEY.SPLIT.DECK#
      7997**DCL      8314>>ASSIGN
MESSAGE
      7942**DCL      8058>>IF       8103>>CALLBLT  8111>>ASSIGN   8119>>IF       8121>>IF       8122<<CALLBLT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:77   
      8123>>IF       8128>>IF       8133>>IF       8139>>IF       8140<<CALLBLT  8141>>IF       8143>>IF
      8145>>IF       8150>>IF       8155>>IF       8158>>IF       8159<<CALLBLT  8160>>IF       8161<<CALLBLT
      8162>>IF       8163<<CALLBLT  8164>>IF       8170>>IF       8176>>IF       8177<<CALLBLT  8179>>IF
      8182>>IF       8187>>IF       8193>>IF       8194<<CALLBLT  8195>>IF       8196<<CALLBLT  8197>>IF
      8198<<CALLBLT  8199>>IF       8200<<CALLBLT  8201>>IF       8207>>IF       8208<<CALLBLT  8209>>IF
      8215>>IF       8217>>IF       8221>>IF       8247<<CALLBLT  8319<<CALLBLT
NINE.DATA IN PROCEDURE TOL$REPLACE
      8088**DCL      8152<<ASSIGN   8203<<ASSIGN
PATCH_ASCII.DATA
      7914**DCL      7915--REDEF
READ_MASTER_ENTRY IN PROCEDURE TOL$GET_CATALOG#
      8279**DCL      8310<>CALL
READ_MASTER_ENTRY.STATION_ IN PROCEDURE TOL$GET_CATALOG#
      8282**DCL      8283--REDEF
READ_MASTER_ENTRY.V IN PROCEDURE TOL$GET_CATALOG#
      8283**DCL      8279--DCLINIT
READ_MASTER_ENTRY.V.DVBYTE.REREAD# IN PROCEDURE TOL$GET_CATALOG#
      8294**DCL      8294--REDEF
READ_MASTER_ENTRY.V.INDX# IN PROCEDURE TOL$GET_CATALOG#
      8292**DCL      8292--REDEF
REPLACE_CASE IN PROCEDURE TOL$REPLACE
      8079**DCL      8112>>CALLBLT
REPLACE_INDEX IN PROCEDURE TOL$REPLACE
      8080**DCL      8099<<ASSIGN   8101>>DOWHILE  8102>>ASSIGN   8103<<CALLBLT  8108>>IF       8110>>ASSIGN
      8226<<ASSIGN   8226>>ASSIGN
REPLACE_SIZE IN PROCEDURE TOL$REPLACE
      8081**DCL      8100<<ASSIGN
REPLACE_START IN PROCEDURE TOL$REPLACE
      8082**DCL      8102<<ASSIGN   8103>>CALLBLT  8110<<ASSIGN   8111>>ASSIGN   8119>>IF       8121>>IF
      8122>>CALLBLT  8123>>IF       8128>>IF       8133>>IF       8139>>IF       8140>>CALLBLT  8141>>IF
      8143>>IF       8145>>IF       8150>>IF       8155>>IF       8158>>IF       8159>>CALLBLT  8160>>IF
      8161>>CALLBLT  8162>>IF       8163>>CALLBLT  8164>>IF       8170>>IF       8176>>IF       8177>>CALLBLT
      8179>>IF       8182>>IF       8187>>IF       8193>>IF       8194>>CALLBLT  8195>>IF       8196>>CALLBLT
      8197>>IF       8198>>CALLBLT  8199>>IF       8200>>CALLBLT  8201>>IF       8207>>IF       8208>>CALLBLT
      8209>>IF       8215>>IF       8217>>IF       8221>>IF       8247>>CALLBLT  8319>>CALLBLT
SIX.DATA IN PROCEDURE TOL$REPLACE
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:78   
      8091**DCL      8189<<ASSIGN
SIZE IN PROCEDURE TOL$CONVERT_BINARY
      8235**DCL      8232--PROC     8247>>CALLBLT  8247>>CALLBLT
STRING IN PROCEDURE TOL$CONVERT_BINARY
      8236**DCL      8237--REDEF    8241<<CALLBLT  8247>>CALLBLT
STRING_CHAR IN PROCEDURE TOL$CONVERT_BINARY
      8237**DCL      8243>>DOWHILE  8244<<ASSIGN
THREE.DATA IN PROCEDURE TOL$REPLACE
      8094**DCL      8125<<ASSIGN   8184<<ASSIGN
TOL$BINARY$
      7861**DCL      7943--IMP-PTR  7956--IMP-PTR  8122>>CALLBLT  8125>>ASSIGN
TOL$CALL_SEQ$
      7862**DCL      7960--IMP-PTR  8308>>ASSIGN
TOL$CARD_SEQ
      7855**DCL      8218<>CALL
TOL$CATALOG_ENTRY_KEY.ENTRY#
      7866**DCL      8172>>ASSIGN
TOL$CATALOG_KEY.DATA
      7869**DCL      7870--REDEF
TOL$CATALOG_KEY.SIZE
      7868**DCL      8152>>ASSIGN
TOL$CATALOG_KEY.SPLIT.CLEAR
      7872**DCL      7873--REDEF
TOL$CATALOG_KEY.SPLIT.DATA
      7871**DCL      8140>>CALLBLT
TOL$CONVERT_BINARY IN PROCEDURE TOL$REPLACE
      8232**PROC     8120--CALL     8126--CALL     8131--CALL     8136--CALL     8142--CALL     8144--CALL
      8148--CALL     8153--CALL     8167--CALL     8173--CALL     8180--CALL     8185--CALL     8190--CALL
      8204--CALL     8212--CALL     8216--CALL     8218--CALL     8322--CALL
TOL$DECKFILE_ARS#
      7856**DCL      8216<>CALL
TOL$DKEND_CARD.LBL
      7879**DCL      8161>>CALLBLT
TOL$DKEND_CARD.REVISION
      7878**DCL      8163>>CALLBLT
TOL$GET_CATALOG# IN PROCEDURE TOL$REPLACE
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:79   
      8255**PROC     8156--CALL
TOL$I
      7857**DCL      8120>>CALL
TOL$J
      7858**DCL      8130>>ASSIGN   8135>>ASSIGN   8142>>CALL     8180<>CALL
TOL$K
      7859**DCL      8144>>CALL
TOL$OBJECT.BCD.ASSEMBLER
      7889**DCL      8194>>CALLBLT
TOL$OBJECT.BCD.LBL
      7891**DCL      8159>>CALLBLT
TOL$OBJECT.BCD.LOAD_TYPE
      7887**DCL      8198>>CALLBLT
TOL$OBJECT.BCD.SEQ
      7892**DCL      8200>>CALLBLT
TOL$OBJECT.BINARY_COUNT
      7894**DCL      8147>>ASSIGN
TOL$OBJECT.DECK#
      7893**DCL      8166>>ASSIGN
TOL$OBJECT_KEY.DATA
      7901**DCL      7902--REDEF    8196>>CALLBLT  8305>>IF       8305>>IF       8305>>IF       8311>>IF
TOL$OBJECT_KEY.SIZE
      7900**DCL      8203>>ASSIGN
TOL$OBJECT_KEY.SPLIT.CLEAR
      7904**DCL      7905--REDEF
TOL$PATCH_CARD
      7906**DCL      7913--REDEF    7917--REDEF    7925--REDEF
TOL$PATCH_CARD.LBL
      7910**DCL      8208>>CALLBLT
TOL$PATCH_KEY.CARD#
      7932**DCL      8211>>ASSIGN
TOL$PRINT_ERROR_MESSAGE
      8337**PROC     8062--CALL
TOL$RELOC.LOWER
      7935**DCL      8130>>ASSIGN
TOL$RELOC.UPPER
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:80   
      7934**DCL      8135>>ASSIGN
TOL$REPLACE
      8070**PROC     8061--CALL
TOL$START_LOAD$
      7860**DCL      7981--IMP-PTR  8184>>ASSIGN   8189>>ASSIGN
TOL_ERROR_CODE
      8013**DCL      8064<>CALL
TOL_ERROR_CODE.ERR#
      8043**DCL      8063<<ASSIGN
TOT$CONSOLE_OUT
      8049**DCL-ENT  8376--CALL
TOX$ABORT
      8050**DCL-ENT  8059--CALL
TOX$ERROR
      8051**DCL-ENT  8064--CALL
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:81   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:82   
              FULL UREF LISTING

B$ALT
      7849**DCL
B$ALT.BRKCNT
      7850**DCL
B$ALT.DCB#
      7850**DCL
B$ALT.ERR.CODE
      7851**DCL
B$ALT.ERR.FCG
      7851**DCL
B$ALT.ERR.MID
      7851**DCL
B$ALT.ERR.MON
      7851**DCL
B$ALT.ERR.SEV
      7851**DCL
B$ALT.EVSC
      7850**DCL
B$ALT.FPT
      7849**DCL
B$ALT.FPT.FCG
      7849**DCL
B$ALT.FPT.PMME
      7849**DCL
B$ALT.P#
      7853**DCL
B$ALT.SSFRAME
      7849**DCL
B$ALT.SUBC
      7850**DCL
B$TCB
      7845**DCL
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:83   
B$TCB.CURRSZ
      7845**DCL
B$TCB.STK$
      7845**DCL
B$TCB.TCBAVSZ
      7845**DCL
BINARY.CHECKSUM
      7950**DCL
BINARY.LOAD
      7945**DCL
BINARY.LOAD.ADDRESS
      7949**DCL
BINARY.LOAD.SIZE
      7948**DCL
BINARY.RELOC
      7951**DCL
BINARY.SPLIT
      7953**DCL
BINARY.SPLIT.LOWER
      7955**DCL
BINARY.SPLIT.UPPER
      7954**DCL
BINARY_LBLSEQ
      7956**DCL
BINARY_LBLSEQ.SEQ
      7959**DCL
CALL_SEQUENCE
      7960**DCL
CALL_SEQUENCE.CARD_COUNT
      7972**DCL
CALL_SEQUENCE.CATALOG_CHECKSUM
      7968**DCL
CALL_SEQUENCE.CATALOG_CKSUM.LOWER
      7967**DCL
CALL_SEQUENCE.CATALOG_CKSUM.UPPER
      7966**DCL
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:84   
CALL_SEQUENCE.CHECKSUM
      7973**DCL
CALL_SEQUENCE.DECK#
      7970**DCL
CALL_SEQUENCE.DECK_OFFSET
      7969**DCL
CALL_SEQUENCE.FDCWP
      7961**DCL
CALL_SEQUENCE.NEXT_ENTRY
      7964**DCL
CALL_SEQUENCE.NO_MORE
      7975**DCL
CALL_SEQUENCE.RELOCATION
      7974**DCL
CALL_SEQUENCE.STATUSP
      7962**DCL
CONSOLE_FPT IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8358**DCL
CONSOLE_FPT.BUF_.BOUND IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8358**DCL
CONSOLE_FPT.BUF_.BUF$ IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8360**DCL
CONSOLE_FPT.IDBUF_ IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8360**DCL
CONSOLE_FPT.KEY_ IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8358**DCL
CONSOLE_FPT.V IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8361**DCL
CONSOLE_FPT.V.DCB# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8361**DCL
CONSOLE_FPT.V.DVBYTE IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8366**DCL
CONSOLE_FPT.V.DVBYTE.BIN# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8367**DCL
CONSOLE_FPT.V.DVBYTE.BP# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8367**DCL
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:85   
CONSOLE_FPT.V.DVBYTE.CONT# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8369**DCL
CONSOLE_FPT.V.DVBYTE.NODAT# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8368**DCL
CONSOLE_FPT.V.DVBYTE.REREAD# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8367**DCL
CONSOLE_FPT.V.DVBYTE.RRR# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8368**DCL
CONSOLE_FPT.V.DVBYTE.TOP# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8366**DCL
CONSOLE_FPT.V.DVBYTE.TRANS# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8368**DCL
CONSOLE_FPT.V.EVENT# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8366**DCL
CONSOLE_FPT.V.FULL# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8363**DCL
CONSOLE_FPT.V.ID# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8362**DCL
CONSOLE_FPT.V.IOERROK# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8365**DCL
CONSOLE_FPT.V.KEYTYPE# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8365**DCL
CONSOLE_FPT.V.NEWKEY# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8364**DCL
CONSOLE_FPT.V.NOTIME# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8364**DCL
CONSOLE_FPT.V.ODFNC# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8370**DCL
CONSOLE_FPT.V.ONEWKEY# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8363**DCL
CONSOLE_FPT.V.REWRITE# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8364**DCL
CONSOLE_FPT.V.SEED# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8366**DCL
CONSOLE_FPT.V.WAIT# IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8361**DCL
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:86   
CONSOLE_FPT.V_ IN PROCEDURE TOL$PRINT_ERROR_MESSAGE
      8358**DCL
ERR_VEC.BOUND
      7835**DCL
ERR_VEC.BASE IN PROCEDURE TOL$REPLACE
      8075**DCL
ERR_VEC.SEGID IN PROCEDURE TOL$REPLACE
      8077**DCL
HEX_ASCII
      7925**DCL
HEX_ASCII.CHARS
      7927**DCL
HEX_CARD
      7917**DCL
HEX_CARD.CR
      7919**DCL
HEX_CARD.TYPE
      7920**DCL
LOAD
      7981**DCL
LOAD.ADDRESS
      7985**DCL
LOAD.DATA
      7986**DCL
M$ACCT
      6646**DCL-ENT
M$ACTIVATE
      6649**DCL-ENT
M$ALIB
      6642**DCL-ENT
M$ASUSER
      6644**DCL-ENT
M$ATTACH
      6651**DCL-ENT
M$BADPP
      6669**DCL-ENT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:87   
M$CGCTL
      6650**DCL-ENT
M$CGINFO
      6650**DCL-ENT
M$CHECK
      6631**DCL-ENT
M$CHGUNIT
      6689**DCL-ENT
M$CLOSE
      6629**DCL-ENT
M$CLRSTK
      6687**DCL-ENT
M$CMDVAR
      6698**DCL-ENT
M$CONFIG
      6659**DCL-ENT
M$CORRES
      6634**DCL-ENT
M$CPEXIT
      6643**DCL-ENT
M$CVM
      6667**DCL-ENT
M$CVOL
      6632**DCL-ENT
M$DCLFLD
      6659**DCL-ENT
M$DEACTIVATE
      6649**DCL-ENT
M$DECKFILE
      7829**DCL
M$DELREC
      6631**DCL-ENT
M$DEQ
      6696**DCL-ENT
M$DETACH
      6651**DCL-ENT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:88   
M$DEVICE
      6633**DCL-ENT
M$DISPLAY
      6696**DCL-ENT
M$DISPRES
      6636**DCL-ENT
M$DLIB
      6642**DCL-ENT
M$DO
      7830**DCL
M$DRIBBLE
      6659**DCL-ENT
M$DRTN
      6687**DCL-ENT
M$DSUSER
      6644**DCL-ENT
M$ENQ
      6695**DCL-ENT
M$EOM
      6654**DCL-ENT
M$ERASE
      6660**DCL-ENT
M$ERR
      6641**DCL-ENT
M$ERRMSG
      6692**DCL-ENT
M$EVENT
      6684**DCL-ENT
M$EXHUME
      6693**DCL-ENT
M$EXIT
      6641**DCL-ENT
M$EXTEND
      6633**DCL-ENT
M$FDP
      6665**DCL-ENT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:89   
M$FDS
      6664**DCL-ENT
M$FEBOOT
      6657**DCL-ENT
M$FECTL
      6658**DCL-ENT
M$FEDUMP
      6657**DCL-ENT
M$FID
      6692**DCL-ENT
M$FINDPROC
      6646**DCL-ENT
M$FSUSER
      6644**DCL-ENT
M$FVP
      6666**DCL-ENT
M$FWCG
      6650**DCL-ENT
M$GBPL
      6670**DCL-ENT
M$GDDL
      6666**DCL-ENT
M$GDP
      6665**DCL-ENT
M$GDS
      6664**DCL-ENT
M$GETDCB
      6635**DCL-ENT
M$GETMOUSE
      6675**DCL-ENT
M$GETPM
      6676**DCL-ENT
M$GJOB
      6694**DCL-ENT
M$GLINEATTR
      6654**DCL-ENT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:90   
M$GOODPP
      6669**DCL-ENT
M$GPLATEN
      6662**DCL-ENT
M$GPROMPT
      6661**DCL-ENT
M$GTRMATTR
      6655**DCL-ENT
M$GTRMCTL
      6653**DCL-ENT
M$GTRMTAB
      6656**DCL-ENT
M$GVP
      6665**DCL-ENT
M$HELP
      6692**DCL-ENT
M$INT
      6684**DCL-ENT
M$INTRTN
      6645**DCL-ENT
M$IOQ
      6680**DCL-ENT
M$JOBSTATS
      6694**DCL-ENT
M$KEYIN
      6634**DCL-ENT
M$LDEV
      6629**DCL-ENT
M$LDTRC
      6642**DCL-ENT
M$LIMIT
      6635**DCL-ENT
M$LINES
      6634**DCL-ENT
M$LINK
      6641**DCL-ENT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:91   
M$MADMUCK
      6637**DCL-ENT
M$MAKUSER
      6668**DCL-ENT
M$MBS
      6636**DCL-ENT
M$MDFFLD
      6660**DCL-ENT
M$MERC
      6685**DCL-ENT
M$MERCS
      6686**DCL-ENT
M$MIRROR
      6680**DCL-ENT
M$MONINFO
      6697**DCL-ENT
M$MPL
      6670**DCL-ENT
M$NODEINFO
      6661**DCL-ENT
M$NXTUSR
      6695**DCL-ENT
M$OCMSG
      6693**DCL-ENT
M$OLAY
      6641**DCL-ENT
M$OPEN
      6629**DCL-ENT
M$PAS
      6670**DCL-ENT
M$PATHCON
      6693**DCL-ENT
M$PDS
      6664**DCL-ENT
M$PFIL
      6631**DCL-ENT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:92   
M$PLATEN
      6655**DCL-ENT
M$PRECORD
      6633**DCL-ENT
M$PROCNAME
      6646**DCL-ENT
M$PROFILE
      6657**DCL-ENT
M$PROMPT
      6653**DCL-ENT
M$RACST
      6637**DCL-ENT
M$RDSYSLOG
      6678**DCL-ENT
M$RELDCB
      6635**DCL-ENT
M$RELRES
      6636**DCL-ENT
M$RELSTARF
      6638**DCL-ENT
M$REM
      6638**DCL-ENT
M$RENV
      6685**DCL-ENT
M$REQUIRE
      6637**DCL-ENT
M$RETRY
      6686**DCL-ENT
M$RETRYS
      6686**DCL-ENT
M$REW
      6632**DCL-ENT
M$RLSFLD
      6660**DCL-ENT
M$RPRIV
      6688**DCL-ENT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:93   
M$RSPP
      6667**DCL-ENT
M$RSWITCH
      6689**DCL-ENT
M$RUE
      6695**DCL-ENT
M$SAD
      6668**DCL-ENT
M$SAVE
      6644**DCL-ENT
M$SCON
      6645**DCL-ENT
M$SCREECH
      6643**DCL-ENT
M$SENV
      6685**DCL-ENT
M$SETFMA
      6629**DCL-ENT
M$SETFP
      6658**DCL-ENT
M$SINPUT
      6656**DCL-ENT
M$SLCFLD
      6661**DCL-ENT
M$SMOUSE
      6675**DCL-ENT
M$SMPRT
      6667**DCL-ENT
M$SPRIV
      6688**DCL-ENT
M$SSC
      6668**DCL-ENT
M$SSWITCH
      6688**DCL-ENT
M$STATE
      6697**DCL-ENT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:94   
M$STD
      6669**DCL-ENT
M$STIMER
      6683**DCL-ENT
M$STLPP
      6666**DCL-ENT
M$STRAP
      6683**DCL-ENT
M$STRMATTR
      6655**DCL-ENT
M$STRMCTL
      6653**DCL-ENT
M$STRMTAB
      6656**DCL-ENT
M$SYMBIO
      6694**DCL-ENT
M$SYSCON
      6680**DCL-ENT
M$SYSID
      6698**DCL-ENT
M$TDCLOSE
      6679**DCL-ENT
M$TDIO
      6679**DCL-ENT
M$TDOPEN
      6678**DCL-ENT
M$TDREQCPU
      6679**DCL-ENT
M$TEMPWROC
      6673**DCL-ENT
M$TIME
      6696**DCL-ENT
M$TRAP
      6683**DCL-ENT
M$TRMISC
      6658**DCL-ENT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:95   
M$TRMPRG
      6654**DCL-ENT
M$TRTN
      6687**DCL-ENT
M$TRUNC
      6630**DCL-ENT
M$TTIMER
      6683**DCL-ENT
M$UC
      6653**DCL
M$UMPL
      6670**DCL-ENT
M$UNFID
      6692**DCL-ENT
M$UNLATCH
      6649**DCL-ENT
M$UNSHARE
      6646**DCL-ENT
M$USRFIELD
      6689**DCL-ENT
M$VIRTUAL
      6664**DCL-ENT
M$WAIT
      6687**DCL-ENT
M$WEOF
      6632**DCL-ENT
M$WRITE
      6630**DCL-ENT
M$WRSYSLOG
      6678**DCL-ENT
M$XCON
      6684**DCL-ENT
M$XCONRTN
      6645**DCL-ENT
M$XEQTIME
      6697**DCL-ENT
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:96   
M$XFLUSH
      6638**DCL-ENT
M$XMOUSE
      6675**DCL-ENT
M$XXX
      6641**DCL-ENT
M$YC
      6643**DCL-ENT
MASTER_ENTRY_KEY.DECK#
      7989**DCL
MASTER_ENTRY_KEY.SIZE
      7988**DCL
MASTER_KEY.SIZE
      7992**DCL
MASTER_KEY.SPLIT
      7994**DCL
MASTER_KEY.SPLIT.DATA
      7995**DCL
NINE IN PROCEDURE TOL$REPLACE
      8086**DCL
PATCH_ASCII
      7913**DCL
PATCH_ASCII.CHARS
      7915**DCL
READ_MASTER_ENTRY.BUF_ IN PROCEDURE TOL$GET_CATALOG#
      8281**DCL
READ_MASTER_ENTRY.BUF_.BOUND IN PROCEDURE TOL$GET_CATALOG#
      8281**DCL
READ_MASTER_ENTRY.BUF_.BUF$ IN PROCEDURE TOL$GET_CATALOG#
      8282**DCL
READ_MASTER_ENTRY.IDBUF_ IN PROCEDURE TOL$GET_CATALOG#
      8283**DCL
READ_MASTER_ENTRY.KEY_ IN PROCEDURE TOL$GET_CATALOG#
      8279**DCL
READ_MASTER_ENTRY.KEY_.BOUND IN PROCEDURE TOL$GET_CATALOG#
      8279**DCL
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:97   
READ_MASTER_ENTRY.KEY_.KEY$ IN PROCEDURE TOL$GET_CATALOG#
      8280**DCL
READ_MASTER_ENTRY.V.DCB# IN PROCEDURE TOL$GET_CATALOG#
      8283**DCL
READ_MASTER_ENTRY.V.DVBYTE IN PROCEDURE TOL$GET_CATALOG#
      8293**DCL
READ_MASTER_ENTRY.V.DVBYTE.BIN# IN PROCEDURE TOL$GET_CATALOG#
      8294**DCL
READ_MASTER_ENTRY.V.DVBYTE.BP# IN PROCEDURE TOL$GET_CATALOG#
      8293**DCL
READ_MASTER_ENTRY.V.DVBYTE.CONT# IN PROCEDURE TOL$GET_CATALOG#
      8296**DCL
READ_MASTER_ENTRY.V.DVBYTE.NODAT# IN PROCEDURE TOL$GET_CATALOG#
      8295**DCL
READ_MASTER_ENTRY.V.DVBYTE.TOP# IN PROCEDURE TOL$GET_CATALOG#
      8293**DCL
READ_MASTER_ENTRY.V.DVBYTE.TRANS# IN PROCEDURE TOL$GET_CATALOG#
      8295**DCL
READ_MASTER_ENTRY.V.DVBYTE.VFC# IN PROCEDURE TOL$GET_CATALOG#
      8294**DCL
READ_MASTER_ENTRY.V.EVENT# IN PROCEDURE TOL$GET_CATALOG#
      8292**DCL
READ_MASTER_ENTRY.V.FULL# IN PROCEDURE TOL$GET_CATALOG#
      8285**DCL
READ_MASTER_ENTRY.V.ID# IN PROCEDURE TOL$GET_CATALOG#
      8284**DCL
READ_MASTER_ENTRY.V.IDS# IN PROCEDURE TOL$GET_CATALOG#
      8285**DCL
READ_MASTER_ENTRY.V.IOERROK# IN PROCEDURE TOL$GET_CATALOG#
      8286**DCL
READ_MASTER_ENTRY.V.KEYCHNG# IN PROCEDURE TOL$GET_CATALOG#
      8285**DCL
READ_MASTER_ENTRY.V.KEYR# IN PROCEDURE TOL$GET_CATALOG#
      8284**DCL
READ_MASTER_ENTRY.V.KEYS# IN PROCEDURE TOL$GET_CATALOG#
      8284**DCL
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:98   
READ_MASTER_ENTRY.V.KEYTYPE# IN PROCEDURE TOL$GET_CATALOG#
      8292**DCL
READ_MASTER_ENTRY.V.ODFNC# IN PROCEDURE TOL$GET_CATALOG#
      8297**DCL
READ_MASTER_ENTRY.V.RECNUM# IN PROCEDURE TOL$GET_CATALOG#
      8297**DCL
READ_MASTER_ENTRY.V.REREADPOS# IN PROCEDURE TOL$GET_CATALOG#
      8298**DCL
READ_MASTER_ENTRY.V.SEED# IN PROCEDURE TOL$GET_CATALOG#
      8293**DCL
READ_MASTER_ENTRY.V.SINPUTSIZE# IN PROCEDURE TOL$GET_CATALOG#
      8297**DCL
READ_MASTER_ENTRY.V.STRPVFC# IN PROCEDURE TOL$GET_CATALOG#
      8296**DCL
READ_MASTER_ENTRY.V.WAIT# IN PROCEDURE TOL$GET_CATALOG#
      8283**DCL
READ_MASTER_ENTRY.V_ IN PROCEDURE TOL$GET_CATALOG#
      8279**DCL
SIX IN PROCEDURE TOL$REPLACE
      8089**DCL
THREE IN PROCEDURE TOL$REPLACE
      8092**DCL
TOL$BAD_CARD
        11**PROC
TOL$CATALOG_ENTRY_KEY
      7863**DCL
TOL$CATALOG_ENTRY_KEY.DECK#
      7865**DCL
TOL$CATALOG_ENTRY_KEY.SIZE
      7864**DCL
TOL$CATALOG_KEY
      7867**DCL
TOL$CATALOG_KEY.SPLIT
      7870**DCL
TOL$CATALOG_KEY.SPLIT.DECK#
      7873**DCL
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:99   
TOL$DKEND_CARD
      7874**DCL
TOL$DKEND_CARD.CHECKSUM
      7881**DCL
TOL$DKEND_CARD.CONTROL
      7875**DCL
TOL$DKEND_CARD.SEQ
      7880**DCL
TOL$DKEND_CARD.TYPE
      7876**DCL
TOL$OBJECT
      7882**DCL
TOL$OBJECT.BCD
      7883**DCL
TOL$OBJECT.BCD.CONTROL
      7884**DCL
TOL$OBJECT.BCD.TYPE
      7885**DCL
TOL$OBJECT.CHECKSUM
      7898**DCL
TOL$OBJECT.DECK_CHECKSUM
      7897**DCL
TOL$OBJECT.LOAD_SIZE
      7896**DCL
TOL$OBJECT.TOTAL_COUNT
      7895**DCL
TOL$OBJECT_KEY
      7899**DCL
TOL$OBJECT_KEY.SPLIT
      7902**DCL
TOL$OBJECT_KEY.SPLIT.DATA
      7903**DCL
TOL$OBJECT_KEY.SPLIT.DECK#
      7905**DCL
TOL$PATCH_CARD.CHECKSUM
      7912**DCL
PL6.E3A0      #001=TOL$BAD_CARD File=TOL$BAD_CARD.:E05TSI                        WED 07/30/97 06:24 Page:100  
TOL$PATCH_CARD.SEQ
      7911**DCL
TOL$PATCH_CARD.TYPE
      7908**DCL
TOL$PATCH_KEY
      7929**DCL
TOL$PATCH_KEY.DECK#
      7931**DCL
TOL$PATCH_KEY.SIZE
      7930**DCL
TOL$RELOC
      7933**DCL
TOL_ERROR_CODE.FCG
      8029**DCL
TOL_ERROR_CODE.MID
      8042**DCL
TOL_ERROR_CODE.MON
      8042**DCL
TOL_ERROR_CODE.SEV
      8043**DCL
