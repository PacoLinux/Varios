

15:15 JUL 28 '97 QX_MACROS_C.:E05SI                                        1    
    1      /*M* QX_MACROS_C - TPCP random macros */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /* GLOBAL_PTRS - This macro defines a structure of pointers.
    9         The pointers are used to locate TPCPs global data.  The
   10         global data consists of FPTs, VLPs, and a general structure
   11         that constains flags and other junk.  */
   12
   13      %MACRO GLOBAL_PTRS(FPTN="GLOBAL_PTRS",STCLASS=AUTO);
   14      DCL 1 FPTN STCLASS DALIGNED,
   15            2 VLP$NAME$ PTR,
   16       /* Ptr -> general purpuose VLP_NAME */
   17            2 VLP$ACCT$ PTR,
   18       /* Ptr -> general purpuose VLP_ACCT */
   19            2 VLP$PASS$ PTR,
   20       /* Ptr -> general purpuose VLP_PASS */
   21            2 VLP$SN$ PTR,
   22       /* Ptr -> general purpuose VLP_SN */
   23            2 VLP$WSN$ PTR,
   24       /* Ptr -> general purpuose VLP_WSN */
   25            2 VLP$KEY$ PTR,
   26       /* Ptr -> general purpuose VLP_NAME used to hold a KEY */
   27            2 VLP$DCBNUM$ PTR,
   28       /* Ptr -> place to receive DCB # returned by M$GETDCB */
   29            2 VLP$LKEY$ PTR,
   30       /* Ptr -> a VLP_NAME used as LKEY on a M$DELREC */
   31            2 VLP$DEBUGGER$ PTR,
   32       /* Ptr -> debugger name to use with M$CPEXIT */
   33            2 VLP$MSGTYP$ PTR,
   34       /* Ptr -> message type that this TPU will read for */
   35            2 VLP$NAME_TRADER$ PTR,
   36       /* Ptr -> name of the TRADER file */
   37            2 VLP$ACCT_TRADER$ PTR,
15:15 JUL 28 '97 QX_MACROS_C.:E05SI                                        2    
   38       /* Ptr -> account of the TRADER file */
   39            2 VLP$IFPARAM_PASS_TRADER$ PTR,
   40       /* Ptr -> ifparam containing the password of the TRADER file */
   41            2 VLP$CODE07_PASS_TRADER$ PTR,
   42       /* Ptr -> code07 in fparam containing the password of the TRADER file */
   43            2 VLP$SN_TRADER$ PTR,
   44       /* Ptr -> serial # of the TRADER file */
   45            2 VLP$VECTOR$ PTR,
   46       /* Ptr -> a VLP_VECTOR used with M$GDS */
   47            2 VLP$FID$ PTR,
   48       /* Ptr -> FID of the TRADER file */
   49            2 VLP$STATION$ PTR,
   50       /* Ptr -> a VLP_STATION */
   51            2 VLP$SETSTA$ PTR,
   52       /* Ptr -> a VLP_SETSTA */
   53            2 VLP$GDS$ PTR,
   54       /* Ptr -> a VLP_VECTOR used with M$GDS */
   55            2 VLP$ASN$ PTR,
   56       /* Ptr -> a place for M$FID to put the ASN */
   57            2 VLP$TIME$ PTR,
   58       /* Ptr -> a place for M$TIME to store the time */
   59            2 VLR$FID$ PTR,
   60       /* Ptr -> a VLR_FID */
   61            2 VLR$ERRMSG$ PTR,
   62       /* Ptr -> a VLR_ERRMSG */
   63            2 FPT$READ_KEY$ PTR,
   64       /* Ptr -> a FPT for reading keyed files */
   65            2 FPT$WRITE_KEY$ PTR,
   66       /* Ptr -> a FPT for writing keyed files */
   67            2 FPT$GETDCB$ PTR,
   68       /* Ptr -> a FPT for M$GETDCB */
   69            2 FPT$RELDCB$ PTR,
   70       /* Ptr -> a FPT for M$RELDCB */
   71            2 FPT$CPEXIT$ PTR,
   72       /* Ptr -> a FPT for M$CPEXIT */
   73            2 FPT$GDS$ PTR,
   74       /* Ptr -> a FPT for M$GDS */
15:15 JUL 28 '97 QX_MACROS_C.:E05SI                                        3    
   75            2 FPT$FID$ PTR,
   76       /* Ptr -> a FPT for M$FID */
   77            2 FPT$OPEN_FILE$ PTR,
   78       /* Ptr -> a FPT for M$OPEN of a file */
   79            2 FPT$DELREC$ PTR,
   80       /* Ptr -> a FPT for M$DELREC */
   81            2 FPT$CLOSE$ PTR,
   82       /* Ptr -> a FPT for M$CLOSE */
   83            2 FPT$UNLATCH$ PTR,
   84       /* Ptr -> a FPT for M$UNLATCH */
   85            2 FPT$READ_CG$ PTR,
   86       /* Ptr -> a FPT for M$READ of a comgroup */
   87            2 FPT$WRITE_CG$ PTR,
   88       /* Ptr -> a FPT for M$WRITE of a comgroup */
   89            2 FPT$ERRMSG$ PTR,
   90       /* Ptr -> a FPT for M$ERRMSG call */
   91            2 FPT$OPEN_CG$ PTR,
   92       /* Ptr -> a FPT for M$OPEN of a comgroup */
   93            2 FPT$OCMSG$ PTR,
   94       /* Ptr -> a FPT for M$OCMSG */
   95            2 FPT$TIME$ PTR,
   96       /* Ptr -> a FPT for M$TIME */
   97            2 FPT$KEYIN$ PTR,
   98       /* Ptr -> a FPT for M$KEYIN */
   99            2 BUFFER$ PTR,
  100       /* Ptr -> a BUFFER for the M$KEYIN message */
  101            2 XUG$GETCMD$ PTR,
  102       /* Ptr -> a structure for CXC$COMMAND */
  103            2 QX$GLOBAL$ PTR;
  104       /* Ptr -> a TPCP structure a random data */
  105      %MEND;
  106
  107      /* QX$GLOBAL - This structure defines the depository for general
  108         data in TPCP.  TPCP can not have any static data so its
  109         garbage data must reside in a data segment. */
  110
  111      %MACRO QX$GLOBAL(FPTN=QX$GLOBAL,
15:15 JUL 28 '97 QX_MACROS_C.:E05SI                                        4    
  112                       STCLASS="BASED(GLOBAL_PTRS.QX$GLOBAL$)");
  113      DCL 1 FPTN STCLASS,
  114            2 SETS BIT(1) ALIGNED,
  115       /* Set if there are assign merge records in the *A file currently */
  116            2 SETSTA_LOCKED BIT(1) ALIGNED,
  117       /* Set if VLP_SETSTA for M$UC is currenlty locked */
  118            2 MESSAGE BIT(1) ALIGNED,
  119       /* Set if we are suposes to send a message to station of origin if TPAP aborts */
  120            2 EXITING BIT(1) ALIGNED,
  121       /* Set if we are in the process of exiting */
  122            2 SEMIPERM BIT(1) ALIGNED,
  123       /* Set if this is a semi-permanent TPAP */
  124            2 PERM BIT(1) ALIGNED,
  125       /* Set if this is a permanent TPAP */
  126            2 NOW BIT(1) ALIGNED,
  127       /* Set if NOW option is present in TRANS command */
  128            2 TIMEOUT UBIN WORD,
  129       /* Set if the TIMEOUT parameter was passed and is > 0 */
  130            2 SKIP_ERRS BIT(1) ALIGNED,
  131       /* Set if the user specified NOERR=YES on M$YC PMME */
  132            2 * (0:46) UBIN WORD;
  133       /* Spares */
  134      %MEND;

