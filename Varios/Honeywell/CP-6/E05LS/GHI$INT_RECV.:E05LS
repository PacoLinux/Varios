VERSION E05

CALF.D00    GHI$INT_RECV - Process various monitor interrupts                   TUE JUL 29 '97 21:34 Page:2
                                     1  *M*  Receivers for various monitor interrupts
                                     2  *T***********************************************************
                                     3  *T*                                                         *
                                     4  *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5  *T*                                                         *
                                     6  *T***********************************************************
                                     7  *P*  NAME: GHI$INT_RECV
                                     8  *,*  PURPOSE:  To process Real Time Clock, Watchdog Timer, standalone
                                     9  *,*            async transmitt and receive interrupts
                                    10  *
                                    12       OUNAME  GHI$INT_RECV
                                    13       ENTDEF  GHI$INT_RECV
                                    14  *
                                    15       ENTDEF  GHI$RTC_INT_SERV
                                    16       ENTDEF  GHI$SCHD_INT_SERV
                                    17       ENTDEF  GHI$IDL_INT_SERV
                                    18       ENTDEF  GHI$INTRET
                                    19       ENTDEF  GHI$SATYR_RCVINT
                                    20       ENTDEF  GHI$SATYR_TRNINT
                                    21       ENTDEF  GHI$WDT_INT_SERV
                                    22       ENTDEF  GHI$UTS
                                    23       ENTDEF  GHI$STRT_INTRVL
                                    24       ENTDEF  GHI$PFS_INT_SERV
                                    25       ENTDEF  GHI$TSAOV_INT_SERV
                                    26       ENTDEF  GHI$MAKE_TSA
                                    27       ENTDEF  GHI$DELU
                                    28       ENTDEF  GHI$TICS
                                    29       ENTDEF  GHI$TR_TICS
                                    30       ENTDEF  SCREECH
                                    31       ENTDEF  KHD$SCREECH
                                    32       ENTDEF  GHI$CIH_RECV
                                    33       ENTDEF  GHI$CIH_CLNUP
                                    34         ENTDEF  GHI$IDLE
                                    35  *
                                    36  *
                                    37       SYMREF  G$ASDT_MON$
CALF.D00    GHI$INT_RECV - Process various monitor interrupts                   TUE JUL 29 '97 21:34 Page:3
                                    38       SYMREF  G$ASDT_MCL$
                                    39         SYMREF  G_DIS
                                    40       SYMREF  GH_TRIG_SCHD
                                    41       SYMREF  G$TSTACKM$
                                    42       SYMREF  G$TSTACKU$
                                    43         SYMREF  G_EVX
                                    44         SYMREF  G_EVBUF#
                                    45         SYMREF  G$EVBUF$
                                    46         SYMDEF  G_EVBINT
                                    47  *
                                    48       ENTREF  GDA$RCVENT
                                    49       ENTREF  GDA$TRNENT
                                    50       ENTREF  GHR$RTC_MON
                                    51       ENTREF  GHR$RTC_USR
                                    52       ENTREF  GHQ$QEND
                                    53       ENTREF  GHS$XSCHD
                                    54       ENTREF  GHT$TRAP
                                    55      ENTREF    GIR$SCREECH
                                    56        ENTREF  GUD$ASD
                                    57         ENTREF  GUS$DELU
                                    58       INCLUDE GHI_INT_RECV_E
                                    59       INCLUDE G_L6ASM_E
                                    60  *
         000000(0)                  61       SECT    PROC
         000000(0)                  62  GHI$INT_RECV ALIGN
         000000(0)                  63  WDT_RETURN ALIGN
 00000   8FF8 0006 FFFF             64         RSTR,'FFFF'X G$ISA_REGS#-5,$IV
 00003   8E70 803F                  65         LEV     '803F'X,IMO

CALF.D00   GHI$WDT_INT_SERV - Handle Watchdog Timer Interrupts                  TUE JUL 29 '97 21:34 Page:4
                                    67  *
         000005(0)                  68  GHI$WDT_INT_SERV ALIGN
 00005   8F78 0006 FFFF             69         SAVE,'FFFF'X G$ISA_REGS#-5,$IV
 00008   9070 FF00                  70         MTM,M1  'FF00'X,IMO     Make sure we can branch.
 0000A   3C01                       71         LDV,R3  1               Find the interrupted ISA
 0000B   3E01                       72  SRHACT ADV,R3  1
 0000C   82B0 003020                73         LB      G_LOW_MEM_D+G_LM_LVL_ACT#,R3
 0000F   05FC                       74         BBF     SRHACT,SPREL
 00010   BCB0 003080                75         LDB,B3  G_LOW_MEM_D+G_LM_IV#,R3
                                    76  *
                                    77  *               Set up some parameters so Ken can use this code.
                                    78  *
 00013   4C3C                       79         LDV,R4  64-4            Let's make this a trap-4
 00014   EBC0 FFEA                  80         LAB,B6  WDT_RETURN-1,PREL
 00016   84D7                       81         SID     R7              Clear $A
 00017   CBF8 0000                  82         LAB,B4  0,$IV           Get I,R3,B3 from regs saved here
                                    83  *
                                    84  *               Sub-entry point for max-time.
                                    85  *
         000019(0)                  86  MAKE_TSA ALIGN
 00019   B843 0002                  87         LDR,R3  G$ISA_ISM2#-5,B3  If not saving, give it another tick.
 0001B   3815                       88         BLZ,R3  WDT_TRAP,SPREL
 0001C   8A80 003017                89         INC     G_LOW_MEM_D+G_LM_WDT_CURR#
 0001F   AB80 006000                90         LAB,B2  G_MHJIT_D
 00022   8AC2 0358                  91         INC     G$MHJIT_TICKS#,B2
 00024   A842 0358                  92         LDR,R2  G$MHJIT_TICKS#,B2    Unless we just did that.
 00026   AA42 0357                  93         ADD,R2  G$MHJIT_UTS#+1,B2
 00028   AE78 0000                  94         SWR,R2  G$ISA_DEV#-5,$IV
 0002A   2E01                       95         ADV,R2  1
 0002B   A978 0000                  96         CMR,R2  G$ISA_DEV#-5,$IV
 0002D   09D3                       97         BNE     WDT_RETURN,SPREL
 0002E   B470 8000                  98         OR,R3   '8000'X,IMO
                                    99  *
                                   100  *                Ok, let's make it look like a trap.
                                   101  *
         000030(0)                 102  WDT_TRAP ALIGN
CALF.D00   GHI$WDT_INT_SERV - Handle Watchdog Timer Interrupts                  TUE JUL 29 '97 21:34 Page:5
 00030   306B                      103         SAR,R3  11              Compute NATSAP.
 00031   8253                      104         NEG     R3
 00032   9BB0 003000               105         LAB,B1  G_LOW_MEM_D,R3  MMU bit was set, so 0=16, 1=14, etc.
 00035   AC89                      106         LDB,B2  *,B1            Get the flink
 00036   AE81                      107         SWB,B2  ,B1             Pull the next one.
 00037   9CC3 FFFE                 108         LDB,B1  -2,B3           Link into ISA chain.
 00039   9F82                      109         STB,B1  ,B2
 0003A   AFC3 FFFE                 110         STB,B2  -2,B3
                                   111  *
                                   112  *                Now we've got a TSA, lets put some stuff in it.
                                   113  *
 0003C   9B80 000000(6)e           114         LAB,B1  GHT$TRAP
 0003F   9EC3 0003                 115         SWB,B1  G$ISA_P$#-5,B3
 00041   9FC2 0008                 116         STB,B1  G$TSA_P$#,B2
 00043   9870 6000                 117         LDR,R1  '6000'X,IMO     Run GHT$TRAP in RING0.
 00045   8742 0005                 118         CL      G$TSA_Z#,B2
 00047   9E43 0005                 119         SWR,R1  G$ISA_S#-5,B3
 00049   1057                      120         SCR,R1  7
 0004A   9AC2 0005 00C0            121         SRM,R1,'C0'X G$TSA_Z#,B2
 0004D   8D42 0006                 122         SDI     G$TSA_A$#,B2    Set A$
 0004F   9844 0014                 123         LDR,R1  G$ISA_REGS_I#-5,B4
 00051   4008                      124         SOL,R4  8
 00052   CAD1 FF00                 125         SRM,R4,'FF00'X R1       Set trap# (neg offset from 64)
 00054   9F42 0002                 126         STR,R1  G$TSA_I#,B2
 00056   9BC2 0006                 127         LAB,B1  G$TSA_A$#,B2
 00058   9EC4 000E                 128         SWB,B1  G$ISA_REGS_B3$#-5,B4
 0005A   9FC2 000A                 129         STB,B1  G$TSA_B3$#,B2
 0005C   9844 0019                 130         LDR,R1  G$ISA_REGS_R3#-5,B4
 0005E   9F42 0003                 131         STR,R1  G$TSA_R3#,B2
 00060   C3C6 0001                 132         LNJ,B4  1,B6

CALF.D00   GHI$PFS_INT_SERV - Power fail safe service.                          TUE JUL 29 '97 21:34 Page:6
                                   134  *
         000062(0)                 135  GHI$PFS_INT_SERV ALIGN
                                   136  *
 00062   DE78 0000                 137         SWR,R5  0,$IV              Check interrupter.
 00064   5981 0002                 138         BNEZ,R5 IGNORE_IT,PREL    Ignore if real - we'll errlog it lat
                                      ::er
 00066   0002                      139         DATA    2                  Screech if software did it.
         000067(0)                 140  IGNORE_IT ALIGN
 00067   DE78 0000                 141         SWR,R5  0,$IV              Restore R5 and DEV word.
 00069   8E70 803F                 142         LEV     '803F'X,IMO        Ignore it.
 0006B   0FF7                      143         B       GHI$PFS_INT_SERV,SPREL

CALF.D00   GHI$TSAOV_INT_SERV - Ran-out-of-TSAs interrupt.                      TUE JUL 29 '97 21:34 Page:7
                                   145  *
         00006C(0)                 146  GHI$TSAOV_INT_SERV ALIGN
                                   147  *
                                   148  *                If we get here, we're in real trouble, since we can'
                                      ::t trap.
                                   149  *                So, we'll just tool off to GIR$SCREECH,
                                   150  *                And hope for the best.
                                   151  *
 0006C   BBF8 FFFE                 152         LAB,B3  -2,$IV
 0006E   CBF0 0100                 153         LAB,B4  '0100'X,IMO
 00070   E380 000000(7)e           154         LNJ,B6  GIR$SCREECH

CALF.D00   GHI$MAKE_TSA - Entry for max-time and events                         TUE JUL 29 '97 21:34 Page:8
                                   156  *
                                   157  *    CALL GHI$MAKE_TSA (trap#, what-to-put-in-A$);
                                   158  *        Attaches the NATSAP TSA to G_UHJIT.ISA_USR,
                                   159  *        stuffing the parameters therein.
                                   160  *
         000073(0)                 161  GHI$MAKE_TSA ALIGN
                                   162  *
 00073   4C40                      163         LDV,R4  64
 00074   C20B                      164         SUB,R4  *,B3
 00075   8CCB 0002                 165         LDI     *2,B3
 00077   BB80 005081               166         LAB,B3  G_UHJIT_D+G$HHJIT_ISA_HND_DEV#
 0007A   CCD3                      167         LDB,B4  B3              Get I,R3,B3 from interrupted ISA
 0007B   83C0 FF9D                 168         JMP     MAKE_TSA,PREL

CALF.D00   SCREECH - Make screech a trap-0 with A$->VLP_SCODE                   TUE JUL 29 '97 21:34 Page:9
                                   170  *
                                   171  *    CALL SCREECH (VLP_SCODE) ALTRET(for sua cleanup);
                                   172  *        Makes a TSA with TRAP#=0, A$=pointer to the VLP_SCODE,
                                   173  *        B3->VLP_SCODE, and R3=altret displacement.  Altreturns if
                                   174  *        specified and SUA.  Returns only if SNAP or GO in XDELTA.
                                   175  *
         00007D(0)                 176  KHD$SCREECH ALIGN
         00007D(0)                 177  SCREECH ALIGN
                                   178  *
 0007D   8A80 006083               179         INC     G_MHJIT_D+G$MHJIT_ISA_IDLE#+7  Turn off the interrupts
 00080   B806                      180         LDR,R3  ,B6             Altret displacement.
 00081   8F78 0006 FFFF            181         SAVE,'FFFF'X G$ISA_REGS#-5,$IV
 00084   4C40                      182         LDV,R4  64              Trap 0
 00085   8C83                      183         LDI     ,B3             PTR to VLP_SCODE in A$
 00086   BBF8 0000                 184         LAB,B3  0,$IV           Current ISA
 00088   CCD3                      185         LDB,B4  B3              Get I,R3,B3 from current ISA
 00089   EFC3 0003                 186         STB,B6  G$ISA_P$#-5,B3
 0008B   8C43 0005                 187         STS     G$ISA_S#-5,B3
 0008D   E3C0 FF8B                 188         LNJ,B6  MAKE_TSA,PREL
 0008F   0001                      189         DATA    1
 00090   8FF8 0006 FFFF            190         RSTR,'FFFF'X G$ISA_REGS#-5,$IV
 00093   BCF8 FFFE                 191         LDB,B3  -2,$IV
 00095   BBC3 0006                 192         LAB,B3  6,B3
 00097   8380 000000(6)e           193         JMP     GHT$TRAP

CALF.D00   GHI$UTS - Compute the current UTS value.                             TUE JUL 29 '97 21:34 Page:10
                                   195  *
                                   196  *    CALL GHI$UTS (UTS);
                                   197  *        Returns UTS = Current value of UTS (UBIN(32))
                                   198  *        UTS is current date and time in .133333 sec units.
                                   199  *
         00009A(0)                 200  GHI$UTS ALIGN
                                   201  *
                                   202  *
                                   203  *
 0009A   AB80 000000               204         LAB,B2  0
 0009D   F842 6359                 205         LDR,R7  G_MHJIT_D+G$MHJIT_WDT_INIT#,B2
 0009F   F242 3017                 206         SUB,R7  G_LOW_MEM_D+G_LM_WDT_CURR#,B2 Current WDT value
 000A1   FA42 6358                 207         ADD,R7  G_MHJIT_D+G$MHJIT_TICKS#,B2
 000A3   7E08                      208         ADV,R7  8
 000A4   7044                      209         SOR,R7  4               UTS is .13333 seconds
 000A5   6C00                      210         LDV,R6  0
 000A6   8442 6356                 211         AID     G_MHJIT_D+G$MHJIT_UTS#,B2
 000A8   8D0B                      212         SDI     *,B3
 000A9   83C6 0001                 213         JMP     1,B6
                                   214  *

CALF.D00   GHI$TICS - Compute the current UTStics value.                        TUE JUL 29 '97 21:34 Page:11
                                   216  *
                                   217  *    CALL GHI$TICS (TICS);
                                   218  *        Returns TICS = Current value of TICS (UBIN(32))
                                   219  *        TICS is current date and time in 1/120 sec units.
                                   220  *
                                   221  *
                                   222  *    CALL GHI$TR_TICS (TICS-RTN);
                                   223  *        Special entry for the transport trace routine.
                                   224  *        Returns TICS in words 0 and 1.
                                   225  *        Returns original calling address in words 3 and 4.
                                   226  *
         0000AB(0)                 227  GHI$TICS ALIGN
                                   228  *
                                   229  *
 000AB   BC83                      230         LDB,B3  ,B3
                                   231  *
         0000AC(0)                 232  GHI$TICS1 ALIGN
 000AC   AB80 000000               233         LAB,B2  0
 000AF   D842 6359                 234         LDR,R5  G_MHJIT_D+G$MHJIT_WDT_INIT#,B2
 000B1   D242 3017                 235         SUB,R5  G_LOW_MEM_D+G_LM_WDT_CURR#,B2 Current WDT value
 000B3   DA42 6358                 236         ADD,R5  G_MHJIT_D+G$MHJIT_TICKS#,B2
 000B5   8CC2 6356                 237         LDI     G_MHJIT_D+G$MHJIT_UTS#,B2
 000B7   7084                      238         DOL,R7  4
 000B8   FA55                      239         ADD,R7  R5
 000B9   8ED6                      240         CAD     R6
 000BA   8D03                      241         SDI     ,B3
 000BB   83C6 0001                 242         JMP     1,B6
                                   243  *
                                   244  *
                                   245  *
                                   246  *
         0000BD(0)                 247  GHI$TR_TICS ALIGN
 000BD   BC83                      248         LDB,B3  ,B3
 000BE   8C87                      249         LDI     ,B7
 000BF   8D43 0003                 250         SDI     3,B3
 000C1   0F81 FFEA                 251         B       GHI$TICS1,PREL
CALF.D00   GHI$TICS - Compute the current UTStics value.                        TUE JUL 29 '97 21:34 Page:12
                                   252  *
                                   253  *

CALF.D00   GHI$STRT_INTRVL - Start timer interval                               TUE JUL 29 '97 21:34 Page:13
                                   255  *
                                   256  *    CALL GHI$STRT_INTRVL (ticks);
                                   257  *       Returns ticks = G$MHJIT_WDT_INIT-(WDTC current value).
                                   258  *       Sets WDTC to G$MHJIT_WDT_INIT
                                   259  *
         0000C3(0)                 260  GHI$STRT_INTRVL ALIGN
 000C3   AB80 000000               261         LAB,B2  0
 000C6   F842 6359                 262         LDR,R7  G_MHJIT_D+G$MHJIT_WDT_INIT#,B2     CALLED INHIBITED  *
                                      ::**
 000C8   E857                      263         LDR,R6  R7
 000C9   EE42 3017                 264         SWR,R6  G_LOW_MEM_D+G_LM_WDT_CURR#,B2    Get and set WDT
 000CB   F256                      265         SUB,R7  R6
 000CC   FF0B                      266         STR,R7  *,B3            Return time in previous interval
 000CD   FA42 6358                 267         ADD,R7  G_MHJIT_D+G$MHJIT_TICKS#,B2    Update time since UTS
 000CF   FF42 6358                 268         STR,R7  G_MHJIT_D+G$MHJIT_TICKS#,B2
                                   269  *
         000004B0                  270  TIX    EQU     1200            Time to allow before updating UTS.
                                   271  *
 000D1   F970 04B0                 272         CMR,R7  TIX,IMO
 000D3   080B                      273         BAL     A1,SPREL        Return if in limits
 000D4   6C0F                      274         LDV,R6  15              Time to get a new UTS
 000D5   E557                      275         AND,R6  R7
 000D6   7044                      276         SOR,R7  4               UTS is .13333 seconds
 000D7   EF42 6358                 277         STR,R6  G_MHJIT_D+G$MHJIT_TICKS#,B2
 000D9   6C00                      278         LDV,R6  0
 000DA   8442 6356                 279         AID     G_MHJIT_D+G$MHJIT_UTS#,B2
 000DC   8D42 6356                 280         SDI     G_MHJIT_D+G$MHJIT_UTS#,B2
 000DE   83C6 0001                 281  A1     JMP     1,B6
                                   282  *
                                   283  *
                                   284  *

CALF.D00   GHI$RTC_INT_SERV - Handle Real Time Clock Interrupt                  TUE JUL 29 '97 21:34 Page:14
                                   286  *
                                   287  *
                                   288  *
         0000E0(0)                 289  GHI$RTC_INT_SERV ALIGN
 000E0   E380 000000(2)e           290         LNJ,B6  GHR$RTC_MON         Monitor portion of clock procedure
 000E3   001B                      291  A4     DATA    A2-A4          ALTRETs if not user running
 000E4   BB80 000000(1)s           292         LAB,B3  G$ASDT_MCL$
 000E7   E380 000000(8)e           293         LNJ,B6  GUD$ASD
 000EA   0001                      294         DATA    1
 000EB   9C80 000000(5)s           295         LDB,B1  G$TSTACKU$      Switch to user TSTACK
 000EE   0010 0010                 296         LDT     B1
 000F0   E380 000000(3)e           297         LNJ,B6  GHR$RTC_USR     User portion of clock procedure
 000F3   000E                      298  A3     DATA    A6-A3           ALTRETs if user to be parked.
 000F4   9C80 000000(0)s           299  A5     LDB,B1  G$ASDT_MON$
 000F7   9FF8 FFFB                 300         STB,B1  -5,$IV          Set RTC ASV$ back to monitor
 000F9   9C80 000000(4)s           301         LDB,B1  G$TSTACKM$       Switch back to monitor TSTACK
 000FC   0010 0010                 302         LDT     B1
 000FE   8E70 803F                 303  A2     LEV     '803F'X,IMO         Suspend
 00100   0FE0                      304         B       GHI$RTC_INT_SERV,SPREL
 00101   8E00 000000(3)s           305  A6     LEV     GH_TRIG_SCHD     Trigger Scheduler Interrupt
 00104   0FF0                      306         B       A5,SPREL
                                   307  *

CALF.D00   GHI$SCHD_INT_SERV - Handle Scheduler Interrupt                       TUE JUL 29 '97 21:34 Page:15
                                   309  *
         000105(0)                 310  GHI$SCHD_INT_SERV ALIGN
                                   311  *
 00105   E380 000000(5)e           312         LNJ,B6  GHS$XSCHD           Call the Execution Scheduler
 00108   0026                      313  C1     DATA    C5-C1           ALTRETs if no user to run
 00109   9C80 0030FE               314         LDB,B1  G_LOW_MEM_D+G_LM_IV#+126
 0010C   9CC1 FFFB                 315         LDB,B1  -5,B1
 0010E   9D80 000000(1)s           316         CMB,B1  G$ASDT_MCL$
 00111   0900 00012E(0)            317         BE      C5              Suspend if user in MCL
 00114   BB80 000000(1)s           318         LAB,B3  G$ASDT_MCL$
 00117   E380 000000(8)e           319         LNJ,B6  GUD$ASD
 0011A   0001                      320         DATA    1
 0011B   9C80 000000(5)s           321         LDB,B1  G$TSTACKU$      Switch to user TSTACK
 0011E   0010 0010                 322         LDT     B1
 00120   E380 000000(4)e           323         LNJ,B6  GHQ$QEND        inspect new user
 00123   000E                      324  C2     DATA    C6-C2           ALTRETs if user to be parked.
 00124   9C80 000000(0)s           325         LDB,B1  G$ASDT_MON$
 00127   9FF8 FFFB                 326         STB,B1  -5,$IV          Set ASV$ back to monitor
 00129   9C80 000000(4)s           327         LDB,B1  G$TSTACKM$       Switch back to monitor TSTACK
 0012C   0010 0010                 328         LDT     B1
 0012E   8E70 803F                 329  C5     LEV     '803F'X,IMO     Suspend to user or idle
 00130   0FD5                      330         B       GHI$SCHD_INT_SERV,SPREL
                                   331  *
 00131   BB80 000000(0)s           332  C6     LAB,B3  G$ASDT_MON$
 00134   E380 000000(8)e           333         LNJ,B6  GUD$ASD         Map back onto monitor
 00137   0001                      334         DATA    1
 00138   9C80 000000(4)s           335         LDB,B1  G$TSTACKM$       Switch back to monitor TSTACK
 0013B   0010 0010                 336         LDT     B1
 0013D   0FC8                      337         B       GHI$SCHD_INT_SERV,SPREL
                                   338  *
                                   339  *
                                   340  *

CALF.D00   GHI$DELU - Finish off deleted user                                   TUE JUL 29 '97 21:34 Page:16
                                   342  *
         00013E(0)                 343  GHI$DELU ALIGN
 0013E   BB80 000000(0)s           344        LAB,B3   G$ASDT_MON$
 00141   E380 000000(8)e           345        LNJ,B6   GUD$ASD        Map on to monitor
 00144   0001                      346        DATA     1
 00145   9C80 000000(4)s           347         LDB,B1  G$TSTACKM$      Get into monitor stack
 00148   0010 0010                 348         LDT     B1
 0014A   E380 000000(9)e           349         LNJ,B6  GUS$DELU        Let MM return segments
 0014D   0001                      350         DATA    1
 0014E   8880 000000(2)s           351         DEC     G_DIS           Count enables
 00151   8E00 000000(3)s           352         LEV     GH_TRIG_SCHD    Trigger execution scheduler level
 00154   8E70 803F                 353         LEV     '803F'X,IMO     Suspend to execution scheduler
                                   354  *
                                   355  *
                                   356  *
                                   357  *

CALF.D00   GHI$IDL_INT_SERV - Monitor Idle Procedure                            TUE JUL 29 '97 21:34 Page:17
                                   359  *
         000156(0)                 360  GHI$IDL_INT_SERV ALIGN
                                   361  *
 00156   8778 0001                 362         CL      1,$IV           Don't waste time saving context
 00158   8778 0002                 363         CL      2,$IV           Don't waste time saving context
         00015A(0)                 364  GHI$IDLE ALIGN
 0015A   0000                      365         HLT
 0015B   0FFF                      366         B       GHI$IDLE,SPREL
                                   367  *

CALF.D00   GHI$SATYR_RCVINT - Handle SATYR receive interrupts                   TUE JUL 29 '97 21:34 Page:18
                                   369  *
         00015C(0)                 370  GHI$SATYR_RCVINT ALIGN
 0015C   CBF0 0000                 371       LAB,B4    0,IMO
 0015E   E380 000000(0)e           372       LNJ,B6    GDA$RCVENT          Call the receive interrupt handler
 00161   0001                      373       DATA      1
 00162   8E70 803F                 374       LEV       '803F'X,IMO         Suspend
 00164   0FF8                      375       B         GHI$SATYR_RCVINT,SPREL
                                   376  *
                                   377  *

CALF.D00   GHI$SATYR_TRNINT - Handle SATYR transmitt interrupts                 TUE JUL 29 '97 21:34 Page:19
                                   379  *
         000165(0)                 380  GHI$SATYR_TRNINT ALIGN
 00165   CBF0 0000                 381       LAB,B4    0,IMO
 00167   E380 000000(1)e           382       LNJ,B6    GDA$TRNENT          Call the transmitt interrupt hand
 0016A   0001                      383       DATA      1
 0016B   8E70 803F                 384       LEV       '803F'X,IMO         Suspend
 0016D   0FF8                      385       B         GHI$SATYR_TRNINT,SPREL
                                   386  *

CALF.D00   GHI$CIH_RECV - Common interrupt handler                              TUE JUL 29 '97 21:34 Page:20
                                   388  *
                                   389  *F* NAME: GHI$CIH_RECV
                                   390  *F* DESCRIPTION: Handler for all other interrupts.
                                   391  *F*           All mini-ISAs in MHJIT for levels 12-59 point here.
                                   392  *F*           Here we decide what to do when one of them happens.
                                   393  *F* ENTRY: GHI$CIH_CLNUP
                                   394  *F*           Entered from the M$INTRET service to finish up the job.
         00005000                  395  G_UHJIT_D EQU '5000'X
         00006000                  396  G_MHJIT_D EQU '6000'X
         00003000                  397  G_LOW_MEM_D EQU '3000'X
         00001000                  398  G$INTCON_RUNNING#M EQU '1000'X
         00000800                  399  G$INTCON_CLEANUP#M EQU '0800'X
         00000400                  400  G$INTCON_RUNONLY#M EQU '0400'X
         00008000                  401  G$INTCON_ALLOCATED#M EQU '8000'X
         00004000                  402  G$INTCON_PRIVILEGED#M EQU '4000'X
         00000010                  403  G$INTCON_SIZE## EQU 16
         00000002                  404  G$INTCON_TIMER# EQU 2
                                   405  *
         00016E(0)                 406  GHI$CIH_CLNUP ALIGN
                                   407  *
                                   408  *             First empty TSTACK
                                   409  *
 0016E   0010 0007                 410      RLQ       B7
 00170   0010 0007                 411      RLQ       B7
 00172   0010 0007                 412      RLQ       B7
                                   413  *
         000174(0)                 414  GHI$INTRET    ALIGN   WORD        Entry for FPTless M$INTRET from GHT
                                   415  *
 00174   9B80 00300C               416      LAB,B1    G_LOW_MEM_D+G_LM_NATSAP2$#
 00177   BBF8 0000                 417      LAB,B3    0,$IV               Then, put the TSA back (no RTT here
                                      ::).
 00179   EB80 000000               418      LAB,B6    0
 0017C   EEC3 FFFE                 419      SWB,B6    -2,B3
 0017E   EE81                      420      SWB,B6    ,B1
 0017F   EF89                      421      STB,B6    *,B1
                                   422  *
CALF.D00   GHI$CIH_RECV - Common interrupt handler                              TUE JUL 29 '97 21:34 Page:21
                                   423  *             Now to find the INTCON entry
                                   424  *
 00180   3C3F                      425      LDV,R3    63
 00181   B503                      426      AND,R3    ,B3                Get cleanup level from ISA.
 00182   9BC1 0074                 427      LAB,B1    G_LM_IV#-G_LM_NATSAP2$#,B1
                                   428  *
                                   429  *             Get to the cleanup level, to clear all the imtermediate
                                      :: ones.
                                   430  *
 00184   BEB1                      431      SWB,B3    ,B1,R3              Make the changes fast(er).
         000185(0)                 432  LEV_TO_CLNUP  ALIGN
 00185   8E70 803F                 433      LEV       '803F'X,IMO
 00187   8C52                      434      STS       R2
 00188   A570 003F                 435      AND,R2    '003F'X,IMO
 0018A   A953                      436      CMR,R2    R3
 0018B   09FA                      437      BNE       LEV_TO_CLNUP,SPREL
 0018C   8E70 8084                 438      LEV       '8080'X+G_IL_INHIBIT#,IMO
 0018E   BFB1                      439      STB,B3    ,B1,R3
                                   440  *
                                   441  *             Change ISAs to the cleanup one.
                                   442  *
 0018F   BFC1 0008                 443      STB,B3    G_IL_INHIBIT#*2,B1
                                   444  *
                                   445  *             Restore the user stack pointer.
                                   446  *
 00191   FC80 0050EB               447      LDB,B7    G_UHJIT_D+G$HHJIT_TSA_HND_ISA#+G$ISA_REGS_T$#
 00194   0010 0070                 448      LDT       B7
 00196   CBC3 FFFB                 449      LAB,B4    -5,B3
 00198   0F8F                      450      B         CIC0,SPREL
         000199(0)                 451  CIH_IGNORE ALIGN
 00199   82D4 0800                 452      LB,G$INTCON_CLEANUP#M R4
 0019B   0581 0057                 453      BBF       CIH_RETURN,PREL     Spurrious interrupt.
 0019D   9B80 003080               454      LAB,B1    G_LOW_MEM_D+G_LM_IV#
 001A0   BBC4 0005                 455      LAB,B3    5,B4                Make an ISA pointer of it.
 001A2   B841 0009                 456      LDR,R3    G_IL_INHIBIT#*2+1,B1
 001A4   B270 629C                 457      SUB,R3    G$MHJIT_INTCON#-16*12+G_MHJIT_D,IMO
CALF.D00   GHI$CIH_RECV - Common interrupt handler                              TUE JUL 29 '97 21:34 Page:22
 001A6   3044                      458      SOR,R3    4
         0001A7(0)                 459  CIC0 ALIGN
 001A7   A853                      460      LDR,R2    R3
         0001A8(0)                 461  CIC1 ALIGN
 001A8   BBC3 FFF0                 462      LAB,B3    -G$INTCON_SIZE##,B3
 001AA   3EFF                      463      ADV,R3    -1
 001AB   BDB1                      464      CMB,B3    ,B1,R3
 001AC   0902                      465      BE        CIC2,SPREL
 001AD   BFB1                      466      STB,B3    ,B1,R3
         0001AE(0)                 467  CIC2 ALIGN
 001AE   3D0C                      468      CMV,R3    12
 001AF   0A79                      469      BAG       CIC1,SPREL
 001B0   8844 000F 0800            470      LBF,G$INTCON_CLEANUP#M G$INTCON_CLEANUP#,B4
 001B3   8844 000F 1000            471      LBF,G$INTCON_RUNNING#M G$INTCON_RUNNING#,B4
 001B6   058C                      472      BBF       CIC3,SPREL
 001B7   9870 4000                 473      LDR,R1    '4000'X,IMO
 001B9   9452                      474      OR,R1     R2
 001BA   8E51                      475      LEV       R1
 001BB   89C4 0005                 476      CMZ       G$INTCON_DEV#,B4    Have we handled this one yet?
 001BD   0985                      477      BNE       CIC3,SPREL          No, we would have zapped this if so
                                      ::.
 001BE   DB80 005081               478      LAB,B5    G_UHJIT_D+G$HHJIT_ISA_HND_DEV#
 001C1   DFA1                      479      STB,B5    ,B1,R2
         0001C2(0)                 480  CIC3 ALIGN
 001C2   DB80 005000               481      LAB,B5    G_UHJIT_D           Map in the UHJIT page and restore
 001C5   0010 0000                 482      STT                           /* NATSAP, saving the stack reg.
 001C7   FEC5 00FD                 483      SWB,B7    G$HHJIT_NATSAP$#,B5 NATSAP2$
 001C9   FFC1 FF8C                 484      STB,B7    G_LM_NATSAP2$#-G_LM_IV#,B1
 001CB   E844 0002                 485      LDR,R6    G$INTCON_TIMER#,B4  Restore timer items
 001CD   EAC5 1355 0007            486      SRM,R6,7  G$MHJIT_INTRVL_TYPE#+G_MHJIT_D-G_UHJIT_D,B5
 001D0   6063                      487      SAR,R6    3
 001D1   F856                      488      LDR,R7    R6
 001D2   EE41 FF97                 489      SWR,R6    G_LM_WDT_CURR#-G_LM_IV#,B1
 001D4   FA45 1358                 490      ADD,R7    G$MHJIT_TICKS#+G_MHJIT_D-G_UHJIT_D,B5
 001D6   F256                      491      SUB,R7    R6
 001D7   FF45 1358                 492      STR,R7    G$MHJIT_TICKS#+G_MHJIT_D-G_UHJIT_D,B5
CALF.D00   GHI$CIH_RECV - Common interrupt handler                              TUE JUL 29 '97 21:34 Page:23
 001D9   F845 1359                 493      LDR,R7    G$MHJIT_WDT_INIT#+G_MHJIT_D-G_UHJIT_D,B5
 001DB   F256                      494      SUB,R7    R6
 001DC   CBC5 C0A5                 495      LAB,B4    G_ROS_JIT#+G$JIT_XTIME#-G_UHJIT_D+1,B5
 001DE   82C5 007E 0004            496      LB,4      G$HHJIT_DMN_ID#,B5  STIME if from M$INTRET.
 001E1   0503                      497      BBT       CIC6,SPREL
 001E2   CBC4 0002                 498      LAB,B4    G$JIT_STIME#-G$JIT_XTIME#,B4
         0001E4(0)                 499  CIC6 ALIGN
 001E4   FA04                      500      ADD,R7    ,B4
 001E5   FF04                      501      STR,R7    ,B4
 001E6   8EC4 FFFF                 502      CAD       -1,B4
 001E8   E845 00FF                 503      LDR,R6    G$HHJIT_HJITPAGE#,B5
 001EA   7C00                      504      LDV,R7    0
         0000100A                  505  G_MHJIT_UHJITPAGE# EQU G_UHJIT_D/'800'X+G_MHJIT_D-G_UHJIT_D
 001EB   EF45 100A                 506      STR,R6    G$MHJIT_ASDT_MON#+G_MHJIT_UHJITPAGE#,B5 Keep MHJIT righ
                                      ::t.
 001ED   000A                      507      ASD
 001EE   EE57                      508      SWR,R6    R7
 001EF   89C0 0098                 509      CMZ       G_EVBINT,PREL
 001F1   0981 0076                 510      BNE       CIH9,PREL
         0001F3(0)                 511  CIH_RETURN ALIGN
 001F3   8E70 803F                 512      LEV       '803F'X,IMO
         0001F5(0)                 513  GHI$CIH_RECV ALIGN
 001F5   8E70 8084                 514      LEV       '8080'X+G_IL_INHIBIT#,IMO
 001F7   9070 FF00                 515      MTM,M1    'FF00'X,IMO         Make sure we can branch.
 001F9   CBF8 FFFB                 516      LAB,B4    -5,$IV              Pointer to G$INTCON for interrupter
                                      ::.
 001FB   C844 000F                 517      LDR,R4    G$INTCON_RUNNING#,B4
 001FD   C570 9C00                 518      AND,R4    G$INTCON_RUNNING#M|G$INTCON_CLEANUP#M|;
                                   519                G$INTCON_RUNONLY#M|G$INTCON_ALLOCATED#M,IMO
 001FF   C970 8000                 520      CMR,R4    G$INTCON_ALLOCATED#M,IMO
 00201   0981 FF97                 521      BNE       CIH_IGNORE,PREL
 00203   DB80 005000               522      LAB,B5    G_UHJIT_D
 00206   89C5 1083                 523      CMZ       G_MHJIT_D-G_UHJIT_D+G$MHJIT_ISA_IDLE#+7,B5
 00208   036B                      524      BG        CIH_RETURN,SPREL    Interrupts are disabled due to scre
                                      ::ech.
 00209   D845 100A                 525      LDR,R5    G$MHJIT_ASDT_MON#+G_MHJIT_UHJITPAGE#,B5 Save the HJIT p
CALF.D00   GHI$CIH_RECV - Common interrupt handler                              TUE JUL 29 '97 21:34 Page:24
                                      ::age#.
 0020B   E844 000B                 526      LDR,R6    G$INTCON_HHJIT#,B4  Map the new user's HHJIT.
                                   527  *   LLH,R7    G_UHJIT_D/'800'X+1,B5 Get UHJITseg protections.
 0020D   7C00                      528      LDV,R7    0                   One page.
 0020E   EF45 100A                 529      STR,R6    G$MHJIT_ASDT_MON#+G_MHJIT_UHJITPAGE#,B5 Fix up MHJIT.
 00210   000A                      530      ASD
 00211   DF45 00FF                 531      STR,R5    G$HHJIT_HJITPAGE#,B5
 00213   9BC5 E000                 532      LAB,B1    G_LOW_MEM_D-G_UHJIT_D,B5 Save NATSAP2$, too.
 00215   5C06                      533      LDV,R5    G_DMN_INT#          Set "interrupt running".
 00216   DF45 007E                 534      STR,R5    G$HHJIT_DMN_ID#,B5
 00218   F845 1359                 535      LDR,R7    G$MHJIT_WDT_INIT#+G_MHJIT_D-G_UHJIT_D,B5
 0021A   D857                      536      LDR,R5    R7
 0021B   DE41 0017                 537      SWR,R5    G_LM_WDT_CURR#,B1   And the timer info.
 0021D   E855                      538      LDR,R6    R5
 0021E   6003                      539      SOL,R6    3
 0021F   EA45 1355                 540      ADD,R6    G$MHJIT_INTRVL_TYPE#+G_MHJIT_D-G_UHJIT_D,B5
 00221   8745 1355                 541      CL        G$MHJIT_INTRVL_TYPE#+G_MHJIT_D-G_UHJIT_D,B5
                                   542  *   STR,R6    G$INTCON_TIMER#,?   Save in cleanup ISA later.
 00223   F255                      543      SUB,R7    R5
 00224   FA45 1358                 544      ADD,R7    G$MHJIT_TICKS#+G_MHJIT_D-G_UHJIT_D,B5
 00226   FF45 1358                 545      STR,R7    G$MHJIT_TICKS#+G_MHJIT_D-G_UHJIT_D,B5
 00228   ABC5 00B6                 546      LAB,B2    G$HHJIT_TSA_HND#,B5
 0022A   AEC1 000C                 547      SWB,B2    G_LM_NATSAP2$#,B1
 0022C   AFC5 00FD                 548      STB,B2    G$HHJIT_NATSAP$#,B5
                                   549  *   LDT       B2
 0022E   ACC5 00EB                 550      LDB,B2    G$HHJIT_TSA_HND_ISA#+G$ISA_REGS_T$#,B5
 00230   AFC5 00A4                 551      STB,B2    G$HHJIT_ISA_HND#+G$ISA_REGS_T$#,B5
 00232   ABC1 0080                 552      LAB,B2    G_LM_IV#,B1         Now play with the ISA ptrs some.
 00234   BBC5 0081                 553      LAB,B3    G$HHJIT_ISA_HND_DEV#,B5
 00236   3C3F                      554      LDV,R3    63
 00237   B544 000C                 555      AND,R3    G$INTCON_RUNLEVEL#,B4 Get run level.
 00239   BFB2                      556      STB,B3    ,B2,R3
 0023A   3E01                      557      ADV,R3    1
 0023B   7C00                      558      LDV,R7    0                   Clear DEV so we know weve been here
                                      ::.
 0023C   FE44 0005                 559      SWR,R7    G$INTCON_DEV#,B4    Copy the DEV word.
CALF.D00   GHI$CIH_RECV - Common interrupt handler                              TUE JUL 29 '97 21:34 Page:25
 0023E   A853                      560      LDR,R2    R3
 0023F   FAD2 FFC0                 561      SRM,R7,'FFC0'X R2             Put Cleanup level there for cleanup
                                      ::.
 00241   AF03                      562      STR,R2    ,B3
 00242   A257                      563      SUB,R2    R7                  Now compute G$INTCON adr for RUNLVL
                                      ::.
 00243   2024                      564      SAL,R2    4                   G$INTCON must be 16 words.
 00244   2E05                      565      ADV,R2    5                   Make it the ISA addr.
 00245   EBA4                      566      LAB,B6    ,B4,R2
 00246   EF46 FFFD                 567      STR,R6    G$INTCON_TIMER#-G$INTCON_DEV#,B6 FInally get to store i
                                      ::t
 00248   EFB2                      568      STB,B6    ,B2,R3              Catch the next one
 00249   9BC1 0020                 569      LAB,B1    G_LM_LVL_ACT#,B1
 0024B   82B1                      570      LB        ,B1,R3              Remembering if it was running
 0024C   B470 4000                 571      OR,R3     '4000'X,IMO         Trigger both levels...
 0024E   8E53                      572      LEV       R3                  Cleanup ...
 0024F   3EFF                      573      ADV,R3    -1                  and ...
 00250   8E53                      574      LEV       R3                  Runlevel.
 00251   8A46 000A 1000            575      LBS,G$INTCON_RUNNING#M G$INTCON_RUNNING#-5,B6 Rerun it if active.
 00254   8946 000A 0800            576      LBT,G$INTCON_CLEANUP#M G$INTCON_CLEANUP#-5,B6
 00257   9CC4 000D                 577      LDB,B1    G$INTCON_IENTRY#,B4
 00259   C844 000F                 578      LDR,R4    G$INTCON_PRIVILEGED#,B4
 0025B   C570 4000                 579      AND,R4    G$INTCON_PRIVILEGED#M,IMO Conveniently in the right pla
                                      ::ce.
                                   580  *   LAB,B6    CIH8,PREL
 0025D   9FC3 0003                 581      STB,B1    G$ISA_P$#-G$ISA_DEV#,B3
                                   582  *   LDR,R4    '4000'X,IMO         Ring 1.
 0025F   CF43 0005                 583      STR,R4    G$ISA_S#-G$ISA_DEV#,B3
                                   584  *   LDI       G$ISA_ISM1#-G$ISA_DEV#,B3
                                   585  *   CL        G$ISA_ISM1#-G$ISA_DEV#,B3
                                   586  *   LDR,R4    'A000'X,IMO
                                   587  *   STR,R4    G$ISA_ISM2#-G$ISA_DEV#,B3
 00261   DFC3 FFFB                 588      STB,B5    -G$ISA_DEV#,B3
 00263   89C0 0024                 589      CMZ       G_EVBINT,PREL
 00265   0901 FF8D                 590      BE        CIH_RETURN,PREL
 00267   6C01                      591      LDV,R6    1
CALF.D00   GHI$CIH_RECV - Common interrupt handler                              TUE JUL 29 '97 21:34 Page:26
         000268(0)                 592  CIH9 ALIGN
 00268   EBC0 FF89                 593      LAB,B6    CIH_RETURN-1,PREL   Set return address from GHI$TICS
 0026A   B800 000000(6)s           594      LDR,R3    G_EVX
 0026D   8A80 000000(6)s           595      INC       G_EVX
 00270   B900 000000(7)s           596      CMR,R3    G_EVBUF#
 00273   0204                      597      BL        CIH8,SPREL
 00274   8700 000000(6)s           598      CL        G_EVX
         000277(0)                 599  CIH8 ALIGN
 00277   3002                      600      SOL,R3    2
 00278   DB80 000000(8)s           601      LAB,B5    G$EVBUF$
 0027B   9805                      602      LDR,R1    ,B5                 Get index into ASDT list.
 0027C   DC85                      603      LDB,B5    ,B5                 Segment address to map in
 0027D   8D53                      604      SDI       R3
 0027E   8C90 00601E               605      LDI       G_MHJIT_D+15*2,R1
 00281   000A                      606      ASD
 00282   8CD3                      607      LDI       R3
 00283   8D03                      608      SDI       ,B3
 00284   BBC3 0002                 609      LAB,B3    2,B3
 00286   0F81 FE25                 610      B         GHI$TICS1,PREL
                                   611  *
 00288   0000                      612  G_EVBINT DATA 0
                                   613  *
                                   614  *CIH8 ALIGN
                                   615  *   SDI       G$ISA_ISM1#-G$ISA_DEV#,B3
                                   616  *   LEV       G$INTCON_RUNLEVEL#,B4
                                   617  *   LB,G$INTCON_PRIVILEGED#M G$INTCON_PRIVILEGED#,B4
                                   618  *   BBT       CIH9,SPREL
                                   619  *   ENT       ,B1
                                   620  *CIH9 ALIGN
                                   621  *   JMP       ,B1
                                   622       END
      No Errors in this assembly.
