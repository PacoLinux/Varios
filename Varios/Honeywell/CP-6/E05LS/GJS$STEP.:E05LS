VERSION E05

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:1    
        1        1        /*M* GJS$STEP   Associate a processor or fetch a program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0,CRM=70   */
        8        8
        9        9        /*F*  NAME: GJS$STEP
       10       10
       11       11              PURPOSE:  To associate a run-unit with a user either by
       12       12                        mapping it from the shared file tables or reading
       13       13                        it from the host.
       14       14
       15       15        */
       16       16
       17       17        /*D*   NAME:  GJS$STEP
       18       18
       19       19               CALL:  CALL GJS$STEP
       20       20
       21       21                      Entered from GJM$MCL to process the user's M$LDTRC request.
       22       22
       23       23                      Also entered from GJM$MCL for a M$CPEXIT
       24       24                      monitor service request, when there is no FPT
       25       25                      specified on the request; i.e. when the request
       26       26                      was made in the monitor.
       27       27
       28       28               DESCRIPTION:
       29       29        */
       30       30
       31       31        GJS$STEP: PROC(GUD_PARAMS);
       32       32
       33       33
       34       34        %INCLUDE GH_HARDWARE_M;
       35      132        %INCLUDE GH_GATE_M;
       36      173        %INCLUDE GH_SCHD_M;
       37      317        %INCLUDE GJ_MSG_M;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:2    
       38      630        %INCLUDE GJ_MACROS_M;
       39     1103        %INCLUDE GM_MACRO_M;
       40     1585        %INCLUDE GU_MACROS_M;
       41     1744        %INCLUDE G_ROS_M;
       42     1826        %INCLUDE G_HJIT_M;
       43     1971        %INCLUDE G_JIT_M;
       44     2236        %INCLUDE G_SFILE_M;
       45     2296        %INCLUDE KL_MACRO_C;
       46     5648        %INCLUDE KL_AFCN_C;
       47     5749        %INCLUDE LCP_6;
       48     5940
       49     5941        %INCLUDE UD_ERRORS_C;
       50     5983        %INCLUDE FR_ERRORS_C;
       51     6014        %INCLUDE J_ERRORS_C;
       52     6101        %INCLUDE M_ERRORS_C;
       53     6165        %INCLUDE J_SCODE_C;
       54     6193        %INCLUDE UD_SCODE_C;
       55     6205        %INCLUDE OC_SUBS_C;
       56     6936        %INCLUDE GM_VIRTUAL_E;
       57     7146        %INCLUDE GH_SCHD_E;
       58     7242
       59     7243                                                /* Input parameter          */
       60     7244        %GUD_HAND_PARAMS (FPTN=GUD_PARAMS);
       61     7320                                                /* Auto Storage             */
       62     7321    1   DCL V_ VECTOR;
       63     7322    1   DCL FCN_MSG_ VECTOR;
       64     7323    1   DCL T$ PTR;
       65     7324    1   DCL G$MSG$ PTR;
       66     7325    1   DCL SEGS_64K UBIN;
       67     7326    1   DCL PGS_REMAINING UBIN;
       68     7327    1   DCL PSEUDO_NEEDED UBIN;
       69     7328    1   DCL I SBIN;
       70     7329    1   DCL IU REDEF I UBIN;
       71     7330    1   DCL USR_ROS_WDSZ UBIN;
       72     7331    1   DCL USR_ROS_PGSZ UBIN;
       73     7332    1   DCL EXTRA_ROS_PGSZ UBIN;
       74     7333    1   DCL UDCBNUM UBIN;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:3    
       75     7334    1   DCL DCBRES UBIN;
       76     7335    1   DCL TCBSZ UBIN;
       77     7336    1   DCL LAST_USR_DCB UBIN;
       78     7337    1   DCL PGSZ_USR UBIN;
       79     7338    1   DCL PGSZ_LIB_DATA UBIN;
       80     7339    1   DCL PGSZ_LIB_PROC UBIN;
       81     7340    1   DCL PGSZ_USR_DS1 UBIN;
       82     7341    1   DCL CUR_PGSZ UBIN;
       83     7342    1   DCL ASZ_USR UBIN;
       84     7343    1   DCL RELEASE_ON_ERROR BIT(1) ALIGNED;
       85     7344
       86     7345    1   DCL GMA_VP# UBIN;
       87     7346    1   DCL GMA_SEGX UBIN;
       88     7347    1   DCL GMA_#PGS UBIN;
       89     7348    1   DCL GMA_1ST UBIN;
       90     7349
       91     7350        %VLP_ERRCODE (FPTN=ERR,STCLASS=AUTO);
       92     7396
       93     7397        %GJ_SETFP_MSG (FPTN=SETFP_MSG,STCLASS=AUTO);
       94     7606        %GJ_ALIB_DATA (FPTN=ALIB_DATA,STCLASS=AUTO);
       95     7700
       96     7701
       97     7702        %GJ_FCN_MSG (FPTN=FCN_MSG,STCLASS=AUTO);
       98     7772
       99     7773        %GJ_SFILE_PARAMS (FPTN=SPROC_PARAMS,STCLASS=AUTO);
      100     7913        %GJ_SFILE_PARAMS (FPTN=SLIB_PARAMS,STCLASS=AUTO,GEN_EQUS=NO);
      101     8053
      102     8054        %GJ_READ_PARAMS (FPTN=RD_PARAMS,STCLASS=AUTO);
      103     8151
      104     8152        %GJ_GETPROC_PARAMS (FPTN=GP_PARAMS,STCLASS=AUTO);
      105     8197
      106     8198        %GM_CHKSZ_PARAMS (FPTN=CHKSZ);
      107     8292
      108     8293        %FPT_GLINEATTR(FPTN=GLINEATTR,VECTORS=NO,STCLASS=AUTO);
      109     8318        %VLP_LINEATTR(FPTN=LINEATTR,STCLASS=AUTO);
      110     8340
      111     8341                                                /* External Data            */
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:4    
      112     8342
      113     8343    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
      114     8344    1   DCL G$TSA_USR$ PTR SYMREF READONLY;
      115     8345    1   DCL G$TSTACKU$ PTR SYMREF;
      116     8346    1   DCL G$ROS$ PTR SYMREF READONLY;
      117     8347    1   DCL G$JIT$ PTR SYMREF READONLY;
      118     8348    1   DCL G$USRDS1$ PTR SYMREF READONLY;
      119     8349    1   DCL G$MHJIT$ PTR SYMREF READONLY;
      120     8350    1   DCL G$UHJIT$ PTR SYMREF READONLY;
      121     8351    1   DCL GJ_SFILE_START$ PTR SYMREF;
      122     8352
      123     8353    1   DCL GJ_QUIET UBIN SYMREF;
      124     8354    1   DCL GJ_ON_COUNT UBIN SYMREF;
      125     8355    1   DCL GJ_SABRT_COUNT UBIN SYMREF;
      126     8356    1   DCL GFR_PSUDO_NM(0:7) CHAR(8) SYMREF;
      127     8357    1   DCL GFR_PSUDO_MAX_SYS(0:7) SBIN SYMREF;
      128     8358    1   DCL GFR_PSUDO_CUR_SYS(0:7) SBIN SYMREF;
      129     8359    1   DCL GFR_PSUDO_MAX$(0:4) PTR SYMREF;
      130     8360    1   DCL GFR_PSUDO_CUR$(0:4) PTR SYMREF;
      131     8361    1   DCL GI_ENDBOOT EPTR SYMREF;
      132     8362    1   DCL G_BOOTTIME UBIN(32) SYMREF;
      133     8363    1   DCL GM_ASHUF UBIN SYMREF;
      134     8364    1   DCL GM_SHUF UBIN SYMREF;
      135     8365    1   DCL GM_STEP UBIN SYMREF;
      136     8366    1   DCL GM_REG_4_MEM UBIN SYMREF;
      137     8367    1   DCL GM_ROS_PGSZ UBIN SYMREF;
      138     8368    1   DCL GH_KEEPDELTA BIT(1) SYMREF;
      139     8369    1   DCL GJ_BOOTBASE UBIN(32) SYMREF;
      140     8370    1   DCL GJ_BOOTSIZE UBIN(32) SYMREF;
      141     8371    1   DCL GJ_BOOTCHAN  UBIN SYMREF;
      142     8372    1   DCL GJ_BOOT_HNDLRS  SBIN SYMREF;
      143     8373
      144     8374        %GATE (FPTN=GJ_BOOT_LOCK,STCLASS=SYMREF);
      145     8393        %GATE (FPTN=G_SLOCK,STCLASS=SYMREF);
      146     8412        %GATE (FPTN=GFR_RES_LOCK,STCLASS=SYMREF);
      147     8431        %GATE (FPTN=G_ASFGATE,STCLASS=SYMREF);
      148     8450
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:5    
      149     8451                                                /* Internal data            */
      150     8452
      151     8453        %KL_CWNAK (FPTN=CWNAK);
      152     8518        %KL_KEYMES (FPTN=KEYMES,STCLASS=AUTO,LAST=",",NPARMS=3);
      153     8657    1         2 SYSID UBIN UNAL,
      154     8658    1         2 ACCT CHAR(8) UNAL,
      155     8659    1         2 UNAME CHAR(12) UNAL;
      156     8660
      157     8661        %KL_KEYMES (FPTN=GJI_KEYMES_INIT,STCLASS="CONSTANT SYMDEF",LAST=";",NPARMS=3,
      158     8662             MSG#=OC_MSG_UON#,CNSFNC=OC_WR,
      159     8663             SIZE_INIT="2,8,12",TYPE_INIT="%KL_TYPE_BIN,%KL_TYPE_NORM*2");
      160     8802
      161     8803        %G$STATUS_REG (FPTN=USR_STATUS_REG,
      162     8804                       LEVEL=%G_IL_USER#,
      163     8805                       RING=G_R_USR#,
      164     8806                       STCLASS=CONSTANT);
      165     8827
      166     8828        %VLP_ERRCODE (FPTN=EALTRET,ERR#=%E$ALTRET,SEV=G_SEV_ERROR#,
      167     8829                         STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      168     8875
      169     8876        %VLP_ERRCODE (FPTN=ESUOUT,ERR#=%E$SUOUT,SEV=G_SEV_ERROR#,
      170     8877                         STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      171     8923
      172     8924        %VLP_ERRCODE (FPTN=EBSUNM,ERR#=%E$BSUNM,SEV=G_SEV_ERROR#,
      173     8925                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      174     8971
      175     8972        %VLP_ERRCODE (FPTN=EMEMLIMIT,ERR#=%E$MEMLIMIT,SEV=G_SEV_ERROR#,
      176     8973                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      177     9019
      178     9020        %VLP_ERRCODE (FPTN=EPHYS_MEMLIMIT,ERR#=%E$PHYS_MEMLIMIT,SEV=G_SEV_ERROR#,
      179     9021                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      180     9067
      181     9068        %VLP_ERRCODE (FPTN=ENO_START,ERR#=%E$NO_START,SEV=G_SEV_ERROR#,
      182     9069                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      183     9115
      184     9116        %VLP_ERRCODE (FPTN=EMMFAILED,ERR#=%E$MEMLIMIT,SEV=G_SEV_ABORT#,
      185     9117                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:6    
      186     9163
      187     9164        %VLP_ERRCODE (FPTN=ELIBSIZE,ERR#=%E$LIBSIZE,SEV=G_SEV_ABORT#,
      188     9165                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      189     9211
      190     9212        %VLP_ERRCODE (FPTN=EBADHEAD,ERR#=%E$BADHEAD,SEV=G_SEV_ABORT#,
      191     9213                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      192     9259
      193     9260        %VLP_SCODE (FPTN=SMING,ERR#=%S$MING,SEV=G_SEV_SCREECH#,
      194     9261                     STCLASS=CONSTANT,FCG=GJ,MID=I,MON='1'B);
      195     9322
      196     9323        %VLP_SCODE (FPTN=SDELUSR,ERR#=%S$DELUSR,SEV=G_SEV_SUA#,
      197     9324                     STCLASS=CONSTANT,FCG=GJ,MID=I,MON='1'B);
      198     9385
      199     9386        %VLP_SCODE (FPTN=SFCNCODE,ERR#=%S$BAD_LCP6_FCN,SEV=G_SEV_SUA#,
      200     9387                     STCLASS=CONSTANT,FCG=GJ,MID=I,MON='1'B);
      201     9448
      202     9449                                                /* BASED Structures         */
      203     9450    1   DCL G$CCBUF CHAR(GUD_PARAMS.BND.PAR5) BASED;
      204     9451    1   DCL G$PSUDO(0:7) SBIN BASED;
      205     9452    1   DCL 1 B$STARFILE BASED,
      206     9453    1         2 CNT UBIN BYTE UNAL,
      207     9454    1         2 TEXT CHAR(1) UNAL;
      208     9455        %G$ASDT (FPTN=G$ASDT_USR,STCLASS="BASED(G$ASDT_USR$)");
      209     9484        %G$ROS (FULL=YES,STCLASS="BASED(G$ROS$)");
      210    10435        %G$ROS_AVAIL_HDR (FPTN=G$ROS_EXT);
      211    10455        %G$DCBTABLE;
      212    10466        %G$MHJIT(STCLASS="BASED(G$MHJIT$)");
      213    17340        %G$UHJIT(STCLASS="BASED(G$UHJIT$)");
      214    20314        %G$JIT (STCLASS="BASED(G$JIT$)");
      215    20728        %G$STACK_HDR;
      216    20744    1   DCL 1 G$STACK_FRAME BASED ALIGNED,
      217    20745    1         2 WDS SBIN;
      218    20746        %G$TSA (STCLASS="BASED(G$TSA_USR$)");
      219    21134        %G$USER;
      220    21145        %G$EXCFR;
      221    21527        %G$NWIO;
      222    21937        %G$SFILE (FPTN=G$SFILE,STCLASS="BASED(GJ_SFILE_START$)");
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:7    
      223    21974        %M$DCB (DCBN=G$DCB,STCLASS=BASED);
      224    22025        %GJ_SETFP_MSG (FPTN=G$SETFP_MSG,STCLASS=BASED,BOOT=YES);
      225    22234        %GJ_SETFP_MSG (FPTN=G$SETFP,STCLASS=BASED,BOOT=NO);
      226    22443        %GJ_PROFILE_MSG (FPTN=G$PROFILE_MSG,STCLASS=BASED);
      227    22528
      228    22529
      229    22530                                                /*   External Procedures    */
      230    22531    1   DCL GDA$INIT_DONE ENTRY ALTRET;
      231    22532    1   DCL GHH$IO ENTRY(1) ALTRET;
      232    22533    1   DCL GHH$WDTF ENTRY;
      233    22534    1   DCL GHH$WDTN ENTRY;
      234    22535    1   DCL GHH$RTCN ENTRY;
      235    22536    1   DCL GHI$UTS ENTRY(1);
      236    22537    1   DCL GHS$REG ENTRY(2) ALTRET;
      237    22538    1   DCL GHS$RUE ENTRY(4) ALTRET;
      238    22539    1   DCL GIR$INITCHANS ENTRY(1);
      239    22540    1   DCL GIR$MLCPDUMP ENTRY;
      240    22541    1   DCL GJU$GET_DB ENTRY(2) ALTRET;
      241    22542    1   DCL GJU$GET_PROC ENTRY(1) ALTRET;
      242    22543    1   DCL GJS$ABORTM ENTRY(1);
      243    22544    1   DCL GJS$READ_RU ENTRY(1) ALTRET;
      244    22545    1   DCL GJS$RUND ENTRY(1);
      245    22546    1   DCL GJS$CLOSE_SHARED ENTRY(1) ALTRET;
      246    22547    1   DCL GJU$GET_DATA ENTRY(1) ALTRET;
      247    22548    1   DCL GJS$USRGO ENTRY;
      248    22549    1   DCL GJS$OPEN_SHARED ENTRY(1) ALTRET;
      249    22550    1   DCL GJS$REL_ALL ENTRY(1) ALTRET;
      250    22551    1   DCL GMA$CVM ENTRY(3) ALTRET;
      251    22552    1   DCL GMA$GET ENTRY(5) ALTRET;
      252    22553    1   DCL GMA$CHKSIZE ENTRY(1) ALTRET;
      253    22554    1   DCL GMA$REL_ACCTMEM ENTRY(1) ALTRET;
      254    22555    1   DCL KNA$READ ENTRY(4) ALTRET;
      255    22556    1   DCL KNA$WRITE ENTRY(4) ALTRET;
      256    22557    1   DCL KNA$CLOSE ENTRY(2) ALTRET;
      257    22558    1   DCL KNA$MCL ENTRY(1);
      258    22559    1   DCL KNA$OPEN ENTRY(4) ALTRET;
      259    22560    1   DCL KNB$GETRESP ENTRY(4) ALTRET;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:8    
      260    22561    1   DCL SCREECH ENTRY(1);
      261    22562
      262    22563                                                /* String Substitutions     */
      263    22564        %G$JIT_E;
      264    22626        %GJ_FCN#;
      265    22652        %GJ_SHARE#;
      266    22658
      267    22659        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:9    
      268    22660
      269    22661
      270    22662        /*   Initialize AUTO.
      271    22663        */
      272    22664    1      ERR = '0'B;
      273    22665    1      FCN_MSG_ = VECTOR(FCN_MSG);
      274    22666    1      G$MSG$ = ADDR(G$JIT.CCBUF);
      275    22667
      276    22668    1      RD_PARAMS.DCB# = %G_M$LM#;
      277    22669    1      GP_PARAMS.RD_PARAMS$ = ADDR(RD_PARAMS);
      278    22670    1      SPROC_PARAMS = '0'B;
      279    22671    1      SPROC_PARAMS.FCN = %GJ_OPEN_PROC#;
      280    22672    1      SPROC_PARAMS.FID$ = ADDR(SETFP_MSG.NAME);
      281    22673    1      SPROC_PARAMS.WAIT = 1;
      282    22674    1      SLIB_PARAMS = SPROC_PARAMS;
      283    22675
      284    22676    1      GMA_#PGS=0;
      285    22677    1      RELEASE_ON_ERROR = '0'B;
      286    22678
      287    22679        /*D* If this a is handler started by BF, the FPRQ message is
      288    22680             is in JIT.CCBUF and the common portion of it is moved to AUTO.
      289    22681        */
      290    22682    1      IF G$JIT.PROG_ENTRY = %G_PE_BF#
      291    22683    1      THEN SETFP_MSG = G$MSG$->G$SETFP;
      292    22684
      293    22685        /*D* If not a BF handler, but this is the new user's first job step,
      294    22686             a message is sent to KEYIN through BABOON that the new user
      295    22687             is starting.
      296    22688
      297    22689             M$LM and M$ME are opened and an internal call is made to
      298    22690             M$LINEATTR to get the profile name.
      299    22691        */
      300    22692    2      ELSE DO;
      301    22693    2           IF G$JIT.STEP = 0
      302    22694    3           THEN DO;
      303    22695    3                GJ_ON_COUNT = GJ_ON_COUNT +1;
      304    22696
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:10   
      305    22697    3                IF GJ_QUIET = 0
      306    22698    4                THEN DO;
      307    22699    4                     KEYMES = GJI_KEYMES_INIT;
      308    22700    4                     KEYMES.SYSID = G$JIT.SYSID;
      309    22701    4                     KEYMES.ACCT = G$JIT.ACCN;
      310    22702    4                     KEYMES.UNAME = G$JIT.UNAME;
      311    22703
      312    22704    4                     CALL KNB$GETRESP (ADDR(KEYMES),SIZEC(KEYMES));
      313    22705    4                     END/*do if not quiet*/;
      314    22706
      315    22707    3                CALL KNA$OPEN (%G_M$LM#,GUD_PARAMS.ERR)
      316    22708    4                WHENALTRETURN DO;
      317    22709    4                     CWNAK.FCN = IGA_CWNAK;
      318    22710    4                     CWNAK.NETERR.ERR.L6 = GUD_PARAMS.ERR;
      319    22711    4                     CWNAK.NETADR = DCBADDR(%G_M$LM#)->G$DCB.RLCID;
      320    22712    4                     CALL KNB$GETRESP (ADDR(CWNAK),SIZEC(CWNAK));
      321    22713    4   ERR_OPEN:         ;
      322    22714    4                     GJ_SABRT_COUNT = GJ_SABRT_COUNT +1;
      323    22715    4                     IF GJ_QUIET = 0
      324    22716    5                     THEN DO;
      325    22717    5                          KEYMES.MSG# = OC_MSG_UOFF#;
      326    22718    5                          CALL KNB$GETRESP (ADDR(KEYMES),SIZEC(KEYMES));
      327    22719    5                          END;
      328    22720    4                     CALL GHS$REG(%GH_EVDU);
      329    22721    4                     CALL SCREECH(SDELUSR);
      330    22722    4                     END;
      331    22723
      332    22724        /*S* SCREECH_CODE: GJS-S$DELUSR
      333    22725             TYPE: SUA
      334    22726             MESSAGE: The REG to delete the user returned.
      335    22727        */
      336    22728
      337    22729
      338    22730    3                IF G$ROS.DCBPTR$->G$DCBTABLE(%G_M$ME#)->G$DCB.RLCID ~= '0'B
      339    22731    4                THEN DO;
      340    22732    4                     CALL KNA$OPEN (%G_M$ME#,GUD_PARAMS.ERR)
      341    22733    5                     WHENALTRETURN DO;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:11   
      342    22734    5   ERR_GLINEATTR:         ;
      343    22735    5                          CALL KNA$CLOSE(%G_M$LM#,ERR);
      344    22736    5                          GOTO ERR_OPEN;
      345    22737    5                          END;
      346    22738
      347    22739    4                     GUD_PARAMS.MCL.CODE = %G_MCL_GLINEATTR#;
      348    22740    4                     GLINEATTR.V.DCB# = %G_M$ME#;
      349    22741    4                     GUD_PARAMS.PTRS.PAR1$ = ADDR(GLINEATTR.V);
      350    22742    4                     GUD_PARAMS.BND.PAR1 = SIZEC(GLINEATTR.V)-1;
      351    22743    4                     GUD_PARAMS.PTRS.PAR2$ = ADDR(LINEATTR);
      352    22744    4                     GUD_PARAMS.BND.PAR2 = SIZEC(LINEATTR)-1;
      353    22745    4                     CALL KNA$MCL(GUD_PARAMS);
      354    22746    4                     IF GUD_PARAMS.ERR ~= '0'B
      355    22747    5                     THEN DO;
      356    22748    5                          CALL KNA$CLOSE(%G_M$ME#,ERR);
      357    22749    5                          GOTO ERR_GLINEATTR;
      358    22750    5                          END;
      359    22751    5                     ELSE DO;
      360    22752    5                          G$JIT.PROFILE = LINEATTR.PROTXTC;
      361    22753    5                          G$JIT.JUNK2.MICROFPL = LINEATTR.MICROFPL;
      362    22754    5                          END;
      363    22755
      364    22756    4                     GUD_PARAMS.MCL.CODE = %G_MCL_CPEXIT#;
      365    22757    4                     END/*do if m$me.rlcid*/;
      366    22758    3                END/*do if first job step*/;
      367    22759
      368    22760        /*D* Then, again if not a BF handler, a call is made to KNA$READ
      369    22761             to get the FPRQ message.
      370    22762        */
      371    22763    2   REREAD_SETFP: ;
      372    22764    2           V_ = VECTOR(SETFP_MSG);
      373    22765    2           CALL KNA$READ(%G_M$LM#,V_,FCN_MSG.ERR)
      374    22766    3           WHENALTRETURN DO;
      375    22767    3                IF NOT(G$JIT.JUNK.MLDTRC)
      376    22768    3                THEN CALL KNA$CLOSE(%G_M$LM#,ERR);
      377    22769
      378    22770    3                GOTO ERR_CPEXIT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:12   
      379    22771    3                END;
      380    22772
      381    22773    2           IF SETFP_MSG.ERR ~='0'B
      382    22774    3           THEN DO;
      383    22775    3   PRO_ERR:     ;
      384    22776    3                FCN_MSG.ERR = SETFP_MSG.ERR;
      385    22777    3                GOTO ERR_CPEXIT;
      386    22778    3                END;
      387    22779
      388    22780        /*D* If the message FCN is %GJ_PROFILE#, this is a request for
      389    22781             the profile name.  Return it to the host and then re-read
      390    22782             to get the SETFP message.
      391    22783        */
      392    22784    2           IF SETFP_MSG.FCN ~= %GJ_SETFP#
      393    22785    3           THEN DO;
      394    22786    3                IF SETFP_MSG.FCN = %GJ_PROFILE#
      395    22787    4                THEN DO;
      396    22788    4                     T$ = ADDR(SETFP_MSG);
      397    22789    4                     T$->G$PROFILE_MSG.PROFILE = G$JIT.PROFILE;
      398    22790    4                     V_ =  VECTOR(T$->G$PROFILE_MSG);
      399    22791    4                     CALL KNA$WRITE(%G_M$LM#,V_,SETFP_MSG.ERR) ALTRET(PRO_ERR);
      400    22792    4                     GOTO REREAD_SETFP;
      401    22793    4                     END;
      402    22794
      403    22795    4                ELSE DO;
      404    22796    4                     CALL SCREECH(SFCNCODE);
      405    22797    4                     END;
      406    22798    3                END/* do if not GJ_SETFP#*/;
      407    22799        /*S* SCREECH_CODE: GJS-S$BAD_LCP6_FCN
      408    22800             TYPE: SUA
      409    22801             MESSAGE: Message read by GJS$STEP was not SETFP or PROFILE.
      410    22802        */
      411    22803
      412    22804
      413    22805        /*D* If this is a SETFP request for a micro FPL user, send a GJ_MICROFPL
      414    22806             message to the host and the reread the SETFP message (for TPFP info).
      415    22807        */
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:13   
      416    22808    2           IF G$JIT.JUNK2.BYPASS_MFPL
      417    22809    2           THEN G$JIT.JUNK2.BYPASS_MFPL = '0'B;
      418    22810    3           ELSE DO;
      419    22811    3                IF G$JIT.JUNK2.MICROFPL
      420    22812    4                THEN DO;
      421    22813    4                     FCN_MSG.FCN = %GJ_MICROFPL#;
      422    22814    4                     CALL KNA$WRITE(%G_M$LM#,FCN_MSG_,FCN_MSG.ERR) ALTRET(ERR_CPEXIT);
      423    22815    4                     G$JIT.JUNK2.BYPASS_MFPL = '1'B;
      424    22816    4                     GOTO REREAD_SETFP;
      425    22817    4                     END;
      426    22818    3                END;
      427    22819    2           END/*do if not G_PE_BF#*/;
      428    22820        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:14   
      429    22821        /*D* If the data bias is bad, ALTRET.
      430    22822        */
      431    22823    1      IF SETFP_MSG.P$$ = ENTADDR(NIL)
      432    22824    1        AND (G$JIT.DB# = 0) AND NOT(SETFP_MSG.FLAGS.DEBUG)
      433    22825    2      THEN DO;
      434    22826    2           FCN_MSG.ERR = ENO_START;
      435    22827    2           GOTO REPORT_IT;
      436    22828    2           END;
      437    22829        /*E* ERROR: GJS-E$NO_START-E
      438    22830             MESSAGE: That FPRG has no start address.
      439    22831        */
      440    22832
      441    22833    1      IF ( (%GM_ISR1_BASE + SETFP_MSG.DATA_SZ) - SETFP_MSG.DATA_BIAS) < 0
      442    22834    2      THEN DO;
      443    22835    2           FCN_MSG.ERR = EBADHEAD;
      444    22836    2           GOTO REPORT_IT;
      445    22837    2           END;
      446    22838        /*E* ERROR: GJS-E$BADHEAD-E
      447    22839             MESSAGE: The HEAD record for that FPRG is bad.
      448    22840        */
      449    22841
      450    22842
      451    22843        /*D* If this is an M$LDTRC message, the debug bit will not be
      452    22844             returned again from the host.  So, if debugging, indicate
      453    22845             so in the SETFP message.
      454    22846        */
      455    22847    1      IF (G$JIT.DB# ~= 0) AND (SETFP_MSG.FLAGS.XEQ_ONLY = '0'B)
      456    22848    1      THEN SETFP_MSG.FLAGS.DEBUG = '1'B;
      457    22849
      458    22850        /*D* If the FPRG was linked with the NOSHARE option or if this
      459    22851             run-unit is to be debugged, internal data is initialized
      460    22852             to read the procedure from the host.  There will be no attempt
      461    22853             to share it.
      462    22854        */
      463    22855    1      IF (SETFP_MSG.FLAGS.DEBUG) OR NOT(SETFP_MSG.FLAGS.S)
      464    22856    1        OR (ADDR(SETFP_MSG.NAME)->B$STARFILE.TEXT = '*')
      465    22857    2      THEN DO;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:15   
      466    22858    2           SPROC_PARAMS.TYC.SFILE$ = ADDR(NIL);
      467    22859    2           SPROC_PARAMS.TYC.GET_PROC = 1;
      468    22860    2           SPROC_PARAMS.TYC.SHARE_PROC = 0;
      469    22861    2           END;
      470    22862
      471    22863        /*D* The GJS$OPEN_SHARED routine is called to determine if the run-unit
      472    22864             already exists in the shared file tables.  On return, GET_PROC
      473    22865             will be set if we must read the program procedure, and
      474    22866             SHARE_PROC will be set if we are to complete the process of
      475    22867             creating the shared file entry.
      476    22868        */
      477    22869    2      ELSE DO;
      478    22870    2           SPROC_PARAMS.PTYPE = (SETFP_MSG.FLAGS & %RU_SETFP#) | %RU_STD#;
      479    22871
      480    22872    2           CALL GJS$OPEN_SHARED(SPROC_PARAMS)
      481    22873    3           WHENALTRETURN DO;
      482    22874    3                FCN_MSG.ERR = SPROC_PARAMS.ERR;
      483    22875    3                GOTO REPORT_IT;
      484    22876    3                END;
      485    22877
      486    22878    2           END;
      487    22879
      488    22880        /*D* Move the fid for the run-unit to the read-only segment.
      489    22881             We may need this later to send to the host debugger.
      490    22882        */
      491    22883    1      G$ROS.M$LM.NAME = SETFP_MSG.NAME;
      492    22884    1      G$ROS.M$LM.ACCT = SETFP_MSG.ACCT;
      493    22885    1      G$ROS.M$LM.PASS = SETFP_MSG.PASS;
      494    22886    1      G$ROS.M$LM.PSN = SETFP_MSG.PSN;
      495    22887    1      G$ROS.M$LM.MODTIME = SETFP_MSG.MODTIME;
      496    22888
      497    22889        /*    Modify SETFP_MSG.fid to search for library or debugger.
      498    22890        */
      499    22891    1      SETFP_MSG.ACCT = ':SYS    ';
      500    22892    1      SETFP_MSG.PASS = ' ';
      501    22893    1      SETFP_MSG.PSN = ' ';
      502    22894    1      SETFP_MSG.MODTIME = 0;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:16   
      503    22895
      504    22896        /*D*  If we need a run time library, the GJS$OPEN_SHARED routine is called
      505    22897              to see if it already exists and to determine if we must read the
      506    22898              library procedure and share it.
      507    22899              If the library isn't already shared, and there is no available
      508    22900              entry in the shared file tables, we must error the job step as
      509    22901              we have no place to hold the library data.
      510    22902        */
      511    22903    1      IF SETFP_MSG.LIB_NAME.L = 0
      512    22904    2      THEN DO;
      513    22905    2           PGSZ_LIB_DATA = 0;
      514    22906    2           PGSZ_LIB_PROC = 0;
      515    22907    2           END;
      516    22908
      517    22909    2      ELSE DO;
      518    22910    2           SETFP_MSG.NAME = SETFP_MSG.LIB_NAME;
      519    22911    2           SLIB_PARAMS.PTYPE = %RU_LIB#;
      520    22912
      521    22913    2           CALL GJS$OPEN_SHARED(SLIB_PARAMS)
      522    22914    3           WHENRETURN DO;
      523    22915    3                IF SLIB_PARAMS.TYC.SFILE$ = ADDR(NIL)
      524    22916    3                THEN GOTO BAD_PROCESSOR;
      525    22917
      526    22918        /*D* If this is a user being started by BIGFOOT, the library size
      527    22919             will be in the SETFP message in CCBUF.  If this is a normal
      528    22920             user and the library must be read from the host, a message
      529    22921             is written to request the library data and then the library
      530    22922             data message is read.
      531    22923        */
      532    22924    3                IF SLIB_PARAMS.TYC.GET_PROC ~= 0
      533    22925    4                THEN DO;
      534    22926    4                     IF G$JIT.PROG_ENTRY = %G_PE_BF#
      535    22927    5                     THEN DO;
      536    22928    5                          ALIB_DATA.PROC_SZ = G$MSG$->G$SETFP_MSG.LIB_PROC_SZ;
      537    22929    5                          ALIB_DATA.DATA_SZ = G$MSG$->G$SETFP_MSG.LIB_DATA_SZ;
      538    22930    5                          END;
      539    22931
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:17   
      540    22932    5                     ELSE DO;
      541    22933    5                          FCN_MSG.FCN = %GJ_LIB_DATA#;
      542    22934    5                          CALL KNA$WRITE(%G_M$LM#,FCN_MSG_,FCN_MSG.ERR) ALTRET(
             22934                                   REPORT_IT);
      543    22935
      544    22936    5                          V_ = VECTOR(ALIB_DATA);
      545    22937    5                          CALL KNA$READ(%G_M$LM#,V_,FCN_MSG.ERR) ALTRET(REPORT_IT);
      546    22938    5                          IF ALIB_DATA.ERR ~= '0'B
      547    22939    6                          THEN DO;
      548    22940    6                               FCN_MSG.ERR = ALIB_DATA.ERR;
      549    22941    6                               GOTO REPORT_IT;
      550    22942    6                               END;
      551    22943    5                          END/* DO if not G_PE_BF# */;
      552    22944
      553    22945    4                     IF ALIB_DATA.DATA_SZ+%GM_ISR1_BASE > SETFP_MSG.DATA_BIAS
      554    22946    4                     THEN GOTO BAD_LIB_DATA;
      555    22947
      556    22948    4                     PGSZ_LIB_PROC = (ALIB_DATA.PROC_SZ + 255) / 256;
      557    22949    4                     PGSZ_LIB_DATA = (ALIB_DATA.DATA_SZ + 255) / 256;
      558    22950    4                     END/* DO if GET_LIB */;
      559    22951
      560    22952        /*D* If the library is already shared, get the data out of the
      561    22953             shared processor table.
      562    22954        */
      563    22955    4                ELSE DO;
      564    22956    4                     IF G$SFILE.LIB_WDSZ_DATA(SLIB_PARAMS.PNUM)+%GM_ISR1_BASE
      565    22957    4                       > SETFP_MSG.DATA_BIAS
      566    22958    5                     THEN DO;
      567    22959    5   BAD_LIB_DATA:          ;
      568    22960    5                          FCN_MSG.ERR = ELIBSIZE;
      569    22961    5                          GOTO REPORT_IT;
      570    22962    5                          END;
      571    22963
      572    22964    4                     PGSZ_LIB_PROC = G$SFILE.PGSZ_PROC(SLIB_PARAMS.PNUM);
      573    22965    4                     PGSZ_LIB_DATA = G$SFILE.PGSZ_DATA(SLIB_PARAMS.PNUM);
      574    22966    4                     END;
      575    22967    3                END;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:18   
      576    22968
      577    22969        /*E* ERROR: GJS-E$LIBSIZE-E
      578    22970             MESSAGE: FPRG library data size exceeds that reserved in the FPRG.
      579    22971        */
      580    22972
      581    22973        /*D* Since WAIT was specified, the only possible ALTRET from
      582    22974             the GJS$OPEN_SHARED routine is a mismatch on the
      583    22975             processor type.  If this happens, we inform the Host program
      584    22976             if this is not M$LDTRC.  A return to GJM$MCL will then cause
      585    22977             an ALTRET to the request.  If this is is M$CPEXIT then the
      586    22978             user will be deleted on return to GJM$MCL.
      587    22979        */
      588    22980    3           WHENALTRETURN DO;
      589    22981    3   BAD_PROCESSOR: ;
      590    22982    3                FCN_MSG.ERR = SLIB_PARAMS.ERR;
      591    22983    3                GOTO REPORT_IT;
      592    22984    3                END;
      593    22985    2           END;
      594    22986        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:19   
      595    22987
      596    22988        /*D* The size of the program to be put into execution is
      597    22989             computed and checked against the user's limits.
      598    22990        */
      599    22991    1      IF SETFP_MSG.TCBSIZE = 0 THEN SETFP_MSG.TCBSIZE =1;
      600    22992    1      TCBSZ = (SETFP_MSG.TCBSIZE * SIZEW(G$NWIO) ) + SIZEW(G$EXCFR);
      601    22993    1      USR_ROS_WDSZ = SIZEW(G$ROS) + SETFP_MSG.ROS_SZ + TCBSZ;
      602    22994    1      USR_ROS_PGSZ = (USR_ROS_WDSZ + 255) / 256;
      603    22995    1      EXTRA_ROS_PGSZ = USR_ROS_PGSZ - GM_ROS_PGSZ;
      604    22996
      605    22997        /*D* The number of pages to be charged against the user's limit
      606    22998             is first computed as the number of pages of program data + the
      607    22999             pages required for the ROS beyond the initial page size.
      608    23000        */
      609    23001    1      PGSZ_USR = SETFP_MSG.VDPGS + EXTRA_ROS_PGSZ + G$JIT.PCC;
      610    23002
      611    23003        /*D* If this is an M$LDTRC operation, the size of the user's
      612    23004             Data Segment 4 and the size of the debugger's data segment
      613    23005             is included.
      614    23006        */
      615    23007    1      IF (G$JIT.JUNK.MLDTRC)
      616    23008    2      THEN DO;
      617    23009    2           IF G$ASDT_USR.DESC.V(%GM_USR_DS4#) = '1'B
      618    23010    2           THEN PGSZ_USR = PGSZ_USR + G$ASDT_USR.DESC.SIZE(%GM_USR_DS4#)+1;
      619    23011
      620    23012    2           IF G$ASDT_USR.DESC.V(%GM_DB_DS#) = '1'B
      621    23013    2           THEN PGSZ_USR = PGSZ_USR + G$JIT.PCDDS;
      622    23014    2           END;
      623    23015
      624    23016        /*D* The size of the absolute number of pages required is
      625    23017             computed in ASZ_USR.  If there is not enough physical memory
      626    23018             to start this FPRG, the error is reported.
      627    23019        */
      628    23020    1      ASZ_USR = PGSZ_USR;
      629    23021
      630    23022    1      IF SPROC_PARAMS.TYC.GET_PROC = 1
      631    23023    1      THEN ASZ_USR = ASZ_USR + SETFP_MSG.VPPGS;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:20   
      632    23024
      633    23025    1      IF SLIB_PARAMS.TYC.GET_PROC = 1
      634    23026    1      THEN ASZ_USR = ASZ_USR + PGSZ_LIB_DATA + PGSZ_LIB_PROC;
      635    23027
      636    23028    1      IF ASZ_USR > GM_ASHUF
      637    23029    2      THEN DO;
      638    23030    2   NO_PHYS_MEM: ;
      639    23031    2           FCN_MSG.ERR = EPHYS_MEMLIMIT;
      640    23032    2           GOTO REPORT_IT;
      641    23033    2           END;
      642    23034
      643    23035    1      IF ASZ_USR > (GM_SHUF - GM_STEP)
      644    23036    2      THEN DO;
      645    23037    2           GMA_#PGS = ASZ_USR - (GM_SHUF - GM_STEP);
      646    23038    2           CALL GJS$REL_ALL(GMA_#PGS)
      647    23039    3           WHENALTRETURN DO;
      648    23040    3                IF GM_REG_4_MEM = 0
      649    23041    3                THEN GOTO NO_PHYS_MEM;
      650    23042
      651    23043    4                DO WHILE (ASZ_USR > (GM_SHUF-GM_STEP));
      652    23044    4                     CALL GHS$REG(%GH_EVMEM) ALTRET(NO_PHYS_MEM);
      653    23045    4                     END;
      654    23046    3                END/*whenaltreturn*/;
      655    23047    2           END/*do if asz_usr > gm_shuf*/;
      656    23048
      657    23049        /*D* The pages for the user's procedure will also be included
      658    23050             unless this is a run-unit in :SYS that was LINKed with the
      659    23051             NOCHGPMEM option.
      660    23052        */
      661    23053    1      IF NOT(SETFP_MSG.FLAGS.NOCHRPMEM)
      662    23054    1      THEN PGSZ_USR = PGSZ_USR + SETFP_MSG.VPPGS;
      663    23055
      664    23056        /*D* If this user is to be limited by the account resource table,
      665    23057             GMA$CHKSIZE is called to check the required size against the
      666    23058             JIT limit and to reserve the required pages in the account
      667    23059             resource table.
      668    23060        */
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:21   
      669    23061    1      IF G$JIT.GFR_ACCT ~= 0
      670    23062    2      THEN DO;
      671    23063    2           CUR_PGSZ = G$JIT.PCD + G$JIT.PCDS + G$JIT.PCL + G$JIT.PCDDS
      672    23064    2             + G$JIT.PCC + G$JIT.PCROS;
      673    23065    2           IF NOT(G$JIT.MMFLGS.FREE_PPGS)
      674    23066    2           THEN CUR_PGSZ = CUR_PGSZ + G$JIT.PCP;
      675    23067
      676    23068    2           IF PGSZ_USR > CUR_PGSZ
      677    23069    3           THEN DO;
      678    23070    3                GMA_#PGS = PGSZ_USR - CUR_PGSZ;
      679    23071    3                CHKSZ.SIZE = GMA_#PGS;
      680    23072    3                CHKSZ.FLGS.CHK_ONLY = '0'B;
      681    23073    3                CHKSZ.FLGS.REQ_ALL = '1'B;
      682    23074    3                CHKSZ.FLGS.PARK = '1'B;
      683    23075    3                CHKSZ.FLGS.NSHUF = '0'B;
      684    23076    3                CHKSZ.FLGS.STEP = '1'B;
      685    23077    3                CALL GMA$CHKSIZE(CHKSZ)
      686    23078    4                WHENALTRETURN DO;
      687    23079    4                     FCN_MSG.ERR = CHKSZ.ERR;
      688    23080    4                     GOTO REPORT_IT;
      689    23081    4                     END;
      690    23082
      691    23083    3                RELEASE_ON_ERROR = '1'B;
      692    23084    3                END;
      693    23085
      694    23086        /*D* If the user already has enoung memory reserved in the account
      695    23087             resource table, i.e. a large run-unit M$LDTRCing to a smaller
      696    23088             one, the number of pages to be deallocated in the table is
      697    23089             remembered in GMA_#PGS.
      698    23090        */
      699    23091    3           ELSE DO;
      700    23092    3                GMA_#PGS = CUR_PGSZ - PGSZ_USR;
      701    23093    3                END;
      702    23094
      703    23095    2           END;
      704    23096
      705    23097        /*D* If this user is not limited by the account resource table,
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:22   
      706    23098             the only check is against his user limit.
      707    23099        */
      708    23100    2      ELSE DO;
      709    23101    2           IF PGSZ_USR > G$JIT.MAXMEM
      710    23102    3           THEN DO;
      711    23103    3                FCN_MSG.ERR = EMEMLIMIT;
      712    23104    3                GOTO REPORT_IT;
      713    23105    3                END;
      714    23106    2           END/*do if jit.gfr_acct = 0*/;
      715    23107
      716    23108    1      PGSZ_USR = PGSZ_USR - G$JIT.PCC;
      717    23109
      718    23110        /*E*   ERROR:  GJS-E$MEMLIMIT-E
      719    23111               MESSAGE: FEP User's memory limit exceeded.
      720    23112               DESCRIPTION: If the severity of the error is G_SEV_ERROR#,
      721    23113                            the error was because the maxcore test internal
      722    23114                            to the GJS$STEP routine failed.  If the severity
      723    23115                            is G_SEV_ABORT#, it indicates an ALTRET from the
      724    23116                            GMA$GET routine.
      725    23117        */
      726    23118
      727    23119        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:23   
      728    23120
      729    23121        /*D* If these are pseudo resources associated with the run-unit
      730    23122             checks are then made to insure that those resources are
      731    23123             within the user's limits and available.
      732    23124        */
      733    23125    1      IF SETFP_MSG.PSEUDO_COUNT = 0
      734    23126    1      THEN I = 0;
      735    23127    2      ELSE DO;
      736    23128    3           DO I=0 TO 7;
      737    23129    3                IF SETFP_MSG.PSEUDO_TEXT = GFR_PSUDO_NM(I)
      738    23130    4                THEN DO;
      739    23131    4                     IF G$JIT.CURSUDO(I) < SETFP_MSG.PSEUDO_COUNT
      740    23132    5                     THEN DO;
      741    23133    5                          PSEUDO_NEEDED = SETFP_MSG.PSEUDO_COUNT - G$JIT.CURSUDO(I);
      742    23134                               %LOCK (G=GFR_RES_LOCK);
      743    23141
      744    23142    5                          IF PSEUDO_NEEDED > GFR_PSUDO_MAX_SYS(I)
      745    23143    5                            - GFR_PSUDO_CUR_SYS(I)
      746    23144
      747    23145    5                            OR PSEUDO_NEEDED > GFR_PSUDO_MAX$(G$JIT.MODE)->G$PSUDO(I)
      748    23146    5                            - GFR_PSUDO_CUR$(G$JIT.MODE)->G$PSUDO(I)
      749    23147
      750    23148    5                            OR PSEUDO_NEEDED > G$JIT.MAXSUDO(I)
      751    23149    5                            - G$JIT.CURSUDO(I)
      752    23150
      753    23151    6                          THEN DO;
      754    23152                                    %UNLOCK (G=GFR_RES_LOCK);
      755    23159
      756    23160    6                               FCN_MSG.ERR = ESUOUT;
      757    23161        /*
      758    23162                                    FCN_MSG.ERR.ERR# = FCN_MSG.ERR.ERR# + I;
      759    23163        */
      760    23164    6                               GOTO REPORT_IT;
      761    23165    6                               END;
      762    23166
      763    23167        /*E* ERROR: GJS-E$SUOUT-E
      764    23168              MESSAGE:  The pseudo resources you require are not available.
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:24   
      765    23169              MESSAGE1: The number of LCP-6 pseudo resources associated with
      766    23170                        the run-unit exceeds the maximum number of pseudo
      767    23171                        resources of that type for which you have been authorized
      768    23172                        or granting your request for LCP-6 pseudo resources would
      769    23173                        cause the total in use on the system or the total in use
      770    23174                        for your mode (User, CG or Handler) to exceed the maximum.
      771    23175        */
      772    23176
      773    23177
      774    23178        /*D* If the user doesn't currently own enough pseudo resources of
      775    23179             the type specifed in the head record, they are acquired now.
      776    23180        */
      777    23181    5                          GFR_PSUDO_CUR_SYS(I)
      778    23182    5                            = GFR_PSUDO_CUR_SYS(I)+ PSEUDO_NEEDED;
      779    23183
      780    23184    5                          GFR_PSUDO_CUR$(G$JIT.MODE)->G$PSUDO(I)
      781    23185    5                            = GFR_PSUDO_CUR$(G$JIT.MODE)->G$PSUDO(I) + PSEUDO_NEEDED;
      782    23186
      783    23187
      784    23188                               %UNLOCK (G=GFR_RES_LOCK);
      785    23195
      786    23196
      787    23197        /*D* After the step pseudo resources have been acquired, the count
      788    23198             of this pseudo resources in the JIT is reset to zero.
      789    23199             This prevents the rundown routine from releasing
      790    23200             them.  The new value for step pseudo counts is remembered in
      791    23201             the SETFP message.
      792    23202        */
      793    23203    5                          G$JIT.CURSUDO(I) = 0;
      794    23204
      795    23205    5                          END /*do if jit.cur < required*/;
      796    23206
      797    23207
      798    23208        /*D* If the user already currently owns enough pseudo resources of
      799    23209             the type specifed in the head record, any previously acquired
      800    23210             in excess of what is needed here will be released by rundown.
      801    23211        */
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:25   
      802    23212    5                     ELSE DO;
      803    23213    5                          G$JIT.CURSUDO(I) = G$JIT.CURSUDO(I) - SETFP_MSG.PSEUDO_COUNT;
      804    23214    5                          END;
      805    23215
      806    23216    4                     GOTO GOT_PSEUDO;
      807    23217    4                     END /* do on name match */;
      808    23218    3                END/* do 0 to 7*/;
      809    23219
      810    23220    2           FCN_MSG.ERR = EBSUNM;
      811    23221
      812    23222        /*E* ERROR: GJS-E$BSUNM-E
      813    23223             MESSAGE: The pseudo resource associated with the FPRG does not exist.
      814    23224        */
      815    23225
      816    23226        /*D* If the memory or resource test fails, the DONE message is sent
      817    23227             to the host and an answer is read back to keep us in sync.
      818    23228             If a library or FPRG shared file has been opened, it is closed.
      819    23229        */
      820    23230    2   REPORT_IT: ;
      821    23231    2           FCN_MSG.ERR.SEV = %G_SEV_ABORT#;
      822    23232    2           IF G$JIT.JUNK.MLDTRC
      823    23233    3           THEN DO;
      824    23234    3                FCN_MSG.FCN = %GJ_NAK#;
      825    23235    3                CALL KNA$WRITE(%G_M$LM#,FCN_MSG_,ERR);
      826    23236    3                CALL KNA$READ(%G_M$LM#,V_,ERR); /*V_ is ok - garbage buffer */
      827    23237    3                END;
      828    23238
      829    23239    2           I = SPROC_PARAMS.PNUM;
      830    23240    2           CALL GJS$CLOSE_SHARED(I);
      831    23241    2           I = SLIB_PARAMS.PNUM;
      832    23242    2           CALL GJS$CLOSE_SHARED(I);
      833    23243    2           GUD_PARAMS.ERR = FCN_MSG.ERR;
      834    23244
      835    23245        /*D* If we have marked allocated memory in the account resource
      836    23246             tables, it is deallocated.
      837    23247        */
      838    23248    2           IF RELEASE_ON_ERROR
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:26   
      839    23249    3           THEN DO;
      840    23250    3                CALL GMA$REL_ACCTMEM(GMA_#PGS);
      841    23251    3                END;
      842    23252
      843    23253
      844    23254        /*D* If an error occurred while processing an M$LDTRC, return to
      845    23255             GJM$MCL; the user is intact and will get an ALTRET.
      846    23256             If the error occured while processing an M$CPEXIT, the user
      847    23257             is deleted.
      848    23258        */
      849    23259    2   ERR_CPEXIT: ;
      850    23260    2           IF G$JIT.JUNK.MLDTRC
      851    23261    3           THEN DO;
      852    23262    3                GUD_PARAMS.ERR = FCN_MSG.ERR;
      853    23263    3                RETURN;
      854    23264    3                END;
      855    23265
      856    23266    2           IF G$JIT.PROG_ENTRY ~= %G_PE_BF#
      857    23267    3           THEN DO;
      858    23268    3                G$JIT.JUNK.STEP = '1'B;
      859    23269    3                G$JIT.STEP = G$JIT.STEP +1;
      860    23270    3                CALL GJS$ABORTM(FCN_MSG.ERR);
      861    23271    3                GUD_PARAMS.ERR = EALTRET;
      862    23272    3                RETURN;
      863    23273    3                END;
      864    23274
      865    23275        /*   SCREECH_CODE: GJS-S$DELUSR
      866    23276             TYPE: SUA
      867    23277             MESSAGE: The REG to delete the user returned.
      868    23278        */
      869    23279
      870    23280    3           ELSE DO;
      871    23281    3                CALL SCREECH(SMING);
      872    23282    3                END;
      873    23283
      874    23284        /*S* SCREECH_CODE: GJS-S$MING
      875    23285             TYPE: SCREECH
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:27   
      876    23286             MESSAGE: An LCP-6 system ghost has aborted.
      877    23287        */
      878    23288
      879    23289    2           END /* do if SETFP_MSG.PSEUDOS */;
      880    23290
      881    23291        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:28   
      882    23292        /*D* If the memory and resource tests are successful, the user program
      883    23293             that issured an M$LDTRC is run down freeing the virtual space
      884    23294             for the new program.  Any errors detected after this point
      885    23295             will cause the job to be aborted.
      886    23296        */
      887    23297    1   GOT_PSEUDO: ;
      888    23298    1      CALL GHI$UTS(G$JIT.START);
      889    23299    1      G$JIT.START = G$JIT.START + G_BOOTTIME;
      890    23300
      891    23301    1      IF (RELEASE_ON_ERROR = '0'B) AND (GMA_#PGS ~=0)
      892    23302    1      THEN CALL GMA$REL_ACCTMEM(GMA_#PGS);
      893    23303
      894    23304    1      IF (G$JIT.JUNK.MLDTRC)
      895    23305    2      THEN DO;
      896    23306    2           IF GUD_PARAMS.PTRS.PAR5$ ~= ADDR(NIL)
      897    23307    3           THEN DO;
      898    23308    3                GUD_PARAMS.BND.PAR5 = GUD_PARAMS.BND.PAR5 +1;
      899    23309    3                G$JIT.CCBUF = GUD_PARAMS.PTRS.PAR5$ ->G$CCBUF;
      900    23310    3                G$JIT.JUNK2.USER_CCBUF = '1'B;
      901    23311    3                END;
      902    23312    3           ELSE DO;
      903    23313    3                G$JIT.JUNK2.USER_CCBUF = '0'B;
      904    23314    3                END;
      905    23315
      906    23316    2           CALL GJS$RUND(GMA_#PGS);
      907    23317    2           G$JIT.PROG_ENTRY = %G_PE_LDTRC#;
      908    23318    2           END;
      909    23319
      910    23320    2      ELSE DO;
      911    23321    2           IF G$JIT.PROG_ENTRY ~= %G_PE_BF#
      912    23322    2           THEN G$JIT.PROG_ENTRY = %G_PE_HOST#;
      913    23323
      914    23324    2           G$JIT.STEP = G$JIT.STEP+1;
      915    23325
      916    23326        /*N* If the count of the number of job steps wraps from 65535
      917    23327             to zero, we may screw up the TSTACK later in this routine.
      918    23328                IF G$JIT.STEP = 0 THEN G$JIT.STEP =2;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:29   
      919    23329        */
      920    23330    2           END;
      921    23331
      922    23332        /*D* Bump GM_STEP so the pages dont get allocated should we get
      923    23333             regged while downline loading the FPRG.
      924    23334        */
      925    23335    1      GM_STEP = GM_STEP + ASZ_USR;
      926    23336
      927    23337        /*D* The Step-in-progress bit is set in JIT.JUNK at this point.
      928    23338        */
      929    23339    1      G$JIT.JUNK.STEP = '1'B;
      930    23340
      931    23341        /*D* next the JIT memory deliminators are set up.
      932    23342        */
      933    23343
      934    23344    1      G$JIT.SPROC# = SPROC_PARAMS.PNUM;
      935    23345    1      G$JIT.SLIB# = SLIB_PARAMS.PNUM;
      936    23346    1      G$JIT.CURSUDO(I) = SETFP_MSG.PSEUDO_COUNT;
      937    23347
      938    23348    1      G$JIT.DLL = %GM_FIRST_IS_VP;
      939    23349    1      G$JIT.DUL = G$JIT.DLL + SETFP_MSG.VDPGS -1;
      940    23350
      941    23351    1      G$JIT.PLL = G$JIT.DLL + ( ((SETFP_MSG.VDPGS+255) / 256) * 256);
      942    23352    1      G$JIT.PUL = G$JIT.PLL + SETFP_MSG.VPPGS -1;
      943    23353
      944    23354    1      IF (SETFP_MSG.FLAGS.NOCHRPMEM)
      945    23355    1      THEN G$JIT.MMFLGS.FREE_PPGS = '1'B;
      946    23356    1      ELSE G$JIT.MMFLGS.FREE_PPGS = '0'B;
      947    23357
      948    23358    1      IF (SETFP_MSG.FLAGS.LAUTO)
      949    23359    1      THEN G$ROS.AUTO_DS = %GM_LAUTO_DS_BASE;
      950    23360    1      ELSE G$ROS.AUTO_DS = %GM_UAUTO_DS_BASE;
      951    23361
      952    23362    1      IF SETFP_MSG.LIB_NAME.L ~= 0
      953    23363    2      THEN DO;
      954    23364    2           G$JIT.LLL = %GM_LIBIS1_VP;
      955    23365    2           G$JIT.LUL = %GM_LIBIS2_VP;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:30   
      956    23366    2           END;
      957    23367    2      ELSE DO;
      958    23368    2           G$JIT.LLL = %GM_LIBIS2_VP+1;
      959    23369    2           G$JIT.LUL = %GM_LIBIS2_VP;
      960    23370    2           END;
      961    23371    1      G$JIT.PCL = 0;
      962    23372
      963    23373
      964    23374
      965    23375        /*D* Initialize the read parameters.
      966    23376        */
      967    23377    1      RD_PARAMS.BIAS = SETFP_MSG.DATA_BIAS;
      968    23378    1      RD_PARAMS.ERR = ERR;
      969    23379
      970    23380        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:31   
      971    23381        /*D* If a Library must be associated, it is read first.
      972    23382             This is because of how KIF$FPRG wants it.
      973    23383        */
      974    23384    1      IF SETFP_MSG.LIB_NAME.L ~= 0
      975    23385    2      THEN DO;
      976    23386    2           GP_PARAMS.SHARE = SLIB_PARAMS.TYC;
      977    23387
      978    23388    2           IF (SLIB_PARAMS.TYC.GET_PROC = 1)
      979    23389    3           THEN DO; /* first get the data into the shared file tables  */
      980    23390    3                GP_PARAMS.VP# = G$JIT.DLL;
      981    23391    3                GP_PARAMS.PGSZ = PGSZ_LIB_DATA;
      982    23392
      983    23393    3                RD_PARAMS.PROG_TYPE = %GJ_LIB_DATA#;
      984    23394                  /* pseudo code - GJU$GETPROC will change to %GJ_GETLIB#   */
      985    23395    3                RD_PARAMS.USR_LOC = GP_PARAMS.VP# * 256;
      986    23396    3                RD_PARAMS.TOT_SECTSZ = ALIB_DATA.DATA_SZ;
      987    23397    3                RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_LIB_DATA;
      988    23398
      989    23399    3                CALL GJU$GET_PROC(GP_PARAMS)
      990    23400    4                WHENALTRETURN DO;
      991    23401    4                     GOTO READ_ALTRETURN;
      992    23402    4                     END;
      993    23403    3                END;
      994    23404
      995    23405    2           GP_PARAMS.VP# = G$JIT.LLL;
      996    23406    2           GP_PARAMS.PGSZ = PGSZ_LIB_PROC;
      997    23407
      998    23408    2           RD_PARAMS.PROG_TYPE = %GJ_GETLIB#;
      999    23409    2           RD_PARAMS.TOT_SECTSZ = ALIB_DATA.PROC_SZ;
     1000    23410    2           RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_LIB_PROC;
     1001    23411    2           RD_PARAMS.USR_LOC = GP_PARAMS.VP# * 256;
     1002    23412
     1003    23413    2           CALL GJU$GET_PROC(GP_PARAMS) ALTRET(READ_ALTRETURN);
     1004    23414
     1005    23415        /* If this is an old RU, it will probably work better if we make it
     1006    23416           look like its library is at the old place (ISR6 segment)
     1007    23417        */
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:32   
     1008    23418    2           IF SETFP_MSG.VERSION=0
     1009    23419    3           THEN DO;
     1010    23420    3                GMA_VP# = G$UHJIT.ASDT_USR.LIBIS1.BASE;
     1011    23421    3                GMA_#PGS = G$UHJIT.ASDT_USR.LIBIS1.SIZE+1;
     1012    23422    3                CALL GMA$CVM (%GM_ISR6#, GMA_#PGS, GMA_VP#);
     1013    23423    3                G$UHJIT.ASDT_USR.ISR6.WP = %G_RING0#;
     1014    23424    3                G$UHJIT.ASDT_USR.ISR6.EP = %G_R_USR#;
     1015    23425    3                G$JIT.FIRST_SEG(%GM_ISR6#) = '1'B;
     1016    23426    3                END;
     1017    23427    2           END;
     1018    23428
     1019    23429        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:33   
     1020    23430        /*D*  Get the additional Read Only Segement pages, if any.
     1021    23431        */
     1022    23432    1      RD_PARAMS.PROG_TYPE = %GJ_GETPROG#;
     1023    23433    1      GP_PARAMS.SHARE = SPROC_PARAMS.TYC;
     1024    23434
     1025    23435    1      IF EXTRA_ROS_PGSZ ~= 0
     1026    23436    2      THEN DO;
     1027    23437    2           CALL GMA$GET(%GM_ROS#,EXTRA_ROS_PGSZ,%G_R_USR#,%G_R_MON#,%G_RING0#)
     1028    23438    3           WHENALTRETURN DO;
     1029    23439    3   MM_ALTRETURN: ;
     1030    23440    3                FCN_MSG.ERR = EMMFAILED;
     1031    23441    3   ENTER_ABORTM: ;
     1032    23442    3                FCN_MSG.ERR.SEV = %G_SEV_ABORT#;
     1033    23443    3                GM_STEP = GM_STEP - ASZ_USR;
     1034    23444    3                CALL GMA$REL_ACCTMEM(PGSZ_USR);
     1035    23445    3                G$JIT.JUNK.STEP = '1'B;
     1036    23446    3                CALL GJS$ABORTM(FCN_MSG.ERR);
     1037    23447    3                GUD_PARAMS.ERR = EALTRET;
     1038    23448    3                RETURN;
     1039    23449    3                END;
     1040    23450
     1041    23451    2           G$JIT.PCROS = EXTRA_ROS_PGSZ;
     1042    23452    2           PGSZ_USR = PGSZ_USR - EXTRA_ROS_PGSZ;
     1043    23453    2           END;
     1044    23454
     1045    23455        /*D* If there is any user ROS data, read it now.
     1046    23456        */
     1047    23457    1      IF SETFP_MSG.ROS_SZ ~= 0
     1048    23458    2      THEN DO;
     1049    23459    2           RD_PARAMS.TOT_SECTSZ = SETFP_MSG.ROS_SZ;
     1050    23460    2           RD_PARAMS.USR_LOC$ = G$ROS.AVAIL$;
     1051    23461    2           RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_RO;
     1052    23462
     1053    23463    2           IF SPROC_PARAMS.TYC.SFILE$ = ADDR(NIL)
     1054    23464    3           THEN DO;
     1055    23465    3                CALL GJS$READ_RU(RD_PARAMS)
     1056    23466    4                WHENALTRETURN DO;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:34   
     1057    23467    4   READ_ALTRETURN:   ;
     1058    23468    4                     FCN_MSG.ERR = RD_PARAMS.ERR;
     1059    23469    4                     GOTO ENTER_ABORTM;
     1060    23470    4                     END;
     1061    23471    3                END;
     1062    23472
     1063    23473    3           ELSE DO;
     1064    23474    3                GP_PARAMS.PGSZ = (SETFP_MSG.ROS_SZ +255) / 256;
     1065    23475    3                GP_PARAMS.VP# = %GM_ROS_VP;
     1066    23476
     1067    23477    3                CALL GJU$GET_DATA(GP_PARAMS) ALTRET(READ_ALTRETURN);
     1068    23478    3                END;
     1069    23479
     1070    23480    2           END/* do if ROS_SZ ~= 0 */;
     1071    23481        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:35   
     1072    23482
     1073    23483        /*D*  Get pages for the user's data.
     1074    23484        */
     1075    23485    1      IF SETFP_MSG.VDPGS ~= 0
     1076    23486    2      THEN DO;
     1077    23487    2           SEGS_64K = (SETFP_MSG.VDPGS + 255) / 256;
     1078    23488    2           PGS_REMAINING = SETFP_MSG.VDPGS;
     1079    23489
     1080    23490    3           DO I=0 TO SEGS_64K-1;
     1081    23491    3                IF PGS_REMAINING > 256
     1082    23492    4                THEN DO;
     1083    23493    4                     GMA_#PGS = 256;
     1084    23494    4                     PGS_REMAINING = PGS_REMAINING - 256;
     1085    23495    4                     END;
     1086    23496    4                ELSE DO;
     1087    23497    4                     GMA_#PGS = PGS_REMAINING;
     1088    23498    4                     END;
     1089    23499
     1090    23500    3                GMA_VP# = G$JIT.DLL + (IU * 256);
     1091    23501    3                GMA_SEGX = (GMA_VP# / 256) + 15;
     1092    23502
     1093    23503    3                CALL GMA$GET(GMA_SEGX,GMA_#PGS,%G_R_USR#,%G_R_USR#,%G_RING0#)
     1094    23504    3                  ALTRET(MM_ALTRETURN);
     1095    23505
     1096    23506    3                G$JIT.PCD = G$JIT.PCD + GMA_#PGS;
     1097    23507    3                PGSZ_USR = PGSZ_USR - GMA_#PGS;
     1098    23508    3                END/* Do 0 to segsz-1 */;
     1099    23509
     1100    23510
     1101    23511        /*D* Read the program data - if any.
     1102    23512        */
     1103    23513    2           IF ( (%GM_ISR1_BASE + SETFP_MSG.DATA_SZ) - SETFP_MSG.DATA_BIAS) ~=0
     1104    23514    3           THEN DO;
     1105    23515    3                RD_PARAMS.USR_LOC =
     1106    23516    3                  (SETFP_MSG.DATA_BIAS / 2048) * 2048;
     1107    23517             /* 2048 = max size of run-unit record in units of L6 words     */
     1108    23518
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:36   
     1109    23519    3                RD_PARAMS.TOT_SECTSZ =
     1110    23520    3                  (SETFP_MSG.DATA_SZ + %GM_ISR1_BASE) - RD_PARAMS.USR_LOC;
     1111    23521
     1112    23522    3                RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_DATA;
     1113    23523
     1114    23524    3                IF SPROC_PARAMS.TYC.SFILE$ = ADDR(NIL)
     1115    23525    4                THEN DO;
     1116    23526    4                     CALL GJS$READ_RU(RD_PARAMS) ALTRET(READ_ALTRETURN);
     1117    23527    4                     END;
     1118    23528
     1119    23529
     1120    23530    4                ELSE DO;
     1121    23531    4                     GP_PARAMS.VP# = RD_PARAMS.USR_LOC / 256;
     1122    23532    4                     GP_PARAMS.PGSZ = (RD_PARAMS.TOT_SECTSZ +255) / 256;
     1123    23533
     1124    23534    4                     CALL GJU$GET_DATA(GP_PARAMS) ALTRET(READ_ALTRETURN);
     1125    23535    4                     END;
     1126    23536
     1127    23537    3                END/*DO if any user data*/;
     1128    23538    2           END/* Do if VDPGS ~0 */;
     1129    23539
     1130    23540        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:37   
     1131    23541        /*D* Now, get the pages for procedure if not yet shared and update
     1132    23542             the entry in the processor table with the physical page number.
     1133    23543        */
     1134    23544    1      GP_PARAMS.VP# = G$JIT.PLL;
     1135    23545    1      GP_PARAMS.PGSZ = SETFP_MSG.VPPGS;
     1136    23546
     1137    23547    1      RD_PARAMS.USR_LOC = (GP_PARAMS.VP# * 256);
     1138    23548    1      RD_PARAMS.TOT_SECTSZ = SETFP_MSG.PROC_SZ;
     1139    23549    1      RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_PROC;
     1140    23550
     1141    23551    1      G$JIT.PCP = SETFP_MSG.VPPGS;
     1142    23552    1      PGSZ_USR = PGSZ_USR - SETFP_MSG.VPPGS;
     1143    23553
     1144    23554    1      CALL GJU$GET_PROC(GP_PARAMS) ALTRET(READ_ALTRETURN);
     1145    23555
     1146    23556        /*D* If this is an initial LCP-6 user with an initialized data segment,
     1147    23557             get the pages for the user dynamic data segment 1 and read the
     1148    23558             data from the boot image.
     1149    23559        */
     1150    23560    1      IF G$JIT.PROG_ENTRY = %G_PE_BF#
     1151    23561    2      THEN DO;
     1152    23562    2           IF G$MSG$->G$SETFP_MSG.DS1_SZ ~= 0
     1153    23563    3           THEN DO;
     1154    23564    3                PGSZ_USR_DS1 = (G$MSG$->G$SETFP_MSG.DS1_SZ +255) / 256;
     1155    23565    3                CALL GMA$GET(%GM_USR_DS1#, PGSZ_USR_DS1,
     1156    23566    3                  %G_R_USR#,%G_R_USR#,%G_RING0#) ALTRET(MM_ALTRETURN);
     1157    23567
     1158    23568    3                RD_PARAMS.TOT_SECTSZ = G$MSG$->G$SETFP_MSG.DS1_SZ;
     1159    23569    3                RD_PARAMS.USR_LOC$ = G$USRDS1$;
     1160    23570    3                RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_DS1;
     1161    23571
     1162    23572    3                CALL GJS$READ_RU(RD_PARAMS) ALTRET(READ_ALTRETURN);
     1163    23573
     1164    23574    3                G$JIT.PCDS = PGSZ_USR_DS1;
     1165    23575    3                END/*do if init data seg*/;
     1166    23576    2           END/*do if initial handler*/;
     1167    23577
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:38   
     1168    23578        /*D* Finally, copy any library data into the user's data pages.
     1169    23579        */
     1170    23580    1      IF PGSZ_LIB_DATA ~= 0
     1171    23581    2      THEN DO;
     1172    23582    2           GP_PARAMS.SHARE = SLIB_PARAMS.TYC;
     1173    23583    2           GP_PARAMS.SHARE.SHARE_PROC = %GJ_COPYDATA#;
     1174    23584    2           GP_PARAMS.VP# = G$JIT.DLL;
     1175    23585    2           GP_PARAMS.PGSZ = PGSZ_LIB_DATA;
     1176    23586
     1177    23587    2           CALL GJU$GET_PROC(GP_PARAMS) ALTRET(READ_ALTRETURN);
     1178    23588    2           END;
     1179    23589
     1180    23590        /*D* All memory for starting this job step is now allocated.  Reset
     1181    23591             GM_STEP so other users aren't blocked.
     1182    23592        */
     1183    23593    1      GM_STEP = GM_STEP - ASZ_USR;
     1184    23594    1      ASZ_USR = 0;
     1185    23595
     1186    23596        /*D* If the CCBUF bit is set in the SETFP message, the contents
     1187    23597             of JIT.CCBUF are read next.
     1188    23598        */
     1189    23599    1      IF SETFP_MSG.FLAGS.CCBUF
     1190    23600    2      THEN DO;
     1191    23601    2           FCN_MSG.FCN = %GJ_GETCCBUF#;
     1192    23602    2           CALL KNA$WRITE(%G_M$LM#,FCN_MSG_,FCN_MSG.ERR) ALTRET(ENTER_ABORTM);
     1193    23603
     1194    23604    2           V_ = VECTOR(G$JIT.CCBUF);
     1195    23605    2           CALL KNA$READ(%G_M$LM#,V_,FCN_MSG.ERR) ALTRET(ENTER_ABORTM);
     1196    23606    2           END;
     1197    23607
     1198    23608        /*D* Write a message to the host to let him know we are done.
     1199    23609             Then read it back to keep in sync with KIF$FPRG on the host.
     1200    23610             If the error code in the returned message is set, it indicates
     1201    23611             that an error has occured previously (read a NAK as data, for
     1202    23612             example).
     1203    23613        */
     1204    23614    1      IF G$JIT.PROG_ENTRY ~= %G_PE_BF#
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:39   
     1205    23615    2      THEN DO;
     1206    23616    2           FCN_MSG.ERR = '0'B;
     1207    23617    2           FCN_MSG.FCN = %GJ_GETDONE#;
     1208    23618    2           CALL KNA$WRITE(%G_M$LM#,FCN_MSG_,ERR);
     1209    23619    2           CALL KNA$READ(%G_M$LM#,FCN_MSG_,ERR);
     1210    23620    2           IF FCN_MSG.ERR ~= '0'B
     1211    23621    3           THEN DO;
     1212    23622    3                G$JIT.JUNK.HOST_STEP_ABRT = '1'B;
     1213    23623    3                GOTO ENTER_ABORTM;
     1214    23624    3                END;
     1215    23625
     1216    23626    2           END;
     1217    23627
     1218    23628
     1219    23629        /*D* Complete initialization of the Read Only Segment.
     1220    23630        */
     1221    23631    1      UDCBNUM = SETFP_MSG.UDCBNUM;
     1222    23632    1      DCBRES = SETFP_MSG.DCBRES;
     1223    23633
     1224    23634    1      G$ROS.NUMDCBS = UDCBNUM + DCBRES + %G_LAST_RES_DCB#;
     1225    23635
     1226    23636        /*D* Adjust the DCB pointer table from the run-unit's ROS record
     1227    23637             to really point at the DCB.
     1228    23638        */
     1229    23639    1      LAST_USR_DCB = %G_FRST_USR_DCB# + UDCBNUM -1;
     1230    23640    2      DO I = %G_FRST_USR_DCB# TO LAST_USR_DCB;
     1231    23641    2           G$ROS.DCBPTR$->G$DCBTABLE(I) =
     1232    23642    2             PINCRW(G$ROS.DCBPTR$->G$DCBTABLE(I),SIZEW(G$ROS)-SIZEW(G$ROS_EXT) );
     1233    23643
     1234    23644    2           G$ROS.DCBPTR$->G$DCBTABLE(I)->G$DCB.DCB# = I;
     1235    23645    2           END;
     1236    23646
     1237    23647    2      DO I = LAST_USR_DCB+1 TO LAST_USR_DCB + DCBRES;
     1238    23648    2           G$ROS.DCBPTR$->G$DCBTABLE(I) = ADDR(NIL);
     1239    23649    2           END;
     1240    23650
     1241    23651        /*D* Adjust the TCB pointers.
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:40   
     1242    23652        */
     1243    23653    1      G$ROS.TCB.ALT$ = PINCRW(G$ROS.AVAIL$,SETFP_MSG.ROS_SZ);
     1244    23654    1      G$ROS.TCB.STK$ = PINCRW(G$ROS.TCB.ALT$,SIZEW(G$EXCFR));
     1245    23655    1      G$ROS.TCB.AVSZ = SETFP_MSG.TCBSIZE * SIZEW(G$NWIO);
     1246    23656    1      G$ROS.TCB.CURRSZ = 0;
     1247    23657    1      G$ROS.TCB.ALT$->G$EXCFR.ALTEMPTY = -1;
     1248    23658
     1249    23659        /*D* Adjust the pointer to and the size of any remaining
     1250    23660             Read Only Segment available space.
     1251    23661        */
     1252    23662    1      G$ROS.AVAIL$ = PINCRW(G$ROS$, USR_ROS_WDSZ-SIZEW(G$ROS_EXT) );
     1253    23663    1      G$ROS.AVAIL$->G$ROS_EXT.NWORDS = (USR_ROS_PGSZ * 256) - USR_ROS_WDSZ;
     1254    23664    1      G$ROS.AVAIL$->G$ROS_EXT.NEXT$ = ADDR(NIL);
     1255    23665
     1256    23666        /*D* Determine the type of accounting that is to be in effect.
     1257    23667        */
     1258    23668    1      IF SETFP_MSG.FLAGS.PROCACC
     1259    23669    1      THEN G$JIT.JUNK.PROCACCT = '1'B;
     1260    23670
     1261    23671    1      IF SETFP_MSG.FLAGS.PROCSURCHG
     1262    23672    2      THEN DO;
     1263    23673    2           G$JIT.JUNK.PROCSURCHG = '1'B;
     1264    23674    2           END;
     1265    23675    1      G$JIT.PROCNAME = G$ROS.M$LM.NAME;
     1266    23676
     1267    23677        /*D* And complete initialization of the JIT.
     1268    23678        */
     1269    23679    1      IF SETFP_MSG.FLAGS.XEQ_ONLY
     1270    23680    1      THEN G$JIT.JUNK.EXONLY = '1'B;
     1271    23681
     1272    23682    1      G$JIT.PRIV.PRC = SETFP_MSG.PRIV;
     1273    23683
     1274    23684    1      GMA_SEGX = (G$JIT.DLL /256) + 15;
     1275    23685    1      GMA_#PGS = (G$JIT.PUL /256) + 15;
     1276    23686    2      DO I=GMA_SEGX TO GMA_#PGS;
     1277    23687    2           G$JIT.FIRST_SEG(I) = '1'B;
     1278    23688    2           END;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:41   
     1279    23689
     1280    23690    1      IF G$JIT.LLL <= G$JIT.LUL
     1281    23691    2      THEN DO;
     1282    23692    2           GMA_SEGX = (G$JIT.LLL /256) + 15;
     1283    23693    2           GMA_#PGS = (G$JIT.LUL /256) + 15;
     1284    23694    3           DO I=GMA_SEGX TO GMA_#PGS;
     1285    23695    3                G$JIT.FIRST_SEG(I) = '1'B;
     1286    23696    3                END;
     1287    23697    2           END;
     1288    23698
     1289    23699    1      G$JIT.RUNFLAGS = %G_RUN_USER#;
     1290    23700
     1291    23701        /* Initialize JIT.PEAK_MEM for this job step.
     1292    23702        */
     1293    23703    1      G$JIT.PEAK_MEM=G$JIT.PCD             /* Static data              */
     1294    23704    1        +G$JIT.PCDS                        /* User Data Segments       */
     1295    23705    1        +G$JIT.PCL                    /* Unshared Library procedure*/
     1296    23706    1        +G$JIT.PCDDS                       /* Debugger data segment    */
     1297    23707    1        +G$JIT.PCC                         /* Context                  */
     1298    23708    1        +G$JIT.PCROS;                      /* Read Only Segment        */
     1299    23709
     1300    23710    1      IF NOT G$JIT.MMFLGS.FREE_PPGS THEN
     1301    23711    1           G$JIT.PEAK_MEM=G$JIT.PEAK_MEM+G$JIT.PCP; /* Procedure pages */
     1302    23712
     1303    23713        /*D* Modify the TSA frame for entering the user.
     1304    23714
     1305    23715             The program start address -1 is used as the initial Program
     1306    23716             Counter as the return through GUD$MCL_HAND (via GJM$MCL) will
     1307    23717             cause TSA.P$ to be bumped by 1 for a normal return from MCL
     1308    23718             processing.  However, If starting a program under control of a
     1309    23719             debugger, the start address is left alone as we will be altreting
     1310    23720             to the MCL handler.
     1311    23721
     1312    23722             The Status Register is replaced with one that contains the
     1313    23723             Ring number for the user.
     1314    23724        */
     1315    23725    1      G$TSA.P$$ = SETFP_MSG.P$$;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:42   
     1316    23726    1      IF NOT(SETFP_MSG.FLAGS.DEBUG)
     1317    23727    1      THEN G$TSA.P = G$TSA.P -1;
     1318    23728    1      G$TSA.Z.IS = 0;
     1319    23729    1      G$TSA.S = USR_STATUS_REG;
     1320    23730
     1321    23731        /*D* If this is an initial LCP-6 user, the count of the number
     1322    23732             of such users is decremented.  If this is the last one of
     1323    23733             that type a message is sent over the coupler to tell the
     1324    23734             host that the boot process has been completed.
     1325    23735        */
     1326    23736    1      IF G$JIT.PROG_ENTRY = %G_PE_BF#
     1327    23737    2      THEN DO;
     1328    23738                %LOCK (G=GJ_BOOT_LOCK);
     1329    23745    2           GJ_BOOT_HNDLRS = GJ_BOOT_HNDLRS-1;
     1330    23746
     1331    23747    2           IF GJ_BOOT_HNDLRS = 0
     1332    23748    3           THEN DO;
     1333    23749    3                G$MHJIT.ASDT_MON.BIGFOOT.V='0'B;
     1334    23750                     %UNLOCK(G=GJ_BOOT_LOCK);
     1335    23757    3                CALL GHH$WDTF;
     1336    23758    3                CALL GIR$MLCPDUMP;
     1337    23759    3                CALL GIR$INITCHANS('0'B);
     1338    23760    3                CALL GHH$WDTN;
     1339    23761    3                CALL GHH$RTCN;
     1340    23762                     %LOCK(G=GJ_BOOT_LOCK);
     1341    23769    3                IF GI_ENDBOOT ~= ENTADDR(NIL)
     1342    23770    3                THEN CALL GI_ENDBOOT;
     1343    23771    3                IF GH_KEEPDELTA
     1344    23772    3                THEN CALL GDA$INIT_DONE;
     1345    23773    3                END /* DO if the last BF user */;
     1346    23774
     1347    23775        /*D* But if more initial user's are waiting to be read over the
     1348    23776             coupler, this user is REGed to wait till all initial users
     1349    23777             are started and Node Admin has been initialized.
     1350    23778        */
     1351    23779                %UNLOCK (G=GJ_BOOT_LOCK);
     1352    23786    3           DO WHILE (GJ_BOOT_HNDLRS ~= -1);
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:43   
     1353    23787
     1354    23788        /*D* If the number of handlers is 0 and this is NODE ADMIN let
     1355    23789             him start.  Node Admin will write to BABOON when it is okay
     1356    23790             to let other users start up who will change GJ_BOOT_HNDLRS
     1357    23791             to a -1.
     1358    23792         */
     1359    23793    3                IF GJ_BOOT_HNDLRS = 0 AND G$JIT.USR# = 1
     1360    23794    3                THEN EXIT;
     1361    23795    3                CALL GHS$REG(%GH_EVSL,1);
     1362    23796    3                END;
     1363    23797    2           END /* DO if Bigfoot user */;
     1364    23798
     1365    23799        /*D*  If this completes the process of installing the processor,
     1366    23800              the initialization of the shared file table entry is completed
     1367    23801              and a call is made to GHS$RUE to wake-up all users that may be
     1368    23802              waiting for it.
     1369    23803        */
     1370    23804    1      IF SPROC_PARAMS.TYC.SHARE_PROC = %GJ_SHARE#
     1371    23805    2      THEN DO;
     1372    23806                %LOCK (G=G_SLOCK);
     1373    23813    2           G$SFILE.LCP6_FLGS(SPROC_PARAMS.PNUM)
     1374    23814    2             = (G$SFILE.LCP6_FLGS(SPROC_PARAMS.PNUM) &~ %LCP6_INST#);
     1375    23815                %UNLOCK (G=G_SLOCK);
     1376    23822    2           CALL GHS$RUE(%GH_EVUQFP);
     1377    23823    2           END;
     1378    23824
     1379    23825        /*D* If this is a Handler we have just started, close M$LM.
     1380    23826        */
     1381    23827    1      IF G$JIT.MODE = %G_M_HANDLER#
     1382    23828    2      THEN DO;
     1383    23829    2           CALL KNA$CLOSE(%G_M$LM#,ERR);
     1384    23830    2           END;
     1385    23831
     1386    23832        /*D* If this is M$LDTRC to a run-unit that is to be debugged, the
     1387    23833             TRAP# in the TSA is set to the LDTRC code.  Then the ALTRET
     1388    23834             code in the MCL parameters will cause the debugger to be entered.
     1389    23835
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:44   
     1390    23836             If this is M$SETFP and to be debugged, the user is REGed to wait
     1391    23837             for the host debugger to send the ALIB msg at which time U_ALIBFD
     1392    23838             will be set in the user's async flags.  Then the TRAP# in the TSA
     1393    23839             is set to the start-up indicator.  The special ALTRET code
     1394    23840             is set in the MCL parameters to cause entry to the debugger.
     1395    23841        */
     1396    23842    1      IF SETFP_MSG.FLAGS.DEBUG
     1397    23843    2      THEN DO;
     1398    23844    2           IF G$JIT.SPROC# = 0
     1399    23845    3           THEN DO;
     1400    23846    3                GMA_1ST = (G$JIT.PLL / 256) -1;
     1401    23847    3                GMA_SEGX = (G$JIT.PUL / 256) -1;
     1402    23848
     1403    23849    4                DO I=GMA_1ST TO GMA_SEGX;
     1404    23850    4                     G$JIT.DB_WRTSEGS(I) ='1'B;
     1405    23851    4                     END;
     1406    23852    3                END;
     1407    23853
     1408    23854    2           IF G$JIT.PROG_ENTRY = %G_PE_LDTRC#
     1409    23855    3           THEN DO;
     1410    23856    3                G$TSA.I.TRAP# = %G_FPRG_START2#;
     1411    23857    3                G$JIT.JUNK.UDELTA = '1'B;
     1412    23858                     %LOCK (G=G_ASFGATE);
     1413    23865    3                G$MHJIT.CU$->G$U.ASYNCH = (G$MHJIT.CU$->G$U.ASYNCH | %U_ALIBFD);
     1414    23866                     %UNLOCK (G=G_ASFGATE);
     1415    23873    3                END;
     1416    23874    3           ELSE DO;
     1417    23875    4                DO WHILE (G$MHJIT.CU$->G$U.ASYNCH = '0000'X);
     1418    23876    4                     CALL GHS$REG(%GH_EVSL,1)
     1419    23877    5                     WHENALTRETURN DO;
     1420    23878    5                          EXIT/* got message */;
     1421    23879    5                          END;
     1422    23880    4                     END/* do while not ALIBFD*/;
     1423    23881    3                G$TSA.I.TRAP# = %G_FPRG_START#;
     1424    23882    3                END;
     1425    23883    2           GUD_PARAMS.ERR = EALTRET;
     1426    23884    2           END;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:45   
     1427    23885
     1428    23886        /*D*  Clean up the stack of the GJI$INIT_USR frame.
     1429    23887        */
     1430    23888    1      IF GUD_PARAMS.MCL.CODE = %G_MCL_CPEXIT#
     1431    23889    2      THEN DO;
     1432    23890    2           T$ = PINCRW (G$TSTACKU$,-G$TSTACKU$->G$STACK_HDR.CW);
     1433    23891    3           DO WHILE '1'B;
     1434    23892    3                IF PINCRW (T$,T$->G$STACK_FRAME.WDS+6) >= G$TSTACKU$ THEN EXIT;
     1435    23893    3                I = T$->G$STACK_FRAME.WDS + 1;
     1436    23894    3                T$ = PINCRW(T$, I);
     1437    23895    3                END;
     1438    23896    2           PINCRW (T$, -I)->G$STACK_FRAME.WDS = I + T$->G$STACK_FRAME.WDS;
     1439    23897    2           END;
     1440    23898
     1441    23899        /*D*  Now, begin executing the user program by returning through
     1442    23900              the normal MCL exit which will cause the trap handler to
     1443    23901              RTT to the user.
     1444    23902        */
     1445    23903    1      G$JIT.JUNK.STEP = '0'B;
     1446    23904    1      CALL GJS$USRGO;
     1447    23905    1      RETURN;
     1448    23906
     1449    23907    1   END GJS$STEP;
     1450    23908        %EOD;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:46   
--  Include file information  --

   GH_SCHD_E.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   OC_SUBS_C.:E05TOU  is referenced.
   UD_SCODE_C.:E05TOU  is referenced.
   J_SCODE_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   J_ERRORS_C.:E05TOU  is referenced.
   FR_ERRORS_C.:E05TOU  is referenced.
   UD_ERRORS_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   G_SFILE_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   GU_MACROS_M.:E05TOU  is referenced.
   GM_MACRO_M.:E05TOU  is referenced.
   GJ_MACROS_M.:E05TOU  is referenced.
   GJ_MSG_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   GH_HARDWARE_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GJS$STEP.

   Procedure GJS$STEP requires 3435 words for executable code.
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:47   
   Procedure GJS$STEP requires 238 words of local(AUTO) storage.

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:48   

 Object Unit name= GJS$STEP                                   File name= GJS$STEP.:E05TOU
 UTS= JUL 29 '97 22:04:36.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Data  even  none     6      6  GJS$STEP
    1  RoData even  UTS     48     30  GJS$STEP
    2   Proc  even  none  3435    D6B  GJS$STEP
    3  RoData even  none    33     21  GJS$STEP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        1  GJS$STEP

  ****  Data defs  ****

 Sect HexLoc  Name                           Sect HexLoc  Name
    1      0  GJI_KEYMES_INIT
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:49   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 KNB$GETRESP
         yes           Std       1 SCREECH
 yes     yes           Std       1 GHH$UNLOCK
 yes     yes           Std       1 GJU$GET_PROC
 yes     yes           Std       1 GJU$GET_DATA
 yes     yes           Std       1 GMA$REL_ACCTMEM
 yes     yes           Std       5 GMA$GET
         yes           Std       0 GHH$WDTN
 yes     yes           Std       4 KNA$OPEN
 yes     yes           Std       2 GHS$REG
 yes     yes           Std       1 GHH$LOCK
 yes     yes           Std       4 GHS$RUE
         yes           Std       1 KNA$MCL
 yes     yes           Std       4 KNA$READ
 yes     yes           Std       1 GJS$OPEN_SHARED
 yes     yes           Std       1 GJS$REL_ALL
 yes     yes           Std       1 GJS$READ_RU
 yes     yes           Std       0 GDA$INIT_DONE
 yes     yes           Std       1 GMA$CHKSIZE
         yes           Std       0 GHH$RTCN
 yes     yes           Std       4 KNA$WRITE
 yes     yes           Std       1 GJS$CLOSE_SHARED
         yes           Std       1 GJS$ABORTM
         yes           Std       1 GJS$RUND
 yes     yes           Std       3 GMA$CVM
         yes           Std       1 GIR$INITCHANS
         yes           Std       1 GHI$UTS
         yes           Std       0 GIR$MLCPDUMP
         yes           Std       0 GHH$WDTF
 yes     yes           Std       2 KNA$CLOSE
         yes           Std       0 GJS$USRGO
                       nStd      0 X6A_AUTO_1
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:50   
                       nStd      0 X6A_ARET
                       nStd      0 X6C_ALR

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$ASDT_USR$                      r    G$TSA_USR$                            G$TSTACKU$
r    G$ROS$                           r    G$JIT$                           r    G$USRDS1$
r    G$MHJIT$                         r    G$UHJIT$                              GJ_SFILE_START$
     GJ_QUIET                              GJ_ON_COUNT                           GJ_SABRT_COUNT
     GFR_PSUDO_NM                          GFR_PSUDO_MAX_SYS                     GFR_PSUDO_CUR_SYS
     GFR_PSUDO_MAX$                        GFR_PSUDO_CUR$                        GI_ENDBOOT
     G_BOOTTIME                            GM_ASHUF                              GM_SHUF
     GM_STEP                               GM_REG_4_MEM                          GM_ROS_PGSZ
     GH_KEEPDELTA                          GJ_BOOT_HNDLRS                        GJ_BOOT_LOCK
     G_SLOCK                               GFR_RES_LOCK                          G_ASFGATE
r    G$ROS$
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:51   


        1        1        /*M* GJS$STEP   Associate a processor or fetch a program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0,CRM=70   */
        8        8
        9        9        /*F*  NAME: GJS$STEP
       10       10
       11       11              PURPOSE:  To associate a run-unit with a user either by
       12       12                        mapping it from the shared file tables or reading
       13       13                        it from the host.
       14       14
       15       15        */
       16       16
       17       17        /*D*   NAME:  GJS$STEP
       18       18
       19       19               CALL:  CALL GJS$STEP
       20       20
       21       21                      Entered from GJM$MCL to process the user's M$LDTRC request.
       22       22
       23       23                      Also entered from GJM$MCL for a M$CPEXIT
       24       24                      monitor service request, when there is no FPT
       25       25                      specified on the request; i.e. when the request
       26       26                      was made in the monitor.
       27       27
       28       28               DESCRIPTION:
       29       29        */
       30       30
       31       31        GJS$STEP: PROC(GUD_PARAMS);

     31   2 000000  D380 0000 0000  xent GJS$STEP        LNJ,B5   X6A_AUTO_1
          2 000003       00EE 0001                       DC       238,1

       32       32
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:52   
       33       33
       34       34        %INCLUDE GH_HARDWARE_M;
       35      132        %INCLUDE GH_GATE_M;
       36      173        %INCLUDE GH_SCHD_M;
       37      317        %INCLUDE GJ_MSG_M;
       38      630        %INCLUDE GJ_MACROS_M;
       39     1103        %INCLUDE GM_MACRO_M;
       40     1585        %INCLUDE GU_MACROS_M;
       41     1744        %INCLUDE G_ROS_M;
       42     1826        %INCLUDE G_HJIT_M;
       43     1971        %INCLUDE G_JIT_M;
       44     2236        %INCLUDE G_SFILE_M;
       45     2296        %INCLUDE KL_MACRO_C;
       46     5648        %INCLUDE KL_AFCN_C;
       47     5749        %INCLUDE LCP_6;
       48     5940
       49     5941        %INCLUDE UD_ERRORS_C;
       50     5983        %INCLUDE FR_ERRORS_C;
       51     6014        %INCLUDE J_ERRORS_C;
       52     6101        %INCLUDE M_ERRORS_C;
       53     6165        %INCLUDE J_SCODE_C;
       54     6193        %INCLUDE UD_SCODE_C;
       55     6205        %INCLUDE OC_SUBS_C;
       56     6936        %INCLUDE GM_VIRTUAL_E;
       57     7146        %INCLUDE GH_SCHD_E;
       58     7242
       59     7243                                                /* Input parameter          */
       60     7244        %GUD_HAND_PARAMS (FPTN=GUD_PARAMS);
       61     7320                                                /* Auto Storage             */
       62     7321    1   DCL V_ VECTOR;
       63     7322    1   DCL FCN_MSG_ VECTOR;
       64     7323    1   DCL T$ PTR;
       65     7324    1   DCL G$MSG$ PTR;
       66     7325    1   DCL SEGS_64K UBIN;
       67     7326    1   DCL PGS_REMAINING UBIN;
       68     7327    1   DCL PSEUDO_NEEDED UBIN;
       69     7328    1   DCL I SBIN;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:53   
       70     7329    1   DCL IU REDEF I UBIN;
       71     7330    1   DCL USR_ROS_WDSZ UBIN;
       72     7331    1   DCL USR_ROS_PGSZ UBIN;
       73     7332    1   DCL EXTRA_ROS_PGSZ UBIN;
       74     7333    1   DCL UDCBNUM UBIN;
       75     7334    1   DCL DCBRES UBIN;
       76     7335    1   DCL TCBSZ UBIN;
       77     7336    1   DCL LAST_USR_DCB UBIN;
       78     7337    1   DCL PGSZ_USR UBIN;
       79     7338    1   DCL PGSZ_LIB_DATA UBIN;
       80     7339    1   DCL PGSZ_LIB_PROC UBIN;
       81     7340    1   DCL PGSZ_USR_DS1 UBIN;
       82     7341    1   DCL CUR_PGSZ UBIN;
       83     7342    1   DCL ASZ_USR UBIN;
       84     7343    1   DCL RELEASE_ON_ERROR BIT(1) ALIGNED;
       85     7344
       86     7345    1   DCL GMA_VP# UBIN;
       87     7346    1   DCL GMA_SEGX UBIN;
       88     7347    1   DCL GMA_#PGS UBIN;
       89     7348    1   DCL GMA_1ST UBIN;
       90     7349
       91     7350        %VLP_ERRCODE (FPTN=ERR,STCLASS=AUTO);
       92     7396
       93     7397        %GJ_SETFP_MSG (FPTN=SETFP_MSG,STCLASS=AUTO);
       94     7606        %GJ_ALIB_DATA (FPTN=ALIB_DATA,STCLASS=AUTO);
       95     7700
       96     7701
       97     7702        %GJ_FCN_MSG (FPTN=FCN_MSG,STCLASS=AUTO);
       98     7772
       99     7773        %GJ_SFILE_PARAMS (FPTN=SPROC_PARAMS,STCLASS=AUTO);
      100     7913        %GJ_SFILE_PARAMS (FPTN=SLIB_PARAMS,STCLASS=AUTO,GEN_EQUS=NO);
      101     8053
      102     8054        %GJ_READ_PARAMS (FPTN=RD_PARAMS,STCLASS=AUTO);
      103     8151
      104     8152        %GJ_GETPROC_PARAMS (FPTN=GP_PARAMS,STCLASS=AUTO);
      105     8197
      106     8198        %GM_CHKSZ_PARAMS (FPTN=CHKSZ);
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:54   
      107     8292
      108     8293        %FPT_GLINEATTR(FPTN=GLINEATTR,VECTORS=NO,STCLASS=AUTO);
      109     8318        %VLP_LINEATTR(FPTN=LINEATTR,STCLASS=AUTO);
      110     8340
      111     8341                                                /* External Data            */
      112     8342
      113     8343    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
      114     8344    1   DCL G$TSA_USR$ PTR SYMREF READONLY;
      115     8345    1   DCL G$TSTACKU$ PTR SYMREF;
      116     8346    1   DCL G$ROS$ PTR SYMREF READONLY;
      117     8347    1   DCL G$JIT$ PTR SYMREF READONLY;
      118     8348    1   DCL G$USRDS1$ PTR SYMREF READONLY;
      119     8349    1   DCL G$MHJIT$ PTR SYMREF READONLY;
      120     8350    1   DCL G$UHJIT$ PTR SYMREF READONLY;
      121     8351    1   DCL GJ_SFILE_START$ PTR SYMREF;
      122     8352
      123     8353    1   DCL GJ_QUIET UBIN SYMREF;
      124     8354    1   DCL GJ_ON_COUNT UBIN SYMREF;
      125     8355    1   DCL GJ_SABRT_COUNT UBIN SYMREF;
      126     8356    1   DCL GFR_PSUDO_NM(0:7) CHAR(8) SYMREF;
      127     8357    1   DCL GFR_PSUDO_MAX_SYS(0:7) SBIN SYMREF;
      128     8358    1   DCL GFR_PSUDO_CUR_SYS(0:7) SBIN SYMREF;
      129     8359    1   DCL GFR_PSUDO_MAX$(0:4) PTR SYMREF;
      130     8360    1   DCL GFR_PSUDO_CUR$(0:4) PTR SYMREF;
      131     8361    1   DCL GI_ENDBOOT EPTR SYMREF;
      132     8362    1   DCL G_BOOTTIME UBIN(32) SYMREF;
      133     8363    1   DCL GM_ASHUF UBIN SYMREF;
      134     8364    1   DCL GM_SHUF UBIN SYMREF;
      135     8365    1   DCL GM_STEP UBIN SYMREF;
      136     8366    1   DCL GM_REG_4_MEM UBIN SYMREF;
      137     8367    1   DCL GM_ROS_PGSZ UBIN SYMREF;
      138     8368    1   DCL GH_KEEPDELTA BIT(1) SYMREF;
      139     8369    1   DCL GJ_BOOTBASE UBIN(32) SYMREF;
      140     8370    1   DCL GJ_BOOTSIZE UBIN(32) SYMREF;
      141     8371    1   DCL GJ_BOOTCHAN  UBIN SYMREF;
      142     8372    1   DCL GJ_BOOT_HNDLRS  SBIN SYMREF;
      143     8373
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:55   
      144     8374        %GATE (FPTN=GJ_BOOT_LOCK,STCLASS=SYMREF);
      145     8393        %GATE (FPTN=G_SLOCK,STCLASS=SYMREF);
      146     8412        %GATE (FPTN=GFR_RES_LOCK,STCLASS=SYMREF);
      147     8431        %GATE (FPTN=G_ASFGATE,STCLASS=SYMREF);
      148     8450
      149     8451                                                /* Internal data            */
      150     8452
      151     8453        %KL_CWNAK (FPTN=CWNAK);
      152     8518        %KL_KEYMES (FPTN=KEYMES,STCLASS=AUTO,LAST=",",NPARMS=3);
      153     8657    1         2 SYSID UBIN UNAL,
      154     8658    1         2 ACCT CHAR(8) UNAL,
      155     8659    1         2 UNAME CHAR(12) UNAL;
      156     8660
      157     8661        %KL_KEYMES (FPTN=GJI_KEYMES_INIT,STCLASS="CONSTANT SYMDEF",LAST=";",NPARMS=3,
      158     8662             MSG#=OC_MSG_UON#,CNSFNC=OC_WR,
      159     8663             SIZE_INIT="2,8,12",TYPE_INIT="%KL_TYPE_BIN,%KL_TYPE_NORM*2");
      160     8802
      161     8803        %G$STATUS_REG (FPTN=USR_STATUS_REG,
      162     8804                       LEVEL=%G_IL_USER#,
      163     8805                       RING=G_R_USR#,
      164     8806                       STCLASS=CONSTANT);
      165     8827
      166     8828        %VLP_ERRCODE (FPTN=EALTRET,ERR#=%E$ALTRET,SEV=G_SEV_ERROR#,
      167     8829                         STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      168     8875
      169     8876        %VLP_ERRCODE (FPTN=ESUOUT,ERR#=%E$SUOUT,SEV=G_SEV_ERROR#,
      170     8877                         STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      171     8923
      172     8924        %VLP_ERRCODE (FPTN=EBSUNM,ERR#=%E$BSUNM,SEV=G_SEV_ERROR#,
      173     8925                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      174     8971
      175     8972        %VLP_ERRCODE (FPTN=EMEMLIMIT,ERR#=%E$MEMLIMIT,SEV=G_SEV_ERROR#,
      176     8973                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      177     9019
      178     9020        %VLP_ERRCODE (FPTN=EPHYS_MEMLIMIT,ERR#=%E$PHYS_MEMLIMIT,SEV=G_SEV_ERROR#,
      179     9021                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      180     9067
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:56   
      181     9068        %VLP_ERRCODE (FPTN=ENO_START,ERR#=%E$NO_START,SEV=G_SEV_ERROR#,
      182     9069                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      183     9115
      184     9116        %VLP_ERRCODE (FPTN=EMMFAILED,ERR#=%E$MEMLIMIT,SEV=G_SEV_ABORT#,
      185     9117                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      186     9163
      187     9164        %VLP_ERRCODE (FPTN=ELIBSIZE,ERR#=%E$LIBSIZE,SEV=G_SEV_ABORT#,
      188     9165                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      189     9211
      190     9212        %VLP_ERRCODE (FPTN=EBADHEAD,ERR#=%E$BADHEAD,SEV=G_SEV_ABORT#,
      191     9213                            STCLASS=CONSTANT,FCG=GJ,MID=S,MON='1'B);
      192     9259
      193     9260        %VLP_SCODE (FPTN=SMING,ERR#=%S$MING,SEV=G_SEV_SCREECH#,
      194     9261                     STCLASS=CONSTANT,FCG=GJ,MID=I,MON='1'B);
      195     9322
      196     9323        %VLP_SCODE (FPTN=SDELUSR,ERR#=%S$DELUSR,SEV=G_SEV_SUA#,
      197     9324                     STCLASS=CONSTANT,FCG=GJ,MID=I,MON='1'B);
      198     9385
      199     9386        %VLP_SCODE (FPTN=SFCNCODE,ERR#=%S$BAD_LCP6_FCN,SEV=G_SEV_SUA#,
      200     9387                     STCLASS=CONSTANT,FCG=GJ,MID=I,MON='1'B);
      201     9448
      202     9449                                                /* BASED Structures         */
      203     9450    1   DCL G$CCBUF CHAR(GUD_PARAMS.BND.PAR5) BASED;
      204     9451    1   DCL G$PSUDO(0:7) SBIN BASED;
      205     9452    1   DCL 1 B$STARFILE BASED,
      206     9453    1         2 CNT UBIN BYTE UNAL,
      207     9454    1         2 TEXT CHAR(1) UNAL;
      208     9455        %G$ASDT (FPTN=G$ASDT_USR,STCLASS="BASED(G$ASDT_USR$)");
      209     9484        %G$ROS (FULL=YES,STCLASS="BASED(G$ROS$)");
      210    10435        %G$ROS_AVAIL_HDR (FPTN=G$ROS_EXT);
      211    10455        %G$DCBTABLE;
      212    10466        %G$MHJIT(STCLASS="BASED(G$MHJIT$)");
      213    17340        %G$UHJIT(STCLASS="BASED(G$UHJIT$)");
      214    20314        %G$JIT (STCLASS="BASED(G$JIT$)");
      215    20728        %G$STACK_HDR;
      216    20744    1   DCL 1 G$STACK_FRAME BASED ALIGNED,
      217    20745    1         2 WDS SBIN;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:57   
      218    20746        %G$TSA (STCLASS="BASED(G$TSA_USR$)");
      219    21134        %G$USER;
      220    21145        %G$EXCFR;
      221    21527        %G$NWIO;
      222    21937        %G$SFILE (FPTN=G$SFILE,STCLASS="BASED(GJ_SFILE_START$)");
      223    21974        %M$DCB (DCBN=G$DCB,STCLASS=BASED);
      224    22025        %GJ_SETFP_MSG (FPTN=G$SETFP_MSG,STCLASS=BASED,BOOT=YES);
      225    22234        %GJ_SETFP_MSG (FPTN=G$SETFP,STCLASS=BASED,BOOT=NO);
      226    22443        %GJ_PROFILE_MSG (FPTN=G$PROFILE_MSG,STCLASS=BASED);
      227    22528
      228    22529
      229    22530                                                /*   External Procedures    */
      230    22531    1   DCL GDA$INIT_DONE ENTRY ALTRET;
      231    22532    1   DCL GHH$IO ENTRY(1) ALTRET;
      232    22533    1   DCL GHH$WDTF ENTRY;
      233    22534    1   DCL GHH$WDTN ENTRY;
      234    22535    1   DCL GHH$RTCN ENTRY;
      235    22536    1   DCL GHI$UTS ENTRY(1);
      236    22537    1   DCL GHS$REG ENTRY(2) ALTRET;
      237    22538    1   DCL GHS$RUE ENTRY(4) ALTRET;
      238    22539    1   DCL GIR$INITCHANS ENTRY(1);
      239    22540    1   DCL GIR$MLCPDUMP ENTRY;
      240    22541    1   DCL GJU$GET_DB ENTRY(2) ALTRET;
      241    22542    1   DCL GJU$GET_PROC ENTRY(1) ALTRET;
      242    22543    1   DCL GJS$ABORTM ENTRY(1);
      243    22544    1   DCL GJS$READ_RU ENTRY(1) ALTRET;
      244    22545    1   DCL GJS$RUND ENTRY(1);
      245    22546    1   DCL GJS$CLOSE_SHARED ENTRY(1) ALTRET;
      246    22547    1   DCL GJU$GET_DATA ENTRY(1) ALTRET;
      247    22548    1   DCL GJS$USRGO ENTRY;
      248    22549    1   DCL GJS$OPEN_SHARED ENTRY(1) ALTRET;
      249    22550    1   DCL GJS$REL_ALL ENTRY(1) ALTRET;
      250    22551    1   DCL GMA$CVM ENTRY(3) ALTRET;
      251    22552    1   DCL GMA$GET ENTRY(5) ALTRET;
      252    22553    1   DCL GMA$CHKSIZE ENTRY(1) ALTRET;
      253    22554    1   DCL GMA$REL_ACCTMEM ENTRY(1) ALTRET;
      254    22555    1   DCL KNA$READ ENTRY(4) ALTRET;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:58   
      255    22556    1   DCL KNA$WRITE ENTRY(4) ALTRET;
      256    22557    1   DCL KNA$CLOSE ENTRY(2) ALTRET;
      257    22558    1   DCL KNA$MCL ENTRY(1);
      258    22559    1   DCL KNA$OPEN ENTRY(4) ALTRET;
      259    22560    1   DCL KNB$GETRESP ENTRY(4) ALTRET;
      260    22561    1   DCL SCREECH ENTRY(1);
      261    22562
      262    22563                                                /* String Substitutions     */
      263    22564        %G$JIT_E;
      264    22626        %GJ_FCN#;
      265    22652        %GJ_SHARE#;
      266    22658
      267    22659        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:59   
      268    22660
      269    22661
      270    22662        /*   Initialize AUTO.
      271    22663        */
      272    22664    1      ERR = '0'B;

  22664   2 000005  8747 0026                            CL       ERR,AUTO
          2 000007  8747 0027                            CL       ERR+1,AUTO

      273    22665    1      FCN_MSG_ = VECTOR(FCN_MSG);

  22665   2 000009  EBC7 0075                            LAB,B6   FCN_MSG,AUTO
          2 00000B  EFC7 00E5                            STB,B6   KEYMES+28,AUTO
          2 00000D  6C05                                 LDV,R6   5
          2 00000E  EF47 00E4                            STR,R6   KEYMES+27,AUTO
          2 000010  ABC7 00E4                            LAB,B2   KEYMES+27,AUTO
          2 000012  2C00                                 LDV,R2   0
          2 000013  6C06                                 LDV,R6   6
          2 000014  BB87                                 LAB,B3   ,AUTO
          2 000015  3C12                                 LDV,R3   18
          2 000016  0008                                 MMM

      274    22666    1      G$MSG$ = ADDR(G$JIT.CCBUF);

  22666   2 000017  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00001A  DBC6 00CE                            LAB,B5   206,B6
          2 00001C  DFC7 000E                            STB,B5   G$MSG$,AUTO

      275    22667
      276    22668    1      RD_PARAMS.DCB# = %G_M$LM#;

  22668   2 00001E  6C02                                 LDV,R6   2
          2 00001F  EF47 0099                            STR,R6   RD_PARAMS+11,AUTO

      277    22669    1      GP_PARAMS.RD_PARAMS$ = ADDR(RD_PARAMS);

  22669   2 000021  CBC7 008E                            LAB,B4   RD_PARAMS,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:60   
          2 000023  CFC7 009C                            STB,B4   GP_PARAMS,AUTO

      278    22670    1      SPROC_PARAMS = '0'B;

  22670   2 000025  5C16                                 LDV,R5   22
          2 000026  0021                                 ALR      ;
          2 000027       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          2 000029       4007 0078                                ALPHANUM(SPROC_PARAMS,AUTO,,R5,FILL)

      279    22671    1      SPROC_PARAMS.FCN = %GJ_OPEN_PROC#;

  22671   2 00002B  4C01                                 LDV,R4   1
          2 00002C  437F                                 CSYNC    s:22671,SPREL
          2 00002D  C7C7 007A                            STH,R4   SPROC_PARAMS+2,AUTO

      280    22672    1      SPROC_PARAMS.FID$ = ADDR(SETFP_MSG.NAME);

  22672   2 00002F  CBC7 002B                            LAB,B4   SETFP_MSG+3,AUTO
          2 000031  CFC7 0078                            STB,B4   SPROC_PARAMS,AUTO

      281    22673    1      SPROC_PARAMS.WAIT = 1;

  22673   2 000033  CF47 007E                            STR,R4   SPROC_PARAMS+6,AUTO

      282    22674    1      SLIB_PARAMS = SPROC_PARAMS;

  22674   2 000035  ABC7 0078                            LAB,B2   SPROC_PARAMS,AUTO
          2 000037  2C00                                 LDV,R2   0
          2 000038  6C16                                 LDV,R6   22
          2 000039  BBC7 0083                            LAB,B3   SLIB_PARAMS,AUTO
          2 00003B  3C00                                 LDV,R3   0
          2 00003C  0008                                 MMM

      283    22675
      284    22676    1      GMA_#PGS=0;

  22676   2 00003D  8747 0024                            CL       GMA_#PGS,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:61   

      285    22677    1      RELEASE_ON_ERROR = '0'B;

  22677   2 00003F  8747 0021                            CL       RELEASE_ON_ERROR,AUTO

      286    22678
      287    22679        /*D* If this a is handler started by BF, the FPRQ message is
      288    22680             is in JIT.CCBUF and the common portion of it is moved to AUTO.
      289    22681        */
      290    22682    1      IF G$JIT.PROG_ENTRY = %G_PE_BF#

  22682   2 000041  82C6 0003                            LB,'00FF'X        3,B6
  22682   2 000043       00FF
          2 000044  0501 000B                            BBT      s:22693,PREL

      291    22683    1      THEN SETFP_MSG = G$MSG$->G$SETFP;

  22683   2 000046  ACC7 000E                            LDB,B2   G$MSG$,AUTO
          2 000048  2C00                                 LDV,R2   0
          2 000049  E870 008C                            LDR,R6   140,IMO
          2 00004B  BB87                                 LAB,B3   ,AUTO
          2 00004C  3C50                                 LDV,R3   80
          2 00004D  0008                                 MMM
          2 00004E  0F81 01FF                            B        s:22823,PREL

      292    22684
      293    22685        /*D* If not a BF handler, but this is the new user's first job step,
      294    22686             a message is sent to KEYIN through BABOON that the new user
      295    22687             is starting.
      296    22688
      297    22689             M$LM and M$ME are opened and an internal call is made to
      298    22690             M$LINEATTR to get the profile name.
      299    22691        */
      300    22692    2      ELSE DO;

      301    22693    2           IF G$JIT.STEP = 0

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:62   
  22693   2 000050  E846 005A                            LDR,R6   90,B6
          2 000052  6981 0138                            BNEZ,R6  s:22758,PREL

      302    22694    3           THEN DO;

      303    22695    3                GJ_ON_COUNT = GJ_ON_COUNT +1;

  22695   2 000054  8A80 0000 0000  xsym                 INC      GJ_ON_COUNT

      304    22696
      305    22697    3                IF GJ_QUIET = 0

  22697   2 000057  B800 0000 0000  xsym                 LDR,R3   GJ_QUIET
          2 00005A  3981 0032                            BNEZ,R3  s:22707,PREL

      306    22698    4                THEN DO;

      307    22699    4                     KEYMES = GJI_KEYMES_INIT;

  22699   2 00005C  DB80 0000 0000  01                   LAB,B5   GJI_KEYMES_INIT
          2 00005F  5C35                                 LDV,R5   53
          2 000060  0021                                 ALR      ;
          2 000061       5F05 0000                                ALPHANUM(0,B5,,31),;
          2 000063       4007 00C9                                ALPHANUM(KEYMES,AUTO,,R5,FILL)

      308    22700    4                     KEYMES.SYSID = G$JIT.SYSID;

  22700   2 000065  AB86                                 LAB,B2   ,B6
          2 000066  2C0A                                 LDV,R2   10
          2 000067  6C02                                 LDV,R6   2
          2 000068  BBC7 00D8                            LAB,B3   KEYMES+15,AUTO
          2 00006A  3C01                                 LDV,R3   1
          2 00006B  437F                                 CSYNC    s:22700+5,SPREL
          2 00006C  0008                                 MMM

      309    22701    4                     KEYMES.ACCT = G$JIT.ACCN;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:63   
  22701   2 00006D  2C0C                                 LDV,R2   12
          2 00006E  6C08                                 LDV,R6   8
          2 00006F  BBC7 00D9                            LAB,B3   KEYMES+16,AUTO
          2 000071  3C01                                 LDV,R3   1
          2 000072  0008                                 MMM

      310    22702    4                     KEYMES.UNAME = G$JIT.UNAME;

  22702   2 000073  2C14                                 LDV,R2   20
          2 000074  6C0C                                 LDV,R6   12
          2 000075  BBC7 00DD                            LAB,B3   KEYMES+20,AUTO
          2 000077  3C01                                 LDV,R3   1
          2 000078  0008                                 MMM

      311    22703
      312    22704    4                     CALL KNB$GETRESP (ADDR(KEYMES),SIZEC(KEYMES));

  22704   2 000079  DBC7 00C9                            LAB,B5   KEYMES,AUTO
          2 00007B  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 00007D  CBF0 0036                            LAB,B4   54,IMO
          2 00007F  CFC7 00E8                            STB,B4   KEYMES+31,AUTO
          2 000081  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000083  BFC7 00E6                            STB,B3   KEYMES+29,AUTO
          2 000085  BBC7 00E6                            LAB,B3   KEYMES+29,AUTO
          2 000087  CBF0 0200                            LAB,B4   512,IMO
          2 000089  E380 0000 0000  xent                 LNJ,B6   KNB$GETRESP
          2 00008C       0001                            DC       s:22707,PREL

      313    22705    4                     END/*do if not quiet*/;

      314    22706
      315    22707    3                CALL KNA$OPEN (%G_M$LM#,GUD_PARAMS.ERR)

  22707   2 00008D  EBF0 0002                            LAB,B6   2,IMO
          2 00008F  DCC7 0004                            LDB,B5   @GUD_PARAMS,AUTO
          2 000091  CBC5 0003                            LAB,B4   3,B5
          2 000093  CFC7 00E6                            STB,B4   KEYMES+29,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:64   
          2 000095  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 000097  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000099  CBF0 0200                            LAB,B4   512,IMO
          2 00009B  E380 0000 0000  xent                 LNJ,B6   KNA$OPEN
          2 00009E       0003                            DC       s:22709,PREL
          2 00009F  0F81 005E                            B        s:22730,PREL

      316    22708    4                WHENALTRETURN DO;

      317    22709    4                     CWNAK.FCN = IGA_CWNAK;

  22709   2 0000A1  6C1C                                 LDV,R6   28
          2 0000A2  E780 0000 0000  00                   STH,R6   CWNAK

      318    22710    4                     CWNAK.NETERR.ERR.L6 = GUD_PARAMS.ERR;

  22710   2 0000A5  ECC7 0004                            LDB,B6   @GUD_PARAMS,AUTO
          2 0000A7  8CC6 0003                            LDI      3,B6
          2 0000A9  8D00 0000 0004  00                   SDI      CWNAK+4

      319    22711    4                     CWNAK.NETADR = DCBADDR(%G_M$LM#)->G$DCB.RLCID;

  22711   2 0000AC  DC80 0000 0000  xsym                 LDB,B5   G$ROS$
          2 0000AF  CC85                                 LDB,B4   ,B5
          2 0000B0  BCC4 0004                            LDB,B3   4,B4
          2 0000B2  8CC3 002D                            LDI      45,B3
          2 0000B4  8D00 0000 0001  00                   SDI      CWNAK+1

      320    22712    4                     CALL KNB$GETRESP (ADDR(CWNAK),SIZEC(CWNAK));

  22712   2 0000B7  AB80 0000 0000  00                   LAB,B2   CWNAK
          2 0000BA  AFC7 00E4                            STB,B2   KEYMES+27,AUTO
          2 0000BC  9BF0 000C                            LAB,B1   12,IMO
          2 0000BE  9FC7 00E8                            STB,B1   KEYMES+31,AUTO
          2 0000C0  EBC7 00E4                            LAB,B6   KEYMES+27,AUTO
          2 0000C2  EFC7 00E6                            STB,B6   KEYMES+29,AUTO
          2 0000C4  BBC7 00E6                            LAB,B3   KEYMES+29,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:65   
          2 0000C6  CBF0 0200                            LAB,B4   512,IMO
          2 0000C8  E380 0000 0000  xent                 LNJ,B6   KNB$GETRESP
          2 0000CB       0001                            DC       s:22711,PREL

  22711   2                              ERR_OPEN        null
      321    22713    4   ERR_OPEN:         ;
      322    22714    4                     GJ_SABRT_COUNT = GJ_SABRT_COUNT +1;

  22714   2 0000CC  8A80 0000 0000  xsym ERR_OPEN        INC      GJ_SABRT_COUNT

      323    22715    4                     IF GJ_QUIET = 0

  22715   2 0000CF  E800 0000 0000  xsym                 LDR,R6   GJ_QUIET
          2 0000D2  6981 0019                            BNEZ,R6  s:22720,PREL

      324    22716    5                     THEN DO;

      325    22717    5                          KEYMES.MSG# = OC_MSG_UOFF#;

  22717   2 0000D4  D870 020F                            LDR,R5   527,IMO
          2 0000D6  DF47 00CA                            STR,R5   KEYMES+1,AUTO

      326    22718    5                          CALL KNB$GETRESP (ADDR(KEYMES),SIZEC(KEYMES));

  22718   2 0000D8  EBC7 00C9                            LAB,B6   KEYMES,AUTO
          2 0000DA  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 0000DC  DBF0 0036                            LAB,B5   54,IMO
          2 0000DE  DFC7 00E8                            STB,B5   KEYMES+31,AUTO
          2 0000E0  CBC7 00E4                            LAB,B4   KEYMES+27,AUTO
          2 0000E2  CFC7 00E6                            STB,B4   KEYMES+29,AUTO
          2 0000E4  BBC7 00E6                            LAB,B3   KEYMES+29,AUTO
          2 0000E6  CBF0 0200                            LAB,B4   512,IMO
          2 0000E8  E380 0000 0000  xent                 LNJ,B6   KNB$GETRESP
          2 0000EB       0001                            DC       s:22720,PREL

      327    22719    5                          END;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:66   
      328    22720    4                     CALL GHS$REG(%GH_EVDU);

  22720   2 0000EC  BB80 0000 0001  03                   LAB,B3   +1
          2 0000EF  CBF0 0100                            LAB,B4   256,IMO
          2 0000F1  E380 0000 0000  xent                 LNJ,B6   GHS$REG
          2 0000F4       0001                            DC       s:22721,PREL

      329    22721    4                     CALL SCREECH(SDELUSR);

  22721   2 0000F5  BB80 0000 0003  03                   LAB,B3   +3
          2 0000F8  CBF0 0100                            LAB,B4   256,IMO
          2 0000FA  E380 0000 0000  xent                 LNJ,B6   SCREECH
          2 0000FD       0001                            DC       s:22730,PREL

      330    22722    4                     END;

      331    22723
      332    22724        /*S* SCREECH_CODE: GJS-S$DELUSR
      333    22725             TYPE: SUA
      334    22726             MESSAGE: The REG to delete the user returned.
      335    22727        */
      336    22728
      337    22729
      338    22730    3                IF G$ROS.DCBPTR$->G$DCBTABLE(%G_M$ME#)->G$DCB.RLCID ~= '0'B

  22730   2 0000FE  EC80 0000 0000  xsym                 LDB,B6   G$ROS$
          2 000101  DC86                                 LDB,B5   ,B6
          2 000102  CCC5 0006                            LDB,B4   6,B5
          2 000104  BB80 0000 0000  03                   LAB,B3   0
          2 000107  5C01                                 LDV,R5   1
          2 000108  0022                                 ACM      ;
          2 000109       4404 002D                                ALPHANUM(45,B4,,4,FILL),;
          2 00010B       4003 0005                                ALPHANUM(5,B3,,R5,FILL)
          2 00010D  5381 007D                            CBE      s:22758,PREL

      339    22731    4                THEN DO;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:67   
      340    22732    4                     CALL KNA$OPEN (%G_M$ME#,GUD_PARAMS.ERR)

  22732   2 00010F  BBF0 0003                            LAB,B3   3,IMO
          2 000111  ACC7 0004                            LDB,B2   @GUD_PARAMS,AUTO
          2 000113  9BC2 0003                            LAB,B1   3,B2
          2 000115  9FC7 00E6                            STB,B1   KEYMES+29,AUTO
          2 000117  BFC7 00E4                            STB,B3   KEYMES+27,AUTO
          2 000119  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00011B  CBF0 0200                            LAB,B4   512,IMO
          2 00011D  E380 0000 0000  xent                 LNJ,B6   KNA$OPEN
          2 000120       0003                            DC       s:22733,PREL
          2 000121  0F81 0013                            B        s:22739,PREL

      341    22733    5                     WHENALTRETURN DO;

  22719   2                              ERR_GLINEATTR   null
      342    22734    5   ERR_GLINEATTR:         ;
      343    22735    5                          CALL KNA$CLOSE(%G_M$LM#,ERR);

  22735   2 000123  EBF0 0002            ERR_GLINEATTR   LAB,B6   2,IMO
          2 000125  DBC7 0026                            LAB,B5   ERR,AUTO
          2 000127  DFC7 00E6                            STB,B5   KEYMES+29,AUTO
          2 000129  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 00012B  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00012D  CBF0 0200                            LAB,B4   512,IMO
          2 00012F  E380 0000 0000  xent                 LNJ,B6   KNA$CLOSE
          2 000132       0001                            DC       s:22736,PREL

      344    22736    5                          GOTO ERR_OPEN;

  22736   2 000133  0F81 FF98                            B        s:22711,PREL

      345    22737    5                          END;
      346    22738
      347    22739    4                     GUD_PARAMS.MCL.CODE = %G_MCL_GLINEATTR#;

  22739   2 000135  E870 0185                            LDR,R6   389,IMO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:68   
          2 000137  ECC7 0004                            LDB,B6   @GUD_PARAMS,AUTO
          2 000139  EA86                                 SRM,R6,'03FF'X    ,B6
          2 00013A       03FF

      348    22740    4                     GLINEATTR.V.DCB# = %G_M$ME#;

  22740   2 00013B  5C03                                 LDV,R5   3
          2 00013C  D7C7 00A8                            STH,R5   GLINEATTR,AUTO

      349    22741    4                     GUD_PARAMS.PTRS.PAR1$ = ADDR(GLINEATTR.V);

  22741   2 00013E  DBC7 00A8                            LAB,B5   GLINEATTR,AUTO
          2 000140  DFC6 0006                            STB,B5   6,B6

      350    22742    4                     GUD_PARAMS.BND.PAR1 = SIZEC(GLINEATTR.V)-1;

  22742   2 000142  4C01                                 LDV,R4   1
          2 000143  CF46 0026                            STR,R4   38,B6

      351    22743    4                     GUD_PARAMS.PTRS.PAR2$ = ADDR(LINEATTR);

  22743   2 000145  CBC7 00A9                            LAB,B4   LINEATTR,AUTO
          2 000147  CFC6 0008                            STB,B4   8,B6

      352    22744    4                     GUD_PARAMS.BND.PAR2 = SIZEC(LINEATTR)-1;

  22744   2 000149  3C3F                                 LDV,R3   63
          2 00014A  BF46 0027                            STR,R3   39,B6

      353    22745    4                     CALL KNA$MCL(GUD_PARAMS);

  22745   2 00014C  BBC7 0004                            LAB,B3   @GUD_PARAMS,AUTO
          2 00014E  CBF0 0100                            LAB,B4   256,IMO
          2 000150  E380 0000 0000  xent                 LNJ,B6   KNA$MCL
          2 000153       0001                            DC       s:22746,PREL

      354    22746    4                     IF GUD_PARAMS.ERR ~= '0'B
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:69   

  22746   2 000154  ECC7 0004                            LDB,B6   @GUD_PARAMS,AUTO
          2 000156  DB80 0000 0000  03                   LAB,B5   0
          2 000159  5C01                                 LDV,R5   1
          2 00015A  0022                                 ACM      ;
          2 00015B       4406 0003                                ALPHANUM(3,B6,,4,FILL),;
          2 00015D       4005 0005                                ALPHANUM(5,B5,,R5,FILL)
          2 00015F  5381 0013                            CBE      s:22752,PREL

      355    22747    5                     THEN DO;

      356    22748    5                          CALL KNA$CLOSE(%G_M$ME#,ERR);

  22748   2 000161  DBF0 0003                            LAB,B5   3,IMO
          2 000163  CBC7 0026                            LAB,B4   ERR,AUTO
          2 000165  CFC7 00E6                            STB,B4   KEYMES+29,AUTO
          2 000167  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 000169  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00016B  CBF0 0200                            LAB,B4   512,IMO
          2 00016D  E380 0000 0000  xent                 LNJ,B6   KNA$CLOSE
          2 000170       0001                            DC       s:22749,PREL

      357    22749    5                          GOTO ERR_GLINEATTR;

  22749   2 000171  0F81 FFB1                            B        s:22733,PREL

      358    22750    5                          END;
      359    22751    5                     ELSE DO;

      360    22752    5                          G$JIT.PROFILE = LINEATTR.PROTXTC;

  22752   2 000173  ABC7 00AD                            LAB,B2   LINEATTR+4,AUTO
          2 000175  2C00                                 LDV,R2   0
          2 000176  6C0C                                 LDV,R6   12
          2 000177  BC80 0000 0000  xsym                 LDB,B3   G$JIT$
          2 00017A  BBC3 00AE                            LAB,B3   174,B3
          2 00017C  3C00                                 LDV,R3   0
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:70   
          2 00017D  0008                                 MMM

      361    22753    5                          G$JIT.JUNK2.MICROFPL = LINEATTR.MICROFPL;

  22753   2 00017E  E847 00A9                            LDR,R6   LINEATTR,AUTO
          2 000180  604B                                 SOR,R6   11
          2 000181  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          2 000184  EAC5 0097                            SRM,R6,'0001'X    151,B5
          2 000186       0001

      362    22754    5                          END;

      363    22755
      364    22756    4                     GUD_PARAMS.MCL.CODE = %G_MCL_CPEXIT#;

  22756   2 000187  E870 0086                            LDR,R6   134,IMO
          2 000189  EA86                                 SRM,R6,'03FF'X    ,B6
          2 00018A       03FF

      365    22757    4                     END/*do if m$me.rlcid*/;

      366    22758    3                END/*do if first job step*/;

  22749   2                              REREAD_SETFP    null
      367    22759
      368    22760        /*D* Then, again if not a BF handler, a call is made to KNA$READ
      369    22761             to get the FPRQ message.
      370    22762        */
      371    22763    2   REREAD_SETFP: ;
      372    22764    2           V_ = VECTOR(SETFP_MSG);

  22764   2 00018B  EBC7 0028            REREAD_SETFP    LAB,B6   SETFP_MSG,AUTO
          2 00018D  EFC7 00E5                            STB,B6   KEYMES+28,AUTO
          2 00018F  E870 008B                            LDR,R6   139,IMO
          2 000191  EF47 00E4                            STR,R6   KEYMES+27,AUTO
          2 000193  ABC7 00E4                            LAB,B2   KEYMES+27,AUTO
          2 000195  2C00                                 LDV,R2   0
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:71   
          2 000196  6C06                                 LDV,R6   6
          2 000197  BB87                                 LAB,B3   ,AUTO
          2 000198  3C0C                                 LDV,R3   12
          2 000199  0008                                 MMM

      373    22765    2           CALL KNA$READ(%G_M$LM#,V_,FCN_MSG.ERR)

  22765   2 00019A  EBF0 0002                            LAB,B6   2,IMO
          2 00019C  DBC7 0076                            LAB,B5   FCN_MSG+1,AUTO
          2 00019E  DFC7 00E8                            STB,B5   KEYMES+31,AUTO
          2 0001A0  CBC7 0006                            LAB,B4   V_,AUTO
          2 0001A2  CFC7 00E6                            STB,B4   KEYMES+29,AUTO
          2 0001A4  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 0001A6  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0001A8  CBF0 0300                            LAB,B4   768,IMO
          2 0001AA  E380 0000 0000  xent                 LNJ,B6   KNA$READ
          2 0001AD       0003                            DC       s:22767,PREL
          2 0001AE  0F81 001B                            B        s:22773,PREL

      374    22766    3           WHENALTRETURN DO;

      375    22767    3                IF NOT(G$JIT.JUNK.MLDTRC)

  22767   2 0001B0  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 0001B3  82C6 0098                            LB,'0001'X        152,B6
          2 0001B5       0001
          2 0001B6  0501 0011                            BBT      s:22770,PREL

      376    22768    3                THEN CALL KNA$CLOSE(%G_M$LM#,ERR);

  22768   2 0001B8  DBF0 0002                            LAB,B5   2,IMO
          2 0001BA  CBC7 0026                            LAB,B4   ERR,AUTO
          2 0001BC  CFC7 00E6                            STB,B4   KEYMES+29,AUTO
          2 0001BE  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 0001C0  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0001C2  CBF0 0200                            LAB,B4   512,IMO
          2 0001C4  E380 0000 0000  xent                 LNJ,B6   KNA$CLOSE
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:72   
          2 0001C7       0001                            DC       s:22770,PREL

      377    22769
      378    22770    3                GOTO ERR_CPEXIT;

  22770   2 0001C8  0F81 0449                            B        s:23251,PREL

      379    22771    3                END;
      380    22772
      381    22773    2           IF SETFP_MSG.ERR ~='0'B

  22773   2 0001CA  EB80 0000 0000  03                   LAB,B6   0
          2 0001CD  5C01                                 LDV,R5   1
          2 0001CE  0022                                 ACM      ;
          2 0001CF       4407 0029                                ALPHANUM(SETFP_MSG+1,AUTO,,4,FILL),;
          2 0001D1       4006 0005                                ALPHANUM(5,B6,,R5,FILL)
          2 0001D3  5381 0007                            CBE      s:22784,PREL

      382    22774    3           THEN DO;

  22771   2                              PRO_ERR         null
      383    22775    3   PRO_ERR:     ;
      384    22776    3                FCN_MSG.ERR = SETFP_MSG.ERR;

  22776   2 0001D5  8CC7 0029            PRO_ERR         LDI      SETFP_MSG+1,AUTO
          2 0001D7  8D47 0076                            SDI      FCN_MSG+1,AUTO

      385    22777    3                GOTO ERR_CPEXIT;

  22777   2 0001D9  0F81 0438                            B        s:23251,PREL

      386    22778    3                END;
      387    22779
      388    22780        /*D* If the message FCN is %GJ_PROFILE#, this is a request for
      389    22781             the profile name.  Return it to the host and then re-read
      390    22782             to get the SETFP message.
      391    22783        */
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:73   
      392    22784    2           IF SETFP_MSG.FCN ~= %GJ_SETFP#

  22784   2 0001DB  E2C7 0028                            LLH,R6   SETFP_MSG,AUTO
          2 0001DD  6901 003F                            BEZ,R6   s:22808,PREL

      393    22785    3           THEN DO;

      394    22786    3                IF SETFP_MSG.FCN = %GJ_PROFILE#

  22786   2 0001DF  6D14                                 CMV,R6   20
          2 0001E0  0981 0033                            BNE      s:22796,PREL

      395    22787    4                THEN DO;

      396    22788    4                     T$ = ADDR(SETFP_MSG);

  22788   2 0001E2  EBC7 0028                            LAB,B6   SETFP_MSG,AUTO
          2 0001E4  EFC7 000C                            STB,B6   T$,AUTO

      397    22789    4                     T$->G$PROFILE_MSG.PROFILE = G$JIT.PROFILE;

  22789   2 0001E6  AC80 0000 0000  xsym                 LDB,B2   G$JIT$
          2 0001E9  ABC2 00AE                            LAB,B2   174,B2
          2 0001EB  2C00                                 LDV,R2   0
          2 0001EC  6C0C                                 LDV,R6   12
          2 0001ED  BB86                                 LAB,B3   ,B6
          2 0001EE  3C06                                 LDV,R3   6
          2 0001EF  0008                                 MMM

      398    22790    4                     V_ =  VECTOR(T$->G$PROFILE_MSG);

  22790   2 0001F0  DCC7 000C                            LDB,B5   T$,AUTO
          2 0001F2  DFC7 00E5                            STB,B5   KEYMES+28,AUTO
          2 0001F4  6C11                                 LDV,R6   17
          2 0001F5  EF47 00E4                            STR,R6   KEYMES+27,AUTO
          2 0001F7  ABC7 00E4                            LAB,B2   KEYMES+27,AUTO
          2 0001F9  2C00                                 LDV,R2   0
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:74   
          2 0001FA  6C06                                 LDV,R6   6
          2 0001FB  BB87                                 LAB,B3   ,AUTO
          2 0001FC  3C0C                                 LDV,R3   12
          2 0001FD  0008                                 MMM

      399    22791    4                     CALL KNA$WRITE(%G_M$LM#,V_,SETFP_MSG.ERR) ALTRET(PRO_ERR);

  22791   2 0001FE  DBF0 0002                            LAB,B5   2,IMO
          2 000200  CBC7 0029                            LAB,B4   SETFP_MSG+1,AUTO
          2 000202  CFC7 00E8                            STB,B4   KEYMES+31,AUTO
          2 000204  ABC7 0006                            LAB,B2   V_,AUTO
          2 000206  AFC7 00E6                            STB,B2   KEYMES+29,AUTO
          2 000208  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 00020A  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00020C  CBF0 0300                            LAB,B4   768,IMO
          2 00020E  E380 0000 0000  xent                 LNJ,B6   KNA$WRITE
          2 000211       FFC4                            DC       s:22774,PREL

      400    22792    4                     GOTO REREAD_SETFP;

  22792   2 000212  0F81 FF78                            B        s:22758,PREL

      401    22793    4                     END;
      402    22794
      403    22795    4                ELSE DO;

      404    22796    4                     CALL SCREECH(SFCNCODE);

  22796   2 000214  BB80 0000 0006  03                   LAB,B3   +6
          2 000217  CBF0 0100                            LAB,B4   256,IMO
          2 000219  E380 0000 0000  xent                 LNJ,B6   SCREECH
          2 00021C       0001                            DC       s:22808,PREL

      405    22797    4                     END;

      406    22798    3                END/* do if not GJ_SETFP#*/;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:75   
      407    22799        /*S* SCREECH_CODE: GJS-S$BAD_LCP6_FCN
      408    22800             TYPE: SUA
      409    22801             MESSAGE: Message read by GJS$STEP was not SETFP or PROFILE.
      410    22802        */
      411    22803
      412    22804
      413    22805        /*D* If this is a SETFP request for a micro FPL user, send a GJ_MICROFPL
      414    22806             message to the host and the reread the SETFP message (for TPFP info).
      415    22807        */
      416    22808    2           IF G$JIT.JUNK2.BYPASS_MFPL

  22808   2 00021D  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000220  82C6 0097                            LB,'0002'X        151,B6
          2 000222       0002
          2 000223  0581 0006                            BBF      s:22811,PREL

      417    22809    2           THEN G$JIT.JUNK2.BYPASS_MFPL = '0'B;

  22809   2 000225  8846 0097                            LBF,'0002'X       151,B6
  22809   2 000227       0002
          2 000228  0F81 0025                            B        s:22823,PREL

      418    22810    3           ELSE DO;

      419    22811    3                IF G$JIT.JUNK2.MICROFPL

  22811   2 00022A  82C6 0097                            LB,'0001'X        151,B6
  22811   2 00022C       0001
          2 00022D  0581 0020                            BBF      s:22823,PREL

      420    22812    4                THEN DO;

      421    22813    4                     FCN_MSG.FCN = %GJ_MICROFPL#;

  22813   2 00022F  6C15                                 LDV,R6   21
          2 000230  E7C7 0075                            STH,R6   FCN_MSG,AUTO

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:76   
      422    22814    4                     CALL KNA$WRITE(%G_M$LM#,FCN_MSG_,FCN_MSG.ERR) ALTRET(ERR_CPEXIT);

  22814   2 000232  DBF0 0002                            LAB,B5   2,IMO
          2 000234  CBC7 0076                            LAB,B4   FCN_MSG+1,AUTO
          2 000236  CFC7 00E8                            STB,B4   KEYMES+31,AUTO
          2 000238  BBC7 0009                            LAB,B3   FCN_MSG_,AUTO
          2 00023A  BFC7 00E6                            STB,B3   KEYMES+29,AUTO
          2 00023C  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 00023E  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000240  CBF0 0300                            LAB,B4   768,IMO
          2 000242  E380 0000 0000  xent                 LNJ,B6   KNA$WRITE
          2 000245       03CD                            DC       s:23251,PREL

      423    22815    4                     G$JIT.JUNK2.BYPASS_MFPL = '1'B;

  22815   2 000246  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000249  8946 0097                            LBT,'0002'X       151,B6
          2 00024B       0002

      424    22816    4                     GOTO REREAD_SETFP;

  22816   2 00024C  0F81 FF3E                            B        s:22758,PREL

      425    22817    4                     END;
      426    22818    3                END;
      427    22819    2           END/*do if not G_PE_BF#*/;
      428    22820        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:77   
      429    22821        /*D* If the data bias is bad, ALTRET.
      430    22822        */
      431    22823    1      IF SETFP_MSG.P$$ = ENTADDR(NIL)

  22823   2 00024E  DCC7 0048                            LDB,B5   SETFP_MSG+32,AUTO
          2 000250  DD80 0000 0008  03                   CMB,B5   +8
          2 000253  0981 0011                            BNE      s:22833,PREL
          2 000255  E2C6 008D                            LLH,R6   141,B6
          2 000257  6981 000D                            BNEZ,R6  s:22833,PREL
          2 000259  82C7 004C                            LB,'0001'X        SETFP_MSG+36,AUTO
          2 00025B       0001
          2 00025C  0501 0008                            BBT      s:22833,PREL

      432    22824    1        AND (G$JIT.DB# = 0) AND NOT(SETFP_MSG.FLAGS.DEBUG)
      433    22825    2      THEN DO;

      434    22826    2           FCN_MSG.ERR = ENO_START;

  22826   2 00025E  8C80 0000 001B  01                   LDI      ENO_START
          2 000261  8D47 0076                            SDI      FCN_MSG+1,AUTO

      435    22827    2           GOTO REPORT_IT;

  22827   2 000263  0F81 033D                            B        s:23220,PREL

      436    22828    2           END;
      437    22829        /*E* ERROR: GJS-E$NO_START-E
      438    22830             MESSAGE: That FPRG has no start address.
      439    22831        */
      440    22832
      441    22833    1      IF ( (%GM_ISR1_BASE + SETFP_MSG.DATA_SZ) - SETFP_MSG.DATA_BIAS) < 0

  22833   2 000265  8CC7 0058                            LDI      SETFP_MSG+48,AUTO
          2 000267  84C7 005C                            SID      SETFP_MSG+52,AUTO
          2 000269  8470 0001 0000                       AID      65536,IMO
          2 00026C  84F0 0000 0000                       SID      0,IMO
          2 00026F  6881 0008                            BGEZ,R6  s:22847,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:78   

      442    22834    2      THEN DO;

      443    22835    2           FCN_MSG.ERR = EBADHEAD;

  22835   2 000271  8C80 0000 0021  01                   LDI      EBADHEAD
          2 000274  8D47 0076                            SDI      FCN_MSG+1,AUTO

      444    22836    2           GOTO REPORT_IT;

  22836   2 000276  0F81 032A                            B        s:23220,PREL

      445    22837    2           END;
      446    22838        /*E* ERROR: GJS-E$BADHEAD-E
      447    22839             MESSAGE: The HEAD record for that FPRG is bad.
      448    22840        */
      449    22841
      450    22842
      451    22843        /*D* If this is an M$LDTRC message, the debug bit will not be
      452    22844             returned again from the host.  So, if debugging, indicate
      453    22845             so in the SETFP message.
      454    22846        */
      455    22847    1      IF (G$JIT.DB# ~= 0) AND (SETFP_MSG.FLAGS.XEQ_ONLY = '0'B)

  22847   2 000278  E2C6 008D                            LLH,R6   141,B6
          2 00027A  6901 0009                            BEZ,R6   s:22855,PREL
          2 00027C  82C7 004C                            LB,'2000'X        SETFP_MSG+36,AUTO
          2 00027E       2000
          2 00027F  0501 0004                            BBT      s:22855,PREL

      456    22848    1      THEN SETFP_MSG.FLAGS.DEBUG = '1'B;

  22848   2 000281  8947 004C                            LBT,'0001'X       SETFP_MSG+36,AUTO
  22848   2 000283       0001

      457    22849
      458    22850        /*D* If the FPRG was linked with the NOSHARE option or if this
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:79   
      459    22851             run-unit is to be debugged, internal data is initialized
      460    22852             to read the procedure from the host.  There will be no attempt
      461    22853             to share it.
      462    22854        */
      463    22855    1      IF (SETFP_MSG.FLAGS.DEBUG) OR NOT(SETFP_MSG.FLAGS.S)

  22855   2 000284  82C7 004C                            LB,'0001'X        SETFP_MSG+36,AUTO
  22855   2 000286       0001
          2 000287  0501 000C                            BBT      s:22858,PREL
          2 000289  89C7 004C                            CMZ      SETFP_MSG+36,AUTO
          2 00028B  0881 0008                            BAGE     s:22858,PREL
          2 00028D  D847 002B                            LDR,R5   SETFP_MSG+3,AUTO
          2 00028F  5008                                 SOL,R5   8
          2 000290  5068                                 SAR,R5   8
          2 000291  5D2A                                 CMV,R5   42
          2 000292  0981 000D                            BNE      s:22870,PREL

      464    22856    1        OR (ADDR(SETFP_MSG.NAME)->B$STARFILE.TEXT = '*')
      465    22857    2      THEN DO;

      466    22858    2           SPROC_PARAMS.TYC.SFILE$ = ADDR(NIL);

  22858   2 000294  CB80 0000 0000                       LAB,B4   0
          2 000297  CFC7 007F                            STB,B4   SPROC_PARAMS+7,AUTO

      467    22859    2           SPROC_PARAMS.TYC.GET_PROC = 1;

  22859   2 000299  5C01                                 LDV,R5   1
          2 00029A  DF47 0081                            STR,R5   SPROC_PARAMS+9,AUTO

      468    22860    2           SPROC_PARAMS.TYC.SHARE_PROC = 0;

  22860   2 00029C  8747 0082                            CL       SPROC_PARAMS+10,AUTO

      469    22861    2           END;

  22861   2 00029E  0F81 001D                            B        s:22883,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:80   

      470    22862
      471    22863        /*D* The GJS$OPEN_SHARED routine is called to determine if the run-unit
      472    22864             already exists in the shared file tables.  On return, GET_PROC
      473    22865             will be set if we must read the program procedure, and
      474    22866             SHARE_PROC will be set if we are to complete the process of
      475    22867             creating the shared file entry.
      476    22868        */
      477    22869    2      ELSE DO;

      478    22870    2           SPROC_PARAMS.PTYPE = (SETFP_MSG.FLAGS & %RU_SETFP#) | %RU_STD#;

  22870   2 0002A0  C847 004C                            LDR,R4   SETFP_MSG+36,AUTO
          2 0002A2  C570 FF00                            AND,R4   -256,IMO
          2 0002A4  C470 0080                            OR,R4    128,IMO
          2 0002A6  CF47 007B                            STR,R4   SPROC_PARAMS+3,AUTO

      479    22871
      480    22872    2           CALL GJS$OPEN_SHARED(SPROC_PARAMS)

  22872   2 0002A8  CBC7 0078                            LAB,B4   SPROC_PARAMS,AUTO
          2 0002AA  CFC7 00E4                            STB,B4   KEYMES+27,AUTO
          2 0002AC  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0002AE  CBF0 0100                            LAB,B4   256,IMO
          2 0002B0  E380 0000 0000  xent                 LNJ,B6   GJS$OPEN_SHARED
          2 0002B3       0003                            DC       s:22874,PREL
          2 0002B4  0F81 0007                            B        s:22883,PREL

      481    22873    3           WHENALTRETURN DO;

      482    22874    3                FCN_MSG.ERR = SPROC_PARAMS.ERR;

  22874   2 0002B6  8CC7 007C                            LDI      SPROC_PARAMS+4,AUTO
          2 0002B8  8D47 0076                            SDI      FCN_MSG+1,AUTO

      483    22875    3                GOTO REPORT_IT;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:81   
  22875   2 0002BA  0F81 02E6                            B        s:23220,PREL

      484    22876    3                END;
      485    22877
      486    22878    2           END;

      487    22879
      488    22880        /*D* Move the fid for the run-unit to the read-only segment.
      489    22881             We may need this later to send to the host debugger.
      490    22882        */
      491    22883    1      G$ROS.M$LM.NAME = SETFP_MSG.NAME;

  22883   2 0002BC  AB87                                 LAB,B2   ,AUTO
          2 0002BD  2C56                                 LDV,R2   86
          2 0002BE  6C20                                 LDV,R6   32
          2 0002BF  BC80 0000 0000  xsym                 LDB,B3   G$ROS$
          2 0002C2  BBC3 01FE                            LAB,B3   510,B3
          2 0002C4  3C00                                 LDV,R3   0
          2 0002C5  0008                                 MMM

      492    22884    1      G$ROS.M$LM.ACCT = SETFP_MSG.ACCT;

  22884   2 0002C6  AB87                                 LAB,B2   ,AUTO
          2 0002C7  2C76                                 LDV,R2   118
          2 0002C8  6C08                                 LDV,R6   8
          2 0002C9  BC80 0000 0000  xsym                 LDB,B3   G$ROS$
          2 0002CC  BBC3 020E                            LAB,B3   526,B3
          2 0002CE  3C00                                 LDV,R3   0
          2 0002CF  0008                                 MMM

      493    22885    1      G$ROS.M$LM.PASS = SETFP_MSG.PASS;

  22885   2 0002D0  AB87                                 LAB,B2   ,AUTO
          2 0002D1  2C7E                                 LDV,R2   126
          2 0002D2  6C08                                 LDV,R6   8
          2 0002D3  BC80 0000 0000  xsym                 LDB,B3   G$ROS$
          2 0002D6  BBC3 022D                            LAB,B3   557,B3
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:82   
          2 0002D8  3C01                                 LDV,R3   1
          2 0002D9  0008                                 MMM

      494    22886    1      G$ROS.M$LM.PSN = SETFP_MSG.PSN;

  22886   2 0002DA  ABC7 0043                            LAB,B2   SETFP_MSG+27,AUTO
          2 0002DC  2C00                                 LDV,R2   0
          2 0002DD  6C06                                 LDV,R6   6
          2 0002DE  BC80 0000 0000  xsym                 LDB,B3   G$ROS$
          2 0002E1  BBC3 0231                            LAB,B3   561,B3
          2 0002E3  3C01                                 LDV,R3   1
          2 0002E4  0008                                 MMM

      495    22887    1      G$ROS.M$LM.MODTIME = SETFP_MSG.MODTIME;

  22887   2 0002E5  8CC7 0046                            LDI      SETFP_MSG+30,AUTO
          2 0002E7  EC80 0000 0000  xsym                 LDB,B6   G$ROS$
          2 0002EA  8D46 0235                            SDI      565,B6

      496    22888
      497    22889        /*    Modify SETFP_MSG.fid to search for library or debugger.
      498    22890        */
      499    22891    1      SETFP_MSG.ACCT = ':SYS    ';

  22891   2 0002EC  AB80 0000 0000  01                   LAB,B2   GJI_KEYMES_INIT
          2 0002EF  2C58                                 LDV,R2   88
          2 0002F0  6C08                                 LDV,R6   8
          2 0002F1  BB87                                 LAB,B3   ,AUTO
          2 0002F2  3C76                                 LDV,R3   118
          2 0002F3  0008                                 MMM

      500    22892    1      SETFP_MSG.PASS = ' ';

  22892   2 0002F4  0021                                 ALR      ;
          2 0002F5       4178 2000                                ALPHANUM('2000'X,IMO,,1),;
          2 0002F7       4807 003F                                ALPHANUM(SETFP_MSG+23,AUTO,,8,FILL)

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:83   
      501    22893    1      SETFP_MSG.PSN = ' ';

  22893   2 0002F9  0021                                 ALR      ;
          2 0002FA       4178 2000                                ALPHANUM('2000'X,IMO,,1),;
          2 0002FC       4607 0043                                ALPHANUM(SETFP_MSG+27,AUTO,,6,FILL)

      502    22894    1      SETFP_MSG.MODTIME = 0;

  22894   2 0002FE  8747 0046                            CL       SETFP_MSG+30,AUTO
          2 000300  8747 0047                            CL       SETFP_MSG+31,AUTO

      503    22895
      504    22896        /*D*  If we need a run time library, the GJS$OPEN_SHARED routine is called
      505    22897              to see if it already exists and to determine if we must read the
      506    22898              library procedure and share it.
      507    22899              If the library isn't already shared, and there is no available
      508    22900              entry in the shared file tables, we must error the job step as
      509    22901              we have no place to hold the library data.
      510    22902        */
      511    22903    1      IF SETFP_MSG.LIB_NAME.L = 0

  22903   2 000302  E2C7 005E                            LLH,R6   SETFP_MSG+54,AUTO
          2 000304  437F                                 CSYNC    s:22903+1,SPREL
          2 000305  6981 0007                            BNEZ,R6  s:22910,PREL

      512    22904    2      THEN DO;

      513    22905    2           PGSZ_LIB_DATA = 0;

  22905   2 000307  8747 001C                            CL       PGSZ_LIB_DATA,AUTO

      514    22906    2           PGSZ_LIB_PROC = 0;

  22906   2 000309  8747 001D                            CL       PGSZ_LIB_PROC,AUTO

      515    22907    2           END;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:84   
  22907   2 00030B  0F81 00D5                            B        s:22991,PREL

      516    22908
      517    22909    2      ELSE DO;

      518    22910    2           SETFP_MSG.NAME = SETFP_MSG.LIB_NAME;

  22910   2 00030D  ABC7 005E                            LAB,B2   SETFP_MSG+54,AUTO
          2 00030F  2C00                                 LDV,R2   0
          2 000310  6C20                                 LDV,R6   32
          2 000311  BB87                                 LAB,B3   ,AUTO
          2 000312  3C56                                 LDV,R3   86
          2 000313  0008                                 MMM

      519    22911    2           SLIB_PARAMS.PTYPE = %RU_LIB#;

  22911   2 000314  E870 4000                            LDR,R6   16384,IMO
          2 000316  EF47 0086                            STR,R6   SLIB_PARAMS+3,AUTO

      520    22912
      521    22913    2           CALL GJS$OPEN_SHARED(SLIB_PARAMS)

  22913   2 000318  DBC7 0083                            LAB,B5   SLIB_PARAMS,AUTO
          2 00031A  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 00031C  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00031E  CBF0 0100                            LAB,B4   256,IMO
          2 000320  E380 0000 0000  xent                 LNJ,B6   GJS$OPEN_SHARED
          2 000323       00B8                            DC       s:22980,PREL

      522    22914    3           WHENRETURN DO;

      523    22915    3                IF SLIB_PARAMS.TYC.SFILE$ = ADDR(NIL)

  22915   2 000324  8DC7 008A                            CMN      SLIB_PARAMS+7,AUTO
          2 000326  0901 00B4                            BE       s:22980,PREL

      524    22916    3                THEN GOTO BAD_PROCESSOR;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:85   
      525    22917
      526    22918        /*D* If this is a user being started by BIGFOOT, the library size
      527    22919             will be in the SETFP message in CCBUF.  If this is a normal
      528    22920             user and the library must be read from the host, a message
      529    22921             is written to request the library data and then the library
      530    22922             data message is read.
      531    22923        */
      532    22924    3                IF SLIB_PARAMS.TYC.GET_PROC ~= 0

  22924   2 000328  E847 008C                            LDR,R6   SLIB_PARAMS+9,AUTO
          2 00032A  6901 0080                            BEZ,R6   s:22956,PREL

      533    22925    4                THEN DO;

      534    22926    4                     IF G$JIT.PROG_ENTRY = %G_PE_BF#

  22926   2 00032C  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00032F  82C6 0003                            LB,'00FF'X        3,B6
          2 000331       00FF
          2 000332  0501 000D                            BBT      s:22933,PREL

      535    22927    5                     THEN DO;

      536    22928    5                          ALIB_DATA.PROC_SZ = G$MSG$->G$SETFP_MSG.LIB_PROC_SZ;

  22928   2 000334  DCC7 000E                            LDB,B5   G$MSG$,AUTO
          2 000336  8CC5 0052                            LDI      82,B5
          2 000338  8D47 0071                            SDI      ALIB_DATA+3,AUTO

      537    22929    5                          ALIB_DATA.DATA_SZ = G$MSG$->G$SETFP_MSG.LIB_DATA_SZ;

  22929   2 00033A  8CC5 0050                            LDI      80,B5
          2 00033C  8D47 0073                            SDI      ALIB_DATA+5,AUTO

      538    22930    5                          END;

  22930   2 00033E  0F81 004B                            B        s:22945,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:86   

      539    22931
      540    22932    5                     ELSE DO;

      541    22933    5                          FCN_MSG.FCN = %GJ_LIB_DATA#;

  22933   2 000340  5C0B                                 LDV,R5   11
          2 000341  D7C7 0075                            STH,R5   FCN_MSG,AUTO

      542    22934    5                          CALL KNA$WRITE(%G_M$LM#,FCN_MSG_,FCN_MSG.ERR) ALTRET(
             22934                                   REPORT_IT);

  22934   2 000343  DBF0 0002                            LAB,B5   2,IMO
          2 000345  CBC7 0076                            LAB,B4   FCN_MSG+1,AUTO
          2 000347  CFC7 00E8                            STB,B4   KEYMES+31,AUTO
          2 000349  BBC7 0009                            LAB,B3   FCN_MSG_,AUTO
          2 00034B  BFC7 00E6                            STB,B3   KEYMES+29,AUTO
          2 00034D  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 00034F  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000351  CBF0 0300                            LAB,B4   768,IMO
          2 000353  E380 0000 0000  xent                 LNJ,B6   KNA$WRITE
          2 000356       024B                            DC       s:23220,PREL

      543    22935
      544    22936    5                          V_ = VECTOR(ALIB_DATA);

  22936   2 000357  EBC7 006E                            LAB,B6   ALIB_DATA,AUTO
          2 000359  EFC7 00E5                            STB,B6   KEYMES+28,AUTO
          2 00035B  6C0D                                 LDV,R6   13
          2 00035C  EF47 00E4                            STR,R6   KEYMES+27,AUTO
          2 00035E  ABC7 00E4                            LAB,B2   KEYMES+27,AUTO
          2 000360  2C00                                 LDV,R2   0
          2 000361  6C06                                 LDV,R6   6
          2 000362  BB87                                 LAB,B3   ,AUTO
          2 000363  3C0C                                 LDV,R3   12
          2 000364  0008                                 MMM

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:87   
      545    22937    5                          CALL KNA$READ(%G_M$LM#,V_,FCN_MSG.ERR) ALTRET(REPORT_IT);

  22937   2 000365  EBF0 0002                            LAB,B6   2,IMO
          2 000367  DBC7 0076                            LAB,B5   FCN_MSG+1,AUTO
          2 000369  DFC7 00E8                            STB,B5   KEYMES+31,AUTO
          2 00036B  CBC7 0006                            LAB,B4   V_,AUTO
          2 00036D  CFC7 00E6                            STB,B4   KEYMES+29,AUTO
          2 00036F  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 000371  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000373  CBF0 0300                            LAB,B4   768,IMO
          2 000375  E380 0000 0000  xent                 LNJ,B6   KNA$READ
          2 000378       0229                            DC       s:23220,PREL

      546    22938    5                          IF ALIB_DATA.ERR ~= '0'B

  22938   2 000379  EB80 0000 0000  03                   LAB,B6   0
          2 00037C  5C01                                 LDV,R5   1
          2 00037D  0022                                 ACM      ;
          2 00037E       4407 006F                                ALPHANUM(ALIB_DATA+1,AUTO,,4,FILL),;
          2 000380       4006 0005                                ALPHANUM(5,B6,,R5,FILL)
          2 000382  5381 0007                            CBE      s:22945,PREL

      547    22939    6                          THEN DO;

      548    22940    6                               FCN_MSG.ERR = ALIB_DATA.ERR;

  22940   2 000384  8CC7 006F                            LDI      ALIB_DATA+1,AUTO
          2 000386  8D47 0076                            SDI      FCN_MSG+1,AUTO

      549    22941    6                               GOTO REPORT_IT;

  22941   2 000388  0F81 0218                            B        s:23220,PREL

      550    22942    6                               END;
      551    22943    5                          END/* DO if not G_PE_BF# */;
      552    22944
      553    22945    4                     IF ALIB_DATA.DATA_SZ+%GM_ISR1_BASE > SETFP_MSG.DATA_BIAS
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:88   

  22945   2 00038A  8CC7 0073                            LDI      ALIB_DATA+5,AUTO
          2 00038C  8470 0001 0000                       AID      65536,IMO
          2 00038F  84C7 005C                            SID      SETFP_MSG+52,AUTO
          2 000391  6981 0003                            BNEZ,R6  s:22945+11,PREL
          2 000393  7901 0003                            BEZ,R7   s:22948,PREL
          2 000395  0601 002A                            BCT      s:22958,PREL

      554    22946    4                     THEN GOTO BAD_LIB_DATA;
      555    22947
      556    22948    4                     PGSZ_LIB_PROC = (ALIB_DATA.PROC_SZ + 255) / 256;

  22948   2 000397  8CC7 0071                            LDI      ALIB_DATA+3,AUTO
          2 000399  8470 0000 00FF                       AID      255,IMO
          2 00039C  70C8                                 DOR,R7   8
          2 00039D  E857                                 LDR,R6   R7
          2 00039E  EF47 001D                            STR,R6   PGSZ_LIB_PROC,AUTO

      557    22949    4                     PGSZ_LIB_DATA = (ALIB_DATA.DATA_SZ + 255) / 256;

  22949   2 0003A0  8CC7 0073                            LDI      ALIB_DATA+5,AUTO
          2 0003A2  8470 0000 00FF                       AID      255,IMO
          2 0003A5  70C8                                 DOR,R7   8
          2 0003A6  E857                                 LDR,R6   R7
          2 0003A7  EF47 001C                            STR,R6   PGSZ_LIB_DATA,AUTO

      558    22950    4                     END/* DO if GET_LIB */;

  22950   2 0003A9  0F81 002F                            B        s:22967,PREL

      559    22951
      560    22952        /*D* If the library is already shared, get the data out of the
      561    22953             shared processor table.
      562    22954        */
      563    22955    4                ELSE DO;

      564    22956    4                     IF G$SFILE.LIB_WDSZ_DATA(SLIB_PARAMS.PNUM)+%GM_ISR1_BASE
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:89   

  22956   2 0003AB  B847 0085                            LDR,R3   SLIB_PARAMS+2,AUTO
          2 0003AD  B570 00FF                            AND,R3   255,IMO
          2 0003AF  EC80 0000 0000  xsym                 LDB,B6   GJ_SFILE_START$
          2 0003B2  3F18                                 MLV,R3   24
          2 0003B3  3E12                                 ADV,R3   18
          2 0003B4  8CB6                                 LDI      ,B6,R3
          2 0003B5  8470 0001 0000                       AID      65536,IMO
          2 0003B8  84C7 005C                            SID      SETFP_MSG+52,AUTO
          2 0003BA  0681 000C                            BCF      s:22964,PREL
          2 0003BC  6981 0003                            BNEZ,R6  s:22958,PREL
          2 0003BE  7901 0008                            BEZ,R7   s:22964,PREL

      565    22957    4                       > SETFP_MSG.DATA_BIAS
      566    22958    5                     THEN DO;

  22957   2                              BAD_LIB_DATA    null
      567    22959    5   BAD_LIB_DATA:          ;
      568    22960    5                          FCN_MSG.ERR = ELIBSIZE;

  22960   2 0003C0  8C80 0000 001F  01   BAD_LIB_DATA    LDI      ELIBSIZE
          2 0003C3  8D47 0076                            SDI      FCN_MSG+1,AUTO

      569    22961    5                          GOTO REPORT_IT;

  22961   2 0003C5  0F81 01DB                            B        s:23220,PREL

      570    22962    5                          END;
      571    22963
      572    22964    4                     PGSZ_LIB_PROC = G$SFILE.PGSZ_PROC(SLIB_PARAMS.PNUM);

  22964   2 0003C7  B847 0085                            LDR,R3   SLIB_PARAMS+2,AUTO
          2 0003C9  B570 00FF                            AND,R3   255,IMO
          2 0003CB  3F30                                 MLV,R3   48
          2 0003CC  3E27                                 ADV,R3   39
          2 0003CD  E836                                 LDR,R6   ,B6,R3
          2 0003CE  EF47 001D                            STR,R6   PGSZ_LIB_PROC,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:90   

      573    22965    4                     PGSZ_LIB_DATA = G$SFILE.PGSZ_DATA(SLIB_PARAMS.PNUM);

  22965   2 0003D0  B847 0085                            LDR,R3   SLIB_PARAMS+2,AUTO
          2 0003D2  B570 00FF                            AND,R3   255,IMO
          2 0003D4  3F30                                 MLV,R3   48
          2 0003D5  3E26                                 ADV,R3   38
          2 0003D6  D836                                 LDR,R5   ,B6,R3
          2 0003D7  DF47 001C                            STR,R5   PGSZ_LIB_DATA,AUTO

      574    22966    4                     END;

      575    22967    3                END;

  22967   2 0003D9  0F81 0007                            B        s:22991,PREL

      576    22968
      577    22969        /*E* ERROR: GJS-E$LIBSIZE-E
      578    22970             MESSAGE: FPRG library data size exceeds that reserved in the FPRG.
      579    22971        */
      580    22972
      581    22973        /*D* Since WAIT was specified, the only possible ALTRET from
      582    22974             the GJS$OPEN_SHARED routine is a mismatch on the
      583    22975             processor type.  If this happens, we inform the Host program
      584    22976             if this is not M$LDTRC.  A return to GJM$MCL will then cause
      585    22977             an ALTRET to the request.  If this is is M$CPEXIT then the
      586    22978             user will be deleted on return to GJM$MCL.
      587    22979        */
      588    22980    3           WHENALTRETURN DO;

  22965   2                              BAD_PROCESSOR   null
      589    22981    3   BAD_PROCESSOR: ;
      590    22982    3                FCN_MSG.ERR = SLIB_PARAMS.ERR;

  22982   2 0003DB  8CC7 0087            BAD_PROCESSOR   LDI      SLIB_PARAMS+4,AUTO
          2 0003DD  8D47 0076                            SDI      FCN_MSG+1,AUTO

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:91   
      591    22983    3                GOTO REPORT_IT;

  22983   2 0003DF  0F81 01C1                            B        s:23220,PREL

      592    22984    3                END;
      593    22985    2           END;

      594    22986        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:92   
      595    22987
      596    22988        /*D* The size of the program to be put into execution is
      597    22989             computed and checked against the user's limits.
      598    22990        */
      599    22991    1      IF SETFP_MSG.TCBSIZE = 0 THEN SETFP_MSG.TCBSIZE =1;

  22991   2 0003E1  E847 0054                            LDR,R6   SETFP_MSG+44,AUTO
          2 0003E3  6981 0004                            BNEZ,R6  s:22992,PREL

  22991   2 0003E5  6C01                                 LDV,R6   1
          2 0003E6  EF47 0054                            STR,R6   SETFP_MSG+44,AUTO

      600    22992    1      TCBSZ = (SETFP_MSG.TCBSIZE * SIZEW(G$NWIO) ) + SIZEW(G$EXCFR);

  22992   2 0003E8  6F3D                                 MLV,R6   61
          2 0003E9  6E2E                                 ADV,R6   46
          2 0003EA  EF47 0019                            STR,R6   TCBSZ,AUTO

      601    22993    1      USR_ROS_WDSZ = SIZEW(G$ROS) + SETFP_MSG.ROS_SZ + TCBSZ;

  22993   2 0003EC  EA47 0057                            ADD,R6   SETFP_MSG+47,AUTO
          2 0003EE  EA70 02EE                            ADD,R6   750,IMO
          2 0003F0  EF47 0014                            STR,R6   USR_ROS_WDSZ,AUTO

      602    22994    1      USR_ROS_PGSZ = (USR_ROS_WDSZ + 255) / 256;

  22994   2 0003F2  EA70 00FF                            ADD,R6   255,IMO
          2 0003F4  6048                                 SOR,R6   8
          2 0003F5  EF47 0015                            STR,R6   USR_ROS_PGSZ,AUTO

      603    22995    1      EXTRA_ROS_PGSZ = USR_ROS_PGSZ - GM_ROS_PGSZ;

  22995   2 0003F7  E200 0000 0000  xsym                 SUB,R6   GM_ROS_PGSZ
          2 0003FA  EF47 0016                            STR,R6   EXTRA_ROS_PGSZ,AUTO

      604    22996
      605    22997        /*D* The number of pages to be charged against the user's limit
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:93   
      606    22998             is first computed as the number of pages of program data + the
      607    22999             pages required for the ROS beyond the initial page size.
      608    23000        */
      609    23001    1      PGSZ_USR = SETFP_MSG.VDPGS + EXTRA_ROS_PGSZ + G$JIT.PCC;

  23001   2 0003FC  EA47 0056                            ADD,R6   SETFP_MSG+46,AUTO
          2 0003FE  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000401  EA46 0085                            ADD,R6   133,B6
          2 000403  EF47 001B                            STR,R6   PGSZ_USR,AUTO

      610    23002
      611    23003        /*D* If this is an M$LDTRC operation, the size of the user's
      612    23004             Data Segment 4 and the size of the debugger's data segment
      613    23005             is included.
      614    23006        */
      615    23007    1      IF (G$JIT.JUNK.MLDTRC)

  23007   2 000405  82C6 0098                            LB,'0001'X        152,B6
  23007   2 000407       0001
          2 000408  0581 0019                            BBF      s:23020,PREL

      616    23008    2      THEN DO;

      617    23009    2           IF G$ASDT_USR.DESC.V(%GM_USR_DS4#) = '1'B

  23009   2 00040A  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          2 00040D  89C5 0036                            CMZ      54,B5
          2 00040F  0881 000A                            BAGE     s:23012,PREL

      618    23010    2           THEN PGSZ_USR = PGSZ_USR + G$ASDT_USR.DESC.SIZE(%GM_USR_DS4#)+1;

  23010   2 000411  D845 0037                            LDR,R5   55,B5
          2 000413  D570 01FF                            AND,R5   511,IMO
          2 000415  DA56                                 ADD,R5   R6
          2 000416  E855                                 LDR,R6   R5
          2 000417  6E01                                 ADV,R6   1
          2 000418  EF47 001B                            STR,R6   PGSZ_USR,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:94   

      619    23011
      620    23012    2           IF G$ASDT_USR.DESC.V(%GM_DB_DS#) = '1'B

  23012   2 00041A  89C5 0004                            CMZ      4,B5
          2 00041C  0881 0005                            BAGE     s:23020,PREL

      621    23013    2           THEN PGSZ_USR = PGSZ_USR + G$JIT.PCDDS;

  23013   2 00041E  EA46 0084                            ADD,R6   132,B6
          2 000420  EF47 001B                            STR,R6   PGSZ_USR,AUTO

      622    23014    2           END;

      623    23015
      624    23016        /*D* The size of the absolute number of pages required is
      625    23017             computed in ASZ_USR.  If there is not enough physical memory
      626    23018             to start this FPRG, the error is reported.
      627    23019        */
      628    23020    1      ASZ_USR = PGSZ_USR;

  23020   2 000422  EF47 0020                            STR,R6   ASZ_USR,AUTO

      629    23021
      630    23022    1      IF SPROC_PARAMS.TYC.GET_PROC = 1

  23022   2 000424  D847 0081                            LDR,R5   SPROC_PARAMS+9,AUTO
          2 000426  5D01                                 CMV,R5   1
          2 000427  0981 0005                            BNE      s:23025,PREL

      631    23023    1      THEN ASZ_USR = ASZ_USR + SETFP_MSG.VPPGS;

  23023   2 000429  EA47 0055                            ADD,R6   SETFP_MSG+45,AUTO
          2 00042B  EF47 0020                            STR,R6   ASZ_USR,AUTO

      632    23024
      633    23025    1      IF SLIB_PARAMS.TYC.GET_PROC = 1
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:95   

  23025   2 00042D  C847 008C                            LDR,R4   SLIB_PARAMS+9,AUTO
          2 00042F  4D01                                 CMV,R4   1
          2 000430  0981 0007                            BNE      s:23028,PREL

      634    23026    1      THEN ASZ_USR = ASZ_USR + PGSZ_LIB_DATA + PGSZ_LIB_PROC;

  23026   2 000432  EA47 001C                            ADD,R6   PGSZ_LIB_DATA,AUTO
          2 000434  EA47 001D                            ADD,R6   PGSZ_LIB_PROC,AUTO
          2 000436  EF47 0020                            STR,R6   ASZ_USR,AUTO

      635    23027
      636    23028    1      IF ASZ_USR > GM_ASHUF

  23028   2 000438  E900 0000 0000  xsym                 CMR,R6   GM_ASHUF
          2 00043B  0381 0008                            BLE      s:23035,PREL

      637    23029    2      THEN DO;

  23023   2                              NO_PHYS_MEM     null
      638    23030    2   NO_PHYS_MEM: ;
      639    23031    2           FCN_MSG.ERR = EPHYS_MEMLIMIT;

  23031   2 00043D  8C80 0000 0019  01   NO_PHYS_MEM     LDI      EPHYS_MEMLIMIT
          2 000440  8D47 0076                            SDI      FCN_MSG+1,AUTO

      640    23032    2           GOTO REPORT_IT;

  23032   2 000442  0F81 015E                            B        s:23220,PREL

      641    23033    2           END;
      642    23034
      643    23035    1      IF ASZ_USR > (GM_SHUF - GM_STEP)

  23035   2 000444  B800 0000 0000  xsym                 LDR,R3   GM_SHUF
          2 000447  B200 0000 0000  xsym                 SUB,R3   GM_STEP
          2 00044A  3801 0004                            BLZ,R3   s:23037,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:96   
          2 00044C  B956                                 CMR,R3   R6
          2 00044D  0281 0032                            BGE      s:23053,PREL

      644    23036    2      THEN DO;

      645    23037    2           GMA_#PGS = ASZ_USR - (GM_SHUF - GM_STEP);

  23037   2 00044F  B800 0000 0000  xsym                 LDR,R3   GM_SHUF
          2 000452  B200 0000 0000  xsym                 SUB,R3   GM_STEP
          2 000455  B256                                 SUB,R3   R6
          2 000456  8253                                 NEG      R3
          2 000457  BF47 0024                            STR,R3   GMA_#PGS,AUTO

      646    23038    2           CALL GJS$REL_ALL(GMA_#PGS)

  23038   2 000459  DBC7 0024                            LAB,B5   GMA_#PGS,AUTO
          2 00045B  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 00045D  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00045F  CBF0 0100                            LAB,B4   256,IMO
          2 000461  E380 0000 0000  xent                 LNJ,B6   GJS$REL_ALL
          2 000464       0003                            DC       s:23040,PREL
          2 000465  0F81 001A                            B        s:23053,PREL

      647    23039    3           WHENALTRETURN DO;

      648    23040    3                IF GM_REG_4_MEM = 0

  23040   2 000467  E800 0000 0000  xsym                 LDR,R6   GM_REG_4_MEM
          2 00046A  6953                                 BEZ,R6   s:23029,SPREL

      649    23041    3                THEN GOTO NO_PHYS_MEM;
      650    23042
      651    23043    4                DO WHILE (ASZ_USR > (GM_SHUF-GM_STEP));

  23043   2 00046B  0F81 000A                            B        s:23045,PREL

      652    23044    4                     CALL GHS$REG(%GH_EVMEM) ALTRET(NO_PHYS_MEM);
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:97   

  23044   2 00046D  BB80 0000 000B  03                   LAB,B3   +11
          2 000470  CBF0 0100                            LAB,B4   256,IMO
          2 000472  E380 0000 0000  xent                 LNJ,B6   GHS$REG
          2 000475       FFC8                            DC       s:23029,PREL

      653    23045    4                     END;

  23045   2 000476  E800 0000 0000  xsym                 LDR,R6   GM_SHUF
          2 000479  E200 0000 0000  xsym                 SUB,R6   GM_STEP
          2 00047C  6871                                 BLZ,R6   s:23044,SPREL
          2 00047D  E947 0020                            CMR,R6   ASZ_USR,AUTO
          2 00047F  026E                                 BL       s:23044,SPREL

      654    23046    3                END/*whenaltreturn*/;

      655    23047    2           END/*do if asz_usr > gm_shuf*/;

      656    23048
      657    23049        /*D* The pages for the user's procedure will also be included
      658    23050             unless this is a run-unit in :SYS that was LINKed with the
      659    23051             NOCHGPMEM option.
      660    23052        */
      661    23053    1      IF NOT(SETFP_MSG.FLAGS.NOCHRPMEM)

  23053   2 000480  82C7 004C                            LB,'0200'X        SETFP_MSG+36,AUTO
  23053   2 000482       0200
          2 000483  0501 0007                            BBT      s:23061,PREL

      662    23054    1      THEN PGSZ_USR = PGSZ_USR + SETFP_MSG.VPPGS;

  23054   2 000485  E847 001B                            LDR,R6   PGSZ_USR,AUTO
          2 000487  EA47 0055                            ADD,R6   SETFP_MSG+45,AUTO
          2 000489  EF47 001B                            STR,R6   PGSZ_USR,AUTO

      663    23055
      664    23056        /*D* If this user is to be limited by the account resource table,
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:98   
      665    23057             GMA$CHKSIZE is called to check the required size against the
      666    23058             JIT limit and to reserve the required pages in the account
      667    23059             resource table.
      668    23060        */
      669    23061    1      IF G$JIT.GFR_ACCT ~= 0

  23061   2 00048B  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00048E  E2C6 00A7                            LLH,R6   167,B6
          2 000490  6901 0050                            BEZ,R6   s:23101,PREL

      670    23062    2      THEN DO;

      671    23063    2           CUR_PGSZ = G$JIT.PCD + G$JIT.PCDS + G$JIT.PCL + G$JIT.PCDDS

  23063   2 000492  D846 0080                            LDR,R5   128,B6
          2 000494  DA46 0083                            ADD,R5   131,B6
          2 000496  DA46 0082                            ADD,R5   130,B6
          2 000498  DA46 0084                            ADD,R5   132,B6
          2 00049A  DA46 0085                            ADD,R5   133,B6
          2 00049C  DA46 0086                            ADD,R5   134,B6
          2 00049E  DF47 001F                            STR,R5   CUR_PGSZ,AUTO

      672    23064    2             + G$JIT.PCC + G$JIT.PCROS;
      673    23065    2           IF NOT(G$JIT.MMFLGS.FREE_PPGS)

  23065   2 0004A0  89C6 0088                            CMZ      136,B6
          2 0004A2  0801 0005                            BAL      s:23068,PREL

      674    23066    2           THEN CUR_PGSZ = CUR_PGSZ + G$JIT.PCP;

  23066   2 0004A4  DA46 0081                            ADD,R5   129,B6
          2 0004A6  DF47 001F                            STR,R5   CUR_PGSZ,AUTO

      675    23067
      676    23068    2           IF PGSZ_USR > CUR_PGSZ

  23068   2 0004A8  D947 001B                            CMR,R5   PGSZ_USR,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:99   
          2 0004AA  0281 0030                            BGE      s:23092,PREL

      677    23069    3           THEN DO;

      678    23070    3                GMA_#PGS = PGSZ_USR - CUR_PGSZ;

  23070   2 0004AC  D247 001B                            SUB,R5   PGSZ_USR,AUTO
          2 0004AE  8255                                 NEG      R5
          2 0004AF  DF47 0024                            STR,R5   GMA_#PGS,AUTO

      679    23071    3                CHKSZ.SIZE = GMA_#PGS;

  23071   2 0004B1  DF47 00A4                            STR,R5   CHKSZ,AUTO

      680    23072    3                CHKSZ.FLGS.CHK_ONLY = '0'B;

  23072   2 0004B3  8847 00A7                            LBF,'8000'X       CHKSZ+3,AUTO
  23072   2 0004B5       8000

      681    23073    3                CHKSZ.FLGS.REQ_ALL = '1'B;

  23073   2 0004B6  8947 00A7                            LBT,'4000'X       CHKSZ+3,AUTO
  23073   2 0004B8       4000

      682    23074    3                CHKSZ.FLGS.PARK = '1'B;

  23074   2 0004B9  8947 00A7                            LBT,'2000'X       CHKSZ+3,AUTO
  23074   2 0004BB       2000

      683    23075    3                CHKSZ.FLGS.NSHUF = '0'B;

  23075   2 0004BC  8847 00A7                            LBF,'1000'X       CHKSZ+3,AUTO
  23075   2 0004BE       1000

      684    23076    3                CHKSZ.FLGS.STEP = '1'B;

  23076   2 0004BF  8947 00A7                            LBT,'0800'X       CHKSZ+3,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:100  
  23076   2 0004C1       0800

      685    23077    3                CALL GMA$CHKSIZE(CHKSZ)

  23077   2 0004C2  DBC7 00A4                            LAB,B5   CHKSZ,AUTO
          2 0004C4  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 0004C6  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0004C8  CBF0 0100                            LAB,B4   256,IMO
          2 0004CA  E380 0000 0000  xent                 LNJ,B6   GMA$CHKSIZE
          2 0004CD       0003                            DC       s:23079,PREL
          2 0004CE  0F81 0007                            B        s:23083,PREL

      686    23078    4                WHENALTRETURN DO;

      687    23079    4                     FCN_MSG.ERR = CHKSZ.ERR;

  23079   2 0004D0  8CC7 00A5                            LDI      CHKSZ+1,AUTO
          2 0004D2  8D47 0076                            SDI      FCN_MSG+1,AUTO

      688    23080    4                     GOTO REPORT_IT;

  23080   2 0004D4  0F81 00CC                            B        s:23220,PREL

      689    23081    4                     END;
      690    23082
      691    23083    3                RELEASE_ON_ERROR = '1'B;

  23083   2 0004D6  8947 0021                            LBT,'8000'X       RELEASE_ON_ERROR,AUTO
  23083   2 0004D8       8000

      692    23084    3                END;

  23084   2 0004D9  0F81 0014                            B        s:23108,PREL

      693    23085
      694    23086        /*D* If the user already has enoung memory reserved in the account
      695    23087             resource table, i.e. a large run-unit M$LDTRCing to a smaller
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:101  
      696    23088             one, the number of pages to be deallocated in the table is
      697    23089             remembered in GMA_#PGS.
      698    23090        */
      699    23091    3           ELSE DO;

      700    23092    3                GMA_#PGS = CUR_PGSZ - PGSZ_USR;

  23092   2 0004DB  D247 001B                            SUB,R5   PGSZ_USR,AUTO
          2 0004DD  DF47 0024                            STR,R5   GMA_#PGS,AUTO

      701    23093    3                END;

      702    23094
      703    23095    2           END;

  23095   2 0004DF  0F81 000E                            B        s:23108,PREL

      704    23096
      705    23097        /*D* If this user is not limited by the account resource table,
      706    23098             the only check is against his user limit.
      707    23099        */
      708    23100    2      ELSE DO;

      709    23101    2           IF PGSZ_USR > G$JIT.MAXMEM

  23101   2 0004E1  D847 001B                            LDR,R5   PGSZ_USR,AUTO
          2 0004E3  D946 0089                            CMR,R5   137,B6
          2 0004E5  0381 0008                            BLE      s:23108,PREL

      710    23102    3           THEN DO;

      711    23103    3                FCN_MSG.ERR = EMEMLIMIT;

  23103   2 0004E7  8C80 0000 0017  01                   LDI      EMEMLIMIT
          2 0004EA  8D47 0076                            SDI      FCN_MSG+1,AUTO

      712    23104    3                GOTO REPORT_IT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:102  

  23104   2 0004EC  0F81 00B4                            B        s:23220,PREL

      713    23105    3                END;
      714    23106    2           END/*do if jit.gfr_acct = 0*/;
      715    23107
      716    23108    1      PGSZ_USR = PGSZ_USR - G$JIT.PCC;

  23108   2 0004EE  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 0004F1  E847 001B                            LDR,R6   PGSZ_USR,AUTO
          2 0004F3  E246 0085                            SUB,R6   133,B6
          2 0004F5  EF47 001B                            STR,R6   PGSZ_USR,AUTO

      717    23109
      718    23110        /*E*   ERROR:  GJS-E$MEMLIMIT-E
      719    23111               MESSAGE: FEP User's memory limit exceeded.
      720    23112               DESCRIPTION: If the severity of the error is G_SEV_ERROR#,
      721    23113                            the error was because the maxcore test internal
      722    23114                            to the GJS$STEP routine failed.  If the severity
      723    23115                            is G_SEV_ABORT#, it indicates an ALTRET from the
      724    23116                            GMA$GET routine.
      725    23117        */
      726    23118
      727    23119        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:103  
      728    23120
      729    23121        /*D* If these are pseudo resources associated with the run-unit
      730    23122             checks are then made to insure that those resources are
      731    23123             within the user's limits and available.
      732    23124        */
      733    23125    1      IF SETFP_MSG.PSEUDO_COUNT = 0

  23125   2 0004F7  D2C7 004D                            LLH,R5   SETFP_MSG+37,AUTO
          2 0004F9  5981 0005                            BNEZ,R5  s:23128,PREL

      734    23126    1      THEN I = 0;

  23126   2 0004FB  8747 0013                            CL       I,AUTO
          2 0004FD  0F81 014E                            B        s:23289,PREL

      735    23127    2      ELSE DO;

      736    23128    3           DO I=0 TO 7;

  23128   2 0004FF  8747 0013                            CL       I,AUTO

      737    23129    3                IF SETFP_MSG.PSEUDO_TEXT = GFR_PSUDO_NM(I)

  23129   2 000501  EB80 0000 0000  xsym                 LAB,B6   GFR_PSUDO_NM
          2 000504  B847 0013                            LDR,R3   I,AUTO
          2 000506  3003                                 SOL,R3   3
          2 000507  0022                                 ACM      ;
          2 000508       4807 004E                                ALPHANUM(SETFP_MSG+38,AUTO,,8,FILL),;
          2 00050A       4836 0000                                ALPHANUM(0,B6,R3,,8,FILL)
          2 00050C  5301 0088                            CBNE     s:23218,PREL

      738    23130    4                THEN DO;

      739    23131    4                     IF G$JIT.CURSUDO(I) < SETFP_MSG.PSEUDO_COUNT

  23131   2 00050E  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000511  DBC6 00A3                            LAB,B5   163,B6
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:104  
          2 000513  A847 0013                            LDR,R2   I,AUTO
          2 000515  E2A5                                 LLH,R6   ,B5,R2
          2 000516  D2C7 004D                            LLH,R5   SETFP_MSG+37,AUTO
          2 000518  E955                                 CMR,R6   R5
          2 000519  0881 0072                            BAGE     s:23213,PREL

      740    23132    5                     THEN DO;

      741    23133    5                          PSEUDO_NEEDED = SETFP_MSG.PSEUDO_COUNT - G$JIT.CURSUDO(I);

  23133   2 00051B  DBC6 00A3                            LAB,B5   163,B6
          2 00051D  E2A5                                 LLH,R6   ,B5,R2
          2 00051E  D256                                 SUB,R5   R6
          2 00051F  DF47 0012                            STR,R5   PSEUDO_NEEDED,AUTO

      742    23134                               %LOCK (G=GFR_RES_LOCK);

  23139   2 000521  BB80 0000 000D  03                   LAB,B3   +13
          2 000524  CBF0 0100                            LAB,B4   256,IMO
          2 000526  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          2 000529       0001                            DC       s:23142,PREL

      743    23141
      744    23142    5                          IF PSEUDO_NEEDED > GFR_PSUDO_MAX_SYS(I)

  23142   2 00052A  B847 0013                            LDR,R3   I,AUTO
          2 00052C  E830 0000 0000  xsym                 LDR,R6   GFR_PSUDO_MAX_SYS,R3
          2 00052F  E230 0000 0000  xsym                 SUB,R6   GFR_PSUDO_CUR_SYS,R3
          2 000532  6801 0025                            BLZ,R6   s:23157,PREL
          2 000534  E947 0012                            CMR,R6   PSEUDO_NEEDED,AUTO
          2 000536  0201 0021                            BL       s:23157,PREL
          2 000538  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00053B  A2C6 0004                            LLH,R2   4,B6
          2 00053D  DCA0 0000 0000  xsym                 LDB,B5   GFR_PSUDO_MAX$,R2
          2 000540  CCA0 0000 0000  xsym                 LDB,B4   GFR_PSUDO_CUR$,R2
          2 000543  E835                                 LDR,R6   ,B5,R3
          2 000544  E234                                 SUB,R6   ,B4,R3
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:105  
          2 000545  6801 0012                            BLZ,R6   s:23157,PREL
          2 000547  E947 0012                            CMR,R6   PSEUDO_NEEDED,AUTO
          2 000549  0201 000E                            BL       s:23157,PREL
          2 00054B  BBC6 009F                            LAB,B3   159,B6
          2 00054D  E2B3                                 LLH,R6   ,B3,R3
          2 00054E  BBC6 00A3                            LAB,B3   163,B6
          2 000550  D2B3                                 LLH,R5   ,B3,R3
          2 000551  E255                                 SUB,R6   R5
          2 000552  6801 0005                            BLZ,R6   s:23157,PREL
          2 000554  E947 0012                            CMR,R6   PSEUDO_NEEDED,AUTO
          2 000556  0281 0011                            BGE      s:23181,PREL

      745    23143    5                            - GFR_PSUDO_CUR_SYS(I)
      746    23144
      747    23145    5                            OR PSEUDO_NEEDED > GFR_PSUDO_MAX$(G$JIT.MODE)->G$PSUDO(I)
      748    23146    5                            - GFR_PSUDO_CUR$(G$JIT.MODE)->G$PSUDO(I)
      749    23147
      750    23148    5                            OR PSEUDO_NEEDED > G$JIT.MAXSUDO(I)
      751    23149    5                            - G$JIT.CURSUDO(I)
      752    23150
      753    23151    6                          THEN DO;

      754    23152                                    %UNLOCK (G=GFR_RES_LOCK);

  23157   2 000558  BB80 0000 000D  03                   LAB,B3   +13
          2 00055B  CBF0 0100                            LAB,B4   256,IMO
          2 00055D  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          2 000560       0001                            DC       s:23160,PREL

      755    23159
      756    23160    6                               FCN_MSG.ERR = ESUOUT;

  23160   2 000561  8C80 0000 0013  01                   LDI      ESUOUT
          2 000564  8D47 0076                            SDI      FCN_MSG+1,AUTO

      757    23161        /*
      758    23162                                    FCN_MSG.ERR.ERR# = FCN_MSG.ERR.ERR# + I;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:106  
      759    23163        */
      760    23164    6                               GOTO REPORT_IT;

  23164   2 000566  0F81 003A                            B        s:23220,PREL

      761    23165    6                               END;
      762    23166
      763    23167        /*E* ERROR: GJS-E$SUOUT-E
      764    23168              MESSAGE:  The pseudo resources you require are not available.
      765    23169              MESSAGE1: The number of LCP-6 pseudo resources associated with
      766    23170                        the run-unit exceeds the maximum number of pseudo
      767    23171                        resources of that type for which you have been authorized
      768    23172                        or granting your request for LCP-6 pseudo resources would
      769    23173                        cause the total in use on the system or the total in use
      770    23174                        for your mode (User, CG or Handler) to exceed the maximum.
      771    23175        */
      772    23176
      773    23177
      774    23178        /*D* If the user doesn't currently own enough pseudo resources of
      775    23179             the type specifed in the head record, they are acquired now.
      776    23180        */
      777    23181    5                          GFR_PSUDO_CUR_SYS(I)

  23181   2 000568  E830 0000 0000  xsym                 LDR,R6   GFR_PSUDO_CUR_SYS,R3
          2 00056B  EA47 0012                            ADD,R6   PSEUDO_NEEDED,AUTO
          2 00056D  EF30 0000 0000  xsym                 STR,R6   GFR_PSUDO_CUR_SYS,R3

      778    23182    5                            = GFR_PSUDO_CUR_SYS(I)+ PSEUDO_NEEDED;
      779    23183
      780    23184    5                          GFR_PSUDO_CUR$(G$JIT.MODE)->G$PSUDO(I)

  23184   2 000570  A2C6 0004                            LLH,R2   4,B6
          2 000572  DCA0 0000 0000  xsym                 LDB,B5   GFR_PSUDO_CUR$,R2
          2 000575  D835                                 LDR,R5   ,B5,R3
          2 000576  DA47 0012                            ADD,R5   PSEUDO_NEEDED,AUTO
          2 000578  DF35                                 STR,R5   ,B5,R3

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:107  
      781    23185    5                            = GFR_PSUDO_CUR$(G$JIT.MODE)->G$PSUDO(I) + PSEUDO_NEEDED;
      782    23186
      783    23187
      784    23188                               %UNLOCK (G=GFR_RES_LOCK);

  23193   2 000579  BB80 0000 000D  03                   LAB,B3   +13
          2 00057C  CBF0 0100                            LAB,B4   256,IMO
          2 00057E  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          2 000581       0001                            DC       s:23203,PREL

      785    23195
      786    23196
      787    23197        /*D* After the step pseudo resources have been acquired, the count
      788    23198             of this pseudo resources in the JIT is reset to zero.
      789    23199             This prevents the rundown routine from releasing
      790    23200             them.  The new value for step pseudo counts is remembered in
      791    23201             the SETFP message.
      792    23202        */
      793    23203    5                          G$JIT.CURSUDO(I) = 0;

  23203   2 000582  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000585  DBC6 00A3                            LAB,B5   163,B6
          2 000587  B847 0013                            LDR,R3   I,AUTO
          2 000589  87B5                                 CLH      ,B5,R3

      794    23204
      795    23205    5                          END /*do if jit.cur < required*/;

  23205   2 00058A  0F81 0008                            B        s:23216,PREL

      796    23206
      797    23207
      798    23208        /*D* If the user already currently owns enough pseudo resources of
      799    23209             the type specifed in the head record, any previously acquired
      800    23210             in excess of what is needed here will be released by rundown.
      801    23211        */
      802    23212    5                     ELSE DO;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:108  

      803    23213    5                         G$JIT.CURSUDO(I) = G$JIT.CURSUDO(I) - SETFP_MSG.PSEUDO_COUNT;

  23213   2 00058C  DBC6 00A3                            LAB,B5   163,B6
          2 00058E  E2A5                                 LLH,R6   ,B5,R2
          2 00058F  E255                                 SUB,R6   R5
          2 000590  DBC6 00A3                            LAB,B5   163,B6
          2 000592  E7A5                                 STH,R6   ,B5,R2

      804    23214    5                          END;

      805    23215
      806    23216    4                     GOTO GOT_PSEUDO;

  23216   2 000593  0F81 00B8                            B        s:23289,PREL

      807    23217    4                     END /* do on name match */;
      808    23218    3                END/* do 0 to 7*/;

  23218   2 000595  8AC7 0013                            INC      I,AUTO
          2 000597  E847 0013                            LDR,R6   I,AUTO
          2 000599  6D07                                 CMV,R6   7
          2 00059A  0A81 FF66                            BALE     s:23129,PREL

      809    23219
      810    23220    2           FCN_MSG.ERR = EBSUNM;

  23220   2 00059C  8C80 0000 0015  01                   LDI      EBSUNM
          2 00059F  8D47 0076                            SDI      FCN_MSG+1,AUTO

  23220   2                              REPORT_IT       null
      811    23221
      812    23222        /*E* ERROR: GJS-E$BSUNM-E
      813    23223             MESSAGE: The pseudo resource associated with the FPRG does not exist.
      814    23224        */
      815    23225
      816    23226        /*D* If the memory or resource test fails, the DONE message is sent
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:109  
      817    23227             to the host and an answer is read back to keep us in sync.
      818    23228             If a library or FPRG shared file has been opened, it is closed.
      819    23229        */
      820    23230    2   REPORT_IT: ;
      821    23231    2           FCN_MSG.ERR.SEV = %G_SEV_ABORT#;

  23231   2 0005A1  6C06                 REPORT_IT       LDV,R6   6
          2 0005A2  EAC7 0077                            SRM,R6,'0007'X    FCN_MSG+2,AUTO
          2 0005A4       0007

      822    23232    2           IF G$JIT.JUNK.MLDTRC

  23232   2 0005A5  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 0005A8  82C6 0098                            LB,'0001'X        152,B6
          2 0005AA       0001
          2 0005AB  0581 002C                            BBF      s:23239,PREL

      823    23233    3           THEN DO;

      824    23234    3                FCN_MSG.FCN = %GJ_NAK#;

  23234   2 0005AD  5C1D                                 LDV,R5   29
          2 0005AE  D7C7 0075                            STH,R5   FCN_MSG,AUTO

      825    23235    3                CALL KNA$WRITE(%G_M$LM#,FCN_MSG_,ERR);

  23235   2 0005B0  DBF0 0002                            LAB,B5   2,IMO
          2 0005B2  CBC7 0026                            LAB,B4   ERR,AUTO
          2 0005B4  CFC7 00E8                            STB,B4   KEYMES+31,AUTO
          2 0005B6  BBC7 0009                            LAB,B3   FCN_MSG_,AUTO
          2 0005B8  BFC7 00E6                            STB,B3   KEYMES+29,AUTO
          2 0005BA  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 0005BC  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0005BE  CBF0 0300                            LAB,B4   768,IMO
          2 0005C0  E380 0000 0000  xent                 LNJ,B6   KNA$WRITE
          2 0005C3       0001                            DC       s:23236,PREL

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:110  
      826    23236    3                CALL KNA$READ(%G_M$LM#,V_,ERR); /*V_ is ok - garbage buffer */

  23236   2 0005C4  EBF0 0002                            LAB,B6   2,IMO
          2 0005C6  DBC7 0026                            LAB,B5   ERR,AUTO
          2 0005C8  DFC7 00E8                            STB,B5   KEYMES+31,AUTO
          2 0005CA  CBC7 0006                            LAB,B4   V_,AUTO
          2 0005CC  CFC7 00E6                            STB,B4   KEYMES+29,AUTO
          2 0005CE  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 0005D0  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0005D2  CBF0 0300                            LAB,B4   768,IMO
          2 0005D4  E380 0000 0000  xent                 LNJ,B6   KNA$READ
          2 0005D7       0001                            DC       s:23239,PREL

      827    23237    3                END;

      828    23238
      829    23239    2           I = SPROC_PARAMS.PNUM;

  23239   2 0005D8  E847 007A                            LDR,R6   SPROC_PARAMS+2,AUTO
          2 0005DA  E570 00FF                            AND,R6   255,IMO
          2 0005DC  EF47 0013                            STR,R6   I,AUTO

      830    23240    2           CALL GJS$CLOSE_SHARED(I);

  23240   2 0005DE  EBC7 0013                            LAB,B6   I,AUTO
          2 0005E0  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 0005E2  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0005E4  CBF0 0100                            LAB,B4   256,IMO
          2 0005E6  E380 0000 0000  xent                 LNJ,B6   GJS$CLOSE_SHARED
          2 0005E9       0001                            DC       s:23241,PREL

      831    23241    2           I = SLIB_PARAMS.PNUM;

  23241   2 0005EA  E847 0085                            LDR,R6   SLIB_PARAMS+2,AUTO
          2 0005EC  E570 00FF                            AND,R6   255,IMO
          2 0005EE  EF47 0013                            STR,R6   I,AUTO

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:111  
      832    23242    2           CALL GJS$CLOSE_SHARED(I);

  23242   2 0005F0  EBC7 0013                            LAB,B6   I,AUTO
          2 0005F2  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 0005F4  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0005F6  CBF0 0100                            LAB,B4   256,IMO
          2 0005F8  E380 0000 0000  xent                 LNJ,B6   GJS$CLOSE_SHARED
          2 0005FB       0001                            DC       s:23243,PREL

      833    23243    2           GUD_PARAMS.ERR = FCN_MSG.ERR;

  23243   2 0005FC  8CC7 0076                            LDI      FCN_MSG+1,AUTO
          2 0005FE  ECC7 0004                            LDB,B6   @GUD_PARAMS,AUTO
          2 000600  8D46 0003                            SDI      3,B6

      834    23244
      835    23245        /*D* If we have marked allocated memory in the account resource
      836    23246             tables, it is deallocated.
      837    23247        */
      838    23248    2           IF RELEASE_ON_ERROR

  23248   2 000602  89C7 0021                            CMZ      RELEASE_ON_ERROR,AUTO
          2 000604  0881 000D                            BAGE     s:23251,PREL

      839    23249    3           THEN DO;

      840    23250    3                CALL GMA$REL_ACCTMEM(GMA_#PGS);

  23250   2 000606  DBC7 0024                            LAB,B5   GMA_#PGS,AUTO
          2 000608  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 00060A  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00060C  CBF0 0100                            LAB,B4   256,IMO
          2 00060E  E380 0000 0000  xent                 LNJ,B6   GMA$REL_ACCTMEM
          2 000611       0001                            DC       s:23251,PREL

      841    23251    3                END;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:112  
  23248   2                              ERR_CPEXIT      null
      842    23252
      843    23253
      844    23254        /*D* If an error occurred while processing an M$LDTRC, return to
      845    23255             GJM$MCL; the user is intact and will get an ALTRET.
      846    23256             If the error occured while processing an M$CPEXIT, the user
      847    23257             is deleted.
      848    23258        */
      849    23259    2   ERR_CPEXIT: ;
      850    23260    2           IF G$JIT.JUNK.MLDTRC

  23260   2 000612  EC80 0000 0000  xsym ERR_CPEXIT      LDB,B6   G$JIT$
          2 000615  82C6 0098                            LB,'0001'X        152,B6
          2 000617       0001
          2 000618  0581 000A                            BBF      s:23266,PREL

      851    23261    3           THEN DO;

      852    23262    3                GUD_PARAMS.ERR = FCN_MSG.ERR;

  23262   2 00061A  8CC7 0076                            LDI      FCN_MSG+1,AUTO
          2 00061C  DCC7 0004                            LDB,B5   @GUD_PARAMS,AUTO
          2 00061E  8D45 0003                            SDI      3,B5

      853    23263    3                RETURN;

  23263   2 000620  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      854    23264    3                END;
      855    23265
      856    23266    2           IF G$JIT.PROG_ENTRY ~= %G_PE_BF#

  23266   2 000623  82C6 0003                            LB,'00FF'X        3,B6
  23266   2 000625       00FF
          2 000626  0581 001C                            BBF      s:23281,PREL

      857    23267    3           THEN DO;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:113  

      858    23268    3                G$JIT.JUNK.STEP = '1'B;

  23268   2 000628  8946 0098                            LBT,'0010'X       152,B6
  23268   2 00062A       0010

      859    23269    3                G$JIT.STEP = G$JIT.STEP +1;

  23269   2 00062B  8AC6 005A                            INC      90,B6

      860    23270    3                CALL GJS$ABORTM(FCN_MSG.ERR);

  23270   2 00062D  DBC7 0076                            LAB,B5   FCN_MSG+1,AUTO
          2 00062F  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 000631  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000633  CBF0 0100                            LAB,B4   256,IMO
          2 000635  E380 0000 0000  xent                 LNJ,B6   GJS$ABORTM
          2 000638       0001                            DC       s:23271,PREL

      861    23271    3                GUD_PARAMS.ERR = EALTRET;

  23271   2 000639  8C80 0000 0011  01                   LDI      EALTRET
          2 00063C  ECC7 0004                            LDB,B6   @GUD_PARAMS,AUTO
          2 00063E  8D46 0003                            SDI      3,B6

      862    23272    3                RETURN;

  23272   2 000640  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      863    23273    3                END;
      864    23274
      865    23275        /*   SCREECH_CODE: GJS-S$DELUSR
      866    23276             TYPE: SUA
      867    23277             MESSAGE: The REG to delete the user returned.
      868    23278        */
      869    23279
      870    23280    3           ELSE DO;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:114  

      871    23281    3                CALL SCREECH(SMING);

  23281   2 000643  BB80 0000 000F  03                   LAB,B3   +15
          2 000646  CBF0 0100                            LAB,B4   256,IMO
          2 000648  E380 0000 0000  xent                 LNJ,B6   SCREECH
          2 00064B       0001                            DC       s:23289,PREL

      872    23282    3                END;

      873    23283
      874    23284        /*S* SCREECH_CODE: GJS-S$MING
      875    23285             TYPE: SCREECH
      876    23286             MESSAGE: An LCP-6 system ghost has aborted.
      877    23287        */
      878    23288
      879    23289    2           END /* do if SETFP_MSG.PSEUDOS */;

  23268   2                              GOT_PSEUDO      null
      880    23290
      881    23291        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:115  
      882    23292        /*D* If the memory and resource tests are successful, the user program
      883    23293             that issured an M$LDTRC is run down freeing the virtual space
      884    23294             for the new program.  Any errors detected after this point
      885    23295             will cause the job to be aborted.
      886    23296        */
      887    23297    1   GOT_PSEUDO: ;
      888    23298    1      CALL GHI$UTS(G$JIT.START);

  23298   2 00064C  EC80 0000 0000  xsym GOT_PSEUDO      LDB,B6   G$JIT$
          2 00064F  DBC6 0020                            LAB,B5   32,B6
          2 000651  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 000653  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000655  CBF0 0100                            LAB,B4   256,IMO
          2 000657  E380 0000 0000  xent                 LNJ,B6   GHI$UTS
          2 00065A       0001                            DC       s:23299,PREL

      889    23299    1      G$JIT.START = G$JIT.START + G_BOOTTIME;

  23299   2 00065B  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00065E  8CC6 0020                            LDI      32,B6
          2 000660  8400 0000 0000  xsym                 AID      G_BOOTTIME
          2 000663  8D46 0020                            SDI      32,B6

      890    23300
      891    23301    1      IF (RELEASE_ON_ERROR = '0'B) AND (GMA_#PGS ~=0)

  23301   2 000665  89C7 0021                            CMZ      RELEASE_ON_ERROR,AUTO
          2 000667  0801 0011                            BAL      s:23304,PREL
          2 000669  D847 0024                            LDR,R5   GMA_#PGS,AUTO
          2 00066B  5901 000D                            BEZ,R5   s:23304,PREL

      892    23302    1      THEN CALL GMA$REL_ACCTMEM(GMA_#PGS);

  23302   2 00066D  DBC7 0024                            LAB,B5   GMA_#PGS,AUTO
          2 00066F  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 000671  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000673  CBF0 0100                            LAB,B4   256,IMO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:116  
          2 000675  E380 0000 0000  xent                 LNJ,B6   GMA$REL_ACCTMEM
          2 000678       0001                            DC       s:23304,PREL

      893    23303
      894    23304    1      IF (G$JIT.JUNK.MLDTRC)

  23304   2 000679  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00067C  82C6 0098                            LB,'0001'X        152,B6
          2 00067E       0001
          2 00067F  0581 003B                            BBF      s:23321,PREL

      895    23305    2      THEN DO;

      896    23306    2           IF GUD_PARAMS.PTRS.PAR5$ ~= ADDR(NIL)

  23306   2 000681  DCC7 0004                            LDB,B5   @GUD_PARAMS,AUTO
          2 000683  8DC5 000E                            CMN      14,B5
          2 000685  0901 001D                            BE       s:23313,PREL

      897    23307    3           THEN DO;

      898    23308    3                GUD_PARAMS.BND.PAR5 = GUD_PARAMS.BND.PAR5 +1;

  23308   2 000687  8AC5 002A                            INC      42,B5

      899    23309    3                G$JIT.CCBUF = GUD_PARAMS.PTRS.PAR5$ ->G$CCBUF;

  23309   2 000689  CCC5 000E                            LDB,B4   14,B5
          2 00068B  E845 002A                            LDR,R6   42,B5
          2 00068D  EF47 00E4                            STR,R6   KEYMES+27,AUTO
          2 00068F  CFC7 00E5                            STB,B4   KEYMES+28,AUTO
          2 000691  AB84                                 LAB,B2   ,B4
          2 000692  2C00                                 LDV,R2   0
          2 000693  BBC6 00CE                            LAB,B3   206,B6
          2 000695  3C00                                 LDV,R3   0
          2 000696  F870 0100                            LDR,R7   256,IMO
          2 000698  D380 0000 0000  xent                 LNJ,B5   X6C_ALR
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:117  

      900    23310    3                G$JIT.JUNK2.USER_CCBUF = '1'B;

  23310   2 00069B  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00069E  8946 0097                            LBT,'0004'X       151,B6
          2 0006A0       0004

      901    23311    3                END;

  23311   2 0006A1  0F81 0004                            B        s:23316,PREL

      902    23312    3           ELSE DO;

      903    23313    3                G$JIT.JUNK2.USER_CCBUF = '0'B;

  23313   2 0006A3  8846 0097                            LBF,'0004'X       151,B6
  23313   2 0006A5       0004

      904    23314    3                END;

      905    23315
      906    23316    2           CALL GJS$RUND(GMA_#PGS);

  23316   2 0006A6  DBC7 0024                            LAB,B5   GMA_#PGS,AUTO
          2 0006A8  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 0006AA  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0006AC  CBF0 0100                            LAB,B4   256,IMO
          2 0006AE  E380 0000 0000  xent                 LNJ,B6   GJS$RUND
          2 0006B1       0001                            DC       s:23317,PREL

      907    23317    2           G$JIT.PROG_ENTRY = %G_PE_LDTRC#;

  23317   2 0006B2  6C02                                 LDV,R6   2
          2 0006B3  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 0006B6  EAC6 0003                            SRM,R6,'00FF'X    3,B6
          2 0006B8       00FF

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:118  
      908    23318    2           END;

  23318   2 0006B9  0F81 000C                            B        s:23335,PREL

      909    23319
      910    23320    2      ELSE DO;

      911    23321    2           IF G$JIT.PROG_ENTRY ~= %G_PE_BF#

  23321   2 0006BB  82C6 0003                            LB,'00FF'X        3,B6
  23321   2 0006BD       00FF
          2 0006BE  0581 0005                            BBF      s:23324,PREL

      912    23322    2           THEN G$JIT.PROG_ENTRY = %G_PE_HOST#;

  23322   2 0006C0  6C01                                 LDV,R6   1
          2 0006C1  EAC6 0003                            SRM,R6,'00FF'X    3,B6
          2 0006C3       00FF

      913    23323
      914    23324    2           G$JIT.STEP = G$JIT.STEP+1;

  23324   2 0006C4  8AC6 005A                            INC      90,B6

      915    23325
      916    23326        /*N* If the count of the number of job steps wraps from 65535
      917    23327             to zero, we may screw up the TSTACK later in this routine.
      918    23328                IF G$JIT.STEP = 0 THEN G$JIT.STEP =2;
      919    23329        */
      920    23330    2           END;

      921    23331
      922    23332        /*D* Bump GM_STEP so the pages dont get allocated should we get
      923    23333             regged while downline loading the FPRG.
      924    23334        */
      925    23335    1      GM_STEP = GM_STEP + ASZ_USR;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:119  
  23335   2 0006C6  E800 0000 0000  xsym                 LDR,R6   GM_STEP
          2 0006C9  EA47 0020                            ADD,R6   ASZ_USR,AUTO
          2 0006CB  EF00 0000 0000  xsym                 STR,R6   GM_STEP

      926    23336
      927    23337        /*D* The Step-in-progress bit is set in JIT.JUNK at this point.
      928    23338        */
      929    23339    1      G$JIT.JUNK.STEP = '1'B;

  23339   2 0006CE  8946 0098                            LBT,'0010'X       152,B6
  23339   2 0006D0       0010

      930    23340
      931    23341        /*D* next the JIT memory deliminators are set up.
      932    23342        */
      933    23343
      934    23344    1      G$JIT.SPROC# = SPROC_PARAMS.PNUM;

  23344   2 0006D1  D847 007A                            LDR,R5   SPROC_PARAMS+2,AUTO
          2 0006D3  D570 00FF                            AND,R5   255,IMO
          2 0006D5  D7C6 008C                            STH,R5   140,B6

      935    23345    1      G$JIT.SLIB# = SLIB_PARAMS.PNUM;

  23345   2 0006D7  C847 0085                            LDR,R4   SLIB_PARAMS+2,AUTO
          2 0006D9  CAC6 008C                            SRM,R4,'00FF'X    140,B6
          2 0006DB       00FF

      936    23346    1      G$JIT.CURSUDO(I) = SETFP_MSG.PSEUDO_COUNT;

  23346   2 0006DC  B2C7 004D                            LLH,R3   SETFP_MSG+37,AUTO
          2 0006DE  DBC6 00A3                            LAB,B5   163,B6
          2 0006E0  A847 0013                            LDR,R2   I,AUTO
          2 0006E2  B7A5                                 STH,R3   ,B5,R2

      937    23347
      938    23348    1      G$JIT.DLL = %GM_FIRST_IS_VP;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:120  

  23348   2 0006E3  E870 0100                            LDR,R6   256,IMO
          2 0006E5  EF46 0079                            STR,R6   121,B6

      939    23349    1      G$JIT.DUL = G$JIT.DLL + SETFP_MSG.VDPGS -1;

  23349   2 0006E7  EA47 0056                            ADD,R6   SETFP_MSG+46,AUTO
          2 0006E9  6EFF                                 ADV,R6   -1
          2 0006EA  EF46 007A                            STR,R6   122,B6

      940    23350
      941    23351    1      G$JIT.PLL = G$JIT.DLL + ( ((SETFP_MSG.VDPGS+255) / 256) * 256);

  23351   2 0006EC  D847 0056                            LDR,R5   SETFP_MSG+46,AUTO
          2 0006EE  DA70 00FF                            ADD,R5   255,IMO
          2 0006F0  5048                                 SOR,R5   8
          2 0006F1  5008                                 SOL,R5   8
          2 0006F2  DA46 0079                            ADD,R5   121,B6
          2 0006F4  DF46 007B                            STR,R5   123,B6

      942    23352    1      G$JIT.PUL = G$JIT.PLL + SETFP_MSG.VPPGS -1;

  23352   2 0006F6  DA47 0055                            ADD,R5   SETFP_MSG+45,AUTO
          2 0006F8  5EFF                                 ADV,R5   -1
          2 0006F9  DF46 007C                            STR,R5   124,B6

      943    23353
      944    23354    1      IF (SETFP_MSG.FLAGS.NOCHRPMEM)

  23354   2 0006FB  82C7 004C                            LB,'0200'X        SETFP_MSG+36,AUTO
  23354   2 0006FD       0200
          2 0006FE  0581 0006                            BBF      s:23356,PREL

      945    23355    1      THEN G$JIT.MMFLGS.FREE_PPGS = '1'B;

  23355   2 000700  8946 0088                            LBT,'8000'X       136,B6
  23355   2 000702       8000
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:121  
          2 000703  0F81 0004                            B        s:23358,PREL

      946    23356    1      ELSE G$JIT.MMFLGS.FREE_PPGS = '0'B;

  23356   2 000705  8846 0088                            LBF,'8000'X       136,B6
  23356   2 000707       8000

      947    23357
      948    23358    1      IF (SETFP_MSG.FLAGS.LAUTO)

  23358   2 000708  82C7 004C                            LB,'0004'X        SETFP_MSG+36,AUTO
  23358   2 00070A       0004
          2 00070B  0581 000B                            BBF      s:23360,PREL

      949    23359    1      THEN G$ROS.AUTO_DS = %GM_LAUTO_DS_BASE;

  23359   2 00070D  8CF0 0000 D000                       LDI      53248,IMO
          2 000710  DC80 0000 0000  xsym                 LDB,B5   G$ROS$
          2 000713  8D45 0016                            SDI      22,B5
          2 000715  0F81 0009                            B        s:23362,PREL

      950    23360    1      ELSE G$ROS.AUTO_DS = %GM_UAUTO_DS_BASE;

  23360   2 000717  8CF0 000A 0000                       LDI      655360,IMO
          2 00071A  DC80 0000 0000  xsym                 LDB,B5   G$ROS$
          2 00071D  8D45 0016                            SDI      22,B5

      951    23361
      952    23362    1      IF SETFP_MSG.LIB_NAME.L ~= 0

  23362   2 00071F  D2C7 005E                            LLH,R5   SETFP_MSG+54,AUTO
          2 000721  5901 000B                            BEZ,R5   s:23368,PREL

      953    23363    2      THEN DO;

      954    23364    2           G$JIT.LLL = %GM_LIBIS1_VP;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:122  
  23364   2 000723  C870 0E00                            LDR,R4   3584,IMO
          2 000725  CF46 007D                            STR,R4   125,B6

      955    23365    2           G$JIT.LUL = %GM_LIBIS2_VP;

  23365   2 000727  E870 0F00                            LDR,R6   3840,IMO
          2 000729  EF46 007E                            STR,R6   126,B6

      956    23366    2           END;

  23366   2 00072B  0F81 0009                            B        s:23371,PREL

      957    23367    2      ELSE DO;

      958    23368    2           G$JIT.LLL = %GM_LIBIS2_VP+1;

  23368   2 00072D  C870 0F01                            LDR,R4   3841,IMO
          2 00072F  CF46 007D                            STR,R4   125,B6

      959    23369    2           G$JIT.LUL = %GM_LIBIS2_VP;

  23369   2 000731  E870 0F00                            LDR,R6   3840,IMO
          2 000733  EF46 007E                            STR,R6   126,B6

      960    23370    2           END;

      961    23371    1      G$JIT.PCL = 0;

  23371   2 000735  8746 0082                            CL       130,B6

      962    23372
      963    23373
      964    23374
      965    23375        /*D* Initialize the read parameters.
      966    23376        */
      967    23377    1      RD_PARAMS.BIAS = SETFP_MSG.DATA_BIAS;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:123  
  23377   2 000737  8CC7 005C                            LDI      SETFP_MSG+52,AUTO
          2 000739  8D47 0090                            SDI      RD_PARAMS+2,AUTO

      968    23378    1      RD_PARAMS.ERR = ERR;

  23378   2 00073B  8CC7 0026                            LDI      ERR,AUTO
          2 00073D  8D47 009A                            SDI      RD_PARAMS+12,AUTO

      969    23379
      970    23380        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:124  
      971    23381        /*D* If a Library must be associated, it is read first.
      972    23382             This is because of how KIF$FPRG wants it.
      973    23383        */
      974    23384    1      IF SETFP_MSG.LIB_NAME.L ~= 0

  23384   2 00073F  5901 009A                            BEZ,R5   s:23432,PREL

      975    23385    2      THEN DO;

      976    23386    2           GP_PARAMS.SHARE = SLIB_PARAMS.TYC;

  23386   2 000741  ABC7 008A                            LAB,B2   SLIB_PARAMS+7,AUTO
          2 000743  2C00                                 LDV,R2   0
          2 000744  6C08                                 LDV,R6   8
          2 000745  BBC7 009E                            LAB,B3   GP_PARAMS+2,AUTO
          2 000747  3C00                                 LDV,R3   0
          2 000748  0008                                 MMM

      977    23387
      978    23388    2           IF (SLIB_PARAMS.TYC.GET_PROC = 1)

  23388   2 000749  E847 008C                            LDR,R6   SLIB_PARAMS+9,AUTO
          2 00074B  6D01                                 CMV,R6   1
          2 00074C  0981 002B                            BNE      s:23405,PREL

      979    23389    3           THEN DO; /* first get the data into the shared file tables  */

      980    23390    3                GP_PARAMS.VP# = G$JIT.DLL;

  23390   2 00074E  D846 0079                            LDR,R5   121,B6
          2 000750  DF47 00A2                            STR,R5   GP_PARAMS+6,AUTO

      981    23391    3                GP_PARAMS.PGSZ = PGSZ_LIB_DATA;

  23391   2 000752  C847 001C                            LDR,R4   PGSZ_LIB_DATA,AUTO
          2 000754  CF47 00A3                            STR,R4   GP_PARAMS+7,AUTO

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:125  
      982    23392
      983    23393    3                RD_PARAMS.PROG_TYPE = %GJ_LIB_DATA#;

  23393   2 000756  3C0B                                 LDV,R3   11
          2 000757  BF47 008E                            STR,R3   RD_PARAMS,AUTO

      984    23394                  /* pseudo code - GJU$GETPROC will change to %GJ_GETLIB#   */
      985    23395    3                RD_PARAMS.USR_LOC = GP_PARAMS.VP# * 256;

  23395   2 000759  F855                                 LDR,R7   R5
          2 00075A  6C00                                 LDV,R6   0
          2 00075B  7088                                 DOL,R7   8
          2 00075C  8D47 0095                            SDI      RD_PARAMS+7,AUTO

      986    23396    3                RD_PARAMS.TOT_SECTSZ = ALIB_DATA.DATA_SZ;

  23396   2 00075E  8CC7 0073                            LDI      ALIB_DATA+5,AUTO
          2 000760  8D47 0093                            SDI      RD_PARAMS+5,AUTO

      987    23397    3                RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_LIB_DATA;

  23397   2 000762  CCC7 000E                            LDB,B4   G$MSG$,AUTO
          2 000764  8CC4 004C                            LDI      76,B4
          2 000766  8D47 0097                            SDI      RD_PARAMS+9,AUTO

      988    23398
      989    23399    3                CALL GJU$GET_PROC(GP_PARAMS)

  23399   2 000768  BBC7 009C                            LAB,B3   GP_PARAMS,AUTO
          2 00076A  BFC7 00E4                            STB,B3   KEYMES+27,AUTO
          2 00076C  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00076E  CBF0 0100                            LAB,B4   256,IMO
          2 000770  E380 0000 0000  xent                 LNJ,B6   GJU$GET_PROC
          2 000773       0003                            DC       s:23401,PREL
          2 000774  0F81 0003                            B        s:23405,PREL

      990    23400    4                WHENALTRETURN DO;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:126  

      991    23401    4                     GOTO READ_ALTRETURN;

  23401   2 000776  0F81 00FC                            B        s:23466,PREL

      992    23402    4                     END;
      993    23403    3                END;

      994    23404
      995    23405    2           GP_PARAMS.VP# = G$JIT.LLL;

  23405   2 000778  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00077B  E846 007D                            LDR,R6   125,B6
          2 00077D  EF47 00A2                            STR,R6   GP_PARAMS+6,AUTO

      996    23406    2           GP_PARAMS.PGSZ = PGSZ_LIB_PROC;

  23406   2 00077F  D847 001D                            LDR,R5   PGSZ_LIB_PROC,AUTO
          2 000781  DF47 00A3                            STR,R5   GP_PARAMS+7,AUTO

      997    23407
      998    23408    2           RD_PARAMS.PROG_TYPE = %GJ_GETLIB#;

  23408   2 000783  4C02                                 LDV,R4   2
          2 000784  CF47 008E                            STR,R4   RD_PARAMS,AUTO

      999    23409    2           RD_PARAMS.TOT_SECTSZ = ALIB_DATA.PROC_SZ;

  23409   2 000786  8CC7 0071                            LDI      ALIB_DATA+3,AUTO
          2 000788  8D47 0093                            SDI      RD_PARAMS+5,AUTO

     1000    23410    2           RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_LIB_PROC;

  23410   2 00078A  DCC7 000E                            LDB,B5   G$MSG$,AUTO
          2 00078C  8CC5 004E                            LDI      78,B5
          2 00078E  8D47 0097                            SDI      RD_PARAMS+9,AUTO

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:127  
     1001    23411    2           RD_PARAMS.USR_LOC = GP_PARAMS.VP# * 256;

  23411   2 000790  F847 00A2                            LDR,R7   GP_PARAMS+6,AUTO
          2 000792  6C00                                 LDV,R6   0
          2 000793  7088                                 DOL,R7   8
          2 000794  8D47 0095                            SDI      RD_PARAMS+7,AUTO

     1002    23412
     1003    23413    2           CALL GJU$GET_PROC(GP_PARAMS) ALTRET(READ_ALTRETURN);

  23413   2 000796  CBC7 009C                            LAB,B4   GP_PARAMS,AUTO
          2 000798  CFC7 00E4                            STB,B4   KEYMES+27,AUTO
          2 00079A  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00079C  CBF0 0100                            LAB,B4   256,IMO
          2 00079E  E380 0000 0000  xent                 LNJ,B6   GJU$GET_PROC
          2 0007A1       00D2                            DC       s:23466,PREL

     1004    23414
     1005    23415        /* If this is an old RU, it will probably work better if we make it
     1006    23416           look like its library is at the old place (ISR6 segment)
     1007    23417        */
     1008    23418    2           IF SETFP_MSG.VERSION=0

  23418   2 0007A2  82C7 004D                            LB,'00FF'X        SETFP_MSG+37,AUTO
  23418   2 0007A4       00FF
          2 0007A5  0501 0034                            BBT      s:23432,PREL

     1009    23419    3           THEN DO;

     1010    23420    3                GMA_VP# = G$UHJIT.ASDT_USR.LIBIS1.BASE;

  23420   2 0007A7  EC80 0000 0000  xsym                 LDB,B6   G$UHJIT$
          2 0007AA  E846 003A                            LDR,R6   58,B6
          2 0007AC  E570 7FFF                            AND,R6   32767,IMO
          2 0007AE  EF47 0022                            STR,R6   GMA_VP#,AUTO

     1011    23421    3                GMA_#PGS = G$UHJIT.ASDT_USR.LIBIS1.SIZE+1;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:128  

  23421   2 0007B0  D846 003B                            LDR,R5   59,B6
          2 0007B2  D570 01FF                            AND,R5   511,IMO
          2 0007B4  5E01                                 ADV,R5   1
          2 0007B5  DF47 0024                            STR,R5   GMA_#PGS,AUTO

     1012    23422    3                CALL GMA$CVM (%GM_ISR6#, GMA_#PGS, GMA_VP#);

  23422   2 0007B7  DBF0 0015                            LAB,B5   21,IMO
          2 0007B9  CBC7 0022                            LAB,B4   GMA_VP#,AUTO
          2 0007BB  CFC7 00E8                            STB,B4   KEYMES+31,AUTO
          2 0007BD  BBC7 0024                            LAB,B3   GMA_#PGS,AUTO
          2 0007BF  BFC7 00E6                            STB,B3   KEYMES+29,AUTO
          2 0007C1  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 0007C3  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0007C5  CBF0 0300                            LAB,B4   768,IMO
          2 0007C7  E380 0000 0000  xent                 LNJ,B6   GMA$CVM
          2 0007CA       0001                            DC       s:23423,PREL

     1013    23423    3                G$UHJIT.ASDT_USR.ISR6.WP = %G_RING0#;

  23423   2 0007CB  EC80 0000 0000  xsym                 LDB,B6   G$UHJIT$
          2 0007CE  8946 002B                            LBT,'3000'X       43,B6
          2 0007D0       3000

     1014    23424    3                G$UHJIT.ASDT_USR.ISR6.EP = %G_R_USR#;

  23424   2 0007D1  8846 002B                            LBF,'0C00'X       43,B6
  23424   2 0007D3       0C00

     1015    23425    3                G$JIT.FIRST_SEG(%GM_ISR6#) = '1'B;

  23425   2 0007D4  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          2 0007D7  8945 0065                            LBT,'0400'X       101,B5
          2 0007D9       0400

     1016    23426    3                END;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:129  

     1017    23427    2           END;

     1018    23428
     1019    23429        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:130  
     1020    23430        /*D*  Get the additional Read Only Segement pages, if any.
     1021    23431        */
     1022    23432    1      RD_PARAMS.PROG_TYPE = %GJ_GETPROG#;

  23432   2 0007DA  6C01                                 LDV,R6   1
          2 0007DB  EF47 008E                            STR,R6   RD_PARAMS,AUTO

     1023    23433    1      GP_PARAMS.SHARE = SPROC_PARAMS.TYC;

  23433   2 0007DD  ABC7 007F                            LAB,B2   SPROC_PARAMS+7,AUTO
          2 0007DF  2C00                                 LDV,R2   0
          2 0007E0  6C08                                 LDV,R6   8
          2 0007E1  BBC7 009E                            LAB,B3   GP_PARAMS+2,AUTO
          2 0007E3  3C00                                 LDV,R3   0
          2 0007E4  0008                                 MMM

     1024    23434
     1025    23435    1      IF EXTRA_ROS_PGSZ ~= 0

  23435   2 0007E5  E847 0016                            LDR,R6   EXTRA_ROS_PGSZ,AUTO
          2 0007E7  6901 0064                            BEZ,R6   s:23457,PREL

     1026    23436    2      THEN DO;

     1027    23437    2           CALL GMA$GET(%GM_ROS#,EXTRA_ROS_PGSZ,%G_R_USR#,%G_R_MON#,%G_RING0#)

  23437   2 0007E9  EBF0 0001                            LAB,B6   1,IMO
          2 0007EB  DBF0 0000                            LAB,B5   0,IMO
          2 0007ED  CBF0 8000                            LAB,B4   -32768,IMO
          2 0007EF  BBF0 C000                            LAB,B3   -16384,IMO
          2 0007F1  BFC7 00EC                            STB,B3   KEYMES+35,AUTO
          2 0007F3  CFC7 00EA                            STB,B4   KEYMES+33,AUTO
          2 0007F5  DFC7 00E8                            STB,B5   KEYMES+31,AUTO
          2 0007F7  ABC7 0016                            LAB,B2   EXTRA_ROS_PGSZ,AUTO
          2 0007F9  AFC7 00E6                            STB,B2   KEYMES+29,AUTO
          2 0007FB  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 0007FD  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:131  
          2 0007FF  CBF0 0500                            LAB,B4   1280,IMO
          2 000801  E380 0000 0000  xent                 LNJ,B6   GMA$GET
          2 000804       0003                            DC       s:23438,PREL
          2 000805  0F81 003A                            B        s:23451,PREL

     1028    23438    3           WHENALTRETURN DO;

  23425   2                              MM_ALTRETURN    null
     1029    23439    3   MM_ALTRETURN: ;
     1030    23440    3                FCN_MSG.ERR = EMMFAILED;

  23440   2 000807  8C80 0000 001D  01   MM_ALTRETURN    LDI      EMMFAILED
          2 00080A  8D47 0076                            SDI      FCN_MSG+1,AUTO

  23440   2                              ENTER_ABORTM    null
     1031    23441    3   ENTER_ABORTM: ;
     1032    23442    3                FCN_MSG.ERR.SEV = %G_SEV_ABORT#;

  23442   2 00080C  6C06                 ENTER_ABORTM    LDV,R6   6
          2 00080D  EAC7 0077                            SRM,R6,'0007'X    FCN_MSG+2,AUTO
          2 00080F       0007

     1033    23443    3                GM_STEP = GM_STEP - ASZ_USR;

  23443   2 000810  D800 0000 0000  xsym                 LDR,R5   GM_STEP
          2 000813  D247 0020                            SUB,R5   ASZ_USR,AUTO
          2 000815  DF00 0000 0000  xsym                 STR,R5   GM_STEP

     1034    23444    3                CALL GMA$REL_ACCTMEM(PGSZ_USR);

  23444   2 000818  EBC7 001B                            LAB,B6   PGSZ_USR,AUTO
          2 00081A  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 00081C  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00081E  CBF0 0100                            LAB,B4   256,IMO
          2 000820  E380 0000 0000  xent                 LNJ,B6   GMA$REL_ACCTMEM
          2 000823       0001                            DC       s:23445,PREL

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:132  
     1035    23445    3                G$JIT.JUNK.STEP = '1'B;

  23445   2 000824  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000827  8946 0098                            LBT,'0010'X       152,B6
          2 000829       0010

     1036    23446    3                CALL GJS$ABORTM(FCN_MSG.ERR);

  23446   2 00082A  DBC7 0076                            LAB,B5   FCN_MSG+1,AUTO
          2 00082C  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 00082E  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000830  CBF0 0100                            LAB,B4   256,IMO
          2 000832  E380 0000 0000  xent                 LNJ,B6   GJS$ABORTM
          2 000835       0001                            DC       s:23447,PREL

     1037    23447    3                GUD_PARAMS.ERR = EALTRET;

  23447   2 000836  8C80 0000 0011  01                   LDI      EALTRET
          2 000839  ECC7 0004                            LDB,B6   @GUD_PARAMS,AUTO
          2 00083B  8D46 0003                            SDI      3,B6

     1038    23448    3                RETURN;

  23448   2 00083D  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     1039    23449    3                END;
     1040    23450
     1041    23451    2           G$JIT.PCROS = EXTRA_ROS_PGSZ;

  23451   2 000840  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000843  E847 0016                            LDR,R6   EXTRA_ROS_PGSZ,AUTO
          2 000845  EF46 0086                            STR,R6   134,B6

     1042    23452    2           PGSZ_USR = PGSZ_USR - EXTRA_ROS_PGSZ;

  23452   2 000847  E247 001B                            SUB,R6   PGSZ_USR,AUTO
          2 000849  8256                                 NEG      R6
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:133  
          2 00084A  EF47 001B                            STR,R6   PGSZ_USR,AUTO

     1043    23453    2           END;

     1044    23454
     1045    23455        /*D* If there is any user ROS data, read it now.
     1046    23456        */
     1047    23457    1      IF SETFP_MSG.ROS_SZ ~= 0

  23457   2 00084C  E847 0057                            LDR,R6   SETFP_MSG+47,AUTO
          2 00084E  6901 0042                            BEZ,R6   s:23485,PREL

     1048    23458    2      THEN DO;

     1049    23459    2           RD_PARAMS.TOT_SECTSZ = SETFP_MSG.ROS_SZ;

  23459   2 000850  F856                                 LDR,R7   R6
          2 000851  6C00                                 LDV,R6   0
          2 000852  8D47 0093                            SDI      RD_PARAMS+5,AUTO

     1050    23460    2           RD_PARAMS.USR_LOC$ = G$ROS.AVAIL$;

  23460   2 000854  EC80 0000 0000  xsym                 LDB,B6   G$ROS$
          2 000857  DCC6 000A                            LDB,B5   10,B6
          2 000859  DFC7 0095                            STB,B5   RD_PARAMS+7,AUTO

     1051    23461    2           RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_RO;

  23461   2 00085B  CCC7 000E                            LDB,B4   G$MSG$,AUTO
          2 00085D  8CC4 0046                            LDI      70,B4
          2 00085F  8D47 0097                            SDI      RD_PARAMS+9,AUTO

     1052    23462
     1053    23463    2           IF SPROC_PARAMS.TYC.SFILE$ = ADDR(NIL)

  23463   2 000861  8DC7 007F                            CMN      SPROC_PARAMS+7,AUTO
          2 000863  0981 0017                            BNE      s:23474,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:134  

     1054    23464    3           THEN DO;

     1055    23465    3                CALL GJS$READ_RU(RD_PARAMS)

  23465   2 000865  BBC7 008E                            LAB,B3   RD_PARAMS,AUTO
          2 000867  BFC7 00E4                            STB,B3   KEYMES+27,AUTO
          2 000869  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00086B  CBF0 0100                            LAB,B4   256,IMO
          2 00086D  E380 0000 0000  xent                 LNJ,B6   GJS$READ_RU
          2 000870       0003                            DC       s:23466,PREL
          2 000871  0F81 0007                            B        s:23471,PREL

     1056    23466    4                WHENALTRETURN DO;

  23459   2                              READ_ALTRETURN  null
     1057    23467    4   READ_ALTRETURN:   ;
     1058    23468    4                     FCN_MSG.ERR = RD_PARAMS.ERR;

  23468   2 000873  8CC7 009A            READ_ALTRETURN  LDI      RD_PARAMS+12,AUTO
          2 000875  8D47 0076                            SDI      FCN_MSG+1,AUTO

     1059    23469    4                     GOTO ENTER_ABORTM;

  23469   2 000877  0F81 FF94                            B        s:23440,PREL

     1060    23470    4                     END;
     1061    23471    3                END;

  23471   2 000879  0F81 0017                            B        s:23485,PREL

     1062    23472
     1063    23473    3           ELSE DO;

     1064    23474    3                GP_PARAMS.PGSZ = (SETFP_MSG.ROS_SZ +255) / 256;

  23474   2 00087B  D847 0057                            LDR,R5   SETFP_MSG+47,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:135  
          2 00087D  DA70 00FF                            ADD,R5   255,IMO
          2 00087F  5048                                 SOR,R5   8
          2 000880  DF47 00A3                            STR,R5   GP_PARAMS+7,AUTO

     1065    23475    3                GP_PARAMS.VP# = %GM_ROS_VP;

  23475   2 000882  4C10                                 LDV,R4   16
          2 000883  CF47 00A2                            STR,R4   GP_PARAMS+6,AUTO

     1066    23476
     1067    23477    3                CALL GJU$GET_DATA(GP_PARAMS) ALTRET(READ_ALTRETURN);

  23477   2 000885  BBC7 009C                            LAB,B3   GP_PARAMS,AUTO
          2 000887  BFC7 00E4                            STB,B3   KEYMES+27,AUTO
          2 000889  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00088B  CBF0 0100                            LAB,B4   256,IMO
          2 00088D  E380 0000 0000  xent                 LNJ,B6   GJU$GET_DATA
          2 000890       FFE3                            DC       s:23466,PREL

     1068    23478    3                END;

     1069    23479
     1070    23480    2           END/* do if ROS_SZ ~= 0 */;

     1071    23481        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:136  
     1072    23482
     1073    23483        /*D*  Get pages for the user's data.
     1074    23484        */
     1075    23485    1      IF SETFP_MSG.VDPGS ~= 0

  23485   2 000891  E847 0056                            LDR,R6   SETFP_MSG+46,AUTO
          2 000893  6901 00B3                            BEZ,R6   s:23544,PREL

     1076    23486    2      THEN DO;

     1077    23487    2           SEGS_64K = (SETFP_MSG.VDPGS + 255) / 256;

  23487   2 000895  EA70 00FF                            ADD,R6   255,IMO
          2 000897  6048                                 SOR,R6   8
          2 000898  EF47 0010                            STR,R6   SEGS_64K,AUTO

     1078    23488    2           PGS_REMAINING = SETFP_MSG.VDPGS;

  23488   2 00089A  D847 0056                            LDR,R5   SETFP_MSG+46,AUTO
          2 00089C  DF47 0011                            STR,R5   PGS_REMAINING,AUTO

     1079    23489
     1080    23490    3           DO I=0 TO SEGS_64K-1;

  23490   2 00089E  8747 0013                            CL       I,AUTO
          2 0008A0  0F81 004E                            B        s:23508+2,PREL

     1081    23491    3                IF PGS_REMAINING > 256

  23491   2 0008A2  E847 0011                            LDR,R6   PGS_REMAINING,AUTO
          2 0008A4  E970 0100                            CMR,R6   256,IMO
          2 0008A6  0381 000B                            BLE      s:23497,PREL

     1082    23492    4                THEN DO;

     1083    23493    4                     GMA_#PGS = 256;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:137  
  23493   2 0008A8  D870 0100                            LDR,R5   256,IMO
          2 0008AA  DF47 0024                            STR,R5   GMA_#PGS,AUTO

     1084    23494    4                     PGS_REMAINING = PGS_REMAINING - 256;

  23494   2 0008AC  EA70 FF00                            ADD,R6   -256,IMO
          2 0008AE  EF47 0011                            STR,R6   PGS_REMAINING,AUTO

     1085    23495    4                     END;

  23495   2 0008B0  0F81 0003                            B        s:23500,PREL

     1086    23496    4                ELSE DO;

     1087    23497    4                     GMA_#PGS = PGS_REMAINING;

  23497   2 0008B2  EF47 0024                            STR,R6   GMA_#PGS,AUTO

     1088    23498    4                     END;

     1089    23499
     1090    23500    3                GMA_VP# = G$JIT.DLL + (IU * 256);

  23500   2 0008B4  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 0008B7  D847 0013                            LDR,R5   I,AUTO
          2 0008B9  5008                                 SOL,R5   8
          2 0008BA  DA46 0079                            ADD,R5   121,B6
          2 0008BC  DF47 0022                            STR,R5   GMA_VP#,AUTO

     1091    23501    3                GMA_SEGX = (GMA_VP# / 256) + 15;

  23501   2 0008BE  5048                                 SOR,R5   8
          2 0008BF  5E0F                                 ADV,R5   15
          2 0008C0  DF47 0023                            STR,R5   GMA_SEGX,AUTO

     1092    23502
     1093    23503    3                CALL GMA$GET(GMA_SEGX,GMA_#PGS,%G_R_USR#,%G_R_USR#,%G_RING0#)
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:138  

  23503   2 0008C2  DBF0 0000                            LAB,B5   0,IMO
          2 0008C4  CBF0 0000                            LAB,B4   0,IMO
          2 0008C6  BBF0 C000                            LAB,B3   -16384,IMO
          2 0008C8  BFC7 00EC                            STB,B3   KEYMES+35,AUTO
          2 0008CA  CFC7 00EA                            STB,B4   KEYMES+33,AUTO
          2 0008CC  DFC7 00E8                            STB,B5   KEYMES+31,AUTO
          2 0008CE  ABC7 0024                            LAB,B2   GMA_#PGS,AUTO
          2 0008D0  AFC7 00E6                            STB,B2   KEYMES+29,AUTO
          2 0008D2  9BC7 0023                            LAB,B1   GMA_SEGX,AUTO
          2 0008D4  9FC7 00E4                            STB,B1   KEYMES+27,AUTO
          2 0008D6  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0008D8  CBF0 0500                            LAB,B4   1280,IMO
          2 0008DA  E380 0000 0000  xent                 LNJ,B6   GMA$GET
          2 0008DD       FF2A                            DC       s:23438,PREL

     1094    23504    3                  ALTRET(MM_ALTRETURN);
     1095    23505
     1096    23506    3                G$JIT.PCD = G$JIT.PCD + GMA_#PGS;

  23506   2 0008DE  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 0008E1  E846 0080                            LDR,R6   128,B6
          2 0008E3  EA47 0024                            ADD,R6   GMA_#PGS,AUTO
          2 0008E5  EF46 0080                            STR,R6   128,B6

     1097    23507    3                PGSZ_USR = PGSZ_USR - GMA_#PGS;

  23507   2 0008E7  D847 001B                            LDR,R5   PGSZ_USR,AUTO
          2 0008E9  D247 0024                            SUB,R5   GMA_#PGS,AUTO
          2 0008EB  DF47 001B                            STR,R5   PGSZ_USR,AUTO

     1098    23508    3                END/* Do 0 to segsz-1 */;

  23508   2 0008ED  8AC7 0013                            INC      I,AUTO
          2 0008EF  E847 0013                            LDR,R6   I,AUTO
          2 0008F1  6801 FFB0                            BLZ,R6   s:23491,PREL
          2 0008F3  E947 0010                            CMR,R6   SEGS_64K,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:139  
          2 0008F5  0201 FFAC                            BL       s:23491,PREL

     1099    23509
     1100    23510
     1101    23511        /*D* Read the program data - if any.
     1102    23512        */
     1103    23513    2           IF ( (%GM_ISR1_BASE + SETFP_MSG.DATA_SZ) - SETFP_MSG.DATA_BIAS) ~=0

  23513   2 0008F7  8CC7 0058                            LDI      SETFP_MSG+48,AUTO
          2 0008F9  84C7 005C                            SID      SETFP_MSG+52,AUTO
          2 0008FB  8470 0001 0000                       AID      65536,IMO
          2 0008FE  84F0 0000 0000                       SID      0,IMO
          2 000901  6981 0003                            BNEZ,R6  s:23515,PREL
          2 000903  7901 0043                            BEZ,R7   s:23544,PREL

     1104    23514    3           THEN DO;

     1105    23515    3                RD_PARAMS.USR_LOC =

  23515   2 000905  8CC7 005C                            LDI      SETFP_MSG+52,AUTO
          2 000907  70CB                                 DOR,R7   11
          2 000908  708B                                 DOL,R7   11
          2 000909  8D47 0095                            SDI      RD_PARAMS+7,AUTO

     1106    23516    3                  (SETFP_MSG.DATA_BIAS / 2048) * 2048;
     1107    23517             /* 2048 = max size of run-unit record in units of L6 words     */
     1108    23518
     1109    23519    3                RD_PARAMS.TOT_SECTSZ =

  23519   2 00090B  8CC7 0058                            LDI      SETFP_MSG+48,AUTO
          2 00090D  84C7 0095                            SID      RD_PARAMS+7,AUTO
          2 00090F  8470 0001 0000                       AID      65536,IMO
          2 000912  8D47 0093                            SDI      RD_PARAMS+5,AUTO

     1110    23520    3                  (SETFP_MSG.DATA_SZ + %GM_ISR1_BASE) - RD_PARAMS.USR_LOC;
     1111    23521
     1112    23522    3                RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_DATA;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:140  

  23522   2 000914  ECC7 000E                            LDB,B6   G$MSG$,AUTO
          2 000916  8CC6 0048                            LDI      72,B6
          2 000918  8D47 0097                            SDI      RD_PARAMS+9,AUTO

     1113    23523
     1114    23524    3                IF SPROC_PARAMS.TYC.SFILE$ = ADDR(NIL)

  23524   2 00091A  8DC7 007F                            CMN      SPROC_PARAMS+7,AUTO
          2 00091C  0981 000F                            BNE      s:23531,PREL

     1115    23525    4                THEN DO;

     1116    23526    4                     CALL GJS$READ_RU(RD_PARAMS) ALTRET(READ_ALTRETURN);

  23526   2 00091E  DBC7 008E                            LAB,B5   RD_PARAMS,AUTO
          2 000920  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 000922  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000924  CBF0 0100                            LAB,B4   256,IMO
          2 000926  E380 0000 0000  xent                 LNJ,B6   GJS$READ_RU
          2 000929       FF4A                            DC       s:23466,PREL

     1117    23527    4                     END;

  23527   2 00092A  0F81 001C                            B        s:23544,PREL

     1118    23528
     1119    23529
     1120    23530    4                ELSE DO;

     1121    23531    4                     GP_PARAMS.VP# = RD_PARAMS.USR_LOC / 256;

  23531   2 00092C  8CC7 0095                            LDI      RD_PARAMS+7,AUTO
          2 00092E  70C8                                 DOR,R7   8
          2 00092F  E857                                 LDR,R6   R7
          2 000930  EF47 00A2                            STR,R6   GP_PARAMS+6,AUTO

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:141  
     1122    23532    4                     GP_PARAMS.PGSZ = (RD_PARAMS.TOT_SECTSZ +255) / 256;

  23532   2 000932  8CC7 0093                            LDI      RD_PARAMS+5,AUTO
          2 000934  8470 0000 00FF                       AID      255,IMO
          2 000937  70C8                                 DOR,R7   8
          2 000938  E857                                 LDR,R6   R7
          2 000939  EF47 00A3                            STR,R6   GP_PARAMS+7,AUTO

     1123    23533
     1124    23534    4                     CALL GJU$GET_DATA(GP_PARAMS) ALTRET(READ_ALTRETURN);

  23534   2 00093B  DBC7 009C                            LAB,B5   GP_PARAMS,AUTO
          2 00093D  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 00093F  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000941  CBF0 0100                            LAB,B4   256,IMO
          2 000943  E380 0000 0000  xent                 LNJ,B6   GJU$GET_DATA
          2 000946       FF2D                            DC       s:23466,PREL

     1125    23535    4                     END;

     1126    23536
     1127    23537    3                END/*DO if any user data*/;

     1128    23538    2           END/* Do if VDPGS ~0 */;

     1129    23539
     1130    23540        %EJECT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:142  
     1131    23541        /*D* Now, get the pages for procedure if not yet shared and update
     1132    23542             the entry in the processor table with the physical page number.
     1133    23543        */
     1134    23544    1      GP_PARAMS.VP# = G$JIT.PLL;

  23544   2 000947  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00094A  E846 007B                            LDR,R6   123,B6
          2 00094C  EF47 00A2                            STR,R6   GP_PARAMS+6,AUTO

     1135    23545    1      GP_PARAMS.PGSZ = SETFP_MSG.VPPGS;

  23545   2 00094E  D847 0055                            LDR,R5   SETFP_MSG+45,AUTO
          2 000950  DF47 00A3                            STR,R5   GP_PARAMS+7,AUTO

     1136    23546
     1137    23547    1      RD_PARAMS.USR_LOC = (GP_PARAMS.VP# * 256);

  23547   2 000952  F856                                 LDR,R7   R6
          2 000953  6C00                                 LDV,R6   0
          2 000954  7088                                 DOL,R7   8
          2 000955  8D47 0095                            SDI      RD_PARAMS+7,AUTO

     1138    23548    1      RD_PARAMS.TOT_SECTSZ = SETFP_MSG.PROC_SZ;

  23548   2 000957  8CC7 005A                            LDI      SETFP_MSG+50,AUTO
          2 000959  8D47 0093                            SDI      RD_PARAMS+5,AUTO

     1139    23549    1      RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_PROC;

  23549   2 00095B  DCC7 000E                            LDB,B5   G$MSG$,AUTO
          2 00095D  8CC5 004A                            LDI      74,B5
          2 00095F  8D47 0097                            SDI      RD_PARAMS+9,AUTO

     1140    23550
     1141    23551    1      G$JIT.PCP = SETFP_MSG.VPPGS;

  23551   2 000961  DF46 0081                            STR,R5   129,B6
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:143  

     1142    23552    1      PGSZ_USR = PGSZ_USR - SETFP_MSG.VPPGS;

  23552   2 000963  D247 001B                            SUB,R5   PGSZ_USR,AUTO
          2 000965  8255                                 NEG      R5
          2 000966  DF47 001B                            STR,R5   PGSZ_USR,AUTO

     1143    23553
     1144    23554    1      CALL GJU$GET_PROC(GP_PARAMS) ALTRET(READ_ALTRETURN);

  23554   2 000968  CBC7 009C                            LAB,B4   GP_PARAMS,AUTO
          2 00096A  CFC7 00E4                            STB,B4   KEYMES+27,AUTO
          2 00096C  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 00096E  CBF0 0100                            LAB,B4   256,IMO
          2 000970  E380 0000 0000  xent                 LNJ,B6   GJU$GET_PROC
          2 000973       FF00                            DC       s:23466,PREL

     1145    23555
     1146    23556        /*D* If this is an initial LCP-6 user with an initialized data segment,
     1147    23557             get the pages for the user dynamic data segment 1 and read the
     1148    23558             data from the boot image.
     1149    23559        */
     1150    23560    1      IF G$JIT.PROG_ENTRY = %G_PE_BF#

  23560   2 000974  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000977  82C6 0003                            LB,'00FF'X        3,B6
          2 000979       00FF
          2 00097A  0501 0053                            BBT      s:23580,PREL

     1151    23561    2      THEN DO;

     1152    23562    2           IF G$MSG$->G$SETFP_MSG.DS1_SZ ~= 0

  23562   2 00097C  DCC7 000E                            LDB,B5   G$MSG$,AUTO
          2 00097E  8CC5 0056                            LDI      86,B5
          2 000980  84F0 0000 0000                       SID      0,IMO
          2 000983  6981 0003                            BNEZ,R6  s:23564,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:144  
          2 000985  7901 0048                            BEZ,R7   s:23580,PREL

     1153    23563    3           THEN DO;

     1154    23564    3                PGSZ_USR_DS1 = (G$MSG$->G$SETFP_MSG.DS1_SZ +255) / 256;

  23564   2 000987  8CC5 0056                            LDI      86,B5
          2 000989  8470 0000 00FF                       AID      255,IMO
          2 00098C  70C8                                 DOR,R7   8
          2 00098D  E857                                 LDR,R6   R7
          2 00098E  EF47 001E                            STR,R6   PGSZ_USR_DS1,AUTO

     1155    23565    3                CALL GMA$GET(%GM_USR_DS1#, PGSZ_USR_DS1,

  23565   2 000990  CBF0 000A                            LAB,B4   10,IMO
          2 000992  BBF0 0000                            LAB,B3   0,IMO
          2 000994  ABF0 0000                            LAB,B2   0,IMO
          2 000996  9BF0 C000                            LAB,B1   -16384,IMO
          2 000998  9FC7 00EC                            STB,B1   KEYMES+35,AUTO
          2 00099A  AFC7 00EA                            STB,B2   KEYMES+33,AUTO
          2 00099C  BFC7 00E8                            STB,B3   KEYMES+31,AUTO
          2 00099E  EBC7 001E                            LAB,B6   PGSZ_USR_DS1,AUTO
          2 0009A0  EFC7 00E6                            STB,B6   KEYMES+29,AUTO
          2 0009A2  CFC7 00E4                            STB,B4   KEYMES+27,AUTO
          2 0009A4  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0009A6  CBF0 0500                            LAB,B4   1280,IMO
          2 0009A8  E380 0000 0000  xent                 LNJ,B6   GMA$GET
          2 0009AB       FE5C                            DC       s:23438,PREL

     1156    23566    3                  %G_R_USR#,%G_R_USR#,%G_RING0#) ALTRET(MM_ALTRETURN);
     1157    23567
     1158    23568    3                RD_PARAMS.TOT_SECTSZ = G$MSG$->G$SETFP_MSG.DS1_SZ;

  23568   2 0009AC  ECC7 000E                            LDB,B6   G$MSG$,AUTO
          2 0009AE  8CC6 0056                            LDI      86,B6
          2 0009B0  8D47 0093                            SDI      RD_PARAMS+5,AUTO

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:145  
     1159    23569    3                RD_PARAMS.USR_LOC$ = G$USRDS1$;

  23569   2 0009B2  DC80 0000 0000  xsym                 LDB,B5   G$USRDS1$
          2 0009B5  DFC7 0095                            STB,B5   RD_PARAMS+7,AUTO

     1160    23570    3                RD_PARAMS.HOST_OFFSET = G$MSG$->G$SETFP_MSG.OFFSET_DS1;

  23570   2 0009B7  8CC6 0054                            LDI      84,B6
          2 0009B9  8D47 0097                            SDI      RD_PARAMS+9,AUTO

     1161    23571
     1162    23572    3                CALL GJS$READ_RU(RD_PARAMS) ALTRET(READ_ALTRETURN);

  23572   2 0009BB  CBC7 008E                            LAB,B4   RD_PARAMS,AUTO
          2 0009BD  CFC7 00E4                            STB,B4   KEYMES+27,AUTO
          2 0009BF  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0009C1  CBF0 0100                            LAB,B4   256,IMO
          2 0009C3  E380 0000 0000  xent                 LNJ,B6   GJS$READ_RU
          2 0009C6       FEAD                            DC       s:23466,PREL

     1163    23573
     1164    23574    3                G$JIT.PCDS = PGSZ_USR_DS1;

  23574   2 0009C7  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 0009CA  E847 001E                            LDR,R6   PGSZ_USR_DS1,AUTO
          2 0009CC  EF46 0083                            STR,R6   131,B6

     1165    23575    3                END/*do if init data seg*/;

     1166    23576    2           END/*do if initial handler*/;

     1167    23577
     1168    23578        /*D* Finally, copy any library data into the user's data pages.
     1169    23579        */
     1170    23580    1      IF PGSZ_LIB_DATA ~= 0

  23580   2 0009CE  E847 001C                            LDR,R6   PGSZ_LIB_DATA,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:146  
          2 0009D0  6901 0020                            BEZ,R6   s:23593,PREL

     1171    23581    2      THEN DO;

     1172    23582    2           GP_PARAMS.SHARE = SLIB_PARAMS.TYC;

  23582   2 0009D2  ABC7 008A                            LAB,B2   SLIB_PARAMS+7,AUTO
          2 0009D4  2C00                                 LDV,R2   0
          2 0009D5  6C08                                 LDV,R6   8
          2 0009D6  BBC7 009E                            LAB,B3   GP_PARAMS+2,AUTO
          2 0009D8  3C00                                 LDV,R3   0
          2 0009D9  0008                                 MMM

     1173    23583    2           GP_PARAMS.SHARE.SHARE_PROC = %GJ_COPYDATA#;

  23583   2 0009DA  6CFE                                 LDV,R6   -2
          2 0009DB  EF47 00A1                            STR,R6   GP_PARAMS+5,AUTO

     1174    23584    2           GP_PARAMS.VP# = G$JIT.DLL;

  23584   2 0009DD  D846 0079                            LDR,R5   121,B6
          2 0009DF  DF47 00A2                            STR,R5   GP_PARAMS+6,AUTO

     1175    23585    2           GP_PARAMS.PGSZ = PGSZ_LIB_DATA;

  23585   2 0009E1  C847 001C                            LDR,R4   PGSZ_LIB_DATA,AUTO
          2 0009E3  CF47 00A3                            STR,R4   GP_PARAMS+7,AUTO

     1176    23586
     1177    23587    2           CALL GJU$GET_PROC(GP_PARAMS) ALTRET(READ_ALTRETURN);

  23587   2 0009E5  DBC7 009C                            LAB,B5   GP_PARAMS,AUTO
          2 0009E7  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 0009E9  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 0009EB  CBF0 0100                            LAB,B4   256,IMO
          2 0009ED  E380 0000 0000  xent                 LNJ,B6   GJU$GET_PROC
          2 0009F0       FE83                            DC       s:23466,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:147  

     1178    23588    2           END;

     1179    23589
     1180    23590        /*D* All memory for starting this job step is now allocated.  Reset
     1181    23591             GM_STEP so other users aren't blocked.
     1182    23592        */
     1183    23593    1      GM_STEP = GM_STEP - ASZ_USR;

  23593   2 0009F1  E800 0000 0000  xsym                 LDR,R6   GM_STEP
          2 0009F4  E247 0020                            SUB,R6   ASZ_USR,AUTO
          2 0009F6  EF00 0000 0000  xsym                 STR,R6   GM_STEP

     1184    23594    1      ASZ_USR = 0;

  23594   2 0009F9  8747 0020                            CL       ASZ_USR,AUTO

     1185    23595
     1186    23596        /*D* If the CCBUF bit is set in the SETFP message, the contents
     1187    23597             of JIT.CCBUF are read next.
     1188    23598        */
     1189    23599    1      IF SETFP_MSG.FLAGS.CCBUF

  23599   2 0009FB  82C7 004C                            LB,'0002'X        SETFP_MSG+36,AUTO
  23599   2 0009FD       0002
          2 0009FE  0581 003E                            BBF      s:23614,PREL

     1190    23600    2      THEN DO;

     1191    23601    2           FCN_MSG.FCN = %GJ_GETCCBUF#;

  23601   2 000A00  5C0A                                 LDV,R5   10
          2 000A01  D7C7 0075                            STH,R5   FCN_MSG,AUTO

     1192    23602    2           CALL KNA$WRITE(%G_M$LM#,FCN_MSG_,FCN_MSG.ERR) ALTRET(ENTER_ABORTM);

  23602   2 000A03  EBF0 0002                            LAB,B6   2,IMO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:148  
          2 000A05  DBC7 0076                            LAB,B5   FCN_MSG+1,AUTO
          2 000A07  DFC7 00E8                            STB,B5   KEYMES+31,AUTO
          2 000A09  CBC7 0009                            LAB,B4   FCN_MSG_,AUTO
          2 000A0B  CFC7 00E6                            STB,B4   KEYMES+29,AUTO
          2 000A0D  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 000A0F  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000A11  CBF0 0300                            LAB,B4   768,IMO
          2 000A13  E380 0000 0000  xent                 LNJ,B6   KNA$WRITE
          2 000A16       FDF6                            DC       s:23440,PREL

     1193    23603
     1194    23604    2           V_ = VECTOR(G$JIT.CCBUF);

  23604   2 000A17  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000A1A  DBC6 00CE                            LAB,B5   206,B6
          2 000A1C  DFC7 00E5                            STB,B5   KEYMES+28,AUTO
          2 000A1E  E870 00FF                            LDR,R6   255,IMO
          2 000A20  EF47 00E4                            STR,R6   KEYMES+27,AUTO
          2 000A22  ABC7 00E4                            LAB,B2   KEYMES+27,AUTO
          2 000A24  2C00                                 LDV,R2   0
          2 000A25  6C06                                 LDV,R6   6
          2 000A26  BB87                                 LAB,B3   ,AUTO
          2 000A27  3C0C                                 LDV,R3   12
          2 000A28  0008                                 MMM

     1195    23605    2           CALL KNA$READ(%G_M$LM#,V_,FCN_MSG.ERR) ALTRET(ENTER_ABORTM);

  23605   2 000A29  DBF0 0002                            LAB,B5   2,IMO
          2 000A2B  CBC7 0076                            LAB,B4   FCN_MSG+1,AUTO
          2 000A2D  CFC7 00E8                            STB,B4   KEYMES+31,AUTO
          2 000A2F  ABC7 0006                            LAB,B2   V_,AUTO
          2 000A31  AFC7 00E6                            STB,B2   KEYMES+29,AUTO
          2 000A33  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 000A35  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000A37  CBF0 0300                            LAB,B4   768,IMO
          2 000A39  E380 0000 0000  xent                 LNJ,B6   KNA$READ
          2 000A3C       FDD0                            DC       s:23440,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:149  

     1196    23606    2           END;

     1197    23607
     1198    23608        /*D* Write a message to the host to let him know we are done.
     1199    23609             Then read it back to keep in sync with KIF$FPRG on the host.
     1200    23610             If the error code in the returned message is set, it indicates
     1201    23611             that an error has occured previously (read a NAK as data, for
     1202    23612             example).
     1203    23613        */
     1204    23614    1      IF G$JIT.PROG_ENTRY ~= %G_PE_BF#

  23614   2 000A3D  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000A40  82C6 0003                            LB,'00FF'X        3,B6
          2 000A42       00FF
          2 000A43  0581 0043                            BBF      s:23631,PREL

     1205    23615    2      THEN DO;

     1206    23616    2           FCN_MSG.ERR = '0'B;

  23616   2 000A45  8747 0076                            CL       FCN_MSG+1,AUTO
          2 000A47  8747 0077                            CL       FCN_MSG+2,AUTO

     1207    23617    2           FCN_MSG.FCN = %GJ_GETDONE#;

  23617   2 000A49  6C05                                 LDV,R6   5
          2 000A4A  E7C7 0075                            STH,R6   FCN_MSG,AUTO

     1208    23618    2           CALL KNA$WRITE(%G_M$LM#,FCN_MSG_,ERR);

  23618   2 000A4C  DBF0 0002                            LAB,B5   2,IMO
          2 000A4E  CBC7 0026                            LAB,B4   ERR,AUTO
          2 000A50  CFC7 00E8                            STB,B4   KEYMES+31,AUTO
          2 000A52  BBC7 0009                            LAB,B3   FCN_MSG_,AUTO
          2 000A54  BFC7 00E6                            STB,B3   KEYMES+29,AUTO
          2 000A56  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:150  
          2 000A58  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000A5A  CBF0 0300                            LAB,B4   768,IMO
          2 000A5C  E380 0000 0000  xent                 LNJ,B6   KNA$WRITE
          2 000A5F       0001                            DC       s:23619,PREL

     1209    23619    2           CALL KNA$READ(%G_M$LM#,FCN_MSG_,ERR);

  23619   2 000A60  EBF0 0002                            LAB,B6   2,IMO
          2 000A62  DBC7 0026                            LAB,B5   ERR,AUTO
          2 000A64  DFC7 00E8                            STB,B5   KEYMES+31,AUTO
          2 000A66  CBC7 0009                            LAB,B4   FCN_MSG_,AUTO
          2 000A68  CFC7 00E6                            STB,B4   KEYMES+29,AUTO
          2 000A6A  EFC7 00E4                            STB,B6   KEYMES+27,AUTO
          2 000A6C  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000A6E  CBF0 0300                            LAB,B4   768,IMO
          2 000A70  E380 0000 0000  xent                 LNJ,B6   KNA$READ
          2 000A73       0001                            DC       s:23620,PREL

     1210    23620    2           IF FCN_MSG.ERR ~= '0'B

  23620   2 000A74  EB80 0000 0000  03                   LAB,B6   0
          2 000A77  5C01                                 LDV,R5   1
          2 000A78  0022                                 ACM      ;
          2 000A79       4407 0076                                ALPHANUM(FCN_MSG+1,AUTO,,4,FILL),;
          2 000A7B       4006 0005                                ALPHANUM(5,B6,,R5,FILL)
          2 000A7D  5381 0009                            CBE      s:23631,PREL

     1211    23621    3           THEN DO;

     1212    23622    3                G$JIT.JUNK.HOST_STEP_ABRT = '1'B;

  23622   2 000A7F  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000A82  8946 0098                            LBT,'8000'X       152,B6
          2 000A84       8000

     1213    23623    3                GOTO ENTER_ABORTM;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:151  
  23623   2 000A85  0F81 FD86                            B        s:23440,PREL

     1214    23624    3                END;
     1215    23625
     1216    23626    2           END;
     1217    23627
     1218    23628
     1219    23629        /*D* Complete initialization of the Read Only Segment.
     1220    23630        */
     1221    23631    1      UDCBNUM = SETFP_MSG.UDCBNUM;

  23631   2 000A87  E847 0052                            LDR,R6   SETFP_MSG+42,AUTO
          2 000A89  EF47 0017                            STR,R6   UDCBNUM,AUTO

     1222    23632    1      DCBRES = SETFP_MSG.DCBRES;

  23632   2 000A8B  D847 0053                            LDR,R5   SETFP_MSG+43,AUTO
          2 000A8D  DF47 0018                            STR,R5   DCBRES,AUTO

     1223    23633
     1224    23634    1      G$ROS.NUMDCBS = UDCBNUM + DCBRES + %G_LAST_RES_DCB#;

  23634   2 000A8F  EA55                                 ADD,R6   R5
          2 000A90  EC80 0000 0000  xsym                 LDB,B6   G$ROS$
          2 000A93  6E09                                 ADV,R6   9
          2 000A94  EF46 0014                            STR,R6   20,B6

     1225    23635
     1226    23636        /*D* Adjust the DCB pointer table from the run-unit's ROS record
     1227    23637             to really point at the DCB.
     1228    23638        */
     1229    23639    1      LAST_USR_DCB = %G_FRST_USR_DCB# + UDCBNUM -1;

  23639   2 000A96  C847 0017                            LDR,R4   UDCBNUM,AUTO
          2 000A98  4E09                                 ADV,R4   9
          2 000A99  CF47 001A                            STR,R4   LAST_USR_DCB,AUTO

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:152  
     1230    23640    2      DO I = %G_FRST_USR_DCB# TO LAST_USR_DCB;

  23640   2 000A9B  3C0A                                 LDV,R3   10
          2 000A9C  BF47 0013                            STR,R3   I,AUTO
          2 000A9E  0F81 0014                            B        s:23645+2,PREL

     1231    23641    2           G$ROS.DCBPTR$->G$DCBTABLE(I) =

  23641   2 000AA0  EC80 0000 0000  xsym                 LDB,B6   G$ROS$
          2 000AA3  DC86                                 LDB,B5   ,B6
          2 000AA4  B847 0013                            LDR,R3   I,AUTO
          2 000AA6  CCB5                                 LDB,B4   ,B5,R3
          2 000AA7  BBC4 02EB                            LAB,B3   747,B4
          2 000AA9  BFB5                                 STB,B3   ,B5,R3

     1232    23642    2             PINCRW(G$ROS.DCBPTR$->G$DCBTABLE(I),SIZEW(G$ROS)-SIZEW(G$ROS_EXT) );
     1233    23643
     1234    23644    2           G$ROS.DCBPTR$->G$DCBTABLE(I)->G$DCB.DCB# = I;

  23644   2 000AAA  DC86                                 LDB,B5   ,B6
          2 000AAB  B847 0013                            LDR,R3   I,AUTO
          2 000AAD  CCB5                                 LDB,B4   ,B5,R3
          2 000AAE  BAC4 0020                            SRM,R3,'00FF'X    32,B4
          2 000AB0       00FF

     1235    23645    2           END;

  23645   2 000AB1  8AC7 0013                            INC      I,AUTO
          2 000AB3  E847 0013                            LDR,R6   I,AUTO
          2 000AB5  686B                                 BLZ,R6   s:23641,SPREL
          2 000AB6  E947 001A                            CMR,R6   LAST_USR_DCB,AUTO
          2 000AB8  03E8                                 BLE      s:23641,SPREL

     1236    23646
     1237    23647    2      DO I = LAST_USR_DCB+1 TO LAST_USR_DCB + DCBRES;

  23647   2 000AB9  E847 001A                            LDR,R6   LAST_USR_DCB,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:153  
          2 000ABB  6E01                                 ADV,R6   1
          2 000ABC  EF47 0013                            STR,R6   I,AUTO
          2 000ABE  0F81 000D                            B        s:23649+2,PREL

     1238    23648    2           G$ROS.DCBPTR$->G$DCBTABLE(I) = ADDR(NIL);

  23648   2 000AC0  EC80 0000 0000  xsym                 LDB,B6   G$ROS$
          2 000AC3  DC86                                 LDB,B5   ,B6
          2 000AC4  CB80 0000 0000                       LAB,B4   0
          2 000AC7  B847 0013                            LDR,R3   I,AUTO
          2 000AC9  CFB5                                 STB,B4   ,B5,R3

     1239    23649    2           END;

  23649   2 000ACA  8AC7 0013                            INC      I,AUTO
          2 000ACC  E847 001A                            LDR,R6   LAST_USR_DCB,AUTO
          2 000ACE  EA47 0018                            ADD,R6   DCBRES,AUTO
          2 000AD0  6870                                 BLZ,R6   s:23648,SPREL
          2 000AD1  E947 0013                            CMR,R6   I,AUTO
          2 000AD3  08ED                                 BAGE     s:23648,SPREL

     1240    23650
     1241    23651        /*D* Adjust the TCB pointers.
     1242    23652        */
     1243    23653    1      G$ROS.TCB.ALT$ = PINCRW(G$ROS.AVAIL$,SETFP_MSG.ROS_SZ);

  23653   2 000AD4  DCC6 000A                            LDB,B5   10,B6
          2 000AD6  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 000AD8  F847 0057                            LDR,R7   SETFP_MSG+47,AUTO
          2 000ADA  6C00                                 LDV,R6   0
          2 000ADB  8447 00E4                            AID      KEYMES+27,AUTO
          2 000ADD  8D46 0004                            SDI      4,B6

     1244    23654    1      G$ROS.TCB.STK$ = PINCRW(G$ROS.TCB.ALT$,SIZEW(G$EXCFR));

  23654   2 000ADF  DCC6 0004                            LDB,B5   4,B6
          2 000AE1  CBC5 002E                            LAB,B4   46,B5
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:154  
          2 000AE3  CFC6 0006                            STB,B4   6,B6

     1245    23655    1      G$ROS.TCB.AVSZ = SETFP_MSG.TCBSIZE * SIZEW(G$NWIO);

  23655   2 000AE5  D847 0054                            LDR,R5   SETFP_MSG+44,AUTO
          2 000AE7  5F3D                                 MLV,R5   61
          2 000AE8  DF46 0008                            STR,R5   8,B6

     1246    23656    1      G$ROS.TCB.CURRSZ = 0;

  23656   2 000AEA  8746 0009                            CL       9,B6

     1247    23657    1      G$ROS.TCB.ALT$->G$EXCFR.ALTEMPTY = -1;

  23657   2 000AEC  8905                                 LBT,'FFFF'X       ,B5
  23657   2 000AED       FFFF

     1248    23658
     1249    23659        /*D* Adjust the pointer to and the size of any remaining
     1250    23660             Read Only Segment available space.
     1251    23661        */
     1252    23662    1      G$ROS.AVAIL$ = PINCRW(G$ROS$, USR_ROS_WDSZ-SIZEW(G$ROS_EXT) );

  23662   2 000AEE  F847 0014                            LDR,R7   USR_ROS_WDSZ,AUTO
          2 000AF0  6C00                                 LDV,R6   0
          2 000AF1  8400 0000 0000  xsym                 AID      G$ROS$
          2 000AF4  8470 FFFF FFFD                       AID      -3,IMO
          2 000AF7  8D46 000A                            SDI      10,B6

     1253    23663    1      G$ROS.AVAIL$->G$ROS_EXT.NWORDS = (USR_ROS_PGSZ * 256) - USR_ROS_WDSZ;

  23663   2 000AF9  DCC6 000A                            LDB,B5   10,B6
          2 000AFB  D847 0015                            LDR,R5   USR_ROS_PGSZ,AUTO
          2 000AFD  5008                                 SOL,R5   8
          2 000AFE  8255                                 NEG      R5
          2 000AFF  DA47 0014                            ADD,R5   USR_ROS_WDSZ,AUTO
          2 000B01  8255                                 NEG      R5
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:155  
          2 000B02  DF45 0002                            STR,R5   2,B5

     1254    23664    1      G$ROS.AVAIL$->G$ROS_EXT.NEXT$ = ADDR(NIL);

  23664   2 000B04  DCC6 000A                            LDB,B5   10,B6
          2 000B06  CB80 0000 0000                       LAB,B4   0
          2 000B09  CF85                                 STB,B4   ,B5

     1255    23665
     1256    23666        /*D* Determine the type of accounting that is to be in effect.
     1257    23667        */
     1258    23668    1      IF SETFP_MSG.FLAGS.PROCACC

  23668   2 000B0A  82C7 004C                            LB,'0400'X        SETFP_MSG+36,AUTO
  23668   2 000B0C       0400
          2 000B0D  0581 0007                            BBF      s:23671,PREL

     1259    23669    1      THEN G$JIT.JUNK.PROCACCT = '1'B;

  23669   2 000B0F  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          2 000B12  8945 0098                            LBT,'0400'X       152,B5
          2 000B14       0400

     1260    23670
     1261    23671    1      IF SETFP_MSG.FLAGS.PROCSURCHG

  23671   2 000B15  82C7 004C                            LB,'0100'X        SETFP_MSG+36,AUTO
  23671   2 000B17       0100
          2 000B18  0581 0007                            BBF      s:23675,PREL

     1262    23672    2      THEN DO;

     1263    23673    2           G$JIT.JUNK.PROCSURCHG = '1'B;

  23673   2 000B1A  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          2 000B1D  8945 0098                            LBT,'0800'X       152,B5
          2 000B1F       0800
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:156  

     1264    23674    2           END;

     1265    23675    1      G$JIT.PROCNAME = G$ROS.M$LM.NAME;

  23675   2 000B20  ABC6 01FE                            LAB,B2   510,B6
          2 000B22  2C00                                 LDV,R2   0
          2 000B23  6C20                                 LDV,R6   32
          2 000B24  BC80 0000 0000  xsym                 LDB,B3   G$JIT$
          2 000B27  3C20                                 LDV,R3   32
          2 000B28  0008                                 MMM

     1266    23676
     1267    23677        /*D* And complete initialization of the JIT.
     1268    23678        */
     1269    23679    1      IF SETFP_MSG.FLAGS.XEQ_ONLY

  23679   2 000B29  82C7 004C                            LB,'2000'X        SETFP_MSG+36,AUTO
  23679   2 000B2B       2000
          2 000B2C  0581 0004                            BBF      s:23682,PREL

     1270    23680    1      THEN G$JIT.JUNK.EXONLY = '1'B;

  23680   2 000B2E  8943 0098                            LBT,'0008'X       152,B3
  23680   2 000B30       0008

     1271    23681
     1272    23682    1      G$JIT.PRIV.PRC = SETFP_MSG.PRIV;

  23682   2 000B31  8CC7 004A                            LDI      SETFP_MSG+34,AUTO
          2 000B33  8D43 0092                            SDI      146,B3

     1273    23683
     1274    23684    1      GMA_SEGX = (G$JIT.DLL /256) + 15;

  23684   2 000B35  D843 0079                            LDR,R5   121,B3
          2 000B37  5048                                 SOR,R5   8
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:157  
          2 000B38  5E0F                                 ADV,R5   15
          2 000B39  DF47 0023                            STR,R5   GMA_SEGX,AUTO

     1275    23685    1      GMA_#PGS = (G$JIT.PUL /256) + 15;

  23685   2 000B3B  C843 007C                            LDR,R4   124,B3
          2 000B3D  4048                                 SOR,R4   8
          2 000B3E  4E0F                                 ADV,R4   15
          2 000B3F  CF47 0024                            STR,R4   GMA_#PGS,AUTO

     1276    23686    2      DO I=GMA_SEGX TO GMA_#PGS;

  23686   2 000B41  DF47 0013                            STR,R5   I,AUTO
          2 000B43  0F81 000B                            B        s:23688+2,PREL

     1277    23687    2           G$JIT.FIRST_SEG(I) = '1'B;

  23687   2 000B45  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000B48  DBC6 0064                            LAB,B5   100,B6
          2 000B4A  B847 0013                            LDR,R3   I,AUTO
          2 000B4C  8935                                 LBT      ,B5,R3

     1278    23688    2           END;

  23688   2 000B4D  8AC7 0013                            INC      I,AUTO
          2 000B4F  E847 0013                            LDR,R6   I,AUTO
          2 000B51  6874                                 BLZ,R6   s:23687,SPREL
          2 000B52  E947 0024                            CMR,R6   GMA_#PGS,AUTO
          2 000B54  03F1                                 BLE      s:23687,SPREL

     1279    23689
     1280    23690    1      IF G$JIT.LLL <= G$JIT.LUL

  23690   2 000B55  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000B58  D846 007D                            LDR,R5   125,B6
          2 000B5A  D946 007E                            CMR,R5   126,B6
          2 000B5C  0301 0020                            BG       s:23699,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:158  

     1281    23691    2      THEN DO;

     1282    23692    2           GMA_SEGX = (G$JIT.LLL /256) + 15;

  23692   2 000B5E  5048                                 SOR,R5   8
          2 000B5F  5E0F                                 ADV,R5   15
          2 000B60  DF47 0023                            STR,R5   GMA_SEGX,AUTO

     1283    23693    2           GMA_#PGS = (G$JIT.LUL /256) + 15;

  23693   2 000B62  C846 007E                            LDR,R4   126,B6
          2 000B64  4048                                 SOR,R4   8
          2 000B65  4E0F                                 ADV,R4   15
          2 000B66  CF47 0024                            STR,R4   GMA_#PGS,AUTO

     1284    23694    3           DO I=GMA_SEGX TO GMA_#PGS;

  23694   2 000B68  E855                                 LDR,R6   R5
          2 000B69  EF47 0013                            STR,R6   I,AUTO
          2 000B6B  0F81 000B                            B        s:23696+2,PREL

     1285    23695    3                G$JIT.FIRST_SEG(I) = '1'B;

  23695   2 000B6D  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000B70  DBC6 0064                            LAB,B5   100,B6
          2 000B72  B847 0013                            LDR,R3   I,AUTO
          2 000B74  8935                                 LBT      ,B5,R3

     1286    23696    3                END;

  23696   2 000B75  8AC7 0013                            INC      I,AUTO
          2 000B77  E847 0013                            LDR,R6   I,AUTO
          2 000B79  6874                                 BLZ,R6   s:23695,SPREL
          2 000B7A  E947 0024                            CMR,R6   GMA_#PGS,AUTO
          2 000B7C  03F1                                 BLE      s:23695,SPREL

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:159  
     1287    23697    2           END;

     1288    23698
     1289    23699    1      G$JIT.RUNFLAGS = %G_RUN_USER#;

  23699   2 000B7D  D870 0400                            LDR,R5   1024,IMO
          2 000B7F  5048                                 SOR,R5   8
          2 000B80  D7C6 0097                            STH,R5   151,B6

     1290    23700
     1291    23701        /* Initialize JIT.PEAK_MEM for this job step.
     1292    23702        */
     1293    23703    1      G$JIT.PEAK_MEM=G$JIT.PCD             /* Static data              */

  23703   2 000B82  D846 0080                            LDR,R5   128,B6
          2 000B84  DA46 0083                            ADD,R5   131,B6
          2 000B86  DA46 0082                            ADD,R5   130,B6
          2 000B88  DA46 0084                            ADD,R5   132,B6
          2 000B8A  DA46 0085                            ADD,R5   133,B6
          2 000B8C  DA46 0086                            ADD,R5   134,B6
          2 000B8E  DF46 0034                            STR,R5   52,B6

     1294    23704    1        +G$JIT.PCDS                        /* User Data Segments       */
     1295    23705    1        +G$JIT.PCL                    /* Unshared Library procedure*/
     1296    23706    1        +G$JIT.PCDDS                       /* Debugger data segment    */
     1297    23707    1        +G$JIT.PCC                         /* Context                  */
     1298    23708    1        +G$JIT.PCROS;                      /* Read Only Segment        */
     1299    23709
     1300    23710    1      IF NOT G$JIT.MMFLGS.FREE_PPGS THEN

  23710   2 000B90  89C6 0088                            CMZ      136,B6
          2 000B92  0801 0005                            BAL      s:23725,PREL

     1301    23711    1           G$JIT.PEAK_MEM=G$JIT.PEAK_MEM+G$JIT.PCP; /* Procedure pages */

  23711   2 000B94  DA46 0081                            ADD,R5   129,B6
          2 000B96  DF46 0034                            STR,R5   52,B6
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:160  

     1302    23712
     1303    23713        /*D* Modify the TSA frame for entering the user.
     1304    23714
     1305    23715             The program start address -1 is used as the initial Program
     1306    23716             Counter as the return through GUD$MCL_HAND (via GJM$MCL) will
     1307    23717             cause TSA.P$ to be bumped by 1 for a normal return from MCL
     1308    23718             processing.  However, If starting a program under control of a
     1309    23719             debugger, the start address is left alone as we will be altreting
     1310    23720             to the MCL handler.
     1311    23721
     1312    23722             The Status Register is replaced with one that contains the
     1313    23723             Ring number for the user.
     1314    23724        */
     1315    23725    1      G$TSA.P$$ = SETFP_MSG.P$$;

  23725   2 000B98  DCC7 0048                            LDB,B5   SETFP_MSG+32,AUTO
          2 000B9A  CC80 0000 0000  xsym                 LDB,B4   G$TSA_USR$
          2 000B9D  DFC4 0008                            STB,B5   8,B4

     1316    23726    1      IF NOT(SETFP_MSG.FLAGS.DEBUG)

  23726   2 000B9F  82C7 004C                            LB,'0001'X        SETFP_MSG+36,AUTO
  23726   2 000BA1       0001
          2 000BA2  0501 0008                            BBT      s:23728,PREL

     1317    23727    1      THEN G$TSA.P = G$TSA.P -1;

  23727   2 000BA4  8CC4 0008                            LDI      8,B4
          2 000BA6  8470 FFFF FFFF                       AID      -1,IMO
          2 000BA9  8D44 0008                            SDI      8,B4

     1318    23728    1      G$TSA.Z.IS = 0;

  23728   2 000BAB  8844 0005                            LBF,'000F'X       5,B4
  23728   2 000BAD       000F

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:161  
     1319    23729    1      G$TSA.S = USR_STATUS_REG;

  23729   2 000BAE  E800 0000 0010  01                   LDR,R6   USR_STATUS_REG
          2 000BB1  EF44 000C                            STR,R6   12,B4

     1320    23730
     1321    23731        /*D* If this is an initial LCP-6 user, the count of the number
     1322    23732             of such users is decremented.  If this is the last one of
     1323    23733             that type a message is sent over the coupler to tell the
     1324    23734             host that the boot process has been completed.
     1325    23735        */
     1326    23736    1      IF G$JIT.PROG_ENTRY = %G_PE_BF#

  23736   2 000BB3  82C6 0003                            LB,'00FF'X        3,B6
  23736   2 000BB5       00FF
          2 000BB6  0501 008B                            BBT      s:23804,PREL

     1327    23737    2      THEN DO;

     1328    23738                %LOCK (G=GJ_BOOT_LOCK);

  23743   2 000BB8  BB80 0000 0011  03                   LAB,B3   +17
          2 000BBB  CBF0 0100                            LAB,B4   256,IMO
          2 000BBD  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          2 000BC0       0001                            DC       s:23745,PREL

     1329    23745    2           GJ_BOOT_HNDLRS = GJ_BOOT_HNDLRS-1;

  23745   2 000BC1  8880 0000 0000  xsym                 DEC      GJ_BOOT_HNDLRS

     1330    23746
     1331    23747    2           IF GJ_BOOT_HNDLRS = 0

  23747   2 000BC4  E800 0000 0000  xsym                 LDR,R6   GJ_BOOT_HNDLRS
          2 000BC7  6981 0052                            BNEZ,R6  s:23784,PREL

     1332    23748    3           THEN DO;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:162  

     1333    23749    3                G$MHJIT.ASDT_MON.BIGFOOT.V='0'B;

  23749   2 000BC9  EC80 0000 0000  xsym                 LDB,B6   G$MHJIT$
          2 000BCC  8846 003C                            LBF,'8000'X       60,B6
          2 000BCE       8000

     1334    23750                     %UNLOCK(G=GJ_BOOT_LOCK);

  23755   2 000BCF  BB80 0000 0011  03                   LAB,B3   +17
          2 000BD2  CBF0 0100                            LAB,B4   256,IMO
          2 000BD4  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          2 000BD7       0001                            DC       s:23757,PREL

     1335    23757    3                CALL GHH$WDTF;

  23757   2 000BD8  CBF0 0000                            LAB,B4   0,IMO
          2 000BDA  E380 0000 0000  xent                 LNJ,B6   GHH$WDTF
          2 000BDD       0001                            DC       s:23758,PREL

     1336    23758    3                CALL GIR$MLCPDUMP;

  23758   2 000BDE  CBF0 0000                            LAB,B4   0,IMO
          2 000BE0  E380 0000 0000  xent                 LNJ,B6   GIR$MLCPDUMP
          2 000BE3       0001                            DC       s:23759,PREL

     1337    23759    3                CALL GIR$INITCHANS('0'B);

  23759   2 000BE4  BB80 0000 0013  03                   LAB,B3   +19
          2 000BE7  CBF0 0100                            LAB,B4   256,IMO
          2 000BE9  E380 0000 0000  xent                 LNJ,B6   GIR$INITCHANS
          2 000BEC       0001                            DC       s:23760,PREL

     1338    23760    3                CALL GHH$WDTN;

  23760   2 000BED  CBF0 0000                            LAB,B4   0,IMO
          2 000BEF  E380 0000 0000  xent                 LNJ,B6   GHH$WDTN
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:163  
          2 000BF2       0001                            DC       s:23761,PREL

     1339    23761    3                CALL GHH$RTCN;

  23761   2 000BF3  CBF0 0000                            LAB,B4   0,IMO
          2 000BF5  E380 0000 0000  xent                 LNJ,B6   GHH$RTCN
          2 000BF8       0001                            DC       s:23767,PREL

     1340    23762                     %LOCK(G=GJ_BOOT_LOCK);

  23767   2 000BF9  BB80 0000 0011  03                   LAB,B3   +17
          2 000BFC  CBF0 0100                            LAB,B4   256,IMO
          2 000BFE  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          2 000C01       0001                            DC       s:23769,PREL

     1341    23769    3                IF GI_ENDBOOT ~= ENTADDR(NIL)

  23769   2 000C02  EC80 0000 0000  xsym                 LDB,B6   GI_ENDBOOT
          2 000C05  ED80 0000 0008  03                   CMB,B6   +8
          2 000C08  0901 0006                            BE       s:23771,PREL

     1342    23770    3                THEN CALL GI_ENDBOOT;

  23770   2 000C0A  9B86                                 LAB,B1   ,B6
          2 000C0B  CBF0 0000                            LAB,B4   0,IMO
          2 000C0D  E381                                 LNJ,B6   ,B1
          2 000C0E       0001                            DC       s:23771,PREL

     1343    23771    3                IF GH_KEEPDELTA

  23771   2 000C0F  8980 0000 0000  xsym                 CMZ      GH_KEEPDELTA
          2 000C12  0881 0007                            BAGE     s:23784,PREL

     1344    23772    3                THEN CALL GDA$INIT_DONE;

  23772   2 000C14  CBF0 0000                            LAB,B4   0,IMO
          2 000C16  E380 0000 0000  xent                 LNJ,B6   GDA$INIT_DONE
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:164  
          2 000C19       0001                            DC       s:23784,PREL

     1345    23773    3                END /* DO if the last BF user */;

     1346    23774
     1347    23775        /*D* But if more initial user's are waiting to be read over the
     1348    23776             coupler, this user is REGed to wait till all initial users
     1349    23777             are started and Node Admin has been initialized.
     1350    23778        */
     1351    23779                %UNLOCK (G=GJ_BOOT_LOCK);

  23784   2 000C1A  BB80 0000 0011  03                   LAB,B3   +17
          2 000C1D  CBF0 0100                            LAB,B4   256,IMO
          2 000C1F  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          2 000C22       0001                            DC       s:23786,PREL

     1352    23786    3           DO WHILE (GJ_BOOT_HNDLRS ~= -1);

  23786   2 000C23  0F81 0019                            B        s:23796,PREL

     1353    23787
     1354    23788        /*D* If the number of handlers is 0 and this is NODE ADMIN let
     1355    23789             him start.  Node Admin will write to BABOON when it is okay
     1356    23790             to let other users start up who will change GJ_BOOT_HNDLRS
     1357    23791             to a -1.
     1358    23792         */
     1359    23793    3                IF GJ_BOOT_HNDLRS = 0 AND G$JIT.USR# = 1

  23793   2 000C25  E800 0000 0000  xsym                 LDR,R6   GJ_BOOT_HNDLRS
          2 000C28  6981 000B                            BNEZ,R6  s:23795,PREL
          2 000C2A  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000C2D  D846 0004                            LDR,R5   4,B6
          2 000C2F  D570 00FF                            AND,R5   255,IMO
          2 000C31  5D01                                 CMV,R5   1
          2 000C32  0901 000F                            BE       s:23804,PREL

     1360    23794    3                THEN EXIT;
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:165  
     1361    23795    3                CALL GHS$REG(%GH_EVSL,1);

  23795   2 000C34  BB80 0000 0016  03                   LAB,B3   +22
          2 000C37  CBF0 0200                            LAB,B4   512,IMO
          2 000C39  E380 0000 0000  xent                 LNJ,B6   GHS$REG
          2 000C3C       0001                            DC       s:23796,PREL

     1362    23796    3                END;

  23796   2 000C3D  E800 0000 0000  xsym                 LDR,R6   GJ_BOOT_HNDLRS
          2 000C40  6DFF                                 CMV,R6   -1
          2 000C41  09E4                                 BNE      s:23793,SPREL

     1363    23797    2           END /* DO if Bigfoot user */;

     1364    23798
     1365    23799        /*D*  If this completes the process of installing the processor,
     1366    23800              the initialization of the shared file table entry is completed
     1367    23801              and a call is made to GHS$RUE to wake-up all users that may be
     1368    23802              waiting for it.
     1369    23803        */
     1370    23804    1      IF SPROC_PARAMS.TYC.SHARE_PROC = %GJ_SHARE#

  23804   2 000C42  E847 0082                            LDR,R6   SPROC_PARAMS+10,AUTO
          2 000C44  6D01                                 CMV,R6   1
          2 000C45  0981 0031                            BNE      s:23827,PREL

     1371    23805    2      THEN DO;

     1372    23806                %LOCK (G=G_SLOCK);

  23811   2 000C47  BB80 0000 001A  03                   LAB,B3   +26
          2 000C4A  CBF0 0100                            LAB,B4   256,IMO
          2 000C4C  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          2 000C4F       0001                            DC       s:23813,PREL

     1373    23813    2           G$SFILE.LCP6_FLGS(SPROC_PARAMS.PNUM)
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:166  

  23813   2 000C50  B847 007A                            LDR,R3   SPROC_PARAMS+2,AUTO
          2 000C52  B570 00FF                            AND,R3   255,IMO
          2 000C54  EC80 0000 0000  xsym                 LDB,B6   GJ_SFILE_START$
          2 000C57  BF47 00E4                            STR,R3   KEYMES+27,AUTO
          2 000C59  3F60                                 MLV,R3   96
          2 000C5A  3E3C                                 ADV,R3   60
          2 000C5B  E2B6                                 LLH,R6   ,B6,R3
          2 000C5C  6008                                 SOL,R6   8
          2 000C5D  E570 FD00                            AND,R6   -768,IMO
          2 000C5F  6048                                 SOR,R6   8
          2 000C60  B847 00E4                            LDR,R3   KEYMES+27,AUTO
          2 000C62  3F60                                 MLV,R3   96
          2 000C63  3E3C                                 ADV,R3   60
          2 000C64  E7B6                                 STH,R6   ,B6,R3

     1374    23814    2             = (G$SFILE.LCP6_FLGS(SPROC_PARAMS.PNUM) &~ %LCP6_INST#);
     1375    23815                %UNLOCK (G=G_SLOCK);

  23820   2 000C65  BB80 0000 001A  03                   LAB,B3   +26
          2 000C68  CBF0 0100                            LAB,B4   256,IMO
          2 000C6A  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          2 000C6D       0001                            DC       s:23822,PREL

     1376    23822    2           CALL GHS$RUE(%GH_EVUQFP);

  23822   2 000C6E  BB80 0000 001D  03                   LAB,B3   +29
          2 000C71  CBF0 0100                            LAB,B4   256,IMO
          2 000C73  E380 0000 0000  xent                 LNJ,B6   GHS$RUE
          2 000C76       0001                            DC       s:23827,PREL

     1377    23823    2           END;

     1378    23824
     1379    23825        /*D* If this is a Handler we have just started, close M$LM.
     1380    23826        */
     1381    23827    1      IF G$JIT.MODE = %G_M_HANDLER#
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:167  

  23827   2 000C77  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000C7A  E2C6 0004                            LLH,R6   4,B6
          2 000C7C  6D03                                 CMV,R6   3
          2 000C7D  0981 0011                            BNE      s:23842,PREL

     1382    23828    2      THEN DO;

     1383    23829    2           CALL KNA$CLOSE(%G_M$LM#,ERR);

  23829   2 000C7F  DBF0 0002                            LAB,B5   2,IMO
          2 000C81  CBC7 0026                            LAB,B4   ERR,AUTO
          2 000C83  CFC7 00E6                            STB,B4   KEYMES+29,AUTO
          2 000C85  DFC7 00E4                            STB,B5   KEYMES+27,AUTO
          2 000C87  BBC7 00E4                            LAB,B3   KEYMES+27,AUTO
          2 000C89  CBF0 0200                            LAB,B4   512,IMO
          2 000C8B  E380 0000 0000  xent                 LNJ,B6   KNA$CLOSE
          2 000C8E       0001                            DC       s:23842,PREL

     1384    23830    2           END;

     1385    23831
     1386    23832        /*D* If this is M$LDTRC to a run-unit that is to be debugged, the
     1387    23833             TRAP# in the TSA is set to the LDTRC code.  Then the ALTRET
     1388    23834             code in the MCL parameters will cause the debugger to be entered.
     1389    23835
     1390    23836             If this is M$SETFP and to be debugged, the user is REGed to wait
     1391    23837             for the host debugger to send the ALIB msg at which time U_ALIBFD
     1392    23838             will be set in the user's async flags.  Then the TRAP# in the TSA
     1393    23839             is set to the start-up indicator.  The special ALTRET code
     1394    23840             is set in the MCL parameters to cause entry to the debugger.
     1395    23841        */
     1396    23842    1      IF SETFP_MSG.FLAGS.DEBUG

  23842   2 000C8F  82C7 004C                            LB,'0001'X        SETFP_MSG+36,AUTO
  23842   2 000C91       0001
          2 000C92  0581 0082                            BBF      s:23888,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:168  

     1397    23843    2      THEN DO;

     1398    23844    2           IF G$JIT.SPROC# = 0

  23844   2 000C94  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000C97  E2C6 008C                            LLH,R6   140,B6
          2 000C99  6981 0021                            BNEZ,R6  s:23854,PREL

     1399    23845    3           THEN DO;

     1400    23846    3                GMA_1ST = (G$JIT.PLL / 256) -1;

  23846   2 000C9B  D846 007B                            LDR,R5   123,B6
          2 000C9D  5048                                 SOR,R5   8
          2 000C9E  5EFF                                 ADV,R5   -1
          2 000C9F  DF47 0025                            STR,R5   GMA_1ST,AUTO

     1401    23847    3                GMA_SEGX = (G$JIT.PUL / 256) -1;

  23847   2 000CA1  C846 007C                            LDR,R4   124,B6
          2 000CA3  4048                                 SOR,R4   8
          2 000CA4  4EFF                                 ADV,R4   -1
          2 000CA5  CF47 0023                            STR,R4   GMA_SEGX,AUTO

     1402    23848
     1403    23849    4                DO I=GMA_1ST TO GMA_SEGX;

  23849   2 000CA7  DF47 0013                            STR,R5   I,AUTO
          2 000CA9  0F81 000B                            B        s:23851+2,PREL

     1404    23850    4                     G$JIT.DB_WRTSEGS(I) ='1'B;

  23850   2 000CAB  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 000CAE  DBC6 007F                            LAB,B5   127,B6
          2 000CB0  B847 0013                            LDR,R3   I,AUTO
          2 000CB2  8935                                 LBT      ,B5,R3
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:169  

     1405    23851    4                     END;

  23851   2 000CB3  8AC7 0013                            INC      I,AUTO
          2 000CB5  E847 0013                            LDR,R6   I,AUTO
          2 000CB7  6874                                 BLZ,R6   s:23850,SPREL
          2 000CB8  E947 0023                            CMR,R6   GMA_SEGX,AUTO
          2 000CBA  03F1                                 BLE      s:23850,SPREL

     1406    23852    3                END;

     1407    23853
     1408    23854    2           IF G$JIT.PROG_ENTRY = %G_PE_LDTRC#

  23854   2 000CBB  E846 0003                            LDR,R6   3,B6
          2 000CBD  E570 00FF                            AND,R6   255,IMO
          2 000CBF  6D02                                 CMV,R6   2
          2 000CC0  0981 0029                            BNE      s:23875,PREL

     1409    23855    3           THEN DO;

     1410    23856    3                G$TSA.I.TRAP# = %G_FPRG_START2#;

  23856   2 000CC2  5C3E                                 LDV,R5   62
          2 000CC3  DC80 0000 0000  xsym                 LDB,B5   G$TSA_USR$
          2 000CC6  D7C5 0002                            STH,R5   2,B5

     1411    23857    3                G$JIT.JUNK.UDELTA = '1'B;

  23857   2 000CC8  8946 0098                            LBT,'0004'X       152,B6
  23857   2 000CCA       0004

     1412    23858                     %LOCK (G=G_ASFGATE);

  23863   2 000CCB  BB80 0000 001F  03                   LAB,B3   +31
          2 000CCE  CBF0 0100                            LAB,B4   256,IMO
          2 000CD0  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:170  
          2 000CD3       0001                            DC       s:23865,PREL

     1413    23865    3                G$MHJIT.CU$->G$U.ASYNCH = (G$MHJIT.CU$->G$U.ASYNCH | %U_ALIBFD);

  23865   2 000CD4  EC80 0000 0000  xsym                 LDB,B6   G$MHJIT$
          2 000CD7  DCC6 0352                            LDB,B5   850,B6
          2 000CD9  E845 0001                            LDR,R6   1,B5
          2 000CDB  E470 0800                            OR,R6    2048,IMO
          2 000CDD  EF45 0001                            STR,R6   1,B5

     1414    23866                     %UNLOCK (G=G_ASFGATE);

  23871   2 000CDF  BB80 0000 001F  03                   LAB,B3   +31
          2 000CE2  CBF0 0100                            LAB,B4   256,IMO
          2 000CE4  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          2 000CE7       0001                            DC       s:23873,PREL

     1415    23873    3                END;

  23873   2 000CE8  0F81 0025                            B        s:23883,PREL

     1416    23874    3           ELSE DO;

     1417    23875    4                DO WHILE (G$MHJIT.CU$->G$U.ASYNCH = '0000'X);

  23875   2 000CEA  DC80 0000 0000  xsym                 LDB,B5   G$MHJIT$
          2 000CED  CCC5 0352                            LDB,B4   850,B5
          2 000CEF  D844 0001                            LDR,R5   1,B4
          2 000CF1  5981 0016                            BNEZ,R5  s:23881,PREL

     1418    23876    4                     CALL GHS$REG(%GH_EVSL,1)

  23876   2 000CF3  BB80 0000 0016  03                   LAB,B3   +22
          2 000CF6  CBF0 0200                            LAB,B4   512,IMO
          2 000CF8  E380 0000 0000  xent                 LNJ,B6   GHS$REG
          2 000CFB       0003                            DC       s:23878,PREL
          2 000CFC  0F81 0003                            B        s:23880,PREL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:171  

     1419    23877    5                     WHENALTRETURN DO;

     1420    23878    5                          EXIT/* got message */;

  23878   2 000CFE  0F81 0001                            B        s:23880,PREL

     1421    23879    5                          END;
     1422    23880    4                     END/* do while not ALIBFD*/;

  23880   2 000D00  EC80 0000 0000  xsym                 LDB,B6   G$MHJIT$
          2 000D03  DCC6 0352                            LDB,B5   850,B6
          2 000D05  E845 0001                            LDR,R6   1,B5
          2 000D07  696C                                 BEZ,R6   s:23876,SPREL

     1423    23881    3                G$TSA.I.TRAP# = %G_FPRG_START#;

  23881   2 000D08  6C3D                                 LDV,R6   61
          2 000D09  EC80 0000 0000  xsym                 LDB,B6   G$TSA_USR$
          2 000D0C  E7C6 0002                            STH,R6   2,B6

     1424    23882    3                END;

     1425    23883    2           GUD_PARAMS.ERR = EALTRET;

  23883   2 000D0E  8C80 0000 0011  01                   LDI      EALTRET
          2 000D11  ECC7 0004                            LDB,B6   @GUD_PARAMS,AUTO
          2 000D13  8D46 0003                            SDI      3,B6

     1426    23884    2           END;

     1427    23885
     1428    23886        /*D*  Clean up the stack of the GJI$INIT_USR frame.
     1429    23887        */
     1430    23888    1      IF GUD_PARAMS.MCL.CODE = %G_MCL_CPEXIT#

  23888   2 000D15  ECC7 0004                            LDB,B6   @GUD_PARAMS,AUTO
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:172  
          2 000D17  E806                                 LDR,R6   ,B6
          2 000D18  E570 03FF                            AND,R6   1023,IMO
          2 000D1A  E970 0086                            CMR,R6   134,IMO
          2 000D1C  0981 003F                            BNE      s:23903,PREL

     1431    23889    2      THEN DO;

     1432    23890    2           T$ = PINCRW (G$TSTACKU$,-G$TSTACKU$->G$STACK_HDR.CW);

  23890   2 000D1E  DC80 0000 0000  xsym                 LDB,B5   G$TSTACKU$
          2 000D21  B805                                 LDR,R3   ,B5
          2 000D22  E853                                 LDR,R6   R3
          2 000D23  70F0                                 DAR,R7   16
          2 000D24  8480 0000 0000  xsym                 SID      G$TSTACKU$
          2 000D27  8656                                 CPL      R6
          2 000D28  8657                                 CPL      R7
          2 000D29  8470 0000 0001                       AID      1,IMO
          2 000D2C  8D47 000C                            SDI      T$,AUTO

     1433    23891    3           DO WHILE '1'B;

     1434    23892    3                IF PINCRW (T$,T$->G$STACK_FRAME.WDS+6) >= G$TSTACKU$ THEN EXIT;

  23892   2 000D2E  ECC7 000C                            LDB,B6   T$,AUTO
          2 000D30  B806                                 LDR,R3   ,B6
          2 000D31  E853                                 LDR,R6   R3
          2 000D32  70F0                                 DAR,R7   16
          2 000D33  8447 000C                            AID      T$,AUTO
          2 000D35  8470 0000 0006                       AID      6,IMO
          2 000D38  8D47 00E4                            SDI      KEYMES+27,AUTO
          2 000D3A  DCC7 00E4                            LDB,B5   KEYMES+27,AUTO
          2 000D3C  DD80 0000 0000  xsym                 CMB,B5   G$TSTACKU$
          2 000D3F  0281 000A                            BGE      s:23896,PREL

     1435    23893    3                I = T$->G$STACK_FRAME.WDS + 1;

  23893   2 000D41  D806                                 LDR,R5   ,B6
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:173  
          2 000D42  5E01                                 ADV,R5   1
          2 000D43  DF47 0013                            STR,R5   I,AUTO

     1436    23894    3                T$ = PINCRW(T$, I);

  23894   2 000D45  A855                                 LDR,R2   R5
          2 000D46  DBA6                                 LAB,B5   ,B6,R2
          2 000D47  DFC7 000C                            STB,B5   T$,AUTO

     1437    23895    3                END;

  23895   2 000D49  0FE5                                 B        s:23892,SPREL

     1438    23896    2           PINCRW (T$, -I)->G$STACK_FRAME.WDS = I + T$->G$STACK_FRAME.WDS;

  23896   2 000D4A  E847 0013                            LDR,R6   I,AUTO
          2 000D4C  70F0                                 DAR,R7   16
          2 000D4D  84C7 000C                            SID      T$,AUTO
          2 000D4F  8656                                 CPL      R6
          2 000D50  8657                                 CPL      R7
          2 000D51  8470 0000 0001                       AID      1,IMO
          2 000D54  D847 0013                            LDR,R5   I,AUTO
          2 000D56  DA06                                 ADD,R5   ,B6
          2 000D57  8D47 00E4                            SDI      KEYMES+27,AUTO
          2 000D59  DCC7 00E4                            LDB,B5   KEYMES+27,AUTO
          2 000D5B  DF05                                 STR,R5   ,B5

     1439    23897    2           END;

     1440    23898
     1441    23899        /*D*  Now, begin executing the user program by returning through
     1442    23900              the normal MCL exit which will cause the trap handler to
     1443    23901              RTT to the user.
     1444    23902        */
     1445    23903    1      G$JIT.JUNK.STEP = '0'B;

  23903   2 000D5C  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:174  
          2 000D5F  8846 0098                            LBF,'0010'X       152,B6
          2 000D61       0010

     1446    23904    1      CALL GJS$USRGO;

  23904   2 000D62  CBF0 0000                            LAB,B4   0,IMO
          2 000D64  E380 0000 0000  xent                 LNJ,B6   GJS$USRGO
          2 000D67       0001                            DC       s:23905,PREL

     1447    23905    1      RETURN;

  23905   2 000D68  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
     1448    23906
     1449    23907    1   END GJS$STEP;
     1450    23908        %EOD;

PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:175  
--  Include file information  --

   GH_SCHD_E.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   OC_SUBS_C.:E05TOU  is referenced.
   UD_SCODE_C.:E05TOU  is referenced.
   J_SCODE_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   J_ERRORS_C.:E05TOU  is referenced.
   FR_ERRORS_C.:E05TOU  is referenced.
   UD_ERRORS_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   G_SFILE_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   GU_MACROS_M.:E05TOU  is referenced.
   GM_MACRO_M.:E05TOU  is referenced.
   GJ_MACROS_M.:E05TOU  is referenced.
   GJ_MSG_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   GH_HARDWARE_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GJS$STEP.
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:176  

 **** Variables and constants ****

  ****  Section 000  Data  GJS$STEP

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(96)    r     1 CWNAK

  ****  Section 001 RoData GJS$STEP

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

    11-0-0/w STRC(32)    r     1 EALTRET                   21-0-0/w STRC(32)    r     1 EBADHEAD
    15-0-0/w STRC(32)    r     1 EBSUNM                    1F-0-0/w STRC(32)    r     1 ELIBSIZE
    17-0-0/w STRC(32)    r     1 EMEMLIMIT                 1D-0-0/w STRC(32)    r     1 EMMFAILED
    1B-0-0/w STRC(32)    r     1 ENO_START                 19-0-0/w STRC(32)    r     1 EPHYS_MEMLIMIT
    13-0-0/w STRC(32)    r     1 ESUOUT                     0-0-0/w STRC(248)   r     1 GJI_KEYMES_INIT
    26-0-0/w STRC(48)    r     1 SDELUSR                   29-0-0/w STRC(48)    r     1 SFCNCODE
    23-0-0/w STRC(48)    r     1 SMING                     10-0-0/w STRC(16)    r     1 USR_STATUS_REG

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @GUD_PARAMS               6E-0-0/w STRC(112)   r     1 ALIB_DATA
    20-0-0/w UBIN(16)    r     1 ASZ_USR                   A4-0-0/w STRC(64)    r     1 CHKSZ
    1F-0-0/w UBIN(16)    r     1 CUR_PGSZ                  18-0-0/w UBIN(16)    r     1 DCBRES
    26-0-0/w STRC(32)    r     1 ERR                       16-0-0/w UBIN(16)    r     1 EXTRA_ROS_PGSZ
    75-0-0/w STRC(48)    r     1 FCN_MSG                    9-0-0/w VECT        r     1 FCN_MSG_
     E-0-0/w PTR         r     1 G$MSG$                    A8-0-0/w STRC(16)    r     1 GLINEATTR
    24-0-0/w UBIN(16)    r     1 GMA_#PGS                  25-0-0/w UBIN(16)    r     1 GMA_1ST
    23-0-0/w UBIN(16)    r     1 GMA_SEGX                  22-0-0/w UBIN(16)    r     1 GMA_VP#
    9C-0-0/w STRC(128)   r     1 GP_PARAMS                 *0-0-0/w STRC(1280)  r     1 GUD_PARAMS
    13-0-0/w SBIN(16)    r     1 I                         13-0-0/w UBIN(16)    r     1 IU
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:177  
    C9-0-0/w STRC(424)   r     1 KEYMES                    1A-0-0/w UBIN(16)    r     1 LAST_USR_DCB
    A9-0-0/w STRC(512)   r     1 LINEATTR                  1C-0-0/w UBIN(16)    r     1 PGSZ_LIB_DATA
    1D-0-0/w UBIN(16)    r     1 PGSZ_LIB_PROC             1B-0-0/w UBIN(16)    r     1 PGSZ_USR
    1E-0-0/w UBIN(16)    r     1 PGSZ_USR_DS1              11-0-0/w UBIN(16)    r     1 PGS_REMAINING
    12-0-0/w UBIN(16)    r     1 PSEUDO_NEEDED             8E-0-0/w STRC(224)   r     1 RD_PARAMS
    21-0-0/w BIT         r     1 RELEASE_ON_ERROR          10-0-0/w UBIN(16)    r     1 SEGS_64K
    28-0-0/w STRC(1120)  r     1 SETFP_MSG                 83-0-0/w STRC(176)   r     1 SLIB_PARAMS
    78-0-0/w STRC(176)   r     1 SPROC_PARAMS               C-0-0/w PTR         r     1 T$
    19-0-0/w UBIN(16)    r     1 TCBSZ                     17-0-0/w UBIN(16)    r     1 UDCBNUM
    15-0-0/w UBIN(16)    r     1 USR_ROS_PGSZ              14-0-0/w UBIN(16)    r     1 USR_ROS_WDSZ
     6-0-0/w VECT        r     1 V_

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$ASDT_USR$                0-0-0/w PTR         r     1 G$JIT$
     0-0-0/w PTR         r     1 G$MHJIT$                   0-0-0/w PTR         r     1 G$ROS$
     0-0-0/w PTR         r     1 G$TSA_USR$                 0-0-0/w PTR         r     1 G$TSTACKU$
     0-0-0/w PTR         r     1 G$UHJIT$                   0-0-0/w PTR         r     1 G$USRDS1$
     0-0-0/w PTR         r     1 GFR_PSUDO_CUR$(0:4)
     0-0-0/w SBIN(16)    r     1 GFR_PSUDO_CUR_SYS(0:7)
     0-0-0/w PTR         r     1 GFR_PSUDO_MAX$(0:4)
     0-0-0/w SBIN(16)    r     1 GFR_PSUDO_MAX_SYS(0:7)
     0-0-0/c CHAR(8)     r     1 GFR_PSUDO_NM(0:7)
     0-0-0/w STRC(48)    r     1 GFR_RES_LOCK               0-0-0/b BIT         r     1 GH_KEEPDELTA
     0-0-0/w EPTR        r     1 GI_ENDBOOT                 0-0-0/w SBIN(16)    r     1 GJ_BOOT_HNDLRS
     0-0-0/w STRC(48)    r     1 GJ_BOOT_LOCK               0-0-0/w UBIN(16)    r     1 GJ_ON_COUNT
     0-0-0/w UBIN(16)    r     1 GJ_QUIET                   0-0-0/w UBIN(16)    r     1 GJ_SABRT_COUNT
     0-0-0/w PTR         r     1 GJ_SFILE_START$            0-0-0/w UBIN(16)    r     1 GM_ASHUF
     0-0-0/w UBIN(16)    r     1 GM_REG_4_MEM               0-0-0/w UBIN(16)    r     1 GM_ROS_PGSZ
     0-0-0/w UBIN(16)    r     1 GM_SHUF                    0-0-0/w UBIN(16)    r     1 GM_STEP
     0-0-0/w STRC(48)    r     1 G_ASFGATE                  0-0-0/w UBIN(32)    r     1 G_BOOTTIME
     0-0-0/w STRC(48)    r     1 G_SLOCK

  ****  BASED and DCB variables  ****
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:178  

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(16)    r     1 B$STARFILE
     0-0-0/w STRC(32)    r     1 G$ASDT_USR(0:30)
     0-0-0/c ACHR        r     1 G$CCBUF                    0-0-0/w ASTR(808)   r     1 G$DCB
     0-0-0/w PTR         r     1 G$DCBTABLE(0:0)
     0-0-0/w STRC(736)   r     1 G$EXCFR                    0-0-0/w STRC(5616)  r     1 G$JIT
     0-0-0/w STRC(27232) r     1 G$MHJIT                    0-0-0/w STRC(976)   r     1 G$NWIO
     0-0-0/w STRC(144)   r     1 G$PROFILE_MSG
     0-0-0/w SBIN(16)    r     1 G$PSUDO(0:7)
     0-0-0/w STRC(12000) r     1 G$ROS                      0-0-0/w STRC(48)    r     1 G$ROS_EXT
     0-0-0/w STRC(1120)  r     1 G$SETFP                    0-0-0/w STRC(1408)  r     1 G$SETFP_MSG
     0-0-0/w STRC(768)   r     1 G$SFILE(0:0)
     0-0-0/w STRC(16)    r     1 G$STACK_FRAME              0-0-0/w STRC(96)    r     1 G$STACK_HDR
     0-0-0/w STRC(928)   r     1 G$TSA                      0-0-0/w STRC(384)   r     1 G$U
     0-0-0/w STRC(6480)  r     1 G$UHJIT


   Procedure GJS$STEP requires 3435 words for executable code.
   Procedure GJS$STEP requires 238 words of local(AUTO) storage.
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:179  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:180  
          MINI XREF LISTING

ALIB_DATA
      7632**DCL     22936--ASSIGN
ALIB_DATA.DATA_SZ
      7697**DCL     22929<<ASSIGN  22945>>IF      22949>>ASSIGN  23396>>ASSIGN
ALIB_DATA.ERR
      7657**DCL     22938>>IF      22940>>ASSIGN
ALIB_DATA.PROC_SZ
      7692**DCL     22928<<ASSIGN  22948>>ASSIGN  23409>>ASSIGN
ASZ_USR
      7342**DCL     23020<<ASSIGN  23023<<ASSIGN  23023>>ASSIGN  23026<<ASSIGN  23026>>ASSIGN  23028>>IF
     23035>>IF      23037>>ASSIGN  23043>>DOWHILE 23335>>ASSIGN  23443>>ASSIGN  23593>>ASSIGN  23594<<ASSIGN
B$STARFILE.TEXT
      9454**DCL     22855>>IF
BAD_LIB_DATA
     22957**LABEL   22946--GOTO
BAD_PROCESSOR
     22965**LABEL   22916--GOTO
CHKSZ
      8204**DCL     23077<>CALL
CHKSZ.ERR
      8225**DCL     23079>>ASSIGN
CHKSZ.FLGS.CHK_ONLY
      8259**DCL     23072<<ASSIGN
CHKSZ.FLGS.NSHUF
      8278**DCL     23075<<ASSIGN
CHKSZ.FLGS.PARK
      8272**DCL     23074<<ASSIGN
CHKSZ.FLGS.REQ_ALL
      8266**DCL     23073<<ASSIGN
CHKSZ.FLGS.STEP
      8284**DCL     23076<<ASSIGN
CHKSZ.SIZE
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:181  
      8205**DCL     23071<<ASSIGN
CUR_PGSZ
      7341**DCL     23063<<ASSIGN  23066<<ASSIGN  23066>>ASSIGN  23068>>IF      23070>>ASSIGN  23092>>ASSIGN
CWNAK
      8466**DCL     22712--CALL    22712--CALL
CWNAK.FCN
      8467**DCL     22709<<ASSIGN
CWNAK.NETADR
      8470**DCL     22711<<ASSIGN
CWNAK.NETERR.ERR.L6
      8513**DCL     22710<<ASSIGN
DCBRES
      7334**DCL     23632<<ASSIGN  23634>>ASSIGN  23647>>DOINDEX
EALTRET
      8843**DCL     23271>>ASSIGN  23447>>ASSIGN  23883>>ASSIGN
EBADHEAD
      9227**DCL     22835>>ASSIGN
EBSUNM
      8939**DCL     23220>>ASSIGN
ELIBSIZE
      9179**DCL     22960>>ASSIGN
EMEMLIMIT
      8987**DCL     23103>>ASSIGN
EMMFAILED
      9131**DCL     23440>>ASSIGN
ENO_START
      9083**DCL     22826>>ASSIGN
ENTER_ABORTM
     23440**LABEL   23469--GOTO    23602--CALLALT 23605--CALLALT 23623--GOTO
EPHYS_MEMLIMIT
      9035**DCL     23031>>ASSIGN
ERR
      7364**DCL     22664<<ASSIGN  22735<>CALL    22748<>CALL    22768<>CALL    23235<>CALL    23236<>CALL
     23378>>ASSIGN  23618<>CALL    23619<>CALL    23829<>CALL
ERR_CPEXIT
     23248**LABEL   22770--GOTO    22777--GOTO    22814--CALLALT
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:182  
ERR_GLINEATTR
     22719**LABEL   22749--GOTO
ERR_OPEN
     22711**LABEL   22736--GOTO
ESUOUT
      8891**DCL     23160>>ASSIGN
EXTRA_ROS_PGSZ
      7332**DCL     22995<<ASSIGN  23001>>ASSIGN  23435>>IF      23437<>CALL    23451>>ASSIGN  23452>>ASSIGN
FCN_MSG
      7715**DCL     22665--ASSIGN
FCN_MSG.ERR
      7740**DCL     22765<>CALL    22776<<ASSIGN  22814<>CALL    22826<<ASSIGN  22835<<ASSIGN  22874<<ASSIGN
     22934<>CALL    22937<>CALL    22940<<ASSIGN  22960<<ASSIGN  22982<<ASSIGN  23031<<ASSIGN  23079<<ASSIGN
     23103<<ASSIGN  23160<<ASSIGN  23220<<ASSIGN  23243>>ASSIGN  23262>>ASSIGN  23270<>CALL    23440<<ASSIGN
     23446<>CALL    23468<<ASSIGN  23602<>CALL    23605<>CALL    23616<<ASSIGN  23620>>IF
FCN_MSG.ERR.SEV
      7768**DCL     23231<<ASSIGN  23442<<ASSIGN
FCN_MSG.FCN
      7715**DCL     22813<<ASSIGN  22933<<ASSIGN  23234<<ASSIGN  23601<<ASSIGN  23617<<ASSIGN
FCN_MSG_
      7322**DCL     22665<<ASSIGN  22814<>CALL    22934<>CALL    23235<>CALL    23602<>CALL    23618<>CALL
     23619<>CALL
G$ASDT_USR.DESC.SIZE
      9481**DCL     23010>>ASSIGN
G$ASDT_USR.DESC.V
      9479**DCL     23009>>IF      23012>>IF
G$ASDT_USR$
      8343**DCL      9460--IMP-PTR 23009>>IF      23010>>ASSIGN  23012>>IF
G$CCBUF
      9450**DCL     23309>>ASSIGN
G$DCB.DCB#
     22010**DCL     23644<<ASSIGN
G$DCB.DCBNAME.L
     22021**DCL     22021--IMP-SIZ
G$DCB.EOMCHAR
     22012**DCL     22012--REDEF   22013--REDEF
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:183  
G$DCB.FLDID
     22011**DCL     22011--REDEF
G$DCB.RES
     22006**DCL     22007--REDEF
G$DCB.RLCID
     22016**DCL     22711>>ASSIGN  22730>>IF
G$DCBTABLE
     10461**DCL     22730>>IF      23641<<ASSIGN  23641>>ASSIGN  23644>>ASSIGN  23648<<ASSIGN
G$EXCFR
     21159**DCL     22992--ASSIGN  23654--ASSIGN
G$EXCFR.ALTEMPTY
     21164**DCL     23657<<ASSIGN
G$EXCFR.P$$
     21214**DCL     21214--REDEF   21214--REDEF
G$EXCFR.PREVSZ
     21164**DCL     21164--REDEF
G$EXCFR.TRLR.EVID
     21451**DCL     21469--REDEF   21477--REDEF   21477--REDEF
G$EXCFR.TRLR.SUBC
     21428**DCL     21428--REDEF   21446--REDEF   21450--REDEF   21450--REDEF
G$JIT.ACCN
     20387**DCL     22701>>ASSIGN
G$JIT.CCBUF
     20723**DCL     22666--ASSIGN  23309<<ASSIGN  23604--ASSIGN
G$JIT.CURSUDO
     20663**DCL     23131>>IF      23133>>ASSIGN  23142>>IF      23203<<ASSIGN  23213<<ASSIGN  23213>>ASSIGN
     23346<<ASSIGN
G$JIT.DB#
     20509**DCL     22823>>IF      22847>>IF
G$JIT.DB_WRTSEGS
     20502**DCL     23850<<ASSIGN
G$JIT.DLL
     20500**DCL     23348<<ASSIGN  23349>>ASSIGN  23351>>ASSIGN  23390>>ASSIGN  23500>>ASSIGN  23584>>ASSIGN
     23684>>ASSIGN
G$JIT.DUL
     20500**DCL     23349<<ASSIGN
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:184  
G$JIT.ERRLOG
     20658**DCL     20661--REDEF
G$JIT.FIRST_SEG
     20494**DCL     23425<<ASSIGN  23687<<ASSIGN  23695<<ASSIGN
G$JIT.GFR_ACCT
     20664**DCL     23061>>IF
G$JIT.JSUNIT
     20397**DCL     20398--REDEF
G$JIT.JUNK.EXONLY
     20656**DCL     23680<<ASSIGN
G$JIT.JUNK.HOST_STEP_ABRT
     20648**DCL     23622<<ASSIGN
G$JIT.JUNK.MLDTRC
     20657**DCL     22767>>IF      23007>>IF      23232>>IF      23260>>IF      23304>>IF
G$JIT.JUNK.PROCACCT
     20650**DCL     23669<<ASSIGN
G$JIT.JUNK.PROCSURCHG
     20649**DCL     23673<<ASSIGN
G$JIT.JUNK.STEP
     20656**DCL     23268<<ASSIGN  23339<<ASSIGN  23445<<ASSIGN  23903<<ASSIGN
G$JIT.JUNK.UDELTA
     20656**DCL     23857<<ASSIGN
G$JIT.JUNK2.BYPASS_MFPL
     20643**DCL     22808>>IF      22809<<ASSIGN  22815<<ASSIGN
G$JIT.JUNK2.MICROFPL
     20644**DCL     22753<<ASSIGN  22811>>IF
G$JIT.JUNK2.USER_CCBUF
     20643**DCL     23310<<ASSIGN  23313<<ASSIGN
G$JIT.LLL
     20501**DCL     23364<<ASSIGN  23368<<ASSIGN  23405>>ASSIGN  23690>>IF      23692>>ASSIGN
G$JIT.LUL
     20502**DCL     23365<<ASSIGN  23369<<ASSIGN  23690>>IF      23693>>ASSIGN
G$JIT.MAXMEM
     20507**DCL     23101>>IF
G$JIT.MAXSUDO
     20663**DCL     23142>>IF
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:185  
G$JIT.MCLS
     20396**DCL     20396--REDEF
G$JIT.MMFLGS.FREE_PPGS
     20506**DCL     23065>>IF      23355<<ASSIGN  23356<<ASSIGN  23710>>IF
G$JIT.MODE
     20385**DCL     23142>>IF      23142>>IF      23184>>ASSIGN  23184>>ASSIGN  23827>>IF
G$JIT.PCC
     20504**DCL     23001>>ASSIGN  23063>>ASSIGN  23108>>ASSIGN  23703>>ASSIGN
G$JIT.PCD
     20502**DCL     23063>>ASSIGN  23506<<ASSIGN  23506>>ASSIGN  23703>>ASSIGN
G$JIT.PCDDS
     20504**DCL     23013>>ASSIGN  23063>>ASSIGN  23703>>ASSIGN
G$JIT.PCDS
     20504**DCL     23063>>ASSIGN  23574<<ASSIGN  23703>>ASSIGN
G$JIT.PCL
     20503**DCL     23063>>ASSIGN  23371<<ASSIGN  23703>>ASSIGN
G$JIT.PCP
     20503**DCL     23066>>ASSIGN  23551<<ASSIGN  23711>>ASSIGN
G$JIT.PCROS
     20505**DCL     23063>>ASSIGN  23451<<ASSIGN  23703>>ASSIGN
G$JIT.PEAK_MEM
     20395**DCL     23703<<ASSIGN  23711<<ASSIGN  23711>>ASSIGN
G$JIT.PLL
     20500**DCL     23351<<ASSIGN  23352>>ASSIGN  23544>>ASSIGN  23846>>ASSIGN
G$JIT.PRIV.PRC
     20594**DCL     23682<<ASSIGN
G$JIT.PROCNAME
     20387**DCL     23675<<ASSIGN
G$JIT.PROFILE
     20667**DCL     22752<<ASSIGN  22789>>ASSIGN
G$JIT.PROG_ENTRY
     20385**DCL     22682>>IF      22926>>IF      23266>>IF      23317<<ASSIGN  23321>>IF      23322<<ASSIGN
     23560>>IF      23614>>IF      23736>>IF      23854>>IF
G$JIT.PUL
     20501**DCL     23352<<ASSIGN  23685>>ASSIGN  23847>>ASSIGN
G$JIT.RUNFLAGS
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:186  
     20639**DCL     23699<<ASSIGN
G$JIT.SLIB#
     20508**DCL     23345<<ASSIGN
G$JIT.SPROC#
     20508**DCL     23344<<ASSIGN  23844>>IF
G$JIT.START
     20388**DCL     23298<>CALL    23299<<ASSIGN  23299>>ASSIGN
G$JIT.STEP
     20491**DCL     22693>>IF      23269<<ASSIGN  23269>>ASSIGN  23324<<ASSIGN  23324>>ASSIGN
G$JIT.SYSID
     20386**DCL     22700>>ASSIGN
G$JIT.TMRZ
     20665**DCL     20666--REDEF
G$JIT.UNAME
     20387**DCL     22702>>ASSIGN
G$JIT.USER_EXTIME
     20389**DCL     20390--REDEF
G$JIT.USER_MEMTIME
     20392**DCL     20392--REDEF
G$JIT.USER_SVTIME
     20391**DCL     20391--REDEF
G$JIT.USR#
     20386**DCL     23793>>IF
G$JIT$
      8347**DCL     20328--IMP-PTR 22666>>ASSIGN  22682>>IF      22693>>IF      22700>>ASSIGN  22701>>ASSIGN
     22702>>ASSIGN  22752>>ASSIGN  22753>>ASSIGN  22767>>IF      22789>>ASSIGN  22808>>IF      22809>>ASSIGN
     22811>>IF      22815>>ASSIGN  22823>>IF      22847>>IF      22926>>IF      23001>>ASSIGN  23007>>IF
     23013>>ASSIGN  23061>>IF      23063>>ASSIGN  23063>>ASSIGN  23063>>ASSIGN  23063>>ASSIGN  23063>>ASSIGN
     23063>>ASSIGN  23065>>IF      23066>>ASSIGN  23101>>IF      23108>>ASSIGN  23131>>IF      23133>>ASSIGN
     23142>>IF      23142>>IF      23142>>IF      23142>>IF      23184>>ASSIGN  23184>>ASSIGN  23203>>ASSIGN
     23213>>ASSIGN  23213>>ASSIGN  23232>>IF      23260>>IF      23266>>IF      23268>>ASSIGN  23269>>ASSIGN
     23269>>ASSIGN  23298>>CALL    23299>>ASSIGN  23299>>ASSIGN  23304>>IF      23309>>ASSIGN  23310>>ASSIGN
     23313>>ASSIGN  23317>>ASSIGN  23321>>IF      23322>>ASSIGN  23324>>ASSIGN  23324>>ASSIGN  23339>>ASSIGN
     23344>>ASSIGN  23345>>ASSIGN  23346>>ASSIGN  23348>>ASSIGN  23349>>ASSIGN  23349>>ASSIGN  23351>>ASSIGN
     23351>>ASSIGN  23352>>ASSIGN  23352>>ASSIGN  23355>>ASSIGN  23356>>ASSIGN  23364>>ASSIGN  23365>>ASSIGN
     23368>>ASSIGN  23369>>ASSIGN  23371>>ASSIGN  23390>>ASSIGN  23405>>ASSIGN  23425>>ASSIGN  23445>>ASSIGN
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:187  
     23451>>ASSIGN  23500>>ASSIGN  23506>>ASSIGN  23506>>ASSIGN  23544>>ASSIGN  23551>>ASSIGN  23560>>IF
     23574>>ASSIGN  23584>>ASSIGN  23604>>ASSIGN  23614>>IF      23622>>ASSIGN  23669>>ASSIGN  23673>>ASSIGN
     23675>>ASSIGN  23680>>ASSIGN  23682>>ASSIGN  23684>>ASSIGN  23685>>ASSIGN  23687>>ASSIGN  23690>>IF
     23690>>IF      23692>>ASSIGN  23693>>ASSIGN  23695>>ASSIGN  23699>>ASSIGN  23703>>ASSIGN  23703>>ASSIGN
     23703>>ASSIGN  23703>>ASSIGN  23703>>ASSIGN  23703>>ASSIGN  23703>>ASSIGN  23710>>IF      23711>>ASSIGN
     23711>>ASSIGN  23711>>ASSIGN  23736>>IF      23793>>IF      23827>>IF      23844>>IF      23846>>ASSIGN
     23847>>ASSIGN  23850>>ASSIGN  23854>>IF      23857>>ASSIGN  23903>>ASSIGN
G$MHJIT.ASDT_MON.BIGFOOT.V
     11177**DCL     23749<<ASSIGN
G$MHJIT.CU$
     16811**DCL     23865>>ASSIGN  23865>>ASSIGN  23875>>DOWHILE
G$MHJIT.INTCON.HHJIT
     16945**DCL     16945--REDEF
G$MHJIT.INTCON.P$$
     16918**DCL     16918--REDEF
G$MHJIT.ISA_BIGFOOT.P$$
     13863**DCL     13863--REDEF
G$MHJIT.ISA_DBINH.P$$
     15077**DCL     15077--REDEF
G$MHJIT.ISA_IDLE.P$$
     11958**DCL     11958--REDEF
G$MHJIT.ISA_LVL10.P$$
     15380**DCL     15380--REDEF
G$MHJIT.ISA_LVL11.P$$
     15683**DCL     15683--REDEF
G$MHJIT.ISA_LVL12.P$$
     15986**DCL     15986--REDEF
G$MHJIT.ISA_LVL5.P$$
     14166**DCL     14166--REDEF
G$MHJIT.ISA_OV.P$$
     13560**DCL     13560--REDEF
G$MHJIT.ISA_PFS.P$$
     13231**DCL     13231--REDEF
G$MHJIT.ISA_RT_CLOCK.P$$
     16593**DCL     16593--REDEF
G$MHJIT.ISA_SATYR_RCV.P$$
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:188  
     14470**DCL     14470--REDEF
G$MHJIT.ISA_SATYR_TRN.P$$
     14774**DCL     14774--REDEF
G$MHJIT.ISA_SCHD.P$$
     16289**DCL     16289--REDEF
G$MHJIT.ISA_WDOG.P$$
     13339**DCL     13339--REDEF
G$MHJIT.TSA_DB.ISA.P$$
     12561**DCL     12561--REDEF
G$MHJIT.TSA_DB.P$$
     12432**DCL     12432--REDEF   12433--REDEF
G$MHJIT.TSA_HND.ISA.P$$
     17139**DCL     17139--REDEF
G$MHJIT.TSA_HND.P$$
     17010**DCL     17010--REDEF   17011--REDEF
G$MHJIT.TSA_MON.ISA.P$$
     12173**DCL     12173--REDEF
G$MHJIT.TSA_MON.P$$
     12044**DCL     12044--REDEF   12045--REDEF
G$MHJIT.TSA_OV.ISA.P$$
     12949**DCL     12949--REDEF
G$MHJIT.TSA_OV.P$$
     12820**DCL     12820--REDEF   12821--REDEF
G$MHJIT$
      8349**DCL     10483--IMP-PTR 23749>>ASSIGN  23865>>ASSIGN  23865>>ASSIGN  23875>>DOWHILE
G$MSG$
      7324**DCL     22666<<ASSIGN  22683>>ASSIGN  22928>>ASSIGN  22929>>ASSIGN  23397>>ASSIGN  23410>>ASSIGN
     23461>>ASSIGN  23522>>ASSIGN  23549>>ASSIGN  23562>>IF      23564>>ASSIGN  23568>>ASSIGN  23570>>ASSIGN
G$NWIO
     21543**DCL     22992--ASSIGN  23655--ASSIGN
G$NWIO.P$$
     21598**DCL     21598--REDEF   21598--REDEF
G$NWIO.PREVSZ
     21548**DCL     21548--REDEF
G$NWIO.TRLR.EVID
     21835**DCL     21853--REDEF   21861--REDEF   21861--REDEF
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:189  
G$NWIO.TRLR.SUBC
     21812**DCL     21812--REDEF   21830--REDEF   21834--REDEF   21834--REDEF
G$PROFILE_MSG
     22469**DCL     22790--ASSIGN
G$PROFILE_MSG.PROFILE
     22526**DCL     22789<<ASSIGN
G$PSUDO
      9451**DCL     23142>>IF      23142>>IF      23184<<ASSIGN  23184>>ASSIGN
G$ROS
      9498**DCL     22993--ASSIGN  23641--ASSIGN
G$ROS.AUTO_DS
      9508**DCL     23359<<ASSIGN  23360<<ASSIGN
G$ROS.AUTO_DS$
      9507**DCL      9508--REDEF
G$ROS.AUTO_T$
      9508**DCL      9508--REDEF
G$ROS.AVAIL$
      9505**DCL     23460>>ASSIGN  23653>>ASSIGN  23662<<ASSIGN  23663>>ASSIGN  23664>>ASSIGN
G$ROS.CP_ECCB.FLTFLG
     10122**DCL     10153--REDEF
G$ROS.DB_ECCB.FLTFLG
     10046**DCL     10077--REDEF
G$ROS.DCBPTR$
      9503**DCL     22730>>IF      23641>>ASSIGN  23641>>ASSIGN  23644>>ASSIGN  23648>>ASSIGN
G$ROS.JIT.ERRLOG
      9857**DCL      9860--REDEF
G$ROS.JIT.JSUNIT
      9596**DCL      9597--REDEF
G$ROS.JIT.MCLS
      9595**DCL      9595--REDEF
G$ROS.JIT.TMRZ
      9864**DCL      9865--REDEF
G$ROS.JIT.USER_EXTIME
      9588**DCL      9589--REDEF
G$ROS.JIT.USER_MEMTIME
      9591**DCL      9591--REDEF
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:190  
G$ROS.JIT.USER_SVTIME
      9590**DCL      9590--REDEF
G$ROS.M$DEBUG.EOMCHAR
     10193**DCL     10193--REDEF   10194--REDEF
G$ROS.M$DEBUG.FLDID
     10192**DCL     10192--REDEF
G$ROS.M$DEBUG.RES
     10187**DCL     10188--REDEF
G$ROS.M$DO.EOMCHAR
     10398**DCL     10398--REDEF   10399--REDEF
G$ROS.M$DO.FLDID
     10397**DCL     10397--REDEF
G$ROS.M$DO.RES
     10392**DCL     10393--REDEF
G$ROS.M$HOST.EOMCHAR
     10347**DCL     10347--REDEF   10348--REDEF
G$ROS.M$HOST.FLDID
     10346**DCL     10346--REDEF
G$ROS.M$HOST.RES
     10341**DCL     10342--REDEF
G$ROS.M$LM.ACCT
     10238**DCL     22884<<ASSIGN
G$ROS.M$LM.EOMCHAR
     10244**DCL     10244--REDEF   10245--REDEF
G$ROS.M$LM.FLDID
     10243**DCL     10243--REDEF
G$ROS.M$LM.MODTIME
     10257**DCL     22887<<ASSIGN
G$ROS.M$LM.NAME
     10237**DCL     22883<<ASSIGN  23675>>ASSIGN
G$ROS.M$LM.PASS
     10257**DCL     22885<<ASSIGN
G$ROS.M$LM.PSN
     10257**DCL     22886<<ASSIGN
G$ROS.M$LM.RES
     10238**DCL     10239--REDEF
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:191  
G$ROS.M$ME.EOMCHAR
     10296**DCL     10296--REDEF   10297--REDEF
G$ROS.M$ME.FLDID
     10295**DCL     10295--REDEF
G$ROS.M$ME.RES
     10290**DCL     10291--REDEF
G$ROS.NUMDCBS
      9507**DCL     23634<<ASSIGN
G$ROS.TCB.ALT$
      9503**DCL     23653<<ASSIGN  23654>>ASSIGN  23657>>ASSIGN
G$ROS.TCB.AVSZ
      9504**DCL     23655<<ASSIGN
G$ROS.TCB.CURRSZ
      9504**DCL     23656<<ASSIGN
G$ROS.TCB.STK$
      9504**DCL     23654<<ASSIGN
G$ROS.U_ECCB.FLTFLG
      9970**DCL     10001--REDEF
G$ROS$
      8346**DCL      9498--IMP-PTR 22730>>IF      22883>>ASSIGN  22884>>ASSIGN  22885>>ASSIGN  22886>>ASSIGN
     22887>>ASSIGN  23359>>ASSIGN  23360>>ASSIGN  23460>>ASSIGN  23634>>ASSIGN  23641>>ASSIGN  23641>>ASSIGN
     23644>>ASSIGN  23648>>ASSIGN  23653>>ASSIGN  23653>>ASSIGN  23654>>ASSIGN  23654>>ASSIGN  23655>>ASSIGN
     23656>>ASSIGN  23657>>ASSIGN  23662>>ASSIGN  23662>>ASSIGN  23663>>ASSIGN  23664>>ASSIGN  23675>>ASSIGN
G$ROS_EXT
     10449**DCL     23641--ASSIGN  23662--ASSIGN
G$ROS_EXT.NEXT$
     10453**DCL     23664<<ASSIGN
G$ROS_EXT.NWORDS
     10453**DCL     23663<<ASSIGN
G$SETFP
     22260**DCL     22683>>ASSIGN
G$SETFP.DATA_BIAS
     22389**DCL     22389--REDEF
G$SETFP_MSG.DATA_BIAS
     22180**DCL     22180--REDEF
G$SETFP_MSG.DS1_SZ
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:192  
     22230**DCL     23562>>IF      23564>>ASSIGN  23568>>ASSIGN
G$SETFP_MSG.LIB_DATA_SZ
     22215**DCL     22929>>ASSIGN
G$SETFP_MSG.LIB_PROC_SZ
     22220**DCL     22928>>ASSIGN
G$SETFP_MSG.OFFSET_DATA
     22195**DCL     23522>>ASSIGN
G$SETFP_MSG.OFFSET_DS1
     22225**DCL     23570>>ASSIGN
G$SETFP_MSG.OFFSET_LIB_DATA
     22205**DCL     23397>>ASSIGN
G$SETFP_MSG.OFFSET_LIB_PROC
     22210**DCL     23410>>ASSIGN
G$SETFP_MSG.OFFSET_PROC
     22200**DCL     23549>>ASSIGN
G$SETFP_MSG.OFFSET_RO
     22190**DCL     23461>>ASSIGN
G$SFILE.LCP6_FLGS
     21964**DCL     23813<<ASSIGN  23813>>ASSIGN
G$SFILE.LIB_WDSZ_DATA
     21969**DCL     21970--REDEF   22956>>IF
G$SFILE.PGSZ_DATA
     21970**DCL     22965>>ASSIGN
G$SFILE.PGSZ_PROC
     21970**DCL     22964>>ASSIGN
G$STACK_FRAME.WDS
     20745**DCL     23892>>IF      23893>>ASSIGN  23896<<ASSIGN  23896>>ASSIGN
G$STACK_HDR.CW
     20741**DCL     23890>>ASSIGN
G$TSA.I.TRAP#
     20797**DCL     23856<<ASSIGN  23881<<ASSIGN
G$TSA.ISA.P$$
     20934**DCL     20934--REDEF
G$TSA.P
     20806**DCL     23727<<ASSIGN  23727>>ASSIGN
G$TSA.P$$
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:193  
     20805**DCL     20805--REDEF   20806--REDEF   23725<<ASSIGN
G$TSA.S
     20825**DCL     23729<<ASSIGN
G$TSA.Z.IS
     20804**DCL     23728<<ASSIGN
G$TSA_USR$
      8344**DCL     20773--IMP-PTR 23725>>ASSIGN  23727>>ASSIGN  23727>>ASSIGN  23728>>ASSIGN  23729>>ASSIGN
     23856>>ASSIGN  23881>>ASSIGN
G$TSTACKU$
      8345**DCL     23890>>ASSIGN  23890>>ASSIGN  23892>>IF
G$U.ASYNCH
     21140**DCL     23865<<ASSIGN  23865>>ASSIGN  23875>>DOWHILE
G$U.MISC
     21140**DCL     21140--REDEF
G$UHJIT.ASDT_USR.ISR6.EP
     17854**DCL     23424<<ASSIGN
G$UHJIT.ASDT_USR.ISR6.WP
     17854**DCL     23423<<ASSIGN
G$UHJIT.ASDT_USR.LIBIS1.BASE
     18029**DCL     23420>>ASSIGN
G$UHJIT.ASDT_USR.LIBIS1.SIZE
     18031**DCL     23421>>ASSIGN
G$UHJIT.ISA_USR
     18780**DCL     19075--REDEF
G$UHJIT.ISA_USR.P$$
     18855**DCL     18855--REDEF
G$UHJIT.TSA_CP.ISA.P$$
     20062**DCL     20062--REDEF
G$UHJIT.TSA_CP.P$$
     19933**DCL     19933--REDEF   19934--REDEF
G$UHJIT.TSA_DB.ISA.P$$
     19674**DCL     19674--REDEF
G$UHJIT.TSA_DB.P$$
     19545**DCL     19545--REDEF   19546--REDEF
G$UHJIT.TSA_RTT.P$$
     20308**DCL     20308--REDEF   20309--REDEF
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:194  
G$UHJIT.TSA_USR.ISA.P$$
     19264**DCL     19264--REDEF
G$UHJIT.TSA_USR.P$$
     19135**DCL     19135--REDEF   19136--REDEF
G$UHJIT$
      8350**DCL     17357--IMP-PTR 23420>>ASSIGN  23421>>ASSIGN  23423>>ASSIGN  23424>>ASSIGN
G$USRDS1$
      8348**DCL     23569>>ASSIGN
GDA$INIT_DONE
     22531**DCL-ENT 23772--CALL
GFR_PSUDO_CUR$
      8360**DCL     23142>>IF      23184>>ASSIGN  23184>>ASSIGN
GFR_PSUDO_CUR_SYS
      8358**DCL     23142>>IF      23181<<ASSIGN  23181>>ASSIGN
GFR_PSUDO_MAX$
      8359**DCL     23142>>IF
GFR_PSUDO_MAX_SYS
      8357**DCL     23142>>IF
GFR_PSUDO_NM
      8356**DCL     23129>>IF
GFR_RES_LOCK
      8424**DCL     23139<>CALL    23157<>CALL    23193<>CALL
GHH$LOCK
       172**DCL-ENT 23139--CALL    23743--CALL    23767--CALL    23811--CALL    23863--CALL
GHH$RTCN
     22535**DCL-ENT 23761--CALL
GHH$UNLOCK
       172**DCL-ENT 23157--CALL    23193--CALL    23755--CALL    23784--CALL    23820--CALL    23871--CALL
GHH$WDTF
     22533**DCL-ENT 23757--CALL
GHH$WDTN
     22534**DCL-ENT 23760--CALL
GHI$UTS
     22536**DCL-ENT 23298--CALL
GHS$REG
     22537**DCL-ENT 22720--CALL    23044--CALL    23795--CALL    23876--CALL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:195  
GHS$RUE
     22538**DCL-ENT 23822--CALL
GH_KEEPDELTA
      8368**DCL     23771>>IF
GIR$INITCHANS
     22539**DCL-ENT 23759--CALL
GIR$MLCPDUMP
     22540**DCL-ENT 23758--CALL
GI_ENDBOOT
      8361**DCL     23769>>IF      23770>>CALL
GJI_KEYMES_INIT
      8682**DCL     22699>>ASSIGN
GJI_KEYMES_INIT.TERMID.TERM
      8764**DCL      8773--REDEF
GJS$ABORTM
     22543**DCL-ENT 23270--CALL    23446--CALL
GJS$CLOSE_SHARED
     22546**DCL-ENT 23240--CALL    23242--CALL
GJS$OPEN_SHARED
     22549**DCL-ENT 22872--CALL    22913--CALL
GJS$READ_RU
     22544**DCL-ENT 23465--CALL    23526--CALL    23572--CALL
GJS$REL_ALL
     22550**DCL-ENT 23038--CALL
GJS$RUND
     22545**DCL-ENT 23316--CALL
GJS$USRGO
     22548**DCL-ENT 23904--CALL
GJU$GET_DATA
     22547**DCL-ENT 23477--CALL    23534--CALL
GJU$GET_PROC
     22542**DCL-ENT 23399--CALL    23413--CALL    23554--CALL    23587--CALL
GJ_BOOT_HNDLRS
      8372**DCL     23745<<ASSIGN  23745>>ASSIGN  23747>>IF      23786>>DOWHILE 23793>>IF
GJ_BOOT_LOCK
      8386**DCL     23743<>CALL    23755<>CALL    23767<>CALL    23784<>CALL
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:196  
GJ_ON_COUNT
      8354**DCL     22695<<ASSIGN  22695>>ASSIGN
GJ_QUIET
      8353**DCL     22697>>IF      22715>>IF
GJ_SABRT_COUNT
      8355**DCL     22714<<ASSIGN  22714>>ASSIGN
GJ_SFILE_START$
      8351**DCL     21951--IMP-PTR 22956>>IF      22964>>ASSIGN  22965>>ASSIGN  23813>>ASSIGN  23813>>ASSIGN
GLINEATTR.V
      8316**DCL     22741--ASSIGN  22742--ASSIGN
GLINEATTR.V.DCB#
      8316**DCL     22740<<ASSIGN
GMA$CHKSIZE
     22553**DCL-ENT 23077--CALL
GMA$CVM
     22551**DCL-ENT 23422--CALL
GMA$GET
     22552**DCL-ENT 23437--CALL    23503--CALL    23565--CALL
GMA$REL_ACCTMEM
     22554**DCL-ENT 23250--CALL    23302--CALL    23444--CALL
GMA_#PGS
      7347**DCL     22676<<ASSIGN  23037<<ASSIGN  23038<>CALL    23070<<ASSIGN  23071>>ASSIGN  23092<<ASSIGN
     23250<>CALL    23301>>IF      23302<>CALL    23316<>CALL    23421<<ASSIGN  23422<>CALL    23493<<ASSIGN
     23497<<ASSIGN  23503<>CALL    23506>>ASSIGN  23507>>ASSIGN  23685<<ASSIGN  23686>>DOINDEX 23693<<ASSIGN
     23694>>DOINDEX
GMA_1ST
      7348**DCL     23846<<ASSIGN  23849>>DOINDEX
GMA_SEGX
      7346**DCL     23501<<ASSIGN  23503<>CALL    23684<<ASSIGN  23686>>DOINDEX 23692<<ASSIGN  23694>>DOINDEX
     23847<<ASSIGN  23849>>DOINDEX
GMA_VP#
      7345**DCL     23420<<ASSIGN  23422<>CALL    23500<<ASSIGN  23501>>ASSIGN
GM_ASHUF
      8363**DCL     23028>>IF
GM_REG_4_MEM
      8366**DCL     23040>>IF
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:197  
GM_ROS_PGSZ
      8367**DCL     22995>>ASSIGN
GM_SHUF
      8364**DCL     23035>>IF      23037>>ASSIGN  23043>>DOWHILE
GM_STEP
      8365**DCL     23035>>IF      23037>>ASSIGN  23043>>DOWHILE 23335<<ASSIGN  23335>>ASSIGN  23443<<ASSIGN
     23443>>ASSIGN  23593<<ASSIGN  23593>>ASSIGN
GOT_PSEUDO
     23268**LABEL   23216--GOTO
GP_PARAMS
      8157**DCL     23399<>CALL    23413<>CALL    23477<>CALL    23534<>CALL    23554<>CALL    23587<>CALL
GP_PARAMS.PGSZ
      8192**DCL     23391<<ASSIGN  23406<<ASSIGN  23474<<ASSIGN  23532<<ASSIGN  23545<<ASSIGN  23585<<ASSIGN
GP_PARAMS.RD_PARAMS$
      8158**DCL     22669<<ASSIGN
GP_PARAMS.SHARE
      8165**DCL     23386<<ASSIGN  23433<<ASSIGN  23582<<ASSIGN
GP_PARAMS.SHARE.SHARE_PROC
      8179**DCL     23583<<ASSIGN
GP_PARAMS.VP#
      8188**DCL     23390<<ASSIGN  23395>>ASSIGN  23405<<ASSIGN  23411>>ASSIGN  23475<<ASSIGN  23531<<ASSIGN
     23544<<ASSIGN  23547>>ASSIGN  23584<<ASSIGN
GUD_PARAMS
      7245**DCL        31--PROC    22745<>CALL
GUD_PARAMS.BND
      7305**DCL      7306--REDEF
GUD_PARAMS.BND.PAR1
      7305**DCL     22742<<ASSIGN
GUD_PARAMS.BND.PAR2
      7305**DCL     22744<<ASSIGN
GUD_PARAMS.BND.PAR5
      7305**DCL      9450--IMP-SIZ 23308<<ASSIGN  23308>>ASSIGN  23309>>ASSIGN
GUD_PARAMS.DESC
      7307**DCL      7308--REDEF
GUD_PARAMS.ERR
      7271**DCL     22707<>CALL    22710>>ASSIGN  22732<>CALL    22746>>IF      23243<<ASSIGN  23262<<ASSIGN
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:198  
     23271<<ASSIGN  23447<<ASSIGN  23883<<ASSIGN
GUD_PARAMS.MCL.CODE
      7252**DCL      7252--REDEF   22739<<ASSIGN  22756<<ASSIGN  23888>>IF
GUD_PARAMS.PTRS
      7301**DCL      7302--REDEF    7304--REDEF    7304--REDEF    7304--REDEF
GUD_PARAMS.PTRS.PAR1$
      7301**DCL     22741<<ASSIGN
GUD_PARAMS.PTRS.PAR2$
      7301**DCL     22743<<ASSIGN
GUD_PARAMS.PTRS.PAR5$
      7301**DCL     23306>>IF      23309>>ASSIGN
G_ASFGATE
      8443**DCL     23863<>CALL    23871<>CALL
G_BOOTTIME
      8362**DCL     23299>>ASSIGN
G_SLOCK
      8405**DCL     23811<>CALL    23820<>CALL
I
      7328**DCL      7329--REDEF   23126<<ASSIGN  23128<<DOINDEX 23129>>IF      23131>>IF      23133>>ASSIGN
     23142>>IF      23142>>IF      23142>>IF      23142>>IF      23142>>IF      23142>>IF      23181>>ASSIGN
     23181>>ASSIGN  23184>>ASSIGN  23184>>ASSIGN  23203>>ASSIGN  23213>>ASSIGN  23213>>ASSIGN  23239<<ASSIGN
     23240<>CALL    23241<<ASSIGN  23242<>CALL    23346>>ASSIGN  23490<<DOINDEX 23640<<DOINDEX 23641>>ASSIGN
     23641>>ASSIGN  23644>>ASSIGN  23644>>ASSIGN  23647<<DOINDEX 23648>>ASSIGN  23686<<DOINDEX 23687>>ASSIGN
     23694<<DOINDEX 23695>>ASSIGN  23849<<DOINDEX 23850>>ASSIGN  23893<<ASSIGN  23894>>ASSIGN  23896>>ASSIGN
     23896>>ASSIGN
IU
      7329**DCL     23500>>ASSIGN
KEYMES
      8537**DCL     22699<<ASSIGN  22704--CALL    22704--CALL    22718--CALL    22718--CALL
KEYMES.ACCT
      8658**DCL     22701<<ASSIGN
KEYMES.MSG#
      8546**DCL     22717<<ASSIGN
KEYMES.SYSID
      8657**DCL     22700<<ASSIGN
KEYMES.TERMID.TERM
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:199  
      8619**DCL      8628--REDEF
KEYMES.UNAME
      8659**DCL     22702<<ASSIGN
KNA$CLOSE
     22557**DCL-ENT 22735--CALL    22748--CALL    22768--CALL    23829--CALL
KNA$MCL
     22558**DCL-ENT 22745--CALL
KNA$OPEN
     22559**DCL-ENT 22707--CALL    22732--CALL
KNA$READ
     22555**DCL-ENT 22765--CALL    22937--CALL    23236--CALL    23605--CALL    23619--CALL
KNA$WRITE
     22556**DCL-ENT 22791--CALL    22814--CALL    22934--CALL    23235--CALL    23602--CALL    23618--CALL
KNB$GETRESP
     22560**DCL-ENT 22704--CALL    22712--CALL    22718--CALL
LAST_USR_DCB
      7336**DCL     23639<<ASSIGN  23640>>DOINDEX 23647>>DOINDEX 23647>>DOINDEX
LINEATTR
      8334**DCL     22743--ASSIGN  22744--ASSIGN
LINEATTR.MICROFPL
      8334**DCL     22753>>ASSIGN
LINEATTR.PROFILE
      8336**DCL      8336--REDEF
LINEATTR.PROTXTC
      8336**DCL     22752>>ASSIGN
MM_ALTRETURN
     23425**LABEL   23503--CALLALT 23565--CALLALT
NO_PHYS_MEM
     23023**LABEL   23041--GOTO    23044--CALLALT
PGSZ_LIB_DATA
      7338**DCL     22905<<ASSIGN  22949<<ASSIGN  22965<<ASSIGN  23026>>ASSIGN  23391>>ASSIGN  23580>>IF
     23585>>ASSIGN
PGSZ_LIB_PROC
      7339**DCL     22906<<ASSIGN  22948<<ASSIGN  22964<<ASSIGN  23026>>ASSIGN  23406>>ASSIGN
PGSZ_USR
      7337**DCL     23001<<ASSIGN  23010<<ASSIGN  23010>>ASSIGN  23013<<ASSIGN  23013>>ASSIGN  23020>>ASSIGN
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:200  
     23054<<ASSIGN  23054>>ASSIGN  23068>>IF      23070>>ASSIGN  23092>>ASSIGN  23101>>IF      23108<<ASSIGN
     23108>>ASSIGN  23444<>CALL    23452<<ASSIGN  23452>>ASSIGN  23507<<ASSIGN  23507>>ASSIGN  23552<<ASSIGN
     23552>>ASSIGN
PGSZ_USR_DS1
      7340**DCL     23564<<ASSIGN  23565<>CALL    23574>>ASSIGN
PGS_REMAINING
      7326**DCL     23488<<ASSIGN  23491>>IF      23494<<ASSIGN  23494>>ASSIGN  23497>>ASSIGN
PRO_ERR
     22771**LABEL   22791--CALLALT
PSEUDO_NEEDED
      7327**DCL     23133<<ASSIGN  23142>>IF      23142>>IF      23142>>IF      23181>>ASSIGN  23184>>ASSIGN
RD_PARAMS
      8059**DCL     22669--ASSIGN  23465<>CALL    23526<>CALL    23572<>CALL
RD_PARAMS.BIAS
      8067**DCL     23377<<ASSIGN
RD_PARAMS.DCB#
      8097**DCL     22668<<ASSIGN
RD_PARAMS.ERR
      8117**DCL     23378<<ASSIGN  23468>>ASSIGN
RD_PARAMS.HOST_OFFSET
      8091**DCL     23397<<ASSIGN  23410<<ASSIGN  23461<<ASSIGN  23522<<ASSIGN  23549<<ASSIGN  23570<<ASSIGN
RD_PARAMS.PROG_TYPE
      8060**DCL     23393<<ASSIGN  23408<<ASSIGN  23432<<ASSIGN
RD_PARAMS.TOT_SECTSZ
      8081**DCL     23396<<ASSIGN  23409<<ASSIGN  23459<<ASSIGN  23519<<ASSIGN  23532>>ASSIGN  23548<<ASSIGN
     23568<<ASSIGN
RD_PARAMS.USR_LOC
      8086**DCL     23395<<ASSIGN  23411<<ASSIGN  23515<<ASSIGN  23519>>ASSIGN  23531>>ASSIGN  23547<<ASSIGN
RD_PARAMS.USR_LOC$
      8085**DCL      8086--REDEF   23460<<ASSIGN  23569<<ASSIGN
READ_ALTRETURN
     23459**LABEL   23401--GOTO    23413--CALLALT 23477--CALLALT 23526--CALLALT 23534--CALLALT 23554--CALLALT
     23572--CALLALT 23587--CALLALT
RELEASE_ON_ERROR
      7343**DCL     22677<<ASSIGN  23083<<ASSIGN  23248>>IF      23301>>IF
REPORT_IT
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:201  
     23220**LABEL   22827--GOTO    22836--GOTO    22875--GOTO    22934--CALLALT 22937--CALLALT 22941--GOTO
     22961--GOTO    22983--GOTO    23032--GOTO    23080--GOTO    23104--GOTO    23164--GOTO
REREAD_SETFP
     22749**LABEL   22792--GOTO    22816--GOTO
SCREECH
     22561**DCL-ENT 22721--CALL    22796--CALL    23281--CALL
SDELUSR
      9351**DCL     22721<>CALL
SEGS_64K
      7325**DCL     23487<<ASSIGN  23490>>DOINDEX
SETFP_MSG
      7423**DCL     22683<<ASSIGN  22764--ASSIGN  22788--ASSIGN
SETFP_MSG.ACCT
      7480**DCL     22884>>ASSIGN  22891<<ASSIGN
SETFP_MSG.DATA_BIAS
      7552**DCL      7552--REDEF   22833>>IF      22945>>IF      22956>>IF      23377>>ASSIGN  23513>>IF
     23515>>ASSIGN
SETFP_MSG.DATA_SZ
      7542**DCL     22833>>IF      23513>>IF      23519>>ASSIGN
SETFP_MSG.DCBRES
      7517**DCL     23632>>ASSIGN
SETFP_MSG.ERR
      7448**DCL     22773>>IF      22776>>ASSIGN  22791<>CALL
SETFP_MSG.FCN
      7423**DCL     22784>>IF      22786>>IF
SETFP_MSG.FLAGS
      7497**DCL     22870>>ASSIGN
SETFP_MSG.FLAGS.CCBUF
      7507**DCL     23599>>IF
SETFP_MSG.FLAGS.DEBUG
      7507**DCL     22823>>IF      22848<<ASSIGN  22855>>IF      23726>>IF      23842>>IF
SETFP_MSG.FLAGS.LAUTO
      7507**DCL     23358>>IF
SETFP_MSG.FLAGS.NOCHRPMEM
      7502**DCL     23053>>IF      23354>>IF
SETFP_MSG.FLAGS.PROCACC
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:202  
      7502**DCL     23668>>IF
SETFP_MSG.FLAGS.PROCSURCHG
      7502**DCL     23671>>IF
SETFP_MSG.FLAGS.S
      7501**DCL     22855>>IF
SETFP_MSG.FLAGS.XEQ_ONLY
      7501**DCL     22847>>IF      23679>>IF
SETFP_MSG.LIB_NAME
      7554**DCL     22910>>ASSIGN
SETFP_MSG.LIB_NAME.L
      7556**DCL     22903>>IF      23362>>IF      23384>>IF
SETFP_MSG.MODTIME
      7485**DCL     22887>>ASSIGN  22894<<ASSIGN
SETFP_MSG.NAME
      7480**DCL     22672--ASSIGN  22855--IF      22883>>ASSIGN  22910<<ASSIGN
SETFP_MSG.P$$
      7490**DCL     22823>>IF      23725>>ASSIGN
SETFP_MSG.PASS
      7480**DCL     22885>>ASSIGN  22892<<ASSIGN
SETFP_MSG.PRIV
      7495**DCL     23682>>ASSIGN
SETFP_MSG.PROC_SZ
      7547**DCL     23548>>ASSIGN
SETFP_MSG.PSEUDO_COUNT
      7507**DCL     23125>>IF      23131>>IF      23133>>ASSIGN  23213>>ASSIGN  23346>>ASSIGN
SETFP_MSG.PSEUDO_TEXT
      7508**DCL     23129>>IF
SETFP_MSG.PSN
      7481**DCL     22886>>ASSIGN  22893<<ASSIGN
SETFP_MSG.ROS_SZ
      7537**DCL     22993>>ASSIGN  23457>>IF      23459>>ASSIGN  23474>>ASSIGN  23653>>ASSIGN
SETFP_MSG.TCBSIZE
      7522**DCL     22991>>IF      22991<<ASSIGN  22992>>ASSIGN  23655>>ASSIGN
SETFP_MSG.UDCBNUM
      7512**DCL     23631>>ASSIGN
SETFP_MSG.VDPGS
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:203  
      7532**DCL     23001>>ASSIGN  23349>>ASSIGN  23351>>ASSIGN  23485>>IF      23487>>ASSIGN  23488>>ASSIGN
SETFP_MSG.VERSION
      7508**DCL     23418>>IF
SETFP_MSG.VPPGS
      7527**DCL     23023>>ASSIGN  23054>>ASSIGN  23352>>ASSIGN  23545>>ASSIGN  23551>>ASSIGN  23552>>ASSIGN
SFCNCODE
      9414**DCL     22796<>CALL
SLIB_PARAMS
      7918**DCL     22674<<ASSIGN  22913<>CALL
SLIB_PARAMS.ERR
      7978**DCL     22982>>ASSIGN
SLIB_PARAMS.PNUM
      7945**DCL     22956>>IF      22964>>ASSIGN  22965>>ASSIGN  23241>>ASSIGN  23345>>ASSIGN
SLIB_PARAMS.PTYPE
      7952**DCL     22911<<ASSIGN
SLIB_PARAMS.TYC
      8017**DCL     23386>>ASSIGN  23582>>ASSIGN
SLIB_PARAMS.TYC.GET_PROC
      8025**DCL     22924>>IF      23025>>IF      23388>>IF
SLIB_PARAMS.TYC.SFILE$
      8021**DCL     22915>>IF
SMING
      9288**DCL     23281<>CALL
SPROC_PARAMS
      7778**DCL     22670<<ASSIGN  22674>>ASSIGN  22872<>CALL
SPROC_PARAMS.ERR
      7838**DCL     22874>>ASSIGN
SPROC_PARAMS.FCN
      7784**DCL     22671<<ASSIGN
SPROC_PARAMS.FID$
      7779**DCL     22672<<ASSIGN
SPROC_PARAMS.PNUM
      7805**DCL     23239>>ASSIGN  23344>>ASSIGN  23813>>ASSIGN  23813>>ASSIGN
SPROC_PARAMS.PTYPE
      7812**DCL     22870<<ASSIGN
SPROC_PARAMS.TYC
PL6.E3A0      #001=GJS$STEP File=GJS$STEP.:E05TSI                                TUE 07/29/97 22:04 Page:204  
      7877**DCL     23433>>ASSIGN
SPROC_PARAMS.TYC.GET_PROC
      7885**DCL     22859<<ASSIGN  23022>>IF
SPROC_PARAMS.TYC.SFILE$
      7881**DCL     22858<<ASSIGN  23463>>IF      23524>>IF
SPROC_PARAMS.TYC.SHARE_PROC
      7895**DCL     22860<<ASSIGN  23804>>IF
SPROC_PARAMS.WAIT
      7868**DCL     22673<<ASSIGN
T$
      7323**DCL     22788<<ASSIGN  22789>>ASSIGN  22790>>ASSIGN  23890<<ASSIGN  23892>>IF      23892>>IF
     23893>>ASSIGN  23894<<ASSIGN  23894>>ASSIGN  23896>>ASSIGN  23896>>ASSIGN
TCBSZ
      7335**DCL     22992<<ASSIGN  22993>>ASSIGN
UDCBNUM
      7333**DCL     23631<<ASSIGN  23634>>ASSIGN  23639>>ASSIGN
USR_ROS_PGSZ
      7331**DCL     22994<<ASSIGN  22995>>ASSIGN  23663>>ASSIGN
USR_ROS_WDSZ
      7330**DCL     22993<<ASSIGN  22994>>ASSIGN  23662>>ASSIGN  23663>>ASSIGN
USR_STATUS_REG
      8820**DCL     23729>>ASSIGN
V_
      7321**DCL     22764<<ASSIGN  22765<>CALL    22790<<ASSIGN  22791<>CALL    22936<<ASSIGN  22937<>CALL
     23236<>CALL    23604<<ASSIGN  23605<>CALL

PL6.E3A0      #002=GJS$USRGO File=GJS$STEP.:E05TSI                               TUE 07/29/97 22:11 Page:205  
     1451        1        /*T***********************************************************/
     1452        2        /*T*                                                         */
     1453        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1454        4        /*T*                                                         */
     1455        5        /*T***********************************************************/
     1456        6
     1457        7        /*F*  NAME: GJS$USRGO
     1458        8
     1459        9              PURPOSE: To provide a convenient breakpoint prior to
     1460       10                       entering the user.
     1461       11
     1462       12        */
     1463       13
     1464       14        GJS$USRGO: PROC;
     1465       15
     1466       16    1      RETURN;
     1467       17    1   END GJS$USRGO;

PL6.E3A0      #002=GJS$USRGO File=GJS$STEP.:E05TSI                               TUE 07/29/97 22:11 Page:206  
--  Include file information  --

   G_LCP6_E.:E05TOU  was found in the system file and is never referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure GJS$USRGO.

   Procedure GJS$USRGO requires 8 words for executable code.
   Procedure GJS$USRGO requires 4 words of local(AUTO) storage.

    No errors detected in file GJS$STEP.:E05TSI    .

PL6.E3A0      #002=GJS$USRGO File=GJS$STEP.:E05TSI                               TUE 07/29/97 22:11 Page:207  

 Object Unit name= GJS$USRGO                                  File name= GJS$STEP.:E05TOU
 UTS= JUL 29 '97 22:11:31.68 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none     8      8  GJS$USRGO

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  GJS$USRGO

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AUTO_0
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$ROS$
PL6.E3A0      #002=GJS$USRGO File=GJS$STEP.:E05TSI                               TUE 07/29/97 22:11 Page:208  


     1451        1        /*T***********************************************************/
     1452        2        /*T*                                                         */
     1453        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1454        4        /*T*                                                         */
     1455        5        /*T***********************************************************/
     1456        6
     1457        7        /*F*  NAME: GJS$USRGO
     1458        8
     1459        9              PURPOSE: To provide a convenient breakpoint prior to
     1460       10                       entering the user.
     1461       11
     1462       12        */
     1463       13
     1464       14        GJS$USRGO: PROC;

     14   0 000000  D380 0000 0000  xent GJS$USRGO       LNJ,B5   X6A_AUTO_0
          0 000003       0004 0000                       DC       4,0

     1465       15
     1466       16    1      RETURN;

     16   0 000005  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
     1467       17    1   END GJS$USRGO;

PL6.E3A0      #002=GJS$USRGO File=GJS$STEP.:E05TSI                               TUE 07/29/97 22:11 Page:209  
--  Include file information  --

   G_LCP6_E.:E05TOU  was found in the system file and is never referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure GJS$USRGO.
PL6.E3A0      #002=GJS$USRGO File=GJS$STEP.:E05TSI                               TUE 07/29/97 22:11 Page:210  

 **** Variables and constants ****


   Procedure GJS$USRGO requires 8 words for executable code.
   Procedure GJS$USRGO requires 4 words of local(AUTO) storage.

    No errors detected in file GJS$STEP.:E05TSI    .
PL6.E3A0      #002=GJS$USRGO File=GJS$STEP.:E05TSI                               TUE 07/29/97 22:11 Page:211  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=GJS$USRGO File=GJS$STEP.:E05TSI                               TUE 07/29/97 22:11 Page:212  
          MINI XREF LISTING

