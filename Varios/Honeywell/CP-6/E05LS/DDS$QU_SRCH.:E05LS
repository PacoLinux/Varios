VERSION E05

PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:1    
        1        1        /*M* DDS$QU_SRCH Evaluates qualified references for Delta. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*F* NAME: DDS$QUAL_SRCH
        9        9             PURPOSE: To validate the specified qualifier.
       10       10             DESCRIPTION: Searches the internal entry table for the
       11       11             specified qualifier. */
       12       12        /*D* NAME: DDS$QUAL_SRCH
       13       13             CALL: CALL DDS$QUAL_SRCH( QUAL$ ) ALTRET( qualifier not found );
       14       14             INTERFACE: DDS$GETQSCH
       15       15                        DDS$PD_SRCH
       16       16                        DDF$DBG_#
       17       17                        DDF$IE_#
       18       18                        DDF$N_EI
       19       19             ENVIRONMENT: Delta.
       20       20             INPUT: QUAL$ - Pointer to X$PARSE output tree called "QUALIFIER".
       21       21             OUTPUT: Establishes access to the current qualified schema.
       22       22                     S_D.QSCH.OK - Schema established ok flag.
       23       23                     S_D.QSCH.PEDEF# - Primary entdef number.
       24       24                     S_D.QSCH.NPOINTER - Primary entdef name pointer.
       25       25                     S_D.LB# - Logical block number.
       26       26                     S_D.QSCH.NODE - Node associated with primary entdef.
       27       27                     S_D.NODE - S_D.QSCH.NODE
       28       28                     Output on ALTRETURN:
       29       29                     S_D.ERROR - Error code.
       30       30                     S_D.ERR_SYM$ - Pointer to offending symbol.
       31       31             SCRATCH: Local auto.
       32       32             DESCRIPTION: Walks through the internal entrys searching for
       33       33             the specified qualifier. The first level qualifier is done at the
       34       34             ENTDEF level. Each succeeding qualifier is searched for at the
       35       35             current lexical level. As each succeding internal entry is
       36       36             validated, its corresponding logical block entry is found. */
       37       37                                                /**/
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:2    
       38       38        DDS$QUAL_SRCH: PROC( QUAL$ ) ALTRET;
       39       39                                                /**/
       40       40    1   DCL QUAL$ PTR;                          /* Pointer to node input */
       41       41    1   DCL IX SBIN;                            /* Temp for index */
       42       42    1   DCL COUNT SBIN;                         /* Temp for count of qualifiers */
       43       43    1   DCL TSYM$ PTR;                /* Temp for pointing to current qualifier text */
       44       44    1   DCL TEMP$ PTR;                          /* Temp pointer */
       45       45    1   DCL PIETXT CHAR(128);                   /* Remembers last primary ie name */
       46       46    1   DCL TEMP SBIN;                          /* Temp variable */
       47       47    1   DCL TMPLVL SBIN;                        /* Temp for lexical level */
       48       48    1   DCL CLB$ PTR;                      /* Temp for current logical block pointer */
       49       49    1   DCL IEX SBIN;                           /* Current internal entry number */
       50       50    1   DCL IEND SBIN;                          /* Last internal entry number */
       51       51        /*D* IEX, IEND, & TEMP must be SBIN */
       52       52    1   DCL IE$ PTR;                            /* Pointer to current INTERNAL ENTRY */
       53       53    1   DCL QUALX$ PTR;                         /* Son of QUAL$ */
       54       54                                                /**/
       55       55        %INCLUDE DD_ERR_C;                      /* Error code %subs */
       56      452        %INCLUDE XU_MACRO_C;                    /* X$PARSE macros */
       57     3558        %INCLUDE DD_PSUBS_C;                    /* Output nodes %subs */
       58     4033        %INCLUDE DD_SUBS_C;                     /* Common %subs */
       59     4304        %PARSE$OUT (NAME=POB,NSUBLKS=NSB,STCLASS=BASED);
       60     4349        %INCLUDE B$OBJECT_C;                    /* Run unit templates */
       61     7779        %B$DNAME;
       62     7798        %B$EDEF;
       63     7868        %B$LOGBLK;
       64     7899        %B$INTNTRY;
       65     7957        %B$LBNTRY1;
       66     7984        %INCLUDE DD$BASED;                      /* Various based structures */
       67     9287        %TEXT$C;
       68     9292        %INCLUDE XUH_MACRO_C;
       69     9376        %INCLUDE DD_SD_M;                       /* "STATIC DATA" */
       70    10712        %S_D;
       71    12030    1   DCL D_SYMBOLS BIT(1) ALIGNED SYMREF;
       72    12031                                                /**/
       73    12032    1   DCL DDS$PD_SRCH ENTRY(2) ALTRET; /* Validates ENTDEF, returns PRIMARY ENTDEF */
       74    12033    1   DCL DDF$DBG_# ENTRY(2) ALTRET;          /* Gets DEBUG NAMES entry */
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:3    
       75    12034    1   DCL DDF$IE_# ENTRY(2) ALTRET;           /* Gets INTERNAL ENTRYs entry */
       76    12035    1   DCL DDF$N_IE ENTRY(1) ALTRET;           /* Gets next INTERNAL ENTRY */
       77    12036    1   DCL DDS$GETQSCH ENTRY(0) ALTRET;        /* Sets up schema access in S_D */
       78    12037    1   DCL DDS$SET_C2Q ENTRY(0) ALTRET; /* Copies current schema to qualified schema */
       79    12038                                                /**/
       80    12039                                                /* Setup to process "QUALIFIER" node */
       81    12040    1        S_D.QSCH = '0'B;
       82    12041    1        IF ( NOT S_D.SCHEMA ) OR ( NOT D_SYMBOLS )
       83    12042    1        THEN                               /* Can't access schema */
       84    12043    2   NOSCHEMA: DO;
       85    12044    2             S_D.ERROR = E@UERR9;          /* E@UERR9 */
       86    12045    2             ALTRETURN;
       87    12046    2           END;
       88    12047    1        QUALX$ = QUAL$ -> POB.SUBLK$( 0 ); /* QUAL1 */
       89    12048    1        COUNT = QUALX$ -> POB.NSB;         /* Num of qualifiers */
       90    12049    1        TSYM$ = QUALX$ -> POB.SUBLK$( 0 ) -> POB.SUBLK$( 0 ); /* PTR to ENTDEF */
       91    12050    1        CALL DDS$PD_SRCH( TSYM$, TEMP$ ) ALTRET( FOUND1 );
       92    12051    1   NFOUND1:
       93    12052    1        S_D.ERROR = E@UERR10;    /* E@UERR10 - can't find qualifier in schema */
       94    12053    1        S_D.ERROR_SYM$ = TSYM$;
       95    12054    1        ALTRETURN;
       96    12055    1   NFOUND3:
       97    12056    1        S_D.ERROR = E@UERR9;               /* E@UERR9 */
       98    12057    1        ALTRETURN;
       99    12058    1   FOUND1:
      100    12059    1        S_D.QSCH.NODE = S_D.NODE;          /* ENTDEF search sets S_D.NODE */
      101    12060    1        S_D.QSCH.PEDEF# = POFFW( TEMP$, S_D.EDEF$ ) / SIZEW( B$EDEF );
             12060                 /* PRIMARY ENTDEF entry # */
      102    12061    1        S_D.QSCH.NPOINTER = TEMP$ -> B$EDEF.NPOINTER; /* PRI ENTDEF name pointer */
      103    12062    1        CALL DDS$GETQSCH ALTRET( NFOUND3 );
      104    12063    1        CLB$ = S_D.LB$;                    /* A good place to begin */
      105    12064    1        IF COUNT = 1
      106    12065    1        THEN GOTO FOUND_IT;                /* Don't have to search IE table */
      107    12066    1        IF ( S_D.IE$ = ADDR( NIL ) ) OR ( S_D.DBG$ = ADDR( NIL ) )
      108    12067    1        THEN GOTO NFOUND3;                 /* Don't even try */
      109    12068    1        IEX = 0;                           /* Start at the beginning! */
      110    12069    1        IEND = ( S_D.LB1$ -> B$LBNTRY1.INTRYSIZ / SIZEW( B$INTNTRY ) ) - 1;
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:4    
      111    12070                                      /* Pass over the only level 1 procedure block */
      112    12071    1        CLB$ = PINCRW( CLB$, SIZEW( B$LOGBLK ) );
      113    12072    2        DO IX = 2 TO COUNT;
      114    12073                                                /* Get SIMBLE */
      115    12074    2             TSYM$ = QUALX$ -> POB.SUBLK$( IX-1 ) -> POB.SUBLK$( 0 );
      116    12075    3             DO  WHILE ( IEX <= IEND );
      117    12076                                                /* Blip through the INTERNAL ENTRYs */
      118    12077    3                  CALL DDF$IE_#( IEX, IE$ ) ALTRET( NFOUND2 );
      119    12078    3                  TMPLVL = PINCRW( S_D.LB$, SIZEW( B$LOGBLK ) * IE$ -> B$INTNTRY.LBE )
             12078                           -> B$LOGBLK.LEXLVL;
      120    12079    3                  IF TMPLVL = IX
      121    12080    4                  THEN DO;                 /* Level is cool, see if names match */
      122    12081    4                       TEMP = IE$ -> B$INTNTRY.NPOINTER;
      123    12082    4                       CALL DDF$DBG_#( TEMP, TEMP$ ) ALTRET( NFOUND2 );
      124    12083    4                       IF IE$ -> B$INTNTRY.PRI /* Remember PRIMARY if so */
      125    12084    5                       THEN DO;  /* Remember where the first INTERNAL ENTRY is */
      126    12085    5                            PIETXT = TEMP$ -> B$DNAME.TEXT;
      127    12086    5                          END;
      128    12087    4                       IF TEMP$ -> B$DNAME.TEXT = TSYM$ -> TEXT$C.TXT
      129    12088    5                       THEN DO;
             12088                       /* Get LOGICAL BLOCK entry corresponding to PRIMARY INTERNAL ENTRY */
      130    12089    6                            DO WHILE ( CLB$ < S_D.LB_EYOND$ );
      131    12090    6                                 TMPLVL = PINCRW( S_D.LB$, SIZEW( B$LOGBLK ) * IE$ ->
             12090                                          B$INTNTRY.LBE ) -> B$LOGBLK.LEXLVL;
      132    12091    6                                 IF TMPLVL = IX
      133    12092    7                                 THEN DO;
             12092                             /* See if LOGICAL BLOCK name matches PRI INTERNAL ENTRY name */
      134    12093    7                                      TEMP = CLB$ -> B$LOGBLK.NPOINTER;
      135    12094    7                                      IF TEMP >= 0
      136    12095    8                                      THEN DO; /* Name exists */
      137    12096    8                                           CALL DDF$DBG_#( TEMP, TEMP$ ) ALTRET(
             12096                                                    NFOUND2 );
      138    12097    8                                           IF TEMP$ -> B$DNAME.TEXT = PIETXT
      139    12098    8                                           THEN GOTO FOUND3; /* Got it */
      140    12099    8                                         END;
      141    12100    7                                    END;
             12100                             /* See if LOGICAL BLOCK name matches PRI INTERNAL ENTRY name */
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:5    
      142    12101    6                                 ELSE IF TMPLVL < IX
      143    12102    6                                      THEN GOTO NFOUND2; /* Schema is screwed up */
      144    12103    6                                 CLB$ = PINCRW( CLB$, SIZEW( B$LOGBLK ) );
      145    12104    6                               END;   /* "DO WHILE ( CLB$ < S_D.LB_EYOND$ )" */
      146    12105    5   NFOUND2:
      147    12106    5                            S_D.ERROR = E@UERR11; /* E@UERR11 - schema is screwed up */
      148    12107    5                            ALTRETURN;
      149    12108    5                          END;
             12108                       /* Get LOGICAL BLOCK entry corresponding to PRIMARY INTERNAL ENTRY */
      150    12109    4                     END;                  /* Level is cool, see if names match */
      151    12110    3                  ELSE IF TMPLVL < IX
      152    12111    3                       THEN GOTO NFOUND1;
      153    12112    3                  IEX = IEX + 1;
      154    12113    3                END;                       /* "DO WHILE ( IEX <= IEND )" */
      155    12114                                                /* Search unsuccessful */
      156    12115    2             GOTO NFOUND1;
      157    12116    2   FOUND3:
      158    12117    3             DO WHILE ( ( PINCRW( S_D.LB$, SIZEW( B$LOGBLK ) * IE$ -> B$INTNTRY.LBE )
             12117                      -> B$LOGBLK.LEXLVL = IX ) AND ( IEX < IEND ) );
      159    12118    3                  IEX = IEX + 1;
      160    12119    3                  CALL DDF$N_IE( IE$ ) ALTRET( NFOUND2 );
      161    12120    3                END;        /* Passing over INTERNAL ENTRYs at the same level */
      162    12121    2             IF IX ~= COUNT
      163    12122    3             THEN DO;                 /* It's ok to bump LOGICAL BLOCK pointer */
      164    12123    4                  DO WHILE ( ( CLB$ -> B$LOGBLK.LEXLVL = IX ) AND ( CLB$ < S_D.
             12123                           LB_EYOND$ ) );
      165    12124    4                       CLB$ = PINCRW( CLB$, SIZEW( B$LOGBLK ) );
      166    12125    4                     END;   /* Passing over procedure blocks at the same level */
      167    12126    3                END;                       /* It's ok ... */
      168    12127    2           END;                            /* "DO IX = 2 TO COUNT" */
      169    12128    1   FOUND_IT:
      170    12129    1        S_D.QSCH.LB# = POFFW( CLB$, S_D.LB$ ) / SIZEW( B$LOGBLK );
      171    12130    1   FOUND_IT1:
      172    12131    1        S_D.QUALIFIED = '1'B;
      173    12132    1   FOUND_IT2:
      174    12133    1        RETURN;                            /* D o n e   -  r e t u r n */
      175    12134                                                /**/
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:6    
      176    12135    1   END DDS$QUAL_SRCH;
      177    12136        %EOD;

PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:7    
--  Include file information  --

   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   DD_SUBS_C.:E05TOU  is referenced.
   DD_PSUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$QUAL_SRCH.

   Procedure DDS$QUAL_SRCH requires 247 words for executable code.
   Procedure DDS$QUAL_SRCH requires 50 words of local(AUTO) storage.

PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:8    

 Object Unit name= DDS$QUAL_SRCH                              File name= DDS$QU_SRCH.:E05TOU
 UTS= JUL 29 '97 14:20:19.64 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   247    367  DDS$QUAL_SRCH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        1  DDS$QUAL_SRCH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 DDS$PD_SRCH
 yes     yes           Std       0 DDS$GETQSCH
 yes     yes           Std       2 DDF$IE_#
 yes     yes           Std       1 DDF$N_IE
 yes     yes           Std       2 DDF$DBG_#
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:9    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    S_D$                                  D_SYMBOLS                             B_VECTNIL
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:10   


        1        1        /*M* DDS$QU_SRCH Evaluates qualified references for Delta. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*F* NAME: DDS$QUAL_SRCH
        9        9             PURPOSE: To validate the specified qualifier.
       10       10             DESCRIPTION: Searches the internal entry table for the
       11       11             specified qualifier. */
       12       12        /*D* NAME: DDS$QUAL_SRCH
       13       13             CALL: CALL DDS$QUAL_SRCH( QUAL$ ) ALTRET( qualifier not found );
       14       14             INTERFACE: DDS$GETQSCH
       15       15                        DDS$PD_SRCH
       16       16                        DDF$DBG_#
       17       17                        DDF$IE_#
       18       18                        DDF$N_EI
       19       19             ENVIRONMENT: Delta.
       20       20             INPUT: QUAL$ - Pointer to X$PARSE output tree called "QUALIFIER".
       21       21             OUTPUT: Establishes access to the current qualified schema.
       22       22                     S_D.QSCH.OK - Schema established ok flag.
       23       23                     S_D.QSCH.PEDEF# - Primary entdef number.
       24       24                     S_D.QSCH.NPOINTER - Primary entdef name pointer.
       25       25                     S_D.LB# - Logical block number.
       26       26                     S_D.QSCH.NODE - Node associated with primary entdef.
       27       27                     S_D.NODE - S_D.QSCH.NODE
       28       28                     Output on ALTRETURN:
       29       29                     S_D.ERROR - Error code.
       30       30                     S_D.ERR_SYM$ - Pointer to offending symbol.
       31       31             SCRATCH: Local auto.
       32       32             DESCRIPTION: Walks through the internal entrys searching for
       33       33             the specified qualifier. The first level qualifier is done at the
       34       34             ENTDEF level. Each succeeding qualifier is searched for at the
       35       35             current lexical level. As each succeding internal entry is
       36       36             validated, its corresponding logical block entry is found. */
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:11   
       37       37                                                /**/
       38       38        DDS$QUAL_SRCH: PROC( QUAL$ ) ALTRET;

     38  0 000000   000000 700200 xent  DDS$QUAL_SR* TSX0  ! X66_AUTO_1
         0 000001   000062 000001                    ZERO    50,1

       39       39                                                /**/
       40       40    1   DCL QUAL$ PTR;                          /* Pointer to node input */
       41       41    1   DCL IX SBIN;                            /* Temp for index */
       42       42    1   DCL COUNT SBIN;                         /* Temp for count of qualifiers */
       43       43    1   DCL TSYM$ PTR;                /* Temp for pointing to current qualifier text */
       44       44    1   DCL TEMP$ PTR;                          /* Temp pointer */
       45       45    1   DCL PIETXT CHAR(128);                   /* Remembers last primary ie name */
       46       46    1   DCL TEMP SBIN;                          /* Temp variable */
       47       47    1   DCL TMPLVL SBIN;                        /* Temp for lexical level */
       48       48    1   DCL CLB$ PTR;                      /* Temp for current logical block pointer */
       49       49    1   DCL IEX SBIN;                           /* Current internal entry number */
       50       50    1   DCL IEND SBIN;                          /* Last internal entry number */
       51       51        /*D* IEX, IEND, & TEMP must be SBIN */
       52       52    1   DCL IE$ PTR;                            /* Pointer to current INTERNAL ENTRY */
       53       53    1   DCL QUALX$ PTR;                         /* Son of QUAL$ */
       54       54                                                /**/
       55       55        %INCLUDE DD_ERR_C;                      /* Error code %subs */
       56      452        %INCLUDE XU_MACRO_C;                    /* X$PARSE macros */
       57     3558        %INCLUDE DD_PSUBS_C;                    /* Output nodes %subs */
       58     4033        %INCLUDE DD_SUBS_C;                     /* Common %subs */
       59     4304        %PARSE$OUT (NAME=POB,NSUBLKS=NSB,STCLASS=BASED);
       60     4349        %INCLUDE B$OBJECT_C;                    /* Run unit templates */
       61     7779        %B$DNAME;
       62     7798        %B$EDEF;
       63     7868        %B$LOGBLK;
       64     7899        %B$INTNTRY;
       65     7957        %B$LBNTRY1;
       66     7984        %INCLUDE DD$BASED;                      /* Various based structures */
       67     9287        %TEXT$C;
       68     9292        %INCLUDE XUH_MACRO_C;
       69     9376        %INCLUDE DD_SD_M;                       /* "STATIC DATA" */
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:12   
       70    10712        %S_D;
       71    12030    1   DCL D_SYMBOLS BIT(1) ALIGNED SYMREF;
       72    12031                                                /**/
       73    12032    1   DCL DDS$PD_SRCH ENTRY(2) ALTRET; /* Validates ENTDEF, returns PRIMARY ENTDEF */
       74    12033    1   DCL DDF$DBG_# ENTRY(2) ALTRET;          /* Gets DEBUG NAMES entry */
       75    12034    1   DCL DDF$IE_# ENTRY(2) ALTRET;           /* Gets INTERNAL ENTRYs entry */
       76    12035    1   DCL DDF$N_IE ENTRY(1) ALTRET;           /* Gets next INTERNAL ENTRY */
       77    12036    1   DCL DDS$GETQSCH ENTRY(0) ALTRET;        /* Sets up schema access in S_D */
       78    12037    1   DCL DDS$SET_C2Q ENTRY(0) ALTRET; /* Copies current schema to qualified schema */
       79    12038                                                /**/
       80    12039                                                /* Setup to process "QUALIFIER" node */
       81    12040    1        S_D.QSCH = '0'B;

  12040  0 000002   000000 470400 xsym               LDP0    S_D$
         0 000003   000100 100400                    MLR     fill='000'O
         0 000004   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000005   000733 000034                    ADSC9   475,,PR0                 cn=0,n=28

       82    12041    1        IF ( NOT S_D.SCHEMA ) OR ( NOT D_SYMBOLS )

  12041  0 000006   000052 234100                    SZN     42,,PR0
         0 000007   000012 605000 0                  TPL     NOSCHEMA
         0 000010   000000 234000 xsym               SZN     D_SYMBOLS
         0 000011   000015 604000 0                  TMI     s:12047

       83    12042    1        THEN                               /* Can't access schema */
       84    12043    2   NOSCHEMA: DO;

  12043  0 000012                       NOSCHEMA     null
       85    12044    2             S_D.ERROR = E@UERR9;          /* E@UERR9 */

  12044  0 000012   000024 235007                    LDA     20,DL
         0 000013   000013 755100                    STA     11,,PR0

       86    12045    2             ALTRETURN;

  12045  0 000014   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:13   

       87    12046    2           END;
       88    12047    1        QUALX$ = QUAL$ -> POB.SUBLK$( 0 ); /* QUAL1 */

  12047  0 000015   200003 471500                    LDP1    @QUAL$,,AUTO
         0 000016   100000 473500                    LDP3    0,,PR1
         0 000017   300003 236100                    LDQ     3,,PR3
         0 000020   200056 756100                    STQ     QUALX$,,AUTO

       89    12048    1        COUNT = QUALX$ -> POB.NSB;         /* Num of qualifiers */

  12048  0 000021   200056 474500                    LDP4    QUALX$,,AUTO
         0 000022   400001 236100                    LDQ     1,,PR4
         0 000023   000022 772000                    QRL     18
         0 000024   200005 756100                    STQ     COUNT,,AUTO

       90    12049    1        TSYM$ = QUALX$ -> POB.SUBLK$( 0 ) -> POB.SUBLK$( 0 ); /* PTR to ENTDEF */

  12049  0 000025   400003 475500                    LDP5    3,,PR4
         0 000026   500003 236100                    LDQ     3,,PR5
         0 000027   200006 756100                    STQ     TSYM$,,AUTO

       91    12050    1        CALL DDS$PD_SRCH( TSYM$, TEMP$ ) ALTRET( FOUND1 );

  12050  0 000030   200007 633500                    EPPR3   TEMP$,,AUTO
         0 000031   200061 453500                    STP3    QUALX$+3,,AUTO
         0 000032   200006 635500                    EPPR5   TSYM$,,AUTO
         0 000033   200060 455500                    STP5    QUALX$+2,,AUTO
         0 000034   200060 630500                    EPPR0   QUALX$+2,,AUTO
         0 000035   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000036   000000 701000 xent               TSX1    DDS$PD_SRCH
         0 000037   000052 702000 0                  TSX2    FOUND1

       92    12051    1   NFOUND1:
       93    12052    1        S_D.ERROR = E@UERR10;    /* E@UERR10 - can't find qualifier in schema */

  12052  0 000040   000025 235007       NFOUND1      LDA     21,DL
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:14   
         0 000041   000000 470400 xsym               LDP0    S_D$
         0 000042   000013 755100                    STA     11,,PR0

       94    12053    1        S_D.ERROR_SYM$ = TSYM$;

  12053  0 000043   200006 236100                    LDQ     TSYM$,,AUTO
         0 000044   000032 756100                    STQ     26,,PR0

       95    12054    1        ALTRETURN;

  12054  0 000045   000000 702200 xent               TSX2  ! X66_AALT

       96    12055    1   NFOUND3:
       97    12056    1        S_D.ERROR = E@UERR9;               /* E@UERR9 */

  12056  0 000046   000024 235007       NFOUND3      LDA     20,DL
         0 000047   000000 470400 xsym               LDP0    S_D$
         0 000050   000013 755100                    STA     11,,PR0

       98    12057    1        ALTRETURN;

  12057  0 000051   000000 702200 xent               TSX2  ! X66_AALT

       99    12058    1   FOUND1:
      100    12059    1        S_D.QSCH.NODE = S_D.NODE;          /* ENTDEF search sets S_D.NODE */

  12059  0 000052   000000 470400 xsym  FOUND1       LDP0    S_D$
         0 000053   004706 235100                    LDA     2502,,PR0
         0 000054   000735 755100                    STA     477,,PR0

      101    12060    1        S_D.QSCH.PEDEF# = POFFW( TEMP$, S_D.EDEF$ ) / SIZEW( B$EDEF );
             12060                 /* PRIMARY ENTDEF entry # */

  12060  0 000055   001042 236100                    LDQ     546,,PR0
         0 000056   000022 772000                    QRL     18
         0 000057   200060 756100                    STQ     QUALX$+2,,AUTO
         0 000060   200007 236100                    LDQ     TEMP$,,AUTO
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:15   
         0 000061   000022 772000                    QRL     18
         0 000062   200060 136100                    SBLQ    QUALX$+2,,AUTO
         0 000063   000002 506007                    DIV     2,DL
         0 000064   000734 756100                    STQ     476,,PR0

      102    12061    1        S_D.QSCH.NPOINTER = TEMP$ -> B$EDEF.NPOINTER; /* PRI ENTDEF name pointer */

  12061  0 000065   200007 471500                    LDP1    TEMP$,,AUTO
         0 000066   100001 236100                    LDQ     1,,PR1
         0 000067   000022 732000                    QRS     18
         0 000070   000736 756100                    STQ     478,,PR0

      103    12062    1        CALL DDS$GETQSCH ALTRET( NFOUND3 );

  12062  0 000071   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000072   000000 701000 xent               TSX1    DDS$GETQSCH
         0 000073   000046 702000 0                  TSX2    NFOUND3

      104    12063    1        CLB$ = S_D.LB$;                    /* A good place to begin */

  12063  0 000074   000000 470400 xsym               LDP0    S_D$
         0 000075   001037 236100                    LDQ     543,,PR0
         0 000076   200052 756100                    STQ     CLB$,,AUTO

      105    12064    1        IF COUNT = 1

  12064  0 000077   200005 235100                    LDA     COUNT,,AUTO
         0 000100   000001 115007                    CMPA    1,DL
         0 000101   000353 600000 0                  TZE     FOUND_IT

      106    12065    1        THEN GOTO FOUND_IT;                /* Don't have to search IE table */
      107    12066    1        IF ( S_D.IE$ = ADDR( NIL ) ) OR ( S_D.DBG$ = ADDR( NIL ) )

  12066  0 000102   001013 236100                    LDQ     523,,PR0
         0 000103   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000104   000046 600000 0                  TZE     NFOUND3
         0 000105   001005 236100                    LDQ     517,,PR0
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:16   
         0 000106   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000107   000046 600000 0                  TZE     NFOUND3

      108    12067    1        THEN GOTO NFOUND3;                 /* Don't even try */
      109    12068    1        IEX = 0;                           /* Start at the beginning! */

  12068  0 000110   200053 450100                    STZ     IEX,,AUTO

      110    12069    1        IEND = ( S_D.LB1$ -> B$LBNTRY1.INTRYSIZ / SIZEW( B$INTNTRY ) ) - 1;

  12069  0 000111   001036 471500                    LDP1    542,,PR0
         0 000112   100003 236100                    LDQ     3,,PR1
         0 000113   000022 772000                    QRL     18
         0 000114   000001 772000                    QRL     1
         0 000115   000001 136007                    SBLQ    1,DL
         0 000116   200054 756100                    STQ     IEND,,AUTO

      111    12070                                      /* Pass over the only level 1 procedure block */
      112    12071    1        CLB$ = PINCRW( CLB$, SIZEW( B$LOGBLK ) );

  12071  0 000117   200052 236100                    LDQ     CLB$,,AUTO
         0 000120   000004 036003                    ADLQ    4,DU
         0 000121   200052 756100                    STQ     CLB$,,AUTO

      113    12072    2        DO IX = 2 TO COUNT;

  12072  0 000122   000002 235007                    LDA     2,DL
         0 000123   200004 755100                    STA     IX,,AUTO
         0 000124   000350 710000 0                  TRA     s:12127+1

      114    12073                                                /* Get SIMBLE */
      115    12074    2             TSYM$ = QUALX$ -> POB.SUBLK$( IX-1 ) -> POB.SUBLK$( 0 );

  12074  0 000125   200056 470500                    LDP0    QUALX$,,AUTO
         0 000126   200004 720100                    LXL0    IX,,AUTO
         0 000127   000002 471510                    LDP1    2,X0,PR0
         0 000130   100003 236100                    LDQ     3,,PR1
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:17   
         0 000131   200006 756100                    STQ     TSYM$,,AUTO

      116    12075    3             DO  WHILE ( IEX <= IEND );

  12075  0 000132   200053 236100                    LDQ     IEX,,AUTO
         0 000133   200054 116100                    CMPQ    IEND,,AUTO
         0 000134   000301 605400 0                  TPNZ    s:12115

      117    12076                                                /* Blip through the INTERNAL ENTRYs */
      118    12077    3                  CALL DDF$IE_#( IEX, IE$ ) ALTRET( NFOUND2 );

  12077  0 000135   200055 630500                    EPPR0   IE$,,AUTO
         0 000136   200061 450500                    STP0    QUALX$+3,,AUTO
         0 000137   200053 631500                    EPPR1   IEX,,AUTO
         0 000140   200060 451500                    STP1    QUALX$+2,,AUTO
         0 000141   200060 630500                    EPPR0   QUALX$+2,,AUTO
         0 000142   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000143   000000 701000 xent               TSX1    DDF$IE_#
         0 000144   000270 702000 0                  TSX2    NFOUND2

      119    12078    3                  TMPLVL = PINCRW( S_D.LB$, SIZEW( B$LOGBLK ) * IE$ -> B$INTNTRY.LBE )
             12078                           -> B$LOGBLK.LEXLVL;

  12078  0 000145   200055 470500                    LDP0    IE$,,AUTO
         0 000146   000000 236100                    LDQ     0,,PR0
         0 000147   000033 772000                    QRL     27
         0 000150   000000 471400 xsym               LDP1    S_D$
         0 000151   101037 473500                    LDP3    543,,PR1
         0 000152   000002 736000                    QLS     2
         0 000153   300001 236106                    LDQ     1,QL,PR3
         0 000154   000777 376007                    ANQ     511,DL
         0 000155   200051 756100                    STQ     TMPLVL,,AUTO

      120    12079    3                  IF TMPLVL = IX

  12079  0 000156   200004 116100                    CMPQ    IX,,AUTO
         0 000157   000274 601000 0                  TNZ     s:12110
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:18   

      121    12080    4                  THEN DO;                 /* Level is cool, see if names match */

      122    12081    4                       TEMP = IE$ -> B$INTNTRY.NPOINTER;

  12081  0 000160   000001 236100                    LDQ     1,,PR0
         0 000161   000022 732000                    QRS     18
         0 000162   200050 756100                    STQ     TEMP,,AUTO

      123    12082    4                       CALL DDF$DBG_#( TEMP, TEMP$ ) ALTRET( NFOUND2 );

  12082  0 000163   200007 634500                    EPPR4   TEMP$,,AUTO
         0 000164   200061 454500                    STP4    QUALX$+3,,AUTO
         0 000165   200050 635500                    EPPR5   TEMP,,AUTO
         0 000166   200060 455500                    STP5    QUALX$+2,,AUTO
         0 000167   200060 630500                    EPPR0   QUALX$+2,,AUTO
         0 000170   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000171   000000 701000 xent               TSX1    DDF$DBG_#
         0 000172   000270 702000 0                  TSX2    NFOUND2

      124    12083    4                       IF IE$ -> B$INTNTRY.PRI /* Remember PRIMARY if so */

  12083  0 000173   200055 470500                    LDP0    IE$,,AUTO
         0 000174   000001 236100                    LDQ     1,,PR0
         0 000175   400000 316007                    CANQ    -131072,DL
         0 000176   000204 600000 0                  TZE     s:12087

      125    12084    5                       THEN DO;  /* Remember where the first INTERNAL ENTRY is */

      126    12085    5                            PIETXT = TEMP$ -> B$DNAME.TEXT;

  12085  0 000177   200007 471500                    LDP1    TEMP$,,AUTO
         0 000200   100000 220100                    LDX0    0,,PR1
         0 000201   040100 100540                    MLR     fill='040'O
         0 000202   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0
         0 000203   200010 000200                    ADSC9   PIETXT,,AUTO             cn=0,n=128

PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:19   
      127    12086    5                          END;

      128    12087    4                       IF TEMP$ -> B$DNAME.TEXT = TSYM$ -> TEXT$C.TXT

  12087  0 000204   200007 471500                    LDP1    TEMP$,,AUTO
         0 000205   100000 220100                    LDX0    0,,PR1
         0 000206   200006 473500                    LDP3    TSYM$,,AUTO
         0 000207   300000 236100                    LDQ     0,,PR3
         0 000210   000033 772000                    QRL     27
         0 000211   000000 621006                    EAX1    0,QL
         0 000212   040140 106540                    CMPC    fill='040'O
         0 000213   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0
         0 000214   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         0 000215   000275 601000 0                  TNZ     s:12112

      129    12088    5                       THEN DO;
             12088                      /* Get LOGICAL BLOCK entry corresponding to PRIMARY INTERNAL ENTRY */

      130    12089    6                            DO WHILE ( CLB$ < S_D.LB_EYOND$ );

  12089  0 000216   000000 474400 xsym               LDP4    S_D$
         0 000217   200052 236100                    LDQ     CLB$,,AUTO
         0 000220   401040 116100                    CMPQ    544,,PR4
         0 000221   000270 603000 0                  TRC     NFOUND2

      131    12090    6                                 TMPLVL = PINCRW( S_D.LB$, SIZEW( B$LOGBLK ) * IE$ ->
             12090                                          B$INTNTRY.LBE ) -> B$LOGBLK.LEXLVL;

  12090  0 000222   200055 470500                    LDP0    IE$,,AUTO
         0 000223   000000 236100                    LDQ     0,,PR0
         0 000224   000033 772000                    QRL     27
         0 000225   000000 471400 xsym               LDP1    S_D$
         0 000226   101037 473500                    LDP3    543,,PR1
         0 000227   000002 736000                    QLS     2
         0 000230   300001 236106                    LDQ     1,QL,PR3
         0 000231   000777 376007                    ANQ     511,DL
         0 000232   200051 756100                    STQ     TMPLVL,,AUTO
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:20   

      132    12091    6                                 IF TMPLVL = IX

  12091  0 000233   200004 116100                    CMPQ    IX,,AUTO
         0 000234   000261 601000 0                  TNZ     s:12101

      133    12092    7                                 THEN DO;
             12092                            /* See if LOGICAL BLOCK name matches PRI INTERNAL ENTRY name */

      134    12093    7                                      TEMP = CLB$ -> B$LOGBLK.NPOINTER;

  12093  0 000235   200052 474500                    LDP4    CLB$,,AUTO
         0 000236   400001 236100                    LDQ     1,,PR4
         0 000237   000022 732000                    QRS     18
         0 000240   200050 756100                    STQ     TEMP,,AUTO

      135    12094    7                                      IF TEMP >= 0

  12094  0 000241   000262 604000 0                  TMI     s:12103

      136    12095    8                                      THEN DO; /* Name exists */

      137    12096    8                                           CALL DDF$DBG_#( TEMP, TEMP$ ) ALTRET(
             12096                                                    NFOUND2 );

  12096  0 000242   200007 635500                    EPPR5   TEMP$,,AUTO
         0 000243   200061 455500                    STP5    QUALX$+3,,AUTO
         0 000244   200050 636500                    EPPR6   TEMP,,AUTO
         0 000245   200060 456500                    STP6    QUALX$+2,,AUTO
         0 000246   200060 630500                    EPPR0   QUALX$+2,,AUTO
         0 000247   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000250   000000 701000 xent               TSX1    DDF$DBG_#
         0 000251   000270 702000 0                  TSX2    NFOUND2

      138    12097    8                                           IF TEMP$ -> B$DNAME.TEXT = PIETXT

  12097  0 000252   200007 470500                    LDP0    TEMP$,,AUTO
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:21   
         0 000253   000000 220100                    LDX0    0,,PR0
         0 000254   040100 106540                    CMPC    fill='040'O
         0 000255   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         0 000256   200010 000200                    ADSC9   PIETXT,,AUTO             cn=0,n=128
         0 000257   000302 600000 0                  TZE     FOUND3

      139    12098    8                                           THEN GOTO FOUND3; /* Got it */
      140    12099    8                                         END;

      141    12100    7                                    END;
             12100                            /* See if LOGICAL BLOCK name matches PRI INTERNAL ENTRY name */

  12100  0 000260   000262 710000 0                  TRA     s:12103

      142    12101    6                                 ELSE IF TMPLVL < IX

  12101  0 000261   000270 604000 0                  TMI     NFOUND2

      143    12102    6                                      THEN GOTO NFOUND2; /* Schema is screwed up */
      144    12103    6                                 CLB$ = PINCRW( CLB$, SIZEW( B$LOGBLK ) );

  12103  0 000262   200052 236100                    LDQ     CLB$,,AUTO
         0 000263   000004 036003                    ADLQ    4,DU
         0 000264   200052 756100                    STQ     CLB$,,AUTO

      145    12104    6                               END;   /* "DO WHILE ( CLB$ < S_D.LB_EYOND$ )" */

  12104  0 000265   000000 470400 xsym               LDP0    S_D$
         0 000266   001040 116100                    CMPQ    544,,PR0
         0 000267   000222 602000 0                  TNC     s:12090

      146    12105    5   NFOUND2:
      147    12106    5                           S_D.ERROR = E@UERR11; /* E@UERR11 - schema is screwed up */

  12106  0 000270   000026 235007       NFOUND2      LDA     22,DL
         0 000271   000000 470400 xsym               LDP0    S_D$
         0 000272   000013 755100                    STA     11,,PR0
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:22   

      148    12107    5                            ALTRETURN;

  12107  0 000273   000000 702200 xent               TSX2  ! X66_AALT

      149    12108    5                          END;
             12108                      /* Get LOGICAL BLOCK entry corresponding to PRIMARY INTERNAL ENTRY */
      150    12109    4                     END;                  /* Level is cool, see if names match */
      151    12110    3                  ELSE IF TMPLVL < IX

  12110  0 000274   000040 604000 0                  TMI     NFOUND1

      152    12111    3                       THEN GOTO NFOUND1;
      153    12112    3                  IEX = IEX + 1;

  12112  0 000275   200053 054100                    AOS     IEX,,AUTO

      154    12113    3                END;                       /* "DO WHILE ( IEX <= IEND )" */

  12113  0 000276   200053 236100                    LDQ     IEX,,AUTO
         0 000277   200054 116100                    CMPQ    IEND,,AUTO
         0 000300   000135 604400 0                  TMOZ    s:12077

      155    12114                                                /* Search unsuccessful */
      156    12115    2             GOTO NFOUND1;

  12115  0 000301   000040 710000 0                  TRA     NFOUND1

      157    12116    2   FOUND3:
      158    12117    3             DO WHILE ( ( PINCRW( S_D.LB$, SIZEW( B$LOGBLK ) * IE$ -> B$INTNTRY.LBE )
             12117                      -> B$LOGBLK.LEXLVL = IX ) AND ( IEX < IEND ) );

  12117  0 000302   000312 710000 0     FOUND3       TRA     s:12120

      159    12118    3                  IEX = IEX + 1;

  12118  0 000303   200053 054100                    AOS     IEX,,AUTO
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:23   

      160    12119    3                  CALL DDF$N_IE( IE$ ) ALTRET( NFOUND2 );

  12119  0 000304   200055 630500                    EPPR0   IE$,,AUTO
         0 000305   200060 450500                    STP0    QUALX$+2,,AUTO
         0 000306   200060 630500                    EPPR0   QUALX$+2,,AUTO
         0 000307   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000310   000000 701000 xent               TSX1    DDF$N_IE
         0 000311   000270 702000 0                  TSX2    NFOUND2

      161    12120    3                END;        /* Passing over INTERNAL ENTRYs at the same level */

  12120  0 000312   200055 470500                    LDP0    IE$,,AUTO
         0 000313   000000 236100                    LDQ     0,,PR0
         0 000314   000033 772000                    QRL     27
         0 000315   000000 471400 xsym               LDP1    S_D$
         0 000316   101037 473500                    LDP3    543,,PR1
         0 000317   000002 736000                    QLS     2
         0 000320   300001 236106                    LDQ     1,QL,PR3
         0 000321   000777 376007                    ANQ     511,DL
         0 000322   200004 116100                    CMPQ    IX,,AUTO
         0 000323   000327 601000 0                  TNZ     s:12121
         0 000324   200053 236100                    LDQ     IEX,,AUTO
         0 000325   200054 116100                    CMPQ    IEND,,AUTO
         0 000326   000303 604000 0                  TMI     s:12118

      162    12121    2             IF IX ~= COUNT

  12121  0 000327   200004 236100                    LDQ     IX,,AUTO
         0 000330   200005 116100                    CMPQ    COUNT,,AUTO
         0 000331   000347 600000 0                  TZE     s:12127

      163    12122    3             THEN DO;                 /* It's ok to bump LOGICAL BLOCK pointer */

      164    12123    4                  DO WHILE ( ( CLB$ -> B$LOGBLK.LEXLVL = IX ) AND ( CLB$ < S_D.
             12123                           LB_EYOND$ ) );

PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:24   
  12123  0 000332   000336 710000 0                  TRA     s:12125

      165    12124    4                       CLB$ = PINCRW( CLB$, SIZEW( B$LOGBLK ) );

  12124  0 000333   200052 236100                    LDQ     CLB$,,AUTO
         0 000334   000004 036003                    ADLQ    4,DU
         0 000335   200052 756100                    STQ     CLB$,,AUTO

      166    12125    4                     END;   /* Passing over procedure blocks at the same level */

  12125  0 000336   200052 470500                    LDP0    CLB$,,AUTO
         0 000337   000001 236100                    LDQ     1,,PR0
         0 000340   000777 376007                    ANQ     511,DL
         0 000341   200004 116100                    CMPQ    IX,,AUTO
         0 000342   000347 601000 0                  TNZ     s:12127
         0 000343   000000 471400 xsym               LDP1    S_D$
         0 000344   200052 236100                    LDQ     CLB$,,AUTO
         0 000345   101040 116100                    CMPQ    544,,PR1
         0 000346   000333 602000 0                  TNC     s:12124

      167    12126    3                END;                       /* It's ok ... */

      168    12127    2           END;                            /* "DO IX = 2 TO COUNT" */

  12127  0 000347   200004 054100                    AOS     IX,,AUTO
         0 000350   200004 236100                    LDQ     IX,,AUTO
         0 000351   200005 116100                    CMPQ    COUNT,,AUTO
         0 000352   000125 604400 0                  TMOZ    s:12074

      169    12128    1   FOUND_IT:
      170    12129    1        S_D.QSCH.LB# = POFFW( CLB$, S_D.LB$ ) / SIZEW( B$LOGBLK );

  12129  0 000353   000000 470400 xsym  FOUND_IT     LDP0    S_D$
         0 000354   001037 236100                    LDQ     543,,PR0
         0 000355   000022 772000                    QRL     18
         0 000356   200060 756100                    STQ     QUALX$+2,,AUTO
         0 000357   200052 236100                    LDQ     CLB$,,AUTO
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:25   
         0 000360   000022 772000                    QRL     18
         0 000361   200060 136100                    SBLQ    QUALX$+2,,AUTO
         0 000362   000004 506007                    DIV     4,DL
         0 000363   000740 756100                    STQ     480,,PR0

      171    12130    1   FOUND_IT1:
      172    12131    1        S_D.QUALIFIED = '1'B;

  12131  0 000364   400000 236003       FOUND_IT1    LDQ     -131072,DU
         0 000365   000712 756100                    STQ     458,,PR0

      173    12132    1   FOUND_IT2:
      174    12133    1        RETURN;                            /* D o n e   -  r e t u r n */

  12133  0 000366   000000 702200 xent  FOUND_IT2    TSX2  ! X66_ARET
      175    12134                                                /**/
      176    12135    1   END DDS$QUAL_SRCH;
      177    12136        %EOD;

PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:26   
--  Include file information  --

   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   DD_SUBS_C.:E05TOU  is referenced.
   DD_PSUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$QUAL_SRCH.

   Procedure DDS$QUAL_SRCH requires 247 words for executable code.
   Procedure DDS$QUAL_SRCH requires 50 words of local(AUTO) storage.
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:27   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:28   
          MINI XREF LISTING

B$DNAME.COUNT
      7788**DCL      7795--IMP-SIZ 12085>>ASSIGN  12087>>IF      12097>>IF
B$DNAME.TEXT
      7795**DCL     12085>>ASSIGN  12087>>IF      12097>>IF
B$EDEF
      7799**DCL     12060--ASSIGN
B$EDEF.NPOINTER
      7824**DCL     12061>>ASSIGN
B$EDEF.OU
      7816**DCL      7822--REDEF
B$INTNTRY
      7900**DCL     12069--ASSIGN
B$INTNTRY.LBE
      7901**DCL     12078>>ASSIGN  12090>>ASSIGN  12117>>DOWHILE
B$INTNTRY.NPOINTER
      7914**DCL     12081>>ASSIGN
B$INTNTRY.OU
      7904**DCL      7911--REDEF
B$INTNTRY.PRI
      7917**DCL     12083>>IF
B$LBNTRY1.INTRYSIZ
      7977**DCL     12069>>ASSIGN
B$LOGBLK
      7869**DCL     12071--ASSIGN  12078--ASSIGN  12090--ASSIGN  12103--ASSIGN  12117--DOWHILE 12124--ASSIGN
     12129--ASSIGN
B$LOGBLK.LEXLVL
      7880**DCL     12078>>ASSIGN  12090>>ASSIGN  12117>>DOWHILE 12123>>DOWHILE
B$LOGBLK.NPOINTER
      7875**DCL     12093>>ASSIGN
CLB$
        48**DCL     12063<<ASSIGN  12071<<ASSIGN  12071>>ASSIGN  12089>>DOWHILE 12093>>ASSIGN  12103<<ASSIGN
     12103>>ASSIGN  12123>>DOWHILE 12123>>DOWHILE 12124<<ASSIGN  12124>>ASSIGN  12129>>ASSIGN
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:29   
COUNT
        42**DCL     12048<<ASSIGN  12064>>IF      12072>>DOINDEX 12121>>IF
DDF$DBG_#
     12033**DCL-ENT 12082--CALL    12096--CALL
DDF$IE_#
     12034**DCL-ENT 12077--CALL
DDF$N_IE
     12035**DCL-ENT 12119--CALL
DDS$GETQSCH
     12036**DCL-ENT 12062--CALL
DDS$PD_SRCH
     12032**DCL-ENT 12050--CALL
D_SYMBOLS
     12030**DCL     12041>>IF
FOUND1
     12059**LABEL   12050--CALLALT
FOUND3
     12117**LABEL   12098--GOTO
FOUND_IT
     12129**LABEL   12065--GOTO
IE$
        52**DCL     12077<>CALL    12078>>ASSIGN  12081>>ASSIGN  12083>>IF      12090>>ASSIGN  12117>>DOWHILE
     12119<>CALL
IEND
        50**DCL     12069<<ASSIGN  12075>>DOWHILE 12117>>DOWHILE
IEX
        49**DCL     12068<<ASSIGN  12075>>DOWHILE 12077<>CALL    12112<<ASSIGN  12112>>ASSIGN  12117>>DOWHILE
     12118<<ASSIGN  12118>>ASSIGN
IX
        41**DCL     12072<<DOINDEX 12074>>ASSIGN  12079>>IF      12091>>IF      12101>>IF      12110>>IF
     12117>>DOWHILE 12121>>IF      12123>>DOWHILE
NFOUND1
     12052**LABEL   12111--GOTO    12115--GOTO
NFOUND2
     12106**LABEL   12077--CALLALT 12082--CALLALT 12096--CALLALT 12102--GOTO    12119--CALLALT
NFOUND3
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:30   
     12056**LABEL   12062--CALLALT 12067--GOTO
PIETXT
        45**DCL     12085<<ASSIGN  12097>>IF
POB.NSB
      4322**DCL     12048>>ASSIGN
POB.SUBLK$
      4343**DCL     12047>>ASSIGN  12049>>ASSIGN  12049>>ASSIGN  12074>>ASSIGN  12074>>ASSIGN
QUAL$
        40**DCL        38--PROC    12047>>ASSIGN
QUALX$
        53**DCL     12047<<ASSIGN  12048>>ASSIGN  12049>>ASSIGN  12074>>ASSIGN
S_D.CURRENT_CHANNEL
     11664**DCL     11666--REDEF
S_D.DBG$
     11114**DCL     12066>>IF
S_D.DEBUGA
     10816**DCL     10818--REDEF
S_D.EDEF$
     11160**DCL     12060>>ASSIGN
S_D.EIS
     11774**DCL     11803--REDEF
S_D.ERROR
     10745**DCL     12044<<ASSIGN  12052<<ASSIGN  12056<<ASSIGN  12106<<ASSIGN
S_D.ERROR_SYM$
     10769**DCL     12053<<ASSIGN
S_D.HOST_MESSAGE_BUF_REMOTE
     11707**DCL     11708--REDEF   11722--REDEF
S_D.IE$
     11126**DCL     12066>>IF
S_D.JDE
     11321**DCL     11322--REDEF
S_D.L$.VALUE
     10874**DCL     10880--REDEF   10888--REDEF   10891--REDEF   10894--REDEF   10897--REDEF
S_D.L$.VALUE.L
     10875**DCL     10876--REDEF   10877--REDEF
S_D.L6_MESSAGE_BUF
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:31   
     11728**DCL     11730--REDEF
S_D.LB$
     11154**DCL     12063>>ASSIGN  12078>>ASSIGN  12090>>ASSIGN  12117>>DOWHILE 12129>>ASSIGN
S_D.LB1$
     11152**DCL     12069>>ASSIGN
S_D.LB_EYOND$
     11156**DCL     12089>>DOWHILE 12123>>DOWHILE
S_D.NODE
     11273**DCL     12059>>ASSIGN
S_D.OUTPUT
     11694**DCL     11696--REDEF
S_D.QSCH
     11018**DCL     12040<<ASSIGN
S_D.QSCH.LB#
     11030**DCL     12129<<ASSIGN
S_D.QSCH.NODE
     11024**DCL     12059<<ASSIGN
S_D.QSCH.NPOINTER
     11026**DCL     12061<<ASSIGN
S_D.QSCH.PEDEF#
     11022**DCL     12060<<ASSIGN
S_D.QUALIFIED
     10983**DCL     12131<<ASSIGN
S_D.REMOTE_MSG.FNCC
     11713**DCL     11714--REDEF
S_D.REMOTE_MSG.STXC
     11709**DCL     11710--REDEF
S_D.REMOTE_MSG.SUBFNCC
     11717**DCL     11718--REDEF
S_D.SCHEMA
     10814**DCL     12041>>IF
S_D.SV
     10773**DCL     10794--REDEF
S_D$
     12025**DCL     10721--IMP-PTR 12040>>ASSIGN  12041>>IF      12044>>ASSIGN  12052>>ASSIGN  12053>>ASSIGN
     12056>>ASSIGN  12059>>ASSIGN  12059>>ASSIGN  12060>>ASSIGN  12060>>ASSIGN  12061>>ASSIGN  12063>>ASSIGN
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:32   
     12066>>IF      12066>>IF      12069>>ASSIGN  12078>>ASSIGN  12089>>DOWHILE 12090>>ASSIGN  12106>>ASSIGN
     12117>>DOWHILE 12123>>DOWHILE 12129>>ASSIGN  12129>>ASSIGN  12131>>ASSIGN
TEMP
        46**DCL     12081<<ASSIGN  12082<>CALL    12093<<ASSIGN  12094>>IF      12096<>CALL
TEMP$
        44**DCL     12050<>CALL    12060>>ASSIGN  12061>>ASSIGN  12082<>CALL    12085>>ASSIGN  12085>>ASSIGN
     12087>>IF      12087>>IF      12096<>CALL    12097>>IF      12097>>IF
TEXT$C.SIZE
      9289**DCL      9290--IMP-SIZ 12087>>IF
TEXT$C.TXT
      9290**DCL     12087>>IF
TMPLVL
        47**DCL     12078<<ASSIGN  12079>>IF      12090<<ASSIGN  12091>>IF      12101>>IF      12110>>IF
TSYM$
        43**DCL     12049<<ASSIGN  12050<>CALL    12053>>ASSIGN  12074<<ASSIGN  12087>>IF      12087>>IF
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:33   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$QUAL_SRCH File=DDS$QU_SRCH.:E05TSI                        TUE 07/29/97 14:20 Page:34   
              MINI UREF LISTING

DDS$QUAL_SRCH      38**PROC
DDS$SET_C2Q   12037**DCL-ENT
FOUND_IT1   12131**LABEL
FOUND_IT2   12133**LABEL
NOSCHEMA   12043**LABEL

PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:35   
      178        1        /*T***********************************************************/
      179        2        /*T*                                                         */
      180        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      181        4        /*T*                                                         */
      182        5        /*T***********************************************************/
      183        6        /*F* NAME: DDS$ES_INQ
      184        7             PURPOSE: To establish current schema.
      185        8             DESCRIPTION: Given a value in the ISR (IC), finds the associated
      186        9             PRIMARY ENTDEF, and then sets up those cells in static data area
      187       10             that establish the qualified schema. */
      188       11        /*D* NAME: DDS$ES_INQ
      189       12             CALL: CALL DDS$ES_INQ( IC ) ALTRET( cant do );
      190       13             INTERFACE: DDF$FIND_PEDEF
      191       14                        DDF$EXST_#
      192       15                        DDF$N_EXST
      193       16             ENVIRONMENT: Delta.
      194       17             INPUT: IC - IS address where to establish schema.
      195       18             OUTPUT: Establishes access to the qualified schema.
      196       19                     S_D.QSCH.OK - Schema established ok flag.
      197       20                     S_D.QSCH.PEDEF# - Primary entdef number.
      198       21                     S_D.QSCH.NPOINTER - Primary entdef name pointer.
      199       22                     S_D.QSCH.IC - IC input.
      200       23                     S_D.QSCH.LB# - Logical block number.
      201       24                     S_D.QSCH.NODE - Node associated with primary entdef.
      202       25                     S_D.NODE - S_D.QSCH.NODE
      203       26             SCRATCH: Local auto only.
      204       27             DESCRIPTION: Given a value in the ISR (IC), finds the associated
      205       28             PRIMARY ENTDEF, and then sets up those cells in static data area
      206       29             that establish the qualified schema. */
      207       30                                                /**/
      208       31        DDS$ES_INQ: PROC( IC ) ALTRET;
      209       32                                                /**/
      210       33    1   DCL IC UBIN;                            /* IS address input */
      211       34    1   DCL ENTRY$ PTR;                         /* PEDEF pointer */
      212       35    1   DCL TEMP UBIN;
      213       36    1   DCL IX SBIN;
      214       37    1   DCL EXSTEND SBIN;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:36   
      215       38        /*D* IX & EXSTEND must be SBIN */
      216       39    1   DCL EXST$ PTR;
      217       40    1   DCL TIC UBIN;
      218       41    1   DCL ST# UBIN;
      219       42        %INCLUDE DD_SUBS_C;                     /* Common %subs */
      220      313        %INCLUDE DD_ERR_C;
      221      710        %INCLUDE DD$BASED;
      222     2013        %FPRG$CONTEXT;
      223     2076        %INCLUDE B$OBJECT_C;                    /* Object language stuff */
      224     5506        %B$EDEF;
      225     5576        %COMPILERIDSUBS;
      226     5592        %B$LBNTRY0;
      227     5628        %B$LBNTRY1;
      228     5655        %B$EXST (STCLASS="BASED(EXST$)");
      229     5762        %INCLUDE XUH_MACRO_C;
      230     5846        %INCLUDE DD_SD_M;
      231     7182        %S_D;
      232     8500    1   DCL D_SYMBOLS BIT(1) ALIGNED SYMREF;
      233     8501                                                /**/
      234     8502    1   DCL DDE$ERROR ENTRY(0);
      235     8503    1   DCL DDF$FIND_PEDEF ENTRY(2) ALTRET;
      236     8504    1   DCL DDF$EXST_# ENTRY(2) ALTRET;
      237     8505    1   DCL DDF$N_EXST ENTRY(1) ALTRET;
      238     8506    1   DCL DDS$GETQSCH ENTRY(0) ALTRET;
      239     8507                                                /**/
      240     8508    1        IF NOT D_SYMBOLS
      241     8509    1        THEN GOTO NFOUND2;
      242     8510    1        TIC = IC;
      243     8511    1        IF  ( S_D.QSCH.OK )
      244     8512    1          AND ( S_D.QSCH.IC = TIC )
      245     8513    1          AND ( S_D.QSCH.NODE = S_D.NODE )
      246     8514    1        THEN RETURN;                       /* It's already there */
      247     8515    1        CALL DDF$FIND_PEDEF( TIC, ENTRY$ ) ALTRET( NFOUND2 );
      248     8516    1        IX = POFFW( ENTRY$, S_D.EDEF$ ) / SIZEW( B$EDEF );
      249     8517    1        IF  ( S_D.QSCH.OK )
      250     8518    1          AND ( S_D.QSCH.NODE = S_D.NODE )
      251     8519    1          AND ( S_D.QSCH.PEDEF# = IX )
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:37   
      252     8520    2        THEN DO;                           /* Must get LB# */
      253     8521    2             CALL GETLB ALTRET( EST0 );
      254     8522    2             IF S_D.ONE_TO_TWO.EXEC_DOMAIN = %L6 AND NOT S_D.RUM
      255     8523    3             THEN DO;
      256     8524    3                  IF S_D.LB0$->B$LBNTRY0.COMPILER = %FPLID
      257     8525    3                  THEN S_D.CURRENT_FPRG_CONTEXT$ -> FPRG$CONTEXT.INTERPRETIVE = '1'B;
      258     8526    3                  ELSE S_D.CURRENT_FPRG_CONTEXT$ -> FPRG$CONTEXT.INTERPRETIVE = '0'B;
      259     8527    3                END;
      260     8528    2             S_D.QSCH.IC = TIC;
      261     8529    2             RETURN;
      262     8530    2           END;
      263     8531    1        ELSE                               /* Don't have it - must get it */
      264     8532    2   EST0: DO;
      265     8533    2             S_D.QSCH = '0'B;
      266     8534    2             S_D.QSCH.NODE = S_D.NODE;
      267     8535    2             S_D.QSCH.PEDEF# = IX;
      268     8536    2             S_D.QSCH.NPOINTER = ENTRY$ -> B$EDEF.NPOINTER;
      269     8537    2             CALL DDS$GETQSCH ALTRET( NFOUND1 );
      270     8538    2           END;
      271     8539    1        S_D.QSCH.IC = TIC;
      272     8540    1        CALL GETLB ALTRET( NFOUND2 );
      273     8541    1        IF S_D.ONE_TO_TWO.EXEC_DOMAIN = %L6 AND NOT S_D.RUM
      274     8542    2        THEN DO;
      275     8543    2             IF S_D.LB0$->B$LBNTRY0.COMPILER = %FPLID
      276     8544    2             THEN S_D.CURRENT_FPRG_CONTEXT$ -> FPRG$CONTEXT.INTERPRETIVE = '1'B;
      277     8545    2             ELSE S_D.CURRENT_FPRG_CONTEXT$ -> FPRG$CONTEXT.INTERPRETIVE = '0'B;
      278     8546    2           END;
      279     8547                                                /**/
      280     8548    1        RETURN;                            /* Established */
      281     8549                                                /**/
      282     8550    1   NFOUND2:
      283     8551    1        S_D.QSCH.OK = '0'B;
      284     8552    1   NFOUND1:                                /* Cannot establish */
      285     8553    1        ALTRETURN;
      286     8554        %EJECT;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:38   
      287     8555        /*F* NAME: DDS$GETLB#
      288     8556             PURPOSE: To get the current logical block number from the schema
      289     8557                      information contained in S_D.QSCH.
      290     8558             DESCRIPTION: The executable statements table is searched to find
      291     8559                          the logical block to which the given ic value belongs
      292     8560                          to. */
      293     8561        /*D* NAME: DDS$GETLB#
      294     8562             ENTRY: DDS$GETLB#
      295     8563             CALL: CALL DDS$GETLB# ALTRET( can't do );
      296     8564             INPUT: S_D.QSCH.IC - Ic value of requested logical block number.
      297     8565                    S_D.QSCH - Other values are known to be valid.
      298     8566             OUTPUT: S_D.QSCH.LB# - Logical block number desired.
      299     8567             SCRATCH: Local AUTO only.
      300     8568             DESCRIPTION: The contents of S_D.QSCH are known to be valid, with
      301     8569                          the exception of S_D.QSCH.LB#. The executable statements
      302     8570                          table is searched to find the logical block to which
      303     8571                          the given IC value belongs. */
      304     8572                                                /**/
      305     8573    1   DDS$GETLB#: ENTRY ALTRET;
      306     8574                                                /**/
      307     8575    1        TIC = S_D.QSCH.IC;
      308     8576    1        CALL GETLB ALTRET( NFOUND1 );
      309     8577                                                /**/
      310     8578    1        RETURN;
      311     8579                                                /**/
      312     8580        %EJECT;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:39   
      313     8581                                                /**/
      314     8582    1   GETLB: PROC ALTRET;
      315     8583                                                /**/
      316     8584        /*D* Search for closest statement in EXECUTABLE STATEMENTS TABLE,
      317     8585             which is ordered by IS address. */
      318     8586    2        S_D.QSCH.LB# = 0;
      319     8587    2        IF ( S_D.EXST$ = ADDR(NIL) ) OR
      320     8588    2          ( S_D.LB1$ -> B$LBNTRY1.INTRYSIZ = 0 ) OR
      321     8589    2          ( S_D.LB1$ -> B$LBNTRY1.STMNTSIZ = 0 )
      322     8590    2        THEN GOTO JUMPOUT0;
      323     8591    2        CALL DDF$EXST_#( 0, EXST$ ) ALTRET( JUMPERR0 );
      324     8592    2        IF TIC < B$EXST.ISADDR
      325     8593    2        THEN GOTO JUMPERR0;                /* Not within this external procedure */
      326     8594    2        EXSTEND = ( S_D.LB1$ -> B$LBNTRY1.STMNTSIZ / SIZEW( B$EXST ) ) - 1;
      327     8595    2        ST# = 0;
      328     8596    3        DO IX = 0 TO EXSTEND;
      329     8597    3             IF TIC < B$EXST.ISADDR
      330     8598    3             THEN GOTO JUMPOUT1;           /* Make sure it's in memory */
      331     8599    3             ELSE IF TIC = B$EXST.ISADDR
      332     8600    3                  THEN GOTO JUMPOUT2;      /* Got it */
      333     8601    3             ST# = IX;
      334     8602    3             CALL DDF$N_EXST( EXST$ ) ALTRET( JUMPOUT1 );
      335     8603    3           END;                            /* "DO IX" */
      336     8604        /* If we are at the last entry, then that's it! */
      337     8605    2   JUMPOUT1: ;
      338     8606    2        CALL DDF$EXST_#( ST#, EXST$ ) ALTRET( HUH );
      339     8607    2   JUMPOUT2: ;
      340     8608    2        S_D.QSCH.LB# = B$EXST.LBE;
      341     8609    2   JUMPOUT0: ;
      342     8610    2        RETURN;
      343     8611                                                /**/
      344     8612    2   HUH: ;
      345     8613    2        S_D.ERROR = E@DELBUG;              /* E@DELBUG */
      346     8614    2        CALL DDE$ERROR;
      347     8615    2   JUMPERR0: ;
      348     8616    2        ALTRETURN;
      349     8617                                                /**/
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:40   
      350     8618    2   END GETLB;
      351     8619        %EJECT;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:41   
      352     8620        /*F* NAME: DDS$EQCS#
      353     8621             PURPOSE: To establish quailfied schema given PRIMARY ENTDEF number.
      354     8622             DESCRIPTION: This is the degenerate case of DDS$ES_INQ where the
      355     8623                          outermost LOGICAL BLOCK is the desired one. */
      356     8624        /*D* NAME: DDS$EQCS#
      357     8625             ENTRY: DDS$EQCS#
      358     8626             CALL: CALL DDS$EQCS#( IC ) ALTRET( can't do );
      359     8627             INPUT: IC - Primary entdef number.
      360     8628                    S_D.NODE - Node number where primary entdef is located.
      361     8629             OUTPUT: Establishes access to the qualified schema.
      362     8630                     S_D.QSCH.OK - Schema established ok flag.
      363     8631                     S_D.QSCH.PEDEF# - Primary entdef number.
      364     8632                     S_D.QSCH.NPOINTER - Primary entdef name pointer.
      365     8633                     S_D.QSCH.IC - IC input.
      366     8634                     S_D.QSCH.LB# - Logical block number.
      367     8635                     S_D.QSCH.NODE - Node associated with primary entdef.
      368     8636                     Output on ALTRETURN:
      369     8637                     S_D.QSCH.OK - Schema established ok flag reset.
      370     8638             DESCRIPTION: This is the degenerate case of DDS$ES_INQ where the
      371     8639                          outermost LOGICAL BLOCK is the desired one. */
      372     8640                                                /**/
      373     8641    1   DDS$EQCS#: ENTRY( IC ) ALTRET;
      374     8642                                                /**/
      375     8643    1        IF NOT D_SYMBOLS
      376     8644    1        THEN GOTO NFOUND2;
      377     8645    1        ENTRY$ = PINCRW( S_D.EDEF$, IC * SIZEW( B$EDEF ) );
      378     8646    1        TIC = ENTRY$ -> B$EDEF.ISADDR;
      379     8647    1        IF  ( S_D.QSCH.OK )
      380     8648    1          AND ( S_D.QSCH.IC = TIC )
      381     8649    1          AND ( S_D.QSCH.NODE = S_D.NODE )
      382     8650    1        THEN RETURN;                       /* It's already there */
      383     8651    1        IF  ( S_D.QSCH.OK )
      384     8652    1          AND ( S_D.QSCH.NODE = S_D.NODE )
      385     8653    1          AND ( S_D.QSCH.PEDEF# = IC )
      386     8654    1        THEN S_D.QSCH.LB# = 0;
      387     8655    1        ELSE                               /* Don't have it - must get it */
      388     8656    2   EST1: DO;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:42   
      389     8657    2             S_D.QSCH = '0'B;
      390     8658    2             S_D.QSCH.NODE = S_D.NODE;
      391     8659    2             S_D.QSCH.PEDEF# = IC;
      392     8660    2             S_D.QSCH.NPOINTER = ENTRY$ -> B$EDEF.NPOINTER;
      393     8661    2             CALL DDS$GETQSCH ALTRET( NFOUND1 );
      394     8662    2           END;
      395     8663    1        S_D.QSCH.IC = TIC;
      396     8664                                                /**/
      397     8665    1        RETURN;
      398     8666                                                /**/
      399     8667    1   END DDS$ES_INQ;

PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:43   
--  Include file information  --

   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   DD_SUBS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$ES_INQ.

   Procedure DDS$ES_INQ requires 243 words for executable code.
   Procedure DDS$ES_INQ requires 16 words of local(AUTO) storage.

    No errors detected in file DDS$QU_SRCH.:E05TSI    .

PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:44   

 Object Unit name= DDS$ES_INQ                                 File name= DDS$QU_SRCH.:E05TOU
 UTS= JUL 29 '97 14:20:36.60 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   243    363  DDS$ES_INQ
    1  RoData even  none     2      2  DDS$ES_INQ

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        1  DDS$ES_INQ
     0    154          yes     yes      Std        0  DDS$GETLB#
     0    301          yes     yes      Std        1  DDS$EQCS#

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 DDF$FIND_PEDEF
 yes     yes           Std       0 DDS$GETQSCH
 yes     yes           Std       2 DDF$EXST_#
 yes     yes           Std       1 DDF$N_EXST
         yes           Std       0 DDE$ERROR
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:45   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    S_D$                                  D_SYMBOLS                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:46   


      178        1        /*T***********************************************************/
      179        2        /*T*                                                         */
      180        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      181        4        /*T*                                                         */
      182        5        /*T***********************************************************/
      183        6        /*F* NAME: DDS$ES_INQ
      184        7             PURPOSE: To establish current schema.
      185        8             DESCRIPTION: Given a value in the ISR (IC), finds the associated
      186        9             PRIMARY ENTDEF, and then sets up those cells in static data area
      187       10             that establish the qualified schema. */
      188       11        /*D* NAME: DDS$ES_INQ
      189       12             CALL: CALL DDS$ES_INQ( IC ) ALTRET( cant do );
      190       13             INTERFACE: DDF$FIND_PEDEF
      191       14                        DDF$EXST_#
      192       15                        DDF$N_EXST
      193       16             ENVIRONMENT: Delta.
      194       17             INPUT: IC - IS address where to establish schema.
      195       18             OUTPUT: Establishes access to the qualified schema.
      196       19                     S_D.QSCH.OK - Schema established ok flag.
      197       20                     S_D.QSCH.PEDEF# - Primary entdef number.
      198       21                     S_D.QSCH.NPOINTER - Primary entdef name pointer.
      199       22                     S_D.QSCH.IC - IC input.
      200       23                     S_D.QSCH.LB# - Logical block number.
      201       24                     S_D.QSCH.NODE - Node associated with primary entdef.
      202       25                     S_D.NODE - S_D.QSCH.NODE
      203       26             SCRATCH: Local auto only.
      204       27             DESCRIPTION: Given a value in the ISR (IC), finds the associated
      205       28             PRIMARY ENTDEF, and then sets up those cells in static data area
      206       29             that establish the qualified schema. */
      207       30                                                /**/
      208       31        DDS$ES_INQ: PROC( IC ) ALTRET;

     31  0 000000   000000 700200 xent  DDS$ES_INQ   TSX0  ! X66_AUTO_1
         0 000001   000020 000001                    ZERO    16,1

      209       32                                                /**/
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:47   
      210       33    1   DCL IC UBIN;                            /* IS address input */
      211       34    1   DCL ENTRY$ PTR;                         /* PEDEF pointer */
      212       35    1   DCL TEMP UBIN;
      213       36    1   DCL IX SBIN;
      214       37    1   DCL EXSTEND SBIN;
      215       38        /*D* IX & EXSTEND must be SBIN */
      216       39    1   DCL EXST$ PTR;
      217       40    1   DCL TIC UBIN;
      218       41    1   DCL ST# UBIN;
      219       42        %INCLUDE DD_SUBS_C;                     /* Common %subs */
      220      313        %INCLUDE DD_ERR_C;
      221      710        %INCLUDE DD$BASED;
      222     2013        %FPRG$CONTEXT;
      223     2076        %INCLUDE B$OBJECT_C;                    /* Object language stuff */
      224     5506        %B$EDEF;
      225     5576        %COMPILERIDSUBS;
      226     5592        %B$LBNTRY0;
      227     5628        %B$LBNTRY1;
      228     5655        %B$EXST (STCLASS="BASED(EXST$)");
      229     5762        %INCLUDE XUH_MACRO_C;
      230     5846        %INCLUDE DD_SD_M;
      231     7182        %S_D;
      232     8500    1   DCL D_SYMBOLS BIT(1) ALIGNED SYMREF;
      233     8501                                                /**/
      234     8502    1   DCL DDE$ERROR ENTRY(0);
      235     8503    1   DCL DDF$FIND_PEDEF ENTRY(2) ALTRET;
      236     8504    1   DCL DDF$EXST_# ENTRY(2) ALTRET;
      237     8505    1   DCL DDF$N_EXST ENTRY(1) ALTRET;
      238     8506    1   DCL DDS$GETQSCH ENTRY(0) ALTRET;
      239     8507                                                /**/
      240     8508    1        IF NOT D_SYMBOLS

   8508  0 000002   000000 234000 xsym               SZN     D_SYMBOLS
         0 000003   000151 605000 0                  TPL     NFOUND2

      241     8509    1        THEN GOTO NFOUND2;
      242     8510    1        TIC = IC;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:48   

   8510  0 000004   200003 470500                    LDP0    @IC,,AUTO
         0 000005   000000 235100                    LDA     0,,PR0
         0 000006   200011 755100                    STA     TIC,,AUTO

      243     8511    1        IF  ( S_D.QSCH.OK )

   8511  0 000007   000000 471400 xsym               LDP1    S_D$
         0 000010   100733 234100                    SZN     475,,PR1
         0 000011   000021 605000 0                  TPL     s:8515
         0 000012   100737 236100                    LDQ     479,,PR1
         0 000013   200011 116100                    CMPQ    TIC,,AUTO
         0 000014   000021 601000 0                  TNZ     s:8515
         0 000015   100735 236100                    LDQ     477,,PR1
         0 000016   104706 116100                    CMPQ    2502,,PR1
         0 000017   000021 601000 0                  TNZ     s:8515

      244     8512    1          AND ( S_D.QSCH.IC = TIC )
      245     8513    1          AND ( S_D.QSCH.NODE = S_D.NODE )
      246     8514    1        THEN RETURN;                       /* It's already there */

   8514  0 000020   000000 702200 xent               TSX2  ! X66_ARET

      247     8515    1        CALL DDF$FIND_PEDEF( TIC, ENTRY$ ) ALTRET( NFOUND2 );

   8515  0 000021   200004 633500                    EPPR3   ENTRY$,,AUTO
         0 000022   200017 453500                    STP3    ST#+5,,AUTO
         0 000023   200011 634500                    EPPR4   TIC,,AUTO
         0 000024   200016 454500                    STP4    ST#+4,,AUTO
         0 000025   200016 630500                    EPPR0   ST#+4,,AUTO
         0 000026   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000027   000000 701000 xent               TSX1    DDF$FIND_PEDEF
         0 000030   000151 702000 0                  TSX2    NFOUND2

      248     8516    1        IX = POFFW( ENTRY$, S_D.EDEF$ ) / SIZEW( B$EDEF );

   8516  0 000031   000000 470400 xsym               LDP0    S_D$
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:49   
         0 000032   001042 236100                    LDQ     546,,PR0
         0 000033   000022 772000                    QRL     18
         0 000034   200016 756100                    STQ     ST#+4,,AUTO
         0 000035   200004 236100                    LDQ     ENTRY$,,AUTO
         0 000036   000022 772000                    QRL     18
         0 000037   200016 136100                    SBLQ    ST#+4,,AUTO
         0 000040   000002 506007                    DIV     2,DL
         0 000041   200006 756100                    STQ     IX,,AUTO

      249     8517    1        IF  ( S_D.QSCH.OK )

   8517  0 000042   000733 234100                    SZN     475,,PR0
         0 000043   000102 605000 0                  TPL     EST0
         0 000044   000735 236100                    LDQ     477,,PR0
         0 000045   004706 116100                    CMPQ    2502,,PR0
         0 000046   000102 601000 0                  TNZ     EST0
         0 000047   000734 236100                    LDQ     476,,PR0
         0 000050   000102 604000 0                  TMI     EST0
         0 000051   200006 116100                    CMPQ    IX,,AUTO
         0 000052   000102 601000 0                  TNZ     EST0

      250     8518    1          AND ( S_D.QSCH.NODE = S_D.NODE )
      251     8519    1          AND ( S_D.QSCH.PEDEF# = IX )
      252     8520    2        THEN DO;                           /* Must get LB# */

      253     8521    2             CALL GETLB ALTRET( EST0 );

   8521  0 000053   000164 701000 0                  TSX1    GETLB
         0 000054   000102 702000 0                  TSX2    EST0

      254     8522    2             IF S_D.ONE_TO_TWO.EXEC_DOMAIN = %L6 AND NOT S_D.RUM

   8522  0 000055   000000 470400 xsym               LDP0    S_D$
         0 000056   006714 235100                    LDA     3532,,PR0
         0 000057   000002 115007                    CMPA    2,DL
         0 000060   000077 601000 0                  TNZ     s:8528
         0 000061   004755 234100                    SZN     2541,,PR0
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:50   
         0 000062   000077 604000 0                  TMI     s:8528

      255     8523    3             THEN DO;

      256     8524    3                  IF S_D.LB0$->B$LBNTRY0.COMPILER = %FPLID

   8524  0 000063   001035 471500                    LDP1    541,,PR0
         0 000064   100000 236100                    LDQ     0,,PR1
         0 000065   000777 376003                    ANQ     511,DU
         0 000066   000010 116003                    CMPQ    8,DU
         0 000067   000074 601000 0                  TNZ     s:8526

      257     8525    3                  THEN S_D.CURRENT_FPRG_CONTEXT$ -> FPRG$CONTEXT.INTERPRETIVE = '1'B;

   8525  0 000070   000102 473500                    LDP3    66,,PR0
         0 000071   200000 236003                    LDQ     65536,DU
         0 000072   300001 256100                    ORSQ    1,,PR3
         0 000073   000077 710000 0                  TRA     s:8528

      258     8526    3                  ELSE S_D.CURRENT_FPRG_CONTEXT$ -> FPRG$CONTEXT.INTERPRETIVE = '0'B;

   8526  0 000074   000102 473500                    LDP3    66,,PR0
         0 000075   000000 236000 1                  LDQ     0
         0 000076   300001 356100                    ANSQ    1,,PR3

      259     8527    3                END;

      260     8528    2             S_D.QSCH.IC = TIC;

   8528  0 000077   200011 235100                    LDA     TIC,,AUTO
         0 000100   000737 755100                    STA     479,,PR0

      261     8529    2             RETURN;

   8529  0 000101   000000 702200 xent               TSX2  ! X66_ARET

      262     8530    2           END;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:51   
      263     8531    1        ELSE                               /* Don't have it - must get it */
      264     8532    2   EST0: DO;

   8532  0 000102                       EST0         null
      265     8533    2             S_D.QSCH = '0'B;

   8533  0 000102   000000 470400 xsym               LDP0    S_D$
         0 000103   000100 100400                    MLR     fill='000'O
         0 000104   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000105   000733 000034                    ADSC9   475,,PR0                 cn=0,n=28

      266     8534    2             S_D.QSCH.NODE = S_D.NODE;

   8534  0 000106   004706 235100                    LDA     2502,,PR0
         0 000107   000735 755100                    STA     477,,PR0

      267     8535    2             S_D.QSCH.PEDEF# = IX;

   8535  0 000110   200006 236100                    LDQ     IX,,AUTO
         0 000111   000734 756100                    STQ     476,,PR0

      268     8536    2             S_D.QSCH.NPOINTER = ENTRY$ -> B$EDEF.NPOINTER;

   8536  0 000112   200004 471500                    LDP1    ENTRY$,,AUTO
         0 000113   100001 236100                    LDQ     1,,PR1
         0 000114   000022 732000                    QRS     18
         0 000115   000736 756100                    STQ     478,,PR0

      269     8537    2             CALL DDS$GETQSCH ALTRET( NFOUND1 );

   8537  0 000116   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000117   000000 701000 xent               TSX1    DDS$GETQSCH
         0 000120   000153 702000 0                  TSX2    NFOUND1

      270     8538    2           END;

      271     8539    1        S_D.QSCH.IC = TIC;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:52   

   8539  0 000121   000000 470400 xsym               LDP0    S_D$
         0 000122   200011 235100                    LDA     TIC,,AUTO
         0 000123   000737 755100                    STA     479,,PR0

      272     8540    1        CALL GETLB ALTRET( NFOUND2 );

   8540  0 000124   000164 701000 0                  TSX1    GETLB
         0 000125   000151 702000 0                  TSX2    NFOUND2

      273     8541    1        IF S_D.ONE_TO_TWO.EXEC_DOMAIN = %L6 AND NOT S_D.RUM

   8541  0 000126   000000 470400 xsym               LDP0    S_D$
         0 000127   006714 235100                    LDA     3532,,PR0
         0 000130   000002 115007                    CMPA    2,DL
         0 000131   000150 601000 0                  TNZ     s:8548
         0 000132   004755 234100                    SZN     2541,,PR0
         0 000133   000150 604000 0                  TMI     s:8548

      274     8542    2        THEN DO;

      275     8543    2             IF S_D.LB0$->B$LBNTRY0.COMPILER = %FPLID

   8543  0 000134   001035 471500                    LDP1    541,,PR0
         0 000135   100000 236100                    LDQ     0,,PR1
         0 000136   000777 376003                    ANQ     511,DU
         0 000137   000010 116003                    CMPQ    8,DU
         0 000140   000145 601000 0                  TNZ     s:8545

      276     8544    2             THEN S_D.CURRENT_FPRG_CONTEXT$ -> FPRG$CONTEXT.INTERPRETIVE = '1'B;

   8544  0 000141   000102 473500                    LDP3    66,,PR0
         0 000142   200000 236003                    LDQ     65536,DU
         0 000143   300001 256100                    ORSQ    1,,PR3
         0 000144   000150 710000 0                  TRA     s:8548

      277     8545    2             ELSE S_D.CURRENT_FPRG_CONTEXT$ -> FPRG$CONTEXT.INTERPRETIVE = '0'B;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:53   

   8545  0 000145   000102 473500                    LDP3    66,,PR0
         0 000146   000000 236000 1                  LDQ     0
         0 000147   300001 356100                    ANSQ    1,,PR3

      278     8546    2           END;

      279     8547                                                /**/
      280     8548    1        RETURN;                            /* Established */

   8548  0 000150   000000 702200 xent               TSX2  ! X66_ARET

      281     8549                                                /**/
      282     8550    1   NFOUND2:
      283     8551    1        S_D.QSCH.OK = '0'B;

   8551  0 000151   000000 470400 xsym  NFOUND2      LDP0    S_D$
         0 000152   000733 450100                    STZ     475,,PR0

      284     8552    1   NFOUND1:                                /* Cannot establish */
      285     8553    1        ALTRETURN;

   8553  0 000153   000000 702200 xent  NFOUND1      TSX2  ! X66_AALT

      286     8554        %EJECT;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:54   
      287     8555        /*F* NAME: DDS$GETLB#
      288     8556             PURPOSE: To get the current logical block number from the schema
      289     8557                      information contained in S_D.QSCH.
      290     8558             DESCRIPTION: The executable statements table is searched to find
      291     8559                          the logical block to which the given ic value belongs
      292     8560                          to. */
      293     8561        /*D* NAME: DDS$GETLB#
      294     8562             ENTRY: DDS$GETLB#
      295     8563             CALL: CALL DDS$GETLB# ALTRET( can't do );
      296     8564             INPUT: S_D.QSCH.IC - Ic value of requested logical block number.
      297     8565                    S_D.QSCH - Other values are known to be valid.
      298     8566             OUTPUT: S_D.QSCH.LB# - Logical block number desired.
      299     8567             SCRATCH: Local AUTO only.
      300     8568             DESCRIPTION: The contents of S_D.QSCH are known to be valid, with
      301     8569                          the exception of S_D.QSCH.LB#. The executable statements
      302     8570                          table is searched to find the logical block to which
      303     8571                          the given IC value belongs. */
      304     8572                                                /**/
      305     8573    1   DDS$GETLB#: ENTRY ALTRET;

   8573  0 000154   000000 700200 xent  DDS$GETLB#   TSX0  ! X66_AUTO_1
         0 000155   000020 000001                    ZERO    16,1

      306     8574                                                /**/
      307     8575    1        TIC = S_D.QSCH.IC;

   8575  0 000156   000000 470400 xsym               LDP0    S_D$
         0 000157   000737 235100                    LDA     479,,PR0
         0 000160   200011 755100                    STA     TIC,,AUTO

      308     8576    1        CALL GETLB ALTRET( NFOUND1 );

   8576  0 000161   000164 701000 0                  TSX1    GETLB
         0 000162   000153 702000 0                  TSX2    NFOUND1

      309     8577                                                /**/
      310     8578    1        RETURN;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:55   

   8578  0 000163   000000 702200 xent               TSX2  ! X66_ARET

      311     8579                                                /**/
      312     8580        %EJECT;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:56   
      313     8581                                                /**/
      314     8582    1   GETLB: PROC ALTRET;

   8582  0 000164   200014 741300       GETLB        STX1  ! ST#+2,,AUTO

      315     8583                                                /**/
      316     8584        /*D* Search for closest statement in EXECUTABLE STATEMENTS TABLE,
      317     8585             which is ordered by IS address. */
      318     8586    2        S_D.QSCH.LB# = 0;

   8586  0 000165   000000 470400 xsym               LDP0    S_D$
         0 000166   000740 450100                    STZ     480,,PR0

      319     8587    2        IF ( S_D.EXST$ = ADDR(NIL) ) OR

   8587  0 000167   001010 236100                    LDQ     520,,PR0
         0 000170   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000171   000267 600000 0                  TZE     JUMPOUT0
         0 000172   001036 471500                    LDP1    542,,PR0
         0 000173   100003 220100                    LDX0    3,,PR1
         0 000174   000267 600000 0                  TZE     JUMPOUT0
         0 000175   100001 222100                    LDX2    1,,PR1
         0 000176   000267 600000 0                  TZE     JUMPOUT0

      320     8588    2          ( S_D.LB1$ -> B$LBNTRY1.INTRYSIZ = 0 ) OR
      321     8589    2          ( S_D.LB1$ -> B$LBNTRY1.STMNTSIZ = 0 )
      322     8590    2        THEN GOTO JUMPOUT0;
      323     8591    2        CALL DDF$EXST_#( 0, EXST$ ) ALTRET( JUMPERR0 );

   8591  0 000177   200010 633500                    EPPR3   EXST$,,AUTO
         0 000200   200017 453500                    STP3    ST#+5,,AUTO
         0 000201   000001 236000 1                  LDQ     1
         0 000202   200016 756100                    STQ     ST#+4,,AUTO
         0 000203   200016 630500                    EPPR0   ST#+4,,AUTO
         0 000204   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000205   000000 701000 xent               TSX1    DDF$EXST_#
         0 000206   000277 702000 0                  TSX2    JUMPERR0
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:57   

      324     8592    2        IF TIC < B$EXST.ISADDR

   8592  0 000207   200010 470500                    LDP0    EXST$,,AUTO
         0 000210   000000 236100                    LDQ     0,,PR0
         0 000211   000032 376000 xsym               ANQ     B_VECTNIL+26
         0 000212   200011 116100                    CMPQ    TIC,,AUTO
         0 000213   000215 600000 0                  TZE     s:8594
         0 000214   000277 603000 0                  TRC     JUMPERR0

      325     8593    2        THEN GOTO JUMPERR0;                /* Not within this external procedure */
      326     8594    2        EXSTEND = ( S_D.LB1$ -> B$LBNTRY1.STMNTSIZ / SIZEW( B$EXST ) ) - 1;

   8594  0 000215   000000 471400 xsym               LDP1    S_D$
         0 000216   101036 473500                    LDP3    542,,PR1
         0 000217   300001 236100                    LDQ     1,,PR3
         0 000220   000022 772000                    QRL     18
         0 000221   000003 506007                    DIV     3,DL
         0 000222   000001 136007                    SBLQ    1,DL
         0 000223   200007 756100                    STQ     EXSTEND,,AUTO

      327     8595    2        ST# = 0;

   8595  0 000224   200012 450100                    STZ     ST#,,AUTO

      328     8596    3        DO IX = 0 TO EXSTEND;

   8596  0 000225   200006 450100                    STZ     IX,,AUTO
         0 000226   000247 710000 0                  TRA     s:8603+1

      329     8597    3             IF TIC < B$EXST.ISADDR

   8597  0 000227   200010 470500                    LDP0    EXST$,,AUTO
         0 000230   000000 236100                    LDQ     0,,PR0
         0 000231   000032 376000 xsym               ANQ     B_VECTNIL+26
         0 000232   200011 116100                    CMPQ    TIC,,AUTO
         0 000233   000235 600000 0                  TZE     s:8599
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:58   
         0 000234   000252 603000 0                  TRC     JUMPOUT1

      330     8598    3             THEN GOTO JUMPOUT1;           /* Make sure it's in memory */
      331     8599    3             ELSE IF TIC = B$EXST.ISADDR

   8599  0 000235   000262 600000 0                  TZE     JUMPOUT2

      332     8600    3                  THEN GOTO JUMPOUT2;      /* Got it */
      333     8601    3             ST# = IX;

   8601  0 000236   200006 235100                    LDA     IX,,AUTO
         0 000237   200012 755100                    STA     ST#,,AUTO

      334     8602    3             CALL DDF$N_EXST( EXST$ ) ALTRET( JUMPOUT1 );

   8602  0 000240   200010 631500                    EPPR1   EXST$,,AUTO
         0 000241   200016 451500                    STP1    ST#+4,,AUTO
         0 000242   200016 630500                    EPPR0   ST#+4,,AUTO
         0 000243   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000244   000000 701000 xent               TSX1    DDF$N_EXST
         0 000245   000252 702000 0                  TSX2    JUMPOUT1

      335     8603    3           END;                            /* "DO IX" */

   8603  0 000246   200006 054100                    AOS     IX,,AUTO
         0 000247   200006 236100                    LDQ     IX,,AUTO
         0 000250   200007 116100                    CMPQ    EXSTEND,,AUTO
         0 000251   000227 604400 0                  TMOZ    s:8597

   8596  0 000252                       JUMPOUT1     null
      336     8604        /* If we are at the last entry, then that's it! */
      337     8605    2   JUMPOUT1: ;
      338     8606    2        CALL DDF$EXST_#( ST#, EXST$ ) ALTRET( HUH );

   8606  0 000252   200010 630500                    EPPR0   EXST$,,AUTO
         0 000253   200017 450500                    STP0    ST#+5,,AUTO
         0 000254   200012 631500                    EPPR1   ST#,,AUTO
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:59   
         0 000255   200016 451500                    STP1    ST#+4,,AUTO
         0 000256   200016 630500                    EPPR0   ST#+4,,AUTO
         0 000257   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000260   000000 701000 xent               TSX1    DDF$EXST_#
         0 000261   000271 702000 0                  TSX2    HUH

   8606  0 000262                       JUMPOUT2     null
      339     8607    2   JUMPOUT2: ;
      340     8608    2        S_D.QSCH.LB# = B$EXST.LBE;

   8608  0 000262   200010 470500                    LDP0    EXST$,,AUTO
         0 000263   000001 236100                    LDQ     1,,PR0
         0 000264   777777 376007                    ANQ     -1,DL
         0 000265   000000 471400 xsym               LDP1    S_D$
         0 000266   100740 756100                    STQ     480,,PR1

   8608  0 000267                       JUMPOUT0     null
      341     8609    2   JUMPOUT0: ;
      342     8610    2        RETURN;

   8610  0 000267   200014 221300                    LDX1  ! ST#+2,,AUTO
         0 000270   000001 702211                    TSX2  ! 1,X1

   8608  0 000271                       HUH          null
      343     8611                                                /**/
      344     8612    2   HUH: ;
      345     8613    2        S_D.ERROR = E@DELBUG;              /* E@DELBUG */

   8613  0 000271   000766 235007                    LDA     502,DL
         0 000272   000000 470400 xsym               LDP0    S_D$
         0 000273   000013 755100                    STA     11,,PR0

      346     8614    2        CALL DDE$ERROR;

   8614  0 000274   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000275   000000 701000 xent               TSX1    DDE$ERROR
         0 000276   000000 011000                    NOP     0
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:60   

   8613  0 000277                       JUMPERR0     null
      347     8615    2   JUMPERR0: ;
      348     8616    2        ALTRETURN;

   8616  0 000277   200014 221300                    LDX1  ! ST#+2,,AUTO
         0 000300   000000 702211                    TSX2  ! 0,X1

      349     8617                                                /**/
      350     8618    2   END GETLB;
      351     8619        %EJECT;
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:61   
      352     8620        /*F* NAME: DDS$EQCS#
      353     8621             PURPOSE: To establish quailfied schema given PRIMARY ENTDEF number.
      354     8622             DESCRIPTION: This is the degenerate case of DDS$ES_INQ where the
      355     8623                          outermost LOGICAL BLOCK is the desired one. */
      356     8624        /*D* NAME: DDS$EQCS#
      357     8625             ENTRY: DDS$EQCS#
      358     8626             CALL: CALL DDS$EQCS#( IC ) ALTRET( can't do );
      359     8627             INPUT: IC - Primary entdef number.
      360     8628                    S_D.NODE - Node number where primary entdef is located.
      361     8629             OUTPUT: Establishes access to the qualified schema.
      362     8630                     S_D.QSCH.OK - Schema established ok flag.
      363     8631                     S_D.QSCH.PEDEF# - Primary entdef number.
      364     8632                     S_D.QSCH.NPOINTER - Primary entdef name pointer.
      365     8633                     S_D.QSCH.IC - IC input.
      366     8634                     S_D.QSCH.LB# - Logical block number.
      367     8635                     S_D.QSCH.NODE - Node associated with primary entdef.
      368     8636                     Output on ALTRETURN:
      369     8637                     S_D.QSCH.OK - Schema established ok flag reset.
      370     8638             DESCRIPTION: This is the degenerate case of DDS$ES_INQ where the
      371     8639                          outermost LOGICAL BLOCK is the desired one. */
      372     8640                                                /**/
      373     8641    1   DDS$EQCS#: ENTRY( IC ) ALTRET;

   8641  0 000301   000000 700200 xent  DDS$EQCS#    TSX0  ! X66_AUTO_1
         0 000302   000020 000001                    ZERO    16,1

      374     8642                                                /**/
      375     8643    1        IF NOT D_SYMBOLS

   8643  0 000303   000000 234000 xsym               SZN     D_SYMBOLS
         0 000304   000151 605000 0                  TPL     NFOUND2

      376     8644    1        THEN GOTO NFOUND2;
      377     8645    1        ENTRY$ = PINCRW( S_D.EDEF$, IC * SIZEW( B$EDEF ) );

   8645  0 000305   200003 470500                    LDP0    @IC,,AUTO
         0 000306   000000 720100                    LXL0    0,,PR0
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:62   
         0 000307   000000 471400 xsym               LDP1    S_D$
         0 000310   101042 473500                    LDP3    546,,PR1
         0 000311   000000 635010                    EAA     0,X0
         0 000312   000021 771000                    ARL     17
         0 000313   300000 634505                    EPPR4   0,AL,PR3
         0 000314   200004 454500                    STP4    ENTRY$,,AUTO

      378     8646    1        TIC = ENTRY$ -> B$EDEF.ISADDR;

   8646  0 000315   400000 236100                    LDQ     0,,PR4
         0 000316   000032 376000 xsym               ANQ     B_VECTNIL+26
         0 000317   200011 756100                    STQ     TIC,,AUTO

      379     8647    1        IF  ( S_D.QSCH.OK )

   8647  0 000320   100733 234100                    SZN     475,,PR1
         0 000321   000330 605000 0                  TPL     s:8651
         0 000322   100737 116100                    CMPQ    479,,PR1
         0 000323   000330 601000 0                  TNZ     s:8651
         0 000324   100735 236100                    LDQ     477,,PR1
         0 000325   104706 116100                    CMPQ    2502,,PR1
         0 000326   000330 601000 0                  TNZ     s:8651

      380     8648    1          AND ( S_D.QSCH.IC = TIC )
      381     8649    1          AND ( S_D.QSCH.NODE = S_D.NODE )
      382     8650    1        THEN RETURN;                       /* It's already there */

   8650  0 000327   000000 702200 xent               TSX2  ! X66_ARET

      383     8651    1        IF  ( S_D.QSCH.OK )

   8651  0 000330   100733 234100                    SZN     475,,PR1
         0 000331   000342 605000 0                  TPL     EST1
         0 000332   100735 236100                    LDQ     477,,PR1
         0 000333   104706 116100                    CMPQ    2502,,PR1
         0 000334   000342 601000 0                  TNZ     EST1
         0 000335   100734 236100                    LDQ     476,,PR1
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:63   
         0 000336   000000 116100                    CMPQ    0,,PR0
         0 000337   000342 601000 0                  TNZ     EST1

      384     8652    1          AND ( S_D.QSCH.NODE = S_D.NODE )
      385     8653    1          AND ( S_D.QSCH.PEDEF# = IC )
      386     8654    1        THEN S_D.QSCH.LB# = 0;

   8654  0 000340   100740 450100                    STZ     480,,PR1
         0 000341   000357 710000 0                  TRA     s:8663

      387     8655    1        ELSE                               /* Don't have it - must get it */
      388     8656    2   EST1: DO;

   8656  0 000342                       EST1         null
      389     8657    2             S_D.QSCH = '0'B;

   8657  0 000342   000100 100400                    MLR     fill='000'O
         0 000343   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000344   100733 000034                    ADSC9   475,,PR1                 cn=0,n=28

      390     8658    2             S_D.QSCH.NODE = S_D.NODE;

   8658  0 000345   104706 235100                    LDA     2502,,PR1
         0 000346   100735 755100                    STA     477,,PR1

      391     8659    2             S_D.QSCH.PEDEF# = IC;

   8659  0 000347   000000 235100                    LDA     0,,PR0
         0 000350   100734 755100                    STA     476,,PR1

      392     8660    2             S_D.QSCH.NPOINTER = ENTRY$ -> B$EDEF.NPOINTER;

   8660  0 000351   400001 236100                    LDQ     1,,PR4
         0 000352   000022 732000                    QRS     18
         0 000353   100736 756100                    STQ     478,,PR1

      393     8661    2             CALL DDS$GETQSCH ALTRET( NFOUND1 );
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:64   

   8661  0 000354   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000355   000000 701000 xent               TSX1    DDS$GETQSCH
         0 000356   000153 702000 0                  TSX2    NFOUND1

      394     8662    2           END;

      395     8663    1        S_D.QSCH.IC = TIC;

   8663  0 000357   000000 470400 xsym               LDP0    S_D$
         0 000360   200011 235100                    LDA     TIC,,AUTO
         0 000361   000737 755100                    STA     479,,PR0

      396     8664                                                /**/
      397     8665    1        RETURN;

   8665  0 000362   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   1     000   577777 777777   000002 006000                                    ........
      398     8666                                                /**/
      399     8667    1   END DDS$ES_INQ;

PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:65   
--  Include file information  --

   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   DD_SUBS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$ES_INQ.

   Procedure DDS$ES_INQ requires 243 words for executable code.
   Procedure DDS$ES_INQ requires 16 words of local(AUTO) storage.

    No errors detected in file DDS$QU_SRCH.:E05TSI    .
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:66   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:67   
          MINI XREF LISTING

B$EDEF
      5507**DCL      8516--ASSIGN   8645--ASSIGN
B$EDEF.ISADDR
      5530**DCL      8646>>ASSIGN
B$EDEF.NPOINTER
      5532**DCL      8536>>ASSIGN   8660>>ASSIGN
B$EDEF.OU
      5524**DCL      5530--REDEF
B$EXST
      5656**DCL      8594--ASSIGN
B$EXST.ISADDR
      5671**DCL      8592>>IF       8597>>IF       8599>>IF
B$EXST.LBE
      5677**DCL      8608>>ASSIGN
B$EXST.OU
      5665**DCL      5671--REDEF
B$LBNTRY0.COMPILER
      5596**DCL      8524>>IF       8543>>IF
B$LBNTRY0.NO_AUTO
      5619**DCL      5624--REDEF
B$LBNTRY0.VERSION
      5608**DCL      5610--REDEF
B$LBNTRY1.INTRYSIZ
      5648**DCL      8587>>IF
B$LBNTRY1.STMNTSIZ
      5636**DCL      8587>>IF       8594>>ASSIGN
DDE$ERROR
      8502**DCL-ENT  8614--CALL
DDF$EXST_#
      8504**DCL-ENT  8591--CALL     8606--CALL
DDF$FIND_PEDEF
      8503**DCL-ENT  8515--CALL
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:68   
DDF$N_EXST
      8505**DCL-ENT  8602--CALL
DDS$GETQSCH
      8506**DCL-ENT  8537--CALL     8661--CALL
D_SYMBOLS
      8500**DCL      8508>>IF       8643>>IF
ENTRY$
        34**DCL      8515<>CALL     8516>>ASSIGN   8536>>ASSIGN   8645<<ASSIGN   8646>>ASSIGN   8660>>ASSIGN
EST0
      8532**LABEL    8521--CALLALT
EXST$
        39**DCL      5656--IMP-PTR  8591<>CALL     8592>>IF       8597>>IF       8599>>IF       8602<>CALL
      8606<>CALL     8608>>ASSIGN
EXSTEND
        37**DCL      8594<<ASSIGN   8596>>DOINDEX
FPRG$CONTEXT.INTERPRETIVE
      2019**DCL      8525<<ASSIGN   8526<<ASSIGN   8544<<ASSIGN   8545<<ASSIGN
GETLB
      8582**PROC     8521--CALL     8540--CALL     8576--CALL
HUH IN PROCEDURE GETLB
      8608**LABEL    8606--CALLALT
IC
        33**DCL        31--PROC     8510>>ASSIGN   8641--ENTRY    8645>>ASSIGN   8651>>IF       8659>>ASSIGN
IX
        36**DCL      8516<<ASSIGN   8517>>IF       8535>>ASSIGN   8596<<DOINDEX  8601>>ASSIGN
JUMPERR0 IN PROCEDURE GETLB
      8613**LABEL    8591--CALLALT  8593--GOTO
JUMPOUT0 IN PROCEDURE GETLB
      8608**LABEL    8590--GOTO
JUMPOUT1 IN PROCEDURE GETLB
      8596**LABEL    8598--GOTO     8602--CALLALT
JUMPOUT2 IN PROCEDURE GETLB
      8606**LABEL    8600--GOTO
NFOUND1
      8553**LABEL    8537--CALLALT  8576--CALLALT  8661--CALLALT
NFOUND2
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:69   
      8551**LABEL    8509--GOTO     8515--CALLALT  8540--CALLALT  8644--GOTO
ST#
        41**DCL      8595<<ASSIGN   8601<<ASSIGN   8606<>CALL
S_D.CURRENT_CHANNEL
      8134**DCL      8136--REDEF
S_D.CURRENT_FPRG_CONTEXT$
      7334**DCL      8525>>ASSIGN   8526>>ASSIGN   8544>>ASSIGN   8545>>ASSIGN
S_D.DEBUGA
      7286**DCL      7288--REDEF
S_D.EDEF$
      7630**DCL      8516>>ASSIGN   8645>>ASSIGN
S_D.EIS
      8244**DCL      8273--REDEF
S_D.ERROR
      7215**DCL      8613<<ASSIGN
S_D.EXST$
      7590**DCL      8587>>IF
S_D.HOST_MESSAGE_BUF_REMOTE
      8177**DCL      8178--REDEF    8192--REDEF
S_D.JDE
      7791**DCL      7792--REDEF
S_D.L$.VALUE
      7344**DCL      7350--REDEF    7358--REDEF    7361--REDEF    7364--REDEF    7367--REDEF
S_D.L$.VALUE.L
      7345**DCL      7346--REDEF    7347--REDEF
S_D.L6_MESSAGE_BUF
      8198**DCL      8200--REDEF
S_D.LB0$
      7620**DCL      8524>>IF       8543>>IF
S_D.LB1$
      7622**DCL      8587>>IF       8587>>IF       8594>>ASSIGN
S_D.NODE
      7743**DCL      8511>>IF       8517>>IF       8534>>ASSIGN   8647>>IF       8651>>IF       8658>>ASSIGN
S_D.ONE_TO_TWO.EXEC_DOMAIN
      8209**DCL      8522>>IF       8541>>IF
S_D.OUTPUT
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:70   
      8164**DCL      8166--REDEF
S_D.QSCH
      7488**DCL      8533<<ASSIGN   8657<<ASSIGN
S_D.QSCH.IC
      7498**DCL      8511>>IF       8528<<ASSIGN   8539<<ASSIGN   8575>>ASSIGN   8647>>IF       8663<<ASSIGN
S_D.QSCH.LB#
      7500**DCL      8586<<ASSIGN   8608<<ASSIGN   8654<<ASSIGN
S_D.QSCH.NODE
      7494**DCL      8511>>IF       8517>>IF       8534<<ASSIGN   8647>>IF       8651>>IF       8658<<ASSIGN
S_D.QSCH.NPOINTER
      7496**DCL      8536<<ASSIGN   8660<<ASSIGN
S_D.QSCH.OK
      7490**DCL      8511>>IF       8517>>IF       8551<<ASSIGN   8647>>IF       8651>>IF
S_D.QSCH.PEDEF#
      7492**DCL      8517>>IF       8535<<ASSIGN   8651>>IF       8659<<ASSIGN
S_D.REMOTE_MSG.FNCC
      8183**DCL      8184--REDEF
S_D.REMOTE_MSG.STXC
      8179**DCL      8180--REDEF
S_D.REMOTE_MSG.SUBFNCC
      8187**DCL      8188--REDEF
S_D.RUM
      7832**DCL      8522>>IF       8541>>IF
S_D.SV
      7243**DCL      7264--REDEF
S_D$
      8495**DCL      7191--IMP-PTR  8511>>IF       8511>>IF       8511>>IF       8511>>IF       8516>>ASSIGN
      8517>>IF       8517>>IF       8517>>IF       8517>>IF       8522>>IF       8522>>IF       8524>>IF
      8525>>ASSIGN   8526>>ASSIGN   8528>>ASSIGN   8533>>ASSIGN   8534>>ASSIGN   8534>>ASSIGN   8535>>ASSIGN
      8536>>ASSIGN   8539>>ASSIGN   8541>>IF       8541>>IF       8543>>IF       8544>>ASSIGN   8545>>ASSIGN
      8551>>ASSIGN   8575>>ASSIGN   8586>>ASSIGN   8587>>IF       8587>>IF       8587>>IF       8594>>ASSIGN
      8608>>ASSIGN   8613>>ASSIGN   8645>>ASSIGN   8647>>IF       8647>>IF       8647>>IF       8647>>IF
      8651>>IF       8651>>IF       8651>>IF       8651>>IF       8654>>ASSIGN   8657>>ASSIGN   8658>>ASSIGN
      8658>>ASSIGN   8659>>ASSIGN   8660>>ASSIGN   8663>>ASSIGN
TIC
        40**DCL      8510<<ASSIGN   8511>>IF       8515<>CALL     8528>>ASSIGN   8539>>ASSIGN   8575<<ASSIGN
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:71   
      8592>>IF       8597>>IF       8599>>IF       8646<<ASSIGN   8647>>IF       8663>>ASSIGN
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:72   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #002=DDS$ES_INQ File=DDS$QU_SRCH.:E05TSI                           TUE 07/29/97 14:20 Page:73   
              MINI UREF LISTING

DDS$EQCS#    8641**ENTRY
DDS$ES_INQ      31**PROC
DDS$GETLB#    8573**ENTRY
EST1    8656**LABEL
TEMP      35**DCL
