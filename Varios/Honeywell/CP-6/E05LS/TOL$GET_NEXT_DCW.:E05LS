VERSION E05

PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:1    
        1        1        /*M* TOL$GET_NEXT_DCW     TOLTS LOADER GET NEXT DCW program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             PRB=Y,CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11
       12       12        TOL$GET_NEXT_DCW: PROC (DCW,
       13       13                   CALL_SEQUENCE,
       14       14                   STATUS);
       15       15        %EJECT;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:2    
       16       16        /* Parameters */
       17       17
       18       18
       19       19    1      DCL 1 CALL_SEQUENCE                                     ALIGNED,
       20       20    1            2 FDCWP                                 UBIN (18) UNAL,
       21       21    1            2 STATUSP                               UBIN (18) UNAL,
       22       22    1            2 DECK#                                 UBIN (18) UNAL,
       23       23    1            2 NEXT_ENTRY                            UBIN (18) UNAL,
       24       24    1            2 CATALOG_CKSUM                                   ALIGNED,
       25       25    1              3 UPPER                               UBIN (18) UNAL,
       26       26    1              3 LOWER                               UBIN (18) UNAL,
       27       27    1            2 CATALOG_CHECKSUM  REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       28       28    1            2 DECK_OFFSET       REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       29       29    1            2 *                                     UBIN (18) UNAL,
       30       30    1            2 ENTRY_COUNT                           UBIN (18) UNAL,
       31       31    1            2 CARD_COUNT        REDEF ENTRY_COUNT   UBIN (18) UNAL,
       32       32    1            2 CHECKSUM                              UBIN (36) ALIGNED,
       33       33    1            2 RELOCATION                            UBIN (36) ALIGNED,
       34       34    1            2 NO_MORE                               SBIN (36) ALIGNED;
       35       35    1      DCL 1 DCW                                               ALIGNED,
       36       36    1            2 ADDRESS                               UBIN (18) UNAL,
       37       37    1            2 TYPE                                  UBIN (6)  UNAL,
       38       38    1            2 SIZE                                  UBIN (12) UNAL;
       39       39    1      DCL 1 STATUS                                            ALIGNED,
       40       40    1            2 HARDWARE_STATUS                       BIT  (36) ALIGNED,
       41       41    1            2 LAST_DCW_POINTER                      UBIN (18) UNAL,
       42       42    1            2 RESIDUE                               UBIN (18) UNAL;
       43       43        %EJECT;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:3    
       44       44        /* External Variables */
       45       45
       46       46    1      DCL   TOL$IONTP_FOUND                           SYMREF UBIN (36)  ALIGNED;
       47       47    1      DCL   IONTP_FOUND             REDEF TOL$IONTP_FOUND    UBIN (36)  ALIGNED;
       48       48    1      DCL   TOL$SPAN_LOWER                            SYMREF UBIN (36)  ALIGNED;
       49       49    1      DCL   SPAN_LOWER              REDEF TOL$SPAN_LOWER     UBIN (36)  ALIGNED;
       50       50    1      DCL   TOL$SPAN_UPPER                            SYMREF UBIN (36)  ALIGNED;
       51       51    1      DCL   SPAN_UPPER              REDEF TOL$SPAN_UPPER     UBIN (36)  ALIGNED;
       52       52        %EJECT;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:4    
       53       53        /* Local Variables */
       54       54
       55       55    1      DCL   DATA_TRANSFER_FOUND                     UBIN (36) ALIGNED;
       56       56
       57       57        /* Local Structures */
       58       58
       59       59    1      DCL 1 DCW_LIST_ENTRY          BASED (DCW$)                        ALIGNED,
       60       60    1            2 *                                              UBIN (36)  ALIGNED;
       61       61    1      DCL   DCW$                                             PTR        ALIGNED;
       62       62    1      DCL 1 DCWP                    REDEF DCW$                          ALIGNED,
       63       63    1            2 ADDRESS                                        UBIN (18)  UNAL,
       64       64    1            2 *                                              BIT  (18)  UNAL;
       65       65        %EJECT;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:5    
       66       66        /* External Entries */
       67       67
       68       68
       69       69    1      DCL   TOL$BAD_CARD                                     ENTRY (1);
       70       70
       71       71        /* Error Messages */
       72       72
       73       73    1      DCL 1 ER#24  STATIC    UNAL,
       74       74    1            2 *    CHAR (2)  UNAL INIT ('*'),
       75       75    1            2 *    CHAR (8)  UNAL INIT ('ILLEGAL'),
       76       76    1            2 *    CHAR (36) UNAL INIT ('CALL TO TOL$GET_NEXT_DCW (PAST IOTD)');
       77       77        %EJECT;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:6    
       78       78        /* Main Program */
       79       79
       80       80    1      IF (STATUS.LAST_DCW_POINTER ~= CALL_SEQUENCE.FDCWP - 1 AND DCW.TYPE = 0)
       81       81    1      THEN CALL TOL$BAD_CARD (VECTOR (ER#24));
       82       82    1      DCW$ = ADDR (CALL_SEQUENCE);
       83       83    1      STATUS.LAST_DCW_POINTER = STATUS.LAST_DCW_POINTER + 1;
       84       84    1      SPAN_LOWER = SPAN_UPPER;
       85       85    1      DATA_TRANSFER_FOUND = 0;
       86       86    2      DO WHILE (DATA_TRANSFER_FOUND = 0);
       87       87    2         DCWP.ADDRESS = STATUS.LAST_DCW_POINTER;
       88       88    2         DCW = DCW_LIST_ENTRY;
       89       89    2         IF (DCW.TYPE ~= 3)
       90       90    2         THEN DATA_TRANSFER_FOUND = 1;
       91       91    2         ELSE STATUS.LAST_DCW_POINTER = DCW.ADDRESS;
       92       92    2      END;
       93       93    1      IF (DCW.SIZE = 0)
       94       94    1      THEN STATUS.RESIDUE = 4096;
       95       95    1      ELSE STATUS.RESIDUE = DCW.SIZE;
       96       96    1      IF (DCW.TYPE = 2)
       97       97    1      THEN IONTP_FOUND = 1;
       98       98    1      SPAN_UPPER = SPAN_LOWER + STATUS.RESIDUE;
       99       99    1      RETURN;
      100      100
      101      101    1   END TOL$GET_NEXT_DCW;

PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:7    
      No diagnostics issued in procedure TOL$GET_NEXT_DCW.

   Procedure TOL$GET_NEXT_DCW requires 66 words for executable code.
   Procedure TOL$GET_NEXT_DCW requires 8 words of local(AUTO) storage.

    No errors detected in file TOL$GET_NEXT_DCW.:E05TSI    .

PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:8    

 Object Unit name= TOL$GET_NEXT_DCW                           File name= TOL$GET_NEXT_DCW.:E05TOU
 UTS= JUL 30 '97 06:26:23.28 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    12     14  TOL$GET_NEXT_DCW
    1   Proc  even  none    66    102  TOL$GET_NEXT_DCW
    2  RoData even  none     3      3  TOL$GET_NEXT_DCW

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        3  TOL$GET_NEXT_DCW

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 TOL$BAD_CARD
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     TOL$IONTP_FOUND                       TOL$SPAN_LOWER                        TOL$SPAN_UPPER
     B_VECTNIL
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:9    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:10   


        1        1        /*M* TOL$GET_NEXT_DCW     TOLTS LOADER GET NEXT DCW program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             PRB=Y,CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11
       12       12        TOL$GET_NEXT_DCW: PROC (DCW,

     12  1 000000   000000 700200 xent  TOL$GET_NEX* TSX0  ! X66_AUTO_3
         1 000001   000010 000003                    ZERO    8,3

       13       13                   CALL_SEQUENCE,
       14       14                   STATUS);
       15       15        %EJECT;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:11   
       16       16        /* Parameters */
       17       17
       18       18
       19       19    1      DCL 1 CALL_SEQUENCE                                     ALIGNED,
       20       20    1            2 FDCWP                                 UBIN (18) UNAL,
       21       21    1            2 STATUSP                               UBIN (18) UNAL,
       22       22    1            2 DECK#                                 UBIN (18) UNAL,
       23       23    1            2 NEXT_ENTRY                            UBIN (18) UNAL,
       24       24    1            2 CATALOG_CKSUM                                   ALIGNED,
       25       25    1              3 UPPER                               UBIN (18) UNAL,
       26       26    1              3 LOWER                               UBIN (18) UNAL,
       27       27    1            2 CATALOG_CHECKSUM  REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       28       28    1            2 DECK_OFFSET       REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       29       29    1            2 *                                     UBIN (18) UNAL,
       30       30    1            2 ENTRY_COUNT                           UBIN (18) UNAL,
       31       31    1            2 CARD_COUNT        REDEF ENTRY_COUNT   UBIN (18) UNAL,
       32       32    1            2 CHECKSUM                              UBIN (36) ALIGNED,
       33       33    1            2 RELOCATION                            UBIN (36) ALIGNED,
       34       34    1            2 NO_MORE                               SBIN (36) ALIGNED;
       35       35    1      DCL 1 DCW                                               ALIGNED,
       36       36    1            2 ADDRESS                               UBIN (18) UNAL,
       37       37    1            2 TYPE                                  UBIN (6)  UNAL,
       38       38    1            2 SIZE                                  UBIN (12) UNAL;
       39       39    1      DCL 1 STATUS                                            ALIGNED,
       40       40    1            2 HARDWARE_STATUS                       BIT  (36) ALIGNED,
       41       41    1            2 LAST_DCW_POINTER                      UBIN (18) UNAL,
       42       42    1            2 RESIDUE                               UBIN (18) UNAL;
       43       43        %EJECT;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:12   
       44       44        /* External Variables */
       45       45
       46       46    1      DCL   TOL$IONTP_FOUND                           SYMREF UBIN (36)  ALIGNED;
       47       47    1      DCL   IONTP_FOUND             REDEF TOL$IONTP_FOUND    UBIN (36)  ALIGNED;
       48       48    1      DCL   TOL$SPAN_LOWER                            SYMREF UBIN (36)  ALIGNED;
       49       49    1      DCL   SPAN_LOWER              REDEF TOL$SPAN_LOWER     UBIN (36)  ALIGNED;
       50       50    1      DCL   TOL$SPAN_UPPER                            SYMREF UBIN (36)  ALIGNED;
       51       51    1      DCL   SPAN_UPPER              REDEF TOL$SPAN_UPPER     UBIN (36)  ALIGNED;
       52       52        %EJECT;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:13   
       53       53        /* Local Variables */
       54       54
       55       55    1      DCL   DATA_TRANSFER_FOUND                     UBIN (36) ALIGNED;
       56       56
       57       57        /* Local Structures */
       58       58
       59       59    1      DCL 1 DCW_LIST_ENTRY          BASED (DCW$)                        ALIGNED,
       60       60    1            2 *                                              UBIN (36)  ALIGNED;
       61       61    1      DCL   DCW$                                             PTR        ALIGNED;
       62       62    1      DCL 1 DCWP                    REDEF DCW$                          ALIGNED,
       63       63    1            2 ADDRESS                                        UBIN (18)  UNAL,
       64       64    1            2 *                                              BIT  (18)  UNAL;
       65       65        %EJECT;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:14   
       66       66        /* External Entries */
       67       67
       68       68
       69       69    1      DCL   TOL$BAD_CARD                                     ENTRY (1);
       70       70
       71       71        /* Error Messages */
       72       72
       73       73    1      DCL 1 ER#24  STATIC    UNAL,
       74       74    1            2 *    CHAR (2)  UNAL INIT ('*'),
       75       75    1            2 *    CHAR (8)  UNAL INIT ('ILLEGAL'),
       76       76    1            2 *    CHAR (36) UNAL INIT ('CALL TO TOL$GET_NEXT_DCW (PAST IOTD)');
       77       77        %EJECT;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:15   
       78       78        /* Main Program */
       79       79
       80       80    1      IF (STATUS.LAST_DCW_POINTER ~= CALL_SEQUENCE.FDCWP - 1 AND DCW.TYPE = 0)

     80  1 000002   200004 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         1 000003   000000 220100                    LDX0    0,,PR0
         1 000004   777777 621010                    EAX1    -1,X0
         1 000005   200005 471500                    LDP1    @STATUS,,AUTO
         1 000006   100001 101100                    CMPX1   1,,PR1
         1 000007   000020 600000 1                  TZE     s:82
         1 000010   200003 473500                    LDP3    @DCW,,AUTO
         1 000011   300000 236100                    LDQ     0,,PR3
         1 000012   770000 316007                    CANQ    -4096,DL
         1 000013   000020 601000 1                  TNZ     s:82

       81       81    1      THEN CALL TOL$BAD_CARD (VECTOR (ER#24));

     81  1 000014   000002 630400 2                  EPPR0   2
         1 000015   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000016   000000 701000 xent               TSX1    TOL$BAD_CARD
         1 000017   000000 011000                    NOP     0

       82       82    1      DCW$ = ADDR (CALL_SEQUENCE);

     82  1 000020   200004 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         1 000021   200007 756100                    STQ     DCW$,,AUTO

       83       83    1      STATUS.LAST_DCW_POINTER = STATUS.LAST_DCW_POINTER + 1;

     83  1 000022   200005 470500                    LDP0    @STATUS,,AUTO
         1 000023   000001 220100                    LDX0    1,,PR0
         1 000024   000001 621010                    EAX1    1,X0
         1 000025   000001 741100                    STX1    1,,PR0

       84       84    1      SPAN_LOWER = SPAN_UPPER;

     84  1 000026   000000 235000 xsym               LDA     TOL$SPAN_UPPER
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:16   
         1 000027   000000 755000 xsym               STA     TOL$SPAN_LOWER

       85       85    1      DATA_TRANSFER_FOUND = 0;

     85  1 000030   200006 450100                    STZ     DATA_TRANSFER_FOUND,,AUTO

       86       86    2      DO WHILE (DATA_TRANSFER_FOUND = 0);

     86  1 000031   200006 235100                    LDA     DATA_TRANSFER_FOUND,,AUTO
         1 000032   000055 601000 1                  TNZ     s:93

       87       87    2         DCWP.ADDRESS = STATUS.LAST_DCW_POINTER;

     87  1 000033   200005 470500                    LDP0    @STATUS,,AUTO
         1 000034   000001 220100                    LDX0    1,,PR0
         1 000035   200007 740100                    STX0    DCW$,,AUTO

       88       88    2         DCW = DCW_LIST_ENTRY;

     88  1 000036   200007 471500                    LDP1    DCW$,,AUTO
         1 000037   100000 236100                    LDQ     0,,PR1
         1 000040   200003 473500                    LDP3    @DCW,,AUTO
         1 000041   300000 756100                    STQ     0,,PR3

       89       89    2         IF (DCW.TYPE ~= 3)

     89  1 000042   300000 236100                    LDQ     0,,PR3
         1 000043   770000 376007                    ANQ     -4096,DL
         1 000044   030000 116007                    CMPQ    12288,DL
         1 000045   000051 600000 1                  TZE     s:91

       90       90    2         THEN DATA_TRANSFER_FOUND = 1;

     90  1 000046   000001 235007                    LDA     1,DL
         1 000047   200006 755100                    STA     DATA_TRANSFER_FOUND,,AUTO
         1 000050   000053 710000 1                  TRA     s:92

PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:17   
       91       91    2         ELSE STATUS.LAST_DCW_POINTER = DCW.ADDRESS;

     91  1 000051   300000 221100                    LDX1    0,,PR3
         1 000052   000001 741100                    STX1    1,,PR0

       92       92    2      END;

     92  1 000053   200006 235100                    LDA     DATA_TRANSFER_FOUND,,AUTO
         1 000054   000033 600000 1                  TZE     s:87

       93       93    1      IF (DCW.SIZE = 0)

     93  1 000055   200003 471500                    LDP1    @DCW,,AUTO
         1 000056   100000 236100                    LDQ     0,,PR1
         1 000057   007777 316007                    CANQ    4095,DL
         1 000060   000064 601000 1                  TNZ     s:95

       94       94    1      THEN STATUS.RESIDUE = 4096;

     94  1 000061   010000 220003                    LDX0    4096,DU
         1 000062   000001 440100                    SXL0    1,,PR0
         1 000063   000067 710000 1                  TRA     s:96

       95       95    1      ELSE STATUS.RESIDUE = DCW.SIZE;

     95  1 000064   100000 720100                    LXL0    0,,PR1
         1 000065   007777 360003                    ANX0    4095,DU
         1 000066   000001 440100                    SXL0    1,,PR0

       96       96    1      IF (DCW.TYPE = 2)

     96  1 000067   100000 236100                    LDQ     0,,PR1
         1 000070   770000 376007                    ANQ     -4096,DL
         1 000071   020000 116007                    CMPQ    8192,DL
         1 000072   000075 601000 1                  TNZ     s:98

       97       97    1      THEN IONTP_FOUND = 1;
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:18   

     97  1 000073   000001 235007                    LDA     1,DL
         1 000074   000000 755000 xsym               STA     TOL$IONTP_FOUND

       98       98    1      SPAN_UPPER = SPAN_LOWER + STATUS.RESIDUE;

     98  1 000075   000001 236100                    LDQ     1,,PR0
         1 000076   777777 376007                    ANQ     -1,DL
         1 000077   000000 036000 xsym               ADLQ    TOL$SPAN_LOWER
         1 000100   000000 756000 xsym               STQ     TOL$SPAN_UPPER

       99       99    1      RETURN;

     99  1 000101   000000 702200 xent               TSX2  ! X66_ARET

ER#24
 Sect OctLoc
   0     000   052040 111114   114105 107101   114040 103101   114114 040124    * ILLEGAL CALL T
   0     004   117040 124117   114044 107105   124137 116105   130124 137104    O TOL$GET_NEXT_D
   0     010   103127 040050   120101 123124   040111 117124   104051 ******    CW (PAST IOTD)..

(unnamed)
 Sect OctLoc
   2     000   000013 377640   000000 006000   000000 006000                    ............
      100      100
      101      101    1   END TOL$GET_NEXT_DCW;

PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:19   
      No diagnostics issued in procedure TOL$GET_NEXT_DCW.
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:20   

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    12-   101     21    24     1      0  y   y    3   1 TOL$GET_NEXT_DCW
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:21   

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              12   1      0 Proc    0                        $$$$    80   1      2 If      0
              81   1     14 Call    0                                82   1     20 Assign  0
         $    83   1     22 Assign  0                                84   1     26 Assign  0
              85   1     30 Assign  0                                86   1     31 DoWhil  0
              87   1     33 Assign  0                          $$    88   1     36 Assign  0
              89   1     42 If      0                                90   1     46 Assign  0
              91   1     51 Assign  0                                92   1     53 EndWhi  0
         $    93   1     55 If      0                                94   1     61 Assign  0
              95   1     64 Assign  0                                96   1     67 If      0
              97   1     73 Assign  0                                98   1     75 Assign  0
              99   1    101 Return  0

  **** Statement type totals  ****

    12 Assign     1 Call       4 If         1 Return     1 DoWhil     1 EndWhi
     1 Proc

 # major stmts=   19 Code/major= 3.47 # stmts=   21 Code/stmt= 3.14  Point total= 97.6
 Cost/major stmt=  3.0 Cost/stmt=  2.7 Total cost=     57.7

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$$$
   6-8  $$$$
  8-10
 10-12  $$$$
 12-14
 14-16
 16-18
 18-20
 20-22
 22-??
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:22   

 **** Variables and constants ****

  ****  Section 000  Data  TOL$GET_NEXT_DCW

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(414)   r     1 ER#24

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CALL_SEQUENCE             3-0-0/w PTR         r     1 @DCW
     5-0-0/w PTR         r     1 @STATUS                    6-0-0/w UBIN        r     1 DATA_TRANSFER_FOUND
     7-0-0/w PTR         r     1 DCW$

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    *0-0-0/w STRC(252)   r     1 CALL_SEQUENCE
     0-0-0/b UBIN(18)    r         2 FDCWP

    *0-0-0/w STRC        r     1 DCW
     0-0-0/b UBIN(18)    r         2 ADDRESS
     0-2-0/b UBIN(6)     r         2 TYPE
     0-2-6/b UBIN(12)    r         2 SIZE

     7-0-0/w STRC        r     1 DCWP
     7-0-0/b UBIN(18)    r         2 ADDRESS

    *0-0-0/w STRC(72)    r     1 STATUS
     1-0-0/b UBIN(18)    r         2 LAST_DCW_POINTER
     1-2-0/b UBIN(18)    r         2 RESIDUE


PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:23   
  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 IONTP_FOUND                0-0-0/w UBIN        r     1 SPAN_LOWER
     0-0-0/w UBIN        r     1 SPAN_UPPER                 0-0-0/w UBIN        r     1 TOL$IONTP_FOUND
     0-0-0/w UBIN        r     1 TOL$SPAN_LOWER             0-0-0/w UBIN        r     1 TOL$SPAN_UPPER

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 DCW_LIST_ENTRY


   Procedure TOL$GET_NEXT_DCW requires 66 words for executable code.
   Procedure TOL$GET_NEXT_DCW requires 8 words of local(AUTO) storage.

    No errors detected in file TOL$GET_NEXT_DCW.:E05TSI    .
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:24   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:25   
          MINI XREF LISTING

CALL_SEQUENCE
        19**DCL        12--PROC       82--ASSIGN
CALL_SEQUENCE.CATALOG_CKSUM
        24**DCL        27--REDEF      28--REDEF
CALL_SEQUENCE.ENTRY_COUNT
        30**DCL        31--REDEF
CALL_SEQUENCE.FDCWP
        20**DCL        80>>IF
DATA_TRANSFER_FOUND
        55**DCL        85<<ASSIGN     86>>DOWHILE    90<<ASSIGN
DCW
        35**DCL        12--PROC       88<<ASSIGN
DCW.ADDRESS
        36**DCL        91>>ASSIGN
DCW.SIZE
        38**DCL        93>>IF         95>>ASSIGN
DCW.TYPE
        37**DCL        80>>IF         89>>IF         96>>IF
DCW$
        61**DCL        59--IMP-PTR    62--REDEF      82<<ASSIGN     88>>ASSIGN
DCWP.ADDRESS
        63**DCL        87<<ASSIGN
DCW_LIST_ENTRY
        59**DCL        88>>ASSIGN
ER#24
        73**DCL        81--CALL
IONTP_FOUND
        47**DCL        97<<ASSIGN
SPAN_LOWER
        49**DCL        84<<ASSIGN     98>>ASSIGN
SPAN_UPPER
        51**DCL        84>>ASSIGN     98<<ASSIGN
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:26   
STATUS
        39**DCL        12--PROC
STATUS.LAST_DCW_POINTER
        41**DCL        80>>IF         83<<ASSIGN     83>>ASSIGN     87>>ASSIGN     91<<ASSIGN
STATUS.RESIDUE
        42**DCL        94<<ASSIGN     95<<ASSIGN     98>>ASSIGN
TOL$BAD_CARD
        69**DCL-ENT    81--CALL
TOL$IONTP_FOUND
        46**DCL        47--REDEF
TOL$SPAN_LOWER
        48**DCL        49--REDEF
TOL$SPAN_UPPER
        50**DCL        51--REDEF
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:27   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOL$GET_NEXT_DCW File=TOL$GET_NEXT_DCW.:E05TSI                WED 07/30/97 06:26 Page:28   
              FULL UREF LISTING

CALL_SEQUENCE.CARD_COUNT
        31**DCL
CALL_SEQUENCE.CATALOG_CHECKSUM
        27**DCL
CALL_SEQUENCE.CATALOG_CKSUM.LOWER
        26**DCL
CALL_SEQUENCE.CATALOG_CKSUM.UPPER
        25**DCL
CALL_SEQUENCE.CHECKSUM
        32**DCL
CALL_SEQUENCE.DECK#
        22**DCL
CALL_SEQUENCE.DECK_OFFSET
        28**DCL
CALL_SEQUENCE.NEXT_ENTRY
        23**DCL
CALL_SEQUENCE.NO_MORE
        34**DCL
CALL_SEQUENCE.RELOCATION
        33**DCL
CALL_SEQUENCE.STATUSP
        21**DCL
DCWP
        62**DCL
STATUS.HARDWARE_STATUS
        40**DCL
TOL$GET_NEXT_DCW
        12**PROC
