VERSION E05

PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:1    
        1        1        /*M*    CPD$SYNTRY     Entry routines used interactively with X$PARSE         */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DFC   */
        8        8        /**/
        9        9        /*P*    NAME:    CPD$SYNTRY
       10       10                PURPOSE:    This module contains the entry points for detailed error
       11       11                         conditions resulting from the parse of a given command; there
       12       12                         is a unique entry for each IBEX command handled by the
       13       13                         CPD$SYNTAX module.  The intent is to isolate the error in the
       14       14                         command to the beginning character which is in error and
       15       15                         then recover, as much as is possible, to continue parsing the
       16       16                         command and perhaps discover additional syntax errors.
       17       17                         The errors detected will be tabled and returned to the caller
       18       18                         so that the output of messages describing the errors can be
       19       19                         properly sequenced.
       20       20        */
       21       21        CPD$SYNTRY:
       22       22                PROC(P$PARAM);
       23       23        %EJECT;
PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:2    
       24       24                %INCLUDE CP_MACROS_C;
       25      776                %INCLUDE CP_SUBS_C;
       26     1693                %INCLUDE CP_6_SUBS ;
       27     2233                %INCLUDE CP_6 ;
       28     7792                %INCLUDE XU_MACRO_C;
       29    10898                %INCLUDE XU_SUBS_C;
       30    10990        /**/
       31    10991        %PARSE$PARAM (NAME=P$PARAM,STCLASS=" ");
       32    11072        /**/
       33    11073        %U$PARAM (NAME=U$PARAM,STCLASS=BASED);
       34    11089    1   DCL DONE BIT(1) ;
       35    11090        %EJECT;
PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:3    
       36    11091        /*******************************************************************************
       37    11092        *                               BEGIN PROCEDURE                                *
       38    11093        *******************************************************************************/
       39    11094    1           IF P$PARAM.TYPE = %INPUT# THEN
       40    11095    1              CALL P$PARAM.USER$->U$PARAM.CNTU$$(P$PARAM);
       41    11096    1           ELSE
       42    11097    1                   CALL P$PARAM.USER$->U$PARAM.SPCL$$(P$PARAM);
       43    11098    1           RETURN;
       44    11099    1   END CPD$SYNTRY;
       45    11100        %EOD ;

PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:4    
--  Include file information  --

   XU_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure CPD$SYNTRY.

   Procedure CPD$SYNTRY requires 21 words for executable code.
   Procedure CPD$SYNTRY requires 6 words of local(AUTO) storage.

PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:5    

 Object Unit name= CPD$SYNTRY                                 File name= CPD$SYNTRY.:E05TOU
 UTS= JUL 29 '97 11:34:09.04 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    21     25  CPD$SYNTRY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        1  CPD$SYNTRY

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_VECTNIL
PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:6    


        1        1        /*M*    CPD$SYNTRY     Entry routines used interactively with X$PARSE         */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DFC   */
        8        8        /**/
        9        9        /*P*    NAME:    CPD$SYNTRY
       10       10                PURPOSE:    This module contains the entry points for detailed error
       11       11                         conditions resulting from the parse of a given command; there
       12       12                         is a unique entry for each IBEX command handled by the
       13       13                         CPD$SYNTAX module.  The intent is to isolate the error in the
       14       14                         command to the beginning character which is in error and
       15       15                         then recover, as much as is possible, to continue parsing the
       16       16                         command and perhaps discover additional syntax errors.
       17       17                         The errors detected will be tabled and returned to the caller
       18       18                         so that the output of messages describing the errors can be
       19       19                         properly sequenced.
       20       20        */
       21       21        CPD$SYNTRY:
       22       22                PROC(P$PARAM);

     22  1 000000   000000 700200 xent  CPD$SYNTRY   TSX0  ! X66_AUTO_1
         1 000001   000006 000001                    ZERO    6,1

       23       23        %EJECT;
PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:7    
       24       24                %INCLUDE CP_MACROS_C;
       25      776                %INCLUDE CP_SUBS_C;
       26     1693                %INCLUDE CP_6_SUBS ;
       27     2233                %INCLUDE CP_6 ;
       28     7792                %INCLUDE XU_MACRO_C;
       29    10898                %INCLUDE XU_SUBS_C;
       30    10990        /**/
       31    10991        %PARSE$PARAM (NAME=P$PARAM,STCLASS=" ");
       32    11072        /**/
       33    11073        %U$PARAM (NAME=U$PARAM,STCLASS=BASED);
       34    11089    1   DCL DONE BIT(1) ;
       35    11090        %EJECT;
PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:8    
       36    11091        /*******************************************************************************
       37    11092        *                               BEGIN PROCEDURE                                *
       38    11093        *******************************************************************************/
       39    11094    1           IF P$PARAM.TYPE = %INPUT# THEN

  11094  1 000002   200003 470500                    LDP0    @P$PARAM,,AUTO
         1 000003   000000 236100                    LDQ     0,,PR0
         1 000004   777000 376003                    ANQ     -512,DU
         1 000005   004000 116003                    CMPQ    2048,DU
         1 000006   000016 601000 1                  TNZ     s:11097

       40    11095    1              CALL P$PARAM.USER$->U$PARAM.CNTU$$(P$PARAM);

  11095  1 000007   000006 471500                    LDP1    6,,PR0
         1 000010   200003 630500                    EPPR0   @P$PARAM,,AUTO
         1 000011   100002 220100                    LDX0    2,,PR1
         1 000012   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000013   000000 701010                    TSX1    0,X0
         1 000014   000000 011000                    NOP     0
         1 000015   000024 710000 1                  TRA     s:11098

       41    11096    1           ELSE
       42    11097    1                   CALL P$PARAM.USER$->U$PARAM.SPCL$$(P$PARAM);

  11097  1 000016   000006 471500                    LDP1    6,,PR0
         1 000017   200003 630500                    EPPR0   @P$PARAM,,AUTO
         1 000020   100003 220100                    LDX0    3,,PR1
         1 000021   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000022   000000 701010                    TSX1    0,X0
         1 000023   000000 011000                    NOP     0

       43    11098    1           RETURN;

  11098  1 000024   000000 702200 xent               TSX2  ! X66_ARET
       44    11099    1   END CPD$SYNTRY;
       45    11100        %EOD ;

PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:9    
--  Include file information  --

   XU_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure CPD$SYNTRY.
PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:10   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @P$PARAM                  *0-0-0/w STRC(270)   r     1 P$PARAM

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(576)   r     1 U$PARAM


   Procedure CPD$SYNTRY requires 21 words for executable code.
   Procedure CPD$SYNTRY requires 6 words of local(AUTO) storage.
PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:11   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=CPD$SYNTRY File=CPD$SYNTRY.:E05TSI                            TUE 07/29/97 11:34 Page:12   
          MINI XREF LISTING

P$PARAM
     11010**DCL        21--PROC    11095<>CALL    11097<>CALL
P$PARAM.TYPE
     11011**DCL     11094>>IF
P$PARAM.USER$
     11058**DCL     11095>>CALL    11097>>CALL
U$PARAM.CNTU$$
     11077**DCL     11095>>CALL
U$PARAM.SPCL$$
     11078**DCL     11097>>CALL

PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:13   
       46        1        /*M*    CPD$SPHANDLE   Entry routine used interactively with CXG$GETCMD      */
       47        2        /*T***********************************************************/
       48        3        /*T*                                                         */
       49        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       50        5        /*T*                                                         */
       51        6        /*T***********************************************************/
       52        7        /*X*  DMC,DFC   */
       53        8        /**/
       54        9        /*P*    NAME:    CPD$SPHANDLE
       55       10                PURPOSE:    This module contains the entry point of CPD$SYNTRY.
       56       11                         This routine will be called whenever a record is continued
       57       12                         in CXG$GETCMD.  Two parameters will be passed to
       58       13                         CPD$SPHANDLE, the GETCMD fpt and the P$PARAM structure.
       59       14                         Only the P$PARAM structure gets passed to CPD$SYNTRY.
       60       15                         There is a pointer P$PARAM.GETCMD$ that points to the
       61       16                         GETCMD fpt.
       62       17        */
       63       18        CPD$SPHANDLE:
       64       19                PROC(GET$CMD, P$PARAM);
       65       20        %EJECT;
PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:14   
       66       21              %INCLUDE B$JIT;
       67      624              %INCLUDE CP_MACROS_C ;
       68     1376              %INCLUDE CP_SUBS_C ;
       69     2293              %INCLUDE CP_6;
       70     7852              %INCLUDE CP_6_SUBS;
       71     8392              %INCLUDE XU_MACRO_C ;
       72    11498              %INCLUDE XU_SUBS_C ;
       73    11590              %INCLUDE CP_DATA_R;
       74    14153        /**/
       75    14154        %XUG_GETCMD (NAME=GET$CMD, STCLASS=PARAM) ;
       76    14492        %PARSE$PARAM (NAME=P$PARAM, STCLASS=PARAM) ;
       77    14573        /**/
       78    14574    1   DCL CPD$SYNTRY ENTRY(1) ;
       79    14575    1   DCL CPF$SET_PROMPT ENTRY(2) OPTIONAL;
       80    14576        /**/
       81    14577    1     CALL CPD$SYNTRY (P$PARAM) ;
       82    14578    1     IF (B$JIT.MODE = %M_INT#) AND (B$JIT.NEXTCC = %CC_FROMUC#)
       83    14579    1        THEN                 /* we need prompts if interactive read */
       84    14580    2           DO;
       85    14581    2              CALL CPF$SET_PROMPT (GET$CMD.PROMPT_, PRMT_C);
       86    14582    2              GET$CMD.ALWAYS_SET_PROMPT# = %YES#;
       87    14583    2           END;
       88    14584    1     RETURN ;
       89    14585        /**/
       90    14586    1   END   CPD$SPHANDLE ;

PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:15   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure CPD$SPHANDLE.

   Procedure CPD$SPHANDLE requires 28 words for executable code.
   Procedure CPD$SPHANDLE requires 8 words of local(AUTO) storage.

    No errors detected in file CPD$SYNTRY.:E05TSI    .

PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:16   

 Object Unit name= CPD$SPHANDLE                               File name= CPD$SYNTRY.:E05TOU
 UTS= JUL 29 '97 11:34:21.96 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    28     34  CPD$SPHANDLE
    2  RoData even  none     1      1  CPD$SPHANDLE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        2  CPD$SPHANDLE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 CPD$SYNTRY
         yes    yes    Std       2 CPF$SET_PROMPT
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    B$JIT$                                B_VECTNIL
PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:17   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:18   


       46        1        /*M*    CPD$SPHANDLE   Entry routine used interactively with CXG$GETCMD      */
       47        2        /*T***********************************************************/
       48        3        /*T*                                                         */
       49        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       50        5        /*T*                                                         */
       51        6        /*T***********************************************************/
       52        7        /*X*  DMC,DFC   */
       53        8        /**/
       54        9        /*P*    NAME:    CPD$SPHANDLE
       55       10                PURPOSE:    This module contains the entry point of CPD$SYNTRY.
       56       11                         This routine will be called whenever a record is continued
       57       12                         in CXG$GETCMD.  Two parameters will be passed to
       58       13                         CPD$SPHANDLE, the GETCMD fpt and the P$PARAM structure.
       59       14                         Only the P$PARAM structure gets passed to CPD$SYNTRY.
       60       15                         There is a pointer P$PARAM.GETCMD$ that points to the
       61       16                         GETCMD fpt.
       62       17        */
       63       18        CPD$SPHANDLE:
       64       19                PROC(GET$CMD, P$PARAM);

     19  1 000000   000000 700200 xent  CPD$SPHANDLE TSX0  ! X66_AUTO_2
         1 000001   000010 000002                    ZERO    8,2

       65       20        %EJECT;
PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:19   
       66       21              %INCLUDE B$JIT;
       67      624              %INCLUDE CP_MACROS_C ;
       68     1376              %INCLUDE CP_SUBS_C ;
       69     2293              %INCLUDE CP_6;
       70     7852              %INCLUDE CP_6_SUBS;
       71     8392              %INCLUDE XU_MACRO_C ;
       72    11498              %INCLUDE XU_SUBS_C ;
       73    11590              %INCLUDE CP_DATA_R;
       74    14153        /**/
       75    14154        %XUG_GETCMD (NAME=GET$CMD, STCLASS=PARAM) ;
       76    14492        %PARSE$PARAM (NAME=P$PARAM, STCLASS=PARAM) ;
       77    14573        /**/
       78    14574    1   DCL CPD$SYNTRY ENTRY(1) ;
       79    14575    1   DCL CPF$SET_PROMPT ENTRY(2) OPTIONAL;
       80    14576        /**/
       81    14577    1     CALL CPD$SYNTRY (P$PARAM) ;

  14577  1 000002   200004 630500                    EPPR0   @P$PARAM,,AUTO
         1 000003   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000004   000000 701000 xent               TSX1    CPD$SYNTRY
         1 000005   000000 011000                    NOP     0

       82    14578    1     IF (B$JIT.MODE = %M_INT#) AND (B$JIT.NEXTCC = %CC_FROMUC#)

  14578  1 000006   000000 470400 xsym               LDP0    B$JIT$
         1 000007   000000 236100                    LDQ     0,,PR0
         1 000010   740000 376003                    ANQ     -16384,DU
         1 000011   140000 116003                    CMPQ    49152,DU
         1 000012   000033 601000 1                  TNZ     s:14584
         1 000013   000151 236100                    LDQ     105,,PR0
         1 000014   000777 376003                    ANQ     511,DU
         1 000015   000003 116003                    CMPQ    3,DU
         1 000016   000033 601000 1                  TNZ     s:14584

       83    14579    1        THEN                 /* we need prompts if interactive read */
       84    14580    2           DO;

PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:20   
       85    14581    2              CALL CPF$SET_PROMPT (GET$CMD.PROMPT_, PRMT_C);

  14581  1 000017   000000 236000 2                  LDQ     0
         1 000020   200007 756100                    STQ     @P$PARAM+3,,AUTO
         1 000021   200003 236100                    LDQ     @GET$CMD,,AUTO
         1 000022   000025 036003                    ADLQ    21,DU
         1 000023   200006 756100                    STQ     @P$PARAM+2,,AUTO
         1 000024   200006 630500                    EPPR0   @P$PARAM+2,,AUTO
         1 000025   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000026   000000 701000 xent               TSX1    CPF$SET_PROMPT
         1 000027   000000 011000                    NOP     0

       86    14582    2              GET$CMD.ALWAYS_SET_PROMPT# = %YES#;

  14582  1 000030   200003 470500                    LDP0    @GET$CMD,,AUTO
         1 000031   002000 236003                    LDQ     1024,DU
         1 000032   000006 256100                    ORSQ    6,,PR0

       87    14583    2           END;

       88    14584    1     RETURN ;

  14584  1 000033   000000 702200 xent               TSX2  ! X66_ARET
       89    14585        /**/
       90    14586    1   END   CPD$SPHANDLE ;

PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:21   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure CPD$SPHANDLE.
PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:22   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @GET$CMD                   4-0-0/w PTR         r     1 @P$PARAM
    *0-0-0/d STRC(1512)  r     1 GET$CMD                   *0-0-0/w STRC(270)   r     1 P$PARAM

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT


   Procedure CPD$SPHANDLE requires 28 words for executable code.
   Procedure CPD$SPHANDLE requires 8 words of local(AUTO) storage.

    No errors detected in file CPD$SYNTRY.:E05TSI    .
PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:23   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:24   
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
       442**DCL       442--REDEF
B$JIT.ERR.MID
       349**DCL       349--REDEF
B$JIT.JRESPEAK
       510**DCL       511--REDEF
B$JIT.MODE
       343**DCL     14578>>IF
B$JIT.NEXTCC
       490**DCL     14578>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
       619**DCL       619--REDEF     620--REDEF
B$JIT.PNR
       523**DCL       523--REDEF
B$JIT.TSLINE
       617**DCL       618--REDEF
B$JIT$
     14086**DCL       343--IMP-PTR 14578>>IF      14578>>IF
CAMR_REC.ACSVEH_
     13125**DCL     13126--REDEF
CAMR_REC.ALTKEYS_
     13131**DCL     13132--REDEF   13132--REDEF
CAMR_REC.HDR_
     13130**DCL     13131--REDEF
CAMR_REC.TAB_
     13129**DCL     13130--REDEF
CAMR_REC.UHL_
     13123**DCL     13124--REDEF   13124--REDEF
CAMR_REC.V.FSN#
     13163**DCL     13163--REDEF   13163--REDEF
CAMR_REC.WSN_
     13129**DCL     13129--REDEF
PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:25   
CFPT_CLOSE.SN_
     11967**DCL     11967--REDEF
CFPT_CLOSE.UTL_
     11968**DCL     11968--REDEF
CFPT_CLOSE.V.EXPIRE#
     11982**DCL     11982--REDEF
CFPT_CLOSE.V.TYPE#
     11980**DCL     11980--REDEF
CFPT_CLOSE.V.XTNSIZE#
     11977**DCL     11977--REDEF   11979--REDEF
CFPT_OPEN.ACSVEH_
     11902**DCL     11903--REDEF
CFPT_OPEN.ALTKEYS_
     11908**DCL     11909--REDEF   11909--REDEF
CFPT_OPEN.HDR_
     11907**DCL     11908--REDEF
CFPT_OPEN.TAB_
     11906**DCL     11907--REDEF
CFPT_OPEN.UHL_
     11900**DCL     11901--REDEF   11901--REDEF
CFPT_OPEN.V.FSN#
     11940**DCL     11940--REDEF   11940--REDEF
CFPT_OPEN.WSN_
     11906**DCL     11906--REDEF
CFPT_READ.STATION_
     12006**DCL     12007--REDEF
CFPT_READ.V.DVBYTE.REREAD#
     12018**DCL     12018--REDEF
CFPT_READ.V.INDX#
     12016**DCL     12016--REDEF
CFPT_READUC.STATION_
     12376**DCL     12377--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
     12388**DCL     12388--REDEF
CFPT_READUC.V.INDX#
     12386**DCL     12386--REDEF
PL6.E3A0      #002=CPD$SPHANDLE File=CPD$SYNTRY.:E05TSI                          TUE 07/29/97 11:34 Page:26   
CFPT_TRTN.V.IR#
     12612**DCL     12613--REDEF
CFPT_WRITE.STATION_
     12044**DCL     12044--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
     12051**DCL     12051--REDEF
CFPT_WRITEUC.STATION_
     12344**DCL     12344--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
     12351**DCL     12351--REDEF
CFPT_XXX.V.STEPCC#
     13324**DCL     13324--REDEF
CGETCMD.OUT$
     13345**DCL     13351--REDEF
CPD$SYNTRY
     14574**DCL-ENT 14577--CALL
CPF$SET_PROMPT
     14575**DCL-ENT 14581--CALL
CVLP_TRMCTL.BREAKCOUNT
     12936**DCL     12937--REDEF
CVLP_WINDOW.FWINDOW#
     13032**DCL     13032--REDEF   13033--REDEF
GET$CMD
     14167**DCL        18--PROC
GET$CMD.ALWAYS_SET_PROMPT#
     14255**DCL     14582<<ASSIGN
GET$CMD.OUT$
     14172**DCL     14178--REDEF
GET$CMD.PROMPT_
     14376**DCL     14581<>CALL
P$PARAM
     14511**DCL        18--PROC    14577<>CALL
