

14:36 JUL 28 '97 G_JIT_M.:E05SI                                            1    
    1      /*M* G_JIT_M    Macro to generate the Job Information Table   */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* MEC,MOC,EXM=20,CLM=20,CRM=100   */
    8
    9                          /*F* NAME: G_JIT_M
   10
   11                          The INCLUDE file G_JIT_M contains the following macros:
   12
   13                             G$ACC_HDR - generates the structure for the account record header.
   14
   15                             G$ACC - generates the structure for the LCP-6 accounting record.
   16
   17                             G$JIT - generates the structure for the Job Information Table.
   18
   19                             G$JIT_E - generates the EQUs to be used when referencing the JIT.
   20
   21                          */
   22
   23
   24                          /*F* NAME: G$ACC_HDR
   25
   26                          The G$ACC_HDR macro generates that portion of the
   27                          LCP-6 Job Information Table that makes up the header
   28                          for the accounting record that is sent to the host.
   29
   30                          */
   31      %MACRO G$ACC_HDR (FPTN=G$ACC_HDR,
   32        STCLASS=BASED,
   33        ALGN=WALIGNED,
   34        FCN=0,
   35        LVL=1,
   36        LAST(YES=";",NO=",",ANY)=";");
   37
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            2    
   38      %LSET LISTDIR='0'B;
   39      %LSET LISTEXP='1'B;
   40      %LSET LISTCOM='0'B;
   41      %LSET LISTSUB='1'B;
   42      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   43      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
   44      %LSET INIT=CHARTEXT(' INIT');
   45      %LSET EINIT=CHARTEXT('');
   46      %ELSE;
   47      %LSET INIT=CHARTEXT('/*');
   48      %LSET EINIT=CHARTEXT('*/');
   49      %ENDIF;
   50       %IF LVL=1;
   51      DCL 1 FPTN STCLASS ALGN,
   52      %ELSE;
   53              %LVL FPTN,
   54      %ENDIF;
   55      %LSET ACC_NXT_LVL=%(LVL+1);
   56                %(ACC_NXT_LVL) %CHARTEXT('FCN ') UBIN BYTE CALIGNED %INIT(FCN)%EINIT,
   57                          /*K* FCN - UBIN.
   58                          Contains the function code that indicates that
   59                          the message is a syslog message.  This value is
   60                          %IGA_SYSLOG (39) from the KL_AFCN_C include file.
   61                          */
   62                %(ACC_NXT_LVL) *(0:1) UBIN BYTE CALIGNED %INIT(0,0)%EINIT,
   63                %(ACC_NXT_LVL) FILENUM UBIN BYTE CALIGNED %INIT(2)%EINIT LAST
   64                          /*K* FILENUM - UBIN.
   65                          Contains the code to specify that the message
   66                          is to be written to :ACCTLG.  This is always 2.
   67                          */
   68      %MEND;
   69
   70
   71
   72
   73                          /*F* NAME: G$ACC.
   74
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            3    
   75                          The G$ACC macro is used to generate a structure
   76                          that defines a record that is written to :ACCTLG
   77                          to report the system usage of an LCP-6 user.
   78
   79                          */
   80      %MACRO G$ACC (FPTN=G$ACC,
   81        CODE=0,
   82        STCLASS=BASED,
   83        ALGN=WALIGNED,
   84        LVL=1,
   85        HOST_TYPE(PACKED=0,UNPACKED=1,ANY)=1,
   86        LAST(YES=";",NO=",",ANY)=";");
   87
   88      %LSET LISTDIR='0'B;
   89      %LSET LISTEXP='1'B;
   90      %LSET LISTCOM='0'B;
   91      %LSET LISTSUB='1'B;
   92      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   93      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
   94      %LSET INIT=CHARTEXT(' INIT');
   95      %LSET EINIT=CHARTEXT('');
   96      %ELSE;
   97      %LSET INIT=CHARTEXT('/*');
   98      %LSET EINIT=CHARTEXT('*/');
   99      %ENDIF;
  100      %IF MODE_FEP;
  101      %LSET L6=1;
  102      %ELSE;
  103      %IF HOST_TYPE=0;
  104      %LSET L6=0;
  105      %ELSE;
  106      %LSET L6=1;
  107      %ENDIF;
  108      %ENDIF;
  109       %IF LVL=1;
  110      DCL 1 FPTN STCLASS ALGN,
  111      %LSET ACC_NXT_LVL=%(LVL+1);
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            4    
  112      %ELSE;
  113      %LSET ACC_NXT_LVL=%(LVL);
  114      %ENDIF;
  115           %(ACC_NXT_LVL) %CHARTEXT('CODE ') UBIN BYTE CALIGNED %INIT(CODE)%EINIT,
  116                          /*K* CODE - UBIN.
  117                          Contains a value to define the type of :ACCTLG record.
  118                          See file AZ_SUBS_C for the TYPE value EQUs.
  119                          This is always %AZ$LCP6 (7) for an LCP-6 user accounting record.
  120                          */
  121           %(ACC_NXT_LVL) TYPE UBIN BYTE CALIGNED %INIT(0)%EINIT,
  122                          /*K* TYPE - UBIN.
  123                          Contains the type of LCP-6 user accounting record.
  124                          This field will contain one of the following
  125                          EQUed values from the AZ_SUBS_C include file:
  126
  127                          }   AZ$JOBEND      2
  128                          }   AZ$STEP        4
  129                          }   AZ$PROC        5
  130                          */
  131                          /*N*
  132                          }   AZ$RECOVERY    1
  133                          */
  134           %(ACC_NXT_LVL) * UBIN BYTE CALIGNED %INIT(0)%EINIT,
  135             %(ACC_NXT_LVL) PROG_ENTRY UBIN BYTE CALIGNED %INIT(0)%EINIT,
  136                          /*K* PROG_ENTRY - BIT(8).
  137                          Set to indicate how the run-unit
  138                          was put into execution as follows:
  139                          }
  140                          }  G_PE_BF#        0    Started by BIGFOOT
  141                          }  G_PE_HOST#      1    Started via Host program
  142                          }  G_PE_LDTRC#     2    Started via M$LDTRC.
  143                          }
  144                          */
  145           %(ACC_NXT_LVL) MODE UBIN BYTE CALIGNED %INIT(0)%EINIT,
  146                          /*K* MODE - UBIN.
  147                          Specifies the type of user.  One of the
  148                          following EQUed values will be contained in this field:
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            5    
  149                          }
  150                          } G_M_USER#    1      USER Connected
  151                          } G_M_CG#      2      Comgroup Station Connected
  152                          } G_M_HANDLER# 3      Handler
  153                          } G_M_GHOST#   4      Ghost
  154                          */
  155           %(ACC_NXT_LVL) USR# UBIN BYTE CALIGNED %INIT(0)%EINIT,
  156                          /*K* USR# - UBIN.
  157                          Contains the User Number that has been assigned
  158                          to this user by the system.  This number is used
  159                          internally as an index into the system user tables
  160                          and is not used for any external user
  161                          identification.
  162                          */
  163           %(ACC_NXT_LVL) SYSID UBIN(%(%18-L6*2)) CALIGNED %INIT(0)%EINIT,
  164                          /*K* SYSID - UBIN.
  165                          Contains the unique SYStem IDentification
  166                          number that has been assigned to this user by the system.
  167                          All operator communication and external or printed form
  168                          of user identification is by SYSID.
  169                          */
  170             %(ACC_NXT_LVL) ACCN CHAR(8) %INIT(' ')%EINIT,
  171                          /*K* ACCN - CHAR(8).
  172                          Is the ACCouNt field containing the user's log on account.
  173                          */
  174             %(ACC_NXT_LVL) UNAME CHAR(12) %INIT(' ')%EINIT,
  175                          /*K* UNAME - CHAR(12).
  176                          Is the User NAME field containing the user's log on name.
  177                          */
  178            %(ACC_NXT_LVL) PROCNAME CALIGNED,
  179               %(ACC_NXT_LVL+1) L UBIN BYTE UNAL %INIT(0)%EINIT,
  180               %(ACC_NXT_LVL+1) TEXT CHAR(31) %INIT(' ')%EINIT,
  181                          /*K* PROCNAME - TEXTC(31).
  182                          Contains the name of the FPRG from the :SYS account
  183                          for which a process accounting is to be generated.
  184                          */
  185
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            6    
  186           %(ACC_NXT_LVL) START UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  187                          /*K* START - UBIN(32).
  188                          Contains the Host UTS at the time the user
  189                          or job step was initiated.
  190                          */
  191           %(ACC_NXT_LVL) STOP UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  192                          /*K* STOP - UBIN(32).
  193                          Contains the Host UTS at the time the user
  194                          or job step was terminated.
  195                          */
  196           %(ACC_NXT_LVL) USER_EXTIME UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  197           %(ACC_NXT_LVL) TUEXT REDEF USER_EXTIME UBIN(%(%36-L6*4)) CALIGNED,
  198                          /*K* USER_EXTIME - UBIN(32).
  199                          The USER EXecution TIME field contains the user
  200                          execution time used in this job or job step.
  201                          This is reported in units of hundredths of seconds.
  202                          */
  203           %(ACC_NXT_LVL) USER_SVTIME UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  204           %(ACC_NXT_LVL) TUSVT REDEF USER_SVTIME UBIN(%(%36-L6*4)) CALIGNED,
  205                          /*K* USER_SVTIME - UBIN(32).
  206                          The USER SerVice TIME field contains the user
  207                          service time used in this job or job step.
  208                          This is reported in units of hundredths of seconds.
  209                          */
  210           %(ACC_NXT_LVL) USER_MEMTIME UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  211           %(ACC_NXT_LVL) UMEMTIM REDEF USER_MEMTIME UBIN(%(%36-L6*4)) CALIGNED,
  212                          /*K* USER_MEMTIME - UBIN(32).
  213                          The USER MEMory TIME field contains the integral of
  214                          ((USER_EXTIME + USER_SVTIME) * current memory allocation) over
  215                          all quanta of the entire job or job step.
  216                          This is maintained in FEP clock ticks * page units.
  217                          A FEP clock tick is 8.3 milliseconds or 1/120 of a
  218                          second.
  219                          */
  220           %(ACC_NXT_LVL) PROC_EXTIME UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  221                          /*K* PROC_EXTIME - UBIN(32).
  222                          The PROCessor EXecution TIME field contains the processor
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            7    
  223                          execution time used in this job or job step.
  224                          This is reported in units of hundredths of seconds.
  225                          */
  226           %(ACC_NXT_LVL) PROC_SVTIME UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  227                          /*K* PROC_SVTIME - UBIN(32).
  228                          The PROCessor SerVice TIME field contains the processor
  229                          service time used in this job or job step.
  230                          This is reported in units of hundredths of seconds.
  231                          */
  232           %(ACC_NXT_LVL) PROC_MEMTIME UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  233                          /*K* PROC_MEMTIME - UBIN(32).
  234                          The Processor MEMory TIME field contains the integral of
  235                          ((PROC_EXTIME + PROC_SVTIME) * current memory allocation) over
  236                          all quanta of the entire job or job step.
  237                          This is maintained in FEP clock ticks * page units.
  238                          A FEP clock tick is 8.3 milliseconds or 1/120 of a
  239                          second.
  240                          */
  241             %(ACC_NXT_LVL) PEAK_SUDO (0:7) UBIN BYTE CALIGNED %INIT(0*0)%EINIT,
  242                          /*K* PEAK_SUDO - ARRAY(0:7) UBIN BYTE.
  243                          Is the PEAK pSeUDO array.  It contains the maximum number of each
  244                          pseudo resource allocated at any given time during
  245                          this job or job step.
  246                          .XEQ
  247                          The order is as defined by GFR_PSUDO_NM.
  248                          */
  249            %(ACC_NXT_LVL) PEAK_MEM UBIN(%(%18-L6*2)) CALIGNED %INIT(0)%EINIT,
  250                          /*K* PEAK_MEM - UBIN.
  251                          Is the PEAK MEMory field.  It contains the maximum number
  252                          of pages allocated at any given time during the job or job step.
  253                          */
  254            %(ACC_NXT_LVL) PEAK_LVLS UBIN(%(%18-L6*2)) CALIGNED %INIT(0)%EINIT,
  255                          /*K* PEAK_LVLS - UBIN.
  256                          Is the PEAK LeVeLS field.  It contains the maximum number
  257                          of interrupt levels allocated at any given time
  258                          during this job or job step.
  259                          */
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            8    
  260            %(ACC_NXT_LVL) MCLS UBIN(%(%18-L6*2)) CALIGNED %INIT(0)%EINIT,
  261           %(ACC_NXT_LVL) CALCNT REDEF MCLS UBIN(%(%18-L6*2)) CALIGNED,
  262                          /*K* MCLS - UBIN.
  263                          Contains the total number of monitor service
  264                          requests executed during this job or job step.
  265                          */
  266                          /*K* CALCNT - See MCLS.
  267                          */
  268           %(ACC_NXT_LVL) FEP# UBIN(%(%18-L6*2)) CALIGNED %INIT(0)%EINIT,
  269                          /*K* FEP# - UBIN.
  270                          Contains the FEP node number.
  271                          */
  272      /* align */
  273
  274            %(ACC_NXT_LVL) JSUNIT(0:3) UBIN(%(%18-L6*2)) CALIGNED,
  275            %(ACC_NXT_LVL) STEPUNIT(0:3) REDEF JSUNIT UBIN(%(%18-L6*2)) CALIGNED,
  276                          /*K* JSUNIT - ARRAY(0:3) UBIN.
  277                          Contains the 4 counters that are maintained by the
  278                          M$CHGUNIT monitor service.  This is step units if
  279                          this is a step or proprietary accounting record;
  280                          job units if not.
  281                          */
  282      %IF MODE_FEP;
  283           %VLP_ERRCODE (FPTN=ERR,
  284                LVL=ACC_NXT_LVL,
  285                STCLASS=STCLASS,
  286                ALGN=CALIGNED,
  287                LAST=",");
  288      %ELSE;
  289             %(ACC_NXT_LVL) ERR,
  290               %(ACC_NXT_LVL+1) FCG BIT(12) UNAL %INIT('0'B)%EINIT,
  291               %(ACC_NXT_LVL+1) MID BIT(6) UNAL %INIT('0'B)%EINIT,
  292               %(ACC_NXT_LVL+1) MON BIT(1) UNAL %INIT('0'B)%EINIT,
  293               %(ACC_NXT_LVL+1) ERR# UBIN(14) UNAL %INIT(0)%EINIT,
  294               %(ACC_NXT_LVL+1) SEV UBIN(3) UNAL %INIT(0)%EINIT,
  295      %ENDIF;
  296                          /*K* ERR.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            9    
  297                          Contains the error code that reflects the exit condition of the
  298                          user program.
  299                          G$ACC.ERR is in VLP_ERRCODE format and contains the
  300                          following subfields:
  301                          */
  302                          /*K* ERR.FCG - BIT(10).
  303                          .XEQ GU_LCP6_M VLP_ERRCODE FCG
  304                          */
  305                          /*K* ERR.MID - BIT(5).
  306                          .XEQ GU_LCP6_M VLP_ERRCODE MID
  307                          */
  308                          /*K* ERR.MON - BIT(1).
  309                          .XEQ GU_LCP6_M VLP_ERRCODE MON
  310                          */
  311                          /*K* ERR.ERR# - UBIN(13).  Is in the range 0 to 8191.  This field
  312                          .XEQ GU_LCP6_M VLP_ERRCODE ERR#
  313                          */
  314                          /*K* ERR.SEV - UBIN(3).  Is in the range is 0 to 7.  This field
  315                          .XEQ GU_LCP6_M VLP_ERRCODE SEV
  316                          */
  317      %IF MODE_FEP;
  318           %G_RNST (FPTN=FRS,
  319                      LVL=ACC_NXT_LVL,
  320                      STCLASS=STCLASS,
  321                      ALGN=CALIGNED,
  322                      LAST=",");
  323      %ELSE;
  324             %(ACC_NXT_LVL) FRS,
  325             %(ACC_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,/*coupler bit*/
  326             %(ACC_NXT_LVL+1) XKEY BIT(1) UNAL %INIT('0'B)%EINIT,
  327             %(ACC_NXT_LVL+1) DSC BIT(1) UNAL %INIT('0'B)%EINIT,
  328             %(ACC_NXT_LVL+1) OFF BIT(1) UNAL %INIT('0'B)%EINIT,
  329             %(ACC_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  330             %(ACC_NXT_LVL+1) LIMX BIT(1) UNAL %INIT('0'B)%EINIT,
  331             %(ACC_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  332             %(ACC_NXT_LVL+1) EKEY BIT(1) UNAL %INIT('0'B)%EINIT,
  333             %(ACC_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            10   
  334             %(ACC_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,/*coupler bit*/
  335             %(ACC_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  336             %(ACC_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  337             %(ACC_NXT_LVL+1) SSP BIT(1) UNAL %INIT('0'B)%EINIT,
  338             %(ACC_NXT_LVL+1) INTABRT BIT(1) UNAL %INIT('0'B)%EINIT,
  339             %(ACC_NXT_LVL+1) ABRT BIT(1) UNAL %INIT('0'B)%EINIT,
  340             %(ACC_NXT_LVL+1) LDTRC BIT(1) UNAL %INIT('0'B)%EINIT,
  341             %(ACC_NXT_LVL+1) XXX BIT(1) UNAL %INIT('0'B)%EINIT,
  342             %(ACC_NXT_LVL+1) ERR BIT(1) UNAL %INIT('0'B)%EINIT,
  343      %ENDIF;
  344                          /*K* FRS - BIT(16).   Is the Final Run Status.
  345                          .XEQ G_JIT_M G$JIT RNST
  346                          */
  347                          /*K* FRS.XKEY - BIT(1).
  348                          .XEQ GU_LCP6_M G_RNST XKEY
  349                          */
  350                          /*K* FRS.DSC - BIT(1).
  351                          .XEQ GU_LCP6_M G_RNST DSC
  352                          */
  353                          /*K* FRS.OFF - BIT(1).
  354                          .XEQ GU_LCP6_M G_RNST OFF
  355                          */
  356                          /*K* FRS.LIMX - BIT(1).
  357                          .XEQ GU_LCP6_M G_RNST LIMX
  358                          See XLIMFLG.
  359                          */
  360
  361                          /*K* FRS.EKEY - BIT(1).
  362                          .XEQ GU_LCP6_M G_RNST EKEY
  363                          */
  364                          /*K* FRS.SSP - BIT(1).
  365                          .XEQ GU_LCP6_M G_RNST SSP
  366                          */
  367                          /*K* FRS.INTABRT - BIT(1).
  368                          .XEQ GU_LCP6_M G_RNST INTABRT
  369                          */
  370                          /*K* FRS.ABRT - BIT(1).
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            11   
  371                          .XEQ GU_LCP6_M G_RNST ABRT
  372                          */
  373             %(ACC_NXT_LVL) STEPCC UBIN BYTE CALIGNED %INIT(0)%EINIT,
  374                          /*K* STEPCC - UBIN BYTE.
  375                          Contains the Step Condition Code.  This field
  376                          is set from the SEV field of the error code
  377                          at the time of the exit condition from the user
  378                          program:
  379                          }
  380                          }  G_EXIT#   0    M$EXIT
  381                          }  G_ERR#    4    Job step has been errored.
  382                          }  G_XXX#    6    Job step has been aborted.
  383                          */
  384             %(ACC_NXT_LVL) XLIMFLG,
  385                          /*K* XLIMFLG - BIT(8).
  386                          Is a set of exceeded limit flags.
  387                          */
  388      %IF NOT(MODE_FEP);
  389             %(ACC_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  390      %ENDIF;
  391             %(ACC_NXT_LVL+1) * BIT(7) UNAL %INIT('0'B)%EINIT,
  392             %(ACC_NXT_LVL+1) TIME BIT(1) UNAL %INIT('0'B)%EINIT,
  393                          /*K* XLIMFLG.TIME - BIT(1).
  394                          Is set if the maximum run time has been exceeded.
  395                          */
  396           %(ACC_NXT_LVL) READS_HOST UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  397                          /*K* READS_HOST - UBIN(32).
  398                          Contains a count of the number
  399                          of reads through a DCB where RES = 'HO' for this
  400                          job or job step.
  401                          */
  402           %(ACC_NXT_LVL) WRITES_HOST UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  403                          /*K* WRITES_HOST - UBIN(32).
  404                          Contains a count of the number
  405                          of writes through a DCB where RES = 'HO' for this
  406                          job or job step.
  407                          */
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            12   
  408           %(ACC_NXT_LVL) READS_UC UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  409                          /*K* READS_UC - UBIN(32).
  410                          Contains a count of the number
  411                          of reads through a DCB where RES = 'UC' for this
  412                          job or job step.
  413                          */
  414           %(ACC_NXT_LVL) WRITES_UC UBIN(%(%36-L6*4)) CALIGNED %INIT(0)%EINIT,
  415                          /*K* WRITES_UC - UBIN(32).
  416                          Contains a count of the number
  417                          of writes through a DCB where RES = 'UC' for this
  418                          job or job step.
  419                          */
  420             %(ACC_NXT_LVL) INST_ACC(0:14) SBIN(16) CALIGNED %INIT(0*0)%EINIT,
  421                          /*K* INST_ACC - ARRAY(0:14) SBIN.
  422                          The INSTallation ACCounting field is reserved
  423                          for use by installation routines.
  424                          */
  425             %(ACC_NXT_LVL) BILL CHAR(6) %INIT(' ')%EINIT,
  426                          /*K* BILL - CHAR(6).
  427                          Specifies the rate schedule that is
  428                          to be used to determine the LCP-6 user's charges.
  429                          See the FEBILLING user authorization option of SUPER.
  430                          */
  431           %(ACC_NXT_LVL) STEP UBIN(16) CALIGNED %INIT(0)%EINIT,
  432                          /*K* STEP - UBIN.
  433                          Contains the number of this job step for step
  434                          or proprietary accounting records.  Contains
  435                          the total number of job steps for a
  436                          job end record.
  437                          */
  438                          /*N*
  439                          job end or recovery record.
  440                          */
  441             %(ACC_NXT_LVL) LAST_ACC(0:8) SBIN(16) CALIGNED %INIT(0*9)%EINIT LAST
  442      %MEND;
  443
  444
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            13   
  445
  446
  447
  448                          /*F* NAME: G$JIT
  449
  450                          The Job Information Table (JIT) contains the
  451                          various user identity, limit and accounting information.
  452                          ..::IX "Job^Information^Table^(JIT)"
  453                          ..::IX "JIT"
  454
  455                          The G$JIT macro, which is contained in the G_JIT_M
  456                          include file, may be used to generate a structure
  457                          that defines the JIT.
  458                          Because the G$JIT macro requires some of the macros
  459                          contained in the GU_LCP6_M include file, GU_LCP6_M
  460                          (or LCP_6) must also be specified as an include
  461                          file in a compile unit that requires the G$JIT structure.
  462
  463                          A user may reference the JIT through the FEPLINK
  464                          defined pointer G$JIT$.
  465
  466                          A description of the fields in the JIT follows:
  467
  468                          */
  469      %MACRO G$JIT (FPTN=G$JIT,
  470        STCLASS=BASED,
  471        ALGN=WALIGNED,
  472        LVL=1,
  473        LAST=";");
  474
  475      %LSET LISTDIR='0'B;
  476      %LSET LISTEXP='1'B;
  477      %LSET LISTCOM='0'B;
  478      %LSET LISTSUB='1'B;
  479      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  480      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
  481      %LSET INIT=CHARTEXT(' INIT');
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            14   
  482      %LSET EINIT=CHARTEXT('');
  483      %ELSE;
  484      %LSET INIT=CHARTEXT('/*');
  485      %LSET EINIT=CHARTEXT('*/');
  486      %ENDIF;
  487       %IF LVL=1;
  488      DCL 1 FPTN STCLASS ALGN,
  489       %ELSE;
  490              %LVL FPTN,
  491       %ENDIF;
  492      %LSET JIT_NXT_LVL=%(LVL+1);
  493      %LSET PRIV_LVL=%(LVL+2);
  494
  495                %G$ACC_HDR (FPTN=ACCTLOG,LVL=JIT_NXT_LVL,STCLASS=STCLASS,LAST=NO);
  496                          /*K* ACCTLOG.
  497                          The JIT contains all the information that is eventually
  498                          written to the :ACCTLG file.  The information is
  499                          written directly from the JIT, and therefore must
  500                          begin with the control words for writing the the
  501                          message to the Host.  This includes:
  502                          */
  503                          /*K* ACCTLOG.FCN - UBIN.
  504                          .XEQ G_JIT_M G$ACC_HDR FCN
  505                          */
  506                          /*K* ACCTLOG.FILENUM - UBIN.
  507                          .XEQ G_JIT_M G$ACC_HDR FILENUM
  508                          */
  509      %G$ACC (LVL=JIT_NXT_LVL,STCLASS=STCLASS,LAST=NO);
  510                          /*K* CODE - UBIN.
  511                          .XEQ G_JIT_M G$ACC CODE
  512                          */
  513                          /*K* TYPE - UBIN.
  514                          .XEQ G_JIT_M G$ACC TYPE
  515                          */
  516                          /*K* STEP - UBIN.
  517                          Contains the number of job steps that have
  518                          been executed.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            15   
  519                          */
  520                          /*K* PROG_ENTRY - UBIN.
  521                          .XEQ G_JIT_M G$ACC PROG_ENTRY
  522                          */
  523                          /*K* MODE - UBIN.
  524                          .XEQ G_JIT_M G$ACC MODE
  525                          */
  526                          /*K* SYSID - UBIN.
  527                          .XEQ G_JIT_M G$ACC SYSID
  528                          */
  529                          /*K* USR# - UBIN.
  530                          .XEQ G_JIT_M G$ACC USR#
  531                          */
  532                          /*K* ACCN - CHAR(8).
  533                          .XEQ G_JIT_M G$ACC ACCN
  534                          */
  535                          /*K* UNAME - CHAR(12).
  536                          .XEQ G_JIT_M G$ACC UNAME
  537                          */
  538                          /*K* START - UBIN(32).
  539                          Contains the LCP-6 UTS at the time the user
  540                          or job step was initiated.
  541                          */
  542                          /*K* STOP - UBIN(32).
  543                          Contains the LCP-6 UTS at the time the user
  544                          or job step was terminated.
  545                          */
  546                          /*K* TUEXT - UBIN(32).
  547                          Is the Total User EXecution Time field.  It contains the user
  548                          execution time used in this job step prior to the current
  549                          quantum.  This is maintained in clock ticks.
  550                          */
  551                          /*K* TUSVT - UBIN(32).
  552                          Is the Total User SerVice Time field.  It contains the user
  553                          service time used in this job step prior to the current
  554                          quantum.  This is maintained in clock ticks.
  555                          */
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            16   
  556                          /*K* UMEMTIM - UBIN(32).
  557                          Is the User MEMory TIMe field.  It contains the integral of
  558                          ((TUEXT + TUSVT) * current memory allocation) over
  559                          all quanta of the entire job step.
  560                          This is maintained in clock ticks * page units.
  561                          */
  562                          /*K* MCLS - UBIN.
  563                          .XEQ G_JIT_M G$ACC MCLS
  564                          */
  565                          /*K* CALCNT - See MCLS.
  566                          */
  567                          /*K* FEP# - UBIN.
  568                          .XEQ G_JIT_M G$ACC FEP#
  569                          */
  570                          /*K* ERR.
  571                          Contains the error code that reflects the exit condition of the
  572                          user program.
  573                          G$JIT.ERR is in VLP_ERRCODE format and contains the
  574                          following subfields:
  575                          */
  576                          /*K* ERR.FCG - BIT(10).
  577                          .XEQ GU_LCP6_M VLP_ERRCODE FCG
  578                          */
  579                          /*K* ERR.MID - BIT(5).
  580                          .XEQ GU_LCP6_M VLP_ERRCODE MID
  581                          */
  582                          /*K* ERR.MON - BIT(1).
  583                          .XEQ GU_LCP6_M VLP_ERRCODE MON
  584                          */
  585                          /*K* ERR.ERR# - UBIN(13). Range is 0 to 8191.
  586                          .XEQ GU_LCP6_M VLP_ERRCODE ERR#
  587                          */
  588                          /*K* ERR.SEV - UBIN(3). Range is 0 to 7.
  589                          .XEQ GU_LCP6_M VLP_ERRCODE SEV
  590                          */
  591                          /*K* FRS - BIT(16).  Is the Final Run Status field.
  592                          This field contains the accumulated abort flags.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            17   
  593                          This is a logical OR of the following flags that may
  594                          appear in RNST as the job step is rundown through all the
  595                          various levels of exit control.
  596
  597                          For example, if a user is aborted by the host program, G_RS_DSC# will
  598                          appear in RNST until it is put in the user's exit control
  599                          frame.  At that point the G_RS_DSC# flag is moved to
  600                          FRS and RNST is set to zero.  Should the user reach the maximum time in his
  601                          exit control routine, G_RS_LIMX# would temporarily appear in RNST,
  602                          and both G_RS_DSC# and RS_LIMX# would be set in FRS.
  603                          */
  604                          /*K* FRS.XKEY - BIT(1).
  605                          .XEQ GU_LCP6_M G_RNST XKEY
  606                          */
  607                          /*K* FRS.DSC - BIT(1).
  608                          .XEQ GU_LCP6_M G_RNST DSC
  609                          */
  610                          /*K* FRS.OFF - BIT(1).
  611                          .XEQ GU_LCP6_M G_RNST OFF
  612                          */
  613                          /*K* FRS.LIMX - BIT(1).
  614                          .XEQ GU_LCP6_M G_RNST LIMX
  615                          */
  616                          /*K* FRS.EKEY - BIT(1).
  617                          .XEQ GU_LCP6_M G_RNST EKEY
  618                          */
  619                          /*K* FRS.SSP - BIT(1).
  620                          .XEQ GU_LCP6_M G_RNST SSP
  621                          */
  622                          /*K* FRS.INTABRT - BIT(1).
  623                          .XEQ GU_LCP6_M G_RNST INTABRT
  624                          */
  625                          /*K* FRS.ABRT - BIT(1).
  626                          .XEQ GU_LCP6_M G_RNST ABRT
  627                          */
  628                          /*K* STEPCC - UBIN BYTE.
  629                          .XEQ G_JIT_M G$ACC STEPCC
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            18   
  630                          */
  631                          /*K* XLIMFLG - BIT(8).
  632                          .XEQ G_JIT_M G$ACC XLIMFLG
  633                          */
  634                          /*K* XLIMFLG.TIME - BIT(1).
  635                          .XEQ G_JIT_M G$ACC XLIMFLG.TIME
  636                          */
  637                          /*K* PEAK_SUDO - ARRAY(0:7) UBIN BYTE.
  638                          .XEQ G_JIT_M G$ACC PEAK_SUDO
  639                          */
  640                          /*K* PEAK_MEM - UBIN.
  641                          .XEQ G_JIT_M G$ACC PEAK_MEM
  642                          */
  643                          /*K* PEAK_LVLS - UBIN.
  644                          .XEQ G_JIT_M G$ACC PEAK_LVLS
  645                          */
  646                          /*K* PROCNAME - TEXTC(31).
  647                          .XEQ G_JIT_M G$ACC PROCNAME
  648                          */
  649                          /*K* STEPUNIT - ARRAY(0:3) UBIN.
  650                          Contains a set of four counters that are maintained
  651                          through a job step and reset to zero at the beginning
  652                          of each job step.   See M$CHGUNIT and the RATES
  653                          processor.
  654                          */
  655                          /*K* BILL - CHAR(6).
  656                          .XEQ G_JIT_M G$ACC BILL
  657                          */
  658                          /*K* READS_HOST - UBIN(32).
  659                          .XEQ G_JIT_M G$ACC READS_HOST
  660                          */
  661                          /*K* WRITES_HOST - UBIN(32).
  662                          .XEQ G_JIT_M G$ACC WRITES_HOST
  663                          */
  664                          /*K* READS_UC - UBIN(32).
  665                          .XEQ G_JIT_M G$ACC READS_UC
  666                          */
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            19   
  667                          /*K* WRITES_UC - UBIN(32).
  668                          .XEQ G_JIT_M G$ACC WRITES_UC
  669                          */
  670              %(JIT_NXT_LVL) FIRST_SEG(0:31) BIT(1) UNAL %INIT(
  671              '1'B/*NULL SEG*/,
  672              '1'B/*READONLY SEG*/,
  673              '0'B/*DB DATA SEG*/,
  674              '1'B/*LOWMEM SEG*/,
  675              '1'B/*TSTACKU SEG*/,
  676              '1'B/*UHJIT SEG*/,
  677              '1'B/*MHJIT SEG*/,
  678              '1'B/*MHJIT SEG*/,
  679              '1'B/*MONENT SEG*/,
  680              '1'B/*MONENT SEG*/,
  681              '0'B/*USR_DS1 SEG*/,
  682              '0'B/*USR_DS2 SEG*/,
  683              '1'B/*CP_DATA SEG*/,
  684              '0'B/* SEG*/,
  685              '0'B/* SEG*/,
  686              '0'B/* SEG*/,
  687
  688              '1'B/*USR_ISR1 SEG*/,
  689              '1'B/*USR_ISR2 SEG*/,
  690              '0'B/*USR_ISR3 SEG*/,
  691              '0'B/*USR_ISR4 SEG*/,
  692              '0'B/*USR_ISR5 SEG*/,
  693              '0'B/*USR_ISR6 SEG*/,
  694              '0'B/*USR_ISR7 SEG*/,
  695              '0'B/*DB_PROC SEG*/,
  696              '0'B/*CP_PROC SEG*/,
  697              '0'B/*USR_AUTO SEG*/,
  698              '0'B/*USR_DS3 SEG*/,
  699              '0'B/*USR_DS4 SEG*/,
  700              '1'B/*HANDQ SEG*/,
  701              '1'B/* SEG*/,
  702              '1'B/* SEG*/,
  703              '1'B)%EINIT,
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            20   
  704                          /*K* FIRST_SEG - ARRAY(0:31) BIT(1).
  705                          Contains bits that correspond to the segments in the
  706                          G$UHJIT.ASDT_USR.
  707                          If a FIRST_SEG bit is set, the corresponding
  708                          segment is the first in a user-allocated extent or
  709                          cannot be allocated by the user.
  710                          If a FIRST_SEG bit is reset, either the
  711                          corresponding segment is not allocated,
  712                          or, if the corresponding G$ASDT.SEGDESC.V bit is
  713                          set, the segment is an extension of a
  714                          user-allocated data extent.
  715                          */
  716              %(JIT_NXT_LVL) FD_P$ PTR,
  717                          /*K* FD_P$ = PTR.
  718                          Contains the debugger's Program Counter at the time
  719                          of the debugger monitor service ALTRET.
  720                          */
  721
  722              %(JIT_NXT_LVL) JSTART UBIN(32) CALIGNED %INIT(0)%EINIT,
  723                          /*K* JSTART - UBIN(32).
  724                          Contains the LCP-6 UTS at the time the user
  725                          was created.
  726                          */
  727              %(JIT_NXT_LVL) XTIME UBIN(32) CALIGNED %INIT(0)%EINIT,
  728                          /*K* XTIME - UBIN(32).
  729                          Is the eXecution TIME field.  It contains the number of clock ticks of
  730                          execution time used this quantum.
  731                          */
  732              %(JIT_NXT_LVL) STIME UBIN(32) CALIGNED %INIT(0)%EINIT,
  733                          /*K* STIME - UBIN(32).
  734                          Is the Service TIME field.  It contains the number of clock ticks of
  735                          service time used this quantum.
  736                          */
  737              %(JIT_NXT_LVL) IDELTAT UBIN(32) CALIGNED %INIT(250)%EINIT,
  738                          /*K* IDELTAT - UBIN(32).
  739                          Contains the total quantum time allocated at the
  740                          last quantum end.  This will normally be the quantum specified by
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            21   
  741                          the system manager for this mode, partition, user, etc.
  742                          */
  743              %(JIT_NXT_LVL) MRT SBIN(32) CALIGNED %INIT(8388607)%EINIT,
  744                          /*K* MRT - SBIN(32).
  745                          Is the Maximum Run Time field.  It contains the maximum allowed execution
  746                          plus service time as specified in the :HLP user record
  747                          when the user is created.
  748                          .XEQ
  749                          At any other time it contains the amount of
  750                          time remaining within the limit. This field is maintained in
  751                          clocks ticks.
  752                          */
  753              %(JIT_NXT_LVL) SCHTIME UBIN(32) CALIGNED %INIT(0)%EINIT,
  754                          /*K* SCHTIME - UBIN(32).
  755                          Is the SCHedule TIME field.  It contains the sum of XTIME and STIME
  756                          as they existed the last time this user was scheduled for execution.
  757                          */
  758              %(JIT_NXT_LVL) CLUKRLVL UBIN BYTE CALIGNED %INIT(0) %EINIT,
  759                          /*K* CLUKRLVL - UBIN BYTE.
  760                          Contains the level number of the interrupt to be triggered
  761                          after a specified real time has expired.
  762                          */
  763              %(JIT_NXT_LVL) CLUKXLVL UBIN BYTE CALIGNED %INIT(0) %EINIT,
  764                          /*K* CLUKXLVL - UBIN BYTE.
  765                          Contains the level number of the interrupt to be triggered
  766                          after a specified execution time has expired.
  767                          */
  768              %(JIT_NXT_LVL) CLUKRINT SBIN(32) CALIGNED %INIT(0)%EINIT,
  769                          /*K* CLUKRINT - SBIN(32).
  770                          Contains the interval of time of
  771                          the permanent wall time clock, if set; otherwise it
  772                          contains zero.
  773                          */
  774              %(JIT_NXT_LVL) CLUKXINT SBIN(32) CALIGNED %INIT(0)%EINIT,
  775                          /*K* CLUKXINT - SBIN(32).
  776                          Contains the interval of time of
  777                          the permanent execution time clock, if set;
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            22   
  778                          otherwise it contains zero.
  779                          */
  780
  781              %(JIT_NXT_LVL) DLL UBIN(16) CALIGNED %INIT(0)%EINIT,
  782                          /*K* DLL - UBIN.
  783                          Contains the Data Lower Limit,
  784                          which is the virtual page number of the first data page
  785                          of the run unit or standard shared processor currently executing.
  786                          */
  787              %(JIT_NXT_LVL) DUL UBIN(16) CALIGNED %INIT(0)%EINIT,
  788                          /*K* DUL - UBIN.
  789                          Contains the Data Upper Limit,
  790                          which is the virtual page number of the last data page
  791                          of the run unit or standard shared processor currently executing.
  792                          If the user is at job step, JIT.DUL will be set to JIT.DLL -1.
  793                          */
  794              %(JIT_NXT_LVL) PLL UBIN(16) CALIGNED %INIT(0)%EINIT,
  795                          /*K* PLL - UBIN.
  796                          Contains the Procedure Lower Limit,
  797                          which is the virtual page number of the first procedure page
  798                          of the run unit or standard shared processor currently executing.
  799                          */
  800              %(JIT_NXT_LVL) PUL UBIN(16) CALIGNED %INIT(0)%EINIT,
  801                          /*K* PUL - UBIN.
  802                          Contains the Procedure Upper Limit,
  803                          which is the virtual page number of the last procedure page
  804                          of the run unit or standard shared processor currently executing.
  805                          If the user is at job step, JIT.PUL will be set to JIT.PLL -1.
  806                          */
  807              %(JIT_NXT_LVL) LLL UBIN(16) CALIGNED %INIT(0)%EINIT,
  808                          /*K* LLL - UBIN.
  809                          Is the Library Lower Limit field.  It contains the virtual
  810                          page number of the first page of procedure of an
  811                          associated run-time library.
  812                          */
  813              %(JIT_NXT_LVL) LUL UBIN(16) CALIGNED %INIT(0)%EINIT,
  814                          /*K* LUL - UBIN.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            23   
  815                          Is the Library Upper Limit field.  It contains the virtual
  816                          page number of the last page of procedure of an
  817                          associated run-time library.
  818                          */
  819              %(JIT_NXT_LVL) DB_WRTSEGS(0:15) BIT(1) UNAL %INIT('0'B*0)%EINIT,
  820                          /*K* DB_WRTSEGS - ARRAY(0:14) BIT(1).
  821                          Contains bits that represent the user segments 16 through 31.
  822                          If a bit is set, it indicates to the trap handler that the debugger
  823                          is to be given write access to the segment.
  824                          */
  825
  826              %(JIT_NXT_LVL) PCD UBIN(16) CALIGNED %INIT(0)%EINIT,
  827                          /*K* PCD - UBIN.
  828                          Is the Page Count of Data field.  It contains the number of pages that
  829                          have been allocated for program data in the instruction segment.
  830                          */
  831              %(JIT_NXT_LVL) PCP UBIN(16) CALIGNED %INIT(0)%EINIT,
  832                          /*K* PCP - UBIN.
  833                          Is the Page Count of Procedure field.  It contains the number of
  834                          pages that have been allocated for procedure.
  835                          */
  836              %(JIT_NXT_LVL) PCL UBIN(16) CALIGNED %INIT(0)%EINIT,
  837                          /*K* PCL - UBIN.
  838                          Is the Page Count of Library field.  It contains zero if no
  839                          run-time library is associated, or if a shared run-time
  840                          library is associated.  If the run-library becomes
  841                          unshared, because of an M$UNSHARE or UNSHARELIB command to
  842                          DELTA, this field will contain the number of pages
  843                          that have been obtained for the run-time library procedure.
  844                          */
  845              %(JIT_NXT_LVL) PCDS UBIN(16) CALIGNED %INIT(0)%EINIT,
  846                          /*K* PCDS - UBIN.
  847                          Is the Page Count Dynamic Segments field.  It contains the number of
  848                          pages of dynamic data which were obtained by M$GDS
  849                          with IOBUF=NO specified.
  850                          */
  851              %(JIT_NXT_LVL) PCDDS UBIN(16) CALIGNED %INIT(0)%EINIT,
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            24   
  852                          /*K* PCDDS - UBIN.
  853                          Is the Page Count Debugger Data Segments field.  It contains the total
  854                          number of pages which a debugger has allocated on behalf of this
  855                          user.
  856                          */
  857              %(JIT_NXT_LVL) PCC UBIN(16) CALIGNED %INIT(0)%EINIT,
  858                          /*K* PCC - UBIN.
  859                          Is the Page Count of Context field.  It contains the number of pages
  860                          the monitor has allocated for this user's context.  User
  861                          context includes HJIT, TSTACKU, and the fixed portion
  862                          of the Read Only Segment(ROS).
  863                          */
  864              %(JIT_NXT_LVL) PCROS UBIN(16) CALIGNED %INIT(0)%EINIT,
  865                          /*K* PCROS - UBIN.
  866                          Is the Page Count Read Only Segment field.  It
  867                          contains the additional number of pages in
  868                          the Read Only Segment required for user DCBs.
  869                          The fixed portion of this segment is counted in PCC.
  870                          */
  871              %(JIT_NXT_LVL) NSPC UBIN(16) CALIGNED %INIT(0)%EINIT,
  872                          /*K* NSPC - UBIN.
  873                          Is the Non-Shufflable Page Count field.  It
  874                          contains the number of pages of Dynamic
  875                          Data which were obtained by M$GDS with IOBUF=YES specified.
  876                          */
  877              %(JIT_NXT_LVL) MMFLGS CALIGNED,
  878                          /*K* MMFLGS.
  879                          Contains a set of flags which
  880                          describe the current state of this user from a memory management
  881                          standpoint.
  882                          */
  883              %(JIT_NXT_LVL+1) FREE_PPGS BIT(1) UNAL %INIT('0'B)%EINIT,
  884                          /*K* MMFLGS.FREE_PPGS - BIT(1).
  885                          Is the FREE Procedure PaGeS field.  It indicates whether or not the
  886                          procedure pages in the currently executing run unit are to be
  887                          charged to this user.  A value of '1'B specifies that the pages
  888                          are not to be charged, regardless of whether
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            25   
  889                          the run-unit is shared or not.
  890                          */
  891              %(JIT_NXT_LVL+1) * BIT(15) UNAL %INIT('0'B)%EINIT,
  892              %(JIT_NXT_LVL) MAXMEM UBIN(16) CALIGNED %INIT(0)%EINIT,
  893                          /*K* MAXMEM - UBIN.
  894                          Contains the maximum number
  895                          of pages that may be allocated by this user.
  896                          */
  897              %(JIT_NXT_LVL) PSEUDOPGS UBIN(16) CALIGNED %INIT(0)%EINIT,
  898                          /*K* PSEUDOPGS - UBIN.
  899                          Contains the total number of pages which
  900                          the user is charged for but which are not reflected
  901                          in his ASDT; i.e. the HHJIT pages.
  902                          */
  903
  904              %(JIT_NXT_LVL) CQPC UBIN(16) CALIGNED %INIT(0)%EINIT,
  905                          /*K* CQPC - UBIN.
  906                          Is the Circular Queue Page Count.  It contains the number
  907                          of pages currently used by the circular queue on
  908                          behalf of this user.
  909                          */
  910      /* align */
  911              %(JIT_NXT_LVL) SPROC# UBIN BYTE CALIGNED %INIT(0)%EINIT,
  912                          /*K* SPROC# - UBIN BYTE.
  913                          Contains the associated Shared PROCessor number.
  914                          */
  915              %(JIT_NXT_LVL) SLIB# UBIN BYTE CALIGNED %INIT(0)%EINIT,
  916                          /*K* SLIB# - UBIN BYTE.
  917                          Contains the associated Shared LIBrary number.
  918                          */
  919              %(JIT_NXT_LVL) DB# UBIN BYTE CALIGNED %INIT(0)%EINIT,
  920                          /*K* DB# - UBIN BYTE.
  921                          Contains the associated DeBugger number.
  922                          */
  923              %(JIT_NXT_LVL) CP# UBIN BYTE CALIGNED %INIT(0)%EINIT,
  924                          /*N* CP# - UBIN BYTE.
  925                          Contains the associated Command Processor number.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            26   
  926                          */
  927              %(JIT_NXT_LVL) PRIV CALIGNED,
  928                          /*K* PRIV.
  929                          Consists of three double words defined in the JIT that are
  930                          used to verify a user's privilege prior to performing
  931                          certain system functions for this user.  A description of
  932                          the contents of each of these words follows:
  933                          */
  934      %IF MODE_FEP;
  935              %VLP_PRIV (FPTN=ACTIVE,
  936              LVL=PRIV_LVL,
  937              STCLASS=STCLASS,
  938              ALGN=CALIGNED,
  939              LAST=",");
  940      %ELSE;
  941              %(JIT_NXT_LVL+1) ACTIVE BIT(36) UNAL %INIT('0'B)%EINIT,
  942      %ENDIF;
  943                          /*K* PRIV.ACTIVE - BIT(32).
  944                          Contains the privileges that are currently in effect.
  945
  946                          These privilege bits may be set and reset by the
  947                          M$SPRIV monitor service request.  Refer to
  948                          the FEP Monitor Services Reference Manual for a
  949                          description of M$SPRIV.
  950
  951                          The individual bits in PRIV.ACTIVE are as follows:
  952                          */
  953                          /*N* PRIV.ACTIVE.FMSEC - BIT(1).
  954                          .XEQ GU_LCP6_M VLP_PRIV FMSEC
  955                          */
  956                          /*N* PRIV.ACTIVE.FMREAD - BIT(1).
  957                          .XEQ GU_LCP6_M VLP_PRIV FMREAD
  958                          */
  959                          /*N* PRIV.ACTIVE.SNAP - BIT(1).
  960                          .XEQ GU_LCP6_M VLP_PRIV SNAP
  961                          */
  962                          /*K* PRIV.ACTIVE.SCREECH - BIT(1).
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            27   
  963                          .XEQ GU_LCP6_M VLP_PRIV SCREECH
  964                          */
  965                          /*K* PRIV.ACTIVE.GPP - BIT(1).
  966                          .XEQ GU_LCP6_M VLP_PRIV GPP
  967                          */
  968                          /*K* PRIV.ACTIVE.EXPM - BIT(1).
  969                          .XEQ GU_LCP6_M VLP_PRIV EXPM
  970                          */
  971                          /*K* PRIV.ACTIVE.SYSLOG - BIT(1).
  972                          .XEQ GU_LCP6_M VLP_PRIV SYSLOG
  973                          */
  974                          /*K* PRIV.ACTIVE.CQ - BIT(1).
  975                          .XEQ GU_LCP6_M VLP_PRIV CQ
  976                          */
  977                          /*K* PRIV.ACTIVE.INTCON - BIT(1).
  978                          .XEQ GU_LCP6_M VLP_PRIV INTCON
  979                          */
  980                          /*K* PRIV.ACTIVE.TND - BIT(1).
  981                          .XEQ GU_LCP6_M VLP_PRIV TND
  982                          */
  983                          /*K* PRIV.ACTIVE.MSYS - BIT(1).
  984                          .XEQ GU_LCP6_M VLP_PRIV MSYS
  985                          */
  986                          /*K* PRIV.ACTIVE.MAXMEM - BIT(1).
  987                          .XEQ GU_LCP6_M VLP_PRIV MAXMEM
  988                          */
  989                          /*K* PRIV.ACTIVE.EXMM - BIT(1).
  990                          .XEQ GU_LCP6_M VLP_PRIV EXMM
  991                          */
  992                          /*K* PRIV.ACTIVE.SPCLMM - BIT(1).
  993                          .XEQ GU_LCP6_M VLP_PRIV SPCLMM
  994                          */
  995      %IF MODE_FEP;
  996              %VLP_PRIV (FPTN=AUTH,
  997              LVL=PRIV_LVL,
  998              STCLASS=STCLASS,
  999              ALGN=CALIGNED,
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            28   
 1000              LAST=",");
 1001      %ELSE;
 1002              %(JIT_NXT_LVL+1) AUTH BIT(36) CALIGNED %INIT('0'B)%EINIT,
 1003      %ENDIF;
 1004                          /*K* PRIV.AUTH - BIT(32).
 1005                          Contains the user's privilege indicators as defined,
 1006                          via SUPER, in the :USERS file.
 1007
 1008                          Refer to the description of G$JIT.PRIV.ACTIVE for the names
 1009                          and the meanings of the individual bits in this field.
 1010                          */
 1011      %IF MODE_FEP;
 1012              %VLP_PRIV (FPTN=PRC,
 1013              LVL=PRIV_LVL,
 1014              STCLASS=STCLASS,
 1015              ALGN=CALIGNED,
 1016              LAST=",");
 1017      %ELSE;
 1018              %(JIT_NXT_LVL+1) PRC BIT(36) CALIGNED %INIT('0'B)%EINIT,
 1019      %ENDIF;
 1020                          /*K* PRIV.PRC - BIT(32).
 1021                          Contains the processor privilege bits, as defined by
 1022                          LINK options, from the :SYS processor's head record.
 1023                          If the currently executing run unit is not from :SYS,
 1024                          PRIV.PRC is set to zero.
 1025
 1026                          Refer to the description of G$JIT.PRIV.ACTIVE for the names
 1027                          and the meanings of the individual bits in this field.
 1028                          */
 1029              %(JIT_NXT_LVL) PPRIV CALIGNED,
 1030                          /*N* PPRIV - BIT(32).
 1031                          Contains bit settings indicating which system processor
 1032                          functions may be put into execution by this user.
 1033                          .XEQ
 1034                          Refer to the description of the PPRIVILEGE option
 1035                          of SUPER in the System Support Reference Manual for a description
 1036                          of the various processor privileges that may be set.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            29   
 1037                          Each of the processor privileges have an EQU defined
 1038                          in the G$JIT_E macro that may be used to test the bit settings in
 1039                          JIT.PPRIV.  These are are of the form:
 1040                          }
 1041                          }  %EQU G_PPR_pprivname# = value;
 1042                          }
 1043                          where pprivname is the same as that of the option.
 1044
 1045                          The individual bits in PPRIV are as follows:
 1046                          */
 1047              %(JIT_NXT_LVL+1) * BIT(32) UNAL %INIT('0'B)%EINIT,
 1048                          /*N* PPRIV.pprivname - There are none currently defined.
 1049                          */
 1050
 1051      %IF     MODE_FEP;
 1052              %G_RNST (FPTN=RNST,
 1053              LVL=JIT_NXT_LVL,
 1054              STCLASS=STCLASS,
 1055              ALGN=CALIGNED,
 1056              LAST=",");
 1057      %ELSE;
 1058              %(JIT_NXT_LVL) RNST BIT(18) CALIGNED %INIT('0'B)%EINIT,
 1059      %ENDIF;
 1060                          /*K* RNST - BIT(16).  Is the Program RuN STatus field.
 1061                          This field contains bit settings that
 1062                          indicate the reason for program termination.
 1063                          This field may have more than one bit set on to
 1064                          indicate multiple exit conditions.
 1065                          .XEQ
 1066
 1067                          The RNST field in the JIT always contains the "current"
 1068                          run status reported on this user.  This field will be
 1069                          moved to the exit control frame on the Task Control
 1070                          Block.
 1071                          JIT.RNST is subject to change during exit control processing
 1072                          and should therefore never be referenced by the user
 1073                          program.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            30   
 1074                          */
 1075                          /*K* RNST.XKEY - BIT(1).
 1076                          .XEQ GU_LCP6_M G_RNST XKEY
 1077                          */
 1078                          /*K* RNST.DSC - BIT(1).
 1079                          .XEQ GU_LCP6_M G_RNST DSC
 1080                          */
 1081                          /*K* RNST.OFF - BIT(1).
 1082                          .XEQ GU_LCP6_M G_RNST OFF
 1083                          */
 1084                          /*K* RNST.LIMX - BIT(1).
 1085                          .XEQ GU_LCP6_M G_RNST LIMX
 1086                          */
 1087
 1088                          /*K* RNST.EKEY - BIT(1).
 1089                          .XEQ GU_LCP6_M G_RNST EKEY
 1090                          */
 1091                          /*K* RNST.SSP - BIT(1).
 1092                          .XEQ GU_LCP6_M G_RNST SSP
 1093                          */
 1094                          /*K* RNST.INTABRT - BIT(1).
 1095                          .XEQ GU_LCP6_M G_RNST INTABRT
 1096                          */
 1097                          /*K* RNST.ABRT - BIT(1).
 1098                          .XEQ GU_LCP6_M G_RNST ABRT
 1099                          */
 1100                          /*K* RNST.LDTRC - BIT(1).
 1101                          .XEQ GU_LCP6_M G_RNST LDTRC
 1102                          */
 1103                          /*K* RNST.XXX - BIT(1).
 1104                          .XEQ GU_LCP6_M G_RNST XXX
 1105                          */
 1106                          /*K* RNST.ERR - BIT(1).
 1107                          .XEQ GU_LCP6_M G_RNST ERR
 1108                          */
 1109              %(JIT_NXT_LVL) RUNFLAGS BIT(8) CALIGNED %INIT('0'B)%EINIT,
 1110                          /*K* RUNFLAGS - BIT(8).
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            31   
 1111                          Indicates the currently executing process as follows:
 1112                          }
 1113                          } G_RUN_MON#    '01'X   Monitor or Command Processor
 1114                          }
 1115                          } G_RUN_PROC#   '02'X   Processor in :SYS linked with PROCACC
 1116                          }
 1117                          } G_RUN_USER#   '04'X   User program or processor not linked
 1118                          }                       with the PROCACC option
 1119                          }
 1120                          */
 1121              %(JIT_NXT_LVL) JUNK2 CALIGNED,
 1122                          /*K* JUNK2 - BIT(8).
 1123                          Contains more bits used by job step processing:
 1124                          */
 1125      %IF     NOT(MODE_FEP);
 1126              %(JIT_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
 1127      %ENDIF;
 1128              %(JIT_NXT_LVL+1) * BIT(5) UNAL %INIT('0'B)%EINIT,
 1129
 1130              %(JIT_NXT_LVL+1) USER_CCBUF BIT(1) UNAL %INIT('0'B)%EINIT,
 1131                          /*K* JUNK2.USER_CCBUF - BIT(1).
 1132                          Set if the user fprg supplied the contents of
 1133                          CCBUF.  If reset, CCBUF contains the fprg id
 1134                          in VLP_FPRG format.
 1135                          */
 1136
 1137              %(JIT_NXT_LVL+1) BYPASS_MFPL BIT(1) UNAL %INIT('0'B)%EINIT,
 1138                          /*K* JUNK2.BYPASS_MFPL - BIT(1).
 1139                          Set if TPFP has done an M$LDTRC with the NO_MICROFPL
 1140                          bit set.  Reset when the standard FPRG has been
 1141                          associated with the user.
 1142                          */
 1143
 1144              %(JIT_NXT_LVL+1) MICROFPL BIT(1) UNAL %INIT('0'B)%EINIT,
 1145                          /*K* JUNK2.MICROFPL - BIT(1).
 1146                          Set if MICROFPL bit was set in the VLP_LINEATTR
 1147                          for this user's terminal.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            32   
 1148                          */
 1149
 1150      /* align */
 1151              %(JIT_NXT_LVL) JUNK CALIGNED,
 1152                          /*K* JUNK - BIT(16).
 1153                          Contains bits used by job step processing:
 1154                          */
 1155      %IF     NOT(MODE_FEP);
 1156              %(JIT_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
 1157      %ENDIF;
 1158              %(JIT_NXT_LVL+1) HOST_STEP_ABRT BIT(1) UNAL %INIT('0'B)%EINIT,
 1159                          /*K* JUNK.HOST_STEP_ABRT - BIT(1).
 1160                          Set if the host aborted the job step process
 1161                          because of problems reading the fprg.
 1162                          */
 1163              %(JIT_NXT_LVL+1) KEEP BIT(1) UNAL %INIT('0'B)%EINIT,
 1164                          /*K* JUNK.KEEP - BIT(1).
 1165                          Set if UC DCBs are to be closed with DISP=KEEP
 1166                          as part of the M$LDTRC operation.
 1167                          */
 1168
 1169
 1170              %(JIT_NXT_LVL+1) STEPACCT BIT(1) UNAL %INIT('0'B)%EINIT,
 1171                          /*K* JUNK.STEPACCT - BIT(1).
 1172                          Is set if job step accounting records are to be
 1173                          written for this user as indicated by the FESTEPACCNT
 1174                          option in SUPER.
 1175                          */
 1176
 1177              %(JIT_NXT_LVL+1) DB_TIMER BIT(1) UNAL %INIT('0'B)%EINIT,
 1178                          /*K* JUNK.DB_TIMER - BIT(1).
 1179                          Is set in conjunction with JUNK.ALIBFD if the Debugger
 1180                          is to be entered because the Debugger specified
 1181                          clock time has expired.  This flag is used by FEPMON.
 1182                          It is reset by the GJU$GET_DB routine after associating
 1183                          or awakening the debugger.
 1184                          */
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            33   
 1185
 1186              %(JIT_NXT_LVL+1) PROCSURCHG BIT(1) UNAL %INIT('0'B)%EINIT,
 1187                          /*K* JUNK.PROCSURCHG - BIT(1).
 1188                          Is set if the run unit from the :SYS account had been
 1189                          linked with the SURCHARGE option.
 1190                          */
 1191              %(JIT_NXT_LVL+1) PROCACCT BIT(1) UNAL %INIT('0'B)%EINIT,
 1192                          /*K* JUNK.PROCACCT - BIT(1).
 1193                          Is set if the run unit from the :SYS account had been
 1194                          linked with the PROCACC option.
 1195                          */
 1196              %(JIT_NXT_LVL+1) BYPASSD BIT(1) UNAL %INIT('0'B)%EINIT,
 1197                          /*N* JUNK.BYPASSD - BIT(1).
 1198                          Is set of M$DRTN when the Debugger indicates that the user's
 1199                          exit control routine is to be entered.  Reset on entry
 1200                          to the user's exit control routine.
 1201                          */
 1202              %(JIT_NXT_LVL+1) BACKP$ BIT(1) UNAL %INIT('0'B)%EINIT,
 1203                          /*K* JUNK.BACKP$ - BIT(1).
 1204                          Is set to indicate that control is to be returned to the
 1205                          user with P$ in the TSA reset to the address of the
 1206                          outstanding monitor service request.
 1207                          */
 1208      %IF     NOT(MODE_FEP);
 1209              %(JIT_NXT_LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
 1210      %ENDIF;
 1211              %(JIT_NXT_LVL+1) RUND BIT(1) UNAL %INIT('0'B)%EINIT,
 1212              %(JIT_NXT_LVL+1) RTNFID BIT(1) UNAL %INIT('0'B)%EINIT,
 1213                          /*K* JUNK.RTNFID - BIT(1).
 1214                          Is set when a host debugger has requested
 1215                          that a message containing the FPRG fid
 1216                          be returned.
 1217                          */
 1218              %(JIT_NXT_LVL+1) ALIBFD BIT(1) UNAL %INIT('0'B)%EINIT,
 1219                          /*K* JUNK.ALIBFD - BIT(1).
 1220                          Is set when a message has arrived for the front-end
 1221                          debugger and the debugger does not have a read outstanding.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            34   
 1222                          This flag is reset by the GJU$GET_DB routine after associating
 1223                          or awakening the debugger.
 1224                          */
 1225              %(JIT_NXT_LVL+1) STEP BIT(1) UNAL %INIT('0'B)%EINIT,
 1226                          /*K* JUNK.STEP - BIT(1).
 1227                          Is set when job step is in progress; the flag is
 1228                          reset when entering the user program.
 1229                          */
 1230              %(JIT_NXT_LVL+1) EXONLY BIT(1) UNAL %INIT('0'B)%EINIT,
 1231                          /*K* JUNK.EXONLY - BIT(1).
 1232                          Is set when an execute-only run unit is put into execution.
 1233                          When this flag is set, association of a debugger is not allowed.
 1234                          */
 1235              %(JIT_NXT_LVL+1) UDELTA BIT(1) UNAL %INIT('0'B)%EINIT,
 1236                          /*N* JUNK.UDELTA - BIT(1).
 1237                          Set when a run unit is started under control of a
 1238                          debugger or when a debugger is post associated.
 1239                          Control goes to the debugger on all user exceptional
 1240                          conditions (traps, exit control, etc.) when this
 1241                          bit is set.
 1242                          */
 1243              %(JIT_NXT_LVL+1) SCCSET BIT(1) UNAL %INIT('0'B)%EINIT,
 1244                          /*K* JUNK.SCCSET - BIT(1).
 1245                          Is set when an M$EXIT, M$ERR or M$XXX monitor service
 1246                          request is issued with the STEPCC option specified.
 1247                          */
 1248              %(JIT_NXT_LVL+1) MLDTRC BIT(1) UNAL %INIT('0'B)%EINIT,
 1249                          /*K* JUNK.MLDTRC - BIT(1).
 1250                          Is set while processing an M$LDTRC monitor service request.
 1251                          This flag is reset when the run unit has been fetched or the LDTRC
 1252                          process is aborted.
 1253                          */
 1254
 1255              %(JIT_NXT_LVL) ERRLOG CALIGNED,
 1256              %(JIT_NXT_LVL+1) SEV0 BIT(1) UNAL %INIT('1'B)%EINIT,
 1257              %(JIT_NXT_LVL+1) SEV1 BIT(1) UNAL %INIT('1'B)%EINIT,
 1258              %(JIT_NXT_LVL+1) SEV2 BIT(1) UNAL %INIT('1'B)%EINIT,
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            35   
 1259              %(JIT_NXT_LVL+1) SEV3 BIT(1) UNAL %INIT('1'B)%EINIT,
 1260              %(JIT_NXT_LVL+1) SEV4 BIT(1) UNAL %INIT('1'B)%EINIT,
 1261              %(JIT_NXT_LVL+1) SEV5 BIT(1) UNAL %INIT('1'B)%EINIT,
 1262              %(JIT_NXT_LVL+1) SEV6 BIT(1) UNAL %INIT('1'B)%EINIT,
 1263              %(JIT_NXT_LVL+1) SEV7 BIT(1) UNAL %INIT('1'B)%EINIT,
 1264              %(JIT_NXT_LVL) ERRLOG_LVL REDEF ERRLOG CALIGNED,
 1265              %(JIT_NXT_LVL+1) SEV(0:7) BIT(1) UNAL,
 1266                          /*K* ERRLOG_LVL - ARRAY(0:7) BIT(1).
 1267                          Contains bit settings that
 1268                          indicate the severity of the errors that
 1269                          are to be reported via the error logging mechanism.
 1270                          This field is redefined as follows:
 1271
 1272                             ERRLOG.SEVn BIT(1)   where n = 0 -> 7
 1273
 1274                          */
 1275              %(JIT_NXT_LVL) LANG CHAR(1) CALIGNED,
 1276                          /*K* LANG - CHAR(1).
 1277                          Is the LANGuage field containing a single character which
 1278                          specifies the native language of the user.  This
 1279                          field is used to select the correct error message
 1280                          file for this user.
 1281                          */
 1282
 1283
 1284              %(JIT_NXT_LVL) DB_ACCN CHAR(8) %INIT(' ')%EINIT,
 1285                          /*K* DB_ACCN - CHAR(8).
 1286                          Is the DeBug ACCount field.  It contains the host user account
 1287                          that is allowed to debug this LCP-6 user.
 1288                          This account field may be wild carded.
 1289                          */
 1290              %(JIT_NXT_LVL) MAXLVLS UBIN BYTE CALIGNED %INIT(0)%EINIT,
 1291                          /*K* MAXLVLS - UBIN BYTE.
 1292                          Is the MAXimum interrupt LeVeLS field.  It contains the number of interrupt
 1293                          levels this user may have allocated to him.
 1294                          */
 1295              %(JIT_NXT_LVL) CURRLVLS UBIN BYTE CALIGNED %INIT(0)%EINIT,
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            36   
 1296                          /*K* CURRLVLS - UBIN BYTE.
 1297                          Contains the number of interrupt levels currently
 1298                          allocated by this user.
 1299                          */
 1300              %(JIT_NXT_LVL) MAXSUDO (0:7) UBIN BYTE CALIGNED %INIT(0*0)%EINIT,
 1301                          /*K* MAXSUDO - ARRAY(0:7) UBIN BYTE.
 1302                          Is the MAXimum pSeuDO field.  It contains the maximum
 1303                          number of each pseudo resource defined which may
 1304                          be allocated by this user.
 1305                          .XEQ
 1306                          The order is as defined by GFR_PSUDO_NM.
 1307                          */
 1308              %(JIT_NXT_LVL) CURSUDO (0:7) UBIN BYTE CALIGNED %INIT(0*0)%EINIT,
 1309                          /*K* CURSUDO - ARRAY(0:7) UBIN BYTE.
 1310                          Is the CURrent pSeUDO field.  It contains the current number of each
 1311                          pseudo resource defined which is currently allocated to
 1312                          this user.  The order is as defined by GFR_PSUDO_NM.
 1313                          */
 1314              %(JIT_NXT_LVL) GFR_ACCT UBIN BYTE CALIGNED %INIT(0)%EINIT,
 1315                          /*K* GFR_ACCT - UBIN BYTE.
 1316                          Contains an index into the monitor's account
 1317                          resource table for this user's account.
 1318                          */
 1319              %(JIT_NXT_LVL) * UBIN BYTE CALIGNED,
 1320              %(JIT_NXT_LVL) TMRZ CALIGNED,
 1321              %(JIT_NXT_LVL+1) UTIMER UBIN(32) CALIGNED %INIT(0)%EINIT,
 1322              %(JIT_NXT_LVL+1) CTIMER UBIN(32) CALIGNED %INIT(0)%EINIT,
 1323              %(JIT_NXT_LVL+1) DTIMER UBIN(32) CALIGNED %INIT(0)%EINIT,
 1324              %(JIT_NXT_LVL) TIMERS(0:2) REDEF TMRZ UBIN(32) CALIGNED,
 1325                          /*K* TIMERS - ARRAY(0:2) UBIN(32).
 1326                          Contains the time, in clock ticks, remaining
 1327                          before expiration of the timer established via M$CLOCK.
 1328                          The array is indexed by LCP-6 domain.
 1329                          A value of zero means there is no timer currently
 1330                          established.
 1331                          */
 1332              %(JIT_NXT_LVL) PROFILE,
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            37   
 1333                          /*K* PROFILE - Contains the profile name in TEXTC format:
 1334                          */
 1335              %(JIT_NXT_LVL+1) CNT UBIN BYTE CALIGNED,
 1336                          /*K* PROFILE.CNT - UBIN BYTE.  Contains the length of PROFILE.TXT.
 1337                          */
 1338              %(JIT_NXT_LVL+1) TXT CHAR(11) CALIGNED,
 1339                          /*K* PROFILE.TXT - CHAR(11).  Contains the name of the profile.
 1340                          */
 1341      %IF     MODE_FEP;
 1342
 1343      %VLP_ERRCODE (FPTN=FD_ALTERR,LVL=JIT_NXT_LVL,STCLASS=STCLASS,LAST=",");
 1344
 1345      %ELSE;
 1346
 1347              %JIT_NXT_LVL FD_ALTERR BIT(36),
 1348
 1349      %ENDIF;
 1350                          /*K* FD_ALTERR - BIT(32).
 1351                          Contains the monitor service error code for monitor
 1352                          services requested by a debugger.  This field is valid only for
 1353                          debugger monitor service ALTRET procedures.
 1354                          FD_ALTERR is in VLP_ERRCODE format.
 1355                          */
 1356                %(JIT_NXT_LVL) CVM_REAL(0:31) BIT(1) UNAL,
 1357                          /*K* CVM_REAL - ARRAY(0:31) BIT(1).
 1358                          Contains bits that correspond to the segments in the
 1359                          G$UHJIT.ASDT_USR.  If a bit is set, the corresponding segment
 1360                          has been mapped with a physical page that may not
 1361                          belong to this user and indicates that the pages mapped
 1362                          into the segment are not to be released at rundown.
 1363                          See M$CVM.
 1364                          */
 1365                %(JIT_NXT_LVL) JOBUNIT(0:3) UBIN(16) CALIGNED,
 1366                          /*K* JOBUNIT - ARRAY(0:3) UBIN.
 1367                          Contains a set of four counters that are maintained
 1368                          through an entire job.  See M$CHGUNIT and the RATES
 1369                          processor.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            38   
 1370                          */
 1371                %(JIT_NXT_LVL) JPEAK_SUDO (0:7) UBIN BYTE CALIGNED %INIT(0*0)%EINIT,
 1372                          /*K* JPEAK_SUDO - ARRAY(0:7) UBIN BYTE.
 1373                          Is the JPEAK pSeUDO array.  It contains the maximum number of each
 1374                          pseudo resource allocated at any given time during
 1375                          this job. The order is as defined by GFR_PSUDO_NM.
 1376                          */
 1377                %(JIT_NXT_LVL) JPEAK_MEM UBIN(16) CALIGNED %INIT(0)%EINIT,
 1378                          /*K* JPEAK_MEM - UBIN.
 1379                          Is the JPEAK MEMory field.  It contains the maximum number
 1380                          of pages allocated at any given time during the job.
 1381                          */
 1382                %(JIT_NXT_LVL) JPEAK_LVLS UBIN(16) CALIGNED %INIT(0)%EINIT,
 1383                          /*K* JPEAK_LVLS - UBIN.
 1384                          Is the JPEAK LeVeLS field.  It contains the maximum number
 1385                          of interrupt levels allocated at any given time
 1386                          during this job.
 1387                          */
 1388                %(JIT_NXT_LVL) JUSER_EXTIME UBIN(32) CALIGNED %INIT(0)%EINIT,
 1389                          /*K* JUSER_EXTIME - UBIN(32).
 1390                          Is the Job USER EXecution TIME field.  It contains the user
 1391                          execution time used in the entire job.
 1392                          This is maintained in clock ticks.
 1393                          */
 1394                %(JIT_NXT_LVL) JUSER_SVTIME UBIN(32) CALIGNED %INIT(0)%EINIT,
 1395                          /*K* JUSER_SVTIME - UBIN(32).
 1396                          Is the Job USER SerVice TIME field.  It contains the user
 1397                          service time used in the entire job.
 1398                          This is maintained in clock ticks.
 1399                          */
 1400                %(JIT_NXT_LVL) JUSER_MEMTIME UBIN(32) CALIGNED %INIT(0)%EINIT,
 1401
 1402                          /*K* JUSER_MEMTIME - UBIN(32).
 1403                          Is the Job USER MEMory TIME field.  It contains the integral of
 1404                          ((JUSER_EXTIME + USER_SVTIME) * current memory allocation) over
 1405                          all quanta of the entire job.
 1406                          This is maintained in clock ticks * page units.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            39   
 1407                          */
 1408                %(JIT_NXT_LVL) JPROC_EXTIME UBIN(32) CALIGNED %INIT(0)%EINIT,
 1409                          /*K* JPROC_EXTIME - UBIN(32).
 1410                          Is the Job PROCessor EXecution TIME field.  It contains the user
 1411                          execution time used in the entire job.
 1412                          This is maintained in clock ticks.
 1413                          */
 1414                %(JIT_NXT_LVL) JPROC_SVTIME UBIN(32) CALIGNED %INIT(0)%EINIT,
 1415                          /*K* JPROC_SVTIME - UBIN(32).
 1416                          Is the Job PROCessor SerVice TIME field.  It contains the user
 1417                          service time used in the entire job.
 1418                          This is maintained in clock ticks.
 1419                          */
 1420                %(JIT_NXT_LVL) JPROC_MEMTIME UBIN(32) CALIGNED %INIT(0)%EINIT,
 1421                          /*K* JPROC_MEMTIME - UBIN(32).
 1422                          Is the Job PROCessor MEMory TIME field.  It contains the integral of
 1423                          ((JPROC_EXTIME + PROC_SVTIME) * current memory allocation) over
 1424                          all quanta of the entire job.
 1425                          This is maintained in clock ticks * page units.
 1426                          */
 1427                %(JIT_NXT_LVL) CCBUF CHAR(256) %INIT(' ')%EINIT,
 1428                          /*K* CCBUF - CHAR(256).
 1429                          Is the Control Command BUFfer.  It contains the text
 1430                          that is passed from one run unit to another
 1431                          via M$LDTRC.
 1432                          */
 1433                %(JIT_NXT_LVL) JMCLS UBIN(16) CALIGNED %INIT(0)%EINIT,
 1434                          /*K* JMCLS - UBIN.
 1435                          Contains the number of monitor service
 1436                          requests executed during this job.
 1437                          */
 1438                %(JIT_NXT_LVL) JREADS_HOST UBIN(32) CALIGNED %INIT(0)%EINIT,
 1439                          /*K* JREADS_HOST - UBIN(32).
 1440                          Is the Job READS_HOST field.  It contains a count of the number
 1441                          of reads through a DCB where RES = 'HO' over the entire job.
 1442                          */
 1443                %(JIT_NXT_LVL) JWRITES_HOST UBIN(32) CALIGNED %INIT(0)%EINIT,
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            40   
 1444                          /*K* JWRITES_HOST - UBIN(32).
 1445                          Is the Job WRITES_HOST field.  It contains a count of the number
 1446                          of writes through a DCB where RES = 'HO' over the entire job.
 1447                          */
 1448                %(JIT_NXT_LVL) JREADS_UC UBIN(32) CALIGNED %INIT(0)%EINIT,
 1449                          /*K* JREADS_UC - UBIN(32).
 1450                          Is the Job READS_UC field.  It contains a count of the number
 1451                          of reads through a DCB where RES = 'UC' over the entire job.
 1452                          */
 1453                %(JIT_NXT_LVL) JWRITES_UC UBIN(32) CALIGNED %INIT(0)%EINIT,
 1454                          /*K* JWRITES_UC - UBIN(32).
 1455                          Is the Job WRITES_UC field.  It contains a count of the number
 1456                          of writes through a DCB where RES = 'UC' over the entire job.
 1457                          */
 1458                %(JIT_NXT_LVL) LAST_JIT(0:7) SBIN(16) CALIGNED %INIT(0*8)%EINIT LAST
 1459
 1460      %MEND;
 1461
 1462
 1463
 1464
 1465
 1466
 1467
 1468
 1469
 1470
 1471
 1472                          /*F* NAME: G$JIT_E
 1473
 1474                          The G$JIT_E macro, which is in the G_JIT_M
 1475                          INCLUDE file, generates the EQUs to be used
 1476                          when referencing the fields within the JIT.
 1477
 1478                          Refer to the descriptions of the various fields
 1479                          in the G$JIT structure for a description of the
 1480                          EQUs that are generated.
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            41   
 1481                          */
 1482
 1483      %MACRO G$JIT_E;
 1484
 1485      /* EQUs for MODE definitions */
 1486      %EQU G_M_USER# = 1;
 1487      %EQU G_M_CG# =2;
 1488      %EQU G_M_HANDLER# = 3;
 1489      %EQU G_M_GHOST# =4;
 1490
 1491      /* EQUs for PRIV bits */
 1492      /*     PR_FMEFT#                  */
 1493      /*     PR_FMBLK#   = '80000000'X; */
 1494      %EQU G_PR_FMSEC#   = '40000000'X;
 1495      /*     PR_FMDIAG#  = '20000000'X; */
 1496      %EQU G_PR_FMREAD#  = '10000000'X;
 1497      /*     PR_MODE#    = '08000000'X; */
 1498      /*     PR_SYSACCT# = '04000000'X; */
 1499      /*     PR_DOMAIN#  = '02000000'X; */
 1500      /*                 = '01000000'X; */
 1501      /*                                */
 1502      /*                 = '00800000'X; */
 1503      /*                 = '00400000'X; */
 1504      %EQU G_PR_SNAP#    = '00200000'X;
 1505      %EQU G_PR_SCREECH# = '00100000'X;
 1506      /*     PR_DISPJOB# = '00080000'X; */
 1507      /*                 = '00040000'X; */
 1508      /*     PR_SYSCON#  = '00020000'X; */
 1509      %EQU G_PR_GPP#     = '00020000'X;
 1510      /*     PR_ASAVE#   = '00010000'X; */
 1511      %EQU G_PR_EXPM#    = '00010000'X;
 1512      /*     PR_GPP#                    */
 1513      /*                 = '00008000'X; */
 1514      %EQU G_PR_SYSLOG#  = '00004000'X;
 1515      /*     PR_MFEP#    = '00002000'X; */
 1516      /*     PR_CFEP#    = '00001000'X; */
 1517      %EQU G_PR_CQ#      = '00000800'X;
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            42   
 1518      %EQU G_PR_INTCON#  = '00000400'X;
 1519      /*     PR_IOQW#    = '00000200'X; */
 1520      /*     PR_IOQ#     = '00000100'X; */
 1521      /*     PR_EXPM#                   */
 1522      /*     PR_PM#      = '00000080'X; */
 1523      %EQU G_PR_TND#     = '00000040'X;
 1524      /*     PR_JIT#     = '00000020'X; */
 1525      /*                 = '00000010'X; */
 1526      %EQU G_PR_MSYS#    = '00000008'X;
 1527      %EQU G_PR_MAXMEM#  = '00000004'X;
 1528      %EQU G_PR_EXMM#    = '00000002'X;
 1529      %EQU G_PR_SPCLMM#  = '00000001'X;
 1530
 1531      %EQU G_PR_LCP6#    = '50334C4F'X;
 1532
 1533      /* EQUs for RNST items */
 1534      %EQU G_RS_EXIT#    = '0000'X;
 1535      %EQU G_RS_ERR#     = '0001'X;
 1536      %EQU G_RS_XXX#     = '0002'X;
 1537      %EQU G_RS_LDTRC#   = '0004'X;
 1538      %EQU G_RS_ABRT#    = '0008'X;
 1539
 1540      %EQU G_RS_INTABRT# = '0010'X;
 1541      %EQU G_RS_SSP#     = '0020'X;
 1542
 1543      %EQU G_RS_EKEY#    = '0200'X;
 1544      %EQU G_RS_LIMX#    = '0800'X;
 1545
 1546      %EQU G_RS_OFF#     = '2000'X;
 1547      %EQU G_RS_DSC#     = '4000'X;
 1548      %EQU G_RS_XKEY#    = '8000'X;
 1549
 1550      %EQU G_RS_MCL#     = 'FFFC'X;
 1551      %EQU G_RS_CL23#    = 'FF00'X;
 1552      %EQU G_RS_CL3#     = 'F000'X;
 1553      %EQU G_RS_XCON#    = 'FFF0'X;
 1554
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            43   
 1555      /* EQUs for RUNFLAG bits */
 1556
 1557      %EQU G_RUN_MON#  = '01'X;
 1558      %EQU G_RUN_PROC# = '02'X;
 1559      %EQU G_RUN_USER# = '04'X;
 1560
 1561      /* EQUs for XLIMFLG bits */
 1562
 1563      %EQU G_XL_TIME#  = '01'X;
 1564
 1565      /* EQUs for JUNK2 bits */
 1566
 1567      %EQU G_JJ_MICROFPL#    = '0001'X;
 1568      %EQU G_JJ_BYPASS_MFPL# = '0002'X;
 1569      %EQU G_JJ_USER_CCBUF#  = '0004'X;
 1570
 1571      /* EQUs for JUNK bits */
 1572
 1573      %EQU G_JJ_MLDTRC# = '0001'X;
 1574      %EQU G_JJ_SCCSET# = '0002'X;
 1575      %EQU G_JJ_UDELTA# = '0004'X;
 1576      %EQU G_JJ_EXONLY# = '0008'X;
 1577
 1578      %EQU G_JJ_STEP#   = '0010'X;
 1579      %EQU G_JJ_ALIBFD# = '0020'X;
 1580      %EQU G_JJ_RTNFID# = '0040'X;
 1581      %EQU G_JJ_RUND#   = '0080'X;
 1582
 1583      %EQU G_JJ_BACKP$# = '0100'X;
 1584      %EQU G_JJ_BYPASSD#= '0200'X;
 1585      %EQU G_JJ_PROCACCT#='0400'X;
 1586      %EQU G_JJ_PROCSURCHG#='0800'X;
 1587
 1588      %EQU G_JJ_DB_TIMER#='1000'X;
 1589      %EQU G_JJ_STACC#   ='2000'X;
 1590      %EQU G_JJ_KEEP#    ='4000'X;
 1591
14:36 JUL 28 '97 G_JIT_M.:E05SI                                            44   
 1592      /* EQUs for PROG_ENTRY */
 1593      %EQU G_PE_BF#    =    0;
 1594      %EQU G_PE_HOST#  =    1;
 1595      %EQU G_PE_LDTRC# =    2;
 1596      %MEND;
 1597
 1598

