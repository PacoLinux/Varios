VERSION E05

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:1    
        1        1        /*M* VXO$SATREF - searches library files to satisfy references.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC,CCE */
        8        8        VXO$SATREF: PROC;
        9        9
       10       10        %INCLUDE VX_INC_C;
       11    10726        %INCLUDE CP_6_SUBS;
       12    11266        %INCLUDE B_ERRORS_C;
       13    12393        %VX$NODE;

             12405    1   /*******************************************************************************
             12406    1   *                                                                              *
             12407    1   *                          VX$NODE                                                 *
             12408    1   *                                                                              *
             12409    1   *******************************************************************************/

             12425    1   DCL 1 VX$NODE      ALIGNED    BASED,
             12426    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             12427    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             12428    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             12429    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             12430    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             12431                              to list of file nodes for this node            */
             12432    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             12433    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             12433                  /* Head pointer to shared library list */
             12434    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             12434                  /* Head pointer to list of shared libraries
             12435                                          which have been mapped to included libraries */
             12436    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             12437    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             12438    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             12439    1         2 ADDR_START REDEF  ADDR_START_A,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:2    
             12440    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             12441    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             12442    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             12443    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             12444    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             12445    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             12446    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             12447    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             12448    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             12449    1         2 START_PAGE# REDEF START_PAGE#_A,
             12450    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             12451    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             12452    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             12453    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             12454    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             12455    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             12456    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             12457    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             12458    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             12458                  /* Starting pointer for common sections for this node */
             12459    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             12459                  /* Stopping pointer for common sections for this node */
             12460    1         2 L_START,
             12461    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             12462    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             12463    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             12464    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             12465    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             12466    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             12467    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             12468    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             12469    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             12470    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             12471    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             12472    1         2 L_STOP,
             12473    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             12474    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:3    
             12475    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             12476    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             12477    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             12478    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             12479    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             12480    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             12481    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             12482    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             12483    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             12484    1         2 L_SIZE,
             12485    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             12486    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             12487    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             12488    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             12489    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             12490    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             12491    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             12492    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             12493    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             12494    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             12495    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             12496    1         2 L_PREV_SIZE,
             12497    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             12498    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             12499    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             12500    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             12501    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             12502    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             12503    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             12504    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             12505    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             12506    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             12507    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             12508    1         2 BIT_MAP                ALIGNED,
             12509    1           3 DATA                  ALIGNED,
             12510    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12511    1           3 RPROC                 ALIGNED,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:4    
             12512    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12513    1           3 ROS                   ALIGNED,
             12514    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12515    1         2 L_SC_START,
             12516    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             12517    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             12518    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             12519    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             12520    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             12521    1         2 L_SC_STOP,
             12522    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             12523    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             12524    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             12525    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             12526    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             12527    1         2 PROMOTE_HEAD,
             12528    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             12529    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             12530    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             12531    1         2 PROMOTE_TAIL,
             12532    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             12533    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             12534    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             12535    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             12536    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             12537    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             12538    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             12539    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       14    12543        %VXD$TMPLT;

             12556    1   /*******************************************************************************
             12557    1   *                                                                              *
             12558    1   *                          VXD$TMPLT                                               *
             12559    1   *                                                                              *
             12560    1   *******************************************************************************/

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:5    
             12564        /*
             12565                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             12566                  ENTDEFs, SYMDEFs and SEGDEFs.
             12567        */
             12569    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             12570    1         2 VALUE SBIN UNAL,
             12571                /*K*  VALUE is the value if this entry is a constant.  */
             12572    1         2 AD REDEF VALUE,
             12573                /*K*  AD is the address if this entry is not constant.  */
             12574    1           3 LFLAGS UNAL,
             12575                  /*K*  LFLAGS is the field reserved for loader to flag load
             12576                        time attributes of the definition and must be zero
             12577                        in the object unit. */
             12578    1             4 SOURCE UBIN(3) UNAL,
             12579                    /*K*  SOURCE - Source of this DEF */
             12580    1             4 DEFINED BIT(1) UNAL,
             12581                    /*K*  DEFINED - Set if this DEF defined */
             12582    1             4 MULTIPLE BIT(1) UNAL,
             12583                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             12584    1             4 USED BIT(1) UNAL,
             12585                    /*K*  USED - Set if this DEF is used. */
             12586    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             12587                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             12588                        than 2048 (RU).  */
             12589    1           3 SECTNUM UBIN(11) UNAL,
             12590                  /*K*  SECTNUM contains an entry number into the section
             12591                        table (TYPE 3).  */
             12592    1           3 ISADDR UBIN HALF UNAL,
             12593                  /*K*  ISADDR - Is Address (RU)  */
             12594    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             12595                  /*K*  OFFSET is the word offset from the origin of the section. */
             12596    1         2 NPOINTER SBIN HALF UNAL,
             12597                /*K*  NPOINTER is a word displacement into the name record
             12598                      (TYPE 1) locating the name (of this entry). */
             12599    1         2 CONSTNT BIT(1) UNAL,
             12600                /*K*  CONSTNT is a flag bit to determine the interpretation
             12601                      of word 0.
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:6    
             12602                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             12603                                    SECTNUM, and ISADDR or OFFSET.
             12604                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             12605    1         2 LFLAGS UNAL,
             12606                /*K*  LFLAGS is the field reserved for loader to flag load
             12607                      time attributes and must be zero in the object unit. */
             12608    1           3 MULTIPLE BIT(1) UNAL,
             12609                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             12610    1           3 USED BIT(1) UNAL,
             12611                  /*K*  USED - Set if this DEF is used. */
             12612    1           3 SOURCE UBIN(4) UNAL,
             12613                  /*K*  SOURCE - Source of this DEF */
             12614    1           3 IS_DCB BIT(1) UNAL,
             12615                  /*K* IS_DCB - Set if this is a DCB */
             12616    1           3 * BIT(10) UNAL,
             12617                  /*K*  * is reserved for future use and must be zero.  */
             12618    1         2 PROTECTION REDEF LFLAGS,
             12619                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             12620    1           3 TYPE UBIN(5) UNAL,
             12621                  /*K*  TYPE is the Protection type.  */
             12622    1           3 * UBIN(12) UNAL;
             12623                  /*K*  * is reserved for future use and must be zero.  */
       15    12638        %VXR$TMPLT;

             12651    1   /*******************************************************************************
             12652    1   *                                                                              *
             12653    1   *                          VXR$TMPLT                                               *
             12654    1   *                                                                              *
             12655    1   *******************************************************************************/

             12660    1   DCL 1 VXR$TMPLT BASED ALIGNED,
             12661    1         2 NPOINTER SBIN HALF UNAL,
             12662                /*K*  NPOINTER is the word index to the symbol name.  */
             12663    1         2 SREF BIT(1) UNAL,
             12664                /*K*  SREF is set is this is a secondary reference.  */
             12665    1         2 READ_ONLY BIT(1) UNAL,
             12666    1         2 GOT BIT(1) UNAL,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:7    
             12667                /*K*  GOT is set if got the OU name displacement.  */
             12668    1         2 STATE REDEF GOT BIT(1) UNAL,
             12669    1         2 OPOINTER UBIN(15) UNAL;
             12670                /*K*  OPOINTER is the word index to the OU name.  */

             12692    1   /*******************************************************************************
             12693    1   *                                                                              *
             12694    1   *                          VXR$SAT                                                 *
             12695    1   *                                                                              *
             12696    1   *******************************************************************************/

             12700    1   DCL 1 VXR$SAT                 ALIGNED   BASED,
             12701    1         2 VALUE        UBIN(36)  ALIGNED,
             12702    1         2 SEG   REDEF  VALUE,
             12703    1           3 OFFSET     UBIN(18)  UNAL,
             12704    1           3 *          BIT(6)    UNAL,
             12705    1           3 SEGID      UBIN(12)  UNAL,
             12706    1         2 BELOW        BIT(1)    UNAL,
             12707    1         2 *            BIT(17)   UNAL,
             12708    1         2 NODE#        UBIN(18)  UNAL;
       16    12710        %TMPLT;

             12722    1   /*******************************************************************************
             12723    1   *                                                                              *
             12724    1   *                          TMPLT                                                 *
             12725    1   *                                                                              *
             12726    1   *******************************************************************************/

             12731    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             12732    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             12733    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             12734    1         2 W       REDEF     A,            /* By name                            */
             12735    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             12736    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       17    12739        %VX$LST;

             12752    1   /*******************************************************************************
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:8    
             12753    1   *                                                                              *
             12754    1   *                          VX$LST                                                 *
             12755    1   *                                                                              *
             12756    1   *******************************************************************************/

             12761    1   DCL 1 VX$LST                          ALIGNED BASED,
             12762    1         2 LINK$        PTR,               /* Link to next item                  */
             12763    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             12764    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             12765    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             12766    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             12767    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             12768    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             12769    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             12770    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             12771    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             12772    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             12773    1         2 P,
             12774    1           3 NAME_       ALIGNED,
             12775    1             4 BOUND      UBIN(20)  UNAL,
             12776    1             4 FLAGSV     UBIN(11)  UNAL,
             12777    1             4 *          BIT(5)    UNAL,
             12778    1             4 NAME$      PTR,
             12779    1           3 ACCT_       ALIGNED,
             12780    1             4 BOUND      UBIN(20)  UNAL,
             12781    1             4 FLAGSV     UBIN(11)  UNAL,
             12782    1             4 *          BIT(5)    UNAL,
             12783    1             4 ACCT$      PTR,
             12784    1           3 PASS_       ALIGNED,
             12785    1             4 BOUND      UBIN(20)  UNAL,
             12786    1             4 FLAGSV     UBIN(11)  UNAL,
             12787    1             4 *          BIT(5)    UNAL,
             12788    1             4 PASS$      PTR,
             12789    1           3 SN_         ALIGNED,
             12790    1             4 BOUND      UBIN(20)  UNAL,
             12791    1             4 FLAGSV     UBIN(11)  UNAL,
             12792    1             4 *          BIT(5)    UNAL,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:9    
             12793    1             4 SN$        PTR,
             12794    1           3 WSN_        ALIGNED,
             12795    1             4 BOUND      UBIN(20)  UNAL,
             12796    1             4 FLAGSV     UBIN(11)  UNAL,
             12797    1             4 *          BIT(5)    UNAL,
             12798    1             4 WSN$       PTR,
             12799    1           3 B           ALIGNED,
             12800    1             4 RES        BIT(1)    UNAL,
             12801    1             4 ASN        BIT(1)    UNAL,
             12802    1             4 ACCT       BIT(1)    UNAL,
             12803    1             4 *          BIT(33)   UNAL,
             12804    1           3 RES         CHAR(4)   ALIGNED,
             12805    1           3 ASN         UBIN(36)  ALIGNED;
       18    12808        %VX$LST( NAME=DEFAULT_FILE, STCLASS=STATIC );

             12821    1   /*******************************************************************************
             12822    1   *                                                                              *
             12823    1   *                          DEFAULT_FILE                                            *
             12824    1   *                                                                              *
             12825    1   *******************************************************************************/

             12830    1   DCL 1 DEFAULT_FILE                          ALIGNED STATIC,
             12831    1         2 LINK$        PTR,               /* Link to next item                  */
             12832    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             12833    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             12834    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             12835    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             12836    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             12837    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             12838    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             12839    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             12840    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             12841    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             12842    1         2 P,
             12843    1           3 NAME_       ALIGNED,
             12844    1             4 BOUND      UBIN(20)  UNAL,
             12845    1             4 FLAGSV     UBIN(11)  UNAL,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:10   
             12846    1             4 *          BIT(5)    UNAL,
             12847    1             4 NAME$      PTR,
             12848    1           3 ACCT_       ALIGNED,
             12849    1             4 BOUND      UBIN(20)  UNAL,
             12850    1             4 FLAGSV     UBIN(11)  UNAL,
             12851    1             4 *          BIT(5)    UNAL,
             12852    1             4 ACCT$      PTR,
             12853    1           3 PASS_       ALIGNED,
             12854    1             4 BOUND      UBIN(20)  UNAL,
             12855    1             4 FLAGSV     UBIN(11)  UNAL,
             12856    1             4 *          BIT(5)    UNAL,
             12857    1             4 PASS$      PTR,
             12858    1           3 SN_         ALIGNED,
             12859    1             4 BOUND      UBIN(20)  UNAL,
             12860    1             4 FLAGSV     UBIN(11)  UNAL,
             12861    1             4 *          BIT(5)    UNAL,
             12862    1             4 SN$        PTR,
             12863    1           3 WSN_        ALIGNED,
             12864    1             4 BOUND      UBIN(20)  UNAL,
             12865    1             4 FLAGSV     UBIN(11)  UNAL,
             12866    1             4 *          BIT(5)    UNAL,
             12867    1             4 WSN$       PTR,
             12868    1           3 B           ALIGNED,
             12869    1             4 RES        BIT(1)    UNAL,
             12870    1             4 ASN        BIT(1)    UNAL,
             12871    1             4 ACCT       BIT(1)    UNAL,
             12872    1             4 *          BIT(33)   UNAL,
             12873    1           3 RES         CHAR(4)   ALIGNED,
             12874    1           3 ASN         UBIN(36)  ALIGNED;
       19    12877        %T$C;

             12889    1   /*******************************************************************************
             12890    1   *                                                                              *
             12891    1   *                          T$C                                                 *
             12892    1   *                                                                              *
             12893    1   *******************************************************************************/

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:11   
             12898    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             12899    1         2 COUNT        UBIN( 9) UNAL,
             12900    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             12901    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             12902    1         2 COUNT        UBIN( 9) UNAL,
             12903    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       20    12906        %SET LISTMAC='1'B;
       21    12907        %SET LISTSUB='1'B;
       22    12908        %BANNER(ARG=SUBS);
             12909        %LSET LISTDIR='0'B;

             12916    1   /*******************************************************************************
             12917    1   *                                                                              *
             12918    1   *                          SUBS                                                 *
             12919    1   *                                                                              *
             12920    1   *******************************************************************************/

       23    12924        %B$RECORDSUBS;
             12925        %EQU TYPHEAD=0 ;
             12926        %EQU TYPDNAM=1 ;
             12927        %EQU TYPRNAM=2 ;
             12928        %EQU TYPSECT=3 ;
             12929        %EQU TYPEDEF=4 ;
             12930        %EQU TYPEREF=5 ;
             12931        %EQU TYPSDEF=6 ;
             12932        %EQU TYPSREF=7 ;
             12933        %EQU TYPSEGDEF=8 ;
             12934        %EQU TYPSEGREF=9 ;
             12935        %EQU TYPPROG=10 ;
             12936        %EQU SUBTYPPROG=0 ;
             12937        %EQU SUBTYPREL=1 ;
             12938        %EQU TYPLOGBLK=11 ;
             12939        %EQU TYPINTNTRY=12 ;
             12940        %EQU TYPEXST=13 ;
             12941        %EQU TYPVREBL=14 ;
             12942        %EQU TYPDBGNAM=15 ;
             12943        %EQU TYPLV1LB=16 ;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:12   
             12944        %EQU TYPLV1=17 ;
             12945        %EQU TYPDATASEG=18 ;
             12946        %EQU TYPRUM=20 ;
             12947        %EQU TYPBIRTH=21 ;
             12948        %EQU TYPPLOVER=22 ;
             12949        %EQU TYPCOMPID=23 ;
             12950        %EQU TYPROS=30 ;
       24    12952        %SUB_LINKFLAGS;
             12953        %EQU SOURCE_OBJECT#=0 ;
             12954        %EQU SOURCE_SLIB#=1 ;
             12955        %EQU SOURCE_ALIB#=2 ;
             12956        %EQU SOURCE_ULIB#=3 ;
             12957        %EQU SOURCE_RLIB#=4 ;
             12958        %EQU SOURCE_REMOVED#=5 ;
             12959        %EQU SOURCE_LINKER#=6 ;
       25    12961        %BANNER(ARG=B$DNAME);
             12962        %LSET LISTDIR='0'B;

             12969    1   /*******************************************************************************
             12970    1   *                                                                              *
             12971    1   *                          B$DNAME                                                 *
             12972    1   *                                                                              *
             12973    1   *******************************************************************************/

       26    12977        %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             12978            %LSET STR=CONCAT(TEXTCHAR(BASED),'        ');
             12979            %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR
             12980                (SUBSTR(STR,0,3)='EXT');
             12982            %ELSE;
             12983                %LSET INIT=CHARTEXT('/*');
             12984            %ENDIF;
             12985    1   DCL 1 B$DNAME BASED ALIGNED,
             12986    1         2 COUNT UBIN HALF UNAL %INIT(SIZEC(' ')) %CHARTEXT('/**/'),
             12987                /*K*  COUNT is the number of characters in the name */
             12988            %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR
             12989                (SUBSTR(STR,0,3)='EXT');
             12992            %ELSE;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:13   
             12993    1         2 %CHARTEXT('TEXT') CHAR(B$DNAME.COUNT) UNAL;
             12994            %ENDIF;
       27    12996        %B;
             12997        %LSET LISTDIR='0'B;

             13004    1   /*******************************************************************************
             13005    1   *                                                                              *
             13006    1   *                          BIT                                                 *
             13007    1   *                                                                              *
             13008    1   *******************************************************************************/

       28    13012    1   DCL GOT_RN          BIT(1)    ALIGNED   AUTO;
       29    13013    1   DCL FIRST_DEFAULT   BIT(1)    ALIGNED   AUTO;
       30    13014    1   DCL FIRST_TIME      BIT(1)    ALIGNED   STATIC    INIT( '1'B/*@TRUE_B*/ );
       31    13015        %E;
             13016        %LSET LISTDIR='0'B;

             13023    1   /*******************************************************************************
             13024    1   *                                                                              *
             13025    1   *                          ENTRY                                                 *
             13026    1   *                                                                              *
             13027    1   *******************************************************************************/

       32    13031        %ENTRIES;
             13032    1   DCL VXE$ERROR       ENTRY(4);
             13033    1   DCL VXE$ERR         ENTRY(3);
             13034    1   DCL VXE$MERC        ENTRY;
             13035    1   DCL VXE$ERRMSG      ENTRY(3);
             13036    1   DCL VXR$READ        ENTRY( 3 );
             13037    1   DCL VXW$WRITE       ENTRY( 3 );
             13038    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             13039    1   DCL VXD$B2C         ENTRY( 5 );
             13040    1   DCL VXD$C2B         ENTRY( 3 );
             13041    1   DCL VXA$GET         ENTRY( 3 );
             13042    1   DCL VXF$FREE        ENTRY( 3 );
             13043    1   DCL VXQ$SORT        ENTRY( 7 );
             13044    1   DCL VXY$YESNO       ENTRY( 1 );
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:14   
       33    13046        %ENTRIES_IO;
             13047    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             13048    1   DCL VXF$CLOSE       ENTRY(3);
             13049    1   DCL VXU$PREAD       ENTRY(12);
             13050    1   DCL VXK$KEY         ENTRY(4);
             13051    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             13052    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       34    13054    1   DCL VXO$OBJECT      ENTRY(3);
       35    13055    1   DCL VXO$RUN         ENTRY(3);
       36    13056    1   DCL VXS$LST         ENTRY(6)  ALTRET;
       37    13057    1   DCL VXU$MERGE       ENTRY(10);
       38    13058    1   DCL VXO$COMPACT     ENTRY;
       39    13059        %PTR;
             13060        %LSET LISTDIR='0'B;

             13067    1   /*******************************************************************************
             13068    1   *                                                                              *
             13069    1   *                          PTR                                                 *
             13070    1   *                                                                              *
             13071    1   *******************************************************************************/

       40    13075        %POINTER;
             13076    1   DCL P$         PTR       ALIGNED AUTO;
             13077    1   DCL Q$         PTR       ALIGNED AUTO;
             13078    1   DCL R$         PTR       ALIGNED AUTO;
       41    13080    1   DCL NEW_FILE$       PTR       ALIGNED   AUTO;
       42    13081    1   DCL REF$            PTR       ALIGNED   AUTO;
       43    13082    1   DCL REF_STOP$       PTR       ALIGNED   AUTO;
       44    13083    1   DCL REF_NAME$       PTR       ALIGNED   AUTO;
       45    13084    1   DCL FCURR$          PTR       ALIGNED   AUTO;
       46    13085    1   DCL CURR$           PTR       ALIGNED   AUTO;
       47    13086    1   DCL NAM$            PTR       ALIGNED   AUTO;
       48    13087    1   DCL LSTART$         PTR       ALIGNED   AUTO;
       49    13088    1   DCL START$         PTR       ALIGNED   AUTO;
       50    13089    1   DCL RSTOP$         PTR       ALIGNED   AUTO;
       51    13090    1   DCL RNAME_START$         PTR       ALIGNED   AUTO;
       52    13091    1   DCL RNAME$               PTR       ALIGNED   AUTO;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:15   
       53    13092    1   DCL RN$                  PTR       ALIGNED   AUTO;
       54    13093    1   DCL NEXT_AVAIL$          PTR       ALIGNED   AUTO;
       55    13094    1   DCL DUMMY$               PTR       ALIGNED   AUTO;
       56    13095    1   DCL SON_NODE$            PTR       ALIGNED   AUTO;
       57    13096    1   DCL FIRST_START$         PTR       ALIGNED   AUTO;
       58    13097    1   DCL FIRST_STOP$          PTR       ALIGNED   AUTO;
       59    13098    1   DCL WHERE$               PTR       ALIGNED   AUTO;
       60    13099    1   DCL NEXT$                PTR       ALIGNED   AUTO;
       61    13100    1   DCL CAND_P$              PTR       ALIGNED   AUTO;
       62    13101    1   DCL CAND_Q$              PTR       ALIGNED   AUTO;
       63    13102    1   DCL PRE_START$(0:%TYPSEGREF)    PTR  ALIGNED   AUTO;
       64    13103    1   DCL PRE_STOP$(0:%TYPSEGREF)     PTR  ALIGNED   AUTO;
       65    13104    1   DCL POST_START$(0:%TYPSEGREF)   PTR  ALIGNED   AUTO;
       66    13105    1   DCL POST_STOP$(0:%TYPSEGREF)    PTR  ALIGNED   AUTO;
       67    13106    1   DCL CODE UBIN;
       68    13107        %U;
             13108        %LSET LISTDIR='0'B;

             13115    1   /*******************************************************************************
             13116    1   *                                                                              *
             13117    1   *                          UBIN                                                 *
             13118    1   *                                                                              *
             13119    1   *******************************************************************************/

       69    13123        %INDEX;
             13124    1   DCL I          UBIN(36) ALIGNED AUTO;
             13125    1   DCL SI REDEF I SBIN WORD ALIGNED;
             13126    1   DCL J          UBIN(36) ALIGNED AUTO;
             13127    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             13128    1   DCL K          UBIN(36) ALIGNED AUTO;
             13129    1   DCL SK REDEF K SBIN WORD ALIGNED;
             13130    1   DCL L          UBIN(36) ALIGNED AUTO;
             13131    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       70    13133    1   DCL RTYPE           UBIN(36)  ALIGNED   AUTO;
       71    13134    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
       72    13135    1   DCL ALL_TYPE        UBIN(36)  ALIGNED   AUTO;
       73    13136    1   DCL DEF_RTYPE       UBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:16   
       74    13137    1   DCL REF_RTYPE       UBIN(36)  ALIGNED   AUTO;
       75    13138    1   DCL REC             UBIN(36)  ALIGNED   AUTO;
       76    13139    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       77    13140    1   DCL STATE           UBIN(36)  ALIGNED    AUTO;
       78    13141    1   DCL SOURCE          UBIN(36)  ALIGNED    AUTO;
       79    13142    1   DCL PRE_SIZE(0:%TYPSEGREF)      UBIN(36)  ALIGNED   AUTO;
       80    13143        %S;
             13144        %LSET LISTDIR='0'B;

             13151    1   /*******************************************************************************
             13152    1   *                                                                              *
             13153    1   *                          SBIN                                                 *
             13154    1   *                                                                              *
             13155    1   *******************************************************************************/

       81    13159    1   DCL SIZE_AVAIL      SBIN WORD ALIGNED   AUTO;
       82    13160        %BIN_SEARCH_TEMPS(
       83    13161                   LOW=BIN_LOW,
       84    13162                   HIGH=BIN_HIGH,
       85    13163                   START1$=BIN_START1$,
       86    13164                   MID=BIN_MID,
       87    13165                   NTEMP$=BIN_NTEMP$);
             13166    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
             13167    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
             13168    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
             13169    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
             13170    1   DCL BIN_START1$         PTR       ALIGNED AUTO;
       88    13172        %BIN_SEARCH_VARS(
       89    13173                   START$=BIN_START$,
       90    13174                   STOP$=BIN_STOP$,
       91    13175                   RESULT$=BIN_RESULT$,
       92    13176                   N$=BIN_N$,
       93    13177                   MATCH$=BIN_MATCH$,
       94    13178                   NAME_DISP=BIN_NAME_DISP,
       95    13179                   SIZE=BIN_SIZE);
             13180    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
             13181    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:17   
             13182    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
             13183    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
             13184    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
             13185    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             13186    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
       96    13188        %MOVE_TMPLT;
             13189    1   DCL VX$TARGET_B           BIT( VX_TARGET_COUNT ) ALIGNED    BASED;
             13190    1   DCL VX$SOURCE_B           BIT( VX_SOURCE_COUNT ) ALIGNED    BASED;
             13191    1   DCL VX$TARGET_C         CHAR( VX_TARGET_COUNT ) ALIGNED BASED;
             13192    1   DCL VX$SOURCE_C         CHAR( VX_SOURCE_COUNT ) ALIGNED BASED;
       97    13194    1   DCL M$OF  DCB;
       98    13195        %PLIST;
       99    13196        %FPT_OPEN(
      100    13197                   FPTN=FPT_OPEN_FIRST,
      101    13198                   DCB=M$OF,
      102    13199                   NAME=FPT_OPEN_FIRST_NAME,
      103    13200                   ACCT=FPT_OPEN_FIRST_ACCT,
      104    13201                   ASN=FILE,
      105    13202                   ORG=KEYED,
      106    13203                   ACS=DIRECT,
      107    13204                   FUN=IN,
      108    13205                   DISP=NAMED,
      109    13206                   SETDCB=YES,
      110    13207                   SCRUB=YES,
      111    13208                   STCLASS=CONSTANT);
      112    13317        %FPT_OPEN (
      113    13318                   FPTN = FPT_OPEN_LAST,
      114    13319                   DCB = M$OF,
      115    13320                   NAME = FPT_OPEN_LAST_NAME,
      116    13321                   ACCT = FPT_OPEN_FIRST_ACCT,
      117    13322                   ACS = DIRECT,
      118    13323                   ASN = FILE,
      119    13324                   FUN = IN,
      120    13325                   DISP = NAMED,
      121    13326                   NXTF = YES,
      122    13327                   ORG = KEYED,
      123    13328                   REV = YES,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:18   
      124    13329                   SCRUB = YES,
      125    13330                   STCLASS = CONSTANT,
      126    13331                   TEST = YES ) ;
      127    13440        %FPT_OPEN(
      128    13441                   FPTN=FPT_OPEN_NEXT,
      129    13442                   DCB=M$OF,
      130    13443                   ASN=FILE,
      131    13444                   ORG=KEYED,
      132    13445                   ACS=DIRECT,
      133    13446                   FUN=IN,
      134    13447                   DISP=NAMED,
      135    13448                   NXTA=NO,
      136    13449                   NXTF=YES,
      137    13450                   STCLASS=CONSTANT);
      138    13559              % FPT_OPEN (FPTN = OPEN_LLMU,
      139    13560                      DCB = M$LLMU,
      140    13561                      NAME = LLMU_FILE_NAME,
      141    13562                      ASN = FILE,
      142    13563                      ACS = SEQUEN,
      143    13564                      ORG = CONSEC,
      144    13565                      EXIST = OLDFILE,
      145    13566                      CTG = YES);
      146    13675              % VLP_NAME (FPTN = LLMU_FILE_NAME,
      147    13676                      NAME = '***LLMU',
      148    13677                      LEN = 7);
      149    13704              % FPT_WRITE (FPTN = WRITE_LLMU,
      150    13705                      BUF = LLMU_BUF,
      151    13706                      DCB = M$LLMU);
      152    13737              % FPT_REW (FPTN = REW_LLMU,
      153    13738                      DCB = M$LLMU);
      154    13753              % FPT_DELREC (FPTN = DEL_LLMU,
      155    13754                      DCB = M$LLMU);
      156    13773              % FPT_READ (FPTN = READ_LLMU, DCB = M$LLMU, BUF = LLMU_BUF);
      157    13812              % FPT_CLOSE (FPTN =CLOSE_LLMU,
      158    13813                      DCB = M$LLMU,
      159    13814                      DISP = SAVE);
      160    13856    1   DCL M$LLMU DCB;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:19   
      161    13857    1   DCL LLMU_BUF CHAR (87) STATIC INIT (' ');
      162    13858    1   DCL ND$ PTR;
      163    13859    1   DCL 1 NODE BASED (ND$),
      164    13860    1         2 * CHAR (1),
      165    13861    1         2 LP CHAR (1),
      166    13862    1         2 NUM CHAR (4),
      167    13863    1         2 RP CHAR (1);
      168    13864    1   DCL LIB_ACCT CHAR (8);
      169    13865    1   DCL LIB_ACCT_B CHAR (8) BASED;
      170    13866    1   DCL DOT_BLK CHAR (1);
      171    13867        %VLP_NAME(
      172    13868                   FPTN=FPT_OPEN_FIRST_NAME,
      173    13869                   STCLASS=CONSTANT,
      174    13870                   LEN=5,
      175    13871                   NAME=':ETC_');
      176    13898        %VLP_NAME (
      177    13899                   FPTN = FPT_OPEN_LAST_NAME,
      178    13900                   STCLASS = CONSTANT,
      179    13901                   LEN = 6,
      180    13902                   NAME = ':ETC_z');
      181    13929        %VLP_NAME (
      182    13930                   FPTN = OPEN_LAST_NAME,
      183    13931                   STCLASS = AUTO,
      184    13932                   LEN = 31 ) ;
      185    13959        %VLP_ACCT(
      186    13960                   FPTN=FPT_OPEN_FIRST_ACCT,
      187    13961                   STCLASS=CONSTANT,
      188    13962                   ACCT=':SYS');
      189    13975        %FPT_CLOSE(
      190    13976                   FPTN=FPT_CLOSE_NEXT,
      191    13977                   DCB=M$OF,
      192    13978                   DISP=SAVE,
      193    13979                   STCLASS=CONSTANT);
      194    14021        %F$DCB;
      195    14078        %B$TCB;
      196    14081        %B$ALT;
      197    14089        %EJECT;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:20   
      198    14090        /**/
      199    14091        /**/
      200    14092    2         IF FIRST_TIME THEN DO;
      201    14093    2             FIRST_TIME              = '0'B/*@FALSE_B*/;
      202    14094    2             DEFAULT_FILE.LIB.NEEDED = 1/*@YES*/;
      203    14095    2             DEFAULT_FILE.P.ACCT_    = VECTOR(FPT_OPEN_FIRST_ACCT);
      204    14096    2             DEFAULT_FILE.P.PASS_    = VECTOR(NIL);
      205    14097    2             DEFAULT_FILE.P.SN_      = VECTOR(NIL);
      206    14098    2             DEFAULT_FILE.P.WSN_     = VECTOR(NIL);
      207    14099    2             DEFAULT_FILE.P.B.RES    = '0'B/*@FALSE_B*/;
      208    14100    2             DEFAULT_FILE.P.B.ASN    = '1'B/*@TRUE_B*/;
      209    14101    2             DEFAULT_FILE.P.B.ACCT   = '1'B/*@TRUE_B*/;
      210    14102    2             DEFAULT_FILE.P.ASN      = %FILE#;
      211    14103    2            END;
      212    14104        /**/
      213    14105        /**/
      214    14106    1         OPEN_LLMU.V.FUN# = 3;
      215    14107    1         CALL M$OPEN (OPEN_LLMU);
      216    14108        /**/
      217    14109        /**/
      218    14110    2         DO I = 1 TO SIZEW( VX_DEF_REC_A ) - 1;
      219    14111    2             DEF_RTYPE = VX_DEF_REC_A(I);
      220    14112    2             REF_RTYPE = VX_REF_MATCH_A( DEF_RTYPE );
      221    14113    3             IF VX_CURR$ -> VX$NODE.L_START_A$(DEF_RTYPE) ~= ADDR(NIL) THEN DO;
      222    14114    3                 CALL VXQ$SORT(
      223    14115    3                         VX_CURR$ -> VX$NODE.L_START.DN$,
      224    14116    3                         VX_CURR$ -> VX$NODE.L_START_A$(DEF_RTYPE),
      225    14117    3                         VX_CURR$ -> VX$NODE.L_STOP_A$(DEF_RTYPE),
      226    14118    3                         SIZEW( VXD$TMPLT ),
      227    14119    3                         1/*@BY_NAME*/,
      228    14120    3                         2,
      229    14121    3                         0/*@NO_TIES*/ );
      230    14122    3                END;
      231    14123    2            END;                       /* Do i = 1 to sizew( VX_DEF_REC_A ) - 1; */
      232    14124        /**/
      233    14125    1         IF VX_O.FIDN$.UNSAT$ = ADDR(NIL) AND VX_O.SIN.NOSYSLIB = 1/*@YES*/ THEN GOTO
             14125                  NONE_FOUND;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:21   
      234    14126        /**/
      235    14127        /* For searching data defs, incorporate the following into previous do loop */
      236    14128    2         IF VX_CURR$ -> VX$NODE.L_START.ER$ ~= ADDR(NIL) THEN DO;
      237    14129    2             CAND_P$ = VX_CURR$ -> VX$NODE.L_START.ER$;
      238    14130    2             CAND_Q$ = VX_CURR$ -> VX$NODE.L_STOP.ER$;
      239    14131    3             DO WHILE( CAND_P$ <= CAND_Q$ );
      240    14132    3                 IF CAND_P$ -> VXR$TMPLT.SREF THEN
      241    14133    3                     CAND_P$ -> VXR$TMPLT.STATE = '1'B/*@TRUE_B*/;
      242    14134    3                 ELSE
      243    14135    3                     CAND_P$ -> VXR$TMPLT.STATE = '0'B/*@FALSE_B*/;
      244    14136    3                 CAND_P$ = PINCRW( CAND_P$, SIZEW( VXR$TMPLT ) );
      245    14137    3                END;                       /* Do while( CAND_P$ <= CAND_Q$ ); */
      246    14138
      247    14139    2             CALL VXQ$SORT(
      248    14140    2                     VX_CURR$ -> VX$NODE.L_START.RN$,
      249    14141    2                     VX_CURR$ -> VX$NODE.L_START.ER$,
      250    14142    2                     VX_CURR$ -> VX$NODE.L_STOP.ER$,
      251    14143    2                     SIZEW( VXR$TMPLT ),
      252    14144    2                     1/*@BY_NAME*/,
      253    14145    2                     0,
      254    14146    2                     0/*@NO_TIES*/ );
      255    14147    2            END;   /* If VX_CURR$ -> VX$NODE.L_START.ER$ ~= addr(nil) then do; */
      256    14148        /* End of incorporation */
      257    14149    1         REF_NAME$ = VX_CURR$ -> VX$NODE.L_START.RN$;
      258    14150    1   MAKE_TRANSITION:
      259    14151    1         FIRST_DEFAULT='1'B/*@TRUE_B*/;
      260    14152    2         IF VX_O.FIDN$.UNSAT$ = ADDR(NIL) THEN DO;
      261    14153    2             STATE = 1;
      262    14154    2             FCURR$ = ADDR(NIL);
      263    14155    2            END;
      264    14156    2         ELSE DO;
      265    14157    2             STATE = 0;
      266    14158    2             FCURR$ = VX_O.FIDN$.UNSAT$;
      267    14159    2            END;
      268    14160        /* For searching data defs => change 3 to 2 */
      269    14161    2         DO I = 1 TO SIZEW( VX_REF_REC_A) - 3;
      270    14162    2             REF_RTYPE = VX_REF_REC_A(I);
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:22   
      271    14163    2             DEF_RTYPE = VX_REF_MATCH_A( REF_RTYPE );
      272    14164    2             REF$ = VX_CURR$    -> VX$NODE.L_START_A$(REF_RTYPE);
      273    14165    3             IF REF$ ~= ADDR(NIL) THEN DO;
      274    14166    3                 REF_STOP$ = VX_CURR$    -> VX$NODE.L_STOP_A$(REF_RTYPE);
      275    14167    4                 DO WHILE ( REF$ <= REF_STOP$ );
      276    14168    4                     CURR$ = VX_CURR$;
      277    14169    4                     RN$ = PINCRW( REF_NAME$, REF$ -> VXR$TMPLT.NPOINTER);
      278    14170    4   SEARCH_NODE:
      279    14171    4                     BIN_START$ = CURR$ -> VX$NODE.L_START_A$(DEF_RTYPE);
      280    14172    4                     BIN_STOP$  = CURR$ -> VX$NODE.L_STOP_A$(DEF_RTYPE);
      281    14173    4                     BIN_N$     = CURR$ -> VX$NODE.L_START.DN$;
      282    14174                          %BIN_SEARCH(
      283    14175                          START$=BIN_START$,
      284    14176                          STOP$=BIN_STOP$,
      285    14177                          RESULT$=BIN_RESULT$,
      286    14178                          N$=BIN_N$,
      287    14179                          MATCH$=RN$,
      288    14180                          NAME_DISP=2,
      289    14181                          SIZE="SIZEW( VXD$TMPLT )",
      290    14182                          NEG=%@COMMENT,
      291    14183                          GEN=%@TNEMMOC,
      292    14184                          EMPTY=NOT_FOUND,
      293    14185                          ALTRETURN=NOT_FOUND);
             14187    4           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND;
             14188    5           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW( VXD$TMPLT ) < 17 THEN DO;
             14189    5              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             14190    6              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             14191    6                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             14192    6                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             14193    6                   >=
             14194    7                   RN$ -> B$DNAME.TEXT THEN DO;
             14195    7                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             14196    7                      =
             14197    7                      RN$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND;
             14198    7                    ELSE GOTO NOT_FOUND;
             14199    7                    END;
             14200    6                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW( VXD$TMPLT ) );
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:23   
             14201    6                 END;                      /* Do while                           */
             14202    5              GOTO NOT_FOUND;
             14203    5              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             14204    5           ELSE DO;                        /* Binary search                      */
             14205    5              BIN_LOW = 0;
             14206    5              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW( VXD$TMPLT ) + 2;
             14207    5              BIN_START1$ = PINCRW( BIN_START$, -SIZEW( VXD$TMPLT ) );
             14208    5   BIN_SPLIT:     ;
             14209    5              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             14210    5              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW( VXD$TMPLT ) );
             14211    5              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             14212    5              IF BIN_NTEMP$ -> B$DNAME.TEXT
             14213    5                <
             14214    6                RN$ -> B$DNAME.TEXT THEN DO;
             14215    6                 BIN_LOW = BIN_MID;
             14216    6                 GOTO BIN_CHECK;
             14217    6                 END;
             14218    5              IF BIN_NTEMP$ -> B$DNAME.TEXT
             14219    5                >
             14220    6                RN$ -> B$DNAME.TEXT THEN DO;
             14221    6                 BIN_HIGH = BIN_MID;
             14222    6   BIN_CHECK:        ;
             14223    6                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT;
             14224                                                /* Here => looping or not found       */
             14225                                      /* Result -> < match => a boundary condition    */
             14226    6                 %@COMMENT
             14227    6                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             14228    6                   <
             14229    6                   RN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             14229                            VXD$TMPLT ) );
             14230    6                 %@TNEMMOC
             14231    6                   GOTO NOT_FOUND;
             14232    6                 END;
             14233    5              END;                         /* Else do;                           */
             14234    4   BIN_FOUND:
             14235        /* Here -> found */
      294    14237        %PLIST;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:24   
      295    14238        /*Here=> found */
      296    14239    4                     IF DEF_RTYPE ~= %TYPEDEF  AND  BIN_RESULT$->VXD$TMPLT.CONSTNT
      297    14240    4                     THEN
      298    14241    4                         SOURCE = BIN_RESULT$->VXD$TMPLT.LFLAGS.SOURCE;
      299    14242    4                     ELSE
      300    14243    4                         SOURCE = BIN_RESULT$->VXD$TMPLT.AD.LFLAGS.SOURCE;
      301    14244    5                     IF SOURCE ~= %SOURCE_REMOVED# THEN DO;
      302    14245    5                         REF$ -> VXR$TMPLT.STATE = '1'B/*@TRUE_B*/;
      303    14246    5                         GOTO NEXT_REF;
      304    14247    5                        END;
      305    14248        /* Entdef removed, check above */
      306    14249    4                     P$ = PINCRW(BIN_RESULT$, -SIZEW(VXD$TMPLT));
      307    14250    5                     DO WHILE( P$ >= BIN_START$ );
      308    14251    5                         IF PINCRW(BIN_N$,P$->VXD$TMPLT.NPOINTER)->B$DNAME.TEXT
      309    14252    5                                 ~= RN$->B$DNAME.TEXT
      310    14253    5                         THEN GOTO TRY_BELOW;
      311    14254    5                         IF DEF_RTYPE ~= %TYPEDEF  AND  P$->VXD$TMPLT.CONSTNT
      312    14255    5                         THEN
      313    14256    5                             SOURCE = P$->VXD$TMPLT.LFLAGS.SOURCE;
      314    14257    5                         ELSE
      315    14258    5                             SOURCE = P$->VXD$TMPLT.AD.LFLAGS.SOURCE;
      316    14259    6                         IF SOURCE ~= %SOURCE_REMOVED# THEN DO;
      317    14260    6                             REF$ -> VXR$TMPLT.STATE = '1'B/*@TRUE_B*/;
      318    14261    6                             GOTO NEXT_REF;
      319    14262    6                            END;
      320    14263    5                         P$ = PINCRW(P$, -SIZEW(VXD$TMPLT));
      321    14264    5                        END;
      322    14265    4   TRY_BELOW:        P$ = PINCRW(BIN_RESULT$, SIZEW(VXD$TMPLT));
      323    14266    5                     DO WHILE( P$ <= BIN_STOP$ );
      324    14267    5                         IF PINCRW(BIN_N$,P$->VXD$TMPLT.NPOINTER)->B$DNAME.TEXT
      325    14268    5                                 ~= RN$->B$DNAME.TEXT
      326    14269    5                         THEN GOTO NOT_FOUND;
      327    14270    5                         IF DEF_RTYPE ~= %TYPEDEF  AND  P$->VXD$TMPLT.CONSTNT
      328    14271    5                         THEN
      329    14272    5                             SOURCE = P$->VXD$TMPLT.LFLAGS.SOURCE;
      330    14273    5                         ELSE
      331    14274    5                             SOURCE = P$->VXD$TMPLT.AD.LFLAGS.SOURCE;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:25   
      332    14275    6                         IF SOURCE ~= %SOURCE_REMOVED# THEN DO;
      333    14276    6                             REF$ -> VXR$TMPLT.STATE = '1'B/*@TRUE_B*/;
      334    14277    6                             GOTO NEXT_REF;
      335    14278    6                            END;
      336    14279    5                         P$ = PINCRW(P$, SIZEW(VXD$TMPLT));
      337    14280    5                        END;
      338    14281    4   NOT_FOUND:
      339    14282        /*Here=> not found  for current node */
      340    14283    4                     CURR$ = CURR$ -> VX$NODE.FATHER$;
      341    14284    4                     IF CURR$ ~= ADDR(NIL) THEN GOTO SEARCH_NODE;
      342    14285        /**/
      343    14286        /**/
      344    14287        /**/
      345    14288        /* Here => not found for entire path from VX_CURR$ <-> VX_ROOT$ */
      346    14289    4   NEXT_REF:
      347    14290    4                     REF$ = PINCRW( REF$, SIZEW( VXR$TMPLT ) );
      348    14291    4                    END;                   /* While */
      349    14292        /**/
      350    14293        /**/
      351    14294        /**/
      352    14295        /**/
      353    14296    3   EXHAUST:
      354    14297    3                 NEXT$ = VX_CURR$ -> VX$NODE.L_START_A$(REF_RTYPE);
      355    14298    3                 REF$ = NEXT$;
      356    14299    4                 DO WHILE( REF$ <= REF_STOP$ );
      357    14300    5                     IF NOT REF$ -> VXR$TMPLT.STATE THEN DO;
      358    14301    6                         IF NEXT$ ~= REF$ THEN DO;
      359    14302    6                             NEXT$ -> VXR$TMPLT = REF$ -> VXR$TMPLT;
      360    14303    6                            END;           /* If NEXT$ ~= REF$ then do; */
      361    14304    5                         NEXT$ = PINCRW( NEXT$, SIZEW( VXR$TMPLT ) );
      362    14305    5                        END;           /* If ~ REF$ -> VXR$TMPLT.STATE then do; */
      363    14306    4                     REF$ = PINCRW( REF$, SIZEW( VXR$TMPLT ) );
      364    14307    4                    END;                   /* Do while( REF$ <= REF_STOP$ ); */
      365    14308    3                 IF NEXT$ = VX_CURR$ -> VX$NODE.L_START_A$(REF_RTYPE) THEN GOTO
             14308                          NONE_IN_LIST;
      366    14309    3                 SIZE_AVAIL = POFFW( VX_CURR$ -> VX$NODE.L_STOP_A$( REF_RTYPE), NEXT$ )
      367    14310    3                         +
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:26   
      368    14311    3                         SIZEW( VXR$TMPLT );
      369    14312    3                 IF SIZE_AVAIL > 0 THEN CALL VXF$FREE(
      370    14313    3                             VX_PASS1_ALL_TYPE( REF_RTYPE ),
      371    14314    3                             SIZE_AVAIL,
      372    14315    3                             1 );
      373    14316    3                 VX_CURR$ -> VX$NODE.L_STOP_A$(REF_RTYPE) = PINCRW( NEXT$, -SIZEW(
             14316                          VXR$TMPLT) );
      374    14317    3                 VX_CURR$->VX$NODE.L_SIZE_A(REF_RTYPE)
      375    14318    3                         = VX_CURR$->VX$NODE.L_SIZE_A(REF_RTYPE) - SIZE_AVAIL;
      376    14319        %EJECT;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:27   
      377    14320    3   CHECK_FCURR:
      378    14321        /* Open library file */
      379    14322    4                 DO CASE( STATE );
      380    14323    4                   CASE(0);
      381    14324    5                     IF FCURR$ = ADDR(NIL) THEN DO;
      382    14325    5                         IF VX_O.SIN.NOSYSLIB = 1/*@YES*/ THEN GOTO NONE_IN_LIST;
      383    14326    5                         STATE = 1;
      384    14327    5                         GOTO DO_DEFAULT;
      385    14328    5                        END;
      386    14329    4                     CALL VXF$OPEN( FCURR$, 2/*@LF*/ )  ALTRET( CHECK_FCURR );
      387    14330    4                   CASE( 1 );
      388    14331        /* Default library search */
      389    14332    4   DO_DEFAULT:
      390    14333    5                     IF FIRST_DEFAULT THEN DO;
      391    14334    5                         FIRST_DEFAULT = '0'B/*@FALSE_B*/;
      392    14335    5                         CALL M$OPEN ( FPT_OPEN_LAST ) ;
      393    14336    5                         OPEN_LAST_NAME = M$OF$->F$DCB.NAME# ;
      394    14337    5                         CALL M$OPEN ( FPT_OPEN_FIRST ) ;
      395    14338    5                        END;
      396    14339                                                /**/
      397    14340    4                     IF M$OF$->F$DCB.NAME# = OPEN_LAST_NAME THEN
      398    14341    4                         GOTO NONE_IN_LIST ;
      399    14342    4                     CALL M$OPEN ( FPT_OPEN_NEXT )
      400    14343    4                     WHENALTRETURN
      401    14344    5                     DO;
      402    14345    5                         CODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE;
      403    14346    5                         IF CODE = %E$FDEOF THEN GOTO NONE_IN_LIST;
      404    14347    5                         IF  SUBSTR ( M$OF$->F$DCB.NAME#.C, 0, 5 ) =
      405    14348    5                                 FPT_OPEN_FIRST_NAME.NAME# THEN
      406    14349    5                             GOTO DO_DEFAULT ;
      407    14350    5                         GOTO NONE_IN_LIST ;
      408    14351    5                        END;
      409    14352    4                     IF SUBSTR( M$OF$ -> F$DCB.NAME#.C, 0, 5 )
      410    14353    5                             ~= FPT_OPEN_FIRST_NAME.NAME# THEN DO;
      411    14354    5                         CALL M$CLOSE( FPT_CLOSE_NEXT );
      412    14355    5                         GOTO NONE_IN_LIST;
      413    14356    5                        END;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:28   
      414    14357    4                     K = (M$OF$ -> F$DCB.NAME#.L + 4/*@CHAR_WORD*/ ) / 4/*@CHAR_WORD*/;
      415    14358                          %ALLOCATE( PTR$=Q$, TYPE=@GDP, SIZE=K );
      416    14365    4                     Q$ -> T$C.COUNT = M$OF$ -> F$DCB.NAME#.L;
      417    14366    4                     Q$ -> T$C.CHARS = M$OF$ -> F$DCB.NAME#.C;
      418    14367    4                     DEFAULT_FILE.P.NAME_ = VECTOR( Q$ -> T$C );
      419    14368    4                   END;                    /* Do case( state ); */
      420    14369        /* Check compaction for ref names */
      421    14370    3                 IF VX_CURR$ -> VX$NODE.L_SIZE.RN > VX_RN_THRESHOLD THEN
      422    14371    3                     CALL VXO$COMPACT;     /* Yes, compaction to be done */
      423    14372    3                 REF$ = VX_CURR$ -> VX$NODE.L_START_A$( REF_RTYPE );
      424    14373    3                 RSTOP$ = VX_CURR$ -> VX$NODE.L_STOP_A$( REF_RTYPE );
      425    14374    4                 DO WHILE ( REF$ <= RSTOP$ );
      426    14375        /* Build library search key */
      427    14376    4                     NAM$ = PINCRW( REF_NAME$, REF$ -> VXR$TMPLT.NPOINTER );
      428    14377    4                     VX_O_KEY_BUF.FORM0.COUNT = NAM$ -> B$DNAME.COUNT;
      429    14378    4                     VX_O_KEY_BUF.FORM0.CHARS = NAM$ -> B$DNAME.TEXT;
      430    14379        /* Do the read */
      431    14380    4                     VX_LIBRARY_PROBE = '1'B/*@TRUE_B*/;
      432    14381    4                     CALL VXI$READ( 2/*@LF*/, ADDR(VX_L_REC_BUF.CHARS),
      433    14382    4                             SIZEW(VX_L_REC_BUF.CHARS),
      434    14383    4                             0/*@OF*/ ) ALTRET( IO_ERROR);
      435    14384    4                     VX_LIBRARY_PROBE = '0'B/*@FALSE_B*/;
      436    14385        /* Here => found it */
      437    14386    4                     CALL READ_FILE( '1'B, 0 ) ALTRET ( NEXT_CANDIDATE ) ;
      438    14387    4                     VX_LIB_USED = '1'B;   /* Star # 21938 */
      439    14388    5                     IF FCURR$->VX$LST.P.ACCT_.ACCT$ ~= ADDR (NIL) THEN DO;
      440    14389    5                         LIB_ACCT = FCURR$->VX$LST.P.ACCT_.ACCT$->LIB_ACCT_B;
      441    14390    5                         DOT_BLK = '.';
      442    14391    5                        END;
      443    14392    5                     ELSE DO;
      444    14393    5                         LIB_ACCT = ' ';
      445    14394    5                         DOT_BLK = ' ';
      446    14395    5                        END;
      447    14396    4                     CALL CONCAT(LLMU_BUF, FCURR$->VX$LST.P.NAME_.NAME$->T$C.CHARS,
      448    14397    4                             DOT_BLK,LIB_ACCT,';', NAM$->B$DNAME.TEXT);
      449    14398    5                     IF VX_ROOT$->VX$NODE.SON$ ~= ADDR(NIL) THEN DO;
      450    14399    5                         ND$ = PINCRC(ADDR(LLMU_BUF),80);
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:29   
      451    14400    5                         NODE.LP = '(';
      452    14401    5                         CALL BINCHAR(NODE.NUM,VX_CURR$->VX$NODE.NUM);
      453    14402    5                         NODE.RP = ')';
      454    14403    5                        END;
      455    14404    4                     CALL CHECK_DUP;
      456    14405    4                     CALL M$WRITE (WRITE_LLMU);
      457    14406    4                     IF  VX_SLIB_INIT$ ~= ADDR(NIL)  AND
      458    14407    4                             VX_TREE_SLIB_NAME = 0
      459    14408    4                     THEN              /* Library ou associated a shared library */
      460    14409    4                         CALL READ_FILE ( '0'B, 2/*@LF_SLIB*/ ) ;
      461    14410    4                     IF  VX_OU_HEAD.ALIB.COUNT > 0   AND
      462    14411    4                             VX_OU_HEAD.ALIB.COUNT <= 32
      463    14412    4                     THEN      /*  Library ou associated an altshared library */
      464    14413    4                         CALL READ_FILE ( '0'B, 1/*@LF_ALIB*/ ) ;
      465    14414    4                     GOTO MAKE_TRANSITION;
      466    14415    4   IO_ERROR:
      467    14416    4                     VX_LIBRARY_PROBE = '0'B/*@FALSE_B*/;
      468    14417    5                     IF VX_IO_STATUS = 2/*@IO_LD*/ THEN DO;
      469    14418        /* Here -> lost data error */
      470    14419        /*E*  ERROR: VXO-E$LIB_HEAD_IO_LD_VX-0
      471    14420        MESSAGE: Lost data condition on inversion record for library file; ars = %U1.
      472    14421        DESCRIPTION: Self-explanatory.
      473    14422        */
      474    14423                              %NUMBER( NUM1=VX_IO_SIZEC );
      475    14440                              %SCREAM( ERR#=E$LIB_HEAD_IO_LD_VX,MID="'O'",LEVEL=@E$F_VX,AUX=
             14440                                  @E$OUOF_VX );
      476    14443    5                        END;
      477    14444    4   NEXT_CANDIDATE:
      478    14445    4                     REF$ = PINCRW( REF$, SIZEW( VXR$TMPLT ) );
      479    14446    4                    END;
      480    14447    4                 DO CASE( STATE );
      481    14448    4                   CASE( 0 );
      482    14449    4                     CALL VXF$CLOSE( FCURR$, 2/*@LF*/ );
      483    14450    4                     FCURR$ = FCURR$ -> VX$LST.LINK$;
      484    14451    4                   CASE( 1 );
      485    14452    4                     CALL M$CLOSE( FPT_CLOSE_NEXT );
      486    14453    4                     FCURR$ = ADDR(NIL);
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:30   
      487    14454    4                   END;                    /* Do case( state ); */
      488    14455        /* Step to next library file */
      489    14456    3                 GOTO CHECK_FCURR;
      490    14457    3                END;                       /* If REF_RTYPE = @ER ... */
      491    14458    2   NONE_IN_LIST:
      492    14459    2            END;                       /* Do i= 1 to sizew( VX_REF_REC_A ) -3; */
      493    14460        %EJECT;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:31   
      494    14461    1   NONE_FOUND:
      495    14462        /* Complete pass thru and no hits */
      496    14463        /* Give back(internally) memory associated with the ref's */
      497    14464    2         DO I = 0 TO SIZEW( VX_REF_REC_A ) - 2;
      498    14465    2             REF_RTYPE = VX_REF_REC_A(I);
      499    14466    2             J = VX_PASS1_ALL_TYPE(REF_RTYPE);
      500    14467    2             SK = VX_M_FREE(J);
      501    14468    3             IF SK > 0 THEN DO;
      502    14469    3                 CALL VXF$FREE( J, SK, 1 );
      503    14470    3                 VX_CURR$ -> VX$NODE.L_START_A$(REF_RTYPE) = ADDR(NIL);
      504    14471    3                 VX_CURR$ -> VX$NODE.L_STOP_A$(REF_RTYPE)  = ADDR(NIL);
      505    14472    3                 VX_CURR$ -> VX$NODE.L_SIZE_A(REF_RTYPE)   = 0;
      506    14473    3                 VX_CURR$ -> VX$NODE.L_PREV_SIZE_A(REF_RTYPE) = 0;
      507    14474    3                END;                       /* If sk > 0 then do; */
      508    14475    2            END;                       /* Do i = 0 to sizew( VX_REF_REC_A ) - 2; */
      509    14476
      510    14477    1         CALL M$CLOSE (CLOSE_LLMU);
      511    14478    1         RETURN;
      512    14479
      513    14480        %EJECT;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:32   
      514    14481    1   READ_FILE: PROC( LIBRARY_FILE, LIBRARY_TYPE )   ALTRET ;
      515    14482
      516    14483    2   DCL LIBRARY_FILE BIT(1) ALIGNED;
      517    14484    2   DCL LIBRARY_TYPE UBIN(36) ALIGNED;
      518    14485
      519    14486    3         IF LIBRARY_FILE THEN DO;
      520    14487                                                /* Build head record */
      521    14488    3             CALL CONCAT( VX_O_KEY_BUF.FORM0.CHARS, VX_O_KEY_HEAD, VX_L_REC_BUF.CHARS);
      522    14489    3             VX_O_KEY_BUF.FORM0.COUNT = VX_IO_SIZEC + 1;
      523    14490    3             VX_L_REC_BUF.COUNT = VX_IO_SIZEC;
      524    14491                                                /* Now read the head record */
      525    14492    3             CALL VXI$READ( 2/*@LF*/, ADDR(VX_OU_HEAD), SIZEW(VX_OU_HEAD), 0/*@OF*/ )
             14492                      ALTRET(NO_HEAD);
      526    14493
      527    14494    3             IF FCURR$ = ADDR(NIL) THEN FCURR$ = ADDR(DEFAULT_FILE);
      528    14495    3             ELSE
      529    14496    4                 IF FCURR$ -> VX$LST.LIB.NEEDED = 0/*@NO*/ THEN DO;
      530    14497        /*E*  ERROR: VXO-E$LIB_ULIB_VX-0
      531    14498              MESSAGE: Library file %FN used.
      532    14499              DESCRIPTION: Self-explantory.
      533    14500        */
      534    14501                          %ERRMSG( ERR#=E$LIB_ULIB_VX, LEVEL=@E$I_VX, MID='O', DCB#=M$OF );
      535    14510    4                     FCURR$ -> VX$LST.LIB.NEEDED = 1/*@YES*/;
      536    14511    4                    END;
      537    14512
      538    14513                                            /* Now build an entry on the node list */
      539    14514    3             CALL VXS$LST(
      540    14515    3                     NEW_FILE$,
      541    14516    3                     ADDR( VX_L_REC_BUF ),
      542    14517    3                     2/*@LF*/,
      543    14518    3                     0/*@LF_ULIB*/,
      544    14519    3                     FCURR$,
      545    14520    3                     0 );
      546    14521    3             VX_CURR$ -> VX$NODE.TAIL$ -> VX$LST.LINK$ = NEW_FILE$;
      547    14522                                                /* Set tail */
      548    14523    3             VX_CURR$ -> VX$NODE.TAIL$ = NEW_FILE$;
      549    14524    3            END;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:33   
      550    14525
      551    14526    3         DO L = %TYPEDEF TO SIZEW( VX$NODE.L_START_A$ ) - 1;
      552    14527    3             PRE_START$(L) = VX_CURR$ -> VX$NODE.L_START_A$(L);
      553    14528    3             PRE_STOP$(L)  = VX_CURR$ -> VX$NODE.L_STOP_A$(L);
      554    14529    3             PRE_SIZE(L) = VX_CURR$ -> VX$NODE.L_SIZE_A(L);
      555    14530    3             VX_CURR$ -> VX$NODE.L_START_A$(L) = ADDR(NIL);
      556    14531    3             VX_CURR$ -> VX$NODE.L_STOP_A$(L)  = ADDR(NIL);
      557    14532    3             VX_CURR$ -> VX$NODE.L_SIZE_A(L) = 0;
      558    14533    3            END;
      559    14534
      560    14535    3         IF LIBRARY_FILE THEN DO;
      561    14536                                    /* Here => have read head record for object unit */
      562    14537    3             VX_INHIBIT_COMPACTION = 1/*@YES*/;
             14537                      /* Inhibit ref name compaction in VXO$OBJECT */
      563    14538    3             CALL VXO$OBJECT(NEW_FILE$, %SOURCE_ULIB#, ADDR(VX_PASS1_LIB_ALL_TYPE));
      564    14539    3             VX_INHIBIT_COMPACTION = 0/*@NO*/;
      565    14540    4             DO CASE( STATE );
      566    14541    4               CASE( 0 );
      567    14542    4                 CALL VXF$CLOSE( FCURR$, 2/*@LF*/ );
      568    14543    4               CASE( 1 );
      569    14544    4                 CALL M$CLOSE( FPT_CLOSE_NEXT );
      570    14545    4               END;                        /* Do case( state ); */
      571    14546    3            END;
      572    14547    3         ELSE DO CASE ( LIBRARY_TYPE ) ;   /* Library ou associated a library */
      573    14548    3           CASE ( 2/*@LF_SLIB*/ ) ;
      574    14549    3             CALL VXF$OPEN  ( VX_SLIB_INIT$, 0/*@OF*/ ) ;
      575    14550    3             CALL VXO$RUN   ( 2/*@LF_SLIB*/, %SOURCE_SLIB#, VX_PASS1_LIB_ALL_TYPE ) ;
      576    14551    3             CALL VXF$CLOSE ( VX_SLIB_INIT$, 0/*@OF*/ ) ;
      577    14552    3           CASE ( 1/*@LF_ALIB*/ ) ;
      578    14553    3             CALL VXF$OPEN  ( VX_O.FID.ALTSHARELIB$, 0/*@OF*/ ) ;
      579    14554    3             CALL VXO$RUN   ( 1/*@LF_ALIB*/, %SOURCE_ALIB#, VX_PASS1_LIB_ALL_TYPE ) ;
      580    14555    3             CALL VXF$CLOSE ( VX_O.FID.ALTSHARELIB$, 0/*@OF*/ ) ;
      581    14556    3           END ;
      582    14557
      583    14558    3         DO L= %TYPEDEF TO %TYPSEGREF;
      584    14559    3             POST_START$(L) = VX_CURR$ -> VX$NODE.L_START_A$(L);
      585    14560    3             POST_STOP$(L)  = VX_CURR$ -> VX$NODE.L_STOP_A$(L);
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:34   
      586    14561    3            END;
      587    14562    3         DO L = 1 TO SIZEW( VX_DEF_REC_A ) -1;
      588    14563    3             REC = VX_DEF_REC_A(L);
      589    14564    3             START$ = VX_CURR$ -> VX$NODE.L_START_A$(REC);
      590    14565    4             IF START$ ~= ADDR(NIL) THEN DO; /* Some came from the library ou */
      591    14566    4                 CALL VXQ$SORT( VX_CURR$ -> VX$NODE.L_START.DN$,
      592    14567    4                         START$,
      593    14568    4                         VX_CURR$ -> VX$NODE.L_STOP_A$(REC),
      594    14569    4                         SIZEW( VXD$TMPLT ),
      595    14570    4                         1/*@BY_NAME*/,
      596    14571    4                         2,
      597    14572    4                         0 );
      598    14573    4                 J = VX_PASS1_ALL_TYPE(REC);
      599    14574    4                 K = VX_CURR$ -> VX$NODE.L_SIZE_A(REC) + SIZEW(VXD$TMPLT);
      600    14575                      %ALLOCATE( PTR$=WHERE$, TYPE=J, SIZE=K );
      601    14582
      602    14583    5                 IF PRE_START$(REC) ~= ADDR(NIL) THEN DO;
      603    14584    5                     FIRST_START$ = PINCRW( PRE_START$(REC), 1*SIZEW(VXD$TMPLT) );
      604    14585    5                     FIRST_STOP$ = PINCRW( PRE_STOP$(REC), VX_CURR$ ->
      605    14586    5                             VX$NODE.L_SIZE_A(REC) + SIZEW(VXD$TMPLT) );
      606    14587    5                    END;
      607    14588    5                 ELSE DO;
      608    14589    5                     FIRST_START$ = PINCRW( WHERE$, SIZEW(VXD$TMPLT) );
      609    14590    5                     FIRST_STOP$ = PINCRW( WHERE$, VX_CURR$ ->
      610    14591    5                             VX$NODE.L_SIZE_A(REC) + SIZEW(VXD$TMPLT) );
      611    14592    5                    END;
      612    14593
      613    14594    4                 CALL VXU$MERGE( FIRST_START$,
      614    14595    4                         FIRST_STOP$,
      615    14596    4                         VX_CURR$ -> VX$NODE.L_START.DN$,
      616    14597    4                         VX_CURR$ -> VX$NODE.L_START_A$(REC),
      617    14598    4                         VX_CURR$ -> VX$NODE.L_STOP_A$(REC),
      618    14599    4                         VX_CURR$ -> VX$NODE.L_START.DN$,
      619    14600    4                         PRE_START$(REC),
      620    14601    4                         PRE_STOP$(REC),
      621    14602    4                         SIZEW(VXD$TMPLT),
      622    14603    4                         2    );
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:35   
      623    14604    4                 VX_CURR$ -> VX$NODE.L_START_A$(REC) = FIRST_START$;
      624    14605    4                 VX_CURR$ -> VX$NODE.L_STOP_A$(REC) = FIRST_STOP$;
      625    14606    4                 VX_CURR$ -> VX$NODE.L_SIZE_A(REC) = POFFW( FIRST_STOP$,
      626    14607    4                         FIRST_START$ ) + SIZEW( VXD$TMPLT );
      627    14608    4                END;                       /* If START$ ~= addr(nil) then do; */
      628    14609    4             ELSE DO;
      629    14610    4                 VX_CURR$ -> VX$NODE.L_START_A$(REC) = PRE_START$(REC);
      630    14611    4                 VX_CURR$ -> VX$NODE.L_STOP_A$(REC) = PRE_STOP$(REC);
      631    14612    4                 VX_CURR$ -> VX$NODE.L_SIZE_A(REC) = PRE_SIZE(REC);
      632    14613    4                END;                       /* Else do; */
      633    14614    3            END;                       /* Do L=1 to sizew( VX_DEF_REC_A ) - 1; */
      634    14615        /*
      635    14616              Now for the refs
      636    14617        */
      637    14618    3         DO L = 1 TO SIZEW( VX_REF_REC_A ) -2;
      638    14619    3             REC = VX_REF_REC_A(L);
      639    14620    3             START$ = VX_CURR$ -> VX$NODE.L_START_A$(REC);
      640    14621    4             IF START$ ~= ADDR(NIL) THEN DO; /* Some came from the library ou */
      641    14622    5                 IF REC = %TYPEREF THEN DO;
      642    14623    5                     CAND_P$ = VX_CURR$ -> VX$NODE.L_START.ER$;
      643    14624    5                     CAND_Q$ = VX_CURR$ -> VX$NODE.L_STOP.ER$;
      644    14625    6                     DO WHILE( CAND_P$ <= CAND_Q$ );
      645    14626    6                         CAND_P$ -> VXR$TMPLT.STATE = '0'B/*@FALSE_B*/;
      646    14627    6                         CAND_P$ = PINCRW( CAND_P$, SIZEW( VXR$TMPLT ) );
      647    14628    6                        END;               /* Do while( CAND_P$ <= CAND_Q$ ); */
      648    14629    5                    END;                   /* If rec = typeref then do; */
      649    14630    4                 CALL VXQ$SORT( VX_CURR$ -> VX$NODE.L_START.RN$,
      650    14631    4                         START$,
      651    14632    4                         VX_CURR$ -> VX$NODE.L_STOP_A$(REC),
      652    14633    4                         SIZEW( VXR$TMPLT ),
      653    14634    4                         1/*@BY_NAME*/,
      654    14635    4                         0,
      655    14636    4                         0 );
      656    14637    4                 J = VX_PASS1_ALL_TYPE(REC);
      657    14638    4                 K = VX_CURR$ -> VX$NODE.L_SIZE_A(REC) + 2 * SIZEW( VXR$TMPLT);
      658    14639                      %ALLOCATE( PTR$=WHERE$, TYPE=J, SIZE=K );
      659    14646
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:36   
      660    14647    5                 IF PRE_START$(REC) ~= ADDR(NIL) THEN DO;
      661    14648    5                     FIRST_START$ = PINCRW( PRE_START$(REC), 2*SIZEW(VXR$TMPLT) );
      662    14649    5                     FIRST_STOP$ = PINCRW( PRE_STOP$(REC), VX_CURR$ ->
      663    14650    5                             VX$NODE.L_SIZE_A(REC) + 2*SIZEW(VXR$TMPLT) );
      664    14651    5                    END;
      665    14652    5                 ELSE DO;
      666    14653    5                     FIRST_START$ = PINCRW( WHERE$, 2*SIZEW(VXR$TMPLT) );
      667    14654    5                     FIRST_STOP$ = PINCRW( WHERE$, VX_CURR$ ->
      668    14655    5                             VX$NODE.L_SIZE_A(REC) + 2*SIZEW(VXR$TMPLT) );
      669    14656    5                    END;
      670    14657
      671    14658    4                 CALL VXU$MERGE( FIRST_START$,
      672    14659    4                         FIRST_STOP$,
      673    14660    4                         VX_CURR$ -> VX$NODE.L_START.RN$,
      674    14661    4                         VX_CURR$ -> VX$NODE.L_START_A$(REC),
      675    14662    4                         VX_CURR$ -> VX$NODE.L_STOP_A$(REC),
      676    14663    4                         VX_CURR$ -> VX$NODE.L_START.RN$,
      677    14664    4                         PRE_START$(REC),
      678    14665    4                         PRE_STOP$(REC),
      679    14666    4                         SIZEW(VXR$TMPLT),
      680    14667    4                         0    );
      681    14668    4                 VX_CURR$ -> VX$NODE.L_START_A$(REC) = FIRST_START$;
      682    14669    4                 VX_CURR$ -> VX$NODE.L_STOP_A$(REC) = FIRST_STOP$;
      683    14670    4                 VX_CURR$ -> VX$NODE.L_SIZE_A(REC) = POFFW( FIRST_STOP$,
      684    14671    4                         FIRST_START$ ) + SIZEW( VXR$TMPLT );
      685    14672    4                END;                       /* If START$ ~= addr(nil) then do; */
      686    14673    4             ELSE DO;
      687    14674    4                 VX_CURR$ -> VX$NODE.L_START_A$(REC) = PRE_START$(REC);
      688    14675    4                 VX_CURR$ -> VX$NODE.L_STOP_A$(REC) = PRE_STOP$(REC);
      689    14676    4                 VX_CURR$ -> VX$NODE.L_SIZE_A(REC) = PRE_SIZE(REC);
      690    14677    4                END;                       /* Else do; */
      691    14678    3            END;                       /* Do L=1 to sizew( VX_REF_REC_A ) - 1; */
      692    14679    3         IF REC = %TYPEREF THEN DO;
      693    14680    3             CAND_P$ = VX_CURR$ -> VX$NODE.L_START.ER$;
      694    14681    3             CAND_Q$ = VX_CURR$ -> VX$NODE.L_STOP.ER$;
      695    14682    4             DO WHILE( CAND_P$ <= CAND_Q$ );
      696    14683    4                 IF CAND_P$ -> VXR$TMPLT.SREF THEN
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:37   
      697    14684    4                     CAND_P$ -> VXR$TMPLT.STATE = '1'B/*@TRUE_B*/;
      698    14685    4                 ELSE
      699    14686    4                     CAND_P$ -> VXR$TMPLT.STATE = '0'B/*@FALSE_B*/;
      700    14687    4                 CAND_P$ = PINCRW( CAND_P$, SIZEW( VXR$TMPLT ) );
      701    14688    4                END;                       /* Do while( CAND_P$ <= CAND_Q$ ); */
      702    14689    3            END;                           /* If rec = typeref then do; */
      703    14690    3         DO L = %TYPEDEF TO %TYPSEGREF;
      704    14691    4             IF POST_START$(L) ~= ADDR(NIL) THEN DO;
      705    14692    4                 SIZE = POFFW( POST_STOP$(L), POST_START$(L) ) + VX_REC_SIZE_A(L);
      706    14693    4                 CALL VXF$FREE( VX_PASS1_LIB_ALL_TYPE(L),
      707    14694    4                         SIZE,
      708    14695    4                         1    );
      709    14696    4                END;                       /* If POST_START$(L) ~= addr(nil) ... */
      710    14697    3            END;                           /* Do l = @ED to @ER; */
      711    14698    2         RETURN;
      712    14699
      713    14700
      714    14701    2   NO_HEAD:
      715    14702        /*E*  ERROR: VXO-E$BAD_PRIVATE_LIB_FILE_STR_VX-0
      716    14703                   MESSAGE: Invalid private library structure; inversion is incomplete.
      717    14704                   DESCRIPTION: Self-explanatory.
      718    14705        */
      719    14706              %SCREAM( ERR#=E$BAD_PRIVATE_LIB_FILE_STR_VX, MID="'O'", AUX=@E$OUOF_VX, LEVEL=
             14706                  @E$S_VX );
      720    14709    2         ALTRETURN;
      721    14710
      722    14711    2   END READ_FILE;
      723    14712
      724    14713    1   CHECK_DUP: PROC;
      725    14714    2   DCL SAVE_BUF CHAR (87);
      726    14715
      727    14716    2         SAVE_BUF = LLMU_BUF;
      728    14717    2         CALL M$REW (REW_LLMU);
      729    14718    2   AGAIN:
      730    14719    3         CALL M$READ (READ_LLMU) WHENALTRETURN DO;
      731    14720    3             LLMU_BUF = SAVE_BUF;
      732    14721    3             RETURN;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:38   
      733    14722    3            END;
      734    14723    2         IF LLMU_BUF = SAVE_BUF THEN CALL M$DELREC (DEL_LLMU);
      735    14724    2         GOTO AGAIN;
      736    14725    2   END CHECK_DUP;
      737    14726
      738    14727    1   END VXO$SATREF;

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:39   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXO$SATREF.

   Procedure VXO$SATREF requires 1369 words for executable code.
   Procedure VXO$SATREF requires 154 words of local(AUTO) storage.

    No errors detected in file VXO$SATREF.:E05TSI    .

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:40   

 Object Unit name= VXO$SATREF                                 File name= VXO$SATREF.:E05TOU
 UTS= JUL 30 '97 08:31:02.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Data  even  none   174    256  VXO$SATREF
    3   DCB   even  none     0      0  M$OF
    4  RoData even  UTS    211    323  VXO$SATREF
    5   DCB   even  none     0      0  M$LLMU
    6   Proc  even  none  1369   2531  VXO$SATREF
    7  RoData even  none    62     76  VXO$SATREF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     6      0   yes            yes      Std        0  VXO$SATREF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:41   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       7 VXQ$SORT
         yes           Std       3 VXF$FREE
 yes     yes           Std       3 VXF$OPEN
         yes           Std       3 VXA$GET
 yes     yes           Std       4 VXI$READ
         yes           Std       4 VXE$ERROR
         yes           Std       0 VXO$COMPACT
         yes           Std       3 VXF$CLOSE
         yes           Std       5 VXD$B2C
         yes           Std       3 VXE$ERRMSG
         yes           Std       3 VXO$RUN
 yes     yes           Std       6 VXS$LST
         yes           Std       3 VXO$OBJECT
         yes           Std      10 VXU$MERGE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:42   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_O_KEY_BUF                          B$TCB$
     VX_L_REC_BUF                          VX_OU_HEAD                            VX_TREE_SLIB_NAME
     VX_INHIBIT_COMPACTION                 VX_LIB_USED                           VX_ROOT$
     VX_CURR$                              VX_ERRORS                             VX_M_FREE
     VX_M_ALL                              VX_M_BASE_PTR                         VX_O
     VX_EFIELD1                            VX_TARGET_COUNT                       VX_SOURCE_COUNT
     VX_IO_STATUS                          VX_IO_SIZEC                           VX_O_KEY_HEAD
     VX_SLIB_INIT$                         VX_PASS1_ALL_TYPE                     VX_PASS1_LIB_ALL_TYPE
     VX_REC_SIZE_A                         VX_DEF_REC_A                          VX_REF_REC_A
     VX_REF_MATCH_A                        VX_RN_THRESHOLD                       VX_LIBRARY_PROBE
     M$OF$                                 M$OF                                  M$LLMU
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:43   


        1        1        /*M* VXO$SATREF - searches library files to satisfy references.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC,CCE */
        8        8        VXO$SATREF: PROC;

      8  6 000000   000000 700200 xent  VXO$SATREF   TSX0  ! X66_AUTO_0
         6 000001   000232 000000                    ZERO    154,0

        9        9
       10       10        %INCLUDE VX_INC_C;
       11    10726        %INCLUDE CP_6_SUBS;
       12    11266        %INCLUDE B_ERRORS_C;
       13    12393        %VX$NODE;

             12405    1   /*******************************************************************************
             12406    1   *                                                                              *
             12407    1   *                          VX$NODE                                                *
             12408    1   *                                                                              *
             12409    1   *******************************************************************************/

             12425    1   DCL 1 VX$NODE      ALIGNED    BASED,
             12426    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             12427    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             12428    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             12429    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             12430    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             12431                              to list of file nodes for this node            */
             12432    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             12433    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             12433                  /* Head pointer to shared library list */
             12434    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             12434                  /* Head pointer to list of shared libraries
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:44   
             12435                                          which have been mapped to included libraries */
             12436    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             12437    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             12438    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             12439    1         2 ADDR_START REDEF  ADDR_START_A,
             12440    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             12441    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             12442    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             12443    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             12444    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             12445    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             12446    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             12447    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             12448    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             12449    1         2 START_PAGE# REDEF START_PAGE#_A,
             12450    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             12451    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             12452    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             12453    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             12454    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             12455    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             12456    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             12457    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             12458    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             12458                  /* Starting pointer for common sections for this node */
             12459    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             12459                  /* Stopping pointer for common sections for this node */
             12460    1         2 L_START,
             12461    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             12462    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             12463    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             12464    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             12465    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             12466    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             12467    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             12468    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             12469    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:45   
             12470    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             12471    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             12472    1         2 L_STOP,
             12473    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             12474    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             12475    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             12476    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             12477    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             12478    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             12479    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             12480    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             12481    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             12482    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             12483    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             12484    1         2 L_SIZE,
             12485    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             12486    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             12487    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             12488    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             12489    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             12490    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             12491    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             12492    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             12493    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             12494    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             12495    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             12496    1         2 L_PREV_SIZE,
             12497    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             12498    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             12499    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             12500    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             12501    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             12502    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             12503    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             12504    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             12505    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             12506    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:46   
             12507    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             12508    1         2 BIT_MAP                ALIGNED,
             12509    1           3 DATA                  ALIGNED,
             12510    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12511    1           3 RPROC                 ALIGNED,
             12512    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12513    1           3 ROS                   ALIGNED,
             12514    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12515    1         2 L_SC_START,
             12516    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             12517    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             12518    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             12519    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             12520    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             12521    1         2 L_SC_STOP,
             12522    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             12523    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             12524    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             12525    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             12526    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             12527    1         2 PROMOTE_HEAD,
             12528    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             12529    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             12530    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             12531    1         2 PROMOTE_TAIL,
             12532    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             12533    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             12534    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             12535    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             12536    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             12537    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             12538    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             12539    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       14    12543        %VXD$TMPLT;

             12556    1   /*******************************************************************************
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:47   
             12557    1   *                                                                              *
             12558    1   *                          VXD$TMPLT                                              *
             12559    1   *                                                                              *
             12560    1   *******************************************************************************/

             12564        /*
             12565                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             12566                  ENTDEFs, SYMDEFs and SEGDEFs.
             12567        */
             12569    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             12570    1         2 VALUE SBIN UNAL,
             12571                /*K*  VALUE is the value if this entry is a constant.  */
             12572    1         2 AD REDEF VALUE,
             12573                /*K*  AD is the address if this entry is not constant.  */
             12574    1           3 LFLAGS UNAL,
             12575                  /*K*  LFLAGS is the field reserved for loader to flag load
             12576                        time attributes of the definition and must be zero
             12577                        in the object unit. */
             12578    1             4 SOURCE UBIN(3) UNAL,
             12579                    /*K*  SOURCE - Source of this DEF */
             12580    1             4 DEFINED BIT(1) UNAL,
             12581                    /*K*  DEFINED - Set if this DEF defined */
             12582    1             4 MULTIPLE BIT(1) UNAL,
             12583                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             12584    1             4 USED BIT(1) UNAL,
             12585                    /*K*  USED - Set if this DEF is used. */
             12586    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             12587                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             12588                        than 2048 (RU).  */
             12589    1           3 SECTNUM UBIN(11) UNAL,
             12590                  /*K*  SECTNUM contains an entry number into the section
             12591                        table (TYPE 3).  */
             12592    1           3 ISADDR UBIN HALF UNAL,
             12593                  /*K*  ISADDR - Is Address (RU)  */
             12594    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             12595                  /*K*  OFFSET is the word offset from the origin of the section. */
             12596    1         2 NPOINTER SBIN HALF UNAL,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:48   
             12597                /*K*  NPOINTER is a word displacement into the name record
             12598                      (TYPE 1) locating the name (of this entry). */
             12599    1         2 CONSTNT BIT(1) UNAL,
             12600                /*K*  CONSTNT is a flag bit to determine the interpretation
             12601                      of word 0.
             12602                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             12603                                    SECTNUM, and ISADDR or OFFSET.
             12604                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             12605    1         2 LFLAGS UNAL,
             12606                /*K*  LFLAGS is the field reserved for loader to flag load
             12607                      time attributes and must be zero in the object unit. */
             12608    1           3 MULTIPLE BIT(1) UNAL,
             12609                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             12610    1           3 USED BIT(1) UNAL,
             12611                  /*K*  USED - Set if this DEF is used. */
             12612    1           3 SOURCE UBIN(4) UNAL,
             12613                  /*K*  SOURCE - Source of this DEF */
             12614    1           3 IS_DCB BIT(1) UNAL,
             12615                  /*K* IS_DCB - Set if this is a DCB */
             12616    1           3 * BIT(10) UNAL,
             12617                  /*K*  * is reserved for future use and must be zero.  */
             12618    1         2 PROTECTION REDEF LFLAGS,
             12619                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             12620    1           3 TYPE UBIN(5) UNAL,
             12621                  /*K*  TYPE is the Protection type.  */
             12622    1           3 * UBIN(12) UNAL;
             12623                  /*K*  * is reserved for future use and must be zero.  */
       15    12638        %VXR$TMPLT;

             12651    1   /*******************************************************************************
             12652    1   *                                                                              *
             12653    1   *                          VXR$TMPLT                                              *
             12654    1   *                                                                              *
             12655    1   *******************************************************************************/

             12660    1   DCL 1 VXR$TMPLT BASED ALIGNED,
             12661    1         2 NPOINTER SBIN HALF UNAL,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:49   
             12662                /*K*  NPOINTER is the word index to the symbol name.  */
             12663    1         2 SREF BIT(1) UNAL,
             12664                /*K*  SREF is set is this is a secondary reference.  */
             12665    1         2 READ_ONLY BIT(1) UNAL,
             12666    1         2 GOT BIT(1) UNAL,
             12667                /*K*  GOT is set if got the OU name displacement.  */
             12668    1         2 STATE REDEF GOT BIT(1) UNAL,
             12669    1         2 OPOINTER UBIN(15) UNAL;
             12670                /*K*  OPOINTER is the word index to the OU name.  */

             12692    1   /*******************************************************************************
             12693    1   *                                                                              *
             12694    1   *                          VXR$SAT                                                *
             12695    1   *                                                                              *
             12696    1   *******************************************************************************/

             12700    1   DCL 1 VXR$SAT                 ALIGNED   BASED,
             12701    1         2 VALUE        UBIN(36)  ALIGNED,
             12702    1         2 SEG   REDEF  VALUE,
             12703    1           3 OFFSET     UBIN(18)  UNAL,
             12704    1           3 *          BIT(6)    UNAL,
             12705    1           3 SEGID      UBIN(12)  UNAL,
             12706    1         2 BELOW        BIT(1)    UNAL,
             12707    1         2 *            BIT(17)   UNAL,
             12708    1         2 NODE#        UBIN(18)  UNAL;
       16    12710        %TMPLT;

             12722    1   /*******************************************************************************
             12723    1   *                                                                              *
             12724    1   *                          TMPLT                                                 *
             12725    1   *                                                                              *
             12726    1   *******************************************************************************/

             12731    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             12732    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             12733    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             12734    1         2 W       REDEF     A,            /* By name                            */
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:50   
             12735    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             12736    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       17    12739        %VX$LST;

             12752    1   /*******************************************************************************
             12753    1   *                                                                              *
             12754    1   *                          VX$LST                                                 *
             12755    1   *                                                                              *
             12756    1   *******************************************************************************/

             12761    1   DCL 1 VX$LST                          ALIGNED BASED,
             12762    1         2 LINK$        PTR,               /* Link to next item                  */
             12763    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             12764    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             12765    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             12766    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             12767    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             12768    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             12769    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             12770    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             12771    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             12772    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             12773    1         2 P,
             12774    1           3 NAME_       ALIGNED,
             12775    1             4 BOUND      UBIN(20)  UNAL,
             12776    1             4 FLAGSV     UBIN(11)  UNAL,
             12777    1             4 *          BIT(5)    UNAL,
             12778    1             4 NAME$      PTR,
             12779    1           3 ACCT_       ALIGNED,
             12780    1             4 BOUND      UBIN(20)  UNAL,
             12781    1             4 FLAGSV     UBIN(11)  UNAL,
             12782    1             4 *          BIT(5)    UNAL,
             12783    1             4 ACCT$      PTR,
             12784    1           3 PASS_       ALIGNED,
             12785    1             4 BOUND      UBIN(20)  UNAL,
             12786    1             4 FLAGSV     UBIN(11)  UNAL,
             12787    1             4 *          BIT(5)    UNAL,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:51   
             12788    1             4 PASS$      PTR,
             12789    1           3 SN_         ALIGNED,
             12790    1             4 BOUND      UBIN(20)  UNAL,
             12791    1             4 FLAGSV     UBIN(11)  UNAL,
             12792    1             4 *          BIT(5)    UNAL,
             12793    1             4 SN$        PTR,
             12794    1           3 WSN_        ALIGNED,
             12795    1             4 BOUND      UBIN(20)  UNAL,
             12796    1             4 FLAGSV     UBIN(11)  UNAL,
             12797    1             4 *          BIT(5)    UNAL,
             12798    1             4 WSN$       PTR,
             12799    1           3 B           ALIGNED,
             12800    1             4 RES        BIT(1)    UNAL,
             12801    1             4 ASN        BIT(1)    UNAL,
             12802    1             4 ACCT       BIT(1)    UNAL,
             12803    1             4 *          BIT(33)   UNAL,
             12804    1           3 RES         CHAR(4)   ALIGNED,
             12805    1           3 ASN         UBIN(36)  ALIGNED;
       18    12808        %VX$LST( NAME=DEFAULT_FILE, STCLASS=STATIC );

             12821    1   /*******************************************************************************
             12822    1   *                                                                              *
             12823    1   *                          DEFAULT_FILE                                           *
             12824    1   *                                                                              *
             12825    1   *******************************************************************************/

             12830    1   DCL 1 DEFAULT_FILE                          ALIGNED STATIC,
             12831    1         2 LINK$        PTR,               /* Link to next item                  */
             12832    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             12833    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             12834    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             12835    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             12836    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             12837    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             12838    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             12839    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             12840    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:52   
             12841    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             12842    1         2 P,
             12843    1           3 NAME_       ALIGNED,
             12844    1             4 BOUND      UBIN(20)  UNAL,
             12845    1             4 FLAGSV     UBIN(11)  UNAL,
             12846    1             4 *          BIT(5)    UNAL,
             12847    1             4 NAME$      PTR,
             12848    1           3 ACCT_       ALIGNED,
             12849    1             4 BOUND      UBIN(20)  UNAL,
             12850    1             4 FLAGSV     UBIN(11)  UNAL,
             12851    1             4 *          BIT(5)    UNAL,
             12852    1             4 ACCT$      PTR,
             12853    1           3 PASS_       ALIGNED,
             12854    1             4 BOUND      UBIN(20)  UNAL,
             12855    1             4 FLAGSV     UBIN(11)  UNAL,
             12856    1             4 *          BIT(5)    UNAL,
             12857    1             4 PASS$      PTR,
             12858    1           3 SN_         ALIGNED,
             12859    1             4 BOUND      UBIN(20)  UNAL,
             12860    1             4 FLAGSV     UBIN(11)  UNAL,
             12861    1             4 *          BIT(5)    UNAL,
             12862    1             4 SN$        PTR,
             12863    1           3 WSN_        ALIGNED,
             12864    1             4 BOUND      UBIN(20)  UNAL,
             12865    1             4 FLAGSV     UBIN(11)  UNAL,
             12866    1             4 *          BIT(5)    UNAL,
             12867    1             4 WSN$       PTR,
             12868    1           3 B           ALIGNED,
             12869    1             4 RES        BIT(1)    UNAL,
             12870    1             4 ASN        BIT(1)    UNAL,
             12871    1             4 ACCT       BIT(1)    UNAL,
             12872    1             4 *          BIT(33)   UNAL,
             12873    1           3 RES         CHAR(4)   ALIGNED,
             12874    1           3 ASN         UBIN(36)  ALIGNED;
       19    12877        %T$C;

             12889    1   /*******************************************************************************
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:53   
             12890    1   *                                                                              *
             12891    1   *                          T$C                                                 *
             12892    1   *                                                                              *
             12893    1   *******************************************************************************/

             12898    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             12899    1         2 COUNT        UBIN( 9) UNAL,
             12900    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             12901    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             12902    1         2 COUNT        UBIN( 9) UNAL,
             12903    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       20    12906        %SET LISTMAC='1'B;
       21    12907        %SET LISTSUB='1'B;
       22    12908        %BANNER(ARG=SUBS);
             12909        %LSET LISTDIR='0'B;

             12916    1   /*******************************************************************************
             12917    1   *                                                                              *
             12918    1   *                          SUBS                                                 *
             12919    1   *                                                                              *
             12920    1   *******************************************************************************/

       23    12924        %B$RECORDSUBS;
             12925        %EQU TYPHEAD=0 ;
             12926        %EQU TYPDNAM=1 ;
             12927        %EQU TYPRNAM=2 ;
             12928        %EQU TYPSECT=3 ;
             12929        %EQU TYPEDEF=4 ;
             12930        %EQU TYPEREF=5 ;
             12931        %EQU TYPSDEF=6 ;
             12932        %EQU TYPSREF=7 ;
             12933        %EQU TYPSEGDEF=8 ;
             12934        %EQU TYPSEGREF=9 ;
             12935        %EQU TYPPROG=10 ;
             12936        %EQU SUBTYPPROG=0 ;
             12937        %EQU SUBTYPREL=1 ;
             12938        %EQU TYPLOGBLK=11 ;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:54   
             12939        %EQU TYPINTNTRY=12 ;
             12940        %EQU TYPEXST=13 ;
             12941        %EQU TYPVREBL=14 ;
             12942        %EQU TYPDBGNAM=15 ;
             12943        %EQU TYPLV1LB=16 ;
             12944        %EQU TYPLV1=17 ;
             12945        %EQU TYPDATASEG=18 ;
             12946        %EQU TYPRUM=20 ;
             12947        %EQU TYPBIRTH=21 ;
             12948        %EQU TYPPLOVER=22 ;
             12949        %EQU TYPCOMPID=23 ;
             12950        %EQU TYPROS=30 ;
       24    12952        %SUB_LINKFLAGS;
             12953        %EQU SOURCE_OBJECT#=0 ;
             12954        %EQU SOURCE_SLIB#=1 ;
             12955        %EQU SOURCE_ALIB#=2 ;
             12956        %EQU SOURCE_ULIB#=3 ;
             12957        %EQU SOURCE_RLIB#=4 ;
             12958        %EQU SOURCE_REMOVED#=5 ;
             12959        %EQU SOURCE_LINKER#=6 ;
       25    12961        %BANNER(ARG=B$DNAME);
             12962        %LSET LISTDIR='0'B;

             12969    1   /*******************************************************************************
             12970    1   *                                                                              *
             12971    1   *                          B$DNAME                                                *
             12972    1   *                                                                              *
             12973    1   *******************************************************************************/

       26    12977        %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             12978            %LSET STR=CONCAT(TEXTCHAR(BASED),'        ');
             12979            %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR
             12980                (SUBSTR(STR,0,3)='EXT');
             12982            %ELSE;
             12983                %LSET INIT=CHARTEXT('/*');
             12984            %ENDIF;
             12985    1   DCL 1 B$DNAME BASED ALIGNED,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:55   
             12986    1         2 COUNT UBIN HALF UNAL %INIT(SIZEC(' ')) %CHARTEXT('/**/'),
             12987                /*K*  COUNT is the number of characters in the name */
             12988            %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR
             12989                (SUBSTR(STR,0,3)='EXT');
             12992            %ELSE;
             12993    1         2 %CHARTEXT('TEXT') CHAR(B$DNAME.COUNT) UNAL;
             12994            %ENDIF;
       27    12996        %B;
             12997        %LSET LISTDIR='0'B;

             13004    1   /*******************************************************************************
             13005    1   *                                                                              *
             13006    1   *                          BIT                                                 *
             13007    1   *                                                                              *
             13008    1   *******************************************************************************/

       28    13012    1   DCL GOT_RN          BIT(1)    ALIGNED   AUTO;
       29    13013    1   DCL FIRST_DEFAULT   BIT(1)    ALIGNED   AUTO;
       30    13014    1   DCL FIRST_TIME      BIT(1)    ALIGNED   STATIC    INIT( '1'B/*@TRUE_B*/ );
       31    13015        %E;
             13016        %LSET LISTDIR='0'B;

             13023    1   /*******************************************************************************
             13024    1   *                                                                              *
             13025    1   *                          ENTRY                                                 *
             13026    1   *                                                                              *
             13027    1   *******************************************************************************/

       32    13031        %ENTRIES;
             13032    1   DCL VXE$ERROR       ENTRY(4);
             13033    1   DCL VXE$ERR         ENTRY(3);
             13034    1   DCL VXE$MERC        ENTRY;
             13035    1   DCL VXE$ERRMSG      ENTRY(3);
             13036    1   DCL VXR$READ        ENTRY( 3 );
             13037    1   DCL VXW$WRITE       ENTRY( 3 );
             13038    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             13039    1   DCL VXD$B2C         ENTRY( 5 );
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:56   
             13040    1   DCL VXD$C2B         ENTRY( 3 );
             13041    1   DCL VXA$GET         ENTRY( 3 );
             13042    1   DCL VXF$FREE        ENTRY( 3 );
             13043    1   DCL VXQ$SORT        ENTRY( 7 );
             13044    1   DCL VXY$YESNO       ENTRY( 1 );
       33    13046        %ENTRIES_IO;
             13047    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             13048    1   DCL VXF$CLOSE       ENTRY(3);
             13049    1   DCL VXU$PREAD       ENTRY(12);
             13050    1   DCL VXK$KEY         ENTRY(4);
             13051    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             13052    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       34    13054    1   DCL VXO$OBJECT      ENTRY(3);
       35    13055    1   DCL VXO$RUN         ENTRY(3);
       36    13056    1   DCL VXS$LST         ENTRY(6)  ALTRET;
       37    13057    1   DCL VXU$MERGE       ENTRY(10);
       38    13058    1   DCL VXO$COMPACT     ENTRY;
       39    13059        %PTR;
             13060        %LSET LISTDIR='0'B;

             13067    1   /*******************************************************************************
             13068    1   *                                                                              *
             13069    1   *                          PTR                                                 *
             13070    1   *                                                                              *
             13071    1   *******************************************************************************/

       40    13075        %POINTER;
             13076    1   DCL P$         PTR       ALIGNED AUTO;
             13077    1   DCL Q$         PTR       ALIGNED AUTO;
             13078    1   DCL R$         PTR       ALIGNED AUTO;
       41    13080    1   DCL NEW_FILE$       PTR       ALIGNED   AUTO;
       42    13081    1   DCL REF$            PTR       ALIGNED   AUTO;
       43    13082    1   DCL REF_STOP$       PTR       ALIGNED   AUTO;
       44    13083    1   DCL REF_NAME$       PTR       ALIGNED   AUTO;
       45    13084    1   DCL FCURR$          PTR       ALIGNED   AUTO;
       46    13085    1   DCL CURR$           PTR       ALIGNED   AUTO;
       47    13086    1   DCL NAM$            PTR       ALIGNED   AUTO;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:57   
       48    13087    1   DCL LSTART$         PTR       ALIGNED   AUTO;
       49    13088    1   DCL START$         PTR       ALIGNED   AUTO;
       50    13089    1   DCL RSTOP$         PTR       ALIGNED   AUTO;
       51    13090    1   DCL RNAME_START$         PTR       ALIGNED   AUTO;
       52    13091    1   DCL RNAME$               PTR       ALIGNED   AUTO;
       53    13092    1   DCL RN$                  PTR       ALIGNED   AUTO;
       54    13093    1   DCL NEXT_AVAIL$          PTR       ALIGNED   AUTO;
       55    13094    1   DCL DUMMY$               PTR       ALIGNED   AUTO;
       56    13095    1   DCL SON_NODE$            PTR       ALIGNED   AUTO;
       57    13096    1   DCL FIRST_START$         PTR       ALIGNED   AUTO;
       58    13097    1   DCL FIRST_STOP$          PTR       ALIGNED   AUTO;
       59    13098    1   DCL WHERE$               PTR       ALIGNED   AUTO;
       60    13099    1   DCL NEXT$                PTR       ALIGNED   AUTO;
       61    13100    1   DCL CAND_P$              PTR       ALIGNED   AUTO;
       62    13101    1   DCL CAND_Q$              PTR       ALIGNED   AUTO;
       63    13102    1   DCL PRE_START$(0:%TYPSEGREF)    PTR  ALIGNED   AUTO;
       64    13103    1   DCL PRE_STOP$(0:%TYPSEGREF)     PTR  ALIGNED   AUTO;
       65    13104    1   DCL POST_START$(0:%TYPSEGREF)   PTR  ALIGNED   AUTO;
       66    13105    1   DCL POST_STOP$(0:%TYPSEGREF)    PTR  ALIGNED   AUTO;
       67    13106    1   DCL CODE UBIN;
       68    13107        %U;
             13108        %LSET LISTDIR='0'B;

             13115    1   /*******************************************************************************
             13116    1   *                                                                              *
             13117    1   *                          UBIN                                                 *
             13118    1   *                                                                              *
             13119    1   *******************************************************************************/

       69    13123        %INDEX;
             13124    1   DCL I          UBIN(36) ALIGNED AUTO;
             13125    1   DCL SI REDEF I SBIN WORD ALIGNED;
             13126    1   DCL J          UBIN(36) ALIGNED AUTO;
             13127    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             13128    1   DCL K          UBIN(36) ALIGNED AUTO;
             13129    1   DCL SK REDEF K SBIN WORD ALIGNED;
             13130    1   DCL L          UBIN(36) ALIGNED AUTO;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:58   
             13131    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       70    13133    1   DCL RTYPE           UBIN(36)  ALIGNED   AUTO;
       71    13134    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
       72    13135    1   DCL ALL_TYPE        UBIN(36)  ALIGNED   AUTO;
       73    13136    1   DCL DEF_RTYPE       UBIN(36)  ALIGNED   AUTO;
       74    13137    1   DCL REF_RTYPE       UBIN(36)  ALIGNED   AUTO;
       75    13138    1   DCL REC             UBIN(36)  ALIGNED   AUTO;
       76    13139    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       77    13140    1   DCL STATE           UBIN(36)  ALIGNED    AUTO;
       78    13141    1   DCL SOURCE          UBIN(36)  ALIGNED    AUTO;
       79    13142    1   DCL PRE_SIZE(0:%TYPSEGREF)      UBIN(36)  ALIGNED   AUTO;
       80    13143        %S;
             13144        %LSET LISTDIR='0'B;

             13151    1   /*******************************************************************************
             13152    1   *                                                                              *
             13153    1   *                          SBIN                                                 *
             13154    1   *                                                                              *
             13155    1   *******************************************************************************/

       81    13159    1   DCL SIZE_AVAIL      SBIN WORD ALIGNED   AUTO;
       82    13160        %BIN_SEARCH_TEMPS(
       83    13161                   LOW=BIN_LOW,
       84    13162                   HIGH=BIN_HIGH,
       85    13163                   START1$=BIN_START1$,
       86    13164                   MID=BIN_MID,
       87    13165                   NTEMP$=BIN_NTEMP$);
             13166    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
             13167    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
             13168    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
             13169    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
             13170    1   DCL BIN_START1$         PTR       ALIGNED AUTO;
       88    13172        %BIN_SEARCH_VARS(
       89    13173                   START$=BIN_START$,
       90    13174                   STOP$=BIN_STOP$,
       91    13175                   RESULT$=BIN_RESULT$,
       92    13176                   N$=BIN_N$,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:59   
       93    13177                   MATCH$=BIN_MATCH$,
       94    13178                   NAME_DISP=BIN_NAME_DISP,
       95    13179                   SIZE=BIN_SIZE);
             13180    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
             13181    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
             13182    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
             13183    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
             13184    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
             13185    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             13186    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
       96    13188        %MOVE_TMPLT;
             13189    1   DCL VX$TARGET_B           BIT( VX_TARGET_COUNT ) ALIGNED    BASED;
             13190    1   DCL VX$SOURCE_B           BIT( VX_SOURCE_COUNT ) ALIGNED    BASED;
             13191    1   DCL VX$TARGET_C         CHAR( VX_TARGET_COUNT ) ALIGNED BASED;
             13192    1   DCL VX$SOURCE_C         CHAR( VX_SOURCE_COUNT ) ALIGNED BASED;
       97    13194    1   DCL M$OF  DCB;
       98    13195        %PLIST;
       99    13196        %FPT_OPEN(
      100    13197                   FPTN=FPT_OPEN_FIRST,
      101    13198                   DCB=M$OF,
      102    13199                   NAME=FPT_OPEN_FIRST_NAME,
      103    13200                   ACCT=FPT_OPEN_FIRST_ACCT,
      104    13201                   ASN=FILE,
      105    13202                   ORG=KEYED,
      106    13203                   ACS=DIRECT,
      107    13204                   FUN=IN,
      108    13205                   DISP=NAMED,
      109    13206                   SETDCB=YES,
      110    13207                   SCRUB=YES,
      111    13208                   STCLASS=CONSTANT);
      112    13317        %FPT_OPEN (
      113    13318                   FPTN = FPT_OPEN_LAST,
      114    13319                   DCB = M$OF,
      115    13320                   NAME = FPT_OPEN_LAST_NAME,
      116    13321                   ACCT = FPT_OPEN_FIRST_ACCT,
      117    13322                   ACS = DIRECT,
      118    13323                   ASN = FILE,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:60   
      119    13324                   FUN = IN,
      120    13325                   DISP = NAMED,
      121    13326                   NXTF = YES,
      122    13327                   ORG = KEYED,
      123    13328                   REV = YES,
      124    13329                   SCRUB = YES,
      125    13330                   STCLASS = CONSTANT,
      126    13331                   TEST = YES ) ;
      127    13440        %FPT_OPEN(
      128    13441                   FPTN=FPT_OPEN_NEXT,
      129    13442                   DCB=M$OF,
      130    13443                   ASN=FILE,
      131    13444                   ORG=KEYED,
      132    13445                   ACS=DIRECT,
      133    13446                   FUN=IN,
      134    13447                   DISP=NAMED,
      135    13448                   NXTA=NO,
      136    13449                   NXTF=YES,
      137    13450                   STCLASS=CONSTANT);
      138    13559              % FPT_OPEN (FPTN = OPEN_LLMU,
      139    13560                      DCB = M$LLMU,
      140    13561                      NAME = LLMU_FILE_NAME,
      141    13562                      ASN = FILE,
      142    13563                      ACS = SEQUEN,
      143    13564                      ORG = CONSEC,
      144    13565                      EXIST = OLDFILE,
      145    13566                      CTG = YES);
      146    13675              % VLP_NAME (FPTN = LLMU_FILE_NAME,
      147    13676                      NAME = '***LLMU',
      148    13677                      LEN = 7);
      149    13704              % FPT_WRITE (FPTN = WRITE_LLMU,
      150    13705                      BUF = LLMU_BUF,
      151    13706                      DCB = M$LLMU);
      152    13737              % FPT_REW (FPTN = REW_LLMU,
      153    13738                      DCB = M$LLMU);
      154    13753              % FPT_DELREC (FPTN = DEL_LLMU,
      155    13754                      DCB = M$LLMU);
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:61   
      156    13773              % FPT_READ (FPTN = READ_LLMU, DCB = M$LLMU, BUF = LLMU_BUF);
      157    13812              % FPT_CLOSE (FPTN =CLOSE_LLMU,
      158    13813                      DCB = M$LLMU,
      159    13814                      DISP = SAVE);
      160    13856    1   DCL M$LLMU DCB;
      161    13857    1   DCL LLMU_BUF CHAR (87) STATIC INIT (' ');
      162    13858    1   DCL ND$ PTR;
      163    13859    1   DCL 1 NODE BASED (ND$),
      164    13860    1         2 * CHAR (1),
      165    13861    1         2 LP CHAR (1),
      166    13862    1         2 NUM CHAR (4),
      167    13863    1         2 RP CHAR (1);
      168    13864    1   DCL LIB_ACCT CHAR (8);
      169    13865    1   DCL LIB_ACCT_B CHAR (8) BASED;
      170    13866    1   DCL DOT_BLK CHAR (1);
      171    13867        %VLP_NAME(
      172    13868                   FPTN=FPT_OPEN_FIRST_NAME,
      173    13869                   STCLASS=CONSTANT,
      174    13870                   LEN=5,
      175    13871                   NAME=':ETC_');
      176    13898        %VLP_NAME (
      177    13899                   FPTN = FPT_OPEN_LAST_NAME,
      178    13900                   STCLASS = CONSTANT,
      179    13901                   LEN = 6,
      180    13902                   NAME = ':ETC_z');
      181    13929        %VLP_NAME (
      182    13930                   FPTN = OPEN_LAST_NAME,
      183    13931                   STCLASS = AUTO,
      184    13932                   LEN = 31 ) ;
      185    13959        %VLP_ACCT(
      186    13960                   FPTN=FPT_OPEN_FIRST_ACCT,
      187    13961                   STCLASS=CONSTANT,
      188    13962                   ACCT=':SYS');
      189    13975        %FPT_CLOSE(
      190    13976                   FPTN=FPT_CLOSE_NEXT,
      191    13977                   DCB=M$OF,
      192    13978                   DISP=SAVE,
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:62   
      193    13979                   STCLASS=CONSTANT);
      194    14021        %F$DCB;
      195    14078        %B$TCB;
      196    14081        %B$ALT;
      197    14089        %EJECT;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:63   
      198    14090        /**/
      199    14091        /**/
      200    14092    2         IF FIRST_TIME THEN DO;

  14092  6 000002   000022 234000 2                  SZN     FIRST_TIME
         6 000003   000033 605000 6                  TPL     s:14106

      201    14093    2             FIRST_TIME              = '0'B/*@FALSE_B*/;

  14093  6 000004   000022 450000 2                  STZ     FIRST_TIME

      202    14094    2             DEFAULT_FILE.LIB.NEEDED = 1/*@YES*/;

  14094  6 000005   000001 220003                    LDX0    1,DU
         6 000006   000004 440000 2                  SXL0    DEFAULT_FILE+4

      203    14095    2             DEFAULT_FILE.P.ACCT_    = VECTOR(FPT_OPEN_FIRST_ACCT);

  14095  6 000007   000000 237000 7                  LDAQ    0
         6 000010   000007 755000 2                  STA     DEFAULT_FILE+7
         6 000011   000010 756000 2                  STQ     DEFAULT_FILE+8

      204    14096    2             DEFAULT_FILE.P.PASS_    = VECTOR(NIL);

  14096  6 000012   000002 237000 7                  LDAQ    2
         6 000013   000011 755000 2                  STA     DEFAULT_FILE+9
         6 000014   000012 756000 2                  STQ     DEFAULT_FILE+10

      205    14097    2             DEFAULT_FILE.P.SN_      = VECTOR(NIL);

  14097  6 000015   000002 237000 7                  LDAQ    2
         6 000016   000013 755000 2                  STA     DEFAULT_FILE+11
         6 000017   000014 756000 2                  STQ     DEFAULT_FILE+12

      206    14098    2             DEFAULT_FILE.P.WSN_     = VECTOR(NIL);

  14098  6 000020   000002 237000 7                  LDAQ    2
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:64   
         6 000021   000015 755000 2                  STA     DEFAULT_FILE+13
         6 000022   000016 756000 2                  STQ     DEFAULT_FILE+14

      207    14099    2             DEFAULT_FILE.P.B.RES    = '0'B/*@FALSE_B*/;

  14099  6 000023   000031 236000 xsym               LDQ     B_VECTNIL+25
         6 000024   000017 356000 2                  ANSQ    DEFAULT_FILE+15

      208    14100    2             DEFAULT_FILE.P.B.ASN    = '1'B/*@TRUE_B*/;

  14100  6 000025   200000 236003                    LDQ     65536,DU
         6 000026   000017 256000 2                  ORSQ    DEFAULT_FILE+15

      209    14101    2             DEFAULT_FILE.P.B.ACCT   = '1'B/*@TRUE_B*/;

  14101  6 000027   100000 236003                    LDQ     32768,DU
         6 000030   000017 256000 2                  ORSQ    DEFAULT_FILE+15

      210    14102    2             DEFAULT_FILE.P.ASN      = %FILE#;

  14102  6 000031   000001 235007                    LDA     1,DL
         6 000032   000021 755000 2                  STA     DEFAULT_FILE+17

      211    14103    2            END;

      212    14104        /**/
      213    14105        /**/
      214    14106    1         OPEN_LLMU.V.FUN# = 3;

  14106  6 000033   003000 236007                    LDQ     1536,DL
         6 000034   000071 552010 2                  STBQ    OPEN_LLMU+37,'10'O

      215    14107    1         CALL M$OPEN (OPEN_LLMU);

  14107  6 000035   000024 630400 2                  EPPR0   OPEN_LLMU
         6 000036   050000 713400                    CLIMB   open
         6 000037   410400 401760                    pmme    nvectors=18
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:65   

      216    14108        /**/
      217    14109        /**/
      218    14110    2         DO I = 1 TO SIZEW( VX_DEF_REC_A ) - 1;

  14110  6 000040   000001 235007                    LDA     1,DL
         6 000041   200107 755100                    STA     I,,AUTO
         6 000042   000107 710000 6                  TRA     s:14123+3

      219    14111    2             DEF_RTYPE = VX_DEF_REC_A(I);

  14111  6 000043   200107 720100                    LXL0    I,,AUTO
         6 000044   000000 235010 xsym               LDA     VX_DEF_REC_A,X0
         6 000045   200116 755100                    STA     DEF_RTYPE,,AUTO

      220    14112    2             REF_RTYPE = VX_REF_MATCH_A( DEF_RTYPE );

  14112  6 000046   000000 235005 xsym               LDA     VX_REF_MATCH_A,AL
         6 000047   200117 755100                    STA     REF_RTYPE,,AUTO

      221    14113    3             IF VX_CURR$ -> VX$NODE.L_START_A$(DEF_RTYPE) ~= ADDR(NIL) THEN DO;

  14113  6 000050   000000 470400 xsym               LDP0    VX_CURR$
         6 000051   200116 721100                    LXL1    DEF_RTYPE,,AUTO
         6 000052   000030 236111                    LDQ     24,X1,PR0
         6 000053   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000054   000104 600000 6                  TZE     s:14123

      222    14114    3                 CALL VXQ$SORT(

  14114  6 000055   000004 236000 7                  LDQ     4
         6 000056   200226 756100                    STQ     @LIBRARY_TYPE+28,,AUTO
         6 000057   000006 237000 7                  LDAQ    6
         6 000060   200224 757100                    STAQ    @LIBRARY_TYPE+26,,AUTO
         6 000061   000007 236000 7                  LDQ     7
         6 000062   200223 756100                    STQ     @LIBRARY_TYPE+25,,AUTO
         6 000063   200116 236100                    LDQ     DEF_RTYPE,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:66   
         6 000064   000022 736000                    QLS     18
         6 000065   000042 036003                    ADLQ    34,DU
         6 000066   000000 036000 xsym               ADLQ    VX_CURR$
         6 000067   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 000070   200116 236100                    LDQ     DEF_RTYPE,,AUTO
         6 000071   000022 736000                    QLS     18
         6 000072   000030 036003                    ADLQ    24,DU
         6 000073   000000 036000 xsym               ADLQ    VX_CURR$
         6 000074   200221 756100                    STQ     @LIBRARY_TYPE+23,,AUTO
         6 000075   000000 236000 xsym               LDQ     VX_CURR$
         6 000076   000031 036003                    ADLQ    25,DU
         6 000077   200220 756100                    STQ     @LIBRARY_TYPE+22,,AUTO
         6 000100   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 000101   000025 631400 xsym               EPPR1   B_VECTNIL+21
         6 000102   000000 701000 xent               TSX1    VXQ$SORT
         6 000103   000000 011000                    NOP     0

      223    14115    3                         VX_CURR$ -> VX$NODE.L_START.DN$,
      224    14116    3                         VX_CURR$ -> VX$NODE.L_START_A$(DEF_RTYPE),
      225    14117    3                         VX_CURR$ -> VX$NODE.L_STOP_A$(DEF_RTYPE),
      226    14118    3                         SIZEW( VXD$TMPLT ),
      227    14119    3                         1/*@BY_NAME*/,
      228    14120    3                         2,
      229    14121    3                         0/*@NO_TIES*/ );
      230    14122    3                END;

      231    14123    2            END;                       /* Do i = 1 to sizew( VX_DEF_REC_A ) - 1; */

  14123  6 000104   200107 235100                    LDA     I,,AUTO
         6 000105   000001 035007                    ADLA    1,DL
         6 000106   200107 755100                    STA     I,,AUTO
         6 000107   000004 115007                    CMPA    4,DL
         6 000110   000043 602000 6                  TNC     s:14111

      232    14124        /**/
      233    14125    1         IF VX_O.FIDN$.UNSAT$ = ADDR(NIL) AND VX_O.SIN.NOSYSLIB = 1/*@YES*/ THEN GOTO
             14125                  NONE_FOUND;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:67   

  14125  6 000111   000130 236000 xsym               LDQ     VX_O+88
         6 000112   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000113   000117 601000 6                  TNZ     s:14128
         6 000114   000006 235000 xsym               LDA     VX_O+6
         6 000115   000001 115007                    CMPA    1,DL
         6 000116   001360 600000 6                  TZE     NONE_FOUND

      234    14126        /**/
      235    14127        /* For searching data defs, incorporate the following into previous do loop */
      236    14128    2         IF VX_CURR$ -> VX$NODE.L_START.ER$ ~= ADDR(NIL) THEN DO;

  14128  6 000117   000000 470400 xsym               LDP0    VX_CURR$
         6 000120   000035 236100                    LDQ     29,,PR0
         6 000121   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000122   000172 600000 6                  TZE     s:14149

      237    14129    2             CAND_P$ = VX_CURR$ -> VX$NODE.L_START.ER$;

  14129  6 000123   200034 756100                    STQ     CAND_P$,,AUTO

      238    14130    2             CAND_Q$ = VX_CURR$ -> VX$NODE.L_STOP.ER$;

  14130  6 000124   000047 236100                    LDQ     39,,PR0
         6 000125   200035 756100                    STQ     CAND_Q$,,AUTO

      239    14131    3             DO WHILE( CAND_P$ <= CAND_Q$ );

  14131  6 000126   200034 116100                    CMPQ    CAND_P$,,AUTO
         6 000127   000147 602000 6                  TNC     s:14139

      240    14132    3                 IF CAND_P$ -> VXR$TMPLT.SREF THEN

  14132  6 000130   200034 470500                    LDP0    CAND_P$,,AUTO
         6 000131   000000 236100                    LDQ     0,,PR0
         6 000132   400000 316007                    CANQ    -131072,DL
         6 000133   000137 600000 6                  TZE     s:14135
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:68   

      241    14133    3                     CAND_P$ -> VXR$TMPLT.STATE = '1'B/*@TRUE_B*/;

  14133  6 000134   100000 236007                    LDQ     32768,DL
         6 000135   000000 256100                    ORSQ    0,,PR0
         6 000136   000141 710000 6                  TRA     s:14136

      242    14134    3                 ELSE
      243    14135    3                     CAND_P$ -> VXR$TMPLT.STATE = '0'B/*@FALSE_B*/;

  14135  6 000137   000010 236000 7                  LDQ     8
         6 000140   000000 356100                    ANSQ    0,,PR0

      244    14136    3                 CAND_P$ = PINCRW( CAND_P$, SIZEW( VXR$TMPLT ) );

  14136  6 000141   200034 236100                    LDQ     CAND_P$,,AUTO
         6 000142   000001 036003                    ADLQ    1,DU
         6 000143   200034 756100                    STQ     CAND_P$,,AUTO

      245    14137    3                END;                       /* Do while( CAND_P$ <= CAND_Q$ ); */

  14137  6 000144   200035 116100                    CMPQ    CAND_Q$,,AUTO
         6 000145   000130 602000 6                  TNC     s:14132
         6 000146   000130 600000 6                  TZE     s:14132

      246    14138
      247    14139    2             CALL VXQ$SORT(

  14139  6 000147   000004 236000 7                  LDQ     4
         6 000150   200226 756100                    STQ     @LIBRARY_TYPE+28,,AUTO
         6 000151   000012 237000 7                  LDAQ    10
         6 000152   200224 757100                    STAQ    @LIBRARY_TYPE+26,,AUTO
         6 000153   000006 236000 7                  LDQ     6
         6 000154   200223 756100                    STQ     @LIBRARY_TYPE+25,,AUTO
         6 000155   000000 236000 xsym               LDQ     VX_CURR$
         6 000156   000047 036003                    ADLQ    39,DU
         6 000157   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:69   
         6 000160   000000 236000 xsym               LDQ     VX_CURR$
         6 000161   000035 036003                    ADLQ    29,DU
         6 000162   200221 756100                    STQ     @LIBRARY_TYPE+23,,AUTO
         6 000163   000000 236000 xsym               LDQ     VX_CURR$
         6 000164   000032 036003                    ADLQ    26,DU
         6 000165   200220 756100                    STQ     @LIBRARY_TYPE+22,,AUTO
         6 000166   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 000167   000025 631400 xsym               EPPR1   B_VECTNIL+21
         6 000170   000000 701000 xent               TSX1    VXQ$SORT
         6 000171   000000 011000                    NOP     0

      248    14140    2                     VX_CURR$ -> VX$NODE.L_START.RN$,
      249    14141    2                     VX_CURR$ -> VX$NODE.L_START.ER$,
      250    14142    2                     VX_CURR$ -> VX$NODE.L_STOP.ER$,
      251    14143    2                     SIZEW( VXR$TMPLT ),
      252    14144    2                     1/*@BY_NAME*/,
      253    14145    2                     0,
      254    14146    2                     0/*@NO_TIES*/ );
      255    14147    2            END;   /* If VX_CURR$ -> VX$NODE.L_START.ER$ ~= addr(nil) then do; */

      256    14148        /* End of incorporation */
      257    14149    1         REF_NAME$ = VX_CURR$ -> VX$NODE.L_START.RN$;

  14149  6 000172   000000 470400 xsym               LDP0    VX_CURR$
         6 000173   000032 236100                    LDQ     26,,PR0
         6 000174   200013 756100                    STQ     REF_NAME$,,AUTO

      258    14150    1   MAKE_TRANSITION:
      259    14151    1         FIRST_DEFAULT='1'B/*@TRUE_B*/;

  14151  6 000175   400000 236003       MAKE_TRANSI* LDQ     -131072,DU
         6 000176   200004 756100                    STQ     FIRST_DEFAULT,,AUTO

      260    14152    2         IF VX_O.FIDN$.UNSAT$ = ADDR(NIL) THEN DO;

  14152  6 000177   000130 236000 xsym               LDQ     VX_O+88
         6 000200   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:70   
         6 000201   000207 601000 6                  TNZ     s:14157

      261    14153    2             STATE = 1;

  14153  6 000202   000001 235007                    LDA     1,DL
         6 000203   200122 755100                    STA     STATE,,AUTO

      262    14154    2             FCURR$ = ADDR(NIL);

  14154  6 000204   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 000205   200014 756100                    STQ     FCURR$,,AUTO

      263    14155    2            END;

  14155  6 000206   000211 710000 6                  TRA     s:14161

      264    14156    2         ELSE DO;

      265    14157    2             STATE = 0;

  14157  6 000207   200122 450100                    STZ     STATE,,AUTO

      266    14158    2             FCURR$ = VX_O.FIDN$.UNSAT$;

  14158  6 000210   200014 756100                    STQ     FCURR$,,AUTO

      267    14159    2            END;

      268    14160        /* For searching data defs => change 3 to 2 */
      269    14161    2         DO I = 1 TO SIZEW( VX_REF_REC_A) - 3;

  14161  6 000211   000001 235007                    LDA     1,DL
         6 000212   200107 755100                    STA     I,,AUTO
         6 000213   001356 710000 6                  TRA     NONE_IN_LIST+3

      270    14162    2             REF_RTYPE = VX_REF_REC_A(I);

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:71   
  14162  6 000214   200107 720100                    LXL0    I,,AUTO
         6 000215   000000 235010 xsym               LDA     VX_REF_REC_A,X0
         6 000216   200117 755100                    STA     REF_RTYPE,,AUTO

      271    14163    2             DEF_RTYPE = VX_REF_MATCH_A( REF_RTYPE );

  14163  6 000217   000000 235005 xsym               LDA     VX_REF_MATCH_A,AL
         6 000220   200116 755100                    STA     DEF_RTYPE,,AUTO

      272    14164    2             REF$ = VX_CURR$    -> VX$NODE.L_START_A$(REF_RTYPE);

  14164  6 000221   000000 470400 xsym               LDP0    VX_CURR$
         6 000222   200117 721100                    LXL1    REF_RTYPE,,AUTO
         6 000223   000030 236111                    LDQ     24,X1,PR0
         6 000224   200011 756100                    STQ     REF$,,AUTO

      273    14165    3             IF REF$ ~= ADDR(NIL) THEN DO;

  14165  6 000225   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000226   001353 600000 6                  TZE     NONE_IN_LIST

      274    14166    3                 REF_STOP$ = VX_CURR$    -> VX$NODE.L_STOP_A$(REF_RTYPE);

  14166  6 000227   000042 236111                    LDQ     34,X1,PR0
         6 000230   200012 756100                    STQ     REF_STOP$,,AUTO

      275    14167    4                 DO WHILE ( REF$ <= REF_STOP$ );

  14167  6 000231   200011 116100                    CMPQ    REF$,,AUTO
         6 000232   000563 602000 6                  TNC     EXHAUST

      276    14168    4                     CURR$ = VX_CURR$;

  14168  6 000233   000000 236000 xsym               LDQ     VX_CURR$
         6 000234   200015 756100                    STQ     CURR$,,AUTO

      277    14169    4                     RN$ = PINCRW( REF_NAME$, REF$ -> VXR$TMPLT.NPOINTER);
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:72   

  14169  6 000235   200011 470500                    LDP0    REF$,,AUTO
         6 000236   000000 220100                    LDX0    0,,PR0
         6 000237   000000 636010                    EAQ     0,X0
         6 000240   200013 036100                    ADLQ    REF_NAME$,,AUTO
         6 000241   200024 756100                    STQ     RN$,,AUTO

      278    14170    4   SEARCH_NODE:
      279    14171    4                     BIN_START$ = CURR$ -> VX$NODE.L_START_A$(DEF_RTYPE);

  14171  6 000242   200015 470500       SEARCH_NODE  LDP0    CURR$,,AUTO
         6 000243   200116 720100                    LXL0    DEF_RTYPE,,AUTO
         6 000244   000030 236110                    LDQ     24,X0,PR0
         6 000245   200144 756100                    STQ     BIN_START$,,AUTO

      280    14172    4                     BIN_STOP$  = CURR$ -> VX$NODE.L_STOP_A$(DEF_RTYPE);

  14172  6 000246   000042 236110                    LDQ     34,X0,PR0
         6 000247   200145 756100                    STQ     BIN_STOP$,,AUTO

      281    14173    4                     BIN_N$     = CURR$ -> VX$NODE.L_START.DN$;

  14173  6 000250   000031 236100                    LDQ     25,,PR0
         6 000251   200147 756100                    STQ     BIN_N$,,AUTO

      282    14174                          %BIN_SEARCH(
      283    14175                          START$=BIN_START$,
      284    14176                          STOP$=BIN_STOP$,
      285    14177                          RESULT$=BIN_RESULT$,
      286    14178                          N$=BIN_N$,
      287    14179                          MATCH$=RN$,
      288    14180                          NAME_DISP=2,
      289    14181                          SIZE="SIZEW( VXD$TMPLT )",
      290    14182                          NEG=%@COMMENT,
      291    14183                          GEN=%@TNEMMOC,
      292    14184                          EMPTY=NOT_FOUND,
      293    14185                          ALTRETURN=NOT_FOUND);
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:73   
             14187    4           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND;

  14187  6 000252   200144 236100                    LDQ     BIN_START$,,AUTO
         6 000253   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000254   000550 600000 6                  TZE     NOT_FOUND

             14188    5           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW( VXD$TMPLT ) < 17 THEN DO;

  14188  6 000255   200144 235100                    LDA     BIN_START$,,AUTO
         6 000256   000022 771000                    ARL     18
         6 000257   200220 755100                    STA     @LIBRARY_TYPE+22,,AUTO
         6 000260   200145 236100                    LDQ     BIN_STOP$,,AUTO
         6 000261   000022 772000                    QRL     18
         6 000262   200220 136100                    SBLQ    @LIBRARY_TYPE+22,,AUTO
         6 000263   000002 506007                    DIV     2,DL
         6 000264   000021 116007                    CMPQ    17,DL
         6 000265   000321 605000 6                  TPL     s:14205

             14189    5              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  14189  6 000266   200144 236100                    LDQ     BIN_START$,,AUTO
         6 000267   200146 756100                    STQ     BIN_RESULT$,,AUTO

             14190    6              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  14190  6 000270   200145 116100                    CMPQ    BIN_STOP$,,AUTO
         6 000271   000273 600000 6                  TZE     s:14191
         6 000272   000320 603000 6                  TRC     s:14202

             14191    6                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  14191  6 000273   200146 470500                    LDP0    BIN_RESULT$,,AUTO
         6 000274   000001 220100                    LDX0    1,,PR0
         6 000275   000000 636010                    EAQ     0,X0
         6 000276   200147 036100                    ADLQ    BIN_N$,,AUTO
         6 000277   200142 756100                    STQ     BIN_NTEMP$,,AUTO

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:74   
             14192    6                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  14192  6 000300   200142 471500                    LDP1    BIN_NTEMP$,,AUTO
         6 000301   100000 221100                    LDX1    0,,PR1
         6 000302   200024 473500                    LDP3    RN$,,AUTO
         6 000303   300000 222100                    LDX2    0,,PR3
         6 000304   040140 106540                    CMPC    fill='040'O
         6 000305   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         6 000306   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         6 000307   000312 602000 6                  TNC     s:14200

             14193    6                   >=
             14194    7                   RN$ -> B$DNAME.TEXT THEN DO;

             14195    7                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  14195  6 000310   000376 600000 6                  TZE     BIN_FOUND

             14196    7                      =
             14197    7                      RN$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND;
             14198    7                    ELSE GOTO NOT_FOUND;

  14198  6 000311   000550 710000 6                  TRA     NOT_FOUND

             14199    7                    END;
             14200    6                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW( VXD$TMPLT ) );

  14200  6 000312   200146 236100                    LDQ     BIN_RESULT$,,AUTO
         6 000313   000002 036003                    ADLQ    2,DU
         6 000314   200146 756100                    STQ     BIN_RESULT$,,AUTO

             14201    6                 END;                      /* Do while                           */

  14201  6 000315   200145 116100                    CMPQ    BIN_STOP$,,AUTO
         6 000316   000273 602000 6                  TNC     s:14191
         6 000317   000273 600000 6                  TZE     s:14191

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:75   
             14202    5              GOTO NOT_FOUND;

  14202  6 000320   000550 710000 6                  TRA     NOT_FOUND

             14203    5              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             14204    5           ELSE DO;                        /* Binary search                      */

             14205    5              BIN_LOW = 0;

  14205  6 000321   200137 450100                    STZ     BIN_LOW,,AUTO

             14206    5              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW( VXD$TMPLT ) + 2;

  14206  6 000322   200144 235100                    LDA     BIN_START$,,AUTO
         6 000323   000022 771000                    ARL     18
         6 000324   200220 755100                    STA     @LIBRARY_TYPE+22,,AUTO
         6 000325   200145 236100                    LDQ     BIN_STOP$,,AUTO
         6 000326   000022 772000                    QRL     18
         6 000327   200220 136100                    SBLQ    @LIBRARY_TYPE+22,,AUTO
         6 000330   000002 506007                    DIV     2,DL
         6 000331   000002 036007                    ADLQ    2,DL
         6 000332   200140 756100                    STQ     BIN_HIGH,,AUTO

             14207    5              BIN_START1$ = PINCRW( BIN_START$, -SIZEW( VXD$TMPLT ) );

  14207  6 000333   200144 236100                    LDQ     BIN_START$,,AUTO
         6 000334   777776 036003                    ADLQ    -2,DU
         6 000335   200143 756100                    STQ     BIN_START1$,,AUTO

  14207  6 000336                       BIN_SPLIT    null
             14208    5   BIN_SPLIT:     ;
             14209    5              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  14209  6 000336   200137 236100                    LDQ     BIN_LOW,,AUTO
         6 000337   200140 036100                    ADLQ    BIN_HIGH,,AUTO
         6 000340   000001 772000                    QRL     1
         6 000341   200141 756100                    STQ     BIN_MID,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:76   

             14210    5              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW( VXD$TMPLT ) );

  14210  6 000342   000023 736000                    QLS     19
         6 000343   200143 036100                    ADLQ    BIN_START1$,,AUTO
         6 000344   200146 756100                    STQ     BIN_RESULT$,,AUTO

             14211    5              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  14211  6 000345   200146 470500                    LDP0    BIN_RESULT$,,AUTO
         6 000346   000001 220100                    LDX0    1,,PR0
         6 000347   000000 636010                    EAQ     0,X0
         6 000350   200147 036100                    ADLQ    BIN_N$,,AUTO
         6 000351   200142 756100                    STQ     BIN_NTEMP$,,AUTO

             14212    5              IF BIN_NTEMP$ -> B$DNAME.TEXT

  14212  6 000352   200142 471500                    LDP1    BIN_NTEMP$,,AUTO
         6 000353   100000 221100                    LDX1    0,,PR1
         6 000354   200024 473500                    LDP3    RN$,,AUTO
         6 000355   300000 222100                    LDX2    0,,PR3
         6 000356   040140 106540                    CMPC    fill='040'O
         6 000357   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         6 000360   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         6 000361   000365 603000 6                  TRC     s:14218

             14213    5                <
             14214    6                RN$ -> B$DNAME.TEXT THEN DO;

             14215    6                 BIN_LOW = BIN_MID;

  14215  6 000362   200141 235100                    LDA     BIN_MID,,AUTO
         6 000363   200137 755100                    STA     BIN_LOW,,AUTO

             14216    6                 GOTO BIN_CHECK;

  14216  6 000364   000371 710000 6                  TRA     BIN_CHECK
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:77   

             14217    6                 END;
             14218    5              IF BIN_NTEMP$ -> B$DNAME.TEXT

  14218  6 000365   000376 602000 6                  TNC     BIN_FOUND
         6 000366   000376 600000 6                  TZE     BIN_FOUND

             14219    5                >
             14220    6                RN$ -> B$DNAME.TEXT THEN DO;

             14221    6                 BIN_HIGH = BIN_MID;

  14221  6 000367   200141 235100                    LDA     BIN_MID,,AUTO
         6 000370   200140 755100                    STA     BIN_HIGH,,AUTO

  14221  6 000371                       BIN_CHECK    null
             14222    6   BIN_CHECK:        ;
             14223    6                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT;

  14223  6 000371   200137 236100                    LDQ     BIN_LOW,,AUTO
         6 000372   000001 036007                    ADLQ    1,DL
         6 000373   200140 116100                    CMPQ    BIN_HIGH,,AUTO
         6 000374   000336 602000 6                  TNC     BIN_SPLIT

             14224                                                /* Here => looping or not found       */
             14225                                      /* Result -> < match => a boundary condition    */
             14226    6                 %@COMMENT
             14227    6                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             14228    6                   <
             14229    6                   RN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             14229                            VXD$TMPLT ) );
             14230    6                 %@TNEMMOC
             14231    6                   GOTO NOT_FOUND;

  14231  6 000375   000550 710000 6                  TRA     NOT_FOUND

             14232    6                 END;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:78   
             14233    5              END;                         /* Else do;                           */
             14234    4   BIN_FOUND:
             14235        /* Here -> found */
      294    14237        %PLIST;
      295    14238        /*Here=> found */
      296    14239    4                     IF DEF_RTYPE ~= %TYPEDEF  AND  BIN_RESULT$->VXD$TMPLT.CONSTNT

  14239  6 000376   200116 235100       BIN_FOUND    LDA     DEF_RTYPE,,AUTO
         6 000377   000004 115007                    CMPA    4,DL
         6 000400   000411 600000 6                  TZE     s:14243
         6 000401   000001 236100                    LDQ     1,,PR0
         6 000402   400000 316007                    CANQ    -131072,DL
         6 000403   000411 600000 6                  TZE     s:14243

      297    14240    4                     THEN
      298    14241    4                         SOURCE = BIN_RESULT$->VXD$TMPLT.LFLAGS.SOURCE;

  14241  6 000404   000001 236100                    LDQ     1,,PR0
         6 000405   000013 772000                    QRL     11
         6 000406   000017 376007                    ANQ     15,DL
         6 000407   200123 756100                    STQ     SOURCE,,AUTO
         6 000410   000414 710000 6                  TRA     s:14244

      299    14242    4                     ELSE
      300    14243    4                         SOURCE = BIN_RESULT$->VXD$TMPLT.AD.LFLAGS.SOURCE;

  14243  6 000411   000000 236100                    LDQ     0,,PR0
         6 000412   000041 772000                    QRL     33
         6 000413   200123 756100                    STQ     SOURCE,,AUTO

      301    14244    5                     IF SOURCE ~= %SOURCE_REMOVED# THEN DO;

  14244  6 000414   000005 116007                    CMPQ    5,DL
         6 000415   000422 600000 6                  TZE     s:14249

      302    14245    5                         REF$ -> VXR$TMPLT.STATE = '1'B/*@TRUE_B*/;

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:79   
  14245  6 000416   200011 474500                    LDP4    REF$,,AUTO
         6 000417   100000 236007                    LDQ     32768,DL
         6 000420   400000 256100                    ORSQ    0,,PR4

      303    14246    5                         GOTO NEXT_REF;

  14246  6 000421   000555 710000 6                  TRA     NEXT_REF

      304    14247    5                        END;
      305    14248        /* Entdef removed, check above */
      306    14249    4                     P$ = PINCRW(BIN_RESULT$, -SIZEW(VXD$TMPLT));

  14249  6 000422   200146 236100                    LDQ     BIN_RESULT$,,AUTO
         6 000423   777776 036003                    ADLQ    -2,DU
         6 000424   200005 756100                    STQ     P$,,AUTO

      307    14250    5                     DO WHILE( P$ >= BIN_START$ );

  14250  6 000425   200144 116100                    CMPQ    BIN_START$,,AUTO
         6 000426   000474 602000 6                  TNC     TRY_BELOW

      308    14251    5                         IF PINCRW(BIN_N$,P$->VXD$TMPLT.NPOINTER)->B$DNAME.TEXT

  14251  6 000427   200005 470500                    LDP0    P$,,AUTO
         6 000430   000001 220100                    LDX0    1,,PR0
         6 000431   200147 471500                    LDP1    BIN_N$,,AUTO
         6 000432   100000 221110                    LDX1    0,X0,PR1
         6 000433   200024 473500                    LDP3    RN$,,AUTO
         6 000434   300000 222100                    LDX2    0,,PR3
         6 000435   000000 635010                    EAA     0,X0
         6 000436   000020 731000                    ARS     16
         6 000437   040140 106545                    CMPC    fill='040'O
         6 000440   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         6 000441   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         6 000442   000474 601000 6                  TNZ     TRY_BELOW

      309    14252    5                                 ~= RN$->B$DNAME.TEXT
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:80   
      310    14253    5                         THEN GOTO TRY_BELOW;
      311    14254    5                         IF DEF_RTYPE ~= %TYPEDEF  AND  P$->VXD$TMPLT.CONSTNT

  14254  6 000443   200116 236100                    LDQ     DEF_RTYPE,,AUTO
         6 000444   000004 116007                    CMPQ    4,DL
         6 000445   000456 600000 6                  TZE     s:14258
         6 000446   000001 236100                    LDQ     1,,PR0
         6 000447   400000 316007                    CANQ    -131072,DL
         6 000450   000456 600000 6                  TZE     s:14258

      312    14255    5                         THEN
      313    14256    5                             SOURCE = P$->VXD$TMPLT.LFLAGS.SOURCE;

  14256  6 000451   000001 236100                    LDQ     1,,PR0
         6 000452   000013 772000                    QRL     11
         6 000453   000017 376007                    ANQ     15,DL
         6 000454   200123 756100                    STQ     SOURCE,,AUTO
         6 000455   000461 710000 6                  TRA     s:14259

      314    14257    5                         ELSE
      315    14258    5                             SOURCE = P$->VXD$TMPLT.AD.LFLAGS.SOURCE;

  14258  6 000456   000000 236100                    LDQ     0,,PR0
         6 000457   000041 772000                    QRL     33
         6 000460   200123 756100                    STQ     SOURCE,,AUTO

      316    14259    6                         IF SOURCE ~= %SOURCE_REMOVED# THEN DO;

  14259  6 000461   000005 116007                    CMPQ    5,DL
         6 000462   000467 600000 6                  TZE     s:14263

      317    14260    6                             REF$ -> VXR$TMPLT.STATE = '1'B/*@TRUE_B*/;

  14260  6 000463   200011 474500                    LDP4    REF$,,AUTO
         6 000464   100000 236007                    LDQ     32768,DL
         6 000465   400000 256100                    ORSQ    0,,PR4

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:81   
      318    14261    6                             GOTO NEXT_REF;

  14261  6 000466   000555 710000 6                  TRA     NEXT_REF

      319    14262    6                            END;
      320    14263    5                         P$ = PINCRW(P$, -SIZEW(VXD$TMPLT));

  14263  6 000467   200005 236100                    LDQ     P$,,AUTO
         6 000470   777776 036003                    ADLQ    -2,DU
         6 000471   200005 756100                    STQ     P$,,AUTO

      321    14264    5                        END;

  14264  6 000472   200144 116100                    CMPQ    BIN_START$,,AUTO
         6 000473   000427 603000 6                  TRC     s:14251

      322    14265    4   TRY_BELOW:        P$ = PINCRW(BIN_RESULT$, SIZEW(VXD$TMPLT));

  14265  6 000474   200146 236100       TRY_BELOW    LDQ     BIN_RESULT$,,AUTO
         6 000475   000002 036003                    ADLQ    2,DU
         6 000476   200005 756100                    STQ     P$,,AUTO

      323    14266    5                     DO WHILE( P$ <= BIN_STOP$ );

  14266  6 000477   200145 116100                    CMPQ    BIN_STOP$,,AUTO
         6 000500   000502 600000 6                  TZE     s:14267
         6 000501   000550 603000 6                  TRC     NOT_FOUND

      324    14267    5                         IF PINCRW(BIN_N$,P$->VXD$TMPLT.NPOINTER)->B$DNAME.TEXT

  14267  6 000502   200005 470500                    LDP0    P$,,AUTO
         6 000503   000001 220100                    LDX0    1,,PR0
         6 000504   200147 471500                    LDP1    BIN_N$,,AUTO
         6 000505   100000 221110                    LDX1    0,X0,PR1
         6 000506   200024 473500                    LDP3    RN$,,AUTO
         6 000507   300000 222100                    LDX2    0,,PR3
         6 000510   000000 635010                    EAA     0,X0
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:82   
         6 000511   000020 731000                    ARS     16
         6 000512   040140 106545                    CMPC    fill='040'O
         6 000513   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         6 000514   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         6 000515   000550 601000 6                  TNZ     NOT_FOUND

      325    14268    5                                 ~= RN$->B$DNAME.TEXT
      326    14269    5                         THEN GOTO NOT_FOUND;
      327    14270    5                         IF DEF_RTYPE ~= %TYPEDEF  AND  P$->VXD$TMPLT.CONSTNT

  14270  6 000516   200116 236100                    LDQ     DEF_RTYPE,,AUTO
         6 000517   000004 116007                    CMPQ    4,DL
         6 000520   000531 600000 6                  TZE     s:14274
         6 000521   000001 236100                    LDQ     1,,PR0
         6 000522   400000 316007                    CANQ    -131072,DL
         6 000523   000531 600000 6                  TZE     s:14274

      328    14271    5                         THEN
      329    14272    5                             SOURCE = P$->VXD$TMPLT.LFLAGS.SOURCE;

  14272  6 000524   000001 236100                    LDQ     1,,PR0
         6 000525   000013 772000                    QRL     11
         6 000526   000017 376007                    ANQ     15,DL
         6 000527   200123 756100                    STQ     SOURCE,,AUTO
         6 000530   000534 710000 6                  TRA     s:14275

      330    14273    5                         ELSE
      331    14274    5                             SOURCE = P$->VXD$TMPLT.AD.LFLAGS.SOURCE;

  14274  6 000531   000000 236100                    LDQ     0,,PR0
         6 000532   000041 772000                    QRL     33
         6 000533   200123 756100                    STQ     SOURCE,,AUTO

      332    14275    6                         IF SOURCE ~= %SOURCE_REMOVED# THEN DO;

  14275  6 000534   000005 116007                    CMPQ    5,DL
         6 000535   000542 600000 6                  TZE     s:14279
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:83   

      333    14276    6                             REF$ -> VXR$TMPLT.STATE = '1'B/*@TRUE_B*/;

  14276  6 000536   200011 474500                    LDP4    REF$,,AUTO
         6 000537   100000 236007                    LDQ     32768,DL
         6 000540   400000 256100                    ORSQ    0,,PR4

      334    14277    6                             GOTO NEXT_REF;

  14277  6 000541   000555 710000 6                  TRA     NEXT_REF

      335    14278    6                            END;
      336    14279    5                         P$ = PINCRW(P$, SIZEW(VXD$TMPLT));

  14279  6 000542   200005 236100                    LDQ     P$,,AUTO
         6 000543   000002 036003                    ADLQ    2,DU
         6 000544   200005 756100                    STQ     P$,,AUTO

      337    14280    5                        END;

  14280  6 000545   200145 116100                    CMPQ    BIN_STOP$,,AUTO
         6 000546   000502 602000 6                  TNC     s:14267
         6 000547   000502 600000 6                  TZE     s:14267

      338    14281    4   NOT_FOUND:
      339    14282        /*Here=> not found  for current node */
      340    14283    4                     CURR$ = CURR$ -> VX$NODE.FATHER$;

  14283  6 000550   200015 470500       NOT_FOUND    LDP0    CURR$,,AUTO
         6 000551   000002 236100                    LDQ     2,,PR0
         6 000552   200015 756100                    STQ     CURR$,,AUTO

      341    14284    4                     IF CURR$ ~= ADDR(NIL) THEN GOTO SEARCH_NODE;

  14284  6 000553   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000554   000242 601000 6                  TNZ     SEARCH_NODE

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:84   
      342    14285        /**/
      343    14286        /**/
      344    14287        /**/
      345    14288        /* Here => not found for entire path from VX_CURR$ <-> VX_ROOT$ */
      346    14289    4   NEXT_REF:
      347    14290    4                     REF$ = PINCRW( REF$, SIZEW( VXR$TMPLT ) );

  14290  6 000555   200011 236100       NEXT_REF     LDQ     REF$,,AUTO
         6 000556   000001 036003                    ADLQ    1,DU
         6 000557   200011 756100                    STQ     REF$,,AUTO

      348    14291    4                    END;                   /* While */

  14291  6 000560   200012 116100                    CMPQ    REF_STOP$,,AUTO
         6 000561   000233 602000 6                  TNC     s:14168
         6 000562   000233 600000 6                  TZE     s:14168

      349    14292        /**/
      350    14293        /**/
      351    14294        /**/
      352    14295        /**/
      353    14296    3   EXHAUST:
      354    14297    3                 NEXT$ = VX_CURR$ -> VX$NODE.L_START_A$(REF_RTYPE);

  14297  6 000563   000000 470400 xsym  EXHAUST      LDP0    VX_CURR$
         6 000564   200117 720100                    LXL0    REF_RTYPE,,AUTO
         6 000565   000030 236110                    LDQ     24,X0,PR0
         6 000566   200033 756100                    STQ     NEXT$,,AUTO

      355    14298    3                 REF$ = NEXT$;

  14298  6 000567   200011 756100                    STQ     REF$,,AUTO

      356    14299    4                 DO WHILE( REF$ <= REF_STOP$ );

  14299  6 000570   200012 116100                    CMPQ    REF_STOP$,,AUTO
         6 000571   000573 600000 6                  TZE     s:14300
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:85   
         6 000572   000616 603000 6                  TRC     s:14308

      357    14300    5                     IF NOT REF$ -> VXR$TMPLT.STATE THEN DO;

  14300  6 000573   200011 470500                    LDP0    REF$,,AUTO
         6 000574   000000 236100                    LDQ     0,,PR0
         6 000575   100000 316007                    CANQ    32768,DL
         6 000576   000610 601000 6                  TNZ     s:14306

      358    14301    6                         IF NEXT$ ~= REF$ THEN DO;

  14301  6 000577   200033 236100                    LDQ     NEXT$,,AUTO
         6 000600   200011 116100                    CMPQ    REF$,,AUTO
         6 000601   000605 600000 6                  TZE     s:14304

      359    14302    6                             NEXT$ -> VXR$TMPLT = REF$ -> VXR$TMPLT;

  14302  6 000602   000000 236100                    LDQ     0,,PR0
         6 000603   200033 471500                    LDP1    NEXT$,,AUTO
         6 000604   100000 756100                    STQ     0,,PR1

      360    14303    6                            END;           /* If NEXT$ ~= REF$ then do; */

      361    14304    5                         NEXT$ = PINCRW( NEXT$, SIZEW( VXR$TMPLT ) );

  14304  6 000605   200033 236100                    LDQ     NEXT$,,AUTO
         6 000606   000001 036003                    ADLQ    1,DU
         6 000607   200033 756100                    STQ     NEXT$,,AUTO

      362    14305    5                        END;           /* If ~ REF$ -> VXR$TMPLT.STATE then do; */

      363    14306    4                     REF$ = PINCRW( REF$, SIZEW( VXR$TMPLT ) );

  14306  6 000610   200011 236100                    LDQ     REF$,,AUTO
         6 000611   000001 036003                    ADLQ    1,DU
         6 000612   200011 756100                    STQ     REF$,,AUTO

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:86   
      364    14307    4                    END;                   /* Do while( REF$ <= REF_STOP$ ); */

  14307  6 000613   200012 116100                    CMPQ    REF_STOP$,,AUTO
         6 000614   000573 602000 6                  TNC     s:14300
         6 000615   000573 600000 6                  TZE     s:14300

      365    14308    3                 IF NEXT$ = VX_CURR$ -> VX$NODE.L_START_A$(REF_RTYPE) THEN GOTO
             14308                          NONE_IN_LIST;

  14308  6 000616   000000 470400 xsym               LDP0    VX_CURR$
         6 000617   200117 720100                    LXL0    REF_RTYPE,,AUTO
         6 000620   200033 236100                    LDQ     NEXT$,,AUTO
         6 000621   000030 116110                    CMPQ    24,X0,PR0
         6 000622   001353 600000 6                  TZE     NONE_IN_LIST

      366    14309    3                SIZE_AVAIL = POFFW( VX_CURR$ -> VX$NODE.L_STOP_A$( REF_RTYPE), NEXT$ )

  14309  6 000623   200033 235100                    LDA     NEXT$,,AUTO
         6 000624   000022 771000                    ARL     18
         6 000625   200220 755100                    STA     @LIBRARY_TYPE+22,,AUTO
         6 000626   000042 236110                    LDQ     34,X0,PR0
         6 000627   000022 772000                    QRL     18
         6 000630   200220 136100                    SBLQ    @LIBRARY_TYPE+22,,AUTO
         6 000631   000001 036007                    ADLQ    1,DL
         6 000632   200136 756100                    STQ     SIZE_AVAIL,,AUTO

      367    14310    3                         +
      368    14311    3                         SIZEW( VXR$TMPLT );
      369    14312    3                 IF SIZE_AVAIL > 0 THEN CALL VXF$FREE(

  14312  6 000633   000646 604400 6                  TMOZ    s:14316

  14312  6 000634   000006 236000 7                  LDQ     6
         6 000635   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 000636   200136 631500                    EPPR1   SIZE_AVAIL,,AUTO
         6 000637   200221 451500                    STP1    @LIBRARY_TYPE+23,,AUTO
         6 000640   000000 633410 xsym               EPPR3   VX_PASS1_ALL_TYPE,X0
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:87   
         6 000641   200220 453500                    STP3    @LIBRARY_TYPE+22,,AUTO
         6 000642   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 000643   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 000644   000000 701000 xent               TSX1    VXF$FREE
         6 000645   000000 011000                    NOP     0

      370    14313    3                             VX_PASS1_ALL_TYPE( REF_RTYPE ),
      371    14314    3                             SIZE_AVAIL,
      372    14315    3                             1 );
      373    14316    3                 VX_CURR$ -> VX$NODE.L_STOP_A$(REF_RTYPE) = PINCRW( NEXT$, -SIZEW(
             14316                          VXR$TMPLT) );

  14316  6 000646   200033 236100                    LDQ     NEXT$,,AUTO
         6 000647   777777 036003                    ADLQ    -1,DU
         6 000650   000000 470400 xsym               LDP0    VX_CURR$
         6 000651   200117 720100                    LXL0    REF_RTYPE,,AUTO
         6 000652   000042 756110                    STQ     34,X0,PR0

      374    14317    3                 VX_CURR$->VX$NODE.L_SIZE_A(REF_RTYPE)

  14317  6 000653   000000 470400 xsym               LDP0    VX_CURR$
         6 000654   000054 236110                    LDQ     44,X0,PR0
         6 000655   200136 136100                    SBLQ    SIZE_AVAIL,,AUTO
         6 000656   000054 756110                    STQ     44,X0,PR0

      375    14318    3                         = VX_CURR$->VX$NODE.L_SIZE_A(REF_RTYPE) - SIZE_AVAIL;
      376    14319        %EJECT;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:88   
      377    14320    3   CHECK_FCURR:
      378    14321        /* Open library file */
      379    14322    4                 DO CASE( STATE );

  14322  6 000657   200122 235100       CHECK_FCURR  LDA     STATE,,AUTO
         6 000660   000002 115007                    CMPA    2,DL
         6 000661   000663 602005 6                  TNC     CHECK_FCURR+4,AL
         6 000662   001047 710000 6                  TRA     s:14370
         6 000663   000665 710000 6                  TRA     s:14324
         6 000664   000707 710000 6                  TRA     DO_DEFAULT

      380    14323    4                   CASE(0);

      381    14324    5                     IF FCURR$ = ADDR(NIL) THEN DO;

  14324  6 000665   200014 236100                    LDQ     FCURR$,,AUTO
         6 000666   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000667   000676 601000 6                  TNZ     s:14329

      382    14325    5                         IF VX_O.SIN.NOSYSLIB = 1/*@YES*/ THEN GOTO NONE_IN_LIST;

  14325  6 000670   000006 235000 xsym               LDA     VX_O+6
         6 000671   000001 115007                    CMPA    1,DL
         6 000672   001353 600000 6                  TZE     NONE_IN_LIST

      383    14326    5                         STATE = 1;

  14326  6 000673   000001 235007                    LDA     1,DL
         6 000674   200122 755100                    STA     STATE,,AUTO

      384    14327    5                         GOTO DO_DEFAULT;

  14327  6 000675   000707 710000 6                  TRA     DO_DEFAULT

      385    14328    5                        END;
      386    14329    4                     CALL VXF$OPEN( FCURR$, 2/*@LF*/ )  ALTRET( CHECK_FCURR );

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:89   
  14329  6 000676   000007 236000 7                  LDQ     7
         6 000677   200221 756100                    STQ     @LIBRARY_TYPE+23,,AUTO
         6 000700   200014 630500                    EPPR0   FCURR$,,AUTO
         6 000701   200220 450500                    STP0    @LIBRARY_TYPE+22,,AUTO
         6 000702   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 000703   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 000704   000000 701000 xent               TSX1    VXF$OPEN
         6 000705   000657 702000 6                  TSX2    CHECK_FCURR
         6 000706   001047 710000 6                  TRA     s:14370

      387    14330    4                   CASE( 1 );

      388    14331        /* Default library search */
      389    14332    4   DO_DEFAULT:
      390    14333    5                     IF FIRST_DEFAULT THEN DO;

  14333  6 000707   200004 234100       DO_DEFAULT   SZN     FIRST_DEFAULT,,AUTO
         6 000710   000724 605000 6                  TPL     s:14340

      391    14334    5                         FIRST_DEFAULT = '0'B/*@FALSE_B*/;

  14334  6 000711   200004 450100                    STZ     FIRST_DEFAULT,,AUTO

      392    14335    5                         CALL M$OPEN ( FPT_OPEN_LAST ) ;

  14335  6 000712   000072 630400 4                  EPPR0   FPT_OPEN_LAST
         6 000713   050000 713400                    CLIMB   open
         6 000714   410400 401760                    pmme    nvectors=18

      393    14336    5                         OPEN_LAST_NAME = M$OF$->F$DCB.NAME# ;

  14336  6 000715   000000 470400 xsym               LDP0    M$OF$
         6 000716   000100 100500                    MLR     fill='000'O
         6 000717   000010 000040                    ADSC9   8,,PR0                   cn=0,n=32
         6 000720   200157 000040                    ADSC9   OPEN_LAST_NAME,,AUTO     cn=0,n=32

      394    14337    5                         CALL M$OPEN ( FPT_OPEN_FIRST ) ;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:90   

  14337  6 000721   000000 630400 4                  EPPR0   FPT_OPEN_FIRST
         6 000722   050000 713400                    CLIMB   open
         6 000723   410400 401760                    pmme    nvectors=18

      395    14338    5                        END;

      396    14339                                                /**/
      397    14340    4                     IF M$OF$->F$DCB.NAME# = OPEN_LAST_NAME THEN

  14340  6 000724   000000 470400 xsym               LDP0    M$OF$
         6 000725   000100 106500                    CMPC    fill='000'O
         6 000726   000010 000040                    ADSC9   8,,PR0                   cn=0,n=32
         6 000727   200157 000040                    ADSC9   OPEN_LAST_NAME,,AUTO     cn=0,n=32
         6 000730   001353 600000 6                  TZE     NONE_IN_LIST

      398    14341    4                         GOTO NONE_IN_LIST ;
      399    14342    4                     CALL M$OPEN ( FPT_OPEN_NEXT )

  14342  6 000731   000164 630400 4                  EPPR0   FPT_OPEN_NEXT
         6 000732   450000 713400                    CLIMB   alt,open
         6 000733   410400 401760                    pmme    nvectors=18
         6 000734   000736 702000 6                  TSX2    s:14345
         6 000735   000754 710000 6                  TRA     s:14352

      400    14343    4                     WHENALTRETURN
      401    14344    5                     DO;

      402    14345    5                         CODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE;

  14345  6 000736   000000 470400 xsym               LDP0    B$TCB$
         6 000737   000000 471500                    LDP1    0,,PR0
         6 000740   100102 236100                    LDQ     66,,PR1
         6 000741   000003 772000                    QRL     3
         6 000742   037777 376007                    ANQ     16383,DL
         6 000743   200106 756100                    STQ     CODE,,AUTO

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:91   
      403    14346    5                         IF CODE = %E$FDEOF THEN GOTO NONE_IN_LIST;

  14346  6 000744   000154 116007                    CMPQ    108,DL
         6 000745   001353 600000 6                  TZE     NONE_IN_LIST

      404    14347    5                         IF  SUBSTR ( M$OF$->F$DCB.NAME#.C, 0, 5 ) =

  14347  6 000746   000000 473400 xsym               LDP3    M$OF$
         6 000747   040000 106500                    CMPC    fill='040'O
         6 000750   300010 200005                    ADSC9   8,,PR3                   cn=1,n=5
         6 000751   000256 200005 4                  ADSC9   FPT_OPEN_FIRST_NAME      cn=1,n=5
         6 000752   000707 600000 6                  TZE     DO_DEFAULT

      405    14348    5                                 FPT_OPEN_FIRST_NAME.NAME# THEN
      406    14349    5                             GOTO DO_DEFAULT ;
      407    14350    5                         GOTO NONE_IN_LIST ;

  14350  6 000753   001353 710000 6                  TRA     NONE_IN_LIST

      408    14351    5                        END;
      409    14352    4                     IF SUBSTR( M$OF$ -> F$DCB.NAME#.C, 0, 5 )

  14352  6 000754   000000 470400 xsym               LDP0    M$OF$
         6 000755   040000 106500                    CMPC    fill='040'O
         6 000756   000010 200005                    ADSC9   8,,PR0                   cn=1,n=5
         6 000757   000256 200005 4                  ADSC9   FPT_OPEN_FIRST_NAME      cn=1,n=5
         6 000760   000765 600000 6                  TZE     s:14357

      410    14353    5                             ~= FPT_OPEN_FIRST_NAME.NAME# THEN DO;

      411    14354    5                         CALL M$CLOSE( FPT_CLOSE_NEXT );

  14354  6 000761   000264 630400 4                  EPPR0   FPT_CLOSE_NEXT
         6 000762   050001 713400                    CLIMB   close
         6 000763   406000 401760                    pmme    nvectors=13

      412    14355    5                         GOTO NONE_IN_LIST;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:92   

  14355  6 000764   001353 710000 6                  TRA     NONE_IN_LIST

      413    14356    5                        END;
      414    14357    4                    K = (M$OF$ -> F$DCB.NAME#.L + 4/*@CHAR_WORD*/ ) / 4/*@CHAR_WORD*/;

  14357  6 000765   000010 236100                    LDQ     8,,PR0
         6 000766   000033 772000                    QRL     27
         6 000767   000004 036007                    ADLQ    4,DL
         6 000770   000002 772000                    QRL     2
         6 000771   200111 756100                    STQ     K,,AUTO

      415    14358                          %ALLOCATE( PTR$=Q$, TYPE=@GDP, SIZE=K );

  14359  6 000772   000010 236000 xsym               LDQ     VX_M_ALL+8
         6 000773   000010 136000 xsym               SBLQ    VX_M_FREE+8
         6 000774   001007 604000 6                  TMI     s:14363
         6 000775   200111 116100                    CMPQ    K,,AUTO
         6 000776   001007 602000 6                  TNC     s:14363

  14360  6 000777   000010 236000 xsym               LDQ     VX_M_FREE+8
         6 001000   000022 736000                    QLS     18
         6 001001   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         6 001002   200006 756100                    STQ     Q$,,AUTO

  14361  6 001003   000010 236000 xsym               LDQ     VX_M_FREE+8
         6 001004   200111 036100                    ADLQ    K,,AUTO
         6 001005   000010 756000 xsym               STQ     VX_M_FREE+8

  14362  6 001006   001021 710000 6                  TRA     s:14365

  14363  6 001007   200111 631500                    EPPR1   K,,AUTO
         6 001010   200222 451500                    STP1    @LIBRARY_TYPE+24,,AUTO
         6 001011   000011 236000 7                  LDQ     9
         6 001012   200221 756100                    STQ     @LIBRARY_TYPE+23,,AUTO
         6 001013   200006 633500                    EPPR3   Q$,,AUTO
         6 001014   200220 453500                    STP3    @LIBRARY_TYPE+22,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:93   
         6 001015   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 001016   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 001017   000000 701000 xent               TSX1    VXA$GET
         6 001020   000000 011000                    NOP     0

      416    14365    4                     Q$ -> T$C.COUNT = M$OF$ -> F$DCB.NAME#.L;

  14365  6 001021   000000 470400 xsym               LDP0    M$OF$
         6 001022   200006 471500                    LDP1    Q$,,AUTO
         6 001023   000010 236100                    LDQ     8,,PR0
         6 001024   100000 552140                    STBQ    0,'40'O,PR1

      417    14366    4                     Q$ -> T$C.CHARS = M$OF$ -> F$DCB.NAME#.C;

  14366  6 001025   200006 470500                    LDP0    Q$,,AUTO
         6 001026   000000 236100                    LDQ     0,,PR0
         6 001027   000033 772000                    QRL     27
         6 001030   000000 471400 xsym               LDP1    M$OF$
         6 001031   000000 620006                    EAX0    0,QL
         6 001032   040140 100500                    MLR     fill='040'O
         6 001033   100010 200037                    ADSC9   8,,PR1                   cn=1,n=31
         6 001034   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0

      418    14367    4                     DEFAULT_FILE.P.NAME_ = VECTOR( Q$ -> T$C );

  14367  6 001035   200006 470500                    LDP0    Q$,,AUTO
         6 001036   000000 236100                    LDQ     0,,PR0
         6 001037   000033 772000                    QRL     27
         6 001040   000001 620006                    EAX0    1,QL
         6 001041   000000 635010                    EAA     0,X0
         6 001042   000002 771000                    ARL     2
         6 001043   000140 135007                    SBLA    96,DL
         6 001044   200006 236100                    LDQ     Q$,,AUTO
         6 001045   000005 755000 2                  STA     DEFAULT_FILE+5
         6 001046   000006 756000 2                  STQ     DEFAULT_FILE+6

      419    14368    4                   END;                    /* Do case( state ); */
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:94   

      420    14369        /* Check compaction for ref names */
      421    14370    3                 IF VX_CURR$ -> VX$NODE.L_SIZE.RN > VX_RN_THRESHOLD THEN

  14370  6 001047   000000 470400 xsym               LDP0    VX_CURR$
         6 001050   000000 236000 xsym               LDQ     VX_RN_THRESHOLD
         6 001051   000056 116100                    CMPQ    46,,PR0
         6 001052   001056 603000 6                  TRC     s:14372

      422    14371    3                     CALL VXO$COMPACT;     /* Yes, compaction to be done */

  14371  6 001053   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 001054   000000 701000 xent               TSX1    VXO$COMPACT
         6 001055   000000 011000                    NOP     0

      423    14372    3                 REF$ = VX_CURR$ -> VX$NODE.L_START_A$( REF_RTYPE );

  14372  6 001056   000000 470400 xsym               LDP0    VX_CURR$
         6 001057   200117 720100                    LXL0    REF_RTYPE,,AUTO
         6 001060   000030 236110                    LDQ     24,X0,PR0
         6 001061   200011 756100                    STQ     REF$,,AUTO

      424    14373    3                 RSTOP$ = VX_CURR$ -> VX$NODE.L_STOP_A$( REF_RTYPE );

  14373  6 001062   000042 236110                    LDQ     34,X0,PR0
         6 001063   200021 756100                    STQ     RSTOP$,,AUTO

      425    14374    4                 DO WHILE ( REF$ <= RSTOP$ );

  14374  6 001064   200011 116100                    CMPQ    REF$,,AUTO
         6 001065   001323 602000 6                  TNC     s:14447

      426    14375        /* Build library search key */
      427    14376    4                     NAM$ = PINCRW( REF_NAME$, REF$ -> VXR$TMPLT.NPOINTER );

  14376  6 001066   200011 470500                    LDP0    REF$,,AUTO
         6 001067   000000 220100                    LDX0    0,,PR0
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:95   
         6 001070   000000 636010                    EAQ     0,X0
         6 001071   200013 036100                    ADLQ    REF_NAME$,,AUTO
         6 001072   200016 756100                    STQ     NAM$,,AUTO

      428    14377    4                     VX_O_KEY_BUF.FORM0.COUNT = NAM$ -> B$DNAME.COUNT;

  14377  6 001073   200016 471500                    LDP1    NAM$,,AUTO
         6 001074   100000 236100                    LDQ     0,,PR1
         6 001075   000011 736000                    QLS     9
         6 001076   000000 552040 xsym               STBQ    VX_O_KEY_BUF,'40'O

      429    14378    4                     VX_O_KEY_BUF.FORM0.CHARS = NAM$ -> B$DNAME.TEXT;

  14378  6 001077   100000 220100                    LDX0    0,,PR1
         6 001100   040000 100540                    MLR     fill='040'O
         6 001101   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0
         6 001102   000000 201000 xsym               ADSC9   VX_O_KEY_BUF             cn=1,n=512

      430    14379        /* Do the read */
      431    14380    4                     VX_LIBRARY_PROBE = '1'B/*@TRUE_B*/;

  14380  6 001103   400000 236003                    LDQ     -131072,DU
         6 001104   000000 756000 xsym               STQ     VX_LIBRARY_PROBE

      432    14381    4                     CALL VXI$READ( 2/*@LF*/, ADDR(VX_L_REC_BUF.CHARS),

  14381  6 001105   000014 236000 7                  LDQ     12
         6 001106   200220 756100                    STQ     @LIBRARY_TYPE+22,,AUTO
         6 001107   000016 237000 7                  LDAQ    14
         6 001110   200224 757100                    STAQ    @LIBRARY_TYPE+26,,AUTO
         6 001111   200220 633500                    EPPR3   @LIBRARY_TYPE+22,,AUTO
         6 001112   200223 453500                    STP3    @LIBRARY_TYPE+25,,AUTO
         6 001113   000007 236000 7                  LDQ     7
         6 001114   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 001115   200222 630500                    EPPR0   @LIBRARY_TYPE+24,,AUTO
         6 001116   000022 631400 xsym               EPPR1   B_VECTNIL+18
         6 001117   000000 701000 xent               TSX1    VXI$READ
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:96   
         6 001120   001301 702000 6                  TSX2    IO_ERROR

      433    14382    4                             SIZEW(VX_L_REC_BUF.CHARS),
      434    14383    4                             0/*@OF*/ ) ALTRET( IO_ERROR);
      435    14384    4                     VX_LIBRARY_PROBE = '0'B/*@FALSE_B*/;

  14384  6 001121   000000 450000 xsym               STZ     VX_LIBRARY_PROBE

      436    14385        /* Here => found it */
      437    14386    4                     CALL READ_FILE( '1'B, 0 ) ALTRET ( NEXT_CANDIDATE ) ;

  14386  6 001122   000004 236000 7                  LDQ     4
         6 001123   200172 756100                    STQ     SAVE_BUF+1,,AUTO
         6 001124   000020 236000 7                  LDQ     16
         6 001125   200171 756100                    STQ     OPEN_LAST_NAME+10,,AUTO
         6 001126   001431 701000 6                  TSX1    READ_FILE
         6 001127   001315 702000 6                  TSX2    NEXT_CANDIDATE

      438    14387    4                     VX_LIB_USED = '1'B;   /* Star # 21938 */

  14387  6 001130   400000 236003                    LDQ     -131072,DU
         6 001131   000000 756000 xsym               STQ     VX_LIB_USED

      439    14388    5                     IF FCURR$->VX$LST.P.ACCT_.ACCT$ ~= ADDR (NIL) THEN DO;

  14388  6 001132   200014 470500                    LDP0    FCURR$,,AUTO
         6 001133   000010 236100                    LDQ     8,,PR0
         6 001134   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001135   001145 600000 6                  TZE     s:14393

      440    14389    5                         LIB_ACCT = FCURR$->VX$LST.P.ACCT_.ACCT$->LIB_ACCT_B;

  14389  6 001136   000010 471500                    LDP1    8,,PR0
         6 001137   040100 100500                    MLR     fill='040'O
         6 001140   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         6 001141   200154 000010                    ADSC9   LIB_ACCT,,AUTO           cn=0,n=8

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:97   
      441    14390    5                         DOT_BLK = '.';

  14390  6 001142   056000 236003                    LDQ     23552,DU
         6 001143   200156 756100                    STQ     DOT_BLK,,AUTO

      442    14391    5                        END;

  14391  6 001144   001152 710000 6                  TRA     s:14396

      443    14392    5                     ELSE DO;

      444    14393    5                         LIB_ACCT = ' ';

  14393  6 001145   000035 235000 xsym               LDA     B_VECTNIL+29
         6 001146   000035 236000 xsym               LDQ     B_VECTNIL+29
         6 001147   200154 757100                    STAQ    LIB_ACCT,,AUTO

      445    14394    5                         DOT_BLK = ' ';

  14394  6 001150   040000 236003                    LDQ     16384,DU
         6 001151   200156 756100                    STQ     DOT_BLK,,AUTO

      446    14395    5                        END;

      447    14396    4                     CALL CONCAT(LLMU_BUF, FCURR$->VX$LST.P.NAME_.NAME$->T$C.CHARS,

  14396  6 001152   000006 471500                    LDP1    6,,PR0
         6 001153   100000 236100                    LDQ     0,,PR1
         6 001154   000033 772000                    QRL     27
         6 001155   200016 473500                    LDP3    NAM$,,AUTO
         6 001156   300000 220100                    LDX0    0,,PR3
         6 001157   000000 621006                    EAX1    0,QL
         6 001160   040000 100540                    MLR     fill='040'O
         6 001161   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
         6 001162   000230 000127 2                  ADSC9   LLMU_BUF                 cn=0,n=87
         6 001163   000127 116007                    CMPQ    87,DL
         6 001164   001217 603000 6                  TRC     s:14398
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:98   
         6 001165   777650 621006                    EAX1    -88,QL
         6 001166   777777 661003                    ERX1    -1,DU
         6 001167   040046 100500                    MLR     fill='040'O
         6 001170   200156 000001                    ADSC9   DOT_BLK,,AUTO            cn=0,n=1
         6 001171   000230 000011 2                  ADSC9   LLMU_BUF,Q               cn=0,n=*X1
         6 001172   000126 116007                    CMPQ    86,DL
         6 001173   001217 603000 6                  TRC     s:14398
         6 001174   777651 621006                    EAX1    -87,QL
         6 001175   777777 661003                    ERX1    -1,DU
         6 001176   040046 100500                    MLR     fill='040'O
         6 001177   200154 000010                    ADSC9   LIB_ACCT,,AUTO           cn=0,n=8
         6 001200   000230 200011 2                  ADSC9   LLMU_BUF,Q               cn=1,n=*X1
         6 001201   000116 116007                    CMPQ    78,DL
         6 001202   001217 603000 6                  TRC     s:14398
         6 001203   777661 621006                    EAX1    -79,QL
         6 001204   777777 661003                    ERX1    -1,DU
         6 001205   040046 100400                    MLR     fill='040'O
         6 001206   000021 000001 7                  ADSC9   17                       cn=0,n=1
         6 001207   000232 200011 2                  ADSC9   LLMU_BUF+2,Q             cn=1,n=*X1
         6 001210   000115 116007                    CMPQ    77,DL
         6 001211   001217 603000 6                  TRC     s:14398
         6 001212   777662 621006                    EAX1    -78,QL
         6 001213   777777 661003                    ERX1    -1,DU
         6 001214   040046 100540                    MLR     fill='040'O
         6 001215   300000 400010                    ADSC9   0,,PR3                   cn=2,n=*X0
         6 001216   000232 400011 2                  ADSC9   LLMU_BUF+2,Q             cn=2,n=*X1

      448    14397    4                             DOT_BLK,LIB_ACCT,';', NAM$->B$DNAME.TEXT);
      449    14398    5                     IF VX_ROOT$->VX$NODE.SON$ ~= ADDR(NIL) THEN DO;

  14398  6 001217   000000 471400 xsym               LDP1    VX_ROOT$
         6 001220   100000 236100                    LDQ     0,,PR1
         6 001221   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001222   001243 600000 6                  TZE     s:14404

      450    14399    5                         ND$ = PINCRC(ADDR(LLMU_BUF),80);

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:99   
  14399  6 001223   000022 236000 7                  LDQ     18
         6 001224   200153 756100                    STQ     ND$,,AUTO

      451    14400    5                         NODE.LP = '(';

  14400  6 001225   200153 474500                    LDP4    ND$,,AUTO
         6 001226   040100 100400                    MLR     fill='040'O
         6 001227   000023 000001 7                  ADSC9   19                       cn=0,n=1
         6 001230   400000 200001                    ADSC9   0,,PR4                   cn=1,n=1

      452    14401    5                         CALL BINCHAR(NODE.NUM,VX_CURR$->VX$NODE.NUM);

  14401  6 001231   000000 470400 xsym               LDP0    VX_CURR$
         6 001232   000010 235100                    LDA     8,,PR0
         6 001233   000044 773000                    LRL     36
         6 001234   200220 757100                    STAQ    @LIBRARY_TYPE+22,,AUTO
         6 001235   000100 301500                    BTD
         6 001236   200220 000010                    NDSC9   @LIBRARY_TYPE+22,,AUTO   cn=0,s=lsgnf,sf=0,n=8
         6 001237   400000 430004                    NDSC9   0,,PR4                   cn=2,s=nosgn,sf=0,n=4

      453    14402    5                         NODE.RP = ')';

  14402  6 001240   040100 100400                    MLR     fill='040'O
         6 001241   000024 000001 7                  ADSC9   20                       cn=0,n=1
         6 001242   400001 400001                    ADSC9   1,,PR4                   cn=2,n=1

      454    14403    5                        END;

      455    14404    4                     CALL CHECK_DUP;

  14404  6 001243   002500 701000 6                  TSX1    CHECK_DUP
         6 001244   000000 011000                    NOP     0

      456    14405    4                     CALL M$WRITE (WRITE_LLMU);

  14405  6 001245   000120 630400 2                  EPPR0   WRITE_LLMU
         6 001246   040001 713400                    CLIMB   write
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:100  
         6 001247   401400 401760                    pmme    nvectors=4

      457    14406    4                     IF  VX_SLIB_INIT$ ~= ADDR(NIL)  AND

  14406  6 001250   000000 236000 xsym               LDQ     VX_SLIB_INIT$
         6 001251   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001252   001263 600000 6                  TZE     s:14410
         6 001253   000000 235000 xsym               LDA     VX_TREE_SLIB_NAME
         6 001254   001263 601000 6                  TNZ     s:14410

      458    14407    4                             VX_TREE_SLIB_NAME = 0
      459    14408    4                     THEN              /* Library ou associated a shared library */
      460    14409    4                         CALL READ_FILE ( '0'B, 2/*@LF_SLIB*/ ) ;

  14409  6 001255   000007 236000 7                  LDQ     7
         6 001256   200172 756100                    STQ     SAVE_BUF+1,,AUTO
         6 001257   000004 236000 7                  LDQ     4
         6 001260   200171 756100                    STQ     OPEN_LAST_NAME+10,,AUTO
         6 001261   001431 701000 6                  TSX1    READ_FILE
         6 001262   000000 011000                    NOP     0

      461    14410    4                     IF  VX_OU_HEAD.ALIB.COUNT > 0   AND

  14410  6 001263   000025 236000 xsym               LDQ     VX_OU_HEAD+21
         6 001264   777000 316003                    CANQ    -512,DU
         6 001265   001300 600000 6                  TZE     s:14414
         6 001266   000025 236000 xsym               LDQ     VX_OU_HEAD+21
         6 001267   777000 376003                    ANQ     -512,DU
         6 001270   041000 116003                    CMPQ    16896,DU
         6 001271   001300 603000 6                  TRC     s:14414

      462    14411    4                             VX_OU_HEAD.ALIB.COUNT <= 32
      463    14412    4                     THEN      /*  Library ou associated an altshared library */
      464    14413    4                         CALL READ_FILE ( '0'B, 1/*@LF_ALIB*/ ) ;

  14413  6 001272   000006 236000 7                  LDQ     6
         6 001273   200172 756100                    STQ     SAVE_BUF+1,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:101  
         6 001274   000004 236000 7                  LDQ     4
         6 001275   200171 756100                    STQ     OPEN_LAST_NAME+10,,AUTO
         6 001276   001431 701000 6                  TSX1    READ_FILE
         6 001277   000000 011000                    NOP     0

      465    14414    4                     GOTO MAKE_TRANSITION;

  14414  6 001300   000175 710000 6                  TRA     MAKE_TRANSITION

      466    14415    4   IO_ERROR:
      467    14416    4                     VX_LIBRARY_PROBE = '0'B/*@FALSE_B*/;

  14416  6 001301   000000 450000 xsym  IO_ERROR     STZ     VX_LIBRARY_PROBE

      468    14417    5                     IF VX_IO_STATUS = 2/*@IO_LD*/ THEN DO;

  14417  6 001302   000000 235000 xsym               LDA     VX_IO_STATUS
         6 001303   000002 115007                    CMPA    2,DL
         6 001304   001315 601000 6                  TNZ     NEXT_CANDIDATE

      469    14418        /* Here -> lost data error */
      470    14419        /*E*  ERROR: VXO-E$LIB_HEAD_IO_LD_VX-0
      471    14420        MESSAGE: Lost data condition on inversion record for library file; ars = %U1.
      472    14421        DESCRIPTION: Self-explanatory.
      473    14422        */
      474    14423                              %NUMBER( NUM1=VX_IO_SIZEC );

  14429  6 001305   000025 630400 7                  EPPR0   21
         6 001306   000023 631400 xsym               EPPR1   B_VECTNIL+19
         6 001307   000000 701000 xent               TSX1    VXD$B2C
         6 001310   000000 011000                    NOP     0

      475    14440                             %SCREAM( ERR#=E$LIB_HEAD_IO_LD_VX,MID="'O'",LEVEL=@E$F_VX,AUX=
             14440                                  @E$OUOF_VX );

  14441  6 001311   000034 630400 7                  EPPR0   28
         6 001312   000022 631400 xsym               EPPR1   B_VECTNIL+18
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:102  
         6 001313   000000 701000 xent               TSX1    VXE$ERROR
         6 001314   000000 011000                    NOP     0

      476    14443    5                        END;

      477    14444    4   NEXT_CANDIDATE:
      478    14445    4                     REF$ = PINCRW( REF$, SIZEW( VXR$TMPLT ) );

  14445  6 001315   200011 236100       NEXT_CANDID* LDQ     REF$,,AUTO
         6 001316   000001 036003                    ADLQ    1,DU
         6 001317   200011 756100                    STQ     REF$,,AUTO

      479    14446    4                    END;

  14446  6 001320   200021 116100                    CMPQ    RSTOP$,,AUTO
         6 001321   001066 602000 6                  TNC     s:14376
         6 001322   001066 600000 6                  TZE     s:14376

      480    14447    4                 DO CASE( STATE );

  14447  6 001323   200122 235100                    LDA     STATE,,AUTO
         6 001324   000002 115007                    CMPA    2,DL
         6 001325   001327 602005 6                  TNC     s:14447+4,AL
         6 001326   001352 710000 6                  TRA     s:14456
         6 001327   001331 710000 6                  TRA     s:14449
         6 001330   001345 710000 6                  TRA     s:14452

      481    14448    4                   CASE( 0 );

      482    14449    4                     CALL VXF$CLOSE( FCURR$, 2/*@LF*/ );

  14449  6 001331   000007 236000 7                  LDQ     7
         6 001332   200221 756100                    STQ     @LIBRARY_TYPE+23,,AUTO
         6 001333   200014 630500                    EPPR0   FCURR$,,AUTO
         6 001334   200220 450500                    STP0    @LIBRARY_TYPE+22,,AUTO
         6 001335   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 001336   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:103  
         6 001337   000000 701000 xent               TSX1    VXF$CLOSE
         6 001340   000000 011000                    NOP     0

      483    14450    4                     FCURR$ = FCURR$ -> VX$LST.LINK$;

  14450  6 001341   200014 470500                    LDP0    FCURR$,,AUTO
         6 001342   000000 236100                    LDQ     0,,PR0
         6 001343   200014 756100                    STQ     FCURR$,,AUTO
         6 001344   001352 710000 6                  TRA     s:14456

      484    14451    4                   CASE( 1 );

      485    14452    4                     CALL M$CLOSE( FPT_CLOSE_NEXT );

  14452  6 001345   000264 630400 4                  EPPR0   FPT_CLOSE_NEXT
         6 001346   050001 713400                    CLIMB   close
         6 001347   406000 401760                    pmme    nvectors=13

      486    14453    4                     FCURR$ = ADDR(NIL);

  14453  6 001350   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 001351   200014 756100                    STQ     FCURR$,,AUTO

      487    14454    4                   END;                    /* Do case( state ); */

      488    14455        /* Step to next library file */
      489    14456    3                 GOTO CHECK_FCURR;

  14456  6 001352   000657 710000 6                  TRA     CHECK_FCURR

      490    14457    3                END;                       /* If REF_RTYPE = @ER ... */
      491    14458    2   NONE_IN_LIST:
      492    14459    2            END;                       /* Do i= 1 to sizew( VX_REF_REC_A ) -3; */

  14459  6 001353   200107 235100       NONE_IN_LIST LDA     I,,AUTO
         6 001354   000001 035007                    ADLA    1,DL
         6 001355   200107 755100                    STA     I,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:104  
         6 001356   000002 115007                    CMPA    2,DL
         6 001357   000214 602000 6                  TNC     s:14162

      493    14460        %EJECT;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:105  
      494    14461    1   NONE_FOUND:
      495    14462        /* Complete pass thru and no hits */
      496    14463        /* Give back(internally) memory associated with the ref's */
      497    14464    2         DO I = 0 TO SIZEW( VX_REF_REC_A ) - 2;

  14464  6 001360   200107 450100       NONE_FOUND   STZ     I,,AUTO
         6 001361   001422 710000 6                  TRA     s:14475+3

      498    14465    2             REF_RTYPE = VX_REF_REC_A(I);

  14465  6 001362   200107 720100                    LXL0    I,,AUTO
         6 001363   000000 235010 xsym               LDA     VX_REF_REC_A,X0
         6 001364   200117 755100                    STA     REF_RTYPE,,AUTO

      499    14466    2             J = VX_PASS1_ALL_TYPE(REF_RTYPE);

  14466  6 001365   000000 235005 xsym               LDA     VX_PASS1_ALL_TYPE,AL
         6 001366   200110 755100                    STA     J,,AUTO

      500    14467    2             SK = VX_M_FREE(J);

  14467  6 001367   000000 235005 xsym               LDA     VX_M_FREE,AL
         6 001370   200111 755100                    STA     K,,AUTO

      501    14468    3             IF SK > 0 THEN DO;

  14468  6 001371   001417 604400 6                  TMOZ    s:14475

      502    14469    3                 CALL VXF$FREE( J, SK, 1 );

  14469  6 001372   000006 236000 7                  LDQ     6
         6 001373   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 001374   200111 630500                    EPPR0   K,,AUTO
         6 001375   200221 450500                    STP0    @LIBRARY_TYPE+23,,AUTO
         6 001376   200110 631500                    EPPR1   J,,AUTO
         6 001377   200220 451500                    STP1    @LIBRARY_TYPE+22,,AUTO
         6 001400   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:106  
         6 001401   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 001402   000000 701000 xent               TSX1    VXF$FREE
         6 001403   000000 011000                    NOP     0

      503    14470    3                 VX_CURR$ -> VX$NODE.L_START_A$(REF_RTYPE) = ADDR(NIL);

  14470  6 001404   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 001405   000000 470400 xsym               LDP0    VX_CURR$
         6 001406   200117 720100                    LXL0    REF_RTYPE,,AUTO
         6 001407   000030 756110                    STQ     24,X0,PR0

      504    14471    3                 VX_CURR$ -> VX$NODE.L_STOP_A$(REF_RTYPE)  = ADDR(NIL);

  14471  6 001410   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 001411   000000 470400 xsym               LDP0    VX_CURR$
         6 001412   000042 756110                    STQ     34,X0,PR0

      505    14472    3                 VX_CURR$ -> VX$NODE.L_SIZE_A(REF_RTYPE)   = 0;

  14472  6 001413   000000 470400 xsym               LDP0    VX_CURR$
         6 001414   000054 450110                    STZ     44,X0,PR0

      506    14473    3                 VX_CURR$ -> VX$NODE.L_PREV_SIZE_A(REF_RTYPE) = 0;

  14473  6 001415   000000 470400 xsym               LDP0    VX_CURR$
         6 001416   000066 450110                    STZ     54,X0,PR0

      507    14474    3                END;                       /* If sk > 0 then do; */

      508    14475    2            END;                       /* Do i = 0 to sizew( VX_REF_REC_A ) - 2; */

  14475  6 001417   200107 235100                    LDA     I,,AUTO
         6 001420   000001 035007                    ADLA    1,DL
         6 001421   200107 755100                    STA     I,,AUTO
         6 001422   200107 235100                    LDA     I,,AUTO
         6 001423   000003 115007                    CMPA    3,DL
         6 001424   001362 602000 6                  TNC     s:14465
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:107  

      509    14476
      510    14477    1         CALL M$CLOSE (CLOSE_LLMU);

  14477  6 001425   000172 630400 2                  EPPR0   CLOSE_LLMU
         6 001426   050001 713400                    CLIMB   close
         6 001427   406000 401760                    pmme    nvectors=13

      511    14478    1         RETURN;

  14478  6 001430   000000 702200 xent               TSX2  ! X66_ARET

      512    14479
      513    14480        %EJECT;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:108  
      514    14481    1   READ_FILE: PROC( LIBRARY_FILE, LIBRARY_TYPE )   ALTRET ;

  14481  6 001431   200170 741300       READ_FILE    STX1  ! OPEN_LAST_NAME+9,,AUTO

      515    14482
      516    14483    2   DCL LIBRARY_FILE BIT(1) ALIGNED;
      517    14484    2   DCL LIBRARY_TYPE UBIN(36) ALIGNED;
      518    14485
      519    14486    3         IF LIBRARY_FILE THEN DO;

  14486  6 001432   200171 470500                    LDP0    @LIBRARY_FILE,,AUTO
         6 001433   000000 234100                    SZN     0,,PR0
         6 001434   001545 605000 6                  TPL     s:14526

      520    14487                                                /* Build head record */
      521    14488    3            CALL CONCAT( VX_O_KEY_BUF.FORM0.CHARS, VX_O_KEY_HEAD, VX_L_REC_BUF.CHARS);

  14488  6 001435   000000 236000 xsym               LDQ     VX_O_KEY_HEAD
         6 001436   000011 772000                    QRL     9
         6 001437   000000 552020 xsym               STBQ    VX_O_KEY_BUF,'20'O
         6 001440   040000 100400                    MLR     fill='040'O
         6 001441   000000 200037 xsym               ADSC9   VX_L_REC_BUF             cn=1,n=31
         6 001442   000000 400777 xsym               ADSC9   VX_O_KEY_BUF             cn=2,n=511

      522    14489    3             VX_O_KEY_BUF.FORM0.COUNT = VX_IO_SIZEC + 1;

  14489  6 001443   000000 236000 xsym               LDQ     VX_IO_SIZEC
         6 001444   000001 036007                    ADLQ    1,DL
         6 001445   000033 736000                    QLS     27
         6 001446   000000 552040 xsym               STBQ    VX_O_KEY_BUF,'40'O

      523    14490    3             VX_L_REC_BUF.COUNT = VX_IO_SIZEC;

  14490  6 001447   000000 236000 xsym               LDQ     VX_IO_SIZEC
         6 001450   000033 736000                    QLS     27
         6 001451   000000 552040 xsym               STBQ    VX_L_REC_BUF,'40'O

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:109  
      524    14491                                                /* Now read the head record */
      525    14492    3             CALL VXI$READ( 2/*@LF*/, ADDR(VX_OU_HEAD), SIZEW(VX_OU_HEAD), 0/*@OF*/ )
             14492                      ALTRET(NO_HEAD);

  14492  6 001452   000040 236000 7                  LDQ     32
         6 001453   200220 756100                    STQ     @LIBRARY_TYPE+22,,AUTO
         6 001454   000042 237000 7                  LDAQ    34
         6 001455   200224 757100                    STAQ    @LIBRARY_TYPE+26,,AUTO
         6 001456   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 001457   200223 450500                    STP0    @LIBRARY_TYPE+25,,AUTO
         6 001460   000007 236000 7                  LDQ     7
         6 001461   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 001462   200222 630500                    EPPR0   @LIBRARY_TYPE+24,,AUTO
         6 001463   000022 631400 xsym               EPPR1   B_VECTNIL+18
         6 001464   000000 701000 xent               TSX1    VXI$READ
         6 001465   002472 702000 6                  TSX2    NO_HEAD

      526    14493
      527    14494    3             IF FCURR$ = ADDR(NIL) THEN FCURR$ = ADDR(DEFAULT_FILE);

  14494  6 001466   200014 236100                    LDQ     FCURR$,,AUTO
         6 001467   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001470   001474 601000 6                  TNZ     s:14496

  14494  6 001471   000044 236000 7                  LDQ     36
         6 001472   200014 756100                    STQ     FCURR$,,AUTO
         6 001473   001516 710000 6                  TRA     s:14514

      528    14495    3             ELSE
      529    14496    4                 IF FCURR$ -> VX$LST.LIB.NEEDED = 0/*@NO*/ THEN DO;

  14496  6 001474   200014 470500                    LDP0    FCURR$,,AUTO
         6 001475   000004 720100                    LXL0    4,,PR0
         6 001476   001516 601000 6                  TNZ     s:14514

      530    14497        /*E*  ERROR: VXO-E$LIB_ULIB_VX-0
      531    14498              MESSAGE: Library file %FN used.
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:110  
      532    14499              DESCRIPTION: Self-explantory.
      533    14500        */
      534    14501                          %ERRMSG( ERR#=E$LIB_ULIB_VX, LEVEL=@E$I_VX, MID='O', DCB#=M$OF );

  14508  6 001477   000000 236007 xsym               LDQ     M$OF,DL
         6 001500   200220 756100                    STQ     @LIBRARY_TYPE+22,,AUTO
         6 001501   200220 631500                    EPPR1   @LIBRARY_TYPE+22,,AUTO
         6 001502   200223 451500                    STP1    @LIBRARY_TYPE+25,,AUTO
         6 001503   000006 236000 7                  LDQ     6
         6 001504   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 001505   000045 236000 7                  LDQ     37
         6 001506   200221 756100                    STQ     @LIBRARY_TYPE+23,,AUTO
         6 001507   200221 630500                    EPPR0   @LIBRARY_TYPE+23,,AUTO
         6 001510   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 001511   000000 701000 xent               TSX1    VXE$ERRMSG
         6 001512   000000 011000                    NOP     0

      535    14510    4                     FCURR$ -> VX$LST.LIB.NEEDED = 1/*@YES*/;

  14510  6 001513   000001 220003                    LDX0    1,DU
         6 001514   200014 470500                    LDP0    FCURR$,,AUTO
         6 001515   000004 440100                    SXL0    4,,PR0

      536    14511    4                    END;

      537    14512
      538    14513                                            /* Now build an entry on the node list */
      539    14514    3             CALL VXS$LST(

  14514  6 001516   000046 236000 7                  LDQ     38
         6 001517   200220 756100                    STQ     @LIBRARY_TYPE+22,,AUTO
         6 001520   000004 236000 7                  LDQ     4
         6 001521   200227 756100                    STQ     @LIBRARY_TYPE+29,,AUTO
         6 001522   200014 630500                    EPPR0   FCURR$,,AUTO
         6 001523   200226 450500                    STP0    @LIBRARY_TYPE+28,,AUTO
         6 001524   000050 237000 7                  LDAQ    40
         6 001525   200224 757100                    STAQ    @LIBRARY_TYPE+26,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:111  
         6 001526   200220 631500                    EPPR1   @LIBRARY_TYPE+22,,AUTO
         6 001527   200223 451500                    STP1    @LIBRARY_TYPE+25,,AUTO
         6 001530   200010 633500                    EPPR3   NEW_FILE$,,AUTO
         6 001531   200222 453500                    STP3    @LIBRARY_TYPE+24,,AUTO
         6 001532   200222 630500                    EPPR0   @LIBRARY_TYPE+24,,AUTO
         6 001533   000024 631400 xsym               EPPR1   B_VECTNIL+20
         6 001534   000000 701000 xent               TSX1    VXS$LST
         6 001535   000000 011000                    NOP     0

      540    14515    3                     NEW_FILE$,
      541    14516    3                     ADDR( VX_L_REC_BUF ),
      542    14517    3                     2/*@LF*/,
      543    14518    3                     0/*@LF_ULIB*/,
      544    14519    3                     FCURR$,
      545    14520    3                     0 );
      546    14521    3             VX_CURR$ -> VX$NODE.TAIL$ -> VX$LST.LINK$ = NEW_FILE$;

  14521  6 001536   000000 470400 xsym               LDP0    VX_CURR$
         6 001537   000005 471500                    LDP1    5,,PR0
         6 001540   200010 236100                    LDQ     NEW_FILE$,,AUTO
         6 001541   100000 756100                    STQ     0,,PR1

      547    14522                                                /* Set tail */
      548    14523    3             VX_CURR$ -> VX$NODE.TAIL$ = NEW_FILE$;

  14523  6 001542   200010 236100                    LDQ     NEW_FILE$,,AUTO
         6 001543   000000 470400 xsym               LDP0    VX_CURR$
         6 001544   000005 756100                    STQ     5,,PR0

      549    14524    3            END;

      550    14525
      551    14526    3         DO L = %TYPEDEF TO SIZEW( VX$NODE.L_START_A$ ) - 1;

  14526  6 001545   000004 235007                    LDA     4,DL
         6 001546   200112 755100                    STA     L,,AUTO
         6 001547   001572 710000 6                  TRA     s:14533+3
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:112  

      552    14527    3             PRE_START$(L) = VX_CURR$ -> VX$NODE.L_START_A$(L);

  14527  6 001550   000000 470400 xsym               LDP0    VX_CURR$
         6 001551   200112 720100                    LXL0    L,,AUTO
         6 001552   000030 236110                    LDQ     24,X0,PR0
         6 001553   200036 756110                    STQ     PRE_START$,X0,AUTO

      553    14528    3             PRE_STOP$(L)  = VX_CURR$ -> VX$NODE.L_STOP_A$(L);

  14528  6 001554   000042 236110                    LDQ     34,X0,PR0
         6 001555   200050 756110                    STQ     PRE_STOP$,X0,AUTO

      554    14529    3             PRE_SIZE(L) = VX_CURR$ -> VX$NODE.L_SIZE_A(L);

  14529  6 001556   000054 235110                    LDA     44,X0,PR0
         6 001557   200124 755110                    STA     PRE_SIZE,X0,AUTO

      555    14530    3             VX_CURR$ -> VX$NODE.L_START_A$(L) = ADDR(NIL);

  14530  6 001560   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 001561   000030 756110                    STQ     24,X0,PR0

      556    14531    3             VX_CURR$ -> VX$NODE.L_STOP_A$(L)  = ADDR(NIL);

  14531  6 001562   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 001563   000000 470400 xsym               LDP0    VX_CURR$
         6 001564   000042 756110                    STQ     34,X0,PR0

      557    14532    3             VX_CURR$ -> VX$NODE.L_SIZE_A(L) = 0;

  14532  6 001565   000000 470400 xsym               LDP0    VX_CURR$
         6 001566   000054 450110                    STZ     44,X0,PR0

      558    14533    3            END;

  14533  6 001567   200112 236100                    LDQ     L,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:113  
         6 001570   000001 036007                    ADLQ    1,DL
         6 001571   200112 756100                    STQ     L,,AUTO
         6 001572   200112 235100                    LDA     L,,AUTO
         6 001573   000012 115007                    CMPA    10,DL
         6 001574   001550 602000 6                  TNC     s:14527

      559    14534
      560    14535    3         IF LIBRARY_FILE THEN DO;

  14535  6 001575   200171 470500                    LDP0    @LIBRARY_FILE,,AUTO
         6 001576   000000 234100                    SZN     0,,PR0
         6 001577   001642 605000 6                  TPL     s:14547

      561    14536                                    /* Here => have read head record for object unit */
      562    14537    3             VX_INHIBIT_COMPACTION = 1/*@YES*/;
             14537                      /* Inhibit ref name compaction in VXO$OBJECT */

  14537  6 001600   000001 236007                    LDQ     1,DL
         6 001601   000000 756000 xsym               STQ     VX_INHIBIT_COMPACTION

      563    14538    3             CALL VXO$OBJECT(NEW_FILE$, %SOURCE_ULIB#, ADDR(VX_PASS1_LIB_ALL_TYPE));

  14538  6 001602   000052 236000 7                  LDQ     42
         6 001603   200220 756100                    STQ     @LIBRARY_TYPE+22,,AUTO
         6 001604   200220 631500                    EPPR1   @LIBRARY_TYPE+22,,AUTO
         6 001605   200223 451500                    STP1    @LIBRARY_TYPE+25,,AUTO
         6 001606   000053 236000 7                  LDQ     43
         6 001607   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 001610   200010 633500                    EPPR3   NEW_FILE$,,AUTO
         6 001611   200221 453500                    STP3    @LIBRARY_TYPE+23,,AUTO
         6 001612   200221 630500                    EPPR0   @LIBRARY_TYPE+23,,AUTO
         6 001613   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 001614   000000 701000 xent               TSX1    VXO$OBJECT
         6 001615   000000 011000                    NOP     0

      564    14539    3             VX_INHIBIT_COMPACTION = 0/*@NO*/;

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:114  
  14539  6 001616   000000 450000 xsym               STZ     VX_INHIBIT_COMPACTION

      565    14540    4             DO CASE( STATE );

  14540  6 001617   200122 235100                    LDA     STATE,,AUTO
         6 001620   000002 115007                    CMPA    2,DL
         6 001621   001623 602005 6                  TNC     s:14540+4,AL
         6 001622   001703 710000 6                  TRA     s:14558
         6 001623   001625 710000 6                  TRA     s:14542
         6 001624   001636 710000 6                  TRA     s:14544

      566    14541    4               CASE( 0 );

      567    14542    4                 CALL VXF$CLOSE( FCURR$, 2/*@LF*/ );

  14542  6 001625   000007 236000 7                  LDQ     7
         6 001626   200221 756100                    STQ     @LIBRARY_TYPE+23,,AUTO
         6 001627   200014 630500                    EPPR0   FCURR$,,AUTO
         6 001630   200220 450500                    STP0    @LIBRARY_TYPE+22,,AUTO
         6 001631   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 001632   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 001633   000000 701000 xent               TSX1    VXF$CLOSE
         6 001634   000000 011000                    NOP     0
         6 001635   001703 710000 6                  TRA     s:14558

      568    14543    4               CASE( 1 );

      569    14544    4                 CALL M$CLOSE( FPT_CLOSE_NEXT );

  14544  6 001636   000264 630400 4                  EPPR0   FPT_CLOSE_NEXT
         6 001637   050001 713400                    CLIMB   close
         6 001640   406000 401760                    pmme    nvectors=13

      570    14545    4               END;                        /* Do case( state ); */

      571    14546    3            END;

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:115  
  14546  6 001641   001703 710000 6                  TRA     s:14558

      572    14547    3         ELSE DO CASE ( LIBRARY_TYPE ) ;   /* Library ou associated a library */

  14547  6 001642   200172 471500                    LDP1    @LIBRARY_TYPE,,AUTO
         6 001643   100000 235100                    LDA     0,,PR1
         6 001644   000003 115007                    CMPA    3,DL
         6 001645   001647 602005 6                  TNC     s:14547+5,AL
         6 001646   001703 710000 6                  TRA     s:14558
         6 001647   001703 710000 6                  TRA     s:14558
         6 001650   001667 710000 6                  TRA     s:14553
         6 001651   001652 710000 6                  TRA     s:14549

      573    14548    3           CASE ( 2/*@LF_SLIB*/ ) ;

      574    14549    3             CALL VXF$OPEN  ( VX_SLIB_INIT$, 0/*@OF*/ ) ;

  14549  6 001652   000054 630400 7                  EPPR0   44
         6 001653   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 001654   000000 701000 xent               TSX1    VXF$OPEN
         6 001655   000000 011000                    NOP     0

      575    14550    3             CALL VXO$RUN   ( 2/*@LF_SLIB*/, %SOURCE_SLIB#, VX_PASS1_LIB_ALL_TYPE ) ;

  14550  6 001656   000056 630400 7                  EPPR0   46
         6 001657   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 001660   000000 701000 xent               TSX1    VXO$RUN
         6 001661   000000 011000                    NOP     0

      576    14551    3             CALL VXF$CLOSE ( VX_SLIB_INIT$, 0/*@OF*/ ) ;

  14551  6 001662   000054 630400 7                  EPPR0   44
         6 001663   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 001664   000000 701000 xent               TSX1    VXF$CLOSE
         6 001665   000000 011000                    NOP     0
         6 001666   001703 710000 6                  TRA     s:14558

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:116  
      577    14552    3           CASE ( 1/*@LF_ALIB*/ ) ;

      578    14553    3             CALL VXF$OPEN  ( VX_O.FID.ALTSHARELIB$, 0/*@OF*/ ) ;

  14553  6 001667   000061 630400 7                  EPPR0   49
         6 001670   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 001671   000000 701000 xent               TSX1    VXF$OPEN
         6 001672   000000 011000                    NOP     0

      579    14554    3             CALL VXO$RUN   ( 1/*@LF_ALIB*/, %SOURCE_ALIB#, VX_PASS1_LIB_ALL_TYPE ) ;

  14554  6 001673   000063 630400 7                  EPPR0   51
         6 001674   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 001675   000000 701000 xent               TSX1    VXO$RUN
         6 001676   000000 011000                    NOP     0

      580    14555    3             CALL VXF$CLOSE ( VX_O.FID.ALTSHARELIB$, 0/*@OF*/ ) ;

  14555  6 001677   000061 630400 7                  EPPR0   49
         6 001700   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 001701   000000 701000 xent               TSX1    VXF$CLOSE
         6 001702   000000 011000                    NOP     0

      581    14556    3           END ;

      582    14557
      583    14558    3         DO L= %TYPEDEF TO %TYPSEGREF;

  14558  6 001703   000004 235007                    LDA     4,DL
         6 001704   200112 755100                    STA     L,,AUTO

      584    14559    3             POST_START$(L) = VX_CURR$ -> VX$NODE.L_START_A$(L);

  14559  6 001705   000000 470400 xsym               LDP0    VX_CURR$
         6 001706   200112 720100                    LXL0    L,,AUTO
         6 001707   000030 236110                    LDQ     24,X0,PR0
         6 001710   200062 756110                    STQ     POST_START$,X0,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:117  

      585    14560    3             POST_STOP$(L)  = VX_CURR$ -> VX$NODE.L_STOP_A$(L);

  14560  6 001711   000042 236110                    LDQ     34,X0,PR0
         6 001712   200074 756110                    STQ     POST_STOP$,X0,AUTO

      586    14561    3            END;

  14561  6 001713   200112 235100                    LDA     L,,AUTO
         6 001714   000001 035007                    ADLA    1,DL
         6 001715   200112 755100                    STA     L,,AUTO
         6 001716   000012 115007                    CMPA    10,DL
         6 001717   001705 602000 6                  TNC     s:14559

      587    14562    3         DO L = 1 TO SIZEW( VX_DEF_REC_A ) -1;

  14562  6 001720   000001 236007                    LDQ     1,DL
         6 001721   200112 756100                    STQ     L,,AUTO
         6 001722   002135 710000 6                  TRA     s:14614+3

      588    14563    3             REC = VX_DEF_REC_A(L);

  14563  6 001723   200112 720100                    LXL0    L,,AUTO
         6 001724   000000 235010 xsym               LDA     VX_DEF_REC_A,X0
         6 001725   200120 755100                    STA     REC,,AUTO

      589    14564    3             START$ = VX_CURR$ -> VX$NODE.L_START_A$(REC);

  14564  6 001726   000000 470400 xsym               LDP0    VX_CURR$
         6 001727   000030 236105                    LDQ     24,AL,PR0
         6 001730   200020 756100                    STQ     START$,,AUTO

      590    14565    4             IF START$ ~= ADDR(NIL) THEN DO; /* Some came from the library ou */

  14565  6 001731   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 001732   002121 600000 6                  TZE     s:14610

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:118  
      591    14566    4                 CALL VXQ$SORT( VX_CURR$ -> VX$NODE.L_START.DN$,

  14566  6 001733   000004 236000 7                  LDQ     4
         6 001734   200226 756100                    STQ     @LIBRARY_TYPE+28,,AUTO
         6 001735   000006 237000 7                  LDAQ    6
         6 001736   200224 757100                    STAQ    @LIBRARY_TYPE+26,,AUTO
         6 001737   000007 236000 7                  LDQ     7
         6 001740   200223 756100                    STQ     @LIBRARY_TYPE+25,,AUTO
         6 001741   200120 236100                    LDQ     REC,,AUTO
         6 001742   000022 736000                    QLS     18
         6 001743   000042 036003                    ADLQ    34,DU
         6 001744   000000 036000 xsym               ADLQ    VX_CURR$
         6 001745   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 001746   200020 631500                    EPPR1   START$,,AUTO
         6 001747   200221 451500                    STP1    @LIBRARY_TYPE+23,,AUTO
         6 001750   000000 236000 xsym               LDQ     VX_CURR$
         6 001751   000031 036003                    ADLQ    25,DU
         6 001752   200220 756100                    STQ     @LIBRARY_TYPE+22,,AUTO
         6 001753   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 001754   000025 631400 xsym               EPPR1   B_VECTNIL+21
         6 001755   000000 701000 xent               TSX1    VXQ$SORT
         6 001756   000000 011000                    NOP     0

      592    14567    4                         START$,
      593    14568    4                         VX_CURR$ -> VX$NODE.L_STOP_A$(REC),
      594    14569    4                         SIZEW( VXD$TMPLT ),
      595    14570    4                         1/*@BY_NAME*/,
      596    14571    4                         2,
      597    14572    4                         0 );
      598    14573    4                 J = VX_PASS1_ALL_TYPE(REC);

  14573  6 001757   200120 720100                    LXL0    REC,,AUTO
         6 001760   000000 235010 xsym               LDA     VX_PASS1_ALL_TYPE,X0
         6 001761   200110 755100                    STA     J,,AUTO

      599    14574    4                 K = VX_CURR$ -> VX$NODE.L_SIZE_A(REC) + SIZEW(VXD$TMPLT);

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:119  
  14574  6 001762   000000 470400 xsym               LDP0    VX_CURR$
         6 001763   000054 235110                    LDA     44,X0,PR0
         6 001764   000002 035007                    ADLA    2,DL
         6 001765   200111 755100                    STA     K,,AUTO

      600    14575                      %ALLOCATE( PTR$=WHERE$, TYPE=J, SIZE=K );

  14576  6 001766   200110 721100                    LXL1    J,,AUTO
         6 001767   000000 236011 xsym               LDQ     VX_M_ALL,X1
         6 001770   000000 136011 xsym               SBLQ    VX_M_FREE,X1
         6 001771   002004 604000 6                  TMI     s:14580
         6 001772   200111 116100                    CMPQ    K,,AUTO
         6 001773   002004 602000 6                  TNC     s:14580

  14577  6 001774   000000 236011 xsym               LDQ     VX_M_FREE,X1
         6 001775   000000 471411 xsym               LDP1    VX_M_BASE_PTR,X1
         6 001776   100000 633506                    EPPR3   0,QL,PR1
         6 001777   200032 453500                    STP3    WHERE$,,AUTO

  14578  6 002000   000000 236011 xsym               LDQ     VX_M_FREE,X1
         6 002001   200111 036100                    ADLQ    K,,AUTO
         6 002002   000000 756011 xsym               STQ     VX_M_FREE,X1

  14579  6 002003   002016 710000 6                  TRA     s:14583

  14580  6 002004   200111 631500                    EPPR1   K,,AUTO
         6 002005   200222 451500                    STP1    @LIBRARY_TYPE+24,,AUTO
         6 002006   200110 633500                    EPPR3   J,,AUTO
         6 002007   200221 453500                    STP3    @LIBRARY_TYPE+23,,AUTO
         6 002010   200032 634500                    EPPR4   WHERE$,,AUTO
         6 002011   200220 454500                    STP4    @LIBRARY_TYPE+22,,AUTO
         6 002012   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 002013   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 002014   000000 701000 xent               TSX1    VXA$GET
         6 002015   000000 011000                    NOP     0

      601    14582
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:120  
      602    14583    5                 IF PRE_START$(REC) ~= ADDR(NIL) THEN DO;

  14583  6 002016   200120 720100                    LXL0    REC,,AUTO
         6 002017   200036 236110                    LDQ     PRE_START$,X0,AUTO
         6 002020   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002021   002032 600000 6                  TZE     s:14589

      603    14584    5                     FIRST_START$ = PINCRW( PRE_START$(REC), 1*SIZEW(VXD$TMPLT) );

  14584  6 002022   000002 036003                    ADLQ    2,DU
         6 002023   200030 756100                    STQ     FIRST_START$,,AUTO

      604    14585    5                     FIRST_STOP$ = PINCRW( PRE_STOP$(REC), VX_CURR$ ->

  14585  6 002024   000000 470400 xsym               LDP0    VX_CURR$
         6 002025   000054 721110                    LXL1    44,X0,PR0
         6 002026   200050 471510                    LDP1    PRE_STOP$,X0,AUTO
         6 002027   100002 633511                    EPPR3   2,X1,PR1
         6 002030   200031 453500                    STP3    FIRST_STOP$,,AUTO

      605    14586    5                             VX$NODE.L_SIZE_A(REC) + SIZEW(VXD$TMPLT) );
      606    14587    5                    END;

  14587  6 002031   002042 710000 6                  TRA     s:14602

      607    14588    5                 ELSE DO;

      608    14589    5                     FIRST_START$ = PINCRW( WHERE$, SIZEW(VXD$TMPLT) );

  14589  6 002032   200032 236100                    LDQ     WHERE$,,AUTO
         6 002033   000002 036003                    ADLQ    2,DU
         6 002034   200030 756100                    STQ     FIRST_START$,,AUTO

      609    14590    5                     FIRST_STOP$ = PINCRW( WHERE$, VX_CURR$ ->

  14590  6 002035   000000 470400 xsym               LDP0    VX_CURR$
         6 002036   000054 721110                    LXL1    44,X0,PR0
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:121  
         6 002037   000002 636011                    EAQ     2,X1
         6 002040   200032 036100                    ADLQ    WHERE$,,AUTO
         6 002041   200031 756100                    STQ     FIRST_STOP$,,AUTO

      610    14591    5                             VX$NODE.L_SIZE_A(REC) + SIZEW(VXD$TMPLT) );
      611    14592    5                    END;

      612    14593
      613    14594    4                 CALL VXU$MERGE( FIRST_START$,
      614    14595    4                         FIRST_STOP$,
      615    14596    4                         VX_CURR$ -> VX$NODE.L_START.DN$,
      616    14597    4                         VX_CURR$ -> VX$NODE.L_START_A$(REC),
      617    14598    4                         VX_CURR$ -> VX$NODE.L_STOP_A$(REC),
      618    14599    4                         VX_CURR$ -> VX$NODE.L_START.DN$,
      619    14600    4                         PRE_START$(REC),
      620    14601    4                         PRE_STOP$(REC),
      621    14602    4                         SIZEW(VXD$TMPLT),

  14602  6 002042   000070 237000 7                  LDAQ    56
         6 002043   200230 757100                    STAQ    @LIBRARY_TYPE+30,,AUTO
         6 002044   200050 631510                    EPPR1   PRE_STOP$,X0,AUTO
         6 002045   200227 451500                    STP1    @LIBRARY_TYPE+29,,AUTO
         6 002046   200036 633510                    EPPR3   PRE_START$,X0,AUTO
         6 002047   200226 453500                    STP3    @LIBRARY_TYPE+28,,AUTO
         6 002050   000000 236000 xsym               LDQ     VX_CURR$
         6 002051   000031 036003                    ADLQ    25,DU
         6 002052   200225 756100                    STQ     @LIBRARY_TYPE+27,,AUTO
         6 002053   200120 236100                    LDQ     REC,,AUTO
         6 002054   000022 736000                    QLS     18
         6 002055   000042 036003                    ADLQ    34,DU
         6 002056   000000 036000 xsym               ADLQ    VX_CURR$
         6 002057   200224 756100                    STQ     @LIBRARY_TYPE+26,,AUTO
         6 002060   200120 236100                    LDQ     REC,,AUTO
         6 002061   000022 736000                    QLS     18
         6 002062   000030 036003                    ADLQ    24,DU
         6 002063   000000 036000 xsym               ADLQ    VX_CURR$
         6 002064   200223 756100                    STQ     @LIBRARY_TYPE+25,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:122  
         6 002065   000000 236000 xsym               LDQ     VX_CURR$
         6 002066   000031 036003                    ADLQ    25,DU
         6 002067   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 002070   200031 634500                    EPPR4   FIRST_STOP$,,AUTO
         6 002071   200221 454500                    STP4    @LIBRARY_TYPE+23,,AUTO
         6 002072   200030 635500                    EPPR5   FIRST_START$,,AUTO
         6 002073   200220 455500                    STP5    @LIBRARY_TYPE+22,,AUTO
         6 002074   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 002075   000066 631400 7                  EPPR1   54
         6 002076   000000 701000 xent               TSX1    VXU$MERGE
         6 002077   000000 011000                    NOP     0

      622    14603    4                         2    );
      623    14604    4                 VX_CURR$ -> VX$NODE.L_START_A$(REC) = FIRST_START$;

  14604  6 002100   200030 236100                    LDQ     FIRST_START$,,AUTO
         6 002101   000000 470400 xsym               LDP0    VX_CURR$
         6 002102   200120 720100                    LXL0    REC,,AUTO
         6 002103   000030 756110                    STQ     24,X0,PR0

      624    14605    4                 VX_CURR$ -> VX$NODE.L_STOP_A$(REC) = FIRST_STOP$;

  14605  6 002104   200031 236100                    LDQ     FIRST_STOP$,,AUTO
         6 002105   000000 470400 xsym               LDP0    VX_CURR$
         6 002106   000042 756110                    STQ     34,X0,PR0

      625    14606    4                 VX_CURR$ -> VX$NODE.L_SIZE_A(REC) = POFFW( FIRST_STOP$,

  14606  6 002107   200030 235100                    LDA     FIRST_START$,,AUTO
         6 002110   000022 771000                    ARL     18
         6 002111   200220 755100                    STA     @LIBRARY_TYPE+22,,AUTO
         6 002112   200031 236100                    LDQ     FIRST_STOP$,,AUTO
         6 002113   000022 772000                    QRL     18
         6 002114   200220 136100                    SBLQ    @LIBRARY_TYPE+22,,AUTO
         6 002115   000002 036007                    ADLQ    2,DL
         6 002116   000000 470400 xsym               LDP0    VX_CURR$
         6 002117   000054 756110                    STQ     44,X0,PR0
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:123  

      626    14607    4                         FIRST_START$ ) + SIZEW( VXD$TMPLT );
      627    14608    4                END;                       /* If START$ ~= addr(nil) then do; */

  14608  6 002120   002132 710000 6                  TRA     s:14614

      628    14609    4             ELSE DO;

      629    14610    4                 VX_CURR$ -> VX$NODE.L_START_A$(REC) = PRE_START$(REC);

  14610  6 002121   200120 721100                    LXL1    REC,,AUTO
         6 002122   200036 236111                    LDQ     PRE_START$,X1,AUTO
         6 002123   000030 756111                    STQ     24,X1,PR0

      630    14611    4                 VX_CURR$ -> VX$NODE.L_STOP_A$(REC) = PRE_STOP$(REC);

  14611  6 002124   200050 236111                    LDQ     PRE_STOP$,X1,AUTO
         6 002125   000000 470400 xsym               LDP0    VX_CURR$
         6 002126   000042 756111                    STQ     34,X1,PR0

      631    14612    4                 VX_CURR$ -> VX$NODE.L_SIZE_A(REC) = PRE_SIZE(REC);

  14612  6 002127   000000 470400 xsym               LDP0    VX_CURR$
         6 002130   200124 235111                    LDA     PRE_SIZE,X1,AUTO
         6 002131   000054 755111                    STA     44,X1,PR0

      632    14613    4                END;                       /* Else do; */

      633    14614    3            END;                       /* Do L=1 to sizew( VX_DEF_REC_A ) - 1; */

  14614  6 002132   200112 235100                    LDA     L,,AUTO
         6 002133   000001 035007                    ADLA    1,DL
         6 002134   200112 755100                    STA     L,,AUTO
         6 002135   200112 235100                    LDA     L,,AUTO
         6 002136   000004 115007                    CMPA    4,DL
         6 002137   001723 602000 6                  TNC     s:14563

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:124  
      634    14615        /*
      635    14616              Now for the refs
      636    14617        */
      637    14618    3         DO L = 1 TO SIZEW( VX_REF_REC_A ) -2;

  14618  6 002140   000001 236007                    LDQ     1,DL
         6 002141   200112 756100                    STQ     L,,AUTO
         6 002142   002377 710000 6                  TRA     s:14678+3

      638    14619    3             REC = VX_REF_REC_A(L);

  14619  6 002143   200112 720100                    LXL0    L,,AUTO
         6 002144   000000 235010 xsym               LDA     VX_REF_REC_A,X0
         6 002145   200120 755100                    STA     REC,,AUTO

      639    14620    3             START$ = VX_CURR$ -> VX$NODE.L_START_A$(REC);

  14620  6 002146   000000 470400 xsym               LDP0    VX_CURR$
         6 002147   000030 236105                    LDQ     24,AL,PR0
         6 002150   200020 756100                    STQ     START$,,AUTO

      640    14621    4             IF START$ ~= ADDR(NIL) THEN DO; /* Some came from the library ou */

  14621  6 002151   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002152   002363 600000 6                  TZE     s:14674

      641    14622    5                 IF REC = %TYPEREF THEN DO;

  14622  6 002153   200120 235100                    LDA     REC,,AUTO
         6 002154   000005 115007                    CMPA    5,DL
         6 002155   002175 601000 6                  TNZ     s:14630

      642    14623    5                     CAND_P$ = VX_CURR$ -> VX$NODE.L_START.ER$;

  14623  6 002156   000035 236100                    LDQ     29,,PR0
         6 002157   200034 756100                    STQ     CAND_P$,,AUTO

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:125  
      643    14624    5                     CAND_Q$ = VX_CURR$ -> VX$NODE.L_STOP.ER$;

  14624  6 002160   000047 236100                    LDQ     39,,PR0
         6 002161   200035 756100                    STQ     CAND_Q$,,AUTO

      644    14625    6                     DO WHILE( CAND_P$ <= CAND_Q$ );

  14625  6 002162   200034 116100                    CMPQ    CAND_P$,,AUTO
         6 002163   002175 602000 6                  TNC     s:14630

      645    14626    6                         CAND_P$ -> VXR$TMPLT.STATE = '0'B/*@FALSE_B*/;

  14626  6 002164   200034 470500                    LDP0    CAND_P$,,AUTO
         6 002165   000010 236000 7                  LDQ     8
         6 002166   000000 356100                    ANSQ    0,,PR0

      646    14627    6                         CAND_P$ = PINCRW( CAND_P$, SIZEW( VXR$TMPLT ) );

  14627  6 002167   200034 236100                    LDQ     CAND_P$,,AUTO
         6 002170   000001 036003                    ADLQ    1,DU
         6 002171   200034 756100                    STQ     CAND_P$,,AUTO

      647    14628    6                        END;               /* Do while( CAND_P$ <= CAND_Q$ ); */

  14628  6 002172   200035 116100                    CMPQ    CAND_Q$,,AUTO
         6 002173   002164 602000 6                  TNC     s:14626
         6 002174   002164 600000 6                  TZE     s:14626

      648    14629    5                    END;                   /* If rec = typeref then do; */

      649    14630    4                 CALL VXQ$SORT( VX_CURR$ -> VX$NODE.L_START.RN$,

  14630  6 002175   000004 236000 7                  LDQ     4
         6 002176   200226 756100                    STQ     @LIBRARY_TYPE+28,,AUTO
         6 002177   000012 237000 7                  LDAQ    10
         6 002200   200224 757100                    STAQ    @LIBRARY_TYPE+26,,AUTO
         6 002201   000006 236000 7                  LDQ     6
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:126  
         6 002202   200223 756100                    STQ     @LIBRARY_TYPE+25,,AUTO
         6 002203   200120 236100                    LDQ     REC,,AUTO
         6 002204   000022 736000                    QLS     18
         6 002205   000042 036003                    ADLQ    34,DU
         6 002206   000000 036000 xsym               ADLQ    VX_CURR$
         6 002207   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 002210   200020 630500                    EPPR0   START$,,AUTO
         6 002211   200221 450500                    STP0    @LIBRARY_TYPE+23,,AUTO
         6 002212   000000 236000 xsym               LDQ     VX_CURR$
         6 002213   000032 036003                    ADLQ    26,DU
         6 002214   200220 756100                    STQ     @LIBRARY_TYPE+22,,AUTO
         6 002215   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 002216   000025 631400 xsym               EPPR1   B_VECTNIL+21
         6 002217   000000 701000 xent               TSX1    VXQ$SORT
         6 002220   000000 011000                    NOP     0

      650    14631    4                         START$,
      651    14632    4                         VX_CURR$ -> VX$NODE.L_STOP_A$(REC),
      652    14633    4                         SIZEW( VXR$TMPLT ),
      653    14634    4                         1/*@BY_NAME*/,
      654    14635    4                         0,
      655    14636    4                         0 );
      656    14637    4                 J = VX_PASS1_ALL_TYPE(REC);

  14637  6 002221   200120 720100                    LXL0    REC,,AUTO
         6 002222   000000 235010 xsym               LDA     VX_PASS1_ALL_TYPE,X0
         6 002223   200110 755100                    STA     J,,AUTO

      657    14638    4                 K = VX_CURR$ -> VX$NODE.L_SIZE_A(REC) + 2 * SIZEW( VXR$TMPLT);

  14638  6 002224   000000 470400 xsym               LDP0    VX_CURR$
         6 002225   000054 235110                    LDA     44,X0,PR0
         6 002226   000002 035007                    ADLA    2,DL
         6 002227   200111 755100                    STA     K,,AUTO

      658    14639                      %ALLOCATE( PTR$=WHERE$, TYPE=J, SIZE=K );

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:127  
  14640  6 002230   200110 721100                    LXL1    J,,AUTO
         6 002231   000000 236011 xsym               LDQ     VX_M_ALL,X1
         6 002232   000000 136011 xsym               SBLQ    VX_M_FREE,X1
         6 002233   002246 604000 6                  TMI     s:14644
         6 002234   200111 116100                    CMPQ    K,,AUTO
         6 002235   002246 602000 6                  TNC     s:14644

  14641  6 002236   000000 236011 xsym               LDQ     VX_M_FREE,X1
         6 002237   000000 471411 xsym               LDP1    VX_M_BASE_PTR,X1
         6 002240   100000 633506                    EPPR3   0,QL,PR1
         6 002241   200032 453500                    STP3    WHERE$,,AUTO

  14642  6 002242   000000 236011 xsym               LDQ     VX_M_FREE,X1
         6 002243   200111 036100                    ADLQ    K,,AUTO
         6 002244   000000 756011 xsym               STQ     VX_M_FREE,X1

  14643  6 002245   002260 710000 6                  TRA     s:14647

  14644  6 002246   200111 631500                    EPPR1   K,,AUTO
         6 002247   200222 451500                    STP1    @LIBRARY_TYPE+24,,AUTO
         6 002250   200110 633500                    EPPR3   J,,AUTO
         6 002251   200221 453500                    STP3    @LIBRARY_TYPE+23,,AUTO
         6 002252   200032 634500                    EPPR4   WHERE$,,AUTO
         6 002253   200220 454500                    STP4    @LIBRARY_TYPE+22,,AUTO
         6 002254   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 002255   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 002256   000000 701000 xent               TSX1    VXA$GET
         6 002257   000000 011000                    NOP     0

      659    14646
      660    14647    5                 IF PRE_START$(REC) ~= ADDR(NIL) THEN DO;

  14647  6 002260   200120 720100                    LXL0    REC,,AUTO
         6 002261   200036 236110                    LDQ     PRE_START$,X0,AUTO
         6 002262   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002263   002274 600000 6                  TZE     s:14653

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:128  
      661    14648    5                     FIRST_START$ = PINCRW( PRE_START$(REC), 2*SIZEW(VXR$TMPLT) );

  14648  6 002264   000002 036003                    ADLQ    2,DU
         6 002265   200030 756100                    STQ     FIRST_START$,,AUTO

      662    14649    5                     FIRST_STOP$ = PINCRW( PRE_STOP$(REC), VX_CURR$ ->

  14649  6 002266   000000 470400 xsym               LDP0    VX_CURR$
         6 002267   000054 721110                    LXL1    44,X0,PR0
         6 002270   200050 471510                    LDP1    PRE_STOP$,X0,AUTO
         6 002271   100002 633511                    EPPR3   2,X1,PR1
         6 002272   200031 453500                    STP3    FIRST_STOP$,,AUTO

      663    14650    5                             VX$NODE.L_SIZE_A(REC) + 2*SIZEW(VXR$TMPLT) );
      664    14651    5                    END;

  14651  6 002273   002304 710000 6                  TRA     s:14666

      665    14652    5                 ELSE DO;

      666    14653    5                     FIRST_START$ = PINCRW( WHERE$, 2*SIZEW(VXR$TMPLT) );

  14653  6 002274   200032 236100                    LDQ     WHERE$,,AUTO
         6 002275   000002 036003                    ADLQ    2,DU
         6 002276   200030 756100                    STQ     FIRST_START$,,AUTO

      667    14654    5                     FIRST_STOP$ = PINCRW( WHERE$, VX_CURR$ ->

  14654  6 002277   000000 470400 xsym               LDP0    VX_CURR$
         6 002300   000054 721110                    LXL1    44,X0,PR0
         6 002301   000002 636011                    EAQ     2,X1
         6 002302   200032 036100                    ADLQ    WHERE$,,AUTO
         6 002303   200031 756100                    STQ     FIRST_STOP$,,AUTO

      668    14655    5                             VX$NODE.L_SIZE_A(REC) + 2*SIZEW(VXR$TMPLT) );
      669    14656    5                    END;

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:129  
      670    14657
      671    14658    4                 CALL VXU$MERGE( FIRST_START$,
      672    14659    4                         FIRST_STOP$,
      673    14660    4                         VX_CURR$ -> VX$NODE.L_START.RN$,
      674    14661    4                         VX_CURR$ -> VX$NODE.L_START_A$(REC),
      675    14662    4                         VX_CURR$ -> VX$NODE.L_STOP_A$(REC),
      676    14663    4                         VX_CURR$ -> VX$NODE.L_START.RN$,
      677    14664    4                         PRE_START$(REC),
      678    14665    4                         PRE_STOP$(REC),
      679    14666    4                         SIZEW(VXR$TMPLT),

  14666  6 002304   000012 237000 7                  LDAQ    10
         6 002305   200230 757100                    STAQ    @LIBRARY_TYPE+30,,AUTO
         6 002306   200050 631510                    EPPR1   PRE_STOP$,X0,AUTO
         6 002307   200227 451500                    STP1    @LIBRARY_TYPE+29,,AUTO
         6 002310   200036 633510                    EPPR3   PRE_START$,X0,AUTO
         6 002311   200226 453500                    STP3    @LIBRARY_TYPE+28,,AUTO
         6 002312   000000 236000 xsym               LDQ     VX_CURR$
         6 002313   000032 036003                    ADLQ    26,DU
         6 002314   200225 756100                    STQ     @LIBRARY_TYPE+27,,AUTO
         6 002315   200120 236100                    LDQ     REC,,AUTO
         6 002316   000022 736000                    QLS     18
         6 002317   000042 036003                    ADLQ    34,DU
         6 002320   000000 036000 xsym               ADLQ    VX_CURR$
         6 002321   200224 756100                    STQ     @LIBRARY_TYPE+26,,AUTO
         6 002322   200120 236100                    LDQ     REC,,AUTO
         6 002323   000022 736000                    QLS     18
         6 002324   000030 036003                    ADLQ    24,DU
         6 002325   000000 036000 xsym               ADLQ    VX_CURR$
         6 002326   200223 756100                    STQ     @LIBRARY_TYPE+25,,AUTO
         6 002327   000000 236000 xsym               LDQ     VX_CURR$
         6 002330   000032 036003                    ADLQ    26,DU
         6 002331   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 002332   200031 634500                    EPPR4   FIRST_STOP$,,AUTO
         6 002333   200221 454500                    STP4    @LIBRARY_TYPE+23,,AUTO
         6 002334   200030 635500                    EPPR5   FIRST_START$,,AUTO
         6 002335   200220 455500                    STP5    @LIBRARY_TYPE+22,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:130  
         6 002336   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 002337   000066 631400 7                  EPPR1   54
         6 002340   000000 701000 xent               TSX1    VXU$MERGE
         6 002341   000000 011000                    NOP     0

      680    14667    4                         0    );
      681    14668    4                 VX_CURR$ -> VX$NODE.L_START_A$(REC) = FIRST_START$;

  14668  6 002342   200030 236100                    LDQ     FIRST_START$,,AUTO
         6 002343   000000 470400 xsym               LDP0    VX_CURR$
         6 002344   200120 720100                    LXL0    REC,,AUTO
         6 002345   000030 756110                    STQ     24,X0,PR0

      682    14669    4                 VX_CURR$ -> VX$NODE.L_STOP_A$(REC) = FIRST_STOP$;

  14669  6 002346   200031 236100                    LDQ     FIRST_STOP$,,AUTO
         6 002347   000000 470400 xsym               LDP0    VX_CURR$
         6 002350   000042 756110                    STQ     34,X0,PR0

      683    14670    4                 VX_CURR$ -> VX$NODE.L_SIZE_A(REC) = POFFW( FIRST_STOP$,

  14670  6 002351   200030 235100                    LDA     FIRST_START$,,AUTO
         6 002352   000022 771000                    ARL     18
         6 002353   200220 755100                    STA     @LIBRARY_TYPE+22,,AUTO
         6 002354   200031 236100                    LDQ     FIRST_STOP$,,AUTO
         6 002355   000022 772000                    QRL     18
         6 002356   200220 136100                    SBLQ    @LIBRARY_TYPE+22,,AUTO
         6 002357   000001 036007                    ADLQ    1,DL
         6 002360   000000 470400 xsym               LDP0    VX_CURR$
         6 002361   000054 756110                    STQ     44,X0,PR0

      684    14671    4                         FIRST_START$ ) + SIZEW( VXR$TMPLT );
      685    14672    4                END;                       /* If START$ ~= addr(nil) then do; */

  14672  6 002362   002374 710000 6                  TRA     s:14678

      686    14673    4             ELSE DO;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:131  

      687    14674    4                 VX_CURR$ -> VX$NODE.L_START_A$(REC) = PRE_START$(REC);

  14674  6 002363   200120 721100                    LXL1    REC,,AUTO
         6 002364   200036 236111                    LDQ     PRE_START$,X1,AUTO
         6 002365   000030 756111                    STQ     24,X1,PR0

      688    14675    4                 VX_CURR$ -> VX$NODE.L_STOP_A$(REC) = PRE_STOP$(REC);

  14675  6 002366   200050 236111                    LDQ     PRE_STOP$,X1,AUTO
         6 002367   000000 470400 xsym               LDP0    VX_CURR$
         6 002370   000042 756111                    STQ     34,X1,PR0

      689    14676    4                 VX_CURR$ -> VX$NODE.L_SIZE_A(REC) = PRE_SIZE(REC);

  14676  6 002371   000000 470400 xsym               LDP0    VX_CURR$
         6 002372   200124 235111                    LDA     PRE_SIZE,X1,AUTO
         6 002373   000054 755111                    STA     44,X1,PR0

      690    14677    4                END;                       /* Else do; */

      691    14678    3            END;                       /* Do L=1 to sizew( VX_REF_REC_A ) - 1; */

  14678  6 002374   200112 235100                    LDA     L,,AUTO
         6 002375   000001 035007                    ADLA    1,DL
         6 002376   200112 755100                    STA     L,,AUTO
         6 002377   200112 235100                    LDA     L,,AUTO
         6 002400   000003 115007                    CMPA    3,DL
         6 002401   002143 602000 6                  TNC     s:14619

      692    14679    3         IF REC = %TYPEREF THEN DO;

  14679  6 002402   200120 236100                    LDQ     REC,,AUTO
         6 002403   000005 116007                    CMPQ    5,DL
         6 002404   002433 601000 6                  TNZ     s:14690

      693    14680    3             CAND_P$ = VX_CURR$ -> VX$NODE.L_START.ER$;
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:132  

  14680  6 002405   000000 470400 xsym               LDP0    VX_CURR$
         6 002406   000035 236100                    LDQ     29,,PR0
         6 002407   200034 756100                    STQ     CAND_P$,,AUTO

      694    14681    3             CAND_Q$ = VX_CURR$ -> VX$NODE.L_STOP.ER$;

  14681  6 002410   000047 236100                    LDQ     39,,PR0
         6 002411   200035 756100                    STQ     CAND_Q$,,AUTO

      695    14682    4             DO WHILE( CAND_P$ <= CAND_Q$ );

  14682  6 002412   200034 116100                    CMPQ    CAND_P$,,AUTO
         6 002413   002433 602000 6                  TNC     s:14690

      696    14683    4                 IF CAND_P$ -> VXR$TMPLT.SREF THEN

  14683  6 002414   200034 470500                    LDP0    CAND_P$,,AUTO
         6 002415   000000 236100                    LDQ     0,,PR0
         6 002416   400000 316007                    CANQ    -131072,DL
         6 002417   002423 600000 6                  TZE     s:14686

      697    14684    4                     CAND_P$ -> VXR$TMPLT.STATE = '1'B/*@TRUE_B*/;

  14684  6 002420   100000 236007                    LDQ     32768,DL
         6 002421   000000 256100                    ORSQ    0,,PR0
         6 002422   002425 710000 6                  TRA     s:14687

      698    14685    4                 ELSE
      699    14686    4                     CAND_P$ -> VXR$TMPLT.STATE = '0'B/*@FALSE_B*/;

  14686  6 002423   000010 236000 7                  LDQ     8
         6 002424   000000 356100                    ANSQ    0,,PR0

      700    14687    4                 CAND_P$ = PINCRW( CAND_P$, SIZEW( VXR$TMPLT ) );

  14687  6 002425   200034 236100                    LDQ     CAND_P$,,AUTO
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:133  
         6 002426   000001 036003                    ADLQ    1,DU
         6 002427   200034 756100                    STQ     CAND_P$,,AUTO

      701    14688    4                END;                       /* Do while( CAND_P$ <= CAND_Q$ ); */

  14688  6 002430   200035 116100                    CMPQ    CAND_Q$,,AUTO
         6 002431   002414 602000 6                  TNC     s:14683
         6 002432   002414 600000 6                  TZE     s:14683

      702    14689    3            END;                           /* If rec = typeref then do; */

      703    14690    3         DO L = %TYPEDEF TO %TYPSEGREF;

  14690  6 002433   000004 235007                    LDA     4,DL
         6 002434   200112 755100                    STA     L,,AUTO

      704    14691    4             IF POST_START$(L) ~= ADDR(NIL) THEN DO;

  14691  6 002435   200112 720100                    LXL0    L,,AUTO
         6 002436   200062 236110                    LDQ     POST_START$,X0,AUTO
         6 002437   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 002440   002463 600000 6                  TZE     s:14697

      705    14692    4                 SIZE = POFFW( POST_STOP$(L), POST_START$(L) ) + VX_REC_SIZE_A(L);

  14692  6 002441   200062 236110                    LDQ     POST_START$,X0,AUTO
         6 002442   000022 772000                    QRL     18
         6 002443   200220 756100                    STQ     @LIBRARY_TYPE+22,,AUTO
         6 002444   200074 236110                    LDQ     POST_STOP$,X0,AUTO
         6 002445   000022 772000                    QRL     18
         6 002446   200220 136100                    SBLQ    @LIBRARY_TYPE+22,,AUTO
         6 002447   000000 036010 xsym               ADLQ    VX_REC_SIZE_A,X0
         6 002450   200121 756100                    STQ     SIZE,,AUTO

      706    14693    4                 CALL VXF$FREE( VX_PASS1_LIB_ALL_TYPE(L),

  14693  6 002451   000006 236000 7                  LDQ     6
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:134  
         6 002452   200222 756100                    STQ     @LIBRARY_TYPE+24,,AUTO
         6 002453   200121 630500                    EPPR0   SIZE,,AUTO
         6 002454   200221 450500                    STP0    @LIBRARY_TYPE+23,,AUTO
         6 002455   000000 631410 xsym               EPPR1   VX_PASS1_LIB_ALL_TYPE,X0
         6 002456   200220 451500                    STP1    @LIBRARY_TYPE+22,,AUTO
         6 002457   200220 630500                    EPPR0   @LIBRARY_TYPE+22,,AUTO
         6 002460   000021 631400 xsym               EPPR1   B_VECTNIL+17
         6 002461   000000 701000 xent               TSX1    VXF$FREE
         6 002462   000000 011000                    NOP     0

      707    14694    4                         SIZE,
      708    14695    4                         1    );
      709    14696    4                END;                       /* If POST_START$(L) ~= addr(nil) ... */

      710    14697    3            END;                           /* Do l = @ED to @ER; */

  14697  6 002463   200112 235100                    LDA     L,,AUTO
         6 002464   000001 035007                    ADLA    1,DL
         6 002465   200112 755100                    STA     L,,AUTO
         6 002466   000012 115007                    CMPA    10,DL
         6 002467   002435 602000 6                  TNC     s:14691

      711    14698    2         RETURN;

  14698  6 002470   200170 221300                    LDX1  ! OPEN_LAST_NAME+9,,AUTO
         6 002471   000001 702211                    TSX2  ! 1,X1

      712    14699
      713    14700
      714    14701    2   NO_HEAD:
      715    14702        /*E*  ERROR: VXO-E$BAD_PRIVATE_LIB_FILE_STR_VX-0
      716    14703                   MESSAGE: Invalid private library structure; inversion is incomplete.
      717    14704                   DESCRIPTION: Self-explanatory.
      718    14705        */
      719    14706             %SCREAM( ERR#=E$BAD_PRIVATE_LIB_FILE_STR_VX, MID="'O'", AUX=@E$OUOF_VX, LEVEL=
             14706                  @E$S_VX );

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:135  
  14707  6 002472   000072 630400 7     NO_HEAD      EPPR0   58
         6 002473   000022 631400 xsym               EPPR1   B_VECTNIL+18
         6 002474   000000 701000 xent               TSX1    VXE$ERROR
         6 002475   000000 011000                    NOP     0

      720    14709    2         ALTRETURN;

  14709  6 002476   200170 221300                    LDX1  ! OPEN_LAST_NAME+9,,AUTO
         6 002477   000000 702211                    TSX2  ! 0,X1

      721    14710
      722    14711    2   END READ_FILE;
      723    14712
      724    14713    1   CHECK_DUP: PROC;

  14713  6 002500   200170 741300       CHECK_DUP    STX1  ! OPEN_LAST_NAME+9,,AUTO

      725    14714    2   DCL SAVE_BUF CHAR (87);
      726    14715
      727    14716    2         SAVE_BUF = LLMU_BUF;

  14716  6 002501   040100 100400                    MLR     fill='040'O
         6 002502   000230 000127 2                  ADSC9   LLMU_BUF                 cn=0,n=87
         6 002503   200171 000127                    ADSC9   SAVE_BUF,,AUTO           cn=0,n=87

      728    14717    2         CALL M$REW (REW_LLMU);

  14717  6 002504   000134 630400 2                  EPPR0   REW_LLMU
         6 002505   040006 713400                    CLIMB   16390
         6 002506   400000 401760                    pmme    nvectors=1

      729    14718    2   AGAIN:
      730    14719    3         CALL M$READ (READ_LLMU) WHENALTRETURN DO;

  14719  6 002507   000154 630400 2     AGAIN        EPPR0   READ_LLMU
         6 002510   440000 713400                    CLIMB   alt,read
         6 002511   401400 401760                    pmme    nvectors=4
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:136  
         6 002512   002514 702000 6                  TSX2    s:14720
         6 002513   002521 710000 6                  TRA     s:14723

      731    14720    3             LLMU_BUF = SAVE_BUF;

  14720  6 002514   040000 100500                    MLR     fill='040'O
         6 002515   200171 000127                    ADSC9   SAVE_BUF,,AUTO           cn=0,n=87
         6 002516   000230 000127 2                  ADSC9   LLMU_BUF                 cn=0,n=87

      732    14721    3             RETURN;

  14721  6 002517   200170 221300                    LDX1  ! OPEN_LAST_NAME+9,,AUTO
         6 002520   000001 702211                    TSX2  ! 1,X1

      733    14722    3            END;
      734    14723    2         IF LLMU_BUF = SAVE_BUF THEN CALL M$DELREC (DEL_LLMU);

  14723  6 002521   040100 106400                    CMPC    fill='040'O
         6 002522   000230 000127 2                  ADSC9   LLMU_BUF                 cn=0,n=87
         6 002523   200171 000127                    ADSC9   SAVE_BUF,,AUTO           cn=0,n=87
         6 002524   002530 601000 6                  TNZ     s:14724

  14723  6 002525   000142 630400 2                  EPPR0   DEL_LLMU
         6 002526   040002 713400                    CLIMB   16386
         6 002527   401400 401760                    pmme    nvectors=4

      735    14724    2         GOTO AGAIN;

  14724  6 002530   002507 710000 6                  TRA     AGAIN
      736    14725    2   END CHECK_DUP;
      737    14726
      738    14727    1   END VXO$SATREF;

PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:137  
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXO$SATREF.
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:138  

 **** Variables and constants ****

  ****  Section 002  Data  VXO$SATREF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   172-0-0/d STRC(1080)  r     1 CLOSE_LLMU                 0-0-0/w STRC(648)   r     1 DEFAULT_FILE
   142-0-0/d STRC(360)   r     1 DEL_LLMU                  22-0-0/w BIT         r     1 FIRST_TIME
   230-0-0/c CHAR(87)    r     1 LLMU_BUF                 116-0-0/c STRC(72)    r     1 LLMU_FILE_NAME
    24-0-0/d STRC(2088)  r     1 OPEN_LLMU                154-0-0/d STRC(504)   r     1 READ_LLMU
   134-0-0/d STRC(216)   r     1 REW_LLMU                 120-0-0/d STRC(432)   r     1 WRITE_LLMU

  ****  Section 004 RoData VXO$SATREF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   264-0-0/d STRC(1080)  r     1 FPT_CLOSE_NEXT             0-0-0/d STRC(2088)  r     1 FPT_OPEN_FIRST
   262-0-0/c STRC(72)    r     1 FPT_OPEN_FIRST_ACCT      256-0-0/c STRC(54)    r     1 FPT_OPEN_FIRST_NAME
    72-0-0/d STRC(2088)  r     1 FPT_OPEN_LAST            260-0-0/c STRC(63)    r     1 FPT_OPEN_LAST_NAME
   164-0-0/d STRC(2088)  r     1 FPT_OPEN_NEXT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   171-0-0/w PTR         r     1 @LIBRARY_FILE            172-0-0/w PTR         r     1 @LIBRARY_TYPE
   140-0-0/w UBIN        r     1 BIN_HIGH                 137-0-0/w UBIN        r     1 BIN_LOW
   141-0-0/w UBIN        r     1 BIN_MID                  147-0-0/w PTR         r     1 BIN_N$
   142-0-0/w PTR         r     1 BIN_NTEMP$               146-0-0/w PTR         r     1 BIN_RESULT$
   144-0-0/w PTR         r     1 BIN_START$               143-0-0/w PTR         r     1 BIN_START1$
   145-0-0/w PTR         r     1 BIN_STOP$                 34-0-0/w PTR         r     1 CAND_P$
    35-0-0/w PTR         r     1 CAND_Q$                  106-0-0/w UBIN        r     1 CODE
    15-0-0/w PTR         r     1 CURR$                    116-0-0/w UBIN        r     1 DEF_RTYPE
   156-0-0/c CHAR        r     1 DOT_BLK                   14-0-0/w PTR         r     1 FCURR$
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:139  
     4-0-0/w BIT         r     1 FIRST_DEFAULT             30-0-0/w PTR         r     1 FIRST_START$
    31-0-0/w PTR         r     1 FIRST_STOP$              107-0-0/w UBIN        r     1 I
   110-0-0/w UBIN        r     1 J                        111-0-0/w UBIN        r     1 K
   112-0-0/w UBIN        r     1 L                         *0-0-0/w BIT         r     1 LIBRARY_FILE
    *0-0-0/w UBIN        r     1 LIBRARY_TYPE             154-0-0/c CHAR(8)     r     1 LIB_ACCT
    16-0-0/w PTR         r     1 NAM$                     153-0-0/w PTR         r     1 ND$
    10-0-0/w PTR         r     1 NEW_FILE$                 33-0-0/w PTR         r     1 NEXT$
   157-0-0/c STRC(288)   r     1 OPEN_LAST_NAME             5-0-0/w PTR         r     1 P$
    62-0-0/w PTR         r     1 POST_START$(0:9)
    74-0-0/w PTR         r     1 POST_STOP$(0:9)
   124-0-0/w UBIN        r     1 PRE_SIZE(0:9)
    36-0-0/w PTR         r     1 PRE_START$(0:9)
    50-0-0/w PTR         r     1 PRE_STOP$(0:9)
     6-0-0/w PTR         r     1 Q$                       120-0-0/w UBIN        r     1 REC
    11-0-0/w PTR         r     1 REF$                      13-0-0/w PTR         r     1 REF_NAME$
   117-0-0/w UBIN        r     1 REF_RTYPE                 12-0-0/w PTR         r     1 REF_STOP$
    24-0-0/w PTR         r     1 RN$                       21-0-0/w PTR         r     1 RSTOP$
   171-0-0/c CHAR(87)    r     1 SAVE_BUF                 121-0-0/w UBIN        r     1 SIZE
   136-0-0/w SBIN        r     1 SIZE_AVAIL               111-0-0/w SBIN        r     1 SK
   123-0-0/w UBIN        r     1 SOURCE                    20-0-0/w PTR         r     1 START$
   122-0-0/w UBIN        r     1 STATE                     32-0-0/w PTR         r     1 WHERE$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 M$OF$
     0-0-0/w PTR         r     1 VX_CURR$
     0-0-0/w UBIN        r     1 VX_DEF_REC_A(0:3)
     0-0-0/w STRC(720)   r     1 VX_EFIELD1
     0-0-0/w UBIN        r     1 VX_INHIBIT_COMPACTION
     0-0-0/w SBIN        r     1 VX_IO_SIZEC                0-0-0/w SBIN        r     1 VX_IO_STATUS
     0-0-0/w BIT         r     1 VX_LIBRARY_PROBE           0-0-0/b BIT         r     1 VX_LIB_USED
     0-0-0/w STRC(288)   r     1 VX_L_REC_BUF
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:140  
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w STRC(4572)  r     1 VX_O                       0-0-0/w STRC(1044)  r     1 VX_OU_HEAD
     0-0-0/w STRC(4617)  r     1 VX_O_KEY_BUF               0-0-0/c CHAR        r     1 VX_O_KEY_HEAD
     0-0-0/w SBIN        r     1 VX_PASS1_ALL_TYPE(0:9)
     0-0-0/w SBIN        r     1 VX_PASS1_LIB_ALL_TYPE(0:9)
     0-0-0/w SBIN        r     1 VX_REC_SIZE_A(0:15)
     0-0-0/w SBIN        r     1 VX_REF_MATCH_A(0:9)
     0-0-0/w UBIN        r     1 VX_REF_REC_A(0:3)
     0-0-0/w UBIN        r     1 VX_RN_THRESHOLD            0-0-0/w PTR         r     1 VX_ROOT$
     0-0-0/w PTR         r     1 VX_SLIB_INIT$              0-0-0/w UBIN        r     1 VX_SOURCE_COUNT
     0-0-0/w UBIN        r     1 VX_TARGET_COUNT            0-0-0/w UBIN        r     1 VX_TREE_SLIB_NAME

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w ASTR(18)    r     1 B$DNAME
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/c CHAR(8)     r     1 LIB_ACCT_B                 0-0-0N  NULL        r     1 M$LLMU
     0-0-0N  NULL        r     1 M$OF                       0-0-0/c STRC(63)    r     1 NODE
     0-0-0/w ASTR(9)     r     1 T$C                        0-0-0/c ASTR(9)     r     1 T$C_UNAL
     0-0-0/w STRC(648)   r     1 VX$LST                     0-0-0/w STRC(3672)  r     1 VX$NODE
     0-0-0/w STRC(72)    r     1 VX$TMPLT                   0-0-0/w STRC(72)    r     1 VXD$TMPLT
     0-0-0/w STRC        r     1 VXR$TMPLT


   Procedure VXO$SATREF requires 1369 words for executable code.
   Procedure VXO$SATREF requires 154 words of local(AUTO) storage.

    No errors detected in file VXO$SATREF.:E05TSI    .
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:141  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:142  
          MINI XREF LISTING

AGAIN IN PROCEDURE CHECK_DUP
     14719**LABEL   14724--GOTO
B$ALT.CODE
     14083**DCL     14083--REDEF   14084--REDEF   14084--REDEF
B$ALT.ERR.CODE
     14085**DCL     14345>>ASSIGN
B$ALT.ERR.ERR#
     14085**DCL     14085--REDEF
B$ALT.EVID
     14084**DCL     14084--REDEF   14084--REDEF
B$DNAME.COUNT
     12986**DCL     12993--IMP-SIZ 14192>>IF      14192>>IF      14195>>IF      14195>>IF      14212>>IF
     14212>>IF      14218>>IF      14218>>IF      14251>>IF      14251>>IF      14267>>IF      14267>>IF
     14377>>ASSIGN  14378>>ASSIGN  14396>>CALLBLT
B$DNAME.TEXT
     12993**DCL     14192>>IF      14192>>IF      14195>>IF      14195>>IF      14212>>IF      14212>>IF
     14218>>IF      14218>>IF      14251>>IF      14251>>IF      14267>>IF      14267>>IF      14378>>ASSIGN
     14396>>CALLBLT
B$TCB.ALT$
     14079**DCL     14345>>ASSIGN
B$TCB$
      8911**DCL     14345>>ASSIGN
BIN_CHECK
     14221**LABEL   14216--GOTO
BIN_FOUND
     14239**LABEL   14197--GOTO
BIN_HIGH
     13167**DCL     14206<<ASSIGN  14209>>ASSIGN  14221<<ASSIGN  14223>>IF
BIN_LOW
     13166**DCL     14205<<ASSIGN  14209>>ASSIGN  14215<<ASSIGN  14223>>IF
BIN_MID
     13168**DCL     14209<<ASSIGN  14210>>ASSIGN  14215>>ASSIGN  14221>>ASSIGN
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:143  
BIN_N$
     13183**DCL     14173<<ASSIGN  14191>>ASSIGN  14211>>ASSIGN  14251>>IF      14251>>IF      14267>>IF
     14267>>IF
BIN_NTEMP$
     13169**DCL     14191<<ASSIGN  14192>>IF      14192>>IF      14195>>IF      14195>>IF      14211<<ASSIGN
     14212>>IF      14212>>IF      14218>>IF      14218>>IF
BIN_RESULT$
     13182**DCL     14189<<ASSIGN  14190>>DOWHILE 14191>>ASSIGN  14200<<ASSIGN  14200>>ASSIGN  14210<<ASSIGN
     14211>>ASSIGN  14239>>IF      14241>>ASSIGN  14243>>ASSIGN  14249>>ASSIGN  14265>>ASSIGN
BIN_SPLIT
     14207**LABEL   14223--GOTO
BIN_START$
     13180**DCL     14171<<ASSIGN  14187>>IF      14188>>IF      14189>>ASSIGN  14206>>ASSIGN  14207>>ASSIGN
     14250>>DOWHILE
BIN_START1$
     13170**DCL     14207<<ASSIGN  14210>>ASSIGN
BIN_STOP$
     13181**DCL     14172<<ASSIGN  14188>>IF      14190>>DOWHILE 14206>>ASSIGN  14266>>DOWHILE
CAND_P$
     13100**DCL     14129<<ASSIGN  14131>>DOWHILE 14132>>IF      14133>>ASSIGN  14135>>ASSIGN  14136<<ASSIGN
     14136>>ASSIGN  14623<<ASSIGN  14625>>DOWHILE 14626>>ASSIGN  14627<<ASSIGN  14627>>ASSIGN  14680<<ASSIGN
     14682>>DOWHILE 14683>>IF      14684>>ASSIGN  14686>>ASSIGN  14687<<ASSIGN  14687>>ASSIGN
CAND_Q$
     13101**DCL     14130<<ASSIGN  14131>>DOWHILE 14624<<ASSIGN  14625>>DOWHILE 14681<<ASSIGN  14682>>DOWHILE
CHECK_DUP
     14713**PROC    14404--CALL
CHECK_FCURR
     14322**LABEL   14329--CALLALT 14456--GOTO
CLOSE_LLMU
     13837**DCL     14477<>CALL
CLOSE_LLMU.SN_
     13837**DCL     13837--REDEF
CLOSE_LLMU.UTL_
     13838**DCL     13838--REDEF
CLOSE_LLMU.V
     13842**DCL     13837--DCLINIT
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:144  
CLOSE_LLMU.V.EXPIRE#
     13852**DCL     13852--REDEF
CLOSE_LLMU.V.TYPE#
     13850**DCL     13850--REDEF
CLOSE_LLMU.V.XTNSIZE#
     13847**DCL     13847--REDEF   13849--REDEF
CODE
     13106**DCL     14345<<ASSIGN  14346>>IF
CURR$
     13085**DCL     14168<<ASSIGN  14171>>ASSIGN  14172>>ASSIGN  14173>>ASSIGN  14283<<ASSIGN  14283>>ASSIGN
     14284>>IF
DEFAULT_FILE
     12830**DCL     14494--ASSIGN
DEFAULT_FILE.LIB.NEEDED
     12841**DCL     14094<<ASSIGN
DEFAULT_FILE.OBJECT_NAME$
     12834**DCL     12835--REDEF
DEFAULT_FILE.P.ACCT_
     12848**DCL     14095<<ASSIGN
DEFAULT_FILE.P.ASN
     12874**DCL     14102<<ASSIGN
DEFAULT_FILE.P.B.ACCT
     12871**DCL     14101<<ASSIGN
DEFAULT_FILE.P.B.ASN
     12870**DCL     14100<<ASSIGN
DEFAULT_FILE.P.B.RES
     12869**DCL     14099<<ASSIGN
DEFAULT_FILE.P.NAME_
     12843**DCL     14367<<ASSIGN
DEFAULT_FILE.P.PASS_
     12853**DCL     14096<<ASSIGN
DEFAULT_FILE.P.SN_
     12858**DCL     14097<<ASSIGN
DEFAULT_FILE.P.WSN_
     12863**DCL     14098<<ASSIGN
DEFAULT_FILE.SC_HEAD$
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:145  
     12836**DCL     12837--REDEF
DEFAULT_FILE.SC_TAIL$
     12838**DCL     12839--REDEF
DEF_RTYPE
     13136**DCL     14111<<ASSIGN  14112>>ASSIGN  14113>>IF      14114>>CALL    14114>>CALL    14163<<ASSIGN
     14171>>ASSIGN  14172>>ASSIGN  14239>>IF      14254>>IF      14270>>IF
DEL_LLMU
     13765**DCL     14723<>CALL
DEL_LLMU.V
     13768**DCL     13765--DCLINIT
DOT_BLK
     13866**DCL     14390<<ASSIGN  14394<<ASSIGN  14396>>CALLBLT
DO_DEFAULT
     14333**LABEL   14327--GOTO    14349--GOTO
F$DCB.ACTPOS
     14054**DCL     14054--REDEF
F$DCB.ARS#
     14028**DCL     14028--REDEF
F$DCB.ATTR
     14047**DCL     14048--REDEF
F$DCB.BORROW
     14062**DCL     14062--REDEF   14062--REDEF   14062--REDEF
F$DCB.DCBNAME.L
     14076**DCL     14076--IMP-SIZ
F$DCB.EOMCHAR#
     14032**DCL     14032--REDEF
F$DCB.FLDID
     14057**DCL     14057--REDEF
F$DCB.FORM$
     14051**DCL     14051--REDEF
F$DCB.FSECT
     14067**DCL     14067--REDEF
F$DCB.FSN#
     14044**DCL     14044--REDEF   14044--REDEF   14045--REDEF
F$DCB.HEADER$
     14050**DCL     14050--REDEF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:146  
F$DCB.IXTNSIZE#
     14048**DCL     14048--REDEF
F$DCB.LASTSTA$
     14037**DCL     14037--REDEF
F$DCB.LVL
     14063**DCL     14063--REDEF
F$DCB.NAME#
     14038**DCL     14336>>ASSIGN  14340>>IF
F$DCB.NAME#.C
     14038**DCL     14038--REDEF   14347>>IF      14352>>IF      14366>>ASSIGN
F$DCB.NAME#.L
     14038**DCL     14357>>ASSIGN  14365>>ASSIGN
F$DCB.NOEOF
     14060**DCL     14060--REDEF
F$DCB.NRECS#
     14049**DCL     14049--REDEF
F$DCB.NRECX
     14068**DCL     14068--REDEF
F$DCB.OHDR
     14060**DCL     14060--REDEF
F$DCB.ORG#
     14043**DCL     14043--REDEF
F$DCB.PRECNO
     14066**DCL     14066--REDEF
F$DCB.RCSZ
     14072**DCL     14072--REDEF
F$DCB.RES#
     14039**DCL     14039--REDEF
F$DCB.SETX
     14051**DCL     14051--REDEF
F$DCB.TAB$
     14051**DCL     14051--REDEF
F$DCB.TDA
     14065**DCL     14066--REDEF
F$DCB.WSN#
     14039**DCL     14039--REDEF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:147  
FCURR$
     13084**DCL     14154<<ASSIGN  14158<<ASSIGN  14324>>IF      14329<>CALL    14388>>IF      14389>>ASSIGN
     14396>>CALLBLT 14396>>CALLBLT 14449<>CALL    14450<<ASSIGN  14450>>ASSIGN  14453<<ASSIGN  14494>>IF
     14494<<ASSIGN  14496>>IF      14510>>ASSIGN  14514<>CALL    14542<>CALL
FIRST_DEFAULT
     13013**DCL     14151<<ASSIGN  14333>>IF      14334<<ASSIGN
FIRST_START$
     13096**DCL     14584<<ASSIGN  14589<<ASSIGN  14602<>CALL    14604>>ASSIGN  14606>>ASSIGN  14648<<ASSIGN
     14653<<ASSIGN  14666<>CALL    14668>>ASSIGN  14670>>ASSIGN
FIRST_STOP$
     13097**DCL     14585<<ASSIGN  14590<<ASSIGN  14602<>CALL    14605>>ASSIGN  14606>>ASSIGN  14649<<ASSIGN
     14654<<ASSIGN  14666<>CALL    14669>>ASSIGN  14670>>ASSIGN
FIRST_TIME
     13014**DCL     14092>>IF      14093<<ASSIGN
FPT_CLOSE_NEXT
     14002**DCL     14354<>CALL    14452<>CALL    14544<>CALL
FPT_CLOSE_NEXT.SN_
     14002**DCL     14002--REDEF
FPT_CLOSE_NEXT.UTL_
     14003**DCL     14003--REDEF
FPT_CLOSE_NEXT.V
     14007**DCL     14002--DCLINIT
FPT_CLOSE_NEXT.V.EXPIRE#
     14017**DCL     14017--REDEF
FPT_CLOSE_NEXT.V.TYPE#
     14015**DCL     14015--REDEF
FPT_CLOSE_NEXT.V.XTNSIZE#
     14012**DCL     14012--REDEF   14014--REDEF
FPT_OPEN_FIRST
     13273**DCL     14337<>CALL
FPT_OPEN_FIRST.ACSVEH_
     13275**DCL     13276--REDEF
FPT_OPEN_FIRST.ALTKEYS_
     13281**DCL     13282--REDEF   13282--REDEF
FPT_OPEN_FIRST.HDR_
     13280**DCL     13281--REDEF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:148  
FPT_OPEN_FIRST.TAB_
     13279**DCL     13280--REDEF
FPT_OPEN_FIRST.UHL_
     13273**DCL     13274--REDEF   13274--REDEF
FPT_OPEN_FIRST.V
     13282**DCL     13273--DCLINIT
FPT_OPEN_FIRST.V.FSN#
     13313**DCL     13313--REDEF   13313--REDEF
FPT_OPEN_FIRST.WSN_
     13279**DCL     13279--REDEF
FPT_OPEN_FIRST_ACCT
     13973**DCL     13278--DCLINIT 13401--DCLINIT 14095--ASSIGN
FPT_OPEN_FIRST_NAME
     13896**DCL     13274--DCLINIT
FPT_OPEN_FIRST_NAME.NAME#
     13896**DCL     14347>>IF      14352>>IF
FPT_OPEN_LAST
     13396**DCL     14335<>CALL
FPT_OPEN_LAST.ACSVEH_
     13398**DCL     13399--REDEF
FPT_OPEN_LAST.ALTKEYS_
     13404**DCL     13405--REDEF   13405--REDEF
FPT_OPEN_LAST.HDR_
     13403**DCL     13404--REDEF
FPT_OPEN_LAST.TAB_
     13402**DCL     13403--REDEF
FPT_OPEN_LAST.UHL_
     13396**DCL     13397--REDEF   13397--REDEF
FPT_OPEN_LAST.V
     13405**DCL     13396--DCLINIT
FPT_OPEN_LAST.V.FSN#
     13436**DCL     13436--REDEF   13436--REDEF
FPT_OPEN_LAST.WSN_
     13402**DCL     13402--REDEF
FPT_OPEN_LAST_NAME
     13927**DCL     13397--DCLINIT
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:149  
FPT_OPEN_NEXT
     13515**DCL     14342<>CALL
FPT_OPEN_NEXT.ACSVEH_
     13517**DCL     13518--REDEF
FPT_OPEN_NEXT.ALTKEYS_
     13523**DCL     13524--REDEF   13524--REDEF
FPT_OPEN_NEXT.HDR_
     13522**DCL     13523--REDEF
FPT_OPEN_NEXT.TAB_
     13521**DCL     13522--REDEF
FPT_OPEN_NEXT.UHL_
     13515**DCL     13516--REDEF   13516--REDEF
FPT_OPEN_NEXT.V
     13524**DCL     13515--DCLINIT
FPT_OPEN_NEXT.V.FSN#
     13555**DCL     13555--REDEF   13555--REDEF
FPT_OPEN_NEXT.WSN_
     13521**DCL     13521--REDEF
I
     13124**DCL     13125--REDEF   14110<<DOINDEX 14111>>ASSIGN  14161<<DOINDEX 14162>>ASSIGN  14464<<DOINDEX
     14465>>ASSIGN
IO_ERROR
     14416**LABEL   14381--CALLALT
J
     13126**DCL     13127--REDEF   14466<<ASSIGN  14467>>ASSIGN  14469<>CALL    14573<<ASSIGN  14576>>IF
     14576>>IF      14577>>ASSIGN  14577>>ASSIGN  14578>>ASSIGN  14578>>ASSIGN  14580<>CALL    14637<<ASSIGN
     14640>>IF      14640>>IF      14641>>ASSIGN  14641>>ASSIGN  14642>>ASSIGN  14642>>ASSIGN  14644<>CALL
K
     13128**DCL     13129--REDEF   14357<<ASSIGN  14359>>IF      14361>>ASSIGN  14363<>CALL    14574<<ASSIGN
     14576>>IF      14578>>ASSIGN  14580<>CALL    14638<<ASSIGN  14640>>IF      14642>>ASSIGN  14644<>CALL
L
     13130**DCL     13131--REDEF   14526<<DOINDEX 14527>>ASSIGN  14527>>ASSIGN  14528>>ASSIGN  14528>>ASSIGN
     14529>>ASSIGN  14529>>ASSIGN  14530>>ASSIGN  14531>>ASSIGN  14532>>ASSIGN  14558<<DOINDEX 14559>>ASSIGN
     14559>>ASSIGN  14560>>ASSIGN  14560>>ASSIGN  14562<<DOINDEX 14563>>ASSIGN  14618<<DOINDEX 14619>>ASSIGN
     14690<<DOINDEX 14691>>IF      14692>>ASSIGN  14692>>ASSIGN  14692>>ASSIGN  14693>>CALL
LIBRARY_FILE IN PROCEDURE READ_FILE
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:150  
     14483**DCL     14481--PROC    14486>>IF      14535>>IF
LIBRARY_TYPE IN PROCEDURE READ_FILE
     14484**DCL     14481--PROC    14547>>DOCASE
LIB_ACCT
     13864**DCL     14389<<ASSIGN  14393<<ASSIGN  14396>>CALLBLT
LIB_ACCT_B
     13865**DCL     14389>>ASSIGN
LLMU_BUF
     13857**DCL     13724--DCLINIT 13725--DCLINIT 13792--DCLINIT 13793--DCLINIT 14396<<CALLBLT 14399--ASSIGN
     14716>>ASSIGN  14720<<ASSIGN  14723>>IF
LLMU_FILE_NAME
     13702**DCL     13632--DCLINIT
M$CLOSE
      5073**DCL-ENT 14354--CALL    14452--CALL    14477--CALL    14544--CALL
M$DELREC
      5075**DCL-ENT 14723--CALL
M$OF
     13194**DCL     14508<>CALL
M$OF$
     10646**DCL     14336>>ASSIGN  14340>>IF      14347>>IF      14352>>IF      14357>>ASSIGN  14365>>ASSIGN
     14366>>ASSIGN
M$OPEN
      5073**DCL-ENT 14107--CALL    14335--CALL    14337--CALL    14342--CALL
M$READ
      5074**DCL-ENT 14719--CALL
M$REW
      5076**DCL-ENT 14717--CALL
M$WRITE
      5074**DCL-ENT 14405--CALL
MAKE_TRANSITION
     14151**LABEL   14414--GOTO
NAM$
     13086**DCL     14376<<ASSIGN  14377>>ASSIGN  14378>>ASSIGN  14378>>ASSIGN  14396>>CALLBLT 14396>>CALLBLT
ND$
     13858**DCL     13859--IMP-PTR 14399<<ASSIGN  14400>>ASSIGN  14401>>CALLBLT 14402>>ASSIGN
NEW_FILE$
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:151  
     13080**DCL     14514<>CALL    14521>>ASSIGN  14523>>ASSIGN  14538<>CALL
NEXT$
     13099**DCL     14297<<ASSIGN  14298>>ASSIGN  14301>>IF      14302>>ASSIGN  14304<<ASSIGN  14304>>ASSIGN
     14308>>IF      14309>>ASSIGN  14316>>ASSIGN
NEXT_CANDIDATE
     14445**LABEL   14386--CALLALT
NEXT_REF
     14290**LABEL   14246--GOTO    14261--GOTO    14277--GOTO
NODE.LP
     13861**DCL     14400<<ASSIGN
NODE.NUM
     13862**DCL     14401<<CALLBLT
NODE.RP
     13863**DCL     14402<<ASSIGN
NONE_FOUND
     14464**LABEL   14125--GOTO
NONE_IN_LIST
     14459**LABEL   14308--GOTO    14325--GOTO    14341--GOTO    14346--GOTO    14350--GOTO    14355--GOTO
NOT_FOUND
     14283**LABEL   14187--GOTO    14198--GOTO    14202--GOTO    14231--GOTO    14269--GOTO
NO_HEAD IN PROCEDURE READ_FILE
     14707**LABEL   14492--CALLALT
OPEN_LAST_NAME
     13957**DCL     14336<<ASSIGN  14340>>IF
OPEN_LLMU
     13631**DCL     14107<>CALL
OPEN_LLMU.ACSVEH_
     13633**DCL     13634--REDEF
OPEN_LLMU.ALTKEYS_
     13639**DCL     13640--REDEF   13640--REDEF
OPEN_LLMU.HDR_
     13638**DCL     13639--REDEF
OPEN_LLMU.TAB_
     13637**DCL     13638--REDEF
OPEN_LLMU.UHL_
     13631**DCL     13632--REDEF   13632--REDEF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:152  
OPEN_LLMU.V
     13640**DCL     13631--DCLINIT
OPEN_LLMU.V.FSN#
     13671**DCL     13671--REDEF   13671--REDEF
OPEN_LLMU.V.FUN#
     13650**DCL     14106<<ASSIGN
OPEN_LLMU.WSN_
     13637**DCL     13637--REDEF
P$
     13076**DCL     14249<<ASSIGN  14250>>DOWHILE 14251>>IF      14251>>IF      14254>>IF      14256>>ASSIGN
     14258>>ASSIGN  14263<<ASSIGN  14263>>ASSIGN  14265<<ASSIGN  14266>>DOWHILE 14267>>IF      14267>>IF
     14270>>IF      14272>>ASSIGN  14274>>ASSIGN  14279<<ASSIGN  14279>>ASSIGN
POST_START$
     13104**DCL     14559<<ASSIGN  14691>>IF      14692>>ASSIGN
POST_STOP$
     13105**DCL     14560<<ASSIGN  14692>>ASSIGN
PRE_SIZE
     13142**DCL     14529<<ASSIGN  14612>>ASSIGN  14676>>ASSIGN
PRE_START$
     13102**DCL     14527<<ASSIGN  14583>>IF      14584>>ASSIGN  14602<>CALL    14610>>ASSIGN  14647>>IF
     14648>>ASSIGN  14666<>CALL    14674>>ASSIGN
PRE_STOP$
     13103**DCL     14528<<ASSIGN  14585>>ASSIGN  14602<>CALL    14611>>ASSIGN  14649>>ASSIGN  14666<>CALL
     14675>>ASSIGN
Q$
     13077**DCL     14360<<ASSIGN  14363<>CALL    14365>>ASSIGN  14366>>ASSIGN  14366>>ASSIGN  14367>>ASSIGN
     14367>>ASSIGN
READ_FILE
     14481**PROC    14386--CALL    14409--CALL    14413--CALL
READ_LLMU
     13790**DCL     14719<>CALL
READ_LLMU.STATION_
     13793**DCL     13794--REDEF
READ_LLMU.V
     13794**DCL     13790--DCLINIT
READ_LLMU.V.DVBYTE.REREAD#
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:153  
     13805**DCL     13805--REDEF
READ_LLMU.V.INDX#
     13803**DCL     13803--REDEF
REC
     13138**DCL     14563<<ASSIGN  14564>>ASSIGN  14566>>CALL    14573>>ASSIGN  14574>>ASSIGN  14583>>IF
     14584>>ASSIGN  14585>>ASSIGN  14585>>ASSIGN  14590>>ASSIGN  14602>>CALL    14602>>CALL    14602>>CALL
     14602>>CALL    14604>>ASSIGN  14605>>ASSIGN  14606>>ASSIGN  14610>>ASSIGN  14610>>ASSIGN  14611>>ASSIGN
     14611>>ASSIGN  14612>>ASSIGN  14612>>ASSIGN  14619<<ASSIGN  14620>>ASSIGN  14622>>IF      14630>>CALL
     14637>>ASSIGN  14638>>ASSIGN  14647>>IF      14648>>ASSIGN  14649>>ASSIGN  14649>>ASSIGN  14654>>ASSIGN
     14666>>CALL    14666>>CALL    14666>>CALL    14666>>CALL    14668>>ASSIGN  14669>>ASSIGN  14670>>ASSIGN
     14674>>ASSIGN  14674>>ASSIGN  14675>>ASSIGN  14675>>ASSIGN  14676>>ASSIGN  14676>>ASSIGN  14679>>IF
REF$
     13081**DCL     14164<<ASSIGN  14165>>IF      14167>>DOWHILE 14169>>ASSIGN  14245>>ASSIGN  14260>>ASSIGN
     14276>>ASSIGN  14290<<ASSIGN  14290>>ASSIGN  14298<<ASSIGN  14299>>DOWHILE 14300>>IF      14301>>IF
     14302>>ASSIGN  14306<<ASSIGN  14306>>ASSIGN  14372<<ASSIGN  14374>>DOWHILE 14376>>ASSIGN  14445<<ASSIGN
     14445>>ASSIGN
REF_NAME$
     13083**DCL     14149<<ASSIGN  14169>>ASSIGN  14376>>ASSIGN
REF_RTYPE
     13137**DCL     14112<<ASSIGN  14162<<ASSIGN  14163>>ASSIGN  14164>>ASSIGN  14166>>ASSIGN  14297>>ASSIGN
     14308>>IF      14309>>ASSIGN  14312>>CALL    14316>>ASSIGN  14317>>ASSIGN  14317>>ASSIGN  14372>>ASSIGN
     14373>>ASSIGN  14465<<ASSIGN  14466>>ASSIGN  14470>>ASSIGN  14471>>ASSIGN  14472>>ASSIGN  14473>>ASSIGN
REF_STOP$
     13082**DCL     14166<<ASSIGN  14167>>DOWHILE 14299>>DOWHILE
REW_LLMU
     13749**DCL     14717<>CALL
REW_LLMU.V
     13749**DCL     13749--DCLINIT
RN$
     13092**DCL     14169<<ASSIGN  14192>>IF      14192>>IF      14195>>IF      14195>>IF      14212>>IF
     14212>>IF      14218>>IF      14218>>IF      14251>>IF      14251>>IF      14267>>IF      14267>>IF
RSTOP$
     13089**DCL     14373<<ASSIGN  14374>>DOWHILE
SAVE_BUF IN PROCEDURE CHECK_DUP
     14714**DCL     14716<<ASSIGN  14720>>ASSIGN  14723>>IF
SEARCH_NODE
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:154  
     14171**LABEL   14284--GOTO
SIZE
     13139**DCL     14692<<ASSIGN  14693<>CALL
SIZE_AVAIL
     13159**DCL     14309<<ASSIGN  14312>>IF      14312<>CALL    14317>>ASSIGN
SK
     13129**DCL     14467<<ASSIGN  14468>>IF      14469<>CALL
SOURCE
     13141**DCL     14241<<ASSIGN  14243<<ASSIGN  14244>>IF      14256<<ASSIGN  14258<<ASSIGN  14259>>IF
     14272<<ASSIGN  14274<<ASSIGN  14275>>IF
START$
     13088**DCL     14564<<ASSIGN  14565>>IF      14566<>CALL    14620<<ASSIGN  14621>>IF      14630<>CALL
STATE
     13140**DCL     14153<<ASSIGN  14157<<ASSIGN  14322>>DOCASE  14326<<ASSIGN  14447>>DOCASE  14540>>DOCASE
T$C
     12898**DCL     14367--ASSIGN
T$C.CHARS
     12900**DCL     14366<<ASSIGN  14396>>CALLBLT
T$C.COUNT
     12899**DCL     12900--IMP-SIZ 14365<<ASSIGN  14366>>ASSIGN  14367>>ASSIGN  14396>>CALLBLT
T$C_UNAL.COUNT
     12902**DCL     12903--IMP-SIZ
TRY_BELOW
     14265**LABEL   14253--GOTO
VX$LST.LIB.NEEDED
     12772**DCL     14496>>IF      14510<<ASSIGN
VX$LST.LINK$
     12762**DCL     14450>>ASSIGN  14521<<ASSIGN
VX$LST.OBJECT_NAME$
     12765**DCL     12766--REDEF
VX$LST.P.ACCT_.ACCT$
     12783**DCL     14388>>IF      14389>>ASSIGN
VX$LST.P.NAME_.NAME$
     12778**DCL     14396>>CALLBLT 14396>>CALLBLT
VX$LST.SC_HEAD$
     12767**DCL     12768--REDEF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:155  
VX$LST.SC_TAIL$
     12769**DCL     12770--REDEF
VX$NODE.ADDR_START_A
     12438**DCL     12439--REDEF
VX$NODE.ADDR_STOP_A
     12443**DCL     12444--REDEF
VX$NODE.FATHER$
     12428**DCL     14283>>ASSIGN
VX$NODE.L_PREV_SIZE
     12496**DCL     12507--REDEF
VX$NODE.L_PREV_SIZE_A
     12507**DCL     14473<<ASSIGN
VX$NODE.L_SC_START
     12515**DCL     12520--REDEF
VX$NODE.L_SC_STOP
     12521**DCL     12526--REDEF
VX$NODE.L_SIZE
     12484**DCL     12495--REDEF
VX$NODE.L_SIZE.RN
     12487**DCL     14370>>IF
VX$NODE.L_SIZE_A
     12495**DCL     14317<<ASSIGN  14317>>ASSIGN  14472<<ASSIGN  14529>>ASSIGN  14532<<ASSIGN  14574>>ASSIGN
     14585>>ASSIGN  14590>>ASSIGN  14606<<ASSIGN  14612<<ASSIGN  14638>>ASSIGN  14649>>ASSIGN  14654>>ASSIGN
     14670<<ASSIGN  14676<<ASSIGN
VX$NODE.L_START
     12460**DCL     12471--REDEF
VX$NODE.L_START.DN$
     12462**DCL     14114<>CALL    14173>>ASSIGN  14566<>CALL    14602<>CALL    14602<>CALL
VX$NODE.L_START.ER$
     12466**DCL     14128>>IF      14129>>ASSIGN  14139<>CALL    14623>>ASSIGN  14680>>ASSIGN
VX$NODE.L_START.RN$
     12463**DCL     14139<>CALL    14149>>ASSIGN  14630<>CALL    14666<>CALL    14666<>CALL
VX$NODE.L_START_A$
     12471**DCL     14113>>IF      14114<>CALL    14164>>ASSIGN  14171>>ASSIGN  14297>>ASSIGN  14308>>IF
     14372>>ASSIGN  14470<<ASSIGN  14526--DOINDEX 14527>>ASSIGN  14530<<ASSIGN  14559>>ASSIGN  14564>>ASSIGN
     14602<>CALL    14604<<ASSIGN  14610<<ASSIGN  14620>>ASSIGN  14666<>CALL    14668<<ASSIGN  14674<<ASSIGN
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:156  
VX$NODE.L_STOP
     12472**DCL     12483--REDEF
VX$NODE.L_STOP.ER$
     12478**DCL     14130>>ASSIGN  14139<>CALL    14624>>ASSIGN  14681>>ASSIGN
VX$NODE.L_STOP_A$
     12483**DCL     14114<>CALL    14166>>ASSIGN  14172>>ASSIGN  14309>>ASSIGN  14316<<ASSIGN  14373>>ASSIGN
     14471<<ASSIGN  14528>>ASSIGN  14531<<ASSIGN  14560>>ASSIGN  14566<>CALL    14602<>CALL    14605<<ASSIGN
     14611<<ASSIGN  14630<>CALL    14666<>CALL    14669<<ASSIGN  14675<<ASSIGN
VX$NODE.NUM
     12436**DCL     14401>>CALLBLT
VX$NODE.PROMOTE_HEAD
     12527**DCL     12530--REDEF
VX$NODE.PROMOTE_TAIL
     12531**DCL     12534--REDEF
VX$NODE.SON$
     12426**DCL     14398>>IF
VX$NODE.START_PAGE#_A
     12448**DCL     12449--REDEF
VX$NODE.STOP_PAGE#_A
     12453**DCL     12454--REDEF
VX$NODE.TAIL$
     12432**DCL     14521>>ASSIGN  14523<<ASSIGN
VX$TMPLT.A
     12732**DCL     12733--REDEF   12734--REDEF   14191>>ASSIGN  14211>>ASSIGN
VXA$GET
     13041**DCL-ENT 14363--CALL    14580--CALL    14644--CALL
VXD$B2C
     13039**DCL-ENT 14429--CALL
VXD$TMPLT
     12569**DCL     14114--CALL    14188--IF      14200--ASSIGN  14206--ASSIGN  14207--ASSIGN  14210--ASSIGN
     14249--ASSIGN  14263--ASSIGN  14265--ASSIGN  14279--ASSIGN  14566--CALL    14574--ASSIGN  14584--ASSIGN
     14585--ASSIGN  14589--ASSIGN  14590--ASSIGN  14602--CALL    14606--ASSIGN
VXD$TMPLT.AD.ISADDR
     12592**DCL     12594--REDEF
VXD$TMPLT.AD.LFLAGS.SOURCE
     12578**DCL     14243>>ASSIGN  14258>>ASSIGN  14274>>ASSIGN
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:157  
VXD$TMPLT.CONSTNT
     12599**DCL     14239>>IF      14254>>IF      14270>>IF
VXD$TMPLT.LFLAGS
     12605**DCL     12618--REDEF
VXD$TMPLT.LFLAGS.SOURCE
     12612**DCL     14241>>ASSIGN  14256>>ASSIGN  14272>>ASSIGN
VXD$TMPLT.NPOINTER
     12596**DCL     14251>>IF      14251>>IF      14267>>IF      14267>>IF
VXD$TMPLT.VALUE
     12570**DCL     12572--REDEF
VXE$ERRMSG
     13035**DCL-ENT 14508--CALL
VXE$ERROR
     13032**DCL-ENT 14441--CALL    14707--CALL
VXF$CLOSE
     13048**DCL-ENT 14449--CALL    14542--CALL    14551--CALL    14555--CALL
VXF$FREE
     13042**DCL-ENT 14312--CALL    14469--CALL    14693--CALL
VXF$OPEN
     13047**DCL-ENT 14329--CALL    14549--CALL    14553--CALL
VXI$READ
     13051**DCL-ENT 14381--CALL    14492--CALL
VXO$COMPACT
     13058**DCL-ENT 14371--CALL
VXO$OBJECT
     13054**DCL-ENT 14538--CALL
VXO$RUN
     13055**DCL-ENT 14550--CALL    14554--CALL
VXQ$SORT
     13043**DCL-ENT 14114--CALL    14139--CALL    14566--CALL    14630--CALL
VXR$SAT.VALUE
     12701**DCL     12702--REDEF
VXR$TMPLT
     12660**DCL     14136--ASSIGN  14139--CALL    14290--ASSIGN  14302<<ASSIGN  14302>>ASSIGN  14304--ASSIGN
     14306--ASSIGN  14309--ASSIGN  14316--ASSIGN  14445--ASSIGN  14627--ASSIGN  14630--CALL    14638--ASSIGN
     14648--ASSIGN  14649--ASSIGN  14653--ASSIGN  14654--ASSIGN  14666--CALL    14670--ASSIGN  14687--ASSIGN
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:158  
VXR$TMPLT.GOT
     12666**DCL     12668--REDEF
VXR$TMPLT.NPOINTER
     12661**DCL     14169>>ASSIGN  14376>>ASSIGN
VXR$TMPLT.SREF
     12663**DCL     14132>>IF      14683>>IF
VXR$TMPLT.STATE
     12668**DCL     14133<<ASSIGN  14135<<ASSIGN  14245<<ASSIGN  14260<<ASSIGN  14276<<ASSIGN  14300>>IF
     14626<<ASSIGN  14684<<ASSIGN  14686<<ASSIGN
VXS$LST
     13056**DCL-ENT 14514--CALL
VXU$MERGE
     13057**DCL-ENT 14602--CALL    14666--CALL
VX_BIAS.A
      9576**DCL      9577--REDEF
VX_CBUF.CHARS_A
      9510**DCL      9511--REDEF
VX_CONST_DCB.ACTPOS
     10692**DCL     10692--REDEF
VX_CONST_DCB.ARS#
     10651**DCL     10651--REDEF
VX_CONST_DCB.ATTR#
     10681**DCL     10681--REDEF   10683--REDEF
VX_CONST_DCB.BORROW
     10703**DCL     10703--REDEF   10703--REDEF   10703--REDEF
VX_CONST_DCB.EOMCHAR#
     10658**DCL     10659--REDEF
VX_CONST_DCB.FLDID
     10695**DCL     10696--REDEF
VX_CONST_DCB.FORM$
     10687**DCL     10687--REDEF
VX_CONST_DCB.FSECT
     10710**DCL     10710--REDEF
VX_CONST_DCB.FSN#
     10677**DCL     10677--REDEF   10677--REDEF   10678--REDEF
VX_CONST_DCB.HEADER$
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:159  
     10686**DCL     10687--REDEF
VX_CONST_DCB.IXTNSIZE#
     10683**DCL     10684--REDEF
VX_CONST_DCB.LASTSTA$
     10667**DCL     10667--REDEF
VX_CONST_DCB.LVL
     10704**DCL     10704--REDEF
VX_CONST_DCB.NAME#.C
     10667**DCL     10668--REDEF
VX_CONST_DCB.NOEOF
     10699**DCL     10699--REDEF
VX_CONST_DCB.NRECS#
     10684**DCL     10684--REDEF
VX_CONST_DCB.NRECX
     10711**DCL     10711--REDEF
VX_CONST_DCB.OHDR
     10700**DCL     10700--REDEF
VX_CONST_DCB.ORG#
     10675**DCL     10676--REDEF
VX_CONST_DCB.PRECNO
     10708**DCL     10708--REDEF
VX_CONST_DCB.RCSZ
     10716**DCL     10716--REDEF
VX_CONST_DCB.RES#
     10669**DCL     10669--REDEF
VX_CONST_DCB.SETX
     10688**DCL     10688--REDEF
VX_CONST_DCB.TAB$
     10687**DCL     10687--REDEF
VX_CONST_DCB.TDA
     10707**DCL     10708--REDEF
VX_CONST_DCB.WSN#
     10669**DCL     10670--REDEF
VX_CURR$
      9545**DCL     14113>>IF      14114>>CALL    14114>>CALL    14114>>CALL    14128>>IF      14129>>ASSIGN
     14130>>ASSIGN  14139>>CALL    14139>>CALL    14139>>CALL    14149>>ASSIGN  14164>>ASSIGN  14166>>ASSIGN
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:160  
     14168>>ASSIGN  14297>>ASSIGN  14308>>IF      14309>>ASSIGN  14316>>ASSIGN  14317>>ASSIGN  14317>>ASSIGN
     14370>>IF      14372>>ASSIGN  14373>>ASSIGN  14401>>CALLBLT 14470>>ASSIGN  14471>>ASSIGN  14472>>ASSIGN
     14473>>ASSIGN  14521>>ASSIGN  14523>>ASSIGN  14527>>ASSIGN  14528>>ASSIGN  14529>>ASSIGN  14530>>ASSIGN
     14531>>ASSIGN  14532>>ASSIGN  14559>>ASSIGN  14560>>ASSIGN  14564>>ASSIGN  14566>>CALL    14566>>CALL
     14574>>ASSIGN  14585>>ASSIGN  14590>>ASSIGN  14602>>CALL    14602>>CALL    14602>>CALL    14602>>CALL
     14604>>ASSIGN  14605>>ASSIGN  14606>>ASSIGN  14610>>ASSIGN  14611>>ASSIGN  14612>>ASSIGN  14620>>ASSIGN
     14623>>ASSIGN  14624>>ASSIGN  14630>>CALL    14630>>CALL    14638>>ASSIGN  14649>>ASSIGN  14654>>ASSIGN
     14666>>CALL    14666>>CALL    14666>>CALL    14666>>CALL    14668>>ASSIGN  14669>>ASSIGN  14670>>ASSIGN
     14674>>ASSIGN  14675>>ASSIGN  14676>>ASSIGN  14680>>ASSIGN  14681>>ASSIGN
VX_DEF_REC_A
     10217**DCL     14110--DOINDEX 14111>>ASSIGN  14562--DOINDEX 14563>>ASSIGN
VX_EBUF.CHARS_A
     10099**DCL     10100--REDEF
VX_EFIELD1.CHARS
     10108**DCL     10109--REDEF
VX_EFIELD1.CHARS_A
     10109**DCL     14429<>CALL
VX_EFIELD2.CHARS
     10112**DCL     10113--REDEF
VX_EFIELD3.CHARS
     10116**DCL     10117--REDEF
VX_EI_KEY_BUF.KEY
     10492**DCL     10493--REDEF
VX_ERRORS
      9553**DCL      9564--REDEF
VX_ERRORS.CONFLICT_A
      9559**DCL      9560--REDEF
VX_ERRORS.UNSAT_A
      9555**DCL      9556--REDEF
VX_IMAGE_DATA.CPAGE#_A
      8690**DCL      8691--REDEF
VX_IMAGE_DATA.NODE_A$
      8702**DCL      8703--REDEF
VX_IMAGE_DATA.START_A$
      8694**DCL      8695--REDEF
VX_IMAGE_DATA.STOP_A$
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:161  
      8698**DCL      8699--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8759**DCL      8760--REDEF
VX_IMAGE_DS3.NODE_A$
      8771**DCL      8772--REDEF
VX_IMAGE_DS3.START_A$
      8763**DCL      8764--REDEF
VX_IMAGE_DS3.STOP_A$
      8767**DCL      8768--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8782**DCL      8783--REDEF
VX_IMAGE_DS4.NODE_A$
      8794**DCL      8795--REDEF
VX_IMAGE_DS4.START_A$
      8786**DCL      8787--REDEF
VX_IMAGE_DS4.STOP_A$
      8790**DCL      8791--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8805**DCL      8806--REDEF
VX_IMAGE_DS5.NODE_A$
      8817**DCL      8818--REDEF
VX_IMAGE_DS5.START_A$
      8809**DCL      8810--REDEF
VX_IMAGE_DS5.STOP_A$
      8813**DCL      8814--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8828**DCL      8829--REDEF
VX_IMAGE_DS6.NODE_A$
      8840**DCL      8841--REDEF
VX_IMAGE_DS6.START_A$
      8832**DCL      8833--REDEF
VX_IMAGE_DS6.STOP_A$
      8836**DCL      8837--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8851**DCL      8852--REDEF
VX_IMAGE_DS7.NODE_A$
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:162  
      8863**DCL      8864--REDEF
VX_IMAGE_DS7.START_A$
      8855**DCL      8856--REDEF
VX_IMAGE_DS7.STOP_A$
      8859**DCL      8860--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8874**DCL      8875--REDEF
VX_IMAGE_DS8.NODE_A$
      8886**DCL      8887--REDEF
VX_IMAGE_DS8.START_A$
      8878**DCL      8879--REDEF
VX_IMAGE_DS8.STOP_A$
      8882**DCL      8883--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8713**DCL      8714--REDEF
VX_IMAGE_PROC.NODE_A$
      8725**DCL      8726--REDEF
VX_IMAGE_PROC.START_A$
      8717**DCL      8718--REDEF
VX_IMAGE_PROC.STOP_A$
      8721**DCL      8722--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8736**DCL      8737--REDEF
VX_IMAGE_ROS.NODE_A$
      8748**DCL      8749--REDEF
VX_IMAGE_ROS.START_A$
      8740**DCL      8741--REDEF
VX_IMAGE_ROS.STOP_A$
      8744**DCL      8745--REDEF
VX_INHIBIT_COMPACTION
      9525**DCL     14537<<ASSIGN  14539<<ASSIGN
VX_IO_SIZEC
     10131**DCL     14429<>CALL    14489>>ASSIGN  14490>>ASSIGN
VX_IO_STATUS
     10129**DCL     14417>>IF
VX_LIBRARY_PROBE
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:163  
     10530**DCL     14380<<ASSIGN  14384<<ASSIGN  14416<<ASSIGN
VX_LIB_USED
      9541**DCL     14387<<ASSIGN
VX_L_REC_BUF
      9322**DCL     14514--CALL
VX_L_REC_BUF.CHARS
      9324**DCL     14381--CALL    14381--CALL    14488>>CALLBLT
VX_L_REC_BUF.COUNT
      9323**DCL     14490<<ASSIGN
VX_M_ALL
      9587**DCL     14359>>IF      14576>>IF      14640>>IF
VX_M_BASE_PTR
      9589**DCL     14360>>ASSIGN  14577>>ASSIGN  14641>>ASSIGN
VX_M_FREE
      9585**DCL     14359>>IF      14360>>ASSIGN  14361<<ASSIGN  14361>>ASSIGN  14467>>ASSIGN  14576>>IF
     14577>>ASSIGN  14578<<ASSIGN  14578>>ASSIGN  14640>>IF      14641>>ASSIGN  14642<<ASSIGN  14642>>ASSIGN
VX_M_VECTOR.F
      8541**DCL      8545--REDEF
VX_M_VECTOR_DP.F
      8576**DCL      8580--REDEF
VX_O.ACCTN_A$
      9705**DCL      9706--REDEF
VX_O.DCB_MATCH_A$
      9714**DCL      9715--REDEF
VX_O.DCB_MATCH_HIT_A
      9720**DCL      9721--REDEF
VX_O.FID.ALTSHARELIB$
      9693**DCL     14553<>CALL    14555<>CALL
VX_O.FIDN$.UNSAT$
      9701**DCL     14125>>IF      14152>>IF      14158>>ASSIGN
VX_O.FIDN_A$
      9699**DCL      9700--REDEF
VX_O.FID_A$
      9691**DCL      9692--REDEF
VX_O.INCLUDE_A$
      9711**DCL      9712--REDEF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:164  
VX_O.MAP_A
      9685**DCL      9686--REDEF
VX_O.NODCB_A
      9742**DCL      9743--REDEF
VX_O.NUM_A
      9630**DCL      9632--REDEF
VX_O.OPT_A
      9730**DCL      9731--REDEF
VX_O.PRIV_A
      9646**DCL      9648--REDEF
VX_O.SIN.NOSYSLIB
      9607**DCL     14125>>IF      14325>>IF
VX_O.SIN_A
      9599**DCL      9600--REDEF
VX_O.TCB_A
      9726**DCL      9727--REDEF
VX_OD.ACCTN_A$
      9903**DCL      9904--REDEF
VX_OD.DCB_MATCH_A$
      9912**DCL      9913--REDEF
VX_OD.FIDN_A$
      9897**DCL      9898--REDEF
VX_OD.FID_A$
      9889**DCL      9890--REDEF
VX_OD.INCLUDE_A$
      9909**DCL      9910--REDEF
VX_OD.MAP_A
      9883**DCL      9884--REDEF
VX_OD.NODCB_A
      9927**DCL      9928--REDEF
VX_OD.NUM_A
      9830**DCL      9831--REDEF
VX_OD.PRIV_A
      9845**DCL      9846--REDEF
VX_OD.SIN_A
      9799**DCL      9800--REDEF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:165  
VX_OD.VECTOR_A$
      9918**DCL      9919--REDEF
VX_OL.MAX_A
      9774**DCL      9776--REDEF
VX_OL.MIN_A
      9759**DCL      9760--REDEF
VX_ON.ACCTN_A$
     10048**DCL     10050--REDEF
VX_ON.DCB_MATCH_A$
     10059**DCL     10061--REDEF
VX_ON.FIDN_A$
     10041**DCL     10043--REDEF
VX_ON.FID_A$
     10032**DCL     10034--REDEF
VX_ON.INCLUDE_A$
     10055**DCL     10057--REDEF
VX_ON.MAP_A
     10025**DCL     10027--REDEF
VX_ON.NODCB_A$
     10075**DCL     10076--REDEF
VX_ON.NUM_A
      9970**DCL      9972--REDEF
VX_ON.PRIV_A
      9986**DCL      9988--REDEF
VX_ON.SIN_A
      9938**DCL      9940--REDEF
VX_ON.VECTOR_A$
     10066**DCL     10067--REDEF
VX_OUHEAD.VERSION
      9385**DCL      9387--REDEF
VX_OU_HEAD
      9328**DCL      9367--REDEF   14492--CALL    14492--CALL
VX_OU_HEAD.ALIB.COUNT
      9364**DCL     14410>>IF      14410>>IF
VX_OU_HEAD.REC_A
      9340**DCL      9343--REDEF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:166  
VX_O_KEY_BUF.FORM0
      8589**DCL      8592--REDEF    8599--REDEF
VX_O_KEY_BUF.FORM0.CHARS
      8591**DCL     14378<<ASSIGN  14488<<CALLBLT
VX_O_KEY_BUF.FORM0.COUNT
      8590**DCL     14377<<ASSIGN  14489<<ASSIGN
VX_O_KEY_BUF_L.FORM0
      8612**DCL      8615--REDEF    8622--REDEF
VX_O_KEY_HEAD
     10147**DCL     14488>>CALLBLT
VX_PASS1_ALL_TYPE
     10213**DCL     14312<>CALL    14466>>ASSIGN  14573>>ASSIGN  14637>>ASSIGN
VX_PASS1_LIB_ALL_TYPE
     10214**DCL     14538--CALL    14550<>CALL    14554<>CALL    14693<>CALL
VX_PASS2_REF.OU.L_START
     10278**DCL     10283--REDEF
VX_PASS2_REF.OU.L_STOP
     10284**DCL     10289--REDEF
VX_PASS2_REF.OU.MAX
     10272**DCL     10277--REDEF
VX_PASS2_REF.OU.SIZE
     10290**DCL     10295--REDEF
VX_PASS2_REF.SAT.COUNT
     10317**DCL     10323--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10324**DCL     10330--REDEF
VX_PASS2_REF.SAT.L_START
     10303**DCL     10309--REDEF
VX_PASS2_REF.SAT.L_STOP
     10310**DCL     10316--REDEF
VX_PASS2_REF.SAT.MAX
     10297**DCL     10302--REDEF
VX_PASS2_REF.UNSAT.L_START
     10365**DCL     10370--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10371**DCL     10376--REDEF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:167  
VX_PASS2_REF.UNSAT.L_WHERE
     10377**DCL     10382--REDEF
VX_PASS2_REF.UNSAT.MAX
     10359**DCL     10364--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10389**DCL     10394--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10383**DCL     10388--REDEF
VX_PHRASE.PHRASE
      9791**DCL      9793--REDEF
VX_PROGRAM_BIAS.A
      9569**DCL      9570--REDEF
VX_REC_SIZE_A
     10216**DCL     14692>>ASSIGN
VX_REF_MATCH_A
     10220**DCL     14112>>ASSIGN  14163>>ASSIGN
VX_REF_REC_A
     10219**DCL     14161--DOINDEX 14162>>ASSIGN  14464--DOINDEX 14465>>ASSIGN  14618--DOINDEX 14619>>ASSIGN
VX_RN_THRESHOLD
     10507**DCL     14370>>IF
VX_ROOT$
      9542**DCL     14398>>IF
VX_R_KEY_BUF.FORM0
      8638**DCL      8642--REDEF    8648--REDEF
VX_SD.A
      8266**DCL      8267--REDEF
VX_SLIB_INIT$
     10164**DCL     14406>>IF      14549<>CALL    14551<>CALL
VX_SOURCE_COUNT
     10125**DCL     13190--IMP-SIZ 13192--IMP-SIZ
VX_SPC.B$.MINE
     10460**DCL     10466--REDEF
VX_SPC.B$.NAME
     10439**DCL     10445--REDEF
VX_SPC.B$.SKIP
     10453**DCL     10459--REDEF
PL6.E3A0      #001=VXO$SATREF File=VXO$SATREF.:E05TSI                            WED 07/30/97 08:31 Page:168  
VX_SPC.B$.VALUE
     10446**DCL     10452--REDEF
VX_SPC.SEG.NAME
     10408**DCL     10414--REDEF
VX_SPC.SEG.VALUE
     10415**DCL     10421--REDEF
VX_TARGET_COUNT
     10124**DCL     13189--IMP-SIZ 13191--IMP-SIZ
VX_TREE_SLIB_NAME
      9497**DCL     14406>>IF
VX_TSX0_OVERLAY.H
     10183**DCL     10186--REDEF
WHERE$
     13098**DCL     14577<<ASSIGN  14580<>CALL    14589>>ASSIGN  14590>>ASSIGN  14641<<ASSIGN  14644<>CALL
     14653>>ASSIGN  14654>>ASSIGN
WRITE_LLMU
     13723**DCL     14405<>CALL
WRITE_LLMU.STATION_
     13725**DCL     13725--REDEF
WRITE_LLMU.V
     13726**DCL     13723--DCLINIT
WRITE_LLMU.V.DVBYTE.VFC#
     13732**DCL     13732--REDEF
