VERSION E05

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:1    
        1        1        /*M* VXO$OBJECT - processes an object unit for pass 1.   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CCC,AIC,CTI=8 */
        8        8        VXO$OBJECT:
        9        9              PROC( FID$, SOURCE, ALLOCATE$ );
       10       10        %INCLUDE VX_INC_C;
       11    10726        %P$LIT( NAME=P$LIT, STCLASS="BASED", LEN="P$LIT.COUNT" );
       12    10779        %VX$NODE;

             10791    1   /*******************************************************************************
             10792    1   *                                                                              *
             10793    1   *                          VX$NODE                                                 *
             10794    1   *                                                                              *
             10795    1   *******************************************************************************/

             10811    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10812    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10813    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10814    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10815    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10816    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10817                              to list of file nodes for this node            */
             10818    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10819    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10819                  /* Head pointer to shared library list */
             10820    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10820                  /* Head pointer to list of shared libraries
             10821                                          which have been mapped to included libraries */
             10822    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10823    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10824    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10825    1         2 ADDR_START REDEF  ADDR_START_A,
             10826    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:2    
             10827    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10828    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10829    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10830    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10831    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10832    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10833    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10834    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10835    1         2 START_PAGE# REDEF START_PAGE#_A,
             10836    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10837    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10838    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10839    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10840    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10841    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10842    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10843    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10844    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10844                  /* Starting pointer for common sections for this node */
             10845    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10845                  /* Stopping pointer for common sections for this node */
             10846    1         2 L_START,
             10847    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10848    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10849    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10850    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10851    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10852    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10853    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10854    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10855    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10856    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10857    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10858    1         2 L_STOP,
             10859    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10860    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10861    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:3    
             10862    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10863    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10864    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10865    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10866    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10867    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10868    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10869    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10870    1         2 L_SIZE,
             10871    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10872    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10873    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10874    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10875    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10876    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10877    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10878    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10879    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10880    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10881    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10882    1         2 L_PREV_SIZE,
             10883    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10884    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10885    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10886    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10887    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10888    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10889    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10890    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10891    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10892    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10893    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10894    1         2 BIT_MAP                ALIGNED,
             10895    1           3 DATA                  ALIGNED,
             10896    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10897    1           3 RPROC                 ALIGNED,
             10898    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:4    
             10899    1           3 ROS                   ALIGNED,
             10900    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10901    1         2 L_SC_START,
             10902    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10903    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10904    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10905    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10906    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10907    1         2 L_SC_STOP,
             10908    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10909    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10910    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10911    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10912    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10913    1         2 PROMOTE_HEAD,
             10914    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10915    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10916    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10917    1         2 PROMOTE_TAIL,
             10918    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10919    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10920    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10921    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10922    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10923    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10924    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10925    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       13    10929        %VX$LST;

             10942    1   /*******************************************************************************
             10943    1   *                                                                              *
             10944    1   *                          VX$LST                                                 *
             10945    1   *                                                                              *
             10946    1   *******************************************************************************/

             10951    1   DCL 1 VX$LST                          ALIGNED BASED,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:5    
             10952    1         2 LINK$        PTR,               /* Link to next item                  */
             10953    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             10954    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             10955    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             10956    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             10957    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             10958    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             10959    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             10960    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             10961    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             10962    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             10963    1         2 P,
             10964    1           3 NAME_       ALIGNED,
             10965    1             4 BOUND      UBIN(20)  UNAL,
             10966    1             4 FLAGSV     UBIN(11)  UNAL,
             10967    1             4 *          BIT(5)    UNAL,
             10968    1             4 NAME$      PTR,
             10969    1           3 ACCT_       ALIGNED,
             10970    1             4 BOUND      UBIN(20)  UNAL,
             10971    1             4 FLAGSV     UBIN(11)  UNAL,
             10972    1             4 *          BIT(5)    UNAL,
             10973    1             4 ACCT$      PTR,
             10974    1           3 PASS_       ALIGNED,
             10975    1             4 BOUND      UBIN(20)  UNAL,
             10976    1             4 FLAGSV     UBIN(11)  UNAL,
             10977    1             4 *          BIT(5)    UNAL,
             10978    1             4 PASS$      PTR,
             10979    1           3 SN_         ALIGNED,
             10980    1             4 BOUND      UBIN(20)  UNAL,
             10981    1             4 FLAGSV     UBIN(11)  UNAL,
             10982    1             4 *          BIT(5)    UNAL,
             10983    1             4 SN$        PTR,
             10984    1           3 WSN_        ALIGNED,
             10985    1             4 BOUND      UBIN(20)  UNAL,
             10986    1             4 FLAGSV     UBIN(11)  UNAL,
             10987    1             4 *          BIT(5)    UNAL,
             10988    1             4 WSN$       PTR,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:6    
             10989    1           3 B           ALIGNED,
             10990    1             4 RES        BIT(1)    UNAL,
             10991    1             4 ASN        BIT(1)    UNAL,
             10992    1             4 ACCT       BIT(1)    UNAL,
             10993    1             4 *          BIT(33)   UNAL,
             10994    1           3 RES         CHAR(4)   ALIGNED,
             10995    1           3 ASN         UBIN(36)  ALIGNED;
       14    10998        %VX$LLIST;

             11010    1   /*******************************************************************************
             11011    1   *                                                                              *
             11012    1   *                          VX$LLIST                                                *
             11013    1   *                                                                              *
             11014    1   *******************************************************************************/

             11019    1   DCL 1 VX$LLIST                BASED     ALIGNED,
             11020    1         2 LINK$                  PTR  ALIGNED,
             11021    1         2 ITEM$                  PTR  ALIGNED;
       15    11024        %VX$LLIST_SL;

             11036    1   /*******************************************************************************
             11037    1   *                                                                              *
             11038    1   *                          VX$LLIST_SL                                             *
             11039    1   *                                                                              *
             11040    1   *******************************************************************************/

             11045    1   DCL 1 VX$LLIST_SL             BASED     ALIGNED,
             11046    1         2 LINK$                  PTR  ALIGNED,
             11047    1         2 ITEM$                  PTR  ALIGNED,
             11048    1         2 PRECEDENCE            UBIN WORD,
             11049    1         2 NAME ,
             11050    1           3 CNT UBIN BYTE UNAL,
             11051    1           3 TXT CHAR(31);
       16    11054        %VX$LLIST_SC;

             11066    1   /*******************************************************************************
             11067    1   *                                                                              *
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:7    
             11068    1   *                          VX$LLIST_SC                                             *
             11069    1   *                                                                              *
             11070    1   *******************************************************************************/

             11075    1   DCL 1 NAME               BASED     ALIGNED,
             11076    1         2 LINK$             PTR,
             11077    1         2 BASE$             PTR,
             11078    1         2 COUNT             UBIN(36);
       17    11081        %VX$SC;

             11094    1   /*******************************************************************************
             11095    1   *                                                                              *
             11096    1   *                          VX$SC                                                 *
             11097    1   *                                                                              *
             11098    1   *******************************************************************************/

             11103    1   DCL 1 VX$SC BASED ALIGNED,
             11104    1         2 SEG UBIN(3) UNAL,
             11105                /*K*  SEG - The segment number of this section */
             11106    1         2 TYPE UBIN(6) UNAL,
             11107                /*K*  TYPE -
             11108                      Type code      Section type
             11109                      ---------      ------------
             11110                          0          Data control section with write access.
             11111                          1          Procedure control section.
             11112                          2          Unlabeled common, name pointer must be zero.
             11113                          3          Labeled common, with mandatory name pointer.
             11114                                     This is for labeled common which must be
             11115                                     in the root.
             11116                          4          Labeled common, with mandatory name pointer.
             11117                                     This is for labeled common which need not
             11118                                     be in the root.
             11119                          5          DCB, word 1 is name pointer.
             11120                          6          Data control section with read only access,
             11121                                     word 1 = 0 or name pointer.      */
             11122    1         2 EMPTY BIT(1) UNAL,
             11123                /*K*  EMPTY is the empty bit.  This bit is set if the control
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:8    
             11124                      section is of size zero.  */
             11125    1         2 ATTR UNAL,
             11126    1           3 INT  UBIN(2) UNAL,
             11127                  /*K*  INT is the Section initialization.  */
             11128    1           3 SEGMENT BIT(1) UNAL,
             11129                  /*K* SEGMENT is set if the Section is defined in a data
             11130                       segment.  */
             11131    1           3 ALL BIT(1) UNAL,
             11132                  /*K*  ALL is set if the Section is allocated.  */
             11133    1           3 PRE_DCB BIT(1) UNAL,
             11134                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11135    1           3 MES_INIT BIT(1) UNAL,
             11136    1           3 ALIGN UBIN(2) UNAL,
             11137                  /*K*  ALIGN is the Section alignment.  */
             11138    1         2 ADDRESS UBIN HALF UNAL,
             11139                /*K*  ADDRESS is the address within the Instruction Segment of
             11140                      the entry point of the external procedure.  */
             11141    1         2 NAME_DISP SBIN HALF UNAL,
             11142                /*K*  NAME_DISP is the Name index.  */
             11143    1         2 SIZE UBIN HALF UNAL,
             11144                /*K*  SIZE is the size, in words, of the section.  */
             11145    1         2 NODE# UBIN HALF UNAL,
             11146                /*K*  NODE# is the Node number of section.  */
             11147    1         2 COM_LINK UBIN HALF UNAL;
             11148                /*K*  COM_LINK is used internally by linker to link common sections */

             11158    1   /*******************************************************************************
             11159    1   *                                                                              *
             11160    1   *                          VX$SECT                                                 *
             11161    1   *                                                                              *
             11162    1   *******************************************************************************/

             11167    1   DCL 1 VX$SECT BASED ALIGNED,
             11168    1         2 TYPE UBIN BYTE UNAL,
             11169                /*K*  TYPE -
             11170                      Type code      Section type
             11171                      ---------      ------------
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:9    
             11172                          0          Data control section with write access.
             11173                          1          Procedure control section.
             11174                          2          Unlabeled common, name pointer must be zero.
             11175                          3          Labeled common, with mandatory name pointer.
             11176                                     This is for labeled common which must be
             11177                                     in the root.
             11178                          4          Labeled common, with mandatory name pointer.
             11179                                     This is for labeled common which need not
             11180                                     be in the root.
             11181                          5          DCB, word 1 is name pointer.
             11182                          6          Data control section with read only access,
             11183                                     word 1 = 0 or name pointer.
             11184                          7          Constant labeled common, with mandatory name pointer.
             11185                                     This is for labeled common which must be
             11186                                     in the root.
             11187                          8          Constant labeled common, with mandatory name pointer.
             11188                                     This is for labeled common which need not
             11189                                     be in the root.                        */
             11190    1         2 * BIT(1),
             11191                /*K*  * is reserved for future use and must be zero. */
             11192    1         2 INITZERO BIT(1),
             11193                /*K*  INITZERO - if 1, initialize with zero.  */
             11194    1         2 INITUTS BIT(1),
             11195                /*K*  INITUTS - if 1, initialize with UTS.  */
             11196    1         2 SEGMENT BIT(1),
             11197                /*K*  SEGMENT - if 1, specifies that this section is
             11198                                to be placed in the segment specified by
             11199                                SEG_NPOINTER.  */
             11200    1         2 * BIT(3),
             11201                /*K*  * is reserved for future use and must be zero. */
             11202    1         2 BOUND UBIN(2) UNAL,
             11203                /*K*  BOUND - bits 6-7 - defines starting location.
             11204                              00 - starts on even word
             11205                              01 - starts on odd word
             11206                              10 - starts on multiple of 8
             11207                              11 - starts on page boundary     */
             11208    1         2 SIZE UBIN HALF UNAL,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:10   
             11209                /*K*  SIZE is the size, in words, of the section.  */
             11210    1         2 NPOINTER SBIN HALF UNAL,
             11211                /*K*  NPOINTER is the word displacement into the name record
             11212                      (TYPE 1) locating the name of this section.  If the
             11213                      field is negative, the section has no name.  */
             11214    1         2 MBZ UBIN HALF UNAL,
             11215                /*K*  MBZ is reserved for future expansion and must be zero. */
             11216    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11217                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11218                      Section.  The name must be a valid segment name
             11219                      recognized by the linker.  */
             11220    1         2 G66 REDEF MBZ,
             11221                /*K*  G66 is not used on CP-6. */
             11222    1           3 * BIT(9),
             11223    1           3 NSAB BIT(9);
       18    11226        %TMPLT;

             11238    1   /*******************************************************************************
             11239    1   *                                                                              *
             11240    1   *                          TMPLT                                                 *
             11241    1   *                                                                              *
             11242    1   *******************************************************************************/

             11247    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11248    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11249    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11250    1         2 W       REDEF     A,            /* By name                            */
             11251    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11252    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       19    11255        %VX$WORD;

             11267    1   /*******************************************************************************
             11268    1   *                                                                              *
             11269    1   *                          VX$WORD                                                 *
             11270    1   *                                                                              *
             11271    1   *******************************************************************************/

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:11   
             11276    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             11277    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             11278    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             11279    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             11280        /**/
             11281    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             11282    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             11283    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             11284    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
       20    11287        %T$C;

             11299    1   /*******************************************************************************
             11300    1   *                                                                              *
             11301    1   *                          T$C                                                 *
             11302    1   *                                                                              *
             11303    1   *******************************************************************************/

             11308    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11309    1         2 COUNT        UBIN( 9) UNAL,
             11310    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11311    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11312    1         2 COUNT        UBIN( 9) UNAL,
             11313    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       21    11316        %SET LISTMAC='1'B;
       22    11317        %SET LISTDIR='0'B;

             11327    1   /*******************************************************************************
             11328    1   *                                                                              *
             11329    1   *                          SUBS                                                 *
             11330    1   *                                                                              *
             11331    1   *******************************************************************************/


             11386    1   /*******************************************************************************
             11387    1   *                                                                              *
             11388    1   *                          PARAMETERS                                              *
             11389    1   *                                                                              *
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:12   
             11390    1   *******************************************************************************/

       28    11394    1   DCL FID$                 PTR       ALIGNED;
       29    11395    1   DCL SOURCE               SBIN WORD ALIGNED;
       30    11396    1   DCL ALLOCATE$            PTR       ALIGNED;

             11405    1   /*******************************************************************************
             11406    1   *                                                                              *
             11407    1   *                          CHAR                                                 *
             11408    1   *                                                                              *
             11409    1   *******************************************************************************/

       32    11413    1   DCL 1 MAP_STRING ALIGNED AUTO,
       33    11414    1         2 COUNT UBIN(9) UNAL,
       34    11415    1         2 CHARS CHAR(31) UNAL;

             11424    1   /*******************************************************************************
             11425    1   *                                                                              *
             11426    1   *                          ENTRY                                                 *
             11427    1   *                                                                              *
             11428    1   *******************************************************************************/

             11433    1   DCL VXE$ERROR       ENTRY(4);
             11434    1   DCL VXE$ERR         ENTRY(3);
             11435    1   DCL VXE$MERC        ENTRY;
             11436    1   DCL VXE$ERRMSG      ENTRY(3);
             11437    1   DCL VXR$READ        ENTRY( 3 );
             11438    1   DCL VXW$WRITE       ENTRY( 3 );
             11439    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11440    1   DCL VXD$B2C         ENTRY( 5 );
             11441    1   DCL VXD$C2B         ENTRY( 3 );
             11442    1   DCL VXA$GET         ENTRY( 3 );
             11443    1   DCL VXF$FREE        ENTRY( 3 );
             11444    1   DCL VXQ$SORT        ENTRY( 7 );
             11445    1   DCL VXY$YESNO       ENTRY( 1 );
             11448    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11449    1   DCL VXF$CLOSE       ENTRY(3);
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:13   
             11450    1   DCL VXU$PREAD       ENTRY(12);
             11451    1   DCL VXK$KEY         ENTRY(4);
             11452    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11453    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       38    11455    1   DCL VXS$LST         ENTRY(6)  ALTRET;
       39    11456    1   DCL VXO$COMPACT     ENTRY;
       40    11457    1   DCL VXU$PLOVER      ENTRY(1) ALTRET ;

             11466    1   /*******************************************************************************
             11467    1   *                                                                              *
             11468    1   *                          PTR                                                 *
             11469    1   *                                                                              *
             11470    1   *******************************************************************************/

             11475    1   DCL P$         PTR       ALIGNED AUTO;
             11476    1   DCL Q$         PTR       ALIGNED AUTO;
             11477    1   DCL R$         PTR       ALIGNED AUTO;
       43    11479    1   DCL ALL$            PTR  ALIGNED   AUTO;
       44    11480    1   DCL CURR$           PTR  ALIGNED   AUTO;
       45    11481    1   DCL PREV$           PTR  ALIGNED   AUTO;
       46    11482    1   DCL WHERE$          PTR  ALIGNED   AUTO;
       47    11483    1   DCL START$          PTR  ALIGNED   AUTO;
       48    11484    1   DCL TAIL$           PTR  ALIGNED   AUTO;
       49    11485    1   DCL MAKE$           PTR  ALIGNED   AUTO;
       50    11486    1   DCL ED_START$           PTR  ALIGNED   AUTO;
       51    11487    1   DCL RN_START$           PTR  ALIGNED   AUTO;
       52    11488    1   DCL ER_START$           PTR  ALIGNED   AUTO;
       53    11489    1   DCL TEMP_ER_START$           PTR  ALIGNED   AUTO;
       54    11490    1   DCL TEMP_RN_START$           PTR  ALIGNED   AUTO;
       55    11491    1   DCL ED_STOP$           PTR  ALIGNED   AUTO;
       56    11492    1   DCL ER_STOP$           PTR  ALIGNED   AUTO;
       57    11493    1   DCL TEMP_ER_STOP$           PTR  ALIGNED   AUTO;
       58    11494    1   DCL TEMP_RN_STOP$           PTR  ALIGNED   AUTO;
       59    11495    1   DCL CURR_ER_START$          PTR  ALIGNED   AUTO;

             11504    1   /*******************************************************************************
             11505    1   *                                                                              *
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:14   
             11506    1   *                          UBIN                                                 *
             11507    1   *                                                                              *
             11508    1   *******************************************************************************/

             11513    1   DCL I          UBIN(36) ALIGNED AUTO;
             11514    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11515    1   DCL J          UBIN(36) ALIGNED AUTO;
             11516    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11517    1   DCL K          UBIN(36) ALIGNED AUTO;
             11518    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11519    1   DCL L          UBIN(36) ALIGNED AUTO;
             11520    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       62    11522    1   DCL REC_TYPE        UBIN(36)  ALIGNED   AUTO;
       63    11523    1   DCL ALL_TYPE        UBIN(36)  ALIGNED   AUTO;
       64    11524    1   DCL HEAD_INX        UBIN(36)  ALIGNED   AUTO;
       65    11525    1   DCL TSIZE           UBIN(36)  ALIGNED   AUTO;
       66    11526    1   DCL PAGE            UBIN(36)  ALIGNED   AUTO;
       67    11527    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
       68    11528    1   DCL HALVE           UBIN(36)  ALIGNED   AUTO;
       69    11529    1   DCL NPAGE           UBIN(36)  ALIGNED   AUTO;
       70    11530    1   DCL TSIZE_READ      SBIN(36)  ALIGNED   AUTO;
       71    11531    1   DCL SC_TYPE         UBIN(36)  ALIGNED   AUTO;
       72    11532    1   DCL INDX            UBIN(36)  ALIGNED   AUTO;
       73    11533    1   DCL LAST_DISP       UBIN(36)  ALIGNED   AUTO;
       74    11534    1   DCL ED_SIZE         UBIN(36)  ALIGNED   AUTO;
       75    11535    1   DCL ER_SIZE         UBIN(36)  ALIGNED   AUTO;
       76    11536    1   DCL TEMP_ER_SIZE    UBIN(36)  ALIGNED   AUTO;
       77    11537    1   DCL TEMP_RN_SIZE    UBIN(36)  ALIGNED   AUTO;
       78    11538    1   DCL PRECEDENCE      UBIN(36)  ALIGNED   AUTO;
       79    11539    1   DCL RN_FREE    UBIN(36)  ALIGNED   AUTO;
             11541    1   DCL 1 F$NAME_                 BASED,
             11542    1         2 COUNT             UBIN( 9) UNAL,
             11543    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             11544    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             11545    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             11546    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             11547    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:15   
       81    11549        /**/
       82    11550        /**/
       83    11551        /**/
             11560    1   DCL 1 B$DNAME BASED ALIGNED,
             11561    1         2 COUNT UBIN HALF UNAL %INIT(SIZEC(' ')) %CHARTEXT('/**/'),
             11562                /*K*  COUNT is the number of characters in the name */
             11568    1         2 %CHARTEXT('TEXT') CHAR(B$DNAME.COUNT) UNAL;
             11572    1   DCL VX$TARGET_B           BIT( VX_TARGET_COUNT ) ALIGNED    BASED;
             11573    1   DCL VX$SOURCE_B           BIT( VX_SOURCE_COUNT ) ALIGNED    BASED;
             11574    1   DCL VX$TARGET_C         CHAR( VX_TARGET_COUNT ) ALIGNED BASED;
             11575    1   DCL VX$SOURCE_C         CHAR( VX_SOURCE_COUNT ) ALIGNED BASED;
             11578    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
             11579    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
             11580    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
             11581    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
             11582    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
             11583    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             11584    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
             11587    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
             11588    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
             11589    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
             11590    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
             11591    1   DCL BIN_START1$         PTR       ALIGNED AUTO;

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:16   
       90    11595    2         IF VX_OUHEAD.WORDSIZE = 16 THEN DO;
       91    11596        /*E* ERROR: VXO-E$L6_OU_VX
       92    11597        MESSAGE: FEPLINK must be used to link object unit %U1;
       93    11598                 In object file %U2.
       94    11599        */
       95    11600    2             VX_EFIELD1 = VX_OK.OUNAME;
       96    11601    2             VX_EFIELD2 = VX_OK.FILE.OFNAME;
       97    11602                  %SCREAM(ERR#=E$L6_OU_VX,LEVEL=@E$F_VX,MID="'O'");
       98    11605    2            END;
       99    11606    1         ELSE IF VX_OUHEAD.WORDSIZE ~= 36
      100    11607    2             THEN DO;
      101    11608        /*E* ERROR: VXO-E$ILLEGAL_WORDSIZE_VX
      102    11609        MESSAGE: Object language error: Illegal wordsize (%U1) detected.
      103    11610        */
      104    11611    2                 I = VX_OUHEAD.WORDSIZE;
      105    11612                      %NUMBER(NUM1=I);
      106    11629                      %SCREAM(ERR#=E$ILLEGAL_WORDSIZE_VX,LEVEL=@E$S_VX,MID="'O'",AUX=
             11629                          @E$OUOF_VX);
      107    11632    2                END;
      108    11633    2         IF VX_OU_HEAD.REC.RN_SIZE = 0 THEN DO;
      109    11634    2             IF VX_OU_HEAD.REC.ER_SIZE ~=0  OR  VX_OU_HEAD.REC.DR_SIZE ~= 0
      110    11635    3                     OR VX_OU_HEAD.REC.SR_SIZE ~= 0 THEN DO;
      111    11636        /*E*  ERROR: VXO-E$REF_INCONSIST_VX-0
      112    11637              MESSAGE: Reference name size = 0. Entry reference size = %U1.
      113    11638                       Data reference size = %U2. Segment reference size = %U3.
      114    11639              DESCRIPTION: Self-explanatory.
      115    11640        */
      116    11641    3                 I = VX_OU_HEAD.REC.ER_SIZE;
      117    11642    3                 J = VX_OU_HEAD.REC.DR_SIZE;
      118    11643    3                 K = VX_OU_HEAD.REC.SR_SIZE;
      119    11644                      %NUMBER(
      120    11645                      NUM1=I, SIZE1=6, BASE1=10,
      121    11646                      NUM2=J, SIZE2=6, BASE2=10,
      122    11647                      NUM3=K, SIZE3=6, BASE3=10 );
      123    11664                      %SCREAM(
      124    11665                      ERR#=E$REF_INCONSIST_VX,
      125    11666                      LEVEL=@E$F_VX,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:17   
      126    11667                      MID="'O'",
      127    11668                      AUX=@E$OUOF_VX);
      128    11671    3                END;                       /* If VX_OU_HEAD.REC.ER_SIZE ... */
      129    11672    2            END;                           /* If VX_OU_HEAD.REC.RN_SIZE ... */
      130    11673    2         IF VX_OU_HEAD.REC.DN_SIZE = 0 THEN DO;
      131    11674    2             IF VX_OU_HEAD.REC.ED_SIZE ~=0  OR  VX_OU_HEAD.REC.DD_SIZE ~= 0
      132    11675    3                     OR VX_OU_HEAD.REC.SD_SIZE ~=0 THEN DO;
      133    11676        /*E*  ERROR: VXO-E$DEF_INCONSIST_VX-0
      134    11677              MESSAGE: Definition name size = 0. Entry definition size = %U1.
      135    11678                       Data definition size = %U2. Segment definition size = %U3.
      136    11679              DESCRIPTION: Self-explanatory.
      137    11680        */
      138    11681    3                 I = VX_OU_HEAD.REC.ED_SIZE;
      139    11682    3                 J = VX_OU_HEAD.REC.DD_SIZE;
      140    11683    3                 K = VX_OU_HEAD.REC.SD_SIZE;
      141    11684                      %NUMBER(
      142    11685                      NUM1=I, SIZE1=6, BASE1=10,
      143    11686                      NUM2=J, SIZE2=6, BASE2=10,
      144    11687                      NUM3=K, SIZE3=6, BASE3=10 );
      145    11704                      %SCREAM(
      146    11705                      ERR#=E$DEF_INCONSIST_VX,
      147    11706                      LEVEL=@E$F_VX,
      148    11707                      MID="'O'",
      149    11708                      AUX=@E$OUOF_VX);
      150    11711    3                END;                       /* If VX_OU_HEAD.REC.ED_SIZE ... */
      151    11712    2            END;                           /* If VX_OU_HEAD.REC.DN_SIZE ... */

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:18   
      153    11714    1         IF VX_OU_HEAD.LIB.COUNT > 0  AND  VX_OU_HEAD.LIB.COUNT <= 31
      154    11715    1                 AND  NOT VX_OD.SIN.NOSHARELIB   AND  NOT VX_OD.FID.SHARELIB$
      155    11716    2         THEN DO;
      156    11717    3             IF VX_SHARED_LIB_ASS ~= 0 THEN DO;
      157    11718        /*E*  ERROR: VXO-E$LIB_OPT_CONFLICT_VX-0
      158    11719              MESSAGE: Request for the shared library %U1 with the
      159    11720                       %U2 option in effect.
      160    11721              DESCRIPTION: Self-explanatory.
      161    11722        */
      162    11723    3                 VX_EFIELD1 = VX_OU_HEAD.LIB;
      163    11724    3                 P$ = VX_ON.SIN_A(VX_SHARED_LIB_ASS-1);
      164    11725    3                 VX_EFIELD2.COUNT = P$ -> P$LIT.COUNT;
      165    11726    3                 VX_EFIELD2.CHARS = P$ -> P$LIT.TEXT;
      166    11727                      %SCREAM(
      167    11728                      ERR# = E$LIB_OPT_CONFLICT_VX,
      168    11729                      LEVEL=@E$F_VX,
      169    11730                      MID="'O'");
      170    11733    3                END;                       /* If VX_SHARED_LIB_ASS ~= 0 then do; */
      171    11734    2             P$ = ADDR( VX_OU_HEAD.LIB );
      172    11735    2             CURR$ = VX_SLIB_HEAD$;
      173    11736    2             PREV$ = ADDR(VX_SLIB_HEAD$);
      174    11737    3             DO WHILE ( CURR$ ~= ADDR(NIL) );
      175    11738    3                 IF P$ -> T$C.CHARS = CURR$ -> VX$LLIST_SL.NAME.TXT THEN
      176    11739    3                     GOTO ALREADY_THERE;
      177    11740    3                 PREV$ = CURR$;
      178    11741    3                 CURR$ = CURR$ -> VX$LLIST.LINK$;
      179    11742    3                END;                       /* do while ( CURR$ ~= addr(nil) )    */
      180    11743                                            /* Find precedence of the shared library */
      181    11744    2             IF SUBSTR(VX_OU_HEAD.LIB.NAME,0,14) = ':SHARED_COMMON' THEN
      182    11745    2                 PRECEDENCE = 4;
      183    11746    2             ELSE
      184    11747    2                 IF SUBSTR(VX_OU_HEAD.LIB.NAME,0,13) = ':SHARED_COBOL' THEN
      185    11748    2                     PRECEDENCE = 3;
      186    11749    2                 ELSE
      187    11750    2                     IF SUBSTR(VX_OU_HEAD.LIB.NAME,0,11) = ':SHARED_RPG' THEN
      188    11751    2                         PRECEDENCE = 2;
      189    11752    2                     ELSE
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:19   
      190    11753    2                         IF SUBSTR(VX_OU_HEAD.LIB.NAME,0,14) = ':SHARED_SYSTEM'
      191    11754    2                         THEN PRECEDENCE = 1;
      192    11755    2                         ELSE PRECEDENCE = 7;
      193    11756    2             IF VX_SLIB_HEAD$ = ADDR(NIL)  /* => first shared library */
      194    11757    2                     OR VX_O.SIN.ALIB ~= 0 /* => alib option specified */
      195    11758    3             THEN DO;
      196    11759        /*                                 Allocate list items for the shared library */
      197    11760                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE="SIZEW(VX$LLIST_SL)" );
      198    11767    3                 WHERE$ -> VX$LLIST_SL.LINK$ = ADDR(NIL);
      199    11768    3                 WHERE$ -> VX$LLIST_SL.NAME.CNT = P$ -> T$C.COUNT;
      200    11769    3                 WHERE$ -> VX$LLIST_SL.NAME.TXT = P$ -> T$C.CHARS;
      201    11770    3                 WHERE$ -> VX$LLIST_SL.PRECEDENCE = PRECEDENCE;
      202    11771    3                 CALL VXS$LST( ALL$, P$, 2/*@LF*/, 2/*@LF_SLIB*/, ADDR(NIL), 0 );
      203    11772                                                /* Remember first for initialization */
      204    11773    3                 IF VX_SLIB_HEAD$ = ADDR(NIL) THEN VX_SLIB_INIT$ = ALL$;
      205    11774        /*
      206    11775                                              Add to shared library list  */
      207    11776    3                 PREV$ -> VX$LLIST_SL.LINK$ = WHERE$;
      208    11777    3                 WHERE$ -> VX$LLIST_SL.ITEM$ = ALL$;
      209    11778    3                 ALL$ -> VX$LST.P.ACCT_ = VECTOR( VX_SYS );
      210    11779        /*
      211    11780                                      Add to file list for node  */
      212    11781    3                 VX_CURR$ -> VX$NODE.TAIL$ -> VX$LST.LINK$ = ALL$;
      213    11782    3                 VX_CURR$ -> VX$NODE.TAIL$ = ALL$;
      214    11783    3                END;
      215    11784    3             ELSE DO;                      /*  Here => not first shared library and
      216    11785                                                            alib option not specified */
      217    11786    4                 IF SUBSTR( VX_OU_HEAD.LIB.NAME, 0, 8 ) ~= ':SHARED_' THEN DO;
      218    11787        /*E*  ERROR: VXO-E$MULT_LIB_VX-0
      219    11788              MESSAGE: ALIB option not specified and multiple shared libraries requested
      220    11789                       with non-standard name (%U1).
      221    11790              DESCRIPTION: Self-explanatory.
      222    11791        */
      223    11792    4                     VX_EFIELD1 = VX_OU_HEAD.LIB;
      224    11793                          %SCREAM( ERR#=E$MULT_LIB_VX, LEVEL=@E$F_VX, MID="'O'" );
      225    11796    4                    END;
      226    11797        /**/
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:20   
      227    11798    3                 IF VX_TREE_SLIB_NAME = 0
      228    11799    4                 THEN DO;
      229    11800                                        /* Allocate list items for the shared library */
      230    11801                          %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE="SIZEW(VX$LLIST_SL)");
      231    11808    4                     WHERE$ -> VX$LLIST_SL.LINK$ = ADDR(NIL);
      232    11809    4                     WHERE$ -> VX$LLIST_SL.ITEM$ = ADDR(NIL);
      233    11810    4                     WHERE$ -> VX$LLIST_SL.NAME.CNT = P$ -> T$C.COUNT;
      234    11811    4                     WHERE$ -> VX$LLIST_SL.NAME.TXT = P$ -> T$C.CHARS;
      235    11812    4                     WHERE$ -> VX$LLIST_SL.PRECEDENCE = PRECEDENCE;
      236    11813    5                     IF PRECEDENCE > VX_SLIB_HEAD$->VX$LLIST_SL.PRECEDENCE THEN DO;
      237    11814                                                /* This shared library has highest
      238    11815                                                   precedence so far */
      239    11816    5                         WHERE$ -> VX$LLIST_SL.LINK$ = VX_SLIB_HEAD$;
      240    11817    5                         WHERE$->VX$LLIST_SL.ITEM$ = VX_SLIB_HEAD$->VX$LLIST_SL.ITEM$;
      241    11818    5                         WHERE$->VX$LLIST_SL.ITEM$->VX$LST.P.NAME_ = VECTOR(WHERE$->
             11818                                  VX$LLIST_SL.NAME);
      242    11819    5                         VX_SLIB_HEAD$ = WHERE$;
      243    11820    5                         WHERE$ = WHERE$ -> VX$LLIST_SL.LINK$;
      244    11821    5                        END;
      245    11822    5                     ELSE DO;
      246    11823                                                /* Insert into list of shared libraries
      247    11824                                                   which is sorted by precedence */
      248    11825    5                         CURR$ = VX_SLIB_HEAD$;
      249    11826    5                         PREV$ = ADDR( VX_SLIB_HEAD$ );
      250    11827    6                         DO WHILE( CURR$ ~= ADDR(NIL) );
      251    11828    6                             IF CURR$->VX$LLIST_SL.PRECEDENCE < PRECEDENCE THEN
      252    11829    6                                 GOTO INSERT_SHAREL;
      253    11830    6                             PREV$ = CURR$;
      254    11831    6                             CURR$ = CURR$ -> VX$LST.LINK$;
      255    11832    6                            END;
      256    11833    5   INSERT_SHAREL:
      257    11834    5                         WHERE$ -> VX$LLIST_SL.LINK$  = CURR$;
      258    11835    5                         PREV$ -> VX$LLIST_SL.LINK$ = WHERE$;
      259    11836    5                        END;
      260    11837                                                /* Map :SHARED_? shared library to
      261    11838                                                   :LIB_? library  */
      262    11839    4                     TSIZE = WHERE$ -> VX$LLIST_SL.NAME.CNT - 8;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:21   
      263    11840    4                     CALL CONCAT( MAP_STRING.CHARS, ':LIB_',
      264    11841    4                             SUBSTR(WHERE$->VX$LLIST_SL.NAME.TXT,8,TSIZE)  );
      265    11842    4                     MAP_STRING.COUNT = TSIZE + 5;
      266    11843    4                    END;
      267    11844    4                 ELSE DO;
      268    11845    4                     TSIZE = VX_OU_HEAD.LIB.COUNT - 8;
      269    11846    4                     CALL CONCAT( MAP_STRING.CHARS, ':LIB_',
      270    11847    4                             SUBSTR(VX_OU_HEAD.LIB.NAME,8,TSIZE)  );
      271    11848    4                     MAP_STRING.COUNT = TSIZE + 5;
      272    11849    4                    END;
      273    11850        /*
      274    11851                                  Search for duplicate in unsat library list  */
      275    11852    3                 P$ = ADDR( MAP_STRING );
      276    11853    3                 CURR$ = VX_O.FIDN$.UNSAT$;
      277    11854    3                 PREV$ = ADDR( VX_O.FIDN$.UNSAT$ );
      278    11855    4                 DO WHILE( CURR$ ~= ADDR(NIL) );
      279    11856    4                     IF P$->T$C.CHARS = CURR$ -> VX$LST.P.NAME_.NAME$->T$C.CHARS
      280    11857    4                     THEN
      281    11858    4                         IF CURR$ -> VX$LST.P.B.ACCT  AND
      282    11859    4                                 CURR$ -> VX$LST.P.ACCT_.ACCT$ -> F$ACCT_ = VX_SYS
      283    11860    4                         THEN
      284    11861    4                             GOTO ALREADY_THERE;
      285    11862    4                     PREV$ = CURR$;
      286    11863    4                     CURR$ = CURR$ -> VX$LST.LINK$;
      287    11864    4                    END;                   /* do while ( CURR$ ~= addr(nil) ) */
      288    11865        /*
      289    11866                                      Add to unsat library list        */
      290    11867    3                 CALL VXS$LST( ALL$, P$, 2/*@LF*/, 0/*@LF_ULIB*/, ADDR(NIL), 0 );
      291    11868    3                 PREV$ -> VX$LST.LINK$ = ALL$;
      292    11869    3                 ALL$ -> VX$LST.PRIOR$ = PREV$;
      293    11870    3                 ALL$ -> VX$LST.LIB    = '0'B;
      294    11871    3                 ALL$ -> VX$LST.P.ACCT_ = VECTOR( VX_SYS );
      295    11872    3                 ALL$ -> VX$LST.P.B.ACCT = '1'B/*@TRUE_B*/;
      296    11873    3                END;
      297    11874    2            END;
      298    11875    1   ALREADY_THERE:

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:22   
      300    11877    1         IF  VX_OU_HEAD.ALIB.COUNT > 0    AND  VX_OU_HEAD.ALIB.COUNT <= 31  AND
      301    11878    1                 NOT VX_OD.SIN.NOALTSHARELIB AND NOT VX_OD.FID.ALTSHARELIB$
      302    11879    2         THEN DO ;
      303    11880    2             WHERE$ = ADDR( VX_OU_HEAD.ALIB ) ;
      304    11881    2             IF VX_O.FID.ALTSHARELIB$ = ADDR(NIL) THEN GOTO ASL_REQUEST ;
      305    11882    2             PREV$ = VX_O.FID.ALTSHARELIB$ -> VX$LST.P.NAME_.NAME$ ;
      306    11883    3             IF PREV$ -> T$C.CHARS ~= WHERE$ -> T$C.CHARS THEN DO ;
      307    11884        /*E*  ERROR: VXO-E$DUPL_ASL_VX-0
      308    11885              MESSAGE: Subsequent %U1 (Alternate Shared Library) reference ignored.
      309    11886              DESCRIPTION:  The object unit head record specified that an Alternate
      310    11887                            Shared Library (ASL) be used.  However, a different ASL
      311    11888                            was previously referenced, and only one ASL can be processed
      312    11889                            by LINK.  This additional ASL reference will be ignored.
      313    11890        */
      314    11891    3                 VX_EFIELD1 = VX_OU_HEAD.ALIB ;
      315    11892                      %SCREAM ( ERR# = E$DUPL_ASL_VX,
      316    11893                      LEVEL = @E$W_VX,
      317    11894                      MID = "'O'",
      318    11895                      AUX = @E$REFOUOF_VX ) ;
      319    11898    3                 WHERE$ = PREV$ ;
      320    11899    3                END ;
      321    11900    3             ELSE DO ;
      322    11901    3   ASL_REQUEST:
      323    11902        /*E*  ERROR:  VXO-E$REQU_ASL_VX-0
      324    11903              MESSAGE:  %U1 (Alternate Shared Library) referenced.
      325    11904              DESCRIPTION:  The object unit head record specified that an Alternate
      326    11905                            Shared Library (ASL) be used.
      327    11906        */
      328    11907    3                 VX_EFIELD1 = VX_OU_HEAD.ALIB ;
      329    11908                      %SCREAM ( ERR# = E$REQU_ASL_VX,
      330    11909                      LEVEL = @E$I_VX,
      331    11910                      MID = "'O'",
      332    11911                      AUX = E$REFOUOF_SPLIT1_VX ) ;
      333    11914    3                 IF VX_O.FID.ALTSHARELIB$ ~= ADDR(NIL) THEN GOTO SKIP_ASL ;
      334    11915    3                END; /* If PREV$ -> T$C.CHARS ~= WHERE$ -> T$C.CHARS then do; */
      335    11916    2             CURR$ = VX_CURR$;
      336    11917    3             DO WHILE( CURR$ ~= ADDR(NIL) );
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:23   
      337    11918    3                 IF CURR$ -> VX$NODE.HAVE_ASL THEN GOTO SKIP_ASL;
      338    11919    3                 CURR$ = CURR$ -> VX$NODE.FATHER$;
      339    11920    3                END;
      340    11921    2             CALL VXS$LST(  ALL$,
      341    11922    2                     WHERE$,
      342    11923    2                     2/*@LF*/,
      343    11924    2                     1/*@LF_ALIB*/,
      344    11925    2                     ADDR(NIL),
      345    11926    2                     0    );
      346    11927    2             VX_CURR$ -> VX$NODE.HAVE_ASL = '1'B/*@TRUE_B*/;
      347    11928    2             ALL$ -> VX$LST.P.ACCT_ = VECTOR( VX_SYS );
      348    11929    2             VX_O.FID.ALTSHARELIB$ = ALL$;
      349    11930    2             VX_CURR$ -> VX$NODE.TAIL$ -> VX$LST.LINK$ = ALL$;
      350    11931    2             VX_CURR$ -> VX$NODE.TAIL$ = ALL$;
      351    11932    2            END;                       /* If VX_OU_HEAD.ALIB.COUNT > 0 then do; */
      352    11933    1   SKIP_ASL:

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:24   
      354    11935        /* Now do a partial determination of the receiving buffer size */
      355    11936    1         IF VX_OU_HEAD.LB_SIZE > VX_REC_BUF_SIZE THEN VX_REC_BUF_SIZE = VX_OU_HEAD.
             11936                  LB_SIZE;
      356    11937    1         IF VX_OU_HEAD.PR_SIZE > VX_REC_BUF_SIZE THEN VX_REC_BUF_SIZE = VX_OU_HEAD.
             11937                  PR_SIZE;
      357    11938    1         IF VX_OU_HEAD.RL_SIZE > VX_REC_BUF_SIZE THEN VX_REC_BUF_SIZE = VX_OU_HEAD.
             11938                  RL_SIZE;
      358    11939    1         IF VX_PASS2_REF.OU.MAX.RN < VX_OU_HEAD.REC.RN_SIZE THEN VX_PASS2_REF.OU.MAX.RN
             11939                  = VX_OU_HEAD.REC.RN_SIZE;
      359    11940    1         IF VX_PASS2_REF.OU.MAX.ER < VX_OU_HEAD.REC.ER_SIZE THEN VX_PASS2_REF.OU.MAX.ER
             11940                  = VX_OU_HEAD.REC.ER_SIZE;
      360    11941    1         IF VX_PASS2_REF.OU.MAX.DR < VX_OU_HEAD.REC.DR_SIZE THEN VX_PASS2_REF.OU.MAX.DR
             11941                  = VX_OU_HEAD.REC.DR_SIZE;
      361    11942    1         IF VX_PASS2_REF.OU.MAX.SR < VX_OU_HEAD.REC.SR_SIZE THEN VX_PASS2_REF.OU.MAX.SR
             11942                  = VX_OU_HEAD.REC.SR_SIZE;
      362    11943
      363    11944        /* Check compaction for ref names */
      364    11945    1         IF  VX_INHIBIT_COMPACTION = 0/*@NO*/
      365    11946    1                 AND  VX_CURR$ -> VX$NODE.L_SIZE.RN > VX_RN_THRESHOLD
      366    11947    1         THEN CALL VXO$COMPACT;            /* Yes, compaction to be done */

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:25   
      368    11949    1         TSIZE = VX_OU_HEAD.SEVLEV;
      369    11950    2         IF TSIZE > VX_O.NUM.REPORT THEN DO;
      370    11951        /*E*  ERROR: VXO-E$REPORT_SEV_VX-0
      371    11952              MESSAGE: Severity = %U1 in object unit %U2;
      372    11953                                      In object file %U3.
      373    11954              DESCRIPTION: Self-explanatory.
      374    11955        */
      375    11956                  %NUMBER( NUM1=TSIZE );
      376    11973    2             VX_EFIELD2 = VX_OK.OUNAME;
      377    11974    2             VX_EFIELD3 = VX_OK.FILE.OFNAME;
      378    11975                  %SCREAM( ERR#=E$REPORT_SEV_VX, LEVEL=@E$N_VX, MID="'O'" );
      379    11978    2            END;                       /* If tsize > VX_O.NUM.REPORT then do; */
      380    11979              %CHECK( SEV=TSIZE);
      381    11982    1         ALL$ = ALLOCATE$;
      382    11983    2         DO I = 0 TO 6;                    /* Typdnam to typsegdef */
      383    11984    2             REC_TYPE = VX_PASS1_REC_TYPE(I); /* Get record type */
      384    11985    2             ALL_TYPE = ALL$ -> VX$WORD_A(REC_TYPE);
             11985                      /*Get segment index for this record type */
      385    11986    3             IF REC_TYPE = %TYPSECT THEN DO;
      386    11987    3                 TSIZE = 32768;            /*  (2**14)*2       */
      387    11988    3                 PAGE = 1024/*@PAGE_SIZE*/;
      388    11989    3                 GET = 1024/*@PAGE_SIZE*/;
      389    11990    3                END;
      390    11991    3             ELSE DO;
      391    11992    3                 HEAD_INX = VX_HEAD_INX(REC_TYPE); /* Get index into head record */
      392    11993    3                 TSIZE = VX_OU_HEAD.REC_A.SIZE(HEAD_INX);
             11993                          /* Get total size for this record type */
      393    11994    3                 PAGE = VX_OU_HEAD.REC_A.PAGE(HEAD_INX); /* Get the page size */
      394    11995    3                 GET = TSIZE;
      395    11996    3                END;
      396    11997    3             IF TSIZE > 0 THEN DO;
      397    11998    3                 IF REC_TYPE = %TYPSECT  OR  REC_TYPE = %TYPEDEF  OR  REC_TYPE = %
             11998                          TYPSDEF
      398    11999    4                         OR REC_TYPE = %TYPSEGDEF THEN DO;
      399    12000    5                     IF MOD( PAGE, 2 ) ~= 0 THEN DO;
             12000                              /* Not an even page size - bitch */
      400    12001        /*E*  ERROR: VXO-E$ODD_PAGE_SIZE_VX-0
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:26   
      401    12002              MESSAGE: Object language error: Odd page size.
      402    12003                       Page size = %U1.  Record type = %U2.
      403    12004              DESCRIPTION: Self-explanatory.
      404    12005        */
      405    12006                              %NUMBER(
      406    12007                              NUM1=PAGE, SIZE1=6, BASE1=10,
      407    12008                              NUM2=REC_TYPE, SIZE2=3, BASE2=10 );
      408    12025                              %SCREAM(
      409    12026                              ERR#=E$ODD_PAGE_SIZE_VX,
      410    12027                              MID="'O'",
      411    12028                              LEVEL=@E$F_VX,
      412    12029                              AUX=@E$OUOF_VX);
      413    12032    5                        END;
      414    12033    4                    END;
      415    12034                      %ALLOCATE(
      416    12035                      PTR$=START$,
      417    12036                      TYPE=ALL_TYPE,
      418    12037                      SIZE=GET);
      419    12044    4                 IF REC_TYPE = %TYPSECT THEN DO;
      420    12045    4                     IF VX_CURR$ -> VX$NODE.L_START_A$(REC_TYPE) = ADDR(NIL) THEN
      421    12046    4                         VX_CURR$ -> VX$NODE.L_START_A$(REC_TYPE) = START$;
      422    12047                                                /* Set start for this record type */
      423    12048    4                    END;
      424    12049    4                 IF VX_IN_PATCH THEN DO;
      425    12050    4                     IF  ( REC_TYPE = %TYPEDEF OR REC_TYPE = %TYPSDEF )
      426    12051    5                             AND VX_LIB_USED THEN DO ;
      427    12052    5                         IF VX_CURR$->VX$NODE.L_START_A$(REC_TYPE) = ADDR (NIL) THEN
      428    12053    5                             VX_CURR$->VX$NODE.L_START_A$(REC_TYPE) = START$ ;
      429    12054    5                         IF  VX_CURR$ -> VX$NODE.L_STOP_A$(REC_TYPE) = ADDR (NIL)
      430    12055    5                         THEN
      431    12056    5                             VX_CURR$ -> VX$NODE.L_STOP_A$(REC_TYPE) = PINCRW ( START$,
             12056                                      2 ) ;
      432    12057    5                         ELSE
      433    12058    5                             START$ = PINCRW(VX_CURR$->VX$NODE.L_STOP_A$(REC_TYPE),2) ;
      434    12059    5                        END ;
      435    12060    4                    END;
      436    12061    3                 CALL VXU$PREAD(
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:27   
      437    12062    3                         NPAGE,
      438    12063    3                         TSIZE_READ,
      439    12064    3                         0/*@OF*/,
      440    12065    3                         0/*@OF*/,
      441    12066    3                         REC_TYPE,
      442    12067    3                         START$,
      443    12068    3                         PAGE,
      444    12069    3                         TSIZE,
      445    12070    3                         ALL_TYPE,
      446    12071    3                         GET,
      447    12072    3                         VX_CURR$,
      448    12073    3                         SOURCE
      449    12074    3                         );
      450    12075    4                 IF REC_TYPE = %TYPSECT THEN DO; /* Expand sections record */
      451    12076    4                     VX_LAST_SC$ = START$;
      452    12077    4                     VX_LAST_SC_BASE = VX_LAST_SC_BASE + VX_CURR_SC_ENTRIES;
      453    12078    4                     VX_CURR_SC_ENTRIES = TSIZE_READ/ SIZEW( VX$SECT );
      454    12079    4                     IF VX_SC_START$ = ADDR(NIL) THEN VX_SC_START$ = START$;
      455    12080    5                     IF GET - TSIZE_READ < TSIZE_READ + SIZEW( VX$SC ) THEN DO;
      456    12081    5                         HALVE = TSIZE_READ + TSIZE_READ + SIZEW( VX$SC ) - GET;
      457    12082                              %ALLOCATE(
      458    12083                              PTR$=P$,
      459    12084                              TYPE=@SC_DS_1,
      460    12085                              SIZE=HALVE);
      461    12092    5                         GET = GET + HALVE;
      462    12093    5                        END;
      463    12094    4                     WHERE$ = PINCRW( START$, TSIZE_READ + SIZEW( VX$SC ) );
      464    12095    4                     VX_TARGET_COUNT = TSIZE_READ * 4/*@CHAR_WORD*/;
      465    12096    4                     VX_SOURCE_COUNT = VX_TARGET_COUNT;
      466    12097    4                     WHERE$ -> VX$TARGET_C    =    START$ -> VX$SOURCE_C;
      467    12098    4                     P$ = WHERE$;
      468    12099    4                     Q$ = START$;
      469    12100    4                     R$ = PINCRW( WHERE$, TSIZE_READ );
      470    12101    5                     DO WHILE ( P$ < R$ );
      471    12102    5                         SC_TYPE          = P$ -> VX$SECT.TYPE;
      472    12103    5                         Q$ -> VX$SC      = P$ -> VX$SECT;
      473    12104    5                         Q$ -> VX$SC.SIZE = P$ -> VX$SECT.SIZE;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:28   
      474    12105    5                         IF Q$ -> VX$SC.ATTR.SEGMENT
      475    12106    5                         THEN Q$ -> VX$SC.SEG = P$ -> VX$SECT.SEG_NPOINTER;
      476    12107    5                         Q$ -> VX$SC.NODE# = VX_CURR$ -> VX$NODE.NUM;
      477    12108    6                         DO CASE( SC_TYPE );
      478    12109    6                           CASE( %RLCOMSECTION );
      479    12110    6                             VX_SC_ROOT_LBL_COM = VX_SC_ROOT_LBL_COM + 1;
      480    12111    6                             GOTO INSERT_UNTO_CHAIN;
      481    12112    6                           CASE( %LCOMSECTION );
      482    12113    6                             VX_SC_LBL_COM = VX_SC_LBL_COM + 1;
      483    12114    6                             GOTO INSERT_UNTO_CHAIN;
      484    12115    6                           CASE( %ROLCOMSECTION,%RORLCOMSECTION );
      485    12116    6                             SC_TYPE = %DCBSECTION;
      486    12117    6                             GOTO INSERT_UNTO_CHAIN;
      487    12118    6                           CASE(     %UCOMSECTION    );
      488    12119    6                             VX_SC_BLK_COM = VX_SC_BLK_COM + 1;
      489    12120    6                             TAIL$ = VX_CURR$;
      490    12121    6                             MAKE$ = ADDR(NIL);
      491    12122    6   CHECK_UP:
      492    12123    6                             IF TAIL$ -> VX$NODE.ALL_BLK_COM THEN MAKE$ = TAIL$;
      493    12124    6                             TAIL$ = TAIL$ -> VX$NODE.FATHER$;
      494    12125    6                             IF TAIL$ ~= ADDR(NIL) THEN GOTO CHECK_UP;
      495    12126        /**/
      496    12127    7                             IF MAKE$ = ADDR(NIL) THEN DO; /* Allocate for this node */
      497    12128    7                                 MAKE$ = VX_CURR$;
      498    12129    7                                 VX_BLK_COM_COUNT = VX_BLK_COM_COUNT + 1;
      499    12130    7                                 MAKE$ -> VX$NODE.ALL_BLK_COM = '1'B/*@TRUE_B*/;
      500    12131    7                                 MAKE$ -> VX$NODE.BLANK_COMMON$ -> VX$SC = Q$ -> VX$SC;
      501    12132    8                                 IF VX_CHK_BLANK_COM_PROMOTE THEN DO;
      502    12133    9                                     IF VX_SC_BLANK_COM_PROMOTE$ = ADDR(NIL) THEN DO;
      503    12134    9                                         VX_SC_BLANK_COM_PROMOTE$ = MAKE$;
      504    12135    9                                         VX_SC_BLANK_COMMON = Q$ -> VX$SC;
      505    12136    9                                        END;
      506    12137    9                                     ELSE IF VX_SC_BLANK_COM_PROMOTE$ -> VX$NODE.DEPTH
             12137                                              > MAKE$ -> VX$NODE.DEPTH THEN DO;
      507    12138    9                                             VX_SC_BLANK_COM_PROMOTE$ = MAKE$;
      508    12139    9                                            END;
      509    12140    8                                    END; /* If VX_CHK_BLANK_COM_PROMOTE then do; */
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:29   
      510    12141    7                                END;       /* If MAKE$ = addr(nil) then do; */
      511    12142        /*
      512    12143              Here some allocated above
      513    12144        */
      514    12145    7                             ELSE DO;
      515    12146    7                                 CALL CHK( MAKE$ -> VX$NODE.BLANK_COMMON$, Q$, '1'B );
      516    12147    7                                END;       /* Else do; */
      517    12148        /**/
      518    12149    6                             IF VX_CHK_BLANK_COM_PROMOTE THEN
      519    12150    6                                 CALL CHK( ADDR( VX_SC_BLANK_COMMON ),
      520    12151    6                                         MAKE$ -> VX$NODE.BLANK_COMMON$, '0'B );
      521    12152    6   INSERT_UNTO_CHAIN:
      522    12153    6                             INDX  = SC_TYPE - %UCOMSECTION;
      523    12154    7                             IF VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX) = ADDR(NIL)
             12154                                      THEN DO;
      524    12155    7                                 VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX) = Q$;
      525    12156    7                                 TAIL$ = Q$;
      526    12157    7                                END;
      527    12158    6                             ELSE TAIL$ = VX_CURR$ -> VX$NODE.L_SC_STOP_A$(INDX);
      528    12159    6                             LAST_DISP = POFFW( Q$, VX_SC_START$ );
      529    12160    6                             TAIL$ -> VX$SC.COM_LINK  = LAST_DISP;
      530    12161    6                             Q$ -> VX$SC.COM_LINK = LAST_DISP;
      531    12162    6                             VX_CURR$ -> VX$NODE.L_SC_STOP_A$(INDX) = Q$;
      532    12163    6                           END;            /* Do case( SC_TYPE ); */
      533    12164    5                         Q$ = PINCRW( Q$, SIZEW(VX$SC) );
      534    12165    5                         P$ = PINCRW( P$, SIZEW(VX$SECT) );
      535    12166    5                        END;               /* While */
      536    12167    4                     VX_CURR$ -> VX$NODE.L_STOP.SC$ = PINCRW( Q$, -SIZEW(VX$SC) );
      537    12168    4                     VX_CURR$ -> VX$NODE.L_SIZE.SC = POFFW( Q$,
      538    12169    4                             VX_CURR$ -> VX$NODE.L_START.SC$ );
      539    12170    4                     TSIZE_READ = POFFW( Q$, START$ );
      540    12171    4                     IF TSIZE_READ < GET THEN CALL VXF$FREE( ALL_TYPE, GET - TSIZE_READ
             12171                              , 1 );
      541    12172        /* Build high level index structure for sections */
      542    12173    4                     P$ = FID$ -> VX$LST.SC_TAIL$;
      543    12174                          %ALLOCATE(
      544    12175                          PTR$=R$,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:30   
      545    12176                          TYPE=@GDP,
      546    12177                          SIZE="SIZEW(VX$LLIST_SC)");
      547    12184    4                     P$ -> VX$LLIST_SC.LINK$ = R$;
             12184                              /* Chain last list item to new item */
      548    12185    4                     R$ -> VX$LLIST_SC.BASE$ = START$;
             12185                              /* Remember where the sections start for this object unit */
      549    12186    4                     R$ -> VX$LLIST_SC.COUNT = TSIZE_READ / SIZEW( VX$SC ) ;
             12186                              /* And the # of them */
      550    12187    4                     FID$ -> VX$LST.SC_TAIL$ = R$;
             12187                              /* Set tail pointer in fid structure */
      551    12188    4                    END;                   /* If */
      552    12189    3                 ELSE IF TSIZE_READ < GET THEN CALL VXF$FREE( ALL_TYPE, GET -
             12189                          TSIZE_READ, 1 );
      553    12190    3                END;
      554    12191    2            END;
      555    12192        /*
      556    12193                          Process any plover records that exist for this object unit
      557    12194        */
      558    12195    1         IF NOT VX_OD.SIN.NPLOVER THEN CALL VXU$PLOVER( ALLOCATE$ -> VX$WORD_A );
      559    12196    1         RETURN;

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:31   
      561    12198    1   CHK:
      562    12199    1         PROC( PRIM_P$, SEC_P$, WR_MES );
      563    12200    2   DCL PRIM_P$      PTR ALIGNED;
      564    12201    2   DCL SEC_P$       PTR  ALIGNED;
      565    12202    2   DCL WR_MES     BIT(1)    ALIGNED;
      566    12203    2   DCL PRIM$      PTR       ALIGNED   AUTO;
      567    12204    2   DCL SEC$       PTR       ALIGNED   AUTO;
      568    12205    2   DCL SEC_TEMP   UBIN(36)  ALIGNED;
      569    12206    2   DCL PRIM_TEMP  UBIN(36)  ALIGNED;
      570    12207    2   DCL 1 BLANK_COMMON ALIGNED CONSTANT,
      571    12208    2         2 COUNT UBIN(36) UNAL INIT(14),
      572    12209    2         2 CHARS CHAR(14) UNAL INIT('<BLANK COMMON>');
      573    12210        /**/
      574    12211    2         PRIM$ = PRIM_P$;
      575    12212    2         SEC$  = SEC_P$;
      576    12213        /**/
      577    12214        /**/
      578    12215    2         IF PRIM$ -> VX$SC.SIZE < SEC$ -> VX$SC.SIZE THEN PRIM$ -> VX$SC.SIZE = SEC$ ->
             12215                  VX$SC.SIZE;
      579    12216        /**/
      580    12217        /**/
      581    12218    2         SEC_TEMP = SEC$ -> VX$SC.ATTR.ALIGN;
      582    12219    2         PRIM_TEMP = PRIM$ -> VX$SC.ATTR.ALIGN;
      583    12220    3         IF PRIM_TEMP ~= SEC_TEMP THEN DO;
      584    12221    4             IF PRIM_TEMP = 1 OR SEC_TEMP = 1 THEN DO;
      585    12222    5                 IF WR_MES THEN DO;
      586    12223    5                     VX_EFIELD1 = BLANK_COMMON;
      587    12224                          %SCREAM(
      588    12225                          ERR#=E$SC_ALIGN_VX,
      589    12226                          LEVEL=@E$W_VX,
      590    12227                          MID="'T'");
      591    12230    5                    END;                   /* If WR_MES then do; */
      592    12231    4                 IF PRIM_TEMP = 1 THEN PRIM$ -> VX$SC.ATTR.ALIGN = SEC_TEMP;
      593    12232    4                END;               /* If PRIM_TEMP = 1 or SEC_TEMP = 1 then do; */
      594    12233    3             ELSE IF PRIM_TEMP < SEC_TEMP THEN PRIM$ -> VX$SC.ATTR.ALIGN = SEC_TEMP;
      595    12234    3            END;                           /* If PRIM_TEMP ~= SEC_TEMP then do; */
      596    12235        /**/
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:32   
      597    12236        /**/
      598    12237    2         SEC_TEMP = SEC$ -> VX$SC.ATTR.INT;
      599    12238    2         PRIM_TEMP = PRIM$ -> VX$SC.ATTR.INT;
      600    12239    2         IF PRIM_TEMP = 3 THEN GOTO CHK_MES;
      601    12240    3         IF SEC_TEMP ~= 0 AND SEC_TEMP ~= 3 THEN DO;
      602    12241    4             IF PRIM_TEMP ~= 0 AND PRIM_TEMP ~= SEC_TEMP THEN DO;
      603    12242    4   CHK_MES:
      604    12243    5                 IF WR_MES THEN DO;
      605    12244    5                     VX_EFIELD1 = BLANK_COMMON;
      606    12245    5                     VX_EFIELD2.COUNT = 3;
      607    12246    5                     VX_EFIELD2.CHARS = 'UTS';
      608    12247                          %SCREAM(
      609    12248                          ERR#=E$SC_INIT_VX,
      610    12249                          LEVEL=@E$W_VX,
      611    12250                          MID="'T'");
      612    12253    5                    END;                   /* If WR_MES then do; */
      613    12254    4                 PRIM$ -> VX$SC.ATTR.INT = 1;
      614    12255    4                END;                       /* If PRIM_TEMP ~= 0 ... */
      615    12256    4             ELSE DO;
      616    12257    4                 PRIM$ -> VX$SC.ATTR.INT = SEC_TEMP;
      617    12258    4                END;                       /* Else do; */
      618    12259    3            END;               /* If SEC_TEMP ~= 0 and SEC_TEMP ~= 3 then do; */
      619    12260        /**/
      620    12261    2   END CHK;                                /* Proc; */
      621    12262
      622    12263
      623    12264
      624    12265    1   END VXO$OBJECT;

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:33   
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXO$OBJECT.

   Procedure VXO$OBJECT requires 1316 words for executable code.
   Procedure VXO$OBJECT requires 90 words of local(AUTO) storage.

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:34   

 Object Unit name= VXO$OBJECT                                 File name= VXO$OBJECT.:E05TOU
 UTS= JUL 30 '97 08:27:12.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2  RoData even  UTS     23     27  VXO$OBJECT
    3   Proc  even  none  1316   2444  VXO$OBJECT
    4  RoData even  none    99    143  VXO$OBJECT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        3  VXO$OBJECT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 VXE$ERROR
         yes           Std       3 VXA$GET
         yes           Std      12 VXU$PREAD
         yes           Std       5 VXD$B2C
         yes           Std       0 VXO$COMPACT
         yes           Std       3 VXF$FREE
 yes     yes           Std       1 VXU$PLOVER
 yes     yes           Std       6 VXS$LST
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:35   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_OK                                 VX_OU_HEAD
     VX_SC_START$                          VX_SC_ROOT_LBL_COM                    VX_SC_LBL_COM
     VX_SC_BLK_COM                         VX_LAST_SC$                           VX_LAST_SC_BASE
     VX_CURR_SC_ENTRIES                    VX_TREE_SLIB_NAME                     VX_INHIBIT_COMPACTION
     VX_IN_PATCH                           VX_LIB_USED                           VX_CURR$
     VX_ERRORS                             VX_ERR_SEV                            VX_M_FREE
     VX_M_ALL                              VX_M_BASE_PTR                         VX_O
     VX_OD                                 VX_ON                                 VX_EFIELD1
     VX_EFIELD2                            VX_EFIELD3                            VX_TARGET_COUNT
     VX_SOURCE_COUNT                       VX_SLIB_HEAD$                         VX_SLIB_INIT$
     VX_REC_BUF_SIZE                       VX_SYS                                VX_PASS1_REC_TYPE
     VX_HEAD_INX                           VX_PASS2_REF                          VX_SHARED_LIB_ASS
     VX_RN_THRESHOLD                       VX_BLK_COM_COUNT                      VX_SC_BLANK_COM_PROMOTE$
     VX_CHK_BLANK_COM_PROMOTE              VX_SC_BLANK_COMMON                    B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:36   


        1        1        /*M* VXO$OBJECT - processes an object unit for pass 1.   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CCC,AIC,CTI=8 */
        8        8        VXO$OBJECT:
        9        9              PROC( FID$, SOURCE, ALLOCATE$ );

      9  3 000000   000000 700200 xent  VXO$OBJECT   TSX0  ! X66_AUTO_3
         3 000001   000132 000003                    ZERO    90,3

       10       10        %INCLUDE VX_INC_C;
       11    10726        %P$LIT( NAME=P$LIT, STCLASS="BASED", LEN="P$LIT.COUNT" );
       12    10779        %VX$NODE;

             10791    1   /*******************************************************************************
             10792    1   *                                                                              *
             10793    1   *                          VX$NODE                                                *
             10794    1   *                                                                              *
             10795    1   *******************************************************************************/

             10811    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10812    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10813    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10814    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10815    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10816    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10817                              to list of file nodes for this node            */
             10818    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10819    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10819                  /* Head pointer to shared library list */
             10820    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10820                  /* Head pointer to list of shared libraries
             10821                                          which have been mapped to included libraries */
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:37   
             10822    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10823    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10824    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10825    1         2 ADDR_START REDEF  ADDR_START_A,
             10826    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10827    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10828    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10829    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10830    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10831    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10832    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10833    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10834    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10835    1         2 START_PAGE# REDEF START_PAGE#_A,
             10836    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10837    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10838    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10839    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10840    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10841    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10842    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10843    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10844    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10844                  /* Starting pointer for common sections for this node */
             10845    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10845                  /* Stopping pointer for common sections for this node */
             10846    1         2 L_START,
             10847    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10848    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10849    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10850    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10851    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10852    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10853    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10854    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10855    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10856    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:38   
             10857    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10858    1         2 L_STOP,
             10859    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10860    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10861    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10862    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10863    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10864    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10865    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10866    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10867    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10868    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10869    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10870    1         2 L_SIZE,
             10871    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10872    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10873    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10874    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10875    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10876    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10877    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10878    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10879    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10880    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10881    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10882    1         2 L_PREV_SIZE,
             10883    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10884    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10885    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10886    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10887    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10888    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10889    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10890    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10891    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10892    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10893    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:39   
             10894    1         2 BIT_MAP                ALIGNED,
             10895    1           3 DATA                  ALIGNED,
             10896    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10897    1           3 RPROC                 ALIGNED,
             10898    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10899    1           3 ROS                   ALIGNED,
             10900    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10901    1         2 L_SC_START,
             10902    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10903    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10904    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10905    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10906    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10907    1         2 L_SC_STOP,
             10908    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10909    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10910    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10911    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10912    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10913    1         2 PROMOTE_HEAD,
             10914    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10915    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10916    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10917    1         2 PROMOTE_TAIL,
             10918    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10919    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10920    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10921    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10922    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10923    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10924    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10925    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       13    10929        %VX$LST;

             10942    1   /*******************************************************************************
             10943    1   *                                                                              *
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:40   
             10944    1   *                          VX$LST                                                 *
             10945    1   *                                                                              *
             10946    1   *******************************************************************************/

             10951    1   DCL 1 VX$LST                          ALIGNED BASED,
             10952    1         2 LINK$        PTR,               /* Link to next item                  */
             10953    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             10954    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             10955    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             10956    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             10957    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             10958    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             10959    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             10960    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             10961    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             10962    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             10963    1         2 P,
             10964    1           3 NAME_       ALIGNED,
             10965    1             4 BOUND      UBIN(20)  UNAL,
             10966    1             4 FLAGSV     UBIN(11)  UNAL,
             10967    1             4 *          BIT(5)    UNAL,
             10968    1             4 NAME$      PTR,
             10969    1           3 ACCT_       ALIGNED,
             10970    1             4 BOUND      UBIN(20)  UNAL,
             10971    1             4 FLAGSV     UBIN(11)  UNAL,
             10972    1             4 *          BIT(5)    UNAL,
             10973    1             4 ACCT$      PTR,
             10974    1           3 PASS_       ALIGNED,
             10975    1             4 BOUND      UBIN(20)  UNAL,
             10976    1             4 FLAGSV     UBIN(11)  UNAL,
             10977    1             4 *          BIT(5)    UNAL,
             10978    1             4 PASS$      PTR,
             10979    1           3 SN_         ALIGNED,
             10980    1             4 BOUND      UBIN(20)  UNAL,
             10981    1             4 FLAGSV     UBIN(11)  UNAL,
             10982    1             4 *          BIT(5)    UNAL,
             10983    1             4 SN$        PTR,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:41   
             10984    1           3 WSN_        ALIGNED,
             10985    1             4 BOUND      UBIN(20)  UNAL,
             10986    1             4 FLAGSV     UBIN(11)  UNAL,
             10987    1             4 *          BIT(5)    UNAL,
             10988    1             4 WSN$       PTR,
             10989    1           3 B           ALIGNED,
             10990    1             4 RES        BIT(1)    UNAL,
             10991    1             4 ASN        BIT(1)    UNAL,
             10992    1             4 ACCT       BIT(1)    UNAL,
             10993    1             4 *          BIT(33)   UNAL,
             10994    1           3 RES         CHAR(4)   ALIGNED,
             10995    1           3 ASN         UBIN(36)  ALIGNED;
       14    10998        %VX$LLIST;

             11010    1   /*******************************************************************************
             11011    1   *                                                                              *
             11012    1   *                          VX$LLIST                                               *
             11013    1   *                                                                              *
             11014    1   *******************************************************************************/

             11019    1   DCL 1 VX$LLIST                BASED     ALIGNED,
             11020    1         2 LINK$                  PTR  ALIGNED,
             11021    1         2 ITEM$                  PTR  ALIGNED;
       15    11024        %VX$LLIST_SL;

             11036    1   /*******************************************************************************
             11037    1   *                                                                              *
             11038    1   *                          VX$LLIST_SL                                            *
             11039    1   *                                                                              *
             11040    1   *******************************************************************************/

             11045    1   DCL 1 VX$LLIST_SL             BASED     ALIGNED,
             11046    1         2 LINK$                  PTR  ALIGNED,
             11047    1         2 ITEM$                  PTR  ALIGNED,
             11048    1         2 PRECEDENCE            UBIN WORD,
             11049    1         2 NAME ,
             11050    1           3 CNT UBIN BYTE UNAL,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:42   
             11051    1           3 TXT CHAR(31);
       16    11054        %VX$LLIST_SC;

             11066    1   /*******************************************************************************
             11067    1   *                                                                              *
             11068    1   *                          VX$LLIST_SC                                            *
             11069    1   *                                                                              *
             11070    1   *******************************************************************************/

             11075    1   DCL 1 NAME               BASED     ALIGNED,
             11076    1         2 LINK$             PTR,
             11077    1         2 BASE$             PTR,
             11078    1         2 COUNT             UBIN(36);
       17    11081        %VX$SC;

             11094    1   /*******************************************************************************
             11095    1   *                                                                              *
             11096    1   *                          VX$SC                                                 *
             11097    1   *                                                                              *
             11098    1   *******************************************************************************/

             11103    1   DCL 1 VX$SC BASED ALIGNED,
             11104    1         2 SEG UBIN(3) UNAL,
             11105                /*K*  SEG - The segment number of this section */
             11106    1         2 TYPE UBIN(6) UNAL,
             11107                /*K*  TYPE -
             11108                      Type code      Section type
             11109                      ---------      ------------
             11110                          0          Data control section with write access.
             11111                          1          Procedure control section.
             11112                          2          Unlabeled common, name pointer must be zero.
             11113                          3          Labeled common, with mandatory name pointer.
             11114                                     This is for labeled common which must be
             11115                                     in the root.
             11116                          4          Labeled common, with mandatory name pointer.
             11117                                     This is for labeled common which need not
             11118                                     be in the root.
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:43   
             11119                          5          DCB, word 1 is name pointer.
             11120                          6          Data control section with read only access,
             11121                                     word 1 = 0 or name pointer.      */
             11122    1         2 EMPTY BIT(1) UNAL,
             11123                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11124                      section is of size zero.  */
             11125    1         2 ATTR UNAL,
             11126    1           3 INT  UBIN(2) UNAL,
             11127                  /*K*  INT is the Section initialization.  */
             11128    1           3 SEGMENT BIT(1) UNAL,
             11129                  /*K* SEGMENT is set if the Section is defined in a data
             11130                       segment.  */
             11131    1           3 ALL BIT(1) UNAL,
             11132                  /*K*  ALL is set if the Section is allocated.  */
             11133    1           3 PRE_DCB BIT(1) UNAL,
             11134                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11135    1           3 MES_INIT BIT(1) UNAL,
             11136    1           3 ALIGN UBIN(2) UNAL,
             11137                  /*K*  ALIGN is the Section alignment.  */
             11138    1         2 ADDRESS UBIN HALF UNAL,
             11139                /*K*  ADDRESS is the address within the Instruction Segment of
             11140                      the entry point of the external procedure.  */
             11141    1         2 NAME_DISP SBIN HALF UNAL,
             11142                /*K*  NAME_DISP is the Name index.  */
             11143    1         2 SIZE UBIN HALF UNAL,
             11144                /*K*  SIZE is the size, in words, of the section.  */
             11145    1         2 NODE# UBIN HALF UNAL,
             11146                /*K*  NODE# is the Node number of section.  */
             11147    1         2 COM_LINK UBIN HALF UNAL;
             11148                /*K*  COM_LINK is used internally by linker to link common sections */

             11158    1   /*******************************************************************************
             11159    1   *                                                                              *
             11160    1   *                          VX$SECT                                                *
             11161    1   *                                                                              *
             11162    1   *******************************************************************************/

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:44   
             11167    1   DCL 1 VX$SECT BASED ALIGNED,
             11168    1         2 TYPE UBIN BYTE UNAL,
             11169                /*K*  TYPE -
             11170                      Type code      Section type
             11171                      ---------      ------------
             11172                          0          Data control section with write access.
             11173                          1          Procedure control section.
             11174                          2          Unlabeled common, name pointer must be zero.
             11175                          3          Labeled common, with mandatory name pointer.
             11176                                     This is for labeled common which must be
             11177                                     in the root.
             11178                          4          Labeled common, with mandatory name pointer.
             11179                                     This is for labeled common which need not
             11180                                     be in the root.
             11181                          5          DCB, word 1 is name pointer.
             11182                          6          Data control section with read only access,
             11183                                     word 1 = 0 or name pointer.
             11184                          7          Constant labeled common, with mandatory name pointer.
             11185                                     This is for labeled common which must be
             11186                                     in the root.
             11187                          8          Constant labeled common, with mandatory name pointer.
             11188                                     This is for labeled common which need not
             11189                                     be in the root.                        */
             11190    1         2 * BIT(1),
             11191                /*K*  * is reserved for future use and must be zero. */
             11192    1         2 INITZERO BIT(1),
             11193                /*K*  INITZERO - if 1, initialize with zero.  */
             11194    1         2 INITUTS BIT(1),
             11195                /*K*  INITUTS - if 1, initialize with UTS.  */
             11196    1         2 SEGMENT BIT(1),
             11197                /*K*  SEGMENT - if 1, specifies that this section is
             11198                                to be placed in the segment specified by
             11199                                SEG_NPOINTER.  */
             11200    1         2 * BIT(3),
             11201                /*K*  * is reserved for future use and must be zero. */
             11202    1         2 BOUND UBIN(2) UNAL,
             11203                /*K*  BOUND - bits 6-7 - defines starting location.
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:45   
             11204                              00 - starts on even word
             11205                              01 - starts on odd word
             11206                              10 - starts on multiple of 8
             11207                              11 - starts on page boundary     */
             11208    1         2 SIZE UBIN HALF UNAL,
             11209                /*K*  SIZE is the size, in words, of the section.  */
             11210    1         2 NPOINTER SBIN HALF UNAL,
             11211                /*K*  NPOINTER is the word displacement into the name record
             11212                      (TYPE 1) locating the name of this section.  If the
             11213                      field is negative, the section has no name.  */
             11214    1         2 MBZ UBIN HALF UNAL,
             11215                /*K*  MBZ is reserved for future expansion and must be zero. */
             11216    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11217                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11218                      Section.  The name must be a valid segment name
             11219                      recognized by the linker.  */
             11220    1         2 G66 REDEF MBZ,
             11221                /*K*  G66 is not used on CP-6. */
             11222    1           3 * BIT(9),
             11223    1           3 NSAB BIT(9);
       18    11226        %TMPLT;

             11238    1   /*******************************************************************************
             11239    1   *                                                                              *
             11240    1   *                          TMPLT                                                 *
             11241    1   *                                                                              *
             11242    1   *******************************************************************************/

             11247    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11248    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11249    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11250    1         2 W       REDEF     A,            /* By name                            */
             11251    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11252    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       19    11255        %VX$WORD;

             11267    1   /*******************************************************************************
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:46   
             11268    1   *                                                                              *
             11269    1   *                          VX$WORD                                                *
             11270    1   *                                                                              *
             11271    1   *******************************************************************************/

             11276    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             11277    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             11278    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             11279    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             11280        /**/
             11281    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             11282    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             11283    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             11284    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
       20    11287        %T$C;

             11299    1   /*******************************************************************************
             11300    1   *                                                                              *
             11301    1   *                          T$C                                                 *
             11302    1   *                                                                              *
             11303    1   *******************************************************************************/

             11308    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11309    1         2 COUNT        UBIN( 9) UNAL,
             11310    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11311    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11312    1         2 COUNT        UBIN( 9) UNAL,
             11313    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       21    11316        %SET LISTMAC='1'B;
       22    11317        %SET LISTDIR='0'B;

             11327    1   /*******************************************************************************
             11328    1   *                                                                              *
             11329    1   *                          SUBS                                                 *
             11330    1   *                                                                              *
             11331    1   *******************************************************************************/

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:47   

             11386    1   /*******************************************************************************
             11387    1   *                                                                              *
             11388    1   *                          PARAMETERS                                             *
             11389    1   *                                                                              *
             11390    1   *******************************************************************************/

       28    11394    1   DCL FID$                 PTR       ALIGNED;
       29    11395    1   DCL SOURCE               SBIN WORD ALIGNED;
       30    11396    1   DCL ALLOCATE$            PTR       ALIGNED;

             11405    1   /*******************************************************************************
             11406    1   *                                                                              *
             11407    1   *                          CHAR                                                 *
             11408    1   *                                                                              *
             11409    1   *******************************************************************************/

       32    11413    1   DCL 1 MAP_STRING ALIGNED AUTO,
       33    11414    1         2 COUNT UBIN(9) UNAL,
       34    11415    1         2 CHARS CHAR(31) UNAL;

             11424    1   /*******************************************************************************
             11425    1   *                                                                              *
             11426    1   *                          ENTRY                                                 *
             11427    1   *                                                                              *
             11428    1   *******************************************************************************/

             11433    1   DCL VXE$ERROR       ENTRY(4);
             11434    1   DCL VXE$ERR         ENTRY(3);
             11435    1   DCL VXE$MERC        ENTRY;
             11436    1   DCL VXE$ERRMSG      ENTRY(3);
             11437    1   DCL VXR$READ        ENTRY( 3 );
             11438    1   DCL VXW$WRITE       ENTRY( 3 );
             11439    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11440    1   DCL VXD$B2C         ENTRY( 5 );
             11441    1   DCL VXD$C2B         ENTRY( 3 );
             11442    1   DCL VXA$GET         ENTRY( 3 );
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:48   
             11443    1   DCL VXF$FREE        ENTRY( 3 );
             11444    1   DCL VXQ$SORT        ENTRY( 7 );
             11445    1   DCL VXY$YESNO       ENTRY( 1 );
             11448    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11449    1   DCL VXF$CLOSE       ENTRY(3);
             11450    1   DCL VXU$PREAD       ENTRY(12);
             11451    1   DCL VXK$KEY         ENTRY(4);
             11452    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11453    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       38    11455    1   DCL VXS$LST         ENTRY(6)  ALTRET;
       39    11456    1   DCL VXO$COMPACT     ENTRY;
       40    11457    1   DCL VXU$PLOVER      ENTRY(1) ALTRET ;

             11466    1   /*******************************************************************************
             11467    1   *                                                                              *
             11468    1   *                          PTR                                                 *
             11469    1   *                                                                              *
             11470    1   *******************************************************************************/

             11475    1   DCL P$         PTR       ALIGNED AUTO;
             11476    1   DCL Q$         PTR       ALIGNED AUTO;
             11477    1   DCL R$         PTR       ALIGNED AUTO;
       43    11479    1   DCL ALL$            PTR  ALIGNED   AUTO;
       44    11480    1   DCL CURR$           PTR  ALIGNED   AUTO;
       45    11481    1   DCL PREV$           PTR  ALIGNED   AUTO;
       46    11482    1   DCL WHERE$          PTR  ALIGNED   AUTO;
       47    11483    1   DCL START$          PTR  ALIGNED   AUTO;
       48    11484    1   DCL TAIL$           PTR  ALIGNED   AUTO;
       49    11485    1   DCL MAKE$           PTR  ALIGNED   AUTO;
       50    11486    1   DCL ED_START$           PTR  ALIGNED   AUTO;
       51    11487    1   DCL RN_START$           PTR  ALIGNED   AUTO;
       52    11488    1   DCL ER_START$           PTR  ALIGNED   AUTO;
       53    11489    1   DCL TEMP_ER_START$           PTR  ALIGNED   AUTO;
       54    11490    1   DCL TEMP_RN_START$           PTR  ALIGNED   AUTO;
       55    11491    1   DCL ED_STOP$           PTR  ALIGNED   AUTO;
       56    11492    1   DCL ER_STOP$           PTR  ALIGNED   AUTO;
       57    11493    1   DCL TEMP_ER_STOP$           PTR  ALIGNED   AUTO;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:49   
       58    11494    1   DCL TEMP_RN_STOP$           PTR  ALIGNED   AUTO;
       59    11495    1   DCL CURR_ER_START$          PTR  ALIGNED   AUTO;

             11504    1   /*******************************************************************************
             11505    1   *                                                                              *
             11506    1   *                          UBIN                                                 *
             11507    1   *                                                                              *
             11508    1   *******************************************************************************/

             11513    1   DCL I          UBIN(36) ALIGNED AUTO;
             11514    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11515    1   DCL J          UBIN(36) ALIGNED AUTO;
             11516    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11517    1   DCL K          UBIN(36) ALIGNED AUTO;
             11518    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11519    1   DCL L          UBIN(36) ALIGNED AUTO;
             11520    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       62    11522    1   DCL REC_TYPE        UBIN(36)  ALIGNED   AUTO;
       63    11523    1   DCL ALL_TYPE        UBIN(36)  ALIGNED   AUTO;
       64    11524    1   DCL HEAD_INX        UBIN(36)  ALIGNED   AUTO;
       65    11525    1   DCL TSIZE           UBIN(36)  ALIGNED   AUTO;
       66    11526    1   DCL PAGE            UBIN(36)  ALIGNED   AUTO;
       67    11527    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
       68    11528    1   DCL HALVE           UBIN(36)  ALIGNED   AUTO;
       69    11529    1   DCL NPAGE           UBIN(36)  ALIGNED   AUTO;
       70    11530    1   DCL TSIZE_READ      SBIN(36)  ALIGNED   AUTO;
       71    11531    1   DCL SC_TYPE         UBIN(36)  ALIGNED   AUTO;
       72    11532    1   DCL INDX            UBIN(36)  ALIGNED   AUTO;
       73    11533    1   DCL LAST_DISP       UBIN(36)  ALIGNED   AUTO;
       74    11534    1   DCL ED_SIZE         UBIN(36)  ALIGNED   AUTO;
       75    11535    1   DCL ER_SIZE         UBIN(36)  ALIGNED   AUTO;
       76    11536    1   DCL TEMP_ER_SIZE    UBIN(36)  ALIGNED   AUTO;
       77    11537    1   DCL TEMP_RN_SIZE    UBIN(36)  ALIGNED   AUTO;
       78    11538    1   DCL PRECEDENCE      UBIN(36)  ALIGNED   AUTO;
       79    11539    1   DCL RN_FREE    UBIN(36)  ALIGNED   AUTO;
             11541    1   DCL 1 F$NAME_                 BASED,
             11542    1         2 COUNT             UBIN( 9) UNAL,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:50   
             11543    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             11544    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             11545    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             11546    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             11547    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
       81    11549        /**/
       82    11550        /**/
       83    11551        /**/
             11560    1   DCL 1 B$DNAME BASED ALIGNED,
             11561    1         2 COUNT UBIN HALF UNAL %INIT(SIZEC(' ')) %CHARTEXT('/**/'),
             11562                /*K*  COUNT is the number of characters in the name */
             11568    1         2 %CHARTEXT('TEXT') CHAR(B$DNAME.COUNT) UNAL;
             11572    1   DCL VX$TARGET_B           BIT( VX_TARGET_COUNT ) ALIGNED    BASED;
             11573    1   DCL VX$SOURCE_B           BIT( VX_SOURCE_COUNT ) ALIGNED    BASED;
             11574    1   DCL VX$TARGET_C         CHAR( VX_TARGET_COUNT ) ALIGNED BASED;
             11575    1   DCL VX$SOURCE_C         CHAR( VX_SOURCE_COUNT ) ALIGNED BASED;
             11578    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
             11579    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
             11580    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
             11581    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
             11582    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
             11583    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             11584    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
             11587    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
             11588    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
             11589    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
             11590    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
             11591    1   DCL BIN_START1$         PTR       ALIGNED AUTO;

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:51   
       90    11595    2         IF VX_OUHEAD.WORDSIZE = 16 THEN DO;

  11595  3 000002   000001 236000 xsym               LDQ     VX_OU_HEAD+1
         3 000003   777000 376003                    ANQ     -512,DU
         3 000004   020000 116003                    CMPQ    8192,DU
         3 000005   000021 601000 3                  TNZ     s:11606

       91    11596        /*E* ERROR: VXO-E$L6_OU_VX
       92    11597        MESSAGE: FEPLINK must be used to link object unit %U1;
       93    11598                 In object file %U2.
       94    11599        */
       95    11600    2             VX_EFIELD1 = VX_OK.OUNAME;

  11600  3 000006   000000 100400                    MLR     fill='000'O
         3 000007   000013 000040 xsym               ADSC9   VX_OK+11                 cn=0,n=32
         3 000010   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80

       96    11601    2             VX_EFIELD2 = VX_OK.FILE.OFNAME;

  11601  3 000011   000000 100400                    MLR     fill='000'O
         3 000012   000023 000051 xsym               ADSC9   VX_OK+19                 cn=0,n=41
         3 000013   000000 000120 xsym               ADSC9   VX_EFIELD2               cn=0,n=80

       97    11602                  %SCREAM(ERR#=E$L6_OU_VX,LEVEL=@E$F_VX,MID="'O'");

  11603  3 000014   000002 630400 4                  EPPR0   2
         3 000015   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000016   000000 701000 xent               TSX1    VXE$ERROR
         3 000017   000000 011000                    NOP     0

       98    11605    2            END;

  11605  3 000020   000046 710000 3                  TRA     s:11633

       99    11606    1         ELSE IF VX_OUHEAD.WORDSIZE ~= 36

  11606  3 000021   044000 116003                    CMPQ    18432,DU
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:52   
         3 000022   000046 600000 3                  TZE     s:11633

      100    11607    2             THEN DO;

      101    11608        /*E* ERROR: VXO-E$ILLEGAL_WORDSIZE_VX
      102    11609        MESSAGE: Object language error: Illegal wordsize (%U1) detected.
      103    11610        */
      104    11611    2                 I = VX_OUHEAD.WORDSIZE;

  11611  3 000023   000001 236000 xsym               LDQ     VX_OU_HEAD+1
         3 000024   000033 772000                    QRL     27
         3 000025   200042 756100                    STQ     I,,AUTO

      105    11612                      %NUMBER(NUM1=I);

  11618  3 000026   000006 236000 4                  LDQ     6
         3 000027   200120 756100                    STQ     PRIM_TEMP+5,,AUTO
         3 000030   200042 630500                    EPPR0   I,,AUTO
         3 000031   200117 450500                    STP0    PRIM_TEMP+4,,AUTO
         3 000032   000007 236000 4                  LDQ     7
         3 000033   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 000034   000010 237000 4                  LDAQ    8
         3 000035   200114 757100                    STAQ    PRIM_TEMP+1,,AUTO
         3 000036   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 000037   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 000040   000000 701000 xent               TSX1    VXD$B2C
         3 000041   000000 011000                    NOP     0

      106    11629                      %SCREAM(ERR#=E$ILLEGAL_WORDSIZE_VX,LEVEL=@E$S_VX,MID="'O'",AUX=
             11629                          @E$OUOF_VX);

  11630  3 000042   000013 630400 4                  EPPR0   11
         3 000043   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000044   000000 701000 xent               TSX1    VXE$ERROR
         3 000045   000000 011000                    NOP     0

      107    11632    2                END;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:53   

      108    11633    2         IF VX_OU_HEAD.REC.RN_SIZE = 0 THEN DO;

  11633  3 000046   000006 220000 xsym               LDX0    VX_OU_HEAD+6
         3 000047   000137 601000 3                  TNZ     s:11673

      109    11634    2             IF VX_OU_HEAD.REC.ER_SIZE ~=0  OR  VX_OU_HEAD.REC.DR_SIZE ~= 0

  11634  3 000050   000010 221000 xsym               LDX1    VX_OU_HEAD+8
         3 000051   000056 601000 3                  TNZ     s:11641
         3 000052   000012 222000 xsym               LDX2    VX_OU_HEAD+10
         3 000053   000056 601000 3                  TNZ     s:11641
         3 000054   000014 223000 xsym               LDX3    VX_OU_HEAD+12
         3 000055   000137 600000 3                  TZE     s:11673

      110    11635    3                     OR VX_OU_HEAD.REC.SR_SIZE ~= 0 THEN DO;

      111    11636        /*E*  ERROR: VXO-E$REF_INCONSIST_VX-0
      112    11637              MESSAGE: Reference name size = 0. Entry reference size = %U1.
      113    11638                       Data reference size = %U2. Segment reference size = %U3.
      114    11639              DESCRIPTION: Self-explanatory.
      115    11640        */
      116    11641    3                 I = VX_OU_HEAD.REC.ER_SIZE;

  11641  3 000056   000010 235000 xsym               LDA     VX_OU_HEAD+8
         3 000057   000022 771000                    ARL     18
         3 000060   200042 755100                    STA     I,,AUTO

      117    11642    3                 J = VX_OU_HEAD.REC.DR_SIZE;

  11642  3 000061   000012 236000 xsym               LDQ     VX_OU_HEAD+10
         3 000062   000022 772000                    QRL     18
         3 000063   200043 756100                    STQ     J,,AUTO

      118    11643    3                 K = VX_OU_HEAD.REC.SR_SIZE;

  11643  3 000064   000014 235000 xsym               LDA     VX_OU_HEAD+12
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:54   
         3 000065   000022 771000                    ARL     18
         3 000066   200044 755100                    STA     K,,AUTO

      119    11644                      %NUMBER(
      120    11645                      NUM1=I, SIZE1=6, BASE1=10,
      121    11646                      NUM2=J, SIZE2=6, BASE2=10,
      122    11647                      NUM3=K, SIZE3=6, BASE3=10 );

  11653  3 000067   000006 236000 4                  LDQ     6
         3 000070   200120 756100                    STQ     PRIM_TEMP+5,,AUTO
         3 000071   200042 630500                    EPPR0   I,,AUTO
         3 000072   200117 450500                    STP0    PRIM_TEMP+4,,AUTO
         3 000073   000007 236000 4                  LDQ     7
         3 000074   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 000075   000010 237000 4                  LDAQ    8
         3 000076   200114 757100                    STAQ    PRIM_TEMP+1,,AUTO
         3 000077   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 000100   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 000101   000000 701000 xent               TSX1    VXD$B2C
         3 000102   000000 011000                    NOP     0

  11657  3 000103   000006 236000 4                  LDQ     6
         3 000104   200120 756100                    STQ     PRIM_TEMP+5,,AUTO
         3 000105   200043 630500                    EPPR0   J,,AUTO
         3 000106   200117 450500                    STP0    PRIM_TEMP+4,,AUTO
         3 000107   000020 236000 4                  LDQ     16
         3 000110   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 000111   000022 237000 4                  LDAQ    18
         3 000112   200114 757100                    STAQ    PRIM_TEMP+1,,AUTO
         3 000113   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 000114   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 000115   000000 701000 xent               TSX1    VXD$B2C
         3 000116   000000 011000                    NOP     0

  11661  3 000117   000006 236000 4                  LDQ     6
         3 000120   200120 756100                    STQ     PRIM_TEMP+5,,AUTO
         3 000121   200044 630500                    EPPR0   K,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:55   
         3 000122   200117 450500                    STP0    PRIM_TEMP+4,,AUTO
         3 000123   000025 236000 4                  LDQ     21
         3 000124   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 000125   000026 237000 4                  LDAQ    22
         3 000126   200114 757100                    STAQ    PRIM_TEMP+1,,AUTO
         3 000127   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 000130   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 000131   000000 701000 xent               TSX1    VXD$B2C
         3 000132   000000 011000                    NOP     0

      123    11664                      %SCREAM(
      124    11665                      ERR#=E$REF_INCONSIST_VX,
      125    11666                      LEVEL=@E$F_VX,
      126    11667                      MID="'O'",
      127    11668                      AUX=@E$OUOF_VX);

  11669  3 000133   000031 630400 4                  EPPR0   25
         3 000134   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000135   000000 701000 xent               TSX1    VXE$ERROR
         3 000136   000000 011000                    NOP     0

      128    11671    3                END;                       /* If VX_OU_HEAD.REC.ER_SIZE ... */

      129    11672    2            END;                           /* If VX_OU_HEAD.REC.RN_SIZE ... */

      130    11673    2         IF VX_OU_HEAD.REC.DN_SIZE = 0 THEN DO;

  11673  3 000137   000005 220000 xsym               LDX0    VX_OU_HEAD+5
         3 000140   000230 601000 3                  TNZ     s:11714

      131    11674    2             IF VX_OU_HEAD.REC.ED_SIZE ~=0  OR  VX_OU_HEAD.REC.DD_SIZE ~= 0

  11674  3 000141   000007 221000 xsym               LDX1    VX_OU_HEAD+7
         3 000142   000147 601000 3                  TNZ     s:11681
         3 000143   000011 222000 xsym               LDX2    VX_OU_HEAD+9
         3 000144   000147 601000 3                  TNZ     s:11681
         3 000145   000013 223000 xsym               LDX3    VX_OU_HEAD+11
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:56   
         3 000146   000230 600000 3                  TZE     s:11714

      132    11675    3                     OR VX_OU_HEAD.REC.SD_SIZE ~=0 THEN DO;

      133    11676        /*E*  ERROR: VXO-E$DEF_INCONSIST_VX-0
      134    11677              MESSAGE: Definition name size = 0. Entry definition size = %U1.
      135    11678                       Data definition size = %U2. Segment definition size = %U3.
      136    11679              DESCRIPTION: Self-explanatory.
      137    11680        */
      138    11681    3                 I = VX_OU_HEAD.REC.ED_SIZE;

  11681  3 000147   000007 235000 xsym               LDA     VX_OU_HEAD+7
         3 000150   000022 771000                    ARL     18
         3 000151   200042 755100                    STA     I,,AUTO

      139    11682    3                 J = VX_OU_HEAD.REC.DD_SIZE;

  11682  3 000152   000011 236000 xsym               LDQ     VX_OU_HEAD+9
         3 000153   000022 772000                    QRL     18
         3 000154   200043 756100                    STQ     J,,AUTO

      140    11683    3                 K = VX_OU_HEAD.REC.SD_SIZE;

  11683  3 000155   000013 235000 xsym               LDA     VX_OU_HEAD+11
         3 000156   000022 771000                    ARL     18
         3 000157   200044 755100                    STA     K,,AUTO

      141    11684                      %NUMBER(
      142    11685                      NUM1=I, SIZE1=6, BASE1=10,
      143    11686                      NUM2=J, SIZE2=6, BASE2=10,
      144    11687                      NUM3=K, SIZE3=6, BASE3=10 );

  11693  3 000160   000006 236000 4                  LDQ     6
         3 000161   200120 756100                    STQ     PRIM_TEMP+5,,AUTO
         3 000162   200042 630500                    EPPR0   I,,AUTO
         3 000163   200117 450500                    STP0    PRIM_TEMP+4,,AUTO
         3 000164   000007 236000 4                  LDQ     7
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:57   
         3 000165   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 000166   000010 237000 4                  LDAQ    8
         3 000167   200114 757100                    STAQ    PRIM_TEMP+1,,AUTO
         3 000170   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 000171   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 000172   000000 701000 xent               TSX1    VXD$B2C
         3 000173   000000 011000                    NOP     0

  11697  3 000174   000006 236000 4                  LDQ     6
         3 000175   200120 756100                    STQ     PRIM_TEMP+5,,AUTO
         3 000176   200043 630500                    EPPR0   J,,AUTO
         3 000177   200117 450500                    STP0    PRIM_TEMP+4,,AUTO
         3 000200   000020 236000 4                  LDQ     16
         3 000201   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 000202   000022 237000 4                  LDAQ    18
         3 000203   200114 757100                    STAQ    PRIM_TEMP+1,,AUTO
         3 000204   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 000205   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 000206   000000 701000 xent               TSX1    VXD$B2C
         3 000207   000000 011000                    NOP     0

  11701  3 000210   000006 236000 4                  LDQ     6
         3 000211   200120 756100                    STQ     PRIM_TEMP+5,,AUTO
         3 000212   200044 630500                    EPPR0   K,,AUTO
         3 000213   200117 450500                    STP0    PRIM_TEMP+4,,AUTO
         3 000214   000025 236000 4                  LDQ     21
         3 000215   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 000216   000026 237000 4                  LDAQ    22
         3 000217   200114 757100                    STAQ    PRIM_TEMP+1,,AUTO
         3 000220   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 000221   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 000222   000000 701000 xent               TSX1    VXD$B2C
         3 000223   000000 011000                    NOP     0

      145    11704                      %SCREAM(
      146    11705                      ERR#=E$DEF_INCONSIST_VX,
      147    11706                      LEVEL=@E$F_VX,
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:58   
      148    11707                      MID="'O'",
      149    11708                      AUX=@E$OUOF_VX);

  11709  3 000224   000036 630400 4                  EPPR0   30
         3 000225   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000226   000000 701000 xent               TSX1    VXE$ERROR
         3 000227   000000 011000                    NOP     0

      150    11711    3                END;                       /* If VX_OU_HEAD.REC.ED_SIZE ... */

      151    11712    2            END;                           /* If VX_OU_HEAD.REC.DN_SIZE ... */


PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:59   
      153    11714    1         IF VX_OU_HEAD.LIB.COUNT > 0  AND  VX_OU_HEAD.LIB.COUNT <= 31

  11714  3 000230   000015 236000 xsym               LDQ     VX_OU_HEAD+13
         3 000231   777000 316003                    CANQ    -512,DU
         3 000232   001010 600000 3                  TZE     ALREADY_THERE
         3 000233   000015 236000 xsym               LDQ     VX_OU_HEAD+13
         3 000234   777000 376003                    ANQ     -512,DU
         3 000235   040000 116003                    CMPQ    16384,DU
         3 000236   001010 603000 3                  TRC     ALREADY_THERE
         3 000237   000000 236000 xsym               LDQ     VX_OD
         3 000240   010000 316003                    CANQ    4096,DU
         3 000241   001010 601000 3                  TNZ     ALREADY_THERE
         3 000242   000002 236000 xsym               LDQ     VX_OD+2
         3 000243   000100 316003                    CANQ    64,DU
         3 000244   001010 601000 3                  TNZ     ALREADY_THERE

      154    11715    1                 AND  NOT VX_OD.SIN.NOSHARELIB   AND  NOT VX_OD.FID.SHARELIB$
      155    11716    2         THEN DO;

      156    11717    3             IF VX_SHARED_LIB_ASS ~= 0 THEN DO;

  11717  3 000245   000000 235000 xsym               LDA     VX_SHARED_LIB_ASS
         3 000246   000271 600000 3                  TZE     s:11734

      157    11718        /*E*  ERROR: VXO-E$LIB_OPT_CONFLICT_VX-0
      158    11719              MESSAGE: Request for the shared library %U1 with the
      159    11720                       %U2 option in effect.
      160    11721              DESCRIPTION: Self-explanatory.
      161    11722        */
      162    11723    3                 VX_EFIELD1 = VX_OU_HEAD.LIB;

  11723  3 000247   000000 100400                    MLR     fill='000'O
         3 000250   000015 000040 xsym               ADSC9   VX_OU_HEAD+13            cn=0,n=32
         3 000251   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80

      163    11724    3                 P$ = VX_ON.SIN_A(VX_SHARED_LIB_ASS-1);

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:60   
  11724  3 000252   777777 236005 xsym               LDQ     VX_ON-1,AL
         3 000253   200016 756100                    STQ     P$,,AUTO

      164    11725    3                 VX_EFIELD2.COUNT = P$ -> P$LIT.COUNT;

  11725  3 000254   200016 470500                    LDP0    P$,,AUTO
         3 000255   000001 236100                    LDQ     1,,PR0
         3 000256   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

      165    11726    3                 VX_EFIELD2.CHARS = P$ -> P$LIT.TEXT;

  11726  3 000257   000001 236100                    LDQ     1,,PR0
         3 000260   000033 772000                    QRL     27
         3 000261   000000 620006                    EAX0    0,QL
         3 000262   040000 100540                    MLR     fill='040'O
         3 000263   000001 200010                    ADSC9   1,,PR0                   cn=1,n=*X0
         3 000264   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79

      166    11727                      %SCREAM(
      167    11728                      ERR# = E$LIB_OPT_CONFLICT_VX,
      168    11729                      LEVEL=@E$F_VX,
      169    11730                      MID="'O'");

  11731  3 000265   000043 630400 4                  EPPR0   35
         3 000266   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000267   000000 701000 xent               TSX1    VXE$ERROR
         3 000270   000000 011000                    NOP     0

      170    11733    3                END;                       /* If VX_SHARED_LIB_ASS ~= 0 then do; */

      171    11734    2             P$ = ADDR( VX_OU_HEAD.LIB );

  11734  3 000271   000047 236000 4                  LDQ     39
         3 000272   200016 756100                    STQ     P$,,AUTO

      172    11735    2             CURR$ = VX_SLIB_HEAD$;

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:61   
  11735  3 000273   000000 236000 xsym               LDQ     VX_SLIB_HEAD$
         3 000274   200022 756100                    STQ     CURR$,,AUTO

      173    11736    2             PREV$ = ADDR(VX_SLIB_HEAD$);

  11736  3 000275   000050 236000 4                  LDQ     40
         3 000276   200023 756100                    STQ     PREV$,,AUTO

      174    11737    3             DO WHILE ( CURR$ ~= ADDR(NIL) );

  11737  3 000277   000315 710000 3                  TRA     s:11742

      175    11738    3                 IF P$ -> T$C.CHARS = CURR$ -> VX$LLIST_SL.NAME.TXT THEN

  11738  3 000300   200016 470500                    LDP0    P$,,AUTO
         3 000301   000000 236100                    LDQ     0,,PR0
         3 000302   000033 772000                    QRL     27
         3 000303   000000 620006                    EAX0    0,QL
         3 000304   200022 471500                    LDP1    CURR$,,AUTO
         3 000305   040100 106540                    CMPC    fill='040'O
         3 000306   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         3 000307   100003 200037                    ADSC9   3,,PR1                   cn=1,n=31
         3 000310   001010 600000 3                  TZE     ALREADY_THERE

      176    11739    3                     GOTO ALREADY_THERE;
      177    11740    3                 PREV$ = CURR$;

  11740  3 000311   200022 236100                    LDQ     CURR$,,AUTO
         3 000312   200023 756100                    STQ     PREV$,,AUTO

      178    11741    3                 CURR$ = CURR$ -> VX$LLIST.LINK$;

  11741  3 000313   100000 236100                    LDQ     0,,PR1
         3 000314   200022 756100                    STQ     CURR$,,AUTO

      179    11742    3                END;                       /* do while ( CURR$ ~= addr(nil) )    */

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:62   
  11742  3 000315   200022 236100                    LDQ     CURR$,,AUTO
         3 000316   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000317   000300 601000 3                  TNZ     s:11738

      180    11743                                            /* Find precedence of the shared library */
      181    11744    2             IF SUBSTR(VX_OU_HEAD.LIB.NAME,0,14) = ':SHARED_COMMON' THEN

  11744  3 000320   040000 106400                    CMPC    fill='040'O
         3 000321   000015 200016 xsym               ADSC9   VX_OU_HEAD+13            cn=1,n=14
         3 000322   000005 000016 2                  ADSC9   BLANK_COMMON+5           cn=0,n=14
         3 000323   000327 601000 3                  TNZ     s:11747

      182    11745    2                 PRECEDENCE = 4;

  11745  3 000324   000004 235007                    LDA     4,DL
         3 000325   200066 755100                    STA     PRECEDENCE,,AUTO
         3 000326   000356 710000 3                  TRA     s:11756

      183    11746    2             ELSE
      184    11747    2                 IF SUBSTR(VX_OU_HEAD.LIB.NAME,0,13) = ':SHARED_COBOL' THEN

  11747  3 000327   040000 106400                    CMPC    fill='040'O
         3 000330   000015 200015 xsym               ADSC9   VX_OU_HEAD+13            cn=1,n=13
         3 000331   000011 000015 2                  ADSC9   BLANK_COMMON+9           cn=0,n=13
         3 000332   000336 601000 3                  TNZ     s:11750

      185    11748    2                     PRECEDENCE = 3;

  11748  3 000333   000003 235007                    LDA     3,DL
         3 000334   200066 755100                    STA     PRECEDENCE,,AUTO
         3 000335   000356 710000 3                  TRA     s:11756

      186    11749    2                 ELSE
      187    11750    2                     IF SUBSTR(VX_OU_HEAD.LIB.NAME,0,11) = ':SHARED_RPG' THEN

  11750  3 000336   040000 106400                    CMPC    fill='040'O
         3 000337   000015 200013 xsym               ADSC9   VX_OU_HEAD+13            cn=1,n=11
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:63   
         3 000340   000015 000013 2                  ADSC9   BLANK_COMMON+13          cn=0,n=11
         3 000341   000345 601000 3                  TNZ     s:11753

      188    11751    2                         PRECEDENCE = 2;

  11751  3 000342   000002 235007                    LDA     2,DL
         3 000343   200066 755100                    STA     PRECEDENCE,,AUTO
         3 000344   000356 710000 3                  TRA     s:11756

      189    11752    2                     ELSE
      190    11753    2                         IF SUBSTR(VX_OU_HEAD.LIB.NAME,0,14) = ':SHARED_SYSTEM'

  11753  3 000345   040000 106400                    CMPC    fill='040'O
         3 000346   000015 200016 xsym               ADSC9   VX_OU_HEAD+13            cn=1,n=14
         3 000347   000020 000016 2                  ADSC9   BLANK_COMMON+16          cn=0,n=14
         3 000350   000354 601000 3                  TNZ     s:11755

      191    11754    2                         THEN PRECEDENCE = 1;

  11754  3 000351   000001 235007                    LDA     1,DL
         3 000352   200066 755100                    STA     PRECEDENCE,,AUTO
         3 000353   000356 710000 3                  TRA     s:11756

      192    11755    2                         ELSE PRECEDENCE = 7;

  11755  3 000354   000007 235007                    LDA     7,DL
         3 000355   200066 755100                    STA     PRECEDENCE,,AUTO

      193    11756    2             IF VX_SLIB_HEAD$ = ADDR(NIL)  /* => first shared library */

  11756  3 000356   000000 236000 xsym               LDQ     VX_SLIB_HEAD$
         3 000357   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000360   000363 600000 3                  TZE     s:11761
         3 000361   000007 235000 xsym               LDA     VX_O+7
         3 000362   000501 600000 3                  TZE     s:11786

      194    11757    2                     OR VX_O.SIN.ALIB ~= 0 /* => alib option specified */
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:64   
      195    11758    3             THEN DO;

      196    11759        /*                                 Allocate list items for the shared library */
      197    11760                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE="SIZEW(VX$LLIST_SL)" );

  11761  3 000363   000010 236000 xsym               LDQ     VX_M_ALL+8
         3 000364   000010 136000 xsym               SBLQ    VX_M_FREE+8
         3 000365   000013 116007                    CMPQ    11,DL
         3 000366   000376 604000 3                  TMI     s:11765

  11762  3 000367   000010 236000 xsym               LDQ     VX_M_FREE+8
         3 000370   000022 736000                    QLS     18
         3 000371   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         3 000372   200024 756100                    STQ     WHERE$,,AUTO

  11763  3 000373   000013 236007                    LDQ     11,DL
         3 000374   000010 056000 xsym               ASQ     VX_M_FREE+8

  11764  3 000375   000410 710000 3                  TRA     s:11767

  11765  3 000376   000051 236000 4                  LDQ     41
         3 000377   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 000400   000052 236000 4                  LDQ     42
         3 000401   200115 756100                    STQ     PRIM_TEMP+2,,AUTO
         3 000402   200024 630500                    EPPR0   WHERE$,,AUTO
         3 000403   200114 450500                    STP0    PRIM_TEMP+1,,AUTO
         3 000404   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 000405   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000406   000000 701000 xent               TSX1    VXA$GET
         3 000407   000000 011000                    NOP     0

      198    11767    3                 WHERE$ -> VX$LLIST_SL.LINK$ = ADDR(NIL);

  11767  3 000410   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000411   200024 470500                    LDP0    WHERE$,,AUTO
         3 000412   000000 756100                    STQ     0,,PR0

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:65   
      199    11768    3                 WHERE$ -> VX$LLIST_SL.NAME.CNT = P$ -> T$C.COUNT;

  11768  3 000413   200016 470500                    LDP0    P$,,AUTO
         3 000414   200024 471500                    LDP1    WHERE$,,AUTO
         3 000415   000000 236100                    LDQ     0,,PR0
         3 000416   100003 552140                    STBQ    3,'40'O,PR1

      200    11769    3                 WHERE$ -> VX$LLIST_SL.NAME.TXT = P$ -> T$C.CHARS;

  11769  3 000417   200016 470500                    LDP0    P$,,AUTO
         3 000420   000000 236100                    LDQ     0,,PR0
         3 000421   000033 772000                    QRL     27
         3 000422   000000 620006                    EAX0    0,QL
         3 000423   200024 471500                    LDP1    WHERE$,,AUTO
         3 000424   040100 100540                    MLR     fill='040'O
         3 000425   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         3 000426   100003 200037                    ADSC9   3,,PR1                   cn=1,n=31

      201    11770    3                 WHERE$ -> VX$LLIST_SL.PRECEDENCE = PRECEDENCE;

  11770  3 000427   200024 470500                    LDP0    WHERE$,,AUTO
         3 000430   200066 235100                    LDA     PRECEDENCE,,AUTO
         3 000431   000002 755100                    STA     2,,PR0

      202    11771    3                 CALL VXS$LST( ALL$, P$, 2/*@LF*/, 2/*@LF_SLIB*/, ADDR(NIL), 0 );

  11771  3 000432   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000433   200114 756100                    STQ     PRIM_TEMP+1,,AUTO
         3 000434   000004 236000 4                  LDQ     4
         3 000435   200123 756100                    STQ     PRIM_TEMP+8,,AUTO
         3 000436   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 000437   200122 450500                    STP0    PRIM_TEMP+7,,AUTO
         3 000440   000054 237000 4                  LDAQ    44
         3 000441   200120 757100                    STAQ    PRIM_TEMP+5,,AUTO
         3 000442   200016 631500                    EPPR1   P$,,AUTO
         3 000443   200117 451500                    STP1    PRIM_TEMP+4,,AUTO
         3 000444   200021 633500                    EPPR3   ALL$,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:66   
         3 000445   200116 453500                    STP3    PRIM_TEMP+3,,AUTO
         3 000446   200116 630500                    EPPR0   PRIM_TEMP+3,,AUTO
         3 000447   000024 631400 xsym               EPPR1   B_VECTNIL+20
         3 000450   000000 701000 xent               TSX1    VXS$LST
         3 000451   000000 011000                    NOP     0

      203    11772                                                /* Remember first for initialization */
      204    11773    3                 IF VX_SLIB_HEAD$ = ADDR(NIL) THEN VX_SLIB_INIT$ = ALL$;

  11773  3 000452   000000 236000 xsym               LDQ     VX_SLIB_HEAD$
         3 000453   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000454   000457 601000 3                  TNZ     s:11776

  11773  3 000455   200021 236100                    LDQ     ALL$,,AUTO
         3 000456   000000 756000 xsym               STQ     VX_SLIB_INIT$

      205    11774        /*
      206    11775                                              Add to shared library list  */
      207    11776    3                 PREV$ -> VX$LLIST_SL.LINK$ = WHERE$;

  11776  3 000457   200024 236100                    LDQ     WHERE$,,AUTO
         3 000460   200023 470500                    LDP0    PREV$,,AUTO
         3 000461   000000 756100                    STQ     0,,PR0

      208    11777    3                 WHERE$ -> VX$LLIST_SL.ITEM$ = ALL$;

  11777  3 000462   200021 236100                    LDQ     ALL$,,AUTO
         3 000463   200024 471500                    LDP1    WHERE$,,AUTO
         3 000464   100001 756100                    STQ     1,,PR1

      209    11778    3                 ALL$ -> VX$LST.P.ACCT_ = VECTOR( VX_SYS );

  11778  3 000465   200021 471500                    LDP1    ALL$,,AUTO
         3 000466   000056 237000 4                  LDAQ    46
         3 000467   100007 755100                    STA     7,,PR1
         3 000470   100010 756100                    STQ     8,,PR1

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:67   
      210    11779        /*
      211    11780                                      Add to file list for node  */
      212    11781    3                 VX_CURR$ -> VX$NODE.TAIL$ -> VX$LST.LINK$ = ALL$;

  11781  3 000471   000000 471400 xsym               LDP1    VX_CURR$
         3 000472   100005 473500                    LDP3    5,,PR1
         3 000473   200021 236100                    LDQ     ALL$,,AUTO
         3 000474   300000 756100                    STQ     0,,PR3

      213    11782    3                 VX_CURR$ -> VX$NODE.TAIL$ = ALL$;

  11782  3 000475   200021 236100                    LDQ     ALL$,,AUTO
         3 000476   000000 471400 xsym               LDP1    VX_CURR$
         3 000477   100005 756100                    STQ     5,,PR1

      214    11783    3                END;

  11783  3 000500   001010 710000 3                  TRA     ALREADY_THERE

      215    11784    3             ELSE DO;                      /*  Here => not first shared library and

      216    11785                                                            alib option not specified */
      217    11786    4                 IF SUBSTR( VX_OU_HEAD.LIB.NAME, 0, 8 ) ~= ':SHARED_' THEN DO;

  11786  3 000501   040000 106400                    CMPC    fill='040'O
         3 000502   000015 200010 xsym               ADSC9   VX_OU_HEAD+13            cn=1,n=8
         3 000503   000005 000010 2                  ADSC9   BLANK_COMMON+5           cn=0,n=8
         3 000504   000514 600000 3                  TZE     s:11798

      218    11787        /*E*  ERROR: VXO-E$MULT_LIB_VX-0
      219    11788              MESSAGE: ALIB option not specified and multiple shared libraries requested
      220    11789                       with non-standard name (%U1).
      221    11790              DESCRIPTION: Self-explanatory.
      222    11791        */
      223    11792    4                     VX_EFIELD1 = VX_OU_HEAD.LIB;

  11792  3 000505   000000 100400                    MLR     fill='000'O
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:68   
         3 000506   000015 000040 xsym               ADSC9   VX_OU_HEAD+13            cn=0,n=32
         3 000507   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80

      224    11793                          %SCREAM( ERR#=E$MULT_LIB_VX, LEVEL=@E$F_VX, MID="'O'" );

  11794  3 000510   000061 630400 4                  EPPR0   49
         3 000511   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000512   000000 701000 xent               TSX1    VXE$ERROR
         3 000513   000000 011000                    NOP     0

      225    11796    4                    END;

      226    11797        /**/
      227    11798    3                 IF VX_TREE_SLIB_NAME = 0

  11798  3 000514   000000 235000 xsym               LDA     VX_TREE_SLIB_NAME
         3 000515   000667 601000 3                  TNZ     s:11845

      228    11799    4                 THEN DO;

      229    11800                                        /* Allocate list items for the shared library */
      230    11801                          %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE="SIZEW(VX$LLIST_SL)");

  11802  3 000516   000010 236000 xsym               LDQ     VX_M_ALL+8
         3 000517   000010 136000 xsym               SBLQ    VX_M_FREE+8
         3 000520   000013 116007                    CMPQ    11,DL
         3 000521   000531 604000 3                  TMI     s:11806

  11803  3 000522   000010 236000 xsym               LDQ     VX_M_FREE+8
         3 000523   000022 736000                    QLS     18
         3 000524   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         3 000525   200024 756100                    STQ     WHERE$,,AUTO

  11804  3 000526   000013 236007                    LDQ     11,DL
         3 000527   000010 056000 xsym               ASQ     VX_M_FREE+8

  11805  3 000530   000543 710000 3                  TRA     s:11808
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:69   

  11806  3 000531   000051 236000 4                  LDQ     41
         3 000532   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 000533   000052 236000 4                  LDQ     42
         3 000534   200115 756100                    STQ     PRIM_TEMP+2,,AUTO
         3 000535   200024 630500                    EPPR0   WHERE$,,AUTO
         3 000536   200114 450500                    STP0    PRIM_TEMP+1,,AUTO
         3 000537   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 000540   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000541   000000 701000 xent               TSX1    VXA$GET
         3 000542   000000 011000                    NOP     0

      231    11808    4                     WHERE$ -> VX$LLIST_SL.LINK$ = ADDR(NIL);

  11808  3 000543   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000544   200024 470500                    LDP0    WHERE$,,AUTO
         3 000545   000000 756100                    STQ     0,,PR0

      232    11809    4                     WHERE$ -> VX$LLIST_SL.ITEM$ = ADDR(NIL);

  11809  3 000546   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000547   200024 470500                    LDP0    WHERE$,,AUTO
         3 000550   000001 756100                    STQ     1,,PR0

      233    11810    4                     WHERE$ -> VX$LLIST_SL.NAME.CNT = P$ -> T$C.COUNT;

  11810  3 000551   200016 470500                    LDP0    P$,,AUTO
         3 000552   200024 471500                    LDP1    WHERE$,,AUTO
         3 000553   000000 236100                    LDQ     0,,PR0
         3 000554   100003 552140                    STBQ    3,'40'O,PR1

      234    11811    4                     WHERE$ -> VX$LLIST_SL.NAME.TXT = P$ -> T$C.CHARS;

  11811  3 000555   200016 470500                    LDP0    P$,,AUTO
         3 000556   000000 236100                    LDQ     0,,PR0
         3 000557   000033 772000                    QRL     27
         3 000560   000000 620006                    EAX0    0,QL
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:70   
         3 000561   200024 471500                    LDP1    WHERE$,,AUTO
         3 000562   040100 100540                    MLR     fill='040'O
         3 000563   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         3 000564   100003 200037                    ADSC9   3,,PR1                   cn=1,n=31

      235    11812    4                     WHERE$ -> VX$LLIST_SL.PRECEDENCE = PRECEDENCE;

  11812  3 000565   200024 470500                    LDP0    WHERE$,,AUTO
         3 000566   200066 235100                    LDA     PRECEDENCE,,AUTO
         3 000567   000002 755100                    STA     2,,PR0

      236    11813    5                     IF PRECEDENCE > VX_SLIB_HEAD$->VX$LLIST_SL.PRECEDENCE THEN DO;

  11813  3 000570   000000 470400 xsym               LDP0    VX_SLIB_HEAD$
         3 000571   000002 236100                    LDQ     2,,PR0
         3 000572   200066 116100                    CMPQ    PRECEDENCE,,AUTO
         3 000573   000620 603000 3                  TRC     s:11825

      237    11814                                                /* This shared library has highest
      238    11815                                                   precedence so far */
      239    11816    5                         WHERE$ -> VX$LLIST_SL.LINK$ = VX_SLIB_HEAD$;

  11816  3 000574   000000 236000 xsym               LDQ     VX_SLIB_HEAD$
         3 000575   200024 471500                    LDP1    WHERE$,,AUTO
         3 000576   100000 756100                    STQ     0,,PR1

      240    11817    5                         WHERE$->VX$LLIST_SL.ITEM$ = VX_SLIB_HEAD$->VX$LLIST_SL.ITEM$;

  11817  3 000577   000000 470400 xsym               LDP0    VX_SLIB_HEAD$
         3 000600   000001 236100                    LDQ     1,,PR0
         3 000601   200024 471500                    LDP1    WHERE$,,AUTO
         3 000602   100001 756100                    STQ     1,,PR1

      241    11818    5                         WHERE$->VX$LLIST_SL.ITEM$->VX$LST.P.NAME_ = VECTOR(WHERE$->
             11818                                  VX$LLIST_SL.NAME);

  11818  3 000603   200024 471500                    LDP1    WHERE$,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:71   
         3 000604   100001 473500                    LDP3    1,,PR1
         3 000605   000065 235000 4                  LDA     53
         3 000606   200024 236100                    LDQ     WHERE$,,AUTO
         3 000607   000003 036003                    ADLQ    3,DU
         3 000610   300005 755100                    STA     5,,PR3
         3 000611   300006 756100                    STQ     6,,PR3

      242    11819    5                         VX_SLIB_HEAD$ = WHERE$;

  11819  3 000612   200024 236100                    LDQ     WHERE$,,AUTO
         3 000613   000000 756000 xsym               STQ     VX_SLIB_HEAD$

      243    11820    5                         WHERE$ = WHERE$ -> VX$LLIST_SL.LINK$;

  11820  3 000614   200024 470500                    LDP0    WHERE$,,AUTO
         3 000615   000000 236100                    LDQ     0,,PR0
         3 000616   200024 756100                    STQ     WHERE$,,AUTO

      244    11821    5                        END;

  11821  3 000617   000646 710000 3                  TRA     s:11839

      245    11822    5                     ELSE DO;

      246    11823                                                /* Insert into list of shared libraries
      247    11824                                                   which is sorted by precedence */
      248    11825    5                         CURR$ = VX_SLIB_HEAD$;

  11825  3 000620   000000 236000 xsym               LDQ     VX_SLIB_HEAD$
         3 000621   200022 756100                    STQ     CURR$,,AUTO

      249    11826    5                         PREV$ = ADDR( VX_SLIB_HEAD$ );

  11826  3 000622   000050 236000 4                  LDQ     40
         3 000623   200023 756100                    STQ     PREV$,,AUTO

      250    11827    6                         DO WHILE( CURR$ ~= ADDR(NIL) );
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:72   

  11827  3 000624   000635 710000 3                  TRA     s:11832

      251    11828    6                             IF CURR$->VX$LLIST_SL.PRECEDENCE < PRECEDENCE THEN

  11828  3 000625   200022 470500                    LDP0    CURR$,,AUTO
         3 000626   000002 236100                    LDQ     2,,PR0
         3 000627   200066 116100                    CMPQ    PRECEDENCE,,AUTO
         3 000630   000640 602000 3                  TNC     INSERT_SHAREL

      252    11829    6                                 GOTO INSERT_SHAREL;
      253    11830    6                             PREV$ = CURR$;

  11830  3 000631   200022 236100                    LDQ     CURR$,,AUTO
         3 000632   200023 756100                    STQ     PREV$,,AUTO

      254    11831    6                             CURR$ = CURR$ -> VX$LST.LINK$;

  11831  3 000633   000000 236100                    LDQ     0,,PR0
         3 000634   200022 756100                    STQ     CURR$,,AUTO

      255    11832    6                            END;

  11832  3 000635   200022 236100                    LDQ     CURR$,,AUTO
         3 000636   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000637   000625 601000 3                  TNZ     s:11828

      256    11833    5   INSERT_SHAREL:
      257    11834    5                         WHERE$ -> VX$LLIST_SL.LINK$  = CURR$;

  11834  3 000640   200022 236100       INSERT_SHAR* LDQ     CURR$,,AUTO
         3 000641   200024 470500                    LDP0    WHERE$,,AUTO
         3 000642   000000 756100                    STQ     0,,PR0

      258    11835    5                         PREV$ -> VX$LLIST_SL.LINK$ = WHERE$;

  11835  3 000643   200024 236100                    LDQ     WHERE$,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:73   
         3 000644   200023 470500                    LDP0    PREV$,,AUTO
         3 000645   000000 756100                    STQ     0,,PR0

      259    11836    5                        END;

      260    11837                                                /* Map :SHARED_? shared library to
      261    11838                                                   :LIB_? library  */
      262    11839    4                     TSIZE = WHERE$ -> VX$LLIST_SL.NAME.CNT - 8;

  11839  3 000646   200024 470500                    LDP0    WHERE$,,AUTO
         3 000647   000003 236100                    LDQ     3,,PR0
         3 000650   000033 772000                    QRL     27
         3 000651   000010 136007                    SBLQ    8,DL
         3 000652   200051 756100                    STQ     TSIZE,,AUTO

      263    11840    4                     CALL CONCAT( MAP_STRING.CHARS, ':LIB_',

  11840  3 000653   040100 100400                    MLR     fill='040'O
         3 000654   000024 000005 2                  ADSC9   BLANK_COMMON+20          cn=0,n=5
         3 000655   200006 200005                    ADSC9   MAP_STRING,,AUTO         cn=1,n=5
         3 000656   000000 620006                    EAX0    0,QL
         3 000657   040100 100540                    MLR     fill='040'O
         3 000660   000005 200010                    ADSC9   5,,PR0                   cn=1,n=*X0
         3 000661   200007 400032                    ADSC9   MAP_STRING+1,,AUTO       cn=2,n=26

      264    11841    4                             SUBSTR(WHERE$->VX$LLIST_SL.NAME.TXT,8,TSIZE)  );
      265    11842    4                     MAP_STRING.COUNT = TSIZE + 5;

  11842  3 000662   200051 236100                    LDQ     TSIZE,,AUTO
         3 000663   000005 036007                    ADLQ    5,DL
         3 000664   000033 736000                    QLS     27
         3 000665   200006 552140                    STBQ    MAP_STRING,'40'O,AUTO

      266    11843    4                    END;

  11843  3 000666   000706 710000 3                  TRA     s:11852

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:74   
      267    11844    4                 ELSE DO;

      268    11845    4                     TSIZE = VX_OU_HEAD.LIB.COUNT - 8;

  11845  3 000667   000015 236000 xsym               LDQ     VX_OU_HEAD+13
         3 000670   000033 772000                    QRL     27
         3 000671   000010 136007                    SBLQ    8,DL
         3 000672   200051 756100                    STQ     TSIZE,,AUTO

      269    11846    4                     CALL CONCAT( MAP_STRING.CHARS, ':LIB_',

  11846  3 000673   040100 100400                    MLR     fill='040'O
         3 000674   000024 000005 2                  ADSC9   BLANK_COMMON+20          cn=0,n=5
         3 000675   200006 200005                    ADSC9   MAP_STRING,,AUTO         cn=1,n=5
         3 000676   000000 620006                    EAX0    0,QL
         3 000677   040100 100440                    MLR     fill='040'O
         3 000700   000017 200010 xsym               ADSC9   VX_OU_HEAD+15            cn=1,n=*X0
         3 000701   200007 400032                    ADSC9   MAP_STRING+1,,AUTO       cn=2,n=26

      270    11847    4                             SUBSTR(VX_OU_HEAD.LIB.NAME,8,TSIZE)  );
      271    11848    4                     MAP_STRING.COUNT = TSIZE + 5;

  11848  3 000702   200051 236100                    LDQ     TSIZE,,AUTO
         3 000703   000005 036007                    ADLQ    5,DL
         3 000704   000033 736000                    QLS     27
         3 000705   200006 552140                    STBQ    MAP_STRING,'40'O,AUTO

      272    11849    4                    END;

      273    11850        /*
      274    11851                                  Search for duplicate in unsat library list  */
      275    11852    3                 P$ = ADDR( MAP_STRING );

  11852  3 000706   200006 630500                    EPPR0   MAP_STRING,,AUTO
         3 000707   200016 450500                    STP0    P$,,AUTO

      276    11853    3                 CURR$ = VX_O.FIDN$.UNSAT$;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:75   

  11853  3 000710   000130 236000 xsym               LDQ     VX_O+88
         3 000711   200022 756100                    STQ     CURR$,,AUTO

      277    11854    3                 PREV$ = ADDR( VX_O.FIDN$.UNSAT$ );

  11854  3 000712   000066 236000 4                  LDQ     54
         3 000713   200023 756100                    STQ     PREV$,,AUTO

      278    11855    4                 DO WHILE( CURR$ ~= ADDR(NIL) );

  11855  3 000714   000746 710000 3                  TRA     s:11864

      279    11856    4                     IF P$->T$C.CHARS = CURR$ -> VX$LST.P.NAME_.NAME$->T$C.CHARS

  11856  3 000715   200016 470500                    LDP0    P$,,AUTO
         3 000716   000000 236100                    LDQ     0,,PR0
         3 000717   000033 772000                    QRL     27
         3 000720   200022 471500                    LDP1    CURR$,,AUTO
         3 000721   100006 473500                    LDP3    6,,PR1
         3 000722   000000 620006                    EAX0    0,QL
         3 000723   300000 236100                    LDQ     0,,PR3
         3 000724   000033 772000                    QRL     27
         3 000725   000000 621006                    EAX1    0,QL
         3 000726   040140 106540                    CMPC    fill='040'O
         3 000727   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         3 000730   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         3 000731   000742 601000 3                  TNZ     s:11862

      280    11857    4                     THEN
      281    11858    4                         IF CURR$ -> VX$LST.P.B.ACCT  AND

  11858  3 000732   100017 236100                    LDQ     15,,PR1
         3 000733   100000 316003                    CANQ    32768,DU
         3 000734   000742 600000 3                  TZE     s:11862
         3 000735   100010 474500                    LDP4    8,,PR1
         3 000736   040000 106500                    CMPC    fill='040'O
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:76   
         3 000737   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
         3 000740   000000 000010 xsym               ADSC9   VX_SYS                   cn=0,n=8
         3 000741   001010 600000 3                  TZE     ALREADY_THERE

      282    11859    4                                 CURR$ -> VX$LST.P.ACCT_.ACCT$ -> F$ACCT_ = VX_SYS
      283    11860    4                         THEN
      284    11861    4                             GOTO ALREADY_THERE;
      285    11862    4                     PREV$ = CURR$;

  11862  3 000742   200022 236100                    LDQ     CURR$,,AUTO
         3 000743   200023 756100                    STQ     PREV$,,AUTO

      286    11863    4                     CURR$ = CURR$ -> VX$LST.LINK$;

  11863  3 000744   100000 236100                    LDQ     0,,PR1
         3 000745   200022 756100                    STQ     CURR$,,AUTO

      287    11864    4                    END;                   /* do while ( CURR$ ~= addr(nil) ) */

  11864  3 000746   200022 236100                    LDQ     CURR$,,AUTO
         3 000747   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000750   000715 601000 3                  TNZ     s:11856

      288    11865        /*
      289    11866                                      Add to unsat library list        */
      290    11867    3                 CALL VXS$LST( ALL$, P$, 2/*@LF*/, 0/*@LF_ULIB*/, ADDR(NIL), 0 );

  11867  3 000751   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000752   200114 756100                    STQ     PRIM_TEMP+1,,AUTO
         3 000753   000004 236000 4                  LDQ     4
         3 000754   200123 756100                    STQ     PRIM_TEMP+8,,AUTO
         3 000755   200114 631500                    EPPR1   PRIM_TEMP+1,,AUTO
         3 000756   200122 451500                    STP1    PRIM_TEMP+7,,AUTO
         3 000757   000070 237000 4                  LDAQ    56
         3 000760   200120 757100                    STAQ    PRIM_TEMP+5,,AUTO
         3 000761   200016 633500                    EPPR3   P$,,AUTO
         3 000762   200117 453500                    STP3    PRIM_TEMP+4,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:77   
         3 000763   200021 634500                    EPPR4   ALL$,,AUTO
         3 000764   200116 454500                    STP4    PRIM_TEMP+3,,AUTO
         3 000765   200116 630500                    EPPR0   PRIM_TEMP+3,,AUTO
         3 000766   000024 631400 xsym               EPPR1   B_VECTNIL+20
         3 000767   000000 701000 xent               TSX1    VXS$LST
         3 000770   000000 011000                    NOP     0

      291    11868    3                 PREV$ -> VX$LST.LINK$ = ALL$;

  11868  3 000771   200021 236100                    LDQ     ALL$,,AUTO
         3 000772   200023 470500                    LDP0    PREV$,,AUTO
         3 000773   000000 756100                    STQ     0,,PR0

      292    11869    3                 ALL$ -> VX$LST.PRIOR$ = PREV$;

  11869  3 000774   200023 236100                    LDQ     PREV$,,AUTO
         3 000775   200021 471500                    LDP1    ALL$,,AUTO
         3 000776   100002 756100                    STQ     2,,PR1

      293    11870    3                 ALL$ -> VX$LST.LIB    = '0'B;

  11870  3 000777   200021 471500                    LDP1    ALL$,,AUTO
         3 001000   100004 450100                    STZ     4,,PR1

      294    11871    3                 ALL$ -> VX$LST.P.ACCT_ = VECTOR( VX_SYS );

  11871  3 001001   200021 471500                    LDP1    ALL$,,AUTO
         3 001002   000056 237000 4                  LDAQ    46
         3 001003   100007 755100                    STA     7,,PR1
         3 001004   100010 756100                    STQ     8,,PR1

      295    11872    3                 ALL$ -> VX$LST.P.B.ACCT = '1'B/*@TRUE_B*/;

  11872  3 001005   200021 471500                    LDP1    ALL$,,AUTO
         3 001006   100000 236003                    LDQ     32768,DU
         3 001007   100017 256100                    ORSQ    15,,PR1

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:78   
      296    11873    3                END;

      297    11874    2            END;

      298    11875    1   ALREADY_THERE:

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:79   
      300    11877    1         IF  VX_OU_HEAD.ALIB.COUNT > 0    AND  VX_OU_HEAD.ALIB.COUNT <= 31  AND

  11877  3 001010   000025 236000 xsym  ALREADY_THE* LDQ     VX_OU_HEAD+21
         3 001011   777000 316003                    CANQ    -512,DU
         3 001012   001145 600000 3                  TZE     SKIP_ASL
         3 001013   000025 236000 xsym               LDQ     VX_OU_HEAD+21
         3 001014   777000 376003                    ANQ     -512,DU
         3 001015   040000 116003                    CMPQ    16384,DU
         3 001016   001145 603000 3                  TRC     SKIP_ASL
         3 001017   000000 236000 xsym               LDQ     VX_OD
         3 001020   100000 316007                    CANQ    32768,DL
         3 001021   001145 601000 3                  TNZ     SKIP_ASL
         3 001022   000002 236000 xsym               LDQ     VX_OD+2
         3 001023   000200 316003                    CANQ    128,DU
         3 001024   001145 601000 3                  TNZ     SKIP_ASL

      301    11878    1                 NOT VX_OD.SIN.NOALTSHARELIB AND NOT VX_OD.FID.ALTSHARELIB$
      302    11879    2         THEN DO ;

      303    11880    2             WHERE$ = ADDR( VX_OU_HEAD.ALIB ) ;

  11880  3 001025   000072 236000 4                  LDQ     58
         3 001026   200024 756100                    STQ     WHERE$,,AUTO

      304    11881    2             IF VX_O.FID.ALTSHARELIB$ = ADDR(NIL) THEN GOTO ASL_REQUEST ;

  11881  3 001027   000122 236000 xsym               LDQ     VX_O+82
         3 001030   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001031   001063 600000 3                  TZE     ASL_REQUEST

      305    11882    2             PREV$ = VX_O.FID.ALTSHARELIB$ -> VX$LST.P.NAME_.NAME$ ;

  11882  3 001032   000122 470400 xsym               LDP0    VX_O+82
         3 001033   000006 236100                    LDQ     6,,PR0
         3 001034   200023 756100                    STQ     PREV$,,AUTO

      306    11883    3             IF PREV$ -> T$C.CHARS ~= WHERE$ -> T$C.CHARS THEN DO ;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:80   

  11883  3 001035   200023 471500                    LDP1    PREV$,,AUTO
         3 001036   100000 236100                    LDQ     0,,PR1
         3 001037   000033 772000                    QRL     27
         3 001040   200024 473500                    LDP3    WHERE$,,AUTO
         3 001041   000000 620006                    EAX0    0,QL
         3 001042   300000 236100                    LDQ     0,,PR3
         3 001043   000033 772000                    QRL     27
         3 001044   000000 621006                    EAX1    0,QL
         3 001045   040140 106540                    CMPC    fill='040'O
         3 001046   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         3 001047   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         3 001050   001063 600000 3                  TZE     ASL_REQUEST

      307    11884        /*E*  ERROR: VXO-E$DUPL_ASL_VX-0
      308    11885              MESSAGE: Subsequent %U1 (Alternate Shared Library) reference ignored.
      309    11886              DESCRIPTION:  The object unit head record specified that an Alternate
      310    11887                            Shared Library (ASL) be used.  However, a different ASL
      311    11888                            was previously referenced, and only one ASL can be processed
      312    11889                            by LINK.  This additional ASL reference will be ignored.
      313    11890        */
      314    11891    3                 VX_EFIELD1 = VX_OU_HEAD.ALIB ;

  11891  3 001051   000000 100400                    MLR     fill='000'O
         3 001052   000025 000040 xsym               ADSC9   VX_OU_HEAD+21            cn=0,n=32
         3 001053   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80

      315    11892                      %SCREAM ( ERR# = E$DUPL_ASL_VX,
      316    11893                      LEVEL = @E$W_VX,
      317    11894                      MID = "'O'",
      318    11895                      AUX = @E$REFOUOF_VX ) ;

  11896  3 001054   000074 630400 4                  EPPR0   60
         3 001055   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001056   000000 701000 xent               TSX1    VXE$ERROR
         3 001057   000000 011000                    NOP     0

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:81   
      319    11898    3                 WHERE$ = PREV$ ;

  11898  3 001060   200023 236100                    LDQ     PREV$,,AUTO
         3 001061   200024 756100                    STQ     WHERE$,,AUTO

      320    11899    3                END ;

  11899  3 001062   001075 710000 3                  TRA     s:11916

      321    11900    3             ELSE DO ;

      322    11901    3   ASL_REQUEST:
      323    11902        /*E*  ERROR:  VXO-E$REQU_ASL_VX-0
      324    11903              MESSAGE:  %U1 (Alternate Shared Library) referenced.
      325    11904              DESCRIPTION:  The object unit head record specified that an Alternate
      326    11905                            Shared Library (ASL) be used.
      327    11906        */
      328    11907    3                 VX_EFIELD1 = VX_OU_HEAD.ALIB ;

  11907  3 001063   000000 100400       ASL_REQUEST  MLR     fill='000'O
         3 001064   000025 000040 xsym               ADSC9   VX_OU_HEAD+21            cn=0,n=32
         3 001065   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80

      329    11908                      %SCREAM ( ERR# = E$REQU_ASL_VX,
      330    11909                      LEVEL = @E$I_VX,
      331    11910                      MID = "'O'",
      332    11911                      AUX = E$REFOUOF_SPLIT1_VX ) ;

  11912  3 001066   000101 630400 4                  EPPR0   65
         3 001067   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001070   000000 701000 xent               TSX1    VXE$ERROR
         3 001071   000000 011000                    NOP     0

      333    11914    3                 IF VX_O.FID.ALTSHARELIB$ ~= ADDR(NIL) THEN GOTO SKIP_ASL ;

  11914  3 001072   000122 236000 xsym               LDQ     VX_O+82
         3 001073   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:82   
         3 001074   001145 601000 3                  TNZ     SKIP_ASL

      334    11915    3                END; /* If PREV$ -> T$C.CHARS ~= WHERE$ -> T$C.CHARS then do; */

      335    11916    2             CURR$ = VX_CURR$;

  11916  3 001075   000000 236000 xsym               LDQ     VX_CURR$
         3 001076   200022 756100                    STQ     CURR$,,AUTO

      336    11917    3             DO WHILE( CURR$ ~= ADDR(NIL) );

  11917  3 001077   001105 710000 3                  TRA     s:11920

      337    11918    3                 IF CURR$ -> VX$NODE.HAVE_ASL THEN GOTO SKIP_ASL;

  11918  3 001100   200022 470500                    LDP0    CURR$,,AUTO
         3 001101   000144 234100                    SZN     100,,PR0
         3 001102   001145 604000 3                  TMI     SKIP_ASL

      338    11919    3                 CURR$ = CURR$ -> VX$NODE.FATHER$;

  11919  3 001103   000002 236100                    LDQ     2,,PR0
         3 001104   200022 756100                    STQ     CURR$,,AUTO

      339    11920    3                END;

  11920  3 001105   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001106   001100 601000 3                  TNZ     s:11918

      340    11921    2             CALL VXS$LST(  ALL$,

  11921  3 001107   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001110   200114 756100                    STQ     PRIM_TEMP+1,,AUTO
         3 001111   000004 236000 4                  LDQ     4
         3 001112   200123 756100                    STQ     PRIM_TEMP+8,,AUTO
         3 001113   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 001114   200122 450500                    STP0    PRIM_TEMP+7,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:83   
         3 001115   000106 237000 4                  LDAQ    70
         3 001116   200120 757100                    STAQ    PRIM_TEMP+5,,AUTO
         3 001117   200024 631500                    EPPR1   WHERE$,,AUTO
         3 001120   200117 451500                    STP1    PRIM_TEMP+4,,AUTO
         3 001121   200021 633500                    EPPR3   ALL$,,AUTO
         3 001122   200116 453500                    STP3    PRIM_TEMP+3,,AUTO
         3 001123   200116 630500                    EPPR0   PRIM_TEMP+3,,AUTO
         3 001124   000024 631400 xsym               EPPR1   B_VECTNIL+20
         3 001125   000000 701000 xent               TSX1    VXS$LST
         3 001126   000000 011000                    NOP     0

      341    11922    2                     WHERE$,
      342    11923    2                     2/*@LF*/,
      343    11924    2                     1/*@LF_ALIB*/,
      344    11925    2                     ADDR(NIL),
      345    11926    2                     0    );
      346    11927    2             VX_CURR$ -> VX$NODE.HAVE_ASL = '1'B/*@TRUE_B*/;

  11927  3 001127   000000 470400 xsym               LDP0    VX_CURR$
         3 001130   400000 236003                    LDQ     -131072,DU
         3 001131   000144 256100                    ORSQ    100,,PR0

      347    11928    2             ALL$ -> VX$LST.P.ACCT_ = VECTOR( VX_SYS );

  11928  3 001132   200021 471500                    LDP1    ALL$,,AUTO
         3 001133   000056 237000 4                  LDAQ    46
         3 001134   100007 755100                    STA     7,,PR1
         3 001135   100010 756100                    STQ     8,,PR1

      348    11929    2             VX_O.FID.ALTSHARELIB$ = ALL$;

  11929  3 001136   200021 236100                    LDQ     ALL$,,AUTO
         3 001137   000122 756000 xsym               STQ     VX_O+82

      349    11930    2             VX_CURR$ -> VX$NODE.TAIL$ -> VX$LST.LINK$ = ALL$;

  11930  3 001140   000005 471500                    LDP1    5,,PR0
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:84   
         3 001141   100000 756100                    STQ     0,,PR1

      350    11931    2             VX_CURR$ -> VX$NODE.TAIL$ = ALL$;

  11931  3 001142   200021 236100                    LDQ     ALL$,,AUTO
         3 001143   000000 470400 xsym               LDP0    VX_CURR$
         3 001144   000005 756100                    STQ     5,,PR0

      351    11932    2            END;                       /* If VX_OU_HEAD.ALIB.COUNT > 0 then do; */

      352    11933    1   SKIP_ASL:

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:85   
      354    11935        /* Now do a partial determination of the receiving buffer size */
      355    11936    1         IF VX_OU_HEAD.LB_SIZE > VX_REC_BUF_SIZE THEN VX_REC_BUF_SIZE = VX_OU_HEAD.
             11936                  LB_SIZE;

  11936  3 001145   000003 236000 xsym  SKIP_ASL     LDQ     VX_OU_HEAD+3
         3 001146   777777 376007                    ANQ     -1,DL
         3 001147   000000 116000 xsym               CMPQ    VX_REC_BUF_SIZE
         3 001150   001153 602000 3                  TNC     s:11937
         3 001151   001153 600000 3                  TZE     s:11937

  11936  3 001152   000000 756000 xsym               STQ     VX_REC_BUF_SIZE

      356    11937    1         IF VX_OU_HEAD.PR_SIZE > VX_REC_BUF_SIZE THEN VX_REC_BUF_SIZE = VX_OU_HEAD.
             11937                  PR_SIZE;

  11937  3 001153   000004 236000 xsym               LDQ     VX_OU_HEAD+4
         3 001154   000022 772000                    QRL     18
         3 001155   000000 116000 xsym               CMPQ    VX_REC_BUF_SIZE
         3 001156   001161 602000 3                  TNC     s:11938
         3 001157   001161 600000 3                  TZE     s:11938

  11937  3 001160   000000 756000 xsym               STQ     VX_REC_BUF_SIZE

      357    11938    1         IF VX_OU_HEAD.RL_SIZE > VX_REC_BUF_SIZE THEN VX_REC_BUF_SIZE = VX_OU_HEAD.
             11938                  RL_SIZE;

  11938  3 001161   000004 236000 xsym               LDQ     VX_OU_HEAD+4
         3 001162   777777 376007                    ANQ     -1,DL
         3 001163   000000 116000 xsym               CMPQ    VX_REC_BUF_SIZE
         3 001164   001167 602000 3                  TNC     s:11939
         3 001165   001167 600000 3                  TZE     s:11939

  11938  3 001166   000000 756000 xsym               STQ     VX_REC_BUF_SIZE

      358    11939    1        IF VX_PASS2_REF.OU.MAX.RN < VX_OU_HEAD.REC.RN_SIZE THEN VX_PASS2_REF.OU.MAX.RN
             11939                  = VX_OU_HEAD.REC.RN_SIZE;

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:86   
  11939  3 001167   000006 236000 xsym               LDQ     VX_OU_HEAD+6
         3 001170   000022 772000                    QRL     18
         3 001171   000000 116000 xsym               CMPQ    VX_PASS2_REF
         3 001172   001175 602000 3                  TNC     s:11940
         3 001173   001175 600000 3                  TZE     s:11940

  11939  3 001174   000000 756000 xsym               STQ     VX_PASS2_REF

      359    11940    1        IF VX_PASS2_REF.OU.MAX.ER < VX_OU_HEAD.REC.ER_SIZE THEN VX_PASS2_REF.OU.MAX.ER
             11940                  = VX_OU_HEAD.REC.ER_SIZE;

  11940  3 001175   000010 236000 xsym               LDQ     VX_OU_HEAD+8
         3 001176   000022 772000                    QRL     18
         3 001177   000001 116000 xsym               CMPQ    VX_PASS2_REF+1
         3 001200   001203 602000 3                  TNC     s:11941
         3 001201   001203 600000 3                  TZE     s:11941

  11940  3 001202   000001 756000 xsym               STQ     VX_PASS2_REF+1

      360    11941    1        IF VX_PASS2_REF.OU.MAX.DR < VX_OU_HEAD.REC.DR_SIZE THEN VX_PASS2_REF.OU.MAX.DR
             11941                  = VX_OU_HEAD.REC.DR_SIZE;

  11941  3 001203   000012 236000 xsym               LDQ     VX_OU_HEAD+10
         3 001204   000022 772000                    QRL     18
         3 001205   000002 116000 xsym               CMPQ    VX_PASS2_REF+2
         3 001206   001211 602000 3                  TNC     s:11942
         3 001207   001211 600000 3                  TZE     s:11942

  11941  3 001210   000002 756000 xsym               STQ     VX_PASS2_REF+2

      361    11942    1        IF VX_PASS2_REF.OU.MAX.SR < VX_OU_HEAD.REC.SR_SIZE THEN VX_PASS2_REF.OU.MAX.SR
             11942                  = VX_OU_HEAD.REC.SR_SIZE;

  11942  3 001211   000014 236000 xsym               LDQ     VX_OU_HEAD+12
         3 001212   000022 772000                    QRL     18
         3 001213   000003 116000 xsym               CMPQ    VX_PASS2_REF+3
         3 001214   001217 602000 3                  TNC     s:11945
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:87   
         3 001215   001217 600000 3                  TZE     s:11945

  11942  3 001216   000003 756000 xsym               STQ     VX_PASS2_REF+3

      362    11943
      363    11944        /* Check compaction for ref names */
      364    11945    1         IF  VX_INHIBIT_COMPACTION = 0/*@NO*/

  11945  3 001217   000000 235000 xsym               LDA     VX_INHIBIT_COMPACTION
         3 001220   001230 601000 3                  TNZ     s:11949
         3 001221   000000 470400 xsym               LDP0    VX_CURR$
         3 001222   000000 236000 xsym               LDQ     VX_RN_THRESHOLD
         3 001223   000056 116100                    CMPQ    46,,PR0
         3 001224   001230 603000 3                  TRC     s:11949

      365    11946    1                 AND  VX_CURR$ -> VX$NODE.L_SIZE.RN > VX_RN_THRESHOLD
      366    11947    1         THEN CALL VXO$COMPACT;            /* Yes, compaction to be done */

  11947  3 001225   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001226   000000 701000 xent               TSX1    VXO$COMPACT
         3 001227   000000 011000                    NOP     0


PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:88   
      368    11949    1         TSIZE = VX_OU_HEAD.SEVLEV;

  11949  3 001230   000003 235000 xsym               LDA     VX_OU_HEAD+3
         3 001231   000022 771000                    ARL     18
         3 001232   200051 755100                    STA     TSIZE,,AUTO

      369    11950    2         IF TSIZE > VX_O.NUM.REPORT THEN DO;

  11950  3 001233   200051 236100                    LDQ     TSIZE,,AUTO
         3 001234   001237 604000 3                  TMI     s:11962
         3 001235   000044 116000 xsym               CMPQ    VX_O+36
         3 001236   001265 604400 3                  TMOZ    s:11980

      370    11951        /*E*  ERROR: VXO-E$REPORT_SEV_VX-0
      371    11952              MESSAGE: Severity = %U1 in object unit %U2;
      372    11953                                      In object file %U3.
      373    11954              DESCRIPTION: Self-explanatory.
      374    11955        */
      375    11956                  %NUMBER( NUM1=TSIZE );

  11962  3 001237   000006 236000 4                  LDQ     6
         3 001240   200120 756100                    STQ     PRIM_TEMP+5,,AUTO
         3 001241   200051 630500                    EPPR0   TSIZE,,AUTO
         3 001242   200117 450500                    STP0    PRIM_TEMP+4,,AUTO
         3 001243   000007 236000 4                  LDQ     7
         3 001244   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 001245   000010 237000 4                  LDAQ    8
         3 001246   200114 757100                    STAQ    PRIM_TEMP+1,,AUTO
         3 001247   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 001250   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001251   000000 701000 xent               TSX1    VXD$B2C
         3 001252   000000 011000                    NOP     0

      376    11973    2             VX_EFIELD2 = VX_OK.OUNAME;

  11973  3 001253   000000 100400                    MLR     fill='000'O
         3 001254   000013 000040 xsym               ADSC9   VX_OK+11                 cn=0,n=32
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:89   
         3 001255   000000 000120 xsym               ADSC9   VX_EFIELD2               cn=0,n=80

      377    11974    2             VX_EFIELD3 = VX_OK.FILE.OFNAME;

  11974  3 001256   000000 100400                    MLR     fill='000'O
         3 001257   000023 000051 xsym               ADSC9   VX_OK+19                 cn=0,n=41
         3 001260   000000 000120 xsym               ADSC9   VX_EFIELD3               cn=0,n=80

      378    11975                  %SCREAM( ERR#=E$REPORT_SEV_VX, LEVEL=@E$N_VX, MID="'O'" );

  11976  3 001261   000111 630400 4                  EPPR0   73
         3 001262   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001263   000000 701000 xent               TSX1    VXE$ERROR
         3 001264   000000 011000                    NOP     0

      379    11978    2            END;                       /* If tsize > VX_O.NUM.REPORT then do; */

      380    11979              %CHECK( SEV=TSIZE);

  11980  3 001265   000000 236000 xsym               LDQ     VX_ERR_SEV
         3 001266   200051 116100                    CMPQ    TSIZE,,AUTO
         3 001267   001272 603000 3                  TRC     s:11982

  11980  3 001270   200051 235100                    LDA     TSIZE,,AUTO
         3 001271   000000 755000 xsym               STA     VX_ERR_SEV

      381    11982    1         ALL$ = ALLOCATE$;

  11982  3 001272   200005 470500                    LDP0    @ALLOCATE$,,AUTO
         3 001273   000000 236100                    LDQ     0,,PR0
         3 001274   200021 756100                    STQ     ALL$,,AUTO

      382    11983    2         DO I = 0 TO 6;                    /* Typdnam to typsegdef */

  11983  3 001275   200042 450100                    STZ     I,,AUTO

      383    11984    2             REC_TYPE = VX_PASS1_REC_TYPE(I); /* Get record type */
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:90   

  11984  3 001276   200042 720100                    LXL0    I,,AUTO
         3 001277   000000 235010 xsym               LDA     VX_PASS1_REC_TYPE,X0
         3 001300   200046 755100                    STA     REC_TYPE,,AUTO

      384    11985    2             ALL_TYPE = ALL$ -> VX$WORD_A(REC_TYPE);
             11985                      /*Get segment index for this record type */

  11985  3 001301   200021 470500                    LDP0    ALL$,,AUTO
         3 001302   000000 235105                    LDA     0,AL,PR0
         3 001303   200047 755100                    STA     ALL_TYPE,,AUTO

      385    11986    3             IF REC_TYPE = %TYPSECT THEN DO;

  11986  3 001304   200046 236100                    LDQ     REC_TYPE,,AUTO
         3 001305   000003 116007                    CMPQ    3,DL
         3 001306   001315 601000 3                  TNZ     s:11992

      386    11987    3                 TSIZE = 32768;            /*  (2**14)*2       */

  11987  3 001307   100000 235007                    LDA     32768,DL
         3 001310   200051 755100                    STA     TSIZE,,AUTO

      387    11988    3                 PAGE = 1024/*@PAGE_SIZE*/;

  11988  3 001311   002000 235007                    LDA     1024,DL
         3 001312   200052 755100                    STA     PAGE,,AUTO

      388    11989    3                 GET = 1024/*@PAGE_SIZE*/;

  11989  3 001313   200053 755100                    STA     GET,,AUTO

      389    11990    3                END;

  11990  3 001314   001330 710000 3                  TRA     s:11997

      390    11991    3             ELSE DO;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:91   

      391    11992    3                 HEAD_INX = VX_HEAD_INX(REC_TYPE); /* Get index into head record */

  11992  3 001315   000000 235006 xsym               LDA     VX_HEAD_INX,QL
         3 001316   200050 755100                    STA     HEAD_INX,,AUTO

      392    11993    3                 TSIZE = VX_OU_HEAD.REC_A.SIZE(HEAD_INX);
             11993                          /* Get total size for this record type */

  11993  3 001317   000005 236005 xsym               LDQ     VX_OU_HEAD+5,AL
         3 001320   000022 772000                    QRL     18
         3 001321   200051 756100                    STQ     TSIZE,,AUTO

      393    11994    3                 PAGE = VX_OU_HEAD.REC_A.PAGE(HEAD_INX); /* Get the page size */

  11994  3 001322   200050 721100                    LXL1    HEAD_INX,,AUTO
         3 001323   000005 236011 xsym               LDQ     VX_OU_HEAD+5,X1
         3 001324   777777 376007                    ANQ     -1,DL
         3 001325   200052 756100                    STQ     PAGE,,AUTO

      394    11995    3                 GET = TSIZE;

  11995  3 001326   200051 235100                    LDA     TSIZE,,AUTO
         3 001327   200053 755100                    STA     GET,,AUTO

      395    11996    3                END;

      396    11997    3             IF TSIZE > 0 THEN DO;

  11997  3 001330   200051 236100                    LDQ     TSIZE,,AUTO
         3 001331   002250 600000 3                  TZE     s:12191

      397    11998    3                 IF REC_TYPE = %TYPSECT  OR  REC_TYPE = %TYPEDEF  OR  REC_TYPE = %
             11998                          TYPSDEF

  11998  3 001332   200046 235100                    LDA     REC_TYPE,,AUTO
         3 001333   000003 115007                    CMPA    3,DL
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:92   
         3 001334   001343 600000 3                  TZE     s:12000
         3 001335   000004 115007                    CMPA    4,DL
         3 001336   001343 600000 3                  TZE     s:12000
         3 001337   000006 115007                    CMPA    6,DL
         3 001340   001343 600000 3                  TZE     s:12000
         3 001341   000010 115007                    CMPA    8,DL
         3 001342   001402 601000 3                  TNZ     s:12038

      398    11999    4                         OR REC_TYPE = %TYPSEGDEF THEN DO;

      399    12000    5                     IF MOD( PAGE, 2 ) ~= 0 THEN DO;
             12000                              /* Not an even page size - bitch */

  12000  3 001343   200052 236100                    LDQ     PAGE,,AUTO
         3 001344   000001 376007                    ANQ     1,DL
         3 001345   001402 600000 3                  TZE     s:12038

      400    12001        /*E*  ERROR: VXO-E$ODD_PAGE_SIZE_VX-0
      401    12002              MESSAGE: Object language error: Odd page size.
      402    12003                       Page size = %U1.  Record type = %U2.
      403    12004              DESCRIPTION: Self-explanatory.
      404    12005        */
      405    12006                              %NUMBER(
      406    12007                              NUM1=PAGE, SIZE1=6, BASE1=10,
      407    12008                              NUM2=REC_TYPE, SIZE2=3, BASE2=10 );

  12014  3 001346   000006 236000 4                  LDQ     6
         3 001347   200120 756100                    STQ     PRIM_TEMP+5,,AUTO
         3 001350   200052 631500                    EPPR1   PAGE,,AUTO
         3 001351   200117 451500                    STP1    PRIM_TEMP+4,,AUTO
         3 001352   000007 236000 4                  LDQ     7
         3 001353   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 001354   000010 237000 4                  LDAQ    8
         3 001355   200114 757100                    STAQ    PRIM_TEMP+1,,AUTO
         3 001356   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 001357   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001360   000000 701000 xent               TSX1    VXD$B2C
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:93   
         3 001361   000000 011000                    NOP     0

  12018  3 001362   000006 236000 4                  LDQ     6
         3 001363   200120 756100                    STQ     PRIM_TEMP+5,,AUTO
         3 001364   200046 630500                    EPPR0   REC_TYPE,,AUTO
         3 001365   200117 450500                    STP0    PRIM_TEMP+4,,AUTO
         3 001366   000020 236000 4                  LDQ     16
         3 001367   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 001370   000022 237000 4                  LDAQ    18
         3 001371   200114 757100                    STAQ    PRIM_TEMP+1,,AUTO
         3 001372   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 001373   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001374   000000 701000 xent               TSX1    VXD$B2C
         3 001375   000000 011000                    NOP     0

      408    12025                              %SCREAM(
      409    12026                              ERR#=E$ODD_PAGE_SIZE_VX,
      410    12027                              MID="'O'",
      411    12028                              LEVEL=@E$F_VX,
      412    12029                              AUX=@E$OUOF_VX);

  12030  3 001376   000116 630400 4                  EPPR0   78
         3 001377   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001400   000000 701000 xent               TSX1    VXE$ERROR
         3 001401   000000 011000                    NOP     0

      413    12032    5                        END;

      414    12033    4                    END;

      415    12034                      %ALLOCATE(
      416    12035                      PTR$=START$,
      417    12036                      TYPE=ALL_TYPE,
      418    12037                      SIZE=GET);

  12038  3 001402   200047 720100                    LXL0    ALL_TYPE,,AUTO
         3 001403   000000 236010 xsym               LDQ     VX_M_ALL,X0
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:94   
         3 001404   000000 136010 xsym               SBLQ    VX_M_FREE,X0
         3 001405   001420 604000 3                  TMI     s:12042
         3 001406   200053 116100                    CMPQ    GET,,AUTO
         3 001407   001420 602000 3                  TNC     s:12042

  12039  3 001410   000000 236010 xsym               LDQ     VX_M_FREE,X0
         3 001411   000000 470410 xsym               LDP0    VX_M_BASE_PTR,X0
         3 001412   000000 631506                    EPPR1   0,QL,PR0
         3 001413   200025 451500                    STP1    START$,,AUTO

  12040  3 001414   000000 236010 xsym               LDQ     VX_M_FREE,X0
         3 001415   200053 036100                    ADLQ    GET,,AUTO
         3 001416   000000 756010 xsym               STQ     VX_M_FREE,X0

  12041  3 001417   001432 710000 3                  TRA     s:12044

  12042  3 001420   200053 630500                    EPPR0   GET,,AUTO
         3 001421   200116 450500                    STP0    PRIM_TEMP+3,,AUTO
         3 001422   200047 631500                    EPPR1   ALL_TYPE,,AUTO
         3 001423   200115 451500                    STP1    PRIM_TEMP+2,,AUTO
         3 001424   200025 633500                    EPPR3   START$,,AUTO
         3 001425   200114 453500                    STP3    PRIM_TEMP+1,,AUTO
         3 001426   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 001427   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 001430   000000 701000 xent               TSX1    VXA$GET
         3 001431   000000 011000                    NOP     0

      419    12044    4                 IF REC_TYPE = %TYPSECT THEN DO;

  12044  3 001432   200046 235100                    LDA     REC_TYPE,,AUTO
         3 001433   000003 115007                    CMPA    3,DL
         3 001434   001444 601000 3                  TNZ     s:12049

      420    12045    4                     IF VX_CURR$ -> VX$NODE.L_START_A$(REC_TYPE) = ADDR(NIL) THEN

  12045  3 001435   000000 470400 xsym               LDP0    VX_CURR$
         3 001436   000030 236105                    LDQ     24,AL,PR0
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:95   
         3 001437   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001440   001444 601000 3                  TNZ     s:12049

      421    12046    4                         VX_CURR$ -> VX$NODE.L_START_A$(REC_TYPE) = START$;

  12046  3 001441   200025 236100                    LDQ     START$,,AUTO
         3 001442   200046 720100                    LXL0    REC_TYPE,,AUTO
         3 001443   000030 756110                    STQ     24,X0,PR0

      422    12047                                                /* Set start for this record type */
      423    12048    4                    END;

      424    12049    4                 IF VX_IN_PATCH THEN DO;

  12049  3 001444   000000 234000 xsym               SZN     VX_IN_PATCH
         3 001445   001477 605000 3                  TPL     s:12061

      425    12050    4                     IF  ( REC_TYPE = %TYPEDEF OR REC_TYPE = %TYPSDEF )

  12050  3 001446   200046 235100                    LDA     REC_TYPE,,AUTO
         3 001447   000004 115007                    CMPA    4,DL
         3 001450   001453 600000 3                  TZE     s:12050+5
         3 001451   000006 115007                    CMPA    6,DL
         3 001452   001477 601000 3                  TNZ     s:12061
         3 001453   000000 234000 xsym               SZN     VX_LIB_USED
         3 001454   001477 605000 3                  TPL     s:12061

      426    12051    5                             AND VX_LIB_USED THEN DO ;

      427    12052    5                         IF VX_CURR$->VX$NODE.L_START_A$(REC_TYPE) = ADDR (NIL) THEN

  12052  3 001455   000000 470400 xsym               LDP0    VX_CURR$
         3 001456   000030 236105                    LDQ     24,AL,PR0
         3 001457   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001460   001464 601000 3                  TNZ     s:12054

      428    12053    5                             VX_CURR$->VX$NODE.L_START_A$(REC_TYPE) = START$ ;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:96   

  12053  3 001461   200025 236100                    LDQ     START$,,AUTO
         3 001462   200046 720100                    LXL0    REC_TYPE,,AUTO
         3 001463   000030 756110                    STQ     24,X0,PR0

      429    12054    5                         IF  VX_CURR$ -> VX$NODE.L_STOP_A$(REC_TYPE) = ADDR (NIL)

  12054  3 001464   000000 470400 xsym               LDP0    VX_CURR$
         3 001465   200046 720100                    LXL0    REC_TYPE,,AUTO
         3 001466   000042 236110                    LDQ     34,X0,PR0
         3 001467   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001470   001475 601000 3                  TNZ     s:12058

      430    12055    5                         THEN
      431    12056    5                            VX_CURR$ -> VX$NODE.L_STOP_A$(REC_TYPE) = PINCRW ( START$,
             12056                                      2 ) ;

  12056  3 001471   200025 236100                    LDQ     START$,,AUTO
         3 001472   000002 036003                    ADLQ    2,DU
         3 001473   000042 756110                    STQ     34,X0,PR0
         3 001474   001477 710000 3                  TRA     s:12061

      432    12057    5                         ELSE
      433    12058    5                            START$ = PINCRW(VX_CURR$->VX$NODE.L_STOP_A$(REC_TYPE),2) ;

  12058  3 001475   000002 036003                    ADLQ    2,DU
         3 001476   200025 756100                    STQ     START$,,AUTO

      434    12059    5                        END ;

      435    12060    4                    END;

      436    12061    3                 CALL VXU$PREAD(

  12061  3 001477   200004 236100                    LDQ     @SOURCE,,AUTO
         3 001500   000123 235000 4                  LDA     83
         3 001501   200126 757100                    STAQ    PRIM_TEMP+11,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:97   
         3 001502   200053 630500                    EPPR0   GET,,AUTO
         3 001503   200125 450500                    STP0    PRIM_TEMP+10,,AUTO
         3 001504   200047 631500                    EPPR1   ALL_TYPE,,AUTO
         3 001505   200124 451500                    STP1    PRIM_TEMP+9,,AUTO
         3 001506   200051 633500                    EPPR3   TSIZE,,AUTO
         3 001507   200123 453500                    STP3    PRIM_TEMP+8,,AUTO
         3 001510   200052 634500                    EPPR4   PAGE,,AUTO
         3 001511   200122 454500                    STP4    PRIM_TEMP+7,,AUTO
         3 001512   200025 635500                    EPPR5   START$,,AUTO
         3 001513   200121 455500                    STP5    PRIM_TEMP+6,,AUTO
         3 001514   200046 636500                    EPPR6   REC_TYPE,,AUTO
         3 001515   200120 456500                    STP6    PRIM_TEMP+5,,AUTO
         3 001516   000112 237000 4                  LDAQ    74
         3 001517   200116 757100                    STAQ    PRIM_TEMP+3,,AUTO
         3 001520   200056 637500                    EPPR7   TSIZE_READ,,AUTO
         3 001521   200115 457500                    STP7    PRIM_TEMP+2,,AUTO
         3 001522   200055 630500                    EPPR0   NPAGE,,AUTO
         3 001523   200114 450500                    STP0    PRIM_TEMP+1,,AUTO
         3 001524   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 001525   000122 631400 4                  EPPR1   82
         3 001526   000000 701000 xent               TSX1    VXU$PREAD
         3 001527   000000 011000                    NOP     0

      437    12062    3                         NPAGE,
      438    12063    3                         TSIZE_READ,
      439    12064    3                         0/*@OF*/,
      440    12065    3                         0/*@OF*/,
      441    12066    3                         REC_TYPE,
      442    12067    3                         START$,
      443    12068    3                         PAGE,
      444    12069    3                         TSIZE,
      445    12070    3                         ALL_TYPE,
      446    12071    3                         GET,
      447    12072    3                         VX_CURR$,
      448    12073    3                         SOURCE
      449    12074    3                         );
      450    12075    4                 IF REC_TYPE = %TYPSECT THEN DO; /* Expand sections record */
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:98   

  12075  3 001530   200046 235100                    LDA     REC_TYPE,,AUTO
         3 001531   000003 115007                    CMPA    3,DL
         3 001532   002227 601000 3                  TNZ     s:12189

      451    12076    4                     VX_LAST_SC$ = START$;

  12076  3 001533   200025 236100                    LDQ     START$,,AUTO
         3 001534   000000 756000 xsym               STQ     VX_LAST_SC$

      452    12077    4                     VX_LAST_SC_BASE = VX_LAST_SC_BASE + VX_CURR_SC_ENTRIES;

  12077  3 001535   000000 236000 xsym               LDQ     VX_LAST_SC_BASE
         3 001536   000000 036000 xsym               ADLQ    VX_CURR_SC_ENTRIES
         3 001537   000000 756000 xsym               STQ     VX_LAST_SC_BASE

      453    12078    4                     VX_CURR_SC_ENTRIES = TSIZE_READ/ SIZEW( VX$SECT );

  12078  3 001540   200056 236100                    LDQ     TSIZE_READ,,AUTO
         3 001541   000002 506007                    DIV     2,DL
         3 001542   000000 756000 xsym               STQ     VX_CURR_SC_ENTRIES

      454    12079    4                     IF VX_SC_START$ = ADDR(NIL) THEN VX_SC_START$ = START$;

  12079  3 001543   000000 236000 xsym               LDQ     VX_SC_START$
         3 001544   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001545   001550 601000 3                  TNZ     s:12080

  12079  3 001546   200025 236100                    LDQ     START$,,AUTO
         3 001547   000000 756000 xsym               STQ     VX_SC_START$

      455    12080    5                     IF GET - TSIZE_READ < TSIZE_READ + SIZEW( VX$SC ) THEN DO;

  12080  3 001550   200053 236100                    LDQ     GET,,AUTO
         3 001551   200056 136100                    SBLQ    TSIZE_READ,,AUTO
         3 001552   200056 235100                    LDA     TSIZE_READ,,AUTO
         3 001553   000003 035007                    ADLA    3,DL
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:99   
         3 001554   200114 755100                    STA     PRIM_TEMP+1,,AUTO
         3 001555   200114 116100                    CMPQ    PRIM_TEMP+1,,AUTO
         3 001556   001616 605000 3                  TPL     s:12094

      456    12081    5                         HALVE = TSIZE_READ + TSIZE_READ + SIZEW( VX$SC ) - GET;

  12081  3 001557   200056 236100                    LDQ     TSIZE_READ,,AUTO
         3 001560   200056 036100                    ADLQ    TSIZE_READ,,AUTO
         3 001561   200053 136100                    SBLQ    GET,,AUTO
         3 001562   000003 036007                    ADLQ    3,DL
         3 001563   200054 756100                    STQ     HALVE,,AUTO

      457    12082                              %ALLOCATE(
      458    12083                              PTR$=P$,
      459    12084                              TYPE=@SC_DS_1,
      460    12085                              SIZE=HALVE);

  12086  3 001564   000007 236000 xsym               LDQ     VX_M_ALL+7
         3 001565   000007 136000 xsym               SBLQ    VX_M_FREE+7
         3 001566   001601 604000 3                  TMI     s:12090
         3 001567   200054 116100                    CMPQ    HALVE,,AUTO
         3 001570   001601 602000 3                  TNC     s:12090

  12087  3 001571   000007 236000 xsym               LDQ     VX_M_FREE+7
         3 001572   000022 736000                    QLS     18
         3 001573   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         3 001574   200016 756100                    STQ     P$,,AUTO

  12088  3 001575   000007 236000 xsym               LDQ     VX_M_FREE+7
         3 001576   200054 036100                    ADLQ    HALVE,,AUTO
         3 001577   000007 756000 xsym               STQ     VX_M_FREE+7

  12089  3 001600   001613 710000 3                  TRA     s:12092

  12090  3 001601   200054 630500                    EPPR0   HALVE,,AUTO
         3 001602   200116 450500                    STP0    PRIM_TEMP+3,,AUTO
         3 001603   000124 236000 4                  LDQ     84
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:100  
         3 001604   200115 756100                    STQ     PRIM_TEMP+2,,AUTO
         3 001605   200016 631500                    EPPR1   P$,,AUTO
         3 001606   200114 451500                    STP1    PRIM_TEMP+1,,AUTO
         3 001607   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 001610   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 001611   000000 701000 xent               TSX1    VXA$GET
         3 001612   000000 011000                    NOP     0

      461    12092    5                         GET = GET + HALVE;

  12092  3 001613   200053 236100                    LDQ     GET,,AUTO
         3 001614   200054 036100                    ADLQ    HALVE,,AUTO
         3 001615   200053 756100                    STQ     GET,,AUTO

      462    12093    5                        END;

      463    12094    4                     WHERE$ = PINCRW( START$, TSIZE_READ + SIZEW( VX$SC ) );

  12094  3 001616   200056 236100                    LDQ     TSIZE_READ,,AUTO
         3 001617   000022 736000                    QLS     18
         3 001620   000003 036003                    ADLQ    3,DU
         3 001621   200025 036100                    ADLQ    START$,,AUTO
         3 001622   200024 756100                    STQ     WHERE$,,AUTO

      464    12095    4                     VX_TARGET_COUNT = TSIZE_READ * 4/*@CHAR_WORD*/;

  12095  3 001623   200056 235100                    LDA     TSIZE_READ,,AUTO
         3 001624   000002 735000                    ALS     2
         3 001625   000000 755000 xsym               STA     VX_TARGET_COUNT

      465    12096    4                     VX_SOURCE_COUNT = VX_TARGET_COUNT;

  12096  3 001626   000000 755000 xsym               STA     VX_SOURCE_COUNT

      466    12097    4                     WHERE$ -> VX$TARGET_C    =    START$ -> VX$SOURCE_C;

  12097  3 001627   200025 470500                    LDP0    START$,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:101  
         3 001630   000000 620005                    EAX0    0,AL
         3 001631   200024 471500                    LDP1    WHERE$,,AUTO
         3 001632   000000 721000 xsym               LXL1    VX_TARGET_COUNT
         3 001633   040140 100540                    MLR     fill='040'O
         3 001634   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 001635   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1

      467    12098    4                     P$ = WHERE$;

  12098  3 001636   200024 236100                    LDQ     WHERE$,,AUTO
         3 001637   200016 756100                    STQ     P$,,AUTO

      468    12099    4                     Q$ = START$;

  12099  3 001640   200025 236100                    LDQ     START$,,AUTO
         3 001641   200017 756100                    STQ     Q$,,AUTO

      469    12100    4                     R$ = PINCRW( WHERE$, TSIZE_READ );

  12100  3 001642   200056 236100                    LDQ     TSIZE_READ,,AUTO
         3 001643   000022 736000                    QLS     18
         3 001644   200024 036100                    ADLQ    WHERE$,,AUTO
         3 001645   200020 756100                    STQ     R$,,AUTO

      470    12101    5                     DO WHILE ( P$ < R$ );

  12101  3 001646   200016 116100                    CMPQ    P$,,AUTO
         3 001647   002115 602000 3                  TNC     s:12167
         3 001650   002115 600000 3                  TZE     s:12167

      471    12102    5                         SC_TYPE          = P$ -> VX$SECT.TYPE;

  12102  3 001651   200016 470500                    LDP0    P$,,AUTO
         3 001652   000000 236100                    LDQ     0,,PR0
         3 001653   000033 772000                    QRL     27
         3 001654   200057 756100                    STQ     SC_TYPE,,AUTO

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:102  
      472    12103    5                         Q$ -> VX$SC      = P$ -> VX$SECT;

  12103  3 001655   200017 471500                    LDP1    Q$,,AUTO
         3 001656   000100 100500                    MLR     fill='000'O
         3 001657   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         3 001660   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12

      473    12104    5                         Q$ -> VX$SC.SIZE = P$ -> VX$SECT.SIZE;

  12104  3 001661   200016 470500                    LDP0    P$,,AUTO
         3 001662   000000 720100                    LXL0    0,,PR0
         3 001663   200017 471500                    LDP1    Q$,,AUTO
         3 001664   100001 440100                    SXL0    1,,PR1

      474    12105    5                         IF Q$ -> VX$SC.ATTR.SEGMENT

  12105  3 001665   200017 470500                    LDP0    Q$,,AUTO
         3 001666   000000 236100                    LDQ     0,,PR0
         3 001667   000040 316003                    CANQ    32,DU
         3 001670   001677 600000 3                  TZE     s:12107

      475    12106    5                         THEN Q$ -> VX$SC.SEG = P$ -> VX$SECT.SEG_NPOINTER;

  12106  3 001671   200016 471500                    LDP1    P$,,AUTO
         3 001672   100001 236100                    LDQ     1,,PR1
         3 001673   000041 736000                    QLS     33
         3 001674   000000 676100                    ERQ     0,,PR0
         3 001675   700000 376003                    ANQ     -32768,DU
         3 001676   000000 656100                    ERSQ    0,,PR0

      476    12107    5                         Q$ -> VX$SC.NODE# = VX_CURR$ -> VX$NODE.NUM;

  12107  3 001677   000000 470400 xsym               LDP0    VX_CURR$
         3 001700   000010 720100                    LXL0    8,,PR0
         3 001701   200017 471500                    LDP1    Q$,,AUTO
         3 001702   100002 740100                    STX0    2,,PR1

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:103  
      477    12108    6                         DO CASE( SC_TYPE );

  12108  3 001703   200057 235100                    LDA     SC_TYPE,,AUTO
         3 001704   000011 115007                    CMPA    9,DL
         3 001705   001707 602005 3                  TNC     s:12108+4,AL
         3 001706   002105 710000 3                  TRA     s:12164
         3 001707   002105 710000 3                  TRA     s:12164
         3 001710   002105 710000 3                  TRA     s:12164
         3 001711   001733 710000 3                  TRA     s:12119
         3 001712   001720 710000 3                  TRA     s:12110
         3 001713   001724 710000 3                  TRA     s:12113
         3 001714   002105 710000 3                  TRA     s:12164
         3 001715   002105 710000 3                  TRA     s:12164
         3 001716   001730 710000 3                  TRA     s:12116
         3 001717   001730 710000 3                  TRA     s:12116

      478    12109    6                           CASE( %RLCOMSECTION );

      479    12110    6                             VX_SC_ROOT_LBL_COM = VX_SC_ROOT_LBL_COM + 1;

  12110  3 001720   000000 236000 xsym               LDQ     VX_SC_ROOT_LBL_COM
         3 001721   000001 036007                    ADLQ    1,DL
         3 001722   000000 756000 xsym               STQ     VX_SC_ROOT_LBL_COM

      480    12111    6                             GOTO INSERT_UNTO_CHAIN;

  12111  3 001723   002045 710000 3                  TRA     INSERT_UNTO_CHAIN

      481    12112    6                           CASE( %LCOMSECTION );

      482    12113    6                             VX_SC_LBL_COM = VX_SC_LBL_COM + 1;

  12113  3 001724   000000 236000 xsym               LDQ     VX_SC_LBL_COM
         3 001725   000001 036007                    ADLQ    1,DL
         3 001726   000000 756000 xsym               STQ     VX_SC_LBL_COM

      483    12114    6                             GOTO INSERT_UNTO_CHAIN;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:104  

  12114  3 001727   002045 710000 3                  TRA     INSERT_UNTO_CHAIN

      484    12115    6                           CASE( %ROLCOMSECTION,%RORLCOMSECTION );

      485    12116    6                             SC_TYPE = %DCBSECTION;

  12116  3 001730   000005 236007                    LDQ     5,DL
         3 001731   200057 756100                    STQ     SC_TYPE,,AUTO

      486    12117    6                             GOTO INSERT_UNTO_CHAIN;

  12117  3 001732   002045 710000 3                  TRA     INSERT_UNTO_CHAIN

      487    12118    6                           CASE(     %UCOMSECTION    );

      488    12119    6                             VX_SC_BLK_COM = VX_SC_BLK_COM + 1;

  12119  3 001733   000000 236000 xsym               LDQ     VX_SC_BLK_COM
         3 001734   000001 036007                    ADLQ    1,DL
         3 001735   000000 756000 xsym               STQ     VX_SC_BLK_COM

      489    12120    6                             TAIL$ = VX_CURR$;

  12120  3 001736   000000 236000 xsym               LDQ     VX_CURR$
         3 001737   200026 756100                    STQ     TAIL$,,AUTO

      490    12121    6                             MAKE$ = ADDR(NIL);

  12121  3 001740   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001741   200027 756100                    STQ     MAKE$,,AUTO

      491    12122    6   CHECK_UP:
      492    12123    6                             IF TAIL$ -> VX$NODE.ALL_BLK_COM THEN MAKE$ = TAIL$;

  12123  3 001742   200026 470500       CHECK_UP     LDP0    TAIL$,,AUTO
         3 001743   000144 236100                    LDQ     100,,PR0
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:105  
         3 001744   200000 316003                    CANQ    65536,DU
         3 001745   001750 600000 3                  TZE     s:12124

  12123  3 001746   200026 236100                    LDQ     TAIL$,,AUTO
         3 001747   200027 756100                    STQ     MAKE$,,AUTO

      493    12124    6                             TAIL$ = TAIL$ -> VX$NODE.FATHER$;

  12124  3 001750   000002 236100                    LDQ     2,,PR0
         3 001751   200026 756100                    STQ     TAIL$,,AUTO

      494    12125    6                             IF TAIL$ ~= ADDR(NIL) THEN GOTO CHECK_UP;

  12125  3 001752   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001753   001742 601000 3                  TNZ     CHECK_UP

      495    12126        /**/
      496    12127    7                            IF MAKE$ = ADDR(NIL) THEN DO; /* Allocate for this node */

  12127  3 001754   200027 236100                    LDQ     MAKE$,,AUTO
         3 001755   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001756   002017 601000 3                  TNZ     s:12146

      497    12128    7                                 MAKE$ = VX_CURR$;

  12128  3 001757   000000 236000 xsym               LDQ     VX_CURR$
         3 001760   200027 756100                    STQ     MAKE$,,AUTO

      498    12129    7                                 VX_BLK_COM_COUNT = VX_BLK_COM_COUNT + 1;

  12129  3 001761   000000 235000 xsym               LDA     VX_BLK_COM_COUNT
         3 001762   000001 035007                    ADLA    1,DL
         3 001763   000000 755000 xsym               STA     VX_BLK_COM_COUNT

      499    12130    7                                 MAKE$ -> VX$NODE.ALL_BLK_COM = '1'B/*@TRUE_B*/;

  12130  3 001764   200027 470500                    LDP0    MAKE$,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:106  
         3 001765   200000 236003                    LDQ     65536,DU
         3 001766   000144 256100                    ORSQ    100,,PR0

      500    12131    7                                MAKE$ -> VX$NODE.BLANK_COMMON$ -> VX$SC = Q$ -> VX$SC;

  12131  3 001767   000145 471500                    LDP1    101,,PR0
         3 001770   200017 473500                    LDP3    Q$,,AUTO
         3 001771   000100 100500                    MLR     fill='000'O
         3 001772   300000 000014                    ADSC9   0,,PR3                   cn=0,n=12
         3 001773   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12

      501    12132    8                                 IF VX_CHK_BLANK_COM_PROMOTE THEN DO;

  12132  3 001774   000000 234000 xsym               SZN     VX_CHK_BLANK_COM_PROMOTE
         3 001775   002030 605000 3                  TPL     s:12149

      502    12133    9                                     IF VX_SC_BLANK_COM_PROMOTE$ = ADDR(NIL) THEN DO;

  12133  3 001776   000000 236000 xsym               LDQ     VX_SC_BLANK_COM_PROMOTE$
         3 001777   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002000   002010 601000 3                  TNZ     s:12137

      503    12134    9                                         VX_SC_BLANK_COM_PROMOTE$ = MAKE$;

  12134  3 002001   200027 236100                    LDQ     MAKE$,,AUTO
         3 002002   000000 756000 xsym               STQ     VX_SC_BLANK_COM_PROMOTE$

      504    12135    9                                         VX_SC_BLANK_COMMON = Q$ -> VX$SC;

  12135  3 002003   200017 471500                    LDP1    Q$,,AUTO
         3 002004   000000 100500                    MLR     fill='000'O
         3 002005   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12
         3 002006   000000 000014 xsym               ADSC9   VX_SC_BLANK_COMMON       cn=0,n=12

      505    12136    9                                        END;

  12136  3 002007   002030 710000 3                  TRA     s:12149
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:107  

      506    12137    9                                     ELSE IF VX_SC_BLANK_COM_PROMOTE$ -> VX$NODE.DEPTH
             12137                                              > MAKE$ -> VX$NODE.DEPTH THEN DO;

  12137  3 002010   000000 471400 xsym               LDP1    VX_SC_BLANK_COM_PROMOTE$
         3 002011   000011 236100                    LDQ     9,,PR0
         3 002012   100011 116100                    CMPQ    9,,PR1
         3 002013   002030 603000 3                  TRC     s:12149

      507    12138    9                                             VX_SC_BLANK_COM_PROMOTE$ = MAKE$;

  12138  3 002014   200027 236100                    LDQ     MAKE$,,AUTO
         3 002015   000000 756000 xsym               STQ     VX_SC_BLANK_COM_PROMOTE$

      508    12139    9                                            END;

      509    12140    8                                    END; /* If VX_CHK_BLANK_COM_PROMOTE then do; */

      510    12141    7                                END;       /* If MAKE$ = addr(nil) then do; */

  12141  3 002016   002030 710000 3                  TRA     s:12149

      511    12142        /*
      512    12143              Here some allocated above
      513    12144        */
      514    12145    7                             ELSE DO;

      515    12146    7                                 CALL CHK( MAKE$ -> VX$NODE.BLANK_COMMON$, Q$, '1'B );

  12146  3 002017   000125 236000 4                  LDQ     85
         3 002020   200107 756100                    STQ     @SEC_P$+1,,AUTO
         3 002021   200017 630500                    EPPR0   Q$,,AUTO
         3 002022   200106 450500                    STP0    @PRIM_P$+1,,AUTO
         3 002023   200027 236100                    LDQ     MAKE$,,AUTO
         3 002024   000145 036003                    ADLQ    101,DU
         3 002025   200105 756100                    STQ     PRECEDENCE+15,,AUTO
         3 002026   002270 701000 3                  TSX1    CHK
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:108  
         3 002027   000000 011000                    NOP     0

      516    12147    7                                END;       /* Else do; */

      517    12148        /**/
      518    12149    6                             IF VX_CHK_BLANK_COM_PROMOTE THEN

  12149  3 002030   000000 234000 xsym               SZN     VX_CHK_BLANK_COM_PROMOTE
         3 002031   002045 605000 3                  TPL     INSERT_UNTO_CHAIN

      519    12150    6                                 CALL CHK( ADDR( VX_SC_BLANK_COMMON ),

  12150  3 002032   000126 236000 4                  LDQ     86
         3 002033   200130 756100                    STQ     PRIM_TEMP+13,,AUTO
         3 002034   000004 236000 4                  LDQ     4
         3 002035   200107 756100                    STQ     @SEC_P$+1,,AUTO
         3 002036   200027 236100                    LDQ     MAKE$,,AUTO
         3 002037   000145 036003                    ADLQ    101,DU
         3 002040   200106 756100                    STQ     @PRIM_P$+1,,AUTO
         3 002041   200130 630500                    EPPR0   PRIM_TEMP+13,,AUTO
         3 002042   200105 450500                    STP0    PRECEDENCE+15,,AUTO
         3 002043   002270 701000 3                  TSX1    CHK
         3 002044   000000 011000                    NOP     0

      520    12151    6                                         MAKE$ -> VX$NODE.BLANK_COMMON$, '0'B );
      521    12152    6   INSERT_UNTO_CHAIN:
      522    12153    6                             INDX  = SC_TYPE - %UCOMSECTION;

  12153  3 002045   200057 235100       INSERT_UNTO* LDA     SC_TYPE,,AUTO
         3 002046   000002 135007                    SBLA    2,DL
         3 002047   200060 755100                    STA     INDX,,AUTO

      523    12154    7                             IF VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX) = ADDR(NIL)
             12154                                      THEN DO;

  12154  3 002050   000000 470400 xsym               LDP0    VX_CURR$
         3 002051   000130 236105                    LDQ     88,AL,PR0
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:109  
         3 002052   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002053   002062 601000 3                  TNZ     s:12158

      524    12155    7                                 VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX) = Q$;

  12155  3 002054   200017 236100                    LDQ     Q$,,AUTO
         3 002055   200060 720100                    LXL0    INDX,,AUTO
         3 002056   000130 756110                    STQ     88,X0,PR0

      525    12156    7                                 TAIL$ = Q$;

  12156  3 002057   200017 236100                    LDQ     Q$,,AUTO
         3 002060   200026 756100                    STQ     TAIL$,,AUTO

      526    12157    7                                END;

  12157  3 002061   002065 710000 3                  TRA     s:12159

      527    12158    6                             ELSE TAIL$ = VX_CURR$ -> VX$NODE.L_SC_STOP_A$(INDX);

  12158  3 002062   200060 720100                    LXL0    INDX,,AUTO
         3 002063   000134 236110                    LDQ     92,X0,PR0
         3 002064   200026 756100                    STQ     TAIL$,,AUTO

      528    12159    6                             LAST_DISP = POFFW( Q$, VX_SC_START$ );

  12159  3 002065   000000 235000 xsym               LDA     VX_SC_START$
         3 002066   000022 771000                    ARL     18
         3 002067   200114 755100                    STA     PRIM_TEMP+1,,AUTO
         3 002070   200017 236100                    LDQ     Q$,,AUTO
         3 002071   000022 772000                    QRL     18
         3 002072   200114 136100                    SBLQ    PRIM_TEMP+1,,AUTO
         3 002073   200061 756100                    STQ     LAST_DISP,,AUTO

      529    12160    6                             TAIL$ -> VX$SC.COM_LINK  = LAST_DISP;

  12160  3 002074   000000 621006                    EAX1    0,QL
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:110  
         3 002075   200026 470500                    LDP0    TAIL$,,AUTO
         3 002076   000002 441100                    SXL1    2,,PR0

      530    12161    6                             Q$ -> VX$SC.COM_LINK = LAST_DISP;

  12161  3 002077   200061 722100                    LXL2    LAST_DISP,,AUTO
         3 002100   200017 471500                    LDP1    Q$,,AUTO
         3 002101   100002 442100                    SXL2    2,,PR1

      531    12162    6                             VX_CURR$ -> VX$NODE.L_SC_STOP_A$(INDX) = Q$;

  12162  3 002102   200017 236100                    LDQ     Q$,,AUTO
         3 002103   000000 471400 xsym               LDP1    VX_CURR$
         3 002104   100134 756110                    STQ     92,X0,PR1

      532    12163    6                           END;            /* Do case( SC_TYPE ); */

      533    12164    5                         Q$ = PINCRW( Q$, SIZEW(VX$SC) );

  12164  3 002105   200017 236100                    LDQ     Q$,,AUTO
         3 002106   000003 036003                    ADLQ    3,DU
         3 002107   200017 756100                    STQ     Q$,,AUTO

      534    12165    5                         P$ = PINCRW( P$, SIZEW(VX$SECT) );

  12165  3 002110   200016 236100                    LDQ     P$,,AUTO
         3 002111   000002 036003                    ADLQ    2,DU
         3 002112   200016 756100                    STQ     P$,,AUTO

      535    12166    5                        END;               /* While */

  12166  3 002113   200020 116100                    CMPQ    R$,,AUTO
         3 002114   001651 602000 3                  TNC     s:12102

      536    12167    4                     VX_CURR$ -> VX$NODE.L_STOP.SC$ = PINCRW( Q$, -SIZEW(VX$SC) );

  12167  3 002115   200017 236100                    LDQ     Q$,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:111  
         3 002116   777775 036003                    ADLQ    -3,DU
         3 002117   000000 470400 xsym               LDP0    VX_CURR$
         3 002120   000045 756100                    STQ     37,,PR0

      537    12168    4                     VX_CURR$ -> VX$NODE.L_SIZE.SC = POFFW( Q$,

  12168  3 002121   000033 236100                    LDQ     27,,PR0
         3 002122   000022 772000                    QRL     18
         3 002123   200114 756100                    STQ     PRIM_TEMP+1,,AUTO
         3 002124   200017 236100                    LDQ     Q$,,AUTO
         3 002125   000022 772000                    QRL     18
         3 002126   200114 136100                    SBLQ    PRIM_TEMP+1,,AUTO
         3 002127   000057 756100                    STQ     47,,PR0

      538    12169    4                             VX_CURR$ -> VX$NODE.L_START.SC$ );
      539    12170    4                     TSIZE_READ = POFFW( Q$, START$ );

  12170  3 002130   200025 235100                    LDA     START$,,AUTO
         3 002131   000022 771000                    ARL     18
         3 002132   200114 755100                    STA     PRIM_TEMP+1,,AUTO
         3 002133   200017 236100                    LDQ     Q$,,AUTO
         3 002134   000022 772000                    QRL     18
         3 002135   200114 136100                    SBLQ    PRIM_TEMP+1,,AUTO
         3 002136   200056 756100                    STQ     TSIZE_READ,,AUTO

      540    12171    4                    IF TSIZE_READ < GET THEN CALL VXF$FREE( ALL_TYPE, GET - TSIZE_READ
             12171                              , 1 );

  12171  3 002137   002142 604000 3                  TMI     s:12171+3
         3 002140   200053 116100                    CMPQ    GET,,AUTO
         3 002141   002157 603000 3                  TRC     s:12173

  12171  3 002142   200053 236100                    LDQ     GET,,AUTO
         3 002143   200056 136100                    SBLQ    TSIZE_READ,,AUTO
         3 002144   200114 756100                    STQ     PRIM_TEMP+1,,AUTO
         3 002145   000102 236000 4                  LDQ     66
         3 002146   200117 756100                    STQ     PRIM_TEMP+4,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:112  
         3 002147   200114 631500                    EPPR1   PRIM_TEMP+1,,AUTO
         3 002150   200116 451500                    STP1    PRIM_TEMP+3,,AUTO
         3 002151   200047 633500                    EPPR3   ALL_TYPE,,AUTO
         3 002152   200115 453500                    STP3    PRIM_TEMP+2,,AUTO
         3 002153   200115 630500                    EPPR0   PRIM_TEMP+2,,AUTO
         3 002154   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 002155   000000 701000 xent               TSX1    VXF$FREE
         3 002156   000000 011000                    NOP     0

      541    12172        /* Build high level index structure for sections */
      542    12173    4                     P$ = FID$ -> VX$LST.SC_TAIL$;

  12173  3 002157   200003 470500                    LDP0    @FID$,,AUTO
         3 002160   000000 471500                    LDP1    0,,PR0
         3 002161   100004 236100                    LDQ     4,,PR1
         3 002162   200016 756100                    STQ     P$,,AUTO

      543    12174                          %ALLOCATE(
      544    12175                          PTR$=R$,
      545    12176                          TYPE=@GDP,
      546    12177                          SIZE="SIZEW(VX$LLIST_SC)");

  12178  3 002163   000010 236000 xsym               LDQ     VX_M_ALL+8
         3 002164   000010 136000 xsym               SBLQ    VX_M_FREE+8
         3 002165   000003 116007                    CMPQ    3,DL
         3 002166   002176 604000 3                  TMI     s:12182

  12179  3 002167   000010 236000 xsym               LDQ     VX_M_FREE+8
         3 002170   000022 736000                    QLS     18
         3 002171   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         3 002172   200020 756100                    STQ     R$,,AUTO

  12180  3 002173   000003 236007                    LDQ     3,DL
         3 002174   000010 056000 xsym               ASQ     VX_M_FREE+8

  12181  3 002175   002210 710000 3                  TRA     s:12184

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:113  
  12182  3 002176   000014 236000 4                  LDQ     12
         3 002177   200116 756100                    STQ     PRIM_TEMP+3,,AUTO
         3 002200   000052 236000 4                  LDQ     42
         3 002201   200115 756100                    STQ     PRIM_TEMP+2,,AUTO
         3 002202   200020 631500                    EPPR1   R$,,AUTO
         3 002203   200114 451500                    STP1    PRIM_TEMP+1,,AUTO
         3 002204   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 002205   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 002206   000000 701000 xent               TSX1    VXA$GET
         3 002207   000000 011000                    NOP     0

      547    12184    4                     P$ -> VX$LLIST_SC.LINK$ = R$;
             12184                              /* Chain last list item to new item */

  12184  3 002210   200020 236100                    LDQ     R$,,AUTO
         3 002211   200016 470500                    LDP0    P$,,AUTO
         3 002212   000000 756100                    STQ     0,,PR0

      548    12185    4                     R$ -> VX$LLIST_SC.BASE$ = START$;
             12185                              /* Remember where the sections start for this object unit */

  12185  3 002213   200025 236100                    LDQ     START$,,AUTO
         3 002214   200020 470500                    LDP0    R$,,AUTO
         3 002215   000001 756100                    STQ     1,,PR0

      549    12186    4                     R$ -> VX$LLIST_SC.COUNT = TSIZE_READ / SIZEW( VX$SC ) ;
             12186                              /* And the # of them */

  12186  3 002216   200056 236100                    LDQ     TSIZE_READ,,AUTO
         3 002217   000003 506007                    DIV     3,DL
         3 002220   200020 470500                    LDP0    R$,,AUTO
         3 002221   000002 756100                    STQ     2,,PR0

      550    12187    4                     FID$ -> VX$LST.SC_TAIL$ = R$;
             12187                              /* Set tail pointer in fid structure */

  12187  3 002222   200003 470500                    LDP0    @FID$,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:114  
         3 002223   000000 471500                    LDP1    0,,PR0
         3 002224   200020 236100                    LDQ     R$,,AUTO
         3 002225   100004 756100                    STQ     4,,PR1

      551    12188    4                    END;                   /* If */

  12188  3 002226   002250 710000 3                  TRA     s:12191

      552    12189    3                 ELSE IF TSIZE_READ < GET THEN CALL VXF$FREE( ALL_TYPE, GET -
             12189                          TSIZE_READ, 1 );

  12189  3 002227   200056 236100                    LDQ     TSIZE_READ,,AUTO
         3 002230   002233 604000 3                  TMI     s:12189+4
         3 002231   200053 116100                    CMPQ    GET,,AUTO
         3 002232   002250 603000 3                  TRC     s:12191

  12189  3 002233   200053 236100                    LDQ     GET,,AUTO
         3 002234   200056 136100                    SBLQ    TSIZE_READ,,AUTO
         3 002235   200114 756100                    STQ     PRIM_TEMP+1,,AUTO
         3 002236   000102 236000 4                  LDQ     66
         3 002237   200117 756100                    STQ     PRIM_TEMP+4,,AUTO
         3 002240   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 002241   200116 450500                    STP0    PRIM_TEMP+3,,AUTO
         3 002242   200047 631500                    EPPR1   ALL_TYPE,,AUTO
         3 002243   200115 451500                    STP1    PRIM_TEMP+2,,AUTO
         3 002244   200115 630500                    EPPR0   PRIM_TEMP+2,,AUTO
         3 002245   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 002246   000000 701000 xent               TSX1    VXF$FREE
         3 002247   000000 011000                    NOP     0

      553    12190    3                END;

      554    12191    2            END;

  12191  3 002250   200042 235100                    LDA     I,,AUTO
         3 002251   000001 035007                    ADLA    1,DL
         3 002252   200042 755100                    STA     I,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:115  
         3 002253   000007 115007                    CMPA    7,DL
         3 002254   001276 602000 3                  TNC     s:11984

      555    12192        /*
      556    12193                          Process any plover records that exist for this object unit
      557    12194        */
      558    12195    1         IF NOT VX_OD.SIN.NPLOVER THEN CALL VXU$PLOVER( ALLOCATE$ -> VX$WORD_A );

  12195  3 002255   000000 236000 xsym               LDQ     VX_OD
         3 002256   000200 316007                    CANQ    128,DL
         3 002257   002267 601000 3                  TNZ     s:12196

  12195  3 002260   200005 470500                    LDP0    @ALLOCATE$,,AUTO
         3 002261   000000 471500                    LDP1    0,,PR0
         3 002262   200114 451500                    STP1    PRIM_TEMP+1,,AUTO
         3 002263   200114 630500                    EPPR0   PRIM_TEMP+1,,AUTO
         3 002264   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002265   000000 701000 xent               TSX1    VXU$PLOVER
         3 002266   000000 011000                    NOP     0

      559    12196    1         RETURN;

  12196  3 002267   000000 702200 xent               TSX2  ! X66_ARET


PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:116  
      561    12198    1   CHK:

  12198  3 002270   200104 741300       CHK          STX1  ! PRECEDENCE+14,,AUTO

      562    12199    1         PROC( PRIM_P$, SEC_P$, WR_MES );
      563    12200    2   DCL PRIM_P$      PTR ALIGNED;
      564    12201    2   DCL SEC_P$       PTR  ALIGNED;
      565    12202    2   DCL WR_MES     BIT(1)    ALIGNED;
      566    12203    2   DCL PRIM$      PTR       ALIGNED   AUTO;
      567    12204    2   DCL SEC$       PTR       ALIGNED   AUTO;
      568    12205    2   DCL SEC_TEMP   UBIN(36)  ALIGNED;
      569    12206    2   DCL PRIM_TEMP  UBIN(36)  ALIGNED;
      570    12207    2   DCL 1 BLANK_COMMON ALIGNED CONSTANT,
      571    12208    2         2 COUNT UBIN(36) UNAL INIT(14),
      572    12209    2         2 CHARS CHAR(14) UNAL INIT('<BLANK COMMON>');
      573    12210        /**/
      574    12211    2         PRIM$ = PRIM_P$;

  12211  3 002271   200105 470500                    LDP0    @PRIM_P$,,AUTO
         3 002272   000000 236100                    LDQ     0,,PR0
         3 002273   200110 756100                    STQ     PRIM$,,AUTO

      575    12212    2         SEC$  = SEC_P$;

  12212  3 002274   200106 471500                    LDP1    @SEC_P$,,AUTO
         3 002275   100000 236100                    LDQ     0,,PR1
         3 002276   200111 756100                    STQ     SEC$,,AUTO

      576    12213        /**/
      577    12214        /**/
      578    12215    2        IF PRIM$ -> VX$SC.SIZE < SEC$ -> VX$SC.SIZE THEN PRIM$ -> VX$SC.SIZE = SEC$ ->
             12215                  VX$SC.SIZE;

  12215  3 002277   200111 473500                    LDP3    SEC$,,AUTO
         3 002300   300001 236100                    LDQ     1,,PR3
         3 002301   777777 376007                    ANQ     -1,DL
         3 002302   200114 756100                    STQ     PRIM_TEMP+1,,AUTO
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:117  
         3 002303   200110 474500                    LDP4    PRIM$,,AUTO
         3 002304   400001 236100                    LDQ     1,,PR4
         3 002305   777777 376007                    ANQ     -1,DL
         3 002306   200114 116100                    CMPQ    PRIM_TEMP+1,,AUTO
         3 002307   002312 605000 3                  TPL     s:12218

  12215  3 002310   300001 720100                    LXL0    1,,PR3
         3 002311   400001 440100                    SXL0    1,,PR4

      579    12216        /**/
      580    12217        /**/
      581    12218    2         SEC_TEMP = SEC$ -> VX$SC.ATTR.ALIGN;

  12218  3 002312   300000 236100                    LDQ     0,,PR3
         3 002313   000022 772000                    QRL     18
         3 002314   000003 376007                    ANQ     3,DL
         3 002315   200112 756100                    STQ     SEC_TEMP,,AUTO

      582    12219    2         PRIM_TEMP = PRIM$ -> VX$SC.ATTR.ALIGN;

  12219  3 002316   400000 236100                    LDQ     0,,PR4
         3 002317   000022 772000                    QRL     18
         3 002320   000003 376007                    ANQ     3,DL
         3 002321   200113 756100                    STQ     PRIM_TEMP,,AUTO

      583    12220    3         IF PRIM_TEMP ~= SEC_TEMP THEN DO;

  12220  3 002322   200112 116100                    CMPQ    SEC_TEMP,,AUTO
         3 002323   002364 600000 3                  TZE     s:12237

      584    12221    4             IF PRIM_TEMP = 1 OR SEC_TEMP = 1 THEN DO;

  12221  3 002324   000001 116007                    CMPQ    1,DL
         3 002325   002331 600000 3                  TZE     s:12222
         3 002326   200112 235100                    LDA     SEC_TEMP,,AUTO
         3 002327   000001 115007                    CMPA    1,DL
         3 002330   002355 601000 3                  TNZ     s:12233
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:118  

      585    12222    5                 IF WR_MES THEN DO;

  12222  3 002331   200107 475500                    LDP5    @WR_MES,,AUTO
         3 002332   500000 234100                    SZN     0,,PR5
         3 002333   002343 605000 3                  TPL     s:12231

      586    12223    5                     VX_EFIELD1 = BLANK_COMMON;

  12223  3 002334   000000 100400                    MLR     fill='000'O
         3 002335   000000 000022 2                  ADSC9   BLANK_COMMON             cn=0,n=18
         3 002336   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80

      587    12224                          %SCREAM(
      588    12225                          ERR#=E$SC_ALIGN_VX,
      589    12226                          LEVEL=@E$W_VX,
      590    12227                          MID="'T'");

  12228  3 002337   000131 630400 4                  EPPR0   89
         3 002340   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 002341   000000 701000 xent               TSX1    VXE$ERROR
         3 002342   000000 011000                    NOP     0

      591    12230    5                    END;                   /* If WR_MES then do; */

      592    12231    4                 IF PRIM_TEMP = 1 THEN PRIM$ -> VX$SC.ATTR.ALIGN = SEC_TEMP;

  12231  3 002343   200113 235100                    LDA     PRIM_TEMP,,AUTO
         3 002344   000001 115007                    CMPA    1,DL
         3 002345   002364 601000 3                  TNZ     s:12237

  12231  3 002346   200110 470500                    LDP0    PRIM$,,AUTO
         3 002347   200112 236100                    LDQ     SEC_TEMP,,AUTO
         3 002350   000022 736000                    QLS     18
         3 002351   000000 676100                    ERQ     0,,PR0
         3 002352   000003 376003                    ANQ     3,DU
         3 002353   000000 656100                    ERSQ    0,,PR0
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:119  

      593    12232    4                END;               /* If PRIM_TEMP = 1 or SEC_TEMP = 1 then do; */

  12232  3 002354   002364 710000 3                  TRA     s:12237

      594    12233    3             ELSE IF PRIM_TEMP < SEC_TEMP THEN PRIM$ -> VX$SC.ATTR.ALIGN = SEC_TEMP;

  12233  3 002355   200112 116100                    CMPQ    SEC_TEMP,,AUTO
         3 002356   002364 603000 3                  TRC     s:12237

  12233  3 002357   200112 236100                    LDQ     SEC_TEMP,,AUTO
         3 002360   000022 736000                    QLS     18
         3 002361   400000 676100                    ERQ     0,,PR4
         3 002362   000003 376003                    ANQ     3,DU
         3 002363   400000 656100                    ERSQ    0,,PR4

      595    12234    3            END;                           /* If PRIM_TEMP ~= SEC_TEMP then do; */

      596    12235        /**/
      597    12236        /**/
      598    12237    2         SEC_TEMP = SEC$ -> VX$SC.ATTR.INT;

  12237  3 002364   200111 470500                    LDP0    SEC$,,AUTO
         3 002365   000000 236100                    LDQ     0,,PR0
         3 002366   000030 772000                    QRL     24
         3 002367   000003 376007                    ANQ     3,DL
         3 002370   200112 756100                    STQ     SEC_TEMP,,AUTO

      599    12238    2         PRIM_TEMP = PRIM$ -> VX$SC.ATTR.INT;

  12238  3 002371   200110 471500                    LDP1    PRIM$,,AUTO
         3 002372   100000 236100                    LDQ     0,,PR1
         3 002373   000030 772000                    QRL     24
         3 002374   000003 376007                    ANQ     3,DL
         3 002375   200113 756100                    STQ     PRIM_TEMP,,AUTO

      600    12239    2         IF PRIM_TEMP = 3 THEN GOTO CHK_MES;
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:120  

  12239  3 002376   000003 116007                    CMPQ    3,DL
         3 002377   002410 600000 3                  TZE     CHK_MES

      601    12240    3         IF SEC_TEMP ~= 0 AND SEC_TEMP ~= 3 THEN DO;

  12240  3 002400   200112 235100                    LDA     SEC_TEMP,,AUTO
         3 002401   002442 600000 3                  TZE     s:12261
         3 002402   000003 115007                    CMPA    3,DL
         3 002403   002442 600000 3                  TZE     s:12261

      602    12241    4             IF PRIM_TEMP ~= 0 AND PRIM_TEMP ~= SEC_TEMP THEN DO;

  12241  3 002404   000000 116003                    CMPQ    0,DU
         3 002405   002435 600000 3                  TZE     s:12257
         3 002406   200112 116100                    CMPQ    SEC_TEMP,,AUTO
         3 002407   002435 600000 3                  TZE     s:12257

      603    12242    4   CHK_MES:
      604    12243    5                 IF WR_MES THEN DO;

  12243  3 002410   200107 473500       CHK_MES      LDP3    @WR_MES,,AUTO
         3 002411   300000 234100                    SZN     0,,PR3
         3 002412   002427 605000 3                  TPL     s:12254

      605    12244    5                     VX_EFIELD1 = BLANK_COMMON;

  12244  3 002413   000000 100400                    MLR     fill='000'O
         3 002414   000000 000022 2                  ADSC9   BLANK_COMMON             cn=0,n=18
         3 002415   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80

      606    12245    5                     VX_EFIELD2.COUNT = 3;

  12245  3 002416   003000 236003                    LDQ     1536,DU
         3 002417   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

      607    12246    5                     VX_EFIELD2.CHARS = 'UTS';
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:121  

  12246  3 002420   040000 100400                    MLR     fill='040'O
         3 002421   000026 000003 2                  ADSC9   BLANK_COMMON+22          cn=0,n=3
         3 002422   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79

      608    12247                          %SCREAM(
      609    12248                          ERR#=E$SC_INIT_VX,
      610    12249                          LEVEL=@E$W_VX,
      611    12250                          MID="'T'");

  12251  3 002423   000136 630400 4                  EPPR0   94
         3 002424   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 002425   000000 701000 xent               TSX1    VXE$ERROR
         3 002426   000000 011000                    NOP     0

      612    12253    5                    END;                   /* If WR_MES then do; */

      613    12254    4                 PRIM$ -> VX$SC.ATTR.INT = 1;

  12254  3 002427   200110 470500                    LDP0    PRIM$,,AUTO
         3 002430   000000 236100                    LDQ     0,,PR0
         3 002431   000142 376000 4                  ANQ     98
         3 002432   000100 276003                    ORQ     64,DU
         3 002433   000000 756100                    STQ     0,,PR0

      614    12255    4                END;                       /* If PRIM_TEMP ~= 0 ... */

  12255  3 002434   002442 710000 3                  TRA     s:12261

      615    12256    4             ELSE DO;

      616    12257    4                 PRIM$ -> VX$SC.ATTR.INT = SEC_TEMP;

  12257  3 002435   200112 236100                    LDQ     SEC_TEMP,,AUTO
         3 002436   000030 736000                    QLS     24
         3 002437   100000 676100                    ERQ     0,,PR1
         3 002440   000300 376003                    ANQ     192,DU
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:122  
         3 002441   100000 656100                    ERSQ    0,,PR1

      617    12258    4                END;                       /* Else do; */

      618    12259    3            END;               /* If SEC_TEMP ~= 0 and SEC_TEMP ~= 3 then do; */

      619    12260        /**/
      620    12261    2   END CHK;                                /* Proc; */

  12261  3 002442   200104 221300                    LDX1  ! PRECEDENCE+14,,AUTO
         3 002443   000001 702211                    TSX2  ! 1,X1
      621    12262
      622    12263
      623    12264
      624    12265    1   END VXO$OBJECT;

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:123  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXO$OBJECT.
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:124  

 **** Variables and constants ****

  ****  Section 002 RoData VXO$OBJECT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(162)   r     1 BLANK_COMMON

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @ALLOCATE$                 3-0-0/w PTR         r     1 @FID$
   105-0-0/w PTR         r     1 @PRIM_P$                 106-0-0/w PTR         r     1 @SEC_P$
     4-0-0/w PTR         r     1 @SOURCE                  107-0-0/w PTR         r     1 @WR_MES
    21-0-0/w PTR         r     1 ALL$                      *0-0-0/w PTR         r     1 ALLOCATE$
    47-0-0/w UBIN        r     1 ALL_TYPE                  22-0-0/w PTR         r     1 CURR$
    *0-0-0/w PTR         r     1 FID$                      53-0-0/w UBIN        r     1 GET
    54-0-0/w UBIN        r     1 HALVE                     50-0-0/w UBIN        r     1 HEAD_INX
    42-0-0/w UBIN        r     1 I                         60-0-0/w UBIN        r     1 INDX
    43-0-0/w UBIN        r     1 J                         44-0-0/w UBIN        r     1 K
    61-0-0/w UBIN        r     1 LAST_DISP                 27-0-0/w PTR         r     1 MAKE$
     6-0-0/w STRC(288)   r     1 MAP_STRING                55-0-0/w UBIN        r     1 NPAGE
    16-0-0/w PTR         r     1 P$                        52-0-0/w UBIN        r     1 PAGE
    66-0-0/w UBIN        r     1 PRECEDENCE                23-0-0/w PTR         r     1 PREV$
   110-0-0/w PTR         r     1 PRIM$                     *0-0-0/w PTR         r     1 PRIM_P$
   113-0-0/w UBIN        r     1 PRIM_TEMP                 17-0-0/w PTR         r     1 Q$
    20-0-0/w PTR         r     1 R$                        46-0-0/w UBIN        r     1 REC_TYPE
    57-0-0/w UBIN        r     1 SC_TYPE                  111-0-0/w PTR         r     1 SEC$
    *0-0-0/w PTR         r     1 SEC_P$                   112-0-0/w UBIN        r     1 SEC_TEMP
    *0-0-0/w SBIN        r     1 SOURCE                    25-0-0/w PTR         r     1 START$
    26-0-0/w PTR         r     1 TAIL$                     51-0-0/w UBIN        r     1 TSIZE
    56-0-0/w SBIN        r     1 TSIZE_READ                24-0-0/w PTR         r     1 WHERE$
    *0-0-0/w BIT         r     1 WR_MES

PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:125  
  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 VX_BLK_COM_COUNT
     0-0-0/w BIT         r     1 VX_CHK_BLANK_COM_PROMOTE
     0-0-0/w PTR         r     1 VX_CURR$                   0-0-0/w UBIN        r     1 VX_CURR_SC_ENTRIES
     0-0-0/w STRC(720)   r     1 VX_EFIELD1                 0-0-0/w STRC(720)   r     1 VX_EFIELD2
     0-0-0/w STRC(720)   r     1 VX_EFIELD3                 0-0-0/w UBIN        r     1 VX_ERR_SEV
     0-0-0/w SBIN        r     1 VX_HEAD_INX(0:9)
     0-0-0/w UBIN        r     1 VX_INHIBIT_COMPACTION
     0-0-0/b BIT         r     1 VX_IN_PATCH                0-0-0/w PTR         r     1 VX_LAST_SC$
     0-0-0/w UBIN        r     1 VX_LAST_SC_BASE            0-0-0/b BIT         r     1 VX_LIB_USED
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w STRC(4572)  r     1 VX_O                       0-0-0/b STRC(116)   r     1 VX_OD
     0-0-0/w STRC(1476)  r     1 VX_OK                      0-0-0/w STRC(4176)  r     1 VX_ON
     0-0-0/w STRC(1044)  r     1 VX_OUHEAD                  0-0-0/w STRC(1044)  r     1 VX_OU_HEAD
     0-0-0/w SBIN        r     1 VX_PASS1_REC_TYPE(0:9)
     0-0-0/w STRC(2340)  r     1 VX_PASS2_REF               0-0-0/w UBIN        r     1 VX_REC_BUF_SIZE
     0-0-0/w UBIN        r     1 VX_RN_THRESHOLD            0-0-0/w STRC(108)   r     1 VX_SC_BLANK_COMMON
     0-0-0/w PTR         r     1 VX_SC_BLANK_COM_PROMOTE$
     0-0-0/w UBIN        r     1 VX_SC_BLK_COM              0-0-0/w UBIN        r     1 VX_SC_LBL_COM
     0-0-0/w UBIN        r     1 VX_SC_ROOT_LBL_COM         0-0-0/w PTR         r     1 VX_SC_START$
     0-0-0/w UBIN        r     1 VX_SHARED_LIB_ASS          0-0-0/w PTR         r     1 VX_SLIB_HEAD$
     0-0-0/w PTR         r     1 VX_SLIB_INIT$              0-0-0/w UBIN        r     1 VX_SOURCE_COUNT
     0-0-0/c CHAR(8)     r     1 VX_SYS                     0-0-0/w UBIN        r     1 VX_TARGET_COUNT
     0-0-0/w UBIN        r     1 VX_TREE_SLIB_NAME

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/c CHAR(8)     r     1 F$ACCT_
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:126  
     0-0-0/c ASTR(9)     r     1 F$NAME_                    0-0-0/w ASTR(45)    r     1 P$LIT
     0-0-0/w ASTR(9)     r     1 T$C                        0-0-0/c ASTR(9)     r     1 T$C_UNAL
     0-0-0/w STRC(72)    r     1 VX$LLIST                   0-0-0/w STRC(108)   r     1 VX$LLIST_SC
     0-0-0/w STRC(396)   r     1 VX$LLIST_SL                0-0-0/w STRC(648)   r     1 VX$LST
     0-0-0/w STRC(3672)  r     1 VX$NODE                    0-0-0/w STRC(108)   r     1 VX$SC
     0-0-0/w STRC(72)    r     1 VX$SECT                    0-0-0/w ACHR        r     1 VX$SOURCE_C
     0-0-0/w ACHR        r     1 VX$TARGET_C
     0-0-0/w UBIN        r     1 VX$WORD_A(0:0)


   Procedure VXO$OBJECT requires 1316 words for executable code.
   Procedure VXO$OBJECT requires 90 words of local(AUTO) storage.
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:127  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:128  
          MINI XREF LISTING

ALL$
     11479**DCL     11771<>CALL    11773>>ASSIGN  11777>>ASSIGN  11778>>ASSIGN  11781>>ASSIGN  11782>>ASSIGN
     11867<>CALL    11868>>ASSIGN  11869>>ASSIGN  11870>>ASSIGN  11871>>ASSIGN  11872>>ASSIGN  11921<>CALL
     11928>>ASSIGN  11929>>ASSIGN  11930>>ASSIGN  11931>>ASSIGN  11982<<ASSIGN  11985>>ASSIGN
ALLOCATE$
     11396**DCL         8--PROC    11982>>ASSIGN  12195>>CALL
ALL_TYPE
     11523**DCL     11985<<ASSIGN  12038>>IF      12038>>IF      12039>>ASSIGN  12039>>ASSIGN  12040>>ASSIGN
     12040>>ASSIGN  12042<>CALL    12061<>CALL    12171<>CALL    12189<>CALL
ALREADY_THERE
     11877**LABEL   11739--GOTO    11861--GOTO
ASL_REQUEST
     11907**LABEL   11881--GOTO
B$DNAME.COUNT
     11561**DCL     11568--IMP-SIZ
BLANK_COMMON IN PROCEDURE CHK
     12207**DCL     12223>>ASSIGN  12244>>ASSIGN
CHECK_UP
     12123**LABEL   12125--GOTO
CHK
     12199**PROC    12146--CALL    12150--CALL
CHK_MES IN PROCEDURE CHK
     12243**LABEL   12239--GOTO
CURR$
     11480**DCL     11735<<ASSIGN  11737>>DOWHILE 11738>>IF      11740>>ASSIGN  11741<<ASSIGN  11741>>ASSIGN
     11825<<ASSIGN  11827>>DOWHILE 11828>>IF      11830>>ASSIGN  11831<<ASSIGN  11831>>ASSIGN  11834>>ASSIGN
     11853<<ASSIGN  11855>>DOWHILE 11856>>IF      11856>>IF      11858>>IF      11858>>IF      11862>>ASSIGN
     11863<<ASSIGN  11863>>ASSIGN  11916<<ASSIGN  11917>>DOWHILE 11918>>IF      11919<<ASSIGN  11919>>ASSIGN
F$ACCT_
     11544**DCL     11858>>IF
F$NAME_.COUNT
     11542**DCL     11543--IMP-SIZ
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:129  
FID$
     11394**DCL         8--PROC    12173>>ASSIGN  12187>>ASSIGN
GET
     11527**DCL     11989<<ASSIGN  11995<<ASSIGN  12038>>IF      12040>>ASSIGN  12042<>CALL    12061<>CALL
     12080>>IF      12081>>ASSIGN  12092<<ASSIGN  12092>>ASSIGN  12171>>IF      12171>>CALL    12189>>IF
     12189>>CALL
HALVE
     11528**DCL     12081<<ASSIGN  12086>>IF      12088>>ASSIGN  12090<>CALL    12092>>ASSIGN
HEAD_INX
     11524**DCL     11992<<ASSIGN  11993>>ASSIGN  11994>>ASSIGN
I
     11513**DCL     11514--REDEF   11611<<ASSIGN  11618<>CALL    11641<<ASSIGN  11653<>CALL    11681<<ASSIGN
     11693<>CALL    11983<<DOINDEX 11984>>ASSIGN
INDX
     11532**DCL     12153<<ASSIGN  12154>>IF      12155>>ASSIGN  12158>>ASSIGN  12162>>ASSIGN
INSERT_SHAREL
     11834**LABEL   11829--GOTO
INSERT_UNTO_CHAIN
     12153**LABEL   12111--GOTO    12114--GOTO    12117--GOTO
J
     11515**DCL     11516--REDEF   11642<<ASSIGN  11657<>CALL    11682<<ASSIGN  11697<>CALL
K
     11517**DCL     11518--REDEF   11643<<ASSIGN  11661<>CALL    11683<<ASSIGN  11701<>CALL
L
     11519**DCL     11520--REDEF
LAST_DISP
     11533**DCL     12159<<ASSIGN  12160>>ASSIGN  12161>>ASSIGN
MAKE$
     11485**DCL     12121<<ASSIGN  12123<<ASSIGN  12127>>IF      12128<<ASSIGN  12130>>ASSIGN  12131>>ASSIGN
     12134>>ASSIGN  12137>>IF      12138>>ASSIGN  12146>>CALL    12150>>CALL
MAP_STRING
     11413**DCL     11852--ASSIGN
MAP_STRING.CHARS
     11415**DCL     11840<<CALLBLT 11846<<CALLBLT
MAP_STRING.COUNT
     11414**DCL     11842<<ASSIGN  11848<<ASSIGN
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:130  
NPAGE
     11529**DCL     12061<>CALL
P$
     11475**DCL     11724<<ASSIGN  11725>>ASSIGN  11726>>ASSIGN  11726>>ASSIGN  11734<<ASSIGN  11738>>IF
     11738>>IF      11768>>ASSIGN  11769>>ASSIGN  11769>>ASSIGN  11771<>CALL    11810>>ASSIGN  11811>>ASSIGN
     11811>>ASSIGN  11852<<ASSIGN  11856>>IF      11856>>IF      11867<>CALL    12087<<ASSIGN  12090<>CALL
     12098<<ASSIGN  12101>>DOWHILE 12102>>ASSIGN  12103>>ASSIGN  12104>>ASSIGN  12106>>ASSIGN  12165<<ASSIGN
     12165>>ASSIGN  12173<<ASSIGN  12184>>ASSIGN
P$LIT.COUNT
     10767**DCL     10770--IMP-SIZ 11725>>ASSIGN  11726>>ASSIGN
P$LIT.TEXT
     10770**DCL     11726>>ASSIGN
PAGE
     11526**DCL     11988<<ASSIGN  11994<<ASSIGN  12000>>IF      12014<>CALL    12061<>CALL
PRECEDENCE
     11538**DCL     11745<<ASSIGN  11748<<ASSIGN  11751<<ASSIGN  11754<<ASSIGN  11755<<ASSIGN  11770>>ASSIGN
     11812>>ASSIGN  11813>>IF      11828>>IF
PREV$
     11481**DCL     11736<<ASSIGN  11740<<ASSIGN  11776>>ASSIGN  11826<<ASSIGN  11830<<ASSIGN  11835>>ASSIGN
     11854<<ASSIGN  11862<<ASSIGN  11868>>ASSIGN  11869>>ASSIGN  11882<<ASSIGN  11883>>IF      11883>>IF
     11898>>ASSIGN
PRIM$ IN PROCEDURE CHK
     12203**DCL     12211<<ASSIGN  12215>>IF      12215>>ASSIGN  12219>>ASSIGN  12231>>ASSIGN  12233>>ASSIGN
     12238>>ASSIGN  12254>>ASSIGN  12257>>ASSIGN
PRIM_P$ IN PROCEDURE CHK
     12200**DCL     12199--PROC    12211>>ASSIGN
PRIM_TEMP IN PROCEDURE CHK
     12206**DCL     12219<<ASSIGN  12220>>IF      12221>>IF      12231>>IF      12233>>IF      12238<<ASSIGN
     12239>>IF      12241>>IF      12241>>IF
Q$
     11476**DCL     12099<<ASSIGN  12103>>ASSIGN  12104>>ASSIGN  12105>>IF      12106>>ASSIGN  12107>>ASSIGN
     12131>>ASSIGN  12135>>ASSIGN  12146<>CALL    12155>>ASSIGN  12156>>ASSIGN  12159>>ASSIGN  12161>>ASSIGN
     12162>>ASSIGN  12164<<ASSIGN  12164>>ASSIGN  12167>>ASSIGN  12168>>ASSIGN  12170>>ASSIGN
R$
     11477**DCL     12100<<ASSIGN  12101>>DOWHILE 12179<<ASSIGN  12182<>CALL    12184>>ASSIGN  12185>>ASSIGN
     12186>>ASSIGN  12187>>ASSIGN
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:131  
REC_TYPE
     11522**DCL     11984<<ASSIGN  11985>>ASSIGN  11986>>IF      11992>>ASSIGN  11998>>IF      11998>>IF
     11998>>IF      11998>>IF      12018<>CALL    12044>>IF      12045>>IF      12046>>ASSIGN  12050>>IF
     12050>>IF      12052>>IF      12053>>ASSIGN  12054>>IF      12056>>ASSIGN  12058>>ASSIGN  12061<>CALL
     12075>>IF
SC_TYPE
     11531**DCL     12102<<ASSIGN  12108>>DOCASE  12116<<ASSIGN  12153>>ASSIGN
SEC$ IN PROCEDURE CHK
     12204**DCL     12212<<ASSIGN  12215>>IF      12215>>ASSIGN  12218>>ASSIGN  12237>>ASSIGN
SEC_P$ IN PROCEDURE CHK
     12201**DCL     12199--PROC    12212>>ASSIGN
SEC_TEMP IN PROCEDURE CHK
     12205**DCL     12218<<ASSIGN  12220>>IF      12221>>IF      12231>>ASSIGN  12233>>IF      12233>>ASSIGN
     12237<<ASSIGN  12240>>IF      12240>>IF      12241>>IF      12257>>ASSIGN
SKIP_ASL
     11936**LABEL   11914--GOTO    11918--GOTO
SOURCE
     11395**DCL         8--PROC    12061<>CALL
START$
     11483**DCL     12039<<ASSIGN  12042<>CALL    12046>>ASSIGN  12053>>ASSIGN  12056>>ASSIGN  12058<<ASSIGN
     12061<>CALL    12076>>ASSIGN  12079>>ASSIGN  12094>>ASSIGN  12097>>ASSIGN  12099>>ASSIGN  12170>>ASSIGN
     12185>>ASSIGN
T$C.CHARS
     11310**DCL     11738>>IF      11769>>ASSIGN  11811>>ASSIGN  11856>>IF      11856>>IF      11883>>IF
     11883>>IF
T$C.COUNT
     11309**DCL     11310--IMP-SIZ 11738>>IF      11768>>ASSIGN  11769>>ASSIGN  11810>>ASSIGN  11811>>ASSIGN
     11856>>IF      11856>>IF      11883>>IF      11883>>IF
T$C_UNAL.COUNT
     11312**DCL     11313--IMP-SIZ
TAIL$
     11484**DCL     12120<<ASSIGN  12123>>IF      12123>>ASSIGN  12124<<ASSIGN  12124>>ASSIGN  12125>>IF
     12156<<ASSIGN  12158<<ASSIGN  12160>>ASSIGN
TSIZE
     11525**DCL     11839<<ASSIGN  11840>>CALLBLT 11842>>ASSIGN  11845<<ASSIGN  11846>>CALLBLT 11848>>ASSIGN
     11949<<ASSIGN  11950>>IF      11962<>CALL    11980>>IF      11980>>ASSIGN  11987<<ASSIGN  11993<<ASSIGN
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:132  
     11995>>ASSIGN  11997>>IF      12061<>CALL
TSIZE_READ
     11530**DCL     12061<>CALL    12078>>ASSIGN  12080>>IF      12080>>IF      12081>>ASSIGN  12081>>ASSIGN
     12094>>ASSIGN  12095>>ASSIGN  12100>>ASSIGN  12170<<ASSIGN  12171>>IF      12171>>CALL    12186>>ASSIGN
     12189>>IF      12189>>CALL
VX$LLIST.LINK$
     11020**DCL     11741>>ASSIGN
VX$LLIST_SC
     11075**DCL     12178--IF      12180--ASSIGN  12182--CALL
VX$LLIST_SC.BASE$
     11077**DCL     12185<<ASSIGN
VX$LLIST_SC.COUNT
     11078**DCL     12186<<ASSIGN
VX$LLIST_SC.LINK$
     11076**DCL     12184<<ASSIGN
VX$LLIST_SL
     11045**DCL     11761--IF      11763--ASSIGN  11765--CALL    11802--IF      11804--ASSIGN  11806--CALL
VX$LLIST_SL.ITEM$
     11047**DCL     11777<<ASSIGN  11809<<ASSIGN  11817<<ASSIGN  11817>>ASSIGN  11818>>ASSIGN
VX$LLIST_SL.LINK$
     11046**DCL     11767<<ASSIGN  11776<<ASSIGN  11808<<ASSIGN  11816<<ASSIGN  11820>>ASSIGN  11834<<ASSIGN
     11835<<ASSIGN
VX$LLIST_SL.NAME
     11049**DCL     11818--ASSIGN
VX$LLIST_SL.NAME.CNT
     11050**DCL     11768<<ASSIGN  11810<<ASSIGN  11839>>ASSIGN
VX$LLIST_SL.NAME.TXT
     11051**DCL     11738>>IF      11769<<ASSIGN  11811<<ASSIGN  11840>>CALLBLT
VX$LLIST_SL.PRECEDENCE
     11048**DCL     11770<<ASSIGN  11812<<ASSIGN  11813>>IF      11828>>IF
VX$LST.LIB
     10960**DCL     11870<<ASSIGN
VX$LST.LINK$
     10952**DCL     11781<<ASSIGN  11831>>ASSIGN  11863>>ASSIGN  11868<<ASSIGN  11930<<ASSIGN
VX$LST.OBJECT_NAME$
     10955**DCL     10956--REDEF
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:133  
VX$LST.P.ACCT_
     10969**DCL     11778<<ASSIGN  11871<<ASSIGN  11928<<ASSIGN
VX$LST.P.ACCT_.ACCT$
     10973**DCL     11858>>IF
VX$LST.P.B.ACCT
     10992**DCL     11858>>IF      11872<<ASSIGN
VX$LST.P.NAME_
     10964**DCL     11818<<ASSIGN
VX$LST.P.NAME_.NAME$
     10968**DCL     11856>>IF      11856>>IF      11882>>ASSIGN
VX$LST.PRIOR$
     10956**DCL     11869<<ASSIGN
VX$LST.SC_HEAD$
     10957**DCL     10958--REDEF
VX$LST.SC_TAIL$
     10959**DCL     10960--REDEF   12173>>ASSIGN  12187<<ASSIGN
VX$NODE.ADDR_START_A
     10824**DCL     10825--REDEF
VX$NODE.ADDR_STOP_A
     10829**DCL     10830--REDEF
VX$NODE.ALL_BLK_COM
     10922**DCL     12123>>IF      12130<<ASSIGN
VX$NODE.BLANK_COMMON$
     10925**DCL     12131>>ASSIGN  12146<>CALL    12150<>CALL
VX$NODE.DEPTH
     10823**DCL     12137>>IF      12137>>IF
VX$NODE.FATHER$
     10814**DCL     11919>>ASSIGN  12124>>ASSIGN
VX$NODE.HAVE_ASL
     10921**DCL     11918>>IF      11927<<ASSIGN
VX$NODE.L_PREV_SIZE
     10882**DCL     10893--REDEF
VX$NODE.L_SC_START
     10901**DCL     10906--REDEF
VX$NODE.L_SC_START_A$
     10906**DCL     12154>>IF      12155<<ASSIGN
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:134  
VX$NODE.L_SC_STOP
     10907**DCL     10912--REDEF
VX$NODE.L_SC_STOP_A$
     10912**DCL     12158>>ASSIGN  12162<<ASSIGN
VX$NODE.L_SIZE
     10870**DCL     10881--REDEF
VX$NODE.L_SIZE.RN
     10873**DCL     11945>>IF
VX$NODE.L_SIZE.SC
     10874**DCL     12168<<ASSIGN
VX$NODE.L_START
     10846**DCL     10857--REDEF
VX$NODE.L_START.SC$
     10850**DCL     12168>>ASSIGN
VX$NODE.L_START_A$
     10857**DCL     12045>>IF      12046<<ASSIGN  12052>>IF      12053<<ASSIGN
VX$NODE.L_STOP
     10858**DCL     10869--REDEF
VX$NODE.L_STOP.SC$
     10862**DCL     12167<<ASSIGN
VX$NODE.L_STOP_A$
     10869**DCL     12054>>IF      12056<<ASSIGN  12058>>ASSIGN
VX$NODE.NUM
     10822**DCL     12107>>ASSIGN
VX$NODE.PROMOTE_HEAD
     10913**DCL     10916--REDEF
VX$NODE.PROMOTE_TAIL
     10917**DCL     10920--REDEF
VX$NODE.START_PAGE#_A
     10834**DCL     10835--REDEF
VX$NODE.STOP_PAGE#_A
     10839**DCL     10840--REDEF
VX$NODE.TAIL$
     10818**DCL     11781>>ASSIGN  11782<<ASSIGN  11930>>ASSIGN  11931<<ASSIGN
VX$SC
     11103**DCL     12080--IF      12081--ASSIGN  12094--ASSIGN  12103<<ASSIGN  12131<<ASSIGN  12131>>ASSIGN
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:135  
     12135>>ASSIGN  12164--ASSIGN  12167--ASSIGN  12186--ASSIGN
VX$SC.ATTR.ALIGN
     11136**DCL     12218>>ASSIGN  12219>>ASSIGN  12231<<ASSIGN  12233<<ASSIGN
VX$SC.ATTR.INT
     11126**DCL     12237>>ASSIGN  12238>>ASSIGN  12254<<ASSIGN  12257<<ASSIGN
VX$SC.ATTR.SEGMENT
     11128**DCL     12105>>IF
VX$SC.COM_LINK
     11147**DCL     12160<<ASSIGN  12161<<ASSIGN
VX$SC.NODE#
     11145**DCL     12107<<ASSIGN
VX$SC.SEG
     11104**DCL     12106<<ASSIGN
VX$SC.SIZE
     11143**DCL     12104<<ASSIGN  12215>>IF      12215>>IF      12215<<ASSIGN  12215>>ASSIGN
VX$SECT
     11167**DCL     12078--ASSIGN  12103>>ASSIGN  12165--ASSIGN
VX$SECT.MBZ
     11214**DCL     11216--REDEF   11220--REDEF
VX$SECT.SEG_NPOINTER
     11216**DCL     12106>>ASSIGN
VX$SECT.SIZE
     11208**DCL     12104>>ASSIGN
VX$SECT.TYPE
     11168**DCL     12102>>ASSIGN
VX$SOURCE_C
     11575**DCL     12097>>ASSIGN
VX$TARGET_C
     11574**DCL     12097<<ASSIGN
VX$TMPLT.A
     11248**DCL     11249--REDEF   11250--REDEF
VX$WORD_A
     11276**DCL     11985>>ASSIGN  12195<>CALL
VXA$GET
     11442**DCL-ENT 11765--CALL    11806--CALL    12042--CALL    12090--CALL    12182--CALL
VXD$B2C
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:136  
     11440**DCL-ENT 11618--CALL    11653--CALL    11657--CALL    11661--CALL    11693--CALL    11697--CALL
     11701--CALL    11962--CALL    12014--CALL    12018--CALL
VXE$ERROR
     11433**DCL-ENT 11603--CALL    11630--CALL    11669--CALL    11709--CALL    11731--CALL    11794--CALL
     11896--CALL    11912--CALL    11976--CALL    12030--CALL    12228--CALL    12251--CALL
VXF$FREE
     11443**DCL-ENT 12171--CALL    12189--CALL
VXO$COMPACT
     11456**DCL-ENT 11947--CALL
VXS$LST
     11455**DCL-ENT 11771--CALL    11867--CALL    11921--CALL
VXU$PLOVER
     11457**DCL-ENT 12195--CALL
VXU$PREAD
     11450**DCL-ENT 12061--CALL
VX_BIAS.A
      9576**DCL      9577--REDEF
VX_BLK_COM_COUNT
     10512**DCL     12129<<ASSIGN  12129>>ASSIGN
VX_CBUF.CHARS_A
      9510**DCL      9511--REDEF
VX_CHK_BLANK_COM_PROMOTE
     10514**DCL     12132>>IF      12149>>IF
VX_CONST_DCB.ACTPOS
     10692**DCL     10692--REDEF
VX_CONST_DCB.ARS#
     10651**DCL     10651--REDEF
VX_CONST_DCB.ATTR#
     10681**DCL     10681--REDEF   10683--REDEF
VX_CONST_DCB.BORROW
     10703**DCL     10703--REDEF   10703--REDEF   10703--REDEF
VX_CONST_DCB.EOMCHAR#
     10658**DCL     10659--REDEF
VX_CONST_DCB.FLDID
     10695**DCL     10696--REDEF
VX_CONST_DCB.FORM$
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:137  
     10687**DCL     10687--REDEF
VX_CONST_DCB.FSECT
     10710**DCL     10710--REDEF
VX_CONST_DCB.FSN#
     10677**DCL     10677--REDEF   10677--REDEF   10678--REDEF
VX_CONST_DCB.HEADER$
     10686**DCL     10687--REDEF
VX_CONST_DCB.IXTNSIZE#
     10683**DCL     10684--REDEF
VX_CONST_DCB.LASTSTA$
     10667**DCL     10667--REDEF
VX_CONST_DCB.LVL
     10704**DCL     10704--REDEF
VX_CONST_DCB.NAME#.C
     10667**DCL     10668--REDEF
VX_CONST_DCB.NOEOF
     10699**DCL     10699--REDEF
VX_CONST_DCB.NRECS#
     10684**DCL     10684--REDEF
VX_CONST_DCB.NRECX
     10711**DCL     10711--REDEF
VX_CONST_DCB.OHDR
     10700**DCL     10700--REDEF
VX_CONST_DCB.ORG#
     10675**DCL     10676--REDEF
VX_CONST_DCB.PRECNO
     10708**DCL     10708--REDEF
VX_CONST_DCB.RCSZ
     10716**DCL     10716--REDEF
VX_CONST_DCB.RES#
     10669**DCL     10669--REDEF
VX_CONST_DCB.SETX
     10688**DCL     10688--REDEF
VX_CONST_DCB.TAB$
     10687**DCL     10687--REDEF
VX_CONST_DCB.TDA
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:138  
     10707**DCL     10708--REDEF
VX_CONST_DCB.WSN#
     10669**DCL     10670--REDEF
VX_CURR$
      9545**DCL     11781>>ASSIGN  11782>>ASSIGN  11916>>ASSIGN  11927>>ASSIGN  11930>>ASSIGN  11931>>ASSIGN
     11945>>IF      12045>>IF      12046>>ASSIGN  12052>>IF      12053>>ASSIGN  12054>>IF      12056>>ASSIGN
     12058>>ASSIGN  12061<>CALL    12107>>ASSIGN  12120>>ASSIGN  12128>>ASSIGN  12154>>IF      12155>>ASSIGN
     12158>>ASSIGN  12162>>ASSIGN  12167>>ASSIGN  12168>>ASSIGN  12168>>ASSIGN
VX_CURR_SC_ENTRIES
      9492**DCL     12077>>ASSIGN  12078<<ASSIGN
VX_EBUF.CHARS_A
     10099**DCL     10100--REDEF
VX_EFIELD1
     10106**DCL     11600<<ASSIGN  11723<<ASSIGN  11792<<ASSIGN  11891<<ASSIGN  11907<<ASSIGN  12223<<ASSIGN
     12244<<ASSIGN
VX_EFIELD1.CHARS
     10108**DCL     10109--REDEF
VX_EFIELD1.CHARS_A
     10109**DCL     11618<>CALL    11653<>CALL    11693<>CALL    11962<>CALL    12014<>CALL
VX_EFIELD2
     10110**DCL     11601<<ASSIGN  11973<<ASSIGN
VX_EFIELD2.CHARS
     10112**DCL     10113--REDEF   11726<<ASSIGN  12246<<ASSIGN
VX_EFIELD2.CHARS_A
     10113**DCL     11657<>CALL    11697<>CALL    12018<>CALL
VX_EFIELD2.COUNT
     10111**DCL     11725<<ASSIGN  12245<<ASSIGN
VX_EFIELD3
     10114**DCL     11974<<ASSIGN
VX_EFIELD3.CHARS
     10116**DCL     10117--REDEF
VX_EFIELD3.CHARS_A
     10117**DCL     11661<>CALL    11701<>CALL
VX_EI_KEY_BUF.KEY
     10492**DCL     10493--REDEF
VX_ERRORS
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:139  
      9553**DCL      9564--REDEF
VX_ERRORS.CONFLICT_A
      9559**DCL      9560--REDEF
VX_ERRORS.UNSAT_A
      9555**DCL      9556--REDEF
VX_ERR_SEV
      9566**DCL     11980>>IF      11980<<ASSIGN
VX_HEAD_INX
     10215**DCL     11992>>ASSIGN
VX_IMAGE_DATA.CPAGE#_A
      8690**DCL      8691--REDEF
VX_IMAGE_DATA.NODE_A$
      8702**DCL      8703--REDEF
VX_IMAGE_DATA.START_A$
      8694**DCL      8695--REDEF
VX_IMAGE_DATA.STOP_A$
      8698**DCL      8699--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8759**DCL      8760--REDEF
VX_IMAGE_DS3.NODE_A$
      8771**DCL      8772--REDEF
VX_IMAGE_DS3.START_A$
      8763**DCL      8764--REDEF
VX_IMAGE_DS3.STOP_A$
      8767**DCL      8768--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8782**DCL      8783--REDEF
VX_IMAGE_DS4.NODE_A$
      8794**DCL      8795--REDEF
VX_IMAGE_DS4.START_A$
      8786**DCL      8787--REDEF
VX_IMAGE_DS4.STOP_A$
      8790**DCL      8791--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8805**DCL      8806--REDEF
VX_IMAGE_DS5.NODE_A$
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:140  
      8817**DCL      8818--REDEF
VX_IMAGE_DS5.START_A$
      8809**DCL      8810--REDEF
VX_IMAGE_DS5.STOP_A$
      8813**DCL      8814--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8828**DCL      8829--REDEF
VX_IMAGE_DS6.NODE_A$
      8840**DCL      8841--REDEF
VX_IMAGE_DS6.START_A$
      8832**DCL      8833--REDEF
VX_IMAGE_DS6.STOP_A$
      8836**DCL      8837--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8851**DCL      8852--REDEF
VX_IMAGE_DS7.NODE_A$
      8863**DCL      8864--REDEF
VX_IMAGE_DS7.START_A$
      8855**DCL      8856--REDEF
VX_IMAGE_DS7.STOP_A$
      8859**DCL      8860--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8874**DCL      8875--REDEF
VX_IMAGE_DS8.NODE_A$
      8886**DCL      8887--REDEF
VX_IMAGE_DS8.START_A$
      8878**DCL      8879--REDEF
VX_IMAGE_DS8.STOP_A$
      8882**DCL      8883--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8713**DCL      8714--REDEF
VX_IMAGE_PROC.NODE_A$
      8725**DCL      8726--REDEF
VX_IMAGE_PROC.START_A$
      8717**DCL      8718--REDEF
VX_IMAGE_PROC.STOP_A$
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:141  
      8721**DCL      8722--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8736**DCL      8737--REDEF
VX_IMAGE_ROS.NODE_A$
      8748**DCL      8749--REDEF
VX_IMAGE_ROS.START_A$
      8740**DCL      8741--REDEF
VX_IMAGE_ROS.STOP_A$
      8744**DCL      8745--REDEF
VX_INHIBIT_COMPACTION
      9525**DCL     11945>>IF
VX_IN_PATCH
      9540**DCL     12049>>IF
VX_LAST_SC$
      9489**DCL     12076<<ASSIGN
VX_LAST_SC_BASE
      9491**DCL     12077<<ASSIGN  12077>>ASSIGN
VX_LIB_USED
      9541**DCL     12050>>IF
VX_M_ALL
      9587**DCL     11761>>IF      11802>>IF      12038>>IF      12086>>IF      12178>>IF
VX_M_BASE_PTR
      9589**DCL     11762>>ASSIGN  11803>>ASSIGN  12039>>ASSIGN  12087>>ASSIGN  12179>>ASSIGN
VX_M_FREE
      9585**DCL     11761>>IF      11762>>ASSIGN  11763<<ASSIGN  11763>>ASSIGN  11802>>IF      11803>>ASSIGN
     11804<<ASSIGN  11804>>ASSIGN  12038>>IF      12039>>ASSIGN  12040<<ASSIGN  12040>>ASSIGN  12086>>IF
     12087>>ASSIGN  12088<<ASSIGN  12088>>ASSIGN  12178>>IF      12179>>ASSIGN  12180<<ASSIGN  12180>>ASSIGN
VX_M_VECTOR.F
      8541**DCL      8545--REDEF
VX_M_VECTOR_DP.F
      8576**DCL      8580--REDEF
VX_O.ACCTN_A$
      9705**DCL      9706--REDEF
VX_O.DCB_MATCH_A$
      9714**DCL      9715--REDEF
VX_O.DCB_MATCH_HIT_A
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:142  
      9720**DCL      9721--REDEF
VX_O.FID.ALTSHARELIB$
      9693**DCL     11881>>IF      11882>>ASSIGN  11914>>IF      11929<<ASSIGN
VX_O.FIDN$.UNSAT$
      9701**DCL     11853>>ASSIGN  11854--ASSIGN
VX_O.FIDN_A$
      9699**DCL      9700--REDEF
VX_O.FID_A$
      9691**DCL      9692--REDEF
VX_O.INCLUDE_A$
      9711**DCL      9712--REDEF
VX_O.MAP_A
      9685**DCL      9686--REDEF
VX_O.NODCB_A
      9742**DCL      9743--REDEF
VX_O.NUM.REPORT
      9640**DCL     11950>>IF
VX_O.NUM_A
      9630**DCL      9632--REDEF
VX_O.OPT_A
      9730**DCL      9731--REDEF
VX_O.PRIV_A
      9646**DCL      9648--REDEF
VX_O.SIN.ALIB
      9608**DCL     11756>>IF
VX_O.SIN_A
      9599**DCL      9600--REDEF
VX_O.TCB_A
      9726**DCL      9727--REDEF
VX_OD.ACCTN_A$
      9903**DCL      9904--REDEF
VX_OD.DCB_MATCH_A$
      9912**DCL      9913--REDEF
VX_OD.FID.ALTSHARELIB$
      9891**DCL     11877>>IF
VX_OD.FID.SHARELIB$
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:143  
      9892**DCL     11714>>IF
VX_OD.FIDN_A$
      9897**DCL      9898--REDEF
VX_OD.FID_A$
      9889**DCL      9890--REDEF
VX_OD.INCLUDE_A$
      9909**DCL      9910--REDEF
VX_OD.MAP_A
      9883**DCL      9884--REDEF
VX_OD.NODCB_A
      9927**DCL      9928--REDEF
VX_OD.NUM_A
      9830**DCL      9831--REDEF
VX_OD.PRIV_A
      9845**DCL      9846--REDEF
VX_OD.SIN.NOALTSHARELIB
      9821**DCL     11877>>IF
VX_OD.SIN.NOSHARELIB
      9806**DCL     11714>>IF
VX_OD.SIN.NPLOVER
      9829**DCL     12195>>IF
VX_OD.SIN_A
      9799**DCL      9800--REDEF
VX_OD.VECTOR_A$
      9918**DCL      9919--REDEF
VX_OK.FILE.OFNAME
      8674**DCL     11601>>ASSIGN  11974>>ASSIGN
VX_OK.OUNAME
      8670**DCL     11600>>ASSIGN  11973>>ASSIGN
VX_OL.MAX_A
      9774**DCL      9776--REDEF
VX_OL.MIN_A
      9759**DCL      9760--REDEF
VX_ON.ACCTN_A$
     10048**DCL     10050--REDEF
VX_ON.DCB_MATCH_A$
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:144  
     10059**DCL     10061--REDEF
VX_ON.FIDN_A$
     10041**DCL     10043--REDEF
VX_ON.FID_A$
     10032**DCL     10034--REDEF
VX_ON.INCLUDE_A$
     10055**DCL     10057--REDEF
VX_ON.MAP_A
     10025**DCL     10027--REDEF
VX_ON.NODCB_A$
     10075**DCL     10076--REDEF
VX_ON.NUM_A
      9970**DCL      9972--REDEF
VX_ON.PRIV_A
      9986**DCL      9988--REDEF
VX_ON.SIN_A
      9938**DCL      9940--REDEF   11724>>ASSIGN
VX_ON.VECTOR_A$
     10066**DCL     10067--REDEF
VX_OUHEAD.VERSION
      9385**DCL      9387--REDEF
VX_OUHEAD.WORDSIZE
      9371**DCL     11595>>IF      11606>>IF      11611>>ASSIGN
VX_OU_HEAD
      9328**DCL      9367--REDEF
VX_OU_HEAD.ALIB
      9363**DCL     11880--ASSIGN  11891>>ASSIGN  11907>>ASSIGN
VX_OU_HEAD.ALIB.COUNT
      9364**DCL     11877>>IF      11877>>IF
VX_OU_HEAD.LB_SIZE
      9337**DCL     11936>>IF      11936>>ASSIGN
VX_OU_HEAD.LIB
      9360**DCL     11723>>ASSIGN  11734--ASSIGN  11792>>ASSIGN
VX_OU_HEAD.LIB.COUNT
      9361**DCL     11714>>IF      11714>>IF      11845>>ASSIGN
VX_OU_HEAD.LIB.NAME
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:145  
      9362**DCL     11744>>IF      11747>>IF      11750>>IF      11753>>IF      11786>>IF      11846>>CALLBLT
VX_OU_HEAD.PR_SIZE
      9338**DCL     11937>>IF      11937>>ASSIGN
VX_OU_HEAD.REC.DD_SIZE
      9352**DCL     11674>>IF      11682>>ASSIGN
VX_OU_HEAD.REC.DN_SIZE
      9344**DCL     11673>>IF
VX_OU_HEAD.REC.DR_SIZE
      9354**DCL     11634>>IF      11642>>ASSIGN  11941>>IF      11941>>ASSIGN
VX_OU_HEAD.REC.ED_SIZE
      9348**DCL     11674>>IF      11681>>ASSIGN
VX_OU_HEAD.REC.ER_SIZE
      9350**DCL     11634>>IF      11641>>ASSIGN  11940>>IF      11940>>ASSIGN
VX_OU_HEAD.REC.RN_SIZE
      9346**DCL     11633>>IF      11939>>IF      11939>>ASSIGN
VX_OU_HEAD.REC.SD_SIZE
      9356**DCL     11674>>IF      11683>>ASSIGN
VX_OU_HEAD.REC.SR_SIZE
      9358**DCL     11634>>IF      11643>>ASSIGN  11942>>IF      11942>>ASSIGN
VX_OU_HEAD.REC_A
      9340**DCL      9343--REDEF
VX_OU_HEAD.REC_A.PAGE
      9342**DCL     11994>>ASSIGN
VX_OU_HEAD.REC_A.SIZE
      9341**DCL     11993>>ASSIGN
VX_OU_HEAD.RL_SIZE
      9339**DCL     11938>>IF      11938>>ASSIGN
VX_OU_HEAD.SEVLEV
      9336**DCL     11949>>ASSIGN
VX_O_KEY_BUF.FORM0
      8589**DCL      8592--REDEF    8599--REDEF
VX_O_KEY_BUF_L.FORM0
      8612**DCL      8615--REDEF    8622--REDEF
VX_PASS1_REC_TYPE
     10208**DCL     11984>>ASSIGN
VX_PASS2_REF.OU.L_START
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:146  
     10278**DCL     10283--REDEF
VX_PASS2_REF.OU.L_STOP
     10284**DCL     10289--REDEF
VX_PASS2_REF.OU.MAX
     10272**DCL     10277--REDEF
VX_PASS2_REF.OU.MAX.DR
     10275**DCL     11941>>IF      11941<<ASSIGN
VX_PASS2_REF.OU.MAX.ER
     10274**DCL     11940>>IF      11940<<ASSIGN
VX_PASS2_REF.OU.MAX.RN
     10273**DCL     11939>>IF      11939<<ASSIGN
VX_PASS2_REF.OU.MAX.SR
     10276**DCL     11942>>IF      11942<<ASSIGN
VX_PASS2_REF.OU.SIZE
     10290**DCL     10295--REDEF
VX_PASS2_REF.SAT.COUNT
     10317**DCL     10323--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10324**DCL     10330--REDEF
VX_PASS2_REF.SAT.L_START
     10303**DCL     10309--REDEF
VX_PASS2_REF.SAT.L_STOP
     10310**DCL     10316--REDEF
VX_PASS2_REF.SAT.MAX
     10297**DCL     10302--REDEF
VX_PASS2_REF.UNSAT.L_START
     10365**DCL     10370--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10371**DCL     10376--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10377**DCL     10382--REDEF
VX_PASS2_REF.UNSAT.MAX
     10359**DCL     10364--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10389**DCL     10394--REDEF
VX_PASS2_REF.UNSAT.SIZE
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:147  
     10383**DCL     10388--REDEF
VX_PHRASE.PHRASE
      9791**DCL      9793--REDEF
VX_PROGRAM_BIAS.A
      9569**DCL      9570--REDEF
VX_REC_BUF_SIZE
     10171**DCL     11936>>IF      11936<<ASSIGN  11937>>IF      11937<<ASSIGN  11938>>IF      11938<<ASSIGN
VX_RN_THRESHOLD
     10507**DCL     11945>>IF
VX_R_KEY_BUF.FORM0
      8638**DCL      8642--REDEF    8648--REDEF
VX_SC_BLANK_COMMON
     10515**DCL     12135<<ASSIGN  12150--CALL
VX_SC_BLANK_COM_PROMOTE$
     10513**DCL     12133>>IF      12134<<ASSIGN  12137>>IF      12138<<ASSIGN
VX_SC_BLK_COM
      9488**DCL     12119<<ASSIGN  12119>>ASSIGN
VX_SC_LBL_COM
      9487**DCL     12113<<ASSIGN  12113>>ASSIGN
VX_SC_ROOT_LBL_COM
      9486**DCL     12110<<ASSIGN  12110>>ASSIGN
VX_SC_START$
      9485**DCL     12079>>IF      12079<<ASSIGN  12159>>ASSIGN
VX_SD.A
      8266**DCL      8267--REDEF
VX_SHARED_LIB_ASS
     10502**DCL     11717>>IF      11724>>ASSIGN
VX_SLIB_HEAD$
     10162**DCL     11735>>ASSIGN  11736--ASSIGN  11756>>IF      11773>>IF      11813>>IF      11816>>ASSIGN
     11817>>ASSIGN  11819<<ASSIGN  11825>>ASSIGN  11826--ASSIGN
VX_SLIB_INIT$
     10164**DCL     11773<<ASSIGN
VX_SOURCE_COUNT
     10125**DCL     11573--IMP-SIZ 11575--IMP-SIZ 12096<<ASSIGN  12097>>ASSIGN
VX_SPC.B$.MINE
     10460**DCL     10466--REDEF
PL6.E3A0      #001=VXO$OBJECT File=VXO$OBJECT.:E05TSI                            WED 07/30/97 08:27 Page:148  
VX_SPC.B$.NAME
     10439**DCL     10445--REDEF
VX_SPC.B$.SKIP
     10453**DCL     10459--REDEF
VX_SPC.B$.VALUE
     10446**DCL     10452--REDEF
VX_SPC.SEG.NAME
     10408**DCL     10414--REDEF
VX_SPC.SEG.VALUE
     10415**DCL     10421--REDEF
VX_SYS
     10204**DCL     11778--ASSIGN  11858>>IF      11871--ASSIGN  11928--ASSIGN
VX_TARGET_COUNT
     10124**DCL     11572--IMP-SIZ 11574--IMP-SIZ 12095<<ASSIGN  12096>>ASSIGN  12097>>ASSIGN
VX_TREE_SLIB_NAME
      9497**DCL     11798>>IF
VX_TSX0_OVERLAY.H
     10183**DCL     10186--REDEF
WHERE$
     11482**DCL     11762<<ASSIGN  11765<>CALL    11767>>ASSIGN  11768>>ASSIGN  11769>>ASSIGN  11770>>ASSIGN
     11776>>ASSIGN  11777>>ASSIGN  11803<<ASSIGN  11806<>CALL    11808>>ASSIGN  11809>>ASSIGN  11810>>ASSIGN
     11811>>ASSIGN  11812>>ASSIGN  11816>>ASSIGN  11817>>ASSIGN  11818>>ASSIGN  11818>>ASSIGN  11819>>ASSIGN
     11820<<ASSIGN  11820>>ASSIGN  11834>>ASSIGN  11835>>ASSIGN  11839>>ASSIGN  11840>>CALLBLT 11880<<ASSIGN
     11883>>IF      11883>>IF      11898<<ASSIGN  11921<>CALL    12094<<ASSIGN  12097>>ASSIGN  12098>>ASSIGN
     12100>>ASSIGN
WR_MES IN PROCEDURE CHK
     12202**DCL     12199--PROC    12222>>IF      12243>>IF

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:149  
      626        1        /*T***********************************************************/
      627        2        /*T*                                                         */
      628        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      629        4        /*T*                                                         */
      630        5        /*T***********************************************************/
      631        6        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CCE,AIC,CTI=8 */
      632        7        /*M* VXO$COMPACT - compacts the externally referenced names and entrefs
      633        8                           for the current node.       */
      634        9
      635       10        VXO$COMPACT: PROC;
      636       11
      637       12        %INCLUDE VX_INC_C;
      638    10728        %VX$NODE;

             10740    1   /*******************************************************************************
             10741    1   *                                                                              *
             10742    1   *                          VX$NODE                                                 *
             10743    1   *                                                                              *
             10744    1   *******************************************************************************/

             10760    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10761    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10762    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10763    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10764    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10765    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10766                              to list of file nodes for this node            */
             10767    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10768    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10768                  /* Head pointer to shared library list */
             10769    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10769                  /* Head pointer to list of shared libraries
             10770                                          which have been mapped to included libraries */
             10771    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10772    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10773    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10774    1         2 ADDR_START REDEF  ADDR_START_A,
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:150  
             10775    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10776    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10777    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10778    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10779    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10780    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10781    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10782    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10783    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10784    1         2 START_PAGE# REDEF START_PAGE#_A,
             10785    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10786    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10787    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10788    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10789    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10790    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10791    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10792    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10793    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10793                  /* Starting pointer for common sections for this node */
             10794    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10794                  /* Stopping pointer for common sections for this node */
             10795    1         2 L_START,
             10796    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10797    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10798    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10799    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10800    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10801    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10802    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10803    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10804    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10805    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10806    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10807    1         2 L_STOP,
             10808    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10809    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:151  
             10810    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10811    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10812    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10813    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10814    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10815    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10816    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10817    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10818    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10819    1         2 L_SIZE,
             10820    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10821    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10822    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10823    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10824    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10825    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10826    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10827    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10828    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10829    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10830    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10831    1         2 L_PREV_SIZE,
             10832    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10833    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10834    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10835    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10836    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10837    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10838    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10839    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10840    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10841    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10842    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10843    1         2 BIT_MAP                ALIGNED,
             10844    1           3 DATA                  ALIGNED,
             10845    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10846    1           3 RPROC                 ALIGNED,
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:152  
             10847    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10848    1           3 ROS                   ALIGNED,
             10849    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10850    1         2 L_SC_START,
             10851    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10852    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10853    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10854    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10855    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10856    1         2 L_SC_STOP,
             10857    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10858    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10859    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10860    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10861    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10862    1         2 PROMOTE_HEAD,
             10863    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10864    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10865    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10866    1         2 PROMOTE_TAIL,
             10867    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10868    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10869    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10870    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10871    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10872    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10873    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10874    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

      639    10878        %SET LISTMAC='1'B;
      640    10879        %SET LISTSUB='1'B;
      641    10880        %SET LISTEXP='1'B;
      642    10881        %SET LISTDIR='0'B;

             10890    1   /*******************************************************************************
             10891    1   *                                                                              *
             10892    1   *                          B$EDEF                                                 *
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:153  
             10893    1   *                                                                              *
             10894    1   *******************************************************************************/

             10899    1   DCL 1 B$EDEF BASED ALIGNED,
             10900    1         2 LFLAGS UNAL,
             10901                /*K*  LFLAGS is the field reserved for loader to flag load
             10902                      time attributes of the definition and must be zero
             10903                      in the object unit. */
             10904    1           3 SOURCE UBIN(3) UNAL,
             10905                  /*K*  SOURCE - Source of this ENTDEF */
             10906    1           3 DEFINED BIT(1)  UNAL,
             10907                  /*K*  DEFINED - Set if this ENTDEF defined */
             10908    1           3 MULTIPLE BIT(1) UNAL,
             10909                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             10910    1           3 USED BIT(1) UNAL,
             10911                  /*K*  USED - Set if this ENTDEF is used. */
             10912    1           3 * BIT(2) UNAL,
             10913                  /*K*  * - Unused and must be zero. */
             10914    1           3 FAULTAGS BIT(1) UNAL,
             10915                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             10916    1         2 OU UNAL,
             10917    1           3 SECTNUM UBIN BYTE UNAL,
             10918                  /*K*  SECTNUM contains an entry number into the section
             10919                        table (TYPE 3).  */
             10920    1           3 OFFSET UBIN HALF UNAL,
             10921                  /*K*  OFFSET is the word offset from the origin of the section. */
             10922    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             10923                /*K*  ISADDR - Is Address (RU)  */
             10924    1         2 NPOINTER SBIN HALF UNAL,
             10925                /*K*  NPOINTER is a word displacement into the name record
             10926                      (TYPE 1) locating the name (of this entry). */
             10927    1         2 PRI BIT(1) UNAL,
             10928                /*K*  PRI is a one-bit flag denoting primary entry
             10929                      definition.
             10930                         PRI = 1, primary name (object unit name)
             10931                             = 0, not primary name                 */
             10932    1         2 ALT BIT(1) UNAL,
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:154  
             10933                /*K*  ALT is a one-bit flag denoting permissible alternate
             10934                      return.
             10935                         ALT = 1, alternate return allowed
             10936                             = 0, alternate return not allowed        */
             10937    1         2 CHECK BIT(1) UNAL,
             10938                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             10939                      check and alternate return specification check.
             10940                         CHECK = 0, do not check for matching
             10941                                    arguments/parameters and alternate
             10942                                    return specification check.
             10943                               = 1, check for matching arguments/parameters
             10944                                    and alternate return specification.  */
             10945    1         2 CST UBIN(4) UNAL,
             10946                /*K*  CST is a 4-bit field denoting calling sequence type.
             10947                         CST =  0, Standard CP-6 Callable Procedure
             10948                         CST =  1, Nonstandard Call Type
             10949                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             10950                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             10951                         CST =  4, Standard CP-6 Function Procedure; a
             10952                                   variable table entry will be present to
             10953                                   define the attributes of the function
             10954                         CST =  5, Same as 0, except USE, AVOID, or
             10955                                   MATERIALIZE attributes specified
             10956                         CST =  7, Same as 2, except USE, AVOID, or
             10957                                   MATERIALIZE attributes specified
             10958                         CST =  8, Same as 3, except USE, AVOID, or
             10959                                   MATERIALIZE attributes specified
             10960                         CST =  9, Same as 4, except USE, AVOID, or
             10961                                   MATERIALIZE attributes specified
             10962                         CST = 13, GCOS domain, save
             10963                         CST = 14, GCOS domain, no save
             10964                         CST = 15, Non-Callable Procedure.          */
             10965    1         2 NPARAM UBIN(11) UNAL;
             10966                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             10976    1   /*******************************************************************************
             10977    1   *                                                                              *
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:155  
             10978    1   *                          B$EREF                                                 *
             10979    1   *                                                                              *
             10980    1   *******************************************************************************/

             10985    1   DCL 1 B$EREF BASED ALIGNED,
             10986    1         2 NPOINTER SBIN HALF UNAL,
             10987                /*K*  NPOINTER is the word displacement into the record
             10988                      of REF names (TYPE 2) locating the ENTREF name.   */
             10989    1         2 SREF BIT(1),
             10990                /*K*  SREF indicates that the reference is a secondary
             10991                      reference and should not cause loading of a library routine. */
             10992    1         2 ALT BIT(1),
             10993                /*K*  ALT is a one-bit flag denoting permissible alternate return.
             10994                         ALT = 1, alternate return allowed
             10995                             = 0, alternate return not allowed    */
             10996    1         2 CHECK BIT(1),
             10997                /*K*  CHECK is a one-bit flag denoting arguments/parameter check
             10998                      and alternate return specification check.
             10999                         CHECK = 0, do not check for matching
             11000                                    arguments/parameters and
             11001                                    alternate return specification.
             11002                               = 1, check for matching arguments/parameters
             11003                                    and alternate return specification.  */
             11004    1         2 CST UBIN(4) UNAL,
             11005                /*K*  CST is a 4-bit field denoting calling sequence type.
             11006                         CST =  0, Standard CP-6 Callable Procedure.
             11007                         CST =  1, Nonstandard Call Type.
             11008                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11009                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11010                         CST =  4, Standard CP-6 Function Procedure; a
             11011                                   variable table entry will be present to
             11012                                   define the attributes of the function.
             11013                         CST =  5, Same as 0, except USE, AVOID, or
             11014                                   MATERIALIZE attributes specified.
             11015                         CST =  7, Same as 2, except USE, AVOID, or
             11016                                   MATERIALIZE attributes specified.
             11017                         CST =  8, Same as 3, except USE, AVOID, or
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:156  
             11018                                   MATERIALIZE attributes specified.
             11019                         CST =  9, Same as 4, except USE, AVOID, or
             11020                                   MATERIALIZE attributes specified.
             11021                         CST = 13, GCOS domain, save
             11022                         CST = 14, GCOS domain, no save
             11023                         CST = 15, Non-Callable Procedure.       */
             11024    1         2 NPARAM UBIN(11) UNAL;
             11025                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             11035    1   /*******************************************************************************
             11036    1   *                                                                              *
             11037    1   *                          SUBS                                                 *
             11038    1   *                                                                              *
             11039    1   *******************************************************************************/


             11098    1   /*******************************************************************************
             11099    1   *                                                                              *
             11100    1   *                          TMPLT                                                 *
             11101    1   *                                                                              *
             11102    1   *******************************************************************************/

             11107    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11108    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11109    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11110    1         2 W       REDEF     A,            /* By name                            */
             11111    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11112    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */

             11123    1   /*******************************************************************************
             11124    1   *                                                                              *
             11125    1   *                          ENTRY                                                 *
             11126    1   *                                                                              *
             11127    1   *******************************************************************************/

      652    11131    1   DCL  VXA$GET    ENTRY( 3 );
      653    11132    1   DCL  VXF$FREE   ENTRY( 3 );
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:157  
      654    11133    1   DCL  VXQ$SORT   ENTRY( 7 );

             11142    1   /*******************************************************************************
             11143    1   *                                                                              *
             11144    1   *                          PTR                                                 *
             11145    1   *                                                                              *
             11146    1   *******************************************************************************/

             11151    1   DCL P$         PTR       ALIGNED AUTO;
             11152    1   DCL Q$         PTR       ALIGNED AUTO;
             11153    1   DCL R$         PTR       ALIGNED AUTO;
      657    11155    1   DCL ALL$            PTR  ALIGNED   AUTO;
      658    11156    1   DCL CURR$           PTR  ALIGNED   AUTO;
      659    11157    1   DCL PREV$           PTR  ALIGNED   AUTO;
      660    11158    1   DCL WHERE$          PTR  ALIGNED   AUTO;
      661    11159    1   DCL START$          PTR  ALIGNED   AUTO;
      662    11160    1   DCL TAIL$           PTR  ALIGNED   AUTO;
      663    11161    1   DCL MAKE$           PTR  ALIGNED   AUTO;
      664    11162    1   DCL ED_START$           PTR  ALIGNED   AUTO;
      665    11163    1   DCL RN_START$           PTR  ALIGNED   AUTO;
      666    11164    1   DCL ER_START$           PTR  ALIGNED   AUTO;
      667    11165    1   DCL TEMP_ER_START$           PTR  ALIGNED   AUTO;
      668    11166    1   DCL TEMP_RN_START$           PTR  ALIGNED   AUTO;
      669    11167    1   DCL ED_STOP$           PTR  ALIGNED   AUTO;
      670    11168    1   DCL ER_STOP$           PTR  ALIGNED   AUTO;
      671    11169    1   DCL TEMP_ER_STOP$           PTR  ALIGNED   AUTO;
      672    11170    1   DCL TEMP_RN_STOP$           PTR  ALIGNED   AUTO;
      673    11171    1   DCL CURR_ER_START$          PTR  ALIGNED   AUTO;

             11180    1   /*******************************************************************************
             11181    1   *                                                                              *
             11182    1   *                          UBIN                                                 *
             11183    1   *                                                                              *
             11184    1   *******************************************************************************/

             11189    1   DCL I          UBIN(36) ALIGNED AUTO;
             11190    1   DCL SI REDEF I SBIN WORD ALIGNED;
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:158  
             11191    1   DCL J          UBIN(36) ALIGNED AUTO;
             11192    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11193    1   DCL K          UBIN(36) ALIGNED AUTO;
             11194    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11195    1   DCL L          UBIN(36) ALIGNED AUTO;
             11196    1   DCL SL REDEF L    SBIN WORD ALIGNED;
      676    11198    1   DCL REC_TYPE        UBIN(36)  ALIGNED   AUTO;
      677    11199    1   DCL ALL_TYPE        UBIN(36)  ALIGNED   AUTO;
      678    11200    1   DCL HEAD_INX        UBIN(36)  ALIGNED   AUTO;
      679    11201    1   DCL TSIZE           UBIN(36)  ALIGNED   AUTO;
      680    11202    1   DCL PAGE            UBIN(36)  ALIGNED   AUTO;
      681    11203    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
      682    11204    1   DCL HALVE           UBIN(36)  ALIGNED   AUTO;
      683    11205    1   DCL NPAGE           UBIN(36)  ALIGNED   AUTO;
      684    11206    1   DCL TSIZE_READ      UBIN(36)  ALIGNED   AUTO;
      685    11207    1   DCL SC_TYPE         UBIN(36)  ALIGNED   AUTO;
      686    11208    1   DCL INDX            UBIN(36)  ALIGNED   AUTO;
      687    11209    1   DCL LAST_DISP       UBIN(36)  ALIGNED   AUTO;
      688    11210    1   DCL ED_SIZE         UBIN(36)  ALIGNED   AUTO;
      689    11211    1   DCL ER_SIZE         UBIN(36)  ALIGNED   AUTO;
      690    11212    1   DCL TEMP_ER_SIZE    UBIN(36)  ALIGNED   AUTO;
      691    11213    1   DCL TEMP_RN_SIZE    UBIN(36)  ALIGNED   AUTO;
      692    11214    1   DCL RN_FREE    UBIN(36)  ALIGNED   AUTO;
             11216    1   DCL 1 F$NAME_                 BASED,
             11217    1         2 COUNT             UBIN( 9) UNAL,
             11218    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             11219    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             11220    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             11221    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             11222    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
      694    11224        /**/
      695    11225        /**/
      696    11226        /**/
             11235    1   DCL 1 B$DNAME BASED ALIGNED,
             11236    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11237                /*K*  COUNT is the number of characters in the name */
             11243    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:159  
             11247    1   DCL VX$TARGET_B           BIT( VX_TARGET_COUNT ) ALIGNED    BASED;
             11248    1   DCL VX$SOURCE_B           BIT( VX_SOURCE_COUNT ) ALIGNED    BASED;
             11249    1   DCL VX$TARGET_C         CHAR( VX_TARGET_COUNT ) ALIGNED BASED;
             11250    1   DCL VX$SOURCE_C         CHAR( VX_SOURCE_COUNT ) ALIGNED BASED;
             11253    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
             11254    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
             11255    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
             11256    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
             11257    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
             11258    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             11259    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
             11262    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
             11263    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
             11264    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
             11265    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
             11266    1   DCL BIN_START1$         PTR       ALIGNED AUTO;

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:160  
      703    11270    1         RN_START$ = VX_CURR$ -> VX$NODE.L_START.RN$;
      704    11271    2         IF VX_CURR$ -> VX$NODE.L_START.ER$ ~= ADDR(NIL) THEN DO;
      705    11272    3             IF VX_CURR$ -> VX$NODE.L_START.ED$ ~= ADDR(NIL) THEN DO;
      706    11273    3                 ED_SIZE = VX_CURR$ -> VX$NODE.L_SIZE.ED;
      707    11274                      %ALLOCATE(            /* Get space for temporary entdef list */
      708    11275                      PTR$ = ED_START$,
      709    11276                      TYPE = @ED_DS_1,
      710    11277                      SIZE = ED_SIZE );
      711    11284        /**/
      712    11285        /*                                                 Move ed to temp space
      713    11286        /**/
      714    11287    3                 VX_TARGET_COUNT = ED_SIZE * 4/*@CHAR_WORD*/;
      715    11288    3                 VX_SOURCE_COUNT = VX_TARGET_COUNT;
      716    11289    3                 ED_START$ -> VX$TARGET_C      =
      717    11290    3                         VX_CURR$ -> VX$NODE.L_START.ED$ -> VX$SOURCE_C;
      718    11291    3                 ED_STOP$ = PINCRW( ED_START$, ED_SIZE - SIZEW( B$EDEF) );
      719    11292    3                 BIN_N$ = VX_CURR$ -> VX$NODE.L_START.DN$;
      720    11293    3                 CALL VXQ$SORT( BIN_N$,
      721    11294    3                         ED_START$,
      722    11295    3                         ED_STOP$,
      723    11296    3                         SIZEW( B$EDEF ),
      724    11297    3                         1/*@BY_NAME*/,
      725    11298    3                         2,
      726    11299    3                         0 );
      727    11300        /**/
      728    11301        /*                                                 Now begin to process the entref's
      729    11302        /**/
      730    11303    3                 ER_START$ = VX_CURR$ -> VX$NODE.L_START.ER$;
      731    11304    3                 ER_STOP$ = VX_CURR$ -> VX$NODE.L_STOP.ER$;
      732    11305    3                 ER_SIZE = VX_CURR$ -> VX$NODE.L_SIZE.ER;
      733    11306                      %ALLOCATE(
      734    11307                      PTR$ = TEMP_ER_START$,
      735    11308                      TYPE = @ER_DS_1,
      736    11309                      SIZE = ER_SIZE);
      737    11316    3                 TEMP_ER_STOP$ = TEMP_ER_START$;
      738    11317    3                 BIN_START$ = ED_START$;
      739    11318    3                 BIN_STOP$ = ED_STOP$;
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:161  
      740    11319    3                 TEMP_RN_SIZE = 0;
      741    11320        /**/
      742    11321    4                 DO WHILE( ER_START$ <= ER_STOP$ );
      743    11322    4                     BIN_MATCH$ = PINCRW( RN_START$, ER_START$ -> B$EREF.NPOINTER );
      744    11323        /**/
      745    11324                          %BIN_SEARCH(
      746    11325                          START$=BIN_START$,
      747    11326                          STOP$=BIN_STOP$,
      748    11327                          RESULT$=BIN_RESULT$,
      749    11328                          N$=BIN_N$,
      750    11329                          MATCH$=BIN_MATCH$,
      751    11330                          NAME_DISP=2,
      752    11331                          SIZE="SIZEW(B$EDEF)",
      753    11332                          NEG=%@COMMENT,
      754    11333                          GEN=%@TNEMMOC,
      755    11334                          SPLIT=COMP_SPLIT,
      756    11335                          FOUND=COMP_FOUND,
      757    11336                          CHECK=COMP_CHECK,
      758    11337                          ALTRETURN=COMP_NOT_FOUND,
      759    11338                          EMPTY=COMP_NOT_FOUND);
             11340    4           IF BIN_START$ = ADDR(NIL) THEN GOTO COMP_NOT_FOUND;
             11341    5           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) < 17 THEN DO;
             11342    5              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             11343    6              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             11344    6                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             11345    6                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             11346    6                   >=
             11347    7                   BIN_MATCH$ -> B$DNAME.TEXT THEN DO;
             11348    7                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             11349    7                      =
             11350    7                      BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO COMP_FOUND;
             11351    7                    ELSE GOTO COMP_NOT_FOUND;
             11352    7                    END;
             11353    6                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(B$EDEF) );
             11354    6                 END;                      /* Do while                           */
             11355    5              GOTO COMP_NOT_FOUND;
             11356    5              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:162  
             11357    5           ELSE DO;                        /* Binary search                      */
             11358    5              BIN_LOW = 0;
             11359    5              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) + 2;
             11360    5              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(B$EDEF) );
             11361    5   COMP_SPLIT:     ;
             11362    5              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             11363    5              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(B$EDEF) );
             11364    5              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             11365    5              IF BIN_NTEMP$ -> B$DNAME.TEXT
             11366    5                <
             11367    6                BIN_MATCH$ -> B$DNAME.TEXT THEN DO;
             11368    6                 BIN_LOW = BIN_MID;
             11369    6                 GOTO COMP_CHECK;
             11370    6                 END;
             11371    5              IF BIN_NTEMP$ -> B$DNAME.TEXT
             11372    5                >
             11373    6                BIN_MATCH$ -> B$DNAME.TEXT THEN DO;
             11374    6                 BIN_HIGH = BIN_MID;
             11375    6   COMP_CHECK:        ;
             11376    6                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO COMP_SPLIT;
             11377                                                /* Here => looping or not found       */
             11378                                      /* Result -> < match => a boundary condition    */
             11379    6                 /*
             11380    6                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             11381    6                   <
             11382    6                   BIN_MATCH$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$,
             11382                            SIZEW(B$EDEF) );
             11383    6                 /**/
             11384    6                   GOTO COMP_NOT_FOUND;
             11385    6                 END;
             11386    5              END;                         /* Else do;                           */
             11387    4   COMP_FOUND:
             11388        /* Here -> found */
      760    11390        /**/
      761    11391    4                     GOTO NEXT_ER;
      762    11392    4   COMP_NOT_FOUND:
      763    11393    4                     TEMP_RN_SIZE = TEMP_RN_SIZE +
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:163  
      764    11394                                  %TEXTH_SIZEW(
      765    11395                                  CNT="BIN_MATCH$->B$DNAME.COUNT");
      766    11398    4                     ;
      767    11399    4                     TEMP_ER_STOP$ -> B$EREF = ER_START$ -> B$EREF;
      768    11400    4                     TEMP_ER_STOP$ = PINCRW( TEMP_ER_STOP$, SIZEW( B$EREF ) );
      769    11401    4   NEXT_ER:
      770    11402    4                     ER_START$ = PINCRW( ER_START$, SIZEW( B$EREF ) );
      771    11403    4                    END;                   /* Do while( ER_START$ <= ER_STOP$ ); */
      772    11404        /**/
      773    11405        /*                                                 Release temp space for entdef's
      774    11406        /**/
      775    11407    3                 CALL VXF$FREE(      5/*@ED_DS_1*/, ED_SIZE, 0 );
      776    11408    4                 IF TEMP_ER_STOP$ > TEMP_ER_START$ THEN DO;
      777    11409        /**/
      778    11410    5                     IF TEMP_ER_STOP$ > PINCRW( TEMP_ER_START$, SIZEW( B$EREF) ) THEN
             11410                              DO;
      779    11411    5                         ER_START$ = TEMP_ER_START$;
      780    11412    5                         ER_STOP$  = PINCRW( TEMP_ER_STOP$, -SIZEW( B$EREF ) );
      781    11413    5                         CALL VXQ$SORT( RN_START$,
      782    11414    5                                 ER_START$,
      783    11415    5                                 ER_STOP$,
      784    11416    5                                 SIZEW(B$EREF),
      785    11417    5                                 1/*@BY_NAME*/,
      786    11418    5                                 0,
      787    11419    5                                 0    );
      788    11420    5                         TEMP_ER_STOP$ = TEMP_ER_START$;
      789    11421        /**/
      790    11422    6                         DO WHILE( ER_START$ <= ER_STOP$ );
      791    11423    6                             BIN_MATCH$ = PINCRW( RN_START$, ER_START$ -> B$EREF.
             11423                                      NPOINTER );
      792    11424    6                             CURR_ER_START$ = ER_START$;
      793    11425    6                             ER_START$ = PINCRW( ER_START$, SIZEW( B$EREF ) );
      794    11426    7                             IF ER_START$ <= ER_STOP$ THEN DO;
      795    11427    8                                 DO WHILE( PINCRW( RN_START$, ER_START$ -> B$EREF.
             11427                                          NPOINTER ) ->
      796    11428    8                                         B$DNAME.TEXT
      797    11429    8                                         =
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:164  
      798    11430    8                                         BIN_MATCH$ -> B$DNAME.TEXT );
      799    11431    8                                     ER_START$ = PINCRW( ER_START$, SIZEW( B$EREF ) );
      800    11432    8                                     IF ER_START$ > ER_STOP$ THEN GOTO JUMP_OUT_ER;
      801    11433    8                                    END;   /* Do while( pincrw ... */
      802    11434    7   JUMP_OUT_ER:
      803    11435        /**/
      804    11436    7                                END;       /* If ER_START$ <= ER_STOP$ then do; */
      805    11437    6                             IF TEMP_ER_STOP$ ~= CURR_ER_START$ THEN
      806    11438    6                                 TEMP_ER_STOP$ -> B$EREF = CURR_ER_START$ -> B$EREF;
      807    11439    6                             TEMP_ER_STOP$ = PINCRW( TEMP_ER_STOP$, SIZEW( B$EREF ) );
      808    11440    6                            END;           /* Do while( ER_START$ < ER_STOP$ ); */
      809    11441    5                        END;
             11441                 /* If TEMP_ER_STOP$ > pincrw( TEMP_ER_START$, sizew( B$EREF ) ) then do; */
      810    11442        /**/
      811    11443    4                     TEMP_ER_SIZE = POFFW( TEMP_ER_STOP$, TEMP_ER_START$ ) * SIZEW(
             11443                              B$EREF );
      812    11444    4                     VX_TARGET_COUNT = TEMP_ER_SIZE * 4/*@CHAR_WORD*/;
      813    11445    4                     VX_SOURCE_COUNT = VX_TARGET_COUNT; /* Move new list over old */
      814    11446    4                     VX_CURR$ -> VX$NODE.L_START.ER$ -> VX$TARGET_C =
      815    11447    4                             TEMP_ER_START$ -> VX$SOURCE_C;
      816    11448    4                     VX_CURR$ -> VX$NODE.L_STOP.ER$ =
      817    11449    4                             PINCRW( VX_CURR$ -> VX$NODE.L_START.ER$,
      818    11450    4                             TEMP_ER_SIZE - SIZEW( B$EREF ) );
      819    11451    4                     VX_CURR$ -> VX$NODE.L_SIZE.ER  = TEMP_ER_SIZE;
      820    11452    4                     VX_CURR$ -> VX$NODE.L_PREV_SIZE.ER = 0;
      821    11453        /**/
      822    11454    4                     CALL VXF$FREE(      1/*@ER_DS_1*/, ER_SIZE+ER_SIZE-TEMP_ER_SIZE, 1
             11454                              );
      823    11455    4                    END;           /* If TEMP_ER_STOP$ > TEMP_ER_START$ then do; */
      824    11456    4                 ELSE DO;      /* TEMP_ER_STOP$ = TEMP_ER_START$ => all matched */
      825    11457    4                     CALL VXF$FREE( 1/*@ER_DS_1*/, ER_SIZE+ER_SIZE, 1);
      826    11458    4                     VX_CURR$ -> VX$NODE.L_START.ER$ = ADDR(NIL);
      827    11459    4                     VX_CURR$ -> VX$NODE.L_STOP.ER$ = ADDR(NIL);
      828    11460    4                     VX_CURR$ -> VX$NODE.L_SIZE.ER = 0;
      829    11461    4                     VX_CURR$ -> VX$NODE.L_PREV_SIZE.ER = 0;
      830    11462    4                     GOTO POP_RN_NAME;
      831    11463    4                    END;                   /* Else do; */
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:165  
      832    11464    3                END; /* If VX_CURR$ -> VX$NODE.L_START.ED$ ~= addr(nil) then do; */
      833    11465    3             ELSE DO;
      834    11466    3                 TEMP_RN_SIZE = VX_CURR$ -> VX$NODE.L_SIZE.RN;
      835    11467    3                END;                       /* Else do; */
      836    11468        /**/
      837    11469        /*                                   Allocate space to rebuild the name pool */
      838    11470        /**/
      839    11471                  %ALLOCATE(
      840    11472                  PTR$ = TEMP_RN_START$,
      841    11473                  TYPE = @RN_DS_1,
      842    11474                  SIZE = TEMP_RN_SIZE );
      843    11481    2             TEMP_RN_STOP$ = TEMP_RN_START$;
      844    11482    2             ER_START$ = VX_CURR$ -> VX$NODE.L_START.ER$;
      845    11483    2             ER_STOP$  = VX_CURR$ -> VX$NODE.L_STOP.ER$;
      846    11484        /**/
      847    11485    3             DO WHILE( ER_START$ <= ER_STOP$ );
      848    11486    3                 WHERE$ = PINCRW( RN_START$,
      849    11487    3                         ER_START$ -> B$EREF.NPOINTER );
      850    11488    3                 ER_START$ -> B$EREF.NPOINTER = POFFW( TEMP_RN_STOP$, TEMP_RN_START$ );
      851    11489    3                 I = WHERE$ -> B$DNAME.COUNT;
      852    11490    3                 TEMP_RN_STOP$ -> B$DNAME.COUNT = I;
      853    11491    3                 TEMP_RN_STOP$ -> B$DNAME.TEXT = WHERE$ -> B$DNAME.TEXT;
      854    11492    3                 TEMP_RN_STOP$ = PINCRW( TEMP_RN_STOP$,
      855    11493                              %TEXTH_SIZEW(
      856    11494                              CNT=I);
      857    11497    3                 );
      858    11498    3                 ER_START$ = PINCRW( ER_START$, SIZEW( B$EREF) );
      859    11499    3                END;                       /* Do while( ER_START$ <= ER_STOP$ ); */
      860    11500        /**/
      861    11501        /*                                       Now move the temp name
      862    11502                                                      name pool over the original
      863    11503        /**/
      864    11504    2             RN_FREE = VX_CURR$ -> VX$NODE.L_SIZE.RN + TEMP_RN_SIZE;
      865    11505    2             TEMP_RN_SIZE = POFFW( TEMP_RN_STOP$, TEMP_RN_START$ );
      866    11506    2             RN_FREE = RN_FREE - TEMP_RN_SIZE;
      867    11507    2             VX_TARGET_COUNT = TEMP_RN_SIZE * 4/*@CHAR_WORD*/;
      868    11508    2             VX_SOURCE_COUNT = VX_TARGET_COUNT;
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:166  
      869    11509    2             VX_CURR$ -> VX$NODE.L_START.RN$ -> VX$TARGET_C =
      870    11510    2                     TEMP_RN_START$ -> VX$SOURCE_C;
      871    11511        /**/
      872    11512    2             CALL VXF$FREE(      0/*@RN_DS_1*/, RN_FREE, 1 );
      873    11513    2             VX_CURR$ -> VX$NODE.L_STOP.RN$ = PINCRW(
      874    11514    2                     VX_CURR$ -> VX$NODE.L_START.RN$,
      875    11515    2                     TEMP_RN_SIZE - 1/*@M_RN_ESZ*/ );
      876    11516    2             VX_CURR$ -> VX$NODE.L_SIZE.RN = TEMP_RN_SIZE;
      877    11517    2             VX_CURR$ -> VX$NODE.L_PREV_SIZE.RN = TEMP_RN_SIZE;
      878    11518    2            END;   /* If VX_CURR$ -> VX$NODE.L_START.ER$ ~= addr(nil) then do; */
      879    11519    2         ELSE DO;
      880    11520    2   POP_RN_NAME:
      881    11521    2             CALL VXF$FREE(      0/*@RN_DS_1*/, VX_CURR$ -> VX$NODE.L_SIZE.RN, 1);
      882    11522    2             VX_CURR$ -> VX$NODE.L_START.RN$ = ADDR(NIL);
      883    11523    2             VX_CURR$ -> VX$NODE.L_STOP.RN$ = ADDR(NIL);
      884    11524    2             VX_CURR$ -> VX$NODE.L_SIZE.RN = 0;
      885    11525    2             VX_CURR$ -> VX$NODE.L_PREV_SIZE.RN = 0;
      886    11526    2            END;                           /* Else do; */
      887    11527
      888    11528    1   END VXO$COMPACT;

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:167  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXO$COMPACT.

   Procedure VXO$COMPACT requires 509 words for executable code.
   Procedure VXO$COMPACT requires 64 words of local(AUTO) storage.

    No errors detected in file VXO$OBJECT.:E05TSI    .

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:168  

 Object Unit name= VXO$COMPACT                                File name= VXO$OBJECT.:E05TOU
 UTS= JUL 30 '97 08:27:57.72 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Proc  even  none   509    775  VXO$COMPACT
    3  RoData even  none     6      6  VXO$COMPACT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  VXO$COMPACT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VXA$GET
         yes           Std       7 VXQ$SORT
         yes           Std       3 VXF$FREE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:169  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_OU_HEAD                            VX_CURR$
     VX_ERRORS                             VX_M_FREE                             VX_M_ALL
     VX_M_BASE_PTR                         VX_TARGET_COUNT                       VX_SOURCE_COUNT
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:170  


      626        1        /*T***********************************************************/
      627        2        /*T*                                                         */
      628        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      629        4        /*T*                                                         */
      630        5        /*T***********************************************************/
      631        6        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CCE,AIC,CTI=8 */
      632        7        /*M* VXO$COMPACT - compacts the externally referenced names and entrefs
      633        8                           for the current node.       */
      634        9
      635       10        VXO$COMPACT: PROC;

     10  2 000000   000000 700200 xent  VXO$COMPACT  TSX0  ! X66_AUTO_0
         2 000001   000100 000000                    ZERO    64,0

      636       11
      637       12        %INCLUDE VX_INC_C;
      638    10728        %VX$NODE;

             10740    1   /*******************************************************************************
             10741    1   *                                                                              *
             10742    1   *                          VX$NODE                                                *
             10743    1   *                                                                              *
             10744    1   *******************************************************************************/

             10760    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10761    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10762    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10763    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10764    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10765    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10766                              to list of file nodes for this node            */
             10767    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10768    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10768                  /* Head pointer to shared library list */
             10769    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10769                  /* Head pointer to list of shared libraries
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:171  
             10770                                          which have been mapped to included libraries */
             10771    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10772    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10773    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10774    1         2 ADDR_START REDEF  ADDR_START_A,
             10775    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10776    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10777    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10778    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10779    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10780    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10781    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10782    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10783    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10784    1         2 START_PAGE# REDEF START_PAGE#_A,
             10785    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10786    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10787    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10788    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10789    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10790    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10791    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10792    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10793    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10793                  /* Starting pointer for common sections for this node */
             10794    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10794                  /* Stopping pointer for common sections for this node */
             10795    1         2 L_START,
             10796    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10797    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10798    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10799    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10800    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10801    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10802    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10803    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10804    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:172  
             10805    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10806    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10807    1         2 L_STOP,
             10808    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10809    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10810    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10811    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10812    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10813    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10814    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10815    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10816    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10817    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10818    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10819    1         2 L_SIZE,
             10820    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10821    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10822    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10823    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10824    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10825    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10826    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10827    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10828    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10829    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10830    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10831    1         2 L_PREV_SIZE,
             10832    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10833    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10834    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10835    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10836    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10837    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10838    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10839    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10840    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10841    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:173  
             10842    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10843    1         2 BIT_MAP                ALIGNED,
             10844    1           3 DATA                  ALIGNED,
             10845    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10846    1           3 RPROC                 ALIGNED,
             10847    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10848    1           3 ROS                   ALIGNED,
             10849    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10850    1         2 L_SC_START,
             10851    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10852    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10853    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10854    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10855    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10856    1         2 L_SC_STOP,
             10857    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10858    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10859    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10860    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10861    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10862    1         2 PROMOTE_HEAD,
             10863    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10864    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10865    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10866    1         2 PROMOTE_TAIL,
             10867    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10868    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10869    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10870    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10871    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10872    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10873    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10874    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

      639    10878        %SET LISTMAC='1'B;
      640    10879        %SET LISTSUB='1'B;
      641    10880        %SET LISTEXP='1'B;
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:174  
      642    10881        %SET LISTDIR='0'B;

             10890    1   /*******************************************************************************
             10891    1   *                                                                              *
             10892    1   *                          B$EDEF                                                 *
             10893    1   *                                                                              *
             10894    1   *******************************************************************************/

             10899    1   DCL 1 B$EDEF BASED ALIGNED,
             10900    1         2 LFLAGS UNAL,
             10901                /*K*  LFLAGS is the field reserved for loader to flag load
             10902                      time attributes of the definition and must be zero
             10903                      in the object unit. */
             10904    1           3 SOURCE UBIN(3) UNAL,
             10905                  /*K*  SOURCE - Source of this ENTDEF */
             10906    1           3 DEFINED BIT(1)  UNAL,
             10907                  /*K*  DEFINED - Set if this ENTDEF defined */
             10908    1           3 MULTIPLE BIT(1) UNAL,
             10909                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             10910    1           3 USED BIT(1) UNAL,
             10911                  /*K*  USED - Set if this ENTDEF is used. */
             10912    1           3 * BIT(2) UNAL,
             10913                  /*K*  * - Unused and must be zero. */
             10914    1           3 FAULTAGS BIT(1) UNAL,
             10915                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             10916    1         2 OU UNAL,
             10917    1           3 SECTNUM UBIN BYTE UNAL,
             10918                  /*K*  SECTNUM contains an entry number into the section
             10919                        table (TYPE 3).  */
             10920    1           3 OFFSET UBIN HALF UNAL,
             10921                  /*K*  OFFSET is the word offset from the origin of the section. */
             10922    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             10923                /*K*  ISADDR - Is Address (RU)  */
             10924    1         2 NPOINTER SBIN HALF UNAL,
             10925                /*K*  NPOINTER is a word displacement into the name record
             10926                      (TYPE 1) locating the name (of this entry). */
             10927    1         2 PRI BIT(1) UNAL,
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:175  
             10928                /*K*  PRI is a one-bit flag denoting primary entry
             10929                      definition.
             10930                         PRI = 1, primary name (object unit name)
             10931                             = 0, not primary name                 */
             10932    1         2 ALT BIT(1) UNAL,
             10933                /*K*  ALT is a one-bit flag denoting permissible alternate
             10934                      return.
             10935                         ALT = 1, alternate return allowed
             10936                             = 0, alternate return not allowed        */
             10937    1         2 CHECK BIT(1) UNAL,
             10938                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             10939                      check and alternate return specification check.
             10940                         CHECK = 0, do not check for matching
             10941                                    arguments/parameters and alternate
             10942                                    return specification check.
             10943                               = 1, check for matching arguments/parameters
             10944                                    and alternate return specification.  */
             10945    1         2 CST UBIN(4) UNAL,
             10946                /*K*  CST is a 4-bit field denoting calling sequence type.
             10947                         CST =  0, Standard CP-6 Callable Procedure
             10948                         CST =  1, Nonstandard Call Type
             10949                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             10950                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             10951                         CST =  4, Standard CP-6 Function Procedure; a
             10952                                   variable table entry will be present to
             10953                                   define the attributes of the function
             10954                         CST =  5, Same as 0, except USE, AVOID, or
             10955                                   MATERIALIZE attributes specified
             10956                         CST =  7, Same as 2, except USE, AVOID, or
             10957                                   MATERIALIZE attributes specified
             10958                         CST =  8, Same as 3, except USE, AVOID, or
             10959                                   MATERIALIZE attributes specified
             10960                         CST =  9, Same as 4, except USE, AVOID, or
             10961                                   MATERIALIZE attributes specified
             10962                         CST = 13, GCOS domain, save
             10963                         CST = 14, GCOS domain, no save
             10964                         CST = 15, Non-Callable Procedure.          */
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:176  
             10965    1         2 NPARAM UBIN(11) UNAL;
             10966                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             10976    1   /*******************************************************************************
             10977    1   *                                                                              *
             10978    1   *                          B$EREF                                                 *
             10979    1   *                                                                              *
             10980    1   *******************************************************************************/

             10985    1   DCL 1 B$EREF BASED ALIGNED,
             10986    1         2 NPOINTER SBIN HALF UNAL,
             10987                /*K*  NPOINTER is the word displacement into the record
             10988                      of REF names (TYPE 2) locating the ENTREF name.   */
             10989    1         2 SREF BIT(1),
             10990                /*K*  SREF indicates that the reference is a secondary
             10991                      reference and should not cause loading of a library routine. */
             10992    1         2 ALT BIT(1),
             10993                /*K*  ALT is a one-bit flag denoting permissible alternate return.
             10994                         ALT = 1, alternate return allowed
             10995                             = 0, alternate return not allowed    */
             10996    1         2 CHECK BIT(1),
             10997                /*K*  CHECK is a one-bit flag denoting arguments/parameter check
             10998                      and alternate return specification check.
             10999                         CHECK = 0, do not check for matching
             11000                                    arguments/parameters and
             11001                                    alternate return specification.
             11002                               = 1, check for matching arguments/parameters
             11003                                    and alternate return specification.  */
             11004    1         2 CST UBIN(4) UNAL,
             11005                /*K*  CST is a 4-bit field denoting calling sequence type.
             11006                         CST =  0, Standard CP-6 Callable Procedure.
             11007                         CST =  1, Nonstandard Call Type.
             11008                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11009                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11010                         CST =  4, Standard CP-6 Function Procedure; a
             11011                                   variable table entry will be present to
             11012                                   define the attributes of the function.
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:177  
             11013                         CST =  5, Same as 0, except USE, AVOID, or
             11014                                   MATERIALIZE attributes specified.
             11015                         CST =  7, Same as 2, except USE, AVOID, or
             11016                                   MATERIALIZE attributes specified.
             11017                         CST =  8, Same as 3, except USE, AVOID, or
             11018                                   MATERIALIZE attributes specified.
             11019                         CST =  9, Same as 4, except USE, AVOID, or
             11020                                   MATERIALIZE attributes specified.
             11021                         CST = 13, GCOS domain, save
             11022                         CST = 14, GCOS domain, no save
             11023                         CST = 15, Non-Callable Procedure.       */
             11024    1         2 NPARAM UBIN(11) UNAL;
             11025                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             11035    1   /*******************************************************************************
             11036    1   *                                                                              *
             11037    1   *                          SUBS                                                 *
             11038    1   *                                                                              *
             11039    1   *******************************************************************************/


             11098    1   /*******************************************************************************
             11099    1   *                                                                              *
             11100    1   *                          TMPLT                                                 *
             11101    1   *                                                                              *
             11102    1   *******************************************************************************/

             11107    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11108    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11109    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11110    1         2 W       REDEF     A,            /* By name                            */
             11111    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11112    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */

             11123    1   /*******************************************************************************
             11124    1   *                                                                              *
             11125    1   *                          ENTRY                                                 *
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:178  
             11126    1   *                                                                              *
             11127    1   *******************************************************************************/

      652    11131    1   DCL  VXA$GET    ENTRY( 3 );
      653    11132    1   DCL  VXF$FREE   ENTRY( 3 );
      654    11133    1   DCL  VXQ$SORT   ENTRY( 7 );

             11142    1   /*******************************************************************************
             11143    1   *                                                                              *
             11144    1   *                          PTR                                                 *
             11145    1   *                                                                              *
             11146    1   *******************************************************************************/

             11151    1   DCL P$         PTR       ALIGNED AUTO;
             11152    1   DCL Q$         PTR       ALIGNED AUTO;
             11153    1   DCL R$         PTR       ALIGNED AUTO;
      657    11155    1   DCL ALL$            PTR  ALIGNED   AUTO;
      658    11156    1   DCL CURR$           PTR  ALIGNED   AUTO;
      659    11157    1   DCL PREV$           PTR  ALIGNED   AUTO;
      660    11158    1   DCL WHERE$          PTR  ALIGNED   AUTO;
      661    11159    1   DCL START$          PTR  ALIGNED   AUTO;
      662    11160    1   DCL TAIL$           PTR  ALIGNED   AUTO;
      663    11161    1   DCL MAKE$           PTR  ALIGNED   AUTO;
      664    11162    1   DCL ED_START$           PTR  ALIGNED   AUTO;
      665    11163    1   DCL RN_START$           PTR  ALIGNED   AUTO;
      666    11164    1   DCL ER_START$           PTR  ALIGNED   AUTO;
      667    11165    1   DCL TEMP_ER_START$           PTR  ALIGNED   AUTO;
      668    11166    1   DCL TEMP_RN_START$           PTR  ALIGNED   AUTO;
      669    11167    1   DCL ED_STOP$           PTR  ALIGNED   AUTO;
      670    11168    1   DCL ER_STOP$           PTR  ALIGNED   AUTO;
      671    11169    1   DCL TEMP_ER_STOP$           PTR  ALIGNED   AUTO;
      672    11170    1   DCL TEMP_RN_STOP$           PTR  ALIGNED   AUTO;
      673    11171    1   DCL CURR_ER_START$          PTR  ALIGNED   AUTO;

             11180    1   /*******************************************************************************
             11181    1   *                                                                              *
             11182    1   *                          UBIN                                                 *
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:179  
             11183    1   *                                                                              *
             11184    1   *******************************************************************************/

             11189    1   DCL I          UBIN(36) ALIGNED AUTO;
             11190    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11191    1   DCL J          UBIN(36) ALIGNED AUTO;
             11192    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11193    1   DCL K          UBIN(36) ALIGNED AUTO;
             11194    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11195    1   DCL L          UBIN(36) ALIGNED AUTO;
             11196    1   DCL SL REDEF L    SBIN WORD ALIGNED;
      676    11198    1   DCL REC_TYPE        UBIN(36)  ALIGNED   AUTO;
      677    11199    1   DCL ALL_TYPE        UBIN(36)  ALIGNED   AUTO;
      678    11200    1   DCL HEAD_INX        UBIN(36)  ALIGNED   AUTO;
      679    11201    1   DCL TSIZE           UBIN(36)  ALIGNED   AUTO;
      680    11202    1   DCL PAGE            UBIN(36)  ALIGNED   AUTO;
      681    11203    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
      682    11204    1   DCL HALVE           UBIN(36)  ALIGNED   AUTO;
      683    11205    1   DCL NPAGE           UBIN(36)  ALIGNED   AUTO;
      684    11206    1   DCL TSIZE_READ      UBIN(36)  ALIGNED   AUTO;
      685    11207    1   DCL SC_TYPE         UBIN(36)  ALIGNED   AUTO;
      686    11208    1   DCL INDX            UBIN(36)  ALIGNED   AUTO;
      687    11209    1   DCL LAST_DISP       UBIN(36)  ALIGNED   AUTO;
      688    11210    1   DCL ED_SIZE         UBIN(36)  ALIGNED   AUTO;
      689    11211    1   DCL ER_SIZE         UBIN(36)  ALIGNED   AUTO;
      690    11212    1   DCL TEMP_ER_SIZE    UBIN(36)  ALIGNED   AUTO;
      691    11213    1   DCL TEMP_RN_SIZE    UBIN(36)  ALIGNED   AUTO;
      692    11214    1   DCL RN_FREE    UBIN(36)  ALIGNED   AUTO;
             11216    1   DCL 1 F$NAME_                 BASED,
             11217    1         2 COUNT             UBIN( 9) UNAL,
             11218    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             11219    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             11220    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             11221    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             11222    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
      694    11224        /**/
      695    11225        /**/
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:180  
      696    11226        /**/
             11235    1   DCL 1 B$DNAME BASED ALIGNED,
             11236    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11237                /*K*  COUNT is the number of characters in the name */
             11243    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11247    1   DCL VX$TARGET_B           BIT( VX_TARGET_COUNT ) ALIGNED    BASED;
             11248    1   DCL VX$SOURCE_B           BIT( VX_SOURCE_COUNT ) ALIGNED    BASED;
             11249    1   DCL VX$TARGET_C         CHAR( VX_TARGET_COUNT ) ALIGNED BASED;
             11250    1   DCL VX$SOURCE_C         CHAR( VX_SOURCE_COUNT ) ALIGNED BASED;
             11253    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
             11254    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
             11255    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
             11256    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
             11257    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
             11258    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             11259    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
             11262    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
             11263    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
             11264    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
             11265    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
             11266    1   DCL BIN_START1$         PTR       ALIGNED AUTO;

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:181  
      703    11270    1         RN_START$ = VX_CURR$ -> VX$NODE.L_START.RN$;

  11270  2 000002   000000 470400 xsym               LDP0    VX_CURR$
         2 000003   000032 236100                    LDQ     26,,PR0
         2 000004   200016 756100                    STQ     RN_START$,,AUTO

      704    11271    2         IF VX_CURR$ -> VX$NODE.L_START.ER$ ~= ADDR(NIL) THEN DO;

  11271  2 000005   000035 236100                    LDQ     29,,PR0
         2 000006   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000007   000754 600000 2                  TZE     POP_RN_NAME

      705    11272    3             IF VX_CURR$ -> VX$NODE.L_START.ED$ ~= ADDR(NIL) THEN DO;

  11272  2 000010   000034 236100                    LDQ     28,,PR0
         2 000011   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000012   000572 600000 2                  TZE     s:11466

      706    11273    3                 ED_SIZE = VX_CURR$ -> VX$NODE.L_SIZE.ED;

  11273  2 000013   000060 235100                    LDA     48,,PR0
         2 000014   200047 755100                    STA     ED_SIZE,,AUTO

      707    11274                      %ALLOCATE(            /* Get space for temporary entdef list */
      708    11275                      PTR$ = ED_START$,
      709    11276                      TYPE = @ED_DS_1,
      710    11277                      SIZE = ED_SIZE );

  11278  2 000015   000005 236000 xsym               LDQ     VX_M_ALL+5
         2 000016   000005 136000 xsym               SBLQ    VX_M_FREE+5
         2 000017   000032 604000 2                  TMI     s:11282
         2 000020   200047 116100                    CMPQ    ED_SIZE,,AUTO
         2 000021   000032 602000 2                  TNC     s:11282

  11279  2 000022   000005 236000 xsym               LDQ     VX_M_FREE+5
         2 000023   000022 736000                    QLS     18
         2 000024   000005 036000 xsym               ADLQ    VX_M_BASE_PTR+5
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:182  
         2 000025   200015 756100                    STQ     ED_START$,,AUTO

  11280  2 000026   000005 236000 xsym               LDQ     VX_M_FREE+5
         2 000027   200047 036100                    ADLQ    ED_SIZE,,AUTO
         2 000030   000005 756000 xsym               STQ     VX_M_FREE+5

  11281  2 000031   000044 710000 2                  TRA     s:11287

  11282  2 000032   200047 631500                    EPPR1   ED_SIZE,,AUTO
         2 000033   200072 451500                    STP1    BIN_START1$+3,,AUTO
         2 000034   000000 236000 3                  LDQ     0
         2 000035   200071 756100                    STQ     BIN_START1$+2,,AUTO
         2 000036   200015 633500                    EPPR3   ED_START$,,AUTO
         2 000037   200070 453500                    STP3    BIN_START1$+1,,AUTO
         2 000040   200070 630500                    EPPR0   BIN_START1$+1,,AUTO
         2 000041   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000042   000000 701000 xent               TSX1    VXA$GET
         2 000043   000000 011000                    NOP     0

      711    11284        /**/
      712    11285        /*                                                 Move ed to temp space
      713    11286        /**/
      714    11287    3                 VX_TARGET_COUNT = ED_SIZE * 4/*@CHAR_WORD*/;

  11287  2 000044   200047 235100                    LDA     ED_SIZE,,AUTO
         2 000045   000002 735000                    ALS     2
         2 000046   000000 755000 xsym               STA     VX_TARGET_COUNT

      715    11288    3                 VX_SOURCE_COUNT = VX_TARGET_COUNT;

  11288  2 000047   000000 755000 xsym               STA     VX_SOURCE_COUNT

      716    11289    3                 ED_START$ -> VX$TARGET_C      =

  11289  2 000050   000000 470400 xsym               LDP0    VX_CURR$
         2 000051   000034 471500                    LDP1    28,,PR0
         2 000052   000000 620005                    EAX0    0,AL
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:183  
         2 000053   200015 473500                    LDP3    ED_START$,,AUTO
         2 000054   000000 721000 xsym               LXL1    VX_TARGET_COUNT
         2 000055   040140 100540                    MLR     fill='040'O
         2 000056   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         2 000057   300000 000011                    ADSC9   0,,PR3                   cn=0,n=*X1

      717    11290    3                         VX_CURR$ -> VX$NODE.L_START.ED$ -> VX$SOURCE_C;
      718    11291    3                 ED_STOP$ = PINCRW( ED_START$, ED_SIZE - SIZEW( B$EDEF) );

  11291  2 000060   200047 236100                    LDQ     ED_SIZE,,AUTO
         2 000061   000022 736000                    QLS     18
         2 000062   000002 136003                    SBLQ    2,DU
         2 000063   200015 036100                    ADLQ    ED_START$,,AUTO
         2 000064   200022 756100                    STQ     ED_STOP$,,AUTO

      719    11292    3                 BIN_N$ = VX_CURR$ -> VX$NODE.L_START.DN$;

  11292  2 000065   000000 470400 xsym               LDP0    VX_CURR$
         2 000066   000031 236100                    LDQ     25,,PR0
         2 000067   200057 756100                    STQ     BIN_N$,,AUTO

      720    11293    3                 CALL VXQ$SORT( BIN_N$,

  11293  2 000070   000001 236000 3                  LDQ     1
         2 000071   200076 756100                    STQ     BIN_START1$+7,,AUTO
         2 000072   000002 237000 3                  LDAQ    2
         2 000073   200074 757100                    STAQ    BIN_START1$+5,,AUTO
         2 000074   000003 236000 3                  LDQ     3
         2 000075   200073 756100                    STQ     BIN_START1$+4,,AUTO
         2 000076   200022 631500                    EPPR1   ED_STOP$,,AUTO
         2 000077   200072 451500                    STP1    BIN_START1$+3,,AUTO
         2 000100   200015 633500                    EPPR3   ED_START$,,AUTO
         2 000101   200071 453500                    STP3    BIN_START1$+2,,AUTO
         2 000102   200057 634500                    EPPR4   BIN_N$,,AUTO
         2 000103   200070 454500                    STP4    BIN_START1$+1,,AUTO
         2 000104   200070 630500                    EPPR0   BIN_START1$+1,,AUTO
         2 000105   000025 631400 xsym               EPPR1   B_VECTNIL+21
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:184  
         2 000106   000000 701000 xent               TSX1    VXQ$SORT
         2 000107   000000 011000                    NOP     0

      721    11294    3                         ED_START$,
      722    11295    3                         ED_STOP$,
      723    11296    3                         SIZEW( B$EDEF ),
      724    11297    3                         1/*@BY_NAME*/,
      725    11298    3                         2,
      726    11299    3                         0 );
      727    11300        /**/
      728    11301        /*                                                Now begin to process the entref's
      729    11302        /**/
      730    11303    3                 ER_START$ = VX_CURR$ -> VX$NODE.L_START.ER$;

  11303  2 000110   000000 470400 xsym               LDP0    VX_CURR$
         2 000111   000035 236100                    LDQ     29,,PR0
         2 000112   200017 756100                    STQ     ER_START$,,AUTO

      731    11304    3                 ER_STOP$ = VX_CURR$ -> VX$NODE.L_STOP.ER$;

  11304  2 000113   000047 236100                    LDQ     39,,PR0
         2 000114   200023 756100                    STQ     ER_STOP$,,AUTO

      732    11305    3                 ER_SIZE = VX_CURR$ -> VX$NODE.L_SIZE.ER;

  11305  2 000115   000061 235100                    LDA     49,,PR0
         2 000116   200050 755100                    STA     ER_SIZE,,AUTO

      733    11306                      %ALLOCATE(
      734    11307                      PTR$ = TEMP_ER_START$,
      735    11308                      TYPE = @ER_DS_1,
      736    11309                      SIZE = ER_SIZE);

  11310  2 000117   000001 236000 xsym               LDQ     VX_M_ALL+1
         2 000120   000001 136000 xsym               SBLQ    VX_M_FREE+1
         2 000121   000134 604000 2                  TMI     s:11314
         2 000122   200050 116100                    CMPQ    ER_SIZE,,AUTO
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:185  
         2 000123   000134 602000 2                  TNC     s:11314

  11311  2 000124   000001 236000 xsym               LDQ     VX_M_FREE+1
         2 000125   000022 736000                    QLS     18
         2 000126   000001 036000 xsym               ADLQ    VX_M_BASE_PTR+1
         2 000127   200020 756100                    STQ     TEMP_ER_START$,,AUTO

  11312  2 000130   000001 236000 xsym               LDQ     VX_M_FREE+1
         2 000131   200050 036100                    ADLQ    ER_SIZE,,AUTO
         2 000132   000001 756000 xsym               STQ     VX_M_FREE+1

  11313  2 000133   000146 710000 2                  TRA     s:11316

  11314  2 000134   200050 631500                    EPPR1   ER_SIZE,,AUTO
         2 000135   200072 451500                    STP1    BIN_START1$+3,,AUTO
         2 000136   000002 236000 3                  LDQ     2
         2 000137   200071 756100                    STQ     BIN_START1$+2,,AUTO
         2 000140   200020 633500                    EPPR3   TEMP_ER_START$,,AUTO
         2 000141   200070 453500                    STP3    BIN_START1$+1,,AUTO
         2 000142   200070 630500                    EPPR0   BIN_START1$+1,,AUTO
         2 000143   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000144   000000 701000 xent               TSX1    VXA$GET
         2 000145   000000 011000                    NOP     0

      737    11316    3                 TEMP_ER_STOP$ = TEMP_ER_START$;

  11316  2 000146   200020 236100                    LDQ     TEMP_ER_START$,,AUTO
         2 000147   200024 756100                    STQ     TEMP_ER_STOP$,,AUTO

      738    11317    3                 BIN_START$ = ED_START$;

  11317  2 000150   200015 236100                    LDQ     ED_START$,,AUTO
         2 000151   200054 756100                    STQ     BIN_START$,,AUTO

      739    11318    3                 BIN_STOP$ = ED_STOP$;

  11318  2 000152   200022 236100                    LDQ     ED_STOP$,,AUTO
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:186  
         2 000153   200055 756100                    STQ     BIN_STOP$,,AUTO

      740    11319    3                 TEMP_RN_SIZE = 0;

  11319  2 000154   200052 450100                    STZ     TEMP_RN_SIZE,,AUTO

      741    11320        /**/
      742    11321    4                 DO WHILE( ER_START$ <= ER_STOP$ );

  11321  2 000155   200023 236100                    LDQ     ER_STOP$,,AUTO
         2 000156   200017 116100                    CMPQ    ER_START$,,AUTO
         2 000157   000336 602000 2                  TNC     s:11407

      743    11322    4                     BIN_MATCH$ = PINCRW( RN_START$, ER_START$ -> B$EREF.NPOINTER );

  11322  2 000160   200017 470500                    LDP0    ER_START$,,AUTO
         2 000161   000000 220100                    LDX0    0,,PR0
         2 000162   000000 636010                    EAQ     0,X0
         2 000163   200016 036100                    ADLQ    RN_START$,,AUTO
         2 000164   200060 756100                    STQ     BIN_MATCH$,,AUTO

      744    11323        /**/
      745    11324                          %BIN_SEARCH(
      746    11325                          START$=BIN_START$,
      747    11326                          STOP$=BIN_STOP$,
      748    11327                          RESULT$=BIN_RESULT$,
      749    11328                          N$=BIN_N$,
      750    11329                          MATCH$=BIN_MATCH$,
      751    11330                          NAME_DISP=2,
      752    11331                          SIZE="SIZEW(B$EDEF)",
      753    11332                          NEG=%@COMMENT,
      754    11333                          GEN=%@TNEMMOC,
      755    11334                          SPLIT=COMP_SPLIT,
      756    11335                          FOUND=COMP_FOUND,
      757    11336                          CHECK=COMP_CHECK,
      758    11337                          ALTRETURN=COMP_NOT_FOUND,
      759    11338                          EMPTY=COMP_NOT_FOUND);
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:187  
             11340    4           IF BIN_START$ = ADDR(NIL) THEN GOTO COMP_NOT_FOUND;

  11340  2 000165   200054 236100                    LDQ     BIN_START$,,AUTO
         2 000166   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000167   000312 600000 2                  TZE     COMP_NOT_FOUND

             11341    5           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) < 17 THEN DO;

  11341  2 000170   200054 235100                    LDA     BIN_START$,,AUTO
         2 000171   000022 771000                    ARL     18
         2 000172   200070 755100                    STA     BIN_START1$+1,,AUTO
         2 000173   200055 236100                    LDQ     BIN_STOP$,,AUTO
         2 000174   000022 772000                    QRL     18
         2 000175   200070 136100                    SBLQ    BIN_START1$+1,,AUTO
         2 000176   000002 506007                    DIV     2,DL
         2 000177   000021 116007                    CMPQ    17,DL
         2 000200   000234 605000 2                  TPL     s:11358

             11342    5              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  11342  2 000201   200054 236100                    LDQ     BIN_START$,,AUTO
         2 000202   200056 756100                    STQ     BIN_RESULT$,,AUTO

             11343    6              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  11343  2 000203   200055 116100                    CMPQ    BIN_STOP$,,AUTO
         2 000204   000206 600000 2                  TZE     s:11344
         2 000205   000233 603000 2                  TRC     s:11355

             11344    6                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  11344  2 000206   200056 470500                    LDP0    BIN_RESULT$,,AUTO
         2 000207   000001 220100                    LDX0    1,,PR0
         2 000210   000000 636010                    EAQ     0,X0
         2 000211   200057 036100                    ADLQ    BIN_N$,,AUTO
         2 000212   200066 756100                    STQ     BIN_NTEMP$,,AUTO

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:188  
             11345    6                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  11345  2 000213   200066 471500                    LDP1    BIN_NTEMP$,,AUTO
         2 000214   100000 221100                    LDX1    0,,PR1
         2 000215   200060 473500                    LDP3    BIN_MATCH$,,AUTO
         2 000216   300000 222100                    LDX2    0,,PR3
         2 000217   040140 106540                    CMPC    fill='040'O
         2 000220   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         2 000221   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         2 000222   000225 602000 2                  TNC     s:11353

             11346    6                   >=
             11347    7                   BIN_MATCH$ -> B$DNAME.TEXT THEN DO;

             11348    7                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  11348  2 000223   000311 600000 2                  TZE     COMP_FOUND

             11349    7                      =
             11350    7                      BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO COMP_FOUND;
             11351    7                    ELSE GOTO COMP_NOT_FOUND;

  11351  2 000224   000312 710000 2                  TRA     COMP_NOT_FOUND

             11352    7                    END;
             11353    6                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(B$EDEF) );

  11353  2 000225   200056 236100                    LDQ     BIN_RESULT$,,AUTO
         2 000226   000002 036003                    ADLQ    2,DU
         2 000227   200056 756100                    STQ     BIN_RESULT$,,AUTO

             11354    6                 END;                      /* Do while                           */

  11354  2 000230   200055 116100                    CMPQ    BIN_STOP$,,AUTO
         2 000231   000206 602000 2                  TNC     s:11344
         2 000232   000206 600000 2                  TZE     s:11344

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:189  
             11355    5              GOTO COMP_NOT_FOUND;

  11355  2 000233   000312 710000 2                  TRA     COMP_NOT_FOUND

             11356    5              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             11357    5           ELSE DO;                        /* Binary search                      */

             11358    5              BIN_LOW = 0;

  11358  2 000234   200063 450100                    STZ     BIN_LOW,,AUTO

             11359    5              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) + 2;

  11359  2 000235   200054 235100                    LDA     BIN_START$,,AUTO
         2 000236   000022 771000                    ARL     18
         2 000237   200070 755100                    STA     BIN_START1$+1,,AUTO
         2 000240   200055 236100                    LDQ     BIN_STOP$,,AUTO
         2 000241   000022 772000                    QRL     18
         2 000242   200070 136100                    SBLQ    BIN_START1$+1,,AUTO
         2 000243   000002 506007                    DIV     2,DL
         2 000244   000002 036007                    ADLQ    2,DL
         2 000245   200064 756100                    STQ     BIN_HIGH,,AUTO

             11360    5              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(B$EDEF) );

  11360  2 000246   200054 236100                    LDQ     BIN_START$,,AUTO
         2 000247   777776 036003                    ADLQ    -2,DU
         2 000250   200067 756100                    STQ     BIN_START1$,,AUTO

  11360  2 000251                       COMP_SPLIT   null
             11361    5   COMP_SPLIT:     ;
             11362    5              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  11362  2 000251   200063 236100                    LDQ     BIN_LOW,,AUTO
         2 000252   200064 036100                    ADLQ    BIN_HIGH,,AUTO
         2 000253   000001 772000                    QRL     1
         2 000254   200065 756100                    STQ     BIN_MID,,AUTO
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:190  

             11363    5              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(B$EDEF) );

  11363  2 000255   000023 736000                    QLS     19
         2 000256   200067 036100                    ADLQ    BIN_START1$,,AUTO
         2 000257   200056 756100                    STQ     BIN_RESULT$,,AUTO

             11364    5              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  11364  2 000260   200056 470500                    LDP0    BIN_RESULT$,,AUTO
         2 000261   000001 220100                    LDX0    1,,PR0
         2 000262   000000 636010                    EAQ     0,X0
         2 000263   200057 036100                    ADLQ    BIN_N$,,AUTO
         2 000264   200066 756100                    STQ     BIN_NTEMP$,,AUTO

             11365    5              IF BIN_NTEMP$ -> B$DNAME.TEXT

  11365  2 000265   200066 471500                    LDP1    BIN_NTEMP$,,AUTO
         2 000266   100000 221100                    LDX1    0,,PR1
         2 000267   200060 473500                    LDP3    BIN_MATCH$,,AUTO
         2 000270   300000 222100                    LDX2    0,,PR3
         2 000271   040140 106540                    CMPC    fill='040'O
         2 000272   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         2 000273   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         2 000274   000300 603000 2                  TRC     s:11371

             11366    5                <
             11367    6                BIN_MATCH$ -> B$DNAME.TEXT THEN DO;

             11368    6                 BIN_LOW = BIN_MID;

  11368  2 000275   200065 235100                    LDA     BIN_MID,,AUTO
         2 000276   200063 755100                    STA     BIN_LOW,,AUTO

             11369    6                 GOTO COMP_CHECK;

  11369  2 000277   000304 710000 2                  TRA     COMP_CHECK
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:191  

             11370    6                 END;
             11371    5              IF BIN_NTEMP$ -> B$DNAME.TEXT

  11371  2 000300   000311 602000 2                  TNC     COMP_FOUND
         2 000301   000311 600000 2                  TZE     COMP_FOUND

             11372    5                >
             11373    6                BIN_MATCH$ -> B$DNAME.TEXT THEN DO;

             11374    6                 BIN_HIGH = BIN_MID;

  11374  2 000302   200065 235100                    LDA     BIN_MID,,AUTO
         2 000303   200064 755100                    STA     BIN_HIGH,,AUTO

  11374  2 000304                       COMP_CHECK   null
             11375    6   COMP_CHECK:        ;
             11376    6                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO COMP_SPLIT;

  11376  2 000304   200063 236100                    LDQ     BIN_LOW,,AUTO
         2 000305   000001 036007                    ADLQ    1,DL
         2 000306   200064 116100                    CMPQ    BIN_HIGH,,AUTO
         2 000307   000251 602000 2                  TNC     COMP_SPLIT

             11377                                                /* Here => looping or not found       */
             11378                                      /* Result -> < match => a boundary condition    */
             11379    6                 /*
             11380    6                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             11381    6                   <
             11382    6                   BIN_MATCH$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$,
             11382                            SIZEW(B$EDEF) );
             11383    6                 /**/
             11384    6                   GOTO COMP_NOT_FOUND;

  11384  2 000310   000312 710000 2                  TRA     COMP_NOT_FOUND

             11385    6                 END;
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:192  
             11386    5              END;                         /* Else do;                           */
             11387    4   COMP_FOUND:
             11388        /* Here -> found */
      760    11390        /**/
      761    11391    4                     GOTO NEXT_ER;

  11391  2 000311   000330 710000 2     COMP_FOUND   TRA     NEXT_ER

      762    11392    4   COMP_NOT_FOUND:
      763    11393    4                     TEMP_RN_SIZE = TEMP_RN_SIZE +

  11393  2 000312   200060 470500       COMP_NOT_FO* LDP0    BIN_MATCH$,,AUTO
         2 000313   000000 236100                    LDQ     0,,PR0
         2 000314   000022 772000                    QRL     18
         2 000315   000005 036007                    ADLQ    5,DL
         2 000316   000002 772000                    QRL     2
         2 000317   200052 036100                    ADLQ    TEMP_RN_SIZE,,AUTO
         2 000320   200052 756100                    STQ     TEMP_RN_SIZE,,AUTO

      764    11394                                  %TEXTH_SIZEW(
      765    11395                                  CNT="BIN_MATCH$->B$DNAME.COUNT");
      766    11398    4                     ;
      767    11399    4                     TEMP_ER_STOP$ -> B$EREF = ER_START$ -> B$EREF;

  11399  2 000321   200017 471500                    LDP1    ER_START$,,AUTO
         2 000322   100000 236100                    LDQ     0,,PR1
         2 000323   200024 473500                    LDP3    TEMP_ER_STOP$,,AUTO
         2 000324   300000 756100                    STQ     0,,PR3

      768    11400    4                     TEMP_ER_STOP$ = PINCRW( TEMP_ER_STOP$, SIZEW( B$EREF ) );

  11400  2 000325   200024 236100                    LDQ     TEMP_ER_STOP$,,AUTO
         2 000326   000001 036003                    ADLQ    1,DU
         2 000327   200024 756100                    STQ     TEMP_ER_STOP$,,AUTO

      769    11401    4   NEXT_ER:
      770    11402    4                     ER_START$ = PINCRW( ER_START$, SIZEW( B$EREF ) );
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:193  

  11402  2 000330   200017 236100       NEXT_ER      LDQ     ER_START$,,AUTO
         2 000331   000001 036003                    ADLQ    1,DU
         2 000332   200017 756100                    STQ     ER_START$,,AUTO

      771    11403    4                    END;                   /* Do while( ER_START$ <= ER_STOP$ ); */

  11403  2 000333   200023 116100                    CMPQ    ER_STOP$,,AUTO
         2 000334   000160 602000 2                  TNC     s:11322
         2 000335   000160 600000 2                  TZE     s:11322

      772    11404        /**/
      773    11405        /*                                                 Release temp space for entdef's
      774    11406        /**/
      775    11407    3                 CALL VXF$FREE(      5/*@ED_DS_1*/, ED_SIZE, 0 );

  11407  2 000336   000001 236000 3                  LDQ     1
         2 000337   200072 756100                    STQ     BIN_START1$+3,,AUTO
         2 000340   200047 630500                    EPPR0   ED_SIZE,,AUTO
         2 000341   200071 450500                    STP0    BIN_START1$+2,,AUTO
         2 000342   000000 236000 3                  LDQ     0
         2 000343   200070 756100                    STQ     BIN_START1$+1,,AUTO
         2 000344   200070 630500                    EPPR0   BIN_START1$+1,,AUTO
         2 000345   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000346   000000 701000 xent               TSX1    VXF$FREE
         2 000347   000000 011000                    NOP     0

      776    11408    4                 IF TEMP_ER_STOP$ > TEMP_ER_START$ THEN DO;

  11408  2 000350   200020 236100                    LDQ     TEMP_ER_START$,,AUTO
         2 000351   200024 116100                    CMPQ    TEMP_ER_STOP$,,AUTO
         2 000352   000547 603000 2                  TRC     s:11457

      777    11409        /**/
      778    11410    5                     IF TEMP_ER_STOP$ > PINCRW( TEMP_ER_START$, SIZEW( B$EREF) ) THEN
             11410                              DO;

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:194  
  11410  2 000353   000001 036003                    ADLQ    1,DU
         2 000354   200024 116100                    CMPQ    TEMP_ER_STOP$,,AUTO
         2 000355   000477 603000 2                  TRC     s:11443

      779    11411    5                         ER_START$ = TEMP_ER_START$;

  11411  2 000356   200020 236100                    LDQ     TEMP_ER_START$,,AUTO
         2 000357   200017 756100                    STQ     ER_START$,,AUTO

      780    11412    5                         ER_STOP$  = PINCRW( TEMP_ER_STOP$, -SIZEW( B$EREF ) );

  11412  2 000360   200024 236100                    LDQ     TEMP_ER_STOP$,,AUTO
         2 000361   777777 036003                    ADLQ    -1,DU
         2 000362   200023 756100                    STQ     ER_STOP$,,AUTO

      781    11413    5                         CALL VXQ$SORT( RN_START$,

  11413  2 000363   000001 236000 3                  LDQ     1
         2 000364   200076 756100                    STQ     BIN_START1$+7,,AUTO
         2 000365   000004 237000 3                  LDAQ    4
         2 000366   200074 757100                    STAQ    BIN_START1$+5,,AUTO
         2 000367   000002 236000 3                  LDQ     2
         2 000370   200073 756100                    STQ     BIN_START1$+4,,AUTO
         2 000371   200023 630500                    EPPR0   ER_STOP$,,AUTO
         2 000372   200072 450500                    STP0    BIN_START1$+3,,AUTO
         2 000373   200017 631500                    EPPR1   ER_START$,,AUTO
         2 000374   200071 451500                    STP1    BIN_START1$+2,,AUTO
         2 000375   200016 633500                    EPPR3   RN_START$,,AUTO
         2 000376   200070 453500                    STP3    BIN_START1$+1,,AUTO
         2 000377   200070 630500                    EPPR0   BIN_START1$+1,,AUTO
         2 000400   000025 631400 xsym               EPPR1   B_VECTNIL+21
         2 000401   000000 701000 xent               TSX1    VXQ$SORT
         2 000402   000000 011000                    NOP     0

      782    11414    5                                 ER_START$,
      783    11415    5                                 ER_STOP$,
      784    11416    5                                 SIZEW(B$EREF),
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:195  
      785    11417    5                                 1/*@BY_NAME*/,
      786    11418    5                                 0,
      787    11419    5                                 0    );
      788    11420    5                         TEMP_ER_STOP$ = TEMP_ER_START$;

  11420  2 000403   200020 236100                    LDQ     TEMP_ER_START$,,AUTO
         2 000404   200024 756100                    STQ     TEMP_ER_STOP$,,AUTO

      789    11421        /**/
      790    11422    6                         DO WHILE( ER_START$ <= ER_STOP$ );

  11422  2 000405   200023 236100                    LDQ     ER_STOP$,,AUTO
         2 000406   200017 116100                    CMPQ    ER_START$,,AUTO
         2 000407   000477 602000 2                  TNC     s:11443

      791    11423    6                             BIN_MATCH$ = PINCRW( RN_START$, ER_START$ -> B$EREF.
             11423                                      NPOINTER );

  11423  2 000410   200017 470500                    LDP0    ER_START$,,AUTO
         2 000411   000000 220100                    LDX0    0,,PR0
         2 000412   000000 636010                    EAQ     0,X0
         2 000413   200016 036100                    ADLQ    RN_START$,,AUTO
         2 000414   200060 756100                    STQ     BIN_MATCH$,,AUTO

      792    11424    6                             CURR_ER_START$ = ER_START$;

  11424  2 000415   200017 236100                    LDQ     ER_START$,,AUTO
         2 000416   200026 756100                    STQ     CURR_ER_START$,,AUTO

      793    11425    6                             ER_START$ = PINCRW( ER_START$, SIZEW( B$EREF ) );

  11425  2 000417   000001 036003                    ADLQ    1,DU
         2 000420   200017 756100                    STQ     ER_START$,,AUTO

      794    11426    7                             IF ER_START$ <= ER_STOP$ THEN DO;

  11426  2 000421   200023 116100                    CMPQ    ER_STOP$,,AUTO
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:196  
         2 000422   000424 600000 2                  TZE     s:11427
         2 000423   000462 603000 2                  TRC     JUMP_OUT_ER

      795    11427    8                                 DO WHILE( PINCRW( RN_START$, ER_START$ -> B$EREF.
             11427                                          NPOINTER ) ->

  11427  2 000424   200017 470500                    LDP0    ER_START$,,AUTO
         2 000425   000000 220100                    LDX0    0,,PR0
         2 000426   200016 471500                    LDP1    RN_START$,,AUTO
         2 000427   100000 221110                    LDX1    0,X0,PR1
         2 000430   200060 473500                    LDP3    BIN_MATCH$,,AUTO
         2 000431   300000 222100                    LDX2    0,,PR3
         2 000432   000000 635010                    EAA     0,X0
         2 000433   000020 731000                    ARS     16
         2 000434   040140 106545                    CMPC    fill='040'O
         2 000435   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         2 000436   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         2 000437   000462 601000 2                  TNZ     JUMP_OUT_ER

      796    11428    8                                         B$DNAME.TEXT
      797    11429    8                                         =
      798    11430    8                                         BIN_MATCH$ -> B$DNAME.TEXT );
      799    11431    8                                     ER_START$ = PINCRW( ER_START$, SIZEW( B$EREF ) );

  11431  2 000440   200017 236100                    LDQ     ER_START$,,AUTO
         2 000441   000001 036003                    ADLQ    1,DU
         2 000442   200017 756100                    STQ     ER_START$,,AUTO

      800    11432    8                                     IF ER_START$ > ER_STOP$ THEN GOTO JUMP_OUT_ER;

  11432  2 000443   200023 116100                    CMPQ    ER_STOP$,,AUTO
         2 000444   000446 600000 2                  TZE     s:11433
         2 000445   000462 603000 2                  TRC     JUMP_OUT_ER

      801    11433    8                                    END;   /* Do while( pincrw ... */

  11433  2 000446   200017 470500                    LDP0    ER_START$,,AUTO
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:197  
         2 000447   000000 220100                    LDX0    0,,PR0
         2 000450   200016 471500                    LDP1    RN_START$,,AUTO
         2 000451   100000 221110                    LDX1    0,X0,PR1
         2 000452   200060 473500                    LDP3    BIN_MATCH$,,AUTO
         2 000453   300000 222100                    LDX2    0,,PR3
         2 000454   000000 635010                    EAA     0,X0
         2 000455   000020 731000                    ARS     16
         2 000456   040140 106545                    CMPC    fill='040'O
         2 000457   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         2 000460   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         2 000461   000440 600000 2                  TZE     s:11431

      802    11434    7   JUMP_OUT_ER:
      803    11435        /**/
      804    11436    7                                END;       /* If ER_START$ <= ER_STOP$ then do; */

  11436  2 000462                       JUMP_OUT_ER  null
      805    11437    6                             IF TEMP_ER_STOP$ ~= CURR_ER_START$ THEN

  11437  2 000462   200024 236100                    LDQ     TEMP_ER_STOP$,,AUTO
         2 000463   200026 116100                    CMPQ    CURR_ER_START$,,AUTO
         2 000464   000471 600000 2                  TZE     s:11439

      806    11438    6                                 TEMP_ER_STOP$ -> B$EREF = CURR_ER_START$ -> B$EREF;

  11438  2 000465   200026 470500                    LDP0    CURR_ER_START$,,AUTO
         2 000466   000000 236100                    LDQ     0,,PR0
         2 000467   200024 471500                    LDP1    TEMP_ER_STOP$,,AUTO
         2 000470   100000 756100                    STQ     0,,PR1

      807    11439    6                             TEMP_ER_STOP$ = PINCRW( TEMP_ER_STOP$, SIZEW( B$EREF ) );

  11439  2 000471   200024 236100                    LDQ     TEMP_ER_STOP$,,AUTO
         2 000472   000001 036003                    ADLQ    1,DU
         2 000473   200024 756100                    STQ     TEMP_ER_STOP$,,AUTO

      808    11440    6                            END;           /* Do while( ER_START$ < ER_STOP$ ); */
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:198  

  11440  2 000474   200023 236100                    LDQ     ER_STOP$,,AUTO
         2 000475   200017 116100                    CMPQ    ER_START$,,AUTO
         2 000476   000410 603000 2                  TRC     s:11423

      809    11441    5                        END;
             11441                /* If TEMP_ER_STOP$ > pincrw( TEMP_ER_START$, sizew( B$EREF ) ) then do; */

      810    11442        /**/
      811    11443    4                     TEMP_ER_SIZE = POFFW( TEMP_ER_STOP$, TEMP_ER_START$ ) * SIZEW(
             11443                              B$EREF );

  11443  2 000477   200020 235100                    LDA     TEMP_ER_START$,,AUTO
         2 000500   000022 771000                    ARL     18
         2 000501   200070 755100                    STA     BIN_START1$+1,,AUTO
         2 000502   200024 236100                    LDQ     TEMP_ER_STOP$,,AUTO
         2 000503   000022 772000                    QRL     18
         2 000504   200070 136100                    SBLQ    BIN_START1$+1,,AUTO
         2 000505   200051 756100                    STQ     TEMP_ER_SIZE,,AUTO

      812    11444    4                     VX_TARGET_COUNT = TEMP_ER_SIZE * 4/*@CHAR_WORD*/;

  11444  2 000506   200051 235100                    LDA     TEMP_ER_SIZE,,AUTO
         2 000507   000002 735000                    ALS     2
         2 000510   000000 755000 xsym               STA     VX_TARGET_COUNT

      813    11445    4                     VX_SOURCE_COUNT = VX_TARGET_COUNT; /* Move new list over old */

  11445  2 000511   000000 755000 xsym               STA     VX_SOURCE_COUNT

      814    11446    4                     VX_CURR$ -> VX$NODE.L_START.ER$ -> VX$TARGET_C =

  11446  2 000512   000000 470400 xsym               LDP0    VX_CURR$
         2 000513   000035 471500                    LDP1    29,,PR0
         2 000514   200020 473500                    LDP3    TEMP_ER_START$,,AUTO
         2 000515   000000 620005                    EAX0    0,AL
         2 000516   000000 721000 xsym               LXL1    VX_TARGET_COUNT
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:199  
         2 000517   040140 100540                    MLR     fill='040'O
         2 000520   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         2 000521   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1

      815    11447    4                             TEMP_ER_START$ -> VX$SOURCE_C;
      816    11448    4                     VX_CURR$ -> VX$NODE.L_STOP.ER$ =

  11448  2 000522   000000 470400 xsym               LDP0    VX_CURR$
         2 000523   000035 471500                    LDP1    29,,PR0
         2 000524   177777 633506                    EPPR3   -1,QL,PR1
         2 000525   000047 453500                    STP3    39,,PR0

      817    11449    4                             PINCRW( VX_CURR$ -> VX$NODE.L_START.ER$,
      818    11450    4                             TEMP_ER_SIZE - SIZEW( B$EREF ) );
      819    11451    4                     VX_CURR$ -> VX$NODE.L_SIZE.ER  = TEMP_ER_SIZE;

  11451  2 000526   200051 235100                    LDA     TEMP_ER_SIZE,,AUTO
         2 000527   000061 755100                    STA     49,,PR0

      820    11452    4                     VX_CURR$ -> VX$NODE.L_PREV_SIZE.ER = 0;

  11452  2 000530   000073 450100                    STZ     59,,PR0

      821    11453        /**/
      822    11454    4                     CALL VXF$FREE(     1/*@ER_DS_1*/, ER_SIZE+ER_SIZE-TEMP_ER_SIZE, 1
             11454                              );

  11454  2 000531   200050 236100                    LDQ     ER_SIZE,,AUTO
         2 000532   200050 036100                    ADLQ    ER_SIZE,,AUTO
         2 000533   200051 136100                    SBLQ    TEMP_ER_SIZE,,AUTO
         2 000534   200070 756100                    STQ     BIN_START1$+1,,AUTO
         2 000535   000002 236000 3                  LDQ     2
         2 000536   200073 756100                    STQ     BIN_START1$+4,,AUTO
         2 000537   200070 631500                    EPPR1   BIN_START1$+1,,AUTO
         2 000540   200072 451500                    STP1    BIN_START1$+3,,AUTO
         2 000541   200071 756100                    STQ     BIN_START1$+2,,AUTO
         2 000542   200071 630500                    EPPR0   BIN_START1$+2,,AUTO
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:200  
         2 000543   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000544   000000 701000 xent               TSX1    VXF$FREE
         2 000545   000000 011000                    NOP     0

      823    11455    4                    END;           /* If TEMP_ER_STOP$ > TEMP_ER_START$ then do; */

  11455  2 000546   000574 710000 2                  TRA     s:11475

      824    11456    4                 ELSE DO;      /* TEMP_ER_STOP$ = TEMP_ER_START$ => all matched */

      825    11457    4                     CALL VXF$FREE( 1/*@ER_DS_1*/, ER_SIZE+ER_SIZE, 1);

  11457  2 000547   200050 236100                    LDQ     ER_SIZE,,AUTO
         2 000550   200050 036100                    ADLQ    ER_SIZE,,AUTO
         2 000551   200070 756100                    STQ     BIN_START1$+1,,AUTO
         2 000552   000002 236000 3                  LDQ     2
         2 000553   200073 756100                    STQ     BIN_START1$+4,,AUTO
         2 000554   200070 630500                    EPPR0   BIN_START1$+1,,AUTO
         2 000555   200072 450500                    STP0    BIN_START1$+3,,AUTO
         2 000556   200071 756100                    STQ     BIN_START1$+2,,AUTO
         2 000557   200071 630500                    EPPR0   BIN_START1$+2,,AUTO
         2 000560   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000561   000000 701000 xent               TSX1    VXF$FREE
         2 000562   000000 011000                    NOP     0

      826    11458    4                     VX_CURR$ -> VX$NODE.L_START.ER$ = ADDR(NIL);

  11458  2 000563   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000564   000000 470400 xsym               LDP0    VX_CURR$
         2 000565   000035 756100                    STQ     29,,PR0

      827    11459    4                     VX_CURR$ -> VX$NODE.L_STOP.ER$ = ADDR(NIL);

  11459  2 000566   000047 756100                    STQ     39,,PR0

      828    11460    4                     VX_CURR$ -> VX$NODE.L_SIZE.ER = 0;

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:201  
  11460  2 000567   000061 450100                    STZ     49,,PR0

      829    11461    4                     VX_CURR$ -> VX$NODE.L_PREV_SIZE.ER = 0;

  11461  2 000570   000073 450100                    STZ     59,,PR0

      830    11462    4                     GOTO POP_RN_NAME;

  11462  2 000571   000754 710000 2                  TRA     POP_RN_NAME

      831    11463    4                    END;                   /* Else do; */
      832    11464    3                END; /* If VX_CURR$ -> VX$NODE.L_START.ED$ ~= addr(nil) then do; */
      833    11465    3             ELSE DO;

      834    11466    3                 TEMP_RN_SIZE = VX_CURR$ -> VX$NODE.L_SIZE.RN;

  11466  2 000572   000056 235100                    LDA     46,,PR0
         2 000573   200052 755100                    STA     TEMP_RN_SIZE,,AUTO

      835    11467    3                END;                       /* Else do; */

      836    11468        /**/
      837    11469        /*                                   Allocate space to rebuild the name pool */
      838    11470        /**/
      839    11471                  %ALLOCATE(
      840    11472                  PTR$ = TEMP_RN_START$,
      841    11473                  TYPE = @RN_DS_1,
      842    11474                  SIZE = TEMP_RN_SIZE );

  11475  2 000574   000000 236000 xsym               LDQ     VX_M_ALL
         2 000575   000000 136000 xsym               SBLQ    VX_M_FREE
         2 000576   000611 604000 2                  TMI     s:11479
         2 000577   200052 116100                    CMPQ    TEMP_RN_SIZE,,AUTO
         2 000600   000611 602000 2                  TNC     s:11479

  11476  2 000601   000000 236000 xsym               LDQ     VX_M_FREE
         2 000602   000022 736000                    QLS     18
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:202  
         2 000603   000000 036000 xsym               ADLQ    VX_M_BASE_PTR
         2 000604   200021 756100                    STQ     TEMP_RN_START$,,AUTO

  11477  2 000605   000000 236000 xsym               LDQ     VX_M_FREE
         2 000606   200052 036100                    ADLQ    TEMP_RN_SIZE,,AUTO
         2 000607   000000 756000 xsym               STQ     VX_M_FREE

  11478  2 000610   000623 710000 2                  TRA     s:11481

  11479  2 000611   200052 630500                    EPPR0   TEMP_RN_SIZE,,AUTO
         2 000612   200072 450500                    STP0    BIN_START1$+3,,AUTO
         2 000613   000001 236000 3                  LDQ     1
         2 000614   200071 756100                    STQ     BIN_START1$+2,,AUTO
         2 000615   200021 631500                    EPPR1   TEMP_RN_START$,,AUTO
         2 000616   200070 451500                    STP1    BIN_START1$+1,,AUTO
         2 000617   200070 630500                    EPPR0   BIN_START1$+1,,AUTO
         2 000620   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000621   000000 701000 xent               TSX1    VXA$GET
         2 000622   000000 011000                    NOP     0

      843    11481    2             TEMP_RN_STOP$ = TEMP_RN_START$;

  11481  2 000623   200021 236100                    LDQ     TEMP_RN_START$,,AUTO
         2 000624   200025 756100                    STQ     TEMP_RN_STOP$,,AUTO

      844    11482    2             ER_START$ = VX_CURR$ -> VX$NODE.L_START.ER$;

  11482  2 000625   000000 470400 xsym               LDP0    VX_CURR$
         2 000626   000035 236100                    LDQ     29,,PR0
         2 000627   200017 756100                    STQ     ER_START$,,AUTO

      845    11483    2             ER_STOP$  = VX_CURR$ -> VX$NODE.L_STOP.ER$;

  11483  2 000630   000047 236100                    LDQ     39,,PR0
         2 000631   200023 756100                    STQ     ER_STOP$,,AUTO

      846    11484        /**/
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:203  
      847    11485    3             DO WHILE( ER_START$ <= ER_STOP$ );

  11485  2 000632   200017 116100                    CMPQ    ER_START$,,AUTO
         2 000633   000700 602000 2                  TNC     s:11504

      848    11486    3                 WHERE$ = PINCRW( RN_START$,

  11486  2 000634   200017 470500                    LDP0    ER_START$,,AUTO
         2 000635   000000 220100                    LDX0    0,,PR0
         2 000636   000000 636010                    EAQ     0,X0
         2 000637   200016 036100                    ADLQ    RN_START$,,AUTO
         2 000640   200011 756100                    STQ     WHERE$,,AUTO

      849    11487    3                         ER_START$ -> B$EREF.NPOINTER );
      850    11488    3                ER_START$ -> B$EREF.NPOINTER = POFFW( TEMP_RN_STOP$, TEMP_RN_START$ );

  11488  2 000641   200021 235100                    LDA     TEMP_RN_START$,,AUTO
         2 000642   000022 771000                    ARL     18
         2 000643   200070 755100                    STA     BIN_START1$+1,,AUTO
         2 000644   200025 236100                    LDQ     TEMP_RN_STOP$,,AUTO
         2 000645   000022 772000                    QRL     18
         2 000646   200070 136100                    SBLQ    BIN_START1$+1,,AUTO
         2 000647   000000 620006                    EAX0    0,QL
         2 000650   000000 740100                    STX0    0,,PR0

      851    11489    3                 I = WHERE$ -> B$DNAME.COUNT;

  11489  2 000651   200011 470500                    LDP0    WHERE$,,AUTO
         2 000652   000000 236100                    LDQ     0,,PR0
         2 000653   000022 772000                    QRL     18
         2 000654   200027 756100                    STQ     I,,AUTO

      852    11490    3                 TEMP_RN_STOP$ -> B$DNAME.COUNT = I;

  11490  2 000655   000000 620006                    EAX0    0,QL
         2 000656   200025 471500                    LDP1    TEMP_RN_STOP$,,AUTO
         2 000657   100000 740100                    STX0    0,,PR1
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:204  

      853    11491    3                 TEMP_RN_STOP$ -> B$DNAME.TEXT = WHERE$ -> B$DNAME.TEXT;

  11491  2 000660   000000 221100                    LDX1    0,,PR0
         2 000661   040140 100540                    MLR     fill='040'O
         2 000662   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
         2 000663   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0

      854    11492    3                 TEMP_RN_STOP$ = PINCRW( TEMP_RN_STOP$,

  11492  2 000664   200027 236100                    LDQ     I,,AUTO
         2 000665   000005 036007                    ADLQ    5,DL
         2 000666   000002 772000                    QRL     2
         2 000667   000022 736000                    QLS     18
         2 000670   200025 036100                    ADLQ    TEMP_RN_STOP$,,AUTO
         2 000671   200025 756100                    STQ     TEMP_RN_STOP$,,AUTO

      855    11493                              %TEXTH_SIZEW(
      856    11494                              CNT=I);
      857    11497    3                 );
      858    11498    3                 ER_START$ = PINCRW( ER_START$, SIZEW( B$EREF) );

  11498  2 000672   200017 236100                    LDQ     ER_START$,,AUTO
         2 000673   000001 036003                    ADLQ    1,DU
         2 000674   200017 756100                    STQ     ER_START$,,AUTO

      859    11499    3                END;                       /* Do while( ER_START$ <= ER_STOP$ ); */

  11499  2 000675   200023 116100                    CMPQ    ER_STOP$,,AUTO
         2 000676   000634 602000 2                  TNC     s:11486
         2 000677   000634 600000 2                  TZE     s:11486

      860    11500        /**/
      861    11501        /*                                       Now move the temp name
      862    11502                                                      name pool over the original
      863    11503        /**/
      864    11504    2             RN_FREE = VX_CURR$ -> VX$NODE.L_SIZE.RN + TEMP_RN_SIZE;
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:205  

  11504  2 000700   000000 470400 xsym               LDP0    VX_CURR$
         2 000701   000056 236100                    LDQ     46,,PR0
         2 000702   200052 036100                    ADLQ    TEMP_RN_SIZE,,AUTO
         2 000703   200053 756100                    STQ     RN_FREE,,AUTO

      865    11505    2             TEMP_RN_SIZE = POFFW( TEMP_RN_STOP$, TEMP_RN_START$ );

  11505  2 000704   200021 235100                    LDA     TEMP_RN_START$,,AUTO
         2 000705   000022 771000                    ARL     18
         2 000706   200070 755100                    STA     BIN_START1$+1,,AUTO
         2 000707   200025 236100                    LDQ     TEMP_RN_STOP$,,AUTO
         2 000710   000022 772000                    QRL     18
         2 000711   200070 136100                    SBLQ    BIN_START1$+1,,AUTO
         2 000712   200052 756100                    STQ     TEMP_RN_SIZE,,AUTO

      866    11506    2             RN_FREE = RN_FREE - TEMP_RN_SIZE;

  11506  2 000713   200053 236100                    LDQ     RN_FREE,,AUTO
         2 000714   200052 136100                    SBLQ    TEMP_RN_SIZE,,AUTO
         2 000715   200053 756100                    STQ     RN_FREE,,AUTO

      867    11507    2             VX_TARGET_COUNT = TEMP_RN_SIZE * 4/*@CHAR_WORD*/;

  11507  2 000716   200052 235100                    LDA     TEMP_RN_SIZE,,AUTO
         2 000717   000002 735000                    ALS     2
         2 000720   000000 755000 xsym               STA     VX_TARGET_COUNT

      868    11508    2             VX_SOURCE_COUNT = VX_TARGET_COUNT;

  11508  2 000721   000000 755000 xsym               STA     VX_SOURCE_COUNT

      869    11509    2             VX_CURR$ -> VX$NODE.L_START.RN$ -> VX$TARGET_C =

  11509  2 000722   000032 471500                    LDP1    26,,PR0
         2 000723   200021 473500                    LDP3    TEMP_RN_START$,,AUTO
         2 000724   000000 620005                    EAX0    0,AL
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:206  
         2 000725   000000 721000 xsym               LXL1    VX_TARGET_COUNT
         2 000726   040140 100540                    MLR     fill='040'O
         2 000727   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         2 000730   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1

      870    11510    2                     TEMP_RN_START$ -> VX$SOURCE_C;
      871    11511        /**/
      872    11512    2             CALL VXF$FREE(      0/*@RN_DS_1*/, RN_FREE, 1 );

  11512  2 000731   000002 236000 3                  LDQ     2
         2 000732   200072 756100                    STQ     BIN_START1$+3,,AUTO
         2 000733   200053 630500                    EPPR0   RN_FREE,,AUTO
         2 000734   200071 450500                    STP0    BIN_START1$+2,,AUTO
         2 000735   000001 236000 3                  LDQ     1
         2 000736   200070 756100                    STQ     BIN_START1$+1,,AUTO
         2 000737   200070 630500                    EPPR0   BIN_START1$+1,,AUTO
         2 000740   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000741   000000 701000 xent               TSX1    VXF$FREE
         2 000742   000000 011000                    NOP     0

      873    11513    2             VX_CURR$ -> VX$NODE.L_STOP.RN$ = PINCRW(

  11513  2 000743   000000 470400 xsym               LDP0    VX_CURR$
         2 000744   000032 471500                    LDP1    26,,PR0
         2 000745   200052 720100                    LXL0    TEMP_RN_SIZE,,AUTO
         2 000746   177777 633510                    EPPR3   -1,X0,PR1
         2 000747   000044 453500                    STP3    36,,PR0

      874    11514    2                     VX_CURR$ -> VX$NODE.L_START.RN$,
      875    11515    2                     TEMP_RN_SIZE - 1/*@M_RN_ESZ*/ );
      876    11516    2             VX_CURR$ -> VX$NODE.L_SIZE.RN = TEMP_RN_SIZE;

  11516  2 000750   200052 235100                    LDA     TEMP_RN_SIZE,,AUTO
         2 000751   000056 755100                    STA     46,,PR0

      877    11517    2             VX_CURR$ -> VX$NODE.L_PREV_SIZE.RN = TEMP_RN_SIZE;

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:207  
  11517  2 000752   000070 755100                    STA     56,,PR0

      878    11518    2            END;   /* If VX_CURR$ -> VX$NODE.L_START.ER$ ~= addr(nil) then do; */

  11518  2 000753   000774 710000 2                  TRA     s:11528

      879    11519    2         ELSE DO;

      880    11520    2   POP_RN_NAME:
      881    11521    2             CALL VXF$FREE(      0/*@RN_DS_1*/, VX_CURR$ -> VX$NODE.L_SIZE.RN, 1);

  11521  2 000754   000002 236000 3     POP_RN_NAME  LDQ     2
         2 000755   200072 756100                    STQ     BIN_START1$+3,,AUTO
         2 000756   000000 236000 xsym               LDQ     VX_CURR$
         2 000757   000056 036003                    ADLQ    46,DU
         2 000760   000001 235000 3                  LDA     1
         2 000761   200070 757100                    STAQ    BIN_START1$+1,,AUTO
         2 000762   200070 630500                    EPPR0   BIN_START1$+1,,AUTO
         2 000763   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000764   000000 701000 xent               TSX1    VXF$FREE
         2 000765   000000 011000                    NOP     0

      882    11522    2             VX_CURR$ -> VX$NODE.L_START.RN$ = ADDR(NIL);

  11522  2 000766   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000767   000000 470400 xsym               LDP0    VX_CURR$
         2 000770   000032 756100                    STQ     26,,PR0

      883    11523    2             VX_CURR$ -> VX$NODE.L_STOP.RN$ = ADDR(NIL);

  11523  2 000771   000044 756100                    STQ     36,,PR0

      884    11524    2             VX_CURR$ -> VX$NODE.L_SIZE.RN = 0;

  11524  2 000772   000056 450100                    STZ     46,,PR0

      885    11525    2             VX_CURR$ -> VX$NODE.L_PREV_SIZE.RN = 0;
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:208  

  11525  2 000773   000070 450100                    STZ     56,,PR0

      886    11526    2            END;                           /* Else do; */

      887    11527
      888    11528    1   END VXO$COMPACT;

  11528  2 000774   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:209  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXO$COMPACT.
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:210  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    64-0-0/w UBIN        r     1 BIN_HIGH                  63-0-0/w UBIN        r     1 BIN_LOW
    60-0-0/w PTR         r     1 BIN_MATCH$                65-0-0/w UBIN        r     1 BIN_MID
    57-0-0/w PTR         r     1 BIN_N$                    66-0-0/w PTR         r     1 BIN_NTEMP$
    56-0-0/w PTR         r     1 BIN_RESULT$               54-0-0/w PTR         r     1 BIN_START$
    67-0-0/w PTR         r     1 BIN_START1$               55-0-0/w PTR         r     1 BIN_STOP$
    26-0-0/w PTR         r     1 CURR_ER_START$            47-0-0/w UBIN        r     1 ED_SIZE
    15-0-0/w PTR         r     1 ED_START$                 22-0-0/w PTR         r     1 ED_STOP$
    50-0-0/w UBIN        r     1 ER_SIZE                   17-0-0/w PTR         r     1 ER_START$
    23-0-0/w PTR         r     1 ER_STOP$                  27-0-0/w UBIN        r     1 I
    53-0-0/w UBIN        r     1 RN_FREE                   16-0-0/w PTR         r     1 RN_START$
    51-0-0/w UBIN        r     1 TEMP_ER_SIZE              20-0-0/w PTR         r     1 TEMP_ER_START$
    24-0-0/w PTR         r     1 TEMP_ER_STOP$             52-0-0/w UBIN        r     1 TEMP_RN_SIZE
    21-0-0/w PTR         r     1 TEMP_RN_START$            25-0-0/w PTR         r     1 TEMP_RN_STOP$
    11-0-0/w PTR         r     1 WHERE$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 VX_CURR$
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w UBIN        r     1 VX_SOURCE_COUNT            0-0-0/w UBIN        r     1 VX_TARGET_COUNT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:211  

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC(72)    r     1 B$EDEF
     0-0-0/w STRC        r     1 B$EREF                     0-0-0/c ASTR(9)     r     1 F$NAME_
     0-0-0/w STRC(3672)  r     1 VX$NODE                    0-0-0/w ACHR        r     1 VX$SOURCE_C
     0-0-0/w ACHR        r     1 VX$TARGET_C                0-0-0/w STRC(72)    r     1 VX$TMPLT


   Procedure VXO$COMPACT requires 509 words for executable code.
   Procedure VXO$COMPACT requires 64 words of local(AUTO) storage.

    No errors detected in file VXO$OBJECT.:E05TSI    .
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:212  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:213  
          MINI XREF LISTING

B$DNAME.COUNT
     11236**DCL     11243--IMP-SIZ 11345>>IF      11345>>IF      11348>>IF      11348>>IF      11365>>IF
     11365>>IF      11371>>IF      11371>>IF      11393>>ASSIGN  11427>>DOWHILE 11427>>DOWHILE 11489>>ASSIGN
     11490<<ASSIGN  11491>>ASSIGN  11491>>ASSIGN
B$DNAME.TEXT
     11243**DCL     11345>>IF      11345>>IF      11348>>IF      11348>>IF      11365>>IF      11365>>IF
     11371>>IF      11371>>IF      11427>>DOWHILE 11427>>DOWHILE 11491<<ASSIGN  11491>>ASSIGN
B$EDEF
     10899**DCL     11291--ASSIGN  11293--CALL    11341--IF      11353--ASSIGN  11359--ASSIGN  11360--ASSIGN
     11363--ASSIGN
B$EDEF.OU
     10916**DCL     10922--REDEF
B$EREF
     10985**DCL     11399<<ASSIGN  11399>>ASSIGN  11400--ASSIGN  11402--ASSIGN  11410--IF      11412--ASSIGN
     11413--CALL    11425--ASSIGN  11431--ASSIGN  11438<<ASSIGN  11438>>ASSIGN  11439--ASSIGN  11443--ASSIGN
     11448--ASSIGN  11498--ASSIGN
B$EREF.NPOINTER
     10986**DCL     11322>>ASSIGN  11423>>ASSIGN  11427>>DOWHILE 11427>>DOWHILE 11486>>ASSIGN  11488<<ASSIGN
BIN_HIGH
     11263**DCL     11359<<ASSIGN  11362>>ASSIGN  11374<<ASSIGN  11376>>IF
BIN_LOW
     11262**DCL     11358<<ASSIGN  11362>>ASSIGN  11368<<ASSIGN  11376>>IF
BIN_MATCH$
     11257**DCL     11322<<ASSIGN  11345>>IF      11345>>IF      11348>>IF      11348>>IF      11365>>IF
     11365>>IF      11371>>IF      11371>>IF      11393>>ASSIGN  11423<<ASSIGN  11427>>DOWHILE 11427>>DOWHILE
BIN_MID
     11264**DCL     11362<<ASSIGN  11363>>ASSIGN  11368>>ASSIGN  11374>>ASSIGN
BIN_N$
     11256**DCL     11292<<ASSIGN  11293<>CALL    11344>>ASSIGN  11364>>ASSIGN
BIN_NTEMP$
     11265**DCL     11344<<ASSIGN  11345>>IF      11345>>IF      11348>>IF      11348>>IF      11364<<ASSIGN
     11365>>IF      11365>>IF      11371>>IF      11371>>IF
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:214  
BIN_RESULT$
     11255**DCL     11342<<ASSIGN  11343>>DOWHILE 11344>>ASSIGN  11353<<ASSIGN  11353>>ASSIGN  11363<<ASSIGN
     11364>>ASSIGN
BIN_START$
     11253**DCL     11317<<ASSIGN  11340>>IF      11341>>IF      11342>>ASSIGN  11359>>ASSIGN  11360>>ASSIGN
BIN_START1$
     11266**DCL     11360<<ASSIGN  11363>>ASSIGN
BIN_STOP$
     11254**DCL     11318<<ASSIGN  11341>>IF      11343>>DOWHILE 11359>>ASSIGN
COMP_CHECK
     11374**LABEL   11369--GOTO
COMP_FOUND
     11391**LABEL   11350--GOTO
COMP_NOT_FOUND
     11393**LABEL   11340--GOTO    11351--GOTO    11355--GOTO    11384--GOTO
COMP_SPLIT
     11360**LABEL   11376--GOTO
CURR_ER_START$
     11171**DCL     11424<<ASSIGN  11437>>IF      11438>>ASSIGN
ED_SIZE
     11210**DCL     11273<<ASSIGN  11278>>IF      11280>>ASSIGN  11282<>CALL    11287>>ASSIGN  11291>>ASSIGN
     11407<>CALL
ED_START$
     11162**DCL     11279<<ASSIGN  11282<>CALL    11289>>ASSIGN  11291>>ASSIGN  11293<>CALL    11317>>ASSIGN
ED_STOP$
     11167**DCL     11291<<ASSIGN  11293<>CALL    11318>>ASSIGN
ER_SIZE
     11211**DCL     11305<<ASSIGN  11310>>IF      11312>>ASSIGN  11314<>CALL    11454>>CALL    11454>>CALL
     11457>>CALL    11457>>CALL
ER_START$
     11164**DCL     11303<<ASSIGN  11321>>DOWHILE 11322>>ASSIGN  11399>>ASSIGN  11402<<ASSIGN  11402>>ASSIGN
     11411<<ASSIGN  11413<>CALL    11422>>DOWHILE 11423>>ASSIGN  11424>>ASSIGN  11425<<ASSIGN  11425>>ASSIGN
     11426>>IF      11427>>DOWHILE 11427>>DOWHILE 11431<<ASSIGN  11431>>ASSIGN  11432>>IF      11482<<ASSIGN
     11485>>DOWHILE 11486>>ASSIGN  11488>>ASSIGN  11498<<ASSIGN  11498>>ASSIGN
ER_STOP$
     11168**DCL     11304<<ASSIGN  11321>>DOWHILE 11412<<ASSIGN  11413<>CALL    11422>>DOWHILE 11426>>IF
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:215  
     11432>>IF      11483<<ASSIGN  11485>>DOWHILE
F$NAME_.COUNT
     11217**DCL     11218--IMP-SIZ
I
     11189**DCL     11190--REDEF   11489<<ASSIGN  11490>>ASSIGN  11492>>ASSIGN
J
     11191**DCL     11192--REDEF
JUMP_OUT_ER
     11436**LABEL   11432--GOTO
K
     11193**DCL     11194--REDEF
L
     11195**DCL     11196--REDEF
NEXT_ER
     11402**LABEL   11391--GOTO
POP_RN_NAME
     11521**LABEL   11462--GOTO
RN_FREE
     11214**DCL     11504<<ASSIGN  11506<<ASSIGN  11506>>ASSIGN  11512<>CALL
RN_START$
     11163**DCL     11270<<ASSIGN  11322>>ASSIGN  11413<>CALL    11423>>ASSIGN  11427>>DOWHILE 11427>>DOWHILE
     11486>>ASSIGN
TEMP_ER_SIZE
     11212**DCL     11443<<ASSIGN  11444>>ASSIGN  11448>>ASSIGN  11451>>ASSIGN  11454>>CALL
TEMP_ER_START$
     11165**DCL     11311<<ASSIGN  11314<>CALL    11316>>ASSIGN  11408>>IF      11410>>IF      11411>>ASSIGN
     11420>>ASSIGN  11443>>ASSIGN  11446>>ASSIGN
TEMP_ER_STOP$
     11169**DCL     11316<<ASSIGN  11399>>ASSIGN  11400<<ASSIGN  11400>>ASSIGN  11408>>IF      11410>>IF
     11412>>ASSIGN  11420<<ASSIGN  11437>>IF      11438>>ASSIGN  11439<<ASSIGN  11439>>ASSIGN  11443>>ASSIGN
TEMP_RN_SIZE
     11213**DCL     11319<<ASSIGN  11393<<ASSIGN  11393>>ASSIGN  11466<<ASSIGN  11475>>IF      11477>>ASSIGN
     11479<>CALL    11504>>ASSIGN  11505<<ASSIGN  11506>>ASSIGN  11507>>ASSIGN  11513>>ASSIGN  11516>>ASSIGN
     11517>>ASSIGN
TEMP_RN_START$
     11166**DCL     11476<<ASSIGN  11479<>CALL    11481>>ASSIGN  11488>>ASSIGN  11505>>ASSIGN  11509>>ASSIGN
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:216  
TEMP_RN_STOP$
     11170**DCL     11481<<ASSIGN  11488>>ASSIGN  11490>>ASSIGN  11491>>ASSIGN  11491>>ASSIGN  11492<<ASSIGN
     11492>>ASSIGN  11505>>ASSIGN
VX$NODE.ADDR_START_A
     10773**DCL     10774--REDEF
VX$NODE.ADDR_STOP_A
     10778**DCL     10779--REDEF
VX$NODE.L_PREV_SIZE
     10831**DCL     10842--REDEF
VX$NODE.L_PREV_SIZE.ER
     10837**DCL     11452<<ASSIGN  11461<<ASSIGN
VX$NODE.L_PREV_SIZE.RN
     10834**DCL     11517<<ASSIGN  11525<<ASSIGN
VX$NODE.L_SC_START
     10850**DCL     10855--REDEF
VX$NODE.L_SC_STOP
     10856**DCL     10861--REDEF
VX$NODE.L_SIZE
     10819**DCL     10830--REDEF
VX$NODE.L_SIZE.ED
     10824**DCL     11273>>ASSIGN
VX$NODE.L_SIZE.ER
     10825**DCL     11305>>ASSIGN  11451<<ASSIGN  11460<<ASSIGN
VX$NODE.L_SIZE.RN
     10822**DCL     11466>>ASSIGN  11504>>ASSIGN  11516<<ASSIGN  11521<>CALL    11524<<ASSIGN
VX$NODE.L_START
     10795**DCL     10806--REDEF
VX$NODE.L_START.DN$
     10797**DCL     11292>>ASSIGN
VX$NODE.L_START.ED$
     10800**DCL     11272>>IF      11289>>ASSIGN
VX$NODE.L_START.ER$
     10801**DCL     11271>>IF      11303>>ASSIGN  11446>>ASSIGN  11448>>ASSIGN  11458<<ASSIGN  11482>>ASSIGN
VX$NODE.L_START.RN$
     10798**DCL     11270>>ASSIGN  11509>>ASSIGN  11513>>ASSIGN  11522<<ASSIGN
VX$NODE.L_STOP
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:217  
     10807**DCL     10818--REDEF
VX$NODE.L_STOP.ER$
     10813**DCL     11304>>ASSIGN  11448<<ASSIGN  11459<<ASSIGN  11483>>ASSIGN
VX$NODE.L_STOP.RN$
     10810**DCL     11513<<ASSIGN  11523<<ASSIGN
VX$NODE.PROMOTE_HEAD
     10862**DCL     10865--REDEF
VX$NODE.PROMOTE_TAIL
     10866**DCL     10869--REDEF
VX$NODE.START_PAGE#_A
     10783**DCL     10784--REDEF
VX$NODE.STOP_PAGE#_A
     10788**DCL     10789--REDEF
VX$SOURCE_C
     11250**DCL     11289>>ASSIGN  11446>>ASSIGN  11509>>ASSIGN
VX$TARGET_C
     11249**DCL     11289<<ASSIGN  11446<<ASSIGN  11509<<ASSIGN
VX$TMPLT.A
     11108**DCL     11109--REDEF   11110--REDEF   11344>>ASSIGN  11364>>ASSIGN
VXA$GET
     11131**DCL-ENT 11282--CALL    11314--CALL    11479--CALL
VXF$FREE
     11132**DCL-ENT 11407--CALL    11454--CALL    11457--CALL    11512--CALL    11521--CALL
VXQ$SORT
     11133**DCL-ENT 11293--CALL    11413--CALL
VX_BIAS.A
      9578**DCL      9579--REDEF
VX_CBUF.CHARS_A
      9512**DCL      9513--REDEF
VX_CONST_DCB.ACTPOS
     10694**DCL     10694--REDEF
VX_CONST_DCB.ARS#
     10653**DCL     10653--REDEF
VX_CONST_DCB.ATTR#
     10683**DCL     10683--REDEF   10685--REDEF
VX_CONST_DCB.BORROW
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:218  
     10705**DCL     10705--REDEF   10705--REDEF   10705--REDEF
VX_CONST_DCB.EOMCHAR#
     10660**DCL     10661--REDEF
VX_CONST_DCB.FLDID
     10697**DCL     10698--REDEF
VX_CONST_DCB.FORM$
     10689**DCL     10689--REDEF
VX_CONST_DCB.FSECT
     10712**DCL     10712--REDEF
VX_CONST_DCB.FSN#
     10679**DCL     10679--REDEF   10679--REDEF   10680--REDEF
VX_CONST_DCB.HEADER$
     10688**DCL     10689--REDEF
VX_CONST_DCB.IXTNSIZE#
     10685**DCL     10686--REDEF
VX_CONST_DCB.LASTSTA$
     10669**DCL     10669--REDEF
VX_CONST_DCB.LVL
     10706**DCL     10706--REDEF
VX_CONST_DCB.NAME#.C
     10669**DCL     10670--REDEF
VX_CONST_DCB.NOEOF
     10701**DCL     10701--REDEF
VX_CONST_DCB.NRECS#
     10686**DCL     10686--REDEF
VX_CONST_DCB.NRECX
     10713**DCL     10713--REDEF
VX_CONST_DCB.OHDR
     10702**DCL     10702--REDEF
VX_CONST_DCB.ORG#
     10677**DCL     10678--REDEF
VX_CONST_DCB.PRECNO
     10710**DCL     10710--REDEF
VX_CONST_DCB.RCSZ
     10718**DCL     10718--REDEF
VX_CONST_DCB.RES#
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:219  
     10671**DCL     10671--REDEF
VX_CONST_DCB.SETX
     10690**DCL     10690--REDEF
VX_CONST_DCB.TAB$
     10689**DCL     10689--REDEF
VX_CONST_DCB.TDA
     10709**DCL     10710--REDEF
VX_CONST_DCB.WSN#
     10671**DCL     10672--REDEF
VX_CURR$
      9547**DCL     11270>>ASSIGN  11271>>IF      11272>>IF      11273>>ASSIGN  11289>>ASSIGN  11292>>ASSIGN
     11303>>ASSIGN  11304>>ASSIGN  11305>>ASSIGN  11446>>ASSIGN  11448>>ASSIGN  11448>>ASSIGN  11451>>ASSIGN
     11452>>ASSIGN  11458>>ASSIGN  11459>>ASSIGN  11460>>ASSIGN  11461>>ASSIGN  11466>>ASSIGN  11482>>ASSIGN
     11483>>ASSIGN  11504>>ASSIGN  11509>>ASSIGN  11513>>ASSIGN  11513>>ASSIGN  11516>>ASSIGN  11517>>ASSIGN
     11521>>CALL    11522>>ASSIGN  11523>>ASSIGN  11524>>ASSIGN  11525>>ASSIGN
VX_EBUF.CHARS_A
     10101**DCL     10102--REDEF
VX_EFIELD1.CHARS
     10110**DCL     10111--REDEF
VX_EFIELD2.CHARS
     10114**DCL     10115--REDEF
VX_EFIELD3.CHARS
     10118**DCL     10119--REDEF
VX_EI_KEY_BUF.KEY
     10494**DCL     10495--REDEF
VX_ERRORS
      9555**DCL      9566--REDEF
VX_ERRORS.CONFLICT_A
      9561**DCL      9562--REDEF
VX_ERRORS.UNSAT_A
      9557**DCL      9558--REDEF
VX_IMAGE_DATA.CPAGE#_A
      8692**DCL      8693--REDEF
VX_IMAGE_DATA.NODE_A$
      8704**DCL      8705--REDEF
VX_IMAGE_DATA.START_A$
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:220  
      8696**DCL      8697--REDEF
VX_IMAGE_DATA.STOP_A$
      8700**DCL      8701--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8761**DCL      8762--REDEF
VX_IMAGE_DS3.NODE_A$
      8773**DCL      8774--REDEF
VX_IMAGE_DS3.START_A$
      8765**DCL      8766--REDEF
VX_IMAGE_DS3.STOP_A$
      8769**DCL      8770--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8784**DCL      8785--REDEF
VX_IMAGE_DS4.NODE_A$
      8796**DCL      8797--REDEF
VX_IMAGE_DS4.START_A$
      8788**DCL      8789--REDEF
VX_IMAGE_DS4.STOP_A$
      8792**DCL      8793--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8807**DCL      8808--REDEF
VX_IMAGE_DS5.NODE_A$
      8819**DCL      8820--REDEF
VX_IMAGE_DS5.START_A$
      8811**DCL      8812--REDEF
VX_IMAGE_DS5.STOP_A$
      8815**DCL      8816--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8830**DCL      8831--REDEF
VX_IMAGE_DS6.NODE_A$
      8842**DCL      8843--REDEF
VX_IMAGE_DS6.START_A$
      8834**DCL      8835--REDEF
VX_IMAGE_DS6.STOP_A$
      8838**DCL      8839--REDEF
VX_IMAGE_DS7.CPAGE#_A
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:221  
      8853**DCL      8854--REDEF
VX_IMAGE_DS7.NODE_A$
      8865**DCL      8866--REDEF
VX_IMAGE_DS7.START_A$
      8857**DCL      8858--REDEF
VX_IMAGE_DS7.STOP_A$
      8861**DCL      8862--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8876**DCL      8877--REDEF
VX_IMAGE_DS8.NODE_A$
      8888**DCL      8889--REDEF
VX_IMAGE_DS8.START_A$
      8880**DCL      8881--REDEF
VX_IMAGE_DS8.STOP_A$
      8884**DCL      8885--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8715**DCL      8716--REDEF
VX_IMAGE_PROC.NODE_A$
      8727**DCL      8728--REDEF
VX_IMAGE_PROC.START_A$
      8719**DCL      8720--REDEF
VX_IMAGE_PROC.STOP_A$
      8723**DCL      8724--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8738**DCL      8739--REDEF
VX_IMAGE_ROS.NODE_A$
      8750**DCL      8751--REDEF
VX_IMAGE_ROS.START_A$
      8742**DCL      8743--REDEF
VX_IMAGE_ROS.STOP_A$
      8746**DCL      8747--REDEF
VX_M_ALL
      9589**DCL     11278>>IF      11310>>IF      11475>>IF
VX_M_BASE_PTR
      9591**DCL     11279>>ASSIGN  11311>>ASSIGN  11476>>ASSIGN
VX_M_FREE
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:222  
      9587**DCL     11278>>IF      11279>>ASSIGN  11280<<ASSIGN  11280>>ASSIGN  11310>>IF      11311>>ASSIGN
     11312<<ASSIGN  11312>>ASSIGN  11475>>IF      11476>>ASSIGN  11477<<ASSIGN  11477>>ASSIGN
VX_M_VECTOR.F
      8543**DCL      8547--REDEF
VX_M_VECTOR_DP.F
      8578**DCL      8582--REDEF
VX_O.ACCTN_A$
      9707**DCL      9708--REDEF
VX_O.DCB_MATCH_A$
      9716**DCL      9717--REDEF
VX_O.DCB_MATCH_HIT_A
      9722**DCL      9723--REDEF
VX_O.FIDN_A$
      9701**DCL      9702--REDEF
VX_O.FID_A$
      9693**DCL      9694--REDEF
VX_O.INCLUDE_A$
      9713**DCL      9714--REDEF
VX_O.MAP_A
      9687**DCL      9688--REDEF
VX_O.NODCB_A
      9744**DCL      9745--REDEF
VX_O.NUM_A
      9632**DCL      9634--REDEF
VX_O.OPT_A
      9732**DCL      9733--REDEF
VX_O.PRIV_A
      9648**DCL      9650--REDEF
VX_O.SIN_A
      9601**DCL      9602--REDEF
VX_O.TCB_A
      9728**DCL      9729--REDEF
VX_OD.ACCTN_A$
      9905**DCL      9906--REDEF
VX_OD.DCB_MATCH_A$
      9914**DCL      9915--REDEF
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:223  
VX_OD.FIDN_A$
      9899**DCL      9900--REDEF
VX_OD.FID_A$
      9891**DCL      9892--REDEF
VX_OD.INCLUDE_A$
      9911**DCL      9912--REDEF
VX_OD.MAP_A
      9885**DCL      9886--REDEF
VX_OD.NODCB_A
      9929**DCL      9930--REDEF
VX_OD.NUM_A
      9832**DCL      9833--REDEF
VX_OD.PRIV_A
      9847**DCL      9848--REDEF
VX_OD.SIN_A
      9801**DCL      9802--REDEF
VX_OD.VECTOR_A$
      9920**DCL      9921--REDEF
VX_OL.MAX_A
      9776**DCL      9778--REDEF
VX_OL.MIN_A
      9761**DCL      9762--REDEF
VX_ON.ACCTN_A$
     10050**DCL     10052--REDEF
VX_ON.DCB_MATCH_A$
     10061**DCL     10063--REDEF
VX_ON.FIDN_A$
     10043**DCL     10045--REDEF
VX_ON.FID_A$
     10034**DCL     10036--REDEF
VX_ON.INCLUDE_A$
     10057**DCL     10059--REDEF
VX_ON.MAP_A
     10027**DCL     10029--REDEF
VX_ON.NODCB_A$
     10077**DCL     10078--REDEF
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:224  
VX_ON.NUM_A
      9972**DCL      9974--REDEF
VX_ON.PRIV_A
      9988**DCL      9990--REDEF
VX_ON.SIN_A
      9940**DCL      9942--REDEF
VX_ON.VECTOR_A$
     10068**DCL     10069--REDEF
VX_OUHEAD.VERSION
      9387**DCL      9389--REDEF
VX_OU_HEAD
      9330**DCL      9369--REDEF
VX_OU_HEAD.REC_A
      9342**DCL      9345--REDEF
VX_O_KEY_BUF.FORM0
      8591**DCL      8594--REDEF    8601--REDEF
VX_O_KEY_BUF_L.FORM0
      8614**DCL      8617--REDEF    8624--REDEF
VX_PASS2_REF.OU.L_START
     10280**DCL     10285--REDEF
VX_PASS2_REF.OU.L_STOP
     10286**DCL     10291--REDEF
VX_PASS2_REF.OU.MAX
     10274**DCL     10279--REDEF
VX_PASS2_REF.OU.SIZE
     10292**DCL     10297--REDEF
VX_PASS2_REF.SAT.COUNT
     10319**DCL     10325--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10326**DCL     10332--REDEF
VX_PASS2_REF.SAT.L_START
     10305**DCL     10311--REDEF
VX_PASS2_REF.SAT.L_STOP
     10312**DCL     10318--REDEF
VX_PASS2_REF.SAT.MAX
     10299**DCL     10304--REDEF
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:225  
VX_PASS2_REF.UNSAT.L_START
     10367**DCL     10372--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10373**DCL     10378--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10379**DCL     10384--REDEF
VX_PASS2_REF.UNSAT.MAX
     10361**DCL     10366--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10391**DCL     10396--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10385**DCL     10390--REDEF
VX_PHRASE.PHRASE
      9793**DCL      9795--REDEF
VX_PROGRAM_BIAS.A
      9571**DCL      9572--REDEF
VX_R_KEY_BUF.FORM0
      8640**DCL      8644--REDEF    8650--REDEF
VX_SD.A
      8268**DCL      8269--REDEF
VX_SOURCE_COUNT
     10127**DCL     11248--IMP-SIZ 11250--IMP-SIZ 11288<<ASSIGN  11289>>ASSIGN  11445<<ASSIGN  11446>>ASSIGN
     11508<<ASSIGN  11509>>ASSIGN
VX_SPC.B$.MINE
     10462**DCL     10468--REDEF
VX_SPC.B$.NAME
     10441**DCL     10447--REDEF
VX_SPC.B$.SKIP
     10455**DCL     10461--REDEF
VX_SPC.B$.VALUE
     10448**DCL     10454--REDEF
VX_SPC.SEG.NAME
     10410**DCL     10416--REDEF
VX_SPC.SEG.VALUE
     10417**DCL     10423--REDEF
VX_TARGET_COUNT
PL6.E3A0      #002=VXO$COMPACT File=VXO$OBJECT.:E05TSI                           WED 07/30/97 08:27 Page:226  
     10126**DCL     11247--IMP-SIZ 11249--IMP-SIZ 11287<<ASSIGN  11288>>ASSIGN  11289>>ASSIGN  11444<<ASSIGN
     11445>>ASSIGN  11446>>ASSIGN  11507<<ASSIGN  11508>>ASSIGN  11509>>ASSIGN
VX_TSX0_OVERLAY.H
     10185**DCL     10188--REDEF
WHERE$
     11158**DCL     11486<<ASSIGN  11489>>ASSIGN  11491>>ASSIGN  11491>>ASSIGN
