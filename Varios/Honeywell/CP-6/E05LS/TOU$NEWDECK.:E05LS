VERSION E05

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:1    
        1        1        /*M* TOU$NEWDECK     DEckfile Editor Routine NEW DECK Function */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P*  NAME:        TOU$NEWDECK
       12       12              AUTHOR:      Scott S. Sheppard
       13       13              PURPOSE:     DEckfile Editor Routine NEW DECK Function
       14       14              DESCRIPTION: This program is called when the NEW DECK function
       15       15                           is invoked by the  CP-6  deckfile  editor driver.
       16       16                           This  procedure  adds  a  new  object  deck  to a
       17       17                           specified catalog of an existing CP-6 deckfile.
       18       18              REFERENCE:   CP-6 Release C0M0
       19       19              LAST UPDATE: 10/27/83
       20       20        */
       21       21        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:2    
       22       22        /*F*  NAME:        TOU$NEWDECK
       23       23              DESCRIPTION: Procedure Nesting Hierarchy
       24       24
       25       25              TOU$NEWDECK: procedure ALTRET
       26       26              TOU$ND_FIND_CATALOG: entry ALTRET
       27       27              TOU$ND_SAVE_CATALOG_CONTROL: entry ALTRET
       28       28              TOU$ND_SAVE_OBJECT_DECK: entry ALTRET
       29       29              TOU$ND_SAVE_LAST_DECK#: entry ALTRET
       30       30
       31       31                ND_INIT_DUP: procedure
       32       32                ND_COMMAND_SETUP: procedure ALTRET
       33       33                ND_FIND_CATALOG: procedure ALTRET
       34       34                   ND_GET_CATALOG_TABLE_BUFFER: procedure ALTRET
       35       35                   ND_FETCH_CATALOG_TABLE: procedure ALTRET
       36       36                   ND_SEARCH_CATALOG_TABLE: procedure
       37       37                   ND_SELECT_CATALOG: procedure ALTRET
       38       38                      ND_SHOW_CATALOG_CHOICES: procedure
       39       39                      ND_GET_CATALOG_CHOICE: procedure (CATALOG_INDEX)
       40       40                         ND_CONVERT_CHOICE: procedure (C, L, V)
       41       41                         ND_VALIDATE_CHOICE: procedure (V, B)
       42       42                   ND_FREE_CATALOG_TABLE_BUFFER: procedure
       43       43                ND_CHECK_FOR_DECK: procedure ALTRET
       44       44                ND_ADD_DECK: procedure ALTRET
       45       45                ND_PROCESS_IFAD: procedure ALTRET
       46       46                   ND_CHECK_MATCH: procedure
       47       47                   ND_STORE_LAST_DECK#: procedure ALTRET
       48       48                   ND_STORE_OBJECT_DECK: procedure ALTRET
       49       49                   ND_STORE_CATALOG_CHANGES: procedure ALTRET
       50       50                ND_PROCESS_TEMP: procedure ALTRET
       51       51                ND_SAVE_CATALOG_CONTROL: procedure ALTRET
       52       52                ND_SAVE_CATALOG_ENTRY: procedure ALTRET
       53       53                ND_SAVE_OBJECT_DECK: procedure ALTRET
       54       54                   ND_SAVE_NEW_DECK: procedure ALTRET
       55       55                   ND_REPLACE_OLD_DECK: procedure ALTRET
       56       56                ND_SAVE_LAST_DECK#: procedure ALTRET
       57       57                ND_SAVE_LOG: procedure ALTRET
       58       58                ND_SETUP_PRINT: procedure
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:3    
       59       59                ND_PRINT_ADDED_DECK: procedure
       60       60        */
       61       61        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:4    
       62       62        TOU$NEWDECK: PROC ALTRET ;
       63       63
       64       64        /* Include Files */
       65       65
       66       66           %INCLUDE TOU_DEER_M ;
       67     1477           %INCLUDE TOU_RQSTS_E ;
       68     1552           %INCLUDE TO_PERR_C ;
       69     2137           %INCLUDE XU_MACRO_C ;
       70     5243
       71     5244        /* Macros */
       72     5245
       73     5246           %DUP (STCLASS = SYMREF) ;
       74     5389           %BCD_B (STCLASS = "BASED (DUP.BCD_V.PTR$)") ;
       75     5401           %BCD_CARD (STCLASS = SYMREF) ;
       76     5421           %BCD_KEY (STCLASS = SYMREF) ;
       77     5435           %BINARY_CARD (STCLASS = SYMREF) ;
       78     5462           %BINARY_KEY (STCLASS = SYMREF) ;
       79     5476           %CATALOG_DATA (STCLASS = SYMREF) ;
       80     5490           %CATALOG_ENTRY_KEY (STCLASS = SYMREF) ;
       81     5504           %CATALOG_KEY (STCLASS = SYMREF) ;
       82     5518           %CATALOG_SEARCH_KEY (STCLASS = SYMREF) ;
       83     5530           %DKEND (STCLASS = SYMREF) ;
       84     5554           %ID (STCLASS = SYMREF) ;
       85     5571           %LAST (STCLASS = SYMREF) ;
       86     5584           %MASTER_DATA (STCLASS = SYMREF) ;
       87     5598           %MASTER_ENTRY_KEY (STCLASS = SYMREF) ;
       88     5612           %OBJECT (STCLASS = SYMREF) ;
       89     5675           %OBJECT_SEARCH_KEY (STCLASS = "STATIC SYMDEF") ;
       90     5687           %OBJECT_KEY (STCLASS = SYMREF) ;
       91     5700           %OBJECT_REFLIST_KEY (STCLASS = SYMREF) ;
       92     5714           %OBJECT_REFLIST_DATA (STCLASS = SYMREF) ;
       93     5729           %RECORD (STCLASS = SYMREF) ;
       94     5756           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:5    
       95     5757        /* Variables */
       96     5758
       97     5759    1      DCL BCD#           UBIN WORD SYMREF ;
       98     5760    1      DCL BIN#           UBIN WORD SYMREF ;
       99     5761    1      DCL CUR#           UBIN WORD SYMREF ;
      100     5762    1      DCL FILE_EOF  UBIN WORD SYMREF ALIGNED;
      101     5763
      102     5764        /* External Entry Points */
      103     5765
      104     5766    1      DCL TOU$DU_SET_IFAD_FID            ENTRY ALTRET ;
      105     5767    1      DCL TOU$DU_OPEN_IFAD               ENTRY ALTRET ;
      106     5768    1      DCL TOU$DU_CLOSE_IFAD              ENTRY ALTRET ;
      107     5769
      108     5770    1      DCL TOU$DU_SET_DF_FID              ENTRY ALTRET ;
      109     5771    1      DCL TOU$DU_OPEN_DF                 ENTRY ALTRET ;
      110     5772    1      DCL TOU$DU_CLOSE_DF                ENTRY ALTRET ;
      111     5773
      112     5774    1      DCL TOU$DU_USER_WRITE              ENTRY ALTRET ;
      113     5775    1      DCL TOU$DU_USER_READ               ENTRY ALTRET ;
      114     5776    1      DCL TOU$DU_PRINTER_WRITE           ENTRY ALTRET ;
      115     5777    1      DCL TOU$DU_UPDATE_LOG              ENTRY ALTRET ;
      116     5778    1      DCL TOU$DU_GET_DATA_SEGMENT        ENTRY ALTRET ;
      117     5779    1      DCL TOU$DU_FREE_DATA_SEGMENT       ENTRY ALTRET ;
      118     5780    1      DCL TOU$DU_SET_PROMPT              ENTRY ALTRET ;
      119     5781    1      DCL TOU$DU_SET_EDIT_PROMPT         ENTRY ALTRET ;
      120     5782
      121     5783    1      DCL TOU$CHECKSUM                   ENTRY (4) ALTRET ;
      122     5784
      123     5785    1      DCL TOU$CLEAR_IFAD                 ENTRY ALTRET ;
      124     5786
      125     5787    1      DCL TOU$B_SHOW_DCBS                ENTRY ALTRET ;
      126     5788    1      DCL TOU$GET_CP6_OBJECT             ENTRY ALTRET ;
      127     5789    1      DCL TOU$GET_BINARY_CARDS           ENTRY ALTRET ;
      128     5790    1      DCL TOU$GET_BCD_CARDS              ENTRY ALTRET ;
      129     5791    1      DCL TOU$B_SET_OBJECT_KEY           ENTRY ALTRET ;
      130     5792    1      DCL TOU$B_PRINT_DECK_LINE          ENTRY ALTRET ;
      131     5793           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:6    
      132     5794        /* External Entry Points */
      133     5795
      134     5796    1      DCL TOU$DFU_DF_RD_MASTER_CONTROL   ENTRY ALTRET ;
      135     5797    1      DCL TOU$DFU_DF_RD_MASTER_ENTRY     ENTRY ALTRET ;
      136     5798    1      DCL TOU$DFU_DF_RD_CATALOG_CONTROL  ENTRY ALTRET ;
      137     5799    1      DCL TOU$DFU_DF_RD_OBJECT_REFLIST   ENTRY ALTRET ;
      138     5800    1      DCL TOU$DFU_DF_RD_LAST_DECK#       ENTRY ALTRET ;
      139     5801    1      DCL TOU$DFU_DF_RD_LOG              ENTRY ALTRET ;
      140     5802    1      DCL TOU$DFU_DF_DL_DECK             ENTRY ALTRET ;
      141     5803
      142     5804    1      DCL TOU$DFU_DF_CHECK_FOR_KEY       ENTRY ALTRET ;
      143     5805    1      DCL TOU$DFU_DF_WR_CATALOG_CONTROL  ENTRY ALTRET ;
      144     5806    1      DCL TOU$DFU_DF_WR_CATALOG_ENTRY    ENTRY ALTRET ;
      145     5807    1      DCL TOU$DFU_DF_WR_OBJECT           ENTRY ALTRET ;
      146     5808    1      DCL TOU$DFU_DF_WR_BINARY           ENTRY ALTRET ;
      147     5809    1      DCL TOU$DFU_DF_WR_BCD_CARDS        ENTRY ALTRET ;
      148     5810    1      DCL TOU$DFU_DF_WR_OBJECT_REFLIST   ENTRY ALTRET ;
      149     5811    1      DCL TOU$DFU_DF_WR_LAST_DECK#       ENTRY ALTRET ;
      150     5812    1      DCL TOU$DFU_DF_WR_LOG              ENTRY ALTRET ;
      151     5813    1      DCL TOU$DFU_OPEN_TEMP              ENTRY ALTRET ;
      152     5814    1      DCL TOU$DFU_CLOSE_TEMP             ENTRY ALTRET ;
      153     5815           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:7    
      154     5816        /* External Entry Points */
      155     5817
      156     5818    1      DCL TOU$DFU_TF_RD_CATALOG_CONTROL  ENTRY ALTRET ;
      157     5819    1      DCL TOU$DFU_TF_RD_CATALOG_ENTRY    ENTRY ALTRET ;
      158     5820    1      DCL TOU$DFU_TF_RD_OBJECT           ENTRY ALTRET ;
      159     5821    1      DCL TOU$DFU_TF_RD_BINARY           ENTRY ALTRET ;
      160     5822    1      DCL TOU$DFU_TF_RD_BCD_CARDS        ENTRY ALTRET ;
      161     5823    1      DCL TOU$DFU_TF_RD_LAST_DECK#       ENTRY ALTRET ;
      162     5824
      163     5825    1      DCL TOU$DFU_TF_WR_CATALOG_CONTROL  ENTRY ALTRET ;
      164     5826    1      DCL TOU$DFU_TF_WR_CATALOG_ENTRY    ENTRY ALTRET ;
      165     5827    1      DCL TOU$DFU_TF_WR_OBJECT           ENTRY ALTRET ;
      166     5828    1      DCL TOU$DFU_TF_WR_BINARY           ENTRY ALTRET ;
      167     5829    1      DCL TOU$DFU_TF_WR_BCD_CARDS        ENTRY ALTRET ;
      168     5830    1      DCL TOU$DFU_TF_WR_LAST_DECK#       ENTRY ALTRET ;
      169     5831           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:8    
      170     5832        /* ********************
      171     5833           ********************
      172     5834           **  Main Program  **
      173     5835           ********************
      174     5836           ******************** */
      175     5837
      176     5838    1      CALL ND_INIT_DUP ;
      177     5839    1      CALL ND_COMMAND_SETUP ALTRET (ERROR_RETURN) ;
      178     5840    1      CALL TOU$B_SHOW_DCBS ;
      179     5841    1      CALL TOU$DU_OPEN_DF ALTRET (ERROR_RETURN) ;
      180     5842    1      CALL ND_FIND_CATALOG ALTRET (ERROR_RETURN) ;
      181     5843    1      CALL ND_CHECK_FOR_DECK ALTRET (ERROR_RETURN) ;
      182     5844    1      CALL ND_ADD_DECK ALTRET (ERROR_RETURN) ;
      183     5845    1      CALL TOU$DU_CLOSE_DF ALTRET (ERROR_RETURN) ;
      184     5846
      185     5847        /* NORMAL_RETURN: */
      186     5848    1      DUP.MSG_CODE = %T$ND_SUCCESS;
      187     5849    1      CALL TOU$DU_USER_WRITE ;
      188     5850    1      RETURN ;
      189     5851
      190     5852    1   ERROR_RETURN:
      191     5853    1      CALL TOU$DU_CLOSE_DF ;
      192     5854    1      DUP.MSG_CODE = %T$ND_FAILURE;
      193     5855    1      CALL TOU$DU_USER_WRITE ;
      194     5856    1      RETURN ;
      195     5857
      196     5858        /* ********************
      197     5859           ********************
      198     5860           **  End Of  Main  **
      199     5861           ********************
      200     5862           ******************** */
      201     5863        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:9    
      202     5864        /*D*  NAME:        TOU$ND_FIND_CATALOG
      203     5865              ENTRY:
      204     5866              AUTHOR:      Scott S. Sheppard
      205     5867              PURPOSE:     Find Catalog Entry Point
      206     5868              INTERFACE:   ND_FIND_CATALOG
      207     5869              DESCRIPTION: This entry point is called to locate a catalog
      208     5870                           for the entered catalog key.
      209     5871        */
      210     5872
      211     5873    1   TOU$ND_FIND_CATALOG: ENTRY ALTRET ;
      212     5874
      213     5875    1      CALL ND_FIND_CATALOG ALTRET (TOU$ND_ALTRETURN) ;
      214     5876    1      RETURN ;
      215     5877
      216     5878        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:10   
      217     5879        /*D*  NAME:        TOU$ND_SAVE_CATALOG_CONTROL
      218     5880              ENTRY:
      219     5881              AUTHOR:      Scott S. Sheppard
      220     5882              PURPOSE:     Save Catalog Control Entry Point
      221     5883              INTERFACE:   ND_SAVE_CATALOG_CONTROL
      222     5884              DESCRIPTION: This entry point is called to save the catalog
      223     5885                           control record from the tempfile to the deckfile.
      224     5886        */
      225     5887
      226     5888    1   TOU$ND_SAVE_CATALOG_CONTROL: ENTRY ALTRET ;
      227     5889
      228     5890    1      CALL ND_SAVE_CATALOG_CONTROL ALTRET (TOU$ND_ALTRETURN) ;
      229     5891    1      RETURN ;
      230     5892
      231     5893        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:11   
      232     5894        /*D*  NAME:        TOU$ND_SAVE_OBJECT_DECK
      233     5895              ENTRY:
      234     5896              AUTHOR:      Scott S. Sheppard
      235     5897              PURPOSE:     Save Object Deck Entry Point
      236     5898              INTERFACE:   ND_SAVE_OBJECT_DECK
      237     5899              DESCRIPTION: This entry point is called to save an object deck
      238     5900                           from the tempfile to the deckfile.
      239     5901        */
      240     5902
      241     5903    1   TOU$ND_SAVE_OBJECT_DECK: ENTRY ALTRET ;
      242     5904
      243     5905    1      CALL ND_SAVE_OBJECT_DECK ALTRET (TOU$ND_ALTRETURN) ;
      244     5906    1      RETURN ;
      245     5907
      246     5908        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:12   
      247     5909        /*D*  NAME:        TOU$ND_SAVE_LAST_DECK#
      248     5910              ENTRY:
      249     5911              AUTHOR:      Scott S. Sheppard
      250     5912              PURPOSE:     Save Last Deck Number Entry Point
      251     5913              INTERFACE:   ND_SAVE_LAST_DECK#
      252     5914              DESCRIPTION: This entry point is called to save the last deck
      253     5915                           number from the tempfile to the deckfile.
      254     5916        */
      255     5917
      256     5918    1   TOU$ND_SAVE_LAST_DECK#: ENTRY ALTRET ;
      257     5919
      258     5920    1      CALL ND_SAVE_LAST_DECK# ALTRET (TOU$ND_ALTRETURN) ;
      259     5921    1      RETURN ;
      260     5922
      261     5923        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:13   
      262     5924        /*I*  NAME:        TOU$ND_ALTRETURN
      263     5925              LABEL:
      264     5926              AUTHOR:      Scott S. Sheppard
      265     5927              PURPOSE:     Alternate Return Label
      266     5928              DESCRIPTION: This label is used as the alternate return label
      267     5929                           for all of the entry points in TOU$NEWDECK.
      268     5930        */
      269     5931
      270     5932    1   TOU$ND_ALTRETURN:
      271     5933    1      ALTRETURN ;
      272     5934
      273     5935        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:14   
      274     5936        /*I*  NAME:        ND_INIT_DUP
      275     5937              AUTHOR:      Scott S. Sheppard
      276     5938              PURPOSE:     Initilization
      277     5939              INTERFACE:   None called.
      278     5940              INPUT:       Set of System Equates.
      279     5941              OUTPUT:      DUP - Deckfile Utility Parameter
      280     5942              DESCRIPTION: This procedure initializes variables to
      281     5943                           appropriate starting values.
      282     5944        */
      283     5945
      284     5946    1   ND_INIT_DUP: PROC ;
      285     5947
      286     5948        /* Code */
      287     5949
      288     5950    2      DUP.HDR_CODE = %H$NEWDECK ;
      289     5951    2      DUP.LINE_VFC = %SKIP_WRITE ;
      290     5952    2      DUP.FORCE_NEW_PAGE = %TRUE ;
      291     5953    2      DUP.IFAD.ME_ALLOWED = %FALSE ;
      292     5954    2      DUP.IFAD.ENTERED = %FALSE ;
      293     5955    2      DUP.DF.ENTERED = %FALSE ;
      294     5956    2      DUP.DF.OPEN_TYPE = %UPDATE_FILE ;
      295     5957    2      DUP.DF.REPORT_ERROR = %TRUE ;
      296     5958    2      DUP.DF.CLOSE_TYPE = %SAVE_FILE ;
      297     5959    2      RETURN ;
      298     5960
      299     5961    2   END ND_INIT_DUP ;
      300     5962        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:15   
      301     5963        /*I*  NAME:        ND_COMMAND_SETUP
      302     5964              AUTHOR:      Scott S. Sheppard
      303     5965              PURPOSE:     Sets up NEWDECK Command
      304     5966              INTERFACE:   TOU$DU_SET_IFAD_FID
      305     5967                           TOU$DU_SET_DF_FID
      306     5968              INPUT:       DUP.CMD$ - pointer to the parse control block
      307     5969              OUTPUT:      DUP.DF.HOLD_AREA
      308     5970                           DUP.DF.HOLD_AREA_LGTH
      309     5971                           DUP.IFAD.ENTERED
      310     5972                           DUP.DF.ENTERED
      311     5973                           CATALOG_SEARCH_KEY.DATA
      312     5974                           OBJECT_SEARCH_KEY.DATA
      313     5975              DESCRIPTION: This procedure sets up the NEWDECK command from the
      314     5976                           information  entered  by  the  user.  DUP.CMD$ is a
      315     5977                           pointer  to a   parse control block  that  contains
      316     5978                           the tokens entered by the user.
      317     5979                           COMMAND FORMS:
      318     5980              Case 1: ND <catalog key> <object key>
      319     5981              Case 2: ND <ifad fid> <catalog key> <object key>
      320     5982              Case 3: ND <catalog key> <object key> INTO <deckfile fid>
      321     5983              Case 4: ND <ifad fid> <catalog key> <object key> INTO <deckfile fid>
      322     5984        */
      323     5985
      324     5986    1   ND_COMMAND_SETUP: PROC ALTRET ;
      325     5987
      326     5988    2      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      327     5989    2      DCL OUTBLK$                    PTR ALIGNED ;
      328     5990           %PARSE$OUT (STCLASS = BASED) ;
      329     6035           %PARSE$SYM (STCLASS = BASED) ;
      330     6073           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:16   
      331     6074        /* Code */
      332     6075
      333     6076    3      DO OUTBLK# = 0 TO DUP.CMD$ -> OUT$BLK.NSUBLKS - 1 ;
      334     6077    3         OUTBLK$ = DUP.CMD$ -> OUT$BLK.SUBLK$(OUTBLK#) ;
      335     6078    4         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;
      336     6079    4            CASE (%IFAD_FID) ;
      337     6080    4               DUP.IFAD.ENTERED = %TRUE ;
      338     6081    4               DUP.HOLD_AREA = OUTBLK$ -> OUT$SYM.TEXT ;
      339     6082    4               DUP.HOLD_AREA_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;
      340     6083    4               CALL TOU$DU_SET_IFAD_FID ALTRET (ERROR) ;
      341     6084    4            CASE (%CATKEY) ;
      342     6085    4               CATALOG_SEARCH_KEY.DATA = OUTBLK$ -> OUT$SYM.TEXT ;
      343     6086    4            CASE (%OBJKEY) ;
      344     6087    4               OBJECT_SEARCH_KEY.DATA = OUTBLK$ -> OUT$SYM.TEXT ;
      345     6088    4            CASE (%DECKFILE_FID) ;
      346     6089    4               DUP.DF.ENTERED = %TRUE ;
      347     6090    4               DUP.HOLD_AREA = OUTBLK$ -> OUT$SYM.TEXT ;
      348     6091    4               DUP.HOLD_AREA_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;
      349     6092    4               CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;
      350     6093    4         END /* CASE */ ;
      351     6094    3      END /* DO */ ;
      352     6095
      353     6096    2      IF DUP.IFAD.ENTERED
      354     6097    2      THEN /* FID set from DEER command */ ;
      355     6098    2      ELSE CALL TOU$DU_SET_IFAD_FID ALTRET (ERROR) ;
      356     6099    2      IF DUP.DF.ENTERED
      357     6100    2      THEN /* FID set from DEER command */ ;
      358     6101    2      ELSE CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;
      359     6102    2      RETURN ;
      360     6103
      361     6104    2   ERROR:
      362     6105    2      ALTRETURN ;
      363     6106
      364     6107    2   END ND_COMMAND_SETUP ;
      365     6108        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:17   
      366     6109        /*I* NAME:         ND_FIND_CATALOG
      367     6110             AUTHOR:       Scott S. Sheppard
      368     6111             PURPOSE:      Sets Master Entry and Catalog Keys
      369     6112             INTERFACE:    ND_GET_CATALOG_TABLE      ND_SELECT_CATALOG
      370     6113                           ND_FETCH_CATALOG_TABLE    ND_FREE_CATALOG_TABLE_BUFFER
      371     6114                           ND_SEARCH_CATALOG_TABLE
      372     6115             DATA:         CATALOGS overlay structure
      373     6116                            COUNT - number of catalogs in the deckfile
      374     6117                            E - table entries (1 ... 25)
      375     6118                             DATA - ASCII parts of the catalog keys
      376     6119                             DECK# - binary deck numbers of the catalogs
      377     6120                            MATCHED - table of matching catalogs
      378     6121                             COUNT - number of matching catalogs
      379     6122                             CATX - indexes into E of matching catalogs
      380     6123             DESCRIPTION:  This  procedure finds  the appropriate catalog
      381     6124                           by  setting the  master entry  key and catalog
      382     6125                           key  to  correspond  to  the requested catalog
      383     6126                           (whose value is stored in CATALOG_SEARCH_KEY).
      384     6127                           The  procedure acquires  memory dynamically to
      385     6128                           be  used for  a table  of catalog entries. The
      386     6129                           table is then  initialized by reading the list
      387     6130                           of catalogs from  the deckfile. Next the table
      388     6131                           is searched  and a list of  all catalogs which
      389     6132                           matched  the catalog  search key  is recorded.
      390     6133                           The  proper catalog is  then selected from the
      391     6134                           list of matching catalogs. If only one catalog
      392     6135                           table entry matched the catalog search string,
      393     6136                           the one is used. If more than one matched, the
      394     6137                           user  is asked to  pick one. Of  course, if no
      395     6138                           catalog  table   entries  matched  the  search
      396     6139                           string, an error message is printed. After the
      397     6140                           proper catalog has  been selected, the catalog
      398     6141                           table  is no  longer needed  so its  memory is
      399     6142                           released back to the system.
      400     6143        */
      401     6144        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:18   
      402     6145    1   ND_FIND_CATALOG: PROC ALTRET ;
      403     6146
      404     6147    2      DCL 1 CATALOGS_V STATIC DALIGNED,
      405     6148    2            2 *                      UBIN WORD UNAL INIT (0),
      406     6149    2            2 PTR$                   PTR UNAL INIT (ADDR(NIL)) ;
      407     6150    2      DCL 1 CATALOGS BASED (CATALOGS_V.PTR$),
      408     6151    2            2 COUNT                  UBIN HALF HALIGNED,
      409     6152    2            2 E                      (0:25),
      410     6153    2              3 DATA                 CHAR (21) CALIGNED,
      411     6154    2              3 DECK#                UBIN HALF CALIGNED,
      412     6155    2            2 MATCHED,
      413     6156    2              3 COUNT                UBIN HALF HALIGNED,
      414     6157    2              3 CATX                 (0:25) UBIN HALF HALIGNED ;
      415     6158
      416     6159        /* Code */
      417     6160
      418     6161    2      CALL ND_GET_CATALOG_TABLE_BUFFER ALTRET (ERROR) ;
      419     6162    2      CALL ND_FETCH_CATALOG_TABLE ALTRET (ERROR) ;
      420     6163    2      CALL ND_SEARCH_CATALOG_TABLE ;
      421     6164    2      CALL ND_SELECT_CATALOG ALTRET (ERROR) ;
      422     6165    2      CALL ND_FREE_CATALOG_TABLE_BUFFER ;
      423     6166    2      RETURN ;
      424     6167
      425     6168    2   ERROR:
      426     6169    2      CALL ND_FREE_CATALOG_TABLE_BUFFER ;
      427     6170    2      ALTRETURN ;
      428     6171
      429     6172        /* END ND_FIND_CATALOG */
      430     6173        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:19   
      431     6174        /*I* NAME:         ND_GET_CATALOG_TABLE_BUFFER
      432     6175             AUTHOR:       Scott S. Sheppard
      433     6176             PURPOSE:      Acquires dynamic memory
      434     6177             INTERFACE:    TOU$DU_GET_DATA_SEGMENT
      435     6178             PARAMETERS:   None passed.
      436     6179             DATA:         CATALOGS_V - output
      437     6180                           CATALOGS - output
      438     6181                           DUP.NUM_WORDS - output
      439     6182                           DUP.DS - input / output
      440     6183             DESCRIPTION:  This procedure gets  enough memory space for a
      441     6184                           table  of catalog  entries. The  table is then
      442     6185                           initialized to zeroes.
      443     6186        */
      444     6187
      445     6188    2   ND_GET_CATALOG_TABLE_BUFFER: PROC ALTRET ;
      446     6189
      447     6190        /* Code */
      448     6191
      449     6192    3      DUP.NUM_WORDS = 164 ;
      450     6193    3      DUP.DS_V = CATALOGS_V ;
      451     6194    3      CALL TOU$DU_GET_DATA_SEGMENT ALTRET (ERROR) ;
      452     6195    3      CATALOGS_V = DUP.DS_V ;
      453     6196    3      CATALOGS = '0'B ;
      454     6197    3      RETURN ;
      455     6198
      456     6199    3   ERROR:
      457     6200    3      ALTRETURN ;
      458     6201
      459     6202    3   END ND_GET_CATALOG_TABLE_BUFFER ;
      460     6203        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:20   
      461     6204        /*I* NAME:         ND_FETCH_CATALOG_TABLE
      462     6205             AUTHOR:       Scott S. Sheppard
      463     6206             PURPOSE:      Sets up the Catalog Table
      464     6207             INTERFACE:    TOU$DFU_DF_RD_MASTER_CONTROL
      465     6208                           TOU$DFU_DF_RD_MASTER_ENTRY
      466     6209             PARAMETERS:   None passed.
      467     6210             DATA:         MASTER_DATA - input / output
      468     6211                           MASTER_ENTRY_KEY - input / output
      469     6212                           CATALOG_KEY - input / output
      470     6213                           CATALOGS - output
      471     6214             DESCRIPTION:  This  procedure loads  the catalog  table with
      472     6215                           current  information  from  the  deckfile. The
      473     6216                           master control record is read to determine how
      474     6217                           many  catalogs are  in the  deckfile. Then the
      475     6218                           catalog  key  of  each  catalog  is  read  and
      476     6219                           stored.
      477     6220        */
      478     6221
      479     6222    2   ND_FETCH_CATALOG_TABLE: PROC ALTRET ;
      480     6223
      481     6224    3      CALL TOU$DFU_DF_RD_MASTER_CONTROL ALTRET (ERROR) ;
      482     6225    3      MASTER_ENTRY_KEY.DECK# = MASTER_DATA.DECK# ;
      483     6226    4      DO MASTER_ENTRY_KEY.ENTRY# = 1 TO MASTER_DATA.ENTRY_COUNT ;
      484     6227    4         CALL TOU$DFU_DF_RD_MASTER_ENTRY ALTRET (ERROR) ;
      485     6228    4         CATALOGS.E.DATA(MASTER_ENTRY_KEY.ENTRY#) = CATALOG_KEY.DATA ;
      486     6229    4         CATALOGS.E.DECK#(MASTER_ENTRY_KEY.ENTRY#) = CATALOG_KEY.DECK# ;
      487     6230    4      END /* DO */ ;
      488     6231    3      CATALOGS.COUNT = MASTER_DATA.ENTRY_COUNT ;
      489     6232    3      RETURN ;
      490     6233
      491     6234    3   ERROR:
      492     6235    3      ALTRETURN ;
      493     6236
      494     6237    3   END ND_FETCH_CATALOG_TABLE ;
      495     6238        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:21   
      496     6239        /*I* NAME:         ND_SEARCH_CATALOG_TABLE
      497     6240             AUTHOR:       Scott S. Sheppard
      498     6241             PURPOSE:      finds matching catalogs
      499     6242             INTERFACE:    None called.
      500     6243             PARAMETERS:   None passed.
      501     6244             DATA:         CATALOGS - input / output
      502     6245                           CATALOG_SEARCH_KEY - input
      503     6246             DESCRIPTION:  This procedure compares the catalog search key
      504     6247                           to  all  entries  of  the  catalog  table  and
      505     6248                           creates a list of matching entries.
      506     6249        */
      507     6250
      508     6251    2   ND_SEARCH_CATALOG_TABLE: PROC ;
      509     6252
      510     6253    3      DCL I UBIN HALF HALIGNED ;
      511     6254
      512     6255        /* Code */
      513     6256
      514     6257    3      CATALOGS.MATCHED.COUNT = 0 ;
      515     6258    4      DO I = 1 TO CATALOGS.COUNT ;
      516     6259    4         IF CATALOGS.E.DATA(I) = CATALOG_SEARCH_KEY.DATA
      517     6260    5         THEN DO ;
      518     6261    5                 CATALOGS.MATCHED.COUNT = CATALOGS.MATCHED.COUNT + 1 ;
      519     6262    5                 CATALOGS.MATCHED.CATX(CATALOGS.MATCHED.COUNT) = I ;
      520     6263    5              END /* THEN */ ;
      521     6264    4         ELSE /* Do nothing. */ ;
      522     6265    4      END /* DO */ ;
      523     6266    3      RETURN ;
      524     6267
      525     6268    3   END ND_SEARCH_CATALOG_TABLE ;
      526     6269        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:22   
      527     6270        /*I* NAME:         ND_SELECT_CATALOG
      528     6271             AUTHOR:       Scott S. Sheppard
      529     6272             PURPOSE:      Sets up Master Entry and Catalog keys
      530     6273             INTERFACE:    ND_SHOW_CATALOG_CHOICES
      531     6274                           ND_GET_CATALOG_CHOICE
      532     6275                           TOU$DU_USER_WRITE
      533     6276             PARAMETERS:   None passed.
      534     6277             DATA:         CATALOGS - input
      535     6278                           MASTER_ENTRY_KEY
      536     6279                           CATALOG_KEY
      537     6280             DESCRIPTION:  CATALOG.MATCHED.COUNT  contains the  number of
      538     6281                           catalogs in the  deckfile whose ASCII portions
      539     6282                           of  their  catalog  keys  matched  the catalog
      540     6283                           search  string. Action is  taken to select the
      541     6284                           catalog based on this count. If the count is 0
      542     6285                           (NONE),  the catalog search  key specified did
      543     6286                           not match any entries in the table and is thus
      544     6287                           not  a legal catalog  to specify as  part of a
      545     6288                           DEER command. If the  count is 1 (UNIQUE), the
      546     6289                           catalog key  can be set directly  from the one
      547     6290                           entry. When the count is 2 or more (ELSE), the
      548     6291                           user  must be  prompted to  determine which of
      549     6292                           the  catalog table entries  should be selected
      550     6293                           as the catalog to be used.
      551     6294        */
      552     6295        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:23   
      553     6296    2   ND_SELECT_CATALOG: PROC ALTRET ;
      554     6297
      555     6298    3      DCL INX UBIN HALF HALIGNED ;
      556     6299
      557     6300        /* Code */
      558     6301
      559     6302    4      DO CASE (CATALOGS.MATCHED.COUNT) ;
      560     6303    4         CASE (0) ;
      561     6304    4            DUP.MSG_CODE = %E$NFC_NO_CAT_IN_DF ;
      562     6305    4            CATALOG_KEY.DATA = CATALOG_SEARCH_KEY.DATA ;
      563     6306    4            CALL TOU$DU_USER_WRITE ;
      564     6307    4            ALTRETURN ;
      565     6308    4         CASE (1) ;
      566     6309    4            MASTER_ENTRY_KEY.ENTRY# = CATALOGS.MATCHED.CATX(1) ;
      567     6310    4            CATALOG_KEY.DATA = CATALOGS.E.DATA(CATALOGS.MATCHED.CATX(1)) ;
      568     6311    4            CATALOG_KEY.DECK# = CATALOGS.E.DECK#(CATALOGS.MATCHED.CATX(1)) ;
      569     6312    4            RETURN ;
      570     6313    4         CASE (ELSE) ;
      571     6314    4            CALL ND_SHOW_CATALOG_CHOICES ;
      572     6315    4            CALL ND_GET_CATALOG_CHOICE (INX) ;
      573     6316    4            MASTER_ENTRY_KEY.ENTRY# = INX ;
      574     6317    4            CATALOG_KEY.DATA = CATALOGS.E.DATA(INX) ;
      575     6318    4            CATALOG_KEY.DECK# = CATALOGS.E.DECK#(INX) ;
      576     6319    4            RETURN ;
      577     6320    4      END /* CASE */ ;
      578     6321
      579     6322        /* END ND_SELECT_CATALOG */
      580     6323        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:24   
      581     6324        /*I* NAME:         ND_SHOW_CATALOG_CHOICES
      582     6325             AUTHOR:       Scott S. Sheppard
      583     6326             PURPOSE:      lists possible catalogs
      584     6327             INTERFACE:    TOU$DU_USER_WRITE
      585     6328             PARAMETERS:   None passed.
      586     6329             DATA:         DUP.MSG_CODE - output
      587     6330                           CUR# - output
      588     6331                           CATALOG_KEY.DATA - output (display purposes)
      589     6332                           CATALOG_SEARCH_KEY - input
      590     6333                           MASTER_ENTRY_KEY - output (display purposes)
      591     6334             DESCRIPTION:  This  procedure  lists  the  number  of master
      592     6335                           entries which correspond to the catalog search
      593     6336                           key. The user is then asked to pick one.
      594     6337                            Example:
      595     6338                              ???DELCAT CATA.ITR.DSC500
      596     6339                              There  are 2 catalogs  in the deckfile with
      597     6340                           key CATA.ITR.DSC500
      598     6341                                 Master Entry Number: 7
      599     6342                                 Master Entry Number: 8
      600     6343                              Input  the Master Entry  number to identify
      601     6344                           which catalog to
      602     6345                              delete. (See DEER Printout for details)
      603     6346                              Master Entry Number:
      604     6347        */
      605     6348        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:25   
      606     6349    3   ND_SHOW_CATALOG_CHOICES: PROC ;
      607     6350
      608     6351    4      DCL I UBIN WORD ALIGNED ;
      609     6352
      610     6353        /* Code */
      611     6354
      612     6355    4      DUP.MSG_CODE = %T$ND_MULT_CATALOGS ;
      613     6356    4      CUR# = CATALOGS.MATCHED.COUNT - 1 ;
      614     6357    4      CATALOG_KEY.DATA = CATALOG_SEARCH_KEY.DATA ;
      615     6358    4      CALL TOU$DU_USER_WRITE ;
      616     6359
      617     6360    4      DUP.MSG_CODE = %T$ND_CATALOG_CHOICE ;
      618     6361    5      DO I = 1 TO CATALOGS.MATCHED.COUNT ;
      619     6362    5         MASTER_ENTRY_KEY.ENTRY# = CATALOGS.MATCHED.CATX(I) ;
      620     6363    5         CALL TOU$DU_USER_WRITE ;
      621     6364    5      END /* DO */ ;
      622     6365
      623     6366    4      DUP.MSG_CODE = %T$ND_CATALOG_DIRECTIONS ;
      624     6367    4      CALL TOU$DU_USER_WRITE ;
      625     6368    4      RETURN ;
      626     6369
      627     6370    4   END ND_SHOW_CATALOG_CHOICES ;
      628     6371        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:26   
      629     6372        /*I* NAME:         GET_CATALOG_CHOICE
      630     6373             AUTHOR:       Scott S. Sheppard
      631     6374             PURPOSE:      Accepts and Validates User's Response
      632     6375             INTERFACE:    TOU$DU_SET_PROMPT
      633     6376                           TOU$DU_USER_READ
      634     6377                           TOU$DU_SET_EDIT_PROMPT
      635     6378                           ND_CONVERT_CHOICE
      636     6379                           ND_VALIDATE_CHOICE
      637     6380             PARAMETERS:   INX - output
      638     6381             DATA:         DUP.HOLD_AREA - output
      639     6382                           DUP.HOLD_AREA_LGTH - output
      640     6383                           DUP.RESPONSE - input
      641     6384                           DUP.RESPONSE_LGTH - input / output
      642     6385             DESCRIPTION:  This procedure accepts the master entry number
      643     6386                           of the catalog to be used. The user enters the
      644     6387                           ASCII  number of  the master  entry. The ASCII
      645     6388                           string  entered by the  user is then converted
      646     6389                           to an  integer. If the integer  specified is a
      647     6390                           valid choice, the procedure returns. Otherwise
      648     6391                           an  error message  is printed  an the  user is
      649     6392                           forced to re-enter the master entry number.
      650     6393        */
      651     6394        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:27   
      652     6395    3   ND_GET_CATALOG_CHOICE: PROC (INX) ;
      653     6396
      654     6397    4      DCL INX                        UBIN HALF HALIGNED ;
      655     6398    4      DCL VALID_CHOICE               BIT (1) ALIGNED ;
      656     6399
      657     6400        /* Code */
      658     6401
      659     6402    4      DUP.HOLD_AREA = 'Master Entry number: ' ;
      660     6403    4      DUP.HOLD_AREA_LGTH = 21 ;
      661     6404    4      CALL TOU$DU_SET_PROMPT ;
      662     6405
      663     6406    5      DO UNTIL (VALID_CHOICE) ;
      664     6407    5         DUP.RESPONSE_LGTH = 3 ;
      665     6408    5         CALL TOU$DU_USER_READ ;
      666     6409    5         CALL ND_CONVERT_CHOICE (SUBSTR(DUP.RESPONSE,0,3),DUP.RESPONSE_LGTH,INX) ;
      667     6410    5         CALL ND_VALIDATE_CHOICE (INX, VALID_CHOICE) ;
      668     6411    5      END /* UNTIL */ ;
      669     6412
      670     6413    4      CALL TOU$DU_SET_EDIT_PROMPT ;
      671     6414    4      RETURN ;
      672     6415
      673     6416        /* END ND_GET_CATALOG_CHOICE */
      674     6417        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:28   
      675     6418        /*I* NAME:         ND_CONVERT_CHOICE
      676     6419             AUTHOR:       Scott S. Sheppard
      677     6420             PURPOSE:      Changes User Input to integer
      678     6421             INTERFACE:    CHARBIN
      679     6422             PARAMETERS:   CHOICE - input
      680     6423                           LGTH - input / output
      681     6424                           VALUE - output
      682     6425             DATA:         No external data accessed.
      683     6426             DESCRIPTION:  This procedure converts  the 3 character input
      684     6427                           to  an integer.   Leading and  trailing blanks
      685     6428                           are  stripped. The  procedure uses  CHARBIN to
      686     6429                           convert  all  digits  entered  to  the  proper
      687     6430                           value.  Any  non-digit  characters encountered
      688     6431                           cause  this procedure to  return the value 999
      689     6432                           which is known to  be invalid.  Example of the
      690     6433                           algorithm to convert legal input:
      691     6434                             Input  Process
      692     6435                              '123' get the '1', and convert to 1
      693     6436                                    VALUE = (0 * 10) + 1 = 1
      694     6437                                    get the '2', and convert to 2
      695     6438                                    VALUE = (1 * 10) + 2 = 12
      696     6439                                    get the '3', and convert to 3
      697     6440                                    VALUE = (12 * 10) + 3 = 123
      698     6441        */
      699     6442
      700     6443    4   ND_CONVERT_CHOICE: PROC (CHOICE, LGTH, VALUE) ;
      701     6444
      702     6445    5      DCL CHOICE      CHAR (3) CALIGNED ;
      703     6446    5      DCL CHOICE_     (0:2) REDEF CHOICE CHAR (1) CALIGNED ;
      704     6447    5      DCL LGTH        UBIN WORD ALIGNED ;
      705     6448    5      DCL VALUE       UBIN HALF HALIGNED ;
      706     6449    5      DCL I           UBIN HALF HALIGNED ;
      707     6450    5      DCL DIGIT_VALUE UBIN WORD ALIGNED ;
      708     6451           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:29   
      709     6452        /* Code */
      710     6453
      711     6454           /* Skip trailing blanks */
      712     6455    6      DO WHILE (CHOICE_(LGTH - 1) = ' ' & LGTH > 0) ;
      713     6456    6         LGTH = LGTH - 1 ;
      714     6457    6      END /* WHILE */ ;
      715     6458
      716     6459           /* Skip leading blanks */
      717     6460    5      I = 0 ;
      718     6461    6      DO WHILE (CHOICE_(I) = ' ' & I < LGTH) ;
      719     6462    6         I = I + 1 ;
      720     6463    6      END /* WHILE */ ;
      721     6464
      722     6465           /* Step through, converting 1 character at a time */
      723     6466    5      VALUE = 0 ;
      724     6467    6      DO WHILE (I < LGTH) ;
      725     6468    7         DO SELECT (CHOICE_(I)) ;
      726     6469    7            SELECT ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') ;
      727     6470    7            CALL CHARBIN (DIGIT_VALUE, CHOICE_(I)) ;
      728     6471    7            VALUE = (VALUE * 10) + DIGIT_VALUE ;
      729     6472    7            SELECT (ELSE) ;
      730     6473    7         VALUE = 999 ;
      731     6474    7         I = LGTH ;
      732     6475    7         END /* SELECT */ ;
      733     6476    6      I = I + 1 ;
      734     6477    6      END /* WHILE */ ;
      735     6478    5      RETURN ;
      736     6479
      737     6480    5   END ND_CONVERT_CHOICE ;
      738     6481        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:30   
      739     6482        /*I* NAME:         ND_VALIDATE_CHOICE
      740     6483             AUTHOR:       Scott S. Sheppard
      741     6484             PURPOSE:      Validates Master Entry Number
      742     6485             INTERFACE:    TOU$DU_USER_WRITE
      743     6486             PARAMETERS:   INX - input
      744     6487                           VALID_CHOICE - output
      745     6488             DATA:         CATALOGS.MATCHED.COUNT - input
      746     6489                           CATALOGS.MATCHED.CATX - input
      747     6490             DESCRIPTION:  This  procedure that  the master  entry number
      748     6491                           entered  by  the  user  represents  one of the
      749     6492                           catalogs which matched the catalog search key.
      750     6493        */
      751     6494
      752     6495    4   ND_VALIDATE_CHOICE: PROC (INX, VALID_CHOICE) ;
      753     6496
      754     6497    5      DCL INX                        UBIN HALF HALIGNED ;
      755     6498    5      DCL VALID_CHOICE               BIT (1) ALIGNED ;
      756     6499    5      DCL I                          UBIN WORD ALIGNED ;
      757     6500
      758     6501    5      VALID_CHOICE = %FALSE ;
      759     6502    6      DO I = 1 TO CATALOGS.MATCHED.COUNT ;
      760     6503    6         IF INX = CATALOGS.MATCHED.CATX(I)
      761     6504    6         THEN VALID_CHOICE = %TRUE ;
      762     6505    6         ELSE /* Do Nothing */ ;
      763     6506    6      END /* DO */ ;
      764     6507    5      IF VALID_CHOICE
      765     6508    5      THEN /* Do Nothing */ ;
      766     6509    6      ELSE DO ;
      767     6510    6              DUP.MSG_CODE = %E$NGCC_BAD_CHOICE ;
      768     6511    6              CALL TOU$DU_USER_WRITE ;
      769     6512    6           END /* ELSE */ ;
      770     6513    5      RETURN ;
      771     6514
      772     6515    5   END ND_VALIDATE_CHOICE ;
      773     6516    4   END ND_GET_CATALOG_CHOICE ;
      774     6517    3   END ND_SELECT_CATALOG ;
      775     6518        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:31   
      776     6519        /*I* NAME:         ND_FREE_CATALOG_TABLE_BUFFER
      777     6520             AUTHOR:       Scott S. Sheppard
      778     6521             PURPOSE:      Releases memory
      779     6522             INTERFACE:    TOU$DU_FREE_DATA_SEGMENT
      780     6523             PARAMETERS:   None passed.
      781     6524             DATA:         CATALOGS_V - input / output
      782     6525                           DUP.DS_V - output
      783     6526             DESCRIPTION:  Whether  normal or  abnormal termination  of a
      784     6527                           find  catalog  occurs,   the  memory  for  the
      785     6528                           catalog table is released back to CP-6.
      786     6529        */
      787     6530
      788     6531    2   ND_FREE_CATALOG_TABLE_BUFFER: PROC ;
      789     6532
      790     6533        /* Code */
      791     6534
      792     6535    3      DUP.DS_V = CATALOGS_V ;
      793     6536    3      CALL TOU$DU_FREE_DATA_SEGMENT ;
      794     6537    3      CATALOGS_V = '0'B ;
      795     6538    3      RETURN ;
      796     6539
      797     6540    3   END ND_FREE_CATALOG_TABLE_BUFFER ;
      798     6541    2   END ND_FIND_CATALOG ;
      799     6542        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:32   
      800     6543        /*I*  NAME:        ND_CHECK_FOR_DECK
      801     6544              AUTHOR:      Scott S. Sheppard
      802     6545              PURPOSE:     Locates Object Deck
      803     6546              INTERFACE:   TOU$DFU_CHECK_FOR_KEY
      804     6547                           TOU$DFU_DF_RD_OBJECT_REFLIST
      805     6548                           TOU$DU_USER_WRITE
      806     6549              INPUT:       OBJECT_SEARCH_KEY
      807     6550                           OBJECT_REFLIST_DATA
      808     6551              OUTPUT:      OBJECT_REFLIST_DATA
      809     6552                           MASTER_ENTRY_KEY.ENTRY#
      810     6553              DESCRIPTION: This procedure checks to see if the object deck
      811     6554                           exists in the deckfile.    If the deckfile does
      812     6555                           not exist in the deckfile,   it may be added to
      813     6556                           the requested catalog.  If the object deck does
      814     6557                           exist,  the reference  list must be  checked to
      815     6558                           ensure that the object deck is not part of  the
      816     6559                           specified catalog.  If the object deck is not a
      817     6560                           part of the catalog, it may be added.
      818     6561        */
      819     6562        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:33   
      820     6563    1   ND_CHECK_FOR_DECK: PROC ALTRET ;
      821     6564
      822     6565    2      DCL I                  UBIN HALF HALIGNED ;
      823     6566    2      DCL REFERENCE_FOUND    BIT (1) CALIGNED ;
      824     6567
      825     6568        /* Code */
      826     6569
      827     6570    2      OBJECT_KEY.DATA = OBJECT_SEARCH_KEY.DATA ;
      828     6571    2      CALL TOU$DFU_DF_CHECK_FOR_KEY ALTRET (NOT_IN_DECKFILE) ;
      829     6572
      830     6573        /* IN_DECKFILE: */
      831     6574    2      OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;
      832     6575    2      CALL TOU$DFU_DF_RD_OBJECT_REFLIST ALTRET (ERROR) ;
      833     6576
      834     6577    2      REFERENCE_FOUND = %FALSE ;
      835     6578    2      I = 0 ;
      836     6579    3      DO UNTIL (REFERENCE_FOUND OR I = OBJECT_REFLIST_DATA.NUM_REFS) ;
      837     6580    3         IF OBJECT_REFLIST_DATA.REFS.ME#(I) = MASTER_ENTRY_KEY.ENTRY#
      838     6581    3         THEN REFERENCE_FOUND = %TRUE ;
      839     6582    3         ELSE I = I + 1 ;
      840     6583    3      END /* UNTIL */ ;
      841     6584
      842     6585    2      IF REFERENCE_FOUND
      843     6586    3      THEN DO ;
      844     6587    3              DUP.MSG_CODE = %E$NCFD_IN_CATALOG ;
      845     6588    3              CALL TOU$DU_USER_WRITE ;
      846     6589    3   ERROR:
      847     6590    3              ALTRETURN ;
      848     6591    3           END /* THEN */ ;
      849     6592    2      ELSE /* in deckfile, but not in the specified catalog */ ;
      850     6593
      851     6594    2   NOT_IN_DECKFILE:
      852     6595    2      RETURN ;
      853     6596
      854     6597    2   END ND_CHECK_FOR_DECK ;
      855     6598        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:34   
      856     6599        /*I*  NAME:        ND_ADD_DECK
      857     6600              AUTHOR:      Scott S. Sheppard
      858     6601              PURPOSE:     Processes IFAD -> temp -> DECKFILE
      859     6602              INTERFACE:   ND_PROCESS_IFAD
      860     6603                           ND_PROCESS_TEMP
      861     6604                           TOU$DU_OPEN_IFAD
      862     6605                           TOU$DU_CLOSE_IFAD
      863     6606                           TOU$CLEAR_IFAD
      864     6607                           TOU$DFU_OPEN_TEMP
      865     6608                           TOU$DFU_CLOSE_TEMP
      866     6609              INPUT:       IFAD input source
      867     6610                           DEER temporary file
      868     6611              OUTPUT:      DEER temporary file
      869     6612                           DECKFILE
      870     6613                           DUP.TEMP.OPEN_TYPE
      871     6614                           DUP.TEMP.CLOSE_TYPE
      872     6615              DESCRIPTION: This procedure adds a deck to a deckfile by procssing
      873     6616                           an IFAD input source and logging all the records that
      874     6617                           must be updated into a temporary file.   If no errors
      875     6618                           occur,  the  deckfile  is  modified  to  contain  the
      876     6619                           updated records from the temporary file.
      877     6620        */
      878     6621        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:35   
      879     6622    1   ND_ADD_DECK: PROC ALTRET ;
      880     6623
      881     6624        /* Code */
      882     6625
      883     6626    2      DUP.TEMP.OPEN_TYPE = %CREATE_FILE ;
      884     6627    2      CALL TOU$DFU_OPEN_TEMP ALTRET (ERROR) ;
      885     6628    2      CALL TOU$DU_OPEN_IFAD ALTRET (ERROR) ;
      886     6629    2      CALL TOU$CLEAR_IFAD ;
      887     6630    2      CALL ND_PROCESS_IFAD ALTRET (ERROR) ;
      888     6631    2      CALL TOU$DU_CLOSE_IFAD ALTRET (ERROR) ;
      889     6632    2      DUP.TEMP.CLOSE_TYPE = %SAVE_FILE ;
      890     6633    2      CALL TOU$DFU_CLOSE_TEMP ALTRET (ERROR) ;
      891     6634
      892     6635    2      DUP.TEMP.OPEN_TYPE = %READ_FILE ;
      893     6636    2      CALL TOU$DFU_OPEN_TEMP ALTRET (ERROR) ;
      894     6637    2      CALL ND_PROCESS_TEMP ALTRET (ERROR) ;
      895     6638    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;
      896     6639    2      CALL TOU$DFU_CLOSE_TEMP ALTRET (ERROR) ;
      897     6640    2      RETURN ;
      898     6641
      899     6642    2   ERROR:
      900     6643    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;
      901     6644    2      CALL TOU$DFU_CLOSE_TEMP ;
      902     6645    2      CALL TOU$DU_CLOSE_IFAD ;
      903     6646    2      ALTRETURN ;
      904     6647
      905     6648    2   END ND_ADD_DECK ;
      906     6649        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:36   
      907     6650        /*I*  NAME:        ND_PROCESS_IFAD
      908     6651              AUTHOR:      Scott S. Sheppard
      909     6652              PURPOSE:     Processes IFAD
      910     6653              INTERFACE:   TOU$GET_CP6_OBJECT
      911     6654                           TOU$GET_BINARY_CARDS
      912     6655                           TOU$GET_BCD_CARDS
      913     6656                           TOU$B_SET_OBJECT_KEY
      914     6657                           ND_CHECK_MATCH
      915     6658                           ND_STORE_LAST_DECK#
      916     6659                           ND_STORE_OBJECT_DECK
      917     6660                           ND_STORE_CATALOG_CHANGES
      918     6661              INPUT:       IFAD input source
      919     6662              OUTPUT:      DEER temporary file
      920     6663              DESCRIPTION: This procedure wades through the IFAD input source
      921     6664                           locates the $object card for the deck to be added.
      922     6665                           It then calls routines to save the updates to  the
      923     6666                           deckfile in the temporary file.
      924     6667        */
      925     6668        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:37   
      926     6669    1   ND_PROCESS_IFAD: PROC ALTRET ;
      927     6670
      928     6671    2      DCL MATCHING_OBJECT      BIT (1) CALIGNED ;
      929     6672
      930     6673        /* Code */
      931     6674
      932     6675    2      FILE_EOF = 0 ;
      933     6676    3      DO UNTIL (MATCHING_OBJECT OR FILE_EOF = 2) ;
      934     6677    3         CALL TOU$GET_CP6_OBJECT ALTRET (ERROR) ;
      935     6678    3         IF FILE_EOF < 2
      936     6679    4         THEN DO ;
      937     6680    4                 CALL TOU$GET_BINARY_CARDS ALTRET (ERROR) ;
      938     6681    4                 CALL TOU$GET_BCD_CARDS ALTRET (ERROR) ;
      939     6682    4                 CALL TOU$B_SET_OBJECT_KEY ALTRET (ERROR) ;
      940     6683    4                 CALL ND_CHECK_MATCH (MATCHING_OBJECT) ;
      941     6684    4              END /* THEN */ ;
      942     6685    3         ELSE /* EOF before $OBJECT could be found. */ ;
      943     6686    3      END /* UNTIL */ ;
      944     6687
      945     6688    2      IF MATCHING_OBJECT
      946     6689    3      THEN DO ;
      947     6690    3              CALL ND_STORE_LAST_DECK# ALTRET (ERROR) ;
      948     6691    3              CALL ND_STORE_OBJECT_DECK ALTRET (ERROR) ;
      949     6692    3              CALL ND_STORE_CATALOG_CHANGES ALTRET (ERROR) ;
      950     6693    3              RETURN ;
      951     6694    3           END /* THEN */ ;
      952     6695    3      ELSE DO ;
      953     6696    3              DUP.MSG_CODE = %E$NPI_NO_OBJECT ;
      954     6697    3              OBJECT_KEY.DATA = OBJECT_SEARCH_KEY.DATA ;
      955     6698    3              CALL TOU$DU_USER_WRITE ;
      956     6699    3   ERROR:
      957     6700    3              ALTRETURN ;
      958     6701    3           END /* ELSE */ ;
      959     6702
      960     6703        /* END ND_PROCESS_IFAD */
      961     6704        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:38   
      962     6705        /*I*  NAME:        ND_CHECK_MATCH
      963     6706              AUTHOR:      Scott S. Sheppard
      964     6707              PURPOSE:     Checks $Object Card
      965     6708              INTERFACE:   None called.
      966     6709              INPUT:       OBJECT.BCD.LIBRARY
      967     6710                           OBJECT_KEY
      968     6711                           OBJECT_SEARCH_KEY
      969     6712              OUTPUT:      MATCH_FOUND - output parameter
      970     6713              DESCRIPTION: This procedure determines if the current $Object
      971     6714                           card is the $Object card of the deck to be added
      972     6715                           by comparing the key of the current object   and
      973     6716                           the key of the object to add.
      974     6717        */
      975     6718
      976     6719    2   ND_CHECK_MATCH: PROC (MATCH_FOUND) ;
      977     6720
      978     6721    3      DCL MATCH_FOUND       BIT (1) CALIGNED ;
      979     6722
      980     6723        /* Code */
      981     6724
      982     6725    3      IF OBJECT_KEY.DATA = OBJECT_SEARCH_KEY.DATA
      983     6726    3      THEN MATCH_FOUND = %TRUE ;
      984     6727    3      ELSE MATCH_FOUND = %FALSE ;
      985     6728    3      RETURN ;
      986     6729
      987     6730    3   END ND_CHECK_MATCH ;
      988     6731        %EJECT;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:39   
      989     6732        /*I*  NAME:        ND_STORE_LAST_DECK#
      990     6733              AUTHOR:      Scott S. Sheppard
      991     6734              PURPOSE:     Saves New Last Deck Number
      992     6735              INTERFACE:   TOU$DFU_DF_RD_LAST_DECK#
      993     6736                           TOU$DFU_TF_WR_LAST_DECK#
      994     6737              INPUT:       LAST_DECK#
      995     6738              OUTPUT:      LAST_DECK#
      996     6739              DESCRIPTION: This procedure  gets the  last deck  number that is
      997     6740                           currently being used in the deckfile and increments
      998     6741                           this number by 1  (for the new deck)  and saves the
      999     6742                           new last deck number in the temporary file.
     1000     6743        */
     1001     6744
     1002     6745    2   ND_STORE_LAST_DECK#: PROC ALTRET ;
     1003     6746
     1004     6747        /* Code */
     1005     6748
     1006     6749    3      CALL TOU$DFU_DF_RD_LAST_DECK# ALTRET (ERROR) ;
     1007     6750    3      LAST.DECK# = LAST.DECK# + 1 ;
     1008     6751    3      CALL TOU$DFU_TF_WR_LAST_DECK# ALTRET (ERROR) ;
     1009     6752    3      RETURN ;
     1010     6753
     1011     6754    3   ERROR:
     1012     6755    3      ALTRETURN ;
     1013     6756
     1014     6757    3   END ND_STORE_LAST_DECK# ;
     1015     6758        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:40   
     1016     6759        /*I*  NAME:        ND_STORE_OBJECT_DECK
     1017     6760              AUTHORS:     Dave Augustine
     1018     6761                           Scott Sheppard
     1019     6762              PURPOSE:     Saves an Object Deck
     1020     6763              INTERFACE:   TOU$CHECKSUM
     1021     6764                           TOU$DFU_TF_WR_OBJECT
     1022     6765                           TOU$DFU_TF_WR_BINARY
     1023     6766                           TOU$DFU_TF_WR_BCD_CARDS
     1024     6767              INPUT:       OBJECT_SEARCH_KEY
     1025     6768                           LAST.DECK#
     1026     6769                           OBJECT
     1027     6770              OUTPUT:      OBJECT_KEY
     1028     6771                           OBJECT
     1029     6772                           BCD_KEY
     1030     6773                           BIN#
     1031     6774                           BCD#
     1032     6775              DESCRIPTION: This procedure saves all of the records for the
     1033     6776                           object deck,($object, binary, patches, $dkend),
     1034     6777                           in the temporary file.
     1035     6778        */
     1036     6779        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:41   
     1037     6780    2   ND_STORE_OBJECT_DECK: PROC ALTRET ;
     1038     6781
     1039     6782        /* Code */
     1040     6783
     1041     6784    3      OBJECT_KEY.DATA = OBJECT_SEARCH_KEY.DATA ;
     1042     6785    3      OBJECT.DECK# = LAST.DECK#;
     1043     6786    3      OBJECT.BINARY_COUNT = BIN# ;
     1044     6787    3      OBJECT.TOTAL_COUNT = BIN# + BCD# + 1;
     1045     6788    3      CALL TOU$CHECKSUM (0,
     1046     6789    3              ADDR (OBJECT),
     1047     6790    3              23,
     1048     6791    3              OBJECT.CHECKSUM);
     1049     6792
     1050     6793    3      CALL TOU$DFU_TF_WR_OBJECT ALTRET (ERROR) ;
     1051     6794
     1052     6795    3      BINARY_KEY.DECK# = OBJECT.DECK# ;
     1053     6796    3      CALL TOU$DFU_TF_WR_BINARY ALTRET (ERROR) ;
     1054     6797
     1055     6798    3      BCD_KEY.DECK# = OBJECT.DECK# ;
     1056     6799    3      CALL TOU$DFU_TF_WR_BCD_CARDS ALTRET (ERROR) ;
     1057     6800    3      RETURN ;
     1058     6801
     1059     6802    3   ERROR:
     1060     6803    3      ALTRETURN ;
     1061     6804
     1062     6805    3   END ND_STORE_OBJECT_DECK ;
     1063     6806        %EJECT;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:42   
     1064     6807        /*I*  NAME:        ND_STORE_CATALOG_CHANGES
     1065     6808              AUTHOR:      Scott S. Sheppard
     1066     6809              PURPOSE:     Saves Catalog Control and Catalog Entry
     1067     6810              INTERFACE:   TOU$DFU_RD_CATALOG_CONTROL
     1068     6811                           TOU$GET_CARD
     1069     6812              INPUT:       RECORD.SIZE
     1070     6813                           BINARY_CARD
     1071     6814                           BIN#
     1072     6815                           DUP.BINARY_V
     1073     6816              OUTPUT:      BUFFER
     1074     6817                           BIN#
     1075     6818              DESCRIPTION: This procedure gets all of the binary cards for
     1076     6819                           the deck to be added from the IFAD input source
     1077     6820                           The binary cards are stored in the BUFFER array
     1078     6821        */
     1079     6822        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:43   
     1080     6823    2   ND_STORE_CATALOG_CHANGES: PROC ALTRET ;
     1081     6824
     1082     6825        /* Code */
     1083     6826
     1084     6827    3      CALL TOU$DFU_DF_RD_CATALOG_CONTROL ALTRET (ERROR) ;
     1085     6828    3      CATALOG_ENTRY_KEY.DECK#  = CATALOG_DATA.DECK# ;
     1086     6829    3      CATALOG_ENTRY_KEY.ENTRY# = CATALOG_DATA.ENTRY_COUNT + 1 ;
     1087     6830    3      CALL TOU$DFU_TF_WR_CATALOG_ENTRY ALTRET (ERROR) ;
     1088     6831
     1089     6832    3      CATALOG_DATA.ENTRY_COUNT = CATALOG_DATA.ENTRY_COUNT + 1 ;
     1090     6833    3      CALL TOU$DFU_TF_WR_CATALOG_CONTROL ALTRET (ERROR) ;
     1091     6834    3      RETURN ;
     1092     6835
     1093     6836    3   ERROR:
     1094     6837    3      ALTRETURN ;
     1095     6838
     1096     6839    3   END ND_STORE_CATALOG_CHANGES ;
     1097     6840    2   END ND_PROCESS_IFAD ;
     1098     6841        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:44   
     1099     6842        /*I*  NAME:        ND_PROCESS_TEMP
     1100     6843              AUTHOR:      Scott S. Sheppard
     1101     6844              PURPOSE:     Processes TEMP Input
     1102     6845              INTERFACE:   ND_SAVE_CATALOG_CONTROL
     1103     6846                           ND_SAVE_CATALOG_ENTRY
     1104     6847                           ND_SAVE_OBJECT_DECK
     1105     6848                           ND_SAVE_LOG
     1106     6849                           ND_SETUP_PRINT
     1107     6850                           TOU$B_PRINT_DECK_LINE
     1108     6851                           ND_PRINT_ADDED_DECK
     1109     6852                           ND_SAVE_LAST_DECK#
     1110     6853                           TOU$DU_USER_WRITE
     1111     6854                           TOU$DU_PRINTER_WRITE
     1112     6855              INPUT:       DEER temporary file - contains catalog records
     1113     6856              OUTPUT:      DECKFILE            - new deck copied in
     1114     6857                           DUP.BREAK_DISABLED
     1115     6858              DESCRIPTION: This procedure processes the temporary file, by
     1116     6859                           reading its records and  writing  them into the
     1117     6860                           deckfile.
     1118     6861        */
     1119     6862        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:45   
     1120     6863    1   ND_PROCESS_TEMP: PROC ALTRET ;
     1121     6864
     1122     6865        /* Code */
     1123     6866
     1124     6867    2      DUP.BREAK_DISABLED = %TRUE ;
     1125     6868    2      CALL ND_SAVE_CATALOG_CONTROL ALTRET (ERROR) ;
     1126     6869    2      CALL ND_SAVE_CATALOG_ENTRY ALTRET (ERROR) ;
     1127     6870    2      CALL ND_SAVE_OBJECT_DECK ALTRET (ERROR) ;
     1128     6871    2      CALL ND_SAVE_LAST_DECK# ALTRET (ERROR) ;
     1129     6872    2      CALL ND_SAVE_LOG ALTRET (ERROR) ;
     1130     6873    2      CALL ND_SETUP_PRINT ;
     1131     6874    2      CALL TOU$B_PRINT_DECK_LINE ;
     1132     6875    2      CALL ND_PRINT_ADDED_DECK ;
     1133     6876    2      DUP.BREAK_DISABLED = %FALSE ;
     1134     6877    2      RETURN ;
     1135     6878
     1136     6879    2   ERROR:
     1137     6880    2      DUP.BREAK_DISABLED = %FALSE ;
     1138     6881    2      DUP.MSG_CODE = %E$NPT_BAD_DECKFILE ;
     1139     6882    2      DUP.DF.CLOSE_TYPE = %DISCARD_FILE ;
     1140     6883    2      CALL TOU$DU_USER_WRITE ;
     1141     6884    2      CALL TOU$DU_PRINTER_WRITE ;
     1142     6885    2      ALTRETURN ;
     1143     6886
     1144     6887    2   END ND_PROCESS_TEMP ;
     1145     6888        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:46   
     1146     6889        /*I*  NAME:        ND_SAVE_CATALOG_CONTROL
     1147     6890              AUTHOR:      Scott S. Sheppard
     1148     6891              PURPOSE:     Saves Catalog Control
     1149     6892              INTERFACE:   TOU$DFU_TF_RD_CATALOG_CONTROL
     1150     6893                           TOU$DFU_DF_WR_CATALOG_CONTROL
     1151     6894              INPUT:       CATALOG_DATA
     1152     6895              OUTPUT:      CATALOG_DATA
     1153     6896              DESCRIPTION: This procedure saves the new catalog control record
     1154     6897                           which has been changed to reflect that the  catalog
     1155     6898                           now contains one more entry.
     1156     6899        */
     1157     6900
     1158     6901    1   ND_SAVE_CATALOG_CONTROL: PROC ALTRET ;
     1159     6902
     1160     6903        /* Code */
     1161     6904
     1162     6905    2      CALL TOU$DFU_TF_RD_CATALOG_CONTROL ALTRET (ERROR) ;
     1163     6906    2      CALL TOU$DFU_DF_WR_CATALOG_CONTROL ALTRET (ERROR) ;
     1164     6907    2      RETURN ;
     1165     6908
     1166     6909    2   ERROR:
     1167     6910    2      ALTRETURN ;
     1168     6911
     1169     6912    2   END ND_SAVE_CATALOG_CONTROL ;
     1170     6913        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:47   
     1171     6914        /*I*  NAME:        ND_SAVE_CATALOG_ENTRY
     1172     6915              AUTHOR:      Scott S. Sheppard
     1173     6916              PURPOSE:     Saves Catalog Entry
     1174     6917              INTERFACE:   TOU$DFU_TF_RD_CATALOG_ENTRY
     1175     6918                           TOU$DFU_DF_WR_CATALOG_ENTRY
     1176     6919              INPUT:       CATALOG_ENTRY
     1177     6920              OUTPUT:      CATALOG_ENTRY
     1178     6921              DESCRIPTION: This procedure save a catalog entry for the new
     1179     6922                           object deck.
     1180     6923        */
     1181     6924
     1182     6925    1   ND_SAVE_CATALOG_ENTRY: PROC ALTRET ;
     1183     6926
     1184     6927        /* Code */
     1185     6928
     1186     6929    2      CATALOG_ENTRY_KEY.DECK# = CATALOG_DATA.DECK# ;
     1187     6930    2      CATALOG_ENTRY_KEY.ENTRY# = CATALOG_DATA.ENTRY_COUNT ;
     1188     6931    2      CALL TOU$DFU_TF_RD_CATALOG_ENTRY ALTRET (ERROR) ;
     1189     6932    2      CALL TOU$DFU_DF_WR_CATALOG_ENTRY ALTRET (ERROR) ;
     1190     6933    2      RETURN ;
     1191     6934
     1192     6935    2   ERROR:
     1193     6936    2      ALTRETURN ;
     1194     6937
     1195     6938    2   END ND_SAVE_CATALOG_ENTRY ;
     1196     6939        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:48   
     1197     6940        /*I*  NAME:        ND_SAVE_OBJECT_DECK
     1198     6941              AUTHOR:      Scott S. Sheppard
     1199     6942              PURPOSE:     Saves an Object Deck in the deckfile
     1200     6943              INTERFACE:   TOU$DFU_DF_CHECK_FOR_KEY
     1201     6944                           ND_SAVE_NEW_DECK
     1202     6945                           ND_REPLACE_OLD_DECK
     1203     6946              INPUT:       OBJECT_KEY
     1204     6947              OUTPUT:      Appropriate module called to proces the deck
     1205     6948              DESCRIPTION: This procedure determines if the deck to be added
     1206     6949                           is already in the deckfile as part of a different
     1207     6950                           catalog.   If the deck exists, the reference list
     1208     6951                           is  changed  to  show  that  the  current catalog
     1209     6952                           references the deck.  If the deck does not exist,
     1210     6953                           the $object, binary, patch, and  $dkend cards are
     1211     6954                           added to the deckfile.
     1212     6955        */
     1213     6956
     1214     6957    1   ND_SAVE_OBJECT_DECK: PROC ALTRET ;
     1215     6958
     1216     6959        /* Code */
     1217     6960
     1218     6961    2      CALL TOU$DFU_DF_CHECK_FOR_KEY WHENRETURN
     1219     6962    3           DO ;
     1220     6963    3              CALL ND_REPLACE_OLD_DECK ALTRET (ERROR) ;
     1221     6964    3           END /* WHENRETURN */ ;
     1222     6965    2      WHENALTRETURN
     1223     6966    3           DO ;
     1224     6967    3              CALL ND_SAVE_NEW_DECK ALTRET (ERROR) ;
     1225     6968    3           END /* WHENALTRETURN */ ;
     1226     6969    2      RETURN ;
     1227     6970
     1228     6971    2   ERROR:
     1229     6972    2      ALTRETURN ;
     1230     6973
     1231     6974        /* END ND_SAVE_OBJECT_DECK */
     1232     6975        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:49   
     1233     6976        /*I*  NAME:        ND_SAVE_NEW_DECK
     1234     6977              AUTHOR:      Scott S. Sheppard
     1235     6978              PURPOSE:     Saves an Object Deck
     1236     6979              INTERFACE:   TOU$DFU_DF_WR_OBJECT
     1237     6980                           TOU$DFU_TF_RD_BINARY
     1238     6981                           TOU$DFU_DF_WR_BINARY
     1239     6982                           TOU$DFU_TF_RD_BCD_CARDS
     1240     6983                           TOU$DFU_DF_WR_BCD_CARDS
     1241     6984                           TOU$DFU_DF_WR_OBJECT_REFLIST
     1242     6985              INPUT:       OBJECT
     1243     6986              OUTPUT:      BIN#
     1244     6987                           BINARY_KEY
     1245     6988                           BCD_KEY
     1246     6989                           BCD#
     1247     6990                           OBJECT_REFLIST_KEY
     1248     6991                           OBJECT_REFLIST_DATA
     1249     6992              DESCRIPTION: This procedure saves all of the records necessary
     1250     6993                           to add an object deck to the deckfile.    Records
     1251     6994                           are  read  from  the temporary file and  directly
     1252     6995                           copied into the deckfile.
     1253     6996        */
     1254     6997        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:50   
     1255     6998    2   ND_SAVE_NEW_DECK: PROC ALTRET ;
     1256     6999
     1257     7000        /* Code */
     1258     7001
     1259     7002    3      CALL TOU$DFU_TF_RD_OBJECT ALTRET (ERROR) ;
     1260     7003    3      CALL TOU$DFU_DF_WR_OBJECT ALTRET (ERROR) ;
     1261     7004
     1262     7005    3      BINARY_KEY.DECK# = OBJECT.DECK# ;
     1263     7006    3      BIN# = OBJECT.BINARY_COUNT ;
     1264     7007    3      CALL TOU$DFU_TF_RD_BINARY ALTRET (ERROR) ;
     1265     7008    3      CALL TOU$DFU_DF_WR_BINARY ALTRET (ERROR) ;
     1266     7009
     1267     7010    3      BCD_KEY.DECK# = OBJECT.DECK# ;
     1268     7011    3      BCD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1 ;
     1269     7012    3      CALL TOU$DFU_TF_RD_BCD_CARDS ALTRET (ERROR) ;
     1270     7013    3      CALL TOU$DFU_DF_WR_BCD_CARDS ALTRET (ERROR) ;
     1271     7014
     1272     7015    3      OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;
     1273     7016    3      OBJECT_REFLIST_DATA.NUM_REFS = 1 ;
     1274     7017    3      OBJECT_REFLIST_DATA.REFS.ME#(0) = MASTER_ENTRY_KEY.ENTRY# ;
     1275     7018    3      OBJECT_REFLIST_DATA.REFS.CE#(0) = CATALOG_ENTRY_KEY.ENTRY# ;
     1276     7019    3      CALL TOU$DFU_DF_WR_OBJECT_REFLIST ALTRET (ERROR) ;
     1277     7020    3      RETURN ;
     1278     7021
     1279     7022    3   ERROR:
     1280     7023    3      ALTRETURN ;
     1281     7024
     1282     7025    3   END ND_SAVE_NEW_DECK ;
     1283     7026        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:51   
     1284     7027        /*I*  NAME:        ND_REPLACE_OLD_DECK
     1285     7028              AUTHOR:      Scott S. Sheppard
     1286     7029              PURPOSE:     Saves an Object Deck
     1287     7030              INTERFACE:   TOU$DFU_DF_DL_DECK
     1288     7031                           TOU$DFU_TF_RD_OBJECT
     1289     7032                           TOU$DFU_DF_WR_OBJECT
     1290     7033                           TOU$DFU_TF_RD_BINARY
     1291     7034                           TOU$DFU_DF_WR_BINARY
     1292     7035                           TOU$DFU_TF_RD_BCD_CARDS
     1293     7036                           TOU$DFU_DF_WR_BCD_CARDS
     1294     7037                           TOU$DFU_DF_RD_OBJECT_REFLIST
     1295     7038                           TOU$DFU_DF_WR_OBJECT_REFLIST
     1296     7039              INPUT:       OBJECT
     1297     7040              OUTPUT:      BIN#
     1298     7041                           BINARY_KEY
     1299     7042                           BCD_KEY
     1300     7043                           BCD#
     1301     7044                           OBJECT_REFLIST_KEY
     1302     7045                           OBJECT_REFLIST_DATA
     1303     7046              DESCRIPTION: This procedure replaces  an existing  object deck
     1304     7047                           with  another  version of the same deck  from the
     1305     7048                           temporary file.   The old version is deleted from
     1306     7049                           the deckfile and the new one is then added.   The
     1307     7050                           deck  in  the  temporary file is keyed  by a deck
     1308     7051                           number that would be used if the deck were a  new
     1309     7052                           deck.
     1310     7053        */
     1311     7054
     1312     7055    2   ND_REPLACE_OLD_DECK: PROC ALTRET ;
     1313     7056
     1314     7057    3      DCL OLD_COUNT   UBIN WORD ALIGNED ;
     1315     7058           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:52   
     1316     7059        /* Code */
     1317     7060
     1318     7061    3      BINARY_KEY.DECK# = OBJECT.DECK# ;
     1319     7062    3      OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;
     1320     7063    3      OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;
     1321     7064    3      CALL TOU$DFU_DF_RD_OBJECT_REFLIST ALTRET (ERROR) ;
     1322     7065    3      CALL TOU$DFU_DF_DL_DECK ALTRET (ERROR) ;
     1323     7066
     1324     7067    3      CALL TOU$DFU_TF_RD_OBJECT ALTRET (ERROR) ;
     1325     7068    3      CALL TOU$DFU_DF_WR_OBJECT ALTRET (ERROR) ;
     1326     7069
     1327     7070    3      BINARY_KEY.DECK# = OBJECT.DECK# ;
     1328     7071    3      BIN# = OBJECT.BINARY_COUNT ;
     1329     7072    3      CALL TOU$DFU_TF_RD_BINARY ALTRET (ERROR) ;
     1330     7073    3      CALL TOU$DFU_DF_WR_BINARY ALTRET (ERROR) ;
     1331     7074
     1332     7075    3      BCD_KEY.DECK# = OBJECT.DECK# ;
     1333     7076    3      BCD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1 ;
     1334     7077    3      CALL TOU$DFU_TF_RD_BCD_CARDS ALTRET (ERROR) ;
     1335     7078    3      CALL TOU$DFU_DF_WR_BCD_CARDS ALTRET (ERROR) ;
     1336     7079
     1337     7080    3      OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;
     1338     7081    3      OLD_COUNT = OBJECT_REFLIST_DATA.NUM_REFS ;
     1339     7082    3      OBJECT_REFLIST_DATA.REFS.ME#(OLD_COUNT) = MASTER_ENTRY_KEY.ENTRY# ;
     1340     7083    3      OBJECT_REFLIST_DATA.REFS.CE#(OLD_COUNT) = CATALOG_ENTRY_KEY.ENTRY# ;
     1341     7084    3      OBJECT_REFLIST_DATA.NUM_REFS = OLD_COUNT + 1 ;
     1342     7085    3      CALL TOU$DFU_DF_WR_OBJECT_REFLIST ALTRET (ERROR) ;
     1343     7086    3      RETURN ;
     1344     7087
     1345     7088    3   ERROR:
     1346     7089    3      ALTRETURN ;
     1347     7090
     1348     7091    3   END ND_REPLACE_OLD_DECK ;
     1349     7092    2   END ND_SAVE_OBJECT_DECK ;
     1350     7093        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:53   
     1351     7094        /*I*  NAME:        ND_SAVE_LAST_DECK#
     1352     7095              AUTHOR:      Scott S. Sheppard
     1353     7096              PURPOSE:     Saves Last Deck Number
     1354     7097              INTERFACE:   TOU$DFU_TF_RD_LAST_DECK#
     1355     7098                           TOU$DFU_DF_WR_LAST_DECK#
     1356     7099              INPUT:       LAST.DECK#
     1357     7100              OUTPUT:      LAST.DECK#
     1358     7101              DESCRIPTION: This procedure saves the new last (largest used)
     1359     7102                           deck number in the deckfile.
     1360     7103        */
     1361     7104
     1362     7105    1   ND_SAVE_LAST_DECK#: PROC ALTRET ;
     1363     7106
     1364     7107        /* Code */
     1365     7108
     1366     7109    2      CALL TOU$DFU_TF_RD_LAST_DECK# ALTRET (ERROR) ;
     1367     7110    2      CALL TOU$DFU_DF_WR_LAST_DECK# ALTRET (ERROR) ;
     1368     7111    2      RETURN ;
     1369     7112
     1370     7113    2   ERROR:
     1371     7114    2      ALTRETURN ;
     1372     7115
     1373     7116    2   END ND_SAVE_LAST_DECK# ;
     1374     7117        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:54   
     1375     7118        /*I*  NAME:        ND_SAVE_LOG
     1376     7119              AUTHOR:      Scott S. Sheppard
     1377     7120              PURPOSE:     Saves the deckfile history log
     1378     7121              INTERFACE:   TOU$DU_UPDATE_LOG
     1379     7122                           TOU$DFU_DF_RD_LOG
     1380     7123                           TOU$DFU_DF_WR_LOG
     1381     7124              INPUT:       No system data accessed.
     1382     7125              OUTPUT:      DUP.LOG.CATALOG
     1383     7126                           DUP.LOG.DECK
     1384     7127                           DUP.HOLD_AREA
     1385     7128              DESCRIPTION: This procedure stores the deckfile history log.
     1386     7129        */
     1387     7130
     1388     7131    1   ND_SAVE_LOG: PROC ALTRET ;
     1389     7132
     1390     7133        /* Code */
     1391     7134
     1392     7135    2      CALL TOU$DFU_DF_RD_LOG ALTRET (ERROR) ;
     1393     7136    2      DUP.LOG.TYPE = %T$SF_NEWDECK ;
     1394     7137    2      DUP.LOG.CATALOG = CATALOG_KEY.DATA ;
     1395     7138    2      DUP.LOG.DECK = OBJECT_KEY.DATA ;
     1396     7139    2      DUP.HOLD_AREA = DUP.IFAD.FID ;
     1397     7140    2      CALL TOU$DU_UPDATE_LOG ALTRET (ERROR) ;
     1398     7141    2      CALL TOU$DFU_DF_WR_LOG ALTRET (ERROR) ;
     1399     7142    2      RETURN ;
     1400     7143
     1401     7144    2   ERROR:
     1402     7145    2      ALTRETURN ;
     1403     7146
     1404     7147    2   END ND_SAVE_LOG ;
     1405     7148        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:55   
     1406     7149        /*I*  NAME:        ND_SETUP_PRINT
     1407     7150              AUTHOR:      Scott S. Sheppard
     1408     7151              PURPOSE:     Assign Replacement Variables
     1409     7152              INTERFACE:   None Called.
     1410     7153              INPUT:       OBJECT.BCD.LIBRARY - used to determine GECALL or not
     1411     7154                           OBJECT.BCD.CLASS   - used to determine ITR or MDR
     1412     7155                           BCD_B(BCD#-1)      - $DKEND card saved
     1413     7156                           H$NEWDECK_ITR       T$B_ITR
     1414     7157                           H$NEWDECK_MDR      T$B_MDR
     1415     7158                           H$NEWDECK_PROG     T$B_GECALL
     1416     7159              OUTPUT:      DUP.HDR_CODE  - set to correct heading
     1417     7160                           DUP.MSG_CODE  - used to write messages
     1418     7161                           ID.ID         - set for IDENT CODE field
     1419     7162                           ID.REVISION  - set for REV field
     1420     7163                           DKEND         - $DKEND Card Structure
     1421     7164              DESCRIPTION: This procedure assigns variables needed values so
     1422     7165                           that TOU$REPLACE  will insert proper  values  for
     1423     7166                           the dummy ~strings.
     1424     7167        */
     1425     7168        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:56   
     1426     7169    1   ND_SETUP_PRINT: PROC ;
     1427     7170
     1428     7171        /* Code */
     1429     7172
     1430     7173    2      IF OBJECT.BCD.LIBRARY = 'HMPCJ1'
     1431     7174    2      THEN IF OBJECT.BCD.CLASS = 'I' | OBJECT.BCD.CLASS = 'F'
     1432     7175    3         THEN DO ;
     1433     7176    3                 IF OBJECT.BCD.CLASS = 'F'
     1434     7177    3                 THEN ID.ID = SUBSTR (OBJECT_KEY.DATA, 7, 6) ;
     1435     7178    3                 ELSE ID.ID = SUBSTR (OBJECT_KEY.DATA, 4, 6) ;
     1436     7179    3                 DKEND.BCD_ = BCD_B(BCD#-1) ;
     1437     7180    3                 ID.REVISION = DKEND.BCD.REVISION ;
     1438     7181    3                 DUP.HDR_CODE = %H$NEWDECK_ITR ;
     1439     7182    3                 DUP.MSG_CODE = %T$B_ITR ;
     1440     7183    3              END /* THEN */ ;
     1441     7184    3         ELSE DO ;
     1442     7185    3                 ID.ID = SUBSTR (OBJECT_KEY.DATA, 4, 6) ;
     1443     7186    3                 DKEND.BCD_ = BCD_B(BCD#-1) ;
     1444     7187    3                 ID.REVISION = DKEND.BCD.REVISION ;
     1445     7188    3                 DUP.HDR_CODE = %H$NEWDECK_MDR ;
     1446     7189    3                 DUP.MSG_CODE = %T$B_MDR ;
     1447     7190    3              END /* ELSE */ ;
     1448     7191    3      ELSE DO ;
     1449     7192    3              DUP.HDR_CODE = %H$NEWDECK_PROG ;
     1450     7193    3              DUP.MSG_CODE = %T$B_GECALL ;
     1451     7194    3              DKEND.BCD_ = BCD_B(BCD#-1) ;
     1452     7195    3              ID.REVISION = DKEND.BCD.REVISION ;
     1453     7196    3           END /* ELSE */ ;
     1454     7197    2      RETURN ;
     1455     7198
     1456     7199    2   END ND_SETUP_PRINT ;
     1457     7200        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:57   
     1458     7201        /*I*  NAME:        ND_PRINT_ADDED_DECK
     1459     7202              AUTHOR:      Scott S. Sheppard
     1460     7203              PURPOSE:     Prints Added Deck line
     1461     7204              INTERFACE:   TOU$DU_USER_WRITE
     1462     7205                           TOU$DU_PRINTER_WRITE
     1463     7206              INPUT:       T$B_CATALOG
     1464     7207                           T$ND_INFORM
     1465     7208              OUTPUT:      DUP.MSG_CODE - integer message number
     1466     7209              DESCRIPTION: This procedure notifies the user and logs to the
     1467     7210                           edit listing that the deck has been added.
     1468     7211        */
     1469     7212
     1470     7213    1   ND_PRINT_ADDED_DECK: PROC ;
     1471     7214
     1472     7215        /* Code */
     1473     7216
     1474     7217    2      DUP.MSG_CODE = %T$B_CATALOG ;
     1475     7218    2      CALL TOU$DU_PRINTER_WRITE ;
     1476     7219    2      DUP.MSG_CODE = %T$ND_INFORM ;
     1477     7220    2      CALL TOU$DU_USER_WRITE ;
     1478     7221    2      CALL TOU$DU_PRINTER_WRITE ;
     1479     7222    2      RETURN ;
     1480     7223
     1481     7224    2   END ND_PRINT_ADDED_DECK ;
     1482     7225    1   END TOU$NEWDECK ;

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:58   
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOU_RQSTS_E.:E05TOU  is referenced.
   TOU_DEER_M.:E05TOU  is referenced.
      No diagnostics issued in procedure TOU$NEWDECK.

   Procedure TOU$NEWDECK requires 1230 words for executable code.
   Procedure TOU$NEWDECK requires 24 words of local(AUTO) storage.

    No errors detected in file TOU$NEWDECK.:E05TSI    .

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:59   

 Object Unit name= TOU$NEWDECK                                File name= TOU$NEWDECK.:E05TOU
 UTS= JUL 30 '97 06:49:04.08 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     8     10  TOU$NEWDECK
    1  RoData even  UTS      8     10  TOU$NEWDECK
    2   Proc  even  none  1230   2316  TOU$NEWDECK
    3  RoData even  none    19     23  TOU$NEWDECK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        0  TOU$NEWDECK
     2     44          yes     yes      Std        0  TOU$ND_FIND_CATALOG
     2     51          yes     yes      Std        0  TOU$ND_SAVE_CATALOG_CONTROL
     2     56          yes     yes      Std        0  TOU$ND_SAVE_OBJECT_DECK
     2     63          yes     yes      Std        0  TOU$ND_SAVE_LAST_DECK#

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  OBJECT_SEARCH_KEY
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:60   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       0 TOU$B_SHOW_DCBS
 yes     yes           Std       0 TOU$DU_CLOSE_DF
 yes     yes           Std       0 TOU$DU_OPEN_DF
 yes     yes           Std       0 TOU$DU_USER_WRITE
 yes     yes           Std       0 TOU$DU_SET_IFAD_FID
 yes     yes           Std       0 TOU$DU_SET_DF_FID
 yes     yes           Std       0 TOU$DU_GET_DATA_SEGMENT
 yes     yes           Std       0 TOU$DFU_DF_RD_MASTER_CONTROL
 yes     yes           Std       0 TOU$DFU_DF_RD_MASTER_ENTRY
 yes     yes           Std       0 TOU$DU_SET_PROMPT
 yes     yes           Std       0 TOU$DU_SET_EDIT_PROMPT
 yes     yes           Std       0 TOU$DU_USER_READ
 yes     yes           Std       0 TOU$DU_FREE_DATA_SEGMENT
 yes     yes           Std       0 TOU$DFU_DF_CHECK_FOR_KEY
 yes     yes           Std       0 TOU$DFU_DF_RD_OBJECT_REFLIST
 yes     yes           Std       0 TOU$DFU_OPEN_TEMP
 yes     yes           Std       0 TOU$CLEAR_IFAD
 yes     yes           Std       0 TOU$DU_OPEN_IFAD
 yes     yes           Std       0 TOU$DU_CLOSE_IFAD
 yes     yes           Std       0 TOU$DFU_CLOSE_TEMP
 yes     yes           Std       0 TOU$GET_CP6_OBJECT
 yes     yes           Std       0 TOU$B_SET_OBJECT_KEY
 yes     yes           Std       0 TOU$GET_BINARY_CARDS
 yes     yes           Std       0 TOU$GET_BCD_CARDS
 yes     yes           Std       0 TOU$DFU_DF_RD_LAST_DECK#
 yes     yes           Std       0 TOU$DFU_TF_WR_LAST_DECK#
 yes     yes           Std       4 TOU$CHECKSUM
 yes     yes           Std       0 TOU$DFU_TF_WR_BCD_CARDS
 yes     yes           Std       0 TOU$DFU_TF_WR_OBJECT
 yes     yes           Std       0 TOU$DFU_TF_WR_BINARY
 yes     yes           Std       0 TOU$DFU_DF_RD_CATALOG_CONTROL
 yes     yes           Std       0 TOU$DFU_TF_WR_CATALOG_ENTRY
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:61   
 yes     yes           Std       0 TOU$DFU_TF_WR_CATALOG_CONTROL
 yes     yes           Std       0 TOU$B_PRINT_DECK_LINE
 yes     yes           Std       0 TOU$DU_PRINTER_WRITE
 yes     yes           Std       0 TOU$DFU_TF_RD_CATALOG_CONTROL
 yes     yes           Std       0 TOU$DFU_DF_WR_CATALOG_CONTROL
 yes     yes           Std       0 TOU$DFU_TF_RD_CATALOG_ENTRY
 yes     yes           Std       0 TOU$DFU_DF_WR_CATALOG_ENTRY
 yes     yes           Std       0 TOU$DFU_TF_RD_OBJECT
 yes     yes           Std       0 TOU$DFU_DF_WR_OBJECT
 yes     yes           Std       0 TOU$DFU_TF_RD_BCD_CARDS
 yes     yes           Std       0 TOU$DFU_DF_WR_BCD_CARDS
 yes     yes           Std       0 TOU$DFU_DF_WR_OBJECT_REFLIST
 yes     yes           Std       0 TOU$DFU_TF_RD_BINARY
 yes     yes           Std       0 TOU$DFU_DF_WR_BINARY
 yes     yes           Std       0 TOU$DFU_DF_DL_DECK
 yes     yes           Std       0 TOU$DFU_TF_RD_LAST_DECK#
 yes     yes           Std       0 TOU$DFU_DF_WR_LAST_DECK#
 yes     yes           Std       0 TOU$DFU_DF_RD_LOG
 yes     yes           Std       0 TOU$DFU_DF_WR_LOG
 yes     yes           Std       0 TOU$DU_UPDATE_LOG
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:62   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     DUP                                   BCD_CARD                              BCD_KEY
     BINARY_CARD                           BINARY_KEY                            CATALOG_DATA
     CATALOG_ENTRY_KEY                     CATALOG_KEY                           CATALOG_SEARCH_KEY
     DKEND                                 ID                                    LAST
     MASTER_DATA                           MASTER_ENTRY_KEY                      OBJECT
     OBJECT_KEY                            OBJECT_REFLIST_KEY                    OBJECT_REFLIST_DATA
     BCD#                                  BIN#                                  CUR#
     FILE_EOF                              B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:63   


        1        1        /*M* TOU$NEWDECK     DEckfile Editor Routine NEW DECK Function */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P*  NAME:        TOU$NEWDECK
       12       12              AUTHOR:      Scott S. Sheppard
       13       13              PURPOSE:     DEckfile Editor Routine NEW DECK Function
       14       14              DESCRIPTION: This program is called when the NEW DECK function
       15       15                           is invoked by the  CP-6  deckfile  editor driver.
       16       16                           This  procedure  adds  a  new  object  deck  to a
       17       17                           specified catalog of an existing CP-6 deckfile.
       18       18              REFERENCE:   CP-6 Release C0M0
       19       19              LAST UPDATE: 10/27/83
       20       20        */
       21       21        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:64   
       22       22        /*F*  NAME:        TOU$NEWDECK
       23       23              DESCRIPTION: Procedure Nesting Hierarchy
       24       24
       25       25              TOU$NEWDECK: procedure ALTRET
       26       26              TOU$ND_FIND_CATALOG: entry ALTRET
       27       27              TOU$ND_SAVE_CATALOG_CONTROL: entry ALTRET
       28       28              TOU$ND_SAVE_OBJECT_DECK: entry ALTRET
       29       29              TOU$ND_SAVE_LAST_DECK#: entry ALTRET
       30       30
       31       31                ND_INIT_DUP: procedure
       32       32                ND_COMMAND_SETUP: procedure ALTRET
       33       33                ND_FIND_CATALOG: procedure ALTRET
       34       34                   ND_GET_CATALOG_TABLE_BUFFER: procedure ALTRET
       35       35                   ND_FETCH_CATALOG_TABLE: procedure ALTRET
       36       36                   ND_SEARCH_CATALOG_TABLE: procedure
       37       37                   ND_SELECT_CATALOG: procedure ALTRET
       38       38                      ND_SHOW_CATALOG_CHOICES: procedure
       39       39                      ND_GET_CATALOG_CHOICE: procedure (CATALOG_INDEX)
       40       40                         ND_CONVERT_CHOICE: procedure (C, L, V)
       41       41                         ND_VALIDATE_CHOICE: procedure (V, B)
       42       42                   ND_FREE_CATALOG_TABLE_BUFFER: procedure
       43       43                ND_CHECK_FOR_DECK: procedure ALTRET
       44       44                ND_ADD_DECK: procedure ALTRET
       45       45                ND_PROCESS_IFAD: procedure ALTRET
       46       46                   ND_CHECK_MATCH: procedure
       47       47                   ND_STORE_LAST_DECK#: procedure ALTRET
       48       48                   ND_STORE_OBJECT_DECK: procedure ALTRET
       49       49                   ND_STORE_CATALOG_CHANGES: procedure ALTRET
       50       50                ND_PROCESS_TEMP: procedure ALTRET
       51       51                ND_SAVE_CATALOG_CONTROL: procedure ALTRET
       52       52                ND_SAVE_CATALOG_ENTRY: procedure ALTRET
       53       53                ND_SAVE_OBJECT_DECK: procedure ALTRET
       54       54                   ND_SAVE_NEW_DECK: procedure ALTRET
       55       55                   ND_REPLACE_OLD_DECK: procedure ALTRET
       56       56                ND_SAVE_LAST_DECK#: procedure ALTRET
       57       57                ND_SAVE_LOG: procedure ALTRET
       58       58                ND_SETUP_PRINT: procedure
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:65   
       59       59                ND_PRINT_ADDED_DECK: procedure
       60       60        */
       61       61        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:66   
       62       62        TOU$NEWDECK: PROC ALTRET ;

     62  2 000000   000000 700200 xent  TOU$NEWDECK  TSX0  ! X66_AUTO_0
         2 000001   000030 000000                    ZERO    24,0

       63       63
       64       64        /* Include Files */
       65       65
       66       66           %INCLUDE TOU_DEER_M ;
       67     1477           %INCLUDE TOU_RQSTS_E ;
       68     1552           %INCLUDE TO_PERR_C ;
       69     2137           %INCLUDE XU_MACRO_C ;
       70     5243
       71     5244        /* Macros */
       72     5245
       73     5246           %DUP (STCLASS = SYMREF) ;
       74     5389           %BCD_B (STCLASS = "BASED (DUP.BCD_V.PTR$)") ;
       75     5401           %BCD_CARD (STCLASS = SYMREF) ;
       76     5421           %BCD_KEY (STCLASS = SYMREF) ;
       77     5435           %BINARY_CARD (STCLASS = SYMREF) ;
       78     5462           %BINARY_KEY (STCLASS = SYMREF) ;
       79     5476           %CATALOG_DATA (STCLASS = SYMREF) ;
       80     5490           %CATALOG_ENTRY_KEY (STCLASS = SYMREF) ;
       81     5504           %CATALOG_KEY (STCLASS = SYMREF) ;
       82     5518           %CATALOG_SEARCH_KEY (STCLASS = SYMREF) ;
       83     5530           %DKEND (STCLASS = SYMREF) ;
       84     5554           %ID (STCLASS = SYMREF) ;
       85     5571           %LAST (STCLASS = SYMREF) ;
       86     5584           %MASTER_DATA (STCLASS = SYMREF) ;
       87     5598           %MASTER_ENTRY_KEY (STCLASS = SYMREF) ;
       88     5612           %OBJECT (STCLASS = SYMREF) ;
       89     5675           %OBJECT_SEARCH_KEY (STCLASS = "STATIC SYMDEF") ;
       90     5687           %OBJECT_KEY (STCLASS = SYMREF) ;
       91     5700           %OBJECT_REFLIST_KEY (STCLASS = SYMREF) ;
       92     5714           %OBJECT_REFLIST_DATA (STCLASS = SYMREF) ;
       93     5729           %RECORD (STCLASS = SYMREF) ;
       94     5756           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:67   
       95     5757        /* Variables */
       96     5758
       97     5759    1      DCL BCD#           UBIN WORD SYMREF ;
       98     5760    1      DCL BIN#           UBIN WORD SYMREF ;
       99     5761    1      DCL CUR#           UBIN WORD SYMREF ;
      100     5762    1      DCL FILE_EOF  UBIN WORD SYMREF ALIGNED;
      101     5763
      102     5764        /* External Entry Points */
      103     5765
      104     5766    1      DCL TOU$DU_SET_IFAD_FID            ENTRY ALTRET ;
      105     5767    1      DCL TOU$DU_OPEN_IFAD               ENTRY ALTRET ;
      106     5768    1      DCL TOU$DU_CLOSE_IFAD              ENTRY ALTRET ;
      107     5769
      108     5770    1      DCL TOU$DU_SET_DF_FID              ENTRY ALTRET ;
      109     5771    1      DCL TOU$DU_OPEN_DF                 ENTRY ALTRET ;
      110     5772    1      DCL TOU$DU_CLOSE_DF                ENTRY ALTRET ;
      111     5773
      112     5774    1      DCL TOU$DU_USER_WRITE              ENTRY ALTRET ;
      113     5775    1      DCL TOU$DU_USER_READ               ENTRY ALTRET ;
      114     5776    1      DCL TOU$DU_PRINTER_WRITE           ENTRY ALTRET ;
      115     5777    1      DCL TOU$DU_UPDATE_LOG              ENTRY ALTRET ;
      116     5778    1      DCL TOU$DU_GET_DATA_SEGMENT        ENTRY ALTRET ;
      117     5779    1      DCL TOU$DU_FREE_DATA_SEGMENT       ENTRY ALTRET ;
      118     5780    1      DCL TOU$DU_SET_PROMPT              ENTRY ALTRET ;
      119     5781    1      DCL TOU$DU_SET_EDIT_PROMPT         ENTRY ALTRET ;
      120     5782
      121     5783    1      DCL TOU$CHECKSUM                   ENTRY (4) ALTRET ;
      122     5784
      123     5785    1      DCL TOU$CLEAR_IFAD                 ENTRY ALTRET ;
      124     5786
      125     5787    1      DCL TOU$B_SHOW_DCBS                ENTRY ALTRET ;
      126     5788    1      DCL TOU$GET_CP6_OBJECT             ENTRY ALTRET ;
      127     5789    1      DCL TOU$GET_BINARY_CARDS           ENTRY ALTRET ;
      128     5790    1      DCL TOU$GET_BCD_CARDS              ENTRY ALTRET ;
      129     5791    1      DCL TOU$B_SET_OBJECT_KEY           ENTRY ALTRET ;
      130     5792    1      DCL TOU$B_PRINT_DECK_LINE          ENTRY ALTRET ;
      131     5793           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:68   
      132     5794        /* External Entry Points */
      133     5795
      134     5796    1      DCL TOU$DFU_DF_RD_MASTER_CONTROL   ENTRY ALTRET ;
      135     5797    1      DCL TOU$DFU_DF_RD_MASTER_ENTRY     ENTRY ALTRET ;
      136     5798    1      DCL TOU$DFU_DF_RD_CATALOG_CONTROL  ENTRY ALTRET ;
      137     5799    1      DCL TOU$DFU_DF_RD_OBJECT_REFLIST   ENTRY ALTRET ;
      138     5800    1      DCL TOU$DFU_DF_RD_LAST_DECK#       ENTRY ALTRET ;
      139     5801    1      DCL TOU$DFU_DF_RD_LOG              ENTRY ALTRET ;
      140     5802    1      DCL TOU$DFU_DF_DL_DECK             ENTRY ALTRET ;
      141     5803
      142     5804    1      DCL TOU$DFU_DF_CHECK_FOR_KEY       ENTRY ALTRET ;
      143     5805    1      DCL TOU$DFU_DF_WR_CATALOG_CONTROL  ENTRY ALTRET ;
      144     5806    1      DCL TOU$DFU_DF_WR_CATALOG_ENTRY    ENTRY ALTRET ;
      145     5807    1      DCL TOU$DFU_DF_WR_OBJECT           ENTRY ALTRET ;
      146     5808    1      DCL TOU$DFU_DF_WR_BINARY           ENTRY ALTRET ;
      147     5809    1      DCL TOU$DFU_DF_WR_BCD_CARDS        ENTRY ALTRET ;
      148     5810    1      DCL TOU$DFU_DF_WR_OBJECT_REFLIST   ENTRY ALTRET ;
      149     5811    1      DCL TOU$DFU_DF_WR_LAST_DECK#       ENTRY ALTRET ;
      150     5812    1      DCL TOU$DFU_DF_WR_LOG              ENTRY ALTRET ;
      151     5813    1      DCL TOU$DFU_OPEN_TEMP              ENTRY ALTRET ;
      152     5814    1      DCL TOU$DFU_CLOSE_TEMP             ENTRY ALTRET ;
      153     5815           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:69   
      154     5816        /* External Entry Points */
      155     5817
      156     5818    1      DCL TOU$DFU_TF_RD_CATALOG_CONTROL  ENTRY ALTRET ;
      157     5819    1      DCL TOU$DFU_TF_RD_CATALOG_ENTRY    ENTRY ALTRET ;
      158     5820    1      DCL TOU$DFU_TF_RD_OBJECT           ENTRY ALTRET ;
      159     5821    1      DCL TOU$DFU_TF_RD_BINARY           ENTRY ALTRET ;
      160     5822    1      DCL TOU$DFU_TF_RD_BCD_CARDS        ENTRY ALTRET ;
      161     5823    1      DCL TOU$DFU_TF_RD_LAST_DECK#       ENTRY ALTRET ;
      162     5824
      163     5825    1      DCL TOU$DFU_TF_WR_CATALOG_CONTROL  ENTRY ALTRET ;
      164     5826    1      DCL TOU$DFU_TF_WR_CATALOG_ENTRY    ENTRY ALTRET ;
      165     5827    1      DCL TOU$DFU_TF_WR_OBJECT           ENTRY ALTRET ;
      166     5828    1      DCL TOU$DFU_TF_WR_BINARY           ENTRY ALTRET ;
      167     5829    1      DCL TOU$DFU_TF_WR_BCD_CARDS        ENTRY ALTRET ;
      168     5830    1      DCL TOU$DFU_TF_WR_LAST_DECK#       ENTRY ALTRET ;
      169     5831           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:70   
      170     5832        /* ********************
      171     5833           ********************
      172     5834           **  Main Program  **
      173     5835           ********************
      174     5836           ******************** */
      175     5837
      176     5838    1      CALL ND_INIT_DUP ;

   5838  2 000002   000071 701000 2                  TSX1    ND_INIT_DUP
         2 000003   000000 011000                    NOP     0

      177     5839    1      CALL ND_COMMAND_SETUP ALTRET (ERROR_RETURN) ;

   5839  2 000004   000114 701000 2                  TSX1    ND_COMMAND_SETUP
         2 000005   000033 702000 2                  TSX2    ERROR_RETURN

      178     5840    1      CALL TOU$B_SHOW_DCBS ;

   5840  2 000006   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000007   000000 701000 xent               TSX1    TOU$B_SHOW_DCBS
         2 000010   000000 011000                    NOP     0

      179     5841    1      CALL TOU$DU_OPEN_DF ALTRET (ERROR_RETURN) ;

   5841  2 000011   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000012   000000 701000 xent               TSX1    TOU$DU_OPEN_DF
         2 000013   000033 702000 2                  TSX2    ERROR_RETURN

      180     5842    1      CALL ND_FIND_CATALOG ALTRET (ERROR_RETURN) ;

   5842  2 000014   000245 701000 2                  TSX1    ND_FIND_CATALOG
         2 000015   000033 702000 2                  TSX2    ERROR_RETURN

      181     5843    1      CALL ND_CHECK_FOR_DECK ALTRET (ERROR_RETURN) ;

   5843  2 000016   001204 701000 2                  TSX1    ND_CHECK_FOR_DECK
         2 000017   000033 702000 2                  TSX2    ERROR_RETURN
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:71   

      182     5844    1      CALL ND_ADD_DECK ALTRET (ERROR_RETURN) ;

   5844  2 000020   001264 701000 2                  TSX1    ND_ADD_DECK
         2 000021   000033 702000 2                  TSX2    ERROR_RETURN

      183     5845    1      CALL TOU$DU_CLOSE_DF ALTRET (ERROR_RETURN) ;

   5845  2 000022   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000023   000000 701000 xent               TSX1    TOU$DU_CLOSE_DF
         2 000024   000033 702000 2                  TSX2    ERROR_RETURN

      184     5846
      185     5847        /* NORMAL_RETURN: */
      186     5848    1      DUP.MSG_CODE = %T$ND_SUCCESS;

   5848  2 000025   000144 235007                    LDA     100,DL
         2 000026   000020 755000 xsym               STA     DUP+16

      187     5849    1      CALL TOU$DU_USER_WRITE ;

   5849  2 000027   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000030   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000031   000000 011000                    NOP     0

      188     5850    1      RETURN ;

   5850  2 000032   000000 702200 xent               TSX2  ! X66_ARET

      189     5851
      190     5852    1   ERROR_RETURN:
      191     5853    1      CALL TOU$DU_CLOSE_DF ;

   5853  2 000033   000002 631400 xsym  ERROR_RETURN EPPR1   B_VECTNIL+2
         2 000034   000000 701000 xent               TSX1    TOU$DU_CLOSE_DF
         2 000035   000000 011000                    NOP     0

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:72   
      192     5854    1      DUP.MSG_CODE = %T$ND_FAILURE;

   5854  2 000036   000145 235007                    LDA     101,DL
         2 000037   000020 755000 xsym               STA     DUP+16

      193     5855    1      CALL TOU$DU_USER_WRITE ;

   5855  2 000040   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000041   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000042   000000 011000                    NOP     0

      194     5856    1      RETURN ;

   5856  2 000043   000000 702200 xent               TSX2  ! X66_ARET

      195     5857
      196     5858        /* ********************
      197     5859           ********************
      198     5860           **  End Of  Main  **
      199     5861           ********************
      200     5862           ******************** */
      201     5863        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:73   
      202     5864        /*D*  NAME:        TOU$ND_FIND_CATALOG
      203     5865              ENTRY:
      204     5866              AUTHOR:      Scott S. Sheppard
      205     5867              PURPOSE:     Find Catalog Entry Point
      206     5868              INTERFACE:   ND_FIND_CATALOG
      207     5869              DESCRIPTION: This entry point is called to locate a catalog
      208     5870                           for the entered catalog key.
      209     5871        */
      210     5872
      211     5873    1   TOU$ND_FIND_CATALOG: ENTRY ALTRET ;

   5873  2 000044   000000 700200 xent  TOU$ND_FIND* TSX0  ! X66_AUTO_0
         2 000045   000030 000000                    ZERO    24,0

      212     5874
      213     5875    1      CALL ND_FIND_CATALOG ALTRET (TOU$ND_ALTRETURN) ;

   5875  2 000046   000245 701000 2                  TSX1    ND_FIND_CATALOG
         2 000047   000070 702000 2                  TSX2    TOU$ND_ALTRETURN

      214     5876    1      RETURN ;

   5876  2 000050   000000 702200 xent               TSX2  ! X66_ARET

      215     5877
      216     5878        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:74   
      217     5879        /*D*  NAME:        TOU$ND_SAVE_CATALOG_CONTROL
      218     5880              ENTRY:
      219     5881              AUTHOR:      Scott S. Sheppard
      220     5882              PURPOSE:     Save Catalog Control Entry Point
      221     5883              INTERFACE:   ND_SAVE_CATALOG_CONTROL
      222     5884              DESCRIPTION: This entry point is called to save the catalog
      223     5885                           control record from the tempfile to the deckfile.
      224     5886        */
      225     5887
      226     5888    1   TOU$ND_SAVE_CATALOG_CONTROL: ENTRY ALTRET ;

   5888  2 000051   000000 700200 xent  TOU$ND_SAVE* TSX0  ! X66_AUTO_0
         2 000052   000030 000000                    ZERO    24,0

      227     5889
      228     5890    1      CALL ND_SAVE_CATALOG_CONTROL ALTRET (TOU$ND_ALTRETURN) ;

   5890  2 000053   001630 701000 2                  TSX1    ND_SAVE_CATALOG_CONTROL
         2 000054   000070 702000 2                  TSX2    TOU$ND_ALTRETURN

      229     5891    1      RETURN ;

   5891  2 000055   000000 702200 xent               TSX2  ! X66_ARET

      230     5892
      231     5893        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:75   
      232     5894        /*D*  NAME:        TOU$ND_SAVE_OBJECT_DECK
      233     5895              ENTRY:
      234     5896              AUTHOR:      Scott S. Sheppard
      235     5897              PURPOSE:     Save Object Deck Entry Point
      236     5898              INTERFACE:   ND_SAVE_OBJECT_DECK
      237     5899              DESCRIPTION: This entry point is called to save an object deck
      238     5900                           from the tempfile to the deckfile.
      239     5901        */
      240     5902
      241     5903    1   TOU$ND_SAVE_OBJECT_DECK: ENTRY ALTRET ;

   5903  2 000056   000000 700200 xent  TOU$ND_SAVE* TSX0  ! X66_AUTO_0
         2 000057   000030 000000                    ZERO    24,0

      242     5904
      243     5905    1      CALL ND_SAVE_OBJECT_DECK ALTRET (TOU$ND_ALTRETURN) ;

   5905  2 000060   001664 701000 2                  TSX1    ND_SAVE_OBJECT_DECK
         2 000061   000070 702000 2                  TSX2    TOU$ND_ALTRETURN

      244     5906    1      RETURN ;

   5906  2 000062   000000 702200 xent               TSX2  ! X66_ARET

      245     5907
      246     5908        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:76   
      247     5909        /*D*  NAME:        TOU$ND_SAVE_LAST_DECK#
      248     5910              ENTRY:
      249     5911              AUTHOR:      Scott S. Sheppard
      250     5912              PURPOSE:     Save Last Deck Number Entry Point
      251     5913              INTERFACE:   ND_SAVE_LAST_DECK#
      252     5914              DESCRIPTION: This entry point is called to save the last deck
      253     5915                           number from the tempfile to the deckfile.
      254     5916        */
      255     5917
      256     5918    1   TOU$ND_SAVE_LAST_DECK#: ENTRY ALTRET ;

   5918  2 000063   000000 700200 xent  TOU$ND_SAVE* TSX0  ! X66_AUTO_0
         2 000064   000030 000000                    ZERO    24,0

      257     5919
      258     5920    1      CALL ND_SAVE_LAST_DECK# ALTRET (TOU$ND_ALTRETURN) ;

   5920  2 000065   002114 701000 2                  TSX1    ND_SAVE_LAST_DECK#
         2 000066   000070 702000 2                  TSX2    TOU$ND_ALTRETURN

      259     5921    1      RETURN ;

   5921  2 000067   000000 702200 xent               TSX2  ! X66_ARET

      260     5922
      261     5923        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:77   
      262     5924        /*I*  NAME:        TOU$ND_ALTRETURN
      263     5925              LABEL:
      264     5926              AUTHOR:      Scott S. Sheppard
      265     5927              PURPOSE:     Alternate Return Label
      266     5928              DESCRIPTION: This label is used as the alternate return label
      267     5929                           for all of the entry points in TOU$NEWDECK.
      268     5930        */
      269     5931
      270     5932    1   TOU$ND_ALTRETURN:
      271     5933    1      ALTRETURN ;

   5933  2 000070   000000 702200 xent  TOU$ND_ALTR* TSX2  ! X66_AALT

      272     5934
      273     5935        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:78   
      274     5936        /*I*  NAME:        ND_INIT_DUP
      275     5937              AUTHOR:      Scott S. Sheppard
      276     5938              PURPOSE:     Initilization
      277     5939              INTERFACE:   None called.
      278     5940              INPUT:       Set of System Equates.
      279     5941              OUTPUT:      DUP - Deckfile Utility Parameter
      280     5942              DESCRIPTION: This procedure initializes variables to
      281     5943                           appropriate starting values.
      282     5944        */
      283     5945
      284     5946    1   ND_INIT_DUP: PROC ;

   5946  2 000071   200004 741300       ND_INIT_DUP  STX1  ! 4,,AUTO

      285     5947
      286     5948        /* Code */
      287     5949
      288     5950    2      DUP.HDR_CODE = %H$NEWDECK ;

   5950  2 000072   001370 235007                    LDA     760,DL
         2 000073   000021 755000 xsym               STA     DUP+17

      289     5951    2      DUP.LINE_VFC = %SKIP_WRITE ;

   5951  2 000074   142000 236003                    LDQ     50176,DU
         2 000075   000026 756000 xsym               STQ     DUP+22

      290     5952    2      DUP.FORCE_NEW_PAGE = %TRUE ;

   5952  2 000076   400000 236003                    LDQ     -131072,DU
         2 000077   000056 756000 xsym               STQ     DUP+46

      291     5953    2      DUP.IFAD.ME_ALLOWED = %FALSE ;

   5953  2 000100   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000101   000057 356000 xsym               ANSQ    DUP+47

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:79   
      292     5954    2      DUP.IFAD.ENTERED = %FALSE ;

   5954  2 000102   000000 236000 3                  LDQ     0
         2 000103   000057 356000 xsym               ANSQ    DUP+47

      293     5955    2      DUP.DF.ENTERED = %FALSE ;

   5955  2 000104   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000105   000104 356000 xsym               ANSQ    DUP+68

      294     5956    2      DUP.DF.OPEN_TYPE = %UPDATE_FILE ;

   5956  2 000106   000001 235007                    LDA     1,DL
         2 000107   000105 755000 xsym               STA     DUP+69

      295     5957    2      DUP.DF.REPORT_ERROR = %TRUE ;

   5957  2 000110   400000 236007                    LDQ     -131072,DL
         2 000111   000104 256000 xsym               ORSQ    DUP+68

      296     5958    2      DUP.DF.CLOSE_TYPE = %SAVE_FILE ;

   5958  2 000112   000106 450000 xsym               STZ     DUP+70

      297     5959    2      RETURN ;

   5959  2 000113   000001 702211                    TSX2  ! 1,X1

      298     5960
      299     5961    2   END ND_INIT_DUP ;
      300     5962        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:80   
      301     5963        /*I*  NAME:        ND_COMMAND_SETUP
      302     5964              AUTHOR:      Scott S. Sheppard
      303     5965              PURPOSE:     Sets up NEWDECK Command
      304     5966              INTERFACE:   TOU$DU_SET_IFAD_FID
      305     5967                           TOU$DU_SET_DF_FID
      306     5968              INPUT:       DUP.CMD$ - pointer to the parse control block
      307     5969              OUTPUT:      DUP.DF.HOLD_AREA
      308     5970                           DUP.DF.HOLD_AREA_LGTH
      309     5971                           DUP.IFAD.ENTERED
      310     5972                           DUP.DF.ENTERED
      311     5973                           CATALOG_SEARCH_KEY.DATA
      312     5974                           OBJECT_SEARCH_KEY.DATA
      313     5975              DESCRIPTION: This procedure sets up the NEWDECK command from the
      314     5976                           information  entered  by  the  user.  DUP.CMD$ is a
      315     5977                           pointer  to a   parse control block  that  contains
      316     5978                           the tokens entered by the user.
      317     5979                           COMMAND FORMS:
      318     5980              Case 1: ND <catalog key> <object key>
      319     5981              Case 2: ND <ifad fid> <catalog key> <object key>
      320     5982              Case 3: ND <catalog key> <object key> INTO <deckfile fid>
      321     5983              Case 4: ND <ifad fid> <catalog key> <object key> INTO <deckfile fid>
      322     5984        */
      323     5985
      324     5986    1   ND_COMMAND_SETUP: PROC ALTRET ;

   5986  2 000114   200004 741300       ND_COMMAND_* STX1  ! 4,,AUTO

      325     5987
      326     5988    2      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      327     5989    2      DCL OUTBLK$                    PTR ALIGNED ;
      328     5990           %PARSE$OUT (STCLASS = BASED) ;
      329     6035           %PARSE$SYM (STCLASS = BASED) ;
      330     6073           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:81   
      331     6074        /* Code */
      332     6075
      333     6076    3      DO OUTBLK# = 0 TO DUP.CMD$ -> OUT$BLK.NSUBLKS - 1 ;

   6076  2 000115   200005 450100                    STZ     OUTBLK#,,AUTO
         2 000116   000220 710000 2                  TRA     s:6094+3

      334     6077    3         OUTBLK$ = DUP.CMD$ -> OUT$BLK.SUBLK$(OUTBLK#) ;

   6077  2 000117   000017 470400 xsym               LDP0    DUP+15
         2 000120   200005 720100                    LXL0    OUTBLK#,,AUTO
         2 000121   000003 236110                    LDQ     3,X0,PR0
         2 000122   200006 756100                    STQ     OUTBLK$,,AUTO

      335     6078    4         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;

   6078  2 000123   200006 471500                    LDP1    OUTBLK$,,AUTO
         2 000124   100000 721100                    LXL1    0,,PR1
         2 000125   000012 101003                    CMPX1   10,DU
         2 000126   000130 602011 2                  TNC     s:6078+5,X1
         2 000127   000215 710000 2                  TRA     s:6094
         2 000130   000215 710000 2                  TRA     s:6094
         2 000131   000142 710000 2                  TRA     s:6080
         2 000132   000215 710000 2                  TRA     s:6094
         2 000133   000215 710000 2                  TRA     s:6094
         2 000134   000177 710000 2                  TRA     s:6089
         2 000135   000215 710000 2                  TRA     s:6094
         2 000136   000215 710000 2                  TRA     s:6094
         2 000137   000215 710000 2                  TRA     s:6094
         2 000140   000161 710000 2                  TRA     s:6085
         2 000141   000170 710000 2                  TRA     s:6087

      336     6079    4            CASE (%IFAD_FID) ;

      337     6080    4               DUP.IFAD.ENTERED = %TRUE ;

   6080  2 000142   000400 236003                    LDQ     256,DU
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:82   
         2 000143   000057 256000 xsym               ORSQ    DUP+47

      338     6081    4               DUP.HOLD_AREA = OUTBLK$ -> OUT$SYM.TEXT ;

   6081  2 000144   100004 236100                    LDQ     4,,PR1
         2 000145   000033 772000                    QRL     27
         2 000146   000000 621006                    EAX1    0,QL
         2 000147   040000 100540                    MLR     fill='040'O
         2 000150   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         2 000151   000142 000050 xsym               ADSC9   DUP+98                   cn=0,n=40

      339     6082    4               DUP.HOLD_AREA_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;

   6082  2 000152   100004 236100                    LDQ     4,,PR1
         2 000153   000033 772000                    QRL     27
         2 000154   000154 756000 xsym               STQ     DUP+108

      340     6083    4               CALL TOU$DU_SET_IFAD_FID ALTRET (ERROR) ;

   6083  2 000155   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000156   000000 701000 xent               TSX1    TOU$DU_SET_IFAD_FID
         2 000157   000243 702000 2                  TSX2    ERROR
         2 000160   000215 710000 2                  TRA     s:6094

      341     6084    4            CASE (%CATKEY) ;

      342     6085    4               CATALOG_SEARCH_KEY.DATA = OUTBLK$ -> OUT$SYM.TEXT ;

   6085  2 000161   100004 236100                    LDQ     4,,PR1
         2 000162   000033 772000                    QRL     27
         2 000163   000000 622006                    EAX2    0,QL
         2 000164   040000 100540                    MLR     fill='040'O
         2 000165   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         2 000166   000000 000025 xsym               ADSC9   CATALOG_SEARCH_KEY       cn=0,n=21
         2 000167   000215 710000 2                  TRA     s:6094

      343     6086    4            CASE (%OBJKEY) ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:83   

      344     6087    4               OBJECT_SEARCH_KEY.DATA = OUTBLK$ -> OUT$SYM.TEXT ;

   6087  2 000170   100004 236100                    LDQ     4,,PR1
         2 000171   000033 772000                    QRL     27
         2 000172   000000 622006                    EAX2    0,QL
         2 000173   040000 100540                    MLR     fill='040'O
         2 000174   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         2 000175   000000 000027 0                  ADSC9   OBJECT_SEARCH_KEY        cn=0,n=23
         2 000176   000215 710000 2                  TRA     s:6094

      345     6088    4            CASE (%DECKFILE_FID) ;

      346     6089    4               DUP.DF.ENTERED = %TRUE ;

   6089  2 000177   400000 236003                    LDQ     -131072,DU
         2 000200   000104 256000 xsym               ORSQ    DUP+68

      347     6090    4               DUP.HOLD_AREA = OUTBLK$ -> OUT$SYM.TEXT ;

   6090  2 000201   100004 236100                    LDQ     4,,PR1
         2 000202   000033 772000                    QRL     27
         2 000203   000000 621006                    EAX1    0,QL
         2 000204   040000 100540                    MLR     fill='040'O
         2 000205   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         2 000206   000142 000050 xsym               ADSC9   DUP+98                   cn=0,n=40

      348     6091    4               DUP.HOLD_AREA_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;

   6091  2 000207   100004 236100                    LDQ     4,,PR1
         2 000210   000033 772000                    QRL     27
         2 000211   000154 756000 xsym               STQ     DUP+108

      349     6092    4               CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;

   6092  2 000212   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000213   000000 701000 xent               TSX1    TOU$DU_SET_DF_FID
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:84   
         2 000214   000243 702000 2                  TSX2    ERROR

      350     6093    4         END /* CASE */ ;

      351     6094    3      END /* DO */ ;

   6094  2 000215   200005 235100                    LDA     OUTBLK#,,AUTO
         2 000216   000001 035007                    ADLA    1,DL
         2 000217   200005 755100                    STA     OUTBLK#,,AUTO
         2 000220   000017 470400 xsym               LDP0    DUP+15
         2 000221   000001 236100                    LDQ     1,,PR0
         2 000222   000022 772000                    QRL     18
         2 000223   200005 116100                    CMPQ    OUTBLK#,,AUTO
         2 000224   000226 600000 2                  TZE     s:6096
         2 000225   000117 603000 2                  TRC     s:6077

      352     6095
      353     6096    2      IF DUP.IFAD.ENTERED

   6096  2 000226   000057 236000 xsym               LDQ     DUP+47
         2 000227   000400 316003                    CANQ    256,DU
         2 000230   000234 601000 2                  TNZ     s:6099

      354     6097    2      THEN /* FID set from DEER command */ ;
      355     6098    2      ELSE CALL TOU$DU_SET_IFAD_FID ALTRET (ERROR) ;

   6098  2 000231   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000232   000000 701000 xent               TSX1    TOU$DU_SET_IFAD_FID
         2 000233   000243 702000 2                  TSX2    ERROR

      356     6099    2      IF DUP.DF.ENTERED

   6099  2 000234   000104 234000 xsym               SZN     DUP+68
         2 000235   000241 604000 2                  TMI     s:6102

      357     6100    2      THEN /* FID set from DEER command */ ;
      358     6101    2      ELSE CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:85   

   6101  2 000236   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000237   000000 701000 xent               TSX1    TOU$DU_SET_DF_FID
         2 000240   000243 702000 2                  TSX2    ERROR

      359     6102    2      RETURN ;

   6102  2 000241   200004 221300                    LDX1  ! 4,,AUTO
         2 000242   000001 702211                    TSX2  ! 1,X1

      360     6103
      361     6104    2   ERROR:
      362     6105    2      ALTRETURN ;

   6105  2 000243   200004 221300       ERROR        LDX1  ! 4,,AUTO
         2 000244   000000 702211                    TSX2  ! 0,X1

      363     6106
      364     6107    2   END ND_COMMAND_SETUP ;
      365     6108        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:86   
      366     6109        /*I* NAME:         ND_FIND_CATALOG
      367     6110             AUTHOR:       Scott S. Sheppard
      368     6111             PURPOSE:      Sets Master Entry and Catalog Keys
      369     6112             INTERFACE:    ND_GET_CATALOG_TABLE      ND_SELECT_CATALOG
      370     6113                           ND_FETCH_CATALOG_TABLE    ND_FREE_CATALOG_TABLE_BUFFER
      371     6114                           ND_SEARCH_CATALOG_TABLE
      372     6115             DATA:         CATALOGS overlay structure
      373     6116                            COUNT - number of catalogs in the deckfile
      374     6117                            E - table entries (1 ... 25)
      375     6118                             DATA - ASCII parts of the catalog keys
      376     6119                             DECK# - binary deck numbers of the catalogs
      377     6120                            MATCHED - table of matching catalogs
      378     6121                             COUNT - number of matching catalogs
      379     6122                             CATX - indexes into E of matching catalogs
      380     6123             DESCRIPTION:  This  procedure finds  the appropriate catalog
      381     6124                           by  setting the  master entry  key and catalog
      382     6125                           key  to  correspond  to  the requested catalog
      383     6126                           (whose value is stored in CATALOG_SEARCH_KEY).
      384     6127                           The  procedure acquires  memory dynamically to
      385     6128                           be  used for  a table  of catalog entries. The
      386     6129                           table is then  initialized by reading the list
      387     6130                           of catalogs from  the deckfile. Next the table
      388     6131                           is searched  and a list of  all catalogs which
      389     6132                           matched  the catalog  search key  is recorded.
      390     6133                           The  proper catalog is  then selected from the
      391     6134                           list of matching catalogs. If only one catalog
      392     6135                           table entry matched the catalog search string,
      393     6136                           the one is used. If more than one matched, the
      394     6137                           user  is asked to  pick one. Of  course, if no
      395     6138                           catalog  table   entries  matched  the  search
      396     6139                           string, an error message is printed. After the
      397     6140                           proper catalog has  been selected, the catalog
      398     6141                           table  is no  longer needed  so its  memory is
      399     6142                           released back to the system.
      400     6143        */
      401     6144        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:87   
      402     6145    1   ND_FIND_CATALOG: PROC ALTRET ;

   6145  2 000245   200004 741300       ND_FIND_CAT* STX1  ! 4,,AUTO

      403     6146
      404     6147    2      DCL 1 CATALOGS_V STATIC DALIGNED,
      405     6148    2            2 *                      UBIN WORD UNAL INIT (0),
      406     6149    2            2 PTR$                   PTR UNAL INIT (ADDR(NIL)) ;
      407     6150    2      DCL 1 CATALOGS BASED (CATALOGS_V.PTR$),
      408     6151    2            2 COUNT                  UBIN HALF HALIGNED,
      409     6152    2            2 E                      (0:25),
      410     6153    2              3 DATA                 CHAR (21) CALIGNED,
      411     6154    2              3 DECK#                UBIN HALF CALIGNED,
      412     6155    2            2 MATCHED,
      413     6156    2              3 COUNT                UBIN HALF HALIGNED,
      414     6157    2              3 CATX                 (0:25) UBIN HALF HALIGNED ;
      415     6158
      416     6159        /* Code */
      417     6160
      418     6161    2      CALL ND_GET_CATALOG_TABLE_BUFFER ALTRET (ERROR) ;

   6161  2 000246   000266 701000 2                  TSX1    ND_GET_CATALOG_TABLE_BUFFER
         2 000247   000262 702000 2                  TSX2    ERROR

      419     6162    2      CALL ND_FETCH_CATALOG_TABLE ALTRET (ERROR) ;

   6162  2 000250   000310 701000 2                  TSX1    ND_FETCH_CATALOG_TABLE
         2 000251   000262 702000 2                  TSX2    ERROR

      420     6163    2      CALL ND_SEARCH_CATALOG_TABLE ;

   6163  2 000252   000401 701000 2                  TSX1    ND_SEARCH_CATALOG_TABLE
         2 000253   000000 011000                    NOP     0

      421     6164    2      CALL ND_SELECT_CATALOG ALTRET (ERROR) ;

   6164  2 000254   000460 701000 2                  TSX1    ND_SELECT_CATALOG
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:88   
         2 000255   000262 702000 2                  TSX2    ERROR

      422     6165    2      CALL ND_FREE_CATALOG_TABLE_BUFFER ;

   6165  2 000256   001171 701000 2                  TSX1    ND_FREE_CATALOG_TABLE_BUFFER
         2 000257   000000 011000                    NOP     0

      423     6166    2      RETURN ;

   6166  2 000260   200004 221300                    LDX1  ! 4,,AUTO
         2 000261   000001 702211                    TSX2  ! 1,X1

      424     6167
      425     6168    2   ERROR:
      426     6169    2      CALL ND_FREE_CATALOG_TABLE_BUFFER ;

   6169  2 000262   001171 701000 2     ERROR        TSX1    ND_FREE_CATALOG_TABLE_BUFFER
         2 000263   000000 011000                    NOP     0

      427     6170    2      ALTRETURN ;

   6170  2 000264   200004 221300                    LDX1  ! 4,,AUTO
         2 000265   000000 702211                    TSX2  ! 0,X1

      428     6171
      429     6172        /* END ND_FIND_CATALOG */
      430     6173        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:89   
      431     6174        /*I* NAME:         ND_GET_CATALOG_TABLE_BUFFER
      432     6175             AUTHOR:       Scott S. Sheppard
      433     6176             PURPOSE:      Acquires dynamic memory
      434     6177             INTERFACE:    TOU$DU_GET_DATA_SEGMENT
      435     6178             PARAMETERS:   None passed.
      436     6179             DATA:         CATALOGS_V - output
      437     6180                           CATALOGS - output
      438     6181                           DUP.NUM_WORDS - output
      439     6182                           DUP.DS - input / output
      440     6183             DESCRIPTION:  This procedure gets  enough memory space for a
      441     6184                           table  of catalog  entries. The  table is then
      442     6185                           initialized to zeroes.
      443     6186        */
      444     6187
      445     6188    2   ND_GET_CATALOG_TABLE_BUFFER: PROC ALTRET ;

   6188  2 000266   200006 741300       ND_GET_CATA* STX1  ! OUTBLK$,,AUTO

      446     6189
      447     6190        /* Code */
      448     6191
      449     6192    3      DUP.NUM_WORDS = 164 ;

   6192  2 000267   000244 220003                    LDX0    164,DU
         2 000270   000001 740000 xsym               STX0    DUP+1

      450     6193    3      DUP.DS_V = CATALOGS_V ;

   6193  2 000271   000006 237000 0                  LDAQ    CATALOGS_V
         2 000272   000002 757000 xsym               STAQ    DUP+2

      451     6194    3      CALL TOU$DU_GET_DATA_SEGMENT ALTRET (ERROR) ;

   6194  2 000273   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000274   000000 701000 xent               TSX1    TOU$DU_GET_DATA_SEGMENT
         2 000275   000306 702000 2                  TSX2    ERROR

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:90   
      452     6195    3      CATALOGS_V = DUP.DS_V ;

   6195  2 000276   000002 237000 xsym               LDAQ    DUP+2
         2 000277   000006 757000 0                  STAQ    CATALOGS_V

      453     6196    3      CATALOGS = '0'B ;

   6196  2 000300   000007 470400 0                  LDP0    CATALOGS_V+1
         2 000301   000100 100400                    MLR     fill='000'O
         2 000302   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000303   000000 001216                    ADSC9   0,,PR0                   cn=0,n=654

      454     6197    3      RETURN ;

   6197  2 000304   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000305   000001 702211                    TSX2  ! 1,X1

      455     6198
      456     6199    3   ERROR:
      457     6200    3      ALTRETURN ;

   6200  2 000306   200006 221300       ERROR        LDX1  ! OUTBLK$,,AUTO
         2 000307   000000 702211                    TSX2  ! 0,X1

      458     6201
      459     6202    3   END ND_GET_CATALOG_TABLE_BUFFER ;
      460     6203        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:91   
      461     6204        /*I* NAME:         ND_FETCH_CATALOG_TABLE
      462     6205             AUTHOR:       Scott S. Sheppard
      463     6206             PURPOSE:      Sets up the Catalog Table
      464     6207             INTERFACE:    TOU$DFU_DF_RD_MASTER_CONTROL
      465     6208                           TOU$DFU_DF_RD_MASTER_ENTRY
      466     6209             PARAMETERS:   None passed.
      467     6210             DATA:         MASTER_DATA - input / output
      468     6211                           MASTER_ENTRY_KEY - input / output
      469     6212                           CATALOG_KEY - input / output
      470     6213                           CATALOGS - output
      471     6214             DESCRIPTION:  This  procedure loads  the catalog  table with
      472     6215                           current  information  from  the  deckfile. The
      473     6216                           master control record is read to determine how
      474     6217                           many  catalogs are  in the  deckfile. Then the
      475     6218                           catalog  key  of  each  catalog  is  read  and
      476     6219                           stored.
      477     6220        */
      478     6221
      479     6222    2   ND_FETCH_CATALOG_TABLE: PROC ALTRET ;

   6222  2 000310   200006 741300       ND_FETCH_CA* STX1  ! OUTBLK$,,AUTO

      480     6223
      481     6224    3      CALL TOU$DFU_DF_RD_MASTER_CONTROL ALTRET (ERROR) ;

   6224  2 000311   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000312   000000 701000 xent               TSX1    TOU$DFU_DF_RD_MASTER_CONTROL
         2 000313   000377 702000 2                  TSX2    ERROR

      482     6225    3      MASTER_ENTRY_KEY.DECK# = MASTER_DATA.DECK# ;

   6225  2 000314   000000 236000 xsym               LDQ     MASTER_DATA
         2 000315   000011 772000                    QRL     9
         2 000316   000000 552030 xsym               STBQ    MASTER_ENTRY_KEY,'30'O

      483     6226    4      DO MASTER_ENTRY_KEY.ENTRY# = 1 TO MASTER_DATA.ENTRY_COUNT ;

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:92   
   6226  2 000317   000000 101400                    MRL     fill='000'O
         2 000320   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         2 000321   000000 600002 xsym               ADSC9   MASTER_ENTRY_KEY         cn=3,n=2
         2 000322   000360 710000 2                  TRA     s:6230+9

      484     6227    4         CALL TOU$DFU_DF_RD_MASTER_ENTRY ALTRET (ERROR) ;

   6227  2 000323   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000324   000000 701000 xent               TSX1    TOU$DFU_DF_RD_MASTER_ENTRY
         2 000325   000377 702000 2                  TSX2    ERROR

      485     6228    4         CATALOGS.E.DATA(MASTER_ENTRY_KEY.ENTRY#) = CATALOG_KEY.DATA ;

   6228  2 000326   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 000327   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 000330   000033 773000                    LRL     27
         2 000331   777777 376007                    ANQ     -1,DL
         2 000332   000027 402007                    MPY     23,DL
         2 000333   000007 470400 0                  LDP0    CATALOGS_V+1
         2 000334   040106 100400                    MLR     fill='040'O
         2 000335   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 000336   000000 400025                    ADSC9   0,Q,PR0                  cn=2,n=21

      486     6229    4         CATALOGS.E.DECK#(MASTER_ENTRY_KEY.ENTRY#) = CATALOG_KEY.DECK# ;

   6229  2 000337   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 000340   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 000341   000033 773000                    LRL     27
         2 000342   777777 376007                    ANQ     -1,DL
         2 000343   000027 402007                    MPY     23,DL
         2 000344   000106 100400                    MLR     fill='000'O
         2 000345   000005 400002 xsym               ADSC9   CATALOG_KEY+5            cn=2,n=2
         2 000346   000005 600002                    ADSC9   5,Q,PR0                  cn=3,n=2

      487     6230    4      END /* DO */ ;

   6230  2 000347   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:93   
         2 000350   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 000351   000033 773000                    LRL     27
         2 000352   777777 376007                    ANQ     -1,DL
         2 000353   000001 036007                    ADLQ    1,DL
         2 000354   200022 756100                    STQ     DIGIT_VALUE+1,,AUTO
         2 000355   000000 101500                    MRL     fill='000'O
         2 000356   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 000357   000000 600002 xsym               ADSC9   MASTER_ENTRY_KEY         cn=3,n=2
         2 000360   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 000361   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 000362   000033 773000                    LRL     27
         2 000363   777777 376007                    ANQ     -1,DL
         2 000364   200023 756100                    STQ     DIGIT_VALUE+2,,AUTO
         2 000365   000000 236000 xsym               LDQ     MASTER_DATA
         2 000366   777777 376007                    ANQ     -1,DL
         2 000367   200023 116100                    CMPQ    DIGIT_VALUE+2,,AUTO
         2 000370   000323 605000 2                  TPL     s:6227

      488     6231    3      CATALOGS.COUNT = MASTER_DATA.ENTRY_COUNT ;

   6231  2 000371   000007 470400 0                  LDP0    CATALOGS_V+1
         2 000372   000100 100400                    MLR     fill='000'O
         2 000373   000000 400002 xsym               ADSC9   MASTER_DATA              cn=2,n=2
         2 000374   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      489     6232    3      RETURN ;

   6232  2 000375   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000376   000001 702211                    TSX2  ! 1,X1

      490     6233
      491     6234    3   ERROR:
      492     6235    3      ALTRETURN ;

   6235  2 000377   200006 221300       ERROR        LDX1  ! OUTBLK$,,AUTO
         2 000400   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:94   
      493     6236
      494     6237    3   END ND_FETCH_CATALOG_TABLE ;
      495     6238        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:95   
      496     6239        /*I* NAME:         ND_SEARCH_CATALOG_TABLE
      497     6240             AUTHOR:       Scott S. Sheppard
      498     6241             PURPOSE:      finds matching catalogs
      499     6242             INTERFACE:    None called.
      500     6243             PARAMETERS:   None passed.
      501     6244             DATA:         CATALOGS - input / output
      502     6245                           CATALOG_SEARCH_KEY - input
      503     6246             DESCRIPTION:  This procedure compares the catalog search key
      504     6247                           to  all  entries  of  the  catalog  table  and
      505     6248                           creates a list of matching entries.
      506     6249        */
      507     6250
      508     6251    2   ND_SEARCH_CATALOG_TABLE: PROC ;

   6251  2 000401   200006 741300       ND_SEARCH_C* STX1  ! OUTBLK$,,AUTO

      509     6252
      510     6253    3      DCL I UBIN HALF HALIGNED ;
      511     6254
      512     6255        /* Code */
      513     6256
      514     6257    3      CATALOGS.MATCHED.COUNT = 0 ;

   6257  2 000402   000007 470400 0                  LDP0    CATALOGS_V+1
         2 000403   000100 101400                    MRL     fill='000'O
         2 000404   000002 000004 xsym               ADSC9   B_VECTNIL+2              cn=0,n=4
         2 000405   000226 000002                    ADSC9   150,,PR0                 cn=0,n=2

      515     6258    4      DO I = 1 TO CATALOGS.COUNT ;

   6258  2 000406   000001 220003                    LDX0    1,DU
         2 000407   200007 740100                    STX0    I,,AUTO
         2 000410   000445 710000 2                  TRA     s:6265+3

      516     6259    4         IF CATALOGS.E.DATA(I) = CATALOG_SEARCH_KEY.DATA

   6259  2 000411   200007 236100                    LDQ     I,,AUTO
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:96   
         2 000412   000022 772000                    QRL     18
         2 000413   000027 402007                    MPY     23,DL
         2 000414   000007 470400 0                  LDP0    CATALOGS_V+1
         2 000415   040000 106506                    CMPC    fill='040'O
         2 000416   000000 400025                    ADSC9   0,Q,PR0                  cn=2,n=21
         2 000417   000000 000025 xsym               ADSC9   CATALOG_SEARCH_KEY       cn=0,n=21
         2 000420   000442 601000 2                  TNZ     s:6265

      517     6260    5         THEN DO ;

      518     6261    5                 CATALOGS.MATCHED.COUNT = CATALOGS.MATCHED.COUNT + 1 ;

   6261  2 000421   000100 101500                    MRL     fill='000'O
         2 000422   000226 000002                    ADSC9   150,,PR0                 cn=0,n=2
         2 000423   200023 000004                    ADSC9   DIGIT_VALUE+2,,AUTO      cn=0,n=4
         2 000424   200023 236100                    LDQ     DIGIT_VALUE+2,,AUTO
         2 000425   000001 036007                    ADLQ    1,DL
         2 000426   200022 756100                    STQ     DIGIT_VALUE+1,,AUTO
         2 000427   000100 101500                    MRL     fill='000'O
         2 000430   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 000431   000226 000002                    ADSC9   150,,PR0                 cn=0,n=2

      519     6262    5                 CATALOGS.MATCHED.CATX(CATALOGS.MATCHED.COUNT) = I ;

   6262  2 000432   000100 101500                    MRL     fill='000'O
         2 000433   000226 000002                    ADSC9   150,,PR0                 cn=0,n=2
         2 000434   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 000435   200022 236100                    LDQ     DIGIT_VALUE+1,,AUTO
         2 000436   000001 736000                    QLS     1
         2 000437   000106 100500                    MLR     fill='000'O
         2 000440   200007 000002                    ADSC9   I,,AUTO                  cn=0,n=2
         2 000441   000226 400002                    ADSC9   150,Q,PR0                cn=2,n=2

      520     6263    5              END /* THEN */ ;

      521     6264    4         ELSE /* Do nothing. */ ;
      522     6265    4      END /* DO */ ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:97   

   6265  2 000442   200007 220100                    LDX0    I,,AUTO
         2 000443   000001 621010                    EAX1    1,X0
         2 000444   200007 741100                    STX1    I,,AUTO
         2 000445   200007 235100                    LDA     I,,AUTO
         2 000446   000022 771000                    ARL     18
         2 000447   200022 755100                    STA     DIGIT_VALUE+1,,AUTO
         2 000450   000100 101500                    MRL     fill='000'O
         2 000451   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         2 000452   200023 000004                    ADSC9   DIGIT_VALUE+2,,AUTO      cn=0,n=4
         2 000453   200023 236100                    LDQ     DIGIT_VALUE+2,,AUTO
         2 000454   200022 116100                    CMPQ    DIGIT_VALUE+1,,AUTO
         2 000455   000411 605000 2                  TPL     s:6259

      523     6266    3      RETURN ;

   6266  2 000456   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000457   000001 702211                    TSX2  ! 1,X1

      524     6267
      525     6268    3   END ND_SEARCH_CATALOG_TABLE ;
      526     6269        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:98   
      527     6270        /*I* NAME:         ND_SELECT_CATALOG
      528     6271             AUTHOR:       Scott S. Sheppard
      529     6272             PURPOSE:      Sets up Master Entry and Catalog keys
      530     6273             INTERFACE:    ND_SHOW_CATALOG_CHOICES
      531     6274                           ND_GET_CATALOG_CHOICE
      532     6275                           TOU$DU_USER_WRITE
      533     6276             PARAMETERS:   None passed.
      534     6277             DATA:         CATALOGS - input
      535     6278                           MASTER_ENTRY_KEY
      536     6279                           CATALOG_KEY
      537     6280             DESCRIPTION:  CATALOG.MATCHED.COUNT  contains the  number of
      538     6281                           catalogs in the  deckfile whose ASCII portions
      539     6282                           of  their  catalog  keys  matched  the catalog
      540     6283                           search  string. Action is  taken to select the
      541     6284                           catalog based on this count. If the count is 0
      542     6285                           (NONE),  the catalog search  key specified did
      543     6286                           not match any entries in the table and is thus
      544     6287                           not  a legal catalog  to specify as  part of a
      545     6288                           DEER command. If the  count is 1 (UNIQUE), the
      546     6289                           catalog key  can be set directly  from the one
      547     6290                           entry. When the count is 2 or more (ELSE), the
      548     6291                           user  must be  prompted to  determine which of
      549     6292                           the  catalog table entries  should be selected
      550     6293                           as the catalog to be used.
      551     6294        */
      552     6295        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:99   
      553     6296    2   ND_SELECT_CATALOG: PROC ALTRET ;

   6296  2 000460   200006 741300       ND_SELECT_C* STX1  ! OUTBLK$,,AUTO

      554     6297
      555     6298    3      DCL INX UBIN HALF HALIGNED ;
      556     6299
      557     6300        /* Code */
      558     6301
      559     6302    4      DO CASE (CATALOGS.MATCHED.COUNT) ;

   6302  2 000461   000007 470400 0                  LDP0    CATALOGS_V+1
         2 000462   000100 100500                    MLR     fill='000'O
         2 000463   000226 000002                    ADSC9   150,,PR0                 cn=0,n=2
         2 000464   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 000465   200022 220100                    LDX0    DIGIT_VALUE+1,,AUTO
         2 000466   000002 100003                    CMPX0   2,DU
         2 000467   000471 602010 2                  TNC     s:6302+8,X0
         2 000470   000531 710000 2                  TRA     s:6314
         2 000471   000473 710000 2                  TRA     s:6304
         2 000472   000505 710000 2                  TRA     s:6309

      560     6303    4         CASE (0) ;

      561     6304    4            DUP.MSG_CODE = %E$NFC_NO_CAT_IN_DF ;

   6304  2 000473   000714 235007                    LDA     460,DL
         2 000474   000020 755000 xsym               STA     DUP+16

      562     6305    4            CATALOG_KEY.DATA = CATALOG_SEARCH_KEY.DATA ;

   6305  2 000475   040000 100400                    MLR     fill='040'O
         2 000476   000000 000025 xsym               ADSC9   CATALOG_SEARCH_KEY       cn=0,n=21
         2 000477   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21

      563     6306    4            CALL TOU$DU_USER_WRITE ;

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:100  
   6306  2 000500   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000501   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000502   000000 011000                    NOP     0

      564     6307    4            ALTRETURN ;

   6307  2 000503   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000504   000000 702211                    TSX2  ! 0,X1

      565     6308    4         CASE (1) ;

      566     6309    4            MASTER_ENTRY_KEY.ENTRY# = CATALOGS.MATCHED.CATX(1) ;

   6309  2 000505   000000 100500                    MLR     fill='000'O
         2 000506   000227 000002                    ADSC9   151,,PR0                 cn=0,n=2
         2 000507   000000 600002 xsym               ADSC9   MASTER_ENTRY_KEY         cn=3,n=2

      567     6310    4            CATALOG_KEY.DATA = CATALOGS.E.DATA(CATALOGS.MATCHED.CATX(1)) ;

   6310  2 000510   000100 101500                    MRL     fill='000'O
         2 000511   000227 000002                    ADSC9   151,,PR0                 cn=0,n=2
         2 000512   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 000513   200022 236100                    LDQ     DIGIT_VALUE+1,,AUTO
         2 000514   000027 402007                    MPY     23,DL
         2 000515   040000 100506                    MLR     fill='040'O
         2 000516   000000 400025                    ADSC9   0,Q,PR0                  cn=2,n=21
         2 000517   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21

      568     6311    4            CATALOG_KEY.DECK# = CATALOGS.E.DECK#(CATALOGS.MATCHED.CATX(1)) ;

   6311  2 000520   000100 101500                    MRL     fill='000'O
         2 000521   000227 000002                    ADSC9   151,,PR0                 cn=0,n=2
         2 000522   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 000523   200022 236100                    LDQ     DIGIT_VALUE+1,,AUTO
         2 000524   000027 402007                    MPY     23,DL
         2 000525   000000 100506                    MLR     fill='000'O
         2 000526   000005 600002                    ADSC9   5,Q,PR0                  cn=3,n=2
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:101  
         2 000527   000005 400002 xsym               ADSC9   CATALOG_KEY+5            cn=2,n=2

      569     6312    4            RETURN ;

   6312  2 000530   000001 702211                    TSX2  ! 1,X1

      570     6313    4         CASE (ELSE) ;

      571     6314    4            CALL ND_SHOW_CATALOG_CHOICES ;

   6314  2 000531   000556 701000 2                  TSX1    ND_SHOW_CATALOG_CHOICES
         2 000532   000000 011000                    NOP     0

      572     6315    4            CALL ND_GET_CATALOG_CHOICE (INX) ;

   6315  2 000533   200007 630500                    EPPR0   INX,,AUTO
         2 000534   200011 450500                    STP0    MATCHING_OBJECT+2,,AUTO
         2 000535   000635 701000 2                  TSX1    ND_GET_CATALOG_CHOICE
         2 000536   000000 011000                    NOP     0

      573     6316    4            MASTER_ENTRY_KEY.ENTRY# = INX ;

   6316  2 000537   000000 100500                    MLR     fill='000'O
         2 000540   200007 000002                    ADSC9   INX,,AUTO                cn=0,n=2
         2 000541   000000 600002 xsym               ADSC9   MASTER_ENTRY_KEY         cn=3,n=2

      574     6317    4            CATALOG_KEY.DATA = CATALOGS.E.DATA(INX) ;

   6317  2 000542   200007 236100                    LDQ     INX,,AUTO
         2 000543   000022 772000                    QRL     18
         2 000544   000027 402007                    MPY     23,DL
         2 000545   000007 470400 0                  LDP0    CATALOGS_V+1
         2 000546   040000 100506                    MLR     fill='040'O
         2 000547   000000 400025                    ADSC9   0,Q,PR0                  cn=2,n=21
         2 000550   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21

      575     6318    4            CATALOG_KEY.DECK# = CATALOGS.E.DECK#(INX) ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:102  

   6318  2 000551   000000 100506                    MLR     fill='000'O
         2 000552   000005 600002                    ADSC9   5,Q,PR0                  cn=3,n=2
         2 000553   000005 400002 xsym               ADSC9   CATALOG_KEY+5            cn=2,n=2

      576     6319    4            RETURN ;

   6319  2 000554   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000555   000001 702211                    TSX2  ! 1,X1

      577     6320    4      END /* CASE */ ;

      578     6321
      579     6322        /* END ND_SELECT_CATALOG */
      580     6323        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:103  
      581     6324        /*I* NAME:         ND_SHOW_CATALOG_CHOICES
      582     6325             AUTHOR:       Scott S. Sheppard
      583     6326             PURPOSE:      lists possible catalogs
      584     6327             INTERFACE:    TOU$DU_USER_WRITE
      585     6328             PARAMETERS:   None passed.
      586     6329             DATA:         DUP.MSG_CODE - output
      587     6330                           CUR# - output
      588     6331                           CATALOG_KEY.DATA - output (display purposes)
      589     6332                           CATALOG_SEARCH_KEY - input
      590     6333                           MASTER_ENTRY_KEY - output (display purposes)
      591     6334             DESCRIPTION:  This  procedure  lists  the  number  of master
      592     6335                           entries which correspond to the catalog search
      593     6336                           key. The user is then asked to pick one.
      594     6337                            Example:
      595     6338                              ???DELCAT CATA.ITR.DSC500
      596     6339                              There  are 2 catalogs  in the deckfile with
      597     6340                           key CATA.ITR.DSC500
      598     6341                                 Master Entry Number: 7
      599     6342                                 Master Entry Number: 8
      600     6343                              Input  the Master Entry  number to identify
      601     6344                           which catalog to
      602     6345                              delete. (See DEER Printout for details)
      603     6346                              Master Entry Number:
      604     6347        */
      605     6348        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:104  
      606     6349    3   ND_SHOW_CATALOG_CHOICES: PROC ;

   6349  2 000556   200010 741300       ND_SHOW_CAT* STX1  ! MATCHING_OBJECT+1,,AUTO

      607     6350
      608     6351    4      DCL I UBIN WORD ALIGNED ;
      609     6352
      610     6353        /* Code */
      611     6354
      612     6355    4      DUP.MSG_CODE = %T$ND_MULT_CATALOGS ;

   6355  2 000557   000150 235007                    LDA     104,DL
         2 000560   000020 755000 xsym               STA     DUP+16

      613     6356    4      CUR# = CATALOGS.MATCHED.COUNT - 1 ;

   6356  2 000561   000007 470400 0                  LDP0    CATALOGS_V+1
         2 000562   000100 101500                    MRL     fill='000'O
         2 000563   000226 000002                    ADSC9   150,,PR0                 cn=0,n=2
         2 000564   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 000565   200022 236100                    LDQ     DIGIT_VALUE+1,,AUTO
         2 000566   000001 136007                    SBLQ    1,DL
         2 000567   000000 756000 xsym               STQ     CUR#

      614     6357    4      CATALOG_KEY.DATA = CATALOG_SEARCH_KEY.DATA ;

   6357  2 000570   040000 100400                    MLR     fill='040'O
         2 000571   000000 000025 xsym               ADSC9   CATALOG_SEARCH_KEY       cn=0,n=21
         2 000572   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21

      615     6358    4      CALL TOU$DU_USER_WRITE ;

   6358  2 000573   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000574   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000575   000000 011000                    NOP     0

      616     6359
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:105  
      617     6360    4      DUP.MSG_CODE = %T$ND_CATALOG_CHOICE ;

   6360  2 000576   000151 235007                    LDA     105,DL
         2 000577   000020 755000 xsym               STA     DUP+16

      618     6361    5      DO I = 1 TO CATALOGS.MATCHED.COUNT ;

   6361  2 000600   000001 236007                    LDQ     1,DL
         2 000601   200011 756100                    STQ     I,,AUTO
         2 000602   000617 710000 2                  TRA     s:6364+3

      619     6362    5         MASTER_ENTRY_KEY.ENTRY# = CATALOGS.MATCHED.CATX(I) ;

   6362  2 000603   200011 235100                    LDA     I,,AUTO
         2 000604   000001 735000                    ALS     1
         2 000605   000007 470400 0                  LDP0    CATALOGS_V+1
         2 000606   000000 100505                    MLR     fill='000'O
         2 000607   000226 400002                    ADSC9   150,A,PR0                cn=2,n=2
         2 000610   000000 600002 xsym               ADSC9   MASTER_ENTRY_KEY         cn=3,n=2

      620     6363    5         CALL TOU$DU_USER_WRITE ;

   6363  2 000611   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000612   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000613   000000 011000                    NOP     0

      621     6364    5      END /* DO */ ;

   6364  2 000614   200011 235100                    LDA     I,,AUTO
         2 000615   000001 035007                    ADLA    1,DL
         2 000616   200011 755100                    STA     I,,AUTO
         2 000617   000007 470400 0                  LDP0    CATALOGS_V+1
         2 000620   000100 101500                    MRL     fill='000'O
         2 000621   000226 000002                    ADSC9   150,,PR0                 cn=0,n=2
         2 000622   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 000623   200022 236100                    LDQ     DIGIT_VALUE+1,,AUTO
         2 000624   200011 116100                    CMPQ    I,,AUTO
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:106  
         2 000625   000603 603000 2                  TRC     s:6362

      622     6365
      623     6366    4      DUP.MSG_CODE = %T$ND_CATALOG_DIRECTIONS ;

   6366  2 000626   000152 235007                    LDA     106,DL
         2 000627   000020 755000 xsym               STA     DUP+16

      624     6367    4      CALL TOU$DU_USER_WRITE ;

   6367  2 000630   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000631   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000632   000000 011000                    NOP     0

      625     6368    4      RETURN ;

   6368  2 000633   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 000634   000001 702211                    TSX2  ! 1,X1

      626     6369
      627     6370    4   END ND_SHOW_CATALOG_CHOICES ;
      628     6371        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:107  
      629     6372        /*I* NAME:         GET_CATALOG_CHOICE
      630     6373             AUTHOR:       Scott S. Sheppard
      631     6374             PURPOSE:      Accepts and Validates User's Response
      632     6375             INTERFACE:    TOU$DU_SET_PROMPT
      633     6376                           TOU$DU_USER_READ
      634     6377                           TOU$DU_SET_EDIT_PROMPT
      635     6378                           ND_CONVERT_CHOICE
      636     6379                           ND_VALIDATE_CHOICE
      637     6380             PARAMETERS:   INX - output
      638     6381             DATA:         DUP.HOLD_AREA - output
      639     6382                           DUP.HOLD_AREA_LGTH - output
      640     6383                           DUP.RESPONSE - input
      641     6384                           DUP.RESPONSE_LGTH - input / output
      642     6385             DESCRIPTION:  This procedure accepts the master entry number
      643     6386                           of the catalog to be used. The user enters the
      644     6387                           ASCII  number of  the master  entry. The ASCII
      645     6388                           string  entered by the  user is then converted
      646     6389                           to an  integer. If the integer  specified is a
      647     6390                           valid choice, the procedure returns. Otherwise
      648     6391                           an  error message  is printed  an the  user is
      649     6392                           forced to re-enter the master entry number.
      650     6393        */
      651     6394        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:108  
      652     6395    3   ND_GET_CATALOG_CHOICE: PROC (INX) ;

   6395  2 000635   200010 741300       ND_GET_CATA* STX1  ! MATCHING_OBJECT+1,,AUTO

      653     6396
      654     6397    4      DCL INX                        UBIN HALF HALIGNED ;
      655     6398    4      DCL VALID_CHOICE               BIT (1) ALIGNED ;
      656     6399
      657     6400        /* Code */
      658     6401
      659     6402    4      DUP.HOLD_AREA = 'Master Entry number: ' ;

   6402  2 000636   040000 100400                    MLR     fill='040'O
         2 000637   000000 000025 1                  ADSC9   0                        cn=0,n=21
         2 000640   000142 000050 xsym               ADSC9   DUP+98                   cn=0,n=40

      660     6403    4      DUP.HOLD_AREA_LGTH = 21 ;

   6403  2 000641   000025 235007                    LDA     21,DL
         2 000642   000154 755000 xsym               STA     DUP+108

      661     6404    4      CALL TOU$DU_SET_PROMPT ;

   6404  2 000643   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000644   000000 701000 xent               TSX1    TOU$DU_SET_PROMPT
         2 000645   000000 011000                    NOP     0

      662     6405
      663     6406    5      DO UNTIL (VALID_CHOICE) ;

      664     6407    5         DUP.RESPONSE_LGTH = 3 ;

   6407  2 000646   000003 235007                    LDA     3,DL
         2 000647   000016 755000 xsym               STA     DUP+14

      665     6408    5         CALL TOU$DU_USER_READ ;

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:109  
   6408  2 000650   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000651   000000 701000 xent               TSX1    TOU$DU_USER_READ
         2 000652   000000 011000                    NOP     0

      666     6409    5         CALL ND_CONVERT_CHOICE (SUBSTR(DUP.RESPONSE,0,3),DUP.RESPONSE_LGTH,INX) ;

   6409  2 000653   200011 236100                    LDQ     @INX,,AUTO
         2 000654   000001 235000 3                  LDA     1
         2 000655   200016 757100                    STAQ    @INX+1,,AUTO
         2 000656   000002 236000 3                  LDQ     2
         2 000657   200015 756100                    STQ     OLD_COUNT+2,,AUTO
         2 000660   000677 701000 2                  TSX1    ND_CONVERT_CHOICE
         2 000661   000000 011000                    NOP     0

      667     6410    5         CALL ND_VALIDATE_CHOICE (INX, VALID_CHOICE) ;

   6410  2 000662   200012 630500                    EPPR0   VALID_CHOICE,,AUTO
         2 000663   200016 450500                    STP0    @INX+1,,AUTO
         2 000664   200011 236100                    LDQ     @INX,,AUTO
         2 000665   200015 756100                    STQ     OLD_COUNT+2,,AUTO
         2 000666   001117 701000 2                  TSX1    ND_VALIDATE_CHOICE
         2 000667   000000 011000                    NOP     0

      668     6411    5      END /* UNTIL */ ;

   6411  2 000670   200012 234100                    SZN     VALID_CHOICE,,AUTO
         2 000671   000646 605000 2                  TPL     s:6407

      669     6412
      670     6413    4      CALL TOU$DU_SET_EDIT_PROMPT ;

   6413  2 000672   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000673   000000 701000 xent               TSX1    TOU$DU_SET_EDIT_PROMPT
         2 000674   000000 011000                    NOP     0

      671     6414    4      RETURN ;

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:110  
   6414  2 000675   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 000676   000001 702211                    TSX2  ! 1,X1

      672     6415
      673     6416        /* END ND_GET_CATALOG_CHOICE */
      674     6417        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:111  
      675     6418        /*I* NAME:         ND_CONVERT_CHOICE
      676     6419             AUTHOR:       Scott S. Sheppard
      677     6420             PURPOSE:      Changes User Input to integer
      678     6421             INTERFACE:    CHARBIN
      679     6422             PARAMETERS:   CHOICE - input
      680     6423                           LGTH - input / output
      681     6424                           VALUE - output
      682     6425             DATA:         No external data accessed.
      683     6426             DESCRIPTION:  This procedure converts  the 3 character input
      684     6427                           to  an integer.   Leading and  trailing blanks
      685     6428                           are  stripped. The  procedure uses  CHARBIN to
      686     6429                           convert  all  digits  entered  to  the  proper
      687     6430                           value.  Any  non-digit  characters encountered
      688     6431                           cause  this procedure to  return the value 999
      689     6432                           which is known to  be invalid.  Example of the
      690     6433                           algorithm to convert legal input:
      691     6434                             Input  Process
      692     6435                              '123' get the '1', and convert to 1
      693     6436                                    VALUE = (0 * 10) + 1 = 1
      694     6437                                    get the '2', and convert to 2
      695     6438                                    VALUE = (1 * 10) + 2 = 12
      696     6439                                    get the '3', and convert to 3
      697     6440                                    VALUE = (12 * 10) + 3 = 123
      698     6441        */
      699     6442
      700     6443    4   ND_CONVERT_CHOICE: PROC (CHOICE, LGTH, VALUE) ;

   6443  2 000677   200014 741300       ND_CONVERT_* STX1  ! OLD_COUNT+1,,AUTO

      701     6444
      702     6445    5      DCL CHOICE      CHAR (3) CALIGNED ;
      703     6446    5      DCL CHOICE_     (0:2) REDEF CHOICE CHAR (1) CALIGNED ;
      704     6447    5      DCL LGTH        UBIN WORD ALIGNED ;
      705     6448    5      DCL VALUE       UBIN HALF HALIGNED ;
      706     6449    5      DCL I           UBIN HALF HALIGNED ;
      707     6450    5      DCL DIGIT_VALUE UBIN WORD ALIGNED ;
      708     6451           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:112  
      709     6452        /* Code */
      710     6453
      711     6454           /* Skip trailing blanks */
      712     6455    6      DO WHILE (CHOICE_(LGTH - 1) = ' ' & LGTH > 0) ;

   6455  2 000700   000705 710000 2                  TRA     s:6457

      713     6456    6         LGTH = LGTH - 1 ;

   6456  2 000701   200016 470500                    LDP0    @LGTH,,AUTO
         2 000702   000000 235100                    LDA     0,,PR0
         2 000703   000001 135007                    SBLA    1,DL
         2 000704   000000 755100                    STA     0,,PR0

      714     6457    6      END /* WHILE */ ;

   6457  2 000705   200016 470500                    LDP0    @LGTH,,AUTO
         2 000706   000000 235100                    LDA     0,,PR0
         2 000707   400000 220003                    LDX0    -131072,DU
         2 000710   200015 471500                    LDP1    @CHOICE,,AUTO
         2 000711   040000 106505                    CMPC    fill='040'O
         2 000712   177777 600001                    ADSC9   -1,A,PR1                 cn=3,n=1
         2 000713   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000714   000716 600000 2                  TZE     s:6457+9
         2 000715   000000 220003                    LDX0    0,DU
         2 000716   400000 221003                    LDX1    -131072,DU
         2 000717   000000 115003                    CMPA    0,DU
         2 000720   000722 601000 2                  TNZ     s:6457+13
         2 000721   000000 221003                    LDX1    0,DU
         2 000722   000000 636011                    EAQ     0,X1
         2 000723   200022 756100                    STQ     DIGIT_VALUE+1,,AUTO
         2 000724   000000 636010                    EAQ     0,X0
         2 000725   200022 376100                    ANQ     DIGIT_VALUE+1,,AUTO
         2 000726   000701 601000 2                  TNZ     s:6456

      715     6458
      716     6459           /* Skip leading blanks */
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:113  
      717     6460    5      I = 0 ;

   6460  2 000727   000000 220003                    LDX0    0,DU
         2 000730   200020 740100                    STX0    I,,AUTO

      718     6461    6      DO WHILE (CHOICE_(I) = ' ' & I < LGTH) ;

   6461  2 000731   000735 710000 2                  TRA     s:6463

      719     6462    6         I = I + 1 ;

   6462  2 000732   200020 220100                    LDX0    I,,AUTO
         2 000733   000001 621010                    EAX1    1,X0
         2 000734   200020 741100                    STX1    I,,AUTO

      720     6463    6      END /* WHILE */ ;

   6463  2 000735   400000 220003                    LDX0    -131072,DU
         2 000736   200015 470500                    LDP0    @CHOICE,,AUTO
         2 000737   200020 235100                    LDA     I,,AUTO
         2 000740   000022 771000                    ARL     18
         2 000741   040000 106505                    CMPC    fill='040'O
         2 000742   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 000743   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000744   000746 600000 2                  TZE     s:6463+9
         2 000745   000000 220003                    LDX0    0,DU
         2 000746   400000 221003                    LDX1    -131072,DU
         2 000747   200016 471500                    LDP1    @LGTH,,AUTO
         2 000750   200020 236100                    LDQ     I,,AUTO
         2 000751   000022 772000                    QRL     18
         2 000752   100000 116100                    CMPQ    0,,PR1
         2 000753   000755 602000 2                  TNC     s:6463+16
         2 000754   000000 221003                    LDX1    0,DU
         2 000755   000000 636011                    EAQ     0,X1
         2 000756   200022 756100                    STQ     DIGIT_VALUE+1,,AUTO
         2 000757   000000 636010                    EAQ     0,X0
         2 000760   200022 376100                    ANQ     DIGIT_VALUE+1,,AUTO
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:114  
         2 000761   000732 601000 2                  TNZ     s:6462

      721     6464
      722     6465           /* Step through, converting 1 character at a time */
      723     6466    5      VALUE = 0 ;

   6466  2 000762   200017 473500                    LDP3    @VALUE,,AUTO
         2 000763   000100 101400                    MRL     fill='000'O
         2 000764   000002 000004 xsym               ADSC9   B_VECTNIL+2              cn=0,n=4
         2 000765   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2

      724     6467    6      DO WHILE (I < LGTH) ;

   6467  2 000766   200020 236100                    LDQ     I,,AUTO
         2 000767   000022 772000                    QRL     18
         2 000770   100000 116100                    CMPQ    0,,PR1
         2 000771   001115 603000 2                  TRC     s:6478

      725     6468    7         DO SELECT (CHOICE_(I)) ;

   6468  2 000772   200015 470500                    LDP0    @CHOICE,,AUTO
         2 000773   200020 235100                    LDA     I,,AUTO
         2 000774   000022 771000                    ARL     18
         2 000775   040000 106505                    CMPC    fill='040'O
         2 000776   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 000777   000003 000001 3                  ADSC9   3                        cn=0,n=1
         2 001000   001040 602000 2                  TNC     s:6468+38
         2 001001   001057 600000 2                  TZE     s:6470
         2 001002   040000 106505                    CMPC    fill='040'O
         2 001003   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001004   000004 000001 3                  ADSC9   4                        cn=0,n=1
         2 001005   001021 602000 2                  TNC     s:6468+23
         2 001006   001057 600000 2                  TZE     s:6470
         2 001007   040000 106505                    CMPC    fill='040'O
         2 001010   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001011   000005 000001 3                  ADSC9   5                        cn=0,n=1
         2 001012   001076 602000 2                  TNC     s:6473
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:115  
         2 001013   001057 600000 2                  TZE     s:6470
         2 001014   040000 106505                    CMPC    fill='040'O
         2 001015   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001016   000006 000001 3                  ADSC9   6                        cn=0,n=1
         2 001017   001076 601000 2                  TNZ     s:6473
         2 001020   001057 710000 2                  TRA     s:6470
         2 001021   040000 106505                    CMPC    fill='040'O
         2 001022   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001023   000007 000001 3                  ADSC9   7                        cn=0,n=1
         2 001024   001033 602000 2                  TNC     s:6468+33
         2 001025   001057 600000 2                  TZE     s:6470
         2 001026   040000 106505                    CMPC    fill='040'O
         2 001027   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001030   000010 000001 3                  ADSC9   8                        cn=0,n=1
         2 001031   001076 601000 2                  TNZ     s:6473
         2 001032   001057 710000 2                  TRA     s:6470
         2 001033   040000 106505                    CMPC    fill='040'O
         2 001034   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001035   000011 000001 3                  ADSC9   9                        cn=0,n=1
         2 001036   001076 601000 2                  TNZ     s:6473
         2 001037   001057 710000 2                  TRA     s:6470
         2 001040   040000 106505                    CMPC    fill='040'O
         2 001041   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001042   000012 000001 3                  ADSC9   10                       cn=0,n=1
         2 001043   001052 602000 2                  TNC     s:6468+48
         2 001044   001057 600000 2                  TZE     s:6470
         2 001045   040000 106505                    CMPC    fill='040'O
         2 001046   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001047   000013 000001 3                  ADSC9   11                       cn=0,n=1
         2 001050   001076 601000 2                  TNZ     s:6473
         2 001051   001057 710000 2                  TRA     s:6470
         2 001052   040000 106505                    CMPC    fill='040'O
         2 001053   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001054   000014 000001 3                  ADSC9   12                       cn=0,n=1
         2 001055   001076 601000 2                  TNZ     s:6473
         2 001056   001057 710000 2                  TRA     s:6470

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:116  
      726     6469    7            SELECT ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') ;

      727     6470    7            CALL CHARBIN (DIGIT_VALUE, CHOICE_(I)) ;

   6470  2 001057   000100 305505                    DTB
         2 001060   000000 030001                    NDSC9   0,A,PR0                  cn=0,s=nosgn,sf=0,n=1
         2 001061   200021 000004                    NDSC9   DIGIT_VALUE,,AUTO        cn=0,s=lsgnf,sf=0,n=4

      728     6471    7            VALUE = (VALUE * 10) + DIGIT_VALUE ;

   6471  2 001062   200017 471500                    LDP1    @VALUE,,AUTO
         2 001063   000100 101500                    MRL     fill='000'O
         2 001064   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         2 001065   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 001066   200022 236100                    LDQ     DIGIT_VALUE+1,,AUTO
         2 001067   000012 402007                    MPY     10,DL
         2 001070   200021 036100                    ADLQ    DIGIT_VALUE,,AUTO
         2 001071   200023 756100                    STQ     DIGIT_VALUE+2,,AUTO
         2 001072   000100 101500                    MRL     fill='000'O
         2 001073   200023 000004                    ADSC9   DIGIT_VALUE+2,,AUTO      cn=0,n=4
         2 001074   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         2 001075   001105 710000 2                  TRA     s:6476

      729     6472    7            SELECT (ELSE) ;

      730     6473    7         VALUE = 999 ;

   6473  2 001076   200017 471500                    LDP1    @VALUE,,AUTO
         2 001077   000100 101400                    MRL     fill='000'O
         2 001100   000015 000004 3                  ADSC9   13                       cn=0,n=4
         2 001101   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

      731     6474    7         I = LGTH ;

   6474  2 001102   200016 473500                    LDP3    @LGTH,,AUTO
         2 001103   300000 720100                    LXL0    0,,PR3
         2 001104   200020 740100                    STX0    I,,AUTO
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:117  

      732     6475    7         END /* SELECT */ ;

      733     6476    6      I = I + 1 ;

   6476  2 001105   200020 220100                    LDX0    I,,AUTO
         2 001106   000001 621010                    EAX1    1,X0
         2 001107   200020 741100                    STX1    I,,AUTO

      734     6477    6      END /* WHILE */ ;

   6477  2 001110   200016 473500                    LDP3    @LGTH,,AUTO
         2 001111   200020 236100                    LDQ     I,,AUTO
         2 001112   000022 772000                    QRL     18
         2 001113   300000 116100                    CMPQ    0,,PR3
         2 001114   000772 602000 2                  TNC     s:6468

      735     6478    5      RETURN ;

   6478  2 001115   200014 221300                    LDX1  ! OLD_COUNT+1,,AUTO
         2 001116   000001 702211                    TSX2  ! 1,X1

      736     6479
      737     6480    5   END ND_CONVERT_CHOICE ;
      738     6481        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:118  
      739     6482        /*I* NAME:         ND_VALIDATE_CHOICE
      740     6483             AUTHOR:       Scott S. Sheppard
      741     6484             PURPOSE:      Validates Master Entry Number
      742     6485             INTERFACE:    TOU$DU_USER_WRITE
      743     6486             PARAMETERS:   INX - input
      744     6487                           VALID_CHOICE - output
      745     6488             DATA:         CATALOGS.MATCHED.COUNT - input
      746     6489                           CATALOGS.MATCHED.CATX - input
      747     6490             DESCRIPTION:  This  procedure that  the master  entry number
      748     6491                           entered  by  the  user  represents  one of the
      749     6492                           catalogs which matched the catalog search key.
      750     6493        */
      751     6494
      752     6495    4   ND_VALIDATE_CHOICE: PROC (INX, VALID_CHOICE) ;

   6495  2 001117   200014 741300       ND_VALIDATE* STX1  ! OLD_COUNT+1,,AUTO

      753     6496
      754     6497    5      DCL INX                        UBIN HALF HALIGNED ;
      755     6498    5      DCL VALID_CHOICE               BIT (1) ALIGNED ;
      756     6499    5      DCL I                          UBIN WORD ALIGNED ;
      757     6500
      758     6501    5      VALID_CHOICE = %FALSE ;

   6501  2 001120   200016 470500                    LDP0    @VALID_CHOICE,,AUTO
         2 001121   000000 450100                    STZ     0,,PR0

      759     6502    6      DO I = 1 TO CATALOGS.MATCHED.COUNT ;

   6502  2 001122   000001 235007                    LDA     1,DL
         2 001123   200017 755100                    STA     I,,AUTO
         2 001124   001150 710000 2                  TRA     s:6506+3

      760     6503    6         IF INX = CATALOGS.MATCHED.CATX(I)

   6503  2 001125   200017 235100                    LDA     I,,AUTO
         2 001126   000001 735000                    ALS     1
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:119  
         2 001127   000007 470400 0                  LDP0    CATALOGS_V+1
         2 001130   000100 101505                    MRL     fill='000'O
         2 001131   000226 400002                    ADSC9   150,A,PR0                cn=2,n=2
         2 001132   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 001133   200015 471500                    LDP1    @INX,,AUTO
         2 001134   000100 101500                    MRL     fill='000'O
         2 001135   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         2 001136   200023 000004                    ADSC9   DIGIT_VALUE+2,,AUTO      cn=0,n=4
         2 001137   200023 236100                    LDQ     DIGIT_VALUE+2,,AUTO
         2 001140   200022 116100                    CMPQ    DIGIT_VALUE+1,,AUTO
         2 001141   001145 601000 2                  TNZ     s:6506

      761     6504    6         THEN VALID_CHOICE = %TRUE ;

   6504  2 001142   400000 236003                    LDQ     -131072,DU
         2 001143   200016 473500                    LDP3    @VALID_CHOICE,,AUTO
         2 001144   300000 756100                    STQ     0,,PR3

      762     6505    6         ELSE /* Do Nothing */ ;
      763     6506    6      END /* DO */ ;

   6506  2 001145   200017 236100                    LDQ     I,,AUTO
         2 001146   000001 036007                    ADLQ    1,DL
         2 001147   200017 756100                    STQ     I,,AUTO
         2 001150   000007 470400 0                  LDP0    CATALOGS_V+1
         2 001151   000100 101500                    MRL     fill='000'O
         2 001152   000226 000002                    ADSC9   150,,PR0                 cn=0,n=2
         2 001153   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 001154   200022 236100                    LDQ     DIGIT_VALUE+1,,AUTO
         2 001155   200017 116100                    CMPQ    I,,AUTO
         2 001156   001125 603000 2                  TRC     s:6503

      764     6507    5      IF VALID_CHOICE

   6507  2 001157   200016 471500                    LDP1    @VALID_CHOICE,,AUTO
         2 001160   100000 234100                    SZN     0,,PR1
         2 001161   001167 604000 2                  TMI     s:6513
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:120  

      765     6508    5      THEN /* Do Nothing */ ;
      766     6509    6      ELSE DO ;

      767     6510    6              DUP.MSG_CODE = %E$NGCC_BAD_CHOICE ;

   6510  2 001162   000717 235007                    LDA     463,DL
         2 001163   000020 755000 xsym               STA     DUP+16

      768     6511    6              CALL TOU$DU_USER_WRITE ;

   6511  2 001164   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001165   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 001166   000000 011000                    NOP     0

      769     6512    6           END /* ELSE */ ;

      770     6513    5      RETURN ;

   6513  2 001167   200014 221300                    LDX1  ! OLD_COUNT+1,,AUTO
         2 001170   000001 702211                    TSX2  ! 1,X1

      771     6514
      772     6515    5   END ND_VALIDATE_CHOICE ;
      773     6516    4   END ND_GET_CATALOG_CHOICE ;
      774     6517    3   END ND_SELECT_CATALOG ;
      775     6518        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:121  
      776     6519        /*I* NAME:         ND_FREE_CATALOG_TABLE_BUFFER
      777     6520             AUTHOR:       Scott S. Sheppard
      778     6521             PURPOSE:      Releases memory
      779     6522             INTERFACE:    TOU$DU_FREE_DATA_SEGMENT
      780     6523             PARAMETERS:   None passed.
      781     6524             DATA:         CATALOGS_V - input / output
      782     6525                           DUP.DS_V - output
      783     6526             DESCRIPTION:  Whether  normal or  abnormal termination  of a
      784     6527                           find  catalog  occurs,   the  memory  for  the
      785     6528                           catalog table is released back to CP-6.
      786     6529        */
      787     6530
      788     6531    2   ND_FREE_CATALOG_TABLE_BUFFER: PROC ;

   6531  2 001171   200006 741300       ND_FREE_CAT* STX1  ! OUTBLK$,,AUTO

      789     6532
      790     6533        /* Code */
      791     6534
      792     6535    3      DUP.DS_V = CATALOGS_V ;

   6535  2 001172   000006 237000 0                  LDAQ    CATALOGS_V
         2 001173   000002 757000 xsym               STAQ    DUP+2

      793     6536    3      CALL TOU$DU_FREE_DATA_SEGMENT ;

   6536  2 001174   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001175   000000 701000 xent               TSX1    TOU$DU_FREE_DATA_SEGMENT
         2 001176   000000 011000                    NOP     0

      794     6537    3      CATALOGS_V = '0'B ;

   6537  2 001177   000000 235003                    LDA     0,DU
         2 001200   000000 236003                    LDQ     0,DU
         2 001201   000006 757000 0                  STAQ    CATALOGS_V

      795     6538    3      RETURN ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:122  

   6538  2 001202   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 001203   000001 702211                    TSX2  ! 1,X1

      796     6539
      797     6540    3   END ND_FREE_CATALOG_TABLE_BUFFER ;
      798     6541    2   END ND_FIND_CATALOG ;
      799     6542        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:123  
      800     6543        /*I*  NAME:        ND_CHECK_FOR_DECK
      801     6544              AUTHOR:      Scott S. Sheppard
      802     6545              PURPOSE:     Locates Object Deck
      803     6546              INTERFACE:   TOU$DFU_CHECK_FOR_KEY
      804     6547                           TOU$DFU_DF_RD_OBJECT_REFLIST
      805     6548                           TOU$DU_USER_WRITE
      806     6549              INPUT:       OBJECT_SEARCH_KEY
      807     6550                           OBJECT_REFLIST_DATA
      808     6551              OUTPUT:      OBJECT_REFLIST_DATA
      809     6552                           MASTER_ENTRY_KEY.ENTRY#
      810     6553              DESCRIPTION: This procedure checks to see if the object deck
      811     6554                           exists in the deckfile.    If the deckfile does
      812     6555                           not exist in the deckfile,   it may be added to
      813     6556                           the requested catalog.  If the object deck does
      814     6557                           exist,  the reference  list must be  checked to
      815     6558                           ensure that the object deck is not part of  the
      816     6559                           specified catalog.  If the object deck is not a
      817     6560                           part of the catalog, it may be added.
      818     6561        */
      819     6562        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:124  
      820     6563    1   ND_CHECK_FOR_DECK: PROC ALTRET ;

   6563  2 001204   200004 741300       ND_CHECK_FO* STX1  ! 4,,AUTO

      821     6564
      822     6565    2      DCL I                  UBIN HALF HALIGNED ;
      823     6566    2      DCL REFERENCE_FOUND    BIT (1) CALIGNED ;
      824     6567
      825     6568        /* Code */
      826     6569
      827     6570    2      OBJECT_KEY.DATA = OBJECT_SEARCH_KEY.DATA ;

   6570  2 001205   040000 100400                    MLR     fill='040'O
         2 001206   000000 000027 0                  ADSC9   OBJECT_SEARCH_KEY        cn=0,n=23
         2 001207   000000 200027 xsym               ADSC9   OBJECT_KEY               cn=1,n=23

      828     6571    2      CALL TOU$DFU_DF_CHECK_FOR_KEY ALTRET (NOT_IN_DECKFILE) ;

   6571  2 001210   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001211   000000 701000 xent               TSX1    TOU$DFU_DF_CHECK_FOR_KEY
         2 001212   001262 702000 2                  TSX2    NOT_IN_DECKFILE

      829     6572
      830     6573        /* IN_DECKFILE: */
      831     6574    2      OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;

   6574  2 001213   000024 236000 xsym               LDQ     OBJECT+20
         2 001214   000011 772000                    QRL     9
         2 001215   000000 552030 xsym               STBQ    OBJECT_REFLIST_KEY,'30'O

      832     6575    2      CALL TOU$DFU_DF_RD_OBJECT_REFLIST ALTRET (ERROR) ;

   6575  2 001216   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001217   000000 701000 xent               TSX1    TOU$DFU_DF_RD_OBJECT_REFLIST
         2 001220   001260 702000 2                  TSX2    ERROR

      833     6576
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:125  
      834     6577    2      REFERENCE_FOUND = %FALSE ;

   6577  2 001221   200006 450100                    STZ     REFERENCE_FOUND,,AUTO

      835     6578    2      I = 0 ;

   6578  2 001222   000000 220003                    LDX0    0,DU
         2 001223   200005 740100                    STX0    I,,AUTO

      836     6579    3      DO UNTIL (REFERENCE_FOUND OR I = OBJECT_REFLIST_DATA.NUM_REFS) ;

      837     6580    3         IF OBJECT_REFLIST_DATA.REFS.ME#(I) = MASTER_ENTRY_KEY.ENTRY#

   6580  2 001224   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 001225   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 001226   000033 773000                    LRL     27
         2 001227   777777 376007                    ANQ     -1,DL
         2 001230   200022 756100                    STQ     DIGIT_VALUE+1,,AUTO
         2 001231   200005 220100                    LDX0    I,,AUTO
         2 001232   000001 236010 xsym               LDQ     OBJECT_REFLIST_DATA+1,X0
         2 001233   000022 772000                    QRL     18
         2 001234   200022 116100                    CMPQ    DIGIT_VALUE+1,,AUTO
         2 001235   001241 601000 2                  TNZ     s:6582

      838     6581    3         THEN REFERENCE_FOUND = %TRUE ;

   6581  2 001236   400000 236003                    LDQ     -131072,DU
         2 001237   200006 756100                    STQ     REFERENCE_FOUND,,AUTO
         2 001240   001243 710000 2                  TRA     s:6583

      839     6582    3         ELSE I = I + 1 ;

   6582  2 001241   000001 621010                    EAX1    1,X0
         2 001242   200005 741100                    STX1    I,,AUTO

      840     6583    3      END /* UNTIL */ ;

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:126  
   6583  2 001243   200006 234100                    SZN     REFERENCE_FOUND,,AUTO
         2 001244   001251 604000 2                  TMI     s:6585
         2 001245   200005 236100                    LDQ     I,,AUTO
         2 001246   000022 772000                    QRL     18
         2 001247   000000 116000 xsym               CMPQ    OBJECT_REFLIST_DATA
         2 001250   001224 601000 2                  TNZ     s:6580

      841     6584
      842     6585    2      IF REFERENCE_FOUND

   6585  2 001251   200006 234100                    SZN     REFERENCE_FOUND,,AUTO
         2 001252   001262 605000 2                  TPL     NOT_IN_DECKFILE

      843     6586    3      THEN DO ;

      844     6587    3              DUP.MSG_CODE = %E$NCFD_IN_CATALOG ;

   6587  2 001253   000715 235007                    LDA     461,DL
         2 001254   000020 755000 xsym               STA     DUP+16

      845     6588    3              CALL TOU$DU_USER_WRITE ;

   6588  2 001255   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001256   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 001257   000000 011000                    NOP     0

      846     6589    3   ERROR:
      847     6590    3              ALTRETURN ;

   6590  2 001260   200004 221300       ERROR        LDX1  ! 4,,AUTO
         2 001261   000000 702211                    TSX2  ! 0,X1

      848     6591    3           END /* THEN */ ;
      849     6592    2      ELSE /* in deckfile, but not in the specified catalog */ ;
      850     6593
      851     6594    2   NOT_IN_DECKFILE:
      852     6595    2      RETURN ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:127  

   6595  2 001262   200004 221300       NOT_IN_DECK* LDX1  ! 4,,AUTO
         2 001263   000001 702211                    TSX2  ! 1,X1

      853     6596
      854     6597    2   END ND_CHECK_FOR_DECK ;
      855     6598        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:128  
      856     6599        /*I*  NAME:        ND_ADD_DECK
      857     6600              AUTHOR:      Scott S. Sheppard
      858     6601              PURPOSE:     Processes IFAD -> temp -> DECKFILE
      859     6602              INTERFACE:   ND_PROCESS_IFAD
      860     6603                           ND_PROCESS_TEMP
      861     6604                           TOU$DU_OPEN_IFAD
      862     6605                           TOU$DU_CLOSE_IFAD
      863     6606                           TOU$CLEAR_IFAD
      864     6607                           TOU$DFU_OPEN_TEMP
      865     6608                           TOU$DFU_CLOSE_TEMP
      866     6609              INPUT:       IFAD input source
      867     6610                           DEER temporary file
      868     6611              OUTPUT:      DEER temporary file
      869     6612                           DECKFILE
      870     6613                           DUP.TEMP.OPEN_TYPE
      871     6614                           DUP.TEMP.CLOSE_TYPE
      872     6615              DESCRIPTION: This procedure adds a deck to a deckfile by procssing
      873     6616                           an IFAD input source and logging all the records that
      874     6617                           must be updated into a temporary file.   If no errors
      875     6618                           occur,  the  deckfile  is  modified  to  contain  the
      876     6619                           updated records from the temporary file.
      877     6620        */
      878     6621        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:129  
      879     6622    1   ND_ADD_DECK: PROC ALTRET ;

   6622  2 001264   200004 741300       ND_ADD_DECK  STX1  ! 4,,AUTO

      880     6623
      881     6624        /* Code */
      882     6625
      883     6626    2      DUP.TEMP.OPEN_TYPE = %CREATE_FILE ;

   6626  2 001265   000140 450000 xsym               STZ     DUP+96

      884     6627    2      CALL TOU$DFU_OPEN_TEMP ALTRET (ERROR) ;

   6627  2 001266   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001267   000000 701000 xent               TSX1    TOU$DFU_OPEN_TEMP
         2 001270   001326 702000 2                  TSX2    ERROR

      885     6628    2      CALL TOU$DU_OPEN_IFAD ALTRET (ERROR) ;

   6628  2 001271   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001272   000000 701000 xent               TSX1    TOU$DU_OPEN_IFAD
         2 001273   001326 702000 2                  TSX2    ERROR

      886     6629    2      CALL TOU$CLEAR_IFAD ;

   6629  2 001274   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001275   000000 701000 xent               TSX1    TOU$CLEAR_IFAD
         2 001276   000000 011000                    NOP     0

      887     6630    2      CALL ND_PROCESS_IFAD ALTRET (ERROR) ;

   6630  2 001277   001340 701000 2                  TSX1    ND_PROCESS_IFAD
         2 001300   001326 702000 2                  TSX2    ERROR

      888     6631    2      CALL TOU$DU_CLOSE_IFAD ALTRET (ERROR) ;

   6631  2 001301   000002 631400 xsym               EPPR1   B_VECTNIL+2
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:130  
         2 001302   000000 701000 xent               TSX1    TOU$DU_CLOSE_IFAD
         2 001303   001326 702000 2                  TSX2    ERROR

      889     6632    2      DUP.TEMP.CLOSE_TYPE = %SAVE_FILE ;

   6632  2 001304   000141 450000 xsym               STZ     DUP+97

      890     6633    2      CALL TOU$DFU_CLOSE_TEMP ALTRET (ERROR) ;

   6633  2 001305   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001306   000000 701000 xent               TSX1    TOU$DFU_CLOSE_TEMP
         2 001307   001326 702000 2                  TSX2    ERROR

      891     6634
      892     6635    2      DUP.TEMP.OPEN_TYPE = %READ_FILE ;

   6635  2 001310   000002 235007                    LDA     2,DL
         2 001311   000140 755000 xsym               STA     DUP+96

      893     6636    2      CALL TOU$DFU_OPEN_TEMP ALTRET (ERROR) ;

   6636  2 001312   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001313   000000 701000 xent               TSX1    TOU$DFU_OPEN_TEMP
         2 001314   001326 702000 2                  TSX2    ERROR

      894     6637    2      CALL ND_PROCESS_TEMP ALTRET (ERROR) ;

   6637  2 001315   001562 701000 2                  TSX1    ND_PROCESS_TEMP
         2 001316   001326 702000 2                  TSX2    ERROR

      895     6638    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;

   6638  2 001317   000001 235007                    LDA     1,DL
         2 001320   000141 755000 xsym               STA     DUP+97

      896     6639    2      CALL TOU$DFU_CLOSE_TEMP ALTRET (ERROR) ;

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:131  
   6639  2 001321   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001322   000000 701000 xent               TSX1    TOU$DFU_CLOSE_TEMP
         2 001323   001326 702000 2                  TSX2    ERROR

      897     6640    2      RETURN ;

   6640  2 001324   200004 221300                    LDX1  ! 4,,AUTO
         2 001325   000001 702211                    TSX2  ! 1,X1

      898     6641
      899     6642    2   ERROR:
      900     6643    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;

   6643  2 001326   000001 235007       ERROR        LDA     1,DL
         2 001327   000141 755000 xsym               STA     DUP+97

      901     6644    2      CALL TOU$DFU_CLOSE_TEMP ;

   6644  2 001330   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001331   000000 701000 xent               TSX1    TOU$DFU_CLOSE_TEMP
         2 001332   000000 011000                    NOP     0

      902     6645    2      CALL TOU$DU_CLOSE_IFAD ;

   6645  2 001333   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001334   000000 701000 xent               TSX1    TOU$DU_CLOSE_IFAD
         2 001335   000000 011000                    NOP     0

      903     6646    2      ALTRETURN ;

   6646  2 001336   200004 221300                    LDX1  ! 4,,AUTO
         2 001337   000000 702211                    TSX2  ! 0,X1

      904     6647
      905     6648    2   END ND_ADD_DECK ;
      906     6649        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:132  
      907     6650        /*I*  NAME:        ND_PROCESS_IFAD
      908     6651              AUTHOR:      Scott S. Sheppard
      909     6652              PURPOSE:     Processes IFAD
      910     6653              INTERFACE:   TOU$GET_CP6_OBJECT
      911     6654                           TOU$GET_BINARY_CARDS
      912     6655                           TOU$GET_BCD_CARDS
      913     6656                           TOU$B_SET_OBJECT_KEY
      914     6657                           ND_CHECK_MATCH
      915     6658                           ND_STORE_LAST_DECK#
      916     6659                           ND_STORE_OBJECT_DECK
      917     6660                           ND_STORE_CATALOG_CHANGES
      918     6661              INPUT:       IFAD input source
      919     6662              OUTPUT:      DEER temporary file
      920     6663              DESCRIPTION: This procedure wades through the IFAD input source
      921     6664                           locates the $object card for the deck to be added.
      922     6665                           It then calls routines to save the updates to  the
      923     6666                           deckfile in the temporary file.
      924     6667        */
      925     6668        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:133  
      926     6669    1   ND_PROCESS_IFAD: PROC ALTRET ;

   6669  2 001340   200006 741300       ND_PROCESS_* STX1  ! REFERENCE_FOUND,,AUTO

      927     6670
      928     6671    2      DCL MATCHING_OBJECT      BIT (1) CALIGNED ;
      929     6672
      930     6673        /* Code */
      931     6674
      932     6675    2      FILE_EOF = 0 ;

   6675  2 001341   000000 450000 xsym               STZ     FILE_EOF

      933     6676    3      DO UNTIL (MATCHING_OBJECT OR FILE_EOF = 2) ;

      934     6677    3         CALL TOU$GET_CP6_OBJECT ALTRET (ERROR) ;

   6677  2 001342   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001343   000000 701000 xent               TSX1    TOU$GET_CP6_OBJECT
         2 001344   001414 702000 2                  TSX2    ERROR

      935     6678    3         IF FILE_EOF < 2

   6678  2 001345   000000 235000 xsym               LDA     FILE_EOF
         2 001346   000002 115007                    CMPA    2,DL
         2 001347   001365 603000 2                  TRC     s:6686

      936     6679    4         THEN DO ;

      937     6680    4                 CALL TOU$GET_BINARY_CARDS ALTRET (ERROR) ;

   6680  2 001350   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001351   000000 701000 xent               TSX1    TOU$GET_BINARY_CARDS
         2 001352   001414 702000 2                  TSX2    ERROR

      938     6681    4                 CALL TOU$GET_BCD_CARDS ALTRET (ERROR) ;

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:134  
   6681  2 001353   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001354   000000 701000 xent               TSX1    TOU$GET_BCD_CARDS
         2 001355   001414 702000 2                  TSX2    ERROR

      939     6682    4                 CALL TOU$B_SET_OBJECT_KEY ALTRET (ERROR) ;

   6682  2 001356   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001357   000000 701000 xent               TSX1    TOU$B_SET_OBJECT_KEY
         2 001360   001414 702000 2                  TSX2    ERROR

      940     6683    4                 CALL ND_CHECK_MATCH (MATCHING_OBJECT) ;

   6683  2 001361   200007 630500                    EPPR0   MATCHING_OBJECT,,AUTO
         2 001362   200011 450500                    STP0    @INX,,AUTO
         2 001363   001416 701000 2                  TSX1    ND_CHECK_MATCH
         2 001364   000000 011000                    NOP     0

      941     6684    4              END /* THEN */ ;

      942     6685    3         ELSE /* EOF before $OBJECT could be found. */ ;
      943     6686    3      END /* UNTIL */ ;

   6686  2 001365   200007 234100                    SZN     MATCHING_OBJECT,,AUTO
         2 001366   001372 604000 2                  TMI     s:6688
         2 001367   000000 235000 xsym               LDA     FILE_EOF
         2 001370   000002 115007                    CMPA    2,DL
         2 001371   001342 601000 2                  TNZ     s:6677

      944     6687
      945     6688    2      IF MATCHING_OBJECT

   6688  2 001372   200007 234100                    SZN     MATCHING_OBJECT,,AUTO
         2 001373   001404 605000 2                  TPL     s:6696

      946     6689    3      THEN DO ;

      947     6690    3              CALL ND_STORE_LAST_DECK# ALTRET (ERROR) ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:135  

   6690  2 001374   001436 701000 2                  TSX1    ND_STORE_LAST_DECK#
         2 001375   001414 702000 2                  TSX2    ERROR

      948     6691    3              CALL ND_STORE_OBJECT_DECK ALTRET (ERROR) ;

   6691  2 001376   001454 701000 2                  TSX1    ND_STORE_OBJECT_DECK
         2 001377   001414 702000 2                  TSX2    ERROR

      949     6692    3              CALL ND_STORE_CATALOG_CHANGES ALTRET (ERROR) ;

   6692  2 001400   001527 701000 2                  TSX1    ND_STORE_CATALOG_CHANGES
         2 001401   001414 702000 2                  TSX2    ERROR

      950     6693    3              RETURN ;

   6693  2 001402   200006 221300                    LDX1  ! REFERENCE_FOUND,,AUTO
         2 001403   000001 702211                    TSX2  ! 1,X1

      951     6694    3           END /* THEN */ ;
      952     6695    3      ELSE DO ;

      953     6696    3              DUP.MSG_CODE = %E$NPI_NO_OBJECT ;

   6696  2 001404   000716 235007                    LDA     462,DL
         2 001405   000020 755000 xsym               STA     DUP+16

      954     6697    3              OBJECT_KEY.DATA = OBJECT_SEARCH_KEY.DATA ;

   6697  2 001406   040000 100400                    MLR     fill='040'O
         2 001407   000000 000027 0                  ADSC9   OBJECT_SEARCH_KEY        cn=0,n=23
         2 001410   000000 200027 xsym               ADSC9   OBJECT_KEY               cn=1,n=23

      955     6698    3              CALL TOU$DU_USER_WRITE ;

   6698  2 001411   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001412   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:136  
         2 001413   000000 011000                    NOP     0

      956     6699    3   ERROR:
      957     6700    3              ALTRETURN ;

   6700  2 001414   200006 221300       ERROR        LDX1  ! REFERENCE_FOUND,,AUTO
         2 001415   000000 702211                    TSX2  ! 0,X1

      958     6701    3           END /* ELSE */ ;
      959     6702
      960     6703        /* END ND_PROCESS_IFAD */
      961     6704        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:137  
      962     6705        /*I*  NAME:        ND_CHECK_MATCH
      963     6706              AUTHOR:      Scott S. Sheppard
      964     6707              PURPOSE:     Checks $Object Card
      965     6708              INTERFACE:   None called.
      966     6709              INPUT:       OBJECT.BCD.LIBRARY
      967     6710                           OBJECT_KEY
      968     6711                           OBJECT_SEARCH_KEY
      969     6712              OUTPUT:      MATCH_FOUND - output parameter
      970     6713              DESCRIPTION: This procedure determines if the current $Object
      971     6714                           card is the $Object card of the deck to be added
      972     6715                           by comparing the key of the current object   and
      973     6716                           the key of the object to add.
      974     6717        */
      975     6718
      976     6719    2   ND_CHECK_MATCH: PROC (MATCH_FOUND) ;

   6719  2 001416   200010 741300       ND_CHECK_MA* STX1  ! MATCHING_OBJECT+1,,AUTO

      977     6720
      978     6721    3      DCL MATCH_FOUND       BIT (1) CALIGNED ;
      979     6722
      980     6723        /* Code */
      981     6724
      982     6725    3      IF OBJECT_KEY.DATA = OBJECT_SEARCH_KEY.DATA

   6725  2 001417   040000 106400                    CMPC    fill='040'O
         2 001420   000000 200027 xsym               ADSC9   OBJECT_KEY               cn=1,n=23
         2 001421   000000 000027 0                  ADSC9   OBJECT_SEARCH_KEY        cn=0,n=23
         2 001422   001430 601000 2                  TNZ     s:6727

      983     6726    3      THEN MATCH_FOUND = %TRUE ;

   6726  2 001423   200011 470500                    LDP0    @MATCH_FOUND,,AUTO
         2 001424   003100 060400                    CSL     bolr='003'O
         2 001425   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         2 001426   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         2 001427   001434 710000 2                  TRA     s:6728
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:138  

      984     6727    3      ELSE MATCH_FOUND = %FALSE ;

   6727  2 001430   200011 470500                    LDP0    @MATCH_FOUND,,AUTO
         2 001431   003100 060400                    CSL     bolr='003'O
         2 001432   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         2 001433   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1

      985     6728    3      RETURN ;

   6728  2 001434   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001435   000001 702211                    TSX2  ! 1,X1

      986     6729
      987     6730    3   END ND_CHECK_MATCH ;
      988     6731        %EJECT;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:139  
      989     6732        /*I*  NAME:        ND_STORE_LAST_DECK#
      990     6733              AUTHOR:      Scott S. Sheppard
      991     6734              PURPOSE:     Saves New Last Deck Number
      992     6735              INTERFACE:   TOU$DFU_DF_RD_LAST_DECK#
      993     6736                           TOU$DFU_TF_WR_LAST_DECK#
      994     6737              INPUT:       LAST_DECK#
      995     6738              OUTPUT:      LAST_DECK#
      996     6739              DESCRIPTION: This procedure  gets the  last deck  number that is
      997     6740                           currently being used in the deckfile and increments
      998     6741                           this number by 1  (for the new deck)  and saves the
      999     6742                           new last deck number in the temporary file.
     1000     6743        */
     1001     6744
     1002     6745    2   ND_STORE_LAST_DECK#: PROC ALTRET ;

   6745  2 001436   200010 741300       ND_STORE_LA* STX1  ! MATCHING_OBJECT+1,,AUTO

     1003     6746
     1004     6747        /* Code */
     1005     6748
     1006     6749    3      CALL TOU$DFU_DF_RD_LAST_DECK# ALTRET (ERROR) ;

   6749  2 001437   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001440   000000 701000 xent               TSX1    TOU$DFU_DF_RD_LAST_DECK#
         2 001441   001452 702000 2                  TSX2    ERROR

     1007     6750    3      LAST.DECK# = LAST.DECK# + 1 ;

   6750  2 001442   000000 220000 xsym               LDX0    LAST
         2 001443   000001 621010                    EAX1    1,X0
         2 001444   000000 741000 xsym               STX1    LAST

     1008     6751    3      CALL TOU$DFU_TF_WR_LAST_DECK# ALTRET (ERROR) ;

   6751  2 001445   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001446   000000 701000 xent               TSX1    TOU$DFU_TF_WR_LAST_DECK#
         2 001447   001452 702000 2                  TSX2    ERROR
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:140  

     1009     6752    3      RETURN ;

   6752  2 001450   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001451   000001 702211                    TSX2  ! 1,X1

     1010     6753
     1011     6754    3   ERROR:
     1012     6755    3      ALTRETURN ;

   6755  2 001452   200010 221300       ERROR        LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001453   000000 702211                    TSX2  ! 0,X1

     1013     6756
     1014     6757    3   END ND_STORE_LAST_DECK# ;
     1015     6758        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:141  
     1016     6759        /*I*  NAME:        ND_STORE_OBJECT_DECK
     1017     6760              AUTHORS:     Dave Augustine
     1018     6761                           Scott Sheppard
     1019     6762              PURPOSE:     Saves an Object Deck
     1020     6763              INTERFACE:   TOU$CHECKSUM
     1021     6764                           TOU$DFU_TF_WR_OBJECT
     1022     6765                           TOU$DFU_TF_WR_BINARY
     1023     6766                           TOU$DFU_TF_WR_BCD_CARDS
     1024     6767              INPUT:       OBJECT_SEARCH_KEY
     1025     6768                           LAST.DECK#
     1026     6769                           OBJECT
     1027     6770              OUTPUT:      OBJECT_KEY
     1028     6771                           OBJECT
     1029     6772                           BCD_KEY
     1030     6773                           BIN#
     1031     6774                           BCD#
     1032     6775              DESCRIPTION: This procedure saves all of the records for the
     1033     6776                           object deck,($object, binary, patches, $dkend),
     1034     6777                           in the temporary file.
     1035     6778        */
     1036     6779        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:142  
     1037     6780    2   ND_STORE_OBJECT_DECK: PROC ALTRET ;

   6780  2 001454   200010 741300       ND_STORE_OB* STX1  ! MATCHING_OBJECT+1,,AUTO

     1038     6781
     1039     6782        /* Code */
     1040     6783
     1041     6784    3      OBJECT_KEY.DATA = OBJECT_SEARCH_KEY.DATA ;

   6784  2 001455   040000 100400                    MLR     fill='040'O
         2 001456   000000 000027 0                  ADSC9   OBJECT_SEARCH_KEY        cn=0,n=23
         2 001457   000000 200027 xsym               ADSC9   OBJECT_KEY               cn=1,n=23

     1042     6785    3      OBJECT.DECK# = LAST.DECK#;

   6785  2 001460   000000 220000 xsym               LDX0    LAST
         2 001461   000024 740000 xsym               STX0    OBJECT+20

     1043     6786    3      OBJECT.BINARY_COUNT = BIN# ;

   6786  2 001462   000000 722000 xsym               LXL2    BIN#
         2 001463   000024 442000 xsym               SXL2    OBJECT+20

     1044     6787    3      OBJECT.TOTAL_COUNT = BIN# + BCD# + 1;

   6787  2 001464   000000 236000 xsym               LDQ     BIN#
         2 001465   000000 036000 xsym               ADLQ    BCD#
         2 001466   000001 623006                    EAX3    1,QL
         2 001467   000025 743000 xsym               STX3    OBJECT+21

     1045     6788    3      CALL TOU$CHECKSUM (0,

   6788  2 001470   000016 236000 3                  LDQ     14
         2 001471   200022 756100                    STQ     DIGIT_VALUE+1,,AUTO
         2 001472   000020 237000 3                  LDAQ    16
         2 001473   200026 757100                    STAQ    DIGIT_VALUE+5,,AUTO
         2 001474   200022 630500                    EPPR0   DIGIT_VALUE+1,,AUTO
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:143  
         2 001475   200025 450500                    STP0    DIGIT_VALUE+4,,AUTO
         2 001476   000022 236000 3                  LDQ     18
         2 001477   200024 756100                    STQ     DIGIT_VALUE+3,,AUTO
         2 001500   200024 630500                    EPPR0   DIGIT_VALUE+3,,AUTO
         2 001501   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 001502   000000 701000 xent               TSX1    TOU$CHECKSUM
         2 001503   000000 011000                    NOP     0

     1046     6789    3              ADDR (OBJECT),
     1047     6790    3              23,
     1048     6791    3              OBJECT.CHECKSUM);
     1049     6792
     1050     6793    3      CALL TOU$DFU_TF_WR_OBJECT ALTRET (ERROR) ;

   6793  2 001504   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001505   000000 701000 xent               TSX1    TOU$DFU_TF_WR_OBJECT
         2 001506   001525 702000 2                  TSX2    ERROR

     1051     6794
     1052     6795    3      BINARY_KEY.DECK# = OBJECT.DECK# ;

   6795  2 001507   000024 236000 xsym               LDQ     OBJECT+20
         2 001510   000011 772000                    QRL     9
         2 001511   000000 552030 xsym               STBQ    BINARY_KEY,'30'O

     1053     6796    3      CALL TOU$DFU_TF_WR_BINARY ALTRET (ERROR) ;

   6796  2 001512   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001513   000000 701000 xent               TSX1    TOU$DFU_TF_WR_BINARY
         2 001514   001525 702000 2                  TSX2    ERROR

     1054     6797
     1055     6798    3      BCD_KEY.DECK# = OBJECT.DECK# ;

   6798  2 001515   000024 236000 xsym               LDQ     OBJECT+20
         2 001516   000011 772000                    QRL     9
         2 001517   000000 552030 xsym               STBQ    BCD_KEY,'30'O
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:144  

     1056     6799    3      CALL TOU$DFU_TF_WR_BCD_CARDS ALTRET (ERROR) ;

   6799  2 001520   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001521   000000 701000 xent               TSX1    TOU$DFU_TF_WR_BCD_CARDS
         2 001522   001525 702000 2                  TSX2    ERROR

     1057     6800    3      RETURN ;

   6800  2 001523   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001524   000001 702211                    TSX2  ! 1,X1

     1058     6801
     1059     6802    3   ERROR:
     1060     6803    3      ALTRETURN ;

   6803  2 001525   200010 221300       ERROR        LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001526   000000 702211                    TSX2  ! 0,X1

     1061     6804
     1062     6805    3   END ND_STORE_OBJECT_DECK ;
     1063     6806        %EJECT;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:145  
     1064     6807        /*I*  NAME:        ND_STORE_CATALOG_CHANGES
     1065     6808              AUTHOR:      Scott S. Sheppard
     1066     6809              PURPOSE:     Saves Catalog Control and Catalog Entry
     1067     6810              INTERFACE:   TOU$DFU_RD_CATALOG_CONTROL
     1068     6811                           TOU$GET_CARD
     1069     6812              INPUT:       RECORD.SIZE
     1070     6813                           BINARY_CARD
     1071     6814                           BIN#
     1072     6815                           DUP.BINARY_V
     1073     6816              OUTPUT:      BUFFER
     1074     6817                           BIN#
     1075     6818              DESCRIPTION: This procedure gets all of the binary cards for
     1076     6819                           the deck to be added from the IFAD input source
     1077     6820                           The binary cards are stored in the BUFFER array
     1078     6821        */
     1079     6822        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:146  
     1080     6823    2   ND_STORE_CATALOG_CHANGES: PROC ALTRET ;

   6823  2 001527   200010 741300       ND_STORE_CA* STX1  ! MATCHING_OBJECT+1,,AUTO

     1081     6824
     1082     6825        /* Code */
     1083     6826
     1084     6827    3      CALL TOU$DFU_DF_RD_CATALOG_CONTROL ALTRET (ERROR) ;

   6827  2 001530   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001531   000000 701000 xent               TSX1    TOU$DFU_DF_RD_CATALOG_CONTROL
         2 001532   001560 702000 2                  TSX2    ERROR

     1085     6828    3      CATALOG_ENTRY_KEY.DECK#  = CATALOG_DATA.DECK# ;

   6828  2 001533   000000 236000 xsym               LDQ     CATALOG_DATA
         2 001534   000011 772000                    QRL     9
         2 001535   000000 552030 xsym               STBQ    CATALOG_ENTRY_KEY,'30'O

     1086     6829    3      CATALOG_ENTRY_KEY.ENTRY# = CATALOG_DATA.ENTRY_COUNT + 1 ;

   6829  2 001536   000000 236000 xsym               LDQ     CATALOG_DATA
         2 001537   777777 376007                    ANQ     -1,DL
         2 001540   000001 036007                    ADLQ    1,DL
         2 001541   200022 756100                    STQ     DIGIT_VALUE+1,,AUTO
         2 001542   000000 101500                    MRL     fill='000'O
         2 001543   200022 000004                    ADSC9   DIGIT_VALUE+1,,AUTO      cn=0,n=4
         2 001544   000000 600002 xsym               ADSC9   CATALOG_ENTRY_KEY        cn=3,n=2

     1087     6830    3      CALL TOU$DFU_TF_WR_CATALOG_ENTRY ALTRET (ERROR) ;

   6830  2 001545   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001546   000000 701000 xent               TSX1    TOU$DFU_TF_WR_CATALOG_ENTRY
         2 001547   001560 702000 2                  TSX2    ERROR

     1088     6831
     1089     6832    3      CATALOG_DATA.ENTRY_COUNT = CATALOG_DATA.ENTRY_COUNT + 1 ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:147  

   6832  2 001550   000000 720000 xsym               LXL0    CATALOG_DATA
         2 001551   000001 621010                    EAX1    1,X0
         2 001552   000000 441000 xsym               SXL1    CATALOG_DATA

     1090     6833    3      CALL TOU$DFU_TF_WR_CATALOG_CONTROL ALTRET (ERROR) ;

   6833  2 001553   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001554   000000 701000 xent               TSX1    TOU$DFU_TF_WR_CATALOG_CONTROL
         2 001555   001560 702000 2                  TSX2    ERROR

     1091     6834    3      RETURN ;

   6834  2 001556   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001557   000001 702211                    TSX2  ! 1,X1

     1092     6835
     1093     6836    3   ERROR:
     1094     6837    3      ALTRETURN ;

   6837  2 001560   200010 221300       ERROR        LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001561   000000 702211                    TSX2  ! 0,X1

     1095     6838
     1096     6839    3   END ND_STORE_CATALOG_CHANGES ;
     1097     6840    2   END ND_PROCESS_IFAD ;
     1098     6841        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:148  
     1099     6842        /*I*  NAME:        ND_PROCESS_TEMP
     1100     6843              AUTHOR:      Scott S. Sheppard
     1101     6844              PURPOSE:     Processes TEMP Input
     1102     6845              INTERFACE:   ND_SAVE_CATALOG_CONTROL
     1103     6846                           ND_SAVE_CATALOG_ENTRY
     1104     6847                           ND_SAVE_OBJECT_DECK
     1105     6848                           ND_SAVE_LOG
     1106     6849                           ND_SETUP_PRINT
     1107     6850                           TOU$B_PRINT_DECK_LINE
     1108     6851                           ND_PRINT_ADDED_DECK
     1109     6852                           ND_SAVE_LAST_DECK#
     1110     6853                           TOU$DU_USER_WRITE
     1111     6854                           TOU$DU_PRINTER_WRITE
     1112     6855              INPUT:       DEER temporary file - contains catalog records
     1113     6856              OUTPUT:      DECKFILE            - new deck copied in
     1114     6857                           DUP.BREAK_DISABLED
     1115     6858              DESCRIPTION: This procedure processes the temporary file, by
     1116     6859                           reading its records and  writing  them into the
     1117     6860                           deckfile.
     1118     6861        */
     1119     6862        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:149  
     1120     6863    1   ND_PROCESS_TEMP: PROC ALTRET ;

   6863  2 001562   200006 741300       ND_PROCESS_* STX1  ! REFERENCE_FOUND,,AUTO

     1121     6864
     1122     6865        /* Code */
     1123     6866
     1124     6867    2      DUP.BREAK_DISABLED = %TRUE ;

   6867  2 001563   000400 236003                    LDQ     256,DU
         2 001564   000155 256000 xsym               ORSQ    DUP+109

     1125     6868    2      CALL ND_SAVE_CATALOG_CONTROL ALTRET (ERROR) ;

   6868  2 001565   001630 701000 2                  TSX1    ND_SAVE_CATALOG_CONTROL
         2 001566   001612 702000 2                  TSX2    ERROR

     1126     6869    2      CALL ND_SAVE_CATALOG_ENTRY ALTRET (ERROR) ;

   6869  2 001567   001643 701000 2                  TSX1    ND_SAVE_CATALOG_ENTRY
         2 001570   001612 702000 2                  TSX2    ERROR

     1127     6870    2      CALL ND_SAVE_OBJECT_DECK ALTRET (ERROR) ;

   6870  2 001571   001664 701000 2                  TSX1    ND_SAVE_OBJECT_DECK
         2 001572   001612 702000 2                  TSX2    ERROR

     1128     6871    2      CALL ND_SAVE_LAST_DECK# ALTRET (ERROR) ;

   6871  2 001573   002114 701000 2                  TSX1    ND_SAVE_LAST_DECK#
         2 001574   001612 702000 2                  TSX2    ERROR

     1129     6872    2      CALL ND_SAVE_LOG ALTRET (ERROR) ;

   6872  2 001575   002127 701000 2                  TSX1    ND_SAVE_LOG
         2 001576   001612 702000 2                  TSX2    ERROR

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:150  
     1130     6873    2      CALL ND_SETUP_PRINT ;

   6873  2 001577   002160 701000 2                  TSX1    ND_SETUP_PRINT
         2 001600   000000 011000                    NOP     0

     1131     6874    2      CALL TOU$B_PRINT_DECK_LINE ;

   6874  2 001601   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001602   000000 701000 xent               TSX1    TOU$B_PRINT_DECK_LINE
         2 001603   000000 011000                    NOP     0

     1132     6875    2      CALL ND_PRINT_ADDED_DECK ;

   6875  2 001604   002276 701000 2                  TSX1    ND_PRINT_ADDED_DECK
         2 001605   000000 011000                    NOP     0

     1133     6876    2      DUP.BREAK_DISABLED = %FALSE ;

   6876  2 001606   000000 236000 3                  LDQ     0
         2 001607   000155 356000 xsym               ANSQ    DUP+109

     1134     6877    2      RETURN ;

   6877  2 001610   200006 221300                    LDX1  ! REFERENCE_FOUND,,AUTO
         2 001611   000001 702211                    TSX2  ! 1,X1

     1135     6878
     1136     6879    2   ERROR:
     1137     6880    2      DUP.BREAK_DISABLED = %FALSE ;

   6880  2 001612   000000 236000 3     ERROR        LDQ     0
         2 001613   000155 356000 xsym               ANSQ    DUP+109

     1138     6881    2      DUP.MSG_CODE = %E$NPT_BAD_DECKFILE ;

   6881  2 001614   000674 235007                    LDA     444,DL
         2 001615   000020 755000 xsym               STA     DUP+16
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:151  

     1139     6882    2      DUP.DF.CLOSE_TYPE = %DISCARD_FILE ;

   6882  2 001616   000001 235007                    LDA     1,DL
         2 001617   000106 755000 xsym               STA     DUP+70

     1140     6883    2      CALL TOU$DU_USER_WRITE ;

   6883  2 001620   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001621   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 001622   000000 011000                    NOP     0

     1141     6884    2      CALL TOU$DU_PRINTER_WRITE ;

   6884  2 001623   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001624   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 001625   000000 011000                    NOP     0

     1142     6885    2      ALTRETURN ;

   6885  2 001626   200006 221300                    LDX1  ! REFERENCE_FOUND,,AUTO
         2 001627   000000 702211                    TSX2  ! 0,X1

     1143     6886
     1144     6887    2   END ND_PROCESS_TEMP ;
     1145     6888        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:152  
     1146     6889        /*I*  NAME:        ND_SAVE_CATALOG_CONTROL
     1147     6890              AUTHOR:      Scott S. Sheppard
     1148     6891              PURPOSE:     Saves Catalog Control
     1149     6892              INTERFACE:   TOU$DFU_TF_RD_CATALOG_CONTROL
     1150     6893                           TOU$DFU_DF_WR_CATALOG_CONTROL
     1151     6894              INPUT:       CATALOG_DATA
     1152     6895              OUTPUT:      CATALOG_DATA
     1153     6896              DESCRIPTION: This procedure saves the new catalog control record
     1154     6897                           which has been changed to reflect that the  catalog
     1155     6898                           now contains one more entry.
     1156     6899        */
     1157     6900
     1158     6901    1   ND_SAVE_CATALOG_CONTROL: PROC ALTRET ;

   6901  2 001630   200010 741300       ND_SAVE_CAT* STX1  ! MATCHING_OBJECT+1,,AUTO

     1159     6902
     1160     6903        /* Code */
     1161     6904
     1162     6905    2      CALL TOU$DFU_TF_RD_CATALOG_CONTROL ALTRET (ERROR) ;

   6905  2 001631   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001632   000000 701000 xent               TSX1    TOU$DFU_TF_RD_CATALOG_CONTROL
         2 001633   001641 702000 2                  TSX2    ERROR

     1163     6906    2      CALL TOU$DFU_DF_WR_CATALOG_CONTROL ALTRET (ERROR) ;

   6906  2 001634   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001635   000000 701000 xent               TSX1    TOU$DFU_DF_WR_CATALOG_CONTROL
         2 001636   001641 702000 2                  TSX2    ERROR

     1164     6907    2      RETURN ;

   6907  2 001637   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001640   000001 702211                    TSX2  ! 1,X1

     1165     6908
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:153  
     1166     6909    2   ERROR:
     1167     6910    2      ALTRETURN ;

   6910  2 001641   200010 221300       ERROR        LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001642   000000 702211                    TSX2  ! 0,X1

     1168     6911
     1169     6912    2   END ND_SAVE_CATALOG_CONTROL ;
     1170     6913        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:154  
     1171     6914        /*I*  NAME:        ND_SAVE_CATALOG_ENTRY
     1172     6915              AUTHOR:      Scott S. Sheppard
     1173     6916              PURPOSE:     Saves Catalog Entry
     1174     6917              INTERFACE:   TOU$DFU_TF_RD_CATALOG_ENTRY
     1175     6918                           TOU$DFU_DF_WR_CATALOG_ENTRY
     1176     6919              INPUT:       CATALOG_ENTRY
     1177     6920              OUTPUT:      CATALOG_ENTRY
     1178     6921              DESCRIPTION: This procedure save a catalog entry for the new
     1179     6922                           object deck.
     1180     6923        */
     1181     6924
     1182     6925    1   ND_SAVE_CATALOG_ENTRY: PROC ALTRET ;

   6925  2 001643   200010 741300       ND_SAVE_CAT* STX1  ! MATCHING_OBJECT+1,,AUTO

     1183     6926
     1184     6927        /* Code */
     1185     6928
     1186     6929    2      CATALOG_ENTRY_KEY.DECK# = CATALOG_DATA.DECK# ;

   6929  2 001644   000000 236000 xsym               LDQ     CATALOG_DATA
         2 001645   000011 772000                    QRL     9
         2 001646   000000 552030 xsym               STBQ    CATALOG_ENTRY_KEY,'30'O

     1187     6930    2      CATALOG_ENTRY_KEY.ENTRY# = CATALOG_DATA.ENTRY_COUNT ;

   6930  2 001647   000000 100400                    MLR     fill='000'O
         2 001650   000000 400002 xsym               ADSC9   CATALOG_DATA             cn=2,n=2
         2 001651   000000 600002 xsym               ADSC9   CATALOG_ENTRY_KEY        cn=3,n=2

     1188     6931    2      CALL TOU$DFU_TF_RD_CATALOG_ENTRY ALTRET (ERROR) ;

   6931  2 001652   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001653   000000 701000 xent               TSX1    TOU$DFU_TF_RD_CATALOG_ENTRY
         2 001654   001662 702000 2                  TSX2    ERROR

     1189     6932    2      CALL TOU$DFU_DF_WR_CATALOG_ENTRY ALTRET (ERROR) ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:155  

   6932  2 001655   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001656   000000 701000 xent               TSX1    TOU$DFU_DF_WR_CATALOG_ENTRY
         2 001657   001662 702000 2                  TSX2    ERROR

     1190     6933    2      RETURN ;

   6933  2 001660   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001661   000001 702211                    TSX2  ! 1,X1

     1191     6934
     1192     6935    2   ERROR:
     1193     6936    2      ALTRETURN ;

   6936  2 001662   200010 221300       ERROR        LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001663   000000 702211                    TSX2  ! 0,X1

     1194     6937
     1195     6938    2   END ND_SAVE_CATALOG_ENTRY ;
     1196     6939        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:156  
     1197     6940        /*I*  NAME:        ND_SAVE_OBJECT_DECK
     1198     6941              AUTHOR:      Scott S. Sheppard
     1199     6942              PURPOSE:     Saves an Object Deck in the deckfile
     1200     6943              INTERFACE:   TOU$DFU_DF_CHECK_FOR_KEY
     1201     6944                           ND_SAVE_NEW_DECK
     1202     6945                           ND_REPLACE_OLD_DECK
     1203     6946              INPUT:       OBJECT_KEY
     1204     6947              OUTPUT:      Appropriate module called to proces the deck
     1205     6948              DESCRIPTION: This procedure determines if the deck to be added
     1206     6949                           is already in the deckfile as part of a different
     1207     6950                           catalog.   If the deck exists, the reference list
     1208     6951                           is  changed  to  show  that  the  current catalog
     1209     6952                           references the deck.  If the deck does not exist,
     1210     6953                           the $object, binary, patch, and  $dkend cards are
     1211     6954                           added to the deckfile.
     1212     6955        */
     1213     6956
     1214     6957    1   ND_SAVE_OBJECT_DECK: PROC ALTRET ;

   6957  2 001664   200010 741300       ND_SAVE_OBJ* STX1  ! MATCHING_OBJECT+1,,AUTO

     1215     6958
     1216     6959        /* Code */
     1217     6960
     1218     6961    2      CALL TOU$DFU_DF_CHECK_FOR_KEY WHENRETURN

   6961  2 001665   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001666   000000 701000 xent               TSX1    TOU$DFU_DF_CHECK_FOR_KEY
         2 001667   001673 702000 2                  TSX2    s:6967

     1219     6962    3           DO ;

     1220     6963    3              CALL ND_REPLACE_OLD_DECK ALTRET (ERROR) ;

   6963  2 001670   001775 701000 2                  TSX1    ND_REPLACE_OLD_DECK
         2 001671   001677 702000 2                  TSX2    ERROR

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:157  
     1221     6964    3           END /* WHENRETURN */ ;

   6964  2 001672   001675 710000 2                  TRA     s:6969

     1222     6965    2      WHENALTRETURN
     1223     6966    3           DO ;

     1224     6967    3              CALL ND_SAVE_NEW_DECK ALTRET (ERROR) ;

   6967  2 001673   001701 701000 2                  TSX1    ND_SAVE_NEW_DECK
         2 001674   001677 702000 2                  TSX2    ERROR

     1225     6968    3           END /* WHENALTRETURN */ ;

     1226     6969    2      RETURN ;

   6969  2 001675   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001676   000001 702211                    TSX2  ! 1,X1

     1227     6970
     1228     6971    2   ERROR:
     1229     6972    2      ALTRETURN ;

   6972  2 001677   200010 221300       ERROR        LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 001700   000000 702211                    TSX2  ! 0,X1

     1230     6973
     1231     6974        /* END ND_SAVE_OBJECT_DECK */
     1232     6975        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:158  
     1233     6976        /*I*  NAME:        ND_SAVE_NEW_DECK
     1234     6977              AUTHOR:      Scott S. Sheppard
     1235     6978              PURPOSE:     Saves an Object Deck
     1236     6979              INTERFACE:   TOU$DFU_DF_WR_OBJECT
     1237     6980                           TOU$DFU_TF_RD_BINARY
     1238     6981                           TOU$DFU_DF_WR_BINARY
     1239     6982                           TOU$DFU_TF_RD_BCD_CARDS
     1240     6983                           TOU$DFU_DF_WR_BCD_CARDS
     1241     6984                           TOU$DFU_DF_WR_OBJECT_REFLIST
     1242     6985              INPUT:       OBJECT
     1243     6986              OUTPUT:      BIN#
     1244     6987                           BINARY_KEY
     1245     6988                           BCD_KEY
     1246     6989                           BCD#
     1247     6990                           OBJECT_REFLIST_KEY
     1248     6991                           OBJECT_REFLIST_DATA
     1249     6992              DESCRIPTION: This procedure saves all of the records necessary
     1250     6993                           to add an object deck to the deckfile.    Records
     1251     6994                           are  read  from  the temporary file and  directly
     1252     6995                           copied into the deckfile.
     1253     6996        */
     1254     6997        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:159  
     1255     6998    2   ND_SAVE_NEW_DECK: PROC ALTRET ;

   6998  2 001701   200012 741300       ND_SAVE_NEW* STX1  ! VALID_CHOICE,,AUTO

     1256     6999
     1257     7000        /* Code */
     1258     7001
     1259     7002    3      CALL TOU$DFU_TF_RD_OBJECT ALTRET (ERROR) ;

   7002  2 001702   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001703   000000 701000 xent               TSX1    TOU$DFU_TF_RD_OBJECT
         2 001704   001773 702000 2                  TSX2    ERROR

     1260     7003    3      CALL TOU$DFU_DF_WR_OBJECT ALTRET (ERROR) ;

   7003  2 001705   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001706   000000 701000 xent               TSX1    TOU$DFU_DF_WR_OBJECT
         2 001707   001773 702000 2                  TSX2    ERROR

     1261     7004
     1262     7005    3      BINARY_KEY.DECK# = OBJECT.DECK# ;

   7005  2 001710   000024 236000 xsym               LDQ     OBJECT+20
         2 001711   000011 772000                    QRL     9
         2 001712   000000 552030 xsym               STBQ    BINARY_KEY,'30'O

     1263     7006    3      BIN# = OBJECT.BINARY_COUNT ;

   7006  2 001713   000024 236000 xsym               LDQ     OBJECT+20
         2 001714   777777 376007                    ANQ     -1,DL
         2 001715   000000 756000 xsym               STQ     BIN#

     1264     7007    3      CALL TOU$DFU_TF_RD_BINARY ALTRET (ERROR) ;

   7007  2 001716   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001717   000000 701000 xent               TSX1    TOU$DFU_TF_RD_BINARY
         2 001720   001773 702000 2                  TSX2    ERROR
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:160  

     1265     7008    3      CALL TOU$DFU_DF_WR_BINARY ALTRET (ERROR) ;

   7008  2 001721   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001722   000000 701000 xent               TSX1    TOU$DFU_DF_WR_BINARY
         2 001723   001773 702000 2                  TSX2    ERROR

     1266     7009
     1267     7010    3      BCD_KEY.DECK# = OBJECT.DECK# ;

   7010  2 001724   000024 236000 xsym               LDQ     OBJECT+20
         2 001725   000011 772000                    QRL     9
         2 001726   000000 552030 xsym               STBQ    BCD_KEY,'30'O

     1268     7011    3      BCD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1 ;

   7011  2 001727   000024 236000 xsym               LDQ     OBJECT+20
         2 001730   777777 376007                    ANQ     -1,DL
         2 001731   200022 756100                    STQ     DIGIT_VALUE+1,,AUTO
         2 001732   000025 236000 xsym               LDQ     OBJECT+21
         2 001733   000022 772000                    QRL     18
         2 001734   200022 136100                    SBLQ    DIGIT_VALUE+1,,AUTO
         2 001735   000001 136007                    SBLQ    1,DL
         2 001736   000000 756000 xsym               STQ     BCD#

     1269     7012    3      CALL TOU$DFU_TF_RD_BCD_CARDS ALTRET (ERROR) ;

   7012  2 001737   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001740   000000 701000 xent               TSX1    TOU$DFU_TF_RD_BCD_CARDS
         2 001741   001773 702000 2                  TSX2    ERROR

     1270     7013    3      CALL TOU$DFU_DF_WR_BCD_CARDS ALTRET (ERROR) ;

   7013  2 001742   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001743   000000 701000 xent               TSX1    TOU$DFU_DF_WR_BCD_CARDS
         2 001744   001773 702000 2                  TSX2    ERROR

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:161  
     1271     7014
     1272     7015    3      OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;

   7015  2 001745   000024 236000 xsym               LDQ     OBJECT+20
         2 001746   000011 772000                    QRL     9
         2 001747   000000 552030 xsym               STBQ    OBJECT_REFLIST_KEY,'30'O

     1273     7016    3      OBJECT_REFLIST_DATA.NUM_REFS = 1 ;

   7016  2 001750   000001 235007                    LDA     1,DL
         2 001751   000000 755000 xsym               STA     OBJECT_REFLIST_DATA

     1274     7017    3      OBJECT_REFLIST_DATA.REFS.ME#(0) = MASTER_ENTRY_KEY.ENTRY# ;

   7017  2 001752   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 001753   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 001754   000033 773000                    LRL     27
         2 001755   777777 376007                    ANQ     -1,DL
         2 001756   000000 620006                    EAX0    0,QL
         2 001757   000001 740000 xsym               STX0    OBJECT_REFLIST_DATA+1

     1275     7018    3      OBJECT_REFLIST_DATA.REFS.CE#(0) = CATALOG_ENTRY_KEY.ENTRY# ;

   7018  2 001760   000000 235000 xsym               LDA     CATALOG_ENTRY_KEY
         2 001761   000001 236000 xsym               LDQ     CATALOG_ENTRY_KEY+1
         2 001762   000033 773000                    LRL     27
         2 001763   777777 376007                    ANQ     -1,DL
         2 001764   000000 621006                    EAX1    0,QL
         2 001765   000001 441000 xsym               SXL1    OBJECT_REFLIST_DATA+1

     1276     7019    3      CALL TOU$DFU_DF_WR_OBJECT_REFLIST ALTRET (ERROR) ;

   7019  2 001766   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001767   000000 701000 xent               TSX1    TOU$DFU_DF_WR_OBJECT_REFLIST
         2 001770   001773 702000 2                  TSX2    ERROR

     1277     7020    3      RETURN ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:162  

   7020  2 001771   200012 221300                    LDX1  ! VALID_CHOICE,,AUTO
         2 001772   000001 702211                    TSX2  ! 1,X1

     1278     7021
     1279     7022    3   ERROR:
     1280     7023    3      ALTRETURN ;

   7023  2 001773   200012 221300       ERROR        LDX1  ! VALID_CHOICE,,AUTO
         2 001774   000000 702211                    TSX2  ! 0,X1

     1281     7024
     1282     7025    3   END ND_SAVE_NEW_DECK ;
     1283     7026        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:163  
     1284     7027        /*I*  NAME:        ND_REPLACE_OLD_DECK
     1285     7028              AUTHOR:      Scott S. Sheppard
     1286     7029              PURPOSE:     Saves an Object Deck
     1287     7030              INTERFACE:   TOU$DFU_DF_DL_DECK
     1288     7031                           TOU$DFU_TF_RD_OBJECT
     1289     7032                           TOU$DFU_DF_WR_OBJECT
     1290     7033                           TOU$DFU_TF_RD_BINARY
     1291     7034                           TOU$DFU_DF_WR_BINARY
     1292     7035                           TOU$DFU_TF_RD_BCD_CARDS
     1293     7036                           TOU$DFU_DF_WR_BCD_CARDS
     1294     7037                           TOU$DFU_DF_RD_OBJECT_REFLIST
     1295     7038                           TOU$DFU_DF_WR_OBJECT_REFLIST
     1296     7039              INPUT:       OBJECT
     1297     7040              OUTPUT:      BIN#
     1298     7041                           BINARY_KEY
     1299     7042                           BCD_KEY
     1300     7043                           BCD#
     1301     7044                           OBJECT_REFLIST_KEY
     1302     7045                           OBJECT_REFLIST_DATA
     1303     7046              DESCRIPTION: This procedure replaces  an existing  object deck
     1304     7047                           with  another  version of the same deck  from the
     1305     7048                           temporary file.   The old version is deleted from
     1306     7049                           the deckfile and the new one is then added.   The
     1307     7050                           deck  in  the  temporary file is keyed  by a deck
     1308     7051                           number that would be used if the deck were a  new
     1309     7052                           deck.
     1310     7053        */
     1311     7054
     1312     7055    2   ND_REPLACE_OLD_DECK: PROC ALTRET ;

   7055  2 001775   200012 741300       ND_REPLACE_* STX1  ! VALID_CHOICE,,AUTO

     1313     7056
     1314     7057    3      DCL OLD_COUNT   UBIN WORD ALIGNED ;
     1315     7058           %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:164  
     1316     7059        /* Code */
     1317     7060
     1318     7061    3      BINARY_KEY.DECK# = OBJECT.DECK# ;

   7061  2 001776   000024 236000 xsym               LDQ     OBJECT+20
         2 001777   000011 772000                    QRL     9
         2 002000   000000 552030 xsym               STBQ    BINARY_KEY,'30'O

     1319     7062    3      OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;

   7062  2 002001   000024 236000 xsym               LDQ     OBJECT+20
         2 002002   000011 772000                    QRL     9
         2 002003   000000 552030 xsym               STBQ    OBJECT_REFLIST_KEY,'30'O

     1320     7063    3      OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;

   7063  2 002004   000024 236000 xsym               LDQ     OBJECT+20
         2 002005   000011 772000                    QRL     9
         2 002006   000000 552030 xsym               STBQ    OBJECT_REFLIST_KEY,'30'O

     1321     7064    3      CALL TOU$DFU_DF_RD_OBJECT_REFLIST ALTRET (ERROR) ;

   7064  2 002007   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002010   000000 701000 xent               TSX1    TOU$DFU_DF_RD_OBJECT_REFLIST
         2 002011   002112 702000 2                  TSX2    ERROR

     1322     7065    3      CALL TOU$DFU_DF_DL_DECK ALTRET (ERROR) ;

   7065  2 002012   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002013   000000 701000 xent               TSX1    TOU$DFU_DF_DL_DECK
         2 002014   002112 702000 2                  TSX2    ERROR

     1323     7066
     1324     7067    3      CALL TOU$DFU_TF_RD_OBJECT ALTRET (ERROR) ;

   7067  2 002015   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002016   000000 701000 xent               TSX1    TOU$DFU_TF_RD_OBJECT
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:165  
         2 002017   002112 702000 2                  TSX2    ERROR

     1325     7068    3      CALL TOU$DFU_DF_WR_OBJECT ALTRET (ERROR) ;

   7068  2 002020   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002021   000000 701000 xent               TSX1    TOU$DFU_DF_WR_OBJECT
         2 002022   002112 702000 2                  TSX2    ERROR

     1326     7069
     1327     7070    3      BINARY_KEY.DECK# = OBJECT.DECK# ;

   7070  2 002023   000024 236000 xsym               LDQ     OBJECT+20
         2 002024   000011 772000                    QRL     9
         2 002025   000000 552030 xsym               STBQ    BINARY_KEY,'30'O

     1328     7071    3      BIN# = OBJECT.BINARY_COUNT ;

   7071  2 002026   000024 236000 xsym               LDQ     OBJECT+20
         2 002027   777777 376007                    ANQ     -1,DL
         2 002030   000000 756000 xsym               STQ     BIN#

     1329     7072    3      CALL TOU$DFU_TF_RD_BINARY ALTRET (ERROR) ;

   7072  2 002031   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002032   000000 701000 xent               TSX1    TOU$DFU_TF_RD_BINARY
         2 002033   002112 702000 2                  TSX2    ERROR

     1330     7073    3      CALL TOU$DFU_DF_WR_BINARY ALTRET (ERROR) ;

   7073  2 002034   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002035   000000 701000 xent               TSX1    TOU$DFU_DF_WR_BINARY
         2 002036   002112 702000 2                  TSX2    ERROR

     1331     7074
     1332     7075    3      BCD_KEY.DECK# = OBJECT.DECK# ;

   7075  2 002037   000024 236000 xsym               LDQ     OBJECT+20
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:166  
         2 002040   000011 772000                    QRL     9
         2 002041   000000 552030 xsym               STBQ    BCD_KEY,'30'O

     1333     7076    3      BCD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1 ;

   7076  2 002042   000024 236000 xsym               LDQ     OBJECT+20
         2 002043   777777 376007                    ANQ     -1,DL
         2 002044   200022 756100                    STQ     DIGIT_VALUE+1,,AUTO
         2 002045   000025 236000 xsym               LDQ     OBJECT+21
         2 002046   000022 772000                    QRL     18
         2 002047   200022 136100                    SBLQ    DIGIT_VALUE+1,,AUTO
         2 002050   000001 136007                    SBLQ    1,DL
         2 002051   000000 756000 xsym               STQ     BCD#

     1334     7077    3      CALL TOU$DFU_TF_RD_BCD_CARDS ALTRET (ERROR) ;

   7077  2 002052   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002053   000000 701000 xent               TSX1    TOU$DFU_TF_RD_BCD_CARDS
         2 002054   002112 702000 2                  TSX2    ERROR

     1335     7078    3      CALL TOU$DFU_DF_WR_BCD_CARDS ALTRET (ERROR) ;

   7078  2 002055   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002056   000000 701000 xent               TSX1    TOU$DFU_DF_WR_BCD_CARDS
         2 002057   002112 702000 2                  TSX2    ERROR

     1336     7079
     1337     7080    3      OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;

   7080  2 002060   000024 236000 xsym               LDQ     OBJECT+20
         2 002061   000011 772000                    QRL     9
         2 002062   000000 552030 xsym               STBQ    OBJECT_REFLIST_KEY,'30'O

     1338     7081    3      OLD_COUNT = OBJECT_REFLIST_DATA.NUM_REFS ;

   7081  2 002063   000000 235000 xsym               LDA     OBJECT_REFLIST_DATA
         2 002064   200013 755100                    STA     OLD_COUNT,,AUTO
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:167  

     1339     7082    3      OBJECT_REFLIST_DATA.REFS.ME#(OLD_COUNT) = MASTER_ENTRY_KEY.ENTRY# ;

   7082  2 002065   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 002066   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 002067   000033 773000                    LRL     27
         2 002070   777777 376007                    ANQ     -1,DL
         2 002071   000000 620006                    EAX0    0,QL
         2 002072   200013 721100                    LXL1    OLD_COUNT,,AUTO
         2 002073   000001 740011 xsym               STX0    OBJECT_REFLIST_DATA+1,X1

     1340     7083    3      OBJECT_REFLIST_DATA.REFS.CE#(OLD_COUNT) = CATALOG_ENTRY_KEY.ENTRY# ;

   7083  2 002074   000000 235000 xsym               LDA     CATALOG_ENTRY_KEY
         2 002075   000001 236000 xsym               LDQ     CATALOG_ENTRY_KEY+1
         2 002076   000033 773000                    LRL     27
         2 002077   777777 376007                    ANQ     -1,DL
         2 002100   000000 622006                    EAX2    0,QL
         2 002101   000001 442011 xsym               SXL2    OBJECT_REFLIST_DATA+1,X1

     1341     7084    3      OBJECT_REFLIST_DATA.NUM_REFS = OLD_COUNT + 1 ;

   7084  2 002102   200013 235100                    LDA     OLD_COUNT,,AUTO
         2 002103   000001 035007                    ADLA    1,DL
         2 002104   000000 755000 xsym               STA     OBJECT_REFLIST_DATA

     1342     7085    3      CALL TOU$DFU_DF_WR_OBJECT_REFLIST ALTRET (ERROR) ;

   7085  2 002105   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002106   000000 701000 xent               TSX1    TOU$DFU_DF_WR_OBJECT_REFLIST
         2 002107   002112 702000 2                  TSX2    ERROR

     1343     7086    3      RETURN ;

   7086  2 002110   200012 221300                    LDX1  ! VALID_CHOICE,,AUTO
         2 002111   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:168  
     1344     7087
     1345     7088    3   ERROR:
     1346     7089    3      ALTRETURN ;

   7089  2 002112   200012 221300       ERROR        LDX1  ! VALID_CHOICE,,AUTO
         2 002113   000000 702211                    TSX2  ! 0,X1

     1347     7090
     1348     7091    3   END ND_REPLACE_OLD_DECK ;
     1349     7092    2   END ND_SAVE_OBJECT_DECK ;
     1350     7093        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:169  
     1351     7094        /*I*  NAME:        ND_SAVE_LAST_DECK#
     1352     7095              AUTHOR:      Scott S. Sheppard
     1353     7096              PURPOSE:     Saves Last Deck Number
     1354     7097              INTERFACE:   TOU$DFU_TF_RD_LAST_DECK#
     1355     7098                           TOU$DFU_DF_WR_LAST_DECK#
     1356     7099              INPUT:       LAST.DECK#
     1357     7100              OUTPUT:      LAST.DECK#
     1358     7101              DESCRIPTION: This procedure saves the new last (largest used)
     1359     7102                           deck number in the deckfile.
     1360     7103        */
     1361     7104
     1362     7105    1   ND_SAVE_LAST_DECK#: PROC ALTRET ;

   7105  2 002114   200010 741300       ND_SAVE_LAS* STX1  ! MATCHING_OBJECT+1,,AUTO

     1363     7106
     1364     7107        /* Code */
     1365     7108
     1366     7109    2      CALL TOU$DFU_TF_RD_LAST_DECK# ALTRET (ERROR) ;

   7109  2 002115   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002116   000000 701000 xent               TSX1    TOU$DFU_TF_RD_LAST_DECK#
         2 002117   002125 702000 2                  TSX2    ERROR

     1367     7110    2      CALL TOU$DFU_DF_WR_LAST_DECK# ALTRET (ERROR) ;

   7110  2 002120   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002121   000000 701000 xent               TSX1    TOU$DFU_DF_WR_LAST_DECK#
         2 002122   002125 702000 2                  TSX2    ERROR

     1368     7111    2      RETURN ;

   7111  2 002123   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 002124   000001 702211                    TSX2  ! 1,X1

     1369     7112
     1370     7113    2   ERROR:
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:170  
     1371     7114    2      ALTRETURN ;

   7114  2 002125   200010 221300       ERROR        LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 002126   000000 702211                    TSX2  ! 0,X1

     1372     7115
     1373     7116    2   END ND_SAVE_LAST_DECK# ;
     1374     7117        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:171  
     1375     7118        /*I*  NAME:        ND_SAVE_LOG
     1376     7119              AUTHOR:      Scott S. Sheppard
     1377     7120              PURPOSE:     Saves the deckfile history log
     1378     7121              INTERFACE:   TOU$DU_UPDATE_LOG
     1379     7122                           TOU$DFU_DF_RD_LOG
     1380     7123                           TOU$DFU_DF_WR_LOG
     1381     7124              INPUT:       No system data accessed.
     1382     7125              OUTPUT:      DUP.LOG.CATALOG
     1383     7126                           DUP.LOG.DECK
     1384     7127                           DUP.HOLD_AREA
     1385     7128              DESCRIPTION: This procedure stores the deckfile history log.
     1386     7129        */
     1387     7130
     1388     7131    1   ND_SAVE_LOG: PROC ALTRET ;

   7131  2 002127   200010 741300       ND_SAVE_LOG  STX1  ! MATCHING_OBJECT+1,,AUTO

     1389     7132
     1390     7133        /* Code */
     1391     7134
     1392     7135    2      CALL TOU$DFU_DF_RD_LOG ALTRET (ERROR) ;

   7135  2 002130   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002131   000000 701000 xent               TSX1    TOU$DFU_DF_RD_LOG
         2 002132   002156 702000 2                  TSX2    ERROR

     1393     7136    2      DUP.LOG.TYPE = %T$SF_NEWDECK ;

   7136  2 002133   000112 235007                    LDA     74,DL
         2 002134   000122 755000 xsym               STA     DUP+82

     1394     7137    2      DUP.LOG.CATALOG = CATALOG_KEY.DATA ;

   7137  2 002135   040000 100400                    MLR     fill='040'O
         2 002136   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 002137   000123 000025 xsym               ADSC9   DUP+83                   cn=0,n=21

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:172  
     1395     7138    2      DUP.LOG.DECK = OBJECT_KEY.DATA ;

   7138  2 002140   040000 100400                    MLR     fill='040'O
         2 002141   000000 200027 xsym               ADSC9   OBJECT_KEY               cn=1,n=23
         2 002142   000130 200027 xsym               ADSC9   DUP+88                   cn=1,n=23

     1396     7139    2      DUP.HOLD_AREA = DUP.IFAD.FID ;

   7139  2 002143   040000 100400                    MLR     fill='040'O
         2 002144   000063 200050 xsym               ADSC9   DUP+51                   cn=1,n=40
         2 002145   000142 000050 xsym               ADSC9   DUP+98                   cn=0,n=40

     1397     7140    2      CALL TOU$DU_UPDATE_LOG ALTRET (ERROR) ;

   7140  2 002146   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002147   000000 701000 xent               TSX1    TOU$DU_UPDATE_LOG
         2 002150   002156 702000 2                  TSX2    ERROR

     1398     7141    2      CALL TOU$DFU_DF_WR_LOG ALTRET (ERROR) ;

   7141  2 002151   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002152   000000 701000 xent               TSX1    TOU$DFU_DF_WR_LOG
         2 002153   002156 702000 2                  TSX2    ERROR

     1399     7142    2      RETURN ;

   7142  2 002154   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 002155   000001 702211                    TSX2  ! 1,X1

     1400     7143
     1401     7144    2   ERROR:
     1402     7145    2      ALTRETURN ;

   7145  2 002156   200010 221300       ERROR        LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 002157   000000 702211                    TSX2  ! 0,X1

     1403     7146
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:173  
     1404     7147    2   END ND_SAVE_LOG ;
     1405     7148        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:174  
     1406     7149        /*I*  NAME:        ND_SETUP_PRINT
     1407     7150              AUTHOR:      Scott S. Sheppard
     1408     7151              PURPOSE:     Assign Replacement Variables
     1409     7152              INTERFACE:   None Called.
     1410     7153              INPUT:       OBJECT.BCD.LIBRARY - used to determine GECALL or not
     1411     7154                           OBJECT.BCD.CLASS   - used to determine ITR or MDR
     1412     7155                           BCD_B(BCD#-1)      - $DKEND card saved
     1413     7156                           H$NEWDECK_ITR       T$B_ITR
     1414     7157                           H$NEWDECK_MDR      T$B_MDR
     1415     7158                           H$NEWDECK_PROG     T$B_GECALL
     1416     7159              OUTPUT:      DUP.HDR_CODE  - set to correct heading
     1417     7160                           DUP.MSG_CODE  - used to write messages
     1418     7161                           ID.ID         - set for IDENT CODE field
     1419     7162                           ID.REVISION  - set for REV field
     1420     7163                           DKEND         - $DKEND Card Structure
     1421     7164              DESCRIPTION: This procedure assigns variables needed values so
     1422     7165                           that TOU$REPLACE  will insert proper  values  for
     1423     7166                           the dummy ~strings.
     1424     7167        */
     1425     7168        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:175  
     1426     7169    1   ND_SETUP_PRINT: PROC ;

   7169  2 002160   200010 741300       ND_SETUP_PR* STX1  ! MATCHING_OBJECT+1,,AUTO

     1427     7170
     1428     7171        /* Code */
     1429     7172
     1430     7173    2      IF OBJECT.BCD.LIBRARY = 'HMPCJ1'

   7173  2 002161   040000 106400                    CMPC    fill='040'O
         2 002162   000003 600006 xsym               ADSC9   OBJECT+3                 cn=3,n=6
         2 002163   000006 000006 1                  ADSC9   6                        cn=0,n=6
         2 002164   002260 601000 2                  TNZ     s:7192

     1431     7174    2      THEN IF OBJECT.BCD.CLASS = 'I' | OBJECT.BCD.CLASS = 'F'

   7174  2 002165   400000 220003                    LDX0    -131072,DU
         2 002166   000005 236000 xsym               LDQ     OBJECT+5
         2 002167   777000 376007                    ANQ     -512,DL
         2 002170   111000 116007                    CMPQ    37376,DL
         2 002171   002173 600000 2                  TZE     s:7174+6
         2 002172   000000 220003                    LDX0    0,DU
         2 002173   400000 222003                    LDX2    -131072,DU
         2 002174   000005 236000 xsym               LDQ     OBJECT+5
         2 002175   777000 376007                    ANQ     -512,DL
         2 002176   106000 116007                    CMPQ    35840,DL
         2 002177   002201 600000 2                  TZE     s:7174+12
         2 002200   000000 222003                    LDX2    0,DU
         2 002201   000000 636012                    EAQ     0,X2
         2 002202   200022 756100                    STQ     DIGIT_VALUE+1,,AUTO
         2 002203   000000 636010                    EAQ     0,X0
         2 002204   200022 276100                    ORQ     DIGIT_VALUE+1,,AUTO
         2 002205   002237 600000 2                  TZE     s:7185

     1432     7175    3         THEN DO ;

     1433     7176    3                 IF OBJECT.BCD.CLASS = 'F'
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:176  

   7176  2 002206   000005 236000 xsym               LDQ     OBJECT+5
         2 002207   777000 376007                    ANQ     -512,DL
         2 002210   106000 116007                    CMPQ    35840,DL
         2 002211   002216 601000 2                  TNZ     s:7178

     1434     7177    3                 THEN ID.ID = SUBSTR (OBJECT_KEY.DATA, 7, 6) ;

   7177  2 002212   040000 100400                    MLR     fill='040'O
         2 002213   000002 000006 xsym               ADSC9   OBJECT_KEY+2             cn=0,n=6
         2 002214   000000 000006 xsym               ADSC9   ID                       cn=0,n=6
         2 002215   002221 710000 2                  TRA     s:7179

     1435     7178    3                 ELSE ID.ID = SUBSTR (OBJECT_KEY.DATA, 4, 6) ;

   7178  2 002216   040000 100400                    MLR     fill='040'O
         2 002217   000001 200006 xsym               ADSC9   OBJECT_KEY+1             cn=1,n=6
         2 002220   000000 000006 xsym               ADSC9   ID                       cn=0,n=6

     1436     7179    3                 DKEND.BCD_ = BCD_B(BCD#-1) ;

   7179  2 002221   000000 236000 xsym               LDQ     BCD#
         2 002222   000124 402007                    MPY     84,DL
         2 002223   000103 470400 xsym               LDP0    DUP+67
         2 002224   040000 100506                    MLR     fill='040'O
         2 002225   077753 000120                    ADSC9   -21,Q,PR0                cn=0,n=80
         2 002226   000000 000120 xsym               ADSC9   DKEND                    cn=0,n=80

     1437     7180    3                 ID.REVISION = DKEND.BCD.REVISION ;

   7180  2 002227   040000 100400                    MLR     fill='040'O
         2 002230   000020 400006 xsym               ADSC9   DKEND+16                 cn=2,n=6
         2 002231   000001 400006 xsym               ADSC9   ID+1                     cn=2,n=6

     1438     7181    3                 DUP.HDR_CODE = %H$NEWDECK_ITR ;

   7181  2 002232   001371 235007                    LDA     761,DL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:177  
         2 002233   000021 755000 xsym               STA     DUP+17

     1439     7182    3                 DUP.MSG_CODE = %T$B_ITR ;

   7182  2 002234   000031 235007                    LDA     25,DL
         2 002235   000020 755000 xsym               STA     DUP+16

     1440     7183    3              END /* THEN */ ;

   7183  2 002236   002275 710000 2                  TRA     s:7197

     1441     7184    3         ELSE DO ;

     1442     7185    3                 ID.ID = SUBSTR (OBJECT_KEY.DATA, 4, 6) ;

   7185  2 002237   040000 100400                    MLR     fill='040'O
         2 002240   000001 200006 xsym               ADSC9   OBJECT_KEY+1             cn=1,n=6
         2 002241   000000 000006 xsym               ADSC9   ID                       cn=0,n=6

     1443     7186    3                 DKEND.BCD_ = BCD_B(BCD#-1) ;

   7186  2 002242   000000 236000 xsym               LDQ     BCD#
         2 002243   000124 402007                    MPY     84,DL
         2 002244   000103 470400 xsym               LDP0    DUP+67
         2 002245   040000 100506                    MLR     fill='040'O
         2 002246   077753 000120                    ADSC9   -21,Q,PR0                cn=0,n=80
         2 002247   000000 000120 xsym               ADSC9   DKEND                    cn=0,n=80

     1444     7187    3                 ID.REVISION = DKEND.BCD.REVISION ;

   7187  2 002250   040000 100400                    MLR     fill='040'O
         2 002251   000020 400006 xsym               ADSC9   DKEND+16                 cn=2,n=6
         2 002252   000001 400006 xsym               ADSC9   ID+1                     cn=2,n=6

     1445     7188    3                 DUP.HDR_CODE = %H$NEWDECK_MDR ;

   7188  2 002253   001372 235007                    LDA     762,DL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:178  
         2 002254   000021 755000 xsym               STA     DUP+17

     1446     7189    3                 DUP.MSG_CODE = %T$B_MDR ;

   7189  2 002255   000032 235007                    LDA     26,DL
         2 002256   000020 755000 xsym               STA     DUP+16

     1447     7190    3              END /* ELSE */ ;

   7190  2 002257   002275 710000 2                  TRA     s:7197

     1448     7191    3      ELSE DO ;

     1449     7192    3              DUP.HDR_CODE = %H$NEWDECK_PROG ;

   7192  2 002260   001373 235007                    LDA     763,DL
         2 002261   000021 755000 xsym               STA     DUP+17

     1450     7193    3              DUP.MSG_CODE = %T$B_GECALL ;

   7193  2 002262   000030 236007                    LDQ     24,DL
         2 002263   000020 756000 xsym               STQ     DUP+16

     1451     7194    3              DKEND.BCD_ = BCD_B(BCD#-1) ;

   7194  2 002264   000000 236000 xsym               LDQ     BCD#
         2 002265   000124 402007                    MPY     84,DL
         2 002266   000103 470400 xsym               LDP0    DUP+67
         2 002267   040000 100506                    MLR     fill='040'O
         2 002270   077753 000120                    ADSC9   -21,Q,PR0                cn=0,n=80
         2 002271   000000 000120 xsym               ADSC9   DKEND                    cn=0,n=80

     1452     7195    3              ID.REVISION = DKEND.BCD.REVISION ;

   7195  2 002272   040000 100400                    MLR     fill='040'O
         2 002273   000020 400006 xsym               ADSC9   DKEND+16                 cn=2,n=6
         2 002274   000001 400006 xsym               ADSC9   ID+1                     cn=2,n=6
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:179  

     1453     7196    3           END /* ELSE */ ;

     1454     7197    2      RETURN ;

   7197  2 002275   000001 702211                    TSX2  ! 1,X1

     1455     7198
     1456     7199    2   END ND_SETUP_PRINT ;
     1457     7200        %EJECT ;
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:180  
     1458     7201        /*I*  NAME:        ND_PRINT_ADDED_DECK
     1459     7202              AUTHOR:      Scott S. Sheppard
     1460     7203              PURPOSE:     Prints Added Deck line
     1461     7204              INTERFACE:   TOU$DU_USER_WRITE
     1462     7205                           TOU$DU_PRINTER_WRITE
     1463     7206              INPUT:       T$B_CATALOG
     1464     7207                           T$ND_INFORM
     1465     7208              OUTPUT:      DUP.MSG_CODE - integer message number
     1466     7209              DESCRIPTION: This procedure notifies the user and logs to the
     1467     7210                           edit listing that the deck has been added.
     1468     7211        */
     1469     7212
     1470     7213    1   ND_PRINT_ADDED_DECK: PROC ;

   7213  2 002276   200010 741300       ND_PRINT_AD* STX1  ! MATCHING_OBJECT+1,,AUTO

     1471     7214
     1472     7215        /* Code */
     1473     7216
     1474     7217    2      DUP.MSG_CODE = %T$B_CATALOG ;

   7217  2 002277   000027 235007                    LDA     23,DL
         2 002300   000020 755000 xsym               STA     DUP+16

     1475     7218    2      CALL TOU$DU_PRINTER_WRITE ;

   7218  2 002301   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002302   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 002303   000000 011000                    NOP     0

     1476     7219    2      DUP.MSG_CODE = %T$ND_INFORM ;

   7219  2 002304   000146 235007                    LDA     102,DL
         2 002305   000020 755000 xsym               STA     DUP+16

     1477     7220    2      CALL TOU$DU_USER_WRITE ;

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:181  
   7220  2 002306   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002307   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 002310   000000 011000                    NOP     0

     1478     7221    2      CALL TOU$DU_PRINTER_WRITE ;

   7221  2 002311   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002312   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 002313   000000 011000                    NOP     0

     1479     7222    2      RETURN ;

   7222  2 002314   200010 221300                    LDX1  ! MATCHING_OBJECT+1,,AUTO
         2 002315   000001 702211                    TSX2  ! 1,X1

OBJECT_SEARCH_KEY
 Sect OctLoc
   0     000   040040 040040   040040 040040   040040 040040   040040 040040
   0     004   040040 040040   040040 040***                                           .

CATALOGS_V
 Sect OctLoc
   0     006   000000 000000   000000 006014                                    ........

(unnamed)
 Sect OctLoc
   1     000   115141 163164   145162 040105   156164 162171   040156 165155    Master Entry num
   1     004   142145 162072   040040 040040   110115 120103   112061 040040    ber:    HMPCJ1

(unnamed)
 Sect OctLoc
   3     000   777377 777777   000016 006000   000004 006000   063040 040040    ............3
   3     004   067040 040040   070040 040040   071040 040040   065040 040040    7   8   9   5
   3     010   066040 040040   064040 040040   061040 040040   062040 040040    6   4   1   2
   3     014   060040 040040   000000 001747   000000 006000   000000 000027    0   ............
   3     020   000017 006000   000027 006000   000002 006000                    ............
     1480     7223
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:182  
     1481     7224    2   END ND_PRINT_ADDED_DECK ;
     1482     7225    1   END TOU$NEWDECK ;

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:183  
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOU_RQSTS_E.:E05TOU  is referenced.
   TOU_DEER_M.:E05TOU  is referenced.
      No diagnostics issued in procedure TOU$NEWDECK.
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:184  

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    62-  7225    410    85     2      0  y y y    0   1 TOU$NEWDECK
                                  2     44    y y    0     TOU$ND_FIND_CATALOG
                                  2     51    y y    0     TOU$ND_SAVE_CATALOG_CONTROL
                                  2     56    y y    0     TOU$ND_SAVE_OBJECT_DECK
                                  2     63    y y    0     TOU$ND_SAVE_LAST_DECK#
  1  5946-  5961     11     0     2     71  y   y    0     2 ND_INIT_DUP
  2  5986-  6107     26     9     2    114  y y y    0     2 ND_COMMAND_SETUP
  3  6145-  6541    121    10     2    245  y y y    0     2 ND_FIND_CATALOG
  4  6188-  6202      8     0     2    266  y y y    0      3 ND_GET_CATALOG_TABLE_BUFFER
  5  6222-  6237     11     0     2    310  y y y    0      3 ND_FETCH_CATALOG_TABLE
  6  6251-  6268     10     1     2    401  y   y    0      3 ND_SEARCH_CATALOG_TABLE
  7  6296-  6517     78     1     2    460  y y y    0      3 ND_SELECT_CATALOG
  8  6349-  6370     13     1     2    556  y   y    0       4 ND_SHOW_CATALOG_CHOICES
  9  6395-  6516     45     3     2    635  y   y    1       4 ND_GET_CATALOG_CHOICE
 10  6443-  6480     21     9     2    677  y   y    3        5 ND_CONVERT_CHOICE
 11  6495-  6515     12     5     2   1117  y   y    2        5 ND_VALIDATE_CHOICE
 12  6531-  6540      5     0     2   1171  y   y    0      3 ND_FREE_CATALOG_TABLE_BUFFER
 13  6563-  6597     18     2     2   1204  y y y    0     2 ND_CHECK_FOR_DECK
 14  6622-  6648     19     0     2   1264  y y y    0     2 ND_ADD_DECK
 15  6669-  6840     56     1     2   1340  y y y    0     2 ND_PROCESS_IFAD
 16  6719-  6730      5     2     2   1416  y   y    1      3 ND_CHECK_MATCH
 17  6745-  6757      6     0     2   1436  y y y    0      3 ND_STORE_LAST_DECK#
 18  6780-  6805     13     0     2   1454  y y y    0      3 ND_STORE_OBJECT_DECK
 19  6823-  6839      9     0     2   1527  y y y    0      3 ND_STORE_CATALOG_CHANGES
 20  6863-  6887     18     0     2   1562  y y y    0     2 ND_PROCESS_TEMP
 21  6901-  6912      5     0     2   1630  y y y    0     2 ND_SAVE_CATALOG_CONTROL
 22  6925-  6938      7     0     2   1643  y y y    0     2 ND_SAVE_CATALOG_ENTRY
 23  6957-  7092     52     0     2   1664  y y y    0     2 ND_SAVE_OBJECT_DECK
 24  6998-  7025     18     0     2   1701  y y y    0      3 ND_SAVE_NEW_DECK
 25  7055-  7091     24     1     2   1775  y y y    0      3 ND_REPLACE_OLD_DECK
 26  7105-  7116      5     0     2   2114  y y y    0     2 ND_SAVE_LAST_DECK#
 27  7131-  7147     10     0     2   2127  y y y    0     2 ND_SAVE_LOG
 28  7169-  7199     26     0     2   2160  y   y    0     2 ND_SETUP_PRINT
 29  7213-  7224      7     0     2   2276  y   y    0     2 ND_PRINT_ADDED_DECK
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:185  

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              62   2      0 Proc    0                              5838   2      2 Call    0
            5839   2      4 Call    0                              5840   2      6 Call    0
            5841   2     11 Call    0                              5842   2     14 Call    0
            5843   2     16 Call    0                              5844   2     20 Call    0
            5845   2     22 Call    0                              5848   2     25 Assign  0
            5849   2     27 Call    0                              5850   2     32 Return  0
            5853   2     33 Call    0 ERROR_RETURN                 5854   2     36 Assign  0
            5855   2     40 Call    0                              5856   2     43 Return  0
            5873   2     44 Entry   0                              5875   2     46 Call    0
            5876   2     50 Return  0                              5888   2     51 Entry   0
            5890   2     53 Call    0                              5891   2     55 Return  0
            5903   2     56 Entry   0                              5905   2     60 Call    0
            5906   2     62 Return  0                              5918   2     63 Entry   0
            5920   2     65 Call    0                              5921   2     67 Return  0
            5933   2     70 Altret  0 TOU$ND_ALTRETURN             5946   2     71 Proc    1
            5950   2     72 Assign  1                              5951   2     74 Assign  1
            5952   2     76 Assign  1                              5953   2    100 Assign  1
            5954   2    102 Assign  1                              5955   2    104 Assign  1
            5956   2    106 Assign  1                              5957   2    110 Assign  1
            5958   2    112 Assign  1                              5959   2    113 Return  1
            5986   2    114 Proc    2                              6076   2    115 DoIndx  2
         $  6077   2    117 Assign  2                      $$$$$$  6078   2    123 DoCase  2
            6079   2    142 Case    2                              6080   2    142 Assign  2
         $  6081   2    144 Assign  2                              6082   2    152 Assign  2
            6083   2    155 Call    2                              6084   2    161 Case    2
         $  6085   2    161 Assign  2                              6086   2    170 Case    2
         $  6087   2    170 Assign  2                              6088   2    177 Case    2
            6089   2    177 Assign  2                           $  6090   2    201 Assign  2
            6091   2    207 Assign  2                              6092   2    212 Call    2
            6093   2    215 EndCse  2                          $$  6094   2    215 EndInd  2
            6096   2    226 If      2                              6098   2    231 Call    2
            6099   2    234 If      2                              6101   2    236 Call    2
            6102   2    241 Return  2                              6105   2    243 Altret  2 ERROR
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:186  
            6145   2    245 Proc    3                              6161   2    246 Call    3
            6162   2    250 Call    3                              6163   2    252 Call    3
            6164   2    254 Call    3                              6165   2    256 Call    3
            6166   2    260 Return  3                              6169   2    262 Call    3 ERROR
            6170   2    264 Altret  3                              6188   2    266 Proc    4
            6192   2    267 Assign  4                              6193   2    271 Assign  4
            6194   2    273 Call    4                              6195   2    276 Assign  4
         $  6196   2    300 Assign  4                              6197   2    304 Return  4
            6200   2    306 Altret  4 ERROR                        6222   2    310 Proc    5
            6224   2    311 Call    5                              6225   2    314 Assign  5
         $  6226   2    317 DoIndx  5                              6227   2    323 Call    5
      $$$$  6228   2    326 Assign  5                         $$$  6229   2    337 Assign  5
    $$$$$$  6230   2    347 EndInd  5                           $  6231   2    371 Assign  5
            6232   2    375 Return  5                              6235   2    377 Altret  5 ERROR
            6251   2    401 Proc    6                          $$  6257   2    402 Assign  6
            6258   2    406 DoIndx  6                        $$$$  6259   2    411 If      6
            6260   2    421 Do      6                        $$$$  6261   2    421 Assign  6
       $$$  6262   2    432 Assign  6                              6263   2    442 EndDo   6
      $$$$  6265   2    442 EndInd  6                              6266   2    456 Return  6
            6296   2    460 Proc    7                         $$$  6302   2    461 DoCase  7
            6303   2    473 Case    7                              6304   2    473 Assign  7
            6305   2    475 Assign  7                              6306   2    500 Call    7
            6307   2    503 Altret  7                              6308   2    505 Case    7
            6309   2    505 Assign  7                        $$$$  6310   2    510 Assign  7
      $$$$  6311   2    520 Assign  7                              6312   2    530 Return  7
            6313   2    531 Case    7                              6314   2    531 Call    7
            6315   2    533 Call    7                              6316   2    537 Assign  7
      $$$$  6317   2    542 Assign  7                              6318   2    551 Assign  7
            6319   2    554 Return  7                              6320   2    556 EndCse  7
            6349   2    556 Proc    8                              6355   2    557 Assign  8
       $$$  6356   2    561 Assign  8                              6357   2    570 Assign  8
            6358   2    573 Call    8                              6360   2    576 Assign  8
            6361   2    600 DoIndx  8                          $$  6362   2    603 Assign  8
            6363   2    611 Call    8                        $$$$  6364   2    614 EndInd  8
            6366   2    626 Assign  8                              6367   2    630 Call    8
            6368   2    633 Return  8                              6395   2    635 Proc    9
            6402   2    636 Assign  9                              6403   2    641 Assign  9
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:187  
            6404   2    643 Call    9                              6406   2    646 DoUntl  9
            6407   2    646 Assign  9                              6408   2    650 Call    9
         $  6409   2    653 Call    9                           $  6410   2    662 Call    9
            6411   2    670 EndUnt  9                              6413   2    672 Call    9
            6414   2    675 Return  9                              6443   2    677 Proc   10
            6455   2    700 DoWhil 10                           $  6456   2    701 Assign 10
    $$$$$$  6457   2    705 EndWhi 10                              6460   2    727 Assign 10
            6461   2    731 DoWhil 10                              6462   2    732 Assign 10
  $$$$$$$$  6463   2    735 EndWhi 10                          $$  6466   2    762 Assign 10
            6467   2    766 DoWhil 10                  $$$$$$$$$$  6468   2    772 Do Sel 10
            6469   2   1057 Select 10                      $$$$$$  6470   2   1057 IntCal 10
   $$$$$$$  6471   2   1062 Assign 10                              6472   2   1076 Select 10
        $$  6473   2   1076 Assign 10                              6474   2   1102 Assign 10
            6475   2   1105 EndSel 10                              6476   2   1105 Assign 10
         $  6477   2   1110 EndWhi 10                              6478   2   1115 Return 10
            6495   2   1117 Proc   11                              6501   2   1120 Assign 11
            6502   2   1122 DoIndx 11                     $$$$$$$  6503   2   1125 If     11
            6504   2   1142 Assign 11                        $$$$  6506   2   1145 EndInd 11
            6507   2   1157 If     11                              6509   2   1162 Do     11
            6510   2   1162 Assign 11                              6511   2   1164 Call   11
            6512   2   1167 EndDo  11                              6513   2   1167 Return 11
            6531   2   1171 Proc   12                              6535   2   1172 Assign 12
            6536   2   1174 Call   12                              6537   2   1177 Assign 12
            6538   2   1202 Return 12                              6563   2   1204 Proc   13
            6570   2   1205 Assign 13                              6571   2   1210 Call   13
            6574   2   1213 Assign 13                              6575   2   1216 Call   13
            6577   2   1221 Assign 13                              6578   2   1222 Assign 13
            6579   2   1224 DoUntl 13                          $$  6580   2   1224 If     13
            6581   2   1236 Assign 13                              6582   2   1241 Assign 13
            6583   2   1243 EndUnt 13                              6585   2   1251 If     13
            6586   2   1253 Do     13                              6587   2   1253 Assign 13
            6588   2   1255 Call   13                              6590   2   1260 Altret 13 ERROR
            6595   2   1262 Return 13 NOT_IN_DECKFILE              6622   2   1264 Proc   14
            6626   2   1265 Assign 14                              6627   2   1266 Call   14
            6628   2   1271 Call   14                              6629   2   1274 Call   14
            6630   2   1277 Call   14                              6631   2   1301 Call   14
            6632   2   1304 Assign 14                              6633   2   1305 Call   14
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:188  
            6635   2   1310 Assign 14                              6636   2   1312 Call   14
            6637   2   1315 Call   14                              6638   2   1317 Assign 14
            6639   2   1321 Call   14                              6640   2   1324 Return 14
            6643   2   1326 Assign 14 ERROR                        6644   2   1330 Call   14
            6645   2   1333 Call   14                              6646   2   1336 Altret 14
            6669   2   1340 Proc   15                              6675   2   1341 Assign 15
            6676   2   1342 DoUntl 15                              6677   2   1342 Call   15
            6678   2   1345 If     15                              6679   2   1350 Do     15
            6680   2   1350 Call   15                              6681   2   1353 Call   15
            6682   2   1356 Call   15                              6683   2   1361 Call   15
            6684   2   1365 EndDo  15                              6686   2   1365 EndUnt 15
            6688   2   1372 If     15                              6689   2   1374 Do     15
            6690   2   1374 Call   15                              6691   2   1376 Call   15
            6692   2   1400 Call   15                              6693   2   1402 Return 15
            6695   2   1404 Do     15                              6696   2   1404 Assign 15
            6697   2   1406 Assign 15                              6698   2   1411 Call   15
            6700   2   1414 Altret 15 ERROR                        6719   2   1416 Proc   16
            6725   2   1417 If     16                         $$$  6726   2   1423 Assign 16
       $$$  6727   2   1430 Assign 16                              6728   2   1434 Return 16
            6745   2   1436 Proc   17                              6749   2   1437 Call   17
            6750   2   1442 Assign 17                              6751   2   1445 Call   17
            6752   2   1450 Return 17                              6755   2   1452 Altret 17 ERROR
            6780   2   1454 Proc   18                              6784   2   1455 Assign 18
            6785   2   1460 Assign 18                              6786   2   1462 Assign 18
            6787   2   1464 Assign 18                         $$$  6788   2   1470 Call   18
            6793   2   1504 Call   18                              6795   2   1507 Assign 18
            6796   2   1512 Call   18                              6798   2   1515 Assign 18
            6799   2   1520 Call   18                              6800   2   1523 Return 18
            6803   2   1525 Altret 18 ERROR                        6823   2   1527 Proc   19
            6827   2   1530 Call   19                              6828   2   1533 Assign 19
        $$  6829   2   1536 Assign 19                              6830   2   1545 Call   19
            6832   2   1550 Assign 19                              6833   2   1553 Call   19
            6834   2   1556 Return 19                              6837   2   1560 Altret 19 ERROR
            6863   2   1562 Proc   20                              6867   2   1563 Assign 20
            6868   2   1565 Call   20                              6869   2   1567 Call   20
            6870   2   1571 Call   20                              6871   2   1573 Call   20
            6872   2   1575 Call   20                              6873   2   1577 Call   20
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:189  
            6874   2   1601 Call   20                              6875   2   1604 Call   20
            6876   2   1606 Assign 20                              6877   2   1610 Return 20
            6880   2   1612 Assign 20 ERROR                        6881   2   1614 Assign 20
            6882   2   1616 Assign 20                              6883   2   1620 Call   20
            6884   2   1623 Call   20                              6885   2   1626 Altret 20
            6901   2   1630 Proc   21                              6905   2   1631 Call   21
            6906   2   1634 Call   21                              6907   2   1637 Return 21
            6910   2   1641 Altret 21 ERROR                        6925   2   1643 Proc   22
            6929   2   1644 Assign 22                              6930   2   1647 Assign 22
            6931   2   1652 Call   22                              6932   2   1655 Call   22
            6933   2   1660 Return 22                              6936   2   1662 Altret 22 ERROR
            6957   2   1664 Proc   23                              6961   2   1665 Call   23
            6962   2   1670 Do     23                              6963   2   1670 Call   23
            6964   2   1672 EndDo  23                              6966   2   1673 Do     23
            6967   2   1673 Call   23                              6968   2   1675 EndDo  23
            6969   2   1675 Return 23                              6972   2   1677 Altret 23 ERROR
            6998   2   1701 Proc   24                              7002   2   1702 Call   24
            7003   2   1705 Call   24                              7005   2   1710 Assign 24
            7006   2   1713 Assign 24                              7007   2   1716 Call   24
            7008   2   1721 Call   24                              7010   2   1724 Assign 24
         $  7011   2   1727 Assign 24                              7012   2   1737 Call   24
            7013   2   1742 Call   24                              7015   2   1745 Assign 24
            7016   2   1750 Assign 24                           $  7017   2   1752 Assign 24
         $  7018   2   1760 Assign 24                              7019   2   1766 Call   24
            7020   2   1771 Return 24                              7023   2   1773 Altret 24 ERROR
            7055   2   1775 Proc   25                              7061   2   1776 Assign 25
            7062   2   2001 Assign 25                              7063   2   2004 Assign 25
            7064   2   2007 Call   25                              7065   2   2012 Call   25
            7067   2   2015 Call   25                              7068   2   2020 Call   25
            7070   2   2023 Assign 25                              7071   2   2026 Assign 25
            7072   2   2031 Call   25                              7073   2   2034 Call   25
            7075   2   2037 Assign 25                           $  7076   2   2042 Assign 25
            7077   2   2052 Call   25                              7078   2   2055 Call   25
            7080   2   2060 Assign 25                              7081   2   2063 Assign 25
         $  7082   2   2065 Assign 25                           $  7083   2   2074 Assign 25
            7084   2   2102 Assign 25                              7085   2   2105 Call   25
            7086   2   2110 Return 25                              7089   2   2112 Altret 25 ERROR
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:190  
            7105   2   2114 Proc   26                              7109   2   2115 Call   26
            7110   2   2120 Call   26                              7111   2   2123 Return 26
            7114   2   2125 Altret 26 ERROR                        7131   2   2127 Proc   27
            7135   2   2130 Call   27                              7136   2   2133 Assign 27
            7137   2   2135 Assign 27                              7138   2   2140 Assign 27
            7139   2   2143 Assign 27                              7140   2   2146 Call   27
            7141   2   2151 Call   27                              7142   2   2154 Return 27
            7145   2   2156 Altret 27 ERROR                        7169   2   2160 Proc   28
            7173   2   2161 If     28                        $$$$  7174   2   2165 If     28
            7175   2   2206 Do     28                              7176   2   2206 If     28
            7177   2   2212 Assign 28                              7178   2   2216 Assign 28
       $$$  7179   2   2221 Assign 28                              7180   2   2227 Assign 28
            7181   2   2232 Assign 28                              7182   2   2234 Assign 28
            7183   2   2236 EndDo  28                              7184   2   2237 Do     28
            7185   2   2237 Assign 28                         $$$  7186   2   2242 Assign 28
            7187   2   2250 Assign 28                              7188   2   2253 Assign 28
            7189   2   2255 Assign 28                              7190   2   2257 EndDo  28
            7191   2   2260 Do     28                              7192   2   2260 Assign 28
            7193   2   2262 Assign 28                         $$$  7194   2   2264 Assign 28
            7195   2   2272 Assign 28                              7196   2   2275 EndDo  28
            7197   2   2275 Return 28                              7213   2   2276 Proc   29
            7217   2   2277 Assign 29                              7218   2   2301 Call   29
            7219   2   2304 Assign 29                              7220   2   2306 Call   29
            7221   2   2311 Call   29                              7222   2   2314 Return 29


  **** Statement type totals  ****

   136 Assign   114 Call      13 If         7 Case      36 Return    20 Altret
     1 IntCal     1 Do Sel     1 EndSel     2 Select     3 DoUntl     5 DoIndx
     3 DoWhil     2 DoCase    11 Do         3 EndUnt     5 EndInd     3 EndWhi
     2 EndCse     8 EndDo     30 Proc       4 Entry     21 Labels

 # major stmts=  337 Code/major= 3.64 # stmts=  410 Code/stmt= 3.00  Point total=105.9
 Cost/major stmt=  3.3 Cost/stmt=  2.7 Total cost=   1112.9

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:191  
   4-6  $$$$
   6-8  $
  8-10  $$
 10-12  $$
 12-14
 14-16  $
 16-18
 18-20
 20-22
 22-??
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:192  

 **** Variables and constants ****

  ****  Section 000  Data  TOU$NEWDECK

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/d STRC(72)    r     1 CATALOGS_V
     7-0-0/b PTR         r         2 PTR$

     0-0-0/c STRC(207)   r     1 OBJECT_SEARCH_KEY
     0-0-0/c CHAR(23)    r         2 DATA


  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    15-0-0/w PTR         r     1 @CHOICE                   11-0-0/w PTR         r     1 @INX
    15-0-0/w PTR         r     1 @INX                      16-0-0/w PTR         r     1 @LGTH
    11-0-0/w PTR         r     1 @MATCH_FOUND              16-0-0/w PTR         r     1 @VALID_CHOICE
    17-0-0/w PTR         r     1 @VALUE                    *0-0-0/c CHAR(3)     r     1 CHOICE
    *0-0-0/c CHAR        r     1 CHOICE_(0:2)
    21-0-0/w UBIN        r     1 DIGIT_VALUE                7-0-0/h UBIN(18)    r     1 I
    11-0-0/w UBIN        r     1 I                         20-0-0/h UBIN(18)    r     1 I
    17-0-0/w UBIN        r     1 I                          5-0-0/h UBIN(18)    r     1 I
     7-0-0/h UBIN(18)    r     1 INX                       *0-0-0/h UBIN(18)    r     1 INX
    *0-0-0/h UBIN(18)    r     1 INX                       *0-0-0/w UBIN        r     1 LGTH
     7-0-0/c BIT         r     1 MATCHING_OBJECT           *0-0-0/c BIT         r     1 MATCH_FOUND
    13-0-0/w UBIN        r     1 OLD_COUNT                  5-0-0/w UBIN        r     1 OUTBLK#
     6-0-0/w PTR         r     1 OUTBLK$                    6-0-0/c BIT         r     1 REFERENCE_FOUND
    12-0-0/w BIT         r     1 VALID_CHOICE              *0-0-0/w BIT         r     1 VALID_CHOICE
    *0-0-0/h UBIN(18)    r     1 VALUE

  ****  SYMREF variables  ****

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:193  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 BCD#                       0-0-0/w UBIN        r     1 BIN#
     0-0-0/w UBIN        r     1 CUR#                       0-0-0/w UBIN        r     1 FILE_EOF

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(45)    r     1 BCD_KEY
     0-1-0/b UBIN(18)    r         2 DECK#

     0-0-0/c STRC(45)    r     1 BINARY_KEY
     0-1-0/b UBIN(18)    r         2 DECK#

     0-0-0/w STRC(72)    r     1 CATALOG_DATA
     0-0-0/b UBIN(18)    r         2 DECK#
     0-2-0/b UBIN(18)    r         2 ENTRY_COUNT

     0-0-0/c STRC(45)    r     1 CATALOG_ENTRY_KEY
     0-1-0/b UBIN(18)    r         2 DECK#
     0-3-0/b UBIN(18)    r         2 ENTRY#

     0-0-0/w STRC(216)   r     1 CATALOG_KEY
     0-1-0/c CHAR(21)    r         2 DATA
     5-2-0/b UBIN(18)    r         2 DECK#

     0-0-0/c STRC(189)   r     1 CATALOG_SEARCH_KEY
     0-0-0/c CHAR(21)    r         2 DATA

     0-0-0/w STRC(756)   r     1 DKEND
     0-0-0/c STRC(720)   r         2 BCD
    20-2-0/c CHAR(6)     r          3 REVISION
     0-0-0/c CHAR(80)    r         2 BCD_

     0-0-0/d STRC(5220)  r     1 DUP
     1-0-0/h UBIN(18)    r         2 NUM_WORDS
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:194  
     2-0-0/d BIT (72)    r         2 DS_V
     4-0-0/c CHAR(40)    r         2 RESPONSE
    16-0-0/w UBIN        r         2 RESPONSE_LGTH
    17-0-0/w PTR         r         2 CMD$
    20-0-0/w UBIN        r         2 MSG_CODE
    21-0-0/w UBIN        r         2 HDR_CODE
    26-0-0/c CHAR        r         2 LINE_VFC
    56-0-0/c BIT         r         2 FORCE_NEW_PAGE
    57-0-0/w STRC(576)   r         2 IFAD
    57-0-0/c BIT         r          3 ME_ALLOWED
    57-1-0/c BIT         r          3 ENTERED
    63-1-0/c CHAR(40)    r          3 FID
   102-0-0/d STRC(72)    r         2 BCD_V
   103-0-0/b PTR         r          3 PTR$
   104-0-0/w STRC(504)   r         2 DF
   104-0-0/c BIT         r          3 ENTERED
   104-2-0/c BIT         r          3 REPORT_ERROR
   105-0-0/w UBIN        r          3 OPEN_TYPE
   106-0-0/w UBIN        r          3 CLOSE_TYPE
   122-0-0/w STRC(432)   r         2 LOG
   122-0-0/w UBIN        r          3 TYPE
   123-0-0/c CHAR(21)    r          3 CATALOG
   130-1-0/c CHAR(23)    r          3 DECK
   140-0-0/w STRC(72)    r         2 TEMP
   140-0-0/w UBIN        r          3 OPEN_TYPE
   141-0-0/w UBIN        r          3 CLOSE_TYPE
   142-0-0/c CHAR(40)    r         2 HOLD_AREA
   154-0-0/w UBIN        r         2 HOLD_AREA_LGTH
   155-1-0/c BIT         r         2 BREAK_DISABLED

     0-0-0/c STRC(162)   r     1 ID
     0-0-0/c CHAR(6)     r         2 ID
     1-2-0/c CHAR(6)     r         2 REVISION

     0-0-0/c STRC(54)    r     1 LAST
     0-0-0/c UBIN(18)    r         2 DECK#

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:195  
     0-0-0/w STRC(72)    r     1 MASTER_DATA
     0-0-0/b UBIN(18)    r         2 DECK#
     0-2-0/b UBIN(18)    r         2 ENTRY_COUNT

     0-0-0/c STRC(45)    r     1 MASTER_ENTRY_KEY
     0-1-0/b UBIN(18)    r         2 DECK#
     0-3-0/b UBIN(18)    r         2 ENTRY#

     0-0-0/w STRC(864)   r     1 OBJECT
     0-0-0/w STRC(720)   r         2 BCD
     3-3-0/c CHAR(6)     r          3 LIBRARY
     5-2-0/c CHAR        r          3 CLASS
    24-0-0/b UBIN(18)    r         2 DECK#
    24-2-0/b UBIN(18)    r         2 BINARY_COUNT
    25-0-0/b UBIN(18)    r         2 TOTAL_COUNT
    27-0-0/w UBIN        r         2 CHECKSUM

     0-0-0/w STRC(216)   r     1 OBJECT_KEY
     0-1-0/c CHAR(23)    r         2 DATA

     0-0-0/w STRC(576)   r     1 OBJECT_REFLIST_DATA
     0-0-0/b UBIN        r         2 NUM_REFS
     1-0-0/b STRC        r         2 REFS(0:14)
     1-0-0/b UBIN(18)    r          3 ME#
     1-2-0/b UBIN(18)    r          3 CE#

     0-0-0/c STRC(45)    r     1 OBJECT_REFLIST_KEY
     0-1-0/b UBIN(18)    r         2 DECK#


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(84)    r     1 BCD_B(0:199)

PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:196  
  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/h STRC(5886)  r     1 CATALOGS
     0-0-0/h UBIN(18)    r         2 COUNT
     0-2-0/c STRC(207)   r         2 E(0:25)
     0-2-0/c CHAR(21)    r          3 DATA
     5-3-0/c UBIN(18)    r          3 DECK#
   226-0-0/h STRC(486)   r         2 MATCHED
   226-0-0/h UBIN(18)    r          3 COUNT
   226-2-0/h UBIN(18)    r          3 CATX(0:25)

     0-0-0/w STRC(144)   r     1 OUT$BLK
     0-2-0/h UBIN(18)    r         2 CODE
     1-0-0/h UBIN(18)    r         2 NSUBLKS
     3-0-0/b PTR         r         2 SUBLK$(0:0)

     0-0-0/w ASTR(153)   r     1 OUT$SYM
     4-0-0/c UBIN(9)     r         2 COUNT
     4-1-0/c ACHR        r         2 TEXT



   Procedure TOU$NEWDECK requires 1230 words for executable code.
   Procedure TOU$NEWDECK requires 24 words of local(AUTO) storage.

    No errors detected in file TOU$NEWDECK.:E05TSI    .
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:197  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:198  
          MINI XREF LISTING

BCD#
      5759**DCL      6787>>ASSIGN   7011<<ASSIGN   7076<<ASSIGN   7179>>ASSIGN   7186>>ASSIGN   7194>>ASSIGN
BCD_B
      5398**DCL      7179>>ASSIGN   7186>>ASSIGN   7194>>ASSIGN
BCD_CARD
      5410**DCL      5419--REDEF
BCD_CARD.BCD
      5411**DCL      5417--REDEF
BCD_KEY.DECK#
      5432**DCL      6798<<ASSIGN   7010<<ASSIGN   7075<<ASSIGN
BIN#
      5760**DCL      6786>>ASSIGN   6787>>ASSIGN   7006<<ASSIGN   7071<<ASSIGN
BINARY_CARD
      5444**DCL      5459--REDEF
BINARY_CARD.DATA
      5453**DCL      5454--REDEF
BINARY_CARD.LBL_SEQ
      5455**DCL      5456--REDEF
BINARY_CARD.WD1
      5445**DCL      5450--REDEF
BINARY_KEY.DECK#
      5473**DCL      6795<<ASSIGN   7005<<ASSIGN   7061<<ASSIGN   7070<<ASSIGN
CATALOGS IN PROCEDURE ND_FIND_CATALOG
      6150**DCL      6196<<ASSIGN
CATALOGS.COUNT IN PROCEDURE ND_FIND_CATALOG
      6151**DCL      6231<<ASSIGN   6258>>DOINDEX
CATALOGS.E.DATA IN PROCEDURE ND_FIND_CATALOG
      6153**DCL      6228<<ASSIGN   6259>>IF       6310>>ASSIGN   6317>>ASSIGN
CATALOGS.E.DECK# IN PROCEDURE ND_FIND_CATALOG
      6154**DCL      6229<<ASSIGN   6311>>ASSIGN   6318>>ASSIGN
CATALOGS.MATCHED.CATX IN PROCEDURE ND_FIND_CATALOG
      6157**DCL      6262<<ASSIGN   6309>>ASSIGN   6310>>ASSIGN   6311>>ASSIGN   6362>>ASSIGN   6503>>IF
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:199  
CATALOGS.MATCHED.COUNT IN PROCEDURE ND_FIND_CATALOG
      6156**DCL      6257<<ASSIGN   6261<<ASSIGN   6261>>ASSIGN   6262>>ASSIGN   6302>>DOCASE   6356>>ASSIGN
      6361>>DOINDEX  6502>>DOINDEX
CATALOGS_V IN PROCEDURE ND_FIND_CATALOG
      6147**DCL      6193>>ASSIGN   6195<<ASSIGN   6535>>ASSIGN   6537<<ASSIGN
CATALOGS_V.PTR$ IN PROCEDURE ND_FIND_CATALOG
      6149**DCL      6150--IMP-PTR  6196>>ASSIGN   6228>>ASSIGN   6229>>ASSIGN   6231>>ASSIGN   6257>>ASSIGN
      6258>>DOINDEX  6259>>IF       6261>>ASSIGN   6261>>ASSIGN   6262>>ASSIGN   6262>>ASSIGN   6302>>DOCASE
      6309>>ASSIGN   6310>>ASSIGN   6310>>ASSIGN   6311>>ASSIGN   6311>>ASSIGN   6317>>ASSIGN   6318>>ASSIGN
      6356>>ASSIGN   6361>>DOINDEX  6362>>ASSIGN   6502>>DOINDEX  6503>>IF
CATALOG_DATA.DECK#
      5486**DCL      6828>>ASSIGN   6929>>ASSIGN
CATALOG_DATA.ENTRY_COUNT
      5487**DCL      6829>>ASSIGN   6832<<ASSIGN   6832>>ASSIGN   6930>>ASSIGN
CATALOG_ENTRY_KEY.DECK#
      5501**DCL      6828<<ASSIGN   6929<<ASSIGN
CATALOG_ENTRY_KEY.ENTRY#
      5502**DCL      6829<<ASSIGN   6930<<ASSIGN   7018>>ASSIGN   7083>>ASSIGN
CATALOG_KEY.DATA
      5515**DCL      6228>>ASSIGN   6305<<ASSIGN   6310<<ASSIGN   6317<<ASSIGN   6357<<ASSIGN   7137>>ASSIGN
CATALOG_KEY.DECK#
      5516**DCL      6229>>ASSIGN   6311<<ASSIGN   6318<<ASSIGN
CATALOG_SEARCH_KEY.DATA
      5528**DCL      6085<<ASSIGN   6259>>IF       6305>>ASSIGN   6357>>ASSIGN
CHOICE IN PROCEDURE ND_CONVERT_CHOICE
      6445**DCL      6443--PROC     6446--REDEF
CHOICE_ IN PROCEDURE ND_CONVERT_CHOICE
      6446**DCL      6455>>DOWHILE  6461>>DOWHILE  6468>>DOSELCT  6470>>CALLBLT
CUR#
      5761**DCL      6356<<ASSIGN
DIGIT_VALUE IN PROCEDURE ND_CONVERT_CHOICE
      6450**DCL      6470<<CALLBLT  6471>>ASSIGN
DKEND
      5539**DCL      5552--REDEF
DKEND.BCD
      5540**DCL      5550--REDEF
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:200  
DKEND.BCD.REVISION
      5547**DCL      7180>>ASSIGN   7187>>ASSIGN   7195>>ASSIGN
DKEND.BCD_
      5550**DCL      7179<<ASSIGN   7186<<ASSIGN   7194<<ASSIGN
DUP.BCD_V.PTR$
      5329**DCL      5398--IMP-PTR  7179>>ASSIGN   7186>>ASSIGN   7194>>ASSIGN
DUP.BREAK_DISABLED
      5375**DCL      6867<<ASSIGN   6876<<ASSIGN   6880<<ASSIGN
DUP.CMD$
      5273**DCL      6076>>DOINDEX  6077>>ASSIGN
DUP.DF.CLOSE_TYPE
      5341**DCL      5958<<ASSIGN   6882<<ASSIGN
DUP.DF.ENTERED
      5333**DCL      5955<<ASSIGN   6089<<ASSIGN   6099>>IF
DUP.DF.OPEN_TYPE
      5339**DCL      5956<<ASSIGN
DUP.DF.REPORT_ERROR
      5337**DCL      5957<<ASSIGN
DUP.DS_V
      5266**DCL      6193<<ASSIGN   6195>>ASSIGN   6535<<ASSIGN
DUP.FORCE_NEW_PAGE
      5297**DCL      5952<<ASSIGN
DUP.HDR_CODE
      5278**DCL      5950<<ASSIGN   7181<<ASSIGN   7188<<ASSIGN   7192<<ASSIGN
DUP.HOLD_AREA
      5368**DCL      6081<<ASSIGN   6090<<ASSIGN   6402<<ASSIGN   7139<<ASSIGN
DUP.HOLD_AREA_LGTH
      5370**DCL      6082<<ASSIGN   6091<<ASSIGN   6403<<ASSIGN
DUP.IFAD.ENTERED
      5303**DCL      5954<<ASSIGN   6080<<ASSIGN   6096>>IF
DUP.IFAD.FID
      5317**DCL      7139>>ASSIGN
DUP.IFAD.ME_ALLOWED
      5301**DCL      5953<<ASSIGN
DUP.LINE_VFC
      5287**DCL      5951<<ASSIGN
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:201  
DUP.LOG.CATALOG
      5351**DCL      7137<<ASSIGN
DUP.LOG.DECK
      5353**DCL      7138<<ASSIGN
DUP.LOG.TYPE
      5349**DCL      7136<<ASSIGN
DUP.LOG_V
      5355**DCL      5360--REDEF
DUP.MSG_CODE
      5276**DCL      5848<<ASSIGN   5854<<ASSIGN   6304<<ASSIGN   6355<<ASSIGN   6360<<ASSIGN   6366<<ASSIGN
      6510<<ASSIGN   6587<<ASSIGN   6696<<ASSIGN   6881<<ASSIGN   7182<<ASSIGN   7189<<ASSIGN   7193<<ASSIGN
      7217<<ASSIGN   7219<<ASSIGN
DUP.NUM_WORDS
      5264**DCL      6192<<ASSIGN
DUP.RESPONSE
      5269**DCL      6409<>CALL
DUP.RESPONSE_LGTH
      5271**DCL      6407<<ASSIGN   6409<>CALL
DUP.TEMP.CLOSE_TYPE
      5365**DCL      6632<<ASSIGN   6638<<ASSIGN   6643<<ASSIGN
DUP.TEMP.OPEN_TYPE
      5363**DCL      6626<<ASSIGN   6635<<ASSIGN
ERROR IN PROCEDURE ND_ADD_DECK
      6643**LABEL    6627--CALLALT  6628--CALLALT  6630--CALLALT  6631--CALLALT  6633--CALLALT  6636--CALLALT
      6637--CALLALT  6639--CALLALT
ERROR IN PROCEDURE ND_CHECK_FOR_DECK
      6590**LABEL    6575--CALLALT
ERROR IN PROCEDURE ND_COMMAND_SETUP
      6105**LABEL    6083--CALLALT  6092--CALLALT  6098--CALLALT  6101--CALLALT
ERROR IN PROCEDURE ND_FETCH_CATALOG_TABLE
      6235**LABEL    6224--CALLALT  6227--CALLALT
ERROR IN PROCEDURE ND_FIND_CATALOG
      6169**LABEL    6161--CALLALT  6162--CALLALT  6164--CALLALT
ERROR IN PROCEDURE ND_GET_CATALOG_TABLE_BUFFER
      6200**LABEL    6194--CALLALT
ERROR IN PROCEDURE ND_PROCESS_IFAD
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:202  
      6700**LABEL    6677--CALLALT  6680--CALLALT  6681--CALLALT  6682--CALLALT  6690--CALLALT  6691--CALLALT
      6692--CALLALT
ERROR IN PROCEDURE ND_PROCESS_TEMP
      6880**LABEL    6868--CALLALT  6869--CALLALT  6870--CALLALT  6871--CALLALT  6872--CALLALT
ERROR IN PROCEDURE ND_REPLACE_OLD_DECK
      7089**LABEL    7064--CALLALT  7065--CALLALT  7067--CALLALT  7068--CALLALT  7072--CALLALT  7073--CALLALT
      7077--CALLALT  7078--CALLALT  7085--CALLALT
ERROR IN PROCEDURE ND_SAVE_CATALOG_CONTROL
      6910**LABEL    6905--CALLALT  6906--CALLALT
ERROR IN PROCEDURE ND_SAVE_CATALOG_ENTRY
      6936**LABEL    6931--CALLALT  6932--CALLALT
ERROR IN PROCEDURE ND_SAVE_LAST_DECK#
      7114**LABEL    7109--CALLALT  7110--CALLALT
ERROR IN PROCEDURE ND_SAVE_LOG
      7145**LABEL    7135--CALLALT  7140--CALLALT  7141--CALLALT
ERROR IN PROCEDURE ND_SAVE_NEW_DECK
      7023**LABEL    7002--CALLALT  7003--CALLALT  7007--CALLALT  7008--CALLALT  7012--CALLALT  7013--CALLALT
      7019--CALLALT
ERROR IN PROCEDURE ND_SAVE_OBJECT_DECK
      6972**LABEL    6963--CALLALT  6967--CALLALT
ERROR IN PROCEDURE ND_STORE_CATALOG_CHANGES
      6837**LABEL    6827--CALLALT  6830--CALLALT  6833--CALLALT
ERROR IN PROCEDURE ND_STORE_LAST_DECK#
      6755**LABEL    6749--CALLALT  6751--CALLALT
ERROR IN PROCEDURE ND_STORE_OBJECT_DECK
      6803**LABEL    6793--CALLALT  6796--CALLALT  6799--CALLALT
ERROR_RETURN
      5853**LABEL    5839--CALLALT  5841--CALLALT  5842--CALLALT  5843--CALLALT  5844--CALLALT  5845--CALLALT
FILE_EOF
      5762**DCL      6675<<ASSIGN   6676>>DOUNTIL  6678>>IF
I IN PROCEDURE ND_CHECK_FOR_DECK
      6565**DCL      6578<<ASSIGN   6579>>DOUNTIL  6580>>IF       6582<<ASSIGN   6582>>ASSIGN
I IN PROCEDURE ND_CONVERT_CHOICE
      6449**DCL      6460<<ASSIGN   6461>>DOWHILE  6461>>DOWHILE  6462<<ASSIGN   6462>>ASSIGN   6467>>DOWHILE
      6468>>DOSELCT  6470>>CALLBLT  6474<<ASSIGN   6476<<ASSIGN   6476>>ASSIGN
I IN PROCEDURE ND_SEARCH_CATALOG_TABLE
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:203  
      6253**DCL      6258<<DOINDEX  6259>>IF       6262>>ASSIGN
I IN PROCEDURE ND_SHOW_CATALOG_CHOICES
      6351**DCL      6361<<DOINDEX  6362>>ASSIGN
I IN PROCEDURE ND_VALIDATE_CHOICE
      6499**DCL      6502<<DOINDEX  6503>>IF
ID.ID
      5564**DCL      7177<<ASSIGN   7178<<ASSIGN   7185<<ASSIGN
ID.REVISION
      5565**DCL      5566--REDEF    7180<<ASSIGN   7187<<ASSIGN   7195<<ASSIGN
INX IN PROCEDURE ND_GET_CATALOG_CHOICE
      6397**DCL      6395--PROC     6409<>CALL     6410<>CALL
INX IN PROCEDURE ND_SELECT_CATALOG
      6298**DCL      6315<>CALL     6316>>ASSIGN   6317>>ASSIGN   6318>>ASSIGN
INX IN PROCEDURE ND_VALIDATE_CHOICE
      6497**DCL      6495--PROC     6503>>IF
LAST.DECK#
      5581**DCL      6750<<ASSIGN   6750>>ASSIGN   6785>>ASSIGN
LGTH IN PROCEDURE ND_CONVERT_CHOICE
      6447**DCL      6443--PROC     6455>>DOWHILE  6455>>DOWHILE  6456<<ASSIGN   6456>>ASSIGN   6461>>DOWHILE
      6467>>DOWHILE  6474>>ASSIGN
MASTER_DATA.DECK#
      5594**DCL      6225>>ASSIGN
MASTER_DATA.ENTRY_COUNT
      5595**DCL      6226>>DOINDEX  6231>>ASSIGN
MASTER_ENTRY_KEY.DECK#
      5609**DCL      6225<<ASSIGN
MASTER_ENTRY_KEY.ENTRY#
      5610**DCL      6226<<DOINDEX  6228>>ASSIGN   6229>>ASSIGN   6309<<ASSIGN   6316<<ASSIGN   6362<<ASSIGN
      6580>>IF       7017>>ASSIGN   7082>>ASSIGN
MATCHING_OBJECT IN PROCEDURE ND_PROCESS_IFAD
      6671**DCL      6676>>DOUNTIL  6683<>CALL     6688>>IF
MATCH_FOUND IN PROCEDURE ND_CHECK_MATCH
      6721**DCL      6719--PROC     6726<<ASSIGN   6727<<ASSIGN
ND_ADD_DECK
      6622**PROC     5844--CALL
ND_CHECK_FOR_DECK
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:204  
      6563**PROC     5843--CALL
ND_CHECK_MATCH IN PROCEDURE ND_PROCESS_IFAD
      6719**PROC     6683--CALL
ND_COMMAND_SETUP
      5986**PROC     5839--CALL
ND_CONVERT_CHOICE IN PROCEDURE ND_GET_CATALOG_CHOICE
      6443**PROC     6409--CALL
ND_FETCH_CATALOG_TABLE IN PROCEDURE ND_FIND_CATALOG
      6222**PROC     6162--CALL
ND_FIND_CATALOG
      6145**PROC     5842--CALL     5875--CALL
ND_FREE_CATALOG_TABLE_BUFFER IN PROCEDURE ND_FIND_CATALOG
      6531**PROC     6165--CALL     6169--CALL
ND_GET_CATALOG_CHOICE IN PROCEDURE ND_SELECT_CATALOG
      6395**PROC     6315--CALL
ND_GET_CATALOG_TABLE_BUFFER IN PROCEDURE ND_FIND_CATALOG
      6188**PROC     6161--CALL
ND_INIT_DUP
      5946**PROC     5838--CALL
ND_PRINT_ADDED_DECK
      7213**PROC     6875--CALL
ND_PROCESS_IFAD
      6669**PROC     6630--CALL
ND_PROCESS_TEMP
      6863**PROC     6637--CALL
ND_REPLACE_OLD_DECK IN PROCEDURE ND_SAVE_OBJECT_DECK
      7055**PROC     6963--CALL
ND_SAVE_CATALOG_CONTROL
      6901**PROC     5890--CALL     6868--CALL
ND_SAVE_CATALOG_ENTRY
      6925**PROC     6869--CALL
ND_SAVE_LAST_DECK#
      7105**PROC     5920--CALL     6871--CALL
ND_SAVE_LOG
      7131**PROC     6872--CALL
ND_SAVE_NEW_DECK IN PROCEDURE ND_SAVE_OBJECT_DECK
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:205  
      6998**PROC     6967--CALL
ND_SAVE_OBJECT_DECK
      6957**PROC     5905--CALL     6870--CALL
ND_SEARCH_CATALOG_TABLE IN PROCEDURE ND_FIND_CATALOG
      6251**PROC     6163--CALL
ND_SELECT_CATALOG IN PROCEDURE ND_FIND_CATALOG
      6296**PROC     6164--CALL
ND_SETUP_PRINT
      7169**PROC     6873--CALL
ND_SHOW_CATALOG_CHOICES IN PROCEDURE ND_SELECT_CATALOG
      6349**PROC     6314--CALL
ND_STORE_CATALOG_CHANGES IN PROCEDURE ND_PROCESS_IFAD
      6823**PROC     6692--CALL
ND_STORE_LAST_DECK# IN PROCEDURE ND_PROCESS_IFAD
      6745**PROC     6690--CALL
ND_STORE_OBJECT_DECK IN PROCEDURE ND_PROCESS_IFAD
      6780**PROC     6691--CALL
ND_VALIDATE_CHOICE IN PROCEDURE ND_GET_CATALOG_CHOICE
      6495**PROC     6410--CALL
NOT_IN_DECKFILE IN PROCEDURE ND_CHECK_FOR_DECK
      6595**LABEL    6571--CALLALT
OBJECT
      5621**DCL      6788--CALL
OBJECT.BCD
      5622**DCL      5644--REDEF    5667--REDEF
OBJECT.BCD.CLASS
      5627**DCL      7174>>IF       7174>>IF       7176>>IF
OBJECT.BCD.LIBRARY
      5625**DCL      7173>>IF
OBJECT.BINARY_COUNT
      5669**DCL      6786<<ASSIGN   7006>>ASSIGN   7011>>ASSIGN   7071>>ASSIGN   7076>>ASSIGN
OBJECT.CHECKSUM
      5673**DCL      6788<>CALL
OBJECT.DECK#
      5668**DCL      6574>>ASSIGN   6785<<ASSIGN   6795>>ASSIGN   6798>>ASSIGN   7005>>ASSIGN   7010>>ASSIGN
      7015>>ASSIGN   7061>>ASSIGN   7062>>ASSIGN   7063>>ASSIGN   7070>>ASSIGN   7075>>ASSIGN   7080>>ASSIGN
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:206  
OBJECT.NIO_BCD.X_OF_N
      5655**DCL      5660--REDEF
OBJECT.TOTAL_COUNT
      5670**DCL      6787<<ASSIGN   7011>>ASSIGN   7076>>ASSIGN
OBJECT_KEY.DATA
      5698**DCL      6570<<ASSIGN   6697<<ASSIGN   6725>>IF       6784<<ASSIGN   7138>>ASSIGN   7177>>ASSIGN
      7178>>ASSIGN   7185>>ASSIGN
OBJECT_REFLIST_DATA.NUM_REFS
      5724**DCL      6579>>DOUNTIL  7016<<ASSIGN   7081>>ASSIGN   7084<<ASSIGN
OBJECT_REFLIST_DATA.REFS.CE#
      5727**DCL      7018<<ASSIGN   7083<<ASSIGN
OBJECT_REFLIST_DATA.REFS.ME#
      5726**DCL      6580>>IF       7017<<ASSIGN   7082<<ASSIGN
OBJECT_REFLIST_KEY.DECK#
      5711**DCL      6574<<ASSIGN   7015<<ASSIGN   7062<<ASSIGN   7063<<ASSIGN   7080<<ASSIGN
OBJECT_SEARCH_KEY.DATA
      5685**DCL      6087<<ASSIGN   6570>>ASSIGN   6697>>ASSIGN   6725>>IF       6784>>ASSIGN
OLD_COUNT IN PROCEDURE ND_REPLACE_OLD_DECK
      7057**DCL      7081<<ASSIGN   7082>>ASSIGN   7083>>ASSIGN   7084>>ASSIGN
OUT$BLK.CODE IN PROCEDURE ND_COMMAND_SETUP
      6004**DCL      6078>>DOCASE
OUT$BLK.NSUBLKS IN PROCEDURE ND_COMMAND_SETUP
      6008**DCL      6076>>DOINDEX
OUT$BLK.SUBLK$ IN PROCEDURE ND_COMMAND_SETUP
      6029**DCL      6077>>ASSIGN
OUT$SYM.COUNT IN PROCEDURE ND_COMMAND_SETUP
      6065**DCL      6068--IMP-SIZ  6081>>ASSIGN   6082>>ASSIGN   6085>>ASSIGN   6087>>ASSIGN   6090>>ASSIGN
      6091>>ASSIGN
OUT$SYM.TEXT IN PROCEDURE ND_COMMAND_SETUP
      6068**DCL      6081>>ASSIGN   6085>>ASSIGN   6087>>ASSIGN   6090>>ASSIGN
OUTBLK# IN PROCEDURE ND_COMMAND_SETUP
      5988**DCL      6076<<DOINDEX  6077>>ASSIGN
OUTBLK$ IN PROCEDURE ND_COMMAND_SETUP
      5989**DCL      6077<<ASSIGN   6078>>DOCASE   6081>>ASSIGN   6081>>ASSIGN   6082>>ASSIGN   6085>>ASSIGN
      6085>>ASSIGN   6087>>ASSIGN   6087>>ASSIGN   6090>>ASSIGN   6090>>ASSIGN   6091>>ASSIGN
RECORD.BCD
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:207  
      5741**DCL      5745--REDEF    5754--REDEF
RECORD.BINARY.DATA.BINARY
      5747**DCL      5748--REDEF
REFERENCE_FOUND IN PROCEDURE ND_CHECK_FOR_DECK
      6566**DCL      6577<<ASSIGN   6579>>DOUNTIL  6581<<ASSIGN   6585>>IF
TOU$B_PRINT_DECK_LINE
      5792**DCL-ENT  6874--CALL
TOU$B_SET_OBJECT_KEY
      5791**DCL-ENT  6682--CALL
TOU$B_SHOW_DCBS
      5787**DCL-ENT  5840--CALL
TOU$CHECKSUM
      5783**DCL-ENT  6788--CALL
TOU$CLEAR_IFAD
      5785**DCL-ENT  6629--CALL
TOU$DFU_CLOSE_TEMP
      5814**DCL-ENT  6633--CALL     6639--CALL     6644--CALL
TOU$DFU_DF_CHECK_FOR_KEY
      5804**DCL-ENT  6571--CALL     6961--CALL
TOU$DFU_DF_DL_DECK
      5802**DCL-ENT  7065--CALL
TOU$DFU_DF_RD_CATALOG_CONTROL
      5798**DCL-ENT  6827--CALL
TOU$DFU_DF_RD_LAST_DECK#
      5800**DCL-ENT  6749--CALL
TOU$DFU_DF_RD_LOG
      5801**DCL-ENT  7135--CALL
TOU$DFU_DF_RD_MASTER_CONTROL
      5796**DCL-ENT  6224--CALL
TOU$DFU_DF_RD_MASTER_ENTRY
      5797**DCL-ENT  6227--CALL
TOU$DFU_DF_RD_OBJECT_REFLIST
      5799**DCL-ENT  6575--CALL     7064--CALL
TOU$DFU_DF_WR_BCD_CARDS
      5809**DCL-ENT  7013--CALL     7078--CALL
TOU$DFU_DF_WR_BINARY
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:208  
      5808**DCL-ENT  7008--CALL     7073--CALL
TOU$DFU_DF_WR_CATALOG_CONTROL
      5805**DCL-ENT  6906--CALL
TOU$DFU_DF_WR_CATALOG_ENTRY
      5806**DCL-ENT  6932--CALL
TOU$DFU_DF_WR_LAST_DECK#
      5811**DCL-ENT  7110--CALL
TOU$DFU_DF_WR_LOG
      5812**DCL-ENT  7141--CALL
TOU$DFU_DF_WR_OBJECT
      5807**DCL-ENT  7003--CALL     7068--CALL
TOU$DFU_DF_WR_OBJECT_REFLIST
      5810**DCL-ENT  7019--CALL     7085--CALL
TOU$DFU_OPEN_TEMP
      5813**DCL-ENT  6627--CALL     6636--CALL
TOU$DFU_TF_RD_BCD_CARDS
      5822**DCL-ENT  7012--CALL     7077--CALL
TOU$DFU_TF_RD_BINARY
      5821**DCL-ENT  7007--CALL     7072--CALL
TOU$DFU_TF_RD_CATALOG_CONTROL
      5818**DCL-ENT  6905--CALL
TOU$DFU_TF_RD_CATALOG_ENTRY
      5819**DCL-ENT  6931--CALL
TOU$DFU_TF_RD_LAST_DECK#
      5823**DCL-ENT  7109--CALL
TOU$DFU_TF_RD_OBJECT
      5820**DCL-ENT  7002--CALL     7067--CALL
TOU$DFU_TF_WR_BCD_CARDS
      5829**DCL-ENT  6799--CALL
TOU$DFU_TF_WR_BINARY
      5828**DCL-ENT  6796--CALL
TOU$DFU_TF_WR_CATALOG_CONTROL
      5825**DCL-ENT  6833--CALL
TOU$DFU_TF_WR_CATALOG_ENTRY
      5826**DCL-ENT  6830--CALL
TOU$DFU_TF_WR_LAST_DECK#
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:209  
      5830**DCL-ENT  6751--CALL
TOU$DFU_TF_WR_OBJECT
      5827**DCL-ENT  6793--CALL
TOU$DU_CLOSE_DF
      5772**DCL-ENT  5845--CALL     5853--CALL
TOU$DU_CLOSE_IFAD
      5768**DCL-ENT  6631--CALL     6645--CALL
TOU$DU_FREE_DATA_SEGMENT
      5779**DCL-ENT  6536--CALL
TOU$DU_GET_DATA_SEGMENT
      5778**DCL-ENT  6194--CALL
TOU$DU_OPEN_DF
      5771**DCL-ENT  5841--CALL
TOU$DU_OPEN_IFAD
      5767**DCL-ENT  6628--CALL
TOU$DU_PRINTER_WRITE
      5776**DCL-ENT  6884--CALL     7218--CALL     7221--CALL
TOU$DU_SET_DF_FID
      5770**DCL-ENT  6092--CALL     6101--CALL
TOU$DU_SET_EDIT_PROMPT
      5781**DCL-ENT  6413--CALL
TOU$DU_SET_IFAD_FID
      5766**DCL-ENT  6083--CALL     6098--CALL
TOU$DU_SET_PROMPT
      5780**DCL-ENT  6404--CALL
TOU$DU_UPDATE_LOG
      5777**DCL-ENT  7140--CALL
TOU$DU_USER_READ
      5775**DCL-ENT  6408--CALL
TOU$DU_USER_WRITE
      5774**DCL-ENT  5849--CALL     5855--CALL     6306--CALL     6358--CALL     6363--CALL     6367--CALL
      6511--CALL     6588--CALL     6698--CALL     6883--CALL     7220--CALL
TOU$GET_BCD_CARDS
      5790**DCL-ENT  6681--CALL
TOU$GET_BINARY_CARDS
      5789**DCL-ENT  6680--CALL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:210  
TOU$GET_CP6_OBJECT
      5788**DCL-ENT  6677--CALL
TOU$ND_ALTRETURN
      5933**LABEL    5875--CALLALT  5890--CALLALT  5905--CALLALT  5920--CALLALT
VALID_CHOICE IN PROCEDURE ND_GET_CATALOG_CHOICE
      6398**DCL      6406>>DOUNTIL  6410<>CALL
VALID_CHOICE IN PROCEDURE ND_VALIDATE_CHOICE
      6498**DCL      6495--PROC     6501<<ASSIGN   6504<<ASSIGN   6507>>IF
VALUE IN PROCEDURE ND_CONVERT_CHOICE
      6448**DCL      6443--PROC     6466<<ASSIGN   6471<<ASSIGN   6471>>ASSIGN   6473<<ASSIGN
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:211  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:212  
              FULL UREF LISTING

BCD_CARD.BCD.CONTROL
      5412**DCL
BCD_CARD.BCD.DATA
      5414**DCL
BCD_CARD.BCD.LBL
      5415**DCL
BCD_CARD.BCD.SEQ
      5416**DCL
BCD_CARD.BCD.TYPE
      5413**DCL
BCD_CARD.BCD_
      5417**DCL
BCD_CARD.CHECKSUM
      5418**DCL
BCD_CARD_
      5419**DCL
BCD_KEY
      5430**DCL
BCD_KEY.CARD#
      5433**DCL
BCD_KEY.SIZE
      5431**DCL
BINARY_CARD.CHECKSUM
      5451**DCL
BINARY_CARD.DATA_CHAR
      5454**DCL
BINARY_CARD.LABEL_
      5456**DCL
BINARY_CARD.LABEL_.LBL
      5457**DCL
BINARY_CARD.LABEL_.SEQ
      5458**DCL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:213  
BINARY_CARD.RELOCATION
      5452**DCL
BINARY_CARD.WD1.ADDRESS
      5449**DCL
BINARY_CARD.WD1.SIZE
      5448**DCL
BINARY_CARD.WD1.TYPE
      5446**DCL
BINARY_CARD.WRD_CHAR
      5450**DCL
BINARY_CARD_
      5459**DCL
BINARY_CARD_.DATA
      5460**DCL
BINARY_KEY
      5471**DCL
BINARY_KEY.ENTRY#
      5474**DCL
BINARY_KEY.SIZE
      5472**DCL
CATALOGS.E IN PROCEDURE ND_FIND_CATALOG
      6152**DCL
CATALOGS.MATCHED IN PROCEDURE ND_FIND_CATALOG
      6155**DCL
CATALOG_DATA
      5485**DCL
CATALOG_DATA.RFU
      5488**DCL
CATALOG_ENTRY_KEY
      5499**DCL
CATALOG_ENTRY_KEY.SIZE
      5500**DCL
CATALOG_KEY
      5513**DCL
CATALOG_KEY.SIZE
      5514**DCL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:214  
CATALOG_SEARCH_KEY
      5527**DCL
DKEND.BCD.CONTROL
      5541**DCL
DKEND.BCD.DATE
      5546**DCL
DKEND.BCD.LBL
      5548**DCL
DKEND.BCD.MOD_DATE
      5545**DCL
DKEND.BCD.SEQ
      5549**DCL
DKEND.BCD.TTL_DATE
      5544**DCL
DKEND.BCD.TYPE
      5542**DCL
DKEND.CHECKSUM
      5551**DCL
DKEND_
      5552**DCL
DUP
      5255**DCL
DUP.BATCH_MODE
      5257**DCL
DUP.BCD_V
      5326**DCL
DUP.BINARY_V
      5321**DCL
DUP.BINARY_V.PTR$
      5324**DCL
DUP.BOTTOM_LINE#
      5293**DCL
DUP.BREAK_RETURN
      5377**DCL
DUP.BREAK_TERMINATE
      5373**DCL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:215  
DUP.CPU_TYPE
      5386**DCL
DUP.CURRENT_LINE#
      5291**DCL
DUP.CURRENT_PAGE#
      5289**DCL
DUP.DF
      5332**DCL
DUP.DF.FID
      5343**DCL
DUP.DF.FID_LGTH
      5345**DCL
DUP.DF.NO_EXIST
      5335**DCL
DUP.ERROR_IMAGE
      5295**DCL
DUP.FAULT_ERROR
      5261**DCL
DUP.IFAD
      5300**DCL
DUP.IFAD.CONFIG_TAB
      5309**DCL
DUP.IFAD.DEVICE_INPUT
      5305**DCL
DUP.IFAD.DRIVE_NUMBER
      5315**DCL
DUP.IFAD.FID_LGTH
      5319**DCL
DUP.IFAD.IMU_NUMBER
      5313**DCL
DUP.IFAD.IMU_TAB
      5307**DCL
DUP.IFAD.NUM_VOLUMES
      5311**DCL
DUP.LOG
      5348**DCL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:216  
DUP.LOG_V.PTR$
      5358**DCL
DUP.LOG_V_
      5360**DCL
DUP.MSG_V
      5282**DCL
DUP.MSG_V.PTR$
      5285**DCL
DUP.NUM_LINES
      5280**DCL
DUP.PROCESS_COMPLETE
      5259**DCL
DUP.SITE_ID
      5384**DCL
DUP.SITE_NAME
      5379**DCL
DUP.SITE_NAME.LGTH
      5380**DCL
DUP.SITE_NAME.TEXT
      5382**DCL
DUP.TEMP
      5362**DCL
ID
      5563**DCL
ID.REV
      5566**DCL
ID.REV.LEVEL
      5568**DCL
ID.USAGE
      5569**DCL
LAST
      5580**DCL
LAST.EDIT_NAME
      5582**DCL
MASTER_DATA
      5593**DCL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:217  
MASTER_DATA.RFU
      5596**DCL
MASTER_ENTRY_KEY
      5607**DCL
MASTER_ENTRY_KEY.SIZE
      5608**DCL
OBJECT.BCD.ASSEMBLER
      5639**DCL
OBJECT.BCD.CONTROL
      5623**DCL
OBJECT.BCD.DATE
      5641**DCL
OBJECT.BCD.DONT_APPLY
      5628**DCL
OBJECT.BCD.DONT_APPLY.CP6
      5630**DCL
OBJECT.BCD.DONT_APPLY.DPS8000
      5633**DCL
OBJECT.BCD.DONT_APPLY.DPS90
      5632**DCL
OBJECT.BCD.FILENAME
      5637**DCL
OBJECT.BCD.GECALL
      5640**DCL
OBJECT.BCD.LBL
      5642**DCL
OBJECT.BCD.LOAD_TYPE
      5626**DCL
OBJECT.BCD.MODEL
      5636**DCL
OBJECT.BCD.SEQ
      5643**DCL
OBJECT.BCD.TYPE
      5624**DCL
OBJECT.BCD_
      5667**DCL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:218  
OBJECT.DECK_CHECKSUM
      5672**DCL
OBJECT.LOAD_SIZE
      5671**DCL
OBJECT.NIO_BCD
      5644**DCL
OBJECT.NIO_BCD.ASSEMBLER
      5661**DCL
OBJECT.NIO_BCD.CLASS
      5649**DCL
OBJECT.NIO_BCD.CONTROL
      5645**DCL
OBJECT.NIO_BCD.DATA
      5651**DCL
OBJECT.NIO_BCD.EQUIP_TYPE
      5653**DCL
OBJECT.NIO_BCD.FILE_NAME
      5654**DCL
OBJECT.NIO_BCD.LBL
      5665**DCL
OBJECT.NIO_BCD.LIBRARY
      5647**DCL
OBJECT.NIO_BCD.LOAD_TYPE
      5648**DCL
OBJECT.NIO_BCD.PRD_NUM_TAB
      5662**DCL
OBJECT.NIO_BCD.PRG_NUM_TAB
      5663**DCL
OBJECT.NIO_BCD.SEQ
      5666**DCL
OBJECT.NIO_BCD.TYPE
      5646**DCL
OBJECT.NIO_BCD.X_OF_N.N
      5659**DCL
OBJECT.NIO_BCD.X_OF_N.X
      5657**DCL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:219  
OBJECT.NIO_BCD.X_OF_N_
      5660**DCL
OBJECT_KEY
      5696**DCL
OBJECT_KEY.SIZE
      5697**DCL
OBJECT_REFLIST_DATA
      5723**DCL
OBJECT_REFLIST_DATA.REFS
      5725**DCL
OBJECT_REFLIST_KEY
      5709**DCL
OBJECT_REFLIST_KEY.ENTRY#
      5712**DCL
OBJECT_REFLIST_KEY.SIZE
      5710**DCL
OBJECT_SEARCH_KEY
      5684**DCL
OUT$BLK IN PROCEDURE ND_COMMAND_SETUP
      5996**DCL
OUT$BLK.CPOS IN PROCEDURE ND_COMMAND_SETUP
      6022**DCL
OUT$BLK.NDTYPE IN PROCEDURE ND_COMMAND_SETUP
      5999**DCL
OUT$BLK.SCRITCH IN PROCEDURE ND_COMMAND_SETUP
      6012**DCL
OUT$BLK.TEMP IN PROCEDURE ND_COMMAND_SETUP
      5997**DCL
OUT$SYM IN PROCEDURE ND_COMMAND_SETUP
      6042**DCL
OUT$SYM.CODE IN PROCEDURE ND_COMMAND_SETUP
      6048**DCL
OUT$SYM.CPOS IN PROCEDURE ND_COMMAND_SETUP
      6057**DCL
OUT$SYM.NDTYPE IN PROCEDURE ND_COMMAND_SETUP
      6045**DCL
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:220  
OUT$SYM.NSUBLKS IN PROCEDURE ND_COMMAND_SETUP
      6051**DCL
OUT$SYM.SCRITCH IN PROCEDURE ND_COMMAND_SETUP
      6054**DCL
OUT$SYM.TEMP IN PROCEDURE ND_COMMAND_SETUP
      6043**DCL
OUT$SYM.TEXTC$ IN PROCEDURE ND_COMMAND_SETUP
      6060**DCL
RECORD
      5738**DCL
RECORD.BCD.DATA
      5742**DCL
RECORD.BINARY
      5745**DCL
RECORD.BINARY.DATA
      5746**DCL
RECORD.BINARY.DATA.CS
      5748**DCL
RECORD.BINARY.DATA.CS.CHECKSUM
      5750**DCL
RECORD.BINARY.DATA.CS.DATA
      5751**DCL
RECORD.BINARY.DATA.CS.WD1
      5749**DCL
RECORD.BINARY.DATA.LBL_SEQ
      5752**DCL
RECORD.DATA
      5754**DCL
RECORD.SIZE
      5739**DCL
TOU$ND_FIND_CATALOG
      5873**ENTRY
TOU$ND_SAVE_CATALOG_CONTROL
      5888**ENTRY
TOU$ND_SAVE_LAST_DECK#
      5918**ENTRY
PL6.E3A0      #001=TOU$NEWDECK File=TOU$NEWDECK.:E05TSI                          WED 07/30/97 06:49 Page:221  
TOU$ND_SAVE_OBJECT_DECK
      5903**ENTRY
TOU$NEWDECK
        62**PROC
