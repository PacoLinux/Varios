VERSION E05

PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:1    
        1        1        /*M* KPS$SLURP - This module implements PIGETTE's MOVE command.              */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,DFC */
        8        8        KPS$SLURP: PROC( OUT$ ) ALTRET ;
        9        9        /**/
       10       10        /*  Include files  */
       11       11        /**/
       12       12        %INCLUDE XU_MACRO_C;
       13     3118        %INCLUDE KP_DATA_R;
       14     4370        %INCLUDE XU_SUBS_C;
       15     4462        %INCLUDE KP_MSG;
       16     4555        %INCLUDE CP_6_SUBS;
       17     5095        /**/
       18     5096        /*  PARAMETERS  */
       19     5097        /**/
       20     5098    1   DCL OUT$ PTR;
       21     5099        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:2    
       22     5100        /**/
       23     5101        /*  Entry declarations  */
       24     5102        /**/
       25     5103        %KP_ENTRIES (OMIT=KPS$SLURP);
       26     5209    1   DCL XSF$LOCCODP ENTRY(2) ALTRET;
       27     5210        /**/
       28     5211        /*  Parser Structures  */
       29     5212        /**/
       30     5213        %PARSE$OUT    ( NAME    = OUT$BLK,
       31     5214                        STCLASS = BASED );
       32     5259        %PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
       33     5297        /**/
       34     5298        /*  LOCAL AUTO GOODIES  */
       35     5299        /**/
       36     5300    1   DCL SOURCE_FEP UBIN WORD;
       37     5301    1   DCL SOURCE_DRIVE UBIN WORD;
       38     5302    1   DCL SOURCE_TYPE SBIN WORD;
       39     5303    1   DCL DEST_FEP UBIN WORD;
       40     5304    1   DCL DEST_DRIVE UBIN WORD;
       41     5305    1   DCL DEST_TYPE SBIN WORD;
       42     5306    1   DCL SECTOR_OFFSET SBIN WORD;
       43     5307    1   DCL TRACK_OFFSET SBIN WORD;
       44     5308    1   DCL SIDE_OFFSET SBIN WORD;
       45     5309        /**/
       46     5310    1   DCL UNPACKED_SECTOR CHAR(%KP_MAX_BYTES_IN_SEC#);
       47     5311    1   DCL BUFFER CHAR(%KP_BLOCK_SIZE#);
       48     5312    1   DCL PART UBIN WORD;
       49     5313    1   DCL PART$ PTR;
       50     5314    1   DCL OPT UBIN WORD;
       51     5315    1   DCL OPT$ PTR;
       52     5316    1   DCL CUR_IN_TRACK UBIN WORD;
       53     5317    1   DCL CUR_IN_SECTOR UBIN WORD;
       54     5318    1   DCL CUR_IN_SIDE UBIN WORD;
       55     5319    1   DCL I UBIN WORD;
       56     5320    1   DCL CHUNK_SIZE SBIN WORD;
       57     5321    1   DCL ANNOUNCE_TRACK SBIN WORD;
       58     5322    1   DCL SECTORS_IN_CHUNK SBIN WORD;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:3    
       59     5323    1   DCL MAX_SECTORS_IN_CHUNK SBIN WORD;
       60     5324        /**/
       61     5325        /*  LOCAL STATIC  */
       62     5326        /**/
       63     5327    1   DCL OUTPUT_SPEC$ PTR STATIC;
       64     5328    1   DCL INPUT_SPEC$ PTR STATIC;
       65     5329        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:4    
       66     5330        /**/
       67     5331        /*  Assorted setup.  */
       68     5332        /**/
       69     5333        /* Set up defaults. */
       70     5334        /**/
       71     5335    1         IN_OPTS = IN_DEFAULTS;
       72     5336    1         OUT_OPTS = OUT_DEFAULTS;
       73     5337        /**/
       74     5338        /* Loop, processing options. */
       75     5339        /**/
       76     5340    2         DO PART = 0 TO OUT$ -> OUT$BLK.NSUBLKS -1;
       77     5341    2            PART$ = OUT$ -> OUT$BLK.SUBLK$(PART);
       78     5342    3            DO CASE(PART$ -> OUT$BLK.CODE);
       79     5343        /**/
       80     5344        /*  Input spec.  */
       81     5345        /**/
       82     5346    3               CASE(1);
       83     5347    3                 INPUT_SPEC$ = PART$;
       84     5348        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:5    
       85     5349        /**/
       86     5350        /* Set disposition (ON/OVER/INTO) */
       87     5351        /**/
       88     5352    3               CASE(5);
       89     5353    4                 DO CASE(PART$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE);
       90     5354    4                    CASE(1);               /* OVER                               */
       91     5355    4                      KP_OUTPUT_DISP = %NEWFILE#;
       92     5356    4                    CASE(0);               /* TO                                 */
       93     5357    4                      KP_OUTPUT_DISP = %ERROR#;
       94     5358    4                    CASE(2);               /* INTO                               */
       95     5359    4                      KP_OUTPUT_DISP = %OLDFILE#;
       96     5360    4                    END;                   /* END CASE                           */
       97     5361        /**/
       98     5362        /*  Output specification. */
       99     5363        /**/
      100     5364    3               CASE(2);
      101     5365    3                 OUTPUT_SPEC$ = PART$;
      102     5366        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:6    
      103     5367        /**/
      104     5368        /* Process input options */
      105     5369        /**/
      106     5370    3               CASE(3);
      107     5371    3                 CALL KPU$OPTIONS (IN_OPTS,PART$) ALTRET(QUITIT);
      108     5372        /**/
      109     5373        /* Process output options */
      110     5374        /**/
      111     5375    3               CASE(4);
      112     5376    3                 CALL KPU$OPTIONS (OUT_OPTS,PART$) ALTRET(QUITIT);
      113     5377
      114     5378    3               END;                        /* END DO CASE on node type           */
      115     5379    2            END;                           /* END DO INDEX on node number        */
      116     5380        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:7    
      117     5381        /**/
      118     5382        /*  Output parameters default to what the input was.                          */
      119     5383        /**/
      120     5384    1         IF OUT_OPTS.SECTOR_LO = -1
      121     5385    1          THEN
      122     5386    1            OUT_OPTS.SECTOR_LO = IN_OPTS.SECTOR_LO;
      123     5387    1         IF OUT_OPTS.TRACK_LO = -1
      124     5388    1          THEN
      125     5389    1            OUT_OPTS.TRACK_LO = IN_OPTS.TRACK_LO;
      126     5390    1         IF OUT_OPTS.SIDE_LO = -1
      127     5391    1          THEN
      128     5392    1            OUT_OPTS.SIDE_LO = IN_OPTS.SIDE_LO;
      129     5393        /**/
      130     5394        /*  Check limits for processed options  */
      131     5395        /**/
      132     5396    1         IF IN_OPTS.SECTOR_HI < IN_OPTS.SECTOR_LO
      133     5397    1          OR IN_OPTS.TRACK_HI < IN_OPTS.TRACK_LO
      134     5398    1          OR IN_OPTS.ANNOUNCE_LIMIT > 100
      135     5399    1          THEN
      136     5400    2            DO;
      137     5401    2              CALL KPE$ERROR( %E$BAD_OPT_VAL );
      138     5402    2              GOTO QUITIT;
      139     5403    2              END;
      140     5404        /**/
      141     5405        /*  Munge any options that need it.  */
      142     5406        /**/
      143     5407    1         ANNOUNCE_TRACK = (IN_OPTS.TRACK_HI - IN_OPTS.TRACK_LO) * IN_OPTS.
              5407                  ANNOUNCE_LIMIT;
      144     5408    1         ANNOUNCE_TRACK = (ANNOUNCE_TRACK / 100) + IN_OPTS.TRACK_LO;
      145     5409    1         TRACK_OFFSET = OUT_OPTS.TRACK_LO - IN_OPTS.TRACK_LO;
      146     5410    1         SECTOR_OFFSET = OUT_OPTS.SECTOR_LO - IN_OPTS.SECTOR_LO;
      147     5411    1         SIDE_OFFSET = OUT_OPTS.SIDE_LO - IN_OPTS.SIDE_LO;
      148     5412    1         MAX_SECTORS_IN_CHUNK = %KP_BLOCK_SIZE# / IN_OPTS.SECTOR_SIZE;
      149     5413        /**/
      150     5414        /*  If he wants, wait for his OK before attempting to access input            */
      151     5415        /*  or output devices.                                                        */
      152     5416        /**/
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:8    
      153     5417    1         IF IN_OPTS.USER_WAIT > 0
      154     5418    1          THEN
      155     5419    2            DO;
      156     5420    2              CALL KPT$TERM_MSG (%T$WAITING);
      157     5421    2              CALL KPI$IO_SVC (%KP_UC_READ#);
      158     5422    2              END;
      159     5423        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:9    
      160     5424        /**/
      161     5425        /* Process the input specification (which could be file or FEP) */
      162     5426        /**/
      163     5427    1         SOURCE_TYPE = 0;
      164     5428    1         IF INPUT_SPEC$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE ~= 99
      165     5429    1          THEN                             /* Input from FEP                     */
      166     5430    2            DO;
      167     5431    2              CALL KPU$FEP_AND_DRIVE(
      168     5432    2               INPUT_SPEC$ -> OUT$BLK,
      169     5433    2               SOURCE_FEP,SOURCE_DRIVE) ALTRET(BAD_FEP_OR_DRIVE);
      170     5434    2              CALL KPX$OPEN( SOURCE_FEP, SOURCE_DRIVE) ALTRET( CANT_OPEN );
      171     5435    2              SOURCE_TYPE = 1;
      172     5436    2              END;
      173     5437    1          ELSE                             /* Input from FID                     */
      174     5438    2           DO;
      175     5439    2             KP_FILE_NAME = SUBSTR( INPUT_SPEC$ -> OUT$BLK.SUBLK$(0) ->
      176     5440    2              OUT$SYM.TEXT, 0,
      177     5441    2              INPUT_SPEC$ -> OUT$BLK.SUBLK$(0) ->
      178     5442    2              OUT$SYM.COUNT );
      179     5443    2             CALL KPI$IO_SVC( %KP_RU_OPEN# ) ALTRET( CANT_OPEN );
      180     5444    2             SOURCE_TYPE = 2;
      181     5445    2             END;
      182     5446        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:10   
      183     5447        /**/
      184     5448        /* Process the output specification (which could be file or FEP) */
      185     5449        /**/
      186     5450    1           DEST_TYPE = 0;
      187     5451    1           IF OUTPUT_SPEC$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE ~= 99
      188     5452    1            THEN                           /* Destination is a FEP               */
      189     5453    2              DO;
      190     5454    2                CALL KPU$SECURITY(%KP_PRIV_WR#) ALTRET(CANT_OPEN);
      191     5455    2                CALL KPU$FEP_AND_DRIVE(
      192     5456    2                 OUTPUT_SPEC$ -> OUT$BLK,
      193     5457    2                DEST_FEP,DEST_DRIVE) ALTRET(BAD_FEP_OR_DRIVE);
      194     5458    2                CALL KPX$OPEN( DEST_FEP, DEST_DRIVE) ALTRET (CANT_OPEN);
      195     5459    2                DEST_TYPE = 1;
      196     5460    2                END;
      197     5461    1            ELSE                           /* FEP to FID                         */
      198     5462    2              DO;
      199     5463    2                KP_FILE_NAME = SUBSTR( OUTPUT_SPEC$ -> OUT$BLK.SUBLK$(0) ->
      200     5464    2                  OUT$SYM.TEXT, 0,
      201     5465    2                  OUTPUT_SPEC$ -> OUT$BLK.SUBLK$(0) ->
      202     5466    2                  OUT$SYM.COUNT );
      203     5467    2                CALL KPI$IO_SVC( %KP_RU_OPEN_OUT# ) ALTRET( CANT_OPEN );
      204     5468    2                DEST_TYPE = 2;
      205     5469    2                END;
      206     5470        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:11   
      207     5471        /**/
      208     5472        /* MOVE from source to destination, a sector at a time. */
      209     5473        /**/
      210     5474    1         CALL KPT$TERM_MSG( %T$COPYING );
      211     5475    1         GRIPE_INHIBIT = GRIPE_INHIBIT +1; /* PRINT NO ERRORS ON TOP LEVEL       */
      212     5476        /**/
      213     5477    2         DO CUR_IN_TRACK = IN_OPTS.TRACK_LO TO IN_OPTS.TRACK_HI ;
      214     5478    2            IF CUR_IN_TRACK >= ANNOUNCE_TRACK
      215     5479    2             AND IN_OPTS.ANNOUNCE_LIMIT > 0
      216     5480    2             THEN
      217     5481    3               DO;
      218     5482    3                 CALL KPT$TERM_MSG ( %T$THRESHOLD );
      219     5483    3                 IN_OPTS.ANNOUNCE_LIMIT = 0; /* Prevent repeat                   */
      220     5484    3                 END;
      221     5485    3            DO CUR_IN_SIDE = IN_OPTS.SIDE_LO TO IN_OPTS.SIDE_HI ;
      222     5486    3               SECTORS_IN_CHUNK = MAX_SECTORS_IN_CHUNK;
      223     5487    3               CALL MOVE_TRACK ALTRET(TRACK_TROUBLE);
      224     5488    4               DO WHILE ('0'B);
      225     5489    4   TRACK_TROUBLE: ;
      226     5490    4                  SECTORS_IN_CHUNK = 1;
      227     5491    4                  GRIPE_INHIBIT = GRIPE_INHIBIT -1; /* PRINT ERROR MESSAGES    */
      228     5492    4                  CALL MOVE_TRACK ALTRET(ITS_OK);
      229     5493    4   ITS_OK:        ;
      230     5494    4                  GRIPE_INHIBIT = GRIPE_INHIBIT +1; /* RESTORE ERROR STATUS    */
      231     5495    4                  END;
      232     5496    3               END;                     /* END INDEXING CUR_IN_SIDE              */
      233     5497    2            END;                        /* END INDEXING CUR_IN_TRACK             */
      234     5498        /**/
      235     5499    1         GRIPE_INHIBIT = GRIPE_INHIBIT -1; /* RESTORE ERROR PRINTING             */
      236     5500    1         CALL KPT$TERM_MSG( %T$COPYDUN );
      237     5501        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:12   
      238     5502        /**/
      239     5503        /* Now, clean up after ourselves! */
      240     5504        /**/
      241     5505    1   CANT_OPEN: ;
      242     5506    1   BAD_FEP_OR_DRIVE: ;
      243     5507    1   QUITIT: ;
      244     5508    2         DO CASE(SOURCE_TYPE);
      245     5509    2            CASE(1);                       /* FEP input                          */
      246     5510    2              CALL KPX$CLOSE( SOURCE_FEP,SOURCE_DRIVE) ALTRET(IN_CLOSED);
      247     5511    2            CASE(2);                       /* FID input                          */
      248     5512    2              CALL KPI$IO_SVC( %KP_RU_CLOSE# ) ALTRET(IN_CLOSED);
      249     5513    2            CASE(ELSE);                    /* Never got opened!                  */
      250     5514    2              ;
      251     5515    2            END;
      252     5516    1   IN_CLOSED: ;
      253     5517        /**/
      254     5518    2         DO CASE(DEST_TYPE);
      255     5519    2            CASE(1);                       /* FEP output                         */
      256     5520    2              CALL KPX$CLOSE( DEST_FEP,DEST_DRIVE) ALTRET(OUT_CLOSED);
      257     5521    2            CASE(2);                       /* FID output                         */
      258     5522    2              CALL KPI$IO_SVC( %KP_RU_CLOSE# ) ALTRET(OUT_CLOSED);
      259     5523    2            CASE(ELSE);                    /* Never was opened!                  */
      260     5524    2              ;
      261     5525    2            END;
      262     5526    1   OUT_CLOSED: ;
      263     5527        /**/
      264     5528    1         RETURN;
      265     5529        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:13   
      266     5530    1   MOVE_TRACK:  PROC ALTRET;
      267     5531        /**/
      268     5532    2   DCL MOVE_ERRORS BIT(1);
      269     5533        /**/
      270     5534    2            MOVE_ERRORS = '0'B;
      271     5535    3            DO CUR_IN_SECTOR = IN_OPTS.SECTOR_LO TO IN_OPTS.SECTOR_HI BY
              5535                     SECTORS_IN_CHUNK;
      272     5536        /**/
      273     5537        /* Find out how many sectors we are to process this whack. */
      274     5538        /**/
      275     5539    3               IF CUR_IN_SECTOR + SECTORS_IN_CHUNK -1 > IN_OPTS.SECTOR_HI
      276     5540    3                THEN                       /* Make this chunk small              */
      277     5541    3                  CHUNK_SIZE = IN_OPTS.SECTOR_HI - CUR_IN_SECTOR +1;
      278     5542    3                ELSE                       /* Maximum size chunk!                */
      279     5543    3                  CHUNK_SIZE = SECTORS_IN_CHUNK;
      280     5544        /**/
      281     5545        /* Read in the source sector */
      282     5546        /**/
      283     5547    4               DO CASE(SOURCE_TYPE);
      284     5548    4                  CASE(1);                 /* Input from a FEP                   */
      285     5549    4                    I = CHUNK_SIZE;
      286     5550    4                    CALL KPX$GETSEC (SOURCE_FEP,SOURCE_DRIVE,
      287     5551    4                     CUR_IN_TRACK,CUR_IN_SECTOR,
      288     5552    4                     I,BUFFER,CUR_IN_SIDE) ALTRET(MOVE_TROUBLE);
      289     5553    4                  CASE(2);                 /* Input from a FID                   */
      290     5554    4                    CALL KPU$GETVSEC (CUR_IN_TRACK,
      291     5555    4                     CUR_IN_SECTOR,BUFFER,CHUNK_SIZE,
      292     5556    4                     CUR_IN_SIDE) ALTRET(MOVE_TROUBLE);
      293     5557    4                  END;
      294     5558        /**/
      295     5559        /* Write out the destination sector */
      296     5560        /**/
      297     5561    4               DO CASE(DEST_TYPE);
      298     5562    4                  CASE(1);                 /* Output to a FEP                    */
      299     5563    4                    I = CHUNK_SIZE;
      300     5564    4                    CALL KPX$PUTSEC (DEST_FEP,DEST_DRIVE,
      301     5565    4                     CUR_IN_TRACK + TRACK_OFFSET,
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:14   
      302     5566    4                     CUR_IN_SECTOR + SECTOR_OFFSET,
      303     5567    4                     I,BUFFER,
      304     5568    4                     CUR_IN_SIDE + SIDE_OFFSET)
      305     5569    4                               ALTRET(MOVE_TROUBLE);
      306     5570    4                  CASE(2);                 /* Output to a FID                    */
      307     5571    4                    CALL KPU$PUTVSEC (
      308     5572    4                     CUR_IN_TRACK + TRACK_OFFSET,
      309     5573    4                     CUR_IN_SECTOR + SECTOR_OFFSET,
      310     5574    4                     BUFFER,CHUNK_SIZE,
      311     5575    4                     CUR_IN_SIDE + SIDE_OFFSET)
      312     5576    4                               ALTRET(MOVE_TROUBLE);
      313     5577    4                  END;                     /* END CASE                           */
      314     5578    4               DO WHILE ('0'B);
      315     5579    4   MOVE_TROUBLE: MOVE_ERRORS = '1'B;
      316     5580    4                  END;
      317     5581    3               END;                        /* END INDEXING CUR_IN_SECTOR            */
      318     5582    2            IF MOVE_ERRORS
      319     5583    2             THEN
      320     5584    2               ALTRETURN;
      321     5585    2            ELSE
      322     5586    2               RETURN;
      323     5587    2   END MOVE_TRACK;
      324     5588        /**/
      325     5589    1         END KPS$SLURP;

PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:15   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPS$SLURP.

   Procedure KPS$SLURP requires 453 words for executable code.
   Procedure KPS$SLURP requires 808 words of local(AUTO) storage.

    No errors detected in file KPS$SLURP.:E05TSI    .

PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:16   

 Object Unit name= KPS$SLURP                                  File name= KPS$SLURP.:E05TOU
 UTS= JUL 30 '97 01:21:16.28 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     2      2  KPS$SLURP
    2   Proc  even  none   453    705  KPS$SLURP
    3  RoData even  none    19     23  KPS$SLURP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  KPS$SLURP
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:17   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 KPU$OPTIONS
 yes     yes           Std       1 KPE$ERROR
 yes     yes           Std       2 KPX$OPEN
         yes           Std       1 KPT$TERM_MSG
 yes     yes           Std       1 KPI$IO_SVC
 yes     yes           Std       3 KPU$FEP_AND_DRIVE
 yes     yes           Std       1 KPU$SECURITY
 yes     yes           Std       2 KPX$CLOSE
 yes     yes           Std       7 KPX$GETSEC
 yes     yes           Std       5 KPU$GETVSEC
 yes     yes           Std       5 KPU$PUTVSEC
 yes     yes           Std       7 KPX$PUTSEC
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     GRIPE_INHIBIT                         KP_FILE_NAME                          KP_RU_KEY
     KP_OUTPUT_DISP                        IN_DEFAULTS                           OUT_DEFAULTS
     IN_OPTS                               OUT_OPTS                              B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:18   


        1        1        /*M* KPS$SLURP - This module implements PIGETTE's MOVE command.              */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,DFC */
        8        8        KPS$SLURP: PROC( OUT$ ) ALTRET ;

      8  2 000000   000000 700200 xent  KPS$SLURP    TSX0  ! X66_AUTO_1
         2 000001   001450 000001                    ZERO    808,1

        9        9        /**/
       10       10        /*  Include files  */
       11       11        /**/
       12       12        %INCLUDE XU_MACRO_C;
       13     3118        %INCLUDE KP_DATA_R;
       14     4370        %INCLUDE XU_SUBS_C;
       15     4462        %INCLUDE KP_MSG;
       16     4555        %INCLUDE CP_6_SUBS;
       17     5095        /**/
       18     5096        /*  PARAMETERS  */
       19     5097        /**/
       20     5098    1   DCL OUT$ PTR;
       21     5099        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:19   
       22     5100        /**/
       23     5101        /*  Entry declarations  */
       24     5102        /**/
       25     5103        %KP_ENTRIES (OMIT=KPS$SLURP);
       26     5209    1   DCL XSF$LOCCODP ENTRY(2) ALTRET;
       27     5210        /**/
       28     5211        /*  Parser Structures  */
       29     5212        /**/
       30     5213        %PARSE$OUT    ( NAME    = OUT$BLK,
       31     5214                        STCLASS = BASED );
       32     5259        %PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
       33     5297        /**/
       34     5298        /*  LOCAL AUTO GOODIES  */
       35     5299        /**/
       36     5300    1   DCL SOURCE_FEP UBIN WORD;
       37     5301    1   DCL SOURCE_DRIVE UBIN WORD;
       38     5302    1   DCL SOURCE_TYPE SBIN WORD;
       39     5303    1   DCL DEST_FEP UBIN WORD;
       40     5304    1   DCL DEST_DRIVE UBIN WORD;
       41     5305    1   DCL DEST_TYPE SBIN WORD;
       42     5306    1   DCL SECTOR_OFFSET SBIN WORD;
       43     5307    1   DCL TRACK_OFFSET SBIN WORD;
       44     5308    1   DCL SIDE_OFFSET SBIN WORD;
       45     5309        /**/
       46     5310    1   DCL UNPACKED_SECTOR CHAR(%KP_MAX_BYTES_IN_SEC#);
       47     5311    1   DCL BUFFER CHAR(%KP_BLOCK_SIZE#);
       48     5312    1   DCL PART UBIN WORD;
       49     5313    1   DCL PART$ PTR;
       50     5314    1   DCL OPT UBIN WORD;
       51     5315    1   DCL OPT$ PTR;
       52     5316    1   DCL CUR_IN_TRACK UBIN WORD;
       53     5317    1   DCL CUR_IN_SECTOR UBIN WORD;
       54     5318    1   DCL CUR_IN_SIDE UBIN WORD;
       55     5319    1   DCL I UBIN WORD;
       56     5320    1   DCL CHUNK_SIZE SBIN WORD;
       57     5321    1   DCL ANNOUNCE_TRACK SBIN WORD;
       58     5322    1   DCL SECTORS_IN_CHUNK SBIN WORD;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:20   
       59     5323    1   DCL MAX_SECTORS_IN_CHUNK SBIN WORD;
       60     5324        /**/
       61     5325        /*  LOCAL STATIC  */
       62     5326        /**/
       63     5327    1   DCL OUTPUT_SPEC$ PTR STATIC;
       64     5328    1   DCL INPUT_SPEC$ PTR STATIC;
       65     5329        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:21   
       66     5330        /**/
       67     5331        /*  Assorted setup.  */
       68     5332        /**/
       69     5333        /* Set up defaults. */
       70     5334        /**/
       71     5335    1         IN_OPTS = IN_DEFAULTS;

   5335  2 000002   000000 100400                    MLR     fill='000'O
         2 000003   000000 000064 xsym               ADSC9   IN_DEFAULTS              cn=0,n=52
         2 000004   000000 000064 xsym               ADSC9   IN_OPTS                  cn=0,n=52

       72     5336    1         OUT_OPTS = OUT_DEFAULTS;

   5336  2 000005   000000 100400                    MLR     fill='000'O
         2 000006   000000 000064 xsym               ADSC9   OUT_DEFAULTS             cn=0,n=52
         2 000007   000000 000064 xsym               ADSC9   OUT_OPTS                 cn=0,n=52

       73     5337        /**/
       74     5338        /* Loop, processing options. */
       75     5339        /**/
       76     5340    2         DO PART = 0 TO OUT$ -> OUT$BLK.NSUBLKS -1;

   5340  2 000010   201415 450100                    STZ     PART,,AUTO
         2 000011   000103 710000 2                  TRA     s:5379+3

       77     5341    2            PART$ = OUT$ -> OUT$BLK.SUBLK$(PART);

   5341  2 000012   200003 470500                    LDP0    @OUT$,,AUTO
         2 000013   000000 471500                    LDP1    0,,PR0
         2 000014   201415 720100                    LXL0    PART,,AUTO
         2 000015   100003 236110                    LDQ     3,X0,PR1
         2 000016   201416 756100                    STQ     PART$,,AUTO

       78     5342    3            DO CASE(PART$ -> OUT$BLK.CODE);

   5342  2 000017   201416 471500                    LDP1    PART$,,AUTO
         2 000020   100000 721100                    LXL1    0,,PR1
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:22   
         2 000021   000006 101003                    CMPX1   6,DU
         2 000022   000024 602011 2                  TNC     s:5342+5,X1
         2 000023   000100 710000 2                  TRA     s:5379
         2 000024   000100 710000 2                  TRA     s:5379
         2 000025   000032 710000 2                  TRA     s:5347
         2 000026   000055 710000 2                  TRA     s:5365
         2 000027   000057 710000 2                  TRA     s:5371
         2 000030   000070 710000 2                  TRA     s:5376
         2 000031   000034 710000 2                  TRA     s:5353

       79     5343        /**/
       80     5344        /*  Input spec.  */
       81     5345        /**/
       82     5346    3               CASE(1);

       83     5347    3                 INPUT_SPEC$ = PART$;

   5347  2 000032   000001 756000 1                  STQ     INPUT_SPEC$
         2 000033   000100 710000 2                  TRA     s:5379

       84     5348        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:23   
       85     5349        /**/
       86     5350        /* Set disposition (ON/OVER/INTO) */
       87     5351        /**/
       88     5352    3               CASE(5);

       89     5353    4                 DO CASE(PART$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE);

   5353  2 000034   100003 473500                    LDP3    3,,PR1
         2 000035   300000 722100                    LXL2    0,,PR3
         2 000036   000003 102003                    CMPX2   3,DU
         2 000037   000041 602012 2                  TNC     s:5353+5,X2
         2 000040   000100 710000 2                  TRA     s:5379
         2 000041   000047 710000 2                  TRA     s:5357
         2 000042   000044 710000 2                  TRA     s:5355
         2 000043   000052 710000 2                  TRA     s:5359

       90     5354    4                    CASE(1);               /* OVER                               */

       91     5355    4                      KP_OUTPUT_DISP = %NEWFILE#;

   5355  2 000044   000003 235007                    LDA     3,DL
         2 000045   000000 755000 xsym               STA     KP_OUTPUT_DISP
         2 000046   000100 710000 2                  TRA     s:5379

       92     5356    4                    CASE(0);               /* TO                                 */

       93     5357    4                      KP_OUTPUT_DISP = %ERROR#;

   5357  2 000047   000001 235007                    LDA     1,DL
         2 000050   000000 755000 xsym               STA     KP_OUTPUT_DISP
         2 000051   000100 710000 2                  TRA     s:5379

       94     5358    4                    CASE(2);               /* INTO                               */

       95     5359    4                      KP_OUTPUT_DISP = %OLDFILE#;

   5359  2 000052   000002 235007                    LDA     2,DL
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:24   
         2 000053   000000 755000 xsym               STA     KP_OUTPUT_DISP

       96     5360    4                    END;                   /* END CASE                           */

   5360  2 000054   000100 710000 2                  TRA     s:5379

       97     5361        /**/
       98     5362        /*  Output specification. */
       99     5363        /**/
      100     5364    3               CASE(2);

      101     5365    3                 OUTPUT_SPEC$ = PART$;

   5365  2 000055   000000 756000 1                  STQ     OUTPUT_SPEC$
         2 000056   000100 710000 2                  TRA     s:5379

      102     5366        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:25   
      103     5367        /**/
      104     5368        /* Process input options */
      105     5369        /**/
      106     5370    3               CASE(3);

      107     5371    3                 CALL KPU$OPTIONS (IN_OPTS,PART$) ALTRET(QUITIT);

   5371  2 000057   201416 633500                    EPPR3   PART$,,AUTO
         2 000060   201435 453500                    STP3    MOVE_ERRORS+2,,AUTO
         2 000061   000000 236000 3                  LDQ     0
         2 000062   201434 756100                    STQ     MOVE_ERRORS+1,,AUTO
         2 000063   201434 630500                    EPPR0   MOVE_ERRORS+1,,AUTO
         2 000064   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000065   000000 701000 xent               TSX1    KPU$OPTIONS
         2 000066   000413 702000 2                  TSX2    CANT_OPEN
         2 000067   000100 710000 2                  TRA     s:5379

      108     5372        /**/
      109     5373        /* Process output options */
      110     5374        /**/
      111     5375    3               CASE(4);

      112     5376    3                 CALL KPU$OPTIONS (OUT_OPTS,PART$) ALTRET(QUITIT);

   5376  2 000070   201416 633500                    EPPR3   PART$,,AUTO
         2 000071   201435 453500                    STP3    MOVE_ERRORS+2,,AUTO
         2 000072   000001 236000 3                  LDQ     1
         2 000073   201434 756100                    STQ     MOVE_ERRORS+1,,AUTO
         2 000074   201434 630500                    EPPR0   MOVE_ERRORS+1,,AUTO
         2 000075   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000076   000000 701000 xent               TSX1    KPU$OPTIONS
         2 000077   000413 702000 2                  TSX2    CANT_OPEN

      113     5377
      114     5378    3               END;                        /* END DO CASE on node type           */

      115     5379    2            END;                           /* END DO INDEX on node number        */
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:26   

   5379  2 000100   201415 235100                    LDA     PART,,AUTO
         2 000101   000001 035007                    ADLA    1,DL
         2 000102   201415 755100                    STA     PART,,AUTO
         2 000103   200003 470500                    LDP0    @OUT$,,AUTO
         2 000104   000000 471500                    LDP1    0,,PR0
         2 000105   100001 236100                    LDQ     1,,PR1
         2 000106   000022 772000                    QRL     18
         2 000107   201415 116100                    CMPQ    PART,,AUTO
         2 000110   000112 600000 2                  TZE     s:5384
         2 000111   000012 603000 2                  TRC     s:5341

      116     5380        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:27   
      117     5381        /**/
      118     5382        /*  Output parameters default to what the input was.                          */
      119     5383        /**/
      120     5384    1         IF OUT_OPTS.SECTOR_LO = -1

   5384  2 000112   000002 235000 xsym               LDA     OUT_OPTS+2
         2 000113   000027 115000 xsym               CMPA    B_VECTNIL+23
         2 000114   000117 601000 2                  TNZ     s:5387

      121     5385    1          THEN
      122     5386    1            OUT_OPTS.SECTOR_LO = IN_OPTS.SECTOR_LO;

   5386  2 000115   000002 235000 xsym               LDA     IN_OPTS+2
         2 000116   000002 755000 xsym               STA     OUT_OPTS+2

      123     5387    1         IF OUT_OPTS.TRACK_LO = -1

   5387  2 000117   000000 236000 xsym               LDQ     OUT_OPTS
         2 000120   000027 116000 xsym               CMPQ    B_VECTNIL+23
         2 000121   000124 601000 2                  TNZ     s:5390

      124     5388    1          THEN
      125     5389    1            OUT_OPTS.TRACK_LO = IN_OPTS.TRACK_LO;

   5389  2 000122   000000 235000 xsym               LDA     IN_OPTS
         2 000123   000000 755000 xsym               STA     OUT_OPTS

      126     5390    1         IF OUT_OPTS.SIDE_LO = -1

   5390  2 000124   000004 235000 xsym               LDA     OUT_OPTS+4
         2 000125   000027 115000 xsym               CMPA    B_VECTNIL+23
         2 000126   000131 601000 2                  TNZ     s:5396

      127     5391    1          THEN
      128     5392    1            OUT_OPTS.SIDE_LO = IN_OPTS.SIDE_LO;

   5392  2 000127   000004 236000 xsym               LDQ     IN_OPTS+4
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:28   
         2 000130   000004 756000 xsym               STQ     OUT_OPTS+4

      129     5393        /**/
      130     5394        /*  Check limits for processed options  */
      131     5395        /**/
      132     5396    1         IF IN_OPTS.SECTOR_HI < IN_OPTS.SECTOR_LO

   5396  2 000131   000003 236000 xsym               LDQ     IN_OPTS+3
         2 000132   000002 116000 xsym               CMPQ    IN_OPTS+2
         2 000133   000142 604000 2                  TMI     s:5401
         2 000134   000001 236000 xsym               LDQ     IN_OPTS+1
         2 000135   000000 116000 xsym               CMPQ    IN_OPTS
         2 000136   000142 604000 2                  TMI     s:5401
         2 000137   000006 235000 xsym               LDA     IN_OPTS+6
         2 000140   000144 115007                    CMPA    100,DL
         2 000141   000147 604400 2                  TMOZ    s:5407

      133     5397    1          OR IN_OPTS.TRACK_HI < IN_OPTS.TRACK_LO
      134     5398    1          OR IN_OPTS.ANNOUNCE_LIMIT > 100
      135     5399    1          THEN
      136     5400    2            DO;

      137     5401    2              CALL KPE$ERROR( %E$BAD_OPT_VAL );

   5401  2 000142   000003 630400 3                  EPPR0   3
         2 000143   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000144   000000 701000 xent               TSX1    KPE$ERROR
         2 000145   000000 011000                    NOP     0

      138     5402    2              GOTO QUITIT;

   5402  2 000146   000413 710000 2                  TRA     CANT_OPEN

      139     5403    2              END;
      140     5404        /**/
      141     5405        /*  Munge any options that need it.  */
      142     5406        /**/
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:29   
      143     5407    1         ANNOUNCE_TRACK = (IN_OPTS.TRACK_HI - IN_OPTS.TRACK_LO) * IN_OPTS.
              5407                  ANNOUNCE_LIMIT;

   5407  2 000147   000000 136000 xsym               SBLQ    IN_OPTS
         2 000150   000006 402000 xsym               MPY     IN_OPTS+6
         2 000151   201426 756100                    STQ     ANNOUNCE_TRACK,,AUTO

      144     5408    1         ANNOUNCE_TRACK = (ANNOUNCE_TRACK / 100) + IN_OPTS.TRACK_LO;

   5408  2 000152   000144 506007                    DIV     100,DL
         2 000153   000000 036000 xsym               ADLQ    IN_OPTS
         2 000154   201426 756100                    STQ     ANNOUNCE_TRACK,,AUTO

      145     5409    1         TRACK_OFFSET = OUT_OPTS.TRACK_LO - IN_OPTS.TRACK_LO;

   5409  2 000155   000000 236000 xsym               LDQ     OUT_OPTS
         2 000156   000000 136000 xsym               SBLQ    IN_OPTS
         2 000157   200013 756100                    STQ     TRACK_OFFSET,,AUTO

      146     5410    1         SECTOR_OFFSET = OUT_OPTS.SECTOR_LO - IN_OPTS.SECTOR_LO;

   5410  2 000160   000002 236000 xsym               LDQ     OUT_OPTS+2
         2 000161   000002 136000 xsym               SBLQ    IN_OPTS+2
         2 000162   200012 756100                    STQ     SECTOR_OFFSET,,AUTO

      147     5411    1         SIDE_OFFSET = OUT_OPTS.SIDE_LO - IN_OPTS.SIDE_LO;

   5411  2 000163   000004 236000 xsym               LDQ     OUT_OPTS+4
         2 000164   000004 136000 xsym               SBLQ    IN_OPTS+4
         2 000165   200014 756100                    STQ     SIDE_OFFSET,,AUTO

      148     5412    1         MAX_SECTORS_IN_CHUNK = %KP_BLOCK_SIZE# / IN_OPTS.SECTOR_SIZE;

   5412  2 000166   004000 236007                    LDQ     2048,DL
         2 000167   000010 506000 xsym               DIV     IN_OPTS+8
         2 000170   201430 756100                    STQ     MAX_SECTORS_IN_CHUNK,,AUTO

PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:30   
      149     5413        /**/
      150     5414        /*  If he wants, wait for his OK before attempting to access input            */
      151     5415        /*  or output devices.                                                        */
      152     5416        /**/
      153     5417    1         IF IN_OPTS.USER_WAIT > 0

   5417  2 000171   000007 235000 xsym               LDA     IN_OPTS+7
         2 000172   000203 604400 2                  TMOZ    s:5427

      154     5418    1          THEN
      155     5419    2            DO;

      156     5420    2              CALL KPT$TERM_MSG (%T$WAITING);

   5420  2 000173   000005 630400 3                  EPPR0   5
         2 000174   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000175   000000 701000 xent               TSX1    KPT$TERM_MSG
         2 000176   000000 011000                    NOP     0

      157     5421    2              CALL KPI$IO_SVC (%KP_UC_READ#);

   5421  2 000177   000003 630400 3                  EPPR0   3
         2 000200   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000201   000000 701000 xent               TSX1    KPI$IO_SVC
         2 000202   000000 011000                    NOP     0

      158     5422    2              END;

      159     5423        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:31   
      160     5424        /**/
      161     5425        /* Process the input specification (which could be file or FEP) */
      162     5426        /**/
      163     5427    1         SOURCE_TYPE = 0;

   5427  2 000203   200006 450100                    STZ     SOURCE_TYPE,,AUTO

      164     5428    1         IF INPUT_SPEC$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE ~= 99

   5428  2 000204   000001 470400 1                  LDP0    INPUT_SPEC$
         2 000205   000003 471500                    LDP1    3,,PR0
         2 000206   100000 720100                    LXL0    0,,PR1
         2 000207   000143 100003                    CMPX0   99,DU
         2 000210   000236 600000 2                  TZE     s:5439

      165     5429    1          THEN                             /* Input from FEP                     */
      166     5430    2            DO;

      167     5431    2              CALL KPU$FEP_AND_DRIVE(

   5431  2 000211   200005 633500                    EPPR3   SOURCE_DRIVE,,AUTO
         2 000212   201436 453500                    STP3    MOVE_ERRORS+3,,AUTO
         2 000213   200004 631500                    EPPR1   SOURCE_FEP,,AUTO
         2 000214   201435 451500                    STP1    MOVE_ERRORS+2,,AUTO
         2 000215   000001 236000 1                  LDQ     INPUT_SPEC$
         2 000216   201434 756100                    STQ     MOVE_ERRORS+1,,AUTO
         2 000217   201434 630500                    EPPR0   MOVE_ERRORS+1,,AUTO
         2 000220   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000221   000000 701000 xent               TSX1    KPU$FEP_AND_DRIVE
         2 000222   000413 702000 2                  TSX2    CANT_OPEN

      168     5432    2               INPUT_SPEC$ -> OUT$BLK,
      169     5433    2               SOURCE_FEP,SOURCE_DRIVE) ALTRET(BAD_FEP_OR_DRIVE);
      170     5434    2              CALL KPX$OPEN( SOURCE_FEP, SOURCE_DRIVE) ALTRET( CANT_OPEN );

   5434  2 000223   200005 630500                    EPPR0   SOURCE_DRIVE,,AUTO
         2 000224   201435 450500                    STP0    MOVE_ERRORS+2,,AUTO
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:32   
         2 000225   200004 631500                    EPPR1   SOURCE_FEP,,AUTO
         2 000226   201434 451500                    STP1    MOVE_ERRORS+1,,AUTO
         2 000227   201434 630500                    EPPR0   MOVE_ERRORS+1,,AUTO
         2 000230   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000231   000000 701000 xent               TSX1    KPX$OPEN
         2 000232   000413 702000 2                  TSX2    CANT_OPEN

      171     5435    2              SOURCE_TYPE = 1;

   5435  2 000233   000001 235007                    LDA     1,DL
         2 000234   200006 755100                    STA     SOURCE_TYPE,,AUTO

      172     5436    2              END;

   5436  2 000235   000252 710000 2                  TRA     s:5450

      173     5437    1          ELSE                             /* Input from FID                     */
      174     5438    2           DO;

      175     5439    2             KP_FILE_NAME = SUBSTR( INPUT_SPEC$ -> OUT$BLK.SUBLK$(0) ->

   5439  2 000236   100004 236100                    LDQ     4,,PR1
         2 000237   000033 772000                    QRL     27
         2 000240   000000 621006                    EAX1    0,QL
         2 000241   040000 100540                    MLR     fill='040'O
         2 000242   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         2 000243   000000 000062 xsym               ADSC9   KP_FILE_NAME             cn=0,n=50

      176     5440    2              OUT$SYM.TEXT, 0,
      177     5441    2              INPUT_SPEC$ -> OUT$BLK.SUBLK$(0) ->
      178     5442    2              OUT$SYM.COUNT );
      179     5443    2             CALL KPI$IO_SVC( %KP_RU_OPEN# ) ALTRET( CANT_OPEN );

   5443  2 000244   000007 630400 3                  EPPR0   7
         2 000245   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000246   000000 701000 xent               TSX1    KPI$IO_SVC
         2 000247   000413 702000 2                  TSX2    CANT_OPEN
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:33   

      180     5444    2             SOURCE_TYPE = 2;

   5444  2 000250   000002 235007                    LDA     2,DL
         2 000251   200006 755100                    STA     SOURCE_TYPE,,AUTO

      181     5445    2             END;

      182     5446        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:34   
      183     5447        /**/
      184     5448        /* Process the output specification (which could be file or FEP) */
      185     5449        /**/
      186     5450    1           DEST_TYPE = 0;

   5450  2 000252   200011 450100                    STZ     DEST_TYPE,,AUTO

      187     5451    1           IF OUTPUT_SPEC$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE ~= 99

   5451  2 000253   000000 470400 1                  LDP0    OUTPUT_SPEC$
         2 000254   000003 471500                    LDP1    3,,PR0
         2 000255   100000 720100                    LXL0    0,,PR1
         2 000256   000143 100003                    CMPX0   99,DU
         2 000257   000311 600000 2                  TZE     s:5463

      188     5452    1            THEN                           /* Destination is a FEP               */
      189     5453    2              DO;

      190     5454    2                CALL KPU$SECURITY(%KP_PRIV_WR#) ALTRET(CANT_OPEN);

   5454  2 000260   000010 630400 3                  EPPR0   8
         2 000261   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000262   000000 701000 xent               TSX1    KPU$SECURITY
         2 000263   000413 702000 2                  TSX2    CANT_OPEN

      191     5455    2                CALL KPU$FEP_AND_DRIVE(

   5455  2 000264   200010 630500                    EPPR0   DEST_DRIVE,,AUTO
         2 000265   201436 450500                    STP0    MOVE_ERRORS+3,,AUTO
         2 000266   200007 631500                    EPPR1   DEST_FEP,,AUTO
         2 000267   201435 451500                    STP1    MOVE_ERRORS+2,,AUTO
         2 000270   000000 236000 1                  LDQ     OUTPUT_SPEC$
         2 000271   201434 756100                    STQ     MOVE_ERRORS+1,,AUTO
         2 000272   201434 630500                    EPPR0   MOVE_ERRORS+1,,AUTO
         2 000273   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000274   000000 701000 xent               TSX1    KPU$FEP_AND_DRIVE
         2 000275   000413 702000 2                  TSX2    CANT_OPEN
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:35   

      192     5456    2                 OUTPUT_SPEC$ -> OUT$BLK,
      193     5457    2                DEST_FEP,DEST_DRIVE) ALTRET(BAD_FEP_OR_DRIVE);
      194     5458    2                CALL KPX$OPEN( DEST_FEP, DEST_DRIVE) ALTRET (CANT_OPEN);

   5458  2 000276   200010 630500                    EPPR0   DEST_DRIVE,,AUTO
         2 000277   201435 450500                    STP0    MOVE_ERRORS+2,,AUTO
         2 000300   200007 631500                    EPPR1   DEST_FEP,,AUTO
         2 000301   201434 451500                    STP1    MOVE_ERRORS+1,,AUTO
         2 000302   201434 630500                    EPPR0   MOVE_ERRORS+1,,AUTO
         2 000303   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000304   000000 701000 xent               TSX1    KPX$OPEN
         2 000305   000413 702000 2                  TSX2    CANT_OPEN

      195     5459    2                DEST_TYPE = 1;

   5459  2 000306   000001 235007                    LDA     1,DL
         2 000307   200011 755100                    STA     DEST_TYPE,,AUTO

      196     5460    2                END;

   5460  2 000310   000325 710000 2                  TRA     s:5474

      197     5461    1            ELSE                           /* FEP to FID                         */
      198     5462    2              DO;

      199     5463    2                KP_FILE_NAME = SUBSTR( OUTPUT_SPEC$ -> OUT$BLK.SUBLK$(0) ->

   5463  2 000311   100004 236100                    LDQ     4,,PR1
         2 000312   000033 772000                    QRL     27
         2 000313   000000 621006                    EAX1    0,QL
         2 000314   040000 100540                    MLR     fill='040'O
         2 000315   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         2 000316   000000 000062 xsym               ADSC9   KP_FILE_NAME             cn=0,n=50

      200     5464    2                  OUT$SYM.TEXT, 0,
      201     5465    2                  OUTPUT_SPEC$ -> OUT$BLK.SUBLK$(0) ->
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:36   
      202     5466    2                  OUT$SYM.COUNT );
      203     5467    2                CALL KPI$IO_SVC( %KP_RU_OPEN_OUT# ) ALTRET( CANT_OPEN );

   5467  2 000317   000012 630400 3                  EPPR0   10
         2 000320   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000321   000000 701000 xent               TSX1    KPI$IO_SVC
         2 000322   000413 702000 2                  TSX2    CANT_OPEN

      204     5468    2                DEST_TYPE = 2;

   5468  2 000323   000002 235007                    LDA     2,DL
         2 000324   200011 755100                    STA     DEST_TYPE,,AUTO

      205     5469    2                END;

      206     5470        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:37   
      207     5471        /**/
      208     5472        /* MOVE from source to destination, a sector at a time. */
      209     5473        /**/
      210     5474    1         CALL KPT$TERM_MSG( %T$COPYING );

   5474  2 000325   000014 630400 3                  EPPR0   12
         2 000326   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000327   000000 701000 xent               TSX1    KPT$TERM_MSG
         2 000330   000000 011000                    NOP     0

      211     5475    1         GRIPE_INHIBIT = GRIPE_INHIBIT +1; /* PRINT NO ERRORS ON TOP LEVEL       */

   5475  2 000331   000000 054000 xsym               AOS     GRIPE_INHIBIT

      212     5476        /**/
      213     5477    2         DO CUR_IN_TRACK = IN_OPTS.TRACK_LO TO IN_OPTS.TRACK_HI ;

   5477  2 000332   000000 235000 xsym               LDA     IN_OPTS
         2 000333   201421 755100                    STA     CUR_IN_TRACK,,AUTO
         2 000334   000401 710000 2                  TRA     s:5497+3

      214     5478    2            IF CUR_IN_TRACK >= ANNOUNCE_TRACK

   5478  2 000335   201421 236100                    LDQ     CUR_IN_TRACK,,AUTO
         2 000336   000341 604000 2                  TMI     s:5478+4
         2 000337   201426 116100                    CMPQ    ANNOUNCE_TRACK,,AUTO
         2 000340   000350 604000 2                  TMI     s:5485
         2 000341   000006 235000 xsym               LDA     IN_OPTS+6
         2 000342   000350 604400 2                  TMOZ    s:5485

      215     5479    2             AND IN_OPTS.ANNOUNCE_LIMIT > 0
      216     5480    2             THEN
      217     5481    3               DO;

      218     5482    3                 CALL KPT$TERM_MSG ( %T$THRESHOLD );

   5482  2 000343   000016 630400 3                  EPPR0   14
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:38   
         2 000344   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000345   000000 701000 xent               TSX1    KPT$TERM_MSG
         2 000346   000000 011000                    NOP     0

      219     5483    3                 IN_OPTS.ANNOUNCE_LIMIT = 0; /* Prevent repeat                   */

   5483  2 000347   000006 450000 xsym               STZ     IN_OPTS+6

      220     5484    3                 END;

      221     5485    3            DO CUR_IN_SIDE = IN_OPTS.SIDE_LO TO IN_OPTS.SIDE_HI ;

   5485  2 000350   000004 235000 xsym               LDA     IN_OPTS+4
         2 000351   201423 755100                    STA     CUR_IN_SIDE,,AUTO
         2 000352   000372 710000 2                  TRA     s:5496+3

      222     5486    3               SECTORS_IN_CHUNK = MAX_SECTORS_IN_CHUNK;

   5486  2 000353   201430 235100                    LDA     MAX_SECTORS_IN_CHUNK,,AUTO
         2 000354   201427 755100                    STA     SECTORS_IN_CHUNK,,AUTO

      223     5487    3               CALL MOVE_TRACK ALTRET(TRACK_TROUBLE);

   5487  2 000355   000466 701000 2                  TSX1    MOVE_TRACK
         2 000356   000360 702000 2                  TSX2    TRACK_TROUBLE

      224     5488    4               DO WHILE ('0'B);

   5488  2 000357   000367 710000 2                  TRA     s:5496

   5487  2 000360                       TRACK_TROUB* null
      225     5489    4   TRACK_TROUBLE: ;
      226     5490    4                  SECTORS_IN_CHUNK = 1;

   5490  2 000360   000001 235007                    LDA     1,DL
         2 000361   201427 755100                    STA     SECTORS_IN_CHUNK,,AUTO

PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:39   
      227     5491    4                  GRIPE_INHIBIT = GRIPE_INHIBIT -1; /* PRINT ERROR MESSAGES    */

   5491  2 000362   000001 336007                    LCQ     1,DL
         2 000363   000000 056000 xsym               ASQ     GRIPE_INHIBIT

      228     5492    4                  CALL MOVE_TRACK ALTRET(ITS_OK);

   5492  2 000364   000466 701000 2                  TSX1    MOVE_TRACK
         2 000365   000366 702000 2                  TSX2    ITS_OK

   5491  2 000366                       ITS_OK       null
      229     5493    4   ITS_OK:        ;
      230     5494    4                  GRIPE_INHIBIT = GRIPE_INHIBIT +1; /* RESTORE ERROR STATUS    */

   5494  2 000366   000000 054000 xsym               AOS     GRIPE_INHIBIT

      231     5495    4                  END;

      232     5496    3               END;                     /* END INDEXING CUR_IN_SIDE              */

   5496  2 000367   201423 235100                    LDA     CUR_IN_SIDE,,AUTO
         2 000370   000001 035007                    ADLA    1,DL
         2 000371   201423 755100                    STA     CUR_IN_SIDE,,AUTO
         2 000372   201423 236100                    LDQ     CUR_IN_SIDE,,AUTO
         2 000373   000376 604000 2                  TMI     s:5497
         2 000374   000005 116000 xsym               CMPQ    IN_OPTS+5
         2 000375   000353 604400 2                  TMOZ    s:5486

      233     5497    2            END;                        /* END INDEXING CUR_IN_TRACK             */

   5497  2 000376   201421 235100                    LDA     CUR_IN_TRACK,,AUTO
         2 000377   000001 035007                    ADLA    1,DL
         2 000400   201421 755100                    STA     CUR_IN_TRACK,,AUTO
         2 000401   201421 236100                    LDQ     CUR_IN_TRACK,,AUTO
         2 000402   000405 604000 2                  TMI     s:5499
         2 000403   000001 116000 xsym               CMPQ    IN_OPTS+1
         2 000404   000335 604400 2                  TMOZ    s:5478
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:40   

      234     5498        /**/
      235     5499    1         GRIPE_INHIBIT = GRIPE_INHIBIT -1; /* RESTORE ERROR PRINTING             */

   5499  2 000405   000001 336007                    LCQ     1,DL
         2 000406   000000 056000 xsym               ASQ     GRIPE_INHIBIT

      236     5500    1         CALL KPT$TERM_MSG( %T$COPYDUN );

   5500  2 000407   000020 630400 3                  EPPR0   16
         2 000410   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000411   000000 701000 xent               TSX1    KPT$TERM_MSG
         2 000412   000000 011000                    NOP     0

   5499  2 000413                       CANT_OPEN    null
   5499  2 000413                       BAD_FEP_OR_* null
   5499  2 000413                       QUITIT       null
      237     5501        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:41   
      238     5502        /**/
      239     5503        /* Now, clean up after ourselves! */
      240     5504        /**/
      241     5505    1   CANT_OPEN: ;
      242     5506    1   BAD_FEP_OR_DRIVE: ;
      243     5507    1   QUITIT: ;
      244     5508    2         DO CASE(SOURCE_TYPE);

   5508  2 000413   200006 235100                    LDA     SOURCE_TYPE,,AUTO
         2 000414   000003 115007                    CMPA    3,DL
         2 000415   000417 602005 2                  TNC     CANT_OPEN+4,AL
         2 000416   000440 710000 2                  TRA     IN_CLOSED
         2 000417   000440 710000 2                  TRA     IN_CLOSED
         2 000420   000422 710000 2                  TRA     s:5510
         2 000421   000433 710000 2                  TRA     s:5512

      245     5509    2            CASE(1);                       /* FEP input                          */

      246     5510    2              CALL KPX$CLOSE( SOURCE_FEP,SOURCE_DRIVE) ALTRET(IN_CLOSED);

   5510  2 000422   200005 630500                    EPPR0   SOURCE_DRIVE,,AUTO
         2 000423   201435 450500                    STP0    MOVE_ERRORS+2,,AUTO
         2 000424   200004 631500                    EPPR1   SOURCE_FEP,,AUTO
         2 000425   201434 451500                    STP1    MOVE_ERRORS+1,,AUTO
         2 000426   201434 630500                    EPPR0   MOVE_ERRORS+1,,AUTO
         2 000427   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000430   000000 701000 xent               TSX1    KPX$CLOSE
         2 000431   000440 702000 2                  TSX2    IN_CLOSED
         2 000432   000440 710000 2                  TRA     IN_CLOSED

      247     5511    2            CASE(2);                       /* FID input                          */

      248     5512    2              CALL KPI$IO_SVC( %KP_RU_CLOSE# ) ALTRET(IN_CLOSED);

   5512  2 000433   000022 630400 3                  EPPR0   18
         2 000434   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000435   000000 701000 xent               TSX1    KPI$IO_SVC
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:42   
         2 000436   000440 702000 2                  TSX2    IN_CLOSED
         2 000437   000440 710000 2                  TRA     IN_CLOSED

      249     5513    2            CASE(ELSE);                    /* Never got opened!                  */

      250     5514    2              ;
      251     5515    2            END;

   5508  2 000440                       IN_CLOSED    null
      252     5516    1   IN_CLOSED: ;
      253     5517        /**/
      254     5518    2         DO CASE(DEST_TYPE);

   5518  2 000440   200011 235100                    LDA     DEST_TYPE,,AUTO
         2 000441   000003 115007                    CMPA    3,DL
         2 000442   000444 602005 2                  TNC     IN_CLOSED+4,AL
         2 000443   000465 710000 2                  TRA     OUT_CLOSED
         2 000444   000465 710000 2                  TRA     OUT_CLOSED
         2 000445   000447 710000 2                  TRA     s:5520
         2 000446   000460 710000 2                  TRA     s:5522

      255     5519    2            CASE(1);                       /* FEP output                         */

      256     5520    2              CALL KPX$CLOSE( DEST_FEP,DEST_DRIVE) ALTRET(OUT_CLOSED);

   5520  2 000447   200010 630500                    EPPR0   DEST_DRIVE,,AUTO
         2 000450   201435 450500                    STP0    MOVE_ERRORS+2,,AUTO
         2 000451   200007 631500                    EPPR1   DEST_FEP,,AUTO
         2 000452   201434 451500                    STP1    MOVE_ERRORS+1,,AUTO
         2 000453   201434 630500                    EPPR0   MOVE_ERRORS+1,,AUTO
         2 000454   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000455   000000 701000 xent               TSX1    KPX$CLOSE
         2 000456   000465 702000 2                  TSX2    OUT_CLOSED
         2 000457   000465 710000 2                  TRA     OUT_CLOSED

      257     5521    2            CASE(2);                       /* FID output                         */

PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:43   
      258     5522    2              CALL KPI$IO_SVC( %KP_RU_CLOSE# ) ALTRET(OUT_CLOSED);

   5522  2 000460   000022 630400 3                  EPPR0   18
         2 000461   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000462   000000 701000 xent               TSX1    KPI$IO_SVC
         2 000463   000465 702000 2                  TSX2    OUT_CLOSED
         2 000464   000465 710000 2                  TRA     OUT_CLOSED

      259     5523    2            CASE(ELSE);                    /* Never was opened!                  */

      260     5524    2              ;
      261     5525    2            END;

   5518  2 000465                       OUT_CLOSED   null
      262     5526    1   OUT_CLOSED: ;
      263     5527        /**/
      264     5528    1         RETURN;

   5528  2 000465   000000 702200 xent               TSX2  ! X66_ARET

      265     5529        %EJECT;
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:44   
      266     5530    1   MOVE_TRACK:  PROC ALTRET;

   5530  2 000466   201432 741300       MOVE_TRACK   STX1  ! MAX_SECTORS_IN_CHUNK+2,,AUTO

      267     5531        /**/
      268     5532    2   DCL MOVE_ERRORS BIT(1);
      269     5533        /**/
      270     5534    2            MOVE_ERRORS = '0'B;

   5534  2 000467   201433 450100                    STZ     MOVE_ERRORS,,AUTO

      271     5535    3            DO CUR_IN_SECTOR = IN_OPTS.SECTOR_LO TO IN_OPTS.SECTOR_HI BY
              5535                     SECTORS_IN_CHUNK;

   5535  2 000470   000002 235000 xsym               LDA     IN_OPTS+2
         2 000471   201422 755100                    STA     CUR_IN_SECTOR,,AUTO
         2 000472   000673 710000 2                  TRA     s:5581+3

      272     5536        /**/
      273     5537        /* Find out how many sectors we are to process this whack. */
      274     5538        /**/
      275     5539    3               IF CUR_IN_SECTOR + SECTORS_IN_CHUNK -1 > IN_OPTS.SECTOR_HI

   5539  2 000473   201422 236100                    LDQ     CUR_IN_SECTOR,,AUTO
         2 000474   201427 036100                    ADLQ    SECTORS_IN_CHUNK,,AUTO
         2 000475   000001 136007                    SBLQ    1,DL
         2 000476   000003 116000 xsym               CMPQ    IN_OPTS+3
         2 000477   000505 604400 2                  TMOZ    s:5543

      276     5540    3                THEN                       /* Make this chunk small              */
      277     5541    3                  CHUNK_SIZE = IN_OPTS.SECTOR_HI - CUR_IN_SECTOR +1;

   5541  2 000500   000003 236000 xsym               LDQ     IN_OPTS+3
         2 000501   201422 136100                    SBLQ    CUR_IN_SECTOR,,AUTO
         2 000502   000001 036007                    ADLQ    1,DL
         2 000503   201425 756100                    STQ     CHUNK_SIZE,,AUTO
         2 000504   000507 710000 2                  TRA     s:5547
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:45   

      278     5542    3                ELSE                       /* Maximum size chunk!                */
      279     5543    3                  CHUNK_SIZE = SECTORS_IN_CHUNK;

   5543  2 000505   201427 235100                    LDA     SECTORS_IN_CHUNK,,AUTO
         2 000506   201425 755100                    STA     CHUNK_SIZE,,AUTO

      280     5544        /**/
      281     5545        /* Read in the source sector */
      282     5546        /**/
      283     5547    4               DO CASE(SOURCE_TYPE);

   5547  2 000507   200006 235100                    LDA     SOURCE_TYPE,,AUTO
         2 000510   000003 115007                    CMPA    3,DL
         2 000511   000513 602005 2                  TNC     s:5547+4,AL
         2 000512   000561 710000 2                  TRA     s:5561
         2 000513   000561 710000 2                  TRA     s:5561
         2 000514   000516 710000 2                  TRA     s:5549
         2 000515   000543 710000 2                  TRA     s:5554

      284     5548    4                  CASE(1);                 /* Input from a FEP                   */

      285     5549    4                    I = CHUNK_SIZE;

   5549  2 000516   201425 236100                    LDQ     CHUNK_SIZE,,AUTO
         2 000517   201424 756100                    STQ     I,,AUTO

      286     5550    4                    CALL KPX$GETSEC (SOURCE_FEP,SOURCE_DRIVE,

   5550  2 000520   201423 630500                    EPPR0   CUR_IN_SIDE,,AUTO
         2 000521   201442 450500                    STP0    MOVE_ERRORS+7,,AUTO
         2 000522   200415 631500                    EPPR1   BUFFER,,AUTO
         2 000523   201441 451500                    STP1    MOVE_ERRORS+6,,AUTO
         2 000524   201424 633500                    EPPR3   I,,AUTO
         2 000525   201440 453500                    STP3    MOVE_ERRORS+5,,AUTO
         2 000526   201422 634500                    EPPR4   CUR_IN_SECTOR,,AUTO
         2 000527   201437 454500                    STP4    MOVE_ERRORS+4,,AUTO
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:46   
         2 000530   201421 635500                    EPPR5   CUR_IN_TRACK,,AUTO
         2 000531   201436 455500                    STP5    MOVE_ERRORS+3,,AUTO
         2 000532   200005 636500                    EPPR6   SOURCE_DRIVE,,AUTO
         2 000533   201435 456500                    STP6    MOVE_ERRORS+2,,AUTO
         2 000534   200004 637500                    EPPR7   SOURCE_FEP,,AUTO
         2 000535   201434 457500                    STP7    MOVE_ERRORS+1,,AUTO
         2 000536   201434 630500                    EPPR0   MOVE_ERRORS+1,,AUTO
         2 000537   000025 631400 xsym               EPPR1   B_VECTNIL+21
         2 000540   000000 701000 xent               TSX1    KPX$GETSEC
         2 000541   000666 702000 2                  TSX2    MOVE_TROUBLE
         2 000542   000561 710000 2                  TRA     s:5561

      287     5551    4                     CUR_IN_TRACK,CUR_IN_SECTOR,
      288     5552    4                     I,BUFFER,CUR_IN_SIDE) ALTRET(MOVE_TROUBLE);
      289     5553    4                  CASE(2);                 /* Input from a FID                   */

      290     5554    4                    CALL KPU$GETVSEC (CUR_IN_TRACK,

   5554  2 000543   201423 630500                    EPPR0   CUR_IN_SIDE,,AUTO
         2 000544   201440 450500                    STP0    MOVE_ERRORS+5,,AUTO
         2 000545   201425 631500                    EPPR1   CHUNK_SIZE,,AUTO
         2 000546   201437 451500                    STP1    MOVE_ERRORS+4,,AUTO
         2 000547   200415 633500                    EPPR3   BUFFER,,AUTO
         2 000550   201436 453500                    STP3    MOVE_ERRORS+3,,AUTO
         2 000551   201422 634500                    EPPR4   CUR_IN_SECTOR,,AUTO
         2 000552   201435 454500                    STP4    MOVE_ERRORS+2,,AUTO
         2 000553   201421 635500                    EPPR5   CUR_IN_TRACK,,AUTO
         2 000554   201434 455500                    STP5    MOVE_ERRORS+1,,AUTO
         2 000555   201434 630500                    EPPR0   MOVE_ERRORS+1,,AUTO
         2 000556   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000557   000000 701000 xent               TSX1    KPU$GETVSEC
         2 000560   000666 702000 2                  TSX2    MOVE_TROUBLE

      291     5555    4                     CUR_IN_SECTOR,BUFFER,CHUNK_SIZE,
      292     5556    4                     CUR_IN_SIDE) ALTRET(MOVE_TROUBLE);
      293     5557    4                  END;

PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:47   
      294     5558        /**/
      295     5559        /* Write out the destination sector */
      296     5560        /**/
      297     5561    4               DO CASE(DEST_TYPE);

   5561  2 000561   200011 235100                    LDA     DEST_TYPE,,AUTO
         2 000562   000003 115007                    CMPA    3,DL
         2 000563   000565 602005 2                  TNC     s:5561+4,AL
         2 000564   000665 710000 2                  TRA     s:5578
         2 000565   000665 710000 2                  TRA     s:5578
         2 000566   000570 710000 2                  TRA     s:5563
         2 000567   000632 710000 2                  TRA     s:5571

      298     5562    4                  CASE(1);                 /* Output to a FEP                    */

      299     5563    4                    I = CHUNK_SIZE;

   5563  2 000570   201425 236100                    LDQ     CHUNK_SIZE,,AUTO
         2 000571   201424 756100                    STQ     I,,AUTO

      300     5564    4                    CALL KPX$PUTSEC (DEST_FEP,DEST_DRIVE,

   5564  2 000572   201421 236100                    LDQ     CUR_IN_TRACK,,AUTO
         2 000573   200013 036100                    ADLQ    TRACK_OFFSET,,AUTO
         2 000574   201434 756100                    STQ     MOVE_ERRORS+1,,AUTO
         2 000575   201422 236100                    LDQ     CUR_IN_SECTOR,,AUTO
         2 000576   200012 036100                    ADLQ    SECTOR_OFFSET,,AUTO
         2 000577   201435 756100                    STQ     MOVE_ERRORS+2,,AUTO
         2 000600   201423 236100                    LDQ     CUR_IN_SIDE,,AUTO
         2 000601   200014 036100                    ADLQ    SIDE_OFFSET,,AUTO
         2 000602   201434 235100                    LDA     MOVE_ERRORS+1,,AUTO
         2 000603   201436 755100                    STA     MOVE_ERRORS+3,,AUTO
         2 000604   201435 235100                    LDA     MOVE_ERRORS+2,,AUTO
         2 000605   201437 755100                    STA     MOVE_ERRORS+4,,AUTO
         2 000606   201440 756100                    STQ     MOVE_ERRORS+5,,AUTO
         2 000607   201440 630500                    EPPR0   MOVE_ERRORS+5,,AUTO
         2 000610   201447 450500                    STP0    MOVE_ERRORS+12,,AUTO
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:48   
         2 000611   200415 631500                    EPPR1   BUFFER,,AUTO
         2 000612   201446 451500                    STP1    MOVE_ERRORS+11,,AUTO
         2 000613   201424 633500                    EPPR3   I,,AUTO
         2 000614   201445 453500                    STP3    MOVE_ERRORS+10,,AUTO
         2 000615   201437 634500                    EPPR4   MOVE_ERRORS+4,,AUTO
         2 000616   201444 454500                    STP4    MOVE_ERRORS+9,,AUTO
         2 000617   201436 635500                    EPPR5   MOVE_ERRORS+3,,AUTO
         2 000620   201443 455500                    STP5    MOVE_ERRORS+8,,AUTO
         2 000621   200010 636500                    EPPR6   DEST_DRIVE,,AUTO
         2 000622   201442 456500                    STP6    MOVE_ERRORS+7,,AUTO
         2 000623   200007 637500                    EPPR7   DEST_FEP,,AUTO
         2 000624   201441 457500                    STP7    MOVE_ERRORS+6,,AUTO
         2 000625   201441 630500                    EPPR0   MOVE_ERRORS+6,,AUTO
         2 000626   000025 631400 xsym               EPPR1   B_VECTNIL+21
         2 000627   000000 701000 xent               TSX1    KPX$PUTSEC
         2 000630   000666 702000 2                  TSX2    MOVE_TROUBLE
         2 000631   000665 710000 2                  TRA     s:5578

      301     5565    4                     CUR_IN_TRACK + TRACK_OFFSET,
      302     5566    4                     CUR_IN_SECTOR + SECTOR_OFFSET,
      303     5567    4                     I,BUFFER,
      304     5568    4                     CUR_IN_SIDE + SIDE_OFFSET)
      305     5569    4                               ALTRET(MOVE_TROUBLE);
      306     5570    4                  CASE(2);                 /* Output to a FID                    */

      307     5571    4                    CALL KPU$PUTVSEC (

   5571  2 000632   201421 236100                    LDQ     CUR_IN_TRACK,,AUTO
         2 000633   200013 036100                    ADLQ    TRACK_OFFSET,,AUTO
         2 000634   201434 756100                    STQ     MOVE_ERRORS+1,,AUTO
         2 000635   201422 236100                    LDQ     CUR_IN_SECTOR,,AUTO
         2 000636   200012 036100                    ADLQ    SECTOR_OFFSET,,AUTO
         2 000637   201435 756100                    STQ     MOVE_ERRORS+2,,AUTO
         2 000640   201423 236100                    LDQ     CUR_IN_SIDE,,AUTO
         2 000641   200014 036100                    ADLQ    SIDE_OFFSET,,AUTO
         2 000642   201434 235100                    LDA     MOVE_ERRORS+1,,AUTO
         2 000643   201436 755100                    STA     MOVE_ERRORS+3,,AUTO
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:49   
         2 000644   201435 235100                    LDA     MOVE_ERRORS+2,,AUTO
         2 000645   201437 755100                    STA     MOVE_ERRORS+4,,AUTO
         2 000646   201440 756100                    STQ     MOVE_ERRORS+5,,AUTO
         2 000647   201440 630500                    EPPR0   MOVE_ERRORS+5,,AUTO
         2 000650   201445 450500                    STP0    MOVE_ERRORS+10,,AUTO
         2 000651   201425 631500                    EPPR1   CHUNK_SIZE,,AUTO
         2 000652   201444 451500                    STP1    MOVE_ERRORS+9,,AUTO
         2 000653   200415 633500                    EPPR3   BUFFER,,AUTO
         2 000654   201443 453500                    STP3    MOVE_ERRORS+8,,AUTO
         2 000655   201437 634500                    EPPR4   MOVE_ERRORS+4,,AUTO
         2 000656   201442 454500                    STP4    MOVE_ERRORS+7,,AUTO
         2 000657   201436 635500                    EPPR5   MOVE_ERRORS+3,,AUTO
         2 000660   201441 455500                    STP5    MOVE_ERRORS+6,,AUTO
         2 000661   201441 630500                    EPPR0   MOVE_ERRORS+6,,AUTO
         2 000662   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000663   000000 701000 xent               TSX1    KPU$PUTVSEC
         2 000664   000666 702000 2                  TSX2    MOVE_TROUBLE

      308     5572    4                     CUR_IN_TRACK + TRACK_OFFSET,
      309     5573    4                     CUR_IN_SECTOR + SECTOR_OFFSET,
      310     5574    4                     BUFFER,CHUNK_SIZE,
      311     5575    4                     CUR_IN_SIDE + SIDE_OFFSET)
      312     5576    4                               ALTRET(MOVE_TROUBLE);
      313     5577    4                  END;                     /* END CASE                           */

      314     5578    4               DO WHILE ('0'B);

   5578  2 000665   000670 710000 2                  TRA     s:5581

      315     5579    4   MOVE_TROUBLE: MOVE_ERRORS = '1'B;

   5579  2 000666   400000 236003       MOVE_TROUBLE LDQ     -131072,DU
         2 000667   201433 756100                    STQ     MOVE_ERRORS,,AUTO

      316     5580    4                  END;

      317     5581    3               END;                        /* END INDEXING CUR_IN_SECTOR            */
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:50   

   5581  2 000670   201427 236100                    LDQ     SECTORS_IN_CHUNK,,AUTO
         2 000671   201422 036100                    ADLQ    CUR_IN_SECTOR,,AUTO
         2 000672   201422 756100                    STQ     CUR_IN_SECTOR,,AUTO
         2 000673   201422 236100                    LDQ     CUR_IN_SECTOR,,AUTO
         2 000674   000677 604000 2                  TMI     s:5582
         2 000675   000003 116000 xsym               CMPQ    IN_OPTS+3
         2 000676   000473 604400 2                  TMOZ    s:5539

      318     5582    2            IF MOVE_ERRORS

   5582  2 000677   201433 234100                    SZN     MOVE_ERRORS,,AUTO
         2 000700   000703 605000 2                  TPL     s:5586

      319     5583    2             THEN
      320     5584    2               ALTRETURN;

   5584  2 000701   201432 221300                    LDX1  ! MAX_SECTORS_IN_CHUNK+2,,AUTO
         2 000702   000000 702211                    TSX2  ! 0,X1

      321     5585    2            ELSE
      322     5586    2               RETURN;

   5586  2 000703   201432 221300                    LDX1  ! MAX_SECTORS_IN_CHUNK+2,,AUTO
         2 000704   000001 702211                    TSX2  ! 1,X1
      323     5587    2   END MOVE_TRACK;
      324     5588        /**/
      325     5589    1         END KPS$SLURP;

PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:51   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPS$SLURP.
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:52   

 **** Variables and constants ****

  ****  Section 001  Data  KPS$SLURP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w PTR         r     1 INPUT_SPEC$                0-0-0/w PTR         r     1 OUTPUT_SPEC$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @OUT$                   1426-0-0/w SBIN        r     1 ANNOUNCE_TRACK
   415-0-0/c CHAR(2048)  r     1 BUFFER                  1425-0-0/w SBIN        r     1 CHUNK_SIZE
  1422-0-0/w UBIN        r     1 CUR_IN_SECTOR           1423-0-0/w UBIN        r     1 CUR_IN_SIDE
  1421-0-0/w UBIN        r     1 CUR_IN_TRACK              10-0-0/w UBIN        r     1 DEST_DRIVE
     7-0-0/w UBIN        r     1 DEST_FEP                  11-0-0/w SBIN        r     1 DEST_TYPE
  1424-0-0/w UBIN        r     1 I                       1430-0-0/w SBIN        r     1 MAX_SECTORS_IN_CHUNK
  1433-0-0/b BIT         r     1 MOVE_ERRORS               *0-0-0/w PTR         r     1 OUT$
  1415-0-0/w UBIN        r     1 PART                    1416-0-0/w PTR         r     1 PART$
  1427-0-0/w SBIN        r     1 SECTORS_IN_CHUNK          12-0-0/w SBIN        r     1 SECTOR_OFFSET
    14-0-0/w SBIN        r     1 SIDE_OFFSET                5-0-0/w UBIN        r     1 SOURCE_DRIVE
     4-0-0/w UBIN        r     1 SOURCE_FEP                 6-0-0/w SBIN        r     1 SOURCE_TYPE
    13-0-0/w SBIN        r     1 TRACK_OFFSET

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 GRIPE_INHIBIT              0-0-0/w STRC(468)   r     1 IN_DEFAULTS
     0-0-0/w STRC(468)   r     1 IN_OPTS                    0-0-0/c CHAR(50)    r     1 KP_FILE_NAME
     0-0-0/w SBIN        r     1 KP_OUTPUT_DISP             0-0-0/w STRC(468)   r     1 OUT_DEFAULTS
     0-0-0/w STRC(468)   r     1 OUT_OPTS

PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:53   
  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w ASTR(153)   r     1 OUT$SYM


   Procedure KPS$SLURP requires 453 words for executable code.
   Procedure KPS$SLURP requires 808 words of local(AUTO) storage.

    No errors detected in file KPS$SLURP.:E05TSI    .
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:54   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:55   
          MINI XREF LISTING

ANNOUNCE_TRACK
      5321**DCL      5407<<ASSIGN   5408<<ASSIGN   5408>>ASSIGN   5478>>IF
BAD_FEP_OR_DRIVE
      5499**LABEL    5431--CALLALT  5455--CALLALT
BUFFER
      5311**DCL      5550<>CALL     5554<>CALL     5564<>CALL     5571<>CALL
CANT_OPEN
      5499**LABEL    5434--CALLALT  5443--CALLALT  5454--CALLALT  5458--CALLALT  5467--CALLALT
CHUNK_SIZE
      5320**DCL      5541<<ASSIGN   5543<<ASSIGN   5549>>ASSIGN   5554<>CALL     5563>>ASSIGN   5571<>CALL
CUR_IN_SECTOR
      5317**DCL      5535<<DOINDEX  5539>>IF       5541>>ASSIGN   5550<>CALL     5554<>CALL     5564>>CALL
      5571>>CALL
CUR_IN_SIDE
      5318**DCL      5485<<DOINDEX  5550<>CALL     5554<>CALL     5564>>CALL     5571>>CALL
CUR_IN_TRACK
      5316**DCL      5477<<DOINDEX  5478>>IF       5550<>CALL     5554<>CALL     5564>>CALL     5571>>CALL
DEST_DRIVE
      5304**DCL      5455<>CALL     5458<>CALL     5520<>CALL     5564<>CALL
DEST_FEP
      5303**DCL      5455<>CALL     5458<>CALL     5520<>CALL     5564<>CALL
DEST_TYPE
      5305**DCL      5450<<ASSIGN   5459<<ASSIGN   5468<<ASSIGN   5518>>DOCASE   5561>>DOCASE
GRIPE_INHIBIT
      3969**DCL      5475<<ASSIGN   5475>>ASSIGN   5491<<ASSIGN   5491>>ASSIGN   5494<<ASSIGN   5494>>ASSIGN
      5499<<ASSIGN   5499>>ASSIGN
I
      5319**DCL      5549<<ASSIGN   5550<>CALL     5563<<ASSIGN   5564<>CALL
INPUT_SPEC$
      5328**DCL      5347<<ASSIGN   5428>>IF       5431>>CALL     5439>>ASSIGN   5439>>ASSIGN   5439>>ASSIGN
IN_CLOSED
      5508**LABEL    5510--CALLALT  5512--CALLALT
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:56   
IN_DEFAULTS
      4059**DCL      5335>>ASSIGN
IN_OPTS
      4125**DCL      5335<<ASSIGN   5371<>CALL
IN_OPTS.ANNOUNCE_LIMIT
      4132**DCL      5396>>IF       5407>>ASSIGN   5478>>IF       5483<<ASSIGN
IN_OPTS.SECTOR_HI
      4129**DCL      5396>>IF       5535>>DOINDEX  5539>>IF       5541>>ASSIGN
IN_OPTS.SECTOR_LO
      4128**DCL      5386>>ASSIGN   5396>>IF       5410>>ASSIGN   5535>>DOINDEX
IN_OPTS.SECTOR_SIZE
      4134**DCL      5412>>ASSIGN
IN_OPTS.SIDE_HI
      4131**DCL      5485>>DOINDEX
IN_OPTS.SIDE_LO
      4130**DCL      5392>>ASSIGN   5411>>ASSIGN   5485>>DOINDEX
IN_OPTS.TRACK_HI
      4127**DCL      5396>>IF       5407>>ASSIGN   5477>>DOINDEX
IN_OPTS.TRACK_LO
      4126**DCL      5389>>ASSIGN   5396>>IF       5407>>ASSIGN   5408>>ASSIGN   5409>>ASSIGN   5477>>DOINDEX
IN_OPTS.USER_WAIT
      4133**DCL      5417>>IF
ITS_OK
      5491**LABEL    5492--CALLALT
KPE$ERROR
      5126**DCL-ENT  5401--CALL
KPI$IO_SVC
      5138**DCL-ENT  5421--CALL     5443--CALL     5467--CALL     5512--CALL     5522--CALL
KPT$TERM_MSG
      5150**DCL-ENT  5420--CALL     5474--CALL     5482--CALL     5500--CALL
KPU$FEP_AND_DRIVE
      5156**DCL-ENT  5431--CALL     5455--CALL
KPU$GETVSEC
      5159**DCL-ENT  5554--CALL
KPU$OPTIONS
      5163**DCL-ENT  5371--CALL     5376--CALL
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:57   
KPU$PUTVSEC
      5160**DCL-ENT  5571--CALL
KPU$SECURITY
      5206**DCL-ENT  5454--CALL
KPX$CLOSE
      5172**DCL-ENT  5510--CALL     5520--CALL
KPX$GETSEC
      5175**DCL-ENT  5550--CALL
KPX$OPEN
      5178**DCL-ENT  5434--CALL     5458--CALL
KPX$PUTSEC
      5185**DCL-ENT  5564--CALL
KP_EXIT.V.STEPCC#
      4041**DCL      4041--REDEF
KP_FILE_NAME
      3970**DCL      5439<<ASSIGN   5463<<ASSIGN
KP_INBUF
      3963**DCL      3963--REDEF
KP_OUTPUT_DISP
      3974**DCL      5355<<ASSIGN   5357<<ASSIGN   5359<<ASSIGN
KP_RU_KEY
      3971**DCL      3972--REDEF
KP_RU_KEY.NODE
      3971**DCL      3971--REDEF
KP_RU_KEY.PAGE
      3972**DCL      3972--REDEF
KP_RU_OUTBUF
      3965**DCL      3965--REDEF
MAX_SECTORS_IN_CHUNK
      5323**DCL      5412<<ASSIGN   5486>>ASSIGN
MOVE_ERRORS IN PROCEDURE MOVE_TRACK
      5532**DCL      5534<<ASSIGN   5579<<ASSIGN   5582>>IF
MOVE_TRACK
      5530**PROC     5487--CALL     5492--CALL
MOVE_TROUBLE IN PROCEDURE MOVE_TRACK
      5579**LABEL    5550--CALLALT  5554--CALLALT  5564--CALLALT  5571--CALLALT
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:58   
OUT$
      5098**DCL         8--PROC     5340>>DOINDEX  5341>>ASSIGN
OUT$BLK
      5220**DCL      5431<>CALL     5455<>CALL
OUT$BLK.CODE
      5228**DCL      5342>>DOCASE   5353>>DOCASE   5428>>IF       5451>>IF
OUT$BLK.NSUBLKS
      5232**DCL      5340>>DOINDEX
OUT$BLK.SUBLK$
      5253**DCL      5341>>ASSIGN   5353>>DOCASE   5428>>IF       5439>>ASSIGN   5439>>ASSIGN   5439>>ASSIGN
      5451>>IF       5463>>ASSIGN   5463>>ASSIGN   5463>>ASSIGN
OUT$SYM.COUNT
      5289**DCL      5292--IMP-SIZ  5439>>ASSIGN   5439>>ASSIGN   5463>>ASSIGN   5463>>ASSIGN
OUT$SYM.TEXT
      5292**DCL      5439>>ASSIGN   5463>>ASSIGN
OUTPUT_SPEC$
      5327**DCL      5365<<ASSIGN   5451>>IF       5455>>CALL     5463>>ASSIGN   5463>>ASSIGN   5463>>ASSIGN
OUT_CLOSED
      5518**LABEL    5520--CALLALT  5522--CALLALT
OUT_DEFAULTS
      4092**DCL      5336>>ASSIGN
OUT_OPTS
      4158**DCL      5336<<ASSIGN   5376<>CALL
OUT_OPTS.SECTOR_LO
      4161**DCL      5384>>IF       5386<<ASSIGN   5410>>ASSIGN
OUT_OPTS.SIDE_LO
      4163**DCL      5390>>IF       5392<<ASSIGN   5411>>ASSIGN
OUT_OPTS.TRACK_LO
      4159**DCL      5387>>IF       5389<<ASSIGN   5409>>ASSIGN
PART
      5312**DCL      5340<<DOINDEX  5341>>ASSIGN
PART$
      5313**DCL      5341<<ASSIGN   5342>>DOCASE   5347>>ASSIGN   5353>>DOCASE   5365>>ASSIGN   5371<>CALL
      5376<>CALL
QUITIT
      5499**LABEL    5371--CALLALT  5376--CALLALT  5402--GOTO
PL6.E3A0      #001=KPS$SLURP File=KPS$SLURP.:E05TSI                              WED 07/30/97 01:21 Page:59   
SECTORS_IN_CHUNK
      5322**DCL      5486<<ASSIGN   5490<<ASSIGN   5535>>DOINDEX  5539>>IF       5543>>ASSIGN
SECTOR_OFFSET
      5306**DCL      5410<<ASSIGN   5564>>CALL     5571>>CALL
SIDE_OFFSET
      5308**DCL      5411<<ASSIGN   5564>>CALL     5571>>CALL
SOURCE_DRIVE
      5301**DCL      5431<>CALL     5434<>CALL     5510<>CALL     5550<>CALL
SOURCE_FEP
      5300**DCL      5431<>CALL     5434<>CALL     5510<>CALL     5550<>CALL
SOURCE_TYPE
      5302**DCL      5427<<ASSIGN   5435<<ASSIGN   5444<<ASSIGN   5508>>DOCASE   5547>>DOCASE
TRACK_OFFSET
      5307**DCL      5409<<ASSIGN   5564>>CALL     5571>>CALL
TRACK_TROUBLE
      5487**LABEL    5487--CALLALT
