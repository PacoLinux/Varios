VERSION E05

PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:1    
        1        1        /*M*  KPB$BREAK - MULE Break Control Procedure                  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        KPB$BREAK: PROC      ASYNC;
        8        8        /**/
        9        9        /* Include files */
       10       10        /**/
       11       11            %INCLUDE KP_DATA_R;
       12     1263        /**/
       13     1264        /* Entry declarations */
       14     1265        /**/
       15     1266    1   DCL KPE$ERR_SPLIT ENTRY(1);
       16     1267    1   DCL KPE$ERR_TEXT ENTRY ALTRET;
       17     1268    1   DCL KPI$IO_SVC ENTRY(1) ALTRET;
       18     1269        /**/
       19     1270        /* Local STATIC */
       20     1271        /**/
       21     1272    1   DCL ALL_READY_HERE BIT(1) STATIC INIT('0'B);
       22     1273        /**/
       23     1274        /*  LOCAL AUTO  */
       24     1275        /**/
       25     1276    1   DCL GRIPE_STASH SBIN WORD;
       26     1277        /**/
       27     1278        /*  CONSTANTS  */
       28     1279        /**/
       29     1280    1   DCL BRK_MES CONSTANT CHAR(0) INIT('>BREAK<');
       30     1281        /**/
       31     1282        /* Fpt */
       32     1283        /**/
       33     1284            %FPT_TRMPRG (DCB = M$UC,
       34     1285                         RSTBRK = YES);
       35     1314        %EJECT;
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:2    
       36     1315        /**/
       37     1316        /* Code starts here */
       38     1317        /**/
       39     1318                                                /* Clear the break count in the fep   */
       40     1319    1           CALL M$TRMPRG (FPT_TRMPRG);
       41     1320                                      /* Check to see if this routine is active now   */
       42     1321    2             DO INHIBIT;
       43     1322    2                  IF ALL_READY_HERE
       44     1323    2                    THEN                   /* Already active, so return          */
       45     1324    2                       RETURN;
       46     1325    2                    ELSE                   /* Not active, post it so             */
       47     1326    2                       ALL_READY_HERE = '1'B;
       48     1327    2             END;
       49     1328        /**/
       50     1329    1           IF KP_STILL_OK
       51     1330    2             THEN DO;
       52     1331                                                /* Tell him where he is               */
       53     1332    2                  GRIPE_STASH = GRIPE_INHIBIT;
       54     1333    2                  GRIPE_INHIBIT = 0;
       55     1334    2                  KP_OUTBUF = BRK_MES;
       56     1335    2                  CALL KPE$ERR_TEXT;       /* Print break message                */
       57     1336    2                  CALL KPE$ERR_SPLIT (0);
       58     1337    2                  GRIPE_INHIBIT = GRIPE_STASH; /* Restore griping level          */
       59     1338    2                 END;
       60     1339                                                /* Post this routine as not active    */
       61     1340    2             DO INHIBIT;
       62     1341    2                  ALL_READY_HERE = '0'B;
       63     1342    2                  RETURN;
       64     1343    2             END;
       65     1344        /**/
       66     1345        /* Eof on the si device */
       67     1346        /**/
       68     1347    1   END_IT:
       69     1348    2             DO INHIBIT;
       70     1349                                      /* Reset the ok flag and return (wrap up there) */
       71     1350    2                  KP_STILL_OK = '0'B;
       72     1351                                                /* Post this routine as not active    */
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:3    
       73     1352    2                  ALL_READY_HERE = '0'B;
       74     1353    2                  RETURN;
       75     1354    2             END;
       76     1355    1   END KPB$BREAK;

PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:4    
--  Include file information  --

   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPB$BREAK.

   Procedure KPB$BREAK requires 33 words for executable code.
   Procedure KPB$BREAK requires 4 words of local(AUTO) storage.

    No errors detected in file KPB$BREAK.:E05TSI    .

PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:5    

 Object Unit name= KPB$BREAK                                  File name= KPB$BREAK.:E05TOU
 UTS= JUL 30 '97 01:16:36.36 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    10     12  KPB$BREAK
    2  RoData even  UTS      2      2  KPB$BREAK
    3   Proc  even  none    33     41  KPB$BREAK
    4  RoData even  none     1      1  KPB$BREAK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes     Async       0  KPB$BREAK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 KPE$ERR_SPLIT
 yes     yes           Std       0 KPE$ERR_TEXT
                       nStd      0 X66_AAUTO
                       nStd      0 X66_AARET
                       Std       0 B_CONSPOOL_D
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:6    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_OUTBUF
     KP_RU_OUTBUF                          KP_STILL_OK                           GRIPE_INHIBIT
     KP_RU_KEY                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:7    


        1        1        /*M*  KPB$BREAK - MULE Break Control Procedure                  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        KPB$BREAK: PROC      ASYNC;

      7  3 000000   000000 700200 xent  KPB$BREAK    TSX0  ! X66_AAUTO
         3 000001   000004 000000                    ZERO    4,0

        8        8        /**/
        9        9        /* Include files */
       10       10        /**/
       11       11            %INCLUDE KP_DATA_R;
       12     1263        /**/
       13     1264        /* Entry declarations */
       14     1265        /**/
       15     1266    1   DCL KPE$ERR_SPLIT ENTRY(1);
       16     1267    1   DCL KPE$ERR_TEXT ENTRY ALTRET;
       17     1268    1   DCL KPI$IO_SVC ENTRY(1) ALTRET;
       18     1269        /**/
       19     1270        /* Local STATIC */
       20     1271        /**/
       21     1272    1   DCL ALL_READY_HERE BIT(1) STATIC INIT('0'B);
       22     1273        /**/
       23     1274        /*  LOCAL AUTO  */
       24     1275        /**/
       25     1276    1   DCL GRIPE_STASH SBIN WORD;
       26     1277        /**/
       27     1278        /*  CONSTANTS  */
       28     1279        /**/
       29     1280    1   DCL BRK_MES CONSTANT CHAR(0) INIT('>BREAK<');
       30     1281        /**/
       31     1282        /* Fpt */
       32     1283        /**/
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:8    
       33     1284            %FPT_TRMPRG (DCB = M$UC,
       34     1285                         RSTBRK = YES);
       35     1314        %EJECT;
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:9    
       36     1315        /**/
       37     1316        /* Code starts here */
       38     1317        /**/
       39     1318                                                /* Clear the break count in the fep   */
       40     1319    1           CALL M$TRMPRG (FPT_TRMPRG);

   1319  3 000002   000002 630400 1                  EPPR0   FPT_TRMPRG
         3 000003   160004 713400                    CLIMB   57348
         3 000004   400400 401760                    pmme    nvectors=2

       41     1320                                      /* Check to see if this routine is active now   */
       42     1321    2             DO INHIBIT;

       43     1322    2                  IF ALL_READY_HERE

   1322  3 000005   000000 234200 1                  SZN   ! ALL_READY_HERE
         3 000006   000010 605200 3                  TPL   ! s:1326

       44     1323    2                    THEN                   /* Already active, so return          */
       45     1324    2                       RETURN;

   1324  3 000007   000000 702200 xent               TSX2  ! X66_AARET

       46     1325    2                    ELSE                   /* Not active, post it so             */
       47     1326    2                       ALL_READY_HERE = '1'B;

   1326  3 000010   400000 236203                    LDQ   ! -131072,DU
         3 000011   000000 756200 1                  STQ   ! ALL_READY_HERE

       48     1327    2             END;

       49     1328        /**/
       50     1329    1           IF KP_STILL_OK

   1329  3 000012   000000 234000 xsym               SZN     KP_STILL_OK
         3 000013   000033 605000 3                  TPL     s:1341

PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:10   
       51     1330    2             THEN DO;

       52     1331                                                /* Tell him where he is               */
       53     1332    2                  GRIPE_STASH = GRIPE_INHIBIT;

   1332  3 000014   000000 235000 xsym               LDA     GRIPE_INHIBIT
         3 000015   200003 755100                    STA     GRIPE_STASH,,AUTO

       54     1333    2                  GRIPE_INHIBIT = 0;

   1333  3 000016   000000 450000 xsym               STZ     GRIPE_INHIBIT

       55     1334    2                  KP_OUTBUF = BRK_MES;

   1334  3 000017   040000 100400                    MLR     fill='040'O
         3 000020   000000 000007 2                  ADSC9   BRK_MES                  cn=0,n=7
         3 000021   000000 000170 xsym               ADSC9   KP_OUTBUF                cn=0,n=120

       56     1335    2                  CALL KPE$ERR_TEXT;       /* Print break message                */

   1335  3 000022   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000023   000000 701000 xent               TSX1    KPE$ERR_TEXT
         3 000024   000000 011000                    NOP     0

       57     1336    2                  CALL KPE$ERR_SPLIT (0);

   1336  3 000025   000000 630400 4                  EPPR0   0
         3 000026   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000027   000000 701000 xent               TSX1    KPE$ERR_SPLIT
         3 000030   000000 011000                    NOP     0

       58     1337    2                  GRIPE_INHIBIT = GRIPE_STASH; /* Restore griping level          */

   1337  3 000031   200003 235100                    LDA     GRIPE_STASH,,AUTO
         3 000032   000000 755000 xsym               STA     GRIPE_INHIBIT

       59     1338    2                 END;
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:11   

       60     1339                                                /* Post this routine as not active    */
       61     1340    2             DO INHIBIT;

       62     1341    2                  ALL_READY_HERE = '0'B;

   1341  3 000033   000000 450200 1                  STZ   ! ALL_READY_HERE

       63     1342    2                  RETURN;

   1342  3 000034   000000 702200 xent               TSX2  ! X66_AARET

       64     1343    2             END;

       65     1344        /**/
       66     1345        /* Eof on the si device */
       67     1346        /**/
       68     1347    1   END_IT:
       69     1348    2             DO INHIBIT;

   1348  3 000035                       END_IT       null
       70     1349                                      /* Reset the ok flag and return (wrap up there) */
       71     1350    2                  KP_STILL_OK = '0'B;

   1350  3 000035   000000 450200 xsym               STZ   ! KP_STILL_OK

       72     1351                                                /* Post this routine as not active    */
       73     1352    2                  ALL_READY_HERE = '0'B;

   1352  3 000036   000000 450200 1                  STZ   ! ALL_READY_HERE

       74     1353    2                  RETURN;

   1353  3 000037   000000 702200 xent               TSX2  ! X66_AARET

       75     1354    2             END;

PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:12   
       76     1355    1   END KPB$BREAK;

   1355  3 000040   000000 702200 xent               TSX2  ! X66_AARET

PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:13   
--  Include file information  --

   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPB$BREAK.
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:14   

 **** Variables and constants ****

  ****  Section 001  Data  KPB$BREAK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 ALL_READY_HERE             2-0-0/d STRC(288)   r     1 FPT_TRMPRG

  ****  Section 002 RoData KPB$BREAK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(7)     r     1 BRK_MES

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w SBIN        r     1 GRIPE_STASH

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 GRIPE_INHIBIT              0-0-0/c CHAR(120)   r     1 KP_OUTBUF
     0-0-0/b BIT         r     1 KP_STILL_OK

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$UC
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:15   


   Procedure KPB$BREAK requires 33 words for executable code.
   Procedure KPB$BREAK requires 4 words of local(AUTO) storage.

    No errors detected in file KPB$BREAK.:E05TSI    .
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:16   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:17   
          MINI XREF LISTING

ALL_READY_HERE
      1272**DCL      1322>>IF       1326<<ASSIGN   1341<<ASSIGN   1352<<ASSIGN
BRK_MES
      1280**DCL      1334>>ASSIGN
FPT_TRMPRG
      1301**DCL      1319<>CALL
FPT_TRMPRG.V
      1308**DCL      1303--DCLINIT
FPT_TRMPRG.V.CTLFLG.RSTBRK#
      1309**DCL      1310--REDEF
GRIPE_INHIBIT
       862**DCL      1332>>ASSIGN   1333<<ASSIGN   1337<<ASSIGN
GRIPE_STASH
      1276**DCL      1332<<ASSIGN   1337>>ASSIGN
KPE$ERR_SPLIT
      1266**DCL-ENT  1336--CALL
KPE$ERR_TEXT
      1267**DCL-ENT  1335--CALL
KP_EXIT.V.STEPCC#
       934**DCL       934--REDEF
KP_INBUF
       856**DCL       856--REDEF
KP_OUTBUF
       857**DCL      1334<<ASSIGN
KP_RU_KEY
       864**DCL       865--REDEF
KP_RU_KEY.NODE
       864**DCL       864--REDEF
KP_RU_KEY.PAGE
       865**DCL       865--REDEF
KP_RU_OUTBUF
       858**DCL       858--REDEF
PL6.E3A0      #001=KPB$BREAK File=KPB$BREAK.:E05TSI                              WED 07/30/97 01:16 Page:18   
KP_STILL_OK
       861**DCL      1329>>IF       1350<<ASSIGN
M$TRMPRG
       647**DCL-ENT  1319--CALL
