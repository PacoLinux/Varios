VERSION E05

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:1    
        1        1        /*M* TOL$LOADER    TOLTS LOADER program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             PRB=Y,CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        TOL$CHECK_CALL_SEQUENCE: PROC (KEY_VALUE,
       12       12                   LOAD_OFFSET,
       13       13                   CALL_SEQUENCE,
       14       14                   MAX_LOAD,
       15       15                   LOAD_SIZE,
       16       16                   ERROR_CODE,
       17       17                   EDIT_NAME,
       18       18                   DECK_TYPE,
       19       19                   CHECK_STATUS$,
       20       20                   CHECK_DCW,
       21       21                   CHECK_DATA_SIZE) ALTRET;
       22       22
       23       23        /* Include Files */
       24       24
       25       25           %INCLUDE B_ERRORS_C;
       26     1152           %INCLUDE CP_6;
       27     6711           %INCLUDE CP_6_SUBS;
       28     7251           %INCLUDE TOT_TOLTS_M ;
       29     8369
       30     8370        /* Data Control Blocks */
       31     8371
       32     8372    1      DCL M$DECKFILE DCB ;
       33     8373           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:2    
       34     8374        /* Parameters */
       35     8375
       36     8376    1      DCL 1 CALL_SEQUENCE ALIGNED,
       37     8377    1            2 FDCWP UBIN (18) UNAL,
       38     8378    1            2 STATUSP UBIN (18) UNAL,
       39     8379    1            2 CATALOG# UBIN (18) UNAL,
       40     8380    1            2 NEXT_ENTRY UBIN (18) UNAL,
       41     8381    1            2 CATALOG_CKSUM ALIGNED,
       42     8382    1              3 UPPER UBIN (18) UNAL,
       43     8383    1              3 LOWER UBIN (18) UNAL,
       44     8384    1            2 CATALOG_CHECKSUM REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       45     8385    1            2 DECK_OFFSET REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       46     8386    1            2 DECK# UBIN (18) UNAL,
       47     8387    1            2 ENTRY_COUNT UBIN (18) UNAL,
       48     8388    1            2 CARD_COUNT REDEF ENTRY_COUNT UBIN (18) UNAL,
       49     8389    1            2 CHECKSUM UBIN (36) ALIGNED,
       50     8390    1            2 RELOCATION UBIN (36) ALIGNED,
       51     8391    1            2 NO_MORE SBIN (36) ALIGNED;
       52     8392    1      DCL 1 CALL_SEQUENCE_MORE REDEF CALL_SEQUENCE ALIGNED,
       53     8393    1            2 * UBIN (36) ALIGNED,
       54     8394    1            2 * UBIN (18) UNAL,
       55     8395    1            2 MORE UNAL,
       56     8396    1              3 * UBIN (18) UNAL,
       57     8397    1              3 DATA (0:4) UBIN (36) UNAL;
       58     8398    1      DCL CHECK_DATA_SIZE UBIN (36) ALIGNED;
       59     8399    1      DCL 1 CHECK_DCW ALIGNED,
       60     8400    1            2 ADDRESS UBIN (18) UNAL,
       61     8401    1            2 TYPE UBIN (6) UNAL,
       62     8402    1            2 SIZE UBIN (12) UNAL;
       63     8403    1      DCL CHECK_STATUS$ PTR ALIGNED;
       64     8404    1      DCL DECK_TYPE CHAR (1) UNAL;
       65     8405           %EJECT ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:3    
       66     8406    1      DCL 1 ERROR_CODE ALIGNED,
       67     8407    1            2 LOC UBIN (18) UNAL,
       68     8408    1            2 ERR UBIN (18) UNAL;
       69     8409    1      DCL 1 KEY_VALUE ALIGNED,
       70     8410    1            2 SIZE UBIN (9) UNAL,
       71     8411    1            2 DATA CHAR (23) UNAL;
       72     8412    1      DCL LOAD_SIZE UBIN (36) ALIGNED;
       73     8413    1      DCL MAX_LOAD UBIN (18) ALIGNED;
       74     8414    1      DCL LOAD_OFFSET UBIN (18) HALIGNED;
       75     8415
       76     8416        /* Macros */
       77     8417
       78     8418           %B$EXCFR;
       79     8436           %F$DCB;
       80     8493           %B$TCB;
       81     8496           %IS$ (STCLASS = CONSTANT) ;
       82     8510           %TOM$SEG (STCLASS = BASED) ;
       83     8531           %EJECT ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:4    
       84     8532        /* Function Parameter Tables */
       85     8533
       86     8534           %FPT_OPEN (FPTN = OLD_DECKFILE,
       87     8535                      ACS = DIRECT,
       88     8536                      ASN = FILE,
       89     8537                      DCB = M$DECKFILE,
       90     8538                      FUN = IN,
       91     8539                      ORG = KEYED,
       92     8540                      SHARE = IN);
       93     8649
       94     8650           %FPT_READ (FPTN = READ_BINARY_DECK,
       95     8651                      DCB = M$DECKFILE,
       96     8652                      KEY = DECK_KEY,
       97     8653                      KEYS = YES,
       98     8654                      WAIT = YES);
       99     8693
      100     8694           %FPT_READ (FPTN = READ_CATALOG_DATA,
      101     8695                      BUF = CATALOG_DATA,
      102     8696                      DCB = M$DECKFILE,
      103     8697                      KEY = CATALOG_KEY,
      104     8698                      KEYS = YES,
      105     8699                      WAIT = YES);
      106     8738
      107     8739           %FPT_READ (FPTN = READ_CATALOG_ENTRY,
      108     8740                      BUF = OBJECT_KEY,
      109     8741                      DCB = M$DECKFILE,
      110     8742                      KEY = CATALOG_ENTRY_KEY,
      111     8743                      KEYS = YES,
      112     8744                      WAIT = YES);
      113     8783           %EJECT ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:5    
      114     8784           %FPT_READ (FPTN = READ_DKEND_CARD,
      115     8785                      BUF = DKEND_CARD,
      116     8786                      DCB = M$DECKFILE,
      117     8787                      KEY = PATCH_KEY,
      118     8788                      KEYS = YES,
      119     8789                      WAIT = YES);
      120     8828
      121     8829           %FPT_READ (FPTN = READ_OBJECT_CARD,
      122     8830                      BUF = OBJECT,
      123     8831                      DCB = M$DECKFILE,
      124     8832                      KEY = OBJECT_KEY,
      125     8833                      KEYS = YES,
      126     8834                      WAIT = YES);
      127     8873
      128     8874           %FPT_READ (FPTN = READ_PATCH_CARD,
      129     8875                      BUF = PATCH_CARD,
      130     8876                      DCB = M$DECKFILE,
      131     8877                      KEY = PATCH_KEY,
      132     8878                      KEYS = YES,
      133     8879                      WAIT = YES);
      134     8918           %EJECT ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:6    
      135     8919        /* External Variables */
      136     8920
      137     8921    1      DCL B$TCB$ SYMREF PTR ALIGNED;
      138     8922    1      DCL TOL$BUFFER$ SYMREF PTR ALIGNED;
      139     8923    1      DCL BUFFER$ REDEF TOL$BUFFER$ PTR ALIGNED;
      140     8924    1      DCL TOL$CARD_SEQ STATIC SYMDEF UBIN (36) ALIGNED;
      141     8925    1      DCL CARD_SEQ REDEF TOL$CARD_SEQ UBIN (36) ALIGNED;
      142     8926    1      DCL TOL$DECKFILE_ARS# STATIC SYMDEF UBIN (36) ALIGNED;
      143     8927    1      DCL DECKFILE_ARS# REDEF TOL$DECKFILE_ARS# UBIN (36) ALIGNED;
      144     8928    1      DCL TOL$I STATIC SYMDEF UBIN (36) ALIGNED;
      145     8929    1      DCL I REDEF TOL$I UBIN (36) ALIGNED;
      146     8930    1      DCL TOL$IONTP_FOUND STATIC SYMDEF UBIN (36) ALIGNED;
      147     8931    1      DCL IONTP_FOUND REDEF TOL$IONTP_FOUND UBIN (36) ALIGNED;
      148     8932    1      DCL TOL$J STATIC SYMDEF UBIN (36) ALIGNED;
      149     8933    1      DCL J REDEF TOL$J UBIN (36) ALIGNED;
      150     8934    1      DCL TOL$K STATIC SYMDEF UBIN (36) ALIGNED;
      151     8935    1      DCL K REDEF TOL$K UBIN (36) ALIGNED;
      152     8936    1      DCL TOL$SPAN_LOWER STATIC SYMDEF UBIN (36) ALIGNED;
      153     8937    1      DCL SPAN_LOWER REDEF TOL$SPAN_LOWER UBIN (36) ALIGNED;
      154     8938    1      DCL TOL$SPAN_UPPER STATIC SYMDEF UBIN (36) ALIGNED;
      155     8939    1      DCL SPAN_UPPER REDEF TOL$SPAN_UPPER UBIN (36) ALIGNED;
      156     8940           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:7    
      157     8941        /* External Structures */
      158     8942
      159     8943    1      DCL TOL$BINARY$ STATIC SYMDEF PTR ALIGNED;
      160     8944    1      DCL BINARY$ REDEF TOL$BINARY$ PTR ALIGNED;
      161     8945    1      DCL 1 BINARYP REDEF TOL$BINARY$ ALIGNED,
      162     8946    1            2 ADDRESS UBIN (18) UNAL,
      163     8947    1            2 * BIT (18) UNAL;
      164     8948    1      DCL TOL$CALL_SEQ$ STATIC SYMDEF PTR ALIGNED;
      165     8949    1      DCL CALL_SEQ$ REDEF TOL$CALL_SEQ$ PTR ALIGNED;
      166     8950    1      DCL 1 CALL_SEQP REDEF TOL$CALL_SEQ$ ALIGNED,
      167     8951    1            2 ADDRESS UBIN (18) UNAL,
      168     8952    1            2 * BIT (18) UNAL;
      169     8953    1      DCL EDIT_NAME CHAR (4) ALIGNED ;
      170     8954    1      DCL 1 TOL$CATALOG_ENTRY_KEY STATIC SYMDEF UNAL,
      171     8955    1            2 SIZE UBIN (9) UNAL INIT (4),
      172     8956    1            2 DECK# UBIN (18) UNAL,
      173     8957    1            2 ENTRY# UBIN (18) UNAL;
      174     8958    1      DCL 1 CATALOG_ENTRY_KEY REDEF TOL$CATALOG_ENTRY_KEY UNAL,
      175     8959    1            2 SIZE UBIN (9) UNAL,
      176     8960    1            2 DECK# UBIN (18) UNAL,
      177     8961    1            2 ENTRY# UBIN (18) UNAL;
      178     8962    1      DCL 1 TOL$CATALOG_KEY STATIC SYMDEF ALIGNED,
      179     8963    1            2 SIZE UBIN (9) UNAL INIT (23),
      180     8964    1            2 DATA CHAR (23) UNAL,
      181     8965    1            2 SPLIT REDEF DATA UNAL,
      182     8966    1              3 DATA CHAR (21) UNAL,
      183     8967    1              3 CLEAR CHAR (2) UNAL,
      184     8968    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      185     8969    1      DCL 1 CATALOG_KEY REDEF TOL$CATALOG_KEY ALIGNED,
      186     8970    1            2 SIZE UBIN (9) UNAL,
      187     8971    1            2 DATA CHAR (23) UNAL,
      188     8972    1            2 SPLIT REDEF DATA UNAL,
      189     8973    1              3 DATA CHAR (21) UNAL,
      190     8974    1              3 CLEAR CHAR (2) UNAL,
      191     8975    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      192     8976    1      DCL 1 TOL$DKEND_CARD STATIC SYMDEF ALIGNED,
      193     8977    1            2 CONTROL CHAR (7) UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:8    
      194     8978    1            2 TYPE CHAR (8) UNAL,
      195     8979    1            2 * CHAR (51) UNAL,
      196     8980    1            2 REVISION CHAR (6) UNAL,
      197     8981    1            2 LBL CHAR (4) UNAL,
      198     8982    1            2 SEQ CHAR (4) UNAL,
      199     8983    1            2 CHECKSUM UBIN (36) ALIGNED;
      200     8984    1      DCL 1 DKEND_CARD REDEF TOL$DKEND_CARD ALIGNED,
      201     8985    1            2 CONTROL CHAR (7) UNAL,
      202     8986    1            2 TYPE CHAR (8) UNAL,
      203     8987    1            2 * CHAR (51) UNAL,
      204     8988    1            2 REVISION CHAR (6) UNAL,
      205     8989    1            2 LBL CHAR (4) UNAL,
      206     8990    1            2 SEQ CHAR (4) UNAL,
      207     8991    1            2 CHECKSUM UBIN (36) ALIGNED;
      208     8992    1      DCL DKEND_CARD_ REDEF TOL$DKEND_CARD CHAR (84) ALIGNED ;
      209     8993    1      DCL 1 TOL$OBJECT STATIC SYMDEF ALIGNED,
      210     8994    1            2 BCD ALIGNED,
      211     8995    1              3 CONTROL CHAR (7) UNAL,
      212     8996    1              3 TYPE CHAR (8) UNAL,
      213     8997    1              3 * CHAR (6) UNAL,
      214     8998    1              3 LOAD_TYPE CHAR (1) UNAL,
      215     8999    1              3 * CHAR (37) UNAL,
      216     9000    1              3 ASSEMBLER CHAR (1) UNAL,
      217     9001    1              3 * CHAR (12) UNAL,
      218     9002    1              3 LBL CHAR (4) ALIGNED,
      219     9003    1              3 SEQ CHAR (4) ALIGNED,
      220     9004    1            2 DECK# UBIN (18) UNAL,
      221     9005    1            2 BINARY_COUNT UBIN (18) UNAL,
      222     9006    1            2 TOTAL_COUNT UBIN (18) UNAL,
      223     9007    1            2 LOAD_SIZE UBIN (18) UNAL,
      224     9008    1            2 DECK_CHECKSUM UBIN (36) UNAL,
      225     9009    1            2 CHECKSUM UBIN (36) ALIGNED;
      226     9010    1      DCL 1 OBJECT REDEF TOL$OBJECT ALIGNED,
      227     9011    1            2 BCD ALIGNED,
      228     9012    1              3 CONTROL CHAR (7) UNAL,
      229     9013    1              3 TYPE CHAR (8) UNAL,
      230     9014    1              3 * CHAR (6) UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:9    
      231     9015    1              3 LOAD_TYPE CHAR (1) UNAL,
      232     9016    1              3 * CHAR (37) UNAL,
      233     9017    1              3 ASSEMBLER CHAR (1) UNAL,
      234     9018    1              3 * CHAR (12) UNAL,
      235     9019    1              3 LBL CHAR (4) ALIGNED,
      236     9020    1              3 SEQ CHAR (4) ALIGNED,
      237     9021    1            2 DECK# UBIN (18) UNAL,
      238     9022    1            2 BINARY_COUNT UBIN (18) UNAL,
      239     9023    1            2 TOTAL_COUNT UBIN (18) UNAL,
      240     9024    1            2 LOAD_SIZE UBIN (18) UNAL,
      241     9025    1            2 DECK_CHECKSUM UBIN (36) UNAL,
      242     9026    1            2 CHECKSUM UBIN (36) ALIGNED;
      243     9027    1      DCL OBJECT_ REDEF TOL$OBJECT CHAR (96) ALIGNED ;
      244     9028    1      DCL 1 TOL$OBJECT_KEY STATIC SYMDEF ALIGNED,
      245     9029    1            2 SIZE UBIN (9) UNAL INIT (23),
      246     9030    1            2 DATA CHAR (23) UNAL,
      247     9031    1            2 SPLIT REDEF DATA UNAL,
      248     9032    1              3 DATA CHAR (21) UNAL,
      249     9033    1              3 CLEAR CHAR (2) UNAL,
      250     9034    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      251     9035    1      DCL 1 OBJECT_KEY REDEF TOL$OBJECT_KEY ALIGNED,
      252     9036    1            2 SIZE UBIN (9) UNAL,
      253     9037    1            2 DATA CHAR (23) UNAL,
      254     9038    1            2 SPLIT REDEF DATA UNAL,
      255     9039    1              3 DATA CHAR (21) UNAL,
      256     9040    1              3 CLEAR CHAR (2) UNAL,
      257     9041    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      258     9042    1      DCL 1 TOL$PATCH_CARD STATIC SYMDEF ALIGNED,
      259     9043    1            2 * CHAR (7) UNAL,
      260     9044    1            2 TYPE CHAR (8) UNAL,
      261     9045    1            2 * CHAR (57) UNAL,
      262     9046    1            2 LBL CHAR (4) ALIGNED,
      263     9047    1            2 SEQ CHAR (4) ALIGNED,
      264     9048    1            2 CHECKSUM UBIN (36) ALIGNED;
      265     9049    1      DCL 1 PATCH_CARD REDEF TOL$PATCH_CARD ALIGNED,
      266     9050    1            2 * CHAR (7) UNAL,
      267     9051    1            2 TYPE CHAR (8) UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:10   
      268     9052    1            2 * CHAR (57) UNAL,
      269     9053    1            2 LBL CHAR (4) ALIGNED,
      270     9054    1            2 SEQ CHAR (4) ALIGNED,
      271     9055    1            2 CHECKSUM UBIN (36) ALIGNED;
      272     9056    1      DCL 1 PATCH_ASCII REDEF TOL$PATCH_CARD ALIGNED,
      273     9057    1            2 DATA CHAR (80) ALIGNED,
      274     9058    1            2 CHARS (0:79) REDEF DATA CHAR (1) UNAL,
      275     9059    1            2 * UBIN (36) ALIGNED;
      276     9060    1      DCL 1 HEX_CARD REDEF TOL$PATCH_CARD ALIGNED,
      277     9061    1            2 * CHAR (6) UNAL,
      278     9062    1            2 CR CHAR (1) UNAL,
      279     9063    1            2 TYPE CHAR (8) UNAL,
      280     9064    1            2 * CHAR (21) UNAL,
      281     9065    1            2 REVISION CHAR (6) UNAL,
      282     9066    1            2 * CHAR (38) UNAL,
      283     9067    1            2 * UBIN (36) ALIGNED;
      284     9068    1      DCL 1 HEX_ASCII REDEF TOL$PATCH_CARD ALIGNED,
      285     9069    1            2 DATA CHAR (80) ALIGNED,
      286     9070    1            2 CHARS (0:79) REDEF DATA CHAR (1) UNAL,
      287     9071    1            2 * UBIN (36) ALIGNED;
      288     9072    1      DCL 1 TOL$PATCH_KEY STATIC SYMDEF UNAL,
      289     9073    1            2 SIZE UBIN (9) UNAL INIT (4),
      290     9074    1            2 DECK# UBIN (18) UNAL,
      291     9075    1            2 CARD# UBIN (18) UNAL;
      292     9076    1      DCL 1 PATCH_KEY REDEF TOL$PATCH_KEY UNAL,
      293     9077    1            2 SIZE UBIN (9) UNAL,
      294     9078    1            2 DECK# UBIN (18) UNAL,
      295     9079    1            2 CARD# UBIN (18) UNAL;
      296     9080    1      DCL 1 DKEND_KEY REDEF TOL$PATCH_KEY UNAL,
      297     9081    1            2 SIZE UBIN (9) UNAL,
      298     9082    1            2 DECK# UBIN (18) UNAL,
      299     9083    1            2 CARD# UBIN (18) UNAL;
      300     9084    1      DCL 1 TOL$RELOC (0:27) STATIC SYMDEF ALIGNED,
      301     9085    1            2 UPPER UBIN (18) UNAL,
      302     9086    1            2 LOWER UBIN (18) UNAL;
      303     9087    1      DCL 1 RELOC (0:27) REDEF TOL$RELOC ALIGNED,
      304     9088    1            2 UPPER UBIN (18) UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:11   
      305     9089    1            2 LOWER UBIN (18) UNAL;
      306     9090    1      DCL TOL$START_LOAD$ STATIC SYMDEF PTR ALIGNED;
      307     9091    1      DCL START_LOAD$ REDEF TOL$START_LOAD$ PTR ALIGNED;
      308     9092    1      DCL 1 START_LOADP REDEF TOL$START_LOAD$ ALIGNED,
      309     9093    1            2 ADDRESS UBIN (18) UNAL,
      310     9094    1            2 * BIT (18) UNAL;
      311     9095           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:12   
      312     9096        /* Local Variables */
      313     9097
      314     9098    1      DCL BUFFER_ALLOCATED STATIC UBIN (36) ALIGNED INIT (0);
      315     9099    1      DCL BUFFER (0:1023) BASED (BUFFER$) CHAR (104) ALIGNED;
      316     9100    1      DCL CATALOG_COUNT UBIN (36) ALIGNED;
      317     9101    1      DCL CATALOG_DECKS (0:99) UBIN (18) UNAL;
      318     9102    1      DCL CATALOG_DECK# UBIN (18) UNAL;
      319     9103    1      DCL CATALOG_INDEX UBIN (36) ALIGNED;
      320     9104    1      DCL CHECK_INDEX UBIN (36) ALIGNED;
      321     9105    1      DCL CHECK_RELOC UBIN (18) STATIC ALIGNED;
      322     9106    1      DCL CSRW_OFFSET UBIN (36) ALIGNED;
      323     9107    1      DCL CS_OFFSET UBIN (36) ALIGNED;
      324     9108    1      DCL DATA_SIZE UBIN (36) ALIGNED;
      325     9109    1      DCL DECKFILE_DCB# STATIC UBIN (36) ALIGNED INIT (0);
      326     9110    1      DCL END_LOAD UBIN (36) ALIGNED;
      327     9111    1      DCL FIRST UBIN (18) UNAL;
      328     9112    1      DCL FIRST_MPC_CK UBIN (36) ALIGNED;
      329     9113    1      DCL HEX_OFFSET UBIN (36) ALIGNED;
      330     9114    1      DCL IOTD_FOUND UBIN (36) ALIGNED;
      331     9115    1      DCL L UBIN (36) ALIGNED;
      332     9116    1      DCL LAST UBIN (18) UNAL;
      333     9117    1      DCL LENGTH UBIN (36) ALIGNED;
      334     9118    1      DCL LOAD_RELOC UBIN (36) ALIGNED;
      335     9119    1      DCL M UBIN (36) ALIGNED;
      336     9120    1      DCL M$DECKFILE$ STATIC PTR ALIGNED;
      337     9121    1      DCL NEXT_SEQ UBIN (36) ALIGNED;
      338     9122    1      DCL NUMERICS STATIC CHAR (17) UNAL INIT ('0123456789ABCDEFG');
      339     9123    1      DCL OCTAL_INDEX UBIN (36) ALIGNED;
      340     9124    1      DCL HEX_INDEX REDEF OCTAL_INDEX UBIN (36) ALIGNED;
      341     9125    1      DCL SEQ_INDEX REDEF OCTAL_INDEX UBIN (36) ALIGNED;
      342     9126    1      DCL RELOCATION UBIN (36) ALIGNED;
      343     9127    1      DCL RELOCATION_CHECK UBIN (36) ALIGNED;
      344     9128    1      DCL RW_OFFSET UBIN (36) ALIGNED;
      345     9129    1      DCL SECOND_MPC_CK UBIN (36) ALIGNED;
      346     9130    1      DCL SEQ CHAR (4) ALIGNED;
      347     9131    1      DCL SEQ_CHARS (0:3) REDEF SEQ CHAR (1) UNAL;
      348     9132    1      DCL SKIP_LOAD UBIN (36) ALIGNED;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:13   
      349     9133           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:14   
      350     9134        /* Local Structures */
      351     9135
      352     9136    1      DCL 1 BINARY BASED (BINARY$) ALIGNED,
      353     9137    1            2 WD1 UBIN (36) ALIGNED,
      354     9138    1            2 LOAD REDEF WD1 ALIGNED,
      355     9139    1              3 TYPE UBIN (3) UNAL,
      356     9140    1              3 * UBIN (9) UNAL,
      357     9141    1              3 SIZE UBIN (6) UNAL,
      358     9142    1              3 ADDRESS UBIN (18) UNAL,
      359     9143    1            2 CHECKSUM UBIN (36) ALIGNED,
      360     9144    1            2 RELOC (0:2) UBIN (36) ALIGNED,
      361     9145    1            2 DATA (0:20) UBIN (36) ALIGNED,
      362     9146    1            2 SPLIT (0:20) REDEF DATA UNAL,
      363     9147    1              3 UPPER UBIN (18) UNAL,
      364     9148    1              3 LOWER UBIN (18) UNAL;
      365     9149    1      DCL 1 BINARY_LBLSEQ REDEF BINARY ALIGNED,
      366     9150    1            2 * CHAR (96) ALIGNED,
      367     9151    1            2 LBL CHAR (4) ALIGNED,
      368     9152    1            2 SEQ CHAR (4) ALIGNED;
      369     9153    1      DCL 1 CATALOG_DATA STATIC ALIGNED,
      370     9154    1            2 DECK# UBIN (18) UNAL,
      371     9155    1            2 ENTRY_COUNT UBIN (18) UNAL,
      372     9156    1            2 CHECKSUM ALIGNED,
      373     9157    1              3 UPPER UBIN (18) UNAL,
      374     9158    1              3 LOWER UBIN (18) UNAL;
      375     9159    1      DCL 1 CATALOG_CONTROL REDEF CATALOG_DATA ALIGNED,
      376     9160    1            2 SEED UBIN (36) ALIGNED,
      377     9161    1            2 CHECKSUM UBIN (36) ALIGNED;
      378     9162    1      DCL 1 CHECK BASED (BUFFER$) ALIGNED,
      379     9163    1            2 LAL (0:1023) UBIN (18) UNAL,
      380     9164    1            2 UAL (0:1023) UBIN (18) UNAL,
      381     9165    1            2 * (0:1023) CHAR (100) ALIGNED;
      382     9166    1      DCL 1 CHECKSUM ALIGNED,
      383     9167    1            2 UPPER ALIGNED,
      384     9168    1              3 UPPER UBIN (18) UNAL,
      385     9169    1              3 LOWER UBIN (18) UNAL,
      386     9170    1            2 UH REDEF UPPER UBIN (36) ALIGNED,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:15   
      387     9171    1            2 LOWER ALIGNED,
      388     9172    1              3 UPPER UBIN (18) UNAL,
      389     9173    1              3 LOWER UBIN (18) UNAL,
      390     9174    1            2 LH REDEF LOWER UBIN (36) ALIGNED;
      391     9175    1      DCL 1 CHECK_STATUS BASED (CHECK_STATUS$) ALIGNED,
      392     9176    1            2 HARDWARE_STATUS BIT (36) ALIGNED,
      393     9177    1            2 LAST_DCW_POINTER UBIN (18) UNAL,
      394     9178    1            2 RESIDUE UBIN (18) UNAL;
      395     9179    1      DCL DATA$ PTR ALIGNED;
      396     9180    1      DCL HEX$ REDEF DATA$ PTR ALIGNED;
      397     9181    1      DCL 1 HEXP REDEF DATA$ ALIGNED,
      398     9182    1            2 ADDRESS UBIN (18) UNAL,
      399     9183    1            2 * BIT (18) UNAL;
      400     9184    1      DCL 1 DCW ALIGNED,
      401     9185    1            2 ADDRESS UBIN (18) UNAL,
      402     9186    1            2 TYPE UBIN (6) UNAL,
      403     9187    1            2 SIZE UBIN (12) UNAL;
      404     9188    1      DCL 1 DCW_LIST_ENTRY BASED (DCW$) ALIGNED,
      405     9189    1            2 * UBIN (36) ALIGNED;
      406     9190    1      DCL DCW$ PTR ALIGNED;
      407     9191    1      DCL 1 DCWP REDEF DCW$ ALIGNED,
      408     9192    1            2 ADDRESS UBIN (18) UNAL,
      409     9193    1            2 * BIT (18) UNAL;
      410     9194    1      DCL 1 DECK_KEY STATIC UNAL,
      411     9195    1            2 SIZE UBIN (9) UNAL INIT (4),
      412     9196    1            2 DECK# UBIN (18) UNAL,
      413     9197    1            2 * UBIN (18) UNAL INIT (0);
      414     9198    1      DCL HEX_CARD_SPLIT UBIN (18) UNAL;
      415     9199    1      DCL 1 HEX_SPLIT REDEF HEX_CARD_SPLIT UNAL,
      416     9200    1            2 * UBIN (1) UNAL,
      417     9201    1            2 UPPER UBIN (8) UNAL,
      418     9202    1            2 * UBIN (1) UNAL,
      419     9203    1            2 LOWER UBIN (8) UNAL;
      420     9204    1      DCL 1 LOAD BASED (START_LOAD$) ALIGNED,
      421     9205    1            2 TYPE UBIN (3) UNAL,
      422     9206    1            2 * UBIN (9) UNAL,
      423     9207    1            2 SIZE UBIN (6) UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:16   
      424     9208    1            2 ADDRESS UBIN (18) UNAL,
      425     9209    1            2 DATA (0:27) UBIN (36) ALIGNED;
      426     9210    1      DCL 1 MASTER_CATALOG_KEY STATIC ALIGNED,
      427     9211    1            2 SIZE UBIN (9) UNAL INIT (14),
      428     9212    1            2 DATA CHAR (23) UNAL INIT ('MASTER_CATALOG');
      429     9213    1      DCL 1 SAVED_KEY STATIC ALIGNED,
      430     9214    1            2 SIZE UBIN (9) UNAL INIT (23),
      431     9215    1            2 DATA CHAR (23) UNAL,
      432     9216    1            2 SPLIT REDEF DATA UNAL,
      433     9217    1              3 DATA CHAR (21) UNAL,
      434     9218    1              3 CLEAR CHAR (2) UNAL,
      435     9219    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      436     9220    1      DCL SPLIT_DATA UBIN (36) ALIGNED;
      437     9221    1      DCL 1 SPLIT_SPLIT REDEF SPLIT_DATA ALIGNED,
      438     9222    1            2 UPPER UBIN (18) UNAL,
      439     9223    1            2 LOWER UBIN (18) UNAL;
      440     9224    1      DCL 1 SPLIT_DCW STATIC ALIGNED,
      441     9225    1            2 ADDRESS UBIN (18) UNAL,
      442     9226    1            2 TYPE UBIN (6) UNAL INIT (0),
      443     9227    1            2 SIZE UBIN (12) UNAL;
      444     9228    1      DCL 1 SPLIT_LOAD STATIC ALIGNED,
      445     9229    1            2 TYPE UBIN (3) UNAL INIT (3),
      446     9230    1            2 SIZE UBIN (15) UNAL,
      447     9231    1            2 ADDRESS UBIN (18) UNAL;
      448     9232    1      DCL SPLIT_WD1 REDEF SPLIT_LOAD UBIN (36) ALIGNED;
      449     9233    1      DCL 1 STATUS BASED (STATUS$) ALIGNED,
      450     9234    1            2 HARDWARE_STATUS BIT (36) ALIGNED,
      451     9235    1            2 LAST_DCW_POINTER UBIN (18) UNAL,
      452     9236    1            2 RESIDUE UBIN (18) UNAL;
      453     9237    1      DCL STATUS$ PTR ALIGNED;
      454     9238    1      DCL 1 STATUSP REDEF STATUS$ ALIGNED,
      455     9239    1            2 ADDRESS UBIN (18) UNAL,
      456     9240    1            2 * BIT (18) UNAL;
      457     9241           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:17   
      458     9242        /* External Entries */
      459     9243
      460     9244    1      DCL TOL$BAD_CARD ENTRY (1);
      461     9245    1      DCL TOL$FREE_BUFFER ENTRY;
      462     9246    1      DCL TOL$GET_BUFFER ENTRY;
      463     9247    1      DCL TOL$GET_DATA ENTRY (7);
      464     9248    1      DCL TOL$GET_NEXT_DCW ENTRY (3);
      465     9249    1      DCL TOL$SAVE_DATA ENTRY (7) ALTRET;
      466     9250           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:18   
      467     9251        /* Error Messages */
      468     9252
      469     9253    1      DCL 1 ER#1 STATIC UNAL,
      470     9254    1            2 * CHAR (31) UNAL INIT ('* IN TOL$ADJUST_PATCH_INDEXS,'),
      471     9255    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      472     9256    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      473     9257    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      474     9258    1            2 * CHAR (38) UNAL INIT ('NULL OCTAL PATCH VALUE AT COLUMN %COL');
      475     9259    1      DCL 1 ER#2 STATIC UNAL,
      476     9260    1            2 * CHAR (31) UNAL INIT ('* IN TOL$ADJUST_PATCH_INDEXS,'),
      477     9261    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      478     9262    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      479     9263    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      480     9264    1            2 * CHAR (50) UNAL INIT ('NULL RELOCATED OCTAL PATCH VALUE AT COLUMN %COL')
              9264                     ;
      481     9265    1      DCL 1 ER#3 STATIC UNAL,
      482     9266    1            2 * CHAR (26) UNAL INIT ('* IN TOL$BUILD_HEX_LOAD,'),
      483     9267    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      484     9268    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      485     9269    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      486     9270    1            2 * CHAR (31) UNAL INIT ('RHEX PATCH PAST READ/WRITE DATA');
      487     9271    1      DCL 1 ER#4 STATIC UNAL,
      488     9272    1            2 * CHAR (26) UNAL INIT ('* IN TOL$BUILD_HEX_LOAD,'),
      489     9273    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      490     9274    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      491     9275    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      492     9276    1            2 * CHAR (35) UNAL INIT ('CHEX PATCH PAST CONTROL STORE DATA');
      493     9277    1      DCL 1 ER#6 STATIC UNAL,
      494     9278    1            2 * CHAR (27) UNAL INIT ('* IN TOL$BUILD_HEX_PATCH,'),
      495     9279    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      496     9280    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      497     9281    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      498     9282    1            2 * CHAR (42) UNAL INIT ('HEX PATCH HAS TWO PATCHES FOR ODD LOCATION');
      499     9283    1      DCL 1 ER#7 STATIC UNAL,
      500     9284    1            2 * CHAR (29) UNAL INIT ('* IN TOL$BUILD_HEX_SEGMENT,'),
      501     9285    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      502     9286    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:19   
      503     9287    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      504     9288    1            2 * CHAR (40) UNAL INIT ('RHEX PATCH FOR A CONTROL STORE ONLY DECK');
      505     9289    1      DCL 1 ER#8 STATIC UNAL,
      506     9290    1            2 * CHAR (29) UNAL INIT ('* IN TOL$BUILD_HEX_SEGMENT,'),
      507     9291    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      508     9292    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      509     9293    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      510     9294    1            2 * CHAR (40) UNAL INIT ('HEX PATCH CARD ADDRESS NOT 4 CHARACTERS');
      511     9295    1      DCL 1 ER#9 STATIC UNAL,
      512     9296    1            2 * CHAR (29) UNAL INIT ('* IN TOL$BUILD_HEX_SEGMENT,'),
      513     9297    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      514     9298    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      515     9299    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      516     9300    1            2 * CHAR (52) UNAL INIT (
              9300                     'HEX PATCH CARD ADDRESS BELOW DECK SPECIFIED OFFSET');
      517     9301    1      DCL 1 ER#10 STATIC UNAL,
      518     9302    1            2 * CHAR (31) UNAL INIT ('* IN TOL$BUILD_OCTAL_SEGMENT,'),
      519     9303    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      520     9304    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      521     9305    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      522     9306    1            2 * CHAR (46) UNAL INIT ('OCTAL PATCH CARD ADDRESS NOT 1-6 CHARACTERS');
      523     9307    1      DCL 1 ER#11 STATIC UNAL,
      524     9308    1            2 * CHAR (29) UNAL INIT ('* IN TOL$CHECK_BINARY_DATA,'),
      525     9309    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      526     9310    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      527     9311    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      528     9312    1            2 * CHAR (16) UNAL INIT ('BAD LABLE %BLB,'),
      529     9313    1            2 * CHAR (8) UNAL INIT ('S/B %DEK');
      530     9314    1      DCL 1 ER#12 STATIC UNAL,
      531     9315    1            2 * CHAR (29) UNAL INIT ('* IN TOL$CHECK_BINARY_DATA,'),
      532     9316    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      533     9317    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      534     9318    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      535     9319    1            2 * CHAR (36) UNAL INIT ('NON-NUMERIC SEQUENCE AT COLUMN %CLM');
      536     9320    1      DCL 1 ER#13 STATIC UNAL,
      537     9321    1            2 * CHAR (29) UNAL INIT ('* IN TOL$CHECK_BINARY_DATA,'),
      538     9322    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:20   
      539     9323    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      540     9324    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      541     9325    1            2 * CHAR (18) UNAL INIT ('SEQUENCE IS %SEQ,'),
      542     9326    1            2 * CHAR (10) UNAL INIT ('S/B %BIN');
      543     9327    1      DCL 1 ER#14 STATIC UNAL,
      544     9328    1            2 * CHAR (29) UNAL INIT ('* IN TOL$CHECK_BINARY_DATA,'),
      545     9329    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      546     9330    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      547     9331    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      548     9332    1            2 * CHAR (24) UNAL INIT ('ILLEGAL LOAD TYPE %BL');
      549     9333    1      DCL 1 ER#15 STATIC UNAL,
      550     9334    1            2 * CHAR (29) UNAL INIT ('* IN TOL$CHECK_BINARY_DATA,'),
      551     9335    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      552     9336    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      553     9337    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      554     9338    1            2 * CHAR (52) UNAL INIT (
              9338                     'MPC ASSEMBLER DECK CARD IS NOT THE EXPECTED ID BLOCK');
      555     9339    1      DCL 1 ER#16 STATIC UNAL,
      556     9340    1            2 * CHAR (31) UNAL INIT ('* IN TOL$CHECK_CARD_CHECKSUM,'),
      557     9341    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      558     9342    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      559     9343    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      560     9344    1            2 * CHAR (14) UNAL INIT ('CHECKSUM ERROR');
      561     9345    1      DCL 1 ER#17 STATIC UNAL,
      562     9346    1            2 * CHAR (23) UNAL INIT ('* IN TOL$CONVERT_HEX,'),
      563     9347    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      564     9348    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      565     9349    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      566     9350    1            2 * CHAR (58) UNAL INIT (
              9350                     'HEX PATCH CARD HAS INVALID HEX CHARACTER AT COLUMN %COL');
      567     9351    1      DCL 1 ER#18 STATIC UNAL,
      568     9352    1            2 * CHAR (25) UNAL INIT ('* IN TOL$CONVERT_OCTAL,'),
      569     9353    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      570     9354    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      571     9355    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      572     9356    1            2 * CHAR (64) UNAL INIT (
              9356                     'OCTAL PATCH CARD HAS PATCH VALUE > 12 CHARACTERS AT COLUMN %COL');
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:21   
      573     9357    1      DCL 1 ER#19 STATIC UNAL,
      574     9358    1            2 * CHAR (25) UNAL INIT ('* IN TOL$CONVERT_OCTAL,'),
      575     9359    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      576     9360    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      577     9361    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      578     9362    1            2 * CHAR (60) UNAL INIT (
              9362                     'OCTAL PATCH CARD HAS INVALID OCTAL CHARACTER AT COLUMN %COL');
      579     9363    1      DCL 1 ER#23 STATIC UNAL,
      580     9364    1            2 * CHAR (33) UNAL INIT ('* IN TOL$GET_NEXT_CONTROL_WORD,'),
      581     9365    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      582     9366    1            2 * CHAR (19) UNAL INIT ('CALL (PAST IOTD)');
      583     9367    1      DCL 1 ER#25 STATIC UNAL,
      584     9368    1            2 * CHAR (22) UNAL INIT ('* IN TOL$MOVE_ENTRY,'),
      585     9369    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      586     9370    1            2 * CHAR (30) UNAL INIT ('ALTRETURN FROM TOL$SAVE_DATA');
      587     9371    1      DCL 1 ER#26 STATIC UNAL,
      588     9372    1            2 * CHAR (0) UNAL INIT ('*** Attempt to open the '),
      589     9373    1            2 * CHAR (0) UNAL INIT ('deckfile failed.') ;
      590     9374    1      DCL 1 ER#27 STATIC UNAL,
      591     9375    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_BUFFER,'),
      592     9376    1            2 * CHAR (13) UNAL INIT ('BINARY IMAGE'),
      593     9377    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      594     9378    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      595     9379    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      596     9380    1            2 * CHAR (25) UNAL INIT ('S/B MOD 104 CHARACTERS');
      597     9381    1      DCL 1 ER#28 STATIC UNAL,
      598     9382    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_BUFFER,'),
      599     9383    1            2 * CHAR (13) UNAL INIT ('BINARY IMAGE'),
      600     9384    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      601     9385    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      602     9386    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      603     9387    1            2 * CHAR (25) UNAL INIT ('S/B %COUNT*104 CHARACTERS');
      604     9388    1      DCL 1 ER#29 STATIC UNAL,
      605     9389    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_BUFFER,'),
      606     9390    1            2 * CHAR (13) UNAL INIT ('BINARY IMAGE'),
      607     9391    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      608     9392    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:22   
      609     9393    1            2 * CHAR (10) UNAL INIT ('MISSING');
      610     9394    1      DCL 1 ER#30 STATIC UNAL,
      611     9395    1            2 * CHAR (24) UNAL INIT ('* IN TOL$READ_CATALOG,'),
      612     9396    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      613     9397    1            2 * CHAR (13) UNAL INIT ('KEY SIZE %CZ'),
      614     9398    1            2 * CHAR (27) UNAL INIT ('FOR CALL, S/B 23 CHARACTERS');
      615     9399    1      DCL 1 ER#31 STATIC UNAL,
      616     9400    1            2 * CHAR (24) UNAL INIT ('* IN TOL$READ_CATALOG,'),
      617     9401    1            2 * CHAR (16) UNAL INIT ('CATALOG %C#   ,'),
      618     9402    1            2 * CHAR (14) UNAL INIT ('CONTROL BLOCK'),
      619     9403    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      620     9404    1            2 * CHAR (17) UNAL INIT ('S/B 8 CHARACTERS');
      621     9405    1      DCL 1 ER#32 STATIC UNAL,
      622     9406    1            2 * CHAR (2) UNAL INIT ('*'),
      623     9407    1            2 * CHAR (29) UNAL INIT ('CATALOG %CAT'),
      624     9408    1            2 * CHAR (2) UNAL INIT (','),
      625     9409    1            2 * CHAR (9) UNAL INIT ('MISSING');
      626     9410    1      DCL 1 ER#33 STATIC UNAL,
      627     9411    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      628     9412    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      629     9413    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      630     9414    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      631     9415    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      632     9416    1            2 * CHAR (17) UNAL INIT ('S/B 84 CHARACTERS');
      633     9417    1      DCL 1 ER#34 STATIC UNAL,
      634     9418    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      635     9419    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      636     9420    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      637     9421    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      638     9422    1            2 * CHAR (14) UNAL INIT ('CHECKSUM ERROR');
      639     9423    1      DCL 1 ER#35 STATIC UNAL,
      640     9424    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      641     9425    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      642     9426    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      643     9427    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      644     9428    1            2 * CHAR (18) UNAL INIT ('NOT A $ DKEND CARD');
      645     9429    1      DCL 1 ER#36 STATIC UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:23   
      646     9430    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      647     9431    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      648     9432    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      649     9433    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      650     9434    1            2 * CHAR (16) UNAL INIT ('BAD LABLE %DLB,'),
      651     9435    1            2 * CHAR (10) UNAL INIT ('S/B %DEK');
      652     9436    1      DCL 1 ER#37 STATIC UNAL,
      653     9437    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      654     9438    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      655     9439    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      656     9440    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      657     9441    1            2 * CHAR (38) UNAL INIT ('NON-NUMERIC SEQUENCE AT COLUMN %CLM');
      658     9442    1      DCL 1 ER#38 STATIC UNAL,
      659     9443    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      660     9444    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      661     9445    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      662     9446    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      663     9447    1            2 * CHAR (18) UNAL INIT ('SEQUENCE IS %SEQ,'),
      664     9448    1            2 * CHAR (8) UNAL INIT ('S/B %BIN');
      665     9449    1      DCL 1 ER#39 STATIC UNAL,
      666     9450    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      667     9451    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      668     9452    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      669     9453    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      670     9454    1            2 * CHAR (10) UNAL INIT ('MISSING');
      671     9455    1      DCL 1 ER#40 STATIC UNAL,
      672     9456    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_ENTRY,'),
      673     9457    1            2 * CHAR (13) UNAL INIT ('ENTRY %E#'),
      674     9458    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      675     9459    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      676     9460    1            2 * CHAR (17) UNAL INIT ('S/B 24 CHARACTERS');
      677     9461    1      DCL 1 ER#41 STATIC UNAL,
      678     9462    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_ENTRY,'),
      679     9463    1            2 * CHAR (13) UNAL INIT ('ENTRY %E#'),
      680     9464    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      681     9465    1            2 * CHAR (26) UNAL INIT ('NOT CORRECT KEY SIZE %OZ,'),
      682     9466    1            2 * CHAR (20) UNAL INIT ('S/B 23 CHARACTERS');
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:24   
      683     9467    1      DCL 1 ER#42 STATIC UNAL,
      684     9468    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_ENTRY,'),
      685     9469    1            2 * CHAR (13) UNAL INIT ('ENTRY %E#'),
      686     9470    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      687     9471    1            2 * CHAR (10) UNAL INIT ('MISSING');
      688     9472    1      DCL 1 ER#43 STATIC UNAL,
      689     9473    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      690     9474    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      691     9475    1            2 * CHAR (13) UNAL INIT ('KEY SIZE %OZ'),
      692     9476    1            2 * CHAR (28) UNAL INIT ('FOR CALL, S/B 23 CHARACTERS');
      693     9477    1      DCL 1 ER#44 STATIC UNAL,
      694     9478    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      695     9479    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      696     9480    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      697     9481    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      698     9482    1            2 * CHAR (18) UNAL INIT ('S/B 96 CHARACTERS');
      699     9483    1      DCL 1 ER#45 STATIC UNAL,
      700     9484    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      701     9485    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      702     9486    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      703     9487    1            2 * CHAR (15) UNAL INIT ('CHECKSUM ERROR');
      704     9488    1      DCL 1 ER#46 STATIC UNAL,
      705     9489    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      706     9490    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      707     9491    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      708     9492    1            2 * CHAR (19) UNAL INIT ('NOT A $ OBJECT CARD');
      709     9493    1      DCL 1 ER#47 STATIC UNAL,
      710     9494    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      711     9495    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      712     9496    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      713     9497    1            2 * CHAR (19) UNAL INIT ('BAD LOAD TYPE %OL,'),
      714     9498    1            2 * CHAR (16) UNAL INIT ('S/B D, P, OR R');
      715     9499    1      DCL 1 ER#48 STATIC UNAL,
      716     9500    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      717     9501    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      718     9502    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      719     9503    1            2 * CHAR (24) UNAL INIT ('BAD ASSEMBLER TYPE %OA,'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:25   
      720     9504    1            2 * CHAR (15) UNAL INIT ('S/B M, G, OR 3');
      721     9505    1      DCL 1 ER#49 STATIC UNAL,
      722     9506    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      723     9507    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      724     9508    1            2 * CHAR (19) UNAL INIT ('BAD SEQUENCE %OS ,'),
      725     9509    1            2 * CHAR (11) UNAL INIT ('S/B 0000');
      726     9510    1      DCL 1 ER#50 STATIC UNAL,
      727     9511    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      728     9512    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      729     9513    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      730     9514    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      731     9515    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      732     9516    1            2 * CHAR (18) UNAL INIT ('S/B 84 CHARACTERS');
      733     9517    1      DCL 1 ER#51 STATIC UNAL,
      734     9518    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      735     9519    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      736     9520    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      737     9521    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      738     9522    1            2 * CHAR (14) UNAL INIT ('CHECKSUM ERROR');
      739     9523    1      DCL 1 ER#52 STATIC UNAL,
      740     9524    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      741     9525    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      742     9526    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      743     9527    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      744     9528    1            2 * CHAR (30) UNAL INIT ('NOT OCTAL OR HEX PATCH CARD');
      745     9529    1      DCL 1 ER#53 STATIC UNAL,
      746     9530    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      747     9531    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      748     9532    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      749     9533    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      750     9534    1            2 * CHAR (16) UNAL INIT ('BAD LABLE %PLB,'),
      751     9535    1            2 * CHAR (10) UNAL INIT ('S/B %DEK');
      752     9536    1      DCL 1 ER#54 STATIC UNAL,
      753     9537    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      754     9538    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      755     9539    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      756     9540    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:26   
      757     9541    1            2 * CHAR (38) UNAL INIT ('HEX PATCH CARD BUT NOT CHEX OR RHEX');
      758     9542    1      DCL 1 ER#55 STATIC UNAL,
      759     9543    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      760     9544    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      761     9545    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      762     9546    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      763     9547    1            2 * CHAR (38) UNAL INIT ('HEX PATCH CARD WRONG REVISION %HR   ,'),
      764     9548    1            2 * CHAR (12) UNAL INIT ('S/B %DR');
      765     9549    1      DCL 1 ER#56 STATIC UNAL,
      766     9550    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      767     9551    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      768     9552    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      769     9553    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      770     9554    1            2 * CHAR (42) UNAL INIT ('HEX PATCH CARD NOT IN MPC ASSEMBLER DECK');
      771     9555    1      DCL 1 ER#57 STATIC UNAL,
      772     9556    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      773     9557    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      774     9558    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      775     9559    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      776     9560    1            2 * CHAR (10) UNAL INIT ('MISSING');
      777     9561    1      DCL 1 ER#58 STATIC UNAL,
      778     9562    1            2 * CHAR (32) UNAL INIT ('* IN TOL$SAVE_CHECK_LOCATIONS,'),
      779     9563    1            2 * CHAR (52) UNAL INIT (
              9563                     'DCW STRING IS TOO FRAGMENTED, MORE THAN 1022 DCWS');
      780     9564    1      DCL 1 ER#59 STATIC UNAL,
      781     9565    1            2 * CHAR (21) UNAL INIT ('* IN TOL$SAVE_LOAD,'),
      782     9566    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      783     9567    1            2 * CHAR (31) UNAL INIT ('ALTRETURN FROM TOL$SAVE_DATA');
      784     9568    1      DCL 1 ER#61 STATIC UNAL,
      785     9569    1            2 * CHAR (32) UNAL INIT ('* IN TOL$SET_RELOCATION_WORDS,'),
      786     9570    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      787     9571    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      788     9572    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      789     9573    1            2 * CHAR (32) UNAL INIT ('ILLEGAL RELOCATION TYPE %BU/%BR'),
      790     9574    1            2 * CHAR (13) UNAL INIT ('FOR WORD %J,'),
      791     9575    1            2 * CHAR (12) UNAL INIT ('S/B 0 OR 1');
      792     9576    1      DCL 1 ER#62 STATIC UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:27   
      793     9577    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      794     9578    1            2 * CHAR (20) UNAL INIT ('TOL$READ_CATALOG ON'),
      795     9579    1            2 * CHAR (28) UNAL INIT ('M$READ (READ_CATALOG_DATA)');
      796     9580    1      DCL 1 ER#63 STATIC UNAL,
      797     9581    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      798     9582    1            2 * CHAR (18) UNAL INIT ('TOL$READ_ENTRY ON'),
      799     9583    1            2 * CHAR (30) UNAL INIT ('M$READ (READ_CATALOG_ENTRY)');
      800     9584    1      DCL 1 ER#64 STATIC UNAL,
      801     9585    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      802     9586    1            2 * CHAR (19) UNAL INIT ('TOL$READ_BUFFER ON'),
      803     9587    1            2 * CHAR (25) UNAL INIT ('M$READ (READ_BINARY_DECK)');
      804     9588    1      DCL 1 ER#65 STATIC UNAL,
      805     9589    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      806     9590    1            2 * CHAR (19) UNAL INIT ('TOL$READ_OBJECT ON'),
      807     9591    1            2 * CHAR (25) UNAL INIT ('M$READ (READ_OBJECT_CARD)');
      808     9592    1      DCL 1 ER#66 STATIC UNAL,
      809     9593    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      810     9594    1            2 * CHAR (18) UNAL INIT ('TOL$READ_DKEND ON'),
      811     9595    1            2 * CHAR (26) UNAL INIT ('M$READ (READ_DKEND_CARD)');
      812     9596    1      DCL 1 ER#67 STATIC UNAL,
      813     9597    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      814     9598    1            2 * CHAR (18) UNAL INIT ('TOL$READ_PATCH ON'),
      815     9599    1            2 * CHAR (26) UNAL INIT ('M$READ (READ_PATCH_CARD)');
      816     9600    1      DCL 1 ER#70 STATIC UNAL,
      817     9601    1            2 * CHAR (34) UNAL INIT ('* IN TOL$CALCULATE_MPC_CHECKSUM,'),
      818     9602    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      819     9603    1            2 * CHAR (30) UNAL INIT ('ALTRETURN FROM TOL$SAVE_DATA');
      820     9604    1      DCL 1 ER#71 STATIC UNAL,
      821     9605    1            2 * CHAR (24) UNAL INIT ('* IN TOL$READ_PATCHES,'),
      822     9606    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      823     9607    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      824     9608    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      825     9609    1            2 * CHAR (35) UNAL INIT ('ILLEGAL TO HEX PATCH A NON-MPC DECK');
      826     9610    1      DCL 1 ER#73 STATIC UNAL,
      827     9611    1            2 * CHAR (31) UNAL INIT ('* IN TOL$BUILD_OCTAL_SEGMENT,'),
      828     9612    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      829     9613    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:28   
      830     9614    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      831     9615    1            2 * CHAR (34) UNAL INIT ('OCTAL PATCH FOR MPC CHECKSUM DATA');
      832     9616    1      DCL 1 ER#74 STATIC UNAL,
      833     9617    1            2 * CHAR (0) UNAL INIT ('* IN TOL$GET_NIO_ENTRY, '),
      834     9618    1            2 * CHAR (0) UNAL INIT ('READ FROM THE DECKFILE '),
      835     9619    1            2 * CHAR (0) UNAL INIT ('FAILED.') ;
      836     9620           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:29   
      837     9621        /* ALTRETURN Value Substitutions */
      838     9622
      839     9623    1      DCL ERR#A UBIN (18) STATIC INIT (1);
      840     9624    1      DCL ERR#B UBIN (18) STATIC INIT (2);
      841     9625    1      DCL ERR#C UBIN (18) STATIC INIT (3);
      842     9626    1      DCL ERR#D UBIN (18) STATIC INIT (4);
      843     9627    1      DCL ERR#E UBIN (18) STATIC INIT (5);
      844     9628    1      DCL ERR#F UBIN (18) STATIC INIT (6);
      845     9629    1      DCL ERR#G UBIN (18) STATIC INIT (7);
      846     9630    1      DCL ERR#H UBIN (18) STATIC INIT (8);
      847     9631    1      DCL ERR#HO UBIN (18) STATIC INIT (42);
      848     9632    1      DCL ERR#I UBIN (18) STATIC INIT (9);
      849     9633    1      DCL ERR#J UBIN (18) STATIC INIT (10);
      850     9634    1      DCL ERR#K UBIN (18) STATIC INIT (11);
      851     9635    1      DCL ERR#L UBIN (18) STATIC INIT (12);
      852     9636           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:30   
      853     9637        /* Main Code */
      854     9638
      855     9639    1      CALL_SEQ$ = ADDR (CALL_SEQUENCE);
      856     9640    1      IF (CALL_SEQUENCE.NO_MORE = -1)
      857     9641    2      THEN DO;
      858     9642    2              ERROR_CODE.LOC = ERR#A;
      859     9643    2              ERROR_CODE.ERR = ERR#A;
      860     9644    2              ALTRETURN;
      861     9645    2           END;
      862     9646    1      IF (BUFFER$ = ADDR (NIL))
      863     9647    2      THEN DO;
      864     9648    2              CALL TOL$GET_BUFFER;
      865     9649    2              BUFFER_ALLOCATED = 1;
      866     9650    2           END;
      867     9651    1      CHECK_INDEX = 0;
      868     9652    1      FIRST = CALL_SEQP.ADDRESS;
      869     9653    1      LAST = FIRST + 9;
      870     9654    1      CALL TOL$SAVE_CHECK_LOCATIONS (FIRST, LAST) ;
      871     9655    1      CALL TOL$CHECK_STATUS_OVERLAP ALTRET (CHECK_RETURN_ERROR);
      872     9656    1      CALL TOL$CHECK_DCW_OVERLAP ALTRET (CHECK_RETURN_ERROR);
      873     9657    1      CALL TOL$CHECK_DATA_OVERLAP ALTRET (CHECK_RETURN_ERROR);
      874     9658    1      CHECK_STATUS.LAST_DCW_POINTER = CALL_SEQUENCE.FDCWP - 1;
      875     9659    1      SPAN_UPPER = CHECK_RELOC ;
      876     9660    1      CALL TOL$GET_NEXT_DCW (CHECK_DCW, CALL_SEQUENCE, CHECK_STATUS) ;
      877     9661    1      CHECK_DCW.ADDRESS = CHECK_DCW.ADDRESS + CHECK_RELOC ;
      878     9662    1      IF (BUFFER_ALLOCATED = 1)
      879     9663    2      THEN DO;
      880     9664    2              CALL TOL$FREE_BUFFER;
      881     9665    2              BUFFER_ALLOCATED = 0;
      882     9666    2           END;
      883     9667    1      RETURN;
      884     9668
      885     9669    1   CHECK_RETURN_ERROR:
      886     9670    1      CALL TOL$FREE_BUFFER;
      887     9671    1      BUFFER_ALLOCATED = 0;
      888     9672    1      ALTRETURN;
      889     9673        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:31   
      890     9674    1   TOL$CHECK_CONTROL_OVERLAP: PROC (FIRST, LAST) ALTRET ;
      891     9675
      892     9676    2      DCL FIRST UBIN (18) HALIGNED ;
      893     9677    2      DCL LAST  UBIN (18) HALIGNED ;
      894     9678
      895     9679        /* Code */
      896     9680
      897     9681    3      DO I = 0 TO CHECK_INDEX - 1;
      898     9682    3         IF (FIRST >= CHECK.LAL (I) AND FIRST <= CHECK.UAL (I))
      899     9683    3         THEN ALTRETURN;
      900     9684    3         IF (LAST >= CHECK.LAL (I) AND LAST <= CHECK.UAL (I))
      901     9685    3         THEN ALTRETURN;
      902     9686    3         IF (CHECK.LAL (I) >= FIRST AND CHECK.LAL (I) <= LAST)
      903     9687    3         THEN ALTRETURN;
      904     9688    3      END;
      905     9689    2      RETURN;
      906     9690
      907     9691    2   END TOL$CHECK_CONTROL_OVERLAP;
      908     9692        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:32   
      909     9693    1   TOL$CHECK_DATA_OVERLAP: PROC ALTRET;
      910     9694
      911     9695    2      IF (DECK_TYPE = 'D')
      912     9696    2      THEN CHECK_RELOC = 0 ;
      913     9697    2      ELSE CHECK_RELOC = 72 ;
      914     9698    2      FIRST = 0;
      915     9699    2      LAST = LOAD_OFFSET+ 72 - 1 ;
      916     9700    2      IF (LOAD_OFFSET ~= 0)
      917     9701    2      THEN CALL TOL$SAVE_CHECK_LOCATIONS (FIRST, LAST) ;
      918     9702    2      FIRST = MAX_LOAD ;
      919     9703    2      LAST = 262143;
      920     9704    2      CALL TOL$SAVE_CHECK_LOCATIONS (FIRST, LAST) ;
      921     9705    2      CHECK_DATA_SIZE = 0;
      922     9706    2      IOTD_FOUND = 0;
      923     9707    2      CHECK_STATUS.LAST_DCW_POINTER = CALL_SEQUENCE.FDCWP - 1;
      924     9708    2      SPAN_UPPER = CHECK_RELOC ;
      925     9709    2      CALL TOL$GET_NEXT_DCW (CHECK_DCW, CALL_SEQUENCE, CHECK_STATUS) ;
      926     9710    2      CHECK_DCW.ADDRESS = CHECK_DCW.ADDRESS + CHECK_RELOC ;
      927     9711    3      DO WHILE (IOTD_FOUND = 0);
      928     9712    3         FIRST = CHECK_DCW.ADDRESS;
      929     9713    3         LAST = CHECK_DCW.ADDRESS + CHECK_STATUS.RESIDUE - 1;
      930     9714    3         CALL TOL$CHECK_CONTROL_OVERLAP
      931     9715    3                 (FIRST,
      932     9716    3                 LAST) ALTRET (DATA_OVERLAP);
      933     9717    3         CHECK_DATA_SIZE = CHECK_DATA_SIZE + CHECK_STATUS.RESIDUE;
      934     9718    3         IF (CHECK_DCW.TYPE = 0)
      935     9719    3         THEN IOTD_FOUND = 1;
      936     9720    3         ELSE CALL TOL$GET_NEXT_DCW (CHECK_DCW, CALL_SEQUENCE, CHECK_STATUS) ;
      937     9721    3         CHECK_DCW.ADDRESS = CHECK_DCW.ADDRESS + CHECK_RELOC ;
      938     9722    3      END;
      939     9723    2      RETURN;
      940     9724    2   DATA_OVERLAP:
      941     9725    2      ERROR_CODE.LOC = ERR#B;
      942     9726    2      ERROR_CODE.ERR = ERR#B;
      943     9727    2      ALTRETURN;
      944     9728    2   END TOL$CHECK_DATA_OVERLAP;
      945     9729        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:33   
      946     9730    1   TOL$CHECK_DCW_OVERLAP: PROC ALTRET;
      947     9731
      948     9732    2      IOTD_FOUND = 0;
      949     9733    2      IONTP_FOUND = 0;
      950     9734    2      CHECK_STATUS.LAST_DCW_POINTER = CALL_SEQUENCE.FDCWP - 1;
      951     9735    2      CALL TOL$GET_NEXT_CONTROL_WORD;
      952     9736    2      IF (CHECK_DCW.TYPE = 3)
      953     9737    3      THEN DO;
      954     9738    3              ERROR_CODE.LOC = ERR#C;
      955     9739    3              ERROR_CODE.ERR = ERR#C;
      956     9740    3              ALTRETURN;
      957     9741    3           END;
      958     9742    3      DO WHILE (IOTD_FOUND = 0);
      959     9743    3         FIRST = CHECK_STATUS.LAST_DCW_POINTER;
      960     9744    3         LAST = FIRST;
      961     9745    3         CALL TOL$CHECK_CONTROL_OVERLAP
      962     9746    3                 (FIRST,
      963     9747    3                 LAST) ALTRET (DCW_OVERLAP);
      964     9748    3         CALL TOL$SAVE_CHECK_LOCATIONS (FIRST, LAST) ;
      965     9749    3         IF (CHECK_DCW.TYPE = 0)
      966     9750    3         THEN IOTD_FOUND = 1;
      967     9751    3         ELSE CALL TOL$GET_NEXT_CONTROL_WORD;
      968     9752    3      END;
      969     9753    2      RETURN;
      970     9754
      971     9755    2   DCW_OVERLAP:
      972     9756    2      ERROR_CODE.LOC = ERR#D;
      973     9757    2      ERROR_CODE.ERR = ERR#D;
      974     9758    2      ALTRETURN;
      975     9759
      976     9760        /* END TOL$CHECK_DCW_OVERLAP */
      977     9761        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:34   
      978     9762    2   TOL$GET_NEXT_CONTROL_WORD: PROC;
      979     9763
      980     9764    3      IF (CHECK_STATUS.LAST_DCW_POINTER ~= CALL_SEQUENCE.FDCWP - 1)
      981     9765    4      THEN DO;
      982     9766    4              IF (CHECK_DCW.TYPE = 3)
      983     9767    4              THEN CHECK_STATUS.LAST_DCW_POINTER = CHECK_DCW.ADDRESS - 1;
      984     9768    4              IF (CHECK_DCW.TYPE = 0)
      985     9769    4              THEN CALL TOL$BAD_CARD (VECTOR (ER#23));
      986     9770    4           END;
      987     9771    3      DCW$ = ADDR (CALL_SEQUENCE);
      988     9772    3      CHECK_STATUS.LAST_DCW_POINTER = CHECK_STATUS.LAST_DCW_POINTER + 1;
      989     9773    3      DCWP.ADDRESS = CHECK_STATUS.LAST_DCW_POINTER;
      990     9774    3      CHECK_DCW = DCW_LIST_ENTRY;
      991     9775    3      RETURN;
      992     9776
      993     9777    3   END TOL$GET_NEXT_CONTROL_WORD;
      994     9778
      995     9779    2   END TOL$CHECK_DCW_OVERLAP;
      996     9780        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:35   
      997     9781    1   TOL$CHECK_STATUS_OVERLAP: PROC ALTRET;
      998     9782
      999     9783    2      FIRST = CALL_SEQUENCE.STATUSP;
     1000     9784    2      LAST = FIRST + 1;
     1001     9785    2      CALL TOL$CHECK_CONTROL_OVERLAP
     1002     9786    2              (FIRST,
     1003     9787    2              LAST) ALTRET (STATUS_OVERLAP);
     1004     9788    2      CALL TOL$SAVE_CHECK_LOCATIONS (FIRST, LAST) ;
     1005     9789    2      RETURN;
     1006     9790
     1007     9791    2   STATUS_OVERLAP:
     1008     9792    2      ERROR_CODE.LOC = ERR#E;
     1009     9793    2      ERROR_CODE.ERR = ERR#E;
     1010     9794    2      ALTRETURN;
     1011     9795
     1012     9796    2   END TOL$CHECK_STATUS_OVERLAP;
     1013     9797        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:36   
     1014     9798    1   TOL$SAVE_CHECK_LOCATIONS: PROC (FIRST, LAST) ALTRET ;
     1015     9799
     1016     9800    2      DCL FIRST UBIN (18) HALIGNED ;
     1017     9801    2      DCL LAST  UBIN (18) HALIGNED ;
     1018     9802
     1019     9803        /* Code */
     1020     9804
     1021     9805    2      IF (CHECK_INDEX > 1023)
     1022     9806    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#58));
     1023     9807    2      CHECK.LAL (CHECK_INDEX) = FIRST;
     1024     9808    2      CHECK.UAL (CHECK_INDEX) = LAST;
     1025     9809    2      CHECK_INDEX = CHECK_INDEX + 1;
     1026     9810    2      RETURN;
     1027     9811
     1028     9812    2   END TOL$SAVE_CHECK_LOCATIONS;
     1029     9813        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:37   
     1030     9814    1   TOL$CHECKSUM: PROC (CHECKSUM_SEED,
     1031     9815    1              CHECKSUM_START$,
     1032     9816    1              CHECKSUM_SIZE,
     1033     9817    1              CHECKSUM_LOCATION);
     1034     9818
     1035     9819        /* Parameters */
     1036     9820
     1037     9821    2      DCL CHECKSUM_LOCATION UBIN (36) ALIGNED;
     1038     9822    2      DCL CHECKSUM_SEED UBIN (36) ALIGNED;
     1039     9823    2      DCL 1 SEED REDEF CHECKSUM_SEED ALIGNED,
     1040     9824    2            2 UPPER UBIN (18) UNAL,
     1041     9825    2            2 LOWER UBIN (18) UNAL;
     1042     9826    2      DCL CHECKSUM_SIZE UBIN (36) ALIGNED;
     1043     9827    2      DCL CHECKSUM_START$ PTR ALIGNED;
     1044     9828
     1045     9829        /* Variables */
     1046     9830
     1047     9831    2      DCL 1 CHECKSUM_DATA (0:22) BASED (CHECKSUM_START$) ALIGNED,
     1048     9832    2            2 UPPER UBIN (18) UNAL,
     1049     9833    2            2 LOWER UBIN (18) UNAL;
     1050     9834    2      DCL 1 CHECKSUM_SPLIT STATIC ALIGNED,
     1051     9835    2            2 UPPER UBIN (18) UNAL INIT (0),
     1052     9836    2            2 LOWER UBIN (18) UNAL;
     1053     9837    2      DCL CHECKSUM_BINARY REDEF CHECKSUM_SPLIT UBIN (36) ALIGNED;
     1054     9838           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:38   
     1055     9839        /* Code */
     1056     9840
     1057     9841    2      CHECKSUM_SPLIT.LOWER = SEED.UPPER;
     1058     9842    2      CHECKSUM.UH = CHECKSUM_BINARY;
     1059     9843    2      CHECKSUM_SPLIT.LOWER = SEED.LOWER;
     1060     9844    2      CHECKSUM.LH = CHECKSUM_BINARY;
     1061     9845    3      DO M = 0 TO CHECKSUM_SIZE - 1;
     1062     9846    3         CHECKSUM_SPLIT.LOWER = CHECKSUM_DATA.LOWER (M);
     1063     9847    3         CHECKSUM.LH = CHECKSUM.LH + CHECKSUM_BINARY;
     1064     9848    3         CHECKSUM_SPLIT.LOWER = CHECKSUM_DATA.UPPER (M);
     1065     9849    3         CHECKSUM.UH = CHECKSUM.UH + CHECKSUM_BINARY;
     1066     9850    3      END;
     1067     9851    3      DO WHILE (CHECKSUM.LOWER.UPPER ~= 0 OR
     1068     9852    3              CHECKSUM.UPPER.UPPER ~= 0);
     1069     9853    3         CHECKSUM_SPLIT.LOWER = CHECKSUM.LOWER.UPPER;
     1070     9854    3         CHECKSUM.UH = CHECKSUM.UH + CHECKSUM_BINARY;
     1071     9855    3         CHECKSUM.LOWER.UPPER = 0;
     1072     9856    3         CHECKSUM_SPLIT.LOWER = CHECKSUM.UPPER.UPPER;
     1073     9857    3         CHECKSUM.LH = CHECKSUM.LH + CHECKSUM_BINARY;
     1074     9858    3         CHECKSUM.UPPER.UPPER = 0;
     1075     9859    3      END;
     1076     9860    2      CHECKSUM.LOWER.UPPER = CHECKSUM.UPPER.LOWER;
     1077     9861    2      CHECKSUM_LOCATION = CHECKSUM.LH;
     1078     9862    2      RETURN;
     1079     9863
     1080     9864    2   END TOL$CHECKSUM;
     1081     9865        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:39   
     1082     9866    1   TOL$GET_CATALOG: ENTRY (KEY_VALUE,
     1083     9867    1              LOAD_OFFSET,
     1084     9868    1              CALL_SEQUENCE,
     1085     9869    1              MAX_LOAD,
     1086     9870    1              LOAD_SIZE,
     1087     9871    1              ERROR_CODE) ALTRET;
     1088     9872
     1089     9873    1      CALL TOL$GET_BUFFER;
     1090     9874    1      CALL_SEQ$ = ADDR (CALL_SEQUENCE);
     1091     9875    1      CALL TOL$OPEN_DECKFILE;
     1092     9876    1      STATUS$ = ADDR (CALL_SEQUENCE);
     1093     9877    1      STATUSP.ADDRESS = CALL_SEQUENCE.STATUSP;
     1094     9878    1      CALL TOL$CHECK_CALL_SEQUENCE
     1095     9879    1              (KEY_VALUE,
     1096     9880    1              LOAD_OFFSET,
     1097     9881    1              CALL_SEQUENCE,
     1098     9882    1              MAX_LOAD,
     1099     9883    1              LOAD_SIZE,
     1100     9884    1              ERROR_CODE,
     1101     9885    1              EDIT_NAME,
     1102     9886    1              'D',
     1103     9887    1              STATUS$,
     1104     9888    1              DCW,
     1105     9889    1              DATA_SIZE) ALTRET (CATALOG_RETURN_ERROR);
     1106     9890    1      CATALOG_INDEX = 0;
     1107     9891    1      CATALOG_DECKS (0) = 0;
     1108     9892    1      CATALOG_COUNT = 0;
     1109     9893    1      IF (KEY_VALUE ~= MASTER_CATALOG_KEY)
     1110     9894    1      THEN CALL TOL$READ_MASTER_CATALOG;
     1111     9895    1      ELSE CALL TOL$READ_CATALOG (KEY_VALUE);
     1112     9896    1      CALL TOL$SET_CATALOG_SEQUENCE ALTRET (CATALOG_RETURN_ERROR);
     1113     9897    1      IF (CALL_SEQUENCE.NEXT_ENTRY = CATALOG_DATA.ENTRY_COUNT + 1)
     1114     9898    1      THEN IF (CATALOG_INDEX = CATALOG_COUNT)
     1115     9899    2         THEN DO;
     1116     9900    2                 CATALOG_DATA.ENTRY_COUNT = CATALOG_DATA.ENTRY_COUNT - 1;
     1117     9901    2                 CALL TOL$SET_CATALOG_SEQUENCE ALTRET (CATALOG_RETURN_ERROR);
     1118     9902    2              END;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:40   
     1119     9903    2         ELSE DO;
     1120     9904    2                 CALL_SEQUENCE_MORE.MORE = '0'B;
     1121     9905    2                 CALL_SEQUENCE.CATALOG# = 0;
     1122     9906    2                 CATALOG_INDEX = CATALOG_INDEX + 1;
     1123     9907    2                 CATALOG_DECK# = CATALOG_DECKS (CATALOG_INDEX);
     1124     9908    2                 CALL TOL$READ_CATALOG (KEY_VALUE);
     1125     9909    2                 CALL TOL$SET_CATALOG_SEQUENCE ALTRET (CATALOG_RETURN_ERROR);
     1126     9910    2              END;
     1127     9911    1      CATALOG_ENTRY_KEY.DECK# = CATALOG_DATA.DECK#;
     1128     9912    1      LOAD_SIZE = 0;
     1129     9913    1      DO CATALOG_ENTRY_KEY.ENTRY# = CALL_SEQUENCE.NEXT_ENTRY TO
     1130     9914    2              CATALOG_DATA.ENTRY_COUNT;
     1131     9915    2         CALL TOL$READ_ENTRY;
     1132     9916    2         CALL TOL$MOVE_ENTRY ALTRET (CATALOG_RETURN_ERROR);
     1133     9917    2      END;
     1134     9918    1      IF (CATALOG_INDEX ~= CATALOG_COUNT)
     1135     9919    2      THEN DO;
     1136     9920    2              DATA_SIZE = 0;
     1137     9921    2              CALL TOL$MOVE_ENTRY ALTRET (CATALOG_RETURN_ERROR);
     1138     9922    2           END;
     1139     9923    1      ELSE CALL_SEQUENCE.NO_MORE = -1;
     1140     9924    1      CALL TOL$FREE_BUFFER;
     1141     9925    1      RETURN;
     1142     9926
     1143     9927    1   CATALOG_RETURN_ERROR:
     1144     9928    1      CALL TOL$FREE_BUFFER;
     1145     9929    1      ALTRETURN;
     1146     9930
     1147     9931        /* END TOL$GET_CATALOG */
     1148     9932        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:41   
     1149     9933    1   TOL$MOVE_ENTRY: PROC ALTRET;
     1150     9934
     1151     9935    2      IF (DATA_SIZE < 6)
     1152     9936    3      THEN DO;
     1153     9937    3              ERROR_CODE.LOC = ERR#H;
     1154     9938    3              ERROR_CODE.ERR = ERR#HO;
     1155     9939    3              CALL_SEQUENCE.NEXT_ENTRY = CATALOG_ENTRY_KEY.ENTRY#;
     1156     9940    3              ALTRETURN;
     1157     9941    3           END;
     1158     9942    2      CALL TOL$SAVE_DATA
     1159     9943    2              (ADDR (OBJECT_KEY),
     1160     9944    2              6,
     1161     9945    2              DCW,
     1162     9946    2              STATUS,
     1163     9947    2              ADDR (SPLIT_LOAD),
     1164     9948    2              DATA_SIZE,
     1165     9949    2              CALL_SEQUENCE) ALTRET (CANT_HAPPEN);
     1166     9950    2      CALL TOL$CHECKSUM
     1167     9951    2              (CALL_SEQUENCE.CHECKSUM,
     1168     9952    2              ADDR (SAVED_KEY),
     1169     9953    2              6,
     1170     9954    2              CALL_SEQUENCE.CHECKSUM);
     1171     9955    2      LOAD_SIZE = LOAD_SIZE + 6;
     1172     9956    2      RETURN;
     1173     9957
     1174     9958    2   CANT_HAPPEN: CALL TOL$BAD_CARD (VECTOR (ER#25));
     1175     9959
     1176     9960    2   END TOL$MOVE_ENTRY;
     1177     9961        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:42   
     1178     9962    1   TOL$READ_CATALOG: PROC (KEY_VALUE) ;
     1179     9963
     1180     9964    2      DCL 1 KEY_VALUE ALIGNED,
     1181     9965    2            2 SIZE UBIN (9) UNAL,
     1182     9966    2            2 DATA CHAR (23) UNAL;
     1183     9967
     1184     9968        /* Code */
     1185     9969
     1186     9970    2      CATALOG_KEY = KEY_VALUE;
     1187     9971    2      IF (CATALOG_KEY.SIZE = 23)
     1188     9972    2      THEN CATALOG_KEY.SPLIT.DECK# = CATALOG_DECK#;
     1189     9973    2      ELSE IF (CATALOG_KEY ~= MASTER_CATALOG_KEY)
     1190     9974    2         THEN CALL TOL$BAD_CARD (VECTOR (ER#30));
     1191     9975    2      CALL M$READ (READ_CATALOG_DATA) ALTRET (BAD_CATALOG_READ);
     1192     9976    2      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;
     1193     9977    2      IF (DECKFILE_ARS# ~= 8)
     1194     9978    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#31));
     1195     9979    2      RETURN;
     1196     9980
     1197     9981    2   BAD_CATALOG_READ:
     1198     9982    2      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)
     1199     9983    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#62));
     1200     9984    2      ELSE CALL TOL$BAD_CARD (VECTOR (ER#32));
     1201     9985
     1202     9986    2   END TOL$READ_CATALOG;
     1203     9987        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:43   
     1204     9988    1   TOL$READ_ENTRY: PROC ALTRET;
     1205     9989
     1206     9990    2      CALL M$READ (READ_CATALOG_ENTRY) ALTRET (BAD_ENTRY_READ);
     1207     9991    2      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;
     1208     9992    2      IF (DECKFILE_ARS# ~= 24)
     1209     9993    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#40));
     1210     9994    2      IF (OBJECT_KEY.SIZE ~= 23)
     1211     9995    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#41));
     1212     9996    2      SAVED_KEY = OBJECT_KEY;
     1213     9997    2      IF (KEY_VALUE = MASTER_CATALOG_KEY)
     1214     9998    2      THEN OBJECT_KEY.SPLIT.CLEAR = ' ';
     1215     9999    2      RETURN;
     1216    10000
     1217    10001    2   BAD_ENTRY_READ:
     1218    10002    2      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)
     1219    10003    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#63));
     1220    10004    2      ELSE CALL TOL$BAD_CARD (VECTOR (ER#42));
     1221    10005
     1222    10006    2   END TOL$READ_ENTRY;
     1223    10007        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:44   
     1224    10008    1   TOL$READ_MASTER_CATALOG: PROC;
     1225    10009
     1226    10010    2      CALL TOL$READ_CATALOG (MASTER_CATALOG_KEY);
     1227    10011    2      CATALOG_ENTRY_KEY.DECK# = 1;
     1228    10012    3      DO CATALOG_ENTRY_KEY.ENTRY# = 1 TO CATALOG_DATA.ENTRY_COUNT;
     1229    10013    3         CALL TOL$READ_ENTRY;
     1230    10014    3         IF (OBJECT_KEY.SPLIT.DATA = KEY_VALUE.DATA)
     1231    10015    4         THEN DO;
     1232    10016    4                 CATALOG_DECKS (CATALOG_INDEX) = OBJECT_KEY.SPLIT.DECK#;
     1233    10017    4                 CATALOG_INDEX = CATALOG_INDEX + 1;
     1234    10018    4              END;
     1235    10019    3      END;
     1236    10020    2      CATALOG_COUNT = CATALOG_INDEX - 1;
     1237    10021    2      CATALOG_DECK# = 0;
     1238    10022    2      IF (CALL_SEQUENCE.CATALOG# = 0 OR CATALOG_INDEX = 0)
     1239    10023    3      THEN DO;
     1240    10024    3              CATALOG_DECK# = CATALOG_DECKS (0);
     1241    10025    3              CATALOG_INDEX = 0;
     1242    10026    3           END;
     1243    10027    3      ELSE DO I = 0 TO CATALOG_COUNT;
     1244    10028    3              IF (CALL_SEQUENCE.CATALOG# = CATALOG_DECKS (I))
     1245    10029    4              THEN DO;
     1246    10030    4                      CATALOG_DECK# = CATALOG_DECKS (I);
     1247    10031    4                      CATALOG_INDEX = I;
     1248    10032    4                   END;
     1249    10033    3           END;
     1250    10034    2      IF (CATALOG_DECK# = 0)
     1251    10035    2      THEN CATALOG_DATA = '0'B;
     1252    10036    2      ELSE CALL TOL$READ_CATALOG (KEY_VALUE);
     1253    10037    2      RETURN;
     1254    10038
     1255    10039    2   END TOL$READ_MASTER_CATALOG;
     1256    10040        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:45   
     1257    10041    1   TOL$SET_CATALOG_SEQUENCE: PROC ALTRET;
     1258    10042
     1259    10043    2      IF (CALL_SEQUENCE_MORE.MORE ~= '0'B)
     1260    10044    2      THEN IF (CALL_SEQUENCE.CATALOG# ~= CATALOG_DATA.DECK# OR
     1261    10045    2                 CALL_SEQUENCE.NEXT_ENTRY < 2 OR
     1262    10046    2                 CALL_SEQUENCE.NEXT_ENTRY > CATALOG_DATA.ENTRY_COUNT + 1 OR
     1263    10047    2                 CALL_SEQUENCE.ENTRY_COUNT ~= CATALOG_DATA.ENTRY_COUNT OR
     1264    10048    2                 CALL_SEQUENCE.CATALOG_CKSUM ~= CATALOG_DATA.CHECKSUM OR
     1265    10049    2                 CALL_SEQUENCE.CHECKSUM = 0)
     1266    10050    3         THEN DO;
     1267    10051    3                 ERROR_CODE.LOC = ERR#J;
     1268    10052    3                 ERROR_CODE.ERR = ERR#J;
     1269    10053    3                 ALTRETURN;
     1270    10054    3              END;
     1271    10055    2         ELSE /* Do Nothing */ ;
     1272    10056    3      ELSE DO;
     1273    10057    3              CALL_SEQUENCE.CATALOG# = CATALOG_DATA.DECK#;
     1274    10058    3              CALL_SEQUENCE.ENTRY_COUNT = CATALOG_DATA.ENTRY_COUNT;
     1275    10059    3              CALL_SEQUENCE.CATALOG_CKSUM = CATALOG_DATA.CHECKSUM;
     1276    10060    3              CALL_SEQUENCE.CHECKSUM = CATALOG_CONTROL.SEED;
     1277    10061    3              CALL_SEQUENCE.NEXT_ENTRY = 1;
     1278    10062    3           END;
     1279    10063    2      IF (IONTP_FOUND ~= 0)
     1280    10064    3      THEN DO;
     1281    10065    3              ERROR_CODE.LOC = ERR#K;
     1282    10066    3              ERROR_CODE.ERR = ERR#K;
     1283    10067    3              ALTRETURN;
     1284    10068    3           END;
     1285    10069    2      RETURN;
     1286    10070
     1287    10071    2   END TOL$SET_CATALOG_SEQUENCE;
     1288    10072        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:46   
     1289    10073    1   TOL$GET_DECK: ENTRY (KEY_VALUE,
     1290    10074    1              LOAD_OFFSET,
     1291    10075    1              CALL_SEQUENCE,
     1292    10076    1              MAX_LOAD,
     1293    10077    1              LOAD_SIZE,
     1294    10078    1              ERROR_CODE,
     1295    10079    1              EDIT_NAME) ALTRET ;
     1296    10080
     1297    10081    1      CALL TOL$GET_BUFFER;
     1298    10082    1      CALL_SEQ$ = ADDR (CALL_SEQUENCE);
     1299    10083    1      CALL TOL$OPEN_DECKFILE;
     1300    10084    1      STATUS$ = ADDR (CALL_SEQUENCE);
     1301    10085    1      STATUSP.ADDRESS = CALL_SEQUENCE.STATUSP;
     1302    10086    1      CALL TOL$READ_OBJECT ALTRET (DECK_RETURN_ERROR);
     1303    10087    1      CALL TOL$CHECK_CALL_SEQUENCE
     1304    10088    1              (KEY_VALUE,
     1305    10089    1              LOAD_OFFSET,
     1306    10090    1              CALL_SEQUENCE,
     1307    10091    1              MAX_LOAD,
     1308    10092    1              LOAD_SIZE,
     1309    10093    1              ERROR_CODE,
     1310    10094    1              EDIT_NAME,
     1311    10095    1              OBJECT.BCD.LOAD_TYPE,
     1312    10096    1              STATUS$,
     1313    10097    1              DCW,
     1314    10098    1              DATA_SIZE) ALTRET (DECK_RETURN_ERROR);
     1315    10099    1      CALL TOL$SET_RELOCATION;
     1316    10100    1      CALL TOL$SET_DATA_SEQUENCE ALTRET (DECK_RETURN_ERROR);
     1317    10101    1      CALL TOL$READ_BINARY;
     1318    10102    1      CALL TOL$READ_PATCHES;
     1319    10103    1      CALL TOL$MOVE_DATA ALTRET (DECK_RETURN_ERROR);
     1320    10104    1      IF (OBJECT.BCD.ASSEMBLER = 'M' AND
     1321    10105    1              OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT ~= 2)
     1322    10106    1      THEN CALL TOL$RECALCULATE_MPC_CHECKSUM;
     1323    10107    1      IF ADDR (EDIT_NAME) = ADDR (NIL)
     1324    10108    1      THEN /* Not used for MME CATADT or MME DATADT */ ;
     1325    10109    1      ELSE EDIT_NAME = OBJECT.BCD.LBL ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:47   
     1326    10110    1      CALL TOL$FREE_BUFFER;
     1327    10111    1      RETURN;
     1328    10112
     1329    10113    1   DECK_RETURN_ERROR:
     1330    10114    1      CALL TOL$FREE_BUFFER;
     1331    10115    1      ALTRETURN;
     1332    10116
     1333    10117        /* END TOL$GET_DECK */
     1334    10118        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:48   
     1335    10119    1   TOL$GET_NIO_DECK: ENTRY (KEY_VALUE,
     1336    10120    1              LOAD_OFFSET,
     1337    10121    1              CALL_SEQUENCE,
     1338    10122    1              MAX_LOAD,
     1339    10123    1              LOAD_SIZE,
     1340    10124    1              ERROR_CODE,
     1341    10125    1              EDIT_NAME) ALTRET ;
     1342    10126
     1343    10127    1      CALL_SEQ$ = ADDR (CALL_SEQUENCE) ;
     1344    10128    1      CALL TOL$OPEN_DECKFILE ;
     1345    10129    1      STATUS$ = PINCRW (IS$, CALL_SEQUENCE.STATUSP) ;
     1346    10130
     1347    10131    1      OBJECT_KEY = KEY_VALUE ;
     1348    10132    1      CALL M$READ (READ_OBJECT_CARD) ALTRET (BAD_READ) ;
     1349    10133    1      CALL_SEQ$ -> TOM$SEG.OBJECT = OBJECT_ ;
     1350    10134
     1351    10135    1      DECK_KEY.DECK# = OBJECT.DECK# ;
     1352    10136    1      READ_BINARY_DECK.BUF_ = VECTOR (CALL_SEQ$ -> TOM$SEG.SECTORS) ;
     1353    10137    1      CALL M$READ (READ_BINARY_DECK) ALTRET (BAD_READ) ;
     1354    10138    1      CALL_SEQ$ -> TOM$SEG.LAST_SECTOR = OBJECT.BINARY_COUNT - 1 ;
     1355    10139
     1356    10140    1      DKEND_KEY.DECK# = OBJECT.DECK# ;
     1357    10141    1      DKEND_KEY.CARD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1 ;
     1358    10142    1      CALL M$READ (READ_DKEND_CARD) ALTRET (BAD_READ) ;
     1359    10143    1      CALL_SEQ$ -> TOM$SEG.DKEND = DKEND_CARD_ ;
     1360    10144
     1361    10145    1      LOAD_SIZE = OBJECT.LOAD_SIZE ;
     1362    10146    1      RETURN ;
     1363    10147
     1364    10148    1   BAD_READ:
     1365    10149    1      CALL TOL$BAD_CARD (VECTOR (ER#74)) ;
     1366    10150
     1367    10151        /* END TOL$GET_NIO_DECK */
     1368    10152        %EJECT ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:49   
     1369    10153    1   TOL$CHECK_CHECKSUM: PROC (CHECKSUM_SEED,
     1370    10154    1              CHECKSUM_START$,
     1371    10155    1              CHECKSUM_SIZE,
     1372    10156    1              CHECKSUM_LOCATION,
     1373    10157    1              ERR_VEC);
     1374    10158
     1375    10159        /* Parameters */
     1376    10160
     1377    10161    2      DCL CHECKSUM_LOCATION UBIN (36) ALIGNED;
     1378    10162    2      DCL CHECKSUM_SEED UBIN (36) ALIGNED;
     1379    10163    2      DCL CHECKSUM_SIZE UBIN (36) ALIGNED;
     1380    10164    2      DCL CHECKSUM_START$ PTR ALIGNED;
     1381    10165    2      DCL ERR_VEC BIT (72) DALIGNED;
     1382    10166
     1383    10167    2      DCL CHECKSUM_CHECK UBIN (36) ALIGNED;
     1384    10168
     1385    10169        /* Code */
     1386    10170
     1387    10171    2      CALL TOL$CHECKSUM
     1388    10172    2              (CHECKSUM_SEED,
     1389    10173    2              CHECKSUM_START$,
     1390    10174    2              CHECKSUM_SIZE,
     1391    10175    2              CHECKSUM_CHECK);
     1392    10176    2      IF (CHECKSUM_CHECK ~= CHECKSUM_LOCATION)
     1393    10177    2      THEN CALL TOL$BAD_CARD (ERR_VEC);
     1394    10178    2      RETURN;
     1395    10179
     1396    10180    2   END TOL$CHECK_CHECKSUM;
     1397    10181        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:50   
     1398    10182    1   TOL$CHECK_SEQ: PROC (ERR_VEC1, ERR_VEC2) ;
     1399    10183
     1400    10184    2      DCL ERR_VEC1 BIT (72) DALIGNED;
     1401    10185    2      DCL ERR_VEC2 BIT (72) DALIGNED;
     1402    10186
     1403    10187        /* Code */
     1404    10188
     1405    10189    3      DO J = 0 TO 3;
     1406    10190    3         CALL INDEX
     1407    10191    3                 (SEQ_INDEX,
     1408    10192    3                 SEQ_CHARS (J),
     1409    10193    3                 NUMERICS);
     1410    10194    3         IF (SEQ_INDEX > 9)
     1411    10195    3         THEN CALL TOL$BAD_CARD (ERR_VEC1);
     1412    10196    3      END;
     1413    10197    2      CALL CHARBIN
     1414    10198    2              (CARD_SEQ,
     1415    10199    2              SEQ);
     1416    10200    2      NEXT_SEQ = NEXT_SEQ + 1;
     1417    10201    2      IF (NEXT_SEQ ~= CARD_SEQ)
     1418    10202    2      THEN CALL TOL$BAD_CARD (ERR_VEC2);
     1419    10203    2      RETURN;
     1420    10204
     1421    10205    2   END TOL$CHECK_SEQ;
     1422    10206        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:51   
     1423    10207    1   TOL$MOVE_DATA: PROC ALTRET;
     1424    10208
     1425    10209    2      DCL RESIDUE UBIN (36) ALIGNED;
     1426    10210
     1427    10211        /* Code */
     1428    10212
     1429    10213    2      RESIDUE = STATUS.RESIDUE;
     1430    10214    3      DO WHILE (START_LOADP.ADDRESS ~= END_LOAD OR
     1431    10215    3              SKIP_LOAD ~= 0);
     1432    10216    3         IF (START_LOADP.ADDRESS = END_LOAD)
     1433    10217    4         THEN DO;
     1434    10218    4                 IF (DCW.TYPE = 0)
     1435    10219    5                 THEN DO;
     1436    10220    5                         IF (OBJECT.BCD.ASSEMBLER = 'M')
     1437    10221    5                         THEN ERROR_CODE.ERR = ERR#F;
     1438    10222    5                         ELSE ERROR_CODE.ERR = ERR#G;
     1439    10223    5                         ERROR_CODE.LOC = ERR#F;
     1440    10224    5                         CALL_SEQUENCE.DECK_OFFSET = CALL_SEQUENCE.DECK_OFFSET +
             10224                                  SPAN_UPPER;
     1441    10225    5                         STATUS.RESIDUE = 0;
     1442    10226    5                         LOAD_SIZE = SPAN_UPPER;
     1443    10227    5                         ALTRETURN;
     1444    10228    5                      END;
     1445    10229    4                 START_LOADP.ADDRESS = SKIP_LOAD;
     1446    10230    4                 SKIP_LOAD = 0;
     1447    10231    4                 CALL TOL$GET_NEXT_DCW (DCW, CALL_SEQUENCE, STATUS) ;
     1448    10232    4                 DCW.ADDRESS = DCW.ADDRESS + CHECK_RELOC ;
     1449    10233    4                 RESIDUE = STATUS.RESIDUE;
     1450    10234    4              END;
     1451    10235    3         CALL TOL$MORE_LOAD;
     1452    10236    3      END;
     1453    10237    2      LOAD_SIZE = SPAN_UPPER - RESIDUE;
     1454    10238    2      STATUS.RESIDUE = RESIDUE;
     1455    10239    2      CALL_SEQUENCE.NO_MORE = -1;
     1456    10240    2      RETURN;
     1457    10241        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:52   
     1458    10242    2   TOL$MORE_LOAD: PROC;
     1459    10243
     1460    10244    3      IF (LOAD.TYPE = 0)
     1461    10245    3      THEN START_LOADP.ADDRESS = START_LOADP.ADDRESS + LOAD.SIZE + 1;
     1462    10246    4      ELSE DO;
     1463    10247    4              IF (LOAD.ADDRESS > SPAN_UPPER + CALL_SEQUENCE.DECK_OFFSET - 1)
     1464    10248    5              THEN DO;
     1465    10249    5                      IF (SKIP_LOAD = 0)
     1466    10250    5                      THEN SKIP_LOAD = START_LOADP.ADDRESS;
     1467    10251    5                      ELSE /* Do Nothing */ ;
     1468    10252    5                      START_LOADP.ADDRESS = START_LOADP.ADDRESS + LOAD.SIZE + 1;
     1469    10253    5                   END;
     1470    10254    5              ELSE DO;
     1471    10255    5                      IF (LOAD.ADDRESS + LOAD.SIZE - 1 <
     1472    10256    5                              SPAN_LOWER + CALL_SEQUENCE.DECK_OFFSET)
     1473    10257    6                      THEN DO;
     1474    10258    6                              LOAD.TYPE = 0;
     1475    10259    6                              START_LOADP.ADDRESS = START_LOADP.ADDRESS + LOAD.SIZE + 1
             10259                                       ;
     1476    10260    6                           END;
     1477    10261    5                      ELSE CALL TOL$SAVE_LOAD;
     1478    10262    5                   END;
     1479    10263    4           END;
     1480    10264    3      RETURN;
     1481    10265        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:53   
     1482    10266    3   TOL$SAVE_LOAD: PROC;
     1483    10267
     1484    10268    4      IF (LOAD.ADDRESS < SPAN_LOWER + CALL_SEQUENCE.DECK_OFFSET)
     1485    10269    4      THEN LENGTH = SPAN_LOWER + CALL_SEQUENCE.DECK_OFFSET - LOAD.ADDRESS;
     1486    10270    5      ELSE DO;
     1487    10271    5              DATA$ = ADDR (LOAD.DATA (0));
     1488    10272    5              IF (LOAD.ADDRESS + LOAD.SIZE > SPAN_UPPER + CALL_SEQUENCE.DECK_OFFSET)
     1489    10273    5              THEN LENGTH = SPAN_UPPER + CALL_SEQUENCE.DECK_OFFSET - LOAD.ADDRESS;
     1490    10274    5              ELSE LENGTH = LOAD.SIZE;
     1491    10275    5              DATA_SIZE = LENGTH;
     1492    10276    5              SPLIT_DCW.ADDRESS = DCW.ADDRESS + LOAD.ADDRESS - SPAN_LOWER -
     1493    10277    5                      CALL_SEQUENCE.DECK_OFFSET;
     1494    10278    5              SPLIT_DCW.TYPE = DCW.TYPE;
     1495    10279    5              STATUS.RESIDUE = SPAN_UPPER - SPAN_LOWER - SPLIT_DCW.ADDRESS +
     1496    10280    5                      DCW.ADDRESS;
     1497    10281    5              CALL TOL$SAVE_DATA
     1498    10282    5                      (DATA$,
     1499    10283    5                      LENGTH,
     1500    10284    5                      SPLIT_DCW,
     1501    10285    5                      STATUS,
     1502    10286    5                      START_LOAD$,
     1503    10287    5                      DATA_SIZE,
     1504    10288    5                      CALL_SEQUENCE) ALTRET (CANT_HAPPEN);
     1505    10289    5              IF (STATUS.RESIDUE < RESIDUE)
     1506    10290    5              THEN RESIDUE = STATUS.RESIDUE;
     1507    10291    5           END;
     1508    10292    4      CALL TOL$SPLIT_LOAD_SEGMENT;
     1509    10293    4      RETURN;
     1510    10294
     1511    10295    4   CANT_HAPPEN: CALL TOL$BAD_CARD (VECTOR (ER#59));
     1512    10296        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:54   
     1513    10297    4   TOL$SPLIT_LOAD_SEGMENT: PROC;
     1514    10298
     1515    10299    5      LOAD.TYPE = 0;
     1516    10300    5      IF (LENGTH ~= LOAD.SIZE)
     1517    10301    6      THEN DO;
     1518    10302    6              SPLIT_LOAD.SIZE = LOAD.SIZE - LENGTH;
     1519    10303    6              LOAD.SIZE = LENGTH - 1;
     1520    10304    6              SPLIT_LOAD.ADDRESS = LOAD.ADDRESS + LENGTH;
     1521    10305    6              LOAD.DATA (LENGTH - 1) = SPLIT_WD1;
     1522    10306    6           END;
     1523    10307    5      START_LOADP.ADDRESS = START_LOADP.ADDRESS + LOAD.SIZE + 1;
     1524    10308    5      RETURN;
     1525    10309
     1526    10310    5   END TOL$SPLIT_LOAD_SEGMENT;
     1527    10311    4   END TOL$SAVE_LOAD;
     1528    10312    3   END TOL$MORE_LOAD;
     1529    10313    2   END TOL$MOVE_DATA;
     1530    10314        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:55   
     1531    10315    1   TOL$READ_BINARY: PROC;
     1532    10316
     1533    10317    2      CALL TOL$READ_BUFFER;
     1534    10318    2      CALL TOL$CHECK_BINARY_DATA;
     1535    10319    2      CALL TOL$RELOCATE_DATA;
     1536    10320    2      CALL TOL$MOVE_LOAD;
     1537    10321    2      RETURN;
     1538    10322        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:56   
     1539    10323    2   TOL$CHECK_BINARY_DATA: PROC;
     1540    10324
     1541    10325    3      DCL MPCBOT_BIT STATIC BIT (36) ALIGNED INIT ('444723224663'O);
     1542    10326    3      DCL MPCBOT REDEF MPCBOT_BIT UBIN (36) ALIGNED;
     1543    10327
     1544    10328        /* Code */
     1545    10329
     1546    10330    4      DO I = 0 TO OBJECT.BINARY_COUNT - 1;
     1547    10331    4         BINARY$ = ADDR (BUFFER (I));
     1548    10332    4         CALL TOL$CHECK_CARD_CHECKSUM
     1549    10333    4                 (BINARY.WD1,
     1550    10334    4                 ADDR (BINARY.RELOC),
     1551    10335    4                 22,
     1552    10336    4                 BINARY.CHECKSUM);
     1553    10337    4         IF (BINARY_LBLSEQ.LBL ~= OBJECT.BCD.LBL)
     1554    10338    4         THEN CALL TOL$BAD_CARD (VECTOR (ER#11));
     1555    10339    4         SEQ = BINARY_LBLSEQ.SEQ;
     1556    10340    4         CALL TOL$CHECK_SEQ (VECTOR (ER#12), VECTOR (ER#13));
     1557    10341    4         IF (BINARY.LOAD.TYPE ~= 4 AND BINARY.LOAD.TYPE ~= 2)
     1558    10342    4         THEN CALL TOL$BAD_CARD (VECTOR (ER#14));
     1559    10343    4      END;
     1560    10344    3      IF (OBJECT.BCD.ASSEMBLER ~= 'M')
     1561    10345    3      THEN RETURN;
     1562    10346    3      IF (BINARY.LOAD.SIZE ~= 10 OR BINARY.DATA (9) ~= MPCBOT)
     1563    10347    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#15));
     1564    10348    3      CS_OFFSET = BINARY.SPLIT.UPPER (5);
     1565    10349    3      RW_OFFSET = BINARY.SPLIT.LOWER (5);
     1566    10350    3      CSRW_OFFSET = BINARY.SPLIT.UPPER (4);
     1567    10351    3      SECOND_MPC_CK = BINARY.LOAD.ADDRESS - 2;
     1568    10352    3      IF (CSRW_OFFSET ~= 0)
     1569    10353    3      THEN FIRST_MPC_CK = CSRW_OFFSET - 2;
     1570    10354    3      ELSE FIRST_MPC_CK = 0;
     1571    10355    3      RETURN;
     1572    10356        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:57   
     1573    10357    3   TOL$CHECK_CARD_CHECKSUM: PROC (CHECKSUM_SEED,
     1574    10358    3              CHECKSUM_START$,
     1575    10359    3              CHECKSUM_SIZE,
     1576    10360    3              CHECKSUM_LOCATION);
     1577    10361
     1578    10362    4      DCL CHECKSUM_LOCATION UBIN (36) ALIGNED;
     1579    10363    4      DCL CHECKSUM_SEED UBIN (36) ALIGNED;
     1580    10364    4      DCL CHECKSUM_SIZE UBIN (36) ALIGNED;
     1581    10365    4      DCL CHECKSUM_START$ PTR ALIGNED;
     1582    10366
     1583    10367    4      DCL 1 CHECKSUM_DATA (0:22) BASED (CHECKSUM_START$) ALIGNED,
     1584    10368    4            2 UPPER UBIN (18) UNAL,
     1585    10369    4            2 LOWER UBIN (18) UNAL;
     1586    10370    4      DCL 1 CHECKSUM_SPLIT STATIC ALIGNED,
     1587    10371    4            2 UPPER UBIN (18) UNAL INIT (0),
     1588    10372    4            2 LOWER UBIN (18) UNAL;
     1589    10373    4      DCL CHECKSUM_BINARY REDEF CHECKSUM_SPLIT UBIN (36) ALIGNED;
     1590    10374        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:58   
     1591    10375        /* Code */
     1592    10376
     1593    10377    4      IF (CHECKSUM_LOCATION = 0)
     1594    10378    4      THEN RETURN;
     1595    10379    4      CALL TOL$CHECKSUM
     1596    10380    4              (CHECKSUM_SEED,
     1597    10381    4              CHECKSUM_START$,
     1598    10382    4              CHECKSUM_SIZE - 1,
     1599    10383    4              CHECKSUM.LH);
     1600    10384    4      CHECKSUM.UH = 0;
     1601    10385    4      CHECKSUM.UPPER.LOWER = CHECKSUM.LOWER.UPPER;
     1602    10386    4      CHECKSUM.LOWER.UPPER = 0;
     1603    10387    4      CHECKSUM_SPLIT.LOWER = CHECKSUM_DATA.LOWER (CHECKSUM_SIZE - 1);
     1604    10388    4      CHECKSUM.LH = CHECKSUM.LH + CHECKSUM_BINARY;
     1605    10389    4      CHECKSUM_SPLIT.LOWER = CHECKSUM_DATA.UPPER (CHECKSUM_SIZE - 1);
     1606    10390    4      CHECKSUM.UH = CHECKSUM.UH + CHECKSUM_BINARY;
     1607    10391    4      CHECKSUM_SPLIT.LOWER = CHECKSUM.LOWER.UPPER;
     1608    10392    4      CHECKSUM.UH = CHECKSUM.UH + CHECKSUM_BINARY;
     1609    10393    4      CHECKSUM.LOWER.UPPER = CHECKSUM.UPPER.LOWER;
     1610    10394    4      IF (CHECKSUM.LH ~= CHECKSUM_LOCATION)
     1611    10395    4      THEN CALL TOL$BAD_CARD (VECTOR (ER#16));
     1612    10396    4      RETURN;
     1613    10397    4   END TOL$CHECK_CARD_CHECKSUM;
     1614    10398    3   END TOL$CHECK_BINARY_DATA;
     1615    10399        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:59   
     1616    10400    2   TOL$MOVE_LOAD: PROC;
     1617    10401
     1618    10402    3      DCL 1 LOAD_SKIP STATIC ALIGNED,
     1619    10403    3            2 TYPE UBIN (3) UNAL INIT (0),
     1620    10404    3            2 SIZE UBIN (15) UNAL,
     1621    10405    3            2 * UBIN (18) UNAL;
     1622    10406    3      DCL LOAD_WORD REDEF LOAD_SKIP UBIN (36) ALIGNED;
     1623    10407        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:60   
     1624    10408        /* Code */
     1625    10409
     1626    10410    3      START_LOADP = '0'B;
     1627    10411    3      SKIP_LOAD = 0;
     1628    10412    4      DO I = 0 TO OBJECT.BINARY_COUNT - 1;
     1629    10413    4         BINARY$ = ADDR (BUFFER (I));
     1630    10414    4         IF (BINARY.LOAD.TYPE = 2)
     1631    10415    5         THEN DO;
     1632    10416    5                 BINARY.WD1 = BINARY.RELOC (2);
     1633    10417    5                 BINARY.LOAD.TYPE = 3;
     1634    10418    5                 BINARY.RELOC (2) = BINARY.WD1;
     1635    10419    5                 IF (START_LOADP = '0'B)
     1636    10420    6                 THEN DO;
     1637    10421    6                         START_LOAD$ = ADDR (BUFFER (I));
     1638    10422    6                         START_LOADP.ADDRESS = START_LOADP.ADDRESS + 4;
     1639    10423    6                      END;
     1640    10424    5                 J = 0;
     1641    10425    6                 DO WHILE (J < 19 AND BINARY.LOAD.SIZE ~= 0);
     1642    10426    6                    K = BINARY.LOAD.SIZE;
     1643    10427    6                    BINARY.WD1 = BINARY.DATA (J + K);
     1644    10428    6                    BINARY.LOAD.TYPE = 3;
     1645    10429    6                    BINARY.DATA (J + K) = BINARY.WD1;
     1646    10430    6                    J = J + K + 1;
     1647    10431    6                    K = J;
     1648    10432    6                 END;
     1649    10433    5                 LOAD_SKIP.SIZE = 20 - K + 5;
     1650    10434    5                 BINARY.DATA (K - 1) = LOAD_WORD;
     1651    10435    5              END;
     1652    10436    4         END_LOAD = BINARYP.ADDRESS + K + 4;
     1653    10437    4      END;
     1654    10438    3      RETURN;
     1655    10439
     1656    10440    3   END TOL$MOVE_LOAD;
     1657    10441        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:61   
     1658    10442    2   TOL$READ_BUFFER: PROC;
     1659    10443
     1660    10444    3      DECK_KEY.DECK# = OBJECT.DECK#;
     1661    10445    3      READ_BINARY_DECK.BUF_ = VECTOR (BUFFER);
     1662    10446    3      CALL M$READ (READ_BINARY_DECK) ALTRET (BAD_BINARY_READ);
     1663    10447    3      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;
     1664    10448    3      IF (MOD (DECKFILE_ARS#, 104) ~= 0)
     1665    10449    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#27));
     1666    10450    3      IF (DECKFILE_ARS# / 104 ~= OBJECT.BINARY_COUNT)
     1667    10451    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#28));
     1668    10452    3      RETURN;
     1669    10453
     1670    10454    3   BAD_BINARY_READ:
     1671    10455    3      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)
     1672    10456    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#64));
     1673    10457    3      ELSE CALL TOL$BAD_CARD (VECTOR (ER#29));
     1674    10458
     1675    10459    3   END TOL$READ_BUFFER;
     1676    10460        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:62   
     1677    10461    2   TOL$RELOCATE_DATA: PROC;
     1678    10462
     1679    10463    4      DO I = 0 TO OBJECT.BINARY_COUNT - 1;
     1680    10464    4         BINARY$ = ADDR (BUFFER (I));
     1681    10465    4         IF (BINARY.LOAD.TYPE = 2)
     1682    10466    5         THEN DO;
     1683    10467    5                 RELOC = '0'B;
     1684    10468    5                 IF (RELOCATION ~= 0 )
     1685    10469    6                 THEN DO;
     1686    10470    6                         CALL TOL$MOVE_RELOCATION_BITS;
     1687    10471    6                         CALL TOL$SET_RELOCATION_WORDS;
     1688    10472    6                      END;
     1689    10473    5                 J = 0;
     1690    10474    5                 K = 0;
     1691    10475    6                 DO WHILE (K < 19 AND BINARY.LOAD.SIZE ~= 0);
     1692    10476    6                    CALL TOL$RELOCATE_WORDS;
     1693    10477    6                    K = K + BINARY.LOAD.SIZE + 1;
     1694    10478    6                    BINARY.WD1 = BINARY.DATA (K - 1);
     1695    10479    6                 END;
     1696    10480    5                 BINARY.WD1 = BINARY.RELOC (2);
     1697    10481    5              END;
     1698    10482    4      END;
     1699    10483    3      RETURN;
     1700    10484        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:63   
     1701    10485    3   TOL$MOVE_RELOCATION_BITS: PROC;
     1702    10486
     1703    10487    4      DCL RELOC_WORD UBIN (36) ALIGNED;
     1704    10488    4      DCL 1 RELOC_PAIR REDEF RELOC_WORD ALIGNED,
     1705    10489    4            2 BITS (0:6) UNAL,
     1706    10490    4              3 * UBIN (1) UNAL,
     1707    10491    4              3 UPPER UBIN (2) UNAL,
     1708    10492    4              3 LOWER UBIN (2) UNAL,
     1709    10493    4            2 * UBIN (1) UNAL;
     1710    10494
     1711    10495        /* Code */
     1712    10496
     1713    10497    4      L = 0;
     1714    10498    5      DO J = 0 TO 2;
     1715    10499    5         RELOC_WORD = BINARY.RELOC (J);
     1716    10500    5         IF (RELOC_WORD ~= 0)
     1717    10501    6         THEN DO K = 0 TO 6;
     1718    10502    6                 RELOC.UPPER (K + L) = RELOC_PAIR.BITS.UPPER (K);
     1719    10503    6                 RELOC.LOWER (K + L) = RELOC_PAIR.BITS.LOWER (K);
     1720    10504    6              END;
     1721    10505    5         L = L + 7;
     1722    10506    5      END;
     1723    10507    4      RETURN;
     1724    10508    4   END TOL$MOVE_RELOCATION_BITS;
     1725    10509        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:64   
     1726    10510    3   TOL$RELOCATE_WORDS: PROC;
     1727    10511
     1728    10512    4      IF (LOAD_RELOC ~= 0)
     1729    10513    5      THEN DO;
     1730    10514    5              SPLIT_SPLIT.LOWER = BINARY.LOAD.ADDRESS;
     1731    10515    5              SPLIT_DATA = SPLIT_DATA + LOAD_RELOC;
     1732    10516    5              BINARY.LOAD.ADDRESS = SPLIT_SPLIT.LOWER;
     1733    10517    5           END;
     1734    10518    4      SPLIT_SPLIT.UPPER = 0;
     1735    10519    4      IF (K = 0)
     1736    10520    4      THEN BINARY.RELOC (2) = BINARY.WD1;
     1737    10521    4      ELSE BINARY.DATA (K - 1) = BINARY.WD1;
     1738    10522    4      IF (RELOC ~= '0'B)
     1739    10523    5      THEN DO L = K TO K + BINARY.LOAD.SIZE - 1;
     1740    10524    5              IF (RELOC.UPPER (J) ~= 0)
     1741    10525    6              THEN DO;
     1742    10526    6                      SPLIT_SPLIT.LOWER = BINARY.SPLIT.UPPER (L);
     1743    10527    6                      SPLIT_DATA = SPLIT_DATA + RELOC.UPPER (J);
     1744    10528    6                      BINARY.SPLIT.UPPER (L) = SPLIT_SPLIT.LOWER;
     1745    10529    6                   END;
     1746    10530    5              IF (RELOC.LOWER (J) ~= 0)
     1747    10531    6              THEN DO;
     1748    10532    6                      SPLIT_SPLIT.LOWER = BINARY.SPLIT.LOWER (L);
     1749    10533    6                      SPLIT_DATA = SPLIT_DATA + RELOC.LOWER (J);
     1750    10534    6                      BINARY.SPLIT.LOWER (L) = SPLIT_SPLIT.LOWER;
     1751    10535    6                   END;
     1752    10536    5              J = J + 1;
     1753    10537    5           END;
     1754    10538    4      RETURN;
     1755    10539
     1756    10540    4   END TOL$RELOCATE_WORDS;
     1757    10541        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:65   
     1758    10542    3   TOL$SET_RELOCATION_WORDS: PROC;
     1759    10543
     1760    10544    5      DO J = 0 TO 18;
     1761    10545    5         IF (RELOC.UPPER (J) > 1 OR RELOC.LOWER (J) > 1)
     1762    10546    5         THEN CALL TOL$BAD_CARD (VECTOR (ER#61));
     1763    10547    5         IF (RELOC.UPPER (J) = 1)
     1764    10548    5         THEN RELOC.UPPER (J) = RELOCATION;
     1765    10549    5         ELSE RELOC.UPPER (J) = 0;
     1766    10550    5         IF (RELOC.LOWER (J) = 1)
     1767    10551    5         THEN RELOC.LOWER (J) = RELOCATION;
     1768    10552    5         ELSE RELOC.LOWER (J) = 0;
     1769    10553    5      END;
     1770    10554
     1771    10555    4      RETURN;
     1772    10556    4   END TOL$SET_RELOCATION_WORDS;
     1773    10557    3   END TOL$RELOCATE_DATA;
     1774    10558    2   END TOL$READ_BINARY;
     1775    10559        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:66   
     1776    10560    1   TOL$READ_OBJECT: PROC ALTRET;
     1777    10561    2      OBJECT_KEY = KEY_VALUE;
     1778    10562    2      IF (OBJECT_KEY.SIZE ~= 23)
     1779    10563    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#43));
     1780    10564    2      CALL M$READ (READ_OBJECT_CARD) ALTRET (BAD_OBJECT_READ);
     1781    10565    2      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;
     1782    10566    2      IF (DECKFILE_ARS# ~= 96)
     1783    10567    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#44));
     1784    10568    2      CALL TOL$CHECK_CHECKSUM
     1785    10569    2              (0,
     1786    10570    2              ADDR (OBJECT),
     1787    10571    2              23,
     1788    10572    2              OBJECT.CHECKSUM,
     1789    10573    2              VECTOR (ER#45));
     1790    10574    2      IF (OBJECT.BCD.CONTROL ~= '$' OR OBJECT.BCD.TYPE ~= 'OBJECT')
     1791    10575    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#46));
     1792    10576    2      IF (OBJECT.BCD.LOAD_TYPE ~= 'D' AND
     1793    10577    2              OBJECT.BCD.LOAD_TYPE ~= 'R' AND
     1794    10578    2              OBJECT.BCD.LOAD_TYPE ~= 'P')
     1795    10579    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#47));
     1796    10580    2      IF (OBJECT.BCD.ASSEMBLER ~= 'M' AND
     1797    10581    2              OBJECT.BCD.ASSEMBLER ~= 'G' AND
     1798    10582    2              OBJECT.BCD.ASSEMBLER ~= 'L')
     1799    10583    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#48));
     1800    10584    2      IF (OBJECT.BCD.SEQ ~= '0000')
     1801    10585    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#49));
     1802    10586    2      NEXT_SEQ = 0;
     1803    10587    2      RETURN;
     1804    10588    2   BAD_OBJECT_READ:
     1805    10589    2      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)
     1806    10590    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#65));
     1807    10591    2      ERROR_CODE.LOC = ERR#I;
     1808    10592    2      ERROR_CODE.ERR = ERR#I;
     1809    10593    2      ALTRETURN;
     1810    10594    2   END TOL$READ_OBJECT;
     1811    10595        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:67   
     1812    10596    1   TOL$READ_PATCHES: PROC;
     1813    10597
     1814    10598    2      DCL PATCH_CARD_INDEX UBIN (36) ALIGNED;
     1815    10599    2      DCL HEX_CARD_INDEX REDEF PATCH_CARD_INDEX UBIN (36) ALIGNED;
     1816    10600
     1817    10601        /* Code */
     1818    10602
     1819    10603    2      IF (OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT = 2)
     1820    10604    2      THEN RETURN;
     1821    10605    2      PATCH_KEY.DECK# = OBJECT.DECK#;
     1822    10606    2      CALL TOL$READ_DKEND;
     1823    10607    2      DO PATCH_KEY.CARD# = 1 TO
     1824    10608    3              OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 2;
     1825    10609    3         CALL TOL$READ_PATCH;
     1826    10610    3         IF (PATCH_CARD.TYPE = 'OCTAL')
     1827    10611    3         THEN CALL TOL$BUILD_OCTAL_SEGMENT;
     1828    10612    4         ELSE DO;
     1829    10613    4                 IF (PATCH_CARD.TYPE = 'HEX')
     1830    10614    5                 THEN DO;
     1831    10615    5                         IF (OBJECT.BCD.ASSEMBLER = 'M')
     1832    10616    5                         THEN CALL TOL$BUILD_HEX_SEGMENT;
     1833    10617    5                         ELSE CALL TOL$BAD_CARD (VECTOR(ER#71));
     1834    10618    5                      END;
     1835    10619    4              END;
     1836    10620    3      END;
     1837    10621    2      RETURN;
     1838    10622        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:68   
     1839    10623    2   TOL$BUILD_HEX_SEGMENT: PROC;
     1840    10624
     1841    10625    3      DCL DECK_SPLIT UBIN (36) ALIGNED;
     1842    10626    3      DCL HEX_CARD_ADDRESS UBIN (36) ALIGNED;
     1843    10627
     1844    10628    3      DCL HEX_CARD_VALUE UBIN (16) UNAL;
     1845    10629    3      DCL HEX_CARD_HEX (0:3) REDEF HEX_CARD_VALUE UBIN (4) UNAL;
     1846    10630    3      DCL 1 HEX_VALUE_SPLIT REDEF HEX_CARD_VALUE UNAL,
     1847    10631    3            2 UPPER UBIN (8) UNAL,
     1848    10632    3            2 LOWER UBIN (8) UNAL;
     1849    10633    3      DCL 1 HEX_LOAD BASED (HEX_LOAD$) ALIGNED,
     1850    10634    3            2 TYPE UBIN (3) UNAL,
     1851    10635    3            2 SIZE UBIN (15) UNAL,
     1852    10636    3            2 ADDRESS UBIN (18) UNAL,
     1853    10637    3            2 UPPER UBIN (18) UNAL,
     1854    10638    3            2 LOWER UBIN (18) UNAL;
     1855    10639    3      DCL HEX_LOAD$ PTR ALIGNED;
     1856    10640    3      DCL 1 HEX_LOADP REDEF HEX_LOAD$ ALIGNED,
     1857    10641    3            2 ADDRESS UBIN (18) UNAL,
     1858    10642    3            2 * BIT (18) UNAL;
     1859    10643           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:69   
     1860    10644        /* Code */
     1861    10645
     1862    10646    3      BINARY$ = ADDR (BUFFER (OBJECT.BINARY_COUNT - 1));
     1863    10647    3      BINARYP.ADDRESS = BINARYP.ADDRESS + 4;
     1864    10648    3      HEX_OFFSET = CS_OFFSET;
     1865    10649    3      DECK_SPLIT = 0;
     1866    10650    3      IF (HEX_CARD.CR = 'R')
     1867    10651    4      THEN DO;
     1868    10652    4              HEX_OFFSET = RW_OFFSET;
     1869    10653    4              DECK_SPLIT = CSRW_OFFSET;
     1870    10654    4              IF (DECK_SPLIT = 0)
     1871    10655    4              THEN CALL TOL$BAD_CARD (VECTOR (ER#7));
     1872    10656    4           END;
     1873    10657    3      CALL INDEX
     1874    10658    3              (HEX_CARD_INDEX,
     1875    10659    3              ' ',
     1876    10660    3              HEX_ASCII.DATA);
     1877    10661    3      IF (HEX_CARD_INDEX ~= 4)
     1878    10662    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#8));
     1879    10663    3      K = 0;
     1880    10664    3      CALL TOL$CONVERT_HEX;
     1881    10665    3      HEX_CARD_ADDRESS = HEX_CARD_VALUE;
     1882    10666    3      IF (HEX_CARD_ADDRESS < HEX_OFFSET)
     1883    10667    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#9));
     1884    10668    3      HEX_CARD_ADDRESS = HEX_CARD_ADDRESS - HEX_OFFSET;
     1885    10669    3      CALL TOL$BUILD_HEX_LOAD;
     1886    10670    3      CALL TOL$BUILD_HEX_PATCH;
     1887    10671    3      RETURN;
     1888    10672        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:70   
     1889    10673    3   TOL$BUILD_HEX_LOAD: PROC;
     1890    10674
     1891    10675    4      HEX_LOAD$ = ADDR (BUFFER);
     1892    10676    4      HEX_LOADP.ADDRESS = END_LOAD;
     1893    10677    4      IF (MOD (HEX_CARD_ADDRESS, 2) = 1)
     1894    10678    4      THEN HEX_LOAD.TYPE = 1;
     1895    10679    4      ELSE HEX_LOAD.TYPE = 2;
     1896    10680    4      HEX_LOAD.SIZE = 1;
     1897    10681    4      HEX_LOAD.ADDRESS = HEX_CARD_ADDRESS / 2 + DECK_SPLIT;
     1898    10682    4      IF (CSRW_OFFSET ~= 0)
     1899    10683    5      THEN DO;
     1900    10684    5              IF (HEX_LOAD.ADDRESS > BINARY.LOAD.ADDRESS - 2 AND
     1901    10685    5                      HEX_CARD.CR = 'R')
     1902    10686    5              THEN CALL TOL$BAD_CARD (VECTOR (ER#3));
     1903    10687    5              IF (HEX_LOAD.ADDRESS > CSRW_OFFSET - 2 AND
     1904    10688    5                      HEX_CARD.CR = 'C')
     1905    10689    5              THEN CALL TOL$BAD_CARD (VECTOR (ER#4));
     1906    10690    5           END;
     1907    10691    5      ELSE DO;
     1908    10692    5              IF (HEX_LOAD.ADDRESS > BINARY.LOAD.ADDRESS - 2)
     1909    10693    5              THEN CALL TOL$BAD_CARD (VECTOR (ER#4));
     1910    10694    5           END;
     1911    10695    4      RETURN;
     1912    10696
     1913    10697    4   END TOL$BUILD_HEX_LOAD;
     1914    10698        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:71   
     1915    10699    3   TOL$BUILD_HEX_PATCH: PROC;
     1916    10700
     1917    10701    4      K = 15;
     1918    10702    4      CALL TOL$CONVERT_HEX;
     1919    10703    4      IF (HEX_LOAD.TYPE = 2)
     1920    10704    4      THEN HEX_LOAD.UPPER = HEX_CARD_SPLIT;
     1921    10705    4      ELSE HEX_LOAD.LOWER = HEX_CARD_SPLIT;
     1922    10706    4      IF (HEX_ASCII.CHARS (19) ~= ' ')
     1923    10707    5      THEN DO;
     1924    10708    5              IF (HEX_LOAD.TYPE = 1)
     1925    10709    5              THEN CALL TOL$BAD_CARD (VECTOR (ER#6));
     1926    10710    5              K = 19;
     1927    10711    5              CALL TOL$CONVERT_HEX;
     1928    10712    5              HEX_LOAD.TYPE = 3;
     1929    10713    5              HEX_LOAD.LOWER = HEX_CARD_SPLIT;
     1930    10714    5           END;
     1931    10715    4      END_LOAD = END_LOAD + 2;
     1932    10716    4      RETURN;
     1933    10717
     1934    10718    4   END TOL$BUILD_HEX_PATCH;
     1935    10719        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:72   
     1936    10720    3   TOL$CONVERT_HEX: PROC;
     1937    10721
     1938    10722    4      L = K + 4;
     1939    10723    4      HEX_CARD_VALUE = 0;
     1940    10724    5      DO K = K TO L;
     1941    10725    5         CALL INDEX
     1942    10726    5                 (HEX_INDEX,
     1943    10727    5                 HEX_ASCII.CHARS (K),
     1944    10728    5                 NUMERICS);
     1945    10729    5         IF (HEX_INDEX > 15)
     1946    10730    5         THEN CALL TOL$BAD_CARD (VECTOR (ER#17));
     1947    10731    5         ELSE HEX_CARD_HEX (4 + K - L - 1) = HEX_INDEX;
     1948    10732    5      END;
     1949    10733    4      HEX_SPLIT.UPPER = HEX_VALUE_SPLIT.UPPER;
     1950    10734    4      HEX_SPLIT.LOWER = HEX_VALUE_SPLIT.LOWER;
     1951    10735    4      RETURN;
     1952    10736
     1953    10737    4   END TOL$CONVERT_HEX;
     1954    10738    3   END TOL$BUILD_HEX_SEGMENT;
     1955    10739        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:73   
     1956    10740    2   TOL$BUILD_OCTAL_SEGMENT: PROC;
     1957    10741
     1958    10742    3      DCL PATCH_CARD_OCTAL (0:11) UBIN (3) UNAL;
     1959    10743    3      DCL PATCH_CARD_VALUE REDEF PATCH_CARD_OCTAL UBIN (36) ALIGNED;
     1960    10744    3      DCL PATCH_CARD_START UBIN (36) ALIGNED;
     1961    10745
     1962    10746    3      DCL 1 PATCH_LOAD BASED (PATCH_LOAD$) ALIGNED,
     1963    10747    3            2 TYPE UBIN (3) UNAL,
     1964    10748    3            2 SIZE UBIN (15) UNAL,
     1965    10749    3            2 ADDRESS UBIN (18) UNAL,
     1966    10750    3            2 DATA (0:27) UBIN (36) ALIGNED,
     1967    10751    3            2 SPLIT (0:27) REDEF DATA UNAL,
     1968    10752    3              3 UPPER UBIN (18) UNAL,
     1969    10753    3              3 LOWER UBIN (18) UNAL;
     1970    10754    3      DCL PATCH_LOAD$ PTR ALIGNED;
     1971    10755    3      DCL 1 PATCH_LOADP REDEF PATCH_LOAD$ ALIGNED,
     1972    10756    3            2 ADDRESS UBIN (18) UNAL,
     1973    10757    3            2 * BIT (18) UNAL;
     1974    10758        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:74   
     1975    10759        /* Code */
     1976    10760
     1977    10761    3      CALL INDEX
     1978    10762    3              (PATCH_CARD_INDEX,
     1979    10763    3              ' ',
     1980    10764    3              PATCH_ASCII.DATA);
     1981    10765    3      IF (PATCH_CARD_INDEX = 0 OR PATCH_CARD_INDEX > 6)
     1982    10766    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#10));
     1983    10767    3      K = 0;
     1984    10768    3      PATCH_CARD_VALUE = 0;
     1985    10769    3      CALL TOL$CONVERT_OCTAL;
     1986    10770    3      PATCH_LOAD$ = ADDR (BUFFER);
     1987    10771    3      PATCH_LOADP.ADDRESS = END_LOAD;
     1988    10772    3      PATCH_LOAD.ADDRESS = PATCH_CARD_VALUE + LOAD_RELOC;
     1989    10773    3      IF (OBJECT.BCD.ASSEMBLER = 'M' AND
     1990    10774    3              PATCH_LOAD.ADDRESS < BINARY.LOAD.ADDRESS)
     1991    10775    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#73));
     1992    10776    3      PATCH_LOAD.SIZE = 0;
     1993    10777    3      PATCH_LOAD.TYPE = 3;
     1994    10778    3      PATCH_CARD_START = 15;
     1995    10779    4      DO WHILE (PATCH_CARD_START < 72);
     1996    10780    4         CALL TOL$BUILD_OCTAL_PATCH;
     1997    10781    4      END;
     1998    10782    3      END_LOAD = END_LOAD + PATCH_LOAD.SIZE + 1;
     1999    10783    3      RETURN;
     2000    10784        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:75   
     2001    10785    3   TOL$BUILD_OCTAL_PATCH: PROC;
     2002    10786    4      CALL INDEX
     2003    10787    4              (PATCH_CARD_INDEX,
     2004    10788    4              ',',
     2005    10789    4              PATCH_ASCII.DATA,
     2006    10790    4              PATCH_CARD_START);
     2007    10791    4      IF (PATCH_CARD_INDEX > 71)
     2008    10792    4      THEN CALL INDEX
     2009    10793    4                 (PATCH_CARD_INDEX,
     2010    10794    4                 ' ',
     2011    10795    4                 PATCH_ASCII.DATA,
     2012    10796    4                 PATCH_CARD_START);
     2013    10797    4      K = PATCH_CARD_START;
     2014    10798    4      RELOC = '0'B;
     2015    10799    4      PATCH_CARD_VALUE = 0;
     2016    10800    4      CALL TOL$ADJUST_PATCH_INDEXS;
     2017    10801    4      IF (PATCH_CARD_START > 71)
     2018    10802    4      THEN RETURN;
     2019    10803    4      CALL TOL$CONVERT_OCTAL;
     2020    10804    4      PATCH_LOAD.DATA (PATCH_LOAD.SIZE) = PATCH_CARD_VALUE;
     2021    10805    4      PATCH_LOAD.SIZE = PATCH_LOAD.SIZE + 1;
     2022    10806    4      IF (RELOC ~= '0'B)
     2023    10807    5      THEN DO;
     2024    10808    5              SPLIT_SPLIT.UPPER = 0;
     2025    10809    5              SPLIT_SPLIT.LOWER = PATCH_LOAD.SPLIT.UPPER (PATCH_LOAD.SIZE - 1);
     2026    10810    5              SPLIT_DATA = SPLIT_DATA + RELOC.UPPER (0);
     2027    10811    5              PATCH_LOAD.SPLIT.UPPER (PATCH_LOAD.SIZE - 1) = SPLIT_SPLIT.LOWER;
     2028    10812    5              SPLIT_SPLIT.LOWER = PATCH_LOAD.SPLIT.LOWER (PATCH_LOAD.SIZE - 1);
     2029    10813    5              SPLIT_DATA = SPLIT_DATA + RELOC.LOWER (0);
     2030    10814    5              PATCH_LOAD.SPLIT.LOWER (PATCH_LOAD.SIZE - 1) = SPLIT_SPLIT.LOWER;
     2031    10815    5           END;
     2032    10816    4      IF (PATCH_ASCII.CHARS (PATCH_CARD_INDEX) = 'R')
     2033    10817    4      THEN PATCH_CARD_INDEX = PATCH_CARD_INDEX + 1;
     2034    10818    4      PATCH_CARD_START = PATCH_CARD_INDEX + 1;
     2035    10819    4      RETURN;
     2036    10820        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:76   
     2037    10821    4   TOL$ADJUST_PATCH_INDEXS: PROC;
     2038    10822
     2039    10823    5      IF (PATCH_CARD_INDEX = PATCH_CARD_START)
     2040    10824    6      THEN DO;
     2041    10825    6              IF (PATCH_ASCII.CHARS (PATCH_CARD_START - 1) = ',' OR
     2042    10826    6                      PATCH_CARD_START = 15)
     2043    10827    6              THEN CALL TOL$BAD_CARD (VECTOR (ER#1));
     2044    10828    6              PATCH_CARD_START = 72;
     2045    10829    6              RETURN;
     2046    10830    6           END;
     2047    10831    5      IF (PATCH_ASCII.CHARS (PATCH_CARD_START) = 'R')
     2048    10832    6      THEN DO;
     2049    10833    6              K = K + 1;
     2050    10834    6              RELOC.UPPER (0) = RELOCATION;
     2051    10835    6           END;
     2052    10836    5      IF (PATCH_ASCII.CHARS (PATCH_CARD_INDEX - 1) = 'R')
     2053    10837    6      THEN DO;
     2054    10838    6              PATCH_CARD_INDEX = PATCH_CARD_INDEX - 1;
     2055    10839    6              RELOC.LOWER (0) = RELOCATION;
     2056    10840    6           END;
     2057    10841    5      IF (PATCH_CARD_INDEX - 1 < K)
     2058    10842    5      THEN CALL TOL$BAD_CARD (VECTOR (ER#2));
     2059    10843    5      RETURN;
     2060    10844
     2061    10845    5   END TOL$ADJUST_PATCH_INDEXS;
     2062    10846    4   END TOL$BUILD_OCTAL_PATCH;
     2063    10847        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:77   
     2064    10848    3   TOL$CONVERT_OCTAL: PROC;
     2065    10849
     2066    10850    4      IF (PATCH_CARD_INDEX - K > 12)
     2067    10851    4      THEN CALL TOL$BAD_CARD (VECTOR (ER#18));
     2068    10852    4      L = PATCH_CARD_INDEX - 1;
     2069    10853    5      DO K = K TO L;
     2070    10854    5         CALL INDEX
     2071    10855    5                 (OCTAL_INDEX,
     2072    10856    5                 PATCH_ASCII.CHARS (K),
     2073    10857    5                 NUMERICS);
     2074    10858    5         IF (OCTAL_INDEX > 7)
     2075    10859    5         THEN CALL TOL$BAD_CARD (VECTOR (ER#19));
     2076    10860    5         ELSE PATCH_CARD_OCTAL (12 + K - L - 1) = OCTAL_INDEX;
     2077    10861    5      END;
     2078    10862    4      RETURN;
     2079    10863
     2080    10864    4   END TOL$CONVERT_OCTAL;
     2081    10865    3   END TOL$BUILD_OCTAL_SEGMENT;
     2082    10866        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:78   
     2083    10867    2   TOL$READ_DKEND: PROC;
     2084    10868
     2085    10869    3      DKEND_KEY.DECK# = OBJECT.DECK#;
     2086    10870    3      DKEND_KEY.CARD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1;
     2087    10871    3      I = OBJECT.BINARY_COUNT;
     2088    10872    3      CALL M$READ (READ_DKEND_CARD) ALTRET (BAD_DKEND_READ);
     2089    10873    3      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;
     2090    10874    3      IF (DECKFILE_ARS# ~= 84)
     2091    10875    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#33));
     2092    10876    3      CALL TOL$CHECK_CHECKSUM
     2093    10877    3              (0,
     2094    10878    3              ADDR (DKEND_CARD),
     2095    10879    3              20,
     2096    10880    3              DKEND_CARD.CHECKSUM,
     2097    10881    3              VECTOR (ER#34));
     2098    10882    3      IF (DKEND_CARD.CONTROL ~= '$' OR DKEND_CARD.TYPE ~= 'DKEND')
     2099    10883    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#35));
     2100    10884    3      IF (DKEND_CARD.LBL ~= OBJECT.BCD.LBL)
     2101    10885    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#36));
     2102    10886    3      SEQ = DKEND_CARD.SEQ;
     2103    10887    3      CALL TOL$CHECK_SEQ (VECTOR (ER#37), VECTOR (ER#38));
     2104    10888    3      RETURN;
     2105    10889
     2106    10890    3   BAD_DKEND_READ:
     2107    10891    3      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)
     2108    10892    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#66));
     2109    10893    3      ELSE CALL TOL$BAD_CARD (VECTOR (ER#39));
     2110    10894
     2111    10895    3   END TOL$READ_DKEND;
     2112    10896        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:79   
     2113    10897    2   TOL$READ_PATCH: PROC;
     2114    10898
     2115    10899    3      CALL M$READ (READ_PATCH_CARD) ALTRET (BAD_PATCH_READ);
     2116    10900    3      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;
     2117    10901    3      IF (DECKFILE_ARS# ~= 84)
     2118    10902    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#50));
     2119    10903    3      CALL TOL$CHECK_CHECKSUM
     2120    10904    3              (0,
     2121    10905    3              ADDR (PATCH_CARD),
     2122    10906    3              20,
     2123    10907    3              PATCH_CARD.CHECKSUM,
     2124    10908    3              VECTOR (ER#51));
     2125    10909    3      IF (PATCH_CARD.TYPE ~= 'OCTAL' AND
     2126    10910    3              PATCH_CARD.TYPE ~= 'HEX')
     2127    10911    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#52));
     2128    10912    3      IF (PATCH_CARD.LBL ~= OBJECT.BCD.LBL)
     2129    10913    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#53));
     2130    10914    3      IF (PATCH_CARD.TYPE = 'OCTAL')
     2131    10915    3      THEN RETURN;
     2132    10916    3      IF (HEX_CARD.CR ~= 'C' AND
     2133    10917    3              HEX_CARD.CR ~= 'R')
     2134    10918    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#54));
     2135    10919    3      IF (HEX_CARD.REVISION ~= DKEND_CARD.REVISION)
     2136    10920    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#55));
     2137    10921    3      IF (OBJECT.BCD.ASSEMBLER ~= 'M')
     2138    10922    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#56));
     2139    10923    3      RETURN;
     2140    10924
     2141    10925    3   BAD_PATCH_READ:
     2142    10926    3      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)
     2143    10927    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#67));
     2144    10928    3      ELSE CALL TOL$BAD_CARD (VECTOR (ER#57));
     2145    10929
     2146    10930    3   END TOL$READ_PATCH;
     2147    10931    2   END TOL$READ_PATCHES;
     2148    10932        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:80   
     2149    10933    1   TOL$RECALCULATE_MPC_CHECKSUM: PROC;
     2150    10934
     2151    10935    2      DCL 1 STATUS_SAVE ALIGNED,
     2152    10936    2            2 HARDWARE_STATUS BIT (36) ALIGNED,
     2153    10937    2            2 LAST_DCW_POINTER UBIN (18) UNAL,
     2154    10938    2            2 RESIDUE UBIN (18) UNAL;
     2155    10939
     2156    10940        /* Code */
     2157    10941
     2158    10942    2      STATUS_SAVE.LAST_DCW_POINTER = CALL_SEQUENCE.STATUSP - 1;
     2159    10943    2      SPAN_UPPER = LOAD_RELOC ;
     2160    10944    2      CALL TOL$GET_NEXT_DCW (SPLIT_DCW, CALL_SEQUENCE, STATUS_SAVE) ;
     2161    10945    2      SPLIT_DCW.ADDRESS = SPLIT_DCW.ADDRESS+ LOAD_RELOC ;
     2162    10946    2      IF (FIRST_MPC_CK ~= 0)
     2163    10947    3      THEN DO;
     2164    10948    3              LENGTH = FIRST_MPC_CK;
     2165    10949    3              DATA$ = ADDR (BUFFER);
     2166    10950    3              DATA_SIZE = LENGTH;
     2167    10951    3              CALL TOL$GET_DATA
     2168    10952    3                      (DATA$,
     2169    10953    3                      LENGTH,
     2170    10954    3                      SPLIT_DCW,
     2171    10955    3                      STATUS_SAVE,
     2172    10956    3                      ADDR (SPLIT_LOAD),
     2173    10957    3                      DATA_SIZE,
     2174    10958    3                      CALL_SEQUENCE);
     2175    10959    3              DATA$ = ADDR (BUFFER);
     2176    10960    3              CALL TOL$CALCULATE_MPC_CHECKSUM;
     2177    10961    3              FIRST_MPC_CK = FIRST_MPC_CK + 1;
     2178    10962    3           END;
     2179    10963    2      LENGTH = SECOND_MPC_CK - FIRST_MPC_CK;
     2180    10964    2      DATA$ = ADDR (BUFFER);
     2181    10965    2      DATA_SIZE = LENGTH;
     2182    10966    2      CALL TOL$GET_DATA
     2183    10967    2              (DATA$,
     2184    10968    2              LENGTH,
     2185    10969    2              SPLIT_DCW,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:81   
     2186    10970    2              STATUS_SAVE,
     2187    10971    2              ADDR (SPLIT_LOAD),
     2188    10972    2              LENGTH,
     2189    10973    2              CALL_SEQUENCE);
     2190    10974    2      DATA$ = ADDR (BUFFER);
     2191    10975    2      CALL TOL$CALCULATE_MPC_CHECKSUM;
     2192    10976    2      RETURN;
     2193    10977        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:82   
     2194    10978    2   TOL$CALCULATE_MPC_CHECKSUM: PROC;
     2195    10979
     2196    10980    3      DCL HEX_DATA (0:3) BASED (HEX$) UBIN (9) CALIGNED ;
     2197    10981    3      DCL HEX_SAVE UBIN (36) ALIGNED;
     2198    10982
     2199    10983    3      DCL HEX_CHECKSUM SBIN (36) ALIGNED;
     2200    10984    3      DCL 1 HEX_CALC REDEF HEX_CHECKSUM ALIGNED,
     2201    10985    3            2 CARRY UBIN (20) UNAL,
     2202    10986    3            2 VALUE UBIN (16) UNAL,
     2203    10987    3            2 SPLIT REDEF VALUE UNAL,
     2204    10988    3              3 UPPER UBIN (8) UNAL,
     2205    10989    3              3 LOWER UBIN (8) UNAL;
     2206    10990    3      DCL 1 HEX_FINAL REDEF HEX_CHECKSUM ALIGNED,
     2207    10991    3            2 UPPER UBIN (9) UNAL,
     2208    10992    3            2 LOWER UBIN (9) UNAL,
     2209    10993    3            2 CLEAR UBIN (18) UNAL;
     2210    10994        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:83   
     2211    10995        /* Code */
     2212    10996
     2213    10997    3      DATA_SIZE = 1;
     2214    10998    3      HEX_CHECKSUM = 0;
     2215    10999    4      DO I = 0 TO LENGTH - 1;
     2216    11000    4         HEX_SPLIT.UPPER = HEX_DATA (0);
     2217    11001    4         HEX_SPLIT.LOWER = HEX_DATA (1);
     2218    11002    4         HEX_CHECKSUM = HEX_CHECKSUM + HEX_CARD_SPLIT;
     2219    11003    4         HEX_SPLIT.UPPER = HEX_DATA (2);
     2220    11004    4         HEX_SPLIT.LOWER = HEX_DATA (3);
     2221    11005    4         HEX_CHECKSUM = HEX_CHECKSUM + HEX_CARD_SPLIT;
     2222    11006    4         HEXP.ADDRESS = HEXP.ADDRESS + 1;
     2223    11007    4      END;
     2224    11008    4      DO WHILE (HEX_CALC.CARRY ~= 0);
     2225    11009    4         HEX_SAVE = HEX_CALC.CARRY;
     2226    11010    4         HEX_CALC.CARRY = 0;
     2227    11011    4         HEX_CHECKSUM = HEX_CHECKSUM + HEX_SAVE;
     2228    11012    4      END;
     2229    11013    3      HEX_CHECKSUM = -HEX_CHECKSUM;
     2230    11014    3      HEX_FINAL.UPPER = HEX_CALC.SPLIT.UPPER;
     2231    11015    3      HEX_FINAL.LOWER = HEX_CALC.SPLIT.LOWER;
     2232    11016    3      HEX_FINAL.CLEAR = 0;
     2233    11017    3      CALL TOL$SAVE_DATA
     2234    11018    3              (ADDR (HEX_FINAL),
     2235    11019    3              1,
     2236    11020    3              SPLIT_DCW,
     2237    11021    3              STATUS_SAVE,
     2238    11022    3              ADDR (SPLIT_LOAD),
     2239    11023    3              DATA_SIZE) ALTRET (CANT_HAPPEN);
     2240    11024    3      RETURN;
     2241    11025    3   CANT_HAPPEN: CALL TOL$BAD_CARD (VECTOR(ER#70));
     2242    11026
     2243    11027    3   END TOL$CALCULATE_MPC_CHECKSUM;
     2244    11028    2   END TOL$RECALCULATE_MPC_CHECKSUM;
     2245    11029        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:84   
     2246    11030    1   TOL$SET_DATA_SEQUENCE: PROC ALTRET;
     2247    11031
     2248    11032    2      IF (CALL_SEQUENCE_MORE.MORE.DATA ~= '0'B)
     2249    11033    3      THEN DO;
     2250    11034    3              IF (CALL_SEQUENCE.DECK# ~= OBJECT.DECK# OR
     2251    11035    3                      CALL_SEQUENCE.CARD_COUNT ~= OBJECT.TOTAL_COUNT OR
     2252    11036    3                      CALL_SEQUENCE.DECK_OFFSET = 0 OR
     2253    11037    3                      CALL_SEQUENCE.RELOCATION ~= RELOCATION_CHECK)
     2254    11038    4              THEN DO;
     2255    11039    4                      ERROR_CODE.LOC = ERR#L;
     2256    11040    4                      ERROR_CODE.ERR = ERR#L;
     2257    11041    4                      ALTRETURN;
     2258    11042    4                   END;
     2259    11043    3              ELSE /* Do Nothing */ ;
     2260    11044    3           END;
     2261    11045    3      ELSE DO;
     2262    11046    3              CALL_SEQUENCE.DECK# = OBJECT.DECK#;
     2263    11047    3              CALL_SEQUENCE.CARD_COUNT = OBJECT.TOTAL_COUNT;
     2264    11048    3           END;
     2265    11049    2      CALL_SEQUENCE.RELOCATION = RELOCATION;
     2266    11050    2      RETURN;
     2267    11051
     2268    11052    2   END TOL$SET_DATA_SEQUENCE;
     2269    11053        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:85   
     2270    11054    1   TOL$SET_RELOCATION: PROC;
     2271    11055
     2272    11056    2      IF (OBJECT.BCD.LOAD_TYPE = 'D')
     2273    11057    3      THEN DO;
     2274    11058    3              RELOCATION = 0;
     2275    11059    3              LOAD_RELOC = 0;
     2276    11060    3              RELOCATION_CHECK = 0;
     2277    11061    3              RETURN;
     2278    11062    3           END;
     2279    11063    2      IF (OBJECT.BCD.LOAD_TYPE = 'P')
     2280    11064    3      THEN DO;
     2281    11065    3              RELOCATION = 72;
     2282    11066    3              LOAD_RELOC = 72;
     2283    11067    3              RELOCATION_CHECK = 72;
     2284    11068    3              RETURN;
     2285    11069    3           END;
     2286    11070    2      RELOCATION = DCW.ADDRESS - LOAD_OFFSET ;
     2287    11071    2      LOAD_RELOC = 72;
     2288    11072    2      RELOCATION_CHECK = RELOCATION - CALL_SEQUENCE.DECK_OFFSET;
     2289    11073    2      RETURN;
     2290    11074
     2291    11075    2   END TOL$SET_RELOCATION;
     2292    11076        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:86   
     2293    11077    1   TOL$OPEN_DECKFILE: PROC;
     2294    11078
     2295    11079    2      IF (DECKFILE_DCB# ~= 0)
     2296    11080    2      THEN RETURN;
     2297    11081    2      CALL M$OPEN (OLD_DECKFILE) ALTRET (NO_DECKFILE);
     2298    11082    2      DECKFILE_DCB# = DCBNUM (M$DECKFILE);
     2299    11083    2      M$DECKFILE$ = DCBADDR (DECKFILE_DCB#);
     2300    11084    2      RETURN;
     2301    11085
     2302    11086    2   NO_DECKFILE:
     2303    11087    2      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$DCBOPEN)
     2304    11088    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#26));
     2305    11089    2      DECKFILE_DCB# = DCBNUM (M$DECKFILE);
     2306    11090    2      RETURN;
     2307    11091
     2308    11092    2   END TOL$OPEN_DECKFILE;
     2309    11093    1   END TOL$CHECK_CALL_SEQUENCE;

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:87   
--  Include file information  --

   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure TOL$CHECK_CALL_SEQUENCE.

   Procedure TOL$CHECK_CALL_SEQUENCE requires 3078 words for executable code.
   Procedure TOL$CHECK_CALL_SEQUENCE requires 134 words of local(AUTO) storage.

    No errors detected in file TOL$LOADER.:E05TSI    .

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:88   

 Object Unit name= TOL$CHECK_CALL_SEQUENCE                    File name= TOL$LOADER.:E05TOU
 UTS= JUL 30 '97 06:26:41.44 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$DECKFILE
    2  RoData even  UTS      9     11  TOL$CHECK_CALL_SEQUENCE
    3   Data  even  none  1851   3473  TOL$CHECK_CALL_SEQUENCE
    4   Proc  even  none  3078   6006  TOL$CHECK_CALL_SEQUENCE
    5  RoData even  none   277    425  TOL$CHECK_CALL_SEQUENCE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes    yes     yes      Std       11  TOL$CHECK_CALL_SEQUENCE
     4    762          yes     yes      Std        6  TOL$GET_CATALOG
     4   1673          yes     yes      Std        7  TOL$GET_DECK
     4   2007          yes     yes      Std        7  TOL$GET_NIO_DECK
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:89   

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    3    216  TOL$CARD_SEQ                       3    217  TOL$DECKFILE_ARS#
    3    220  TOL$I                              3    221  TOL$IONTP_FOUND
    3    222  TOL$J                              3    223  TOL$K
    3    224  TOL$SPAN_LOWER                     3    225  TOL$SPAN_UPPER
    3    226  TOL$BINARY$                        3    227  TOL$CALL_SEQ$
    3    230  TOL$CATALOG_ENTRY_KEY              3    232  TOL$CATALOG_KEY
    3    240  TOL$DKEND_CARD                     3    265  TOL$OBJECT
    3    315  TOL$OBJECT_KEY                     3    323  TOL$PATCH_CARD
    3    350  TOL$PATCH_KEY                      3    352  TOL$RELOC
    3    406  TOL$START_LOAD$

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 TOL$GET_BUFFER
         yes           Std       1 TOL$BAD_CARD
         yes           Std       3 TOL$GET_NEXT_DCW
         yes           Std       0 TOL$FREE_BUFFER
 yes     yes           Std       7 TOL$SAVE_DATA
         yes           Std       7 TOL$GET_DATA
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$DECKFILE                            B$TCB$
     TOL$BUFFER$                           B_VECTNIL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:90   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:91   


        1        1        /*M* TOL$LOADER    TOLTS LOADER program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             PRB=Y,CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        TOL$CHECK_CALL_SEQUENCE: PROC (KEY_VALUE,

     11  4 000000   000000 700200 xent  TOL$CHECK_C* TSX0  ! X66_AUTO_N
         4 000001   000206 000013                    ZERO    134,11

       12       12                   LOAD_OFFSET,
       13       13                   CALL_SEQUENCE,
       14       14                   MAX_LOAD,
       15       15                   LOAD_SIZE,
       16       16                   ERROR_CODE,
       17       17                   EDIT_NAME,
       18       18                   DECK_TYPE,
       19       19                   CHECK_STATUS$,
       20       20                   CHECK_DCW,
       21       21                   CHECK_DATA_SIZE) ALTRET;
       22       22
       23       23        /* Include Files */
       24       24
       25       25           %INCLUDE B_ERRORS_C;
       26     1152           %INCLUDE CP_6;
       27     6711           %INCLUDE CP_6_SUBS;
       28     7251           %INCLUDE TOT_TOLTS_M ;
       29     8369
       30     8370        /* Data Control Blocks */
       31     8371
       32     8372    1      DCL M$DECKFILE DCB ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:92   
       33     8373           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:93   
       34     8374        /* Parameters */
       35     8375
       36     8376    1      DCL 1 CALL_SEQUENCE ALIGNED,
       37     8377    1            2 FDCWP UBIN (18) UNAL,
       38     8378    1            2 STATUSP UBIN (18) UNAL,
       39     8379    1            2 CATALOG# UBIN (18) UNAL,
       40     8380    1            2 NEXT_ENTRY UBIN (18) UNAL,
       41     8381    1            2 CATALOG_CKSUM ALIGNED,
       42     8382    1              3 UPPER UBIN (18) UNAL,
       43     8383    1              3 LOWER UBIN (18) UNAL,
       44     8384    1            2 CATALOG_CHECKSUM REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       45     8385    1            2 DECK_OFFSET REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       46     8386    1            2 DECK# UBIN (18) UNAL,
       47     8387    1            2 ENTRY_COUNT UBIN (18) UNAL,
       48     8388    1            2 CARD_COUNT REDEF ENTRY_COUNT UBIN (18) UNAL,
       49     8389    1            2 CHECKSUM UBIN (36) ALIGNED,
       50     8390    1            2 RELOCATION UBIN (36) ALIGNED,
       51     8391    1            2 NO_MORE SBIN (36) ALIGNED;
       52     8392    1      DCL 1 CALL_SEQUENCE_MORE REDEF CALL_SEQUENCE ALIGNED,
       53     8393    1            2 * UBIN (36) ALIGNED,
       54     8394    1            2 * UBIN (18) UNAL,
       55     8395    1            2 MORE UNAL,
       56     8396    1              3 * UBIN (18) UNAL,
       57     8397    1              3 DATA (0:4) UBIN (36) UNAL;
       58     8398    1      DCL CHECK_DATA_SIZE UBIN (36) ALIGNED;
       59     8399    1      DCL 1 CHECK_DCW ALIGNED,
       60     8400    1            2 ADDRESS UBIN (18) UNAL,
       61     8401    1            2 TYPE UBIN (6) UNAL,
       62     8402    1            2 SIZE UBIN (12) UNAL;
       63     8403    1      DCL CHECK_STATUS$ PTR ALIGNED;
       64     8404    1      DCL DECK_TYPE CHAR (1) UNAL;
       65     8405           %EJECT ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:94   
       66     8406    1      DCL 1 ERROR_CODE ALIGNED,
       67     8407    1            2 LOC UBIN (18) UNAL,
       68     8408    1            2 ERR UBIN (18) UNAL;
       69     8409    1      DCL 1 KEY_VALUE ALIGNED,
       70     8410    1            2 SIZE UBIN (9) UNAL,
       71     8411    1            2 DATA CHAR (23) UNAL;
       72     8412    1      DCL LOAD_SIZE UBIN (36) ALIGNED;
       73     8413    1      DCL MAX_LOAD UBIN (18) ALIGNED;
       74     8414    1      DCL LOAD_OFFSET UBIN (18) HALIGNED;
       75     8415
       76     8416        /* Macros */
       77     8417
       78     8418           %B$EXCFR;
       79     8436           %F$DCB;
       80     8493           %B$TCB;
       81     8496           %IS$ (STCLASS = CONSTANT) ;
       82     8510           %TOM$SEG (STCLASS = BASED) ;
       83     8531           %EJECT ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:95   
       84     8532        /* Function Parameter Tables */
       85     8533
       86     8534           %FPT_OPEN (FPTN = OLD_DECKFILE,
       87     8535                      ACS = DIRECT,
       88     8536                      ASN = FILE,
       89     8537                      DCB = M$DECKFILE,
       90     8538                      FUN = IN,
       91     8539                      ORG = KEYED,
       92     8540                      SHARE = IN);
       93     8649
       94     8650           %FPT_READ (FPTN = READ_BINARY_DECK,
       95     8651                      DCB = M$DECKFILE,
       96     8652                      KEY = DECK_KEY,
       97     8653                      KEYS = YES,
       98     8654                      WAIT = YES);
       99     8693
      100     8694           %FPT_READ (FPTN = READ_CATALOG_DATA,
      101     8695                      BUF = CATALOG_DATA,
      102     8696                      DCB = M$DECKFILE,
      103     8697                      KEY = CATALOG_KEY,
      104     8698                      KEYS = YES,
      105     8699                      WAIT = YES);
      106     8738
      107     8739           %FPT_READ (FPTN = READ_CATALOG_ENTRY,
      108     8740                      BUF = OBJECT_KEY,
      109     8741                      DCB = M$DECKFILE,
      110     8742                      KEY = CATALOG_ENTRY_KEY,
      111     8743                      KEYS = YES,
      112     8744                      WAIT = YES);
      113     8783           %EJECT ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:96   
      114     8784           %FPT_READ (FPTN = READ_DKEND_CARD,
      115     8785                      BUF = DKEND_CARD,
      116     8786                      DCB = M$DECKFILE,
      117     8787                      KEY = PATCH_KEY,
      118     8788                      KEYS = YES,
      119     8789                      WAIT = YES);
      120     8828
      121     8829           %FPT_READ (FPTN = READ_OBJECT_CARD,
      122     8830                      BUF = OBJECT,
      123     8831                      DCB = M$DECKFILE,
      124     8832                      KEY = OBJECT_KEY,
      125     8833                      KEYS = YES,
      126     8834                      WAIT = YES);
      127     8873
      128     8874           %FPT_READ (FPTN = READ_PATCH_CARD,
      129     8875                      BUF = PATCH_CARD,
      130     8876                      DCB = M$DECKFILE,
      131     8877                      KEY = PATCH_KEY,
      132     8878                      KEYS = YES,
      133     8879                      WAIT = YES);
      134     8918           %EJECT ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:97   
      135     8919        /* External Variables */
      136     8920
      137     8921    1      DCL B$TCB$ SYMREF PTR ALIGNED;
      138     8922    1      DCL TOL$BUFFER$ SYMREF PTR ALIGNED;
      139     8923    1      DCL BUFFER$ REDEF TOL$BUFFER$ PTR ALIGNED;
      140     8924    1      DCL TOL$CARD_SEQ STATIC SYMDEF UBIN (36) ALIGNED;
      141     8925    1      DCL CARD_SEQ REDEF TOL$CARD_SEQ UBIN (36) ALIGNED;
      142     8926    1      DCL TOL$DECKFILE_ARS# STATIC SYMDEF UBIN (36) ALIGNED;
      143     8927    1      DCL DECKFILE_ARS# REDEF TOL$DECKFILE_ARS# UBIN (36) ALIGNED;
      144     8928    1      DCL TOL$I STATIC SYMDEF UBIN (36) ALIGNED;
      145     8929    1      DCL I REDEF TOL$I UBIN (36) ALIGNED;
      146     8930    1      DCL TOL$IONTP_FOUND STATIC SYMDEF UBIN (36) ALIGNED;
      147     8931    1      DCL IONTP_FOUND REDEF TOL$IONTP_FOUND UBIN (36) ALIGNED;
      148     8932    1      DCL TOL$J STATIC SYMDEF UBIN (36) ALIGNED;
      149     8933    1      DCL J REDEF TOL$J UBIN (36) ALIGNED;
      150     8934    1      DCL TOL$K STATIC SYMDEF UBIN (36) ALIGNED;
      151     8935    1      DCL K REDEF TOL$K UBIN (36) ALIGNED;
      152     8936    1      DCL TOL$SPAN_LOWER STATIC SYMDEF UBIN (36) ALIGNED;
      153     8937    1      DCL SPAN_LOWER REDEF TOL$SPAN_LOWER UBIN (36) ALIGNED;
      154     8938    1      DCL TOL$SPAN_UPPER STATIC SYMDEF UBIN (36) ALIGNED;
      155     8939    1      DCL SPAN_UPPER REDEF TOL$SPAN_UPPER UBIN (36) ALIGNED;
      156     8940           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:98   
      157     8941        /* External Structures */
      158     8942
      159     8943    1      DCL TOL$BINARY$ STATIC SYMDEF PTR ALIGNED;
      160     8944    1      DCL BINARY$ REDEF TOL$BINARY$ PTR ALIGNED;
      161     8945    1      DCL 1 BINARYP REDEF TOL$BINARY$ ALIGNED,
      162     8946    1            2 ADDRESS UBIN (18) UNAL,
      163     8947    1            2 * BIT (18) UNAL;
      164     8948    1      DCL TOL$CALL_SEQ$ STATIC SYMDEF PTR ALIGNED;
      165     8949    1      DCL CALL_SEQ$ REDEF TOL$CALL_SEQ$ PTR ALIGNED;
      166     8950    1      DCL 1 CALL_SEQP REDEF TOL$CALL_SEQ$ ALIGNED,
      167     8951    1            2 ADDRESS UBIN (18) UNAL,
      168     8952    1            2 * BIT (18) UNAL;
      169     8953    1      DCL EDIT_NAME CHAR (4) ALIGNED ;
      170     8954    1      DCL 1 TOL$CATALOG_ENTRY_KEY STATIC SYMDEF UNAL,
      171     8955    1            2 SIZE UBIN (9) UNAL INIT (4),
      172     8956    1            2 DECK# UBIN (18) UNAL,
      173     8957    1            2 ENTRY# UBIN (18) UNAL;
      174     8958    1      DCL 1 CATALOG_ENTRY_KEY REDEF TOL$CATALOG_ENTRY_KEY UNAL,
      175     8959    1            2 SIZE UBIN (9) UNAL,
      176     8960    1            2 DECK# UBIN (18) UNAL,
      177     8961    1            2 ENTRY# UBIN (18) UNAL;
      178     8962    1      DCL 1 TOL$CATALOG_KEY STATIC SYMDEF ALIGNED,
      179     8963    1            2 SIZE UBIN (9) UNAL INIT (23),
      180     8964    1            2 DATA CHAR (23) UNAL,
      181     8965    1            2 SPLIT REDEF DATA UNAL,
      182     8966    1              3 DATA CHAR (21) UNAL,
      183     8967    1              3 CLEAR CHAR (2) UNAL,
      184     8968    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      185     8969    1      DCL 1 CATALOG_KEY REDEF TOL$CATALOG_KEY ALIGNED,
      186     8970    1            2 SIZE UBIN (9) UNAL,
      187     8971    1            2 DATA CHAR (23) UNAL,
      188     8972    1            2 SPLIT REDEF DATA UNAL,
      189     8973    1              3 DATA CHAR (21) UNAL,
      190     8974    1              3 CLEAR CHAR (2) UNAL,
      191     8975    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      192     8976    1      DCL 1 TOL$DKEND_CARD STATIC SYMDEF ALIGNED,
      193     8977    1            2 CONTROL CHAR (7) UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:99   
      194     8978    1            2 TYPE CHAR (8) UNAL,
      195     8979    1            2 * CHAR (51) UNAL,
      196     8980    1            2 REVISION CHAR (6) UNAL,
      197     8981    1            2 LBL CHAR (4) UNAL,
      198     8982    1            2 SEQ CHAR (4) UNAL,
      199     8983    1            2 CHECKSUM UBIN (36) ALIGNED;
      200     8984    1      DCL 1 DKEND_CARD REDEF TOL$DKEND_CARD ALIGNED,
      201     8985    1            2 CONTROL CHAR (7) UNAL,
      202     8986    1            2 TYPE CHAR (8) UNAL,
      203     8987    1            2 * CHAR (51) UNAL,
      204     8988    1            2 REVISION CHAR (6) UNAL,
      205     8989    1            2 LBL CHAR (4) UNAL,
      206     8990    1            2 SEQ CHAR (4) UNAL,
      207     8991    1            2 CHECKSUM UBIN (36) ALIGNED;
      208     8992    1      DCL DKEND_CARD_ REDEF TOL$DKEND_CARD CHAR (84) ALIGNED ;
      209     8993    1      DCL 1 TOL$OBJECT STATIC SYMDEF ALIGNED,
      210     8994    1            2 BCD ALIGNED,
      211     8995    1              3 CONTROL CHAR (7) UNAL,
      212     8996    1              3 TYPE CHAR (8) UNAL,
      213     8997    1              3 * CHAR (6) UNAL,
      214     8998    1              3 LOAD_TYPE CHAR (1) UNAL,
      215     8999    1              3 * CHAR (37) UNAL,
      216     9000    1              3 ASSEMBLER CHAR (1) UNAL,
      217     9001    1              3 * CHAR (12) UNAL,
      218     9002    1              3 LBL CHAR (4) ALIGNED,
      219     9003    1              3 SEQ CHAR (4) ALIGNED,
      220     9004    1            2 DECK# UBIN (18) UNAL,
      221     9005    1            2 BINARY_COUNT UBIN (18) UNAL,
      222     9006    1            2 TOTAL_COUNT UBIN (18) UNAL,
      223     9007    1            2 LOAD_SIZE UBIN (18) UNAL,
      224     9008    1            2 DECK_CHECKSUM UBIN (36) UNAL,
      225     9009    1            2 CHECKSUM UBIN (36) ALIGNED;
      226     9010    1      DCL 1 OBJECT REDEF TOL$OBJECT ALIGNED,
      227     9011    1            2 BCD ALIGNED,
      228     9012    1              3 CONTROL CHAR (7) UNAL,
      229     9013    1              3 TYPE CHAR (8) UNAL,
      230     9014    1              3 * CHAR (6) UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:100  
      231     9015    1              3 LOAD_TYPE CHAR (1) UNAL,
      232     9016    1              3 * CHAR (37) UNAL,
      233     9017    1              3 ASSEMBLER CHAR (1) UNAL,
      234     9018    1              3 * CHAR (12) UNAL,
      235     9019    1              3 LBL CHAR (4) ALIGNED,
      236     9020    1              3 SEQ CHAR (4) ALIGNED,
      237     9021    1            2 DECK# UBIN (18) UNAL,
      238     9022    1            2 BINARY_COUNT UBIN (18) UNAL,
      239     9023    1            2 TOTAL_COUNT UBIN (18) UNAL,
      240     9024    1            2 LOAD_SIZE UBIN (18) UNAL,
      241     9025    1            2 DECK_CHECKSUM UBIN (36) UNAL,
      242     9026    1            2 CHECKSUM UBIN (36) ALIGNED;
      243     9027    1      DCL OBJECT_ REDEF TOL$OBJECT CHAR (96) ALIGNED ;
      244     9028    1      DCL 1 TOL$OBJECT_KEY STATIC SYMDEF ALIGNED,
      245     9029    1            2 SIZE UBIN (9) UNAL INIT (23),
      246     9030    1            2 DATA CHAR (23) UNAL,
      247     9031    1            2 SPLIT REDEF DATA UNAL,
      248     9032    1              3 DATA CHAR (21) UNAL,
      249     9033    1              3 CLEAR CHAR (2) UNAL,
      250     9034    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      251     9035    1      DCL 1 OBJECT_KEY REDEF TOL$OBJECT_KEY ALIGNED,
      252     9036    1            2 SIZE UBIN (9) UNAL,
      253     9037    1            2 DATA CHAR (23) UNAL,
      254     9038    1            2 SPLIT REDEF DATA UNAL,
      255     9039    1              3 DATA CHAR (21) UNAL,
      256     9040    1              3 CLEAR CHAR (2) UNAL,
      257     9041    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      258     9042    1      DCL 1 TOL$PATCH_CARD STATIC SYMDEF ALIGNED,
      259     9043    1            2 * CHAR (7) UNAL,
      260     9044    1            2 TYPE CHAR (8) UNAL,
      261     9045    1            2 * CHAR (57) UNAL,
      262     9046    1            2 LBL CHAR (4) ALIGNED,
      263     9047    1            2 SEQ CHAR (4) ALIGNED,
      264     9048    1            2 CHECKSUM UBIN (36) ALIGNED;
      265     9049    1      DCL 1 PATCH_CARD REDEF TOL$PATCH_CARD ALIGNED,
      266     9050    1            2 * CHAR (7) UNAL,
      267     9051    1            2 TYPE CHAR (8) UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:101  
      268     9052    1            2 * CHAR (57) UNAL,
      269     9053    1            2 LBL CHAR (4) ALIGNED,
      270     9054    1            2 SEQ CHAR (4) ALIGNED,
      271     9055    1            2 CHECKSUM UBIN (36) ALIGNED;
      272     9056    1      DCL 1 PATCH_ASCII REDEF TOL$PATCH_CARD ALIGNED,
      273     9057    1            2 DATA CHAR (80) ALIGNED,
      274     9058    1            2 CHARS (0:79) REDEF DATA CHAR (1) UNAL,
      275     9059    1            2 * UBIN (36) ALIGNED;
      276     9060    1      DCL 1 HEX_CARD REDEF TOL$PATCH_CARD ALIGNED,
      277     9061    1            2 * CHAR (6) UNAL,
      278     9062    1            2 CR CHAR (1) UNAL,
      279     9063    1            2 TYPE CHAR (8) UNAL,
      280     9064    1            2 * CHAR (21) UNAL,
      281     9065    1            2 REVISION CHAR (6) UNAL,
      282     9066    1            2 * CHAR (38) UNAL,
      283     9067    1            2 * UBIN (36) ALIGNED;
      284     9068    1      DCL 1 HEX_ASCII REDEF TOL$PATCH_CARD ALIGNED,
      285     9069    1            2 DATA CHAR (80) ALIGNED,
      286     9070    1            2 CHARS (0:79) REDEF DATA CHAR (1) UNAL,
      287     9071    1            2 * UBIN (36) ALIGNED;
      288     9072    1      DCL 1 TOL$PATCH_KEY STATIC SYMDEF UNAL,
      289     9073    1            2 SIZE UBIN (9) UNAL INIT (4),
      290     9074    1            2 DECK# UBIN (18) UNAL,
      291     9075    1            2 CARD# UBIN (18) UNAL;
      292     9076    1      DCL 1 PATCH_KEY REDEF TOL$PATCH_KEY UNAL,
      293     9077    1            2 SIZE UBIN (9) UNAL,
      294     9078    1            2 DECK# UBIN (18) UNAL,
      295     9079    1            2 CARD# UBIN (18) UNAL;
      296     9080    1      DCL 1 DKEND_KEY REDEF TOL$PATCH_KEY UNAL,
      297     9081    1            2 SIZE UBIN (9) UNAL,
      298     9082    1            2 DECK# UBIN (18) UNAL,
      299     9083    1            2 CARD# UBIN (18) UNAL;
      300     9084    1      DCL 1 TOL$RELOC (0:27) STATIC SYMDEF ALIGNED,
      301     9085    1            2 UPPER UBIN (18) UNAL,
      302     9086    1            2 LOWER UBIN (18) UNAL;
      303     9087    1      DCL 1 RELOC (0:27) REDEF TOL$RELOC ALIGNED,
      304     9088    1            2 UPPER UBIN (18) UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:102  
      305     9089    1            2 LOWER UBIN (18) UNAL;
      306     9090    1      DCL TOL$START_LOAD$ STATIC SYMDEF PTR ALIGNED;
      307     9091    1      DCL START_LOAD$ REDEF TOL$START_LOAD$ PTR ALIGNED;
      308     9092    1      DCL 1 START_LOADP REDEF TOL$START_LOAD$ ALIGNED,
      309     9093    1            2 ADDRESS UBIN (18) UNAL,
      310     9094    1            2 * BIT (18) UNAL;
      311     9095           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:103  
      312     9096        /* Local Variables */
      313     9097
      314     9098    1      DCL BUFFER_ALLOCATED STATIC UBIN (36) ALIGNED INIT (0);
      315     9099    1      DCL BUFFER (0:1023) BASED (BUFFER$) CHAR (104) ALIGNED;
      316     9100    1      DCL CATALOG_COUNT UBIN (36) ALIGNED;
      317     9101    1      DCL CATALOG_DECKS (0:99) UBIN (18) UNAL;
      318     9102    1      DCL CATALOG_DECK# UBIN (18) UNAL;
      319     9103    1      DCL CATALOG_INDEX UBIN (36) ALIGNED;
      320     9104    1      DCL CHECK_INDEX UBIN (36) ALIGNED;
      321     9105    1      DCL CHECK_RELOC UBIN (18) STATIC ALIGNED;
      322     9106    1      DCL CSRW_OFFSET UBIN (36) ALIGNED;
      323     9107    1      DCL CS_OFFSET UBIN (36) ALIGNED;
      324     9108    1      DCL DATA_SIZE UBIN (36) ALIGNED;
      325     9109    1      DCL DECKFILE_DCB# STATIC UBIN (36) ALIGNED INIT (0);
      326     9110    1      DCL END_LOAD UBIN (36) ALIGNED;
      327     9111    1      DCL FIRST UBIN (18) UNAL;
      328     9112    1      DCL FIRST_MPC_CK UBIN (36) ALIGNED;
      329     9113    1      DCL HEX_OFFSET UBIN (36) ALIGNED;
      330     9114    1      DCL IOTD_FOUND UBIN (36) ALIGNED;
      331     9115    1      DCL L UBIN (36) ALIGNED;
      332     9116    1      DCL LAST UBIN (18) UNAL;
      333     9117    1      DCL LENGTH UBIN (36) ALIGNED;
      334     9118    1      DCL LOAD_RELOC UBIN (36) ALIGNED;
      335     9119    1      DCL M UBIN (36) ALIGNED;
      336     9120    1      DCL M$DECKFILE$ STATIC PTR ALIGNED;
      337     9121    1      DCL NEXT_SEQ UBIN (36) ALIGNED;
      338     9122    1      DCL NUMERICS STATIC CHAR (17) UNAL INIT ('0123456789ABCDEFG');
      339     9123    1      DCL OCTAL_INDEX UBIN (36) ALIGNED;
      340     9124    1      DCL HEX_INDEX REDEF OCTAL_INDEX UBIN (36) ALIGNED;
      341     9125    1      DCL SEQ_INDEX REDEF OCTAL_INDEX UBIN (36) ALIGNED;
      342     9126    1      DCL RELOCATION UBIN (36) ALIGNED;
      343     9127    1      DCL RELOCATION_CHECK UBIN (36) ALIGNED;
      344     9128    1      DCL RW_OFFSET UBIN (36) ALIGNED;
      345     9129    1      DCL SECOND_MPC_CK UBIN (36) ALIGNED;
      346     9130    1      DCL SEQ CHAR (4) ALIGNED;
      347     9131    1      DCL SEQ_CHARS (0:3) REDEF SEQ CHAR (1) UNAL;
      348     9132    1      DCL SKIP_LOAD UBIN (36) ALIGNED;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:104  
      349     9133           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:105  
      350     9134        /* Local Structures */
      351     9135
      352     9136    1      DCL 1 BINARY BASED (BINARY$) ALIGNED,
      353     9137    1            2 WD1 UBIN (36) ALIGNED,
      354     9138    1            2 LOAD REDEF WD1 ALIGNED,
      355     9139    1              3 TYPE UBIN (3) UNAL,
      356     9140    1              3 * UBIN (9) UNAL,
      357     9141    1              3 SIZE UBIN (6) UNAL,
      358     9142    1              3 ADDRESS UBIN (18) UNAL,
      359     9143    1            2 CHECKSUM UBIN (36) ALIGNED,
      360     9144    1            2 RELOC (0:2) UBIN (36) ALIGNED,
      361     9145    1            2 DATA (0:20) UBIN (36) ALIGNED,
      362     9146    1            2 SPLIT (0:20) REDEF DATA UNAL,
      363     9147    1              3 UPPER UBIN (18) UNAL,
      364     9148    1              3 LOWER UBIN (18) UNAL;
      365     9149    1      DCL 1 BINARY_LBLSEQ REDEF BINARY ALIGNED,
      366     9150    1            2 * CHAR (96) ALIGNED,
      367     9151    1            2 LBL CHAR (4) ALIGNED,
      368     9152    1            2 SEQ CHAR (4) ALIGNED;
      369     9153    1      DCL 1 CATALOG_DATA STATIC ALIGNED,
      370     9154    1            2 DECK# UBIN (18) UNAL,
      371     9155    1            2 ENTRY_COUNT UBIN (18) UNAL,
      372     9156    1            2 CHECKSUM ALIGNED,
      373     9157    1              3 UPPER UBIN (18) UNAL,
      374     9158    1              3 LOWER UBIN (18) UNAL;
      375     9159    1      DCL 1 CATALOG_CONTROL REDEF CATALOG_DATA ALIGNED,
      376     9160    1            2 SEED UBIN (36) ALIGNED,
      377     9161    1            2 CHECKSUM UBIN (36) ALIGNED;
      378     9162    1      DCL 1 CHECK BASED (BUFFER$) ALIGNED,
      379     9163    1            2 LAL (0:1023) UBIN (18) UNAL,
      380     9164    1            2 UAL (0:1023) UBIN (18) UNAL,
      381     9165    1            2 * (0:1023) CHAR (100) ALIGNED;
      382     9166    1      DCL 1 CHECKSUM ALIGNED,
      383     9167    1            2 UPPER ALIGNED,
      384     9168    1              3 UPPER UBIN (18) UNAL,
      385     9169    1              3 LOWER UBIN (18) UNAL,
      386     9170    1            2 UH REDEF UPPER UBIN (36) ALIGNED,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:106  
      387     9171    1            2 LOWER ALIGNED,
      388     9172    1              3 UPPER UBIN (18) UNAL,
      389     9173    1              3 LOWER UBIN (18) UNAL,
      390     9174    1            2 LH REDEF LOWER UBIN (36) ALIGNED;
      391     9175    1      DCL 1 CHECK_STATUS BASED (CHECK_STATUS$) ALIGNED,
      392     9176    1            2 HARDWARE_STATUS BIT (36) ALIGNED,
      393     9177    1            2 LAST_DCW_POINTER UBIN (18) UNAL,
      394     9178    1            2 RESIDUE UBIN (18) UNAL;
      395     9179    1      DCL DATA$ PTR ALIGNED;
      396     9180    1      DCL HEX$ REDEF DATA$ PTR ALIGNED;
      397     9181    1      DCL 1 HEXP REDEF DATA$ ALIGNED,
      398     9182    1            2 ADDRESS UBIN (18) UNAL,
      399     9183    1            2 * BIT (18) UNAL;
      400     9184    1      DCL 1 DCW ALIGNED,
      401     9185    1            2 ADDRESS UBIN (18) UNAL,
      402     9186    1            2 TYPE UBIN (6) UNAL,
      403     9187    1            2 SIZE UBIN (12) UNAL;
      404     9188    1      DCL 1 DCW_LIST_ENTRY BASED (DCW$) ALIGNED,
      405     9189    1            2 * UBIN (36) ALIGNED;
      406     9190    1      DCL DCW$ PTR ALIGNED;
      407     9191    1      DCL 1 DCWP REDEF DCW$ ALIGNED,
      408     9192    1            2 ADDRESS UBIN (18) UNAL,
      409     9193    1            2 * BIT (18) UNAL;
      410     9194    1      DCL 1 DECK_KEY STATIC UNAL,
      411     9195    1            2 SIZE UBIN (9) UNAL INIT (4),
      412     9196    1            2 DECK# UBIN (18) UNAL,
      413     9197    1            2 * UBIN (18) UNAL INIT (0);
      414     9198    1      DCL HEX_CARD_SPLIT UBIN (18) UNAL;
      415     9199    1      DCL 1 HEX_SPLIT REDEF HEX_CARD_SPLIT UNAL,
      416     9200    1            2 * UBIN (1) UNAL,
      417     9201    1            2 UPPER UBIN (8) UNAL,
      418     9202    1            2 * UBIN (1) UNAL,
      419     9203    1            2 LOWER UBIN (8) UNAL;
      420     9204    1      DCL 1 LOAD BASED (START_LOAD$) ALIGNED,
      421     9205    1            2 TYPE UBIN (3) UNAL,
      422     9206    1            2 * UBIN (9) UNAL,
      423     9207    1            2 SIZE UBIN (6) UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:107  
      424     9208    1            2 ADDRESS UBIN (18) UNAL,
      425     9209    1            2 DATA (0:27) UBIN (36) ALIGNED;
      426     9210    1      DCL 1 MASTER_CATALOG_KEY STATIC ALIGNED,
      427     9211    1            2 SIZE UBIN (9) UNAL INIT (14),
      428     9212    1            2 DATA CHAR (23) UNAL INIT ('MASTER_CATALOG');
      429     9213    1      DCL 1 SAVED_KEY STATIC ALIGNED,
      430     9214    1            2 SIZE UBIN (9) UNAL INIT (23),
      431     9215    1            2 DATA CHAR (23) UNAL,
      432     9216    1            2 SPLIT REDEF DATA UNAL,
      433     9217    1              3 DATA CHAR (21) UNAL,
      434     9218    1              3 CLEAR CHAR (2) UNAL,
      435     9219    1              3 DECK# REDEF CLEAR UBIN (18) UNAL;
      436     9220    1      DCL SPLIT_DATA UBIN (36) ALIGNED;
      437     9221    1      DCL 1 SPLIT_SPLIT REDEF SPLIT_DATA ALIGNED,
      438     9222    1            2 UPPER UBIN (18) UNAL,
      439     9223    1            2 LOWER UBIN (18) UNAL;
      440     9224    1      DCL 1 SPLIT_DCW STATIC ALIGNED,
      441     9225    1            2 ADDRESS UBIN (18) UNAL,
      442     9226    1            2 TYPE UBIN (6) UNAL INIT (0),
      443     9227    1            2 SIZE UBIN (12) UNAL;
      444     9228    1      DCL 1 SPLIT_LOAD STATIC ALIGNED,
      445     9229    1            2 TYPE UBIN (3) UNAL INIT (3),
      446     9230    1            2 SIZE UBIN (15) UNAL,
      447     9231    1            2 ADDRESS UBIN (18) UNAL;
      448     9232    1      DCL SPLIT_WD1 REDEF SPLIT_LOAD UBIN (36) ALIGNED;
      449     9233    1      DCL 1 STATUS BASED (STATUS$) ALIGNED,
      450     9234    1            2 HARDWARE_STATUS BIT (36) ALIGNED,
      451     9235    1            2 LAST_DCW_POINTER UBIN (18) UNAL,
      452     9236    1            2 RESIDUE UBIN (18) UNAL;
      453     9237    1      DCL STATUS$ PTR ALIGNED;
      454     9238    1      DCL 1 STATUSP REDEF STATUS$ ALIGNED,
      455     9239    1            2 ADDRESS UBIN (18) UNAL,
      456     9240    1            2 * BIT (18) UNAL;
      457     9241           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:108  
      458     9242        /* External Entries */
      459     9243
      460     9244    1      DCL TOL$BAD_CARD ENTRY (1);
      461     9245    1      DCL TOL$FREE_BUFFER ENTRY;
      462     9246    1      DCL TOL$GET_BUFFER ENTRY;
      463     9247    1      DCL TOL$GET_DATA ENTRY (7);
      464     9248    1      DCL TOL$GET_NEXT_DCW ENTRY (3);
      465     9249    1      DCL TOL$SAVE_DATA ENTRY (7) ALTRET;
      466     9250           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:109  
      467     9251        /* Error Messages */
      468     9252
      469     9253    1      DCL 1 ER#1 STATIC UNAL,
      470     9254    1            2 * CHAR (31) UNAL INIT ('* IN TOL$ADJUST_PATCH_INDEXS,'),
      471     9255    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      472     9256    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      473     9257    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      474     9258    1            2 * CHAR (38) UNAL INIT ('NULL OCTAL PATCH VALUE AT COLUMN %COL');
      475     9259    1      DCL 1 ER#2 STATIC UNAL,
      476     9260    1            2 * CHAR (31) UNAL INIT ('* IN TOL$ADJUST_PATCH_INDEXS,'),
      477     9261    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      478     9262    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      479     9263    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      480     9264    1           2 * CHAR (50) UNAL INIT ('NULL RELOCATED OCTAL PATCH VALUE AT COLUMN %COL')
              9264                     ;
      481     9265    1      DCL 1 ER#3 STATIC UNAL,
      482     9266    1            2 * CHAR (26) UNAL INIT ('* IN TOL$BUILD_HEX_LOAD,'),
      483     9267    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      484     9268    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      485     9269    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      486     9270    1            2 * CHAR (31) UNAL INIT ('RHEX PATCH PAST READ/WRITE DATA');
      487     9271    1      DCL 1 ER#4 STATIC UNAL,
      488     9272    1            2 * CHAR (26) UNAL INIT ('* IN TOL$BUILD_HEX_LOAD,'),
      489     9273    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      490     9274    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      491     9275    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      492     9276    1            2 * CHAR (35) UNAL INIT ('CHEX PATCH PAST CONTROL STORE DATA');
      493     9277    1      DCL 1 ER#6 STATIC UNAL,
      494     9278    1            2 * CHAR (27) UNAL INIT ('* IN TOL$BUILD_HEX_PATCH,'),
      495     9279    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      496     9280    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      497     9281    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      498     9282    1            2 * CHAR (42) UNAL INIT ('HEX PATCH HAS TWO PATCHES FOR ODD LOCATION');
      499     9283    1      DCL 1 ER#7 STATIC UNAL,
      500     9284    1            2 * CHAR (29) UNAL INIT ('* IN TOL$BUILD_HEX_SEGMENT,'),
      501     9285    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      502     9286    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:110  
      503     9287    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      504     9288    1            2 * CHAR (40) UNAL INIT ('RHEX PATCH FOR A CONTROL STORE ONLY DECK');
      505     9289    1      DCL 1 ER#8 STATIC UNAL,
      506     9290    1            2 * CHAR (29) UNAL INIT ('* IN TOL$BUILD_HEX_SEGMENT,'),
      507     9291    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      508     9292    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      509     9293    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      510     9294    1            2 * CHAR (40) UNAL INIT ('HEX PATCH CARD ADDRESS NOT 4 CHARACTERS');
      511     9295    1      DCL 1 ER#9 STATIC UNAL,
      512     9296    1            2 * CHAR (29) UNAL INIT ('* IN TOL$BUILD_HEX_SEGMENT,'),
      513     9297    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      514     9298    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      515     9299    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      516     9300    1            2 * CHAR (52) UNAL INIT (
              9300                     'HEX PATCH CARD ADDRESS BELOW DECK SPECIFIED OFFSET');
      517     9301    1      DCL 1 ER#10 STATIC UNAL,
      518     9302    1            2 * CHAR (31) UNAL INIT ('* IN TOL$BUILD_OCTAL_SEGMENT,'),
      519     9303    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      520     9304    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      521     9305    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      522     9306    1            2 * CHAR (46) UNAL INIT ('OCTAL PATCH CARD ADDRESS NOT 1-6 CHARACTERS');
      523     9307    1      DCL 1 ER#11 STATIC UNAL,
      524     9308    1            2 * CHAR (29) UNAL INIT ('* IN TOL$CHECK_BINARY_DATA,'),
      525     9309    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      526     9310    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      527     9311    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      528     9312    1            2 * CHAR (16) UNAL INIT ('BAD LABLE %BLB,'),
      529     9313    1            2 * CHAR (8) UNAL INIT ('S/B %DEK');
      530     9314    1      DCL 1 ER#12 STATIC UNAL,
      531     9315    1            2 * CHAR (29) UNAL INIT ('* IN TOL$CHECK_BINARY_DATA,'),
      532     9316    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      533     9317    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      534     9318    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      535     9319    1            2 * CHAR (36) UNAL INIT ('NON-NUMERIC SEQUENCE AT COLUMN %CLM');
      536     9320    1      DCL 1 ER#13 STATIC UNAL,
      537     9321    1            2 * CHAR (29) UNAL INIT ('* IN TOL$CHECK_BINARY_DATA,'),
      538     9322    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:111  
      539     9323    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      540     9324    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      541     9325    1            2 * CHAR (18) UNAL INIT ('SEQUENCE IS %SEQ,'),
      542     9326    1            2 * CHAR (10) UNAL INIT ('S/B %BIN');
      543     9327    1      DCL 1 ER#14 STATIC UNAL,
      544     9328    1            2 * CHAR (29) UNAL INIT ('* IN TOL$CHECK_BINARY_DATA,'),
      545     9329    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      546     9330    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      547     9331    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      548     9332    1            2 * CHAR (24) UNAL INIT ('ILLEGAL LOAD TYPE %BL');
      549     9333    1      DCL 1 ER#15 STATIC UNAL,
      550     9334    1            2 * CHAR (29) UNAL INIT ('* IN TOL$CHECK_BINARY_DATA,'),
      551     9335    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      552     9336    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      553     9337    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      554     9338    1            2 * CHAR (52) UNAL INIT (
              9338                     'MPC ASSEMBLER DECK CARD IS NOT THE EXPECTED ID BLOCK');
      555     9339    1      DCL 1 ER#16 STATIC UNAL,
      556     9340    1            2 * CHAR (31) UNAL INIT ('* IN TOL$CHECK_CARD_CHECKSUM,'),
      557     9341    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      558     9342    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      559     9343    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      560     9344    1            2 * CHAR (14) UNAL INIT ('CHECKSUM ERROR');
      561     9345    1      DCL 1 ER#17 STATIC UNAL,
      562     9346    1            2 * CHAR (23) UNAL INIT ('* IN TOL$CONVERT_HEX,'),
      563     9347    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      564     9348    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      565     9349    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      566     9350    1            2 * CHAR (58) UNAL INIT (
              9350                     'HEX PATCH CARD HAS INVALID HEX CHARACTER AT COLUMN %COL');
      567     9351    1      DCL 1 ER#18 STATIC UNAL,
      568     9352    1            2 * CHAR (25) UNAL INIT ('* IN TOL$CONVERT_OCTAL,'),
      569     9353    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      570     9354    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      571     9355    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      572     9356    1            2 * CHAR (64) UNAL INIT (
              9356                     'OCTAL PATCH CARD HAS PATCH VALUE > 12 CHARACTERS AT COLUMN %COL');
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:112  
      573     9357    1      DCL 1 ER#19 STATIC UNAL,
      574     9358    1            2 * CHAR (25) UNAL INIT ('* IN TOL$CONVERT_OCTAL,'),
      575     9359    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      576     9360    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      577     9361    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      578     9362    1            2 * CHAR (60) UNAL INIT (
              9362                     'OCTAL PATCH CARD HAS INVALID OCTAL CHARACTER AT COLUMN %COL');
      579     9363    1      DCL 1 ER#23 STATIC UNAL,
      580     9364    1            2 * CHAR (33) UNAL INIT ('* IN TOL$GET_NEXT_CONTROL_WORD,'),
      581     9365    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      582     9366    1            2 * CHAR (19) UNAL INIT ('CALL (PAST IOTD)');
      583     9367    1      DCL 1 ER#25 STATIC UNAL,
      584     9368    1            2 * CHAR (22) UNAL INIT ('* IN TOL$MOVE_ENTRY,'),
      585     9369    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      586     9370    1            2 * CHAR (30) UNAL INIT ('ALTRETURN FROM TOL$SAVE_DATA');
      587     9371    1      DCL 1 ER#26 STATIC UNAL,
      588     9372    1            2 * CHAR (0) UNAL INIT ('*** Attempt to open the '),
      589     9373    1            2 * CHAR (0) UNAL INIT ('deckfile failed.') ;
      590     9374    1      DCL 1 ER#27 STATIC UNAL,
      591     9375    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_BUFFER,'),
      592     9376    1            2 * CHAR (13) UNAL INIT ('BINARY IMAGE'),
      593     9377    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      594     9378    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      595     9379    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      596     9380    1            2 * CHAR (25) UNAL INIT ('S/B MOD 104 CHARACTERS');
      597     9381    1      DCL 1 ER#28 STATIC UNAL,
      598     9382    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_BUFFER,'),
      599     9383    1            2 * CHAR (13) UNAL INIT ('BINARY IMAGE'),
      600     9384    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      601     9385    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      602     9386    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      603     9387    1            2 * CHAR (25) UNAL INIT ('S/B %COUNT*104 CHARACTERS');
      604     9388    1      DCL 1 ER#29 STATIC UNAL,
      605     9389    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_BUFFER,'),
      606     9390    1            2 * CHAR (13) UNAL INIT ('BINARY IMAGE'),
      607     9391    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      608     9392    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:113  
      609     9393    1            2 * CHAR (10) UNAL INIT ('MISSING');
      610     9394    1      DCL 1 ER#30 STATIC UNAL,
      611     9395    1            2 * CHAR (24) UNAL INIT ('* IN TOL$READ_CATALOG,'),
      612     9396    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      613     9397    1            2 * CHAR (13) UNAL INIT ('KEY SIZE %CZ'),
      614     9398    1            2 * CHAR (27) UNAL INIT ('FOR CALL, S/B 23 CHARACTERS');
      615     9399    1      DCL 1 ER#31 STATIC UNAL,
      616     9400    1            2 * CHAR (24) UNAL INIT ('* IN TOL$READ_CATALOG,'),
      617     9401    1            2 * CHAR (16) UNAL INIT ('CATALOG %C#   ,'),
      618     9402    1            2 * CHAR (14) UNAL INIT ('CONTROL BLOCK'),
      619     9403    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      620     9404    1            2 * CHAR (17) UNAL INIT ('S/B 8 CHARACTERS');
      621     9405    1      DCL 1 ER#32 STATIC UNAL,
      622     9406    1            2 * CHAR (2) UNAL INIT ('*'),
      623     9407    1            2 * CHAR (29) UNAL INIT ('CATALOG %CAT'),
      624     9408    1            2 * CHAR (2) UNAL INIT (','),
      625     9409    1            2 * CHAR (9) UNAL INIT ('MISSING');
      626     9410    1      DCL 1 ER#33 STATIC UNAL,
      627     9411    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      628     9412    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      629     9413    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      630     9414    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      631     9415    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      632     9416    1            2 * CHAR (17) UNAL INIT ('S/B 84 CHARACTERS');
      633     9417    1      DCL 1 ER#34 STATIC UNAL,
      634     9418    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      635     9419    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      636     9420    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      637     9421    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      638     9422    1            2 * CHAR (14) UNAL INIT ('CHECKSUM ERROR');
      639     9423    1      DCL 1 ER#35 STATIC UNAL,
      640     9424    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      641     9425    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      642     9426    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      643     9427    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      644     9428    1            2 * CHAR (18) UNAL INIT ('NOT A $ DKEND CARD');
      645     9429    1      DCL 1 ER#36 STATIC UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:114  
      646     9430    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      647     9431    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      648     9432    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      649     9433    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      650     9434    1            2 * CHAR (16) UNAL INIT ('BAD LABLE %DLB,'),
      651     9435    1            2 * CHAR (10) UNAL INIT ('S/B %DEK');
      652     9436    1      DCL 1 ER#37 STATIC UNAL,
      653     9437    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      654     9438    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      655     9439    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      656     9440    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      657     9441    1            2 * CHAR (38) UNAL INIT ('NON-NUMERIC SEQUENCE AT COLUMN %CLM');
      658     9442    1      DCL 1 ER#38 STATIC UNAL,
      659     9443    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      660     9444    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      661     9445    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      662     9446    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      663     9447    1            2 * CHAR (18) UNAL INIT ('SEQUENCE IS %SEQ,'),
      664     9448    1            2 * CHAR (8) UNAL INIT ('S/B %BIN');
      665     9449    1      DCL 1 ER#39 STATIC UNAL,
      666     9450    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_DKEND,'),
      667     9451    1            2 * CHAR (18) UNAL INIT ('$ DKEND IMAGE %P#'),
      668     9452    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      669     9453    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      670     9454    1            2 * CHAR (10) UNAL INIT ('MISSING');
      671     9455    1      DCL 1 ER#40 STATIC UNAL,
      672     9456    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_ENTRY,'),
      673     9457    1            2 * CHAR (13) UNAL INIT ('ENTRY %E#'),
      674     9458    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      675     9459    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      676     9460    1            2 * CHAR (17) UNAL INIT ('S/B 24 CHARACTERS');
      677     9461    1      DCL 1 ER#41 STATIC UNAL,
      678     9462    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_ENTRY,'),
      679     9463    1            2 * CHAR (13) UNAL INIT ('ENTRY %E#'),
      680     9464    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      681     9465    1            2 * CHAR (26) UNAL INIT ('NOT CORRECT KEY SIZE %OZ,'),
      682     9466    1            2 * CHAR (20) UNAL INIT ('S/B 23 CHARACTERS');
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:115  
      683     9467    1      DCL 1 ER#42 STATIC UNAL,
      684     9468    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_ENTRY,'),
      685     9469    1            2 * CHAR (13) UNAL INIT ('ENTRY %E#'),
      686     9470    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      687     9471    1            2 * CHAR (10) UNAL INIT ('MISSING');
      688     9472    1      DCL 1 ER#43 STATIC UNAL,
      689     9473    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      690     9474    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      691     9475    1            2 * CHAR (13) UNAL INIT ('KEY SIZE %OZ'),
      692     9476    1            2 * CHAR (28) UNAL INIT ('FOR CALL, S/B 23 CHARACTERS');
      693     9477    1      DCL 1 ER#44 STATIC UNAL,
      694     9478    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      695     9479    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      696     9480    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      697     9481    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      698     9482    1            2 * CHAR (18) UNAL INIT ('S/B 96 CHARACTERS');
      699     9483    1      DCL 1 ER#45 STATIC UNAL,
      700     9484    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      701     9485    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      702     9486    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      703     9487    1            2 * CHAR (15) UNAL INIT ('CHECKSUM ERROR');
      704     9488    1      DCL 1 ER#46 STATIC UNAL,
      705     9489    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      706     9490    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      707     9491    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      708     9492    1            2 * CHAR (19) UNAL INIT ('NOT A $ OBJECT CARD');
      709     9493    1      DCL 1 ER#47 STATIC UNAL,
      710     9494    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      711     9495    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      712     9496    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      713     9497    1            2 * CHAR (19) UNAL INIT ('BAD LOAD TYPE %OL,'),
      714     9498    1            2 * CHAR (16) UNAL INIT ('S/B D, P, OR R');
      715     9499    1      DCL 1 ER#48 STATIC UNAL,
      716     9500    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      717     9501    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      718     9502    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      719     9503    1            2 * CHAR (24) UNAL INIT ('BAD ASSEMBLER TYPE %OA,'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:116  
      720     9504    1            2 * CHAR (15) UNAL INIT ('S/B M, G, OR 3');
      721     9505    1      DCL 1 ER#49 STATIC UNAL,
      722     9506    1            2 * CHAR (23) UNAL INIT ('* IN TOL$READ_OBJECT,'),
      723     9507    1            2 * CHAR (39) UNAL INIT ('$ OBJECT IMAGE %OD'),
      724     9508    1            2 * CHAR (19) UNAL INIT ('BAD SEQUENCE %OS ,'),
      725     9509    1            2 * CHAR (11) UNAL INIT ('S/B 0000');
      726     9510    1      DCL 1 ER#50 STATIC UNAL,
      727     9511    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      728     9512    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      729     9513    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      730     9514    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      731     9515    1            2 * CHAR (25) UNAL INIT ('NOT CORRECT SIZE %SIZE ,'),
      732     9516    1            2 * CHAR (18) UNAL INIT ('S/B 84 CHARACTERS');
      733     9517    1      DCL 1 ER#51 STATIC UNAL,
      734     9518    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      735     9519    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      736     9520    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      737     9521    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      738     9522    1            2 * CHAR (14) UNAL INIT ('CHECKSUM ERROR');
      739     9523    1      DCL 1 ER#52 STATIC UNAL,
      740     9524    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      741     9525    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      742     9526    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      743     9527    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      744     9528    1            2 * CHAR (30) UNAL INIT ('NOT OCTAL OR HEX PATCH CARD');
      745     9529    1      DCL 1 ER#53 STATIC UNAL,
      746     9530    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      747     9531    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      748     9532    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      749     9533    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      750     9534    1            2 * CHAR (16) UNAL INIT ('BAD LABLE %PLB,'),
      751     9535    1            2 * CHAR (10) UNAL INIT ('S/B %DEK');
      752     9536    1      DCL 1 ER#54 STATIC UNAL,
      753     9537    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      754     9538    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      755     9539    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      756     9540    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:117  
      757     9541    1            2 * CHAR (38) UNAL INIT ('HEX PATCH CARD BUT NOT CHEX OR RHEX');
      758     9542    1      DCL 1 ER#55 STATIC UNAL,
      759     9543    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      760     9544    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      761     9545    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      762     9546    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      763     9547    1            2 * CHAR (38) UNAL INIT ('HEX PATCH CARD WRONG REVISION %HR   ,'),
      764     9548    1            2 * CHAR (12) UNAL INIT ('S/B %DR');
      765     9549    1      DCL 1 ER#56 STATIC UNAL,
      766     9550    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      767     9551    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      768     9552    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      769     9553    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      770     9554    1            2 * CHAR (42) UNAL INIT ('HEX PATCH CARD NOT IN MPC ASSEMBLER DECK');
      771     9555    1      DCL 1 ER#57 STATIC UNAL,
      772     9556    1            2 * CHAR (22) UNAL INIT ('* IN TOL$READ_PATCH,'),
      773     9557    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      774     9558    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      775     9559    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      776     9560    1            2 * CHAR (10) UNAL INIT ('MISSING');
      777     9561    1      DCL 1 ER#58 STATIC UNAL,
      778     9562    1            2 * CHAR (32) UNAL INIT ('* IN TOL$SAVE_CHECK_LOCATIONS,'),
      779     9563    1            2 * CHAR (52) UNAL INIT (
              9563                     'DCW STRING IS TOO FRAGMENTED, MORE THAN 1022 DCWS');
      780     9564    1      DCL 1 ER#59 STATIC UNAL,
      781     9565    1            2 * CHAR (21) UNAL INIT ('* IN TOL$SAVE_LOAD,'),
      782     9566    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      783     9567    1            2 * CHAR (31) UNAL INIT ('ALTRETURN FROM TOL$SAVE_DATA');
      784     9568    1      DCL 1 ER#61 STATIC UNAL,
      785     9569    1            2 * CHAR (32) UNAL INIT ('* IN TOL$SET_RELOCATION_WORDS,'),
      786     9570    1            2 * CHAR (17) UNAL INIT ('BINARY CARD %BIN'),
      787     9571    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      788     9572    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      789     9573    1            2 * CHAR (32) UNAL INIT ('ILLEGAL RELOCATION TYPE %BU/%BR'),
      790     9574    1            2 * CHAR (13) UNAL INIT ('FOR WORD %J,'),
      791     9575    1            2 * CHAR (12) UNAL INIT ('S/B 0 OR 1');
      792     9576    1      DCL 1 ER#62 STATIC UNAL,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:118  
      793     9577    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      794     9578    1            2 * CHAR (20) UNAL INIT ('TOL$READ_CATALOG ON'),
      795     9579    1            2 * CHAR (28) UNAL INIT ('M$READ (READ_CATALOG_DATA)');
      796     9580    1      DCL 1 ER#63 STATIC UNAL,
      797     9581    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      798     9582    1            2 * CHAR (18) UNAL INIT ('TOL$READ_ENTRY ON'),
      799     9583    1            2 * CHAR (30) UNAL INIT ('M$READ (READ_CATALOG_ENTRY)');
      800     9584    1      DCL 1 ER#64 STATIC UNAL,
      801     9585    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      802     9586    1            2 * CHAR (19) UNAL INIT ('TOL$READ_BUFFER ON'),
      803     9587    1            2 * CHAR (25) UNAL INIT ('M$READ (READ_BINARY_DECK)');
      804     9588    1      DCL 1 ER#65 STATIC UNAL,
      805     9589    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      806     9590    1            2 * CHAR (19) UNAL INIT ('TOL$READ_OBJECT ON'),
      807     9591    1            2 * CHAR (25) UNAL INIT ('M$READ (READ_OBJECT_CARD)');
      808     9592    1      DCL 1 ER#66 STATIC UNAL,
      809     9593    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      810     9594    1            2 * CHAR (18) UNAL INIT ('TOL$READ_DKEND ON'),
      811     9595    1            2 * CHAR (26) UNAL INIT ('M$READ (READ_DKEND_CARD)');
      812     9596    1      DCL 1 ER#67 STATIC UNAL,
      813     9597    1            2 * CHAR (12) UNAL INIT ('--ALTRET IN'),
      814     9598    1            2 * CHAR (18) UNAL INIT ('TOL$READ_PATCH ON'),
      815     9599    1            2 * CHAR (26) UNAL INIT ('M$READ (READ_PATCH_CARD)');
      816     9600    1      DCL 1 ER#70 STATIC UNAL,
      817     9601    1            2 * CHAR (34) UNAL INIT ('* IN TOL$CALCULATE_MPC_CHECKSUM,'),
      818     9602    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
      819     9603    1            2 * CHAR (30) UNAL INIT ('ALTRETURN FROM TOL$SAVE_DATA');
      820     9604    1      DCL 1 ER#71 STATIC UNAL,
      821     9605    1            2 * CHAR (24) UNAL INIT ('* IN TOL$READ_PATCHES,'),
      822     9606    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      823     9607    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
      824     9608    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      825     9609    1            2 * CHAR (35) UNAL INIT ('ILLEGAL TO HEX PATCH A NON-MPC DECK');
      826     9610    1      DCL 1 ER#73 STATIC UNAL,
      827     9611    1            2 * CHAR (31) UNAL INIT ('* IN TOL$BUILD_OCTAL_SEGMENT,'),
      828     9612    1            2 * CHAR (9) UNAL INIT ('CARD %P#'),
      829     9613    1            2 * CHAR (15) UNAL INIT ('IN DECK %D#'),
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:119  
      830     9614    1            2 * CHAR (19) UNAL INIT ('IN CATALOG %C#   ,'),
      831     9615    1            2 * CHAR (34) UNAL INIT ('OCTAL PATCH FOR MPC CHECKSUM DATA');
      832     9616    1      DCL 1 ER#74 STATIC UNAL,
      833     9617    1            2 * CHAR (0) UNAL INIT ('* IN TOL$GET_NIO_ENTRY, '),
      834     9618    1            2 * CHAR (0) UNAL INIT ('READ FROM THE DECKFILE '),
      835     9619    1            2 * CHAR (0) UNAL INIT ('FAILED.') ;
      836     9620           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:120  
      837     9621        /* ALTRETURN Value Substitutions */
      838     9622
      839     9623    1      DCL ERR#A UBIN (18) STATIC INIT (1);
      840     9624    1      DCL ERR#B UBIN (18) STATIC INIT (2);
      841     9625    1      DCL ERR#C UBIN (18) STATIC INIT (3);
      842     9626    1      DCL ERR#D UBIN (18) STATIC INIT (4);
      843     9627    1      DCL ERR#E UBIN (18) STATIC INIT (5);
      844     9628    1      DCL ERR#F UBIN (18) STATIC INIT (6);
      845     9629    1      DCL ERR#G UBIN (18) STATIC INIT (7);
      846     9630    1      DCL ERR#H UBIN (18) STATIC INIT (8);
      847     9631    1      DCL ERR#HO UBIN (18) STATIC INIT (42);
      848     9632    1      DCL ERR#I UBIN (18) STATIC INIT (9);
      849     9633    1      DCL ERR#J UBIN (18) STATIC INIT (10);
      850     9634    1      DCL ERR#K UBIN (18) STATIC INIT (11);
      851     9635    1      DCL ERR#L UBIN (18) STATIC INIT (12);
      852     9636           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:121  
      853     9637        /* Main Code */
      854     9638
      855     9639    1      CALL_SEQ$ = ADDR (CALL_SEQUENCE);

   9639  4 000002   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 000003   000227 756000 3                  STQ     TOL$CALL_SEQ$

      856     9640    1      IF (CALL_SEQUENCE.NO_MORE = -1)

   9640  4 000004   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 000005   000006 235100                    LDA     6,,PR0
         4 000006   000027 115000 xsym               CMPA    B_VECTNIL+23
         4 000007   000015 601000 4                  TNZ     s:9646

      857     9641    2      THEN DO;

      858     9642    2              ERROR_CODE.LOC = ERR#A;

   9642  4 000010   003452 220000 3                  LDX0    ERR#A
         4 000011   200010 471500                    LDP1    @ERROR_CODE,,AUTO
         4 000012   100000 740100                    STX0    0,,PR1

      859     9643    2              ERROR_CODE.ERR = ERR#A;

   9643  4 000013   100000 440100                    SXL0    0,,PR1

      860     9644    2              ALTRETURN;

   9644  4 000014   000000 702200 xent               TSX2  ! X66_AALT

      861     9645    2           END;
      862     9646    1      IF (BUFFER$ = ADDR (NIL))

   9646  4 000015   000000 236000 xsym               LDQ     TOL$BUFFER$
         4 000016   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000017   000025 601000 4                  TNZ     s:9651

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:122  
      863     9647    2      THEN DO;

      864     9648    2              CALL TOL$GET_BUFFER;

   9648  4 000020   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 000021   000000 701000 xent               TSX1    TOL$GET_BUFFER
         4 000022   000000 011000                    NOP     0

      865     9649    2              BUFFER_ALLOCATED = 1;

   9649  4 000023   000001 235007                    LDA     1,DL
         4 000024   000407 755000 3                  STA     BUFFER_ALLOCATED

      866     9650    2           END;

      867     9651    1      CHECK_INDEX = 0;

   9651  4 000025   200103 450100                    STZ     CHECK_INDEX,,AUTO

      868     9652    1      FIRST = CALL_SEQP.ADDRESS;

   9652  4 000026   000227 220000 3                  LDX0    TOL$CALL_SEQ$
         4 000027   200110 740100                    STX0    FIRST,,AUTO

      869     9653    1      LAST = FIRST + 9;

   9653  4 000030   000011 621010                    EAX1    9,X0
         4 000031   200115 741100                    STX1    LAST,,AUTO

      870     9654    1      CALL TOL$SAVE_CHECK_LOCATIONS (FIRST, LAST) ;

   9654  4 000032   200115 630500                    EPPR0   LAST,,AUTO
         4 000033   200146 450500                    STP0    PATCH_CARD_OCTAL+1,,AUTO
         4 000034   200110 631500                    EPPR1   FIRST,,AUTO
         4 000035   200145 451500                    STP1    STATUS_SAVE+2,,AUTO
         4 000036   000637 701000 4                  TSX1    TOL$SAVE_CHECK_LOCATIONS
         4 000037   000000 011000                    NOP     0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:123  

      871     9655    1      CALL TOL$CHECK_STATUS_OVERLAP ALTRET (CHECK_RETURN_ERROR);

   9655  4 000040   000605 701000 4                  TSX1    TOL$CHECK_STATUS_OVERLAP
         4 000041   000111 702000 4                  TSX2    CHECK_RETURN_ERROR

      872     9656    1      CALL TOL$CHECK_DCW_OVERLAP ALTRET (CHECK_RETURN_ERROR);

   9656  4 000042   000442 701000 4                  TSX1    TOL$CHECK_DCW_OVERLAP
         4 000043   000111 702000 4                  TSX2    CHECK_RETURN_ERROR

      873     9657    1      CALL TOL$CHECK_DATA_OVERLAP ALTRET (CHECK_RETURN_ERROR);

   9657  4 000044   000232 701000 4                  TSX1    TOL$CHECK_DATA_OVERLAP
         4 000045   000111 702000 4                  TSX2    CHECK_RETURN_ERROR

      874     9658    1      CHECK_STATUS.LAST_DCW_POINTER = CALL_SEQUENCE.FDCWP - 1;

   9658  4 000046   200013 470500                    LDP0    @CHECK_STATUS$,,AUTO
         4 000047   000000 471500                    LDP1    0,,PR0
         4 000050   200005 473500                    LDP3    @CALL_SEQUENCE,,AUTO
         4 000051   300000 220100                    LDX0    0,,PR3
         4 000052   777777 621010                    EAX1    -1,X0
         4 000053   100001 741100                    STX1    1,,PR1

      875     9659    1      SPAN_UPPER = CHECK_RELOC ;

   9659  4 000054   000410 235000 3                  LDA     CHECK_RELOC
         4 000055   000022 771000                    ARL     18
         4 000056   000225 755000 3                  STA     TOL$SPAN_UPPER

      876     9660    1      CALL TOL$GET_NEXT_DCW (CHECK_DCW, CALL_SEQUENCE, CHECK_STATUS) ;

   9660  4 000057   000000 471500                    LDP1    0,,PR0
         4 000060   200166 451500                    STP1    @CHECKSUM_LOCATION+4,,AUTO
         4 000061   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 000062   200014 235100                    LDA     @CHECK_DCW,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:124  
         4 000063   200164 757100                    STAQ    @CHECKSUM_LOCATION+2,,AUTO
         4 000064   200164 630500                    EPPR0   @CHECKSUM_LOCATION+2,,AUTO
         4 000065   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 000066   000000 701000 xent               TSX1    TOL$GET_NEXT_DCW
         4 000067   000000 011000                    NOP     0

      877     9661    1      CHECK_DCW.ADDRESS = CHECK_DCW.ADDRESS + CHECK_RELOC ;

   9661  4 000070   000410 235000 3                  LDA     CHECK_RELOC
         4 000071   000022 771000                    ARL     18
         4 000072   200164 755100                    STA     @CHECKSUM_LOCATION+2,,AUTO
         4 000073   200014 470500                    LDP0    @CHECK_DCW,,AUTO
         4 000074   000000 236100                    LDQ     0,,PR0
         4 000075   000022 772000                    QRL     18
         4 000076   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 000077   000000 620006                    EAX0    0,QL
         4 000100   000000 740100                    STX0    0,,PR0

      878     9662    1      IF (BUFFER_ALLOCATED = 1)

   9662  4 000101   000407 236000 3                  LDQ     BUFFER_ALLOCATED
         4 000102   000001 116007                    CMPQ    1,DL
         4 000103   000110 601000 4                  TNZ     s:9667

      879     9663    2      THEN DO;

      880     9664    2              CALL TOL$FREE_BUFFER;

   9664  4 000104   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 000105   000000 701000 xent               TSX1    TOL$FREE_BUFFER
         4 000106   000000 011000                    NOP     0

      881     9665    2              BUFFER_ALLOCATED = 0;

   9665  4 000107   000407 450000 3                  STZ     BUFFER_ALLOCATED

      882     9666    2           END;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:125  

      883     9667    1      RETURN;

   9667  4 000110   000000 702200 xent               TSX2  ! X66_ARET

      884     9668
      885     9669    1   CHECK_RETURN_ERROR:
      886     9670    1      CALL TOL$FREE_BUFFER;

   9670  4 000111   000002 631400 xsym  CHECK_RETUR* EPPR1   B_VECTNIL+2
         4 000112   000000 701000 xent               TSX1    TOL$FREE_BUFFER
         4 000113   000000 011000                    NOP     0

      887     9671    1      BUFFER_ALLOCATED = 0;

   9671  4 000114   000407 450000 3                  STZ     BUFFER_ALLOCATED

      888     9672    1      ALTRETURN;

   9672  4 000115   000000 702200 xent               TSX2  ! X66_AALT

      889     9673        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:126  
      890     9674    1   TOL$CHECK_CONTROL_OVERLAP: PROC (FIRST, LAST) ALTRET ;

   9674  4 000116   200144 741300       TOL$CHECK_C* STX1  ! STATUS_SAVE+1,,AUTO

      891     9675
      892     9676    2      DCL FIRST UBIN (18) HALIGNED ;
      893     9677    2      DCL LAST  UBIN (18) HALIGNED ;
      894     9678
      895     9679        /* Code */
      896     9680
      897     9681    3      DO I = 0 TO CHECK_INDEX - 1;

   9681  4 000117   000220 450000 3                  STZ     TOL$I
         4 000120   000225 710000 4                  TRA     s:9688+3

      898     9682    3         IF (FIRST >= CHECK.LAL (I) AND FIRST <= CHECK.UAL (I))

   9682  4 000121   000220 235000 3                  LDA     TOL$I
         4 000122   000001 735000                    ALS     1
         4 000123   000000 470400 xsym               LDP0    TOL$BUFFER$
         4 000124   000100 101505                    MRL     fill='000'O
         4 000125   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         4 000126   200164 000004                    ADSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,n=4
         4 000127   200145 471500                    LDP1    @FIRST,,AUTO
         4 000130   000100 101500                    MRL     fill='000'O
         4 000131   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         4 000132   200165 000004                    ADSC9   @CHECKSUM_LOCATION+3,,AUTO cn=0,n=4
         4 000133   200165 236100                    LDQ     @CHECKSUM_LOCATION+3,,AUTO
         4 000134   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 000135   000151 604000 4                  TMI     s:9684
         4 000136   000100 101500                    MRL     fill='000'O
         4 000137   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         4 000140   200166 000004                    ADSC9   @CHECKSUM_LOCATION+4,,AUTO cn=0,n=4
         4 000141   000100 101505                    MRL     fill='000'O
         4 000142   001000 000002                    ADSC9   512,A,PR0                cn=0,n=2
         4 000143   200167 000004                    ADSC9   @CHECKSUM_LOCATION+5,,AUTO cn=0,n=4
         4 000144   200167 236100                    LDQ     @CHECKSUM_LOCATION+5,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:127  
         4 000145   200166 116100                    CMPQ    @CHECKSUM_LOCATION+4,,AUTO
         4 000146   000151 604000 4                  TMI     s:9684

      899     9683    3         THEN ALTRETURN;

   9683  4 000147   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 000150   000000 702211                    TSX2  ! 0,X1

      900     9684    3         IF (LAST >= CHECK.LAL (I) AND LAST <= CHECK.UAL (I))

   9684  4 000151   000100 101505                    MRL     fill='000'O
         4 000152   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         4 000153   200164 000004                    ADSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,n=4
         4 000154   200146 473500                    LDP3    @LAST,,AUTO
         4 000155   000100 101500                    MRL     fill='000'O
         4 000156   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2
         4 000157   200165 000004                    ADSC9   @CHECKSUM_LOCATION+3,,AUTO cn=0,n=4
         4 000160   200165 236100                    LDQ     @CHECKSUM_LOCATION+3,,AUTO
         4 000161   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 000162   000176 604000 4                  TMI     s:9686
         4 000163   000100 101500                    MRL     fill='000'O
         4 000164   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2
         4 000165   200166 000004                    ADSC9   @CHECKSUM_LOCATION+4,,AUTO cn=0,n=4
         4 000166   000100 101505                    MRL     fill='000'O
         4 000167   001000 000002                    ADSC9   512,A,PR0                cn=0,n=2
         4 000170   200167 000004                    ADSC9   @CHECKSUM_LOCATION+5,,AUTO cn=0,n=4
         4 000171   200167 236100                    LDQ     @CHECKSUM_LOCATION+5,,AUTO
         4 000172   200166 116100                    CMPQ    @CHECKSUM_LOCATION+4,,AUTO
         4 000173   000176 604000 4                  TMI     s:9686

      901     9685    3         THEN ALTRETURN;

   9685  4 000174   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 000175   000000 702211                    TSX2  ! 0,X1

      902     9686    3         IF (CHECK.LAL (I) >= FIRST AND CHECK.LAL (I) <= LAST)

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:128  
   9686  4 000176   000100 101500                    MRL     fill='000'O
         4 000177   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         4 000200   200164 000004                    ADSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,n=4
         4 000201   000100 101505                    MRL     fill='000'O
         4 000202   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         4 000203   200165 000004                    ADSC9   @CHECKSUM_LOCATION+3,,AUTO cn=0,n=4
         4 000204   200165 236100                    LDQ     @CHECKSUM_LOCATION+3,,AUTO
         4 000205   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 000206   000222 604000 4                  TMI     s:9688
         4 000207   000100 101505                    MRL     fill='000'O
         4 000210   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         4 000211   200166 000004                    ADSC9   @CHECKSUM_LOCATION+4,,AUTO cn=0,n=4
         4 000212   000100 101500                    MRL     fill='000'O
         4 000213   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2
         4 000214   200167 000004                    ADSC9   @CHECKSUM_LOCATION+5,,AUTO cn=0,n=4
         4 000215   200167 236100                    LDQ     @CHECKSUM_LOCATION+5,,AUTO
         4 000216   200166 116100                    CMPQ    @CHECKSUM_LOCATION+4,,AUTO
         4 000217   000222 604000 4                  TMI     s:9688

      903     9687    3         THEN ALTRETURN;

   9687  4 000220   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 000221   000000 702211                    TSX2  ! 0,X1

      904     9688    3      END;

   9688  4 000222   000220 236000 3                  LDQ     TOL$I
         4 000223   000001 036007                    ADLQ    1,DL
         4 000224   000220 756000 3                  STQ     TOL$I
         4 000225   000220 236000 3                  LDQ     TOL$I
         4 000226   200103 116100                    CMPQ    CHECK_INDEX,,AUTO
         4 000227   000121 602000 4                  TNC     s:9682

      905     9689    2      RETURN;

   9689  4 000230   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 000231   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:129  

      906     9690
      907     9691    2   END TOL$CHECK_CONTROL_OVERLAP;
      908     9692        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:130  
      909     9693    1   TOL$CHECK_DATA_OVERLAP: PROC ALTRET;

   9693  4 000232   200142 741300       TOL$CHECK_D* STX1  ! STATUS$+2,,AUTO

      910     9694
      911     9695    2      IF (DECK_TYPE = 'D')

   9695  4 000233   200012 470500                    LDP0    @DECK_TYPE,,AUTO
         4 000234   040000 106500                    CMPC    fill='040'O
         4 000235   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         4 000236   000000 000001 5                  ADSC9   0                        cn=0,n=1
         4 000237   000243 601000 4                  TNZ     s:9697

      912     9696    2      THEN CHECK_RELOC = 0 ;

   9696  4 000240   000000 220003                    LDX0    0,DU
         4 000241   000410 740000 3                  STX0    CHECK_RELOC
         4 000242   000245 710000 4                  TRA     s:9698

      913     9697    2      ELSE CHECK_RELOC = 72 ;

   9697  4 000243   000110 220003                    LDX0    72,DU
         4 000244   000410 740000 3                  STX0    CHECK_RELOC

      914     9698    2      FIRST = 0;

   9698  4 000245   000000 222003                    LDX2    0,DU
         4 000246   200110 742100                    STX2    FIRST,,AUTO

      915     9699    2      LAST = LOAD_OFFSET+ 72 - 1 ;

   9699  4 000247   200004 471500                    LDP1    @LOAD_OFFSET,,AUTO
         4 000250   000100 100500                    MLR     fill='000'O
         4 000251   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         4 000252   200164 000004                    ADSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,n=4
         4 000253   200164 223100                    LDX3    @CHECKSUM_LOCATION+2,,AUTO
         4 000254   000107 624013                    EAX4    71,X3
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:131  
         4 000255   200115 744100                    STX4    LAST,,AUTO

      916     9700    2      IF (LOAD_OFFSET ~= 0)

   9700  4 000256   000100 101500                    MRL     fill='000'O
         4 000257   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         4 000260   200164 000004                    ADSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,n=4
         4 000261   200164 236100                    LDQ     @CHECKSUM_LOCATION+2,,AUTO
         4 000262   000000 116003                    CMPQ    0,DU
         4 000263   000272 600000 4                  TZE     s:9702

      917     9701    2      THEN CALL TOL$SAVE_CHECK_LOCATIONS (FIRST, LAST) ;

   9701  4 000264   200115 633500                    EPPR3   LAST,,AUTO
         4 000265   200146 453500                    STP3    @LAST,,AUTO
         4 000266   200110 634500                    EPPR4   FIRST,,AUTO
         4 000267   200145 454500                    STP4    @FIRST,,AUTO
         4 000270   000637 701000 4                  TSX1    TOL$SAVE_CHECK_LOCATIONS
         4 000271   000000 011000                    NOP     0

      918     9702    2      FIRST = MAX_LOAD ;

   9702  4 000272   200006 470500                    LDP0    @MAX_LOAD,,AUTO
         4 000273   000000 220100                    LDX0    0,,PR0
         4 000274   200110 740100                    STX0    FIRST,,AUTO

      919     9703    2      LAST = 262143;

   9703  4 000275   777777 221003                    LDX1    -1,DU
         4 000276   200115 741100                    STX1    LAST,,AUTO

      920     9704    2      CALL TOL$SAVE_CHECK_LOCATIONS (FIRST, LAST) ;

   9704  4 000277   200115 631500                    EPPR1   LAST,,AUTO
         4 000300   200146 451500                    STP1    @LAST,,AUTO
         4 000301   200110 633500                    EPPR3   FIRST,,AUTO
         4 000302   200145 453500                    STP3    @FIRST,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:132  
         4 000303   000637 701000 4                  TSX1    TOL$SAVE_CHECK_LOCATIONS
         4 000304   000000 011000                    NOP     0

      921     9705    2      CHECK_DATA_SIZE = 0;

   9705  4 000305   200015 470500                    LDP0    @CHECK_DATA_SIZE,,AUTO
         4 000306   000000 450100                    STZ     0,,PR0

      922     9706    2      IOTD_FOUND = 0;

   9706  4 000307   200113 450100                    STZ     IOTD_FOUND,,AUTO

      923     9707    2      CHECK_STATUS.LAST_DCW_POINTER = CALL_SEQUENCE.FDCWP - 1;

   9707  4 000310   200013 471500                    LDP1    @CHECK_STATUS$,,AUTO
         4 000311   100000 473500                    LDP3    0,,PR1
         4 000312   200005 474500                    LDP4    @CALL_SEQUENCE,,AUTO
         4 000313   400000 220100                    LDX0    0,,PR4
         4 000314   777777 621010                    EAX1    -1,X0
         4 000315   300001 741100                    STX1    1,,PR3

      924     9708    2      SPAN_UPPER = CHECK_RELOC ;

   9708  4 000316   000410 235000 3                  LDA     CHECK_RELOC
         4 000317   000022 771000                    ARL     18
         4 000320   000225 755000 3                  STA     TOL$SPAN_UPPER

      925     9709    2      CALL TOL$GET_NEXT_DCW (CHECK_DCW, CALL_SEQUENCE, CHECK_STATUS) ;

   9709  4 000321   100000 473500                    LDP3    0,,PR1
         4 000322   200166 453500                    STP3    @CHECKSUM_LOCATION+4,,AUTO
         4 000323   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 000324   200014 235100                    LDA     @CHECK_DCW,,AUTO
         4 000325   200164 757100                    STAQ    @CHECKSUM_LOCATION+2,,AUTO
         4 000326   200164 630500                    EPPR0   @CHECKSUM_LOCATION+2,,AUTO
         4 000327   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 000330   000000 701000 xent               TSX1    TOL$GET_NEXT_DCW
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:133  
         4 000331   000000 011000                    NOP     0

      926     9710    2      CHECK_DCW.ADDRESS = CHECK_DCW.ADDRESS + CHECK_RELOC ;

   9710  4 000332   000410 235000 3                  LDA     CHECK_RELOC
         4 000333   000022 771000                    ARL     18
         4 000334   200164 755100                    STA     @CHECKSUM_LOCATION+2,,AUTO
         4 000335   200014 470500                    LDP0    @CHECK_DCW,,AUTO
         4 000336   000000 236100                    LDQ     0,,PR0
         4 000337   000022 772000                    QRL     18
         4 000340   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 000341   000000 620006                    EAX0    0,QL
         4 000342   000000 740100                    STX0    0,,PR0

      927     9711    3      DO WHILE (IOTD_FOUND = 0);

   9711  4 000343   200113 236100                    LDQ     IOTD_FOUND,,AUTO
         4 000344   000432 601000 4                  TNZ     s:9723

      928     9712    3         FIRST = CHECK_DCW.ADDRESS;

   9712  4 000345   200014 470500                    LDP0    @CHECK_DCW,,AUTO
         4 000346   000000 220100                    LDX0    0,,PR0
         4 000347   200110 740100                    STX0    FIRST,,AUTO

      929     9713    3         LAST = CHECK_DCW.ADDRESS + CHECK_STATUS.RESIDUE - 1;

   9713  4 000350   200013 471500                    LDP1    @CHECK_STATUS$,,AUTO
         4 000351   100000 473500                    LDP3    0,,PR1
         4 000352   300001 236100                    LDQ     1,,PR3
         4 000353   777777 376007                    ANQ     -1,DL
         4 000354   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 000355   000000 236100                    LDQ     0,,PR0
         4 000356   000022 772000                    QRL     18
         4 000357   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 000360   777777 621006                    EAX1    -1,QL
         4 000361   200115 741100                    STX1    LAST,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:134  

      930     9714    3         CALL TOL$CHECK_CONTROL_OVERLAP

   9714  4 000362   200115 633500                    EPPR3   LAST,,AUTO
         4 000363   200146 453500                    STP3    @LAST,,AUTO
         4 000364   200110 634500                    EPPR4   FIRST,,AUTO
         4 000365   200145 454500                    STP4    @FIRST,,AUTO
         4 000366   000116 701000 4                  TSX1    TOL$CHECK_CONTROL_OVERLAP
         4 000367   000434 702000 4                  TSX2    DATA_OVERLAP

      931     9715    3                 (FIRST,
      932     9716    3                 LAST) ALTRET (DATA_OVERLAP);
      933     9717    3         CHECK_DATA_SIZE = CHECK_DATA_SIZE + CHECK_STATUS.RESIDUE;

   9717  4 000370   200013 470500                    LDP0    @CHECK_STATUS$,,AUTO
         4 000371   000000 471500                    LDP1    0,,PR0
         4 000372   200015 473500                    LDP3    @CHECK_DATA_SIZE,,AUTO
         4 000373   100001 236100                    LDQ     1,,PR1
         4 000374   777777 376007                    ANQ     -1,DL
         4 000375   300000 036100                    ADLQ    0,,PR3
         4 000376   300000 756100                    STQ     0,,PR3

      934     9718    3         IF (CHECK_DCW.TYPE = 0)

   9718  4 000377   200014 471500                    LDP1    @CHECK_DCW,,AUTO
         4 000400   100000 236100                    LDQ     0,,PR1
         4 000401   770000 316007                    CANQ    -4096,DL
         4 000402   000406 601000 4                  TNZ     s:9720

      935     9719    3         THEN IOTD_FOUND = 1;

   9719  4 000403   000001 235007                    LDA     1,DL
         4 000404   200113 755100                    STA     IOTD_FOUND,,AUTO
         4 000405   000417 710000 4                  TRA     s:9721

      936     9720    3         ELSE CALL TOL$GET_NEXT_DCW (CHECK_DCW, CALL_SEQUENCE, CHECK_STATUS) ;

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:135  
   9720  4 000406   000000 474500                    LDP4    0,,PR0
         4 000407   200166 454500                    STP4    @CHECKSUM_LOCATION+4,,AUTO
         4 000410   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 000411   200014 235100                    LDA     @CHECK_DCW,,AUTO
         4 000412   200164 757100                    STAQ    @CHECKSUM_LOCATION+2,,AUTO
         4 000413   200164 630500                    EPPR0   @CHECKSUM_LOCATION+2,,AUTO
         4 000414   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 000415   000000 701000 xent               TSX1    TOL$GET_NEXT_DCW
         4 000416   000000 011000                    NOP     0

      937     9721    3         CHECK_DCW.ADDRESS = CHECK_DCW.ADDRESS + CHECK_RELOC ;

   9721  4 000417   000410 235000 3                  LDA     CHECK_RELOC
         4 000420   000022 771000                    ARL     18
         4 000421   200164 755100                    STA     @CHECKSUM_LOCATION+2,,AUTO
         4 000422   200014 470500                    LDP0    @CHECK_DCW,,AUTO
         4 000423   000000 236100                    LDQ     0,,PR0
         4 000424   000022 772000                    QRL     18
         4 000425   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 000426   000000 620006                    EAX0    0,QL
         4 000427   000000 740100                    STX0    0,,PR0

      938     9722    3      END;

   9722  4 000430   200113 236100                    LDQ     IOTD_FOUND,,AUTO
         4 000431   000345 600000 4                  TZE     s:9712

      939     9723    2      RETURN;

   9723  4 000432   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 000433   000001 702211                    TSX2  ! 1,X1

      940     9724    2   DATA_OVERLAP:
      941     9725    2      ERROR_CODE.LOC = ERR#B;

   9725  4 000434   003453 220000 3     DATA_OVERLAP LDX0    ERR#B
         4 000435   200010 470500                    LDP0    @ERROR_CODE,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:136  
         4 000436   000000 740100                    STX0    0,,PR0

      942     9726    2      ERROR_CODE.ERR = ERR#B;

   9726  4 000437   000000 440100                    SXL0    0,,PR0

      943     9727    2      ALTRETURN;

   9727  4 000440   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 000441   000000 702211                    TSX2  ! 0,X1

      944     9728    2   END TOL$CHECK_DATA_OVERLAP;
      945     9729        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:137  
      946     9730    1   TOL$CHECK_DCW_OVERLAP: PROC ALTRET;

   9730  4 000442   200142 741300       TOL$CHECK_D* STX1  ! STATUS$+2,,AUTO

      947     9731
      948     9732    2      IOTD_FOUND = 0;

   9732  4 000443   200113 450100                    STZ     IOTD_FOUND,,AUTO

      949     9733    2      IONTP_FOUND = 0;

   9733  4 000444   000221 450000 3                  STZ     TOL$IONTP_FOUND

      950     9734    2      CHECK_STATUS.LAST_DCW_POINTER = CALL_SEQUENCE.FDCWP - 1;

   9734  4 000445   200013 470500                    LDP0    @CHECK_STATUS$,,AUTO
         4 000446   000000 471500                    LDP1    0,,PR0
         4 000447   200005 473500                    LDP3    @CALL_SEQUENCE,,AUTO
         4 000450   300000 220100                    LDX0    0,,PR3
         4 000451   777777 622010                    EAX2    -1,X0
         4 000452   100001 742100                    STX2    1,,PR1

      951     9735    2      CALL TOL$GET_NEXT_CONTROL_WORD;

   9735  4 000453   000536 701000 4                  TSX1    TOL$GET_NEXT_CONTROL_WORD
         4 000454   000000 011000                    NOP     0

      952     9736    2      IF (CHECK_DCW.TYPE = 3)

   9736  4 000455   200014 470500                    LDP0    @CHECK_DCW,,AUTO
         4 000456   000000 236100                    LDQ     0,,PR0
         4 000457   770000 376007                    ANQ     -4096,DL
         4 000460   030000 116007                    CMPQ    12288,DL
         4 000461   000470 601000 4                  TNZ     s:9742

      953     9737    3      THEN DO;

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:138  
      954     9738    3              ERROR_CODE.LOC = ERR#C;

   9738  4 000462   003454 220000 3                  LDX0    ERR#C
         4 000463   200010 471500                    LDP1    @ERROR_CODE,,AUTO
         4 000464   100000 740100                    STX0    0,,PR1

      955     9739    3              ERROR_CODE.ERR = ERR#C;

   9739  4 000465   100000 440100                    SXL0    0,,PR1

      956     9740    3              ALTRETURN;

   9740  4 000466   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 000467   000000 702211                    TSX2  ! 0,X1

      957     9741    3           END;
      958     9742    3      DO WHILE (IOTD_FOUND = 0);

   9742  4 000470   200113 235100                    LDA     IOTD_FOUND,,AUTO
         4 000471   000526 601000 4                  TNZ     s:9753

      959     9743    3         FIRST = CHECK_STATUS.LAST_DCW_POINTER;

   9743  4 000472   200013 470500                    LDP0    @CHECK_STATUS$,,AUTO
         4 000473   000000 471500                    LDP1    0,,PR0
         4 000474   100001 220100                    LDX0    1,,PR1
         4 000475   200110 740100                    STX0    FIRST,,AUTO

      960     9744    3         LAST = FIRST;

   9744  4 000476   200115 740100                    STX0    LAST,,AUTO

      961     9745    3         CALL TOL$CHECK_CONTROL_OVERLAP

   9745  4 000477   200115 631500                    EPPR1   LAST,,AUTO
         4 000500   200146 451500                    STP1    @LAST,,AUTO
         4 000501   200110 633500                    EPPR3   FIRST,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:139  
         4 000502   200145 453500                    STP3    @FIRST,,AUTO
         4 000503   000116 701000 4                  TSX1    TOL$CHECK_CONTROL_OVERLAP
         4 000504   000530 702000 4                  TSX2    DCW_OVERLAP

      962     9746    3                 (FIRST,
      963     9747    3                 LAST) ALTRET (DCW_OVERLAP);
      964     9748    3         CALL TOL$SAVE_CHECK_LOCATIONS (FIRST, LAST) ;

   9748  4 000505   200115 630500                    EPPR0   LAST,,AUTO
         4 000506   200146 450500                    STP0    @LAST,,AUTO
         4 000507   200110 631500                    EPPR1   FIRST,,AUTO
         4 000510   200145 451500                    STP1    @FIRST,,AUTO
         4 000511   000637 701000 4                  TSX1    TOL$SAVE_CHECK_LOCATIONS
         4 000512   000000 011000                    NOP     0

      965     9749    3         IF (CHECK_DCW.TYPE = 0)

   9749  4 000513   200014 470500                    LDP0    @CHECK_DCW,,AUTO
         4 000514   000000 236100                    LDQ     0,,PR0
         4 000515   770000 316007                    CANQ    -4096,DL
         4 000516   000522 601000 4                  TNZ     s:9751

      966     9750    3         THEN IOTD_FOUND = 1;

   9750  4 000517   000001 235007                    LDA     1,DL
         4 000520   200113 755100                    STA     IOTD_FOUND,,AUTO
         4 000521   000524 710000 4                  TRA     s:9752

      967     9751    3         ELSE CALL TOL$GET_NEXT_CONTROL_WORD;

   9751  4 000522   000536 701000 4                  TSX1    TOL$GET_NEXT_CONTROL_WORD
         4 000523   000000 011000                    NOP     0

      968     9752    3      END;

   9752  4 000524   200113 235100                    LDA     IOTD_FOUND,,AUTO
         4 000525   000472 600000 4                  TZE     s:9743
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:140  

      969     9753    2      RETURN;

   9753  4 000526   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 000527   000001 702211                    TSX2  ! 1,X1

      970     9754
      971     9755    2   DCW_OVERLAP:
      972     9756    2      ERROR_CODE.LOC = ERR#D;

   9756  4 000530   003455 220000 3     DCW_OVERLAP  LDX0    ERR#D
         4 000531   200010 470500                    LDP0    @ERROR_CODE,,AUTO
         4 000532   000000 740100                    STX0    0,,PR0

      973     9757    2      ERROR_CODE.ERR = ERR#D;

   9757  4 000533   000000 440100                    SXL0    0,,PR0

      974     9758    2      ALTRETURN;

   9758  4 000534   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 000535   000000 702211                    TSX2  ! 0,X1

      975     9759
      976     9760        /* END TOL$CHECK_DCW_OVERLAP */
      977     9761        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:141  
      978     9762    2   TOL$GET_NEXT_CONTROL_WORD: PROC;

   9762  4 000536   200144 741300       TOL$GET_NEX* STX1  ! STATUS_SAVE+1,,AUTO

      979     9763
      980     9764    3      IF (CHECK_STATUS.LAST_DCW_POINTER ~= CALL_SEQUENCE.FDCWP - 1)

   9764  4 000537   200013 470500                    LDP0    @CHECK_STATUS$,,AUTO
         4 000540   000000 471500                    LDP1    0,,PR0
         4 000541   200005 473500                    LDP3    @CALL_SEQUENCE,,AUTO
         4 000542   300000 220100                    LDX0    0,,PR3
         4 000543   777777 622010                    EAX2    -1,X0
         4 000544   100001 102100                    CMPX2   1,,PR1
         4 000545   000565 600000 4                  TZE     s:9771

      981     9765    4      THEN DO;

      982     9766    4              IF (CHECK_DCW.TYPE = 3)

   9766  4 000546   200014 474500                    LDP4    @CHECK_DCW,,AUTO
         4 000547   400000 236100                    LDQ     0,,PR4
         4 000550   770000 376007                    ANQ     -4096,DL
         4 000551   030000 116007                    CMPQ    12288,DL
         4 000552   000556 601000 4                  TNZ     s:9768

      983     9767    4              THEN CHECK_STATUS.LAST_DCW_POINTER = CHECK_DCW.ADDRESS - 1;

   9767  4 000553   400000 223100                    LDX3    0,,PR4
         4 000554   777777 624013                    EAX4    -1,X3
         4 000555   100001 744100                    STX4    1,,PR1

      984     9768    4              IF (CHECK_DCW.TYPE = 0)

   9768  4 000556   400000 236100                    LDQ     0,,PR4
         4 000557   770000 316007                    CANQ    -4096,DL
         4 000560   000565 601000 4                  TNZ     s:9771

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:142  
      985     9769    4              THEN CALL TOL$BAD_CARD (VECTOR (ER#23));

   9769  4 000561   000001 630400 5                  EPPR0   1
         4 000562   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 000563   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 000564   000000 011000                    NOP     0

      986     9770    4           END;

      987     9771    3      DCW$ = ADDR (CALL_SEQUENCE);

   9771  4 000565   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 000566   200135 756100                    STQ     DCW$,,AUTO

      988     9772    3      CHECK_STATUS.LAST_DCW_POINTER = CHECK_STATUS.LAST_DCW_POINTER + 1;

   9772  4 000567   200013 470500                    LDP0    @CHECK_STATUS$,,AUTO
         4 000570   000000 471500                    LDP1    0,,PR0
         4 000571   100001 220100                    LDX0    1,,PR1
         4 000572   000001 621010                    EAX1    1,X0
         4 000573   100001 741100                    STX1    1,,PR1

      989     9773    3      DCWP.ADDRESS = CHECK_STATUS.LAST_DCW_POINTER;

   9773  4 000574   000000 471500                    LDP1    0,,PR0
         4 000575   100001 220100                    LDX0    1,,PR1
         4 000576   200135 740100                    STX0    DCW$,,AUTO

      990     9774    3      CHECK_DCW = DCW_LIST_ENTRY;

   9774  4 000577   200135 473500                    LDP3    DCW$,,AUTO
         4 000600   300000 236100                    LDQ     0,,PR3
         4 000601   200014 474500                    LDP4    @CHECK_DCW,,AUTO
         4 000602   400000 756100                    STQ     0,,PR4

      991     9775    3      RETURN;

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:143  
   9775  4 000603   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 000604   000001 702211                    TSX2  ! 1,X1

      992     9776
      993     9777    3   END TOL$GET_NEXT_CONTROL_WORD;
      994     9778
      995     9779    2   END TOL$CHECK_DCW_OVERLAP;
      996     9780        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:144  
      997     9781    1   TOL$CHECK_STATUS_OVERLAP: PROC ALTRET;

   9781  4 000605   200142 741300       TOL$CHECK_S* STX1  ! STATUS$+2,,AUTO

      998     9782
      999     9783    2      FIRST = CALL_SEQUENCE.STATUSP;

   9783  4 000606   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 000607   000000 720100                    LXL0    0,,PR0
         4 000610   200110 740100                    STX0    FIRST,,AUTO

     1000     9784    2      LAST = FIRST + 1;

   9784  4 000611   000001 622010                    EAX2    1,X0
         4 000612   200115 742100                    STX2    LAST,,AUTO

     1001     9785    2      CALL TOL$CHECK_CONTROL_OVERLAP

   9785  4 000613   200115 631500                    EPPR1   LAST,,AUTO
         4 000614   200146 451500                    STP1    @LAST,,AUTO
         4 000615   200110 633500                    EPPR3   FIRST,,AUTO
         4 000616   200145 453500                    STP3    @FIRST,,AUTO
         4 000617   000116 701000 4                  TSX1    TOL$CHECK_CONTROL_OVERLAP
         4 000620   000631 702000 4                  TSX2    STATUS_OVERLAP

     1002     9786    2              (FIRST,
     1003     9787    2              LAST) ALTRET (STATUS_OVERLAP);
     1004     9788    2      CALL TOL$SAVE_CHECK_LOCATIONS (FIRST, LAST) ;

   9788  4 000621   200115 630500                    EPPR0   LAST,,AUTO
         4 000622   200146 450500                    STP0    @LAST,,AUTO
         4 000623   200110 631500                    EPPR1   FIRST,,AUTO
         4 000624   200145 451500                    STP1    @FIRST,,AUTO
         4 000625   000637 701000 4                  TSX1    TOL$SAVE_CHECK_LOCATIONS
         4 000626   000000 011000                    NOP     0

     1005     9789    2      RETURN;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:145  

   9789  4 000627   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 000630   000001 702211                    TSX2  ! 1,X1

     1006     9790
     1007     9791    2   STATUS_OVERLAP:
     1008     9792    2      ERROR_CODE.LOC = ERR#E;

   9792  4 000631   003456 220000 3     STATUS_OVER* LDX0    ERR#E
         4 000632   200010 470500                    LDP0    @ERROR_CODE,,AUTO
         4 000633   000000 740100                    STX0    0,,PR0

     1009     9793    2      ERROR_CODE.ERR = ERR#E;

   9793  4 000634   000000 440100                    SXL0    0,,PR0

     1010     9794    2      ALTRETURN;

   9794  4 000635   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 000636   000000 702211                    TSX2  ! 0,X1

     1011     9795
     1012     9796    2   END TOL$CHECK_STATUS_OVERLAP;
     1013     9797        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:146  
     1014     9798    1   TOL$SAVE_CHECK_LOCATIONS: PROC (FIRST, LAST) ALTRET ;

   9798  4 000637   200144 741300       TOL$SAVE_CH* STX1  ! STATUS_SAVE+1,,AUTO

     1015     9799
     1016     9800    2      DCL FIRST UBIN (18) HALIGNED ;
     1017     9801    2      DCL LAST  UBIN (18) HALIGNED ;
     1018     9802
     1019     9803        /* Code */
     1020     9804
     1021     9805    2      IF (CHECK_INDEX > 1023)

   9805  4 000640   200103 235100                    LDA     CHECK_INDEX,,AUTO
         4 000641   002000 115007                    CMPA    1024,DL
         4 000642   000647 602000 4                  TNC     s:9807

     1022     9806    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#58));

   9806  4 000643   000006 630400 5                  EPPR0   6
         4 000644   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 000645   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 000646   000000 011000                    NOP     0

     1023     9807    2      CHECK.LAL (CHECK_INDEX) = FIRST;

   9807  4 000647   200103 235100                    LDA     CHECK_INDEX,,AUTO
         4 000650   000001 735000                    ALS     1
         4 000651   200145 470500                    LDP0    @FIRST,,AUTO
         4 000652   000000 471400 xsym               LDP1    TOL$BUFFER$
         4 000653   000105 100500                    MLR     fill='000'O
         4 000654   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         4 000655   100000 000002                    ADSC9   0,A,PR1                  cn=0,n=2

     1024     9808    2      CHECK.UAL (CHECK_INDEX) = LAST;

   9808  4 000656   200146 471500                    LDP1    @LAST,,AUTO
         4 000657   000000 473400 xsym               LDP3    TOL$BUFFER$
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:147  
         4 000660   000105 100500                    MLR     fill='000'O
         4 000661   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         4 000662   301000 000002                    ADSC9   512,A,PR3                cn=0,n=2

     1025     9809    2      CHECK_INDEX = CHECK_INDEX + 1;

   9809  4 000663   200103 236100                    LDQ     CHECK_INDEX,,AUTO
         4 000664   000001 036007                    ADLQ    1,DL
         4 000665   200103 756100                    STQ     CHECK_INDEX,,AUTO

     1026     9810    2      RETURN;

   9810  4 000666   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 000667   000001 702211                    TSX2  ! 1,X1

     1027     9811
     1028     9812    2   END TOL$SAVE_CHECK_LOCATIONS;
     1029     9813        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:148  
     1030     9814    1   TOL$CHECKSUM: PROC (CHECKSUM_SEED,

   9814  4 000670   200156 741300       TOL$CHECKSUM STX1  ! CHECKSUM_CHECK+2,,AUTO

     1031     9815    1              CHECKSUM_START$,
     1032     9816    1              CHECKSUM_SIZE,
     1033     9817    1              CHECKSUM_LOCATION);
     1034     9818
     1035     9819        /* Parameters */
     1036     9820
     1037     9821    2      DCL CHECKSUM_LOCATION UBIN (36) ALIGNED;
     1038     9822    2      DCL CHECKSUM_SEED UBIN (36) ALIGNED;
     1039     9823    2      DCL 1 SEED REDEF CHECKSUM_SEED ALIGNED,
     1040     9824    2            2 UPPER UBIN (18) UNAL,
     1041     9825    2            2 LOWER UBIN (18) UNAL;
     1042     9826    2      DCL CHECKSUM_SIZE UBIN (36) ALIGNED;
     1043     9827    2      DCL CHECKSUM_START$ PTR ALIGNED;
     1044     9828
     1045     9829        /* Variables */
     1046     9830
     1047     9831    2      DCL 1 CHECKSUM_DATA (0:22) BASED (CHECKSUM_START$) ALIGNED,
     1048     9832    2            2 UPPER UBIN (18) UNAL,
     1049     9833    2            2 LOWER UBIN (18) UNAL;
     1050     9834    2      DCL 1 CHECKSUM_SPLIT STATIC ALIGNED,
     1051     9835    2            2 UPPER UBIN (18) UNAL INIT (0),
     1052     9836    2            2 LOWER UBIN (18) UNAL;
     1053     9837    2      DCL CHECKSUM_BINARY REDEF CHECKSUM_SPLIT UBIN (36) ALIGNED;
     1054     9838           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:149  
     1055     9839        /* Code */
     1056     9840
     1057     9841    2      CHECKSUM_SPLIT.LOWER = SEED.UPPER;

   9841  4 000671   200157 470500                    LDP0    @CHECKSUM_SEED,,AUTO
         4 000672   000000 220100                    LDX0    0,,PR0
         4 000673   003467 440000 3                  SXL0    CHECKSUM_SPLIT

     1058     9842    2      CHECKSUM.UH = CHECKSUM_BINARY;

   9842  4 000674   003467 235000 3                  LDA     CHECKSUM_SPLIT
         4 000675   200131 755100                    STA     CHECKSUM,,AUTO

     1059     9843    2      CHECKSUM_SPLIT.LOWER = SEED.LOWER;

   9843  4 000676   000000 722100                    LXL2    0,,PR0
         4 000677   003467 442000 3                  SXL2    CHECKSUM_SPLIT

     1060     9844    2      CHECKSUM.LH = CHECKSUM_BINARY;

   9844  4 000700   003467 236000 3                  LDQ     CHECKSUM_SPLIT
         4 000701   200132 756100                    STQ     CHECKSUM+1,,AUTO

     1061     9845    3      DO M = 0 TO CHECKSUM_SIZE - 1;

   9845  4 000702   200120 450100                    STZ     M,,AUTO
         4 000703   000725 710000 4                  TRA     s:9850+3

     1062     9846    3         CHECKSUM_SPLIT.LOWER = CHECKSUM_DATA.LOWER (M);

   9846  4 000704   200160 470500                    LDP0    @CHECKSUM_START$,,AUTO
         4 000705   000000 471500                    LDP1    0,,PR0
         4 000706   200120 720100                    LXL0    M,,AUTO
         4 000707   100000 721110                    LXL1    0,X0,PR1
         4 000710   003467 441000 3                  SXL1    CHECKSUM_SPLIT

     1063     9847    3         CHECKSUM.LH = CHECKSUM.LH + CHECKSUM_BINARY;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:150  

   9847  4 000711   200132 236100                    LDQ     CHECKSUM+1,,AUTO
         4 000712   003467 036000 3                  ADLQ    CHECKSUM_SPLIT
         4 000713   200132 756100                    STQ     CHECKSUM+1,,AUTO

     1064     9848    3         CHECKSUM_SPLIT.LOWER = CHECKSUM_DATA.UPPER (M);

   9848  4 000714   000000 471500                    LDP1    0,,PR0
         4 000715   100000 222110                    LDX2    0,X0,PR1
         4 000716   003467 442000 3                  SXL2    CHECKSUM_SPLIT

     1065     9849    3         CHECKSUM.UH = CHECKSUM.UH + CHECKSUM_BINARY;

   9849  4 000717   200131 236100                    LDQ     CHECKSUM,,AUTO
         4 000720   003467 036000 3                  ADLQ    CHECKSUM_SPLIT
         4 000721   200131 756100                    STQ     CHECKSUM,,AUTO

     1066     9850    3      END;

   9850  4 000722   200120 235100                    LDA     M,,AUTO
         4 000723   000001 035007                    ADLA    1,DL
         4 000724   200120 755100                    STA     M,,AUTO
         4 000725   200161 470500                    LDP0    @CHECKSUM_SIZE,,AUTO
         4 000726   200120 236100                    LDQ     M,,AUTO
         4 000727   000000 116100                    CMPQ    0,,PR0
         4 000730   000704 602000 4                  TNC     s:9846

     1067     9851    3      DO WHILE (CHECKSUM.LOWER.UPPER ~= 0 OR

   9851  4 000731   000747 710000 4                  TRA     s:9859

     1068     9852    3              CHECKSUM.UPPER.UPPER ~= 0);
     1069     9853    3         CHECKSUM_SPLIT.LOWER = CHECKSUM.LOWER.UPPER;

   9853  4 000732   200132 220100                    LDX0    CHECKSUM+1,,AUTO
         4 000733   003467 440000 3                  SXL0    CHECKSUM_SPLIT

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:151  
     1070     9854    3         CHECKSUM.UH = CHECKSUM.UH + CHECKSUM_BINARY;

   9854  4 000734   200131 236100                    LDQ     CHECKSUM,,AUTO
         4 000735   003467 036000 3                  ADLQ    CHECKSUM_SPLIT
         4 000736   200131 756100                    STQ     CHECKSUM,,AUTO

     1071     9855    3         CHECKSUM.LOWER.UPPER = 0;

   9855  4 000737   000000 221003                    LDX1    0,DU
         4 000740   200132 741100                    STX1    CHECKSUM+1,,AUTO

     1072     9856    3         CHECKSUM_SPLIT.LOWER = CHECKSUM.UPPER.UPPER;

   9856  4 000741   200131 222100                    LDX2    CHECKSUM,,AUTO
         4 000742   003467 442000 3                  SXL2    CHECKSUM_SPLIT

     1073     9857    3         CHECKSUM.LH = CHECKSUM.LH + CHECKSUM_BINARY;

   9857  4 000743   200132 236100                    LDQ     CHECKSUM+1,,AUTO
         4 000744   003467 036000 3                  ADLQ    CHECKSUM_SPLIT
         4 000745   200132 756100                    STQ     CHECKSUM+1,,AUTO

     1074     9858    3         CHECKSUM.UPPER.UPPER = 0;

   9858  4 000746   200131 741100                    STX1    CHECKSUM,,AUTO

     1075     9859    3      END;

   9859  4 000747   200132 220100                    LDX0    CHECKSUM+1,,AUTO
         4 000750   000732 601000 4                  TNZ     s:9853
         4 000751   200131 221100                    LDX1    CHECKSUM,,AUTO
         4 000752   000732 601000 4                  TNZ     s:9853

     1076     9860    2      CHECKSUM.LOWER.UPPER = CHECKSUM.UPPER.LOWER;

   9860  4 000753   200131 723100                    LXL3    CHECKSUM,,AUTO
         4 000754   200132 743100                    STX3    CHECKSUM+1,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:152  

     1077     9861    2      CHECKSUM_LOCATION = CHECKSUM.LH;

   9861  4 000755   200162 470500                    LDP0    @CHECKSUM_LOCATION,,AUTO
         4 000756   200132 235100                    LDA     CHECKSUM+1,,AUTO
         4 000757   000000 755100                    STA     0,,PR0

     1078     9862    2      RETURN;

   9862  4 000760   200156 221300                    LDX1  ! CHECKSUM_CHECK+2,,AUTO
         4 000761   000001 702211                    TSX2  ! 1,X1

     1079     9863
     1080     9864    2   END TOL$CHECKSUM;
     1081     9865        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:153  
     1082     9866    1   TOL$GET_CATALOG: ENTRY (KEY_VALUE,

   9866  4 000762   000000 700200 xent  TOL$GET_CAT* TSX0  ! X66_AUTO_N
         4 000763   000206 000013                    ZERO    134,11

     1083     9867    1              LOAD_OFFSET,
     1084     9868    1              CALL_SEQUENCE,
     1085     9869    1              MAX_LOAD,
     1086     9870    1              LOAD_SIZE,
     1087     9871    1              ERROR_CODE) ALTRET;
     1088     9872
     1089     9873    1      CALL TOL$GET_BUFFER;

   9873  4 000764   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 000765   000000 701000 xent               TSX1    TOL$GET_BUFFER
         4 000766   000000 011000                    NOP     0

     1090     9874    1      CALL_SEQ$ = ADDR (CALL_SEQUENCE);

   9874  4 000767   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 000770   000227 756000 3                  STQ     TOL$CALL_SEQ$

     1091     9875    1      CALL TOL$OPEN_DECKFILE;

   9875  4 000771   005747 701000 4                  TSX1    TOL$OPEN_DECKFILE
         4 000772   000000 011000                    NOP     0

     1092     9876    1      STATUS$ = ADDR (CALL_SEQUENCE);

   9876  4 000773   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 000774   200140 756100                    STQ     STATUS$,,AUTO

     1093     9877    1      STATUSP.ADDRESS = CALL_SEQUENCE.STATUSP;

   9877  4 000775   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 000776   000000 720100                    LXL0    0,,PR0
         4 000777   200140 740100                    STX0    STATUS$,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:154  

     1094     9878    1      CALL TOL$CHECK_CALL_SEQUENCE

   9878  4 001000   200106 631500                    EPPR1   DATA_SIZE,,AUTO
         4 001001   200176 451500                    STP1    @CHECKSUM_LOCATION+12,,AUTO
         4 001002   200134 633500                    EPPR3   DCW,,AUTO
         4 001003   200175 453500                    STP3    @CHECKSUM_LOCATION+11,,AUTO
         4 001004   200140 634500                    EPPR4   STATUS$,,AUTO
         4 001005   200174 454500                    STP4    @CHECKSUM_LOCATION+10,,AUTO
         4 001006   000010 236000 5                  LDQ     8
         4 001007   200011 235100                    LDA     @EDIT_NAME,,AUTO
         4 001010   200172 757100                    STAQ    @CHECKSUM_LOCATION+8,,AUTO
         4 001011   200010 236100                    LDQ     @ERROR_CODE,,AUTO
         4 001012   200007 235100                    LDA     @LOAD_SIZE,,AUTO
         4 001013   200170 757100                    STAQ    @CHECKSUM_LOCATION+6,,AUTO
         4 001014   200006 236100                    LDQ     @MAX_LOAD,,AUTO
         4 001015   200005 235100                    LDA     @CALL_SEQUENCE,,AUTO
         4 001016   200166 757100                    STAQ    @CHECKSUM_LOCATION+4,,AUTO
         4 001017   200004 236100                    LDQ     @LOAD_OFFSET,,AUTO
         4 001020   200003 235100                    LDA     @KEY_VALUE,,AUTO
         4 001021   200164 757100                    STAQ    @CHECKSUM_LOCATION+2,,AUTO
         4 001022   200164 630500                    EPPR0   @CHECKSUM_LOCATION+2,,AUTO
         4 001023   000007 631400 5                  EPPR1   7
         4 001024   000000 701000 4                  TSX1    s:11
         4 001025   001172 702000 4                  TSX2    CATALOG_RETURN_ERROR

     1095     9879    1              (KEY_VALUE,
     1096     9880    1              LOAD_OFFSET,
     1097     9881    1              CALL_SEQUENCE,
     1098     9882    1              MAX_LOAD,
     1099     9883    1              LOAD_SIZE,
     1100     9884    1              ERROR_CODE,
     1101     9885    1              EDIT_NAME,
     1102     9886    1              'D',
     1103     9887    1              STATUS$,
     1104     9888    1              DCW,
     1105     9889    1              DATA_SIZE) ALTRET (CATALOG_RETURN_ERROR);
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:155  
     1106     9890    1      CATALOG_INDEX = 0;

   9890  4 001026   200102 450100                    STZ     CATALOG_INDEX,,AUTO

     1107     9891    1      CATALOG_DECKS (0) = 0;

   9891  4 001027   000000 220003                    LDX0    0,DU
         4 001030   200017 740100                    STX0    CATALOG_DECKS,,AUTO

     1108     9892    1      CATALOG_COUNT = 0;

   9892  4 001031   200016 450100                    STZ     CATALOG_COUNT,,AUTO

     1109     9893    1      IF (KEY_VALUE ~= MASTER_CATALOG_KEY)

   9893  4 001032   200003 470500                    LDP0    @KEY_VALUE,,AUTO
         4 001033   000000 106500                    CMPC    fill='000'O
         4 001034   000000 000030                    ADSC9   0,,PR0                   cn=0,n=24
         4 001035   000424 000030 3                  ADSC9   MASTER_CATALOG_KEY       cn=0,n=24
         4 001036   001042 600000 4                  TZE     s:9895

     1110     9894    1      THEN CALL TOL$READ_MASTER_CATALOG;

   9894  4 001037   001447 701000 4                  TSX1    TOL$READ_MASTER_CATALOG
         4 001040   000000 011000                    NOP     0
         4 001041   001046 710000 4                  TRA     s:9896

     1111     9895    1      ELSE CALL TOL$READ_CATALOG (KEY_VALUE);

   9895  4 001042   200003 236100                    LDQ     @KEY_VALUE,,AUTO
         4 001043   200145 756100                    STQ     STATUS_SAVE+2,,AUTO
         4 001044   001300 701000 4                  TSX1    TOL$READ_CATALOG
         4 001045   000000 011000                    NOP     0

     1112     9896    1      CALL TOL$SET_CATALOG_SEQUENCE ALTRET (CATALOG_RETURN_ERROR);

   9896  4 001046   001604 701000 4                  TSX1    TOL$SET_CATALOG_SEQUENCE
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:156  
         4 001047   001172 702000 4                  TSX2    CATALOG_RETURN_ERROR

     1113     9897    1      IF (CALL_SEQUENCE.NEXT_ENTRY = CATALOG_DATA.ENTRY_COUNT + 1)

   9897  4 001050   000420 236000 3                  LDQ     CATALOG_DATA
         4 001051   777777 376007                    ANQ     -1,DL
         4 001052   000001 036007                    ADLQ    1,DL
         4 001053   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 001054   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 001055   000001 236100                    LDQ     1,,PR0
         4 001056   777777 376007                    ANQ     -1,DL
         4 001057   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 001060   001114 601000 4                  TNZ     s:9911

     1114     9898    1      THEN IF (CATALOG_INDEX = CATALOG_COUNT)

   9898  4 001061   200102 236100                    LDQ     CATALOG_INDEX,,AUTO
         4 001062   200016 116100                    CMPQ    CATALOG_COUNT,,AUTO
         4 001063   001072 601000 4                  TNZ     s:9904

     1115     9899    2         THEN DO;

     1116     9900    2                 CATALOG_DATA.ENTRY_COUNT = CATALOG_DATA.ENTRY_COUNT - 1;

   9900  4 001064   000420 720000 3                  LXL0    CATALOG_DATA
         4 001065   777777 621010                    EAX1    -1,X0
         4 001066   000420 441000 3                  SXL1    CATALOG_DATA

     1117     9901    2                 CALL TOL$SET_CATALOG_SEQUENCE ALTRET (CATALOG_RETURN_ERROR);

   9901  4 001067   001604 701000 4                  TSX1    TOL$SET_CATALOG_SEQUENCE
         4 001070   001172 702000 4                  TSX2    CATALOG_RETURN_ERROR

     1118     9902    2              END;

   9902  4 001071   001114 710000 4                  TRA     s:9911

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:157  
     1119     9903    2         ELSE DO;

     1120     9904    2                 CALL_SEQUENCE_MORE.MORE = '0'B;

   9904  4 001072   000100 100400                    MLR     fill='000'O
         4 001073   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         4 001074   000001 400026                    ADSC9   1,,PR0                   cn=2,n=22

     1121     9905    2                 CALL_SEQUENCE.CATALOG# = 0;

   9905  4 001075   000000 220003                    LDX0    0,DU
         4 001076   000001 740100                    STX0    1,,PR0

     1122     9906    2                 CATALOG_INDEX = CATALOG_INDEX + 1;

   9906  4 001077   000001 036007                    ADLQ    1,DL
         4 001100   200102 756100                    STQ     CATALOG_INDEX,,AUTO

     1123     9907    2                 CATALOG_DECK# = CATALOG_DECKS (CATALOG_INDEX);

   9907  4 001101   200102 235100                    LDA     CATALOG_INDEX,,AUTO
         4 001102   000001 735000                    ALS     1
         4 001103   000100 100505                    MLR     fill='000'O
         4 001104   200017 000002                    ADSC9   CATALOG_DECKS,A,AUTO     cn=0,n=2
         4 001105   200101 000002                    ADSC9   CATALOG_DECK#,,AUTO      cn=0,n=2

     1124     9908    2                 CALL TOL$READ_CATALOG (KEY_VALUE);

   9908  4 001106   200003 236100                    LDQ     @KEY_VALUE,,AUTO
         4 001107   200145 756100                    STQ     STATUS_SAVE+2,,AUTO
         4 001110   001300 701000 4                  TSX1    TOL$READ_CATALOG
         4 001111   000000 011000                    NOP     0

     1125     9909    2                 CALL TOL$SET_CATALOG_SEQUENCE ALTRET (CATALOG_RETURN_ERROR);

   9909  4 001112   001604 701000 4                  TSX1    TOL$SET_CATALOG_SEQUENCE
         4 001113   001172 702000 4                  TSX2    CATALOG_RETURN_ERROR
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:158  

     1126     9910    2              END;

     1127     9911    1      CATALOG_ENTRY_KEY.DECK# = CATALOG_DATA.DECK#;

   9911  4 001114   000420 236000 3                  LDQ     CATALOG_DATA
         4 001115   000011 772000                    QRL     9
         4 001116   000230 552030 3                  STBQ    TOL$CATALOG_ENTRY_KEY,'30'O

     1128     9912    1      LOAD_SIZE = 0;

   9912  4 001117   200007 470500                    LDP0    @LOAD_SIZE,,AUTO
         4 001120   000000 450100                    STZ     0,,PR0

     1129     9913    1      DO CATALOG_ENTRY_KEY.ENTRY# = CALL_SEQUENCE.NEXT_ENTRY TO

   9913  4 001121   200005 471500                    LDP1    @CALL_SEQUENCE,,AUTO
         4 001122   000000 100500                    MLR     fill='000'O
         4 001123   100001 400002                    ADSC9   1,,PR1                   cn=2,n=2
         4 001124   000230 600002 3                  ADSC9   TOL$CATALOG_ENTRY_KEY    cn=3,n=2
         4 001125   001143 710000 4                  TRA     s:9917+9

     1130     9914    2              CATALOG_DATA.ENTRY_COUNT;
     1131     9915    2         CALL TOL$READ_ENTRY;

   9915  4 001126   001364 701000 4                  TSX1    TOL$READ_ENTRY
         4 001127   000000 011000                    NOP     0

     1132     9916    2         CALL TOL$MOVE_ENTRY ALTRET (CATALOG_RETURN_ERROR);

   9916  4 001130   001176 701000 4                  TSX1    TOL$MOVE_ENTRY
         4 001131   001172 702000 4                  TSX2    CATALOG_RETURN_ERROR

     1133     9917    2      END;

   9917  4 001132   000230 235000 3                  LDA     TOL$CATALOG_ENTRY_KEY
         4 001133   000231 236000 3                  LDQ     TOL$CATALOG_ENTRY_KEY+1
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:159  
         4 001134   000033 773000                    LRL     27
         4 001135   777777 376007                    ANQ     -1,DL
         4 001136   000001 036007                    ADLQ    1,DL
         4 001137   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 001140   000000 101500                    MRL     fill='000'O
         4 001141   200164 000004                    ADSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,n=4
         4 001142   000230 600002 3                  ADSC9   TOL$CATALOG_ENTRY_KEY    cn=3,n=2
         4 001143   000230 235000 3                  LDA     TOL$CATALOG_ENTRY_KEY
         4 001144   000231 236000 3                  LDQ     TOL$CATALOG_ENTRY_KEY+1
         4 001145   000033 773000                    LRL     27
         4 001146   777777 376007                    ANQ     -1,DL
         4 001147   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 001150   000420 236000 3                  LDQ     CATALOG_DATA
         4 001151   777777 376007                    ANQ     -1,DL
         4 001152   200165 116100                    CMPQ    @CHECKSUM_LOCATION+3,,AUTO
         4 001153   001126 605000 4                  TPL     s:9915

     1134     9918    1      IF (CATALOG_INDEX ~= CATALOG_COUNT)

   9918  4 001154   200102 236100                    LDQ     CATALOG_INDEX,,AUTO
         4 001155   200016 116100                    CMPQ    CATALOG_COUNT,,AUTO
         4 001156   001163 600000 4                  TZE     s:9923

     1135     9919    2      THEN DO;

     1136     9920    2              DATA_SIZE = 0;

   9920  4 001157   200106 450100                    STZ     DATA_SIZE,,AUTO

     1137     9921    2              CALL TOL$MOVE_ENTRY ALTRET (CATALOG_RETURN_ERROR);

   9921  4 001160   001176 701000 4                  TSX1    TOL$MOVE_ENTRY
         4 001161   001172 702000 4                  TSX2    CATALOG_RETURN_ERROR

     1138     9922    2           END;

   9922  4 001162   001166 710000 4                  TRA     s:9924
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:160  

     1139     9923    1      ELSE CALL_SEQUENCE.NO_MORE = -1;

   9923  4 001163   000001 335007                    LCA     1,DL
         4 001164   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 001165   000006 755100                    STA     6,,PR0

     1140     9924    1      CALL TOL$FREE_BUFFER;

   9924  4 001166   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 001167   000000 701000 xent               TSX1    TOL$FREE_BUFFER
         4 001170   000000 011000                    NOP     0

     1141     9925    1      RETURN;

   9925  4 001171   000000 702200 xent               TSX2  ! X66_ARET

     1142     9926
     1143     9927    1   CATALOG_RETURN_ERROR:
     1144     9928    1      CALL TOL$FREE_BUFFER;

   9928  4 001172   000002 631400 xsym  CATALOG_RET* EPPR1   B_VECTNIL+2
         4 001173   000000 701000 xent               TSX1    TOL$FREE_BUFFER
         4 001174   000000 011000                    NOP     0

     1145     9929    1      ALTRETURN;

   9929  4 001175   000000 702200 xent               TSX2  ! X66_AALT

     1146     9930
     1147     9931        /* END TOL$GET_CATALOG */
     1148     9932        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:161  
     1149     9933    1   TOL$MOVE_ENTRY: PROC ALTRET;

   9933  4 001176   200142 741300       TOL$MOVE_EN* STX1  ! STATUS$+2,,AUTO

     1150     9934
     1151     9935    2      IF (DATA_SIZE < 6)

   9935  4 001177   200106 235100                    LDA     DATA_SIZE,,AUTO
         4 001200   000006 115007                    CMPA    6,DL
         4 001201   001220 603000 4                  TRC     s:9942

     1152     9936    3      THEN DO;

     1153     9937    3              ERROR_CODE.LOC = ERR#H;

   9937  4 001202   003461 220000 3                  LDX0    ERR#H
         4 001203   200010 470500                    LDP0    @ERROR_CODE,,AUTO
         4 001204   000000 740100                    STX0    0,,PR0

     1154     9938    3              ERROR_CODE.ERR = ERR#HO;

   9938  4 001205   003462 221000 3                  LDX1    ERR#HO
         4 001206   000000 441100                    SXL1    0,,PR0

     1155     9939    3              CALL_SEQUENCE.NEXT_ENTRY = CATALOG_ENTRY_KEY.ENTRY#;

   9939  4 001207   000230 235000 3                  LDA     TOL$CATALOG_ENTRY_KEY
         4 001210   000231 236000 3                  LDQ     TOL$CATALOG_ENTRY_KEY+1
         4 001211   000033 773000                    LRL     27
         4 001212   777777 376007                    ANQ     -1,DL
         4 001213   000000 622006                    EAX2    0,QL
         4 001214   200005 471500                    LDP1    @CALL_SEQUENCE,,AUTO
         4 001215   100001 442100                    SXL2    1,,PR1

     1156     9940    3              ALTRETURN;

   9940  4 001216   200142 221300                    LDX1  ! STATUS$+2,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:162  
         4 001217   000000 702211                    TSX2  ! 0,X1

     1157     9941    3           END;
     1158     9942    2      CALL TOL$SAVE_DATA

   9942  4 001220   000011 236000 5                  LDQ     9
         4 001221   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 001222   000012 236000 5                  LDQ     10
         4 001223   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 001224   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 001225   200174 756100                    STQ     @CHECKSUM_LOCATION+10,,AUTO
         4 001226   200106 630500                    EPPR0   DATA_SIZE,,AUTO
         4 001227   200173 450500                    STP0    @CHECKSUM_LOCATION+9,,AUTO
         4 001230   200165 631500                    EPPR1   @CHECKSUM_LOCATION+3,,AUTO
         4 001231   200172 451500                    STP1    @CHECKSUM_LOCATION+8,,AUTO
         4 001232   200140 236100                    LDQ     STATUS$,,AUTO
         4 001233   200171 756100                    STQ     @CHECKSUM_LOCATION+7,,AUTO
         4 001234   200134 633500                    EPPR3   DCW,,AUTO
         4 001235   200170 453500                    STP3    @CHECKSUM_LOCATION+6,,AUTO
         4 001236   000013 236000 5                  LDQ     11
         4 001237   200167 756100                    STQ     @CHECKSUM_LOCATION+5,,AUTO
         4 001240   200164 634500                    EPPR4   @CHECKSUM_LOCATION+2,,AUTO
         4 001241   200166 454500                    STP4    @CHECKSUM_LOCATION+4,,AUTO
         4 001242   200166 630500                    EPPR0   @CHECKSUM_LOCATION+4,,AUTO
         4 001243   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 001244   000000 701000 xent               TSX1    TOL$SAVE_DATA
         4 001245   001272 702000 4                  TSX2    CANT_HAPPEN

     1159     9943    2              (ADDR (OBJECT_KEY),
     1160     9944    2              6,
     1161     9945    2              DCW,
     1162     9946    2              STATUS,
     1163     9947    2              ADDR (SPLIT_LOAD),
     1164     9948    2              DATA_SIZE,
     1165     9949    2              CALL_SEQUENCE) ALTRET (CANT_HAPPEN);
     1166     9950    2      CALL TOL$CHECKSUM

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:163  
   9950  4 001246   000014 236000 5                  LDQ     12
         4 001247   200177 756100                    STQ     @CHECKSUM_LOCATION+13,,AUTO
         4 001250   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 001251   000004 036003                    ADLQ    4,DU
         4 001252   200162 756100                    STQ     @CHECKSUM_LOCATION,,AUTO
         4 001253   000013 236000 5                  LDQ     11
         4 001254   200161 756100                    STQ     @CHECKSUM_SIZE,,AUTO
         4 001255   200177 630500                    EPPR0   @CHECKSUM_LOCATION+13,,AUTO
         4 001256   200160 450500                    STP0    @CHECKSUM_START$,,AUTO
         4 001257   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 001260   000004 036003                    ADLQ    4,DU
         4 001261   200157 756100                    STQ     @CHECKSUM_SEED,,AUTO
         4 001262   000670 701000 4                  TSX1    TOL$CHECKSUM
         4 001263   000000 011000                    NOP     0

     1167     9951    2              (CALL_SEQUENCE.CHECKSUM,
     1168     9952    2              ADDR (SAVED_KEY),
     1169     9953    2              6,
     1170     9954    2              CALL_SEQUENCE.CHECKSUM);
     1171     9955    2      LOAD_SIZE = LOAD_SIZE + 6;

   9955  4 001264   200007 470500                    LDP0    @LOAD_SIZE,,AUTO
         4 001265   000000 235100                    LDA     0,,PR0
         4 001266   000006 035007                    ADLA    6,DL
         4 001267   000000 755100                    STA     0,,PR0

     1172     9956    2      RETURN;

   9956  4 001270   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 001271   000001 702211                    TSX2  ! 1,X1

     1173     9957
     1174     9958    2   CANT_HAPPEN: CALL TOL$BAD_CARD (VECTOR (ER#25));

   9958  4 001272   000020 630400 5     CANT_HAPPEN  EPPR0   16
         4 001273   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001274   000000 701000 xent               TSX1    TOL$BAD_CARD
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:164  
         4 001275   000000 011000                    NOP     0

     1175     9959
     1176     9960    2   END TOL$MOVE_ENTRY;

   9960  4 001276   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 001277   000001 702211                    TSX2  ! 1,X1

     1177     9961        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:165  
     1178     9962    1   TOL$READ_CATALOG: PROC (KEY_VALUE) ;

   9962  4 001300   200144 741300       TOL$READ_CA* STX1  ! STATUS_SAVE+1,,AUTO

     1179     9963
     1180     9964    2      DCL 1 KEY_VALUE ALIGNED,
     1181     9965    2            2 SIZE UBIN (9) UNAL,
     1182     9966    2            2 DATA CHAR (23) UNAL;
     1183     9967
     1184     9968        /* Code */
     1185     9969
     1186     9970    2      CATALOG_KEY = KEY_VALUE;

   9970  4 001301   200145 470500                    LDP0    @KEY_VALUE,,AUTO
         4 001302   000000 100500                    MLR     fill='000'O
         4 001303   000000 000030                    ADSC9   0,,PR0                   cn=0,n=24
         4 001304   000232 000030 3                  ADSC9   TOL$CATALOG_KEY          cn=0,n=24

     1187     9971    2      IF (CATALOG_KEY.SIZE = 23)

   9971  4 001305   000232 236000 3                  LDQ     TOL$CATALOG_KEY
         4 001306   777000 376003                    ANQ     -512,DU
         4 001307   027000 116003                    CMPQ    11776,DU
         4 001310   001314 601000 4                  TNZ     s:9973

     1188     9972    2      THEN CATALOG_KEY.SPLIT.DECK# = CATALOG_DECK#;

   9972  4 001311   200101 220100                    LDX0    CATALOG_DECK#,,AUTO
         4 001312   000237 440000 3                  SXL0    TOL$CATALOG_KEY+5
         4 001313   001324 710000 4                  TRA     s:9975

     1189     9973    2      ELSE IF (CATALOG_KEY ~= MASTER_CATALOG_KEY)

   9973  4 001314   000000 106400                    CMPC    fill='000'O
         4 001315   000232 000030 3                  ADSC9   TOL$CATALOG_KEY          cn=0,n=24
         4 001316   000424 000030 3                  ADSC9   MASTER_CATALOG_KEY       cn=0,n=24
         4 001317   001324 600000 4                  TZE     s:9975
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:166  

     1190     9974    2         THEN CALL TOL$BAD_CARD (VECTOR (ER#30));

   9974  4 001320   000024 630400 5                  EPPR0   20
         4 001321   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001322   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 001323   000000 011000                    NOP     0

     1191     9975    2      CALL M$READ (READ_CATALOG_DATA) ALTRET (BAD_CATALOG_READ);

   9975  4 001324   000110 630400 3                  EPPR0   READ_CATALOG_DATA
         4 001325   440000 713400                    CLIMB   alt,read
         4 001326   401400 401760                    pmme    nvectors=4
         4 001327   001343 702000 4                  TSX2    BAD_CATALOG_READ

     1192     9976    2      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;

   9976  4 001330   000412 470400 3                  LDP0    M$DECKFILE$
         4 001331   000000 235100                    LDA     0,,PR0
         4 001332   000217 755000 3                  STA     TOL$DECKFILE_ARS#

     1193     9977    2      IF (DECKFILE_ARS# ~= 8)

   9977  4 001333   000010 115007                    CMPA    8,DL
         4 001334   001341 600000 4                  TZE     s:9979

     1194     9978    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#31));

   9978  4 001335   000030 630400 5                  EPPR0   24
         4 001336   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001337   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 001340   000000 011000                    NOP     0

     1195     9979    2      RETURN;

   9979  4 001341   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 001342   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:167  

     1196     9980
     1197     9981    2   BAD_CATALOG_READ:
     1198     9982    2      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)

   9982  4 001343   000000 470400 xsym  BAD_CATALOG* LDP0    B$TCB$
         4 001344   000000 471500                    LDP1    0,,PR0
         4 001345   100102 236100                    LDQ     66,,PR1
         4 001346   377770 376007                    ANQ     131064,DL
         4 001347   001020 116007                    CMPQ    528,DL
         4 001350   001356 600000 4                  TZE     s:9984

     1199     9983    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#62));

   9983  4 001351   000034 630400 5                  EPPR0   28
         4 001352   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001353   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 001354   000000 011000                    NOP     0
         4 001355   001362 710000 4                  TRA     s:9986

     1200     9984    2      ELSE CALL TOL$BAD_CARD (VECTOR (ER#32));

   9984  4 001356   000040 630400 5                  EPPR0   32
         4 001357   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001360   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 001361   000000 011000                    NOP     0

     1201     9985
     1202     9986    2   END TOL$READ_CATALOG;

   9986  4 001362   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 001363   000001 702211                    TSX2  ! 1,X1

     1203     9987        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:168  
     1204     9988    1   TOL$READ_ENTRY: PROC ALTRET;

   9988  4 001364   200144 741300       TOL$READ_EN* STX1  ! STATUS_SAVE+1,,AUTO

     1205     9989
     1206     9990    2      CALL M$READ (READ_CATALOG_ENTRY) ALTRET (BAD_ENTRY_READ);

   9990  4 001365   000126 630400 3                  EPPR0   READ_CATALOG_ENTRY
         4 001366   440000 713400                    CLIMB   alt,read
         4 001367   401400 401760                    pmme    nvectors=4
         4 001370   001426 702000 4                  TSX2    BAD_ENTRY_READ

     1207     9991    2      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;

   9991  4 001371   000412 470400 3                  LDP0    M$DECKFILE$
         4 001372   000000 235100                    LDA     0,,PR0
         4 001373   000217 755000 3                  STA     TOL$DECKFILE_ARS#

     1208     9992    2      IF (DECKFILE_ARS# ~= 24)

   9992  4 001374   000030 115007                    CMPA    24,DL
         4 001375   001402 600000 4                  TZE     s:9994

     1209     9993    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#40));

   9993  4 001376   000044 630400 5                  EPPR0   36
         4 001377   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001400   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 001401   000000 011000                    NOP     0

     1210     9994    2      IF (OBJECT_KEY.SIZE ~= 23)

   9994  4 001402   000315 236000 3                  LDQ     TOL$OBJECT_KEY
         4 001403   777000 376003                    ANQ     -512,DU
         4 001404   027000 116003                    CMPQ    11776,DU
         4 001405   001412 600000 4                  TZE     s:9996

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:169  
     1211     9995    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#41));

   9995  4 001406   000050 630400 5                  EPPR0   40
         4 001407   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001410   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 001411   000000 011000                    NOP     0

     1212     9996    2      SAVED_KEY = OBJECT_KEY;

   9996  4 001412   000000 100400                    MLR     fill='000'O
         4 001413   000315 000030 3                  ADSC9   TOL$OBJECT_KEY           cn=0,n=24
         4 001414   000432 000030 3                  ADSC9   SAVED_KEY                cn=0,n=24

     1213     9997    2      IF (KEY_VALUE = MASTER_CATALOG_KEY)

   9997  4 001415   200003 470500                    LDP0    @KEY_VALUE,,AUTO
         4 001416   000000 106500                    CMPC    fill='000'O
         4 001417   000000 000030                    ADSC9   0,,PR0                   cn=0,n=24
         4 001420   000424 000030 3                  ADSC9   MASTER_CATALOG_KEY       cn=0,n=24
         4 001421   001424 601000 4                  TNZ     s:9999

     1214     9998    2      THEN OBJECT_KEY.SPLIT.CLEAR = ' ';

   9998  4 001422   040040 220003                    LDX0    16416,DU
         4 001423   000322 440000 3                  SXL0    TOL$OBJECT_KEY+5

     1215     9999    2      RETURN;

   9999  4 001424   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 001425   000001 702211                    TSX2  ! 1,X1

     1216    10000
     1217    10001    2   BAD_ENTRY_READ:
     1218    10002    2      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)

  10002  4 001426   000000 470400 xsym  BAD_ENTRY_R* LDP0    B$TCB$
         4 001427   000000 471500                    LDP1    0,,PR0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:170  
         4 001430   100102 236100                    LDQ     66,,PR1
         4 001431   377770 376007                    ANQ     131064,DL
         4 001432   001020 116007                    CMPQ    528,DL
         4 001433   001441 600000 4                  TZE     s:10004

     1219    10003    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#63));

  10003  4 001434   000054 630400 5                  EPPR0   44
         4 001435   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001436   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 001437   000000 011000                    NOP     0
         4 001440   001445 710000 4                  TRA     s:10006

     1220    10004    2      ELSE CALL TOL$BAD_CARD (VECTOR (ER#42));

  10004  4 001441   000060 630400 5                  EPPR0   48
         4 001442   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 001443   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 001444   000000 011000                    NOP     0

     1221    10005
     1222    10006    2   END TOL$READ_ENTRY;

  10006  4 001445   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 001446   000001 702211                    TSX2  ! 1,X1

     1223    10007        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:171  
     1224    10008    1   TOL$READ_MASTER_CATALOG: PROC;

  10008  4 001447   200142 741300       TOL$READ_MA* STX1  ! STATUS$+2,,AUTO

     1225    10009
     1226    10010    2      CALL TOL$READ_CATALOG (MASTER_CATALOG_KEY);

  10010  4 001450   000061 236000 5                  LDQ     49
         4 001451   200145 756100                    STQ     @KEY_VALUE,,AUTO
         4 001452   001300 701000 4                  TSX1    TOL$READ_CATALOG
         4 001453   000000 011000                    NOP     0

     1227    10011    2      CATALOG_ENTRY_KEY.DECK# = 1;

  10011  4 001454   001000 236007                    LDQ     512,DL
         4 001455   000230 552030 3                  STBQ    TOL$CATALOG_ENTRY_KEY,'30'O

     1228    10012    3      DO CATALOG_ENTRY_KEY.ENTRY# = 1 TO CATALOG_DATA.ENTRY_COUNT;

  10012  4 001456   000000 101400                    MRL     fill='000'O
         4 001457   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         4 001460   000230 600002 3                  ADSC9   TOL$CATALOG_ENTRY_KEY    cn=3,n=2
         4 001461   001512 710000 4                  TRA     s:10019+9

     1229    10013    3         CALL TOL$READ_ENTRY;

  10013  4 001462   001364 701000 4                  TSX1    TOL$READ_ENTRY
         4 001463   000000 011000                    NOP     0

     1230    10014    3         IF (OBJECT_KEY.SPLIT.DATA = KEY_VALUE.DATA)

  10014  4 001464   200003 470500                    LDP0    @KEY_VALUE,,AUTO
         4 001465   040100 106400                    CMPC    fill='040'O
         4 001466   000315 200025 3                  ADSC9   TOL$OBJECT_KEY           cn=1,n=21
         4 001467   000000 200027                    ADSC9   0,,PR0                   cn=1,n=23
         4 001470   001501 601000 4                  TNZ     s:10019

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:172  
     1231    10015    4         THEN DO;

     1232    10016    4                 CATALOG_DECKS (CATALOG_INDEX) = OBJECT_KEY.SPLIT.DECK#;

  10016  4 001471   200102 235100                    LDA     CATALOG_INDEX,,AUTO
         4 001472   000001 735000                    ALS     1
         4 001473   000105 100400                    MLR     fill='000'O
         4 001474   000322 400002 3                  ADSC9   TOL$OBJECT_KEY+5         cn=2,n=2
         4 001475   200017 000002                    ADSC9   CATALOG_DECKS,A,AUTO     cn=0,n=2

     1233    10017    4                 CATALOG_INDEX = CATALOG_INDEX + 1;

  10017  4 001476   200102 236100                    LDQ     CATALOG_INDEX,,AUTO
         4 001477   000001 036007                    ADLQ    1,DL
         4 001500   200102 756100                    STQ     CATALOG_INDEX,,AUTO

     1234    10018    4              END;

     1235    10019    3      END;

  10019  4 001501   000230 235000 3                  LDA     TOL$CATALOG_ENTRY_KEY
         4 001502   000231 236000 3                  LDQ     TOL$CATALOG_ENTRY_KEY+1
         4 001503   000033 773000                    LRL     27
         4 001504   777777 376007                    ANQ     -1,DL
         4 001505   000001 036007                    ADLQ    1,DL
         4 001506   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 001507   000000 101500                    MRL     fill='000'O
         4 001510   200164 000004                    ADSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,n=4
         4 001511   000230 600002 3                  ADSC9   TOL$CATALOG_ENTRY_KEY    cn=3,n=2
         4 001512   000230 235000 3                  LDA     TOL$CATALOG_ENTRY_KEY
         4 001513   000231 236000 3                  LDQ     TOL$CATALOG_ENTRY_KEY+1
         4 001514   000033 773000                    LRL     27
         4 001515   777777 376007                    ANQ     -1,DL
         4 001516   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 001517   000420 236000 3                  LDQ     CATALOG_DATA
         4 001520   777777 376007                    ANQ     -1,DL
         4 001521   200165 116100                    CMPQ    @CHECKSUM_LOCATION+3,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:173  
         4 001522   001462 605000 4                  TPL     s:10013

     1236    10020    2      CATALOG_COUNT = CATALOG_INDEX - 1;

  10020  4 001523   200102 235100                    LDA     CATALOG_INDEX,,AUTO
         4 001524   000001 135007                    SBLA    1,DL
         4 001525   200016 755100                    STA     CATALOG_COUNT,,AUTO

     1237    10021    2      CATALOG_DECK# = 0;

  10021  4 001526   000000 220003                    LDX0    0,DU
         4 001527   200101 740100                    STX0    CATALOG_DECK#,,AUTO

     1238    10022    2      IF (CALL_SEQUENCE.CATALOG# = 0 OR CATALOG_INDEX = 0)

  10022  4 001530   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 001531   000001 221100                    LDX1    1,,PR0
         4 001532   001535 600000 4                  TZE     s:10024
         4 001533   200102 235100                    LDA     CATALOG_INDEX,,AUTO
         4 001534   001541 601000 4                  TNZ     s:10027

     1239    10023    3      THEN DO;

     1240    10024    3              CATALOG_DECK# = CATALOG_DECKS (0);

  10024  4 001535   200017 222100                    LDX2    CATALOG_DECKS,,AUTO
         4 001536   200101 742100                    STX2    CATALOG_DECK#,,AUTO

     1241    10025    3              CATALOG_INDEX = 0;

  10025  4 001537   200102 450100                    STZ     CATALOG_INDEX,,AUTO

     1242    10026    3           END;

  10026  4 001540   001570 710000 4                  TRA     s:10034

     1243    10027    3      ELSE DO I = 0 TO CATALOG_COUNT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:174  

  10027  4 001541   000220 450000 3                  STZ     TOL$I
         4 001542   001565 710000 4                  TRA     s:10033+3

     1244    10028    3              IF (CALL_SEQUENCE.CATALOG# = CATALOG_DECKS (I))

  10028  4 001543   000220 235000 3                  LDA     TOL$I
         4 001544   000001 735000                    ALS     1
         4 001545   000100 101505                    MRL     fill='000'O
         4 001546   200017 000002                    ADSC9   CATALOG_DECKS,A,AUTO     cn=0,n=2
         4 001547   200164 000004                    ADSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,n=4
         4 001550   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 001551   000001 236100                    LDQ     1,,PR0
         4 001552   000022 772000                    QRL     18
         4 001553   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 001554   001562 601000 4                  TNZ     s:10033

     1245    10029    4              THEN DO;

     1246    10030    4                      CATALOG_DECK# = CATALOG_DECKS (I);

  10030  4 001555   000100 100505                    MLR     fill='000'O
         4 001556   200017 000002                    ADSC9   CATALOG_DECKS,A,AUTO     cn=0,n=2
         4 001557   200101 000002                    ADSC9   CATALOG_DECK#,,AUTO      cn=0,n=2

     1247    10031    4                      CATALOG_INDEX = I;

  10031  4 001560   000220 235000 3                  LDA     TOL$I
         4 001561   200102 755100                    STA     CATALOG_INDEX,,AUTO

     1248    10032    4                   END;

     1249    10033    3           END;

  10033  4 001562   000220 235000 3                  LDA     TOL$I
         4 001563   000001 035007                    ADLA    1,DL
         4 001564   000220 755000 3                  STA     TOL$I
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:175  
         4 001565   200016 236100                    LDQ     CATALOG_COUNT,,AUTO
         4 001566   000220 116000 3                  CMPQ    TOL$I
         4 001567   001543 603000 4                  TRC     s:10028

     1250    10034    2      IF (CATALOG_DECK# = 0)

  10034  4 001570   200101 220100                    LDX0    CATALOG_DECK#,,AUTO
         4 001571   001576 601000 4                  TNZ     s:10036

     1251    10035    2      THEN CATALOG_DATA = '0'B;

  10035  4 001572   000000 235003                    LDA     0,DU
         4 001573   000000 236003                    LDQ     0,DU
         4 001574   000420 757000 3                  STAQ    CATALOG_DATA
         4 001575   001602 710000 4                  TRA     s:10037

     1252    10036    2      ELSE CALL TOL$READ_CATALOG (KEY_VALUE);

  10036  4 001576   200003 236100                    LDQ     @KEY_VALUE,,AUTO
         4 001577   200145 756100                    STQ     @KEY_VALUE,,AUTO
         4 001600   001300 701000 4                  TSX1    TOL$READ_CATALOG
         4 001601   000000 011000                    NOP     0

     1253    10037    2      RETURN;

  10037  4 001602   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 001603   000001 702211                    TSX2  ! 1,X1

     1254    10038
     1255    10039    2   END TOL$READ_MASTER_CATALOG;
     1256    10040        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:176  
     1257    10041    1   TOL$SET_CATALOG_SEQUENCE: PROC ALTRET;

  10041  4 001604   200142 741300       TOL$SET_CAT* STX1  ! STATUS$+2,,AUTO

     1258    10042
     1259    10043    2      IF (CALL_SEQUENCE_MORE.MORE ~= '0'B)

  10043  4 001605   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 001606   000000 106500                    CMPC    fill='000'O
         4 001607   000001 400026                    ADSC9   1,,PR0                   cn=2,n=22
         4 001610   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         4 001611   001647 600000 4                  TZE     s:10057

     1260    10044    2      THEN IF (CALL_SEQUENCE.CATALOG# ~= CATALOG_DATA.DECK# OR

  10044  4 001612   000001 220100                    LDX0    1,,PR0
         4 001613   000420 100000 3                  CMPX0   CATALOG_DATA
         4 001614   001641 601000 4                  TNZ     s:10051
         4 001615   000001 722100                    LXL2    1,,PR0
         4 001616   000002 102003                    CMPX2   2,DU
         4 001617   001641 602000 4                  TNC     s:10051
         4 001620   000001 236100                    LDQ     1,,PR0
         4 001621   777777 376007                    ANQ     -1,DL
         4 001622   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 001623   000420 236000 3                  LDQ     CATALOG_DATA
         4 001624   777777 376007                    ANQ     -1,DL
         4 001625   000001 036007                    ADLQ    1,DL
         4 001626   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 001627   001641 604000 4                  TMI     s:10051
         4 001630   000003 236100                    LDQ     3,,PR0
         4 001631   000420 676000 3                  ERQ     CATALOG_DATA
         4 001632   777777 376007                    ANQ     -1,DL
         4 001633   001641 601000 4                  TNZ     s:10051
         4 001634   000002 236100                    LDQ     2,,PR0
         4 001635   000421 116000 3                  CMPQ    CATALOG_DATA+1
         4 001636   001641 601000 4                  TNZ     s:10051
         4 001637   000004 235100                    LDA     4,,PR0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:177  
         4 001640   001661 601000 4                  TNZ     s:10063

     1261    10045    2                 CALL_SEQUENCE.NEXT_ENTRY < 2 OR
     1262    10046    2                 CALL_SEQUENCE.NEXT_ENTRY > CATALOG_DATA.ENTRY_COUNT + 1 OR
     1263    10047    2                 CALL_SEQUENCE.ENTRY_COUNT ~= CATALOG_DATA.ENTRY_COUNT OR
     1264    10048    2                 CALL_SEQUENCE.CATALOG_CKSUM ~= CATALOG_DATA.CHECKSUM OR
     1265    10049    2                 CALL_SEQUENCE.CHECKSUM = 0)
     1266    10050    3         THEN DO;

     1267    10051    3                 ERROR_CODE.LOC = ERR#J;

  10051  4 001641   003464 220000 3                  LDX0    ERR#J
         4 001642   200010 471500                    LDP1    @ERROR_CODE,,AUTO
         4 001643   100000 740100                    STX0    0,,PR1

     1268    10052    3                 ERROR_CODE.ERR = ERR#J;

  10052  4 001644   100000 440100                    SXL0    0,,PR1

     1269    10053    3                 ALTRETURN;

  10053  4 001645   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 001646   000000 702211                    TSX2  ! 0,X1

     1270    10054    3              END;
     1271    10055    2         ELSE /* Do Nothing */ ;
     1272    10056    3      ELSE DO;

     1273    10057    3              CALL_SEQUENCE.CATALOG# = CATALOG_DATA.DECK#;

  10057  4 001647   000420 220000 3                  LDX0    CATALOG_DATA
         4 001650   000001 740100                    STX0    1,,PR0

     1274    10058    3              CALL_SEQUENCE.ENTRY_COUNT = CATALOG_DATA.ENTRY_COUNT;

  10058  4 001651   000420 721000 3                  LXL1    CATALOG_DATA
         4 001652   000003 441100                    SXL1    3,,PR0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:178  

     1275    10059    3              CALL_SEQUENCE.CATALOG_CKSUM = CATALOG_DATA.CHECKSUM;

  10059  4 001653   000421 236000 3                  LDQ     CATALOG_DATA+1
         4 001654   000002 756100                    STQ     2,,PR0

     1276    10060    3              CALL_SEQUENCE.CHECKSUM = CATALOG_CONTROL.SEED;

  10060  4 001655   000420 235000 3                  LDA     CATALOG_DATA
         4 001656   000004 755100                    STA     4,,PR0

     1277    10061    3              CALL_SEQUENCE.NEXT_ENTRY = 1;

  10061  4 001657   000001 222003                    LDX2    1,DU
         4 001660   000001 442100                    SXL2    1,,PR0

     1278    10062    3           END;

     1279    10063    2      IF (IONTP_FOUND ~= 0)

  10063  4 001661   000221 235000 3                  LDA     TOL$IONTP_FOUND
         4 001662   001671 600000 4                  TZE     s:10069

     1280    10064    3      THEN DO;

     1281    10065    3              ERROR_CODE.LOC = ERR#K;

  10065  4 001663   003465 220000 3                  LDX0    ERR#K
         4 001664   200010 471500                    LDP1    @ERROR_CODE,,AUTO
         4 001665   100000 740100                    STX0    0,,PR1

     1282    10066    3              ERROR_CODE.ERR = ERR#K;

  10066  4 001666   100000 440100                    SXL0    0,,PR1

     1283    10067    3              ALTRETURN;

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:179  
  10067  4 001667   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 001670   000000 702211                    TSX2  ! 0,X1

     1284    10068    3           END;
     1285    10069    2      RETURN;

  10069  4 001671   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 001672   000001 702211                    TSX2  ! 1,X1

     1286    10070
     1287    10071    2   END TOL$SET_CATALOG_SEQUENCE;
     1288    10072        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:180  
     1289    10073    1   TOL$GET_DECK: ENTRY (KEY_VALUE,

  10073  4 001673   000000 700200 xent  TOL$GET_DECK TSX0  ! X66_AUTO_N
         4 001674   000206 000013                    ZERO    134,11

     1290    10074    1              LOAD_OFFSET,
     1291    10075    1              CALL_SEQUENCE,
     1292    10076    1              MAX_LOAD,
     1293    10077    1              LOAD_SIZE,
     1294    10078    1              ERROR_CODE,
     1295    10079    1              EDIT_NAME) ALTRET ;
     1296    10080
     1297    10081    1      CALL TOL$GET_BUFFER;

  10081  4 001675   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 001676   000000 701000 xent               TSX1    TOL$GET_BUFFER
         4 001677   000000 011000                    NOP     0

     1298    10082    1      CALL_SEQ$ = ADDR (CALL_SEQUENCE);

  10082  4 001700   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 001701   000227 756000 3                  STQ     TOL$CALL_SEQ$

     1299    10083    1      CALL TOL$OPEN_DECKFILE;

  10083  4 001702   005747 701000 4                  TSX1    TOL$OPEN_DECKFILE
         4 001703   000000 011000                    NOP     0

     1300    10084    1      STATUS$ = ADDR (CALL_SEQUENCE);

  10084  4 001704   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 001705   200140 756100                    STQ     STATUS$,,AUTO

     1301    10085    1      STATUSP.ADDRESS = CALL_SEQUENCE.STATUSP;

  10085  4 001706   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 001707   000000 720100                    LXL0    0,,PR0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:181  
         4 001710   200140 740100                    STX0    STATUS$,,AUTO

     1302    10086    1      CALL TOL$READ_OBJECT ALTRET (DECK_RETURN_ERROR);

  10086  4 001711   003670 701000 4                  TSX1    TOL$READ_OBJECT
         4 001712   002003 702000 4                  TSX2    DECK_RETURN_ERROR

     1303    10087    1      CALL TOL$CHECK_CALL_SEQUENCE

  10087  4 001713   200106 630500                    EPPR0   DATA_SIZE,,AUTO
         4 001714   200176 450500                    STP0    @CHECKSUM_LOCATION+12,,AUTO
         4 001715   200134 631500                    EPPR1   DCW,,AUTO
         4 001716   200175 451500                    STP1    @CHECKSUM_LOCATION+11,,AUTO
         4 001717   200140 633500                    EPPR3   STATUS$,,AUTO
         4 001720   200174 453500                    STP3    @CHECKSUM_LOCATION+10,,AUTO
         4 001721   000062 236000 5                  LDQ     50
         4 001722   200011 235100                    LDA     @EDIT_NAME,,AUTO
         4 001723   200172 757100                    STAQ    @CHECKSUM_LOCATION+8,,AUTO
         4 001724   200010 236100                    LDQ     @ERROR_CODE,,AUTO
         4 001725   200007 235100                    LDA     @LOAD_SIZE,,AUTO
         4 001726   200170 757100                    STAQ    @CHECKSUM_LOCATION+6,,AUTO
         4 001727   200006 236100                    LDQ     @MAX_LOAD,,AUTO
         4 001730   200005 235100                    LDA     @CALL_SEQUENCE,,AUTO
         4 001731   200166 757100                    STAQ    @CHECKSUM_LOCATION+4,,AUTO
         4 001732   200004 236100                    LDQ     @LOAD_OFFSET,,AUTO
         4 001733   200003 235100                    LDA     @KEY_VALUE,,AUTO
         4 001734   200164 757100                    STAQ    @CHECKSUM_LOCATION+2,,AUTO
         4 001735   200164 630500                    EPPR0   @CHECKSUM_LOCATION+2,,AUTO
         4 001736   000007 631400 5                  EPPR1   7
         4 001737   000000 701000 4                  TSX1    s:11
         4 001740   002003 702000 4                  TSX2    DECK_RETURN_ERROR

     1304    10088    1              (KEY_VALUE,
     1305    10089    1              LOAD_OFFSET,
     1306    10090    1              CALL_SEQUENCE,
     1307    10091    1              MAX_LOAD,
     1308    10092    1              LOAD_SIZE,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:182  
     1309    10093    1              ERROR_CODE,
     1310    10094    1              EDIT_NAME,
     1311    10095    1              OBJECT.BCD.LOAD_TYPE,
     1312    10096    1              STATUS$,
     1313    10097    1              DCW,
     1314    10098    1              DATA_SIZE) ALTRET (DECK_RETURN_ERROR);
     1315    10099    1      CALL TOL$SET_RELOCATION;

  10099  4 001741   005707 701000 4                  TSX1    TOL$SET_RELOCATION
         4 001742   000000 011000                    NOP     0

     1316    10100    1      CALL TOL$SET_DATA_SEQUENCE ALTRET (DECK_RETURN_ERROR);

  10100  4 001743   005650 701000 4                  TSX1    TOL$SET_DATA_SEQUENCE
         4 001744   002003 702000 4                  TSX2    DECK_RETURN_ERROR

     1317    10101    1      CALL TOL$READ_BINARY;

  10101  4 001745   002660 701000 4                  TSX1    TOL$READ_BINARY
         4 001746   000000 011000                    NOP     0

     1318    10102    1      CALL TOL$READ_PATCHES;

  10102  4 001747   004044 701000 4                  TSX1    TOL$READ_PATCHES
         4 001750   000000 011000                    NOP     0

     1319    10103    1      CALL TOL$MOVE_DATA ALTRET (DECK_RETURN_ERROR);

  10103  4 001751   002205 701000 4                  TSX1    TOL$MOVE_DATA
         4 001752   002003 702000 4                  TSX2    DECK_RETURN_ERROR

     1320    10104    1      IF (OBJECT.BCD.ASSEMBLER = 'M' AND

  10104  4 001753   000303 236000 3                  LDQ     TOL$OBJECT+14
         4 001754   000777 376007                    ANQ     511,DL
         4 001755   000115 116007                    CMPQ    77,DL
         4 001756   001771 601000 4                  TNZ     s:10107
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:183  
         4 001757   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 001760   777777 376007                    ANQ     -1,DL
         4 001761   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 001762   000312 236000 3                  LDQ     TOL$OBJECT+21
         4 001763   000022 772000                    QRL     18
         4 001764   200164 136100                    SBLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 001765   000002 116007                    CMPQ    2,DL
         4 001766   001771 600000 4                  TZE     s:10107

     1321    10105    1              OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT ~= 2)
     1322    10106    1      THEN CALL TOL$RECALCULATE_MPC_CHECKSUM;

  10106  4 001767   005367 701000 4                  TSX1    TOL$RECALCULATE_MPC_CHECKSUM
         4 001770   000000 011000                    NOP     0

     1323    10107    1      IF ADDR (EDIT_NAME) = ADDR (NIL)

  10107  4 001771   200011 236100                    LDQ     @EDIT_NAME,,AUTO
         4 001772   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001773   001777 600000 4                  TZE     s:10110

     1324    10108    1      THEN /* Not used for MME CATADT or MME DATADT */ ;
     1325    10109    1      ELSE EDIT_NAME = OBJECT.BCD.LBL ;

  10109  4 001774   000307 236000 3                  LDQ     TOL$OBJECT+18
         4 001775   200011 470500                    LDP0    @EDIT_NAME,,AUTO
         4 001776   000000 756100                    STQ     0,,PR0

     1326    10110    1      CALL TOL$FREE_BUFFER;

  10110  4 001777   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 002000   000000 701000 xent               TSX1    TOL$FREE_BUFFER
         4 002001   000000 011000                    NOP     0

     1327    10111    1      RETURN;

  10111  4 002002   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:184  

     1328    10112
     1329    10113    1   DECK_RETURN_ERROR:
     1330    10114    1      CALL TOL$FREE_BUFFER;

  10114  4 002003   000002 631400 xsym  DECK_RETURN* EPPR1   B_VECTNIL+2
         4 002004   000000 701000 xent               TSX1    TOL$FREE_BUFFER
         4 002005   000000 011000                    NOP     0

     1331    10115    1      ALTRETURN;

  10115  4 002006   000000 702200 xent               TSX2  ! X66_AALT

     1332    10116
     1333    10117        /* END TOL$GET_DECK */
     1334    10118        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:185  
     1335    10119    1   TOL$GET_NIO_DECK: ENTRY (KEY_VALUE,

  10119  4 002007   000000 700200 xent  TOL$GET_NIO* TSX0  ! X66_AUTO_N
         4 002010   000206 000013                    ZERO    134,11

     1336    10120    1              LOAD_OFFSET,
     1337    10121    1              CALL_SEQUENCE,
     1338    10122    1              MAX_LOAD,
     1339    10123    1              LOAD_SIZE,
     1340    10124    1              ERROR_CODE,
     1341    10125    1              EDIT_NAME) ALTRET ;
     1342    10126
     1343    10127    1      CALL_SEQ$ = ADDR (CALL_SEQUENCE) ;

  10127  4 002011   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 002012   000227 756000 3                  STQ     TOL$CALL_SEQ$

     1344    10128    1      CALL TOL$OPEN_DECKFILE ;

  10128  4 002013   005747 701000 4                  TSX1    TOL$OPEN_DECKFILE
         4 002014   000000 011000                    NOP     0

     1345    10129    1      STATUS$ = PINCRW (IS$, CALL_SEQUENCE.STATUSP) ;

  10129  4 002015   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 002016   000000 720100                    LXL0    0,,PR0
         4 002017   000000 636010                    EAQ     0,X0
         4 002020   000000 036000 2                  ADLQ    FPTN_
         4 002021   200140 756100                    STQ     STATUS$,,AUTO

     1346    10130
     1347    10131    1      OBJECT_KEY = KEY_VALUE ;

  10131  4 002022   200003 471500                    LDP1    @KEY_VALUE,,AUTO
         4 002023   000000 100500                    MLR     fill='000'O
         4 002024   100000 000030                    ADSC9   0,,PR1                   cn=0,n=24
         4 002025   000315 000030 3                  ADSC9   TOL$OBJECT_KEY           cn=0,n=24
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:186  

     1348    10132    1      CALL M$READ (READ_OBJECT_CARD) ALTRET (BAD_READ) ;

  10132  4 002026   000162 630400 3                  EPPR0   READ_OBJECT_CARD
         4 002027   440000 713400                    CLIMB   alt,read
         4 002030   401400 401760                    pmme    nvectors=4
         4 002031   002112 702000 4                  TSX2    BAD_READ

     1349    10133    1      CALL_SEQ$ -> TOM$SEG.OBJECT = OBJECT_ ;

  10133  4 002032   000227 470400 3                  LDP0    TOL$CALL_SEQ$
         4 002033   040100 100400                    MLR     fill='040'O
         4 002034   000265 000140 3                  ADSC9   TOL$OBJECT               cn=0,n=96
         4 002035   000007 000140                    ADSC9   7,,PR0                   cn=0,n=96

     1350    10134
     1351    10135    1      DECK_KEY.DECK# = OBJECT.DECK# ;

  10135  4 002036   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 002037   000011 772000                    QRL     9
         4 002040   000422 552030 3                  STBQ    DECK_KEY,'30'O

     1352    10136    1      READ_BINARY_DECK.BUF_ = VECTOR (CALL_SEQ$ -> TOM$SEG.SECTORS) ;

  10136  4 002041   000063 235000 5                  LDA     51
         4 002042   000227 236000 3                  LDQ     TOL$CALL_SEQ$
         4 002043   000040 036003                    ADLQ    32,DU
         4 002044   000076 757000 3                  STAQ    READ_BINARY_DECK+4

     1353    10137    1      CALL M$READ (READ_BINARY_DECK) ALTRET (BAD_READ) ;

  10137  4 002045   000072 630400 3                  EPPR0   READ_BINARY_DECK
         4 002046   440000 713400                    CLIMB   alt,read
         4 002047   401400 401760                    pmme    nvectors=4
         4 002050   002112 702000 4                  TSX2    BAD_READ

     1354    10138    1      CALL_SEQ$ -> TOM$SEG.LAST_SECTOR = OBJECT.BINARY_COUNT - 1 ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:187  

  10138  4 002051   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 002052   777777 376007                    ANQ     -1,DL
         4 002053   000001 136007                    SBLQ    1,DL
         4 002054   000227 470400 3                  LDP0    TOL$CALL_SEQ$
         4 002055   000037 756100                    STQ     31,,PR0

     1355    10139
     1356    10140    1      DKEND_KEY.DECK# = OBJECT.DECK# ;

  10140  4 002056   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 002057   000011 772000                    QRL     9
         4 002060   000350 552030 3                  STBQ    TOL$PATCH_KEY,'30'O

     1357    10141    1      DKEND_KEY.CARD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1 ;

  10141  4 002061   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 002062   777777 376007                    ANQ     -1,DL
         4 002063   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002064   000312 236000 3                  LDQ     TOL$OBJECT+21
         4 002065   000022 772000                    QRL     18
         4 002066   200164 136100                    SBLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002067   000001 136007                    SBLQ    1,DL
         4 002070   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 002071   000000 101500                    MRL     fill='000'O
         4 002072   200165 000004                    ADSC9   @CHECKSUM_LOCATION+3,,AUTO cn=0,n=4
         4 002073   000350 600002 3                  ADSC9   TOL$PATCH_KEY            cn=3,n=2

     1358    10142    1      CALL M$READ (READ_DKEND_CARD) ALTRET (BAD_READ) ;

  10142  4 002074   000144 630400 3                  EPPR0   READ_DKEND_CARD
         4 002075   440000 713400                    CLIMB   alt,read
         4 002076   401400 401760                    pmme    nvectors=4
         4 002077   002112 702000 4                  TSX2    BAD_READ

     1359    10143    1      CALL_SEQ$ -> TOM$SEG.DKEND = DKEND_CARD_ ;

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:188  
  10143  4 002100   000227 470400 3                  LDP0    TOL$CALL_SEQ$
         4 002101   200000 220003                    LDX0    65536,DU
         4 002102   040110 100400                    MLR     fill='040'O
         4 002103   000240 000124 3                  ADSC9   TOL$DKEND_CARD           cn=0,n=84
         4 002104   000040 000124                    ADSC9   32,X0,PR0                cn=0,n=84

     1360    10144
     1361    10145    1      LOAD_SIZE = OBJECT.LOAD_SIZE ;

  10145  4 002105   000312 236000 3                  LDQ     TOL$OBJECT+21
         4 002106   777777 376007                    ANQ     -1,DL
         4 002107   200007 470500                    LDP0    @LOAD_SIZE,,AUTO
         4 002110   000000 756100                    STQ     0,,PR0

     1362    10146    1      RETURN ;

  10146  4 002111   000000 702200 xent               TSX2  ! X66_ARET

     1363    10147
     1364    10148    1   BAD_READ:
     1365    10149    1      CALL TOL$BAD_CARD (VECTOR (ER#74)) ;

  10149  4 002112   000066 630400 5     BAD_READ     EPPR0   54
         4 002113   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 002114   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 002115   000000 011000                    NOP     0
         4 002116   006005 710000 4                  TRA     s:11093

     1366    10150
     1367    10151        /* END TOL$GET_NIO_DECK */
     1368    10152        %EJECT ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:189  
     1369    10153    1   TOL$CHECK_CHECKSUM: PROC (CHECKSUM_SEED,

  10153  4 002117   200146 741300       TOL$CHECK_C* STX1  ! @LAST,,AUTO

     1370    10154    1              CHECKSUM_START$,
     1371    10155    1              CHECKSUM_SIZE,
     1372    10156    1              CHECKSUM_LOCATION,
     1373    10157    1              ERR_VEC);
     1374    10158
     1375    10159        /* Parameters */
     1376    10160
     1377    10161    2      DCL CHECKSUM_LOCATION UBIN (36) ALIGNED;
     1378    10162    2      DCL CHECKSUM_SEED UBIN (36) ALIGNED;
     1379    10163    2      DCL CHECKSUM_SIZE UBIN (36) ALIGNED;
     1380    10164    2      DCL CHECKSUM_START$ PTR ALIGNED;
     1381    10165    2      DCL ERR_VEC BIT (72) DALIGNED;
     1382    10166
     1383    10167    2      DCL CHECKSUM_CHECK UBIN (36) ALIGNED;
     1384    10168
     1385    10169        /* Code */
     1386    10170
     1387    10171    2      CALL TOL$CHECKSUM

  10171  4 002120   200154 630500                    EPPR0   CHECKSUM_CHECK,,AUTO
         4 002121   200162 450500                    STP0    @CHECKSUM_LOCATION,,AUTO
         4 002122   200150 237100                    LDAQ    @CHECKSUM_START$,,AUTO
         4 002123   200160 757100                    STAQ    @CHECKSUM_START$,,AUTO
         4 002124   200147 236100                    LDQ     @CHECKSUM_SEED,,AUTO
         4 002125   200157 756100                    STQ     @CHECKSUM_SEED,,AUTO
         4 002126   000670 701000 4                  TSX1    TOL$CHECKSUM
         4 002127   000000 011000                    NOP     0

     1388    10172    2              (CHECKSUM_SEED,
     1389    10173    2              CHECKSUM_START$,
     1390    10174    2              CHECKSUM_SIZE,
     1391    10175    2              CHECKSUM_CHECK);
     1392    10176    2      IF (CHECKSUM_CHECK ~= CHECKSUM_LOCATION)
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:190  

  10176  4 002130   200152 470500                    LDP0    @CHECKSUM_LOCATION,,AUTO
         4 002131   200154 236100                    LDQ     CHECKSUM_CHECK,,AUTO
         4 002132   000000 116100                    CMPQ    0,,PR0
         4 002133   002140 600000 4                  TZE     s:10178

     1393    10177    2      THEN CALL TOL$BAD_CARD (ERR_VEC);

  10177  4 002134   200153 630500                    EPPR0   @ERR_VEC,,AUTO
         4 002135   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 002136   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 002137   000000 011000                    NOP     0

     1394    10178    2      RETURN;

  10178  4 002140   200146 221300                    LDX1  ! @LAST,,AUTO
         4 002141   000001 702211                    TSX2  ! 1,X1

     1395    10179
     1396    10180    2   END TOL$CHECK_CHECKSUM;
     1397    10181        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:191  
     1398    10182    1   TOL$CHECK_SEQ: PROC (ERR_VEC1, ERR_VEC2) ;

  10182  4 002142   200146 741300       TOL$CHECK_S* STX1  ! @LAST,,AUTO

     1399    10183
     1400    10184    2      DCL ERR_VEC1 BIT (72) DALIGNED;
     1401    10185    2      DCL ERR_VEC2 BIT (72) DALIGNED;
     1402    10186
     1403    10187        /* Code */
     1404    10188
     1405    10189    3      DO J = 0 TO 3;

  10189  4 002143   000222 450000 3                  STZ     TOL$J

     1406    10190    3         CALL INDEX

  10190  4 002144   000222 235000 3                  LDA     TOL$J
         4 002145   000105 124400                    SCM     mask='000'O
         4 002146   000413 000021 3                  ADSC9   NUMERICS                 cn=0,n=17
         4 002147   200127 000001                    ADSC9   SEQ,A,AUTO               cn=0,n=1
         4 002150   200122 000100                    ARG     OCTAL_INDEX,,AUTO

     1407    10191    3                 (SEQ_INDEX,
     1408    10192    3                 SEQ_CHARS (J),
     1409    10193    3                 NUMERICS);
     1410    10194    3         IF (SEQ_INDEX > 9)

  10194  4 002151   200122 236100                    LDQ     OCTAL_INDEX,,AUTO
         4 002152   000012 116007                    CMPQ    10,DL
         4 002153   002160 602000 4                  TNC     s:10196

     1411    10195    3         THEN CALL TOL$BAD_CARD (ERR_VEC1);

  10195  4 002154   200147 630500                    EPPR0   @ERR_VEC1,,AUTO
         4 002155   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 002156   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 002157   000000 011000                    NOP     0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:192  

     1412    10196    3      END;

  10196  4 002160   000222 235000 3                  LDA     TOL$J
         4 002161   000001 035007                    ADLA    1,DL
         4 002162   000222 755000 3                  STA     TOL$J
         4 002163   000004 115007                    CMPA    4,DL
         4 002164   002144 602000 4                  TNC     s:10190

     1413    10197    2      CALL CHARBIN

  10197  4 002165   000100 305500                    DTB
         4 002166   200127 030004                    NDSC9   SEQ,,AUTO                cn=0,s=nosgn,sf=0,n=4
         4 002167   200164 000010                    NDSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,s=lsgnf,sf=0,n=8
         4 002170   200165 236100                    LDQ     @CHECKSUM_LOCATION+3,,AUTO
         4 002171   000216 756000 3                  STQ     TOL$CARD_SEQ

     1414    10198    2              (CARD_SEQ,
     1415    10199    2              SEQ);
     1416    10200    2      NEXT_SEQ = NEXT_SEQ + 1;

  10200  4 002172   200121 235100                    LDA     NEXT_SEQ,,AUTO
         4 002173   000001 035007                    ADLA    1,DL
         4 002174   200121 755100                    STA     NEXT_SEQ,,AUTO

     1417    10201    2      IF (NEXT_SEQ ~= CARD_SEQ)

  10201  4 002175   200121 116100                    CMPQ    NEXT_SEQ,,AUTO
         4 002176   002203 600000 4                  TZE     s:10203

     1418    10202    2      THEN CALL TOL$BAD_CARD (ERR_VEC2);

  10202  4 002177   200150 630500                    EPPR0   @ERR_VEC2,,AUTO
         4 002200   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 002201   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 002202   000000 011000                    NOP     0

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:193  
     1419    10203    2      RETURN;

  10203  4 002203   200146 221300                    LDX1  ! @LAST,,AUTO
         4 002204   000001 702211                    TSX2  ! 1,X1

     1420    10204
     1421    10205    2   END TOL$CHECK_SEQ;
     1422    10206        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:194  
     1423    10207    1   TOL$MOVE_DATA: PROC ALTRET;

  10207  4 002205   200142 741300       TOL$MOVE_DA* STX1  ! STATUS$+2,,AUTO

     1424    10208
     1425    10209    2      DCL RESIDUE UBIN (36) ALIGNED;
     1426    10210
     1427    10211        /* Code */
     1428    10212
     1429    10213    2      RESIDUE = STATUS.RESIDUE;

  10213  4 002206   200140 470500                    LDP0    STATUS$,,AUTO
         4 002207   000001 236100                    LDQ     1,,PR0
         4 002210   777777 376007                    ANQ     -1,DL
         4 002211   200143 756100                    STQ     RESIDUE,,AUTO

     1430    10214    3      DO WHILE (START_LOADP.ADDRESS ~= END_LOAD OR

  10214  4 002212   002306 710000 4                  TRA     s:10236

     1431    10215    3              SKIP_LOAD ~= 0);
     1432    10216    3         IF (START_LOADP.ADDRESS = END_LOAD)

  10216  4 002213   000406 236000 3                  LDQ     TOL$START_LOAD$
         4 002214   000022 772000                    QRL     18
         4 002215   200107 116100                    CMPQ    END_LOAD,,AUTO
         4 002216   002304 601000 4                  TNZ     s:10235

     1433    10217    4         THEN DO;

     1434    10218    4                 IF (DCW.TYPE = 0)

  10218  4 002217   200134 236100                    LDQ     DCW,,AUTO
         4 002220   770000 316007                    CANQ    -4096,DL
         4 002221   002253 601000 4                  TNZ     s:10229

     1435    10219    5                 THEN DO;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:195  

     1436    10220    5                         IF (OBJECT.BCD.ASSEMBLER = 'M')

  10220  4 002222   000303 236000 3                  LDQ     TOL$OBJECT+14
         4 002223   000777 376007                    ANQ     511,DL
         4 002224   000115 116007                    CMPQ    77,DL
         4 002225   002232 601000 4                  TNZ     s:10222

     1437    10221    5                         THEN ERROR_CODE.ERR = ERR#F;

  10221  4 002226   003457 220000 3                  LDX0    ERR#F
         4 002227   200010 470500                    LDP0    @ERROR_CODE,,AUTO
         4 002230   000000 440100                    SXL0    0,,PR0
         4 002231   002235 710000 4                  TRA     s:10223

     1438    10222    5                         ELSE ERROR_CODE.ERR = ERR#G;

  10222  4 002232   003460 220000 3                  LDX0    ERR#G
         4 002233   200010 470500                    LDP0    @ERROR_CODE,,AUTO
         4 002234   000000 440100                    SXL0    0,,PR0

     1439    10223    5                         ERROR_CODE.LOC = ERR#F;

  10223  4 002235   003457 221000 3                  LDX1    ERR#F
         4 002236   000000 741100                    STX1    0,,PR0

     1440    10224    5                         CALL_SEQUENCE.DECK_OFFSET = CALL_SEQUENCE.DECK_OFFSET +
             10224                                  SPAN_UPPER;

  10224  4 002237   200005 471500                    LDP1    @CALL_SEQUENCE,,AUTO
         4 002240   100002 236100                    LDQ     2,,PR1
         4 002241   000225 036000 3                  ADLQ    TOL$SPAN_UPPER
         4 002242   100002 756100                    STQ     2,,PR1

     1441    10225    5                         STATUS.RESIDUE = 0;

  10225  4 002243   000000 220003                    LDX0    0,DU
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:196  
         4 002244   200140 473500                    LDP3    STATUS$,,AUTO
         4 002245   300001 440100                    SXL0    1,,PR3

     1442    10226    5                         LOAD_SIZE = SPAN_UPPER;

  10226  4 002246   200007 473500                    LDP3    @LOAD_SIZE,,AUTO
         4 002247   000225 235000 3                  LDA     TOL$SPAN_UPPER
         4 002250   300000 755100                    STA     0,,PR3

     1443    10227    5                         ALTRETURN;

  10227  4 002251   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 002252   000000 702211                    TSX2  ! 0,X1

     1444    10228    5                      END;
     1445    10229    4                 START_LOADP.ADDRESS = SKIP_LOAD;

  10229  4 002253   200130 720100                    LXL0    SKIP_LOAD,,AUTO
         4 002254   000406 740000 3                  STX0    TOL$START_LOAD$

     1446    10230    4                 SKIP_LOAD = 0;

  10230  4 002255   200130 450100                    STZ     SKIP_LOAD,,AUTO

     1447    10231    4                 CALL TOL$GET_NEXT_DCW (DCW, CALL_SEQUENCE, STATUS) ;

  10231  4 002256   200140 236100                    LDQ     STATUS$,,AUTO
         4 002257   200166 756100                    STQ     @CHECKSUM_LOCATION+4,,AUTO
         4 002260   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 002261   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 002262   200134 630500                    EPPR0   DCW,,AUTO
         4 002263   200164 450500                    STP0    @CHECKSUM_LOCATION+2,,AUTO
         4 002264   200164 630500                    EPPR0   @CHECKSUM_LOCATION+2,,AUTO
         4 002265   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 002266   000000 701000 xent               TSX1    TOL$GET_NEXT_DCW
         4 002267   000000 011000                    NOP     0

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:197  
     1448    10232    4                 DCW.ADDRESS = DCW.ADDRESS + CHECK_RELOC ;

  10232  4 002270   000410 235000 3                  LDA     CHECK_RELOC
         4 002271   000022 771000                    ARL     18
         4 002272   200164 755100                    STA     @CHECKSUM_LOCATION+2,,AUTO
         4 002273   200134 236100                    LDQ     DCW,,AUTO
         4 002274   000022 772000                    QRL     18
         4 002275   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002276   000000 620006                    EAX0    0,QL
         4 002277   200134 740100                    STX0    DCW,,AUTO

     1449    10233    4                 RESIDUE = STATUS.RESIDUE;

  10233  4 002300   200140 470500                    LDP0    STATUS$,,AUTO
         4 002301   000001 236100                    LDQ     1,,PR0
         4 002302   777777 376007                    ANQ     -1,DL
         4 002303   200143 756100                    STQ     RESIDUE,,AUTO

     1450    10234    4              END;

     1451    10235    3         CALL TOL$MORE_LOAD;

  10235  4 002304   002330 701000 4                  TSX1    TOL$MORE_LOAD
         4 002305   000000 011000                    NOP     0

     1452    10236    3      END;

  10236  4 002306   000406 236000 3                  LDQ     TOL$START_LOAD$
         4 002307   000022 772000                    QRL     18
         4 002310   200107 116100                    CMPQ    END_LOAD,,AUTO
         4 002311   002213 601000 4                  TNZ     s:10216
         4 002312   200130 235100                    LDA     SKIP_LOAD,,AUTO
         4 002313   002213 601000 4                  TNZ     s:10216

     1453    10237    2      LOAD_SIZE = SPAN_UPPER - RESIDUE;

  10237  4 002314   000225 236000 3                  LDQ     TOL$SPAN_UPPER
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:198  
         4 002315   200143 136100                    SBLQ    RESIDUE,,AUTO
         4 002316   200007 470500                    LDP0    @LOAD_SIZE,,AUTO
         4 002317   000000 756100                    STQ     0,,PR0

     1454    10238    2      STATUS.RESIDUE = RESIDUE;

  10238  4 002320   200143 720100                    LXL0    RESIDUE,,AUTO
         4 002321   200140 471500                    LDP1    STATUS$,,AUTO
         4 002322   100001 440100                    SXL0    1,,PR1

     1455    10239    2      CALL_SEQUENCE.NO_MORE = -1;

  10239  4 002323   000001 336007                    LCQ     1,DL
         4 002324   200005 471500                    LDP1    @CALL_SEQUENCE,,AUTO
         4 002325   100006 756100                    STQ     6,,PR1

     1456    10240    2      RETURN;

  10240  4 002326   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 002327   000001 702211                    TSX2  ! 1,X1

     1457    10241        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:199  
     1458    10242    2   TOL$MORE_LOAD: PROC;

  10242  4 002330   200144 741300       TOL$MORE_LO* STX1  ! STATUS_SAVE+1,,AUTO

     1459    10243
     1460    10244    3      IF (LOAD.TYPE = 0)

  10244  4 002331   000406 470400 3                  LDP0    TOL$START_LOAD$
         4 002332   000000 236100                    LDQ     0,,PR0
         4 002333   700000 316003                    CANQ    -32768,DU
         4 002334   002347 601000 4                  TNZ     s:10247

     1461    10245    3      THEN START_LOADP.ADDRESS = START_LOADP.ADDRESS + LOAD.SIZE + 1;

  10245  4 002335   000000 236100                    LDQ     0,,PR0
         4 002336   000022 772000                    QRL     18
         4 002337   000077 376007                    ANQ     63,DL
         4 002340   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002341   000406 236000 3                  LDQ     TOL$START_LOAD$
         4 002342   000022 772000                    QRL     18
         4 002343   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002344   000001 620006                    EAX0    1,QL
         4 002345   000406 740000 3                  STX0    TOL$START_LOAD$
         4 002346   002431 710000 4                  TRA     s:10264

     1462    10246    4      ELSE DO;

     1463    10247    4              IF (LOAD.ADDRESS > SPAN_UPPER + CALL_SEQUENCE.DECK_OFFSET - 1)

  10247  4 002347   200005 471500                    LDP1    @CALL_SEQUENCE,,AUTO
         4 002350   000225 236000 3                  LDQ     TOL$SPAN_UPPER
         4 002351   100002 036100                    ADLQ    2,,PR1
         4 002352   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002353   000000 236100                    LDQ     0,,PR0
         4 002354   777777 376007                    ANQ     -1,DL
         4 002355   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002356   002376 602000 4                  TNC     s:10255
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:200  

     1464    10248    5              THEN DO;

     1465    10249    5                      IF (SKIP_LOAD = 0)

  10249  4 002357   200130 235100                    LDA     SKIP_LOAD,,AUTO
         4 002360   002364 601000 4                  TNZ     s:10252

     1466    10250    5                      THEN SKIP_LOAD = START_LOADP.ADDRESS;

  10250  4 002361   000406 235000 3                  LDA     TOL$START_LOAD$
         4 002362   000022 771000                    ARL     18
         4 002363   200130 755100                    STA     SKIP_LOAD,,AUTO

     1467    10251    5                      ELSE /* Do Nothing */ ;
     1468    10252    5                      START_LOADP.ADDRESS = START_LOADP.ADDRESS + LOAD.SIZE + 1;

  10252  4 002364   000000 236100                    LDQ     0,,PR0
         4 002365   000022 772000                    QRL     18
         4 002366   000077 376007                    ANQ     63,DL
         4 002367   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002370   000406 236000 3                  LDQ     TOL$START_LOAD$
         4 002371   000022 772000                    QRL     18
         4 002372   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002373   000001 620006                    EAX0    1,QL
         4 002374   000406 740000 3                  STX0    TOL$START_LOAD$

     1469    10253    5                   END;

  10253  4 002375   002431 710000 4                  TRA     s:10264

     1470    10254    5              ELSE DO;

     1471    10255    5                      IF (LOAD.ADDRESS + LOAD.SIZE - 1 <

  10255  4 002376   000000 236100                    LDQ     0,,PR0
         4 002377   000022 772000                    QRL     18
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:201  
         4 002400   000077 376007                    ANQ     63,DL
         4 002401   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002402   000000 236100                    LDQ     0,,PR0
         4 002403   777777 376007                    ANQ     -1,DL
         4 002404   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002405   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 002406   000224 236000 3                  LDQ     TOL$SPAN_LOWER
         4 002407   100002 036100                    ADLQ    2,,PR1
         4 002410   200165 116100                    CMPQ    @CHECKSUM_LOCATION+3,,AUTO
         4 002411   002427 602000 4                  TNC     s:10261

     1472    10256    5                              SPAN_LOWER + CALL_SEQUENCE.DECK_OFFSET)
     1473    10257    6                      THEN DO;

     1474    10258    6                              LOAD.TYPE = 0;

  10258  4 002412   000067 236000 5                  LDQ     55
         4 002413   000000 356100                    ANSQ    0,,PR0

     1475    10259    6                             START_LOADP.ADDRESS = START_LOADP.ADDRESS + LOAD.SIZE + 1
             10259                                       ;

  10259  4 002414   000406 470400 3                  LDP0    TOL$START_LOAD$
         4 002415   000000 236100                    LDQ     0,,PR0
         4 002416   000022 772000                    QRL     18
         4 002417   000077 376007                    ANQ     63,DL
         4 002420   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002421   000406 236000 3                  LDQ     TOL$START_LOAD$
         4 002422   000022 772000                    QRL     18
         4 002423   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002424   000001 620006                    EAX0    1,QL
         4 002425   000406 740000 3                  STX0    TOL$START_LOAD$

     1476    10260    6                           END;

  10260  4 002426   002431 710000 4                  TRA     s:10264

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:202  
     1477    10261    5                      ELSE CALL TOL$SAVE_LOAD;

  10261  4 002427   002433 701000 4                  TSX1    TOL$SAVE_LOAD
         4 002430   000000 011000                    NOP     0

     1478    10262    5                   END;

     1479    10263    4           END;

     1480    10264    3      RETURN;

  10264  4 002431   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 002432   000001 702211                    TSX2  ! 1,X1

     1481    10265        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:203  
     1482    10266    3   TOL$SAVE_LOAD: PROC;

  10266  4 002433   200146 741300       TOL$SAVE_LO* STX1  ! @LAST,,AUTO

     1483    10267
     1484    10268    4      IF (LOAD.ADDRESS < SPAN_LOWER + CALL_SEQUENCE.DECK_OFFSET)

  10268  4 002434   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 002435   000224 236000 3                  LDQ     TOL$SPAN_LOWER
         4 002436   000002 036100                    ADLQ    2,,PR0
         4 002437   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002440   000406 471400 3                  LDP1    TOL$START_LOAD$
         4 002441   100000 236100                    LDQ     0,,PR1
         4 002442   777777 376007                    ANQ     -1,DL
         4 002443   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002444   002457 603000 4                  TRC     s:10271

     1485    10269    4      THEN LENGTH = SPAN_LOWER + CALL_SEQUENCE.DECK_OFFSET - LOAD.ADDRESS;

  10269  4 002445   000224 236000 3                  LDQ     TOL$SPAN_LOWER
         4 002446   000002 036100                    ADLQ    2,,PR0
         4 002447   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002450   100000 236100                    LDQ     0,,PR1
         4 002451   777777 376007                    ANQ     -1,DL
         4 002452   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 002453   200164 236100                    LDQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002454   200165 136100                    SBLQ    @CHECKSUM_LOCATION+3,,AUTO
         4 002455   200116 756100                    STQ     LENGTH,,AUTO
         4 002456   002575 710000 4                  TRA     s:10292

     1486    10270    5      ELSE DO;

     1487    10271    5              DATA$ = ADDR (LOAD.DATA (0));

  10271  4 002457   000406 236000 3                  LDQ     TOL$START_LOAD$
         4 002460   000001 036003                    ADLQ    1,DU
         4 002461   200133 756100                    STQ     DATA$,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:204  

     1488    10272    5              IF (LOAD.ADDRESS + LOAD.SIZE > SPAN_UPPER + CALL_SEQUENCE.DECK_OFFSET)

  10272  4 002462   100000 236100                    LDQ     0,,PR1
         4 002463   000022 772000                    QRL     18
         4 002464   000077 376007                    ANQ     63,DL
         4 002465   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002466   100000 236100                    LDQ     0,,PR1
         4 002467   777777 376007                    ANQ     -1,DL
         4 002470   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002471   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 002472   000225 236000 3                  LDQ     TOL$SPAN_UPPER
         4 002473   000002 036100                    ADLQ    2,,PR0
         4 002474   200165 116100                    CMPQ    @CHECKSUM_LOCATION+3,,AUTO
         4 002475   002510 603000 4                  TRC     s:10274

     1489    10273    5              THEN LENGTH = SPAN_UPPER + CALL_SEQUENCE.DECK_OFFSET - LOAD.ADDRESS;

  10273  4 002476   000225 236000 3                  LDQ     TOL$SPAN_UPPER
         4 002477   000002 036100                    ADLQ    2,,PR0
         4 002500   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002501   100000 236100                    LDQ     0,,PR1
         4 002502   777777 376007                    ANQ     -1,DL
         4 002503   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 002504   200164 236100                    LDQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002505   200165 136100                    SBLQ    @CHECKSUM_LOCATION+3,,AUTO
         4 002506   200116 756100                    STQ     LENGTH,,AUTO
         4 002507   002514 710000 4                  TRA     s:10275

     1490    10274    5              ELSE LENGTH = LOAD.SIZE;

  10274  4 002510   100000 236100                    LDQ     0,,PR1
         4 002511   000022 772000                    QRL     18
         4 002512   000077 376007                    ANQ     63,DL
         4 002513   200116 756100                    STQ     LENGTH,,AUTO

     1491    10275    5              DATA_SIZE = LENGTH;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:205  

  10275  4 002514   200106 756100                    STQ     DATA_SIZE,,AUTO

     1492    10276    5              SPLIT_DCW.ADDRESS = DCW.ADDRESS + LOAD.ADDRESS - SPAN_LOWER -

  10276  4 002515   100000 236100                    LDQ     0,,PR1
         4 002516   777777 376007                    ANQ     -1,DL
         4 002517   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002520   200134 236100                    LDQ     DCW,,AUTO
         4 002521   000022 772000                    QRL     18
         4 002522   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002523   000224 136000 3                  SBLQ    TOL$SPAN_LOWER
         4 002524   000002 136100                    SBLQ    2,,PR0
         4 002525   000000 620006                    EAX0    0,QL
         4 002526   000440 740000 3                  STX0    SPLIT_DCW

     1493    10277    5                      CALL_SEQUENCE.DECK_OFFSET;
     1494    10278    5              SPLIT_DCW.TYPE = DCW.TYPE;

  10278  4 002527   200134 236100                    LDQ     DCW,,AUTO
         4 002530   000440 752004 3                  STCQ    SPLIT_DCW,'04'O

     1495    10279    5              STATUS.RESIDUE = SPAN_UPPER - SPAN_LOWER - SPLIT_DCW.ADDRESS +

  10279  4 002531   000225 236000 3                  LDQ     TOL$SPAN_UPPER
         4 002532   000224 136000 3                  SBLQ    TOL$SPAN_LOWER
         4 002533   000440 235000 3                  LDA     SPLIT_DCW
         4 002534   000022 771000                    ARL     18
         4 002535   200164 755100                    STA     @CHECKSUM_LOCATION+2,,AUTO
         4 002536   200164 136100                    SBLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002537   200134 235100                    LDA     DCW,,AUTO
         4 002540   000022 771000                    ARL     18
         4 002541   200165 755100                    STA     @CHECKSUM_LOCATION+3,,AUTO
         4 002542   200165 036100                    ADLQ    @CHECKSUM_LOCATION+3,,AUTO
         4 002543   000000 620006                    EAX0    0,QL
         4 002544   200140 473500                    LDP3    STATUS$,,AUTO
         4 002545   300001 440100                    SXL0    1,,PR3
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:206  

     1496    10280    5                      DCW.ADDRESS;
     1497    10281    5              CALL TOL$SAVE_DATA

  10281  4 002546   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 002547   200172 756100                    STQ     @CHECKSUM_LOCATION+8,,AUTO
         4 002550   200106 631500                    EPPR1   DATA_SIZE,,AUTO
         4 002551   200171 451500                    STP1    @CHECKSUM_LOCATION+7,,AUTO
         4 002552   000070 236000 5                  LDQ     56
         4 002553   200170 756100                    STQ     @CHECKSUM_LOCATION+6,,AUTO
         4 002554   200140 236100                    LDQ     STATUS$,,AUTO
         4 002555   000071 235000 5                  LDA     57
         4 002556   200166 757100                    STAQ    @CHECKSUM_LOCATION+4,,AUTO
         4 002557   200116 633500                    EPPR3   LENGTH,,AUTO
         4 002560   200165 453500                    STP3    @CHECKSUM_LOCATION+3,,AUTO
         4 002561   200133 634500                    EPPR4   DATA$,,AUTO
         4 002562   200164 454500                    STP4    @CHECKSUM_LOCATION+2,,AUTO
         4 002563   200164 630500                    EPPR0   @CHECKSUM_LOCATION+2,,AUTO
         4 002564   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 002565   000000 701000 xent               TSX1    TOL$SAVE_DATA
         4 002566   002601 702000 4                  TSX2    CANT_HAPPEN

     1498    10282    5                      (DATA$,
     1499    10283    5                      LENGTH,
     1500    10284    5                      SPLIT_DCW,
     1501    10285    5                      STATUS,
     1502    10286    5                      START_LOAD$,
     1503    10287    5                      DATA_SIZE,
     1504    10288    5                      CALL_SEQUENCE) ALTRET (CANT_HAPPEN);
     1505    10289    5              IF (STATUS.RESIDUE < RESIDUE)

  10289  4 002567   200140 470500                    LDP0    STATUS$,,AUTO
         4 002570   000001 236100                    LDQ     1,,PR0
         4 002571   777777 376007                    ANQ     -1,DL
         4 002572   200143 116100                    CMPQ    RESIDUE,,AUTO
         4 002573   002575 603000 4                  TRC     s:10292

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:207  
     1506    10290    5              THEN RESIDUE = STATUS.RESIDUE;

  10290  4 002574   200143 756100                    STQ     RESIDUE,,AUTO

     1507    10291    5           END;

     1508    10292    4      CALL TOL$SPLIT_LOAD_SEGMENT;

  10292  4 002575   002606 701000 4                  TSX1    TOL$SPLIT_LOAD_SEGMENT
         4 002576   000000 011000                    NOP     0

     1509    10293    4      RETURN;

  10293  4 002577   200146 221300                    LDX1  ! @LAST,,AUTO
         4 002600   000001 702211                    TSX2  ! 1,X1

     1510    10294
     1511    10295    4   CANT_HAPPEN: CALL TOL$BAD_CARD (VECTOR (ER#59));

  10295  4 002601   000074 630400 5     CANT_HAPPEN  EPPR0   60
         4 002602   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 002603   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 002604   000000 011000                    NOP     0
         4 002605   002656 710000 4                  TRA     s:10311

     1512    10296        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:208  
     1513    10297    4   TOL$SPLIT_LOAD_SEGMENT: PROC;

  10297  4 002606   200150 741300       TOL$SPLIT_L* STX1  ! @ERR_VEC2,,AUTO

     1514    10298
     1515    10299    5      LOAD.TYPE = 0;

  10299  4 002607   000406 470400 3                  LDP0    TOL$START_LOAD$
         4 002610   000067 236000 5                  LDQ     55
         4 002611   000000 356100                    ANSQ    0,,PR0

     1516    10300    5      IF (LENGTH ~= LOAD.SIZE)

  10300  4 002612   000406 470400 3                  LDP0    TOL$START_LOAD$
         4 002613   000000 236100                    LDQ     0,,PR0
         4 002614   000022 772000                    QRL     18
         4 002615   000077 376007                    ANQ     63,DL
         4 002616   200116 116100                    CMPQ    LENGTH,,AUTO
         4 002617   002642 600000 4                  TZE     s:10307

     1517    10301    6      THEN DO;

     1518    10302    6              SPLIT_LOAD.SIZE = LOAD.SIZE - LENGTH;

  10302  4 002620   200116 136100                    SBLQ    LENGTH,,AUTO
         4 002621   000022 736000                    QLS     18
         4 002622   000441 676000 3                  ERQ     SPLIT_LOAD
         4 002623   077777 376003                    ANQ     32767,DU
         4 002624   000441 656000 3                  ERSQ    SPLIT_LOAD

     1519    10303    6              LOAD.SIZE = LENGTH - 1;

  10303  4 002625   200116 236100                    LDQ     LENGTH,,AUTO
         4 002626   000001 136007                    SBLQ    1,DL
         4 002627   000022 736000                    QLS     18
         4 002630   000000 752110                    STCQ    0,'10'O,PR0

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:209  
     1520    10304    6              SPLIT_LOAD.ADDRESS = LOAD.ADDRESS + LENGTH;

  10304  4 002631   000406 470400 3                  LDP0    TOL$START_LOAD$
         4 002632   000000 236100                    LDQ     0,,PR0
         4 002633   777777 376007                    ANQ     -1,DL
         4 002634   200116 036100                    ADLQ    LENGTH,,AUTO
         4 002635   000000 620006                    EAX0    0,QL
         4 002636   000441 440000 3                  SXL0    SPLIT_LOAD

     1521    10305    6              LOAD.DATA (LENGTH - 1) = SPLIT_WD1;

  10305  4 002637   200116 721100                    LXL1    LENGTH,,AUTO
         4 002640   000441 235000 3                  LDA     SPLIT_LOAD
         4 002641   000000 755111                    STA     0,X1,PR0

     1522    10306    6           END;

     1523    10307    5      START_LOADP.ADDRESS = START_LOADP.ADDRESS + LOAD.SIZE + 1;

  10307  4 002642   000406 470400 3                  LDP0    TOL$START_LOAD$
         4 002643   000000 236100                    LDQ     0,,PR0
         4 002644   000022 772000                    QRL     18
         4 002645   000077 376007                    ANQ     63,DL
         4 002646   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 002647   000406 236000 3                  LDQ     TOL$START_LOAD$
         4 002650   000022 772000                    QRL     18
         4 002651   200164 036100                    ADLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 002652   000001 620006                    EAX0    1,QL
         4 002653   000406 740000 3                  STX0    TOL$START_LOAD$

     1524    10308    5      RETURN;

  10308  4 002654   200150 221300                    LDX1  ! @ERR_VEC2,,AUTO
         4 002655   000001 702211                    TSX2  ! 1,X1

     1525    10309
     1526    10310    5   END TOL$SPLIT_LOAD_SEGMENT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:210  
     1527    10311    4   END TOL$SAVE_LOAD;

  10311  4 002656   200146 221300                    LDX1  ! @LAST,,AUTO
         4 002657   000001 702211                    TSX2  ! 1,X1

     1528    10312    3   END TOL$MORE_LOAD;
     1529    10313    2   END TOL$MOVE_DATA;
     1530    10314        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:211  
     1531    10315    1   TOL$READ_BINARY: PROC;

  10315  4 002660   200142 741300       TOL$READ_BI* STX1  ! STATUS$+2,,AUTO

     1532    10316
     1533    10317    2      CALL TOL$READ_BUFFER;

  10317  4 002661   003255 701000 4                  TSX1    TOL$READ_BUFFER
         4 002662   000000 011000                    NOP     0

     1534    10318    2      CALL TOL$CHECK_BINARY_DATA;

  10318  4 002663   002673 701000 4                  TSX1    TOL$CHECK_BINARY_DATA
         4 002664   000000 011000                    NOP     0

     1535    10319    2      CALL TOL$RELOCATE_DATA;

  10319  4 002665   003344 701000 4                  TSX1    TOL$RELOCATE_DATA
         4 002666   000000 011000                    NOP     0

     1536    10320    2      CALL TOL$MOVE_LOAD;

  10320  4 002667   003123 701000 4                  TSX1    TOL$MOVE_LOAD
         4 002670   000000 011000                    NOP     0

     1537    10321    2      RETURN;

  10321  4 002671   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 002672   000001 702211                    TSX2  ! 1,X1

     1538    10322        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:212  
     1539    10323    2   TOL$CHECK_BINARY_DATA: PROC;

  10323  4 002673   200144 741300       TOL$CHECK_B* STX1  ! STATUS_SAVE+1,,AUTO

     1540    10324
     1541    10325    3      DCL MPCBOT_BIT STATIC BIT (36) ALIGNED INIT ('444723224663'O);
     1542    10326    3      DCL MPCBOT REDEF MPCBOT_BIT UBIN (36) ALIGNED;
     1543    10327
     1544    10328        /* Code */
     1545    10329
     1546    10330    4      DO I = 0 TO OBJECT.BINARY_COUNT - 1;

  10330  4 002674   000220 450000 3                  STZ     TOL$I
         4 002675   002756 710000 4                  TRA     s:10343+3

     1547    10331    4         BINARY$ = ADDR (BUFFER (I));

  10331  4 002676   000220 236000 3                  LDQ     TOL$I
         4 002677   000032 402003                    MPY     26,DU
         4 002700   000000 036000 xsym               ADLQ    TOL$BUFFER$
         4 002701   000226 756000 3                  STQ     TOL$BINARY$

     1548    10332    4         CALL TOL$CHECK_CARD_CHECKSUM

  10332  4 002702   000002 036003                    ADLQ    2,DU
         4 002703   200200 756100                    STQ     @CHECKSUM_LOCATION+14,,AUTO
         4 002704   000226 236000 3                  LDQ     TOL$BINARY$
         4 002705   000001 036003                    ADLQ    1,DU
         4 002706   200152 756100                    STQ     @CHECKSUM_LOCATION,,AUTO
         4 002707   000076 236000 5                  LDQ     62
         4 002710   200151 756100                    STQ     @CHECKSUM_SIZE,,AUTO
         4 002711   200200 630500                    EPPR0   @CHECKSUM_LOCATION+14,,AUTO
         4 002712   200150 450500                    STP0    @ERR_VEC2,,AUTO
         4 002713   000226 236000 3                  LDQ     TOL$BINARY$
         4 002714   200147 756100                    STQ     @ERR_VEC1,,AUTO
         4 002715   003033 701000 4                  TSX1    TOL$CHECK_CARD_CHECKSUM
         4 002716   000000 011000                    NOP     0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:213  

     1549    10333    4                 (BINARY.WD1,
     1550    10334    4                 ADDR (BINARY.RELOC),
     1551    10335    4                 22,
     1552    10336    4                 BINARY.CHECKSUM);
     1553    10337    4         IF (BINARY_LBLSEQ.LBL ~= OBJECT.BCD.LBL)

  10337  4 002717   000226 470400 3                  LDP0    TOL$BINARY$
         4 002720   000030 236100                    LDQ     24,,PR0
         4 002721   000307 116000 3                  CMPQ    TOL$OBJECT+18
         4 002722   002727 600000 4                  TZE     s:10339

     1554    10338    4         THEN CALL TOL$BAD_CARD (VECTOR (ER#11));

  10338  4 002723   000102 630400 5                  EPPR0   66
         4 002724   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 002725   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 002726   000000 011000                    NOP     0

     1555    10339    4         SEQ = BINARY_LBLSEQ.SEQ;

  10339  4 002727   000226 470400 3                  LDP0    TOL$BINARY$
         4 002730   000031 236100                    LDQ     25,,PR0
         4 002731   200127 756100                    STQ     SEQ,,AUTO

     1556    10340    4         CALL TOL$CHECK_SEQ (VECTOR (ER#12), VECTOR (ER#13));

  10340  4 002732   000110 236000 5                  LDQ     72
         4 002733   200150 756100                    STQ     @ERR_VEC2,,AUTO
         4 002734   000111 236000 5                  LDQ     73
         4 002735   200147 756100                    STQ     @ERR_VEC1,,AUTO
         4 002736   002142 701000 4                  TSX1    TOL$CHECK_SEQ
         4 002737   000000 011000                    NOP     0

     1557    10341    4         IF (BINARY.LOAD.TYPE ~= 4 AND BINARY.LOAD.TYPE ~= 2)

  10341  4 002740   000226 470400 3                  LDP0    TOL$BINARY$
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:214  
         4 002741   000000 236100                    LDQ     0,,PR0
         4 002742   700000 376003                    ANQ     -32768,DU
         4 002743   400000 116003                    CMPQ    -131072,DU
         4 002744   002753 600000 4                  TZE     s:10343
         4 002745   200000 116003                    CMPQ    65536,DU
         4 002746   002753 600000 4                  TZE     s:10343

     1558    10342    4         THEN CALL TOL$BAD_CARD (VECTOR (ER#14));

  10342  4 002747   000114 630400 5                  EPPR0   76
         4 002750   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 002751   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 002752   000000 011000                    NOP     0

     1559    10343    4      END;

  10343  4 002753   000220 235000 3                  LDA     TOL$I
         4 002754   000001 035007                    ADLA    1,DL
         4 002755   000220 755000 3                  STA     TOL$I
         4 002756   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 002757   777777 376007                    ANQ     -1,DL
         4 002760   000220 116000 3                  CMPQ    TOL$I
         4 002761   002763 600000 4                  TZE     s:10344
         4 002762   002676 603000 4                  TRC     s:10331

     1560    10344    3      IF (OBJECT.BCD.ASSEMBLER ~= 'M')

  10344  4 002763   000303 236000 3                  LDQ     TOL$OBJECT+14
         4 002764   000777 376007                    ANQ     511,DL
         4 002765   000115 116007                    CMPQ    77,DL
         4 002766   002771 600000 4                  TZE     s:10346

     1561    10345    3      THEN RETURN;

  10345  4 002767   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 002770   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:215  
     1562    10346    3      IF (BINARY.LOAD.SIZE ~= 10 OR BINARY.DATA (9) ~= MPCBOT)

  10346  4 002771   000226 470400 3                  LDP0    TOL$BINARY$
         4 002772   000000 236100                    LDQ     0,,PR0
         4 002773   000077 376003                    ANQ     63,DU
         4 002774   000012 116003                    CMPQ    10,DU
         4 002775   003001 601000 4                  TNZ     s:10347
         4 002776   000016 236100                    LDQ     14,,PR0
         4 002777   003470 116000 3                  CMPQ    MPCBOT_BIT
         4 003000   003005 600000 4                  TZE     s:10348

     1563    10347    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#15));

  10347  4 003001   000120 630400 5                  EPPR0   80
         4 003002   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003003   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003004   000000 011000                    NOP     0

     1564    10348    3      CS_OFFSET = BINARY.SPLIT.UPPER (5);

  10348  4 003005   000226 470400 3                  LDP0    TOL$BINARY$
         4 003006   000012 236100                    LDQ     10,,PR0
         4 003007   000022 772000                    QRL     18
         4 003010   200105 756100                    STQ     CS_OFFSET,,AUTO

     1565    10349    3      RW_OFFSET = BINARY.SPLIT.LOWER (5);

  10349  4 003011   000012 236100                    LDQ     10,,PR0
         4 003012   777777 376007                    ANQ     -1,DL
         4 003013   200125 756100                    STQ     RW_OFFSET,,AUTO

     1566    10350    3      CSRW_OFFSET = BINARY.SPLIT.UPPER (4);

  10350  4 003014   000011 236100                    LDQ     9,,PR0
         4 003015   000022 772000                    QRL     18
         4 003016   200104 756100                    STQ     CSRW_OFFSET,,AUTO

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:216  
     1567    10351    3      SECOND_MPC_CK = BINARY.LOAD.ADDRESS - 2;

  10351  4 003017   000000 236100                    LDQ     0,,PR0
         4 003020   777777 376007                    ANQ     -1,DL
         4 003021   000002 136007                    SBLQ    2,DL
         4 003022   200126 756100                    STQ     SECOND_MPC_CK,,AUTO

     1568    10352    3      IF (CSRW_OFFSET ~= 0)

  10352  4 003023   200104 235100                    LDA     CSRW_OFFSET,,AUTO
         4 003024   003030 600000 4                  TZE     s:10354

     1569    10353    3      THEN FIRST_MPC_CK = CSRW_OFFSET - 2;

  10353  4 003025   000002 135007                    SBLA    2,DL
         4 003026   200111 755100                    STA     FIRST_MPC_CK,,AUTO
         4 003027   003031 710000 4                  TRA     s:10355

     1570    10354    3      ELSE FIRST_MPC_CK = 0;

  10354  4 003030   200111 450100                    STZ     FIRST_MPC_CK,,AUTO

     1571    10355    3      RETURN;

  10355  4 003031   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 003032   000001 702211                    TSX2  ! 1,X1

     1572    10356        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:217  
     1573    10357    3   TOL$CHECK_CARD_CHECKSUM: PROC (CHECKSUM_SEED,

  10357  4 003033   200146 741300       TOL$CHECK_C* STX1  ! @LAST,,AUTO

     1574    10358    3              CHECKSUM_START$,
     1575    10359    3              CHECKSUM_SIZE,
     1576    10360    3              CHECKSUM_LOCATION);
     1577    10361
     1578    10362    4      DCL CHECKSUM_LOCATION UBIN (36) ALIGNED;
     1579    10363    4      DCL CHECKSUM_SEED UBIN (36) ALIGNED;
     1580    10364    4      DCL CHECKSUM_SIZE UBIN (36) ALIGNED;
     1581    10365    4      DCL CHECKSUM_START$ PTR ALIGNED;
     1582    10366
     1583    10367    4      DCL 1 CHECKSUM_DATA (0:22) BASED (CHECKSUM_START$) ALIGNED,
     1584    10368    4            2 UPPER UBIN (18) UNAL,
     1585    10369    4            2 LOWER UBIN (18) UNAL;
     1586    10370    4      DCL 1 CHECKSUM_SPLIT STATIC ALIGNED,
     1587    10371    4            2 UPPER UBIN (18) UNAL INIT (0),
     1588    10372    4            2 LOWER UBIN (18) UNAL;
     1589    10373    4      DCL CHECKSUM_BINARY REDEF CHECKSUM_SPLIT UBIN (36) ALIGNED;
     1590    10374        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:218  
     1591    10375        /* Code */
     1592    10376
     1593    10377    4      IF (CHECKSUM_LOCATION = 0)

  10377  4 003034   200152 470500                    LDP0    @CHECKSUM_LOCATION,,AUTO
         4 003035   000000 235100                    LDA     0,,PR0
         4 003036   003040 601000 4                  TNZ     s:10379

     1594    10378    4      THEN RETURN;

  10378  4 003037   000001 702211                    TSX2  ! 1,X1

     1595    10379    4      CALL TOL$CHECKSUM

  10379  4 003040   200151 471500                    LDP1    @CHECKSUM_SIZE,,AUTO
         4 003041   100000 235100                    LDA     0,,PR1
         4 003042   000001 135007                    SBLA    1,DL
         4 003043   200201 755100                    STA     @CHECKSUM_LOCATION+15,,AUTO
         4 003044   200132 633500                    EPPR3   CHECKSUM+1,,AUTO
         4 003045   200162 453500                    STP3    @CHECKSUM_LOCATION,,AUTO
         4 003046   200201 634500                    EPPR4   @CHECKSUM_LOCATION+15,,AUTO
         4 003047   200161 454500                    STP4    @CHECKSUM_SIZE,,AUTO
         4 003050   200150 236100                    LDQ     @CHECKSUM_START$,,AUTO
         4 003051   200160 756100                    STQ     @CHECKSUM_START$,,AUTO
         4 003052   200147 236100                    LDQ     @CHECKSUM_SEED,,AUTO
         4 003053   200157 756100                    STQ     @CHECKSUM_SEED,,AUTO
         4 003054   000670 701000 4                  TSX1    TOL$CHECKSUM
         4 003055   000000 011000                    NOP     0

     1596    10380    4              (CHECKSUM_SEED,
     1597    10381    4              CHECKSUM_START$,
     1598    10382    4              CHECKSUM_SIZE - 1,
     1599    10383    4              CHECKSUM.LH);
     1600    10384    4      CHECKSUM.UH = 0;

  10384  4 003056   200131 450100                    STZ     CHECKSUM,,AUTO

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:219  
     1601    10385    4      CHECKSUM.UPPER.LOWER = CHECKSUM.LOWER.UPPER;

  10385  4 003057   200132 220100                    LDX0    CHECKSUM+1,,AUTO
         4 003060   200131 440100                    SXL0    CHECKSUM,,AUTO

     1602    10386    4      CHECKSUM.LOWER.UPPER = 0;

  10386  4 003061   000000 221003                    LDX1    0,DU
         4 003062   200132 741100                    STX1    CHECKSUM+1,,AUTO

     1603    10387    4      CHECKSUM_SPLIT.LOWER = CHECKSUM_DATA.LOWER (CHECKSUM_SIZE - 1);

  10387  4 003063   200150 470500                    LDP0    @CHECKSUM_START$,,AUTO
         4 003064   000000 471500                    LDP1    0,,PR0
         4 003065   200151 473500                    LDP3    @CHECKSUM_SIZE,,AUTO
         4 003066   300000 722100                    LXL2    0,,PR3
         4 003067   177777 723112                    LXL3    -1,X2,PR1
         4 003070   003471 443000 3                  SXL3    CHECKSUM_SPLIT

     1604    10388    4      CHECKSUM.LH = CHECKSUM.LH + CHECKSUM_BINARY;

  10388  4 003071   200132 236100                    LDQ     CHECKSUM+1,,AUTO
         4 003072   003471 036000 3                  ADLQ    CHECKSUM_SPLIT
         4 003073   200132 756100                    STQ     CHECKSUM+1,,AUTO

     1605    10389    4      CHECKSUM_SPLIT.LOWER = CHECKSUM_DATA.UPPER (CHECKSUM_SIZE - 1);

  10389  4 003074   000000 471500                    LDP1    0,,PR0
         4 003075   300000 722100                    LXL2    0,,PR3
         4 003076   177777 224112                    LDX4    -1,X2,PR1
         4 003077   003471 444000 3                  SXL4    CHECKSUM_SPLIT

     1606    10390    4      CHECKSUM.UH = CHECKSUM.UH + CHECKSUM_BINARY;

  10390  4 003100   200131 236100                    LDQ     CHECKSUM,,AUTO
         4 003101   003471 036000 3                  ADLQ    CHECKSUM_SPLIT
         4 003102   200131 756100                    STQ     CHECKSUM,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:220  

     1607    10391    4      CHECKSUM_SPLIT.LOWER = CHECKSUM.LOWER.UPPER;

  10391  4 003103   200132 220100                    LDX0    CHECKSUM+1,,AUTO
         4 003104   003471 440000 3                  SXL0    CHECKSUM_SPLIT

     1608    10392    4      CHECKSUM.UH = CHECKSUM.UH + CHECKSUM_BINARY;

  10392  4 003105   003471 036000 3                  ADLQ    CHECKSUM_SPLIT
         4 003106   200131 756100                    STQ     CHECKSUM,,AUTO

     1609    10393    4      CHECKSUM.LOWER.UPPER = CHECKSUM.UPPER.LOWER;

  10393  4 003107   200131 722100                    LXL2    CHECKSUM,,AUTO
         4 003110   200132 742100                    STX2    CHECKSUM+1,,AUTO

     1610    10394    4      IF (CHECKSUM.LH ~= CHECKSUM_LOCATION)

  10394  4 003111   200152 471500                    LDP1    @CHECKSUM_LOCATION,,AUTO
         4 003112   200132 236100                    LDQ     CHECKSUM+1,,AUTO
         4 003113   100000 116100                    CMPQ    0,,PR1
         4 003114   003121 600000 4                  TZE     s:10396

     1611    10395    4      THEN CALL TOL$BAD_CARD (VECTOR (ER#16));

  10395  4 003115   000124 630400 5                  EPPR0   84
         4 003116   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003117   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003120   000000 011000                    NOP     0

     1612    10396    4      RETURN;

  10396  4 003121   200146 221300                    LDX1  ! @LAST,,AUTO
         4 003122   000001 702211                    TSX2  ! 1,X1

     1613    10397    4   END TOL$CHECK_CARD_CHECKSUM;
     1614    10398    3   END TOL$CHECK_BINARY_DATA;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:221  
     1615    10399        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:222  
     1616    10400    2   TOL$MOVE_LOAD: PROC;

  10400  4 003123   200144 741300       TOL$MOVE_LO* STX1  ! STATUS_SAVE+1,,AUTO

     1617    10401
     1618    10402    3      DCL 1 LOAD_SKIP STATIC ALIGNED,
     1619    10403    3            2 TYPE UBIN (3) UNAL INIT (0),
     1620    10404    3            2 SIZE UBIN (15) UNAL,
     1621    10405    3            2 * UBIN (18) UNAL;
     1622    10406    3      DCL LOAD_WORD REDEF LOAD_SKIP UBIN (36) ALIGNED;
     1623    10407        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:223  
     1624    10408        /* Code */
     1625    10409
     1626    10410    3      START_LOADP = '0'B;

  10410  4 003124   000406 450000 3                  STZ     TOL$START_LOAD$

     1627    10411    3      SKIP_LOAD = 0;

  10411  4 003125   200130 450100                    STZ     SKIP_LOAD,,AUTO

     1628    10412    4      DO I = 0 TO OBJECT.BINARY_COUNT - 1;

  10412  4 003126   000220 450000 3                  STZ     TOL$I
         4 003127   003246 710000 4                  TRA     s:10437+3

     1629    10413    4         BINARY$ = ADDR (BUFFER (I));

  10413  4 003130   000220 236000 3                  LDQ     TOL$I
         4 003131   000032 402003                    MPY     26,DU
         4 003132   000000 036000 xsym               ADLQ    TOL$BUFFER$
         4 003133   000226 756000 3                  STQ     TOL$BINARY$

     1630    10414    4         IF (BINARY.LOAD.TYPE = 2)

  10414  4 003134   000226 470400 3                  LDP0    TOL$BINARY$
         4 003135   000000 236100                    LDQ     0,,PR0
         4 003136   700000 376003                    ANQ     -32768,DU
         4 003137   200000 116003                    CMPQ    65536,DU
         4 003140   003236 601000 4                  TNZ     s:10436

     1631    10415    5         THEN DO;

     1632    10416    5                 BINARY.WD1 = BINARY.RELOC (2);

  10416  4 003141   000004 235100                    LDA     4,,PR0
         4 003142   000000 755100                    STA     0,,PR0

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:224  
     1633    10417    5                 BINARY.LOAD.TYPE = 3;

  10417  4 003143   000226 470400 3                  LDP0    TOL$BINARY$
         4 003144   000000 236100                    LDQ     0,,PR0
         4 003145   000067 376000 5                  ANQ     55
         4 003146   300000 276003                    ORQ     98304,DU
         4 003147   000000 756100                    STQ     0,,PR0

     1634    10418    5                 BINARY.RELOC (2) = BINARY.WD1;

  10418  4 003150   000226 470400 3                  LDP0    TOL$BINARY$
         4 003151   000000 235100                    LDA     0,,PR0
         4 003152   000004 755100                    STA     4,,PR0

     1635    10419    5                 IF (START_LOADP = '0'B)

  10419  4 003153   000406 235000 3                  LDA     TOL$START_LOAD$
         4 003154   003164 601000 4                  TNZ     s:10424

     1636    10420    6                 THEN DO;

     1637    10421    6                         START_LOAD$ = ADDR (BUFFER (I));

  10421  4 003155   000220 236000 3                  LDQ     TOL$I
         4 003156   000032 402003                    MPY     26,DU
         4 003157   000000 036000 xsym               ADLQ    TOL$BUFFER$
         4 003160   000406 756000 3                  STQ     TOL$START_LOAD$

     1638    10422    6                         START_LOADP.ADDRESS = START_LOADP.ADDRESS + 4;

  10422  4 003161   000406 220000 3                  LDX0    TOL$START_LOAD$
         4 003162   000004 621010                    EAX1    4,X0
         4 003163   000406 741000 3                  STX1    TOL$START_LOAD$

     1639    10423    6                      END;

     1640    10424    5                 J = 0;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:225  

  10424  4 003164   000222 450000 3                  STZ     TOL$J

     1641    10425    6                 DO WHILE (J < 19 AND BINARY.LOAD.SIZE ~= 0);

  10425  4 003165   003215 710000 4                  TRA     s:10432

     1642    10426    6                    K = BINARY.LOAD.SIZE;

  10426  4 003166   000226 470400 3                  LDP0    TOL$BINARY$
         4 003167   000000 236100                    LDQ     0,,PR0
         4 003170   000022 772000                    QRL     18
         4 003171   000077 376007                    ANQ     63,DL
         4 003172   000223 756000 3                  STQ     TOL$K

     1643    10427    6                    BINARY.WD1 = BINARY.DATA (J + K);

  10427  4 003173   000222 036000 3                  ADLQ    TOL$J
         4 003174   000005 235106                    LDA     5,QL,PR0
         4 003175   000000 755100                    STA     0,,PR0

     1644    10428    6                    BINARY.LOAD.TYPE = 3;

  10428  4 003176   000226 470400 3                  LDP0    TOL$BINARY$
         4 003177   000000 236100                    LDQ     0,,PR0
         4 003200   000067 376000 5                  ANQ     55
         4 003201   300000 276003                    ORQ     98304,DU
         4 003202   000000 756100                    STQ     0,,PR0

     1645    10429    6                    BINARY.DATA (J + K) = BINARY.WD1;

  10429  4 003203   000222 236000 3                  LDQ     TOL$J
         4 003204   000223 036000 3                  ADLQ    TOL$K
         4 003205   000226 470400 3                  LDP0    TOL$BINARY$
         4 003206   000000 235100                    LDA     0,,PR0
         4 003207   000005 755106                    STA     5,QL,PR0

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:226  
     1646    10430    6                    J = J + K + 1;

  10430  4 003210   000222 236000 3                  LDQ     TOL$J
         4 003211   000223 036000 3                  ADLQ    TOL$K
         4 003212   000001 036007                    ADLQ    1,DL
         4 003213   000222 756000 3                  STQ     TOL$J

     1647    10431    6                    K = J;

  10431  4 003214   000223 756000 3                  STQ     TOL$K

     1648    10432    6                 END;

  10432  4 003215   000222 235000 3                  LDA     TOL$J
         4 003216   000023 115007                    CMPA    19,DL
         4 003217   003224 603000 4                  TRC     s:10433
         4 003220   000226 470400 3                  LDP0    TOL$BINARY$
         4 003221   000000 236100                    LDQ     0,,PR0
         4 003222   000077 316003                    CANQ    63,DU
         4 003223   003166 601000 4                  TNZ     s:10426

     1649    10433    5                 LOAD_SKIP.SIZE = 20 - K + 5;

  10433  4 003224   000031 236007                    LDQ     25,DL
         4 003225   000223 136000 3                  SBLQ    TOL$K
         4 003226   000022 736000                    QLS     18
         4 003227   003472 676000 3                  ERQ     LOAD_SKIP
         4 003230   077777 376003                    ANQ     32767,DU
         4 003231   003472 656000 3                  ERSQ    LOAD_SKIP

     1650    10434    5                 BINARY.DATA (K - 1) = LOAD_WORD;

  10434  4 003232   000226 470400 3                  LDP0    TOL$BINARY$
         4 003233   000223 720000 3                  LXL0    TOL$K
         4 003234   003472 236000 3                  LDQ     LOAD_SKIP
         4 003235   000004 756110                    STQ     4,X0,PR0

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:227  
     1651    10435    5              END;

     1652    10436    4         END_LOAD = BINARYP.ADDRESS + K + 4;

  10436  4 003236   000226 236000 3                  LDQ     TOL$BINARY$
         4 003237   000022 772000                    QRL     18
         4 003240   000223 036000 3                  ADLQ    TOL$K
         4 003241   000004 036007                    ADLQ    4,DL
         4 003242   200107 756100                    STQ     END_LOAD,,AUTO

     1653    10437    4      END;

  10437  4 003243   000220 235000 3                  LDA     TOL$I
         4 003244   000001 035007                    ADLA    1,DL
         4 003245   000220 755000 3                  STA     TOL$I
         4 003246   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 003247   777777 376007                    ANQ     -1,DL
         4 003250   000220 116000 3                  CMPQ    TOL$I
         4 003251   003253 600000 4                  TZE     s:10438
         4 003252   003130 603000 4                  TRC     s:10413

     1654    10438    3      RETURN;

  10438  4 003253   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 003254   000001 702211                    TSX2  ! 1,X1

     1655    10439
     1656    10440    3   END TOL$MOVE_LOAD;
     1657    10441        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:228  
     1658    10442    2   TOL$READ_BUFFER: PROC;

  10442  4 003255   200144 741300       TOL$READ_BU* STX1  ! STATUS_SAVE+1,,AUTO

     1659    10443
     1660    10444    3      DECK_KEY.DECK# = OBJECT.DECK#;

  10444  4 003256   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 003257   000011 772000                    QRL     9
         4 003260   000422 552030 3                  STBQ    DECK_KEY,'30'O

     1661    10445    3      READ_BINARY_DECK.BUF_ = VECTOR (BUFFER);

  10445  4 003261   000125 235000 5                  LDA     85
         4 003262   000000 236000 xsym               LDQ     TOL$BUFFER$
         4 003263   000076 757000 3                  STAQ    READ_BINARY_DECK+4

     1662    10446    3      CALL M$READ (READ_BINARY_DECK) ALTRET (BAD_BINARY_READ);

  10446  4 003264   000072 630400 3                  EPPR0   READ_BINARY_DECK
         4 003265   440000 713400                    CLIMB   alt,read
         4 003266   401400 401760                    pmme    nvectors=4
         4 003267   003323 702000 4                  TSX2    BAD_BINARY_READ

     1663    10447    3      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;

  10447  4 003270   000412 470400 3                  LDP0    M$DECKFILE$
         4 003271   000000 235100                    LDA     0,,PR0
         4 003272   000217 755000 3                  STA     TOL$DECKFILE_ARS#

     1664    10448    3      IF (MOD (DECKFILE_ARS#, 104) ~= 0)

  10448  4 003273   000043 773000                    LRL     35
         4 003274   000150 507007                    DVF     104,DL
         4 003275   000000 116003                    CMPQ    0,DU
         4 003276   003303 600000 4                  TZE     s:10450

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:229  
     1665    10449    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#27));

  10449  4 003277   000130 630400 5                  EPPR0   88
         4 003300   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003301   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003302   000000 011000                    NOP     0

     1666    10450    3      IF (DECKFILE_ARS# / 104 ~= OBJECT.BINARY_COUNT)

  10450  4 003303   000217 236000 3                  LDQ     TOL$DECKFILE_ARS#
         4 003304   000001 772000                    QRL     1
         4 003305   000064 506007                    DIV     52,DL
         4 003306   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 003307   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 003310   777777 376007                    ANQ     -1,DL
         4 003311   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 003312   200164 236100                    LDQ     @CHECKSUM_LOCATION+2,,AUTO
         4 003313   200165 116100                    CMPQ    @CHECKSUM_LOCATION+3,,AUTO
         4 003314   003321 600000 4                  TZE     s:10452

     1667    10451    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#28));

  10451  4 003315   000134 630400 5                  EPPR0   92
         4 003316   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003317   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003320   000000 011000                    NOP     0

     1668    10452    3      RETURN;

  10452  4 003321   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 003322   000001 702211                    TSX2  ! 1,X1

     1669    10453
     1670    10454    3   BAD_BINARY_READ:
     1671    10455    3      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)

  10455  4 003323   000000 470400 xsym  BAD_BINARY_* LDP0    B$TCB$
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:230  
         4 003324   000000 471500                    LDP1    0,,PR0
         4 003325   100102 236100                    LDQ     66,,PR1
         4 003326   377770 376007                    ANQ     131064,DL
         4 003327   001020 116007                    CMPQ    528,DL
         4 003330   003336 600000 4                  TZE     s:10457

     1672    10456    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#64));

  10456  4 003331   000140 630400 5                  EPPR0   96
         4 003332   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003333   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003334   000000 011000                    NOP     0
         4 003335   003342 710000 4                  TRA     s:10459

     1673    10457    3      ELSE CALL TOL$BAD_CARD (VECTOR (ER#29));

  10457  4 003336   000144 630400 5                  EPPR0   100
         4 003337   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003340   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003341   000000 011000                    NOP     0

     1674    10458
     1675    10459    3   END TOL$READ_BUFFER;

  10459  4 003342   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 003343   000001 702211                    TSX2  ! 1,X1

     1676    10460        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:231  
     1677    10461    2   TOL$RELOCATE_DATA: PROC;

  10461  4 003344   200144 741300       TOL$RELOCAT* STX1  ! STATUS_SAVE+1,,AUTO

     1678    10462
     1679    10463    4      DO I = 0 TO OBJECT.BINARY_COUNT - 1;

  10463  4 003345   000220 450000 3                  STZ     TOL$I
         4 003346   003424 710000 4                  TRA     s:10482+3

     1680    10464    4         BINARY$ = ADDR (BUFFER (I));

  10464  4 003347   000220 236000 3                  LDQ     TOL$I
         4 003350   000032 402003                    MPY     26,DU
         4 003351   000000 036000 xsym               ADLQ    TOL$BUFFER$
         4 003352   000226 756000 3                  STQ     TOL$BINARY$

     1681    10465    4         IF (BINARY.LOAD.TYPE = 2)

  10465  4 003353   000226 470400 3                  LDP0    TOL$BINARY$
         4 003354   000000 236100                    LDQ     0,,PR0
         4 003355   700000 376003                    ANQ     -32768,DU
         4 003356   200000 116003                    CMPQ    65536,DU
         4 003357   003421 601000 4                  TNZ     s:10482

     1682    10466    5         THEN DO;

     1683    10467    5                 RELOC = '0'B;

  10467  4 003360   000000 100400                    MLR     fill='000'O
         4 003361   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         4 003362   000352 000160 3                  ADSC9   TOL$RELOC                cn=0,n=112

     1684    10468    5                 IF (RELOCATION ~= 0 )

  10468  4 003363   200123 235100                    LDA     RELOCATION,,AUTO
         4 003364   003371 600000 4                  TZE     s:10473
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:232  

     1685    10469    6                 THEN DO;

     1686    10470    6                         CALL TOL$MOVE_RELOCATION_BITS;

  10470  4 003365   003433 701000 4                  TSX1    TOL$MOVE_RELOCATION_BITS
         4 003366   000000 011000                    NOP     0

     1687    10471    6                         CALL TOL$SET_RELOCATION_WORDS;

  10471  4 003367   003622 701000 4                  TSX1    TOL$SET_RELOCATION_WORDS
         4 003370   000000 011000                    NOP     0

     1688    10472    6                      END;

     1689    10473    5                 J = 0;

  10473  4 003371   000222 450000 3                  STZ     TOL$J

     1690    10474    5                 K = 0;

  10474  4 003372   000223 450000 3                  STZ     TOL$K

     1691    10475    6                 DO WHILE (K < 19 AND BINARY.LOAD.SIZE ~= 0);

  10475  4 003373   003407 710000 4                  TRA     s:10479

     1692    10476    6                    CALL TOL$RELOCATE_WORDS;

  10476  4 003374   003513 701000 4                  TSX1    TOL$RELOCATE_WORDS
         4 003375   000000 011000                    NOP     0

     1693    10477    6                    K = K + BINARY.LOAD.SIZE + 1;

  10477  4 003376   000226 470400 3                  LDP0    TOL$BINARY$
         4 003377   000000 236100                    LDQ     0,,PR0
         4 003400   000022 772000                    QRL     18
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:233  
         4 003401   000077 376007                    ANQ     63,DL
         4 003402   000223 036000 3                  ADLQ    TOL$K
         4 003403   000001 036007                    ADLQ    1,DL
         4 003404   000223 756000 3                  STQ     TOL$K

     1694    10478    6                    BINARY.WD1 = BINARY.DATA (K - 1);

  10478  4 003405   000004 235106                    LDA     4,QL,PR0
         4 003406   000000 755100                    STA     0,,PR0

     1695    10479    6                 END;

  10479  4 003407   000223 235000 3                  LDA     TOL$K
         4 003410   000023 115007                    CMPA    19,DL
         4 003411   003416 603000 4                  TRC     s:10480
         4 003412   000226 470400 3                  LDP0    TOL$BINARY$
         4 003413   000000 236100                    LDQ     0,,PR0
         4 003414   000077 316003                    CANQ    63,DU
         4 003415   003374 601000 4                  TNZ     s:10476

     1696    10480    5                 BINARY.WD1 = BINARY.RELOC (2);

  10480  4 003416   000226 470400 3                  LDP0    TOL$BINARY$
         4 003417   000004 235100                    LDA     4,,PR0
         4 003420   000000 755100                    STA     0,,PR0

     1697    10481    5              END;

     1698    10482    4      END;

  10482  4 003421   000220 235000 3                  LDA     TOL$I
         4 003422   000001 035007                    ADLA    1,DL
         4 003423   000220 755000 3                  STA     TOL$I
         4 003424   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 003425   777777 376007                    ANQ     -1,DL
         4 003426   000220 116000 3                  CMPQ    TOL$I
         4 003427   003431 600000 4                  TZE     s:10483
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:234  
         4 003430   003347 603000 4                  TRC     s:10464

     1699    10483    3      RETURN;

  10483  4 003431   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 003432   000001 702211                    TSX2  ! 1,X1

     1700    10484        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:235  
     1701    10485    3   TOL$MOVE_RELOCATION_BITS: PROC;

  10485  4 003433   200146 741300       TOL$MOVE_RE* STX1  ! @LAST,,AUTO

     1702    10486
     1703    10487    4      DCL RELOC_WORD UBIN (36) ALIGNED;
     1704    10488    4      DCL 1 RELOC_PAIR REDEF RELOC_WORD ALIGNED,
     1705    10489    4            2 BITS (0:6) UNAL,
     1706    10490    4              3 * UBIN (1) UNAL,
     1707    10491    4              3 UPPER UBIN (2) UNAL,
     1708    10492    4              3 LOWER UBIN (2) UNAL,
     1709    10493    4            2 * UBIN (1) UNAL;
     1710    10494
     1711    10495        /* Code */
     1712    10496
     1713    10497    4      L = 0;

  10497  4 003434   200114 450100                    STZ     L,,AUTO

     1714    10498    5      DO J = 0 TO 2;

  10498  4 003435   000222 450000 3                  STZ     TOL$J

     1715    10499    5         RELOC_WORD = BINARY.RELOC (J);

  10499  4 003436   000226 470400 3                  LDP0    TOL$BINARY$
         4 003437   000222 720000 3                  LXL0    TOL$J
         4 003440   000002 235110                    LDA     2,X0,PR0
         4 003441   200147 755100                    STA     RELOC_WORD,,AUTO

     1716    10500    5         IF (RELOC_WORD ~= 0)

  10500  4 003442   003501 600000 4                  TZE     s:10505

     1717    10501    6         THEN DO K = 0 TO 6;

  10501  4 003443   000223 450000 3                  STZ     TOL$K
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:236  

     1718    10502    6                 RELOC.UPPER (K + L) = RELOC_PAIR.BITS.UPPER (K);

  10502  4 003444   000223 236000 3                  LDQ     TOL$K
         4 003445   200114 036100                    ADLQ    L,,AUTO
         4 003446   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 003447   000223 236000 3                  LDQ     TOL$K
         4 003450   000005 402007                    MPY     5,DL
         4 003451   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 003452   200164 236100                    LDQ     @CHECKSUM_LOCATION+2,,AUTO
         4 003453   000044 402007                    MPY     36,DL
         4 003454   200165 235100                    LDA     @CHECKSUM_LOCATION+3,,AUTO
         4 003455   003006 061505                    CSR     bolr='003'O
         4 003456   200147 010002                    BDSC    RELOC_WORD,A,AUTO        by=0,bit=1,n=2
         4 003457   000352 000022 3                  BDSC    TOL$RELOC,Q              by=0,bit=0,n=18

     1719    10503    6                 RELOC.LOWER (K + L) = RELOC_PAIR.BITS.LOWER (K);

  10503  4 003460   000223 236000 3                  LDQ     TOL$K
         4 003461   200114 036100                    ADLQ    L,,AUTO
         4 003462   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 003463   000223 236000 3                  LDQ     TOL$K
         4 003464   000005 402007                    MPY     5,DL
         4 003465   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 003466   200164 236100                    LDQ     @CHECKSUM_LOCATION+2,,AUTO
         4 003467   000044 402007                    MPY     36,DL
         4 003470   200165 235100                    LDA     @CHECKSUM_LOCATION+3,,AUTO
         4 003471   003006 061505                    CSR     bolr='003'O
         4 003472   200147 030002                    BDSC    RELOC_WORD,A,AUTO        by=0,bit=3,n=2
         4 003473   000352 400022 3                  BDSC    TOL$RELOC,Q              by=2,bit=0,n=18

     1720    10504    6              END;

  10504  4 003474   000223 235000 3                  LDA     TOL$K
         4 003475   000001 035007                    ADLA    1,DL
         4 003476   000223 755000 3                  STA     TOL$K
         4 003477   000007 115007                    CMPA    7,DL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:237  
         4 003500   003444 602000 4                  TNC     s:10502

     1721    10505    5         L = L + 7;

  10505  4 003501   200114 235100                    LDA     L,,AUTO
         4 003502   000007 035007                    ADLA    7,DL
         4 003503   200114 755100                    STA     L,,AUTO

     1722    10506    5      END;

  10506  4 003504   000222 236000 3                  LDQ     TOL$J
         4 003505   000001 036007                    ADLQ    1,DL
         4 003506   000222 756000 3                  STQ     TOL$J
         4 003507   000003 116007                    CMPQ    3,DL
         4 003510   003436 602000 4                  TNC     s:10499

     1723    10507    4      RETURN;

  10507  4 003511   200146 221300                    LDX1  ! @LAST,,AUTO
         4 003512   000001 702211                    TSX2  ! 1,X1

     1724    10508    4   END TOL$MOVE_RELOCATION_BITS;
     1725    10509        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:238  
     1726    10510    3   TOL$RELOCATE_WORDS: PROC;

  10510  4 003513   200146 741300       TOL$RELOCAT* STX1  ! @LAST,,AUTO

     1727    10511
     1728    10512    4      IF (LOAD_RELOC ~= 0)

  10512  4 003514   200117 235100                    LDA     LOAD_RELOC,,AUTO
         4 003515   003526 600000 4                  TZE     s:10518

     1729    10513    5      THEN DO;

     1730    10514    5              SPLIT_SPLIT.LOWER = BINARY.LOAD.ADDRESS;

  10514  4 003516   000226 470400 3                  LDP0    TOL$BINARY$
         4 003517   000000 720100                    LXL0    0,,PR0
         4 003520   200137 440100                    SXL0    SPLIT_DATA,,AUTO

     1731    10515    5              SPLIT_DATA = SPLIT_DATA + LOAD_RELOC;

  10515  4 003521   200137 236100                    LDQ     SPLIT_DATA,,AUTO
         4 003522   200117 036100                    ADLQ    LOAD_RELOC,,AUTO
         4 003523   200137 756100                    STQ     SPLIT_DATA,,AUTO

     1732    10516    5              BINARY.LOAD.ADDRESS = SPLIT_SPLIT.LOWER;

  10516  4 003524   200137 722100                    LXL2    SPLIT_DATA,,AUTO
         4 003525   000000 442100                    SXL2    0,,PR0

     1733    10517    5           END;

     1734    10518    4      SPLIT_SPLIT.UPPER = 0;

  10518  4 003526   000000 220003                    LDX0    0,DU
         4 003527   200137 740100                    STX0    SPLIT_DATA,,AUTO

     1735    10519    4      IF (K = 0)
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:239  

  10519  4 003530   000223 236000 3                  LDQ     TOL$K
         4 003531   003536 601000 4                  TNZ     s:10521

     1736    10520    4      THEN BINARY.RELOC (2) = BINARY.WD1;

  10520  4 003532   000226 470400 3                  LDP0    TOL$BINARY$
         4 003533   000000 235100                    LDA     0,,PR0
         4 003534   000004 755100                    STA     4,,PR0
         4 003535   003541 710000 4                  TRA     s:10522

     1737    10521    4      ELSE BINARY.DATA (K - 1) = BINARY.WD1;

  10521  4 003536   000226 470400 3                  LDP0    TOL$BINARY$
         4 003537   000000 235100                    LDA     0,,PR0
         4 003540   000004 755106                    STA     4,QL,PR0

     1738    10522    4      IF (RELOC ~= '0'B)

  10522  4 003541   000000 106400                    CMPC    fill='000'O
         4 003542   000352 000160 3                  ADSC9   TOL$RELOC                cn=0,n=112
         4 003543   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         4 003544   003620 600000 4                  TZE     s:10538

     1739    10523    5      THEN DO L = K TO K + BINARY.LOAD.SIZE - 1;

  10523  4 003545   000223 235000 3                  LDA     TOL$K
         4 003546   200114 755100                    STA     L,,AUTO
         4 003547   003610 710000 4                  TRA     s:10537+3

     1740    10524    5              IF (RELOC.UPPER (J) ~= 0)

  10524  4 003550   000222 720000 3                  LXL0    TOL$J
         4 003551   000352 221010 3                  LDX1    TOL$RELOC,X0
         4 003552   003565 600000 4                  TZE     s:10530

     1741    10525    6              THEN DO;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:240  

     1742    10526    6                      SPLIT_SPLIT.LOWER = BINARY.SPLIT.UPPER (L);

  10526  4 003553   000226 470400 3                  LDP0    TOL$BINARY$
         4 003554   200114 722100                    LXL2    L,,AUTO
         4 003555   000005 223112                    LDX3    5,X2,PR0
         4 003556   200137 443100                    SXL3    SPLIT_DATA,,AUTO

     1743    10527    6                      SPLIT_DATA = SPLIT_DATA + RELOC.UPPER (J);

  10527  4 003557   000352 236010 3                  LDQ     TOL$RELOC,X0
         4 003560   000022 772000                    QRL     18
         4 003561   200137 036100                    ADLQ    SPLIT_DATA,,AUTO
         4 003562   200137 756100                    STQ     SPLIT_DATA,,AUTO

     1744    10528    6                      BINARY.SPLIT.UPPER (L) = SPLIT_SPLIT.LOWER;

  10528  4 003563   200137 724100                    LXL4    SPLIT_DATA,,AUTO
         4 003564   000005 744112                    STX4    5,X2,PR0

     1745    10529    6                   END;

     1746    10530    5              IF (RELOC.LOWER (J) ~= 0)

  10530  4 003565   000222 720000 3                  LXL0    TOL$J
         4 003566   000352 721010 3                  LXL1    TOL$RELOC,X0
         4 003567   003602 600000 4                  TZE     s:10536

     1747    10531    6              THEN DO;

     1748    10532    6                      SPLIT_SPLIT.LOWER = BINARY.SPLIT.LOWER (L);

  10532  4 003570   000226 470400 3                  LDP0    TOL$BINARY$
         4 003571   200114 722100                    LXL2    L,,AUTO
         4 003572   000005 723112                    LXL3    5,X2,PR0
         4 003573   200137 443100                    SXL3    SPLIT_DATA,,AUTO

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:241  
     1749    10533    6                      SPLIT_DATA = SPLIT_DATA + RELOC.LOWER (J);

  10533  4 003574   000352 236010 3                  LDQ     TOL$RELOC,X0
         4 003575   777777 376007                    ANQ     -1,DL
         4 003576   200137 036100                    ADLQ    SPLIT_DATA,,AUTO
         4 003577   200137 756100                    STQ     SPLIT_DATA,,AUTO

     1750    10534    6                      BINARY.SPLIT.LOWER (L) = SPLIT_SPLIT.LOWER;

  10534  4 003600   200137 724100                    LXL4    SPLIT_DATA,,AUTO
         4 003601   000005 444112                    SXL4    5,X2,PR0

     1751    10535    6                   END;

     1752    10536    5              J = J + 1;

  10536  4 003602   000222 235000 3                  LDA     TOL$J
         4 003603   000001 035007                    ADLA    1,DL
         4 003604   000222 755000 3                  STA     TOL$J

     1753    10537    5           END;

  10537  4 003605   200114 236100                    LDQ     L,,AUTO
         4 003606   000001 036007                    ADLQ    1,DL
         4 003607   200114 756100                    STQ     L,,AUTO
         4 003610   000226 470400 3                  LDP0    TOL$BINARY$
         4 003611   000000 236100                    LDQ     0,,PR0
         4 003612   000022 772000                    QRL     18
         4 003613   000077 376007                    ANQ     63,DL
         4 003614   000223 036000 3                  ADLQ    TOL$K
         4 003615   200114 116100                    CMPQ    L,,AUTO
         4 003616   003620 600000 4                  TZE     s:10538
         4 003617   003550 603000 4                  TRC     s:10524

     1754    10538    4      RETURN;

  10538  4 003620   200146 221300                    LDX1  ! @LAST,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:242  
         4 003621   000001 702211                    TSX2  ! 1,X1

     1755    10539
     1756    10540    4   END TOL$RELOCATE_WORDS;
     1757    10541        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:243  
     1758    10542    3   TOL$SET_RELOCATION_WORDS: PROC;

  10542  4 003622   200146 741300       TOL$SET_REL* STX1  ! @LAST,,AUTO

     1759    10543
     1760    10544    5      DO J = 0 TO 18;

  10544  4 003623   000222 450000 3                  STZ     TOL$J

     1761    10545    5         IF (RELOC.UPPER (J) > 1 OR RELOC.LOWER (J) > 1)

  10545  4 003624   000222 720000 3                  LXL0    TOL$J
         4 003625   000352 221010 3                  LDX1    TOL$RELOC,X0
         4 003626   000002 101003                    CMPX1   2,DU
         4 003627   003633 603000 4                  TRC     s:10546
         4 003630   000352 722010 3                  LXL2    TOL$RELOC,X0
         4 003631   000002 102003                    CMPX2   2,DU
         4 003632   003637 602000 4                  TNC     s:10547

     1762    10546    5         THEN CALL TOL$BAD_CARD (VECTOR (ER#61));

  10546  4 003633   000150 630400 5                  EPPR0   104
         4 003634   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003635   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003636   000000 011000                    NOP     0

     1763    10547    5         IF (RELOC.UPPER (J) = 1)

  10547  4 003637   000222 720000 3                  LXL0    TOL$J
         4 003640   000352 221010 3                  LDX1    TOL$RELOC,X0
         4 003641   000001 101003                    CMPX1   1,DU
         4 003642   003646 601000 4                  TNZ     s:10549

     1764    10548    5         THEN RELOC.UPPER (J) = RELOCATION;

  10548  4 003643   200123 722100                    LXL2    RELOCATION,,AUTO
         4 003644   000352 742010 3                  STX2    TOL$RELOC,X0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:244  
         4 003645   003650 710000 4                  TRA     s:10550

     1765    10549    5         ELSE RELOC.UPPER (J) = 0;

  10549  4 003646   000000 222003                    LDX2    0,DU
         4 003647   000352 742010 3                  STX2    TOL$RELOC,X0

     1766    10550    5         IF (RELOC.LOWER (J) = 1)

  10550  4 003650   000222 720000 3                  LXL0    TOL$J
         4 003651   000352 721010 3                  LXL1    TOL$RELOC,X0
         4 003652   000001 101003                    CMPX1   1,DU
         4 003653   003657 601000 4                  TNZ     s:10552

     1767    10551    5         THEN RELOC.LOWER (J) = RELOCATION;

  10551  4 003654   200123 722100                    LXL2    RELOCATION,,AUTO
         4 003655   000352 442010 3                  SXL2    TOL$RELOC,X0
         4 003656   003661 710000 4                  TRA     s:10553

     1768    10552    5         ELSE RELOC.LOWER (J) = 0;

  10552  4 003657   000000 222003                    LDX2    0,DU
         4 003660   000352 442010 3                  SXL2    TOL$RELOC,X0

     1769    10553    5      END;

  10553  4 003661   000222 235000 3                  LDA     TOL$J
         4 003662   000001 035007                    ADLA    1,DL
         4 003663   000222 755000 3                  STA     TOL$J
         4 003664   000023 115007                    CMPA    19,DL
         4 003665   003624 602000 4                  TNC     s:10545

     1770    10554
     1771    10555    4      RETURN;

  10555  4 003666   200146 221300                    LDX1  ! @LAST,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:245  
         4 003667   000001 702211                    TSX2  ! 1,X1

     1772    10556    4   END TOL$SET_RELOCATION_WORDS;
     1773    10557    3   END TOL$RELOCATE_DATA;
     1774    10558    2   END TOL$READ_BINARY;
     1775    10559        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:246  
     1776    10560    1   TOL$READ_OBJECT: PROC ALTRET;

  10560  4 003670   200142 741300       TOL$READ_OB* STX1  ! STATUS$+2,,AUTO

     1777    10561    2      OBJECT_KEY = KEY_VALUE;

  10561  4 003671   200003 470500                    LDP0    @KEY_VALUE,,AUTO
         4 003672   000000 100500                    MLR     fill='000'O
         4 003673   000000 000030                    ADSC9   0,,PR0                   cn=0,n=24
         4 003674   000315 000030 3                  ADSC9   TOL$OBJECT_KEY           cn=0,n=24

     1778    10562    2      IF (OBJECT_KEY.SIZE ~= 23)

  10562  4 003675   000315 236000 3                  LDQ     TOL$OBJECT_KEY
         4 003676   777000 376003                    ANQ     -512,DU
         4 003677   027000 116003                    CMPQ    11776,DU
         4 003700   003705 600000 4                  TZE     s:10564

     1779    10563    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#43));

  10563  4 003701   000154 630400 5                  EPPR0   108
         4 003702   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003703   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003704   000000 011000                    NOP     0

     1780    10564    2      CALL M$READ (READ_OBJECT_CARD) ALTRET (BAD_OBJECT_READ);

  10564  4 003705   000162 630400 3                  EPPR0   READ_OBJECT_CARD
         4 003706   440000 713400                    CLIMB   alt,read
         4 003707   401400 401760                    pmme    nvectors=4
         4 003710   004024 702000 4                  TSX2    BAD_OBJECT_READ

     1781    10565    2      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;

  10565  4 003711   000412 470400 3                  LDP0    M$DECKFILE$
         4 003712   000000 235100                    LDA     0,,PR0
         4 003713   000217 755000 3                  STA     TOL$DECKFILE_ARS#
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:247  

     1782    10566    2      IF (DECKFILE_ARS# ~= 96)

  10566  4 003714   000140 115007                    CMPA    96,DL
         4 003715   003722 600000 4                  TZE     s:10568

     1783    10567    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#44));

  10567  4 003716   000160 630400 5                  EPPR0   112
         4 003717   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003720   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003721   000000 011000                    NOP     0

     1784    10568    2      CALL TOL$CHECK_CHECKSUM

  10568  4 003722   000164 236000 5                  LDQ     116
         4 003723   200202 756100                    STQ     @CHECKSUM_LOCATION+16,,AUTO
         4 003724   000166 237000 5                  LDAQ    118
         4 003725   200152 757100                    STAQ    @CHECKSUM_LOCATION,,AUTO
         4 003726   000170 236000 5                  LDQ     120
         4 003727   200151 756100                    STQ     @CHECKSUM_SIZE,,AUTO
         4 003730   200202 630500                    EPPR0   @CHECKSUM_LOCATION+16,,AUTO
         4 003731   200150 450500                    STP0    @CHECKSUM_START$,,AUTO
         4 003732   000171 236000 5                  LDQ     121
         4 003733   200147 756100                    STQ     RELOC_WORD,,AUTO
         4 003734   002117 701000 4                  TSX1    TOL$CHECK_CHECKSUM
         4 003735   000000 011000                    NOP     0

     1785    10569    2              (0,
     1786    10570    2              ADDR (OBJECT),
     1787    10571    2              23,
     1788    10572    2              OBJECT.CHECKSUM,
     1789    10573    2              VECTOR (ER#45));
     1790    10574    2      IF (OBJECT.BCD.CONTROL ~= '$' OR OBJECT.BCD.TYPE ~= 'OBJECT')

  10574  4 003736   040000 106400                    CMPC    fill='040'O
         4 003737   000265 000007 3                  ADSC9   TOL$OBJECT               cn=0,n=7
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:248  
         4 003740   000172 000001 5                  ADSC9   122                      cn=0,n=1
         4 003741   003746 601000 4                  TNZ     s:10575
         4 003742   040000 106400                    CMPC    fill='040'O
         4 003743   000266 600010 3                  ADSC9   TOL$OBJECT+1             cn=3,n=8
         4 003744   000001 000006 2                  ADSC9   FPTN_+1                  cn=0,n=6
         4 003745   003752 600000 4                  TZE     s:10576

     1791    10575    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#46));

  10575  4 003746   000173 630400 5                  EPPR0   123
         4 003747   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003750   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003751   000000 011000                    NOP     0

     1792    10576    2      IF (OBJECT.BCD.LOAD_TYPE ~= 'D' AND

  10576  4 003752   000272 236000 3                  LDQ     TOL$OBJECT+5
         4 003753   000777 376003                    ANQ     511,DU
         4 003754   000104 116003                    CMPQ    68,DU
         4 003755   003772 600000 4                  TZE     s:10580
         4 003756   000272 236000 3                  LDQ     TOL$OBJECT+5
         4 003757   000777 376003                    ANQ     511,DU
         4 003760   000122 116003                    CMPQ    82,DU
         4 003761   003772 600000 4                  TZE     s:10580
         4 003762   000272 236000 3                  LDQ     TOL$OBJECT+5
         4 003763   000777 376003                    ANQ     511,DU
         4 003764   000120 116003                    CMPQ    80,DU
         4 003765   003772 600000 4                  TZE     s:10580

     1793    10577    2              OBJECT.BCD.LOAD_TYPE ~= 'R' AND
     1794    10578    2              OBJECT.BCD.LOAD_TYPE ~= 'P')
     1795    10579    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#47));

  10579  4 003766   000200 630400 5                  EPPR0   128
         4 003767   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 003770   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 003771   000000 011000                    NOP     0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:249  

     1796    10580    2      IF (OBJECT.BCD.ASSEMBLER ~= 'M' AND

  10580  4 003772   000303 236000 3                  LDQ     TOL$OBJECT+14
         4 003773   000777 376007                    ANQ     511,DL
         4 003774   000115 116007                    CMPQ    77,DL
         4 003775   004012 600000 4                  TZE     s:10584
         4 003776   000303 236000 3                  LDQ     TOL$OBJECT+14
         4 003777   000777 376007                    ANQ     511,DL
         4 004000   000107 116007                    CMPQ    71,DL
         4 004001   004012 600000 4                  TZE     s:10584
         4 004002   000303 236000 3                  LDQ     TOL$OBJECT+14
         4 004003   000777 376007                    ANQ     511,DL
         4 004004   000114 116007                    CMPQ    76,DL
         4 004005   004012 600000 4                  TZE     s:10584

     1797    10581    2              OBJECT.BCD.ASSEMBLER ~= 'G' AND
     1798    10582    2              OBJECT.BCD.ASSEMBLER ~= 'L')
     1799    10583    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#48));

  10583  4 004006   000204 630400 5                  EPPR0   132
         4 004007   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004010   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004011   000000 011000                    NOP     0

     1800    10584    2      IF (OBJECT.BCD.SEQ ~= '0000')

  10584  4 004012   000310 236000 3                  LDQ     TOL$OBJECT+19
         4 004013   000003 116000 2                  CMPQ    FPTN_+3
         4 004014   004021 600000 4                  TZE     s:10586

     1801    10585    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#49));

  10585  4 004015   000210 630400 5                  EPPR0   136
         4 004016   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004017   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004020   000000 011000                    NOP     0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:250  

     1802    10586    2      NEXT_SEQ = 0;

  10586  4 004021   200121 450100                    STZ     NEXT_SEQ,,AUTO

     1803    10587    2      RETURN;

  10587  4 004022   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 004023   000001 702211                    TSX2  ! 1,X1

     1804    10588    2   BAD_OBJECT_READ:
     1805    10589    2      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)

  10589  4 004024   000000 470400 xsym  BAD_OBJECT_* LDP0    B$TCB$
         4 004025   000000 471500                    LDP1    0,,PR0
         4 004026   100102 236100                    LDQ     66,,PR1
         4 004027   377770 376007                    ANQ     131064,DL
         4 004030   001020 116007                    CMPQ    528,DL
         4 004031   004036 600000 4                  TZE     s:10591

     1806    10590    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#65));

  10590  4 004032   000214 630400 5                  EPPR0   140
         4 004033   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004034   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004035   000000 011000                    NOP     0

     1807    10591    2      ERROR_CODE.LOC = ERR#I;

  10591  4 004036   003463 220000 3                  LDX0    ERR#I
         4 004037   200010 470500                    LDP0    @ERROR_CODE,,AUTO
         4 004040   000000 740100                    STX0    0,,PR0

     1808    10592    2      ERROR_CODE.ERR = ERR#I;

  10592  4 004041   000000 440100                    SXL0    0,,PR0

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:251  
     1809    10593    2      ALTRETURN;

  10593  4 004042   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 004043   000000 702211                    TSX2  ! 0,X1

     1810    10594    2   END TOL$READ_OBJECT;
     1811    10595        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:252  
     1812    10596    1   TOL$READ_PATCHES: PROC;

  10596  4 004044   200142 741300       TOL$READ_PA* STX1  ! STATUS$+2,,AUTO

     1813    10597
     1814    10598    2      DCL PATCH_CARD_INDEX UBIN (36) ALIGNED;
     1815    10599    2      DCL HEX_CARD_INDEX REDEF PATCH_CARD_INDEX UBIN (36) ALIGNED;
     1816    10600
     1817    10601        /* Code */
     1818    10602
     1819    10603    2      IF (OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT = 2)

  10603  4 004045   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 004046   777777 376007                    ANQ     -1,DL
         4 004047   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 004050   000312 236000 3                  LDQ     TOL$OBJECT+21
         4 004051   000022 772000                    QRL     18
         4 004052   200164 136100                    SBLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 004053   000002 116007                    CMPQ    2,DL
         4 004054   004056 601000 4                  TNZ     s:10605

     1820    10604    2      THEN RETURN;

  10604  4 004055   000001 702211                    TSX2  ! 1,X1

     1821    10605    2      PATCH_KEY.DECK# = OBJECT.DECK#;

  10605  4 004056   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 004057   000011 772000                    QRL     9
         4 004060   000350 552030 3                  STBQ    TOL$PATCH_KEY,'30'O

     1822    10606    2      CALL TOL$READ_DKEND;

  10606  4 004061   005074 701000 4                  TSX1    TOL$READ_DKEND
         4 004062   000000 011000                    NOP     0

     1823    10607    2      DO PATCH_KEY.CARD# = 1 TO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:253  

  10607  4 004063   000000 101400                    MRL     fill='000'O
         4 004064   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         4 004065   000350 600002 3                  ADSC9   TOL$PATCH_KEY            cn=3,n=2
         4 004066   004130 710000 4                  TRA     s:10620+9

     1824    10608    3              OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 2;
     1825    10609    3         CALL TOL$READ_PATCH;

  10609  4 004067   005225 701000 4                  TSX1    TOL$READ_PATCH
         4 004070   000000 011000                    NOP     0

     1826    10610    3         IF (PATCH_CARD.TYPE = 'OCTAL')

  10610  4 004071   040000 106400                    CMPC    fill='040'O
         4 004072   000324 600010 3                  ADSC9   TOL$PATCH_CARD+1         cn=3,n=8
         4 004073   000004 000005 2                  ADSC9   FPTN_+4                  cn=0,n=5
         4 004074   004100 601000 4                  TNZ     s:10613

     1827    10611    3         THEN CALL TOL$BUILD_OCTAL_SEGMENT;

  10611  4 004075   004514 701000 4                  TSX1    TOL$BUILD_OCTAL_SEGMENT
         4 004076   000000 011000                    NOP     0
         4 004077   004117 710000 4                  TRA     s:10620

     1828    10612    4         ELSE DO;

     1829    10613    4                 IF (PATCH_CARD.TYPE = 'HEX')

  10613  4 004100   040000 106400                    CMPC    fill='040'O
         4 004101   000324 600010 3                  ADSC9   TOL$PATCH_CARD+1         cn=3,n=8
         4 004102   000006 000003 2                  ADSC9   FPTN_+6                  cn=0,n=3
         4 004103   004117 601000 4                  TNZ     s:10620

     1830    10614    5                 THEN DO;

     1831    10615    5                         IF (OBJECT.BCD.ASSEMBLER = 'M')
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:254  

  10615  4 004104   000303 236000 3                  LDQ     TOL$OBJECT+14
         4 004105   000777 376007                    ANQ     511,DL
         4 004106   000115 116007                    CMPQ    77,DL
         4 004107   004113 601000 4                  TNZ     s:10617

     1832    10616    5                         THEN CALL TOL$BUILD_HEX_SEGMENT;

  10616  4 004110   004150 701000 4                  TSX1    TOL$BUILD_HEX_SEGMENT
         4 004111   000000 011000                    NOP     0
         4 004112   004117 710000 4                  TRA     s:10620

     1833    10617    5                         ELSE CALL TOL$BAD_CARD (VECTOR(ER#71));

  10617  4 004113   000220 630400 5                  EPPR0   144
         4 004114   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004115   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004116   000000 011000                    NOP     0

     1834    10618    5                      END;

     1835    10619    4              END;

     1836    10620    3      END;

  10620  4 004117   000350 235000 3                  LDA     TOL$PATCH_KEY
         4 004120   000351 236000 3                  LDQ     TOL$PATCH_KEY+1
         4 004121   000033 773000                    LRL     27
         4 004122   777777 376007                    ANQ     -1,DL
         4 004123   000001 036007                    ADLQ    1,DL
         4 004124   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 004125   000000 101500                    MRL     fill='000'O
         4 004126   200164 000004                    ADSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,n=4
         4 004127   000350 600002 3                  ADSC9   TOL$PATCH_KEY            cn=3,n=2
         4 004130   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 004131   777777 376007                    ANQ     -1,DL
         4 004132   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:255  
         4 004133   000312 236000 3                  LDQ     TOL$OBJECT+21
         4 004134   000022 772000                    QRL     18
         4 004135   200165 136100                    SBLQ    @CHECKSUM_LOCATION+3,,AUTO
         4 004136   000002 136007                    SBLQ    2,DL
         4 004137   200166 756100                    STQ     @CHECKSUM_LOCATION+4,,AUTO
         4 004140   000350 235000 3                  LDA     TOL$PATCH_KEY
         4 004141   000351 236000 3                  LDQ     TOL$PATCH_KEY+1
         4 004142   000033 773000                    LRL     27
         4 004143   777777 376007                    ANQ     -1,DL
         4 004144   200166 116100                    CMPQ    @CHECKSUM_LOCATION+4,,AUTO
         4 004145   004067 604400 4                  TMOZ    s:10609

     1837    10621    2      RETURN;

  10621  4 004146   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 004147   000001 702211                    TSX2  ! 1,X1

     1838    10622        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:256  
     1839    10623    2   TOL$BUILD_HEX_SEGMENT: PROC;

  10623  4 004150   200144 741300       TOL$BUILD_H* STX1  ! STATUS_SAVE+1,,AUTO

     1840    10624
     1841    10625    3      DCL DECK_SPLIT UBIN (36) ALIGNED;
     1842    10626    3      DCL HEX_CARD_ADDRESS UBIN (36) ALIGNED;
     1843    10627
     1844    10628    3      DCL HEX_CARD_VALUE UBIN (16) UNAL;
     1845    10629    3      DCL HEX_CARD_HEX (0:3) REDEF HEX_CARD_VALUE UBIN (4) UNAL;
     1846    10630    3      DCL 1 HEX_VALUE_SPLIT REDEF HEX_CARD_VALUE UNAL,
     1847    10631    3            2 UPPER UBIN (8) UNAL,
     1848    10632    3            2 LOWER UBIN (8) UNAL;
     1849    10633    3      DCL 1 HEX_LOAD BASED (HEX_LOAD$) ALIGNED,
     1850    10634    3            2 TYPE UBIN (3) UNAL,
     1851    10635    3            2 SIZE UBIN (15) UNAL,
     1852    10636    3            2 ADDRESS UBIN (18) UNAL,
     1853    10637    3            2 UPPER UBIN (18) UNAL,
     1854    10638    3            2 LOWER UBIN (18) UNAL;
     1855    10639    3      DCL HEX_LOAD$ PTR ALIGNED;
     1856    10640    3      DCL 1 HEX_LOADP REDEF HEX_LOAD$ ALIGNED,
     1857    10641    3            2 ADDRESS UBIN (18) UNAL,
     1858    10642    3            2 * BIT (18) UNAL;
     1859    10643           %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:257  
     1860    10644        /* Code */
     1861    10645
     1862    10646    3      BINARY$ = ADDR (BUFFER (OBJECT.BINARY_COUNT - 1));

  10646  4 004151   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 004152   777777 376007                    ANQ     -1,DL
         4 004153   000032 402007                    MPY     26,DL
         4 004154   000022 736000                    QLS     18
         4 004155   000032 136003                    SBLQ    26,DU
         4 004156   000000 036000 xsym               ADLQ    TOL$BUFFER$
         4 004157   000226 756000 3                  STQ     TOL$BINARY$

     1863    10647    3      BINARYP.ADDRESS = BINARYP.ADDRESS + 4;

  10647  4 004160   000226 220000 3                  LDX0    TOL$BINARY$
         4 004161   000004 622010                    EAX2    4,X0
         4 004162   000226 742000 3                  STX2    TOL$BINARY$

     1864    10648    3      HEX_OFFSET = CS_OFFSET;

  10648  4 004163   200105 235100                    LDA     CS_OFFSET,,AUTO
         4 004164   200112 755100                    STA     HEX_OFFSET,,AUTO

     1865    10649    3      DECK_SPLIT = 0;

  10649  4 004165   200145 450100                    STZ     DECK_SPLIT,,AUTO

     1866    10650    3      IF (HEX_CARD.CR = 'R')

  10650  4 004166   000324 236000 3                  LDQ     TOL$PATCH_CARD+1
         4 004167   777000 376007                    ANQ     -512,DL
         4 004170   122000 116007                    CMPQ    41984,DL
         4 004171   004203 601000 4                  TNZ     s:10657

     1867    10651    4      THEN DO;

     1868    10652    4              HEX_OFFSET = RW_OFFSET;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:258  

  10652  4 004172   200125 236100                    LDQ     RW_OFFSET,,AUTO
         4 004173   200112 756100                    STQ     HEX_OFFSET,,AUTO

     1869    10653    4              DECK_SPLIT = CSRW_OFFSET;

  10653  4 004174   200104 235100                    LDA     CSRW_OFFSET,,AUTO
         4 004175   200145 755100                    STA     DECK_SPLIT,,AUTO

     1870    10654    4              IF (DECK_SPLIT = 0)

  10654  4 004176   004203 601000 4                  TNZ     s:10657

     1871    10655    4              THEN CALL TOL$BAD_CARD (VECTOR (ER#7));

  10655  4 004177   000224 630400 5                  EPPR0   148
         4 004200   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004201   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004202   000000 011000                    NOP     0

     1872    10656    4           END;

     1873    10657    3      CALL INDEX

  10657  4 004203   000000 124400                    SCM     mask='000'O
         4 004204   000323 000120 3                  ADSC9   TOL$PATCH_CARD           cn=0,n=80
         4 004205   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         4 004206   200143 000100                    ARG     PATCH_CARD_INDEX,,AUTO

     1874    10658    3              (HEX_CARD_INDEX,
     1875    10659    3              ' ',
     1876    10660    3              HEX_ASCII.DATA);
     1877    10661    3      IF (HEX_CARD_INDEX ~= 4)

  10661  4 004207   200143 235100                    LDA     PATCH_CARD_INDEX,,AUTO
         4 004210   000004 115007                    CMPA    4,DL
         4 004211   004216 600000 4                  TZE     s:10663
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:259  

     1878    10662    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#8));

  10662  4 004212   000230 630400 5                  EPPR0   152
         4 004213   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004214   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004215   000000 011000                    NOP     0

     1879    10663    3      K = 0;

  10663  4 004216   000223 450000 3                  STZ     TOL$K

     1880    10664    3      CALL TOL$CONVERT_HEX;

  10664  4 004217   004436 701000 4                  TSX1    TOL$CONVERT_HEX
         4 004220   000000 011000                    NOP     0

     1881    10665    3      HEX_CARD_ADDRESS = HEX_CARD_VALUE;

  10665  4 004221   200147 236100                    LDQ     HEX_CARD_VALUE,,AUTO
         4 004222   000024 772000                    QRL     20
         4 004223   200146 756100                    STQ     HEX_CARD_ADDRESS,,AUTO

     1882    10666    3      IF (HEX_CARD_ADDRESS < HEX_OFFSET)

  10666  4 004224   200112 116100                    CMPQ    HEX_OFFSET,,AUTO
         4 004225   004232 603000 4                  TRC     s:10668

     1883    10667    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#9));

  10667  4 004226   000234 630400 5                  EPPR0   156
         4 004227   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004230   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004231   000000 011000                    NOP     0

     1884    10668    3      HEX_CARD_ADDRESS = HEX_CARD_ADDRESS - HEX_OFFSET;

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:260  
  10668  4 004232   200146 236100                    LDQ     HEX_CARD_ADDRESS,,AUTO
         4 004233   200112 136100                    SBLQ    HEX_OFFSET,,AUTO
         4 004234   200146 756100                    STQ     HEX_CARD_ADDRESS,,AUTO

     1885    10669    3      CALL TOL$BUILD_HEX_LOAD;

  10669  4 004235   004243 701000 4                  TSX1    TOL$BUILD_HEX_LOAD
         4 004236   000000 011000                    NOP     0

     1886    10670    3      CALL TOL$BUILD_HEX_PATCH;

  10670  4 004237   004363 701000 4                  TSX1    TOL$BUILD_HEX_PATCH
         4 004240   000000 011000                    NOP     0

     1887    10671    3      RETURN;

  10671  4 004241   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 004242   000001 702211                    TSX2  ! 1,X1

     1888    10672        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:261  
     1889    10673    3   TOL$BUILD_HEX_LOAD: PROC;

  10673  4 004243   200152 741300       TOL$BUILD_H* STX1  ! @CHECKSUM_LOCATION,,AUTO

     1890    10674
     1891    10675    4      HEX_LOAD$ = ADDR (BUFFER);

  10675  4 004244   000000 236000 xsym               LDQ     TOL$BUFFER$
         4 004245   200150 756100                    STQ     HEX_LOAD$,,AUTO

     1892    10676    4      HEX_LOADP.ADDRESS = END_LOAD;

  10676  4 004246   200107 720100                    LXL0    END_LOAD,,AUTO
         4 004247   200150 740100                    STX0    HEX_LOAD$,,AUTO

     1893    10677    4      IF (MOD (HEX_CARD_ADDRESS, 2) = 1)

  10677  4 004250   200146 236100                    LDQ     HEX_CARD_ADDRESS,,AUTO
         4 004251   000001 376007                    ANQ     1,DL
         4 004252   000001 116007                    CMPQ    1,DL
         4 004253   004262 601000 4                  TNZ     s:10679

     1894    10678    4      THEN HEX_LOAD.TYPE = 1;

  10678  4 004254   200150 470500                    LDP0    HEX_LOAD$,,AUTO
         4 004255   000000 236100                    LDQ     0,,PR0
         4 004256   000067 376000 5                  ANQ     55
         4 004257   100000 276003                    ORQ     32768,DU
         4 004260   000000 756100                    STQ     0,,PR0
         4 004261   004267 710000 4                  TRA     s:10680

     1895    10679    4      ELSE HEX_LOAD.TYPE = 2;

  10679  4 004262   200150 470500                    LDP0    HEX_LOAD$,,AUTO
         4 004263   000000 236100                    LDQ     0,,PR0
         4 004264   000067 376000 5                  ANQ     55
         4 004265   200000 276003                    ORQ     65536,DU
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:262  
         4 004266   000000 756100                    STQ     0,,PR0

     1896    10680    4      HEX_LOAD.SIZE = 1;

  10680  4 004267   000000 236100                    LDQ     0,,PR0
         4 004270   000235 376000 5                  ANQ     157
         4 004271   000001 276003                    ORQ     1,DU
         4 004272   000000 756100                    STQ     0,,PR0

     1897    10681    4      HEX_LOAD.ADDRESS = HEX_CARD_ADDRESS / 2 + DECK_SPLIT;

  10681  4 004273   200146 236100                    LDQ     HEX_CARD_ADDRESS,,AUTO
         4 004274   000001 772000                    QRL     1
         4 004275   200145 036100                    ADLQ    DECK_SPLIT,,AUTO
         4 004276   000000 621006                    EAX1    0,QL
         4 004277   000000 441100                    SXL1    0,,PR0

     1898    10682    4      IF (CSRW_OFFSET ~= 0)

  10682  4 004300   200104 235100                    LDA     CSRW_OFFSET,,AUTO
         4 004301   004344 600000 4                  TZE     s:10692

     1899    10683    5      THEN DO;

     1900    10684    5              IF (HEX_LOAD.ADDRESS > BINARY.LOAD.ADDRESS - 2 AND

  10684  4 004302   000000 236100                    LDQ     0,,PR0
         4 004303   777777 376007                    ANQ     -1,DL
         4 004304   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 004305   000226 471400 3                  LDP1    TOL$BINARY$
         4 004306   100000 236100                    LDQ     0,,PR1
         4 004307   777777 376007                    ANQ     -1,DL
         4 004310   000002 136007                    SBLQ    2,DL
         4 004311   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 004312   004323 605000 4                  TPL     s:10687
         4 004313   000324 236000 3                  LDQ     TOL$PATCH_CARD+1
         4 004314   777000 376007                    ANQ     -512,DL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:263  
         4 004315   122000 116007                    CMPQ    41984,DL
         4 004316   004323 601000 4                  TNZ     s:10687

     1901    10685    5                      HEX_CARD.CR = 'R')
     1902    10686    5              THEN CALL TOL$BAD_CARD (VECTOR (ER#3));

  10686  4 004317   000240 630400 5                  EPPR0   160
         4 004320   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004321   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004322   000000 011000                    NOP     0

     1903    10687    5              IF (HEX_LOAD.ADDRESS > CSRW_OFFSET - 2 AND

  10687  4 004323   200150 470500                    LDP0    HEX_LOAD$,,AUTO
         4 004324   000000 236100                    LDQ     0,,PR0
         4 004325   777777 376007                    ANQ     -1,DL
         4 004326   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 004327   200104 236100                    LDQ     CSRW_OFFSET,,AUTO
         4 004330   000002 136007                    SBLQ    2,DL
         4 004331   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 004332   004361 605000 4                  TPL     s:10695
         4 004333   000324 236000 3                  LDQ     TOL$PATCH_CARD+1
         4 004334   777000 376007                    ANQ     -512,DL
         4 004335   103000 116007                    CMPQ    34304,DL
         4 004336   004361 601000 4                  TNZ     s:10695

     1904    10688    5                      HEX_CARD.CR = 'C')
     1905    10689    5              THEN CALL TOL$BAD_CARD (VECTOR (ER#4));

  10689  4 004337   000244 630400 5                  EPPR0   164
         4 004340   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004341   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004342   000000 011000                    NOP     0

     1906    10690    5           END;

  10690  4 004343   004361 710000 4                  TRA     s:10695
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:264  

     1907    10691    5      ELSE DO;

     1908    10692    5              IF (HEX_LOAD.ADDRESS > BINARY.LOAD.ADDRESS - 2)

  10692  4 004344   000000 236100                    LDQ     0,,PR0
         4 004345   777777 376007                    ANQ     -1,DL
         4 004346   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 004347   000226 471400 3                  LDP1    TOL$BINARY$
         4 004350   100000 236100                    LDQ     0,,PR1
         4 004351   777777 376007                    ANQ     -1,DL
         4 004352   000002 136007                    SBLQ    2,DL
         4 004353   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 004354   004361 605000 4                  TPL     s:10695

     1909    10693    5              THEN CALL TOL$BAD_CARD (VECTOR (ER#4));

  10693  4 004355   000244 630400 5                  EPPR0   164
         4 004356   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004357   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004360   000000 011000                    NOP     0

     1910    10694    5           END;

     1911    10695    4      RETURN;

  10695  4 004361   200152 221300                    LDX1  ! @CHECKSUM_LOCATION,,AUTO
         4 004362   000001 702211                    TSX2  ! 1,X1

     1912    10696
     1913    10697    4   END TOL$BUILD_HEX_LOAD;
     1914    10698        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:265  
     1915    10699    3   TOL$BUILD_HEX_PATCH: PROC;

  10699  4 004363   200152 741300       TOL$BUILD_H* STX1  ! @CHECKSUM_LOCATION,,AUTO

     1916    10700
     1917    10701    4      K = 15;

  10701  4 004364   000017 235007                    LDA     15,DL
         4 004365   000223 755000 3                  STA     TOL$K

     1918    10702    4      CALL TOL$CONVERT_HEX;

  10702  4 004366   004436 701000 4                  TSX1    TOL$CONVERT_HEX
         4 004367   000000 011000                    NOP     0

     1919    10703    4      IF (HEX_LOAD.TYPE = 2)

  10703  4 004370   200150 470500                    LDP0    HEX_LOAD$,,AUTO
         4 004371   000000 236100                    LDQ     0,,PR0
         4 004372   700000 376003                    ANQ     -32768,DU
         4 004373   200000 116003                    CMPQ    65536,DU
         4 004374   004400 601000 4                  TNZ     s:10705

     1920    10704    4      THEN HEX_LOAD.UPPER = HEX_CARD_SPLIT;

  10704  4 004375   200136 220100                    LDX0    HEX_CARD_SPLIT,,AUTO
         4 004376   000001 740100                    STX0    1,,PR0
         4 004377   004402 710000 4                  TRA     s:10706

     1921    10705    4      ELSE HEX_LOAD.LOWER = HEX_CARD_SPLIT;

  10705  4 004400   200136 220100                    LDX0    HEX_CARD_SPLIT,,AUTO
         4 004401   000001 440100                    SXL0    1,,PR0

     1922    10706    4      IF (HEX_ASCII.CHARS (19) ~= ' ')

  10706  4 004402   000327 236000 3                  LDQ     TOL$PATCH_CARD+4
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:266  
         4 004403   000777 376007                    ANQ     511,DL
         4 004404   000040 116007                    CMPQ    32,DL
         4 004405   004431 600000 4                  TZE     s:10715

     1923    10707    5      THEN DO;

     1924    10708    5              IF (HEX_LOAD.TYPE = 1)

  10708  4 004406   000000 236100                    LDQ     0,,PR0
         4 004407   700000 376003                    ANQ     -32768,DU
         4 004410   100000 116003                    CMPQ    32768,DU
         4 004411   004416 601000 4                  TNZ     s:10710

     1925    10709    5              THEN CALL TOL$BAD_CARD (VECTOR (ER#6));

  10709  4 004412   000250 630400 5                  EPPR0   168
         4 004413   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004414   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004415   000000 011000                    NOP     0

     1926    10710    5              K = 19;

  10710  4 004416   000023 235007                    LDA     19,DL
         4 004417   000223 755000 3                  STA     TOL$K

     1927    10711    5              CALL TOL$CONVERT_HEX;

  10711  4 004420   004436 701000 4                  TSX1    TOL$CONVERT_HEX
         4 004421   000000 011000                    NOP     0

     1928    10712    5              HEX_LOAD.TYPE = 3;

  10712  4 004422   200150 470500                    LDP0    HEX_LOAD$,,AUTO
         4 004423   000000 236100                    LDQ     0,,PR0
         4 004424   000067 376000 5                  ANQ     55
         4 004425   300000 276003                    ORQ     98304,DU
         4 004426   000000 756100                    STQ     0,,PR0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:267  

     1929    10713    5              HEX_LOAD.LOWER = HEX_CARD_SPLIT;

  10713  4 004427   200136 220100                    LDX0    HEX_CARD_SPLIT,,AUTO
         4 004430   000001 440100                    SXL0    1,,PR0

     1930    10714    5           END;

     1931    10715    4      END_LOAD = END_LOAD + 2;

  10715  4 004431   200107 235100                    LDA     END_LOAD,,AUTO
         4 004432   000002 035007                    ADLA    2,DL
         4 004433   200107 755100                    STA     END_LOAD,,AUTO

     1932    10716    4      RETURN;

  10716  4 004434   200152 221300                    LDX1  ! @CHECKSUM_LOCATION,,AUTO
         4 004435   000001 702211                    TSX2  ! 1,X1

     1933    10717
     1934    10718    4   END TOL$BUILD_HEX_PATCH;
     1935    10719        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:268  
     1936    10720    3   TOL$CONVERT_HEX: PROC;

  10720  4 004436   200154 741300       TOL$CONVERT* STX1  ! CHECKSUM_CHECK,,AUTO

     1937    10721
     1938    10722    4      L = K + 4;

  10722  4 004437   000223 235000 3                  LDA     TOL$K
         4 004440   000004 035007                    ADLA    4,DL
         4 004441   200114 755100                    STA     L,,AUTO

     1939    10723    4      HEX_CARD_VALUE = 0;

  10723  4 004442   000251 236000 5                  LDQ     169
         4 004443   200147 356100                    ANSQ    HEX_CARD_VALUE,,AUTO

     1940    10724    5      DO K = K TO L;

  10724  4 004444   004475 710000 4                  TRA     s:10732+3

     1941    10725    5         CALL INDEX

  10725  4 004445   000223 235000 3                  LDA     TOL$K
         4 004446   000005 124400                    SCM     mask='000'O
         4 004447   000413 000021 3                  ADSC9   NUMERICS                 cn=0,n=17
         4 004450   000323 000001 3                  ADSC9   TOL$PATCH_CARD,A         cn=0,n=1
         4 004451   200122 000100                    ARG     OCTAL_INDEX,,AUTO

     1942    10726    5                 (HEX_INDEX,
     1943    10727    5                 HEX_ASCII.CHARS (K),
     1944    10728    5                 NUMERICS);
     1945    10729    5         IF (HEX_INDEX > 15)

  10729  4 004452   200122 236100                    LDQ     OCTAL_INDEX,,AUTO
         4 004453   000020 116007                    CMPQ    16,DL
         4 004454   004462 602000 4                  TNC     s:10731

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:269  
     1946    10730    5         THEN CALL TOL$BAD_CARD (VECTOR (ER#17));

  10730  4 004455   000254 630400 5                  EPPR0   172
         4 004456   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004457   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004460   000000 011000                    NOP     0
         4 004461   004472 710000 4                  TRA     s:10732

     1947    10731    5         ELSE HEX_CARD_HEX (4 + K - L - 1) = HEX_INDEX;

  10731  4 004462   000223 236000 3                  LDQ     TOL$K
         4 004463   200114 136100                    SBLQ    L,,AUTO
         4 004464   000002 736000                    QLS     2
         4 004465   004467 605000 4                  TPL     s:10731+5
         4 004466   000044 036003                    ADLQ    36,DU
         4 004467   003106 061500                    CSR     bolr='003'O
         4 004470   200122 000044                    BDSC    OCTAL_INDEX,,AUTO        by=0,bit=0,n=36
         4 004471   200147 230004                    BDSC    HEX_CARD_VALUE,Q,AUTO    by=1,bit=3,n=4

     1948    10732    5      END;

  10732  4 004472   000223 235000 3                  LDA     TOL$K
         4 004473   000001 035007                    ADLA    1,DL
         4 004474   000223 755000 3                  STA     TOL$K
         4 004475   200114 236100                    LDQ     L,,AUTO
         4 004476   000223 116000 3                  CMPQ    TOL$K
         4 004477   004445 603000 4                  TRC     s:10725

     1949    10733    4      HEX_SPLIT.UPPER = HEX_VALUE_SPLIT.UPPER;

  10733  4 004500   200147 236100                    LDQ     HEX_CARD_VALUE,,AUTO
         4 004501   000001 772000                    QRL     1
         4 004502   200136 676100                    ERQ     HEX_CARD_SPLIT,,AUTO
         4 004503   377000 376003                    ANQ     130560,DU
         4 004504   200136 656100                    ERSQ    HEX_CARD_SPLIT,,AUTO

     1950    10734    4      HEX_SPLIT.LOWER = HEX_VALUE_SPLIT.LOWER;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:270  

  10734  4 004505   200147 236100                    LDQ     HEX_CARD_VALUE,,AUTO
         4 004506   000002 772000                    QRL     2
         4 004507   200136 676100                    ERQ     HEX_CARD_SPLIT,,AUTO
         4 004510   000377 376003                    ANQ     255,DU
         4 004511   200136 656100                    ERSQ    HEX_CARD_SPLIT,,AUTO

     1951    10735    4      RETURN;

  10735  4 004512   200154 221300                    LDX1  ! CHECKSUM_CHECK,,AUTO
         4 004513   000001 702211                    TSX2  ! 1,X1

     1952    10736
     1953    10737    4   END TOL$CONVERT_HEX;
     1954    10738    3   END TOL$BUILD_HEX_SEGMENT;
     1955    10739        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:271  
     1956    10740    2   TOL$BUILD_OCTAL_SEGMENT: PROC;

  10740  4 004514   200144 741300       TOL$BUILD_O* STX1  ! STATUS_SAVE+1,,AUTO

     1957    10741
     1958    10742    3      DCL PATCH_CARD_OCTAL (0:11) UBIN (3) UNAL;
     1959    10743    3      DCL PATCH_CARD_VALUE REDEF PATCH_CARD_OCTAL UBIN (36) ALIGNED;
     1960    10744    3      DCL PATCH_CARD_START UBIN (36) ALIGNED;
     1961    10745
     1962    10746    3      DCL 1 PATCH_LOAD BASED (PATCH_LOAD$) ALIGNED,
     1963    10747    3            2 TYPE UBIN (3) UNAL,
     1964    10748    3            2 SIZE UBIN (15) UNAL,
     1965    10749    3            2 ADDRESS UBIN (18) UNAL,
     1966    10750    3            2 DATA (0:27) UBIN (36) ALIGNED,
     1967    10751    3            2 SPLIT (0:27) REDEF DATA UNAL,
     1968    10752    3              3 UPPER UBIN (18) UNAL,
     1969    10753    3              3 LOWER UBIN (18) UNAL;
     1970    10754    3      DCL PATCH_LOAD$ PTR ALIGNED;
     1971    10755    3      DCL 1 PATCH_LOADP REDEF PATCH_LOAD$ ALIGNED,
     1972    10756    3            2 ADDRESS UBIN (18) UNAL,
     1973    10757    3            2 * BIT (18) UNAL;
     1974    10758        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:272  
     1975    10759        /* Code */
     1976    10760
     1977    10761    3      CALL INDEX

  10761  4 004515   000000 124400                    SCM     mask='000'O
         4 004516   000323 000120 3                  ADSC9   TOL$PATCH_CARD           cn=0,n=80
         4 004517   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         4 004520   200143 000100                    ARG     PATCH_CARD_INDEX,,AUTO

     1978    10762    3              (PATCH_CARD_INDEX,
     1979    10763    3              ' ',
     1980    10764    3              PATCH_ASCII.DATA);
     1981    10765    3      IF (PATCH_CARD_INDEX = 0 OR PATCH_CARD_INDEX > 6)

  10765  4 004521   200143 235100                    LDA     PATCH_CARD_INDEX,,AUTO
         4 004522   004525 600000 4                  TZE     s:10766
         4 004523   000007 115007                    CMPA    7,DL
         4 004524   004531 602000 4                  TNC     s:10767

     1982    10766    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#10));

  10766  4 004525   000260 630400 5                  EPPR0   176
         4 004526   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004527   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004530   000000 011000                    NOP     0

     1983    10767    3      K = 0;

  10767  4 004531   000223 450000 3                  STZ     TOL$K

     1984    10768    3      PATCH_CARD_VALUE = 0;

  10768  4 004532   200145 450100                    STZ     PATCH_CARD_OCTAL,,AUTO

     1985    10769    3      CALL TOL$CONVERT_OCTAL;

  10769  4 004533   005021 701000 4                  TSX1    TOL$CONVERT_OCTAL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:273  
         4 004534   000000 011000                    NOP     0

     1986    10770    3      PATCH_LOAD$ = ADDR (BUFFER);

  10770  4 004535   000000 236000 xsym               LDQ     TOL$BUFFER$
         4 004536   200147 756100                    STQ     PATCH_LOAD$,,AUTO

     1987    10771    3      PATCH_LOADP.ADDRESS = END_LOAD;

  10771  4 004537   200107 720100                    LXL0    END_LOAD,,AUTO
         4 004540   200147 740100                    STX0    PATCH_LOAD$,,AUTO

     1988    10772    3      PATCH_LOAD.ADDRESS = PATCH_CARD_VALUE + LOAD_RELOC;

  10772  4 004541   200145 236100                    LDQ     PATCH_CARD_OCTAL,,AUTO
         4 004542   200117 036100                    ADLQ    LOAD_RELOC,,AUTO
         4 004543   000000 621006                    EAX1    0,QL
         4 004544   200147 470500                    LDP0    PATCH_LOAD$,,AUTO
         4 004545   000000 441100                    SXL1    0,,PR0

     1989    10773    3      IF (OBJECT.BCD.ASSEMBLER = 'M' AND

  10773  4 004546   000303 236000 3                  LDQ     TOL$OBJECT+14
         4 004547   000777 376007                    ANQ     511,DL
         4 004550   000115 116007                    CMPQ    77,DL
         4 004551   004566 601000 4                  TNZ     s:10776
         4 004552   000226 471400 3                  LDP1    TOL$BINARY$
         4 004553   100000 236100                    LDQ     0,,PR1
         4 004554   777777 376007                    ANQ     -1,DL
         4 004555   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 004556   000000 236100                    LDQ     0,,PR0
         4 004557   777777 376007                    ANQ     -1,DL
         4 004560   200164 116100                    CMPQ    @CHECKSUM_LOCATION+2,,AUTO
         4 004561   004566 605000 4                  TPL     s:10776

     1990    10774    3              PATCH_LOAD.ADDRESS < BINARY.LOAD.ADDRESS)
     1991    10775    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#73));
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:274  

  10775  4 004562   000264 630400 5                  EPPR0   180
         4 004563   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004564   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004565   000000 011000                    NOP     0

     1992    10776    3      PATCH_LOAD.SIZE = 0;

  10776  4 004566   200147 470500                    LDP0    PATCH_LOAD$,,AUTO
         4 004567   000235 236000 5                  LDQ     157
         4 004570   000000 356100                    ANSQ    0,,PR0

     1993    10777    3      PATCH_LOAD.TYPE = 3;

  10777  4 004571   000000 236100                    LDQ     0,,PR0
         4 004572   000067 376000 5                  ANQ     55
         4 004573   300000 276003                    ORQ     98304,DU
         4 004574   000000 756100                    STQ     0,,PR0

     1994    10778    3      PATCH_CARD_START = 15;

  10778  4 004575   000017 235007                    LDA     15,DL
         4 004576   200146 755100                    STA     PATCH_CARD_START,,AUTO

     1995    10779    4      DO WHILE (PATCH_CARD_START < 72);

  10779  4 004577   000110 115007                    CMPA    72,DL
         4 004600   004606 603000 4                  TRC     s:10782

     1996    10780    4         CALL TOL$BUILD_OCTAL_PATCH;

  10780  4 004601   004617 701000 4                  TSX1    TOL$BUILD_OCTAL_PATCH
         4 004602   000000 011000                    NOP     0

     1997    10781    4      END;

  10781  4 004603   200146 235100                    LDA     PATCH_CARD_START,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:275  
         4 004604   000110 115007                    CMPA    72,DL
         4 004605   004601 602000 4                  TNC     s:10780

     1998    10782    3      END_LOAD = END_LOAD + PATCH_LOAD.SIZE + 1;

  10782  4 004606   200147 470500                    LDP0    PATCH_LOAD$,,AUTO
         4 004607   000000 236100                    LDQ     0,,PR0
         4 004610   000022 772000                    QRL     18
         4 004611   077777 376007                    ANQ     32767,DL
         4 004612   200107 036100                    ADLQ    END_LOAD,,AUTO
         4 004613   000001 036007                    ADLQ    1,DL
         4 004614   200107 756100                    STQ     END_LOAD,,AUTO

     1999    10783    3      RETURN;

  10783  4 004615   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 004616   000001 702211                    TSX2  ! 1,X1

     2000    10784        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:276  
     2001    10785    3   TOL$BUILD_OCTAL_PATCH: PROC;

  10785  4 004617   200150 741300       TOL$BUILD_O* STX1  ! HEX_LOAD$,,AUTO

     2002    10786    4      CALL INDEX

  10786  4 004620   200146 720100                    LXL0    PATCH_CARD_START,,AUTO
         4 004621   777657 620010                    EAX0    -81,X0
         4 004622   777777 660003                    ERX0    -1,DU
         4 004623   200146 236100                    LDQ     PATCH_CARD_START,,AUTO
         4 004624   200146 235100                    LDA     PATCH_CARD_START,,AUTO
         4 004625   000000 124445                    SCM     mask='000'O
         4 004626   000323 000010 3                  ADSC9   TOL$PATCH_CARD,A         cn=0,n=*X0
         4 004627   000265 000001 5                  ADSC9   181                      cn=0,n=1
         4 004630   200143 000100                    ARG     PATCH_CARD_INDEX,,AUTO
         4 004631   200143 056100                    ASQ     PATCH_CARD_INDEX,,AUTO

     2003    10787    4              (PATCH_CARD_INDEX,
     2004    10788    4              ',',
     2005    10789    4              PATCH_ASCII.DATA,
     2006    10790    4              PATCH_CARD_START);
     2007    10791    4      IF (PATCH_CARD_INDEX > 71)

  10791  4 004632   200143 236100                    LDQ     PATCH_CARD_INDEX,,AUTO
         4 004633   000110 116007                    CMPQ    72,DL
         4 004634   004643 602000 4                  TNC     s:10797

     2008    10792    4      THEN CALL INDEX

  10792  4 004635   200146 236100                    LDQ     PATCH_CARD_START,,AUTO
         4 004636   000000 124445                    SCM     mask='000'O
         4 004637   000323 000010 3                  ADSC9   TOL$PATCH_CARD,A         cn=0,n=*X0
         4 004640   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         4 004641   200143 000100                    ARG     PATCH_CARD_INDEX,,AUTO
         4 004642   200143 056100                    ASQ     PATCH_CARD_INDEX,,AUTO

     2009    10793    4                 (PATCH_CARD_INDEX,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:277  
     2010    10794    4                 ' ',
     2011    10795    4                 PATCH_ASCII.DATA,
     2012    10796    4                 PATCH_CARD_START);
     2013    10797    4      K = PATCH_CARD_START;

  10797  4 004643   000223 755000 3                  STA     TOL$K

     2014    10798    4      RELOC = '0'B;

  10798  4 004644   000000 100400                    MLR     fill='000'O
         4 004645   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         4 004646   000352 000160 3                  ADSC9   TOL$RELOC                cn=0,n=112

     2015    10799    4      PATCH_CARD_VALUE = 0;

  10799  4 004647   200145 450100                    STZ     PATCH_CARD_OCTAL,,AUTO

     2016    10800    4      CALL TOL$ADJUST_PATCH_INDEXS;

  10800  4 004650   004743 701000 4                  TSX1    TOL$ADJUST_PATCH_INDEXS
         4 004651   000000 011000                    NOP     0

     2017    10801    4      IF (PATCH_CARD_START > 71)

  10801  4 004652   200146 235100                    LDA     PATCH_CARD_START,,AUTO
         4 004653   000110 115007                    CMPA    72,DL
         4 004654   004657 602000 4                  TNC     s:10803

     2018    10802    4      THEN RETURN;

  10802  4 004655   200150 221300                    LDX1  ! HEX_LOAD$,,AUTO
         4 004656   000001 702211                    TSX2  ! 1,X1

     2019    10803    4      CALL TOL$CONVERT_OCTAL;

  10803  4 004657   005021 701000 4                  TSX1    TOL$CONVERT_OCTAL
         4 004660   000000 011000                    NOP     0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:278  

     2020    10804    4      PATCH_LOAD.DATA (PATCH_LOAD.SIZE) = PATCH_CARD_VALUE;

  10804  4 004661   200147 470500                    LDP0    PATCH_LOAD$,,AUTO
         4 004662   000000 220100                    LDX0    0,,PR0
         4 004663   077777 360003                    ANX0    32767,DU
         4 004664   200145 235100                    LDA     PATCH_CARD_OCTAL,,AUTO
         4 004665   000001 755110                    STA     1,X0,PR0

     2021    10805    4      PATCH_LOAD.SIZE = PATCH_LOAD.SIZE + 1;

  10805  4 004666   000000 236100                    LDQ     0,,PR0
         4 004667   000022 772000                    QRL     18
         4 004670   077777 376007                    ANQ     32767,DL
         4 004671   000001 036007                    ADLQ    1,DL
         4 004672   000022 736000                    QLS     18
         4 004673   000000 676100                    ERQ     0,,PR0
         4 004674   077777 376003                    ANQ     32767,DU
         4 004675   000000 656100                    ERSQ    0,,PR0

     2022    10806    4      IF (RELOC ~= '0'B)

  10806  4 004676   000000 106400                    CMPC    fill='000'O
         4 004677   000352 000160 3                  ADSC9   TOL$RELOC                cn=0,n=112
         4 004700   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         4 004701   004730 600000 4                  TZE     s:10816

     2023    10807    5      THEN DO;

     2024    10808    5              SPLIT_SPLIT.UPPER = 0;

  10808  4 004702   000000 220003                    LDX0    0,DU
         4 004703   200137 740100                    STX0    SPLIT_DATA,,AUTO

     2025    10809    5              SPLIT_SPLIT.LOWER = PATCH_LOAD.SPLIT.UPPER (PATCH_LOAD.SIZE - 1);

  10809  4 004704   000000 221100                    LDX1    0,,PR0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:279  
         4 004705   077777 361003                    ANX1    32767,DU
         4 004706   000000 222111                    LDX2    0,X1,PR0
         4 004707   200137 442100                    SXL2    SPLIT_DATA,,AUTO

     2026    10810    5              SPLIT_DATA = SPLIT_DATA + RELOC.UPPER (0);

  10810  4 004710   000352 236000 3                  LDQ     TOL$RELOC
         4 004711   000022 772000                    QRL     18
         4 004712   200137 036100                    ADLQ    SPLIT_DATA,,AUTO
         4 004713   200137 756100                    STQ     SPLIT_DATA,,AUTO

     2027    10811    5              PATCH_LOAD.SPLIT.UPPER (PATCH_LOAD.SIZE - 1) = SPLIT_SPLIT.LOWER;

  10811  4 004714   200137 723100                    LXL3    SPLIT_DATA,,AUTO
         4 004715   000000 743111                    STX3    0,X1,PR0

     2028    10812    5              SPLIT_SPLIT.LOWER = PATCH_LOAD.SPLIT.LOWER (PATCH_LOAD.SIZE - 1);

  10812  4 004716   000000 221100                    LDX1    0,,PR0
         4 004717   077777 361003                    ANX1    32767,DU
         4 004720   000000 722111                    LXL2    0,X1,PR0
         4 004721   200137 442100                    SXL2    SPLIT_DATA,,AUTO

     2029    10813    5              SPLIT_DATA = SPLIT_DATA + RELOC.LOWER (0);

  10813  4 004722   000352 236000 3                  LDQ     TOL$RELOC
         4 004723   777777 376007                    ANQ     -1,DL
         4 004724   200137 036100                    ADLQ    SPLIT_DATA,,AUTO
         4 004725   200137 756100                    STQ     SPLIT_DATA,,AUTO

     2030    10814    5              PATCH_LOAD.SPLIT.LOWER (PATCH_LOAD.SIZE - 1) = SPLIT_SPLIT.LOWER;

  10814  4 004726   200137 723100                    LXL3    SPLIT_DATA,,AUTO
         4 004727   000000 443111                    SXL3    0,X1,PR0

     2031    10815    5           END;

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:280  
     2032    10816    4      IF (PATCH_ASCII.CHARS (PATCH_CARD_INDEX) = 'R')

  10816  4 004730   200143 236100                    LDQ     PATCH_CARD_INDEX,,AUTO
         4 004731   040000 106406                    CMPC    fill='040'O
         4 004732   000323 000001 3                  ADSC9   TOL$PATCH_CARD,Q         cn=0,n=1
         4 004733   000266 000001 5                  ADSC9   182                      cn=0,n=1
         4 004734   004737 601000 4                  TNZ     s:10818

     2033    10817    4      THEN PATCH_CARD_INDEX = PATCH_CARD_INDEX + 1;

  10817  4 004735   000001 036007                    ADLQ    1,DL
         4 004736   200143 756100                    STQ     PATCH_CARD_INDEX,,AUTO

     2034    10818    4      PATCH_CARD_START = PATCH_CARD_INDEX + 1;

  10818  4 004737   000001 036007                    ADLQ    1,DL
         4 004740   200146 756100                    STQ     PATCH_CARD_START,,AUTO

     2035    10819    4      RETURN;

  10819  4 004741   200150 221300                    LDX1  ! HEX_LOAD$,,AUTO
         4 004742   000001 702211                    TSX2  ! 1,X1

     2036    10820        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:281  
     2037    10821    4   TOL$ADJUST_PATCH_INDEXS: PROC;

  10821  4 004743   200152 741300       TOL$ADJUST_* STX1  ! @CHECKSUM_LOCATION,,AUTO

     2038    10822
     2039    10823    5      IF (PATCH_CARD_INDEX = PATCH_CARD_START)

  10823  4 004744   200143 236100                    LDQ     PATCH_CARD_INDEX,,AUTO
         4 004745   200146 116100                    CMPQ    PATCH_CARD_START,,AUTO
         4 004746   004766 601000 4                  TNZ     s:10831

     2040    10824    6      THEN DO;

     2041    10825    6              IF (PATCH_ASCII.CHARS (PATCH_CARD_START - 1) = ',' OR

  10825  4 004747   200146 235100                    LDA     PATCH_CARD_START,,AUTO
         4 004750   040000 106405                    CMPC    fill='040'O
         4 004751   000322 600001 3                  ADSC9   TOL$OBJECT_KEY+5,A       cn=3,n=1
         4 004752   000265 000001 5                  ADSC9   181                      cn=0,n=1
         4 004753   004756 600000 4                  TZE     s:10827
         4 004754   000017 115007                    CMPA    15,DL
         4 004755   004762 601000 4                  TNZ     s:10828

     2042    10826    6                      PATCH_CARD_START = 15)
     2043    10827    6              THEN CALL TOL$BAD_CARD (VECTOR (ER#1));

  10827  4 004756   000267 630400 5                  EPPR0   183
         4 004757   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 004760   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 004761   000000 011000                    NOP     0

     2044    10828    6              PATCH_CARD_START = 72;

  10828  4 004762   000110 235007                    LDA     72,DL
         4 004763   200146 755100                    STA     PATCH_CARD_START,,AUTO

     2045    10829    6              RETURN;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:282  

  10829  4 004764   200152 221300                    LDX1  ! @CHECKSUM_LOCATION,,AUTO
         4 004765   000001 702211                    TSX2  ! 1,X1

     2046    10830    6           END;
     2047    10831    5      IF (PATCH_ASCII.CHARS (PATCH_CARD_START) = 'R')

  10831  4 004766   200146 235100                    LDA     PATCH_CARD_START,,AUTO
         4 004767   040000 106405                    CMPC    fill='040'O
         4 004770   000323 000001 3                  ADSC9   TOL$PATCH_CARD,A         cn=0,n=1
         4 004771   000266 000001 5                  ADSC9   182                      cn=0,n=1
         4 004772   005000 601000 4                  TNZ     s:10836

     2048    10832    6      THEN DO;

     2049    10833    6              K = K + 1;

  10833  4 004773   000223 235000 3                  LDA     TOL$K
         4 004774   000001 035007                    ADLA    1,DL
         4 004775   000223 755000 3                  STA     TOL$K

     2050    10834    6              RELOC.UPPER (0) = RELOCATION;

  10834  4 004776   200123 720100                    LXL0    RELOCATION,,AUTO
         4 004777   000352 740000 3                  STX0    TOL$RELOC

     2051    10835    6           END;

     2052    10836    5      IF (PATCH_ASCII.CHARS (PATCH_CARD_INDEX - 1) = 'R')

  10836  4 005000   040000 106406                    CMPC    fill='040'O
         4 005001   000322 600001 3                  ADSC9   TOL$OBJECT_KEY+5,Q       cn=3,n=1
         4 005002   000266 000001 5                  ADSC9   182                      cn=0,n=1
         4 005003   005010 601000 4                  TNZ     s:10841

     2053    10837    6      THEN DO;

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:283  
     2054    10838    6              PATCH_CARD_INDEX = PATCH_CARD_INDEX - 1;

  10838  4 005004   000001 136007                    SBLQ    1,DL
         4 005005   200143 756100                    STQ     PATCH_CARD_INDEX,,AUTO

     2055    10839    6              RELOC.LOWER (0) = RELOCATION;

  10839  4 005006   200123 720100                    LXL0    RELOCATION,,AUTO
         4 005007   000352 440000 3                  SXL0    TOL$RELOC

     2056    10840    6           END;

     2057    10841    5      IF (PATCH_CARD_INDEX - 1 < K)

  10841  4 005010   000223 116000 3                  CMPQ    TOL$K
         4 005011   005013 600000 4                  TZE     s:10842
         4 005012   005017 603000 4                  TRC     s:10843

     2058    10842    5      THEN CALL TOL$BAD_CARD (VECTOR (ER#2));

  10842  4 005013   000274 630400 5                  EPPR0   188
         4 005014   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005015   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005016   000000 011000                    NOP     0

     2059    10843    5      RETURN;

  10843  4 005017   200152 221300                    LDX1  ! @CHECKSUM_LOCATION,,AUTO
         4 005020   000001 702211                    TSX2  ! 1,X1

     2060    10844
     2061    10845    5   END TOL$ADJUST_PATCH_INDEXS;
     2062    10846    4   END TOL$BUILD_OCTAL_PATCH;
     2063    10847        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:284  
     2064    10848    3   TOL$CONVERT_OCTAL: PROC;

  10848  4 005021   200152 741300       TOL$CONVERT* STX1  ! @CHECKSUM_LOCATION,,AUTO

     2065    10849
     2066    10850    4      IF (PATCH_CARD_INDEX - K > 12)

  10850  4 005022   200143 236100                    LDQ     PATCH_CARD_INDEX,,AUTO
         4 005023   000223 136000 3                  SBLQ    TOL$K
         4 005024   000014 116007                    CMPQ    12,DL
         4 005025   005032 604400 4                  TMOZ    s:10852

     2067    10851    4      THEN CALL TOL$BAD_CARD (VECTOR (ER#18));

  10851  4 005026   000300 630400 5                  EPPR0   192
         4 005027   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005030   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005031   000000 011000                    NOP     0

     2068    10852    4      L = PATCH_CARD_INDEX - 1;

  10852  4 005032   200143 235100                    LDA     PATCH_CARD_INDEX,,AUTO
         4 005033   000001 135007                    SBLA    1,DL
         4 005034   200114 755100                    STA     L,,AUTO

     2069    10853    5      DO K = K TO L;

  10853  4 005035   005067 710000 4                  TRA     s:10861+3

     2070    10854    5         CALL INDEX

  10854  4 005036   000223 235000 3                  LDA     TOL$K
         4 005037   000005 124400                    SCM     mask='000'O
         4 005040   000413 000021 3                  ADSC9   NUMERICS                 cn=0,n=17
         4 005041   000323 000001 3                  ADSC9   TOL$PATCH_CARD,A         cn=0,n=1
         4 005042   200122 000100                    ARG     OCTAL_INDEX,,AUTO

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:285  
     2071    10855    5                 (OCTAL_INDEX,
     2072    10856    5                 PATCH_ASCII.CHARS (K),
     2073    10857    5                 NUMERICS);
     2074    10858    5         IF (OCTAL_INDEX > 7)

  10858  4 005043   200122 236100                    LDQ     OCTAL_INDEX,,AUTO
         4 005044   000010 116007                    CMPQ    8,DL
         4 005045   005053 602000 4                  TNC     s:10860

     2075    10859    5         THEN CALL TOL$BAD_CARD (VECTOR (ER#19));

  10859  4 005046   000304 630400 5                  EPPR0   196
         4 005047   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005050   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005051   000000 011000                    NOP     0
         4 005052   005064 710000 4                  TRA     s:10861

     2076    10860    5         ELSE PATCH_CARD_OCTAL (12 + K - L - 1) = OCTAL_INDEX;

  10860  4 005053   000223 236000 3                  LDQ     TOL$K
         4 005054   200114 136100                    SBLQ    L,,AUTO
         4 005055   000003 402007                    MPY     3,DL
         4 005056   000000 116003                    CMPQ    0,DU
         4 005057   005061 605000 4                  TPL     s:10860+6
         4 005060   000044 036003                    ADLQ    36,DU
         4 005061   003106 061500                    CSR     bolr='003'O
         4 005062   200122 000044                    BDSC    OCTAL_INDEX,,AUTO        by=0,bit=0,n=36
         4 005063   200145 660003                    BDSC    PATCH_CARD_OCTAL,Q,AUTO  by=3,bit=6,n=3

     2077    10861    5      END;

  10861  4 005064   000223 235000 3                  LDA     TOL$K
         4 005065   000001 035007                    ADLA    1,DL
         4 005066   000223 755000 3                  STA     TOL$K
         4 005067   200114 236100                    LDQ     L,,AUTO
         4 005070   000223 116000 3                  CMPQ    TOL$K
         4 005071   005036 603000 4                  TRC     s:10854
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:286  

     2078    10862    4      RETURN;

  10862  4 005072   200152 221300                    LDX1  ! @CHECKSUM_LOCATION,,AUTO
         4 005073   000001 702211                    TSX2  ! 1,X1

     2079    10863
     2080    10864    4   END TOL$CONVERT_OCTAL;
     2081    10865    3   END TOL$BUILD_OCTAL_SEGMENT;
     2082    10866        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:287  
     2083    10867    2   TOL$READ_DKEND: PROC;

  10867  4 005074   200144 741300       TOL$READ_DK* STX1  ! STATUS_SAVE+1,,AUTO

     2084    10868
     2085    10869    3      DKEND_KEY.DECK# = OBJECT.DECK#;

  10869  4 005075   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 005076   000011 772000                    QRL     9
         4 005077   000350 552030 3                  STBQ    TOL$PATCH_KEY,'30'O

     2086    10870    3      DKEND_KEY.CARD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1;

  10870  4 005100   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 005101   777777 376007                    ANQ     -1,DL
         4 005102   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 005103   000312 236000 3                  LDQ     TOL$OBJECT+21
         4 005104   000022 772000                    QRL     18
         4 005105   200164 136100                    SBLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 005106   000001 136007                    SBLQ    1,DL
         4 005107   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 005110   000000 101500                    MRL     fill='000'O
         4 005111   200165 000004                    ADSC9   @CHECKSUM_LOCATION+3,,AUTO cn=0,n=4
         4 005112   000350 600002 3                  ADSC9   TOL$PATCH_KEY            cn=3,n=2

     2087    10871    3      I = OBJECT.BINARY_COUNT;

  10871  4 005113   000311 236000 3                  LDQ     TOL$OBJECT+20
         4 005114   777777 376007                    ANQ     -1,DL
         4 005115   000220 756000 3                  STQ     TOL$I

     2088    10872    3      CALL M$READ (READ_DKEND_CARD) ALTRET (BAD_DKEND_READ);

  10872  4 005116   000144 630400 3                  EPPR0   READ_DKEND_CARD
         4 005117   440000 713400                    CLIMB   alt,read
         4 005120   401400 401760                    pmme    nvectors=4
         4 005121   005204 702000 4                  TSX2    BAD_DKEND_READ
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:288  

     2089    10873    3      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;

  10873  4 005122   000412 470400 3                  LDP0    M$DECKFILE$
         4 005123   000000 235100                    LDA     0,,PR0
         4 005124   000217 755000 3                  STA     TOL$DECKFILE_ARS#

     2090    10874    3      IF (DECKFILE_ARS# ~= 84)

  10874  4 005125   000124 115007                    CMPA    84,DL
         4 005126   005133 600000 4                  TZE     s:10876

     2091    10875    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#33));

  10875  4 005127   000310 630400 5                  EPPR0   200
         4 005130   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005131   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005132   000000 011000                    NOP     0

     2092    10876    3      CALL TOL$CHECK_CHECKSUM

  10876  4 005133   000314 236000 5                  LDQ     204
         4 005134   200203 756100                    STQ     @CHECKSUM_LOCATION+17,,AUTO
         4 005135   000316 237000 5                  LDAQ    206
         4 005136   200152 757100                    STAQ    @CHECKSUM_LOCATION,,AUTO
         4 005137   000320 236000 5                  LDQ     208
         4 005140   200151 756100                    STQ     @CHECKSUM_SIZE,,AUTO
         4 005141   200203 630500                    EPPR0   @CHECKSUM_LOCATION+17,,AUTO
         4 005142   200150 450500                    STP0    HEX_LOAD$,,AUTO
         4 005143   000171 236000 5                  LDQ     121
         4 005144   200147 756100                    STQ     PATCH_LOAD$,,AUTO
         4 005145   002117 701000 4                  TSX1    TOL$CHECK_CHECKSUM
         4 005146   000000 011000                    NOP     0

     2093    10877    3              (0,
     2094    10878    3              ADDR (DKEND_CARD),
     2095    10879    3              20,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:289  
     2096    10880    3              DKEND_CARD.CHECKSUM,
     2097    10881    3              VECTOR (ER#34));
     2098    10882    3      IF (DKEND_CARD.CONTROL ~= '$' OR DKEND_CARD.TYPE ~= 'DKEND')

  10882  4 005147   040000 106400                    CMPC    fill='040'O
         4 005150   000240 000007 3                  ADSC9   TOL$DKEND_CARD           cn=0,n=7
         4 005151   000172 000001 5                  ADSC9   122                      cn=0,n=1
         4 005152   005157 601000 4                  TNZ     s:10883
         4 005153   040000 106400                    CMPC    fill='040'O
         4 005154   000241 600010 3                  ADSC9   TOL$DKEND_CARD+1         cn=3,n=8
         4 005155   000007 000005 2                  ADSC9   FPTN_+7                  cn=0,n=5
         4 005156   005163 600000 4                  TZE     s:10884

     2099    10883    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#35));

  10883  4 005157   000324 630400 5                  EPPR0   212
         4 005160   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005161   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005162   000000 011000                    NOP     0

     2100    10884    3      IF (DKEND_CARD.LBL ~= OBJECT.BCD.LBL)

  10884  4 005163   000262 236000 3                  LDQ     TOL$DKEND_CARD+18
         4 005164   000307 116000 3                  CMPQ    TOL$OBJECT+18
         4 005165   005172 600000 4                  TZE     s:10886

     2101    10885    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#36));

  10885  4 005166   000330 630400 5                  EPPR0   216
         4 005167   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005170   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005171   000000 011000                    NOP     0

     2102    10886    3      SEQ = DKEND_CARD.SEQ;

  10886  4 005172   000263 236000 3                  LDQ     TOL$DKEND_CARD+19
         4 005173   200127 756100                    STQ     SEQ,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:290  

     2103    10887    3      CALL TOL$CHECK_SEQ (VECTOR (ER#37), VECTOR (ER#38));

  10887  4 005174   000336 236000 5                  LDQ     222
         4 005175   200150 756100                    STQ     HEX_LOAD$,,AUTO
         4 005176   000337 236000 5                  LDQ     223
         4 005177   200147 756100                    STQ     PATCH_LOAD$,,AUTO
         4 005200   002142 701000 4                  TSX1    TOL$CHECK_SEQ
         4 005201   000000 011000                    NOP     0

     2104    10888    3      RETURN;

  10888  4 005202   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 005203   000001 702211                    TSX2  ! 1,X1

     2105    10889
     2106    10890    3   BAD_DKEND_READ:
     2107    10891    3      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)

  10891  4 005204   000000 470400 xsym  BAD_DKEND_R* LDP0    B$TCB$
         4 005205   000000 471500                    LDP1    0,,PR0
         4 005206   100102 236100                    LDQ     66,,PR1
         4 005207   377770 376007                    ANQ     131064,DL
         4 005210   001020 116007                    CMPQ    528,DL
         4 005211   005217 600000 4                  TZE     s:10893

     2108    10892    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#66));

  10892  4 005212   000342 630400 5                  EPPR0   226
         4 005213   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005214   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005215   000000 011000                    NOP     0
         4 005216   005223 710000 4                  TRA     s:10895

     2109    10893    3      ELSE CALL TOL$BAD_CARD (VECTOR (ER#39));

  10893  4 005217   000346 630400 5                  EPPR0   230
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:291  
         4 005220   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005221   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005222   000000 011000                    NOP     0

     2110    10894
     2111    10895    3   END TOL$READ_DKEND;

  10895  4 005223   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 005224   000001 702211                    TSX2  ! 1,X1

     2112    10896        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:292  
     2113    10897    2   TOL$READ_PATCH: PROC;

  10897  4 005225   200144 741300       TOL$READ_PA* STX1  ! STATUS_SAVE+1,,AUTO

     2114    10898
     2115    10899    3      CALL M$READ (READ_PATCH_CARD) ALTRET (BAD_PATCH_READ);

  10899  4 005226   000200 630400 3                  EPPR0   READ_PATCH_CARD
         4 005227   440000 713400                    CLIMB   alt,read
         4 005230   401400 401760                    pmme    nvectors=4
         4 005231   005346 702000 4                  TSX2    BAD_PATCH_READ

     2116    10900    3      DECKFILE_ARS# = M$DECKFILE$ -> F$DCB.ARS#;

  10900  4 005232   000412 470400 3                  LDP0    M$DECKFILE$
         4 005233   000000 235100                    LDA     0,,PR0
         4 005234   000217 755000 3                  STA     TOL$DECKFILE_ARS#

     2117    10901    3      IF (DECKFILE_ARS# ~= 84)

  10901  4 005235   000124 115007                    CMPA    84,DL
         4 005236   005243 600000 4                  TZE     s:10903

     2118    10902    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#50));

  10902  4 005237   000352 630400 5                  EPPR0   234
         4 005240   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005241   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005242   000000 011000                    NOP     0

     2119    10903    3      CALL TOL$CHECK_CHECKSUM

  10903  4 005243   000356 236000 5                  LDQ     238
         4 005244   200204 756100                    STQ     @CHECKSUM_LOCATION+18,,AUTO
         4 005245   000360 237000 5                  LDAQ    240
         4 005246   200152 757100                    STAQ    @CHECKSUM_LOCATION,,AUTO
         4 005247   000320 236000 5                  LDQ     208
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:293  
         4 005250   200151 756100                    STQ     @CHECKSUM_SIZE,,AUTO
         4 005251   200204 630500                    EPPR0   @CHECKSUM_LOCATION+18,,AUTO
         4 005252   200150 450500                    STP0    HEX_LOAD$,,AUTO
         4 005253   000171 236000 5                  LDQ     121
         4 005254   200147 756100                    STQ     PATCH_LOAD$,,AUTO
         4 005255   002117 701000 4                  TSX1    TOL$CHECK_CHECKSUM
         4 005256   000000 011000                    NOP     0

     2120    10904    3              (0,
     2121    10905    3              ADDR (PATCH_CARD),
     2122    10906    3              20,
     2123    10907    3              PATCH_CARD.CHECKSUM,
     2124    10908    3              VECTOR (ER#51));
     2125    10909    3      IF (PATCH_CARD.TYPE ~= 'OCTAL' AND

  10909  4 005257   040000 106400                    CMPC    fill='040'O
         4 005260   000324 600010 3                  ADSC9   TOL$PATCH_CARD+1         cn=3,n=8
         4 005261   000004 000005 2                  ADSC9   FPTN_+4                  cn=0,n=5
         4 005262   005273 600000 4                  TZE     s:10912
         4 005263   040000 106400                    CMPC    fill='040'O
         4 005264   000324 600010 3                  ADSC9   TOL$PATCH_CARD+1         cn=3,n=8
         4 005265   000006 000003 2                  ADSC9   FPTN_+6                  cn=0,n=3
         4 005266   005273 600000 4                  TZE     s:10912

     2126    10910    3              PATCH_CARD.TYPE ~= 'HEX')
     2127    10911    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#52));

  10911  4 005267   000364 630400 5                  EPPR0   244
         4 005270   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005271   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005272   000000 011000                    NOP     0

     2128    10912    3      IF (PATCH_CARD.LBL ~= OBJECT.BCD.LBL)

  10912  4 005273   000345 236000 3                  LDQ     TOL$PATCH_CARD+18
         4 005274   000307 116000 3                  CMPQ    TOL$OBJECT+18
         4 005275   005302 600000 4                  TZE     s:10914
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:294  

     2129    10913    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#53));

  10913  4 005276   000370 630400 5                  EPPR0   248
         4 005277   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005300   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005301   000000 011000                    NOP     0

     2130    10914    3      IF (PATCH_CARD.TYPE = 'OCTAL')

  10914  4 005302   040000 106400                    CMPC    fill='040'O
         4 005303   000324 600010 3                  ADSC9   TOL$PATCH_CARD+1         cn=3,n=8
         4 005304   000004 000005 2                  ADSC9   FPTN_+4                  cn=0,n=5
         4 005305   005310 601000 4                  TNZ     s:10916

     2131    10915    3      THEN RETURN;

  10915  4 005306   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 005307   000001 702211                    TSX2  ! 1,X1

     2132    10916    3      IF (HEX_CARD.CR ~= 'C' AND

  10916  4 005310   000324 236000 3                  LDQ     TOL$PATCH_CARD+1
         4 005311   777000 376007                    ANQ     -512,DL
         4 005312   103000 116007                    CMPQ    34304,DL
         4 005313   005324 600000 4                  TZE     s:10919
         4 005314   000324 236000 3                  LDQ     TOL$PATCH_CARD+1
         4 005315   777000 376007                    ANQ     -512,DL
         4 005316   122000 116007                    CMPQ    41984,DL
         4 005317   005324 600000 4                  TZE     s:10919

     2133    10917    3              HEX_CARD.CR ~= 'R')
     2134    10918    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#54));

  10918  4 005320   000374 630400 5                  EPPR0   252
         4 005321   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005322   000000 701000 xent               TSX1    TOL$BAD_CARD
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:295  
         4 005323   000000 011000                    NOP     0

     2135    10919    3      IF (HEX_CARD.REVISION ~= DKEND_CARD.REVISION)

  10919  4 005324   040000 106400                    CMPC    fill='040'O
         4 005325   000334 000006 3                  ADSC9   TOL$PATCH_CARD+9         cn=0,n=6
         4 005326   000260 400006 3                  ADSC9   TOL$DKEND_CARD+16        cn=2,n=6
         4 005327   005334 600000 4                  TZE     s:10921

     2136    10920    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#55));

  10920  4 005330   000400 630400 5                  EPPR0   256
         4 005331   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005332   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005333   000000 011000                    NOP     0

     2137    10921    3      IF (OBJECT.BCD.ASSEMBLER ~= 'M')

  10921  4 005334   000303 236000 3                  LDQ     TOL$OBJECT+14
         4 005335   000777 376007                    ANQ     511,DL
         4 005336   000115 116007                    CMPQ    77,DL
         4 005337   005344 600000 4                  TZE     s:10923

     2138    10922    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#56));

  10922  4 005340   000404 630400 5                  EPPR0   260
         4 005341   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005342   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005343   000000 011000                    NOP     0

     2139    10923    3      RETURN;

  10923  4 005344   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 005345   000001 702211                    TSX2  ! 1,X1

     2140    10924
     2141    10925    3   BAD_PATCH_READ:
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:296  
     2142    10926    3      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$NOKEY)

  10926  4 005346   000000 470400 xsym  BAD_PATCH_R* LDP0    B$TCB$
         4 005347   000000 471500                    LDP1    0,,PR0
         4 005350   100102 236100                    LDQ     66,,PR1
         4 005351   377770 376007                    ANQ     131064,DL
         4 005352   001020 116007                    CMPQ    528,DL
         4 005353   005361 600000 4                  TZE     s:10928

     2143    10927    3      THEN CALL TOL$BAD_CARD (VECTOR (ER#67));

  10927  4 005354   000410 630400 5                  EPPR0   264
         4 005355   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005356   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005357   000000 011000                    NOP     0
         4 005360   005365 710000 4                  TRA     s:10930

     2144    10928    3      ELSE CALL TOL$BAD_CARD (VECTOR (ER#57));

  10928  4 005361   000414 630400 5                  EPPR0   268
         4 005362   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005363   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005364   000000 011000                    NOP     0

     2145    10929
     2146    10930    3   END TOL$READ_PATCH;

  10930  4 005365   200144 221300                    LDX1  ! STATUS_SAVE+1,,AUTO
         4 005366   000001 702211                    TSX2  ! 1,X1

     2147    10931    2   END TOL$READ_PATCHES;
     2148    10932        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:297  
     2149    10933    1   TOL$RECALCULATE_MPC_CHECKSUM: PROC;

  10933  4 005367   200142 741300       TOL$RECALCU* STX1  ! STATUS$+2,,AUTO

     2150    10934
     2151    10935    2      DCL 1 STATUS_SAVE ALIGNED,
     2152    10936    2            2 HARDWARE_STATUS BIT (36) ALIGNED,
     2153    10937    2            2 LAST_DCW_POINTER UBIN (18) UNAL,
     2154    10938    2            2 RESIDUE UBIN (18) UNAL;
     2155    10939
     2156    10940        /* Code */
     2157    10941
     2158    10942    2      STATUS_SAVE.LAST_DCW_POINTER = CALL_SEQUENCE.STATUSP - 1;

  10942  4 005370   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 005371   000000 720100                    LXL0    0,,PR0
         4 005372   777777 622010                    EAX2    -1,X0
         4 005373   200144 742100                    STX2    STATUS_SAVE+1,,AUTO

     2159    10943    2      SPAN_UPPER = LOAD_RELOC ;

  10943  4 005374   200117 235100                    LDA     LOAD_RELOC,,AUTO
         4 005375   000225 755000 3                  STA     TOL$SPAN_UPPER

     2160    10944    2      CALL TOL$GET_NEXT_DCW (SPLIT_DCW, CALL_SEQUENCE, STATUS_SAVE) ;

  10944  4 005376   200143 631500                    EPPR1   STATUS_SAVE,,AUTO
         4 005377   200166 451500                    STP1    @CHECKSUM_LOCATION+4,,AUTO
         4 005400   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 005401   000071 235000 5                  LDA     57
         4 005402   200164 757100                    STAQ    @CHECKSUM_LOCATION+2,,AUTO
         4 005403   200164 630500                    EPPR0   @CHECKSUM_LOCATION+2,,AUTO
         4 005404   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 005405   000000 701000 xent               TSX1    TOL$GET_NEXT_DCW
         4 005406   000000 011000                    NOP     0

     2161    10945    2      SPLIT_DCW.ADDRESS = SPLIT_DCW.ADDRESS+ LOAD_RELOC ;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:298  

  10945  4 005407   000440 236000 3                  LDQ     SPLIT_DCW
         4 005410   000022 772000                    QRL     18
         4 005411   200117 036100                    ADLQ    LOAD_RELOC,,AUTO
         4 005412   000000 620006                    EAX0    0,QL
         4 005413   000440 740000 3                  STX0    SPLIT_DCW

     2162    10946    2      IF (FIRST_MPC_CK ~= 0)

  10946  4 005414   200111 235100                    LDA     FIRST_MPC_CK,,AUTO
         4 005415   005455 600000 4                  TZE     s:10963

     2163    10947    3      THEN DO;

     2164    10948    3              LENGTH = FIRST_MPC_CK;

  10948  4 005416   200116 755100                    STA     LENGTH,,AUTO

     2165    10949    3              DATA$ = ADDR (BUFFER);

  10949  4 005417   000000 236000 xsym               LDQ     TOL$BUFFER$
         4 005420   200133 756100                    STQ     DATA$,,AUTO

     2166    10950    3              DATA_SIZE = LENGTH;

  10950  4 005421   200106 755100                    STA     DATA_SIZE,,AUTO

     2167    10951    3              CALL TOL$GET_DATA

  10951  4 005422   000012 236000 5                  LDQ     10
         4 005423   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 005424   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 005425   200173 756100                    STQ     @CHECKSUM_LOCATION+9,,AUTO
         4 005426   200106 630500                    EPPR0   DATA_SIZE,,AUTO
         4 005427   200172 450500                    STP0    @CHECKSUM_LOCATION+8,,AUTO
         4 005430   200164 631500                    EPPR1   @CHECKSUM_LOCATION+2,,AUTO
         4 005431   200171 451500                    STP1    @CHECKSUM_LOCATION+7,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:299  
         4 005432   200143 633500                    EPPR3   STATUS_SAVE,,AUTO
         4 005433   200170 453500                    STP3    @CHECKSUM_LOCATION+6,,AUTO
         4 005434   000071 236000 5                  LDQ     57
         4 005435   200167 756100                    STQ     @CHECKSUM_LOCATION+5,,AUTO
         4 005436   200116 634500                    EPPR4   LENGTH,,AUTO
         4 005437   200166 454500                    STP4    @CHECKSUM_LOCATION+4,,AUTO
         4 005440   200133 635500                    EPPR5   DATA$,,AUTO
         4 005441   200165 455500                    STP5    @CHECKSUM_LOCATION+3,,AUTO
         4 005442   200165 630500                    EPPR0   @CHECKSUM_LOCATION+3,,AUTO
         4 005443   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 005444   000000 701000 xent               TSX1    TOL$GET_DATA
         4 005445   000000 011000                    NOP     0

     2168    10952    3                      (DATA$,
     2169    10953    3                      LENGTH,
     2170    10954    3                      SPLIT_DCW,
     2171    10955    3                      STATUS_SAVE,
     2172    10956    3                      ADDR (SPLIT_LOAD),
     2173    10957    3                      DATA_SIZE,
     2174    10958    3                      CALL_SEQUENCE);
     2175    10959    3              DATA$ = ADDR (BUFFER);

  10959  4 005446   000000 236000 xsym               LDQ     TOL$BUFFER$
         4 005447   200133 756100                    STQ     DATA$,,AUTO

     2176    10960    3              CALL TOL$CALCULATE_MPC_CHECKSUM;

  10960  4 005450   005516 701000 4                  TSX1    TOL$CALCULATE_MPC_CHECKSUM
         4 005451   000000 011000                    NOP     0

     2177    10961    3              FIRST_MPC_CK = FIRST_MPC_CK + 1;

  10961  4 005452   200111 235100                    LDA     FIRST_MPC_CK,,AUTO
         4 005453   000001 035007                    ADLA    1,DL
         4 005454   200111 755100                    STA     FIRST_MPC_CK,,AUTO

     2178    10962    3           END;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:300  

     2179    10963    2      LENGTH = SECOND_MPC_CK - FIRST_MPC_CK;

  10963  4 005455   200126 236100                    LDQ     SECOND_MPC_CK,,AUTO
         4 005456   200111 136100                    SBLQ    FIRST_MPC_CK,,AUTO
         4 005457   200116 756100                    STQ     LENGTH,,AUTO

     2180    10964    2      DATA$ = ADDR (BUFFER);

  10964  4 005460   000000 236000 xsym               LDQ     TOL$BUFFER$
         4 005461   200133 756100                    STQ     DATA$,,AUTO

     2181    10965    2      DATA_SIZE = LENGTH;

  10965  4 005462   200116 235100                    LDA     LENGTH,,AUTO
         4 005463   200106 755100                    STA     DATA_SIZE,,AUTO

     2182    10966    2      CALL TOL$GET_DATA

  10966  4 005464   000012 236000 5                  LDQ     10
         4 005465   200164 756100                    STQ     @CHECKSUM_LOCATION+2,,AUTO
         4 005466   200005 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         4 005467   200173 756100                    STQ     @CHECKSUM_LOCATION+9,,AUTO
         4 005470   200116 630500                    EPPR0   LENGTH,,AUTO
         4 005471   200172 450500                    STP0    @CHECKSUM_LOCATION+8,,AUTO
         4 005472   200164 631500                    EPPR1   @CHECKSUM_LOCATION+2,,AUTO
         4 005473   200171 451500                    STP1    @CHECKSUM_LOCATION+7,,AUTO
         4 005474   200143 633500                    EPPR3   STATUS_SAVE,,AUTO
         4 005475   200170 453500                    STP3    @CHECKSUM_LOCATION+6,,AUTO
         4 005476   000071 236000 5                  LDQ     57
         4 005477   200167 756100                    STQ     @CHECKSUM_LOCATION+5,,AUTO
         4 005500   200116 634500                    EPPR4   LENGTH,,AUTO
         4 005501   200166 454500                    STP4    @CHECKSUM_LOCATION+4,,AUTO
         4 005502   200133 635500                    EPPR5   DATA$,,AUTO
         4 005503   200165 455500                    STP5    @CHECKSUM_LOCATION+3,,AUTO
         4 005504   200165 630500                    EPPR0   @CHECKSUM_LOCATION+3,,AUTO
         4 005505   000025 631400 xsym               EPPR1   B_VECTNIL+21
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:301  
         4 005506   000000 701000 xent               TSX1    TOL$GET_DATA
         4 005507   000000 011000                    NOP     0

     2183    10967    2              (DATA$,
     2184    10968    2              LENGTH,
     2185    10969    2              SPLIT_DCW,
     2186    10970    2              STATUS_SAVE,
     2187    10971    2              ADDR (SPLIT_LOAD),
     2188    10972    2              LENGTH,
     2189    10973    2              CALL_SEQUENCE);
     2190    10974    2      DATA$ = ADDR (BUFFER);

  10974  4 005510   000000 236000 xsym               LDQ     TOL$BUFFER$
         4 005511   200133 756100                    STQ     DATA$,,AUTO

     2191    10975    2      CALL TOL$CALCULATE_MPC_CHECKSUM;

  10975  4 005512   005516 701000 4                  TSX1    TOL$CALCULATE_MPC_CHECKSUM
         4 005513   000000 011000                    NOP     0

     2192    10976    2      RETURN;

  10976  4 005514   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 005515   000001 702211                    TSX2  ! 1,X1

     2193    10977        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:302  
     2194    10978    2   TOL$CALCULATE_MPC_CHECKSUM: PROC;

  10978  4 005516   200146 741300       TOL$CALCULA* STX1  ! PATCH_CARD_START,,AUTO

     2195    10979
     2196    10980    3      DCL HEX_DATA (0:3) BASED (HEX$) UBIN (9) CALIGNED ;
     2197    10981    3      DCL HEX_SAVE UBIN (36) ALIGNED;
     2198    10982
     2199    10983    3      DCL HEX_CHECKSUM SBIN (36) ALIGNED;
     2200    10984    3      DCL 1 HEX_CALC REDEF HEX_CHECKSUM ALIGNED,
     2201    10985    3            2 CARRY UBIN (20) UNAL,
     2202    10986    3            2 VALUE UBIN (16) UNAL,
     2203    10987    3            2 SPLIT REDEF VALUE UNAL,
     2204    10988    3              3 UPPER UBIN (8) UNAL,
     2205    10989    3              3 LOWER UBIN (8) UNAL;
     2206    10990    3      DCL 1 HEX_FINAL REDEF HEX_CHECKSUM ALIGNED,
     2207    10991    3            2 UPPER UBIN (9) UNAL,
     2208    10992    3            2 LOWER UBIN (9) UNAL,
     2209    10993    3            2 CLEAR UBIN (18) UNAL;
     2210    10994        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:303  
     2211    10995        /* Code */
     2212    10996
     2213    10997    3      DATA_SIZE = 1;

  10997  4 005517   000001 235007                    LDA     1,DL
         4 005520   200106 755100                    STA     DATA_SIZE,,AUTO

     2214    10998    3      HEX_CHECKSUM = 0;

  10998  4 005521   200150 450100                    STZ     HEX_CHECKSUM,,AUTO

     2215    10999    4      DO I = 0 TO LENGTH - 1;

  10999  4 005522   000220 450000 3                  STZ     TOL$I
         4 005523   005557 710000 4                  TRA     s:11007+3

     2216    11000    4         HEX_SPLIT.UPPER = HEX_DATA (0);

  11000  4 005524   200133 470500                    LDP0    DATA$,,AUTO
         4 005525   003100 061500                    CSR     bolr='003'O
         4 005526   000000 000011                    BDSC    0,,PR0                   by=0,bit=0,n=9
         4 005527   200136 010010                    BDSC    HEX_CARD_SPLIT,,AUTO     by=0,bit=1,n=8

     2217    11001    4         HEX_SPLIT.LOWER = HEX_DATA (1);

  11001  4 005530   003100 061500                    CSR     bolr='003'O
         4 005531   000000 200011                    BDSC    0,,PR0                   by=1,bit=0,n=9
         4 005532   200136 210010                    BDSC    HEX_CARD_SPLIT,,AUTO     by=1,bit=1,n=8

     2218    11002    4         HEX_CHECKSUM = HEX_CHECKSUM + HEX_CARD_SPLIT;

  11002  4 005533   200136 236100                    LDQ     HEX_CARD_SPLIT,,AUTO
         4 005534   000022 772000                    QRL     18
         4 005535   200150 036100                    ADLQ    HEX_CHECKSUM,,AUTO
         4 005536   200150 756100                    STQ     HEX_CHECKSUM,,AUTO

     2219    11003    4         HEX_SPLIT.UPPER = HEX_DATA (2);
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:304  

  11003  4 005537   003100 061500                    CSR     bolr='003'O
         4 005540   000000 400011                    BDSC    0,,PR0                   by=2,bit=0,n=9
         4 005541   200136 010010                    BDSC    HEX_CARD_SPLIT,,AUTO     by=0,bit=1,n=8

     2220    11004    4         HEX_SPLIT.LOWER = HEX_DATA (3);

  11004  4 005542   003100 061500                    CSR     bolr='003'O
         4 005543   000000 600011                    BDSC    0,,PR0                   by=3,bit=0,n=9
         4 005544   200136 210010                    BDSC    HEX_CARD_SPLIT,,AUTO     by=1,bit=1,n=8

     2221    11005    4         HEX_CHECKSUM = HEX_CHECKSUM + HEX_CARD_SPLIT;

  11005  4 005545   200136 236100                    LDQ     HEX_CARD_SPLIT,,AUTO
         4 005546   000022 772000                    QRL     18
         4 005547   200150 036100                    ADLQ    HEX_CHECKSUM,,AUTO
         4 005550   200150 756100                    STQ     HEX_CHECKSUM,,AUTO

     2222    11006    4         HEXP.ADDRESS = HEXP.ADDRESS + 1;

  11006  4 005551   200133 220100                    LDX0    DATA$,,AUTO
         4 005552   000001 621010                    EAX1    1,X0
         4 005553   200133 741100                    STX1    DATA$,,AUTO

     2223    11007    4      END;

  11007  4 005554   000220 235000 3                  LDA     TOL$I
         4 005555   000001 035007                    ADLA    1,DL
         4 005556   000220 755000 3                  STA     TOL$I
         4 005557   000220 236000 3                  LDQ     TOL$I
         4 005560   200116 116100                    CMPQ    LENGTH,,AUTO
         4 005561   005524 602000 4                  TNC     s:11000

     2224    11008    4      DO WHILE (HEX_CALC.CARRY ~= 0);

  11008  4 005562   200150 236100                    LDQ     HEX_CHECKSUM,,AUTO
         4 005563   000034 316000 xsym               CANQ    B_VECTNIL+28
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:305  
         4 005564   005600 600000 4                  TZE     s:11013

     2225    11009    4         HEX_SAVE = HEX_CALC.CARRY;

  11009  4 005565   200150 236100                    LDQ     HEX_CHECKSUM,,AUTO
         4 005566   000020 772000                    QRL     16
         4 005567   200147 756100                    STQ     HEX_SAVE,,AUTO

     2226    11010    4         HEX_CALC.CARRY = 0;

  11010  4 005570   177777 236007                    LDQ     65535,DL
         4 005571   200150 356100                    ANSQ    HEX_CHECKSUM,,AUTO

     2227    11011    4         HEX_CHECKSUM = HEX_CHECKSUM + HEX_SAVE;

  11011  4 005572   200150 236100                    LDQ     HEX_CHECKSUM,,AUTO
         4 005573   200147 036100                    ADLQ    HEX_SAVE,,AUTO
         4 005574   200150 756100                    STQ     HEX_CHECKSUM,,AUTO

     2228    11012    4      END;

  11012  4 005575   200150 236100                    LDQ     HEX_CHECKSUM,,AUTO
         4 005576   000034 316000 xsym               CANQ    B_VECTNIL+28
         4 005577   005565 601000 4                  TNZ     s:11009

     2229    11013    3      HEX_CHECKSUM = -HEX_CHECKSUM;

  11013  4 005600   200150 335100                    LCA     HEX_CHECKSUM,,AUTO
         4 005601   200150 755100                    STA     HEX_CHECKSUM,,AUTO

     2230    11014    3      HEX_FINAL.UPPER = HEX_CALC.SPLIT.UPPER;

  11014  4 005602   200150 236100                    LDQ     HEX_CHECKSUM,,AUTO
         4 005603   177400 376007                    ANQ     65280,DL
         4 005604   000023 736000                    QLS     19
         4 005605   200150 552140                    STBQ    HEX_CHECKSUM,'40'O,AUTO

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:306  
     2231    11015    3      HEX_FINAL.LOWER = HEX_CALC.SPLIT.LOWER;

  11015  4 005606   200150 236100                    LDQ     HEX_CHECKSUM,,AUTO
         4 005607   000377 376007                    ANQ     255,DL
         4 005610   000022 736000                    QLS     18
         4 005611   200150 552120                    STBQ    HEX_CHECKSUM,'20'O,AUTO

     2232    11016    3      HEX_FINAL.CLEAR = 0;

  11016  4 005612   000000 220003                    LDX0    0,DU
         4 005613   200150 440100                    SXL0    HEX_CHECKSUM,,AUTO

     2233    11017    3      CALL TOL$SAVE_DATA

  11017  4 005614   200150 630500                    EPPR0   HEX_CHECKSUM,,AUTO
         4 005615   200164 450500                    STP0    @CHECKSUM_LOCATION+2,,AUTO
         4 005616   000012 236000 5                  LDQ     10
         4 005617   200165 756100                    STQ     @CHECKSUM_LOCATION+3,,AUTO
         4 005620   200106 631500                    EPPR1   DATA_SIZE,,AUTO
         4 005621   200173 451500                    STP1    @CHECKSUM_LOCATION+9,,AUTO
         4 005622   200165 633500                    EPPR3   @CHECKSUM_LOCATION+3,,AUTO
         4 005623   200172 453500                    STP3    @CHECKSUM_LOCATION+8,,AUTO
         4 005624   200143 634500                    EPPR4   STATUS_SAVE,,AUTO
         4 005625   200171 454500                    STP4    @CHECKSUM_LOCATION+7,,AUTO
         4 005626   000071 236000 5                  LDQ     57
         4 005627   200170 756100                    STQ     @CHECKSUM_LOCATION+6,,AUTO
         4 005630   000415 236000 5                  LDQ     269
         4 005631   200167 756100                    STQ     @CHECKSUM_LOCATION+5,,AUTO
         4 005632   200164 635500                    EPPR5   @CHECKSUM_LOCATION+2,,AUTO
         4 005633   200166 455500                    STP5    @CHECKSUM_LOCATION+4,,AUTO
         4 005634   200166 630500                    EPPR0   @CHECKSUM_LOCATION+4,,AUTO
         4 005635   000024 631400 xsym               EPPR1   B_VECTNIL+20
         4 005636   000000 701000 xent               TSX1    TOL$SAVE_DATA
         4 005637   005642 702000 4                  TSX2    CANT_HAPPEN

     2234    11018    3              (ADDR (HEX_FINAL),
     2235    11019    3              1,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:307  
     2236    11020    3              SPLIT_DCW,
     2237    11021    3              STATUS_SAVE,
     2238    11022    3              ADDR (SPLIT_LOAD),
     2239    11023    3              DATA_SIZE) ALTRET (CANT_HAPPEN);
     2240    11024    3      RETURN;

  11024  4 005640   200146 221300                    LDX1  ! PATCH_CARD_START,,AUTO
         4 005641   000001 702211                    TSX2  ! 1,X1

     2241    11025    3   CANT_HAPPEN: CALL TOL$BAD_CARD (VECTOR(ER#70));

  11025  4 005642   000420 630400 5     CANT_HAPPEN  EPPR0   272
         4 005643   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005644   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 005645   000000 011000                    NOP     0

     2242    11026
     2243    11027    3   END TOL$CALCULATE_MPC_CHECKSUM;

  11027  4 005646   200146 221300                    LDX1  ! PATCH_CARD_START,,AUTO
         4 005647   000001 702211                    TSX2  ! 1,X1

     2244    11028    2   END TOL$RECALCULATE_MPC_CHECKSUM;
     2245    11029        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:308  
     2246    11030    1   TOL$SET_DATA_SEQUENCE: PROC ALTRET;

  11030  4 005650   200142 741300       TOL$SET_DAT* STX1  ! STATUS$+2,,AUTO

     2247    11031
     2248    11032    2      IF (CALL_SEQUENCE_MORE.MORE.DATA ~= '0'B)

  11032  4 005651   200005 470500                    LDP0    @CALL_SEQUENCE,,AUTO
         4 005652   000000 106500                    CMPC    fill='000'O
         4 005653   000002 000024                    ADSC9   2,,PR0                   cn=0,n=20
         4 005654   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         4 005655   005677 600000 4                  TZE     s:11046

     2249    11033    3      THEN DO;

     2250    11034    3              IF (CALL_SEQUENCE.DECK# ~= OBJECT.DECK# OR

  11034  4 005656   000003 220100                    LDX0    3,,PR0
         4 005657   000311 100000 3                  CMPX0   TOL$OBJECT+20
         4 005660   005671 601000 4                  TNZ     s:11039
         4 005661   000003 722100                    LXL2    3,,PR0
         4 005662   000312 102000 3                  CMPX2   TOL$OBJECT+21
         4 005663   005671 601000 4                  TNZ     s:11039
         4 005664   000002 235100                    LDA     2,,PR0
         4 005665   005671 600000 4                  TZE     s:11039
         4 005666   000005 236100                    LDQ     5,,PR0
         4 005667   200124 116100                    CMPQ    RELOCATION_CHECK,,AUTO
         4 005670   005703 600000 4                  TZE     s:11049

     2251    11035    3                      CALL_SEQUENCE.CARD_COUNT ~= OBJECT.TOTAL_COUNT OR
     2252    11036    3                      CALL_SEQUENCE.DECK_OFFSET = 0 OR
     2253    11037    3                      CALL_SEQUENCE.RELOCATION ~= RELOCATION_CHECK)
     2254    11038    4              THEN DO;

     2255    11039    4                      ERROR_CODE.LOC = ERR#L;

  11039  4 005671   003466 222000 3                  LDX2    ERR#L
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:309  
         4 005672   200010 471500                    LDP1    @ERROR_CODE,,AUTO
         4 005673   100000 742100                    STX2    0,,PR1

     2256    11040    4                      ERROR_CODE.ERR = ERR#L;

  11040  4 005674   100000 442100                    SXL2    0,,PR1

     2257    11041    4                      ALTRETURN;

  11041  4 005675   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 005676   000000 702211                    TSX2  ! 0,X1

     2258    11042    4                   END;
     2259    11043    3              ELSE /* Do Nothing */ ;
     2260    11044    3           END;
     2261    11045    3      ELSE DO;

     2262    11046    3              CALL_SEQUENCE.DECK# = OBJECT.DECK#;

  11046  4 005677   000311 220000 3                  LDX0    TOL$OBJECT+20
         4 005700   000003 740100                    STX0    3,,PR0

     2263    11047    3              CALL_SEQUENCE.CARD_COUNT = OBJECT.TOTAL_COUNT;

  11047  4 005701   000312 221000 3                  LDX1    TOL$OBJECT+21
         4 005702   000003 441100                    SXL1    3,,PR0

     2264    11048    3           END;

     2265    11049    2      CALL_SEQUENCE.RELOCATION = RELOCATION;

  11049  4 005703   200123 235100                    LDA     RELOCATION,,AUTO
         4 005704   000005 755100                    STA     5,,PR0

     2266    11050    2      RETURN;

  11050  4 005705   200142 221300                    LDX1  ! STATUS$+2,,AUTO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:310  
         4 005706   000001 702211                    TSX2  ! 1,X1

     2267    11051
     2268    11052    2   END TOL$SET_DATA_SEQUENCE;
     2269    11053        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:311  
     2270    11054    1   TOL$SET_RELOCATION: PROC;

  11054  4 005707   200142 741300       TOL$SET_REL* STX1  ! STATUS$+2,,AUTO

     2271    11055
     2272    11056    2      IF (OBJECT.BCD.LOAD_TYPE = 'D')

  11056  4 005710   000272 236000 3                  LDQ     TOL$OBJECT+5
         4 005711   000777 376003                    ANQ     511,DU
         4 005712   000104 116003                    CMPQ    68,DU
         4 005713   005720 601000 4                  TNZ     s:11063

     2273    11057    3      THEN DO;

     2274    11058    3              RELOCATION = 0;

  11058  4 005714   200123 450100                    STZ     RELOCATION,,AUTO

     2275    11059    3              LOAD_RELOC = 0;

  11059  4 005715   200117 450100                    STZ     LOAD_RELOC,,AUTO

     2276    11060    3              RELOCATION_CHECK = 0;

  11060  4 005716   200124 450100                    STZ     RELOCATION_CHECK,,AUTO

     2277    11061    3              RETURN;

  11061  4 005717   000001 702211                    TSX2  ! 1,X1

     2278    11062    3           END;
     2279    11063    2      IF (OBJECT.BCD.LOAD_TYPE = 'P')

  11063  4 005720   000272 236000 3                  LDQ     TOL$OBJECT+5
         4 005721   000777 376003                    ANQ     511,DU
         4 005722   000120 116003                    CMPQ    80,DU
         4 005723   005731 601000 4                  TNZ     s:11070
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:312  

     2280    11064    3      THEN DO;

     2281    11065    3              RELOCATION = 72;

  11065  4 005724   000110 235007                    LDA     72,DL
         4 005725   200123 755100                    STA     RELOCATION,,AUTO

     2282    11066    3              LOAD_RELOC = 72;

  11066  4 005726   200117 755100                    STA     LOAD_RELOC,,AUTO

     2283    11067    3              RELOCATION_CHECK = 72;

  11067  4 005727   200124 755100                    STA     RELOCATION_CHECK,,AUTO

     2284    11068    3              RETURN;

  11068  4 005730   000001 702211                    TSX2  ! 1,X1

     2285    11069    3           END;
     2286    11070    2      RELOCATION = DCW.ADDRESS - LOAD_OFFSET ;

  11070  4 005731   200004 470500                    LDP0    @LOAD_OFFSET,,AUTO
         4 005732   000100 101500                    MRL     fill='000'O
         4 005733   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         4 005734   200164 000004                    ADSC9   @CHECKSUM_LOCATION+2,,AUTO cn=0,n=4
         4 005735   200134 236100                    LDQ     DCW,,AUTO
         4 005736   000022 772000                    QRL     18
         4 005737   200164 136100                    SBLQ    @CHECKSUM_LOCATION+2,,AUTO
         4 005740   200123 756100                    STQ     RELOCATION,,AUTO

     2287    11071    2      LOAD_RELOC = 72;

  11071  4 005741   000110 235007                    LDA     72,DL
         4 005742   200117 755100                    STA     LOAD_RELOC,,AUTO

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:313  
     2288    11072    2      RELOCATION_CHECK = RELOCATION - CALL_SEQUENCE.DECK_OFFSET;

  11072  4 005743   200005 471500                    LDP1    @CALL_SEQUENCE,,AUTO
         4 005744   100002 136100                    SBLQ    2,,PR1
         4 005745   200124 756100                    STQ     RELOCATION_CHECK,,AUTO

     2289    11073    2      RETURN;

  11073  4 005746   000001 702211                    TSX2  ! 1,X1

     2290    11074
     2291    11075    2   END TOL$SET_RELOCATION;
     2292    11076        %EJECT;
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:314  
     2293    11077    1   TOL$OPEN_DECKFILE: PROC;

  11077  4 005747   200142 741300       TOL$OPEN_DE* STX1  ! STATUS$+2,,AUTO

     2294    11078
     2295    11079    2      IF (DECKFILE_DCB# ~= 0)

  11079  4 005750   000411 235000 3                  LDA     DECKFILE_DCB#
         4 005751   005753 600000 4                  TZE     s:11081

     2296    11080    2      THEN RETURN;

  11080  4 005752   000001 702211                    TSX2  ! 1,X1

     2297    11081    2      CALL M$OPEN (OLD_DECKFILE) ALTRET (NO_DECKFILE);

  11081  4 005753   000000 630400 3                  EPPR0   OLD_DECKFILE
         4 005754   450000 713400                    CLIMB   alt,open
         4 005755   410400 401760                    pmme    nvectors=18
         4 005756   005767 702000 4                  TSX2    NO_DECKFILE

     2298    11082    2      DECKFILE_DCB# = DCBNUM (M$DECKFILE);

  11082  4 005757   000000 236007 xsym               LDQ     M$DECKFILE,DL
         4 005760   000411 756000 3                  STQ     DECKFILE_DCB#

     2299    11083    2      M$DECKFILE$ = DCBADDR (DECKFILE_DCB#);

  11083  4 005761   000421 470400 5                  LDP0    273
         4 005762   000000 471500                    LDP1    0,,PR0
         4 005763   100000 236106                    LDQ     0,QL,PR1
         4 005764   000412 756000 3                  STQ     M$DECKFILE$

     2300    11084    2      RETURN;

  11084  4 005765   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 005766   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:315  

     2301    11085
     2302    11086    2   NO_DECKFILE:
     2303    11087    2      IF (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR# ~= %E$DCBOPEN)

  11087  4 005767   000000 470400 xsym  NO_DECKFILE  LDP0    B$TCB$
         4 005770   000000 471500                    LDP1    0,,PR0
         4 005771   100102 236100                    LDQ     66,,PR1
         4 005772   377770 376007                    ANQ     131064,DL
         4 005773   001440 116007                    CMPQ    800,DL
         4 005774   006001 600000 4                  TZE     s:11089

     2304    11088    2      THEN CALL TOL$BAD_CARD (VECTOR (ER#26));

  11088  4 005775   000424 630400 5                  EPPR0   276
         4 005776   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 005777   000000 701000 xent               TSX1    TOL$BAD_CARD
         4 006000   000000 011000                    NOP     0

     2305    11089    2      DECKFILE_DCB# = DCBNUM (M$DECKFILE);

  11089  4 006001   000000 236007 xsym               LDQ     M$DECKFILE,DL
         4 006002   000411 756000 3                  STQ     DECKFILE_DCB#

     2306    11090    2      RETURN;

  11090  4 006003   200142 221300                    LDX1  ! STATUS$+2,,AUTO
         4 006004   000001 702211                    TSX2  ! 1,X1

     2307    11091
     2308    11092    2   END TOL$OPEN_DECKFILE;
     2309    11093    1   END TOL$CHECK_CALL_SEQUENCE;

  11093  4 006005   000000 702200 xent               TSX2  ! X66_ARET

FPTN_
 Sect OctLoc
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:316  
   2     000   000000 006000                                                    ....

(unnamed)
 Sect OctLoc
   2     001   117102 112105   103124 040040   060060 060060   117103 124101    OBJECT  0000OCTA
   2     005   114040 040040   110105 130040   104113 105116   104040 040040    L   HEX DKEND

OLD_DECKFILE
 Sect OctLoc
   3     000   000025 777640   000044 006000   000000 177640   000000 006014    .....$..........
   3     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   3     044*  000000 000062   000000 002001   252525 002002   000040 252520    ...2......... ..
   3     050   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
   3     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
   3     060   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
   3     064   040040 040040   000000 000000   000000 000000   000000 000000        ............
   3     070   000000 000000   ****** ******                                    ........

READ_BINARY_DECK
 Sect OctLoc
   3     072   000005 777640   000102 006000   000001 177640   000422 006000    .....B..........
   3     076   000000 177640   000000 006014   000000 177640   000000 006014    ................
   3     102   000000 600000   000000 000000   000000 000000   000000 000000    ................
   3     106   000000 000000   000000 000000                                    ........

READ_CATALOG_DATA
 Sect OctLoc
   3     110   000005 777640   000120 006000   000005 777640   000232 006000    .....P..........
   3     114   000001 777640   000420 006000   000000 177640   000000 006014    ................
   3     120   000000 600000   000000 000000   000000 000000   000000 000000    ................
   3     124   000000 000000   000000 000000                                    ........

READ_CATALOG_ENTRY
 Sect OctLoc
   3     126   000005 777640   000136 006000   000001 177640   000230 006000    .....^..........
   3     132   000005 777640   000315 006000   000000 177640   000000 006014    ................
   3     136   000000 600000   000000 000000   000000 000000   000000 000000    ................
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:317  
   3     142   000000 000000   000000 000000                                    ........

READ_DKEND_CARD
 Sect OctLoc
   3     144   000005 777640   000154 006000   000001 177640   000350 006000    .....l..........
   3     150   000024 777640   000240 006000   000000 177640   000000 006014    ................
   3     154   000000 600000   000000 000000   000000 000000   000000 000000    ................
   3     160   000000 000000   000000 000000                                    ........

READ_OBJECT_CARD
 Sect OctLoc
   3     162   000005 777640   000172 006000   000005 777640   000315 006000    .....z..........
   3     166   000027 777640   000265 006000   000000 177640   000000 006014    ................
   3     172   000000 600000   000000 000000   000000 000000   000000 000000    ................
   3     176   000000 000000   000000 000000                                    ........

READ_PATCH_CARD
 Sect OctLoc
   3     200   000005 777640   000210 006000   000001 177640   000350 006000    ................
   3     204   000024 777640   000323 006000   000000 177640   000000 006014    ................
   3     210   000000 600000   000000 000000   000000 000000   000000 000000    ................
   3     214   000000 000000   000000 000000                                    ........

TOL$CATALOG_ENTRY_KEY
 Sect OctLoc
   3     230   004*** ******   ****** ******                                    ........

TOL$CATALOG_KEY
 Sect OctLoc
   3     232   027*** ******   ****** ******   ****** ******   ****** ******    ................
   3     236   ****** ******   ****** ******                                    ........

TOL$DKEND_CARD
 Sect OctLoc
   3     240   ****** ******   ****** ******   ****** ******   ****** ******    ................

TOL$OBJECT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:318  
 Sect OctLoc
   3     265   ****** ******   ****** ******   ****** ******   ****** ******    ................

TOL$OBJECT_KEY
 Sect OctLoc
   3     315   027*** ******   ****** ******   ****** ******   ****** ******    ................
   3     321   ****** ******   ****** ******                                    ........

TOL$PATCH_CARD
 Sect OctLoc
   3     323   ****** ******   ****** ******   ****** ******   ****** ******    ................

TOL$PATCH_KEY
 Sect OctLoc
   3     350   004*** ******   ****** ******                                    ........

TOL$RELOC
 Sect OctLoc
   3     352   ****** ******   ****** ******   ****** ******   ****** ******    ................

BUFFER_ALLOCATED
 Sect OctLoc
   3     407   000000 000000                                                    ....

DECKFILE_DCB#
 Sect OctLoc
   3     411   000000 000000                                                    ....

NUMERICS
 Sect OctLoc
   3     413   060061 062063   064065 066067   070071 101102   103104 105106    0123456789ABCDEF
   3     417   107*** ******                                                    G...

DECK_KEY
 Sect OctLoc
   3     422   004*** ***000   000*** ******                                    ........

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:319  
MASTER_CATALOG_KEY
 Sect OctLoc
   3     424   016115 101123   124105 122137   103101 124101   114117 107040    .MASTER_CATALOG
   3     430   040040 040040   040040 040040

SAVED_KEY
 Sect OctLoc
   3     432   027*** ******   ****** ******   ****** ******   ****** ******    ................
   3     436   ****** ******   ****** ******                                    ........

SPLIT_DCW
 Sect OctLoc
   3     440   ****** 00****                                                    ....

SPLIT_LOAD
 Sect OctLoc
   3     441   3***** ******                                                    ....

ER#1
 Sect OctLoc
   3     442   052040 111116   040124 117114   044101 104112   125123 124137    * IN TOL$ADJUST_
   3     446   120101 124103   110137 111116   104105 130123   054040 040103    PATCH_INDEXS,  C
   3     452   101122 104040   045120 043040   111116 040104   105103 113040    ARD %P# IN DECK
   3     456   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3     462   107040 045103   043040 040040   054040 116125   114114 040117    G %C#   , NULL O
   3     466   103124 101114   040120 101124   103110 040126   101114 125105    CTAL PATCH VALUE
   3     472   040101 124040   103117 114125   115116 040045   103117 114040     AT COLUMN %COL

ER#2
 Sect OctLoc
   3     476   052040 111116   040124 117114   044101 104112   125123 124137    * IN TOL$ADJUST_
   3     502   120101 124103   110137 111116   104105 130123   054040 040103    PATCH_INDEXS,  C
   3     506   101122 104040   045120 043040   111116 040104   105103 113040    ARD %P# IN DECK
   3     512   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3     516   107040 045103   043040 040040   054040 116125   114114 040122    G %C#   , NULL R
   3     522   105114 117103   101124 105104   040117 103124   101114 040120    ELOCATED OCTAL P
   3     526   101124 103110   040126 101114   125105 040101   124040 103117    ATCH VALUE AT CO
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:320  
   3     532   114125 115116   040045 103117   114040 040040                    LUMN %COL

ER#3
 Sect OctLoc
   3     535   052040 111116   040124 117114   044102 125111   114104 137110    * IN TOL$BUILD_H
   3     541   105130 137114   117101 104054   040040 103101   122104 040045    EX_LOAD,  CARD %
   3     545   120043 040111   116040 104105   103113 040045   104043 040040    P# IN DECK %D#
   3     551   040040 111116   040103 101124   101114 117107   040045 103043      IN CATALOG %C#
   3     555   040040 040054   040122 110105   130040 120101   124103 110040       , RHEX PATCH
   3     561   120101 123124   040122 105101   104057 127122   111124 105040    PAST READ/WRITE
   3     565   104101 124101                                                    DATA

ER#4
 Sect OctLoc
   3     566   052040 111116   040124 117114   044102 125111   114104 137110    * IN TOL$BUILD_H
   3     572   105130 137114   117101 104054   040040 103101   122104 040045    EX_LOAD,  CARD %
   3     576   120043 040111   116040 104105   103113 040045   104043 040040    P# IN DECK %D#
   3     602   040040 111116   040103 101124   101114 117107   040045 103043      IN CATALOG %C#
   3     606   040040 040054   040103 110105   130040 120101   124103 110040       , CHEX PATCH
   3     612   120101 123124   040103 117116   124122 117114   040123 124117    PAST CONTROL STO
   3     616   122105 040104   101124 101040                                    RE DATA

ER#6
 Sect OctLoc
   3     620   052040 111116   040124 117114   044102 125111   114104 137110    * IN TOL$BUILD_H
   3     624   105130 137120   101124 103110   054040 040103   101122 104040    EX_PATCH,  CARD
   3     630   045120 043040   111116 040104   105103 113040   045104 043040    %P# IN DECK %D#
   3     634   040040 040111   116040 103101   124101 114117   107040 045103       IN CATALOG %C
   3     640   043040 040040   054040 110105   130040 120101   124103 110040    #   , HEX PATCH
   3     644   110101 123040   124127 117040   120101 124103   110105 123040    HAS TWO PATCHES
   3     650   106117 122040   117104 104040   114117 103101   124111 117116    FOR ODD LOCATION

ER#7
 Sect OctLoc
   3     654   052040 111116   040124 117114   044102 125111   114104 137110    * IN TOL$BUILD_H
   3     660   105130 137123   105107 115105   116124 054040   040103 101122    EX_SEGMENT,  CAR
   3     664   104040 045120   043040 111116   040104 105103   113040 045104    D %P# IN DECK %D
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:321  
   3     670   043040 040040   040111 116040   103101 124101   114117 107040    #    IN CATALOG
   3     674   045103 043040   040040 054040   122110 105130   040120 101124    %C#   , RHEX PAT
   3     700   103110 040106   117122 040101   040103 117116   124122 117114    CH FOR A CONTROL
   3     704   040123 124117   122105 040117   116114 131040   104105 103113     STORE ONLY DECK

ER#8
 Sect OctLoc
   3     710   052040 111116   040124 117114   044102 125111   114104 137110    * IN TOL$BUILD_H
   3     714   105130 137123   105107 115105   116124 054040   040103 101122    EX_SEGMENT,  CAR
   3     720   104040 045120   043040 111116   040104 105103   113040 045104    D %P# IN DECK %D
   3     724   043040 040040   040111 116040   103101 124101   114117 107040    #    IN CATALOG
   3     730   045103 043040   040040 054040   110105 130040   120101 124103    %C#   , HEX PATC
   3     734   110040 103101   122104 040101   104104 122105   123123 040116    H CARD ADDRESS N
   3     740   117124 040064   040103 110101   122101 103124   105122 123040    OT 4 CHARACTERS

ER#9
 Sect OctLoc
   3     744   052040 111116   040124 117114   044102 125111   114104 137110    * IN TOL$BUILD_H
   3     750   105130 137123   105107 115105   116124 054040   040103 101122    EX_SEGMENT,  CAR
   3     754   104040 045120   043040 111116   040104 105103   113040 045104    D %P# IN DECK %D
   3     760   043040 040040   040111 116040   103101 124101   114117 107040    #    IN CATALOG
   3     764   045103 043040   040040 054040   110105 130040   120101 124103    %C#   , HEX PATC
   3     770   110040 103101   122104 040101   104104 122105   123123 040102    H CARD ADDRESS B
   3     774   105114 117127   040104 105103   113040 123120   105103 111106    ELOW DECK SPECIF
   3    1000   111105 104040   117106 106123   105124 040040                    IED OFFSET

ER#10
 Sect OctLoc
   3    1003   052040 111116   040124 117114   044102 125111   114104 137117    * IN TOL$BUILD_O
   3    1007   103124 101114   137123 105107   115105 116124   054040 040103    CTAL_SEGMENT,  C
   3    1013   101122 104040   045120 043040   111116 040104   105103 113040    ARD %P# IN DECK
   3    1017   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3    1023   107040 045103   043040 040040   054040 117103   124101 114040    G %C#   , OCTAL
   3    1027   120101 124103   110040 103101   122104 040101   104104 122105    PATCH CARD ADDRE
   3    1033   123123 040116   117124 040061   055066 040103   110101 122101    SS NOT 1-6 CHARA
   3    1037   103124 105122   123040 040040                                    CTERS

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:322  
ER#11
 Sect OctLoc
   3    1041   052040 111116   040124 117114   044103 110105   103113 137102    * IN TOL$CHECK_B
   3    1045   111116 101122   131137 104101   124101 054040   040102 111116    INARY_DATA,  BIN
   3    1051   101122 131040   103101 122104   040045 102111   116040 111116    ARY CARD %BIN IN
   3    1055   040104 105103   113040 045104   043040 040040   040111 116040     DECK %D#    IN
   3    1061   103101 124101   114117 107040   045103 043040   040040 054040    CATALOG %C#   ,
   3    1065   102101 104040   114101 102114   105040 045102   114102 054040    BAD LABLE %BLB,
   3    1071   123057 102040   045104 105113                                    S/B %DEK

ER#12
 Sect OctLoc
   3    1073   052040 111116   040124 117114   044103 110105   103113 137102    * IN TOL$CHECK_B
   3    1077   111116 101122   131137 104101   124101 054040   040102 111116    INARY_DATA,  BIN
   3    1103   101122 131040   103101 122104   040045 102111   116040 111116    ARY CARD %BIN IN
   3    1107   040104 105103   113040 045104   043040 040040   040111 116040     DECK %D#    IN
   3    1113   103101 124101   114117 107040   045103 043040   040040 054040    CATALOG %C#   ,
   3    1117   116117 116055   116125 115105   122111 103040   123105 121125    NON-NUMERIC SEQU
   3    1123   105116 103105   040101 124040   103117 114125   115116 040045    ENCE AT COLUMN %
   3    1127   103114 115040                                                    CLM

ER#13
 Sect OctLoc
   3    1130   052040 111116   040124 117114   044103 110105   103113 137102    * IN TOL$CHECK_B
   3    1134   111116 101122   131137 104101   124101 054040   040102 111116    INARY_DATA,  BIN
   3    1140   101122 131040   103101 122104   040045 102111   116040 111116    ARY CARD %BIN IN
   3    1144   040104 105103   113040 045104   043040 040040   040111 116040     DECK %D#    IN
   3    1150   103101 124101   114117 107040   045103 043040   040040 054040    CATALOG %C#   ,
   3    1154   123105 121125   105116 103105   040111 123040   045123 105121    SEQUENCE IS %SEQ
   3    1160   054040 123057   102040 045102   111116 040040                    , S/B %BIN

ER#14
 Sect OctLoc
   3    1163   052040 111116   040124 117114   044103 110105   103113 137102    * IN TOL$CHECK_B
   3    1167   111116 101122   131137 104101   124101 054040   040102 111116    INARY_DATA,  BIN
   3    1173   101122 131040   103101 122104   040045 102111   116040 111116    ARY CARD %BIN IN
   3    1177   040104 105103   113040 045104   043040 040040   040111 116040     DECK %D#    IN
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:323  
   3    1203   103101 124101   114117 107040   045103 043040   040040 054040    CATALOG %C#   ,
   3    1207   111114 114105   107101 114040   114117 101104   040124 131120    ILLEGAL LOAD TYP
   3    1213   105040 045102   114040 040040                                    E %BL

ER#15
 Sect OctLoc
   3    1215   052040 111116   040124 117114   044103 110105   103113 137102    * IN TOL$CHECK_B
   3    1221   111116 101122   131137 104101   124101 054040   040102 111116    INARY_DATA,  BIN
   3    1225   101122 131040   103101 122104   040045 102111   116040 111116    ARY CARD %BIN IN
   3    1231   040104 105103   113040 045104   043040 040040   040111 116040     DECK %D#    IN
   3    1235   103101 124101   114117 107040   045103 043040   040040 054040    CATALOG %C#   ,
   3    1241   115120 103040   101123 123105   115102 114105   122040 104105    MPC ASSEMBLER DE
   3    1245   103113 040103   101122 104040   111123 040116   117124 040124    CK CARD IS NOT T
   3    1251   110105 040105   130120 105103   124105 104040   111104 040102    HE EXPECTED ID B
   3    1255   114117 103113                                                    LOCK

ER#16
 Sect OctLoc
   3    1256   052040 111116   040124 117114   044103 110105   103113 137103    * IN TOL$CHECK_C
   3    1262   101122 104137   103110 105103   113123 125115   054040 040102    ARD_CHECKSUM,  B
   3    1266   111116 101122   131040 103101   122104 040045   102111 116040    INARY CARD %BIN
   3    1272   111116 040104   105103 113040   045104 043040   040040 040111    IN DECK %D#    I
   3    1276   116040 103101   124101 114117   107040 045103   043040 040040    N CATALOG %C#
   3    1302   054040 103110   105103 113123   125115 040105   122122 117122    , CHECKSUM ERROR

ER#17
 Sect OctLoc
   3    1306   052040 111116   040124 117114   044103 117116   126105 122124    * IN TOL$CONVERT
   3    1312   137110 105130   054040 040103   101122 104040   045120 043040    _HEX,  CARD %P#
   3    1316   111116 040104   105103 113040   045104 043040   040040 040111    IN DECK %D#    I
   3    1322   116040 103101   124101 114117   107040 045103   043040 040040    N CATALOG %C#
   3    1326   054040 110105   130040 120101   124103 110040   103101 122104    , HEX PATCH CARD
   3    1332   040110 101123   040111 116126   101114 111104   040110 105130     HAS INVALID HEX
   3    1336   040103 110101   122101 103124   105122 040101   124040 103117     CHARACTER AT CO
   3    1342   114125 115116   040045 103117   114040 040040                    LUMN %COL

ER#18
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:324  
 Sect OctLoc
   3    1345   052040 111116   040124 117114   044103 117116   126105 122124    * IN TOL$CONVERT
   3    1351   137117 103124   101114 054040   040103 101122   104040 045120    _OCTAL,  CARD %P
   3    1355   043040 111116   040104 105103   113040 045104   043040 040040    # IN DECK %D#
   3    1361   040111 116040   103101 124101   114117 107040   045103 043040     IN CATALOG %C#
   3    1365   040040 054040   117103 124101   114040 120101   124103 110040      , OCTAL PATCH
   3    1371   103101 122104   040110 101123   040120 101124   103110 040126    CARD HAS PATCH V
   3    1375   101114 125105   040076 040061   062040 103110   101122 101103    ALUE > 12 CHARAC
   3    1401   124105 122123   040101 124040   103117 114125   115116 040045    TERS AT COLUMN %
   3    1405   103117 114040                                                    COL

ER#19
 Sect OctLoc
   3    1406   052040 111116   040124 117114   044103 117116   126105 122124    * IN TOL$CONVERT
   3    1412   137117 103124   101114 054040   040103 101122   104040 045120    _OCTAL,  CARD %P
   3    1416   043040 111116   040104 105103   113040 045104   043040 040040    # IN DECK %D#
   3    1422   040111 116040   103101 124101   114117 107040   045103 043040     IN CATALOG %C#
   3    1426   040040 054040   117103 124101   114040 120101   124103 110040      , OCTAL PATCH
   3    1432   103101 122104   040110 101123   040111 116126   101114 111104    CARD HAS INVALID
   3    1436   040117 103124   101114 040103   110101 122101   103124 105122     OCTAL CHARACTER
   3    1442   040101 124040   103117 114125   115116 040045   103117 114040     AT COLUMN %COL

ER#23
 Sect OctLoc
   3    1446   052040 111116   040124 117114   044107 105124   137116 105130    * IN TOL$GET_NEX
   3    1452   124137 103117   116124 122117   114137 127117   122104 054040    T_CONTROL_WORD,
   3    1456   040111 114114   105107 101114   040103 101114   114040 050120     ILLEGAL CALL (P
   3    1462   101123 124040   111117 124104   051040 040040                    AST IOTD)

ER#25
 Sect OctLoc
   3    1465   052040 111116   040124 117114   044115 117126   105137 105116    * IN TOL$MOVE_EN
   3    1471   124122 131054   040040 111114   114105 107101   114040 101114    TRY,  ILLEGAL AL
   3    1475   124122 105124   125122 116040   106122 117115   040124 117114    TRETURN FROM TOL
   3    1501   044123 101126   105137 104101   124101 040040                    $SAVE_DATA

ER#26
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:325  
 Sect OctLoc
   3    1504   052052 052040   101164 164145   155160 164040   164157 040157    *** Attempt to o
   3    1510   160145 156040   164150 145040   144145 143153   146151 154145    pen the deckfile
   3    1514   040146 141151   154145 144056                                     failed.

ER#27
 Sect OctLoc
   3    1516   052040 111116   040124 117114   044122 105101   104137 102125    * IN TOL$READ_BU
   3    1522   106106 105122   054040 040102   111116 101122   131040 111115    FFER,  BINARY IM
   3    1526   101107 105040   111116 040104   105103 113040   045104 043040    AGE IN DECK %D#
   3    1532   040040 040111   116040 103101   124101 114117   107040 045103       IN CATALOG %C
   3    1536   043040 040040   054040 116117   124040 103117   122122 105103    #   , NOT CORREC
   3    1542   124040 123111   132105 040045   123111 132105   040054 040123    T SIZE %SIZE , S
   3    1546   057102 040115   117104 040061   060064 040103   110101 122101    /B MOD 104 CHARA
   3    1552   103124 105122   123040 040040                                    CTERS

ER#28
 Sect OctLoc
   3    1554   052040 111116   040124 117114   044122 105101   104137 102125    * IN TOL$READ_BU
   3    1560   106106 105122   054040 040102   111116 101122   131040 111115    FFER,  BINARY IM
   3    1564   101107 105040   111116 040104   105103 113040   045104 043040    AGE IN DECK %D#
   3    1570   040040 040111   116040 103101   124101 114117   107040 045103       IN CATALOG %C
   3    1574   043040 040040   054040 116117   124040 103117   122122 105103    #   , NOT CORREC
   3    1600   124040 123111   132105 040045   123111 132105   040054 040123    T SIZE %SIZE , S
   3    1604   057102 040045   103117 125116   124052 061060   064040 103110    /B %COUNT*104 CH
   3    1610   101122 101103   124105 122123                                    ARACTERS

ER#29
 Sect OctLoc
   3    1612   052040 111116   040124 117114   044122 105101   104137 102125    * IN TOL$READ_BU
   3    1616   106106 105122   054040 040102   111116 101122   131040 111115    FFER,  BINARY IM
   3    1622   101107 105040   111116 040104   105103 113040   045104 043040    AGE IN DECK %D#
   3    1626   040040 040111   116040 103101   124101 114117   107040 045103       IN CATALOG %C
   3    1632   043040 040040   054040 115111   123123 111116   107040 040040    #   , MISSING

ER#30
 Sect OctLoc
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:326  
   3    1636   052040 111116   040124 117114   044122 105101   104137 103101    * IN TOL$READ_CA
   3    1642   124101 114117   107054 040040   111114 114105   107101 114040    TALOG,  ILLEGAL
   3    1646   113105 131040   123111 132105   040045 103132   040106 117122    KEY SIZE %CZ FOR
   3    1652   040103 101114   114054 040123   057102 040062   063040 103110     CALL, S/B 23 CH
   3    1656   101122 101103   124105 122123                                    ARACTERS

ER#31
 Sect OctLoc
   3    1660   052040 111116   040124 117114   044122 105101   104137 103101    * IN TOL$READ_CA
   3    1664   124101 114117   107054 040040   103101 124101   114117 107040    TALOG,  CATALOG
   3    1670   045103 043040   040040 054040   103117 116124   122117 114040    %C#   , CONTROL
   3    1674   102114 117103   113040 116117   124040 103117   122122 105103    BLOCK NOT CORREC
   3    1700   124040 123111   132105 040045   123111 132105   040054 040123    T SIZE %SIZE , S
   3    1704   057102 040070   040103 110101   122101 103124   105122 123040    /B 8 CHARACTERS

ER#32
 Sect OctLoc
   3    1710   052040 103101   124101 114117   107040 045103   101124 040040    * CATALOG %CAT
   3    1714   040040 040040   040040 040040   040040 040040   040040 040054                   ,
   3    1720   040115 111123   123111 116107   040040 ******                     MISSING  ..

ER#33
 Sect OctLoc
   3    1723   052040 111116   040124 117114   044122 105101   104137 104113    * IN TOL$READ_DK
   3    1727   105116 104054   040040 044040   104113 105116   104040 111115    END,  $ DKEND IM
   3    1733   101107 105040   045120 043040   111116 040104   105103 113040    AGE %P# IN DECK
   3    1737   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3    1743   107040 045103   043040 040040   054040 116117   124040 103117    G %C#   , NOT CO
   3    1747   122122 105103   124040 123111   132105 040045   123111 132105    RRECT SIZE %SIZE
   3    1753   040054 040123   057102 040070   064040 103110   101122 101103     , S/B 84 CHARAC
   3    1757   124105 122123                                                    TERS

ER#34
 Sect OctLoc
   3    1760   052040 111116   040124 117114   044122 105101   104137 104113    * IN TOL$READ_DK
   3    1764   105116 104054   040040 044040   104113 105116   104040 111115    END,  $ DKEND IM
   3    1770   101107 105040   045120 043040   111116 040104   105103 113040    AGE %P# IN DECK
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:327  
   3    1774   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3    2000   107040 045103   043040 040040   054040 103110   105103 113123    G %C#   , CHECKS
   3    2004   125115 040105   122122 117122                                    UM ERROR

ER#35
 Sect OctLoc
   3    2006   052040 111116   040124 117114   044122 105101   104137 104113    * IN TOL$READ_DK
   3    2012   105116 104054   040040 044040   104113 105116   104040 111115    END,  $ DKEND IM
   3    2016   101107 105040   045120 043040   111116 040104   105103 113040    AGE %P# IN DECK
   3    2022   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3    2026   107040 045103   043040 040040   054040 116117   124040 101040    G %C#   , NOT A
   3    2032   044040 104113   105116 104040   103101 122104                    $ DKEND CARD

ER#36
 Sect OctLoc
   3    2035   052040 111116   040124 117114   044122 105101   104137 104113    * IN TOL$READ_DK
   3    2041   105116 104054   040040 044040   104113 105116   104040 111115    END,  $ DKEND IM
   3    2045   101107 105040   045120 043040   111116 040104   105103 113040    AGE %P# IN DECK
   3    2051   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3    2055   107040 045103   043040 040040   054040 102101   104040 114101    G %C#   , BAD LA
   3    2061   102114 105040   045104 114102   054040 123057   102040 045104    BLE %DLB, S/B %D
   3    2065   105113 040040                                                    EK

ER#37
 Sect OctLoc
   3    2066   052040 111116   040124 117114   044122 105101   104137 104113    * IN TOL$READ_DK
   3    2072   105116 104054   040040 044040   104113 105116   104040 111115    END,  $ DKEND IM
   3    2076   101107 105040   045120 043040   111116 040104   105103 113040    AGE %P# IN DECK
   3    2102   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3    2106   107040 045103   043040 040040   054040 116117   116055 116125    G %C#   , NON-NU
   3    2112   115105 122111   103040 123105   121125 105116   103105 040101    MERIC SEQUENCE A
   3    2116   124040 103117   114125 115116   040045 103114   115040 040040    T COLUMN %CLM

ER#38
 Sect OctLoc
   3    2122   052040 111116   040124 117114   044122 105101   104137 104113    * IN TOL$READ_DK
   3    2126   105116 104054   040040 044040   104113 105116   104040 111115    END,  $ DKEND IM
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:328  
   3    2132   101107 105040   045120 043040   111116 040104   105103 113040    AGE %P# IN DECK
   3    2136   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3    2142   107040 045103   043040 040040   054040 123105   121125 105116    G %C#   , SEQUEN
   3    2146   103105 040111   123040 045123   105121 054040   123057 102040    CE IS %SEQ, S/B
   3    2152   045102 111116                                                    %BIN

ER#39
 Sect OctLoc
   3    2153   052040 111116   040124 117114   044122 105101   104137 104113    * IN TOL$READ_DK
   3    2157   105116 104054   040040 044040   104113 105116   104040 111115    END,  $ DKEND IM
   3    2163   101107 105040   045120 043040   111116 040104   105103 113040    AGE %P# IN DECK
   3    2167   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3    2173   107040 045103   043040 040040   054040 115111   123123 111116    G %C#   , MISSIN
   3    2177   107040 040040                                                    G

ER#40
 Sect OctLoc
   3    2200   052040 111116   040124 117114   044122 105101   104137 105116    * IN TOL$READ_EN
   3    2204   124122 131054   040040 105116   124122 131040   045105 043040    TRY,  ENTRY %E#
   3    2210   040040 040111   116040 103101   124101 114117   107040 045103       IN CATALOG %C
   3    2214   043040 040040   054040 116117   124040 103117   122122 105103    #   , NOT CORREC
   3    2220   124040 123111   132105 040045   123111 132105   040054 040123    T SIZE %SIZE , S
   3    2224   057102 040062   064040 103110   101122 101103   124105 122123    /B 24 CHARACTERS

ER#41
 Sect OctLoc
   3    2230   052040 111116   040124 117114   044122 105101   104137 105116    * IN TOL$READ_EN
   3    2234   124122 131054   040040 105116   124122 131040   045105 043040    TRY,  ENTRY %E#
   3    2240   040040 040111   116040 103101   124101 114117   107040 045103       IN CATALOG %C
   3    2244   043040 040040   054040 116117   124040 103117   122122 105103    #   , NOT CORREC
   3    2250   124040 113105   131040 123111   132105 040045   117132 054040    T KEY SIZE %OZ,
   3    2254   123057 102040   062063 040103   110101 122101   103124 105122    S/B 23 CHARACTER
   3    2260   123040 040040                                                    S

ER#42
 Sect OctLoc
   3    2261   052040 111116   040124 117114   044122 105101   104137 105116    * IN TOL$READ_EN
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:329  
   3    2265   124122 131054   040040 105116   124122 131040   045105 043040    TRY,  ENTRY %E#
   3    2271   040040 040111   116040 103101   124101 114117   107040 045103       IN CATALOG %C
   3    2275   043040 040040   054040 115111   123123 111116   107040 040040    #   , MISSING

ER#43
 Sect OctLoc
   3    2301   052040 111116   040124 117114   044122 105101   104137 117102    * IN TOL$READ_OB
   3    2305   112105 103124   054040 040111   114114 105107   101114 040113    JECT,  ILLEGAL K
   3    2311   105131 040123   111132 105040   045117 132040   106117 122040    EY SIZE %OZ FOR
   3    2315   103101 114114   054040 123057   102040 062063   040103 110101    CALL, S/B 23 CHA
   3    2321   122101 103124   105122 123040                                    RACTERS

ER#44
 Sect OctLoc
   3    2323   052040 111116   040124 117114   044122 105101   104137 117102    * IN TOL$READ_OB
   3    2327   112105 103124   054040 040044   040117 102112   105103 124040    JECT,  $ OBJECT
   3    2333   111115 101107   105040 045117   104040 040040   040040 040040    IMAGE %OD
   3    2337   040040 040040   040040 040040   040040 040040   040040 111116                  IN
   3    2343   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2347   040116 117124   040103 117122   122105 103124   040123 111132     NOT CORRECT SIZ
   3    2353   105040 045123   111132 105040   054040 123057   102040 071066    E %SIZE , S/B 96
   3    2357   040103 110101   122101 103124   105122 123040                     CHARACTERS

ER#45
 Sect OctLoc
   3    2362   052040 111116   040124 117114   044122 105101   104137 117102    * IN TOL$READ_OB
   3    2366   112105 103124   054040 040044   040117 102112   105103 124040    JECT,  $ OBJECT
   3    2372   111115 101107   105040 045117   104040 040040   040040 040040    IMAGE %OD
   3    2376   040040 040040   040040 040040   040040 040040   040040 111116                  IN
   3    2402   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2406   040103 110105   103113 123125   115040 105122   122117 122040     CHECKSUM ERROR

ER#46
 Sect OctLoc
   3    2412   052040 111116   040124 117114   044122 105101   104137 117102    * IN TOL$READ_OB
   3    2416   112105 103124   054040 040044   040117 102112   105103 124040    JECT,  $ OBJECT
   3    2422   111115 101107   105040 045117   104040 040040   040040 040040    IMAGE %OD
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:330  
   3    2426   040040 040040   040040 040040   040040 040040   040040 111116                  IN
   3    2432   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2436   040116 117124   040101 040044   040117 102112   105103 124040     NOT A $ OBJECT
   3    2442   103101 122104                                                    CARD

ER#47
 Sect OctLoc
   3    2443   052040 111116   040124 117114   044122 105101   104137 117102    * IN TOL$READ_OB
   3    2447   112105 103124   054040 040044   040117 102112   105103 124040    JECT,  $ OBJECT
   3    2453   111115 101107   105040 045117   104040 040040   040040 040040    IMAGE %OD
   3    2457   040040 040040   040040 040040   040040 040040   040040 111116                  IN
   3    2463   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2467   040102 101104   040114 117101   104040 124131   120105 040045     BAD LOAD TYPE %
   3    2473   117114 054040   123057 102040   104054 040120   054040 117122    OL, S/B D, P, OR
   3    2477   040122 040040                                                     R

ER#48
 Sect OctLoc
   3    2500   052040 111116   040124 117114   044122 105101   104137 117102    * IN TOL$READ_OB
   3    2504   112105 103124   054040 040044   040117 102112   105103 124040    JECT,  $ OBJECT
   3    2510   111115 101107   105040 045117   104040 040040   040040 040040    IMAGE %OD
   3    2514   040040 040040   040040 040040   040040 040040   040040 111116                  IN
   3    2520   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2524   040102 101104   040101 123123   105115 102114   105122 040124     BAD ASSEMBLER T
   3    2530   131120 105040   045117 101054   040123 057102   040115 054040    YPE %OA, S/B M,
   3    2534   107054 040117   122040 063040                                    G, OR 3

ER#49
 Sect OctLoc
   3    2536   052040 111116   040124 117114   044122 105101   104137 117102    * IN TOL$READ_OB
   3    2542   112105 103124   054040 040044   040117 102112   105103 124040    JECT,  $ OBJECT
   3    2546   111115 101107   105040 045117   104040 040040   040040 040040    IMAGE %OD
   3    2552   040040 040040   040040 040040   040040 040040   040040 102101                  BA
   3    2556   104040 123105   121125 105116   103105 040045   117123 040054    D SEQUENCE %OS ,
   3    2562   040123 057102   040060 060060   060040 040040                     S/B 0000

ER#50
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:331  
 Sect OctLoc
   3    2565   052040 111116   040124 117114   044122 105101   104137 120101    * IN TOL$READ_PA
   3    2571   124103 110054   040040 103101   122104 040045   120043 040111    TCH,  CARD %P# I
   3    2575   116040 104105   103113 040045   104043 040040   040040 111116    N DECK %D#    IN
   3    2601   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2605   040116 117124   040103 117122   122105 103124   040123 111132     NOT CORRECT SIZ
   3    2611   105040 045123   111132 105040   054040 123057   102040 070064    E %SIZE , S/B 84
   3    2615   040103 110101   122101 103124   105122 123040                     CHARACTERS

ER#51
 Sect OctLoc
   3    2620   052040 111116   040124 117114   044122 105101   104137 120101    * IN TOL$READ_PA
   3    2624   124103 110054   040040 103101   122104 040045   120043 040111    TCH,  CARD %P# I
   3    2630   116040 104105   103113 040045   104043 040040   040040 111116    N DECK %D#    IN
   3    2634   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2640   040103 110105   103113 123125   115040 105122   122117 122***     CHECKSUM ERROR.

ER#52
 Sect OctLoc
   3    2644   052040 111116   040124 117114   044122 105101   104137 120101    * IN TOL$READ_PA
   3    2650   124103 110054   040040 103101   122104 040045   120043 040111    TCH,  CARD %P# I
   3    2654   116040 104105   103113 040045   104043 040040   040040 111116    N DECK %D#    IN
   3    2660   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2664   040116 117124   040117 103124   101114 040117   122040 110105     NOT OCTAL OR HE
   3    2670   130040 120101   124103 110040   103101 122104   040040 040***    X PATCH CARD   .

ER#53
 Sect OctLoc
   3    2674   052040 111116   040124 117114   044122 105101   104137 120101    * IN TOL$READ_PA
   3    2700   124103 110054   040040 103101   122104 040045   120043 040111    TCH,  CARD %P# I
   3    2704   116040 104105   103113 040045   104043 040040   040040 111116    N DECK %D#    IN
   3    2710   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2714   040102 101104   040114 101102   114105 040045   120114 102054     BAD LABLE %PLB,
   3    2720   040123 057102   040045 104105   113040 040***                     S/B %DEK  .

ER#54
 Sect OctLoc
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:332  
   3    2723   052040 111116   040124 117114   044122 105101   104137 120101    * IN TOL$READ_PA
   3    2727   124103 110054   040040 103101   122104 040045   120043 040111    TCH,  CARD %P# I
   3    2733   116040 104105   103113 040045   104043 040040   040040 111116    N DECK %D#    IN
   3    2737   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2743   040110 105130   040120 101124   103110 040103   101122 104040     HEX PATCH CARD
   3    2747   102125 124040   116117 124040   103110 105130   040117 122040    BUT NOT CHEX OR
   3    2753   122110 105130   040040 040***                                    RHEX   .

ER#55
 Sect OctLoc
   3    2755   052040 111116   040124 117114   044122 105101   104137 120101    * IN TOL$READ_PA
   3    2761   124103 110054   040040 103101   122104 040045   120043 040111    TCH,  CARD %P# I
   3    2765   116040 104105   103113 040045   104043 040040   040040 111116    N DECK %D#    IN
   3    2771   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    2775   040110 105130   040120 101124   103110 040103   101122 104040     HEX PATCH CARD
   3    3001   127122 117116   107040 122105   126111 123111   117116 040045    WRONG REVISION %
   3    3005   110122 040040   040054 040123   057102 040045   104122 040040    HR   , S/B %DR
   3    3011   040040 040***                                                       .

ER#56
 Sect OctLoc
   3    3012   052040 111116   040124 117114   044122 105101   104137 120101    * IN TOL$READ_PA
   3    3016   124103 110054   040040 103101   122104 040045   120043 040111    TCH,  CARD %P# I
   3    3022   116040 104105   103113 040045   104043 040040   040040 111116    N DECK %D#    IN
   3    3026   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    3032   040110 105130   040120 101124   103110 040103   101122 104040     HEX PATCH CARD
   3    3036   116117 124040   111116 040115   120103 040101   123123 105115    NOT IN MPC ASSEM
   3    3042   102114 105122   040104 105103   113040 040***                    BLER DECK  .

ER#57
 Sect OctLoc
   3    3045   052040 111116   040124 117114   044122 105101   104137 120101    * IN TOL$READ_PA
   3    3051   124103 110054   040040 103101   122104 040045   120043 040111    TCH,  CARD %P# I
   3    3055   116040 104105   103113 040045   104043 040040   040040 111116    N DECK %D#    IN
   3    3061   040103 101124   101114 117107   040045 103043   040040 040054     CATALOG %C#   ,
   3    3065   040115 111123   123111 116107   040040 040***                     MISSING   .

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:333  
ER#58
 Sect OctLoc
   3    3070   052040 111116   040124 117114   044123 101126   105137 103110    * IN TOL$SAVE_CH
   3    3074   105103 113137   114117 103101   124111 117116   123054 040040    ECK_LOCATIONS,
   3    3100   104103 127040   123124 122111   116107 040111   123040 124117    DCW STRING IS TO
   3    3104   117040 106122   101107 115105   116124 105104   054040 115117    O FRAGMENTED, MO
   3    3110   122105 040124   110101 116040   061060 062062   040104 103127    RE THAN 1022 DCW
   3    3114   123040 040040                                                    S

ER#59
 Sect OctLoc
   3    3115   052040 111116   040124 117114   044123 101126   105137 114117    * IN TOL$SAVE_LO
   3    3121   101104 054040   040111 114114   105107 101114   040101 114124    AD,  ILLEGAL ALT
   3    3125   122105 124125   122116 040106   122117 115040   124117 114044    RETURN FROM TOL$
   3    3131   123101 126105   137104 101124   101040 040040                    SAVE_DATA

ER#61
 Sect OctLoc
   3    3134   052040 111116   040124 117114   044123 105124   137122 105114    * IN TOL$SET_REL
   3    3140   117103 101124   111117 116137   127117 122104   123054 040040    OCATION_WORDS,
   3    3144   102111 116101   122131 040103   101122 104040   045102 111116    BINARY CARD %BIN
   3    3150   040111 116040   104105 103113   040045 104043   040040 040040     IN DECK %D#
   3    3154   111116 040103   101124 101114   117107 040045   103043 040040    IN CATALOG %C#
   3    3160   040054 040111   114114 105107   101114 040122   105114 117103     , ILLEGAL RELOC
   3    3164   101124 111117   116040 124131   120105 040045   102125 057045    ATION TYPE %BU/%
   3    3170   102122 040106   117122 040127   117122 104040   045112 054040    BR FOR WORD %J,
   3    3174   123057 102040   060040 117122   040061 040040                    S/B 0 OR 1

ER#62
 Sect OctLoc
   3    3177   055055 101114   124122 105124   040111 116040   124117 114044    --ALTRET IN TOL$
   3    3203   122105 101104   137103 101124   101114 117107   040117 116040    READ_CATALOG ON
   3    3207   115044 122105   101104 040050   122105 101104   137103 101124    M$READ (READ_CAT
   3    3213   101114 117107   137104 101124   101051 040040                    ALOG_DATA)

ER#63
 Sect OctLoc
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:334  
   3    3216   055055 101114   124122 105124   040111 116040   124117 114044    --ALTRET IN TOL$
   3    3222   122105 101104   137105 116124   122131 040117   116040 115044    READ_ENTRY ON M$
   3    3226   122105 101104   040050 122105   101104 137103   101124 101114    READ (READ_CATAL
   3    3232   117107 137105   116124 122131   051040 040040                    OG_ENTRY)

ER#64
 Sect OctLoc
   3    3235   055055 101114   124122 105124   040111 116040   124117 114044    --ALTRET IN TOL$
   3    3241   122105 101104   137102 125106   106105 122040   117116 040115    READ_BUFFER ON M
   3    3245   044122 105101   104040 050122   105101 104137   102111 116101    $READ (READ_BINA
   3    3251   122131 137104   105103 113051                                    RY_DECK)

ER#65
 Sect OctLoc
   3    3253   055055 101114   124122 105124   040111 116040   124117 114044    --ALTRET IN TOL$
   3    3257   122105 101104   137117 102112   105103 124040   117116 040115    READ_OBJECT ON M
   3    3263   044122 105101   104040 050122   105101 104137   117102 112105    $READ (READ_OBJE
   3    3267   103124 137103   101122 104051                                    CT_CARD)

ER#66
 Sect OctLoc
   3    3271   055055 101114   124122 105124   040111 116040   124117 114044    --ALTRET IN TOL$
   3    3275   122105 101104   137104 113105   116104 040117   116040 115044    READ_DKEND ON M$
   3    3301   122105 101104   040050 122105   101104 137104   113105 116104    READ (READ_DKEND
   3    3305   137103 101122   104051 040040                                    _CARD)

ER#67
 Sect OctLoc
   3    3307   055055 101114   124122 105124   040111 116040   124117 114044    --ALTRET IN TOL$
   3    3313   122105 101104   137120 101124   103110 040117   116040 115044    READ_PATCH ON M$
   3    3317   122105 101104   040050 122105   101104 137120   101124 103110    READ (READ_PATCH
   3    3323   137103 101122   104051 040040                                    _CARD)

ER#70
 Sect OctLoc
   3    3325   052040 111116   040124 117114   044103 101114   103125 114101    * IN TOL$CALCULA
   3    3331   124105 137115   120103 137103   110105 103113   123125 115054    TE_MPC_CHECKSUM,
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:335  
   3    3335   040040 111114   114105 107101   114040 101114   124122 105124      ILLEGAL ALTRET
   3    3341   125122 116040   106122 117115   040124 117114   044123 101126    URN FROM TOL$SAV
   3    3345   105137 104101   124101 040040                                    E_DATA

ER#71
 Sect OctLoc
   3    3347   052040 111116   040124 117114   044122 105101   104137 120101    * IN TOL$READ_PA
   3    3353   124103 110105   123054 040040   103101 122104   040045 120043    TCHES,  CARD %P#
   3    3357   040111 116040   104105 103113   040045 104043   040040 040040     IN DECK %D#
   3    3363   111116 040103   101124 101114   117107 040045   103043 040040    IN CATALOG %C#
   3    3367   040054 040111   114114 105107   101114 040124   117040 110105     , ILLEGAL TO HE
   3    3373   130040 120101   124103 110040   101040 116117   116055 115120    X PATCH A NON-MP
   3    3377   103040 104105   103113 ******                                    C DECK..

ER#73
 Sect OctLoc
   3    3401   052040 111116   040124 117114   044102 125111   114104 137117    * IN TOL$BUILD_O
   3    3405   103124 101114   137123 105107   115105 116124   054040 040103    CTAL_SEGMENT,  C
   3    3411   101122 104040   045120 043040   111116 040104   105103 113040    ARD %P# IN DECK
   3    3415   045104 043040   040040 040111   116040 103101   124101 114117    %D#    IN CATALO
   3    3421   107040 045103   043040 040040   054040 117103   124101 114040    G %C#   , OCTAL
   3    3425   120101 124103   110040 106117   122040 115120   103040 103110    PATCH FOR MPC CH
   3    3431   105103 113123   125115 040104   101124 101040                    ECKSUM DATA

ER#74
 Sect OctLoc
   3    3434   052040 111116   040124 117114   044107 105124   137116 111117    * IN TOL$GET_NIO
   3    3440   137105 116124   122131 054040   122105 101104   040106 122117    _ENTRY, READ FRO
   3    3444   115040 124110   105040 104105   103113 106111   114105 040106    M THE DECKFILE F
   3    3450   101111 114105   104056 ******                                    AILED...

ERR#A
 Sect OctLoc
   3    3452   000001 ******                                                    ....

ERR#B
 Sect OctLoc
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:336  
   3    3453   000002 ******                                                    ....

ERR#C
 Sect OctLoc
   3    3454   000003 ******                                                    ....

ERR#D
 Sect OctLoc
   3    3455   000004 ******                                                    ....

ERR#E
 Sect OctLoc
   3    3456   000005 ******                                                    ....

ERR#F
 Sect OctLoc
   3    3457   000006 ******                                                    ....

ERR#G
 Sect OctLoc
   3    3460   000007 ******                                                    ....

ERR#H
 Sect OctLoc
   3    3461   000010 ******                                                    ....

ERR#HO
 Sect OctLoc
   3    3462   000052 ******                                                    .*..

ERR#I
 Sect OctLoc
   3    3463   000011 ******                                                    ....

ERR#J
 Sect OctLoc
   3    3464   000012 ******                                                    ....
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:337  

ERR#K
 Sect OctLoc
   3    3465   000013 ******                                                    ....

ERR#L
 Sect OctLoc
   3    3466   000014 ******                                                    ....

CHECKSUM_SPLIT
 Sect OctLoc
   3    3467   000000 ******                                                    ....

MPCBOT_BIT
 Sect OctLoc
   3    3470   444723 224663                                                    ....

CHECKSUM_SPLIT
 Sect OctLoc
   3    3471   000000 ******                                                    ....

LOAD_SKIP
 Sect OctLoc
   3    3472   0***** ******                                                    ....

(unnamed)
 Sect OctLoc
   5     000   104040 040040   000002 006000   000016 777640   001446 006000    D   ............
   5     004   000024 777640   003070 006000   000004 006000   000013 000000    .....8..........
   5     010   000000 006000   000315 006000   000441 006000   000010 006000    ................
   5     014   000432 006000   000000 000000   000016 777640   001465 006000    ................
   5     020   000016 006000   000000 000000   000021 777640   001636 006000    ................
   5     024   000022 006000   000000 000000   000027 777640   001660 006000    ................
   5     030   000026 006000   000000 000000   000016 777640   003177 006000    ................
   5     034   000032 006000   000000 000000   000012 377640   001710 006000    ................
   5     040   000036 006000   000000 000000   000027 777640   002200 006000    ................
   5     044   000042 006000   000000 000000   000030 777640   002230 006000    ."..............
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:338  
   5     050   000046 006000   000000 000000   000016 777640   003216 006000    .&..............
   5     054   000052 006000   000000 000000   000017 777640   002261 006000    .*..............
   5     060   000056 006000   000424 006000   000272 206000   037777 777640    ................
   5     064   000015 377640   003434 006000   000064 006000   077777 777777    .........4..?...
   5     070   000406 006000   000440 006000   000016 777640   003115 006000    .............M..
   5     074   000072 006000   000000 000026   000075 006000   000000 000000    .:.......=......
   5     100   000031 777640   001041 006000   000100 006000   000000 000000    .....!...@......
   5     104   000034 777640   001073 006000   000032 777640   001130 006000    .....;.......X..
   5     110   000106 006000   000104 006000   000031 777640   001163 006000    .F...D.......s..
   5     114   000112 006000   000000 000000   000040 777640   001215 006000    .J....... ......
   5     120   000116 006000   000000 000000   000027 777640   001256 006000    .N..............
   5     124   000122 006000   063777 777640   000035 777640   001516 006000    .R..3...........
   5     130   000126 006000   000000 000000   000035 777640   001554 006000    .V..............
   5     134   000132 006000   000000 000000   000015 777640   003235 006000    .Z..............
   5     140   000136 006000   000000 000000   000023 777640   001612 006000    .^..............
   5     144   000142 006000   000000 000000   000042 777640   003134 006000    .b......."...\..
   5     150   000146 006000   000000 000000   000021 777640   002301 006000    .f..............
   5     154   000152 006000   000000 000000   000036 777640   002323 006000    .j..............
   5     160   000156 006000   000000 000000   000027 777640   002362 006000    .n..............
   5     164   000265 006000   000000 000027   000314 006000   000162 006000    .............r..
   5     170   000165 006000   000002 006000   044040 040040   000174 006000    .u......$   .|..
   5     174   000030 777640   002412 006000   000034 777640   002443 006000    ................
   5     200   000176 006000   000000 000000   000035 777640   002500 006000    .~..............
   5     204   000202 006000   000000 000000   000026 777640   002536 006000    ................
   5     210   000206 006000   000000 000000   000015 777640   003253 006000    ................
   5     214   000212 006000   000000 000000   000031 377640   003347 006000    ................
   5     220   000216 006000   000000 000000   000033 777640   000654 006000    ................
   5     224   000222 006000   000000 000000   000033 777640   000710 006000    ................
   5     230   000226 006000   000000 000000   000036 777640   000744 006000    ................
   5     234   000232 006000   700000 777777   000030 777640   000535 006000    ................
   5     240   000236 006000   000000 000000   000031 777640   000566 006000    ................
   5     244   000242 006000   000000 000000   000033 777640   000620 006000    ................
   5     250   000246 006000   000003 777777   000036 777640   001306 006000    ................
   5     254   000252 006000   000000 000000   000035 777640   001003 006000    ................
   5     260   000256 006000   000000 000000   000032 777640   003401 006000    ................
   5     264   000262 006000   054040 040040   122040 040040   000270 006000    ....,   R   ....
   5     270   000033 777640   000442 006000   000036 777640   000476 006000    ................
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:339  
   5     274   000272 006000   000000 000000   000040 777640   001345 006000    ......... ......
   5     300   000276 006000   000000 000000   000037 777640   001406 006000    ................
   5     304   000302 006000   000000 000000   000034 777640   001723 006000    ................
   5     310   000306 006000   000000 000000   000025 777640   001760 006000    ................
   5     314   000240 006000   000000 000024   000264 006000   000312 006000    ................
   5     320   000315 006000   000000 000000   000026 777640   002006 006000    ................
   5     324   000322 006000   000000 000000   000030 777640   002035 006000    ................
   5     330   000326 006000   000000 000000   000033 777640   002066 006000    .............6..
   5     334   000030 777640   002122 006000   000334 006000   000332 006000    .....R..........
   5     340   000015 777640   003271 006000   000340 006000   000000 000000    ................
   5     344   000024 777640   002153 006000   000344 006000   000000 000000    .....k..........
   5     350   000032 777640   002565 006000   000350 006000   000000 000000    ................
   5     354   000023 577640   002620 006000   000323 006000   000000 000000    ................
   5     360   000347 006000   000354 006000   000027 577640   002644 006000    ................
   5     364   000362 006000   000000 000000   000026 577640   002674 006000    ................
   5     370   000366 006000   000000 000000   000031 577640   002723 006000    ................
   5     374   000372 006000   000000 000000   000034 577640   002755 006000    ................
   5     400   000376 006000   000000 000000   000032 577640   003012 006000    ................
   5     404   000402 006000   000000 000000   000015 777640   003307 006000    ................
   5     410   000406 006000   000000 000000   000022 577640   003045 006000    .............%..
   5     414   000412 006000   000003 006000   000021 777640   003325 006000    ................
   5     420   000416 006000   000000 006003   000011 777640   001504 006000    ................
   5     424   000422 006000                                                    ....

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:340  
--  Include file information  --

   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure TOL$CHECK_CALL_SEQUENCE.
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:341  

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    11- 11093    907   358     4      0  y y y   11   1 TOL$CHECK_CALL_SEQUENCE
                                  4    762    y y    6     TOL$GET_CATALOG
                                  4   1673    y y    7     TOL$GET_DECK
                                  4   2007    y y    7     TOL$GET_NIO_DECK
  1  9674-  9691     10     4     4    116  y y y    2     2 TOL$CHECK_CONTROL_OVERLAP
  2  9693-  9728     31     0     4    232  y y y    0     2 TOL$CHECK_DATA_OVERLAP
  3  9730-  9779     36     0     4    442  y y y    0     2 TOL$CHECK_DCW_OVERLAP
  4  9762-  9777     13     0     4    536  y   y    0      3 TOL$GET_NEXT_CONTROL_WORD
  5  9781-  9796      9     0     4    605  y y y    0     2 TOL$CHECK_STATUS_OVERLAP
  6  9798-  9812      7     4     4    637  y y y    2     2 TOL$SAVE_CHECK_LOCATIONS
  7  9814-  9864     22    17     4    670  y   y    4     2 TOL$CHECKSUM
  8  9933-  9960     13     0     4   1176  y y y    0     2 TOL$MOVE_ENTRY
  9  9962-  9986     15     2     4   1300  y   y    1     2 TOL$READ_CATALOG
 10  9988- 10006     15     0     4   1364  y y y    0     2 TOL$READ_ENTRY
 11 10008- 10039     29     0     4   1447  y   y    0     2 TOL$READ_MASTER_CATALOG
 12 10041- 10071     20     0     4   1604  y y y    0     2 TOL$SET_CATALOG_SEQUENCE
 13 10153- 10180      5    11     4   2117  y   y    5     2 TOL$CHECK_CHECKSUM
 14 10182- 10205     11     4     4   2142  y   y    2     2 TOL$CHECK_SEQ
 15 10207- 10313     78     1     4   2205  y y y    0     2 TOL$MOVE_DATA
 16 10242- 10312     51     0     4   2330  y   y    0      3 TOL$MORE_LOAD
 17 10266- 10311     31     0     4   2433  y   y    0       4 TOL$SAVE_LOAD
 18 10297- 10310     11     0     4   2606  y   y    0        5 TOL$SPLIT_LOAD_SEGMENT
 19 10315- 10558    164     0     4   2660  y   y    0     2 TOL$READ_BINARY
 20 10323- 10398     40     2     4   2673  y   y    0      3 TOL$CHECK_BINARY_DATA
 21 10357- 10397     17    14     4   3033  y   y    4       4 TOL$CHECK_CARD_CHECKSUM
 22 10400- 10440     30     3     4   3123  y   y    0      3 TOL$MOVE_LOAD
 23 10442- 10459     14     0     4   3255  y   y    0      3 TOL$READ_BUFFER
 24 10461- 10557     74     0     4   3344  y   y    0      3 TOL$RELOCATE_DATA
 25 10485- 10508     12     5     4   3433  y   y    0       4 TOL$MOVE_RELOCATION_BITS
 26 10510- 10540     28     0     4   3513  y   y    0       4 TOL$RELOCATE_WORDS
 27 10542- 10556     12     0     4   3622  y   y    0       4 TOL$SET_RELOCATION_WORDS
 28 10560- 10594     24     0     4   3670  y y y    0     2 TOL$READ_OBJECT
 29 10596- 10931    213     2     4   4044  y   y    0     2 TOL$READ_PATCHES
 30 10623- 10738     73    16     4   4150  y   y    0      3 TOL$BUILD_HEX_SEGMENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:342  
 31 10673- 10697     20     0     4   4243  y   y    0       4 TOL$BUILD_HEX_LOAD
 32 10699- 10718     17     0     4   4363  y   y    0       4 TOL$BUILD_HEX_PATCH
 33 10720- 10737     12     0     4   4436  y   y    0       4 TOL$CONVERT_HEX
 34 10740- 10865     78    14     4   4514  y   y    0      3 TOL$BUILD_OCTAL_SEGMENT
 35 10785- 10846     47     0     4   4617  y   y    0       4 TOL$BUILD_OCTAL_PATCH
 36 10821- 10845     20     0     4   4743  y   y    0        5 TOL$ADJUST_PATCH_INDEXS
 37 10848- 10864     11     0     4   5021  y   y    0       4 TOL$CONVERT_OCTAL
 38 10867- 10895     20     0     4   5074  y   y    0      3 TOL$READ_DKEND
 39 10897- 10930     23     0     4   5225  y   y    0      3 TOL$READ_PATCH
 40 10933- 11028     47     2     4   5367  y   y    0     2 TOL$RECALCULATE_MPC_CHECKSUM
 41 10978- 11027     25    12     4   5516  y   y    0      3 TOL$CALCULATE_MPC_CHECKSUM
 42 11030- 11052     14     0     4   5650  y y y    0     2 TOL$SET_DATA_SEQUENCE
 43 11054- 11075     17     0     4   5707  y   y    0     2 TOL$SET_RELOCATION
 44 11077- 11092     11     0     4   5747  y   y    0     2 TOL$OPEN_DECKFILE
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:343  

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              11   4      0 Proc    0                              9639   4      2 Assign  0
         $  9640   4      4 If      0                              9641   4     10 Do      0
            9642   4     10 Assign  0                              9643   4     13 Assign  0
            9644   4     14 Altret  0                              9646   4     15 If      0
            9647   4     20 Do      0                              9648   4     20 Call    0
            9649   4     23 Assign  0                              9650   4     25 EndDo   0
            9651   4     25 Assign  0                              9652   4     26 Assign  0
            9653   4     30 Assign  0                           $  9654   4     32 Call    0
            9655   4     40 Call    0                              9656   4     42 Call    0
            9657   4     44 Call    0                         $$$  9658   4     46 Assign  0
            9659   4     54 Assign  0                         $$$  9660   4     57 Call    0
       $$$  9661   4     70 Assign  0                              9662   4    101 If      0
            9663   4    104 Do      0                              9664   4    104 Call    0
            9665   4    107 Assign  0                              9666   4    110 EndDo   0
            9667   4    110 Return  0
            9670   4    111 Call    0 CHECK_RETURN_ERROR
            9671   4    114 Assign  0                              9672   4    115 Altret  0
            9674   4    116 Proc    1                              9681   4    117 DoIndx  1
$$$$$$$$$$  9682   4    121 If      1                              9683   4    147 Altret  1
$$$$$$$$$$  9684   4    151 If      1                              9685   4    174 Altret  1
  $$$$$$$$  9686   4    176 If      1                              9687   4    220 Altret  1
            9688   4    222 EndInd  1                              9689   4    230 Return  1
            9693   4    232 Proc    2                          $$  9695   4    233 If      2
            9696   4    240 Assign  2                              9697   4    243 Assign  2
            9698   4    245 Assign  2                          $$  9699   4    247 Assign  2
         $  9700   4    256 If      2                           $  9701   4    264 Call    2
            9702   4    272 Assign  2                              9703   4    275 Assign  2
         $  9704   4    277 Call    2                              9705   4    305 Assign  2
            9706   4    307 Assign  2                         $$$  9707   4    310 Assign  2
            9708   4    316 Assign  2                         $$$  9709   4    321 Call    2
       $$$  9710   4    332 Assign  2                              9711   4    343 DoWhil  2
            9712   4    345 Assign  2                        $$$$  9713   4    350 Assign  2
         $  9714   4    362 Call    2                         $$$  9717   4    370 Assign  2
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:344  
         $  9718   4    377 If      2                              9719   4    403 Assign  2
       $$$  9720   4    406 Call    2                         $$$  9721   4    417 Assign  2
            9722   4    430 EndWhi  2                              9723   4    432 Return  2
            9725   4    434 Assign  2 DATA_OVERLAP                 9726   4    437 Assign  2
            9727   4    440 Altret  2                              9730   4    442 Proc    3
            9732   4    443 Assign  3                              9733   4    444 Assign  3
       $$$  9734   4    445 Assign  3                              9735   4    453 Call    3
         $  9736   4    455 If      3                              9737   4    462 Do      3
            9738   4    462 Assign  3                              9739   4    465 Assign  3
            9740   4    466 Altret  3                              9742   4    470 DoWhil  3
        $$  9743   4    472 Assign  3                              9744   4    476 Assign  3
         $  9745   4    477 Call    3                           $  9748   4    505 Call    3
         $  9749   4    513 If      3                              9750   4    517 Assign  3
            9751   4    522 Call    3                              9752   4    524 EndWhi  3
            9753   4    526 Return  3                              9756   4    530 Assign  3 DCW_OVERLAP
            9757   4    533 Assign  3                              9758   4    534 Altret  3
            9762   4    536 Proc    4                         $$$  9764   4    537 If      4
            9765   4    546 Do      4                           $  9766   4    546 If      4
            9767   4    553 Assign  4                              9768   4    556 If      4
            9769   4    561 Call    4                              9770   4    565 EndDo   4
            9771   4    565 Assign  4                          $$  9772   4    567 Assign  4
            9773   4    574 Assign  4                          $$  9774   4    577 Assign  4
            9775   4    603 Return  4                              9781   4    605 Proc    5
            9783   4    606 Assign  5                              9784   4    611 Assign  5
         $  9785   4    613 Call    5                           $  9788   4    621 Call    5
            9789   4    627 Return  5                              9792   4    631 Assign  5 STATUS_OVERLAP
            9793   4    634 Assign  5                              9794   4    635 Altret  5
            9798   4    637 Proc    6                              9805   4    640 If      6
            9806   4    643 Call    6                         $$$  9807   4    647 Assign  6
        $$  9808   4    656 Assign  6                              9809   4    663 Assign  6
            9810   4    666 Return  6                              9814   4    670 Proc    7
            9841   4    671 Assign  7                              9842   4    674 Assign  7
            9843   4    676 Assign  7                              9844   4    700 Assign  7
            9845   4    702 DoIndx  7                          $$  9846   4    704 Assign  7
            9847   4    711 Assign  7                              9848   4    714 Assign  7
            9849   4    717 Assign  7                          $$  9850   4    722 EndInd  7
            9851   4    731 DoWhil  7                              9853   4    732 Assign  7
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:345  
            9854   4    734 Assign  7                              9855   4    737 Assign  7
            9856   4    741 Assign  7                              9857   4    743 Assign  7
            9858   4    746 Assign  7                              9859   4    747 EndWhi  7
            9860   4    753 Assign  7                              9861   4    755 Assign  7
            9862   4    760 Return  7                              9866   4    762 Entry   0
            9873   4    764 Call    0                              9874   4    767 Assign  0
            9875   4    771 Call    0                              9876   4    773 Assign  0
            9877   4    775 Assign  0                     $$$$$$$  9878   4   1000 Call    0
            9890   4   1026 Assign  0                              9891   4   1027 Assign  0
            9892   4   1031 Assign  0                          $$  9893   4   1032 If      0
            9894   4   1037 Call    0                              9895   4   1042 Call    0
            9896   4   1046 Call    0                          $$  9897   4   1050 If      0
            9898   4   1061 If      0                              9899   4   1064 Do      0
            9900   4   1064 Assign  0                              9901   4   1067 Call    0
            9902   4   1071 EndDo   0                              9903   4   1072 Do      0
            9904   4   1072 Assign  0                              9905   4   1075 Assign  0
            9906   4   1077 Assign  0                           $  9907   4   1101 Assign  0
            9908   4   1106 Call    0                              9909   4   1112 Call    0
            9910   4   1114 EndDo   0                              9911   4   1114 Assign  0
            9912   4   1117 Assign  0                          $$  9913   4   1121 DoIndx  0
            9915   4   1126 Call    0                              9916   4   1130 Call    0
    $$$$$$  9917   4   1132 EndInd  0                              9918   4   1154 If      0
            9919   4   1157 Do      0                              9920   4   1157 Assign  0
            9921   4   1160 Call    0                              9922   4   1162 EndDo   0
            9923   4   1163 Assign  0                              9924   4   1166 Call    0
            9925   4   1171 Return  0
            9928   4   1172 Call    0 CATALOG_RETURN_ERROR
            9929   4   1175 Altret  0                              9933   4   1176 Proc    8
            9935   4   1177 If      8                              9936   4   1202 Do      8
            9937   4   1202 Assign  8                              9938   4   1205 Assign  8
        $$  9939   4   1207 Assign  8                              9940   4   1216 Altret  8
  $$$$$$$$  9942   4   1220 Call    8                        $$$$  9950   4   1246 Call    8
         $  9955   4   1264 Assign  8                              9956   4   1270 Return  8
            9958   4   1272 Call    8 CANT_HAPPEN                  9960   4   1276 EndPrc  8
            9962   4   1300 Proc    9                           $  9970   4   1301 Assign  9
            9971   4   1305 If      9                              9972   4   1311 Assign  9
            9973   4   1314 If      9                              9974   4   1320 Call    9
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:346  
$$$$$$$$$$  9975   4   1324 MonCal  9                              9976   4   1330 Assign  9
            9977   4   1333 If      9                              9978   4   1335 Call    9
            9979   4   1341 Return  9                          $$  9982   4   1343 If      9 BAD_CATALOG_READ
            9983   4   1351 Call    9                              9984   4   1356 Call    9
            9986   4   1362 EndPrc  9                              9988   4   1364 Proc   10
$$$$$$$$$$  9990   4   1365 MonCal 10                              9991   4   1371 Assign 10
            9992   4   1374 If     10                              9993   4   1376 Call   10
            9994   4   1402 If     10                              9995   4   1406 Call   10
            9996   4   1412 Assign 10                          $$  9997   4   1415 If     10
            9998   4   1422 Assign 10                              9999   4   1424 Return 10
        $$ 10002   4   1426 If     10 BAD_ENTRY_READ              10003   4   1434 Call   10
           10004   4   1441 Call   10                             10006   4   1445 EndPrc 10
           10008   4   1447 Proc   11                             10010   4   1450 Call   11
           10011   4   1454 Assign 11                           $ 10012   4   1456 DoIndx 11
           10013   4   1462 Call   11                          $$ 10014   4   1464 If     11
           10015   4   1471 Do     11                           $ 10016   4   1471 Assign 11
           10017   4   1476 Assign 11                             10018   4   1501 EndDo  11
    $$$$$$ 10019   4   1501 EndInd 11                             10020   4   1523 Assign 11
           10021   4   1526 Assign 11                           $ 10022   4   1530 If     11
           10023   4   1535 Do     11                             10024   4   1535 Assign 11
           10025   4   1537 Assign 11                             10026   4   1540 EndDo  11
           10027   4   1541 DoIndx 11                        $$$$ 10028   4   1543 If     11
           10029   4   1555 Do     11                             10030   4   1555 Assign 11
           10031   4   1560 Assign 11                             10032   4   1562 EndDo  11
           10033   4   1562 EndInd 11                             10034   4   1570 If     11
           10035   4   1572 Assign 11                             10036   4   1576 Call   11
           10037   4   1602 Return 11                             10041   4   1604 Proc   12
        $$ 10043   4   1605 If     12                      $$$$$$ 10044   4   1612 If     12
           10050   4   1641 Do     12                             10051   4   1641 Assign 12
           10052   4   1644 Assign 12                             10053   4   1645 Altret 12
           10056   4   1647 Do     12                             10057   4   1647 Assign 12
           10058   4   1651 Assign 12                             10059   4   1653 Assign 12
           10060   4   1655 Assign 12                             10061   4   1657 Assign 12
           10062   4   1661 EndDo  12                             10063   4   1661 If     12
           10064   4   1663 Do     12                             10065   4   1663 Assign 12
           10066   4   1666 Assign 12                             10067   4   1667 Altret 12
           10069   4   1671 Return 12                             10073   4   1673 Entry   0
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:347  
           10081   4   1675 Call    0                             10082   4   1700 Assign  0
           10083   4   1702 Call    0                             10084   4   1704 Assign  0
           10085   4   1706 Assign  0                             10086   4   1711 Call    0
   $$$$$$$ 10087   4   1713 Call    0                             10099   4   1741 Call    0
           10100   4   1743 Call    0                             10101   4   1745 Call    0
           10102   4   1747 Call    0                             10103   4   1751 Call    0
        $$ 10104   4   1753 If      0                             10106   4   1767 Call    0
           10107   4   1771 If      0                             10109   4   1774 Assign  0
           10110   4   1777 Call    0                             10111   4   2002 Return  0
           10114   4   2003 Call    0 DECK_RETURN_ERROR           10115   4   2006 Altret  0
           10119   4   2007 Entry   0                             10127   4   2011 Assign  0
           10128   4   2013 Call    0                           $ 10129   4   2015 Assign  0
         $ 10131   4   2022 Assign  0                  $$$$$$$$$$ 10132   4   2026 MonCal  0
         $ 10133   4   2032 Assign  0                             10135   4   2036 Assign  0
           10136   4   2041 Assign  0                  $$$$$$$$$$ 10137   4   2045 MonCal  0
         $ 10138   4   2051 Assign  0                             10140   4   2056 Assign  0
       $$$ 10141   4   2061 Assign  0                  $$$$$$$$$$ 10142   4   2074 MonCal  0
         $ 10143   4   2100 Assign  0                           $ 10145   4   2105 Assign  0
           10146   4   2111 Return  0                             10149   4   2112 Call    0 BAD_READ
           10153   4   2117 Proc   13                          $$ 10171   4   2120 Call   13
         $ 10176   4   2130 If     13                             10177   4   2134 Call   13
           10178   4   2140 Return 13                             10182   4   2142 Proc   14
           10189   4   2143 DoIndx 14                          $$ 10190   4   2144 IntCal 14
           10194   4   2151 If     14                             10195   4   2154 Call   14
           10196   4   2160 EndInd 14                     $$$$$$$ 10197   4   2165 IntCal 14
           10200   4   2172 Assign 14                             10201   4   2175 If     14
           10202   4   2177 Call   14                             10203   4   2203 Return 14
           10207   4   2205 Proc   15                           $ 10213   4   2206 Assign 15
           10214   4   2212 DoWhil 15                             10216   4   2213 If     15
           10217   4   2217 Do     15                             10218   4   2217 If     15
           10219   4   2222 Do     15                             10220   4   2222 If     15
         $ 10221   4   2226 Assign 15                             10222   4   2232 Assign 15
           10223   4   2235 Assign 15                           $ 10224   4   2237 Assign 15
           10225   4   2243 Assign 15                             10226   4   2246 Assign 15
           10227   4   2251 Altret 15                             10229   4   2253 Assign 15
           10230   4   2255 Assign 15                          $$ 10231   4   2256 Call   15
         $ 10232   4   2270 Assign 15                           $ 10233   4   2300 Assign 15
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:348  
           10234   4   2304 EndDo  15                             10235   4   2304 Call   15
           10236   4   2306 EndWhi 15                           $ 10237   4   2314 Assign 15
           10238   4   2320 Assign 15                             10239   4   2323 Assign 15
           10240   4   2326 Return 15                             10242   4   2330 Proc   16
         $ 10244   4   2331 If     16                          $$ 10245   4   2335 Assign 16
           10246   4   2347 Do     16                          $$ 10247   4   2347 If     16
           10248   4   2357 Do     16                             10249   4   2357 If     16
           10250   4   2361 Assign 16                          $$ 10252   4   2364 Assign 16
           10253   4   2375 EndDo  16                             10254   4   2376 Do     16
       $$$ 10255   4   2376 If     16                             10257   4   2412 Do     16
           10258   4   2412 Assign 16                         $$$ 10259   4   2414 Assign 16
           10260   4   2426 EndDo  16                             10261   4   2427 Call   16
           10262   4   2431 EndDo  16                             10263   4   2431 EndDo  16
           10264   4   2431 Return 16                             10266   4   2433 Proc   17
       $$$ 10268   4   2434 If     17                          $$ 10269   4   2445 Assign 17
           10270   4   2457 Do     17                             10271   4   2457 Assign 17
       $$$ 10272   4   2462 If     17                          $$ 10273   4   2476 Assign 17
           10274   4   2510 Assign 17                             10275   4   2514 Assign 17
        $$ 10276   4   2515 Assign 17                             10278   4   2527 Assign 17
      $$$$ 10279   4   2531 Assign 17                      $$$$$$ 10281   4   2546 Call   17
         $ 10289   4   2567 If     17                             10290   4   2574 Assign 17
           10291   4   2575 EndDo  17                             10292   4   2575 Call   17
           10293   4   2577 Return 17                             10295   4   2601 Call   17 CANT_HAPPEN
           10297   4   2606 Proc   18                           $ 10299   4   2607 Assign 18
         $ 10300   4   2612 If     18                             10301   4   2620 Do     18
           10302   4   2620 Assign 18                             10303   4   2625 Assign 18
         $ 10304   4   2631 Assign 18                             10305   4   2637 Assign 18
           10306   4   2642 EndDo  18                         $$$ 10307   4   2642 Assign 18
           10308   4   2654 Return 18                             10311   4   2656 EndPrc 17
           10315   4   2660 Proc   19                             10317   4   2661 Call   19
           10318   4   2663 Call   19                             10319   4   2665 Call   19
           10320   4   2667 Call   19                             10321   4   2671 Return 19
           10323   4   2673 Proc   20                             10330   4   2674 DoIndx 20
         $ 10331   4   2676 Assign 20                         $$$ 10332   4   2702 Call   20
         $ 10337   4   2717 If     20                             10338   4   2723 Call   20
           10339   4   2727 Assign 20                           $ 10340   4   2732 Call   20
        $$ 10341   4   2740 If     20                             10342   4   2747 Call   20
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:349  
         $ 10343   4   2753 EndInd 20                             10344   4   2763 If     20
           10345   4   2767 Return 20                          $$ 10346   4   2771 If     20
           10347   4   3001 Call   20                           $ 10348   4   3005 Assign 20
           10349   4   3011 Assign 20                             10350   4   3014 Assign 20
           10351   4   3017 Assign 20                             10352   4   3023 If     20
           10353   4   3025 Assign 20                             10354   4   3030 Assign 20
           10355   4   3031 Return 20                             10357   4   3033 Proc   21
           10377   4   3034 If     21                             10378   4   3037 Return 21
     $$$$$ 10379   4   3040 Call   21                             10384   4   3056 Assign 21
           10385   4   3057 Assign 21                             10386   4   3061 Assign 21
       $$$ 10387   4   3063 Assign 21                             10388   4   3071 Assign 21
         $ 10389   4   3074 Assign 21                             10390   4   3100 Assign 21
           10391   4   3103 Assign 21                             10392   4   3105 Assign 21
           10393   4   3107 Assign 21                           $ 10394   4   3111 If     21
           10395   4   3115 Call   21                             10396   4   3121 Return 21
           10400   4   3123 Proc   22                             10410   4   3124 Assign 22
           10411   4   3125 Assign 22                             10412   4   3126 DoIndx 22
         $ 10413   4   3130 Assign 22                           $ 10414   4   3134 If     22
           10415   4   3141 Do     22                             10416   4   3141 Assign 22
         $ 10417   4   3143 Assign 22                             10418   4   3150 Assign 22
           10419   4   3153 If     22                             10420   4   3155 Do     22
         $ 10421   4   3155 Assign 22                             10422   4   3161 Assign 22
           10423   4   3164 EndDo  22                             10424   4   3164 Assign 22
           10425   4   3165 DoWhil 22                           $ 10426   4   3166 Assign 22
           10427   4   3173 Assign 22                           $ 10428   4   3176 Assign 22
         $ 10429   4   3203 Assign 22                             10430   4   3210 Assign 22
           10431   4   3214 Assign 22                          $$ 10432   4   3215 EndWhi 22
         $ 10433   4   3224 Assign 22                           $ 10434   4   3232 Assign 22
           10435   4   3236 EndDo  22                             10436   4   3236 Assign 22
         $ 10437   4   3243 EndInd 22                             10438   4   3253 Return 22
           10442   4   3255 Proc   23                             10444   4   3256 Assign 23
           10445   4   3261 Assign 23                  $$$$$$$$$$ 10446   4   3264 MonCal 23
           10447   4   3270 Assign 23                         $$$ 10448   4   3273 If     23
           10449   4   3277 Call   23                       $$$$$ 10450   4   3303 If     23
           10451   4   3315 Call   23                             10452   4   3321 Return 23
        $$ 10455   4   3323 If     23 BAD_BINARY_READ             10456   4   3331 Call   23
           10457   4   3336 Call   23                             10459   4   3342 EndPrc 23
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:350  
           10461   4   3344 Proc   24                             10463   4   3345 DoIndx 24
         $ 10464   4   3347 Assign 24                           $ 10465   4   3353 If     24
           10466   4   3360 Do     24                             10467   4   3360 Assign 24
           10468   4   3363 If     24                             10469   4   3365 Do     24
           10470   4   3365 Call   24                             10471   4   3367 Call   24
           10472   4   3371 EndDo  24                             10473   4   3371 Assign 24
           10474   4   3372 Assign 24                             10475   4   3373 DoWhil 24
           10476   4   3374 Call   24                          $$ 10477   4   3376 Assign 24
           10478   4   3405 Assign 24                          $$ 10479   4   3407 EndWhi 24
           10480   4   3416 Assign 24                             10481   4   3421 EndDo  24
         $ 10482   4   3421 EndInd 24                             10483   4   3431 Return 24
           10485   4   3433 Proc   25                             10497   4   3434 Assign 25
           10498   4   3435 DoIndx 25                           $ 10499   4   3436 Assign 25
           10500   4   3442 If     25                             10501   4   3443 DoIndx 25
$$$$$$$$$$ 10502   4   3444 Assign 25                  $$$$$$$$$$ 10503   4   3460 Assign 25
           10504   4   3474 EndInd 25                             10505   4   3501 Assign 25
           10506   4   3504 EndInd 25                             10507   4   3511 Return 25
           10510   4   3513 Proc   26                             10512   4   3514 If     26
           10513   4   3516 Do     26                             10514   4   3516 Assign 26
           10515   4   3521 Assign 26                             10516   4   3524 Assign 26
           10517   4   3526 EndDo  26                             10518   4   3526 Assign 26
           10519   4   3530 If     26                           $ 10520   4   3532 Assign 26
           10521   4   3536 Assign 26                             10522   4   3541 If     26
           10523   4   3545 DoIndx 26                             10524   4   3550 If     26
           10525   4   3553 Do     26                           $ 10526   4   3553 Assign 26
           10527   4   3557 Assign 26                             10528   4   3563 Assign 26
           10529   4   3565 EndDo  26                             10530   4   3565 If     26
           10531   4   3570 Do     26                           $ 10532   4   3570 Assign 26
           10533   4   3574 Assign 26                             10534   4   3600 Assign 26
           10535   4   3602 EndDo  26                             10536   4   3602 Assign 26
       $$$ 10537   4   3605 EndInd 26                             10538   4   3620 Return 26
           10542   4   3622 Proc   27                             10544   4   3623 DoIndx 27
         $ 10545   4   3624 If     27                             10546   4   3633 Call   27
           10547   4   3637 If     27                             10548   4   3643 Assign 27
           10549   4   3646 Assign 27                             10550   4   3650 If     27
           10551   4   3654 Assign 27                             10552   4   3657 Assign 27
           10553   4   3661 EndInd 27                             10555   4   3666 Return 27
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:351  
           10560   4   3670 Proc   28                           $ 10561   4   3671 Assign 28
           10562   4   3675 If     28                             10563   4   3701 Call   28
$$$$$$$$$$ 10564   4   3705 MonCal 28                             10565   4   3711 Assign 28
           10566   4   3714 If     28                             10567   4   3716 Call   28
       $$$ 10568   4   3722 Call   28                          $$ 10574   4   3736 If     28
           10575   4   3746 Call   28                          $$ 10576   4   3752 If     28
           10579   4   3766 Call   28                          $$ 10580   4   3772 If     28
           10583   4   4006 Call   28                             10584   4   4012 If     28
           10585   4   4015 Call   28                             10586   4   4021 Assign 28
           10587   4   4022 Return 28                          $$ 10589   4   4024 If     28 BAD_OBJECT_READ
           10590   4   4032 Call   28                             10591   4   4036 Assign 28
           10592   4   4041 Assign 28                             10593   4   4042 Altret 28
           10596   4   4044 Proc   29                           $ 10603   4   4045 If     29
           10604   4   4055 Return 29                             10605   4   4056 Assign 29
           10606   4   4061 Call   29                           $ 10607   4   4063 DoIndx 29
           10609   4   4067 Call   29                             10610   4   4071 If     29
           10611   4   4075 Call   29                             10612   4   4100 Do     29
           10613   4   4100 If     29                             10614   4   4104 Do     29
           10615   4   4104 If     29                             10616   4   4110 Call   29
           10617   4   4113 Call   29                             10618   4   4117 EndDo  29
           10619   4   4117 EndDo  29                     $$$$$$$ 10620   4   4117 EndInd 29
           10621   4   4146 Return 29                             10623   4   4150 Proc   30
       $$$ 10646   4   4151 Assign 30                             10647   4   4160 Assign 30
           10648   4   4163 Assign 30                             10649   4   4165 Assign 30
           10650   4   4166 If     30                             10651   4   4172 Do     30
           10652   4   4172 Assign 30                             10653   4   4174 Assign 30
           10654   4   4176 If     30                             10655   4   4177 Call   30
           10656   4   4203 EndDo  30                          $$ 10657   4   4203 IntCal 30
           10661   4   4207 If     30                             10662   4   4212 Call   30
           10663   4   4216 Assign 30                             10664   4   4217 Call   30
           10665   4   4221 Assign 30                             10666   4   4224 If     30
           10667   4   4226 Call   30                             10668   4   4232 Assign 30
           10669   4   4235 Call   30                             10670   4   4237 Call   30
           10671   4   4241 Return 30                             10673   4   4243 Proc   31
           10675   4   4244 Assign 31                             10676   4   4246 Assign 31
           10677   4   4250 If     31                          $$ 10678   4   4254 Assign 31
         $ 10679   4   4262 Assign 31                             10680   4   4267 Assign 31
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:352  
           10681   4   4273 Assign 31                             10682   4   4300 If     31
           10683   4   4302 Do     31                         $$$ 10684   4   4302 If     31
           10686   4   4317 Call   31                         $$$ 10687   4   4323 If     31
           10689   4   4337 Call   31                             10690   4   4343 EndDo  31
           10691   4   4344 Do     31                          $$ 10692   4   4344 If     31
           10693   4   4355 Call   31                             10694   4   4361 EndDo  31
           10695   4   4361 Return 31                             10699   4   4363 Proc   32
           10701   4   4364 Assign 32                             10702   4   4366 Call   32
         $ 10703   4   4370 If     32                             10704   4   4375 Assign 32
           10705   4   4400 Assign 32                             10706   4   4402 If     32
           10707   4   4406 Do     32                             10708   4   4406 If     32
           10709   4   4412 Call   32                             10710   4   4416 Assign 32
           10711   4   4420 Call   32                           $ 10712   4   4422 Assign 32
           10713   4   4427 Assign 32                             10714   4   4431 EndDo  32
           10715   4   4431 Assign 32                             10716   4   4434 Return 32
           10720   4   4436 Proc   33                             10722   4   4437 Assign 33
           10723   4   4442 Assign 33                             10724   4   4444 DoIndx 33
        $$ 10725   4   4445 IntCal 33                             10729   4   4452 If     33
           10730   4   4455 Call   33                   $$$$$$$$$ 10731   4   4462 Assign 33
           10732   4   4472 EndInd 33                             10733   4   4500 Assign 33
           10734   4   4505 Assign 33                             10735   4   4512 Return 33
           10740   4   4514 Proc   34                          $$ 10761   4   4515 IntCal 34
           10765   4   4521 If     34                             10766   4   4525 Call   34
           10767   4   4531 Assign 34                             10768   4   4532 Assign 34
           10769   4   4533 Call   34                             10770   4   4535 Assign 34
           10771   4   4537 Assign 34                           $ 10772   4   4541 Assign 34
       $$$ 10773   4   4546 If     34                             10775   4   4562 Call   34
         $ 10776   4   4566 Assign 34                             10777   4   4571 Assign 34
           10778   4   4575 Assign 34                             10779   4   4577 DoWhil 34
           10780   4   4601 Call   34                             10781   4   4603 EndWhi 34
        $$ 10782   4   4606 Assign 34                             10783   4   4615 Return 34
           10785   4   4617 Proc   35                        $$$$ 10786   4   4620 IntCal 35
           10791   4   4632 If     35                          $$ 10792   4   4635 IntCal 35
           10797   4   4643 Assign 35                             10798   4   4644 Assign 35
           10799   4   4647 Assign 35                             10800   4   4650 Call   35
           10801   4   4652 If     35                             10802   4   4655 Return 35
           10803   4   4657 Call   35                           $ 10804   4   4661 Assign 35
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:353  
         $ 10805   4   4666 Assign 35                             10806   4   4676 If     35
           10807   4   4702 Do     35                             10808   4   4702 Assign 35
           10809   4   4704 Assign 35                             10810   4   4710 Assign 35
           10811   4   4714 Assign 35                             10812   4   4716 Assign 35
           10813   4   4722 Assign 35                             10814   4   4726 Assign 35
           10815   4   4730 EndDo  35                           $ 10816   4   4730 If     35
           10817   4   4735 Assign 35                             10818   4   4737 Assign 35
           10819   4   4741 Return 35                             10821   4   4743 Proc   36
           10823   4   4744 If     36                             10824   4   4747 Do     36
         $ 10825   4   4747 If     36                             10827   4   4756 Call   36
           10828   4   4762 Assign 36                             10829   4   4764 Return 36
         $ 10831   4   4766 If     36                             10832   4   4773 Do     36
           10833   4   4773 Assign 36                             10834   4   4776 Assign 36
           10835   4   5000 EndDo  36                             10836   4   5000 If     36
           10837   4   5004 Do     36                             10838   4   5004 Assign 36
           10839   4   5006 Assign 36                             10840   4   5010 EndDo  36
           10841   4   5010 If     36                             10842   4   5013 Call   36
           10843   4   5017 Return 36                             10848   4   5021 Proc   37
           10850   4   5022 If     37                             10851   4   5026 Call   37
           10852   4   5032 Assign 37                             10853   4   5035 DoIndx 37
        $$ 10854   4   5036 IntCal 37                             10858   4   5043 If     37
           10859   4   5046 Call   37                  $$$$$$$$$$ 10860   4   5053 Assign 37
           10861   4   5064 EndInd 37                             10862   4   5072 Return 37
           10867   4   5074 Proc   38                             10869   4   5075 Assign 38
       $$$ 10870   4   5100 Assign 38                             10871   4   5113 Assign 38
$$$$$$$$$$ 10872   4   5116 MonCal 38                             10873   4   5122 Assign 38
           10874   4   5125 If     38                             10875   4   5127 Call   38
       $$$ 10876   4   5133 Call   38                          $$ 10882   4   5147 If     38
           10883   4   5157 Call   38                             10884   4   5163 If     38
           10885   4   5166 Call   38                             10886   4   5172 Assign 38
         $ 10887   4   5174 Call   38                             10888   4   5202 Return 38
        $$ 10891   4   5204 If     38 BAD_DKEND_READ              10892   4   5212 Call   38
           10893   4   5217 Call   38                             10895   4   5223 EndPrc 38
           10897   4   5225 Proc   39                  $$$$$$$$$$ 10899   4   5226 MonCal 39
           10900   4   5232 Assign 39                             10901   4   5235 If     39
           10902   4   5237 Call   39                         $$$ 10903   4   5243 Call   39
        $$ 10909   4   5257 If     39                             10911   4   5267 Call   39
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:354  
           10912   4   5273 If     39                             10913   4   5276 Call   39
           10914   4   5302 If     39                             10915   4   5306 Return 39
         $ 10916   4   5310 If     39                             10918   4   5320 Call   39
           10919   4   5324 If     39                             10920   4   5330 Call   39
           10921   4   5334 If     39                             10922   4   5340 Call   39
           10923   4   5344 Return 39                          $$ 10926   4   5346 If     39 BAD_PATCH_READ
           10927   4   5354 Call   39                             10928   4   5361 Call   39
           10930   4   5365 EndPrc 39                             10933   4   5367 Proc   40
         $ 10942   4   5370 Assign 40                             10943   4   5374 Assign 40
        $$ 10944   4   5376 Call   40                             10945   4   5407 Assign 40
           10946   4   5414 If     40                             10947   4   5416 Do     40
           10948   4   5416 Assign 40                             10949   4   5417 Assign 40
           10950   4   5421 Assign 40                     $$$$$$$ 10951   4   5422 Call   40
           10959   4   5446 Assign 40                             10960   4   5450 Call   40
           10961   4   5452 Assign 40                             10962   4   5455 EndDo  40
           10963   4   5455 Assign 40                             10964   4   5460 Assign 40
           10965   4   5462 Assign 40                     $$$$$$$ 10966   4   5464 Call   40
           10974   4   5510 Assign 40                             10975   4   5512 Call   40
           10976   4   5514 Return 40                             10978   4   5516 Proc   41
           10997   4   5517 Assign 41                             10998   4   5521 Assign 41
           10999   4   5522 DoIndx 41                   $$$$$$$$$ 11000   4   5524 Assign 41
   $$$$$$$ 11001   4   5530 Assign 41                             11002   4   5533 Assign 41
   $$$$$$$ 11003   4   5537 Assign 41                     $$$$$$$ 11004   4   5542 Assign 41
           11005   4   5545 Assign 41                             11006   4   5551 Assign 41
           11007   4   5554 EndInd 41                             11008   4   5562 DoWhil 41
           11009   4   5565 Assign 41                             11010   4   5570 Assign 41
           11011   4   5572 Assign 41                             11012   4   5575 EndWhi 41
           11013   4   5600 Assign 41                             11014   4   5602 Assign 41
           11015   4   5606 Assign 41                             11016   4   5612 Assign 41
   $$$$$$$ 11017   4   5614 Call   41                             11024   4   5640 Return 41
           11025   4   5642 Call   41 CANT_HAPPEN                 11027   4   5646 EndPrc 41
           11030   4   5650 Proc   42                          $$ 11032   4   5651 If     42
           11033   4   5656 Do     42                          $$ 11034   4   5656 If     42
           11038   4   5671 Do     42                             11039   4   5671 Assign 42
           11040   4   5674 Assign 42                             11041   4   5675 Altret 42
           11045   4   5677 Do     42                             11046   4   5677 Assign 42
           11047   4   5701 Assign 42                             11048   4   5703 EndDo  42
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:355  
           11049   4   5703 Assign 42                             11050   4   5705 Return 42
           11054   4   5707 Proc   43                             11056   4   5710 If     43
           11057   4   5714 Do     43                             11058   4   5714 Assign 43
           11059   4   5715 Assign 43                             11060   4   5716 Assign 43
           11061   4   5717 Return 43                             11063   4   5720 If     43
           11064   4   5724 Do     43                             11065   4   5724 Assign 43
           11066   4   5726 Assign 43                             11067   4   5727 Assign 43
           11068   4   5730 Return 43                         $$$ 11070   4   5731 Assign 43
           11071   4   5741 Assign 43                             11072   4   5743 Assign 43
           11073   4   5746 Return 43                             11077   4   5747 Proc   44
           11079   4   5750 If     44                             11080   4   5752 Return 44
$$$$$$$$$$ 11081   4   5753 MonCal 44                             11082   4   5757 Assign 44
        $$ 11083   4   5761 Assign 44                             11084   4   5765 Return 44
        $$ 11087   4   5767 If     44 NO_DECKFILE                 11088   4   5775 Call   44
           11089   4   6001 Assign 44                             11090   4   6003 Return 44
           11093   4   6005 EndPrc  0

  **** Statement type totals  ****

   344 Assign   152 Call      10 MonCal   130 If        58 Return    17 Altret
     8 IntCal    17 DoIndx     8 DoWhil    46 Do        17 EndInd     8 EndWhi
    35 EndDo     45 Proc       9 EndPrc     3 Entry     17 Labels

 # major stmts=  744 Code/major= 4.13 # stmts=  907 Code/stmt= 3.39  Point total=115.0
 Cost/major stmt=  4.2 Cost/stmt=  3.4 Total cost=   3139.9

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$$$
   6-8  $$$$$$
  8-10  $$$
 10-12
 12-14
 14-16
 16-18  $
 18-20
 20-22
 22-??  $
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:356  

 **** Variables and constants ****

  ****  Section 002 RoData TOL$CHECK_CALL_SEQUENCE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 FPTN_                      0-0-0/w PTR         r     1 IS$

  ****  Section 003  Data  TOL$CHECK_CALL_SEQUENCE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   226-0-0/w PTR         r     1 BINARY$                  407-0-0/w UBIN        r     1 BUFFER_ALLOCATED
   227-0-0/w PTR         r     1 CALL_SEQ$                216-0-0/w UBIN        r     1 CARD_SEQ
  3467-0-0/w UBIN        r     1 CHECKSUM_BINARY         3471-0-0/w UBIN        r     1 CHECKSUM_BINARY
   410-0-0/w UBIN(18)    r     1 CHECK_RELOC              217-0-0/w UBIN        r     1 DECKFILE_ARS#
   411-0-0/w UBIN        r     1 DECKFILE_DCB#            240-0-0/w CHAR(84)    r     1 DKEND_CARD_
   442-0-0/c STRC(1008)  r     1 ER#1                    1003-0-0/c STRC(1080)  r     1 ER#10
  1041-0-0/c STRC(936)   r     1 ER#11                   1073-0-0/c STRC(1044)  r     1 ER#12
  1130-0-0/c STRC(972)   r     1 ER#13                   1163-0-0/c STRC(936)   r     1 ER#14
  1215-0-0/c STRC(1188)  r     1 ER#15                   1256-0-0/c STRC(864)   r     1 ER#16
  1306-0-0/c STRC(1116)  r     1 ER#17                   1345-0-0/c STRC(1188)  r     1 ER#18
  1406-0-0/c STRC(1152)  r     1 ER#19                    476-0-0/c STRC(1116)  r     1 ER#2
  1446-0-0/c STRC(540)   r     1 ER#23                   1465-0-0/c STRC(540)   r     1 ER#25
  1504-0-0/c STRC(360)   r     1 ER#26                   1516-0-0/c STRC(1080)  r     1 ER#27
  1554-0-0/c STRC(1080)  r     1 ER#28                   1612-0-0/c STRC(720)   r     1 ER#29
   535-0-0/c STRC(900)   r     1 ER#3                    1636-0-0/c STRC(648)   r     1 ER#30
  1660-0-0/c STRC(864)   r     1 ER#31                   1710-0-0/c STRC(378)   r     1 ER#32
  1723-0-0/c STRC(1044)  r     1 ER#33                   1760-0-0/c STRC(792)   r     1 ER#34
  2006-0-0/c STRC(828)   r     1 ER#35                   2035-0-0/c STRC(900)   r     1 ER#36
  2066-0-0/c STRC(1008)  r     1 ER#37                   2122-0-0/c STRC(900)   r     1 ER#38
  2153-0-0/c STRC(756)   r     1 ER#39                    566-0-0/c STRC(936)   r     1 ER#4
  2200-0-0/c STRC(864)   r     1 ER#40                   2230-0-0/c STRC(900)   r     1 ER#41
  2261-0-0/c STRC(576)   r     1 ER#42                   2301-0-0/c STRC(648)   r     1 ER#43
  2323-0-0/c STRC(1116)  r     1 ER#44                   2362-0-0/c STRC(864)   r     1 ER#45
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:357  
  2412-0-0/c STRC(900)   r     1 ER#46                   2443-0-0/c STRC(1044)  r     1 ER#47
  2500-0-0/c STRC(1080)  r     1 ER#48                   2536-0-0/c STRC(828)   r     1 ER#49
  2565-0-0/c STRC(972)   r     1 ER#50                   2620-0-0/c STRC(711)   r     1 ER#51
  2644-0-0/c STRC(855)   r     1 ER#52                   2674-0-0/c STRC(819)   r     1 ER#53
  2723-0-0/c STRC(927)   r     1 ER#54                   2755-0-0/c STRC(1035)  r     1 ER#55
  3012-0-0/c STRC(963)   r     1 ER#56                   3045-0-0/c STRC(675)   r     1 ER#57
  3070-0-0/c STRC(756)   r     1 ER#58                   3115-0-0/c STRC(540)   r     1 ER#59
   620-0-0/c STRC(1008)  r     1 ER#6                    3134-0-0/c STRC(1260)  r     1 ER#61
  3177-0-0/c STRC(540)   r     1 ER#62                   3216-0-0/c STRC(540)   r     1 ER#63
  3235-0-0/c STRC(504)   r     1 ER#64                   3253-0-0/c STRC(504)   r     1 ER#65
  3271-0-0/c STRC(504)   r     1 ER#66                   3307-0-0/c STRC(504)   r     1 ER#67
   654-0-0/c STRC(1008)  r     1 ER#7                    3325-0-0/c STRC(648)   r     1 ER#70
  3347-0-0/c STRC(918)   r     1 ER#71                   3401-0-0/c STRC(972)   r     1 ER#73
  3434-0-0/c STRC(486)   r     1 ER#74                    710-0-0/c STRC(1008)  r     1 ER#8
   744-0-0/c STRC(1116)  r     1 ER#9                    3452-0-0/w UBIN(18)    r     1 ERR#A
  3453-0-0/w UBIN(18)    r     1 ERR#B                   3454-0-0/w UBIN(18)    r     1 ERR#C
  3455-0-0/w UBIN(18)    r     1 ERR#D                   3456-0-0/w UBIN(18)    r     1 ERR#E
  3457-0-0/w UBIN(18)    r     1 ERR#F                   3460-0-0/w UBIN(18)    r     1 ERR#G
  3461-0-0/w UBIN(18)    r     1 ERR#H                   3462-0-0/w UBIN(18)    r     1 ERR#HO
  3463-0-0/w UBIN(18)    r     1 ERR#I                   3464-0-0/w UBIN(18)    r     1 ERR#J
  3465-0-0/w UBIN(18)    r     1 ERR#K                   3466-0-0/w UBIN(18)    r     1 ERR#L
   220-0-0/w UBIN        r     1 I                        221-0-0/w UBIN        r     1 IONTP_FOUND
   222-0-0/w UBIN        r     1 J                        223-0-0/w UBIN        r     1 K
  3472-0-0/w UBIN        r     1 LOAD_WORD                412-0-0/w PTR         r     1 M$DECKFILE$
   424-0-0/w STRC(216)   r     1 MASTER_CATALOG_KEY      3470-0-0/w UBIN        r     1 MPCBOT
  3470-0-0/w BIT         r     1 MPCBOT_BIT               413-0-0/c CHAR(17)    r     1 NUMERICS
   265-0-0/w CHAR(96)    r     1 OBJECT_                  432-0-0/w STRC(216)   r     1 SAVED_KEY
   224-0-0/w UBIN        r     1 SPAN_LOWER               225-0-0/w UBIN        r     1 SPAN_UPPER
   441-0-0/w UBIN        r     1 SPLIT_WD1                406-0-0/w PTR         r     1 START_LOAD$
   226-0-0/w PTR         r     1 TOL$BINARY$              227-0-0/w PTR         r     1 TOL$CALL_SEQ$
   216-0-0/w UBIN        r     1 TOL$CARD_SEQ
   230-0-0/b STRC(45)    r     1 TOL$CATALOG_ENTRY_KEY
   232-0-0/w STRC(216)   r     1 TOL$CATALOG_KEY          217-0-0/w UBIN        r     1 TOL$DECKFILE_ARS#
   240-0-0/w STRC(756)   r     1 TOL$DKEND_CARD           220-0-0/w UBIN        r     1 TOL$I
   221-0-0/w UBIN        r     1 TOL$IONTP_FOUND          222-0-0/w UBIN        r     1 TOL$J
   223-0-0/w UBIN        r     1 TOL$K                    265-0-0/w STRC(864)   r     1 TOL$OBJECT
   315-0-0/w STRC(216)   r     1 TOL$OBJECT_KEY           323-0-0/w STRC(756)   r     1 TOL$PATCH_CARD
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:358  
   350-0-0/b STRC(45)    r     1 TOL$PATCH_KEY
   352-0-0/w STRC        r     1 TOL$RELOC(0:27)
   224-0-0/w UBIN        r     1 TOL$SPAN_LOWER           225-0-0/w UBIN        r     1 TOL$SPAN_UPPER
   406-0-0/w PTR         r     1 TOL$START_LOAD$

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

   226-0-0/w STRC        r     1 BINARYP
   226-0-0/b UBIN(18)    r         2 ADDRESS

   227-0-0/w STRC        r     1 CALL_SEQP
   227-0-0/b UBIN(18)    r         2 ADDRESS

   420-0-0/w STRC(72)    r     1 CATALOG_CONTROL
   420-0-0/w UBIN        r         2 SEED

   420-0-0/w STRC(72)    r     1 CATALOG_DATA
   420-0-0/b UBIN(18)    r         2 DECK#
   420-2-0/b UBIN(18)    r         2 ENTRY_COUNT
   421-0-0/w STRC        r         2 CHECKSUM

   230-0-0/b STRC(45)    r     1 CATALOG_ENTRY_KEY
   230-1-0/b UBIN(18)    r         2 DECK#
   230-3-0/b UBIN(18)    r         2 ENTRY#

   232-0-0/w STRC(216)   r     1 CATALOG_KEY
   232-0-0/b UBIN(9)     r         2 SIZE
   232-1-0/c STRC(207)   r         2 SPLIT
   237-2-0/b UBIN(18)    r          3 DECK#

  3467-0-0/w STRC        r     1 CHECKSUM_SPLIT
  3467-2-0/b UBIN(18)    r         2 LOWER

  3471-0-0/w STRC        r     1 CHECKSUM_SPLIT
  3471-2-0/b UBIN(18)    r         2 LOWER

PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:359  
   422-0-0/b STRC(45)    r     1 DECK_KEY
   422-1-0/b UBIN(18)    r         2 DECK#

   240-0-0/w STRC(756)   r     1 DKEND_CARD
   240-0-0/c CHAR(7)     r         2 CONTROL
   241-3-0/c CHAR(8)     r         2 TYPE
   260-2-0/c CHAR(6)     r         2 REVISION
   262-0-0/c CHAR(4)     r         2 LBL
   263-0-0/c CHAR(4)     r         2 SEQ
   264-0-0/w UBIN        r         2 CHECKSUM

   350-0-0/b STRC(45)    r     1 DKEND_KEY
   350-1-0/b UBIN(18)    r         2 DECK#
   350-3-0/b UBIN(18)    r         2 CARD#

   323-0-0/w STRC(756)   r     1 HEX_ASCII
   323-0-0/w CHAR(80)    r         2 DATA
   323-0-0/c CHAR        r         2 CHARS(0:79)

   323-0-0/w STRC(756)   r     1 HEX_CARD
   324-2-0/c CHAR        r         2 CR
   334-0-0/c CHAR(6)     r         2 REVISION

  3472-0-0/w STRC        r     1 LOAD_SKIP
  3472-0-3/b UBIN(15)    r         2 SIZE

   265-0-0/w STRC(864)   r     1 OBJECT
   265-0-0/w STRC(720)   r         2 BCD
   265-0-0/c CHAR(7)     r          3 CONTROL
   266-3-0/c CHAR(8)     r          3 TYPE
   272-1-0/c CHAR        r          3 LOAD_TYPE
   303-3-0/c CHAR        r          3 ASSEMBLER
   307-0-0/w CHAR(4)     r          3 LBL
   310-0-0/w CHAR(4)     r          3 SEQ
   311-0-0/b UBIN(18)    r         2 DECK#
   311-2-0/b UBIN(18)    r         2 BINARY_COUNT
   312-0-0/b UBIN(18)    r         2 TOTAL_COUNT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:360  
   312-2-0/b UBIN(18)    r         2 LOAD_SIZE
   314-0-0/w UBIN        r         2 CHECKSUM

   315-0-0/w STRC(216)   r     1 OBJECT_KEY
   315-0-0/b UBIN(9)     r         2 SIZE
   315-1-0/c STRC(207)   r         2 SPLIT
   315-1-0/c CHAR(21)    r          3 DATA
   322-2-0/c CHAR(2)     r          3 CLEAR
   322-2-0/b UBIN(18)    r          3 DECK#

     0-0-0/d STRC(2088)  r     1 OLD_DECKFILE
    44-0-0/d STRC(756)   r         2 V

   323-0-0/w STRC(756)   r     1 PATCH_ASCII
   323-0-0/w CHAR(80)    r         2 DATA
   323-0-0/c CHAR        r         2 CHARS(0:79)

   323-0-0/w STRC(756)   r     1 PATCH_CARD
   324-3-0/c CHAR(8)     r         2 TYPE
   345-0-0/w CHAR(4)     r         2 LBL
   347-0-0/w UBIN        r         2 CHECKSUM

   350-0-0/b STRC(45)    r     1 PATCH_KEY
   350-1-0/b UBIN(18)    r         2 DECK#
   350-3-0/b UBIN(18)    r         2 CARD#

    72-0-0/d STRC(504)   r     1 READ_BINARY_DECK
    76-0-0/w STRC(72)    r         2 BUF_
   102-0-0/d STRC(216)   r         2 V

   110-0-0/d STRC(504)   r     1 READ_CATALOG_DATA
   120-0-0/d STRC(216)   r         2 V

   126-0-0/d STRC(504)   r     1 READ_CATALOG_ENTRY
   136-0-0/d STRC(216)   r         2 V

   144-0-0/d STRC(504)   r     1 READ_DKEND_CARD
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:361  
   154-0-0/d STRC(216)   r         2 V

   162-0-0/d STRC(504)   r     1 READ_OBJECT_CARD
   172-0-0/d STRC(216)   r         2 V

   200-0-0/d STRC(504)   r     1 READ_PATCH_CARD
   210-0-0/d STRC(216)   r         2 V

   352-0-0/w STRC        r     1 RELOC(0:27)
   352-0-0/b UBIN(18)    r         2 UPPER
   352-2-0/b UBIN(18)    r         2 LOWER

   440-0-0/w STRC        r     1 SPLIT_DCW
   440-0-0/b UBIN(18)    r         2 ADDRESS
   440-2-0/b UBIN(6)     r         2 TYPE

   441-0-0/w STRC        r     1 SPLIT_LOAD
   441-0-3/b UBIN(15)    r         2 SIZE
   441-2-0/b UBIN(18)    r         2 ADDRESS

   406-0-0/w STRC        r     1 START_LOADP
   406-0-0/b UBIN(18)    r         2 ADDRESS


  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @CALL_SEQUENCE           162-0-0/w PTR         r     1 @CHECKSUM_LOCATION
   152-0-0/w PTR         r     1 @CHECKSUM_LOCATION       152-0-0/w PTR         r     1 @CHECKSUM_LOCATION
   157-0-0/w PTR         r     1 @CHECKSUM_SEED           147-0-0/w PTR         r     1 @CHECKSUM_SEED
   147-0-0/w PTR         r     1 @CHECKSUM_SEED           161-0-0/w PTR         r     1 @CHECKSUM_SIZE
   151-0-0/w PTR         r     1 @CHECKSUM_SIZE           151-0-0/w PTR         r     1 @CHECKSUM_SIZE
   160-0-0/w PTR         r     1 @CHECKSUM_START$         150-0-0/w PTR         r     1 @CHECKSUM_START$
   150-0-0/w PTR         r     1 @CHECKSUM_START$          15-0-0/w PTR         r     1 @CHECK_DATA_SIZE
    14-0-0/w PTR         r     1 @CHECK_DCW                13-0-0/w PTR         r     1 @CHECK_STATUS$
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:362  
    12-0-0/w PTR         r     1 @DECK_TYPE                11-0-0/w PTR         r     1 @EDIT_NAME
    10-0-0/w PTR         r     1 @ERROR_CODE              153-0-0/w PTR         r     1 @ERR_VEC
   147-0-0/w PTR         r     1 @ERR_VEC1                150-0-0/w PTR         r     1 @ERR_VEC2
   145-0-0/w PTR         r     1 @FIRST                   145-0-0/w PTR         r     1 @FIRST
     3-0-0/w PTR         r     1 @KEY_VALUE               145-0-0/w PTR         r     1 @KEY_VALUE
   146-0-0/w PTR         r     1 @LAST                    146-0-0/w PTR         r     1 @LAST
     4-0-0/w PTR         r     1 @LOAD_OFFSET               7-0-0/w PTR         r     1 @LOAD_SIZE
     6-0-0/w PTR         r     1 @MAX_LOAD                 16-0-0/w UBIN        r     1 CATALOG_COUNT
   101-0-0/b UBIN(18)    r     1 CATALOG_DECK#
    17-0-0/b UBIN(18)    r     1 CATALOG_DECKS(0:99)
   102-0-0/w UBIN        r     1 CATALOG_INDEX            154-0-0/w UBIN        r     1 CHECKSUM_CHECK
    *0-0-0/w UBIN        r     1 CHECKSUM_LOCATION         *0-0-0/w UBIN        r     1 CHECKSUM_LOCATION
    *0-0-0/w UBIN        r     1 CHECKSUM_LOCATION         *0-0-0/w UBIN        r     1 CHECKSUM_SEED
    *0-0-0/w UBIN        r     1 CHECKSUM_SEED             *0-0-0/w UBIN        r     1 CHECKSUM_SEED
    *0-0-0/w UBIN        r     1 CHECKSUM_SIZE             *0-0-0/w UBIN        r     1 CHECKSUM_SIZE
    *0-0-0/w UBIN        r     1 CHECKSUM_SIZE             *0-0-0/w PTR         r     1 CHECKSUM_START$
    *0-0-0/w PTR         r     1 CHECKSUM_START$           *0-0-0/w PTR         r     1 CHECKSUM_START$
    *0-0-0/w UBIN        r     1 CHECK_DATA_SIZE          103-0-0/w UBIN        r     1 CHECK_INDEX
    *0-0-0/w PTR         r     1 CHECK_STATUS$            104-0-0/w UBIN        r     1 CSRW_OFFSET
   105-0-0/w UBIN        r     1 CS_OFFSET                133-0-0/w PTR         r     1 DATA$
   106-0-0/w UBIN        r     1 DATA_SIZE                135-0-0/w PTR         r     1 DCW$
   145-0-0/w UBIN        r     1 DECK_SPLIT                *0-0-0/c CHAR        r     1 DECK_TYPE
    *0-0-0/w CHAR(4)     r     1 EDIT_NAME                107-0-0/w UBIN        r     1 END_LOAD
    *0-0-0/d BIT (72)    r     1 ERR_VEC                   *0-0-0/d BIT (72)    r     1 ERR_VEC1
    *0-0-0/d BIT (72)    r     1 ERR_VEC2                 110-0-0/b UBIN(18)    r     1 FIRST
    *0-0-0/h UBIN(18)    r     1 FIRST                     *0-0-0/h UBIN(18)    r     1 FIRST
   111-0-0/w UBIN        r     1 FIRST_MPC_CK             133-0-0/w PTR         r     1 HEX$
   146-0-0/w UBIN        r     1 HEX_CARD_ADDRESS
   147-0-0/b UBIN(4)     r     1 HEX_CARD_HEX(0:3)
   143-0-0/w UBIN        r     1 HEX_CARD_INDEX           136-0-0/b UBIN(18)    r     1 HEX_CARD_SPLIT
   147-0-0/b UBIN(16)    r     1 HEX_CARD_VALUE           150-0-0/w SBIN        r     1 HEX_CHECKSUM
   122-0-0/w UBIN        r     1 HEX_INDEX                150-0-0/w PTR         r     1 HEX_LOAD$
   112-0-0/w UBIN        r     1 HEX_OFFSET               147-0-0/w UBIN        r     1 HEX_SAVE
   113-0-0/w UBIN        r     1 IOTD_FOUND                *0-0-0/w STRC(216)   r     1 KEY_VALUE
   114-0-0/w UBIN        r     1 L                        115-0-0/b UBIN(18)    r     1 LAST
    *0-0-0/h UBIN(18)    r     1 LAST                      *0-0-0/h UBIN(18)    r     1 LAST
   116-0-0/w UBIN        r     1 LENGTH                    *0-0-0/h UBIN(18)    r     1 LOAD_OFFSET
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:363  
   117-0-0/w UBIN        r     1 LOAD_RELOC                *0-0-0/w UBIN        r     1 LOAD_SIZE
   120-0-0/w UBIN        r     1 M                         *0-0-0/w UBIN(18)    r     1 MAX_LOAD
   121-0-0/w UBIN        r     1 NEXT_SEQ                 122-0-0/w UBIN        r     1 OCTAL_INDEX
   143-0-0/w UBIN        r     1 PATCH_CARD_INDEX
   145-0-0/b UBIN(3)     r     1 PATCH_CARD_OCTAL(0:11)
   146-0-0/w UBIN        r     1 PATCH_CARD_START         145-0-0/w UBIN        r     1 PATCH_CARD_VALUE
   147-0-0/w PTR         r     1 PATCH_LOAD$              123-0-0/w UBIN        r     1 RELOCATION
   124-0-0/w UBIN        r     1 RELOCATION_CHECK         147-0-0/w UBIN        r     1 RELOC_WORD
   143-0-0/w UBIN        r     1 RESIDUE                  125-0-0/w UBIN        r     1 RW_OFFSET
   126-0-0/w UBIN        r     1 SECOND_MPC_CK            127-0-0/w CHAR(4)     r     1 SEQ
   127-0-0/w CHAR        r     1 SEQ_CHARS(0:3)
   122-0-0/w UBIN        r     1 SEQ_INDEX                130-0-0/w UBIN        r     1 SKIP_LOAD
   137-0-0/w UBIN        r     1 SPLIT_DATA               140-0-0/w PTR         r     1 STATUS$

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    *0-0-0/w STRC(252)   r     1 CALL_SEQUENCE
     0-0-0/b UBIN(18)    r         2 FDCWP
     0-2-0/b UBIN(18)    r         2 STATUSP
     1-0-0/b UBIN(18)    r         2 CATALOG#
     1-2-0/b UBIN(18)    r         2 NEXT_ENTRY
     2-0-0/w STRC        r         2 CATALOG_CKSUM
     2-0-0/w UBIN        r         2 DECK_OFFSET
     3-0-0/b UBIN(18)    r         2 DECK#
     3-2-0/b UBIN(18)    r         2 ENTRY_COUNT
     3-2-0/b UBIN(18)    r         2 CARD_COUNT
     4-0-0/w UBIN        r         2 CHECKSUM
     5-0-0/w UBIN        r         2 RELOCATION
     6-0-0/w SBIN        r         2 NO_MORE

    *0-0-0/w STRC(252)   r     1 CALL_SEQUENCE_MORE
     1-2-0/b STRC(198)   r         2 MORE
     2-0-0/b UBIN        r          3 DATA(0:4)

   131-0-0/w STRC(72)    r     1 CHECKSUM
   131-0-0/w STRC        r         2 UPPER
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:364  
   131-0-0/b UBIN(18)    r          3 UPPER
   131-2-0/b UBIN(18)    r          3 LOWER
   131-0-0/w UBIN        r         2 UH
   132-0-0/w STRC        r         2 LOWER
   132-0-0/b UBIN(18)    r          3 UPPER
   132-0-0/w UBIN        r         2 LH

    *0-0-0/w STRC        r     1 CHECK_DCW
     0-0-0/b UBIN(18)    r         2 ADDRESS
     0-2-0/b UBIN(6)     r         2 TYPE

   134-0-0/w STRC        r     1 DCW
   134-0-0/b UBIN(18)    r         2 ADDRESS
   134-2-0/b UBIN(6)     r         2 TYPE

   135-0-0/w STRC        r     1 DCWP
   135-0-0/b UBIN(18)    r         2 ADDRESS

    *0-0-0/w STRC        r     1 ERROR_CODE
     0-0-0/b UBIN(18)    r         2 LOC
     0-2-0/b UBIN(18)    r         2 ERR

   133-0-0/w STRC        r     1 HEXP
   133-0-0/b UBIN(18)    r         2 ADDRESS

   150-0-0/w STRC        r     1 HEX_CALC
   150-0-0/b UBIN(20)    r         2 CARRY
   150-2-2/b STRC(16)    r         2 SPLIT
   150-2-2/b UBIN(8)     r          3 UPPER
   150-3-1/b UBIN(8)     r          3 LOWER

   150-0-0/w STRC        r     1 HEX_FINAL
   150-0-0/b UBIN(9)     r         2 UPPER
   150-1-0/b UBIN(9)     r         2 LOWER
   150-2-0/b UBIN(18)    r         2 CLEAR

   150-0-0/w STRC        r     1 HEX_LOADP
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:365  
   150-0-0/b UBIN(18)    r         2 ADDRESS

   136-0-0/b STRC(18)    r     1 HEX_SPLIT
   136-0-1/b UBIN(8)     r         2 UPPER
   136-1-1/b UBIN(8)     r         2 LOWER

   147-0-0/b STRC(16)    r     1 HEX_VALUE_SPLIT
   147-0-0/b UBIN(8)     r         2 UPPER
   147-0-8/b UBIN(8)     r         2 LOWER

    *0-0-0/w STRC(216)   r     1 KEY_VALUE
     0-1-0/c CHAR(23)    r         2 DATA

   147-0-0/w STRC        r     1 PATCH_LOADP
   147-0-0/b UBIN(18)    r         2 ADDRESS

   147-0-0/w STRC        r     1 RELOC_PAIR
   147-0-0/b STRC(5)     r         2 BITS(0:6)
   147-0-1/b UBIN(2)     r          3 UPPER
   147-0-3/b UBIN(2)     r          3 LOWER

    *0-0-0/w STRC        r     1 SEED
     0-0-0/b UBIN(18)    r         2 UPPER
     0-2-0/b UBIN(18)    r         2 LOWER

   137-0-0/w STRC        r     1 SPLIT_SPLIT
   137-0-0/b UBIN(18)    r         2 UPPER
   137-2-0/b UBIN(18)    r         2 LOWER

   140-0-0/w STRC        r     1 STATUSP
   140-0-0/b UBIN(18)    r         2 ADDRESS

   143-0-0/w STRC(72)    r     1 STATUS_SAVE
   144-0-0/b UBIN(18)    r         2 LAST_DCW_POINTER


  ****  SYMREF variables  ****
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:366  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 BUFFER$
     0-0-0/w PTR         r     1 TOL$BUFFER$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(104)   r     1 BUFFER(0:1023)             0-0-0/w STRC        r     1 DCW_LIST_ENTRY
     0-0-0/c UBIN(9)     r     1 HEX_DATA(0:3)
     0-0-0N  NULL        r     1 M$DECKFILE

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$EXCFR
   102-0-0/b STRC        r         2 ERR
   102-2-1/b UBIN(14)    r          3 ERR#

     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w PTR         r         2 ALT$

     0-0-0/w STRC(936)   r     1 BINARY
     0-0-0/w UBIN        r         2 WD1
     0-0-0/w STRC        r         2 LOAD
     0-0-0/b UBIN(3)     r          3 TYPE
     0-1-3/b UBIN(6)     r          3 SIZE
     0-2-0/b UBIN(18)    r          3 ADDRESS
     1-0-0/w UBIN        r         2 CHECKSUM
     2-0-0/w UBIN        r         2 RELOC(0:2)
     5-0-0/w UBIN        r         2 DATA(0:20)
     5-0-0/b STRC        r         2 SPLIT(0:20)
     5-0-0/b UBIN(18)    r          3 UPPER
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:367  
     5-2-0/b UBIN(18)    r          3 LOWER

     0-0-0/w STRC(936)   r     1 BINARY_LBLSEQ
    30-0-0/w CHAR(4)     r         2 LBL
    31-0-0/w CHAR(4)     r         2 SEQ

     0-0-0/w STRC)       r     1 CHECK
     0-0-0/b UBIN(18)    r         2 LAL(0:1023)
  1000-0-0/b UBIN(18)    r         2 UAL(0:1023)

     0-0-0/w STRC        r     1 CHECKSUM_DATA(0:22)
     0-0-0/b UBIN(18)    r         2 UPPER
     0-2-0/b UBIN(18)    r         2 LOWER

     0-0-0/w STRC        r     1 CHECKSUM_DATA(0:22)
     0-0-0/b UBIN(18)    r         2 UPPER
     0-2-0/b UBIN(18)    r         2 LOWER

     0-0-0/w STRC(72)    r     1 CHECK_STATUS
     1-0-0/b UBIN(18)    r         2 LAST_DCW_POINTER
     1-2-0/b UBIN(18)    r         2 RESIDUE

     0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/w SBIN        r         2 ARS#
   140-0-0/d ASTR(9)     r         2 DCBNAME
   140-0-4/b UBIN(5)     r          3 L

     0-0-0/w STRC(72)    r     1 HEX_LOAD
     0-0-0/b UBIN(3)     r         2 TYPE
     0-0-3/b UBIN(15)    r         2 SIZE
     0-2-0/b UBIN(18)    r         2 ADDRESS
     1-0-0/b UBIN(18)    r         2 UPPER
     1-2-0/b UBIN(18)    r         2 LOWER

     0-0-0/w STRC(1044)  r     1 LOAD
     0-0-0/b UBIN(3)     r         2 TYPE
     0-1-3/b UBIN(6)     r         2 SIZE
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:368  
     0-2-0/b UBIN(18)    r         2 ADDRESS
     1-0-0/w UBIN        r         2 DATA(0:27)

     0-0-0/w STRC(1044)  r     1 PATCH_LOAD
     0-0-0/b UBIN(3)     r         2 TYPE
     0-0-3/b UBIN(15)    r         2 SIZE
     0-2-0/b UBIN(18)    r         2 ADDRESS
     1-0-0/w UBIN        r         2 DATA(0:27)
     1-0-0/b STRC        r         2 SPLIT(0:27)
     1-0-0/b UBIN(18)    r          3 UPPER
     1-2-0/b UBIN(18)    r          3 LOWER

     0-0-0/w STRC(72)    r     1 STATUS
     1-2-0/b UBIN(18)    r         2 RESIDUE

     0-0-0/w STRC(67444) r     1 TOM$SEG
     7-0-0/w CHAR(96)    r         2 OBJECT
    37-0-0/w UBIN        r         2 LAST_SECTOR
    40-0-0/w CHAR(256)   r         2 SECTORS(0:255)
 40040-0-0/w CHAR(84)    r         2 DKEND



   Procedure TOL$CHECK_CALL_SEQUENCE requires 3078 words for executable code.
   Procedure TOL$CHECK_CALL_SEQUENCE requires 134 words of local(AUTO) storage.

    No errors detected in file TOL$LOADER.:E05TSI    .
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:369  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:370  
          MINI XREF LISTING

B$EXCFR.ASL
      8419**DCL      8419--REDEF
B$EXCFR.ERR.ERR#
      8433**DCL      8433--REDEF    9982>>IF      10002>>IF      10455>>IF      10589>>IF      10891>>IF
     10926>>IF      11087>>IF
B$EXCFR.EVID
      8432**DCL      8432--REDEF    8433--REDEF
B$EXCFR.IR
      8420**DCL      8420--REDEF
B$EXCFR.PREVSZ
      8419**DCL      8419--REDEF
B$EXCFR.SUBC
      8431**DCL      8431--REDEF    8432--REDEF    8432--REDEF
B$TCB.ALT$
      8494**DCL      9982>>IF      10002>>IF      10455>>IF      10589>>IF      10891>>IF      10926>>IF
     11087>>IF
B$TCB$
      8921**DCL      9982>>IF      10002>>IF      10455>>IF      10589>>IF      10891>>IF      10926>>IF
     11087>>IF
BAD_BINARY_READ IN PROCEDURE TOL$READ_BUFFER
     10455**LABEL   10446--CALLALT
BAD_CATALOG_READ IN PROCEDURE TOL$READ_CATALOG
      9982**LABEL    9975--CALLALT
BAD_DKEND_READ IN PROCEDURE TOL$READ_DKEND
     10891**LABEL   10872--CALLALT
BAD_ENTRY_READ IN PROCEDURE TOL$READ_ENTRY
     10002**LABEL    9990--CALLALT
BAD_OBJECT_READ IN PROCEDURE TOL$READ_OBJECT
     10589**LABEL   10564--CALLALT
BAD_PATCH_READ IN PROCEDURE TOL$READ_PATCH
     10926**LABEL   10899--CALLALT
BAD_READ
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:371  
     10149**LABEL   10132--CALLALT 10137--CALLALT 10142--CALLALT
BINARY
      9136**DCL      9149--REDEF
BINARY.CHECKSUM
      9143**DCL     10332<>CALL
BINARY.DATA
      9145**DCL      9146--REDEF   10346>>IF      10427>>ASSIGN  10429<<ASSIGN  10434<<ASSIGN  10478>>ASSIGN
     10521<<ASSIGN
BINARY.LOAD.ADDRESS
      9142**DCL     10351>>ASSIGN  10514>>ASSIGN  10516<<ASSIGN  10684>>IF      10692>>IF      10773>>IF
BINARY.LOAD.SIZE
      9141**DCL     10346>>IF      10425>>DOWHILE 10426>>ASSIGN  10475>>DOWHILE 10477>>ASSIGN  10523>>DOINDEX
BINARY.LOAD.TYPE
      9139**DCL     10341>>IF      10341>>IF      10414>>IF      10417<<ASSIGN  10428<<ASSIGN  10465>>IF
BINARY.RELOC
      9144**DCL     10332--CALL    10416>>ASSIGN  10418<<ASSIGN  10480>>ASSIGN  10499>>ASSIGN  10520<<ASSIGN
BINARY.SPLIT.LOWER
      9148**DCL     10349>>ASSIGN  10532>>ASSIGN  10534<<ASSIGN
BINARY.SPLIT.UPPER
      9147**DCL     10348>>ASSIGN  10350>>ASSIGN  10526>>ASSIGN  10528<<ASSIGN
BINARY.WD1
      9137**DCL      9138--REDEF   10332<>CALL    10416<<ASSIGN  10418>>ASSIGN  10427<<ASSIGN  10429>>ASSIGN
     10478<<ASSIGN  10480<<ASSIGN  10520>>ASSIGN  10521>>ASSIGN
BINARY$
      8944**DCL      9136--IMP-PTR  9149--IMP-PTR 10331<<ASSIGN  10332>>CALL    10332>>CALL    10332>>CALL
     10337>>IF      10339>>ASSIGN  10341>>IF      10341>>IF      10346>>IF      10346>>IF      10348>>ASSIGN
     10349>>ASSIGN  10350>>ASSIGN  10351>>ASSIGN  10413<<ASSIGN  10414>>IF      10416>>ASSIGN  10416>>ASSIGN
     10417>>ASSIGN  10418>>ASSIGN  10418>>ASSIGN  10425>>DOWHILE 10426>>ASSIGN  10427>>ASSIGN  10427>>ASSIGN
     10428>>ASSIGN  10429>>ASSIGN  10429>>ASSIGN  10434>>ASSIGN  10464<<ASSIGN  10465>>IF      10475>>DOWHILE
     10477>>ASSIGN  10478>>ASSIGN  10478>>ASSIGN  10480>>ASSIGN  10480>>ASSIGN  10499>>ASSIGN  10514>>ASSIGN
     10516>>ASSIGN  10520>>ASSIGN  10520>>ASSIGN  10521>>ASSIGN  10521>>ASSIGN  10523>>DOINDEX 10526>>ASSIGN
     10528>>ASSIGN  10532>>ASSIGN  10534>>ASSIGN  10646<<ASSIGN  10684>>IF      10692>>IF      10773>>IF
BINARYP.ADDRESS
      8946**DCL     10436>>ASSIGN  10647<<ASSIGN  10647>>ASSIGN
BINARY_LBLSEQ.LBL
      9151**DCL     10337>>IF
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:372  
BINARY_LBLSEQ.SEQ
      9152**DCL     10339>>ASSIGN
BUFFER
      9099**DCL     10331--ASSIGN  10413--ASSIGN  10421--ASSIGN  10445--ASSIGN  10464--ASSIGN  10646--ASSIGN
     10675--ASSIGN  10770--ASSIGN  10949--ASSIGN  10959--ASSIGN  10964--ASSIGN  10974--ASSIGN
BUFFER$
      8923**DCL      9099--IMP-PTR  9162--IMP-PTR  9646>>IF       9682>>IF       9682>>IF       9684>>IF
      9684>>IF       9686>>IF       9686>>IF       9807>>ASSIGN   9808>>ASSIGN  10331>>ASSIGN  10413>>ASSIGN
     10421>>ASSIGN  10445>>ASSIGN  10464>>ASSIGN  10646>>ASSIGN  10675>>ASSIGN  10770>>ASSIGN  10949>>ASSIGN
     10959>>ASSIGN  10964>>ASSIGN  10974>>ASSIGN
BUFFER_ALLOCATED
      9098**DCL      9649<<ASSIGN   9662>>IF       9665<<ASSIGN   9671<<ASSIGN
CALL_SEQ$
      8949**DCL      9639<<ASSIGN   9874<<ASSIGN  10082<<ASSIGN  10127<<ASSIGN  10133>>ASSIGN  10136>>ASSIGN
     10138>>ASSIGN  10143>>ASSIGN
CALL_SEQP.ADDRESS
      8951**DCL      9652>>ASSIGN
CALL_SEQUENCE
      8376**DCL        11--PROC     8392--REDEF    9639--ASSIGN   9660<>CALL     9709<>CALL     9720<>CALL
      9771--ASSIGN   9866--ENTRY    9874--ASSIGN   9876--ASSIGN   9878<>CALL     9942<>CALL    10073--ENTRY
     10082--ASSIGN  10084--ASSIGN  10087<>CALL    10119--ENTRY   10127--ASSIGN  10231<>CALL    10281<>CALL
     10944<>CALL    10951<>CALL    10966<>CALL
CALL_SEQUENCE.CARD_COUNT
      8388**DCL     11034>>IF      11047<<ASSIGN
CALL_SEQUENCE.CATALOG#
      8379**DCL      9905<<ASSIGN  10022>>IF      10028>>IF      10044>>IF      10057<<ASSIGN
CALL_SEQUENCE.CATALOG_CKSUM
      8381**DCL      8384--REDEF    8385--REDEF   10044>>IF      10059<<ASSIGN
CALL_SEQUENCE.CHECKSUM
      8389**DCL      9950<>CALL     9950<>CALL    10044>>IF      10060<<ASSIGN
CALL_SEQUENCE.DECK#
      8386**DCL     11034>>IF      11046<<ASSIGN
CALL_SEQUENCE.DECK_OFFSET
      8385**DCL     10224<<ASSIGN  10224>>ASSIGN  10247>>IF      10255>>IF      10268>>IF      10269>>ASSIGN
     10272>>IF      10273>>ASSIGN  10276>>ASSIGN  11034>>IF      11072>>ASSIGN
CALL_SEQUENCE.ENTRY_COUNT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:373  
      8387**DCL      8388--REDEF   10044>>IF      10058<<ASSIGN
CALL_SEQUENCE.FDCWP
      8377**DCL      9658>>ASSIGN   9707>>ASSIGN   9734>>ASSIGN   9764>>IF
CALL_SEQUENCE.NEXT_ENTRY
      8380**DCL      9897>>IF       9913>>DOINDEX  9939<<ASSIGN  10044>>IF      10044>>IF      10061<<ASSIGN
CALL_SEQUENCE.NO_MORE
      8391**DCL      9640>>IF       9923<<ASSIGN  10239<<ASSIGN
CALL_SEQUENCE.RELOCATION
      8390**DCL     11034>>IF      11049<<ASSIGN
CALL_SEQUENCE.STATUSP
      8378**DCL      9783>>ASSIGN   9877>>ASSIGN  10085>>ASSIGN  10129>>ASSIGN  10942>>ASSIGN
CALL_SEQUENCE_MORE.MORE
      8395**DCL      9904<<ASSIGN  10043>>IF
CALL_SEQUENCE_MORE.MORE.DATA
      8397**DCL     11032>>IF
CANT_HAPPEN IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     11025**LABEL   11017--CALLALT
CANT_HAPPEN IN PROCEDURE TOL$MOVE_ENTRY
      9958**LABEL    9942--CALLALT
CANT_HAPPEN IN PROCEDURE TOL$SAVE_LOAD
     10295**LABEL   10281--CALLALT
CARD_SEQ
      8925**DCL     10197<<CALLBLT 10201>>IF
CATALOG_CONTROL.SEED
      9160**DCL     10060>>ASSIGN
CATALOG_COUNT
      9100**DCL      9892<<ASSIGN   9898>>IF       9918>>IF      10020<<ASSIGN  10027>>DOINDEX
CATALOG_DATA
      9153**DCL      8718--DCLINIT  8719--DCLINIT  9159--REDEF   10035<<ASSIGN
CATALOG_DATA.CHECKSUM
      9156**DCL     10044>>IF      10059>>ASSIGN
CATALOG_DATA.DECK#
      9154**DCL      9911>>ASSIGN  10044>>IF      10057>>ASSIGN
CATALOG_DATA.ENTRY_COUNT
      9155**DCL      9897>>IF       9900<<ASSIGN   9900>>ASSIGN   9913>>DOINDEX 10012>>DOINDEX 10044>>IF
     10044>>IF      10058>>ASSIGN
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:374  
CATALOG_DECK#
      9102**DCL      9907<<ASSIGN   9972>>ASSIGN  10021<<ASSIGN  10024<<ASSIGN  10030<<ASSIGN  10034>>IF
CATALOG_DECKS
      9101**DCL      9891<<ASSIGN   9907>>ASSIGN  10016<<ASSIGN  10024>>ASSIGN  10028>>IF      10030>>ASSIGN
CATALOG_ENTRY_KEY
      8958**DCL      8761--DCLINIT  8762--DCLINIT
CATALOG_ENTRY_KEY.DECK#
      8960**DCL      9911<<ASSIGN  10011<<ASSIGN
CATALOG_ENTRY_KEY.ENTRY#
      8961**DCL      9913<<DOINDEX  9939>>ASSIGN  10012<<DOINDEX
CATALOG_INDEX
      9103**DCL      9890<<ASSIGN   9898>>IF       9906<<ASSIGN   9906>>ASSIGN   9907>>ASSIGN   9918>>IF
     10016>>ASSIGN  10017<<ASSIGN  10017>>ASSIGN  10020>>ASSIGN  10022>>IF      10025<<ASSIGN  10031<<ASSIGN
CATALOG_KEY
      8969**DCL      8716--DCLINIT  8717--DCLINIT  9970<<ASSIGN   9973>>IF
CATALOG_KEY.DATA
      8971**DCL      8972--REDEF
CATALOG_KEY.SIZE
      8970**DCL      9971>>IF
CATALOG_KEY.SPLIT.CLEAR
      8974**DCL      8975--REDEF
CATALOG_KEY.SPLIT.DECK#
      8975**DCL      9972<<ASSIGN
CATALOG_RETURN_ERROR
      9928**LABEL    9878--CALLALT  9896--CALLALT  9901--CALLALT  9909--CALLALT  9916--CALLALT  9921--CALLALT
CHECK.LAL
      9163**DCL      9682>>IF       9684>>IF       9686>>IF       9686>>IF       9807<<ASSIGN
CHECK.UAL
      9164**DCL      9682>>IF       9684>>IF       9808<<ASSIGN
CHECKSUM.LH
      9174**DCL      9844<<ASSIGN   9847<<ASSIGN   9847>>ASSIGN   9857<<ASSIGN   9857>>ASSIGN   9861>>ASSIGN
     10379<>CALL    10388<<ASSIGN  10388>>ASSIGN  10394>>IF
CHECKSUM.LOWER
      9171**DCL      9174--REDEF
CHECKSUM.LOWER.UPPER
      9172**DCL      9851>>DOWHILE  9853>>ASSIGN   9855<<ASSIGN   9860<<ASSIGN  10385>>ASSIGN  10386<<ASSIGN
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:375  
     10391>>ASSIGN  10393<<ASSIGN
CHECKSUM.UH
      9170**DCL      9842<<ASSIGN   9849<<ASSIGN   9849>>ASSIGN   9854<<ASSIGN   9854>>ASSIGN  10384<<ASSIGN
     10390<<ASSIGN  10390>>ASSIGN  10392<<ASSIGN  10392>>ASSIGN
CHECKSUM.UPPER
      9167**DCL      9170--REDEF
CHECKSUM.UPPER.LOWER
      9169**DCL      9860>>ASSIGN  10385<<ASSIGN  10393>>ASSIGN
CHECKSUM.UPPER.UPPER
      9168**DCL      9851>>DOWHILE  9856>>ASSIGN   9858<<ASSIGN
CHECKSUM_BINARY IN PROCEDURE TOL$CHECKSUM
      9837**DCL      9842>>ASSIGN   9844>>ASSIGN   9847>>ASSIGN   9849>>ASSIGN   9854>>ASSIGN   9857>>ASSIGN
CHECKSUM_BINARY IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10373**DCL     10388>>ASSIGN  10390>>ASSIGN  10392>>ASSIGN
CHECKSUM_CHECK IN PROCEDURE TOL$CHECK_CHECKSUM
     10167**DCL     10171<>CALL    10176>>IF
CHECKSUM_DATA.LOWER IN PROCEDURE TOL$CHECKSUM
      9833**DCL      9846>>ASSIGN
CHECKSUM_DATA.UPPER IN PROCEDURE TOL$CHECKSUM
      9832**DCL      9848>>ASSIGN
CHECKSUM_DATA.LOWER IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10369**DCL     10387>>ASSIGN
CHECKSUM_DATA.UPPER IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10368**DCL     10389>>ASSIGN
CHECKSUM_LOCATION IN PROCEDURE TOL$CHECKSUM
      9821**DCL      9814--PROC     9861<<ASSIGN
CHECKSUM_LOCATION IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10362**DCL     10357--PROC    10377>>IF      10394>>IF
CHECKSUM_LOCATION IN PROCEDURE TOL$CHECK_CHECKSUM
     10161**DCL     10153--PROC    10176>>IF
CHECKSUM_SEED IN PROCEDURE TOL$CHECKSUM
      9822**DCL      9814--PROC     9823--REDEF
CHECKSUM_SEED IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10363**DCL     10357--PROC    10379<>CALL
CHECKSUM_SEED IN PROCEDURE TOL$CHECK_CHECKSUM
     10162**DCL     10153--PROC    10171<>CALL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:376  
CHECKSUM_SIZE IN PROCEDURE TOL$CHECKSUM
      9826**DCL      9814--PROC     9845>>DOINDEX
CHECKSUM_SIZE IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10364**DCL     10357--PROC    10379>>CALL    10387>>ASSIGN  10389>>ASSIGN
CHECKSUM_SIZE IN PROCEDURE TOL$CHECK_CHECKSUM
     10163**DCL     10153--PROC    10171<>CALL
CHECKSUM_SPLIT IN PROCEDURE TOL$CHECKSUM
      9834**DCL      9837--REDEF
CHECKSUM_SPLIT.LOWER IN PROCEDURE TOL$CHECKSUM
      9836**DCL      9841<<ASSIGN   9843<<ASSIGN   9846<<ASSIGN   9848<<ASSIGN   9853<<ASSIGN   9856<<ASSIGN
CHECKSUM_SPLIT IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10370**DCL     10373--REDEF
CHECKSUM_SPLIT.LOWER IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10372**DCL     10387<<ASSIGN  10389<<ASSIGN  10391<<ASSIGN
CHECKSUM_START$ IN PROCEDURE TOL$CHECKSUM
      9827**DCL      9814--PROC     9831--IMP-PTR  9846>>ASSIGN   9848>>ASSIGN
CHECKSUM_START$ IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10365**DCL     10357--PROC    10367--IMP-PTR 10379<>CALL    10387>>ASSIGN  10389>>ASSIGN
CHECKSUM_START$ IN PROCEDURE TOL$CHECK_CHECKSUM
     10164**DCL     10153--PROC    10171<>CALL
CHECK_DATA_SIZE
      8398**DCL        11--PROC     9705<<ASSIGN   9717<<ASSIGN   9717>>ASSIGN
CHECK_DCW
      8399**DCL        11--PROC     9660<>CALL     9709<>CALL     9720<>CALL     9774<<ASSIGN
CHECK_DCW.ADDRESS
      8400**DCL      9661<<ASSIGN   9661>>ASSIGN   9710<<ASSIGN   9710>>ASSIGN   9712>>ASSIGN   9713>>ASSIGN
      9721<<ASSIGN   9721>>ASSIGN   9767>>ASSIGN
CHECK_DCW.TYPE
      8401**DCL      9718>>IF       9736>>IF       9749>>IF       9766>>IF       9768>>IF
CHECK_INDEX
      9104**DCL      9651<<ASSIGN   9681>>DOINDEX  9805>>IF       9807>>ASSIGN   9808>>ASSIGN   9809<<ASSIGN
      9809>>ASSIGN
CHECK_RELOC
      9105**DCL      9659>>ASSIGN   9661>>ASSIGN   9696<<ASSIGN   9697<<ASSIGN   9708>>ASSIGN   9710>>ASSIGN
      9721>>ASSIGN  10232>>ASSIGN
CHECK_RETURN_ERROR
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:377  
      9670**LABEL    9655--CALLALT  9656--CALLALT  9657--CALLALT
CHECK_STATUS
      9175**DCL      9660<>CALL     9709<>CALL     9720<>CALL
CHECK_STATUS.LAST_DCW_POINTER
      9177**DCL      9658<<ASSIGN   9707<<ASSIGN   9734<<ASSIGN   9743>>ASSIGN   9764>>IF       9767<<ASSIGN
      9772<<ASSIGN   9772>>ASSIGN   9773>>ASSIGN
CHECK_STATUS.RESIDUE
      9178**DCL      9713>>ASSIGN   9717>>ASSIGN
CHECK_STATUS$
      8403**DCL        11--PROC     9175--IMP-PTR  9658>>ASSIGN   9660>>CALL     9707>>ASSIGN   9709>>CALL
      9713>>ASSIGN   9717>>ASSIGN   9720>>CALL     9734>>ASSIGN   9743>>ASSIGN   9764>>IF       9767>>ASSIGN
      9772>>ASSIGN   9772>>ASSIGN   9773>>ASSIGN
CSRW_OFFSET
      9106**DCL     10350<<ASSIGN  10352>>IF      10353>>ASSIGN  10653>>ASSIGN  10682>>IF      10687>>IF
CS_OFFSET
      9107**DCL     10348<<ASSIGN  10648>>ASSIGN
DATA$
      9179**DCL      9180--REDEF    9181--REDEF   10271<<ASSIGN  10281<>CALL    10949<<ASSIGN  10951<>CALL
     10959<<ASSIGN  10964<<ASSIGN  10966<>CALL    10974<<ASSIGN
DATA_OVERLAP IN PROCEDURE TOL$CHECK_DATA_OVERLAP
      9725**LABEL    9714--CALLALT
DATA_SIZE
      9108**DCL      9878<>CALL     9920<<ASSIGN   9935>>IF       9942<>CALL    10087<>CALL    10275<<ASSIGN
     10281<>CALL    10950<<ASSIGN  10951<>CALL    10965<<ASSIGN  10997<<ASSIGN  11017<>CALL
DCW
      9184**DCL      9878<>CALL     9942<>CALL    10087<>CALL    10231<>CALL
DCW.ADDRESS
      9185**DCL     10232<<ASSIGN  10232>>ASSIGN  10276>>ASSIGN  10279>>ASSIGN  11070>>ASSIGN
DCW.TYPE
      9186**DCL     10218>>IF      10278>>ASSIGN
DCW$
      9190**DCL      9188--IMP-PTR  9191--REDEF    9771<<ASSIGN   9774>>ASSIGN
DCWP.ADDRESS
      9192**DCL      9773<<ASSIGN
DCW_LIST_ENTRY
      9188**DCL      9774>>ASSIGN
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:378  
DCW_OVERLAP IN PROCEDURE TOL$CHECK_DCW_OVERLAP
      9756**LABEL    9745--CALLALT
DECKFILE_ARS#
      8927**DCL      9976<<ASSIGN   9977>>IF       9991<<ASSIGN   9992>>IF      10447<<ASSIGN  10448>>IF
     10450>>IF      10565<<ASSIGN  10566>>IF      10873<<ASSIGN  10874>>IF      10900<<ASSIGN  10901>>IF
DECKFILE_DCB#
      9109**DCL     11079>>IF      11082<<ASSIGN  11083--ASSIGN  11089<<ASSIGN
DECK_KEY
      9194**DCL      8671--DCLINIT  8672--DCLINIT
DECK_KEY.DECK#
      9196**DCL     10135<<ASSIGN  10444<<ASSIGN
DECK_RETURN_ERROR
     10114**LABEL   10086--CALLALT 10087--CALLALT 10100--CALLALT 10103--CALLALT
DECK_SPLIT IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10625**DCL     10649<<ASSIGN  10653<<ASSIGN  10654>>IF      10681>>ASSIGN
DECK_TYPE
      8404**DCL        11--PROC     9695>>IF
DKEND_CARD
      8984**DCL      8808--DCLINIT  8809--DCLINIT 10876--CALL
DKEND_CARD.CHECKSUM
      8991**DCL     10876<>CALL
DKEND_CARD.CONTROL
      8985**DCL     10882>>IF
DKEND_CARD.LBL
      8989**DCL     10884>>IF
DKEND_CARD.REVISION
      8988**DCL     10919>>IF
DKEND_CARD.SEQ
      8990**DCL     10886>>ASSIGN
DKEND_CARD.TYPE
      8986**DCL     10882>>IF
DKEND_CARD_
      8992**DCL     10143>>ASSIGN
DKEND_KEY.CARD#
      9083**DCL     10141<<ASSIGN  10870<<ASSIGN
DKEND_KEY.DECK#
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:379  
      9082**DCL     10140<<ASSIGN  10869<<ASSIGN
EDIT_NAME
      8953**DCL        11--PROC     9878<>CALL    10073--ENTRY   10087<>CALL    10107--IF      10109<<ASSIGN
     10119--ENTRY
END_LOAD
      9110**DCL     10214>>DOWHILE 10216>>IF      10436<<ASSIGN  10676>>ASSIGN  10715<<ASSIGN  10715>>ASSIGN
     10771>>ASSIGN  10782<<ASSIGN  10782>>ASSIGN
ER#1
      9253**DCL     10827--CALL
ER#10
      9301**DCL     10766--CALL
ER#11
      9307**DCL     10338--CALL
ER#12
      9314**DCL     10340--CALL
ER#13
      9320**DCL     10340--CALL
ER#14
      9327**DCL     10342--CALL
ER#15
      9333**DCL     10347--CALL
ER#16
      9339**DCL     10395--CALL
ER#17
      9345**DCL     10730--CALL
ER#18
      9351**DCL     10851--CALL
ER#19
      9357**DCL     10859--CALL
ER#2
      9259**DCL     10842--CALL
ER#23
      9363**DCL      9769--CALL
ER#25
      9367**DCL      9958--CALL
ER#26
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:380  
      9371**DCL     11088--CALL
ER#27
      9374**DCL     10449--CALL
ER#28
      9381**DCL     10451--CALL
ER#29
      9388**DCL     10457--CALL
ER#3
      9265**DCL     10686--CALL
ER#30
      9394**DCL      9974--CALL
ER#31
      9399**DCL      9978--CALL
ER#32
      9405**DCL      9984--CALL
ER#33
      9410**DCL     10875--CALL
ER#34
      9417**DCL     10876--CALL
ER#35
      9423**DCL     10883--CALL
ER#36
      9429**DCL     10885--CALL
ER#37
      9436**DCL     10887--CALL
ER#38
      9442**DCL     10887--CALL
ER#39
      9449**DCL     10893--CALL
ER#4
      9271**DCL     10689--CALL    10693--CALL
ER#40
      9455**DCL      9993--CALL
ER#41
      9461**DCL      9995--CALL
ER#42
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:381  
      9467**DCL     10004--CALL
ER#43
      9472**DCL     10563--CALL
ER#44
      9477**DCL     10567--CALL
ER#45
      9483**DCL     10568--CALL
ER#46
      9488**DCL     10575--CALL
ER#47
      9493**DCL     10579--CALL
ER#48
      9499**DCL     10583--CALL
ER#49
      9505**DCL     10585--CALL
ER#50
      9510**DCL     10902--CALL
ER#51
      9517**DCL     10903--CALL
ER#52
      9523**DCL     10911--CALL
ER#53
      9529**DCL     10913--CALL
ER#54
      9536**DCL     10918--CALL
ER#55
      9542**DCL     10920--CALL
ER#56
      9549**DCL     10922--CALL
ER#57
      9555**DCL     10928--CALL
ER#58
      9561**DCL      9806--CALL
ER#59
      9564**DCL     10295--CALL
ER#6
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:382  
      9277**DCL     10709--CALL
ER#61
      9568**DCL     10546--CALL
ER#62
      9576**DCL      9983--CALL
ER#63
      9580**DCL     10003--CALL
ER#64
      9584**DCL     10456--CALL
ER#65
      9588**DCL     10590--CALL
ER#66
      9592**DCL     10892--CALL
ER#67
      9596**DCL     10927--CALL
ER#7
      9283**DCL     10655--CALL
ER#70
      9600**DCL     11025--CALL
ER#71
      9604**DCL     10617--CALL
ER#73
      9610**DCL     10775--CALL
ER#74
      9616**DCL     10149--CALL
ER#8
      9289**DCL     10662--CALL
ER#9
      9295**DCL     10667--CALL
ERR#A
      9623**DCL      9642>>ASSIGN   9643>>ASSIGN
ERR#B
      9624**DCL      9725>>ASSIGN   9726>>ASSIGN
ERR#C
      9625**DCL      9738>>ASSIGN   9739>>ASSIGN
ERR#D
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:383  
      9626**DCL      9756>>ASSIGN   9757>>ASSIGN
ERR#E
      9627**DCL      9792>>ASSIGN   9793>>ASSIGN
ERR#F
      9628**DCL     10221>>ASSIGN  10223>>ASSIGN
ERR#G
      9629**DCL     10222>>ASSIGN
ERR#H
      9630**DCL      9937>>ASSIGN
ERR#HO
      9631**DCL      9938>>ASSIGN
ERR#I
      9632**DCL     10591>>ASSIGN  10592>>ASSIGN
ERR#J
      9633**DCL     10051>>ASSIGN  10052>>ASSIGN
ERR#K
      9634**DCL     10065>>ASSIGN  10066>>ASSIGN
ERR#L
      9635**DCL     11039>>ASSIGN  11040>>ASSIGN
ERROR_CODE
      8406**DCL        11--PROC     9866--ENTRY    9878<>CALL    10073--ENTRY   10087<>CALL    10119--ENTRY
ERROR_CODE.ERR
      8408**DCL      9643<<ASSIGN   9726<<ASSIGN   9739<<ASSIGN   9757<<ASSIGN   9793<<ASSIGN   9938<<ASSIGN
     10052<<ASSIGN  10066<<ASSIGN  10221<<ASSIGN  10222<<ASSIGN  10592<<ASSIGN  11040<<ASSIGN
ERROR_CODE.LOC
      8407**DCL      9642<<ASSIGN   9725<<ASSIGN   9738<<ASSIGN   9756<<ASSIGN   9792<<ASSIGN   9937<<ASSIGN
     10051<<ASSIGN  10065<<ASSIGN  10223<<ASSIGN  10591<<ASSIGN  11039<<ASSIGN
ERR_VEC IN PROCEDURE TOL$CHECK_CHECKSUM
     10165**DCL     10153--PROC    10177<>CALL
ERR_VEC1 IN PROCEDURE TOL$CHECK_SEQ
     10184**DCL     10182--PROC    10195<>CALL
ERR_VEC2 IN PROCEDURE TOL$CHECK_SEQ
     10185**DCL     10182--PROC    10202<>CALL
F$DCB.ACTPOS
      8469**DCL      8469--REDEF
F$DCB.ARS#
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:384  
      8443**DCL      8443--REDEF    9976>>ASSIGN   9991>>ASSIGN  10447>>ASSIGN  10565>>ASSIGN  10873>>ASSIGN
     10900>>ASSIGN
F$DCB.ATTR
      8462**DCL      8463--REDEF
F$DCB.BORROW
      8477**DCL      8477--REDEF    8477--REDEF    8477--REDEF
F$DCB.DCBNAME.L
      8491**DCL      8491--IMP-SIZ
F$DCB.EOMCHAR#
      8447**DCL      8447--REDEF
F$DCB.FLDID
      8472**DCL      8472--REDEF
F$DCB.FORM$
      8466**DCL      8466--REDEF
F$DCB.FSECT
      8482**DCL      8482--REDEF
F$DCB.FSN#
      8459**DCL      8459--REDEF    8459--REDEF    8460--REDEF
F$DCB.HEADER$
      8465**DCL      8465--REDEF
F$DCB.IXTNSIZE#
      8463**DCL      8463--REDEF
F$DCB.LASTSTA$
      8452**DCL      8452--REDEF
F$DCB.LVL
      8478**DCL      8478--REDEF
F$DCB.NAME#.C
      8453**DCL      8453--REDEF
F$DCB.NOEOF
      8475**DCL      8475--REDEF
F$DCB.NRECS#
      8464**DCL      8464--REDEF
F$DCB.NRECX
      8483**DCL      8483--REDEF
F$DCB.OHDR
      8475**DCL      8475--REDEF
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:385  
F$DCB.ORG#
      8458**DCL      8458--REDEF
F$DCB.PRECNO
      8481**DCL      8481--REDEF
F$DCB.RCSZ
      8487**DCL      8487--REDEF
F$DCB.RES#
      8454**DCL      8454--REDEF
F$DCB.SETX
      8466**DCL      8466--REDEF
F$DCB.TAB$
      8466**DCL      8466--REDEF
F$DCB.TDA
      8480**DCL      8481--REDEF
F$DCB.WSN#
      8454**DCL      8454--REDEF
FIRST
      9111**DCL      9652<<ASSIGN   9653>>ASSIGN   9654<>CALL     9698<<ASSIGN   9701<>CALL     9702<<ASSIGN
      9704<>CALL     9712<<ASSIGN   9714<>CALL     9743<<ASSIGN   9744>>ASSIGN   9745<>CALL     9748<>CALL
      9783<<ASSIGN   9784>>ASSIGN   9785<>CALL     9788<>CALL
FIRST IN PROCEDURE TOL$CHECK_CONTROL_OVERLAP
      9676**DCL      9674--PROC     9682>>IF       9682>>IF       9686>>IF
FIRST IN PROCEDURE TOL$SAVE_CHECK_LOCATIONS
      9800**DCL      9798--PROC     9807>>ASSIGN
FIRST_MPC_CK
      9112**DCL     10353<<ASSIGN  10354<<ASSIGN  10946>>IF      10948>>ASSIGN  10961<<ASSIGN  10961>>ASSIGN
     10963>>ASSIGN
FPTN_
      8505**DCL      8508--REDEF
HEX$
      9180**DCL     10980--IMP-PTR 11000>>ASSIGN  11001>>ASSIGN  11003>>ASSIGN  11004>>ASSIGN
HEXP.ADDRESS
      9182**DCL     11006<<ASSIGN  11006>>ASSIGN
HEX_ASCII.CHARS
      9070**DCL     10706>>IF      10725>>CALLBLT
HEX_ASCII.DATA
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:386  
      9069**DCL      9070--REDEF   10657>>CALLBLT
HEX_CALC.CARRY IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10985**DCL     11008>>DOWHILE 11009>>ASSIGN  11010<<ASSIGN
HEX_CALC.SPLIT.LOWER IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10989**DCL     11015>>ASSIGN
HEX_CALC.SPLIT.UPPER IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10988**DCL     11014>>ASSIGN
HEX_CALC.VALUE IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10986**DCL     10987--REDEF
HEX_CARD.CR
      9062**DCL     10650>>IF      10684>>IF      10687>>IF      10916>>IF      10916>>IF
HEX_CARD.REVISION
      9065**DCL     10919>>IF
HEX_CARD_ADDRESS IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10626**DCL     10665<<ASSIGN  10666>>IF      10668<<ASSIGN  10668>>ASSIGN  10677>>IF      10681>>ASSIGN
HEX_CARD_HEX IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10629**DCL     10731<<ASSIGN
HEX_CARD_INDEX IN PROCEDURE TOL$READ_PATCHES
     10599**DCL     10657<<CALLBLT 10661>>IF
HEX_CARD_SPLIT
      9198**DCL      9199--REDEF   10704>>ASSIGN  10705>>ASSIGN  10713>>ASSIGN  11002>>ASSIGN  11005>>ASSIGN
HEX_CARD_VALUE IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10628**DCL     10629--REDEF   10630--REDEF   10665>>ASSIGN  10723<<ASSIGN
HEX_CHECKSUM IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10983**DCL     10984--REDEF   10990--REDEF   10998<<ASSIGN  11002<<ASSIGN  11002>>ASSIGN  11005<<ASSIGN
     11005>>ASSIGN  11011<<ASSIGN  11011>>ASSIGN  11013<<ASSIGN  11013>>ASSIGN
HEX_DATA IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10980**DCL     11000>>ASSIGN  11001>>ASSIGN  11003>>ASSIGN  11004>>ASSIGN
HEX_FINAL IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10990**DCL     11017--CALL
HEX_FINAL.CLEAR IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10993**DCL     11016<<ASSIGN
HEX_FINAL.LOWER IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10992**DCL     11015<<ASSIGN
HEX_FINAL.UPPER IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10991**DCL     11014<<ASSIGN
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:387  
HEX_INDEX
      9124**DCL     10725<<CALLBLT 10729>>IF      10731>>ASSIGN
HEX_LOAD.ADDRESS IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10636**DCL     10681<<ASSIGN  10684>>IF      10687>>IF      10692>>IF
HEX_LOAD.LOWER IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10638**DCL     10705<<ASSIGN  10713<<ASSIGN
HEX_LOAD.SIZE IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10635**DCL     10680<<ASSIGN
HEX_LOAD.TYPE IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10634**DCL     10678<<ASSIGN  10679<<ASSIGN  10703>>IF      10708>>IF      10712<<ASSIGN
HEX_LOAD.UPPER IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10637**DCL     10704<<ASSIGN
HEX_LOAD$ IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10639**DCL     10633--IMP-PTR 10640--REDEF   10675<<ASSIGN  10678>>ASSIGN  10679>>ASSIGN  10680>>ASSIGN
     10681>>ASSIGN  10684>>IF      10687>>IF      10692>>IF      10703>>IF      10704>>ASSIGN  10705>>ASSIGN
     10708>>IF      10712>>ASSIGN  10713>>ASSIGN
HEX_LOADP.ADDRESS IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10641**DCL     10676<<ASSIGN
HEX_OFFSET
      9113**DCL     10648<<ASSIGN  10652<<ASSIGN  10666>>IF      10668>>ASSIGN
HEX_SAVE IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10981**DCL     11009<<ASSIGN  11011>>ASSIGN
HEX_SPLIT.LOWER
      9203**DCL     10734<<ASSIGN  11001<<ASSIGN  11004<<ASSIGN
HEX_SPLIT.UPPER
      9201**DCL     10733<<ASSIGN  11000<<ASSIGN  11003<<ASSIGN
HEX_VALUE_SPLIT.LOWER IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10632**DCL     10734>>ASSIGN
HEX_VALUE_SPLIT.UPPER IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10631**DCL     10733>>ASSIGN
I
      8929**DCL      9681<<DOINDEX  9682>>IF       9682>>IF       9684>>IF       9684>>IF       9686>>IF
      9686>>IF      10027<<DOINDEX 10028>>IF      10030>>ASSIGN  10031>>ASSIGN  10330<<DOINDEX 10331>>ASSIGN
     10412<<DOINDEX 10413>>ASSIGN  10421>>ASSIGN  10463<<DOINDEX 10464>>ASSIGN  10871<<ASSIGN  10999<<DOINDEX
IONTP_FOUND
      8931**DCL      9733<<ASSIGN  10063>>IF
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:388  
IOTD_FOUND
      9114**DCL      9706<<ASSIGN   9711>>DOWHILE  9719<<ASSIGN   9732<<ASSIGN   9742>>DOWHILE  9750<<ASSIGN
IS$
      8508**DCL     10129>>ASSIGN
J
      8933**DCL     10189<<DOINDEX 10190>>CALLBLT 10424<<ASSIGN  10425>>DOWHILE 10427>>ASSIGN  10429>>ASSIGN
     10430<<ASSIGN  10430>>ASSIGN  10431>>ASSIGN  10473<<ASSIGN  10498<<DOINDEX 10499>>ASSIGN  10524>>IF
     10527>>ASSIGN  10530>>IF      10533>>ASSIGN  10536<<ASSIGN  10536>>ASSIGN  10544<<DOINDEX 10545>>IF
     10545>>IF      10547>>IF      10548>>ASSIGN  10549>>ASSIGN  10550>>IF      10551>>ASSIGN  10552>>ASSIGN
K
      8935**DCL     10426<<ASSIGN  10427>>ASSIGN  10429>>ASSIGN  10430>>ASSIGN  10431<<ASSIGN  10433>>ASSIGN
     10434>>ASSIGN  10436>>ASSIGN  10474<<ASSIGN  10475>>DOWHILE 10477<<ASSIGN  10477>>ASSIGN  10478>>ASSIGN
     10501<<DOINDEX 10502>>ASSIGN  10502>>ASSIGN  10503>>ASSIGN  10503>>ASSIGN  10519>>IF      10521>>ASSIGN
     10523>>DOINDEX 10523>>DOINDEX 10663<<ASSIGN  10701<<ASSIGN  10710<<ASSIGN  10722>>ASSIGN  10724<<DOINDEX
     10724>>DOINDEX 10725>>CALLBLT 10731>>ASSIGN  10767<<ASSIGN  10797<<ASSIGN  10833<<ASSIGN  10833>>ASSIGN
     10841>>IF      10850>>IF      10853<<DOINDEX 10853>>DOINDEX 10854>>CALLBLT 10860>>ASSIGN
KEY_VALUE
      8409**DCL        11--PROC     9866--ENTRY    9878<>CALL     9893>>IF       9895<>CALL     9908<>CALL
      9997>>IF      10036<>CALL    10073--ENTRY   10087<>CALL    10119--ENTRY   10131>>ASSIGN  10561>>ASSIGN
KEY_VALUE.DATA
      8411**DCL     10014>>IF
KEY_VALUE IN PROCEDURE TOL$READ_CATALOG
      9964**DCL      9962--PROC     9970>>ASSIGN
L
      9115**DCL     10497<<ASSIGN  10502>>ASSIGN  10503>>ASSIGN  10505<<ASSIGN  10505>>ASSIGN  10523<<DOINDEX
     10526>>ASSIGN  10528>>ASSIGN  10532>>ASSIGN  10534>>ASSIGN  10722<<ASSIGN  10724>>DOINDEX 10731>>ASSIGN
     10852<<ASSIGN  10853>>DOINDEX 10860>>ASSIGN
LAST
      9116**DCL      9653<<ASSIGN   9654<>CALL     9699<<ASSIGN   9701<>CALL     9703<<ASSIGN   9704<>CALL
      9713<<ASSIGN   9714<>CALL     9744<<ASSIGN   9745<>CALL     9748<>CALL     9784<<ASSIGN   9785<>CALL
      9788<>CALL
LAST IN PROCEDURE TOL$CHECK_CONTROL_OVERLAP
      9677**DCL      9674--PROC     9684>>IF       9684>>IF       9686>>IF
LAST IN PROCEDURE TOL$SAVE_CHECK_LOCATIONS
      9801**DCL      9798--PROC     9808>>ASSIGN
LENGTH
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:389  
      9117**DCL     10269<<ASSIGN  10273<<ASSIGN  10274<<ASSIGN  10275>>ASSIGN  10281<>CALL    10300>>IF
     10302>>ASSIGN  10303>>ASSIGN  10304>>ASSIGN  10305>>ASSIGN  10948<<ASSIGN  10950>>ASSIGN  10951<>CALL
     10963<<ASSIGN  10965>>ASSIGN  10966<>CALL    10966<>CALL    10999>>DOINDEX
LOAD.ADDRESS
      9208**DCL     10247>>IF      10255>>IF      10268>>IF      10269>>ASSIGN  10272>>IF      10273>>ASSIGN
     10276>>ASSIGN  10304>>ASSIGN
LOAD.DATA
      9209**DCL     10271--ASSIGN  10305<<ASSIGN
LOAD.SIZE
      9207**DCL     10245>>ASSIGN  10252>>ASSIGN  10255>>IF      10259>>ASSIGN  10272>>IF      10274>>ASSIGN
     10300>>IF      10302>>ASSIGN  10303<<ASSIGN  10307>>ASSIGN
LOAD.TYPE
      9205**DCL     10244>>IF      10258<<ASSIGN  10299<<ASSIGN
LOAD_OFFSET
      8414**DCL        11--PROC     9699>>ASSIGN   9700>>IF       9866--ENTRY    9878<>CALL    10073--ENTRY
     10087<>CALL    10119--ENTRY   11070>>ASSIGN
LOAD_RELOC
      9118**DCL     10512>>IF      10515>>ASSIGN  10772>>ASSIGN  10943>>ASSIGN  10945>>ASSIGN  11059<<ASSIGN
     11066<<ASSIGN  11071<<ASSIGN
LOAD_SIZE
      8412**DCL        11--PROC     9866--ENTRY    9878<>CALL     9912<<ASSIGN   9955<<ASSIGN   9955>>ASSIGN
     10073--ENTRY   10087<>CALL    10119--ENTRY   10145<<ASSIGN  10226<<ASSIGN  10237<<ASSIGN
LOAD_SKIP IN PROCEDURE TOL$MOVE_LOAD
     10402**DCL     10406--REDEF
LOAD_SKIP.SIZE IN PROCEDURE TOL$MOVE_LOAD
     10404**DCL     10433<<ASSIGN
LOAD_WORD IN PROCEDURE TOL$MOVE_LOAD
     10406**DCL     10434>>ASSIGN
M
      9119**DCL      9845<<DOINDEX  9846>>ASSIGN   9848>>ASSIGN
M$DECKFILE
      8372**DCL     11082>>ASSIGN  11089>>ASSIGN
M$DECKFILE$
      9120**DCL      9976>>ASSIGN   9991>>ASSIGN  10447>>ASSIGN  10565>>ASSIGN  10873>>ASSIGN  10900>>ASSIGN
     11083<<ASSIGN
M$OPEN
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:390  
      6639**DCL-ENT 11081--CALL
M$READ
      6640**DCL-ENT  9975--CALL     9990--CALL    10132--CALL    10137--CALL    10142--CALL    10446--CALL
     10564--CALL    10872--CALL    10899--CALL
MASTER_CATALOG_KEY
      9210**DCL      9893>>IF       9973>>IF       9997>>IF      10010<>CALL
MAX_LOAD
      8413**DCL        11--PROC     9702>>ASSIGN   9866--ENTRY    9878<>CALL    10073--ENTRY   10087<>CALL
     10119--ENTRY
MPCBOT IN PROCEDURE TOL$CHECK_BINARY_DATA
     10326**DCL     10346>>IF
MPCBOT_BIT IN PROCEDURE TOL$CHECK_BINARY_DATA
     10325**DCL     10326--REDEF
NEXT_SEQ
      9121**DCL     10200<<ASSIGN  10200>>ASSIGN  10201>>IF      10586<<ASSIGN
NO_DECKFILE IN PROCEDURE TOL$OPEN_DECKFILE
     11087**LABEL   11081--CALLALT
NUMERICS
      9122**DCL     10190>>CALLBLT 10725>>CALLBLT 10854>>CALLBLT
OBJECT
      9010**DCL      8853--DCLINIT  8854--DCLINIT 10568--CALL
OBJECT.BCD.ASSEMBLER
      9017**DCL     10104>>IF      10220>>IF      10344>>IF      10580>>IF      10580>>IF      10580>>IF
     10615>>IF      10773>>IF      10921>>IF
OBJECT.BCD.CONTROL
      9012**DCL     10574>>IF
OBJECT.BCD.LBL
      9019**DCL     10109>>ASSIGN  10337>>IF      10884>>IF      10912>>IF
OBJECT.BCD.LOAD_TYPE
      9015**DCL     10087<>CALL    10576>>IF      10576>>IF      10576>>IF      11056>>IF      11063>>IF
OBJECT.BCD.SEQ
      9020**DCL     10584>>IF
OBJECT.BCD.TYPE
      9013**DCL     10574>>IF
OBJECT.BINARY_COUNT
      9022**DCL     10104>>IF      10138>>ASSIGN  10141>>ASSIGN  10330>>DOINDEX 10412>>DOINDEX 10450>>IF
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:391  
     10463>>DOINDEX 10603>>IF      10607>>DOINDEX 10646>>ASSIGN  10870>>ASSIGN  10871>>ASSIGN
OBJECT.CHECKSUM
      9026**DCL     10568<>CALL
OBJECT.DECK#
      9021**DCL     10135>>ASSIGN  10140>>ASSIGN  10444>>ASSIGN  10605>>ASSIGN  10869>>ASSIGN  11034>>IF
     11046>>ASSIGN
OBJECT.LOAD_SIZE
      9024**DCL     10145>>ASSIGN
OBJECT.TOTAL_COUNT
      9023**DCL     10104>>IF      10141>>ASSIGN  10603>>IF      10607>>DOINDEX 10870>>ASSIGN  11034>>IF
     11047>>ASSIGN
OBJECT_
      9027**DCL     10133>>ASSIGN
OBJECT_KEY
      9035**DCL      8763--DCLINIT  8764--DCLINIT  8851--DCLINIT  8852--DCLINIT  9942--CALL     9996>>ASSIGN
     10131<<ASSIGN  10561<<ASSIGN
OBJECT_KEY.DATA
      9037**DCL      9038--REDEF
OBJECT_KEY.SIZE
      9036**DCL      9994>>IF      10562>>IF
OBJECT_KEY.SPLIT.CLEAR
      9040**DCL      9041--REDEF    9998<<ASSIGN
OBJECT_KEY.SPLIT.DATA
      9039**DCL     10014>>IF
OBJECT_KEY.SPLIT.DECK#
      9041**DCL     10016>>ASSIGN
OCTAL_INDEX
      9123**DCL      9124--REDEF    9125--REDEF   10854<<CALLBLT 10858>>IF      10860>>ASSIGN
OLD_DECKFILE
      8605**DCL     11081<>CALL
OLD_DECKFILE.ACSVEH_
      8607**DCL      8608--REDEF
OLD_DECKFILE.ALTKEYS_
      8613**DCL      8614--REDEF    8614--REDEF
OLD_DECKFILE.HDR_
      8612**DCL      8613--REDEF
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:392  
OLD_DECKFILE.TAB_
      8611**DCL      8612--REDEF
OLD_DECKFILE.UHL_
      8605**DCL      8606--REDEF    8606--REDEF
OLD_DECKFILE.V
      8614**DCL      8605--DCLINIT
OLD_DECKFILE.V.FSN#
      8645**DCL      8645--REDEF    8645--REDEF
OLD_DECKFILE.WSN_
      8611**DCL      8611--REDEF
PATCH_ASCII.CHARS
      9058**DCL     10816>>IF      10825>>IF      10831>>IF      10836>>IF      10854>>CALLBLT
PATCH_ASCII.DATA
      9057**DCL      9058--REDEF   10761>>CALLBLT 10786>>CALLBLT 10792>>CALLBLT
PATCH_CARD
      9049**DCL      8898--DCLINIT  8899--DCLINIT 10903--CALL
PATCH_CARD.CHECKSUM
      9055**DCL     10903<>CALL
PATCH_CARD.LBL
      9053**DCL     10912>>IF
PATCH_CARD.TYPE
      9051**DCL     10610>>IF      10613>>IF      10909>>IF      10909>>IF      10914>>IF
PATCH_CARD_INDEX IN PROCEDURE TOL$READ_PATCHES
     10598**DCL     10599--REDEF   10761<<CALLBLT 10765>>IF      10765>>IF      10786<<CALLBLT 10791>>IF
     10792<<CALLBLT 10816>>IF      10817<<ASSIGN  10817>>ASSIGN  10818>>ASSIGN  10823>>IF      10836>>IF
     10838<<ASSIGN  10838>>ASSIGN  10841>>IF      10850>>IF      10852>>ASSIGN
PATCH_CARD_OCTAL IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10742**DCL     10743--REDEF   10860<<ASSIGN
PATCH_CARD_START IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10744**DCL     10778<<ASSIGN  10779>>DOWHILE 10786>>CALLBLT 10792>>CALLBLT 10797>>ASSIGN  10801>>IF
     10818<<ASSIGN  10823>>IF      10825>>IF      10825>>IF      10828<<ASSIGN  10831>>IF
PATCH_CARD_VALUE IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10743**DCL     10768<<ASSIGN  10772>>ASSIGN  10799<<ASSIGN  10804>>ASSIGN
PATCH_KEY
      9076**DCL      8806--DCLINIT  8807--DCLINIT  8896--DCLINIT  8897--DCLINIT
PATCH_KEY.CARD#
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:393  
      9079**DCL     10607<<DOINDEX
PATCH_KEY.DECK#
      9078**DCL     10605<<ASSIGN
PATCH_LOAD.ADDRESS IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10749**DCL     10772<<ASSIGN  10773>>IF
PATCH_LOAD.DATA IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10750**DCL     10751--REDEF   10804<<ASSIGN
PATCH_LOAD.SIZE IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10748**DCL     10776<<ASSIGN  10782>>ASSIGN  10804>>ASSIGN  10805<<ASSIGN  10805>>ASSIGN  10809>>ASSIGN
     10811>>ASSIGN  10812>>ASSIGN  10814>>ASSIGN
PATCH_LOAD.SPLIT.LOWER IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10753**DCL     10812>>ASSIGN  10814<<ASSIGN
PATCH_LOAD.SPLIT.UPPER IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10752**DCL     10809>>ASSIGN  10811<<ASSIGN
PATCH_LOAD.TYPE IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10747**DCL     10777<<ASSIGN
PATCH_LOAD$ IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10754**DCL     10746--IMP-PTR 10755--REDEF   10770<<ASSIGN  10772>>ASSIGN  10773>>IF      10776>>ASSIGN
     10777>>ASSIGN  10782>>ASSIGN  10804>>ASSIGN  10804>>ASSIGN  10805>>ASSIGN  10805>>ASSIGN  10809>>ASSIGN
     10809>>ASSIGN  10811>>ASSIGN  10811>>ASSIGN  10812>>ASSIGN  10812>>ASSIGN  10814>>ASSIGN  10814>>ASSIGN
PATCH_LOADP.ADDRESS IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10756**DCL     10771<<ASSIGN
READ_BINARY_DECK
      8671**DCL     10137<>CALL    10446<>CALL
READ_BINARY_DECK.BUF_
      8673**DCL     10136<<ASSIGN  10445<<ASSIGN
READ_BINARY_DECK.STATION_
      8674**DCL      8675--REDEF
READ_BINARY_DECK.V
      8675**DCL      8671--DCLINIT
READ_BINARY_DECK.V.DVBYTE.REREAD#
      8686**DCL      8686--REDEF
READ_BINARY_DECK.V.INDX#
      8684**DCL      8684--REDEF
READ_CATALOG_DATA
      8716**DCL      9975<>CALL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:394  
READ_CATALOG_DATA.STATION_
      8719**DCL      8720--REDEF
READ_CATALOG_DATA.V
      8720**DCL      8716--DCLINIT
READ_CATALOG_DATA.V.DVBYTE.REREAD#
      8731**DCL      8731--REDEF
READ_CATALOG_DATA.V.INDX#
      8729**DCL      8729--REDEF
READ_CATALOG_ENTRY
      8761**DCL      9990<>CALL
READ_CATALOG_ENTRY.STATION_
      8764**DCL      8765--REDEF
READ_CATALOG_ENTRY.V
      8765**DCL      8761--DCLINIT
READ_CATALOG_ENTRY.V.DVBYTE.REREAD#
      8776**DCL      8776--REDEF
READ_CATALOG_ENTRY.V.INDX#
      8774**DCL      8774--REDEF
READ_DKEND_CARD
      8806**DCL     10142<>CALL    10872<>CALL
READ_DKEND_CARD.STATION_
      8809**DCL      8810--REDEF
READ_DKEND_CARD.V
      8810**DCL      8806--DCLINIT
READ_DKEND_CARD.V.DVBYTE.REREAD#
      8821**DCL      8821--REDEF
READ_DKEND_CARD.V.INDX#
      8819**DCL      8819--REDEF
READ_OBJECT_CARD
      8851**DCL     10132<>CALL    10564<>CALL
READ_OBJECT_CARD.STATION_
      8854**DCL      8855--REDEF
READ_OBJECT_CARD.V
      8855**DCL      8851--DCLINIT
READ_OBJECT_CARD.V.DVBYTE.REREAD#
      8866**DCL      8866--REDEF
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:395  
READ_OBJECT_CARD.V.INDX#
      8864**DCL      8864--REDEF
READ_PATCH_CARD
      8896**DCL     10899<>CALL
READ_PATCH_CARD.STATION_
      8899**DCL      8900--REDEF
READ_PATCH_CARD.V
      8900**DCL      8896--DCLINIT
READ_PATCH_CARD.V.DVBYTE.REREAD#
      8911**DCL      8911--REDEF
READ_PATCH_CARD.V.INDX#
      8909**DCL      8909--REDEF
RELOC
      9087**DCL     10467<<ASSIGN  10522>>IF      10798<<ASSIGN  10806>>IF
RELOC.LOWER
      9089**DCL     10503<<ASSIGN  10530>>IF      10533>>ASSIGN  10545>>IF      10550>>IF      10551<<ASSIGN
     10552<<ASSIGN  10813>>ASSIGN  10839<<ASSIGN
RELOC.UPPER
      9088**DCL     10502<<ASSIGN  10524>>IF      10527>>ASSIGN  10545>>IF      10547>>IF      10548<<ASSIGN
     10549<<ASSIGN  10810>>ASSIGN  10834<<ASSIGN
RELOCATION
      9126**DCL     10468>>IF      10548>>ASSIGN  10551>>ASSIGN  10834>>ASSIGN  10839>>ASSIGN  11049>>ASSIGN
     11058<<ASSIGN  11065<<ASSIGN  11070<<ASSIGN  11072>>ASSIGN
RELOCATION_CHECK
      9127**DCL     11034>>IF      11060<<ASSIGN  11067<<ASSIGN  11072<<ASSIGN
RELOC_PAIR.BITS.LOWER IN PROCEDURE TOL$MOVE_RELOCATION_BITS
     10492**DCL     10503>>ASSIGN
RELOC_PAIR.BITS.UPPER IN PROCEDURE TOL$MOVE_RELOCATION_BITS
     10491**DCL     10502>>ASSIGN
RELOC_WORD IN PROCEDURE TOL$MOVE_RELOCATION_BITS
     10487**DCL     10488--REDEF   10499<<ASSIGN  10500>>IF
RESIDUE IN PROCEDURE TOL$MOVE_DATA
     10209**DCL     10213<<ASSIGN  10233<<ASSIGN  10237>>ASSIGN  10238>>ASSIGN  10289>>IF      10290<<ASSIGN
RW_OFFSET
      9128**DCL     10349<<ASSIGN  10652>>ASSIGN
SAVED_KEY
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:396  
      9213**DCL      9950--CALL     9996<<ASSIGN
SAVED_KEY.DATA
      9215**DCL      9216--REDEF
SAVED_KEY.SPLIT.CLEAR
      9218**DCL      9219--REDEF
SECOND_MPC_CK
      9129**DCL     10351<<ASSIGN  10963>>ASSIGN
SEED.LOWER IN PROCEDURE TOL$CHECKSUM
      9825**DCL      9843>>ASSIGN
SEED.UPPER IN PROCEDURE TOL$CHECKSUM
      9824**DCL      9841>>ASSIGN
SEQ
      9130**DCL      9131--REDEF   10197>>CALLBLT 10339<<ASSIGN  10886<<ASSIGN
SEQ_CHARS
      9131**DCL     10190>>CALLBLT
SEQ_INDEX
      9125**DCL     10190<<CALLBLT 10194>>IF
SKIP_LOAD
      9132**DCL     10214>>DOWHILE 10229>>ASSIGN  10230<<ASSIGN  10249>>IF      10250<<ASSIGN  10411<<ASSIGN
SPAN_LOWER
      8937**DCL     10255>>IF      10268>>IF      10269>>ASSIGN  10276>>ASSIGN  10279>>ASSIGN
SPAN_UPPER
      8939**DCL      9659<<ASSIGN   9708<<ASSIGN  10224>>ASSIGN  10226>>ASSIGN  10237>>ASSIGN  10247>>IF
     10272>>IF      10273>>ASSIGN  10279>>ASSIGN  10943<<ASSIGN
SPLIT_DATA
      9220**DCL      9221--REDEF   10515<<ASSIGN  10515>>ASSIGN  10527<<ASSIGN  10527>>ASSIGN  10533<<ASSIGN
     10533>>ASSIGN  10810<<ASSIGN  10810>>ASSIGN  10813<<ASSIGN  10813>>ASSIGN
SPLIT_DCW
      9224**DCL     10281<>CALL    10944<>CALL    10951<>CALL    10966<>CALL    11017<>CALL
SPLIT_DCW.ADDRESS
      9225**DCL     10276<<ASSIGN  10279>>ASSIGN  10945<<ASSIGN  10945>>ASSIGN
SPLIT_DCW.TYPE
      9226**DCL     10278<<ASSIGN
SPLIT_LOAD
      9228**DCL      9232--REDEF    9942--CALL    10951--CALL    10966--CALL    11017--CALL
SPLIT_LOAD.ADDRESS
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:397  
      9231**DCL     10304<<ASSIGN
SPLIT_LOAD.SIZE
      9230**DCL     10302<<ASSIGN
SPLIT_SPLIT.LOWER
      9223**DCL     10514<<ASSIGN  10516>>ASSIGN  10526<<ASSIGN  10528>>ASSIGN  10532<<ASSIGN  10534>>ASSIGN
     10809<<ASSIGN  10811>>ASSIGN  10812<<ASSIGN  10814>>ASSIGN
SPLIT_SPLIT.UPPER
      9222**DCL     10518<<ASSIGN  10808<<ASSIGN
SPLIT_WD1
      9232**DCL     10305>>ASSIGN
START_LOAD$
      9091**DCL      9204--IMP-PTR 10244>>IF      10245>>ASSIGN  10247>>IF      10252>>ASSIGN  10255>>IF
     10255>>IF      10258>>ASSIGN  10259>>ASSIGN  10268>>IF      10269>>ASSIGN  10271>>ASSIGN  10272>>IF
     10272>>IF      10273>>ASSIGN  10274>>ASSIGN  10276>>ASSIGN  10281<>CALL    10299>>ASSIGN  10300>>IF
     10302>>ASSIGN  10303>>ASSIGN  10304>>ASSIGN  10305>>ASSIGN  10307>>ASSIGN  10421<<ASSIGN
START_LOADP
      9092**DCL     10410<<ASSIGN  10419>>IF
START_LOADP.ADDRESS
      9093**DCL     10214>>DOWHILE 10216>>IF      10229<<ASSIGN  10245<<ASSIGN  10245>>ASSIGN  10250>>ASSIGN
     10252<<ASSIGN  10252>>ASSIGN  10259<<ASSIGN  10259>>ASSIGN  10307<<ASSIGN  10307>>ASSIGN  10422<<ASSIGN
     10422>>ASSIGN
STATUS
      9233**DCL      9942<>CALL    10231<>CALL    10281<>CALL
STATUS.RESIDUE
      9236**DCL     10213>>ASSIGN  10225<<ASSIGN  10233>>ASSIGN  10238<<ASSIGN  10279<<ASSIGN  10289>>IF
     10290>>ASSIGN
STATUS$
      9237**DCL      9233--IMP-PTR  9238--REDEF    9876<<ASSIGN   9878<>CALL     9942>>CALL    10084<<ASSIGN
     10087<>CALL    10129<<ASSIGN  10213>>ASSIGN  10225>>ASSIGN  10231>>CALL    10233>>ASSIGN  10238>>ASSIGN
     10279>>ASSIGN  10281>>CALL    10289>>IF      10290>>ASSIGN
STATUSP.ADDRESS
      9239**DCL      9877<<ASSIGN  10085<<ASSIGN
STATUS_OVERLAP IN PROCEDURE TOL$CHECK_STATUS_OVERLAP
      9792**LABEL    9785--CALLALT
STATUS_SAVE IN PROCEDURE TOL$RECALCULATE_MPC_CHECKSUM
     10935**DCL     10944<>CALL    10951<>CALL    10966<>CALL    11017<>CALL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:398  
STATUS_SAVE.LAST_DCW_POINTER IN PROCEDURE TOL$RECALCULATE_MPC_CHECKSUM
     10937**DCL     10942<<ASSIGN
TOL$ADJUST_PATCH_INDEXS IN PROCEDURE TOL$BUILD_OCTAL_PATCH
     10821**PROC    10800--CALL
TOL$BAD_CARD
      9244**DCL-ENT  9769--CALL     9806--CALL     9958--CALL     9974--CALL     9978--CALL     9983--CALL
      9984--CALL     9993--CALL     9995--CALL    10003--CALL    10004--CALL    10149--CALL    10177--CALL
     10195--CALL    10202--CALL    10295--CALL    10338--CALL    10342--CALL    10347--CALL    10395--CALL
     10449--CALL    10451--CALL    10456--CALL    10457--CALL    10546--CALL    10563--CALL    10567--CALL
     10575--CALL    10579--CALL    10583--CALL    10585--CALL    10590--CALL    10617--CALL    10655--CALL
     10662--CALL    10667--CALL    10686--CALL    10689--CALL    10693--CALL    10709--CALL    10730--CALL
     10766--CALL    10775--CALL    10827--CALL    10842--CALL    10851--CALL    10859--CALL    10875--CALL
     10883--CALL    10885--CALL    10892--CALL    10893--CALL    10902--CALL    10911--CALL    10913--CALL
     10918--CALL    10920--CALL    10922--CALL    10927--CALL    10928--CALL    11025--CALL    11088--CALL
TOL$BINARY$
      8943**DCL      8944--REDEF    8945--REDEF
TOL$BUFFER$
      8922**DCL      8923--REDEF
TOL$BUILD_HEX_LOAD IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10673**PROC    10669--CALL
TOL$BUILD_HEX_PATCH IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10699**PROC    10670--CALL
TOL$BUILD_HEX_SEGMENT IN PROCEDURE TOL$READ_PATCHES
     10623**PROC    10616--CALL
TOL$BUILD_OCTAL_PATCH IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10785**PROC    10780--CALL
TOL$BUILD_OCTAL_SEGMENT IN PROCEDURE TOL$READ_PATCHES
     10740**PROC    10611--CALL
TOL$CALCULATE_MPC_CHECKSUM IN PROCEDURE TOL$RECALCULATE_MPC_CHECKSUM
     10978**PROC    10960--CALL    10975--CALL
TOL$CALL_SEQ$
      8948**DCL      8949--REDEF    8950--REDEF
TOL$CARD_SEQ
      8924**DCL      8925--REDEF
TOL$CATALOG_ENTRY_KEY
      8954**DCL      8958--REDEF
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:399  
TOL$CATALOG_KEY
      8962**DCL      8969--REDEF
TOL$CATALOG_KEY.DATA
      8964**DCL      8965--REDEF
TOL$CATALOG_KEY.SPLIT.CLEAR
      8967**DCL      8968--REDEF
TOL$CHECKSUM
      9814**PROC     9950--CALL    10171--CALL    10379--CALL
TOL$CHECK_BINARY_DATA IN PROCEDURE TOL$READ_BINARY
     10323**PROC    10318--CALL
TOL$CHECK_CALL_SEQUENCE
        11**PROC     9878--CALL    10087--CALL
TOL$CHECK_CARD_CHECKSUM IN PROCEDURE TOL$CHECK_BINARY_DATA
     10357**PROC    10332--CALL
TOL$CHECK_CHECKSUM
     10153**PROC    10568--CALL    10876--CALL    10903--CALL
TOL$CHECK_CONTROL_OVERLAP
      9674**PROC     9714--CALL     9745--CALL     9785--CALL
TOL$CHECK_DATA_OVERLAP
      9693**PROC     9657--CALL
TOL$CHECK_DCW_OVERLAP
      9730**PROC     9656--CALL
TOL$CHECK_SEQ
     10182**PROC    10340--CALL    10887--CALL
TOL$CHECK_STATUS_OVERLAP
      9781**PROC     9655--CALL
TOL$CONVERT_HEX IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10720**PROC    10664--CALL    10702--CALL    10711--CALL
TOL$CONVERT_OCTAL IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10848**PROC    10769--CALL    10803--CALL
TOL$DECKFILE_ARS#
      8926**DCL      8927--REDEF
TOL$DKEND_CARD
      8976**DCL      8984--REDEF    8992--REDEF
TOL$FREE_BUFFER
      9245**DCL-ENT  9664--CALL     9670--CALL     9924--CALL     9928--CALL    10110--CALL    10114--CALL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:400  
TOL$GET_BUFFER
      9246**DCL-ENT  9648--CALL     9873--CALL    10081--CALL
TOL$GET_DATA
      9247**DCL-ENT 10951--CALL    10966--CALL
TOL$GET_NEXT_CONTROL_WORD IN PROCEDURE TOL$CHECK_DCW_OVERLAP
      9762**PROC     9735--CALL     9751--CALL
TOL$GET_NEXT_DCW
      9248**DCL-ENT  9660--CALL     9709--CALL     9720--CALL    10231--CALL    10944--CALL
TOL$I
      8928**DCL      8929--REDEF
TOL$IONTP_FOUND
      8930**DCL      8931--REDEF
TOL$J
      8932**DCL      8933--REDEF
TOL$K
      8934**DCL      8935--REDEF
TOL$MORE_LOAD IN PROCEDURE TOL$MOVE_DATA
     10242**PROC    10235--CALL
TOL$MOVE_DATA
     10207**PROC    10103--CALL
TOL$MOVE_ENTRY
      9933**PROC     9916--CALL     9921--CALL
TOL$MOVE_LOAD IN PROCEDURE TOL$READ_BINARY
     10400**PROC    10320--CALL
TOL$MOVE_RELOCATION_BITS IN PROCEDURE TOL$RELOCATE_DATA
     10485**PROC    10470--CALL
TOL$OBJECT
      8993**DCL      9010--REDEF    9027--REDEF
TOL$OBJECT_KEY
      9028**DCL      9035--REDEF
TOL$OBJECT_KEY.DATA
      9030**DCL      9031--REDEF
TOL$OBJECT_KEY.SPLIT.CLEAR
      9033**DCL      9034--REDEF
TOL$OPEN_DECKFILE
     11077**PROC     9875--CALL    10083--CALL    10128--CALL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:401  
TOL$PATCH_CARD
      9042**DCL      9049--REDEF    9056--REDEF    9060--REDEF    9068--REDEF
TOL$PATCH_KEY
      9072**DCL      9076--REDEF    9080--REDEF
TOL$READ_BINARY
     10315**PROC    10101--CALL
TOL$READ_BUFFER IN PROCEDURE TOL$READ_BINARY
     10442**PROC    10317--CALL
TOL$READ_CATALOG
      9962**PROC     9895--CALL     9908--CALL    10010--CALL    10036--CALL
TOL$READ_DKEND IN PROCEDURE TOL$READ_PATCHES
     10867**PROC    10606--CALL
TOL$READ_ENTRY
      9988**PROC     9915--CALL    10013--CALL
TOL$READ_MASTER_CATALOG
     10008**PROC     9894--CALL
TOL$READ_OBJECT
     10560**PROC    10086--CALL
TOL$READ_PATCH IN PROCEDURE TOL$READ_PATCHES
     10897**PROC    10609--CALL
TOL$READ_PATCHES
     10596**PROC    10102--CALL
TOL$RECALCULATE_MPC_CHECKSUM
     10933**PROC    10106--CALL
TOL$RELOC
      9084**DCL      9087--REDEF
TOL$RELOCATE_DATA IN PROCEDURE TOL$READ_BINARY
     10461**PROC    10319--CALL
TOL$RELOCATE_WORDS IN PROCEDURE TOL$RELOCATE_DATA
     10510**PROC    10476--CALL
TOL$SAVE_CHECK_LOCATIONS
      9798**PROC     9654--CALL     9701--CALL     9704--CALL     9748--CALL     9788--CALL
TOL$SAVE_DATA
      9249**DCL-ENT  9942--CALL    10281--CALL    11017--CALL
TOL$SAVE_LOAD IN PROCEDURE TOL$MORE_LOAD
     10266**PROC    10261--CALL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:402  
TOL$SET_CATALOG_SEQUENCE
     10041**PROC     9896--CALL     9901--CALL     9909--CALL
TOL$SET_DATA_SEQUENCE
     11030**PROC    10100--CALL
TOL$SET_RELOCATION
     11054**PROC    10099--CALL
TOL$SET_RELOCATION_WORDS IN PROCEDURE TOL$RELOCATE_DATA
     10542**PROC    10471--CALL
TOL$SPAN_LOWER
      8936**DCL      8937--REDEF
TOL$SPAN_UPPER
      8938**DCL      8939--REDEF
TOL$SPLIT_LOAD_SEGMENT IN PROCEDURE TOL$SAVE_LOAD
     10297**PROC    10292--CALL
TOL$START_LOAD$
      9090**DCL      9091--REDEF    9092--REDEF
TOM$SEG.DKEND
      8528**DCL     10143<<ASSIGN
TOM$SEG.LAST_SECTOR
      8524**DCL     10138<<ASSIGN
TOM$SEG.OBJECT
      8522**DCL     10133<<ASSIGN
TOM$SEG.SECTORS
      8526**DCL     10136--ASSIGN
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:403  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:404  
              FULL UREF LISTING

B$EXCFR
      8419**DCL
B$EXCFR.ALTEMPTY
      8419**DCL
B$EXCFR.ASLIC
      8419**DCL
B$EXCFR.ASR
      8425**DCL
B$EXCFR.ASR.BASE
      8426**DCL
B$EXCFR.ASR.BOUND
      8425**DCL
B$EXCFR.ASR.FLAGS
      8425**DCL
B$EXCFR.ASR.FLAGS.BOUND
      8426**DCL
B$EXCFR.ASR.FLAGS.CACHE
      8426**DCL
B$EXCFR.ASR.FLAGS.EXU
      8426**DCL
B$EXCFR.ASR.FLAGS.MON
      8426**DCL
B$EXCFR.ASR.FLAGS.PRIV
      8426**DCL
B$EXCFR.ASR.FLAGS.READ
      8425**DCL
B$EXCFR.ASR.FLAGS.SAVE
      8425**DCL
B$EXCFR.ASR.FLAGS.SEGMENT
      8426**DCL
B$EXCFR.ASR.FLAGS.WRITE
      8425**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:405  
B$EXCFR.ASR.TYPE
      8426**DCL
B$EXCFR.ASR.WSR
      8426**DCL
B$EXCFR.BRKCNT
      8433**DCL
B$EXCFR.CODE
      8432**DCL
B$EXCFR.CP#
      8422**DCL
B$EXCFR.DCB#
      8432**DCL
B$EXCFR.DRS
      8430**DCL
B$EXCFR.DSAR
      8423**DCL
B$EXCFR.ECC
      8419**DCL
B$EXCFR.EIS
      8431**DCL
B$EXCFR.ERR
      8433**DCL
B$EXCFR.ERR.CODE
      8433**DCL
B$EXCFR.ERR.FCG
      8433**DCL
B$EXCFR.ERR.MID
      8433**DCL
B$EXCFR.ERR.MON
      8433**DCL
B$EXCFR.ERR.SEV
      8434**DCL
B$EXCFR.EVSC
      8431**DCL
B$EXCFR.EWSQ#
      8423**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:406  
B$EXCFR.FCODE
      8422**DCL
B$EXCFR.FI
      8422**DCL
B$EXCFR.FPT
      8432**DCL
B$EXCFR.FPT.FCG
      8432**DCL
B$EXCFR.FPT.PMME
      8432**DCL
B$EXCFR.IC
      8420**DCL
B$EXCFR.INST
      8420**DCL
B$EXCFR.INST.EVEN
      8420**DCL
B$EXCFR.INST.ODD
      8420**DCL
B$EXCFR.IRBIT
      8420**DCL
B$EXCFR.IRBIT.CARRY
      8421**DCL
B$EXCFR.IRBIT.EXOF
      8421**DCL
B$EXCFR.IRBIT.EXUF
      8421**DCL
B$EXCFR.IRBIT.EXUFM
      8422**DCL
B$EXCFR.IRBIT.HEX
      8422**DCL
B$EXCFR.IRBIT.MIR
      8421**DCL
B$EXCFR.IRBIT.MM
      8421**DCL
B$EXCFR.IRBIT.NEG
      8420**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:407  
B$EXCFR.IRBIT.OF
      8421**DCL
B$EXCFR.IRBIT.OFM
      8421**DCL
B$EXCFR.IRBIT.PE
      8421**DCL
B$EXCFR.IRBIT.PM
      8421**DCL
B$EXCFR.IRBIT.TR
      8421**DCL
B$EXCFR.IRBIT.TRC
      8421**DCL
B$EXCFR.IRBIT.ZERO
      8420**DCL
B$EXCFR.ISR
      8423**DCL
B$EXCFR.ISR.BASE
      8425**DCL
B$EXCFR.ISR.BOUND
      8423**DCL
B$EXCFR.ISR.FLAGS
      8423**DCL
B$EXCFR.ISR.FLAGS.BOUND
      8424**DCL
B$EXCFR.ISR.FLAGS.CACHE
      8424**DCL
B$EXCFR.ISR.FLAGS.EXU
      8424**DCL
B$EXCFR.ISR.FLAGS.MON
      8424**DCL
B$EXCFR.ISR.FLAGS.PRIV
      8424**DCL
B$EXCFR.ISR.FLAGS.READ
      8424**DCL
B$EXCFR.ISR.FLAGS.SAVE
      8424**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:408  
B$EXCFR.ISR.FLAGS.SEGMENT
      8424**DCL
B$EXCFR.ISR.FLAGS.WRITE
      8424**DCL
B$EXCFR.ISR.TYPE
      8425**DCL
B$EXCFR.ISR.WSR
      8425**DCL
B$EXCFR.IS_SEGID
      8423**DCL
B$EXCFR.LSR
      8427**DCL
B$EXCFR.LSR.BASE
      8428**DCL
B$EXCFR.LSR.BOUND
      8427**DCL
B$EXCFR.LSR.FLAGS
      8427**DCL
B$EXCFR.LSR.FLAGS.BOUND
      8428**DCL
B$EXCFR.LSR.FLAGS.CACHE
      8427**DCL
B$EXCFR.LSR.FLAGS.EXU
      8427**DCL
B$EXCFR.LSR.FLAGS.MON
      8427**DCL
B$EXCFR.LSR.FLAGS.PRIV
      8427**DCL
B$EXCFR.LSR.FLAGS.READ
      8427**DCL
B$EXCFR.LSR.FLAGS.SAVE
      8427**DCL
B$EXCFR.LSR.FLAGS.SEGMENT
      8428**DCL
B$EXCFR.LSR.FLAGS.WRITE
      8427**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:409  
B$EXCFR.LSR.TYPE
      8428**DCL
B$EXCFR.LSR.WSR
      8428**DCL
B$EXCFR.P#
      8434**DCL
B$EXCFR.PRS
      8430**DCL
B$EXCFR.PSR
      8428**DCL
B$EXCFR.PSR.BASE
      8430**DCL
B$EXCFR.PSR.BOUND
      8428**DCL
B$EXCFR.PSR.FLAGS
      8428**DCL
B$EXCFR.PSR.FLAGS.BOUND
      8429**DCL
B$EXCFR.PSR.FLAGS.CACHE
      8429**DCL
B$EXCFR.PSR.FLAGS.EXU
      8429**DCL
B$EXCFR.PSR.FLAGS.MON
      8429**DCL
B$EXCFR.PSR.FLAGS.PRIV
      8429**DCL
B$EXCFR.PSR.FLAGS.READ
      8428**DCL
B$EXCFR.PSR.FLAGS.SAVE
      8429**DCL
B$EXCFR.PSR.FLAGS.SEGMENT
      8429**DCL
B$EXCFR.PSR.FLAGS.WRITE
      8429**DCL
B$EXCFR.PSR.TYPE
      8430**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:410  
B$EXCFR.PSR.WSR
      8429**DCL
B$EXCFR.REGS
      8430**DCL
B$EXCFR.REGS.A
      8430**DCL
B$EXCFR.REGS.E
      8431**DCL
B$EXCFR.REGS.Q
      8430**DCL
B$EXCFR.REGS.XREG
      8430**DCL
B$EXCFR.RVA
      8423**DCL
B$EXCFR.SCR
      8423**DCL
B$EXCFR.SSF
      8422**DCL
B$EXCFR.U1
      8431**DCL
B$TCB
      8494**DCL
B$TCB.CURRSZ
      8494**DCL
B$TCB.STK$
      8494**DCL
B$TCB.TCBAVSZ
      8494**DCL
BINARY.LOAD
      9138**DCL
BINARY.SPLIT
      9146**DCL
BINARYP
      8945**DCL
BINARY_LBLSEQ
      9149**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:411  
CALL_SEQP
      8950**DCL
CALL_SEQUENCE.CATALOG_CHECKSUM
      8384**DCL
CALL_SEQUENCE.CATALOG_CKSUM.LOWER
      8383**DCL
CALL_SEQUENCE.CATALOG_CKSUM.UPPER
      8382**DCL
CALL_SEQUENCE_MORE
      8392**DCL
CATALOG_CONTROL
      9159**DCL
CATALOG_CONTROL.CHECKSUM
      9161**DCL
CATALOG_DATA.CHECKSUM.LOWER
      9158**DCL
CATALOG_DATA.CHECKSUM.UPPER
      9157**DCL
CATALOG_ENTRY_KEY.SIZE
      8959**DCL
CATALOG_KEY.SPLIT
      8972**DCL
CATALOG_KEY.SPLIT.DATA
      8973**DCL
CHECK
      9162**DCL
CHECKSUM
      9166**DCL
CHECKSUM.LOWER.LOWER
      9173**DCL
CHECKSUM_DATA IN PROCEDURE TOL$CHECKSUM
      9831**DCL
CHECKSUM_DATA IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10367**DCL
CHECKSUM_SPLIT.UPPER IN PROCEDURE TOL$CHECKSUM
      9835**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:412  
CHECKSUM_SPLIT.UPPER IN PROCEDURE TOL$CHECK_CARD_CHECKSUM
     10371**DCL
CHECK_DCW.SIZE
      8402**DCL
CHECK_STATUS.HARDWARE_STATUS
      9176**DCL
DCW.SIZE
      9187**DCL
DCWP
      9191**DCL
DECK_KEY.SIZE
      9195**DCL
DKEND_KEY
      9080**DCL
DKEND_KEY.SIZE
      9081**DCL
F$DCB
      8437**DCL
F$DCB.ACCT#
      8453**DCL
F$DCB.ACS#
      8461**DCL
F$DCB.AFTRBLK
      8477**DCL
F$DCB.AGE
      8488**DCL
F$DCB.ALTKEYX
      8468**DCL
F$DCB.AMFLG
      8474**DCL
F$DCB.AMFLG.ACCF
      8474**DCL
F$DCB.AMFLG.ACSF
      8474**DCL
F$DCB.AMFLG.INSF
      8474**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:413  
F$DCB.AMFLG.PROF
      8474**DCL
F$DCB.AMFLG.SNLF
      8474**DCL
F$DCB.AMFLG.USRF
      8474**DCL
F$DCB.AMR#
      8456**DCL
F$DCB.AMRSETSTA
      8455**DCL
F$DCB.ANSISPANSEQ#
      8471**DCL
F$DCB.ASN#
      8458**DCL
F$DCB.ATTR.APL#
      8463**DCL
F$DCB.ATTR.BIN#
      8463**DCL
F$DCB.ATTR.DENS#
      8462**DCL
F$DCB.ATTR.GRLGL#
      8462**DCL
F$DCB.ATTR.LOWERCASE#
      8463**DCL
F$DCB.ATTR.NATL#
      8462**DCL
F$DCB.ATTR.NOXLATE#
      8462**DCL
F$DCB.ATTR.TRANSLGL#
      8462**DCL
F$DCB.ATTR.TRUOVRPRT#
      8462**DCL
F$DCB.ATTR.UPPERCASE#
      8462**DCL
F$DCB.AU#
      8455**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:414  
F$DCB.AUTHFFLG
      8469**DCL
F$DCB.AUTHFFLG.AU#
      8471**DCL
F$DCB.AUTHFFLG.AURD#
      8471**DCL
F$DCB.AUTHFFLG.CREATE#
      8471**DCL
F$DCB.AUTHFFLG.DELF#
      8470**DCL
F$DCB.AUTHFFLG.DELR#
      8470**DCL
F$DCB.AUTHFFLG.EXEC#
      8470**DCL
F$DCB.AUTHFFLG.NOLIST#
      8470**DCL
F$DCB.AUTHFFLG.READ#
      8470**DCL
F$DCB.AUTHFFLG.REATTR#
      8470**DCL
F$DCB.AUTHFFLG.TCTL#
      8471**DCL
F$DCB.AUTHFFLG.UPD#
      8470**DCL
F$DCB.AUTHFFLG.WNEW#
      8470**DCL
F$DCB.BADARS#
      8472**DCL
F$DCB.BFR
      8488**DCL
F$DCB.BFR.BUFUP
      8489**DCL
F$DCB.BFR.BUFX
      8489**DCL
F$DCB.BFR.CHNG
      8489**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:415  
F$DCB.BFR.CVM
      8489**DCL
F$DCB.BFR.DA
      8489**DCL
F$DCB.BFR.SCRUB
      8489**DCL
F$DCB.BFR1
      8489**DCL
F$DCB.BFR1.CX
      8490**DCL
F$DCB.BFR1.FLAGS
      8489**DCL
F$DCB.BFR1.FLAGS.ONE_WORD_HEADER
      8489**DCL
F$DCB.BFR1.SIZ
      8490**DCL
F$DCB.BLKL#
      8459**DCL
F$DCB.BLKLEN
      8482**DCL
F$DCB.BLOCKED#
      8457**DCL
F$DCB.BOL#
      8460**DCL
F$DCB.BUPF
      8447**DCL
F$DCB.BUPM#
      8458**DCL
F$DCB.BYTESLEFT
      8481**DCL
F$DCB.CACHE
      8476**DCL
F$DCB.CBUFNUM
      8480**DCL
F$DCB.CFU$
      8478**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:416  
F$DCB.CHAIN#
      8464**DCL
F$DCB.CHANTIME#
      8464**DCL
F$DCB.CNVRT#
      8456**DCL
F$DCB.CODE16$
      8468**DCL
F$DCB.COMP#
      8457**DCL
F$DCB.CONNCT#
      8463**DCL
F$DCB.CONT
      8476**DCL
F$DCB.CRECNO
      8481**DCL
F$DCB.CRECX
      8480**DCL
F$DCB.CSEED
      8481**DCL
F$DCB.CTG#
      8457**DCL
F$DCB.CTLCMDIN
      8485**DCL
F$DCB.CVOL#
      8457**DCL
F$DCB.CWORD
      8486**DCL
F$DCB.CX
      8486**DCL
F$DCB.DBGDCBNO#
      8459**DCL
F$DCB.DBGSYSID#
      8459**DCL
F$DCB.DCB#
      8471**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:417  
F$DCB.DCBNAME
      8490**DCL
F$DCB.DCBNAME.N
      8491**DCL
F$DCB.DCBNAME.S
      8491**DCL
F$DCB.DCBNAME.X
      8491**DCL
F$DCB.DCT$
      8466**DCL
F$DCB.DDEV
      8449**DCL
F$DCB.DDEV.CP#
      8449**DCL
F$DCB.DDEV.GR#
      8450**DCL
F$DCB.DDEV.IC#
      8449**DCL
F$DCB.DDEV.LP#
      8449**DCL
F$DCB.DDEV.UCOUT#
      8450**DCL
F$DCB.DDEV.XEQ#
      8450**DCL
F$DCB.DECRYPT
      8484**DCL
F$DCB.DENSITY#
      8464**DCL
F$DCB.DESC
      8450**DCL
F$DCB.DESC.ACTIVE#
      8452**DCL
F$DCB.DESC.ARCHIVE#
      8451**DCL
F$DCB.DESC.BAD#
      8451**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:418  
F$DCB.DESC.BUF#
      8451**DCL
F$DCB.DESC.BUPM#
      8451**DCL
F$DCB.DESC.DELF#
      8450**DCL
F$DCB.DESC.FETCH#
      8452**DCL
F$DCB.DESC.NBUF#
      8451**DCL
F$DCB.DESC.NOLIST#
      8451**DCL
F$DCB.DESC.ODSTOW#
      8451**DCL
F$DCB.DESC.QS#
      8451**DCL
F$DCB.DESC.TERMINATE#
      8452**DCL
F$DCB.DESC.TPB#
      8452**DCL
F$DCB.DEVADR
      8466**DCL
F$DCB.DEVADR.CHAN#
      8467**DCL
F$DCB.DEVADR.DVN#
      8467**DCL
F$DCB.DEVADR.IOM#
      8467**DCL
F$DCB.DISP#
      8458**DCL
F$DCB.DQH$
      8465**DCL
F$DCB.DVBYTE
      8446**DCL
F$DCB.DVBYTE.BIN#
      8446**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:419  
F$DCB.DVBYTE.TOP#
      8446**DCL
F$DCB.DVBYTE.TRANS#
      8446**DCL
F$DCB.DVBYTE.VFC#
      8446**DCL
F$DCB.DVFC#
      8465**DCL
F$DCB.DVTYPE#
      8458**DCL
F$DCB.EBCDIC#
      8456**DCL
F$DCB.ENQF
      8476**DCL
F$DCB.EOMVAL#
      8447**DCL
F$DCB.EOMVAL#.VALUE#
      8448**DCL
F$DCB.EOMVAL#.VFLG#
      8447**DCL
F$DCB.EOP
      8473**DCL
F$DCB.EVENT
      8468**DCL
F$DCB.EXIST#
      8457**DCL
F$DCB.EXPIRE#
      8460**DCL
F$DCB.FCD#
      8456**DCL
F$DCB.FCI#
      8456**DCL
F$DCB.FCN
      8482**DCL
F$DCB.FCN.CNT
      8482**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:420  
F$DCB.FCN.F
      8482**DCL
F$DCB.FDCM
      8481**DCL
F$DCB.FEPIO
      8488**DCL
F$DCB.FEPIO.BPP
      8488**DCL
F$DCB.FEPIO.BUFX
      8488**DCL
F$DCB.FEPIO.EVENT
      8488**DCL
F$DCB.FEPIO.KEYX
      8488**DCL
F$DCB.FEPIO.KPP
      8488**DCL
F$DCB.FEPIO2
      8490**DCL
F$DCB.FEPIO3
      8490**DCL
F$DCB.FEPSIZ
      8487**DCL
F$DCB.FEPSIZ.BUF
      8487**DCL
F$DCB.FEPSIZ.KEY
      8487**DCL
F$DCB.FEXT
      8473**DCL
F$DCB.FEXTX
      8460**DCL
F$DCB.FFLG
      8448**DCL
F$DCB.FFLG.AU#
      8449**DCL
F$DCB.FFLG.AURD#
      8449**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:421  
F$DCB.FFLG.CREATE#
      8449**DCL
F$DCB.FFLG.DELF#
      8448**DCL
F$DCB.FFLG.DELR#
      8448**DCL
F$DCB.FFLG.EXEC#
      8449**DCL
F$DCB.FFLG.NOLIST#
      8448**DCL
F$DCB.FFLG.READ#
      8448**DCL
F$DCB.FFLG.REATTR#
      8448**DCL
F$DCB.FFLG.TCTL#
      8449**DCL
F$DCB.FFLG.UPD#
      8448**DCL
F$DCB.FFLG.WNEW#
      8448**DCL
F$DCB.FIELDX
      8468**DCL
F$DCB.FLPW#
      8443**DCL
F$DCB.FMOD
      8473**DCL
F$DCB.FPRGX
      8468**DCL
F$DCB.FPSTR
      8483**DCL
F$DCB.FTAM
      8477**DCL
F$DCB.FTAM.CTX
      8478**DCL
F$DCB.FTAM.PMME
      8478**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:422  
F$DCB.FTAM.USR
      8478**DCL
F$DCB.FUN#
      8458**DCL
F$DCB.GDISP
      8484**DCL
F$DCB.GHSTACS#
      8467**DCL
F$DCB.GRPOS
      8476**DCL
F$DCB.GTYP
      8473**DCL
F$DCB.HASH
      8481**DCL
F$DCB.IASN
      8486**DCL
F$DCB.ID
      8487**DCL
F$DCB.ID.DA
      8487**DCL
F$DCB.ID.GX
      8487**DCL
F$DCB.IFMT
      8485**DCL
F$DCB.IGNOREFSN#
      8455**DCL
F$DCB.INDX
      8482**DCL
F$DCB.IOERROK#
      8455**DCL
F$DCB.IORG
      8480**DCL
F$DCB.IRRECX
      8472**DCL
F$DCB.IWL
      8485**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:423  
F$DCB.IWL.HDRIWL
      8485**DCL
F$DCB.IWL.SEQIWL
      8485**DCL
F$DCB.IWL.TABIWL
      8485**DCL
F$DCB.JRNLBYPASS#
      8467**DCL
F$DCB.KEYL#
      8460**DCL
F$DCB.KEYTYPE#
      8469**DCL
F$DCB.KEYX#
      8460**DCL
F$DCB.KFIELDX
      8469**DCL
F$DCB.LASTKEY
      8477**DCL
F$DCB.LASTKEY$
      8477**DCL
F$DCB.LDCTX
      8466**DCL
F$DCB.LDFLG
      8475**DCL
F$DCB.LINES#
      8465**DCL
F$DCB.LOAD#
      8455**DCL
F$DCB.LOGSEC
      8484**DCL
F$DCB.LPOOL
      8478**DCL
F$DCB.LRDL0#
      8461**DCL
F$DCB.LSLIDE#
      8461**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:424  
F$DCB.LSTAOR#
      8455**DCL
F$DCB.LSTBLK
      8477**DCL
F$DCB.MAXVOL#
      8464**DCL
F$DCB.MEDIA
      8485**DCL
F$DCB.MODCNT
      8483**DCL
F$DCB.MOUNT
      8475**DCL
F$DCB.MOVED
      8486**DCL
F$DCB.MPC$
      8466**DCL
F$DCB.MUST_CVOL
      8474**DCL
F$DCB.NAME#
      8453**DCL
F$DCB.NAME#.C17
      8453**DCL
F$DCB.NAME#.C17.CC
      8453**DCL
F$DCB.NAME#.L
      8453**DCL
F$DCB.NEW_FSECT
      8475**DCL
F$DCB.OLDIOERR
      8484**DCL
F$DCB.OWNER
      8475**DCL
F$DCB.PASS#
      8453**DCL
F$DCB.PASSF#
      8456**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:425  
F$DCB.PATH
      8472**DCL
F$DCB.PATH.CHAN#
      8472**DCL
F$DCB.PATH.IOM#
      8472**DCL
F$DCB.PGINGRAN
      8484**DCL
F$DCB.PRIVOPN
      8484**DCL
F$DCB.PSN#
      8453**DCL
F$DCB.QISS#
      8455**DCL
F$DCB.RA
      8476**DCL
F$DCB.RDL0#
      8447**DCL
F$DCB.REALSPAN
      8484**DCL
F$DCB.RECL#
      8459**DCL
F$DCB.RESNT
      8454**DCL
F$DCB.RESNT.NUM
      8454**DCL
F$DCB.RESNT.TYP
      8454**DCL
F$DCB.RETRYCNT#
      8450**DCL
F$DCB.RPOS
      8476**DCL
F$DCB.SEED#
      8473**DCL
F$DCB.SEGX
      8483**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:426  
F$DCB.SEQ#
      8465**DCL
F$DCB.SEQCOL#
      8465**DCL
F$DCB.SEQID#
      8465**DCL
F$DCB.SETSTA$
      8452**DCL
F$DCB.SEZ_OK
      8474**DCL
F$DCB.SHARE#
      8457**DCL
F$DCB.SHARED
      8473**DCL
F$DCB.SLIDE#
      8447**DCL
F$DCB.SPAN
      8475**DCL
F$DCB.SPANNED#
      8457**DCL
F$DCB.SPARE#
      8461**DCL
F$DCB.STARF
      8473**DCL
F$DCB.STARTX
      8469**DCL
F$DCB.STARX
      8476**DCL
F$DCB.STR#
      8483**DCL
F$DCB.SYSID#
      8460**DCL
F$DCB.TAPTYP
      8479**DCL
F$DCB.TAPTYP.CP6F
      8479**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:427  
F$DCB.TAPTYP.HAVLASTKEY
      8479**DCL
F$DCB.TAPTYP.MANAGED
      8480**DCL
F$DCB.TAPTYP.NOCVOL
      8480**DCL
F$DCB.TAPTYP.PASTFM
      8480**DCL
F$DCB.TAPTYP.RWASC
      8479**DCL
F$DCB.TAPTYP.USRBUF
      8479**DCL
F$DCB.TDALVL
      8478**DCL
F$DCB.TDEXTST$
      8452**DCL
F$DCB.TDFLG
      8463**DCL
F$DCB.TDFLG.SDSK#
      8463**DCL
F$DCB.TDSTAT#
      8454**DCL
F$DCB.TRNC
      8476**DCL
F$DCB.TYC
      8443**DCL
F$DCB.TYC.BLNKTP#
      8443**DCL
F$DCB.TYC.BOF#
      8443**DCL
F$DCB.TYC.BOT#
      8443**DCL
F$DCB.TYC.CDALRT#
      8445**DCL
F$DCB.TYC.CGCRCW
      8446**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:428  
F$DCB.TYC.CGCWRV
      8446**DCL
F$DCB.TYC.CGFULL
      8445**DCL
F$DCB.TYC.CGKEYV
      8445**DCL
F$DCB.TYC.CGLWRV
      8445**DCL
F$DCB.TYC.DACT#
      8444**DCL
F$DCB.TYC.DI#
      8444**DCL
F$DCB.TYC.EGV#
      8443**DCL
F$DCB.TYC.EOD#
      8444**DCL
F$DCB.TYC.EOF#
      8444**DCL
F$DCB.TYC.EOT#
      8443**DCL
F$DCB.TYC.FRAW#
      8445**DCL
F$DCB.TYC.IOERR#
      8444**DCL
F$DCB.TYC.LAST#
      8445**DCL
F$DCB.TYC.LD#
      8444**DCL
F$DCB.TYC.LDISC#
      8444**DCL
F$DCB.TYC.MTRAP#
      8444**DCL
F$DCB.TYC.OPER#
      8443**DCL
F$DCB.TYC.PROT#
      8445**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:429  
F$DCB.TYC.TIMO#
      8445**DCL
F$DCB.TYC.XTRARD
      8445**DCL
F$DCB.TYPE#
      8454**DCL
F$DCB.UB$
      8482**DCL
F$DCB.UBYTES
      8482**DCL
F$DCB.UCOUT
      8479**DCL
F$DCB.UNIQUEBLD
      8486**DCL
F$DCB.UOPT#
      8456**DCL
F$DCB.UPDCNT
      8486**DCL
F$DCB.VFCCHAR#
      8468**DCL
F$DCB.VOL#
      8464**DCL
F$DCB.VOLACCESS#
      8456**DCL
F$DCB.WAIT
      8476**DCL
F$DCB.WCDATA
      8479**DCL
F$DCB.WIDTH#
      8450**DCL
F$DCB.WRCMP
      8479**DCL
F$DCB.WSR#
      8461**DCL
F$DCB.XTEND#
      8457**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:430  
F$DCB.XTNSIZE#
      8461**DCL
HEXP
      9181**DCL
HEX_ASCII
      9068**DCL
HEX_CALC IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10984**DCL
HEX_CALC.SPLIT IN PROCEDURE TOL$CALCULATE_MPC_CHECKSUM
     10987**DCL
HEX_CARD
      9060**DCL
HEX_CARD.TYPE
      9063**DCL
HEX_LOAD IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10633**DCL
HEX_LOADP IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10640**DCL
HEX_SPLIT
      9199**DCL
HEX_VALUE_SPLIT IN PROCEDURE TOL$BUILD_HEX_SEGMENT
     10630**DCL
KEY_VALUE.SIZE
      8410**DCL
KEY_VALUE.DATA IN PROCEDURE TOL$READ_CATALOG
      9966**DCL
KEY_VALUE.SIZE IN PROCEDURE TOL$READ_CATALOG
      9965**DCL
LOAD
      9204**DCL
LOAD_SKIP.TYPE IN PROCEDURE TOL$MOVE_LOAD
     10403**DCL
M$ACCT
      6656**DCL-ENT
M$ACTIVATE
      6659**DCL-ENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:431  
M$ALIB
      6652**DCL-ENT
M$ASUSER
      6654**DCL-ENT
M$ATTACH
      6661**DCL-ENT
M$BADPP
      6679**DCL-ENT
M$CGCTL
      6660**DCL-ENT
M$CGINFO
      6660**DCL-ENT
M$CHECK
      6641**DCL-ENT
M$CHGUNIT
      6699**DCL-ENT
M$CLOSE
      6639**DCL-ENT
M$CLRSTK
      6697**DCL-ENT
M$CMDVAR
      6708**DCL-ENT
M$CONFIG
      6669**DCL-ENT
M$CORRES
      6644**DCL-ENT
M$CPEXIT
      6653**DCL-ENT
M$CVM
      6677**DCL-ENT
M$CVOL
      6642**DCL-ENT
M$DCLFLD
      6669**DCL-ENT
M$DEACTIVATE
      6659**DCL-ENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:432  
M$DELREC
      6641**DCL-ENT
M$DEQ
      6706**DCL-ENT
M$DETACH
      6661**DCL-ENT
M$DEVICE
      6643**DCL-ENT
M$DISPLAY
      6706**DCL-ENT
M$DISPRES
      6646**DCL-ENT
M$DLIB
      6652**DCL-ENT
M$DRIBBLE
      6669**DCL-ENT
M$DRTN
      6697**DCL-ENT
M$DSUSER
      6654**DCL-ENT
M$ENQ
      6705**DCL-ENT
M$EOM
      6664**DCL-ENT
M$ERASE
      6670**DCL-ENT
M$ERR
      6651**DCL-ENT
M$ERRMSG
      6702**DCL-ENT
M$EVENT
      6694**DCL-ENT
M$EXHUME
      6703**DCL-ENT
M$EXIT
      6651**DCL-ENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:433  
M$EXTEND
      6643**DCL-ENT
M$FDP
      6675**DCL-ENT
M$FDS
      6674**DCL-ENT
M$FEBOOT
      6667**DCL-ENT
M$FECTL
      6668**DCL-ENT
M$FEDUMP
      6667**DCL-ENT
M$FID
      6702**DCL-ENT
M$FINDPROC
      6656**DCL-ENT
M$FSUSER
      6654**DCL-ENT
M$FVP
      6676**DCL-ENT
M$FWCG
      6660**DCL-ENT
M$GBPL
      6680**DCL-ENT
M$GDDL
      6676**DCL-ENT
M$GDP
      6675**DCL-ENT
M$GDS
      6674**DCL-ENT
M$GETDCB
      6645**DCL-ENT
M$GETMOUSE
      6685**DCL-ENT
M$GETPM
      6686**DCL-ENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:434  
M$GJOB
      6704**DCL-ENT
M$GLINEATTR
      6664**DCL-ENT
M$GOODPP
      6679**DCL-ENT
M$GPLATEN
      6672**DCL-ENT
M$GPROMPT
      6671**DCL-ENT
M$GTRMATTR
      6665**DCL-ENT
M$GTRMCTL
      6663**DCL-ENT
M$GTRMTAB
      6666**DCL-ENT
M$GVP
      6675**DCL-ENT
M$HELP
      6702**DCL-ENT
M$INT
      6694**DCL-ENT
M$INTRTN
      6655**DCL-ENT
M$IOQ
      6690**DCL-ENT
M$JOBSTATS
      6704**DCL-ENT
M$KEYIN
      6644**DCL-ENT
M$LDEV
      6639**DCL-ENT
M$LDTRC
      6652**DCL-ENT
M$LIMIT
      6645**DCL-ENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:435  
M$LINES
      6644**DCL-ENT
M$LINK
      6651**DCL-ENT
M$MADMUCK
      6647**DCL-ENT
M$MAKUSER
      6678**DCL-ENT
M$MBS
      6646**DCL-ENT
M$MDFFLD
      6670**DCL-ENT
M$MERC
      6695**DCL-ENT
M$MERCS
      6696**DCL-ENT
M$MIRROR
      6690**DCL-ENT
M$MONINFO
      6707**DCL-ENT
M$MPL
      6680**DCL-ENT
M$NODEINFO
      6671**DCL-ENT
M$NXTUSR
      6705**DCL-ENT
M$OCMSG
      6703**DCL-ENT
M$OLAY
      6651**DCL-ENT
M$PAS
      6680**DCL-ENT
M$PATHCON
      6703**DCL-ENT
M$PDS
      6674**DCL-ENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:436  
M$PFIL
      6641**DCL-ENT
M$PLATEN
      6665**DCL-ENT
M$PRECORD
      6643**DCL-ENT
M$PROCNAME
      6656**DCL-ENT
M$PROFILE
      6667**DCL-ENT
M$PROMPT
      6663**DCL-ENT
M$RACST
      6647**DCL-ENT
M$RDSYSLOG
      6688**DCL-ENT
M$RELDCB
      6645**DCL-ENT
M$RELRES
      6646**DCL-ENT
M$RELSTARF
      6648**DCL-ENT
M$REM
      6648**DCL-ENT
M$RENV
      6695**DCL-ENT
M$REQUIRE
      6647**DCL-ENT
M$RETRY
      6696**DCL-ENT
M$RETRYS
      6696**DCL-ENT
M$REW
      6642**DCL-ENT
M$RLSFLD
      6670**DCL-ENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:437  
M$RPRIV
      6698**DCL-ENT
M$RSPP
      6677**DCL-ENT
M$RSWITCH
      6699**DCL-ENT
M$RUE
      6705**DCL-ENT
M$SAD
      6678**DCL-ENT
M$SAVE
      6654**DCL-ENT
M$SCON
      6655**DCL-ENT
M$SCREECH
      6653**DCL-ENT
M$SENV
      6695**DCL-ENT
M$SETFMA
      6639**DCL-ENT
M$SETFP
      6668**DCL-ENT
M$SINPUT
      6666**DCL-ENT
M$SLCFLD
      6671**DCL-ENT
M$SMOUSE
      6685**DCL-ENT
M$SMPRT
      6677**DCL-ENT
M$SPRIV
      6698**DCL-ENT
M$SSC
      6678**DCL-ENT
M$SSWITCH
      6698**DCL-ENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:438  
M$STATE
      6707**DCL-ENT
M$STD
      6679**DCL-ENT
M$STIMER
      6693**DCL-ENT
M$STLPP
      6676**DCL-ENT
M$STRAP
      6693**DCL-ENT
M$STRMATTR
      6665**DCL-ENT
M$STRMCTL
      6663**DCL-ENT
M$STRMTAB
      6666**DCL-ENT
M$SYMBIO
      6704**DCL-ENT
M$SYSCON
      6690**DCL-ENT
M$SYSID
      6708**DCL-ENT
M$TDCLOSE
      6689**DCL-ENT
M$TDIO
      6689**DCL-ENT
M$TDOPEN
      6688**DCL-ENT
M$TDREQCPU
      6689**DCL-ENT
M$TEMPWROC
      6683**DCL-ENT
M$TIME
      6706**DCL-ENT
M$TRAP
      6693**DCL-ENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:439  
M$TRMISC
      6668**DCL-ENT
M$TRMPRG
      6664**DCL-ENT
M$TRTN
      6697**DCL-ENT
M$TRUNC
      6640**DCL-ENT
M$TTIMER
      6693**DCL-ENT
M$UC
      6663**DCL
M$UMPL
      6680**DCL-ENT
M$UNFID
      6702**DCL-ENT
M$UNLATCH
      6659**DCL-ENT
M$UNSHARE
      6656**DCL-ENT
M$USRFIELD
      6699**DCL-ENT
M$VIRTUAL
      6674**DCL-ENT
M$WAIT
      6697**DCL-ENT
M$WEOF
      6642**DCL-ENT
M$WRITE
      6640**DCL-ENT
M$WRSYSLOG
      6688**DCL-ENT
M$XCON
      6694**DCL-ENT
M$XCONRTN
      6655**DCL-ENT
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:440  
M$XEQTIME
      6707**DCL-ENT
M$XFLUSH
      6648**DCL-ENT
M$XMOUSE
      6685**DCL-ENT
M$XXX
      6651**DCL-ENT
M$YC
      6653**DCL-ENT
MASTER_CATALOG_KEY.DATA
      9212**DCL
MASTER_CATALOG_KEY.SIZE
      9211**DCL
OBJECT.BCD
      9011**DCL
OBJECT.DECK_CHECKSUM
      9025**DCL
OBJECT_KEY.SPLIT
      9038**DCL
OLD_DECKFILE.ACCESS_
      8607**DCL
OLD_DECKFILE.ACCT_
      8609**DCL
OLD_DECKFILE.FORM_
      8613**DCL
OLD_DECKFILE.FPARAM_
      8610**DCL
OLD_DECKFILE.FPRG_
      8614**DCL
OLD_DECKFILE.IFPARAM_
      8610**DCL
OLD_DECKFILE.INSTATTR_
      8609**DCL
OLD_DECKFILE.IRKEYS_
      8614**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:441  
OLD_DECKFILE.IRREC_
      8613**DCL
OLD_DECKFILE.NAME_
      8606**DCL
OLD_DECKFILE.NODENAME_
      8611**DCL
OLD_DECKFILE.PASS_
      8607**DCL
OLD_DECKFILE.PROCATTR_
      8609**DCL
OLD_DECKFILE.RECFIELD_
      8612**DCL
OLD_DECKFILE.SETSTA_
      8606**DCL
OLD_DECKFILE.SN_
      8605**DCL
OLD_DECKFILE.UATTR_
      8608**DCL
OLD_DECKFILE.V.ACS#
      8625**DCL
OLD_DECKFILE.V.ANSISPANSEQ#
      8638**DCL
OLD_DECKFILE.V.ASN#
      8624**DCL
OLD_DECKFILE.V.ATTR#
      8641**DCL
OLD_DECKFILE.V.AU#
      8643**DCL
OLD_DECKFILE.V.BLKL#
      8631**DCL
OLD_DECKFILE.V.BLOCKED#
      8626**DCL
OLD_DECKFILE.V.BUPM#
      8627**DCL
OLD_DECKFILE.V.CHAIN#
      8640**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:442  
OLD_DECKFILE.V.CNVRT#
      8634**DCL
OLD_DECKFILE.V.COMP#
      8626**DCL
OLD_DECKFILE.V.COPIES#
      8646**DCL
OLD_DECKFILE.V.CTG#
      8618**DCL
OLD_DECKFILE.V.CVOL#
      8619**DCL
OLD_DECKFILE.V.DBGDCBNO#
      8645**DCL
OLD_DECKFILE.V.DBGSYSID#
      8645**DCL
OLD_DECKFILE.V.DCB#
      8614**DCL
OLD_DECKFILE.V.DCBCONLGL#
      8636**DCL
OLD_DECKFILE.V.DELETE#
      8616**DCL
OLD_DECKFILE.V.DENSITY#
      8646**DCL
OLD_DECKFILE.V.DISP#
      8630**DCL
OLD_DECKFILE.V.DVFC#
      8641**DCL
OLD_DECKFILE.V.EBCDIC#
      8634**DCL
OLD_DECKFILE.V.EVENT#
      8644**DCL
OLD_DECKFILE.V.EXIST#
      8618**DCL
OLD_DECKFILE.V.EXPIRE#
      8634**DCL
OLD_DECKFILE.V.FINDPOS#
      8620**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:443  
OLD_DECKFILE.V.FUN#
      8624**DCL
OLD_DECKFILE.V.GHSTACS#
      8629**DCL
OLD_DECKFILE.V.IGNOREFSN#
      8638**DCL
OLD_DECKFILE.V.INITZ
      8615**DCL
OLD_DECKFILE.V.INITZ.REASSIGN#
      8615**DCL
OLD_DECKFILE.V.INITZ.SCRUB#
      8615**DCL
OLD_DECKFILE.V.IOERROK#
      8636**DCL
OLD_DECKFILE.V.IXTNSIZE#
      8633**DCL
OLD_DECKFILE.V.JRNLBYPASS#
      8628**DCL
OLD_DECKFILE.V.KEYL#
      8630**DCL
OLD_DECKFILE.V.KEYTYPE#
      8640**DCL
OLD_DECKFILE.V.KEYX#
      8629**DCL
OLD_DECKFILE.V.LINES#
      8644**DCL
OLD_DECKFILE.V.LOAD#
      8628**DCL
OLD_DECKFILE.V.LRDL0#
      8632**DCL
OLD_DECKFILE.V.LSLIDE#
      8631**DCL
OLD_DECKFILE.V.LSTAOR#
      8628**DCL
OLD_DECKFILE.V.MAXVOL#
      8640**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:444  
OLD_DECKFILE.V.NRECS#
      8633**DCL
OLD_DECKFILE.V.OPER
      8616**DCL
OLD_DECKFILE.V.OPER.MNTONLY#
      8618**DCL
OLD_DECKFILE.V.OPER.NXTA#
      8617**DCL
OLD_DECKFILE.V.OPER.NXTF#
      8617**DCL
OLD_DECKFILE.V.OPER.TEST#
      8616**DCL
OLD_DECKFILE.V.OPER.THISF#
      8617**DCL
OLD_DECKFILE.V.ORG#
      8625**DCL
OLD_DECKFILE.V.OVERFDE#
      8637**DCL
OLD_DECKFILE.V.QISS#
      8643**DCL
OLD_DECKFILE.V.RECL#
      8631**DCL
OLD_DECKFILE.V.RES#
      8629**DCL
OLD_DECKFILE.V.SEED#
      8647**DCL
OLD_DECKFILE.V.SEEDSPECIFIED#
      8638**DCL
OLD_DECKFILE.V.SEQ#
      8642**DCL
OLD_DECKFILE.V.SEQCOL#
      8642**DCL
OLD_DECKFILE.V.SEQID#
      8644**DCL
OLD_DECKFILE.V.SETDCB#
      8615**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:445  
OLD_DECKFILE.V.SHARE#
      8619**DCL
OLD_DECKFILE.V.SPANNED#
      8627**DCL
OLD_DECKFILE.V.SPARE#
      8632**DCL
OLD_DECKFILE.V.SRCHCOND
      8620**DCL
OLD_DECKFILE.V.SRCHCOND.ANYF#
      8623**DCL
OLD_DECKFILE.V.SRCHCOND.ARCHIVE#
      8622**DCL
OLD_DECKFILE.V.SRCHCOND.BAD#
      8621**DCL
OLD_DECKFILE.V.SRCHCOND.BUF#
      8621**DCL
OLD_DECKFILE.V.SRCHCOND.DELF#
      8620**DCL
OLD_DECKFILE.V.SRCHCOND.NOLIST#
      8620**DCL
OLD_DECKFILE.V.SRCHCOND.QS#
      8622**DCL
OLD_DECKFILE.V.SRCHCOND.REV#
      8623**DCL
OLD_DECKFILE.V.TERMCONLGL#
      8637**DCL
OLD_DECKFILE.V.TYPE#
      8626**DCL
OLD_DECKFILE.V.UOPT#
      8624**DCL
OLD_DECKFILE.V.VOL#
      8639**DCL
OLD_DECKFILE.V.VOLACCESS#
      8643**DCL
OLD_DECKFILE.V.XONLY#
      8635**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:446  
OLD_DECKFILE.V.XTEND#
      8635**DCL
OLD_DECKFILE.V.XTNSIZE#
      8633**DCL
OLD_DECKFILE.VIRTUAL_
      8606**DCL
OLD_DECKFILE.V_
      8605**DCL
OLD_DECKFILE.WINDOW_
      8608**DCL
PATCH_ASCII
      9056**DCL
PATCH_CARD.SEQ
      9054**DCL
PATCH_KEY.SIZE
      9077**DCL
PATCH_LOAD IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10746**DCL
PATCH_LOAD.SPLIT IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10751**DCL
PATCH_LOADP IN PROCEDURE TOL$BUILD_OCTAL_SEGMENT
     10755**DCL
READ_BINARY_DECK.BUF_.BOUND
      8673**DCL
READ_BINARY_DECK.BUF_.BUF$
      8674**DCL
READ_BINARY_DECK.IDBUF_
      8675**DCL
READ_BINARY_DECK.KEY_
      8671**DCL
READ_BINARY_DECK.KEY_.BOUND
      8671**DCL
READ_BINARY_DECK.KEY_.KEY$
      8672**DCL
READ_BINARY_DECK.V.DCB#
      8675**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:447  
READ_BINARY_DECK.V.DVBYTE
      8685**DCL
READ_BINARY_DECK.V.DVBYTE.BIN#
      8686**DCL
READ_BINARY_DECK.V.DVBYTE.BP#
      8685**DCL
READ_BINARY_DECK.V.DVBYTE.CONT#
      8688**DCL
READ_BINARY_DECK.V.DVBYTE.NODAT#
      8687**DCL
READ_BINARY_DECK.V.DVBYTE.TOP#
      8685**DCL
READ_BINARY_DECK.V.DVBYTE.TRANS#
      8687**DCL
READ_BINARY_DECK.V.DVBYTE.VFC#
      8686**DCL
READ_BINARY_DECK.V.EVENT#
      8684**DCL
READ_BINARY_DECK.V.FULL#
      8677**DCL
READ_BINARY_DECK.V.ID#
      8676**DCL
READ_BINARY_DECK.V.IDS#
      8677**DCL
READ_BINARY_DECK.V.IOERROK#
      8678**DCL
READ_BINARY_DECK.V.KEYCHNG#
      8677**DCL
READ_BINARY_DECK.V.KEYR#
      8676**DCL
READ_BINARY_DECK.V.KEYS#
      8676**DCL
READ_BINARY_DECK.V.KEYTYPE#
      8684**DCL
READ_BINARY_DECK.V.ODFNC#
      8689**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:448  
READ_BINARY_DECK.V.RECNUM#
      8689**DCL
READ_BINARY_DECK.V.REREADPOS#
      8690**DCL
READ_BINARY_DECK.V.SEED#
      8685**DCL
READ_BINARY_DECK.V.SINPUTSIZE#
      8689**DCL
READ_BINARY_DECK.V.STRPVFC#
      8688**DCL
READ_BINARY_DECK.V.WAIT#
      8675**DCL
READ_BINARY_DECK.V_
      8671**DCL
READ_CATALOG_DATA.BUF_
      8718**DCL
READ_CATALOG_DATA.BUF_.BOUND
      8718**DCL
READ_CATALOG_DATA.BUF_.BUF$
      8719**DCL
READ_CATALOG_DATA.IDBUF_
      8720**DCL
READ_CATALOG_DATA.KEY_
      8716**DCL
READ_CATALOG_DATA.KEY_.BOUND
      8716**DCL
READ_CATALOG_DATA.KEY_.KEY$
      8717**DCL
READ_CATALOG_DATA.V.DCB#
      8720**DCL
READ_CATALOG_DATA.V.DVBYTE
      8730**DCL
READ_CATALOG_DATA.V.DVBYTE.BIN#
      8731**DCL
READ_CATALOG_DATA.V.DVBYTE.BP#
      8730**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:449  
READ_CATALOG_DATA.V.DVBYTE.CONT#
      8733**DCL
READ_CATALOG_DATA.V.DVBYTE.NODAT#
      8732**DCL
READ_CATALOG_DATA.V.DVBYTE.TOP#
      8730**DCL
READ_CATALOG_DATA.V.DVBYTE.TRANS#
      8732**DCL
READ_CATALOG_DATA.V.DVBYTE.VFC#
      8731**DCL
READ_CATALOG_DATA.V.EVENT#
      8729**DCL
READ_CATALOG_DATA.V.FULL#
      8722**DCL
READ_CATALOG_DATA.V.ID#
      8721**DCL
READ_CATALOG_DATA.V.IDS#
      8722**DCL
READ_CATALOG_DATA.V.IOERROK#
      8723**DCL
READ_CATALOG_DATA.V.KEYCHNG#
      8722**DCL
READ_CATALOG_DATA.V.KEYR#
      8721**DCL
READ_CATALOG_DATA.V.KEYS#
      8721**DCL
READ_CATALOG_DATA.V.KEYTYPE#
      8729**DCL
READ_CATALOG_DATA.V.ODFNC#
      8734**DCL
READ_CATALOG_DATA.V.RECNUM#
      8734**DCL
READ_CATALOG_DATA.V.REREADPOS#
      8735**DCL
READ_CATALOG_DATA.V.SEED#
      8730**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:450  
READ_CATALOG_DATA.V.SINPUTSIZE#
      8734**DCL
READ_CATALOG_DATA.V.STRPVFC#
      8733**DCL
READ_CATALOG_DATA.V.WAIT#
      8720**DCL
READ_CATALOG_DATA.V_
      8716**DCL
READ_CATALOG_ENTRY.BUF_
      8763**DCL
READ_CATALOG_ENTRY.BUF_.BOUND
      8763**DCL
READ_CATALOG_ENTRY.BUF_.BUF$
      8764**DCL
READ_CATALOG_ENTRY.IDBUF_
      8765**DCL
READ_CATALOG_ENTRY.KEY_
      8761**DCL
READ_CATALOG_ENTRY.KEY_.BOUND
      8761**DCL
READ_CATALOG_ENTRY.KEY_.KEY$
      8762**DCL
READ_CATALOG_ENTRY.V.DCB#
      8765**DCL
READ_CATALOG_ENTRY.V.DVBYTE
      8775**DCL
READ_CATALOG_ENTRY.V.DVBYTE.BIN#
      8776**DCL
READ_CATALOG_ENTRY.V.DVBYTE.BP#
      8775**DCL
READ_CATALOG_ENTRY.V.DVBYTE.CONT#
      8778**DCL
READ_CATALOG_ENTRY.V.DVBYTE.NODAT#
      8777**DCL
READ_CATALOG_ENTRY.V.DVBYTE.TOP#
      8775**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:451  
READ_CATALOG_ENTRY.V.DVBYTE.TRANS#
      8777**DCL
READ_CATALOG_ENTRY.V.DVBYTE.VFC#
      8776**DCL
READ_CATALOG_ENTRY.V.EVENT#
      8774**DCL
READ_CATALOG_ENTRY.V.FULL#
      8767**DCL
READ_CATALOG_ENTRY.V.ID#
      8766**DCL
READ_CATALOG_ENTRY.V.IDS#
      8767**DCL
READ_CATALOG_ENTRY.V.IOERROK#
      8768**DCL
READ_CATALOG_ENTRY.V.KEYCHNG#
      8767**DCL
READ_CATALOG_ENTRY.V.KEYR#
      8766**DCL
READ_CATALOG_ENTRY.V.KEYS#
      8766**DCL
READ_CATALOG_ENTRY.V.KEYTYPE#
      8774**DCL
READ_CATALOG_ENTRY.V.ODFNC#
      8779**DCL
READ_CATALOG_ENTRY.V.RECNUM#
      8779**DCL
READ_CATALOG_ENTRY.V.REREADPOS#
      8780**DCL
READ_CATALOG_ENTRY.V.SEED#
      8775**DCL
READ_CATALOG_ENTRY.V.SINPUTSIZE#
      8779**DCL
READ_CATALOG_ENTRY.V.STRPVFC#
      8778**DCL
READ_CATALOG_ENTRY.V.WAIT#
      8765**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:452  
READ_CATALOG_ENTRY.V_
      8761**DCL
READ_DKEND_CARD.BUF_
      8808**DCL
READ_DKEND_CARD.BUF_.BOUND
      8808**DCL
READ_DKEND_CARD.BUF_.BUF$
      8809**DCL
READ_DKEND_CARD.IDBUF_
      8810**DCL
READ_DKEND_CARD.KEY_
      8806**DCL
READ_DKEND_CARD.KEY_.BOUND
      8806**DCL
READ_DKEND_CARD.KEY_.KEY$
      8807**DCL
READ_DKEND_CARD.V.DCB#
      8810**DCL
READ_DKEND_CARD.V.DVBYTE
      8820**DCL
READ_DKEND_CARD.V.DVBYTE.BIN#
      8821**DCL
READ_DKEND_CARD.V.DVBYTE.BP#
      8820**DCL
READ_DKEND_CARD.V.DVBYTE.CONT#
      8823**DCL
READ_DKEND_CARD.V.DVBYTE.NODAT#
      8822**DCL
READ_DKEND_CARD.V.DVBYTE.TOP#
      8820**DCL
READ_DKEND_CARD.V.DVBYTE.TRANS#
      8822**DCL
READ_DKEND_CARD.V.DVBYTE.VFC#
      8821**DCL
READ_DKEND_CARD.V.EVENT#
      8819**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:453  
READ_DKEND_CARD.V.FULL#
      8812**DCL
READ_DKEND_CARD.V.ID#
      8811**DCL
READ_DKEND_CARD.V.IDS#
      8812**DCL
READ_DKEND_CARD.V.IOERROK#
      8813**DCL
READ_DKEND_CARD.V.KEYCHNG#
      8812**DCL
READ_DKEND_CARD.V.KEYR#
      8811**DCL
READ_DKEND_CARD.V.KEYS#
      8811**DCL
READ_DKEND_CARD.V.KEYTYPE#
      8819**DCL
READ_DKEND_CARD.V.ODFNC#
      8824**DCL
READ_DKEND_CARD.V.RECNUM#
      8824**DCL
READ_DKEND_CARD.V.REREADPOS#
      8825**DCL
READ_DKEND_CARD.V.SEED#
      8820**DCL
READ_DKEND_CARD.V.SINPUTSIZE#
      8824**DCL
READ_DKEND_CARD.V.STRPVFC#
      8823**DCL
READ_DKEND_CARD.V.WAIT#
      8810**DCL
READ_DKEND_CARD.V_
      8806**DCL
READ_OBJECT_CARD.BUF_
      8853**DCL
READ_OBJECT_CARD.BUF_.BOUND
      8853**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:454  
READ_OBJECT_CARD.BUF_.BUF$
      8854**DCL
READ_OBJECT_CARD.IDBUF_
      8855**DCL
READ_OBJECT_CARD.KEY_
      8851**DCL
READ_OBJECT_CARD.KEY_.BOUND
      8851**DCL
READ_OBJECT_CARD.KEY_.KEY$
      8852**DCL
READ_OBJECT_CARD.V.DCB#
      8855**DCL
READ_OBJECT_CARD.V.DVBYTE
      8865**DCL
READ_OBJECT_CARD.V.DVBYTE.BIN#
      8866**DCL
READ_OBJECT_CARD.V.DVBYTE.BP#
      8865**DCL
READ_OBJECT_CARD.V.DVBYTE.CONT#
      8868**DCL
READ_OBJECT_CARD.V.DVBYTE.NODAT#
      8867**DCL
READ_OBJECT_CARD.V.DVBYTE.TOP#
      8865**DCL
READ_OBJECT_CARD.V.DVBYTE.TRANS#
      8867**DCL
READ_OBJECT_CARD.V.DVBYTE.VFC#
      8866**DCL
READ_OBJECT_CARD.V.EVENT#
      8864**DCL
READ_OBJECT_CARD.V.FULL#
      8857**DCL
READ_OBJECT_CARD.V.ID#
      8856**DCL
READ_OBJECT_CARD.V.IDS#
      8857**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:455  
READ_OBJECT_CARD.V.IOERROK#
      8858**DCL
READ_OBJECT_CARD.V.KEYCHNG#
      8857**DCL
READ_OBJECT_CARD.V.KEYR#
      8856**DCL
READ_OBJECT_CARD.V.KEYS#
      8856**DCL
READ_OBJECT_CARD.V.KEYTYPE#
      8864**DCL
READ_OBJECT_CARD.V.ODFNC#
      8869**DCL
READ_OBJECT_CARD.V.RECNUM#
      8869**DCL
READ_OBJECT_CARD.V.REREADPOS#
      8870**DCL
READ_OBJECT_CARD.V.SEED#
      8865**DCL
READ_OBJECT_CARD.V.SINPUTSIZE#
      8869**DCL
READ_OBJECT_CARD.V.STRPVFC#
      8868**DCL
READ_OBJECT_CARD.V.WAIT#
      8855**DCL
READ_OBJECT_CARD.V_
      8851**DCL
READ_PATCH_CARD.BUF_
      8898**DCL
READ_PATCH_CARD.BUF_.BOUND
      8898**DCL
READ_PATCH_CARD.BUF_.BUF$
      8899**DCL
READ_PATCH_CARD.IDBUF_
      8900**DCL
READ_PATCH_CARD.KEY_
      8896**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:456  
READ_PATCH_CARD.KEY_.BOUND
      8896**DCL
READ_PATCH_CARD.KEY_.KEY$
      8897**DCL
READ_PATCH_CARD.V.DCB#
      8900**DCL
READ_PATCH_CARD.V.DVBYTE
      8910**DCL
READ_PATCH_CARD.V.DVBYTE.BIN#
      8911**DCL
READ_PATCH_CARD.V.DVBYTE.BP#
      8910**DCL
READ_PATCH_CARD.V.DVBYTE.CONT#
      8913**DCL
READ_PATCH_CARD.V.DVBYTE.NODAT#
      8912**DCL
READ_PATCH_CARD.V.DVBYTE.TOP#
      8910**DCL
READ_PATCH_CARD.V.DVBYTE.TRANS#
      8912**DCL
READ_PATCH_CARD.V.DVBYTE.VFC#
      8911**DCL
READ_PATCH_CARD.V.EVENT#
      8909**DCL
READ_PATCH_CARD.V.FULL#
      8902**DCL
READ_PATCH_CARD.V.ID#
      8901**DCL
READ_PATCH_CARD.V.IDS#
      8902**DCL
READ_PATCH_CARD.V.IOERROK#
      8903**DCL
READ_PATCH_CARD.V.KEYCHNG#
      8902**DCL
READ_PATCH_CARD.V.KEYR#
      8901**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:457  
READ_PATCH_CARD.V.KEYS#
      8901**DCL
READ_PATCH_CARD.V.KEYTYPE#
      8909**DCL
READ_PATCH_CARD.V.ODFNC#
      8914**DCL
READ_PATCH_CARD.V.RECNUM#
      8914**DCL
READ_PATCH_CARD.V.REREADPOS#
      8915**DCL
READ_PATCH_CARD.V.SEED#
      8910**DCL
READ_PATCH_CARD.V.SINPUTSIZE#
      8914**DCL
READ_PATCH_CARD.V.STRPVFC#
      8913**DCL
READ_PATCH_CARD.V.WAIT#
      8900**DCL
READ_PATCH_CARD.V_
      8896**DCL
RELOC_PAIR IN PROCEDURE TOL$MOVE_RELOCATION_BITS
     10488**DCL
RELOC_PAIR.BITS IN PROCEDURE TOL$MOVE_RELOCATION_BITS
     10489**DCL
SAVED_KEY.SIZE
      9214**DCL
SAVED_KEY.SPLIT
      9216**DCL
SAVED_KEY.SPLIT.DATA
      9217**DCL
SAVED_KEY.SPLIT.DECK#
      9219**DCL
SEED IN PROCEDURE TOL$CHECKSUM
      9823**DCL
SPLIT_DCW.SIZE
      9227**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:458  
SPLIT_LOAD.TYPE
      9229**DCL
SPLIT_SPLIT
      9221**DCL
STATUS.HARDWARE_STATUS
      9234**DCL
STATUS.LAST_DCW_POINTER
      9235**DCL
STATUSP
      9238**DCL
STATUS_SAVE.HARDWARE_STATUS IN PROCEDURE TOL$RECALCULATE_MPC_CHECKSUM
     10936**DCL
STATUS_SAVE.RESIDUE IN PROCEDURE TOL$RECALCULATE_MPC_CHECKSUM
     10938**DCL
TOL$CATALOG_ENTRY_KEY.DECK#
      8956**DCL
TOL$CATALOG_ENTRY_KEY.ENTRY#
      8957**DCL
TOL$CATALOG_ENTRY_KEY.SIZE
      8955**DCL
TOL$CATALOG_KEY.SIZE
      8963**DCL
TOL$CATALOG_KEY.SPLIT
      8965**DCL
TOL$CATALOG_KEY.SPLIT.DATA
      8966**DCL
TOL$CATALOG_KEY.SPLIT.DECK#
      8968**DCL
TOL$DKEND_CARD.CHECKSUM
      8983**DCL
TOL$DKEND_CARD.CONTROL
      8977**DCL
TOL$DKEND_CARD.LBL
      8981**DCL
TOL$DKEND_CARD.REVISION
      8980**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:459  
TOL$DKEND_CARD.SEQ
      8982**DCL
TOL$DKEND_CARD.TYPE
      8978**DCL
TOL$GET_CATALOG
      9866**ENTRY
TOL$GET_DECK
     10073**ENTRY
TOL$GET_NIO_DECK
     10119**ENTRY
TOL$OBJECT.BCD
      8994**DCL
TOL$OBJECT.BCD.ASSEMBLER
      9000**DCL
TOL$OBJECT.BCD.CONTROL
      8995**DCL
TOL$OBJECT.BCD.LBL
      9002**DCL
TOL$OBJECT.BCD.LOAD_TYPE
      8998**DCL
TOL$OBJECT.BCD.SEQ
      9003**DCL
TOL$OBJECT.BCD.TYPE
      8996**DCL
TOL$OBJECT.BINARY_COUNT
      9005**DCL
TOL$OBJECT.CHECKSUM
      9009**DCL
TOL$OBJECT.DECK#
      9004**DCL
TOL$OBJECT.DECK_CHECKSUM
      9008**DCL
TOL$OBJECT.LOAD_SIZE
      9007**DCL
TOL$OBJECT.TOTAL_COUNT
      9006**DCL
PL6.E3A0      #001=TOL$CHECK_CALL_SEQUENCE File=TOL$LOADER.:E05TSI               WED 07/30/97 06:26 Page:460  
TOL$OBJECT_KEY.SIZE
      9029**DCL
TOL$OBJECT_KEY.SPLIT
      9031**DCL
TOL$OBJECT_KEY.SPLIT.DATA
      9032**DCL
TOL$OBJECT_KEY.SPLIT.DECK#
      9034**DCL
TOL$PATCH_CARD.CHECKSUM
      9048**DCL
TOL$PATCH_CARD.LBL
      9046**DCL
TOL$PATCH_CARD.SEQ
      9047**DCL
TOL$PATCH_CARD.TYPE
      9044**DCL
TOL$PATCH_KEY.CARD#
      9075**DCL
TOL$PATCH_KEY.DECK#
      9074**DCL
TOL$PATCH_KEY.SIZE
      9073**DCL
TOL$RELOC.LOWER
      9086**DCL
TOL$RELOC.UPPER
      9085**DCL
TOM$SEG
      8519**DCL
TOM$SEG.CALL_SEQUENCE
      8520**DCL
