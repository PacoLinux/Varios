VERSION E05

PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:1    
        1        1        /*M* VPF$SRCLST This module contains routines for manipulating SOURCELIST     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DTI=1,THI=1  */
        8        8        /* NEXT AVAILABLE ERROR CODE = 80 by 5  */
        9        9        /* ALSO AVAILABLE:  NONE */
       10       10        %EJECT;
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:2    
       11       11        VPF$CALL_OPEN: PROC(FPT_OPEN) ALTRET;
       12       12        /*D* NAME: VPF$CALL_OPEN
       13       13             CALL: CALL VPF$CALL_OPEN(FPT_OPEN);
       14       14             DESCRIPTION: This procedure will do an OPEN using the passed FPT.
       15       15                          If it is suitable for FSFA, READ_MODE will be set
       16       16                          to 1.  Otherwise it'll be 0.
       17       17        */
       18       18        /**/
       19       19        /*  INCLUDE FILES  */
       20       20        /**/
       21       21        %INCLUDE VP_DATA_R;
       22     7008        /**/
       23     7009        /*  Parameters  */
       24     7010        /**/
       25     7011        %FPT_OPEN(FPTN = FPT_OPEN,
       26     7012                  STCLASS = " ");
       27     7121        /**/
       28     7122        /*  Based Structures  */
       29     7123        /**/
       30     7124        %B$ALT;
       31     7132        %FPT_CLOSE(FPTN = FPT_CLOSE,
       32     7133                   STCLASS = "BASED(CLOSE$)");
       33     7175        %B$TCB;
       34     7178        %VLP_VECTOR(FPTN=B$VECTOR,STCLASS=BASED);
       35     7193    1   DCL B$WORD UBIN BASED;
       36     7194        /**/
       37     7195        /*  Local Storage  */
       38     7196        /**/
       39     7197    1   DCL CLOSE$ PTR;
       40     7198    1   DCL SAVEPOS UBIN;
       41     7199    1   DCL SAVENOMARKS BIT(1);
       42     7200        /**/
       43     7201        /*  Entry Points  */
       44     7202        /**/
       45     7203        %VP_ENTRIES (OMIT=VPF$CALL_OPEN);
       46     7411    1   DCL XSA$OPEN ENTRY(2) ALTRET;
       47     7412    1   DCL XSA$CLOSE ENTRY(2) ALTRET;
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:3    
       48     7413        /**/
       49     7414    2           IF ICB.DEV_MASK.MAN_TAPE THEN DO;
       50     7415    2               IF USER_LABELS$ = ADDR(NIL) THEN
       51     7416    2                  CALL VPD$GET_BUF(USER_LABELS$,8*1024)
       52     7417    3                   WHENALTRETURN DO;
       53     7418    3                      CALL VPL$ERR_PROC(3,0);
       54     7419    3                      END;
       55     7420    2               ADDR(FPT_OPEN.UHL_)->B$VECTOR.PTR$ = USER_LABELS$;
       56     7421    2               ADDR(FPT_OPEN.UHL_)->B$VECTOR.W1.VSIZE# = 8*1024*4-1;
       57     7422    2               USER_LABELS$->B$WORD=0;     /* START OFF WITH NO LABELS           */
       58     7423    2               END;
       59     7424    1            ELSE
       60     7425    1              IF FPT_OPEN.UHL_ ~= VECTOR(NIL) THEN
       61     7426    1                 FPT_OPEN.UHL_  = VECTOR(NIL);
       62     7427    1           IF FPT_OPEN.V.OPER.TEST#        /* TEST OPEN                          */
       63     7428    1             OR NOT CMD_MASK & '34'O       /* Not COPYs                          */
       64     7429    1             OR ICB.KEY_SEL                /* Record selection by keys           */
       65     7430    1             OR ICB.LREC_SEL               /* Record selection by log. rec. no.  */
       66     7431    1             OR ICB.CRPT ~= 0              /* Decryption                         */
       67     7432    1             OR ICB.EBCDIC                 /* EBCDIC translation                 */
       68     7433    1             OR ICB.BIN                    /* BINARY                             */
       69     7434    1             OR ICB.TRANS                  /* TRANSPARENT                        */
       70     7435    1            THEN                           /* Unsuitable for FSFA routines       */
       71     7436    1              GOTO PMME_OPEN;
       72     7437        /**/
       73     7438    1           CALL VPD$GET_BUF(IKBUF_PTR$,1024) ALTRET(PMME_OPEN);
       74     7439    1           IFSFA_PARAM.KBUF_.BUF$ = IKBUF_PTR$;
       75     7440    1           IFSFA_PARAM.KBUF_.BOUND = 1024 * 4 -1;
       76     7441        /**/
       77     7442    1           IBBUF_WSIZE = 1024 * 5;
       78     7443    1           CALL VPD$GET_BUF(IBBUF_PTR$,IBBUF_WSIZE) ALTRET(PMME_OPEN);
       79     7444    1           IFSFA_PARAM.BBUF_.BUF$ = IBBUF_PTR$;
       80     7445    1           IFSFA_PARAM.BBUF_.BOUND = IBBUF_WSIZE * 4 -1;
       81     7446        /**/
       82     7447    1           CALL XSA$OPEN(FPT_OPEN,IFSFA_PARAM) ALTRET(FSFA_ALT);
       83     7448        /**/
       84     7449    1           IF IFSFA_PARAM.ORG = 0
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:4    
       85     7450    1            THEN                           /* Unsuitable for FSFA                */
       86     7451    2            DO;
       87     7452    2               READ_MODE = 0;
       88     7453    2               CALL CLEANUP;
       89     7454    2               END;
       90     7455    1            ELSE                           /* FSFA must be used                  */
       91     7456    2            DO;
       92     7457    2               READ_MODE = 1;
       93     7458    2               IF IFSFA_PARAM.ORG = %CONSEC#
       94     7459    2                THEN                       /* KBUF not needed                    */
       95     7460    2                  CALL VPD$REL_BUF(IKBUF_PTR$,1024); /* Release it               */
       96     7461    2               END;
       97     7462    1           RETURN;
       98     7463        /**/
       99     7464    1   PMME_OPEN:
      100     7465    1           CALL CLEANUP;                   /* Cleanup after FSFA attempt         */
      101     7466    1           CALL M$OPEN (FPT_OPEN) ALTRET(PMME_ALT);
      102     7467    1           READ_MODE = 0;
      103     7468    1           RETURN;
      104     7469        /**/
      105     7470    1   VPF$CALL_CLOSE: ENTRY(FPT_OPEN) ALTRET;
      106     7471    1           CLOSE$ = ADDR(FPT_OPEN);        /* PL-6 KLUDGE                        */
      107     7472    1           SAVEPOS=FPT_CLOSE.V.POS#;
      108     7473    1           SAVENOMARKS=FPT_CLOSE.V.NOMARKS#;
      109     7474    2           IF ICB.DEV_MASK.MAN_TAPE AND OCB.DEV_MASK.LT THEN DO;
              7474                    /* There might be UTLs */
      110     7475    2               IF USER_LABELS$=ADDR(NIL) THEN
      111     7476    2                  CALL VPD$GET_BUF(USER_LABELS$,8*1024)
      112     7477    3                   WHENALTRETURN DO;
      113     7478    3                      CALL VPL$ERR_PROC(3,0);
      114     7479    3                      END;
      115     7480    2               ADDR(FPT_CLOSE.UTL_)->B$VECTOR.PTR$ = USER_LABELS$;
      116     7481    2               ADDR(FPT_CLOSE.UTL_)->B$VECTOR.W1.VSIZE#=8*1024*4-1;
      117     7482    2               USER_LABELS$->B$WORD=0;     /* START OFF WITH NO LABELS           */
      118     7483    2               END;
      119     7484    1            ELSE
      120     7485    1              FPT_CLOSE.UTL_=VECTOR(NIL);
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:5    
      121     7486    2           DO CASE(ICB.CLPOS);             /* Tape positioning                   */
      122     7487    2            CASE(0);                       /* Default                            */
      123     7488    2              IF EOF_SOURCE THEN GOTO EOFPOS;
      124     7489    2              FPT_CLOSE.V.NOMARKS# = '1'B;
      125     7490    2            CASE(1);                       /* EOF                                */
      126     7491    2   EOFPOS:    FPT_CLOSE.V.POS# = 0;
      127     7492    2            CASE(2);                       /* BOF                                */
      128     7493    2              FPT_CLOSE.V.POS# = %PTL#;
      129     7494    2            CASE(3);                       /* BOT                                */
      130     7495    2              FPT_CLOSE.V.POS# = %PTV#;
      131     7496    2            CASE(4);                       /* NONE                               */
      132     7497    2              FPT_CLOSE.V.NOMARKS# = '1'B;
      133     7498    2            END;
      134     7499    1           IF NOT CMD_MASK & '34'O         /* Not COPYs                          */
      135     7500    1            THEN                           /* Don't trust READ_MODE              */
      136     7501    1              GOTO PMME_CLOSE;
      137     7502    2           DO CASE(READ_MODE);
      138     7503    2            CASE(0);                       /* Normal PMME                        */
      139     7504    2   PMME_CLOSE: CALL M$CLOSE(FPT_CLOSE) ALTRET(PMME_ALT);
      140     7505    2            CASE(1);                       /* FSFA routines                      */
      141     7506    2              CALL XSA$CLOSE(FPT_CLOSE,IFSFA_PARAM) ALTRET(FSFA_ALT);
      142     7507    2              CALL CLEANUP;
      143     7508    2            END;                           /* END CASE                           */
      144     7509    1           FPT_CLOSE.V.POS# = SAVEPOS;/* So closes external to this routine work */
      145     7510    1           FPT_CLOSE.V.NOMARKS# = SAVENOMARKS;
      146     7511    1           RETURN;
      147     7512        /**/
      148     7513    1   PMME_ALT:
      149     7514    1           INPUT_ERR = %VPSZ_ERROR#;
      150     7515    1           ALTRETURN;
      151     7516        /**/
      152     7517    1   FSFA_ALT:
      153     7518    1           INPUT_ERR = IFSFA_PARAM.ERR;
      154     7519    1           CALL CLEANUP;
      155     7520    1           ALTRETURN;
      156     7521        /**/
      157     7522    1   CLEANUP: PROC;
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:6    
      158     7523    2           IF IKBUF_PTR$ ~= ADDR(NIL)
      159     7524    2            THEN                           /* Key buffer leftover                */
      160     7525    2              CALL VPD$REL_BUF(IKBUF_PTR$,1024);
      161     7526        /**/
      162     7527    2           IF IBBUF_PTR$ ~= ADDR(NIL)
      163     7528    2            THEN                           /* Data buffer leftover               */
      164     7529    2              CALL VPD$REL_BUF(IBBUF_PTR$,IBBUF_WSIZE);
      165     7530        /**/
      166     7531    2           RETURN;
      167     7532        /**/
      168     7533    2   END CLEANUP;
      169     7534        /**/
      170     7535    1   END VPF$CALL_OPEN;
      171     7536        %EOD;

PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:7    
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$CALL_OPEN.

   Procedure VPF$CALL_OPEN requires 241 words for executable code.
   Procedure VPF$CALL_OPEN requires 12 words of local(AUTO) storage.

PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:8    

 Object Unit name= VPF$CALL_OPEN                              File name= VPF$SRCLST.:E05TOU
 UTS= JUL 30 '97 07:30:17.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Proc  even  none   241    361  VPF$CALL_OPEN
   11  RoData even  none    17     21  VPF$CALL_OPEN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes    yes     yes      Std        1  VPF$CALL_OPEN
    10    160          yes     yes      Std        1  VPF$CALL_CLOSE
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:9    

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VPD$GET_BUF
         yes           Std       8 VPL$ERR_PROC
 yes     yes           Std       2 VPD$REL_BUF
 yes     yes           Std       2 XSA$OPEN
 yes     yes           Std       2 XSA$CLOSE
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  INPUT_ERR                             USER_LABELS$
     EOF_SOURCE                            BREAK_LOC                             BREAK_MESSAGE_REPORTER
     CMD_MASK                              SPEC_BUF                              OCB
     IN_RES                                ICB                                   READ_MODE
     IBBUF_PTR$                            IBBUF_WSIZE                           IKBUF_PTR$
     IFSFA_PARAM                           M$EI                                  M$EO
     M$EO1                                 M$ME                                  M$SI
     M$READFILE                            M$DO                                  M$STD1
     M$SORT1                               B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:10   


        1        1        /*M* VPF$SRCLST This module contains routines for manipulating SOURCELIST     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DTI=1,THI=1  */
        8        8        /* NEXT AVAILABLE ERROR CODE = 80 by 5  */
        9        9        /* ALSO AVAILABLE:  NONE */
       10       10        %EJECT;
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:11   
       11       11        VPF$CALL_OPEN: PROC(FPT_OPEN) ALTRET;

     11 10 000000   000000 700200 xent  VPF$CALL_OP* TSX0  ! X66_AUTO_1
        10 000001   000014 000001                    ZERO    12,1

       12       12        /*D* NAME: VPF$CALL_OPEN
       13       13             CALL: CALL VPF$CALL_OPEN(FPT_OPEN);
       14       14             DESCRIPTION: This procedure will do an OPEN using the passed FPT.
       15       15                          If it is suitable for FSFA, READ_MODE will be set
       16       16                          to 1.  Otherwise it'll be 0.
       17       17        */
       18       18        /**/
       19       19        /*  INCLUDE FILES  */
       20       20        /**/
       21       21        %INCLUDE VP_DATA_R;
       22     7008        /**/
       23     7009        /*  Parameters  */
       24     7010        /**/
       25     7011        %FPT_OPEN(FPTN = FPT_OPEN,
       26     7012                  STCLASS = " ");
       27     7121        /**/
       28     7122        /*  Based Structures  */
       29     7123        /**/
       30     7124        %B$ALT;
       31     7132        %FPT_CLOSE(FPTN = FPT_CLOSE,
       32     7133                   STCLASS = "BASED(CLOSE$)");
       33     7175        %B$TCB;
       34     7178        %VLP_VECTOR(FPTN=B$VECTOR,STCLASS=BASED);
       35     7193    1   DCL B$WORD UBIN BASED;
       36     7194        /**/
       37     7195        /*  Local Storage  */
       38     7196        /**/
       39     7197    1   DCL CLOSE$ PTR;
       40     7198    1   DCL SAVEPOS UBIN;
       41     7199    1   DCL SAVENOMARKS BIT(1);
       42     7200        /**/
       43     7201        /*  Entry Points  */
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:12   
       44     7202        /**/
       45     7203        %VP_ENTRIES (OMIT=VPF$CALL_OPEN);
       46     7411    1   DCL XSA$OPEN ENTRY(2) ALTRET;
       47     7412    1   DCL XSA$CLOSE ENTRY(2) ALTRET;
       48     7413        /**/
       49     7414    2           IF ICB.DEV_MASK.MAN_TAPE THEN DO;

   7414 10 000002   000171 236000 xsym               LDQ     ICB+121
        10 000003   100000 316003                    CANQ    32768,DU
        10 000004   000033 600000 10                 TZE     s:7425

       50     7415    2               IF USER_LABELS$ = ADDR(NIL) THEN

   7415 10 000005   000000 236000 xsym               LDQ     USER_LABELS$
        10 000006   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000007   000021 601000 10                 TNZ     s:7420

       51     7416    2                  CALL VPD$GET_BUF(USER_LABELS$,8*1024)

   7416 10 000010   000001 630400 11                 EPPR0   1
        10 000011   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000012   000000 701000 xent               TSX1    VPD$GET_BUF
        10 000013   000015 702000 10                 TSX2    s:7418
        10 000014   000021 710000 10                 TRA     s:7420

       52     7417    3                   WHENALTRETURN DO;

       53     7418    3                      CALL VPL$ERR_PROC(3,0);

   7418 10 000015   000003 630400 11                 EPPR0   3
        10 000016   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000017   000000 701000 xent               TSX1    VPL$ERR_PROC
        10 000020   000000 011000                    NOP     0

       54     7419    3                      END;

       55     7420    2               ADDR(FPT_OPEN.UHL_)->B$VECTOR.PTR$ = USER_LABELS$;
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:13   

   7420 10 000021   000000 236000 xsym               LDQ     USER_LABELS$
        10 000022   200003 470500                    LDP0    @FPT_OPEN,,AUTO
        10 000023   000005 756100                    STQ     5,,PR0

       56     7421    2               ADDR(FPT_OPEN.UHL_)->B$VECTOR.W1.VSIZE# = 8*1024*4-1;

   7421 10 000024   000004 236100                    LDQ     4,,PR0
        10 000025   177777 376007                    ANQ     65535,DL
        10 000026   000005 276000 11                 ORQ     5
        10 000027   000004 756100                    STQ     4,,PR0

       57     7422    2               USER_LABELS$->B$WORD=0;     /* START OFF WITH NO LABELS           */

   7422 10 000030   000000 471400 xsym               LDP1    USER_LABELS$
        10 000031   100000 450100                    STZ     0,,PR1

       58     7423    2               END;

   7423 10 000032   000041 710000 10                 TRA     s:7427

       59     7424    1            ELSE
       60     7425    1              IF FPT_OPEN.UHL_ ~= VECTOR(NIL) THEN

   7425 10 000033   200003 470500                    LDP0    @FPT_OPEN,,AUTO
        10 000034   000004 237100                    LDAQ    4,,PR0
        10 000035   000006 117000 11                 CMPAQ   6
        10 000036   000041 600000 10                 TZE     s:7427

       61     7426    1                 FPT_OPEN.UHL_  = VECTOR(NIL);

   7426 10 000037   000006 237000 11                 LDAQ    6
        10 000040   000004 757100                    STAQ    4,,PR0

       62     7427    1           IF FPT_OPEN.V.OPER.TEST#        /* TEST OPEN                          */

   7427 10 000041   000044 236100                    LDQ     36,,PR0
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:14   
        10 000042   020000 316007                    CANQ    8192,DL
        10 000043   000150 601000 10                 TNZ     PMME_OPEN
        10 000044   000100 100400                    MLR     fill='000'O
        10 000045   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        10 000046   200012 000010                    ADSC9   SAVENOMARKS+4,,AUTO      cn=0,n=8
        10 000047   200012 237100                    LDAQ    SAVENOMARKS+4,,AUTO
        10 000050   000010 377000 11                 ANAQ    8
        10 000051   000150 600000 10                 TZE     PMME_OPEN
        10 000052   000045 234000 xsym               SZN     ICB+37
        10 000053   000150 604000 10                 TMI     PMME_OPEN
        10 000054   000046 234000 xsym               SZN     ICB+38
        10 000055   000150 604000 10                 TMI     PMME_OPEN
        10 000056   000007 235000 xsym               LDA     ICB+7
        10 000057   000150 601000 10                 TNZ     PMME_OPEN
        10 000060   000000 234000 xsym               SZN     ICB
        10 000061   000150 604000 10                 TMI     PMME_OPEN
        10 000062   000001 234000 xsym               SZN     ICB+1
        10 000063   000150 604000 10                 TMI     PMME_OPEN
        10 000064   000004 234000 xsym               SZN     ICB+4
        10 000065   000150 604000 10                 TMI     PMME_OPEN

       63     7428    1             OR NOT CMD_MASK & '34'O       /* Not COPYs                          */
       64     7429    1             OR ICB.KEY_SEL                /* Record selection by keys           */
       65     7430    1             OR ICB.LREC_SEL               /* Record selection by log. rec. no.  */
       66     7431    1             OR ICB.CRPT ~= 0              /* Decryption                         */
       67     7432    1             OR ICB.EBCDIC                 /* EBCDIC translation                 */
       68     7433    1             OR ICB.BIN                    /* BINARY                             */
       69     7434    1             OR ICB.TRANS                  /* TRANSPARENT                        */
       70     7435    1            THEN                           /* Unsuitable for FSFA routines       */
       71     7436    1              GOTO PMME_OPEN;
       72     7437        /**/
       73     7438    1           CALL VPD$GET_BUF(IKBUF_PTR$,1024) ALTRET(PMME_OPEN);

   7438 10 000066   000013 630400 11                 EPPR0   11
        10 000067   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000070   000000 701000 xent               TSX1    VPD$GET_BUF
        10 000071   000150 702000 10                 TSX2    PMME_OPEN
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:15   

       74     7439    1           IFSFA_PARAM.KBUF_.BUF$ = IKBUF_PTR$;

   7439 10 000072   000000 236000 xsym               LDQ     IKBUF_PTR$
        10 000073   000003 756000 xsym               STQ     IFSFA_PARAM+3

       75     7440    1           IFSFA_PARAM.KBUF_.BOUND = 1024 * 4 -1;

   7440 10 000074   000002 236000 xsym               LDQ     IFSFA_PARAM+2
        10 000075   177777 376007                    ANQ     65535,DL
        10 000076   000015 276000 11                 ORQ     13
        10 000077   000002 756000 xsym               STQ     IFSFA_PARAM+2

       76     7441        /**/
       77     7442    1           IBBUF_WSIZE = 1024 * 5;

   7442 10 000100   012000 235007                    LDA     5120,DL
        10 000101   000000 755000 xsym               STA     IBBUF_WSIZE

       78     7443    1           CALL VPD$GET_BUF(IBBUF_PTR$,IBBUF_WSIZE) ALTRET(PMME_OPEN);

   7443 10 000102   000016 630400 11                 EPPR0   14
        10 000103   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000104   000000 701000 xent               TSX1    VPD$GET_BUF
        10 000105   000150 702000 10                 TSX2    PMME_OPEN

       79     7444    1           IFSFA_PARAM.BBUF_.BUF$ = IBBUF_PTR$;

   7444 10 000106   000000 236000 xsym               LDQ     IBBUF_PTR$
        10 000107   000005 756000 xsym               STQ     IFSFA_PARAM+5

       80     7445    1           IFSFA_PARAM.BBUF_.BOUND = IBBUF_WSIZE * 4 -1;

   7445 10 000110   000000 236000 xsym               LDQ     IBBUF_WSIZE
        10 000111   000002 736000                    QLS     2
        10 000112   000001 136007                    SBLQ    1,DL
        10 000113   000020 736000                    QLS     16
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:16   
        10 000114   000004 676000 xsym               ERQ     IFSFA_PARAM+4
        10 000115   000034 376000 xsym               ANQ     B_VECTNIL+28
        10 000116   000004 656000 xsym               ERSQ    IFSFA_PARAM+4

       81     7446        /**/
       82     7447    1           CALL XSA$OPEN(FPT_OPEN,IFSFA_PARAM) ALTRET(FSFA_ALT);

   7447 10 000117   000020 236000 11                 LDQ     16
        10 000120   200003 235100                    LDA     @FPT_OPEN,,AUTO
        10 000121   200012 757100                    STAQ    SAVENOMARKS+4,,AUTO
        10 000122   200012 630500                    EPPR0   SAVENOMARKS+4,,AUTO
        10 000123   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000124   000000 701000 xent               TSX1    XSA$OPEN
        10 000125   000333 702000 10                 TSX2    FSFA_ALT

       83     7448        /**/
       84     7449    1           IF IFSFA_PARAM.ORG = 0

   7449 10 000126   000014 236000 xsym               LDQ     IFSFA_PARAM+12
        10 000127   000777 316003                    CANQ    511,DU
        10 000130   000135 601000 10                 TNZ     s:7457

       85     7450    1            THEN                           /* Unsuitable for FSFA                */
       86     7451    2            DO;

       87     7452    2               READ_MODE = 0;

   7452 10 000131   000000 450000 xsym               STZ     READ_MODE

       88     7453    2               CALL CLEANUP;

   7453 10 000132   000340 701000 10                 TSX1    CLEANUP
        10 000133   000000 011000                    NOP     0

       89     7454    2               END;

   7454 10 000134   000147 710000 10                 TRA     s:7462
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:17   

       90     7455    1            ELSE                           /* FSFA must be used                  */
       91     7456    2            DO;

       92     7457    2               READ_MODE = 1;

   7457 10 000135   000001 235007                    LDA     1,DL
        10 000136   000000 755000 xsym               STA     READ_MODE

       93     7458    2               IF IFSFA_PARAM.ORG = %CONSEC#

   7458 10 000137   000014 236000 xsym               LDQ     IFSFA_PARAM+12
        10 000140   000777 376003                    ANQ     511,DU
        10 000141   000001 116003                    CMPQ    1,DU
        10 000142   000147 601000 10                 TNZ     s:7462

       94     7459    2                THEN                       /* KBUF not needed                    */
       95     7460    2                  CALL VPD$REL_BUF(IKBUF_PTR$,1024); /* Release it               */

   7460 10 000143   000013 630400 11                 EPPR0   11
        10 000144   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000145   000000 701000 xent               TSX1    VPD$REL_BUF
        10 000146   000000 011000                    NOP     0

       96     7461    2               END;

       97     7462    1           RETURN;

   7462 10 000147   000000 702200 xent               TSX2  ! X66_ARET

       98     7463        /**/
       99     7464    1   PMME_OPEN:
      100     7465    1           CALL CLEANUP;                   /* Cleanup after FSFA attempt         */

   7465 10 000150   000340 701000 10    PMME_OPEN    TSX1    CLEANUP
        10 000151   000000 011000                    NOP     0

PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:18   
      101     7466    1           CALL M$OPEN (FPT_OPEN) ALTRET(PMME_ALT);

   7466 10 000152   200003 470500                    LDP0    @FPT_OPEN,,AUTO
        10 000153   450000 713400                    CLIMB   alt,open
        10 000154   410400 401760                    pmme    nvectors=18
        10 000155   000326 702000 10                 TSX2    PMME_ALT

      102     7467    1           READ_MODE = 0;

   7467 10 000156   000000 450000 xsym               STZ     READ_MODE

      103     7468    1           RETURN;

   7468 10 000157   000000 702200 xent               TSX2  ! X66_ARET

      104     7469        /**/
      105     7470    1   VPF$CALL_CLOSE: ENTRY(FPT_OPEN) ALTRET;

   7470 10 000160   000000 700200 xent  VPF$CALL_CL* TSX0  ! X66_AUTO_1
        10 000161   000014 000001                    ZERO    12,1

      106     7471    1           CLOSE$ = ADDR(FPT_OPEN);        /* PL-6 KLUDGE                        */

   7471 10 000162   200003 236100                    LDQ     @FPT_OPEN,,AUTO
        10 000163   200004 756100                    STQ     CLOSE$,,AUTO

      107     7472    1           SAVEPOS=FPT_CLOSE.V.POS#;

   7472 10 000164   200004 470500                    LDP0    CLOSE$,,AUTO
        10 000165   000034 236100                    LDQ     28,,PR0
        10 000166   000033 772000                    QRL     27
        10 000167   200005 756100                    STQ     SAVEPOS,,AUTO

      108     7473    1           SAVENOMARKS=FPT_CLOSE.V.NOMARKS#;

   7473 10 000170   000034 236100                    LDQ     28,,PR0
        10 000171   000013 736000                    QLS     11
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:19   
        10 000172   400000 376003                    ANQ     -131072,DU
        10 000173   200006 756100                    STQ     SAVENOMARKS,,AUTO

      109     7474    2           IF ICB.DEV_MASK.MAN_TAPE AND OCB.DEV_MASK.LT THEN DO;
              7474                    /* There might be UTLs */

   7474 10 000174   000171 236000 xsym               LDQ     ICB+121
        10 000175   100000 316003                    CANQ    32768,DU
        10 000176   000230 600000 10                 TZE     s:7485
        10 000177   000255 236000 xsym               LDQ     OCB+173
        10 000200   002000 316003                    CANQ    1024,DU
        10 000201   000230 600000 10                 TZE     s:7485

      110     7475    2               IF USER_LABELS$=ADDR(NIL) THEN

   7475 10 000202   000000 236000 xsym               LDQ     USER_LABELS$
        10 000203   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000204   000216 601000 10                 TNZ     s:7480

      111     7476    2                  CALL VPD$GET_BUF(USER_LABELS$,8*1024)

   7476 10 000205   000001 630400 11                 EPPR0   1
        10 000206   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000207   000000 701000 xent               TSX1    VPD$GET_BUF
        10 000210   000212 702000 10                 TSX2    s:7478
        10 000211   000216 710000 10                 TRA     s:7480

      112     7477    3                   WHENALTRETURN DO;

      113     7478    3                      CALL VPL$ERR_PROC(3,0);

   7478 10 000212   000003 630400 11                 EPPR0   3
        10 000213   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000214   000000 701000 xent               TSX1    VPL$ERR_PROC
        10 000215   000000 011000                    NOP     0

      114     7479    3                      END;
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:20   

      115     7480    2               ADDR(FPT_CLOSE.UTL_)->B$VECTOR.PTR$ = USER_LABELS$;

   7480 10 000216   000000 236000 xsym               LDQ     USER_LABELS$
        10 000217   200004 470500                    LDP0    CLOSE$,,AUTO
        10 000220   000005 756100                    STQ     5,,PR0

      116     7481    2               ADDR(FPT_CLOSE.UTL_)->B$VECTOR.W1.VSIZE#=8*1024*4-1;

   7481 10 000221   000004 236100                    LDQ     4,,PR0
        10 000222   177777 376007                    ANQ     65535,DL
        10 000223   000005 276000 11                 ORQ     5
        10 000224   000004 756100                    STQ     4,,PR0

      117     7482    2               USER_LABELS$->B$WORD=0;     /* START OFF WITH NO LABELS           */

   7482 10 000225   000000 471400 xsym               LDP1    USER_LABELS$
        10 000226   100000 450100                    STZ     0,,PR1

      118     7483    2               END;

   7483 10 000227   000232 710000 10                 TRA     s:7486

      119     7484    1            ELSE
      120     7485    1              FPT_CLOSE.UTL_=VECTOR(NIL);

   7485 10 000230   000006 237000 11                 LDAQ    6
        10 000231   000004 757100                    STAQ    4,,PR0

      121     7486    2           DO CASE(ICB.CLPOS);             /* Tape positioning                   */

   7486 10 000232   000233 235000 xsym               LDA     ICB+155
        10 000233   000005 115007                    CMPA    5,DL
        10 000234   000236 602005 10                 TNC     s:7486+4,AL
        10 000235   000263 710000 10                 TRA     s:7499
        10 000236   000243 710000 10                 TRA     s:7488
        10 000237   000250 710000 10                 TRA     EOFPOS
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:21   
        10 000240   000253 710000 10                 TRA     s:7493
        10 000241   000256 710000 10                 TRA     s:7495
        10 000242   000261 710000 10                 TRA     s:7497

      122     7487    2            CASE(0);                       /* Default                            */

      123     7488    2              IF EOF_SOURCE THEN GOTO EOFPOS;

   7488 10 000243   000000 234000 xsym               SZN     EOF_SOURCE
        10 000244   000250 604000 10                 TMI     EOFPOS

      124     7489    2              FPT_CLOSE.V.NOMARKS# = '1'B;

   7489 10 000245   000100 236003                    LDQ     64,DU
        10 000246   000034 256100                    ORSQ    28,,PR0
        10 000247   000263 710000 10                 TRA     s:7499

      125     7490    2            CASE(1);                       /* EOF                                */

      126     7491    2   EOFPOS:    FPT_CLOSE.V.POS# = 0;

   7491 10 000250   000000 236003       EOFPOS       LDQ     0,DU
        10 000251   000034 552140                    STBQ    28,'40'O,PR0
        10 000252   000263 710000 10                 TRA     s:7499

      127     7492    2            CASE(2);                       /* BOF                                */

      128     7493    2              FPT_CLOSE.V.POS# = %PTL#;

   7493 10 000253   001000 236003                    LDQ     512,DU
        10 000254   000034 552140                    STBQ    28,'40'O,PR0
        10 000255   000263 710000 10                 TRA     s:7499

      129     7494    2            CASE(3);                       /* BOT                                */

      130     7495    2              FPT_CLOSE.V.POS# = %PTV#;

PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:22   
   7495 10 000256   004000 236003                    LDQ     2048,DU
        10 000257   000034 552140                    STBQ    28,'40'O,PR0
        10 000260   000263 710000 10                 TRA     s:7499

      131     7496    2            CASE(4);                       /* NONE                               */

      132     7497    2              FPT_CLOSE.V.NOMARKS# = '1'B;

   7497 10 000261   000100 236003                    LDQ     64,DU
        10 000262   000034 256100                    ORSQ    28,,PR0

      133     7498    2            END;

      134     7499    1           IF NOT CMD_MASK & '34'O         /* Not COPYs                          */

   7499 10 000263   000100 100400                    MLR     fill='000'O
        10 000264   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        10 000265   200012 000010                    ADSC9   SAVENOMARKS+4,,AUTO      cn=0,n=8
        10 000266   200012 237100                    LDAQ    SAVENOMARKS+4,,AUTO
        10 000267   000010 377000 11                 ANAQ    8
        10 000270   000277 600000 10                 TZE     PMME_CLOSE

      135     7500    1            THEN                           /* Don't trust READ_MODE              */
      136     7501    1              GOTO PMME_CLOSE;
      137     7502    2           DO CASE(READ_MODE);

   7502 10 000271   000000 235000 xsym               LDA     READ_MODE
        10 000272   000002 115007                    CMPA    2,DL
        10 000273   000275 602005 10                 TNC     s:7502+4,AL
        10 000274   000314 710000 10                 TRA     s:7509
        10 000275   000277 710000 10                 TRA     PMME_CLOSE
        10 000276   000303 710000 10                 TRA     s:7506

      138     7503    2            CASE(0);                       /* Normal PMME                        */

      139     7504    2   PMME_CLOSE: CALL M$CLOSE(FPT_CLOSE) ALTRET(PMME_ALT);

PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:23   
   7504 10 000277   450001 713400       PMME_CLOSE   CLIMB   alt,close
        10 000300   406000 401760                    pmme    nvectors=13
        10 000301   000326 702000 10                 TSX2    PMME_ALT
        10 000302   000314 710000 10                 TRA     s:7509

      140     7505    2            CASE(1);                       /* FSFA routines                      */

      141     7506    2              CALL XSA$CLOSE(FPT_CLOSE,IFSFA_PARAM) ALTRET(FSFA_ALT);

   7506 10 000303   000020 236000 11                 LDQ     16
        10 000304   200004 235100                    LDA     CLOSE$,,AUTO
        10 000305   200012 757100                    STAQ    SAVENOMARKS+4,,AUTO
        10 000306   200012 630500                    EPPR0   SAVENOMARKS+4,,AUTO
        10 000307   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000310   000000 701000 xent               TSX1    XSA$CLOSE
        10 000311   000333 702000 10                 TSX2    FSFA_ALT

      142     7507    2              CALL CLEANUP;

   7507 10 000312   000340 701000 10                 TSX1    CLEANUP
        10 000313   000000 011000                    NOP     0

      143     7508    2            END;                           /* END CASE                           */

      144     7509    1           FPT_CLOSE.V.POS# = SAVEPOS;/* So closes external to this routine work */

   7509 10 000314   200004 470500                    LDP0    CLOSE$,,AUTO
        10 000315   200005 236100                    LDQ     SAVEPOS,,AUTO
        10 000316   000033 736000                    QLS     27
        10 000317   000034 552140                    STBQ    28,'40'O,PR0

      145     7510    1           FPT_CLOSE.V.NOMARKS# = SAVENOMARKS;

   7510 10 000320   200006 236100                    LDQ     SAVENOMARKS,,AUTO
        10 000321   000013 772000                    QRL     11
        10 000322   000034 676100                    ERQ     28,,PR0
        10 000323   000100 376003                    ANQ     64,DU
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:24   
        10 000324   000034 656100                    ERSQ    28,,PR0

      146     7511    1           RETURN;

   7511 10 000325   000000 702200 xent               TSX2  ! X66_ARET

      147     7512        /**/
      148     7513    1   PMME_ALT:
      149     7514    1           INPUT_ERR = %VPSZ_ERROR#;

   7514 10 000326   000000 470400 xsym  PMME_ALT     LDP0    B$TCB$
        10 000327   000000 471500                    LDP1    0,,PR0
        10 000330   100102 236100                    LDQ     66,,PR1
        10 000331   000000 756000 xsym               STQ     INPUT_ERR

      150     7515    1           ALTRETURN;

   7515 10 000332   000000 702200 xent               TSX2  ! X66_AALT

      151     7516        /**/
      152     7517    1   FSFA_ALT:
      153     7518    1           INPUT_ERR = IFSFA_PARAM.ERR;

   7518 10 000333   000001 236000 xsym  FSFA_ALT     LDQ     IFSFA_PARAM+1
        10 000334   000000 756000 xsym               STQ     INPUT_ERR

      154     7519    1           CALL CLEANUP;

   7519 10 000335   000340 701000 10                 TSX1    CLEANUP
        10 000336   000000 011000                    NOP     0

      155     7520    1           ALTRETURN;

   7520 10 000337   000000 702200 xent               TSX2  ! X66_AALT

      156     7521        /**/
      157     7522    1   CLEANUP: PROC;
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:25   

   7522 10 000340   200010 741300       CLEANUP      STX1  ! SAVENOMARKS+2,,AUTO

      158     7523    2           IF IKBUF_PTR$ ~= ADDR(NIL)

   7523 10 000341   000000 236000 xsym               LDQ     IKBUF_PTR$
        10 000342   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000343   000350 600000 10                 TZE     s:7527

      159     7524    2            THEN                           /* Key buffer leftover                */
      160     7525    2              CALL VPD$REL_BUF(IKBUF_PTR$,1024);

   7525 10 000344   000013 630400 11                 EPPR0   11
        10 000345   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000346   000000 701000 xent               TSX1    VPD$REL_BUF
        10 000347   000000 011000                    NOP     0

      161     7526        /**/
      162     7527    2           IF IBBUF_PTR$ ~= ADDR(NIL)

   7527 10 000350   000000 236000 xsym               LDQ     IBBUF_PTR$
        10 000351   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000352   000357 600000 10                 TZE     s:7531

      163     7528    2            THEN                           /* Data buffer leftover               */
      164     7529    2              CALL VPD$REL_BUF(IBBUF_PTR$,IBBUF_WSIZE);

   7529 10 000353   000016 630400 11                 EPPR0   14
        10 000354   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000355   000000 701000 xent               TSX1    VPD$REL_BUF
        10 000356   000000 011000                    NOP     0

      165     7530        /**/
      166     7531    2           RETURN;

   7531 10 000357   200010 221300                    LDX1  ! SAVENOMARKS+2,,AUTO
        10 000360   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:26   
      167     7532        /**/
      168     7533    2   END CLEANUP;
      169     7534        /**/
      170     7535    1   END VPF$CALL_OPEN;
      171     7536        %EOD;

PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:27   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$CALL_OPEN.
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:28   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FPT_OPEN                  4-0-0/w PTR         r     1 CLOSE$
    *0-0-0/d STRC(2088)  r     1 FPT_OPEN                   6-0-0/b BIT         r     1 SAVENOMARKS
     5-0-0/w UBIN        r     1 SAVEPOS

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b BIT         r     1 CMD_MASK(0:71)
     0-0-0/w BIT         r     1 EOF_SOURCE                 0-0-0/w PTR         r     1 IBBUF_PTR$
     0-0-0/w SBIN        r     1 IBBUF_WSIZE                0-0-0/d STRC(5868)  r     1 ICB
     0-0-0/d STRC(504)   r     1 IFSFA_PARAM                0-0-0/w PTR         r     1 IKBUF_PTR$
     0-0-0/w STRC        r     1 INPUT_ERR                  0-0-0/d STRC(6840)  r     1 OCB
     0-0-0/w SBIN        r     1 READ_MODE                  0-0-0/w PTR         r     1 USER_LABELS$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d STRC(72)    r     1 B$VECTOR                   0-0-0/w UBIN        r     1 B$WORD
     0-0-0/d STRC(1080)  r     1 FPT_CLOSE


   Procedure VPF$CALL_OPEN requires 241 words for executable code.
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:29   
   Procedure VPF$CALL_OPEN requires 12 words of local(AUTO) storage.
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:30   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:31   
          MINI XREF LISTING

B$ALT.CODE
      7126**DCL      7126--REDEF    7127--REDEF    7127--REDEF
B$ALT.ERR
      7127**DCL      7514>>ASSIGN
B$ALT.ERR.ERR#
      7128**DCL      7128--REDEF
B$ALT.EVID
      7127**DCL      7127--REDEF    7127--REDEF
B$TCB.ALT$
      7176**DCL      7514>>ASSIGN
B$TCB$
      5993**DCL      7514>>ASSIGN
B$VECTOR.PTR$
      7191**DCL      7420<<ASSIGN   7480<<ASSIGN
B$VECTOR.W1.VSIZE#
      7189**DCL      7421<<ASSIGN   7481<<ASSIGN
B$VECTOR.W2
      7190**DCL      7191--REDEF
B$WORD
      7193**DCL      7422<<ASSIGN   7482<<ASSIGN
BREAK_LOC
      5228**DCL      5228--REDEF
CLEANUP
      7522**PROC     7453--CALL     7465--CALL     7507--CALL     7519--CALL
CLOSE$
      7197**DCL      7156--IMP-PTR  7471<<ASSIGN   7472>>ASSIGN   7473>>ASSIGN   7480>>ASSIGN   7481>>ASSIGN
      7485>>ASSIGN   7489>>ASSIGN   7491>>ASSIGN   7493>>ASSIGN   7495>>ASSIGN   7497>>ASSIGN   7504>>CALL
      7506>>CALL     7509>>ASSIGN   7510>>ASSIGN
CMD_MASK
      5230**DCL      7427>>IF       7499>>IF
DEF_ICB.FID.STRING
      5826**DCL      5827--REDEF
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:32   
DEV_ICB.FID.STRING
      5712**DCL      5713--REDEF
EI_KEY.KEY
      5924**DCL      5924--REDEF    5924--REDEF    5924--REDEF
EOFPOS
      7491**LABEL    7488--GOTO
EOF_SOURCE
      5225**DCL      7488>>IF
EO_OCB.TYPE
      5424**DCL      5425--REDEF
FPT_CLOSE
      7156**DCL      7504<>CALL     7506<>CALL
FPT_CLOSE.SN_
      7156**DCL      7156--REDEF
FPT_CLOSE.UTL_
      7157**DCL      7157--REDEF    7480--ASSIGN   7481--ASSIGN   7485<<ASSIGN
FPT_CLOSE.V.EXPIRE#
      7171**DCL      7171--REDEF
FPT_CLOSE.V.NOMARKS#
      7170**DCL      7473>>ASSIGN   7489<<ASSIGN   7497<<ASSIGN   7510<<ASSIGN
FPT_CLOSE.V.POS#
      7169**DCL      7472>>ASSIGN   7491<<ASSIGN   7493<<ASSIGN   7495<<ASSIGN   7509<<ASSIGN
FPT_CLOSE.V.TYPE#
      7169**DCL      7169--REDEF
FPT_CLOSE.V.XTNSIZE#
      7166**DCL      7166--REDEF    7168--REDEF
FPT_CLOSE_EI.SN_
      6765**DCL      6765--REDEF
FPT_CLOSE_EI.UTL_
      6766**DCL      6766--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6780**DCL      6780--REDEF
FPT_CLOSE_EI.V.TYPE#
      6778**DCL      6778--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6775**DCL      6775--REDEF    6777--REDEF
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:33   
FPT_CLOSE_PTL.SN_
      6891**DCL      6891--REDEF
FPT_CLOSE_PTL.UTL_
      6892**DCL      6892--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6906**DCL      6906--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6904**DCL      6904--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6901**DCL      6901--REDEF    6903--REDEF
FPT_CLOSE_READ.SN_
      6807**DCL      6807--REDEF
FPT_CLOSE_READ.UTL_
      6808**DCL      6808--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6822**DCL      6822--REDEF
FPT_CLOSE_READ.V.TYPE#
      6820**DCL      6820--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6817**DCL      6817--REDEF    6819--REDEF
FPT_CLOSE_SI.SN_
      6975**DCL      6975--REDEF
FPT_CLOSE_SI.UTL_
      6976**DCL      6976--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6990**DCL      6990--REDEF
FPT_CLOSE_SI.V.TYPE#
      6988**DCL      6988--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6985**DCL      6985--REDEF    6987--REDEF
FPT_CLOSE_STD.SN_
      6933**DCL      6933--REDEF
FPT_CLOSE_STD.UTL_
      6934**DCL      6934--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6948**DCL      6948--REDEF
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:34   
FPT_CLOSE_STD.V.TYPE#
      6946**DCL      6946--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6943**DCL      6943--REDEF    6945--REDEF
FPT_CLSEI_FT.SN_
      6849**DCL      6849--REDEF
FPT_CLSEI_FT.UTL_
      6850**DCL      6850--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6864**DCL      6864--REDEF
FPT_CLSEI_FT.V.TYPE#
      6862**DCL      6862--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6859**DCL      6859--REDEF    6861--REDEF
FPT_OPEN
      7077**DCL        11--PROC     7447<>CALL     7466<>CALL     7470--ENTRY    7471--ASSIGN
FPT_OPEN.ACSVEH_
      7079**DCL      7080--REDEF
FPT_OPEN.ALTKEYS_
      7085**DCL      7086--REDEF    7086--REDEF
FPT_OPEN.HDR_
      7084**DCL      7085--REDEF
FPT_OPEN.TAB_
      7083**DCL      7084--REDEF
FPT_OPEN.UHL_
      7077**DCL      7078--REDEF    7078--REDEF    7420--ASSIGN   7421--ASSIGN   7425>>IF       7426<<ASSIGN
FPT_OPEN.V.FSN#
      7117**DCL      7117--REDEF    7117--REDEF
FPT_OPEN.V.OPER.TEST#
      7088**DCL      7427>>IF
FPT_OPEN.WSN_
      7083**DCL      7083--REDEF
FPT_OPEN_EI.ACSVEH_
      6420**DCL      6421--REDEF
FPT_OPEN_EI.ALTKEYS_
      6426**DCL      6427--REDEF    6427--REDEF
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:35   
FPT_OPEN_EI.HDR_
      6425**DCL      6426--REDEF
FPT_OPEN_EI.TAB_
      6424**DCL      6425--REDEF
FPT_OPEN_EI.UHL_
      6418**DCL      6419--REDEF    6419--REDEF
FPT_OPEN_EI.V.FSN#
      6458**DCL      6458--REDEF    6458--REDEF
FPT_OPEN_EI.WSN_
      6424**DCL      6424--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6529**DCL      6530--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6535**DCL      6536--REDEF    6536--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6534**DCL      6535--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6533**DCL      6534--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6527**DCL      6528--REDEF    6528--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6567**DCL      6567--REDEF    6567--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6533**DCL      6533--REDEF
FPT_OPEN_OUT.ACSVEH_
      6311**DCL      6312--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6317**DCL      6318--REDEF    6318--REDEF
FPT_OPEN_OUT.HDR_
      6316**DCL      6317--REDEF
FPT_OPEN_OUT.TAB_
      6315**DCL      6316--REDEF
FPT_OPEN_OUT.UHL_
      6309**DCL      6310--REDEF    6310--REDEF
FPT_OPEN_OUT.V.FSN#
      6349**DCL      6349--REDEF    6349--REDEF
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:36   
FPT_OPEN_OUT.WSN_
      6315**DCL      6315--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6202**DCL      6203--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6208**DCL      6209--REDEF    6209--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6207**DCL      6208--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6206**DCL      6207--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6200**DCL      6201--REDEF    6201--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6240**DCL      6240--REDEF    6240--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6206**DCL      6206--REDEF
FPT_READ_STD.STATION_
      6630**DCL      6631--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6642**DCL      6642--REDEF
FPT_READ_STD.V.INDX#
      6640**DCL      6640--REDEF
FPT_READ_UC.STATION_
      6591**DCL      6592--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6603**DCL      6603--REDEF
FPT_READ_UC.V.INDX#
      6601**DCL      6601--REDEF
FPT_WRITE_ME.STATION_
      6699**DCL      6699--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6706**DCL      6706--REDEF
FPT_WRITE_OUT.STATION_
      6730**DCL      6730--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6737**DCL      6737--REDEF
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:37   
FPT_WRITE_UC.STATION_
      6668**DCL      6668--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6675**DCL      6675--REDEF
FROM_SN.SN
      5574**DCL      5575--REDEF
FSFA_ALT
      7518**LABEL    7447--CALLALT  7506--CALLALT
GETCMD.OUT$
      4781**DCL      4787--REDEF
IBBUF_PTR$
      5927**DCL      7443<>CALL     7444>>ASSIGN   7527>>IF       7529<>CALL
IBBUF_WSIZE
      5927**DCL      7442<<ASSIGN   7443<>CALL     7445>>ASSIGN   7529<>CALL
ICB.BIN
      5581**DCL      7427>>IF
ICB.CLPOS
      5681**DCL      7486>>DOCASE
ICB.CRPT
      5587**DCL      7427>>IF
ICB.DEV_MASK.MAN_TAPE
      5651**DCL      7414>>IF       7474>>IF
ICB.EBCDIC
      5580**DCL      7427>>IF
ICB.FID.STRING
      5598**DCL      5599--REDEF
ICB.KEY_SEL
      5603**DCL      7427>>IF
ICB.LREC_SEL
      5604**DCL      7427>>IF
ICB.TRANS
      5584**DCL      7427>>IF
IFSFA_PARAM
      5937**DCL      7447<>CALL     7506<>CALL
IFSFA_PARAM.BBUF_.BOUND
      5945**DCL      7445<<ASSIGN
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:38   
IFSFA_PARAM.BBUF_.BUF$
      5946**DCL      7444<<ASSIGN
IFSFA_PARAM.EOMCHAR#
      5953**DCL      5954--REDEF
IFSFA_PARAM.ERR
      5941**DCL      7518>>ASSIGN
IFSFA_PARAM.KBUF_.BOUND
      5943**DCL      7440<<ASSIGN
IFSFA_PARAM.KBUF_.BUF$
      5944**DCL      7439<<ASSIGN
IFSFA_PARAM.ORG
      5952**DCL      7449>>IF       7458>>IF
IFSFA_PARAM.SIG1
      5947**DCL      5947--REDEF
IFSFA_PARAM.SIG2
      5947**DCL      5948--REDEF
IKBUF_PTR$
      5928**DCL      7438<>CALL     7439>>ASSIGN   7460<>CALL     7523>>IF       7525<>CALL
INPUT_ERR
      5113**DCL      7514<<ASSIGN   7518<<ASSIGN
IN_RES
      5520**DCL      5520--REDEF
IN_SN.SN
      5536**DCL      5537--REDEF
M$CLOSE
        38**DCL-ENT  7504--CALL
M$OPEN
        38**DCL-ENT  7466--CALL
OCB.DEV_MASK.LT
      5323**DCL      7474>>IF
OCB.TYPE
      5282**DCL      5283--REDEF
OFSFA_PARAM.EOMCHAR#
      5983**DCL      5984--REDEF
OFSFA_PARAM.SIG1
      5977**DCL      5977--REDEF
PL6.E3A0      #001=VPF$CALL_OPEN File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:30 Page:39   
OFSFA_PARAM.SIG2
      5977**DCL      5978--REDEF
OUT_SN.SN
      5554**DCL      5555--REDEF
PMME_ALT
      7514**LABEL    7466--CALLALT  7504--CALLALT
PMME_CLOSE
      7504**LABEL    7501--GOTO
PMME_OPEN
      7465**LABEL    7436--GOTO     7438--CALLALT  7443--CALLALT
READ_MODE
      5926**DCL      7452<<ASSIGN   7457<<ASSIGN   7467<<ASSIGN   7502>>DOCASE
SAVENOMARKS
      7199**DCL      7473<<ASSIGN   7510>>ASSIGN
SAVEPOS
      7198**DCL      7472<<ASSIGN   7509>>ASSIGN
SPEC_BUF
      5232**DCL      5232--REDEF
USER_LABELS$
      5225**DCL      7415>>IF       7416<>CALL     7420>>ASSIGN   7422>>ASSIGN   7475>>IF       7476<>CALL
      7480>>ASSIGN   7482>>ASSIGN
VPD$GET_BUF
      7250**DCL-ENT  7416--CALL     7438--CALL     7443--CALL     7476--CALL
VPD$REL_BUF
      7251**DCL-ENT  7460--CALL     7525--CALL     7529--CALL
VPL$ERR_PROC
      7385**DCL-ENT  7418--CALL     7478--CALL
XSA$CLOSE
      7412**DCL-ENT  7506--CALL
XSA$OPEN
      7411**DCL-ENT  7447--CALL

PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:40   
      172        1        /*T***********************************************************/
      173        2        /*T*                                                         */
      174        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      175        4        /*T*                                                         */
      176        5        /*T***********************************************************/
      177        6        VPF$CLOSE_IN: PROC(CLOSE_STATUS) ALTRET;
      178        7        /*D* NAME: VPF$CLOSE_IN
      179        8             CALL: CALL VPF$CLOSE_IN(CLOSE_STATUS);
      180        9             DESCRIPTION: This procedure is used to close the input DCB after
      181       10                          a COPY or positioning operation.  The proper close
      182       11                          parameters are set according to the type of file.
      183       12
      184       13                          CLOSE_STATUS    meaning
      185       14                          ------------    -------
      186       15                               1          Normal close
      187       16        */
      188       17        /**/
      189       18        /*  INCLUDE FILES  */
      190       19        /**/
      191       20        %INCLUDE VP_DATA_R;
      192     7007        /**/
      193     7008        /*  Parameters  */
      194     7009        /**/
      195     7010    1   DCL CLOSE_STATUS SBIN WORD;
      196     7011        /**/
      197     7012        /*  Entry Points  */
      198     7013        /**/
      199     7014        %VP_ENTRIES (OMIT=VPF$CLOSE_IN);
      200     7222        /**/
      201     7223    1           IF ICB.FLAVOR.FFTAPE
      202     7224    1            THEN                           /* FREE-FREE TAPE                     */
      203     7225    1              CALL VPF$CALL_CLOSE (FPT_CLSEI_FT) ALTRET(RIVER_CITY);
      204     7226    1            ELSE
      205     7227    1              CALL VPF$CALL_CLOSE (FPT_CLOSE_EI) ALTRET(RIVER_CITY);
      206     7228    1           IF ICB.FLAVOR.TAPE
      207     7229    1            THEN                           /* Gotta check vol transition         */
      208     7230    1              CALL VPD$CHECK_VOL (IN_SN,0,M$EI#,,0);
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:41   
      209     7231    1           RETURN;
      210     7232        /**/
      211     7233    1   RIVER_CITY: ;
      212     7234    1           ALTRETURN;
      213     7235        /**/
      214     7236    1   END VPF$CLOSE_IN;
      215     7237        %EOD;

PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:42   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$CLOSE_IN.

   Procedure VPF$CLOSE_IN requires 30 words for executable code.
   Procedure VPF$CLOSE_IN requires 10 words of local(AUTO) storage.

PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:43   

 Object Unit name= VPF$CLOSE_IN                               File name= VPF$SRCLST.:E05TOU
 UTS= JUL 30 '97 07:32:32.76 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Proc  even  none    30     36  VPF$CLOSE_IN
   11  RoData even  none     6      6  VPF$CLOSE_IN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes    yes     yes      Std        1  VPF$CLOSE_IN
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:44   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 VPF$CALL_CLOSE
         yes           Std       5 VPD$CHECK_VOL
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              IN_RES                                IN_SN
     ICB                                   M$EI                                  M$EI#
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1                               FPT_CLOSE_EI
     FPT_CLSEI_FT                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:45   


      172        1        /*T***********************************************************/
      173        2        /*T*                                                         */
      174        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      175        4        /*T*                                                         */
      176        5        /*T***********************************************************/
      177        6        VPF$CLOSE_IN: PROC(CLOSE_STATUS) ALTRET;

      6 10 000000   000000 700200 xent  VPF$CLOSE_IN TSX0  ! X66_AUTO_1
        10 000001   000012 000001                    ZERO    10,1

      178        7        /*D* NAME: VPF$CLOSE_IN
      179        8             CALL: CALL VPF$CLOSE_IN(CLOSE_STATUS);
      180        9             DESCRIPTION: This procedure is used to close the input DCB after
      181       10                          a COPY or positioning operation.  The proper close
      182       11                          parameters are set according to the type of file.
      183       12
      184       13                          CLOSE_STATUS    meaning
      185       14                          ------------    -------
      186       15                               1          Normal close
      187       16        */
      188       17        /**/
      189       18        /*  INCLUDE FILES  */
      190       19        /**/
      191       20        %INCLUDE VP_DATA_R;
      192     7007        /**/
      193     7008        /*  Parameters  */
      194     7009        /**/
      195     7010    1   DCL CLOSE_STATUS SBIN WORD;
      196     7011        /**/
      197     7012        /*  Entry Points  */
      198     7013        /**/
      199     7014        %VP_ENTRIES (OMIT=VPF$CLOSE_IN);
      200     7222        /**/
      201     7223    1           IF ICB.FLAVOR.FFTAPE

   7223 10 000002   000172 236000 xsym               LDQ     ICB+122
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:46   
        10 000003   000040 316003                    CANQ    32,DU
        10 000004   000012 600000 10                 TZE     s:7227

      202     7224    1            THEN                           /* FREE-FREE TAPE                     */
      203     7225    1              CALL VPF$CALL_CLOSE (FPT_CLSEI_FT) ALTRET(RIVER_CITY);

   7225 10 000005   000000 630400 11                 EPPR0   0
        10 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
        10 000007   000000 701000 xent               TSX1    VPF$CALL_CLOSE
        10 000010   000035 702000 10                 TSX2    RIVER_CITY
        10 000011   000016 710000 10                 TRA     s:7228

      204     7226    1            ELSE
      205     7227    1              CALL VPF$CALL_CLOSE (FPT_CLOSE_EI) ALTRET(RIVER_CITY);

   7227 10 000012   000001 630400 11                 EPPR0   1
        10 000013   000017 631400 xsym               EPPR1   B_VECTNIL+15
        10 000014   000000 701000 xent               TSX1    VPF$CALL_CLOSE
        10 000015   000035 702000 10                 TSX2    RIVER_CITY

      206     7228    1           IF ICB.FLAVOR.TAPE

   7228 10 000016   000172 236000 xsym               LDQ     ICB+122
        10 000017   000004 316003                    CANQ    4,DU
        10 000020   000034 600000 10                 TZE     s:7231

      207     7229    1            THEN                           /* Gotta check vol transition         */
      208     7230    1              CALL VPD$CHECK_VOL (IN_SN,0,M$EI#,,0);

   7230 10 000021   000002 236000 11                 LDQ     2
        10 000022   200010 756100                    STQ     @CLOSE_STATUS+5,,AUTO
        10 000023   000001 236000 xsym               LDQ     B_VECTNIL+1
        10 000024   000003 235000 11                 LDA     3
        10 000025   200006 757100                    STAQ    @CLOSE_STATUS+3,,AUTO
        10 000026   000004 237000 11                 LDAQ    4
        10 000027   200004 757100                    STAQ    @CLOSE_STATUS+1,,AUTO
        10 000030   200004 630500                    EPPR0   @CLOSE_STATUS+1,,AUTO
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:47   
        10 000031   000023 631400 xsym               EPPR1   B_VECTNIL+19
        10 000032   000000 701000 xent               TSX1    VPD$CHECK_VOL
        10 000033   000000 011000                    NOP     0

      209     7231    1           RETURN;

   7231 10 000034   000000 702200 xent               TSX2  ! X66_ARET

   7228 10 000035                       RIVER_CITY   null
      210     7232        /**/
      211     7233    1   RIVER_CITY: ;
      212     7234    1           ALTRETURN;

   7234 10 000035   000000 702200 xent               TSX2  ! X66_AALT
      213     7235        /**/
      214     7236    1   END VPF$CLOSE_IN;
      215     7237        %EOD;

PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:48   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$CLOSE_IN.
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:49   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @CLOSE_STATUS             *0-0-0/w SBIN        r     1 CLOSE_STATUS

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/d STRC(1080)  r     1 FPT_CLOSE_EI               0-0-0/d STRC(1080)  r     1 FPT_CLSEI_FT
     0-0-0/d STRC(5868)  r     1 ICB                        0-0-0/w STRC(1116)  r     1 IN_SN
     0-0-0/w SBIN        r     1 M$EI#


   Procedure VPF$CLOSE_IN requires 30 words for executable code.
   Procedure VPF$CLOSE_IN requires 10 words of local(AUTO) storage.
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:50   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:51   
          MINI XREF LISTING

BREAK_LOC
      5227**DCL      5227--REDEF
CLOSE_STATUS
      7010**DCL         6--PROC
DEF_ICB.FID.STRING
      5825**DCL      5826--REDEF
DEV_ICB.FID.STRING
      5711**DCL      5712--REDEF
EI_KEY.KEY
      5923**DCL      5923--REDEF    5923--REDEF    5923--REDEF
EO_OCB.TYPE
      5423**DCL      5424--REDEF
FPT_CLOSE_EI
      6764**DCL      7227<>CALL
FPT_CLOSE_EI.SN_
      6764**DCL      6764--REDEF
FPT_CLOSE_EI.UTL_
      6765**DCL      6765--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6779**DCL      6779--REDEF
FPT_CLOSE_EI.V.TYPE#
      6777**DCL      6777--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6774**DCL      6774--REDEF    6776--REDEF
FPT_CLOSE_PTL.SN_
      6890**DCL      6890--REDEF
FPT_CLOSE_PTL.UTL_
      6891**DCL      6891--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6905**DCL      6905--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6903**DCL      6903--REDEF
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:52   
FPT_CLOSE_PTL.V.XTNSIZE#
      6900**DCL      6900--REDEF    6902--REDEF
FPT_CLOSE_READ.SN_
      6806**DCL      6806--REDEF
FPT_CLOSE_READ.UTL_
      6807**DCL      6807--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6821**DCL      6821--REDEF
FPT_CLOSE_READ.V.TYPE#
      6819**DCL      6819--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6816**DCL      6816--REDEF    6818--REDEF
FPT_CLOSE_SI.SN_
      6974**DCL      6974--REDEF
FPT_CLOSE_SI.UTL_
      6975**DCL      6975--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6989**DCL      6989--REDEF
FPT_CLOSE_SI.V.TYPE#
      6987**DCL      6987--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6984**DCL      6984--REDEF    6986--REDEF
FPT_CLOSE_STD.SN_
      6932**DCL      6932--REDEF
FPT_CLOSE_STD.UTL_
      6933**DCL      6933--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6947**DCL      6947--REDEF
FPT_CLOSE_STD.V.TYPE#
      6945**DCL      6945--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6942**DCL      6942--REDEF    6944--REDEF
FPT_CLSEI_FT
      6848**DCL      7225<>CALL
FPT_CLSEI_FT.SN_
      6848**DCL      6848--REDEF
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:53   
FPT_CLSEI_FT.UTL_
      6849**DCL      6849--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6863**DCL      6863--REDEF
FPT_CLSEI_FT.V.TYPE#
      6861**DCL      6861--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6858**DCL      6858--REDEF    6860--REDEF
FPT_OPEN_EI.ACSVEH_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.ALTKEYS_
      6425**DCL      6426--REDEF    6426--REDEF
FPT_OPEN_EI.HDR_
      6424**DCL      6425--REDEF
FPT_OPEN_EI.TAB_
      6423**DCL      6424--REDEF
FPT_OPEN_EI.UHL_
      6417**DCL      6418--REDEF    6418--REDEF
FPT_OPEN_EI.V.FSN#
      6457**DCL      6457--REDEF    6457--REDEF
FPT_OPEN_EI.WSN_
      6423**DCL      6423--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6534**DCL      6535--REDEF    6535--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6533**DCL      6534--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6532**DCL      6533--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6526**DCL      6527--REDEF    6527--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6566**DCL      6566--REDEF    6566--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6532**DCL      6532--REDEF
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:54   
FPT_OPEN_OUT.ACSVEH_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6316**DCL      6317--REDEF    6317--REDEF
FPT_OPEN_OUT.HDR_
      6315**DCL      6316--REDEF
FPT_OPEN_OUT.TAB_
      6314**DCL      6315--REDEF
FPT_OPEN_OUT.UHL_
      6308**DCL      6309--REDEF    6309--REDEF
FPT_OPEN_OUT.V.FSN#
      6348**DCL      6348--REDEF    6348--REDEF
FPT_OPEN_OUT.WSN_
      6314**DCL      6314--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6207**DCL      6208--REDEF    6208--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6206**DCL      6207--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6205**DCL      6206--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6199**DCL      6200--REDEF    6200--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6239**DCL      6239--REDEF    6239--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6205**DCL      6205--REDEF
FPT_READ_STD.STATION_
      6629**DCL      6630--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6641**DCL      6641--REDEF
FPT_READ_STD.V.INDX#
      6639**DCL      6639--REDEF
FPT_READ_UC.STATION_
      6590**DCL      6591--REDEF
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:55   
FPT_READ_UC.V.DVBYTE.REREAD#
      6602**DCL      6602--REDEF
FPT_READ_UC.V.INDX#
      6600**DCL      6600--REDEF
FPT_WRITE_ME.STATION_
      6698**DCL      6698--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6705**DCL      6705--REDEF
FPT_WRITE_OUT.STATION_
      6729**DCL      6729--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6736**DCL      6736--REDEF
FPT_WRITE_UC.STATION_
      6667**DCL      6667--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6674**DCL      6674--REDEF
FROM_SN.SN
      5573**DCL      5574--REDEF
GETCMD.OUT$
      4780**DCL      4786--REDEF
ICB.FID.STRING
      5597**DCL      5598--REDEF
ICB.FLAVOR.FFTAPE
      5660**DCL      7223>>IF
ICB.FLAVOR.TAPE
      5663**DCL      7228>>IF
IFSFA_PARAM.EOMCHAR#
      5952**DCL      5953--REDEF
IFSFA_PARAM.SIG1
      5946**DCL      5946--REDEF
IFSFA_PARAM.SIG2
      5946**DCL      5947--REDEF
IN_RES
      5519**DCL      5519--REDEF
IN_SN
      5530**DCL      7230<>CALL
PL6.E3A0      #002=VPF$CLOSE_IN File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:32 Page:56   
IN_SN.SN
      5535**DCL      5536--REDEF
M$EI#
      5988**DCL      7230<>CALL
OCB.TYPE
      5281**DCL      5282--REDEF
OFSFA_PARAM.EOMCHAR#
      5982**DCL      5983--REDEF
OFSFA_PARAM.SIG1
      5976**DCL      5976--REDEF
OFSFA_PARAM.SIG2
      5976**DCL      5977--REDEF
OUT_SN.SN
      5553**DCL      5554--REDEF
RIVER_CITY
      7228**LABEL    7225--CALLALT  7227--CALLALT
SPEC_BUF
      5231**DCL      5231--REDEF
VPD$CHECK_VOL
      7036**DCL-ENT  7230--CALL
VPF$CALL_CLOSE
      7118**DCL-ENT  7225--CALL     7227--CALL

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:57   
      216        1        /*T***********************************************************/
      217        2        /*T*                                                         */
      218        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      219        4        /*T*                                                         */
      220        5        /*T***********************************************************/
      221        6        /*F* NAME: VPF$SRCLST
      222        7             PURPOSE: To process into a useable form, SOURCELIST and any associated
      223        8                      options.
      224        9        */
      225       10        VPF$GET_NEXT_SPEC: PROC(RET_VAL,SOURCELIST$);
      226       11        /*D* NAME: VPF$GET_NEXT_SPEC
      227       12             CALL: CALL VPF$GET_NEXT_SPEC(RET_VAL,SOURCELIST$);
      228       13                       where RET_VAL(SBIN WORD) will be returned
      229       14                                   0 if no errors,
      230       15                                   1 if no more SOURCELIST,
      231       16                                   2 if any errors.
      232       17                             SOURCELIST$(PTR) is a pointer to the SOURCELIST head
      233       18                                   node.
      234       19             DESCRIPTION: This procedure tries to get the next file or range spec.
      235       20                          from SOURCELIST and process the options into
      236       21                          ICB (INPUT CONTROL BLOCK). If SOURCELIST$ is specified,
      237       22                          internal variables are set to start at the beginning of
      238       23                          the referenced SOURCELIST, otherwise processing continues
      239       24                          where it last left off. If SOURCELIST$ = ADDR(NIL), the
      240       25                          default SOURCELIST of '.' is assumed. ICB.SPEC_TYPE will be
      241       26                          set as below:
      242       27                              VALUE         DESCRIPTION
      243       28                              -----         -----------
      244       29                                1           single FID reference
      245       30                                2           full range of directory device
      246       31                                3           sub range of directory device
      247       32                                4           wildcard of type ?ABC
      248       33                                5           wildcard of type ABC?
      249       34                                6           (unused/undefined)
      250       35                                7           single FSN reference
      251       36                                8           FSN range reference
      252       37                          All necessary information will be returned in ICB and
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:58   
      253       38                          the M$FID returned fields.
      254       39                          RET_VAL will be returned as below:
      255       40                              VALUE         DESCRIPTION
      256       41                              -----         -----------
      257       42                                0           All fine. A spec is returned.
      258       43                                1           No more SOURCELIST to process.
      259       44                                2           Error.
      260       45        */
      261       46        /**/
      262       47        /*  PARAMETERS  */
      263       48        /**/
      264       49    1   DCL RET_VAL SBIN WORD;
      265       50    1   DCL SOURCELIST$ PTR;
      266       51        /**/
      267       52        /*  INCLUDE FILES  */
      268       53        /**/
      269       54        %INCLUDE B$JIT;
      270      344        %INCLUDE VP_DATA_R;
      271     7331        /**/
      272     7332        /*  LOCAL STATIC  */
      273     7333        /**/
      274     7334    1   DCL SL$ PTR STATIC;
      275     7335    1   DCL SL_IDX SBIN WORD STATIC;
      276     7336    1   DCL NL$ PTR STATIC;
      277     7337    1   DCL NL_IDX SBIN WORD STATIC;
      278     7338        %VLR_FID(FPTN = RESULTS_FID_END,STCLASS = STATIC);
      279     7357        %FPT_FID(FPTN = FPT_FID_END,
      280     7358                 NAME = END_NAME,
      281     7359                 ACCT = END_DUMMY,
      282     7360                 PASS = END_DUMMY,
      283     7361                 SN   = END_DUMMY,
      284     7362                 WSN  = END_DUMMY,
      285     7363                 ASN  = END_DUMMY,
      286     7364                 RES  = END_DUMMY,
      287     7365                 RESULTS = RESULTS_FID_END,
      288     7366                 STCLASS = STATIC);
      289     7389    1   DCL 1 END_NAME STATIC,
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:59   
      290     7390    1         2 LEN UBIN BYTE UNAL,
      291     7391    1         2 STRING CHAR(31);
      292     7392    1   DCL END_DUMMY CHAR(10) STATIC;
      293     7393        %PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
      294     7438        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
      295     7476    1   DCL 1 TEXT$C BASED,
      296     7477    1         2 LEN UBIN BYTE UNAL,
      297     7478    1         2 STRING CHAR(TEXT$C.LEN);
      298     7479    1   DCL 1 TEXT$C_BIT BASED,
      299     7480    1         2 LEN UBIN BYTE UNAL,
      300     7481    1         2 STRING,
      301     7482    1           3 STRINGC CHAR(TEXT$C_BIT.LEN);
      302     7483    1   DCL 1 TEXT$C_ARY BASED,
      303     7484    1         2 LEN UBIN BYTE UNAL,
      304     7485    1         2 STRING(0:0) CHAR(1);
      305     7486        /**/
      306     7487        /*  LOCAL AUTO  */
      307     7488        /**/
      308     7489    1   DCL IN_OPT$ PTR;
      309     7490    1   DCL NE$ PTR;
      310     7491    1   DCL NEW_FID_LEN SBIN WORD;
      311     7492        /**/
      312     7493        /*  ENTRY DCLS  */
      313     7494        /**/
      314     7495        %VP_ENTRIES (OMIT=VPF$GET_NEXT_SPEC);
      315     7703        /**/
      316     7704    1           RET_VAL = 0;
      317     7705    1           IF ADDR(SOURCELIST$)~=ADDR(NIL)
      318     7706    1            THEN
      319     7707    2            DO;                            /* INITIALIZE TO NEW SOURCELIST       */
      320     7708    2               SINGLE_INSPEC = 0;          /* Init SINGLE INPUT SPEC to FALSE    */
      321     7709    2               SL$=SOURCELIST$;
      322     7710    2               SL_IDX=-1;
      323     7711    2               NL$=ADDR(NIL);
      324     7712    2               END;
      325     7713    1           IN_OPT$=ADDR(NIL);
      326     7714    1           IF NL$=ADDR(NIL)
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:60   
      327     7715    1            THEN
      328     7716    1              CALL NEXT_SOURCE(RET_VAL);
      329     7717    1            ELSE
      330     7718    2            DO;
      331     7719    2               NL_IDX=NL_IDX+1;
      332     7720    2               IF NL_IDX>=NL$->OUT$BLK.NSUBLKS
      333     7721    2                THEN
      334     7722    2                  CALL NEXT_SOURCE(RET_VAL);
      335     7723    2               END;
      336     7724    1           IF RET_VAL~=0
      337     7725    1            THEN                           /* We didn't get anything             */
      338     7726    1              RETURN;
      339     7727    1           ICB = DEV_ICB;
      340     7728    1           IF NL$~=ADDR(NIL)
      341     7729    1            THEN
      342     7730    2            DO;
      343     7731    2               NE$ = NL$->OUT$BLK.SUBLK$(NL_IDX);
      344     7732    2               IF NE$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE=4
      345     7733    2                THEN
      346     7734    3                DO;                        /* FID                                */
      347     7735    3                   IF (IN_ASN ~= %TAPE# AND IN_ASN ~= %FILE#)
      348     7736    3                     AND ICB.FID.LEN ~= 0
      349     7737    3                    THEN                   /* Either bad OPT or FID              */
      350     7738                                                /* since a fid exists and no device   */
      351     7739                                                /* specified                          */
      352     7740    4                    DO;
      353     7741    4                       CALL VPL$ERR_PROC(3,56,'06'O,,,,,1); /* ABORT and return  */
      354     7742        /*E* ERROR:   VPF-00056
      355     7743             MESSAGE: Bad input option encountered
      356     7744        */
      357     7745    4                       RET_VAL = 2;        /* Error return                       */
      358     7746    4                       RETURN;
      359     7747    4                       END;
      360     7748    3                   NEW_FID_LEN = ICB.FID.LEN+NE$->OUT$BLK.SUBLK$(0)->
      361     7749    3                     OUT$BLK.SUBLK$(0)->TEXT$C.LEN;
      362     7750    3                   IF NEW_FID_LEN>SIZEC(ICB.FID.STRING)
      363     7751    3                    THEN
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:61   
      364     7752    4                    DO;
      365     7753    4                       CALL VPL$ERR_PROC(3,1,'06'O,,,,,1); /* INPUT FID TOO LONG */
      366     7754        /*E* ERROR:   VPF-00001
      367     7755             MESSAGE: Input FID too long
      368     7756        */
      369     7757    4                       RET_VAL = 2;
      370     7758    4                       RETURN;
      371     7759    4                       END;
      372     7760    3                   CALL INSERT(ICB.FID.STRING,
      373     7761    3                     ICB.FID.LEN,,
      374     7762    3                     NE$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->
      375     7763    3                     TEXT$C.STRING);       /* Append the rest of the FID         */
      376     7764    3                   ICB.FID.LEN = NEW_FID_LEN;
      377     7765    3                   FPT_FID_IN.TEXTFID_   = VECTOR(ADDR(ICB.FID)->TEXT$C.STRING);
      378     7766    3                   CALL VPD$FID(FPT_FID_IN,1) ALTRET(FID_ALT_1);
      379     7767    3                   IF IN_NAME.LEN=0
      380     7768    3                    THEN
      381     7769    3                      RESULTS_FID_IN.NAME = '0'B;
      382     7770    3                   CALL ADD_FROM_INFO;
      383     7771    3                   CALL VPD$GET_IN_DEV_MASK(ICB);
      384     7772    3                   END;
      385     7773    2               IF NE$->OUT$BLK.NSUBLKS>1
      386     7774    2                THEN
      387     7775    2                  IF NE$->OUT$BLK.SUBLK$(1)->OUT$BLK.CODE=4
      388     7776    2                   THEN                    /* RANGE END                          */
      389     7777    2                     IF ICB.DEV_MASK & '300'O
      390     7778    2                      THEN                 /* IF MANAGED...                      */
      391     7779    2                        IF NE$->OUT$BLK.SUBLK$(1)->OUT$BLK.NSUBLKS=0
      392     7780    2                         THEN
      393     7781    2                           ICB.NAME_RANGE_END = BITASC('777'O);
      394     7782                                                /* AN IMPOSSIBLY HIGH-SORTING         */
      395     7783                                                /* FILENAME TO DENOTE TILL END        */
      396     7784                                                /* OF ACCOUNT.                        */
      397     7785    2                         ELSE
      398     7786    3                         DO;               /* AN ENDING FILENAME WAS GIVEN       */
      399     7787    3                            FPT_FID_END.TEXTFID_ = VECTOR(NE$->OUT$BLK.SUBLK$(1)->
      400     7788    3                              OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:62   
      401     7789    3                            CALL VPD$FID(FPT_FID_END,1) ALTRET(FID_ALT_1);
      402     7790    3                            IF RESULTS_FID_END.ACCT
      403     7791    3                              OR ~RESULTS_FID_END.NAME
      404     7792    3                              OR RESULTS_FID_END.PASS
      405     7793    3                              OR RESULTS_FID_END.WSN
      406     7794    3                              OR RESULTS_FID_END.SN
      407     7795    3                             THEN
      408     7796    4                             DO;
      409     7797    4                                CALL VPL$ERR_PROC(3,41,'06'O,,,,,1);
      410     7798        /*E*   ERROR: VPF-00041
      411     7799             MESSAGE: NAME only allowed for end of range specification
      412     7800            */
      413     7801    4                                RET_VAL = 2;
      414     7802    4                                RETURN;
      415     7803    4                                END;
      416     7804    3                             ELSE
      417     7805    3                               ICB.NAME_RANGE_END = END_NAME.STRING;
      418     7806    3                            END;
      419     7807    2                      ELSE                 /* Not managed and attempted range    */
      420     7808    3                      DO;
      421     7809    3                         CALL VPL$ERR_PROC(3,2,'06'O,,VECTOR(ICB.FID),,,1);
      422     7810        /*E* ERROR:   VPF-00002
      423     7811             MESSAGE: Device range not allowed.
      424     7812            MESSAGE1: '%U1' is not a managed resource, so a range of file
      425     7813                      names is impossible.
      426     7814        */
      427     7815                                                /* RANGE NOT ALLOWED                  */
      428     7816    3                         RET_VAL = 2;
      429     7817    3                         RETURN;
      430     7818    3                         END;
      431     7819    2               IF NE$->OUT$BLK.SUBLK$(NE$->OUT$BLK.NSUBLKS-1)->OUT$BLK.CODE=1
      432     7820    2                THEN
      433     7821    2                  IN_OPT$ = NE$->OUT$BLK.SUBLK$(NE$->OUT$BLK.NSUBLKS-1);
      434     7822    2                ELSE
      435     7823    2                  IN_OPT$ = ADDR(NIL);
      436     7824    2               END;
      437     7825    1           IF (CMD_MASK & '000600'O)       /* LIST, LISTSTD                      */
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:63   
      438     7826    1             AND NOT (ICB.DEV_MASK & '300'O) /* AND NOT MANAGED                  */
      439     7827    1            THEN
      440     7828    1              GOTO NEED_MAN;
      441     7829    1           IF (CMD_MASK & '14000'O)        /* COPYALL, COPYSTD                   */
      442     7830    1             AND NOT (ICB.DEV_MASK & '340'O) /* AND NOT ANY MANAGED OR FT        */
      443     7831    1            THEN
      444     7832    2            DO;
      445     7833    2   NEED_MAN:   ;
      446     7834    2               CALL VPL$ERR_PROC(3,3,'06'O,,VECTOR(ICB.FID),,,1);
              7834                        /* INPUT MUST BE MANAGED */
      447     7835        /*E* ERROR:   VPF-00003
      448     7836             MESSAGE: '%U1' is not a file
      449     7837        */
      450     7838    2               RET_VAL=2;
      451     7839    2               RETURN;
      452     7840    2               END;
      453     7841    1           IF (CMD_MASK & '012140002'O)    /* DELETE, DELETESTD,                 */
      454     7842                                                /* REVIEW, REVIEWSTD, OR MODIFY       */
      455     7843    1             AND NOT (ICB.DEV_MASK.MAN_DISC) /* AND NOT DISK FILE                */
      456     7844    1            THEN
      457     7845    2            DO;
      458     7846    2               CALL VPL$ERR_PROC(3,4,'06'O,,,,,1); /* INPUT MUST BE FROM DISK    */
      459     7847        /*E* ERROR:   VPF-00004
      460     7848             MESSAGE: Input must be from disk
      461     7849        */
      462     7850    2               RET_VAL = 2;
      463     7851    2               RETURN;
      464     7852    2               END;
      465     7853    1           IF RESULTS_FID_IN.NAME
      466     7854    1            THEN
      467     7855    1              ICB.FSN = '0'B;              /* INVALIDATE DEVICE FSN OPTION       */
      468     7856                                                /* IF THIS COMPLETE FID IS NAMED      */
      469     7857    1           IF IN_OPT$~=ADDR(NIL)
      470     7858    1            THEN
      471     7859    2            DO;
      472     7860    2               CALL VERIFY_STUFF_IN_OPTS(RET_VAL,1);
      473     7861    2               IF RET_VAL~=0
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:64   
      474     7862    2                THEN
      475     7863    2                  RETURN;
      476     7864    2               END;
      477     7865    1           CALL SET_SPEC_TYPE(RET_VAL);
      478     7866    2           IF ICB.CREATOR_SEL = 0 THEN DO;
      479     7867    2               ICB.CREATOR_SEL = DEF_ICB.CREATOR_SEL;
      480     7868    2               ICB.CREATOR_NEG = DEF_ICB.CREATOR_NEG;
      481     7869    2               ICB.CREATOR = DEF_ICB.CREATOR;
      482     7870    2               END;
      483     7871    2           IF ICB.SRCHCOND = '0'B THEN DO;
      484     7872    2               ICB.SRCHCOND = DEF_ICB.SRCHCOND;
      485     7873    2               END;
      486     7874    2           IF ICB.DATE.TYPE = 0 THEN DO;
      487     7875    2               ICB.DATE = DEF_ICB.DATE;
      488     7876    2               END;
      489     7877    2           IF ICB.SORTING_ORDER.COUNT = 0 THEN DO;
      490     7878    2               ICB.SORTING_ORDER = DEF_ICB.SORTING_ORDER;
      491     7879    2               END;
      492     7880    2           IF ICB.TYPE.COUNT = 0 THEN DO;
      493     7881    2               ICB.TYPE = DEF_ICB.TYPE;
      494     7882    2               END;
      495     7883    2           IF ICB.ORG = '0'B THEN DO;
      496     7884    2               ICB.ORG_NEG = DEF_ICB.ORG_NEG;
      497     7885    2               ICB.ORG = DEF_ICB.ORG;
      498     7886    2               END;
      499     7887    2           IF ICB.A_EA_C = 0 THEN DO;
      500     7888    2               ICB.A_EA_C = DEF_ICB.A_EA_C;
      501     7889    2               END;
      502     7890    2           IF ICB.COLS = 0 THEN DO;
      503     7891    2               ICB.COLS = DEF_ICB.COLS;
      504     7892    2               END;
      505     7893    1           IF ICB.FFID = '0'B THEN
      506     7894    1              ICB.FFID = DEF_ICB.FFID;
      507     7895    1           IF RESULTS_FID_IN.RES AND IN_RES = 'DP' AND /* If DP                  */
      508     7896    1             ~RESULTS_FID_IN.NAME AND      /* and no name                        */
      509     7897    1             NOT (ICB.SPEC_TYPE=4 OR ICB.SPEC_TYPE=5) AND /* but wildcard is ok  */
      510     7898    1             ~RESULTS_FID_IN.ACCT THEN     /* nor account                        */
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:65   
      511     7899    1              CALL VPL$ERR_PROC(3,75,'06'O); /* then complain                    */
      512     7900        /*E* ERROR:   VPF-00075
      513     7901             MESSAGE: Filename needed
      514     7902        */
      515     7903    1           IF ICB.PHYSICAL=1 AND ICB.SPEC_TYPE~=3
      516     7904    2            THEN DO;
      517     7905    2               CALL VPL$ERR_PROC(3,46,'06'O,,,,,1);
      518     7906        /*E*   ERROR: VPF-00046
      519     7907             MESSAGE: PHYSICAL option allowed for LT name range only
      520     7908        */
      521     7909    2               RET_VAL = 2;
      522     7910    2               END;
      523     7911    1           RETURN;
      524     7912        /**/
      525     7913    1   FID_ALT_1: ;
      526     7914    1           RET_VAL = 2;
      527     7915    1           RETURN;
      528     7916        %EJECT;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:66   
      529     7917    1   ADD_FROM_INFO: PROC;
      530     7918        /*I* NAME: ADD_FROM_INFO
      531     7919             PURPOSE: To merge the FROM information into the current fid spec.
      532     7920             CALL: CALL ADD_FROM_INFO;
      533     7921             DESCRIPTION: This procedure is used to merge the previously processed
      534     7922                          FROM information into the current fid spec to make the
      535     7923                          usable fid spec.
      536     7924        */
      537     7925    2           IF RESULTS_FID_FROM             /* If FROM FID exists                 */
      538     7926    2             AND NOT THIS_STD_FILE         /* AND NOT the STD file               */
      539     7927    3            THEN DO;
      540     7928    3               IF RESULTS_FID_IN.RES='0'B
      541     7929    3                THEN
      542     7930    4                DO;
      543     7931    4                   IN_ASN = FROM_ASN;
      544     7932    4                   IN_RES = FROM_RES;
      545     7933    4                   IN_SN = FROM_SN;
      546     7934    4                   RESULTS_FID_IN.RES = RESULTS_FID_FROM.RES;
      547     7935    4                   RESULTS_FID_IN.SN = RESULTS_FID_FROM.SN;
      548     7936    4                   END;
      549     7937    3               IF RESULTS_FID_IN.NAME='0'B
      550     7938    3                THEN
      551     7939    4                DO;
      552     7940    4                   IN_NAME = FROM_NAME;
      553     7941    4                   RESULTS_FID_IN.NAME = RESULTS_FID_FROM.NAME;
      554     7942    4                   END;
      555     7943    3               IF RESULTS_FID_IN.ACCT='0'B
      556     7944    3                THEN
      557     7945    4                DO;
      558     7946    4                   IN_ACCT = FROM_ACCT;
      559     7947    4                   RESULTS_FID_IN.ACCT = RESULTS_FID_FROM.ACCT;
      560     7948    4                   END;
      561     7949    3               IF RESULTS_FID_IN.PASS='0'B
      562     7950    3                THEN
      563     7951    4                DO;
      564     7952    4                   IN_PASS = FROM_PASS;
      565     7953    4                   RESULTS_FID_IN.PASS = RESULTS_FID_FROM.PASS;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:67   
      566     7954    4                   END;
      567     7955    3               IF RESULTS_FID_IN.WSN='0'B
      568     7956    3                THEN
      569     7957    4                DO;
      570     7958    4                   IN_WSN = FROM_WSN;
      571     7959    4                   RESULTS_FID_IN.WSN = RESULTS_FID_FROM.WSN;
      572     7960    4                   END;
      573     7961    3               END;
      574     7962    2           RETURN;
      575     7963    2   END ADD_FROM_INFO;
      576     7964        %EJECT;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:68   
      577     7965    1   NEXT_SOURCE: PROC(RET_VAL);
      578     7966        /*I* NAME: NEXT_SOURCE
      579     7967             PURPOSE: To initialize processing of the next SOURCE of SOURCELIST.
      580     7968             CALL: CALL NEXT_SOURCE(RET_VAL);
      581     7969             DESCRIPTION: This procedure processes the next SOURCE of SOURCELIST
      582     7970                          if one exists. If SL$ = ADDR(NIL), this proc works as if
      583     7971                          SOURCELIST = '.'. If it is a SOURCE_1_N node, NL$ is set
      584     7972                          to reflect this and DEV_ICB is cleared. If it is a
      585     7973                          SOURCE_2_N node, the device portion of the FID ( this may
      586     7974                          be the entire FID) is formed and fed to M$FID. NL$ is set
      587     7975                          to point to the head node of any N.A.P and options nodes.
      588     7976                          If device options exist, they are processed into DEV_ICB
      589     7977                          and verified. If these device options occur for a node
      590     7978                          that has no following N.A.P nodes, the options are not
      591     7979                          processed, they are pointed to by IN_OPT$ which is
      592     7980                          then returned. In any case, the results from M$FID will
      593     7981                          be meaningful assuming no errors occurred.
      594     7982                          RET_VAL will be returned as below:
      595     7983                            RET_VAL           DESCRIPTION
      596     7984                            -------           -----------
      597     7985                               0              All fine.
      598     7986                               1              No more SOURCE elements.
      599     7987                               2              Error.
      600     7988        */
      601     7989    2   DCL RET_VAL SBIN WORD;
      602     7990    2   DCL S12$ PTR;
      603     7991    2   DCL CODE SBIN WORD;
      604     7992    2   DCL DOT_LIT CHAR(1) CONSTANT INIT('.'); /* Text for default SOURCELIST        */
      605     7993    2           RET_VAL = 0;
      606     7994    2           NL$ = ADDR(NIL);
      607     7995    2           NL_IDX = 0;
      608     7996    2           SL_IDX = SL_IDX+1;
      609     7997    2           DEV_ICB = '0'B;
      610     7998    2           DEV_ICB.NAME_RANGE_END = ' ';
      611     7999    2           IF SL$=ADDR(NIL)
      612     8000    2            THEN                           /* Default SOURCELIST of '.'          */
      613     8001    2              IF SL_IDX>0
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:69   
      614     8002    2               THEN
      615     8003    3               DO;                         /* SECOND TIME THROUGH FOR            */
      616     8004    3                  RET_VAL = 1;             /* DEFAULT SOURCELIST...              */
      617     8005    3                  RETURN;
      618     8006    3                  END;
      619     8007    2               ELSE
      620     8008    3               DO;                         /* FIRST TIME THROUGH FOR             */
      621     8009                                                /* DEFAULT SOURCELIST...              */
      622     8010    3                  SINGLE_INSPEC = 1;       /* INDICATE A SINGLE INPUT SPEC       */
      623     8011    3                  FPT_FID_IN.TEXTFID_ = VECTOR(DOT_LIT);
      624     8012    3                  GOTO CALL_FID;
      625     8013    3                  END;
      626     8014    2            ELSE                           /* Not default SOURCELIST             */
      627     8015    2              IF SL_IDX>=SL$->OUT$BLK.NSUBLKS
      628     8016    2               THEN
      629     8017    3               DO;
      630     8018    3                  RET_VAL = 1;             /* NO MORE SOURCELIST                 */
      631     8019    3                  RETURN;
      632     8020    3                  END;
      633     8021    2           S12$ = SL$->OUT$BLK.SUBLK$(SL_IDX);
      634     8022    2           IF S12$->OUT$BLK.CODE=1
      635     8023    2            THEN
      636     8024    3            DO;                            /* SOURCE_1                           */
      637     8025    3               NL$ = S12$;
      638     8026    3               IF SL$->OUT$BLK.NSUBLKS=1
      639     8027    3                THEN
      640     8028    3                  SINGLE_INSPEC = 1;       /* INDICATE SINGLE INPUT SPEC         */
      641     8029    3               RETURN;
      642     8030    3               END;
      643     8031                                                /* MUST BE SOURCE_2                   */
      644     8032    2           DEV_ICB.FID = S12$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->TEXT$C;
      645     8033    2           IF DEV_ICB.FID.LEN>=SIZEC(DEV_ICB.FID.STRING)
      646     8034    2            THEN
      647     8035    3            DO;
      648     8036    3               CALL VPL$ERR_PROC(3,1,'06'O,,,,,1); /* INPUT FID TOO LONG         */
      649     8037    3               RET_VAL = 2;
      650     8038    3               RETURN;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:70   
      651     8039    3               END;
      652     8040    2           CODE = 0;
      653     8041    2           IF S12$->OUT$BLK.NSUBLKS>1
      654     8042    2            THEN
      655     8043    2              CODE = S12$->OUT$BLK.SUBLK$(1)->OUT$BLK.CODE;
      656     8044    2           IF CODE=1
      657     8045    2            THEN
      658     8046    3            DO;                            /* INPUT OPTIONS SPECIFIED            */
      659     8047    3               IN_OPT$ = S12$->OUT$BLK.SUBLK$(1);
      660     8048    3               IF S12$->OUT$BLK.NSUBLKS>2
      661     8049    3                THEN
      662     8050    3                  CODE = S12$->OUT$BLK.SUBLK$(2)->OUT$BLK.CODE;
      663     8051    3               END;
      664     8052    2           IF CODE=2
      665     8053    2            THEN
      666     8054    3            DO;                            /* SLASH SPECIFIED                    */
      667     8055    3               DEV_ICB.FID.STR_ARY(DEV_ICB.FID.LEN)= '/';
      668     8056    3               DEV_ICB.FID.LEN = DEV_ICB.FID.LEN+1;
      669     8057    3               END;
      670     8058    2           IF S12$->OUT$BLK.SUBLK$(S12$->OUT$BLK.NSUBLKS-1)->OUT$BLK.CODE=3
      671     8059    2            THEN
      672     8060    3            DO;
      673     8061    3               NL$ = S12$->OUT$BLK.SUBLK$(S12$->OUT$BLK.NSUBLKS-1);
      674     8062    3               IF NL$->OUT$BLK.NSUBLKS=1 AND SL$->OUT$BLK.NSUBLKS=1
      675     8063    3                THEN
      676     8064    3                  SINGLE_INSPEC = 1;       /* INDICATE SINGLE INPUT SPEC         */
      677     8065    3               END;
      678     8066    2            ELSE
      679     8067    2              IF SL$->OUT$BLK.NSUBLKS=1
      680     8068    2               THEN
      681     8069    2                 SINGLE_INSPEC = 1;        /* INDICATES SINGLE INPUT SPEC        */
      682     8070    2           FPT_FID_IN.TEXTFID_   = VECTOR(ADDR(DEV_ICB.FID)->TEXT$C.STRING);
      683     8071    2   CALL_FID: CALL VPD$FID(FPT_FID_IN,1) ALTRET(FID_ALT_2);
      684     8072    2           IF IN_NAME.LEN=0
      685     8073    2            THEN
      686     8074    2              RESULTS_FID_IN.NAME = '0'B;
      687     8075    2           IF SL$ = ADDR(NIL)
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:71   
      688     8076    2            THEN                           /* The default SOURCELIST was used    */
      689     8077    2              RESULTS_FID_IN.ACCT = '0'B;
      690     8078    2           CALL VPD$GET_IN_DEV_MASK(DEV_ICB);
      691     8079    2           IF NL$~=ADDR(NIL)               /* NAP LIST SPECIFIED?                */
      692     8080    2            THEN
      693     8081    3            DO;                            /* YES...CHECK FID PARTS              */
      694     8082    3               IF RESULTS_FID_IN.NAME OR RESULTS_FID_IN.ACCT OR
      695     8083    3                 RESULTS_FID_IN.PASS OR RESULTS_FID_IN.WSN
      696     8084    3                THEN
      697     8085    4                DO;
      698     8086                       /* Name, Address, Pass not allowed on DEVICE SPEC (or bad opt  */
      699     8087    4                   CALL VPL$ERR_PROC(3,7,'06'O,,VECTOR(DEV_ICB.FID),
      700     8088    4                     VECTOR(NL$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0)
      701     8089    4                     -> OUT$BLK.SUBLK$(0) -> TEXT$C),,1);
      702     8090        /*E* ERROR:   VPF-00007
      703     8091             MESSAGE: Bad device spec %(%U1) %or input option %(%U2...etc)%
      704     8092            MESSAGE1: If% %U1 was% intended as a device spec; Name, Account,
      705     8093                      and Password are illegal.  If% %U2...etc was% intended as an
      706     8094                      input option, it isn't one.
      707     8095        */
      708     8096    4                   RET_VAL = 2;
      709     8097    4                   RETURN;
      710     8098    4                   END;
      711     8099    3               IF IN_OPT$~=ADDR(NIL)
      712     8100    3                THEN
      713     8101    3                  CALL VERIFY_STUFF_IN_OPTS(RET_VAL,0);
      714     8102    3               END;
      715     8103    2           CALL ADD_FROM_INFO;
      716     8104    2           RETURN;
      717     8105        /**/
      718     8106    2   FID_ALT_2: ;
      719     8107    2           RET_VAL = 2;
      720     8108    2           RETURN;
      721     8109    2   END NEXT_SOURCE;
      722     8110        %EJECT;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:72   
      723     8111    1   SET_SPEC_TYPE: PROC(RET_VAL);
      724     8112        /*I* NAME: SET_SPEC_TYPE
      725     8113             PURPOSE: To set the input specification type variable, ICB.SPEC_TYPE,
      726     8114                      to a meaningful value.
      727     8115             CALL: CALL SET_SPEC_TYPE(RET_VAL);
      728     8116             DESCRIPTION: This procedure sets ICB.SPEC_TYPE to one of the following
      729     8117                          values:
      730     8118                              VALUE         DESCRIPTION
      731     8119                              -----         -----------
      732     8120                                1           single FID reference
      733     8121                                2           full range of directory device
      734     8122                                3           sub range of directory device
      735     8123                                4           wildcard of type ?something
      736     8124                                5           wildcard without initial '?'
      737     8125                                6           (undefined)
      738     8126                                7           single FSN reference
      739     8127                                8           FSN range reference
      740     8128                          If a wildcard spec. is returned, RESULTS_FID_IN.NAME
      741     8129                          will have been set to '0'B.
      742     8130                          If any errors are detected, RET_VAL is set to 2.
      743     8131        */
      744     8132    2   DCL RET_VAL SBIN WORD;
      745     8133    2   DCL I SBIN WORD;
      746     8134    2           IF CMD_MASK(2)                  /* If COPYALL                         */
      747     8135    2             AND ICB.DEV_MASK.DEV_TAPE     /* of FT                              */
      748     8136    2             AND ICB.FSN = '0'O            /* and FSN not specified              */
      749     8137    2            THEN
      750     8138    3            DO;
      751     8139    3               ICB.FSN.START = 1;          /* START at 1                         */
      752     8140    3               ICB.FSN.FINISH = BITBIN('777777'O); /* and dont stop              */
      753     8141    3               END;
      754     8142    2           IF ICB.DEV_MASK & '300'O        /* MANAGED TAPE OR FILE               */
      755     8143    2            THEN
      756     8144    2              IF ICB.NAME_RANGE_END ~= ' '
      757     8145    2               THEN
      758     8146    2                 ICB.SPEC_TYPE = 3;        /* SUB-RANGE                          */
      759     8147    2               ELSE
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:73   
      760     8148    2                 IF RESULTS_FID_IN.NAME
      761     8149    2                  THEN                     /* A name was found                   */
      762     8150    3                  DO;
      763     8151    3                     IF RESULTS_FID_IN.TYPE.NAME ~= %UMF$SIMPLE_STRING#
      764     8152    3                      THEN                 /* NAME was quoted or in octal        */
      765     8153    3                        ICB.SPEC_TYPE = 1; /* Do not check for wildness          */
      766     8154    3                      ELSE
      767     8155    4                      DO;
      768     8156    4                         CALL VPD$ANAL_NAME(IN_NAME,ICB.SPEC_TYPE);
      769     8157    5                         DO CASE(ICB.SPEC_TYPE);
      770     8158    5                          CASE(4,5);       /* WILDCARD                           */
      771     8159    5                            RESULTS_FID_IN.NAME = '0'B;
      772     8160    5                          END;             /* END CASE                           */
      773     8161    4                         END;
      774     8162    3                     END;
      775     8163    2                  ELSE                     /* Name not provided                  */
      776     8164    2                    ICB.SPEC_TYPE = 2;     /* FULL RANGE                         */
      777     8165    2            ELSE                           /* Not file or managed tape           */
      778     8166    2              ICB.SPEC_TYPE = 1;           /* SINGLE FILE SPEC                   */
      779     8167    2           IF ICB.FSN.START>0              /* FSN's OVERRIDE OTHER TYPES         */
      780     8168    2            THEN
      781     8169    2              IF ICB.FSN.FINISH>0
      782     8170    2               THEN
      783     8171    2                 ICB.SPEC_TYPE = 8;        /* FSN RANGE                          */
      784     8172    2               ELSE
      785     8173    2                 ICB.SPEC_TYPE = 7;        /* SINGLE FSN                         */
      786     8174    2   END SET_SPEC_TYPE;
      787     8175        %EJECT;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:74   
      788     8176    1   VERIFY_STUFF_IN_OPTS: PROC(RET_VAL,DEV_OR_FID);
      789     8177        /*I* NAME: VERIFY_STUFF_IN_OPTS
      790     8178             PURPOSE: To validate and store into ICB (Input Control Block) or
      791     8179                      DEV_ICB (DEVice ICB) the input options.
      792     8180             CALL: CALL VERIFY_STUFF_IN_OPTS(RET_VAL,DEV_OR_FID);
      793     8181             DESCRIPTION: This procedure drives the processing of the input options.
      794     8182                          If DEV_OR_FID=0 meaning this is a device options list,
      795     8183                          DEV_ICB is copied to and finally back from ICB since
      796     8184                          PROCESS_INPUT_OPT only fills ICB. REC_SEL_CNT is used
      797     8185                          to facilitate correct overwriting of ICB.REC_SEL for
      798     8186                          occasions where a fid options list updates a device
      799     8187                          options list. RET_VAL is set to 2 by PROCESS_INPUT_OPT if
      800     8188                          any option was in error.
      801     8189        */
      802     8190    2   DCL RET_VAL SBIN WORD;
      803     8191    2   DCL DEV_OR_FID SBIN WORD;
      804     8192    2   DCL OPT_IDX SBIN WORD;
      805     8193    2           CON_DUP_TBL = '0'B;
      806     8194    2           REC_SEL_CNT = 0;                /* USED TO HOLD NUMBER OF             */
      807     8195                                                /* ELEMENTS IN REC_SEL TABLE.         */
      808     8196                                                /* IF ON COMPLETION, IT IS>0,         */
      809     8197                                                /* THEN IT IS MOVED TO                */
      810     8198                                                /* ICB.REC_SEL.CNT INSURING           */
      811     8199                                                /* OVERWRITING OF REC_SEL FIELD       */
      812     8200                                                /* ONLY IF NECESSARY. IT LEAVES       */
      813     8201                                                /* DEVICE OPTIONS INTACT              */
      814     8202                                                /* OTHERWISE.                         */
      815     8203    2           IF DEV_OR_FID=0                 /* If device options exist...         */
      816     8204    2            THEN
      817     8205    2              ICB = DEV_ICB;               /* WILL BE COPIED BACK LATER.         */
      818     8206    2           OPT_IDX = 0;
      819     8207    3           DO WHILE(OPT_IDX<IN_OPT$->OUT$BLK.NSUBLKS);
      820     8208    3              CALL VPF$PROCESS_INPUT_OPT(IN_OPT$->OUT$BLK.SUBLK$(OPT_IDX))
      821     8209    4               WHENALTRETURN DO;
      822     8210    4                  RET_VAL=2;
      823     8211    4                  END;
      824     8212    3              OPT_IDX = OPT_IDX+1;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:75   
      825     8213    3              END;
      826     8214    2           IF REC_SEL_CNT>0
      827     8215    2            THEN
      828     8216    2              ICB.REC_SEL.CNT = REC_SEL_CNT;
      829     8217    2           IF DEV_OR_FID=0                 /* IF DEVICE OPTIONS...               */
      830     8218    2            THEN
      831     8219    2              DEV_ICB = ICB;               /* Copy the original back.            */
      832     8220        %EJECT;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:76   
      833     8221    2   END VERIFY_STUFF_IN_OPTS;
      834     8222    1   END VPF$GET_NEXT_SPEC;
      835     8223        %EOD;

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:77   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$GET_NEXT_SPEC.

   Procedure VPF$GET_NEXT_SPEC requires 841 words for executable code.
   Procedure VPF$GET_NEXT_SPEC requires 28 words of local(AUTO) storage.

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:78   

 Object Unit name= VPF$GET_NEXT_SPEC                          File name= VPF$SRCLST.:E05TOU
 UTS= JUL 30 '97 07:34:33.44 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none    49     61  VPF$GET_NEXT_SPEC
   11  RoData even  UTS      3      3  VPF$GET_NEXT_SPEC
   12   Proc  even  none   841   1511  VPF$GET_NEXT_SPEC
   13  RoData even  none    55     67  VPF$GET_NEXT_SPEC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        2  VPF$GET_NEXT_SPEC
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:79   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       8 VPL$ERR_PROC
 yes     yes           Std       2 VPD$FID
         yes           Std       1 VPD$GET_IN_DEV_MASK
         yes           Std       2 VPD$ANAL_NAME
 yes     yes           Std       1 VPF$PROCESS_INPUT_OPT
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CON_DUP_TBL                           REC_SEL_CNT
     THIS_STD_FILE                         BREAK_LOC                             BREAK_MESSAGE_REPORTER
     CMD_MASK                              SPEC_BUF                              SINGLE_INSPEC
     IN_NAME                               IN_ACCT                               IN_PASS
     IN_RES                                IN_SN                                 IN_WSN
     IN_ASN                                FROM_NAME                             FROM_ACCT
     FROM_PASS                             FROM_RES                              FROM_SN
     FROM_WSN                              FROM_ASN                              ICB
     DEV_ICB                               DEF_ICB                               M$EI
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1                               B$JIT$
     FPT_FID_IN                            RESULTS_FID_IN                        RESULTS_FID_FROM
     B_VECTNIL
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:80   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:81   


      216        1        /*T***********************************************************/
      217        2        /*T*                                                         */
      218        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      219        4        /*T*                                                         */
      220        5        /*T***********************************************************/
      221        6        /*F* NAME: VPF$SRCLST
      222        7             PURPOSE: To process into a useable form, SOURCELIST and any associated
      223        8                      options.
      224        9        */
      225       10        VPF$GET_NEXT_SPEC: PROC(RET_VAL,SOURCELIST$);

     10 12 000000   000000 700200 xent  VPF$GET_NEX* TSX0  ! X66_AUTO_2
        12 000001   000034 000002                    ZERO    28,2

      226       11        /*D* NAME: VPF$GET_NEXT_SPEC
      227       12             CALL: CALL VPF$GET_NEXT_SPEC(RET_VAL,SOURCELIST$);
      228       13                       where RET_VAL(SBIN WORD) will be returned
      229       14                                   0 if no errors,
      230       15                                   1 if no more SOURCELIST,
      231       16                                   2 if any errors.
      232       17                             SOURCELIST$(PTR) is a pointer to the SOURCELIST head
      233       18                                   node.
      234       19             DESCRIPTION: This procedure tries to get the next file or range spec.
      235       20                          from SOURCELIST and process the options into
      236       21                          ICB (INPUT CONTROL BLOCK). If SOURCELIST$ is specified,
      237       22                          internal variables are set to start at the beginning of
      238       23                          the referenced SOURCELIST, otherwise processing continues
      239       24                          where it last left off. If SOURCELIST$ = ADDR(NIL), the
      240       25                          default SOURCELIST of '.' is assumed. ICB.SPEC_TYPE will be
      241       26                          set as below:
      242       27                              VALUE         DESCRIPTION
      243       28                              -----         -----------
      244       29                                1           single FID reference
      245       30                                2           full range of directory device
      246       31                                3           sub range of directory device
      247       32                                4           wildcard of type ?ABC
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:82   
      248       33                                5           wildcard of type ABC?
      249       34                                6           (unused/undefined)
      250       35                                7           single FSN reference
      251       36                                8           FSN range reference
      252       37                          All necessary information will be returned in ICB and
      253       38                          the M$FID returned fields.
      254       39                          RET_VAL will be returned as below:
      255       40                              VALUE         DESCRIPTION
      256       41                              -----         -----------
      257       42                                0           All fine. A spec is returned.
      258       43                                1           No more SOURCELIST to process.
      259       44                                2           Error.
      260       45        */
      261       46        /**/
      262       47        /*  PARAMETERS  */
      263       48        /**/
      264       49    1   DCL RET_VAL SBIN WORD;
      265       50    1   DCL SOURCELIST$ PTR;
      266       51        /**/
      267       52        /*  INCLUDE FILES  */
      268       53        /**/
      269       54        %INCLUDE B$JIT;
      270      344        %INCLUDE VP_DATA_R;
      271     7331        /**/
      272     7332        /*  LOCAL STATIC  */
      273     7333        /**/
      274     7334    1   DCL SL$ PTR STATIC;
      275     7335    1   DCL SL_IDX SBIN WORD STATIC;
      276     7336    1   DCL NL$ PTR STATIC;
      277     7337    1   DCL NL_IDX SBIN WORD STATIC;
      278     7338        %VLR_FID(FPTN = RESULTS_FID_END,STCLASS = STATIC);
      279     7357        %FPT_FID(FPTN = FPT_FID_END,
      280     7358                 NAME = END_NAME,
      281     7359                 ACCT = END_DUMMY,
      282     7360                 PASS = END_DUMMY,
      283     7361                 SN   = END_DUMMY,
      284     7362                 WSN  = END_DUMMY,
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:83   
      285     7363                 ASN  = END_DUMMY,
      286     7364                 RES  = END_DUMMY,
      287     7365                 RESULTS = RESULTS_FID_END,
      288     7366                 STCLASS = STATIC);
      289     7389    1   DCL 1 END_NAME STATIC,
      290     7390    1         2 LEN UBIN BYTE UNAL,
      291     7391    1         2 STRING CHAR(31);
      292     7392    1   DCL END_DUMMY CHAR(10) STATIC;
      293     7393        %PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
      294     7438        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
      295     7476    1   DCL 1 TEXT$C BASED,
      296     7477    1         2 LEN UBIN BYTE UNAL,
      297     7478    1         2 STRING CHAR(TEXT$C.LEN);
      298     7479    1   DCL 1 TEXT$C_BIT BASED,
      299     7480    1         2 LEN UBIN BYTE UNAL,
      300     7481    1         2 STRING,
      301     7482    1           3 STRINGC CHAR(TEXT$C_BIT.LEN);
      302     7483    1   DCL 1 TEXT$C_ARY BASED,
      303     7484    1         2 LEN UBIN BYTE UNAL,
      304     7485    1         2 STRING(0:0) CHAR(1);
      305     7486        /**/
      306     7487        /*  LOCAL AUTO  */
      307     7488        /**/
      308     7489    1   DCL IN_OPT$ PTR;
      309     7490    1   DCL NE$ PTR;
      310     7491    1   DCL NEW_FID_LEN SBIN WORD;
      311     7492        /**/
      312     7493        /*  ENTRY DCLS  */
      313     7494        /**/
      314     7495        %VP_ENTRIES (OMIT=VPF$GET_NEXT_SPEC);
      315     7703        /**/
      316     7704    1           RET_VAL = 0;

   7704 12 000002   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000003   000000 450100                    STZ     0,,PR0

      317     7705    1           IF ADDR(SOURCELIST$)~=ADDR(NIL)
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:84   

   7705 12 000004   200004 236100                    LDQ     @SOURCELIST$,,AUTO
        12 000005   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 000006   000017 600000 12                 TZE     s:7713

      318     7706    1            THEN
      319     7707    2            DO;                            /* INITIALIZE TO NEW SOURCELIST       */

      320     7708    2               SINGLE_INSPEC = 0;          /* Init SINGLE INPUT SPEC to FALSE    */

   7708 12 000007   000000 450000 xsym               STZ     SINGLE_INSPEC

      321     7709    2               SL$=SOURCELIST$;

   7709 12 000010   200004 471500                    LDP1    @SOURCELIST$,,AUTO
        12 000011   100000 236100                    LDQ     0,,PR1
        12 000012   000000 756000 10                 STQ     SL$

      322     7710    2               SL_IDX=-1;

   7710 12 000013   000001 335007                    LCA     1,DL
        12 000014   000001 755000 10                 STA     SL_IDX

      323     7711    2               NL$=ADDR(NIL);

   7711 12 000015   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000016   000002 756000 10                 STQ     NL$

      324     7712    2               END;

      325     7713    1           IN_OPT$=ADDR(NIL);

   7713 12 000017   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000020   200005 756100                    STQ     IN_OPT$,,AUTO

      326     7714    1           IF NL$=ADDR(NIL)

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:85   
   7714 12 000021   000002 236000 10                 LDQ     NL$
        12 000022   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 000023   000031 601000 12                 TNZ     s:7719

      327     7715    1            THEN
      328     7716    1              CALL NEXT_SOURCE(RET_VAL);

   7716 12 000024   200003 236100                    LDQ     @RET_VAL,,AUTO
        12 000025   200011 756100                    STQ     NEW_FID_LEN+2,,AUTO
        12 000026   000773 701000 12                 TSX1    NEXT_SOURCE
        12 000027   000000 011000                    NOP     0
        12 000030   000043 710000 12                 TRA     s:7724

      329     7717    1            ELSE
      330     7718    2            DO;

      331     7719    2               NL_IDX=NL_IDX+1;

   7719 12 000031   000003 054000 10                 AOS     NL_IDX

      332     7720    2               IF NL_IDX>=NL$->OUT$BLK.NSUBLKS

   7720 12 000032   000002 471400 10                 LDP1    NL$
        12 000033   100001 236100                    LDQ     1,,PR1
        12 000034   000022 772000                    QRL     18
        12 000035   000003 116000 10                 CMPQ    NL_IDX
        12 000036   000043 605400 12                 TPNZ    s:7724

      333     7721    2                THEN
      334     7722    2                  CALL NEXT_SOURCE(RET_VAL);

   7722 12 000037   200003 236100                    LDQ     @RET_VAL,,AUTO
        12 000040   200011 756100                    STQ     NEW_FID_LEN+2,,AUTO
        12 000041   000773 701000 12                 TSX1    NEXT_SOURCE
        12 000042   000000 011000                    NOP     0

      335     7723    2               END;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:86   

      336     7724    1           IF RET_VAL~=0

   7724 12 000043   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000044   000000 235100                    LDA     0,,PR0
        12 000045   000047 600000 12                 TZE     s:7727

      337     7725    1            THEN                           /* We didn't get anything             */
      338     7726    1              RETURN;

   7726 12 000046   000000 702200 xent               TSX2  ! X66_ARET

      339     7727    1           ICB = DEV_ICB;

   7727 12 000047   000000 100400                    MLR     fill='000'O
        12 000050   000000 001214 xsym               ADSC9   DEV_ICB                  cn=0,n=652
        12 000051   000000 001214 xsym               ADSC9   ICB                      cn=0,n=652

      340     7728    1           IF NL$~=ADDR(NIL)

   7728 12 000052   000002 236000 10                 LDQ     NL$
        12 000053   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 000054   000366 600000 12                 TZE     s:7825

      341     7729    1            THEN
      342     7730    2            DO;

      343     7731    2               NE$ = NL$->OUT$BLK.SUBLK$(NL_IDX);

   7731 12 000055   000002 471400 10                 LDP1    NL$
        12 000056   000003 720000 10                 LXL0    NL_IDX
        12 000057   100003 236110                    LDQ     3,X0,PR1
        12 000060   200006 756100                    STQ     NE$,,AUTO

      344     7732    2               IF NE$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE=4

   7732 12 000061   200006 473500                    LDP3    NE$,,AUTO
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:87   
        12 000062   300003 474500                    LDP4    3,,PR3
        12 000063   400000 721100                    LXL1    0,,PR4
        12 000064   000004 101003                    CMPX1   4,DU
        12 000065   000224 601000 12                 TNZ     s:7773

      345     7733    2                THEN
      346     7734    3                DO;                        /* FID                                */

      347     7735    3                   IF (IN_ASN ~= %TAPE# AND IN_ASN ~= %FILE#)

   7735 12 000066   000000 236000 xsym               LDQ     IN_ASN
        12 000067   777000 376003                    ANQ     -512,DU
        12 000070   002000 116003                    CMPQ    1024,DU
        12 000071   000122 600000 12                 TZE     s:7748
        12 000072   001000 116003                    CMPQ    512,DU
        12 000073   000122 600000 12                 TZE     s:7748
        12 000074   000020 236000 xsym               LDQ     ICB+16
        12 000075   777000 316003                    CANQ    -512,DU
        12 000076   000122 600000 12                 TZE     s:7748

      348     7736    3                     AND ICB.FID.LEN ~= 0
      349     7737    3                    THEN                   /* Either bad OPT or FID              */
      350     7738                                                /* since a fid exists and no device   */
      351     7739                                                /* specified                          */
      352     7740    4                    DO;

      353     7741    4                       CALL VPL$ERR_PROC(3,56,'06'O,,,,,1); /* ABORT and return  */

   7741 12 000077   000002 236000 13                 LDQ     2
        12 000100   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000101   200026 757100                    STAQ    OPT_IDX+7,,AUTO
        12 000102   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000103   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000104   200024 757100                    STAQ    OPT_IDX+5,,AUTO
        12 000105   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000106   000003 235000 13                 LDA     3
        12 000107   200022 757100                    STAQ    OPT_IDX+3,,AUTO
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:88   
        12 000110   000004 237000 13                 LDAQ    4
        12 000111   200020 757100                    STAQ    OPT_IDX+1,,AUTO
        12 000112   200020 630500                    EPPR0   OPT_IDX+1,,AUTO
        12 000113   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000114   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000115   000000 011000                    NOP     0

      354     7742        /*E* ERROR:   VPF-00056
      355     7743             MESSAGE: Bad input option encountered
      356     7744        */
      357     7745    4                       RET_VAL = 2;        /* Error return                       */

   7745 12 000116   000002 235007                    LDA     2,DL
        12 000117   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000120   000000 755100                    STA     0,,PR0

      358     7746    4                       RETURN;

   7746 12 000121   000000 702200 xent               TSX2  ! X66_ARET

      359     7747    4                       END;
      360     7748    3                   NEW_FID_LEN = ICB.FID.LEN+NE$->OUT$BLK.SUBLK$(0)->

   7748 12 000122   400003 475500                    LDP5    3,,PR4
        12 000123   000100 101500                    MRL     fill='000'O
        12 000124   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
        12 000125   200020 000004                    ADSC9   OPT_IDX+1,,AUTO          cn=0,n=4
        12 000126   000020 236000 xsym               LDQ     ICB+16
        12 000127   000033 772000                    QRL     27
        12 000130   200020 036100                    ADLQ    OPT_IDX+1,,AUTO
        12 000131   200007 756100                    STQ     NEW_FID_LEN,,AUTO

      361     7749    3                     OUT$BLK.SUBLK$(0)->TEXT$C.LEN;
      362     7750    3                   IF NEW_FID_LEN>SIZEC(ICB.FID.STRING)

   7750 12 000132   000117 116007                    CMPQ    79,DL
        12 000133   000157 604400 12                 TMOZ    s:7760
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:89   

      363     7751    3                    THEN
      364     7752    4                    DO;

      365     7753    4                       CALL VPL$ERR_PROC(3,1,'06'O,,,,,1); /* INPUT FID TOO LONG */

   7753 12 000134   000002 236000 13                 LDQ     2
        12 000135   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000136   200026 757100                    STAQ    OPT_IDX+7,,AUTO
        12 000137   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000140   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000141   200024 757100                    STAQ    OPT_IDX+5,,AUTO
        12 000142   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000143   000003 235000 13                 LDA     3
        12 000144   200022 757100                    STAQ    OPT_IDX+3,,AUTO
        12 000145   000006 237000 13                 LDAQ    6
        12 000146   200020 757100                    STAQ    OPT_IDX+1,,AUTO
        12 000147   200020 630500                    EPPR0   OPT_IDX+1,,AUTO
        12 000150   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000151   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000152   000000 011000                    NOP     0

      366     7754        /*E* ERROR:   VPF-00001
      367     7755             MESSAGE: Input FID too long
      368     7756        */
      369     7757    4                       RET_VAL = 2;

   7757 12 000153   000002 235007                    LDA     2,DL
        12 000154   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000155   000000 755100                    STA     0,,PR0

      370     7758    4                       RETURN;

   7758 12 000156   000000 702200 xent               TSX2  ! X66_ARET

      371     7759    4                       END;
      372     7760    3                   CALL INSERT(ICB.FID.STRING,
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:90   

   7760 12 000157   300003 474500                    LDP4    3,,PR3
        12 000160   400003 475500                    LDP5    3,,PR4
        12 000161   000100 101500                    MRL     fill='000'O
        12 000162   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
        12 000163   200020 000002                    ADSC9   OPT_IDX+1,,AUTO          cn=0,n=2
        12 000164   200020 221100                    LDX1    OPT_IDX+1,,AUTO
        12 000165   000020 236000 xsym               LDQ     ICB+16
        12 000166   000033 772000                    QRL     27
        12 000167   777660 622006                    EAX2    -80,QL
        12 000170   777777 662003                    ERX2    -1,DU
        12 000171   040046 100540                    MLR     fill='040'O
        12 000172   500000 200011                    ADSC9   0,,PR5                   cn=1,n=*X1
        12 000173   000020 200012 xsym               ADSC9   ICB+16,Q                 cn=1,n=*X2

      373     7761    3                     ICB.FID.LEN,,
      374     7762    3                     NE$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->
      375     7763    3                     TEXT$C.STRING);       /* Append the rest of the FID         */
      376     7764    3                   ICB.FID.LEN = NEW_FID_LEN;

   7764 12 000174   200007 236100                    LDQ     NEW_FID_LEN,,AUTO
        12 000175   000033 736000                    QLS     27
        12 000176   000020 552040 xsym               STBQ    ICB+16,'40'O

      377     7765    3                   FPT_FID_IN.TEXTFID_   = VECTOR(ADDR(ICB.FID)->TEXT$C.STRING);

   7765 12 000177   000020 236000 xsym               LDQ     ICB+16
        12 000200   000033 772000                    QRL     27
        12 000201   000064 737000                    LLS     52
        12 000202   000140 135007                    SBLA    96,DL
        12 000203   000010 236000 13                 LDQ     8
        12 000204   000002 757000 xsym               STAQ    FPT_FID_IN+2

      378     7766    3                   CALL VPD$FID(FPT_FID_IN,1) ALTRET(FID_ALT_1);

   7766 12 000205   000011 630400 13                 EPPR0   9
        12 000206   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:91   
        12 000207   000000 701000 xent               TSX1    VPD$FID
        12 000210   000664 702000 12                 TSX2    FID_ALT_1

      379     7767    3                   IF IN_NAME.LEN=0

   7767 12 000211   000000 236000 xsym               LDQ     IN_NAME
        12 000212   777000 316003                    CANQ    -512,DU
        12 000213   000216 601000 12                 TNZ     s:7770

      380     7768    3                    THEN
      381     7769    3                      RESULTS_FID_IN.NAME = '0'B;

   7769 12 000214   000031 236000 xsym               LDQ     B_VECTNIL+25
        12 000215   000000 356000 xsym               ANSQ    RESULTS_FID_IN

      382     7770    3                   CALL ADD_FROM_INFO;

   7770 12 000216   000670 701000 12                 TSX1    ADD_FROM_INFO
        12 000217   000000 011000                    NOP     0

      383     7771    3                   CALL VPD$GET_IN_DEV_MASK(ICB);

   7771 12 000220   000013 630400 13                 EPPR0   11
        12 000221   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 000222   000000 701000 xent               TSX1    VPD$GET_IN_DEV_MASK
        12 000223   000000 011000                    NOP     0

      384     7772    3                   END;

      385     7773    2               IF NE$->OUT$BLK.NSUBLKS>1

   7773 12 000224   200006 470500                    LDP0    NE$,,AUTO
        12 000225   000001 220100                    LDX0    1,,PR0
        12 000226   000002 100003                    CMPX0   2,DU
        12 000227   000353 602000 12                 TNC     s:7819

      386     7774    2                THEN
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:92   
      387     7775    2                  IF NE$->OUT$BLK.SUBLK$(1)->OUT$BLK.CODE=4

   7775 12 000230   000004 471500                    LDP1    4,,PR0
        12 000231   100000 721100                    LXL1    0,,PR1
        12 000232   000004 101003                    CMPX1   4,DU
        12 000233   000353 601000 12                 TNZ     s:7819

      388     7776    2                   THEN                    /* RANGE END                          */
      389     7777    2                     IF ICB.DEV_MASK & '300'O

   7777 12 000234   000171 236000 xsym               LDQ     ICB+121
        12 000235   777000 376003                    ANQ     -512,DU
        12 000236   300000 376003                    ANQ     98304,DU
        12 000237   000330 600000 12                 TZE     s:7809

      390     7778    2                      THEN                 /* IF MANAGED...                      */
      391     7779    2                        IF NE$->OUT$BLK.SUBLK$(1)->OUT$BLK.NSUBLKS=0

   7779 12 000240   100001 222100                    LDX2    1,,PR1
        12 000241   000246 601000 12                 TNZ     s:7787

      392     7780    2                         THEN
      393     7781    2                           ICB.NAME_RANGE_END = BITASC('777'O);

   7781 12 000242   040000 100400                    MLR     fill='040'O
        12 000243   000014 000001 13                 ADSC9   12                       cn=0,n=1
        12 000244   000140 000037 xsym               ADSC9   ICB+96                   cn=0,n=31
        12 000245   000353 710000 12                 TRA     s:7819

      394     7782                                                /* AN IMPOSSIBLY HIGH-SORTING         */
      395     7783                                                /* FILENAME TO DENOTE TILL END        */
      396     7784                                                /* OF ACCOUNT.                        */
      397     7785    2                         ELSE
      398     7786    3                         DO;               /* AN ENDING FILENAME WAS GIVEN       */

      399     7787    3                            FPT_FID_END.TEXTFID_ = VECTOR(NE$->OUT$BLK.SUBLK$(1)->

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:93   
   7787 12 000246   100003 473500                    LDP3    3,,PR1
        12 000247   300004 236100                    LDQ     4,,PR3
        12 000250   000033 772000                    QRL     27
        12 000251   000064 737000                    LLS     52
        12 000252   000140 135007                    SBLA    96,DL
        12 000253   200020 453500                    STP3    OPT_IDX+1,,AUTO
        12 000254   200020 236100                    LDQ     OPT_IDX+1,,AUTO
        12 000255   000015 036000 13                 ADLQ    13
        12 000256   000020 757000 10                 STAQ    FPT_FID_END+2

      400     7788    3                              OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
      401     7789    3                            CALL VPD$FID(FPT_FID_END,1) ALTRET(FID_ALT_1);

   7789 12 000257   000016 630400 13                 EPPR0   14
        12 000260   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000261   000000 701000 xent               TSX1    VPD$FID
        12 000262   000664 702000 12                 TSX2    FID_ALT_1

      402     7790    3                            IF RESULTS_FID_END.ACCT

   7790 12 000263   000004 236000 10                 LDQ     RESULTS_FID_END
        12 000264   200000 316003                    CANQ    65536,DU
        12 000265   000301 601000 12                 TNZ     s:7797
        12 000266   000004 236000 10                 LDQ     RESULTS_FID_END
        12 000267   400000 376003                    ANQ     -131072,DU
        12 000270   400000 676003                    ERQ     -131072,DU
        12 000271   000301 601000 12                 TNZ     s:7797
        12 000272   000004 236000 10                 LDQ     RESULTS_FID_END
        12 000273   100000 316003                    CANQ    32768,DU
        12 000274   000301 601000 12                 TNZ     s:7797
        12 000275   020000 316003                    CANQ    8192,DU
        12 000276   000301 601000 12                 TNZ     s:7797
        12 000277   040000 316003                    CANQ    16384,DU
        12 000300   000324 600000 12                 TZE     s:7805

      403     7791    3                              OR ~RESULTS_FID_END.NAME
      404     7792    3                              OR RESULTS_FID_END.PASS
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:94   
      405     7793    3                              OR RESULTS_FID_END.WSN
      406     7794    3                              OR RESULTS_FID_END.SN
      407     7795    3                             THEN
      408     7796    4                             DO;

      409     7797    4                                CALL VPL$ERR_PROC(3,41,'06'O,,,,,1);

   7797 12 000301   000002 236000 13                 LDQ     2
        12 000302   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000303   200026 757100                    STAQ    OPT_IDX+7,,AUTO
        12 000304   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000305   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000306   200024 757100                    STAQ    OPT_IDX+5,,AUTO
        12 000307   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000310   000003 235000 13                 LDA     3
        12 000311   200022 757100                    STAQ    OPT_IDX+3,,AUTO
        12 000312   000022 237000 13                 LDAQ    18
        12 000313   200020 757100                    STAQ    OPT_IDX+1,,AUTO
        12 000314   200020 630500                    EPPR0   OPT_IDX+1,,AUTO
        12 000315   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000316   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000317   000000 011000                    NOP     0

      410     7798        /*E*   ERROR: VPF-00041
      411     7799             MESSAGE: NAME only allowed for end of range specification
      412     7800            */
      413     7801    4                                RET_VAL = 2;

   7801 12 000320   000002 235007                    LDA     2,DL
        12 000321   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000322   000000 755100                    STA     0,,PR0

      414     7802    4                                RETURN;

   7802 12 000323   000000 702200 xent               TSX2  ! X66_ARET

      415     7803    4                                END;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:95   
      416     7804    3                             ELSE
      417     7805    3                               ICB.NAME_RANGE_END = END_NAME.STRING;

   7805 12 000324   040000 100400                    MLR     fill='040'O
        12 000325   000046 200037 10                 ADSC9   END_NAME                 cn=1,n=31
        12 000326   000140 000037 xsym               ADSC9   ICB+96                   cn=0,n=31

      418     7806    3                            END;

   7806 12 000327   000353 710000 12                 TRA     s:7819

      419     7807    2                      ELSE                 /* Not managed and attempted range    */
      420     7808    3                      DO;

      421     7809    3                         CALL VPL$ERR_PROC(3,2,'06'O,,VECTOR(ICB.FID),,,1);

   7809 12 000330   000002 236000 13                 LDQ     2
        12 000331   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000332   200026 757100                    STAQ    OPT_IDX+7,,AUTO
        12 000333   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000334   000021 235000 13                 LDA     17
        12 000335   200024 757100                    STAQ    OPT_IDX+5,,AUTO
        12 000336   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000337   000003 235000 13                 LDA     3
        12 000340   200022 757100                    STAQ    OPT_IDX+3,,AUTO
        12 000341   000026 237000 13                 LDAQ    22
        12 000342   200020 757100                    STAQ    OPT_IDX+1,,AUTO
        12 000343   200020 630500                    EPPR0   OPT_IDX+1,,AUTO
        12 000344   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000345   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000346   000000 011000                    NOP     0

      422     7810        /*E* ERROR:   VPF-00002
      423     7811             MESSAGE: Device range not allowed.
      424     7812            MESSAGE1: '%U1' is not a managed resource, so a range of file
      425     7813                      names is impossible.
      426     7814        */
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:96   
      427     7815                                                /* RANGE NOT ALLOWED                  */
      428     7816    3                         RET_VAL = 2;

   7816 12 000347   000002 235007                    LDA     2,DL
        12 000350   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000351   000000 755100                    STA     0,,PR0

      429     7817    3                         RETURN;

   7817 12 000352   000000 702200 xent               TSX2  ! X66_ARET

      430     7818    3                         END;
      431     7819    2               IF NE$->OUT$BLK.SUBLK$(NE$->OUT$BLK.NSUBLKS-1)->OUT$BLK.CODE=1

   7819 12 000353   200006 470500                    LDP0    NE$,,AUTO
        12 000354   000001 220100                    LDX0    1,,PR0
        12 000355   000002 471510                    LDP1    2,X0,PR0
        12 000356   100000 721100                    LXL1    0,,PR1
        12 000357   000001 101003                    CMPX1   1,DU
        12 000360   000364 601000 12                 TNZ     s:7823

      432     7820    2                THEN
      433     7821    2                  IN_OPT$ = NE$->OUT$BLK.SUBLK$(NE$->OUT$BLK.NSUBLKS-1);

   7821 12 000361   000002 236110                    LDQ     2,X0,PR0
        12 000362   200005 756100                    STQ     IN_OPT$,,AUTO
        12 000363   000366 710000 12                 TRA     s:7825

      434     7822    2                ELSE
      435     7823    2                  IN_OPT$ = ADDR(NIL);

   7823 12 000364   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000365   200005 756100                    STQ     IN_OPT$,,AUTO

      436     7824    2               END;

      437     7825    1           IF (CMD_MASK & '000600'O)       /* LIST, LISTSTD                      */
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:97   

   7825 12 000366   000100 100400                    MLR     fill='000'O
        12 000367   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        12 000370   200020 000010                    ADSC9   OPT_IDX+1,,AUTO          cn=0,n=8
        12 000371   200020 237100                    LDAQ    OPT_IDX+1,,AUTO
        12 000372   000030 377000 13                 ANAQ    24
        12 000373   000400 600000 12                 TZE     s:7829
        12 000374   000171 236000 xsym               LDQ     ICB+121
        12 000375   777000 376003                    ANQ     -512,DU
        12 000376   300000 376003                    ANQ     98304,DU
        12 000377   000412 600000 12                 TZE     NEED_MAN

      438     7826    1             AND NOT (ICB.DEV_MASK & '300'O) /* AND NOT MANAGED                  */
      439     7827    1            THEN
      440     7828    1              GOTO NEED_MAN;
      441     7829    1           IF (CMD_MASK & '14000'O)        /* COPYALL, COPYSTD                   */

   7829 12 000400   000100 100400                    MLR     fill='000'O
        12 000401   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        12 000402   200020 000010                    ADSC9   OPT_IDX+1,,AUTO          cn=0,n=8
        12 000403   200020 237100                    LDAQ    OPT_IDX+1,,AUTO
        12 000404   000032 377000 13                 ANAQ    26
        12 000405   000435 600000 12                 TZE     s:7841
        12 000406   000171 236000 xsym               LDQ     ICB+121
        12 000407   777000 376003                    ANQ     -512,DU
        12 000410   340000 376003                    ANQ     114688,DU
        12 000411   000435 601000 12                 TNZ     s:7841

      442     7830    1             AND NOT (ICB.DEV_MASK & '340'O) /* AND NOT ANY MANAGED OR FT        */
      443     7831    1            THEN
      444     7832    2            DO;

   7830 12 000412                       NEED_MAN     null
      445     7833    2   NEED_MAN:   ;
      446     7834    2               CALL VPL$ERR_PROC(3,3,'06'O,,VECTOR(ICB.FID),,,1);
              7834                        /* INPUT MUST BE MANAGED */

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:98   
   7834 12 000412   000002 236000 13                 LDQ     2
        12 000413   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000414   200026 757100                    STAQ    OPT_IDX+7,,AUTO
        12 000415   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000416   000021 235000 13                 LDA     17
        12 000417   200024 757100                    STAQ    OPT_IDX+5,,AUTO
        12 000420   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000421   000003 235000 13                 LDA     3
        12 000422   200022 757100                    STAQ    OPT_IDX+3,,AUTO
        12 000423   000034 237000 13                 LDAQ    28
        12 000424   200020 757100                    STAQ    OPT_IDX+1,,AUTO
        12 000425   200020 630500                    EPPR0   OPT_IDX+1,,AUTO
        12 000426   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000427   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000430   000000 011000                    NOP     0

      447     7835        /*E* ERROR:   VPF-00003
      448     7836             MESSAGE: '%U1' is not a file
      449     7837        */
      450     7838    2               RET_VAL=2;

   7838 12 000431   000002 235007                    LDA     2,DL
        12 000432   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000433   000000 755100                    STA     0,,PR0

      451     7839    2               RETURN;

   7839 12 000434   000000 702200 xent               TSX2  ! X66_ARET

      452     7840    2               END;
      453     7841    1           IF (CMD_MASK & '012140002'O)    /* DELETE, DELETESTD,                 */

   7841 12 000435   000001 235000 11                 LDA     DOT_LIT+1
        12 000436   000000 236003                    LDQ     0,DU
        12 000437   200020 757100                    STAQ    OPT_IDX+1,,AUTO
        12 000440   000100 100400                    MLR     fill='000'O
        12 000441   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:99   
        12 000442   200022 000010                    ADSC9   OPT_IDX+3,,AUTO          cn=0,n=8
        12 000443   200022 237100                    LDAQ    OPT_IDX+3,,AUTO
        12 000444   200020 377100                    ANAQ    OPT_IDX+1,,AUTO
        12 000445   000474 600000 12                 TZE     s:7853
        12 000446   000171 236000 xsym               LDQ     ICB+121
        12 000447   200000 316003                    CANQ    65536,DU
        12 000450   000474 601000 12                 TNZ     s:7853

      454     7842                                                /* REVIEW, REVIEWSTD, OR MODIFY       */
      455     7843    1             AND NOT (ICB.DEV_MASK.MAN_DISC) /* AND NOT DISK FILE                */
      456     7844    1            THEN
      457     7845    2            DO;

      458     7846    2               CALL VPL$ERR_PROC(3,4,'06'O,,,,,1); /* INPUT MUST BE FROM DISK    */

   7846 12 000451   000002 236000 13                 LDQ     2
        12 000452   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000453   200026 757100                    STAQ    OPT_IDX+7,,AUTO
        12 000454   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000455   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000456   200024 757100                    STAQ    OPT_IDX+5,,AUTO
        12 000457   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000460   000003 235000 13                 LDA     3
        12 000461   200022 757100                    STAQ    OPT_IDX+3,,AUTO
        12 000462   000036 237000 13                 LDAQ    30
        12 000463   200020 757100                    STAQ    OPT_IDX+1,,AUTO
        12 000464   200020 630500                    EPPR0   OPT_IDX+1,,AUTO
        12 000465   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000466   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000467   000000 011000                    NOP     0

      459     7847        /*E* ERROR:   VPF-00004
      460     7848             MESSAGE: Input must be from disk
      461     7849        */
      462     7850    2               RET_VAL = 2;

   7850 12 000470   000002 235007                    LDA     2,DL
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:100  
        12 000471   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000472   000000 755100                    STA     0,,PR0

      463     7851    2               RETURN;

   7851 12 000473   000000 702200 xent               TSX2  ! X66_ARET

      464     7852    2               END;
      465     7853    1           IF RESULTS_FID_IN.NAME

   7853 12 000474   000000 234000 xsym               SZN     RESULTS_FID_IN
        12 000475   000477 605000 12                 TPL     s:7857

      466     7854    1            THEN
      467     7855    1              ICB.FSN = '0'B;              /* INVALIDATE DEVICE FSN OPTION       */

   7855 12 000476   000044 450000 xsym               STZ     ICB+36

      468     7856                                                /* IF THIS COMPLETE FID IS NAMED      */
      469     7857    1           IF IN_OPT$~=ADDR(NIL)

   7857 12 000477   200005 236100                    LDQ     IN_OPT$,,AUTO
        12 000500   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 000501   000514 600000 12                 TZE     s:7865

      470     7858    1            THEN
      471     7859    2            DO;

      472     7860    2               CALL VERIFY_STUFF_IN_OPTS(RET_VAL,1);

   7860 12 000502   000002 236000 13                 LDQ     2
        12 000503   200016 756100                    STQ     @RET_VAL+1,,AUTO
        12 000504   200003 236100                    LDQ     @RET_VAL,,AUTO
        12 000505   200015 756100                    STQ     CODE+2,,AUTO
        12 000506   001434 701000 12                 TSX1    VERIFY_STUFF_IN_OPTS
        12 000507   000000 011000                    NOP     0

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:101  
      473     7861    2               IF RET_VAL~=0

   7861 12 000510   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000511   000000 235100                    LDA     0,,PR0
        12 000512   000514 600000 12                 TZE     s:7865

      474     7862    2                THEN
      475     7863    2                  RETURN;

   7863 12 000513   000000 702200 xent               TSX2  ! X66_ARET

      476     7864    2               END;
      477     7865    1           CALL SET_SPEC_TYPE(RET_VAL);

   7865 12 000514   200003 236100                    LDQ     @RET_VAL,,AUTO
        12 000515   200011 756100                    STQ     NEW_FID_LEN+2,,AUTO
        12 000516   001336 701000 12                 TSX1    SET_SPEC_TYPE
        12 000517   000000 011000                    NOP     0

      478     7866    2           IF ICB.CREATOR_SEL = 0 THEN DO;

   7866 12 000520   000173 235000 xsym               LDA     ICB+123
        12 000521   000532 601000 12                 TNZ     s:7871

      479     7867    2               ICB.CREATOR_SEL = DEF_ICB.CREATOR_SEL;

   7867 12 000522   000173 236000 xsym               LDQ     DEF_ICB+123
        12 000523   000173 756000 xsym               STQ     ICB+123

      480     7868    2               ICB.CREATOR_NEG = DEF_ICB.CREATOR_NEG;

   7868 12 000524   000174 236000 xsym               LDQ     DEF_ICB+124
        12 000525   400000 376003                    ANQ     -131072,DU
        12 000526   000174 756000 xsym               STQ     ICB+124

      481     7869    2               ICB.CREATOR = DEF_ICB.CREATOR;

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:102  
   7869 12 000527   000000 100400                    MLR     fill='000'O
        12 000530   000175 000026 xsym               ADSC9   DEF_ICB+125              cn=0,n=22
        12 000531   000175 000026 xsym               ADSC9   ICB+125                  cn=0,n=22

      482     7870    2               END;

      483     7871    2           IF ICB.SRCHCOND = '0'B THEN DO;

   7871 12 000532   000167 236000 xsym               LDQ     ICB+119
        12 000533   000040 316000 13                 CANQ    32
        12 000534   000537 601000 12                 TNZ     s:7874

      484     7872    2               ICB.SRCHCOND = DEF_ICB.SRCHCOND;

   7872 12 000535   000167 236000 xsym               LDQ     DEF_ICB+119
        12 000536   000167 552030 xsym               STBQ    ICB+119,'30'O

      485     7873    2               END;

      486     7874    2           IF ICB.DATE.TYPE = 0 THEN DO;

   7874 12 000537   000160 235000 xsym               LDA     ICB+112
        12 000540   000544 601000 12                 TNZ     s:7877

      487     7875    2               ICB.DATE = DEF_ICB.DATE;

   7875 12 000541   000000 100400                    MLR     fill='000'O
        12 000542   000160 000032 xsym               ADSC9   DEF_ICB+112              cn=0,n=26
        12 000543   000160 000032 xsym               ADSC9   ICB+112                  cn=0,n=26

      488     7876    2               END;

      489     7877    2           IF ICB.SORTING_ORDER.COUNT = 0 THEN DO;

   7877 12 000544   000204 235000 xsym               LDA     ICB+132
        12 000545   000551 601000 12                 TNZ     s:7880

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:103  
      490     7878    2               ICB.SORTING_ORDER = DEF_ICB.SORTING_ORDER;

   7878 12 000546   000000 100400                    MLR     fill='000'O
        12 000547   000204 000134 xsym               ADSC9   DEF_ICB+132              cn=0,n=92
        12 000550   000204 000134 xsym               ADSC9   ICB+132                  cn=0,n=92

      491     7879    2               END;

      492     7880    2           IF ICB.TYPE.COUNT = 0 THEN DO;

   7880 12 000551   000150 235000 xsym               LDA     ICB+104
        12 000552   000556 601000 12                 TNZ     s:7883

      493     7881    2               ICB.TYPE = DEF_ICB.TYPE;

   7881 12 000553   000000 100400                    MLR     fill='000'O
        12 000554   000150 000034 xsym               ADSC9   DEF_ICB+104              cn=0,n=28
        12 000555   000150 000034 xsym               ADSC9   ICB+104                  cn=0,n=28

      494     7882    2               END;

      495     7883    2           IF ICB.ORG = '0'B THEN DO;

   7883 12 000556   000135 235000 xsym               LDA     ICB+93
        12 000557   000565 601000 12                 TNZ     s:7887

      496     7884    2               ICB.ORG_NEG = DEF_ICB.ORG_NEG;

   7884 12 000560   000136 236000 xsym               LDQ     DEF_ICB+94
        12 000561   400000 376003                    ANQ     -131072,DU
        12 000562   000136 756000 xsym               STQ     ICB+94

      497     7885    2               ICB.ORG = DEF_ICB.ORG;

   7885 12 000563   000135 236000 xsym               LDQ     DEF_ICB+93
        12 000564   000135 756000 xsym               STQ     ICB+93

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:104  
      498     7886    2               END;

      499     7887    2           IF ICB.A_EA_C = 0 THEN DO;

   7887 12 000565   000014 235000 xsym               LDA     ICB+12
        12 000566   000571 601000 12                 TNZ     s:7890

      500     7888    2               ICB.A_EA_C = DEF_ICB.A_EA_C;

   7888 12 000567   000014 236000 xsym               LDQ     DEF_ICB+12
        12 000570   000014 756000 xsym               STQ     ICB+12

      501     7889    2               END;

      502     7890    2           IF ICB.COLS = 0 THEN DO;

   7890 12 000571   000016 235000 xsym               LDA     ICB+14
        12 000572   000575 601000 12                 TNZ     s:7893

      503     7891    2               ICB.COLS = DEF_ICB.COLS;

   7891 12 000573   000016 236000 xsym               LDQ     DEF_ICB+14
        12 000574   000016 756000 xsym               STQ     ICB+14

      504     7892    2               END;

      505     7893    1           IF ICB.FFID = '0'B THEN

   7893 12 000575   000137 234000 xsym               SZN     ICB+95
        12 000576   000602 604000 12                 TMI     s:7895

      506     7894    1              ICB.FFID = DEF_ICB.FFID;

   7894 12 000577   000137 236000 xsym               LDQ     DEF_ICB+95
        12 000600   400000 376003                    ANQ     -131072,DU
        12 000601   000137 756000 xsym               STQ     ICB+95

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:105  
      507     7895    1           IF RESULTS_FID_IN.RES AND IN_RES = 'DP' AND /* If DP                  */

   7895 12 000602   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 000603   004000 316003                    CANQ    2048,DU
        12 000604   000633 600000 12                 TZE     s:7903
        12 000605   040000 106400                    CMPC    fill='040'O
        12 000606   000000 000004 xsym               ADSC9   IN_RES                   cn=0,n=4
        12 000607   000002 000002 11                 ADSC9   DOT_LIT+2                cn=0,n=2
        12 000610   000633 601000 12                 TNZ     s:7903
        12 000611   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 000612   400000 376003                    ANQ     -131072,DU
        12 000613   400000 676003                    ERQ     -131072,DU
        12 000614   000633 600000 12                 TZE     s:7903
        12 000615   000017 235000 xsym               LDA     ICB+15
        12 000616   000004 115007                    CMPA    4,DL
        12 000617   000633 600000 12                 TZE     s:7903
        12 000620   000005 115007                    CMPA    5,DL
        12 000621   000633 600000 12                 TZE     s:7903
        12 000622   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 000623   000001 736000                    QLS     1
        12 000624   400000 376003                    ANQ     -131072,DU
        12 000625   400000 676003                    ERQ     -131072,DU
        12 000626   000633 600000 12                 TZE     s:7903

      508     7896    1             ~RESULTS_FID_IN.NAME AND      /* and no name                        */
      509     7897    1             NOT (ICB.SPEC_TYPE=4 OR ICB.SPEC_TYPE=5) AND /* but wildcard is ok  */
      510     7898    1             ~RESULTS_FID_IN.ACCT THEN     /* nor account                        */
      511     7899    1              CALL VPL$ERR_PROC(3,75,'06'O); /* then complain                    */

   7899 12 000627   000042 630400 13                 EPPR0   34
        12 000630   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000631   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000632   000000 011000                    NOP     0

      512     7900        /*E* ERROR:   VPF-00075
      513     7901             MESSAGE: Filename needed
      514     7902        */
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:106  
      515     7903    1           IF ICB.PHYSICAL=1 AND ICB.SPEC_TYPE~=3

   7903 12 000633   000011 235000 xsym               LDA     ICB+9
        12 000634   000001 115007                    CMPA    1,DL
        12 000635   000663 601000 12                 TNZ     s:7911
        12 000636   000017 236000 xsym               LDQ     ICB+15
        12 000637   000003 116007                    CMPQ    3,DL
        12 000640   000663 600000 12                 TZE     s:7911

      516     7904    2            THEN DO;

      517     7905    2               CALL VPL$ERR_PROC(3,46,'06'O,,,,,1);

   7905 12 000641   000002 236000 13                 LDQ     2
        12 000642   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000643   200026 757100                    STAQ    OPT_IDX+7,,AUTO
        12 000644   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000645   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000646   200024 757100                    STAQ    OPT_IDX+5,,AUTO
        12 000647   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000650   000003 235000 13                 LDA     3
        12 000651   200022 757100                    STAQ    OPT_IDX+3,,AUTO
        12 000652   000046 237000 13                 LDAQ    38
        12 000653   200020 757100                    STAQ    OPT_IDX+1,,AUTO
        12 000654   200020 630500                    EPPR0   OPT_IDX+1,,AUTO
        12 000655   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000656   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000657   000000 011000                    NOP     0

      518     7906        /*E*   ERROR: VPF-00046
      519     7907             MESSAGE: PHYSICAL option allowed for LT name range only
      520     7908        */
      521     7909    2               RET_VAL = 2;

   7909 12 000660   000002 235007                    LDA     2,DL
        12 000661   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000662   000000 755100                    STA     0,,PR0
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:107  

      522     7910    2               END;

      523     7911    1           RETURN;

   7911 12 000663   000000 702200 xent               TSX2  ! X66_ARET

   7903 12 000664                       FID_ALT_1    null
      524     7912        /**/
      525     7913    1   FID_ALT_1: ;
      526     7914    1           RET_VAL = 2;

   7914 12 000664   000002 235007                    LDA     2,DL
        12 000665   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000666   000000 755100                    STA     0,,PR0

      527     7915    1           RETURN;

   7915 12 000667   000000 702200 xent               TSX2  ! X66_ARET

      528     7916        %EJECT;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:108  
      529     7917    1   ADD_FROM_INFO: PROC;

   7917 12 000670   200014 741300       ADD_FROM_IN* STX1  ! CODE+1,,AUTO

      530     7918        /*I* NAME: ADD_FROM_INFO
      531     7919             PURPOSE: To merge the FROM information into the current fid spec.
      532     7920             CALL: CALL ADD_FROM_INFO;
      533     7921             DESCRIPTION: This procedure is used to merge the previously processed
      534     7922                          FROM information into the current fid spec to make the
      535     7923                          usable fid spec.
      536     7924        */
      537     7925    2           IF RESULTS_FID_FROM             /* If FROM FID exists                 */

   7925 12 000671   000000 106400                    CMPC    fill='000'O
        12 000672   000000 000044 xsym               ADSC9   RESULTS_FID_FROM         cn=0,n=36
        12 000673   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
        12 000674   000772 600000 12                 TZE     s:7962
        12 000675   000000 234000 xsym               SZN     THIS_STD_FILE
        12 000676   000772 604000 12                 TMI     s:7962

      538     7926    2             AND NOT THIS_STD_FILE         /* AND NOT the STD file               */
      539     7927    3            THEN DO;

      540     7928    3               IF RESULTS_FID_IN.RES='0'B

   7928 12 000677   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 000700   004000 316003                    CANQ    2048,DU
        12 000701   000723 601000 12                 TNZ     s:7937

      541     7929    3                THEN
      542     7930    4                DO;

      543     7931    4                   IN_ASN = FROM_ASN;

   7931 12 000702   000000 236000 xsym               LDQ     FROM_ASN
        12 000703   000033 772000                    QRL     27
        12 000704   000033 736000                    QLS     27
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:109  
        12 000705   000000 756000 xsym               STQ     IN_ASN

      544     7932    4                   IN_RES = FROM_RES;

   7932 12 000706   000000 236000 xsym               LDQ     FROM_RES
        12 000707   000000 756000 xsym               STQ     IN_RES

      545     7933    4                   IN_SN = FROM_SN;

   7933 12 000710   000000 100400                    MLR     fill='000'O
        12 000711   000000 000174 xsym               ADSC9   FROM_SN                  cn=0,n=124
        12 000712   000000 000174 xsym               ADSC9   IN_SN                    cn=0,n=124

      546     7934    4                   RESULTS_FID_IN.RES = RESULTS_FID_FROM.RES;

   7934 12 000713   000000 236000 xsym               LDQ     RESULTS_FID_FROM
        12 000714   000000 676000 xsym               ERQ     RESULTS_FID_IN
        12 000715   004000 376003                    ANQ     2048,DU
        12 000716   000000 656000 xsym               ERSQ    RESULTS_FID_IN

      547     7935    4                   RESULTS_FID_IN.SN = RESULTS_FID_FROM.SN;

   7935 12 000717   000000 236000 xsym               LDQ     RESULTS_FID_FROM
        12 000720   000000 676000 xsym               ERQ     RESULTS_FID_IN
        12 000721   040000 376003                    ANQ     16384,DU
        12 000722   000000 656000 xsym               ERSQ    RESULTS_FID_IN

      548     7936    4                   END;

      549     7937    3               IF RESULTS_FID_IN.NAME='0'B

   7937 12 000723   000000 234000 xsym               SZN     RESULTS_FID_IN
        12 000724   000734 604000 12                 TMI     s:7943

      550     7938    3                THEN
      551     7939    4                DO;

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:110  
      552     7940    4                   IN_NAME = FROM_NAME;

   7940 12 000725   000000 100400                    MLR     fill='000'O
        12 000726   000000 000040 xsym               ADSC9   FROM_NAME                cn=0,n=32
        12 000727   000000 000040 xsym               ADSC9   IN_NAME                  cn=0,n=32

      553     7941    4                   RESULTS_FID_IN.NAME = RESULTS_FID_FROM.NAME;

   7941 12 000730   000000 236000 xsym               LDQ     RESULTS_FID_FROM
        12 000731   000000 676000 xsym               ERQ     RESULTS_FID_IN
        12 000732   400000 376003                    ANQ     -131072,DU
        12 000733   000000 656000 xsym               ERSQ    RESULTS_FID_IN

      554     7942    4                   END;

      555     7943    3               IF RESULTS_FID_IN.ACCT='0'B

   7943 12 000734   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 000735   200000 316003                    CANQ    65536,DU
        12 000736   000746 601000 12                 TNZ     s:7949

      556     7944    3                THEN
      557     7945    4                DO;

      558     7946    4                   IN_ACCT = FROM_ACCT;

   7946 12 000737   040000 100400                    MLR     fill='040'O
        12 000740   000000 000010 xsym               ADSC9   FROM_ACCT                cn=0,n=8
        12 000741   000000 000010 xsym               ADSC9   IN_ACCT                  cn=0,n=8

      559     7947    4                   RESULTS_FID_IN.ACCT = RESULTS_FID_FROM.ACCT;

   7947 12 000742   000000 236000 xsym               LDQ     RESULTS_FID_FROM
        12 000743   000000 676000 xsym               ERQ     RESULTS_FID_IN
        12 000744   200000 376003                    ANQ     65536,DU
        12 000745   000000 656000 xsym               ERSQ    RESULTS_FID_IN

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:111  
      560     7948    4                   END;

      561     7949    3               IF RESULTS_FID_IN.PASS='0'B

   7949 12 000746   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 000747   100000 316003                    CANQ    32768,DU
        12 000750   000760 601000 12                 TNZ     s:7955

      562     7950    3                THEN
      563     7951    4                DO;

      564     7952    4                   IN_PASS = FROM_PASS;

   7952 12 000751   040000 100400                    MLR     fill='040'O
        12 000752   000000 000010 xsym               ADSC9   FROM_PASS                cn=0,n=8
        12 000753   000000 000010 xsym               ADSC9   IN_PASS                  cn=0,n=8

      565     7953    4                   RESULTS_FID_IN.PASS = RESULTS_FID_FROM.PASS;

   7953 12 000754   000000 236000 xsym               LDQ     RESULTS_FID_FROM
        12 000755   000000 676000 xsym               ERQ     RESULTS_FID_IN
        12 000756   100000 376003                    ANQ     32768,DU
        12 000757   000000 656000 xsym               ERSQ    RESULTS_FID_IN

      566     7954    4                   END;

      567     7955    3               IF RESULTS_FID_IN.WSN='0'B

   7955 12 000760   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 000761   020000 316003                    CANQ    8192,DU
        12 000762   000772 601000 12                 TNZ     s:7962

      568     7956    3                THEN
      569     7957    4                DO;

      570     7958    4                   IN_WSN = FROM_WSN;

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:112  
   7958 12 000763   040000 100400                    MLR     fill='040'O
        12 000764   000000 000010 xsym               ADSC9   FROM_WSN                 cn=0,n=8
        12 000765   000000 000010 xsym               ADSC9   IN_WSN                   cn=0,n=8

      571     7959    4                   RESULTS_FID_IN.WSN = RESULTS_FID_FROM.WSN;

   7959 12 000766   000000 236000 xsym               LDQ     RESULTS_FID_FROM
        12 000767   000000 676000 xsym               ERQ     RESULTS_FID_IN
        12 000770   020000 376003                    ANQ     8192,DU
        12 000771   000000 656000 xsym               ERSQ    RESULTS_FID_IN

      572     7960    4                   END;

      573     7961    3               END;

      574     7962    2           RETURN;

   7962 12 000772   000001 702211                    TSX2  ! 1,X1

      575     7963    2   END ADD_FROM_INFO;
      576     7964        %EJECT;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:113  
      577     7965    1   NEXT_SOURCE: PROC(RET_VAL);

   7965 12 000773   200010 741300       NEXT_SOURCE  STX1  ! NEW_FID_LEN+1,,AUTO

      578     7966        /*I* NAME: NEXT_SOURCE
      579     7967             PURPOSE: To initialize processing of the next SOURCE of SOURCELIST.
      580     7968             CALL: CALL NEXT_SOURCE(RET_VAL);
      581     7969             DESCRIPTION: This procedure processes the next SOURCE of SOURCELIST
      582     7970                          if one exists. If SL$ = ADDR(NIL), this proc works as if
      583     7971                          SOURCELIST = '.'. If it is a SOURCE_1_N node, NL$ is set
      584     7972                          to reflect this and DEV_ICB is cleared. If it is a
      585     7973                          SOURCE_2_N node, the device portion of the FID ( this may
      586     7974                          be the entire FID) is formed and fed to M$FID. NL$ is set
      587     7975                          to point to the head node of any N.A.P and options nodes.
      588     7976                          If device options exist, they are processed into DEV_ICB
      589     7977                          and verified. If these device options occur for a node
      590     7978                          that has no following N.A.P nodes, the options are not
      591     7979                          processed, they are pointed to by IN_OPT$ which is
      592     7980                          then returned. In any case, the results from M$FID will
      593     7981                          be meaningful assuming no errors occurred.
      594     7982                          RET_VAL will be returned as below:
      595     7983                            RET_VAL           DESCRIPTION
      596     7984                            -------           -----------
      597     7985                               0              All fine.
      598     7986                               1              No more SOURCE elements.
      599     7987                               2              Error.
      600     7988        */
      601     7989    2   DCL RET_VAL SBIN WORD;
      602     7990    2   DCL S12$ PTR;
      603     7991    2   DCL CODE SBIN WORD;
      604     7992    2   DCL DOT_LIT CHAR(1) CONSTANT INIT('.'); /* Text for default SOURCELIST        */
      605     7993    2           RET_VAL = 0;

   7993 12 000774   200011 470500                    LDP0    @RET_VAL,,AUTO
        12 000775   000000 450100                    STZ     0,,PR0

      606     7994    2           NL$ = ADDR(NIL);
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:114  

   7994 12 000776   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000777   000002 756000 10                 STQ     NL$

      607     7995    2           NL_IDX = 0;

   7995 12 001000   000003 450000 10                 STZ     NL_IDX

      608     7996    2           SL_IDX = SL_IDX+1;

   7996 12 001001   000001 054000 10                 AOS     SL_IDX

      609     7997    2           DEV_ICB = '0'B;

   7997 12 001002   000000 100400                    MLR     fill='000'O
        12 001003   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
        12 001004   000000 001214 xsym               ADSC9   DEV_ICB                  cn=0,n=652

      610     7998    2           DEV_ICB.NAME_RANGE_END = ' ';

   7998 12 001005   040000 100400                    MLR     fill='040'O
        12 001006   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
        12 001007   000140 000037 xsym               ADSC9   DEV_ICB+96               cn=0,n=31

      611     7999    2           IF SL$=ADDR(NIL)

   7999 12 001010   000000 236000 10                 LDQ     SL$
        12 001011   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 001012   001026 601000 12                 TNZ     s:8015

      612     8000    2            THEN                           /* Default SOURCELIST of '.'          */
      613     8001    2              IF SL_IDX>0

   8001 12 001013   000001 235000 10                 LDA     SL_IDX
        12 001014   001021 604400 12                 TMOZ    s:8010

      614     8002    2               THEN
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:115  
      615     8003    3               DO;                         /* SECOND TIME THROUGH FOR            */

      616     8004    3                  RET_VAL = 1;             /* DEFAULT SOURCELIST...              */

   8004 12 001015   000001 235007                    LDA     1,DL
        12 001016   000000 755100                    STA     0,,PR0

      617     8005    3                  RETURN;

   8005 12 001017   200010 221300                    LDX1  ! NEW_FID_LEN+1,,AUTO
        12 001020   000001 702211                    TSX2  ! 1,X1

      618     8006    3                  END;
      619     8007    2               ELSE
      620     8008    3               DO;                         /* FIRST TIME THROUGH FOR             */

      621     8009                                                /* DEFAULT SOURCELIST...              */
      622     8010    3                  SINGLE_INSPEC = 1;       /* INDICATE A SINGLE INPUT SPEC       */

   8010 12 001021   000001 235007                    LDA     1,DL
        12 001022   000000 755000 xsym               STA     SINGLE_INSPEC

      623     8011    3                  FPT_FID_IN.TEXTFID_ = VECTOR(DOT_LIT);

   8011 12 001023   000050 237000 13                 LDAQ    40
        12 001024   000002 757000 xsym               STAQ    FPT_FID_IN+2

      624     8012    3                  GOTO CALL_FID;

   8012 12 001025   001212 710000 12                 TRA     CALL_FID

      625     8013    3                  END;
      626     8014    2            ELSE                           /* Not default SOURCELIST             */
      627     8015    2              IF SL_IDX>=SL$->OUT$BLK.NSUBLKS

   8015 12 001026   000000 471400 10                 LDP1    SL$
        12 001027   100001 236100                    LDQ     1,,PR1
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:116  
        12 001030   000022 772000                    QRL     18
        12 001031   000001 116000 10                 CMPQ    SL_IDX
        12 001032   001037 605400 12                 TPNZ    s:8021

      628     8016    2               THEN
      629     8017    3               DO;

      630     8018    3                  RET_VAL = 1;             /* NO MORE SOURCELIST                 */

   8018 12 001033   000001 235007                    LDA     1,DL
        12 001034   000000 755100                    STA     0,,PR0

      631     8019    3                  RETURN;

   8019 12 001035   200010 221300                    LDX1  ! NEW_FID_LEN+1,,AUTO
        12 001036   000001 702211                    TSX2  ! 1,X1

      632     8020    3                  END;
      633     8021    2           S12$ = SL$->OUT$BLK.SUBLK$(SL_IDX);

   8021 12 001037   000001 720000 10                 LXL0    SL_IDX
        12 001040   100003 236110                    LDQ     3,X0,PR1
        12 001041   200012 756100                    STQ     S12$,,AUTO

      634     8022    2           IF S12$->OUT$BLK.CODE=1

   8022 12 001042   200012 473500                    LDP3    S12$,,AUTO
        12 001043   300000 721100                    LXL1    0,,PR3
        12 001044   000001 101003                    CMPX1   1,DU
        12 001045   001056 601000 12                 TNZ     s:8032

      635     8023    2            THEN
      636     8024    3            DO;                            /* SOURCE_1                           */

      637     8025    3               NL$ = S12$;

   8025 12 001046   000002 756000 10                 STQ     NL$
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:117  

      638     8026    3               IF SL$->OUT$BLK.NSUBLKS=1

   8026 12 001047   100001 222100                    LDX2    1,,PR1
        12 001050   000001 102003                    CMPX2   1,DU
        12 001051   001054 601000 12                 TNZ     s:8029

      639     8027    3                THEN
      640     8028    3                  SINGLE_INSPEC = 1;       /* INDICATE SINGLE INPUT SPEC         */

   8028 12 001052   000001 235007                    LDA     1,DL
        12 001053   000000 755000 xsym               STA     SINGLE_INSPEC

      641     8029    3               RETURN;

   8029 12 001054   200010 221300                    LDX1  ! NEW_FID_LEN+1,,AUTO
        12 001055   000001 702211                    TSX2  ! 1,X1

      642     8030    3               END;
      643     8031                                                /* MUST BE SOURCE_2                   */
      644     8032    2           DEV_ICB.FID = S12$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->TEXT$C;

   8032 12 001056   300003 474500                    LDP4    3,,PR3
        12 001057   400003 475500                    LDP5    3,,PR4
        12 001060   000100 101500                    MRL     fill='000'O
        12 001061   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
        12 001062   200020 000002                    ADSC9   OPT_IDX+1,,AUTO          cn=0,n=2
        12 001063   200020 221100                    LDX1    OPT_IDX+1,,AUTO
        12 001064   000001 622011                    EAX2    1,X1
        12 001065   000000 100540                    MLR     fill='000'O
        12 001066   500000 000012                    ADSC9   0,,PR5                   cn=0,n=*X2
        12 001067   000020 000120 xsym               ADSC9   DEV_ICB+16               cn=0,n=80

      645     8033    2           IF DEV_ICB.FID.LEN>=SIZEC(DEV_ICB.FID.STRING)

   8033 12 001070   000020 236000 xsym               LDQ     DEV_ICB+16
        12 001071   777000 376003                    ANQ     -512,DU
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:118  
        12 001072   117000 116003                    CMPQ    40448,DU
        12 001073   001120 602000 12                 TNC     s:8040

      646     8034    2            THEN
      647     8035    3            DO;

      648     8036    3               CALL VPL$ERR_PROC(3,1,'06'O,,,,,1); /* INPUT FID TOO LONG         */

   8036 12 001074   000002 236000 13                 LDQ     2
        12 001075   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001076   200026 757100                    STAQ    OPT_IDX+7,,AUTO
        12 001077   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001100   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001101   200024 757100                    STAQ    OPT_IDX+5,,AUTO
        12 001102   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001103   000003 235000 13                 LDA     3
        12 001104   200022 757100                    STAQ    OPT_IDX+3,,AUTO
        12 001105   000006 237000 13                 LDAQ    6
        12 001106   200020 757100                    STAQ    OPT_IDX+1,,AUTO
        12 001107   200020 630500                    EPPR0   OPT_IDX+1,,AUTO
        12 001110   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001111   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001112   000000 011000                    NOP     0

      649     8037    3               RET_VAL = 2;

   8037 12 001113   000002 235007                    LDA     2,DL
        12 001114   200011 470500                    LDP0    @RET_VAL,,AUTO
        12 001115   000000 755100                    STA     0,,PR0

      650     8038    3               RETURN;

   8038 12 001116   200010 221300                    LDX1  ! NEW_FID_LEN+1,,AUTO
        12 001117   000001 702211                    TSX2  ! 1,X1

      651     8039    3               END;
      652     8040    2           CODE = 0;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:119  

   8040 12 001120   200013 450100                    STZ     CODE,,AUTO

      653     8041    2           IF S12$->OUT$BLK.NSUBLKS>1

   8041 12 001121   300001 221100                    LDX1    1,,PR3
        12 001122   000002 101003                    CMPX1   2,DU
        12 001123   001130 602000 12                 TNC     s:8044

      654     8042    2            THEN
      655     8043    2              CODE = S12$->OUT$BLK.SUBLK$(1)->OUT$BLK.CODE;

   8043 12 001124   300004 474500                    LDP4    4,,PR3
        12 001125   400000 236100                    LDQ     0,,PR4
        12 001126   777777 376007                    ANQ     -1,DL
        12 001127   200013 756100                    STQ     CODE,,AUTO

      656     8044    2           IF CODE=1

   8044 12 001130   200013 235100                    LDA     CODE,,AUTO
        12 001131   000001 115007                    CMPA    1,DL
        12 001132   001143 601000 12                 TNZ     s:8052

      657     8045    2            THEN
      658     8046    3            DO;                            /* INPUT OPTIONS SPECIFIED            */

      659     8047    3               IN_OPT$ = S12$->OUT$BLK.SUBLK$(1);

   8047 12 001133   300004 236100                    LDQ     4,,PR3
        12 001134   200005 756100                    STQ     IN_OPT$,,AUTO

      660     8048    3               IF S12$->OUT$BLK.NSUBLKS>2

   8048 12 001135   000003 101003                    CMPX1   3,DU
        12 001136   001143 602000 12                 TNC     s:8052

      661     8049    3                THEN
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:120  
      662     8050    3                  CODE = S12$->OUT$BLK.SUBLK$(2)->OUT$BLK.CODE;

   8050 12 001137   300005 474500                    LDP4    5,,PR3
        12 001140   400000 236100                    LDQ     0,,PR4
        12 001141   777777 376007                    ANQ     -1,DL
        12 001142   200013 756100                    STQ     CODE,,AUTO

      663     8051    3               END;

      664     8052    2           IF CODE=2

   8052 12 001143   200013 235100                    LDA     CODE,,AUTO
        12 001144   000002 115007                    CMPA    2,DL
        12 001145   001156 601000 12                 TNZ     s:8058

      665     8053    2            THEN
      666     8054    3            DO;                            /* SLASH SPECIFIED                    */

      667     8055    3               DEV_ICB.FID.STR_ARY(DEV_ICB.FID.LEN)= '/';

   8055 12 001146   000020 236000 xsym               LDQ     DEV_ICB+16
        12 001147   000033 772000                    QRL     27
        12 001150   040006 100400                    MLR     fill='040'O
        12 001151   000052 000001 13                 ADSC9   42                       cn=0,n=1
        12 001152   000020 200001 xsym               ADSC9   DEV_ICB+16,Q             cn=1,n=1

      668     8056    3               DEV_ICB.FID.LEN = DEV_ICB.FID.LEN+1;

   8056 12 001153   000020 236000 xsym               LDQ     DEV_ICB+16
        12 001154   001000 036003                    ADLQ    512,DU
        12 001155   000020 552040 xsym               STBQ    DEV_ICB+16,'40'O

      669     8057    3               END;

      670     8058    2           IF S12$->OUT$BLK.SUBLK$(S12$->OUT$BLK.NSUBLKS-1)->OUT$BLK.CODE=3

   8058 12 001156   300001 221100                    LDX1    1,,PR3
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:121  
        12 001157   300002 474511                    LDP4    2,X1,PR3
        12 001160   400000 722100                    LXL2    0,,PR4
        12 001161   000003 102003                    CMPX2   3,DU
        12 001162   001177 601000 12                 TNZ     s:8067

      671     8059    2            THEN
      672     8060    3            DO;

      673     8061    3               NL$ = S12$->OUT$BLK.SUBLK$(S12$->OUT$BLK.NSUBLKS-1);

   8061 12 001163   300002 236111                    LDQ     2,X1,PR3
        12 001164   000002 756000 10                 STQ     NL$

      674     8062    3               IF NL$->OUT$BLK.NSUBLKS=1 AND SL$->OUT$BLK.NSUBLKS=1

   8062 12 001165   000002 475400 10                 LDP5    NL$
        12 001166   500001 223100                    LDX3    1,,PR5
        12 001167   000001 103003                    CMPX3   1,DU
        12 001170   001204 601000 12                 TNZ     s:8070
        12 001171   100001 224100                    LDX4    1,,PR1
        12 001172   000001 104003                    CMPX4   1,DU
        12 001173   001204 601000 12                 TNZ     s:8070

      675     8063    3                THEN
      676     8064    3                  SINGLE_INSPEC = 1;       /* INDICATE SINGLE INPUT SPEC         */

   8064 12 001174   000001 235007                    LDA     1,DL
        12 001175   000000 755000 xsym               STA     SINGLE_INSPEC

      677     8065    3               END;

   8065 12 001176   001204 710000 12                 TRA     s:8070

      678     8066    2            ELSE
      679     8067    2              IF SL$->OUT$BLK.NSUBLKS=1

   8067 12 001177   100001 223100                    LDX3    1,,PR1
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:122  
        12 001200   000001 103003                    CMPX3   1,DU
        12 001201   001204 601000 12                 TNZ     s:8070

      680     8068    2               THEN
      681     8069    2                 SINGLE_INSPEC = 1;        /* INDICATES SINGLE INPUT SPEC        */

   8069 12 001202   000001 236007                    LDQ     1,DL
        12 001203   000000 756000 xsym               STQ     SINGLE_INSPEC

      682     8070    2           FPT_FID_IN.TEXTFID_   = VECTOR(ADDR(DEV_ICB.FID)->TEXT$C.STRING);

   8070 12 001204   000020 236000 xsym               LDQ     DEV_ICB+16
        12 001205   000033 772000                    QRL     27
        12 001206   000064 737000                    LLS     52
        12 001207   000140 135007                    SBLA    96,DL
        12 001210   000053 236000 13                 LDQ     43
        12 001211   000002 757000 xsym               STAQ    FPT_FID_IN+2

      683     8071    2   CALL_FID: CALL VPD$FID(FPT_FID_IN,1) ALTRET(FID_ALT_2);

   8071 12 001212   000011 630400 13    CALL_FID     EPPR0   9
        12 001213   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 001214   000000 701000 xent               TSX1    VPD$FID
        12 001215   001331 702000 12                 TSX2    FID_ALT_2

      684     8072    2           IF IN_NAME.LEN=0

   8072 12 001216   000000 236000 xsym               LDQ     IN_NAME
        12 001217   777000 316003                    CANQ    -512,DU
        12 001220   001223 601000 12                 TNZ     s:8075

      685     8073    2            THEN
      686     8074    2              RESULTS_FID_IN.NAME = '0'B;

   8074 12 001221   000031 236000 xsym               LDQ     B_VECTNIL+25
        12 001222   000000 356000 xsym               ANSQ    RESULTS_FID_IN

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:123  
      687     8075    2           IF SL$ = ADDR(NIL)

   8075 12 001223   000000 236000 10                 LDQ     SL$
        12 001224   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 001225   001230 601000 12                 TNZ     s:8078

      688     8076    2            THEN                           /* The default SOURCELIST was used    */
      689     8077    2              RESULTS_FID_IN.ACCT = '0'B;

   8077 12 001226   000054 236000 13                 LDQ     44
        12 001227   000000 356000 xsym               ANSQ    RESULTS_FID_IN

      690     8078    2           CALL VPD$GET_IN_DEV_MASK(DEV_ICB);

   8078 12 001230   000055 630400 13                 EPPR0   45
        12 001231   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 001232   000000 701000 xent               TSX1    VPD$GET_IN_DEV_MASK
        12 001233   000000 011000                    NOP     0

      691     8079    2           IF NL$~=ADDR(NIL)               /* NAP LIST SPECIFIED?                */

   8079 12 001234   000002 236000 10                 LDQ     NL$
        12 001235   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 001236   001325 600000 12                 TZE     s:8103

      692     8080    2            THEN
      693     8081    3            DO;                            /* YES...CHECK FID PARTS              */

      694     8082    3               IF RESULTS_FID_IN.NAME OR RESULTS_FID_IN.ACCT OR

   8082 12 001237   000000 234000 xsym               SZN     RESULTS_FID_IN
        12 001240   001250 604000 12                 TMI     s:8087
        12 001241   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 001242   200000 316003                    CANQ    65536,DU
        12 001243   001250 601000 12                 TNZ     s:8087
        12 001244   100000 316003                    CANQ    32768,DU
        12 001245   001250 601000 12                 TNZ     s:8087
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:124  
        12 001246   020000 316003                    CANQ    8192,DU
        12 001247   001314 600000 12                 TZE     s:8099

      695     8083    3                 RESULTS_FID_IN.PASS OR RESULTS_FID_IN.WSN
      696     8084    3                THEN
      697     8085    4                DO;

      698     8086                       /* Name, Address, Pass not allowed on DEVICE SPEC (or bad opt  */
      699     8087    4                   CALL VPL$ERR_PROC(3,7,'06'O,,VECTOR(DEV_ICB.FID),

   8087 12 001250   000002 470400 10                 LDP0    NL$
        12 001251   000003 471500                    LDP1    3,,PR0
        12 001252   100003 473500                    LDP3    3,,PR1
        12 001253   300003 474500                    LDP4    3,,PR3
        12 001254   000100 101500                    MRL     fill='000'O
        12 001255   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        12 001256   200020 000002                    ADSC9   OPT_IDX+1,,AUTO          cn=0,n=2
        12 001257   200020 220100                    LDX0    OPT_IDX+1,,AUTO
        12 001260   000001 621010                    EAX1    1,X0
        12 001261   000000 635011                    EAA     0,X1
        12 001262   000002 771000                    ARL     2
        12 001263   000140 135007                    SBLA    96,DL
        12 001264   200021 454500                    STP4    OPT_IDX+2,,AUTO
        12 001265   200021 236100                    LDQ     OPT_IDX+2,,AUTO
        12 001266   200022 757100                    STAQ    OPT_IDX+3,,AUTO
        12 001267   000002 236000 13                 LDQ     2
        12 001270   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001271   200032 757100                    STAQ    OPT_IDX+11,,AUTO
        12 001272   200022 631500                    EPPR1   OPT_IDX+3,,AUTO
        12 001273   200031 451500                    STP1    OPT_IDX+10,,AUTO
        12 001274   000060 236000 13                 LDQ     48
        12 001275   200030 756100                    STQ     OPT_IDX+9,,AUTO
        12 001276   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001277   000003 235000 13                 LDA     3
        12 001300   200026 757100                    STAQ    OPT_IDX+7,,AUTO
        12 001301   000062 237000 13                 LDAQ    50
        12 001302   200024 757100                    STAQ    OPT_IDX+5,,AUTO
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:125  
        12 001303   200024 630500                    EPPR0   OPT_IDX+5,,AUTO
        12 001304   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001305   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001306   000000 011000                    NOP     0

      700     8088    4                     VECTOR(NL$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0)
      701     8089    4                     -> OUT$BLK.SUBLK$(0) -> TEXT$C),,1);
      702     8090        /*E* ERROR:   VPF-00007
      703     8091             MESSAGE: Bad device spec %(%U1) %or input option %(%U2...etc)%
      704     8092            MESSAGE1: If% %U1 was% intended as a device spec; Name, Account,
      705     8093                      and Password are illegal.  If% %U2...etc was% intended as an
      706     8094                      input option, it isn't one.
      707     8095        */
      708     8096    4                   RET_VAL = 2;

   8096 12 001307   000002 235007                    LDA     2,DL
        12 001310   200011 470500                    LDP0    @RET_VAL,,AUTO
        12 001311   000000 755100                    STA     0,,PR0

      709     8097    4                   RETURN;

   8097 12 001312   200010 221300                    LDX1  ! NEW_FID_LEN+1,,AUTO
        12 001313   000001 702211                    TSX2  ! 1,X1

      710     8098    4                   END;
      711     8099    3               IF IN_OPT$~=ADDR(NIL)

   8099 12 001314   200005 236100                    LDQ     IN_OPT$,,AUTO
        12 001315   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 001316   001325 600000 12                 TZE     s:8103

      712     8100    3                THEN
      713     8101    3                  CALL VERIFY_STUFF_IN_OPTS(RET_VAL,0);

   8101 12 001317   000064 236000 13                 LDQ     52
        12 001320   200016 756100                    STQ     @RET_VAL+1,,AUTO
        12 001321   200011 236100                    LDQ     @RET_VAL,,AUTO
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:126  
        12 001322   200015 756100                    STQ     CODE+2,,AUTO
        12 001323   001434 701000 12                 TSX1    VERIFY_STUFF_IN_OPTS
        12 001324   000000 011000                    NOP     0

      714     8102    3               END;

      715     8103    2           CALL ADD_FROM_INFO;

   8103 12 001325   000670 701000 12                 TSX1    ADD_FROM_INFO
        12 001326   000000 011000                    NOP     0

      716     8104    2           RETURN;

   8104 12 001327   200010 221300                    LDX1  ! NEW_FID_LEN+1,,AUTO
        12 001330   000001 702211                    TSX2  ! 1,X1

   8102 12 001331                       FID_ALT_2    null
      717     8105        /**/
      718     8106    2   FID_ALT_2: ;
      719     8107    2           RET_VAL = 2;

   8107 12 001331   000002 235007                    LDA     2,DL
        12 001332   200011 470500                    LDP0    @RET_VAL,,AUTO
        12 001333   000000 755100                    STA     0,,PR0

      720     8108    2           RETURN;

   8108 12 001334   200010 221300                    LDX1  ! NEW_FID_LEN+1,,AUTO
        12 001335   000001 702211                    TSX2  ! 1,X1

      721     8109    2   END NEXT_SOURCE;
      722     8110        %EJECT;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:127  
      723     8111    1   SET_SPEC_TYPE: PROC(RET_VAL);

   8111 12 001336   200010 741300       SET_SPEC_TY* STX1  ! NEW_FID_LEN+1,,AUTO

      724     8112        /*I* NAME: SET_SPEC_TYPE
      725     8113             PURPOSE: To set the input specification type variable, ICB.SPEC_TYPE,
      726     8114                      to a meaningful value.
      727     8115             CALL: CALL SET_SPEC_TYPE(RET_VAL);
      728     8116             DESCRIPTION: This procedure sets ICB.SPEC_TYPE to one of the following
      729     8117                          values:
      730     8118                              VALUE         DESCRIPTION
      731     8119                              -----         -----------
      732     8120                                1           single FID reference
      733     8121                                2           full range of directory device
      734     8122                                3           sub range of directory device
      735     8123                                4           wildcard of type ?something
      736     8124                                5           wildcard without initial '?'
      737     8125                                6           (undefined)
      738     8126                                7           single FSN reference
      739     8127                                8           FSN range reference
      740     8128                          If a wildcard spec. is returned, RESULTS_FID_IN.NAME
      741     8129                          will have been set to '0'B.
      742     8130                          If any errors are detected, RET_VAL is set to 2.
      743     8131        */
      744     8132    2   DCL RET_VAL SBIN WORD;
      745     8133    2   DCL I SBIN WORD;
      746     8134    2           IF CMD_MASK(2)                  /* If COPYALL                         */

   8134 12 001337   000000 236000 xsym               LDQ     CMD_MASK
        12 001340   100000 316003                    CANQ    32768,DU
        12 001341   001353 600000 12                 TZE     s:8142
        12 001342   000171 236000 xsym               LDQ     ICB+121
        12 001343   040000 316003                    CANQ    16384,DU
        12 001344   001353 600000 12                 TZE     s:8142
        12 001345   000044 235000 xsym               LDA     ICB+36
        12 001346   001353 601000 12                 TNZ     s:8142

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:128  
      747     8135    2             AND ICB.DEV_MASK.DEV_TAPE     /* of FT                              */
      748     8136    2             AND ICB.FSN = '0'O            /* and FSN not specified              */
      749     8137    2            THEN
      750     8138    3            DO;

      751     8139    3               ICB.FSN.START = 1;          /* START at 1                         */

   8139 12 001347   000001 220003                    LDX0    1,DU
        12 001350   000044 740000 xsym               STX0    ICB+36

      752     8140    3               ICB.FSN.FINISH = BITBIN('777777'O); /* and dont stop              */

   8140 12 001351   777777 222003                    LDX2    -1,DU
        12 001352   000044 442000 xsym               SXL2    ICB+36

      753     8141    3               END;

      754     8142    2           IF ICB.DEV_MASK & '300'O        /* MANAGED TAPE OR FILE               */

   8142 12 001353   000171 236000 xsym               LDQ     ICB+121
        12 001354   777000 376003                    ANQ     -512,DU
        12 001355   300000 376003                    ANQ     98304,DU
        12 001356   001417 600000 12                 TZE     s:8166

      755     8143    2            THEN
      756     8144    2              IF ICB.NAME_RANGE_END ~= ' '

   8144 12 001357   040000 106400                    CMPC    fill='040'O
        12 001360   000140 000037 xsym               ADSC9   ICB+96                   cn=0,n=31
        12 001361   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
        12 001362   001366 600000 12                 TZE     s:8148

      757     8145    2               THEN
      758     8146    2                 ICB.SPEC_TYPE = 3;        /* SUB-RANGE                          */

   8146 12 001363   000003 235007                    LDA     3,DL
        12 001364   000017 755000 xsym               STA     ICB+15
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:129  
        12 001365   001421 710000 12                 TRA     s:8167

      759     8147    2               ELSE
      760     8148    2                 IF RESULTS_FID_IN.NAME

   8148 12 001366   000000 234000 xsym               SZN     RESULTS_FID_IN
        12 001367   001414 605000 12                 TPL     s:8164

      761     8149    2                  THEN                     /* A name was found                   */
      762     8150    3                  DO;

      763     8151    3                     IF RESULTS_FID_IN.TYPE.NAME ~= %UMF$SIMPLE_STRING#

   8151 12 001370   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 001371   777000 316007                    CANQ    -512,DL
        12 001372   001376 600000 12                 TZE     s:8156

      764     8152    3                      THEN                 /* NAME was quoted or in octal        */
      765     8153    3                        ICB.SPEC_TYPE = 1; /* Do not check for wildness          */

   8153 12 001373   000001 235007                    LDA     1,DL
        12 001374   000017 755000 xsym               STA     ICB+15
        12 001375   001421 710000 12                 TRA     s:8167

      766     8154    3                      ELSE
      767     8155    4                      DO;

      768     8156    4                         CALL VPD$ANAL_NAME(IN_NAME,ICB.SPEC_TYPE);

   8156 12 001376   000065 630400 13                 EPPR0   53
        12 001377   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 001400   000000 701000 xent               TSX1    VPD$ANAL_NAME
        12 001401   000000 011000                    NOP     0

      769     8157    5                         DO CASE(ICB.SPEC_TYPE);

   8157 12 001402   000017 235000 xsym               LDA     ICB+15
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:130  
        12 001403   000004 135007                    SBLA    4,DL
        12 001404   000002 115007                    CMPA    2,DL
        12 001405   001407 602005 12                 TNC     s:8157+5,AL
        12 001406   001421 710000 12                 TRA     s:8167
        12 001407   001411 710000 12                 TRA     s:8159
        12 001410   001411 710000 12                 TRA     s:8159

      770     8158    5                          CASE(4,5);       /* WILDCARD                           */

      771     8159    5                            RESULTS_FID_IN.NAME = '0'B;

   8159 12 001411   000031 236000 xsym               LDQ     B_VECTNIL+25
        12 001412   000000 356000 xsym               ANSQ    RESULTS_FID_IN

      772     8160    5                          END;             /* END CASE                           */

      773     8161    4                         END;

      774     8162    3                     END;

   8162 12 001413   001421 710000 12                 TRA     s:8167

      775     8163    2                  ELSE                     /* Name not provided                  */
      776     8164    2                    ICB.SPEC_TYPE = 2;     /* FULL RANGE                         */

   8164 12 001414   000002 235007                    LDA     2,DL
        12 001415   000017 755000 xsym               STA     ICB+15
        12 001416   001421 710000 12                 TRA     s:8167

      777     8165    2            ELSE                           /* Not file or managed tape           */
      778     8166    2              ICB.SPEC_TYPE = 1;           /* SINGLE FILE SPEC                   */

   8166 12 001417   000001 235007                    LDA     1,DL
        12 001420   000017 755000 xsym               STA     ICB+15

      779     8167    2           IF ICB.FSN.START>0              /* FSN's OVERRIDE OTHER TYPES         */

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:131  
   8167 12 001421   000044 220000 xsym               LDX0    ICB+36
        12 001422   001432 600000 12                 TZE     s:8174

      780     8168    2            THEN
      781     8169    2              IF ICB.FSN.FINISH>0

   8169 12 001423   000044 721000 xsym               LXL1    ICB+36
        12 001424   001430 600000 12                 TZE     s:8173

      782     8170    2               THEN
      783     8171    2                 ICB.SPEC_TYPE = 8;        /* FSN RANGE                          */

   8171 12 001425   000010 235007                    LDA     8,DL
        12 001426   000017 755000 xsym               STA     ICB+15
        12 001427   001432 710000 12                 TRA     s:8174

      784     8172    2               ELSE
      785     8173    2                 ICB.SPEC_TYPE = 7;        /* SINGLE FSN                         */

   8173 12 001430   000007 235007                    LDA     7,DL
        12 001431   000017 755000 xsym               STA     ICB+15

      786     8174    2   END SET_SPEC_TYPE;

   8174 12 001432   200010 221300                    LDX1  ! NEW_FID_LEN+1,,AUTO
        12 001433   000001 702211                    TSX2  ! 1,X1

      787     8175        %EJECT;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:132  
      788     8176    1   VERIFY_STUFF_IN_OPTS: PROC(RET_VAL,DEV_OR_FID);

   8176 12 001434   200014 741300       VERIFY_STUF* STX1  ! CODE+1,,AUTO

      789     8177        /*I* NAME: VERIFY_STUFF_IN_OPTS
      790     8178             PURPOSE: To validate and store into ICB (Input Control Block) or
      791     8179                      DEV_ICB (DEVice ICB) the input options.
      792     8180             CALL: CALL VERIFY_STUFF_IN_OPTS(RET_VAL,DEV_OR_FID);
      793     8181             DESCRIPTION: This procedure drives the processing of the input options.
      794     8182                          If DEV_OR_FID=0 meaning this is a device options list,
      795     8183                          DEV_ICB is copied to and finally back from ICB since
      796     8184                          PROCESS_INPUT_OPT only fills ICB. REC_SEL_CNT is used
      797     8185                          to facilitate correct overwriting of ICB.REC_SEL for
      798     8186                          occasions where a fid options list updates a device
      799     8187                          options list. RET_VAL is set to 2 by PROCESS_INPUT_OPT if
      800     8188                          any option was in error.
      801     8189        */
      802     8190    2   DCL RET_VAL SBIN WORD;
      803     8191    2   DCL DEV_OR_FID SBIN WORD;
      804     8192    2   DCL OPT_IDX SBIN WORD;
      805     8193    2           CON_DUP_TBL = '0'B;

   8193 12 001435   000000 450000 xsym               STZ     CON_DUP_TBL

      806     8194    2           REC_SEL_CNT = 0;                /* USED TO HOLD NUMBER OF             */

   8194 12 001436   000000 450000 xsym               STZ     REC_SEL_CNT

      807     8195                                                /* ELEMENTS IN REC_SEL TABLE.         */
      808     8196                                                /* IF ON COMPLETION, IT IS>0,         */
      809     8197                                                /* THEN IT IS MOVED TO                */
      810     8198                                                /* ICB.REC_SEL.CNT INSURING           */
      811     8199                                                /* OVERWRITING OF REC_SEL FIELD       */
      812     8200                                                /* ONLY IF NECESSARY. IT LEAVES       */
      813     8201                                                /* DEVICE OPTIONS INTACT              */
      814     8202                                                /* OTHERWISE.                         */
      815     8203    2           IF DEV_OR_FID=0                 /* If device options exist...         */
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:133  

   8203 12 001437   200016 470500                    LDP0    @DEV_OR_FID,,AUTO
        12 001440   000000 235100                    LDA     0,,PR0
        12 001441   001445 601000 12                 TNZ     s:8206

      816     8204    2            THEN
      817     8205    2              ICB = DEV_ICB;               /* WILL BE COPIED BACK LATER.         */

   8205 12 001442   000000 100400                    MLR     fill='000'O
        12 001443   000000 001214 xsym               ADSC9   DEV_ICB                  cn=0,n=652
        12 001444   000000 001214 xsym               ADSC9   ICB                      cn=0,n=652

      818     8206    2           OPT_IDX = 0;

   8206 12 001445   200017 450100                    STZ     OPT_IDX,,AUTO

      819     8207    3           DO WHILE(OPT_IDX<IN_OPT$->OUT$BLK.NSUBLKS);

   8207 12 001446   200005 471500                    LDP1    IN_OPT$,,AUTO
        12 001447   100001 236100                    LDQ     1,,PR1
        12 001450   000022 772000                    QRL     18
        12 001451   200017 116100                    CMPQ    OPT_IDX,,AUTO
        12 001452   001476 604400 12                 TMOZ    s:8214

      820     8208    3              CALL VPF$PROCESS_INPUT_OPT(IN_OPT$->OUT$BLK.SUBLK$(OPT_IDX))

   8208 12 001453   200017 236100                    LDQ     OPT_IDX,,AUTO
        12 001454   000022 736000                    QLS     18
        12 001455   000003 036003                    ADLQ    3,DU
        12 001456   200005 036100                    ADLQ    IN_OPT$,,AUTO
        12 001457   200020 756100                    STQ     OPT_IDX+1,,AUTO
        12 001460   200020 630500                    EPPR0   OPT_IDX+1,,AUTO
        12 001461   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 001462   000000 701000 xent               TSX1    VPF$PROCESS_INPUT_OPT
        12 001463   001465 702000 12                 TSX2    s:8210
        12 001464   001470 710000 12                 TRA     s:8212

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:134  
      821     8209    4               WHENALTRETURN DO;

      822     8210    4                  RET_VAL=2;

   8210 12 001465   000002 235007                    LDA     2,DL
        12 001466   200015 470500                    LDP0    @RET_VAL,,AUTO
        12 001467   000000 755100                    STA     0,,PR0

      823     8211    4                  END;

      824     8212    3              OPT_IDX = OPT_IDX+1;

   8212 12 001470   200017 054100                    AOS     OPT_IDX,,AUTO

      825     8213    3              END;

   8213 12 001471   200005 470500                    LDP0    IN_OPT$,,AUTO
        12 001472   000001 236100                    LDQ     1,,PR0
        12 001473   000022 772000                    QRL     18
        12 001474   200017 116100                    CMPQ    OPT_IDX,,AUTO
        12 001475   001453 605400 12                 TPNZ    s:8208

      826     8214    2           IF REC_SEL_CNT>0

   8214 12 001476   000000 235000 xsym               LDA     REC_SEL_CNT
        12 001477   001501 604400 12                 TMOZ    s:8217

      827     8215    2            THEN
      828     8216    2              ICB.REC_SEL.CNT = REC_SEL_CNT;

   8216 12 001500   000047 755000 xsym               STA     ICB+39

      829     8217    2           IF DEV_OR_FID=0                 /* IF DEVICE OPTIONS...               */

   8217 12 001501   200016 470500                    LDP0    @DEV_OR_FID,,AUTO
        12 001502   000000 235100                    LDA     0,,PR0
        12 001503   001507 601000 12                 TNZ     s:8221
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:135  

      830     8218    2            THEN
      831     8219    2              DEV_ICB = ICB;               /* Copy the original back.            */

   8219 12 001504   000000 100400                    MLR     fill='000'O
        12 001505   000000 001214 xsym               ADSC9   ICB                      cn=0,n=652
        12 001506   000000 001214 xsym               ADSC9   DEV_ICB                  cn=0,n=652

      832     8220        %EJECT;
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:136  
      833     8221    2   END VERIFY_STUFF_IN_OPTS;

   8221 12 001507   200014 221300                    LDX1  ! CODE+1,,AUTO
        12 001510   000001 702211                    TSX2  ! 1,X1
      834     8222    1   END VPF$GET_NEXT_SPEC;
      835     8223        %EOD;

PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:137  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$GET_NEXT_SPEC.
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:138  

 **** Variables and constants ****

  ****  Section 010  Data  VPF$GET_NEXT_SPEC

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    56-0-0/c CHAR(10)    r     1 END_DUMMY                 46-0-0/c STRC(288)   r     1 END_NAME
    16-0-0/d STRC(864)   r     1 FPT_FID_END                2-0-0/w PTR         r     1 NL$
     3-0-0/w SBIN        r     1 NL_IDX                     4-0-0/d STRC(324)   r     1 RESULTS_FID_END
     0-0-0/w PTR         r     1 SL$                        1-0-0/w SBIN        r     1 SL_IDX

  ****  Section 011 RoData VPF$GET_NEXT_SPEC

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR        r     1 DOT_LIT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    16-0-0/w PTR         r     1 @DEV_OR_FID                3-0-0/w PTR         r     1 @RET_VAL
    11-0-0/w PTR         r     1 @RET_VAL                  11-0-0/w PTR         r     1 @RET_VAL
    15-0-0/w PTR         r     1 @RET_VAL                   4-0-0/w PTR         r     1 @SOURCELIST$
    13-0-0/w SBIN        r     1 CODE                      *0-0-0/w SBIN        r     1 DEV_OR_FID
     5-0-0/w PTR         r     1 IN_OPT$                    6-0-0/w PTR         r     1 NE$
     7-0-0/w SBIN        r     1 NEW_FID_LEN               17-0-0/w SBIN        r     1 OPT_IDX
    *0-0-0/w SBIN        r     1 RET_VAL                   *0-0-0/w SBIN        r     1 RET_VAL
    *0-0-0/w SBIN        r     1 RET_VAL                   *0-0-0/w SBIN        r     1 RET_VAL
    12-0-0/w PTR         r     1 S12$                      *0-0-0/w PTR         r     1 SOURCELIST$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:139  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b BIT         r     1 CMD_MASK(0:71)
     0-0-0/b BIT         r     1 CON_DUP_TBL(0:35)
     0-0-0/d STRC(5868)  r     1 DEF_ICB                    0-0-0/d STRC(5868)  r     1 DEV_ICB
     0-0-0/d STRC(864)   r     1 FPT_FID_IN                 0-0-0/c CHAR(8)     r     1 FROM_ACCT
     0-0-0/b UBIN(9)     r     1 FROM_ASN                   0-0-0/c STRC(288)   r     1 FROM_NAME
     0-0-0/c CHAR(8)     r     1 FROM_PASS                  0-0-0/c CHAR(4)     r     1 FROM_RES
     0-0-0/w STRC(1116)  r     1 FROM_SN                    0-0-0/c CHAR(8)     r     1 FROM_WSN
     0-0-0/d STRC(5868)  r     1 ICB                        0-0-0/c CHAR(8)     r     1 IN_ACCT
     0-0-0/b UBIN(9)     r     1 IN_ASN                     0-0-0/c STRC(288)   r     1 IN_NAME
     0-0-0/c CHAR(8)     r     1 IN_PASS                    0-0-0/c CHAR(4)     r     1 IN_RES
     0-0-0/w STRC(1116)  r     1 IN_SN                      0-0-0/c CHAR(8)     r     1 IN_WSN
     0-0-0/w SBIN        r     1 REC_SEL_CNT                0-0-0/d STRC(324)   r     1 RESULTS_FID_FROM
     0-0-0/d STRC(324)   r     1 RESULTS_FID_IN             0-0-0/w SBIN        r     1 SINGLE_INSPEC
     0-0-0/b BIT         r     1 THIS_STD_FILE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w ASTR(153)   r     1 OUT$SYM
     0-0-0/c ASTR(9)     r     1 TEXT$C                     0-0-0/c ASTR(9)     r     1 TEXT$C_BIT


   Procedure VPF$GET_NEXT_SPEC requires 841 words for executable code.
   Procedure VPF$GET_NEXT_SPEC requires 28 words of local(AUTO) storage.
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:140  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:141  
          MINI XREF LISTING

ADD_FROM_INFO
      7917**PROC     7770--CALL     8103--CALL
B$JIT.CPFLAGS1.SLEAZE
       162**DCL       162--REDEF
B$JIT.ERR.MID
        69**DCL        69--REDEF
B$JIT.JRESPEAK
       230**DCL       231--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       339**DCL       339--REDEF     340--REDEF
B$JIT.PNR
       243**DCL       243--REDEF
B$JIT.TSLINE
       337**DCL       338--REDEF
B$JIT$
      6316**DCL        63--IMP-PTR
BREAK_LOC
      5551**DCL      5551--REDEF
CALL_FID IN PROCEDURE NEXT_SOURCE
      8071**LABEL    8012--GOTO
CMD_MASK
      5553**DCL      7825>>IF       7829>>IF       7841>>IF       8134>>IF
CODE IN PROCEDURE NEXT_SOURCE
      7991**DCL      8040<<ASSIGN   8043<<ASSIGN   8044>>IF       8050<<ASSIGN   8052>>IF
CON_DUP_TBL
      5549**DCL      8193<<ASSIGN
DEF_ICB.A_EA_C
      6143**DCL      7888>>ASSIGN
DEF_ICB.COLS
      6145**DCL      7891>>ASSIGN
DEF_ICB.CREATOR
      6221**DCL      7869>>ASSIGN
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:142  
DEF_ICB.CREATOR_NEG
      6220**DCL      7868>>ASSIGN
DEF_ICB.CREATOR_SEL
      6219**DCL      7867>>ASSIGN
DEF_ICB.DATE
      6179**DCL      7875>>ASSIGN
DEF_ICB.FFID
      6171**DCL      7894>>ASSIGN
DEF_ICB.FID.STRING
      6149**DCL      6150--REDEF
DEF_ICB.ORG
      6169**DCL      7885>>ASSIGN
DEF_ICB.ORG_NEG
      6170**DCL      7884>>ASSIGN
DEF_ICB.SORTING_ORDER
      6227**DCL      7878>>ASSIGN
DEF_ICB.SRCHCOND
      6186**DCL      7872>>ASSIGN
DEF_ICB.TYPE
      6173**DCL      7881>>ASSIGN
DEV_ICB
      6016**DCL      7727>>ASSIGN   7997<<ASSIGN   8078<>CALL     8205>>ASSIGN   8219<<ASSIGN
DEV_ICB.FID
      6033**DCL      8032<<ASSIGN   8070--ASSIGN   8070--ASSIGN   8087--CALL
DEV_ICB.FID.LEN
      6034**DCL      8033>>IF       8055>>ASSIGN   8056<<ASSIGN   8056>>ASSIGN
DEV_ICB.FID.STRING
      6035**DCL      6036--REDEF    8033--IF
DEV_ICB.FID.STR_ARY
      6036**DCL      8055<<ASSIGN
DEV_ICB.NAME_RANGE_END
      6058**DCL      7998<<ASSIGN
DEV_OR_FID IN PROCEDURE VERIFY_STUFF_IN_OPTS
      8191**DCL      8176--PROC     8203>>IF       8217>>IF
DOT_LIT IN PROCEDURE NEXT_SOURCE
      7992**DCL      8011--ASSIGN
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:143  
EI_KEY.KEY
      6247**DCL      6247--REDEF    6247--REDEF    6247--REDEF
END_DUMMY
      7392**DCL      7378--DCLINIT  7379--DCLINIT  7379--DCLINIT  7379--DCLINIT  7380--DCLINIT  7380--DCLINIT
END_NAME
      7389**DCL      7378--DCLINIT
END_NAME.STRING
      7391**DCL      7805>>ASSIGN
EO_OCB.TYPE
      5747**DCL      5748--REDEF
FID_ALT_1
      7903**LABEL    7766--CALLALT  7789--CALLALT
FID_ALT_2 IN PROCEDURE NEXT_SOURCE
      8102**LABEL    8071--CALLALT
FPT_CLOSE_EI.SN_
      7088**DCL      7088--REDEF
FPT_CLOSE_EI.UTL_
      7089**DCL      7089--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      7103**DCL      7103--REDEF
FPT_CLOSE_EI.V.TYPE#
      7101**DCL      7101--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      7098**DCL      7098--REDEF    7100--REDEF
FPT_CLOSE_PTL.SN_
      7214**DCL      7214--REDEF
FPT_CLOSE_PTL.UTL_
      7215**DCL      7215--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      7229**DCL      7229--REDEF
FPT_CLOSE_PTL.V.TYPE#
      7227**DCL      7227--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      7224**DCL      7224--REDEF    7226--REDEF
FPT_CLOSE_READ.SN_
      7130**DCL      7130--REDEF
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:144  
FPT_CLOSE_READ.UTL_
      7131**DCL      7131--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      7145**DCL      7145--REDEF
FPT_CLOSE_READ.V.TYPE#
      7143**DCL      7143--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      7140**DCL      7140--REDEF    7142--REDEF
FPT_CLOSE_SI.SN_
      7298**DCL      7298--REDEF
FPT_CLOSE_SI.UTL_
      7299**DCL      7299--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      7313**DCL      7313--REDEF
FPT_CLOSE_SI.V.TYPE#
      7311**DCL      7311--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      7308**DCL      7308--REDEF    7310--REDEF
FPT_CLOSE_STD.SN_
      7256**DCL      7256--REDEF
FPT_CLOSE_STD.UTL_
      7257**DCL      7257--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      7271**DCL      7271--REDEF
FPT_CLOSE_STD.V.TYPE#
      7269**DCL      7269--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      7266**DCL      7266--REDEF    7268--REDEF
FPT_CLSEI_FT.SN_
      7172**DCL      7172--REDEF
FPT_CLSEI_FT.UTL_
      7173**DCL      7173--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      7187**DCL      7187--REDEF
FPT_CLSEI_FT.V.TYPE#
      7185**DCL      7185--REDEF
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:145  
FPT_CLSEI_FT.V.XTNSIZE#
      7182**DCL      7182--REDEF    7184--REDEF
FPT_FID_END
      7377**DCL      7789<>CALL
FPT_FID_END.TEXTFID_
      7377**DCL      7787<<ASSIGN
FPT_FID_END.V
      7381**DCL      7377--DCLINIT
FPT_FID_IN
      6330**DCL      7766<>CALL     8071<>CALL
FPT_FID_IN.TEXTFID_
      6330**DCL      7765<<ASSIGN   8011<<ASSIGN   8070<<ASSIGN
FPT_OPEN_EI.ACSVEH_
      6743**DCL      6744--REDEF
FPT_OPEN_EI.ALTKEYS_
      6749**DCL      6750--REDEF    6750--REDEF
FPT_OPEN_EI.HDR_
      6748**DCL      6749--REDEF
FPT_OPEN_EI.TAB_
      6747**DCL      6748--REDEF
FPT_OPEN_EI.UHL_
      6741**DCL      6742--REDEF    6742--REDEF
FPT_OPEN_EI.V.FSN#
      6781**DCL      6781--REDEF    6781--REDEF
FPT_OPEN_EI.WSN_
      6747**DCL      6747--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6852**DCL      6853--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6858**DCL      6859--REDEF    6859--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6857**DCL      6858--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6856**DCL      6857--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6850**DCL      6851--REDEF    6851--REDEF
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:146  
FPT_OPEN_EI_SAVE.V.FSN#
      6890**DCL      6890--REDEF    6890--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6856**DCL      6856--REDEF
FPT_OPEN_OUT.ACSVEH_
      6634**DCL      6635--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6640**DCL      6641--REDEF    6641--REDEF
FPT_OPEN_OUT.HDR_
      6639**DCL      6640--REDEF
FPT_OPEN_OUT.TAB_
      6638**DCL      6639--REDEF
FPT_OPEN_OUT.UHL_
      6632**DCL      6633--REDEF    6633--REDEF
FPT_OPEN_OUT.V.FSN#
      6672**DCL      6672--REDEF    6672--REDEF
FPT_OPEN_OUT.WSN_
      6638**DCL      6638--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6525**DCL      6526--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6531**DCL      6532--REDEF    6532--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6530**DCL      6531--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6529**DCL      6530--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6523**DCL      6524--REDEF    6524--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6563**DCL      6563--REDEF    6563--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6529**DCL      6529--REDEF
FPT_READ_STD.STATION_
      6953**DCL      6954--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6965**DCL      6965--REDEF
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:147  
FPT_READ_STD.V.INDX#
      6963**DCL      6963--REDEF
FPT_READ_UC.STATION_
      6914**DCL      6915--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6926**DCL      6926--REDEF
FPT_READ_UC.V.INDX#
      6924**DCL      6924--REDEF
FPT_WRITE_ME.STATION_
      7022**DCL      7022--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      7029**DCL      7029--REDEF
FPT_WRITE_OUT.STATION_
      7053**DCL      7053--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      7060**DCL      7060--REDEF
FPT_WRITE_UC.STATION_
      6991**DCL      6991--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6998**DCL      6998--REDEF
FROM_ACCT
      5881**DCL      7946>>ASSIGN
FROM_ASN
      5900**DCL      7931>>ASSIGN
FROM_NAME
      5880**DCL      7940>>ASSIGN
FROM_PASS
      5881**DCL      7952>>ASSIGN
FROM_RES
      5881**DCL      7932>>ASSIGN
FROM_SN
      5892**DCL      7933>>ASSIGN
FROM_SN.SN
      5897**DCL      5898--REDEF
FROM_WSN
      5900**DCL      7958>>ASSIGN
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:148  
GETCMD.OUT$
      5104**DCL      5110--REDEF
ICB
      5902**DCL      7727<<ASSIGN   7771<>CALL     8205<<ASSIGN   8219>>ASSIGN
ICB.A_EA_C
      5915**DCL      7887>>IF       7888<<ASSIGN
ICB.COLS
      5917**DCL      7890>>IF       7891<<ASSIGN
ICB.CREATOR
      5993**DCL      7869<<ASSIGN
ICB.CREATOR_NEG
      5992**DCL      7868<<ASSIGN
ICB.CREATOR_SEL
      5991**DCL      7866>>IF       7867<<ASSIGN
ICB.DATE
      5951**DCL      7875<<ASSIGN
ICB.DATE.TYPE
      5952**DCL      7874>>IF
ICB.DEV_MASK
      5971**DCL      7777>>IF       7825>>IF       7829>>IF       8142>>IF
ICB.DEV_MASK.DEV_TAPE
      5975**DCL      8134>>IF
ICB.DEV_MASK.MAN_DISC
      5973**DCL      7841>>IF
ICB.FFID
      5943**DCL      7893>>IF       7894<<ASSIGN
ICB.FID
      5919**DCL      7765--ASSIGN   7765--ASSIGN   7809--CALL     7834--CALL
ICB.FID.LEN
      5920**DCL      7735>>IF       7748>>ASSIGN   7760>>CALLBLT  7764<<ASSIGN
ICB.FID.STRING
      5921**DCL      5922--REDEF    7750--IF       7760<<CALLBLT
ICB.FSN
      5923**DCL      7855<<ASSIGN   8134>>IF
ICB.FSN.FINISH
      5925**DCL      8140<<ASSIGN   8169>>IF
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:149  
ICB.FSN.START
      5924**DCL      8139<<ASSIGN   8167>>IF
ICB.NAME_RANGE_END
      5944**DCL      7781<<ASSIGN   7805<<ASSIGN   8144>>IF
ICB.ORG
      5941**DCL      7883>>IF       7885<<ASSIGN
ICB.ORG_NEG
      5942**DCL      7884<<ASSIGN
ICB.PHYSICAL
      5912**DCL      7903>>IF
ICB.REC_SEL.CNT
      5929**DCL      8216<<ASSIGN
ICB.SORTING_ORDER
      5999**DCL      7878<<ASSIGN
ICB.SORTING_ORDER.COUNT
      6000**DCL      7877>>IF
ICB.SPEC_TYPE
      5918**DCL      7895>>IF       7895>>IF       7903>>IF       8146<<ASSIGN   8153<<ASSIGN   8156<>CALL
      8157>>DOCASE   8164<<ASSIGN   8166<<ASSIGN   8171<<ASSIGN   8173<<ASSIGN
ICB.SRCHCOND
      5958**DCL      7871>>IF       7872<<ASSIGN
ICB.TYPE
      5945**DCL      7881<<ASSIGN
ICB.TYPE.COUNT
      5946**DCL      7880>>IF
IFSFA_PARAM.EOMCHAR#
      6276**DCL      6277--REDEF
IFSFA_PARAM.SIG1
      6270**DCL      6270--REDEF
IFSFA_PARAM.SIG2
      6270**DCL      6271--REDEF
IN_ACCT
      5842**DCL      7946<<ASSIGN
IN_ASN
      5880**DCL      7735>>IF       7735>>IF       7931<<ASSIGN
IN_NAME
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:150  
      5842**DCL      7940<<ASSIGN   8156<>CALL
IN_NAME.LEN
      5842**DCL      7767>>IF       8072>>IF
IN_OPT$
      7489**DCL      7713<<ASSIGN   7821<<ASSIGN   7823<<ASSIGN   7857>>IF       8047<<ASSIGN   8099>>IF
      8207>>DOWHILE  8208>>CALL
IN_PASS
      5843**DCL      7952<<ASSIGN
IN_RES
      5843**DCL      5843--REDEF    7895>>IF       7932<<ASSIGN
IN_SN
      5854**DCL      7933<<ASSIGN
IN_SN.SN
      5859**DCL      5860--REDEF
IN_WSN
      5880**DCL      7958<<ASSIGN
NE$
      7490**DCL      7731<<ASSIGN   7732>>IF       7748>>ASSIGN   7760>>CALLBLT  7760>>CALLBLT  7773>>IF
      7775>>IF       7779>>IF       7787>>ASSIGN   7787>>ASSIGN   7819>>IF       7819>>IF       7821>>ASSIGN
      7821>>ASSIGN
NEED_MAN
      7830**LABEL    7828--GOTO
NEW_FID_LEN
      7491**DCL      7748<<ASSIGN   7750>>IF       7764>>ASSIGN
NEXT_SOURCE
      7965**PROC     7716--CALL     7722--CALL
NL$
      7336**DCL      7711<<ASSIGN   7714>>IF       7720>>IF       7728>>IF       7731>>ASSIGN   7994<<ASSIGN
      8025<<ASSIGN   8061<<ASSIGN   8062>>IF       8079>>IF       8087>>CALL     8087>>CALL
NL_IDX
      7337**DCL      7719<<ASSIGN   7719>>ASSIGN   7720>>IF       7731>>ASSIGN   7995<<ASSIGN
OCB.TYPE
      5605**DCL      5606--REDEF
OFSFA_PARAM.EOMCHAR#
      6306**DCL      6307--REDEF
OFSFA_PARAM.SIG1
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:151  
      6300**DCL      6300--REDEF
OFSFA_PARAM.SIG2
      6300**DCL      6301--REDEF
OPT_IDX IN PROCEDURE VERIFY_STUFF_IN_OPTS
      8192**DCL      8206<<ASSIGN   8207>>DOWHILE  8208>>CALL     8212<<ASSIGN   8212>>ASSIGN
OUT$BLK.CODE
      7407**DCL      7732>>IF       7775>>IF       7819>>IF       8022>>IF       8043>>ASSIGN   8050>>ASSIGN
      8058>>IF
OUT$BLK.NSUBLKS
      7411**DCL      7720>>IF       7773>>IF       7779>>IF       7819>>IF       7821>>ASSIGN   8015>>IF
      8026>>IF       8041>>IF       8048>>IF       8058>>IF       8061>>ASSIGN   8062>>IF       8062>>IF
      8067>>IF       8207>>DOWHILE
OUT$BLK.SUBLK$
      7432**DCL      7731>>ASSIGN   7732>>IF       7748>>ASSIGN   7748>>ASSIGN   7760>>CALLBLT  7760>>CALLBLT
      7760>>CALLBLT  7760>>CALLBLT  7775>>IF       7779>>IF       7787>>ASSIGN   7787>>ASSIGN   7787>>ASSIGN
      7787>>ASSIGN   7819>>IF       7821>>ASSIGN   8021>>ASSIGN   8032>>ASSIGN   8032>>ASSIGN   8032>>ASSIGN
      8032>>ASSIGN   8043>>ASSIGN   8047>>ASSIGN   8050>>ASSIGN   8058>>IF       8061>>ASSIGN   8087>>CALL
      8087>>CALL     8087>>CALL     8087>>CALL     8087>>CALL     8087>>CALL     8208<>CALL
OUT$SYM.COUNT
      7468**DCL      7471--IMP-SIZ  7787>>ASSIGN
OUT$SYM.TEXT
      7471**DCL      7787--ASSIGN
OUT_SN.SN
      5877**DCL      5878--REDEF
REC_SEL_CNT
      5549**DCL      8194<<ASSIGN   8214>>IF       8216>>ASSIGN
RESULTS_FID_END
      7349**DCL      7381--DCLINIT
RESULTS_FID_END.ACCT
      7349**DCL      7790>>IF
RESULTS_FID_END.NAME
      7349**DCL      7790>>IF
RESULTS_FID_END.PASS
      7349**DCL      7790>>IF
RESULTS_FID_END.SN
      7349**DCL      7790>>IF
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:152  
RESULTS_FID_END.WSN
      7349**DCL      7790>>IF
RESULTS_FID_FROM
      6372**DCL      7925>>IF
RESULTS_FID_FROM.ACCT
      6372**DCL      7947>>ASSIGN
RESULTS_FID_FROM.NAME
      6372**DCL      7941>>ASSIGN
RESULTS_FID_FROM.PASS
      6372**DCL      7953>>ASSIGN
RESULTS_FID_FROM.RES
      6372**DCL      7934>>ASSIGN
RESULTS_FID_FROM.SN
      6372**DCL      7935>>ASSIGN
RESULTS_FID_FROM.WSN
      6372**DCL      7959>>ASSIGN
RESULTS_FID_IN.ACCT
      6353**DCL      7895>>IF       7943>>IF       7947<<ASSIGN   8077<<ASSIGN   8082>>IF
RESULTS_FID_IN.NAME
      6353**DCL      7769<<ASSIGN   7853>>IF       7895>>IF       7937>>IF       7941<<ASSIGN   8074<<ASSIGN
      8082>>IF       8148>>IF       8159<<ASSIGN
RESULTS_FID_IN.PASS
      6353**DCL      7949>>IF       7953<<ASSIGN   8082>>IF
RESULTS_FID_IN.RES
      6353**DCL      7895>>IF       7928>>IF       7934<<ASSIGN
RESULTS_FID_IN.SN
      6353**DCL      7935<<ASSIGN
RESULTS_FID_IN.TYPE.NAME
      6354**DCL      8151>>IF
RESULTS_FID_IN.WSN
      6353**DCL      7955>>IF       7959<<ASSIGN   8082>>IF
RET_VAL
        49**DCL        10--PROC     7704<<ASSIGN   7716<>CALL     7722<>CALL     7724>>IF       7745<<ASSIGN
      7757<<ASSIGN   7801<<ASSIGN   7816<<ASSIGN   7838<<ASSIGN   7850<<ASSIGN   7860<>CALL     7861>>IF
      7865<>CALL     7909<<ASSIGN   7914<<ASSIGN
RET_VAL IN PROCEDURE NEXT_SOURCE
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:153  
      7989**DCL      7965--PROC     7993<<ASSIGN   8004<<ASSIGN   8018<<ASSIGN   8037<<ASSIGN   8096<<ASSIGN
      8101<>CALL     8107<<ASSIGN
RET_VAL IN PROCEDURE SET_SPEC_TYPE
      8132**DCL      8111--PROC
RET_VAL IN PROCEDURE VERIFY_STUFF_IN_OPTS
      8190**DCL      8176--PROC     8210<<ASSIGN
S12$ IN PROCEDURE NEXT_SOURCE
      7990**DCL      8021<<ASSIGN   8022>>IF       8025>>ASSIGN   8032>>ASSIGN   8032>>ASSIGN   8041>>IF
      8043>>ASSIGN   8047>>ASSIGN   8048>>IF       8050>>ASSIGN   8058>>IF       8058>>IF       8061>>ASSIGN
      8061>>ASSIGN
SET_SPEC_TYPE
      8111**PROC     7865--CALL
SINGLE_INSPEC
      5557**DCL      7708<<ASSIGN   8010<<ASSIGN   8028<<ASSIGN   8064<<ASSIGN   8069<<ASSIGN
SL$
      7334**DCL      7709<<ASSIGN   7999>>IF       8015>>IF       8021>>ASSIGN   8026>>IF       8062>>IF
      8067>>IF       8075>>IF
SL_IDX
      7335**DCL      7710<<ASSIGN   7996<<ASSIGN   7996>>ASSIGN   8001>>IF       8015>>IF       8021>>ASSIGN
SOURCELIST$
        50**DCL        10--PROC     7705--IF       7709>>ASSIGN
SPEC_BUF
      5555**DCL      5555--REDEF
TEXT$C
      7476**DCL      8032>>ASSIGN   8087--CALL
TEXT$C.LEN
      7477**DCL      7478--IMP-SIZ  7748>>ASSIGN   7760>>CALLBLT  7765>>ASSIGN   8032>>ASSIGN   8070>>ASSIGN
      8087>>CALL
TEXT$C.STRING
      7478**DCL      7760>>CALLBLT  7765--ASSIGN   8070--ASSIGN
TEXT$C_BIT.LEN
      7480**DCL      7482--IMP-SIZ
THIS_STD_FILE
      5549**DCL      7925>>IF
VERIFY_STUFF_IN_OPTS
      8176**PROC     7860--CALL     8101--CALL
PL6.E3A0      #003=VPF$GET_NEXT_SPEC File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:34 Page:154  
VPD$ANAL_NAME
      7511**DCL-ENT  8156--CALL
VPD$FID
      7535**DCL-ENT  7766--CALL     7789--CALL     8071--CALL
VPD$GET_IN_DEV_MASK
      7549**DCL-ENT  7771--CALL     8078--CALL
VPF$PROCESS_INPUT_OPT
      7612**DCL-ENT  8208--CALL
VPL$ERR_PROC
      7677**DCL-ENT  7741--CALL     7753--CALL     7797--CALL     7809--CALL     7834--CALL     7846--CALL
      7899--CALL     7905--CALL     8036--CALL     8087--CALL

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:155  
      836        1        /*T***********************************************************/
      837        2        /*T*                                                         */
      838        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      839        4        /*T*                                                         */
      840        5        /*T***********************************************************/
      841        6        VPF$OPEN_NEXT: PROC(RET_VAL,CODE,NAME_TEXTC);
      842        7        /*D* NAME: VPF$OPEN_NEXT
      843        8             CALL: CALL VPF$OPEN_NEXT(RET_VAL,CODE,NAME_TEXTC);
      844        9             DESCRIPTION: This procedure will open the next(if CODE=1 or 5), first(if
      845       10                          CODE=2 or CODE=4, or NAME_TEXTC(if CODE=3) input
      846       11                         file from the current file or range specification with all
      847       12                         applicable input options applied.
      848       13
      849       14                          CODE=4 and 5 open with FPARAM, CODE=2 opens with FPARAM only if
      850       15                          required for file selection.
      851       16
      852       17                          RET_VAL will be returned as below:
      853       18                         RET_VAL            DESCRIPTION
      854       19                         -------            -----------
      855       20                         %VPOC_GOTFILE#   0 All fine. A file is open(or t-open) on M$EI.
      856       21                         %VPOC_EXHAUSTED# 1 No more files this spec.
      857       22                         %VPOC_NOACCESS#  2 Access denied. special...for lists and
      858       23                                            reviews only
      859       24        */
      860       25        /**/
      861       26        /*  PARAMETERS  */
      862       27        /**/
      863       28    1   DCL RET_VAL SBIN WORD;
      864       29    1   DCL CODE SBIN WORD;
      865       30    1   DCL 1 NAME_TEXTC,
      866       31    1         2 LEN UBIN BYTE UNAL,
      867       32    1         2 STRING CHAR(NAME_TEXTC.LEN);
      868       33        /**/
      869       34        /*  INCLUDES  */
      870       35        /**/
      871       36        %INCLUDE XUD_UTS_M;                     /* for new rollover UTS declaration   */
      872      118        %INCLUDE VP_DATA_R;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:156  
      873     7105        %INCLUDE B_ERRORS_C;
      874     8232        %INCLUDE FM$FIT;
      875     8453        /**/
      876     8454        %B$TCB;
      877     8457        %B$ALT;
      878     8465        %INCLUDE F$DCB;
      879     8514        %INCLUDE XUH_MACRO_C;
      880     8598                %FPT_PFIL(FPTN = FPT_PFIL,
      881     8599                  DCB  = M$EI,
      882     8600                  BOF  = NO,
      883     8601                  STCLASS = CONSTANT);
      884     8616        %FPT_REM(FPTN = FPT_REM_FT,
      885     8617                 DISP = PTV,
      886     8618                 STCLASS = STATIC);
      887     8632    1   DCL 1 CHARB$32 BASED,
      888     8633    1         2 * CHAR(32);
      889     8634    1   DCL 1 TEXT$C BASED,
      890     8635    1         2 LEN UBIN BYTE UNAL,
      891     8636    1         2 STRING CHAR(TEXT$C.LEN);
      892     8637    1   DCL 1 OPEN_NAME,
      893     8638    1         2 LEN UBIN BYTE UNAL,
      894     8639    1         2 STRING CHAR(31) UNAL;
      895     8640    1   DCL 1 TEXT_C,
      896     8641    1         2 C UBIN BYTE CALIGNED,
      897     8642    1         2 TEXT CHAR(31) CALIGNED;
      898     8643    1   DCL CUR_FT_FSN SBIN WORD STATIC;
      899     8644    1   DCL NO_ACCESS SBIN WORD;
      900     8645    1   DCL NO_MORE_FILES SBIN WORD STATIC;
      901     8646    1   DCL FILE_FOUND SBIN WORD;
      902     8647    1   DCL SORT_STATUS SBIN WORD;
      903     8648    1   DCL ABORT_SOURCE_ERR(0:9) UBIN HALF UNAL CONSTANT INIT(
      904     8649    1           %E$OPER,%E$IOERR,%E$CANT,%E$MNTBRK,0,
      905     8650    1           0,0,0,0,0);
      906     8651    1   DCL BAD_FILE_NAME CHAR(31) STATIC;      /* Last filename of a bad error       */
      907     8652    1   DCL T SBIN WORD;
      908     8653    1   DCL I SBIN WORD;
      909     8654    1   DCL CHAR_4 CHAR(4);
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:157  
      910     8655    1   DCL FIRST BIT(1) ALIGNED;
      911     8656    1   DCL UBIN$HALF UBIN HALF BASED;
      912     8657        %XUD_UTS_EQU;                           /* For new rollover UTS               */
      913     8668        %XUD$UTS_ENTRIES;
      914     8700        %CODE03;
      915     8707        %CODE04;                                /* Structure for FPARAM dates         */
      916     8715        %CODE05;
      917     8718        %CODE06;
      918     8722        %CODE18;                                /* Structure for FIELD definitions    */
      919     8726    1   DCL CONTROL_DATE UBIN WORD STATIC;
      920     8727    1   DCL CODE$ PTR;
      921     8728        %XUG_PARAMS(NAME=XUG_PARAMS,STCLASS=BASED);
      922     9172        /**/
      923     9173        /*  ENTRY DCLS  */
      924     9174        /**/
      925     9175        %VP_ENTRIES (OMIT=VPF$OPEN_NEXT);
      926     9383    1   DCL XSF$LOCCODP ENTRY(2) ALTRET;
      927     9384
      928     9385        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:158  
      929     9386        /**/
      930     9387    1           IF SORTING_INPUT
      931     9388    1            THEN
      932     9389    1              GOTO REPLAY_SORTED;
      933     9390    1           IF ICB.SPEC_TYPE > 1
      934     9391    1             AND ICB.SORTING_ORDER.COUNT > 0
      935     9392    1            THEN
      936     9393    2            DO;
      937     9394    2               SORTING_INPUT = '1'B;
      938     9395    2               CALL VPF$SORT_FID(1);
      939     9396    2               END;
      940     9397        /**/
      941     9398    1           RET_VAL = %VPOC_GOTFILE#;
      942     9399    1           FPT_OPEN_EI = FPT_OPEN_EI_SAVE;
      943     9400    1           FIRST = %YES#;
      944     9401    2           DO CASE(CODE);
      945     9402    2            CASE(2,4);                     /* OPEN first input file              */
      946     9403    2              CALL SET_UP_START;
      947     9404    2              NO_MORE_FILES = 0;
      948     9405    2            CASE(1, 5);                    /* OPEN next file                     */
      949     9406    2              IF NO_MORE_FILES=1
      950     9407    2               THEN                        /* Next file doesn't exist            */
      951     9408    3               DO;
      952     9409    3                  RET_VAL = %VPOC_EXHAUSTED#;
      953     9410    3                  GOTO GOT_DISPOSITION;
      954     9411    3                  END;
      955     9412    2            CASE(3);                       /* OPEN file NAME_TEXTC               */
      956     9413    2              FPT_OPEN_EI.NAME_   = VECTOR(NAME_TEXTC);
      957     9414    2              FPT_OPEN_EI.V.OPER.THISF# = %YES#;
      958     9415    2            END;                           /* END CASE                           */
      959     9416    1           FILE_FOUND = 0;
      960     9417        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:159  
      961     9418        /**/
      962     9419        /*  Keep trying files until we run out or get a good one.                     */
      963     9420        /**/
      964     9421    1   PLAY_IT_AGAIN: ;
      965     9422    2           DO WHILE(FILE_FOUND=0 AND NO_MORE_FILES=0);
      966     9423                                                /* Set up FPT_OPEN_EI                 */
      967     9424    2              NO_ACCESS = 0;
      968     9425    2              IF FIRST
      969     9426    2               THEN
      970     9427    2                 FIRST = %NO#;
      971     9428    2               ELSE
      972     9429    2                 FPT_OPEN_EI = FPT_OPEN_EI_SAVE;
      973     9430    2              FPT_OPEN_EI.V.CHAIN# = ICB.CAT;
      974     9431    2              ADDR(FPT_OPEN_EI.V.TYPE#)->UBIN$HALF = 0; /* 0 type field in FPT   */
      975     9432    2              FPT_OPEN_EI.V.SHARE# = ICB.SHARE;
      976     9433    2              FPT_OPEN_EI.V.SRCHCOND = ICB.SRCHCOND; /* Add search conditions    */
      977     9434    2              FPT_OPEN_EI.V.IOERROK# = ICB.FLAVOR.IOERROK;
      978     9435    2              FPT_OPEN_EI.V.IGNOREFSN# = ICB.IGNOREFSN;
      979     9436    2              IF ICB.FTORG=0
      980     9437    2               THEN
      981     9438    2                 FPT_OPEN_EI.V.ORG# = %FREE#; /* Default FT org                  */
      982     9439    2               ELSE
      983     9440    2                 FPT_OPEN_EI.V.ORG# = ICB.FTORG;
      984     9441    2              FPT_OPEN_EI.V.BLKL# = ICB.BLKL;
      985     9442    2              FPT_OPEN_EI.V.RECL# = ICB.RECL;
      986     9443    2              IF ICB.NBLOCK
      987     9444    2               THEN
      988     9445    2                 FPT_OPEN_EI.V.BLOCKED# = %NO#;
      989     9446    2               ELSE
      990     9447    2                 FPT_OPEN_EI.V.BLOCKED# = %YES#;
      991     9448    2              IF ICB.NSPAN
      992     9449    2               THEN
      993     9450    2                 FPT_OPEN_EI.V.SPANNED# = %NO#;
      994     9451    2               ELSE
      995     9452    2                 FPT_OPEN_EI.V.SPANNED# = %YES#;
      996     9453    2              IF ICB.EBCDIC
      997     9454    2               THEN
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:160  
      998     9455    2                 FPT_OPEN_EI.V.EBCDIC# = %YES#;
      999     9456    2              IF ICB.ANSISPAN
     1000     9457    2               THEN
     1001     9458    2                 FPT_OPEN_EI.V.ANSISPANSEQ# = ANSISPAN_OPT;
     1002     9459    2              IF ICB.NCNVRT
     1003     9460    2               THEN
     1004     9461    2                 FPT_OPEN_EI.V.CNVRT# = %NO#;
     1005     9462    2              IF RESULTS_FID_IN.SN
     1006     9463    2               THEN
     1007     9464    2                 FPT_OPEN_EI.SN_ = VECTOR(IN_SN);
     1008     9465    2              IF RESULTS_FID_IN.PASS
     1009     9466    2               THEN
     1010     9467    2                 FPT_OPEN_EI.PASS_ = VECTOR(IN_PASS);
     1011     9468    2              IF ICB.FPARAM_REQUIRED
     1012     9469    2               THEN
     1013     9470    2                 FPT_OPEN_EI.FPARAM_ = VECTOR(FPARAM_BUF);
     1014     9471    2              IF ICB.SPEC_TYPE~=1 AND ICB.SPEC_TYPE~=7
     1015     9472    2               THEN
     1016     9473    2                 FPT_OPEN_EI.V.OPER.NXTF# = %YES#;
     1017     9474    2              IF ICB.DEV_MASK.MAN_TAPE
     1018     9475    2                AND ((CMD_MASK & '34'O/* copies */)~='0'B /* COPY                */
     1019     9476    2                OR ((CMD_MASK & '0006'O/* lists */)~='0'B /* LIST                */
     1020     9477    2                AND ICB.FPARAM_REQUIRED))  /* with ATTR                          */
     1021     9478    2               THEN
     1022     9479    2                 FPT_OPEN_EI.V.OPER.TEST# = %NO#;
     1023     9480                                                /* open TEST mode unless an LT        */
     1024     9481                                                /* COPY or a L(A) LT                  */
     1025     9482    2               ELSE
     1026     9483    2                 IF ICB.DEV_MASK.DEV_TAPE  /* or Free Tape                       */
     1027     9484    2                  THEN
     1028     9485    2                    FPT_OPEN_EI.V.OPER.TEST# = %NO#;
     1029     9486    2                  ELSE
     1030     9487    2                    FPT_OPEN_EI.V.OPER.TEST# = %YES#;
     1031     9488    2              IF ICB.DEV_MASK.DEV_TAPE
     1032     9489    2               THEN
     1033     9490    2                 FPT_OPEN_EI.V.CVOL# = %YES#;
     1034     9491    2   OPEN_IT:   ;                            /* Do the OPEN!                       */
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:161  
     1035     9492        /**/
     1036     9493        /*  The following setup must be done before EACH OPEN.                        */
     1037     9494        /**/
     1038     9495    2              GETCMD.WORK$->XUG_PARAMS.ERRDCB=0;
              9495                       /* Make sure GETCMD forgets about any file we had open before */
     1039     9496    2              GETCMD.ERRDCB# = 0;
     1040     9497    2              FPARAM_BUF(0) = 0;           /* In case it will not be stored      */
     1041     9498    2              FPARAM$ = ADDR(FPARAM_BUF);  /* In case it will not be stored      */
     1042     9499        /**/
     1043     9500        /*  Time for the actual OPEN.                                                 */
     1044     9501        /**/
     1045     9502    2              CALL VPF$CALL_OPEN (FPT_OPEN_EI) ALTRET (EI_OPEN_ALT);
     1046     9503    2              EOF_SOURCE = '0'B;
     1047     9504    2              CALL TWIDDLE_AFTER_OPEN;
     1048     9505    2              IF FPT_OPEN_EI.V.OPER.MNTONLY#
     1049     9506    3               THEN DO;                    /* Start at beginning file on         */
     1050     9507    3                  FPT_OPEN_EI.V.OPER.MNTONLY# = %NO#; /* this tape               */
     1051     9508    3                  IF M$EI$->F$DCB.FSECT=1
     1052     9509    3                   THEN
     1053     9510    3                     FPT_OPEN_EI.V.FSN# = M$EI$->F$DCB.FSN;
     1054     9511    3                   ELSE
     1055     9512    3                     FPT_OPEN_EI.V.FSN# = M$EI$->F$DCB.FSN+1;
     1056     9513    3                  GOTO OPEN_IT;
     1057     9514    3                  END;
     1058     9515    2              IF ICB.DEV_MASK.DEV_TAPE     /* DEVICE/FREE TAPE                   */
     1059     9516    2                AND (CODE = 2 OR CODE = 4) /* AND FIRST TIME                     */
     1060     9517    2               THEN
     1061     9518    2                 IF ICB.SPEC_TYPE > 6 AND ICB.FSN.FINISH < BITBIN('777777'O)
     1062     9519    2                  THEN
     1063     9520    3                  DO;                      /* GET TO CORRECT FT FSN              */
     1064     9521    3                     IF ICB.CLPOS ~= 0 AND ICB.FSN.FINISH ~=0
     1065     9522    3                      THEN
     1066     9523    3                        CALL VPL$ERR_PROC(3,70,'06'O);
     1067     9524        /*E*  ERROR: VPF-00070
     1068     9525            MESSAGE: CLPOS not allowed with a FSN range.
     1069     9526        */
     1070     9527    3                     CALL M$CLOSE(FPT_CLOSE_EI) ALTRET(PFIL_ERR);
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:162  
     1071     9528    3                     FPT_REM_FT.V.PSN# = IN_SN.SN(0);
     1072     9529    3                     CALL M$REM(FPT_REM_FT) ALTRET(PFIL_ERR); /* GET TO FSN=1    */
     1073     9530    3                     CALL M$OPEN(FPT_OPEN_EI) ALTRET(PFIL_ERR);
     1074     9531    4                     DO I=2 TO ICB.FSN.START;
     1075     9532    4                        CALL M$PFIL(FPT_PFIL) ALTRET(PFIL_ERR);
     1076     9533    4                        IF NOT ICB.FLAVOR.FFTAPE /* For Managed Free Tapes       */
     1077     9534    5                         THEN DO;          /*  tape must be positioned*/
     1078     9535    5                            CALL M$CLOSE(FPT_CLOSE_EI);/*  past file mark.       */
     1079     9536    5                            CALL M$OPEN(FPT_OPEN_EI) ALTRET(EI_OPEN_ALT);
     1080     9537    5                            END;
     1081     9538    4                        CALL VPD$CHECK_VOL(IN_SN,0,M$EI#,,0); /* Check VOL trans */
     1082     9539    5                        DO WHILE('0'B);
     1083     9540    5   PFIL_ERR:               NO_MORE_FILES = 1; /* FOR POSSIBLE IMMEDIATE RECALL   */
     1084     9541    5                           CALL VPL$ERR_PROC(2,0,,INPUT_ERR,,,M$EI#); /* Abort step */
     1085     9542    5                           END;
     1086     9543    4                        END;
     1087     9544    3                     CUR_FT_FSN = ICB.FSN.START-1;
     1088     9545    3                     END;
     1089     9546    2                  ELSE
     1090     9547    3                  DO;
     1091     9548    3                     CUR_FT_FSN=0;
     1092     9549    3                     END;
     1093     9550                                                /* NOMARKS doesn't really matter here */
     1094     9551                                                /* since we are positioned past the   */
     1095     9552                                                /* tape mark.                         */
     1096     9553    2              IF ICB.DEV_MASK.DEV_TAPE     /* FT TAPE                            */
     1097     9554    2                OR ICB.DEV_MASK.MAN_TAPE   /* LT    TAPE                         */
     1098     9555    2               THEN                        /* Tape involved                      */
     1099     9556    2                 CALL VPD$CHECK_VOL(IN_SN,0,M$EI#,,0); /* Check for VOL trans'n  */
     1100     9557    2   NO_ACC_CONT:
     1101     9558    3              DO CASE(ICB.SPEC_TYPE);
     1102     9559    3               CASE(1,7);                  /* SINGLE FID OR SINGLE FSN...        */
     1103     9560    3                 FILE_FOUND = 1;
     1104     9561    3                 NO_MORE_FILES = 1;
     1105     9562    3                 CUR_FT_FSN = CUR_FT_FSN +1;
     1106     9563    3               CASE(2);                    /* FULL RANGE                         */
     1107     9564    3                 FILE_FOUND = 1;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:163  
     1108     9565    3               CASE(3);                    /* SUB-RANGE OF DIRECTORY DEVICE      */
     1109     9566    3                 IF ICB.PHYSICAL=1
     1110     9567    3                  THEN
     1111     9568    4                  DO;                      /* PHYSICAL ORDER FROM LT             */
     1112     9569    4                     FILE_FOUND = 1;
     1113     9570    4                     IF ADDR(DIN_NAME) -> TEXT$C.STRING =
     1114     9571    4                       ICB.NAME_RANGE_END
     1115     9572    4                      THEN
     1116     9573    4                        NO_MORE_FILES = 1;
     1117     9574    4                     END;
     1118     9575    3                  ELSE                     /* NOT PHYSICAL                       */
     1119     9576    4                  DO;
     1120     9577    4                     IF (ADDR(DIN_NAME) -> TEXT$C.STRING <
     1121     9578    4                       ADDR(IN_NAME)->TEXT$C.STRING)
     1122     9579    4                       AND ICB.SRCHCOND.REV
     1123     9580    4                      THEN                 /* Too far back                       */
     1124     9581    4                        GOTO OUTSIDE_RANGE;
     1125     9582    4                     IF ADDR(DIN_NAME) -> TEXT$C.STRING >
     1126     9583    4                       ICB.NAME_RANGE_END
     1127     9584    4                       AND NOT ICB.SRCHCOND.REV
     1128     9585    4                      THEN                 /* Too far foreward                   */
     1129     9586    4                        GOTO OUTSIDE_RANGE;
     1130     9587    4                     FILE_FOUND = 1;       /* Must be good                       */
     1131     9588    5                     DO WHILE ('0'B);
     1132     9589    5   OUTSIDE_RANGE:       ;
     1133     9590    5                        IF ICB.DEV_MASK ~= '100'O /* LT                          */
     1134     9591    5                         THEN
     1135     9592    5                           NO_MORE_FILES = 1;
     1136     9593    5                        END;
     1137     9594    4                     END;
     1138     9595        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:164  
     1139     9596    3               CASE(4,5);                  /* WILDCARDING...                     */
     1140     9597    3                 CALL VPD$WILD_COMPARE(IN_NAME,DIN_NAME) ALTRET(NO_WILD_MATCH);
     1141     9598    3                 FILE_FOUND = 1;
     1142     9599    4                 DO WHILE('0'B);           /* NEVER DO                           */
     1143     9600    4   NO_WILD_MATCH:
     1144     9601    4                    IF ICB.SPEC_TYPE = 5 AND ICB.DEV_MASK.MAN_DISC
     1145     9602    4                     THEN                  /* Wildcard without initial '?'       */
     1146     9603    5                     DO;
     1147     9604    5                        CALL INDEX(I,'?',IN_NAME.STRING);
     1148     9605    5                        IF SUBSTR(DIN_NAME.STRING,0,I)
     1149     9606    5                          ~= SUBSTR(IN_NAME.STRING,0,I)
     1150     9607    5                         THEN              /* End of wild, stop opening files    */
     1151     9608    5                           NO_MORE_FILES = 1;
     1152     9609    5                        END;
     1153     9610    4                    END;
     1154     9611    3               CASE(8);                    /* FSN RANGE                          */
     1155     9612    3                 FILE_FOUND = 1;
     1156     9613    3                 IF M$EI$->F$DCB.ASN=%TAPE#
     1157     9614    3                  THEN
     1158     9615    4                  DO;
     1159     9616    4                     IF M$EI$->F$DCB.FSN>=ICB.FSN.FINISH
     1160     9617    4                      THEN
     1161     9618    5                      DO;
     1162     9619    5                         NO_MORE_FILES = 1;
     1163     9620    5                         IF M$EI$->F$DCB.FSN>ICB.FSN.FINISH
     1164     9621    5                          THEN
     1165     9622    5                            FILE_FOUND = 0;
     1166     9623    5                         END;
     1167     9624    4                     END;
     1168     9625    3                  ELSE
     1169     9626    4                  DO;                      /* MUST BE FT                         */
     1170     9627    4                     CUR_FT_FSN = CUR_FT_FSN+1;
     1171     9628    4                     IF CUR_FT_FSN=ICB.FSN.FINISH
     1172     9629    4                      THEN
     1173     9630    4                        NO_MORE_FILES = 1;
     1174     9631    4                     END;
     1175     9632    3               END;                        /* END CASE                           */
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:165  
     1176     9633    2              IF ICB.DEV_MASK.DEV_TAPE
     1177     9634    2               THEN                        /* Construct NAME from FSN            */
     1178     9635    3               DO;
     1179     9636    3                  CALL BINCHAR(CHAR_4,CUR_FT_FSN);
     1180     9637    3                  CALL CONCAT(DIN_NAME.STRING,'FSN_',CHAR_4);
     1181     9638    3                  DIN_NAME.LEN = 4 + 4;
     1182     9639    3                  IN_NAME.STRING = '?';    /* Always matches                     */
     1183     9640    3                  IN_NAME.LEN = 1;
     1184     9641    3                  END;
     1185     9642    2              IF ICB.ORG ~= '0'B
     1186     9643    2                AND NO_ACCESS = 0
     1187     9644    2                AND ICB.ORG(M$EI$->F$DCB.ORG) = ICB.ORG_NEG
     1188     9645    2               THEN
     1189     9646    2                 FILE_FOUND = 0;
     1190     9647    2              IF ICB.TYPE.COUNT>0 AND FILE_FOUND=1
     1191     9648    2               THEN
     1192     9649    3               DO;
     1193     9650    3                  FILE_FOUND = 0;
     1194     9651    4                  DO T=0 TO ICB.TYPE.COUNT-1;
     1195     9652    4                     IF M$EI$->F$DCB.TYPE=ICB.TYPE.STRING(T)
     1196     9653    4                      THEN
     1197     9654    4                        FILE_FOUND = 1;
     1198     9655    4                     END;
     1199     9656    3                  IF ICB.TYPE.NEG     /* " ~= " option specified on TYPE inopt   */
     1200     9657    3                    AND ADDR(M$EI$->F$DCB.TYPE)->UBIN$HALF ~= 0 /* ~ ARCHIVED    */
     1201     9658    3                   THEN                    /* Just reverse the FILE_FOUND flag   */
     1202     9659    3                     IF FILE_FOUND = 0
     1203     9660    3                      THEN
     1204     9661    3                        FILE_FOUND = 1;
     1205     9662    3                      ELSE
     1206     9663    3                        FILE_FOUND = 0;
     1207     9664    3                  END;
     1208     9665    2              IF ICB.CREATOR_SEL = 2
     1209     9666    2               THEN
     1210     9667    3               DO;
     1211     9668    3                  CALL VPD$FETCH_CREATOR(TEXT_C) ALTRET(CREATOR_OK);
     1212     9669    3                  IF SUBSTR(TEXT_C.TEXT,0,TEXT_C.C) ~=
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:166  
     1213     9670    3                    SUBSTR(ICB.CREATOR.TEXT,0,ICB.CREATOR.C)
     1214     9671    3                   THEN
     1215     9672    3                     FILE_FOUND = 0;
     1216     9673    3   CREATOR_OK:    ;
     1217     9674    3                  END;
     1218     9675    2              IF ICB.CREATOR_SEL=1 AND NOT(M$EI$ -> F$DCB.OWNER)
     1219     9676    2               THEN
     1220     9677    2                 FILE_FOUND = 0;
     1221     9678    2              IF ICB.CREATOR_SEL ~=0 AND ICB.CREATOR_NEG THEN
     1222     9679    2                 IF FILE_FOUND = 1 THEN
     1223     9680    2                    FILE_FOUND = 0;
     1224     9681    2                  ELSE
     1225     9682    2                    FILE_FOUND = 1;
     1226     9683    2              IF ICB.DATE.RELATION~=0 AND FILE_FOUND=1
     1227     9684    2               THEN
     1228     9685    3               DO;
     1229     9686    3                  FPARAM$=ADDR(FPARAM_BUF);
     1230     9687    3                  CODE$ = FPARAM$;         /* Point to start of FPARAM           */
     1231     9688    3                  CALL XSF$LOCCODP(CODE$,04)
     1232     9689    3                   WHENALTRETURN
     1233     9690    4                   DO;
     1234     9691    4                      IF ICB.DATE.TYPE < 4
     1235     9692    4                       THEN
     1236     9693    5                       DO;
     1237     9694    5                          FILE_FOUND = 0;
     1238     9695    5                          GOTO NO_CODE4;
     1239     9696    5                          END;
     1240     9697    4                      END;
     1241     9698    4                  DO CASE(ICB.DATE.TYPE);
     1242     9699    4                   CASE(1);
     1243     9700    4                     CONTROL_DATE = CODE$ -> CODE04.CREATION.TIME;
     1244     9701    4                   CASE(2);
     1245     9702    4                     CONTROL_DATE = CODE$ -> CODE04.ACCESS.TIME;
     1246     9703    4                   CASE(3);
     1247     9704    4                     CONTROL_DATE = CODE$ -> CODE04.MODIFY.TIME;
     1248     9705    4                   CASE(4);                /* EXPIRATION date                    */
     1249     9706    4                     CONTROL_DATE = CODE$ -> CODE04.CREATION.TIME;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:167  
     1250     9707    4                     CODE$ = FPARAM$;      /* Point to start of FPARAM bufr      */
     1251     9708    4                     CALL XSF$LOCCODP(CODE$,03) ALTRET(NEXPR); /* Find expire    */
     1252     9709    4                     IF CODE$ -> CODE03.EXPIRE < 0
     1253     9710    4                      THEN                 /* NEVER EXPIRE                       */
     1254     9711    4                        GOTO NEXPR;
     1255     9712    4                     CALL XUD$UTS_ADJ_25TH (CONTROL_DATE, CONTROL_DATE, CODE$->CODE03.
              9712                              EXPIRE * %UTS_25TH_DAY#);
     1256     9713    4                   CASE(5);
     1257     9714    4                     CODE$ = FPARAM$;
     1258     9715    4                     CALL XSF$LOCCODP(CODE$,05)
     1259     9716    5                      WHENALTRETURN DO;
     1260     9717    5                         FILE_FOUND = 0;
     1261     9718    5                         GOTO NO_CODE4;    /* This file has no backup date       */
     1262     9719    5                         END;
     1263     9720    4                     CONTROL_DATE = CODE$->CODE05.BACKUP.TIME;
     1264     9721    4                   CASE(6);
     1265     9722    4                     CODE$ = FPARAM$;
     1266     9723    4                     CALL XSF$LOCCODP(CODE$,06)
     1267     9724    5                      WHENALTRETURN DO;
     1268     9725    5                         FILE_FOUND = 0;
     1269     9726    5                         GOTO NO_CODE4;    /* This file isn't stowed             */
     1270     9727    5                         END;
     1271     9728    4                     CONTROL_DATE = CODE$->CODE06.STOW.TIME;
     1272     9729    4                   END;                    /* END CASE                           */
     1273     9730    3                  CALL VPD$ROUND_DATE(,,CONTROL_DATE,ICB.DATE.ROUNDING_TYPE);
     1274     9731    4                  DO WHILE ('0'B);
     1275     9732    4   NEXPR:            CONTROL_DATE = BITBIN('777777777777'O); /* NEVER EXPIRE     */
     1276     9733    4                     END;
     1277     9734    4                  DO CASE(ICB.DATE.RELATION);
     1278     9735    4                   CASE(1);                /* CONTROL_DATE < ICB.DATE.UTS        */
     1279     9736    4                     IF CONTROL_DATE >= ICB.DATE.UTS
     1280     9737    4                      THEN
     1281     9738    4                        FILE_FOUND = 0;
     1282     9739    4                   CASE(2);                /* CONTROL_DATE = ICB.DATE.UTS        */
     1283     9740    4                     IF CONTROL_DATE ~= ICB.DATE.UTS
     1284     9741    4                      THEN
     1285     9742    4                        FILE_FOUND = 0;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:168  
     1286     9743    4                   CASE(3);                /* CONTROL_DATE > ICB.DATE.UTS        */
     1287     9744    4                     IF CONTROL_DATE <= ICB.DATE.UTS
     1288     9745    4                      THEN
     1289     9746    4                        FILE_FOUND = 0;
     1290     9747    4                   CASE(4);                /* CONTROL_DATE <= ICB.DATE.UTS       */
     1291     9748    4                     IF CONTROL_DATE > ICB.DATE.UTS
     1292     9749    4                      THEN
     1293     9750    4                        FILE_FOUND = 0;
     1294     9751    4                   CASE(5);                /* CONTROL_DATE ~= ICB.DATE.UTS       */
     1295     9752    4                     IF CONTROL_DATE = ICB.DATE.UTS
     1296     9753    4                      THEN
     1297     9754    4                        FILE_FOUND = 0;
     1298     9755    4                   CASE(6);                /* CONTROL_DATE >= ICB.DATE.UTS       */
     1299     9756    4                     IF CONTROL_DATE < ICB.DATE.UTS
     1300     9757    4                      THEN
     1301     9758    4                        FILE_FOUND = 0;
     1302     9759    4                   END;                    /* END CASE                           */
     1303     9760    3                  END;
     1304     9761    2   NO_CODE4:  IF FILE_FOUND=0 AND M$EI$->F$DCB.FCD
     1305     9762    2               THEN
     1306     9763    2                 CALL VPF$CLOSE_IN(1);     /* CLOSE UNWANTED FILE                */
     1307     9764    2              END;                         /* END WHILE                          */
     1308     9765        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:169  
     1309     9766        /**/
     1310     9767        /*  Either we have a file, or this spec is exhausted.  */
     1311     9768        /**/
     1312     9769    1           IF FILE_FOUND = 1
     1313     9770    1            THEN
     1314     9771    2            DO;                            /* We have a file that we KNOW we     */
     1315     9772                                                /* want.  Make sure that this good    */
     1316     9773                                                /* file will WORK with our input      */
     1317     9774                                                /* options.                           */
     1318     9775    2               I = 0;                      /* No errors, yet                     */
     1319     9776    2               IF ICB.KEY_SEL
     1320     9777    2                 AND NOT ICB.FLAVOR.KEY_USABLE
     1321     9778    2                 AND NO_ACCESS = 0
     1322     9779    2                THEN
     1323     9780    2                  I = 30;
     1324     9781        /*E*   ERROR: VPF-00030
     1325     9782             MESSAGE: Record selection by key won't work% on %UF%.
     1326     9783            MESSAGE1: Input file% %UF% has an ORG that does not permit
     1327     9784                      record selection by key.
     1328     9785        */
     1329     9786    2               IF I > 0
     1330     9787    2                THEN                       /* This file DOES clash with options  */
     1331     9788    3                DO;
     1332     9789    3                   IF M$EI$ -> F$DCB.FCD
     1333     9790    3                    THEN                   /* Gotta close the file               */
     1334     9791    3                      CALL VPF$CLOSE_IN(1);
     1335     9792    3                   CALL VPL$ERR_PROC(2,I,'06'O,,,,M$EI#);
     1336     9793    3                   END;
     1337     9794    2               END;
     1338     9795        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:170  
     1339     9796        /**/
     1340     9797        /*  Either we have a file and the world is fine, OR the input spec            */
     1341     9798        /*  is exhausted.                                                             */
     1342     9799        /**/
     1343     9800    1           IF FILE_FOUND=0
     1344     9801    1            THEN                           /* No more files this spec            */
     1345     9802    1              RET_VAL = %VPOC_EXHAUSTED#;
     1346     9803    1            ELSE
     1347     9804    1              IF NO_ACCESS=0
     1348     9805    1               THEN                   /* All fine.  OPENed or TOPENed on M$EI    */
     1349     9806    2               DO;
     1350     9807    2                  RET_VAL = %VPOC_GOTFILE#;
     1351     9808    2                  END;
     1352     9809    1               ELSE                        /* FILE POSSIBLY FOUND BUT ACCESS     */
     1353     9810                                                /* DENIED.                            */
     1354     9811    1                 IF CMD_MASK & '000700002'O
     1355     9812                                                /* LIST, LISTSTD, REVIEW, REVIEWSTD   */
     1356     9813    1                  THEN
     1357     9814    1                    RET_VAL = %VPOC_NOACCESS#;
     1358     9815    1                  ELSE
     1359     9816    1                    CALL VPL$ERR_PROC(2,0,,INPUT_ERR,,,M$EI#); /* Abort step     */
     1360     9817                                                /* REPORT AND ABORT STEP              */
     1361     9818    1           GOTO GOT_DISPOSITION;
     1362     9819        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:171  
     1363     9820    1   EI_OPEN_ALT:
     1364     9821    1           IF ICB.DEV_MASK & '30'O         /* Managed tape or disk               */
     1365     9822    1            THEN
     1366     9823    2            DO;
     1367     9824    2               DIN_NAME.LEN = M$EI$ -> F$DCB.NAME.L;
     1368     9825    2               DIN_NAME.STRING = M$EI$ -> F$DCB.NAME.C;
     1369     9826    2               END;
     1370     9827    1           IF ICB.DEV_MASK.DEV_TAPE
     1371     9828    1            THEN                           /* Construct NAME from FSN            */
     1372     9829    2            DO;
     1373     9830    2               CALL BINCHAR(CHAR_4,CUR_FT_FSN);
     1374     9831    2               CALL CONCAT(DIN_NAME.STRING,'FSN_',CHAR_4);
     1375     9832    2               DIN_NAME.LEN = 4 + 4;
     1376     9833    2               END;
     1377     9834    1           IF INPUT_ERR.ERR# = %E$FDEOF OR INPUT_ERR.ERR# = %E$EOSET
     1378     9835    1            THEN
     1379     9836    2            DO;
     1380     9837    2               RET_VAL = %VPOC_EXHAUSTED#;
     1381     9838    2               GOTO GOT_DISPOSITION;
     1382     9839    2               END;
     1383     9840    1           IF INPUT_ERR.ERR# = %E$NOACCESS /* ACCESS DENIED                      */
     1384     9841    1             OR INPUT_ERR.ERR# = %E$INVSTAR /* NOT ACCESSIBLE FROM YOUR DOMAIN   */
     1385     9842    1             OR INPUT_ERR.ERR# = %E$NORESTRICT /* NO ACCESS TO ORG=RESTRICT FILE */
     1386     9843    1            THEN
     1387     9844    2            DO;                            /* POSSIBLY NOT A SELECTED FILE       */
     1388     9845    2               NO_ACCESS = 1;              /* SO SET FLAG AND GO FIND OUT        */
     1389     9846    2               FPARAM_BUF(0) = 0;          /* In case FM put a directory FIT     */
     1390     9847    2               GOTO NO_ACC_CONT;
     1391     9848    2               END;
     1392     9849    1           IF INPUT_ERR.ERR# = %E$MNTBRK AND BREAKS = 0
     1393     9850    1            THEN
     1394     9851    1              GOTO OPEN_IT;                /* CNTL-Y,GO                          */
     1395     9852    1           IF ICB.SPEC_TYPE=1 OR ICB.SPEC_TYPE=7
     1396     9853    1            THEN                           /* SINGLE FILE SPECS                  */
     1397     9854    1              NO_MORE_FILES = 1;
     1398     9855    1            ELSE;
     1399     9856    2           DO;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:172  
     1400     9857                                                /* CHECK IF THIS ERROR IS SEVERE      */
     1401     9858                                                /* ENOUGH TO ABORT THIS SOURCE        */
     1402     9859    2              I = 0;
     1403     9860    3              DO WHILE(ABORT_SOURCE_ERR(I) ~= 0 AND NO_MORE_FILES = 0);
     1404     9861    3                 IF ABORT_SOURCE_ERR(I) = INPUT_ERR.ERR#
     1405     9862    3                  THEN
     1406     9863    3                    NO_MORE_FILES = 1;
     1407     9864    3                  ELSE
     1408     9865    3                    I = I+1;
     1409     9866    3                 END;
     1410     9867    2              IF BAD_FILE_NAME = ADDR(DIN_NAME) -> TEXT$C.STRING
     1411     9868    2               THEN                        /* second hit of repeating error      */
     1412     9869    3               DO;
     1413     9870    3                  RET_VAL = %VPOC_EXHAUSTED#;
     1414     9871    3                  GOTO GOT_DISPOSITION;
     1415     9872    3                  END;
     1416     9873    2               ELSE
     1417     9874    2                 BAD_FILE_NAME = ADDR(DIN_NAME) -> TEXT$C.STRING;
     1418     9875    2              END;
     1419     9876    1           CALL VPL$ERR_PROC(2,0,,INPUT_ERR,,,M$EI#); /* ABORT STEP ERROR        */
     1420     9877                                                /* JUST ABORT THE STEP                */
     1421     9878    1           GOTO GOT_DISPOSITION;
     1422     9879        /**/
     1423     9880        /**/
     1424     9881        /**/
     1425     9882    1   GOT_DISPOSITION: ;
     1426     9883        /**/
     1427     9884        /*  We come here when VPF$OPEN_NEXT is at last ready to return to the         */
     1428     9885        /*  caller.  By now, we either have a file in our grubby little paws,         */
     1429     9886        /*  or know the reason why not!                                               */
     1430     9887        /**/
     1431     9888        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:173  
     1432     9889        /**/
     1433     9890        /*  This code implements the hook for file selection in SORTED order.         */
     1434     9891        /**/
     1435     9892    1           IF NOT SORTING_INPUT
     1436     9893    1            THEN
     1437     9894    1              GOTO SORTING_DONE;
     1438     9895    1           IF RET_VAL ~= %VPOC_EXHAUSTED#
     1439     9896    1            THEN
     1440     9897    2            DO;
     1441     9898    2               CALL VPF$SORT_FID (2);
     1442     9899    2               FILE_FOUND = 0;
     1443     9900    2               GOTO PLAY_IT_AGAIN;
     1444     9901    2               END;
     1445     9902    1            ELSE
     1446     9903    1              CALL VPF$SORT_FID (3);
     1447     9904        /**/
     1448     9905    1   REPLAY_SORTED: ;
     1449     9906    1           CALL VPF$SORT_FID (4,SORT_STATUS);
     1450     9907    2           DO CASE(SORT_STATUS);
     1451     9908    2            CASE(%VPOC_GOTFILE#);
     1452     9909    2              RET_VAL = %VPOC_GOTFILE#;
     1453     9910    2              CALL TWIDDLE_AFTER_OPEN;
     1454     9911    2            CASE(%VPOC_EXHAUSTED#);
     1455     9912    2              RET_VAL = %VPOC_EXHAUSTED#;
     1456     9913    2            CASE(%VPOC_NOACCESS#);
     1457     9914    2              RET_VAL = %VPOC_NOACCESS#;
     1458     9915    2              DIN_NAME.LEN = M$EI$ -> F$DCB.NAME.L;
     1459     9916    2              DIN_NAME.STRING = M$EI$ -> F$DCB.NAME.C;
     1460     9917    2            END;
     1461     9918    1   SORTING_DONE: ;
     1462     9919        /**/
     1463     9920    1           RETURN;
     1464     9921        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:174  
     1465     9922    1   TWIDDLE_AFTER_OPEN: PROC;
     1466     9923        /**/
     1467     9924        /*  This PROC is used after opening M$EI.  It sets up some items that         */
     1468     9925        /*  will be used later.                                                       */
     1469     9926        /**/
     1470     9927    2           CALL SET_FLAVOR;
     1471     9928    2           IF ICB.FLAVOR.MANAGED
     1472     9929    2            THEN
     1473     9930    3            DO;
     1474     9931    3               DIN_NAME.LEN = M$EI$ -> F$DCB.NAME.L;
     1475     9932    3               DIN_NAME.STRING = M$EI$ -> F$DCB.NAME.C;
     1476     9933    3               END;
     1477     9934        /**/
     1478     9935        /*  Set up vector parts that frame the FPARAM buffer.  */
     1479     9936        /**/
     1480     9937    2           FPARAM$ = ADDR(FPARAM_BUF);
     1481     9938    2           FPARAM_BOUND = SIZEC(FPARAM_BUF) -1;
     1482     9939    2           IF M$EI$ -> F$DCB.ORG=%RESTRICT#
     1483     9940    2            THEN                           /* 5-WORD OFFSET for this ORG!!!      */
     1484     9941    3            DO;
     1485     9942    3               FPARAM$ = PINCRW(FPARAM$,5);
     1486     9943    3               FPARAM_BOUND = FPARAM_BOUND -20;
     1487     9944    3               END;
     1488     9945        /**/
     1489     9946        /*  Find out how many fields are defined.  */
     1490     9947        /**/
     1491     9948    2           ICB.NUMFIELDS = 0;
     1492     9949    2           IF M$EI$ -> F$DCB.ORG ~= %IREL# THEN
     1493     9950    2              GOTO FIELDS_DONE;
     1494     9951    2           CODE$ = FPARAM$;
     1495     9952    2           CALL XSF$LOCCODP(CODE$,18) ALTRET(FIELDS_DONE);
     1496     9953    2           ICB.NUMFIELDS = CODE$ -> CODE18.NFIELDS;
     1497     9954    2   FIELDS_DONE: ;
     1498     9955        /**/
     1499     9956        /*  FINIS!  */
     1500     9957        /**/
     1501     9958    2           RETURN;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:175  
     1502     9959    2   END TWIDDLE_AFTER_OPEN;
     1503     9960        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:176  
     1504     9961    1   SET_FLAVOR: PROC;
     1505     9962        /*I* NAME: SET_FLAVOR
     1506     9963             PURPOSE: To set up the FLAVOR mask in ICB.
     1507     9964             CALL: CALL SET_FLAVOR;
     1508     9965             DESCRIPTION: This procedure is CALLed AFTER M$OPENing M$EI.
     1509     9966                          Tests are made to set any appropriate bits in ICB.FLAVOR
     1510     9967        */
     1511     9968    2           ICB.FLAVOR = '0'B;              /* Clear out any trash bits           */
     1512     9969    2           IF ICB.DEV_MASK & '300'O        /* Managed                            */
     1513     9970    2            THEN
     1514     9971    2              ICB.FLAVOR.MANAGED = '1'B;
     1515     9972    2           IF ICB.DEV_MASK & '140'O        /* FT/LT                              */
     1516     9973    2            THEN
     1517     9974    2              ICB.FLAVOR.TAPE = '1'B;
     1518     9975    2           IF M$EI$ -> F$DCB.ORG = %UR#
     1519     9976    2             AND ~M$EI$ -> F$DCB.DDEV.IC   /* AND not the user's terminal        */
     1520     9977    2            THEN
     1521     9978    2              ICB.FLAVOR.UR = '1'B;
     1522     9979    2           IF M$EI$ -> F$DCB.ORG ~= %CONSEC# /*  1                               */
     1523     9980    2             AND M$EI$ -> F$DCB.ORG ~= %FIXED# /* 15                             */
     1524     9981    2             AND M$EI$ -> F$DCB.ORG ~= %FPRG# /* 10                              */
     1525     9982    2             AND M$EI$ -> F$DCB.ORG ~= %FREE# /* 19                              */
     1526     9983    2             AND M$EI$ -> F$DCB.ORG ~= %SYMB# /*  9                              */
     1527     9984    2             AND M$EI$ -> F$DCB.ORG ~= %TERMINAL# /*  8                          */
     1528     9985    2             AND M$EI$ -> F$DCB.ORG ~= %UNDEF# /* 17                             */
     1529     9986    2             AND M$EI$ -> F$DCB.ORG ~= %UR# /*  4                                */
     1530     9987    2             AND M$EI$ -> F$DCB.ORG ~= %VARIABLE# /* 16                          */
     1531     9988    2            THEN                           /* ORG allows KEYS to be used on READ */
     1532     9989    2              ICB.FLAVOR.KEY_USABLE = '1'B;
     1533     9990    2           IF M$EI$ -> F$DCB.ORG = %RANDOM# /*  3                                */
     1534     9991    2             OR M$EI$ -> F$DCB.ORG = %IDS# /*  7                                 */
     1535     9992    2             OR M$EI$ -> F$DCB.ORG = %RELATIVE# /*  5                            */
     1536     9993    2             OR M$EI$ -> F$DCB.ORG = %CG#  /* 11                                 */
     1537     9994    2            THEN                           /* ORG allows 'holes' (E$DI)          */
     1538     9995    2              ICB.FLAVOR.HOLY_ORG = '1'B;
     1539     9996    2           IF M$EI$ -> F$DCB.ORG = %KEYED#
     1540     9997    2             OR M$EI$ -> F$DCB.ORG = %INDEXED#
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:177  
     1541     9998    2             OR M$EI$ -> F$DCB.ORG = %IREL#
     1542     9999    2            THEN                           /* PCL 'knows' about this type of key */
     1543    10000    2              ICB.FLAVOR.KNOWKEY = '1'B;
     1544    10001    2           IF M$EI$ -> F$DCB.ORG = %FIXED#
     1545    10002    2             OR M$EI$ -> F$DCB.ORG = %VARIABLE#
     1546    10003    2             OR M$EI$ -> F$DCB.ORG = %UNDEF#
     1547    10004    2            THEN                           /* This ORG on LTs only               */
     1548    10005    2              ICB.FLAVOR.LTOORG = '1'B;
     1549    10006    2           IF M$EI$ -> F$DCB.ORG = %RANDOM# /*  3                                */
     1550    10007    2             OR M$EI$ -> F$DCB.ORG = %IDS# /*  7                                 */
     1551    10008    2             OR M$EI$ -> F$DCB.ORG = %CG#  /* 11                                 */
     1552    10009    2            THEN                           /* Input granule-size records         */
     1553    10010    2              ICB.FLAVOR.GRANB = '1'B;
     1554    10011    2           IF ICB.DEV_MASK.DEV_TAPE
     1555    10012    2             AND M$EI$ -> F$DCB.ORG ~= %FIXED# /* 15                             */
     1556    10013    2            THEN                           /* It is a FREE-FREE tape             */
     1557    10014    2              ICB.FLAVOR.FFTAPE = '1'B;
     1558    10015    2           RETURN;
     1559    10016    2   END SET_FLAVOR;
     1560    10017        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:178  
     1561    10018    1   SET_UP_START: PROC;
     1562    10019        /*I* NAME: SET_UP_START
     1563    10020             PURPOSE: To set up the OPEN_FPT for the first open of this spec.
     1564    10021             CALL: CALL SET_UP_START;
     1565    10022             DESCRIPTION: This procedure merges the specified input options into the
     1566    10023                          fresh OPEN_FPT along with the pieces returned from M$FID.
     1567    10024                          When this procedure returns, a call to M$OPEN should open
     1568    10025                          the first file in this file spec.
     1569    10026        */
     1570    10027        %FPT_REM (FPTN = FPT_REM,
     1571    10028                  DISP = REM,
     1572    10029                  STCLASS = STATIC);
     1573    10043    2   DCL VOL UBIN WORD;
     1574    10044    2   DCL I UBIN WORD;
     1575    10045    2           FPT_OPEN_EI.V.INITZ.SCRUB# = %YES#;
     1576    10046    2           IF ICB.ORG
     1577    10047    2             OR ICB.TYPE.COUNT>0
     1578    10048    2             OR ICB.DATE.RELATION ~= 0
     1579    10049    2             OR ICB.CREATOR_SEL ~= 0
     1580    10050    2             OR ICB.SORTING_ORDER.COUNT > 0
     1581    10051    2            THEN
     1582    10052    2              ICB.FPARAM_REQUIRED.FOR_SELECTION = '1'B;
     1583    10053    2            ELSE
     1584    10054    2              ICB.FPARAM_REQUIRED.FOR_SELECTION = '0'B;
     1585    10055    2           IF CODE=4 OR CODE = 5
     1586    10056    2             OR (CMD_MASK & '34'O)
     1587    10057    2            THEN
     1588    10058    2              ICB.FPARAM_REQUIRED.FOR_OPERATION = '1'B;
     1589    10059    2            ELSE
     1590    10060    2              ICB.FPARAM_REQUIRED.FOR_OPERATION = '0'B;
     1591    10061    2           IF RESULTS_FID_IN.NAME
     1592    10062    2            THEN
     1593    10063    2              FPT_OPEN_EI.NAME_ = VECTOR(IN_NAME);
     1594    10064    2           IF RESULTS_FID_IN.ACCT
     1595    10065    2            THEN
     1596    10066    2              FPT_OPEN_EI.ACCT_ = VECTOR(IN_ACCT);
     1597    10067    2           IF RESULTS_FID_IN.RES
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:179  
     1598    10068    2            THEN
     1599    10069    2              FPT_OPEN_EI.V.RES# = IN_RES;
     1600    10070    2           IF RESULTS_FID_IN.WSN
     1601    10071    2            THEN
     1602    10072    2              FPT_OPEN_EI.WSN_ = VECTOR(IN_WSN);
     1603    10073    2           FPT_OPEN_EI.V.ASN# = IN_ASN;
     1604    10074    2           IF ICB.DEV_MASK & '140'O        /* If tapes                           */
     1605    10075    2            THEN                           /* VOL defaults to last for this set  */
     1606    10076    3            DO;
     1607    10077    3               CALL VPD$CHECK_VOL(IN_SN,3,,I,0); /* Get last VOL in I            */
     1608    10078    3               FPT_OPEN_EI.V.VOL# = I;     /* Move WORD VOL to UBIN(9) field     */
     1609    10079    3               END;
     1610    10080    2           IF ICB.SPEC_TYPE~=1 AND ICB.SPEC_TYPE~=7
     1611    10081    2            THEN
     1612    10082    3            DO;
     1613    10083    3               FPT_OPEN_EI.V.OPER.THISF# = %YES#;
     1614    10084    3               IF ICB.PHYSICAL=0 AND (ICB.DEV_MASK & '140'O) /* Tapes and PHYS   */
     1615    10085    3                THEN                       /* START AT BEGINNING OF TAPE         */
     1616    10086    4                DO;
     1617    10087    4                   FPT_OPEN_EI.V.OPER.MNTONLY# = %YES#;
     1618    10088    4                   FPT_OPEN_EI.V.VOL# = 1; /* Special default                    */
     1619    10089    4                   CALL VPD$CHECK_VOL(IN_SN,3,,VOL,0); /* What's hanging         */
     1620    10090    4                   IF VOL > 1              /*  If not VOL#1                      */
     1621    10091    4                    THEN
     1622    10092    5                    DO;
     1623    10093    5                       FPT_REM.V.PSN# = IN_SN.SN(VOL-1); /*  remove current vol*/
     1624    10094    6                       CALL M$REM(FPT_REM) WHENALTRETURN DO; END;
             10094                                /* ignore ALTRETURN */
     1625    10095    5                       END;
     1626    10096    4                   END;
     1627    10097    3               END;
     1628    10098    3           DO CASE(ICB.SPEC_TYPE);
     1629    10099    3            CASE(5);                       /* ABC? WILDCARDING                   */
     1630    10100    3              IF IN_ASN=%FILE#
     1631    10101    3               THEN                        /* We can save some time...           */
     1632    10102    4               DO;                         /* Manufacture first NAME to OPEN     */
     1633    10103    4                  CALL INDEX(I,'?',IN_NAME.STRING);
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:180  
     1634    10104    4                  FPT_OPEN_EI.NAME_ = VECTOR(OPEN_NAME);
     1635    10105    4                  IF ICB.SRCHCOND.REV
     1636    10106    4                   THEN                    /* Start at the end                   */
     1637    10107    5                   DO;
     1638    10108    5                      OPEN_NAME.LEN = I+1;
     1639    10109    5                      CALL CONCAT(OPEN_NAME.STRING,
     1640    10110    5                        SUBSTR(IN_NAME.STRING,0,I),
     1641    10111    5                        BITASC('777'O) );
     1642    10112    5                      END;
     1643    10113    4                   ELSE                    /* Start at the beginning             */
     1644    10114    5                   DO;
     1645    10115    5                      OPEN_NAME.LEN = I;
     1646    10116    5                      OPEN_NAME.STRING = IN_NAME.STRING;
     1647    10117    5                      END;
     1648    10118    4                  END;
     1649    10119    3            CASE(3);                       /* SUB-RANGE of directory             */
     1650    10120    3              IF ICB.SRCHCOND.REV
     1651    10121    3               THEN                        /* Start at the end                   */
     1652    10122    4               DO;
     1653    10123    4                  FPT_OPEN_EI.NAME_ = VECTOR(OPEN_NAME);
     1654    10124    4                  OPEN_NAME.STRING = ICB.NAME_RANGE_END;
     1655    10125    4                  OPEN_NAME.LEN = 31;
     1656    10126    4                  END;
     1657    10127    3            CASE(7,8);                     /* FSN SPECIFICATIONS                 */
     1658    10128    3              FPT_OPEN_EI.V.FSN# = ICB.FSN.START;
     1659    10129    3              FPT_OPEN_EI.V.OPER.MNTONLY# = %NO#;
     1660    10130    3            END;                           /* END CASE*/
     1661    10131    2           IF ICB.VOL ~= 0
     1662    10132    2            THEN                           /* VOL specified                      */
     1663    10133    3            DO;
     1664    10134    3               FPT_OPEN_EI.V.VOL# = ICB.VOL;
     1665    10135    3               ICB.VOL = 0;                /* VOL=N is a one-shot option         */
     1666    10136    3               END;
     1667    10137    2           BAD_FILE_NAME = ' 1';           /* An impossible filename             */
     1668    10138    2   END SET_UP_START;
     1669    10139    1   END VPF$OPEN_NEXT;
     1670    10140        %EOD;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:181  

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:182  
--  Include file information  --

   XUH_MACRO_C.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   FM$FIT.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XUD_UTS_M.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$OPEN_NEXT.

   Procedure VPF$OPEN_NEXT requires 1311 words for executable code.
   Procedure VPF$OPEN_NEXT requires 42 words of local(AUTO) storage.

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:183  

 Object Unit name= VPF$OPEN_NEXT                              File name= VPF$SRCLST.:E05TOU
 UTS= JUL 30 '97 07:37:37.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS     12     14  VPF$OPEN_NEXT
   11   Data  even  none    20     24  VPF$OPEN_NEXT
   12   Proc  even  none  1311   2437  VPF$OPEN_NEXT
   13  RoData even  none    54     66  VPF$OPEN_NEXT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        3  VPF$OPEN_NEXT
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:184  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 VPF$SORT_FID
         yes           Std       8 VPL$ERR_PROC
 yes     yes           Std       1 VPF$CALL_OPEN
         yes           Std       5 VPD$CHECK_VOL
 yes     yes           Std       3 XUD$UTS_ADJ_25TH
 yes     yes           Std       1 VPF$CLOSE_IN
 yes     yes           Std       2 VPD$WILD_COMPARE
 yes     yes           Std       2 XSF$LOCCODP
 yes     yes           Std       4 VPD$ROUND_DATE
 yes     yes           Std       1 VPD$FETCH_CREATOR
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  GETCMD                                INPUT_ERR
     EOF_SOURCE                            BREAK_LOC                             BREAKS
     BREAK_MESSAGE_REPORTER                FPARAM_BUF                            FPARAM$
     FPARAM_BOUND                          SORTING_INPUT                         CMD_MASK
     SPEC_BUF                              DIN_NAME                              IN_NAME
     IN_ACCT                               IN_PASS                               IN_RES
     IN_SN                                 IN_WSN                                IN_ASN
     ANSISPAN_OPT                          ICB                                   M$EI
     M$EI$                                 M$EI#                                 M$EO
     M$EO1                                 M$ME                                  M$SI
     M$READFILE                            M$DO                                  M$STD1
     M$SORT1                               RESULTS_FID_IN                        FPT_OPEN_EI
     FPT_OPEN_EI_SAVE                      FPT_CLOSE_EI                          B_VECTNIL
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:185  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:186  


      836        1        /*T***********************************************************/
      837        2        /*T*                                                         */
      838        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      839        4        /*T*                                                         */
      840        5        /*T***********************************************************/
      841        6        VPF$OPEN_NEXT: PROC(RET_VAL,CODE,NAME_TEXTC);

      6 12 000000   000000 700200 xent  VPF$OPEN_NE* TSX0  ! X66_AUTO_3
        12 000001   000052 000003                    ZERO    42,3

      842        7        /*D* NAME: VPF$OPEN_NEXT
      843        8             CALL: CALL VPF$OPEN_NEXT(RET_VAL,CODE,NAME_TEXTC);
      844        9             DESCRIPTION: This procedure will open the next(if CODE=1 or 5), first(if
      845       10                          CODE=2 or CODE=4, or NAME_TEXTC(if CODE=3) input
      846       11                         file from the current file or range specification with all
      847       12                         applicable input options applied.
      848       13
      849       14                          CODE=4 and 5 open with FPARAM, CODE=2 opens with FPARAM only if
      850       15                          required for file selection.
      851       16
      852       17                          RET_VAL will be returned as below:
      853       18                         RET_VAL            DESCRIPTION
      854       19                         -------            -----------
      855       20                         %VPOC_GOTFILE#   0 All fine. A file is open(or t-open) on M$EI.
      856       21                         %VPOC_EXHAUSTED# 1 No more files this spec.
      857       22                         %VPOC_NOACCESS#  2 Access denied. special...for lists and
      858       23                                            reviews only
      859       24        */
      860       25        /**/
      861       26        /*  PARAMETERS  */
      862       27        /**/
      863       28    1   DCL RET_VAL SBIN WORD;
      864       29    1   DCL CODE SBIN WORD;
      865       30    1   DCL 1 NAME_TEXTC,
      866       31    1         2 LEN UBIN BYTE UNAL,
      867       32    1         2 STRING CHAR(NAME_TEXTC.LEN);
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:187  
      868       33        /**/
      869       34        /*  INCLUDES  */
      870       35        /**/
      871       36        %INCLUDE XUD_UTS_M;                     /* for new rollover UTS declaration   */
      872      118        %INCLUDE VP_DATA_R;
      873     7105        %INCLUDE B_ERRORS_C;
      874     8232        %INCLUDE FM$FIT;
      875     8453        /**/
      876     8454        %B$TCB;
      877     8457        %B$ALT;
      878     8465        %INCLUDE F$DCB;
      879     8514        %INCLUDE XUH_MACRO_C;
      880     8598                %FPT_PFIL(FPTN = FPT_PFIL,
      881     8599                  DCB  = M$EI,
      882     8600                  BOF  = NO,
      883     8601                  STCLASS = CONSTANT);
      884     8616        %FPT_REM(FPTN = FPT_REM_FT,
      885     8617                 DISP = PTV,
      886     8618                 STCLASS = STATIC);
      887     8632    1   DCL 1 CHARB$32 BASED,
      888     8633    1         2 * CHAR(32);
      889     8634    1   DCL 1 TEXT$C BASED,
      890     8635    1         2 LEN UBIN BYTE UNAL,
      891     8636    1         2 STRING CHAR(TEXT$C.LEN);
      892     8637    1   DCL 1 OPEN_NAME,
      893     8638    1         2 LEN UBIN BYTE UNAL,
      894     8639    1         2 STRING CHAR(31) UNAL;
      895     8640    1   DCL 1 TEXT_C,
      896     8641    1         2 C UBIN BYTE CALIGNED,
      897     8642    1         2 TEXT CHAR(31) CALIGNED;
      898     8643    1   DCL CUR_FT_FSN SBIN WORD STATIC;
      899     8644    1   DCL NO_ACCESS SBIN WORD;
      900     8645    1   DCL NO_MORE_FILES SBIN WORD STATIC;
      901     8646    1   DCL FILE_FOUND SBIN WORD;
      902     8647    1   DCL SORT_STATUS SBIN WORD;
      903     8648    1   DCL ABORT_SOURCE_ERR(0:9) UBIN HALF UNAL CONSTANT INIT(
      904     8649    1           %E$OPER,%E$IOERR,%E$CANT,%E$MNTBRK,0,
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:188  
      905     8650    1           0,0,0,0,0);
      906     8651    1   DCL BAD_FILE_NAME CHAR(31) STATIC;      /* Last filename of a bad error       */
      907     8652    1   DCL T SBIN WORD;
      908     8653    1   DCL I SBIN WORD;
      909     8654    1   DCL CHAR_4 CHAR(4);
      910     8655    1   DCL FIRST BIT(1) ALIGNED;
      911     8656    1   DCL UBIN$HALF UBIN HALF BASED;
      912     8657        %XUD_UTS_EQU;                           /* For new rollover UTS               */
      913     8668        %XUD$UTS_ENTRIES;
      914     8700        %CODE03;
      915     8707        %CODE04;                                /* Structure for FPARAM dates         */
      916     8715        %CODE05;
      917     8718        %CODE06;
      918     8722        %CODE18;                                /* Structure for FIELD definitions    */
      919     8726    1   DCL CONTROL_DATE UBIN WORD STATIC;
      920     8727    1   DCL CODE$ PTR;
      921     8728        %XUG_PARAMS(NAME=XUG_PARAMS,STCLASS=BASED);
      922     9172        /**/
      923     9173        /*  ENTRY DCLS  */
      924     9174        /**/
      925     9175        %VP_ENTRIES (OMIT=VPF$OPEN_NEXT);
      926     9383    1   DCL XSF$LOCCODP ENTRY(2) ALTRET;
      927     9384
      928     9385        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:189  
      929     9386        /**/
      930     9387    1           IF SORTING_INPUT

   9387 12 000002   000000 234000 xsym               SZN     SORTING_INPUT
        12 000003   001642 604000 12                 TMI     REPLAY_SORTED

      931     9388    1            THEN
      932     9389    1              GOTO REPLAY_SORTED;
      933     9390    1           IF ICB.SPEC_TYPE > 1

   9390 12 000004   000017 235000 xsym               LDA     ICB+15
        12 000005   000001 115007                    CMPA    1,DL
        12 000006   000017 604400 12                 TMOZ    s:9398
        12 000007   000204 236000 xsym               LDQ     ICB+132
        12 000010   000017 604400 12                 TMOZ    s:9398

      934     9391    1             AND ICB.SORTING_ORDER.COUNT > 0
      935     9392    1            THEN
      936     9393    2            DO;

      937     9394    2               SORTING_INPUT = '1'B;

   9394 12 000011   400000 236003                    LDQ     -131072,DU
        12 000012   000000 756000 xsym               STQ     SORTING_INPUT

      938     9395    2               CALL VPF$SORT_FID(1);

   9395 12 000013   000000 630400 13                 EPPR0   0
        12 000014   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 000015   000000 701000 xent               TSX1    VPF$SORT_FID
        12 000016   000000 011000                    NOP     0

      939     9396    2               END;

      940     9397        /**/
      941     9398    1           RET_VAL = %VPOC_GOTFILE#;

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:190  
   9398 12 000017   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 000020   000000 450100                    STZ     0,,PR0

      942     9399    1           FPT_OPEN_EI = FPT_OPEN_EI_SAVE;

   9399 12 000021   000000 100400                    MLR     fill='000'O
        12 000022   000000 000350 xsym               ADSC9   FPT_OPEN_EI_SAVE         cn=0,n=232
        12 000023   000000 000350 xsym               ADSC9   FPT_OPEN_EI              cn=0,n=232

      943     9400    1           FIRST = %YES#;

   9400 12 000024   400000 236003                    LDQ     -131072,DU
        12 000025   200034 756100                    STQ     FIRST,,AUTO

      944     9401    2           DO CASE(CODE);

   9401 12 000026   200004 471500                    LDP1    @CODE,,AUTO
        12 000027   100000 235100                    LDA     0,,PR1
        12 000030   000006 115007                    CMPA    6,DL
        12 000031   000033 602005 12                 TNC     s:9401+5,AL
        12 000032   000070 710000 12                 TRA     s:9416
        12 000033   000070 710000 12                 TRA     s:9416
        12 000034   000045 710000 12                 TRA     s:9406
        12 000035   000041 710000 12                 TRA     s:9403
        12 000036   000053 710000 12                 TRA     s:9413
        12 000037   000041 710000 12                 TRA     s:9403
        12 000040   000045 710000 12                 TRA     s:9406

      945     9402    2            CASE(2,4);                     /* OPEN first input file              */

      946     9403    2              CALL SET_UP_START;

   9403 12 000041   002127 701000 12                 TSX1    SET_UP_START
        12 000042   000000 011000                    NOP     0

      947     9404    2              NO_MORE_FILES = 0;

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:191  
   9404 12 000043   000005 450000 11                 STZ     NO_MORE_FILES
        12 000044   000070 710000 12                 TRA     s:9416

      948     9405    2            CASE(1, 5);                    /* OPEN next file                     */

      949     9406    2              IF NO_MORE_FILES=1

   9406 12 000045   000005 235000 11                 LDA     NO_MORE_FILES
        12 000046   000001 115007                    CMPA    1,DL
        12 000047   000070 601000 12                 TNZ     s:9416

      950     9407    2               THEN                        /* Next file doesn't exist            */
      951     9408    3               DO;

      952     9409    3                  RET_VAL = %VPOC_EXHAUSTED#;

   9409 12 000050   000001 235007                    LDA     1,DL
        12 000051   000000 755100                    STA     0,,PR0

      953     9410    3                  GOTO GOT_DISPOSITION;

   9410 12 000052   001622 710000 12                 TRA     GOT_DISPOSITION

      954     9411    3                  END;
      955     9412    2            CASE(3);                       /* OPEN file NAME_TEXTC               */

      956     9413    2              FPT_OPEN_EI.NAME_   = VECTOR(NAME_TEXTC);

   9413 12 000053   200005 473500                    LDP3    @NAME_TEXTC,,AUTO
        12 000054   000100 101500                    MRL     fill='000'O
        12 000055   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        12 000056   200042 000002                    ADSC9   I+2,,AUTO                cn=0,n=2
        12 000057   200042 220100                    LDX0    I+2,,AUTO
        12 000060   000001 621010                    EAX1    1,X0
        12 000061   000000 635011                    EAA     0,X1
        12 000062   000002 771000                    ARL     2
        12 000063   000140 135007                    SBLA    96,DL
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:192  
        12 000064   200005 236100                    LDQ     @NAME_TEXTC,,AUTO
        12 000065   000006 757000 xsym               STAQ    FPT_OPEN_EI+6

      957     9414    2              FPT_OPEN_EI.V.OPER.THISF# = %YES#;

   9414 12 000066   002000 236007                    LDQ     1024,DL
        12 000067   000044 256000 xsym               ORSQ    FPT_OPEN_EI+36

      958     9415    2            END;                           /* END CASE                           */

      959     9416    1           FILE_FOUND = 0;

   9416 12 000070   200027 450100                    STZ     FILE_FOUND,,AUTO

   9416 12 000071                       PLAY_IT_AGA* null
      960     9417        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:193  
      961     9418        /**/
      962     9419        /*  Keep trying files until we run out or get a good one.                     */
      963     9420        /**/
      964     9421    1   PLAY_IT_AGAIN: ;
      965     9422    2           DO WHILE(FILE_FOUND=0 AND NO_MORE_FILES=0);

   9422 12 000071   001321 710000 12                 TRA     s:9764

      966     9423                                                /* Set up FPT_OPEN_EI                 */
      967     9424    2              NO_ACCESS = 0;

   9424 12 000072   200026 450100                    STZ     NO_ACCESS,,AUTO

      968     9425    2              IF FIRST

   9425 12 000073   200034 234100                    SZN     FIRST,,AUTO
        12 000074   000077 605000 12                 TPL     s:9429

      969     9426    2               THEN
      970     9427    2                 FIRST = %NO#;

   9427 12 000075   200034 450100                    STZ     FIRST,,AUTO
        12 000076   000102 710000 12                 TRA     s:9430

      971     9428    2               ELSE
      972     9429    2                 FPT_OPEN_EI = FPT_OPEN_EI_SAVE;

   9429 12 000077   000000 100400                    MLR     fill='000'O
        12 000100   000000 000350 xsym               ADSC9   FPT_OPEN_EI_SAVE         cn=0,n=232
        12 000101   000000 000350 xsym               ADSC9   FPT_OPEN_EI              cn=0,n=232

      973     9430    2              FPT_OPEN_EI.V.CHAIN# = ICB.CAT;

   9430 12 000102   000167 236000 xsym               LDQ     ICB+119
        12 000103   000022 772000                    QRL     18
        12 000104   000061 552010 xsym               STBQ    FPT_OPEN_EI+49,'10'O

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:194  
      974     9431    2              ADDR(FPT_OPEN_EI.V.TYPE#)->UBIN$HALF = 0; /* 0 type field in FPT   */

   9431 12 000105   000000 220003                    LDX0    0,DU
        12 000106   000047 740000 xsym               STX0    FPT_OPEN_EI+39

      975     9432    2              FPT_OPEN_EI.V.SHARE# = ICB.SHARE;

   9432 12 000107   000006 236000 xsym               LDQ     ICB+6
        12 000110   000003 736000                    QLS     3
        12 000111   000044 676000 xsym               ERQ     FPT_OPEN_EI+36
        12 000112   000030 376007                    ANQ     24,DL
        12 000113   000044 656000 xsym               ERSQ    FPT_OPEN_EI+36

      976     9433    2              FPT_OPEN_EI.V.SRCHCOND = ICB.SRCHCOND; /* Add search conditions    */

   9433 12 000114   000100 100400                    MLR     fill='000'O
        12 000115   000167 200002 xsym               ADSC9   ICB+119                  cn=1,n=2
        12 000116   200042 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
        12 000117   200042 221100                    LDX1    I+2,,AUTO
        12 000120   000045 741000 xsym               STX1    FPT_OPEN_EI+37

      977     9434    2              FPT_OPEN_EI.V.IOERROK# = ICB.FLAVOR.IOERROK;

   9434 12 000121   000172 236000 xsym               LDQ     ICB+122
        12 000122   000400 376003                    ANQ     256,DU
        12 000123   000002 736000                    QLS     2
        12 000124   000060 676000 xsym               ERQ     FPT_OPEN_EI+48
        12 000125   003000 376003                    ANQ     1536,DU
        12 000126   000060 656000 xsym               ERSQ    FPT_OPEN_EI+48

      978     9435    2              FPT_OPEN_EI.V.IGNOREFSN# = ICB.IGNOREFSN;

   9435 12 000127   000236 236000 xsym               LDQ     ICB+158
        12 000130   400000 376003                    ANQ     -131072,DU
        12 000131   000025 772000                    QRL     21
        12 000132   000060 676000 xsym               ERQ     FPT_OPEN_EI+48
        12 000133   060000 376007                    ANQ     24576,DL
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:195  
        12 000134   000060 656000 xsym               ERSQ    FPT_OPEN_EI+48

      979     9436    2              IF ICB.FTORG=0

   9436 12 000135   000157 236000 xsym               LDQ     ICB+111
        12 000136   000777 316003                    CANQ    511,DU
        12 000137   000143 601000 12                 TNZ     s:9440

      980     9437    2               THEN
      981     9438    2                 FPT_OPEN_EI.V.ORG# = %FREE#; /* Default FT org                  */

   9438 12 000140   023000 236007                    LDQ     9728,DL
        12 000141   000046 552010 xsym               STBQ    FPT_OPEN_EI+38,'10'O
        12 000142   000145 710000 12                 TRA     s:9441

      982     9439    2               ELSE
      983     9440    2                 FPT_OPEN_EI.V.ORG# = ICB.FTORG;

   9440 12 000143   000011 772000                    QRL     9
        12 000144   000046 552010 xsym               STBQ    FPT_OPEN_EI+38,'10'O

      984     9441    2              FPT_OPEN_EI.V.BLKL# = ICB.BLKL;

   9441 12 000145   000012 722000 xsym               LXL2    ICB+10
        12 000146   000052 742000 xsym               STX2    FPT_OPEN_EI+42

      985     9442    2              FPT_OPEN_EI.V.RECL# = ICB.RECL;

   9442 12 000147   000013 723000 xsym               LXL3    ICB+11
        12 000150   000052 443000 xsym               SXL3    FPT_OPEN_EI+42

      986     9443    2              IF ICB.NBLOCK

   9443 12 000151   000003 234000 xsym               SZN     ICB+3
        12 000152   000156 605000 12                 TPL     s:9447

      987     9444    2               THEN
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:196  
      988     9445    2                 FPT_OPEN_EI.V.BLOCKED# = %NO#;

   9445 12 000153   000001 236000 13                 LDQ     1
        12 000154   000047 356000 xsym               ANSQ    FPT_OPEN_EI+39
        12 000155   000162 710000 12                 TRA     s:9448

      989     9446    2               ELSE
      990     9447    2                 FPT_OPEN_EI.V.BLOCKED# = %YES#;

   9447 12 000156   000047 236000 xsym               LDQ     FPT_OPEN_EI+39
        12 000157   000001 376000 13                 ANQ     1
        12 000160   100000 276007                    ORQ     32768,DL
        12 000161   000047 756000 xsym               STQ     FPT_OPEN_EI+39

      991     9448    2              IF ICB.NSPAN

   9448 12 000162   000002 234000 xsym               SZN     ICB+2
        12 000163   000167 605000 12                 TPL     s:9452

      992     9449    2               THEN
      993     9450    2                 FPT_OPEN_EI.V.SPANNED# = %NO#;

   9450 12 000164   000002 236000 13                 LDQ     2
        12 000165   000047 356000 xsym               ANSQ    FPT_OPEN_EI+39
        12 000166   000173 710000 12                 TRA     s:9453

      994     9451    2               ELSE
      995     9452    2                 FPT_OPEN_EI.V.SPANNED# = %YES#;

   9452 12 000167   000047 236000 xsym               LDQ     FPT_OPEN_EI+39
        12 000170   000002 376000 13                 ANQ     2
        12 000171   020000 276007                    ORQ     8192,DL
        12 000172   000047 756000 xsym               STQ     FPT_OPEN_EI+39

      996     9453    2              IF ICB.EBCDIC

   9453 12 000173   000000 234000 xsym               SZN     ICB
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:197  
        12 000174   000201 605000 12                 TPL     s:9456

      997     9454    2               THEN
      998     9455    2                 FPT_OPEN_EI.V.EBCDIC# = %YES#;

   9455 12 000175   000060 236000 xsym               LDQ     FPT_OPEN_EI+48
        12 000176   000003 376000 13                 ANQ     3
        12 000177   400000 276003                    ORQ     -131072,DU
        12 000200   000060 756000 xsym               STQ     FPT_OPEN_EI+48

      999     9456    2              IF ICB.ANSISPAN

   9456 12 000201   000237 234000 xsym               SZN     ICB+159
        12 000202   000210 605000 12                 TPL     s:9459

     1000     9457    2               THEN
     1001     9458    2                 FPT_OPEN_EI.V.ANSISPANSEQ# = ANSISPAN_OPT;

   9458 12 000203   000000 236000 xsym               LDQ     ANSISPAN_OPT
        12 000204   000030 772000                    QRL     24
        12 000205   000060 676000 xsym               ERQ     FPT_OPEN_EI+48
        12 000206   006000 376007                    ANQ     3072,DL
        12 000207   000060 656000 xsym               ERSQ    FPT_OPEN_EI+48

     1002     9459    2              IF ICB.NCNVRT

   9459 12 000210   000005 234000 xsym               SZN     ICB+5
        12 000211   000214 605000 12                 TPL     s:9462

     1003     9460    2               THEN
     1004     9461    2                 FPT_OPEN_EI.V.CNVRT# = %NO#;

   9461 12 000212   000004 236000 13                 LDQ     4
        12 000213   000060 356000 xsym               ANSQ    FPT_OPEN_EI+48

     1005     9462    2              IF RESULTS_FID_IN.SN

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:198  
   9462 12 000214   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 000215   040000 316003                    CANQ    16384,DU
        12 000216   000221 600000 12                 TZE     s:9465

     1006     9463    2               THEN
     1007     9464    2                 FPT_OPEN_EI.SN_ = VECTOR(IN_SN);

   9464 12 000217   000006 237000 13                 LDAQ    6
        12 000220   000002 757000 xsym               STAQ    FPT_OPEN_EI+2

     1008     9465    2              IF RESULTS_FID_IN.PASS

   9465 12 000221   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 000222   100000 316003                    CANQ    32768,DU
        12 000223   000226 600000 12                 TZE     s:9468

     1009     9466    2               THEN
     1010     9467    2                 FPT_OPEN_EI.PASS_ = VECTOR(IN_PASS);

   9467 12 000224   000010 237000 13                 LDAQ    8
        12 000225   000010 757000 xsym               STAQ    FPT_OPEN_EI+8

     1011     9468    2              IF ICB.FPARAM_REQUIRED

   9468 12 000226   000203 236000 xsym               LDQ     ICB+131
        12 000227   600000 316003                    CANQ    -65536,DU
        12 000230   000233 600000 12                 TZE     s:9471

     1012     9469    2               THEN
     1013     9470    2                 FPT_OPEN_EI.FPARAM_ = VECTOR(FPARAM_BUF);

   9470 12 000231   000012 237000 13                 LDAQ    10
        12 000232   000030 757000 xsym               STAQ    FPT_OPEN_EI+24

     1014     9471    2              IF ICB.SPEC_TYPE~=1 AND ICB.SPEC_TYPE~=7

   9471 12 000233   000017 235000 xsym               LDA     ICB+15
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:199  
        12 000234   000001 115007                    CMPA    1,DL
        12 000235   000242 600000 12                 TZE     s:9474
        12 000236   000007 115007                    CMPA    7,DL
        12 000237   000242 600000 12                 TZE     s:9474

     1015     9472    2               THEN
     1016     9473    2                 FPT_OPEN_EI.V.OPER.NXTF# = %YES#;

   9473 12 000240   004000 236007                    LDQ     2048,DL
        12 000241   000044 256000 xsym               ORSQ    FPT_OPEN_EI+36

     1017     9474    2              IF ICB.DEV_MASK.MAN_TAPE

   9474 12 000242   000171 236000 xsym               LDQ     ICB+121
        12 000243   100000 316003                    CANQ    32768,DU
        12 000244   000267 600000 12                 TZE     s:9483
        12 000245   000100 100400                    MLR     fill='000'O
        12 000246   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        12 000247   200042 000010                    ADSC9   I+2,,AUTO                cn=0,n=8
        12 000250   200042 237100                    LDAQ    I+2,,AUTO
        12 000251   000014 377000 13                 ANAQ    12
        12 000252   000264 601000 12                 TNZ     s:9479
        12 000253   000100 100400                    MLR     fill='000'O
        12 000254   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        12 000255   200044 000010                    ADSC9   I+4,,AUTO                cn=0,n=8
        12 000256   200044 237100                    LDAQ    I+4,,AUTO
        12 000257   000016 377000 13                 ANAQ    14
        12 000260   000267 600000 12                 TZE     s:9483
        12 000261   000203 236000 xsym               LDQ     ICB+131
        12 000262   600000 316003                    CANQ    -65536,DU
        12 000263   000267 600000 12                 TZE     s:9483

     1018     9475    2                AND ((CMD_MASK & '34'O/* copies */)~='0'B /* COPY                */
     1019     9476    2                OR ((CMD_MASK & '0006'O/* lists */)~='0'B /* LIST                */
     1020     9477    2                AND ICB.FPARAM_REQUIRED))  /* with ATTR                          */
     1021     9478    2               THEN
     1022     9479    2                 FPT_OPEN_EI.V.OPER.TEST# = %NO#;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:200  

   9479 12 000264   000005 236000 13                 LDQ     5
        12 000265   000044 356000 xsym               ANSQ    FPT_OPEN_EI+36
        12 000266   000277 710000 12                 TRA     s:9488

     1023     9480                                                /* open TEST mode unless an LT        */
     1024     9481                                                /* COPY or a L(A) LT                  */
     1025     9482    2               ELSE
     1026     9483    2                 IF ICB.DEV_MASK.DEV_TAPE  /* or Free Tape                       */

   9483 12 000267   000171 236000 xsym               LDQ     ICB+121
        12 000270   040000 316003                    CANQ    16384,DU
        12 000271   000275 600000 12                 TZE     s:9487

     1027     9484    2                  THEN
     1028     9485    2                    FPT_OPEN_EI.V.OPER.TEST# = %NO#;

   9485 12 000272   000005 236000 13                 LDQ     5
        12 000273   000044 356000 xsym               ANSQ    FPT_OPEN_EI+36
        12 000274   000277 710000 12                 TRA     s:9488

     1029     9486    2                  ELSE
     1030     9487    2                    FPT_OPEN_EI.V.OPER.TEST# = %YES#;

   9487 12 000275   020000 236007                    LDQ     8192,DL
        12 000276   000044 256000 xsym               ORSQ    FPT_OPEN_EI+36

     1031     9488    2              IF ICB.DEV_MASK.DEV_TAPE

   9488 12 000277   000171 236000 xsym               LDQ     ICB+121
        12 000300   040000 316003                    CANQ    16384,DU
        12 000301   000306 600000 12                 TZE     OPEN_IT

     1032     9489    2               THEN
     1033     9490    2                 FPT_OPEN_EI.V.CVOL# = %YES#;

   9490 12 000302   000044 236000 xsym               LDQ     FPT_OPEN_EI+36
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:201  
        12 000303   000020 376000 13                 ANQ     16
        12 000304   000004 276007                    ORQ     4,DL
        12 000305   000044 756000 xsym               STQ     FPT_OPEN_EI+36

   9488 12 000306                       OPEN_IT      null
     1034     9491    2   OPEN_IT:   ;                            /* Do the OPEN!                       */
     1035     9492        /**/
     1036     9493        /*  The following setup must be done before EACH OPEN.                        */
     1037     9494        /**/
     1038     9495    2              GETCMD.WORK$->XUG_PARAMS.ERRDCB=0;
              9495                       /* Make sure GETCMD forgets about any file we had open before */

   9495 12 000306   000004 470400 xsym               LDP0    GETCMD+4
        12 000307   000070 450100                    STZ     56,,PR0

     1039     9496    2              GETCMD.ERRDCB# = 0;

   9496 12 000310   000011 450000 xsym               STZ     GETCMD+9

     1040     9497    2              FPARAM_BUF(0) = 0;           /* In case it will not be stored      */

   9497 12 000311   000000 450000 xsym               STZ     FPARAM_BUF

     1041     9498    2              FPARAM$ = ADDR(FPARAM_BUF);  /* In case it will not be stored      */

   9498 12 000312   000013 236000 13                 LDQ     11
        12 000313   000000 756000 xsym               STQ     FPARAM$

     1042     9499        /**/
     1043     9500        /*  Time for the actual OPEN.                                                 */
     1044     9501        /**/
     1045     9502    2              CALL VPF$CALL_OPEN (FPT_OPEN_EI) ALTRET (EI_OPEN_ALT);

   9502 12 000314   000021 630400 13                 EPPR0   17
        12 000315   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 000316   000000 701000 xent               TSX1    VPF$CALL_OPEN
        12 000317   001442 702000 12                 TSX2    EI_OPEN_ALT
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:202  

     1046     9503    2              EOF_SOURCE = '0'B;

   9503 12 000320   000000 450000 xsym               STZ     EOF_SOURCE

     1047     9504    2              CALL TWIDDLE_AFTER_OPEN;

   9504 12 000321   001704 701000 12                 TSX1    TWIDDLE_AFTER_OPEN
        12 000322   000000 011000                    NOP     0

     1048     9505    2              IF FPT_OPEN_EI.V.OPER.MNTONLY#

   9505 12 000323   000044 236000 xsym               LDQ     FPT_OPEN_EI+36
        12 000324   001000 316007                    CANQ    512,DL
        12 000325   000343 600000 12                 TZE     s:9515

     1049     9506    3               THEN DO;                    /* Start at beginning file on         */

     1050     9507    3                  FPT_OPEN_EI.V.OPER.MNTONLY# = %NO#; /* this tape               */

   9507 12 000326   000022 236000 13                 LDQ     18
        12 000327   000044 356000 xsym               ANSQ    FPT_OPEN_EI+36

     1051     9508    3                  IF M$EI$->F$DCB.FSECT=1

   9508 12 000330   000000 470400 xsym               LDP0    M$EI$
        12 000331   000077 220100                    LDX0    63,,PR0
        12 000332   000001 100003                    CMPX0   1,DU
        12 000333   000337 601000 12                 TNZ     s:9512

     1052     9509    3                   THEN
     1053     9510    3                     FPT_OPEN_EI.V.FSN# = M$EI$->F$DCB.FSN;

   9510 12 000334   000034 221100                    LDX1    28,,PR0
        12 000335   000066 741000 xsym               STX1    FPT_OPEN_EI+54
        12 000336   000342 710000 12                 TRA     s:9513

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:203  
     1054     9511    3                   ELSE
     1055     9512    3                     FPT_OPEN_EI.V.FSN# = M$EI$->F$DCB.FSN+1;

   9512 12 000337   000034 221100                    LDX1    28,,PR0
        12 000340   000001 622011                    EAX2    1,X1
        12 000341   000066 742000 xsym               STX2    FPT_OPEN_EI+54

     1056     9513    3                  GOTO OPEN_IT;

   9513 12 000342   000306 710000 12                 TRA     OPEN_IT

     1057     9514    3                  END;
     1058     9515    2              IF ICB.DEV_MASK.DEV_TAPE     /* DEVICE/FREE TAPE                   */

   9515 12 000343   000171 236000 xsym               LDQ     ICB+121
        12 000344   040000 316003                    CANQ    16384,DU
        12 000345   000477 600000 12                 TZE     s:9553
        12 000346   200004 470500                    LDP0    @CODE,,AUTO
        12 000347   000000 235100                    LDA     0,,PR0
        12 000350   000002 115007                    CMPA    2,DL
        12 000351   000354 600000 12                 TZE     s:9518
        12 000352   000004 115007                    CMPA    4,DL
        12 000353   000477 601000 12                 TNZ     s:9553

     1059     9516    2                AND (CODE = 2 OR CODE = 4) /* AND FIRST TIME                     */
     1060     9517    2               THEN
     1061     9518    2                 IF ICB.SPEC_TYPE > 6 AND ICB.FSN.FINISH < BITBIN('777777'O)

   9518 12 000354   000017 235000 xsym               LDA     ICB+15
        12 000355   000006 115007                    CMPA    6,DL
        12 000356   000476 604400 12                 TMOZ    s:9548
        12 000357   000044 720000 xsym               LXL0    ICB+36
        12 000360   777777 100003                    CMPX0   -1,DU
        12 000361   000476 603000 12                 TRC     s:9548

     1062     9519    2                  THEN
     1063     9520    3                  DO;                      /* GET TO CORRECT FT FSN              */
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:204  

     1064     9521    3                     IF ICB.CLPOS ~= 0 AND ICB.FSN.FINISH ~=0

   9521 12 000362   000233 235000 xsym               LDA     ICB+155
        12 000363   000372 600000 12                 TZE     s:9527
        12 000364   000000 100003                    CMPX0   0,DU
        12 000365   000372 600000 12                 TZE     s:9527

     1065     9522    3                      THEN
     1066     9523    3                        CALL VPL$ERR_PROC(3,70,'06'O);

   9523 12 000366   000025 630400 13                 EPPR0   21
        12 000367   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000370   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000371   000000 011000                    NOP     0

     1067     9524        /*E*  ERROR: VPF-00070
     1068     9525            MESSAGE: CLPOS not allowed with a FSN range.
     1069     9526        */
     1070     9527    3                     CALL M$CLOSE(FPT_CLOSE_EI) ALTRET(PFIL_ERR);

   9527 12 000372   000000 630400 xsym               EPPR0   FPT_CLOSE_EI
        12 000373   450001 713400                    CLIMB   alt,close
        12 000374   406000 401760                    pmme    nvectors=13
        12 000375   000446 702000 12                 TSX2    PFIL_ERR

     1071     9528    3                     FPT_REM_FT.V.PSN# = IN_SN.SN(0);

   9528 12 000376   040000 100400                    MLR     fill='040'O
        12 000377   000001 000006 xsym               ADSC9   IN_SN+1                  cn=0,n=6
        12 000400   000002 400006 11                 ADSC9   FPT_REM_FT+2             cn=2,n=6

     1072     9529    3                     CALL M$REM(FPT_REM_FT) ALTRET(PFIL_ERR); /* GET TO FSN=1    */

   9529 12 000401   000000 630400 11                 EPPR0   FPT_REM_FT
        12 000402   460006 713400                    CLIMB   alt,+24582
        12 000403   400000 401760                    pmme    nvectors=1
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:205  
        12 000404   000446 702000 12                 TSX2    PFIL_ERR

     1073     9530    3                     CALL M$OPEN(FPT_OPEN_EI) ALTRET(PFIL_ERR);

   9530 12 000405   000000 630400 xsym               EPPR0   FPT_OPEN_EI
        12 000406   450000 713400                    CLIMB   alt,open
        12 000407   410400 401760                    pmme    nvectors=18
        12 000410   000446 702000 12                 TSX2    PFIL_ERR

     1074     9531    4                     DO I=2 TO ICB.FSN.START;

   9531 12 000411   000002 235007                    LDA     2,DL
        12 000412   200032 755100                    STA     I,,AUTO
        12 000413   000467 710000 12                 TRA     s:9543+1

     1075     9532    4                        CALL M$PFIL(FPT_PFIL) ALTRET(PFIL_ERR);

   9532 12 000414   000000 630400 10                 EPPR0   FPT_PFIL
        12 000415   440004 713400                    CLIMB   alt,+16388
        12 000416   400000 401760                    pmme    nvectors=1
        12 000417   000446 702000 12                 TSX2    PFIL_ERR

     1076     9533    4                        IF NOT ICB.FLAVOR.FFTAPE /* For Managed Free Tapes       */

   9533 12 000420   000172 236000 xsym               LDQ     ICB+122
        12 000421   000040 316003                    CANQ    32,DU
        12 000422   000432 601000 12                 TNZ     s:9538

     1077     9534    5                         THEN DO;          /*  tape must be positioned*/

     1078     9535    5                            CALL M$CLOSE(FPT_CLOSE_EI);/*  past file mark.       */

   9535 12 000423   000000 630400 xsym               EPPR0   FPT_CLOSE_EI
        12 000424   050001 713400                    CLIMB   close
        12 000425   406000 401760                    pmme    nvectors=13

     1079     9536    5                            CALL M$OPEN(FPT_OPEN_EI) ALTRET(EI_OPEN_ALT);
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:206  

   9536 12 000426   000000 630400 xsym               EPPR0   FPT_OPEN_EI
        12 000427   450000 713400                    CLIMB   alt,open
        12 000430   410400 401760                    pmme    nvectors=18
        12 000431   001442 702000 12                 TSX2    EI_OPEN_ALT

     1080     9537    5                            END;

     1081     9538    4                        CALL VPD$CHECK_VOL(IN_SN,0,M$EI#,,0); /* Check VOL trans */

   9538 12 000432   000030 236000 13                 LDQ     24
        12 000433   200046 756100                    STQ     I+6,,AUTO
        12 000434   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000435   000031 235000 13                 LDA     25
        12 000436   200044 757100                    STAQ    I+4,,AUTO
        12 000437   000032 237000 13                 LDAQ    26
        12 000440   200042 757100                    STAQ    I+2,,AUTO
        12 000441   200042 630500                    EPPR0   I+2,,AUTO
        12 000442   000023 631400 xsym               EPPR1   B_VECTNIL+19
        12 000443   000000 701000 xent               TSX1    VPD$CHECK_VOL
        12 000444   000000 011000                    NOP     0

     1082     9539    5                        DO WHILE('0'B);

   9539 12 000445   000466 710000 12                 TRA     s:9543

     1083     9540    5   PFIL_ERR:               NO_MORE_FILES = 1; /* FOR POSSIBLE IMMEDIATE RECALL   */

   9540 12 000446   000001 235007       PFIL_ERR     LDA     1,DL
        12 000447   000005 755000 11                 STA     NO_MORE_FILES

     1084     9541    5                           CALL VPL$ERR_PROC(2,0,,INPUT_ERR,,,M$EI#); /* Abort step */

   9541 12 000450   000031 236000 13                 LDQ     25
        12 000451   200050 756100                    STQ     I+8,,AUTO
        12 000452   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000453   000001 235000 xsym               LDA     B_VECTNIL+1
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:207  
        12 000454   200046 757100                    STAQ    I+6,,AUTO
        12 000455   000034 236000 13                 LDQ     28
        12 000456   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000457   200044 757100                    STAQ    I+4,,AUTO
        12 000460   000036 237000 13                 LDAQ    30
        12 000461   200042 757100                    STAQ    I+2,,AUTO
        12 000462   200042 630500                    EPPR0   I+2,,AUTO
        12 000463   000025 631400 xsym               EPPR1   B_VECTNIL+21
        12 000464   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000465   000000 011000                    NOP     0

     1085     9542    5                           END;

     1086     9543    4                        END;

   9543 12 000466   200032 054100                    AOS     I,,AUTO
        12 000467   000044 236000 xsym               LDQ     ICB+36
        12 000470   000022 772000                    QRL     18
        12 000471   200032 116100                    CMPQ    I,,AUTO
        12 000472   000414 605000 12                 TPL     s:9532

     1087     9544    3                     CUR_FT_FSN = ICB.FSN.START-1;

   9544 12 000473   000001 136007                    SBLQ    1,DL
        12 000474   000004 756000 11                 STQ     CUR_FT_FSN

     1088     9545    3                     END;

   9545 12 000475   000477 710000 12                 TRA     s:9553

     1089     9546    2                  ELSE
     1090     9547    3                  DO;

     1091     9548    3                     CUR_FT_FSN=0;

   9548 12 000476   000004 450000 11                 STZ     CUR_FT_FSN

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:208  
     1092     9549    3                     END;

     1093     9550                                                /* NOMARKS doesn't really matter here */
     1094     9551                                                /* since we are positioned past the   */
     1095     9552                                                /* tape mark.                         */
     1096     9553    2              IF ICB.DEV_MASK.DEV_TAPE     /* FT TAPE                            */

   9553 12 000477   000171 236000 xsym               LDQ     ICB+121
        12 000500   040000 316003                    CANQ    16384,DU
        12 000501   000504 601000 12                 TNZ     s:9556
        12 000502   100000 316003                    CANQ    32768,DU
        12 000503   000517 600000 12                 TZE     NO_ACC_CONT

     1097     9554    2                OR ICB.DEV_MASK.MAN_TAPE   /* LT    TAPE                         */
     1098     9555    2               THEN                        /* Tape involved                      */
     1099     9556    2                 CALL VPD$CHECK_VOL(IN_SN,0,M$EI#,,0); /* Check for VOL trans'n  */

   9556 12 000504   000030 236000 13                 LDQ     24
        12 000505   200046 756100                    STQ     I+6,,AUTO
        12 000506   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000507   000031 235000 13                 LDA     25
        12 000510   200044 757100                    STAQ    I+4,,AUTO
        12 000511   000032 237000 13                 LDAQ    26
        12 000512   200042 757100                    STAQ    I+2,,AUTO
        12 000513   200042 630500                    EPPR0   I+2,,AUTO
        12 000514   000023 631400 xsym               EPPR1   B_VECTNIL+19
        12 000515   000000 701000 xent               TSX1    VPD$CHECK_VOL
        12 000516   000000 011000                    NOP     0

     1100     9557    2   NO_ACC_CONT:
     1101     9558    3              DO CASE(ICB.SPEC_TYPE);

   9558 12 000517   000017 235000 xsym  NO_ACC_CONT  LDA     ICB+15
        12 000520   000011 115007                    CMPA    9,DL
        12 000521   000523 602005 12                 TNC     NO_ACC_CONT+4,AL
        12 000522   000701 710000 12                 TRA     s:9633
        12 000523   000701 710000 12                 TRA     s:9633
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:209  
        12 000524   000534 710000 12                 TRA     s:9560
        12 000525   000541 710000 12                 TRA     s:9564
        12 000526   000544 710000 12                 TRA     s:9566
        12 000527   000620 710000 12                 TRA     s:9597
        12 000530   000620 710000 12                 TRA     s:9597
        12 000531   000701 710000 12                 TRA     s:9633
        12 000532   000534 710000 12                 TRA     s:9560
        12 000533   000651 710000 12                 TRA     s:9612

     1102     9559    3               CASE(1,7);                  /* SINGLE FID OR SINGLE FSN...        */

     1103     9560    3                 FILE_FOUND = 1;

   9560 12 000534   000001 236007                    LDQ     1,DL
        12 000535   200027 756100                    STQ     FILE_FOUND,,AUTO

     1104     9561    3                 NO_MORE_FILES = 1;

   9561 12 000536   000005 756000 11                 STQ     NO_MORE_FILES

     1105     9562    3                 CUR_FT_FSN = CUR_FT_FSN +1;

   9562 12 000537   000004 054000 11                 AOS     CUR_FT_FSN
        12 000540   000701 710000 12                 TRA     s:9633

     1106     9563    3               CASE(2);                    /* FULL RANGE                         */

     1107     9564    3                 FILE_FOUND = 1;

   9564 12 000541   000001 236007                    LDQ     1,DL
        12 000542   200027 756100                    STQ     FILE_FOUND,,AUTO
        12 000543   000701 710000 12                 TRA     s:9633

     1108     9565    3               CASE(3);                    /* SUB-RANGE OF DIRECTORY DEVICE      */

     1109     9566    3                 IF ICB.PHYSICAL=1

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:210  
   9566 12 000544   000011 236000 xsym               LDQ     ICB+9
        12 000545   000001 116007                    CMPQ    1,DL
        12 000546   000562 601000 12                 TNZ     s:9577

     1110     9567    3                  THEN
     1111     9568    4                  DO;                      /* PHYSICAL ORDER FROM LT             */

     1112     9569    4                     FILE_FOUND = 1;

   9569 12 000547   000001 235007                    LDA     1,DL
        12 000550   200027 755100                    STA     FILE_FOUND,,AUTO

     1113     9570    4                     IF ADDR(DIN_NAME) -> TEXT$C.STRING =

   9570 12 000551   000000 236000 xsym               LDQ     DIN_NAME
        12 000552   000033 772000                    QRL     27
        12 000553   000000 620006                    EAX0    0,QL
        12 000554   040000 106440                    CMPC    fill='040'O
        12 000555   000000 200010 xsym               ADSC9   DIN_NAME                 cn=1,n=*X0
        12 000556   000140 000037 xsym               ADSC9   ICB+96                   cn=0,n=31
        12 000557   000701 601000 12                 TNZ     s:9633

     1114     9571    4                       ICB.NAME_RANGE_END
     1115     9572    4                      THEN
     1116     9573    4                        NO_MORE_FILES = 1;

   9573 12 000560   000005 755000 11                 STA     NO_MORE_FILES

     1117     9574    4                     END;

   9574 12 000561   000701 710000 12                 TRA     s:9633

     1118     9575    3                  ELSE                     /* NOT PHYSICAL                       */
     1119     9576    4                  DO;

     1120     9577    4                     IF (ADDR(DIN_NAME) -> TEXT$C.STRING <

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:211  
   9577 12 000562   000000 236000 xsym               LDQ     DIN_NAME
        12 000563   000033 772000                    QRL     27
        12 000564   000000 620006                    EAX0    0,QL
        12 000565   000000 236000 xsym               LDQ     IN_NAME
        12 000566   000033 772000                    QRL     27
        12 000567   000000 621006                    EAX1    0,QL
        12 000570   040040 106440                    CMPC    fill='040'O
        12 000571   000000 200010 xsym               ADSC9   DIN_NAME                 cn=1,n=*X0
        12 000572   000000 200011 xsym               ADSC9   IN_NAME                  cn=1,n=*X1
        12 000573   000577 603000 12                 TRC     s:9582
        12 000574   000167 236000 xsym               LDQ     ICB+119
        12 000575   001000 316007                    CANQ    512,DL
        12 000576   000611 601000 12                 TNZ     OUTSIDE_RANGE

     1121     9578    4                       ADDR(IN_NAME)->TEXT$C.STRING)
     1122     9579    4                       AND ICB.SRCHCOND.REV
     1123     9580    4                      THEN                 /* Too far back                       */
     1124     9581    4                        GOTO OUTSIDE_RANGE;
     1125     9582    4                     IF ADDR(DIN_NAME) -> TEXT$C.STRING >

   9582 12 000577   040040 106400                    CMPC    fill='040'O
        12 000600   000140 000037 xsym               ADSC9   ICB+96                   cn=0,n=31
        12 000601   000000 200010 xsym               ADSC9   DIN_NAME                 cn=1,n=*X0
        12 000602   000606 603000 12                 TRC     s:9587
        12 000603   000167 236000 xsym               LDQ     ICB+119
        12 000604   001000 316007                    CANQ    512,DL
        12 000605   000611 600000 12                 TZE     OUTSIDE_RANGE

     1126     9583    4                       ICB.NAME_RANGE_END
     1127     9584    4                       AND NOT ICB.SRCHCOND.REV
     1128     9585    4                      THEN                 /* Too far foreward                   */
     1129     9586    4                        GOTO OUTSIDE_RANGE;
     1130     9587    4                     FILE_FOUND = 1;       /* Must be good                       */

   9587 12 000606   000001 236007                    LDQ     1,DL
        12 000607   200027 756100                    STQ     FILE_FOUND,,AUTO

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:212  
     1131     9588    5                     DO WHILE ('0'B);

   9588 12 000610   000701 710000 12                 TRA     s:9633

   9586 12 000611                       OUTSIDE_RAN* null
     1132     9589    5   OUTSIDE_RANGE:       ;
     1133     9590    5                        IF ICB.DEV_MASK ~= '100'O /* LT                          */

   9590 12 000611   000171 236000 xsym               LDQ     ICB+121
        12 000612   777000 376003                    ANQ     -512,DU
        12 000613   100000 116003                    CMPQ    32768,DU
        12 000614   000617 600000 12                 TZE     s:9594

     1134     9591    5                         THEN
     1135     9592    5                           NO_MORE_FILES = 1;

   9592 12 000615   000001 236007                    LDQ     1,DL
        12 000616   000005 756000 11                 STQ     NO_MORE_FILES

     1136     9593    5                        END;

     1137     9594    4                     END;

   9594 12 000617   000701 710000 12                 TRA     s:9633

     1138     9595        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:213  
     1139     9596    3               CASE(4,5);                  /* WILDCARDING...                     */

     1140     9597    3                 CALL VPD$WILD_COMPARE(IN_NAME,DIN_NAME) ALTRET(NO_WILD_MATCH);

   9597 12 000620   000040 630400 13                 EPPR0   32
        12 000621   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000622   000000 701000 xent               TSX1    VPD$WILD_COMPARE
        12 000623   000627 702000 12                 TSX2    NO_WILD_MATCH

     1141     9598    3                 FILE_FOUND = 1;

   9598 12 000624   000001 235007                    LDA     1,DL
        12 000625   200027 755100                    STA     FILE_FOUND,,AUTO

     1142     9599    4                 DO WHILE('0'B);           /* NEVER DO                           */

   9599 12 000626   000701 710000 12                 TRA     s:9633

     1143     9600    4   NO_WILD_MATCH:
     1144     9601    4                    IF ICB.SPEC_TYPE = 5 AND ICB.DEV_MASK.MAN_DISC

   9601 12 000627   000017 235000 xsym  NO_WILD_MAT* LDA     ICB+15
        12 000630   000005 115007                    CMPA    5,DL
        12 000631   000650 601000 12                 TNZ     s:9610
        12 000632   000171 236000 xsym               LDQ     ICB+121
        12 000633   200000 316003                    CANQ    65536,DU
        12 000634   000650 600000 12                 TZE     s:9610

     1145     9602    4                     THEN                  /* Wildcard without initial '?'       */
     1146     9603    5                     DO;

     1147     9604    5                        CALL INDEX(I,'?',IN_NAME.STRING);

   9604 12 000635   000000 124400                    SCM     mask='000'O
        12 000636   000000 200037 xsym               ADSC9   IN_NAME                  cn=1,n=31
        12 000637   000042 000001 13                 ADSC9   34                       cn=0,n=1
        12 000640   200032 000100                    ARG     I,,AUTO
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:214  

     1148     9605    5                        IF SUBSTR(DIN_NAME.STRING,0,I)

   9605 12 000641   200032 720100                    LXL0    I,,AUTO
        12 000642   040040 106440                    CMPC    fill='040'O
        12 000643   000000 200010 xsym               ADSC9   DIN_NAME                 cn=1,n=*X0
        12 000644   000000 200010 xsym               ADSC9   IN_NAME                  cn=1,n=*X0
        12 000645   000650 600000 12                 TZE     s:9610

     1149     9606    5                          ~= SUBSTR(IN_NAME.STRING,0,I)
     1150     9607    5                         THEN              /* End of wild, stop opening files    */
     1151     9608    5                           NO_MORE_FILES = 1;

   9608 12 000646   000001 235007                    LDA     1,DL
        12 000647   000005 755000 11                 STA     NO_MORE_FILES

     1152     9609    5                        END;

     1153     9610    4                    END;

   9610 12 000650   000701 710000 12                 TRA     s:9633

     1154     9611    3               CASE(8);                    /* FSN RANGE                          */

     1155     9612    3                 FILE_FOUND = 1;

   9612 12 000651   000001 236007                    LDQ     1,DL
        12 000652   200027 756100                    STQ     FILE_FOUND,,AUTO

     1156     9613    3                 IF M$EI$->F$DCB.ASN=%TAPE#

   9613 12 000653   000000 470400 xsym               LDP0    M$EI$
        12 000654   000032 236100                    LDQ     26,,PR0
        12 000655   777000 376007                    ANQ     -512,DL
        12 000656   002000 116007                    CMPQ    1024,DL
        12 000657   000672 601000 12                 TNZ     s:9627

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:215  
     1157     9614    3                  THEN
     1158     9615    4                  DO;

     1159     9616    4                     IF M$EI$->F$DCB.FSN>=ICB.FSN.FINISH

   9616 12 000660   000044 720000 xsym               LXL0    ICB+36
        12 000661   000034 100100                    CMPX0   28,,PR0
        12 000662   000664 600000 12                 TZE     s:9619
        12 000663   000701 603000 12                 TRC     s:9633

     1160     9617    4                      THEN
     1161     9618    5                      DO;

     1162     9619    5                         NO_MORE_FILES = 1;

   9619 12 000664   000001 235007                    LDA     1,DL
        12 000665   000005 755000 11                 STA     NO_MORE_FILES

     1163     9620    5                         IF M$EI$->F$DCB.FSN>ICB.FSN.FINISH

   9620 12 000666   000034 100100                    CMPX0   28,,PR0
        12 000667   000701 603000 12                 TRC     s:9633

     1164     9621    5                          THEN
     1165     9622    5                            FILE_FOUND = 0;

   9622 12 000670   200027 450100                    STZ     FILE_FOUND,,AUTO

     1166     9623    5                         END;

     1167     9624    4                     END;

   9624 12 000671   000701 710000 12                 TRA     s:9633

     1168     9625    3                  ELSE
     1169     9626    4                  DO;                      /* MUST BE FT                         */

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:216  
     1170     9627    4                     CUR_FT_FSN = CUR_FT_FSN+1;

   9627 12 000672   000004 054000 11                 AOS     CUR_FT_FSN

     1171     9628    4                     IF CUR_FT_FSN=ICB.FSN.FINISH

   9628 12 000673   000044 236000 xsym               LDQ     ICB+36
        12 000674   777777 376007                    ANQ     -1,DL
        12 000675   000004 116000 11                 CMPQ    CUR_FT_FSN
        12 000676   000701 601000 12                 TNZ     s:9633

     1172     9629    4                      THEN
     1173     9630    4                        NO_MORE_FILES = 1;

   9630 12 000677   000001 235007                    LDA     1,DL
        12 000700   000005 755000 11                 STA     NO_MORE_FILES

     1174     9631    4                     END;

     1175     9632    3               END;                        /* END CASE                           */

     1176     9633    2              IF ICB.DEV_MASK.DEV_TAPE

   9633 12 000701   000171 236000 xsym               LDQ     ICB+121
        12 000702   040000 316003                    CANQ    16384,DU
        12 000703   000724 600000 12                 TZE     s:9642

     1177     9634    2               THEN                        /* Construct NAME from FSN            */
     1178     9635    3               DO;

     1179     9636    3                  CALL BINCHAR(CHAR_4,CUR_FT_FSN);

   9636 12 000704   000100 301400                    BTD
        12 000705   000004 000004 11                 NDSC9   CUR_FT_FSN               cn=0,s=lsgnf,sf=0,n=4
        12 000706   200033 030004                    NDSC9   CHAR_4,,AUTO             cn=0,s=nosgn,sf=0,n=4

     1180     9637    3                  CALL CONCAT(DIN_NAME.STRING,'FSN_',CHAR_4);
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:217  

   9637 12 000707   040000 100400                    MLR     fill='040'O
        12 000710   000011 000004 10                 ADSC9   ABORT_SOURCE_ERR+5       cn=0,n=4
        12 000711   000000 200004 xsym               ADSC9   DIN_NAME                 cn=1,n=4
        12 000712   040000 100500                    MLR     fill='040'O
        12 000713   200033 000004                    ADSC9   CHAR_4,,AUTO             cn=0,n=4
        12 000714   000001 200033 xsym               ADSC9   DIN_NAME+1               cn=1,n=27

     1181     9638    3                  DIN_NAME.LEN = 4 + 4;

   9638 12 000715   010000 236003                    LDQ     4096,DU
        12 000716   000000 552040 xsym               STBQ    DIN_NAME,'40'O

     1182     9639    3                  IN_NAME.STRING = '?';    /* Always matches                     */

   9639 12 000717   040000 100400                    MLR     fill='040'O
        12 000720   000042 000001 13                 ADSC9   34                       cn=0,n=1
        12 000721   000000 200037 xsym               ADSC9   IN_NAME                  cn=1,n=31

     1183     9640    3                  IN_NAME.LEN = 1;

   9640 12 000722   001000 236003                    LDQ     512,DU
        12 000723   000000 552040 xsym               STBQ    IN_NAME,'40'O

     1184     9641    3                  END;

     1185     9642    2              IF ICB.ORG ~= '0'B

   9642 12 000724   000135 235000 xsym               LDA     ICB+93
        12 000725   000740 600000 12                 TZE     s:9647
        12 000726   200026 236100                    LDQ     NO_ACCESS,,AUTO
        12 000727   000740 601000 12                 TNZ     s:9647
        12 000730   000000 470400 xsym               LDP0    M$EI$
        12 000731   000032 236100                    LDQ     26,,PR0
        12 000732   000033 772000                    QRL     27
        12 000733   000000 066406                    CMPB    filb='0'B
        12 000734   000135 000001 xsym               BDSC    ICB+93,Q                 by=0,bit=0,n=1
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:218  
        12 000735   000136 000001 xsym               BDSC    ICB+94                   by=0,bit=0,n=1
        12 000736   000740 601000 12                 TNZ     s:9647

     1186     9643    2                AND NO_ACCESS = 0
     1187     9644    2                AND ICB.ORG(M$EI$->F$DCB.ORG) = ICB.ORG_NEG
     1188     9645    2               THEN
     1189     9646    2                 FILE_FOUND = 0;

   9646 12 000737   200027 450100                    STZ     FILE_FOUND,,AUTO

     1190     9647    2              IF ICB.TYPE.COUNT>0 AND FILE_FOUND=1

   9647 12 000740   000150 236000 xsym               LDQ     ICB+104
        12 000741   001000 604400 12                 TMOZ    s:9665
        12 000742   200027 235100                    LDA     FILE_FOUND,,AUTO
        12 000743   000001 115007                    CMPA    1,DL
        12 000744   001000 601000 12                 TNZ     s:9665

     1191     9648    2               THEN
     1192     9649    3               DO;

     1193     9650    3                  FILE_FOUND = 0;

   9650 12 000745   200027 450100                    STZ     FILE_FOUND,,AUTO

     1194     9651    4                  DO T=0 TO ICB.TYPE.COUNT-1;

   9651 12 000746   200031 450100                    STZ     T,,AUTO
        12 000747   000762 710000 12                 TRA     s:9655+1

     1195     9652    4                     IF M$EI$->F$DCB.TYPE=ICB.TYPE.STRING(T)

   9652 12 000750   200031 235100                    LDA     T,,AUTO
        12 000751   000001 735000                    ALS     1
        12 000752   000000 470400 xsym               LDP0    M$EI$
        12 000753   040005 106500                    CMPC    fill='040'O
        12 000754   000025 400002                    ADSC9   21,,PR0                  cn=2,n=2
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:219  
        12 000755   000152 000002 xsym               ADSC9   ICB+106,A                cn=0,n=2
        12 000756   000761 601000 12                 TNZ     s:9655

     1196     9653    4                      THEN
     1197     9654    4                        FILE_FOUND = 1;

   9654 12 000757   000001 236007                    LDQ     1,DL
        12 000760   200027 756100                    STQ     FILE_FOUND,,AUTO

     1198     9655    4                     END;

   9655 12 000761   200031 054100                    AOS     T,,AUTO
        12 000762   200031 236100                    LDQ     T,,AUTO
        12 000763   000150 116000 xsym               CMPQ    ICB+104
        12 000764   000750 604000 12                 TMI     s:9652

     1199     9656    3                  IF ICB.TYPE.NEG     /* " ~= " option specified on TYPE inopt   */

   9656 12 000765   000151 234000 xsym               SZN     ICB+105
        12 000766   001000 605000 12                 TPL     s:9665
        12 000767   000000 470400 xsym               LDP0    M$EI$
        12 000770   000025 720100                    LXL0    21,,PR0
        12 000771   001000 600000 12                 TZE     s:9665

     1200     9657    3                    AND ADDR(M$EI$->F$DCB.TYPE)->UBIN$HALF ~= 0 /* ~ ARCHIVED    */
     1201     9658    3                   THEN                    /* Just reverse the FILE_FOUND flag   */
     1202     9659    3                     IF FILE_FOUND = 0

   9659 12 000772   200027 235100                    LDA     FILE_FOUND,,AUTO
        12 000773   000777 601000 12                 TNZ     s:9663

     1203     9660    3                      THEN
     1204     9661    3                        FILE_FOUND = 1;

   9661 12 000774   000001 235007                    LDA     1,DL
        12 000775   200027 755100                    STA     FILE_FOUND,,AUTO
        12 000776   001000 710000 12                 TRA     s:9665
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:220  

     1205     9662    3                      ELSE
     1206     9663    3                        FILE_FOUND = 0;

   9663 12 000777   200027 450100                    STZ     FILE_FOUND,,AUTO

     1207     9664    3                  END;

     1208     9665    2              IF ICB.CREATOR_SEL = 2

   9665 12 001000   000173 235000 xsym               LDA     ICB+123
        12 001001   000002 115007                    CMPA    2,DL
        12 001002   001024 601000 12                 TNZ     CREATOR_OK

     1209     9666    2               THEN
     1210     9667    3               DO;

     1211     9668    3                  CALL VPD$FETCH_CREATOR(TEXT_C) ALTRET(CREATOR_OK);

   9668 12 001003   200016 630500                    EPPR0   TEXT_C,,AUTO
        12 001004   200042 450500                    STP0    I+2,,AUTO
        12 001005   200042 630500                    EPPR0   I+2,,AUTO
        12 001006   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 001007   000000 701000 xent               TSX1    VPD$FETCH_CREATOR
        12 001010   001024 702000 12                 TSX2    CREATOR_OK

     1212     9669    3                  IF SUBSTR(TEXT_C.TEXT,0,TEXT_C.C) ~=

   9669 12 001011   200016 236100                    LDQ     TEXT_C,,AUTO
        12 001012   000033 772000                    QRL     27
        12 001013   000000 620006                    EAX0    0,QL
        12 001014   000175 236000 xsym               LDQ     ICB+125
        12 001015   000033 772000                    QRL     27
        12 001016   000000 621006                    EAX1    0,QL
        12 001017   040040 106540                    CMPC    fill='040'O
        12 001020   200016 200010                    ADSC9   TEXT_C,,AUTO             cn=1,n=*X0
        12 001021   000175 200011 xsym               ADSC9   ICB+125                  cn=1,n=*X1
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:221  
        12 001022   001024 600000 12                 TZE     CREATOR_OK

     1213     9670    3                    SUBSTR(ICB.CREATOR.TEXT,0,ICB.CREATOR.C)
     1214     9671    3                   THEN
     1215     9672    3                     FILE_FOUND = 0;

   9672 12 001023   200027 450100                    STZ     FILE_FOUND,,AUTO

   9669 12 001024                       CREATOR_OK   null
     1216     9673    3   CREATOR_OK:    ;
     1217     9674    3                  END;

     1218     9675    2              IF ICB.CREATOR_SEL=1 AND NOT(M$EI$ -> F$DCB.OWNER)

   9675 12 001024   000173 235000 xsym               LDA     ICB+123
        12 001025   000001 115007                    CMPA    1,DL
        12 001026   001034 601000 12                 TNZ     s:9678
        12 001027   000000 470400 xsym               LDP0    M$EI$
        12 001030   000064 236100                    LDQ     52,,PR0
        12 001031   040000 316007                    CANQ    16384,DL
        12 001032   001034 601000 12                 TNZ     s:9678

     1219     9676    2               THEN
     1220     9677    2                 FILE_FOUND = 0;

   9677 12 001033   200027 450100                    STZ     FILE_FOUND,,AUTO

     1221     9678    2              IF ICB.CREATOR_SEL ~=0 AND ICB.CREATOR_NEG THEN

   9678 12 001034   000000 115003                    CMPA    0,DU
        12 001035   001047 600000 12                 TZE     s:9683
        12 001036   000174 234000 xsym               SZN     ICB+124
        12 001037   001047 605000 12                 TPL     s:9683

     1222     9679    2                 IF FILE_FOUND = 1 THEN

   9679 12 001040   200027 236100                    LDQ     FILE_FOUND,,AUTO
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:222  
        12 001041   000001 116007                    CMPQ    1,DL
        12 001042   001045 601000 12                 TNZ     s:9682

     1223     9680    2                    FILE_FOUND = 0;

   9680 12 001043   200027 450100                    STZ     FILE_FOUND,,AUTO
        12 001044   001047 710000 12                 TRA     s:9683

     1224     9681    2                  ELSE
     1225     9682    2                    FILE_FOUND = 1;

   9682 12 001045   000001 235007                    LDA     1,DL
        12 001046   200027 755100                    STA     FILE_FOUND,,AUTO

     1226     9683    2              IF ICB.DATE.RELATION~=0 AND FILE_FOUND=1

   9683 12 001047   000162 235000 xsym               LDA     ICB+114
        12 001050   001307 600000 12                 TZE     NO_CODE4
        12 001051   200027 236100                    LDQ     FILE_FOUND,,AUTO
        12 001052   000001 116007                    CMPQ    1,DL
        12 001053   001307 601000 12                 TNZ     NO_CODE4

     1227     9684    2               THEN
     1228     9685    3               DO;

     1229     9686    3                  FPARAM$=ADDR(FPARAM_BUF);

   9686 12 001054   000013 236000 13                 LDQ     11
        12 001055   000000 756000 xsym               STQ     FPARAM$

     1230     9687    3                  CODE$ = FPARAM$;         /* Point to start of FPARAM           */

   9687 12 001056   200035 756100                    STQ     CODE$,,AUTO

     1231     9688    3                  CALL XSF$LOCCODP(CODE$,04)

   9688 12 001057   000043 236000 13                 LDQ     35
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:223  
        12 001060   200043 756100                    STQ     I+3,,AUTO
        12 001061   200035 630500                    EPPR0   CODE$,,AUTO
        12 001062   200042 450500                    STP0    I+2,,AUTO
        12 001063   200042 630500                    EPPR0   I+2,,AUTO
        12 001064   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 001065   000000 701000 xent               TSX1    XSF$LOCCODP
        12 001066   001070 702000 12                 TSX2    s:9691
        12 001067   001075 710000 12                 TRA     s:9698

     1232     9689    3                   WHENALTRETURN
     1233     9690    4                   DO;

     1234     9691    4                      IF ICB.DATE.TYPE < 4

   9691 12 001070   000160 235000 xsym               LDA     ICB+112
        12 001071   000004 115007                    CMPA    4,DL
        12 001072   001075 603000 12                 TRC     s:9698

     1235     9692    4                       THEN
     1236     9693    5                       DO;

     1237     9694    5                          FILE_FOUND = 0;

   9694 12 001073   200027 450100                    STZ     FILE_FOUND,,AUTO

     1238     9695    5                          GOTO NO_CODE4;

   9695 12 001074   001307 710000 12                 TRA     NO_CODE4

     1239     9696    5                          END;
     1240     9697    4                      END;
     1241     9698    4                  DO CASE(ICB.DATE.TYPE);

   9698 12 001075   000160 235000 xsym               LDA     ICB+112
        12 001076   000007 115007                    CMPA    7,DL
        12 001077   001101 602005 12                 TNC     s:9698+4,AL
        12 001100   001223 710000 12                 TRA     s:9730
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:224  
        12 001101   001223 710000 12                 TRA     s:9730
        12 001102   001110 710000 12                 TRA     s:9700
        12 001103   001114 710000 12                 TRA     s:9702
        12 001104   001120 710000 12                 TRA     s:9704
        12 001105   001124 710000 12                 TRA     s:9706
        12 001106   001162 710000 12                 TRA     s:9714
        12 001107   001203 710000 12                 TRA     s:9722

     1242     9699    4                   CASE(1);

     1243     9700    4                     CONTROL_DATE = CODE$ -> CODE04.CREATION.TIME;

   9700 12 001110   200035 470500                    LDP0    CODE$,,AUTO
        12 001111   000002 235100                    LDA     2,,PR0
        12 001112   000016 755000 11                 STA     CONTROL_DATE
        12 001113   001223 710000 12                 TRA     s:9730

     1244     9701    4                   CASE(2);

     1245     9702    4                     CONTROL_DATE = CODE$ -> CODE04.ACCESS.TIME;

   9702 12 001114   200035 470500                    LDP0    CODE$,,AUTO
        12 001115   000000 235100                    LDA     0,,PR0
        12 001116   000016 755000 11                 STA     CONTROL_DATE
        12 001117   001223 710000 12                 TRA     s:9730

     1246     9703    4                   CASE(3);

     1247     9704    4                     CONTROL_DATE = CODE$ -> CODE04.MODIFY.TIME;

   9704 12 001120   200035 470500                    LDP0    CODE$,,AUTO
        12 001121   000001 235100                    LDA     1,,PR0
        12 001122   000016 755000 11                 STA     CONTROL_DATE
        12 001123   001223 710000 12                 TRA     s:9730

     1248     9705    4                   CASE(4);                /* EXPIRATION date                    */

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:225  
     1249     9706    4                     CONTROL_DATE = CODE$ -> CODE04.CREATION.TIME;

   9706 12 001124   200035 470500                    LDP0    CODE$,,AUTO
        12 001125   000002 235100                    LDA     2,,PR0
        12 001126   000016 755000 11                 STA     CONTROL_DATE

     1250     9707    4                     CODE$ = FPARAM$;      /* Point to start of FPARAM bufr      */

   9707 12 001127   000000 236000 xsym               LDQ     FPARAM$
        12 001130   200035 756100                    STQ     CODE$,,AUTO

     1251     9708    4                     CALL XSF$LOCCODP(CODE$,03) ALTRET(NEXPR); /* Find expire    */

   9708 12 001131   000025 236000 13                 LDQ     21
        12 001132   200043 756100                    STQ     I+3,,AUTO
        12 001133   200035 630500                    EPPR0   CODE$,,AUTO
        12 001134   200042 450500                    STP0    I+2,,AUTO
        12 001135   200042 630500                    EPPR0   I+2,,AUTO
        12 001136   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 001137   000000 701000 xent               TSX1    XSF$LOCCODP
        12 001140   001235 702000 12                 TSX2    NEXPR

     1252     9709    4                     IF CODE$ -> CODE03.EXPIRE < 0

   9709 12 001141   200035 470500                    LDP0    CODE$,,AUTO
        12 001142   000007 220100                    LDX0    7,,PR0
        12 001143   001235 604000 12                 TMI     NEXPR

     1253     9710    4                      THEN                 /* NEVER EXPIRE                       */
     1254     9711    4                        GOTO NEXPR;
     1255     9712    4                     CALL XUD$UTS_ADJ_25TH (CONTROL_DATE, CONTROL_DATE, CODE$->CODE03.
              9712                              EXPIRE * %UTS_25TH_DAY#);

   9712 12 001144   000007 236100                    LDQ     7,,PR0
        12 001145   000022 732000                    QRS     18
        12 001146   000044 402000 13                 MPY     36
        12 001147   200042 756100                    STQ     I+2,,AUTO
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:226  
        12 001150   200042 631500                    EPPR1   I+2,,AUTO
        12 001151   200045 451500                    STP1    I+5,,AUTO
        12 001152   000045 236000 13                 LDQ     37
        12 001153   200044 756100                    STQ     I+4,,AUTO
        12 001154   200043 756100                    STQ     I+3,,AUTO
        12 001155   200043 630500                    EPPR0   I+3,,AUTO
        12 001156   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 001157   000000 701000 xent               TSX1    XUD$UTS_ADJ_25TH
        12 001160   000000 011000                    NOP     0
        12 001161   001223 710000 12                 TRA     s:9730

     1256     9713    4                   CASE(5);

     1257     9714    4                     CODE$ = FPARAM$;

   9714 12 001162   000000 236000 xsym               LDQ     FPARAM$
        12 001163   200035 756100                    STQ     CODE$,,AUTO

     1258     9715    4                     CALL XSF$LOCCODP(CODE$,05)

   9715 12 001164   000046 236000 13                 LDQ     38
        12 001165   200043 756100                    STQ     I+3,,AUTO
        12 001166   200035 630500                    EPPR0   CODE$,,AUTO
        12 001167   200042 450500                    STP0    I+2,,AUTO
        12 001170   200042 630500                    EPPR0   I+2,,AUTO
        12 001171   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 001172   000000 701000 xent               TSX1    XSF$LOCCODP
        12 001173   001175 702000 12                 TSX2    s:9717
        12 001174   001177 710000 12                 TRA     s:9720

     1259     9716    5                      WHENALTRETURN DO;

     1260     9717    5                         FILE_FOUND = 0;

   9717 12 001175   200027 450100                    STZ     FILE_FOUND,,AUTO

     1261     9718    5                         GOTO NO_CODE4;    /* This file has no backup date       */
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:227  

   9718 12 001176   001307 710000 12                 TRA     NO_CODE4

     1262     9719    5                         END;
     1263     9720    4                     CONTROL_DATE = CODE$->CODE05.BACKUP.TIME;

   9720 12 001177   200035 470500                    LDP0    CODE$,,AUTO
        12 001200   000000 235100                    LDA     0,,PR0
        12 001201   000016 755000 11                 STA     CONTROL_DATE
        12 001202   001223 710000 12                 TRA     s:9730

     1264     9721    4                   CASE(6);

     1265     9722    4                     CODE$ = FPARAM$;

   9722 12 001203   000000 236000 xsym               LDQ     FPARAM$
        12 001204   200035 756100                    STQ     CODE$,,AUTO

     1266     9723    4                     CALL XSF$LOCCODP(CODE$,06)

   9723 12 001205   000047 236000 13                 LDQ     39
        12 001206   200043 756100                    STQ     I+3,,AUTO
        12 001207   200035 630500                    EPPR0   CODE$,,AUTO
        12 001210   200042 450500                    STP0    I+2,,AUTO
        12 001211   200042 630500                    EPPR0   I+2,,AUTO
        12 001212   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 001213   000000 701000 xent               TSX1    XSF$LOCCODP
        12 001214   001216 702000 12                 TSX2    s:9725
        12 001215   001220 710000 12                 TRA     s:9728

     1267     9724    5                      WHENALTRETURN DO;

     1268     9725    5                         FILE_FOUND = 0;

   9725 12 001216   200027 450100                    STZ     FILE_FOUND,,AUTO

     1269     9726    5                         GOTO NO_CODE4;    /* This file isn't stowed             */
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:228  

   9726 12 001217   001307 710000 12                 TRA     NO_CODE4

     1270     9727    5                         END;
     1271     9728    4                     CONTROL_DATE = CODE$->CODE06.STOW.TIME;

   9728 12 001220   200035 470500                    LDP0    CODE$,,AUTO
        12 001221   000000 235100                    LDA     0,,PR0
        12 001222   000016 755000 11                 STA     CONTROL_DATE

     1272     9729    4                   END;                    /* END CASE                           */

     1273     9730    3                  CALL VPD$ROUND_DATE(,,CONTROL_DATE,ICB.DATE.ROUNDING_TYPE);

   9730 12 001223   000050 237000 13                 LDAQ    40
        12 001224   200044 757100                    STAQ    I+4,,AUTO
        12 001225   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001226   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001227   200042 757100                    STAQ    I+2,,AUTO
        12 001230   200042 630500                    EPPR0   I+2,,AUTO
        12 001231   000022 631400 xsym               EPPR1   B_VECTNIL+18
        12 001232   000000 701000 xent               TSX1    VPD$ROUND_DATE
        12 001233   000000 011000                    NOP     0

     1274     9731    4                  DO WHILE ('0'B);

   9731 12 001234   001237 710000 12                 TRA     s:9734

     1275     9732    4   NEXPR:            CONTROL_DATE = BITBIN('777777777777'O); /* NEVER EXPIRE     */

   9732 12 001235   000027 235000 xsym  NEXPR        LDA     B_VECTNIL+23
        12 001236   000016 755000 11                 STA     CONTROL_DATE

     1276     9733    4                     END;

     1277     9734    4                  DO CASE(ICB.DATE.RELATION);

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:229  
   9734 12 001237   000162 235000 xsym               LDA     ICB+114
        12 001240   000007 115007                    CMPA    7,DL
        12 001241   001243 602005 12                 TNC     s:9734+4,AL
        12 001242   001307 710000 12                 TRA     NO_CODE4
        12 001243   001307 710000 12                 TRA     NO_CODE4
        12 001244   001252 710000 12                 TRA     s:9736
        12 001245   001257 710000 12                 TRA     s:9740
        12 001246   001264 710000 12                 TRA     s:9744
        12 001247   001271 710000 12                 TRA     s:9748
        12 001250   001276 710000 12                 TRA     s:9752
        12 001251   001303 710000 12                 TRA     s:9756

     1278     9735    4                   CASE(1);                /* CONTROL_DATE < ICB.DATE.UTS        */

     1279     9736    4                     IF CONTROL_DATE >= ICB.DATE.UTS

   9736 12 001252   000016 236000 11                 LDQ     CONTROL_DATE
        12 001253   000163 116000 xsym               CMPQ    ICB+115
        12 001254   001307 602000 12                 TNC     NO_CODE4

     1280     9737    4                      THEN
     1281     9738    4                        FILE_FOUND = 0;

   9738 12 001255   200027 450100                    STZ     FILE_FOUND,,AUTO
        12 001256   001307 710000 12                 TRA     NO_CODE4

     1282     9739    4                   CASE(2);                /* CONTROL_DATE = ICB.DATE.UTS        */

     1283     9740    4                     IF CONTROL_DATE ~= ICB.DATE.UTS

   9740 12 001257   000016 236000 11                 LDQ     CONTROL_DATE
        12 001260   000163 116000 xsym               CMPQ    ICB+115
        12 001261   001307 600000 12                 TZE     NO_CODE4

     1284     9741    4                      THEN
     1285     9742    4                        FILE_FOUND = 0;

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:230  
   9742 12 001262   200027 450100                    STZ     FILE_FOUND,,AUTO
        12 001263   001307 710000 12                 TRA     NO_CODE4

     1286     9743    4                   CASE(3);                /* CONTROL_DATE > ICB.DATE.UTS        */

     1287     9744    4                     IF CONTROL_DATE <= ICB.DATE.UTS

   9744 12 001264   000163 236000 xsym               LDQ     ICB+115
        12 001265   000016 116000 11                 CMPQ    CONTROL_DATE
        12 001266   001307 602000 12                 TNC     NO_CODE4

     1288     9745    4                      THEN
     1289     9746    4                        FILE_FOUND = 0;

   9746 12 001267   200027 450100                    STZ     FILE_FOUND,,AUTO
        12 001270   001307 710000 12                 TRA     NO_CODE4

     1290     9747    4                   CASE(4);                /* CONTROL_DATE <= ICB.DATE.UTS       */

     1291     9748    4                     IF CONTROL_DATE > ICB.DATE.UTS

   9748 12 001271   000163 236000 xsym               LDQ     ICB+115
        12 001272   000016 116000 11                 CMPQ    CONTROL_DATE
        12 001273   001307 603000 12                 TRC     NO_CODE4

     1292     9749    4                      THEN
     1293     9750    4                        FILE_FOUND = 0;

   9750 12 001274   200027 450100                    STZ     FILE_FOUND,,AUTO
        12 001275   001307 710000 12                 TRA     NO_CODE4

     1294     9751    4                   CASE(5);                /* CONTROL_DATE ~= ICB.DATE.UTS       */

     1295     9752    4                     IF CONTROL_DATE = ICB.DATE.UTS

   9752 12 001276   000016 236000 11                 LDQ     CONTROL_DATE
        12 001277   000163 116000 xsym               CMPQ    ICB+115
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:231  
        12 001300   001307 601000 12                 TNZ     NO_CODE4

     1296     9753    4                      THEN
     1297     9754    4                        FILE_FOUND = 0;

   9754 12 001301   200027 450100                    STZ     FILE_FOUND,,AUTO
        12 001302   001307 710000 12                 TRA     NO_CODE4

     1298     9755    4                   CASE(6);                /* CONTROL_DATE >= ICB.DATE.UTS       */

     1299     9756    4                     IF CONTROL_DATE < ICB.DATE.UTS

   9756 12 001303   000016 236000 11                 LDQ     CONTROL_DATE
        12 001304   000163 116000 xsym               CMPQ    ICB+115
        12 001305   001307 603000 12                 TRC     NO_CODE4

     1300     9757    4                      THEN
     1301     9758    4                        FILE_FOUND = 0;

   9758 12 001306   200027 450100                    STZ     FILE_FOUND,,AUTO

     1302     9759    4                   END;                    /* END CASE                           */

     1303     9760    3                  END;

     1304     9761    2   NO_CODE4:  IF FILE_FOUND=0 AND M$EI$->F$DCB.FCD

   9761 12 001307   200027 235100       NO_CODE4     LDA     FILE_FOUND,,AUTO
        12 001310   001321 601000 12                 TNZ     s:9764
        12 001311   000000 470400 xsym               LDP0    M$EI$
        12 001312   000031 236100                    LDQ     25,,PR0
        12 001313   020000 316007                    CANQ    8192,DL
        12 001314   001321 600000 12                 TZE     s:9764

     1305     9762    2               THEN
     1306     9763    2                 CALL VPF$CLOSE_IN(1);     /* CLOSE UNWANTED FILE                */

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:232  
   9763 12 001315   000000 630400 13                 EPPR0   0
        12 001316   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 001317   000000 701000 xent               TSX1    VPF$CLOSE_IN
        12 001320   000000 011000                    NOP     0

     1307     9764    2              END;                         /* END WHILE                          */

   9764 12 001321   200027 235100                    LDA     FILE_FOUND,,AUTO
        12 001322   001325 601000 12                 TNZ     s:9769
        12 001323   000005 236000 11                 LDQ     NO_MORE_FILES
        12 001324   000072 600000 12                 TZE     s:9424

     1308     9765        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:233  
     1309     9766        /**/
     1310     9767        /*  Either we have a file, or this spec is exhausted.  */
     1311     9768        /**/
     1312     9769    1           IF FILE_FOUND = 1

   9769 12 001325   000001 115007                    CMPA    1,DL
        12 001326   001373 601000 12                 TNZ     s:9800

     1313     9770    1            THEN
     1314     9771    2            DO;                            /* We have a file that we KNOW we     */

     1315     9772                                                /* want.  Make sure that this good    */
     1316     9773                                                /* file will WORK with our input      */
     1317     9774                                                /* options.                           */
     1318     9775    2               I = 0;                      /* No errors, yet                     */

   9775 12 001327   200032 450100                    STZ     I,,AUTO

     1319     9776    2               IF ICB.KEY_SEL

   9776 12 001330   000045 234000 xsym               SZN     ICB+37
        12 001331   001341 605000 12                 TPL     s:9786
        12 001332   000172 236000 xsym               LDQ     ICB+122
        12 001333   000100 316003                    CANQ    64,DU
        12 001334   001341 601000 12                 TNZ     s:9786
        12 001335   200026 235100                    LDA     NO_ACCESS,,AUTO
        12 001336   001341 601000 12                 TNZ     s:9786

     1320     9777    2                 AND NOT ICB.FLAVOR.KEY_USABLE
     1321     9778    2                 AND NO_ACCESS = 0
     1322     9779    2                THEN
     1323     9780    2                  I = 30;

   9780 12 001337   000036 235007                    LDA     30,DL
        12 001340   200032 755100                    STA     I,,AUTO

     1324     9781        /*E*   ERROR: VPF-00030
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:234  
     1325     9782             MESSAGE: Record selection by key won't work% on %UF%.
     1326     9783            MESSAGE1: Input file% %UF% has an ORG that does not permit
     1327     9784                      record selection by key.
     1328     9785        */
     1329     9786    2               IF I > 0

   9786 12 001341   200032 235100                    LDA     I,,AUTO
        12 001342   001373 604400 12                 TMOZ    s:9800

     1330     9787    2                THEN                       /* This file DOES clash with options  */
     1331     9788    3                DO;

     1332     9789    3                   IF M$EI$ -> F$DCB.FCD

   9789 12 001343   000000 470400 xsym               LDP0    M$EI$
        12 001344   000031 236100                    LDQ     25,,PR0
        12 001345   020000 316007                    CANQ    8192,DL
        12 001346   001353 600000 12                 TZE     s:9792

     1333     9790    3                    THEN                   /* Gotta close the file               */
     1334     9791    3                      CALL VPF$CLOSE_IN(1);

   9791 12 001347   000000 630400 13                 EPPR0   0
        12 001350   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 001351   000000 701000 xent               TSX1    VPF$CLOSE_IN
        12 001352   000000 011000                    NOP     0

     1335     9792    3                   CALL VPL$ERR_PROC(2,I,'06'O,,,,M$EI#);

   9792 12 001353   000031 236000 13                 LDQ     25
        12 001354   200050 756100                    STQ     I+8,,AUTO
        12 001355   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001356   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001357   200046 757100                    STAQ    I+6,,AUTO
        12 001360   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001361   000027 235000 13                 LDA     23
        12 001362   200044 757100                    STAQ    I+4,,AUTO
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:235  
        12 001363   200032 630500                    EPPR0   I,,AUTO
        12 001364   200043 450500                    STP0    I+3,,AUTO
        12 001365   000036 236000 13                 LDQ     30
        12 001366   200042 756100                    STQ     I+2,,AUTO
        12 001367   200042 630500                    EPPR0   I+2,,AUTO
        12 001370   000025 631400 xsym               EPPR1   B_VECTNIL+21
        12 001371   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001372   000000 011000                    NOP     0

     1336     9793    3                   END;

     1337     9794    2               END;

     1338     9795        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:236  
     1339     9796        /**/
     1340     9797        /*  Either we have a file and the world is fine, OR the input spec            */
     1341     9798        /*  is exhausted.                                                             */
     1342     9799        /**/
     1343     9800    1           IF FILE_FOUND=0

   9800 12 001373   200027 235100                    LDA     FILE_FOUND,,AUTO
        12 001374   001401 601000 12                 TNZ     s:9804

     1344     9801    1            THEN                           /* No more files this spec            */
     1345     9802    1              RET_VAL = %VPOC_EXHAUSTED#;

   9802 12 001375   000001 236007                    LDQ     1,DL
        12 001376   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 001377   000000 756100                    STQ     0,,PR0
        12 001400   001441 710000 12                 TRA     s:9818

     1346     9803    1            ELSE
     1347     9804    1              IF NO_ACCESS=0

   9804 12 001401   200026 236100                    LDQ     NO_ACCESS,,AUTO
        12 001402   001406 601000 12                 TNZ     s:9811

     1348     9805    1               THEN                   /* All fine.  OPENed or TOPENed on M$EI    */
     1349     9806    2               DO;

     1350     9807    2                  RET_VAL = %VPOC_GOTFILE#;

   9807 12 001403   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 001404   000000 450100                    STZ     0,,PR0

     1351     9808    2                  END;

   9808 12 001405   001441 710000 12                 TRA     s:9818

     1352     9809    1               ELSE                        /* FILE POSSIBLY FOUND BUT ACCESS     */
     1353     9810                                                /* DENIED.                            */
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:237  
     1354     9811    1                 IF CMD_MASK & '000700002'O

   9811 12 001406   000012 235000 10                 LDA     ABORT_SOURCE_ERR+6
        12 001407   000000 236003                    LDQ     0,DU
        12 001410   200042 757100                    STAQ    I+2,,AUTO
        12 001411   000100 100400                    MLR     fill='000'O
        12 001412   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        12 001413   200044 000010                    ADSC9   I+4,,AUTO                cn=0,n=8
        12 001414   200044 237100                    LDAQ    I+4,,AUTO
        12 001415   200042 377100                    ANAQ    I+2,,AUTO
        12 001416   001423 600000 12                 TZE     s:9816

     1355     9812                                                /* LIST, LISTSTD, REVIEW, REVIEWSTD   */
     1356     9813    1                  THEN
     1357     9814    1                    RET_VAL = %VPOC_NOACCESS#;

   9814 12 001417   000002 235007                    LDA     2,DL
        12 001420   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 001421   000000 755100                    STA     0,,PR0
        12 001422   001441 710000 12                 TRA     s:9818

     1358     9815    1                  ELSE
     1359     9816    1                    CALL VPL$ERR_PROC(2,0,,INPUT_ERR,,,M$EI#); /* Abort step     */

   9816 12 001423   000031 236000 13                 LDQ     25
        12 001424   200050 756100                    STQ     I+8,,AUTO
        12 001425   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001426   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001427   200046 757100                    STAQ    I+6,,AUTO
        12 001430   000034 236000 13                 LDQ     28
        12 001431   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001432   200044 757100                    STAQ    I+4,,AUTO
        12 001433   000036 237000 13                 LDAQ    30
        12 001434   200042 757100                    STAQ    I+2,,AUTO
        12 001435   200042 630500                    EPPR0   I+2,,AUTO
        12 001436   000025 631400 xsym               EPPR1   B_VECTNIL+21
        12 001437   000000 701000 xent               TSX1    VPL$ERR_PROC
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:238  
        12 001440   000000 011000                    NOP     0

     1360     9817                                                /* REPORT AND ABORT STEP              */
     1361     9818    1           GOTO GOT_DISPOSITION;

   9818 12 001441   001622 710000 12                 TRA     GOT_DISPOSITION

     1362     9819        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:239  
     1363     9820    1   EI_OPEN_ALT:
     1364     9821    1           IF ICB.DEV_MASK & '30'O         /* Managed tape or disk               */

   9821 12 001442   000171 236000 xsym  EI_OPEN_ALT  LDQ     ICB+121
        12 001443   777000 376003                    ANQ     -512,DU
        12 001444   300000 376003                    ANQ     98304,DU
        12 001445   001454 600000 12                 TZE     s:9827

     1365     9822    1            THEN
     1366     9823    2            DO;

     1367     9824    2               DIN_NAME.LEN = M$EI$ -> F$DCB.NAME.L;

   9824 12 001446   000000 470400 xsym               LDP0    M$EI$
        12 001447   000010 236100                    LDQ     8,,PR0
        12 001450   000000 552040 xsym               STBQ    DIN_NAME,'40'O

     1368     9825    2               DIN_NAME.STRING = M$EI$ -> F$DCB.NAME.C;

   9825 12 001451   040000 100500                    MLR     fill='040'O
        12 001452   000010 200037                    ADSC9   8,,PR0                   cn=1,n=31
        12 001453   000000 200037 xsym               ADSC9   DIN_NAME                 cn=1,n=31

     1369     9826    2               END;

     1370     9827    1           IF ICB.DEV_MASK.DEV_TAPE

   9827 12 001454   000171 236000 xsym               LDQ     ICB+121
        12 001455   040000 316003                    CANQ    16384,DU
        12 001456   001472 600000 12                 TZE     s:9834

     1371     9828    1            THEN                           /* Construct NAME from FSN            */
     1372     9829    2            DO;

     1373     9830    2               CALL BINCHAR(CHAR_4,CUR_FT_FSN);

   9830 12 001457   000100 301400                    BTD
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:240  
        12 001460   000004 000004 11                 NDSC9   CUR_FT_FSN               cn=0,s=lsgnf,sf=0,n=4
        12 001461   200033 030004                    NDSC9   CHAR_4,,AUTO             cn=0,s=nosgn,sf=0,n=4

     1374     9831    2               CALL CONCAT(DIN_NAME.STRING,'FSN_',CHAR_4);

   9831 12 001462   040000 100400                    MLR     fill='040'O
        12 001463   000011 000004 10                 ADSC9   ABORT_SOURCE_ERR+5       cn=0,n=4
        12 001464   000000 200004 xsym               ADSC9   DIN_NAME                 cn=1,n=4
        12 001465   040000 100500                    MLR     fill='040'O
        12 001466   200033 000004                    ADSC9   CHAR_4,,AUTO             cn=0,n=4
        12 001467   000001 200033 xsym               ADSC9   DIN_NAME+1               cn=1,n=27

     1375     9832    2               DIN_NAME.LEN = 4 + 4;

   9832 12 001470   010000 236003                    LDQ     4096,DU
        12 001471   000000 552040 xsym               STBQ    DIN_NAME,'40'O

     1376     9833    2               END;

     1377     9834    1           IF INPUT_ERR.ERR# = %E$FDEOF OR INPUT_ERR.ERR# = %E$EOSET

   9834 12 001472   000000 236000 xsym               LDQ     INPUT_ERR
        12 001473   377770 376007                    ANQ     131064,DL
        12 001474   001540 116007                    CMPQ    864,DL
        12 001475   001500 600000 12                 TZE     s:9837
        12 001476   013140 116007                    CMPQ    5728,DL
        12 001477   001504 601000 12                 TNZ     s:9840

     1378     9835    1            THEN
     1379     9836    2            DO;

     1380     9837    2               RET_VAL = %VPOC_EXHAUSTED#;

   9837 12 001500   000001 235007                    LDA     1,DL
        12 001501   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 001502   000000 755100                    STA     0,,PR0

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:241  
     1381     9838    2               GOTO GOT_DISPOSITION;

   9838 12 001503   001622 710000 12                 TRA     GOT_DISPOSITION

     1382     9839    2               END;
     1383     9840    1           IF INPUT_ERR.ERR# = %E$NOACCESS /* ACCESS DENIED                      */

   9840 12 001504   001640 116007                    CMPQ    928,DL
        12 001505   001512 600000 12                 TZE     s:9845
        12 001506   001600 116007                    CMPQ    896,DL
        12 001507   001512 600000 12                 TZE     s:9845
        12 001510   013010 116007                    CMPQ    5640,DL
        12 001511   001516 601000 12                 TNZ     s:9849

     1384     9841    1             OR INPUT_ERR.ERR# = %E$INVSTAR /* NOT ACCESSIBLE FROM YOUR DOMAIN   */
     1385     9842    1             OR INPUT_ERR.ERR# = %E$NORESTRICT /* NO ACCESS TO ORG=RESTRICT FILE */
     1386     9843    1            THEN
     1387     9844    2            DO;                            /* POSSIBLY NOT A SELECTED FILE       */

     1388     9845    2               NO_ACCESS = 1;              /* SO SET FLAG AND GO FIND OUT        */

   9845 12 001512   000001 235007                    LDA     1,DL
        12 001513   200026 755100                    STA     NO_ACCESS,,AUTO

     1389     9846    2               FPARAM_BUF(0) = 0;          /* In case FM put a directory FIT     */

   9846 12 001514   000000 450000 xsym               STZ     FPARAM_BUF

     1390     9847    2               GOTO NO_ACC_CONT;

   9847 12 001515   000517 710000 12                 TRA     NO_ACC_CONT

     1391     9848    2               END;
     1392     9849    1           IF INPUT_ERR.ERR# = %E$MNTBRK AND BREAKS = 0

   9849 12 001516   012200 116007                    CMPQ    5248,DL
        12 001517   001522 601000 12                 TNZ     s:9852
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:242  
        12 001520   000000 235000 xsym               LDA     BREAKS
        12 001521   000306 600000 12                 TZE     OPEN_IT

     1393     9850    1            THEN
     1394     9851    1              GOTO OPEN_IT;                /* CNTL-Y,GO                          */
     1395     9852    1           IF ICB.SPEC_TYPE=1 OR ICB.SPEC_TYPE=7

   9852 12 001522   000017 235000 xsym               LDA     ICB+15
        12 001523   000001 115007                    CMPA    1,DL
        12 001524   001527 600000 12                 TZE     s:9854
        12 001525   000007 115007                    CMPA    7,DL
        12 001526   001531 601000 12                 TNZ     s:9859

     1396     9853    1            THEN                           /* SINGLE FILE SPECS                  */
     1397     9854    1              NO_MORE_FILES = 1;

   9854 12 001527   000001 235007                    LDA     1,DL
        12 001530   000005 755000 11                 STA     NO_MORE_FILES

     1398     9855    1            ELSE;
     1399     9856    2           DO;

     1400     9857                                                /* CHECK IF THIS ERROR IS SEVERE      */
     1401     9858                                                /* ENOUGH TO ABORT THIS SOURCE        */
     1402     9859    2              I = 0;

   9859 12 001531   200032 450100                    STZ     I,,AUTO

     1403     9860    3              DO WHILE(ABORT_SOURCE_ERR(I) ~= 0 AND NO_MORE_FILES = 0);

   9860 12 001532   001553 710000 12                 TRA     s:9866

     1404     9861    3                 IF ABORT_SOURCE_ERR(I) = INPUT_ERR.ERR#

   9861 12 001533   000000 236000 xsym               LDQ     INPUT_ERR
        12 001534   000003 772000                    QRL     3
        12 001535   037777 376007                    ANQ     16383,DL
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:243  
        12 001536   200042 756100                    STQ     I+2,,AUTO
        12 001537   200032 235100                    LDA     I,,AUTO
        12 001540   000001 735000                    ALS     1
        12 001541   000100 101405                    MRL     fill='000'O
        12 001542   000004 000002 10                 ADSC9   ABORT_SOURCE_ERR,A       cn=0,n=2
        12 001543   200043 000004                    ADSC9   I+3,,AUTO                cn=0,n=4
        12 001544   200043 236100                    LDQ     I+3,,AUTO
        12 001545   200042 116100                    CMPQ    I+2,,AUTO
        12 001546   001552 601000 12                 TNZ     s:9865

     1405     9862    3                  THEN
     1406     9863    3                    NO_MORE_FILES = 1;

   9863 12 001547   000001 236007                    LDQ     1,DL
        12 001550   000005 756000 11                 STQ     NO_MORE_FILES
        12 001551   001553 710000 12                 TRA     s:9866

     1407     9864    3                  ELSE
     1408     9865    3                    I = I+1;

   9865 12 001552   200032 054100                    AOS     I,,AUTO

     1409     9866    3                 END;

   9866 12 001553   200032 235100                    LDA     I,,AUTO
        12 001554   000001 735000                    ALS     1
        12 001555   000100 101405                    MRL     fill='000'O
        12 001556   000004 000002 10                 ADSC9   ABORT_SOURCE_ERR,A       cn=0,n=2
        12 001557   200042 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
        12 001560   200042 236100                    LDQ     I+2,,AUTO
        12 001561   000000 116003                    CMPQ    0,DU
        12 001562   001565 600000 12                 TZE     s:9867
        12 001563   000005 235000 11                 LDA     NO_MORE_FILES
        12 001564   001533 600000 12                 TZE     s:9861

     1410     9867    2              IF BAD_FILE_NAME = ADDR(DIN_NAME) -> TEXT$C.STRING

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:244  
   9867 12 001565   000000 236000 xsym               LDQ     DIN_NAME
        12 001566   000033 772000                    QRL     27
        12 001567   000000 620006                    EAX0    0,QL
        12 001570   040040 106400                    CMPC    fill='040'O
        12 001571   000006 000037 11                 ADSC9   BAD_FILE_NAME            cn=0,n=31
        12 001572   000000 200010 xsym               ADSC9   DIN_NAME                 cn=1,n=*X0
        12 001573   001600 601000 12                 TNZ     s:9874

     1411     9868    2               THEN                        /* second hit of repeating error      */
     1412     9869    3               DO;

     1413     9870    3                  RET_VAL = %VPOC_EXHAUSTED#;

   9870 12 001574   000001 235007                    LDA     1,DL
        12 001575   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 001576   000000 755100                    STA     0,,PR0

     1414     9871    3                  GOTO GOT_DISPOSITION;

   9871 12 001577   001622 710000 12                 TRA     GOT_DISPOSITION

     1415     9872    3                  END;
     1416     9873    2               ELSE
     1417     9874    2                 BAD_FILE_NAME = ADDR(DIN_NAME) -> TEXT$C.STRING;

   9874 12 001600   040000 100440                    MLR     fill='040'O
        12 001601   000000 200010 xsym               ADSC9   DIN_NAME                 cn=1,n=*X0
        12 001602   000006 000037 11                 ADSC9   BAD_FILE_NAME            cn=0,n=31

     1418     9875    2              END;

     1419     9876    1           CALL VPL$ERR_PROC(2,0,,INPUT_ERR,,,M$EI#); /* ABORT STEP ERROR        */

   9876 12 001603   000031 236000 13                 LDQ     25
        12 001604   200050 756100                    STQ     I+8,,AUTO
        12 001605   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001606   000001 235000 xsym               LDA     B_VECTNIL+1
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:245  
        12 001607   200046 757100                    STAQ    I+6,,AUTO
        12 001610   000034 236000 13                 LDQ     28
        12 001611   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001612   200044 757100                    STAQ    I+4,,AUTO
        12 001613   000036 237000 13                 LDAQ    30
        12 001614   200042 757100                    STAQ    I+2,,AUTO
        12 001615   200042 630500                    EPPR0   I+2,,AUTO
        12 001616   000025 631400 xsym               EPPR1   B_VECTNIL+21
        12 001617   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001620   000000 011000                    NOP     0

     1420     9877                                                /* JUST ABORT THE STEP                */
     1421     9878    1           GOTO GOT_DISPOSITION;

   9878 12 001621   001622 710000 12                 TRA     GOT_DISPOSITION

   9867 12 001622                       GOT_DISPOSI* null
     1422     9879        /**/
     1423     9880        /**/
     1424     9881        /**/
     1425     9882    1   GOT_DISPOSITION: ;
     1426     9883        /**/
     1427     9884        /*  We come here when VPF$OPEN_NEXT is at last ready to return to the         */
     1428     9885        /*  caller.  By now, we either have a file in our grubby little paws,         */
     1429     9886        /*  or know the reason why not!                                               */
     1430     9887        /**/
     1431     9888        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:246  
     1432     9889        /**/
     1433     9890        /*  This code implements the hook for file selection in SORTED order.         */
     1434     9891        /**/
     1435     9892    1           IF NOT SORTING_INPUT

   9892 12 001622   000000 234000 xsym               SZN     SORTING_INPUT
        12 001623   001703 605000 12                 TPL     SORTING_DONE

     1436     9893    1            THEN
     1437     9894    1              GOTO SORTING_DONE;
     1438     9895    1           IF RET_VAL ~= %VPOC_EXHAUSTED#

   9895 12 001624   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 001625   000000 235100                    LDA     0,,PR0
        12 001626   000001 115007                    CMPA    1,DL
        12 001627   001636 600000 12                 TZE     s:9903

     1439     9896    1            THEN
     1440     9897    2            DO;

     1441     9898    2               CALL VPF$SORT_FID (2);

   9898 12 001630   000036 630400 13                 EPPR0   30
        12 001631   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 001632   000000 701000 xent               TSX1    VPF$SORT_FID
        12 001633   000000 011000                    NOP     0

     1442     9899    2               FILE_FOUND = 0;

   9899 12 001634   200027 450100                    STZ     FILE_FOUND,,AUTO

     1443     9900    2               GOTO PLAY_IT_AGAIN;

   9900 12 001635   000071 710000 12                 TRA     PLAY_IT_AGAIN

     1444     9901    2               END;
     1445     9902    1            ELSE
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:247  
     1446     9903    1              CALL VPF$SORT_FID (3);

   9903 12 001636   000025 630400 13                 EPPR0   21
        12 001637   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 001640   000000 701000 xent               TSX1    VPF$SORT_FID
        12 001641   000000 011000                    NOP     0

   9895 12 001642                       REPLAY_SORT* null
     1447     9904        /**/
     1448     9905    1   REPLAY_SORTED: ;
     1449     9906    1           CALL VPF$SORT_FID (4,SORT_STATUS);

   9906 12 001642   200030 630500                    EPPR0   SORT_STATUS,,AUTO
        12 001643   200043 450500                    STP0    I+3,,AUTO
        12 001644   000043 236000 13                 LDQ     35
        12 001645   200042 756100                    STQ     I+2,,AUTO
        12 001646   200042 630500                    EPPR0   I+2,,AUTO
        12 001647   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 001650   000000 701000 xent               TSX1    VPF$SORT_FID
        12 001651   000000 011000                    NOP     0

     1450     9907    2           DO CASE(SORT_STATUS);

   9907 12 001652   200030 235100                    LDA     SORT_STATUS,,AUTO
        12 001653   000003 115007                    CMPA    3,DL
        12 001654   001656 602005 12                 TNC     s:9907+4,AL
        12 001655   001703 710000 12                 TRA     SORTING_DONE
        12 001656   001661 710000 12                 TRA     s:9909
        12 001657   001666 710000 12                 TRA     s:9912
        12 001660   001672 710000 12                 TRA     s:9914

     1451     9908    2            CASE(%VPOC_GOTFILE#);

     1452     9909    2              RET_VAL = %VPOC_GOTFILE#;

   9909 12 001661   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 001662   000000 450100                    STZ     0,,PR0
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:248  

     1453     9910    2              CALL TWIDDLE_AFTER_OPEN;

   9910 12 001663   001704 701000 12                 TSX1    TWIDDLE_AFTER_OPEN
        12 001664   000000 011000                    NOP     0
        12 001665   001703 710000 12                 TRA     SORTING_DONE

     1454     9911    2            CASE(%VPOC_EXHAUSTED#);

     1455     9912    2              RET_VAL = %VPOC_EXHAUSTED#;

   9912 12 001666   000001 236007                    LDQ     1,DL
        12 001667   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 001670   000000 756100                    STQ     0,,PR0
        12 001671   001703 710000 12                 TRA     SORTING_DONE

     1456     9913    2            CASE(%VPOC_NOACCESS#);

     1457     9914    2              RET_VAL = %VPOC_NOACCESS#;

   9914 12 001672   000002 236007                    LDQ     2,DL
        12 001673   200003 470500                    LDP0    @RET_VAL,,AUTO
        12 001674   000000 756100                    STQ     0,,PR0

     1458     9915    2              DIN_NAME.LEN = M$EI$ -> F$DCB.NAME.L;

   9915 12 001675   000000 471400 xsym               LDP1    M$EI$
        12 001676   100010 236100                    LDQ     8,,PR1
        12 001677   000000 552040 xsym               STBQ    DIN_NAME,'40'O

     1459     9916    2              DIN_NAME.STRING = M$EI$ -> F$DCB.NAME.C;

   9916 12 001700   040000 100500                    MLR     fill='040'O
        12 001701   100010 200037                    ADSC9   8,,PR1                   cn=1,n=31
        12 001702   000000 200037 xsym               ADSC9   DIN_NAME                 cn=1,n=31

     1460     9917    2            END;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:249  

   9916 12 001703                       SORTING_DONE null
     1461     9918    1   SORTING_DONE: ;
     1462     9919        /**/
     1463     9920    1           RETURN;

   9920 12 001703   000000 702200 xent               TSX2  ! X66_ARET

     1464     9921        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:250  
     1465     9922    1   TWIDDLE_AFTER_OPEN: PROC;

   9922 12 001704   200036 741300       TWIDDLE_AFT* STX1  ! CODE$+1,,AUTO

     1466     9923        /**/
     1467     9924        /*  This PROC is used after opening M$EI.  It sets up some items that         */
     1468     9925        /*  will be used later.                                                       */
     1469     9926        /**/
     1470     9927    2           CALL SET_FLAVOR;

   9927 12 001705   001763 701000 12                 TSX1    SET_FLAVOR
        12 001706   000000 011000                    NOP     0

     1471     9928    2           IF ICB.FLAVOR.MANAGED

   9928 12 001707   000172 236000 xsym               LDQ     ICB+122
        12 001710   000010 316003                    CANQ    8,DU
        12 001711   001720 600000 12                 TZE     s:9937

     1472     9929    2            THEN
     1473     9930    3            DO;

     1474     9931    3               DIN_NAME.LEN = M$EI$ -> F$DCB.NAME.L;

   9931 12 001712   000000 470400 xsym               LDP0    M$EI$
        12 001713   000010 236100                    LDQ     8,,PR0
        12 001714   000000 552040 xsym               STBQ    DIN_NAME,'40'O

     1475     9932    3               DIN_NAME.STRING = M$EI$ -> F$DCB.NAME.C;

   9932 12 001715   040000 100500                    MLR     fill='040'O
        12 001716   000010 200037                    ADSC9   8,,PR0                   cn=1,n=31
        12 001717   000000 200037 xsym               ADSC9   DIN_NAME                 cn=1,n=31

     1476     9933    3               END;

     1477     9934        /**/
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:251  
     1478     9935        /*  Set up vector parts that frame the FPARAM buffer.  */
     1479     9936        /**/
     1480     9937    2           FPARAM$ = ADDR(FPARAM_BUF);

   9937 12 001720   000013 236000 13                 LDQ     11
        12 001721   000000 756000 xsym               STQ     FPARAM$

     1481     9938    2           FPARAM_BOUND = SIZEC(FPARAM_BUF) -1;

   9938 12 001722   017777 235007                    LDA     8191,DL
        12 001723   000000 755000 xsym               STA     FPARAM_BOUND

     1482     9939    2           IF M$EI$ -> F$DCB.ORG=%RESTRICT#

   9939 12 001724   000000 470400 xsym               LDP0    M$EI$
        12 001725   000032 236100                    LDQ     26,,PR0
        12 001726   777000 376003                    ANQ     -512,DU
        12 001727   022000 116003                    CMPQ    9216,DU
        12 001730   001736 601000 12                 TNZ     s:9948

     1483     9940    2            THEN                           /* 5-WORD OFFSET for this ORG!!!      */
     1484     9941    3            DO;

     1485     9942    3               FPARAM$ = PINCRW(FPARAM$,5);

   9942 12 001731   000000 236000 xsym               LDQ     FPARAM$
        12 001732   000005 036003                    ADLQ    5,DU
        12 001733   000000 756000 xsym               STQ     FPARAM$

     1486     9943    3               FPARAM_BOUND = FPARAM_BOUND -20;

   9943 12 001734   000024 336007                    LCQ     20,DL
        12 001735   000000 056000 xsym               ASQ     FPARAM_BOUND

     1487     9944    3               END;

     1488     9945        /**/
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:252  
     1489     9946        /*  Find out how many fields are defined.  */
     1490     9947        /**/
     1491     9948    2           ICB.NUMFIELDS = 0;

   9948 12 001736   000234 450000 xsym               STZ     ICB+156

     1492     9949    2           IF M$EI$ -> F$DCB.ORG ~= %IREL# THEN

   9949 12 001737   000032 236100                    LDQ     26,,PR0
        12 001740   777000 376003                    ANQ     -512,DU
        12 001741   015000 116003                    CMPQ    6656,DU
        12 001742   001761 601000 12                 TNZ     FIELDS_DONE

     1493     9950    2              GOTO FIELDS_DONE;
     1494     9951    2           CODE$ = FPARAM$;

   9951 12 001743   000000 236000 xsym               LDQ     FPARAM$
        12 001744   200035 756100                    STQ     CODE$,,AUTO

     1495     9952    2           CALL XSF$LOCCODP(CODE$,18) ALTRET(FIELDS_DONE);

   9952 12 001745   000053 236000 13                 LDQ     43
        12 001746   200043 756100                    STQ     I+3,,AUTO
        12 001747   200035 631500                    EPPR1   CODE$,,AUTO
        12 001750   200042 451500                    STP1    I+2,,AUTO
        12 001751   200042 630500                    EPPR0   I+2,,AUTO
        12 001752   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 001753   000000 701000 xent               TSX1    XSF$LOCCODP
        12 001754   001761 702000 12                 TSX2    FIELDS_DONE

     1496     9953    2           ICB.NUMFIELDS = CODE$ -> CODE18.NFIELDS;

   9953 12 001755   200035 470500                    LDP0    CODE$,,AUTO
        12 001756   000000 236100                    LDQ     0,,PR0
        12 001757   000032 376000 xsym               ANQ     B_VECTNIL+26
        12 001760   000234 756000 xsym               STQ     ICB+156

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:253  
   9953 12 001761                       FIELDS_DONE  null
     1497     9954    2   FIELDS_DONE: ;
     1498     9955        /**/
     1499     9956        /*  FINIS!  */
     1500     9957        /**/
     1501     9958    2           RETURN;

   9958 12 001761   200036 221300                    LDX1  ! CODE$+1,,AUTO
        12 001762   000001 702211                    TSX2  ! 1,X1

     1502     9959    2   END TWIDDLE_AFTER_OPEN;
     1503     9960        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:254  
     1504     9961    1   SET_FLAVOR: PROC;

   9961 12 001763   200040 741300       SET_FLAVOR   STX1  ! VOL+1,,AUTO

     1505     9962        /*I* NAME: SET_FLAVOR
     1506     9963             PURPOSE: To set up the FLAVOR mask in ICB.
     1507     9964             CALL: CALL SET_FLAVOR;
     1508     9965             DESCRIPTION: This procedure is CALLed AFTER M$OPENing M$EI.
     1509     9966                          Tests are made to set any appropriate bits in ICB.FLAVOR
     1510     9967        */
     1511     9968    2           ICB.FLAVOR = '0'B;              /* Clear out any trash bits           */

   9968 12 001764   000172 450000 xsym               STZ     ICB+122

     1512     9969    2           IF ICB.DEV_MASK & '300'O        /* Managed                            */

   9969 12 001765   000171 236000 xsym               LDQ     ICB+121
        12 001766   777000 376003                    ANQ     -512,DU
        12 001767   300000 376003                    ANQ     98304,DU
        12 001770   001773 600000 12                 TZE     s:9972

     1513     9970    2            THEN
     1514     9971    2              ICB.FLAVOR.MANAGED = '1'B;

   9971 12 001771   000010 236003                    LDQ     8,DU
        12 001772   000172 256000 xsym               ORSQ    ICB+122

     1515     9972    2           IF ICB.DEV_MASK & '140'O        /* FT/LT                              */

   9972 12 001773   000171 236000 xsym               LDQ     ICB+121
        12 001774   777000 376003                    ANQ     -512,DU
        12 001775   140000 376003                    ANQ     49152,DU
        12 001776   002001 600000 12                 TZE     s:9975

     1516     9973    2            THEN
     1517     9974    2              ICB.FLAVOR.TAPE = '1'B;

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:255  
   9974 12 001777   000004 236003                    LDQ     4,DU
        12 002000   000172 256000 xsym               ORSQ    ICB+122

     1518     9975    2           IF M$EI$ -> F$DCB.ORG = %UR#

   9975 12 002001   000000 470400 xsym               LDP0    M$EI$
        12 002002   000032 236100                    LDQ     26,,PR0
        12 002003   777000 376003                    ANQ     -512,DU
        12 002004   004000 116003                    CMPQ    2048,DU
        12 002005   002015 601000 12                 TNZ     s:9979
        12 002006   000004 236100                    LDQ     4,,PR0
        12 002007   000024 736000                    QLS     20
        12 002010   400000 376003                    ANQ     -131072,DU
        12 002011   400000 676003                    ERQ     -131072,DU
        12 002012   002015 600000 12                 TZE     s:9979

     1519     9976    2             AND ~M$EI$ -> F$DCB.DDEV.IC   /* AND not the user's terminal        */
     1520     9977    2            THEN
     1521     9978    2              ICB.FLAVOR.UR = '1'B;

   9978 12 002013   000002 236003                    LDQ     2,DU
        12 002014   000172 256000 xsym               ORSQ    ICB+122

     1522     9979    2           IF M$EI$ -> F$DCB.ORG ~= %CONSEC# /*  1                               */

   9979 12 002015   000032 236100                    LDQ     26,,PR0
        12 002016   777000 376003                    ANQ     -512,DU
        12 002017   001000 116003                    CMPQ    512,DU
        12 002020   002043 600000 12                 TZE     s:9990
        12 002021   017000 116003                    CMPQ    7680,DU
        12 002022   002043 600000 12                 TZE     s:9990
        12 002023   012000 116003                    CMPQ    5120,DU
        12 002024   002043 600000 12                 TZE     s:9990
        12 002025   023000 116003                    CMPQ    9728,DU
        12 002026   002043 600000 12                 TZE     s:9990
        12 002027   011000 116003                    CMPQ    4608,DU
        12 002030   002043 600000 12                 TZE     s:9990
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:256  
        12 002031   010000 116003                    CMPQ    4096,DU
        12 002032   002043 600000 12                 TZE     s:9990
        12 002033   021000 116003                    CMPQ    8704,DU
        12 002034   002043 600000 12                 TZE     s:9990
        12 002035   004000 116003                    CMPQ    2048,DU
        12 002036   002043 600000 12                 TZE     s:9990
        12 002037   020000 116003                    CMPQ    8192,DU
        12 002040   002043 600000 12                 TZE     s:9990

     1523     9980    2             AND M$EI$ -> F$DCB.ORG ~= %FIXED# /* 15                             */
     1524     9981    2             AND M$EI$ -> F$DCB.ORG ~= %FPRG# /* 10                              */
     1525     9982    2             AND M$EI$ -> F$DCB.ORG ~= %FREE# /* 19                              */
     1526     9983    2             AND M$EI$ -> F$DCB.ORG ~= %SYMB# /*  9                              */
     1527     9984    2             AND M$EI$ -> F$DCB.ORG ~= %TERMINAL# /*  8                          */
     1528     9985    2             AND M$EI$ -> F$DCB.ORG ~= %UNDEF# /* 17                             */
     1529     9986    2             AND M$EI$ -> F$DCB.ORG ~= %UR# /*  4                                */
     1530     9987    2             AND M$EI$ -> F$DCB.ORG ~= %VARIABLE# /* 16                          */
     1531     9988    2            THEN                           /* ORG allows KEYS to be used on READ */
     1532     9989    2              ICB.FLAVOR.KEY_USABLE = '1'B;

   9989 12 002041   000100 236003                    LDQ     64,DU
        12 002042   000172 256000 xsym               ORSQ    ICB+122

     1533     9990    2           IF M$EI$ -> F$DCB.ORG = %RANDOM# /*  3                                */

   9990 12 002043   000032 236100                    LDQ     26,,PR0
        12 002044   777000 376003                    ANQ     -512,DU
        12 002045   003000 116003                    CMPQ    1536,DU
        12 002046   002055 600000 12                 TZE     s:9995
        12 002047   007000 116003                    CMPQ    3584,DU
        12 002050   002055 600000 12                 TZE     s:9995
        12 002051   005000 116003                    CMPQ    2560,DU
        12 002052   002055 600000 12                 TZE     s:9995
        12 002053   013000 116003                    CMPQ    5632,DU
        12 002054   002057 601000 12                 TNZ     s:9996

     1534     9991    2             OR M$EI$ -> F$DCB.ORG = %IDS# /*  7                                 */
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:257  
     1535     9992    2             OR M$EI$ -> F$DCB.ORG = %RELATIVE# /*  5                            */
     1536     9993    2             OR M$EI$ -> F$DCB.ORG = %CG#  /* 11                                 */
     1537     9994    2            THEN                           /* ORG allows 'holes' (E$DI)          */
     1538     9995    2              ICB.FLAVOR.HOLY_ORG = '1'B;

   9995 12 002055   000020 236003                    LDQ     16,DU
        12 002056   000172 256000 xsym               ORSQ    ICB+122

     1539     9996    2           IF M$EI$ -> F$DCB.ORG = %KEYED#

   9996 12 002057   000032 236100                    LDQ     26,,PR0
        12 002060   777000 376003                    ANQ     -512,DU
        12 002061   002000 116003                    CMPQ    1024,DU
        12 002062   002067 600000 12                 TZE     s:10000
        12 002063   006000 116003                    CMPQ    3072,DU
        12 002064   002067 600000 12                 TZE     s:10000
        12 002065   015000 116003                    CMPQ    6656,DU
        12 002066   002071 601000 12                 TNZ     s:10001

     1540     9997    2             OR M$EI$ -> F$DCB.ORG = %INDEXED#
     1541     9998    2             OR M$EI$ -> F$DCB.ORG = %IREL#
     1542     9999    2            THEN                           /* PCL 'knows' about this type of key */
     1543    10000    2              ICB.FLAVOR.KNOWKEY = '1'B;

  10000 12 002067   001000 236003                    LDQ     512,DU
        12 002070   000172 256000 xsym               ORSQ    ICB+122

     1544    10001    2           IF M$EI$ -> F$DCB.ORG = %FIXED#

  10001 12 002071   000032 236100                    LDQ     26,,PR0
        12 002072   777000 376003                    ANQ     -512,DU
        12 002073   017000 116003                    CMPQ    7680,DU
        12 002074   002101 600000 12                 TZE     s:10005
        12 002075   020000 116003                    CMPQ    8192,DU
        12 002076   002101 600000 12                 TZE     s:10005
        12 002077   021000 116003                    CMPQ    8704,DU
        12 002100   002103 601000 12                 TNZ     s:10006
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:258  

     1545    10002    2             OR M$EI$ -> F$DCB.ORG = %VARIABLE#
     1546    10003    2             OR M$EI$ -> F$DCB.ORG = %UNDEF#
     1547    10004    2            THEN                           /* This ORG on LTs only               */
     1548    10005    2              ICB.FLAVOR.LTOORG = '1'B;

  10005 12 002101   002000 236003                    LDQ     1024,DU
        12 002102   000172 256000 xsym               ORSQ    ICB+122

     1549    10006    2           IF M$EI$ -> F$DCB.ORG = %RANDOM# /*  3                                */

  10006 12 002103   000032 236100                    LDQ     26,,PR0
        12 002104   777000 376003                    ANQ     -512,DU
        12 002105   003000 116003                    CMPQ    1536,DU
        12 002106   002113 600000 12                 TZE     s:10010
        12 002107   007000 116003                    CMPQ    3584,DU
        12 002110   002113 600000 12                 TZE     s:10010
        12 002111   013000 116003                    CMPQ    5632,DU
        12 002112   002115 601000 12                 TNZ     s:10011

     1550    10007    2             OR M$EI$ -> F$DCB.ORG = %IDS# /*  7                                 */
     1551    10008    2             OR M$EI$ -> F$DCB.ORG = %CG#  /* 11                                 */
     1552    10009    2            THEN                           /* Input granule-size records         */
     1553    10010    2              ICB.FLAVOR.GRANB = '1'B;

  10010 12 002113   000200 236003                    LDQ     128,DU
        12 002114   000172 256000 xsym               ORSQ    ICB+122

     1554    10011    2           IF ICB.DEV_MASK.DEV_TAPE

  10011 12 002115   000171 236000 xsym               LDQ     ICB+121
        12 002116   040000 316003                    CANQ    16384,DU
        12 002117   002126 600000 12                 TZE     s:10015
        12 002120   000032 236100                    LDQ     26,,PR0
        12 002121   777000 376003                    ANQ     -512,DU
        12 002122   017000 116003                    CMPQ    7680,DU
        12 002123   002126 600000 12                 TZE     s:10015
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:259  

     1555    10012    2             AND M$EI$ -> F$DCB.ORG ~= %FIXED# /* 15                             */
     1556    10013    2            THEN                           /* It is a FREE-FREE tape             */
     1557    10014    2              ICB.FLAVOR.FFTAPE = '1'B;

  10014 12 002124   000040 236003                    LDQ     32,DU
        12 002125   000172 256000 xsym               ORSQ    ICB+122

     1558    10015    2           RETURN;

  10015 12 002126   000001 702211                    TSX2  ! 1,X1

     1559    10016    2   END SET_FLAVOR;
     1560    10017        %EJECT;
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:260  
     1561    10018    1   SET_UP_START: PROC;

  10018 12 002127   200036 741300       SET_UP_START STX1  ! CODE$+1,,AUTO

     1562    10019        /*I* NAME: SET_UP_START
     1563    10020             PURPOSE: To set up the OPEN_FPT for the first open of this spec.
     1564    10021             CALL: CALL SET_UP_START;
     1565    10022             DESCRIPTION: This procedure merges the specified input options into the
     1566    10023                          fresh OPEN_FPT along with the pieces returned from M$FID.
     1567    10024                          When this procedure returns, a call to M$OPEN should open
     1568    10025                          the first file in this file spec.
     1569    10026        */
     1570    10027        %FPT_REM (FPTN = FPT_REM,
     1571    10028                  DISP = REM,
     1572    10029                  STCLASS = STATIC);
     1573    10043    2   DCL VOL UBIN WORD;
     1574    10044    2   DCL I UBIN WORD;
     1575    10045    2           FPT_OPEN_EI.V.INITZ.SCRUB# = %YES#;

  10045 12 002130   400000 236007                    LDQ     -131072,DL
        12 002131   000044 256000 xsym               ORSQ    FPT_OPEN_EI+36

     1576    10046    2           IF ICB.ORG

  10046 12 002132   000135 235000 xsym               LDA     ICB+93
        12 002133   002144 601000 12                 TNZ     s:10052
        12 002134   000150 235000 xsym               LDA     ICB+104
        12 002135   002144 605400 12                 TPNZ    s:10052
        12 002136   000162 235000 xsym               LDA     ICB+114
        12 002137   002144 601000 12                 TNZ     s:10052
        12 002140   000173 235000 xsym               LDA     ICB+123
        12 002141   002144 601000 12                 TNZ     s:10052
        12 002142   000204 235000 xsym               LDA     ICB+132
        12 002143   002147 604400 12                 TMOZ    s:10054

     1577    10047    2             OR ICB.TYPE.COUNT>0
     1578    10048    2             OR ICB.DATE.RELATION ~= 0
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:261  
     1579    10049    2             OR ICB.CREATOR_SEL ~= 0
     1580    10050    2             OR ICB.SORTING_ORDER.COUNT > 0
     1581    10051    2            THEN
     1582    10052    2              ICB.FPARAM_REQUIRED.FOR_SELECTION = '1'B;

  10052 12 002144   400000 236003                    LDQ     -131072,DU
        12 002145   000203 256000 xsym               ORSQ    ICB+131
        12 002146   002151 710000 12                 TRA     s:10055

     1583    10053    2            ELSE
     1584    10054    2              ICB.FPARAM_REQUIRED.FOR_SELECTION = '0'B;

  10054 12 002147   000031 236000 xsym               LDQ     B_VECTNIL+25
        12 002150   000203 356000 xsym               ANSQ    ICB+131

     1585    10055    2           IF CODE=4 OR CODE = 5

  10055 12 002151   200004 470500                    LDP0    @CODE,,AUTO
        12 002152   000000 235100                    LDA     0,,PR0
        12 002153   000004 115007                    CMPA    4,DL
        12 002154   002165 600000 12                 TZE     s:10058
        12 002155   000005 115007                    CMPA    5,DL
        12 002156   002165 600000 12                 TZE     s:10058
        12 002157   000100 100400                    MLR     fill='000'O
        12 002160   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        12 002161   200042 000010                    ADSC9   I+2,,AUTO                cn=0,n=8
        12 002162   200042 237100                    LDAQ    I+2,,AUTO
        12 002163   000014 377000 13                 ANAQ    12
        12 002164   002170 600000 12                 TZE     s:10060

     1586    10056    2             OR (CMD_MASK & '34'O)
     1587    10057    2            THEN
     1588    10058    2              ICB.FPARAM_REQUIRED.FOR_OPERATION = '1'B;

  10058 12 002165   200000 236003                    LDQ     65536,DU
        12 002166   000203 256000 xsym               ORSQ    ICB+131
        12 002167   002172 710000 12                 TRA     s:10061
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:262  

     1589    10059    2            ELSE
     1590    10060    2              ICB.FPARAM_REQUIRED.FOR_OPERATION = '0'B;

  10060 12 002170   000054 236000 13                 LDQ     44
        12 002171   000203 356000 xsym               ANSQ    ICB+131

     1591    10061    2           IF RESULTS_FID_IN.NAME

  10061 12 002172   000000 234000 xsym               SZN     RESULTS_FID_IN
        12 002173   002176 605000 12                 TPL     s:10064

     1592    10062    2            THEN
     1593    10063    2              FPT_OPEN_EI.NAME_ = VECTOR(IN_NAME);

  10063 12 002174   000056 237000 13                 LDAQ    46
        12 002175   000006 757000 xsym               STAQ    FPT_OPEN_EI+6

     1594    10064    2           IF RESULTS_FID_IN.ACCT

  10064 12 002176   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 002177   200000 316003                    CANQ    65536,DU
        12 002200   002203 600000 12                 TZE     s:10067

     1595    10065    2            THEN
     1596    10066    2              FPT_OPEN_EI.ACCT_ = VECTOR(IN_ACCT);

  10066 12 002201   000060 237000 13                 LDAQ    48
        12 002202   000024 757000 xsym               STAQ    FPT_OPEN_EI+20

     1597    10067    2           IF RESULTS_FID_IN.RES

  10067 12 002203   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 002204   004000 316003                    CANQ    2048,DU
        12 002205   002210 600000 12                 TZE     s:10070

     1598    10068    2            THEN
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:263  
     1599    10069    2              FPT_OPEN_EI.V.RES# = IN_RES;

  10069 12 002206   000000 236000 xsym               LDQ     IN_RES
        12 002207   000050 756000 xsym               STQ     FPT_OPEN_EI+40

     1600    10070    2           IF RESULTS_FID_IN.WSN

  10070 12 002210   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 002211   020000 316003                    CANQ    8192,DU
        12 002212   002215 600000 12                 TZE     s:10073

     1601    10071    2            THEN
     1602    10072    2              FPT_OPEN_EI.WSN_ = VECTOR(IN_WSN);

  10072 12 002213   000062 237000 13                 LDAQ    50
        12 002214   000032 757000 xsym               STAQ    FPT_OPEN_EI+26

     1603    10073    2           FPT_OPEN_EI.V.ASN# = IN_ASN;

  10073 12 002215   000000 236000 xsym               LDQ     IN_ASN
        12 002216   000033 772000                    QRL     27
        12 002217   000045 552004 xsym               STBQ    FPT_OPEN_EI+37,'04'O

     1604    10074    2           IF ICB.DEV_MASK & '140'O        /* If tapes                           */

  10074 12 002220   000171 236000 xsym               LDQ     ICB+121
        12 002221   777000 376003                    ANQ     -512,DU
        12 002222   140000 376003                    ANQ     49152,DU
        12 002223   002243 600000 12                 TZE     s:10080

     1605    10075    2            THEN                           /* VOL defaults to last for this set  */
     1606    10076    3            DO;

     1607    10077    3               CALL VPD$CHECK_VOL(IN_SN,3,,I,0); /* Get last VOL in I            */

  10077 12 002224   000030 236000 13                 LDQ     24
        12 002225   200046 756100                    STQ     I+6,,AUTO
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:264  
        12 002226   200040 631500                    EPPR1   I,,AUTO
        12 002227   200045 451500                    STP1    I+5,,AUTO
        12 002230   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 002231   200044 756100                    STQ     I+4,,AUTO
        12 002232   000064 237000 13                 LDAQ    52
        12 002233   200042 757100                    STAQ    I+2,,AUTO
        12 002234   200042 630500                    EPPR0   I+2,,AUTO
        12 002235   000023 631400 xsym               EPPR1   B_VECTNIL+19
        12 002236   000000 701000 xent               TSX1    VPD$CHECK_VOL
        12 002237   000000 011000                    NOP     0

     1608    10078    3               FPT_OPEN_EI.V.VOL# = I;     /* Move WORD VOL to UBIN(9) field     */

  10078 12 002240   200040 236100                    LDQ     I,,AUTO
        12 002241   000033 736000                    QLS     27
        12 002242   000061 552040 xsym               STBQ    FPT_OPEN_EI+49,'40'O

     1609    10079    3               END;

     1610    10080    2           IF ICB.SPEC_TYPE~=1 AND ICB.SPEC_TYPE~=7

  10080 12 002243   000017 235000 xsym               LDA     ICB+15
        12 002244   000001 115007                    CMPA    1,DL
        12 002245   002315 600000 12                 TZE     s:10098
        12 002246   000007 115007                    CMPA    7,DL
        12 002247   002315 600000 12                 TZE     s:10098

     1611    10081    2            THEN
     1612    10082    3            DO;

     1613    10083    3               FPT_OPEN_EI.V.OPER.THISF# = %YES#;

  10083 12 002250   002000 236007                    LDQ     1024,DL
        12 002251   000044 256000 xsym               ORSQ    FPT_OPEN_EI+36

     1614    10084    3               IF ICB.PHYSICAL=0 AND (ICB.DEV_MASK & '140'O) /* Tapes and PHYS   */

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:265  
  10084 12 002252   000011 235000 xsym               LDA     ICB+9
        12 002253   002315 601000 12                 TNZ     s:10098
        12 002254   000171 236000 xsym               LDQ     ICB+121
        12 002255   777000 376003                    ANQ     -512,DU
        12 002256   140000 376003                    ANQ     49152,DU
        12 002257   002315 600000 12                 TZE     s:10098

     1615    10085    3                THEN                       /* START AT BEGINNING OF TAPE         */
     1616    10086    4                DO;

     1617    10087    4                   FPT_OPEN_EI.V.OPER.MNTONLY# = %YES#;

  10087 12 002260   001000 236007                    LDQ     512,DL
        12 002261   000044 256000 xsym               ORSQ    FPT_OPEN_EI+36

     1618    10088    4                   FPT_OPEN_EI.V.VOL# = 1; /* Special default                    */

  10088 12 002262   001000 236003                    LDQ     512,DU
        12 002263   000061 552040 xsym               STBQ    FPT_OPEN_EI+49,'40'O

     1619    10089    4                   CALL VPD$CHECK_VOL(IN_SN,3,,VOL,0); /* What's hanging         */

  10089 12 002264   000030 236000 13                 LDQ     24
        12 002265   200046 756100                    STQ     I+6,,AUTO
        12 002266   200037 630500                    EPPR0   VOL,,AUTO
        12 002267   200045 450500                    STP0    I+5,,AUTO
        12 002270   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 002271   200044 756100                    STQ     I+4,,AUTO
        12 002272   000064 237000 13                 LDAQ    52
        12 002273   200042 757100                    STAQ    I+2,,AUTO
        12 002274   200042 630500                    EPPR0   I+2,,AUTO
        12 002275   000023 631400 xsym               EPPR1   B_VECTNIL+19
        12 002276   000000 701000 xent               TSX1    VPD$CHECK_VOL
        12 002277   000000 011000                    NOP     0

     1620    10090    4                   IF VOL > 1              /*  If not VOL#1                      */

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:266  
  10090 12 002300   200037 235100                    LDA     VOL,,AUTO
        12 002301   000002 115007                    CMPA    2,DL
        12 002302   002315 602000 12                 TNC     s:10098

     1621    10091    4                    THEN
     1622    10092    5                    DO;

     1623    10093    5                       FPT_REM.V.PSN# = IN_SN.SN(VOL-1); /*  remove current vol*/

  10093 12 002303   200037 236100                    LDQ     VOL,,AUTO
        12 002304   000006 402007                    MPY     6,DL
        12 002305   040000 100406                    MLR     fill='040'O
        12 002306   777777 400006 xsym               ADSC9   IN_SN-1,Q                cn=2,n=6
        12 002307   000022 400006 11                 ADSC9   FPT_REM+2                cn=2,n=6

     1624    10094    6                       CALL M$REM(FPT_REM) WHENALTRETURN DO; END;
             10094                                /* ignore ALTRETURN */

  10094 12 002310   000020 630400 11                 EPPR0   FPT_REM
        12 002311   460006 713400                    CLIMB   alt,+24582
        12 002312   400000 401760                    pmme    nvectors=1
        12 002313   002315 702000 12                 TSX2    s:10098
        12 002314   002315 710000 12                 TRA     s:10098

     1625    10095    5                       END;

     1626    10096    4                   END;

     1627    10097    3               END;

     1628    10098    3           DO CASE(ICB.SPEC_TYPE);

  10098 12 002315   000017 235000 xsym               LDA     ICB+15
        12 002316   000011 115007                    CMPA    9,DL
        12 002317   002321 602005 12                 TNC     s:10098+4,AL
        12 002320   002424 710000 12                 TRA     s:10131
        12 002321   002424 710000 12                 TRA     s:10131
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:267  
        12 002322   002424 710000 12                 TRA     s:10131
        12 002323   002424 710000 12                 TRA     s:10131
        12 002324   002402 710000 12                 TRA     s:10120
        12 002325   002424 710000 12                 TRA     s:10131
        12 002326   002332 710000 12                 TRA     s:10100
        12 002327   002424 710000 12                 TRA     s:10131
        12 002330   002420 710000 12                 TRA     s:10128
        12 002331   002420 710000 12                 TRA     s:10128

     1629    10099    3            CASE(5);                       /* ABC? WILDCARDING                   */

     1630    10100    3              IF IN_ASN=%FILE#

  10100 12 002332   000000 236000 xsym               LDQ     IN_ASN
        12 002333   777000 376003                    ANQ     -512,DU
        12 002334   001000 116003                    CMPQ    512,DU
        12 002335   002424 601000 12                 TNZ     s:10131

     1631    10101    3               THEN                        /* We can save some time...           */
     1632    10102    4               DO;                         /* Manufacture first NAME to OPEN     */

     1633    10103    4                  CALL INDEX(I,'?',IN_NAME.STRING);

  10103 12 002336   000000 124400                    SCM     mask='000'O
        12 002337   000000 200037 xsym               ADSC9   IN_NAME                  cn=1,n=31
        12 002340   000042 000001 13                 ADSC9   34                       cn=0,n=1
        12 002341   200040 000100                    ARG     I,,AUTO

     1634    10104    4                  FPT_OPEN_EI.NAME_ = VECTOR(OPEN_NAME);

  10104 12 002342   000056 235000 13                 LDA     46
        12 002343   200042 452500                    STP2    I+2,,AUTO
        12 002344   200042 236100                    LDQ     I+2,,AUTO
        12 002345   000006 036003                    ADLQ    6,DU
        12 002346   000006 757000 xsym               STAQ    FPT_OPEN_EI+6

     1635    10105    4                  IF ICB.SRCHCOND.REV
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:268  

  10105 12 002347   000167 236000 xsym               LDQ     ICB+119
        12 002350   001000 316007                    CANQ    512,DL
        12 002351   002373 600000 12                 TZE     s:10115

     1636    10106    4                   THEN                    /* Start at the end                   */
     1637    10107    5                   DO;

     1638    10108    5                      OPEN_NAME.LEN = I+1;

  10108 12 002352   200040 236100                    LDQ     I,,AUTO
        12 002353   000001 036007                    ADLQ    1,DL
        12 002354   000033 736000                    QLS     27
        12 002355   200006 552140                    STBQ    OPEN_NAME,'40'O,AUTO

     1639    10109    5                      CALL CONCAT(OPEN_NAME.STRING,

  10109 12 002356   200040 720100                    LXL0    I,,AUTO
        12 002357   040100 100440                    MLR     fill='040'O
        12 002360   000000 200010 xsym               ADSC9   IN_NAME                  cn=1,n=*X0
        12 002361   200006 200037                    ADSC9   OPEN_NAME,,AUTO          cn=1,n=31
        12 002362   200040 236100                    LDQ     I,,AUTO
        12 002363   000037 116007                    CMPQ    31,DL
        12 002364   002372 603000 12                 TRC     s:10112
        12 002365   777740 621006                    EAX1    -32,QL
        12 002366   777777 661003                    ERX1    -1,DU
        12 002367   040146 100400                    MLR     fill='040'O
        12 002370   000055 000001 13                 ADSC9   45                       cn=0,n=1
        12 002371   200006 200011                    ADSC9   OPEN_NAME,Q,AUTO         cn=1,n=*X1

     1640    10110    5                        SUBSTR(IN_NAME.STRING,0,I),
     1641    10111    5                        BITASC('777'O) );
     1642    10112    5                      END;

  10112 12 002372   002424 710000 12                 TRA     s:10131

     1643    10113    4                   ELSE                    /* Start at the beginning             */
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:269  
     1644    10114    5                   DO;

     1645    10115    5                      OPEN_NAME.LEN = I;

  10115 12 002373   200040 236100                    LDQ     I,,AUTO
        12 002374   000033 736000                    QLS     27
        12 002375   200006 552140                    STBQ    OPEN_NAME,'40'O,AUTO

     1646    10116    5                      OPEN_NAME.STRING = IN_NAME.STRING;

  10116 12 002376   040100 100400                    MLR     fill='040'O
        12 002377   000000 200037 xsym               ADSC9   IN_NAME                  cn=1,n=31
        12 002400   200006 200037                    ADSC9   OPEN_NAME,,AUTO          cn=1,n=31

     1647    10117    5                      END;

     1648    10118    4                  END;

  10118 12 002401   002424 710000 12                 TRA     s:10131

     1649    10119    3            CASE(3);                       /* SUB-RANGE of directory             */

     1650    10120    3              IF ICB.SRCHCOND.REV

  10120 12 002402   000167 236000 xsym               LDQ     ICB+119
        12 002403   001000 316007                    CANQ    512,DL
        12 002404   002424 600000 12                 TZE     s:10131

     1651    10121    3               THEN                        /* Start at the end                   */
     1652    10122    4               DO;

     1653    10123    4                  FPT_OPEN_EI.NAME_ = VECTOR(OPEN_NAME);

  10123 12 002405   000056 235000 13                 LDA     46
        12 002406   200042 452500                    STP2    I+2,,AUTO
        12 002407   200042 236100                    LDQ     I+2,,AUTO
        12 002410   000006 036003                    ADLQ    6,DU
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:270  
        12 002411   000006 757000 xsym               STAQ    FPT_OPEN_EI+6

     1654    10124    4                  OPEN_NAME.STRING = ICB.NAME_RANGE_END;

  10124 12 002412   040100 100400                    MLR     fill='040'O
        12 002413   000140 000037 xsym               ADSC9   ICB+96                   cn=0,n=31
        12 002414   200006 200037                    ADSC9   OPEN_NAME,,AUTO          cn=1,n=31

     1655    10125    4                  OPEN_NAME.LEN = 31;

  10125 12 002415   037000 236003                    LDQ     15872,DU
        12 002416   200006 552140                    STBQ    OPEN_NAME,'40'O,AUTO

     1656    10126    4                  END;

  10126 12 002417   002424 710000 12                 TRA     s:10131

     1657    10127    3            CASE(7,8);                     /* FSN SPECIFICATIONS                 */

     1658    10128    3              FPT_OPEN_EI.V.FSN# = ICB.FSN.START;

  10128 12 002420   000044 220000 xsym               LDX0    ICB+36
        12 002421   000066 740000 xsym               STX0    FPT_OPEN_EI+54

     1659    10129    3              FPT_OPEN_EI.V.OPER.MNTONLY# = %NO#;

  10129 12 002422   000022 236000 13                 LDQ     18
        12 002423   000044 356000 xsym               ANSQ    FPT_OPEN_EI+36

     1660    10130    3            END;                           /* END CASE*/

     1661    10131    2           IF ICB.VOL ~= 0

  10131 12 002424   000157 236000 xsym               LDQ     ICB+111
        12 002425   777000 316003                    CANQ    -512,DU
        12 002426   002432 600000 12                 TZE     s:10137

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:271  
     1662    10132    2            THEN                           /* VOL specified                      */
     1663    10133    3            DO;

     1664    10134    3               FPT_OPEN_EI.V.VOL# = ICB.VOL;

  10134 12 002427   000061 552040 xsym               STBQ    FPT_OPEN_EI+49,'40'O

     1665    10135    3               ICB.VOL = 0;                /* VOL=N is a one-shot option         */

  10135 12 002430   000000 236003                    LDQ     0,DU
        12 002431   000157 552040 xsym               STBQ    ICB+111,'40'O

     1666    10136    3               END;

     1667    10137    2           BAD_FILE_NAME = ' 1';           /* An impossible filename             */

  10137 12 002432   040000 100400                    MLR     fill='040'O
        12 002433   000013 000002 10                 ADSC9   ABORT_SOURCE_ERR+7       cn=0,n=2
        12 002434   000006 000037 11                 ADSC9   BAD_FILE_NAME            cn=0,n=31

     1668    10138    2   END SET_UP_START;

  10138 12 002435   200036 221300                    LDX1  ! CODE$+1,,AUTO
        12 002436   000001 702211                    TSX2  ! 1,X1
     1669    10139    1   END VPF$OPEN_NEXT;
     1670    10140        %EOD;

PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:272  
--  Include file information  --

   XUH_MACRO_C.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   FM$FIT.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XUD_UTS_M.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$OPEN_NEXT.
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:273  

 **** Variables and constants ****

  ****  Section 010 RoData VPF$OPEN_NEXT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/b UBIN(18)    r     1 ABORT_SOURCE_ERR(0:9)
     0-0-0/d STRC(144)   r     1 FPT_PFIL

  ****  Section 011  Data  VPF$OPEN_NEXT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/c CHAR(31)    r     1 BAD_FILE_NAME             16-0-0/w UBIN        r     1 CONTROL_DATE
     4-0-0/w SBIN        r     1 CUR_FT_FSN                20-0-0/d STRC(144)   r     1 FPT_REM
     0-0-0/d STRC(144)   r     1 FPT_REM_FT                 5-0-0/w SBIN        r     1 NO_MORE_FILES

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CODE                      5-0-0/w PTR         r     1 @NAME_TEXTC
     3-0-0/w PTR         r     1 @RET_VAL                  33-0-0/c CHAR(4)     r     1 CHAR_4
    *0-0-0/w SBIN        r     1 CODE                      35-0-0/w PTR         r     1 CODE$
    27-0-0/w SBIN        r     1 FILE_FOUND                34-0-0/w BIT         r     1 FIRST
    32-0-0/w SBIN        r     1 I                         40-0-0/w UBIN        r     1 I
    *0-0-0/c ASTR(9)     r     1 NAME_TEXTC                26-0-0/w SBIN        r     1 NO_ACCESS
     6-0-0/c STRC(288)   r     1 OPEN_NAME                 *0-0-0/w SBIN        r     1 RET_VAL
    30-0-0/w SBIN        r     1 SORT_STATUS               31-0-0/w SBIN        r     1 T
    16-0-0/c STRC(288)   r     1 TEXT_C                    37-0-0/w UBIN        r     1 VOL

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:274  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT (2)     r     1 ANSISPAN_OPT               0-0-0/w SBIN        r     1 BREAKS
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b BIT         r     1 CMD_MASK(0:71)
     0-0-0/c STRC(288)   r     1 DIN_NAME                   0-0-0/w BIT         r     1 EOF_SOURCE
     0-0-0/w PTR         r     1 FPARAM$                    0-0-0/w SBIN        r     1 FPARAM_BOUND
     0-0-0/d SBIN        r     1 FPARAM_BUF(0:1023)
     0-0-0/d STRC(1080)  r     1 FPT_CLOSE_EI               0-0-0/d STRC(2088)  r     1 FPT_OPEN_EI
     0-0-0/d STRC(2088)  r     1 FPT_OPEN_EI_SAVE           0-0-0/d STRC(1512)  r     1 GETCMD
     0-0-0/d STRC(5868)  r     1 ICB                        0-0-0/w STRC        r     1 INPUT_ERR
     0-0-0/c CHAR(8)     r     1 IN_ACCT                    0-0-0/b UBIN(9)     r     1 IN_ASN
     0-0-0/c STRC(288)   r     1 IN_NAME                    0-0-0/c CHAR(8)     r     1 IN_PASS
     0-0-0/c CHAR(4)     r     1 IN_RES                     0-0-0/w STRC(1116)  r     1 IN_SN
     0-0-0/c CHAR(8)     r     1 IN_WSN                     0-0-0/w SBIN        r     1 M$EI#
     0-0-0/w PTR         r     1 M$EI$                      0-0-0/d STRC(324)   r     1 RESULTS_FID_IN
     0-0-0/b BIT         r     1 SORTING_INPUT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(324)   r     1 CODE03                     0-0-0/w STRC(396)   r     1 CODE04
     0-0-0/w STRC(108)   r     1 CODE05                     0-0-0/w STRC(108)   r     1 CODE06
     0-0-0/w STRC(54)    r     1 CODE18                     0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0N  NULL        r     1 M$EI                       0-0-0/c ASTR(9)     r     1 TEXT$C
     0-0-0/w UBIN(18)    r     1 UBIN$HALF                  0-0-0/d STRC(9612)  r     1 XUG_PARAMS


   Procedure VPF$OPEN_NEXT requires 1311 words for executable code.
   Procedure VPF$OPEN_NEXT requires 42 words of local(AUTO) storage.
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:275  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:276  
          MINI XREF LISTING

ABORT_SOURCE_ERR
      8648**DCL      9860>>DOWHILE  9861>>IF
ANSISPAN_OPT
      5674**DCL      9458>>ASSIGN
B$ALT.CODE
      8459**DCL      8459--REDEF    8460--REDEF    8460--REDEF
B$ALT.ERR.ERR#
      8461**DCL      8461--REDEF
B$ALT.EVID
      8460**DCL      8460--REDEF    8460--REDEF
BAD_FILE_NAME
      8651**DCL      9867>>IF       9874<<ASSIGN  10137<<ASSIGN
BREAKS
      5325**DCL      9849>>IF
BREAK_LOC
      5325**DCL      5325--REDEF
CHAR_4
      8654**DCL      9636<<CALLBLT  9637>>CALLBLT  9830<<CALLBLT  9831>>CALLBLT
CMD_MASK
      5327**DCL      9474>>IF       9474>>IF       9811>>IF      10055>>IF
CODE
        29**DCL         6--PROC     9401>>DOCASE   9515>>IF       9515>>IF      10055>>IF      10055>>IF
CODE$
      8727**DCL      9687<<ASSIGN   9688<>CALL     9700>>ASSIGN   9702>>ASSIGN   9704>>ASSIGN   9706>>ASSIGN
      9707<<ASSIGN   9708<>CALL     9709>>IF       9712>>CALL     9714<<ASSIGN   9715<>CALL     9720>>ASSIGN
      9722<<ASSIGN   9723<>CALL     9728>>ASSIGN   9951<<ASSIGN   9952<>CALL     9953>>ASSIGN
CODE03.EXPIRE
      8704**DCL      9709>>IF       9712>>CALL
CODE04.ACCESS.TIME
      8712**DCL      9702>>ASSIGN
CODE04.CREATION.TIME
      8712**DCL      9700>>ASSIGN   9706>>ASSIGN
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:277  
CODE04.MODIFY.TIME
      8712**DCL      9704>>ASSIGN
CODE05.BACKUP.TIME
      8716**DCL      9720>>ASSIGN
CODE06.STOW.EFT
      8719**DCL      8720--REDEF
CODE06.STOW.TIME
      8719**DCL      9728>>ASSIGN
CODE18.DECFIELD
      8723**DCL      8724--REDEF
CODE18.NFIELDS
      8723**DCL      9953>>ASSIGN
CONTROL_DATE
      8726**DCL      9700<<ASSIGN   9702<<ASSIGN   9704<<ASSIGN   9706<<ASSIGN   9712<>CALL     9712<>CALL
      9720<<ASSIGN   9728<<ASSIGN   9730<>CALL     9732<<ASSIGN   9736>>IF       9740>>IF       9744>>IF
      9748>>IF       9752>>IF       9756>>IF
CREATOR_OK
      9669**LABEL    9668--CALLALT
CUR_FT_FSN
      8643**DCL      9544<<ASSIGN   9548<<ASSIGN   9562<<ASSIGN   9562>>ASSIGN   9627<<ASSIGN   9627>>ASSIGN
      9628>>IF       9636>>CALLBLT  9830>>CALLBLT
DEF_ICB.FID.STRING
      5923**DCL      5924--REDEF
DEV_ICB.FID.STRING
      5809**DCL      5810--REDEF
DIN_NAME
      5616**DCL      9570--IF       9570--IF       9577--IF       9577--IF       9582--IF       9582--IF
      9597<>CALL     9867--IF       9867--IF       9874--ASSIGN   9874--ASSIGN
DIN_NAME.LEN
      5616**DCL      9638<<ASSIGN   9824<<ASSIGN   9832<<ASSIGN   9915<<ASSIGN   9931<<ASSIGN
DIN_NAME.STRING
      5616**DCL      9605>>IF       9637<<CALLBLT  9825<<ASSIGN   9831<<CALLBLT  9916<<ASSIGN   9932<<ASSIGN
EI_KEY.KEY
      6021**DCL      6021--REDEF    6021--REDEF    6021--REDEF
EI_OPEN_ALT
      9821**LABEL    9502--CALLALT  9536--CALLALT
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:278  
EOF_SOURCE
      5322**DCL      9503<<ASSIGN
EO_OCB.TYPE
      5521**DCL      5522--REDEF
F$DCB.ACTPOS
      8491**DCL      8491--REDEF
F$DCB.ARS
      8466**DCL      8466--REDEF
F$DCB.ASN
      8481**DCL      9613>>IF
F$DCB.ATTR
      8484**DCL      8485--REDEF
F$DCB.BORROW
      8499**DCL      8499--REDEF    8499--REDEF    8499--REDEF
F$DCB.DCBNAME.L
      8513**DCL      8513--IMP-SIZ
F$DCB.DDEV.IC
      8472**DCL      9975>>IF
F$DCB.EOMCHAR
      8470**DCL      8470--REDEF
F$DCB.FCD
      8479**DCL      9761>>IF       9789>>IF
F$DCB.FLDID
      8494**DCL      8494--REDEF
F$DCB.FORM$
      8488**DCL      8488--REDEF
F$DCB.FSECT
      8504**DCL      8504--REDEF    9508>>IF
F$DCB.FSN
      8481**DCL      8481--REDEF    8481--REDEF    8482--REDEF    9510>>ASSIGN   9512>>ASSIGN   9616>>IF
      9620>>IF
F$DCB.HEADER$
      8487**DCL      8487--REDEF
F$DCB.IXTNSIZE
      8485**DCL      8485--REDEF
F$DCB.LASTSTA$
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:279  
      8475**DCL      8475--REDEF
F$DCB.LVL
      8500**DCL      8500--REDEF
F$DCB.NAME.C
      8475**DCL      8475--REDEF    9825>>ASSIGN   9916>>ASSIGN   9932>>ASSIGN
F$DCB.NAME.L
      8475**DCL      9824>>ASSIGN   9915>>ASSIGN   9931>>ASSIGN
F$DCB.NOEOF
      8496**DCL      8496--REDEF
F$DCB.NRECS
      8486**DCL      8486--REDEF
F$DCB.NRECX
      8505**DCL      8505--REDEF
F$DCB.OHDR
      8497**DCL      8497--REDEF
F$DCB.ORG
      8480**DCL      8480--REDEF    9642>>IF       9939>>IF       9949>>IF       9975>>IF       9979>>IF
      9979>>IF       9979>>IF       9979>>IF       9979>>IF       9979>>IF       9979>>IF       9979>>IF
      9979>>IF       9990>>IF       9990>>IF       9990>>IF       9990>>IF       9996>>IF       9996>>IF
      9996>>IF      10001>>IF      10001>>IF      10001>>IF      10006>>IF      10006>>IF      10006>>IF
     10011>>IF
F$DCB.OWNER
      8497**DCL      9675>>IF
F$DCB.PRECNO
      8503**DCL      8503--REDEF
F$DCB.RCSZ
      8508**DCL      8508--REDEF
F$DCB.RES
      8476**DCL      8476--REDEF
F$DCB.SETX
      8488**DCL      8488--REDEF
F$DCB.TAB$
      8487**DCL      8488--REDEF
F$DCB.TDA
      8502**DCL      8502--REDEF
F$DCB.TYPE
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:280  
      8476**DCL      9652>>IF       9656--IF
F$DCB.WSN
      8477**DCL      8477--REDEF
FIELDS_DONE IN PROCEDURE TWIDDLE_AFTER_OPEN
      9953**LABEL    9950--GOTO     9952--CALLALT
FILE_FOUND
      8646**DCL      9416<<ASSIGN   9422>>DOWHILE  9560<<ASSIGN   9564<<ASSIGN   9569<<ASSIGN   9587<<ASSIGN
      9598<<ASSIGN   9612<<ASSIGN   9622<<ASSIGN   9646<<ASSIGN   9647>>IF       9650<<ASSIGN   9654<<ASSIGN
      9659>>IF       9661<<ASSIGN   9663<<ASSIGN   9672<<ASSIGN   9677<<ASSIGN   9679>>IF       9680<<ASSIGN
      9682<<ASSIGN   9683>>IF       9694<<ASSIGN   9717<<ASSIGN   9725<<ASSIGN   9738<<ASSIGN   9742<<ASSIGN
      9746<<ASSIGN   9750<<ASSIGN   9754<<ASSIGN   9758<<ASSIGN   9761>>IF       9769>>IF       9800>>IF
      9899<<ASSIGN
FIRST
      8655**DCL      9400<<ASSIGN   9425>>IF       9427<<ASSIGN
FPARAM$
      5326**DCL      9498<<ASSIGN   9686<<ASSIGN   9687>>ASSIGN   9707>>ASSIGN   9714>>ASSIGN   9722>>ASSIGN
      9937<<ASSIGN   9942<<ASSIGN   9942>>ASSIGN   9951>>ASSIGN
FPARAM_BOUND
      5327**DCL      9938<<ASSIGN   9943<<ASSIGN   9943>>ASSIGN
FPARAM_BUF
      5326**DCL      9470--ASSIGN   9497<<ASSIGN   9498--ASSIGN   9686--ASSIGN   9846<<ASSIGN   9937--ASSIGN
      9938--ASSIGN
FPT_CLOSE_EI
      6862**DCL      9527<>CALL     9535<>CALL
FPT_CLOSE_EI.SN_
      6862**DCL      6862--REDEF
FPT_CLOSE_EI.UTL_
      6863**DCL      6863--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6877**DCL      6877--REDEF
FPT_CLOSE_EI.V.TYPE#
      6875**DCL      6875--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6872**DCL      6872--REDEF    6874--REDEF
FPT_CLOSE_PTL.SN_
      6988**DCL      6988--REDEF
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:281  
FPT_CLOSE_PTL.UTL_
      6989**DCL      6989--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      7003**DCL      7003--REDEF
FPT_CLOSE_PTL.V.TYPE#
      7001**DCL      7001--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6998**DCL      6998--REDEF    7000--REDEF
FPT_CLOSE_READ.SN_
      6904**DCL      6904--REDEF
FPT_CLOSE_READ.UTL_
      6905**DCL      6905--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6919**DCL      6919--REDEF
FPT_CLOSE_READ.V.TYPE#
      6917**DCL      6917--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6914**DCL      6914--REDEF    6916--REDEF
FPT_CLOSE_SI.SN_
      7072**DCL      7072--REDEF
FPT_CLOSE_SI.UTL_
      7073**DCL      7073--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      7087**DCL      7087--REDEF
FPT_CLOSE_SI.V.TYPE#
      7085**DCL      7085--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      7082**DCL      7082--REDEF    7084--REDEF
FPT_CLOSE_STD.SN_
      7030**DCL      7030--REDEF
FPT_CLOSE_STD.UTL_
      7031**DCL      7031--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      7045**DCL      7045--REDEF
FPT_CLOSE_STD.V.TYPE#
      7043**DCL      7043--REDEF
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:282  
FPT_CLOSE_STD.V.XTNSIZE#
      7040**DCL      7040--REDEF    7042--REDEF
FPT_CLSEI_FT.SN_
      6946**DCL      6946--REDEF
FPT_CLSEI_FT.UTL_
      6947**DCL      6947--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6961**DCL      6961--REDEF
FPT_CLSEI_FT.V.TYPE#
      6959**DCL      6959--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6956**DCL      6956--REDEF    6958--REDEF
FPT_OPEN_EI
      6515**DCL      9399<<ASSIGN   9429<<ASSIGN   9502<>CALL     9530<>CALL     9536<>CALL
FPT_OPEN_EI.ACCT_
      6519**DCL     10066<<ASSIGN
FPT_OPEN_EI.ACSVEH_
      6517**DCL      6518--REDEF
FPT_OPEN_EI.ALTKEYS_
      6523**DCL      6524--REDEF    6524--REDEF
FPT_OPEN_EI.FPARAM_
      6520**DCL      9470<<ASSIGN
FPT_OPEN_EI.HDR_
      6522**DCL      6523--REDEF
FPT_OPEN_EI.NAME_
      6516**DCL      9413<<ASSIGN  10063<<ASSIGN  10104<<ASSIGN  10123<<ASSIGN
FPT_OPEN_EI.PASS_
      6517**DCL      9467<<ASSIGN
FPT_OPEN_EI.SN_
      6515**DCL      9464<<ASSIGN
FPT_OPEN_EI.TAB_
      6521**DCL      6522--REDEF
FPT_OPEN_EI.UHL_
      6515**DCL      6516--REDEF    6516--REDEF
FPT_OPEN_EI.V.ANSISPANSEQ#
      6548**DCL      9458<<ASSIGN
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:283  
FPT_OPEN_EI.V.ASN#
      6534**DCL     10073<<ASSIGN
FPT_OPEN_EI.V.BLKL#
      6541**DCL      9441<<ASSIGN
FPT_OPEN_EI.V.BLOCKED#
      6536**DCL      9445<<ASSIGN   9447<<ASSIGN
FPT_OPEN_EI.V.CHAIN#
      6550**DCL      9430<<ASSIGN
FPT_OPEN_EI.V.CNVRT#
      6544**DCL      9461<<ASSIGN
FPT_OPEN_EI.V.CVOL#
      6529**DCL      9490<<ASSIGN
FPT_OPEN_EI.V.EBCDIC#
      6544**DCL      9455<<ASSIGN
FPT_OPEN_EI.V.FSN#
      6555**DCL      6555--REDEF    6555--REDEF    9510<<ASSIGN   9512<<ASSIGN  10128<<ASSIGN
FPT_OPEN_EI.V.IGNOREFSN#
      6548**DCL      9435<<ASSIGN
FPT_OPEN_EI.V.INITZ.SCRUB#
      6525**DCL     10045<<ASSIGN
FPT_OPEN_EI.V.IOERROK#
      6546**DCL      9434<<ASSIGN
FPT_OPEN_EI.V.OPER.MNTONLY#
      6528**DCL      9505>>IF       9507<<ASSIGN  10087<<ASSIGN  10129<<ASSIGN
FPT_OPEN_EI.V.OPER.NXTF#
      6527**DCL      9473<<ASSIGN
FPT_OPEN_EI.V.OPER.TEST#
      6526**DCL      9479<<ASSIGN   9485<<ASSIGN   9487<<ASSIGN
FPT_OPEN_EI.V.OPER.THISF#
      6527**DCL      9414<<ASSIGN  10083<<ASSIGN
FPT_OPEN_EI.V.ORG#
      6535**DCL      9438<<ASSIGN   9440<<ASSIGN
FPT_OPEN_EI.V.RECL#
      6541**DCL      9442<<ASSIGN
FPT_OPEN_EI.V.RES#
      6539**DCL     10069<<ASSIGN
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:284  
FPT_OPEN_EI.V.SHARE#
      6529**DCL      9432<<ASSIGN
FPT_OPEN_EI.V.SPANNED#
      6537**DCL      9450<<ASSIGN   9452<<ASSIGN
FPT_OPEN_EI.V.SRCHCOND
      6530**DCL      9433<<ASSIGN
FPT_OPEN_EI.V.TYPE#
      6536**DCL      9431--ASSIGN
FPT_OPEN_EI.V.VOL#
      6549**DCL     10078<<ASSIGN  10088<<ASSIGN  10134<<ASSIGN
FPT_OPEN_EI.WSN_
      6521**DCL      6521--REDEF   10072<<ASSIGN
FPT_OPEN_EI_SAVE
      6624**DCL      9399>>ASSIGN   9429>>ASSIGN
FPT_OPEN_EI_SAVE.ACSVEH_
      6626**DCL      6627--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6632**DCL      6633--REDEF    6633--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6631**DCL      6632--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6630**DCL      6631--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6624**DCL      6625--REDEF    6625--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6664**DCL      6664--REDEF    6664--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6630**DCL      6630--REDEF
FPT_OPEN_OUT.ACSVEH_
      6408**DCL      6409--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6414**DCL      6415--REDEF    6415--REDEF
FPT_OPEN_OUT.HDR_
      6413**DCL      6414--REDEF
FPT_OPEN_OUT.TAB_
      6412**DCL      6413--REDEF
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:285  
FPT_OPEN_OUT.UHL_
      6406**DCL      6407--REDEF    6407--REDEF
FPT_OPEN_OUT.V.FSN#
      6446**DCL      6446--REDEF    6446--REDEF
FPT_OPEN_OUT.WSN_
      6412**DCL      6412--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6299**DCL      6300--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6305**DCL      6306--REDEF    6306--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6304**DCL      6305--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6303**DCL      6304--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6297**DCL      6298--REDEF    6298--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6337**DCL      6337--REDEF    6337--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6303**DCL      6303--REDEF
FPT_PFIL
      8612**DCL      9532<>CALL
FPT_PFIL.V
      8612**DCL      8612--DCLINIT
FPT_READ_STD.STATION_
      6727**DCL      6728--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6739**DCL      6739--REDEF
FPT_READ_STD.V.INDX#
      6737**DCL      6737--REDEF
FPT_READ_UC.STATION_
      6688**DCL      6689--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6700**DCL      6700--REDEF
FPT_READ_UC.V.INDX#
      6698**DCL      6698--REDEF
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:286  
FPT_REM IN PROCEDURE SET_UP_START
     10040**DCL     10094<>CALL
FPT_REM.V IN PROCEDURE SET_UP_START
     10040**DCL     10040--DCLINIT
FPT_REM.V.PSN# IN PROCEDURE SET_UP_START
     10041**DCL     10093<<ASSIGN
FPT_REM_FT
      8629**DCL      9529<>CALL
FPT_REM_FT.V
      8629**DCL      8629--DCLINIT
FPT_REM_FT.V.PSN#
      8630**DCL      9528<<ASSIGN
FPT_WRITE_ME.STATION_
      6796**DCL      6796--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6803**DCL      6803--REDEF
FPT_WRITE_OUT.STATION_
      6827**DCL      6827--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6834**DCL      6834--REDEF
FPT_WRITE_UC.STATION_
      6765**DCL      6765--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6772**DCL      6772--REDEF
FROM_SN.SN
      5671**DCL      5672--REDEF
GETCMD.ERRDCB#
      5032**DCL      9496<<ASSIGN
GETCMD.OUT$
      4878**DCL      4884--REDEF
GETCMD.WORK$
      4906**DCL      9495>>ASSIGN
GOT_DISPOSITION
      9867**LABEL    9410--GOTO     9818--GOTO     9838--GOTO     9871--GOTO     9878--GOTO
I
      8653**DCL      9531<<DOINDEX  9604<<CALLBLT  9605>>IF       9605>>IF       9775<<ASSIGN   9780<<ASSIGN
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:287  
      9786>>IF       9792<>CALL     9859<<ASSIGN   9860>>DOWHILE  9861>>IF       9865<<ASSIGN   9865>>ASSIGN
I IN PROCEDURE SET_UP_START
     10044**DCL     10077<>CALL    10078>>ASSIGN  10103<<CALLBLT 10108>>ASSIGN  10109>>CALLBLT 10115>>ASSIGN
ICB.ANSISPAN
      5782**DCL      9456>>IF
ICB.BLKL
      5687**DCL      9441>>ASSIGN
ICB.CAT
      5731**DCL      9430>>ASSIGN
ICB.CLPOS
      5778**DCL      9521>>IF
ICB.CREATOR.C
      5768**DCL      9669>>IF
ICB.CREATOR.TEXT
      5769**DCL      9669>>IF
ICB.CREATOR_NEG
      5766**DCL      9678>>IF
ICB.CREATOR_SEL
      5765**DCL      9665>>IF       9675>>IF       9678>>IF      10046>>IF
ICB.DATE.RELATION
      5728**DCL      9683>>IF       9734>>DOCASE  10046>>IF
ICB.DATE.ROUNDING_TYPE
      5727**DCL      9730<>CALL
ICB.DATE.TYPE
      5726**DCL      9691>>IF       9698>>DOCASE
ICB.DATE.UTS
      5729**DCL      9736>>IF       9740>>IF       9744>>IF       9748>>IF       9752>>IF       9756>>IF
ICB.DEV_MASK
      5745**DCL      9590>>IF       9821>>IF       9969>>IF       9972>>IF      10074>>IF      10084>>IF
ICB.DEV_MASK.DEV_TAPE
      5749**DCL      9483>>IF       9488>>IF       9515>>IF       9553>>IF       9633>>IF       9827>>IF
     10011>>IF
ICB.DEV_MASK.MAN_DISC
      5747**DCL      9601>>IF
ICB.DEV_MASK.MAN_TAPE
      5748**DCL      9474>>IF       9553>>IF
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:288  
ICB.EBCDIC
      5677**DCL      9453>>IF
ICB.FID.STRING
      5695**DCL      5696--REDEF
ICB.FLAVOR
      5751**DCL      9968<<ASSIGN
ICB.FLAVOR.FFTAPE
      5758**DCL      9533>>IF      10014<<ASSIGN
ICB.FLAVOR.GRANB
      5756**DCL     10010<<ASSIGN
ICB.FLAVOR.HOLY_ORG
      5759**DCL      9995<<ASSIGN
ICB.FLAVOR.IOERROK
      5755**DCL      9434>>ASSIGN
ICB.FLAVOR.KEY_USABLE
      5757**DCL      9776>>IF       9989<<ASSIGN
ICB.FLAVOR.KNOWKEY
      5754**DCL     10000<<ASSIGN
ICB.FLAVOR.LTOORG
      5753**DCL     10005<<ASSIGN
ICB.FLAVOR.MANAGED
      5760**DCL      9928>>IF       9971<<ASSIGN
ICB.FLAVOR.TAPE
      5761**DCL      9974<<ASSIGN
ICB.FLAVOR.UR
      5762**DCL      9978<<ASSIGN
ICB.FPARAM_REQUIRED
      5770**DCL      9468>>IF       9474>>IF
ICB.FPARAM_REQUIRED.FOR_OPERATION
      5772**DCL     10058<<ASSIGN  10060<<ASSIGN
ICB.FPARAM_REQUIRED.FOR_SELECTION
      5771**DCL     10052<<ASSIGN  10054<<ASSIGN
ICB.FSN.FINISH
      5699**DCL      9518>>IF       9521>>IF       9616>>IF       9620>>IF       9628>>IF
ICB.FSN.START
      5698**DCL      9531>>DOINDEX  9544>>ASSIGN  10128>>ASSIGN
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:289  
ICB.FTORG
      5724**DCL      9436>>IF       9440>>ASSIGN
ICB.IGNOREFSN
      5781**DCL      9435>>ASSIGN
ICB.KEY_SEL
      5700**DCL      9776>>IF
ICB.NAME_RANGE_END
      5718**DCL      9570>>IF       9582>>IF      10124>>ASSIGN
ICB.NBLOCK
      5680**DCL      9443>>IF
ICB.NCNVRT
      5682**DCL      9459>>IF
ICB.NSPAN
      5679**DCL      9448>>IF
ICB.NUMFIELDS
      5779**DCL      9948<<ASSIGN   9953<<ASSIGN
ICB.ORG
      5715**DCL      9642>>IF       9642>>IF      10046>>IF
ICB.ORG_NEG
      5716**DCL      9642>>IF
ICB.PHYSICAL
      5686**DCL      9566>>IF      10084>>IF
ICB.RECL
      5688**DCL      9442>>ASSIGN
ICB.SHARE
      5683**DCL      9432>>ASSIGN
ICB.SORTING_ORDER.COUNT
      5774**DCL      9390>>IF      10046>>IF
ICB.SPEC_TYPE
      5692**DCL      9390>>IF       9471>>IF       9471>>IF       9518>>IF       9558>>DOCASE   9601>>IF
      9852>>IF       9852>>IF      10080>>IF      10080>>IF      10098>>DOCASE
ICB.SRCHCOND
      5732**DCL      9433>>ASSIGN
ICB.SRCHCOND.REV
      5743**DCL      9577>>IF       9582>>IF      10105>>IF      10120>>IF
ICB.TYPE.COUNT
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:290  
      5720**DCL      9647>>IF       9651>>DOINDEX 10046>>IF
ICB.TYPE.NEG
      5721**DCL      9656>>IF
ICB.TYPE.STRING
      5722**DCL      9652>>IF
ICB.VOL
      5723**DCL     10131>>IF      10134>>ASSIGN  10135<<ASSIGN
IFSFA_PARAM.EOMCHAR#
      6050**DCL      6051--REDEF
IFSFA_PARAM.SIG1
      6044**DCL      6044--REDEF
IFSFA_PARAM.SIG2
      6044**DCL      6045--REDEF
INPUT_ERR
      5210**DCL      9541<>CALL     9816<>CALL     9876<>CALL
INPUT_ERR.ERR#
      5240**DCL      9834>>IF       9834>>IF       9840>>IF       9840>>IF       9840>>IF       9849>>IF
      9861>>IF
IN_ACCT
      5616**DCL     10066--ASSIGN
IN_ASN
      5654**DCL     10073>>ASSIGN  10100>>IF
IN_NAME
      5616**DCL      9577--IF       9577--IF       9597<>CALL    10063--ASSIGN
IN_NAME.LEN
      5616**DCL      9640<<ASSIGN
IN_NAME.STRING
      5616**DCL      9604>>CALLBLT  9605>>IF       9639<<ASSIGN  10103>>CALLBLT 10109>>CALLBLT 10116>>ASSIGN
IN_PASS
      5617**DCL      9467--ASSIGN
IN_RES
      5617**DCL      5617--REDEF   10069>>ASSIGN
IN_SN
      5628**DCL      9464--ASSIGN   9538<>CALL     9556<>CALL    10077<>CALL    10089<>CALL
IN_SN.SN
      5633**DCL      5634--REDEF    9528>>ASSIGN  10093>>ASSIGN
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:291  
IN_WSN
      5654**DCL     10072--ASSIGN
M$CLOSE
       135**DCL-ENT  9527--CALL     9535--CALL
M$EI#
      6086**DCL      9538<>CALL     9541<>CALL     9556<>CALL     9792<>CALL     9816<>CALL     9876<>CALL
M$EI$
      6086**DCL      9508>>IF       9510>>ASSIGN   9512>>ASSIGN   9613>>IF       9616>>IF       9620>>IF
      9642>>IF       9652>>IF       9656>>IF       9675>>IF       9761>>IF       9789>>IF       9824>>ASSIGN
      9825>>ASSIGN   9915>>ASSIGN   9916>>ASSIGN   9931>>ASSIGN   9932>>ASSIGN   9939>>IF       9949>>IF
      9975>>IF       9975>>IF       9979>>IF       9979>>IF       9979>>IF       9979>>IF       9979>>IF
      9979>>IF       9979>>IF       9979>>IF       9979>>IF       9990>>IF       9990>>IF       9990>>IF
      9990>>IF       9996>>IF       9996>>IF       9996>>IF      10001>>IF      10001>>IF      10001>>IF
     10006>>IF      10006>>IF      10006>>IF      10011>>IF
M$OPEN
       135**DCL-ENT  9530--CALL     9536--CALL
M$PFIL
       137**DCL-ENT  9532--CALL
M$REM
       144**DCL-ENT  9529--CALL    10094--CALL
NAME_TEXTC
        30**DCL         6--PROC     9413--ASSIGN
NAME_TEXTC.LEN
        31**DCL        32--IMP-SIZ  9413>>ASSIGN
NEXPR
      9732**LABEL    9708--CALLALT  9711--GOTO
NO_ACCESS
      8644**DCL      9424<<ASSIGN   9642>>IF       9776>>IF       9804>>IF       9845<<ASSIGN
NO_ACC_CONT
      9558**LABEL    9847--GOTO
NO_CODE4
      9761**LABEL    9695--GOTO     9718--GOTO     9726--GOTO
NO_MORE_FILES
      8645**DCL      9404<<ASSIGN   9406>>IF       9422>>DOWHILE  9540<<ASSIGN   9561<<ASSIGN   9573<<ASSIGN
      9592<<ASSIGN   9608<<ASSIGN   9619<<ASSIGN   9630<<ASSIGN   9854<<ASSIGN   9860>>DOWHILE  9863<<ASSIGN
NO_WILD_MATCH
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:292  
      9601**LABEL    9597--CALLALT
OCB.TYPE
      5379**DCL      5380--REDEF
OFSFA_PARAM.EOMCHAR#
      6080**DCL      6081--REDEF
OFSFA_PARAM.SIG1
      6074**DCL      6074--REDEF
OFSFA_PARAM.SIG2
      6074**DCL      6075--REDEF
OPEN_IT
      9488**LABEL    9513--GOTO     9851--GOTO
OPEN_NAME
      8637**DCL     10104--ASSIGN  10123--ASSIGN
OPEN_NAME.LEN
      8638**DCL     10108<<ASSIGN  10115<<ASSIGN  10125<<ASSIGN
OPEN_NAME.STRING
      8639**DCL     10109<<CALLBLT 10116<<ASSIGN  10124<<ASSIGN
OUTSIDE_RANGE
      9586**LABEL    9581--GOTO     9586--GOTO
OUT_SN.SN
      5651**DCL      5652--REDEF
PFIL_ERR
      9540**LABEL    9527--CALLALT  9529--CALLALT  9530--CALLALT  9532--CALLALT
PLAY_IT_AGAIN
      9416**LABEL    9900--GOTO
REPLAY_SORTED
      9895**LABEL    9389--GOTO
RESULTS_FID_IN.ACCT
      6127**DCL     10064>>IF
RESULTS_FID_IN.NAME
      6127**DCL     10061>>IF
RESULTS_FID_IN.PASS
      6127**DCL      9465>>IF
RESULTS_FID_IN.RES
      6127**DCL     10067>>IF
RESULTS_FID_IN.SN
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:293  
      6127**DCL      9462>>IF
RESULTS_FID_IN.WSN
      6127**DCL     10070>>IF
RET_VAL
        28**DCL         6--PROC     9398<<ASSIGN   9409<<ASSIGN   9802<<ASSIGN   9807<<ASSIGN   9814<<ASSIGN
      9837<<ASSIGN   9870<<ASSIGN   9895>>IF       9909<<ASSIGN   9912<<ASSIGN   9914<<ASSIGN
SET_FLAVOR
      9961**PROC     9927--CALL
SET_UP_START
     10018**PROC     9403--CALL
SORTING_DONE
      9916**LABEL    9894--GOTO
SORTING_INPUT
      5327**DCL      9387>>IF       9394<<ASSIGN   9892>>IF
SORT_STATUS
      8647**DCL      9906<>CALL     9907>>DOCASE
SPEC_BUF
      5329**DCL      5329--REDEF
T
      8652**DCL      9651<<DOINDEX  9652>>IF
TEXT$C.LEN
      8635**DCL      8636--IMP-SIZ  9570>>IF       9577>>IF       9577>>IF       9582>>IF       9867>>IF
      9874>>ASSIGN
TEXT$C.STRING
      8636**DCL      9570>>IF       9577>>IF       9577>>IF       9582>>IF       9867>>IF       9874>>ASSIGN
TEXT_C
      8640**DCL      9668<>CALL
TEXT_C.C
      8641**DCL      9669>>IF
TEXT_C.TEXT
      8642**DCL      9669>>IF
TWIDDLE_AFTER_OPEN
      9922**PROC     9504--CALL     9910--CALL
UBIN$HALF
      8656**DCL      9431<<ASSIGN   9656>>IF
VOL IN PROCEDURE SET_UP_START
PL6.E3A0      #004=VPF$OPEN_NEXT File=VPF$SRCLST.:E05TSI                         WED 07/30/97 07:37 Page:294  
     10043**DCL     10089<>CALL    10090>>IF      10093>>ASSIGN
VPD$CHECK_VOL
      9197**DCL-ENT  9538--CALL     9556--CALL    10077--CALL    10089--CALL
VPD$FETCH_CREATOR
      9377**DCL-ENT  9668--CALL
VPD$ROUND_DATE
      9254**DCL-ENT  9730--CALL
VPD$WILD_COMPARE
      9263**DCL-ENT  9597--CALL
VPF$CALL_OPEN
      9280**DCL-ENT  9502--CALL
VPF$CLOSE_IN
      9283**DCL-ENT  9763--CALL     9791--CALL
VPF$SORT_FID
      9371**DCL-ENT  9395--CALL     9898--CALL     9903--CALL     9906--CALL
VPL$ERR_PROC
      9357**DCL-ENT  9523--CALL     9541--CALL     9792--CALL     9816--CALL     9876--CALL
XSF$LOCCODP
      9383**DCL-ENT  9688--CALL     9708--CALL     9715--CALL     9723--CALL     9952--CALL
XUD$UTS_ADJ_25TH
      8693**DCL-ENT  9712--CALL
XUG_PARAMS.BUF
      9167**DCL      9170--REDEF
XUG_PARAMS.ERRDCB
      8827**DCL      9495<<ASSIGN

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:295  
     1671        1        /*T***********************************************************/
     1672        2        /*T*                                                         */
     1673        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1674        4        /*T*                                                         */
     1675        5        /*T***********************************************************/
     1676        6        VPF$PROCESS_INPUT_OPT: PROC(OPT$) ALTRET;
     1677        7        /*I* NAME: VPF$PROCESS_INPUT_OPT
     1678        8             PURPOSE: To validate and store into ICB the current option.
     1679        9             CALL: CALL VPF$PROCESS_INPUT_OPT(OPT$) ALTRET(BAD_OPTION);
     1680       10             DESCRIPTION: This procedure checks the current input option specified
     1681       11                          against CON_DUP_TBL to check if it is a conflicting or
     1682       12                          duplicate input option and against OPT_TBL to check if it is
     1683       13                          a valid option for this command and/or device type. If all of
     1684       14                          these checks are passed, the option is further processed for
     1685       15                          specific requirements and placed into ICB. The RET_VAL is
     1686       16                          set to 2 if an option is in error in any way.
     1687       17        */
     1688       18        /**/
     1689       19        /*  LOCAL AUTO  */
     1690       20        /**/
     1691       21    1   DCL OPT$ PTR;
     1692       22    1   DCL OPT_CODE SBIN WORD;
     1693       23    1   DCL TWORD UBIN WORD;
     1694       24    1   DCL T$ PTR;
     1695       25    1   DCL TO_KEY$ PTR;
     1696       26    1   DCL FROM_KEY$ PTR;
     1697       27    1   DCL I UBIN WORD;                        /* Temp. counter                      */
     1698       28    1   DCL J SBIN WORD;                        /* Temp.                              */
     1699       29        %INCLUDE B$JIT;
     1700      319        %INCLUDE VP_DATA_R;
     1701     7306        /**/
     1702     7307        /*  LOCAL CONSTANTS  */
     1703     7308        /**/
     1704     7309    1   DCL 1 OPT_TBL(0:%(MAX_IN_OP#+3)) CONSTANT,
     1705     7310                /*K* OPT_TBL.  Indexed by option code number from the parser (the
     1706     7311                 0th entry is trash), this table determines if the option is legal
     1707     7312                 for the command and input device, selects the error code if it
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:296  
     1708     7313                 is not legal, and checks for duplicate and conflicting options       */
     1709     7314    1         2 CMD,
     1710     7315    1           3 ERR_CODE SBIN WORD INIT(0,
     1711     7316                    /*K* CMD.ERR_CODE VALUE-DEC. This is the error code number to
     1712     7317                     use if the option is not legal for this command.                 */
     1713     7318    1             26, 9, 0,36, 9,
     1714     7319    1              0, 9, 0, 0, 0,
     1715     7320    1              0, 8, 0, 0,42,
     1716     7321    1             44,44,44,47,49,
     1717     7322    1             50,51,52, 0,59,
     1718     7323    1              9,28,28, 0, 0,
     1719     7324    1             62, 9,65,65,66,
     1720     7325    1             66,270,270,
     1721     7326    1              0, 0, 0),                    /* SPARE for PATCHING only            */
     1722     7327        /*E* ERROR:   VPF-00008
     1723     7328             MESSAGE: Record selection not allowed this command
     1724     7329        */
     1725     7330        /*E* ERROR:   VPF-00009
     1726     7331             MESSAGE: A, EA, FA, COLS, or FFID not allowed this command
     1727     7332        */
     1728     7333        /*E*   ERROR: VPF-00036
     1729     7334             MESSAGE: CRPT not allowed this command
     1730     7335        */
     1731     7336        /*E*   ERROR: VPF-00026
     1732     7337             MESSAGE: SHARE not allowed this command
     1733     7338        */
     1734     7339        /*E*   ERROR: VPF-00042
     1735     7340             MESSAGE: EBCDIC not allowed this command
     1736     7341        */
     1737     7342        /*E*   ERROR: VPF-00044
     1738     7343             MESSAGE: BINARY,NBINARY or TRANSPARENT option not allowed this command
     1739     7344        */
     1740     7345        /*E*   ERROR: VPF-00047
     1741     7346             MESSAGE: FTORGANIZATION not allowed this command
     1742     7347        */
     1743     7348        /*E*   ERROR: VPF-00049
     1744     7349             MESSAGE: BLOCK not allowed this command
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:297  
     1745     7350        */
     1746     7351        /*E*   ERROR: VPF-00050
     1747     7352             MESSAGE: RECLENGTH not allowed this command
     1748     7353        */
     1749     7354        /*E*   ERROR: VPF-00051
     1750     7355             MESSAGE: NSPANNED not allowed this command
     1751     7356        */
     1752     7357        /*E*   ERROR: VPF-00052
     1753     7358             MESSAGE: NBLOCKED not allowed this command
     1754     7359        */
     1755     7360        /*E*   ERROR: VPF-00059
     1756     7361             MESSAGE: SRCHCOND not allowed for this command
     1757     7362        */
     1758     7363        /*E*   ERROR: VPF-00028
     1759     7364             MESSAGE: HEAD/NHEAD not allowed for this command
     1760     7365        */
     1761     7366        /*E*   ERROR: VPF-00062
     1762     7367             MESSAGE: CLPOS not allowed for this command
     1763     7368        */
     1764     7369        /*E*   ERROR: VPF-00065
     1765     7370             MESSAGE: IOERROR/NIOERROR not allowed for this command
     1766     7371        */
     1767     7372        /*E*   ERROR: VPF-00066
     1768     7373             MESSAGE: IGNOREFSN/NIGNOREFSN not allowed for this command
     1769     7374        */
     1770     7375        /*E*   ERROR: VPF-00270
     1771     7376             MESSAGE: ANSISPAN/NANSISPAN not allowed for this command
     1772     7377        */
     1773     7378
     1774     7379    1           3 ALLOWED BIT(36) UNAL
     1775     7380    1             INIT('0'O,
     1776     7381                    /*K* CMD.ALLOWED VALUE-BIT(36). This is a mask used to determine
     1777     7382                     whether or not the option is legal with the command.  A '1'B
     1778     7383                     in the appropriate bit position indicates that the option is OK.
     1779     7384                     This format is suitable for ANDing with CMD_MASK.  Some commands
     1780     7385                     of interest are:
     1781     7386                         OCTAL VALUE        COMMAND
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:298  
     1782     7387                         -----------        -------
     1783     7388                         20000              COPY
     1784     7389                         10000              COPYALL
     1785     7390                          4000              COPYSTD
     1786     7391                            40              LIST                                      */
     1787     7392    1             '341040000'O,'000700002'O,'777777777'O,'340100002'O,'000700000'O,
     1788     7393    1             '777777777'O,'000700002'O,'777777777'O,'777777777'O,'777777777'O,
     1789     7394    1             '777777777'O,'341000000'O,'777777777'O,'777777777'O,'340000000'O,
     1790     7395    1             '340000000'O,'340000000'O,'340000000'O,'340000000'O,'340000000'O,
     1791     7396    1             '340000000'O,'340000000'O,'340000000'O,'777777777'O,'777777777'O,
     1792     7397    1             '000700002'O,'340000000'O,'340000000'O,'777777777'O,'777777777'O,
     1793     7398    1             '240000000'O,'000700002'O,'340400000'O,'340400000'O,'340400000'O,
     1794     7399    1             '340400000'O,'340400000'O,'340400000'O,
     1795     7400    1   '000000000'O,'000000000'O,'000000000'O), /* SPARE for PATCHING ONLY           */
     1796     7401    1         2 CON_DUP_IDX UBIN BYTE UNAL INIT(0,
     1797     7402                    /*K* CON_DUP_IDX VALUE-DEC. This is is an index into CON_DUP_TBL,
     1798     7403                     a binary array.  When an option is used, that entry in the array
     1799     7404                     is set.  Subsequent attempts to use a set bit indicate that a
     1800     7405                     duplicate exists.  Conflicting options are done the same way.  If
     1801     7406                     CON_DUP_IDX is 0, no conflict is possible and duplicates are OK. */
     1802     7407    1            0, 2, 3, 4, 2,
     1803     7408    1            5, 2, 1, 6, 7,
     1804     7409    1            8, 0,20,10,11,
     1805     7410    1           12,12, 9,13,14,
     1806     7411    1           15,16,17,18,19,
     1807     7412    1            0,21,21,22,23,
     1808     7413    1           24, 2,33,33,35,
     1809     7414    1           35,22,0,
     1810     7415    1            0, 0, 0),                      /* SPARE for PATCHING ONLY            */
     1811     7416    1         2 DEV,
     1812     7417    1           3 ALLOWED BIT(9) UNAL INIT('0'O,
     1813     7418                    /*K* DEV.ALLOWED VALUE-BIT(9). This is a mask used to determine
     1814     7419                     whether or not the option is legal with the device.  A '1'B
     1815     7420                     in the appropriate bit position indicates that the option is OK.
     1816     7421                     This format is suitable for ANDing with ICB.DEV_MASK.  Device
     1817     7422                     codes are:
     1818     7423                         OCTAL VALUE        DEVICE
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:299  
     1819     7424                         -----------        -------
     1820     7425                                400            Default. Denotes COMGROUP or
     1821     7426                                               non-tape device.
     1822     7427                                200            Managed disk.
     1823     7428                                100            Managed tape.
     1824     7429                                040            Device tape.
     1825     7430        */
     1826     7431    1             '200'O,'777'O,'100'O,'200'O,'777'O,
     1827     7432    1             '040'O,'777'O,'140'O,'140'O,'300'O,
     1828     7433    1             '100'O,'777'O,'300'O,'140'O,'040'O,
     1829     7434    1             '440'O,'440'O,'440'O,'140'O,'140'O,
     1830     7435    1             '140'O,'040'O,'040'O,'300'O,'300'O,
     1831     7436    1             '200'O,'777'O,'777'O,'300'O,'200'O,
     1832     7437    1             '140'O,'777'O,'140'O,'140'O,'100'O,
     1833     7438    1             '100'O,'100'O,'100'O,
     1834     7439    1             '000'O,'000'O,'000'O),        /* SPARE for PATCHING ONLY            */
     1835     7440    1           3 ERR_CODE SBIN WORD INIT(0,
     1836     7441                    /*K* DEV.ERR_CODE VALUE-DEC. This is the error code number to
     1837     7442                     use if the option is not legal for this device.                  */
     1838     7443    1             27, 0,11,12, 0,
     1839     7444    1             13, 0,10,14,15,
     1840     7445    1             16, 0,17,18,43,
     1841     7446    1             45,45,45,48,48,
     1842     7447    1             48,64,64,57,60,
     1843     7448    1              0, 0, 0,31,61,
     1844     7449    1             38, 0,66,66,67,
     1845     7450    1             67,271,271,
     1846     7451    1              0, 0, 0);                    /* SPARE for PATCHING ONLY            */
     1847     7452        /*E* ERROR:   VPF-00010
     1848     7453             MESSAGE: NCNVRT allowed for tapes only.
     1849     7454        */
     1850     7455        /*E* ERROR:   VPF-00011
     1851     7456             MESSAGE: CATENATE allowed for labeled tape only
     1852     7457        */
     1853     7458        /*E* ERROR:   VPF-00012
     1854     7459             MESSAGE: CRPT allowed for disk files only
     1855     7460        */
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:300  
     1856     7461        /*E* ERROR:   VPF-00013
     1857     7462             MESSAGE: DEOD not allowed
     1858     7463        */
     1859     7464        /*E* ERROR:   VPF-00014
     1860     7465             MESSAGE: FSN allowed on tape only
     1861     7466        */
     1862     7467        /*E* ERROR:   VPF-00015
     1863     7468             MESSAGE: File selection by ORG allowed on managed files only
     1864     7469        */
     1865     7470        /*E* ERROR:   VPF-00016
     1866     7471             MESSAGE: PHYSICAL allowed on managed tape only
     1867     7472        */
     1868     7473        /*E* ERROR:   VPF-00017
     1869     7474             MESSAGE: File selection by TYPE allowed on managed files only
     1870     7475        */
     1871     7476        /*E* ERROR:   VPF-00018
     1872     7477             MESSAGE: VOLUME allowed on tape only
     1873     7478        */
     1874     7479        /*E*   ERROR: VPF-00027
     1875     7480             MESSAGE: SHARE allowed for disk files only
     1876     7481        */
     1877     7482        /*E*   ERROR: VPF-00043
     1878     7483             MESSAGE: EBCDIC allowed for free tape only
     1879     7484        */
     1880     7485        /*E*   ERROR: VPF-00045
     1881     7486             MESSAGE: BINARY,NBINARY or TRANSPARENT input option allowed for devices only
     1882     7487        */
     1883     7488        /*E*   ERROR: VPF-00048
     1884     7489             MESSAGE: FTORGANIZATION,BLOCK, or RECLENGTH allowed for tapes only
     1885     7490        */
     1886     7491        /*E*   ERROR: VPF-00064
     1887     7492             MESSAGE: NSPANNED or NBLOCKED allowed for FT only
     1888     7493        */
     1889     7494        /*E*   ERROR: VPF-00057
     1890     7495             MESSAGE: File selection by DATE on managed files only
     1891     7496        */
     1892     7497        /*E*   ERROR: VPF-00060
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:301  
     1893     7498             MESSAGE: SRCHCOND is only valid for managed files
     1894     7499        */
     1895     7500        /*E*   ERROR: VPF-00031
     1896     7501             MESSAGE: CREATOR is only valid for managed files
     1897     7502        */
     1898     7503        /*E*   ERROR: VPF-00061
     1899     7504             MESSAGE: File selection in SORTED order is only valid on disk files.
     1900     7505        */
     1901     7506        /*E*   ERROR: VPF-00038
     1902     7507             MESSAGE: CLPOS option only valid for tapes.
     1903     7508        */
     1904     7509        /*E*   ERROR: VPF-00068
     1905     7510             MESSAGE: IOERROK or NIOERROK allowed for tape only
     1906     7511        */
     1907     7512        /*E*   ERROR: VPF-00067
     1908     7513             MESSAGE: IGNOREFSN or NIGNOREFSN allowed for managed tape only
     1909     7514        */
     1910     7515        /*E*   ERROR: VPF-00271
     1911     7516             MESSAGE: ANSISPAN and NANSISPAN are valid for labelled tape only
     1912     7517        */
     1913     7518
     1914     7519        /**/
     1915     7520        /*  BASED  */
     1916     7521        /**/
     1917     7522        %PARSE$OUT(NAME=OUT$BLK,STCLASS=BASED);
     1918     7567        %PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
     1919     7605    1   DCL 1 TEXT$C BASED,
     1920     7606    1         2 LEN UBIN BYTE UNAL,
     1921     7607    1         2 STRING CHAR(TEXT$C.LEN);
     1922     7608        /**/
     1923     7609        /*  LOCAL STATIC  */
     1924     7610        /**/
     1925     7611    1   DCL DATE_TYPE UBIN STATIC;
     1926     7612        %FPT_TIME (FPTN = FPT_MAKE_TIME,
     1927     7613                   STCLASS = STATIC,
     1928     7614                   SOURCE = UTS,
     1929     7615                   DEST = EXT,
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:302  
     1930     7616                   TSTAMP = ICB.DATE.UTS,
     1931     7617                   DATE = ICB.DATE.TEXT);
     1932     7636        /**/
     1933     7637        /*  ENTRY DCLS  */
     1934     7638        /**/
     1935     7639        %VP_ENTRIES (OMIT=VPF$PROCESS_INPUT_OPT);
     1936     7847        /**/
     1937     7848    1           OPT_CODE = OPT$->OUT$BLK.CODE;
     1938     7849    1           IF CON_DUP_TBL(OPT_TBL.CON_DUP_IDX(OPT_CODE)) AND
     1939     7850    1             OPT_TBL.CON_DUP_IDX(OPT_CODE)~=0
     1940     7851    1            THEN
     1941     7852    2            DO;
     1942     7853    2               CALL VPL$ERR_PROC(3,19,'06'O,,,,,1); /* CONFLICTING OR DUPLICATE  */
     1943     7854        /*E* ERROR:   VPF-00019
     1944     7855             MESSAGE: Duplicate or conflicting input option
     1945     7856        */
     1946     7857    2               ALTRETURN;                  /* INPUT OPTION                       */
     1947     7858    2               END;
     1948     7859    1           IF NOT (OPT_TBL.CMD.ALLOWED(OPT_CODE) & CMD_MASK)
     1949     7860    1            THEN
     1950     7861    2            DO;
     1951     7862    2               CALL VPL$ERR_PROC(3,OPT_TBL.CMD.ERR_CODE(OPT_CODE),'06'O,,,,,1);
     1952     7863    2               ALTRETURN;
     1953     7864    2               END;
     1954     7865    1           IF NOT (OPT_TBL.DEV.ALLOWED(OPT_CODE) & ICB.DEV_MASK
     1955     7866    1             OR IN_RES = 'NO  ' )          /* Device NO has all options legal    */
     1956     7867    1            THEN
     1957     7868    2            DO;
     1958     7869    2               CALL VPL$ERR_PROC(3,OPT_TBL.DEV.ERR_CODE(OPT_CODE),'06'O,,,,,1);
     1959     7870    2               ALTRETURN;
     1960     7871    2               END;
     1961     7872    1           CON_DUP_TBL(OPT_TBL.CON_DUP_IDX(OPT_CODE)) = '1'B;
     1962     7873    2           DO CASE(OPT_CODE);
     1963     7874    2            CASE(1);                       /* SHARE                              */
     1964     7875    2              ICB.SHARE = %ALL#;
     1965     7876    2            CASE(2);                       /* ATTRIBUTES                         */
     1966     7877    2              ICB.A_EA_C = 3;
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:303  
     1967     7878    2            CASE(3);                       /* CATENATE                           */
     1968     7879    2              CALL VPD$TEXTC_CHARBIN(TWORD,
     1969     7880    2                OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     1970     7881    2                128) ALTRET(BAD_CAT);
     1971     7882    2              ICB.CAT = TWORD;
     1972     7883    2              GOTO GOOD_CAT;
     1973     7884    2   BAD_CAT:   CALL VPL$ERR_PROC(3,20,'06'O,,,,,1); /* CAT OPTION MAX. 128        */
     1974     7885        /*E* ERROR:   VPF-00020
     1975     7886             MESSAGE: CAT greater than 128
     1976     7887        */
     1977     7888    2              ALTRETURN;
     1978     7889    2   GOOD_CAT:  ;
     1979     7890    2            CASE(4);                       /* CRPT                               */
     1980     7891    2              CALL VPD$MNG_CRPT(ICB.CRPT,OPT$->OUT$BLK.SUBLK$(0)) ALTRET(BAD_CRPT);
     1981     7892    3              DO WHILE ('0'B);
     1982     7893    3   BAD_CRPT:     CALL VPL$ERR_PROC(3,21,'06'O,,,,,1);
     1983     7894    3                 ALTRETURN;
     1984     7895        /*E* ERROR:   VPF-00021
     1985     7896             MESSAGE: Invalid CRPT value on input.
     1986     7897        */
     1987     7898    3                 END;
     1988     7899    2            CASE(5);                       /* COLS                               */
     1989     7900    2              CALL VPD$TEXTC_CHARBIN(ICB.COLS,
     1990     7901    2                OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     1991     7902    2                -1) ALTRET(BAD_COLS);
     1992     7903    2              ICB.A_EA_C = 1;
     1993     7904    2              GOTO GOOD_COLS;
     1994     7905    2   BAD_COLS:  CALL VPL$ERR_PROC(3,22,'06'O,,,,,1); /* COLUMNS OPTION MAXIMUM 99  */
     1995     7906        /*E* ERROR:   VPF-00022
     1996     7907             MESSAGE: COLS greater than 99
     1997     7908        */
     1998     7909    2              ALTRETURN;
     1999     7910    2   GOOD_COLS: IF ICB.COLS=0
     2000     7911    2               THEN
     2001     7912    2                 ICB.COLS = 132;
     2002     7913    2            CASE(6);                       /* DEOD                               */
     2003     7914    2              ICB.DEOD = 1;
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:304  
     2004     7915    2            CASE(7);                       /* EATTRIBUTES                        */
     2005     7916    2              ICB.A_EA_C = 4;
     2006     7917    2            CASE(8);                       /* NCNVRT                             */
     2007     7918    2              ICB.NCNVRT = %YES#;
     2008     7919    2            CASE(9);                       /* FSN                                */
     2009     7920    2              IF RESULTS_FID_IN.NAME
     2010     7921    2               THEN
     2011     7922    3               DO;
     2012     7923    3                  CALL VPL$ERR_PROC(3,23,'06'O,,,,,1); /* FSN ILLEGAL WITH NAME  */
     2013     7924        /*E* ERROR:   VPF-00023
     2014     7925             MESSAGE: FSN illegal with named file
     2015     7926        */
     2016     7927    3                  ALTRETURN;
     2017     7928    3                  END;
     2018     7929    2               ELSE
     2019     7930    3               DO;
     2020     7931    3                  CALL VPD$TEXTC_CHARBIN(TWORD,
     2021     7932    3                    OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     2022     7933    3                    32767) ALTRET(BAD_FSN);
     2023     7934    3                  ICB.FSN.START = TWORD;
     2024     7935    3                  IF OPT$->OUT$BLK.NSUBLKS>1
     2025     7936    3                   THEN
     2026     7937    4                   DO;
     2027     7938    4                      CALL VPD$TEXTC_CHARBIN(TWORD,
     2028     7939    4                        OPT$->OUT$BLK.SUBLK$(1)->OUT$BLK.SUBLK$(0),
     2029     7940    4                        32767) ALTRET(BAD_FSN);
     2030     7941    4                      ICB.FSN.FINISH = TWORD;
     2031     7942    4                      IF ICB.FSN.START>ICB.FSN.FINISH
     2032     7943    4                       THEN
     2033     7944    5                       DO;
     2034     7945    5                          CALL VPL$ERR_PROC(3,25,'06'O,,,,,1);
     2035     7946        /*E* ERROR:   VPF-00025
     2036     7947             MESSAGE: Bad FSN range
     2037     7948        */
     2038     7949                                                /* BAD FSN RANGE                      */
     2039     7950    5                          ALTRETURN;
     2040     7951    5                          END;
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:305  
     2041     7952    4                      END;
     2042     7953    3                  END;
     2043     7954    2              GOTO GOOD_FSN;
     2044     7955    2   BAD_FSN:   CALL VPL$ERR_PROC(3,24,'06'O,,,,,1); /* FSN VALUE TOO LARGE        */
     2045     7956        /*E* ERROR:   VPF-00024
     2046     7957             MESSAGE: FSN too large
     2047     7958        */
     2048     7959    2              ALTRETURN;
     2049     7960    2   GOOD_FSN:  ;
     2050     7961    2            CASE(10);                      /* ORGS                               */
     2051     7962    2              ICB.ORG = '0'B;
     2052     7963    3              DO TWORD=0 TO OPT$->OUT$BLK.NSUBLKS-1;
     2053     7964    3                 I = OPT$ -> OUT$BLK.SUBLK$(TWORD) -> OUT$BLK.CODE; /* ORG code  */
     2054     7965    3                 IF I=99 THEN              /* This means the ~= was specified    */
     2055     7966    3                    ICB.ORG_NEG = '1'B;
     2056     7967    3                  ELSE
     2057     7968    3                    ICB.ORG(ORG_TBL.ORG_MON(I)) = '1'B;
     2058     7969    3                 END;
     2059     7970    2            CASE(11);                      /* PHYSICAL                           */
     2060     7971    2              ICB.PHYSICAL = 1;
     2061     7972    2            CASE(12);                      /* RECORD SELECTION                   */
     2062     7973    2              IF KEY_AREA$=ADDR(NIL) THEN  /* First one encountered?             */
     2063     7974    2                 CALL VPD$GET_BUF(KEY_AREA$,2048) /* Get two pages for keys      */
     2064     7975    3                  WHENALTRETURN DO;
     2065     7976    3                     CALL VPL$ERR_PROC(3,0);
     2066     7977    3                     END;
     2067     7978    2              IF REC_SEL_CNT>9
     2068     7979    2               THEN
     2069     7980    3               DO;
     2070     7981    3                  CALL VPL$ERR_PROC(3,40,'06'O,,,,,1); /* ABORT and return       */
     2071     7982        /*E* ERROR:   VPF-00040
     2072     7983             MESSAGE: More than 10 record selections
     2073     7984        */
     2074     7985    3                  ALTRETURN;
     2075     7986    3                  END;
     2076     7987    2               ELSE
     2077     7988    3               DO;
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:306  
     2078     7989    3                  T$ = OPT$->OUT$BLK.SUBLK$(0);
     2079     7990    3                  ICB.REC_SEL.SPEC.TYPE(REC_SEL_CNT) = T$->OUT$BLK.CODE;
     2080     7991    3                  ICB.REC_SEL.SPEC.START.KEY$(REC_SEL_CNT) = ADDR(NIL);
     2081     7992    3                  ICB.REC_SEL.SPEC.FINISH.KEY$(REC_SEL_CNT) = ADDR(NIL);
     2082     7993    3                  IF T$->OUT$BLK.CODE = 1
     2083     7994    4                   THEN DO;                /* Logical record selection           */
     2084     7995    4                      ICB.LREC_SEL = '1'B;
     2085     7996    4                      TO_KEY$ = ADDR(ICB.REC_SEL.SPEC.START.SEQ(REC_SEL_CNT));
     2086     7997    4                      END;
     2087     7998    4                   ELSE DO;                /* Keyed record selection             */
     2088     7999    4                      ICB.KEY_SEL = '1'B;
     2089     8000    4                      TO_KEY$=KEY_AREA$;
     2090     8001    4                      END;
     2091     8002    3                  FROM_KEY$ = T$->OUT$BLK.SUBLK$(0);
     2092     8003    3                  CALL VPD$GET_KEY_OR_NUM(FROM_KEY$,TO_KEY$) ALTRET(BAD_KEY1);
     2093     8004    4                  IF ICB.REC_SEL.SPEC.TYPE(REC_SEL_CNT)=1 THEN DO;
     2094     8005    4                      ICB.REC_SEL.SPEC.START.KEY$(REC_SEL_CNT)=ADDR(NIL);
     2095     8006    4                      ICB.REC_SEL.SPEC.FINISH.KEY$(REC_SEL_CNT)=ADDR(NIL);
     2096     8007    4                      END;
     2097     8008    4                   ELSE DO;
     2098     8009    4                      ICB.REC_SEL.SPEC.START.KEY$(REC_SEL_CNT)=KEY_AREA$;
     2099     8010    4                      KEY_AREA$=PINCRC(KEY_AREA$,KEY_AREA$->TEXT$C.LEN+1);
              8010                               /* move avail ptr*/
     2100     8011    4                      END;
     2101     8012    4                  DO WHILE ('0'B);         /* Never do                           */
     2102     8013    4   BAD_KEY1:         ALTRETURN;            /* Record selection problems          */
     2103     8014    4                     END;
     2104     8015                                                /* INSURE A RANGE                     */
     2105     8016    3                  IF T$->OUT$BLK.NSUBLKS>1
     2106     8017    3                   THEN                    /* A range, not a single record       */
     2107     8018    3                     IF T$->OUT$BLK.SUBLK$(1)->OUT$BLK.CODE=5
     2108     8019    3                      THEN
     2109     8020    3                        ;                  /* Open ended range specified         */
     2110     8021    4                      ELSE DO;             /* A range end was specified          */
     2111     8022    4                         FROM_KEY$ = T$->OUT$BLK.SUBLK$(1);
     2112     8023    4                         IF ICB.REC_SEL.SPEC.TYPE(REC_SEL_CNT)=1 THEN
     2113     8024    4                            TO_KEY$=ADDR(ICB.REC_SEL.SPEC.FINISH.SEQ(REC_SEL_CNT));
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:307  
     2114     8025    4                          ELSE
     2115     8026    4                            TO_KEY$=KEY_AREA$;
     2116     8027    4                         CALL VPD$GET_KEY_OR_NUM(FROM_KEY$,TO_KEY$) ALTRET(BAD_KEY2);
     2117     8028    5                         IF ICB.REC_SEL.SPEC.TYPE(REC_SEL_CNT)=2 THEN DO;
     2118     8029    5                             ICB.REC_SEL.SPEC.FINISH.KEY$(REC_SEL_CNT)=KEY_AREA$;
     2119     8030    5                             KEY_AREA$=PINCRC(KEY_AREA$,KEY_AREA$->TEXT$C.LEN+1);
     2120     8031    5                             END;
     2121     8032    5                         DO WHILE ('0'B);  /* Never do                           */
     2122     8033    5   BAD_KEY2:                ALTRETURN;     /* Record selection problems          */
     2123     8034    5                            END;
     2124     8035    4                         I=0;
     2125     8036    4                         IF ICB.REC_SEL.SPEC.START.KEY$(REC_SEL_CNT)~=ADDR(NIL) THEN
     2126     8037    4                            IF ICB.REC_SEL.SPEC.START.KEY$(REC_SEL_CNT)->TEXT$C.STRING
     2127     8038    4                              > ICB.REC_SEL.SPEC.FINISH.KEY$(REC_SEL_CNT)->TEXT$C.
              8038                                       STRING THEN
     2128     8039    4                               I=1;
     2129     8040    4                         IF I=1 OR ICB.REC_SEL.SPEC.START.SEQ(REC_SEL_CNT) >
     2130     8041    4                           ICB.REC_SEL.SPEC.FINISH.SEQ(REC_SEL_CNT)
     2131     8042    4                          THEN
     2132     8043    5                          DO;
     2133     8044    5                             CALL VPL$ERR_PROC(3,29,'06'O,,,,,1);
     2134     8045        /*E* ERROR:   VPF-00029
     2135     8046             MESSAGE: Bad record selection range
     2136     8047        */
     2137     8048    5                             ALTRETURN;    /* BAD RECORD SELECTION RANGE         */
     2138     8049    5                             END;
     2139     8050    4                         END;
     2140     8051    3                   ELSE                    /* A single record selected           */
     2141     8052    3                     ICB.REC_SEL.SPEC.FINISH(REC_SEL_CNT) = ICB.REC_SEL.SPEC.START(
              8052                              REC_SEL_CNT);
     2142     8053    3                  REC_SEL_CNT = REC_SEL_CNT+1;
     2143     8054    3                  END;
     2144     8055    2            CASE(13);                      /* TYPE                               */
     2145     8056    2              IF OPT$->OUT$BLK.NSUBLKS>10
     2146     8057    2               THEN
     2147     8058    3               DO;
     2148     8059    3                  CALL VPL$ERR_PROC(3,32,'06'O,,,,,1); /* TOO MANY TYPES GIVEN   */
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:308  
     2149     8060        /*E* ERROR:   VPF-00032
     2150     8061             MESSAGE: More than 10 TYPE's specified
     2151     8062        */
     2152     8063        /*E* ERROR:   VPF-00033
     2153     8064             MESSAGE: TYPE greater than 2 chars
     2154     8065        */
     2155     8066    3                  ALTRETURN;
     2156     8067    3                  END;
     2157     8068    2               ELSE
     2158     8069    3               DO;
     2159     8070    3                  ICB.TYPE.COUNT = 0;
     2160     8071    3                  I=0;
     2161     8072    4                  IF OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE=99 THEN DO;
     2162     8073    4                      ICB.TYPE.NEG='1'B;
     2163     8074    4                      I=1;
     2164     8075    4                      END;
     2165     8076    4                  DO WHILE(I<OPT$->OUT$BLK.NSUBLKS);
     2166     8077    4                     T$ = OPT$->OUT$BLK.SUBLK$(I);
     2167     8078    4                     IF T$->OUT$SYM.COUNT>2
     2168     8079    4                      THEN
     2169     8080    5                      DO;
     2170     8081    5                         CALL VPL$ERR_PROC(3,33,'06'O,,,,,1);
     2171     8082    5                         ALTRETURN;        /* TYPE TOO LONG                      */
     2172     8083    5                         END;
     2173     8084    4                      ELSE
     2174     8085    4                        ICB.TYPE.STRING(ICB.TYPE.COUNT) = T$->OUT$SYM.TEXT;
     2175     8086    4                     ICB.TYPE.COUNT = ICB.TYPE.COUNT+1;
     2176     8087    4                     I=I+1;
     2177     8088    4                     END;
     2178     8089    3                  END;
     2179     8090    2            CASE(14);                      /* VOLUME                             */
     2180     8091    2              CALL VPD$TEXTC_CHARBIN(TWORD,
     2181     8092    2                OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     2182     8093    2                511) ALTRET(BAD_VOL);
     2183     8094    2              ICB.VOL = TWORD;
     2184     8095    2              GOTO GOOD_VOL;
     2185     8096    2   BAD_VOL:   CALL VPL$ERR_PROC(3,34,'06'O,,,,,1); /* VOLUME VALUE TOO LARGE     */
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:309  
     2186     8097        /*E* ERROR:   VPF-00034
     2187     8098             MESSAGE: VOLUME too large
     2188     8099        */
     2189     8100    2              ALTRETURN;
     2190     8101    2   GOOD_VOL:  ;
     2191     8102    2            CASE(15);                      /* EBCDIC                             */
     2192     8103    2              ICB.EBCDIC = %YES#;
     2193     8104    2            CASE(16);                      /* BINARY                             */
     2194     8105    2              ICB.BIN = %YES#;
     2195     8106    2            CASE(17);                      /* NBINARY                            */
     2196     8107    2              ICB.BIN = %NO#;
     2197     8108    2            CASE(18);                      /* TRANSPARENT                        */
     2198     8109    2              ICB.TRANS = %YES#;
     2199     8110    2            CASE(19);                      /* FTORGANIZATION                     */
     2200     8111    2              I = OPT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* PCL's ORG code   */
     2201     8112    2              ICB.FTORG = ORG_TBL.ORG_MON(I);
     2202     8113    2            CASE(20);                      /* BLOCK                              */
     2203     8114    2              CALL VPD$TEXTC_CHARBIN(TWORD,
     2204     8115    2                OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     2205     8116    2                32767) ALTRET(BAD_BLKL);
     2206     8117    2              ICB.BLKL = TWORD;
     2207     8118    2              GOTO GOOD_BLKL;
     2208     8119    2   BAD_BLKL:  CALL VPL$ERR_PROC(3,53,'06'O,,,,,1); /* BLKL TOO LARGE             */
     2209     8120        /*E*   ERROR: VPF-00053
     2210     8121             MESSAGE: BLOCK too large */
     2211     8122    2              ALTRETURN;
     2212     8123    2   GOOD_BLKL: ;
     2213     8124    2            CASE(21);                      /* RECL                               */
     2214     8125    2              CALL VPD$TEXTC_CHARBIN(TWORD,
     2215     8126    2                OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     2216     8127    2                262143) ALTRET(BAD_RECL);
     2217     8128    2              ICB.RECL = TWORD;
     2218     8129    2              GOTO GOOD_RECL;
     2219     8130    2   BAD_RECL:  CALL VPL$ERR_PROC(3,54,'06'O,,,,,1); /* RECL TOO LARGE             */
     2220     8131        /*E*   ERROR: VPF-00054
     2221     8132             MESSAGE: RECLENGTH too large */
     2222     8133    2              ALTRETURN;
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:310  
     2223     8134    2   GOOD_RECL: ;
     2224     8135    2            CASE(22);                      /* NSPANNED                           */
     2225     8136    2              ICB.NSPAN = %YES#;
     2226     8137    2            CASE(23);                      /* NBLOCKED                           */
     2227     8138    2              ICB.NBLOCK = %YES#;
     2228     8139    2            CASE(24);                      /* DATE                               */
     2229     8140    2              ICB.DATE.TYPE = OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE;
     2230     8141    2              ICB.DATE.RELATION = OPT$->OUT$BLK.SUBLK$(1)->OUT$BLK.CODE;
     2231     8142    2              CALL VPD$PROCESS_DATE(OPT$->OUT$BLK.SUBLK$(2),DATE_TYPE,
     2232     8143    2                ICB.DATE.UTS,ICB.DATE.ROUNDING_TYPE) ALTRET(BAD_SEL_DATE);
     2233     8144    3              DO CASE(DATE_TYPE);
     2234     8145    3               CASE(1,5,6);                /* Selection date is specified        */
     2235     8146    3                 CALL M$TIME(FPT_MAKE_TIME); /* Turn UTS into ICB.DATE.TEXT      */
     2236     8147    3               CASE(2);                    /* Selection date is TODAY            */
     2237     8148    3                 ICB.DATE.TEXT = 'TODAY';  /* Text for DEL confirmation          */
     2238     8149    3               CASE(3);                    /* Selection date is NEVER            */
     2239     8150    3                 ICB.DATE.UTS = BITBIN('777777777777'O);
     2240     8151    3                 ICB.DATE.TEXT = 'NEVER';  /* Text for DEL confirmation          */
     2241     8152    3               CASE(4);                    /* Selection date is NOW              */
     2242     8153    3                 ICB.DATE.TEXT = 'NOW';    /* Text for DEL confirmation          */
     2243     8154    3               END;                        /* End DO CASE selection date         */
     2244     8155    3              DO WHILE ('0'B);             /* NEVER DO                           */
     2245     8156    3   BAD_SEL_DATE: CALL VPL$ERR_PROC(3,58,'06'O,,,,,1);
     2246     8157        /*E*   ERROR: VPF-00058
     2247     8158             MESSAGE: Bad file selection date
     2248     8159        */
     2249     8160    3                 ALTRETURN;
     2250     8161    3                 END;
     2251     8162    2            CASE(25);                      /* SRCHCOND specified                 */
     2252     8163    3              DO I = 0 TO (OPT$ -> OUT$BLK.NSUBLKS -1);
     2253     8164    4                 DO CASE(OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$BLK.CODE);
     2254     8165    4                  CASE(1);
     2255     8166    4                    ICB.SRCHCOND.DELF = %YES#;
     2256     8167    4                  CASE(2);
     2257     8168    4                    ICB.SRCHCOND.NOLIST = %YES#;
     2258     8169    4                  CASE(3);
     2259     8170    4                    ICB.SRCHCOND.BUF = %YES#;
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:311  
     2260     8171    4                  CASE(4);
     2261     8172    4                    ICB.SRCHCOND.BAD = %YES#;
     2262     8173    4                  CASE(5);
     2263     8174    4                    ICB.SRCHCOND.ANYF = %YES#;
     2264     8175    4                  CASE(6);
     2265     8176    4                    ICB.SRCHCOND.REV = %YES#;
     2266     8177    4                  CASE(7);
     2267     8178    4                    ICB.SRCHCOND.QS = %YES#;
     2268     8179    4                  CASE(8);
     2269     8180    4                    ICB.SRCHCOND.ARCHIVE = %YES#;
     2270     8181    4                  END;                     /* END CASE                           */
     2271     8182    3                 END;
     2272     8183    2            CASE(26);                      /* FFID                               */
     2273     8184    2              ICB.FFID = '1'B;
     2274     8185    2            CASE(27);                      /* NHEAD option                       */
     2275     8186    2              ICB.HEAD_OPT = 1;
     2276     8187    2            CASE(28);                      /* HEAD option                        */
     2277     8188    2              ICB.HEAD_OPT = 2;
     2278     8189    2            CASE(29);                      /* CREATOR select option              */
     2279     8190    2              I=0;
     2280     8191    3              IF OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE=99 THEN DO;
     2281     8192    3                  I=1;
     2282     8193    3                  ICB.CREATOR_NEG = '1'B;
     2283     8194    3                  END;
     2284     8195    2              IF OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.TEXT = 'ME'
     2285     8196    2                OR OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.TEXT = 'me'
     2286     8197    2               THEN
     2287     8198    3               DO;
     2288     8199    3                  ICB.CREATOR_SEL = 1;
     2289     8200    3                  ICB.CREATOR.TEXT = 'you';
     2290     8201    3                  ICB.CREATOR.C = 3;
     2291     8202    3                  GOTO CREATOR_DONE;
     2292     8203    3                  END;
     2293     8204    2              IF NOT B$JIT$ -> B$JIT.PRIV.ACTIVE & %PR_FMSEC#
     2294     8205    2               THEN
     2295     8206    3               DO;
     2296     8207    3                  CALL VPL$ERR_PROC(3,37,'06'O,,,,,1); /* ABORT and return       */
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:312  
     2297     8208        /*E* ERROR:   VPF-00037
     2298     8209             MESSAGE: Arbitrary CREATOR selection requires FMSEC PRIV turned on
     2299     8210        */
     2300     8211    3                  ALTRETURN;
     2301     8212    3                  END;
     2302     8213    2              IF OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.COUNT > 21
     2303     8214    2               THEN
     2304     8215    2                 GOTO BAD_CREATOR;
     2305     8216    2              CALL INDEX (J,',',OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.TEXT)
     2306     8217    3               WHENALTRETURN DO;
     2307     8218    3   BAD_CREATOR:   ;
     2308     8219    3                  CALL VPL$ERR_PROC(3,35,'06'O,,,,,1); /* ABORT and return       */
     2309     8220        /*E* ERROR:   VPF-00035
     2310     8221             MESSAGE: Bad CREATOR
     2311     8222        */
     2312     8223    3                  ALTRETURN;
     2313     8224    3                  END;
     2314     8225    2              ICB.CREATOR.C = OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.COUNT;
     2315     8226    2              ICB.CREATOR.TEXT = OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.TEXT;
     2316     8227    2              ICB.CREATOR_SEL = 2;
     2317     8228    2   CREATOR_DONE: ;
     2318     8229    2            CASE(30);                      /* Input files in SORTED order        */
     2319     8230    2              ICB.SORTING_ORDER.COUNT = OPT$ -> OUT$BLK.NSUBLKS;
     2320     8231    3              DO I=0 TO (OPT$ -> OUT$BLK.NSUBLKS -1);
     2321     8232    3                 T$ = OPT$ -> OUT$BLK.SUBLK$(I);
     2322     8233    3                 J = T$ -> OUT$BLK.NSUBLKS;
     2323     8234    3                 ICB.SORTING_ORDER.FIELD.TYPE(I) =
     2324     8235    3                   T$ -> OUT$BLK.SUBLK$(J-1) -> OUT$BLK.CODE;
     2325     8236    3                 IF J=2
     2326     8237    3                  THEN                     /* ASC/DESC order specified           */
     2327     8238    3                    IF T$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE = 1
     2328     8239    3                     THEN
     2329     8240    3                       ICB.SORTING_ORDER.FIELD.DESCENDING(I) = '1'B;
     2330     8241    3                 END;                      /* END CASE                           */
     2331     8242    2            CASE(31);                      /* CLOSE POSITION option              */
     2332     8243    2              ICB.CLPOS = OPT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE;
     2333     8244    2            CASE(32);                      /* FATTRIBUTES                        */
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:313  
     2334     8245    2              ICB.A_EA_C = 5;
     2335     8246    2            CASE(33);                      /* IOERROK                            */
     2336     8247    2              ICB.FLAVOR.IOERROK = %YES#;
     2337     8248    2            CASE(34);                      /* NIOERROK                           */
     2338     8249    2              ICB.FLAVOR.IOERROK = %NO#;
     2339     8250    2            CASE(35);                      /* IGNOREFSN                          */
     2340     8251    2              ICB.IGNOREFSN = %YES#;
     2341     8252    2            CASE(36);                      /* NIGNOREFSN                         */
     2342     8253    2              ICB.IGNOREFSN = %NO#;
     2343     8254    2            CASE(37);                      /* ANSISPAN                           */
     2344     8255    2              ICB.ANSISPAN = %YES#;
     2345     8256    2              ANSISPAN_OPT = %YES#;
     2346     8257    2            CASE(38);                      /* NANSISPAN                          */
     2347     8258    2              ICB.ANSISPAN = %YES#;
     2348     8259    2              ANSISPAN_OPT = %NO#;
     2349     8260    2            CASE(%(MAX_IN_OP#+1));         /* SPARE1 for PATCHING only           */
     2350     8261    2              ;
     2351     8262    2            CASE(%(MAX_IN_OP#+2));         /* SPARE2                             */
     2352     8263    2              ;
     2353     8264    2            CASE(%(MAX_IN_OP#+3));         /* SPARE3                             */
     2354     8265    2              ;
     2355     8266    2            END;                           /* END CASE                           */
     2356     8267    1           RETURN;
     2357     8268    1   END VPF$PROCESS_INPUT_OPT;
     2358     8269        %EOD;

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:314  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$PROCESS_INPUT_OPT.

   Procedure VPF$PROCESS_INPUT_OPT requires 1070 words for executable code.
   Procedure VPF$PROCESS_INPUT_OPT requires 20 words of local(AUTO) storage.

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:315  

 Object Unit name= VPF$PROCESS_INPUT_OPT                      File name= VPF$SRCLST.:E05TOU
 UTS= JUL 30 '97 07:40:27.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS    220    334  VPF$PROCESS_INPUT_OPT
   11   Data  even  none    14     16  VPF$PROCESS_INPUT_OPT
   12   Proc  even  none  1070   2056  VPF$PROCESS_INPUT_OPT
   13  RoData even  none    79    117  VPF$PROCESS_INPUT_OPT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        1  VPF$PROCESS_INPUT_OPT
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:316  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       8 VPL$ERR_PROC
 yes     yes           Std       4 VPD$TEXTC_CHARBIN
 yes     yes           Std       2 VPD$MNG_CRPT
 yes     yes           Std       2 VPD$GET_BUF
 yes     yes           Std       2 VPD$GET_KEY_OR_NUM
 yes     yes           Std       4 VPD$PROCESS_DATE
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CON_DUP_TBL                           REC_SEL_CNT
     BREAK_LOC                             BREAK_MESSAGE_REPORTER                CMD_MASK
     SPEC_BUF                              IN_RES                                ANSISPAN_OPT
     ICB                              r    ORG_TBL                               KEY_AREA$
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
     B$JIT$                                RESULTS_FID_IN                        B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:317  


     1671        1        /*T***********************************************************/
     1672        2        /*T*                                                         */
     1673        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1674        4        /*T*                                                         */
     1675        5        /*T***********************************************************/
     1676        6        VPF$PROCESS_INPUT_OPT: PROC(OPT$) ALTRET;

      6 12 000000   000000 700200 xent  VPF$PROCESS* TSX0  ! X66_AUTO_1
        12 000001   000024 000001                    ZERO    20,1

     1677        7        /*I* NAME: VPF$PROCESS_INPUT_OPT
     1678        8             PURPOSE: To validate and store into ICB the current option.
     1679        9             CALL: CALL VPF$PROCESS_INPUT_OPT(OPT$) ALTRET(BAD_OPTION);
     1680       10             DESCRIPTION: This procedure checks the current input option specified
     1681       11                          against CON_DUP_TBL to check if it is a conflicting or
     1682       12                          duplicate input option and against OPT_TBL to check if it is
     1683       13                          a valid option for this command and/or device type. If all of
     1684       14                          these checks are passed, the option is further processed for
     1685       15                          specific requirements and placed into ICB. The RET_VAL is
     1686       16                          set to 2 if an option is in error in any way.
     1687       17        */
     1688       18        /**/
     1689       19        /*  LOCAL AUTO  */
     1690       20        /**/
     1691       21    1   DCL OPT$ PTR;
     1692       22    1   DCL OPT_CODE SBIN WORD;
     1693       23    1   DCL TWORD UBIN WORD;
     1694       24    1   DCL T$ PTR;
     1695       25    1   DCL TO_KEY$ PTR;
     1696       26    1   DCL FROM_KEY$ PTR;
     1697       27    1   DCL I UBIN WORD;                        /* Temp. counter                      */
     1698       28    1   DCL J SBIN WORD;                        /* Temp.                              */
     1699       29        %INCLUDE B$JIT;
     1700      319        %INCLUDE VP_DATA_R;
     1701     7306        /**/
     1702     7307        /*  LOCAL CONSTANTS  */
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:318  
     1703     7308        /**/
     1704     7309    1   DCL 1 OPT_TBL(0:%(MAX_IN_OP#+3)) CONSTANT,
     1705     7310                /*K* OPT_TBL.  Indexed by option code number from the parser (the
     1706     7311                 0th entry is trash), this table determines if the option is legal
     1707     7312                 for the command and input device, selects the error code if it
     1708     7313                 is not legal, and checks for duplicate and conflicting options       */
     1709     7314    1         2 CMD,
     1710     7315    1           3 ERR_CODE SBIN WORD INIT(0,
     1711     7316                    /*K* CMD.ERR_CODE VALUE-DEC. This is the error code number to
     1712     7317                     use if the option is not legal for this command.                 */
     1713     7318    1             26, 9, 0,36, 9,
     1714     7319    1              0, 9, 0, 0, 0,
     1715     7320    1              0, 8, 0, 0,42,
     1716     7321    1             44,44,44,47,49,
     1717     7322    1             50,51,52, 0,59,
     1718     7323    1              9,28,28, 0, 0,
     1719     7324    1             62, 9,65,65,66,
     1720     7325    1             66,270,270,
     1721     7326    1              0, 0, 0),                    /* SPARE for PATCHING only            */
     1722     7327        /*E* ERROR:   VPF-00008
     1723     7328             MESSAGE: Record selection not allowed this command
     1724     7329        */
     1725     7330        /*E* ERROR:   VPF-00009
     1726     7331             MESSAGE: A, EA, FA, COLS, or FFID not allowed this command
     1727     7332        */
     1728     7333        /*E*   ERROR: VPF-00036
     1729     7334             MESSAGE: CRPT not allowed this command
     1730     7335        */
     1731     7336        /*E*   ERROR: VPF-00026
     1732     7337             MESSAGE: SHARE not allowed this command
     1733     7338        */
     1734     7339        /*E*   ERROR: VPF-00042
     1735     7340             MESSAGE: EBCDIC not allowed this command
     1736     7341        */
     1737     7342        /*E*   ERROR: VPF-00044
     1738     7343             MESSAGE: BINARY,NBINARY or TRANSPARENT option not allowed this command
     1739     7344        */
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:319  
     1740     7345        /*E*   ERROR: VPF-00047
     1741     7346             MESSAGE: FTORGANIZATION not allowed this command
     1742     7347        */
     1743     7348        /*E*   ERROR: VPF-00049
     1744     7349             MESSAGE: BLOCK not allowed this command
     1745     7350        */
     1746     7351        /*E*   ERROR: VPF-00050
     1747     7352             MESSAGE: RECLENGTH not allowed this command
     1748     7353        */
     1749     7354        /*E*   ERROR: VPF-00051
     1750     7355             MESSAGE: NSPANNED not allowed this command
     1751     7356        */
     1752     7357        /*E*   ERROR: VPF-00052
     1753     7358             MESSAGE: NBLOCKED not allowed this command
     1754     7359        */
     1755     7360        /*E*   ERROR: VPF-00059
     1756     7361             MESSAGE: SRCHCOND not allowed for this command
     1757     7362        */
     1758     7363        /*E*   ERROR: VPF-00028
     1759     7364             MESSAGE: HEAD/NHEAD not allowed for this command
     1760     7365        */
     1761     7366        /*E*   ERROR: VPF-00062
     1762     7367             MESSAGE: CLPOS not allowed for this command
     1763     7368        */
     1764     7369        /*E*   ERROR: VPF-00065
     1765     7370             MESSAGE: IOERROR/NIOERROR not allowed for this command
     1766     7371        */
     1767     7372        /*E*   ERROR: VPF-00066
     1768     7373             MESSAGE: IGNOREFSN/NIGNOREFSN not allowed for this command
     1769     7374        */
     1770     7375        /*E*   ERROR: VPF-00270
     1771     7376             MESSAGE: ANSISPAN/NANSISPAN not allowed for this command
     1772     7377        */
     1773     7378
     1774     7379    1           3 ALLOWED BIT(36) UNAL
     1775     7380    1             INIT('0'O,
     1776     7381                    /*K* CMD.ALLOWED VALUE-BIT(36). This is a mask used to determine
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:320  
     1777     7382                     whether or not the option is legal with the command.  A '1'B
     1778     7383                     in the appropriate bit position indicates that the option is OK.
     1779     7384                     This format is suitable for ANDing with CMD_MASK.  Some commands
     1780     7385                     of interest are:
     1781     7386                         OCTAL VALUE        COMMAND
     1782     7387                         -----------        -------
     1783     7388                         20000              COPY
     1784     7389                         10000              COPYALL
     1785     7390                          4000              COPYSTD
     1786     7391                            40              LIST                                      */
     1787     7392    1             '341040000'O,'000700002'O,'777777777'O,'340100002'O,'000700000'O,
     1788     7393    1             '777777777'O,'000700002'O,'777777777'O,'777777777'O,'777777777'O,
     1789     7394    1             '777777777'O,'341000000'O,'777777777'O,'777777777'O,'340000000'O,
     1790     7395    1             '340000000'O,'340000000'O,'340000000'O,'340000000'O,'340000000'O,
     1791     7396    1             '340000000'O,'340000000'O,'340000000'O,'777777777'O,'777777777'O,
     1792     7397    1             '000700002'O,'340000000'O,'340000000'O,'777777777'O,'777777777'O,
     1793     7398    1             '240000000'O,'000700002'O,'340400000'O,'340400000'O,'340400000'O,
     1794     7399    1             '340400000'O,'340400000'O,'340400000'O,
     1795     7400    1   '000000000'O,'000000000'O,'000000000'O), /* SPARE for PATCHING ONLY           */
     1796     7401    1         2 CON_DUP_IDX UBIN BYTE UNAL INIT(0,
     1797     7402                    /*K* CON_DUP_IDX VALUE-DEC. This is is an index into CON_DUP_TBL,
     1798     7403                     a binary array.  When an option is used, that entry in the array
     1799     7404                     is set.  Subsequent attempts to use a set bit indicate that a
     1800     7405                     duplicate exists.  Conflicting options are done the same way.  If
     1801     7406                     CON_DUP_IDX is 0, no conflict is possible and duplicates are OK. */
     1802     7407    1            0, 2, 3, 4, 2,
     1803     7408    1            5, 2, 1, 6, 7,
     1804     7409    1            8, 0,20,10,11,
     1805     7410    1           12,12, 9,13,14,
     1806     7411    1           15,16,17,18,19,
     1807     7412    1            0,21,21,22,23,
     1808     7413    1           24, 2,33,33,35,
     1809     7414    1           35,22,0,
     1810     7415    1            0, 0, 0),                      /* SPARE for PATCHING ONLY            */
     1811     7416    1         2 DEV,
     1812     7417    1           3 ALLOWED BIT(9) UNAL INIT('0'O,
     1813     7418                    /*K* DEV.ALLOWED VALUE-BIT(9). This is a mask used to determine
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:321  
     1814     7419                     whether or not the option is legal with the device.  A '1'B
     1815     7420                     in the appropriate bit position indicates that the option is OK.
     1816     7421                     This format is suitable for ANDing with ICB.DEV_MASK.  Device
     1817     7422                     codes are:
     1818     7423                         OCTAL VALUE        DEVICE
     1819     7424                         -----------        -------
     1820     7425                                400            Default. Denotes COMGROUP or
     1821     7426                                               non-tape device.
     1822     7427                                200            Managed disk.
     1823     7428                                100            Managed tape.
     1824     7429                                040            Device tape.
     1825     7430        */
     1826     7431    1             '200'O,'777'O,'100'O,'200'O,'777'O,
     1827     7432    1             '040'O,'777'O,'140'O,'140'O,'300'O,
     1828     7433    1             '100'O,'777'O,'300'O,'140'O,'040'O,
     1829     7434    1             '440'O,'440'O,'440'O,'140'O,'140'O,
     1830     7435    1             '140'O,'040'O,'040'O,'300'O,'300'O,
     1831     7436    1             '200'O,'777'O,'777'O,'300'O,'200'O,
     1832     7437    1             '140'O,'777'O,'140'O,'140'O,'100'O,
     1833     7438    1             '100'O,'100'O,'100'O,
     1834     7439    1             '000'O,'000'O,'000'O),        /* SPARE for PATCHING ONLY            */
     1835     7440    1           3 ERR_CODE SBIN WORD INIT(0,
     1836     7441                    /*K* DEV.ERR_CODE VALUE-DEC. This is the error code number to
     1837     7442                     use if the option is not legal for this device.                  */
     1838     7443    1             27, 0,11,12, 0,
     1839     7444    1             13, 0,10,14,15,
     1840     7445    1             16, 0,17,18,43,
     1841     7446    1             45,45,45,48,48,
     1842     7447    1             48,64,64,57,60,
     1843     7448    1              0, 0, 0,31,61,
     1844     7449    1             38, 0,66,66,67,
     1845     7450    1             67,271,271,
     1846     7451    1              0, 0, 0);                    /* SPARE for PATCHING ONLY            */
     1847     7452        /*E* ERROR:   VPF-00010
     1848     7453             MESSAGE: NCNVRT allowed for tapes only.
     1849     7454        */
     1850     7455        /*E* ERROR:   VPF-00011
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:322  
     1851     7456             MESSAGE: CATENATE allowed for labeled tape only
     1852     7457        */
     1853     7458        /*E* ERROR:   VPF-00012
     1854     7459             MESSAGE: CRPT allowed for disk files only
     1855     7460        */
     1856     7461        /*E* ERROR:   VPF-00013
     1857     7462             MESSAGE: DEOD not allowed
     1858     7463        */
     1859     7464        /*E* ERROR:   VPF-00014
     1860     7465             MESSAGE: FSN allowed on tape only
     1861     7466        */
     1862     7467        /*E* ERROR:   VPF-00015
     1863     7468             MESSAGE: File selection by ORG allowed on managed files only
     1864     7469        */
     1865     7470        /*E* ERROR:   VPF-00016
     1866     7471             MESSAGE: PHYSICAL allowed on managed tape only
     1867     7472        */
     1868     7473        /*E* ERROR:   VPF-00017
     1869     7474             MESSAGE: File selection by TYPE allowed on managed files only
     1870     7475        */
     1871     7476        /*E* ERROR:   VPF-00018
     1872     7477             MESSAGE: VOLUME allowed on tape only
     1873     7478        */
     1874     7479        /*E*   ERROR: VPF-00027
     1875     7480             MESSAGE: SHARE allowed for disk files only
     1876     7481        */
     1877     7482        /*E*   ERROR: VPF-00043
     1878     7483             MESSAGE: EBCDIC allowed for free tape only
     1879     7484        */
     1880     7485        /*E*   ERROR: VPF-00045
     1881     7486             MESSAGE: BINARY,NBINARY or TRANSPARENT input option allowed for devices only
     1882     7487        */
     1883     7488        /*E*   ERROR: VPF-00048
     1884     7489             MESSAGE: FTORGANIZATION,BLOCK, or RECLENGTH allowed for tapes only
     1885     7490        */
     1886     7491        /*E*   ERROR: VPF-00064
     1887     7492             MESSAGE: NSPANNED or NBLOCKED allowed for FT only
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:323  
     1888     7493        */
     1889     7494        /*E*   ERROR: VPF-00057
     1890     7495             MESSAGE: File selection by DATE on managed files only
     1891     7496        */
     1892     7497        /*E*   ERROR: VPF-00060
     1893     7498             MESSAGE: SRCHCOND is only valid for managed files
     1894     7499        */
     1895     7500        /*E*   ERROR: VPF-00031
     1896     7501             MESSAGE: CREATOR is only valid for managed files
     1897     7502        */
     1898     7503        /*E*   ERROR: VPF-00061
     1899     7504             MESSAGE: File selection in SORTED order is only valid on disk files.
     1900     7505        */
     1901     7506        /*E*   ERROR: VPF-00038
     1902     7507             MESSAGE: CLPOS option only valid for tapes.
     1903     7508        */
     1904     7509        /*E*   ERROR: VPF-00068
     1905     7510             MESSAGE: IOERROK or NIOERROK allowed for tape only
     1906     7511        */
     1907     7512        /*E*   ERROR: VPF-00067
     1908     7513             MESSAGE: IGNOREFSN or NIGNOREFSN allowed for managed tape only
     1909     7514        */
     1910     7515        /*E*   ERROR: VPF-00271
     1911     7516             MESSAGE: ANSISPAN and NANSISPAN are valid for labelled tape only
     1912     7517        */
     1913     7518
     1914     7519        /**/
     1915     7520        /*  BASED  */
     1916     7521        /**/
     1917     7522        %PARSE$OUT(NAME=OUT$BLK,STCLASS=BASED);
     1918     7567        %PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
     1919     7605    1   DCL 1 TEXT$C BASED,
     1920     7606    1         2 LEN UBIN BYTE UNAL,
     1921     7607    1         2 STRING CHAR(TEXT$C.LEN);
     1922     7608        /**/
     1923     7609        /*  LOCAL STATIC  */
     1924     7610        /**/
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:324  
     1925     7611    1   DCL DATE_TYPE UBIN STATIC;
     1926     7612        %FPT_TIME (FPTN = FPT_MAKE_TIME,
     1927     7613                   STCLASS = STATIC,
     1928     7614                   SOURCE = UTS,
     1929     7615                   DEST = EXT,
     1930     7616                   TSTAMP = ICB.DATE.UTS,
     1931     7617                   DATE = ICB.DATE.TEXT);
     1932     7636        /**/
     1933     7637        /*  ENTRY DCLS  */
     1934     7638        /**/
     1935     7639        %VP_ENTRIES (OMIT=VPF$PROCESS_INPUT_OPT);
     1936     7847        /**/
     1937     7848    1           OPT_CODE = OPT$->OUT$BLK.CODE;

   7848 12 000002   200003 470500                    LDP0    @OPT$,,AUTO
        12 000003   000000 471500                    LDP1    0,,PR0
        12 000004   100000 236100                    LDQ     0,,PR1
        12 000005   777777 376007                    ANQ     -1,DL
        12 000006   200004 756100                    STQ     OPT_CODE,,AUTO

     1938     7849    1           IF CON_DUP_TBL(OPT_TBL.CON_DUP_IDX(OPT_CODE)) AND

   7849 12 000007   000005 402007                    MPY     5,DL
        12 000010   000002 236006 10                 LDQ     OPT_TBL+2,QL
        12 000011   000033 772000                    QRL     27
        12 000012   000000 066406                    CMPB    filb='0'B
        12 000013   000000 000001 xsym               BDSC    CON_DUP_TBL,Q            by=0,bit=0,n=1
        12 000014   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
        12 000015   000043 600000 12                 TZE     s:7859
        12 000016   200004 236100                    LDQ     OPT_CODE,,AUTO
        12 000017   000005 402007                    MPY     5,DL
        12 000020   000002 236006 10                 LDQ     OPT_TBL+2,QL
        12 000021   777000 316003                    CANQ    -512,DU
        12 000022   000043 600000 12                 TZE     s:7859

     1939     7850    1             OPT_TBL.CON_DUP_IDX(OPT_CODE)~=0
     1940     7851    1            THEN
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:325  
     1941     7852    2            DO;

     1942     7853    2               CALL VPL$ERR_PROC(3,19,'06'O,,,,,1); /* CONFLICTING OR DUPLICATE  */

   7853 12 000023   000002 236000 13                 LDQ     2
        12 000024   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000025   200022 757100                    STAQ    J+8,,AUTO
        12 000026   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000027   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000030   200020 757100                    STAQ    J+6,,AUTO
        12 000031   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000032   000003 235000 13                 LDA     3
        12 000033   200016 757100                    STAQ    J+4,,AUTO
        12 000034   000004 237000 13                 LDAQ    4
        12 000035   200014 757100                    STAQ    J+2,,AUTO
        12 000036   200014 630500                    EPPR0   J+2,,AUTO
        12 000037   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000040   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000041   000000 011000                    NOP     0

     1943     7854        /*E* ERROR:   VPF-00019
     1944     7855             MESSAGE: Duplicate or conflicting input option
     1945     7856        */
     1946     7857    2               ALTRETURN;                  /* INPUT OPTION                       */

   7857 12 000042   000000 702200 xent               TSX2  ! X66_AALT

     1947     7858    2               END;
     1948     7859    1           IF NOT (OPT_TBL.CMD.ALLOWED(OPT_CODE) & CMD_MASK)

   7859 12 000043   000100 100400                    MLR     fill='000'O
        12 000044   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        12 000045   200014 000010                    ADSC9   J+2,,AUTO                cn=0,n=8
        12 000046   200004 236100                    LDQ     OPT_CODE,,AUTO
        12 000047   000005 402007                    MPY     5,DL
        12 000050   000001 235006 10                 LDA     OPT_TBL+1,QL
        12 000051   000000 236003                    LDQ     0,DU
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:326  
        12 000052   200014 377100                    ANAQ    J+2,,AUTO
        12 000053   000077 601000 12                 TNZ     s:7865

     1949     7860    1            THEN
     1950     7861    2            DO;

     1951     7862    2               CALL VPL$ERR_PROC(3,OPT_TBL.CMD.ERR_CODE(OPT_CODE),'06'O,,,,,1);

   7862 12 000054   000002 236000 13                 LDQ     2
        12 000055   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000056   200022 757100                    STAQ    J+8,,AUTO
        12 000057   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000060   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000061   200020 757100                    STAQ    J+6,,AUTO
        12 000062   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000063   000003 235000 13                 LDA     3
        12 000064   200016 757100                    STAQ    J+4,,AUTO
        12 000065   200004 236100                    LDQ     OPT_CODE,,AUTO
        12 000066   000005 402003                    MPY     5,DU
        12 000067   000006 036000 13                 ADLQ    6
        12 000070   000004 235000 13                 LDA     4
        12 000071   200014 757100                    STAQ    J+2,,AUTO
        12 000072   200014 630500                    EPPR0   J+2,,AUTO
        12 000073   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000074   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000075   000000 011000                    NOP     0

     1952     7863    2               ALTRETURN;

   7863 12 000076   000000 702200 xent               TSX2  ! X66_AALT

     1953     7864    2               END;
     1954     7865    1           IF NOT (OPT_TBL.DEV.ALLOWED(OPT_CODE) & ICB.DEV_MASK

   7865 12 000077   000171 236000 xsym               LDQ     ICB+121
        12 000100   777000 376003                    ANQ     -512,DU
        12 000101   200014 756100                    STQ     J+2,,AUTO
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:327  
        12 000102   200004 236100                    LDQ     OPT_CODE,,AUTO
        12 000103   000005 402007                    MPY     5,DL
        12 000104   000003 236006 10                 LDQ     OPT_TBL+3,QL
        12 000105   777000 376003                    ANQ     -512,DU
        12 000106   200014 376100                    ANQ     J+2,,AUTO
        12 000107   000136 601000 12                 TNZ     s:7872
        12 000110   000000 236000 xsym               LDQ     IN_RES
        12 000111   000322 116000 10                 CMPQ    OPT_TBL+210
        12 000112   000136 600000 12                 TZE     s:7872

     1955     7866    1             OR IN_RES = 'NO  ' )          /* Device NO has all options legal    */
     1956     7867    1            THEN
     1957     7868    2            DO;

     1958     7869    2               CALL VPL$ERR_PROC(3,OPT_TBL.DEV.ERR_CODE(OPT_CODE),'06'O,,,,,1);

   7869 12 000113   000002 236000 13                 LDQ     2
        12 000114   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000115   200022 757100                    STAQ    J+8,,AUTO
        12 000116   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000117   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000120   200020 757100                    STAQ    J+6,,AUTO
        12 000121   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000122   000003 235000 13                 LDA     3
        12 000123   200016 757100                    STAQ    J+4,,AUTO
        12 000124   200004 236100                    LDQ     OPT_CODE,,AUTO
        12 000125   000005 402003                    MPY     5,DU
        12 000126   000007 036000 13                 ADLQ    7
        12 000127   000004 235000 13                 LDA     4
        12 000130   200014 757100                    STAQ    J+2,,AUTO
        12 000131   200014 630500                    EPPR0   J+2,,AUTO
        12 000132   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000133   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000134   000000 011000                    NOP     0

     1959     7870    2               ALTRETURN;

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:328  
   7870 12 000135   000000 702200 xent               TSX2  ! X66_AALT

     1960     7871    2               END;
     1961     7872    1           CON_DUP_TBL(OPT_TBL.CON_DUP_IDX(OPT_CODE)) = '1'B;

   7872 12 000136   200004 236100                    LDQ     OPT_CODE,,AUTO
        12 000137   000005 402007                    MPY     5,DL
        12 000140   000002 236006 10                 LDQ     OPT_TBL+2,QL
        12 000141   000033 772000                    QRL     27
        12 000142   003006 060400                    CSL     bolr='003'O
        12 000143   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
        12 000144   000000 000001 xsym               BDSC    CON_DUP_TBL,Q            by=0,bit=0,n=1

     1962     7873    2           DO CASE(OPT_CODE);

   7873 12 000145   200004 235100                    LDA     OPT_CODE,,AUTO
        12 000146   000047 115007                    CMPA    39,DL
        12 000147   000151 602005 12                 TNC     s:7873+4,AL
        12 000150   002055 710000 12                 TRA     s:8267
        12 000151   002055 710000 12                 TRA     s:8267
        12 000152   000220 710000 12                 TRA     s:7875
        12 000153   000223 710000 12                 TRA     s:7877
        12 000154   000226 710000 12                 TRA     s:7879
        12 000155   000267 710000 12                 TRA     s:7891
        12 000156   000321 710000 12                 TRA     s:7900
        12 000157   000365 710000 12                 TRA     s:7914
        12 000160   000370 710000 12                 TRA     s:7916
        12 000161   000373 710000 12                 TRA     s:7918
        12 000162   000376 710000 12                 TRA     s:7920
        12 000163   000524 710000 12                 TRA     s:7962
        12 000164   000565 710000 12                 TRA     s:7971
        12 000165   000570 710000 12                 TRA     s:7973
        12 000166   001076 710000 12                 TRA     s:8056
        12 000167   001220 710000 12                 TRA     s:8091
        12 000170   001261 710000 12                 TRA     s:8103
        12 000171   001264 710000 12                 TRA     s:8105
        12 000172   001267 710000 12                 TRA     s:8107
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:329  
        12 000173   001271 710000 12                 TRA     s:8109
        12 000174   001274 710000 12                 TRA     s:8111
        12 000175   001306 710000 12                 TRA     s:8114
        12 000176   001346 710000 12                 TRA     s:8125
        12 000177   001406 710000 12                 TRA     s:8136
        12 000200   001411 710000 12                 TRA     s:8138
        12 000201   001414 710000 12                 TRA     s:8140
        12 000202   001516 710000 12                 TRA     s:8163
        12 000203   001602 710000 12                 TRA     s:8184
        12 000204   001605 710000 12                 TRA     s:8186
        12 000205   001610 710000 12                 TRA     s:8188
        12 000206   001613 710000 12                 TRA     s:8190
        12 000207   001746 710000 12                 TRA     s:8230
        12 000210   002021 710000 12                 TRA     s:8243
        12 000211   002027 710000 12                 TRA     s:8245
        12 000212   002032 710000 12                 TRA     s:8247
        12 000213   002035 710000 12                 TRA     s:8249
        12 000214   002040 710000 12                 TRA     s:8251
        12 000215   002043 710000 12                 TRA     s:8253
        12 000216   002045 710000 12                 TRA     s:8255
        12 000217   002051 710000 12                 TRA     s:8258

     1963     7874    2            CASE(1);                       /* SHARE                              */

     1964     7875    2              ICB.SHARE = %ALL#;

   7875 12 000220   000001 236007                    LDQ     1,DL
        12 000221   000006 756000 xsym               STQ     ICB+6
        12 000222   002055 710000 12                 TRA     s:8267

     1965     7876    2            CASE(2);                       /* ATTRIBUTES                         */

     1966     7877    2              ICB.A_EA_C = 3;

   7877 12 000223   000003 236007                    LDQ     3,DL
        12 000224   000014 756000 xsym               STQ     ICB+12
        12 000225   002055 710000 12                 TRA     s:8267
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:330  

     1967     7878    2            CASE(3);                       /* CATENATE                           */

     1968     7879    2              CALL VPD$TEXTC_CHARBIN(TWORD,

   7879 12 000226   000000 471500                    LDP1    0,,PR0
        12 000227   100003 473500                    LDP3    3,,PR1
        12 000230   000011 236000 13                 LDQ     9
        12 000231   200016 756100                    STQ     J+4,,AUTO
        12 000232   300003 631500                    EPPR1   3,,PR3
        12 000233   200015 451500                    STP1    J+3,,AUTO
        12 000234   200005 633500                    EPPR3   TWORD,,AUTO
        12 000235   200014 453500                    STP3    J+2,,AUTO
        12 000236   200014 630500                    EPPR0   J+2,,AUTO
        12 000237   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000240   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        12 000241   000246 702000 12                 TSX2    BAD_CAT

     1969     7880    2                OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     1970     7881    2                128) ALTRET(BAD_CAT);
     1971     7882    2              ICB.CAT = TWORD;

   7882 12 000242   200005 236100                    LDQ     TWORD,,AUTO
        12 000243   000033 736000                    QLS     27
        12 000244   000167 552040 xsym               STBQ    ICB+119,'40'O

     1972     7883    2              GOTO GOOD_CAT;

   7883 12 000245   000266 710000 12                 TRA     GOOD_CAT

     1973     7884    2   BAD_CAT:   CALL VPL$ERR_PROC(3,20,'06'O,,,,,1); /* CAT OPTION MAX. 128        */

   7884 12 000246   000002 236000 13    BAD_CAT      LDQ     2
        12 000247   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000250   200022 757100                    STAQ    J+8,,AUTO
        12 000251   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000252   000001 235000 xsym               LDA     B_VECTNIL+1
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:331  
        12 000253   200020 757100                    STAQ    J+6,,AUTO
        12 000254   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000255   000003 235000 13                 LDA     3
        12 000256   200016 757100                    STAQ    J+4,,AUTO
        12 000257   000014 237000 13                 LDAQ    12
        12 000260   200014 757100                    STAQ    J+2,,AUTO
        12 000261   200014 630500                    EPPR0   J+2,,AUTO
        12 000262   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000263   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000264   000000 011000                    NOP     0

     1974     7885        /*E* ERROR:   VPF-00020
     1975     7886             MESSAGE: CAT greater than 128
     1976     7887        */
     1977     7888    2              ALTRETURN;

   7888 12 000265   000000 702200 xent               TSX2  ! X66_AALT

   7882 12 000266   002055 710000 12    GOOD_CAT     TRA     s:8267

     1978     7889    2   GOOD_CAT:  ;
     1979     7890    2            CASE(4);                       /* CRPT                               */

     1980     7891    2              CALL VPD$MNG_CRPT(ICB.CRPT,OPT$->OUT$BLK.SUBLK$(0)) ALTRET(BAD_CRPT);

   7891 12 000267   000000 471500                    LDP1    0,,PR0
        12 000270   100003 633500                    EPPR3   3,,PR1
        12 000271   200015 453500                    STP3    J+3,,AUTO
        12 000272   000013 236000 13                 LDQ     11
        12 000273   200014 756100                    STQ     J+2,,AUTO
        12 000274   200014 630500                    EPPR0   J+2,,AUTO
        12 000275   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000276   000000 701000 xent               TSX1    VPD$MNG_CRPT
        12 000277   000301 702000 12                 TSX2    BAD_CRPT

     1981     7892    3              DO WHILE ('0'B);

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:332  
   7892 12 000300   002055 710000 12                 TRA     s:8267

     1982     7893    3   BAD_CRPT:     CALL VPL$ERR_PROC(3,21,'06'O,,,,,1);

   7893 12 000301   000002 236000 13    BAD_CRPT     LDQ     2
        12 000302   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000303   200022 757100                    STAQ    J+8,,AUTO
        12 000304   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000305   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000306   200020 757100                    STAQ    J+6,,AUTO
        12 000307   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000310   000003 235000 13                 LDA     3
        12 000311   200016 757100                    STAQ    J+4,,AUTO
        12 000312   000020 237000 13                 LDAQ    16
        12 000313   200014 757100                    STAQ    J+2,,AUTO
        12 000314   200014 630500                    EPPR0   J+2,,AUTO
        12 000315   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000316   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000317   000000 011000                    NOP     0

     1983     7894    3                 ALTRETURN;

   7894 12 000320   000000 702200 xent               TSX2  ! X66_AALT

     1984     7895        /*E* ERROR:   VPF-00021
     1985     7896             MESSAGE: Invalid CRPT value on input.
     1986     7897        */
     1987     7898    3                 END;

     1988     7899    2            CASE(5);                       /* COLS                               */

     1989     7900    2              CALL VPD$TEXTC_CHARBIN(ICB.COLS,

   7900 12 000321   000000 471500                    LDP1    0,,PR0
        12 000322   100003 473500                    LDP3    3,,PR1
        12 000323   000017 236000 13                 LDQ     15
        12 000324   200016 756100                    STQ     J+4,,AUTO
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:333  
        12 000325   300003 631500                    EPPR1   3,,PR3
        12 000326   200015 451500                    STP1    J+3,,AUTO
        12 000327   000022 236000 13                 LDQ     18
        12 000330   200014 756100                    STQ     J+2,,AUTO
        12 000331   200014 630500                    EPPR0   J+2,,AUTO
        12 000332   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000333   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        12 000334   000340 702000 12                 TSX2    BAD_COLS

     1990     7901    2                OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     1991     7902    2                -1) ALTRET(BAD_COLS);
     1992     7903    2              ICB.A_EA_C = 1;

   7903 12 000335   000001 235007                    LDA     1,DL
        12 000336   000014 755000 xsym               STA     ICB+12

     1993     7904    2              GOTO GOOD_COLS;

   7904 12 000337   000360 710000 12                 TRA     GOOD_COLS

     1994     7905    2   BAD_COLS:  CALL VPL$ERR_PROC(3,22,'06'O,,,,,1); /* COLUMNS OPTION MAXIMUM 99  */

   7905 12 000340   000002 236000 13    BAD_COLS     LDQ     2
        12 000341   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000342   200022 757100                    STAQ    J+8,,AUTO
        12 000343   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000344   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000345   200020 757100                    STAQ    J+6,,AUTO
        12 000346   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000347   000003 235000 13                 LDA     3
        12 000350   200016 757100                    STAQ    J+4,,AUTO
        12 000351   000024 237000 13                 LDAQ    20
        12 000352   200014 757100                    STAQ    J+2,,AUTO
        12 000353   200014 630500                    EPPR0   J+2,,AUTO
        12 000354   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000355   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000356   000000 011000                    NOP     0
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:334  

     1995     7906        /*E* ERROR:   VPF-00022
     1996     7907             MESSAGE: COLS greater than 99
     1997     7908        */
     1998     7909    2              ALTRETURN;

   7909 12 000357   000000 702200 xent               TSX2  ! X66_AALT

     1999     7910    2   GOOD_COLS: IF ICB.COLS=0

   7910 12 000360   000016 236000 xsym  GOOD_COLS    LDQ     ICB+14
        12 000361   002055 601000 12                 TNZ     s:8267

     2000     7911    2               THEN
     2001     7912    2                 ICB.COLS = 132;

   7912 12 000362   000204 235007                    LDA     132,DL
        12 000363   000016 755000 xsym               STA     ICB+14
        12 000364   002055 710000 12                 TRA     s:8267

     2002     7913    2            CASE(6);                       /* DEOD                               */

     2003     7914    2              ICB.DEOD = 1;

   7914 12 000365   000001 236007                    LDQ     1,DL
        12 000366   000010 756000 xsym               STQ     ICB+8
        12 000367   002055 710000 12                 TRA     s:8267

     2004     7915    2            CASE(7);                       /* EATTRIBUTES                        */

     2005     7916    2              ICB.A_EA_C = 4;

   7916 12 000370   000004 236007                    LDQ     4,DL
        12 000371   000014 756000 xsym               STQ     ICB+12
        12 000372   002055 710000 12                 TRA     s:8267

     2006     7917    2            CASE(8);                       /* NCNVRT                             */
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:335  

     2007     7918    2              ICB.NCNVRT = %YES#;

   7918 12 000373   400000 236003                    LDQ     -131072,DU
        12 000374   000005 756000 xsym               STQ     ICB+5
        12 000375   002055 710000 12                 TRA     s:8267

     2008     7919    2            CASE(9);                       /* FSN                                */

     2009     7920    2              IF RESULTS_FID_IN.NAME

   7920 12 000376   000000 234000 xsym               SZN     RESULTS_FID_IN
        12 000377   000420 605000 12                 TPL     s:7931

     2010     7921    2               THEN
     2011     7922    3               DO;

     2012     7923    3                  CALL VPL$ERR_PROC(3,23,'06'O,,,,,1); /* FSN ILLEGAL WITH NAME  */

   7923 12 000400   000002 236000 13                 LDQ     2
        12 000401   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000402   200022 757100                    STAQ    J+8,,AUTO
        12 000403   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000404   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000405   200020 757100                    STAQ    J+6,,AUTO
        12 000406   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000407   000003 235000 13                 LDA     3
        12 000410   200016 757100                    STAQ    J+4,,AUTO
        12 000411   000030 237000 13                 LDAQ    24
        12 000412   200014 757100                    STAQ    J+2,,AUTO
        12 000413   200014 630500                    EPPR0   J+2,,AUTO
        12 000414   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000415   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000416   000000 011000                    NOP     0

     2013     7924        /*E* ERROR:   VPF-00023
     2014     7925             MESSAGE: FSN illegal with named file
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:336  
     2015     7926        */
     2016     7927    3                  ALTRETURN;

   7927 12 000417   000000 702200 xent               TSX2  ! X66_AALT

     2017     7928    3                  END;
     2018     7929    2               ELSE
     2019     7930    3               DO;

     2020     7931    3                  CALL VPD$TEXTC_CHARBIN(TWORD,

   7931 12 000420   000000 471500                    LDP1    0,,PR0
        12 000421   100003 473500                    LDP3    3,,PR1
        12 000422   000032 236000 13                 LDQ     26
        12 000423   200016 756100                    STQ     J+4,,AUTO
        12 000424   300003 631500                    EPPR1   3,,PR3
        12 000425   200015 451500                    STP1    J+3,,AUTO
        12 000426   200005 633500                    EPPR3   TWORD,,AUTO
        12 000427   200014 453500                    STP3    J+2,,AUTO
        12 000430   200014 630500                    EPPR0   J+2,,AUTO
        12 000431   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000432   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        12 000433   000503 702000 12                 TSX2    BAD_FSN

     2021     7932    3                    OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     2022     7933    3                    32767) ALTRET(BAD_FSN);
     2023     7934    3                  ICB.FSN.START = TWORD;

   7934 12 000434   200005 720100                    LXL0    TWORD,,AUTO
        12 000435   000044 740000 xsym               STX0    ICB+36

     2024     7935    3                  IF OPT$->OUT$BLK.NSUBLKS>1

   7935 12 000436   200003 470500                    LDP0    @OPT$,,AUTO
        12 000437   000000 471500                    LDP1    0,,PR0
        12 000440   100001 221100                    LDX1    1,,PR1
        12 000441   000002 101003                    CMPX1   2,DU
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:337  
        12 000442   000502 602000 12                 TNC     s:7954

     2025     7936    3                   THEN
     2026     7937    4                   DO;

     2027     7938    4                      CALL VPD$TEXTC_CHARBIN(TWORD,

   7938 12 000443   100004 473500                    LDP3    4,,PR1
        12 000444   000032 236000 13                 LDQ     26
        12 000445   200016 756100                    STQ     J+4,,AUTO
        12 000446   300003 631500                    EPPR1   3,,PR3
        12 000447   200015 451500                    STP1    J+3,,AUTO
        12 000450   200005 633500                    EPPR3   TWORD,,AUTO
        12 000451   200014 453500                    STP3    J+2,,AUTO
        12 000452   200014 630500                    EPPR0   J+2,,AUTO
        12 000453   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000454   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        12 000455   000503 702000 12                 TSX2    BAD_FSN

     2028     7939    4                        OPT$->OUT$BLK.SUBLK$(1)->OUT$BLK.SUBLK$(0),
     2029     7940    4                        32767) ALTRET(BAD_FSN);
     2030     7941    4                      ICB.FSN.FINISH = TWORD;

   7941 12 000456   200005 720100                    LXL0    TWORD,,AUTO
        12 000457   000044 440000 xsym               SXL0    ICB+36

     2031     7942    4                      IF ICB.FSN.START>ICB.FSN.FINISH

   7942 12 000460   000044 100000 xsym               CMPX0   ICB+36
        12 000461   000502 603000 12                 TRC     s:7954

     2032     7943    4                       THEN
     2033     7944    5                       DO;

     2034     7945    5                          CALL VPL$ERR_PROC(3,25,'06'O,,,,,1);

   7945 12 000462   000002 236000 13                 LDQ     2
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:338  
        12 000463   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000464   200022 757100                    STAQ    J+8,,AUTO
        12 000465   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000466   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000467   200020 757100                    STAQ    J+6,,AUTO
        12 000470   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000471   000003 235000 13                 LDA     3
        12 000472   200016 757100                    STAQ    J+4,,AUTO
        12 000473   000034 237000 13                 LDAQ    28
        12 000474   200014 757100                    STAQ    J+2,,AUTO
        12 000475   200014 630500                    EPPR0   J+2,,AUTO
        12 000476   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000477   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000500   000000 011000                    NOP     0

     2035     7946        /*E* ERROR:   VPF-00025
     2036     7947             MESSAGE: Bad FSN range
     2037     7948        */
     2038     7949                                                /* BAD FSN RANGE                      */
     2039     7950    5                          ALTRETURN;

   7950 12 000501   000000 702200 xent               TSX2  ! X66_AALT

     2040     7951    5                          END;
     2041     7952    4                      END;
     2042     7953    3                  END;
     2043     7954    2              GOTO GOOD_FSN;

   7954 12 000502   000523 710000 12                 TRA     GOOD_FSN

     2044     7955    2   BAD_FSN:   CALL VPL$ERR_PROC(3,24,'06'O,,,,,1); /* FSN VALUE TOO LARGE        */

   7955 12 000503   000002 236000 13    BAD_FSN      LDQ     2
        12 000504   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000505   200022 757100                    STAQ    J+8,,AUTO
        12 000506   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000507   000001 235000 xsym               LDA     B_VECTNIL+1
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:339  
        12 000510   200020 757100                    STAQ    J+6,,AUTO
        12 000511   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000512   000003 235000 13                 LDA     3
        12 000513   200016 757100                    STAQ    J+4,,AUTO
        12 000514   000040 237000 13                 LDAQ    32
        12 000515   200014 757100                    STAQ    J+2,,AUTO
        12 000516   200014 630500                    EPPR0   J+2,,AUTO
        12 000517   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000520   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000521   000000 011000                    NOP     0

     2045     7956        /*E* ERROR:   VPF-00024
     2046     7957             MESSAGE: FSN too large
     2047     7958        */
     2048     7959    2              ALTRETURN;

   7959 12 000522   000000 702200 xent               TSX2  ! X66_AALT

   7955 12 000523   002055 710000 12    GOOD_FSN     TRA     s:8267

     2049     7960    2   GOOD_FSN:  ;
     2050     7961    2            CASE(10);                      /* ORGS                               */

     2051     7962    2              ICB.ORG = '0'B;

   7962 12 000524   000135 450000 xsym               STZ     ICB+93

     2052     7963    3              DO TWORD=0 TO OPT$->OUT$BLK.NSUBLKS-1;

   7963 12 000525   200005 450100                    STZ     TWORD,,AUTO
        12 000526   000556 710000 12                 TRA     s:7969+3

     2053     7964    3                 I = OPT$ -> OUT$BLK.SUBLK$(TWORD) -> OUT$BLK.CODE; /* ORG code  */

   7964 12 000527   200003 470500                    LDP0    @OPT$,,AUTO
        12 000530   000000 471500                    LDP1    0,,PR0
        12 000531   200005 720100                    LXL0    TWORD,,AUTO
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:340  
        12 000532   100003 473510                    LDP3    3,X0,PR1
        12 000533   300000 236100                    LDQ     0,,PR3
        12 000534   777777 376007                    ANQ     -1,DL
        12 000535   200011 756100                    STQ     I,,AUTO

     2054     7965    3                 IF I=99 THEN              /* This means the ~= was specified    */

   7965 12 000536   000143 116007                    CMPQ    99,DL
        12 000537   000543 601000 12                 TNZ     s:7968

     2055     7966    3                    ICB.ORG_NEG = '1'B;

   7966 12 000540   400000 236003                    LDQ     -131072,DU
        12 000541   000136 756000 xsym               STQ     ICB+94
        12 000542   000553 710000 12                 TRA     s:7969

     2056     7967    3                  ELSE
     2057     7968    3                    ICB.ORG(ORG_TBL.ORG_MON(I)) = '1'B;

   7968 12 000543   000022 402007                    MPY     18,DL
        12 000544   000100 101406                    MRL     fill='000'O
        12 000545   000000 000001 xsym               ADSC9   ORG_TBL,Q                cn=0,n=1
        12 000546   200014 000004                    ADSC9   J+2,,AUTO                cn=0,n=4
        12 000547   200014 236100                    LDQ     J+2,,AUTO
        12 000550   003006 060400                    CSL     bolr='003'O
        12 000551   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
        12 000552   000135 000001 xsym               BDSC    ICB+93,Q                 by=0,bit=0,n=1

     2058     7969    3                 END;

   7969 12 000553   200005 235100                    LDA     TWORD,,AUTO
        12 000554   000001 035007                    ADLA    1,DL
        12 000555   200005 755100                    STA     TWORD,,AUTO
        12 000556   000000 471500                    LDP1    0,,PR0
        12 000557   100001 236100                    LDQ     1,,PR1
        12 000560   000022 772000                    QRL     18
        12 000561   200005 116100                    CMPQ    TWORD,,AUTO
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:341  
        12 000562   000564 600000 12                 TZE     s:7969+9
        12 000563   000527 603000 12                 TRC     s:7964
        12 000564   002055 710000 12                 TRA     s:8267

     2059     7970    2            CASE(11);                      /* PHYSICAL                           */

     2060     7971    2              ICB.PHYSICAL = 1;

   7971 12 000565   000001 236007                    LDQ     1,DL
        12 000566   000011 756000 xsym               STQ     ICB+9
        12 000567   002055 710000 12                 TRA     s:8267

     2061     7972    2            CASE(12);                      /* RECORD SELECTION                   */

     2062     7973    2              IF KEY_AREA$=ADDR(NIL) THEN  /* First one encountered?             */

   7973 12 000570   000000 236000 xsym               LDQ     KEY_AREA$
        12 000571   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 000572   000604 601000 12                 TNZ     s:7978

     2063     7974    2                 CALL VPD$GET_BUF(KEY_AREA$,2048) /* Get two pages for keys      */

   7974 12 000573   000042 630400 13                 EPPR0   34
        12 000574   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000575   000000 701000 xent               TSX1    VPD$GET_BUF
        12 000576   000600 702000 12                 TSX2    s:7976
        12 000577   000604 710000 12                 TRA     s:7978

     2064     7975    3                  WHENALTRETURN DO;

     2065     7976    3                     CALL VPL$ERR_PROC(3,0);

   7976 12 000600   000044 630400 13                 EPPR0   36
        12 000601   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000602   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000603   000000 011000                    NOP     0

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:342  
     2066     7977    3                     END;

     2067     7978    2              IF REC_SEL_CNT>9

   7978 12 000604   000000 235000 xsym               LDA     REC_SEL_CNT
        12 000605   000011 115007                    CMPA    9,DL
        12 000606   000627 604400 12                 TMOZ    s:7989

     2068     7979    2               THEN
     2069     7980    3               DO;

     2070     7981    3                  CALL VPL$ERR_PROC(3,40,'06'O,,,,,1); /* ABORT and return       */

   7981 12 000607   000002 236000 13                 LDQ     2
        12 000610   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000611   200022 757100                    STAQ    J+8,,AUTO
        12 000612   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000613   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000614   200020 757100                    STAQ    J+6,,AUTO
        12 000615   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000616   000003 235000 13                 LDA     3
        12 000617   200016 757100                    STAQ    J+4,,AUTO
        12 000620   000050 237000 13                 LDAQ    40
        12 000621   200014 757100                    STAQ    J+2,,AUTO
        12 000622   200014 630500                    EPPR0   J+2,,AUTO
        12 000623   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 000624   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000625   000000 011000                    NOP     0

     2071     7982        /*E* ERROR:   VPF-00040
     2072     7983             MESSAGE: More than 10 record selections
     2073     7984        */
     2074     7985    3                  ALTRETURN;

   7985 12 000626   000000 702200 xent               TSX2  ! X66_AALT

     2075     7986    3                  END;
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:343  
     2076     7987    2               ELSE
     2077     7988    3               DO;

     2078     7989    3                  T$ = OPT$->OUT$BLK.SUBLK$(0);

   7989 12 000627   200003 470500                    LDP0    @OPT$,,AUTO
        12 000630   000000 471500                    LDP1    0,,PR0
        12 000631   100003 236100                    LDQ     3,,PR1
        12 000632   200006 756100                    STQ     T$,,AUTO

     2079     7990    3                  ICB.REC_SEL.SPEC.TYPE(REC_SEL_CNT) = T$->OUT$BLK.CODE;

   7990 12 000633   000000 236000 xsym               LDQ     REC_SEL_CNT
        12 000634   000005 402007                    MPY     5,DL
        12 000635   200006 473500                    LDP3    T$,,AUTO
        12 000636   000000 620006                    EAX0    0,QL
        12 000637   300000 236100                    LDQ     0,,PR3
        12 000640   777777 376007                    ANQ     -1,DL
        12 000641   000050 756010 xsym               STQ     ICB+40,X0

     2080     7991    3                  ICB.REC_SEL.SPEC.START.KEY$(REC_SEL_CNT) = ADDR(NIL);

   7991 12 000642   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000643   000051 756010 xsym               STQ     ICB+41,X0

     2081     7992    3                  ICB.REC_SEL.SPEC.FINISH.KEY$(REC_SEL_CNT) = ADDR(NIL);

   7992 12 000644   000053 756010 xsym               STQ     ICB+43,X0

     2082     7993    3                  IF T$->OUT$BLK.CODE = 1

   7993 12 000645   300000 721100                    LXL1    0,,PR3
        12 000646   000001 101003                    CMPX1   1,DU
        12 000647   000657 601000 12                 TNZ     s:7999

     2083     7994    4                   THEN DO;                /* Logical record selection           */

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:344  
     2084     7995    4                      ICB.LREC_SEL = '1'B;

   7995 12 000650   400000 236003                    LDQ     -131072,DU
        12 000651   000046 756000 xsym               STQ     ICB+38

     2085     7996    4                      TO_KEY$ = ADDR(ICB.REC_SEL.SPEC.START.SEQ(REC_SEL_CNT));

   7996 12 000652   000000 236000 xsym               LDQ     REC_SEL_CNT
        12 000653   000005 402003                    MPY     5,DU
        12 000654   000047 036000 13                 ADLQ    39
        12 000655   200007 756100                    STQ     TO_KEY$,,AUTO

     2086     7997    4                      END;

   7997 12 000656   000663 710000 12                 TRA     s:8002

     2087     7998    4                   ELSE DO;                /* Keyed record selection             */

     2088     7999    4                      ICB.KEY_SEL = '1'B;

   7999 12 000657   400000 236003                    LDQ     -131072,DU
        12 000660   000045 756000 xsym               STQ     ICB+37

     2089     8000    4                      TO_KEY$=KEY_AREA$;

   8000 12 000661   000000 236000 xsym               LDQ     KEY_AREA$
        12 000662   200007 756100                    STQ     TO_KEY$,,AUTO

     2090     8001    4                      END;

     2091     8002    3                  FROM_KEY$ = T$->OUT$BLK.SUBLK$(0);

   8002 12 000663   300003 236100                    LDQ     3,,PR3
        12 000664   200010 756100                    STQ     FROM_KEY$,,AUTO

     2092     8003    3                  CALL VPD$GET_KEY_OR_NUM(FROM_KEY$,TO_KEY$) ALTRET(BAD_KEY1);

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:345  
   8003 12 000665   200007 631500                    EPPR1   TO_KEY$,,AUTO
        12 000666   200015 451500                    STP1    J+3,,AUTO
        12 000667   200010 634500                    EPPR4   FROM_KEY$,,AUTO
        12 000670   200014 454500                    STP4    J+2,,AUTO
        12 000671   200014 630500                    EPPR0   J+2,,AUTO
        12 000672   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000673   000000 701000 xent               TSX1    VPD$GET_KEY_OR_NUM
        12 000674   000724 702000 12                 TSX2    BAD_KEY1

     2093     8004    4                  IF ICB.REC_SEL.SPEC.TYPE(REC_SEL_CNT)=1 THEN DO;

   8004 12 000675   000000 236000 xsym               LDQ     REC_SEL_CNT
        12 000676   000005 402007                    MPY     5,DL
        12 000677   000050 235006 xsym               LDA     ICB+40,QL
        12 000700   000001 115007                    CMPA    1,DL
        12 000701   000707 601000 12                 TNZ     s:8009

     2094     8005    4                      ICB.REC_SEL.SPEC.START.KEY$(REC_SEL_CNT)=ADDR(NIL);

   8005 12 000702   000000 620006                    EAX0    0,QL
        12 000703   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000704   000051 756010 xsym               STQ     ICB+41,X0

     2095     8006    4                      ICB.REC_SEL.SPEC.FINISH.KEY$(REC_SEL_CNT)=ADDR(NIL);

   8006 12 000705   000053 756010 xsym               STQ     ICB+43,X0

     2096     8007    4                      END;

   8007 12 000706   000723 710000 12                 TRA     s:8012

     2097     8008    4                   ELSE DO;

     2098     8009    4                      ICB.REC_SEL.SPEC.START.KEY$(REC_SEL_CNT)=KEY_AREA$;

   8009 12 000707   000000 620006                    EAX0    0,QL
        12 000710   000000 236000 xsym               LDQ     KEY_AREA$
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:346  
        12 000711   000051 756010 xsym               STQ     ICB+41,X0

     2099     8010    4                      KEY_AREA$=PINCRC(KEY_AREA$,KEY_AREA$->TEXT$C.LEN+1);
              8010                               /* move avail ptr*/

   8010 12 000712   000000 470400 xsym               LDP0    KEY_AREA$
        12 000713   000100 101500                    MRL     fill='000'O
        12 000714   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        12 000715   200014 000004                    ADSC9   J+2,,AUTO                cn=0,n=4
        12 000716   200014 236100                    LDQ     J+2,,AUTO
        12 000717   000020 736000                    QLS     16
        12 000720   200000 036007                    ADLQ    65536,DL
        12 000721   000000 036000 xsym               ADLQ    KEY_AREA$
        12 000722   000000 756000 xsym               STQ     KEY_AREA$

     2100     8011    4                      END;

     2101     8012    4                  DO WHILE ('0'B);         /* Never do                           */

   8012 12 000723   000725 710000 12                 TRA     s:8016

     2102     8013    4   BAD_KEY1:         ALTRETURN;            /* Record selection problems          */

   8013 12 000724   000000 702200 xent  BAD_KEY1     TSX2  ! X66_AALT

     2103     8014    4                     END;

     2104     8015                                                /* INSURE A RANGE                     */
     2105     8016    3                  IF T$->OUT$BLK.NSUBLKS>1

   8016 12 000725   200006 470500                    LDP0    T$,,AUTO
        12 000726   000001 221100                    LDX1    1,,PR0
        12 000727   000002 101003                    CMPX1   2,DU
        12 000730   001065 602000 12                 TNC     s:8052

     2106     8017    3                   THEN                    /* A range, not a single record       */
     2107     8018    3                     IF T$->OUT$BLK.SUBLK$(1)->OUT$BLK.CODE=5
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:347  

   8018 12 000731   000004 471500                    LDP1    4,,PR0
        12 000732   100000 722100                    LXL2    0,,PR1
        12 000733   000005 102003                    CMPX2   5,DU
        12 000734   001074 600000 12                 TZE     s:8053

     2108     8019    3                      THEN
     2109     8020    3                        ;                  /* Open ended range specified         */
     2110     8021    4                      ELSE DO;             /* A range end was specified          */

     2111     8022    4                         FROM_KEY$ = T$->OUT$BLK.SUBLK$(1);

   8022 12 000735   000004 236100                    LDQ     4,,PR0
        12 000736   200010 756100                    STQ     FROM_KEY$,,AUTO

     2112     8023    4                         IF ICB.REC_SEL.SPEC.TYPE(REC_SEL_CNT)=1 THEN

   8023 12 000737   000050 235010 xsym               LDA     ICB+40,X0
        12 000740   000001 115007                    CMPA    1,DL
        12 000741   000747 601000 12                 TNZ     s:8026

     2113     8024    4                            TO_KEY$=ADDR(ICB.REC_SEL.SPEC.FINISH.SEQ(REC_SEL_CNT));

   8024 12 000742   000000 236000 xsym               LDQ     REC_SEL_CNT
        12 000743   000005 402003                    MPY     5,DU
        12 000744   000052 036000 13                 ADLQ    42
        12 000745   200007 756100                    STQ     TO_KEY$,,AUTO
        12 000746   000751 710000 12                 TRA     s:8027

     2114     8025    4                          ELSE
     2115     8026    4                            TO_KEY$=KEY_AREA$;

   8026 12 000747   000000 236000 xsym               LDQ     KEY_AREA$
        12 000750   200007 756100                    STQ     TO_KEY$,,AUTO

     2116     8027    4                         CALL VPD$GET_KEY_OR_NUM(FROM_KEY$,TO_KEY$) ALTRET(BAD_KEY2);

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:348  
   8027 12 000751   200007 631500                    EPPR1   TO_KEY$,,AUTO
        12 000752   200015 451500                    STP1    J+3,,AUTO
        12 000753   200010 633500                    EPPR3   FROM_KEY$,,AUTO
        12 000754   200014 453500                    STP3    J+2,,AUTO
        12 000755   200014 630500                    EPPR0   J+2,,AUTO
        12 000756   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000757   000000 701000 xent               TSX1    VPD$GET_KEY_OR_NUM
        12 000760   001003 702000 12                 TSX2    BAD_KEY2

     2117     8028    5                         IF ICB.REC_SEL.SPEC.TYPE(REC_SEL_CNT)=2 THEN DO;

   8028 12 000761   000000 236000 xsym               LDQ     REC_SEL_CNT
        12 000762   000005 402007                    MPY     5,DL
        12 000763   000050 235006 xsym               LDA     ICB+40,QL
        12 000764   000002 115007                    CMPA    2,DL
        12 000765   001002 601000 12                 TNZ     s:8032

     2118     8029    5                             ICB.REC_SEL.SPEC.FINISH.KEY$(REC_SEL_CNT)=KEY_AREA$;

   8029 12 000766   000000 620006                    EAX0    0,QL
        12 000767   000000 236000 xsym               LDQ     KEY_AREA$
        12 000770   000053 756010 xsym               STQ     ICB+43,X0

     2119     8030    5                             KEY_AREA$=PINCRC(KEY_AREA$,KEY_AREA$->TEXT$C.LEN+1);

   8030 12 000771   000000 470400 xsym               LDP0    KEY_AREA$
        12 000772   000100 101500                    MRL     fill='000'O
        12 000773   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        12 000774   200014 000004                    ADSC9   J+2,,AUTO                cn=0,n=4
        12 000775   200014 236100                    LDQ     J+2,,AUTO
        12 000776   000020 736000                    QLS     16
        12 000777   200000 036007                    ADLQ    65536,DL
        12 001000   000000 036000 xsym               ADLQ    KEY_AREA$
        12 001001   000000 756000 xsym               STQ     KEY_AREA$

     2120     8031    5                             END;

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:349  
     2121     8032    5                         DO WHILE ('0'B);  /* Never do                           */

   8032 12 001002   001004 710000 12                 TRA     s:8035

     2122     8033    5   BAD_KEY2:                ALTRETURN;     /* Record selection problems          */

   8033 12 001003   000000 702200 xent  BAD_KEY2     TSX2  ! X66_AALT

     2123     8034    5                            END;

     2124     8035    4                         I=0;

   8035 12 001004   200011 450100                    STZ     I,,AUTO

     2125     8036    4                         IF ICB.REC_SEL.SPEC.START.KEY$(REC_SEL_CNT)~=ADDR(NIL) THEN

   8036 12 001005   000000 236000 xsym               LDQ     REC_SEL_CNT
        12 001006   000005 402007                    MPY     5,DL
        12 001007   000051 236006 xsym               LDQ     ICB+41,QL
        12 001010   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 001011   001034 600000 12                 TZE     s:8040

     2126     8037    4                            IF ICB.REC_SEL.SPEC.START.KEY$(REC_SEL_CNT)->TEXT$C.STRING

   8037 12 001012   000000 236000 xsym               LDQ     REC_SEL_CNT
        12 001013   000005 402007                    MPY     5,DL
        12 001014   000051 470406 xsym               LDP0    ICB+41,QL
        12 001015   000100 101500                    MRL     fill='000'O
        12 001016   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        12 001017   200014 000002                    ADSC9   J+2,,AUTO                cn=0,n=2
        12 001020   200014 220100                    LDX0    J+2,,AUTO
        12 001021   000053 471406 xsym               LDP1    ICB+43,QL
        12 001022   000100 101500                    MRL     fill='000'O
        12 001023   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        12 001024   200015 000002                    ADSC9   J+3,,AUTO                cn=0,n=2
        12 001025   200015 221100                    LDX1    J+3,,AUTO
        12 001026   040140 106540                    CMPC    fill='040'O
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:350  
        12 001027   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
        12 001030   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
        12 001031   001034 603000 12                 TRC     s:8040

     2127     8038    4                              > ICB.REC_SEL.SPEC.FINISH.KEY$(REC_SEL_CNT)->TEXT$C.
              8038                                       STRING THEN
     2128     8039    4                               I=1;

   8039 12 001032   000001 235007                    LDA     1,DL
        12 001033   200011 755100                    STA     I,,AUTO

     2129     8040    4                         IF I=1 OR ICB.REC_SEL.SPEC.START.SEQ(REC_SEL_CNT) >

   8040 12 001034   200011 235100                    LDA     I,,AUTO
        12 001035   000001 115007                    CMPA    1,DL
        12 001036   001045 600000 12                 TZE     s:8044
        12 001037   000000 236000 xsym               LDQ     REC_SEL_CNT
        12 001040   000005 402007                    MPY     5,DL
        12 001041   000000 620006                    EAX0    0,QL
        12 001042   000054 236010 xsym               LDQ     ICB+44,X0
        12 001043   000052 116010 xsym               CMPQ    ICB+42,X0
        12 001044   001074 603000 12                 TRC     s:8053

     2130     8041    4                           ICB.REC_SEL.SPEC.FINISH.SEQ(REC_SEL_CNT)
     2131     8042    4                          THEN
     2132     8043    5                          DO;

     2133     8044    5                             CALL VPL$ERR_PROC(3,29,'06'O,,,,,1);

   8044 12 001045   000002 236000 13                 LDQ     2
        12 001046   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001047   200022 757100                    STAQ    J+8,,AUTO
        12 001050   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001051   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001052   200020 757100                    STAQ    J+6,,AUTO
        12 001053   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001054   000003 235000 13                 LDA     3
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:351  
        12 001055   200016 757100                    STAQ    J+4,,AUTO
        12 001056   000054 237000 13                 LDAQ    44
        12 001057   200014 757100                    STAQ    J+2,,AUTO
        12 001060   200014 630500                    EPPR0   J+2,,AUTO
        12 001061   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001062   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001063   000000 011000                    NOP     0

     2134     8045        /*E* ERROR:   VPF-00029
     2135     8046             MESSAGE: Bad record selection range
     2136     8047        */
     2137     8048    5                             ALTRETURN;    /* BAD RECORD SELECTION RANGE         */

   8048 12 001064   000000 702200 xent               TSX2  ! X66_AALT

     2138     8049    5                             END;
     2139     8050    4                         END;
     2140     8051    3                   ELSE                    /* A single record selected           */
     2141     8052    3                     ICB.REC_SEL.SPEC.FINISH(REC_SEL_CNT) = ICB.REC_SEL.SPEC.START(
              8052                              REC_SEL_CNT);

   8052 12 001065   000000 236000 xsym               LDQ     REC_SEL_CNT
        12 001066   000024 402007                    MPY     20,DL
        12 001067   000000 635010                    EAA     0,X0
        12 001070   000020 731000                    ARS     16
        12 001071   000005 100406                    MLR     fill='000'O
        12 001072   000051 000010 xsym               ADSC9   ICB+41,Q                 cn=0,n=8
        12 001073   000053 000010 xsym               ADSC9   ICB+43,A                 cn=0,n=8

     2142     8053    3                  REC_SEL_CNT = REC_SEL_CNT+1;

   8053 12 001074   000000 054000 xsym               AOS     REC_SEL_CNT

     2143     8054    3                  END;

   8054 12 001075   002055 710000 12                 TRA     s:8267

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:352  
     2144     8055    2            CASE(13);                      /* TYPE                               */

     2145     8056    2              IF OPT$->OUT$BLK.NSUBLKS>10

   8056 12 001076   000000 471500                    LDP1    0,,PR0
        12 001077   100001 220100                    LDX0    1,,PR1
        12 001100   000013 100003                    CMPX0   11,DU
        12 001101   001122 602000 12                 TNC     s:8070

     2146     8057    2               THEN
     2147     8058    3               DO;

     2148     8059    3                  CALL VPL$ERR_PROC(3,32,'06'O,,,,,1); /* TOO MANY TYPES GIVEN   */

   8059 12 001102   000002 236000 13                 LDQ     2
        12 001103   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001104   200022 757100                    STAQ    J+8,,AUTO
        12 001105   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001106   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001107   200020 757100                    STAQ    J+6,,AUTO
        12 001110   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001111   000003 235000 13                 LDA     3
        12 001112   200016 757100                    STAQ    J+4,,AUTO
        12 001113   000060 237000 13                 LDAQ    48
        12 001114   200014 757100                    STAQ    J+2,,AUTO
        12 001115   200014 630500                    EPPR0   J+2,,AUTO
        12 001116   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001117   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001120   000000 011000                    NOP     0

     2149     8060        /*E* ERROR:   VPF-00032
     2150     8061             MESSAGE: More than 10 TYPE's specified
     2151     8062        */
     2152     8063        /*E* ERROR:   VPF-00033
     2153     8064             MESSAGE: TYPE greater than 2 chars
     2154     8065        */
     2155     8066    3                  ALTRETURN;
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:353  

   8066 12 001121   000000 702200 xent               TSX2  ! X66_AALT

     2156     8067    3                  END;
     2157     8068    2               ELSE
     2158     8069    3               DO;

     2159     8070    3                  ICB.TYPE.COUNT = 0;

   8070 12 001122   000150 450000 xsym               STZ     ICB+104

     2160     8071    3                  I=0;

   8071 12 001123   200011 450100                    STZ     I,,AUTO

     2161     8072    4                  IF OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE=99 THEN DO;

   8072 12 001124   000000 471500                    LDP1    0,,PR0
        12 001125   100003 473500                    LDP3    3,,PR1
        12 001126   300000 720100                    LXL0    0,,PR3
        12 001127   000143 100003                    CMPX0   99,DU
        12 001130   001135 601000 12                 TNZ     s:8076

     2162     8073    4                      ICB.TYPE.NEG='1'B;

   8073 12 001131   400000 236003                    LDQ     -131072,DU
        12 001132   000151 756000 xsym               STQ     ICB+105

     2163     8074    4                      I=1;

   8074 12 001133   000001 235007                    LDA     1,DL
        12 001134   200011 755100                    STA     I,,AUTO

     2164     8075    4                      END;

     2165     8076    4                  DO WHILE(I<OPT$->OUT$BLK.NSUBLKS);

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:354  
   8076 12 001135   000000 471500                    LDP1    0,,PR0
        12 001136   100001 236100                    LDQ     1,,PR1
        12 001137   000022 772000                    QRL     18
        12 001140   200011 116100                    CMPQ    I,,AUTO
        12 001141   002055 602000 12                 TNC     s:8267
        12 001142   002055 600000 12                 TZE     s:8267

     2166     8077    4                     T$ = OPT$->OUT$BLK.SUBLK$(I);

   8077 12 001143   200003 470500                    LDP0    @OPT$,,AUTO
        12 001144   000000 471500                    LDP1    0,,PR0
        12 001145   200011 720100                    LXL0    I,,AUTO
        12 001146   100003 236110                    LDQ     3,X0,PR1
        12 001147   200006 756100                    STQ     T$,,AUTO

     2167     8078    4                     IF T$->OUT$SYM.COUNT>2

   8078 12 001150   200006 473500                    LDP3    T$,,AUTO
        12 001151   300004 236100                    LDQ     4,,PR3
        12 001152   777000 376003                    ANQ     -512,DU
        12 001153   003000 116003                    CMPQ    1536,DU
        12 001154   001175 602000 12                 TNC     s:8085

     2168     8079    4                      THEN
     2169     8080    5                      DO;

     2170     8081    5                         CALL VPL$ERR_PROC(3,33,'06'O,,,,,1);

   8081 12 001155   000002 236000 13                 LDQ     2
        12 001156   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001157   200022 757100                    STAQ    J+8,,AUTO
        12 001160   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001161   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001162   200020 757100                    STAQ    J+6,,AUTO
        12 001163   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001164   000003 235000 13                 LDA     3
        12 001165   200016 757100                    STAQ    J+4,,AUTO
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:355  
        12 001166   000062 237000 13                 LDAQ    50
        12 001167   200014 757100                    STAQ    J+2,,AUTO
        12 001170   200014 630500                    EPPR0   J+2,,AUTO
        12 001171   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001172   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001173   000000 011000                    NOP     0

     2171     8082    5                         ALTRETURN;        /* TYPE TOO LONG                      */

   8082 12 001174   000000 702200 xent               TSX2  ! X66_AALT

     2172     8083    5                         END;
     2173     8084    4                      ELSE
     2174     8085    4                        ICB.TYPE.STRING(ICB.TYPE.COUNT) = T$->OUT$SYM.TEXT;

   8085 12 001175   300004 236100                    LDQ     4,,PR3
        12 001176   000033 772000                    QRL     27
        12 001177   000150 235000 xsym               LDA     ICB+104
        12 001200   000001 735000                    ALS     1
        12 001201   000000 621006                    EAX1    0,QL
        12 001202   040005 100540                    MLR     fill='040'O
        12 001203   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
        12 001204   000152 000002 xsym               ADSC9   ICB+106,A                cn=0,n=2

     2175     8086    4                     ICB.TYPE.COUNT = ICB.TYPE.COUNT+1;

   8086 12 001205   000150 054000 xsym               AOS     ICB+104

     2176     8087    4                     I=I+1;

   8087 12 001206   200011 235100                    LDA     I,,AUTO
        12 001207   000001 035007                    ADLA    1,DL
        12 001210   200011 755100                    STA     I,,AUTO

     2177     8088    4                     END;

   8088 12 001211   000000 471500                    LDP1    0,,PR0
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:356  
        12 001212   100001 236100                    LDQ     1,,PR1
        12 001213   000022 772000                    QRL     18
        12 001214   200011 116100                    CMPQ    I,,AUTO
        12 001215   001217 600000 12                 TZE     s:8089
        12 001216   001143 603000 12                 TRC     s:8077

     2178     8089    3                  END;

   8089 12 001217   002055 710000 12                 TRA     s:8267

     2179     8090    2            CASE(14);                      /* VOLUME                             */

     2180     8091    2              CALL VPD$TEXTC_CHARBIN(TWORD,

   8091 12 001220   000000 471500                    LDP1    0,,PR0
        12 001221   100003 473500                    LDP3    3,,PR1
        12 001222   000065 236000 13                 LDQ     53
        12 001223   200016 756100                    STQ     J+4,,AUTO
        12 001224   300003 631500                    EPPR1   3,,PR3
        12 001225   200015 451500                    STP1    J+3,,AUTO
        12 001226   200005 633500                    EPPR3   TWORD,,AUTO
        12 001227   200014 453500                    STP3    J+2,,AUTO
        12 001230   200014 630500                    EPPR0   J+2,,AUTO
        12 001231   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 001232   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        12 001233   001240 702000 12                 TSX2    BAD_VOL

     2181     8092    2                OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     2182     8093    2                511) ALTRET(BAD_VOL);
     2183     8094    2              ICB.VOL = TWORD;

   8094 12 001234   200005 236100                    LDQ     TWORD,,AUTO
        12 001235   000033 736000                    QLS     27
        12 001236   000157 552040 xsym               STBQ    ICB+111,'40'O

     2184     8095    2              GOTO GOOD_VOL;

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:357  
   8095 12 001237   001260 710000 12                 TRA     GOOD_VOL

     2185     8096    2   BAD_VOL:   CALL VPL$ERR_PROC(3,34,'06'O,,,,,1); /* VOLUME VALUE TOO LARGE     */

   8096 12 001240   000002 236000 13    BAD_VOL      LDQ     2
        12 001241   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001242   200022 757100                    STAQ    J+8,,AUTO
        12 001243   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001244   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001245   200020 757100                    STAQ    J+6,,AUTO
        12 001246   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001247   000003 235000 13                 LDA     3
        12 001250   200016 757100                    STAQ    J+4,,AUTO
        12 001251   000070 237000 13                 LDAQ    56
        12 001252   200014 757100                    STAQ    J+2,,AUTO
        12 001253   200014 630500                    EPPR0   J+2,,AUTO
        12 001254   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001255   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001256   000000 011000                    NOP     0

     2186     8097        /*E* ERROR:   VPF-00034
     2187     8098             MESSAGE: VOLUME too large
     2188     8099        */
     2189     8100    2              ALTRETURN;

   8100 12 001257   000000 702200 xent               TSX2  ! X66_AALT

   8094 12 001260   002055 710000 12    GOOD_VOL     TRA     s:8267

     2190     8101    2   GOOD_VOL:  ;
     2191     8102    2            CASE(15);                      /* EBCDIC                             */

     2192     8103    2              ICB.EBCDIC = %YES#;

   8103 12 001261   400000 236003                    LDQ     -131072,DU
        12 001262   000000 756000 xsym               STQ     ICB
        12 001263   002055 710000 12                 TRA     s:8267
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:358  

     2193     8104    2            CASE(16);                      /* BINARY                             */

     2194     8105    2              ICB.BIN = %YES#;

   8105 12 001264   400000 236003                    LDQ     -131072,DU
        12 001265   000001 756000 xsym               STQ     ICB+1
        12 001266   002055 710000 12                 TRA     s:8267

     2195     8106    2            CASE(17);                      /* NBINARY                            */

     2196     8107    2              ICB.BIN = %NO#;

   8107 12 001267   000001 450000 xsym               STZ     ICB+1
        12 001270   002055 710000 12                 TRA     s:8267

     2197     8108    2            CASE(18);                      /* TRANSPARENT                        */

     2198     8109    2              ICB.TRANS = %YES#;

   8109 12 001271   400000 236003                    LDQ     -131072,DU
        12 001272   000004 756000 xsym               STQ     ICB+4
        12 001273   002055 710000 12                 TRA     s:8267

     2199     8110    2            CASE(19);                      /* FTORGANIZATION                     */

     2200     8111    2              I = OPT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* PCL's ORG code   */

   8111 12 001274   000000 471500                    LDP1    0,,PR0
        12 001275   100003 473500                    LDP3    3,,PR1
        12 001276   300000 236100                    LDQ     0,,PR3
        12 001277   777777 376007                    ANQ     -1,DL
        12 001300   200011 756100                    STQ     I,,AUTO

     2201     8112    2              ICB.FTORG = ORG_TBL.ORG_MON(I);

   8112 12 001301   000022 402007                    MPY     18,DL
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:359  
        12 001302   000000 100406                    MLR     fill='000'O
        12 001303   000000 000001 xsym               ADSC9   ORG_TBL,Q                cn=0,n=1
        12 001304   000157 200001 xsym               ADSC9   ICB+111                  cn=1,n=1
        12 001305   002055 710000 12                 TRA     s:8267

     2202     8113    2            CASE(20);                      /* BLOCK                              */

     2203     8114    2              CALL VPD$TEXTC_CHARBIN(TWORD,

   8114 12 001306   000000 471500                    LDP1    0,,PR0
        12 001307   100003 473500                    LDP3    3,,PR1
        12 001310   000032 236000 13                 LDQ     26
        12 001311   200016 756100                    STQ     J+4,,AUTO
        12 001312   300003 631500                    EPPR1   3,,PR3
        12 001313   200015 451500                    STP1    J+3,,AUTO
        12 001314   200005 633500                    EPPR3   TWORD,,AUTO
        12 001315   200014 453500                    STP3    J+2,,AUTO
        12 001316   200014 630500                    EPPR0   J+2,,AUTO
        12 001317   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 001320   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        12 001321   001325 702000 12                 TSX2    BAD_BLKL

     2204     8115    2                OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     2205     8116    2                32767) ALTRET(BAD_BLKL);
     2206     8117    2              ICB.BLKL = TWORD;

   8117 12 001322   200005 235100                    LDA     TWORD,,AUTO
        12 001323   000012 755000 xsym               STA     ICB+10

     2207     8118    2              GOTO GOOD_BLKL;

   8118 12 001324   001345 710000 12                 TRA     GOOD_BLKL

     2208     8119    2   BAD_BLKL:  CALL VPL$ERR_PROC(3,53,'06'O,,,,,1); /* BLKL TOO LARGE             */

   8119 12 001325   000002 236000 13    BAD_BLKL     LDQ     2
        12 001326   000001 235000 xsym               LDA     B_VECTNIL+1
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:360  
        12 001327   200022 757100                    STAQ    J+8,,AUTO
        12 001330   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001331   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001332   200020 757100                    STAQ    J+6,,AUTO
        12 001333   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001334   000003 235000 13                 LDA     3
        12 001335   200016 757100                    STAQ    J+4,,AUTO
        12 001336   000072 237000 13                 LDAQ    58
        12 001337   200014 757100                    STAQ    J+2,,AUTO
        12 001340   200014 630500                    EPPR0   J+2,,AUTO
        12 001341   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001342   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001343   000000 011000                    NOP     0

     2209     8120        /*E*   ERROR: VPF-00053
     2210     8121             MESSAGE: BLOCK too large */
     2211     8122    2              ALTRETURN;

   8122 12 001344   000000 702200 xent               TSX2  ! X66_AALT

   8117 12 001345   002055 710000 12    GOOD_BLKL    TRA     s:8267

     2212     8123    2   GOOD_BLKL: ;
     2213     8124    2            CASE(21);                      /* RECL                               */

     2214     8125    2              CALL VPD$TEXTC_CHARBIN(TWORD,

   8125 12 001346   000000 471500                    LDP1    0,,PR0
        12 001347   100003 473500                    LDP3    3,,PR1
        12 001350   000075 236000 13                 LDQ     61
        12 001351   200016 756100                    STQ     J+4,,AUTO
        12 001352   300003 631500                    EPPR1   3,,PR3
        12 001353   200015 451500                    STP1    J+3,,AUTO
        12 001354   200005 633500                    EPPR3   TWORD,,AUTO
        12 001355   200014 453500                    STP3    J+2,,AUTO
        12 001356   200014 630500                    EPPR0   J+2,,AUTO
        12 001357   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:361  
        12 001360   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        12 001361   001365 702000 12                 TSX2    BAD_RECL

     2215     8126    2                OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0),
     2216     8127    2                262143) ALTRET(BAD_RECL);
     2217     8128    2              ICB.RECL = TWORD;

   8128 12 001362   200005 235100                    LDA     TWORD,,AUTO
        12 001363   000013 755000 xsym               STA     ICB+11

     2218     8129    2              GOTO GOOD_RECL;

   8129 12 001364   001405 710000 12                 TRA     GOOD_RECL

     2219     8130    2   BAD_RECL:  CALL VPL$ERR_PROC(3,54,'06'O,,,,,1); /* RECL TOO LARGE             */

   8130 12 001365   000002 236000 13    BAD_RECL     LDQ     2
        12 001366   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001367   200022 757100                    STAQ    J+8,,AUTO
        12 001370   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001371   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001372   200020 757100                    STAQ    J+6,,AUTO
        12 001373   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001374   000003 235000 13                 LDA     3
        12 001375   200016 757100                    STAQ    J+4,,AUTO
        12 001376   000100 237000 13                 LDAQ    64
        12 001377   200014 757100                    STAQ    J+2,,AUTO
        12 001400   200014 630500                    EPPR0   J+2,,AUTO
        12 001401   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001402   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001403   000000 011000                    NOP     0

     2220     8131        /*E*   ERROR: VPF-00054
     2221     8132             MESSAGE: RECLENGTH too large */
     2222     8133    2              ALTRETURN;

   8133 12 001404   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:362  

   8128 12 001405   002055 710000 12    GOOD_RECL    TRA     s:8267

     2223     8134    2   GOOD_RECL: ;
     2224     8135    2            CASE(22);                      /* NSPANNED                           */

     2225     8136    2              ICB.NSPAN = %YES#;

   8136 12 001406   400000 236003                    LDQ     -131072,DU
        12 001407   000002 756000 xsym               STQ     ICB+2
        12 001410   002055 710000 12                 TRA     s:8267

     2226     8137    2            CASE(23);                      /* NBLOCKED                           */

     2227     8138    2              ICB.NBLOCK = %YES#;

   8138 12 001411   400000 236003                    LDQ     -131072,DU
        12 001412   000003 756000 xsym               STQ     ICB+3
        12 001413   002055 710000 12                 TRA     s:8267

     2228     8139    2            CASE(24);                      /* DATE                               */

     2229     8140    2              ICB.DATE.TYPE = OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE;

   8140 12 001414   000000 471500                    LDP1    0,,PR0
        12 001415   100003 473500                    LDP3    3,,PR1
        12 001416   300000 236100                    LDQ     0,,PR3
        12 001417   777777 376007                    ANQ     -1,DL
        12 001420   000160 756000 xsym               STQ     ICB+112

     2230     8141    2              ICB.DATE.RELATION = OPT$->OUT$BLK.SUBLK$(1)->OUT$BLK.CODE;

   8141 12 001421   000000 471500                    LDP1    0,,PR0
        12 001422   100004 473500                    LDP3    4,,PR1
        12 001423   300000 236100                    LDQ     0,,PR3
        12 001424   777777 376007                    ANQ     -1,DL
        12 001425   000162 756000 xsym               STQ     ICB+114
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:363  

     2231     8142    2              CALL VPD$PROCESS_DATE(OPT$->OUT$BLK.SUBLK$(2),DATE_TYPE,

   8142 12 001426   000000 471500                    LDP1    0,,PR0
        12 001427   000102 237000 13                 LDAQ    66
        12 001430   200016 757100                    STAQ    J+4,,AUTO
        12 001431   000077 236000 13                 LDQ     63
        12 001432   200015 756100                    STQ     J+3,,AUTO
        12 001433   100005 633500                    EPPR3   5,,PR1
        12 001434   200014 453500                    STP3    J+2,,AUTO
        12 001435   200014 630500                    EPPR0   J+2,,AUTO
        12 001436   000022 631400 xsym               EPPR1   B_VECTNIL+18
        12 001437   000000 701000 xent               TSX1    VPD$PROCESS_DATE
        12 001440   001476 702000 12                 TSX2    BAD_SEL_DATE

     2232     8143    2                ICB.DATE.UTS,ICB.DATE.ROUNDING_TYPE) ALTRET(BAD_SEL_DATE);
     2233     8144    3              DO CASE(DATE_TYPE);

   8144 12 001441   000000 235000 11                 LDA     DATE_TYPE
        12 001442   000007 115007                    CMPA    7,DL
        12 001443   001445 602005 12                 TNC     s:8144+4,AL
        12 001444   001475 710000 12                 TRA     s:8155
        12 001445   001475 710000 12                 TRA     s:8155
        12 001446   001454 710000 12                 TRA     s:8146
        12 001447   001460 710000 12                 TRA     s:8148
        12 001450   001464 710000 12                 TRA     s:8150
        12 001451   001472 710000 12                 TRA     s:8153
        12 001452   001454 710000 12                 TRA     s:8146
        12 001453   001454 710000 12                 TRA     s:8146

     2234     8145    3               CASE(1,5,6);                /* Selection date is specified        */

     2235     8146    3                 CALL M$TIME(FPT_MAKE_TIME); /* Turn UTS into ICB.DATE.TEXT      */

   8146 12 001454   000002 630400 11                 EPPR0   FPT_MAKE_TIME
        12 001455   020004 713400                    CLIMB   8196
        12 001456   402000 401760                    pmme    nvectors=5
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:364  
        12 001457   001475 710000 12                 TRA     s:8155

     2236     8147    3               CASE(2);                    /* Selection date is TODAY            */

     2237     8148    3                 ICB.DATE.TEXT = 'TODAY';  /* Text for DEL confirmation          */

   8148 12 001460   040000 100400                    MLR     fill='040'O
        12 001461   000323 000005 10                 ADSC9   OPT_TBL+211              cn=0,n=5
        12 001462   000164 000012 xsym               ADSC9   ICB+116                  cn=0,n=10
        12 001463   001475 710000 12                 TRA     s:8155

     2238     8149    3               CASE(3);                    /* Selection date is NEVER            */

     2239     8150    3                 ICB.DATE.UTS = BITBIN('777777777777'O);

   8150 12 001464   000027 236000 xsym               LDQ     B_VECTNIL+23
        12 001465   000163 756000 xsym               STQ     ICB+115

     2240     8151    3                 ICB.DATE.TEXT = 'NEVER';  /* Text for DEL confirmation          */

   8151 12 001466   040000 100400                    MLR     fill='040'O
        12 001467   000325 000005 10                 ADSC9   OPT_TBL+213              cn=0,n=5
        12 001470   000164 000012 xsym               ADSC9   ICB+116                  cn=0,n=10
        12 001471   001475 710000 12                 TRA     s:8155

     2241     8152    3               CASE(4);                    /* Selection date is NOW              */

     2242     8153    3                 ICB.DATE.TEXT = 'NOW';    /* Text for DEL confirmation          */

   8153 12 001472   040000 100400                    MLR     fill='040'O
        12 001473   000327 000003 10                 ADSC9   OPT_TBL+215              cn=0,n=3
        12 001474   000164 000012 xsym               ADSC9   ICB+116                  cn=0,n=10

     2243     8154    3               END;                        /* End DO CASE selection date         */

     2244     8155    3              DO WHILE ('0'B);             /* NEVER DO                           */

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:365  
   8155 12 001475   002055 710000 12                 TRA     s:8267

     2245     8156    3   BAD_SEL_DATE: CALL VPL$ERR_PROC(3,58,'06'O,,,,,1);

   8156 12 001476   000002 236000 13    BAD_SEL_DATE LDQ     2
        12 001477   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001500   200022 757100                    STAQ    J+8,,AUTO
        12 001501   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001502   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001503   200020 757100                    STAQ    J+6,,AUTO
        12 001504   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001505   000003 235000 13                 LDA     3
        12 001506   200016 757100                    STAQ    J+4,,AUTO
        12 001507   000106 237000 13                 LDAQ    70
        12 001510   200014 757100                    STAQ    J+2,,AUTO
        12 001511   200014 630500                    EPPR0   J+2,,AUTO
        12 001512   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001513   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001514   000000 011000                    NOP     0

     2246     8157        /*E*   ERROR: VPF-00058
     2247     8158             MESSAGE: Bad file selection date
     2248     8159        */
     2249     8160    3                 ALTRETURN;

   8160 12 001515   000000 702200 xent               TSX2  ! X66_AALT

     2250     8161    3                 END;

     2251     8162    2            CASE(25);                      /* SRCHCOND specified                 */

     2252     8163    3              DO I = 0 TO (OPT$ -> OUT$BLK.NSUBLKS -1);

   8163 12 001516   200011 450100                    STZ     I,,AUTO
        12 001517   001573 710000 12                 TRA     s:8182+3

     2253     8164    4                 DO CASE(OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$BLK.CODE);
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:366  

   8164 12 001520   200003 470500                    LDP0    @OPT$,,AUTO
        12 001521   000000 471500                    LDP1    0,,PR0
        12 001522   200011 720100                    LXL0    I,,AUTO
        12 001523   100003 473510                    LDP3    3,X0,PR1
        12 001524   300000 721100                    LXL1    0,,PR3
        12 001525   000011 101003                    CMPX1   9,DU
        12 001526   001530 602011 12                 TNC     s:8164+8,X1
        12 001527   001570 710000 12                 TRA     s:8182
        12 001530   001570 710000 12                 TRA     s:8182
        12 001531   001541 710000 12                 TRA     s:8166
        12 001532   001544 710000 12                 TRA     s:8168
        12 001533   001547 710000 12                 TRA     s:8170
        12 001534   001552 710000 12                 TRA     s:8172
        12 001535   001555 710000 12                 TRA     s:8174
        12 001536   001560 710000 12                 TRA     s:8176
        12 001537   001563 710000 12                 TRA     s:8178
        12 001540   001566 710000 12                 TRA     s:8180

     2254     8165    4                  CASE(1);

     2255     8166    4                    ICB.SRCHCOND.DELF = %YES#;

   8166 12 001541   000400 236003                    LDQ     256,DU
        12 001542   000167 256000 xsym               ORSQ    ICB+119
        12 001543   001570 710000 12                 TRA     s:8182

     2256     8167    4                  CASE(2);

     2257     8168    4                    ICB.SRCHCOND.NOLIST = %YES#;

   8168 12 001544   000200 236003                    LDQ     128,DU
        12 001545   000167 256000 xsym               ORSQ    ICB+119
        12 001546   001570 710000 12                 TRA     s:8182

     2258     8169    4                  CASE(3);

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:367  
     2259     8170    4                    ICB.SRCHCOND.BUF = %YES#;

   8170 12 001547   000100 236003                    LDQ     64,DU
        12 001550   000167 256000 xsym               ORSQ    ICB+119
        12 001551   001570 710000 12                 TRA     s:8182

     2260     8171    4                  CASE(4);

     2261     8172    4                    ICB.SRCHCOND.BAD = %YES#;

   8172 12 001552   000020 236003                    LDQ     16,DU
        12 001553   000167 256000 xsym               ORSQ    ICB+119
        12 001554   001570 710000 12                 TRA     s:8182

     2262     8173    4                  CASE(5);

     2263     8174    4                    ICB.SRCHCOND.ANYF = %YES#;

   8174 12 001555   400000 236007                    LDQ     -131072,DL
        12 001556   000167 256000 xsym               ORSQ    ICB+119
        12 001557   001570 710000 12                 TRA     s:8182

     2264     8175    4                  CASE(6);

     2265     8176    4                    ICB.SRCHCOND.REV = %YES#;

   8176 12 001560   001000 236007                    LDQ     512,DL
        12 001561   000167 256000 xsym               ORSQ    ICB+119
        12 001562   001570 710000 12                 TRA     s:8182

     2266     8177    4                  CASE(7);

     2267     8178    4                    ICB.SRCHCOND.QS = %YES#;

   8178 12 001563   000010 236003                    LDQ     8,DU
        12 001564   000167 256000 xsym               ORSQ    ICB+119
        12 001565   001570 710000 12                 TRA     s:8182
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:368  

     2268     8179    4                  CASE(8);

     2269     8180    4                    ICB.SRCHCOND.ARCHIVE = %YES#;

   8180 12 001566   000001 236003                    LDQ     1,DU
        12 001567   000167 256000 xsym               ORSQ    ICB+119

     2270     8181    4                  END;                     /* END CASE                           */

     2271     8182    3                 END;

   8182 12 001570   200011 235100                    LDA     I,,AUTO
        12 001571   000001 035007                    ADLA    1,DL
        12 001572   200011 755100                    STA     I,,AUTO
        12 001573   000000 471500                    LDP1    0,,PR0
        12 001574   100001 236100                    LDQ     1,,PR1
        12 001575   000022 772000                    QRL     18
        12 001576   200011 116100                    CMPQ    I,,AUTO
        12 001577   001601 600000 12                 TZE     s:8182+9
        12 001600   001520 603000 12                 TRC     s:8164
        12 001601   002055 710000 12                 TRA     s:8267

     2272     8183    2            CASE(26);                      /* FFID                               */

     2273     8184    2              ICB.FFID = '1'B;

   8184 12 001602   400000 236003                    LDQ     -131072,DU
        12 001603   000137 756000 xsym               STQ     ICB+95
        12 001604   002055 710000 12                 TRA     s:8267

     2274     8185    2            CASE(27);                      /* NHEAD option                       */

     2275     8186    2              ICB.HEAD_OPT = 1;

   8186 12 001605   000001 236007                    LDQ     1,DL
        12 001606   000015 756000 xsym               STQ     ICB+13
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:369  
        12 001607   002055 710000 12                 TRA     s:8267

     2276     8187    2            CASE(28);                      /* HEAD option                        */

     2277     8188    2              ICB.HEAD_OPT = 2;

   8188 12 001610   000002 236007                    LDQ     2,DL
        12 001611   000015 756000 xsym               STQ     ICB+13
        12 001612   002055 710000 12                 TRA     s:8267

     2278     8189    2            CASE(29);                      /* CREATOR select option              */

     2279     8190    2              I=0;

   8190 12 001613   200011 450100                    STZ     I,,AUTO

     2280     8191    3              IF OPT$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE=99 THEN DO;

   8191 12 001614   000000 471500                    LDP1    0,,PR0
        12 001615   100003 473500                    LDP3    3,,PR1
        12 001616   300000 720100                    LXL0    0,,PR3
        12 001617   000143 100003                    CMPX0   99,DU
        12 001620   001625 601000 12                 TNZ     s:8195

     2281     8192    3                  I=1;

   8192 12 001621   000001 236007                    LDQ     1,DL
        12 001622   200011 756100                    STQ     I,,AUTO

     2282     8193    3                  ICB.CREATOR_NEG = '1'B;

   8193 12 001623   400000 236003                    LDQ     -131072,DU
        12 001624   000174 756000 xsym               STQ     ICB+124

     2283     8194    3                  END;

     2284     8195    2              IF OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.TEXT = 'ME'
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:370  

   8195 12 001625   000000 471500                    LDP1    0,,PR0
        12 001626   200011 720100                    LXL0    I,,AUTO
        12 001627   100003 473510                    LDP3    3,X0,PR1
        12 001630   300004 236100                    LDQ     4,,PR3
        12 001631   000033 772000                    QRL     27
        12 001632   000000 621006                    EAX1    0,QL
        12 001633   040000 106540                    CMPC    fill='040'O
        12 001634   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
        12 001635   000330 000002 10                 ADSC9   OPT_TBL+216              cn=0,n=2
        12 001636   001643 600000 12                 TZE     s:8199
        12 001637   040000 106540                    CMPC    fill='040'O
        12 001640   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
        12 001641   000331 000002 10                 ADSC9   OPT_TBL+217              cn=0,n=2
        12 001642   001653 601000 12                 TNZ     s:8204

     2285     8196    2                OR OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.TEXT = 'me'
     2286     8197    2               THEN
     2287     8198    3               DO;

     2288     8199    3                  ICB.CREATOR_SEL = 1;

   8199 12 001643   000001 235007                    LDA     1,DL
        12 001644   000173 755000 xsym               STA     ICB+123

     2289     8200    3                  ICB.CREATOR.TEXT = 'you';

   8200 12 001645   040000 100400                    MLR     fill='040'O
        12 001646   000332 000003 10                 ADSC9   OPT_TBL+218              cn=0,n=3
        12 001647   000175 200025 xsym               ADSC9   ICB+125                  cn=1,n=21

     2290     8201    3                  ICB.CREATOR.C = 3;

   8201 12 001650   003000 236003                    LDQ     1536,DU
        12 001651   000175 552040 xsym               STBQ    ICB+125,'40'O

     2291     8202    3                  GOTO CREATOR_DONE;
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:371  

   8202 12 001652   001745 710000 12                 TRA     CREATOR_DONE

     2292     8203    3                  END;
     2293     8204    2              IF NOT B$JIT$ -> B$JIT.PRIV.ACTIVE & %PR_FMSEC#

   8204 12 001653   000000 474400 xsym               LDP4    B$JIT$
        12 001654   400013 236100                    LDQ     11,,PR4
        12 001655   000333 376000 10                 ANQ     OPT_TBL+219
        12 001656   001677 601000 12                 TNZ     s:8213

     2294     8205    2               THEN
     2295     8206    3               DO;

     2296     8207    3                  CALL VPL$ERR_PROC(3,37,'06'O,,,,,1); /* ABORT and return       */

   8207 12 001657   000002 236000 13                 LDQ     2
        12 001660   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001661   200022 757100                    STAQ    J+8,,AUTO
        12 001662   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001663   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001664   200020 757100                    STAQ    J+6,,AUTO
        12 001665   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001666   000003 235000 13                 LDA     3
        12 001667   200016 757100                    STAQ    J+4,,AUTO
        12 001670   000110 237000 13                 LDAQ    72
        12 001671   200014 757100                    STAQ    J+2,,AUTO
        12 001672   200014 630500                    EPPR0   J+2,,AUTO
        12 001673   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001674   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001675   000000 011000                    NOP     0

     2297     8208        /*E* ERROR:   VPF-00037
     2298     8209             MESSAGE: Arbitrary CREATOR selection requires FMSEC PRIV turned on
     2299     8210        */
     2300     8211    3                  ALTRETURN;

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:372  
   8211 12 001676   000000 702200 xent               TSX2  ! X66_AALT

     2301     8212    3                  END;
     2302     8213    2              IF OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.COUNT > 21

   8213 12 001677   300004 236100                    LDQ     4,,PR3
        12 001700   777000 376003                    ANQ     -512,DU
        12 001701   026000 116003                    CMPQ    11264,DU
        12 001702   001711 603000 12                 TRC     BAD_CREATOR

     2303     8214    2               THEN
     2304     8215    2                 GOTO BAD_CREATOR;
     2305     8216    2              CALL INDEX (J,',',OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.TEXT)

   8216 12 001703   000000 124540                    SCM     mask='000'O
        12 001704   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
        12 001705   000112 000001 13                 ADSC9   74                       cn=0,n=1
        12 001706   200012 000100                    ARG     J,,AUTO
        12 001707   001711 606400 12                 TTN     BAD_CREATOR
        12 001710   001731 710000 12                 TRA     s:8225

     2306     8217    3               WHENALTRETURN DO;

   8216 12 001711                       BAD_CREATOR  null
     2307     8218    3   BAD_CREATOR:   ;
     2308     8219    3                  CALL VPL$ERR_PROC(3,35,'06'O,,,,,1); /* ABORT and return       */

   8219 12 001711   000002 236000 13                 LDQ     2
        12 001712   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001713   200022 757100                    STAQ    J+8,,AUTO
        12 001714   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001715   000001 235000 xsym               LDA     B_VECTNIL+1
        12 001716   200020 757100                    STAQ    J+6,,AUTO
        12 001717   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 001720   000003 235000 13                 LDA     3
        12 001721   200016 757100                    STAQ    J+4,,AUTO
        12 001722   000114 237000 13                 LDAQ    76
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:373  
        12 001723   200014 757100                    STAQ    J+2,,AUTO
        12 001724   200014 630500                    EPPR0   J+2,,AUTO
        12 001725   000026 631400 xsym               EPPR1   B_VECTNIL+22
        12 001726   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 001727   000000 011000                    NOP     0

     2309     8220        /*E* ERROR:   VPF-00035
     2310     8221             MESSAGE: Bad CREATOR
     2311     8222        */
     2312     8223    3                  ALTRETURN;

   8223 12 001730   000000 702200 xent               TSX2  ! X66_AALT

     2313     8224    3                  END;
     2314     8225    2              ICB.CREATOR.C = OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.COUNT;

   8225 12 001731   300004 236100                    LDQ     4,,PR3
        12 001732   000175 552040 xsym               STBQ    ICB+125,'40'O

     2315     8226    2              ICB.CREATOR.TEXT = OPT$ -> OUT$BLK.SUBLK$(I) -> OUT$SYM.TEXT;

   8226 12 001733   000000 471500                    LDP1    0,,PR0
        12 001734   100003 473510                    LDP3    3,X0,PR1
        12 001735   300004 236100                    LDQ     4,,PR3
        12 001736   000033 772000                    QRL     27
        12 001737   000000 621006                    EAX1    0,QL
        12 001740   040000 100540                    MLR     fill='040'O
        12 001741   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
        12 001742   000175 200025 xsym               ADSC9   ICB+125                  cn=1,n=21

     2316     8227    2              ICB.CREATOR_SEL = 2;

   8227 12 001743   000002 236007                    LDQ     2,DL
        12 001744   000173 756000 xsym               STQ     ICB+123

   8227 12 001745   002055 710000 12    CREATOR_DONE TRA     s:8267

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:374  
     2317     8228    2   CREATOR_DONE: ;
     2318     8229    2            CASE(30);                      /* Input files in SORTED order        */

     2319     8230    2              ICB.SORTING_ORDER.COUNT = OPT$ -> OUT$BLK.NSUBLKS;

   8230 12 001746   000000 471500                    LDP1    0,,PR0
        12 001747   100001 236100                    LDQ     1,,PR1
        12 001750   000022 772000                    QRL     18
        12 001751   000204 756000 xsym               STQ     ICB+132

     2320     8231    3              DO I=0 TO (OPT$ -> OUT$BLK.NSUBLKS -1);

   8231 12 001752   200011 450100                    STZ     I,,AUTO
        12 001753   002012 710000 12                 TRA     s:8241+3

     2321     8232    3                 T$ = OPT$ -> OUT$BLK.SUBLK$(I);

   8232 12 001754   200003 470500                    LDP0    @OPT$,,AUTO
        12 001755   000000 471500                    LDP1    0,,PR0
        12 001756   200011 720100                    LXL0    I,,AUTO
        12 001757   100003 236110                    LDQ     3,X0,PR1
        12 001760   200006 756100                    STQ     T$,,AUTO

     2322     8233    3                 J = T$ -> OUT$BLK.NSUBLKS;

   8233 12 001761   200006 473500                    LDP3    T$,,AUTO
        12 001762   300001 236100                    LDQ     1,,PR3
        12 001763   000022 772000                    QRL     18
        12 001764   200012 756100                    STQ     J,,AUTO

     2323     8234    3                 ICB.SORTING_ORDER.FIELD.TYPE(I) =

   8234 12 001765   200011 235100                    LDA     I,,AUTO
        12 001766   000001 735000                    ALS     1
        12 001767   300002 474506                    LDP4    2,QL,PR3
        12 001770   400000 236100                    LDQ     0,,PR4
        12 001771   777777 376007                    ANQ     -1,DL
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:375  
        12 001772   000206 756005 xsym               STQ     ICB+134,AL

     2324     8235    3                   T$ -> OUT$BLK.SUBLK$(J-1) -> OUT$BLK.CODE;
     2325     8236    3                 IF J=2

   8236 12 001773   200012 235100                    LDA     J,,AUTO
        12 001774   000002 115007                    CMPA    2,DL
        12 001775   002007 601000 12                 TNZ     s:8241

     2326     8237    3                  THEN                     /* ASC/DESC order specified           */
     2327     8238    3                    IF T$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE = 1

   8238 12 001776   300003 471500                    LDP1    3,,PR3
        12 001777   100000 721100                    LXL1    0,,PR1
        12 002000   000001 101003                    CMPX1   1,DU
        12 002001   002007 601000 12                 TNZ     s:8241

     2328     8239    3                     THEN
     2329     8240    3                       ICB.SORTING_ORDER.FIELD.DESCENDING(I) = '1'B;

   8240 12 002002   200011 236100                    LDQ     I,,AUTO
        12 002003   000001 736000                    QLS     1
        12 002004   000000 622006                    EAX2    0,QL
        12 002005   400000 236003                    LDQ     -131072,DU
        12 002006   000205 756012 xsym               STQ     ICB+133,X2

     2330     8241    3                 END;                      /* END CASE                           */

   8241 12 002007   200011 236100                    LDQ     I,,AUTO
        12 002010   000001 036007                    ADLQ    1,DL
        12 002011   200011 756100                    STQ     I,,AUTO
        12 002012   000000 471500                    LDP1    0,,PR0
        12 002013   100001 236100                    LDQ     1,,PR1
        12 002014   000022 772000                    QRL     18
        12 002015   200011 116100                    CMPQ    I,,AUTO
        12 002016   002020 600000 12                 TZE     s:8241+9
        12 002017   001754 603000 12                 TRC     s:8232
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:376  
        12 002020   002055 710000 12                 TRA     s:8267

     2331     8242    2            CASE(31);                      /* CLOSE POSITION option              */

     2332     8243    2              ICB.CLPOS = OPT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE;

   8243 12 002021   000000 471500                    LDP1    0,,PR0
        12 002022   100003 473500                    LDP3    3,,PR1
        12 002023   300000 236100                    LDQ     0,,PR3
        12 002024   777777 376007                    ANQ     -1,DL
        12 002025   000233 756000 xsym               STQ     ICB+155
        12 002026   002055 710000 12                 TRA     s:8267

     2333     8244    2            CASE(32);                      /* FATTRIBUTES                        */

     2334     8245    2              ICB.A_EA_C = 5;

   8245 12 002027   000005 236007                    LDQ     5,DL
        12 002030   000014 756000 xsym               STQ     ICB+12
        12 002031   002055 710000 12                 TRA     s:8267

     2335     8246    2            CASE(33);                      /* IOERROK                            */

     2336     8247    2              ICB.FLAVOR.IOERROK = %YES#;

   8247 12 002032   000400 236003                    LDQ     256,DU
        12 002033   000172 256000 xsym               ORSQ    ICB+122
        12 002034   002055 710000 12                 TRA     s:8267

     2337     8248    2            CASE(34);                      /* NIOERROK                           */

     2338     8249    2              ICB.FLAVOR.IOERROK = %NO#;

   8249 12 002035   000116 236000 13                 LDQ     78
        12 002036   000172 356000 xsym               ANSQ    ICB+122
        12 002037   002055 710000 12                 TRA     s:8267

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:377  
     2339     8250    2            CASE(35);                      /* IGNOREFSN                          */

     2340     8251    2              ICB.IGNOREFSN = %YES#;

   8251 12 002040   400000 236003                    LDQ     -131072,DU
        12 002041   000236 756000 xsym               STQ     ICB+158
        12 002042   002055 710000 12                 TRA     s:8267

     2341     8252    2            CASE(36);                      /* NIGNOREFSN                         */

     2342     8253    2              ICB.IGNOREFSN = %NO#;

   8253 12 002043   000236 450000 xsym               STZ     ICB+158
        12 002044   002055 710000 12                 TRA     s:8267

     2343     8254    2            CASE(37);                      /* ANSISPAN                           */

     2344     8255    2              ICB.ANSISPAN = %YES#;

   8255 12 002045   400000 236003                    LDQ     -131072,DU
        12 002046   000237 256000 xsym               ORSQ    ICB+159

     2345     8256    2              ANSISPAN_OPT = %YES#;

   8256 12 002047   000000 756000 xsym               STQ     ANSISPAN_OPT
        12 002050   002055 710000 12                 TRA     s:8267

     2346     8257    2            CASE(38);                      /* NANSISPAN                          */

     2347     8258    2              ICB.ANSISPAN = %YES#;

   8258 12 002051   400000 236003                    LDQ     -131072,DU
        12 002052   000237 256000 xsym               ORSQ    ICB+159

     2348     8259    2              ANSISPAN_OPT = %NO#;

   8259 12 002053   000000 450000 xsym               STZ     ANSISPAN_OPT
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:378  
        12 002054   002055 710000 12                 TRA     s:8267

     2349     8260    2            CASE(%(MAX_IN_OP#+1));         /* SPARE1 for PATCHING only           */

     2350     8261    2              ;
     2351     8262    2            CASE(%(MAX_IN_OP#+2));         /* SPARE2                             */

     2352     8263    2              ;
     2353     8264    2            CASE(%(MAX_IN_OP#+3));         /* SPARE3                             */

     2354     8265    2              ;
     2355     8266    2            END;                           /* END CASE                           */

     2356     8267    1           RETURN;

   8267 12 002055   000000 702200 xent               TSX2  ! X66_ARET
     2357     8268    1   END VPF$PROCESS_INPUT_OPT;
     2358     8269        %EOD;

PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:379  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$PROCESS_INPUT_OPT.
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:380  

 **** Variables and constants ****

  ****  Section 010 RoData VPF$PROCESS_INPUT_OPT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 OPT_TBL(0:41)

  ****  Section 011  Data  VPF$PROCESS_INPUT_OPT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 DATE_TYPE                  2-0-0/d STRC(432)   r     1 FPT_MAKE_TIME

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @OPT$                     10-0-0/w PTR         r     1 FROM_KEY$
    11-0-0/w UBIN        r     1 I                         12-0-0/w SBIN        r     1 J
    *0-0-0/w PTR         r     1 OPT$                       4-0-0/w SBIN        r     1 OPT_CODE
     6-0-0/w PTR         r     1 T$                         7-0-0/w PTR         r     1 TO_KEY$
     5-0-0/w UBIN        r     1 TWORD

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT (2)     r     1 ANSISPAN_OPT               0-0-0/w PTR         r     1 B$JIT$
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b BIT         r     1 CMD_MASK(0:71)
     0-0-0/b BIT         r     1 CON_DUP_TBL(0:35)
     0-0-0/d STRC(5868)  r     1 ICB                        0-0-0/c CHAR(4)     r     1 IN_RES
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:381  
     0-0-0/w PTR         r     1 KEY_AREA$                  0-0-0/c STRC(162)   r     1 ORG_TBL(0:8191)
     0-0-0/w SBIN        r     1 REC_SEL_CNT                0-0-0/d STRC(324)   r     1 RESULTS_FID_IN

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/w STRC(144)   r     1 OUT$BLK
     0-0-0/w ASTR(153)   r     1 OUT$SYM                    0-0-0/c ASTR(9)     r     1 TEXT$C


   Procedure VPF$PROCESS_INPUT_OPT requires 1070 words for executable code.
   Procedure VPF$PROCESS_INPUT_OPT requires 20 words of local(AUTO) storage.
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:382  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:383  
          MINI XREF LISTING

ANSISPAN_OPT
      5875**DCL      8256<<ASSIGN   8259<<ASSIGN
B$JIT.CPFLAGS1.SLEAZE
       137**DCL       137--REDEF
B$JIT.ERR.MID
        44**DCL        44--REDEF
B$JIT.JRESPEAK
       205**DCL       206--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       314**DCL       314--REDEF     315--REDEF
B$JIT.PNR
       218**DCL       218--REDEF
B$JIT.PRIV.ACTIVE
        44**DCL      8204>>IF
B$JIT.TSLINE
       312**DCL       313--REDEF
B$JIT$
      6291**DCL        38--IMP-PTR  8204>>IF
BAD_BLKL
      8119**LABEL    8114--CALLALT
BAD_CAT
      7884**LABEL    7879--CALLALT
BAD_COLS
      7905**LABEL    7900--CALLALT
BAD_CREATOR
      8216**LABEL    8215--GOTO
BAD_CRPT
      7893**LABEL    7891--CALLALT
BAD_FSN
      7955**LABEL    7931--CALLALT  7938--CALLALT
BAD_KEY1
      8013**LABEL    8003--CALLALT
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:384  
BAD_KEY2
      8033**LABEL    8027--CALLALT
BAD_RECL
      8130**LABEL    8125--CALLALT
BAD_SEL_DATE
      8156**LABEL    8142--CALLALT
BAD_VOL
      8096**LABEL    8091--CALLALT
BREAK_LOC
      5526**DCL      5526--REDEF
CMD_MASK
      5528**DCL      7859>>IF
CON_DUP_TBL
      5524**DCL      7849>>IF       7872<<ASSIGN
CREATOR_DONE
      8227**LABEL    8202--GOTO
DATE_TYPE
      7611**DCL      8142<>CALL     8144>>DOCASE
DEF_ICB.FID.STRING
      6124**DCL      6125--REDEF
DEV_ICB.FID.STRING
      6010**DCL      6011--REDEF
EI_KEY.KEY
      6222**DCL      6222--REDEF    6222--REDEF    6222--REDEF
EO_OCB.TYPE
      5722**DCL      5723--REDEF
FPT_CLOSE_EI.SN_
      7063**DCL      7063--REDEF
FPT_CLOSE_EI.UTL_
      7064**DCL      7064--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      7078**DCL      7078--REDEF
FPT_CLOSE_EI.V.TYPE#
      7076**DCL      7076--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      7073**DCL      7073--REDEF    7075--REDEF
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:385  
FPT_CLOSE_PTL.SN_
      7189**DCL      7189--REDEF
FPT_CLOSE_PTL.UTL_
      7190**DCL      7190--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      7204**DCL      7204--REDEF
FPT_CLOSE_PTL.V.TYPE#
      7202**DCL      7202--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      7199**DCL      7199--REDEF    7201--REDEF
FPT_CLOSE_READ.SN_
      7105**DCL      7105--REDEF
FPT_CLOSE_READ.UTL_
      7106**DCL      7106--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      7120**DCL      7120--REDEF
FPT_CLOSE_READ.V.TYPE#
      7118**DCL      7118--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      7115**DCL      7115--REDEF    7117--REDEF
FPT_CLOSE_SI.SN_
      7273**DCL      7273--REDEF
FPT_CLOSE_SI.UTL_
      7274**DCL      7274--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      7288**DCL      7288--REDEF
FPT_CLOSE_SI.V.TYPE#
      7286**DCL      7286--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      7283**DCL      7283--REDEF    7285--REDEF
FPT_CLOSE_STD.SN_
      7231**DCL      7231--REDEF
FPT_CLOSE_STD.UTL_
      7232**DCL      7232--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      7246**DCL      7246--REDEF
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:386  
FPT_CLOSE_STD.V.TYPE#
      7244**DCL      7244--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      7241**DCL      7241--REDEF    7243--REDEF
FPT_CLSEI_FT.SN_
      7147**DCL      7147--REDEF
FPT_CLSEI_FT.UTL_
      7148**DCL      7148--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      7162**DCL      7162--REDEF
FPT_CLSEI_FT.V.TYPE#
      7160**DCL      7160--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      7157**DCL      7157--REDEF    7159--REDEF
FPT_MAKE_TIME
      7628**DCL      8146<>CALL
FPT_MAKE_TIME.V
      7632**DCL      7628--DCLINIT
FPT_OPEN_EI.ACSVEH_
      6718**DCL      6719--REDEF
FPT_OPEN_EI.ALTKEYS_
      6724**DCL      6725--REDEF    6725--REDEF
FPT_OPEN_EI.HDR_
      6723**DCL      6724--REDEF
FPT_OPEN_EI.TAB_
      6722**DCL      6723--REDEF
FPT_OPEN_EI.UHL_
      6716**DCL      6717--REDEF    6717--REDEF
FPT_OPEN_EI.V.FSN#
      6756**DCL      6756--REDEF    6756--REDEF
FPT_OPEN_EI.WSN_
      6722**DCL      6722--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6827**DCL      6828--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6833**DCL      6834--REDEF    6834--REDEF
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:387  
FPT_OPEN_EI_SAVE.HDR_
      6832**DCL      6833--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6831**DCL      6832--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6825**DCL      6826--REDEF    6826--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6865**DCL      6865--REDEF    6865--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6831**DCL      6831--REDEF
FPT_OPEN_OUT.ACSVEH_
      6609**DCL      6610--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6615**DCL      6616--REDEF    6616--REDEF
FPT_OPEN_OUT.HDR_
      6614**DCL      6615--REDEF
FPT_OPEN_OUT.TAB_
      6613**DCL      6614--REDEF
FPT_OPEN_OUT.UHL_
      6607**DCL      6608--REDEF    6608--REDEF
FPT_OPEN_OUT.V.FSN#
      6647**DCL      6647--REDEF    6647--REDEF
FPT_OPEN_OUT.WSN_
      6613**DCL      6613--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6500**DCL      6501--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6506**DCL      6507--REDEF    6507--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6505**DCL      6506--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6504**DCL      6505--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6498**DCL      6499--REDEF    6499--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6538**DCL      6538--REDEF    6538--REDEF
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:388  
FPT_OPEN_OUT_SAVE.WSN_
      6504**DCL      6504--REDEF
FPT_READ_STD.STATION_
      6928**DCL      6929--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6940**DCL      6940--REDEF
FPT_READ_STD.V.INDX#
      6938**DCL      6938--REDEF
FPT_READ_UC.STATION_
      6889**DCL      6890--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6901**DCL      6901--REDEF
FPT_READ_UC.V.INDX#
      6899**DCL      6899--REDEF
FPT_WRITE_ME.STATION_
      6997**DCL      6997--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      7004**DCL      7004--REDEF
FPT_WRITE_OUT.STATION_
      7028**DCL      7028--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      7035**DCL      7035--REDEF
FPT_WRITE_UC.STATION_
      6966**DCL      6966--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6973**DCL      6973--REDEF
FROM_KEY$
        26**DCL      8002<<ASSIGN   8003<>CALL     8022<<ASSIGN   8027<>CALL
FROM_SN.SN
      5872**DCL      5873--REDEF
GETCMD.OUT$
      5079**DCL      5085--REDEF
GOOD_BLKL
      8117**LABEL    8118--GOTO
GOOD_CAT
      7882**LABEL    7883--GOTO
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:389  
GOOD_COLS
      7910**LABEL    7904--GOTO
GOOD_FSN
      7955**LABEL    7954--GOTO
GOOD_RECL
      8128**LABEL    8129--GOTO
GOOD_VOL
      8094**LABEL    8095--GOTO
I
        27**DCL      7964<<ASSIGN   7965>>IF       7968>>ASSIGN   8035<<ASSIGN   8039<<ASSIGN   8040>>IF
      8071<<ASSIGN   8074<<ASSIGN   8076>>DOWHILE  8077>>ASSIGN   8087<<ASSIGN   8087>>ASSIGN   8111<<ASSIGN
      8112>>ASSIGN   8163<<DOINDEX  8164>>DOCASE   8190<<ASSIGN   8192<<ASSIGN   8195>>IF       8195>>IF
      8195>>IF       8195>>IF       8213>>IF       8216>>CALLBLT  8216>>CALLBLT  8225>>ASSIGN   8226>>ASSIGN
      8226>>ASSIGN   8231<<DOINDEX  8232>>ASSIGN   8234>>ASSIGN   8240>>ASSIGN
ICB.ANSISPAN
      5983**DCL      8255<<ASSIGN   8258<<ASSIGN
ICB.A_EA_C
      5890**DCL      7877<<ASSIGN   7903<<ASSIGN   7916<<ASSIGN   8245<<ASSIGN
ICB.BIN
      5879**DCL      8105<<ASSIGN   8107<<ASSIGN
ICB.BLKL
      5888**DCL      8117<<ASSIGN
ICB.CAT
      5932**DCL      7882<<ASSIGN
ICB.CLPOS
      5979**DCL      8243<<ASSIGN
ICB.COLS
      5892**DCL      7900<>CALL     7910>>IF       7912<<ASSIGN
ICB.CREATOR.C
      5969**DCL      8201<<ASSIGN   8225<<ASSIGN
ICB.CREATOR.TEXT
      5970**DCL      8200<<ASSIGN   8226<<ASSIGN
ICB.CREATOR_NEG
      5967**DCL      8193<<ASSIGN
ICB.CREATOR_SEL
      5966**DCL      8199<<ASSIGN   8227<<ASSIGN
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:390  
ICB.CRPT
      5885**DCL      7891<>CALL
ICB.DATE.RELATION
      5929**DCL      8141<<ASSIGN
ICB.DATE.ROUNDING_TYPE
      5928**DCL      8142<>CALL
ICB.DATE.TEXT
      5931**DCL      7628--DCLINIT  7629--DCLINIT  8148<<ASSIGN   8151<<ASSIGN   8153<<ASSIGN
ICB.DATE.TYPE
      5927**DCL      8140<<ASSIGN
ICB.DATE.UTS
      5930**DCL      7632--DCLINIT  8142<>CALL     8150<<ASSIGN
ICB.DEOD
      5886**DCL      7914<<ASSIGN
ICB.DEV_MASK
      5946**DCL      7865>>IF
ICB.EBCDIC
      5878**DCL      8103<<ASSIGN
ICB.FFID
      5918**DCL      8184<<ASSIGN
ICB.FID.STRING
      5896**DCL      5897--REDEF
ICB.FLAVOR.IOERROK
      5956**DCL      8247<<ASSIGN   8249<<ASSIGN
ICB.FSN.FINISH
      5900**DCL      7941<<ASSIGN   7942>>IF
ICB.FSN.START
      5899**DCL      7934<<ASSIGN   7942>>IF
ICB.FTORG
      5925**DCL      8112<<ASSIGN
ICB.HEAD_OPT
      5891**DCL      8186<<ASSIGN   8188<<ASSIGN
ICB.IGNOREFSN
      5982**DCL      8251<<ASSIGN   8253<<ASSIGN
ICB.KEY_SEL
      5901**DCL      7999<<ASSIGN
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:391  
ICB.LREC_SEL
      5902**DCL      7995<<ASSIGN
ICB.NBLOCK
      5881**DCL      8138<<ASSIGN
ICB.NCNVRT
      5883**DCL      7918<<ASSIGN
ICB.NSPAN
      5880**DCL      8136<<ASSIGN
ICB.ORG
      5916**DCL      7962<<ASSIGN   7968<<ASSIGN
ICB.ORG_NEG
      5917**DCL      7966<<ASSIGN
ICB.PHYSICAL
      5887**DCL      7971<<ASSIGN
ICB.RECL
      5889**DCL      8128<<ASSIGN
ICB.REC_SEL.SPEC.FINISH
      5910**DCL      8052<<ASSIGN
ICB.REC_SEL.SPEC.FINISH.KEY$
      5911**DCL      7992<<ASSIGN   8006<<ASSIGN   8029<<ASSIGN   8037>>IF       8037>>IF
ICB.REC_SEL.SPEC.FINISH.SEQ
      5912**DCL      8024--ASSIGN   8040>>IF
ICB.REC_SEL.SPEC.START
      5907**DCL      8052>>ASSIGN
ICB.REC_SEL.SPEC.START.KEY$
      5908**DCL      7991<<ASSIGN   8005<<ASSIGN   8009<<ASSIGN   8036>>IF       8037>>IF       8037>>IF
ICB.REC_SEL.SPEC.START.SEQ
      5909**DCL      7996--ASSIGN   8040>>IF
ICB.REC_SEL.SPEC.TYPE
      5906**DCL      7990<<ASSIGN   8004>>IF       8023>>IF       8028>>IF
ICB.SHARE
      5884**DCL      7875<<ASSIGN
ICB.SORTING_ORDER.COUNT
      5975**DCL      8230<<ASSIGN
ICB.SORTING_ORDER.FIELD.DESCENDING
      5977**DCL      8240<<ASSIGN
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:392  
ICB.SORTING_ORDER.FIELD.TYPE
      5978**DCL      8234<<ASSIGN
ICB.SRCHCOND.ANYF
      5942**DCL      8174<<ASSIGN
ICB.SRCHCOND.ARCHIVE
      5941**DCL      8180<<ASSIGN
ICB.SRCHCOND.BAD
      5938**DCL      8172<<ASSIGN
ICB.SRCHCOND.BUF
      5936**DCL      8170<<ASSIGN
ICB.SRCHCOND.DELF
      5934**DCL      8166<<ASSIGN
ICB.SRCHCOND.NOLIST
      5935**DCL      8168<<ASSIGN
ICB.SRCHCOND.QS
      5939**DCL      8178<<ASSIGN
ICB.SRCHCOND.REV
      5944**DCL      8176<<ASSIGN
ICB.TRANS
      5882**DCL      8109<<ASSIGN
ICB.TYPE.COUNT
      5921**DCL      8070<<ASSIGN   8085>>ASSIGN   8086<<ASSIGN   8086>>ASSIGN
ICB.TYPE.NEG
      5922**DCL      8073<<ASSIGN
ICB.TYPE.STRING
      5923**DCL      8085<<ASSIGN
ICB.VOL
      5924**DCL      8094<<ASSIGN
IFSFA_PARAM.EOMCHAR#
      6251**DCL      6252--REDEF
IFSFA_PARAM.SIG1
      6245**DCL      6245--REDEF
IFSFA_PARAM.SIG2
      6245**DCL      6246--REDEF
IN_RES
      5818**DCL      5818--REDEF    7865>>IF
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:393  
IN_SN.SN
      5834**DCL      5835--REDEF
J
        28**DCL      8216<<CALLBLT  8233<<ASSIGN   8234>>ASSIGN   8236>>IF
KEY_AREA$
      6223**DCL      7973>>IF       7974<>CALL     8000>>ASSIGN   8009>>ASSIGN   8010<<ASSIGN   8010>>ASSIGN
      8010>>ASSIGN   8026>>ASSIGN   8029>>ASSIGN   8030<<ASSIGN   8030>>ASSIGN   8030>>ASSIGN
M$TIME
       403**DCL-ENT  8146--CALL
OCB.TYPE
      5580**DCL      5581--REDEF
OFSFA_PARAM.EOMCHAR#
      6281**DCL      6282--REDEF
OFSFA_PARAM.SIG1
      6275**DCL      6275--REDEF
OFSFA_PARAM.SIG2
      6275**DCL      6276--REDEF
OPT$
        21**DCL         6--PROC     7848>>ASSIGN   7879>>CALL     7891>>CALL     7900>>CALL     7931>>CALL
      7935>>IF       7938>>CALL     7963>>DOINDEX  7964>>ASSIGN   7989>>ASSIGN   8056>>IF       8072>>IF
      8076>>DOWHILE  8077>>ASSIGN   8091>>CALL     8111>>ASSIGN   8114>>CALL     8125>>CALL     8140>>ASSIGN
      8141>>ASSIGN   8142>>CALL     8163>>DOINDEX  8164>>DOCASE   8191>>IF       8195>>IF       8195>>IF
      8195>>IF       8195>>IF       8213>>IF       8216>>CALLBLT  8216>>CALLBLT  8225>>ASSIGN   8226>>ASSIGN
      8226>>ASSIGN   8230>>ASSIGN   8231>>DOINDEX  8232>>ASSIGN   8243>>ASSIGN
OPT_CODE
        22**DCL      7848<<ASSIGN   7849>>IF       7849>>IF       7859>>IF       7862>>CALL     7865>>IF
      7869>>CALL     7872>>ASSIGN   7873>>DOCASE
OPT_TBL.CMD.ALLOWED
      7379**DCL      7859>>IF
OPT_TBL.CMD.ERR_CODE
      7315**DCL      7862<>CALL
OPT_TBL.CON_DUP_IDX
      7401**DCL      7849>>IF       7849>>IF       7872>>ASSIGN
OPT_TBL.DEV.ALLOWED
      7417**DCL      7865>>IF
OPT_TBL.DEV.ERR_CODE
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:394  
      7440**DCL      7869<>CALL
ORG_TBL.ORG_MON
      6218**DCL      7968>>ASSIGN   8112>>ASSIGN
OUT$BLK.CODE
      7536**DCL      7848>>ASSIGN   7964>>ASSIGN   7990>>ASSIGN   7993>>IF       8018>>IF       8072>>IF
      8111>>ASSIGN   8140>>ASSIGN   8141>>ASSIGN   8164>>DOCASE   8191>>IF       8234>>ASSIGN   8238>>IF
      8243>>ASSIGN
OUT$BLK.NSUBLKS
      7540**DCL      7935>>IF       7963>>DOINDEX  8016>>IF       8056>>IF       8076>>DOWHILE  8163>>DOINDEX
      8230>>ASSIGN   8231>>DOINDEX  8233>>ASSIGN
OUT$BLK.SUBLK$
      7561**DCL      7879>>CALL     7879<>CALL     7891<>CALL     7900>>CALL     7900<>CALL     7931>>CALL
      7931<>CALL     7938>>CALL     7938<>CALL     7964>>ASSIGN   7989>>ASSIGN   8002>>ASSIGN   8018>>IF
      8022>>ASSIGN   8072>>IF       8077>>ASSIGN   8091>>CALL     8091<>CALL     8111>>ASSIGN   8114>>CALL
      8114<>CALL     8125>>CALL     8125<>CALL     8140>>ASSIGN   8141>>ASSIGN   8142<>CALL     8164>>DOCASE
      8191>>IF       8195>>IF       8195>>IF       8195>>IF       8195>>IF       8213>>IF       8216>>CALLBLT
      8216>>CALLBLT  8225>>ASSIGN   8226>>ASSIGN   8226>>ASSIGN   8232>>ASSIGN   8234>>ASSIGN   8238>>IF
      8243>>ASSIGN
OUT$SYM.COUNT
      7597**DCL      7600--IMP-SIZ  8078>>IF       8085>>ASSIGN   8195>>IF       8195>>IF       8213>>IF
      8216>>CALLBLT  8225>>ASSIGN   8226>>ASSIGN
OUT$SYM.TEXT
      7600**DCL      8085>>ASSIGN   8195>>IF       8195>>IF       8216>>CALLBLT  8226>>ASSIGN
OUT_SN.SN
      5852**DCL      5853--REDEF
REC_SEL_CNT
      5524**DCL      7978>>IF       7990>>ASSIGN   7991>>ASSIGN   7992>>ASSIGN   7996>>ASSIGN   8004>>IF
      8005>>ASSIGN   8006>>ASSIGN   8009>>ASSIGN   8023>>IF       8024>>ASSIGN   8028>>IF       8029>>ASSIGN
      8036>>IF       8037>>IF       8037>>IF       8037>>IF       8037>>IF       8040>>IF       8040>>IF
      8052>>ASSIGN   8052>>ASSIGN   8053<<ASSIGN   8053>>ASSIGN
RESULTS_FID_IN.NAME
      6328**DCL      7920>>IF
SPEC_BUF
      5530**DCL      5530--REDEF
T$
        24**DCL      7989<<ASSIGN   7990>>ASSIGN   7993>>IF       8002>>ASSIGN   8016>>IF       8018>>IF
PL6.E3A0      #005=VPF$PROCESS_INPUT_OPT File=VPF$SRCLST.:E05TSI                 WED 07/30/97 07:40 Page:395  
      8022>>ASSIGN   8077<<ASSIGN   8078>>IF       8085>>ASSIGN   8085>>ASSIGN   8232<<ASSIGN   8233>>ASSIGN
      8234>>ASSIGN   8238>>IF
TEXT$C.LEN
      7606**DCL      7607--IMP-SIZ  8010>>ASSIGN   8030>>ASSIGN   8037>>IF       8037>>IF
TEXT$C.STRING
      7607**DCL      8037>>IF       8037>>IF
TO_KEY$
        25**DCL      7996<<ASSIGN   8000<<ASSIGN   8003<>CALL     8024<<ASSIGN   8026<<ASSIGN   8027<>CALL
TWORD
        23**DCL      7879<>CALL     7882>>ASSIGN   7931<>CALL     7934>>ASSIGN   7938<>CALL     7941>>ASSIGN
      7963<<DOINDEX  7964>>ASSIGN   8091<>CALL     8094>>ASSIGN   8114<>CALL     8117>>ASSIGN   8125<>CALL
      8128>>ASSIGN
VPD$GET_BUF
      7686**DCL-ENT  7974--CALL
VPD$GET_KEY_OR_NUM
      7696**DCL-ENT  8003--CALL     8027--CALL
VPD$MNG_CRPT
      7832**DCL-ENT  7891--CALL
VPD$PROCESS_DATE
      7717**DCL-ENT  8142--CALL
VPD$TEXTC_CHARBIN
      7721**DCL-ENT  7879--CALL     7900--CALL     7931--CALL     7938--CALL     8091--CALL     8114--CALL
      8125--CALL
VPL$ERR_PROC
      7821**DCL-ENT  7853--CALL     7862--CALL     7869--CALL     7884--CALL     7893--CALL     7905--CALL
      7923--CALL     7945--CALL     7955--CALL     7976--CALL     7981--CALL     8044--CALL     8059--CALL
      8081--CALL     8096--CALL     8119--CALL     8130--CALL     8156--CALL     8207--CALL     8219--CALL

PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:396  
     2359        1        /*T***********************************************************/
     2360        2        /*T*                                                         */
     2361        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2362        4        /*T*                                                         */
     2363        5        /*T***********************************************************/
     2364        6        VPF$SET_FROM_INFO: PROC(FID$);
     2365        7        /*D* NAME: VPF$SET_FROM_INFO
     2366        8             CALL: CALL VPF$SET_FROM_INFO(FID$);
     2367        9                    where FID$ is a pointer to a PARSE OUT$SYM block containing the
     2368       10                    FROM fid.
     2369       11             DESCRIPTION: This procedure takes the fid found by FID$ and sends it
     2370       12                          through M$FID to fill in the FROM information needed
     2371       13                          by GET_NEXT_SPEC.
     2372       14        */
     2373       15        %INCLUDE VP_DATA_R;
     2374     7002        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
     2375     7040    1   DCL FID$ PTR;
     2376     7041        %FPT_FID(FPTN = FPT_FID_FROM,
     2377     7042                 NAME = FROM_NAME,
     2378     7043                 ACCT = FROM_ACCT,
     2379     7044                 PASS = FROM_PASS,
     2380     7045                 RES  = FROM_RES,
     2381     7046                 SN   = FROM_SN,
     2382     7047                 ASN  = FROM_ASN,
     2383     7048                 WSN  = FROM_WSN,
     2384     7049                 RESULTS = RESULTS_FID_FROM,
     2385     7050                 STCLASS = STATIC);
     2386     7073        /**/
     2387     7074        /*  ENTRY DCLS  */
     2388     7075        /**/
     2389     7076        %VP_ENTRIES (OMIT=VPF$SET_FROM_INFO);
     2390     7284        /**/
     2391     7285    1           FPT_FID_FROM.TEXTFID_   = VECTOR(FID$->OUT$SYM.TEXT);
     2392     7286    1           CALL VPD$FID(FPT_FID_FROM);
     2393     7287    1           IF FROM_NAME.LEN=0
     2394     7288    1            THEN
     2395     7289    1              RESULTS_FID_FROM.NAME='0'B;
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:397  
     2396     7290    1           RETURN;
     2397     7291    1   END VPF$SET_FROM_INFO;
     2398     7292        %EOD;

PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:398  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$SET_FROM_INFO.

   Procedure VPF$SET_FROM_INFO requires 22 words for executable code.
   Procedure VPF$SET_FROM_INFO requires 6 words of local(AUTO) storage.

PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:399  

 Object Unit name= VPF$SET_FROM_INFO                          File name= VPF$SRCLST.:E05TOU
 UTS= JUL 30 '97 07:42:47.60 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none    24     30  VPF$SET_FROM_INFO
   11   Proc  even  none    22     26  VPF$SET_FROM_INFO
   12  RoData even  none     2      2  VPF$SET_FROM_INFO

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes            yes      Std        1  VPF$SET_FROM_INFO
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:400  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VPD$FID
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              IN_RES                                FROM_NAME
     FROM_ACCT                             FROM_PASS                             FROM_RES
     FROM_SN                               FROM_WSN                              FROM_ASN
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
     RESULTS_FID_FROM                      B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:401  


     2359        1        /*T***********************************************************/
     2360        2        /*T*                                                         */
     2361        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2362        4        /*T*                                                         */
     2363        5        /*T***********************************************************/
     2364        6        VPF$SET_FROM_INFO: PROC(FID$);

      6 11 000000   000000 700200 xent  VPF$SET_FRO* TSX0  ! X66_AUTO_1
        11 000001   000006 000001                    ZERO    6,1

     2365        7        /*D* NAME: VPF$SET_FROM_INFO
     2366        8             CALL: CALL VPF$SET_FROM_INFO(FID$);
     2367        9                    where FID$ is a pointer to a PARSE OUT$SYM block containing the
     2368       10                    FROM fid.
     2369       11             DESCRIPTION: This procedure takes the fid found by FID$ and sends it
     2370       12                          through M$FID to fill in the FROM information needed
     2371       13                          by GET_NEXT_SPEC.
     2372       14        */
     2373       15        %INCLUDE VP_DATA_R;
     2374     7002        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
     2375     7040    1   DCL FID$ PTR;
     2376     7041        %FPT_FID(FPTN = FPT_FID_FROM,
     2377     7042                 NAME = FROM_NAME,
     2378     7043                 ACCT = FROM_ACCT,
     2379     7044                 PASS = FROM_PASS,
     2380     7045                 RES  = FROM_RES,
     2381     7046                 SN   = FROM_SN,
     2382     7047                 ASN  = FROM_ASN,
     2383     7048                 WSN  = FROM_WSN,
     2384     7049                 RESULTS = RESULTS_FID_FROM,
     2385     7050                 STCLASS = STATIC);
     2386     7073        /**/
     2387     7074        /*  ENTRY DCLS  */
     2388     7075        /**/
     2389     7076        %VP_ENTRIES (OMIT=VPF$SET_FROM_INFO);
     2390     7284        /**/
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:402  
     2391     7285    1           FPT_FID_FROM.TEXTFID_   = VECTOR(FID$->OUT$SYM.TEXT);

   7285 11 000002   200003 470500                    LDP0    @FID$,,AUTO
        11 000003   000000 471500                    LDP1    0,,PR0
        11 000004   100004 236100                    LDQ     4,,PR1
        11 000005   000033 772000                    QRL     27
        11 000006   000064 737000                    LLS     52
        11 000007   000140 135007                    SBLA    96,DL
        11 000010   200004 451500                    STP1    @FID$+1,,AUTO
        11 000011   200004 236100                    LDQ     @FID$+1,,AUTO
        11 000012   000000 036000 12                 ADLQ    0
        11 000013   000002 757000 10                 STAQ    FPT_FID_FROM+2

     2392     7286    1           CALL VPD$FID(FPT_FID_FROM);

   7286 11 000014   000001 630400 12                 EPPR0   1
        11 000015   000017 631400 xsym               EPPR1   B_VECTNIL+15
        11 000016   000000 701000 xent               TSX1    VPD$FID
        11 000017   000000 011000                    NOP     0

     2393     7287    1           IF FROM_NAME.LEN=0

   7287 11 000020   000000 236000 xsym               LDQ     FROM_NAME
        11 000021   777000 316003                    CANQ    -512,DU
        11 000022   000025 601000 11                 TNZ     s:7290

     2394     7288    1            THEN
     2395     7289    1              RESULTS_FID_FROM.NAME='0'B;

   7289 11 000023   000031 236000 xsym               LDQ     B_VECTNIL+25
        11 000024   000000 356000 xsym               ANSQ    RESULTS_FID_FROM

     2396     7290    1           RETURN;

   7290 11 000025   000000 702200 xent               TSX2  ! X66_ARET
     2397     7291    1   END VPF$SET_FROM_INFO;
     2398     7292        %EOD;
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:403  

PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:404  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$SET_FROM_INFO.
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:405  

 **** Variables and constants ****

  ****  Section 010  Data  VPF$SET_FROM_INFO

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(864)   r     1 FPT_FID_FROM

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FID$                     *0-0-0/w PTR         r     1 FID$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/c CHAR(8)     r     1 FROM_ACCT                  0-0-0/b UBIN(9)     r     1 FROM_ASN
     0-0-0/c STRC(288)   r     1 FROM_NAME                  0-0-0/c CHAR(8)     r     1 FROM_PASS
     0-0-0/c CHAR(4)     r     1 FROM_RES                   0-0-0/w STRC(1116)  r     1 FROM_SN
     0-0-0/c CHAR(8)     r     1 FROM_WSN                   0-0-0/d STRC(324)   r     1 RESULTS_FID_FROM

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(153)   r     1 OUT$SYM


   Procedure VPF$SET_FROM_INFO requires 22 words for executable code.
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:406  
   Procedure VPF$SET_FROM_INFO requires 6 words of local(AUTO) storage.
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:407  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:408  
          MINI XREF LISTING

BREAK_LOC
      5222**DCL      5222--REDEF
DEF_ICB.FID.STRING
      5820**DCL      5821--REDEF
DEV_ICB.FID.STRING
      5706**DCL      5707--REDEF
EI_KEY.KEY
      5918**DCL      5918--REDEF    5918--REDEF    5918--REDEF
EO_OCB.TYPE
      5418**DCL      5419--REDEF
FID$
      7040**DCL         6--PROC     7285>>ASSIGN   7285>>ASSIGN
FPT_CLOSE_EI.SN_
      6759**DCL      6759--REDEF
FPT_CLOSE_EI.UTL_
      6760**DCL      6760--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6774**DCL      6774--REDEF
FPT_CLOSE_EI.V.TYPE#
      6772**DCL      6772--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6769**DCL      6769--REDEF    6771--REDEF
FPT_CLOSE_PTL.SN_
      6885**DCL      6885--REDEF
FPT_CLOSE_PTL.UTL_
      6886**DCL      6886--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6900**DCL      6900--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6898**DCL      6898--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6895**DCL      6895--REDEF    6897--REDEF
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:409  
FPT_CLOSE_READ.SN_
      6801**DCL      6801--REDEF
FPT_CLOSE_READ.UTL_
      6802**DCL      6802--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6816**DCL      6816--REDEF
FPT_CLOSE_READ.V.TYPE#
      6814**DCL      6814--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6811**DCL      6811--REDEF    6813--REDEF
FPT_CLOSE_SI.SN_
      6969**DCL      6969--REDEF
FPT_CLOSE_SI.UTL_
      6970**DCL      6970--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6984**DCL      6984--REDEF
FPT_CLOSE_SI.V.TYPE#
      6982**DCL      6982--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6979**DCL      6979--REDEF    6981--REDEF
FPT_CLOSE_STD.SN_
      6927**DCL      6927--REDEF
FPT_CLOSE_STD.UTL_
      6928**DCL      6928--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6942**DCL      6942--REDEF
FPT_CLOSE_STD.V.TYPE#
      6940**DCL      6940--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6937**DCL      6937--REDEF    6939--REDEF
FPT_CLSEI_FT.SN_
      6843**DCL      6843--REDEF
FPT_CLSEI_FT.UTL_
      6844**DCL      6844--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6858**DCL      6858--REDEF
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:410  
FPT_CLSEI_FT.V.TYPE#
      6856**DCL      6856--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6853**DCL      6853--REDEF    6855--REDEF
FPT_FID_FROM
      7061**DCL      7286<>CALL
FPT_FID_FROM.TEXTFID_
      7061**DCL      7285<<ASSIGN
FPT_FID_FROM.V
      7065**DCL      7061--DCLINIT
FPT_OPEN_EI.ACSVEH_
      6414**DCL      6415--REDEF
FPT_OPEN_EI.ALTKEYS_
      6420**DCL      6421--REDEF    6421--REDEF
FPT_OPEN_EI.HDR_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.TAB_
      6418**DCL      6419--REDEF
FPT_OPEN_EI.UHL_
      6412**DCL      6413--REDEF    6413--REDEF
FPT_OPEN_EI.V.FSN#
      6452**DCL      6452--REDEF    6452--REDEF
FPT_OPEN_EI.WSN_
      6418**DCL      6418--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6523**DCL      6524--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6529**DCL      6530--REDEF    6530--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6527**DCL      6528--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6521**DCL      6522--REDEF    6522--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6561**DCL      6561--REDEF    6561--REDEF
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:411  
FPT_OPEN_EI_SAVE.WSN_
      6527**DCL      6527--REDEF
FPT_OPEN_OUT.ACSVEH_
      6305**DCL      6306--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6311**DCL      6312--REDEF    6312--REDEF
FPT_OPEN_OUT.HDR_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.TAB_
      6309**DCL      6310--REDEF
FPT_OPEN_OUT.UHL_
      6303**DCL      6304--REDEF    6304--REDEF
FPT_OPEN_OUT.V.FSN#
      6343**DCL      6343--REDEF    6343--REDEF
FPT_OPEN_OUT.WSN_
      6309**DCL      6309--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6196**DCL      6197--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6202**DCL      6203--REDEF    6203--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6200**DCL      6201--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6194**DCL      6195--REDEF    6195--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6234**DCL      6234--REDEF    6234--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6200**DCL      6200--REDEF
FPT_READ_STD.STATION_
      6624**DCL      6625--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6636**DCL      6636--REDEF
FPT_READ_STD.V.INDX#
      6634**DCL      6634--REDEF
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:412  
FPT_READ_UC.STATION_
      6585**DCL      6586--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6597**DCL      6597--REDEF
FPT_READ_UC.V.INDX#
      6595**DCL      6595--REDEF
FPT_WRITE_ME.STATION_
      6693**DCL      6693--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6700**DCL      6700--REDEF
FPT_WRITE_OUT.STATION_
      6724**DCL      6724--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6731**DCL      6731--REDEF
FPT_WRITE_UC.STATION_
      6662**DCL      6662--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6669**DCL      6669--REDEF
FROM_ACCT
      5552**DCL      7062--DCLINIT
FROM_ASN
      5571**DCL      7064--DCLINIT
FROM_NAME
      5551**DCL      7062--DCLINIT
FROM_NAME.LEN
      5551**DCL      7287>>IF
FROM_PASS
      5552**DCL      7063--DCLINIT
FROM_RES
      5552**DCL      7064--DCLINIT
FROM_SN
      5563**DCL      7063--DCLINIT
FROM_SN.SN
      5568**DCL      5569--REDEF
FROM_WSN
      5571**DCL      7063--DCLINIT
PL6.E3A0      #006=VPF$SET_FROM_INFO File=VPF$SRCLST.:E05TSI                     WED 07/30/97 07:42 Page:413  
GETCMD.OUT$
      4775**DCL      4781--REDEF
ICB.FID.STRING
      5592**DCL      5593--REDEF
IFSFA_PARAM.EOMCHAR#
      5947**DCL      5948--REDEF
IFSFA_PARAM.SIG1
      5941**DCL      5941--REDEF
IFSFA_PARAM.SIG2
      5941**DCL      5942--REDEF
IN_RES
      5514**DCL      5514--REDEF
IN_SN.SN
      5530**DCL      5531--REDEF
OCB.TYPE
      5276**DCL      5277--REDEF
OFSFA_PARAM.EOMCHAR#
      5977**DCL      5978--REDEF
OFSFA_PARAM.SIG1
      5971**DCL      5971--REDEF
OFSFA_PARAM.SIG2
      5971**DCL      5972--REDEF
OUT$SYM.COUNT
      7032**DCL      7035--IMP-SIZ  7285>>ASSIGN
OUT$SYM.TEXT
      7035**DCL      7285--ASSIGN
OUT_SN.SN
      5548**DCL      5549--REDEF
RESULTS_FID_FROM
      6043**DCL      7065--DCLINIT
RESULTS_FID_FROM.NAME
      6043**DCL      7289<<ASSIGN
SPEC_BUF
      5226**DCL      5226--REDEF
VPD$FID
      7116**DCL-ENT  7286--CALL

PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:414  
     2399        1        /*T***********************************************************/
     2400        2        /*T*                                                         */
     2401        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2402        4        /*T*                                                         */
     2403        5        /*T***********************************************************/
     2404        6        VPF$SORT_FID: PROC(FUNCTION,SORT_STATUS);
     2405        7        /*D* NAME: VPF$SORT_FID
     2406        8             CALL: CALL VPF$SORT_FID(FUNCTION) ALTRET(TERRIBLE);
     2407        9             DESCRIPTION: This procedure allows us to take an input spec
     2408       10                 that refers to multiple files (such as a range or wildcard),
     2409       11                 and sort the files in some user-requested order before
     2410       12                 releasing them to the command itself.
     2411       13
     2412       14                 Here's the procedure to use:
     2413       15
     2414       16                   a) CALL with FUNCTION=1.  This indicates that this
     2415       17                      subsystem is to be initialized.
     2416       18
     2417       19                   b) Go through the procedure that gets an input file and
     2418       20                      when you have one, CALL with FUNCTION=2.  This tells
     2419       21                      us the squirrel away the file (herein reffered to as the
     2420       22                      BEAST file) for later use.  The DCB if OPEN, is closed.
     2421       23
     2422       24                   c) When all the files have been found, CALL this routine
     2423       25                      with FUNCTION=3 to let us know.  We then prepare to
     2424       26                      spit the FIDs back.
     2425       27
     2426       28                   d) When you want a file, CALL this routine with
     2427       29                      FUNCTION=4.  We will return with the next file OPEN
     2428       30                      or TOPEN, as appropriate.  SORT_STATUS returns a
     2429       31                      status code indicating how the OPEN went.  The
     2430       32                      values are from the VPOC_? set of EQUs.
     2431       33
     2432       34                   e) If it becomes necessary to abort the procedure without
     2433       35                      having drained all the sorted FIDs, CALL with FUNCTION=5.
     2434       36
     2435       37                 Note that SORT_STATUS is only used on FUNCTION=4.
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:415  
     2436       38
     2437       39                 Now, isn't that easy???
     2438       40        */
     2439       41        /**/
     2440       42        /*  PARAMETERS  */
     2441       43        /**/
     2442       44    1   DCL FUNCTION SBIN WORD;
     2443       45    1   DCL SORT_STATUS SBIN WORD;
     2444       46        /**/
     2445       47        /*  INCLUDE FILES  */
     2446       48        /**/
     2447       49        %INCLUDE VP_DATA_R;
     2448     7036        %INCLUDE B_ERRORS_C;
     2449     8163        /**/
     2450     8164        /*  LOCAL CONSTANTS  */
     2451     8165        /**/
     2452     8166        %FPT_OPEN(FPTN = FPT_OPEN_SORT_OUT,
     2453     8167                  DCB = M$SORT1,
     2454     8168                  DISP = SCRATCH,
     2455     8169                  FUN  = CREATE,
     2456     8170                  EXIST = NEWFILE,
     2457     8171                  ACS = DIRECT,
     2458     8172                  ASN = FILE,
     2459     8173                  ORG = KEYED,
     2460     8174                  STCLASS = CONSTANT);
     2461     8283        %FPT_WRITE(FPTN = FPT_WRITE_SORT,
     2462     8284                   DCB = M$SORT1,
     2463     8285                   BUF = SORT_DATA,
     2464     8286                   ONEWKEY = NO,
     2465     8287                   NEWKEY = YES,
     2466     8288                   KEY = SORT_KEY,
     2467     8289                   STCLASS = CONSTANT);
     2468     8320        %FPT_PFIL(FPTN = FPT_PFIL_SORT,
     2469     8321                  DCB = M$SORT1,
     2470     8322                  BOF = YES,
     2471     8323                  STCLASS = CONSTANT);
     2472     8338        %FPT_READ(FPTN = FPT_READ_SORT,
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:416  
     2473     8339                  DCB  = M$SORT1,
     2474     8340                  BUF  = SORT_DATA,
     2475     8341                  KEYR = YES,
     2476     8342                  KEYS = NO,
     2477     8343                  KEY = SORT_KEY,
     2478     8344                  STCLASS = CONSTANT);
     2479     8383        %FPT_CLOSE(FPTN = FPT_CLOSE_SORT,
     2480     8384                   DCB  = M$SORT1,
     2481     8385                   STCLASS = CONSTANT);
     2482     8427        %FPT_CLOSE (FPTN = FPT_CLOSE_BEAST,
     2483     8428                    DCB = M$EI,
     2484     8429                    STCLASS = CONSTANT);
     2485     8471        /**/
     2486     8472        /*  LOCAL STATIC  */
     2487     8473        /**/
     2488     8474        %FPT_PRECORD (FPTN = FPT_PRECORD_SORT,
     2489     8475                      DCB = M$SORT1,
     2490     8476                      KEYR = YES,
     2491     8477                      KEY = SORT_KEY,
     2492     8478                      STCLASS = STATIC);
     2493     8499    1   DCL 1 SORT_KEY STATIC DALIGNED,
     2494     8500    1         2 LEN UBIN BYTE UNAL,
     2495     8501    1         2 FUZZY(0:11) SBIN WORD CALIGNED;
     2496     8502    1   DCL 1 SORT_DATA STATIC DALIGNED,
     2497     8503    1         2 NAME CALIGNED,
     2498     8504    1           3 L UBIN BYTE CALIGNED,
     2499     8505    1           3 C CHAR(31) CALIGNED,
     2500     8506    1         2 ACCT CHAR(8) CALIGNED,
     2501     8507    1         2 PSN CHAR(6) CALIGNED,
     2502     8508    1         2 PASS CHAR(8) CALIGNED,
     2503     8509    1         2 WSN CHAR(8) CALIGNED,
     2504     8510    1         2 RES CHAR(4) CALIGNED,
     2505     8511    1         2 ASN UBIN WORD;
     2506     8512    1   DCL 1 OPEN_NAME STATIC DALIGNED,
     2507     8513    1         2 LEN UBIN(9) CALIGNED,
     2508     8514    1         2 STRING CHAR(31) CALIGNED;
     2509     8515        /**/
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:417  
     2510     8516        /*  BASED  */
     2511     8517        /**/
     2512     8518        %F$DCB;
     2513     8575        %B$TCB;
     2514     8578        %B$ALT;
     2515     8586        /**/
     2516     8587        /*  ENTRY DCLS  */
     2517     8588        /**/
     2518     8589        %VP_ENTRIES (OMIT=VPF$SORT_FID);
     2519     8797        /**/
     2520     8798        /*  LOCAL AUTO  */
     2521     8799        /**/
     2522     8800    1   DCL I SBIN WORD;
     2523     8801    1   DCL SYSTEM_ERR BIT(36);
     2524     8802        /**/
     2525     8803    2           DO CASE(FUNCTION);
     2526     8804        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:418  
     2527     8805    2            CASE(1);                       /* INITIALIZE                         */
     2528     8806    2              CALL M$OPEN(FPT_OPEN_SORT_OUT) ALTRET(AAARGH);
     2529     8807    2              SORT_KEY.LEN = (ICB.SORTING_ORDER.COUNT +1) * 4;
     2530     8808        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:419  
     2531     8809    2            CASE(2);                       /* INPUT NEW FID INTO SORT            */
     2532     8810        /**/
     2533     8811        /*  Set up enough data so that we can get to this file again!                 */
     2534     8812        /**/
     2535     8813    2              SORT_DATA.NAME.L = M$EI$ -> F$DCB.NAME#.L;
     2536     8814    2              SORT_DATA.NAME.C = M$EI$ -> F$DCB.NAME#.C;
     2537     8815    2              SORT_DATA.ACCT = M$EI$ -> F$DCB.ACCT#;
     2538     8816    2              SORT_DATA.PASS = IN_PASS;
     2539     8817    2              SORT_DATA.WSN = M$EI$ -> F$DCB.WSN#;
     2540     8818    2              SORT_DATA.RES = M$EI$ -> F$DCB.RES#;
     2541     8819    2              SORT_DATA.ASN = M$EI$ -> F$DCB.ASN#;
     2542     8820    2              SORT_DATA.PSN = M$EI$ -> F$DCB.PSN#;
     2543     8821        /**/
     2544     8822        /*  Create the key that will do our sorting for us.                           */
     2545     8823        /**/
     2546     8824    2              SORT_KEY.FUZZY (ICB.SORTING_ORDER.COUNT) = 0; /* For overflow/dupe */
     2547     8825    3              DO I=0 TO ICB.SORTING_ORDER.COUNT -1;
     2548     8826    3                 CALL MUNGE_KEY (I);
     2549     8827    3                 END;
     2550     8828        /**/
     2551     8829        /*  Write the data representing the file.                                     */
     2552     8830        /**/
     2553     8831    2              CALL M$WRITE(FPT_WRITE_SORT) WHENALTRETURN
     2554     8832    3               DO;
     2555     8833    3                  IF %VPSZ_ERR# ~= %E$OLDREC
     2556     8834    3                   THEN
     2557     8835    3                     GOTO AAARGH;
     2558     8836    3                  FPT_PRECORD_SORT.V.N# = 0;
     2559     8837    3                  FPT_PRECORD_SORT.V.KEYS# = %YES#;
     2560     8838    3                  SORT_KEY.FUZZY (ICB.SORTING_ORDER.COUNT) = BITBIN('777777777777'O);
     2561     8839    3                  CALL M$PRECORD (FPT_PRECORD_SORT) ALTRET(EXPECTED);
     2562     8840    3   EXPECTED:      FPT_PRECORD_SORT.V.N# = -1;
     2563     8841    3                  FPT_PRECORD_SORT.V.KEYS# = %NO#;
     2564     8842    3                  CALL M$PRECORD (FPT_PRECORD_SORT) ALTRET(AAARGH);
     2565     8843    3                  SORT_KEY.FUZZY (ICB.SORTING_ORDER.COUNT) =
     2566     8844    3                    SORT_KEY.FUZZY (ICB.SORTING_ORDER.COUNT) +1;
     2567     8845    3                  CALL M$WRITE(FPT_WRITE_SORT) ALTRET(AAARGH);
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:420  
     2568     8846    3                  END;
     2569     8847        /**/
     2570     8848        /*  Close the BEAST file.                                                     */
     2571     8849        /**/
     2572     8850    2              IF M$EI$ -> F$DCB.FCD#
     2573     8851    2               THEN
     2574     8852    2                 CALL M$CLOSE (FPT_CLOSE_BEAST) ALTRET(AAARGH);
     2575     8853        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:421  
     2576     8854    2            CASE(3);                       /* TERMINATE SORT INPUT, REVERSE IT   */
     2577     8855    2              CALL M$PFIL(FPT_PFIL_SORT) ALTRET(AAARGH);
     2578     8856    2              FPT_OPEN_EI.V.OPER.THISF# = %YES#;
     2579     8857    2              FPT_OPEN_EI.V.OPER.NXTF# = %NO#;
     2580     8858        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:422  
     2581     8859    2            CASE(4);                       /* FETCH A SORTED FILE                */
     2582     8860    2              CALL M$READ (FPT_READ_SORT) WHENALTRETURN
     2583     8861    3               DO;
     2584     8862    3                  IF %VPSZ_ERR# ~= %E$EOF
     2585     8863    3                   THEN
     2586     8864    3                     GOTO AAARGH;
     2587     8865    3                  CALL MOP_UP;
     2588     8866    3                  SORT_STATUS = %VPOC_EXHAUSTED#;
     2589     8867    3                  RETURN;
     2590     8868    3                  END;
     2591     8869        /**/
     2592     8870        /*  Set up FPT to re-open BEAST file.                                         */
     2593     8871        /**/
     2594     8872    2              OPEN_NAME.LEN = SORT_DATA.NAME.L;
     2595     8873    2              OPEN_NAME.STRING = SORT_DATA.NAME.C;
     2596     8874    2              IN_ACCT = SORT_DATA.ACCT;
     2597     8875    2              IN_PASS = SORT_DATA.PASS;
     2598     8876    2              IN_WSN = SORT_DATA.WSN;
     2599     8877    2              IN_SN.SN(0) = SORT_DATA.PSN;
     2600     8878    2              IN_SN.COUNT = 1;
     2601     8879    2              FPT_OPEN_EI.V.ASN# = SORT_DATA.ASN;
     2602     8880    2              FPT_OPEN_EI.V.RES# = SORT_DATA.RES;
     2603     8881    2              FPT_OPEN_EI.NAME_ = VECTOR(OPEN_NAME);
     2604     8882        /**/
     2605     8883        /*  OPEN the BEAST file.                                                      */
     2606     8884        /**/
     2607     8885    2              CALL M$OPEN (FPT_OPEN_EI) ALTRET(REOPEN_ALT);
     2608     8886    2              SORT_STATUS = %VPOC_GOTFILE#;
     2609     8887    3              DO WHILE ('0'B);
     2610     8888    3   REOPEN_ALT:   ;
     2611     8889    3                 IF %VPSZ_ERR# = %E$NOACCESS
     2612     8890    3                   OR %VPSZ_ERR# = %E$INVSTAR
     2613     8891    3                   OR %VPSZ_ERR# = %E$CLSREL
     2614     8892    3                   OR %VPSZ_ERR# = %E$NOFILE
     2615     8893    3                   OR %VPSZ_ERR# = %E$NORESTRICT
     2616     8894    3                  THEN
     2617     8895    3                    SORT_STATUS = %VPOC_NOACCESS#;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:423  
     2618     8896    3                  ELSE                     /* Unexpected error!                  */
     2619     8897    3                    GOTO AAARGH;
     2620     8898    3                 END;
     2621     8899        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:424  
     2622     8900    2            CASE(5);                       /* ABORT THE SORTING PROCESS          */
     2623     8901    2              CALL MOP_UP;
     2624     8902        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:425  
     2625     8903    2            END;                           /* END CASE                           */
     2626     8904    1           RETURN;
     2627     8905        /**/
     2628     8906    1   AAARGH: ;
     2629     8907    1           SYSTEM_ERR = %VPSZ_ERROR#;
     2630     8908    1           CALL MOP_UP;
     2631     8909    1           CALL VPL$ERR_PROC(0,63,'06'O);
     2632     8910        /*E*   ERROR: VPF-00063
     2633     8911             MESSAGE: Internal error during selection in SORTED order:
     2634     8912        */
     2635     8913    1           CALL VPL$ERR_PROC(4,0,,SYSTEM_ERR,,,M$EI#);
     2636     8914    1           RETURN;
     2637     8915        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:426  
     2638     8916    1   MOP_UP: PROC;
     2639     8917        /**/
     2640     8918        /*  This routine is used to clean up after the FID-sorting process            */
     2641     8919        /*  is over and done with.  This may be because of an abort request,          */
     2642     8920        /*  or some severe error.                                                     */
     2643     8921        /*                                                                            */
     2644     8922        /*  It's OK to come through here more than once.                              */
     2645     8923        /**/
     2646     8924    2           IF M$SORT1$ -> F$DCB.FCD#
     2647     8925    2            THEN
     2648     8926    2              CALL M$CLOSE (FPT_CLOSE_SORT) ALTRET (SORT_CLOSED);
     2649     8927    2   SORT_CLOSED: ;
     2650     8928    2           SORTING_INPUT = %NO#;
     2651     8929    2           RETURN;
     2652     8930    2   END MOP_UP;
     2653     8931        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:427  
     2654     8932    1   MUNGE_KEY: PROC(KEY_PART);
     2655     8933        /**/
     2656     8934        /*  INCLUDES  */
     2657     8935        /**/
     2658     8936        %INCLUDE FM$FIT;
     2659     9157        /**/
     2660     9158        /*  PARAMETERS  */
     2661     9159        /**/
     2662     9160    2   DCL KEY_PART SBIN WORD;
     2663     9161        /**/
     2664     9162        /*  LOCAL AUTO  */
     2665     9163        /**/
     2666     9164    2   DCL KEY_SBIN SBIN WORD;
     2667     9165    2   DCL KEY_CHAR REDEF KEY_SBIN CHAR(4);
     2668     9166    2   DCL KEY_UBIN REDEF KEY_SBIN UBIN WORD;
     2669     9167    2   DCL CODE$ PTR;
     2670     9168        /**/
     2671     9169        /*  BASED  */
     2672     9170        /**/
     2673     9171        %CODE03;
     2674     9178        %CODE04;
     2675     9186        %CODE05;
     2676     9189        %CODE06;
     2677     9193        /**/
     2678     9194        /*  ENTRY DCLS  */
     2679     9195        /**/
     2680     9196    2   DCL XSF$LOCCODP ENTRY(2) ALTRET;
     2681     9197        /**/
     2682     9198    3           DO CASE(ICB.SORTING_ORDER.FIELD.TYPE(KEY_PART));
     2683     9199    3            CASE(1);                       /* GRANULES                           */
     2684     9200    3              CODE$ = FPARAM$;
     2685     9201    3              CALL XSF$LOCCODP(CODE$,3) ALTRET(SIGH);
     2686     9202    3              KEY_UBIN = CODE$ -> CODE03.UGRANS;
     2687     9203    3            CASE(2);                       /* Number of records                  */
     2688     9204    3              CODE$ = FPARAM$;
     2689     9205    3              CALL XSF$LOCCODP(CODE$,3) ALTRET(SIGH);
     2690     9206    3              KEY_UBIN = CODE$ -> CODE03.NRECS;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:428  
     2691     9207    3            CASE(3);                       /* Date of CREATION                   */
     2692     9208    3              CODE$ = FPARAM$;
     2693     9209    3              CALL XSF$LOCCODP(CODE$,4) ALTRET(SIGH);
     2694     9210    3              KEY_UBIN = CODE$ -> CODE04.CREATION.TIME;
     2695     9211    3            CASE(4);                       /* Date of MODIFICATION               */
     2696     9212    3              CODE$ = FPARAM$;
     2697     9213    3              CALL XSF$LOCCODP(CODE$,4) ALTRET(SIGH);
     2698     9214    3              KEY_UBIN = CODE$ -> CODE04.MODIFY.TIME;
     2699     9215    3            CASE(5);                       /* Date of EXPIRATION                 */
     2700     9216    3              KEY_SBIN = M$EI$ -> F$DCB.EXPIRE#;
     2701     9217    3            CASE(6);                       /* Date of ACCESS                     */
     2702     9218    3              CODE$ = FPARAM$;
     2703     9219    3              CALL XSF$LOCCODP(CODE$,4) ALTRET(SIGH);
     2704     9220    3              KEY_UBIN = CODE$ -> CODE04.ACCESS.TIME;
     2705     9221    3            CASE(7);                       /* Date of BACKUP                     */
     2706     9222    3              CODE$ = FPARAM$;
     2707     9223    3              CALL XSF$LOCCODP(CODE$,5) ALTRET(SIGH);
     2708     9224    3              KEY_UBIN = CODE$->CODE05.BACKUP.TIME;
     2709     9225    3            CASE(8);                       /* Date of STOW                       */
     2710     9226    3              CODE$ = FPARAM$;
     2711     9227    3              CALL XSF$LOCCODP(CODE$,6) ALTRET(SIGH);
     2712     9228    3              KEY_UBIN = CODE$->CODE06.STOW.TIME;
     2713     9229    3            CASE(9);                       /* TYPE                               */
     2714     9230    3              KEY_CHAR = M$EI$ -> F$DCB.TYPE#;
     2715     9231    3            END;                           /* END CASE                           */
     2716     9232        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:429  
     2717     9233        /**/
     2718     9234        /*  Make sure that the attribute we want to sort by is actually present       */
     2719     9235        /*  for this file.  If not, make a rash and undoubtedly wrong assumption      */
     2720     9236        /*  about the attribute for this file, as it's the best we can do.            */
     2721     9237        /**/
     2722     9238    3           DO WHILE ('0'B);
     2723     9239    3   SIGH:      ;                            /* File attribute for sort not present*/
     2724     9240    3              KEY_SBIN = 0;
     2725     9241    3              END;
     2726     9242        /**/
     2727     9243        /*  Take care of keys for DESCENDING ORDER.  */
     2728     9244        /**/
     2729     9245    2           IF ICB.SORTING_ORDER.FIELD.DESCENDING(KEY_PART)
     2730     9246    2            THEN                           /* Gotta bollix for descending order  */
     2731     9247    2              KEY_UBIN = 0-1 - KEY_UBIN;
     2732     9248    2           SORT_KEY.FUZZY(KEY_PART) = KEY_SBIN;
     2733     9249        /**/
     2734     9250    2           RETURN;
     2735     9251    2   END MUNGE_KEY;
     2736     9252        /**/
     2737     9253    1   END VPF$SORT_FID;

PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:430  
--  Include file information  --

   FM$FIT.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$SORT_FID.

   Procedure VPF$SORT_FID requires 381 words for executable code.
   Procedure VPF$SORT_FID requires 20 words of local(AUTO) storage.

    No errors detected in file VPF$SRCLST.:E05TSI    .

PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:431  

 Object Unit name= VPF$SORT_FID                               File name= VPF$SRCLST.:E05TOU
 UTS= JUL 30 '97 07:43:54.72 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS    148    224  VPF$SORT_FID
   11   Data  even  none    50     62  VPF$SORT_FID
   12   Proc  even  none   381    575  VPF$SORT_FID
   13  RoData even  none    15     17  VPF$SORT_FID

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        2  VPF$SORT_FID
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:432  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       8 VPL$ERR_PROC
 yes     yes           Std       2 XSF$LOCCODP
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     FPARAM$                               SORTING_INPUT                         SPEC_BUF
     IN_ACCT                               IN_PASS                               IN_RES
     IN_SN                                 IN_WSN                                ICB
     M$EI                                  M$EI$                                 M$EI#
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1                               M$SORT1$
     B$TCB$                                FPT_OPEN_EI                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:433  


     2399        1        /*T***********************************************************/
     2400        2        /*T*                                                         */
     2401        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2402        4        /*T*                                                         */
     2403        5        /*T***********************************************************/
     2404        6        VPF$SORT_FID: PROC(FUNCTION,SORT_STATUS);

      6 12 000000   000000 700200 xent  VPF$SORT_FID TSX0  ! X66_AUTO_2
        12 000001   000024 000002                    ZERO    20,2

     2405        7        /*D* NAME: VPF$SORT_FID
     2406        8             CALL: CALL VPF$SORT_FID(FUNCTION) ALTRET(TERRIBLE);
     2407        9             DESCRIPTION: This procedure allows us to take an input spec
     2408       10                 that refers to multiple files (such as a range or wildcard),
     2409       11                 and sort the files in some user-requested order before
     2410       12                 releasing them to the command itself.
     2411       13
     2412       14                 Here's the procedure to use:
     2413       15
     2414       16                   a) CALL with FUNCTION=1.  This indicates that this
     2415       17                      subsystem is to be initialized.
     2416       18
     2417       19                   b) Go through the procedure that gets an input file and
     2418       20                      when you have one, CALL with FUNCTION=2.  This tells
     2419       21                      us the squirrel away the file (herein reffered to as the
     2420       22                      BEAST file) for later use.  The DCB if OPEN, is closed.
     2421       23
     2422       24                   c) When all the files have been found, CALL this routine
     2423       25                      with FUNCTION=3 to let us know.  We then prepare to
     2424       26                      spit the FIDs back.
     2425       27
     2426       28                   d) When you want a file, CALL this routine with
     2427       29                      FUNCTION=4.  We will return with the next file OPEN
     2428       30                      or TOPEN, as appropriate.  SORT_STATUS returns a
     2429       31                      status code indicating how the OPEN went.  The
     2430       32                      values are from the VPOC_? set of EQUs.
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:434  
     2431       33
     2432       34                   e) If it becomes necessary to abort the procedure without
     2433       35                      having drained all the sorted FIDs, CALL with FUNCTION=5.
     2434       36
     2435       37                 Note that SORT_STATUS is only used on FUNCTION=4.
     2436       38
     2437       39                 Now, isn't that easy???
     2438       40        */
     2439       41        /**/
     2440       42        /*  PARAMETERS  */
     2441       43        /**/
     2442       44    1   DCL FUNCTION SBIN WORD;
     2443       45    1   DCL SORT_STATUS SBIN WORD;
     2444       46        /**/
     2445       47        /*  INCLUDE FILES  */
     2446       48        /**/
     2447       49        %INCLUDE VP_DATA_R;
     2448     7036        %INCLUDE B_ERRORS_C;
     2449     8163        /**/
     2450     8164        /*  LOCAL CONSTANTS  */
     2451     8165        /**/
     2452     8166        %FPT_OPEN(FPTN = FPT_OPEN_SORT_OUT,
     2453     8167                  DCB = M$SORT1,
     2454     8168                  DISP = SCRATCH,
     2455     8169                  FUN  = CREATE,
     2456     8170                  EXIST = NEWFILE,
     2457     8171                  ACS = DIRECT,
     2458     8172                  ASN = FILE,
     2459     8173                  ORG = KEYED,
     2460     8174                  STCLASS = CONSTANT);
     2461     8283        %FPT_WRITE(FPTN = FPT_WRITE_SORT,
     2462     8284                   DCB = M$SORT1,
     2463     8285                   BUF = SORT_DATA,
     2464     8286                   ONEWKEY = NO,
     2465     8287                   NEWKEY = YES,
     2466     8288                   KEY = SORT_KEY,
     2467     8289                   STCLASS = CONSTANT);
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:435  
     2468     8320        %FPT_PFIL(FPTN = FPT_PFIL_SORT,
     2469     8321                  DCB = M$SORT1,
     2470     8322                  BOF = YES,
     2471     8323                  STCLASS = CONSTANT);
     2472     8338        %FPT_READ(FPTN = FPT_READ_SORT,
     2473     8339                  DCB  = M$SORT1,
     2474     8340                  BUF  = SORT_DATA,
     2475     8341                  KEYR = YES,
     2476     8342                  KEYS = NO,
     2477     8343                  KEY = SORT_KEY,
     2478     8344                  STCLASS = CONSTANT);
     2479     8383        %FPT_CLOSE(FPTN = FPT_CLOSE_SORT,
     2480     8384                   DCB  = M$SORT1,
     2481     8385                   STCLASS = CONSTANT);
     2482     8427        %FPT_CLOSE (FPTN = FPT_CLOSE_BEAST,
     2483     8428                    DCB = M$EI,
     2484     8429                    STCLASS = CONSTANT);
     2485     8471        /**/
     2486     8472        /*  LOCAL STATIC  */
     2487     8473        /**/
     2488     8474        %FPT_PRECORD (FPTN = FPT_PRECORD_SORT,
     2489     8475                      DCB = M$SORT1,
     2490     8476                      KEYR = YES,
     2491     8477                      KEY = SORT_KEY,
     2492     8478                      STCLASS = STATIC);
     2493     8499    1   DCL 1 SORT_KEY STATIC DALIGNED,
     2494     8500    1         2 LEN UBIN BYTE UNAL,
     2495     8501    1         2 FUZZY(0:11) SBIN WORD CALIGNED;
     2496     8502    1   DCL 1 SORT_DATA STATIC DALIGNED,
     2497     8503    1         2 NAME CALIGNED,
     2498     8504    1           3 L UBIN BYTE CALIGNED,
     2499     8505    1           3 C CHAR(31) CALIGNED,
     2500     8506    1         2 ACCT CHAR(8) CALIGNED,
     2501     8507    1         2 PSN CHAR(6) CALIGNED,
     2502     8508    1         2 PASS CHAR(8) CALIGNED,
     2503     8509    1         2 WSN CHAR(8) CALIGNED,
     2504     8510    1         2 RES CHAR(4) CALIGNED,
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:436  
     2505     8511    1         2 ASN UBIN WORD;
     2506     8512    1   DCL 1 OPEN_NAME STATIC DALIGNED,
     2507     8513    1         2 LEN UBIN(9) CALIGNED,
     2508     8514    1         2 STRING CHAR(31) CALIGNED;
     2509     8515        /**/
     2510     8516        /*  BASED  */
     2511     8517        /**/
     2512     8518        %F$DCB;
     2513     8575        %B$TCB;
     2514     8578        %B$ALT;
     2515     8586        /**/
     2516     8587        /*  ENTRY DCLS  */
     2517     8588        /**/
     2518     8589        %VP_ENTRIES (OMIT=VPF$SORT_FID);
     2519     8797        /**/
     2520     8798        /*  LOCAL AUTO  */
     2521     8799        /**/
     2522     8800    1   DCL I SBIN WORD;
     2523     8801    1   DCL SYSTEM_ERR BIT(36);
     2524     8802        /**/
     2525     8803    2           DO CASE(FUNCTION);

   8803 12 000002   200003 470500                    LDP0    @FUNCTION,,AUTO
        12 000003   000000 235100                    LDA     0,,PR0
        12 000004   000006 115007                    CMPA    6,DL
        12 000005   000007 602005 12                 TNC     s:8803+5,AL
        12 000006   000307 710000 12                 TRA     s:8904
        12 000007   000307 710000 12                 TRA     s:8904
        12 000010   000015 710000 12                 TRA     s:8806
        12 000011   000027 710000 12                 TRA     s:8813
        12 000012   000165 710000 12                 TRA     s:8855
        12 000013   000176 710000 12                 TRA     s:8860
        12 000014   000305 710000 12                 TRA     s:8901

     2526     8804        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:437  
     2527     8805    2            CASE(1);                       /* INITIALIZE                         */

     2528     8806    2              CALL M$OPEN(FPT_OPEN_SORT_OUT) ALTRET(AAARGH);

   8806 12 000015   000000 630400 10                 EPPR0   FPT_OPEN_SORT_OUT
        12 000016   450000 713400                    CLIMB   alt,open
        12 000017   410400 401760                    pmme    nvectors=18
        12 000020   000310 702000 12                 TSX2    AAARGH

     2529     8807    2              SORT_KEY.LEN = (ICB.SORTING_ORDER.COUNT +1) * 4;

   8807 12 000021   000204 236000 xsym               LDQ     ICB+132
        12 000022   000002 736000                    QLS     2
        12 000023   000004 036007                    ADLQ    4,DL
        12 000024   000033 736000                    QLS     27
        12 000025   000012 552040 11                 STBQ    SORT_KEY,'40'O
        12 000026   000307 710000 12                 TRA     s:8904

     2530     8808        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:438  
     2531     8809    2            CASE(2);                       /* INPUT NEW FID INTO SORT            */

     2532     8810        /**/
     2533     8811        /*  Set up enough data so that we can get to this file again!                 */
     2534     8812        /**/
     2535     8813    2              SORT_DATA.NAME.L = M$EI$ -> F$DCB.NAME#.L;

   8813 12 000027   000000 471400 xsym               LDP1    M$EI$
        12 000030   100010 236100                    LDQ     8,,PR1
        12 000031   000030 552040 11                 STBQ    SORT_DATA,'40'O

     2536     8814    2              SORT_DATA.NAME.C = M$EI$ -> F$DCB.NAME#.C;

   8814 12 000032   040000 100500                    MLR     fill='040'O
        12 000033   100010 200037                    ADSC9   8,,PR1                   cn=1,n=31
        12 000034   000030 200037 11                 ADSC9   SORT_DATA                cn=1,n=31

     2537     8815    2              SORT_DATA.ACCT = M$EI$ -> F$DCB.ACCT#;

   8815 12 000035   100020 237100                    LDAQ    16,,PR1
        12 000036   000040 757000 11                 STAQ    SORT_DATA+8

     2538     8816    2              SORT_DATA.PASS = IN_PASS;

   8816 12 000037   040000 100400                    MLR     fill='040'O
        12 000040   000000 000010 xsym               ADSC9   IN_PASS                  cn=0,n=8
        12 000041   000043 400010 11                 ADSC9   SORT_DATA+11             cn=2,n=8

     2539     8817    2              SORT_DATA.WSN = M$EI$ -> F$DCB.WSN#;

   8817 12 000042   040000 100500                    MLR     fill='040'O
        12 000043   100027 000010                    ADSC9   23,,PR1                  cn=0,n=8
        12 000044   000045 400010 11                 ADSC9   SORT_DATA+13             cn=2,n=8

     2540     8818    2              SORT_DATA.RES = M$EI$ -> F$DCB.RES#;

   8818 12 000045   040000 100500                    MLR     fill='040'O
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:439  
        12 000046   100026 000004                    ADSC9   22,,PR1                  cn=0,n=4
        12 000047   000047 400004 11                 ADSC9   SORT_DATA+15             cn=2,n=4

     2541     8819    2              SORT_DATA.ASN = M$EI$ -> F$DCB.ASN#;

   8819 12 000050   100032 236100                    LDQ     26,,PR1
        12 000051   000011 772000                    QRL     9
        12 000052   000777 376007                    ANQ     511,DL
        12 000053   000051 756000 11                 STQ     SORT_DATA+17

     2542     8820    2              SORT_DATA.PSN = M$EI$ -> F$DCB.PSN#;

   8820 12 000054   040000 100500                    MLR     fill='040'O
        12 000055   100024 000006                    ADSC9   20,,PR1                  cn=0,n=6
        12 000056   000042 000006 11                 ADSC9   SORT_DATA+10             cn=0,n=6

     2543     8821        /**/
     2544     8822        /*  Create the key that will do our sorting for us.                           */
     2545     8823        /**/
     2546     8824    2              SORT_KEY.FUZZY (ICB.SORTING_ORDER.COUNT) = 0; /* For overflow/dupe */

   8824 12 000057   000204 235000 xsym               LDA     ICB+132
        12 000060   000002 735000                    ALS     2
        12 000061   000005 100400                    MLR     fill='000'O
        12 000062   000002 000004 xsym               ADSC9   B_VECTNIL+2              cn=0,n=4
        12 000063   000012 200004 11                 ADSC9   SORT_KEY,A               cn=1,n=4

     2547     8825    3              DO I=0 TO ICB.SORTING_ORDER.COUNT -1;

   8825 12 000064   200005 450100                    STZ     I,,AUTO
        12 000065   000073 710000 12                 TRA     s:8827+1

     2548     8826    3                 CALL MUNGE_KEY (I);

   8826 12 000066   200005 630500                    EPPR0   I,,AUTO
        12 000067   200011 450500                    STP0    SYSTEM_ERR+3,,AUTO
        12 000070   000356 701000 12                 TSX1    MUNGE_KEY
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:440  
        12 000071   000000 011000                    NOP     0

     2549     8827    3                 END;

   8827 12 000072   200005 054100                    AOS     I,,AUTO
        12 000073   200005 236100                    LDQ     I,,AUTO
        12 000074   000204 116000 xsym               CMPQ    ICB+132
        12 000075   000066 604000 12                 TMI     s:8826

     2550     8828        /**/
     2551     8829        /*  Write the data representing the file.                                     */
     2552     8830        /**/
     2553     8831    2              CALL M$WRITE(FPT_WRITE_SORT) WHENALTRETURN

   8831 12 000076   000072 630400 10                 EPPR0   FPT_WRITE_SORT
        12 000077   440001 713400                    CLIMB   alt,write
        12 000100   401400 401760                    pmme    nvectors=4
        12 000101   000103 702000 12                 TSX2    s:8833
        12 000102   000154 710000 12                 TRA     s:8850

     2554     8832    3               DO;

     2555     8833    3                  IF %VPSZ_ERR# ~= %E$OLDREC

   8833 12 000103   000000 470400 xsym               LDP0    B$TCB$
        12 000104   000000 471500                    LDP1    0,,PR0
        12 000105   100102 236100                    LDQ     66,,PR1
        12 000106   377770 376007                    ANQ     131064,DL
        12 000107   000750 116007                    CMPQ    488,DL
        12 000110   000310 601000 12                 TNZ     AAARGH

     2556     8834    3                   THEN
     2557     8835    3                     GOTO AAARGH;
     2558     8836    3                  FPT_PRECORD_SORT.V.N# = 0;

   8836 12 000111   000007 450000 11                 STZ     FPT_PRECORD_SORT+7

PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:441  
     2559     8837    3                  FPT_PRECORD_SORT.V.KEYS# = %YES#;

   8837 12 000112   400000 236007                    LDQ     -131072,DL
        12 000113   000006 256000 11                 ORSQ    FPT_PRECORD_SORT+6

     2560     8838    3                  SORT_KEY.FUZZY (ICB.SORTING_ORDER.COUNT) = BITBIN('777777777777'O);

   8838 12 000114   000204 235000 xsym               LDA     ICB+132
        12 000115   000002 735000                    ALS     2
        12 000116   000005 100400                    MLR     fill='000'O
        12 000117   000027 000004 xsym               ADSC9   B_VECTNIL+23             cn=0,n=4
        12 000120   000012 200004 11                 ADSC9   SORT_KEY,A               cn=1,n=4

     2561     8839    3                  CALL M$PRECORD (FPT_PRECORD_SORT) ALTRET(EXPECTED);

   8839 12 000121   000000 630400 11                 EPPR0   FPT_PRECORD_SORT
        12 000122   440003 713400                    CLIMB   alt,+16387
        12 000123   401000 401760                    pmme    nvectors=3
        12 000124   000125 702000 12                 TSX2    EXPECTED

     2562     8840    3   EXPECTED:      FPT_PRECORD_SORT.V.N# = -1;

   8840 12 000125   000001 335007       EXPECTED     LCA     1,DL
        12 000126   000007 755000 11                 STA     FPT_PRECORD_SORT+7

     2563     8841    3                  FPT_PRECORD_SORT.V.KEYS# = %NO#;

   8841 12 000127   000000 236000 13                 LDQ     0
        12 000130   000006 356000 11                 ANSQ    FPT_PRECORD_SORT+6

     2564     8842    3                  CALL M$PRECORD (FPT_PRECORD_SORT) ALTRET(AAARGH);

   8842 12 000131   000000 630400 11                 EPPR0   FPT_PRECORD_SORT
        12 000132   440003 713400                    CLIMB   alt,+16387
        12 000133   401000 401760                    pmme    nvectors=3
        12 000134   000310 702000 12                 TSX2    AAARGH

PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:442  
     2565     8843    3                  SORT_KEY.FUZZY (ICB.SORTING_ORDER.COUNT) =

   8843 12 000135   000204 720000 xsym               LXL0    ICB+132
        12 000136   000012 235010 11                 LDA     SORT_KEY,X0
        12 000137   000013 236010 11                 LDQ     SORT_KEY+1,X0
        12 000140   000033 773000                    LRL     27
        12 000141   000001 036007                    ADLQ    1,DL
        12 000142   200014 756100                    STQ     CODE$+1,,AUTO
        12 000143   000000 635010                    EAA     0,X0
        12 000144   000020 731000                    ARS     16
        12 000145   000005 100500                    MLR     fill='000'O
        12 000146   200014 000004                    ADSC9   CODE$+1,,AUTO            cn=0,n=4
        12 000147   000012 200004 11                 ADSC9   SORT_KEY,A               cn=1,n=4

     2566     8844    3                    SORT_KEY.FUZZY (ICB.SORTING_ORDER.COUNT) +1;
     2567     8845    3                  CALL M$WRITE(FPT_WRITE_SORT) ALTRET(AAARGH);

   8845 12 000150   000072 630400 10                 EPPR0   FPT_WRITE_SORT
        12 000151   440001 713400                    CLIMB   alt,write
        12 000152   401400 401760                    pmme    nvectors=4
        12 000153   000310 702000 12                 TSX2    AAARGH

     2568     8846    3                  END;

     2569     8847        /**/
     2570     8848        /*  Close the BEAST file.                                                     */
     2571     8849        /**/
     2572     8850    2              IF M$EI$ -> F$DCB.FCD#

   8850 12 000154   000000 470400 xsym               LDP0    M$EI$
        12 000155   000031 236100                    LDQ     25,,PR0
        12 000156   020000 316007                    CANQ    8192,DL
        12 000157   000307 600000 12                 TZE     s:8904

     2573     8851    2               THEN
     2574     8852    2                 CALL M$CLOSE (FPT_CLOSE_BEAST) ALTRET(AAARGH);

PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:443  
   8852 12 000160   000166 630400 10                 EPPR0   FPT_CLOSE_BEAST
        12 000161   450001 713400                    CLIMB   alt,close
        12 000162   406000 401760                    pmme    nvectors=13
        12 000163   000310 702000 12                 TSX2    AAARGH
        12 000164   000307 710000 12                 TRA     s:8904

     2575     8853        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:444  
     2576     8854    2            CASE(3);                       /* TERMINATE SORT INPUT, REVERSE IT   */

     2577     8855    2              CALL M$PFIL(FPT_PFIL_SORT) ALTRET(AAARGH);

   8855 12 000165   000106 630400 10                 EPPR0   FPT_PFIL_SORT
        12 000166   440004 713400                    CLIMB   alt,+16388
        12 000167   400000 401760                    pmme    nvectors=1
        12 000170   000310 702000 12                 TSX2    AAARGH

     2578     8856    2              FPT_OPEN_EI.V.OPER.THISF# = %YES#;

   8856 12 000171   002000 236007                    LDQ     1024,DL
        12 000172   000044 256000 xsym               ORSQ    FPT_OPEN_EI+36

     2579     8857    2              FPT_OPEN_EI.V.OPER.NXTF# = %NO#;

   8857 12 000173   000001 236000 13                 LDQ     1
        12 000174   000044 356000 xsym               ANSQ    FPT_OPEN_EI+36
        12 000175   000307 710000 12                 TRA     s:8904

     2580     8858        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:445  
     2581     8859    2            CASE(4);                       /* FETCH A SORTED FILE                */

     2582     8860    2              CALL M$READ (FPT_READ_SORT) WHENALTRETURN

   8860 12 000176   000112 630400 10                 EPPR0   FPT_READ_SORT
        12 000177   440000 713400                    CLIMB   alt,read
        12 000200   401400 401760                    pmme    nvectors=4
        12 000201   000203 702000 12                 TSX2    s:8862
        12 000202   000217 710000 12                 TRA     s:8872

     2583     8861    3               DO;

     2584     8862    3                  IF %VPSZ_ERR# ~= %E$EOF

   8862 12 000203   000000 470400 xsym               LDP0    B$TCB$
        12 000204   000000 471500                    LDP1    0,,PR0
        12 000205   100102 236100                    LDQ     66,,PR1
        12 000206   377770 376007                    ANQ     131064,DL
        12 000207   000060 116007                    CMPQ    48,DL
        12 000210   000310 601000 12                 TNZ     AAARGH

     2585     8863    3                   THEN
     2586     8864    3                     GOTO AAARGH;
     2587     8865    3                  CALL MOP_UP;

   8865 12 000211   000342 701000 12                 TSX1    MOP_UP
        12 000212   000000 011000                    NOP     0

     2588     8866    3                  SORT_STATUS = %VPOC_EXHAUSTED#;

   8866 12 000213   000001 235007                    LDA     1,DL
        12 000214   200004 470500                    LDP0    @SORT_STATUS,,AUTO
        12 000215   000000 755100                    STA     0,,PR0

     2589     8867    3                  RETURN;

   8867 12 000216   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:446  

     2590     8868    3                  END;
     2591     8869        /**/
     2592     8870        /*  Set up FPT to re-open BEAST file.                                         */
     2593     8871        /**/
     2594     8872    2              OPEN_NAME.LEN = SORT_DATA.NAME.L;

   8872 12 000217   000030 236000 11                 LDQ     SORT_DATA
        12 000220   000052 552040 11                 STBQ    OPEN_NAME,'40'O

     2595     8873    2              OPEN_NAME.STRING = SORT_DATA.NAME.C;

   8873 12 000221   040000 100400                    MLR     fill='040'O
        12 000222   000030 200037 11                 ADSC9   SORT_DATA                cn=1,n=31
        12 000223   000052 200037 11                 ADSC9   OPEN_NAME                cn=1,n=31

     2596     8874    2              IN_ACCT = SORT_DATA.ACCT;

   8874 12 000224   000040 237000 11                 LDAQ    SORT_DATA+8
        12 000225   000000 755000 xsym               STA     IN_ACCT
        12 000226   000001 756000 xsym               STQ     IN_ACCT+1

     2597     8875    2              IN_PASS = SORT_DATA.PASS;

   8875 12 000227   040000 100400                    MLR     fill='040'O
        12 000230   000043 400010 11                 ADSC9   SORT_DATA+11             cn=2,n=8
        12 000231   000000 000010 xsym               ADSC9   IN_PASS                  cn=0,n=8

     2598     8876    2              IN_WSN = SORT_DATA.WSN;

   8876 12 000232   040000 100400                    MLR     fill='040'O
        12 000233   000045 400010 11                 ADSC9   SORT_DATA+13             cn=2,n=8
        12 000234   000000 000010 xsym               ADSC9   IN_WSN                   cn=0,n=8

     2599     8877    2              IN_SN.SN(0) = SORT_DATA.PSN;

   8877 12 000235   040000 100400                    MLR     fill='040'O
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:447  
        12 000236   000042 000006 11                 ADSC9   SORT_DATA+10             cn=0,n=6
        12 000237   000001 000006 xsym               ADSC9   IN_SN+1                  cn=0,n=6

     2600     8878    2              IN_SN.COUNT = 1;

   8878 12 000240   000001 235007                    LDA     1,DL
        12 000241   000000 755000 xsym               STA     IN_SN

     2601     8879    2              FPT_OPEN_EI.V.ASN# = SORT_DATA.ASN;

   8879 12 000242   000051 236000 11                 LDQ     SORT_DATA+17
        12 000243   000045 552004 xsym               STBQ    FPT_OPEN_EI+37,'04'O

     2602     8880    2              FPT_OPEN_EI.V.RES# = SORT_DATA.RES;

   8880 12 000244   000047 235000 11                 LDA     SORT_DATA+15
        12 000245   000050 236000 11                 LDQ     SORT_DATA+16
        12 000246   000022 773000                    LRL     18
        12 000247   000027 376000 xsym               ANQ     B_VECTNIL+23
        12 000250   000050 756000 xsym               STQ     FPT_OPEN_EI+40

     2603     8881    2              FPT_OPEN_EI.NAME_ = VECTOR(OPEN_NAME);

   8881 12 000251   000002 237000 13                 LDAQ    2
        12 000252   000006 757000 xsym               STAQ    FPT_OPEN_EI+6

     2604     8882        /**/
     2605     8883        /*  OPEN the BEAST file.                                                      */
     2606     8884        /**/
     2607     8885    2              CALL M$OPEN (FPT_OPEN_EI) ALTRET(REOPEN_ALT);

   8885 12 000253   000000 630400 xsym               EPPR0   FPT_OPEN_EI
        12 000254   450000 713400                    CLIMB   alt,open
        12 000255   410400 401760                    pmme    nvectors=18
        12 000256   000262 702000 12                 TSX2    REOPEN_ALT

     2608     8886    2              SORT_STATUS = %VPOC_GOTFILE#;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:448  

   8886 12 000257   200004 470500                    LDP0    @SORT_STATUS,,AUTO
        12 000260   000000 450100                    STZ     0,,PR0

     2609     8887    3              DO WHILE ('0'B);

   8887 12 000261   000307 710000 12                 TRA     s:8904

   8885 12 000262                       REOPEN_ALT   null
     2610     8888    3   REOPEN_ALT:   ;
     2611     8889    3                 IF %VPSZ_ERR# = %E$NOACCESS

   8889 12 000262   000000 470400 xsym               LDP0    B$TCB$
        12 000263   000000 471500                    LDP1    0,,PR0
        12 000264   100102 236100                    LDQ     66,,PR1
        12 000265   377770 376007                    ANQ     131064,DL
        12 000266   001640 116007                    CMPQ    928,DL
        12 000267   000300 600000 12                 TZE     s:8895
        12 000270   001600 116007                    CMPQ    896,DL
        12 000271   000300 600000 12                 TZE     s:8895
        12 000272   002330 116007                    CMPQ    1240,DL
        12 000273   000300 600000 12                 TZE     s:8895
        12 000274   001610 116007                    CMPQ    904,DL
        12 000275   000300 600000 12                 TZE     s:8895
        12 000276   013010 116007                    CMPQ    5640,DL
        12 000277   000310 601000 12                 TNZ     AAARGH

     2612     8890    3                   OR %VPSZ_ERR# = %E$INVSTAR
     2613     8891    3                   OR %VPSZ_ERR# = %E$CLSREL
     2614     8892    3                   OR %VPSZ_ERR# = %E$NOFILE
     2615     8893    3                   OR %VPSZ_ERR# = %E$NORESTRICT
     2616     8894    3                  THEN
     2617     8895    3                    SORT_STATUS = %VPOC_NOACCESS#;

   8895 12 000300   000002 235007                    LDA     2,DL
        12 000301   200004 473500                    LDP3    @SORT_STATUS,,AUTO
        12 000302   300000 755100                    STA     0,,PR3
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:449  
        12 000303   000304 710000 12                 TRA     s:8898

     2618     8896    3                  ELSE                     /* Unexpected error!                  */
     2619     8897    3                    GOTO AAARGH;
     2620     8898    3                 END;

   8898 12 000304   000307 710000 12                 TRA     s:8904

     2621     8899        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:450  
     2622     8900    2            CASE(5);                       /* ABORT THE SORTING PROCESS          */

     2623     8901    2              CALL MOP_UP;

   8901 12 000305   000342 701000 12                 TSX1    MOP_UP
        12 000306   000000 011000                    NOP     0

     2624     8902        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:451  
     2625     8903    2            END;                           /* END CASE                           */

     2626     8904    1           RETURN;

   8904 12 000307   000000 702200 xent               TSX2  ! X66_ARET

   8893 12 000310                       AAARGH       null
     2627     8905        /**/
     2628     8906    1   AAARGH: ;
     2629     8907    1           SYSTEM_ERR = %VPSZ_ERROR#;

   8907 12 000310   000000 470400 xsym               LDP0    B$TCB$
        12 000311   000000 471500                    LDP1    0,,PR0
        12 000312   100102 236100                    LDQ     66,,PR1
        12 000313   200006 756100                    STQ     SYSTEM_ERR,,AUTO

     2630     8908    1           CALL MOP_UP;

   8908 12 000314   000342 701000 12                 TSX1    MOP_UP
        12 000315   000000 011000                    NOP     0

     2631     8909    1           CALL VPL$ERR_PROC(0,63,'06'O);

   8909 12 000316   000006 630400 13                 EPPR0   6
        12 000317   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000320   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000321   000000 011000                    NOP     0

     2632     8910        /*E*   ERROR: VPF-00063
     2633     8911             MESSAGE: Internal error during selection in SORTED order:
     2634     8912        */
     2635     8913    1           CALL VPL$ERR_PROC(4,0,,SYSTEM_ERR,,,M$EI#);

   8913 12 000322   000011 236000 13                 LDQ     9
        12 000323   200022 756100                    STQ     CODE$+7,,AUTO
        12 000324   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000325   000001 235000 xsym               LDA     B_VECTNIL+1
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:452  
        12 000326   200020 757100                    STAQ    CODE$+5,,AUTO
        12 000327   200006 630500                    EPPR0   SYSTEM_ERR,,AUTO
        12 000330   200017 450500                    STP0    CODE$+4,,AUTO
        12 000331   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000332   200016 756100                    STQ     CODE$+3,,AUTO
        12 000333   000012 237000 13                 LDAQ    10
        12 000334   200014 757100                    STAQ    CODE$+1,,AUTO
        12 000335   200014 630500                    EPPR0   CODE$+1,,AUTO
        12 000336   000025 631400 xsym               EPPR1   B_VECTNIL+21
        12 000337   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000340   000000 011000                    NOP     0

     2636     8914    1           RETURN;

   8914 12 000341   000000 702200 xent               TSX2  ! X66_ARET

     2637     8915        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:453  
     2638     8916    1   MOP_UP: PROC;

   8916 12 000342   200010 741300       MOP_UP       STX1  ! SYSTEM_ERR+2,,AUTO

     2639     8917        /**/
     2640     8918        /*  This routine is used to clean up after the FID-sorting process            */
     2641     8919        /*  is over and done with.  This may be because of an abort request,          */
     2642     8920        /*  or some severe error.                                                     */
     2643     8921        /*                                                                            */
     2644     8922        /*  It's OK to come through here more than once.                              */
     2645     8923        /**/
     2646     8924    2           IF M$SORT1$ -> F$DCB.FCD#

   8924 12 000343   000000 470400 xsym               LDP0    M$SORT1$
        12 000344   000031 236100                    LDQ     25,,PR0
        12 000345   020000 316007                    CANQ    8192,DL
        12 000346   000353 600000 12                 TZE     SORT_CLOSED

     2647     8925    2            THEN
     2648     8926    2              CALL M$CLOSE (FPT_CLOSE_SORT) ALTRET (SORT_CLOSED);

   8926 12 000347   000130 630400 10                 EPPR0   FPT_CLOSE_SORT
        12 000350   450001 713400                    CLIMB   alt,close
        12 000351   406000 401760                    pmme    nvectors=13
        12 000352   000353 702000 12                 TSX2    SORT_CLOSED

   8925 12 000353                       SORT_CLOSED  null
     2649     8927    2   SORT_CLOSED: ;
     2650     8928    2           SORTING_INPUT = %NO#;

   8928 12 000353   000000 450000 xsym               STZ     SORTING_INPUT

     2651     8929    2           RETURN;

   8929 12 000354   200010 221300                    LDX1  ! SYSTEM_ERR+2,,AUTO
        12 000355   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:454  
     2652     8930    2   END MOP_UP;
     2653     8931        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:455  
     2654     8932    1   MUNGE_KEY: PROC(KEY_PART);

   8932 12 000356   200010 741300       MUNGE_KEY    STX1  ! SYSTEM_ERR+2,,AUTO

     2655     8933        /**/
     2656     8934        /*  INCLUDES  */
     2657     8935        /**/
     2658     8936        %INCLUDE FM$FIT;
     2659     9157        /**/
     2660     9158        /*  PARAMETERS  */
     2661     9159        /**/
     2662     9160    2   DCL KEY_PART SBIN WORD;
     2663     9161        /**/
     2664     9162        /*  LOCAL AUTO  */
     2665     9163        /**/
     2666     9164    2   DCL KEY_SBIN SBIN WORD;
     2667     9165    2   DCL KEY_CHAR REDEF KEY_SBIN CHAR(4);
     2668     9166    2   DCL KEY_UBIN REDEF KEY_SBIN UBIN WORD;
     2669     9167    2   DCL CODE$ PTR;
     2670     9168        /**/
     2671     9169        /*  BASED  */
     2672     9170        /**/
     2673     9171        %CODE03;
     2674     9178        %CODE04;
     2675     9186        %CODE05;
     2676     9189        %CODE06;
     2677     9193        /**/
     2678     9194        /*  ENTRY DCLS  */
     2679     9195        /**/
     2680     9196    2   DCL XSF$LOCCODP ENTRY(2) ALTRET;
     2681     9197        /**/
     2682     9198    3           DO CASE(ICB.SORTING_ORDER.FIELD.TYPE(KEY_PART));

   9198 12 000357   200011 470500                    LDP0    @KEY_PART,,AUTO
        12 000360   000000 235100                    LDA     0,,PR0
        12 000361   000001 735000                    ALS     1
        12 000362   000206 235005 xsym               LDA     ICB+134,AL
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:456  
        12 000363   000012 115007                    CMPA    10,DL
        12 000364   000366 602005 12                 TNC     s:9198+7,AL
        12 000365   000554 710000 12                 TRA     s:9238
        12 000366   000554 710000 12                 TRA     s:9238
        12 000367   000400 710000 12                 TRA     s:9200
        12 000370   000417 710000 12                 TRA     s:9204
        12 000371   000435 710000 12                 TRA     s:9208
        12 000372   000453 710000 12                 TRA     s:9212
        12 000373   000471 710000 12                 TRA     s:9216
        12 000374   000475 710000 12                 TRA     s:9218
        12 000375   000513 710000 12                 TRA     s:9222
        12 000376   000531 710000 12                 TRA     s:9226
        12 000377   000547 710000 12                 TRA     s:9230

     2683     9199    3            CASE(1);                       /* GRANULES                           */

     2684     9200    3              CODE$ = FPARAM$;

   9200 12 000400   000000 236000 xsym               LDQ     FPARAM$
        12 000401   200013 756100                    STQ     CODE$,,AUTO

     2685     9201    3              CALL XSF$LOCCODP(CODE$,3) ALTRET(SIGH);

   9201 12 000402   000014 236000 13                 LDQ     12
        12 000403   200015 756100                    STQ     CODE$+2,,AUTO
        12 000404   200013 631500                    EPPR1   CODE$,,AUTO
        12 000405   200014 451500                    STP1    CODE$+1,,AUTO
        12 000406   200014 630500                    EPPR0   CODE$+1,,AUTO
        12 000407   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000410   000000 701000 xent               TSX1    XSF$LOCCODP
        12 000411   000555 702000 12                 TSX2    SIGH

     2686     9202    3              KEY_UBIN = CODE$ -> CODE03.UGRANS;

   9202 12 000412   200013 470500                    LDP0    CODE$,,AUTO
        12 000413   000000 236100                    LDQ     0,,PR0
        12 000414   000032 376000 xsym               ANQ     B_VECTNIL+26
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:457  
        12 000415   200012 756100                    STQ     KEY_SBIN,,AUTO
        12 000416   000554 710000 12                 TRA     s:9238

     2687     9203    3            CASE(2);                       /* Number of records                  */

     2688     9204    3              CODE$ = FPARAM$;

   9204 12 000417   000000 236000 xsym               LDQ     FPARAM$
        12 000420   200013 756100                    STQ     CODE$,,AUTO

     2689     9205    3              CALL XSF$LOCCODP(CODE$,3) ALTRET(SIGH);

   9205 12 000421   000014 236000 13                 LDQ     12
        12 000422   200015 756100                    STQ     CODE$+2,,AUTO
        12 000423   200013 631500                    EPPR1   CODE$,,AUTO
        12 000424   200014 451500                    STP1    CODE$+1,,AUTO
        12 000425   200014 630500                    EPPR0   CODE$+1,,AUTO
        12 000426   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000427   000000 701000 xent               TSX1    XSF$LOCCODP
        12 000430   000555 702000 12                 TSX2    SIGH

     2690     9206    3              KEY_UBIN = CODE$ -> CODE03.NRECS;

   9206 12 000431   200013 470500                    LDP0    CODE$,,AUTO
        12 000432   000002 235100                    LDA     2,,PR0
        12 000433   200012 755100                    STA     KEY_SBIN,,AUTO
        12 000434   000554 710000 12                 TRA     s:9238

     2691     9207    3            CASE(3);                       /* Date of CREATION                   */

     2692     9208    3              CODE$ = FPARAM$;

   9208 12 000435   000000 236000 xsym               LDQ     FPARAM$
        12 000436   200013 756100                    STQ     CODE$,,AUTO

     2693     9209    3              CALL XSF$LOCCODP(CODE$,4) ALTRET(SIGH);

PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:458  
   9209 12 000437   000012 236000 13                 LDQ     10
        12 000440   200015 756100                    STQ     CODE$+2,,AUTO
        12 000441   200013 631500                    EPPR1   CODE$,,AUTO
        12 000442   200014 451500                    STP1    CODE$+1,,AUTO
        12 000443   200014 630500                    EPPR0   CODE$+1,,AUTO
        12 000444   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000445   000000 701000 xent               TSX1    XSF$LOCCODP
        12 000446   000555 702000 12                 TSX2    SIGH

     2694     9210    3              KEY_UBIN = CODE$ -> CODE04.CREATION.TIME;

   9210 12 000447   200013 470500                    LDP0    CODE$,,AUTO
        12 000450   000002 235100                    LDA     2,,PR0
        12 000451   200012 755100                    STA     KEY_SBIN,,AUTO
        12 000452   000554 710000 12                 TRA     s:9238

     2695     9211    3            CASE(4);                       /* Date of MODIFICATION               */

     2696     9212    3              CODE$ = FPARAM$;

   9212 12 000453   000000 236000 xsym               LDQ     FPARAM$
        12 000454   200013 756100                    STQ     CODE$,,AUTO

     2697     9213    3              CALL XSF$LOCCODP(CODE$,4) ALTRET(SIGH);

   9213 12 000455   000012 236000 13                 LDQ     10
        12 000456   200015 756100                    STQ     CODE$+2,,AUTO
        12 000457   200013 631500                    EPPR1   CODE$,,AUTO
        12 000460   200014 451500                    STP1    CODE$+1,,AUTO
        12 000461   200014 630500                    EPPR0   CODE$+1,,AUTO
        12 000462   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000463   000000 701000 xent               TSX1    XSF$LOCCODP
        12 000464   000555 702000 12                 TSX2    SIGH

     2698     9214    3              KEY_UBIN = CODE$ -> CODE04.MODIFY.TIME;

   9214 12 000465   200013 470500                    LDP0    CODE$,,AUTO
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:459  
        12 000466   000001 235100                    LDA     1,,PR0
        12 000467   200012 755100                    STA     KEY_SBIN,,AUTO
        12 000470   000554 710000 12                 TRA     s:9238

     2699     9215    3            CASE(5);                       /* Date of EXPIRATION                 */

     2700     9216    3              KEY_SBIN = M$EI$ -> F$DCB.EXPIRE#;

   9216 12 000471   000000 471400 xsym               LDP1    M$EI$
        12 000472   100035 235100                    LDA     29,,PR1
        12 000473   200012 755100                    STA     KEY_SBIN,,AUTO
        12 000474   000554 710000 12                 TRA     s:9238

     2701     9217    3            CASE(6);                       /* Date of ACCESS                     */

     2702     9218    3              CODE$ = FPARAM$;

   9218 12 000475   000000 236000 xsym               LDQ     FPARAM$
        12 000476   200013 756100                    STQ     CODE$,,AUTO

     2703     9219    3              CALL XSF$LOCCODP(CODE$,4) ALTRET(SIGH);

   9219 12 000477   000012 236000 13                 LDQ     10
        12 000500   200015 756100                    STQ     CODE$+2,,AUTO
        12 000501   200013 631500                    EPPR1   CODE$,,AUTO
        12 000502   200014 451500                    STP1    CODE$+1,,AUTO
        12 000503   200014 630500                    EPPR0   CODE$+1,,AUTO
        12 000504   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000505   000000 701000 xent               TSX1    XSF$LOCCODP
        12 000506   000555 702000 12                 TSX2    SIGH

     2704     9220    3              KEY_UBIN = CODE$ -> CODE04.ACCESS.TIME;

   9220 12 000507   200013 470500                    LDP0    CODE$,,AUTO
        12 000510   000000 235100                    LDA     0,,PR0
        12 000511   200012 755100                    STA     KEY_SBIN,,AUTO
        12 000512   000554 710000 12                 TRA     s:9238
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:460  

     2705     9221    3            CASE(7);                       /* Date of BACKUP                     */

     2706     9222    3              CODE$ = FPARAM$;

   9222 12 000513   000000 236000 xsym               LDQ     FPARAM$
        12 000514   200013 756100                    STQ     CODE$,,AUTO

     2707     9223    3              CALL XSF$LOCCODP(CODE$,5) ALTRET(SIGH);

   9223 12 000515   000015 236000 13                 LDQ     13
        12 000516   200015 756100                    STQ     CODE$+2,,AUTO
        12 000517   200013 631500                    EPPR1   CODE$,,AUTO
        12 000520   200014 451500                    STP1    CODE$+1,,AUTO
        12 000521   200014 630500                    EPPR0   CODE$+1,,AUTO
        12 000522   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000523   000000 701000 xent               TSX1    XSF$LOCCODP
        12 000524   000555 702000 12                 TSX2    SIGH

     2708     9224    3              KEY_UBIN = CODE$->CODE05.BACKUP.TIME;

   9224 12 000525   200013 470500                    LDP0    CODE$,,AUTO
        12 000526   000000 235100                    LDA     0,,PR0
        12 000527   200012 755100                    STA     KEY_SBIN,,AUTO
        12 000530   000554 710000 12                 TRA     s:9238

     2709     9225    3            CASE(8);                       /* Date of STOW                       */

     2710     9226    3              CODE$ = FPARAM$;

   9226 12 000531   000000 236000 xsym               LDQ     FPARAM$
        12 000532   200013 756100                    STQ     CODE$,,AUTO

     2711     9227    3              CALL XSF$LOCCODP(CODE$,6) ALTRET(SIGH);

   9227 12 000533   000016 236000 13                 LDQ     14
        12 000534   200015 756100                    STQ     CODE$+2,,AUTO
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:461  
        12 000535   200013 631500                    EPPR1   CODE$,,AUTO
        12 000536   200014 451500                    STP1    CODE$+1,,AUTO
        12 000537   200014 630500                    EPPR0   CODE$+1,,AUTO
        12 000540   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000541   000000 701000 xent               TSX1    XSF$LOCCODP
        12 000542   000555 702000 12                 TSX2    SIGH

     2712     9228    3              KEY_UBIN = CODE$->CODE06.STOW.TIME;

   9228 12 000543   200013 470500                    LDP0    CODE$,,AUTO
        12 000544   000000 235100                    LDA     0,,PR0
        12 000545   200012 755100                    STA     KEY_SBIN,,AUTO
        12 000546   000554 710000 12                 TRA     s:9238

     2713     9229    3            CASE(9);                       /* TYPE                               */

     2714     9230    3              KEY_CHAR = M$EI$ -> F$DCB.TYPE#;

   9230 12 000547   000000 471400 xsym               LDP1    M$EI$
        12 000550   100025 236100                    LDQ     21,,PR1
        12 000551   000022 736000                    QLS     18
        12 000552   040040 276007                    ORQ     16416,DL
        12 000553   200012 756100                    STQ     KEY_SBIN,,AUTO

     2715     9231    3            END;                           /* END CASE                           */

     2716     9232        %EJECT;
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:462  
     2717     9233        /**/
     2718     9234        /*  Make sure that the attribute we want to sort by is actually present       */
     2719     9235        /*  for this file.  If not, make a rash and undoubtedly wrong assumption      */
     2720     9236        /*  about the attribute for this file, as it's the best we can do.            */
     2721     9237        /**/
     2722     9238    3           DO WHILE ('0'B);

   9238 12 000554   000556 710000 12                 TRA     s:9245

   9227 12 000555                       SIGH         null
     2723     9239    3   SIGH:      ;                            /* File attribute for sort not present*/
     2724     9240    3              KEY_SBIN = 0;

   9240 12 000555   200012 450100                    STZ     KEY_SBIN,,AUTO

     2725     9241    3              END;

     2726     9242        /**/
     2727     9243        /*  Take care of keys for DESCENDING ORDER.  */
     2728     9244        /**/
     2729     9245    2           IF ICB.SORTING_ORDER.FIELD.DESCENDING(KEY_PART)

   9245 12 000556   200011 470500                    LDP0    @KEY_PART,,AUTO
        12 000557   000000 235100                    LDA     0,,PR0
        12 000560   000001 735000                    ALS     1
        12 000561   000205 234005 xsym               SZN     ICB+133,AL
        12 000562   000566 605000 12                 TPL     s:9248

     2730     9246    2            THEN                           /* Gotta bollix for descending order  */
     2731     9247    2              KEY_UBIN = 0-1 - KEY_UBIN;

   9247 12 000563   000001 335007                    LCA     1,DL
        12 000564   200012 135100                    SBLA    KEY_SBIN,,AUTO
        12 000565   200012 755100                    STA     KEY_SBIN,,AUTO

     2732     9248    2           SORT_KEY.FUZZY(KEY_PART) = KEY_SBIN;

PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:463  
   9248 12 000566   000000 235100                    LDA     0,,PR0
        12 000567   000002 735000                    ALS     2
        12 000570   000005 100500                    MLR     fill='000'O
        12 000571   200012 000004                    ADSC9   KEY_SBIN,,AUTO           cn=0,n=4
        12 000572   000012 200004 11                 ADSC9   SORT_KEY,A               cn=1,n=4

     2733     9249        /**/
     2734     9250    2           RETURN;

   9250 12 000573   200010 221300                    LDX1  ! SYSTEM_ERR+2,,AUTO
        12 000574   000001 702211                    TSX2  ! 1,X1
     2735     9251    2   END MUNGE_KEY;
     2736     9252        /**/
     2737     9253    1   END VPF$SORT_FID;

PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:464  
--  Include file information  --

   FM$FIT.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPF$SORT_FID.
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:465  

 **** Variables and constants ****

  ****  Section 010 RoData VPF$SORT_FID

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   166-0-0/d STRC(1080)  r     1 FPT_CLOSE_BEAST          130-0-0/d STRC(1080)  r     1 FPT_CLOSE_SORT
     0-0-0/d STRC(2088)  r     1 FPT_OPEN_SORT_OUT        106-0-0/d STRC(144)   r     1 FPT_PFIL_SORT
   112-0-0/d STRC(504)   r     1 FPT_READ_SORT             72-0-0/d STRC(432)   r     1 FPT_WRITE_SORT

  ****  Section 011  Data  VPF$SORT_FID

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 FPT_PRECORD_SORT          52-0-0/d STRC(288)   r     1 OPEN_NAME
    30-0-0/d STRC(648)   r     1 SORT_DATA                 12-0-0/d STRC(441)   r     1 SORT_KEY

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FUNCTION                 11-0-0/w PTR         r     1 @KEY_PART
     4-0-0/w PTR         r     1 @SORT_STATUS              13-0-0/w PTR         r     1 CODE$
    *0-0-0/w SBIN        r     1 FUNCTION                   5-0-0/w SBIN        r     1 I
    12-0-0/w CHAR(4)     r     1 KEY_CHAR                  *0-0-0/w SBIN        r     1 KEY_PART
    12-0-0/w SBIN        r     1 KEY_SBIN                  12-0-0/w UBIN        r     1 KEY_UBIN
    *0-0-0/w SBIN        r     1 SORT_STATUS                6-0-0/b BIT         r     1 SYSTEM_ERR

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:466  
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/w PTR         r     1 FPARAM$                    0-0-0/d STRC(2088)  r     1 FPT_OPEN_EI
     0-0-0/d STRC(5868)  r     1 ICB                        0-0-0/c CHAR(8)     r     1 IN_ACCT
     0-0-0/c CHAR(8)     r     1 IN_PASS                    0-0-0/w STRC(1116)  r     1 IN_SN
     0-0-0/c CHAR(8)     r     1 IN_WSN                     0-0-0/w SBIN        r     1 M$EI#
     0-0-0/w PTR         r     1 M$EI$                      0-0-0/w PTR         r     1 M$SORT1$
     0-0-0/b BIT         r     1 SORTING_INPUT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(324)   r     1 CODE03                     0-0-0/w STRC(396)   r     1 CODE04
     0-0-0/w STRC(108)   r     1 CODE05                     0-0-0/w STRC(108)   r     1 CODE06
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0N  NULL        r     1 M$EI
     0-0-0N  NULL        r     1 M$SORT1


   Procedure VPF$SORT_FID requires 381 words for executable code.
   Procedure VPF$SORT_FID requires 20 words of local(AUTO) storage.

    No errors detected in file VPF$SRCLST.:E05TSI    .
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:467  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:468  
          MINI XREF LISTING

AAARGH
      8893**LABEL    8806--CALLALT  8835--GOTO     8842--CALLALT  8845--CALLALT  8852--CALLALT  8855--CALLALT
      8864--GOTO     8897--GOTO
B$ALT.CODE
      8580**DCL      8580--REDEF    8581--REDEF    8581--REDEF
B$ALT.ERR
      8581**DCL      8907>>ASSIGN
B$ALT.ERR.ERR#
      8582**DCL      8582--REDEF    8833>>IF       8862>>IF       8889>>IF       8889>>IF       8889>>IF
      8889>>IF       8889>>IF
B$ALT.EVID
      8581**DCL      8581--REDEF    8581--REDEF
B$TCB.ALT$
      8576**DCL      8833>>IF       8862>>IF       8889>>IF       8889>>IF       8889>>IF       8889>>IF
      8889>>IF       8907>>ASSIGN
B$TCB$
      6021**DCL      8833>>IF       8862>>IF       8889>>IF       8889>>IF       8889>>IF       8889>>IF
      8889>>IF       8907>>ASSIGN
BREAK_LOC
      5256**DCL      5256--REDEF
CODE$ IN PROCEDURE MUNGE_KEY
      9167**DCL      9200<<ASSIGN   9201<>CALL     9202>>ASSIGN   9204<<ASSIGN   9205<>CALL     9206>>ASSIGN
      9208<<ASSIGN   9209<>CALL     9210>>ASSIGN   9212<<ASSIGN   9213<>CALL     9214>>ASSIGN   9218<<ASSIGN
      9219<>CALL     9220>>ASSIGN   9222<<ASSIGN   9223<>CALL     9224>>ASSIGN   9226<<ASSIGN   9227<>CALL
      9228>>ASSIGN
CODE03.NRECS IN PROCEDURE MUNGE_KEY
      9174**DCL      9206>>ASSIGN
CODE03.UGRANS IN PROCEDURE MUNGE_KEY
      9172**DCL      9202>>ASSIGN
CODE04.ACCESS.TIME IN PROCEDURE MUNGE_KEY
      9183**DCL      9220>>ASSIGN
CODE04.CREATION.TIME IN PROCEDURE MUNGE_KEY
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:469  
      9183**DCL      9210>>ASSIGN
CODE04.MODIFY.TIME IN PROCEDURE MUNGE_KEY
      9183**DCL      9214>>ASSIGN
CODE05.BACKUP.TIME IN PROCEDURE MUNGE_KEY
      9187**DCL      9224>>ASSIGN
CODE06.STOW.EFT IN PROCEDURE MUNGE_KEY
      9190**DCL      9191--REDEF
CODE06.STOW.TIME IN PROCEDURE MUNGE_KEY
      9190**DCL      9228>>ASSIGN
DEF_ICB.FID.STRING
      5854**DCL      5855--REDEF
DEV_ICB.FID.STRING
      5740**DCL      5741--REDEF
EI_KEY.KEY
      5952**DCL      5952--REDEF    5952--REDEF    5952--REDEF
EO_OCB.TYPE
      5452**DCL      5453--REDEF
EXPECTED
      8840**LABEL    8839--CALLALT
F$DCB.ACCT#
      8535**DCL      8815>>ASSIGN
F$DCB.ACTPOS
      8551**DCL      8551--REDEF
F$DCB.ARS#
      8525**DCL      8525--REDEF
F$DCB.ASN#
      8540**DCL      8819>>ASSIGN
F$DCB.ATTR
      8544**DCL      8545--REDEF
F$DCB.BORROW
      8559**DCL      8559--REDEF    8559--REDEF    8559--REDEF
F$DCB.DCBNAME.L
      8573**DCL      8573--IMP-SIZ
F$DCB.EOMCHAR#
      8529**DCL      8529--REDEF
F$DCB.EXPIRE#
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:470  
      8542**DCL      9216>>ASSIGN
F$DCB.FCD#
      8538**DCL      8850>>IF       8924>>IF
F$DCB.FLDID
      8554**DCL      8554--REDEF
F$DCB.FORM$
      8548**DCL      8548--REDEF
F$DCB.FSECT
      8564**DCL      8564--REDEF
F$DCB.FSN#
      8541**DCL      8541--REDEF    8541--REDEF    8542--REDEF
F$DCB.HEADER$
      8547**DCL      8547--REDEF
F$DCB.IXTNSIZE#
      8545**DCL      8545--REDEF
F$DCB.LASTSTA$
      8534**DCL      8534--REDEF
F$DCB.LVL
      8560**DCL      8560--REDEF
F$DCB.NAME#.C
      8535**DCL      8535--REDEF    8814>>ASSIGN
F$DCB.NAME#.L
      8535**DCL      8813>>ASSIGN
F$DCB.NOEOF
      8557**DCL      8557--REDEF
F$DCB.NRECS#
      8546**DCL      8546--REDEF
F$DCB.NRECX
      8565**DCL      8565--REDEF
F$DCB.OHDR
      8557**DCL      8557--REDEF
F$DCB.ORG#
      8540**DCL      8540--REDEF
F$DCB.PRECNO
      8563**DCL      8563--REDEF
F$DCB.PSN#
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:471  
      8535**DCL      8820>>ASSIGN
F$DCB.RCSZ
      8569**DCL      8569--REDEF
F$DCB.RES#
      8536**DCL      8536--REDEF    8818>>ASSIGN
F$DCB.SETX
      8548**DCL      8548--REDEF
F$DCB.TAB$
      8548**DCL      8548--REDEF
F$DCB.TDA
      8562**DCL      8563--REDEF
F$DCB.TYPE#
      8536**DCL      9230>>ASSIGN
F$DCB.WSN#
      8536**DCL      8536--REDEF    8817>>ASSIGN
FPARAM$
      5257**DCL      9200>>ASSIGN   9204>>ASSIGN   9208>>ASSIGN   9212>>ASSIGN   9218>>ASSIGN   9222>>ASSIGN
      9226>>ASSIGN
FPT_CLOSE_BEAST
      8452**DCL      8852<>CALL
FPT_CLOSE_BEAST.SN_
      8452**DCL      8452--REDEF
FPT_CLOSE_BEAST.UTL_
      8453**DCL      8453--REDEF
FPT_CLOSE_BEAST.V
      8457**DCL      8452--DCLINIT
FPT_CLOSE_BEAST.V.EXPIRE#
      8467**DCL      8467--REDEF
FPT_CLOSE_BEAST.V.TYPE#
      8465**DCL      8465--REDEF
FPT_CLOSE_BEAST.V.XTNSIZE#
      8462**DCL      8462--REDEF    8464--REDEF
FPT_CLOSE_EI.SN_
      6793**DCL      6793--REDEF
FPT_CLOSE_EI.UTL_
      6794**DCL      6794--REDEF
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:472  
FPT_CLOSE_EI.V.EXPIRE#
      6808**DCL      6808--REDEF
FPT_CLOSE_EI.V.TYPE#
      6806**DCL      6806--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6803**DCL      6803--REDEF    6805--REDEF
FPT_CLOSE_PTL.SN_
      6919**DCL      6919--REDEF
FPT_CLOSE_PTL.UTL_
      6920**DCL      6920--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6934**DCL      6934--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6932**DCL      6932--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6929**DCL      6929--REDEF    6931--REDEF
FPT_CLOSE_READ.SN_
      6835**DCL      6835--REDEF
FPT_CLOSE_READ.UTL_
      6836**DCL      6836--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6850**DCL      6850--REDEF
FPT_CLOSE_READ.V.TYPE#
      6848**DCL      6848--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6845**DCL      6845--REDEF    6847--REDEF
FPT_CLOSE_SI.SN_
      7003**DCL      7003--REDEF
FPT_CLOSE_SI.UTL_
      7004**DCL      7004--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      7018**DCL      7018--REDEF
FPT_CLOSE_SI.V.TYPE#
      7016**DCL      7016--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      7013**DCL      7013--REDEF    7015--REDEF
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:473  
FPT_CLOSE_SORT
      8408**DCL      8926<>CALL
FPT_CLOSE_SORT.SN_
      8408**DCL      8408--REDEF
FPT_CLOSE_SORT.UTL_
      8409**DCL      8409--REDEF
FPT_CLOSE_SORT.V
      8413**DCL      8408--DCLINIT
FPT_CLOSE_SORT.V.EXPIRE#
      8423**DCL      8423--REDEF
FPT_CLOSE_SORT.V.TYPE#
      8421**DCL      8421--REDEF
FPT_CLOSE_SORT.V.XTNSIZE#
      8418**DCL      8418--REDEF    8420--REDEF
FPT_CLOSE_STD.SN_
      6961**DCL      6961--REDEF
FPT_CLOSE_STD.UTL_
      6962**DCL      6962--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6976**DCL      6976--REDEF
FPT_CLOSE_STD.V.TYPE#
      6974**DCL      6974--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6971**DCL      6971--REDEF    6973--REDEF
FPT_CLSEI_FT.SN_
      6877**DCL      6877--REDEF
FPT_CLSEI_FT.UTL_
      6878**DCL      6878--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6892**DCL      6892--REDEF
FPT_CLSEI_FT.V.TYPE#
      6890**DCL      6890--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6887**DCL      6887--REDEF    6889--REDEF
FPT_OPEN_EI
      6446**DCL      8885<>CALL
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:474  
FPT_OPEN_EI.ACSVEH_
      6448**DCL      6449--REDEF
FPT_OPEN_EI.ALTKEYS_
      6454**DCL      6455--REDEF    6455--REDEF
FPT_OPEN_EI.HDR_
      6453**DCL      6454--REDEF
FPT_OPEN_EI.NAME_
      6447**DCL      8881<<ASSIGN
FPT_OPEN_EI.TAB_
      6452**DCL      6453--REDEF
FPT_OPEN_EI.UHL_
      6446**DCL      6447--REDEF    6447--REDEF
FPT_OPEN_EI.V.ASN#
      6465**DCL      8879<<ASSIGN
FPT_OPEN_EI.V.FSN#
      6486**DCL      6486--REDEF    6486--REDEF
FPT_OPEN_EI.V.OPER.NXTF#
      6458**DCL      8857<<ASSIGN
FPT_OPEN_EI.V.OPER.THISF#
      6458**DCL      8856<<ASSIGN
FPT_OPEN_EI.V.RES#
      6470**DCL      8880<<ASSIGN
FPT_OPEN_EI.WSN_
      6452**DCL      6452--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6557**DCL      6558--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6563**DCL      6564--REDEF    6564--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6562**DCL      6563--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6561**DCL      6562--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6555**DCL      6556--REDEF    6556--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6595**DCL      6595--REDEF    6595--REDEF
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:475  
FPT_OPEN_EI_SAVE.WSN_
      6561**DCL      6561--REDEF
FPT_OPEN_OUT.ACSVEH_
      6339**DCL      6340--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6345**DCL      6346--REDEF    6346--REDEF
FPT_OPEN_OUT.HDR_
      6344**DCL      6345--REDEF
FPT_OPEN_OUT.TAB_
      6343**DCL      6344--REDEF
FPT_OPEN_OUT.UHL_
      6337**DCL      6338--REDEF    6338--REDEF
FPT_OPEN_OUT.V.FSN#
      6377**DCL      6377--REDEF    6377--REDEF
FPT_OPEN_OUT.WSN_
      6343**DCL      6343--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6230**DCL      6231--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6236**DCL      6237--REDEF    6237--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6235**DCL      6236--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6234**DCL      6235--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6228**DCL      6229--REDEF    6229--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6268**DCL      6268--REDEF    6268--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6234**DCL      6234--REDEF
FPT_OPEN_SORT_OUT
      8239**DCL      8806<>CALL
FPT_OPEN_SORT_OUT.ACSVEH_
      8241**DCL      8242--REDEF
FPT_OPEN_SORT_OUT.ALTKEYS_
      8247**DCL      8248--REDEF    8248--REDEF
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:476  
FPT_OPEN_SORT_OUT.HDR_
      8246**DCL      8247--REDEF
FPT_OPEN_SORT_OUT.TAB_
      8245**DCL      8246--REDEF
FPT_OPEN_SORT_OUT.UHL_
      8239**DCL      8240--REDEF    8240--REDEF
FPT_OPEN_SORT_OUT.V
      8248**DCL      8239--DCLINIT
FPT_OPEN_SORT_OUT.V.FSN#
      8279**DCL      8279--REDEF    8279--REDEF
FPT_OPEN_SORT_OUT.WSN_
      8245**DCL      8245--REDEF
FPT_PFIL_SORT
      8334**DCL      8855<>CALL
FPT_PFIL_SORT.V
      8334**DCL      8334--DCLINIT
FPT_PRECORD_SORT
      8489**DCL      8839<>CALL     8842<>CALL
FPT_PRECORD_SORT.V
      8491**DCL      8489--DCLINIT
FPT_PRECORD_SORT.V.KEYS#
      8492**DCL      8837<<ASSIGN   8841<<ASSIGN
FPT_PRECORD_SORT.V.N#
      8495**DCL      8836<<ASSIGN   8840<<ASSIGN
FPT_READ_SORT
      8361**DCL      8860<>CALL
FPT_READ_SORT.STATION_
      8364**DCL      8365--REDEF
FPT_READ_SORT.V
      8365**DCL      8361--DCLINIT
FPT_READ_SORT.V.DVBYTE.REREAD#
      8376**DCL      8376--REDEF
FPT_READ_SORT.V.INDX#
      8374**DCL      8374--REDEF
FPT_READ_STD.STATION_
      6658**DCL      6659--REDEF
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:477  
FPT_READ_STD.V.DVBYTE.REREAD#
      6670**DCL      6670--REDEF
FPT_READ_STD.V.INDX#
      6668**DCL      6668--REDEF
FPT_READ_UC.STATION_
      6619**DCL      6620--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6631**DCL      6631--REDEF
FPT_READ_UC.V.INDX#
      6629**DCL      6629--REDEF
FPT_WRITE_ME.STATION_
      6727**DCL      6727--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6734**DCL      6734--REDEF
FPT_WRITE_OUT.STATION_
      6758**DCL      6758--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6765**DCL      6765--REDEF
FPT_WRITE_SORT
      8306**DCL      8831<>CALL     8845<>CALL
FPT_WRITE_SORT.STATION_
      8308**DCL      8308--REDEF
FPT_WRITE_SORT.V
      8309**DCL      8306--DCLINIT
FPT_WRITE_SORT.V.DVBYTE.VFC#
      8315**DCL      8315--REDEF
FPT_WRITE_UC.STATION_
      6696**DCL      6696--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6703**DCL      6703--REDEF
FROM_SN.SN
      5602**DCL      5603--REDEF
FUNCTION
        44**DCL         6--PROC     8803>>DOCASE
GETCMD.OUT$
      4809**DCL      4815--REDEF
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:478  
I
      8800**DCL      8825<<DOINDEX  8826<>CALL
ICB.FID.STRING
      5626**DCL      5627--REDEF
ICB.SORTING_ORDER.COUNT
      5705**DCL      8807>>ASSIGN   8824>>ASSIGN   8825>>DOINDEX  8838>>ASSIGN   8843>>ASSIGN   8843>>ASSIGN
ICB.SORTING_ORDER.FIELD.DESCENDING
      5707**DCL      9245>>IF
ICB.SORTING_ORDER.FIELD.TYPE
      5708**DCL      9198>>DOCASE
IFSFA_PARAM.EOMCHAR#
      5981**DCL      5982--REDEF
IFSFA_PARAM.SIG1
      5975**DCL      5975--REDEF
IFSFA_PARAM.SIG2
      5975**DCL      5976--REDEF
IN_ACCT
      5547**DCL      8874<<ASSIGN
IN_PASS
      5548**DCL      8816>>ASSIGN   8875<<ASSIGN
IN_RES
      5548**DCL      5548--REDEF
IN_SN.COUNT
      5563**DCL      8878<<ASSIGN
IN_SN.SN
      5564**DCL      5565--REDEF    8877<<ASSIGN
IN_WSN
      5585**DCL      8876<<ASSIGN
KEY_CHAR IN PROCEDURE MUNGE_KEY
      9165**DCL      9230<<ASSIGN
KEY_PART IN PROCEDURE MUNGE_KEY
      9160**DCL      8932--PROC     9198>>DOCASE   9245>>IF       9248>>ASSIGN
KEY_SBIN IN PROCEDURE MUNGE_KEY
      9164**DCL      9165--REDEF    9166--REDEF    9216<<ASSIGN   9240<<ASSIGN   9248>>ASSIGN
KEY_UBIN IN PROCEDURE MUNGE_KEY
      9166**DCL      9202<<ASSIGN   9206<<ASSIGN   9210<<ASSIGN   9214<<ASSIGN   9220<<ASSIGN   9224<<ASSIGN
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:479  
      9228<<ASSIGN   9247<<ASSIGN   9247>>ASSIGN
M$CLOSE
        66**DCL-ENT  8852--CALL     8926--CALL
M$EI#
      6017**DCL      8913<>CALL
M$EI$
      6017**DCL      8813>>ASSIGN   8814>>ASSIGN   8815>>ASSIGN   8817>>ASSIGN   8818>>ASSIGN   8819>>ASSIGN
      8820>>ASSIGN   8850>>IF       9216>>ASSIGN   9230>>ASSIGN
M$OPEN
        66**DCL-ENT  8806--CALL     8885--CALL
M$PFIL
        68**DCL-ENT  8855--CALL
M$PRECORD
        70**DCL-ENT  8839--CALL     8842--CALL
M$READ
        67**DCL-ENT  8860--CALL
M$SORT1$
      6021**DCL      8924>>IF
M$WRITE
        67**DCL-ENT  8831--CALL     8845--CALL
MOP_UP
      8916**PROC     8865--CALL     8901--CALL     8908--CALL
MUNGE_KEY
      8932**PROC     8826--CALL
OCB.TYPE
      5310**DCL      5311--REDEF
OFSFA_PARAM.EOMCHAR#
      6011**DCL      6012--REDEF
OFSFA_PARAM.SIG1
      6005**DCL      6005--REDEF
OFSFA_PARAM.SIG2
      6005**DCL      6006--REDEF
OPEN_NAME
      8512**DCL      8881--ASSIGN
OPEN_NAME.LEN
      8513**DCL      8872<<ASSIGN
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:480  
OPEN_NAME.STRING
      8514**DCL      8873<<ASSIGN
OUT_SN.SN
      5582**DCL      5583--REDEF
REOPEN_ALT
      8885**LABEL    8885--CALLALT
SIGH IN PROCEDURE MUNGE_KEY
      9227**LABEL    9201--CALLALT  9205--CALLALT  9209--CALLALT  9213--CALLALT  9219--CALLALT  9223--CALLALT
      9227--CALLALT
SORTING_INPUT
      5258**DCL      8928<<ASSIGN
SORT_CLOSED IN PROCEDURE MOP_UP
      8925**LABEL    8926--CALLALT
SORT_DATA
      8502**DCL      8307--DCLINIT  8308--DCLINIT  8363--DCLINIT  8364--DCLINIT
SORT_DATA.ACCT
      8506**DCL      8815<<ASSIGN   8874>>ASSIGN
SORT_DATA.ASN
      8511**DCL      8819<<ASSIGN   8879>>ASSIGN
SORT_DATA.NAME.C
      8505**DCL      8814<<ASSIGN   8873>>ASSIGN
SORT_DATA.NAME.L
      8504**DCL      8813<<ASSIGN   8872>>ASSIGN
SORT_DATA.PASS
      8508**DCL      8816<<ASSIGN   8875>>ASSIGN
SORT_DATA.PSN
      8507**DCL      8820<<ASSIGN   8877>>ASSIGN
SORT_DATA.RES
      8510**DCL      8818<<ASSIGN   8880>>ASSIGN
SORT_DATA.WSN
      8509**DCL      8817<<ASSIGN   8876>>ASSIGN
SORT_KEY
      8499**DCL      8306--DCLINIT  8361--DCLINIT  8362--DCLINIT  8489--DCLINIT  8490--DCLINIT
SORT_KEY.FUZZY
      8501**DCL      8824<<ASSIGN   8838<<ASSIGN   8843<<ASSIGN   8843>>ASSIGN   9248<<ASSIGN
SORT_KEY.LEN
PL6.E3A0      #007=VPF$SORT_FID File=VPF$SRCLST.:E05TSI                          WED 07/30/97 07:43 Page:481  
      8500**DCL      8807<<ASSIGN
SORT_STATUS
        45**DCL         6--PROC     8866<<ASSIGN   8886<<ASSIGN   8895<<ASSIGN
SPEC_BUF
      5260**DCL      5260--REDEF
SYSTEM_ERR
      8801**DCL      8907<<ASSIGN   8913<>CALL
VPL$ERR_PROC
      8771**DCL-ENT  8909--CALL     8913--CALL
XSF$LOCCODP IN PROCEDURE MUNGE_KEY
      9196**DCL-ENT  9201--CALL     9205--CALL     9209--CALL     9213--CALL     9219--CALL     9223--CALL
      9227--CALL
