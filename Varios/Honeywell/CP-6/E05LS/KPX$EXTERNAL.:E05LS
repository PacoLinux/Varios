VERSION E05

PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:1    
        1        1        /*M*     KPX$CLOSE Open an FEP's drive for read/ write */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*     NAME:          KPX$CLOSE
        8        8                 PURPOSE:       Issue a logical close to the FEP with DRIVE
        9        9                 DESCRIPTION:   When thru with a fep for whatever reason,
       10       10                                we close it down by telling the fep to
       11       11                                'close' it.
       12       12        */
       13       13        KPX$CLOSE: PROC( FEP, DRIVE ) ALTRET;
       14       14        /**/
       15       15        /*  PARAMETERS  */
       16       16        /**/
       17       17    1   DCL FEP SBIN;
       18       18    1   DCL DRIVE SBIN;
       19       19        /**/
       20       20        /*  LOCAL AUTO  */
       21       21        /**/
       22       22    1   DCL I UBIN WORD;
       23       23        /**/
       24       24        /*  INCLUDES  */
       25       25        /**/
       26       26        %INCLUDE KP_DATA_R;
       27     1278        %INCLUDE KP_MSG;
       28     1371        /**/
       29     1372        /* External procedures */
       30     1373        /**/
       31     1374        %KP_ENTRIES (OMIT=KPX$CLOSE);
       32     1480        /**/
       33     1481        /*  BASED  */
       34     1482        /**/
       35     1483        %KP$MSG (NAME=KP$MSG,STCLASS=BASED);
       36     1559        %EJECT;
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:2    
       37     1560    1           IF DRIVE < 0 THEN               /* UNLOCKING A FEP                    */
       38     1561    1              GOTO DRIVE_CLOSED;
       39     1562        /**/
       40     1563        /*  Send the close request.  */
       41     1564        /**/
       42     1565    1           KP_FECG_OUT$ -> KP$MSG.HEAD.MSG_TYPE = %KP_CLOSE_RQS#;
       43     1566    1           KP_FECG_OUT$ -> KP$MSG.HEAD.DRIVE_NO = DRIVE;
       44     1567    1           KP_FECG_OUT_SIZE = SIZEC(KP$MSG.HEAD);
       45     1568    1           CALL KPI$IO_SVC(%KP_FECG_WRITE#) ALTRET(RIVER_CITY);
       46     1569        /**/
       47     1570        /*  Get PIGLET's response to the CLOSE.  */
       48     1571        /**/
       49     1572    1           CALL KPI$IO_SVC(%KP_FECG_READ#) ALTRET(RIVER_CITY);
       50     1573    1           CALL KPE$CHECK_ERR(%KP_CLOSE_RSP#) ALTRET(RIVER_CITY);
       51     1574    1   DRIVE_CLOSED: ;
       52     1575        /**/
       53     1576        /*  If this PIGLET is locked in place, leave him there.  */
       54     1577        /**/
       55     1578    1           IF KP_FEP_NO > 0 AND KP_IN_GOOD_GRACE THEN
       56     1579    2              DO;                          /* Keep PIGLET around for later       */
       57     1580    2                GOTO ALL_DONE;
       58     1581    2                END;
       59     1582        /**/
       60     1583        /*  Since we no longer need this PIGLET, we will dispose of him.  */
       61     1584        /**/
       62     1585    1           KP_FECG_OUT$ -> KP$MSG.HEAD.MSG_TYPE = %KP_DIE_RQS#;
       63     1586    1           KP_FECG_OUT_SIZE = SIZEC(KP$MSG.HEAD);
       64     1587    1           CALL KPI$IO_SVC(%KP_FECG_WRITE#) ALTRET(RIVER_CITY);
       65     1588        /**/
       66     1589        /*  "Kill the PIGLET, cut its throat, drink its blood!"  */
       67     1590        /**/
       68     1591    1           CALL KPI$IO_SVC(%KP_FECG_CLOSE#) ALTRET(RIVER_CITY);
       69     1592        /**/
       70     1593    1   ALL_DONE: ;
       71     1594    1           RETURN;
       72     1595        /**/
       73     1596    1   RIVER_CITY: ;
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:3    
       74     1597    1           ALTRETURN;
       75     1598    1   END KPX$CLOSE;
       76     1599        %EOD;

PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:4    
--  Include file information  --

   KP_MSG.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPX$CLOSE.

   Procedure KPX$CLOSE requires 46 words for executable code.
   Procedure KPX$CLOSE requires 6 words of local(AUTO) storage.

PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:5    

 Object Unit name= KPX$CLOSE                                  File name= KPX$EXTERNAL.:E05TOU
 UTS= JUL 30 '97 01:22:58.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    46     56  KPX$CLOSE
    2  RoData even  none     6      6  KPX$CLOSE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  KPX$CLOSE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KPI$IO_SVC
 yes     yes           Std       1 KPE$CHECK_ERR
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:6    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_FECG_OUT$                          KP_FECG_OUT_SIZE                      KP_FEP_NO
     KP_IN_GOOD_GRACE                      KP_RU_KEY                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:7    


        1        1        /*M*     KPX$CLOSE Open an FEP's drive for read/ write */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*     NAME:          KPX$CLOSE
        8        8                 PURPOSE:       Issue a logical close to the FEP with DRIVE
        9        9                 DESCRIPTION:   When thru with a fep for whatever reason,
       10       10                                we close it down by telling the fep to
       11       11                                'close' it.
       12       12        */
       13       13        KPX$CLOSE: PROC( FEP, DRIVE ) ALTRET;

     13  1 000000   000000 700200 xent  KPX$CLOSE    TSX0  ! X66_AUTO_2
         1 000001   000006 000002                    ZERO    6,2

       14       14        /**/
       15       15        /*  PARAMETERS  */
       16       16        /**/
       17       17    1   DCL FEP SBIN;
       18       18    1   DCL DRIVE SBIN;
       19       19        /**/
       20       20        /*  LOCAL AUTO  */
       21       21        /**/
       22       22    1   DCL I UBIN WORD;
       23       23        /**/
       24       24        /*  INCLUDES  */
       25       25        /**/
       26       26        %INCLUDE KP_DATA_R;
       27     1278        %INCLUDE KP_MSG;
       28     1371        /**/
       29     1372        /* External procedures */
       30     1373        /**/
       31     1374        %KP_ENTRIES (OMIT=KPX$CLOSE);
       32     1480        /**/
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:8    
       33     1481        /*  BASED  */
       34     1482        /**/
       35     1483        %KP$MSG (NAME=KP$MSG,STCLASS=BASED);
       36     1559        %EJECT;
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:9    
       37     1560    1           IF DRIVE < 0 THEN               /* UNLOCKING A FEP                    */

   1560  1 000002   200004 470500                    LDP0    @DRIVE,,AUTO
         1 000003   000000 235100                    LDA     0,,PR0
         1 000004   000032 604000 1                  TMI     DRIVE_CLOSED

       38     1561    1              GOTO DRIVE_CLOSED;
       39     1562        /**/
       40     1563        /*  Send the close request.  */
       41     1564        /**/
       42     1565    1           KP_FECG_OUT$ -> KP$MSG.HEAD.MSG_TYPE = %KP_CLOSE_RQS#;

   1565  1 000005   000000 471400 xsym               LDP1    KP_FECG_OUT$
         1 000006   005000 236003                    LDQ     2560,DU
         1 000007   100000 552140                    STBQ    0,'40'O,PR1

       43     1566    1           KP_FECG_OUT$ -> KP$MSG.HEAD.DRIVE_NO = DRIVE;

   1566  1 000010   000000 471400 xsym               LDP1    KP_FECG_OUT$
         1 000011   000000 236100                    LDQ     0,,PR0
         1 000012   000022 736000                    QLS     18
         1 000013   100000 552120                    STBQ    0,'20'O,PR1

       44     1567    1           KP_FECG_OUT_SIZE = SIZEC(KP$MSG.HEAD);

   1567  1 000014   000022 235007                    LDA     18,DL
         1 000015   000000 755000 xsym               STA     KP_FECG_OUT_SIZE

       45     1568    1           CALL KPI$IO_SVC(%KP_FECG_WRITE#) ALTRET(RIVER_CITY);

   1568  1 000016   000000 630400 2                  EPPR0   0
         1 000017   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000020   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000021   000055 702000 1                  TSX2    RIVER_CITY

       46     1569        /**/
       47     1570        /*  Get PIGLET's response to the CLOSE.  */
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:10   
       48     1571        /**/
       49     1572    1           CALL KPI$IO_SVC(%KP_FECG_READ#) ALTRET(RIVER_CITY);

   1572  1 000022   000001 630400 2                  EPPR0   1
         1 000023   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000024   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000025   000055 702000 1                  TSX2    RIVER_CITY

       50     1573    1           CALL KPE$CHECK_ERR(%KP_CLOSE_RSP#) ALTRET(RIVER_CITY);

   1573  1 000026   000003 630400 2                  EPPR0   3
         1 000027   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000030   000000 701000 xent               TSX1    KPE$CHECK_ERR
         1 000031   000055 702000 1                  TSX2    RIVER_CITY

   1567  1 000032                       DRIVE_CLOSED null
       51     1574    1   DRIVE_CLOSED: ;
       52     1575        /**/
       53     1576        /*  If this PIGLET is locked in place, leave him there.  */
       54     1577        /**/
       55     1578    1           IF KP_FEP_NO > 0 AND KP_IN_GOOD_GRACE THEN

   1578  1 000032   000000 235000 xsym               LDA     KP_FEP_NO
         1 000033   000037 604400 1                  TMOZ    s:1585
         1 000034   000000 234000 xsym               SZN     KP_IN_GOOD_GRACE
         1 000035   000037 605000 1                  TPL     s:1585

       56     1579    2              DO;                          /* Keep PIGLET around for later       */

       57     1580    2                GOTO ALL_DONE;

   1580  1 000036   000054 710000 1                  TRA     ALL_DONE

       58     1581    2                END;
       59     1582        /**/
       60     1583        /*  Since we no longer need this PIGLET, we will dispose of him.  */
       61     1584        /**/
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:11   
       62     1585    1           KP_FECG_OUT$ -> KP$MSG.HEAD.MSG_TYPE = %KP_DIE_RQS#;

   1585  1 000037   000000 470400 xsym               LDP0    KP_FECG_OUT$
         1 000040   007000 236003                    LDQ     3584,DU
         1 000041   000000 552140                    STBQ    0,'40'O,PR0

       63     1586    1           KP_FECG_OUT_SIZE = SIZEC(KP$MSG.HEAD);

   1586  1 000042   000022 235007                    LDA     18,DL
         1 000043   000000 755000 xsym               STA     KP_FECG_OUT_SIZE

       64     1587    1           CALL KPI$IO_SVC(%KP_FECG_WRITE#) ALTRET(RIVER_CITY);

   1587  1 000044   000000 630400 2                  EPPR0   0
         1 000045   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000046   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000047   000055 702000 1                  TSX2    RIVER_CITY

       65     1588        /**/
       66     1589        /*  "Kill the PIGLET, cut its throat, drink its blood!"  */
       67     1590        /**/
       68     1591    1           CALL KPI$IO_SVC(%KP_FECG_CLOSE#) ALTRET(RIVER_CITY);

   1591  1 000050   000005 630400 2                  EPPR0   5
         1 000051   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000052   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000053   000055 702000 1                  TSX2    RIVER_CITY

   1586  1 000054                       ALL_DONE     null
       69     1592        /**/
       70     1593    1   ALL_DONE: ;
       71     1594    1           RETURN;

   1594  1 000054   000000 702200 xent               TSX2  ! X66_ARET

   1586  1 000055                       RIVER_CITY   null
       72     1595        /**/
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:12   
       73     1596    1   RIVER_CITY: ;
       74     1597    1           ALTRETURN;

   1597  1 000055   000000 702200 xent               TSX2  ! X66_AALT
       75     1598    1   END KPX$CLOSE;
       76     1599        %EOD;

PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:13   
--  Include file information  --

   KP_MSG.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPX$CLOSE.
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:14   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DRIVE                     3-0-0/w PTR         r     1 @FEP
    *0-0-0/w SBIN        r     1 DRIVE                     *0-0-0/w SBIN        r     1 FEP

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 KP_FECG_OUT$               0-0-0/w UBIN        r     1 KP_FECG_OUT_SIZE
     0-0-0/w SBIN        r     1 KP_FEP_NO                  0-0-0/b BIT         r     1 KP_IN_GOOD_GRACE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(18594) r     1 KP$MSG


   Procedure KPX$CLOSE requires 46 words for executable code.
   Procedure KPX$CLOSE requires 6 words of local(AUTO) storage.
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:15   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:16   
          MINI XREF LISTING

ALL_DONE
      1586**LABEL    1580--GOTO
DRIVE
        18**DCL        13--PROC     1560>>IF       1566>>ASSIGN
DRIVE_CLOSED
      1567**LABEL    1561--GOTO
FEP
        17**DCL        13--PROC
KP$MSG.HEAD
      1485**DCL      1567--ASSIGN   1586--ASSIGN
KP$MSG.HEAD.DRIVE_NO
      1487**DCL      1566<<ASSIGN
KP$MSG.HEAD.MSG_TYPE
      1486**DCL      1565<<ASSIGN   1585<<ASSIGN
KP$MSG.TDATA
      1510**DCL      1511--REDEF    1512--REDEF    1517--REDEF    1531--REDEF    1536--REDEF    1540--REDEF
      1546--REDEF    1549--REDEF
KPE$CHECK_ERR
      1394**DCL-ENT  1573--CALL
KPI$IO_SVC
      1409**DCL-ENT  1568--CALL     1572--CALL     1587--CALL     1591--CALL
KP_EXIT.V.STEPCC#
       949**DCL       949--REDEF
KP_FECG_OUT$
       875**DCL      1565>>ASSIGN   1566>>ASSIGN   1585>>ASSIGN
KP_FECG_OUT_SIZE
       875**DCL      1567<<ASSIGN   1586<<ASSIGN
KP_FEP_NO
       877**DCL      1578>>IF
KP_INBUF
       871**DCL       871--REDEF
KP_IN_GOOD_GRACE
PL6.E3A0      #001=KPX$CLOSE File=KPX$EXTERNAL.:E05TSI                           WED 07/30/97 01:22 Page:17   
       878**DCL      1578>>IF
KP_RU_KEY
       879**DCL       880--REDEF
KP_RU_KEY.NODE
       879**DCL       879--REDEF
KP_RU_KEY.PAGE
       880**DCL       880--REDEF
KP_RU_OUTBUF
       873**DCL       873--REDEF
RIVER_CITY
      1586**LABEL    1568--CALLALT  1572--CALLALT  1573--CALLALT  1587--CALLALT  1591--CALLALT

PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:18   
       77        1        /*M*     KPX$GETSEC Read the text records to the fep   */
       78        2        /*T***********************************************************/
       79        3        /*T*                                                         */
       80        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       81        5        /*T*                                                         */
       82        6        /*T***********************************************************/
       83        7        /*F*     NAME:          KPX$GETSEC
       84        8                 PURPOSE:       Read contigous sectors from the diskette.
       85        9                 DESCRIPTION:   This routine reads one or more contigous
       86       10                                sectors form a diskette.  The sectors must
       87       11                                all reside on the same track.
       88       12        */
       89       13        KPX$GETSEC: PROC(FEP,DRIVE,TRACK,START_SECTOR,SIZE,SECTOR,SIDE)
       90       14                  ALTRET;
       91       15        /**/
       92       16        /* INCLUDES  */
       93       17        /**/
       94       18        %INCLUDE KP_DATA_R;
       95     1270        %INCLUDE KP_MSG;
       96     1363        /**/
       97     1364        /*  PARAMETERS  */
       98     1365        /**/
       99     1366    1   DCL SIZE UBIN WORD;
      100     1367    1   DCL START_SECTOR UBIN WORD;
      101     1368    1   DCL FEP UBIN WORD;
      102     1369    1   DCL DRIVE UBIN WORD;
      103     1370    1   DCL TRACK UBIN WORD;
      104     1371    1   DCL SECTOR CHAR (READ_SIZE) UNAL;
      105     1372    1   DCL SIDE SBIN WORD;
      106     1373        /**/
      107     1374        /*  BASED  */
      108     1375        /**/
      109     1376        %KP$MSG (NAME=KP$MSG,STCLASS=BASED);
      110     1452        /**/
      111     1453    1   DCL READ_SIZE UBIN WORD;
      112     1454    1   DCL 1 R_SIZE REDEF READ_SIZE,
      113     1455    1         2 * UBIN(20) UNAL,
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:19   
      114     1456    1         2 HOB UBIN(8) UNAL,
      115     1457    1         2 LOB UBIN(8) UNAL;
      116     1458        /**/
      117     1459        /* External procedures */
      118     1460        /**/
      119     1461        %KP_ENTRIES (OMIT=KPX$GETSEC);
      120     1567        /**/
      121     1568    1           KP_FEP_NO = FEP;
      122     1569    1           KP_FECG_OUT$ -> KP$MSG.HEAD.MSG_TYPE = %KP_READ_RQS#;
      123     1570    1           KP_FECG_OUT$ -> KP$MSG.HEAD.DRIVE_NO = DRIVE;
      124     1571    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SEC_SIZE = IN_OPTS.SSIZE_CODE;
      125     1572    1           KP_FECG_OUT$ -> KP$MSG.HEAD.IOTYPE = IN_OPTS.IOTYPE;
      126     1573    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SIDE = SIDE;
      127     1574    1           KP_FECG_OUT$ -> KP$MSG.HEAD.TRACK_NO = TRACK;
      128     1575    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SECTOR_NO = START_SECTOR;
      129     1576    1           READ_SIZE = SIZE * IN_OPTS.SECTOR_SIZE;
      130     1577    1           KP_FECG_OUT$ -> KP$MSG.HEAD.NUM_BYTES.HOB = R_SIZE.HOB;
      131     1578    1           KP_FECG_OUT$ -> KP$MSG.HEAD.NUM_BYTES.LOB = R_SIZE.LOB;
      132     1579    1           KP_FECG_OUT_SIZE = SIZEC(KP$MSG.HEAD);
      133     1580        /**/
      134     1581        /* Send the read rqs and then get the response */
      135     1582        /**/
      136     1583    1           CALL KPI$IO_SVC(%KP_FECG_WRITE#) ALTRET(RIVER_CITY);
      137     1584    1           KP_DISK_ACTIVITY = %KP_DISK_READING#;
      138     1585    1           CALL KPI$IO_SVC(%KP_FECG_READ#) ALTRET(RIVER_CITY);
      139     1586    1           IF IN_OPTS.WARN_CODE = 1 /* DISK */
      140     1587    1              OR IN_OPTS.WARN_CODE = 0 /* ALL */
      141     1588    1              THEN
      142     1589    1                CALL KPE$CHECK_ERR(%KP_READ_RSP#) ALTRET(RIVER_CITY);
      143     1590        /**/
      144     1591        /* Everything went O.K.  Now, move fetched data into caller's buffer */
      145     1592        /**/
      146     1593    1           SECTOR = KP_FECG_IN$ -> KP$MSG.TDATA_C;
      147     1594    1           RETURN;
      148     1595        /**/
      149     1596    1   RIVER_CITY: ;
      150     1597    1           ALTRETURN;
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:20   
      151     1598    1   END KPX$GETSEC;
      152     1599        %EOD;

PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:21   
--  Include file information  --

   KP_MSG.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPX$GETSEC.

   Procedure KPX$GETSEC requires 72 words for executable code.
   Procedure KPX$GETSEC requires 12 words of local(AUTO) storage.

PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:22   

 Object Unit name= KPX$GETSEC                                 File name= KPX$EXTERNAL.:E05TOU
 UTS= JUL 30 '97 01:23:13.68 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    72    110  KPX$GETSEC
    2  RoData even  none     3      3  KPX$GETSEC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        7  KPX$GETSEC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KPI$IO_SVC
 yes     yes           Std       1 KPE$CHECK_ERR
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:23   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_FECG_IN$                           KP_FECG_OUT$                          KP_FECG_OUT_SIZE
     KP_FEP_NO                             KP_RU_KEY                             KP_DISK_ACTIVITY
     IN_OPTS                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:24   


       77        1        /*M*     KPX$GETSEC Read the text records to the fep   */
       78        2        /*T***********************************************************/
       79        3        /*T*                                                         */
       80        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       81        5        /*T*                                                         */
       82        6        /*T***********************************************************/
       83        7        /*F*     NAME:          KPX$GETSEC
       84        8                 PURPOSE:       Read contigous sectors from the diskette.
       85        9                 DESCRIPTION:   This routine reads one or more contigous
       86       10                                sectors form a diskette.  The sectors must
       87       11                                all reside on the same track.
       88       12        */
       89       13        KPX$GETSEC: PROC(FEP,DRIVE,TRACK,START_SECTOR,SIZE,SECTOR,SIDE)

     13  1 000000   000000 700200 xent  KPX$GETSEC   TSX0  ! X66_AUTO_N
         1 000001   000014 000007                    ZERO    12,7

       90       14                  ALTRET;
       91       15        /**/
       92       16        /* INCLUDES  */
       93       17        /**/
       94       18        %INCLUDE KP_DATA_R;
       95     1270        %INCLUDE KP_MSG;
       96     1363        /**/
       97     1364        /*  PARAMETERS  */
       98     1365        /**/
       99     1366    1   DCL SIZE UBIN WORD;
      100     1367    1   DCL START_SECTOR UBIN WORD;
      101     1368    1   DCL FEP UBIN WORD;
      102     1369    1   DCL DRIVE UBIN WORD;
      103     1370    1   DCL TRACK UBIN WORD;
      104     1371    1   DCL SECTOR CHAR (READ_SIZE) UNAL;
      105     1372    1   DCL SIDE SBIN WORD;
      106     1373        /**/
      107     1374        /*  BASED  */
      108     1375        /**/
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:25   
      109     1376        %KP$MSG (NAME=KP$MSG,STCLASS=BASED);
      110     1452        /**/
      111     1453    1   DCL READ_SIZE UBIN WORD;
      112     1454    1   DCL 1 R_SIZE REDEF READ_SIZE,
      113     1455    1         2 * UBIN(20) UNAL,
      114     1456    1         2 HOB UBIN(8) UNAL,
      115     1457    1         2 LOB UBIN(8) UNAL;
      116     1458        /**/
      117     1459        /* External procedures */
      118     1460        /**/
      119     1461        %KP_ENTRIES (OMIT=KPX$GETSEC);
      120     1567        /**/
      121     1568    1           KP_FEP_NO = FEP;

   1568  1 000002   200003 470500                    LDP0    @FEP,,AUTO
         1 000003   000000 235100                    LDA     0,,PR0
         1 000004   000000 755000 xsym               STA     KP_FEP_NO

      122     1569    1           KP_FECG_OUT$ -> KP$MSG.HEAD.MSG_TYPE = %KP_READ_RQS#;

   1569  1 000005   000000 471400 xsym               LDP1    KP_FECG_OUT$
         1 000006   003000 236003                    LDQ     1536,DU
         1 000007   100000 552140                    STBQ    0,'40'O,PR1

      123     1570    1           KP_FECG_OUT$ -> KP$MSG.HEAD.DRIVE_NO = DRIVE;

   1570  1 000010   200004 471500                    LDP1    @DRIVE,,AUTO
         1 000011   000000 473400 xsym               LDP3    KP_FECG_OUT$
         1 000012   100000 236100                    LDQ     0,,PR1
         1 000013   000022 736000                    QLS     18
         1 000014   300000 552120                    STBQ    0,'20'O,PR3

      124     1571    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SEC_SIZE = IN_OPTS.SSIZE_CODE;

   1571  1 000015   000000 473400 xsym               LDP3    KP_FECG_OUT$
         1 000016   000011 236000 xsym               LDQ     IN_OPTS+9
         1 000017   300002 552104                    STBQ    2,'04'O,PR3
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:26   

      125     1572    1           KP_FECG_OUT$ -> KP$MSG.HEAD.IOTYPE = IN_OPTS.IOTYPE;

   1572  1 000020   000013 236000 xsym               LDQ     IN_OPTS+11
         1 000021   000011 736000                    QLS     9
         1 000022   300000 552110                    STBQ    0,'10'O,PR3

      126     1573    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SIDE = SIDE;

   1573  1 000023   000000 473400 xsym               LDP3    KP_FECG_OUT$
         1 000024   200011 474500                    LDP4    @SIDE,,AUTO
         1 000025   400000 236100                    LDQ     0,,PR4
         1 000026   000033 736000                    QLS     27
         1 000027   300002 552140                    STBQ    2,'40'O,PR3

      127     1574    1           KP_FECG_OUT$ -> KP$MSG.HEAD.TRACK_NO = TRACK;

   1574  1 000030   200005 475500                    LDP5    @TRACK,,AUTO
         1 000031   500000 236100                    LDQ     0,,PR5
         1 000032   000022 736000                    QLS     18
         1 000033   300002 552120                    STBQ    2,'20'O,PR3

      128     1575    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SECTOR_NO = START_SECTOR;

   1575  1 000034   200006 476500                    LDP6    @START_SECTOR,,AUTO
         1 000035   600000 236100                    LDQ     0,,PR6
         1 000036   000011 736000                    QLS     9
         1 000037   300002 552110                    STBQ    2,'10'O,PR3

      129     1576    1           READ_SIZE = SIZE * IN_OPTS.SECTOR_SIZE;

   1576  1 000040   200007 477500                    LDP7    @SIZE,,AUTO
         1 000041   700000 236100                    LDQ     0,,PR7
         1 000042   000010 402000 xsym               MPY     IN_OPTS+8
         1 000043   200012 756100                    STQ     READ_SIZE,,AUTO

      130     1577    1           KP_FECG_OUT$ -> KP$MSG.HEAD.NUM_BYTES.HOB = R_SIZE.HOB;
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:27   

   1577  1 000044   200012 236100                    LDQ     READ_SIZE,,AUTO
         1 000045   177400 376007                    ANQ     65280,DL
         1 000046   000001 736000                    QLS     1
         1 000047   300001 552110                    STBQ    1,'10'O,PR3

      131     1578    1           KP_FECG_OUT$ -> KP$MSG.HEAD.NUM_BYTES.LOB = R_SIZE.LOB;

   1578  1 000050   200012 236100                    LDQ     READ_SIZE,,AUTO
         1 000051   000377 376007                    ANQ     255,DL
         1 000052   300001 552104                    STBQ    1,'04'O,PR3

      132     1579    1           KP_FECG_OUT_SIZE = SIZEC(KP$MSG.HEAD);

   1579  1 000053   000022 235007                    LDA     18,DL
         1 000054   000000 755000 xsym               STA     KP_FECG_OUT_SIZE

      133     1580        /**/
      134     1581        /* Send the read rqs and then get the response */
      135     1582        /**/
      136     1583    1           CALL KPI$IO_SVC(%KP_FECG_WRITE#) ALTRET(RIVER_CITY);

   1583  1 000055   000000 630400 2                  EPPR0   0
         1 000056   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000057   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000060   000107 702000 1                  TSX2    RIVER_CITY

      137     1584    1           KP_DISK_ACTIVITY = %KP_DISK_READING#;

   1584  1 000061   000002 235007                    LDA     2,DL
         1 000062   000000 755000 xsym               STA     KP_DISK_ACTIVITY

      138     1585    1           CALL KPI$IO_SVC(%KP_FECG_READ#) ALTRET(RIVER_CITY);

   1585  1 000063   000001 630400 2                  EPPR0   1
         1 000064   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000065   000000 701000 xent               TSX1    KPI$IO_SVC
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:28   
         1 000066   000107 702000 1                  TSX2    RIVER_CITY

      139     1586    1           IF IN_OPTS.WARN_CODE = 1 /* DISK */

   1586  1 000067   000012 235000 xsym               LDA     IN_OPTS+10
         1 000070   000001 115007                    CMPA    1,DL
         1 000071   000074 600000 1                  TZE     s:1589
         1 000072   000000 115003                    CMPA    0,DU
         1 000073   000100 601000 1                  TNZ     s:1593

      140     1587    1              OR IN_OPTS.WARN_CODE = 0 /* ALL */
      141     1588    1              THEN
      142     1589    1                CALL KPE$CHECK_ERR(%KP_READ_RSP#) ALTRET(RIVER_CITY);

   1589  1 000074   000002 630400 2                  EPPR0   2
         1 000075   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000076   000000 701000 xent               TSX1    KPE$CHECK_ERR
         1 000077   000107 702000 1                  TSX2    RIVER_CITY

      143     1590        /**/
      144     1591        /* Everything went O.K.  Now, move fetched data into caller's buffer */
      145     1592        /**/
      146     1593    1           SECTOR = KP_FECG_IN$ -> KP$MSG.TDATA_C;

   1593  1 000100   000000 470400 xsym               LDP0    KP_FECG_IN$
         1 000101   200010 471500                    LDP1    @SECTOR,,AUTO
         1 000102   200012 720100                    LXL0    READ_SIZE,,AUTO
         1 000103   040140 100500                    MLR     fill='040'O
         1 000104   000004 404000                    ADSC9   4,,PR0                   cn=2,n=2048
         1 000105   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

      147     1594    1           RETURN;

   1594  1 000106   000000 702200 xent               TSX2  ! X66_ARET

   1593  1 000107                       RIVER_CITY   null
      148     1595        /**/
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:29   
      149     1596    1   RIVER_CITY: ;
      150     1597    1           ALTRETURN;

   1597  1 000107   000000 702200 xent               TSX2  ! X66_AALT
      151     1598    1   END KPX$GETSEC;
      152     1599        %EOD;

PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:30   
--  Include file information  --

   KP_MSG.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPX$GETSEC.
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:31   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DRIVE                     3-0-0/w PTR         r     1 @FEP
    10-0-0/w PTR         r     1 @SECTOR                   11-0-0/w PTR         r     1 @SIDE
     7-0-0/w PTR         r     1 @SIZE                      6-0-0/w PTR         r     1 @START_SECTOR
     5-0-0/w PTR         r     1 @TRACK                    *0-0-0/w UBIN        r     1 DRIVE
    *0-0-0/w UBIN        r     1 FEP                       12-0-0/w UBIN        r     1 READ_SIZE
    12-0-0/w STRC        r     1 R_SIZE                    *0-0-0/c ACHR        r     1 SECTOR
    *0-0-0/w SBIN        r     1 SIDE                      *0-0-0/w UBIN        r     1 SIZE
    *0-0-0/w UBIN        r     1 START_SECTOR              *0-0-0/w UBIN        r     1 TRACK

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(468)   r     1 IN_OPTS                    0-0-0/w SBIN        r     1 KP_DISK_ACTIVITY
     0-0-0/w PTR         r     1 KP_FECG_IN$                0-0-0/w PTR         r     1 KP_FECG_OUT$
     0-0-0/w UBIN        r     1 KP_FECG_OUT_SIZE           0-0-0/w SBIN        r     1 KP_FEP_NO

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(18594) r     1 KP$MSG


   Procedure KPX$GETSEC requires 72 words for executable code.
   Procedure KPX$GETSEC requires 12 words of local(AUTO) storage.
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:32   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:33   
          MINI XREF LISTING

DRIVE
      1369**DCL        13--PROC     1570>>ASSIGN
FEP
      1368**DCL        13--PROC     1568>>ASSIGN
IN_OPTS.IOTYPE
      1041**DCL      1572>>ASSIGN
IN_OPTS.SECTOR_SIZE
      1034**DCL      1576>>ASSIGN
IN_OPTS.SSIZE_CODE
      1035**DCL      1571>>ASSIGN
IN_OPTS.WARN_CODE
      1036**DCL      1586>>IF       1586>>IF
KP$MSG.HEAD
      1378**DCL      1579--ASSIGN
KP$MSG.HEAD.DRIVE_NO
      1380**DCL      1570<<ASSIGN
KP$MSG.HEAD.IOTYPE
      1381**DCL      1572<<ASSIGN
KP$MSG.HEAD.MSG_TYPE
      1379**DCL      1569<<ASSIGN
KP$MSG.HEAD.NUM_BYTES.HOB
      1391**DCL      1577<<ASSIGN
KP$MSG.HEAD.NUM_BYTES.LOB
      1392**DCL      1578<<ASSIGN
KP$MSG.HEAD.SECTOR_NO
      1395**DCL      1575<<ASSIGN
KP$MSG.HEAD.SEC_SIZE
      1396**DCL      1571<<ASSIGN
KP$MSG.HEAD.SIDE
      1393**DCL      1573<<ASSIGN
KP$MSG.HEAD.TRACK_NO
      1394**DCL      1574<<ASSIGN
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:34   
KP$MSG.TDATA
      1403**DCL      1404--REDEF    1405--REDEF    1410--REDEF    1424--REDEF    1429--REDEF    1433--REDEF
      1439--REDEF    1442--REDEF
KP$MSG.TDATA_C
      1404**DCL      1593>>ASSIGN
KPE$CHECK_ERR
      1481**DCL-ENT  1589--CALL
KPI$IO_SVC
      1496**DCL-ENT  1583--CALL     1585--CALL
KP_DISK_ACTIVITY
       874**DCL      1584<<ASSIGN
KP_EXIT.V.STEPCC#
       941**DCL       941--REDEF
KP_FECG_IN$
       867**DCL      1593>>ASSIGN
KP_FECG_OUT$
       867**DCL      1569>>ASSIGN   1570>>ASSIGN   1571>>ASSIGN   1572>>ASSIGN   1573>>ASSIGN   1574>>ASSIGN
      1575>>ASSIGN   1577>>ASSIGN   1578>>ASSIGN
KP_FECG_OUT_SIZE
       867**DCL      1579<<ASSIGN
KP_FEP_NO
       869**DCL      1568<<ASSIGN
KP_INBUF
       863**DCL       863--REDEF
KP_RU_KEY
       871**DCL       872--REDEF
KP_RU_KEY.NODE
       871**DCL       871--REDEF
KP_RU_KEY.PAGE
       872**DCL       872--REDEF
KP_RU_OUTBUF
       865**DCL       865--REDEF
READ_SIZE
      1453**DCL      1371--IMP-SIZ  1454--REDEF    1576<<ASSIGN   1593>>ASSIGN
RIVER_CITY
      1593**LABEL    1583--CALLALT  1585--CALLALT  1589--CALLALT
PL6.E3A0      #002=KPX$GETSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:35   
R_SIZE.HOB
      1456**DCL      1577>>ASSIGN
R_SIZE.LOB
      1457**DCL      1578>>ASSIGN
SECTOR
      1371**DCL        13--PROC     1593<<ASSIGN
SIDE
      1372**DCL        13--PROC     1573>>ASSIGN
SIZE
      1366**DCL        13--PROC     1576>>ASSIGN
START_SECTOR
      1367**DCL        13--PROC     1575>>ASSIGN
TRACK
      1370**DCL        13--PROC     1574>>ASSIGN

PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:36   
      153        1        /*M*     KPX$OPEN Open an FEP's drive for read/ write */
      154        2        /*T***********************************************************/
      155        3        /*T*                                                         */
      156        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      157        5        /*T*                                                         */
      158        6        /*T***********************************************************/
      159        7        /*F*     NAME:          KPX$OPEN
      160        8                 PURPOSE:       Logically open the FEP with DRIVE
      161        9                 DESCRIPTION:   Open the FEP with DRIVE as if it were
      162       10                                a file.
      163       11        */
      164       12        KPX$OPEN: PROC( FEP, DRIVE ) ALTRET;
      165       13        /**/
      166       14        /*  PARAMETERS  */
      167       15        /**/
      168       16    1   DCL FEP SBIN;
      169       17    1   DCL DRIVE SBIN;
      170       18        /**/
      171       19        /*  LOCAL AUTO  */
      172       20        /**/
      173       21    1   DCL I UBIN WORD;
      174       22        /**/
      175       23        /*  INCLUDES  */
      176       24        /**/
      177       25        %INCLUDE KP_DATA_R;
      178     1277        %INCLUDE KP_MSG;
      179     1370        /**/
      180     1371        /*  BASED  */
      181     1372        /**/
      182     1373        %KP$MSG (NAME=KP$MSG,STCLASS=BASED);
      183     1449        /**/
      184     1450        /* External procedures */
      185     1451        /**/
      186     1452        %KP_ENTRIES (OMIT=KPX$OPEN);
      187     1558        %EJECT;
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:37   
      188     1559        /**/
      189     1560        /*  If a PIGLET is already locked in place, don't make a new one!  */
      190     1561        /**/
      191     1562    1           IF USE_LOCKED_FEP > 0 THEN
      192     1563    2              DO;                          /* Use previous PIGLET instead of new */
      193     1564    2                IF FEP ~= USE_LOCKED_FEP THEN
      194     1565    3                   DO;
      195     1566    3                     CALL KPE$ERROR (%E$MUST_USE2_FEP);
      196     1567    3                     GOTO BLETCH;
      197     1568    3                     END;
      198     1569    2                GOTO REQUEST_OPEN;
      199     1570    2                END;
      200     1571    2           IF KP_FEP_NO > 0 THEN DO;
      201     1572    2              IF KP_FEP_NO = FEP THEN GOTO REQUEST_OPEN;
      202     1573        /**/
      203     1574        /* Need to terminate the currently running PIGLET */
      204     1575        /**/
      205     1576    2              I = KP_FEP_NO;
      206     1577    2              KP_FEP_NO = 0;
      207     1578    2              CALL KPX$CLOSE(I,-1) ALTRET(CANT_CLOSE);
      208     1579    2           END;
      209     1580    1           KP_FEP_NO = FEP;
      210     1581        /**/
      211     1582        /*  Create a PIGLET to obey our commands.  */
      212     1583        /**/
      213     1584    1           CALL KPI$IO_SVC(%KP_FECG_OPEN#) ALTRET(NO_PIGLET);
      214     1585        /**/
      215     1586        /*  Listen for a message saying that the PIGLET has successfully been         */
      216     1587        /*  initialized.                                                              */
      217     1588        /**/
      218     1589    1           CALL KPI$IO_SVC(%KP_FECG_READ#) ALTRET(CANT_INIT);
      219     1590    1           CALL KPE$CHECK_ERR(%KP_INITED_MSG#) ALTRET(CANT_INIT);
      220     1591        %EJECT;
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:38   
      221     1592        /**/
      222     1593        /* Send the open request.  */
      223     1594        /**/
      224     1595    1   REQUEST_OPEN: ;
      225     1596    1           IF DRIVE < 0 THEN               /* A LOCK REQUEST                     */
      226     1597    1              GOTO DISK_OPENED;
      227     1598    1           KP_FECG_OUT$ -> KP$MSG.HEAD.MSG_TYPE = %KP_OPEN_RQS#;
      228     1599    1           KP_FECG_OUT$ -> KP$MSG.HEAD.DRIVE_NO = DRIVE;
      229     1600    1           KP_FECG_OUT_SIZE = SIZEC(KP$MSG.HEAD);
      230     1601    1           CALL KPI$IO_SVC(%KP_FECG_WRITE#) ALTRET(CANT_OPEN);
      231     1602        /**/
      232     1603        /*  Get PIGLET's response.  */
      233     1604        /**/
      234     1605    1           CALL KPI$IO_SVC(%KP_FECG_READ#) ALTRET(CANT_OPEN);
      235     1606    1           CALL KPE$CHECK_ERR(%KP_OPEN_RSP#) ALTRET(CANT_OPEN);
      236     1607    1   DISK_OPENED: ;
      237     1608        /**/
      238     1609    1           RETURN;
      239     1610        /**/
      240     1611    1   CANT_INIT: ;                            /* PIGLET unable to finish initialize */
      241     1612    1           CALL KPI$IO_SVC(%KP_FECG_CLOSE#) ALTRET(BLETCH);
      242     1613    1   NO_PIGLET: ;                            /* Unable to start PIGLET             */
      243     1614    1   BLETCH: ;                               /* Unexpected error during ALT cleanup*/
      244     1615    1           KP_FEP_NO = 0;
      245     1616    1   CANT_OPEN: ;                            /* PIGLET unable to open that drive   */
      246     1617    1   CANT_CLOSE: ;                          /* PIGLET unable to close that drive   */
      247     1618    1           ALTRETURN;
      248     1619    1   END KPX$OPEN;
      249     1620        %EOD;

PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:39   
--  Include file information  --

   KP_MSG.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPX$OPEN.

   Procedure KPX$OPEN requires 75 words for executable code.
   Procedure KPX$OPEN requires 8 words of local(AUTO) storage.

PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:40   

 Object Unit name= KPX$OPEN                                   File name= KPX$EXTERNAL.:E05TOU
 UTS= JUL 30 '97 01:23:31.68 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    75    113  KPX$OPEN
    2  RoData even  none    10     12  KPX$OPEN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  KPX$OPEN

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KPE$ERROR
 yes     yes           Std       2 KPX$CLOSE
 yes     yes           Std       1 KPE$CHECK_ERR
 yes     yes           Std       1 KPI$IO_SVC
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:41   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_FECG_OUT$                          KP_FECG_OUT_SIZE                      KP_FEP_NO
     KP_RU_KEY                             USE_LOCKED_FEP                        B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:42   


      153        1        /*M*     KPX$OPEN Open an FEP's drive for read/ write */
      154        2        /*T***********************************************************/
      155        3        /*T*                                                         */
      156        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      157        5        /*T*                                                         */
      158        6        /*T***********************************************************/
      159        7        /*F*     NAME:          KPX$OPEN
      160        8                 PURPOSE:       Logically open the FEP with DRIVE
      161        9                 DESCRIPTION:   Open the FEP with DRIVE as if it were
      162       10                                a file.
      163       11        */
      164       12        KPX$OPEN: PROC( FEP, DRIVE ) ALTRET;

     12  1 000000   000000 700200 xent  KPX$OPEN     TSX0  ! X66_AUTO_2
         1 000001   000010 000002                    ZERO    8,2

      165       13        /**/
      166       14        /*  PARAMETERS  */
      167       15        /**/
      168       16    1   DCL FEP SBIN;
      169       17    1   DCL DRIVE SBIN;
      170       18        /**/
      171       19        /*  LOCAL AUTO  */
      172       20        /**/
      173       21    1   DCL I UBIN WORD;
      174       22        /**/
      175       23        /*  INCLUDES  */
      176       24        /**/
      177       25        %INCLUDE KP_DATA_R;
      178     1277        %INCLUDE KP_MSG;
      179     1370        /**/
      180     1371        /*  BASED  */
      181     1372        /**/
      182     1373        %KP$MSG (NAME=KP$MSG,STCLASS=BASED);
      183     1449        /**/
      184     1450        /* External procedures */
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:43   
      185     1451        /**/
      186     1452        %KP_ENTRIES (OMIT=KPX$OPEN);
      187     1558        %EJECT;
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:44   
      188     1559        /**/
      189     1560        /*  If a PIGLET is already locked in place, don't make a new one!  */
      190     1561        /**/
      191     1562    1           IF USE_LOCKED_FEP > 0 THEN

   1562  1 000002   000000 235000 xsym               LDA     USE_LOCKED_FEP
         1 000003   000016 604400 1                  TMOZ    s:1571

      192     1563    2              DO;                          /* Use previous PIGLET instead of new */

      193     1564    2                IF FEP ~= USE_LOCKED_FEP THEN

   1564  1 000004   200003 470500                    LDP0    @FEP,,AUTO
         1 000005   000000 236100                    LDQ     0,,PR0
         1 000006   000000 116000 xsym               CMPQ    USE_LOCKED_FEP
         1 000007   000015 600000 1                  TZE     s:1569

      194     1565    3                   DO;

      195     1566    3                     CALL KPE$ERROR (%E$MUST_USE2_FEP);

   1566  1 000010   000001 630400 2                  EPPR0   1
         1 000011   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000012   000000 701000 xent               TSX1    KPE$ERROR
         1 000013   000000 011000                    NOP     0

      196     1567    3                     GOTO BLETCH;

   1567  1 000014   000111 710000 1                  TRA     NO_PIGLET

      197     1568    3                     END;
      198     1569    2                GOTO REQUEST_OPEN;

   1569  1 000015   000054 710000 1                  TRA     REQUEST_OPEN

      199     1570    2                END;
      200     1571    2           IF KP_FEP_NO > 0 THEN DO;
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:45   

   1571  1 000016   000000 236000 xsym               LDQ     KP_FEP_NO
         1 000017   000035 604400 1                  TMOZ    s:1580

      201     1572    2              IF KP_FEP_NO = FEP THEN GOTO REQUEST_OPEN;

   1572  1 000020   200003 470500                    LDP0    @FEP,,AUTO
         1 000021   000000 116100                    CMPQ    0,,PR0
         1 000022   000054 600000 1                  TZE     REQUEST_OPEN

      202     1573        /**/
      203     1574        /* Need to terminate the currently running PIGLET */
      204     1575        /**/
      205     1576    2              I = KP_FEP_NO;

   1576  1 000023   200005 756100                    STQ     I,,AUTO

      206     1577    2              KP_FEP_NO = 0;

   1577  1 000024   000000 450000 xsym               STZ     KP_FEP_NO

      207     1578    2              CALL KPX$CLOSE(I,-1) ALTRET(CANT_CLOSE);

   1578  1 000025   000002 236000 2                  LDQ     2
         1 000026   200007 756100                    STQ     I+2,,AUTO
         1 000027   200005 631500                    EPPR1   I,,AUTO
         1 000030   200006 451500                    STP1    I+1,,AUTO
         1 000031   200006 630500                    EPPR0   I+1,,AUTO
         1 000032   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000033   000000 701000 xent               TSX1    KPX$CLOSE
         1 000034   000112 702000 1                  TSX2    CANT_OPEN

      208     1579    2           END;

      209     1580    1           KP_FEP_NO = FEP;

   1580  1 000035   200003 470500                    LDP0    @FEP,,AUTO
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:46   
         1 000036   000000 235100                    LDA     0,,PR0
         1 000037   000000 755000 xsym               STA     KP_FEP_NO

      210     1581        /**/
      211     1582        /*  Create a PIGLET to obey our commands.  */
      212     1583        /**/
      213     1584    1           CALL KPI$IO_SVC(%KP_FECG_OPEN#) ALTRET(NO_PIGLET);

   1584  1 000040   000003 630400 2                  EPPR0   3
         1 000041   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000042   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000043   000111 702000 1                  TSX2    NO_PIGLET

      214     1585        /**/
      215     1586        /*  Listen for a message saying that the PIGLET has successfully been         */
      216     1587        /*  initialized.                                                              */
      217     1588        /**/
      218     1589    1           CALL KPI$IO_SVC(%KP_FECG_READ#) ALTRET(CANT_INIT);

   1589  1 000044   000004 630400 2                  EPPR0   4
         1 000045   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000046   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000047   000105 702000 1                  TSX2    CANT_INIT

      219     1590    1           CALL KPE$CHECK_ERR(%KP_INITED_MSG#) ALTRET(CANT_INIT);

   1590  1 000050   000006 630400 2                  EPPR0   6
         1 000051   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000052   000000 701000 xent               TSX1    KPE$CHECK_ERR
         1 000053   000105 702000 1                  TSX2    CANT_INIT

   1580  1 000054                       REQUEST_OPEN null
      220     1591        %EJECT;
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:47   
      221     1592        /**/
      222     1593        /* Send the open request.  */
      223     1594        /**/
      224     1595    1   REQUEST_OPEN: ;
      225     1596    1           IF DRIVE < 0 THEN               /* A LOCK REQUEST                     */

   1596  1 000054   200004 470500                    LDP0    @DRIVE,,AUTO
         1 000055   000000 235100                    LDA     0,,PR0
         1 000056   000104 604000 1                  TMI     DISK_OPENED

      226     1597    1              GOTO DISK_OPENED;
      227     1598    1           KP_FECG_OUT$ -> KP$MSG.HEAD.MSG_TYPE = %KP_OPEN_RQS#;

   1598  1 000057   000000 471400 xsym               LDP1    KP_FECG_OUT$
         1 000060   004000 236003                    LDQ     2048,DU
         1 000061   100000 552140                    STBQ    0,'40'O,PR1

      228     1599    1           KP_FECG_OUT$ -> KP$MSG.HEAD.DRIVE_NO = DRIVE;

   1599  1 000062   000000 471400 xsym               LDP1    KP_FECG_OUT$
         1 000063   000000 236100                    LDQ     0,,PR0
         1 000064   000022 736000                    QLS     18
         1 000065   100000 552120                    STBQ    0,'20'O,PR1

      229     1600    1           KP_FECG_OUT_SIZE = SIZEC(KP$MSG.HEAD);

   1600  1 000066   000022 235007                    LDA     18,DL
         1 000067   000000 755000 xsym               STA     KP_FECG_OUT_SIZE

      230     1601    1           CALL KPI$IO_SVC(%KP_FECG_WRITE#) ALTRET(CANT_OPEN);

   1601  1 000070   000007 630400 2                  EPPR0   7
         1 000071   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000072   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000073   000112 702000 1                  TSX2    CANT_OPEN

      231     1602        /**/
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:48   
      232     1603        /*  Get PIGLET's response.  */
      233     1604        /**/
      234     1605    1           CALL KPI$IO_SVC(%KP_FECG_READ#) ALTRET(CANT_OPEN);

   1605  1 000074   000004 630400 2                  EPPR0   4
         1 000075   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000076   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000077   000112 702000 1                  TSX2    CANT_OPEN

      235     1606    1           CALL KPE$CHECK_ERR(%KP_OPEN_RSP#) ALTRET(CANT_OPEN);

   1606  1 000100   000011 630400 2                  EPPR0   9
         1 000101   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000102   000000 701000 xent               TSX1    KPE$CHECK_ERR
         1 000103   000112 702000 1                  TSX2    CANT_OPEN

   1600  1 000104                       DISK_OPENED  null
      236     1607    1   DISK_OPENED: ;
      237     1608        /**/
      238     1609    1           RETURN;

   1609  1 000104   000000 702200 xent               TSX2  ! X66_ARET

   1600  1 000105                       CANT_INIT    null
      239     1610        /**/
      240     1611    1   CANT_INIT: ;                            /* PIGLET unable to finish initialize */
      241     1612    1           CALL KPI$IO_SVC(%KP_FECG_CLOSE#) ALTRET(BLETCH);

   1612  1 000105   000006 630400 2                  EPPR0   6
         1 000106   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000107   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000110   000111 702000 1                  TSX2    NO_PIGLET

   1612  1 000111                       NO_PIGLET    null
   1612  1 000111                       BLETCH       null
      242     1613    1   NO_PIGLET: ;                            /* Unable to start PIGLET             */
      243     1614    1   BLETCH: ;                               /* Unexpected error during ALT cleanup*/
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:49   
      244     1615    1           KP_FEP_NO = 0;

   1615  1 000111   000000 450000 xsym               STZ     KP_FEP_NO

   1615  1 000112                       CANT_OPEN    null
   1615  1 000112                       CANT_CLOSE   null
      245     1616    1   CANT_OPEN: ;                            /* PIGLET unable to open that drive   */
      246     1617    1   CANT_CLOSE: ;                          /* PIGLET unable to close that drive   */
      247     1618    1           ALTRETURN;

   1618  1 000112   000000 702200 xent               TSX2  ! X66_AALT
      248     1619    1   END KPX$OPEN;
      249     1620        %EOD;

PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:50   
--  Include file information  --

   KP_MSG.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPX$OPEN.
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:51   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DRIVE                     3-0-0/w PTR         r     1 @FEP
    *0-0-0/w SBIN        r     1 DRIVE                     *0-0-0/w SBIN        r     1 FEP
     5-0-0/w UBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 KP_FECG_OUT$               0-0-0/w UBIN        r     1 KP_FECG_OUT_SIZE
     0-0-0/w SBIN        r     1 KP_FEP_NO                  0-0-0/w SBIN        r     1 USE_LOCKED_FEP

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(18594) r     1 KP$MSG


   Procedure KPX$OPEN requires 75 words for executable code.
   Procedure KPX$OPEN requires 8 words of local(AUTO) storage.
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:52   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:53   
          MINI XREF LISTING

BLETCH
      1612**LABEL    1567--GOTO     1612--CALLALT
CANT_CLOSE
      1615**LABEL    1578--CALLALT
CANT_INIT
      1600**LABEL    1589--CALLALT  1590--CALLALT
CANT_OPEN
      1615**LABEL    1601--CALLALT  1605--CALLALT  1606--CALLALT
DISK_OPENED
      1600**LABEL    1597--GOTO
DRIVE
        17**DCL        12--PROC     1596>>IF       1599>>ASSIGN
FEP
        16**DCL        12--PROC     1564>>IF       1572>>IF       1580>>ASSIGN
I
        21**DCL      1576<<ASSIGN   1578<>CALL
KP$MSG.HEAD
      1375**DCL      1600--ASSIGN
KP$MSG.HEAD.DRIVE_NO
      1377**DCL      1599<<ASSIGN
KP$MSG.HEAD.MSG_TYPE
      1376**DCL      1598<<ASSIGN
KP$MSG.TDATA
      1400**DCL      1401--REDEF    1402--REDEF    1407--REDEF    1421--REDEF    1426--REDEF    1430--REDEF
      1436--REDEF    1439--REDEF
KPE$CHECK_ERR
      1472**DCL-ENT  1590--CALL     1606--CALL
KPE$ERROR
      1475**DCL-ENT  1566--CALL
KPI$IO_SVC
      1487**DCL-ENT  1584--CALL     1589--CALL     1601--CALL     1605--CALL     1612--CALL
KPX$CLOSE
PL6.E3A0      #003=KPX$OPEN File=KPX$EXTERNAL.:E05TSI                            WED 07/30/97 01:23 Page:54   
      1521**DCL-ENT  1578--CALL
KP_EXIT.V.STEPCC#
       948**DCL       948--REDEF
KP_FECG_OUT$
       874**DCL      1598>>ASSIGN   1599>>ASSIGN
KP_FECG_OUT_SIZE
       874**DCL      1600<<ASSIGN
KP_FEP_NO
       876**DCL      1571>>IF       1572>>IF       1576>>ASSIGN   1577<<ASSIGN   1580<<ASSIGN   1615<<ASSIGN
KP_INBUF
       870**DCL       870--REDEF
KP_RU_KEY
       878**DCL       879--REDEF
KP_RU_KEY.NODE
       878**DCL       878--REDEF
KP_RU_KEY.PAGE
       879**DCL       879--REDEF
KP_RU_OUTBUF
       872**DCL       872--REDEF
NO_PIGLET
      1612**LABEL    1584--CALLALT
REQUEST_OPEN
      1580**LABEL    1569--GOTO     1572--GOTO
USE_LOCKED_FEP
       881**DCL      1562>>IF       1564>>IF

PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:55   
      250        1        /*M*     KPC$PUTSEC Write the text records to the fep   */
      251        2        /*T***********************************************************/
      252        3        /*T*                                                         */
      253        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      254        5        /*T*                                                         */
      255        6        /*T***********************************************************/
      256        7        /*F*     NAME:          KPX$PUTSEC
      257        8                 PURPOSE:       Write contigous sectors to a diskette.
      258        9                 DESCRIPTION:   This routine writes one or more contigous
      259       10                                sectors to the diskette.  Note that the
      260       11                                sectors must reside on the same track.
      261       12
      262       13                                After the write operation, the data is verified.
      263       14                                If old and new don't match, then tell the user
      264       15                                and blow him away!
      265       16        */
      266       17        KPX$PUTSEC: PROC(FEP,DRIVE,TRACK,START_SECTOR,SIZE,SECTOR,SIDE)
      267       18                  ALTRET;
      268       19        /**/
      269       20        /*  INCLUDE FILES  */
      270       21        /**/
      271       22        %INCLUDE KP_DATA_R;
      272     1274        %INCLUDE KP_MSG;
      273     1367        %INCLUDE XU_SUBS_C;
      274     1459        %INCLUDE XUF_ENTRY;
      275     1467        /**/
      276     1468        /*  Parameters  */
      277     1469        /**/
      278     1470    1   DCL FEP UBIN WORD;
      279     1471    1   DCL DRIVE UBIN WORD;
      280     1472    1   DCL TRACK UBIN WORD;
      281     1473    1   DCL START_SECTOR UBIN WORD;
      282     1474    1   DCL SIZE UBIN WORD;
      283     1475    1   DCL SECTOR(0:%(KP_BLOCK_SIZE#-1)) UBIN BYTE UNAL;
      284     1476    1   DCL SIDE SBIN WORD;
      285     1477        /**/
      286     1478        /*  BASED  */
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:56   
      287     1479        /**/
      288     1480        %KP$MSG (NAME=KP$MSG,STCLASS=BASED);
      289     1556    1   DCL B$DATAU (0:0) UBIN BYTE BASED CALIGNED;
      290     1557    1   DCL 1 B$DATAB (0:0) BASED CALIGNED,
      291     1558    1         2 SPARE BIT(1) UNAL,
      292     1559    1         2 DATA BIT(8) UNAL;
      293     1560    1   DCL B$DATAC CHAR(NBYTES) BASED CALIGNED;
      294     1561        /**/
      295     1562        /*  LOCAL AUTO  */
      296     1563        /**/
      297     1564    1   DCL I SBIN WORD;
      298     1565    1   DCL TRACK_ADDR UBIN WORD;
      299     1566    1   DCL OUT_SIDE UBIN WORD;
      300     1567    1   DCL IN_SIDE UBIN WORD;
      301     1568    1   DCL SEC_ADDR UBIN WORD;
      302     1569    1   DCL GOOFED_BYTE UBIN WORD;
      303     1570    1   DCL NBYTES UBIN WORD;
      304     1571    1   DCL 1 NBYTES_ REDEF NBYTES,
      305     1572    1         2 * UBIN(20) UNAL,
      306     1573    1         2 HOB UBIN(8) UNAL,
      307     1574    1         2 LOB UBIN(8) UNAL;
      308     1575    1   DCL IN$ PTR;
      309     1576    1   DCL OUT$ PTR;
      310     1577    1   DCL NUM_BADBYTES SBIN;
      311     1578        /**/
      312     1579        /* Format data structure for magic X$WRITE procedure */
      313     1580        /**/
      314     1581    1   DCL FMT1 CONSTANT CHAR(0) INIT(
              1581            'TRK %D, SEC %D, SID %D, BYT %D (FEP %D, DRV %D) should be %H, but is %H!' );
      315     1582        /**/
      316     1583        /* External procedures */
      317     1584        /**/
      318     1585        %KP_ENTRIES (OMIT=KPX$PUTSEC);
      319     1691        %EJECT;
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:57   
      320     1692    1           IN$ = ADDR(KP_FECG_IN$ -> KP$MSG.TDATA);
      321     1693    1           OUT$ = ADDR(KP_FECG_OUT$ -> KP$MSG.TDATA);
      322     1694    1           KP_FEP_NO = FEP;
      323     1695    1           KP_FECG_OUT$ -> KP$MSG.HEAD.MSG_TYPE = %KP_WRITE_RQS#;
      324     1696    1           KP_FECG_OUT$ -> KP$MSG.HEAD.DRIVE_NO = DRIVE;
      325     1697    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SEC_SIZE = IN_OPTS.SSIZE_CODE;
      326     1698    1           KP_FECG_OUT$ -> KP$MSG.HEAD.IOTYPE = IN_OPTS.IOTYPE;
      327     1699    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SIDE = SIDE;
      328     1700    1           KP_FECG_OUT$ -> KP$MSG.HEAD.TRACK_NO = TRACK;
      329     1701    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SECTOR_NO = START_SECTOR;
      330     1702    1           NBYTES = SIZE * IN_OPTS.SECTOR_SIZE;
      331     1703    1           KP_FECG_OUT$ -> KP$MSG.HEAD.NUM_BYTES.HOB = NBYTES_.HOB;
      332     1704    1           KP_FECG_OUT$ -> KP$MSG.HEAD.NUM_BYTES.LOB = NBYTES_.LOB;
      333     1705    1           KP_FECG_OUT$ -> KP$MSG.TDATA = SECTOR;
      334     1706    1           KP_FECG_OUT_SIZE = SIZEC(KP$MSG.HEAD) + NBYTES;
      335     1707        /**/
      336     1708        /* Send the write request to PIGLET and get his response. */
      337     1709        /**/
      338     1710    1           CALL KPI$IO_SVC(%KP_FECG_WRITE#) ALTRET(RIVER_CITY);
      339     1711    1           KP_DISK_ACTIVITY = %KP_DISK_WRITING#;
      340     1712    1           CALL KPI$IO_SVC(%KP_FECG_READ#) ALTRET(RIVER_CITY);
      341     1713    1           IF KP_FECG_IN$ -> KP$MSG.HEAD.MSG_TYPE = %KP_VERFD_RSP# THEN
      342     1714    1              GOTO ITS_OK;
      343     1715    1           CALL KPE$CHECK_ERR(%KP_WRITE_RSP#) ALTRET(RIVER_CITY);
      344     1716        %EJECT;
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:58   
      345     1717        /**/
      346     1718        /* We've written the record without device hitch, now see if it's             */
      347     1719        /* what we really wanted.                                                     */
      348     1720        /*                                                                            */
      349     1721        /* Note that a quick compare can just test the entire buffer.  BUT the        */
      350     1722        /* overall results must be blind to the extra bit in the host!                */
      351     1723        /**/
      352     1724    1           IF IN$ -> B$DATAC ~=
      353     1725    1            OUT$ -> B$DATAC
      354     1726    1            THEN                           /* One or more bad bytes              */
      355     1727    2              DO;                          /* Find the bad ones                  */
      356     1728    2                NUM_BADBYTES = 0;
      357     1729    3                DO I = 0 TO NBYTES - 1;
      358     1730    3                   IF IN$ -> B$DATAB.DATA(I) ~=
      359     1731    3                    OUT$ -> B$DATAB.DATA(I)
      360     1732    3                    THEN
      361     1733    4                      DO;
      362     1734    4                        NUM_BADBYTES = NUM_BADBYTES +1;
      363     1735    4                        F_FDS.DVFC# = ' ';
      364     1736    4                        TRACK_ADDR = KP_FECG_OUT$ -> KP$MSG.HEAD.TRACK_NO;
      365     1737    4                        SEC_ADDR = KP_FECG_OUT$ -> KP$MSG.HEAD.SECTOR_NO
      366     1738    4                                   + (I / IN_OPTS.SECTOR_SIZE);
      367     1739    4                        GOOFED_BYTE = MOD( I, IN_OPTS.SECTOR_SIZE );
      368     1740    4                        OUT_SIDE = OUT$ -> B$DATAU(I);
      369     1741    4                        IN_SIDE  = IN$ -> B$DATAU(I);
      370     1742    4                        CALL X$WRITE( F_FDS,
      371     1743    4                             VECTOR(FMT1),
      372     1744    4                             VECTOR(TRACK_ADDR),
      373     1745    4                             VECTOR(SEC_ADDR),
      374     1746    4                             VECTOR(SIDE),
      375     1747    4                             VECTOR(GOOFED_BYTE),
      376     1748    4                             VECTOR(FEP),
      377     1749    4                             VECTOR(DRIVE),
      378     1750    4                             VECTOR(OUT_SIDE),
      379     1751    4                             VECTOR(IN_SIDE) );
      380     1752    4                        CALL KPI$IO_SVC( %KP_LO_WRITE# );
      381     1753    4                        END;
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:59   
      382     1754    3                   END;
      383     1755    2                IF NUM_BADBYTES = 0
      384     1756    2                 THEN
      385     1757    2                  GOTO ITS_OK;
      386     1758    2                ALTRETURN;
      387     1759    2                END;
      388     1760    1   ITS_OK: ;
      389     1761    1           RETURN;
      390     1762        /**/
      391     1763    1   RIVER_CITY: ;
      392     1764    1           ALTRETURN;
      393     1765    1   END KPX$PUTSEC;

PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:60   
--  Include file information  --

   XUF_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPX$PUTSEC.

   Procedure KPX$PUTSEC requires 218 words for executable code.
   Procedure KPX$PUTSEC requires 72 words of local(AUTO) storage.

    No errors detected in file KPX$EXTERNAL.:E05TSI    .

PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:61   

 Object Unit name= KPX$PUTSEC                                 File name= KPX$EXTERNAL.:E05TOU
 UTS= JUL 30 '97 01:23:50.40 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     18     22  KPX$PUTSEC
    2   Proc  even  none   218    332  KPX$PUTSEC
    3  RoData even  none    12     14  KPX$PUTSEC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        7  KPX$PUTSEC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KPI$IO_SVC
 yes     yes           Std       1 KPE$CHECK_ERR
         yes           Std      22 X$WRITE
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:62   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_FECG_IN$                           KP_FECG_OUT$                          KP_FECG_OUT_SIZE
     KP_FEP_NO                             KP_RU_KEY                             KP_DISK_ACTIVITY
     IN_OPTS                               F_FDS                                 B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:63   


      250        1        /*M*     KPC$PUTSEC Write the text records to the fep   */
      251        2        /*T***********************************************************/
      252        3        /*T*                                                         */
      253        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      254        5        /*T*                                                         */
      255        6        /*T***********************************************************/
      256        7        /*F*     NAME:          KPX$PUTSEC
      257        8                 PURPOSE:       Write contigous sectors to a diskette.
      258        9                 DESCRIPTION:   This routine writes one or more contigous
      259       10                                sectors to the diskette.  Note that the
      260       11                                sectors must reside on the same track.
      261       12
      262       13                                After the write operation, the data is verified.
      263       14                                If old and new don't match, then tell the user
      264       15                                and blow him away!
      265       16        */
      266       17        KPX$PUTSEC: PROC(FEP,DRIVE,TRACK,START_SECTOR,SIZE,SECTOR,SIDE)

     17  2 000000   000000 700200 xent  KPX$PUTSEC   TSX0  ! X66_AUTO_N
         2 000001   000110 000007                    ZERO    72,7

      267       18                  ALTRET;
      268       19        /**/
      269       20        /*  INCLUDE FILES  */
      270       21        /**/
      271       22        %INCLUDE KP_DATA_R;
      272     1274        %INCLUDE KP_MSG;
      273     1367        %INCLUDE XU_SUBS_C;
      274     1459        %INCLUDE XUF_ENTRY;
      275     1467        /**/
      276     1468        /*  Parameters  */
      277     1469        /**/
      278     1470    1   DCL FEP UBIN WORD;
      279     1471    1   DCL DRIVE UBIN WORD;
      280     1472    1   DCL TRACK UBIN WORD;
      281     1473    1   DCL START_SECTOR UBIN WORD;
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:64   
      282     1474    1   DCL SIZE UBIN WORD;
      283     1475    1   DCL SECTOR(0:%(KP_BLOCK_SIZE#-1)) UBIN BYTE UNAL;
      284     1476    1   DCL SIDE SBIN WORD;
      285     1477        /**/
      286     1478        /*  BASED  */
      287     1479        /**/
      288     1480        %KP$MSG (NAME=KP$MSG,STCLASS=BASED);
      289     1556    1   DCL B$DATAU (0:0) UBIN BYTE BASED CALIGNED;
      290     1557    1   DCL 1 B$DATAB (0:0) BASED CALIGNED,
      291     1558    1         2 SPARE BIT(1) UNAL,
      292     1559    1         2 DATA BIT(8) UNAL;
      293     1560    1   DCL B$DATAC CHAR(NBYTES) BASED CALIGNED;
      294     1561        /**/
      295     1562        /*  LOCAL AUTO  */
      296     1563        /**/
      297     1564    1   DCL I SBIN WORD;
      298     1565    1   DCL TRACK_ADDR UBIN WORD;
      299     1566    1   DCL OUT_SIDE UBIN WORD;
      300     1567    1   DCL IN_SIDE UBIN WORD;
      301     1568    1   DCL SEC_ADDR UBIN WORD;
      302     1569    1   DCL GOOFED_BYTE UBIN WORD;
      303     1570    1   DCL NBYTES UBIN WORD;
      304     1571    1   DCL 1 NBYTES_ REDEF NBYTES,
      305     1572    1         2 * UBIN(20) UNAL,
      306     1573    1         2 HOB UBIN(8) UNAL,
      307     1574    1         2 LOB UBIN(8) UNAL;
      308     1575    1   DCL IN$ PTR;
      309     1576    1   DCL OUT$ PTR;
      310     1577    1   DCL NUM_BADBYTES SBIN;
      311     1578        /**/
      312     1579        /* Format data structure for magic X$WRITE procedure */
      313     1580        /**/
      314     1581    1   DCL FMT1 CONSTANT CHAR(0) INIT(
              1581            'TRK %D, SEC %D, SID %D, BYT %D (FEP %D, DRV %D) should be %H, but is %H!' );
      315     1582        /**/
      316     1583        /* External procedures */
      317     1584        /**/
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:65   
      318     1585        %KP_ENTRIES (OMIT=KPX$PUTSEC);
      319     1691        %EJECT;
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:66   
      320     1692    1           IN$ = ADDR(KP_FECG_IN$ -> KP$MSG.TDATA);

   1692  2 000002   000000 236000 xsym               LDQ     KP_FECG_IN$
         2 000003   000000 036000 3                  ADLQ    0
         2 000004   200021 756100                    STQ     IN$,,AUTO

      321     1693    1           OUT$ = ADDR(KP_FECG_OUT$ -> KP$MSG.TDATA);

   1693  2 000005   000000 236000 xsym               LDQ     KP_FECG_OUT$
         2 000006   000000 036000 3                  ADLQ    0
         2 000007   200022 756100                    STQ     OUT$,,AUTO

      322     1694    1           KP_FEP_NO = FEP;

   1694  2 000010   200003 470500                    LDP0    @FEP,,AUTO
         2 000011   000000 235100                    LDA     0,,PR0
         2 000012   000000 755000 xsym               STA     KP_FEP_NO

      323     1695    1           KP_FECG_OUT$ -> KP$MSG.HEAD.MSG_TYPE = %KP_WRITE_RQS#;

   1695  2 000013   000000 471400 xsym               LDP1    KP_FECG_OUT$
         2 000014   002000 236003                    LDQ     1024,DU
         2 000015   100000 552140                    STBQ    0,'40'O,PR1

      324     1696    1           KP_FECG_OUT$ -> KP$MSG.HEAD.DRIVE_NO = DRIVE;

   1696  2 000016   200004 471500                    LDP1    @DRIVE,,AUTO
         2 000017   000000 473400 xsym               LDP3    KP_FECG_OUT$
         2 000020   100000 236100                    LDQ     0,,PR1
         2 000021   000022 736000                    QLS     18
         2 000022   300000 552120                    STBQ    0,'20'O,PR3

      325     1697    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SEC_SIZE = IN_OPTS.SSIZE_CODE;

   1697  2 000023   000000 473400 xsym               LDP3    KP_FECG_OUT$
         2 000024   000011 236000 xsym               LDQ     IN_OPTS+9
         2 000025   300002 552104                    STBQ    2,'04'O,PR3
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:67   

      326     1698    1           KP_FECG_OUT$ -> KP$MSG.HEAD.IOTYPE = IN_OPTS.IOTYPE;

   1698  2 000026   000013 236000 xsym               LDQ     IN_OPTS+11
         2 000027   000011 736000                    QLS     9
         2 000030   300000 552110                    STBQ    0,'10'O,PR3

      327     1699    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SIDE = SIDE;

   1699  2 000031   000000 473400 xsym               LDP3    KP_FECG_OUT$
         2 000032   200011 474500                    LDP4    @SIDE,,AUTO
         2 000033   400000 236100                    LDQ     0,,PR4
         2 000034   000033 736000                    QLS     27
         2 000035   300002 552140                    STBQ    2,'40'O,PR3

      328     1700    1           KP_FECG_OUT$ -> KP$MSG.HEAD.TRACK_NO = TRACK;

   1700  2 000036   200005 475500                    LDP5    @TRACK,,AUTO
         2 000037   500000 236100                    LDQ     0,,PR5
         2 000040   000022 736000                    QLS     18
         2 000041   300002 552120                    STBQ    2,'20'O,PR3

      329     1701    1           KP_FECG_OUT$ -> KP$MSG.HEAD.SECTOR_NO = START_SECTOR;

   1701  2 000042   200006 476500                    LDP6    @START_SECTOR,,AUTO
         2 000043   600000 236100                    LDQ     0,,PR6
         2 000044   000011 736000                    QLS     9
         2 000045   300002 552110                    STBQ    2,'10'O,PR3

      330     1702    1           NBYTES = SIZE * IN_OPTS.SECTOR_SIZE;

   1702  2 000046   200007 477500                    LDP7    @SIZE,,AUTO
         2 000047   700000 236100                    LDQ     0,,PR7
         2 000050   000010 402000 xsym               MPY     IN_OPTS+8
         2 000051   200020 756100                    STQ     NBYTES,,AUTO

      331     1703    1           KP_FECG_OUT$ -> KP$MSG.HEAD.NUM_BYTES.HOB = NBYTES_.HOB;
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:68   

   1703  2 000052   200020 236100                    LDQ     NBYTES,,AUTO
         2 000053   177400 376007                    ANQ     65280,DL
         2 000054   000001 736000                    QLS     1
         2 000055   300001 552110                    STBQ    1,'10'O,PR3

      332     1704    1           KP_FECG_OUT$ -> KP$MSG.HEAD.NUM_BYTES.LOB = NBYTES_.LOB;

   1704  2 000056   200020 236100                    LDQ     NBYTES,,AUTO
         2 000057   000377 376007                    ANQ     255,DL
         2 000060   300001 552104                    STBQ    1,'04'O,PR3

      333     1705    1           KP_FECG_OUT$ -> KP$MSG.TDATA = SECTOR;

   1705  2 000061   200010 470500                    LDP0    @SECTOR,,AUTO
         2 000062   044000 220003                    LDX0    18432,DU
         2 000063   003140 060540                    CSL     bolr='003'O
         2 000064   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
         2 000065   300004 400010                    BDSC    4,,PR3                   by=2,bit=0,n=*X0

      334     1706    1           KP_FECG_OUT_SIZE = SIZEC(KP$MSG.HEAD) + NBYTES;

   1706  2 000066   200020 235100                    LDA     NBYTES,,AUTO
         2 000067   000022 035007                    ADLA    18,DL
         2 000070   000000 755000 xsym               STA     KP_FECG_OUT_SIZE

      335     1707        /**/
      336     1708        /* Send the write request to PIGLET and get his response. */
      337     1709        /**/
      338     1710    1           CALL KPI$IO_SVC(%KP_FECG_WRITE#) ALTRET(RIVER_CITY);

   1710  2 000071   000001 630400 3                  EPPR0   1
         2 000072   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000073   000000 701000 xent               TSX1    KPI$IO_SVC
         2 000074   000331 702000 2                  TSX2    RIVER_CITY

      339     1711    1           KP_DISK_ACTIVITY = %KP_DISK_WRITING#;
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:69   

   1711  2 000075   000001 235007                    LDA     1,DL
         2 000076   000000 755000 xsym               STA     KP_DISK_ACTIVITY

      340     1712    1           CALL KPI$IO_SVC(%KP_FECG_READ#) ALTRET(RIVER_CITY);

   1712  2 000077   000002 630400 3                  EPPR0   2
         2 000100   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000101   000000 701000 xent               TSX1    KPI$IO_SVC
         2 000102   000331 702000 2                  TSX2    RIVER_CITY

      341     1713    1           IF KP_FECG_IN$ -> KP$MSG.HEAD.MSG_TYPE = %KP_VERFD_RSP# THEN

   1713  2 000103   000000 470400 xsym               LDP0    KP_FECG_IN$
         2 000104   000000 236100                    LDQ     0,,PR0
         2 000105   777000 376003                    ANQ     -512,DU
         2 000106   011000 116003                    CMPQ    4608,DU
         2 000107   000330 600000 2                  TZE     ITS_OK

      342     1714    1              GOTO ITS_OK;
      343     1715    1           CALL KPE$CHECK_ERR(%KP_WRITE_RSP#) ALTRET(RIVER_CITY);

   1715  2 000110   000004 630400 3                  EPPR0   4
         2 000111   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000112   000000 701000 xent               TSX1    KPE$CHECK_ERR
         2 000113   000331 702000 2                  TSX2    RIVER_CITY

      344     1716        %EJECT;
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:70   
      345     1717        /**/
      346     1718        /* We've written the record without device hitch, now see if it's             */
      347     1719        /* what we really wanted.                                                     */
      348     1720        /*                                                                            */
      349     1721        /* Note that a quick compare can just test the entire buffer.  BUT the        */
      350     1722        /* overall results must be blind to the extra bit in the host!                */
      351     1723        /**/
      352     1724    1           IF IN$ -> B$DATAC ~=

   1724  2 000114   200021 470500                    LDP0    IN$,,AUTO
         2 000115   200020 720100                    LXL0    NBYTES,,AUTO
         2 000116   200022 471500                    LDP1    OUT$,,AUTO
         2 000117   040140 106540                    CMPC    fill='040'O
         2 000120   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         2 000121   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         2 000122   000330 600000 2                  TZE     ITS_OK

      353     1725    1            OUT$ -> B$DATAC
      354     1726    1            THEN                           /* One or more bad bytes              */
      355     1727    2              DO;                          /* Find the bad ones                  */

      356     1728    2                NUM_BADBYTES = 0;

   1728  2 000123   200023 450100                    STZ     NUM_BADBYTES,,AUTO

      357     1729    3                DO I = 0 TO NBYTES - 1;

   1729  2 000124   200012 450100                    STZ     I,,AUTO
         2 000125   000321 710000 2                  TRA     s:1754+1

      358     1730    3                   IF IN$ -> B$DATAB.DATA(I) ~=

   1730  2 000126   200012 236100                    LDQ     I,,AUTO
         2 000127   000011 402007                    MPY     9,DL
         2 000130   000000 116003                    CMPQ    0,DU
         2 000131   000133 605000 2                  TPL     s:1730+5
         2 000132   000044 036003                    ADLQ    36,DU
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:71   
         2 000133   200024 756100                    STQ     NUM_BADBYTES+1,,AUTO
         2 000134   200012 236100                    LDQ     I,,AUTO
         2 000135   000011 402007                    MPY     9,DL
         2 000136   000000 116003                    CMPQ    0,DU
         2 000137   000141 605000 2                  TPL     s:1730+11
         2 000140   000044 036003                    ADLQ    36,DU
         2 000141   200021 470500                    LDP0    IN$,,AUTO
         2 000142   200024 235100                    LDA     NUM_BADBYTES+1,,AUTO
         2 000143   200022 471500                    LDP1    OUT$,,AUTO
         2 000144   000106 066505                    CMPB    filb='0'B
         2 000145   000000 010010                    BDSC    0,A,PR0                  by=0,bit=1,n=8
         2 000146   100000 010010                    BDSC    0,Q,PR1                  by=0,bit=1,n=8
         2 000147   000320 600000 2                  TZE     s:1754

      359     1731    3                    OUT$ -> B$DATAB.DATA(I)
      360     1732    3                    THEN
      361     1733    4                      DO;

      362     1734    4                        NUM_BADBYTES = NUM_BADBYTES +1;

   1734  2 000150   200023 054100                    AOS     NUM_BADBYTES,,AUTO

      363     1735    4                        F_FDS.DVFC# = ' ';

   1735  2 000151   040000 236007                    LDQ     16384,DL
         2 000152   000013 552010 xsym               STBQ    F_FDS+11,'10'O

      364     1736    4                        TRACK_ADDR = KP_FECG_OUT$ -> KP$MSG.HEAD.TRACK_NO;

   1736  2 000153   000000 473400 xsym               LDP3    KP_FECG_OUT$
         2 000154   300002 236100                    LDQ     2,,PR3
         2 000155   000022 772000                    QRL     18
         2 000156   000777 376007                    ANQ     511,DL
         2 000157   200013 756100                    STQ     TRACK_ADDR,,AUTO

      365     1737    4                        SEC_ADDR = KP_FECG_OUT$ -> KP$MSG.HEAD.SECTOR_NO

PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:72   
   1737  2 000160   200012 236100                    LDQ     I,,AUTO
         2 000161   000010 506000 xsym               DIV     IN_OPTS+8
         2 000162   200024 756100                    STQ     NUM_BADBYTES+1,,AUTO
         2 000163   300002 236100                    LDQ     2,,PR3
         2 000164   000011 772000                    QRL     9
         2 000165   000777 376007                    ANQ     511,DL
         2 000166   200025 756100                    STQ     NUM_BADBYTES+2,,AUTO
         2 000167   200024 236100                    LDQ     NUM_BADBYTES+1,,AUTO
         2 000170   200025 036100                    ADLQ    NUM_BADBYTES+2,,AUTO
         2 000171   200016 756100                    STQ     SEC_ADDR,,AUTO

      366     1738    4                                   + (I / IN_OPTS.SECTOR_SIZE);
      367     1739    4                        GOOFED_BYTE = MOD( I, IN_OPTS.SECTOR_SIZE );

   1739  2 000172   200012 236100                    LDQ     I,,AUTO
         2 000173   000010 506000 xsym               DIV     IN_OPTS+8
         2 000174   200017 755100                    STA     GOOFED_BYTE,,AUTO

      368     1740    4                        OUT_SIDE = OUT$ -> B$DATAU(I);

   1740  2 000175   200012 236100                    LDQ     I,,AUTO
         2 000176   000100 101506                    MRL     fill='000'O
         2 000177   100000 000001                    ADSC9   0,Q,PR1                  cn=0,n=1
         2 000200   200014 000004                    ADSC9   OUT_SIDE,,AUTO           cn=0,n=4

      369     1741    4                        IN_SIDE  = IN$ -> B$DATAU(I);

   1741  2 000201   000100 101506                    MRL     fill='000'O
         2 000202   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 000203   200015 000004                    ADSC9   IN_SIDE,,AUTO            cn=0,n=4

      370     1742    4                        CALL X$WRITE( F_FDS,

   1742  2 000204   777640 235007                    LDA     -96,DL
         2 000205   200024 452500                    STP2    NUM_BADBYTES+1,,AUTO
         2 000206   200024 236100                    LDQ     NUM_BADBYTES+1,,AUTO
         2 000207   000013 036003                    ADLQ    11,DU
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:73   
         2 000210   200026 757100                    STAQ    NUM_BADBYTES+3,,AUTO
         2 000211   777640 235007                    LDA     -96,DL
         2 000212   200030 452500                    STP2    NUM_BADBYTES+5,,AUTO
         2 000213   200030 236100                    LDQ     NUM_BADBYTES+5,,AUTO
         2 000214   000016 036003                    ADLQ    14,DU
         2 000215   200032 757100                    STAQ    NUM_BADBYTES+7,,AUTO
         2 000216   777640 235007                    LDA     -96,DL
         2 000217   200011 236100                    LDQ     @SIDE,,AUTO
         2 000220   200034 757100                    STAQ    NUM_BADBYTES+9,,AUTO
         2 000221   777640 235007                    LDA     -96,DL
         2 000222   200036 452500                    STP2    NUM_BADBYTES+11,,AUTO
         2 000223   200036 236100                    LDQ     NUM_BADBYTES+11,,AUTO
         2 000224   000017 036003                    ADLQ    15,DU
         2 000225   200040 757100                    STAQ    NUM_BADBYTES+13,,AUTO
         2 000226   777640 235007                    LDA     -96,DL
         2 000227   200003 236100                    LDQ     @FEP,,AUTO
         2 000230   200042 757100                    STAQ    NUM_BADBYTES+15,,AUTO
         2 000231   777640 235007                    LDA     -96,DL
         2 000232   200004 236100                    LDQ     @DRIVE,,AUTO
         2 000233   200044 757100                    STAQ    NUM_BADBYTES+17,,AUTO
         2 000234   777640 235007                    LDA     -96,DL
         2 000235   200046 452500                    STP2    NUM_BADBYTES+19,,AUTO
         2 000236   200046 236100                    LDQ     NUM_BADBYTES+19,,AUTO
         2 000237   000014 036003                    ADLQ    12,DU
         2 000240   200050 757100                    STAQ    NUM_BADBYTES+21,,AUTO
         2 000241   777640 235007                    LDA     -96,DL
         2 000242   200052 452500                    STP2    NUM_BADBYTES+23,,AUTO
         2 000243   200052 236100                    LDQ     NUM_BADBYTES+23,,AUTO
         2 000244   000015 036003                    ADLQ    13,DU
         2 000245   200056 757100                    STAQ    NUM_BADBYTES+27,,AUTO
         2 000246   200026 237100                    LDAQ    NUM_BADBYTES+3,,AUTO
         2 000247   200054 757100                    STAQ    NUM_BADBYTES+25,,AUTO
         2 000250   200032 237100                    LDAQ    NUM_BADBYTES+7,,AUTO
         2 000251   200060 757100                    STAQ    NUM_BADBYTES+29,,AUTO
         2 000252   200034 237100                    LDAQ    NUM_BADBYTES+9,,AUTO
         2 000253   200062 757100                    STAQ    NUM_BADBYTES+31,,AUTO
         2 000254   200040 237100                    LDAQ    NUM_BADBYTES+13,,AUTO
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:74   
         2 000255   200064 757100                    STAQ    NUM_BADBYTES+33,,AUTO
         2 000256   200042 237100                    LDAQ    NUM_BADBYTES+15,,AUTO
         2 000257   200066 757100                    STAQ    NUM_BADBYTES+35,,AUTO
         2 000260   200044 237100                    LDAQ    NUM_BADBYTES+17,,AUTO
         2 000261   200070 757100                    STAQ    NUM_BADBYTES+37,,AUTO
         2 000262   200050 237100                    LDAQ    NUM_BADBYTES+21,,AUTO
         2 000263   200072 757100                    STAQ    NUM_BADBYTES+39,,AUTO
         2 000264   200056 237100                    LDAQ    NUM_BADBYTES+27,,AUTO
         2 000265   200074 757100                    STAQ    NUM_BADBYTES+41,,AUTO
         2 000266   200074 634500                    EPPR4   NUM_BADBYTES+41,,AUTO
         2 000267   200107 454500                    STP4    NUM_BADBYTES+52,,AUTO
         2 000270   200072 635500                    EPPR5   NUM_BADBYTES+39,,AUTO
         2 000271   200106 455500                    STP5    NUM_BADBYTES+51,,AUTO
         2 000272   200070 636500                    EPPR6   NUM_BADBYTES+37,,AUTO
         2 000273   200105 456500                    STP6    NUM_BADBYTES+50,,AUTO
         2 000274   200066 637500                    EPPR7   NUM_BADBYTES+35,,AUTO
         2 000275   200104 457500                    STP7    NUM_BADBYTES+49,,AUTO
         2 000276   200064 630500                    EPPR0   NUM_BADBYTES+33,,AUTO
         2 000277   200103 450500                    STP0    NUM_BADBYTES+48,,AUTO
         2 000300   200062 630500                    EPPR0   NUM_BADBYTES+31,,AUTO
         2 000301   200102 450500                    STP0    NUM_BADBYTES+47,,AUTO
         2 000302   200060 630500                    EPPR0   NUM_BADBYTES+29,,AUTO
         2 000303   200101 450500                    STP0    NUM_BADBYTES+46,,AUTO
         2 000304   200054 630500                    EPPR0   NUM_BADBYTES+25,,AUTO
         2 000305   200100 450500                    STP0    NUM_BADBYTES+45,,AUTO
         2 000306   000012 237000 3                  LDAQ    10
         2 000307   200076 757100                    STAQ    NUM_BADBYTES+43,,AUTO
         2 000310   200076 630500                    EPPR0   NUM_BADBYTES+43,,AUTO
         2 000311   000010 631400 3                  EPPR1   8
         2 000312   000000 701000 xent               TSX1    X$WRITE
         2 000313   000000 011000                    NOP     0

      371     1743    4                             VECTOR(FMT1),
      372     1744    4                             VECTOR(TRACK_ADDR),
      373     1745    4                             VECTOR(SEC_ADDR),
      374     1746    4                             VECTOR(SIDE),
      375     1747    4                             VECTOR(GOOFED_BYTE),
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:75   
      376     1748    4                             VECTOR(FEP),
      377     1749    4                             VECTOR(DRIVE),
      378     1750    4                             VECTOR(OUT_SIDE),
      379     1751    4                             VECTOR(IN_SIDE) );
      380     1752    4                        CALL KPI$IO_SVC( %KP_LO_WRITE# );

   1752  2 000314   000011 630400 3                  EPPR0   9
         2 000315   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000316   000000 701000 xent               TSX1    KPI$IO_SVC
         2 000317   000000 011000                    NOP     0

      381     1753    4                        END;

      382     1754    3                   END;

   1754  2 000320   200012 054100                    AOS     I,,AUTO
         2 000321   200012 236100                    LDQ     I,,AUTO
         2 000322   000126 604000 2                  TMI     s:1730
         2 000323   200020 116100                    CMPQ    NBYTES,,AUTO
         2 000324   000126 602000 2                  TNC     s:1730

      383     1755    2                IF NUM_BADBYTES = 0

   1755  2 000325   200023 235100                    LDA     NUM_BADBYTES,,AUTO
         2 000326   000330 600000 2                  TZE     ITS_OK

      384     1756    2                 THEN
      385     1757    2                  GOTO ITS_OK;
      386     1758    2                ALTRETURN;

   1758  2 000327   000000 702200 xent               TSX2  ! X66_AALT

   1750  2 000330                       ITS_OK       null
      387     1759    2                END;
      388     1760    1   ITS_OK: ;
      389     1761    1           RETURN;

PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:76   
   1761  2 000330   000000 702200 xent               TSX2  ! X66_ARET

   1750  2 000331                       RIVER_CITY   null
      390     1762        /**/
      391     1763    1   RIVER_CITY: ;
      392     1764    1           ALTRETURN;

   1764  2 000331   000000 702200 xent               TSX2  ! X66_AALT
      393     1765    1   END KPX$PUTSEC;

PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:77   
--  Include file information  --

   XUF_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPX$PUTSEC.
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:78   

 **** Variables and constants ****

  ****  Section 001 RoData KPX$PUTSEC

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(72)    r     1 FMT1

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DRIVE                     3-0-0/w PTR         r     1 @FEP
    10-0-0/w PTR         r     1 @SECTOR                   11-0-0/w PTR         r     1 @SIDE
     7-0-0/w PTR         r     1 @SIZE                      6-0-0/w PTR         r     1 @START_SECTOR
     5-0-0/w PTR         r     1 @TRACK                    *0-0-0/w UBIN        r     1 DRIVE
    *0-0-0/w UBIN        r     1 FEP                       17-0-0/w UBIN        r     1 GOOFED_BYTE
    12-0-0/w SBIN        r     1 I                         21-0-0/w PTR         r     1 IN$
    15-0-0/w UBIN        r     1 IN_SIDE                   20-0-0/w UBIN        r     1 NBYTES
    20-0-0/w STRC        r     1 NBYTES_                   23-0-0/w SBIN        r     1 NUM_BADBYTES
    22-0-0/w PTR         r     1 OUT$                      14-0-0/w UBIN        r     1 OUT_SIDE
    *0-0-0/b UBIN(9)     r     1 SECTOR(0:2047)            16-0-0/w UBIN        r     1 SEC_ADDR
    *0-0-0/w SBIN        r     1 SIDE                      *0-0-0/w UBIN        r     1 SIZE
    *0-0-0/w UBIN        r     1 START_SECTOR              *0-0-0/w UBIN        r     1 TRACK
    13-0-0/w UBIN        r     1 TRACK_ADDR

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1080)  r     1 F_FDS                      0-0-0/w STRC(468)   r     1 IN_OPTS
     0-0-0/w SBIN        r     1 KP_DISK_ACTIVITY           0-0-0/w PTR         r     1 KP_FECG_IN$
     0-0-0/w PTR         r     1 KP_FECG_OUT$               0-0-0/w UBIN        r     1 KP_FECG_OUT_SIZE
     0-0-0/w SBIN        r     1 KP_FEP_NO
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:79   

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(9)     r     1 B$DATAB(0:0)
     0-0-0/c ACHR        r     1 B$DATAC
     0-0-0/c UBIN(9)     r     1 B$DATAU(0:0)
     0-0-0/w STRC(18594) r     1 KP$MSG


   Procedure KPX$PUTSEC requires 218 words for executable code.
   Procedure KPX$PUTSEC requires 72 words of local(AUTO) storage.

    No errors detected in file KPX$EXTERNAL.:E05TSI    .
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:80   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:81   
          MINI XREF LISTING

B$DATAB.DATA
      1559**DCL      1730>>IF       1730>>IF
B$DATAC
      1560**DCL      1724>>IF       1724>>IF
B$DATAU
      1556**DCL      1740>>ASSIGN   1741>>ASSIGN
DRIVE
      1471**DCL        17--PROC     1696>>ASSIGN   1742--CALL
FEP
      1470**DCL        17--PROC     1694>>ASSIGN   1742--CALL
FMT1
      1581**DCL      1742--CALL
F_FDS
      1123**DCL      1742<>CALL
F_FDS.DVFC#
      1159**DCL      1735<<ASSIGN
GOOFED_BYTE
      1569**DCL      1739<<ASSIGN   1742--CALL
I
      1564**DCL      1729<<DOINDEX  1730>>IF       1730>>IF       1737>>ASSIGN   1739>>ASSIGN   1740>>ASSIGN
      1741>>ASSIGN
IN$
      1575**DCL      1692<<ASSIGN   1724>>IF       1730>>IF       1741>>ASSIGN
IN_OPTS.IOTYPE
      1045**DCL      1698>>ASSIGN
IN_OPTS.SECTOR_SIZE
      1038**DCL      1702>>ASSIGN   1737>>ASSIGN   1739>>ASSIGN
IN_OPTS.SSIZE_CODE
      1039**DCL      1697>>ASSIGN
IN_SIDE
      1567**DCL      1741<<ASSIGN   1742--CALL
ITS_OK
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:82   
      1750**LABEL    1714--GOTO     1757--GOTO
KP$MSG.HEAD
      1482**DCL      1706--ASSIGN
KP$MSG.HEAD.DRIVE_NO
      1484**DCL      1696<<ASSIGN
KP$MSG.HEAD.IOTYPE
      1485**DCL      1698<<ASSIGN
KP$MSG.HEAD.MSG_TYPE
      1483**DCL      1695<<ASSIGN   1713>>IF
KP$MSG.HEAD.NUM_BYTES.HOB
      1495**DCL      1703<<ASSIGN
KP$MSG.HEAD.NUM_BYTES.LOB
      1496**DCL      1704<<ASSIGN
KP$MSG.HEAD.SECTOR_NO
      1499**DCL      1701<<ASSIGN   1737>>ASSIGN
KP$MSG.HEAD.SEC_SIZE
      1500**DCL      1697<<ASSIGN
KP$MSG.HEAD.SIDE
      1497**DCL      1699<<ASSIGN
KP$MSG.HEAD.TRACK_NO
      1498**DCL      1700<<ASSIGN   1736>>ASSIGN
KP$MSG.TDATA
      1507**DCL      1508--REDEF    1509--REDEF    1514--REDEF    1528--REDEF    1533--REDEF    1537--REDEF
      1543--REDEF    1546--REDEF    1692--ASSIGN   1693--ASSIGN   1705<<ASSIGN
KPE$CHECK_ERR
      1605**DCL-ENT  1715--CALL
KPI$IO_SVC
      1620**DCL-ENT  1710--CALL     1712--CALL     1752--CALL
KP_DISK_ACTIVITY
       878**DCL      1711<<ASSIGN
KP_EXIT.V.STEPCC#
       945**DCL       945--REDEF
KP_FECG_IN$
       871**DCL      1692>>ASSIGN   1713>>IF
KP_FECG_OUT$
       871**DCL      1693>>ASSIGN   1695>>ASSIGN   1696>>ASSIGN   1697>>ASSIGN   1698>>ASSIGN   1699>>ASSIGN
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:83   
      1700>>ASSIGN   1701>>ASSIGN   1703>>ASSIGN   1704>>ASSIGN   1705>>ASSIGN   1736>>ASSIGN   1737>>ASSIGN
KP_FECG_OUT_SIZE
       871**DCL      1706<<ASSIGN
KP_FEP_NO
       873**DCL      1694<<ASSIGN
KP_INBUF
       867**DCL       867--REDEF
KP_RU_KEY
       875**DCL       876--REDEF
KP_RU_KEY.NODE
       875**DCL       875--REDEF
KP_RU_KEY.PAGE
       876**DCL       876--REDEF
KP_RU_OUTBUF
       869**DCL       869--REDEF
NBYTES
      1570**DCL      1560--IMP-SIZ  1571--REDEF    1702<<ASSIGN   1706>>ASSIGN   1724>>IF       1724>>IF
      1729>>DOINDEX
NBYTES_.HOB
      1573**DCL      1703>>ASSIGN
NBYTES_.LOB
      1574**DCL      1704>>ASSIGN
NUM_BADBYTES
      1577**DCL      1728<<ASSIGN   1734<<ASSIGN   1734>>ASSIGN   1755>>IF
OUT$
      1576**DCL      1693<<ASSIGN   1724>>IF       1730>>IF       1740>>ASSIGN
OUT_SIDE
      1566**DCL      1740<<ASSIGN   1742--CALL
RIVER_CITY
      1750**LABEL    1710--CALLALT  1712--CALLALT  1715--CALLALT
SECTOR
      1475**DCL        17--PROC     1705>>ASSIGN
SEC_ADDR
      1568**DCL      1737<<ASSIGN   1742--CALL
SIDE
      1476**DCL        17--PROC     1699>>ASSIGN   1742--CALL
PL6.E3A0      #004=KPX$PUTSEC File=KPX$EXTERNAL.:E05TSI                          WED 07/30/97 01:23 Page:84   
SIZE
      1474**DCL        17--PROC     1702>>ASSIGN
START_SECTOR
      1473**DCL        17--PROC     1701>>ASSIGN
TRACK
      1472**DCL        17--PROC     1700>>ASSIGN
TRACK_ADDR
      1565**DCL      1736<<ASSIGN   1742--CALL
X$WRITE
      1465**DCL-ENT  1742--CALL
