VERSION E05

PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:1    
        1        1        /*M* QT_DATA_D - TRADER global data */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        QT_DATA_D:
        8        8                PROC;
        9        9        /*  ! !  */
       10       10        %INCLUDE Q_PAGE_C;
       11       42        %SET LISTEXP='1'B;
       12       43
       13       44        /* QT_GLOBAL - Depository for general TRADER static data.  This
       14       45           structure contains flags, counters and pointers */
       15       46
       16       47        /*  !R!  */
       17       48    1   DCL 1 QT_GLOBAL STATIC SYMDEF,
       18       49    1         2 FILE_SELECTED BIT(1) ALIGNED INIT('0'B),
       19       50         /* Set if a TRADER file has been selected */
       20       51    1         2 XCON BIT(1) ALIGNED INIT('0'B),
       21       52         /* Set if someone did a CNTRL Y Q while MUST_FINISH was set */
       22       53    1         2 FIRST_READ BIT(1) ALIGNED INIT('1'B),
       23       54         /* Used by QTC$READ_TRADER to read TRADER file sequentialy */
       24       55    1         2 BREAK BIT(1) ALIGNED INIT('0'B),
       25       56         /* Set if break was hit */
       26       57    1         2 MUST_FINISH BIT(1) ALIGNED INIT('0'B),
       27       58         /* Set if current command must be completed even if CNTRL Y Q hit */
       28       59    1         2 *(0:17) UBIN WORD INIT(0 * 18),
       29       60         /* Spares */
       30       61    1         2 P$PCB$ PTR INIT(ADDR(NIL)),
       31       62         /* Ptr -> parse control block */
       32       63    1         2 AMR$FPT_OPEN$ PTR INIT(ADDR(NIL)),
       33       64         /* Ptr -> area to build an assign merge record used by QTC$PROCESS_SET */
       34       65    1         2 QT$ENTRY$ PTR INIT(ADDR(NIL)),
       35       66         /* Ptr -> area to read _E & _F records into */
       36       67    1         2 QT$SETTEXT$ PTR INIT(ADDR(NIL)),
       37       68         /* Ptr -> read _S records into */
PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:2    
       38       69    1         2 QT$FORM$ PTR INIT(ADDR(NIL)),
       39       70         /* Ptr -> to same thing as QT$ENTRY$ */
       40       71    1         2 M$TRADER$ PTR,
       41       72         /* Ptr -> M$TRADER DCB */
       42       73    1         2 M$DO# UBIN WORD,
       43       74         /* # of M$DO DCB */
       44       75    1         2 QT$ENTRY_SIZE UBIN WORD,
       45       76         /* Size in bytes of data segment pointed to by QT$ENTRY$ */
       46       77    1         2 QT$SETTEXT_SIZE UBIN WORD,
       47       78         /* Size in bytes of data segment pointed to by QT$SETTEXT$ */
       48       79    1         2 AMR$FPT_OPEN_SIZE UBIN WORD,
       49       80         /* Size in bytes of data segment pointed to by AMR$FPT_OPEN$ */
       50       81    1         2 *(0:18) UBIN WORD INIT(0 * 19);
       51       82         /* Spares */
       52       83
       53       84        /* QT_CMDBLK - This structure contains all of the information about
       54       85           the command that is currently being processed.  From this
       55       86           this structure you can gigure out what command is being processed
       56       87           and if any errors occurred while processing the command */
       57       88
       58       89    1   DCL 1 QT_CMDBLK STATIC SYMDEF,
       59       90    1         2 MAJOR_ERR BIT(36) ALIGNED,
       60       91         /* Major error that occurred while processing the command (CP6 error code) */
       61       92    1         2 MINOR_ERR BIT(36) ALIGNED,
       62       93         /* Minor error that occurred while processing the command (CP6 error code) */
       63       94    1         2 MAJOR_ERR_USED BIT(1) ALIGNED,
       64       95         /* Set if major error has been printed */
       65       96    1         2 TEXT$ PTR,
       66       97         /* Ptr -> text of the command */
       67       98    1         2 OUT$ PTR,
       68       99         /* Ptr -> parser output */
       69      100    1         2 ERR REDEF OUT$,
       70      101         /* XUR$GETCMD returns any error it gets reading a command here */
       71      102    1           3 FCG BIT(12) UNAL,
       72      103    1           3 MID BIT(6) UNAL,
       73      104    1           3 MON BIT(1) UNAL,
       74      105    1           3 CODE UBIN(14) UNAL,
PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:3    
       75      106    1           3 SEV UBIN(3) UNAL,
       76      107    1         2 CODE UBIN WORD,
       77      108         /* Code of the command see QT_SUBS_C */
       78      109    1         2 ARS UBIN WORD,
       79      110         /* Size of the command in bytes */
       80      111    1         2 FLAGS,
       81      112         /* Flags about the processing of the command */
       82      113    1           3 ERR BIT(1) UNAL,
       83      114         /* Set if an error occurred while processing the command */
       84      115    1           3 * BIT(8) UNAL;
       85      116         /* Spares */
       86      117
       87      118    1   END QT_DATA_D;

PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:4    
--  Include file information  --

   Q_PAGE_C.:E05TOU  is referenced.
      No diagnostics issued in procedure QT_DATA_D.

   No code generated for procedure QT_DATA_D .
   Procedure QT_DATA_D requires 4 words of local(AUTO) storage.

    No errors detected in file QT_DATA_D.:E05TSI    .

PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:5    

 Object Unit name= QT_DATA_D                                  File name= QT_DATA_D.:E05TOU
 UTS= JUL 30 '97 05:52:00.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    60     74  QT_DATA_D
    1   Proc  even  none     0      0  QT_DATA_D

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes     ~proc       0  QT_DATA_D

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  QT_GLOBAL                          0     64  QT_CMDBLK

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:6    

        1        1        /*M* QT_DATA_D - TRADER global data */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        QT_DATA_D:
        8        8                PROC;
        9        9        /*  ! !  */
       10       10        %INCLUDE Q_PAGE_C;
       11       42        %SET LISTEXP='1'B;
       12       43
       13       44        /* QT_GLOBAL - Depository for general TRADER static data.  This
       14       45           structure contains flags, counters and pointers */
       15       46
       16       47        /*  !R!  */
       17       48    1   DCL 1 QT_GLOBAL STATIC SYMDEF,
       18       49    1         2 FILE_SELECTED BIT(1) ALIGNED INIT('0'B),
       19       50         /* Set if a TRADER file has been selected */
       20       51    1         2 XCON BIT(1) ALIGNED INIT('0'B),
       21       52         /* Set if someone did a CNTRL Y Q while MUST_FINISH was set */
       22       53    1         2 FIRST_READ BIT(1) ALIGNED INIT('1'B),
       23       54         /* Used by QTC$READ_TRADER to read TRADER file sequentialy */
       24       55    1         2 BREAK BIT(1) ALIGNED INIT('0'B),
       25       56         /* Set if break was hit */
       26       57    1         2 MUST_FINISH BIT(1) ALIGNED INIT('0'B),
       27       58         /* Set if current command must be completed even if CNTRL Y Q hit */
       28       59    1         2 *(0:17) UBIN WORD INIT(0 * 18),
       29       60         /* Spares */
       30       61    1         2 P$PCB$ PTR INIT(ADDR(NIL)),
       31       62         /* Ptr -> parse control block */
       32       63    1         2 AMR$FPT_OPEN$ PTR INIT(ADDR(NIL)),
       33       64         /* Ptr -> area to build an assign merge record used by QTC$PROCESS_SET */
       34       65    1         2 QT$ENTRY$ PTR INIT(ADDR(NIL)),
       35       66         /* Ptr -> area to read _E & _F records into */
       36       67    1         2 QT$SETTEXT$ PTR INIT(ADDR(NIL)),
       37       68         /* Ptr -> read _S records into */
PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:7    
       38       69    1         2 QT$FORM$ PTR INIT(ADDR(NIL)),
       39       70         /* Ptr -> to same thing as QT$ENTRY$ */
       40       71    1         2 M$TRADER$ PTR,
       41       72         /* Ptr -> M$TRADER DCB */
       42       73    1         2 M$DO# UBIN WORD,
       43       74         /* # of M$DO DCB */
       44       75    1         2 QT$ENTRY_SIZE UBIN WORD,
       45       76         /* Size in bytes of data segment pointed to by QT$ENTRY$ */
       46       77    1         2 QT$SETTEXT_SIZE UBIN WORD,
       47       78         /* Size in bytes of data segment pointed to by QT$SETTEXT$ */
       48       79    1         2 AMR$FPT_OPEN_SIZE UBIN WORD,
       49       80         /* Size in bytes of data segment pointed to by AMR$FPT_OPEN$ */
       50       81    1         2 *(0:18) UBIN WORD INIT(0 * 19);
       51       82         /* Spares */
       52       83
       53       84        /* QT_CMDBLK - This structure contains all of the information about
       54       85           the command that is currently being processed.  From this
       55       86           this structure you can gigure out what command is being processed
       56       87           and if any errors occurred while processing the command */
       57       88
       58       89    1   DCL 1 QT_CMDBLK STATIC SYMDEF,
       59       90    1         2 MAJOR_ERR BIT(36) ALIGNED,
       60       91         /* Major error that occurred while processing the command (CP6 error code) */
       61       92    1         2 MINOR_ERR BIT(36) ALIGNED,
       62       93         /* Minor error that occurred while processing the command (CP6 error code) */
       63       94    1         2 MAJOR_ERR_USED BIT(1) ALIGNED,
       64       95         /* Set if major error has been printed */
       65       96    1         2 TEXT$ PTR,
       66       97         /* Ptr -> text of the command */
       67       98    1         2 OUT$ PTR,
       68       99         /* Ptr -> parser output */
       69      100    1         2 ERR REDEF OUT$,
       70      101         /* XUR$GETCMD returns any error it gets reading a command here */
       71      102    1           3 FCG BIT(12) UNAL,
       72      103    1           3 MID BIT(6) UNAL,
       73      104    1           3 MON BIT(1) UNAL,
       74      105    1           3 CODE UBIN(14) UNAL,
PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:8    
       75      106    1           3 SEV UBIN(3) UNAL,
       76      107    1         2 CODE UBIN WORD,
       77      108         /* Code of the command see QT_SUBS_C */
       78      109    1         2 ARS UBIN WORD,
       79      110         /* Size of the command in bytes */
       80      111    1         2 FLAGS,
       81      112         /* Flags about the processing of the command */
       82      113    1           3 ERR BIT(1) UNAL,
       83      114         /* Set if an error occurred while processing the command */
       84      115    1           3 * BIT(8) UNAL;
       85      116         /* Spares */
       86      117
       87      118    1   END QT_DATA_D;

PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:9    
--  Include file information  --

   Q_PAGE_C.:E05TOU  is referenced.
      No diagnostics issued in procedure QT_DATA_D.
PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:10   

 **** Variables and constants ****


   No code generated for procedure QT_DATA_D .
   Procedure QT_DATA_D requires 4 words of local(AUTO) storage.

    No errors detected in file QT_DATA_D.:E05TSI    .
PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:11   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=QT_DATA_D File=QT_DATA_D.:E05TSI                              WED 07/30/97 05:52 Page:12   
          MINI XREF LISTING

QT_CMDBLK.OUT$
        98**DCL       100--REDEF
