

14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          1    
    1      /*M* KQ_MAC_C Macros for the COMGROUP QUEUE */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DMC,DFC */
    8      /**/
    9      /**/
   10      /********************************************************************
   11      *********************************************************************/
   12      /*D* NAME:         KQ_BTN
   13           PURPOSE:      To define the structure of a binary tree node
   14           DESCRIPTION:  Defines the context required for each node in
   15                         one of the comgroup binary trees. */
   16      %MACRO KQ_BTN (FPTN=KQ_BTN,STCLASS=STATIC,LVL=1,LAST=";");
   17
   18       %LSET LISTDIR='0'B;
   19       %LSET LISTEXP='1'B;
   20       %LSET LISTCOM='0'B;
   21       %LSET LISTSUB='1'B;
   22       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   23       %IF (SUBSTR(STR,0,6)='STATIC') OR
   24       (SUBSTR(STR,0,8)='CONSTANT') OR
   25       (SUBSTR(STR,0,3)='EXT');
   26       %LSET INIT=CHARTEXT('INIT');
   27       %ELSE;
   28       %LSET INIT=CHARTEXT('/*');
   29       %ENDIF;
   30
   31       %IF LVL=1;
   32      DCL 1 FPTN STCLASS ALIGNED,
   33       %ELSE;
   34          %LVL FPTN ALIGNED,
   35       %ENDIF;
   36            %(LVL+1) * UBIN(27) UNAL %INIT(0)%CHARTEXT('/**/'),
   37            %(LVL+1) BF SBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          2    
   38                              /* BF       : balance factor */
   39            %(LVL+1) PRNT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   40                              /* PRNT$    : parent */
   41            %(LVL+1) LSON$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   42                              /* LSON$    : left son */
   43            %(LVL+1) RSON$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   44                              /* RSON$    : right son */
   45            %(LVL+1) FLINK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   46                              /* FLINK$   : link in linear list */
   47            %(LVL+1) KEY CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/') LAST
   48                              /* KEY      : key of this node */
   49      %MEND;
   50      /********************************************************************
   51      *********************************************************************/
   52      /*D* NAME:         KQ_CG
   53           PURPOSE:      To define the comgroup context block
   54           DESCRIPTION:  One of these exists for each active comgroup.
   55      */
   56      %MACRO KQ_CG (FPTN=KQ_CG,STCLASS=STATIC);
   57
   58       %LSET LISTDIR='0'B;
   59       %LSET LISTEXP='1'B;
   60       %LSET LISTCOM='0'B;
   61       %LSET LISTSUB='1'B;
   62       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   63       %IF (SUBSTR(STR,0,6)='STATIC') OR
   64       (SUBSTR(STR,0,8)='CONSTANT') OR
   65       (SUBSTR(STR,0,3)='EXT');
   66       %LSET INIT=CHARTEXT('INIT');
   67       %LSET IFLG=1;
   68       %ELSE;
   69       %LSET INIT=CHARTEXT('/*');
   70       %LSET IFLG=0;
   71       %ENDIF;
   72
   73      DCL 1 FPTN STCLASS DALIGNED,
   74                              /* WARNING: MMD.DSB$ must be word 0 - see KQX$LDASR */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          3    
   75               /****************************************
   76                *                                      *
   77                *           MM   data                  *
   78                *                                      *
   79                ****************************************/
   80            2 MMD,
   81                              /* MMD      : memory management data. */
   82              3 DSB$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   83                              /* DSB$     : points to descriptor segment block. */
   84              3 GATE BIT(72) ALIGNED %INIT('1'B)%CHARTEXT('/**/'),
   85                              /* GATE     : lock for MM stuff. */
   86              3 HEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   87                              /* HEAD$    : head of BAP MM pages. */
   88              3 PHEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   89                              /* PHEAD$   : head of BAP MM pages for 'perm-
   90                                            anent' stuff (e.g. stations). */
   91              3 FREE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   92                              /* FREE$    : pointer to head of chain of
   93                                            free pages; nonempty when there
   94                                            are pages freed below MINPG. */
   95              3 CURPG SBIN WORD %INIT(0)%CHARTEXT('/**/'),
   96                              /* CURPG    : current page count total */
   97              3 FREECNT SBIN WORD %INIT(0)%CHARTEXT('/**/'),
   98                              /* FREECNT  : count of FREE$ chain. */
   99              3 CURBPG UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  100                              /* CURBPG   : current # block-allocation pages. */
  101              3 MAXBPG UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  102                              /* MAXBPG   : max # block-allocation pages
  103                                            allowed; this and MAXDATAPGS are
  104                                            calculated from MAXPG and DATAPGS. */
  105              3 GIP BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  106                              /* GIP      : garbage collector running */
  107              3 GFORCE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  108                              /* GFORCE   : forced garbage collection.            */
  109              3 * BIT(7) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  110              3 BAPLOCK UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  111                              /* BAPLOCK  : ~= 0 to prevent release of
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          4    
  112                                            BAP pages. */
  113              3 MINBPG UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  114                              /* MINBPG   : min # block-allocation pages
  115                                            allowed; this and MINDATAPGS are
  116                                            calculated from MINPG and DATAPGS. */
  117              3 BASEREL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  118                              /* BASEREL$ : head of chain of KQ$FBs that
  119                                            must be released by KCC$BASE. */
  120              3 STAHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  121                              /* STAHD$   : head of list of stations waiting
  122                                            for memory. */
  123              3 MBLKHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  124                              /* MBLKHD$  : head of list of super MBLKs
  125                                            waiting for memory. */
  126              3 CURPPG UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
  127                              /* CURPPG   : current count 'perm' BAP
  128                                            pages. */
  129              3 * UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
  130              3 * (0:1) UBIN %INIT(0*0)%CHARTEXT('/**/'),
  131
  132
  133
  134               /****************************************
  135                *                                      *
  136                *           DELAY   stuff              *
  137                *                                      *
  138                ****************************************/
  139            2 DELAY UNAL,
  140                              /* DELAY    : mask of bits indicating which
  141                                            type of delayed actions need
  142                                            attending to; gated by GATE.CG. */
  143              3 AU BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  144                              /* AU       : KCA$CLOCK needs to be called. */
  145              3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  146              3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  147                              /* was STTM     : set if terminal stations must
  148                                            be examined to find those who
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          5    
  149                                            need to have KCD$STTM called. */
  150              3 NEEDPG BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  151                              /* NEEDPG   : set if MONTIMR routine must
  152                                            try to get a page */
  153              3 CGFULL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  154                              /* CGFULL   : waiting to call KQS$DOFULL */
  155              3 FIP BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  156                              /* FIP      : KQS$DOFULL in progress. */
  157              3 DDISC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  158                              /* DDISC    : KCO$DDISC must be called for
  159                                            stations with DDISC set. */
  160              3 MEMWARN BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  161                              /* MEMWARN  : KCC$CLOCK needs to warn the
  162                                            AU that mem space is low. */
  163              3 DISKWARN BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  164                              /* DISKWARN : KCC$CLOCK needs to warn the
  165                                            AU that disk space is low. */
  166              3 * BIT(27) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  167            2 SRQHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  168                              /* SRQHD$   : head of list of super MBLKs
  169                                            waiting for something. */
  170            2 DPVGHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  171                              /* DPVGHD$  : head of list of stations needing
  172                                            to VGET in KQP$PUT or stations
  173                                            needing to disconnect; linked in
  174                                            KQ$MBLK.DPVGLNK$; gated by
  175                                            KQ$CG.GATE.CG. */
  176            2 DGVGHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  177                              /* DGVGHD$  : head of list of stations needing
  178                                            to VGET in KQG$GET; linked in
  179                                            KQ$MBLK.DGVGLNK$; gated by
  180                                            KQ$CG.GATE.CG */
  181            2 DFHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  182                              /* DFHD$    : head of list of stations needing
  183                                            to FETCH; linked in
  184                                            KQ$MBLK.DFLNK$; gated by
  185                                            KQ$CG.GATE.CG. */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          6    
  186            2 BASEDELAY SBIN %INIT(0)%CHARTEXT('/**/'),
  187                              /* BASEDELAY: nonzero if someone is
  188                                            waiting on KCC$BASE. */
  189            2 DFRDFR$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  190                              /* DFRDFR$  : head of chain of defer
  191                                            blocks awaiting COMP via
  192                                            KCC$BASE. */
  193            2 EOFTIMEHD$ PTR %INIT(ADDR(NIL)) %CHARTEXT('/**/'),
  194                           /* EOFTIMEHD$  : head of chain of RBLKs for READs which
  195                                            have specified EOFTIME. Gated by
  196                                            KQ$CG.STREE.GATE. */
  197            2 EOFTIME UBIN HALF HALIGNED %INIT(0) %CHARTEXT('/**/'),
  198                           /* EOFTIME     : Number of seconds counted up since
  199                                            EOFTIME was zeroed. This counter is
  200                                            used to compare against KQ$RBLK.EOFTIME
  201                                            to determine if said RBLK should
  202                                            be timed out. Gated by KQ$CG.STREE.GATE */
  203            2 * UBIN HALF HALIGNED %INIT(0) %CHARTEXT('/**/'),
  204
  205
  206
  207               /****************************************
  208                *                                      *
  209                *        Garbage collector stuff       *
  210                *                                      *
  211                ****************************************/
  212            2 GARB,
  213                              /* GARB     : data for the garbage collector. */
  214              3 DELAY SBIN WORD %INIT(0)%CHARTEXT('/**/'),
  215                              /* DELAY    : code indicating why garb collector
  216                                            is waiting; if > 0 he is waiting
  217                                            on the clock. */
  218              3 STA BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  219                              /* STA      : set to indicate OMLH$ is a
  220                                            STA$, else is a QTN$. */
  221              3 DMIP BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  222                              /* DMIP     : delete message in progress. */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          7    
  223              3 RECYCLE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  224                              /* RECYCLE  : internal re-cycle flag. */
  225              3 INSRT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  226                              /* INSRT    : indicates we are doing INSRT
  227                                            (set) or SETLDA (reset). */
  228              3 CONERR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  229                              /* CONERR   : CONCATS returns this bit. */
  230              3 SQIP BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  231                              /* SQIP     : SQUISH in progress. */
  232              3 DELJ BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  233                              /* DELJ     : DODELMSG is deleting from the
  234                                            JNLD$ list. */
  235              3 * BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  236              3 TYPE UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  237                              /* TYPE     : type of garbage collection
  238                                            being performed (KQGT_XXXX#). */
  239              3 ACTCNT UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  240                              /* ACTCNT   : ACTCNT from some tree. */
  241              3 INDX UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  242                              /* INDX     : data block byte index to current
  243                                            MBLK. */
  244              3 JNLD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  245                              /* JNLD$    : head of messages that can't be
  246                                            deleted yet 'cause they require
  247                                            sending the CG_JNLD event and
  248                                            there's no memory available to
  249                                            do so. */
  250              3 TCOUNT SBIN %INIT(0)%CHARTEXT('/**/'),
  251                              /* TCOUNT   : count of messages from a SUPER
  252                                            MBLK's disc list read thus far;
  253                                            used to set MBLK.COUNT when the
  254                                            list is truncated due to a disc
  255                                            error. */
  256              3 MBLK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  257                              /* MBLK$    : pointer to current MBLK. */
  258              3 OMLH$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  259                              /* OMLH$    : STA$/QTN$ for owner of current
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          8    
  260                                            MLH. */
  261              3 SPHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  262                              /* SPHD$    : head of SPLIT list. */
  263              3 SPTL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  264                              /* SPTL$    : tail of SPLIT list. */
  265              3 SPLITCNT UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
  266                              /* SPLITCNT : count of SPLIT+SQUEEZE lists. */
  267              3 NCSTAMP UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
  268                              /* NCSTAMP  : stamp of FLINK DBLK of one
  269                                            we're working on. */
  270              3 NCDDA UBIN %INIT(0)%CHARTEXT('/**/'),
  271                              /* NCDDA    : DDA of above. */
  272              3 SCDDA UBIN %INIT(0)%CHARTEXT('/**/'),
  273                              /* SCDDA    : DDA of SPLIT DBLK. */
  274              3 SCSTAMP UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
  275                              /* SCSTAMP  : stamp of SPLIT DBLK. */
  276              3 * UBIN (27) UNAL %INIT(0)%CHARTEXT('/**/'),
  277              3 SPSTATE UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  278                              /* SPSTATE  : state of SPLIT process. */
  279              3 RELCNT SBIN %INIT(0)%CHARTEXT('/**/'),
  280                              /* RELCNT   : count of MBLKs released by GC. */
  281              3 PCSTAMP UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
  282                              /* PCSTAMP  : stamp of BLINK DBLK of one we're
  283                                            working on. */
  284              3 CCCOUNT UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
  285                              /* CCCOUNT  : count of MBLKs in current DBLK. */
  286              3 SQHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  287                              /* SQHD$    : head of SQUEEZE list. */
  288              3 DBLK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  289                              /* DBLK$    : current data blk */
  290              3 * (0:3) UBIN %INIT(0*0)%CHARTEXT('/**/'),
  291
  292
  293
  294               /****************************************
  295                *                                      *
  296                *               QUEUE                  *
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          9    
  297                *                                      *
  298                ****************************************/
  299            2 QUEUE,
  300                              /* QUEUE    : contains information specific
  301                                            to the QUEUE of non-directed
  302                                            messages.  GATE for the QUEUE
  303                                            is the gate in the Q-tree header. */
  304              3 QTREE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  305                              /* QTREE$   : points to header of QTREE,
  306                                            (either STREE or TTREE). */
  307              3 WCRL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  308                              /* WCRL$    : points to a list of RBLKs,
  309                                            containing all outstanding
  310                                            Q-wildcarded reads, that is,
  311                                            contains the RBLKs representing
  312                                            those outstanding reads which
  313                                            were wild-carded in the key
  314                                            that keys the Q-tree. */
  315              3 PLHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  316                              /* PLHD$    : head of list of Q-tree nodes
  317                                            in prio order (linked in
  318                                            KQ$QTN.PLINK$). */
  319              3 DELAY$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  320                              /* DELAY$   : head of list of delayed operatons. */
  321
  322                              /* The following flags' usage is parallel to
  323                                 that of the similarly-named ones in the
  324                                 MLH. */
  325              3 RUSR# UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  326                              /* RUSR#    : user number of user currently
  327                                            reading the queue. */
  328              3 BUSY,
  329                              /* BUSY     : flags indicating active processing
  330                                            that cannot allow writes. */
  331                4 RIP BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  332                              /* RIP      : the reader is running. */
  333                4 GIP BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          10   
  334                              /* GIP      : the garbage collector is running. */
  335              3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  336              3 GACT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  337                              /* GACT     : garbage collector waiting or running. */
  338              3 RQMEM BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  339                              /* RQMEM    : reader blocked for memory. */
  340              3 RQGC  BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  341                              /* RQGC     : reader waiting on GC after
  342                                            getting memory unblock. */
  343              3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  344
  345              3 * BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  346              3 * UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  347              3 DELAYDQ$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  348                              /* DELAYDQ$ : pointer to an MBLK or a STATION block
  349                                            being processed after being removed
  350                                            from the KQ$CG.QUEUE.DELAY$ list.      */
  351              3 MLH$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  352                              /* MLH$     : pointer to MLH containing the
  353                                            super MBLK on which the reader
  354                                            if REGed, when RQGC is set. */
  355              3 * UBIN %INIT(0)%CHARTEXT('/**/'),
  356
  357
  358
  359               /****************************************
  360                *                                      *
  361                *       Station & Msgtype TREES        *
  362                *                                      *
  363                ****************************************/
  364            %KQ_THDR (FPTN=TTREE,LVL=2,LAST=",",STCLASS=STCLASS);
  365                              /* TTREE    : message type tree header */
  366            %KQ_THDR (FPTN=STREE,LVL=2,LAST=",",STCLASS=STCLASS);
  367                              /* STREE    : station tree header */
  368            2 DCBHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  369                              /* DCBHD$   : head of list of DCB stations;
  370                                            threaded in KQ$STA.DCBLNK$;
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          11   
  371                                            gate is in station tree header. */
  372
  373
  374
  375               /****************************************
  376                *                                      *
  377                *           MISC    stuff              *
  378                *                                      *
  379                ****************************************/
  380            2 LNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  381                              /* LNK$     : link in chain of all active CGs. */
  382            2 * BIT(30) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  383
  384            2 CLOSING BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  385                              /* CLOSING  : set when last DCB is closing;
  386                                            prevents terms from connecting. */
  387            2 OPEN BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  388                              /* OPEN     : set if comgroup is open.
  389                                            Also is never set if not CTG'ed
  390                                            thereby keeping TERMINALs off. */
  391            2 RCVR BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  392                              /* RCVR     : set if comgroup recovery in progress */
  393            2 CLOCK BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  394                              /* CLOCK    : set if clock routines are to
  395                                            be called for this comgroup.  */
  396            2 XQTNLGL BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  397                              /* XQTNLGL  : xtra Q-tree nodes are legal;
  398                                            a copy of the appropriate one
  399                                            of AUCTL.XSTALGL/XTYPLGL. */
  400            2 XOTNLGL BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  401                              /* XOTNLGL  : xtra other tree nodes are legal;
  402                                            for the non-Q tree. */
  403            2 QISS BIT(36) %INIT('0'B)%CHARTEXT('/**/'),
  404                              /* QISS     : Q-tree is the station tree. */
  405            2 GATE,
  406                              /* GATE     : contains various gates */
  407              3 CG BIT(72) ALIGNED %INIT('1'B)%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          12   
  408                              /* CG       : gate for misc entire-CG operations. */
  409              3 MISC BIT(72) ALIGNED %INIT('1'B)%CHARTEXT('/**/'),
  410                              /* MISC     : another misc gate. */
  411            2 MSGID UBIN WORD %INIT(1)%CHARTEXT('/**/'),
  412                              /* MSGID    : next MSGID (gate is TTREE gate). */
  413            2 DELMSG$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  414                              /* DELMSG$  : head of messages to be deleted;
  415                                            gated by GATE.MISC. */
  416            2 PGTIME UBIN %INIT(0)%CHARTEXT('/**/'),
  417                              /* PGTIME   : time STATS.PGSI last changed. */
  418            2 MSGIDXT UBIN WORD %INIT(1)%CHARTEXT('/**/'),
  419                              /* MSGIDXT  : next MSGIDXT for BIGMXT (gate
  420                                            is TTREE gate). */
  421            2 * (0:1) UBIN %INIT(0*0)%CHARTEXT('/**/'),
  422
  423
  424
  425               /****************************************
  426                *                                      *
  427                *           AU      stuff              *
  428                *                                      *
  429                ****************************************/
  430            2 AUSTA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  431                              /* AUSTA$   : pointer to AU's station block,
  432                                            ADDR(NIL) if no AU */
  433            2 AU UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  434                              /* AU       : user number of AU, zero if none */
  435            2 AUSENDCNT UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  436                              /* AUSENDCNT : count of # of messages
  437                                             that are being sent to AU.
  438                                            This count is kept in order
  439                                            that the AU may examine it
  440                                            and not complete his discon-
  441                                            nect until it gets to 0. */
  442            2 FWUSR# UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  443                              /* FWUSR    : user number of current M$FWCG
  444                                            user. */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          13   
  445            2 * UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  446            2 FWHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  447                              /* FWHD$    : head of chain of guys waiting
  448                                            to do M$FWCG; gated by GATE.CG;
  449                                            linked in KQ$STA.RQLNK$. */
  450            2 HOLDSTA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  451                              /* HOLDSTA$ : pointer to 'hold' station. */
  452      %IF IFLG=0;
  453            %VLP$CGCP_V (FPTN=AUCTL,LVL=2,LAST=",");
  454       %ELSE;
  455            %VLP_CGCP (FPTN=AUCTL,STCLASS=STCLASS,LVL=2,LAST=",");
  456       %ENDIF;
  457                              /* AUCTL    : AU control parameters */
  458            %VLP_SETSTA (FPTN=SETSTA,LVL=2,STCLASS=STCLASS,LAST=",");
  459                              /* SETSTA   : default VLP_SETSTA */
  460       %IF IFLG=0;
  461            %VLR$CGSTATS_V (FPTN=STATS,LVL=2,LAST=",");
  462       %ELSE;
  463            %VLR_CGSTATS   (FPTN=STATS,STCLASS=STCLASS,LVL=2,LAST=",");
  464       %ENDIF;
  465            2 GORGOSTA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  466                              /* GORGOSTA$: pointer to '*GORGO' station
  467                                            used for saving AU events
  468                                            and by KQQ$ACT */
  469            2 JRNLSTA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  470                              /* JRNLSTA$ : pointer to journal station. */
  471            2 * (0:2) UBIN %INIT(0*0)%CHARTEXT('/**/'),
  472
  473
  474
  475               /****************************************
  476                *                                      *
  477                *           FILE    stuff              *
  478                *                                      *
  479                ****************************************/
  480            2 CFU$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  481                              /* CFU$     : pointer to CFU */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          14   
  482            2 XTX$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  483                              /* XTX$     : pointer to extent table */
  484            2 SETX UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  485                              /* SETX     : set table index */
  486            2 LASTUSER UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  487                              /* LASTUSER : User number of last DCB user */
  488            2 TRIGGERED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  489                            /* TRIGGERED : Whether or not DISKWARN has been
  490                                           sent to th AU.  Used so the AU
  491                                           wont get two messages in a row */
  492            2 * UBIN(8) UNAL %INIT(0)%CHARTEXT('/**/'),
  493                              /* Used to be - CGORG    : ORG of comgroup */
  494            2 NGAVAL UBIN %INIT(0)%CHARTEXT('/**/'),
  495                              /* NGAVAL   : Number grans left at end of file */
  496            2 UGRANS UBIN %INIT(0)%CHARTEXT('/**/'),
  497                              /* UGRANS   : Next disk address to allocate */
  498            2 ACB$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  499                              /* ACB$     : account block pointer. */
  500            2 HIGRANS UBIN %INIT(0)%CHARTEXT('/**/'),
  501                              /* was AUINFO$  : pointer to KQ_AUINFO for FPRG CGs  */
  502            2 JRNLFID$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  503                              /* JRNLFID$ : points to a DALIGNED
  504                                            VLP_JRNLFID - the comgroup's
  505                                            journal FID. */
  506            2 TRIGGER UBIN %INIT(2)%CHARTEXT('/**/'),
  507                             /*  TRIGGER : Value that amounts to the
  508                                 MAXIMUM (2,KQ$CG.AUCTL.DISKWARN*.2).
  509                                 If DISKWARN is TRIGGERED, when NGAVAL
  510                                 becomes TRIGGER greater than MAXPG+
  511                                 DISKWARN, TRIGGERED is reset to allow
  512                                 DISKWARN to happen again.              */
  513
  514
  515
  516               /****************************************
  517                *                                      *
  518                *           DATA cache stuff           *
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          15   
  519                *                                      *
  520                ****************************************/
  521            2 NDFRBLKS UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  522                              /* NDFRBLKS : number of defer blks we have */
  523            2 * UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  524            2 IOCNT UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  525                              /* IOCNT    : # I/Os currently in progress.
  526                                            Gated by KQ$CG.GATE.CG   */
  527            2 GETFLG UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  528                              /* GETFLG   : Flag to control space allocation */
  529            2 FREEDA UBIN(27) UNAL %INIT(0)%CHARTEXT('/**/'),
  530                              /* FREEDA   : disk address of first granule
  531                                            on the list of granules with
  532                                            free space.  */
  533            2 ADDFREE UBIN %INIT(0)%CHARTEXT('/**/'),  /* Gated by DTREE.GATE */
  534                              /* ADDFREE  : count of number of adds to
  535                                             the free disk chain that are
  536                                             currently in progress. */
  537
  538            2 DFRFREEHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  539                              /* DFRFREEHD$ : head ptr of free defer blocks list */
  540            %KQ_THDR (FPTN=DTREE,LVL=2,LAST=",",STCLASS=STCLASS);
  541                              /* DTREE    : disc cache tree header */
  542            2 FORCECNT UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  543                              /* FORCECNT : initially set to AUCTL.WRITECNT,
  544                                            decremented each time KQD$SQUEEZE
  545                                            is called.  When it reached 1,
  546                                            unwritten pages are written.
  547                                            Locked by KQ$CG.DTREE.GATE */
  548            2 * BIT(27) %INIT('0'B)%CHARTEXT('/**/'),
  549
  550            2 SHRINKCNT UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  551                              /* SHRINKCNT : number calls to SHRINK */
  552            2 SHRINKPGS UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  553                              /* SHRINKPGS : number pages released by shrink */
  554            2 MAXDATAPGS UBIN(18) UNAL %INIT(99)%CHARTEXT('/**/'),
  555                              /* MAXDATAPGS : max number of data pages
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          16   
  556                                              that will be allocated */
  557            2 CURDATAPGS UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  558                              /* CURDATAPGS : current data pages allocated */
  559            2 MINDATAPGS UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  560                              /* MINDATAPGS : min number of data pages
  561                                              to keep.  Not locked by any gate. */
  562            2 * UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  563            2 DATAFREE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  564                              /* DATAFREE$ : Ptr to core list of unused
  565                                             cache pages.  Only used when
  566                                             less than MINDATAPGS are in use. */
  567            2 AVAIL,
  568              3 HD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  569                              /* HD$      : Head of in-core data grans */
  570              3 TL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  571                              /* TL$      : tail of in-core data grans */
  572            2 IOHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  573                              /* IOHD$    : head of KQ$DFRBLK list for
  574                                           granules that are being read */
  575            2 IOTL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  576                              /* IOTL$    : tail of IOHD$ chain */
  577            2 NEEDPGHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  578                              /* NEEDPGHD$ : chain of KQ$DFRBLK blocks for
  579                                             granules that need to be read
  580                                             and also need a page to read
  581                                             into.  It is guaranteed that
  582                                             the number of granules in
  583                                             this list does not exceed the
  584                                             number of pages that have
  585                                             a non-zero USECNT. */
  586            2 NEEDPGTL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  587                              /* NEEDPGTL$ : tail of NEEDPGHD$ chain */
  588            2 NEEDPGCNT SBIN %INIT(0)%CHARTEXT('/**/'),
  589                              /* NEEDPGCNT : count of number of different
  590                                             granules in NEEDPGHD$ chain */
  591            %KQ_GRAN (FPTN=GRAN,LVL=2,LAST=",",STCLASS=STCLASS);
  592                              /* GRAN     : granule header */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          17   
  593            2 GETHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  594                              /* GETHD$   : Head of list of defer blocks
  595                                            that are for data space requests. */
  596            2 GETTL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  597                              /* GETTL$   : Tail of GETHD$ chain */
  598            2 IOQHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  599                         /* IOQHD$   : ptr to head of DFRBLK list of reads
  600                                       that need IOQ packets */
  601            2 IOQTL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  602                         /* IOQTL$   : ptr to tail of IOQHD$ list */
  603            2 DFRFREETL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  604                              /* DFRFREETL$ : tail ptr of free defer blocks list */
  605            2 * UBIN %INIT(0)%CHARTEXT('/**/');
  606
  607
  608
  609      %MEND;
  610      /********************************************************************
  611      *********************************************************************/
  612      /*D* NAME:         KQ_CTLGRAN
  613           PURPOSE:      To define the control granule structure
  614           DESCRIPTION:  The control granule is granule zero in a
  615                         comgroup.  It contains the context block
  616                         and whatever other information is needed
  617                         to be saved between opens.
  618      */
  619      %MACRO KQ_CTLGRAN (FPTN=KQ_CTLGRAN,STCLASS=STATIC);
  620
  621       %LSET LISTDIR='0'B;
  622       %LSET LISTEXP='1'B;
  623       %LSET LISTCOM='0'B;
  624       %LSET LISTSUB='1'B;
  625       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  626       %IF (SUBSTR(STR,0,6)='STATIC') OR
  627       (SUBSTR(STR,0,8)='CONSTANT') OR
  628       (SUBSTR(STR,0,3)='EXT');
  629       %LSET INIT=CHARTEXT('INIT');
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          18   
  630       %ELSE;
  631       %LSET INIT=CHARTEXT('/*');
  632       %ENDIF;
  633
  634      DCL 1 FPTN STCLASS DALIGNED,
  635
  636            %KQ_GRAN (FPTN=HDR,LVL=2,STCLASS=STCLASS,LAST=",");
  637                              /* HDR      : granule header */
  638            2 CTXX UBIN %INIT(0)%CHARTEXT('/**/'),
  639                              /* CTXX     : displacement to context block */
  640            2 CTXSIZ UBIN %INIT(0)%CHARTEXT('/**/'),
  641                              /* CTXSIZ   : # words reserved for context */
  642            2 RCVRDA UBIN %INIT(0)%CHARTEXT('/**/'),
  643                              /* RCVRDA   : disk addr of in-use recovery area */
  644            2 RCVRSIZ UBIN %INIT(0)%CHARTEXT('/**/'),
  645                              /* RCVRSIZ  : # granules in recovery area */
  646            2 RCVRTIME UBIN %INIT(0)%CHARTEXT('/**/'),
  647                              /* RCVRTIME : time of recovery */
  648            2 VERSION CHAR(4) UNAL %INIT('E03G')%CHARTEXT('/**/'),
  649                              /* VERSION  : text version of CP-6 system
  650                                            which created the comgroup. */
  651            2 PGTBL(0:%((KQM_MDPC#+1)*CGQ_CHUNK_SIZE)) BIT(1) %INIT('0'B*0)%CHARTEXT('/**/'),
  652            2 *(0:6) UBIN ALIGNED %INIT(0*0)%CHARTEXT('/**/');
  653
  654      %MEND;
  655      /********************************************************************
  656      *********************************************************************/
  657      /*D* NAME:         KQ_DBLK
  658           PURPOSE:      To define a data block header
  659           DESCRIPTION:  The data portion of a message resides in one or
  660                         more data blocks, each representing a segment of
  661                         the message (one segment is created for each
  662                         M$WRITE; successive writes specifying CONTINUE
  663                         create successive segments of the same message,
  664                         and each such segment points to the next).  A
  665                         data block always exists in some data granule;
  666                         when being accessed in memory, the block's granule
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          19   
  667                         is in the data disk cache.
  668
  669                         A data block consists of a header (defined by
  670                         KQ_DBLK), followed by the actual data).
  671
  672                         Data blks are allocated in 5 sizes : 32, 64, 128,
  673                         256, 512, and (1024-h) words where h is the size
  674                         of the data granule header.  Thus a segment cannot
  675                         exceed 1024-h-k words where k is the size of KQ_DBLK.
  676
  677                         Each data granule contains 5 free lists (by size);
  678                         if a data block is free or latch-free (see below),
  679                         it is on the appropriate list within its granule.
  680
  681                         A DBLK is in one of three states at a given time:
  682
  683                          1) FREE - available
  684
  685                          2) USED - in use
  686
  687                          3) LATCH-FREE - Normally, a DBLK is freed as soon
  688                              as the message it represents is read.  However,
  689                              when a read with latch is executed, the message
  690                              cannot be freed after the read until UNLATCH
  691                              is issued.  In order to avoid re-accessing the
  692                              data granule at UNLATCH time, a LATCH-FREE DBLK
  693                              instead contains enough information to enable
  694                              one to determine whether UNLATCH has been issued
  695                              yet; this info is inserted into the DBLK at
  696                              read time.  In a FREE DBLK, STA$ is ADDR(NIL);
  697                              in a LATCH-FREE DBLK, STA$ points to the KQ_STA
  698                              of the station which read the message.  Note that
  699                              all segments of a message read with latch have
  700                              this info in them.
  701      */
  702      %MACRO KQ_DBLK (FPTN=KQ_DBLK,STCLASS=STATIC,LAST=";");
  703
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          20   
  704       %LSET LISTDIR='0'B;
  705       %LSET LISTEXP='1'B;
  706       %LSET LISTCOM='0'B;
  707       %LSET LISTSUB='1'B;
  708       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  709       %IF (SUBSTR(STR,0,6)='STATIC') OR
  710       (SUBSTR(STR,0,8)='CONSTANT') OR
  711       (SUBSTR(STR,0,3)='EXT');
  712       %LSET INIT=CHARTEXT('INIT');
  713       %ELSE;
  714       %LSET INIT=CHARTEXT('/*');
  715       %ENDIF;
  716
  717      DCL 1 FPTN STCLASS DALIGNED,
  718            2 STAMP UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  719                              /* STAMP    : each segment contains the same
  720                                            value for STAMP, taken from
  721                                            KQ_MBLK.STAMP. */
  722            2 DSIZE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  723                              /* DSIZE     : byte size of this segment. */
  724            2 FLNKDA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  725                              /* FLNKDA   : disc address of next segment,
  726                                            0 if none. */
  727            2 STA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  728                              /* STA$     : ADDR(NIL) unless this segment
  729                                            is LATCH-FREE, in which case
  730                                            points to the latching station. */
  731            2 LATCHCNT UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  732                              /* LATCHCNT : a copy of LATCHCNT in the reading
  733                                            station's KQ_STA when the data was
  734                                            latched. */
  735            2 ACTIVE BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  736                              /* ACTIVE   : set if block is active */
  737            2 LOCK BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  738                              /* LOCK     : set if block is locked */
  739            2 LREL BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  740                              /* LREL     : set if block is latch-released */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          21   
  741            2 * BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  742
  743            2 MBLK BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  744                              /* MBLK     : set if the last words of the
  745                                            block contain a REDUNDANT MBLK. */
  746            2 * BIT(2) %INIT('0'B)%CHARTEXT('/**/'),
  747
  748            2 TYP UBIN(2) UNAL %INIT(0)%CHARTEXT('/**/'),
  749                              /* TYP      : Type of item (data, station, etc */
  750            2 LINKX UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  751                              /* LINKX    : link in list of free DBLKS in
  752                                            this granule. */
  753            2 SIZW UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  754                              /* SIZW     : size of this block in words */
  755            2 ACTCNT UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  756                              /* ACTCNT    : STREE activity counter */
  757            2 * BIT(36) %INIT('555555555555'O)%CHARTEXT('/**/')LAST
  758      %MEND;
  759      /********************************************************************
  760      *********************************************************************/
  761      /*D* NAME:         KQ_DFRBLK
  762           PURPOSE:      To define the format of a defer block
  763           DESCRIPTION:  Defer blocks are used to remember operations
  764                         that must be defered - such as fetching data
  765                         blocks that are not in core, allocating data
  766                         space when none is available in core, and
  767                         deleting space that is not in core.
  768      */
  769      %MACRO KQ_DFRBLK (FPTN=KQ_DFRBLK,STCLASS=STATIC);
  770
  771       %LSET LISTDIR='0'B;
  772       %LSET LISTEXP='1'B;
  773       %LSET LISTCOM='0'B;
  774       %LSET LISTSUB='1'B;
  775       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  776       %IF (SUBSTR(STR,0,6)='STATIC') OR
  777       (SUBSTR(STR,0,8)='CONSTANT') OR
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          22   
  778       (SUBSTR(STR,0,3)='EXT');
  779       %LSET INIT=CHARTEXT('INIT');
  780       %ELSE;
  781       %LSET INIT=CHARTEXT('/*');
  782       %ENDIF;
  783
  784      DCL 1 FPTN STCLASS DALIGNED,
  785            2 LNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  786                              /* LNK$     : ptr to next block */
  787            2 CODE UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  788                              /* CODE     : type of operation */
  789            2 ERRCODE UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  790                              /* ERRCODE  : error code if error */
  791            2 GO BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  792                              /* GO       : set if DEFERGO has been called */
  793            2 EVNT BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  794                              /* EVNT     : set if event has occurred */
  795            2 ABORT BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  796                              /* ABORT    : abort this operation */
  797            2 GFLG BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  798                              /* GFLG     : set if this GET request
  799                                            existed at the beginning of
  800                                            a GET cycle.  */
  801            2 * BIT(5) %INIT('0'B)%CHARTEXT('/**/'),
  802            2 USR UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  803                              /* USR      : user number */
  804            2 DA UBIN %INIT(0)%CHARTEXT('/**/'),
  805                              /* DA       : disk address */
  806            2 DBLK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  807                              /* DBLK$    : returned data block ptr */
  808            2 DBLK REDEF DBLK$ UBIN,
  809                              /* DBLK     : UBIN redef of DBLK$ */
  810            2 DDA UBIN %INIT(0)%CHARTEXT('/**/'),
  811                              /* DDA      : data disk address if GET */
  812            2 EPTR$ EPTR %INIT(ENTADDR(NIL))%CHARTEXT('/**/'),
  813                              /* EPTR$    : routine to call when finished */
  814            2 INFO UBIN %INIT(0)%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          23   
  815                              /* INFO     : info for EPTR$ routine */
  816            2 INFO$ REDEF INFO PTR,
  817                              /* INFO$    : redef of INFO */
  818            2 DGRAN$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/');
  819                              /* DGRAN$   : data granule pointer */
  820      %MEND;
  821      /********************************************************************
  822      *********************************************************************/
  823      /*D* NAME:         KQ_DFRPARM
  824           PURPOSE:      To define the format of a defer parameter block
  825           DESCRIPTION:  Defer parameter blocks are used to pass information
  826                         about defered operations.
  827      */
  828      %MACRO KQ_DFRPARM (FPTN=KQ_DFRPARM,STCLASS=STATIC);
  829
  830       %LSET LISTDIR='0'B;
  831       %LSET LISTEXP='1'B;
  832       %LSET LISTCOM='0'B;
  833       %LSET LISTSUB='1'B;
  834       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  835       %IF (SUBSTR(STR,0,6)='STATIC') OR
  836       (SUBSTR(STR,0,8)='CONSTANT') OR
  837       (SUBSTR(STR,0,3)='EXT');
  838       %LSET INIT=CHARTEXT('INIT');
  839       %ELSE;
  840       %LSET INIT=CHARTEXT('/*');
  841       %ENDIF;
  842
  843      DCL 1 FPTN STCLASS ALIGNED,
  844            2 INFO UBIN %INIT(0)%CHARTEXT('/**/'),
  845                              /* INFO     : information passed from original caller */
  846            2 INFO$ REDEF INFO PTR,
  847                              /* INFO$    : redef of INFO */
  848            2 DBLK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  849                              /* DBLK$    : ptr to data block */
  850            2 DBLK REDEF DBLK$ UBIN,
  851                              /* DBLK     : UBIN redef of DBLK$ */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          24   
  852            2 DDA UBIN %INIT(0)%CHARTEXT('/**/'),
  853                              /* DDA      : DDA of data gotten */
  854            2 DFR$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  855                              /* DFR$     : ptr to defer block */
  856            2 ERR UBIN %INIT(0)%CHARTEXT('/**/');
  857                              /* ERR      : error code, zero if no error */
  858      %MEND;
  859      /********************************************************************
  860      *********************************************************************/
  861      /*D* NAME:         KQ_DGRAN
  862           PURPOSE:      To define the format of a data granule header
  863           DESCRIPTION:  A data granule contains data blocks.  The
  864                         granule header contains the information relative
  865                         to the free and used data blocks within the granule.
  866      */
  867      %MACRO KQ_DGRAN (FPTN=KQ_DGRAN,STCLASS=STATIC);
  868
  869       %LSET LISTDIR='0'B;
  870       %LSET LISTEXP='1'B;
  871       %LSET LISTCOM='0'B;
  872       %LSET LISTSUB='1'B;
  873       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  874       %IF (SUBSTR(STR,0,6)='STATIC') OR
  875       (SUBSTR(STR,0,8)='CONSTANT') OR
  876       (SUBSTR(STR,0,3)='EXT');
  877       %LSET INIT=CHARTEXT('INIT');
  878       %ELSE;
  879       %LSET INIT=CHARTEXT('/*');
  880       %ENDIF;
  881
  882      DCL 1 FPTN STCLASS DALIGNED,
  883            %KQ_GRAN (FPTN=HDR,LVL=2,STCLASS=STCLASS,LAST=",");
  884                              /* HDR      : granule header */
  885            %KQ_BTN (FPTN=BTN,LVL=2,LAST=",",STCLASS=STCLASS);
  886                              /* DTREE    : data cache tree node */
  887            2 USECNT SBIN %INIT(0)%CHARTEXT('/**/'),
  888                              /* USECNT   : number of users of granule */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          25   
  889            2 AVAILX UBIN %INIT(0)%CHARTEXT('/**/'),
  890                              /* AVAILX   : index of first unused DBLK
  891                                            in the unsorted/unbuddied list */
  892            2 BUDDYX UBIN %INIT(0)%CHARTEXT('/**/'),
  893                              /* BUDDYX   : index of first unused DBLK in the
  894                                            sorted/buddied list */
  895            2 BLINK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  896                              /* BLINK$   : ptr to prev gran on in-core list */
  897            2 FLINK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  898                              /* FLINK$   : ptr to next gran on in-core list */
  899            2 BYPASSCNT SBIN %INIT(0)%CHARTEXT('/**/'),
  900                              /* BYPASSCNT : always set to 0 during granule
  901                                            read as of B02. Not used for any
  902                                            function as of B02. */
  903            2 WRDSAVAIL SBIN %INIT(0)%CHARTEXT('/**/'),
  904                              /* WRDSAVAIL : # words avail in gran
  905                                 A DBLK that is release by a call to
  906                                 KQD$LREL, is considered AVAILable but
  907                                 Not Free.  See comments in KQD$DBLK.  */
  908            2 ACTCNT SBIN %INIT(0)%CHARTEXT('/**/'),
  909                              /* ACTCNT   : count of number of uses */
  910            2 FREEFLINK UBIN %INIT(0)%CHARTEXT('/**/'),
  911                              /* FREEFLINK : next gran on emptylist */
  912            2 TIME UBIN %INIT(0)%CHARTEXT('/**/'),
  913                              /* TIME : UTS that granule was last written
  914                                        or brought into core.  Used to
  915                                        determine if it is time to write
  916                                        it out. */
  917            2 DFR$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  918                              /* DFR$     : Ptr to defer block used in
  919                                            write of this granule */
  920            2 PASS UBIN %INIT(0)%CHARTEXT('/**/'),
  921                              /* PASS     : used by KQD$SQUEEZE to determine
  922                                            if this granule has already
  923                                            been looked at.  */
  924            2 WRDSFREE  SBIN %INIT(0)%CHARTEXT('/**/'),
  925                              /* WRDSFREE  : # words free  in gran.
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          26   
  926                                 A DBLK that is release by a call to
  927                                 KQD$LREL, is considered AVAILable but
  928                                 Not Free.  See comments in KQD$DBLK.  */
  929            2 *(0:7) UBIN %INIT(0*0)%CHARTEXT('/**/');
  930      %MEND;
  931      /********************************************************************
  932      *********************************************************************/
  933      /*D* NAME:         KQ$DPTR
  934           PURPOSE:      To define the structure of delay list links
  935           DESCRIPTION:  Each link is a pointer, plus FLGS, plus a CODE
  936                         field identifying the type of object being linked
  937                         to.
  938      */
  939      %MACRO KQ$DPTR (FPTN=KQ$DPTR,STCLASS=BASED);
  940
  941       %LSET LISTDIR='0'B;
  942       %LSET LISTEXP='1'B;
  943       %LSET LISTCOM='0'B;
  944       %LSET LISTSUB='1'B;
  945       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  946       %IF (SUBSTR(STR,0,6)='STATIC') OR
  947       (SUBSTR(STR,0,8)='CONSTANT') OR
  948       (SUBSTR(STR,0,3)='EXT');
  949       %LSET INIT=CHARTEXT('INIT');
  950       %ELSE;
  951       %LSET INIT=CHARTEXT('/*');
  952       %ENDIF;
  953
  954      DCL 1 FPTN STCLASS ALIGNED,
  955            2 DISP UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
  956                              /* DISP     : The normal word displacement
  957                                            part of a pointer. */
  958
  959            2 X UNAL,
  960                              /* X        : The extra portions - 6 bits
  961                                            in length. */
  962
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          27   
  963              3 FLGS BIT(3) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  964                              /* FLGS     : Special flags. */
  965
  966              3 CODE UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
  967                              /* CODE     : KQRA_XXXX# identifying the
  968                                            type of thing pointed to. */
  969
  970            2 SEGID BIT(12) UNAL %INIT('0'B)%CHARTEXT('/**/');
  971      %MEND;
  972      /********************************************************************
  973      ********************************************************************/
  974      /********************************************************************
  975      *********************************************************************/
  976      /*D* NAME:         KQ_FWP
  977           PURPOSE:      To define the parameters passed between KQF$FWCG
  978                         and KQL$LIST
  979           DESCRIPTION:  Passed to KQL$LIST by KQF$FWCG; passed to
  980                         KQF$CHKMSG/KQF$GOTMSG by KQL$LIST.
  981      */
  982      %MACRO KQ_FWP (FPTN=KQ_FWP,STCLASS=STATIC);
  983
  984       %LSET LISTDIR='0'B;
  985       %LSET LISTEXP='1'B;
  986       %LSET LISTCOM='0'B;
  987       %LSET LISTSUB='1'B;
  988       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  989       %IF (SUBSTR(STR,0,6)='STATIC') OR
  990       (SUBSTR(STR,0,8)='CONSTANT') OR
  991       (SUBSTR(STR,0,3)='EXT');
  992       %LSET INIT=CHARTEXT('INIT');
  993       %ELSE;
  994       %LSET INIT=CHARTEXT('/*');
  995       %ENDIF;
  996
  997      DCL 1 FPTN STCLASS DALIGNED,
  998
  999                        /*****************************************
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          28   
 1000                         *                                       *
 1001                         *       Params passed to KQL$XFFIND     *
 1002                         *                                       *
 1003                         *****************************************/
 1004
 1005            2 TIMCHK BIT(72) DALIGNED %INIT('0'B)%CHARTEXT('/**/'),
 1006                              /* TIMCHK   : used for calling KQX$CHKTIME. */
 1007
 1008            2 MYSTA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1009                              /* MYSTA$   : pointer to KQ$STA of M$FWCG
 1010                                            user. */
 1011
 1012            2 NODE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1013                              /* NODE$    : pointer to target station for
 1014                                            KQL$DFFIND; pointer to Q-tree
 1015                                            node for KQL$QFFIND. */
 1016
 1017            2 RBLK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1018                              /* RBLK$    : pointer to RBLK describing the
 1019                                            qualifying parameters. */
 1020
 1021            2 FWCGS$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1022                              /* FWCGS$   : pointer to station block of
 1023                                            the *FWCG station. */
 1024
 1025            2 FC SBIN %INIT(0)%CHARTEXT('/**/'),
 1026                              /* FC       : function code -
 1027                                            =0  - none
 1028                                            <0  - delete
 1029                                            >0  - reattr      */
 1030
 1031            2 TELLME BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1032                              /* TELLME   : KQF$GOTMSG/KQF$CHKMSG needs
 1033                                            to be called (must be set if
 1034                                            FC > 0). */
 1035
 1036            2 TOOKIT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          29   
 1037                              /* TOOKIT   : set by KQF$CHKMSG/KQF$GOTMSG
 1038                                            if the message qualifies; reset
 1039                                            else. */
 1040
 1041                        /*****************************************
 1042                         *                                       *
 1043                         *      Params passed to KQF$XXXMSG      *
 1044                         *                                       *
 1045                         *****************************************/
 1046
 1047            2 REGOK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1048                              /* REGOK    : set if KQF$GOTMSG is permitted
 1049                                            to REG for a DBLK; if reset,
 1050                                            then he must ALTRET if he needs
 1051                                            to REG (he will be called back
 1052                                            later with REGOK set). */
 1053
 1054            2 * BIT(28) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1055
 1056                        /*****************************************
 1057                         *                                       *
 1058                         *     Pass-thru stuff for KQF$XXXMSG    *
 1059                         *                                       *
 1060                         *****************************************/
 1061
 1062            2 EXMPTSTAR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1063                              /* EXMPTSTAR : VLP_SCGMA.EXMPTSTAR */
 1064
 1065            2 GETFIRST BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1066                              /* GETFIRST : Stuff ONEATTR first time. */
 1067
 1068            2 INFORM BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1069                              /* INFORM   : Build *AUEV informational msg. */
 1070
 1071            2 DI BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1072                              /* DI       : KQD$FETCHR failed - return E$DI */
 1073
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          30   
 1074            2 GOTNEXT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1075                              /* GOTNEXT  : Got NEXTDDA but FETCH failed. */
 1076
 1077            2 FOUND UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 1078                              /* FOUND    : Count of messages found. */
 1079
 1080            2 MSGIDXT UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 1081                              /* MSGIDXT  : Wildcard indicator. */
 1082
 1083            2 DBLK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1084                              /* DBLK$    : Ptr to current DBLK. */
 1085            2 STAMP REDEF DBLK$ UBIN,
 1086                              /* STAMP    : UBIN redef of DBLK$. */
 1087
 1088            2 DDA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 1089                              /* DDA      : Disk address of DBLK$. */
 1090
 1091            2 NEXTDDA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 1092                              /* NEXTDDA  : DDA of next DBLK. */
 1093
 1094            2 DATA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1095                              /* DATA$    : Ptr to current insertion point. */
 1096
 1097            2 MAXDATA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1098                              /* MAXDATA$ : Limit of DATA$. */
 1099
 1100            2 SRA_$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1101                              /* SRA_$    : Ptr to REATTR VLP_SCGMA. */
 1102
 1103            2 REATTR_$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1104                              /* REATTR_$ : Ptr to REATTR VLP_CGMA. */
 1105
 1106            2 CRITERIA_$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1107                              /* CRITERIA_$ : Ptr to CRITERIA VLP_CGMA. */
 1108
 1109            2 ONEATTR_$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1110                              /* ONEATTR_$:  Ptr to ONEATTR VLP_CGMA. */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          31   
 1111
 1112            2 * (0:3) UBIN WORD;
 1113                              /* Spare */
 1114
 1115      %MEND;
 1116      /********************************************************************
 1117      *********************************************************************/
 1118      /*D* NAME:         KQ_GRAN
 1119           PURPOSE:      To define the granule header
 1120           DESCRIPTION:  Every granule in the CG file has a 3-word header
 1121                         that is described by this structure.
 1122      */
 1123      %MACRO KQ_GRAN (FPTN=KQ_GRAN,
 1124                      STCLASS=STATIC,
 1125                      LVL=1,
 1126                      PTYP=0,
 1127                      LAST=";");
 1128
 1129       %LSET LISTDIR='0'B;
 1130       %LSET LISTEXP='1'B;
 1131       %LSET LISTCOM='0'B;
 1132       %LSET LISTSUB='1'B;
 1133       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1134       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1135       (SUBSTR(STR,0,8)='CONSTANT') OR
 1136       (SUBSTR(STR,0,3)='EXT');
 1137       %LSET INIT=CHARTEXT('INIT');
 1138       %ELSE;
 1139       %LSET INIT=CHARTEXT('/*');
 1140       %ENDIF;
 1141
 1142       %IF LVL=1;
 1143      DCL 1 FPTN STCLASS ALIGNED,
 1144       %ELSE;
 1145          %LVL FPTN ALIGNED,
 1146       %ENDIF;
 1147            %(LVL+1) STAMP,
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          32   
 1148                              /* STAMP    : the granule stamp */
 1149              %(LVL+2) HASH UBIN(27) UNAL %INIT(0)%CHARTEXT('/**/'),
 1150                              /* HASH     : file hash from DCB */
 1151              %(LVL+2) GMOD UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 1152                              /* GMOD     : low 9 bits of file-relative
 1153                                            disc address of this granule */
 1154            %(LVL+1) * BIT(9) %INIT('0'B)%CHARTEXT('/**/'),
 1155            %(LVL+1) FORCEOUT BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 1156                              /* FORCEOUT : write this gran as soon as possible */
 1157            %(LVL+1) ADDFREE BIT(1)%INIT('0'B)%CHARTEXT('/**/'),
 1158                              /* ADDFREE  : set if this write is at front of free list */
 1159            %(LVL+1) WRITE BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 1160                              /* WRITE    : set if being written */
 1161
 1162            %(LVL+1) EMPTYLIST BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 1163                              /* EMPTYLIST: set if on empty-gran chain */
 1164            %(LVL+1) CHAIN BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 1165                              /* CHAIN    : set if on a chain */
 1166            %(LVL+1) UPD BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 1167                              /* UPD      : set if granule modified */
 1168            %(LVL+1) %CHARTEXT('PTYP ') UBIN(3) UNAL %INIT(PTYP)%CHARTEXT('/**/'),
 1169                              /* PTYP     : page type */
 1170            %(LVL+1) HDR BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 1171                              /* HDR      : part of granule header, always
 1172                                            zero to inicate 2-word header */
 1173            %(LVL+1) GTYP UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
 1174                              /* GTYP     : granule type */
 1175                              /* TYP      : type of granule */
 1176            %(LVL+1) ORG UBIN(4) UNAL %INIT(0)%CHARTEXT('/**/'),
 1177                              /* ORG      : organization of file */
 1178            %(LVL+1) AVAIL UBIN(10) UNAL %INIT(0)%CHARTEXT('/**/'),
 1179                              /* AVAIL    : # words avail */
 1180            %(LVL+1) SELF$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1181                              /* SELF$    : ptr to this page */
 1182            %(LVL+1) WRITEUTS UBIN %INIT(0)%CHARTEXT('/**/') LAST
 1183                              /* WRITEUTS : UTS when granule last written */
 1184      %MEND;
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          33   
 1185      /********************************************************************
 1186      *********************************************************************/
 1187      /*D* NAME:         KQ_LOGENT
 1188           PURPOSE:      To define an entry in the logging buffers
 1189      */
 1190      %MACRO KQ_LOGENT (FPTN=KQ_LOGENT,STCLASS=STATIC,LVL=1,LAST=";");
 1191
 1192       %LSET LISTDIR='0'B;
 1193       %LSET LISTEXP='1'B;
 1194       %LSET LISTCOM='0'B;
 1195       %LSET LISTSUB='1'B;
 1196       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1197       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1198       (SUBSTR(STR,0,8)='CONSTANT') OR
 1199       (SUBSTR(STR,0,3)='EXT');
 1200       %LSET INIT=CHARTEXT('INIT');
 1201       %ELSE;
 1202       %LSET INIT=CHARTEXT('/*');
 1203       %ENDIF;
 1204
 1205      %IF LVL=1;
 1206      DCL 1 FPTN STCLASS ALIGNED,
 1207      %ELSE;
 1208       %LVL FPTN ALIGNED,
 1209      %ENDIF;
 1210      /**/
 1211            %(LVL+1) CGX UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
 1212                  /* CGX : Index to context block */
 1213            %(LVL+1) HW1 UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
 1214                  /* HW1 : A half-word */
 1215            %(LVL+1) TIME UBIN %INIT(0)%CHARTEXT('/**/'),
 1216                  /* TIME : Time entry made */
 1217            %(LVL+1) TYP UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 1218                  /* TYP : Type of entry - KQLOG_xx */
 1219            %(LVL+1) BYT UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 1220                  /* BYT : A byte field */
 1221            %(LVL+1) HW2 UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          34   
 1222                  /* HW2 : A half-word field */
 1223             %(LVL+1) W1 UBIN %INIT(0)%CHARTEXT('/**/'),
 1224                  /* W1 : A word field */
 1225            %(LVL+1) W2 UBIN %INIT(0)%CHARTEXT('/**/'),
 1226                  /* W2 : A word field */
 1227            %(LVL+1) PLUGH,
 1228               %(LVL+2) RET(0:3) UBIN(18) UNAL %INIT(0*0)%CHARTEXT('/**/'),
 1229                  /* PLUGH.RET : Four return addresses from the PLUGH */
 1230               %(LVL+2) INTRET UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
 1231                  /* PLUGH.INTRET : Ret addr from internal procedure */
 1232               %(LVL+2) X2 UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/') LAST
 1233      %MEND;
 1234      /********************************************************************
 1235      *********************************************************************/
 1236      /*D* NAME:         KQ_LOGHDR
 1237           PURPOSE:      To define headers of logging buffers
 1238      */
 1239      %MACRO KQ_LOGHDR (FPTN=KQ_LOGHDR,STCLASS=STATIC);
 1240
 1241       %LSET LISTDIR='0'B;
 1242       %LSET LISTEXP='1'B;
 1243       %LSET LISTCOM='0'B;
 1244       %LSET LISTSUB='1'B;
 1245       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1246       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1247       (SUBSTR(STR,0,8)='CONSTANT') OR
 1248       (SUBSTR(STR,0,3)='EXT');
 1249       %LSET INIT=CHARTEXT('INIT');
 1250       %ELSE;
 1251       %LSET INIT=CHARTEXT('/*');
 1252       %ENDIF;
 1253
 1254      DCL 1 FPTN STCLASS ALIGNED,
 1255            2 LINK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1256                 /* LINK$ : Ptr to next buffer in chain */
 1257            2 CURX UBIN %INIT(0)%CHARTEXT('/**/'),
 1258                 /* CURX : Word index to next available word */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          35   
 1259            2 SIZ UBIN %INIT(0)%CHARTEXT('/**/');
 1260                 /* SIZ : Size of buffer in words */
 1261      %MEND;
 1262      /********************************************************************
 1263      *********************************************************************/
 1264      /*D* NAME:         KQ_MBLK
 1265           PURPOSE:      To define a message block
 1266           DESCRIPTION:  Each message in the CG is defined by an MBLK,
 1267                         which contains the message attributes, and
 1268                         a pointer to the message data. */
 1269      %MACRO KQ_MBLK (FPTN=KQ_MBLK,STCLASS=STATIC,SUPR=0);
 1270
 1271       %LSET LISTDIR='0'B;
 1272       %LSET LISTEXP='1'B;
 1273       %LSET LISTCOM='0'B;
 1274       %LSET LISTSUB='1'B;
 1275       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1276       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1277       (SUBSTR(STR,0,8)='CONSTANT') OR
 1278       (SUBSTR(STR,0,3)='EXT');
 1279       %LSET INIT=CHARTEXT('INIT');
 1280       %ELSE;
 1281       %LSET INIT=CHARTEXT('/*');
 1282       %ENDIF;
 1283
 1284      DCL 1 FPTN STCLASS DALIGNED,
 1285               /* WARNING!! KQX$SLIDE knows an MBLK is 16 words long */
 1286            2 LNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1287                              /* LNK$     : link on whatever chain it's on */
 1288
 1289            2 DBLK$ REDEF LNK$ PTR,
 1290                              /* DBLK$    : when a message is being PUT
 1291                                            into the comgroup from a
 1292                                            TERMINAL, contains pointer to
 1293                                            DBLK so it can be UNLOCKed when
 1294                                            xfer complete (TERMs only). */
 1295
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          36   
 1296            2 DFLNK$ REDEF LNK$ PTR,
 1297                              /* DFLNK$   : link in KQ$CG.DFHD$ chain when
 1298                                            station is waiting on the clock
 1299                                            to do a FETCH. */
 1300
 1301            2 DGVGLNK$ REDEF LNK$ PTR,
 1302                              /* DGVGLNK$ : when a terminal is waiting to
 1303                                            VGET for a GET operation, points
 1304                                            to the next such station. (TERMs only). */
 1305
 1306            2 PRIO UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 1307                              /* PRIO     : prio of msg.  For a super MBLK,
 1308                                            PRIO is the highest prio of the
 1309                                            represented MBLKs. */
 1310
 1311            2 STAMP UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 1312                              /* STAMP    : For an ordinary MBLK, is the
 1313                                            stamp to be found in all DBLKs.
 1314                                            For a super MBLK in memory, is
 1315                                            the stamp to be found in the
 1316                                            first DBLK (DDA). */
 1317
 1318            2 KEY1 CHAR(8) ALIGNED %INIT(' ')%CHARTEXT('/**/'),
 1319                              /* KEY1     : ORIGIN STATION or MSG TYP */
 1320
 1321            2 SDA REDEF KEY1 ALIGNED,
 1322                              /* SDA      : super MBLK DDAs. */
 1323              3 LDA UBIN,
 1324                              /* LDA      : last disc address of DBLK chain
 1325                                            headed by DDA. */
 1326              3 CCDDA UBIN,
 1327                              /* CCDDA    : DDA of current chunk. */
 1328
 1329            2 KEY2 CHAR(8) ALIGNED %INIT(' ')%CHARTEXT('/**/'),
 1330                              /* KEY2     : ORIGIN STATION or MSG TYP :
 1331                                            if the Q-tree is the station
 1332                                            tree then KEY1=OS KEY2=MT;
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          37   
 1333                                            if the Q-tree is the MTYP
 1334                                            tree then KEY1=MT KEY2=OS;
 1335                                            thus KEY2 is always the extra
 1336                                            qualifier when scanning an MBLK
 1337                                            list which hangs off a Q-tree
 1338                                            node.
 1339
 1340                                            For a super MBLK, KEY1 (resp KEY2)
 1341                                            is equal to the KEY1 (resp KEY2) of
 1342                                            all represented MBLKs if KEY1ALL
 1343                                            (resp KEY2ALL) is set.  If
 1344                                            KEY1VALID is reset then the
 1345                                            KEY1 area is really SDA.
 1346                                            If KEY2VALID is reset then the
 1347                                            KEY2 area is really XSP. */
 1348
 1349            2 XSP REDEF KEY2 ALIGNED,
 1350                              /* XSP      : xtra params for SUPER MBLKs. */
 1351
 1352              3 MREQ$ PTR,
 1353                              /* MREQ$    : pointer to acquired MBLK or
 1354                                            ADDR(NIL) if memory request is
 1355                                            complete, else is request link. */
 1356
 1357              3 SLNK$ REDEF MREQ$ PTR,
 1358                              /* SLNK$    : link in KQ$CG.SRQHD$ list when
 1359                                            waiting for the clock. */
 1360
 1361              3 * UBIN,
 1362
 1363
 1364            2 DDA UBIN %INIT(0)%CHARTEXT('/**/'),
 1365                              /* DDA      : First disc address of the data
 1366                                            represented by this ordinary
 1367                                            or super MBLK.  For a standard
 1368                                            MBLK, is zero if MSGSIZE=0, or
 1369                                            the data was written from the
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          38   
 1370                                            writer's buffer. */
 1371
 1372            2 UTS UBIN %INIT(0)%CHARTEXT('/**/'),
 1373                              /* UTS      : UTS of arrival.  For a super MBLK,
 1374                                            UTS is the arrival time of the
 1375                                            youngest of the represented MBLKs
 1376                                            having prio KQ_MBLK.PRIO.
 1377                                            The resolution of UTS is 10
 1378                                            milliseconds.  The extension
 1379                                            of UTS is STAMP, which has a
 1380                                            resolution of 1 microsecond. */
 1381
 1382            2 SUPER BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1383                              /* SUPER    : set to indicate a super MBLK. */
 1384
 1385
 1386      %IF SUPR=0;
 1387               /*****************************
 1388                *   Regular MBLK only       *   ( 8 words )
 1389                *****************************/
 1390
 1391            2 LATCH BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1392                              /* LATCH    : LATCH specified on this write.
 1393                                            (DCBs only). */
 1394
 1395            2 STAR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1396                              /* STAR     : set if MSGTYP begins with '*'. */
 1397
 1398            2 JRNLD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1399                              /* JRNLD    : generate JOURNAL delete message
 1400                                            when this message is deleted. */
 1401
 1402            2 FC UBIN(5) UNAL %INIT(0)%CHARTEXT('/**/'),
 1403                              /* FC       : IOQ function code specified by
 1404                                            DCB originator of message. */
 1405
 1406            2 DVE UNAL,
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          39   
 1407                              /* DVE      : stuff to pass to reader. */
 1408              3 DVBYTE BIT(9) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1409                              /* DVBYTE   : DVBYTE to pass to reader. */
 1410              3 EOMCHAR CHAR(1) UNAL %INIT(' ')%CHARTEXT('/**/'),
 1411                              /* EOMCHAR  : EOMCHAR to pass to reader. */
 1412              3 VFC REDEF EOMCHAR CHAR(1) UNAL,
 1413                              /* VFC      : VFC is the VFC character.  If
 1414                                            DVBYTE.VFC is set then the msg
 1415                                            has VFC.  When a TERM submits
 1416                                            a msg, VFC is always the first
 1417                                            byte of the record, and thus
 1418                                            this location contains EOMCHAR.
 1419                                            When a TERM reads a record,
 1420                                            VFC must appear in this location,
 1421                                            and is extracted from the 1st
 1422                                            char of the record.
 1423                                            When a DCB reads a record, VFC
 1424                                            must be the first char of the
 1425                                            record.  When a DCB writes a
 1426                                            record, VFC appears in N$REQ.DVE.VFC.
 1427                                            It is initially copied into
 1428                                            KQ$MBLK.DVE.VFC.  Then if the
 1429                                            record is being written to a
 1430                                            TERM directly (KQG$GOTMWB),
 1431                                            it is just left there since that's
 1432                                            how the TERM wants it.  If, on
 1433                                            the other hand, the record gets
 1434                                            put into a user's buffer or into
 1435                                            a DBLK, VFC must be tacked onto
 1436                                            the front of the buffer. Summary:
 1437                                            o TERMs write VFC in the data
 1438                                            o TERMs read  VFC in DVE
 1439                                            o DCBs  write VFC in DVE
 1440                                            o DCBs  read  VFC in the data
 1441                                            o a msg in the comgroup (i.e. in
 1442                                              a DBLK) has VFC in the data. */
 1443
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          40   
 1444            2 JOURNAL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1445                              /* JOURNAL  : this message is to be journaled.      */
 1446
 1447            2 FORCECONT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1448                              /* FORCECONT: set if the msgtype was
 1449                                            a ONEREPORT guy, so CONT
 1450                                            is forced on each write. */
 1451
 1452    *       2 RBLK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1453    *                         /* RBLK: set if there is a RBLK that points to
 1454    *                                  this MBLK (so that this MBLK won't get
 1455    *                                  garbage collected). */
 1456    *
 1457    *       2 * BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1458
 1459            2 PUTSTATE UBIN(4) UNAL %INIT(KQPS_IIP#)%CHARTEXT('/**/'),
 1460                              /* PUTSTATE : state of this write operation
 1461                                            (TERMs only). */
 1462
 1463            2 DSTA CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/'),
 1464                              /* DSTA     : destination station */
 1465
 1466            2 TYC BIT(36) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1467                              /* TYC      : TYC to pass to reader. */
 1468
 1469            2 DCB$ REDEF TYC PTR,
 1470                              /* DCB$     : address of DCB which wrote
 1471                                            this message; meaningful
 1472                                            only when message is still
 1473                                            attached to the writing
 1474                                            station. */
 1475
 1476            2 MID,
 1477                              /* MID      : message ID */
 1478              3 PRIMARY UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 1479              3 XT      UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 1480
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          41   
 1481            2 MSGSIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 1482                              /* MSGSIZE  : total size of message. */
 1483
 1484            2 PREVDDA UBIN %INIT(0)%CHARTEXT('/**/');
 1485                              /* PREVDDA  : when a continued message is
 1486                                            being written, contains DDA of
 1487                                            DBLK of most recently-written
 1488                                            message chunk (DCBs only). */
 1489
 1490
 1491      %ELSE;
 1492               /*****************************
 1493                *     Super MBLK only       *   must be same size as prev
 1494                *****************************/
 1495
 1496            2 KEY1ALL BIT(1) UNAL %INIT('1'B)%CHARTEXT('/**/'),
 1497                              /* KEY1ALL  : set if all represented MBLKs have
 1498                                            KEY1 = KQ_MBLK.KEY1. */
 1499
 1500            2 KEY2ALL BIT(1) UNAL %INIT('1'B)%CHARTEXT('/**/'),
 1501                              /* KEY2ALL  : set if all represented MBLKs have
 1502                                            KEY2 = KQ_MBLK.KEY2. */
 1503
 1504            2 KEY2VALID BIT(1) UNAL %INIT('1'B)%CHARTEXT('/**/'),
 1505                              /* KEY2VALID: Set to indicate that KEY2 contains
 1506                                            a key.  Reset to indicate that
 1507                                            KEY2 is really XSP; happens if
 1508                                            KQL$LIST has to REG in one of
 1509                                            a variety of ways; KEY2ALL
 1510                                            gets reset then too. */
 1511
 1512            2 KEY1VALID BIT(1) UNAL %INIT('1'B)%CHARTEXT('/**/'),
 1513                              /* KEY1VALID: Set to indicate that KEY1 contains
 1514                                            a key.  Reset to indicate that
 1515                                            KEY1 is really SDA; happens as
 1516                                            soon as the MBLK has more than one
 1517                                            DBLK; KEY1ALL gets reset then too. */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          42   
 1518
 1519            2 USR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1520                              /* USR      : Set to indicate a user REG, in
 1521                                            which case USR# is valid; reset
 1522                                            to indicate TERM REG, in which
 1523                                            case STA$ is valid. */
 1524            2 PCVALID REDEF USR BIT(1) UNAL,
 1525                              /* PCVALID  : is used in the REDUNDANT MBLK
 1526                                            at the end of a DBLK, to indicate
 1527                                            whether PCDDA is supposed to be
 1528                                            valid when this DBLK is FDA for
 1529                                            the super MBLK.  PCVALID is reset
 1530                                            initially in non-FDA DBLKs so
 1531                                            that when they become FDA via
 1532                                            erosion, the BLINK checker won't
 1533                                            complain.  Whenever someone
 1534                                            fetches the FDA DBLK, PCVALID
 1535                                            gets set and PCDDA gets zeroed. */
 1536
 1537            2 STATE UBIN (3) UNAL %INIT(KQSS_IDLE#)%CHARTEXT('/**/'),
 1538                              /* STATE    : state of this MBLK (KQSS_XXXX#). */
 1539
 1540            2 MREQ SBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
 1541                              /* MREQ     : like KQ$STA.MREQ */
 1542
 1543            2 PRIOLO UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 1544                              /* PRIOLO   : lowest prio of represented MBLKs */
 1545
 1546            2 UTSHI UBIN %INIT(0)%CHARTEXT('/**/'),
 1547                              /* UTSHI    : UTS of oldest represented MBLK
 1548                                            having prio PRIOLO. */
 1549
 1550            2 INSHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1551                              /* INSHD$   : head of in-core chain of represented
 1552                                            MBLKs. */
 1553
 1554            2 STA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          43   
 1555                              /* STA$     : station requesting this MBLK;
 1556                                            see also USR. */
 1557
 1558            2 USR# REDEF STA$ UBIN WORD,
 1559                              /* USR#     : user number of user REGd for
 1560                                            something on this super MBLK;
 1561                                            see also USR. */
 1562
 1563            2 FIRSTX REDEF STA$ UBIN,
 1564                              /* FIRSTX   : in the REDUNDANT MBLK at the
 1565                                            end of a DBLK, is the word
 1566                                            index (past KQ$DBLK) if the
 1567                                            first valid MBLK.  KQ$DBLK.DSIZE
 1568                                            is LENGTHC(KQ$MBLK)*N where N
 1569                                            is the number of valid MBLKs. */
 1570
 1571            2 UTSXTLO UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 1572                              /* UTSXTLO  : low order part of UTS.                */
 1573
 1574            2 UTSXTHI UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 1575                              /* UTSXTHI  : low order part of UTSHI.              */
 1576
 1577            2 COUNT SBIN %INIT(0)%CHARTEXT('/**/'),
 1578                              /* COUNT    : count of all MBLKs in this super
 1579                                            MBLK's disc list.  Does not count
 1580                                            the INSHD$ list. */
 1581
 1582            2 LCSTAMP UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 1583                              /* LCSTAMP  : stamp for LDA DBLK. */
 1584
 1585            2 CCSTAMP UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 1586                              /* CCSTAMP  : stamp for CCDDA DBLK; in a
 1587                                            redundant MBLK at the end of
 1588                                            a DBLK, is the stamp of the
 1589                                            FLINK DBLK. */
 1590
 1591            2 PCDDA UBIN WORD %INIT(0)%CHARTEXT('/**/');
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          44   
 1592                              /* PCDDA    : in memory, is the DDA of CCDDA's
 1593                                            blink; in a redundant MBLK, is
 1594                                            the DDA of the blink. */
 1595
 1596      %ENDIF;
 1597      %MEND;
 1598      /********************************************************************
 1599      *********************************************************************/
 1600      /*D* NAME:         KQ_MLHB02
 1601           PURPOSE:      To define the MBLK LIST header
 1602           DESCRIPTION:  This structure describes all instances of an item
 1603                         which 'owns' a list of MBLKs.  Examples are a
 1604                         particular station, and a Q-tree node.  This
 1605                         permits routines which manipulate MBLK lists
 1606                         to look in a general way at the 'MBLK listhead-ness'
 1607                         of anything. */
 1608      %MACRO KQ_MLHB02 (FPTN=KQ_MLHB02,STCLASS=STATIC,LVL=1,QMLH=0,LAST=";");
 1609
 1610       %LSET LISTDIR='0'B;
 1611       %LSET LISTEXP='1'B;
 1612       %LSET LISTCOM='0'B;
 1613       %LSET LISTSUB='1'B;
 1614       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1615       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1616       (SUBSTR(STR,0,8)='CONSTANT') OR
 1617       (SUBSTR(STR,0,3)='EXT');
 1618       %LSET INIT=CHARTEXT('INIT');
 1619       %ELSE;
 1620       %LSET INIT=CHARTEXT('/*');
 1621       %ENDIF;
 1622
 1623       %IF LVL=1;
 1624      DCL 1 FPTN STCLASS ALIGNED,
 1625       %ELSE;
 1626          %LVL FPTN ALIGNED,
 1627       %ENDIF;
 1628            %(LVL+1) HEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          45   
 1629                              /* HEAD$    : head of MBLK list */
 1630
 1631            %(LVL+1) TAIL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1632                              /* TAIL$    : tail of MBLK list */
 1633
 1634            %(LVL+1) DWHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1635                              /* DWHD$    : head of list of writes delayed
 1636                                            by BUSY being set. */
 1637
 1638            %(LVL+1) BUSY UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
 1639                              /* BUSY     : KQMU_XXXX# code indicating the
 1640                                            user of the MLH who must not
 1641                                            allow writes. */
 1642
 1643            %(LVL+1) QUEUE UBIN(1) UNAL %INIT(QMLH)%CHARTEXT('/**/'),
 1644                              /* QUEUE    : if nonzero, MLH is on a Q node;
 1645                                            else is on a station. */
 1646
 1647            %(LVL+1) DELETE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1648                              /* DELETE   : set when the MLH is to be deleted
 1649                                            but GACT or RACT is set; setter
 1650                                            of GACT/RACT must perform the
 1651                                            deletion when he's done. */
 1652
 1653            %(LVL+1) ACT,
 1654                              /* ACT      : mask of bits for waiting or
 1655                                            active 'users' of the MLH. */
 1656
 1657              %(LVL+2) O BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1658                              /* ACT.O    : the MLH owner (i.e. the station
 1659                                            itself). */
 1660
 1661              %(LVL+2) F BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1662                              /* ACT.F    :  M$FWCG. */
 1663
 1664              %(LVL+2) G BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1665                              /* ACT.G    : the garbage collector. */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          46   
 1666
 1667              %(LVL+2) * BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1668
 1669            %(LVL+1) RID UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
 1670                              /* RID      : KQMU_XXXX# code for the reader
 1671                                            who owns the MLH over all other
 1672                                            'readers'. */
 1673
 1674            %(LVL+1) RQMEM BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1675                              /* RQMEM    : reader blocked for memory. */
 1676
 1677            %(LVL+1) RQGC  BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1678                              /* RQGC     : reader waiting on GC after
 1679                                            getting memory unblock. */
 1680
 1681            %(LVL+1) * BIT(3) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1682
 1683            %(LVL+1) * UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 1684
 1685            %(LVL+1) PCSTAMP UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 1686                              /* PCSTAMP  : used by KQL$LIST to keep the
 1687                                            stamp of the DBLK pointed to
 1688                                            by PCDDA. */
 1689
 1690            %(LVL+1) SUPERCNT UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 1691                              /* SUPERCNT : count of super MBLKs in list */
 1692
 1693            %(LVL+1) COUNT SBIN %INIT(0)%CHARTEXT('/**/'),
 1694                              /* COUNT    : count of all messages in list.        */
 1695
 1696            %(LVL+1) * (0:1) UBIN WORD ALIGNED %INIT(0*0)%CHARTEXT('/**/') LAST
 1697      %MEND;
 1698      /********************************************************************
 1699      *********************************************************************/
 1700      /*D* NAME:         KQ_MLH
 1701           PURPOSE:      To define the MBLK LIST header
 1702           DESCRIPTION:  This structure describes all instances of an item
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          47   
 1703                         which 'owns' a list of MBLKs.  Examples are a
 1704                         particular station, and a Q-tree node.  This
 1705                         permits routines which manipulate MBLK lists
 1706                         to look in a general way at the 'MBLK listhead-ness'
 1707                         of anything. */
 1708      %MACRO KQ_MLH (FPTN=KQ_MLH,STCLASS=STATIC,LVL=1,QMLH=0,LAST=";");
 1709
 1710       %LSET LISTDIR='0'B;
 1711       %LSET LISTEXP='1'B;
 1712       %LSET LISTCOM='0'B;
 1713       %LSET LISTSUB='1'B;
 1714       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1715       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1716       (SUBSTR(STR,0,8)='CONSTANT') OR
 1717       (SUBSTR(STR,0,3)='EXT');
 1718       %LSET INIT=CHARTEXT('INIT');
 1719       %ELSE;
 1720       %LSET INIT=CHARTEXT('/*');
 1721       %ENDIF;
 1722
 1723       %IF LVL=1;
 1724      DCL 1 FPTN STCLASS ALIGNED,
 1725       %ELSE;
 1726          %LVL FPTN ALIGNED,
 1727       %ENDIF;
 1728            %(LVL+1) HEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1729                              /* HEAD$    : head of MBLK list */
 1730
 1731            %(LVL+1) TAIL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1732                              /* TAIL$    : tail of MBLK list */
 1733
 1734            %(LVL+1) DELAY$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1735                              /* DELAY$   : head of list of delayed operatons for
 1736                                            directed MLHs only. The anon-Q uses
 1737                                            KQ$CG.QUEUE.DELAY$ for this purpose
 1738                                            instead of on each of the anon-Q's MLHs */
 1739
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          48   
 1740            %(LVL+1) RUSR# UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
 1741                              /* RUSR#    : user # of reader; terminal
 1742                                            station is reader if zero. */
 1743
 1744            %(LVL+1) BUSY,
 1745                              /* BUSY     : flags indicating active processing
 1746                                            that cannot allow writes. */
 1747
 1748              %(LVL+2) RIP BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1749                              /* RIP      : the reader is running. */
 1750
 1751              %(LVL+2) GIP BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1752                              /* GIP      : the garbage collector is running. */
 1753
 1754            %(LVL+1) QUEUE UBIN(1) UNAL %INIT(QMLH)%CHARTEXT('/**/'),
 1755                              /* QUEUE    : if nonzero, MLH is on a Q node;
 1756                                            else is on a station. */
 1757
 1758            %(LVL+1) GACT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1759                              /* GACT     : set if garbage collector is
 1760                                            running on this MLH, or waiting
 1761                                            for it. */
 1762
 1763            %(LVL+1) RQMEM BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1764                              /* RQMEM    : reader blocked for memory. */
 1765
 1766            %(LVL+1) RQGC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1767                              /* RQGC     : reader unblocked from RQMEM,
 1768                                            now waiting for garbage collector
 1769                                            to finish. */
 1770
 1771            %(LVL+1) B03 BIT(1) UNAL %INIT('1'B)%CHARTEXT('/**/'),
 1772                              /* B03      : set if MLH is a B03(or later)-type
 1773                                            structure. */
 1774
 1775            %(LVL+1) * BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1776
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          49   
 1777            %(LVL+1) * UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 1778
 1779            %(LVL+1) PCSTAMP UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 1780                              /* PCSTAMP  : used by KQL$LIST to keep the
 1781                                            stamp of the DBLK pointed to
 1782                                            by PCDDA. */
 1783
 1784            %(LVL+1) SUPERCNT UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 1785                              /* SUPERCNT : count of super MBLKs in list */
 1786
 1787            %(LVL+1) COUNT SBIN %INIT(0)%CHARTEXT('/**/'),
 1788                              /* COUNT    : count of all messages in list.        */
 1789
 1790            %(LVL+1) DELAYDQ$ PTR %INIT(ADDR(NIL)) %CHARTEXT('/**/'),
 1791                              /* DELAYDQ$ : pointer to an MBLK or a STATION block
 1792                                            being processed after being removed
 1793                                            from the KQ$STA.MLH.DELAY$ list for
 1794                                            directed MLHs only.                    */
 1795            %(LVL+1) * UBIN WORD ALIGNED %INIT(0*0)%CHARTEXT('/**/') LAST
 1796      %MEND;
 1797      /********************************************************************
 1798      *********************************************************************/
 1799      /*D* NAME:         KQ_MTYP
 1800           PURPOSE:      To define the context required for a msg type
 1801           DESCRIPTION:  Each msg type has some parameters associated
 1802                         with it, and is a node in the T-tree.  If the
 1803                         Q-tree is the T-tree, then each node also
 1804                         contains an AREA3 from KQ_QTN.
 1805                         KQ_MTYP is looked at in 3 ways:
 1806                         1) as KQ_MTYP
 1807                         2) as KQ_BTN, when treated as a binary tree node
 1808                            in the T-tree
 1809                         3) as KQ_QTN, when treated as a Q-tree node.
 1810
 1811                         Thus it must conform to various rules as to its
 1812                         layout; see KQ_BTN and KQ_QTN. */
 1813      %MACRO KQ_MTYP (FPTN=KQ_MTYP,STCLASS=STATIC);
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          50   
 1814
 1815       %LSET LISTDIR='0'B;
 1816       %LSET LISTEXP='1'B;
 1817       %LSET LISTCOM='0'B;
 1818       %LSET LISTSUB='1'B;
 1819       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1820       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1821       (SUBSTR(STR,0,8)='CONSTANT') OR
 1822       (SUBSTR(STR,0,3)='EXT');
 1823       %LSET INIT=CHARTEXT('INIT');
 1824       %ELSE;
 1825       %LSET INIT=CHARTEXT('/*');
 1826       %ENDIF;
 1827
 1828      DCL 1 FPTN STCLASS DALIGNED,
 1829               /* Start of KQ_BTN area framed by KQ_BTN.  Must be first
 1830                    thing in this structure. */
 1831            %KQ_BTN (FPTN=BTN,LVL=2,LAST=",",STCLASS=STCLASS);
 1832                              /* BTN      : tree node */
 1833            2 MPRIO UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
 1834                              /* MPRIO    : contribution of message type
 1835                                            to prio of msgs written with
 1836                                            that type. */
 1837            2 JOURNAL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1838                              /* JOURNAL  : messages of this type are to
 1839                                            be journaled. */
 1840            2 ONEREPORT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1841                              /* ONEREPORT: Latched writes of this msg
 1842                                            type have CONT forced. */
 1843            2 DFCHK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1844                              /* DFCHK    : used by M$CGCTL */
 1845            2 PERM BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1846                              /* PERM     : this node must not be deleted. */
 1847            2 * BIT(5) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1848            2 MAXLATCH UBIN HALF UNAL %INIT(%BITBIN('777777'O))%CHARTEXT('/**/'),
 1849                              /* MAXLATCH : the number of WRITEs that can
 1850                                 be latched to a READ of this message type. */
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          51   
 1851            2 NUMWRITES  SBIN %INIT(0)%CHARTEXT('/**/'),
 1852                              /* NUMWRITES: the number of WRITEs of this
 1853                                 message type since it was created. */
 1854            2 * UBIN %INIT(0)%CHARTEXT('/**/');
 1855               /* End of MTYP-specific area.  After this, an AREA3
 1856                    of KQ_QTN appears if KQ_CG.QISS is zero. */
 1857      %MEND;
 1858      /********************************************************************
 1859      *********************************************************************/
 1860      /*D* NAME:         KQ_QTN
 1861           PURPOSE:      To define the structure of a Q-tree node.
 1862           DESCRIPTION:  The QUEUE is the structure for searching the
 1863                         'queue' (the messages not written to
 1864                         specific station).  The QUEUE consists of a Q-tree
 1865                         and a list of outstanding wildcarded reads.
 1866                         The Q-tree is in reality
 1867                         either the T-tree (of msg types) or the S-tree
 1868                         (of connected stations).  Hence each node in
 1869                         these trees (represented resp. by KQ_MTYP and
 1870                         KQ_STA) must be capable of being looked at
 1871                         as a Q-tree node.  To make things even worse,
 1872                         each must be lookable at as a binary tree node.
 1873
 1874                         This has been done in the following way:
 1875                         The first area of each node (called AREA1), is
 1876                         a copy of KQ_BTN.  The next area is the info
 1877                         specific to that node as a member of the T-
 1878                         or S-tree, called AREA2.  The last area, called
 1879                         AREA3, is the info specific to the node as a
 1880                         Q-tree node.  AREA3 only exists in a T- or S-tree
 1881                         node if its tree is the Q-tree.  AREA2 must be the max of
 1882                         the size of the MTYP-specific info in the T-tree
 1883                         node, and the station-specific info in the S-tree
 1884                         node.  This is permitted because the latter greatly
 1885                         exceeds the former, and there are usually few
 1886                         T-tree nodes as compared to S-tree nodes. */
 1887      %MACRO KQ_QTN (FPTN=KQ_QTN,STCLASS=STATIC);
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          52   
 1888
 1889       %LSET LISTDIR='0'B;
 1890       %LSET LISTEXP='1'B;
 1891       %LSET LISTCOM='0'B;
 1892       %LSET LISTSUB='1'B;
 1893       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1894       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1895       (SUBSTR(STR,0,8)='CONSTANT') OR
 1896       (SUBSTR(STR,0,3)='EXT');
 1897       %LSET INIT=CHARTEXT('INIT');
 1898       %ELSE;
 1899       %LSET INIT=CHARTEXT('/*');
 1900       %ENDIF;
 1901
 1902      DCL 1 FPTN STCLASS DALIGNED,
 1903                              /* AREA1 AND AREA2 HERE */
 1904            %KQ_STA (FPTN=STA,LVL=2,LAST=",",STCLASS=STCLASS);
 1905                              /* STA      : station block */
 1906                              /* AREA3 */
 1907            2 CNACT SBIN WORD %INIT(0)%CHARTEXT('/**/'),
 1908                              /* CNACT    : current number of queue msgs
 1909                                            of this type that are active. */
 1910            2 MXACT SBIN WORD %INIT(999990)%CHARTEXT('/**/'),
 1911                              /* MXACT    : max value for CNACT */
 1912            2 MXACTR REDEF MXACT BIT(36) ALIGNED,
 1913            2 READS$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1914                              /* READS$   : pointer to head of chain of
 1915                                            RBLKs which represent
 1916                                            unsatisfied reads which were
 1917                                            specific in the key of this
 1918                                            Q-tree node. */
 1919            2 PLINK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1920                              /* PLINK$   : link in prio-ordered list. */
 1921            2 AUTORCVR BIT(1) UNAL %INIT('1'B)%CHARTEXT('/**/'),
 1922                              /* AUTORCVR : see VLP_CGQL in KC_CP6_C. */
 1923            2 ACTWAIT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1924                              /* ACTWAIT  : set to indicate queued for
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          53   
 1925                                            KQQ$ACT */
 1926            2 LOCKCNT UBIN(7) UNAL %INIT(0)%CHARTEXT('/**/'),
 1927                              /* LOCKCNT  : counted up by KQL$GARB/KQQ$ACT to
 1928                                            prevent deletion of node. */
 1929            2 MPRIO UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
 1930                              /* MPRIO    : contribution by this Q-tree node
 1931                                            to message prio of messages written
 1932                                            with KEY1 = key of this node.
 1933                                            Note that this value matches MPRIO
 1934                                            in the MTYP or STA block which
 1935                                            forms the first part of this node.
 1936                                            Note also that this MPRIO goes
 1937                                            in the most significant part of
 1938                                            the message prio; thus message
 1939                                            prios are formulated differently
 1940                                            depending on which tree is the
 1941                                            Q-tree. */
 1942            2 CRASHACT UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 1943                              /* CRASHACT : number of readers who are looking
 1944                                            for a new message of the same
 1945                                            type that they just unlatched
 1946                                            and thus did not decrement CNACT.
 1947                                            After a crash, this number must
 1948                                            be subtracted from CNACT. */
 1949            2 * (0:2) UBIN WORD %INIT(0*0)%CHARTEXT('/**/'),
 1950            2 ACTLNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1951                              /* ACTLNK$  : link when waiting for KQQ$ACT. */
 1952            %KQ_MLH (FPTN=MLH,LVL=2,QMLH=1,STCLASS=STCLASS);
 1953                              /* MLH      : MBLK list header */
 1954      %MEND;
 1955      /********************************************************************
 1956      *********************************************************************/
 1957      /*D* NAME:         KQ_RBLK
 1958           PURPOSE:      To define a read block
 1959           DESCRIPTION:  An outstanding read is represented by an RBLK,
 1960                         which contains the desired attributes of the
 1961                         message to be read, as well as the information
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          54   
 1962                         describing where to store the message when it
 1963                         arrives.
 1964      */
 1965      %MACRO KQ_RBLK (FPTN=KQ_RBLK,STCLASS=STATIC,TERM=0);
 1966
 1967       %LSET LISTDIR='0'B;
 1968       %LSET LISTEXP='1'B;
 1969       %LSET LISTCOM='0'B;
 1970       %LSET LISTSUB='1'B;
 1971       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1972       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1973       (SUBSTR(STR,0,8)='CONSTANT') OR
 1974       (SUBSTR(STR,0,3)='EXT');
 1975       %LSET INIT=CHARTEXT('INIT');
 1976       %ELSE;
 1977       %LSET INIT=CHARTEXT('/*');
 1978       %ENDIF;
 1979
 1980      DCL 1 FPTN STCLASS DALIGNED,
 1981            2 MBLK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 1982                              /* MBLK$    : points to the MBLK of the message
 1983                                            which satisfied this read; is
 1984                                            NIL when read is being set up or
 1985                                            is pending. */
 1986
 1987            2 STATE UBIN HALF UNAL %INIT(KQRS_RSIP#)%CHARTEXT('/**/'),
 1988                              /* STATE    : current state of this read.
 1989                                            See KQRS_XXXX# in KQ_SUBS_C. */
 1990
 1991            2 LATCH BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1992                              /* LATCH    : latch specified on read (DCBs only). */
 1993
 1994            2 SECURE REDEF LATCH BIT(1) UNAL,
 1995                              /* SECURE   : AUCTL.SECURE copy, from when the
 1996                                            RBLK was set up. (TERMs only). */
 1997
 1998            2 EOFNONE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          55   
 1999                              /* EOFNONE  : EOFNONE specified on GET.
 2000                                            (TERMs only). */
 2001
 2002            2 MAPD REDEF EOFNONE BIT(1) UNAL,
 2003                              /* MAPD     : indicates whether the user
 2004                                            buffer has been mapped. (DCBs only). */
 2005
 2006            2 FROMQ BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2007                              /* FROMQ    : if LATCH is on, indicates if msg
 2008                                            came from the queue (DCBs only). */
 2009
 2010            2 COMP REDEF FROMQ BIT(1) UNAL,
 2011                              /* COMP     : set when OUTPUT COMPLETE has
 2012                                            been received for this msg.
 2013                                            (TERMs only). */
 2014
 2015            2 CS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2016                              /* CS       : READ of entire message completed
 2017                                            successfully (DCBs only). */
 2018
 2019            2 AUXFDN BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2020                              /* AUXFDN   : set to indicate that the
 2021                                            B$CGAURD has been xferred
 2022                                            to the user's buffer, for
 2023                                            AU event messages only
 2024                                            (DCBs only). */
 2025
 2026            2 CNACTD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2027                              /* CNACTD   : when LATCH and FROMQ are set,
 2028                                            this bit when set indicates that
 2029                                            CNACT in the Q-node has been
 2030                                            decremented; this prevents us from
 2031                                            doing so again if a crash catches
 2032                                            KQU$UNLATCH in the process of
 2033                                            disposing of the outputs after
 2034                                            updating CNACT (DCBs only). */
 2035
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          56   
 2036            2 RUNDOWN REDEF CNACTD BIT(1) UNAL,
 2037                              /* RUNDOWN  : set to indicate read issued by
 2038                                            KQG$CLEANUP (TERMs only). */
 2039
 2040            2 ERR UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
 2041                              /* ERR      : KQGE_XXXX# error encountered
 2042                                            while doing this read. */
 2043
 2044            2 HONK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2045                              /* HONK     : honour keys; set if the read
 2046                                            keys must be honoured despite
 2047                                            the fact that AU events are
 2048                                            waiting (lets the monitor read
 2049                                            with keys on behalf of the AU). */
 2050
 2051            2 KEY1L UBIN (4) UNAL %INIT(0)%CHARTEXT('/**/'),
 2052                              /* KEY1L    : char len of KEY1 excluding ?. */
 2053
 2054            2 KEY2L UBIN (4) UNAL %INIT(0)%CHARTEXT('/**/'),
 2055                              /* KEY2L    : char len of KEY2 excluding ?. */
 2056
 2057            2 KEY1R (0:1) UBIN %INIT(0*0)%CHARTEXT('/**/'),
 2058            2 KEY1 REDEF KEY1R CHAR(8),
 2059                              /* KEY1     : ORIGIN STATION or MSG TYP;
 2060                                            zero-filled on right if wild-
 2061                                            carded. */
 2062
 2063            2 KEY2R (0:1) UBIN %INIT(0*0)%CHARTEXT('/**/'),
 2064            2 KEY2 REDEF KEY2R CHAR(8),
 2065                              /* KEY2     : ORIGIN STATION or MSG TYP;
 2066                                            zero-filled on right if wild-
 2067                                            carded:
 2068                                            if the Q-tree is the station
 2069                                            tree then KEY1=OS KEY2=MT;
 2070                                            if the Q-tree is the MTYP
 2071                                            tree then KEY1=MT KEY2=OS. */
 2072
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          57   
 2073            2 MID,
 2074                              /* MID      : requested message ID. */
 2075              3 PRIMARY UBIN %INIT(0)%CHARTEXT('/**/'),
 2076              3 *       UBIN %INIT(0)%CHARTEXT('/**/'),
 2077
 2078            2 EOFTIMELNK$ PTR %INIT(ADDR(NIL)) %CHARTEXT('/**/'),
 2079                              /* EOFTIMELNK$  : Link to the next RBLK on the
 2080                                                KQ$CG.EOFTIMEHD$ list of RBLKs
 2081                                                for READs which specified EOFTIME  */
 2082            2 NCDDA UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 2083                              /* NCDDA    : next chunk data disk address;
 2084                                            is DA of next chunk to read or
 2085                                            first to delete (prev chunks
 2086                                            have already been deleted). */
 2087
 2088            2 STA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2089                              /* STA$     : when the read is PENDing, is
 2090                                            ADDR(NIL) unless the read has
 2091                                            been inserted in the QUEUE, or
 2092                                            unless EOFTIME is specified for this
 2093                                            READ in which case points to the
 2094                                            reading station block. */
 2095
 2096      %IF TERM=1;
 2097               /*****************************
 2098                *   TERMINALs   only        *
 2099                *****************************/
 2100
 2101            2 DBLK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2102                              /* DBLK$    : points to DBLK in memory when
 2103                                            the read has been satisfied and
 2104                                            the data is going to the device. */
 2105
 2106            2 DFRP$ REDEF DBLK$ PTR,
 2107                              /* DFRP$    : pointer to KQ$DFRPARM, passed
 2108                                            from KQG$FCONT to KQG$FCONT1. */
 2109
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          58   
 2110            2 RUND REDEF DBLK$ ALIGNED,
 2111                              /* RUND     : stuff for KQG$CLEANUP. */
 2112
 2113              3 USR# UBIN BYTE UNAL,
 2114                              /* USR#     : user # of user blocked for
 2115                                            KQL$FIND. */
 2116
 2117              3 * UBIN(27) UNAL,
 2118
 2119            2 * UBIN %INIT(0)%CHARTEXT('/**/'),
 2120
 2121            2 IOQ$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/');
 2122                              /* IOQ$     : pointer to writer's IOQ packet,
 2123                                            when a GET is being satisfied
 2124                                            directly from a DCB station
 2125                                            write buffer. */
 2126
 2127      %ELSE;
 2128
 2129               /*****************************
 2130                *     DCBs      only        *
 2131                *****************************/
 2132
 2133            2 BUF$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2134                              /* BUF$     : pointer to user buffer. */
 2135
 2136            2 LWTL$ REDEF BUF$ PTR,
 2137                              /* LWTL$    : tail of list headed by
 2138                                            LWRITES$.                             */
 2139
 2140            2 PTW UNAL,
 2141              3 * (0:1) UBIN,
 2142                              /* PTW      : page table words; set up when
 2143                                            user buffer address is xlated
 2144                                            for no-wait I/O. */
 2145
 2146            2 BUFSIZE UBIN %INIT(0)%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          59   
 2147                              /* BUFSIZE  : byte size of user buffer. */
 2148
 2149            2 MIDEXTX UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
 2150                              /* MIDEXTX  : index into the MID extension
 2151                                            of the subfield to count up
 2152                                            when making MIDs for latched
 2153                                            writes. */
 2154
 2155            2 MIDEXTV UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
 2156                              /* MIDEXTV  : value of previous ext subfield
 2157                                            allocated. */
 2158
 2159            2 DBLKX UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 2160                              /* DBLKX    : byte index into data block
 2161                                            of 1st byte to pick up when
 2162                                            xferring data. */
 2163            2 EOFTIME REDEF DBLKX UBIN HALF HALIGNED,
 2164                           /* EOFTIME    : Number of seconds to wait before  timing
 2165                                           out this DCB read. The time kept here
 2166                                           is to be compared against
 2167                                           KQ$CG.EOFTIME. When they are equal,
 2168                                           the read is to be timed out. Only
 2169                                           valid for PENDing reads. */
 2170
 2171            2 LWRITES$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2172                              /* LWRITES$ : head of chain of MBLKs written
 2173                                            with LATCH, and not dispersed
 2174                                            yet. */
 2175
 2176            2 QRLNK$ REDEF LWRITES$ PTR,
 2177                              /* QRLNK$   : link to next RBLK when the
 2178                                            read is in the queue. */
 2179
 2180            2 QTN$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/');
 2181                              /* QTN$     : points to Q-tree node where this
 2182                                            RBLK is attached if the read is
 2183                                            pending and is in the QUEUE
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          60   
 2184                                            (if the read is wild-carded in
 2185                                            the Q-tree key then QTN$ is
 2186                                            ADDR(NIL) since the RBLK is on
 2187                                            the KQ$CG.QUEUE.WCRL$ chain).
 2188                                            When a latched read completes,
 2189                                            points to the node the message
 2190                                            came from (if FROMQ set). */
 2191      %ENDIF;
 2192      %MEND;
 2193      /********************************************************************
 2194      *********************************************************************/
 2195      /*D* NAME:         KQ_STA
 2196           PURPOSE:      To define comgroup station context
 2197           DESCRIPTION:  For each active station there is a context block
 2198                         framed by KQ_STA.  This block is represented in
 2199                         a binary tree called the S-tree.  The binary
 2200                         tree 'key' is the station name.  As with KQ_MTYP,
 2201                         this structure is also framed by KQ_BTN and
 2202                         KQ_QTN; see the comments for these structures. */
 2203      %MACRO KQ_STA (FPTN=KQ_STA,STCLASS=STATIC,LVL=1,LAST=";");
 2204
 2205       %LSET LISTDIR='0'B;
 2206       %LSET LISTEXP='1'B;
 2207       %LSET LISTCOM='0'B;
 2208       %LSET LISTSUB='1'B;
 2209       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2210       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2211       (SUBSTR(STR,0,8)='CONSTANT') OR
 2212       (SUBSTR(STR,0,3)='EXT');
 2213       %LSET INIT=CHARTEXT('INIT');
 2214       %ELSE;
 2215       %LSET INIT=CHARTEXT('/*');
 2216       %ENDIF;
 2217
 2218       %IF LVL=1;
 2219      DCL 1 FPTN STCLASS DALIGNED,
 2220       %ELSE;
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          61   
 2221          %LVL FPTN DALIGNED,
 2222       %ENDIF;
 2223               /* Start of KQ_BTN area framed by KQ_BTN.  Must be first
 2224                    thing in this structure. */
 2225       %LSET LVL1=%(LVL+1);
 2226            %KQ_BTN (FPTN=BTN,LVL=LVL1,LAST=",",STCLASS=STCLASS);
 2227
 2228            %(LVL+1) CG$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2229                              /* CG$      : pointer to comgroup context blk. */
 2230
 2231            %(LVL+1) LDCT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2232                              /* LDCT$    : pointer to station LDCT. */
 2233
 2234            %(LVL+1) RBLK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2235                              /* RBLK$    : pointer to current read RBLK. */
 2236
 2237            %(LVL+1) MBLK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2238                              /* MBLK$    : points to the MBLK for the current
 2239                                            write operation; also points to
 2240                                            the MBLK of a message being del-
 2241                                            eted by M$UNLATCH so that the
 2242                                            message can be found after a
 2243                                            SCREECH. */
 2244
 2245            %(LVL+1) ACTTYC BIT(36) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
 2246                              /* ACTTYC   : TYC provided by AU on M$ACTIVATE;
 2247                                            if nonzero, next or current read
 2248                                            is aborted w/ this TYC (DCBs only). */
 2249
 2250            %(LVL+1) EVSC REDEF ACTTYC UBIN,
 2251                              /* EVSC     : TBRK event subcode if EVNT is
 2252                                            set (TERMs only). */
 2253
 2254            %(LVL+1) DCBLNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2255                              /* DCBLNK$  : link to next DCB station.
 2256                                            (DCBs only). */
 2257
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          62   
 2258            %(LVL+1) ACTHD$ REDEF DCBLNK$ PTR,
 2259                              /* ACTHD$   : for *GORGO station, is head of
 2260                                            chain of Q-tree nodes awaiting
 2261                                            KQQ$ACT service. */
 2262
 2263            %(LVL+1) SGHD$ REDEF DCBLNK$ PTR,
 2264                              /* SGHD$    : head of secure GET MBLKs of
 2265                                            messages not KQG$COMPed yet.
 2266                                            (TERMs only). */
 2267
 2268            %(LVL+1) LATCHCNT UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
 2269                              /* LATCHCNT : incremented each time a read
 2270                                            is unlatched. */
 2271
 2272            %(LVL+1) MPRIO UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
 2273                              /* MPRIO    : contribution of station to prio
 2274                                            of msgs written by it. */
 2275
 2276            %(LVL+1) CNNCTSIZE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 2277                              /* CNNCTSIZE : size of connect info in bytes */
 2278
 2279            %(LVL+1) GATE BIT(72) ALIGNED %INIT('1'B)%CHARTEXT('/**/'),
 2280                              /* GATE     : lock for this station */
 2281
 2282            %(LVL+1) IDSC BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 2283                              /* IDSC     : disconnect in progress. */
 2284
 2285            %(LVL+1) AU BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 2286                              /* AU       : this the AU's special AU DCB. */
 2287
 2288            %(LVL+1) MONDCB BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2289                              /* MONDCB   : set to indicate a monitor DCB
 2290                                            station (e.g. MONKEY).  Such
 2291                                            stations have severe restrictions
 2292                                            on their actions, notably
 2293                                            - cannot write to terminals
 2294                                            - cannot read the queue
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          63   
 2295                                            - sometimes get %TYC_DI on their
 2296                                              writes (if not on behalf of a
 2297                                              user).
 2298
 2299                                            Failure to obey some of these
 2300                                            restrictions can cause a SCREECH. */
 2301
 2302            %(LVL+1) TERM BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 2303                              /* TERM     : set if this station is a terminal */
 2304
 2305            %(LVL+1) PERM BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2306                              /* PERM     : this station entry must not
 2307                                            be deleted. */
 2308
 2309            %(LVL+1) SUCCREAD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2310                              /* SUCCREAD : a successful LATCHed read has been
 2311                                            completed from this station
 2312                                            (DCBs only). */
 2313
 2314            %(LVL+1) TERR REDEF SUCCREAD BIT(1) UNAL,
 2315                              /* TERR     : Terminal error event occurred
 2316                                            when AU was absent (TERMs only). */
 2317
 2318            %(LVL+1) TOLDAU BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 2319                              /* TOLDAU   : don't need to tell AU about
 2320                                            connect of this station. */
 2321
 2322            %(LVL+1) EVNT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2323                              /* EVNT     : TBRK event occurred when AU was
 2324                                            absent; EVSC contains the sub-
 2325                                            code (TERMs only). */
 2326
 2327            %(LVL+1) AIP REDEF EVNT BIT(1) UNAL,
 2328                              /* AIP      : for *GORGO station, indicates
 2329                                            KQQ$ACT is running. */
 2330
 2331            %(LVL+1) ABTET REDEF EVNT BIT(1) UNAL,
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          64   
 2332                              /* ABTET    : ACTTYC is not to be zapped when
 2333                                            used; i.e. the error is to be
 2334                                            passed back on every M$READ
 2335                                            forever (DCBs only). */
 2336
 2337            %(LVL+1) DFCHK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2338                              /* DFCHK    : used by M$CGCTL */
 2339
 2340            %(LVL+1) MREQ SBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
 2341                              /* MREQ     : info about delayed memory
 2342                                            request;
 2343                                            0 = none in progress
 2344                                          > 0 = in progress (KQMR_XXXX#)
 2345                                          < 0 = completed  (-KQMR_XXXX#) */
 2346
 2347            %(LVL+1) USR# UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
 2348                              /* USR#     : user # of user if station is
 2349                                            a user DCB, 0 else. */
 2350
 2351            %(LVL+1) LOCKCNT UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 2352                              /* LOCKCNT  : count of number of users of this
 2353                                            station block */
 2354
 2355            %(LVL+1) CNNCTDDA UBIN %INIT(0)%CHARTEXT('/**/'),
 2356                              /* CNNCTDDA : connect information */
 2357
 2358            %(LVL+1) DSID UBIN %INIT(0)%CHARTEXT('/**/'),
 2359                              /* DSID     : (Delete Star ID) Messages with
 2360                                            MSGTYP starting with * and MSGID
 2361                                            < DSID, written to this station,
 2362                                            are to be deleted without notif-
 2363                                            ying the writer. */
 2364
 2365            %(LVL+1) EVCNT SBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
 2366                              /* EVCNT    : count of TBRKs submitted but not
 2367                                            yet read by the AU (TERMs only). */
 2368
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          65   
 2369            %(LVL+1) DCBCNT REDEF EVCNT SBIN BYTE CALIGNED,
 2370                              /* DCBCNT   : number of user DCBs open
 2371                                            to this station (DCBs only). */
 2372
 2373            %(LVL+1) DVBYTE BIT(9) CALIGNED %INIT('0'B)%CHARTEXT('/**/'),
 2374                              /* DVBYTE   : used for reading TERMINAL stations
 2375                                            (TERMs only). */
 2376
 2377            %(LVL+1) AUP BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2378                              /* AUP      : Administrative User Proprietary;
 2379                                            only the AU may open using this
 2380                                            station name and nobody can write
 2381                                            to it. */
 2382
 2383            %(LVL+1) SPECIAL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2384                              /* SPECIAL  : special station (see FPRQSTA
 2385                                            in FPT_CGCTL in KC_CP6_C).
 2386                                            Also used for internal stations
 2387                                            (e.g. *GORGO, *FWCG). */
 2388
 2389            %(LVL+1) DDISC UBIN(2) UNAL %INIT(0)%CHARTEXT('/**/'),
 2390                              /* DDISC    : code indicating a terminal
 2391                                            disconnect is delayed (TERMs
 2392                                            only):
 2393                                              1 ---> need MBLK for msg
 2394                                              2 ---> need to delete connect
 2395                                                     info
 2396                                              3 ---> need to call KCD$STTM. */
 2397
 2398            %(LVL+1) OPNBLKED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2399                              /* OPNBLKED : user blocked waiting for
 2400                                            AU to activate him (DCBs only). */
 2401
 2402            %(LVL+1) DSCREQW REDEF OPNBLKED BIT(1) UNAL,
 2403                              /* DSCREQW  : terminal waiting for M$DEACTIVATE
 2404                                            DSCGO from the AU (TERMs only). */
 2405
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          66   
 2406            %(LVL+1) OPNREJ BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2407                              /* OPNREJ   : AU rejected DCB open (DCBs only). */
 2408
 2409            %(LVL+1) DSCREQS REDEF OPNREJ BIT(1) UNAL,
 2410                              /* DSCREQS  : disconnect request event sent
 2411                                            to AU (TERMs only). */
 2412
 2413            %(LVL+1) JRNLW BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2414                              /* JRNLW    : Station is waiting for a
 2415                                            message it submitted to
 2416                                            be journaled.  MSGID is
 2417                                            JMSGID. (TERMs only).                 */
 2418
 2419            %(LVL+1) STARSDUN BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2420                              /* STARSDUN : Set by disconnect logic if
 2421                                            all * messages have been cleaned
 2422                                            out of the message queue.
 2423                                            This prevents us from doing
 2424                                            it all over again when the
 2425                                            comgroup is opened.                   */
 2426
 2427            %(LVL+1) PVGSENSE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2428                              /* PVGSENSE : set if on PVG chain waiting
 2429                                            to disconnect; reset if
 2430                                            waiting to VGET (TERMs only). */
 2431
 2432
 2433            %(LVL+1) SAVIDSC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2434                              /* SAVIDSC : set if disconnect is in progress
 2435                                           on the KQ$STA.SAVLDCT$ LDCT.
 2436                                           (TERMS only).                           */
 2437
 2438            %(LVL+1) USEAUACCT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2439                              /* USEAUACCT : set if FPRG is suppose to
 2440                                               login under the AU's acct.
 2441                                             See explaination under FPT_
 2442                                             ACTIVATE for more information.
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          67   
 2443                              */
 2444
 2445            %(LVL+1) * BIT(7) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2446
 2447            %(LVL+1) MREQ$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2448                              /* MREQ$    : if MREQ > 0 is link in chain
 2449                                            of requesting stations;
 2450                                            if MREQ < 0 is acquired buffer
 2451                                            or ADDR(NIL) if none avail. */
 2452
 2453            %(LVL+1) VGOT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2454                              /* VGOT$    : Points to the MMS$VGET buffer
 2455                                            used to map terminal PUTs from
 2456                                            the FEP (TERMs only).                 */
 2457
 2458            %(LVL+1) DPVGLNK$ REDEF VGOT$ PTR,
 2459                              /* DPVGLNK$ : Link in chain of stations
 2460                                            waiting to VGET or disconnect
 2461                                            (see PVGSENSE) (TERMs only). */
 2462
 2463            %(LVL+1) JMSGID REDEF VGOT$ UBIN,
 2464                              /* JMSGID   : MSGID we're waiting for if
 2465                                            JRNLW is set (TERMs only).            */
 2466
 2467            %(LVL+1) READS SBIN %INIT(0)%CHARTEXT('/**/'),
 2468                              /* READS    : number of M$READs or GETs. */
 2469
 2470            %(LVL+1) WRITES SBIN %INIT(0)%CHARTEXT('/**/'),
 2471                              /* WRITES   : number of M$WRITEs or PUTs. */
 2472
 2473            %(LVL+1) TCOUNT SBIN %INIT(0)%CHARTEXT('/**/'),
 2474                              /* TCOUNT   : count of messages from a SUPER
 2475                                            MBLK's disc list read thus far;
 2476                                            used to set MBLK.COUNT when the
 2477                                            list is truncated due to a disc
 2478                                            error.  Used by KQL$LIST (TERMS only). */
 2479
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          68   
 2480            %(LVL+1) RQLNK$ REDEF TCOUNT PTR,
 2481                              /* RQLNK$   : pointer to next station in
 2482                                            delay list (DCBs and TERMs). */
 2483
 2484            %(LVL+1) SAVLDCT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2485                              /* SAVLDCT$ : pointer to the NK_CGTRM LDCT
 2486                                            if one exists for this transformed
 2487                                            FPRG station.                          */
 2488            %(LVL+1) MINRD  UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 2489                          /*K* MINRD is the value of the minimum
 2490                          temp number of reads to the front end.
 2491                          The default is 0.  Setable by FPT-ACTIVATE */
 2492
 2493            %(LVL+1) MAXRD  UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 2494                          /*K* MAXRD is the value of the maximum
 2495                          temp number of reads to the front end.
 2496                          The default is 0.  Setable by FPT-ACTIVATE */
 2497
 2498            %(LVL+1) * UBIN %INIT(0*0)%CHARTEXT('/**/'),
 2499
 2500            %KQ_MLH (FPTN=MLH,STCLASS=STCLASS,LVL=LVL1,LAST=LAST);
 2501               /* End of station-specific area.  After this, an AREA3
 2502                    of KQ_QTN appears if KQ_CG.QISS is one. */
 2503      %MEND;
 2504      /********************************************************************
 2505      *********************************************************************/
 2506      /*D* NAME:         KQ_THDR
 2507           PURPOSE:      To define the header block for a binary tree
 2508           DESCRIPTION:  Each binary tree manipulated by KQB$TREE is
 2509                         headed by one of these header blocks. */
 2510      %MACRO KQ_THDR (FPTN=KQ_THDR,STCLASS=STATIC,LVL=1,LAST=";");
 2511
 2512       %LSET LISTDIR='0'B;
 2513       %LSET LISTEXP='1'B;
 2514       %LSET LISTCOM='0'B;
 2515       %LSET LISTSUB='1'B;
 2516       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
14:52 JUL 28 '97 KQ_MAC_C.:E05SI/KQ_MAC_C.:E05TUI                          69   
 2517       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2518       (SUBSTR(STR,0,8)='CONSTANT') OR
 2519       (SUBSTR(STR,0,3)='EXT');
 2520       %LSET INIT=CHARTEXT('INIT');
 2521       %ELSE;
 2522       %LSET INIT=CHARTEXT('/*');
 2523       %ENDIF;
 2524
 2525       %IF LVL=1;
 2526      DCL 1 FPTN STCLASS ALIGNED,
 2527       %ELSE;
 2528          %LVL FPTN ALIGNED,
 2529       %ENDIF;
 2530            %(LVL+1) GATE BIT(72) ALIGNED %INIT('1'B)%CHARTEXT('/**/'),
 2531                              /* GATE     : lock for this tree. */
 2532            %(LVL+1) ROOT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2533                              /* ROOT$    : points to the root node. */
 2534            %(LVL+1) LINKS UBIN WORD %INIT(1)%CHARTEXT('/**/'),
 2535                              /* LINKS    : 1 if nodes are to be put
 2536                                            on the linear list headed by
 2537                                            HEAD$. */
 2538            %(LVL+1) HEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
 2539                              /* HEAD$    : If LINKS is nonzero, points to
 2540                                            the first node in the linear
 2541                                            list structure.  See KQB$INSERT
 2542                                            for a discussion of this. */
 2543            %(LVL+1) ACTCNT UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 2544                              /* ACTCNT   : count of number of deletes and
 2545                                            inserts. */
 2546            %(LVL+1) COUNT UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/') LAST
 2547                              /* COUNT    : current count of nodes in this
 2548                                            tree. */
 2549      %MEND;

