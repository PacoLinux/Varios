VERSION E05

PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        PIGLET: PROC MAIN;
        7        7        /**/
        8        8        /*  INCLUDE FILES  */
        9        9        /**/
       10       10        %INCLUDE KO_DATA_R;
       11     3757        %INCLUDE KP_PERR_C;
       12     3822        /**/
       13     3823        /*  ENTRY DCLS  */
       14     3824        /**/
       15     3825        %KO_ENTRIES (OMIT=KOA$MAIN);
       16     3881        %EJECT;
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:2    
       17     3882        /**/
       18     3883        /*  As soon as we are downloaded, we go to work.  This makes debugging        */
       19     3884        /*  difficult since you can't set a breakpoint in a user that hasn't been     */
       20     3885        /*  downloaded yet.  To fix this, we insert a 'loop forever' here.  Once we   */
       21     3886        /*  are ready to debug, we plant a breakpoint and exit the loop.  Then GO.    */
       22     3887        /**/
       23     3888    2             DO WHILE (DEBUGGING);
       24     3889    2                END;
       25     3890        /**/
       26     3891        /*N*Initialize the world and prime the pump with an outstanding host READ.    */
       27     3892        /*  At least, that's what we WANT to do.  Since M$READ/WAIT=NO is not         */
       28     3893        /*  implemented, we'll settle for opening the path to the host.  When         */
       29     3894        /*  WAIT=NO starts to work, the priming READ should go here.                  */
       30     3895        /**/
       31     3896    1             CALL KOI$INIT ALTRET(BAILOUT);
       32     3897        /**/
       33     3898        /*  There seems to be a host/FEP timing crock here.  Host would like to       */
       34     3899        /*  start out with a WRITE of the OPEN-REQUEST.  The DCB event gets lost      */
       35     3900        /*  somewhere if PIGLET waits for any period of time before M$OPENing         */
       36     3901        /*  his DCB to the host.  To insure things are cool, we start by having the   */
       37     3902        /*  host listen for a garbage message.  Sigh.                                 */
       38     3903        /*                                                                            */
       39     3904        /*  To make it all official, this message has its own type field.             */
       40     3905        /**/
       41     3906    1             HOST_MES_LEN = SIZEC(KP_MSG.HEAD);
       42     3907    1             KP_MSG.HEAD = '0'B;
       43     3908    1             KP_MSG.HEAD.MSG_TYPE = %KP_INITED_MSG#;
       44     3909    1             KP_MSG.HEAD.OPERATION_STATUS = %E$KP_ALLOK;
       45     3910    1             CALL KOH$HOST_IO (%KOH_WRITE_HOST#) ALTRET(WERE_DOOMED);
       46     3911        /**/
       47     3912        /*  Spin forever while all the dirty work is done in the event handler  */
       48     3913        /**/
       49     3914    2             DO WHILE (THINGS_ARE_ROSY);
       50     3915    2                CALL KOU$WAITSECS (MAIN_WAIT) ALTRET(WERE_DOOMED);
       51     3916    2                END;                       /* END DO WHILE                       */
       52     3917        /**/
       53     3918    1   WERE_DOOMED: ;
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:3    
       54     3919    1             CALL KOI$CLEANUP;
       55     3920    1   BAILOUT:  ;
       56     3921    1             RETURN;
       57     3922    1             END PIGLET;
       58     3923        %EOD;

PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:4    
--  Include file information  --

   KP_PERR_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PIGLET.

   Procedure PIGLET requires 83 words for executable code.
   Procedure PIGLET requires 4 words of local(AUTO) storage.

PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:5    

 Object Unit name= PIGLET                                     File name= KOA$MAIN.:E05TOU
 UTS= JUL 30 '97 01:13:25.68 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   DCB   even  none     0      0  M$HOST
    1   Proc  even  none    83     53  PIGLET
    2  RoData even  none     5      5  PIGLET

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Main       0  PIGLET

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       0 KOI$INIT
 yes     yes           Std       1 KOH$HOST_IO
 yes     yes           Std       1 KOU$WAITSECS
         yes           Std       0 KOI$CLEANUP
                       nStd      0 X6A_MAUTO
                       nStd      0 X6A_MARET
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:6    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     DEBUGGING                        r    MAIN_WAIT                             KH_CHNHI
     KH_CHNLOW                             HOST_MES_LEN                          HOST_BUF$
     THINGS_ARE_ROSY                       M$HOST                           r    G$ROS$
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:7    


        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        PIGLET: PROC MAIN;

      6   1 000000  D380 0000 0000  xent PIGLET          LNJ,B5   X6A_MAUTO
          1 000003       0004 0000                       DC       4,0

        7        7        /**/
        8        8        /*  INCLUDE FILES  */
        9        9        /**/
       10       10        %INCLUDE KO_DATA_R;
       11     3757        %INCLUDE KP_PERR_C;
       12     3822        /**/
       13     3823        /*  ENTRY DCLS  */
       14     3824        /**/
       15     3825        %KO_ENTRIES (OMIT=KOA$MAIN);
       16     3881        %EJECT;
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:8    
       17     3882        /**/
       18     3883        /*  As soon as we are downloaded, we go to work.  This makes debugging        */
       19     3884        /*  difficult since you can't set a breakpoint in a user that hasn't been     */
       20     3885        /*  downloaded yet.  To fix this, we insert a 'loop forever' here.  Once we   */
       21     3886        /*  are ready to debug, we plant a breakpoint and exit the loop.  Then GO.    */
       22     3887        /**/
       23     3888    2             DO WHILE (DEBUGGING);

   3888   1 000005  8980 0000 0000  xsym                 CMZ      DEBUGGING
          1 000008  0881 0005                            BAGE     s:3896,PREL

       24     3889    2                END;

   3889   1 00000A  8980 0000 0000  xsym                 CMZ      DEBUGGING
          1 00000D  087D                                 BAL      s:3889,SPREL

       25     3890        /**/
       26     3891        /*N*Initialize the world and prime the pump with an outstanding host READ.    */
       27     3892        /*  At least, that's what we WANT to do.  Since M$READ/WAIT=NO is not         */
       28     3893        /*  implemented, we'll settle for opening the path to the host.  When         */
       29     3894        /*  WAIT=NO starts to work, the priming READ should go here.                  */
       30     3895        /**/
       31     3896    1             CALL KOI$INIT ALTRET(BAILOUT);

   3896   1 00000E  CBF0 0000                            LAB,B4   0,IMO
          1 000010  E380 0000 0000  xent                 LNJ,B6   KOI$INIT
          1 000013       003D                            DC       s:3915,PREL

       32     3897        /**/
       33     3898        /*  There seems to be a host/FEP timing crock here.  Host would like to       */
       34     3899        /*  start out with a WRITE of the OPEN-REQUEST.  The DCB event gets lost      */
       35     3900        /*  somewhere if PIGLET waits for any period of time before M$OPENing         */
       36     3901        /*  his DCB to the host.  To insure things are cool, we start by having the   */
       37     3902        /*  host listen for a garbage message.  Sigh.                                 */
       38     3903        /*                                                                            */
       39     3904        /*  To make it all official, this message has its own type field.             */
       40     3905        /**/
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:9    
       41     3906    1             HOST_MES_LEN = SIZEC(KP_MSG.HEAD);

   3906   1 000014  6C12                                 LDV,R6   18
          1 000015  EF00 0000 0000  xsym                 STR,R6   HOST_MES_LEN

       42     3907    1             KP_MSG.HEAD = '0'B;

   3907   1 000018  EC80 0000 0000  xsym                 LDB,B6   HOST_BUF$
          1 00001B  5C12                                 LDV,R5   18
          1 00001C  0021                                 ALR      ;
          1 00001D       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 00001F       4006 0000                                ALPHANUM(0,B6,,R5,FILL)

       43     3908    1             KP_MSG.HEAD.MSG_TYPE = %KP_INITED_MSG#;

   3908   1 000021  4C0C                                 LDV,R4   12
          1 000022  437F                                 CSYNC    s:3908,SPREL
          1 000023  EC80 0000 0000  xsym                 LDB,B6   HOST_BUF$
          1 000026  C786                                 STH,R4   ,B6

       44     3909    1             KP_MSG.HEAD.OPERATION_STATUS = %E$KP_ALLOK;

   3909   1 000027  B870 00C8                            LDR,R3   200,IMO
          1 000029  EC80 0000 0000  xsym                 LDB,B6   HOST_BUF$
          1 00002C  BAC6 0001                            SRM,R3,'00FF'X    1,B6
          1 00002E       00FF

       45     3910    1             CALL KOH$HOST_IO (%KOH_WRITE_HOST#) ALTRET(WERE_DOOMED);

   3910   1 00002F  BB80 0000 0001  02                   LAB,B3   +1
          1 000032  CBF0 0100                            LAB,B4   256,IMO
          1 000034  E380 0000 0000  xent                 LNJ,B6   KOH$HOST_IO
          1 000037       0013                            DC       s:3915,PREL

       46     3911        /**/
       47     3912        /*  Spin forever while all the dirty work is done in the event handler  */
       48     3913        /**/
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:10   
       49     3914    2             DO WHILE (THINGS_ARE_ROSY);

   3914   1 000038  8980 0000 0000  xsym                 CMZ      THINGS_ARE_ROSY
          1 00003B  0881 000E                            BAGE     s:3915,PREL

       50     3915    2                CALL KOU$WAITSECS (MAIN_WAIT) ALTRET(WERE_DOOMED);

   3915   1 00003D  BB80 0000 0003  02                   LAB,B3   +3
          1 000040  CBF0 0100                            LAB,B4   256,IMO
          1 000042  E380 0000 0000  xent                 LNJ,B6   KOU$WAITSECS
          1 000045       0005                            DC       s:3915,PREL

       51     3916    2                END;                       /* END DO WHILE                       */

   3916   1 000046  8980 0000 0000  xsym                 CMZ      THINGS_ARE_ROSY
          1 000049  0874                                 BAL      s:3915,SPREL

   3915   1                              WERE_DOOMED     null
       52     3917        /**/
       53     3918    1   WERE_DOOMED: ;
       54     3919    1             CALL KOI$CLEANUP;

   3919   1 00004A  CBF0 0000            WERE_DOOMED     LAB,B4   0,IMO
          1 00004C  E380 0000 0000  xent                 LNJ,B6   KOI$CLEANUP
          1 00004F       0001                            DC       s:3915,PREL

   3915   1                              BAILOUT         null
       55     3920    1   BAILOUT:  ;
       56     3921    1             RETURN;

   3921   1 000050  C380 0000 0000  xent BAILOUT         LNJ,B4   X6A_MARET
       57     3922    1             END PIGLET;
       58     3923        %EOD;

PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:11   
--  Include file information  --

   KP_PERR_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PIGLET.
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:12   

 **** Variables and constants ****

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 DEBUGGING                  0-0-0/w PTR         r     1 HOST_BUF$
     0-0-0/w SBIN(16)    r     1 HOST_MES_LEN               0-0-0/w SBIN(16)    r     1 MAIN_WAIT
     0-0-0/b BIT         r     1 THINGS_ARE_ROSY

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(16528) r     1 KP_MSG


   Procedure PIGLET requires 83 words for executable code.
   Procedure PIGLET requires 4 words of local(AUTO) storage.
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:13   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:14   
          MINI XREF LISTING

BAILOUT
      3915**LABEL    3896--CALLALT
DEBUGGING
      3151**DCL      3888>>DOWHILE
HOST_BUF$
      3383**DCL      3583--IMP-PTR  3907>>ASSIGN   3908>>ASSIGN   3909>>ASSIGN
HOST_MES_LEN
      3383**DCL      3906<<ASSIGN
KH_CHNHI
      3166**DCL      3167--REDEF
KH_CHNLOW
      3167**DCL      3168--REDEF
KOH$HOST_IO
      3843**DCL-ENT  3910--CALL
KOI$CLEANUP
      3846**DCL-ENT  3919--CALL
KOI$INIT
      3849**DCL-ENT  3896--CALL
KOU$WAITSECS
      3878**DCL-ENT  3915--CALL
KP_MSG.HEAD
      3584**DCL      3906--ASSIGN   3907<<ASSIGN
KP_MSG.HEAD.MSG_TYPE
      3585**DCL      3908<<ASSIGN
KP_MSG.HEAD.OPERATION_STATUS
      3588**DCL      3909<<ASSIGN
KP_MSG.TDATA
      3609**DCL      3610--REDEF    3611--REDEF    3616--REDEF    3630--REDEF    3635--REDEF    3639--REDEF
      3645--REDEF    3648--REDEF
MAIN_WAIT
      3152**DCL      3915<>CALL
PIGLET_SEGMENT.BASE
PL6.E3A0      #001=PIGLET File=KOA$MAIN.:E05TSI                                  WED 07/30/97 01:13 Page:15   
      3503**DCL      3503--REDEF
THINGS_ARE_ROSY
      3438**DCL      3914>>DOWHILE
WERE_DOOMED
      3915**LABEL    3910--CALLALT  3915--CALLALT

PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:16   
       59        1        /*T***********************************************************/
       60        2        /*T*                                                         */
       61        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       62        4        /*T*                                                         */
       63        5        /*T***********************************************************/
       64        6        KOA$MAIN_EVENT: PROC ASYNC;
       65        7        /**/
       66        8        /*  KOA$MAIN_EVENT                                                            */
       67        9        /*   This ASYNC routine is called when any event happens.  All we do is       */
       68       10        /*   take a look at the event code and hand it off to the appropriate routine */
       69       11        /*   for handling.                                                            */
       70       12        /*                                                                            */
       71       13        /* Things are slightly complicated by the monitor:  M$READ/WAIT=NO is not     */
       72       14        /* yet implemented.  To simulate it, an event is assigned to ANY operations   */
       73       15        /* involving the DCB.  When such an event is detected (and it indicates that  */
       74       16        /* data is available), a M$READ/WAIT=YES is issued and the resulting data     */
       75       17        /* is processed.                                                              */
       76       18        /**/
       77       19        /*  INCLUDE FILES  */
       78       20        /**/
       79       21        %INCLUDE KO_DATA_R;
       80     3768        /**/
       81     3769        /*  ENTRY DCLS  */
       82     3770        /**/
       83     3771        %KO_ENTRIES (OMIT=KOA$MAIN_EVENT);
       84     3827        %KH_ENTDEFS;
       85     3834        %EJECT;
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:17   
       86     3835        /**/
       87     3836        /*  LOCAL AUTO  */
       88     3837        /**/
       89     3838    1   DCL EVENT_CODE SBIN WORD AUTO;
       90     3839    1   DCL EXCFR$ PTR AUTO;
       91     3840        /**/
       92     3841        /*  BASED STRUCTURES  */
       93     3842        /**/
       94     3843        %G$EXCFR (FPTN = G$EXCFR,
       95     3844                  STCLASS = "BASED(EXCFR$)");
       96     4226        %G$TCB (FPTN = G$TCB,
       97     4227                STCLASS = BASED);
       98     4248        %EJECT;
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:18   
       99     4249    1             IF THINGS_ARE_ROSY THEN
      100     4250    2                DO;
      101     4251        /**/
      102     4252        /*  Find the code for this EVENT  */
      103     4253        /**/
      104     4254    2                   EXCFR$ = G$TCB$ -> G$TCB.STK$;
      105     4255    2                   EVENT_CODE = G$EXCFR.TRLR.EVID;
      106     4256        /**/
      107     4257        /*  Call the right routine for this event  */
      108     4258        /**/
      109     4259    3                   DO CASE(EVENT_CODE);
      110     4260    3                      CASE(%EVENT_DISK_DONE#);
      111     4261    3                        CALL KOE$DEVICE_EVENT ALTRET(BAD_NEWS);
      112     4262    3                      CASE(%EVENT_NA_INTERFACE#);
      113     4263        /* CALL KHA$ADMIN; throw it away - it'll only trap trying to set a clock */
      114     4264    3                      CASE(%EVENT_HOST_DONE#);
      115     4265    3                        IF G$EXCFR.TRLR.SUBC = %G_DATA_AVL# THEN
      116     4266    4                           DO;             /* Data available from host           */
      117     4267    4                             CALL KOH$HOST_IO (%KOH_READ_HOST#)
      118     4268    5                               WHENALTRETURN DO;
      119     4269    5                                  IF MONERR.ERR# = %E$NODAT
      120     4270    5                                   THEN    /* No data after all!                 */
      121     4271    5                                     GOTO FINIS;
      122     4272    5                                  ELSE     /* Something unexpected               */
      123     4273    5                                     GOTO BAD_NEWS;
      124     4274    5                                  END;
      125     4275    4                             CALL KOE$HOST_EVENT ALTRET(BAD_NEWS);
      126     4276    4                             END;
      127     4277    3                      CASE(ELSE);
      128     4278    3   BAD_NEWS:            THINGS_ARE_ROSY = '0'B;
      129     4279    3                      END;                     /* END DO CASE                        */
      130     4280    2                   END;
      131     4281    1   FINIS:    RETURN;
      132     4282        /**/
      133     4283    1             END KOA$MAIN_EVENT;

PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:19   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOA$MAIN_EVENT.

   Procedure KOA$MAIN_EVENT requires 83 words for executable code.
   Procedure KOA$MAIN_EVENT requires 8 words of local(AUTO) storage.

    No errors detected in file KOA$MAIN.:E05TSI    .

PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:20   

 Object Unit name= KOA$MAIN_EVENT                             File name= KOA$MAIN.:E05TOU
 UTS= JUL 30 '97 01:13:45.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   DCB   even  none     0      0  M$HOST
    1   Proc  even  none    83     53  KOA$MAIN_EVENT
    2  RoData even  none     3      3  KOA$MAIN_EVENT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes     Async       0  KOA$MAIN_EVENT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       0 KOE$DEVICE_EVENT
 yes     yes           Std       1 KOH$HOST_IO
 yes     yes           Std       0 KOE$HOST_EVENT
                       nStd      0 X6A_AAUTO
                       nStd      0 X6A_AARET
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:21   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KH_CHNHI                              KH_CHNLOW                             HOST_BUF$
     THINGS_ARE_ROSY                       MONERR                                G$TCB$
     M$HOST                           r    G$ROS$
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:22   


       59        1        /*T***********************************************************/
       60        2        /*T*                                                         */
       61        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       62        4        /*T*                                                         */
       63        5        /*T***********************************************************/
       64        6        KOA$MAIN_EVENT: PROC ASYNC;

      6   1 000000  D380 0000 0000  xent KOA$MAIN_EVENT  LNJ,B5   X6A_AAUTO
          1 000003       0008 0000                       DC       8,0

       65        7        /**/
       66        8        /*  KOA$MAIN_EVENT                                                            */
       67        9        /*   This ASYNC routine is called when any event happens.  All we do is       */
       68       10        /*   take a look at the event code and hand it off to the appropriate routine */
       69       11        /*   for handling.                                                            */
       70       12        /*                                                                            */
       71       13        /* Things are slightly complicated by the monitor:  M$READ/WAIT=NO is not     */
       72       14        /* yet implemented.  To simulate it, an event is assigned to ANY operations   */
       73       15        /* involving the DCB.  When such an event is detected (and it indicates that  */
       74       16        /* data is available), a M$READ/WAIT=YES is issued and the resulting data     */
       75       17        /* is processed.                                                              */
       76       18        /**/
       77       19        /*  INCLUDE FILES  */
       78       20        /**/
       79       21        %INCLUDE KO_DATA_R;
       80     3768        /**/
       81     3769        /*  ENTRY DCLS  */
       82     3770        /**/
       83     3771        %KO_ENTRIES (OMIT=KOA$MAIN_EVENT);
       84     3827        %KH_ENTDEFS;
       85     3834        %EJECT;
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:23   
       86     3835        /**/
       87     3836        /*  LOCAL AUTO  */
       88     3837        /**/
       89     3838    1   DCL EVENT_CODE SBIN WORD AUTO;
       90     3839    1   DCL EXCFR$ PTR AUTO;
       91     3840        /**/
       92     3841        /*  BASED STRUCTURES  */
       93     3842        /**/
       94     3843        %G$EXCFR (FPTN = G$EXCFR,
       95     3844                  STCLASS = "BASED(EXCFR$)");
       96     4226        %G$TCB (FPTN = G$TCB,
       97     4227                STCLASS = BASED);
       98     4248        %EJECT;
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:24   
       99     4249    1             IF THINGS_ARE_ROSY THEN

   4249   1 000005  8980 0000 0000  xsym                 CMZ      THINGS_ARE_ROSY
          1 000008  0881 0047                            BAGE     s:4280,PREL

      100     4250    2                DO;

      101     4251        /**/
      102     4252        /*  Find the code for this EVENT  */
      103     4253        /**/
      104     4254    2                   EXCFR$ = G$TCB$ -> G$TCB.STK$;

   4254   1 00000A  EC80 0000 0000  xsym                 LDB,B6   G$TCB$
          1 00000D  DCC6 0002                            LDB,B5   2,B6
          1 00000F  DFC7 0005                            STB,B5   EXCFR$,AUTO

      105     4255    2                   EVENT_CODE = G$EXCFR.TRLR.EVID;

   4255   1 000011  E845 002A                            LDR,R6   42,B5
          1 000013  EF47 0004                            STR,R6   EVENT_CODE,AUTO

      106     4256        /**/
      107     4257        /*  Call the right routine for this event  */
      108     4258        /**/
      109     4259    3                   DO CASE(EVENT_CODE);

   4259   1 000015  B856                                 LDR,R3   R6
          1 000016  3D04                                 CMV,R3   4
          1 000017  0281 0035                            BGE      s:4277,PREL
          1 000019  A830 0000 001F  01                   LDR,R2   s:4259+10,R3
          1 00001C  83A0 0000 0023  01                   JMP      s:4261,R2
          1 00001F       002A                            DC       s:4277,PREL
          1 000020       0000                            DC       s:4261,PREL
          1 000021       0008                            DC       s:4265,PREL
          1 000022       002D                            DC       s:4280,PREL

      110     4260    3                      CASE(%EVENT_DISK_DONE#);
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:25   

      111     4261    3                        CALL KOE$DEVICE_EVENT ALTRET(BAD_NEWS);

   4261   1 000023  CBF0 0000                            LAB,B4   0,IMO
          1 000025  E380 0000 0000  xent                 LNJ,B6   KOE$DEVICE_EVENT
          1 000028       0025                            DC       s:4277,PREL
          1 000029  0F81 0026                            B        s:4280,PREL

      112     4262    3                      CASE(%EVENT_NA_INTERFACE#);

      113     4263        /* CALL KHA$ADMIN; throw it away - it'll only trap trying to set a clock */
      114     4264    3                      CASE(%EVENT_HOST_DONE#);

      115     4265    3                        IF G$EXCFR.TRLR.SUBC = %G_DATA_AVL# THEN

   4265   1 00002B  D845 0029                            LDR,R5   41,B5
          1 00002D  5D04                                 CMV,R5   4
          1 00002E  0981 0021                            BNE      s:4280,PREL

      116     4266    4                           DO;             /* Data available from host           */

      117     4267    4                             CALL KOH$HOST_IO (%KOH_READ_HOST#)

   4267   1 000030  BB80 0000 0001  02                   LAB,B3   +1
          1 000033  CBF0 0100                            LAB,B4   256,IMO
          1 000035  E380 0000 0000  xent                 LNJ,B6   KOH$HOST_IO
          1 000038       0003                            DC       s:4269,PREL
          1 000039  0F81 000B                            B        s:4275,PREL

      118     4268    5                               WHENALTRETURN DO;

      119     4269    5                                  IF MONERR.ERR# = %E$NODAT

   4269   1 00003B  E800 0000 0001  xsym                 LDR,R6   MONERR+1
          1 00003E  6043                                 SOR,R6   3
          1 00003F  E970 0440                            CMR,R6   1088,IMO
          1 000041  0901 000E                            BE       s:4280,PREL
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:26   

      120     4270    5                                   THEN    /* No data after all!                 */
      121     4271    5                                     GOTO FINIS;
      122     4272    5                                  ELSE     /* Something unexpected               */
      123     4273    5                                     GOTO BAD_NEWS;

   4273   1 000043  0F81 0009                            B        s:4277,PREL

      124     4274    5                                  END;
      125     4275    4                             CALL KOE$HOST_EVENT ALTRET(BAD_NEWS);

   4275   1 000045  CBF0 0000                            LAB,B4   0,IMO
          1 000047  E380 0000 0000  xent                 LNJ,B6   KOE$HOST_EVENT
          1 00004A       0003                            DC       s:4277,PREL

      126     4276    4                             END;

   4276   1 00004B  0F81 0004                            B        s:4280,PREL

      127     4277    3                      CASE(ELSE);

      128     4278    3   BAD_NEWS:            THINGS_ARE_ROSY = '0'B;

   4278   1 00004D  8700 0000 0000  xsym BAD_NEWS        CL       THINGS_ARE_ROSY

      129     4279    3                      END;                     /* END DO CASE                       */

      130     4280    2                   END;

      131     4281    1   FINIS:    RETURN;

   4281   1 000050  C380 0000 0000  xent FINIS           LNJ,B4   X6A_AARET
      132     4282        /**/
      133     4283    1             END KOA$MAIN_EVENT;

PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:27   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOA$MAIN_EVENT.
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:28   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w SBIN(16)    r     1 EVENT_CODE                 5-0-0/w PTR         r     1 EXCFR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$TCB$                     0-0-0/w PTR         r     1 HOST_BUF$
     0-0-0/w STRC(32)    r     1 MONERR                     0-0-0/b BIT         r     1 THINGS_ARE_ROSY

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(736)   r     1 G$EXCFR                    0-0-0/w STRC(96)    r     1 G$TCB


   Procedure KOA$MAIN_EVENT requires 83 words for executable code.
   Procedure KOA$MAIN_EVENT requires 8 words of local(AUTO) storage.

    No errors detected in file KOA$MAIN.:E05TSI    .
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:29   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:30   
          MINI XREF LISTING

BAD_NEWS
      4278**LABEL    4261--CALLALT  4273--GOTO     4275--CALLALT
EVENT_CODE
      3838**DCL      4255<<ASSIGN   4259>>DOCASE
EXCFR$
      3839**DCL      3858--IMP-PTR  4254<<ASSIGN   4255>>ASSIGN   4265>>IF
FINIS
      4281**LABEL    4271--GOTO
G$EXCFR.P$$
      3913**DCL      3913--REDEF    3913--REDEF
G$EXCFR.PREVSZ
      3863**DCL      3863--REDEF
G$EXCFR.TRLR.EVID
      4150**DCL      4168--REDEF    4176--REDEF    4176--REDEF    4255>>ASSIGN
G$EXCFR.TRLR.SUBC
      4127**DCL      4127--REDEF    4145--REDEF    4149--REDEF    4149--REDEF    4265>>IF
G$TCB.STK$
      4245**DCL      4254>>ASSIGN
G$TCB$
      3767**DCL      4254>>ASSIGN
HOST_BUF$
      3394**DCL      3594--IMP-PTR
KH_CHNHI
      3177**DCL      3178--REDEF
KH_CHNLOW
      3178**DCL      3179--REDEF
KOE$DEVICE_EVENT
      3780**DCL-ENT  4261--CALL
KOE$HOST_EVENT
      3783**DCL-ENT  4275--CALL
KOH$HOST_IO
      3789**DCL-ENT  4267--CALL
PL6.E3A0      #002=KOA$MAIN_EVENT File=KOA$MAIN.:E05TSI                          WED 07/30/97 01:13 Page:31   
KP_MSG.TDATA
      3620**DCL      3621--REDEF    3622--REDEF    3627--REDEF    3641--REDEF    3646--REDEF    3650--REDEF
      3656--REDEF    3659--REDEF
MONERR.ERR#
      3493**DCL      4269>>IF
PIGLET_SEGMENT.BASE
      3514**DCL      3514--REDEF
THINGS_ARE_ROSY
      3449**DCL      4249>>IF       4278<<ASSIGN
