VERSION E05

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:1    
        1        1        /*M*  VXQ$SORT    Performs a sort  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC  */
        8        8        /*P*  NAME: VXQ$SORT
        9        9              PURPOSE: Performs a sort on names or values
       10       10              DESCRIPTION: Performs a sort on names or values
       11       11              REFERENCE: Knuth, D. E., The Art of Computer Programming,
       12       12                         Addison Wesley, Vol. 3, 1973, pp 114-123.
       13       13                                                      */
       14       14        /*D*  NAME: VXQ$SORT
       15       15              ENTRY: VXQ$SORT_V
       16       16              CALL: CALL VXQ$SORT(NAME$, START$, STOP$, SZ,   TP,   N_D,       TYES);
       17       17                    CALL VXQ$SORT_V(NAME$, START$, STOP$, SZ,   TP,   N_D,       TYES);
       18       18              INPUT: NAME$   - Pointer to start of name pool
       19       19                     START$  - Pointer to beginning of list to be searched
       20       20                     STOP$   - Pointer to end of the list ...
       21       21                     SZ      - Size in words of an item in the list
       22       22                     TP      - Switch which indicates type of sort;
       23       23                               0=>by value; 1=>by name
       24       24                     N_D     -  Index into list item where relative word displacement
       25       25                                to its associated name resides
       26       26                     TYPE    - Type of record to be sorted by value.
       27       27              OUTPUT: The list in sorted ascending order
       28       28              DESCRIPTION: Performs a sort on a list bounded by START$
       29       29                           and STOP$. The sorting technique employed is a partition
       30       30                           exchange sort. Each list during its initial pass is
       31       31                           broken into 3 partitions such that each element of the
       32       32                           first partition is smaller than all elements of the
       33       33                           third partition( conversely, each element of the third
       34       34                           partition is larger than all elements of the first
       35       35                           partition). The second partition has exactly 1 entry
       36       36                           and is in its proper position  with respect to the
       37       37                           sort. Thus, partitions 1 and 3 need to be processed.
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:2    
       38       38                           The shorter of 1 and 3 is selected for processing
       39       39                           while the longer is stacked. The selected list(1 or 3)
       40       40                           becomes the initial list and the process is repeated,
       41       41                           provided the list is sufficiently "large". If it is
       42       42                           not sufficiently large, a straight selection sort is
       43       43                           performed on the (sub-)list. The next (sub-)list is
       44       44                           then taken off the stack and processed. This
       45       45                           procedure occurs iteratively until all (sub-)lists
       46       46                           are processes and the algorithm terminates when a
       47       47                           pop off an empty stack occurs.
       48       48                                                                     */
       49       49        VXQ$SORT :
       50       50              PROC( NAME$, START$, STOP$, SZ, TP, N_D, TYPE ) NOAUTO;
       51       51        %INCLUDE VX_INC_C;
       52    10767        %INCLUDE B_SEGIDS_C;
       53    11306        %BANNER( ARG="GET_KEY MACRO" );

             11314    1   /*******************************************************************************
             11315    1   *                                                                              *
             11316    1   *                          GET_KEY MACRO                                           *
             11317    1   *                                                                              *
             11318    1   *******************************************************************************/

       54    11322
       55    11323        %MACRO GET_KEY ( KEY=KEY, ITEM$=ITEM$ );
       56    11324
       57    11325        %LSET KEY_A = CHARTEXT(CONCAT(TEXTCHAR(KEY),'_A'));
       58    11326
       59    11327              DO CASE( TYPE );
       60    11328                CASE( %TYPSECT );
       61    11329                  KEY = ITEM$ -> VX$SC.ADDRESS;
       62    11330                  IF ITEM$ -> VX$SC.ATTR.SEGMENT
       63    11331                  THEN %KEY_A(0) = ITEM$ -> VX$SC.SEG + BITBIN(%DS3SID);
       64    11332                  ELSE IF ITEM$->VX$SC.TYPE = %DCBSECTION THEN %KEY_A(0) = BITBIN(%ROSID);
       65    11333                CASE( %TYPEDEF );
       66    11334                  KEY = ITEM$ -> VXD$TMPLT.AD.OFFSET;
       67    11335                CASE( %TYPSDEF );
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:3    
       68    11336                  IF ITEM$ -> VXD$TMPLT.CONSTNT
       69    11337                  THEN KEY = ITEM$ -> VXD$TMPLT.VALUE;
       70    11338                  ELSE KEY = ITEM$ -> VXD$TMPLT.AD.OFFSET;
       71    11339                CASE( %TYPSEGDEF );
       72    11340                  IF ITEM$ -> VXD$TMPLT.CONSTNT THEN DO;
       73    11341                      %KEY_A(0) = ITEM$ -> VX$TMPLT.A(1);
       74    11342                      %KEY_A(1) = ITEM$ -> VX$TMPLT.A(0);
       75    11343                     END;
       76    11344                  ELSE DO;
       77    11345                      %KEY_A(0) = ITEM$ -> B$SEGDEF.SEG.SEGID;
       78    11346                      %KEY_A(1) = ITEM$->B$SEGDEF.AD.OU.OFFSET;
       79    11347                     END;
       80    11348                END;
       81    11349        %MEND;
       82    11350
       83    11351              %VX$SC;

             11364    1   /*******************************************************************************
             11365    1   *                                                                              *
             11366    1   *                          VX$SC                                                 *
             11367    1   *                                                                              *
             11368    1   *******************************************************************************/

             11373    1   DCL 1 VX$SC BASED ALIGNED,
             11374    1         2 SEG UBIN(3) UNAL,
             11375                /*K*  SEG - The segment number of this section */
             11376    1         2 TYPE UBIN(6) UNAL,
             11377                /*K*  TYPE -
             11378                      Type code      Section type
             11379                      ---------      ------------
             11380                          0          Data control section with write access.
             11381                          1          Procedure control section.
             11382                          2          Unlabeled common, name pointer must be zero.
             11383                          3          Labeled common, with mandatory name pointer.
             11384                                     This is for labeled common which must be
             11385                                     in the root.
             11386                          4          Labeled common, with mandatory name pointer.
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:4    
             11387                                     This is for labeled common which need not
             11388                                     be in the root.
             11389                          5          DCB, word 1 is name pointer.
             11390                          6          Data control section with read only access,
             11391                                     word 1 = 0 or name pointer.      */
             11392    1         2 EMPTY BIT(1) UNAL,
             11393                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11394                      section is of size zero.  */
             11395    1         2 ATTR UNAL,
             11396    1           3 INT  UBIN(2) UNAL,
             11397                  /*K*  INT is the Section initialization.  */
             11398    1           3 SEGMENT BIT(1) UNAL,
             11399                  /*K* SEGMENT is set if the Section is defined in a data
             11400                       segment.  */
             11401    1           3 ALL BIT(1) UNAL,
             11402                  /*K*  ALL is set if the Section is allocated.  */
             11403    1           3 PRE_DCB BIT(1) UNAL,
             11404                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11405    1           3 MES_INIT BIT(1) UNAL,
             11406    1           3 ALIGN UBIN(2) UNAL,
             11407                  /*K*  ALIGN is the Section alignment.  */
             11408    1         2 ADDRESS UBIN HALF UNAL,
             11409                /*K*  ADDRESS is the address within the Instruction Segment of
             11410                      the entry point of the external procedure.  */
             11411    1         2 NAME_DISP SBIN HALF UNAL,
             11412                /*K*  NAME_DISP is the Name index.  */
             11413    1         2 SIZE UBIN HALF UNAL,
             11414                /*K*  SIZE is the size, in words, of the section.  */
             11415    1         2 NODE# UBIN HALF UNAL,
             11416                /*K*  NODE# is the Node number of section.  */
             11417    1         2 COM_LINK UBIN HALF UNAL;
             11418                /*K*  COM_LINK is used internally by linker to link common sections */

             11428    1   /*******************************************************************************
             11429    1   *                                                                              *
             11430    1   *                          VX$SECT                                                 *
             11431    1   *                                                                              *
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:5    
             11432    1   *******************************************************************************/

             11437    1   DCL 1 VX$SECT BASED ALIGNED,
             11438    1         2 TYPE UBIN BYTE UNAL,
             11439                /*K*  TYPE -
             11440                      Type code      Section type
             11441                      ---------      ------------
             11442                          0          Data control section with write access.
             11443                          1          Procedure control section.
             11444                          2          Unlabeled common, name pointer must be zero.
             11445                          3          Labeled common, with mandatory name pointer.
             11446                                     This is for labeled common which must be
             11447                                     in the root.
             11448                          4          Labeled common, with mandatory name pointer.
             11449                                     This is for labeled common which need not
             11450                                     be in the root.
             11451                          5          DCB, word 1 is name pointer.
             11452                          6          Data control section with read only access,
             11453                                     word 1 = 0 or name pointer.
             11454                          7          Constant labeled common, with mandatory name pointer.
             11455                                     This is for labeled common which must be
             11456                                     in the root.
             11457                          8          Constant labeled common, with mandatory name pointer.
             11458                                     This is for labeled common which need not
             11459                                     be in the root.                        */
             11460    1         2 * BIT(1),
             11461                /*K*  * is reserved for future use and must be zero. */
             11462    1         2 INITZERO BIT(1),
             11463                /*K*  INITZERO - if 1, initialize with zero.  */
             11464    1         2 INITUTS BIT(1),
             11465                /*K*  INITUTS - if 1, initialize with UTS.  */
             11466    1         2 SEGMENT BIT(1),
             11467                /*K*  SEGMENT - if 1, specifies that this section is
             11468                                to be placed in the segment specified by
             11469                                SEG_NPOINTER.  */
             11470    1         2 * BIT(3),
             11471                /*K*  * is reserved for future use and must be zero. */
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:6    
             11472    1         2 BOUND UBIN(2) UNAL,
             11473                /*K*  BOUND - bits 6-7 - defines starting location.
             11474                              00 - starts on even word
             11475                              01 - starts on odd word
             11476                              10 - starts on multiple of 8
             11477                              11 - starts on page boundary     */
             11478    1         2 SIZE UBIN HALF UNAL,
             11479                /*K*  SIZE is the size, in words, of the section.  */
             11480    1         2 NPOINTER SBIN HALF UNAL,
             11481                /*K*  NPOINTER is the word displacement into the name record
             11482                      (TYPE 1) locating the name of this section.  If the
             11483                      field is negative, the section has no name.  */
             11484    1         2 MBZ UBIN HALF UNAL,
             11485                /*K*  MBZ is reserved for future expansion and must be zero. */
             11486    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11487                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11488                      Section.  The name must be a valid segment name
             11489                      recognized by the linker.  */
             11490    1         2 G66 REDEF MBZ,
             11491                /*K*  G66 is not used on CP-6. */
             11492    1           3 * BIT(9),
             11493    1           3 NSAB BIT(9);
       84    11496              %VXD$TMPLT( SEGDEF=YES );

             11509    1   /*******************************************************************************
             11510    1   *                                                                              *
             11511    1   *                          VXD$TMPLT                                               *
             11512    1   *                                                                              *
             11513    1   *******************************************************************************/

             11517        /*
             11518                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11519                  ENTDEFs, SYMDEFs and SEGDEFs.
             11520        */
             11522    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11523    1         2 VALUE SBIN UNAL,
             11524                /*K*  VALUE is the value if this entry is a constant.  */
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:7    
             11525    1         2 AD REDEF VALUE,
             11526                /*K*  AD is the address if this entry is not constant.  */
             11527    1           3 LFLAGS UNAL,
             11528                  /*K*  LFLAGS is the field reserved for loader to flag load
             11529                        time attributes of the definition and must be zero
             11530                        in the object unit. */
             11531    1             4 SOURCE UBIN(3) UNAL,
             11532                    /*K*  SOURCE - Source of this DEF */
             11533    1             4 DEFINED BIT(1) UNAL,
             11534                    /*K*  DEFINED - Set if this DEF defined */
             11535    1             4 MULTIPLE BIT(1) UNAL,
             11536                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11537    1             4 USED BIT(1) UNAL,
             11538                    /*K*  USED - Set if this DEF is used. */
             11539    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11540                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11541                        than 2048 (RU).  */
             11542    1           3 SECTNUM UBIN(11) UNAL,
             11543                  /*K*  SECTNUM contains an entry number into the section
             11544                        table (TYPE 3).  */
             11545    1           3 ISADDR UBIN HALF UNAL,
             11546                  /*K*  ISADDR - Is Address (RU)  */
             11547    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11548                  /*K*  OFFSET is the word offset from the origin of the section. */
             11549    1         2 NPOINTER SBIN HALF UNAL,
             11550                /*K*  NPOINTER is a word displacement into the name record
             11551                      (TYPE 1) locating the name (of this entry). */
             11552    1         2 CONSTNT BIT(1) UNAL,
             11553                /*K*  CONSTNT is a flag bit to determine the interpretation
             11554                      of word 0.
             11555                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11556                                    SECTNUM, and ISADDR or OFFSET.
             11557                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11558    1         2 LFLAGS UNAL,
             11559                /*K*  LFLAGS is the field reserved for loader to flag load
             11560                      time attributes and must be zero in the object unit. */
             11561    1           3 MULTIPLE BIT(1) UNAL,
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:8    
             11562                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11563    1           3 USED BIT(1) UNAL,
             11564                  /*K*  USED - Set if this DEF is used. */
             11565    1           3 SOURCE UBIN(4) UNAL,
             11566                  /*K*  SOURCE - Source of this DEF */
             11567    1           3 IS_DCB BIT(1) UNAL,
             11568                  /*K* IS_DCB - Set if this is a DCB */
             11569    1           3 * BIT(10) UNAL,
             11570                  /*K*  * is reserved for future use and must be zero.  */
             11571    1         2 PROTECTION REDEF LFLAGS,
             11572                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11573    1           3 TYPE UBIN(5) UNAL,
             11574                  /*K*  TYPE is the Protection type.  */
             11575    1           3 * UBIN(12) UNAL;
             11576                  /*K*  * is reserved for future use and must be zero.  */

             11595    1   /*******************************************************************************
             11596    1   *                                                                              *
             11597    1   *                          B$SEGDEF                                                *
             11598    1   *                                                                              *
             11599    1   *******************************************************************************/

             11604    1   DCL 1 B$SEGDEF BASED ALIGNED,
             11605    1         2 VALUE SBIN UNAL,
             11606                /*K*  VALUE is the value of the constant segment definition
             11607                      pointer if CONSTANT=1.  */
             11608    1         2 S REDEF VALUE,
             11609    1           3 * UBIN(24) UNAL,
             11610    1           3 SEGID UBIN(12) UNAL,
             11611                  /*K*  SEGID - Segid of constant value */
             11612    1         2 AD REDEF VALUE,
             11613                /*K*  AD - Address (not constant )  */
             11614    1           3 LFLAGS UNAL,
             11615                  /*K*  LFLAGS is the field reserved for loader to flag load
             11616                        time attributes of the definition and must be zero
             11617                        in object unit.  */
             11618    1             4 SOURCE UBIN(3) UNAL,
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:9    
             11619                    /*K*  SOURCE - Source of this SEGDEF */
             11620    1             4 DEFINED BIT(1) UNAL,
             11621                    /*K*  DEFINED - Set if this SEGDEF is defined */
             11622    1             4 MULTIPLE BIT(1) UNAL,
             11623                    /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11624    1             4 USED BIT(1) UNAL,
             11625                    /*K*  USED - Set if this SEGDEF is used */
             11626    1             4 * BIT(3) UNAL,
             11627                    /*K*  * is reserved for future use and must be zero. */
             11628    1           3 OU UNAL,
             11629    1             4 SECTNUM UBIN BYTE UNAL,
             11630                    /*K*  SECTNUM is the Section number.  */
             11631    1             4 OFFSET UBIN HALF UNAL,
             11632                    /*K*  OFFSET is the offset within section. */
             11633    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11634                  /*K*  ISADDR - IS Address (RU)  */
             11635    1         2 NPOINTER SBIN HALF UNAL,
             11636                /*K*  NPOINTER is the word displacement into DEFNAMES record. */
             11637    1         2 CONSTNT BIT(1) UNAL,
             11638                /*K*  CONSTNT is a flag bit to determine the interpretation
             11639                      of word 0.
             11640                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11641                                    SECTNUM, and ISADDR or OFFSET.
             11642                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11643    1         2 LFLAGS UNAL,
             11644                /*K*  LFLAGS is the field reserved for loader to flag load time
             11645                      attributes and must be zero in the object unit.  */
             11646    1           3 MULTIPLE BIT(1) UNAL,
             11647                  /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11648    1           3 USED BIT(1) UNAL,
             11649                  /*K*  USED - Set if this SEGDEF is used */
             11650    1           3 SOURCE UBIN(4) UNAL,
             11651                  /*K*  SOURCE - Source of this SEGDEF */
             11652    1           3 * BIT(11) UNAL,
             11653                  /*K*  * is reserved for future use and must be zero. */
             11654    1         2 SEG REDEF LFLAGS UNAL,          /* Not constant SEGDEF (RU) */
             11655    1           3 TYPE UBIN(5) UNAL,            /* Segment protection type (RU) */
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:10   
             11656    1           3 SEGID UBIN(12) UNAL;          /* Segid of segment (RU) */
       85    11660        %SET LISTMAC='1'B;
       86    11661        %SET LISTSUB='1'B;
       87    11662        %SET LISTEXP='1'B;
       88    11663              %BANNER( ARG=SUBS );
             11664        %LSET LISTDIR='0'B;

             11671    1   /*******************************************************************************
             11672    1   *                                                                              *
             11673    1   *                          SUBS                                                 *
             11674    1   *                                                                              *
             11675    1   *******************************************************************************/

       89    11679              %B$RECORDSUBS;
             11680        %EQU TYPHEAD=0 ;
             11681        %EQU TYPDNAM=1 ;
             11682        %EQU TYPRNAM=2 ;
             11683        %EQU TYPSECT=3 ;
             11684        %EQU TYPEDEF=4 ;
             11685        %EQU TYPEREF=5 ;
             11686        %EQU TYPSDEF=6 ;
             11687        %EQU TYPSREF=7 ;
             11688        %EQU TYPSEGDEF=8 ;
             11689        %EQU TYPSEGREF=9 ;
             11690        %EQU TYPPROG=10 ;
             11691        %EQU SUBTYPPROG=0 ;
             11692        %EQU SUBTYPREL=1 ;
             11693        %EQU TYPLOGBLK=11 ;
             11694        %EQU TYPINTNTRY=12 ;
             11695        %EQU TYPEXST=13 ;
             11696        %EQU TYPVREBL=14 ;
             11697        %EQU TYPDBGNAM=15 ;
             11698        %EQU TYPLV1LB=16 ;
             11699        %EQU TYPLV1=17 ;
             11700        %EQU TYPDATASEG=18 ;
             11701        %EQU TYPRUM=20 ;
             11702        %EQU TYPBIRTH=21 ;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:11   
             11703        %EQU TYPPLOVER=22 ;
             11704        %EQU TYPCOMPID=23 ;
             11705        %EQU TYPROS=30 ;
       90    11707              %B$SECTIONSUBS;
             11708        %EQU DATASECTION=0 ;
             11709        %EQU CODESECTION=1 ;
             11710        %EQU UCOMSECTION=2 ;
             11711        %EQU RLCOMSECTION=3 ;
             11712        %EQU LCOMSECTION=4 ;
             11713        %EQU DCBSECTION=5 ;
             11714        %EQU ROSECTION=6 ;
             11715        %EQU RORLCOMSECTION=7 ;
             11716        %EQU ROLCOMSECTION=8 ;
             11717        %EQU EVENBOUNDSECTION=0 ;
             11718        %EQU ODDBOUNDSECTION=1 ;
             11719        %EQU EIGHTBOUNDSECTION=2 ;
             11720        %EQU PAGEBOUNDSECTION=3 ;
       91    11722              %BANNER( ARG=B$DNAME );
             11723        %LSET LISTDIR='0'B;

             11730    1   /*******************************************************************************
             11731    1   *                                                                              *
             11732    1   *                          B$DNAME                                                 *
             11733    1   *                                                                              *
             11734    1   *******************************************************************************/

       92    11738              %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11739            %LSET STR='BASED        ';
             11740            %IF
             11741                '0'B;
             11743            %ELSE;
             11744                %LSET INIT=/*;
             11745            %ENDIF;
             11746    1   DCL 1 B$DNAME BASED ALIGNED,
             11747    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11748                /*K*  COUNT is the number of characters in the name */
             11749            %IF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:12   
             11750                '0'B;
             11753            %ELSE;
             11754    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11755            %ENDIF;
       93    11757              %TMPLT;
             11758        %LSET LISTDIR='0'B;

             11769    1   /*******************************************************************************
             11770    1   *                                                                              *
             11771    1   *                          TMPLT                                                 *
             11772    1   *                                                                              *
             11773    1   *******************************************************************************/

             11778    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11779    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11780    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11781    1         2 W       REDEF     A,            /* By name                            */
             11782    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11783    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       94    11786        %SET LISTDIR='0'B;

             11798    1   /*******************************************************************************
             11799    1   *                                                                              *
             11800    1   *                          PARAMETERS                                              *
             11801    1   *                                                                              *
             11802    1   *******************************************************************************/

       99    11806    1   DCL NAME$           PTR;                /* Pointer to B$DNAME pool */
      100    11807    1   DCL START$          PTR;                /* Starting ptr */
      101    11808    1   DCL STOP$           PTR;                /* Stoping  ptr */
      102    11809    1   DCL SZ              UBIN(36);           /* Size in words of an entry */
      103    11810    1   DCL TP              UBIN(36);           /* 0=> by value; 1=> by dname   */
      104    11811    1   DCL N_D             UBIN(36);   /* Word displacement to name pointer field */
      105    11812    1   DCL TYPE            UBIN(36);       /* Type of record to be sorted by value */

             11821    1   /*******************************************************************************
             11822    1   *                                                                              *
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:13   
             11823    1   *                          UBIN                                                 *
             11824    1   *                                                                              *
             11825    1   *******************************************************************************/

      107    11829    1   DCL NAME_DISP       UBIN(36)  ALIGNED   STATIC;
      108    11830    1   DCL PARTITION_SIZE   UBIN(36)  ALIGNED   STATIC;
      109    11831    1   DCL I                UBIN(36)  ALIGNED   STATIC;
      110    11832    1   DCL 1 BUF STATIC CHAR (12);
      111    11833    1   DCL KEY_VALUE1      UBIN(36)  ALIGNED   STATIC;
      112    11834    1   DCL KEY_VALUE1_A (0:1) REDEF KEY_VALUE1 UBIN HALF UNAL;
      113    11835    1   DCL KEY_VALUE2      UBIN(36)  ALIGNED   STATIC;
      114    11836    1   DCL KEY_VALUE2_A (0:1) REDEF KEY_VALUE2 UBIN HALF UNAL;
      115    11837    1   DCL IEPS            UBIN(36)  ALIGNED   STATIC;

             11846    1   /*******************************************************************************
             11847    1   *                                                                              *
             11848    1   *                          SBIN                                                 *
             11849    1   *                                                                              *
             11850    1   *******************************************************************************/

      117    11854    1   DCL SIZE            SBIN(36)  ALIGNED   STATIC;
      118    11855    1   DCL PIVOT           SBIN(36)  ALIGNED   STATIC;
      119    11856    1   DCL STACK_TOP       SBIN WORD ALIGNED STATIC INIT ( -1 );
      120    11857    1   DCL MSIZE           SBIN WORD ALIGNED STATIC;
      121    11858    1   DCL HIGH_TO_ILOW    SBIN WORD ALIGNED STATIC;
      122    11859    1   DCL ILOW_TO_LOW     SBIN WORD ALIGNED STATIC;

             11868    1   /*******************************************************************************
             11869    1   *                                                                              *
             11870    1   *                          PTR                                                 *
             11871    1   *                                                                              *
             11872    1   *******************************************************************************/

      124    11876    1   DCL N$              PTR       ALIGNED   STATIC;
      125    11877    1   DCL Q$              PTR       ALIGNED   STATIC;
      126    11878    1   DCL LOW$            PTR       ALIGNED   STATIC;
      127    11879    1   DCL HIGH$           PTR       ALIGNED   STATIC;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:14   
      128    11880    1   DCL ILOW$           PTR       ALIGNED   STATIC;
      129    11881    1   DCL JHIGH$          PTR       ALIGNED   STATIC;
      130    11882    1   DCL R$              PTR       ALIGNED   STATIC;
      131    11883    1   DCL KEY$            PTR       ALIGNED   STATIC;
      132    11884    1   DCL STACK_LOW$(0:18)    PTR       ALIGNED   STATIC;
      133    11885    1   DCL STACK_HIGH$(0:18)    PTR       ALIGNED   STATIC;
      134    11886        /**/
      135    11887        /**/
      136    11888        /**/
      137    11889    1   DCL VX$CHARS CHAR (VX_TARGET_COUNT) ALIGNED BASED;
      142    11894        %EJECT;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:15   
      143    11895                                                /*
      144    11896                                                                     Sort by name
      145    11897
      146    11898                                                  move params into local variables
      147    11899                                                */
      148    11900    1         IF START$ = STOP$ THEN RETURN;
      149    11901    1         STACK_LOW$(0) = START$;
      150    11902    1         STACK_HIGH$(0) = STOP$;
      151    11903    1         STACK_TOP = 0;
      152    11904    1         SIZE = SZ;
      153    11905    1         VX_TARGET_COUNT = SIZE * @CHAR_WORD;
      154    11906    1         NAME_DISP = N_D;
      155    11907    1         N$ = NAME$;
      156    11908    1         IEPS  = 10 * SIZE;
      157    11909    1         MSIZE = - SIZE;
      158    11910
      159    11911              %SUB KEY = "KEY$ -> B$DNAME.TEXT";
      160    11912              %SUB KEY_J = "PINCRW(N$,JHIGH$->VX$TMPLT.A(NAME_DISP))->B$DNAME.TEXT";
      161    11913              %SUB KEY_I = "PINCRW(N$,ILOW$->VX$TMPLT.A(NAME_DISP))->B$DNAME.TEXT";
      162    11914
      163    11915    2         DO WHILE ( '1'B );                /* Do forever */
      164    11916        /*
      165    11917                                      Get pointers which delimit partition from
      166    11918                                                               top of stacks */
      167    11919    2             IF STACK_TOP < 0 THEN RETURN; /* Done sorting */
      168    11920    2             LOW$ = STACK_LOW$(STACK_TOP);
      169    11921    2             HIGH$ = STACK_HIGH$(STACK_TOP);
      170    11922    2             STACK_TOP = STACK_TOP - 1;
      171    11923    3             DO WHILE( POFFW(HIGH$, LOW$)  <  IEPS );
      172    11924        /*
      173    11925                                              Use insertion method to sort the partition
      174    11926        */
      175    11927    3                 PARTITION_SIZE = (POFFW( HIGH$, LOW$) + SIZE ) / SIZE;
      176    11928    3                 JHIGH$ = PINCRW(HIGH$, MSIZE);
      177    11929    4                 DO I = 2 TO PARTITION_SIZE;
      178    11930    4                     BUF = JHIGH$ -> VX$CHARS;
      179    11931    4                     ILOW$ = PINCRW( JHIGH$, SIZE );
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:16   
      180    11932    4                     KEY$ = PINCRW( N$, JHIGH$ -> VX$TMPLT.A(NAME_DISP) );
      181    11933    5                     DO WHILE ( ILOW$ <= HIGH$ );
      182    11934    5                         IF KEY_I >= KEY THEN GOTO EXIT_1;
      183    11935    5                         PINCRW(ILOW$, MSIZE) -> VX$CHARS = ILOW$ ->VX$CHARS;
      184    11936    5                         ILOW$ = PINCRW( ILOW$, SIZE );
      185    11937    5                        END;
      186    11938    4   EXIT_1:           ;
      187    11939    4                     PINCRW(ILOW$, MSIZE) -> VX$CHARS  = BUF;
      188    11940    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );
      189    11941    4                    END;                   /* do i = 2 to partition_size   */
      190    11942    3                 IF STACK_TOP < 0 THEN RETURN; /* Done with the sort */
      191    11943        /*
      192    11944                                          Get pointers for next partition
      193    11945        */
      194    11946    3                 LOW$ = STACK_LOW$(STACK_TOP);
      195    11947    3                 HIGH$ = STACK_HIGH$(STACK_TOP);
      196    11948    3                 STACK_TOP = STACK_TOP - 1;
      197    11949    3                END;                   /* end do while(poffw(HIGH$,LOW$) < ieps) */
      198    11950        /*
      199    11951                                         Use quick sort method to get next partition(s)*/
      200    11952    2             ILOW$ = LOW$;
      201    11953    2             JHIGH$ = HIGH$;
      202    11954        /*
      203    11955                                          Choose pivot element and switch
      204    11956                                          the low element and the pivot element
      205    11957                                          saving the pivot element in buf
      206    11958        */
      207    11959    2             PIVOT = VX_LINK_UTS/2;
      208    11960    2             PIVOT = MOD( PIVOT,
      209    11961    2                     (POFFW( HIGH$, LOW$ ) / SIZE + 1 ) ) * SIZE;
      210    11962    2             Q$ = PINCRW( LOW$, PIVOT );
      211    11963    2             BUF = Q$ -> VX$CHARS;
      212    11964    2             Q$ -> VX$CHARS = LOW$ -> VX$CHARS;
      213    11965    2             LOW$ -> VX$CHARS = BUF;
      214    11966    2             KEY$ = PINCRW( N$, LOW$ -> VX$TMPLT.A( NAME_DISP ) );
      215    11967
      216    11968
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:17   
      217    11969    3             DO WHILE ( JHIGH$  >  ILOW$ );
      218    11970    4                 DO WHILE (JHIGH$ > LOW$ );
      219    11971    4                     IF KEY_J > KEY THEN   /* Move JHIGH$ towards ILOW$ */
      220    11972    4                         JHIGH$ = PINCRW( JHIGH$, MSIZE );
      221    11973    4                     ELSE GOTO EXIT_2;
      222    11974    4                    END;
      223    11975    3   EXIT_2:       ;
      224    11976    3                 IF JHIGH$ > ILOW$ THEN
      225    11977    4                 DO;
      226    11978    4                     ILOW$ -> VX$CHARS = JHIGH$ -> VX$CHARS;
      227    11979    4                     ILOW$ = PINCRW( ILOW$, SIZE );
      228    11980    5                     DO WHILE ( ILOW$ < HIGH$ );
      229    11981    5                         IF KEY_I < KEY THEN /* Move ILOW$ toward JHIGH$ */
      230    11982    5                             ILOW$ = PINCRW( ILOW$, SIZE );
      231    11983    5                         ELSE GOTO EXIT_3;
      232    11984    5                        END;
      233    11985    4   EXIT_3:           ;
      234    11986    4                     IF JHIGH$ > ILOW$ THEN
      235    11987    5                     DO;
      236    11988    5                         JHIGH$ -> VX$CHARS = ILOW$ -> VX$CHARS;
      237    11989    5                         JHIGH$ = PINCRW( JHIGH$, MSIZE );
      238    11990    5                        END;
      239    11991    4                     ELSE ILOW$ = JHIGH$;  /* No more passes */
      240    11992    4                    END;                   /* end if JHIGH$ > ILOW$ then */
      241    11993    3                 ELSE JHIGH$ = ILOW$;      /* No more passes  */
      242    11994    3                END;                       /* end do while(JHIGH$ > ILOW$) */
      243    11995                                    /* Assign pivot element to the correct position */
      244    11996    2             JHIGH$ -> VX$CHARS =  BUF;
      245    11997        /*
      246    11998                                      Put the pointers which delimit the partitions onto
      247    11999                                      the stacks.  Largest partition first.
      248    12000        */
      249    12001    2             HIGH_TO_ILOW = POFFW( HIGH$, ILOW$ );
      250    12002    2             ILOW_TO_LOW  = POFFW( ILOW$, LOW$  );
      251    12003    3             IF HIGH_TO_ILOW > ILOW_TO_LOW THEN DO;
      252    12004    4                 IF HIGH_TO_ILOW > SIZE THEN DO;
      253    12005    4                     STACK_TOP = STACK_TOP + 1;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:18   
      254    12006    4                     STACK_LOW$(STACK_TOP) = PINCRW(ILOW$, SIZE);
      255    12007    4                     STACK_HIGH$(STACK_TOP) = HIGH$;
      256    12008    4                    END;
      257    12009    4                 IF ILOW_TO_LOW > SIZE THEN DO;
      258    12010    4                     STACK_TOP = STACK_TOP + 1;
      259    12011    4                     STACK_LOW$(STACK_TOP) = LOW$;
      260    12012    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );
      261    12013    4                    END;
      262    12014    3                END;
      263    12015    3             ELSE DO;
      264    12016    4                 IF ILOW_TO_LOW > SIZE THEN DO;
      265    12017    4                     STACK_TOP = STACK_TOP + 1;
      266    12018    4                     STACK_LOW$(STACK_TOP) = LOW$;
      267    12019    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );
      268    12020    4                    END;
      269    12021    4                 IF HIGH_TO_ILOW > SIZE THEN DO;
      270    12022    4                     STACK_TOP = STACK_TOP + 1;
      271    12023    4                     STACK_LOW$(STACK_TOP) = PINCRW( ILOW$, SIZE );
      272    12024    4                     STACK_HIGH$(STACK_TOP) = HIGH$;
      273    12025    4                    END;
      274    12026    3                END;
      275    12027    2            END;                           /* do forever */
      276    12028        %EJECT;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:19   
      277    12029              %BANNER(ARG=VXQ$SORT_V ENTRY );

             12037    2   /*******************************************************************************
             12038    2   *                                                                              *
             12039    2   *                          VXQ$SORT_V ENTRY                                        *
             12040    2   *                                                                              *
             12041    2   *******************************************************************************/

      278    12045
      279    12046
      280    12047
      281    12048    1   VXQ$SORT_V :
      282    12049    1         ENTRY ( NAME$, START$, STOP$, SZ, TP, N_D, TYPE );
      283    12050        /*
      284    12051                              Sort by value
      285    12052        */
      286    12053    1         IF START$ = STOP$ THEN RETURN;
      287    12054    1         STACK_LOW$(0) = START$;
      288    12055    1         STACK_HIGH$(0) = STOP$;
      289    12056    1         STACK_TOP = 0;
      290    12057    1         SIZE = SZ;
      291    12058    1         VX_TARGET_COUNT = SIZE * @CHAR_WORD;
      292    12059    1         IEPS  = 10 * SIZE;
      293    12060    1         MSIZE = - SIZE;
      294    12061
      295    12062    2         DO WHILE ( '1'B );                /* Do forever */
      296    12063        /*
      297    12064                                      Get pointers which delimit partition from
      298    12065                                                               top of stacks */
      299    12066    2             IF STACK_TOP < 0 THEN RETURN; /* Done sorting  */
      300    12067    2             LOW$ = STACK_LOW$(STACK_TOP);
      301    12068    2             HIGH$ = STACK_HIGH$(STACK_TOP);
      302    12069    2             STACK_TOP = STACK_TOP - 1;
      303    12070    3             DO WHILE( POFFW(HIGH$, LOW$)  <  IEPS );
      304    12071        /*
      305    12072                                              Use insertion method to sort the partition
      306    12073        */
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:20   
      307    12074    3                 PARTITION_SIZE = ( POFFW( HIGH$, LOW$ ) + SIZE ) / SIZE;
      308    12075    3                 JHIGH$ = PINCRW(HIGH$, MSIZE);
      309    12076    4                 DO I = 2 TO PARTITION_SIZE;
      310    12077    4                     BUF = JHIGH$ -> VX$CHARS;
      311    12078    4                     ILOW$ = PINCRW( JHIGH$, SIZE );
      312    12079                          %GET_KEY( KEY=KEY_VALUE1, ITEM$=JHIGH$ );
      313    12104    5                     DO WHILE ( ILOW$ <= HIGH$ );
      314    12105                              %GET_KEY( KEY=KEY_VALUE2, ITEM$=ILOW$ );
      315    12130    5                         IF KEY_VALUE2 >= KEY_VALUE1 THEN GOTO JUMP_OUT_1;
      316    12131    5                         PINCRW(ILOW$, MSIZE) -> VX$CHARS = ILOW$ ->VX$CHARS;
      317    12132    5                         ILOW$ = PINCRW( ILOW$, SIZE );
      318    12133    5                        END;
      319    12134    4   JUMP_OUT_1:
      320    12135    4                     PINCRW(ILOW$, MSIZE) -> VX$CHARS  = BUF;
      321    12136    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );
      322    12137    4                    END;                   /* do i = 2 to partition_size  */
      323    12138    3                 IF STACK_TOP < 0 THEN RETURN; /* Done with the sort */
      324    12139        /*
      325    12140                                          Get pointers for next partition
      326    12141        */
      327    12142    3                 LOW$ = STACK_LOW$(STACK_TOP);
      328    12143    3                 HIGH$ = STACK_HIGH$(STACK_TOP);
      329    12144    3                 STACK_TOP = STACK_TOP - 1;
      330    12145    3                END;                   /* end do while(poffw(HIGH$,LOW$) < ieps) */
      331    12146        /*
      332    12147                                         Use quick sort method to get next partition(s)*/
      333    12148    2             ILOW$ = LOW$;
      334    12149    2             JHIGH$ = HIGH$;
      335    12150        /*
      336    12151                                          Choose pivot element and switch
      337    12152                                          the low element and the pivot element
      338    12153                                          saving the pivot element in buf
      339    12154        */
      340    12155    2             PIVOT = VX_LINK_UTS/2;
      341    12156    2             PIVOT = MOD( PIVOT,
      342    12157    2                     (POFFW( HIGH$, LOW$ ) / SIZE + 1 ) ) * SIZE;
      343    12158    2             Q$ = PINCRW( LOW$, PIVOT );
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:21   
      344    12159    2             BUF = Q$ -> VX$CHARS;
      345    12160    2             Q$ -> VX$CHARS = LOW$ -> VX$CHARS;
      346    12161    2             LOW$ -> VX$CHARS = BUF;
      347    12162                  %GET_KEY( KEY=KEY_VALUE1, ITEM$=LOW$ );
      348    12187
      349    12188
      350    12189    3             DO WHILE ( JHIGH$  >  ILOW$ );
      351    12190    4                 DO WHILE ( JHIGH$ > LOW$ );
      352    12191                          %GET_KEY( KEY=KEY_VALUE2, ITEM$=JHIGH$ );
      353    12216    4                     IF KEY_VALUE1 >= KEY_VALUE2 THEN GOTO JUMP_OUT_2;
      354    12217                                                /* Move JHIGH$ towards ILOW$ */
      355    12218    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );
      356    12219    4                    END;
      357    12220    3   JUMP_OUT_2:
      358    12221    3                 IF JHIGH$ > ILOW$ THEN
      359    12222    4                 DO;
      360    12223    4                     ILOW$ -> VX$CHARS = JHIGH$ -> VX$CHARS;
      361    12224    4                     ILOW$ = PINCRW( ILOW$, SIZE );
      362    12225    5                     DO WHILE ( ILOW$ < HIGH$  );
      363    12226                              %GET_KEY( KEY=KEY_VALUE2, ITEM$=ILOW$ );
      364    12251    5                         IF KEY_VALUE1 <= KEY_VALUE2 THEN GOTO JUMP_OUT_3;
      365    12252                                                /* Move ILOW$ toward JHIGH$ */
      366    12253    5                         ILOW$ = PINCRW( ILOW$, SIZE );
      367    12254    5                        END;
      368    12255    4   JUMP_OUT_3:
      369    12256    5                     IF JHIGH$ > ILOW$ THEN DO;
      370    12257    5                         JHIGH$ -> VX$CHARS = ILOW$ -> VX$CHARS;
      371    12258    5                         JHIGH$ = PINCRW( JHIGH$, MSIZE );
      372    12259    5                        END;
      373    12260    4                     ELSE ILOW$ = JHIGH$;  /* No more passes */
      374    12261    4                    END;                   /* end if JHIGH$ > ILOW$ then */
      375    12262    3                 ELSE JHIGH$ = ILOW$;      /* No more passes  */
      376    12263    3                END;                       /* end do while(JHIGH$ > ILOW$) */
      377    12264                                    /* Assign pivot element to the correct position */
      378    12265    2             JHIGH$ -> VX$CHARS =  BUF;
      379    12266        /*
      380    12267                                      Put the pointers which delimit the partitions onto
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:22   
      381    12268                                      the stacks.  Largest partition first.
      382    12269        */
      383    12270    2             HIGH_TO_ILOW = POFFW( HIGH$, ILOW$ );
      384    12271    2             ILOW_TO_LOW  = POFFW( ILOW$, LOW$  );
      385    12272    3             IF HIGH_TO_ILOW > ILOW_TO_LOW THEN DO;
      386    12273    4                 IF HIGH_TO_ILOW > SIZE THEN DO;
      387    12274    4                     STACK_TOP = STACK_TOP + 1;
      388    12275    4                     STACK_LOW$(STACK_TOP) = PINCRW(ILOW$, SIZE);
      389    12276    4                     STACK_HIGH$(STACK_TOP) = HIGH$;
      390    12277    4                    END;
      391    12278    4                 IF ILOW_TO_LOW > SIZE THEN DO;
      392    12279    4                     STACK_TOP = STACK_TOP + 1;
      393    12280    4                     STACK_LOW$(STACK_TOP) = LOW$;
      394    12281    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );
      395    12282    4                    END;
      396    12283    3                END;
      397    12284    3             ELSE DO;
      398    12285    4                 IF ILOW_TO_LOW > SIZE THEN DO;
      399    12286    4                     STACK_TOP = STACK_TOP + 1;
      400    12287    4                     STACK_LOW$(STACK_TOP) = LOW$;
      401    12288    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );
      402    12289    4                    END;
      403    12290    4                 IF HIGH_TO_ILOW > SIZE THEN DO;
      404    12291    4                     STACK_TOP = STACK_TOP + 1;
      405    12292    4                     STACK_LOW$(STACK_TOP) = PINCRW( ILOW$, SIZE );
      406    12293    4                     STACK_HIGH$(STACK_TOP) = HIGH$;
      407    12294    4                    END;
      408    12295    3                END;
      409    12296    2            END;                           /* do forever */
      410    12297
      411    12298
      412    12299
      413    12300
      414    12301    1   END VXQ$SORT;

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:23   
--  Include file information  --

   B_SEGIDS_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXQ$SORT.

   Procedure VXQ$SORT requires 944 words for executable code.
   Procedure VXQ$SORT is declared NOAUTO and requires 72 words of local(STATIC) storage.

    No errors detected in file VXQ$SORT.:E05TSI    .

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:24   

 Object Unit name= VXQ$SORT                                   File name= VXQ$SORT.:E05TOU
 UTS= JUL 30 '97 08:34:39.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    72    110  VXQ$SORT
    1   DCB   even  none     0      0  M$UC
    2  LblCom even  none    96    140  VX_CONST_DCB
    3   Proc  even  none   944   1660  VXQ$SORT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        7  VXQ$SORT
     3    546                  yes      Std        7  VXQ$SORT_V

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_STATIC_N

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_OU_HEAD                            VX_LINK_UTS
     VX_ERRORS                             VX_TARGET_COUNT
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:25   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:26   


        1        1        /*M*  VXQ$SORT    Performs a sort  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC  */
        8        8        /*P*  NAME: VXQ$SORT
        9        9              PURPOSE: Performs a sort on names or values
       10       10              DESCRIPTION: Performs a sort on names or values
       11       11              REFERENCE: Knuth, D. E., The Art of Computer Programming,
       12       12                         Addison Wesley, Vol. 3, 1973, pp 114-123.
       13       13                                                      */
       14       14        /*D*  NAME: VXQ$SORT
       15       15              ENTRY: VXQ$SORT_V
       16       16              CALL: CALL VXQ$SORT(NAME$, START$, STOP$, SZ,   TP,   N_D,       TYES);
       17       17                    CALL VXQ$SORT_V(NAME$, START$, STOP$, SZ,   TP,   N_D,       TYES);
       18       18              INPUT: NAME$   - Pointer to start of name pool
       19       19                     START$  - Pointer to beginning of list to be searched
       20       20                     STOP$   - Pointer to end of the list ...
       21       21                     SZ      - Size in words of an item in the list
       22       22                     TP      - Switch which indicates type of sort;
       23       23                               0=>by value; 1=>by name
       24       24                     N_D     -  Index into list item where relative word displacement
       25       25                                to its associated name resides
       26       26                     TYPE    - Type of record to be sorted by value.
       27       27              OUTPUT: The list in sorted ascending order
       28       28              DESCRIPTION: Performs a sort on a list bounded by START$
       29       29                           and STOP$. The sorting technique employed is a partition
       30       30                           exchange sort. Each list during its initial pass is
       31       31                           broken into 3 partitions such that each element of the
       32       32                           first partition is smaller than all elements of the
       33       33                           third partition( conversely, each element of the third
       34       34                           partition is larger than all elements of the first
       35       35                           partition). The second partition has exactly 1 entry
       36       36                           and is in its proper position  with respect to the
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:27   
       37       37                           sort. Thus, partitions 1 and 3 need to be processed.
       38       38                           The shorter of 1 and 3 is selected for processing
       39       39                           while the longer is stacked. The selected list(1 or 3)
       40       40                           becomes the initial list and the process is repeated,
       41       41                           provided the list is sufficiently "large". If it is
       42       42                           not sufficiently large, a straight selection sort is
       43       43                           performed on the (sub-)list. The next (sub-)list is
       44       44                           then taken off the stack and processed. This
       45       45                           procedure occurs iteratively until all (sub-)lists
       46       46                           are processes and the algorithm terminates when a
       47       47                           pop off an empty stack occurs.
       48       48                                                                     */
       49       49        VXQ$SORT :
       50       50              PROC( NAME$, START$, STOP$, SZ, TP, N_D, TYPE ) NOAUTO;

     50  3 000000   000000 700200 xent  VXQ$SORT     TSX0  ! X66_STATIC_N
         3 000001   000000 000007 0                  ZERO    0,7

       51       51        %INCLUDE VX_INC_C;
       52    10767        %INCLUDE B_SEGIDS_C;
       53    11306        %BANNER( ARG="GET_KEY MACRO" );

             11314    1   /*******************************************************************************
             11315    1   *                                                                              *
             11316    1   *                          GET_KEY MACRO                                          *
             11317    1   *                                                                              *
             11318    1   *******************************************************************************/

       54    11322
       55    11323        %MACRO GET_KEY ( KEY=KEY, ITEM$=ITEM$ );
       56    11324
       57    11325        %LSET KEY_A = CHARTEXT(CONCAT(TEXTCHAR(KEY),'_A'));
       58    11326
       59    11327              DO CASE( TYPE );
       60    11328                CASE( %TYPSECT );
       61    11329                  KEY = ITEM$ -> VX$SC.ADDRESS;
       62    11330                  IF ITEM$ -> VX$SC.ATTR.SEGMENT
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:28   
       63    11331                  THEN %KEY_A(0) = ITEM$ -> VX$SC.SEG + BITBIN(%DS3SID);
       64    11332                  ELSE IF ITEM$->VX$SC.TYPE = %DCBSECTION THEN %KEY_A(0) = BITBIN(%ROSID);
       65    11333                CASE( %TYPEDEF );
       66    11334                  KEY = ITEM$ -> VXD$TMPLT.AD.OFFSET;
       67    11335                CASE( %TYPSDEF );
       68    11336                  IF ITEM$ -> VXD$TMPLT.CONSTNT
       69    11337                  THEN KEY = ITEM$ -> VXD$TMPLT.VALUE;
       70    11338                  ELSE KEY = ITEM$ -> VXD$TMPLT.AD.OFFSET;
       71    11339                CASE( %TYPSEGDEF );
       72    11340                  IF ITEM$ -> VXD$TMPLT.CONSTNT THEN DO;
       73    11341                      %KEY_A(0) = ITEM$ -> VX$TMPLT.A(1);
       74    11342                      %KEY_A(1) = ITEM$ -> VX$TMPLT.A(0);
       75    11343                     END;
       76    11344                  ELSE DO;
       77    11345                      %KEY_A(0) = ITEM$ -> B$SEGDEF.SEG.SEGID;
       78    11346                      %KEY_A(1) = ITEM$->B$SEGDEF.AD.OU.OFFSET;
       79    11347                     END;
       80    11348                END;
       81    11349        %MEND;
       82    11350
       83    11351              %VX$SC;

             11364    1   /*******************************************************************************
             11365    1   *                                                                              *
             11366    1   *                          VX$SC                                                 *
             11367    1   *                                                                              *
             11368    1   *******************************************************************************/

             11373    1   DCL 1 VX$SC BASED ALIGNED,
             11374    1         2 SEG UBIN(3) UNAL,
             11375                /*K*  SEG - The segment number of this section */
             11376    1         2 TYPE UBIN(6) UNAL,
             11377                /*K*  TYPE -
             11378                      Type code      Section type
             11379                      ---------      ------------
             11380                          0          Data control section with write access.
             11381                          1          Procedure control section.
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:29   
             11382                          2          Unlabeled common, name pointer must be zero.
             11383                          3          Labeled common, with mandatory name pointer.
             11384                                     This is for labeled common which must be
             11385                                     in the root.
             11386                          4          Labeled common, with mandatory name pointer.
             11387                                     This is for labeled common which need not
             11388                                     be in the root.
             11389                          5          DCB, word 1 is name pointer.
             11390                          6          Data control section with read only access,
             11391                                     word 1 = 0 or name pointer.      */
             11392    1         2 EMPTY BIT(1) UNAL,
             11393                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11394                      section is of size zero.  */
             11395    1         2 ATTR UNAL,
             11396    1           3 INT  UBIN(2) UNAL,
             11397                  /*K*  INT is the Section initialization.  */
             11398    1           3 SEGMENT BIT(1) UNAL,
             11399                  /*K* SEGMENT is set if the Section is defined in a data
             11400                       segment.  */
             11401    1           3 ALL BIT(1) UNAL,
             11402                  /*K*  ALL is set if the Section is allocated.  */
             11403    1           3 PRE_DCB BIT(1) UNAL,
             11404                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11405    1           3 MES_INIT BIT(1) UNAL,
             11406    1           3 ALIGN UBIN(2) UNAL,
             11407                  /*K*  ALIGN is the Section alignment.  */
             11408    1         2 ADDRESS UBIN HALF UNAL,
             11409                /*K*  ADDRESS is the address within the Instruction Segment of
             11410                      the entry point of the external procedure.  */
             11411    1         2 NAME_DISP SBIN HALF UNAL,
             11412                /*K*  NAME_DISP is the Name index.  */
             11413    1         2 SIZE UBIN HALF UNAL,
             11414                /*K*  SIZE is the size, in words, of the section.  */
             11415    1         2 NODE# UBIN HALF UNAL,
             11416                /*K*  NODE# is the Node number of section.  */
             11417    1         2 COM_LINK UBIN HALF UNAL;
             11418                /*K*  COM_LINK is used internally by linker to link common sections */
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:30   

             11428    1   /*******************************************************************************
             11429    1   *                                                                              *
             11430    1   *                          VX$SECT                                                *
             11431    1   *                                                                              *
             11432    1   *******************************************************************************/

             11437    1   DCL 1 VX$SECT BASED ALIGNED,
             11438    1         2 TYPE UBIN BYTE UNAL,
             11439                /*K*  TYPE -
             11440                      Type code      Section type
             11441                      ---------      ------------
             11442                          0          Data control section with write access.
             11443                          1          Procedure control section.
             11444                          2          Unlabeled common, name pointer must be zero.
             11445                          3          Labeled common, with mandatory name pointer.
             11446                                     This is for labeled common which must be
             11447                                     in the root.
             11448                          4          Labeled common, with mandatory name pointer.
             11449                                     This is for labeled common which need not
             11450                                     be in the root.
             11451                          5          DCB, word 1 is name pointer.
             11452                          6          Data control section with read only access,
             11453                                     word 1 = 0 or name pointer.
             11454                          7          Constant labeled common, with mandatory name pointer.
             11455                                     This is for labeled common which must be
             11456                                     in the root.
             11457                          8          Constant labeled common, with mandatory name pointer.
             11458                                     This is for labeled common which need not
             11459                                     be in the root.                        */
             11460    1         2 * BIT(1),
             11461                /*K*  * is reserved for future use and must be zero. */
             11462    1         2 INITZERO BIT(1),
             11463                /*K*  INITZERO - if 1, initialize with zero.  */
             11464    1         2 INITUTS BIT(1),
             11465                /*K*  INITUTS - if 1, initialize with UTS.  */
             11466    1         2 SEGMENT BIT(1),
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:31   
             11467                /*K*  SEGMENT - if 1, specifies that this section is
             11468                                to be placed in the segment specified by
             11469                                SEG_NPOINTER.  */
             11470    1         2 * BIT(3),
             11471                /*K*  * is reserved for future use and must be zero. */
             11472    1         2 BOUND UBIN(2) UNAL,
             11473                /*K*  BOUND - bits 6-7 - defines starting location.
             11474                              00 - starts on even word
             11475                              01 - starts on odd word
             11476                              10 - starts on multiple of 8
             11477                              11 - starts on page boundary     */
             11478    1         2 SIZE UBIN HALF UNAL,
             11479                /*K*  SIZE is the size, in words, of the section.  */
             11480    1         2 NPOINTER SBIN HALF UNAL,
             11481                /*K*  NPOINTER is the word displacement into the name record
             11482                      (TYPE 1) locating the name of this section.  If the
             11483                      field is negative, the section has no name.  */
             11484    1         2 MBZ UBIN HALF UNAL,
             11485                /*K*  MBZ is reserved for future expansion and must be zero. */
             11486    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11487                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11488                      Section.  The name must be a valid segment name
             11489                      recognized by the linker.  */
             11490    1         2 G66 REDEF MBZ,
             11491                /*K*  G66 is not used on CP-6. */
             11492    1           3 * BIT(9),
             11493    1           3 NSAB BIT(9);
       84    11496              %VXD$TMPLT( SEGDEF=YES );

             11509    1   /*******************************************************************************
             11510    1   *                                                                              *
             11511    1   *                          VXD$TMPLT                                              *
             11512    1   *                                                                              *
             11513    1   *******************************************************************************/

             11517        /*
             11518                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:32   
             11519                  ENTDEFs, SYMDEFs and SEGDEFs.
             11520        */
             11522    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11523    1         2 VALUE SBIN UNAL,
             11524                /*K*  VALUE is the value if this entry is a constant.  */
             11525    1         2 AD REDEF VALUE,
             11526                /*K*  AD is the address if this entry is not constant.  */
             11527    1           3 LFLAGS UNAL,
             11528                  /*K*  LFLAGS is the field reserved for loader to flag load
             11529                        time attributes of the definition and must be zero
             11530                        in the object unit. */
             11531    1             4 SOURCE UBIN(3) UNAL,
             11532                    /*K*  SOURCE - Source of this DEF */
             11533    1             4 DEFINED BIT(1) UNAL,
             11534                    /*K*  DEFINED - Set if this DEF defined */
             11535    1             4 MULTIPLE BIT(1) UNAL,
             11536                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11537    1             4 USED BIT(1) UNAL,
             11538                    /*K*  USED - Set if this DEF is used. */
             11539    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11540                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11541                        than 2048 (RU).  */
             11542    1           3 SECTNUM UBIN(11) UNAL,
             11543                  /*K*  SECTNUM contains an entry number into the section
             11544                        table (TYPE 3).  */
             11545    1           3 ISADDR UBIN HALF UNAL,
             11546                  /*K*  ISADDR - Is Address (RU)  */
             11547    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11548                  /*K*  OFFSET is the word offset from the origin of the section. */
             11549    1         2 NPOINTER SBIN HALF UNAL,
             11550                /*K*  NPOINTER is a word displacement into the name record
             11551                      (TYPE 1) locating the name (of this entry). */
             11552    1         2 CONSTNT BIT(1) UNAL,
             11553                /*K*  CONSTNT is a flag bit to determine the interpretation
             11554                      of word 0.
             11555                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11556                                    SECTNUM, and ISADDR or OFFSET.
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:33   
             11557                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11558    1         2 LFLAGS UNAL,
             11559                /*K*  LFLAGS is the field reserved for loader to flag load
             11560                      time attributes and must be zero in the object unit. */
             11561    1           3 MULTIPLE BIT(1) UNAL,
             11562                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11563    1           3 USED BIT(1) UNAL,
             11564                  /*K*  USED - Set if this DEF is used. */
             11565    1           3 SOURCE UBIN(4) UNAL,
             11566                  /*K*  SOURCE - Source of this DEF */
             11567    1           3 IS_DCB BIT(1) UNAL,
             11568                  /*K* IS_DCB - Set if this is a DCB */
             11569    1           3 * BIT(10) UNAL,
             11570                  /*K*  * is reserved for future use and must be zero.  */
             11571    1         2 PROTECTION REDEF LFLAGS,
             11572                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11573    1           3 TYPE UBIN(5) UNAL,
             11574                  /*K*  TYPE is the Protection type.  */
             11575    1           3 * UBIN(12) UNAL;
             11576                  /*K*  * is reserved for future use and must be zero.  */

             11595    1   /*******************************************************************************
             11596    1   *                                                                              *
             11597    1   *                          B$SEGDEF                                               *
             11598    1   *                                                                              *
             11599    1   *******************************************************************************/

             11604    1   DCL 1 B$SEGDEF BASED ALIGNED,
             11605    1         2 VALUE SBIN UNAL,
             11606                /*K*  VALUE is the value of the constant segment definition
             11607                      pointer if CONSTANT=1.  */
             11608    1         2 S REDEF VALUE,
             11609    1           3 * UBIN(24) UNAL,
             11610    1           3 SEGID UBIN(12) UNAL,
             11611                  /*K*  SEGID - Segid of constant value */
             11612    1         2 AD REDEF VALUE,
             11613                /*K*  AD - Address (not constant )  */
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:34   
             11614    1           3 LFLAGS UNAL,
             11615                  /*K*  LFLAGS is the field reserved for loader to flag load
             11616                        time attributes of the definition and must be zero
             11617                        in object unit.  */
             11618    1             4 SOURCE UBIN(3) UNAL,
             11619                    /*K*  SOURCE - Source of this SEGDEF */
             11620    1             4 DEFINED BIT(1) UNAL,
             11621                    /*K*  DEFINED - Set if this SEGDEF is defined */
             11622    1             4 MULTIPLE BIT(1) UNAL,
             11623                    /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11624    1             4 USED BIT(1) UNAL,
             11625                    /*K*  USED - Set if this SEGDEF is used */
             11626    1             4 * BIT(3) UNAL,
             11627                    /*K*  * is reserved for future use and must be zero. */
             11628    1           3 OU UNAL,
             11629    1             4 SECTNUM UBIN BYTE UNAL,
             11630                    /*K*  SECTNUM is the Section number.  */
             11631    1             4 OFFSET UBIN HALF UNAL,
             11632                    /*K*  OFFSET is the offset within section. */
             11633    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11634                  /*K*  ISADDR - IS Address (RU)  */
             11635    1         2 NPOINTER SBIN HALF UNAL,
             11636                /*K*  NPOINTER is the word displacement into DEFNAMES record. */
             11637    1         2 CONSTNT BIT(1) UNAL,
             11638                /*K*  CONSTNT is a flag bit to determine the interpretation
             11639                      of word 0.
             11640                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11641                                    SECTNUM, and ISADDR or OFFSET.
             11642                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11643    1         2 LFLAGS UNAL,
             11644                /*K*  LFLAGS is the field reserved for loader to flag load time
             11645                      attributes and must be zero in the object unit.  */
             11646    1           3 MULTIPLE BIT(1) UNAL,
             11647                  /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11648    1           3 USED BIT(1) UNAL,
             11649                  /*K*  USED - Set if this SEGDEF is used */
             11650    1           3 SOURCE UBIN(4) UNAL,
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:35   
             11651                  /*K*  SOURCE - Source of this SEGDEF */
             11652    1           3 * BIT(11) UNAL,
             11653                  /*K*  * is reserved for future use and must be zero. */
             11654    1         2 SEG REDEF LFLAGS UNAL,          /* Not constant SEGDEF (RU) */
             11655    1           3 TYPE UBIN(5) UNAL,            /* Segment protection type (RU) */
             11656    1           3 SEGID UBIN(12) UNAL;          /* Segid of segment (RU) */
       85    11660        %SET LISTMAC='1'B;
       86    11661        %SET LISTSUB='1'B;
       87    11662        %SET LISTEXP='1'B;
       88    11663              %BANNER( ARG=SUBS );
             11664        %LSET LISTDIR='0'B;

             11671    1   /*******************************************************************************
             11672    1   *                                                                              *
             11673    1   *                          SUBS                                                 *
             11674    1   *                                                                              *
             11675    1   *******************************************************************************/

       89    11679              %B$RECORDSUBS;
             11680        %EQU TYPHEAD=0 ;
             11681        %EQU TYPDNAM=1 ;
             11682        %EQU TYPRNAM=2 ;
             11683        %EQU TYPSECT=3 ;
             11684        %EQU TYPEDEF=4 ;
             11685        %EQU TYPEREF=5 ;
             11686        %EQU TYPSDEF=6 ;
             11687        %EQU TYPSREF=7 ;
             11688        %EQU TYPSEGDEF=8 ;
             11689        %EQU TYPSEGREF=9 ;
             11690        %EQU TYPPROG=10 ;
             11691        %EQU SUBTYPPROG=0 ;
             11692        %EQU SUBTYPREL=1 ;
             11693        %EQU TYPLOGBLK=11 ;
             11694        %EQU TYPINTNTRY=12 ;
             11695        %EQU TYPEXST=13 ;
             11696        %EQU TYPVREBL=14 ;
             11697        %EQU TYPDBGNAM=15 ;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:36   
             11698        %EQU TYPLV1LB=16 ;
             11699        %EQU TYPLV1=17 ;
             11700        %EQU TYPDATASEG=18 ;
             11701        %EQU TYPRUM=20 ;
             11702        %EQU TYPBIRTH=21 ;
             11703        %EQU TYPPLOVER=22 ;
             11704        %EQU TYPCOMPID=23 ;
             11705        %EQU TYPROS=30 ;
       90    11707              %B$SECTIONSUBS;
             11708        %EQU DATASECTION=0 ;
             11709        %EQU CODESECTION=1 ;
             11710        %EQU UCOMSECTION=2 ;
             11711        %EQU RLCOMSECTION=3 ;
             11712        %EQU LCOMSECTION=4 ;
             11713        %EQU DCBSECTION=5 ;
             11714        %EQU ROSECTION=6 ;
             11715        %EQU RORLCOMSECTION=7 ;
             11716        %EQU ROLCOMSECTION=8 ;
             11717        %EQU EVENBOUNDSECTION=0 ;
             11718        %EQU ODDBOUNDSECTION=1 ;
             11719        %EQU EIGHTBOUNDSECTION=2 ;
             11720        %EQU PAGEBOUNDSECTION=3 ;
       91    11722              %BANNER( ARG=B$DNAME );
             11723        %LSET LISTDIR='0'B;

             11730    1   /*******************************************************************************
             11731    1   *                                                                              *
             11732    1   *                          B$DNAME                                                *
             11733    1   *                                                                              *
             11734    1   *******************************************************************************/

       92    11738              %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11739            %LSET STR='BASED        ';
             11740            %IF
             11741                '0'B;
             11743            %ELSE;
             11744                %LSET INIT=/*;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:37   
             11745            %ENDIF;
             11746    1   DCL 1 B$DNAME BASED ALIGNED,
             11747    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11748                /*K*  COUNT is the number of characters in the name */
             11749            %IF
             11750                '0'B;
             11753            %ELSE;
             11754    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11755            %ENDIF;
       93    11757              %TMPLT;
             11758        %LSET LISTDIR='0'B;

             11769    1   /*******************************************************************************
             11770    1   *                                                                              *
             11771    1   *                          TMPLT                                                 *
             11772    1   *                                                                              *
             11773    1   *******************************************************************************/

             11778    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11779    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11780    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11781    1         2 W       REDEF     A,            /* By name                            */
             11782    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11783    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       94    11786        %SET LISTDIR='0'B;

             11798    1   /*******************************************************************************
             11799    1   *                                                                              *
             11800    1   *                          PARAMETERS                                             *
             11801    1   *                                                                              *
             11802    1   *******************************************************************************/

       99    11806    1   DCL NAME$           PTR;                /* Pointer to B$DNAME pool */
      100    11807    1   DCL START$          PTR;                /* Starting ptr */
      101    11808    1   DCL STOP$           PTR;                /* Stoping  ptr */
      102    11809    1   DCL SZ              UBIN(36);           /* Size in words of an entry */
      103    11810    1   DCL TP              UBIN(36);           /* 0=> by value; 1=> by dname   */
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:38   
      104    11811    1   DCL N_D             UBIN(36);   /* Word displacement to name pointer field */
      105    11812    1   DCL TYPE            UBIN(36);       /* Type of record to be sorted by value */

             11821    1   /*******************************************************************************
             11822    1   *                                                                              *
             11823    1   *                          UBIN                                                 *
             11824    1   *                                                                              *
             11825    1   *******************************************************************************/

      107    11829    1   DCL NAME_DISP       UBIN(36)  ALIGNED   STATIC;
      108    11830    1   DCL PARTITION_SIZE   UBIN(36)  ALIGNED   STATIC;
      109    11831    1   DCL I                UBIN(36)  ALIGNED   STATIC;
      110    11832    1   DCL 1 BUF STATIC CHAR (12);
      111    11833    1   DCL KEY_VALUE1      UBIN(36)  ALIGNED   STATIC;
      112    11834    1   DCL KEY_VALUE1_A (0:1) REDEF KEY_VALUE1 UBIN HALF UNAL;
      113    11835    1   DCL KEY_VALUE2      UBIN(36)  ALIGNED   STATIC;
      114    11836    1   DCL KEY_VALUE2_A (0:1) REDEF KEY_VALUE2 UBIN HALF UNAL;
      115    11837    1   DCL IEPS            UBIN(36)  ALIGNED   STATIC;

             11846    1   /*******************************************************************************
             11847    1   *                                                                              *
             11848    1   *                          SBIN                                                 *
             11849    1   *                                                                              *
             11850    1   *******************************************************************************/

      117    11854    1   DCL SIZE            SBIN(36)  ALIGNED   STATIC;
      118    11855    1   DCL PIVOT           SBIN(36)  ALIGNED   STATIC;
      119    11856    1   DCL STACK_TOP       SBIN WORD ALIGNED STATIC INIT ( -1 );
      120    11857    1   DCL MSIZE           SBIN WORD ALIGNED STATIC;
      121    11858    1   DCL HIGH_TO_ILOW    SBIN WORD ALIGNED STATIC;
      122    11859    1   DCL ILOW_TO_LOW     SBIN WORD ALIGNED STATIC;

             11868    1   /*******************************************************************************
             11869    1   *                                                                              *
             11870    1   *                          PTR                                                 *
             11871    1   *                                                                              *
             11872    1   *******************************************************************************/
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:39   

      124    11876    1   DCL N$              PTR       ALIGNED   STATIC;
      125    11877    1   DCL Q$              PTR       ALIGNED   STATIC;
      126    11878    1   DCL LOW$            PTR       ALIGNED   STATIC;
      127    11879    1   DCL HIGH$           PTR       ALIGNED   STATIC;
      128    11880    1   DCL ILOW$           PTR       ALIGNED   STATIC;
      129    11881    1   DCL JHIGH$          PTR       ALIGNED   STATIC;
      130    11882    1   DCL R$              PTR       ALIGNED   STATIC;
      131    11883    1   DCL KEY$            PTR       ALIGNED   STATIC;
      132    11884    1   DCL STACK_LOW$(0:18)    PTR       ALIGNED   STATIC;
      133    11885    1   DCL STACK_HIGH$(0:18)    PTR       ALIGNED   STATIC;
      134    11886        /**/
      135    11887        /**/
      136    11888        /**/
      137    11889    1   DCL VX$CHARS CHAR (VX_TARGET_COUNT) ALIGNED BASED;
      142    11894        %EJECT;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:40   
      143    11895                                                /*
      144    11896                                                                     Sort by name
      145    11897
      146    11898                                                  move params into local variables
      147    11899                                                */
      148    11900    1         IF START$ = STOP$ THEN RETURN;

  11900  3 000002   000002 470400 0                  LDP0    @START$
         3 000003   000003 471400 0                  LDP1    @STOP$
         3 000004   000000 236100                    LDQ     0,,PR0
         3 000005   100000 116100                    CMPQ    0,,PR1
         3 000006   000011 601000 3                  TNZ     s:11901

  11900  3 000007   000000 221200 0                  LDX1  ! 0
         3 000010   000001 702211                    TSX2  ! 1,X1

      149    11901    1         STACK_LOW$(0) = START$;

  11901  3 000011   000037 756000 0                  STQ     STACK_LOW$

      150    11902    1         STACK_HIGH$(0) = STOP$;

  11902  3 000012   100000 236100                    LDQ     0,,PR1
         3 000013   000062 756000 0                  STQ     STACK_HIGH$

      151    11903    1         STACK_TOP = 0;

  11903  3 000014   000023 450000 0                  STZ     STACK_TOP

      152    11904    1         SIZE = SZ;

  11904  3 000015   000004 473400 0                  LDP3    @SZ
         3 000016   300000 235100                    LDA     0,,PR3
         3 000017   000021 755000 0                  STA     SIZE

      153    11905    1         VX_TARGET_COUNT = SIZE * @CHAR_WORD;

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:41   
  11905  3 000020   000002 735000                    ALS     2
         3 000021   000000 755000 xsym               STA     VX_TARGET_COUNT

      154    11906    1         NAME_DISP = N_D;

  11906  3 000022   000006 474400 0                  LDP4    @N_D
         3 000023   400000 235100                    LDA     0,,PR4
         3 000024   000010 755000 0                  STA     NAME_DISP

      155    11907    1         N$ = NAME$;

  11907  3 000025   000001 475400 0                  LDP5    @NAME$
         3 000026   500000 236100                    LDQ     0,,PR5
         3 000027   000027 756000 0                  STQ     N$

      156    11908    1         IEPS  = 10 * SIZE;

  11908  3 000030   000021 236000 0                  LDQ     SIZE
         3 000031   000012 402007                    MPY     10,DL
         3 000032   000020 756000 0                  STQ     IEPS

      157    11909    1         MSIZE = - SIZE;

  11909  3 000033   000021 335000 0                  LCA     SIZE
         3 000034   000024 755000 0                  STA     MSIZE

      158    11910
      159    11911              %SUB KEY = "KEY$ -> B$DNAME.TEXT";
      160    11912              %SUB KEY_J = "PINCRW(N$,JHIGH$->VX$TMPLT.A(NAME_DISP))->B$DNAME.TEXT";
      161    11913              %SUB KEY_I = "PINCRW(N$,ILOW$->VX$TMPLT.A(NAME_DISP))->B$DNAME.TEXT";
      162    11914
      163    11915    2         DO WHILE ( '1'B );                /* Do forever */

      164    11916        /*
      165    11917                                      Get pointers which delimit partition from
      166    11918                                                               top of stacks */
      167    11919    2             IF STACK_TOP < 0 THEN RETURN; /* Done sorting */
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:42   

  11919  3 000035   000023 235000 0                  LDA     STACK_TOP
         3 000036   000041 605000 3                  TPL     s:11920

  11919  3 000037   000000 221200 0                  LDX1  ! 0
         3 000040   000001 702211                    TSX2  ! 1,X1

      168    11920    2             LOW$ = STACK_LOW$(STACK_TOP);

  11920  3 000041   000037 236005 0                  LDQ     STACK_LOW$,AL
         3 000042   000031 756000 0                  STQ     LOW$

      169    11921    2             HIGH$ = STACK_HIGH$(STACK_TOP);

  11921  3 000043   000023 720000 0                  LXL0    STACK_TOP
         3 000044   000062 236010 0                  LDQ     STACK_HIGH$,X0
         3 000045   000032 756000 0                  STQ     HIGH$

      170    11922    2             STACK_TOP = STACK_TOP - 1;

  11922  3 000046   000001 336007                    LCQ     1,DL
         3 000047   000023 056000 0                  ASQ     STACK_TOP

      171    11923    3             DO WHILE( POFFW(HIGH$, LOW$)  <  IEPS );

  11923  3 000050   000214 710000 3                  TRA     s:11949

      172    11924        /*
      173    11925                                              Use insertion method to sort the partition
      174    11926        */
      175    11927    3                 PARTITION_SIZE = (POFFW( HIGH$, LOW$) + SIZE ) / SIZE;

  11927  3 000051   000031 235000 0                  LDA     LOW$
         3 000052   000022 771000                    ARL     18
         3 000053   000106 755000 0                  STA     STACK_HIGH$+20
         3 000054   000032 236000 0                  LDQ     HIGH$
         3 000055   000022 772000                    QRL     18
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:43   
         3 000056   000106 136000 0                  SBLQ    STACK_HIGH$+20
         3 000057   000021 036000 0                  ADLQ    SIZE
         3 000060   000021 506000 0                  DIV     SIZE
         3 000061   000011 756000 0                  STQ     PARTITION_SIZE

      176    11928    3                 JHIGH$ = PINCRW(HIGH$, MSIZE);

  11928  3 000062   000024 236000 0                  LDQ     MSIZE
         3 000063   000022 736000                    QLS     18
         3 000064   000032 036000 0                  ADLQ    HIGH$
         3 000065   000034 756000 0                  STQ     JHIGH$

      177    11929    4                 DO I = 2 TO PARTITION_SIZE;

  11929  3 000066   000002 235007                    LDA     2,DL
         3 000067   000012 755000 0                  STA     I
         3 000070   000176 710000 3                  TRA     s:11941+3

      178    11930    4                     BUF = JHIGH$ -> VX$CHARS;

  11930  3 000071   000034 470400 0                  LDP0    JHIGH$
         3 000072   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 000073   040000 100540                    MLR     fill='040'O
         3 000074   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 000075   000013 000014 0                  ADSC9   BUF                      cn=0,n=12

      179    11931    4                     ILOW$ = PINCRW( JHIGH$, SIZE );

  11931  3 000076   000021 236000 0                  LDQ     SIZE
         3 000077   000022 736000                    QLS     18
         3 000100   000034 036000 0                  ADLQ    JHIGH$
         3 000101   000033 756000 0                  STQ     ILOW$

      180    11932    4                     KEY$ = PINCRW( N$, JHIGH$ -> VX$TMPLT.A(NAME_DISP) );

  11932  3 000102   000010 235000 0                  LDA     NAME_DISP
         3 000103   000001 735000                    ALS     1
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:44   
         3 000104   000000 100505                    MLR     fill='000'O
         3 000105   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         3 000106   000106 000004 0                  ADSC9   STACK_HIGH$+20           cn=0,n=4
         3 000107   000106 221000 0                  LDX1    STACK_HIGH$+20
         3 000110   000000 636011                    EAQ     0,X1
         3 000111   000027 036000 0                  ADLQ    N$
         3 000112   000036 756000 0                  STQ     KEY$

      181    11933    5                     DO WHILE ( ILOW$ <= HIGH$ );

  11933  3 000113   000032 236000 0                  LDQ     HIGH$
         3 000114   000033 116000 0                  CMPQ    ILOW$
         3 000115   000160 602000 3                  TNC     EXIT_1

      182    11934    5                         IF KEY_I >= KEY THEN GOTO EXIT_1;

  11934  3 000116   000010 235000 0                  LDA     NAME_DISP
         3 000117   000001 735000                    ALS     1
         3 000120   000033 470400 0                  LDP0    ILOW$
         3 000121   000000 100505                    MLR     fill='000'O
         3 000122   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         3 000123   000106 000004 0                  ADSC9   STACK_HIGH$+20           cn=0,n=4
         3 000124   000106 220000 0                  LDX0    STACK_HIGH$+20
         3 000125   000000 100505                    MLR     fill='000'O
         3 000126   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         3 000127   000107 000004 0                  ADSC9   STACK_HIGH$+21           cn=0,n=4
         3 000130   000107 221000 0                  LDX1    STACK_HIGH$+21
         3 000131   000027 471400 0                  LDP1    N$
         3 000132   100000 222111                    LDX2    0,X1,PR1
         3 000133   000036 473400 0                  LDP3    KEY$
         3 000134   300000 223100                    LDX3    0,,PR3
         3 000135   000000 636010                    EAQ     0,X0
         3 000136   000020 772000                    QRL     16
         3 000137   040140 106546                    CMPC    fill='040'O
         3 000140   100000 400012                    ADSC9   0,Q,PR1                  cn=2,n=*X2
         3 000141   300000 400013                    ADSC9   0,,PR3                   cn=2,n=*X3
         3 000142   000160 603000 3                  TRC     EXIT_1
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:45   

      183    11935    5                         PINCRW(ILOW$, MSIZE) -> VX$CHARS = ILOW$ ->VX$CHARS;

  11935  3 000143   000024 236000 0                  LDQ     MSIZE
         3 000144   000002 736000                    QLS     2
         3 000145   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 000146   040146 100540                    MLR     fill='040'O
         3 000147   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 000150   000000 000010                    ADSC9   0,Q,PR0                  cn=0,n=*X0

      184    11936    5                         ILOW$ = PINCRW( ILOW$, SIZE );

  11936  3 000151   000021 236000 0                  LDQ     SIZE
         3 000152   000022 736000                    QLS     18
         3 000153   000033 036000 0                  ADLQ    ILOW$
         3 000154   000033 756000 0                  STQ     ILOW$

      185    11937    5                        END;

  11937  3 000155   000032 116000 0                  CMPQ    HIGH$
         3 000156   000116 602000 3                  TNC     s:11934
         3 000157   000116 600000 3                  TZE     s:11934

  11936  3 000160                       EXIT_1       null
      186    11938    4   EXIT_1:           ;
      187    11939    4                     PINCRW(ILOW$, MSIZE) -> VX$CHARS  = BUF;

  11939  3 000160   000024 236000 0                  LDQ     MSIZE
         3 000161   000002 736000                    QLS     2
         3 000162   000033 470400 0                  LDP0    ILOW$
         3 000163   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 000164   040146 100400                    MLR     fill='040'O
         3 000165   000013 000014 0                  ADSC9   BUF                      cn=0,n=12
         3 000166   000000 000010                    ADSC9   0,Q,PR0                  cn=0,n=*X0

      188    11940    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:46   
  11940  3 000167   000024 236000 0                  LDQ     MSIZE
         3 000170   000022 736000                    QLS     18
         3 000171   000034 036000 0                  ADLQ    JHIGH$
         3 000172   000034 756000 0                  STQ     JHIGH$

      189    11941    4                    END;                   /* do i = 2 to partition_size   */

  11941  3 000173   000012 235000 0                  LDA     I
         3 000174   000001 035007                    ADLA    1,DL
         3 000175   000012 755000 0                  STA     I
         3 000176   000011 236000 0                  LDQ     PARTITION_SIZE
         3 000177   000012 116000 0                  CMPQ    I
         3 000200   000071 603000 3                  TRC     s:11930

      190    11942    3                 IF STACK_TOP < 0 THEN RETURN; /* Done with the sort */

  11942  3 000201   000023 235000 0                  LDA     STACK_TOP
         3 000202   000205 605000 3                  TPL     s:11946

  11942  3 000203   000000 221200 0                  LDX1  ! 0
         3 000204   000001 702211                    TSX2  ! 1,X1

      191    11943        /*
      192    11944                                          Get pointers for next partition
      193    11945        */
      194    11946    3                 LOW$ = STACK_LOW$(STACK_TOP);

  11946  3 000205   000037 236005 0                  LDQ     STACK_LOW$,AL
         3 000206   000031 756000 0                  STQ     LOW$

      195    11947    3                 HIGH$ = STACK_HIGH$(STACK_TOP);

  11947  3 000207   000023 720000 0                  LXL0    STACK_TOP
         3 000210   000062 236010 0                  LDQ     STACK_HIGH$,X0
         3 000211   000032 756000 0                  STQ     HIGH$

      196    11948    3                 STACK_TOP = STACK_TOP - 1;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:47   

  11948  3 000212   000001 336007                    LCQ     1,DL
         3 000213   000023 056000 0                  ASQ     STACK_TOP

      197    11949    3                END;                   /* end do while(poffw(HIGH$,LOW$) < ieps) */

  11949  3 000214   000031 235000 0                  LDA     LOW$
         3 000215   000022 771000                    ARL     18
         3 000216   000106 755000 0                  STA     STACK_HIGH$+20
         3 000217   000032 236000 0                  LDQ     HIGH$
         3 000220   000022 772000                    QRL     18
         3 000221   000106 136000 0                  SBLQ    STACK_HIGH$+20
         3 000222   000051 604000 3                  TMI     s:11927
         3 000223   000020 116000 0                  CMPQ    IEPS
         3 000224   000051 602000 3                  TNC     s:11927

      198    11950        /*
      199    11951                                         Use quick sort method to get next partition(s)*/
      200    11952    2             ILOW$ = LOW$;

  11952  3 000225   000031 236000 0                  LDQ     LOW$
         3 000226   000033 756000 0                  STQ     ILOW$

      201    11953    2             JHIGH$ = HIGH$;

  11953  3 000227   000032 236000 0                  LDQ     HIGH$
         3 000230   000034 756000 0                  STQ     JHIGH$

      202    11954        /*
      203    11955                                          Choose pivot element and switch
      204    11956                                          the low element and the pivot element
      205    11957                                          saving the pivot element in buf
      206    11958        */
      207    11959    2             PIVOT = VX_LINK_UTS/2;

  11959  3 000231   000000 236000 xsym               LDQ     VX_LINK_UTS
         3 000232   000001 772000                    QRL     1
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:48   
         3 000233   000022 756000 0                  STQ     PIVOT

      208    11960    2             PIVOT = MOD( PIVOT,

  11960  3 000234   000106 755000 0                  STA     STACK_HIGH$+20
         3 000235   000032 236000 0                  LDQ     HIGH$
         3 000236   000022 772000                    QRL     18
         3 000237   000106 136000 0                  SBLQ    STACK_HIGH$+20
         3 000240   000021 506000 0                  DIV     SIZE
         3 000241   000001 036007                    ADLQ    1,DL
         3 000242   000107 756000 0                  STQ     STACK_HIGH$+21
         3 000243   000022 236000 0                  LDQ     PIVOT
         3 000244   000107 506000 0                  DIV     STACK_HIGH$+21
         3 000245   000044 733000                    LRS     36
         3 000246   000021 402000 0                  MPY     SIZE
         3 000247   000022 756000 0                  STQ     PIVOT

      209    11961    2                     (POFFW( HIGH$, LOW$ ) / SIZE + 1 ) ) * SIZE;
      210    11962    2             Q$ = PINCRW( LOW$, PIVOT );

  11962  3 000250   000022 736000                    QLS     18
         3 000251   000031 036000 0                  ADLQ    LOW$
         3 000252   000030 756000 0                  STQ     Q$

      211    11963    2             BUF = Q$ -> VX$CHARS;

  11963  3 000253   000030 470400 0                  LDP0    Q$
         3 000254   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 000255   040000 100540                    MLR     fill='040'O
         3 000256   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 000257   000013 000014 0                  ADSC9   BUF                      cn=0,n=12

      212    11964    2             Q$ -> VX$CHARS = LOW$ -> VX$CHARS;

  11964  3 000260   000031 471400 0                  LDP1    LOW$
         3 000261   040140 100540                    MLR     fill='040'O
         3 000262   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:49   
         3 000263   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

      213    11965    2             LOW$ -> VX$CHARS = BUF;

  11965  3 000264   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 000265   040140 100400                    MLR     fill='040'O
         3 000266   000013 000014 0                  ADSC9   BUF                      cn=0,n=12
         3 000267   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

      214    11966    2             KEY$ = PINCRW( N$, LOW$ -> VX$TMPLT.A( NAME_DISP ) );

  11966  3 000270   000010 235000 0                  LDA     NAME_DISP
         3 000271   000001 735000                    ALS     1
         3 000272   000000 100505                    MLR     fill='000'O
         3 000273   100000 000002                    ADSC9   0,A,PR1                  cn=0,n=2
         3 000274   000106 000004 0                  ADSC9   STACK_HIGH$+20           cn=0,n=4
         3 000275   000106 220000 0                  LDX0    STACK_HIGH$+20
         3 000276   000000 636010                    EAQ     0,X0
         3 000277   000027 036000 0                  ADLQ    N$
         3 000300   000036 756000 0                  STQ     KEY$

      215    11967
      216    11968
      217    11969    3             DO WHILE ( JHIGH$  >  ILOW$ );

  11969  3 000301   000033 236000 0                  LDQ     ILOW$
         3 000302   000034 116000 0                  CMPQ    JHIGH$
         3 000303   000444 603000 3                  TRC     s:11996

      218    11970    4                 DO WHILE (JHIGH$ > LOW$ );

  11970  3 000304   000031 236000 0                  LDQ     LOW$
         3 000305   000034 116000 0                  CMPQ    JHIGH$
         3 000306   000344 603000 3                  TRC     EXIT_2

      219    11971    4                     IF KEY_J > KEY THEN   /* Move JHIGH$ towards ILOW$ */

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:50   
  11971  3 000307   000010 235000 0                  LDA     NAME_DISP
         3 000310   000001 735000                    ALS     1
         3 000311   000034 470400 0                  LDP0    JHIGH$
         3 000312   000000 100505                    MLR     fill='000'O
         3 000313   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         3 000314   000106 000004 0                  ADSC9   STACK_HIGH$+20           cn=0,n=4
         3 000315   000106 220000 0                  LDX0    STACK_HIGH$+20
         3 000316   000000 100505                    MLR     fill='000'O
         3 000317   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         3 000320   000107 000004 0                  ADSC9   STACK_HIGH$+21           cn=0,n=4
         3 000321   000107 221000 0                  LDX1    STACK_HIGH$+21
         3 000322   000027 471400 0                  LDP1    N$
         3 000323   100000 222111                    LDX2    0,X1,PR1
         3 000324   000036 473400 0                  LDP3    KEY$
         3 000325   300000 223100                    LDX3    0,,PR3
         3 000326   000000 636010                    EAQ     0,X0
         3 000327   000020 772000                    QRL     16
         3 000330   040146 106540                    CMPC    fill='040'O
         3 000331   300000 400013                    ADSC9   0,,PR3                   cn=2,n=*X3
         3 000332   100000 400012                    ADSC9   0,Q,PR1                  cn=2,n=*X2
         3 000333   000344 603000 3                  TRC     EXIT_2

      220    11972    4                         JHIGH$ = PINCRW( JHIGH$, MSIZE );

  11972  3 000334   000024 236000 0                  LDQ     MSIZE
         3 000335   000022 736000                    QLS     18
         3 000336   000034 036000 0                  ADLQ    JHIGH$
         3 000337   000034 756000 0                  STQ     JHIGH$
         3 000340   000341 710000 3                  TRA     s:11974

      221    11973    4                     ELSE GOTO EXIT_2;
      222    11974    4                    END;

  11974  3 000341   000031 116000 0                  CMPQ    LOW$
         3 000342   000344 600000 3                  TZE     EXIT_2
         3 000343   000307 603000 3                  TRC     s:11971

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:51   
  11971  3 000344                       EXIT_2       null
      223    11975    3   EXIT_2:       ;
      224    11976    3                 IF JHIGH$ > ILOW$ THEN

  11976  3 000344   000033 236000 0                  LDQ     ILOW$
         3 000345   000034 116000 0                  CMPQ    JHIGH$
         3 000346   000440 603000 3                  TRC     s:11993

      225    11977    4                 DO;

      226    11978    4                     ILOW$ -> VX$CHARS = JHIGH$ -> VX$CHARS;

  11978  3 000347   000034 470400 0                  LDP0    JHIGH$
         3 000350   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 000351   000033 471400 0                  LDP1    ILOW$
         3 000352   040140 100540                    MLR     fill='040'O
         3 000353   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 000354   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

      227    11979    4                     ILOW$ = PINCRW( ILOW$, SIZE );

  11979  3 000355   000021 236000 0                  LDQ     SIZE
         3 000356   000022 736000                    QLS     18
         3 000357   000033 036000 0                  ADLQ    ILOW$
         3 000360   000033 756000 0                  STQ     ILOW$

      228    11980    5                     DO WHILE ( ILOW$ < HIGH$ );

  11980  3 000361   000032 116000 0                  CMPQ    HIGH$
         3 000362   000417 603000 3                  TRC     EXIT_3

      229    11981    5                         IF KEY_I < KEY THEN /* Move ILOW$ toward JHIGH$ */

  11981  3 000363   000010 235000 0                  LDA     NAME_DISP
         3 000364   000001 735000                    ALS     1
         3 000365   000033 470400 0                  LDP0    ILOW$
         3 000366   000000 100505                    MLR     fill='000'O
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:52   
         3 000367   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         3 000370   000106 000004 0                  ADSC9   STACK_HIGH$+20           cn=0,n=4
         3 000371   000106 220000 0                  LDX0    STACK_HIGH$+20
         3 000372   000000 100505                    MLR     fill='000'O
         3 000373   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         3 000374   000107 000004 0                  ADSC9   STACK_HIGH$+21           cn=0,n=4
         3 000375   000107 221000 0                  LDX1    STACK_HIGH$+21
         3 000376   000027 471400 0                  LDP1    N$
         3 000377   100000 222111                    LDX2    0,X1,PR1
         3 000400   000036 473400 0                  LDP3    KEY$
         3 000401   300000 223100                    LDX3    0,,PR3
         3 000402   000000 636010                    EAQ     0,X0
         3 000403   000020 772000                    QRL     16
         3 000404   040140 106546                    CMPC    fill='040'O
         3 000405   100000 400012                    ADSC9   0,Q,PR1                  cn=2,n=*X2
         3 000406   300000 400013                    ADSC9   0,,PR3                   cn=2,n=*X3
         3 000407   000417 603000 3                  TRC     EXIT_3

      230    11982    5                             ILOW$ = PINCRW( ILOW$, SIZE );

  11982  3 000410   000021 236000 0                  LDQ     SIZE
         3 000411   000022 736000                    QLS     18
         3 000412   000033 036000 0                  ADLQ    ILOW$
         3 000413   000033 756000 0                  STQ     ILOW$
         3 000414   000415 710000 3                  TRA     s:11984

      231    11983    5                         ELSE GOTO EXIT_3;
      232    11984    5                        END;

  11984  3 000415   000032 116000 0                  CMPQ    HIGH$
         3 000416   000363 602000 3                  TNC     s:11981

  11980  3 000417                       EXIT_3       null
      233    11985    4   EXIT_3:           ;
      234    11986    4                     IF JHIGH$ > ILOW$ THEN

  11986  3 000417   000033 236000 0                  LDQ     ILOW$
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:53   
         3 000420   000034 116000 0                  CMPQ    JHIGH$
         3 000421   000435 603000 3                  TRC     s:11991

      235    11987    5                     DO;

      236    11988    5                         JHIGH$ -> VX$CHARS = ILOW$ -> VX$CHARS;

  11988  3 000422   000033 470400 0                  LDP0    ILOW$
         3 000423   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 000424   000034 471400 0                  LDP1    JHIGH$
         3 000425   040140 100540                    MLR     fill='040'O
         3 000426   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 000427   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

      237    11989    5                         JHIGH$ = PINCRW( JHIGH$, MSIZE );

  11989  3 000430   000024 236000 0                  LDQ     MSIZE
         3 000431   000022 736000                    QLS     18
         3 000432   000034 036000 0                  ADLQ    JHIGH$
         3 000433   000034 756000 0                  STQ     JHIGH$

      238    11990    5                        END;

  11990  3 000434   000441 710000 3                  TRA     s:11994

      239    11991    4                     ELSE ILOW$ = JHIGH$;  /* No more passes */

  11991  3 000435   000034 236000 0                  LDQ     JHIGH$
         3 000436   000033 756000 0                  STQ     ILOW$

      240    11992    4                    END;                   /* end if JHIGH$ > ILOW$ then */

  11992  3 000437   000441 710000 3                  TRA     s:11994

      241    11993    3                 ELSE JHIGH$ = ILOW$;      /* No more passes  */

  11993  3 000440   000034 756000 0                  STQ     JHIGH$
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:54   

      242    11994    3                END;                       /* end do while(JHIGH$ > ILOW$) */

  11994  3 000441   000033 116000 0                  CMPQ    ILOW$
         3 000442   000444 600000 3                  TZE     s:11996
         3 000443   000304 603000 3                  TRC     s:11970

      243    11995                                    /* Assign pivot element to the correct position */
      244    11996    2             JHIGH$ -> VX$CHARS =  BUF;

  11996  3 000444   000034 470400 0                  LDP0    JHIGH$
         3 000445   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 000446   040140 100400                    MLR     fill='040'O
         3 000447   000013 000014 0                  ADSC9   BUF                      cn=0,n=12
         3 000450   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

      245    11997        /*
      246    11998                                      Put the pointers which delimit the partitions onto
      247    11999                                      the stacks.  Largest partition first.
      248    12000        */
      249    12001    2             HIGH_TO_ILOW = POFFW( HIGH$, ILOW$ );

  12001  3 000451   000033 235000 0                  LDA     ILOW$
         3 000452   000022 771000                    ARL     18
         3 000453   000106 755000 0                  STA     STACK_HIGH$+20
         3 000454   000032 236000 0                  LDQ     HIGH$
         3 000455   000022 772000                    QRL     18
         3 000456   000106 136000 0                  SBLQ    STACK_HIGH$+20
         3 000457   000025 756000 0                  STQ     HIGH_TO_ILOW

      250    12002    2             ILOW_TO_LOW  = POFFW( ILOW$, LOW$  );

  12002  3 000460   000031 235000 0                  LDA     LOW$
         3 000461   000022 771000                    ARL     18
         3 000462   000106 755000 0                  STA     STACK_HIGH$+20
         3 000463   000033 236000 0                  LDQ     ILOW$
         3 000464   000022 772000                    QRL     18
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:55   
         3 000465   000106 136000 0                  SBLQ    STACK_HIGH$+20
         3 000466   000026 756000 0                  STQ     ILOW_TO_LOW

      251    12003    3             IF HIGH_TO_ILOW > ILOW_TO_LOW THEN DO;

  12003  3 000467   000025 116000 0                  CMPQ    HIGH_TO_ILOW
         3 000470   000520 605000 3                  TPL     s:12016

      252    12004    4                 IF HIGH_TO_ILOW > SIZE THEN DO;

  12004  3 000471   000025 236000 0                  LDQ     HIGH_TO_ILOW
         3 000472   000021 116000 0                  CMPQ    SIZE
         3 000473   000504 604400 3                  TMOZ    s:12009

      253    12005    4                     STACK_TOP = STACK_TOP + 1;

  12005  3 000474   000023 054000 0                  AOS     STACK_TOP

      254    12006    4                     STACK_LOW$(STACK_TOP) = PINCRW(ILOW$, SIZE);

  12006  3 000475   000021 236000 0                  LDQ     SIZE
         3 000476   000022 736000                    QLS     18
         3 000477   000033 036000 0                  ADLQ    ILOW$
         3 000500   000023 720000 0                  LXL0    STACK_TOP
         3 000501   000037 756010 0                  STQ     STACK_LOW$,X0

      255    12007    4                     STACK_HIGH$(STACK_TOP) = HIGH$;

  12007  3 000502   000032 236000 0                  LDQ     HIGH$
         3 000503   000062 756010 0                  STQ     STACK_HIGH$,X0

      256    12008    4                    END;

      257    12009    4                 IF ILOW_TO_LOW > SIZE THEN DO;

  12009  3 000504   000026 236000 0                  LDQ     ILOW_TO_LOW
         3 000505   000021 116000 0                  CMPQ    SIZE
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:56   
         3 000506   000035 604400 3                  TMOZ    s:11919

      258    12010    4                     STACK_TOP = STACK_TOP + 1;

  12010  3 000507   000023 054000 0                  AOS     STACK_TOP

      259    12011    4                     STACK_LOW$(STACK_TOP) = LOW$;

  12011  3 000510   000031 236000 0                  LDQ     LOW$
         3 000511   000023 720000 0                  LXL0    STACK_TOP
         3 000512   000037 756010 0                  STQ     STACK_LOW$,X0

      260    12012    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );

  12012  3 000513   000024 236000 0                  LDQ     MSIZE
         3 000514   000022 736000                    QLS     18
         3 000515   000033 036000 0                  ADLQ    ILOW$
         3 000516   000062 756010 0                  STQ     STACK_HIGH$,X0

      261    12013    4                    END;

      262    12014    3                END;

  12014  3 000517   000035 710000 3                  TRA     s:11919

      263    12015    3             ELSE DO;

      264    12016    4                 IF ILOW_TO_LOW > SIZE THEN DO;

  12016  3 000520   000021 116000 0                  CMPQ    SIZE
         3 000521   000532 604400 3                  TMOZ    s:12021

      265    12017    4                     STACK_TOP = STACK_TOP + 1;

  12017  3 000522   000023 054000 0                  AOS     STACK_TOP

      266    12018    4                     STACK_LOW$(STACK_TOP) = LOW$;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:57   

  12018  3 000523   000031 236000 0                  LDQ     LOW$
         3 000524   000023 720000 0                  LXL0    STACK_TOP
         3 000525   000037 756010 0                  STQ     STACK_LOW$,X0

      267    12019    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );

  12019  3 000526   000024 236000 0                  LDQ     MSIZE
         3 000527   000022 736000                    QLS     18
         3 000530   000033 036000 0                  ADLQ    ILOW$
         3 000531   000062 756010 0                  STQ     STACK_HIGH$,X0

      268    12020    4                    END;

      269    12021    4                 IF HIGH_TO_ILOW > SIZE THEN DO;

  12021  3 000532   000025 236000 0                  LDQ     HIGH_TO_ILOW
         3 000533   000021 116000 0                  CMPQ    SIZE
         3 000534   000035 604400 3                  TMOZ    s:11919

      270    12022    4                     STACK_TOP = STACK_TOP + 1;

  12022  3 000535   000023 054000 0                  AOS     STACK_TOP

      271    12023    4                     STACK_LOW$(STACK_TOP) = PINCRW( ILOW$, SIZE );

  12023  3 000536   000021 236000 0                  LDQ     SIZE
         3 000537   000022 736000                    QLS     18
         3 000540   000033 036000 0                  ADLQ    ILOW$
         3 000541   000023 720000 0                  LXL0    STACK_TOP
         3 000542   000037 756010 0                  STQ     STACK_LOW$,X0

      272    12024    4                     STACK_HIGH$(STACK_TOP) = HIGH$;

  12024  3 000543   000032 236000 0                  LDQ     HIGH$
         3 000544   000062 756010 0                  STQ     STACK_HIGH$,X0

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:58   
      273    12025    4                    END;

      274    12026    3                END;

      275    12027    2            END;                           /* do forever */

  12027  3 000545   000035 710000 3                  TRA     s:11919

      276    12028        %EJECT;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:59   
      277    12029              %BANNER(ARG=VXQ$SORT_V ENTRY );

             12037    2   /*******************************************************************************
             12038    2   *                                                                              *
             12039    2   *                          VXQ$SORT_V ENTRY                                       *
             12040    2   *                                                                              *
             12041    2   *******************************************************************************/

      278    12045
      279    12046
      280    12047
      281    12048    1   VXQ$SORT_V :
      282    12049    1         ENTRY ( NAME$, START$, STOP$, SZ, TP, N_D, TYPE );

  12049  3 000546   000000 700200 xent  VXQ$SORT_V   TSX0  ! X66_STATIC_N
         3 000547   000000 000007 0                  ZERO    0,7

      283    12050        /*
      284    12051                              Sort by value
      285    12052        */
      286    12053    1         IF START$ = STOP$ THEN RETURN;

  12053  3 000550   000002 470400 0                  LDP0    @START$
         3 000551   000003 471400 0                  LDP1    @STOP$
         3 000552   000000 236100                    LDQ     0,,PR0
         3 000553   100000 116100                    CMPQ    0,,PR1
         3 000554   000557 601000 3                  TNZ     s:12054

  12053  3 000555   000000 221200 0                  LDX1  ! 0
         3 000556   000001 702211                    TSX2  ! 1,X1

      287    12054    1         STACK_LOW$(0) = START$;

  12054  3 000557   000037 756000 0                  STQ     STACK_LOW$

      288    12055    1         STACK_HIGH$(0) = STOP$;

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:60   
  12055  3 000560   100000 236100                    LDQ     0,,PR1
         3 000561   000062 756000 0                  STQ     STACK_HIGH$

      289    12056    1         STACK_TOP = 0;

  12056  3 000562   000023 450000 0                  STZ     STACK_TOP

      290    12057    1         SIZE = SZ;

  12057  3 000563   000004 473400 0                  LDP3    @SZ
         3 000564   300000 235100                    LDA     0,,PR3
         3 000565   000021 755000 0                  STA     SIZE

      291    12058    1         VX_TARGET_COUNT = SIZE * @CHAR_WORD;

  12058  3 000566   000002 735000                    ALS     2
         3 000567   000000 755000 xsym               STA     VX_TARGET_COUNT

      292    12059    1         IEPS  = 10 * SIZE;

  12059  3 000570   000021 236000 0                  LDQ     SIZE
         3 000571   000012 402007                    MPY     10,DL
         3 000572   000020 756000 0                  STQ     IEPS

      293    12060    1         MSIZE = - SIZE;

  12060  3 000573   000021 335000 0                  LCA     SIZE
         3 000574   000024 755000 0                  STA     MSIZE

      294    12061
      295    12062    2         DO WHILE ( '1'B );                /* Do forever */

      296    12063        /*
      297    12064                                      Get pointers which delimit partition from
      298    12065                                                               top of stacks */
      299    12066    2             IF STACK_TOP < 0 THEN RETURN; /* Done sorting  */

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:61   
  12066  3 000575   000023 235000 0                  LDA     STACK_TOP
         3 000576   000601 605000 3                  TPL     s:12067

  12066  3 000577   000000 221200 0                  LDX1  ! 0
         3 000600   000001 702211                    TSX2  ! 1,X1

      300    12067    2             LOW$ = STACK_LOW$(STACK_TOP);

  12067  3 000601   000037 236005 0                  LDQ     STACK_LOW$,AL
         3 000602   000031 756000 0                  STQ     LOW$

      301    12068    2             HIGH$ = STACK_HIGH$(STACK_TOP);

  12068  3 000603   000023 720000 0                  LXL0    STACK_TOP
         3 000604   000062 236010 0                  LDQ     STACK_HIGH$,X0
         3 000605   000032 756000 0                  STQ     HIGH$

      302    12069    2             STACK_TOP = STACK_TOP - 1;

  12069  3 000606   000001 336007                    LCQ     1,DL
         3 000607   000023 056000 0                  ASQ     STACK_TOP

      303    12070    3             DO WHILE( POFFW(HIGH$, LOW$)  <  IEPS );

  12070  3 000610   001114 710000 3                  TRA     s:12145

      304    12071        /*
      305    12072                                              Use insertion method to sort the partition
      306    12073        */
      307    12074    3                 PARTITION_SIZE = ( POFFW( HIGH$, LOW$ ) + SIZE ) / SIZE;

  12074  3 000611   000031 235000 0                  LDA     LOW$
         3 000612   000022 771000                    ARL     18
         3 000613   000106 755000 0                  STA     STACK_HIGH$+20
         3 000614   000032 236000 0                  LDQ     HIGH$
         3 000615   000022 772000                    QRL     18
         3 000616   000106 136000 0                  SBLQ    STACK_HIGH$+20
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:62   
         3 000617   000021 036000 0                  ADLQ    SIZE
         3 000620   000021 506000 0                  DIV     SIZE
         3 000621   000011 756000 0                  STQ     PARTITION_SIZE

      308    12075    3                 JHIGH$ = PINCRW(HIGH$, MSIZE);

  12075  3 000622   000024 236000 0                  LDQ     MSIZE
         3 000623   000022 736000                    QLS     18
         3 000624   000032 036000 0                  ADLQ    HIGH$
         3 000625   000034 756000 0                  STQ     JHIGH$

      309    12076    4                 DO I = 2 TO PARTITION_SIZE;

  12076  3 000626   000002 235007                    LDA     2,DL
         3 000627   000012 755000 0                  STA     I
         3 000630   001076 710000 3                  TRA     s:12137+3

      310    12077    4                     BUF = JHIGH$ -> VX$CHARS;

  12077  3 000631   000034 470400 0                  LDP0    JHIGH$
         3 000632   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 000633   040000 100540                    MLR     fill='040'O
         3 000634   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 000635   000013 000014 0                  ADSC9   BUF                      cn=0,n=12

      311    12078    4                     ILOW$ = PINCRW( JHIGH$, SIZE );

  12078  3 000636   000021 236000 0                  LDQ     SIZE
         3 000637   000022 736000                    QLS     18
         3 000640   000034 036000 0                  ADLQ    JHIGH$
         3 000641   000033 756000 0                  STQ     ILOW$

      312    12079                          %GET_KEY( KEY=KEY_VALUE1, ITEM$=JHIGH$ );

  12081  3 000642   000007 471400 0                  LDP1    @TYPE
         3 000643   100000 235100                    LDA     0,,PR1
         3 000644   000011 115007                    CMPA    9,DL
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:63   
         3 000645   000647 602005 3                  TNC     s:12081+5,AL
         3 000646   000735 710000 3                  TRA     s:12104
         3 000647   000735 710000 3                  TRA     s:12104
         3 000650   000735 710000 3                  TRA     s:12104
         3 000651   000735 710000 3                  TRA     s:12104
         3 000652   000660 710000 3                  TRA     s:12083
         3 000653   000702 710000 3                  TRA     s:12088
         3 000654   000735 710000 3                  TRA     s:12104
         3 000655   000706 710000 3                  TRA     s:12090
         3 000656   000735 710000 3                  TRA     s:12104
         3 000657   000720 710000 3                  TRA     s:12094

  12083  3 000660   000000 236100                    LDQ     0,,PR0
         3 000661   777777 376007                    ANQ     -1,DL
         3 000662   000016 756000 0                  STQ     KEY_VALUE1

  12084  3 000663   000000 236100                    LDQ     0,,PR0
         3 000664   000040 316003                    CANQ    32,DU
         3 000665   000673 600000 3                  TZE     s:12086

  12085  3 000666   000000 236100                    LDQ     0,,PR0
         3 000667   000041 772000                    QRL     33
         3 000670   006006 621006                    EAX1    3078,QL
         3 000671   000016 741000 0                  STX1    KEY_VALUE1
         3 000672   000735 710000 3                  TRA     s:12104

  12086  3 000673   000000 236100                    LDQ     0,,PR0
         3 000674   077000 376003                    ANQ     32256,DU
         3 000675   005000 116003                    CMPQ    2560,DU
         3 000676   000735 601000 3                  TNZ     s:12104

  12086  3 000677   006003 221003                    LDX1    3075,DU
         3 000700   000016 741000 0                  STX1    KEY_VALUE1
         3 000701   000735 710000 3                  TRA     s:12104

  12088  3 000702   000000 236100                    LDQ     0,,PR0
         3 000703   777777 376007                    ANQ     -1,DL
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:64   
         3 000704   000016 756000 0                  STQ     KEY_VALUE1
         3 000705   000735 710000 3                  TRA     s:12104

  12090  3 000706   000001 236100                    LDQ     1,,PR0
         3 000707   400000 316007                    CANQ    -131072,DL
         3 000710   000714 600000 3                  TZE     s:12092

  12091  3 000711   000000 235100                    LDA     0,,PR0
         3 000712   000016 755000 0                  STA     KEY_VALUE1
         3 000713   000735 710000 3                  TRA     s:12104

  12092  3 000714   000000 236100                    LDQ     0,,PR0
         3 000715   777777 376007                    ANQ     -1,DL
         3 000716   000016 756000 0                  STQ     KEY_VALUE1
         3 000717   000735 710000 3                  TRA     s:12104

  12094  3 000720   000001 236100                    LDQ     1,,PR0
         3 000721   400000 316007                    CANQ    -131072,DL
         3 000722   000730 600000 3                  TZE     s:12099

  12095  3 000723   000000 721100                    LXL1    0,,PR0
         3 000724   000016 741000 0                  STX1    KEY_VALUE1

  12096  3 000725   000000 222100                    LDX2    0,,PR0
         3 000726   000016 442000 0                  SXL2    KEY_VALUE1

  12097  3 000727   000735 710000 3                  TRA     s:12104

  12099  3 000730   000001 721100                    LXL1    1,,PR0
         3 000731   007777 361003                    ANX1    4095,DU
         3 000732   000016 741000 0                  STX1    KEY_VALUE1

  12100  3 000733   000000 722100                    LXL2    0,,PR0
         3 000734   000016 442000 0                  SXL2    KEY_VALUE1

      313    12104    5                     DO WHILE ( ILOW$ <= HIGH$ );

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:65   
  12104  3 000735   000032 236000 0                  LDQ     HIGH$
         3 000736   000033 116000 0                  CMPQ    ILOW$
         3 000737   001060 602000 3                  TNC     JUMP_OUT_1

      314    12105                              %GET_KEY( KEY=KEY_VALUE2, ITEM$=ILOW$ );

  12107  3 000740   000007 470400 0                  LDP0    @TYPE
         3 000741   000000 235100                    LDA     0,,PR0
         3 000742   000011 115007                    CMPA    9,DL
         3 000743   000745 602005 3                  TNC     s:12107+5,AL
         3 000744   001037 710000 3                  TRA     s:12130
         3 000745   001037 710000 3                  TRA     s:12130
         3 000746   001037 710000 3                  TRA     s:12130
         3 000747   001037 710000 3                  TRA     s:12130
         3 000750   000756 710000 3                  TRA     s:12109
         3 000751   001001 710000 3                  TRA     s:12114
         3 000752   001037 710000 3                  TRA     s:12130
         3 000753   001006 710000 3                  TRA     s:12116
         3 000754   001037 710000 3                  TRA     s:12130
         3 000755   001021 710000 3                  TRA     s:12120

  12109  3 000756   000033 471400 0                  LDP1    ILOW$
         3 000757   100000 236100                    LDQ     0,,PR1
         3 000760   777777 376007                    ANQ     -1,DL
         3 000761   000017 756000 0                  STQ     KEY_VALUE2

  12110  3 000762   100000 236100                    LDQ     0,,PR1
         3 000763   000040 316003                    CANQ    32,DU
         3 000764   000772 600000 3                  TZE     s:12112

  12111  3 000765   100000 236100                    LDQ     0,,PR1
         3 000766   000041 772000                    QRL     33
         3 000767   006006 620006                    EAX0    3078,QL
         3 000770   000017 740000 0                  STX0    KEY_VALUE2
         3 000771   001037 710000 3                  TRA     s:12130

  12112  3 000772   100000 236100                    LDQ     0,,PR1
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:66   
         3 000773   077000 376003                    ANQ     32256,DU
         3 000774   005000 116003                    CMPQ    2560,DU
         3 000775   001037 601000 3                  TNZ     s:12130

  12112  3 000776   006003 220003                    LDX0    3075,DU
         3 000777   000017 740000 0                  STX0    KEY_VALUE2
         3 001000   001037 710000 3                  TRA     s:12130

  12114  3 001001   000033 471400 0                  LDP1    ILOW$
         3 001002   100000 236100                    LDQ     0,,PR1
         3 001003   777777 376007                    ANQ     -1,DL
         3 001004   000017 756000 0                  STQ     KEY_VALUE2
         3 001005   001037 710000 3                  TRA     s:12130

  12116  3 001006   000033 471400 0                  LDP1    ILOW$
         3 001007   100001 236100                    LDQ     1,,PR1
         3 001010   400000 316007                    CANQ    -131072,DL
         3 001011   001015 600000 3                  TZE     s:12118

  12117  3 001012   100000 235100                    LDA     0,,PR1
         3 001013   000017 755000 0                  STA     KEY_VALUE2
         3 001014   001037 710000 3                  TRA     s:12130

  12118  3 001015   100000 236100                    LDQ     0,,PR1
         3 001016   777777 376007                    ANQ     -1,DL
         3 001017   000017 756000 0                  STQ     KEY_VALUE2
         3 001020   001037 710000 3                  TRA     s:12130

  12120  3 001021   000033 471400 0                  LDP1    ILOW$
         3 001022   100001 236100                    LDQ     1,,PR1
         3 001023   400000 316007                    CANQ    -131072,DL
         3 001024   001032 600000 3                  TZE     s:12125

  12121  3 001025   100000 720100                    LXL0    0,,PR1
         3 001026   000017 740000 0                  STX0    KEY_VALUE2

  12122  3 001027   100000 221100                    LDX1    0,,PR1
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:67   
         3 001030   000017 441000 0                  SXL1    KEY_VALUE2

  12123  3 001031   001037 710000 3                  TRA     s:12130

  12125  3 001032   100001 720100                    LXL0    1,,PR1
         3 001033   007777 360003                    ANX0    4095,DU
         3 001034   000017 740000 0                  STX0    KEY_VALUE2

  12126  3 001035   100000 721100                    LXL1    0,,PR1
         3 001036   000017 441000 0                  SXL1    KEY_VALUE2

      315    12130    5                         IF KEY_VALUE2 >= KEY_VALUE1 THEN GOTO JUMP_OUT_1;

  12130  3 001037   000017 236000 0                  LDQ     KEY_VALUE2
         3 001040   000016 116000 0                  CMPQ    KEY_VALUE1
         3 001041   001060 603000 3                  TRC     JUMP_OUT_1

      316    12131    5                         PINCRW(ILOW$, MSIZE) -> VX$CHARS = ILOW$ ->VX$CHARS;

  12131  3 001042   000024 235000 0                  LDA     MSIZE
         3 001043   000002 735000                    ALS     2
         3 001044   000033 471400 0                  LDP1    ILOW$
         3 001045   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 001046   040145 100540                    MLR     fill='040'O
         3 001047   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         3 001050   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0

      317    12132    5                         ILOW$ = PINCRW( ILOW$, SIZE );

  12132  3 001051   000021 236000 0                  LDQ     SIZE
         3 001052   000022 736000                    QLS     18
         3 001053   000033 036000 0                  ADLQ    ILOW$
         3 001054   000033 756000 0                  STQ     ILOW$

      318    12133    5                        END;

  12133  3 001055   000032 116000 0                  CMPQ    HIGH$
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:68   
         3 001056   000740 602000 3                  TNC     s:12107
         3 001057   000740 600000 3                  TZE     s:12107

      319    12134    4   JUMP_OUT_1:
      320    12135    4                     PINCRW(ILOW$, MSIZE) -> VX$CHARS  = BUF;

  12135  3 001060   000024 235000 0     JUMP_OUT_1   LDA     MSIZE
         3 001061   000002 735000                    ALS     2
         3 001062   000033 470400 0                  LDP0    ILOW$
         3 001063   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 001064   040145 100400                    MLR     fill='040'O
         3 001065   000013 000014 0                  ADSC9   BUF                      cn=0,n=12
         3 001066   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0

      321    12136    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );

  12136  3 001067   000024 236000 0                  LDQ     MSIZE
         3 001070   000022 736000                    QLS     18
         3 001071   000034 036000 0                  ADLQ    JHIGH$
         3 001072   000034 756000 0                  STQ     JHIGH$

      322    12137    4                    END;                   /* do i = 2 to partition_size  */

  12137  3 001073   000012 235000 0                  LDA     I
         3 001074   000001 035007                    ADLA    1,DL
         3 001075   000012 755000 0                  STA     I
         3 001076   000011 236000 0                  LDQ     PARTITION_SIZE
         3 001077   000012 116000 0                  CMPQ    I
         3 001100   000631 603000 3                  TRC     s:12077

      323    12138    3                 IF STACK_TOP < 0 THEN RETURN; /* Done with the sort */

  12138  3 001101   000023 235000 0                  LDA     STACK_TOP
         3 001102   001105 605000 3                  TPL     s:12142

  12138  3 001103   000000 221200 0                  LDX1  ! 0
         3 001104   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:69   

      324    12139        /*
      325    12140                                          Get pointers for next partition
      326    12141        */
      327    12142    3                 LOW$ = STACK_LOW$(STACK_TOP);

  12142  3 001105   000037 236005 0                  LDQ     STACK_LOW$,AL
         3 001106   000031 756000 0                  STQ     LOW$

      328    12143    3                 HIGH$ = STACK_HIGH$(STACK_TOP);

  12143  3 001107   000023 720000 0                  LXL0    STACK_TOP
         3 001110   000062 236010 0                  LDQ     STACK_HIGH$,X0
         3 001111   000032 756000 0                  STQ     HIGH$

      329    12144    3                 STACK_TOP = STACK_TOP - 1;

  12144  3 001112   000001 336007                    LCQ     1,DL
         3 001113   000023 056000 0                  ASQ     STACK_TOP

      330    12145    3                END;                   /* end do while(poffw(HIGH$,LOW$) < ieps) */

  12145  3 001114   000031 235000 0                  LDA     LOW$
         3 001115   000022 771000                    ARL     18
         3 001116   000106 755000 0                  STA     STACK_HIGH$+20
         3 001117   000032 236000 0                  LDQ     HIGH$
         3 001120   000022 772000                    QRL     18
         3 001121   000106 136000 0                  SBLQ    STACK_HIGH$+20
         3 001122   000611 604000 3                  TMI     s:12074
         3 001123   000020 116000 0                  CMPQ    IEPS
         3 001124   000611 602000 3                  TNC     s:12074

      331    12146        /*
      332    12147                                         Use quick sort method to get next partition(s)*/
      333    12148    2             ILOW$ = LOW$;

  12148  3 001125   000031 236000 0                  LDQ     LOW$
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:70   
         3 001126   000033 756000 0                  STQ     ILOW$

      334    12149    2             JHIGH$ = HIGH$;

  12149  3 001127   000032 236000 0                  LDQ     HIGH$
         3 001130   000034 756000 0                  STQ     JHIGH$

      335    12150        /*
      336    12151                                          Choose pivot element and switch
      337    12152                                          the low element and the pivot element
      338    12153                                          saving the pivot element in buf
      339    12154        */
      340    12155    2             PIVOT = VX_LINK_UTS/2;

  12155  3 001131   000000 236000 xsym               LDQ     VX_LINK_UTS
         3 001132   000001 772000                    QRL     1
         3 001133   000022 756000 0                  STQ     PIVOT

      341    12156    2             PIVOT = MOD( PIVOT,

  12156  3 001134   000106 755000 0                  STA     STACK_HIGH$+20
         3 001135   000032 236000 0                  LDQ     HIGH$
         3 001136   000022 772000                    QRL     18
         3 001137   000106 136000 0                  SBLQ    STACK_HIGH$+20
         3 001140   000021 506000 0                  DIV     SIZE
         3 001141   000001 036007                    ADLQ    1,DL
         3 001142   000107 756000 0                  STQ     STACK_HIGH$+21
         3 001143   000022 236000 0                  LDQ     PIVOT
         3 001144   000107 506000 0                  DIV     STACK_HIGH$+21
         3 001145   000044 733000                    LRS     36
         3 001146   000021 402000 0                  MPY     SIZE
         3 001147   000022 756000 0                  STQ     PIVOT

      342    12157    2                     (POFFW( HIGH$, LOW$ ) / SIZE + 1 ) ) * SIZE;
      343    12158    2             Q$ = PINCRW( LOW$, PIVOT );

  12158  3 001150   000022 736000                    QLS     18
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:71   
         3 001151   000031 036000 0                  ADLQ    LOW$
         3 001152   000030 756000 0                  STQ     Q$

      344    12159    2             BUF = Q$ -> VX$CHARS;

  12159  3 001153   000030 470400 0                  LDP0    Q$
         3 001154   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 001155   040000 100540                    MLR     fill='040'O
         3 001156   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 001157   000013 000014 0                  ADSC9   BUF                      cn=0,n=12

      345    12160    2             Q$ -> VX$CHARS = LOW$ -> VX$CHARS;

  12160  3 001160   000031 471400 0                  LDP1    LOW$
         3 001161   040140 100540                    MLR     fill='040'O
         3 001162   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         3 001163   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

      346    12161    2             LOW$ -> VX$CHARS = BUF;

  12161  3 001164   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 001165   040140 100400                    MLR     fill='040'O
         3 001166   000013 000014 0                  ADSC9   BUF                      cn=0,n=12
         3 001167   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

      347    12162                  %GET_KEY( KEY=KEY_VALUE1, ITEM$=LOW$ );

  12164  3 001170   000007 473400 0                  LDP3    @TYPE
         3 001171   300000 235100                    LDA     0,,PR3
         3 001172   000011 115007                    CMPA    9,DL
         3 001173   001175 602005 3                  TNC     s:12164+5,AL
         3 001174   001263 710000 3                  TRA     s:12189
         3 001175   001263 710000 3                  TRA     s:12189
         3 001176   001263 710000 3                  TRA     s:12189
         3 001177   001263 710000 3                  TRA     s:12189
         3 001200   001206 710000 3                  TRA     s:12166
         3 001201   001230 710000 3                  TRA     s:12171
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:72   
         3 001202   001263 710000 3                  TRA     s:12189
         3 001203   001234 710000 3                  TRA     s:12173
         3 001204   001263 710000 3                  TRA     s:12189
         3 001205   001246 710000 3                  TRA     s:12177

  12166  3 001206   100000 236100                    LDQ     0,,PR1
         3 001207   777777 376007                    ANQ     -1,DL
         3 001210   000016 756000 0                  STQ     KEY_VALUE1

  12167  3 001211   100000 236100                    LDQ     0,,PR1
         3 001212   000040 316003                    CANQ    32,DU
         3 001213   001221 600000 3                  TZE     s:12169

  12168  3 001214   100000 236100                    LDQ     0,,PR1
         3 001215   000041 772000                    QRL     33
         3 001216   006006 620006                    EAX0    3078,QL
         3 001217   000016 740000 0                  STX0    KEY_VALUE1
         3 001220   001263 710000 3                  TRA     s:12189

  12169  3 001221   100000 236100                    LDQ     0,,PR1
         3 001222   077000 376003                    ANQ     32256,DU
         3 001223   005000 116003                    CMPQ    2560,DU
         3 001224   001263 601000 3                  TNZ     s:12189

  12169  3 001225   006003 220003                    LDX0    3075,DU
         3 001226   000016 740000 0                  STX0    KEY_VALUE1
         3 001227   001263 710000 3                  TRA     s:12189

  12171  3 001230   100000 236100                    LDQ     0,,PR1
         3 001231   777777 376007                    ANQ     -1,DL
         3 001232   000016 756000 0                  STQ     KEY_VALUE1
         3 001233   001263 710000 3                  TRA     s:12189

  12173  3 001234   100001 236100                    LDQ     1,,PR1
         3 001235   400000 316007                    CANQ    -131072,DL
         3 001236   001242 600000 3                  TZE     s:12175

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:73   
  12174  3 001237   100000 235100                    LDA     0,,PR1
         3 001240   000016 755000 0                  STA     KEY_VALUE1
         3 001241   001263 710000 3                  TRA     s:12189

  12175  3 001242   100000 236100                    LDQ     0,,PR1
         3 001243   777777 376007                    ANQ     -1,DL
         3 001244   000016 756000 0                  STQ     KEY_VALUE1
         3 001245   001263 710000 3                  TRA     s:12189

  12177  3 001246   100001 236100                    LDQ     1,,PR1
         3 001247   400000 316007                    CANQ    -131072,DL
         3 001250   001256 600000 3                  TZE     s:12182

  12178  3 001251   100000 720100                    LXL0    0,,PR1
         3 001252   000016 740000 0                  STX0    KEY_VALUE1

  12179  3 001253   100000 221100                    LDX1    0,,PR1
         3 001254   000016 441000 0                  SXL1    KEY_VALUE1

  12180  3 001255   001263 710000 3                  TRA     s:12189

  12182  3 001256   100001 720100                    LXL0    1,,PR1
         3 001257   007777 360003                    ANX0    4095,DU
         3 001260   000016 740000 0                  STX0    KEY_VALUE1

  12183  3 001261   100000 721100                    LXL1    0,,PR1
         3 001262   000016 441000 0                  SXL1    KEY_VALUE1

      348    12187
      349    12188
      350    12189    3             DO WHILE ( JHIGH$  >  ILOW$ );

  12189  3 001263   000033 236000 0                  LDQ     ILOW$
         3 001264   000034 116000 0                  CMPQ    JHIGH$
         3 001265   001556 603000 3                  TRC     s:12265

      351    12190    4                 DO WHILE ( JHIGH$ > LOW$ );
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:74   

  12190  3 001266   000031 236000 0                  LDQ     LOW$
         3 001267   000034 116000 0                  CMPQ    JHIGH$
         3 001270   001402 603000 3                  TRC     JUMP_OUT_2

      352    12191                          %GET_KEY( KEY=KEY_VALUE2, ITEM$=JHIGH$ );

  12193  3 001271   000007 470400 0                  LDP0    @TYPE
         3 001272   000000 235100                    LDA     0,,PR0
         3 001273   000011 115007                    CMPA    9,DL
         3 001274   001276 602005 3                  TNC     s:12193+5,AL
         3 001275   001370 710000 3                  TRA     s:12216
         3 001276   001370 710000 3                  TRA     s:12216
         3 001277   001370 710000 3                  TRA     s:12216
         3 001300   001370 710000 3                  TRA     s:12216
         3 001301   001307 710000 3                  TRA     s:12195
         3 001302   001332 710000 3                  TRA     s:12200
         3 001303   001370 710000 3                  TRA     s:12216
         3 001304   001337 710000 3                  TRA     s:12202
         3 001305   001370 710000 3                  TRA     s:12216
         3 001306   001352 710000 3                  TRA     s:12206

  12195  3 001307   000034 471400 0                  LDP1    JHIGH$
         3 001310   100000 236100                    LDQ     0,,PR1
         3 001311   777777 376007                    ANQ     -1,DL
         3 001312   000017 756000 0                  STQ     KEY_VALUE2

  12196  3 001313   100000 236100                    LDQ     0,,PR1
         3 001314   000040 316003                    CANQ    32,DU
         3 001315   001323 600000 3                  TZE     s:12198

  12197  3 001316   100000 236100                    LDQ     0,,PR1
         3 001317   000041 772000                    QRL     33
         3 001320   006006 620006                    EAX0    3078,QL
         3 001321   000017 740000 0                  STX0    KEY_VALUE2
         3 001322   001370 710000 3                  TRA     s:12216

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:75   
  12198  3 001323   100000 236100                    LDQ     0,,PR1
         3 001324   077000 376003                    ANQ     32256,DU
         3 001325   005000 116003                    CMPQ    2560,DU
         3 001326   001370 601000 3                  TNZ     s:12216

  12198  3 001327   006003 220003                    LDX0    3075,DU
         3 001330   000017 740000 0                  STX0    KEY_VALUE2
         3 001331   001370 710000 3                  TRA     s:12216

  12200  3 001332   000034 471400 0                  LDP1    JHIGH$
         3 001333   100000 236100                    LDQ     0,,PR1
         3 001334   777777 376007                    ANQ     -1,DL
         3 001335   000017 756000 0                  STQ     KEY_VALUE2
         3 001336   001370 710000 3                  TRA     s:12216

  12202  3 001337   000034 471400 0                  LDP1    JHIGH$
         3 001340   100001 236100                    LDQ     1,,PR1
         3 001341   400000 316007                    CANQ    -131072,DL
         3 001342   001346 600000 3                  TZE     s:12204

  12203  3 001343   100000 235100                    LDA     0,,PR1
         3 001344   000017 755000 0                  STA     KEY_VALUE2
         3 001345   001370 710000 3                  TRA     s:12216

  12204  3 001346   100000 236100                    LDQ     0,,PR1
         3 001347   777777 376007                    ANQ     -1,DL
         3 001350   000017 756000 0                  STQ     KEY_VALUE2
         3 001351   001370 710000 3                  TRA     s:12216

  12206  3 001352   000034 471400 0                  LDP1    JHIGH$
         3 001353   100001 236100                    LDQ     1,,PR1
         3 001354   400000 316007                    CANQ    -131072,DL
         3 001355   001363 600000 3                  TZE     s:12211

  12207  3 001356   100000 720100                    LXL0    0,,PR1
         3 001357   000017 740000 0                  STX0    KEY_VALUE2

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:76   
  12208  3 001360   100000 221100                    LDX1    0,,PR1
         3 001361   000017 441000 0                  SXL1    KEY_VALUE2

  12209  3 001362   001370 710000 3                  TRA     s:12216

  12211  3 001363   100001 720100                    LXL0    1,,PR1
         3 001364   007777 360003                    ANX0    4095,DU
         3 001365   000017 740000 0                  STX0    KEY_VALUE2

  12212  3 001366   100000 721100                    LXL1    0,,PR1
         3 001367   000017 441000 0                  SXL1    KEY_VALUE2

      353    12216    4                     IF KEY_VALUE1 >= KEY_VALUE2 THEN GOTO JUMP_OUT_2;

  12216  3 001370   000016 236000 0                  LDQ     KEY_VALUE1
         3 001371   000017 116000 0                  CMPQ    KEY_VALUE2
         3 001372   001402 603000 3                  TRC     JUMP_OUT_2

      354    12217                                                /* Move JHIGH$ towards ILOW$ */
      355    12218    4                     JHIGH$ = PINCRW( JHIGH$, MSIZE );

  12218  3 001373   000024 236000 0                  LDQ     MSIZE
         3 001374   000022 736000                    QLS     18
         3 001375   000034 036000 0                  ADLQ    JHIGH$
         3 001376   000034 756000 0                  STQ     JHIGH$

      356    12219    4                    END;

  12219  3 001377   000031 116000 0                  CMPQ    LOW$
         3 001400   001402 600000 3                  TZE     JUMP_OUT_2
         3 001401   001271 603000 3                  TRC     s:12193

      357    12220    3   JUMP_OUT_2:
      358    12221    3                 IF JHIGH$ > ILOW$ THEN

  12221  3 001402   000033 236000 0     JUMP_OUT_2   LDQ     ILOW$
         3 001403   000034 116000 0                  CMPQ    JHIGH$
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:77   
         3 001404   001552 603000 3                  TRC     s:12262

      359    12222    4                 DO;

      360    12223    4                     ILOW$ -> VX$CHARS = JHIGH$ -> VX$CHARS;

  12223  3 001405   000034 470400 0                  LDP0    JHIGH$
         3 001406   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 001407   000033 471400 0                  LDP1    ILOW$
         3 001410   040140 100540                    MLR     fill='040'O
         3 001411   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 001412   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

      361    12224    4                     ILOW$ = PINCRW( ILOW$, SIZE );

  12224  3 001413   000021 236000 0                  LDQ     SIZE
         3 001414   000022 736000                    QLS     18
         3 001415   000033 036000 0                  ADLQ    ILOW$
         3 001416   000033 756000 0                  STQ     ILOW$

      362    12225    5                     DO WHILE ( ILOW$ < HIGH$  );

  12225  3 001417   000032 116000 0                  CMPQ    HIGH$
         3 001420   001531 603000 3                  TRC     JUMP_OUT_3

      363    12226                              %GET_KEY( KEY=KEY_VALUE2, ITEM$=ILOW$ );

  12228  3 001421   000007 470400 0                  LDP0    @TYPE
         3 001422   000000 235100                    LDA     0,,PR0
         3 001423   000011 115007                    CMPA    9,DL
         3 001424   001426 602005 3                  TNC     s:12228+5,AL
         3 001425   001520 710000 3                  TRA     s:12251
         3 001426   001520 710000 3                  TRA     s:12251
         3 001427   001520 710000 3                  TRA     s:12251
         3 001430   001520 710000 3                  TRA     s:12251
         3 001431   001437 710000 3                  TRA     s:12230
         3 001432   001462 710000 3                  TRA     s:12235
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:78   
         3 001433   001520 710000 3                  TRA     s:12251
         3 001434   001467 710000 3                  TRA     s:12237
         3 001435   001520 710000 3                  TRA     s:12251
         3 001436   001502 710000 3                  TRA     s:12241

  12230  3 001437   000033 471400 0                  LDP1    ILOW$
         3 001440   100000 236100                    LDQ     0,,PR1
         3 001441   777777 376007                    ANQ     -1,DL
         3 001442   000017 756000 0                  STQ     KEY_VALUE2

  12231  3 001443   100000 236100                    LDQ     0,,PR1
         3 001444   000040 316003                    CANQ    32,DU
         3 001445   001453 600000 3                  TZE     s:12233

  12232  3 001446   100000 236100                    LDQ     0,,PR1
         3 001447   000041 772000                    QRL     33
         3 001450   006006 620006                    EAX0    3078,QL
         3 001451   000017 740000 0                  STX0    KEY_VALUE2
         3 001452   001520 710000 3                  TRA     s:12251

  12233  3 001453   100000 236100                    LDQ     0,,PR1
         3 001454   077000 376003                    ANQ     32256,DU
         3 001455   005000 116003                    CMPQ    2560,DU
         3 001456   001520 601000 3                  TNZ     s:12251

  12233  3 001457   006003 220003                    LDX0    3075,DU
         3 001460   000017 740000 0                  STX0    KEY_VALUE2
         3 001461   001520 710000 3                  TRA     s:12251

  12235  3 001462   000033 471400 0                  LDP1    ILOW$
         3 001463   100000 236100                    LDQ     0,,PR1
         3 001464   777777 376007                    ANQ     -1,DL
         3 001465   000017 756000 0                  STQ     KEY_VALUE2
         3 001466   001520 710000 3                  TRA     s:12251

  12237  3 001467   000033 471400 0                  LDP1    ILOW$
         3 001470   100001 236100                    LDQ     1,,PR1
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:79   
         3 001471   400000 316007                    CANQ    -131072,DL
         3 001472   001476 600000 3                  TZE     s:12239

  12238  3 001473   100000 235100                    LDA     0,,PR1
         3 001474   000017 755000 0                  STA     KEY_VALUE2
         3 001475   001520 710000 3                  TRA     s:12251

  12239  3 001476   100000 236100                    LDQ     0,,PR1
         3 001477   777777 376007                    ANQ     -1,DL
         3 001500   000017 756000 0                  STQ     KEY_VALUE2
         3 001501   001520 710000 3                  TRA     s:12251

  12241  3 001502   000033 471400 0                  LDP1    ILOW$
         3 001503   100001 236100                    LDQ     1,,PR1
         3 001504   400000 316007                    CANQ    -131072,DL
         3 001505   001513 600000 3                  TZE     s:12246

  12242  3 001506   100000 720100                    LXL0    0,,PR1
         3 001507   000017 740000 0                  STX0    KEY_VALUE2

  12243  3 001510   100000 221100                    LDX1    0,,PR1
         3 001511   000017 441000 0                  SXL1    KEY_VALUE2

  12244  3 001512   001520 710000 3                  TRA     s:12251

  12246  3 001513   100001 720100                    LXL0    1,,PR1
         3 001514   007777 360003                    ANX0    4095,DU
         3 001515   000017 740000 0                  STX0    KEY_VALUE2

  12247  3 001516   100000 721100                    LXL1    0,,PR1
         3 001517   000017 441000 0                  SXL1    KEY_VALUE2

      364    12251    5                         IF KEY_VALUE1 <= KEY_VALUE2 THEN GOTO JUMP_OUT_3;

  12251  3 001520   000017 236000 0                  LDQ     KEY_VALUE2
         3 001521   000016 116000 0                  CMPQ    KEY_VALUE1
         3 001522   001531 603000 3                  TRC     JUMP_OUT_3
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:80   

      365    12252                                                /* Move ILOW$ toward JHIGH$ */
      366    12253    5                         ILOW$ = PINCRW( ILOW$, SIZE );

  12253  3 001523   000021 236000 0                  LDQ     SIZE
         3 001524   000022 736000                    QLS     18
         3 001525   000033 036000 0                  ADLQ    ILOW$
         3 001526   000033 756000 0                  STQ     ILOW$

      367    12254    5                        END;

  12254  3 001527   000032 116000 0                  CMPQ    HIGH$
         3 001530   001421 602000 3                  TNC     s:12228

      368    12255    4   JUMP_OUT_3:
      369    12256    5                     IF JHIGH$ > ILOW$ THEN DO;

  12256  3 001531   000033 236000 0     JUMP_OUT_3   LDQ     ILOW$
         3 001532   000034 116000 0                  CMPQ    JHIGH$
         3 001533   001547 603000 3                  TRC     s:12260

      370    12257    5                         JHIGH$ -> VX$CHARS = ILOW$ -> VX$CHARS;

  12257  3 001534   000033 470400 0                  LDP0    ILOW$
         3 001535   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 001536   000034 471400 0                  LDP1    JHIGH$
         3 001537   040140 100540                    MLR     fill='040'O
         3 001540   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 001541   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

      371    12258    5                         JHIGH$ = PINCRW( JHIGH$, MSIZE );

  12258  3 001542   000024 236000 0                  LDQ     MSIZE
         3 001543   000022 736000                    QLS     18
         3 001544   000034 036000 0                  ADLQ    JHIGH$
         3 001545   000034 756000 0                  STQ     JHIGH$

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:81   
      372    12259    5                        END;

  12259  3 001546   001553 710000 3                  TRA     s:12263

      373    12260    4                     ELSE ILOW$ = JHIGH$;  /* No more passes */

  12260  3 001547   000034 236000 0                  LDQ     JHIGH$
         3 001550   000033 756000 0                  STQ     ILOW$

      374    12261    4                    END;                   /* end if JHIGH$ > ILOW$ then */

  12261  3 001551   001553 710000 3                  TRA     s:12263

      375    12262    3                 ELSE JHIGH$ = ILOW$;      /* No more passes  */

  12262  3 001552   000034 756000 0                  STQ     JHIGH$

      376    12263    3                END;                       /* end do while(JHIGH$ > ILOW$) */

  12263  3 001553   000033 116000 0                  CMPQ    ILOW$
         3 001554   001556 600000 3                  TZE     s:12265
         3 001555   001266 603000 3                  TRC     s:12190

      377    12264                                    /* Assign pivot element to the correct position */
      378    12265    2             JHIGH$ -> VX$CHARS =  BUF;

  12265  3 001556   000034 470400 0                  LDP0    JHIGH$
         3 001557   000000 720000 xsym               LXL0    VX_TARGET_COUNT
         3 001560   040140 100400                    MLR     fill='040'O
         3 001561   000013 000014 0                  ADSC9   BUF                      cn=0,n=12
         3 001562   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

      379    12266        /*
      380    12267                                      Put the pointers which delimit the partitions onto
      381    12268                                      the stacks.  Largest partition first.
      382    12269        */
      383    12270    2             HIGH_TO_ILOW = POFFW( HIGH$, ILOW$ );
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:82   

  12270  3 001563   000033 235000 0                  LDA     ILOW$
         3 001564   000022 771000                    ARL     18
         3 001565   000106 755000 0                  STA     STACK_HIGH$+20
         3 001566   000032 236000 0                  LDQ     HIGH$
         3 001567   000022 772000                    QRL     18
         3 001570   000106 136000 0                  SBLQ    STACK_HIGH$+20
         3 001571   000025 756000 0                  STQ     HIGH_TO_ILOW

      384    12271    2             ILOW_TO_LOW  = POFFW( ILOW$, LOW$  );

  12271  3 001572   000031 235000 0                  LDA     LOW$
         3 001573   000022 771000                    ARL     18
         3 001574   000106 755000 0                  STA     STACK_HIGH$+20
         3 001575   000033 236000 0                  LDQ     ILOW$
         3 001576   000022 772000                    QRL     18
         3 001577   000106 136000 0                  SBLQ    STACK_HIGH$+20
         3 001600   000026 756000 0                  STQ     ILOW_TO_LOW

      385    12272    3             IF HIGH_TO_ILOW > ILOW_TO_LOW THEN DO;

  12272  3 001601   000025 116000 0                  CMPQ    HIGH_TO_ILOW
         3 001602   001632 605000 3                  TPL     s:12285

      386    12273    4                 IF HIGH_TO_ILOW > SIZE THEN DO;

  12273  3 001603   000025 236000 0                  LDQ     HIGH_TO_ILOW
         3 001604   000021 116000 0                  CMPQ    SIZE
         3 001605   001616 604400 3                  TMOZ    s:12278

      387    12274    4                     STACK_TOP = STACK_TOP + 1;

  12274  3 001606   000023 054000 0                  AOS     STACK_TOP

      388    12275    4                     STACK_LOW$(STACK_TOP) = PINCRW(ILOW$, SIZE);

  12275  3 001607   000021 236000 0                  LDQ     SIZE
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:83   
         3 001610   000022 736000                    QLS     18
         3 001611   000033 036000 0                  ADLQ    ILOW$
         3 001612   000023 720000 0                  LXL0    STACK_TOP
         3 001613   000037 756010 0                  STQ     STACK_LOW$,X0

      389    12276    4                     STACK_HIGH$(STACK_TOP) = HIGH$;

  12276  3 001614   000032 236000 0                  LDQ     HIGH$
         3 001615   000062 756010 0                  STQ     STACK_HIGH$,X0

      390    12277    4                    END;

      391    12278    4                 IF ILOW_TO_LOW > SIZE THEN DO;

  12278  3 001616   000026 236000 0                  LDQ     ILOW_TO_LOW
         3 001617   000021 116000 0                  CMPQ    SIZE
         3 001620   000575 604400 3                  TMOZ    s:12066

      392    12279    4                     STACK_TOP = STACK_TOP + 1;

  12279  3 001621   000023 054000 0                  AOS     STACK_TOP

      393    12280    4                     STACK_LOW$(STACK_TOP) = LOW$;

  12280  3 001622   000031 236000 0                  LDQ     LOW$
         3 001623   000023 720000 0                  LXL0    STACK_TOP
         3 001624   000037 756010 0                  STQ     STACK_LOW$,X0

      394    12281    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );

  12281  3 001625   000024 236000 0                  LDQ     MSIZE
         3 001626   000022 736000                    QLS     18
         3 001627   000033 036000 0                  ADLQ    ILOW$
         3 001630   000062 756010 0                  STQ     STACK_HIGH$,X0

      395    12282    4                    END;

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:84   
      396    12283    3                END;

  12283  3 001631   000575 710000 3                  TRA     s:12066

      397    12284    3             ELSE DO;

      398    12285    4                 IF ILOW_TO_LOW > SIZE THEN DO;

  12285  3 001632   000021 116000 0                  CMPQ    SIZE
         3 001633   001644 604400 3                  TMOZ    s:12290

      399    12286    4                     STACK_TOP = STACK_TOP + 1;

  12286  3 001634   000023 054000 0                  AOS     STACK_TOP

      400    12287    4                     STACK_LOW$(STACK_TOP) = LOW$;

  12287  3 001635   000031 236000 0                  LDQ     LOW$
         3 001636   000023 720000 0                  LXL0    STACK_TOP
         3 001637   000037 756010 0                  STQ     STACK_LOW$,X0

      401    12288    4                     STACK_HIGH$(STACK_TOP) = PINCRW( ILOW$, MSIZE );

  12288  3 001640   000024 236000 0                  LDQ     MSIZE
         3 001641   000022 736000                    QLS     18
         3 001642   000033 036000 0                  ADLQ    ILOW$
         3 001643   000062 756010 0                  STQ     STACK_HIGH$,X0

      402    12289    4                    END;

      403    12290    4                 IF HIGH_TO_ILOW > SIZE THEN DO;

  12290  3 001644   000025 236000 0                  LDQ     HIGH_TO_ILOW
         3 001645   000021 116000 0                  CMPQ    SIZE
         3 001646   000575 604400 3                  TMOZ    s:12066

      404    12291    4                     STACK_TOP = STACK_TOP + 1;
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:85   

  12291  3 001647   000023 054000 0                  AOS     STACK_TOP

      405    12292    4                     STACK_LOW$(STACK_TOP) = PINCRW( ILOW$, SIZE );

  12292  3 001650   000021 236000 0                  LDQ     SIZE
         3 001651   000022 736000                    QLS     18
         3 001652   000033 036000 0                  ADLQ    ILOW$
         3 001653   000023 720000 0                  LXL0    STACK_TOP
         3 001654   000037 756010 0                  STQ     STACK_LOW$,X0

      406    12293    4                     STACK_HIGH$(STACK_TOP) = HIGH$;

  12293  3 001655   000032 236000 0                  LDQ     HIGH$
         3 001656   000062 756010 0                  STQ     STACK_HIGH$,X0

      407    12294    4                    END;

      408    12295    3                END;

      409    12296    2            END;                           /* do forever */

  12296  3 001657   000575 710000 3                  TRA     s:12066
      410    12297
      411    12298
      412    12299
      413    12300
      414    12301    1   END VXQ$SORT;

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:86   
--  Include file information  --

   B_SEGIDS_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXQ$SORT.
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:87   

 **** Variables and constants ****

  ****  Section 000  Data  VXQ$SORT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w PTR         r     1 @NAME$                     6-0-0/w PTR         r     1 @N_D
     2-0-0/w PTR         r     1 @START$                    3-0-0/w PTR         r     1 @STOP$
     4-0-0/w PTR         r     1 @SZ                        5-0-0/w PTR         r     1 @TP
     7-0-0/w PTR         r     1 @TYPE                     13-0-0/c CHAR(12)    r     1 BUF
    32-0-0/w PTR         r     1 HIGH$                     25-0-0/w SBIN        r     1 HIGH_TO_ILOW
    12-0-0/w UBIN        r     1 I                         20-0-0/w UBIN        r     1 IEPS
    33-0-0/w PTR         r     1 ILOW$                     26-0-0/w SBIN        r     1 ILOW_TO_LOW
    34-0-0/w PTR         r     1 JHIGH$                    36-0-0/w PTR         r     1 KEY$
    16-0-0/w UBIN        r     1 KEY_VALUE1
    16-0-0/w UBIN(18)    r     1 KEY_VALUE1_A(0:1)
    17-0-0/w UBIN        r     1 KEY_VALUE2
    17-0-0/w UBIN(18)    r     1 KEY_VALUE2_A(0:1)
    31-0-0/w PTR         r     1 LOW$                      24-0-0/w SBIN        r     1 MSIZE
    27-0-0/w PTR         r     1 N$                        *0-0-0/w PTR         r     1 NAME$
    10-0-0/w UBIN        r     1 NAME_DISP                 *0-0-0/w UBIN        r     1 N_D
    11-0-0/w UBIN        r     1 PARTITION_SIZE            22-0-0/w SBIN        r     1 PIVOT
    30-0-0/w PTR         r     1 Q$                        21-0-0/w SBIN        r     1 SIZE
    62-0-0/w PTR         r     1 STACK_HIGH$(0:18)
    37-0-0/w PTR         r     1 STACK_LOW$(0:18)
    23-0-0/w SBIN        r     1 STACK_TOP                 *0-0-0/w PTR         r     1 START$
    *0-0-0/w PTR         r     1 STOP$                     *0-0-0/w UBIN        r     1 SZ
    *0-0-0/w UBIN        r     1 TP                        *0-0-0/w UBIN        r     1 TYPE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 VX_LINK_UTS                0-0-0/w UBIN        r     1 VX_TARGET_COUNT

PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:88   
  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC(72)    r     1 B$SEGDEF
     0-0-0/w ACHR        r     1 VX$CHARS                   0-0-0/w STRC(108)   r     1 VX$SC
     0-0-0/w STRC(72)    r     1 VX$TMPLT                   0-0-0/w STRC(72)    r     1 VXD$TMPLT


   Procedure VXQ$SORT requires 944 words for executable code.
   Procedure VXQ$SORT is declared NOAUTO and requires 72 words of local(STATIC) storage.

    No errors detected in file VXQ$SORT.:E05TSI    .
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:89   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:90   
          MINI XREF LISTING

B$DNAME.COUNT
     11747**DCL     11754--IMP-SIZ 11934>>IF      11934>>IF      11971>>IF      11971>>IF      11981>>IF
     11981>>IF
B$DNAME.TEXT
     11754**DCL     11934>>IF      11934>>IF      11971>>IF      11971>>IF      11981>>IF      11981>>IF
B$SEGDEF.AD.OU
     11628**DCL     11633--REDEF
B$SEGDEF.AD.OU.OFFSET
     11631**DCL     12100>>ASSIGN  12126>>ASSIGN  12183>>ASSIGN  12212>>ASSIGN  12247>>ASSIGN
B$SEGDEF.LFLAGS
     11643**DCL     11654--REDEF
B$SEGDEF.SEG.SEGID
     11656**DCL     12099>>ASSIGN  12125>>ASSIGN  12182>>ASSIGN  12211>>ASSIGN  12246>>ASSIGN
B$SEGDEF.VALUE
     11605**DCL     11608--REDEF   11612--REDEF
BUF
     11832**DCL     11930<<ASSIGN  11939>>ASSIGN  11963<<ASSIGN  11965>>ASSIGN  11996>>ASSIGN  12077<<ASSIGN
     12135>>ASSIGN  12159<<ASSIGN  12161>>ASSIGN  12265>>ASSIGN
EXIT_1
     11936**LABEL   11934--GOTO
EXIT_2
     11971**LABEL   11973--GOTO
EXIT_3
     11980**LABEL   11983--GOTO
HIGH$
     11879**DCL     11921<<ASSIGN  11923>>DOWHILE 11927>>ASSIGN  11928>>ASSIGN  11933>>DOWHILE 11947<<ASSIGN
     11953>>ASSIGN  11960>>ASSIGN  11980>>DOWHILE 12001>>ASSIGN  12007>>ASSIGN  12024>>ASSIGN  12068<<ASSIGN
     12070>>DOWHILE 12074>>ASSIGN  12075>>ASSIGN  12104>>DOWHILE 12143<<ASSIGN  12149>>ASSIGN  12156>>ASSIGN
     12225>>DOWHILE 12270>>ASSIGN  12276>>ASSIGN  12293>>ASSIGN
HIGH_TO_ILOW
     11858**DCL     12001<<ASSIGN  12003>>IF      12004>>IF      12021>>IF      12270<<ASSIGN  12272>>IF
     12273>>IF      12290>>IF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:91   
I
     11831**DCL     11929<<DOINDEX 12076<<DOINDEX
IEPS
     11837**DCL     11908<<ASSIGN  11923>>DOWHILE 12059<<ASSIGN  12070>>DOWHILE
ILOW$
     11880**DCL     11931<<ASSIGN  11933>>DOWHILE 11934>>IF      11934>>IF      11935>>ASSIGN  11935>>ASSIGN
     11936<<ASSIGN  11936>>ASSIGN  11939>>ASSIGN  11952<<ASSIGN  11969>>DOWHILE 11976>>IF      11978>>ASSIGN
     11979<<ASSIGN  11979>>ASSIGN  11980>>DOWHILE 11981>>IF      11981>>IF      11982<<ASSIGN  11982>>ASSIGN
     11986>>IF      11988>>ASSIGN  11991<<ASSIGN  11993>>ASSIGN  12001>>ASSIGN  12002>>ASSIGN  12006>>ASSIGN
     12012>>ASSIGN  12019>>ASSIGN  12023>>ASSIGN  12078<<ASSIGN  12104>>DOWHILE 12109>>ASSIGN  12110>>IF
     12111>>ASSIGN  12112>>IF      12114>>ASSIGN  12116>>IF      12117>>ASSIGN  12118>>ASSIGN  12120>>IF
     12121>>ASSIGN  12122>>ASSIGN  12125>>ASSIGN  12126>>ASSIGN  12131>>ASSIGN  12131>>ASSIGN  12132<<ASSIGN
     12132>>ASSIGN  12135>>ASSIGN  12148<<ASSIGN  12189>>DOWHILE 12221>>IF      12223>>ASSIGN  12224<<ASSIGN
     12224>>ASSIGN  12225>>DOWHILE 12230>>ASSIGN  12231>>IF      12232>>ASSIGN  12233>>IF      12235>>ASSIGN
     12237>>IF      12238>>ASSIGN  12239>>ASSIGN  12241>>IF      12242>>ASSIGN  12243>>ASSIGN  12246>>ASSIGN
     12247>>ASSIGN  12253<<ASSIGN  12253>>ASSIGN  12256>>IF      12257>>ASSIGN  12260<<ASSIGN  12262>>ASSIGN
     12270>>ASSIGN  12271>>ASSIGN  12275>>ASSIGN  12281>>ASSIGN  12288>>ASSIGN  12292>>ASSIGN
ILOW_TO_LOW
     11859**DCL     12002<<ASSIGN  12003>>IF      12009>>IF      12016>>IF      12271<<ASSIGN  12272>>IF
     12278>>IF      12285>>IF
JHIGH$
     11881**DCL     11928<<ASSIGN  11930>>ASSIGN  11931>>ASSIGN  11932>>ASSIGN  11940<<ASSIGN  11940>>ASSIGN
     11953<<ASSIGN  11969>>DOWHILE 11970>>DOWHILE 11971>>IF      11971>>IF      11972<<ASSIGN  11972>>ASSIGN
     11976>>IF      11978>>ASSIGN  11986>>IF      11988>>ASSIGN  11989<<ASSIGN  11989>>ASSIGN  11991>>ASSIGN
     11993<<ASSIGN  11996>>ASSIGN  12075<<ASSIGN  12077>>ASSIGN  12078>>ASSIGN  12083>>ASSIGN  12084>>IF
     12085>>ASSIGN  12086>>IF      12088>>ASSIGN  12090>>IF      12091>>ASSIGN  12092>>ASSIGN  12094>>IF
     12095>>ASSIGN  12096>>ASSIGN  12099>>ASSIGN  12100>>ASSIGN  12136<<ASSIGN  12136>>ASSIGN  12149<<ASSIGN
     12189>>DOWHILE 12190>>DOWHILE 12195>>ASSIGN  12196>>IF      12197>>ASSIGN  12198>>IF      12200>>ASSIGN
     12202>>IF      12203>>ASSIGN  12204>>ASSIGN  12206>>IF      12207>>ASSIGN  12208>>ASSIGN  12211>>ASSIGN
     12212>>ASSIGN  12218<<ASSIGN  12218>>ASSIGN  12221>>IF      12223>>ASSIGN  12256>>IF      12257>>ASSIGN
     12258<<ASSIGN  12258>>ASSIGN  12260>>ASSIGN  12262<<ASSIGN  12265>>ASSIGN
JUMP_OUT_1
     12135**LABEL   12130--GOTO
JUMP_OUT_2
     12221**LABEL   12216--GOTO
JUMP_OUT_3
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:92   
     12256**LABEL   12251--GOTO
KEY$
     11883**DCL     11932<<ASSIGN  11934>>IF      11934>>IF      11966<<ASSIGN  11971>>IF      11971>>IF
     11981>>IF      11981>>IF
KEY_VALUE1
     11833**DCL     11834--REDEF   12083<<ASSIGN  12088<<ASSIGN  12091<<ASSIGN  12092<<ASSIGN  12130>>IF
     12166<<ASSIGN  12171<<ASSIGN  12174<<ASSIGN  12175<<ASSIGN  12216>>IF      12251>>IF
KEY_VALUE1_A
     11834**DCL     12085<<ASSIGN  12086<<ASSIGN  12095<<ASSIGN  12096<<ASSIGN  12099<<ASSIGN  12100<<ASSIGN
     12168<<ASSIGN  12169<<ASSIGN  12178<<ASSIGN  12179<<ASSIGN  12182<<ASSIGN  12183<<ASSIGN
KEY_VALUE2
     11835**DCL     11836--REDEF   12109<<ASSIGN  12114<<ASSIGN  12117<<ASSIGN  12118<<ASSIGN  12130>>IF
     12195<<ASSIGN  12200<<ASSIGN  12203<<ASSIGN  12204<<ASSIGN  12216>>IF      12230<<ASSIGN  12235<<ASSIGN
     12238<<ASSIGN  12239<<ASSIGN  12251>>IF
KEY_VALUE2_A
     11836**DCL     12111<<ASSIGN  12112<<ASSIGN  12121<<ASSIGN  12122<<ASSIGN  12125<<ASSIGN  12126<<ASSIGN
     12197<<ASSIGN  12198<<ASSIGN  12207<<ASSIGN  12208<<ASSIGN  12211<<ASSIGN  12212<<ASSIGN  12232<<ASSIGN
     12233<<ASSIGN  12242<<ASSIGN  12243<<ASSIGN  12246<<ASSIGN  12247<<ASSIGN
LOW$
     11878**DCL     11920<<ASSIGN  11923>>DOWHILE 11927>>ASSIGN  11946<<ASSIGN  11952>>ASSIGN  11960>>ASSIGN
     11962>>ASSIGN  11964>>ASSIGN  11965>>ASSIGN  11966>>ASSIGN  11970>>DOWHILE 12002>>ASSIGN  12011>>ASSIGN
     12018>>ASSIGN  12067<<ASSIGN  12070>>DOWHILE 12074>>ASSIGN  12142<<ASSIGN  12148>>ASSIGN  12156>>ASSIGN
     12158>>ASSIGN  12160>>ASSIGN  12161>>ASSIGN  12166>>ASSIGN  12167>>IF      12168>>ASSIGN  12169>>IF
     12171>>ASSIGN  12173>>IF      12174>>ASSIGN  12175>>ASSIGN  12177>>IF      12178>>ASSIGN  12179>>ASSIGN
     12182>>ASSIGN  12183>>ASSIGN  12190>>DOWHILE 12271>>ASSIGN  12280>>ASSIGN  12287>>ASSIGN
MSIZE
     11857**DCL     11909<<ASSIGN  11928>>ASSIGN  11935>>ASSIGN  11939>>ASSIGN  11940>>ASSIGN  11972>>ASSIGN
     11989>>ASSIGN  12012>>ASSIGN  12019>>ASSIGN  12060<<ASSIGN  12075>>ASSIGN  12131>>ASSIGN  12135>>ASSIGN
     12136>>ASSIGN  12218>>ASSIGN  12258>>ASSIGN  12281>>ASSIGN  12288>>ASSIGN
N$
     11876**DCL     11907<<ASSIGN  11932>>ASSIGN  11934>>IF      11934>>IF      11966>>ASSIGN  11971>>IF
     11971>>IF      11981>>IF      11981>>IF
NAME$
     11806**DCL        49--PROC    11907>>ASSIGN  12048--ENTRY
NAME_DISP
     11829**DCL     11906<<ASSIGN  11932>>ASSIGN  11934>>IF      11934>>IF      11966>>ASSIGN  11971>>IF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:93   
     11971>>IF      11981>>IF      11981>>IF
N_D
     11811**DCL        49--PROC    11906>>ASSIGN  12048--ENTRY
PARTITION_SIZE
     11830**DCL     11927<<ASSIGN  11929>>DOINDEX 12074<<ASSIGN  12076>>DOINDEX
PIVOT
     11855**DCL     11959<<ASSIGN  11960<<ASSIGN  11960>>ASSIGN  11962>>ASSIGN  12155<<ASSIGN  12156<<ASSIGN
     12156>>ASSIGN  12158>>ASSIGN
Q$
     11877**DCL     11962<<ASSIGN  11963>>ASSIGN  11964>>ASSIGN  12158<<ASSIGN  12159>>ASSIGN  12160>>ASSIGN
SIZE
     11854**DCL     11904<<ASSIGN  11905>>ASSIGN  11908>>ASSIGN  11909>>ASSIGN  11927>>ASSIGN  11927>>ASSIGN
     11931>>ASSIGN  11936>>ASSIGN  11960>>ASSIGN  11960>>ASSIGN  11979>>ASSIGN  11982>>ASSIGN  12004>>IF
     12006>>ASSIGN  12009>>IF      12016>>IF      12021>>IF      12023>>ASSIGN  12057<<ASSIGN  12058>>ASSIGN
     12059>>ASSIGN  12060>>ASSIGN  12074>>ASSIGN  12074>>ASSIGN  12078>>ASSIGN  12132>>ASSIGN  12156>>ASSIGN
     12156>>ASSIGN  12224>>ASSIGN  12253>>ASSIGN  12273>>IF      12275>>ASSIGN  12278>>IF      12285>>IF
     12290>>IF      12292>>ASSIGN
STACK_HIGH$
     11885**DCL     11902<<ASSIGN  11921>>ASSIGN  11947>>ASSIGN  12007<<ASSIGN  12012<<ASSIGN  12019<<ASSIGN
     12024<<ASSIGN  12055<<ASSIGN  12068>>ASSIGN  12143>>ASSIGN  12276<<ASSIGN  12281<<ASSIGN  12288<<ASSIGN
     12293<<ASSIGN
STACK_LOW$
     11884**DCL     11901<<ASSIGN  11920>>ASSIGN  11946>>ASSIGN  12006<<ASSIGN  12011<<ASSIGN  12018<<ASSIGN
     12023<<ASSIGN  12054<<ASSIGN  12067>>ASSIGN  12142>>ASSIGN  12275<<ASSIGN  12280<<ASSIGN  12287<<ASSIGN
     12292<<ASSIGN
STACK_TOP
     11856**DCL     11903<<ASSIGN  11919>>IF      11920>>ASSIGN  11921>>ASSIGN  11922<<ASSIGN  11922>>ASSIGN
     11942>>IF      11946>>ASSIGN  11947>>ASSIGN  11948<<ASSIGN  11948>>ASSIGN  12005<<ASSIGN  12005>>ASSIGN
     12006>>ASSIGN  12007>>ASSIGN  12010<<ASSIGN  12010>>ASSIGN  12011>>ASSIGN  12012>>ASSIGN  12017<<ASSIGN
     12017>>ASSIGN  12018>>ASSIGN  12019>>ASSIGN  12022<<ASSIGN  12022>>ASSIGN  12023>>ASSIGN  12024>>ASSIGN
     12056<<ASSIGN  12066>>IF      12067>>ASSIGN  12068>>ASSIGN  12069<<ASSIGN  12069>>ASSIGN  12138>>IF
     12142>>ASSIGN  12143>>ASSIGN  12144<<ASSIGN  12144>>ASSIGN  12274<<ASSIGN  12274>>ASSIGN  12275>>ASSIGN
     12276>>ASSIGN  12279<<ASSIGN  12279>>ASSIGN  12280>>ASSIGN  12281>>ASSIGN  12286<<ASSIGN  12286>>ASSIGN
     12287>>ASSIGN  12288>>ASSIGN  12291<<ASSIGN  12291>>ASSIGN  12292>>ASSIGN  12293>>ASSIGN
START$
     11807**DCL        49--PROC    11900>>IF      11901>>ASSIGN  12048--ENTRY   12053>>IF      12054>>ASSIGN
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:94   
STOP$
     11808**DCL        49--PROC    11900>>IF      11902>>ASSIGN  12048--ENTRY   12053>>IF      12055>>ASSIGN
SZ
     11809**DCL        49--PROC    11904>>ASSIGN  12048--ENTRY   12057>>ASSIGN
TP
     11810**DCL        49--PROC    12048--ENTRY
TYPE
     11812**DCL        49--PROC    12048--ENTRY   12081>>DOCASE  12107>>DOCASE  12164>>DOCASE  12193>>DOCASE
     12228>>DOCASE
VX$CHARS
     11889**DCL     11930>>ASSIGN  11935<<ASSIGN  11935>>ASSIGN  11939<<ASSIGN  11963>>ASSIGN  11964<<ASSIGN
     11964>>ASSIGN  11965<<ASSIGN  11978<<ASSIGN  11978>>ASSIGN  11988<<ASSIGN  11988>>ASSIGN  11996<<ASSIGN
     12077>>ASSIGN  12131<<ASSIGN  12131>>ASSIGN  12135<<ASSIGN  12159>>ASSIGN  12160<<ASSIGN  12160>>ASSIGN
     12161<<ASSIGN  12223<<ASSIGN  12223>>ASSIGN  12257<<ASSIGN  12257>>ASSIGN  12265<<ASSIGN
VX$SC.ADDRESS
     11408**DCL     12083>>ASSIGN  12109>>ASSIGN  12166>>ASSIGN  12195>>ASSIGN  12230>>ASSIGN
VX$SC.ATTR.SEGMENT
     11398**DCL     12084>>IF      12110>>IF      12167>>IF      12196>>IF      12231>>IF
VX$SC.SEG
     11374**DCL     12085>>ASSIGN  12111>>ASSIGN  12168>>ASSIGN  12197>>ASSIGN  12232>>ASSIGN
VX$SC.TYPE
     11376**DCL     12086>>IF      12112>>IF      12169>>IF      12198>>IF      12233>>IF
VX$SECT.MBZ
     11484**DCL     11486--REDEF   11490--REDEF
VX$TMPLT.A
     11779**DCL     11780--REDEF   11781--REDEF   11932>>ASSIGN  11934>>IF      11934>>IF      11966>>ASSIGN
     11971>>IF      11971>>IF      11981>>IF      11981>>IF      12095>>ASSIGN  12096>>ASSIGN  12121>>ASSIGN
     12122>>ASSIGN  12178>>ASSIGN  12179>>ASSIGN  12207>>ASSIGN  12208>>ASSIGN  12242>>ASSIGN  12243>>ASSIGN
VXD$TMPLT.AD.ISADDR
     11545**DCL     11547--REDEF
VXD$TMPLT.AD.OFFSET
     11547**DCL     12088>>ASSIGN  12092>>ASSIGN  12114>>ASSIGN  12118>>ASSIGN  12171>>ASSIGN  12175>>ASSIGN
     12200>>ASSIGN  12204>>ASSIGN  12235>>ASSIGN  12239>>ASSIGN
VXD$TMPLT.CONSTNT
     11552**DCL     12090>>IF      12094>>IF      12116>>IF      12120>>IF      12173>>IF      12177>>IF
     12202>>IF      12206>>IF      12237>>IF      12241>>IF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:95   
VXD$TMPLT.LFLAGS
     11558**DCL     11571--REDEF
VXD$TMPLT.VALUE
     11523**DCL     11525--REDEF   12091>>ASSIGN  12117>>ASSIGN  12174>>ASSIGN  12203>>ASSIGN  12238>>ASSIGN
VX_BIAS.A
      9617**DCL      9618--REDEF
VX_CBUF.CHARS_A
      9551**DCL      9552--REDEF
VX_CONST_DCB.ACTPOS
     10733**DCL     10733--REDEF
VX_CONST_DCB.ARS#
     10692**DCL     10692--REDEF
VX_CONST_DCB.ATTR#
     10722**DCL     10722--REDEF   10724--REDEF
VX_CONST_DCB.BORROW
     10744**DCL     10744--REDEF   10744--REDEF   10744--REDEF
VX_CONST_DCB.EOMCHAR#
     10699**DCL     10700--REDEF
VX_CONST_DCB.FLDID
     10736**DCL     10737--REDEF
VX_CONST_DCB.FORM$
     10728**DCL     10728--REDEF
VX_CONST_DCB.FSECT
     10751**DCL     10751--REDEF
VX_CONST_DCB.FSN#
     10718**DCL     10718--REDEF   10718--REDEF   10719--REDEF
VX_CONST_DCB.HEADER$
     10727**DCL     10728--REDEF
VX_CONST_DCB.IXTNSIZE#
     10724**DCL     10725--REDEF
VX_CONST_DCB.LASTSTA$
     10708**DCL     10708--REDEF
VX_CONST_DCB.LVL
     10745**DCL     10745--REDEF
VX_CONST_DCB.NAME#.C
     10708**DCL     10709--REDEF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:96   
VX_CONST_DCB.NOEOF
     10740**DCL     10740--REDEF
VX_CONST_DCB.NRECS#
     10725**DCL     10725--REDEF
VX_CONST_DCB.NRECX
     10752**DCL     10752--REDEF
VX_CONST_DCB.OHDR
     10741**DCL     10741--REDEF
VX_CONST_DCB.ORG#
     10716**DCL     10717--REDEF
VX_CONST_DCB.PRECNO
     10749**DCL     10749--REDEF
VX_CONST_DCB.RCSZ
     10757**DCL     10757--REDEF
VX_CONST_DCB.RES#
     10710**DCL     10710--REDEF
VX_CONST_DCB.SETX
     10729**DCL     10729--REDEF
VX_CONST_DCB.TAB$
     10728**DCL     10728--REDEF
VX_CONST_DCB.TDA
     10748**DCL     10749--REDEF
VX_CONST_DCB.WSN#
     10710**DCL     10711--REDEF
VX_EBUF.CHARS_A
     10140**DCL     10141--REDEF
VX_EFIELD1.CHARS
     10149**DCL     10150--REDEF
VX_EFIELD2.CHARS
     10153**DCL     10154--REDEF
VX_EFIELD3.CHARS
     10157**DCL     10158--REDEF
VX_EI_KEY_BUF.KEY
     10533**DCL     10534--REDEF
VX_ERRORS
      9594**DCL      9605--REDEF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:97   
VX_ERRORS.CONFLICT_A
      9600**DCL      9601--REDEF
VX_ERRORS.UNSAT_A
      9596**DCL      9597--REDEF
VX_IMAGE_DATA.CPAGE#_A
      8731**DCL      8732--REDEF
VX_IMAGE_DATA.NODE_A$
      8743**DCL      8744--REDEF
VX_IMAGE_DATA.START_A$
      8735**DCL      8736--REDEF
VX_IMAGE_DATA.STOP_A$
      8739**DCL      8740--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8800**DCL      8801--REDEF
VX_IMAGE_DS3.NODE_A$
      8812**DCL      8813--REDEF
VX_IMAGE_DS3.START_A$
      8804**DCL      8805--REDEF
VX_IMAGE_DS3.STOP_A$
      8808**DCL      8809--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8823**DCL      8824--REDEF
VX_IMAGE_DS4.NODE_A$
      8835**DCL      8836--REDEF
VX_IMAGE_DS4.START_A$
      8827**DCL      8828--REDEF
VX_IMAGE_DS4.STOP_A$
      8831**DCL      8832--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8846**DCL      8847--REDEF
VX_IMAGE_DS5.NODE_A$
      8858**DCL      8859--REDEF
VX_IMAGE_DS5.START_A$
      8850**DCL      8851--REDEF
VX_IMAGE_DS5.STOP_A$
      8854**DCL      8855--REDEF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:98   
VX_IMAGE_DS6.CPAGE#_A
      8869**DCL      8870--REDEF
VX_IMAGE_DS6.NODE_A$
      8881**DCL      8882--REDEF
VX_IMAGE_DS6.START_A$
      8873**DCL      8874--REDEF
VX_IMAGE_DS6.STOP_A$
      8877**DCL      8878--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8892**DCL      8893--REDEF
VX_IMAGE_DS7.NODE_A$
      8904**DCL      8905--REDEF
VX_IMAGE_DS7.START_A$
      8896**DCL      8897--REDEF
VX_IMAGE_DS7.STOP_A$
      8900**DCL      8901--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8915**DCL      8916--REDEF
VX_IMAGE_DS8.NODE_A$
      8927**DCL      8928--REDEF
VX_IMAGE_DS8.START_A$
      8919**DCL      8920--REDEF
VX_IMAGE_DS8.STOP_A$
      8923**DCL      8924--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8754**DCL      8755--REDEF
VX_IMAGE_PROC.NODE_A$
      8766**DCL      8767--REDEF
VX_IMAGE_PROC.START_A$
      8758**DCL      8759--REDEF
VX_IMAGE_PROC.STOP_A$
      8762**DCL      8763--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8777**DCL      8778--REDEF
VX_IMAGE_ROS.NODE_A$
      8789**DCL      8790--REDEF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:99   
VX_IMAGE_ROS.START_A$
      8781**DCL      8782--REDEF
VX_IMAGE_ROS.STOP_A$
      8785**DCL      8786--REDEF
VX_LINK_UTS
      9576**DCL     11959>>ASSIGN  12155>>ASSIGN
VX_M_VECTOR.F
      8582**DCL      8586--REDEF
VX_M_VECTOR_DP.F
      8617**DCL      8621--REDEF
VX_O.ACCTN_A$
      9746**DCL      9747--REDEF
VX_O.DCB_MATCH_A$
      9755**DCL      9756--REDEF
VX_O.DCB_MATCH_HIT_A
      9761**DCL      9762--REDEF
VX_O.FIDN_A$
      9740**DCL      9741--REDEF
VX_O.FID_A$
      9732**DCL      9733--REDEF
VX_O.INCLUDE_A$
      9752**DCL      9753--REDEF
VX_O.MAP_A
      9726**DCL      9727--REDEF
VX_O.NODCB_A
      9783**DCL      9784--REDEF
VX_O.NUM_A
      9671**DCL      9673--REDEF
VX_O.OPT_A
      9771**DCL      9772--REDEF
VX_O.PRIV_A
      9687**DCL      9689--REDEF
VX_O.SIN_A
      9640**DCL      9641--REDEF
VX_O.TCB_A
      9767**DCL      9768--REDEF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:100  
VX_OD.ACCTN_A$
      9944**DCL      9945--REDEF
VX_OD.DCB_MATCH_A$
      9953**DCL      9954--REDEF
VX_OD.FIDN_A$
      9938**DCL      9939--REDEF
VX_OD.FID_A$
      9930**DCL      9931--REDEF
VX_OD.INCLUDE_A$
      9950**DCL      9951--REDEF
VX_OD.MAP_A
      9924**DCL      9925--REDEF
VX_OD.NODCB_A
      9968**DCL      9969--REDEF
VX_OD.NUM_A
      9871**DCL      9872--REDEF
VX_OD.PRIV_A
      9886**DCL      9887--REDEF
VX_OD.SIN_A
      9840**DCL      9841--REDEF
VX_OD.VECTOR_A$
      9959**DCL      9960--REDEF
VX_OL.MAX_A
      9815**DCL      9817--REDEF
VX_OL.MIN_A
      9800**DCL      9801--REDEF
VX_ON.ACCTN_A$
     10089**DCL     10091--REDEF
VX_ON.DCB_MATCH_A$
     10100**DCL     10102--REDEF
VX_ON.FIDN_A$
     10082**DCL     10084--REDEF
VX_ON.FID_A$
     10073**DCL     10075--REDEF
VX_ON.INCLUDE_A$
     10096**DCL     10098--REDEF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:101  
VX_ON.MAP_A
     10066**DCL     10068--REDEF
VX_ON.NODCB_A$
     10116**DCL     10117--REDEF
VX_ON.NUM_A
     10011**DCL     10013--REDEF
VX_ON.PRIV_A
     10027**DCL     10029--REDEF
VX_ON.SIN_A
      9979**DCL      9981--REDEF
VX_ON.VECTOR_A$
     10107**DCL     10108--REDEF
VX_OUHEAD.VERSION
      9426**DCL      9428--REDEF
VX_OU_HEAD
      9369**DCL      9408--REDEF
VX_OU_HEAD.REC_A
      9381**DCL      9384--REDEF
VX_O_KEY_BUF.FORM0
      8630**DCL      8633--REDEF    8640--REDEF
VX_O_KEY_BUF_L.FORM0
      8653**DCL      8656--REDEF    8663--REDEF
VX_PASS2_REF.OU.L_START
     10319**DCL     10324--REDEF
VX_PASS2_REF.OU.L_STOP
     10325**DCL     10330--REDEF
VX_PASS2_REF.OU.MAX
     10313**DCL     10318--REDEF
VX_PASS2_REF.OU.SIZE
     10331**DCL     10336--REDEF
VX_PASS2_REF.SAT.COUNT
     10358**DCL     10364--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10365**DCL     10371--REDEF
VX_PASS2_REF.SAT.L_START
     10344**DCL     10350--REDEF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:102  
VX_PASS2_REF.SAT.L_STOP
     10351**DCL     10357--REDEF
VX_PASS2_REF.SAT.MAX
     10338**DCL     10343--REDEF
VX_PASS2_REF.UNSAT.L_START
     10406**DCL     10411--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10412**DCL     10417--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10418**DCL     10423--REDEF
VX_PASS2_REF.UNSAT.MAX
     10400**DCL     10405--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10430**DCL     10435--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10424**DCL     10429--REDEF
VX_PHRASE.PHRASE
      9832**DCL      9834--REDEF
VX_PROGRAM_BIAS.A
      9610**DCL      9611--REDEF
VX_R_KEY_BUF.FORM0
      8679**DCL      8683--REDEF    8689--REDEF
VX_SD.A
      8307**DCL      8308--REDEF
VX_SPC.B$.MINE
     10501**DCL     10507--REDEF
VX_SPC.B$.NAME
     10480**DCL     10486--REDEF
VX_SPC.B$.SKIP
     10494**DCL     10500--REDEF
VX_SPC.B$.VALUE
     10487**DCL     10493--REDEF
VX_SPC.SEG.NAME
     10449**DCL     10455--REDEF
VX_SPC.SEG.VALUE
     10456**DCL     10462--REDEF
PL6.E3A0      #001=VXQ$SORT File=VXQ$SORT.:E05TSI                                WED 07/30/97 08:34 Page:103  
VX_TARGET_COUNT
     10165**DCL     11889--IMP-SIZ 11905<<ASSIGN  11930>>ASSIGN  11935>>ASSIGN  11935>>ASSIGN  11939>>ASSIGN
     11963>>ASSIGN  11964>>ASSIGN  11964>>ASSIGN  11965>>ASSIGN  11978>>ASSIGN  11978>>ASSIGN  11988>>ASSIGN
     11988>>ASSIGN  11996>>ASSIGN  12058<<ASSIGN  12077>>ASSIGN  12131>>ASSIGN  12131>>ASSIGN  12135>>ASSIGN
     12159>>ASSIGN  12160>>ASSIGN  12160>>ASSIGN  12161>>ASSIGN  12223>>ASSIGN  12223>>ASSIGN  12257>>ASSIGN
     12257>>ASSIGN  12265>>ASSIGN
VX_TSX0_OVERLAY.H
     10224**DCL     10227--REDEF
