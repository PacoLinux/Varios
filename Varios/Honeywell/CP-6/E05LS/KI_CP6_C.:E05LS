

07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          1    
    1      /*M*  KI_CP6_C     Interactive Terminal Control FPT MACROs CP6 & LCP6 */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*  MEC,MOC,EXM=20,CLM=30,CRM=78               */
    8      /*    TABS 7,9,21,78 */
    9      /**/
   10      /*
   11           The following is a list of the macros in KI_CP6_C and whether
   12           they are CP-6 or LCP-6 flavored.  If any of these change,
   13           the documentation group should be notified for the Host and Fep
   14           Monitor Services Manuals and the owner of the DRAW program for
   15           the FPTs for the manuals should be notified.
   16
   17           FPT_TRMCLT    - CP-6 AND LCP-6
   18           VLP_WINDOW    - CP-6 AND LCP-6
   19           VLP_TRMCTL    - CP-6 AND LCP-6
   20           VLP_EDTCTL    - CP-6 ONLY
   21           FPT_PROMPT    - CP-6 AND LCP-6
   22           FPT_EOM       - CP-6 AND LCP-6
   23           VLP_EOMTABLE  - CP-6 AND LCP-6
   24           FPT_TRMPRG    - CP-6 AND LCP-6
   25           FPT_GLINEATTR - CP-6 AND LCP-6
   26           VLP_LINEATTR  - CP-6 AND LCP-6
   27           FPT_TRMATTR   - CP-6 AND LCP-6
   28           VLP_TRMATTR   - CP-6 AND LCP-6
   29           FPT_PLATEN    - CP-6 AND LCP-6
   30           FPT_TRMTAB    - CP-6 AND LCP-6
   31           FPT_SINPUT    - CP-6 AND LCP-6
   32           FPT_PROFILE   - CP-6 ONLY
   33           FPT_TRMISC    - CP-6 ONLY
   34           FPT_FECTL     - CP-6 ONLY
   35           FPT_SETFP     - CP-6 ONLY
   36           VLP_FPRG      - CP-6 ONLY
   37           FPT_DRIBBLE   - CP-6 ONLY
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          2    
   38           FPT_DCLFLD    - CP-6 AND LCP-6
   39           VLP_FLDATR    - CP-6 AND LCP-6
   40           FPT_MDFFLD    - CP-6 AND LCP-6
   41           FPT_SLCFLD    - CP-6 AND LCP-6
   42           FPT_RLSFLD    - CP-6 AND LCP-6
   43           FPT_ERASE     - CP-6 AND LCP-6
   44           FPT_GCHAN     - LCP-6 ONLY
   45           FPT_RCHAN     - LCP-6 ONLY
   46           VLR_GCHAN     - LCP-6 ONLY
   47           FPT_NODEINFO  - CP-6 ONLY
   48           VLR_NODEINFO  - CP-6 ONLY
   49           B$TERMINAL_ID - CP-6 ONLY
   50           FPT_CONFIG    - CP-6 ONLY
   51           VLR_CONFIG    - CP-6 ONLY
   52           VLP_FEPNAME   - CP-6 ONLY
   53           KI_MCL_E      - LCP-6 INTERNAL USE ONLY
   54           KI$ENTS       - LCP-6 INTERNAL USE ONLY
   55           KI$HANDLERS   - LCP-6 INTERNAL USE ONLY
   56           KI_FPTS       - LCP-6 INTERNAL USE ONLY
   57      */
   58                          /*F* NAME: Terminal Services
   59                          ..::L1 "Introduction to Terminal Services\\X"
   60                          Terminal services allow the user program to
   61                          specify special control of terminal functions and
   62                          to obtain information about terminal attributes.
   63                          These services provide information about both the
   64                          logical and physical attributes of the terminal.
   65                          Several services allow the user to change the
   66                          terminal attributes. In a normal environment,
   67                          terminal attributes are not modified.  However,
   68                          these services are provided to accommodate users
   69                          requiring special control of terminals.
   70                          ..VA$M_FOOTER "\Introduction to Terminal Services"
   71
   72                          The profile of a terminal, which  describes the
   73                          physical characteristics of the terminal, is
   74                          established by the system manager via the SUPER
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          3    
   75                          processor discussed in the CP-6 System Support
   76                          Reference Manual.  These characteristics include
   77                          such information as platen width, type of cursor
   78                          positioning, and other terminal attributes.  When
   79                          the user logs on, the default profile is
   80                          established unless the user specifies an alternate
   81                          terminal profile.  Any terminal profile
   82                     can be modified somewhat by IBEX commands and the following
   83                     monitor services:
   84                     TU
   85
   86                     M$PLATEN
   87                     M$PROFILE     ~F
   88                     M$STRMCTL
   89                     M$STRMATTR
   90                     M$STRMTAB
   91                     TF
   92
   93                     Probably the most commonly used terminal service is
   94                     M$PROMPT.  The M$PROMPT service allows a user to
   95                     set a prompt for input on the terminal.  This
   96                     prompt is a character string that is displayed to
   97                     request input from the terminal.  This service
   98                     permits the user to control  positioning of the
   99                     prompt by specifying the parameter for vertical
  100                     form control (VFC).  If VFC is set, the first
  101                     character of the prompt character string specifies
  102                     the VFC spacing.
  103                     */
  104      /*F* NAME: FORM Access Method
  105
  106      The Form access method is used for screen- or field-oriented
  107      applications.  It makes the terminal appear to be a field-oriented
  108      forms device.  It allows the user program to access the terminal using
  109      a technique optimized for the manipulation of fields of data.
  110
  111      If the terminal has forms capabilities, they are used to the greatest
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          4    
  112      extent possible, and the interaction between the virtual and real
  113      devices is on a screen basis.
  114
  115      If a primitive teleprinter is being used, a field-by-field dialog is
  116      carried on with the operator; the field heading is printed, and the
  117      operator enters the field data.  When the form is complete, a virtual
  118      device representation of the input is sent to the application.
  119
  120      FORM access method is permitted in programs running on the host or
  121      on the FEP.
  122      ..::HL "\For more information on FORM access method, see the CP-6"
  123      ..::HL "\Host Monitor Services Reference (CE74/CE75) or the CP-6 FEP"
  124      ..::HL "\Monitor Services Reference (CE66)."
  125      ..::L3 "Defining the Form and its Fields\\X"
  126      A "form" begins as a window that is created when a DCB is opened with
  127      ORG=FORM and creates a WINDOW using a VLP_WINDOW parameter that
  128      describes the dimensions and characteristics of the window (form).
  129      (See the CP-6 Programmer Reference (CE40), Terminal Control section
  130      for a conceptual discussion about windows.)
  131
  132      Within the window, the program declares fields using the M$DCLFLD
  133      monitor service which refers to a VLP_FLDATR area specifying field
  134      attributes.  Each field is one or more contiguous positions on a line;
  135      field declarations must not overlap one another.
  136      In addition to defining the field location and graphic
  137      attributes, the program may specify usage restrictions for the field.
  138      The field may be defined as a constant, that is, a field for
  139      display only that may be erased only by an explicit request to do so.
  140      The field may be defined as "protected" from input by the end-user of
  141      the form; the field may also be "protected" from erasure.
  142      The program can assign unique numbers to the fields for identification.
  143      ..::L3 "Manipulating the Form\\X"
  144      Once the form is open, the program can perform M$WRITE monitor
  145      services to modify data in fields and M$READ to receive input entered
  146      by the form's end-user.
  147      The M$READ service with KEYS=YES causes the cursor to be positioned
  148      to the beginning of the specified field(s).
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          5    
  149      The operator may position to any selected input field and enter data.
  150      M$READs return the input data, one field at a time, after the operator
  151      indicates that all input is complete.
  152      F$DCB.EOMCHAR and F$DCB.ACTPOS are returned only for the field in
  153      which the cursor was positioned when the activation character was
  154      entered.  For other fields, F$DCB.EOMCHAR is set to %EOM_EOR#.
  155
  156      To facilitate working with multiple fields, the program may select
  157      (via M$SLCFLD) a set of fields for the following operations:
  158
  159      1.  Erasure (see M$ERASE)
  160
  161      2.  Input (see M$READ).
  162
  163      3.  Field attribute or data modification (see M$MDFFLD and M$WRITE).
  164
  165      4.  Field declaration deletion (see M$RLSFLD).
  166
  167      All fields in a form may be selected by omitting KEY on the call to
  168      M$SLCFLD; or
  169      a group of fields may be selected by a succession of calls to
  170      M$SLCFLD without other intervening calls.  If other calls intervene,
  171      then the previously selected fields are deselected and only the
  172      field(s) specified on the next call to M$SLCFLD becomes selected.
  173
  174      The erase, read, modify, and release operations may also be
  175      requested for individual fields by
  176      specifying the KEY to identify the field (specifying the
  177      KEY implicitly selects the field).
  178
  179      Note:  M$READ must be performed repeatedly whether KEY is specified
  180      or not, until an ALTRETURN occurs.  The error code for a normal
  181      completion is E$EOF.  Then other operations
  182      are permitted on the form.
  183
  184      M$DEVICE with no options, when directed through a DCB opened with
  185      ORG=FORM, causes the screen display to be updated to include any
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          6    
  186      changes requested since the last update.  Otherwise, such updates
  187      occur only when M$READ is used.
  188
  189      For a complete description of the monitor services, see the
  190      CP-6 Host Monitor Services Reference (CE74/CE75) or the CP-6 FEP
  191      Monitor Services Reference (CE66).
  192      ..::L3 "Form Escape and Control Sequences\\X"
  193      Most full-duplex asynchronous screen terminals that have
  194      cursor addressing capabilities are supported as Forms Processing
  195      devices.  In addition Polled VIP terminals and IBM 3270-compatible
  196      terminals are supported as Forms Processing devices.
  197      A number of escape and control sequences are provided for the end-user
  198      of a form.
  199      For a complete listing of the escape
  200      and control sequences and their meanings, see the
  201      CP-6 Programmer Reference (CE40), Terminal Control section,
  202      "Forms Driven Terminals".
  203      */
  204
  205      /*F* NAME: Screen Editing Access Method
  206
  207      The Screen Editing (SE) access method is used with screen-based
  208      terminals.  It allows a program to display a set of records on the
  209      screen, and allows the user to update the records by moving the
  210      cursor and typing.
  211
  212      The SE access method supports most of the basic input editing
  213      functions for moving the cursor and deleting, replacing, and
  214      inserting characters in a record.  SE permits cursor
  215      movement up and down among records in the set being displayed, as well
  216      as split and join operations.  SE also provides a Read-Only mode in
  217      which all editing functions are disabled, leaving only the cursor
  218      positioning functions operational.
  219      See the CP-6 Programmer Reference, Terminal Control section, for a
  220      discussion of input editing functions.
  221
  222      When the user changes a record and moves the cursor off the record,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          7    
  223      the FEP informs the host program of the change.  The host program
  224      updates its data according to the change the user made to the record,
  225      and then reads from the FEP again.  In this way, the data on the
  226      screen always matches the data which the host is maintaining, except
  227      for the record containing the cursor.
  228
  229      The SE access method is intended for applications in which the host
  230      program wants to let the user update textual information directly,
  231      by moving the cursor and typing, rather than by typing commands.
  232      Although the most common application of SE is for screen editing,
  233      the information displayed on the screen need not be records from a
  234      disk file, but can be any textual information.
  235      ..::HL "\For more information on SE access method, see the CP-6"
  236      ..::HL "\Host Monitor Services Reference (CE74)."
  237      ..::L3 "Vertical Scrolling\\X"
  238      When the user attempts to move the cursor below the bottom of the
  239      screen (or below a vertical scrolling margin), the FEP requests that
  240      the host program give it more records for insertion at the bottom of
  241      the screen, and moves the records on the screen up.  (The FEP makes
  242      a request for more records only if it does not have additional records
  243      available.  The FEP usually has more records available than are
  244      displayed at one time.)  An analogous
  245      sequence occurs when the user attempts to move the cursor above the
  246      top of the screen (or above a vertical scrolling margin).
  247      If it is selected, it can be handled
  248      ..::L3 "Horizontal Scrolling\\X"
  249      Horizontal scrolling is optional.
  250      If it is selected, it can be handled
  251      entirely by the FEP.  Records which are too long to be displayed on
  252      the terminal screen can be scrolled left or right by the user, so
  253      that any record, no matter how long, only occupies one line of the
  254      screen.  As an option, all records on the screen can be scrolled
  255      simultaneously when the record containing the cursor is shifted.
  256      If horizontal scrolling is not selected, records which are
  257      longer than the width of the screen are displayed on several
  258      successive lines.
  259      ..::L3 "Opening a DCB for SE Access Method\\X"
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          8    
  260      For a DCB with ORG=SE, the parameters ASN=DEVICE, RES=UCnn are
  261      required.  Other parameters that are meaningful at M$OPEN time are
  262      NRECS, SPARE, KEYL, and WINDOW.  NRECS specifies the
  263      number of records in the FEP cache.  SPARE specifies how many joins to
  264      allow (deleted records) before the FEP asks for more records to fill
  265      the cache.  The KEYL and WINDOW parameters are discussed in
  266      the next heading.
  267      ..::L3 "Defining a Window for Screen Editing\\X"
  268      The WINDOW parameter may be specified to
  269      locate a VLP_WINDOW area that describes the dimensions and
  270      characteristics of the screen-editing window.  The UC DCB must be the
  271      only DCB using the screen-editing window.
  272      See the CP-6 Programmer Reference (CE40), Terminal Control section
  273      for a conceptual discussion about windows.
  274
  275      Records displayed within the window are
  276      uniquely identified by a fixed length key.  (The key length, 1-4 8-bit
  277      bytes, can be specified at M$OPEN, via the KEYL parameter).
  278      ..::L3 "Defining Editing Control and Terminal Control Parameters\\X"
  279      The M$STRMCTL monitor
  280      service is used to specify Edit Control parameters in a VLP_EDTCTL
  281      area.  These parameters describe scrolling characteristics, key
  282      incrementation, and other editing characteristics.
  283
  284      The M$STRMCTL monitor service can also be used to supply any terminal
  285      control parameters in a VLP_TRMCTL area.
  286      ..::L3 "SE-Related Monitor Services\\X"
  287      The monitor services intended for use with SE access method are
  288      summarized in the following list.
  289
  290      .fif
  291      } M$OPEN -   Open a UC DCB for SE access within a window.
  292      } M$READ -   Permit the user to position within the window and
  293      }            perform normal editing functions such as positioning,
  294      }            modifying, inserting, or deleting characters in a record.
  295      } M$WRITE -  Supply records to the SE window.
  296      } M$DEVICE - Update the screen to reflect any changes made by program
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          9    
  297      }            calls to M$WRITE, M$ERASE and M$DELREC.  In this case,
  298      }            M$DEVICE is called with the DCB as the only option.  (The
  299      }            screen is otherwise only updated when M$READ begins.)
  300      }            M$DEVICE may also be used to set an end-of-file marker by
  301      }            means of HDR which locates a VLP_HDR area in which TITLE
  302      }            contains the end-of-file marker.
  303      } M$SINPUT - Position the cursor.
  304      } M$ERASE -  Remove all records from the cache.  (The cache is
  305      }            explained under "Manipulating Records on the Screen".)
  306      } M$DELREC - Deletes a record from the cache.
  307      } M$STRMCTL and M$GTRMCTL - Supply or retrieve VLP_EDTCTL and
  308      }            VLP_TRMCTL parameters.
  309      } M$CLOSE -  Close the UC DCB for SE access, eliminating the window
  310      }            if it was created when the DCB was opened.
  311      .fin
  312      ..::L3 "Manipulating Records on the Screen\\X"
  313      Once the window is created, the program can perform M$WRITE monitor
  314      services to display data on the screen and M$READ to receive input or
  315      modifications entered by the terminal user.
  316
  317      Several records are displayed on the screen at a time.
  318      Calls to M$READ permit the user to position within the visible records
  319      or to move the cursor up or down to make additional records visible.
  320      When the user modifies a record and then moves the cursor from that
  321      record, the M$READ completes, returning the key of the record and the
  322      new data for the changed record (KEYR must be set to obtain the key).
  323      M$READ will also complete if the user enters any activation character.
  324      After M$READ completes, the F$DCB.ACTPOS field records the position
  325      of the cursor in the record as a byte index, starting at zero.
  326      If M$READ completed due to an activation character, the data returned
  327      may be the same as it was previously.  This condition is reflected in
  328      F$DCB.DVBYTE.TRANS#, which when set indicates that the terminal user
  329      did not modify the data prior to entering the activation character.
  330      .spf 0
  331      Note:  Reads activate on buffer full (count-done) only when the
  332      cursor is positioned at the end of the data.  (For M$SINPUT, it is
  333      possible to set the input to the full buffer size, provided that
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          10   
  334      the cursor is also placed before the end of the data.)
  335
  336      If the user 'joins' two adjacent records on the screen, the active
  337      M$READ completes, returning the new record, and the next M$READ
  338      takes the alternate return with E$RECORD_DELETED and the key of the
  339      eliminated record.
  340
  341      The FEP maintains a small cache of records.  The size of the cache
  342      defaults to twice the length of the window, or the length of the
  343      screen, whichever is larger, unless NRECS specifies a non-zero value
  344      less than 50.  This cache is replenished when needed by means of the
  345      E$RECORDS_NEEDED alternate return on a call to M$READ.  For this
  346      alternate return, F$DCB.ARS# contains a signed number, indicating
  347      by its value how many records are needed, and by its sign which ones.
  348      If F$DCB.ARS# is positive, the records should be adjacent to, and
  349      greater than, the key that was returned.  Otherwise, they should
  350      be less than the key, but still adjacent to it.
  351      The records are supplied with M$WRITE calls.  If insufficient records
  352      are available, M$WEOF is used to abort the "records needed" phase
  353      and allow display of only the available records.
  354
  355      It is also possible for a call to M$READ to take the alternate return
  356      because the user attempted to insert a new record, and the FEP was
  357      unable to create a key for it.  In this case, the E$INSERT_NO_ROOM
  358      error code accompanies the key, data, and cursor position of the
  359      attempted record-split.  The program might then want to renumber some
  360      records by means of M$DELREC and M$WRITE.  To eliminate the need for
  361      the user to reenter the split request, the program should also
  362      perform the split operation and reposition the cursor appropriately.
  363
  364      Adding records at the end of the file is controlled by the
  365      VLP_EDTCTL parameter EASYAPPEND.  With EASYAPPEND=YES, moving the
  366      cursor down past the end-of-file position in column one adds new empty
  367      records.  With EASYAPPEND=NO, only non-empty records can be added at
  368      the end-of-file position.  To define an end-of-file marker, use the
  369      M$DEVICE service specifying HDR with the VLP_HDR area's TITLE field
  370      set to a character string.  Specifying HDR (or HDR=ERASE) suppresses
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          11   
  371      the screen-update function normally performed by M$DEVICE.
  372      ..::L3 "SE Escape and Control Sequences\\X"
  373      A number of escape and control sequences are provided for the screen
  374      editing end-user.  For a complete listing of these sequences and their
  375      meanings, see the CP-6 Programmer Reference (CE40), Terminal Control
  376      section, "Screen Editing".
  377      ..::L3 "SE Read-Write and Read-Only Modes\\X"
  378      Screen-editing access method normally operates in Read-Write mode
  379      which allows updating of records.
  380      In Read-Only mode any attempt to update records fails but causes
  381      the terminal to beep when any key is pressed; only the positioning
  382      functions are operative; and the space bar can be used to position the
  383      cursor to the right.
  384
  385      The choice of Read-Write or Read-Only mode is determined by defaults,
  386      but may be changed at any time with M$STRMATTR.  Read-Write mode is
  387      in effect unless the associated DCB is opened with SPARE > 99, in
  388      which case Read-Only mode is used.  The M$STRMATTR parameter
  389      FCNTBL=SE1 means Read-Write; FCNTBL=SE2 means Read-Only.
  390
  391      In Read-Only mode, the beep reaction can be changed to some other
  392      response by using the IMP processor to change the NUL character.
  393      The SE2 function table sets it to T=BEL READ WRITE_TRANS.  In order to
  394      maintain the Read-only mode, of course, it must be changed to
  395      something that does not modify the input record.  */
  396                                    /**/
  397      DCL M$UC DCB;
  398                          /*F* NAME: M$UC.  M$UC is declared (DCL M$UC DCB;)
  399                           in CP_6 because it is the default DCB for
  400                           a number of PMMEs.  Any program which invokes these
  401                           includes should thus not also declare it.  The M$UC
  402                           DCB is special in a number of ways, cannot be M$OPENed,
  403                           and in general should not be used directly for a
  404                           users I/O.                                             */
  405
  406
  407
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          12   
  408                                    /********************************************/
  409                                    /*   M$STRMCTL - SET TERMINAL CONTROL FLAGS   */
  410                                    /*   M$GTRMCTL - GET TERMINAL CONTROL FLAGS   */
  411                                    /********************************************/
  412
  413
  414                          /*F* NAME: M$GTRMCTL and M$STRMCTL - Terminal Control
  415
  416                          The services described in this section allow the
  417                          user to manipulate the terminal attributes and to
  418                          specify special control of the terminal.
  419                          ..::IX "M$STRMCTL"
  420
  421                          The M$GTRMCTL service provides the user with
  422                          the current terminal control information.
  423                          Terminal control information includes terminal
  424                          control flags set by PROFILE, escape-character
  425                          sequences, or M$STRMCTL.
  426
  427                          The form of the call for this service is as
  428                          follows:
  429
  430                          CALL M$GTRMCTL (FPT_TRMCTL) [ALTRET (label)];
  431
  432                          The M$STRMCTL service is used to
  433                          programmatically set flags that control various
  434                          characteristics of the terminal.  Many of these
  435                          flags can also be set by the terminal user through
  436                          the use of escape character sequences or via a
  437                          profile.
  438
  439                          The form of the call for this service is as
  440                          follows:
  441
  442                          CALL M$STRMCTL (FPT_TRMCTL) [ALTRET (label)];
  443
  444                          Parameters for FPT_TRMCTL are as
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          13   
  445                          follows:
  446                          */
  447
  448
  449      %MACRO FPT_TRMCTL (FPTN=FPT_TRMCTL,
  450              TRMCTL=NIL,
  451              VLPTYPE(TRMCTL=0,WINDOW=1,EDTCTL=2,ANY)=0,
  452              STATION=NIL,
  453              DCB=M$UC,
  454              VECTORS(YES='1'B,NO='0'B)='1'B,
  455              %ALGN=,
  456              STCLASS=STATIC);
  457
  458      /*!* V Y */
  459      %LSET LISTDIR='0'B;
  460      %LSET LISTEXP='1'B;
  461      %LSET L6=BITBIN(MODE_FEP);
  462      %LSET ALG=TEXTCHAR(ALGN);
  463      %IF ALG = '';
  464       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
  465      %ENDIF;
  466      %LSET ALG=CHARTEXT(ALG);
  467      /*!* V N */
  468      %LSET LISTCOM='0'B;
  469      %LSET LISTSUB='1'B;
  470      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  471      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
  472      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
  473      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
  474      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
  475
  476      DCL 1 FPTN STCLASS %ALG,
  477      %IF VECTORS;
  478            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
  479      %IF L6=0;
  480            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
  481                          /*K* STATION = VARIABLE    locates an area containing~F
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          14   
  482                          the name of the station to which this service is
  483                          to be applied when used on COMGROUPs.  If the DCB
  484                          specified is assigned to a comgroup this parameter
  485                          may be specified;  if not it is ignored.  The
  486                          VLP_STATION macro is used to generate the
  487                          station name.
  488                          The default is NIL.
  489                                                                                   */
  490      %ENDIF;
  491            2 TRMCTL_ VECTOR %INIT(VECTOR(TRMCTL))%EINIT,
  492                          /*K* TRMCTL = VARIABLE       locates a  buffer that
  493                          contains or receives the terminal  control information.
  494                          The structure of the buffer is generated by the
  495                          VLP_vlptype macros described next in this
  496                          section (see the VLPTYPE option).
  497                          The default is NIL.
  498                                                                                  */
  499      %ENDIF;
  500            2 V %ALG,
  501              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
  502                          /*K* DCB = DCBNAME
  503                          specifies the DCB assigned to a timesharing
  504                          or comgroup terminal device.~F
  505                          terminal device.~H
  506
  507                          The default is M$UC which is assigned to the user's
  508                          timesharing terminal.
  509                                                                                  */
  510
  511              3 %CHARTEXT('VLPTYPE')%L6# UBIN(%(18-L6*10)) UNAL %INIT(VLPTYPE)%EINIT,
  512                          /*K* VLPTYPE = OPTION specifies which of a number
  513                          of terminal control structures is to be used to set
  514                          or receive the control attributes.  The name of the
  515                          macro describing the TRMCTL variable may be
  516                          constructed by preceding the VLPTYPE option with a
  517                          prefix of VLP_, e.g. VLP_TRMCTL.  The options are
  518                          TRMCTL, WINDOW, and EDTCTL.  Preprocessor equates for the
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          15   
  519                          values used for this option are constructed by
  520                          following the option name with a #, and
  521                          preceding the option name with
  522                          TRMCTL_, e.g. TRMCTL_TRMCTL#.~F
  523                          G_TRMCTL_, e.g. G_TRMCTL_TRMCTL#.~H
  524
  525                          The default is TRMCTL.
  526                          */
  527              3 * UBIN WORD UNAL %INIT(0)%EINIT;
  528      %MEND;
  529                          /*F* NAME: VLP_WINDOW
  530
  531                          The VLP_WINDOW macro defines terminal control
  532                          information.  Parameters for the VLP are as
  533                          follows:
  534                          */
  535
  536      %MACRO VLP_WINDOW (FPTN=VLP_WINDOW,
  537              FWINDOW=' ',
  538              REMOVABLE(YES='1'B,NO='0'B)='01'B,
  539              MINLENGTH=255,
  540              MINWIDTH=255,
  541              LENGTH=+0,
  542              WIDTH=+0,
  543              POSITION(TOP=1,LEFT=2,RIGHT=3,BOTTOM=4)=1,
  544              TOPBRDR(YES='1'B,NO='0'B)='01'B,
  545              BTMBRDR(YES='1'B,NO='0'B)='01'B,
  546              HBRDRSIZ=0,
  547              HBRDRCHR="BINASC(0)",
  548              LFTBRDR(YES='1'B,NO='0'B)='01'B,
  549              RHTBRDR(YES='1'B,NO='0'B)='01'B,
  550              VBRDRSIZ=0,
  551              VBRDRCHR="BINASC(0)",
  552              %FILCHRS=13,
  553              %ALGN=,
  554              STCLASS=STATIC);
  555
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          16   
  556      /*!* V Y */
  557      %LSET LISTDIR='0'B;
  558      %LSET LISTEXP='1'B;
  559      %LSET L6=BITBIN(MODE_FEP);
  560      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  561      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
  562      %LSET FIL2=CHARTEXT (CONCAT (SUBSTR ('2 * BIT(1)INIT(''0''B)',0,(1-L6)*(10+S#*5)),SUBSTR (',',L6)));
  563      %LSET ALG=TEXTCHAR(ALGN);
  564      %IF ALG = '';
  565       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
  566      %ENDIF;
  567      %LSET ALG=CHARTEXT(ALG);
  568      %LSET LAST=CHARTEXT(SUBSTR(',;',BITBIN(FILCHRS=0),1));
  569      /*!* V N */
  570      %LSET LISTCOM='0'B;
  571      %LSET LISTSUB='1'B;
  572      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
  573      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
  574      %LSET L6#=CHARTEXT (SUBSTR('#',L6));
  575
  576
  577      DCL 1 FPTN STCLASS %ALG,
  578            2 %CHARTEXT('FWINDOW')%L6# CHAR(4) %INIT(FWINDOW)%EINIT,
  579                          /*K* FWINDOW = VALUE-CHAR(4) specifies the name of
  580                          the window from which a new window is to be created,
  581                          or whose space is to be used to change the size of
  582                          an existing one.  The name is of the form 'UCnn'.
  583
  584                          The default causes this parameter to be ignored.
  585                          */
  586            2 FSTR REDEF %CHARTEXT('FWINDOW')%L6#,
  587              3 ID UBIN BYTE CALIGNED,
  588                          /*B* FWINDOW is redefed as FSTR for communication with
  589                          VDH.  UCnn should be converted to a stream-id and put
  590                     in FSTR.ID, which is a byte.  The rest if FSTR is currently
  591                     undefined.                                                   */
  592              3 * CHAR(3),
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          17   
  593            2 FWINDOW$ REDEF %CHARTEXT('FWINDOW')%L6# PTR,
  594                     /*B* FWINDOW is also redefed as FWINDOW$ for internal use.   */
  595      %LSET SZ = SUBSTR(TEXTCHAR(LENGTH),0,1);
  596      %IF SZ='.';
  597      %LSET SZ=CHARBIN(SUBSTR(CONCAT(TEXTCHAR(LENGTH),'0'),1,2))+64*256;
  598      %ELSE;
  599      %LSET SZ=LENGTH+32*256*BITBIN(SZ~='+' AND SZ~='-');
  600      %ENDIF;
  601      %LSET WSZ = SUBSTR(TEXTCHAR(WIDTH),0,1);
  602      %IF WSZ='.';
  603      %LSET WSZ=CHARBIN(SUBSTR(CONCAT(TEXTCHAR(WIDTH),'0'),1,2))+64*256;
  604      %ELSE;
  605      %LSET WSZ=WIDTH+32*256*BITBIN(WSZ~='+' AND WSZ~='-');
  606      %ENDIF;
  607                /*B* LENGTH, WIDTH, and ORG_PST.COLUMN need to be converted back
  608                and forth from L66 UBIN HALF to L6 UBIN whenever this structure
  609                is sent to VDH or received from VDH.                              */
  610            2 %CHARTEXT('LENGTH')%L6# SBIN(%(18-2*L6))UNAL %INIT(%SZ)%EINIT,
  611                          /*K* LENGTH = VALUE specifies the size of the window,
  612           in absolute or incremental lines or as a percentage of the full screen
  613       (or of the current size for an existing window).  The absolute option is indicated at
  614       MACRO invocation time by the absence of + or - as the first
  615       character of the substitution expression, and at run-time or
  616       in a preprocessor expression as %WINDOW_ABSVAL#+lines.
  617       The percentage option may be spelled at MACRO invocation
  618       as a decimal fraction (e.g., .85), or at run-time or in a
  619       preprocessor expression as %WINDOW_PERCENT#+value.  This
  620       option is ignored for a new window if POSITION=LEFT or RIGHT.
  621       The default is +0, which doesn't change an existing window,
  622       but is specially interpreted for a new one as .99.                         */
  623            2 %CHARTEXT('WIDTH')%L6# SBIN(%(18-2*L6))UNAL %INIT(%WSZ)%EINIT,
  624                          /*K* WIDTH = VALUE specifies the size of the window,
  625           in absolute or incremental columns or as a percentage of the full screen
  626       (or of the current size for an existing window).  The absolute option is indicated at
  627       MACRO invocation time by the absence of + or - as the first
  628       character of the substitution expression, and at run-time or
  629       in a preprocessor expression as %WINDOW_ABSVAL#+columns.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          18   
  630       The percentage option may be spelled at MACRO invocation
  631       as a decimal fraction (e.g., .85), or at run-time or in a
  632       preprocessor expression as %WINDOW_PERCENT#+value.  This
  633       option is ignored for a new window if POSITION=TOP or BOTTOM.
  634       The default is +0, which doesn't change an existing window,
  635       but is specially interpreted for a new one as .50.                         */
  636            2 %CHARTEXT('POSITION')%L6# UBIN BYTE CALIGNED %INIT(POSITION)%EINIT,
  637                          /*K* POSITION = OPTION specifies the portion of FWINDOW
  638                          that this (new) window is to occupy.  The options are
  639                          TOP, BOTTOM, LEFT, and RIGHT.  This parameter is ignored
  640                          if the window already exists.                           */
  641      /*N* Add ABOVE, BELOW, BEFORE, and AFTER in future release. */
  642            2 ORG_PST,
  643                          /*K* ORG_PST - for M$GTRMCTL only, returns the absolute
  644                          position of the top-left corner of the window.  The field
  645                          names are LINE (UBIN BYTE) and COLUMN (UBIN 2 Bytes).
  646                                                                                  */
  647      /*N* Implement for M$LDEV and M$OPEN in future release, or for save/get */
  648              3 LINE UBIN BYTE CALIGNED %INIT(0)%EINIT,
  649              3 COLUMN UBIN(%(18-2*L6))UNAL %INIT(0)%EINIT,
  650            %FIL2
  651            2 %CHARTEXT('TOPBRDR')%L6# BIT(2) UNAL %INIT(TOPBRDR)%EINIT,
  652                          /*K* TOPBRDR = {YES|NO} specifies whether space is to
  653                     be reserved at the top to separate this window from the one
  654                     above it.  The default causes this parameter to be
  655                     ignored, or is NO for a new window.                          */
  656            2 %CHARTEXT('BTMBRDR')%L6# BIT(2) UNAL %INIT(BTMBRDR)%EINIT,
  657                          /*K* BTMBRDR = {YES|NO} specifies whether space is to
  658                     be reserved at the bottom to separate this window from the one
  659                     below it.  The default causes this parameter to be
  660                     ignored, or is NO for a new window.                          */
  661            2 %CHARTEXT('HBRDRSIZ')%L6# UBIN(4) UNAL %INIT(HBRDRSIZ)%EINIT,
  662                     /*K* HBRDRSIZ = VALUE-DEC(0-15) specifies the size in lines
  663                     of the horizontal border space(s) (TOPBRDR and BTMBRDR).
  664                     The default is zero, which causes this parameter to be
  665                     ignored.  Note that the border presence parameters must
  666                     be used to remove a border - HBRDRSIZ=0 won't work.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          19   
  667                                                                                  */
  668            2 %CHARTEXT('HBRDRCHR')%L6# CHAR(1) UNAL %INIT(HBRDRCHR)%EINIT,
  669                          /*K* HBRDRCHR = VALUE-CHAR(1) specifies the single ASCII
  670                     character to be used to mark the horizontal border space(s).
  671                     It will fill every character position of the farthest line
  672                     of the border space.  The default causes this parameter
  673                     to be ignored.                                               */
  674            %FIL2
  675            2 %CHARTEXT('LFTBRDR')%L6# BIT(2) UNAL %INIT(LFTBRDR)%EINIT,
  676                          /*K* LFTBRDR = {YES|NO} specifies whether space is to
  677                     be reserved at the left to separate this window from the one
  678                     to the left.  The default causes this parameter to be
  679                     ignored, or is NO for a new window.                          */
  680            2 %CHARTEXT('RHTBRDR')%L6# BIT(2) UNAL %INIT(RHTBRDR)%EINIT,
  681                          /*K* RHTBRDR = {YES|NO} specifies whether space is to
  682                     be reserved at the right to separate this window from the one
  683                     to the right.  The default causes this parameter to be
  684                     ignored, or is NO for a new window.                          */
  685            2 %CHARTEXT('VBRDRSIZ')%L6# UBIN(4) UNAL %INIT(VBRDRSIZ)%EINIT,
  686                     /*K* VBRDRSIZ = VALUE-DEC(0-15) specifies the size in columns
  687                     of the vertical border space(s) (LFTBRDR and RHTBRDR).
  688                     The default is zero, which causes this parameter to be
  689                     ignored.  Note that the border presence parameters must
  690                     be used to remove a border - HVBRDRSIZ=0 won't work.
  691                                                                                  */
  692            2 %CHARTEXT('VBRDRCHR')%L6# CHAR(1) UNAL %INIT(VBRDRCHR)%EINIT,
  693                          /*K* VBRDRCHR = VALUE-CHAR(1) specifies the single ASCII
  694                          character to be used to mark the vertical border space(s).
  695                     It will fill every character position of the farthest column
  696                     of the border space.  The default causes this parameter
  697                     to be ignored.                                               */
  698            2 %CHARTEXT('MINLENGTH')%L6# UBIN BYTE CALIGNED %INIT(MINLENGTH)%EINIT,
  699                          /*K* MINLENGTH = VALUE-DEC(0-254) specifies the minimum
  700                          length for this window in lines.  The default is 255,
  701                          which causes this parameter to be ignored unless this is
  702                          a new window, in which case it means the length is to
  703                          be fixed.  See REMOVABLE also.                          */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          20   
  704            2 %CHARTEXT('MINWIDTH')%L6# UBIN BYTE CALIGNED %INIT(MINWIDTH)%EINIT,
  705                          /*K* MINWIDTH = VALUE-DEC(0-254) specifies the minimum
  706                          width for this window in columns.  The default is 255,
  707                          which causes this parameter to be ignored unless this is
  708                          a new window, in which case it means the width is to
  709                          be fixed.  See REMOVABLE also.                          */
  710            %FIL2
  711            2 %CHARTEXT('REMOVABLE')%L6# BIT(2)UNAL %INIT(REMOVABLE)%EINIT,
  712                          /*K* REMOVABLE = {YES|NO} specifies whether the window
  713                          size is permitted to drop below MINWIDTH or MINLENGTH.  If
  714                          so, the window will be removed from the screen when it
  715                          is too small, but its context will be maintained.  The
  716                          default causes this parameter to be ignored, or is NO
  717                          for a new window.                                       */
  718            2 * BIT(6)UNAL %INIT('25'O)%EINIT %LAST
  719      /*!* V Y */
  720      %IF FILCHRS>0;
  721                2 *(0:%(FILCHRS-1)) CHAR(1) %INIT(BINASC(255)*0)%EINIT;
  722      %ENDIF;
  723      /*!* V N */
  724      %MEND;
  725
  726                          /*F* NAME: VLP_TRMCTL
  727
  728                          The VLP_TRMCTL macro defines terminal control
  729                          information.  Parameters for the VLP are as
  730                          follows:
  731                          */
  732
  733      %MACRO VLP_TRMCTL (FPTN=VLP_TRMCTL,
  734              TABSIM(YES='1'B,NO='0'B,NA='01'B)='01'B,
  735              TABRELATIVE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  736              SPACEINSERT(YES='1'B,NO='0'B,NA='01'B)='01'B,
  737              SENDBKSPACE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  738              DISPINPUT(YES='1'B,NO='0'B,NA='01'B)='01'B,
  739              PARITYCHECK(YES='1'B,NO='0'B,NA='01'B)='01'B,
  740              OUTPUTDISCARD(YES='1'B,NO='0'B,NA='01'B)='01'B,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          21   
  741              UPPERCASE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  742              LOWERCASE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  743              HALFDUXPAPERTAPE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  744              FULLDUXPAPERTAPE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  745              ACTONTRN(YES='1'B,NO='0'B,NA='01'B)='01'B,
  746              APLLCNRM(YES='1'B,NO='0'B,NA='01'B)='01'B,
  747              RETYPOVR(YES='1'B,NO='0'B,NA='01'B)='01'B,
  748              EDITOVR(YES='1'B,NO='0'B,NA='01'B)='01'B,
  749              SCROLL(YES='1'B,NO='0'B,NA='01'B)='01'B,
  750              PAGEHALT(YES='1'B,NO='0'B,NA='01'B)='01'B,
  751              PRINTHALT(YES='1'B,NO='0'B,NA='01'B)='01'B,
  752              RELPAGE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  753              SIMPERF(YES='1'B,NO='0'B,NA='01'B)='01'B,
  754              TRUNCATE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  755              NOOPTMIZ(YES='1'B,NO='0'B,NA='01'B)='01'B,
  756              WRAPPAGE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  757              HSCROLL(YES='1'B,NO='0'B,NA='01'B)='01'B,
  758              INSERTMODE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  759              MSGHALT(YES='1'B,NO='0'B,NA='01'B)='01'B,
  760              MSGLINE(YES='1'B,NO='0'B,NA='01'B)='01'B,
  761              TRNUSRINPFNC(YES='1'B,NO='0'B,NA='01'B)='01'B,
  762              HSMARGIN=255,
  763              HSSHIFT(CENTER=127,ANY)=255,
  764              AUTOTABCLM=255,
  765              WORDWRAPCLM=255,
  766              SINPUTSZ=255,
  767              BREAKCOUNT=255,
  768              ENBENTEXTSRDCHR(YES='1'B,NO='0'B,NA='01'B)='01'B,
  769              PARKCURSOR(YES='1'B,NO='0'B,NA='01'B)='01'B,
  770              CURSORREAD(YES='1'B,NO='0'B,NA='01'B)='01'B,
  771              KEEPTYPAHD(YES='1'B,NO='0'B,NA='01'B)='01'B,
  772              AUTOCURSOR(YES='1'B,NO='0'B,NA='01'B)='01'B,
  773              ADJTOPLFT(YES='1'B,NO='0'B,NA='01'B)='01'B,
  774              %ALGN=,
  775              STCLASS=STATIC);
  776
  777      /*!* V Y */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          22   
  778      %LSET LISTDIR='0'B;
  779      %LSET LISTEXP='1'B;
  780      %LSET L6=BITBIN(MODE_FEP);
  781      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  782      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
  783      %LSET FIL2=CHARTEXT (CONCAT (SUBSTR ('2 * BIT(1)INIT(''0''B)',0,(1-L6)*(10+S#*5)),SUBSTR (',',L6)));
  784      %LSET ALG=TEXTCHAR(ALGN);
  785      %IF ALG = '';
  786       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
  787      %ENDIF;
  788      %LSET ALG=CHARTEXT(ALG);
  789      /*!* V N */
  790      %LSET LISTCOM='0'B;
  791      %LSET LISTSUB='1'B;
  792      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
  793      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
  794      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
  795
  796
  797      DCL 1 FPTN STCLASS %ALG,
  798            %FIL2
  799            2 %CHARTEXT ('TABSIM')%L6# BIT(2)UNAL %INIT(TABSIM)%EINIT,
  800                          /*K* TABSIM = {YES|NO}    YES specifies that when an
  801                          HT character is sent to the terminal, the cursor
  802                          is positioned to the next logical tab stop.  If no
  803                          tabstops are set, each tab character is replaced
  804                          by a single blank.  NO specifies that HT
  805                          characters are sent to the terminal unchanged.
  806                          (This can result in the cursor being positioned
  807                          one space or several spaces depending on the
  808                          device tabs of the terminal.)
  809
  810                          The default causes this parameter to be ignored.
  811                          */
  812            2 %CHARTEXT('TABRELATIVE')%L6# BIT(2) UNAL %INIT(TABRELATIVE)%EINIT,
  813                          /*K* TABRELATIVE  = {YES|NO}    YES specifies that
  814                          on input and input echoing user tabstops are
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          23   
  815                          relative to the column where input was prompted.
  816                          NO specifies that user tabstops are relative to
  817                          column 1.
  818
  819                          The default causes this parameter to be ignored.
  820                          */
  821            2 %CHARTEXT('SPACEINSERT')%L6# BIT(2)UNAL %INIT(SPACEINSERT)%EINIT,
  822                          /*K* SPACEINSERT = {YES|NO}    YES specifies that
  823                          horizontal tab (HT) characters input from the
  824                          terminal are to be replaced by an appropriate
  825                          number of blanks based on user tabstop settings
  826                          prior to being placed in the M$READ buffer.  NO
  827                          specifies that HT characters are to be placed in
  828                          the buffer unchanged.  (This can result in a
  829                          significant space saving in large files.)
  830
  831                          The default causes this parameter to be ignored.
  832                          */
  833            2 %CHARTEXT('SENDBKSPACE')%L6# BIT(2) UNAL %INIT(SENDBKSPACE)%EINIT,
  834                          /*K* SENDBKSPACE = {YES|NO} YES specifies that when
  835                          the cursor is positioned over a character (A), not
  836                          at the right edge of the insertion window, and with
  837                          INSERTMODE=NO, if the user enters another character (B),
  838                          then the original character, a backspace, and
  839                          the overstriking character are returned to the reading
  840                          program (A - BS - B).  NO specifies that in this situation
  841                          only the overstriking character is sent (B).  Note
  842                          that no backspaces may be involved in the
  843                          above operation, ESC-CR (e.g.) might be used.
  844
  845                          The default causes this parameter to be ignored.
  846                          */
  847            %FIL2
  848            2 %CHARTEXT('DISPINPUT')%L6# BIT(2)UNAL %INIT(DISPINPUT)%EINIT,
  849                          /*K* DISPINPUT = {YES|NO}    YES specifies that the
  850                          system is to display input characters on the
  851                          terminal (ECHOPLEX).  NO specifies that input
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          24   
  852                          display is to be inhibited.
  853
  854                          The default causes this parameter to be ignored.
  855                          */
  856            2 %CHARTEXT('PARITYCHECK')%L6# BIT(2)UNAL %INIT(PARITYCHECK)%EINIT,
  857                          /*K* PARITYCHECK = {YES|NO}    YES specifies that
  858                          characters input from the terminal are to be
  859                          checked for proper parity (see VLP_TRMATTR).  A
  860                          character with bad parity is echoed as a pound
  861                          sign (#) and transmitted to the program as a SUB
  862                          character; a parity error completion type is
  863                          reported on the M$READ.  NO specifies that parity
  864                          is not to be checked.
  865
  866                          The default causes this parameter to be ignored.
  867                          */
  868    *       2 * BIT(2)UNAL %INIT('01'B)%EINIT,
  869            2 %CHARTEXT('OUTPUTDISCARD')%L6# BIT(2)UNAL %INIT(OUTPUTDISCARD)%EINIT,
  870                          /*K* OUTPUTDISCARD = {YES|NO}     YES specifies
  871                          that output is not sent to the terminal.  M$WRITE
  872                          requests appear to work to the user program but no
  873                          characters are sent to the terminal.  An M$READ
  874                          that can be immediately satisfied by typed-ahead
  875                          input is processed normally.  An M$READ that
  876                          cannot be satisfied by typed-ahead input turns off
  877                          output-discard mode.  NO specifies normal
  878                          processing of output.
  879
  880                          The default causes this parameter to be ignored.
  881                          */
  882            %FIL2
  883            2 %CHARTEXT('UPPERCASE')%L6# BIT(2)UNAL %INIT(UPPERCASE)%EINIT,
  884                          /*K* UPPERCASE = {YES|NO}    YES specifies that any
  885                          lowercase alphabetic characters input from the
  886                          terminal are to be sent to the user program as
  887                          uppercase letters.  NO specifies normal processing
  888                          of terminal characters.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          25   
  889
  890                          For 3270, UPPERCASE is turned on
  891                          in all supplied profiles.  IBM
  892                          3270-type devices have no caps
  893                          lock key, only a shift lock.  For
  894                          timesharing, it is convenient to
  895                          have all lowercase characters
  896                          shifted to uppercase.  ESC-U may
  897                          be used to toggle this.
  898
  899                          The default causes this parameter to be ignored.
  900                          */
  901            2 %CHARTEXT('LOWERCASE')%L6# BIT(2)UNAL %INIT(LOWERCASE)%EINIT,
  902                          /*K* LOWERCASE = {YES|NO}    YES specifies that any
  903                          uppercase alphabetic characters input from the
  904                          terminal are to be sent to the user program as
  905                          lowercase letters.  In addition, the following
  906                          five characters are translated:
  907
  908                          .FIF
  909                          Character   Translation
  910                          @           `
  911                          [           {
  912                          \           |
  913                          ]           }
  914                          .TRF ^^
  915                          ^           ~
  916                          .FIN
  917                          .TRF ^
  918
  919                          NO specifies normal processing of terminal input.
  920                          This feature is provided to enable terminals
  921                          that are upper-case only to input lower-case
  922                          characters.
  923
  924                          The default causes this parameter to be ignored.
  925                          */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          26   
  926            2 %CHARTEXT('FULLDUXPAPERTAPE')%L6# BIT(2)UNAL %INIT(FULLDUXPAPERTAPE)%EINIT,
  927                          /*K* FULLDUXPAPERTAPE = {YES|NO}       YES specifies
  928                          that terminal input is handled using the following
  929                          paper tape conventions:
  930
  931                          1.  DC3 (X-OFF) and DC1 (X-ON)
  932                          characters are sent to the terminal so that the
  933                          input does not overflow available buffering space.
  934
  935                          2.  A DEL character on input is ignored.
  936
  937                          3.  A LF character received as the first character
  938                          of an input message is ignored when M$READ is
  939                          using a default input function table (CP5, CP5S1,
  940                          CP5S2).
  941
  942                          NO
  943                          specifies normal processing of terminal input.
  944
  945                          The default causes this parameter to be ignored.
  946                          */
  947            2 %CHARTEXT('HALFDUXPAPERTAPE')%L6# BIT(2)UNAL %INIT(HALFDUXPAPERTAPE)%EINIT,
  948                          /*K* HALFDUXPAPERTAPE = {YES|NO}        YES
  949                          specifies that the FULLDUXPAPERTAPE conventions
  950                          are to be followed and that absolutely no
  951                          characters are to be sent to the terminal for
  952                          either output or echoing.  NO specifies normal
  953                          processing of terminal input.
  954
  955                          The default causes this parameter to be ignored.
  956                          */
  957            %FIL2
  958            2 %CHARTEXT('ACTONTRN')%L6# BIT(2) UNAL %INIT(ACTONTRN)%EINIT,
  959                          /*K* ACTONTRN = {YES|NO} YES specifies that the
  960                          activation (EOM) characters are to apply to transparent
  961                          reads to the terminal.  NO specifies that only activation
  962                          on byte count will be performed.  BREAK functions
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          27   
  963                          normally independently of this option.
  964
  965                          The default causes this parameter to be ignored.
  966
  967                          NOTE:  The default activation character set assumes
  968                          that a normal read, not a transparent read is performed.
  969                          For example, the CR character received as '215'O is
  970                          only recognized as EOM character '015'O, i.e., the value
  971                          of CR after a normal read strips off the parity bit.
  972                          When performing transparent reads, the user may want to
  973                          call M$EOM supplying an activation character set that
  974                          includes EOM characters in both odd and even parity.
  975
  976                          */
  977            2 %CHARTEXT('APLLCNRM')%L6# BIT(2) UNAL %INIT(APLLCNRM)%EINIT,
  978                          /*K* APLLCNRM = {YES|NO} YES specifies that if lower
  979                          case characters are sent to the terminal while it is
  980                          in APL mode, they are simply printed as upper-case.
  981                          NO specifies that they are to be upper-case and
  982                          underscored.
  983
  984                          The default causes this parameter to be ignored.
  985                          */
  986            2 %CHARTEXT('RETYPOVR')%L6# BIT(2) UNAL %INIT(RETYPOVR)%EINIT,
  987                          /*K* RETYPOVR = {YES|NO} YES specifies that retypes
  988                          (ESC-R) are to overprint the line being retyped.  NO
  989                          specifies that they are to be printed on the next line.
  990                          YES should always be specified for 3270 keyboard display
  991                          devices.
  992
  993                          The default causes this parameter to be ignored.
  994                          */
  995            2 %CHARTEXT('EDITOVR')%L6# BIT(2) UNAL %INIT(EDITOVR)%EINIT,
  996                          /*K* EDITOVR = {YES|NO} YES specifies that for CRT
  997                          devices that visual fidelity is to be
  998                          maintained while using input
  999                          editing to insert or delete characters.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          28   
 1000                          Visual fidelity means
 1001                          the image on the screen matches
 1002                          the input record.  NO specifies
 1003                          that upspacing and backslashes
 1004                          will be displayed to indicate
 1005                          character insertions and
 1006                          deletions.  For ASYNC devices, do
 1007                          not specify YES unless all of the
 1008                          following is true:
 1009
 1010                          .FIF
 1011                          BLANKERASES = YES
 1012                          CUU_CHR or CUP_ALG was specified in the profile
 1013                     CUB_CHR or CUP_ALG or DEVICEBS was specified in the profile
 1014                     CUF_CHR or CUP_ALG was specified in the profile
 1015                     CUD_CHR or CUP_ALG  or DEVICELF was specified in the profile
 1016                     .FIN
 1017
 1018                     For hardcopy devices, YES specifies
 1019                     that character-delete input operations
 1020                     (e.g., depressing the DEL
 1021                     key) should overstrike the deleted
 1022                     character with a \ (backslash).
 1023                     NO specifies that the \ should
 1024                     simply be displayed.
 1025
 1026                     */
 1027            %FIL2
 1028            2 %CHARTEXT('SCROLL')%L6# BIT(2) UNAL %INIT(SCROLL)%EINIT,
 1029                          /*K* SCROLL = {YES|NO} YES specifies that the terminal
 1030                          is to be scrolled, that is, treated as though the media
 1031                          is a continuous form.  NO specifies that when a page
 1032                          has been filled, a screen erase is sent and a new page
 1033                          started.  NO should always be specified for IBM 3270
 1034                          type display devices.
 1035
 1036                          The default causes this parameter to be ignored.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          29   
 1037                          */
 1038            2 %CHARTEXT('PAGEHALT')%L6# BIT(2) UNAL %INIT(PAGEHALT)%EINIT,
 1039                          /*K* PAGEHALT = {YES|NO} YES specifies that when the
 1040                          end of a page is reached, output is halted until the
 1041                          user types a carriage return.  NO specifies that
 1042                          output continues in this situation.  YES is often used
 1043                          to prevent a high speed CRT from printing faster than
 1044                          its operator can read.
 1045
 1046                                  For 3270, it is recommended that
 1047                                  this option be used for
 1048                                  timesharing.  It is difficult to
 1049                                  type any input (PA or PF) when
 1050                                  data is being sent to the device;
 1051                                  PAGEHALT provides convenient
 1052                                  breakpoints.  Use of this option
 1053                                  together with PRINTHALT is
 1054                                  especially helpful when using the
 1055                                  pagewrap scrolling technique since
 1056                                  the screen is never cleared and a
 1057                                  new attribute character is never
 1058                                  inserted.
 1059
 1060                          The default causes this parameter to be ignored.
 1061                          */
 1062            2 %CHARTEXT('PRINTHALT')%L6# BIT(2) UNAL %INIT(PRINTHALT)%EINIT,
 1063                          /*K* PRINTHALT = {YES|NO} YES specifies that if the
 1064                          terminal is being halted at the end of each page of
 1065                          output that the message (CR TO GO) is to be printed
 1066                          to prompt the user to continue the output.  NO specifies
 1067                          that no prompt be issued in this situation.
 1068
 1069                          The default causes this parameter to be ignored.
 1070
 1071                          For 3270, it is recommended that
 1072                          this option be used for timesharing.
 1073                          It is difficult to type any input
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          30   
 1074                          (PA or PF) when data is being sent
 1075                          to the device.  PRINTHALT is useful
 1076                          because it is desirable to
 1077                          maintain a protected attribute
 1078                          character on the screen at all times.
 1079                          PRINTHALT effectively pre-empts the
 1080                          last line to provide a place for
 1081                          the attribute character.  Use of
 1082                          this option together with PAGEHALT
 1083                          is especially helpful when using
 1084                          the pagewrap scrolling technique
 1085                          since the screen is never cleared
 1086                          and a new attribute character is
 1087                          never inserted.
 1088                          */
 1089            2 %CHARTEXT('RELPAGE')%L6# BIT(2) UNAL %INIT(RELPAGE)%EINIT,
 1090                          /*K* RELPAGE = {YES|NO} YES specifies that if the
 1091                          terminal is being halted at the end of each page of
 1092                          output, that the page boundary will be relative to
 1093                          the last read which halted the terminal (was not
 1094                          satisfied by type-ahead).  Thus the terminal would halt
 1095                          when the last input line had just scrolled off the
 1096                          top of the screen.  NO specifies that the halts occur
 1097                          every screen size of lines independent of whether
 1098                          they are inputs.
 1099
 1100                          The default causes this parameter to be ignored.
 1101                          */
 1102            %FIL2
 1103            2 %CHARTEXT('SIMPERF')%L6# BIT(2) UNAL %INIT(SIMPERF)%EINIT,
 1104                          /*K* SIMPERF = {YES|NO} YES specifies that underscores
 1105                          will be printed where the perforation would normally
 1106                          appear on the terminal form.  This gives the appearance
 1107                          of perforated forms on terminals with continuous form
 1108                          paper.  NO inhibits this printing.
 1109
 1110                          The default causes this parameter to be ignored.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          31   
 1111                          */
 1112            2 %CHARTEXT('TRUNCATE')%L6# BIT(2) UNAL %INIT(TRUNCATE)%EINIT,
 1113                          /*K* TRUNCATE = {YES|NO} YES specifies that output
 1114                          lines which exceed the platen width will be truncated
 1115                          to fit on one line.  NO specifies that such lines will
 1116                          wrap to the next line.
 1117
 1118                          The default causes this parameter to be ignored.
 1119                          */
 1120            2 %CHARTEXT('NOOPTMIZ')%L6# BIT(2) UNAL %INIT(NOOPTMIZ)%EINIT,
 1121                          /*K* NOOPTMIZ = {YES|NO} YES specifies that carriage
 1122                          positioning optimization is not to be done.  This
 1123                          is useful for writing to mini-computers and paper tape
 1124                          punches.  NO specifies that data is to be written as
 1125                          efficiently as possible.
 1126
 1127                          The default causes this parameter to be ignored.
 1128                          */
 1129            2 %CHARTEXT('WRAPPAGE')%L6# BIT(2)UNAL %INIT(WRAPPAGE)%EINIT,
 1130                          /*K* WRAPPAGE = {YES|NO} YES specifies for CRTs with
 1131                          SCROLL=NO that the screen is to be erased
 1132                          one line at a time, such that the line below the cursor
 1133                          is always blank.  NO specifies that the entire screen
 1134                          is to be erased after using the bottom line.
 1135
 1136                          The default causes this parameter to be ignored.
 1137                          */
 1138            %FIL2
 1139            2 %CHARTEXT('SINPUTSZ')%L6# UBIN(8) UNAL %INIT(SINPUTSZ)%EINIT,
 1140                          /*K* SINPUTSZ = VALUE-DEC(0-254) specifies the minimum
 1141                          length of lines typed which are to be remembered by
 1142                          the system to be re-used (ESC-D). A value of zero
 1143                          specifies that all lines are saved.
 1144
 1145                          The default causes this parameter to be ignored.
 1146                          */
 1147            %FIL2
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          32   
 1148            2 %CHARTEXT('BREAKCOUNT') UBIN(8) UNAL %INIT(BREAKCOUNT)%EINIT,
 1149            2 %CHARTEXT('BREAKCOUNT# REDEF BREAKCOUNT') UBIN(8) UNAL,
 1150                          /*K* BREAKCOUNT = VALUE-DEC(0-3)     specifies the
 1151                          current break count.  A current break count of three
 1152                          causes the next BREAK to be interpreted as control-Y.
 1153                          The specification of any value greater than three for
 1154                          M$STRMCTL is ignored.
 1155
 1156                          The default causes this parameter to be ignored.
 1157                          */
 1158            %FIL2
 1159            2 %CHARTEXT('HSCROLL')%L6# BIT(2)UNAL %INIT(HSCROLL)%EINIT,
 1160                          /*K* HSCROLL = {YES|NO} specifies, if YES and if
 1161                          RETYPOVR and EDITOVR are
 1162                          also true, that input editing is to occupy
 1163                          only one line, even if the input record is longer
 1164                          than the space remaining on the line after the prompt.
 1165                          The HSMARGIN and HSSHIFT parameters may be used to
 1166                          control the display characteristics of this mode.
 1167
 1168                          The default causes this parameter to be ignored.
 1169                          */
 1170            2 %CHARTEXT('INSERTMODE')%L6# BIT(2)UNAL %INIT(INSERTMODE)%EINIT,
 1171                          /*K* INSERTMODE = {YES|NO} specifies, if YES, that when
 1172                          the cursor is positioned over an input character, any
 1173                          new characters entered are inserted to the left of the
 1174                          cursor, and that the DEL character deletes only the
 1175                          character (if any) under the cursor.  NO specifies
 1176                          that the behavior in these situations depends on
 1177                          SENDBKSPACE and the position relative to the insertion
 1178                          window (see Programmer Reference Manual (CE40)).
 1179
 1180                          The default causes this parameter to be ignored.
 1181                          */
 1182            2 %CHARTEXT('MSGHALT')%L6# BIT(2)UNAL %INIT(MSGHALT)%EINIT,
 1183                          /*K* MSGHALT = {YES|NO} specifies, if YES, that
 1184                          output to the terminal is to be halted after an
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          33   
 1185                          operator message until the user enters the customary
 1186                          output continuation character.
 1187
 1188                          The default causes this parameter to be ignored.
 1189                          */
 1190            2 %CHARTEXT('ENBENTEXTSRDCHR')%L6# BIT(2) UNAL %INIT(SIMPERF)%EINIT,
 1191                          /*K* ENBENTEXTSRDCHR = {YES|NO} YES specifies that when
 1192                          entering or exiting the Subordinate Real Device(s)
 1193                          (SRDs) affected by this monitor service,
 1194                          a character string should be sent transparently to the
 1195                          device.   When entering, the character string specified
 1196                     on the last M$WRITE's KEY with KEYTYPE = ENTSRDCHR  is sent.
 1197                     When exiting, the character string specified on the
 1198                     EXTSRD_CHR option in the device's profile is sent.
 1199                This feature is used for preserving the status of graphics devices.
 1200
 1201                The default causes this parameter to be ignored.
 1202                */
 1203            %FIL2
 1204            2 %CHARTEXT('MSGLINE')%L6# BIT(2)UNAL %INIT(MSGLINE)%EINIT,
 1205                          /*K* MSGLINE = {YES|NO} specifies, if YES and the
 1206                          profile indicates that the terminal has such a
 1207                          facility, that the message line of the terminal is to
 1208                          be used to display all operator messages.
 1209
 1210                          The default causes this parameter to be ignored.
 1211                          */
 1212            2 C00FPT BIT(1) UNAL %INIT('1'B)%EINIT,
 1213                          /*B* C00FPT - BIT(1).  Indicates that the parameters
 1214                          that were not * instead of RFUx in B03 are valid.
 1215                          This is required because * was initialized to 0 in
 1216                          B03, which is not the "ignore" value.  C00 fpts will
 1217                          have * inited to -1 (if I remember to fix them all).
 1218                          */
 1219            2 %CHARTEXT('TRNUSRINPFNC')%L6# BIT(2)UNAL %INIT(TRNUSRINPFNC)%EINIT,
 1220                          /*N* TRNUSRINPFNC = {YES|NO} specifies, if YES that
 1221                          user input functions (IMPs) should be processed even
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          34   
 1222                          on transparent reads.  NO indicates user input functions
 1223                          will only be processed on non-transparent reads.
 1224
 1225                          The default causes this parameter to be ignored.
 1226                          */
 1227            2 * UBIN(3) UNAL %INIT(7)%EINIT,
 1228            2 %CHARTEXT('WORDWRAPCLM')%L6# UBIN BYTE UNAL %INIT(WORDWRAPCLM)%EINIT,
 1229                          /*K* WORDWRAPCLM = VALUE-DEC(0-254) specifies the
 1230                          maximum length of lines containing blanks that will
 1231                          be returned to the reading program.  If a longer line
 1232                          is entered, the characters past the space before
 1233                          WORDWRAPCLM will be saved for use in the next read
 1234                          operation.  A value of zero disables this facility.
 1235
 1236                          The default causes this parameter to be ignored.
 1237                          */
 1238            2 %CHARTEXT('AUTOTABCLM')%L6# UBIN BYTE UNAL %INIT(AUTOTABCLM)%EINIT,
 1239                          /*K* AUTOTABCLM = VALUE-DEC(0-254) specifies the
 1240                          initial cursor position to be used when a read with
 1241                          DVBYTE.REREAD=NO (a new record request) occurs.  Any
 1242                          characters saved by the wordwrap facility or in
 1243                          type-ahead will, of course, be displayed beginning at
 1244                          AUTOTABCLM as well.  A value of zero or one specifies
 1245                          that the input data is to begin immediately after the
 1246                          prompt.
 1247
 1248                          The default causes this parameter to be ignored.
 1249                          */
 1250            2 %CHARTEXT('HSMARGIN')%L6# UBIN BYTE UNAL %INIT(HSMARGIN)%EINIT,
 1251                          /*K* HSMARGIN = VALUE-DEC(0-254) specifies, if
 1252                          HSCROLL=YES, the closest the cursor is to be
 1253                          allowed to approach the edge of an input area without
 1254                          shifting a partially displayed record to reveal more
 1255                          of it.  Values less than
 1256                          %SCROLL_PERCENT#~F
 1257                          %G_SCROLL_PERCENT#~H
 1258                          (128) specify the distance in columns.  Higher values
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          35   
 1259                          specify a percentage of the width of the window as
 1260                          %SCROLL_PERCENT#+percent.~F
 1261                          %G_SCROLL_PERCENT#+percent.~H
 1262
 1263                          The default causes this parameter to be ignored.
 1264                          */
 1265            2 %CHARTEXT('HSSHIFT')%L6# UBIN BYTE UNAL %INIT(HSSHIFT)%EINIT,
 1266                          /*K* HSSHIFT = VALUE-DEC(0-254) specifies, if
 1267                          HSCROLL=YES, the number of columns that an input image
 1268                          is to be shifted when the user attempts to move the
 1269                          cursor closer than HSMARGIN to an incompletely
 1270                          displayed end of the record.
 1271                          The keyword CENTER may be specified to request
 1272                          that the character under the cursor be positioned as
 1273                          closely as possible to the center of the displayed
 1274                          portion of the record when a shift occurs.  Otherwise,
 1275                          the value is specified in columns or as a percentage
 1276                          of the width of the input area.  The preprocessor
 1277                          equates %SCROLL_PERCENT# and %SCROLL_CENTER# may~F
 1278                          equates %G_SCROLL_PERCENT# and %G_SCROLL_CENTER# may~H
 1279                          be used to set the value at run-time.
 1280
 1281                          The default causes this parameter to be ignored.
 1282                          */
 1283            %FIL2
 1284            2 %CHARTEXT('PARKCURSOR')%L6# BIT(2) %INIT(PARKCURSOR)%EINIT,
 1285                          /*K* PARKCURSOR = {YES|NO}   YES specifies, for video
 1286                          display terminals, that the cursor is to be moved to
 1287                          the window's home position when activation occurs in
 1288                          forms or screen-editing mode.  NO specifies that the
 1289                          cursor is not moved in those situations.
 1290
 1291                          The default causes this parameter to be ignored.
 1292                          */
 1293            2 %CHARTEXT('CURSORREAD')%L6# BIT(2) %INIT(CURSORREAD)%EINIT,
 1294                          /*K* CURSORREAD = {YES|NO}   YES specifies that the
 1295                          "change sessions" input function (usually <ESC> <.>)
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          36   
 1296                          is to access only sessions for which a read is
 1297                          pending.  If NO is specified, or if there are no
 1298                          reading sessions, all sessions are accessible.
 1299
 1300                          The default causes this parameter to be ignored.
 1301                          */
 1302            2 %CHARTEXT('KEEPTYPAHD')%L6# BIT(2) %INIT(KEEPTYPAHD)%EINIT,
 1303                          /*K* KEEPTYPAHD = {YES|NO}   YES specifies that a
 1304                          session change as a result of the AUTOCURSOR parameter
 1305                          is to move any type-ahead from the old session to the
 1306                          new one for use as input to the new session.  NO
 1307                          specifies that the type-ahead is to remain with the
 1308                          previous session.
 1309
 1310                          The default causes this parameter to be ignored.
 1311                          */
 1312            2 %CHARTEXT('AUTOCURSOR')%L6# BIT(2) %INIT(AUTOCURSOR)%EINIT,
 1313                          /*K* AUTOCURSOR = {YES|NO}   YES specifies that the
 1314                          cursor is to move automatically from a non-reading
 1315                          session when a read starts and is not completed by
 1316                          type-ahead.  The cursor is moved to the newly reading
 1317                          session.  NO specifies that the cursor is to be moved
 1318                          only via the keyboard or M$TRMPRG with CURSORHERE=YES.
 1319
 1320                          The default causes this parameter to be ignored.
 1321                          */
 1322            %FIL2
 1323            2 %CHARTEXT('ADJTOPLFT')%L6# BIT(2) %INIT(ADJTOPLFT)%EINIT,
 1324                          /*K* ADJTOPLFT = {YES|NO}  indicates the default direction
 1325                          for window size change requests.  YES specifies that
 1326                          a window size change request for this window that does
 1327                          not specify the FWINDOW parameter will prefer to move
 1328                          the top or left boundary of the window.  NO specifies
 1329                          that such a request will prefer to move the bottom or
 1330                          right boundary.  The ADJTOPLFT window attribute is
 1331                          initialized for a new window based on the boundary of
 1332                          the new window that was moved to create it.  Windows
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          37   
 1333                          created with POSITION=TOP or POSITION=LEFT will have
 1334                          ADJTOPLFT initially set to NO, and ones created with
 1335                          POSITION=BOTTOM or POSITION=RIGHT will have it set to
 1336                          YES.  (See VLP_WINDOW for additional information).
 1337
 1338                          The default causes this parameter to be ignored.
 1339                          */
 1340            2 * BIT(2) %INIT('11'B)%EINIT,
 1341            2 * BIT(2) %INIT('11'B)%EINIT,
 1342            2 * BIT(2) %INIT('11'B)%EINIT;
 1343      %MEND;
 1344
 1345
 1346                                    /**********************************/
 1347                                    /*     VLP_EDTCL                              */
 1348                                    /*     Available for CP6 only                 */
 1349                                    /**********************************/
 1350
 1351
 1352                          /*F* NAME: VLP_EDTCTL
 1353
 1354                          The VLP_EDTCTL macro defines terminal editing
 1355                          (ORG=SE) information.  Parameters for the VLP are as
 1356                          follows:
 1357                          */
 1358
 1359      %MACRO VLP_EDTCTL (FPTN=VLP_EDTCTL,
 1360              HSALL(YES='1'B,NO='0'B,NA='01'B)='01'B,
 1361              RCRWRAP(YES='1'B,NO='0'B,NA='01'B)='01'B,
 1362              TEXTEDIT(YES='1'B,NO='0'B,NA='01'B)='01'B,
 1363              ONESPACEEDIT(YES='1'B,NO='0'B,NA='01'B)='01'B,
 1364              EASYAPPEND(YES='1'B,NO='0'B,NA='01'B)='01'B,
 1365              %FILCHRS=7,
 1366              VSMARGIN=255,
 1367              VSSHIFT(CENTER=127,ANY)=255,
 1368              KEYINCR=0,
 1369              KEYTYPE(BIN10=4,BINHLF=5,BIN521=6,STRING=7)=255,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          38   
 1370              %ALGN=,
 1371              STCLASS=STATIC);
 1372
 1373      /*!* V Y */
 1374      %LSET LISTDIR='0'B;
 1375      %LSET LISTEXP='1'B;
 1376      %LSET L6=BITBIN(MODE_FEP);
 1377      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 1378      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 1379      %LSET FIL2=CHARTEXT (CONCAT (SUBSTR ('2 * BIT(1)INIT(''0''B)',0,(1-L6)*(10+S#*5)),SUBSTR (',',L6)));
 1380      %LSET ALG=TEXTCHAR(ALGN);
 1381      %IF ALG = '';
 1382       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 1383      %ENDIF;
 1384      %LSET ALG=CHARTEXT(ALG);
 1385      %LSET LAST=CHARTEXT(SUBSTR(',;',BITBIN(FILCHRS=0),1));
 1386      /*!* V N */
 1387      %LSET LISTCOM='0'B;
 1388      %LSET LISTSUB='1'B;
 1389      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 1390      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 1391      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 1392
 1393
 1394      DCL 1 FPTN STCLASS %ALG,
 1395            %FIL2
 1396            2 %CHARTEXT('HSALL')%L6# BIT(2)UNAL %INIT(HSALL)%EINIT,
 1397                          /*K* HSALL = {YES|NO} specifies whether, if HSCROLL
 1398                          is YES (see VLP_TRMCTL), all the records of a screen
 1399                          editing window are to be scrolled simultaneously
 1400                          whenever any horizontal shift occurs.  NO specifies
 1401                          that only the record containing the cursor is shifted
 1402                          by horizontal cursor motion and that a shifted record is
 1403                          realigned with the rest of them when the cursor is
 1404                          away. The repaint function (ESC -) may be used if
 1405                          HSALL=NO to align the other records with the cursor
 1406                          record.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          39   
 1407
 1408                          The default causes this parameter to be ignored.
 1409                          */
 1410            2 %CHARTEXT('RCRWRAP')%L6# BIT(2)UNAL %INIT(RCRWRAP)%EINIT,
 1411                          /*K* RCRWRAP = {YES|NO} specifies whether editing position
 1412                          operations (like backspace, word-skip, character-search)
 1413                          are to cross record boundaries.
 1414
 1415                          The default causes this parameter to be ignored.
 1416                          */
 1417            2 %CHARTEXT('TEXTEDIT')%L6# BIT(2)UNAL %INIT(TEXTEDIT)%EINIT,
 1418                          /*K* TEXTEDIT = {YES|NO} specifies whether joining
 1419                          operations are to insert or delete blanks in order
 1420                          preserve normal text-like appearance (e.g., one
 1421                          blank except after sentence-ending punctuation).
 1422                          See also ONESPACEEDIT.
 1423                          Also, if AUTOTABCLM is set in VLP_TRMCTL, any attempt to
 1424                          move into or create a record at a position to the
 1425                          left of AUTOTABCLM causes the cursor to be
 1426                          positioned at AUTOTABCLM instead.
 1427
 1428                          The default causes this parameter to be ignored.
 1429                          */
 1430            2 %CHARTEXT('EASYAPPEND')%L6# BIT(2)UNAL %INIT(EASYAPPEND)%EINIT,
 1431                          /*K* EASYAPPEND = {YES|NO} specifies, if YES, that
 1432                          records may be appended to the end of a file simply
 1433                          by moving the cursor down past the end-of-file position.
 1434                          Otherwise, a non-empty record must be entered at the
 1435                          end-of-file position first.
 1436
 1437                          The default causes this parameter to be ignored.
 1438                          */
 1439            2 %CHARTEXT('KEYTYPE')%L6# UBIN BYTE CALIGNED %INIT(KEYTYPE)%EINIT,
 1440                          /*K* KEYTYPE = OPTION specifies
 1441                          the key incrementation
 1442                          algorithm to be used to insert new records.  The
 1443                          options are as follows:
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          40   
 1444
 1445                          BIN10 specifies that KEYINCR is to be divided by 10
 1446                          until it fits.  If KEYINCR=1000, then the first of
 1447                          1000, 100, 10, and 1 that fits is used.
 1448
 1449                          BINHLF specifies that KEYINCR is to be halved.  If
 1450                          KEYINCR=32, then the first of 32, 16, 8, 4, 2, and 1
 1451                          that is small enough will be used.
 1452
 1453                          BIN521 specifies that division by 5, 2.5, and 2 is to
 1454                          be repeated.  If KEYINCR=1000, then the sequence 1000,
 1455                          500, 200, 100, 50, 20, 10, 5, 2, and 1 is used.
 1456
 1457                          STRING specifies that key incrementation is not
 1458                          possible.
 1459
 1460                          .xeq
 1461                          The default causes this parameter to be ignored.
 1462                          */
 1463            2 %CHARTEXT('VSMARGIN')%L6# UBIN BYTE CALIGNED %INIT(VSMARGIN)%EINIT,
 1464                          /*K* VSMARGIN = VALUE-DEC(0-254) specifies the closest
 1465                          that the cursor is to be allowed to approach the top
 1466                          or bottom of the window without shifting the image
 1467                          to reveal more of the file.  Values less than
 1468                          %SCROLL_PERCENT#~F
 1469                          %G_SCROLL_PERCENT#~H
 1470                          (128) specify the distance in lines.  Higher values
 1471                          specify a percentage of the height of the window as
 1472                          %SCROLL_PERCENT#+percent.~F
 1473                          %G_SCROLL_PERCENT#+percent.~H
 1474
 1475                          The default causes this parameter to be ignored.
 1476                          */
 1477            2 %CHARTEXT('VSSHIFT')%L6# UBIN BYTE CALIGNED %INIT(VSSHIFT)%EINIT,
 1478                          /*K* VSSHIFT = VALUE-DEC(0-254) specifies the lines
 1479                          to shift the image when the user attempts to move
 1480                          the cursor closer than VSMARGIN to an incompletely
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          41   
 1481                          displayed end of the file.
 1482                          The keyword CENTER may be specified to request
 1483                          that the line under the cursor be positioned as
 1484                          close as possible to the center of the displayed
 1485                          portion of the file when a shift occurs.  Otherwise,
 1486                          the value is specified in lines or as a percentage
 1487                          of the height of the window.  The preprocessor
 1488                          equates %SCROLL_PERCENT# and %SCROLL_CENTER# may~F
 1489                          equates %G_SCROLL_PERCENT# and %G_SCROLL_CENTER# may~H
 1490                          be used to set the value at run-time.
 1491
 1492                          The default causes this parameter to be ignored.
 1493                          */
 1494            2 *(0:1) UBIN BYTE CALIGNED %INIT(0*0)%EINIT, /* Expansion of KEYINCR */
 1495            2 %CHARTEXT('KEYINCR')%L6# UBIN(%(18-2*L6))UNAL %INIT(KEYINCR)%EINIT,
 1496                          /*K* KEYINCR = VALUE-DEC(1-65535) specifies default
 1497                          key increment to be used to insert new records.
 1498                          See KEYTYPE.  The maximum value 65535 requests that
 1499                          key incrementation is to be disabled, requiring that
 1500                          record insertion be performed by the host program.
 1501
 1502                          The default is zero, which causes this parameter to
 1503                          be ignored.
 1504                          */
 1505            %FIL2
 1506            2 %CHARTEXT('ONESPACEEDIT')%L6# BIT(2)UNAL %INIT(ONESPACEEDIT)%EINIT,
 1507                          /*K* ONESPACEEDIT = {YES|NO} specifies whether
 1508                          sentences joined with TEXTEDIT=YES should be separated
 1509                          by one space or two.
 1510
 1511                          The default causes this parameter to be ignored.
 1512                          */
 1513            2 *(0:5) BIT(1) %INIT('1'B*0)%EINIT %LAST
 1514      /*!* V Y */
 1515      %IF FILCHRS>0;
 1516            2 *(0:%(FILCHRS-1)) UBIN BYTE CALIGNED %INIT(255*0)%EINIT;
 1517      %ENDIF;
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          42   
 1518      /*!* V N */
 1519      %MEND;
 1520
 1521
 1522                                    /*******************************************/
 1523                                    /*   M$PROMPT - SET TERMINAL PROMPT           */
 1524                                    /*******************************************/
 1525
 1526
 1527                          /*F* NAME: M$PROMPT and M$GPROMPT - Prompt Control
 1528
 1529                          The M$PROMPT service changes
 1530                          the character string that is used to
 1531                          prompt for input on the terminal.  The default
 1532                          prompt characters are:
 1533                          TU
 1534
 1535                          !    for the command processor domain
 1536                          >    for the debugger domain
 1537                          *    for USER PROGRAMS
 1538                          TF
 1539
 1540                          M$PROMPT changes the prompt for a given stream
 1541                          interfacing with the terminal device.
 1542
 1543                          The form of the call for this service is as
 1544                          follows:
 1545
 1546                          CALL M$PROMPT (FPT_PROMPT) [ALTRET (label)];
 1547
 1548
 1549                          The M$GPROMPT service retrieves
 1550                          the character string that is the current
 1551                          prompt for input on the terminal. The size of
 1552                          the prompt string is returned in the actual record
 1553                          size in the DCB.
 1554                          The form of the call for this service is as
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          43   
 1555                          follows:
 1556
 1557                          CALL M$GPROMPT (FPT_PROMPT) [ALTRET (label)];
 1558
 1559                          Parameters for the M$PROMPT and M$GPROMPT service are as
 1560                          follows:
 1561                          */
 1562
 1563      %MACRO FPT_PROMPT (FPTN=FPT_PROMPT,
 1564              PROMPT=NIL,
 1565              STATION=NIL,
 1566              DCB=M$UC,
 1567              VFC(YES='1'B,NO='0'B)='0'B,
 1568              BIN(YES='1'B,NO='0'B)='0'B,
 1569              TRANS(YES='1'B,NO='0'B)='0'B,
 1570              VECTORS(YES='1'B,NO='0'B)='1'B,
 1571              %ALGN=,
 1572              STCLASS=STATIC);
 1573
 1574      /*!* V Y */
 1575      %LSET LISTDIR='0'B;
 1576      %LSET LISTEXP='1'B;
 1577      %LSET L6=BITBIN(MODE_FEP);
 1578      %LSET ALG=TEXTCHAR(ALGN);
 1579      %IF ALG = '';
 1580       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 1581      %ENDIF;
 1582      %LSET ALG=CHARTEXT(ALG);
 1583      /*!* V N */
 1584      %LSET LISTCOM='0'B;
 1585      %LSET LISTSUB='1'B;
 1586      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 1587      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 1588      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 1589      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 1590      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 1591
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          44   
 1592
 1593      DCL 1 FPTN STCLASS %ALG,
 1594      %IF VECTORS;
 1595            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 1596      %IF L6=0;
 1597            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 1598                          /*K* STATION = VARIABLE    locates an area containing~F
 1599                          the name of the station to which this service is
 1600                          to be applied when used on COMGROUPs.  If the DCB
 1601                          specified is assigned to a comgroup this parameter
 1602                          may be specified;  if not it is ignored.  The
 1603                          VLP_STATION macro is used to generate the
 1604                          station name.
 1605                          The default is NIL.
 1606                                                                                   */
 1607      %ENDIF;
 1608            2 PROMPT_ VECTOR %INIT(VECTOR(PROMPT))%EINIT,
 1609                          /*K* PROMPT = VARIABLE     specifies the character
 1610                          string to be used as the prompt on the terminal.
 1611                          Subsequent M$READs by this user cause the
 1612                          specified prompt to be displayed on the terminal.
 1613                          The maximum prompt length is 94 characters;
 1614                          this does not include VFC.
 1615
 1616                          If PROMPT = NIL, the default prompt is used.
 1617                          The default is NIL.
 1618                          */
 1619      %ENDIF;
 1620            2 V %ALG,
 1621              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 1622                          /*K* DCB = DCBNAME
 1623                          .xeq KI_CP6_C M$GTRMCTL DCB
 1624                          */
 1625              3 * BIT(%(54-L6*46)) UNAL %INIT('0'B)%EINIT,
 1626              3 DVBYTE#,
 1627                4 * BIT(%(2-L6)) UNAL %INIT('0'B)%EINIT,
 1628                4 %CHARTEXT ('VFC')%L6# BIT(1) UNAL %INIT(VFC)%EINIT,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          45   
 1629                          /*K* VFC = {YES|NO}         specifies whether the first
 1630                          character of the prompt string is the VFC. If NO
 1631                          is specified, the VFC default is used.  The VFC
 1632                          default is '@' or extend, which causes the prompt
 1633                          to start in the current character position and the
 1634                          cursor/carriage is positioned to the column
 1635                          immediately following the last character of the
 1636                          prompt.  Refer to the CP-6 Programmer Reference Manual
 1637                          for a complete list of VFC codes.  The default is NO.
 1638                          */
 1639
 1640                4 %CHARTEXT ('BIN')%L6# BIT(1) UNAL %INIT(BIN)%EINIT,
 1641                          /*K* BIN = {YES|NO} is currently unused.
 1642                          */
 1643
 1644                4 %CHARTEXT ('TRANS')%L6# BIT(1) UNAL %INIT(TRANS)%EINIT,
 1645                          /*K* TRANS = {YES|NO}  specifies transparency.  If YES
 1646                          is specified, the prompt string is sent literally
 1647                          to the terminal; that is, no translation or
 1648                          interpretation is done.  If NO is specified, the
 1649                          prompt is processed normally as it is sent to the
 1650                          terminal.  The default is NO.
 1651                          This feature is not currently implemented.
 1652                          */
 1653
 1654                4 * BIT(4) UNAL %INIT('0'B)%EINIT,
 1655              3 * BIT(%(63-L6*55)) UNAL %INIT('0'B)%EINIT;
 1656      %MEND;
 1657
 1658
 1659                               /***********************************************/
 1660                                    /*   M$EOM - SET TERMINAL EOM CHARACTER SET   */
 1661                                    /*           AND TIME-OUT                     */
 1662                               /***********************************************/
 1663
 1664
 1665                          /*F* NAME: M$EOM - Set EOM Characters/Timeout
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          46   
 1666
 1667                          This service is used to specify the
 1668                          activation character set and the read time-out for
 1669                          the terminal.  The activation character set
 1670                          includes all characters to be interpreted as
 1671                          end-of-message characters.  The default activation
 1672                          character set is:
 1673
 1674
 1675                          EOT, LF, FF, CR, SUB, FS, GS, RS, US.
 1676
 1677
 1678                          The form of the call for this service is as follows:
 1679
 1680                          CALL M$EOM (FPT_EOM) [ALTRET (label)];
 1681
 1682                          The parameters for this service are as follows:
 1683                          */
 1684
 1685
 1686      %MACRO FPT_EOM (FPTN=FPT_EOM,
 1687              EOMTABLE=NIL,
 1688              STATION=NIL,
 1689              DCB=M$UC,
 1690              TIMEOUT=0,
 1691              UTYPE(MIL10=0,SEC=1,MIN=2)=1,
 1692              SUPPHALT(YES='1'B,NO='0'B)='0'B,
 1693              VECTORS(YES='1'B,NO='0'B)='1'B,
 1694              %ALGN=,
 1695              STCLASS=STATIC);
 1696
 1697      /*!* V Y */
 1698      %LSET LISTDIR='0'B;
 1699      %LSET LISTEXP='1'B;
 1700      %LSET L6=BITBIN(MODE_FEP);
 1701      %LSET FIL2=CHARTEXT (SUBSTR ('2 * BIT(1),',11*L6));
 1702      %LSET ALG=TEXTCHAR(ALGN);
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          47   
 1703      %IF ALG = '';
 1704       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 1705      %ENDIF;
 1706      %LSET ALG=CHARTEXT(ALG);
 1707      /*!* V N */
 1708      %LSET LISTCOM='0'B;
 1709      %LSET LISTSUB='1'B;
 1710      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 1711      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 1712      %LSET FIL3=CHARTEXT (CONCAT (SUBSTR ('3 * BIT(1)INIT(''0''B)',0,(1-L6)*(10+S#*5)),SUBSTR (',',L6)));
 1713      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 1714      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 1715      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 1716
 1717
 1718      DCL 1 FPTN STCLASS %ALG,
 1719      %IF VECTORS;
 1720            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 1721      %IF L6=0;
 1722            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 1723                          /*K* STATION = VARIABLE    locates an area containing~F
 1724                          the name of the station to which this service is
 1725                          to be applied when used on COMGROUPs.  If the DCB
 1726                          specified is assigned to a comgroup this parameter
 1727                          may be specified;  if not it is ignored.  The
 1728                          VLP_STATION macro is used to generate the
 1729                          station name.
 1730                          The default is NIL.
 1731                                                                                   */
 1732      %ENDIF;
 1733            2 EOMTABLE_ VECTOR %INIT(VECTOR(EOMTABLE))%EINIT,
 1734                          /*K* EOMTABLE = VARIABLE     locates a table.  The
 1735                          structure of the table is generated by the
 1736                          VLP_EOMTABLE macro which is described
 1737                          next in this section.
 1738
 1739                          The activation set is unchanged if the
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          48   
 1740                          parameter is NIL.  The default is NIL.
 1741                          */
 1742      %ENDIF;
 1743            2 V %ALG,
 1744              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 1745                          /*K* DCB = DCBNAME
 1746                          .xeq KI_CP6_C M$GTRMCTL DCB
 1747                          */
 1748              3 * BIT(%(54-L6*46)) UNAL %INIT('0'B)%EINIT,
 1749              %FIL3
 1750              3 %CHARTEXT ('SUPPHALT')%L6# BIT(1) UNAL %INIT(SUPPHALT)%EINIT,
 1751                          /*K* SUPPHALT = {YES|NO} YES specifies that output
 1752                          on the terminal may not be halted by actions of its
 1753                          operator (ESC-H, etc.).  NO allows halting.  The default
 1754                          is NO.
 1755                          */
 1756
 1757              3 * UBIN(5) UNAL %INIT(0)%EINIT,
 1758              3 %CHARTEXT ('UTYPE')%L6# UBIN(2) UNAL %INIT(UTYPE)%EINIT,
 1759                          /*K* UTYPE = OPTION specifies the units of TIMEOUT.
 1760                           Options are:
 1761                           TU
 1762
 1763                          MIL10     10 milliseconds
 1764                          SEC       seconds
 1765                          MIN       minutes
 1766                          TF
 1767
 1768                          The default is SEC.
 1769                                                                              */
 1770              %FIL3
 1771              3 %CHARTEXT ('TIMEOUT')%L6# UBIN(8) UNAL %INIT(TIMEOUT)%EINIT,
 1772                          /*K* TIMEOUT = VALUE-DEC(1-255)     specifies a
 1773                          time-out period to be used on subsequent M$READs
 1774                          to the terminal.  If a M$READ is not completed
 1775                          within this time period, it is terminated with a
 1776                          timed-out completion type.  For delayed-read
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          49   
 1777                          devices, namely comgroup terminal stations,
 1778                          this time-out period will only begin
 1779                          counting once the first character has been
 1780                          sent from the device.  In other words, a
 1781                          "silent" delayed-read device will not time out.
 1782
 1783                          The units for TIMEOUT
 1784                          are specified by the UTYPE parameter.  The default is
 1785                          0 which indicates no time-out.
 1786                          */
 1787
 1788              3 * BIT(%(54-L6*38)) UNAL %INIT('0'B)%EINIT;
 1789      %MEND;
 1790
 1791                          /*F* NAME: VLP_EOMTABLE
 1792
 1793                          VLP_EOMTABLE generates a table that specifies the
 1794                          activation character set for a terminal.
 1795                          .spf 0
 1796                          Note:  A character defined as an activation
 1797                          character must not also be used as a system
 1798                          function table "Special Character".  See
 1799                          VLP_TRMATTR, FCNTBL for lists of the "Special
 1800                          Characters" available.
 1801
 1802                          The contents of VLP_EOMTABLE are specified as
 1803                          follows:
 1804                          */
 1805
 1806      %MACRO VLP_EOMTABLE (FPTN=VLP_EOMTABLE,
 1807              %ALGN=,
 1808              STCLASS=STATIC,
 1809              VALUES(
 1810              STD="8,44,0,47,0*12",
 1811              DELTA="8,108,0,47,0,1,0,4,0*3,22,0*3,20",
 1812              ALFNUM="127,191,175,47,127,255,0,63,128,0,0,31,128,0,0,30",
 1813              NGRAF="127,191,175,47,0*12",ANY)="8,44,0,47,0*12");
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          50   
 1814
 1815      /*!* V Y */
 1816      %LSET LISTDIR='0'B;
 1817      %LSET LISTEXP='1'B;
 1818      %LSET L6=BITBIN(MODE_FEP);
 1819      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 1820      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 1821      %LSET FIL3=CHARTEXT (CONCAT (SUBSTR ('3 * BIT(1)INIT(''0''B*0) ',0,(1-L6)*(10+S#*6)),SUBSTR (',',L6)));
 1822      %LSET ALG=TEXTCHAR(ALGN);
 1823      %IF ALG = '';
 1824       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 1825      %ENDIF;
 1826      %LSET ALG=CHARTEXT(ALG);
 1827      /*!* V N */
 1828      %LSET LISTCOM='0'B;
 1829      %LSET LISTSUB='1'B;
 1830      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 1831      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 1832      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 1833
 1834
 1835      DCL 1 FPTN STCLASS %ALG,
 1836            2 %CHARTEXT('TABLE')%L6#/**/(0:31) UNAL,
 1837              %FIL3
 1838              3 %CHARTEXT ('VALUES')%L6# UBIN(8) UNAL %INIT(VALUES,VALUES)%EINIT;
 1839                          /*K* VALUES = OPTION can be set to any one of the
 1840                          following options:
 1841
 1842                          TU
 1843
 1844                             STD    Specifies the following standard
 1845                                    end-of-message character set:
 1846
 1847                                    EOT LF FF CR SUB FS GS RS US
 1848
 1849                             DELTA  Specifies the following DELTA
 1850                                    end-of-message character set:
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          51   
 1851                          .trf ^^
 1852
 1853                                    EOT LF FF CR SUB FS GS RS US HT
 1854                                    [  ]  ^  {  }  =  /
 1855
 1856                             ALFNUM  Specifies the following
 1857                                    non-alphanumeric end-of-message
 1858                                    character set:
 1859
 1860                                    SOH STX ETX EOT ENQ ACK BEL BS
 1861                                    LF  VT  FF  CR  SO  SI  DLE DC2 DC4
 1862                                    NAK SYN ETB SUB FS  GS  RS  US
 1863                                    ! " # $ % & ' ( ) * + , - . / :
 1864                                    ; < = > ? @ [ \ ] ^ _ ` { | } ~
 1865
 1866                          .trf ^
 1867                             NGRAF  Specifies the following non-ASCII graphic
 1868                                    end-of-character set:
 1869
 1870                                    SOH STX ETX EOT ENQ ACK BEL BS
 1871                                    LF  VT  FF  CR  SO  SI  DLE  DC2 DC4
 1872                                    NAK SYN ETB SUB FS  GS  RS  US
 1873
 1874                             VALUE-DEC(0-255) [,VALUE-DEC(0-255)...]  specifies
 1875                                    up to 16 values for the 32 bytes in the
 1876                                    EOMTABLE, as explained below.
 1877
 1878                          TF
 1879                          The EOMTABLE contains 32 bytes.  The first 16
 1880                          bytes of EOMTABLE represent the ASCII characters
 1881                          with the parity  bit set to zero; the second 16
 1882                          bytes of EOMTABLE represent the ASCII characters
 1883                          with the parity bit set to one.
 1884
 1885                          Each byte in EOMTABLE represents an 8-character
 1886                          column of the ASCII code chart.
 1887                          (Only the low-order 8 bits of each byte in    ~F
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          52   
 1888                          EOMTABLE is used.)                            ~F
 1889                          Each bit set
 1890                on represents an activation character.  The bit whose value is 128
 1891                corresponds to the top character in the column;
 1892                1 corresponds to the last character in the
 1893                column.  Thus the first value in the VALUE
 1894                parameter and the first byte in EOMTABLE represent
 1895                NUL (128) through BEL (1).  The second
 1896                value and second byte of EOMTABLE represent
 1897                characters BS through SI.  The third value and
 1898                third byte of EOMTABLE represent characters DLE
 1899                through ETB, and so forth.  Figure 5-1 shows the
 1900                ASCII code chart with decimal values used to
 1901                calculate the VALUE parameter.
 1902
 1903                The values for the standard activation character
 1904                set provide an example:  VALUE= 8, 44, 0, 47,
 1905                0*12.  The values correspond to the ASCII code set
 1906                as follows:
 1907
 1908
 1909                Decimal  8 or binary 00001000 sets EOT as an
 1910                activation character in column 1.
 1911
 1912                Decimal  44 or binary 00101100 sets LF, FF, and CR
 1913                in column 2.
 1914
 1915                Decimal  47 or binary 00101111 sets SUB, FS, GS,
 1916                RS, and US in column 4.
 1917
 1918                0 indicates that there are no activation
 1919                characters in column 3 and 5 - 16.
 1920
 1921                ..::FG "CP-6 ASCII Codes\48" ~F
 1922                ..::FG "CP-6 ASCII Codes\41" ~H
 1923                }                    EVEN BYTES OF EOMTABLE
 1924           }HIGH-ORDER OCTAL                              LOW-ORDER OCTAL DIGIT ~F
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          53   
 1925           }DIGITS-->| 00 | 02 | 04 | 06 | 10 | 12| 14| 16| |         ~F
 1926           }HEX                                           HEX DIGIT ~H
 1927           }DIGIT--->|  0 |  1 |  2 |  3 |  4 |  5|  6|  7| |         ~H
 1928           }         |____|____|____|____|____|___|___|____ v    ___
 1929           }         |NUL |DLE |SP  | 0  | @  | P | ` | P | 0   |128|
 1930           }         |_______________________________________   |___|
 1931           }         |SOH |DC1 | !  | 1  | A  | Q | a | q | 1   | 64|
 1932           }         |_______________________________________   |___|
 1933           }         |STX |DC2 | =  | 2  | B  | R | b | r | 2   | 32|
 1934           }         |_______________________________________   |___|
 1935           }         |ETX |DC3 | #  | 3  | C  | S | c | s | 3   | 16|
 1936           }         |_______________________________________   |___|
 1937           }         |EOT |DC4 | $  | 4  | D  | T | d | t | 4   |  8|
 1938           }         |_______________________________________   |___|
 1939           }         |ENQ |NAK | %  | 5  | E  | U | e | U | 5   |  4|
 1940           }         |_______________________________________   |___|
 1941           }         |ACK |SYN | &  | 6  | F  | V | f | v | 6   |  2|
 1942           }         |_______________________________________   |___|
 1943           }         |BEL |ETB | '  | 7  | G  | W | g | w | 7   |  1|
 1944           }         |_______________________________________   |___|
 1945           .SPB
 1946           .BRN 30 ~F
 1947           }                    ODD BYTES OF EOMTABLE
 1948           }HIGH-ORDER OCTAL                                LOW-ORDER OCTAL DIGIT ~F
 1949           }DIGITS-->| 01 | 03 | 05 | 07 | 11 | 13| 15| 17 | |          ~F
 1950           }         |_____________________________________| v   ___    ~F
 1951           }         | BS |CAN | (  | 8  | H  | X | h | x  | 0  |128|   ~F
 1952           }         |________________________________________  |___|   ~F
 1953           }         | HT | EM | )  | 9  | I  | Y | i | y  | 1  | 64|   ~F
 1954           }         |________________________________________  |___|   ~F
 1955           }         | LF |SUB | *  | :  | J  | Z | j | z  | 2  | 32|   ~F
 1956           }         |________________________________________  |___|   ~F
 1957           }         | VT |ESC | +  | ;  | K  | [ | k | [  | 3  | 16|   ~F
 1958           }         |________________________________________  |___|   ~F
 1959           }         | FF | FS | ,  | <  | L  | \ | l | |  | 4  |  8|   ~F
 1960           }         |________________________________________  |___|   ~F
 1961           }         | CR | GS | -  | =  | M  | ] | m | }  | 5  |  4|   ~F
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          54   
 1962           }         |________________________________________  |___|   ~F
 1963           }         | SO | RS | .  | >  | N  | ~ | n | -  | 6  |  2|   ~F
 1964           }         |________________________________________  |___|   ~F
 1965           }         | SI | US | /  | ?  | O  | _ | o |DEL | 7  |  1|   ~F
 1966           }         |________________________________________  |___|   ~F
 1967           }          _____________________________________      ___    ~H
 1968           }         | BS |CAN | (  | 8  | H  | X | h | x  | 8  |128|   ~H
 1969           }         |________________________________________  |___|   ~H
 1970           }         | HT | EM | )  | 9  | I  | Y | i | y  | 9  | 64|   ~H
 1971           }         |________________________________________  |___|   ~H
 1972           }         | LF |SUB | *  | :  | J  | Z | j | z  | A  | 32|   ~H
 1973           }         |________________________________________  |___|   ~H
 1974           }         | VT |ESC | +  | ;  | K  | [ | k | [  | B  | 16|   ~H
 1975           }         |________________________________________  |___|   ~H
 1976           }         | FF | FS | ,  | <  | L  | \ | l | |  | C  |  8|   ~H
 1977           }         |________________________________________  |___|   ~H
 1978           }         | CR | GS | -  | =  | M  | ] | m | }  | D  |  4|   ~H
 1979           }         |________________________________________  |___|   ~H
 1980           }         | SO | RS | .  | >  | N  | ~ | n | -  | E  |  2|   ~H
 1981           }         |________________________________________  |___|   ~H
 1982           }         | SI | US | /  | ?  | O  | _ | o |DEL | F  |  1|   ~H
 1983           }         |________________________________________  |___|   ~H
 1984           .trf &^
 1985           }                                                      &
 1986           }   For calculation of VALUE parameter of VLP_EOMTABLE_|
 1987           .trf &&
 1988           ..::FG
 1989           */
 1990      %MEND;
 1991
 1992
 1993                                    /******************************************/
 1994                                    /*   M$TRMPRG    - PURGE TERMINAL QUEUES      */
 1995                                    /******************************************/
 1996
 1997
 1998                          /*F* NAME: M$TRMPRG - Purge Terminal Buffers
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          55   
 1999
 2000                          This service allows the user to release
 2001                          current unprocessed terminal I/O.  Input buffers
 2002                          waiting to be read, output buffers waiting to be
 2003                          sent, and consecutive BREAKs can be purged.
 2004
 2005                          The form of the call is as follows:
 2006
 2007                          CALL M$TRMPRG (FPT_TRMPRG) [ALTRET (label)];
 2008
 2009                          Parameters for the M$TRMPRG service are as
 2010                          follows:
 2011                          */
 2012
 2013      %MACRO FPT_TRMPRG   (FPTN=FPT_TRMPRG,
 2014              STATION=NIL,
 2015              DCB=M$UC,
 2016              RSTBRK(YES='1'B,NO='0'B)='0'B,
 2017              RESETBREAK(YES='1'B,NO='0'B)='0'B,
 2018              ABORTREAD(YES='1'B,NO='0'B)='0'B,
 2019              PURGEINPUT(YES='1'B,NO='0'B)='0'B,
 2020              PURGEOUTPUT(YES='1'B,NO='0'B)='0'B,
 2021              CURSORHERE(YES='1'B,NO='0'B)='0'B,
 2022              VECTORS(YES='1'B,NO='0'B)='1'B,
 2023              %ALGN=,
 2024              STCLASS=STATIC);
 2025
 2026      /*!* V Y */
 2027      %LSET LISTDIR='0'B;
 2028      %LSET LISTEXP='1'B;
 2029      %LSET L6=BITBIN(MODE_FEP);
 2030      %LSET ALG=TEXTCHAR(ALGN);
 2031      %IF ALG = '';
 2032       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 2033      %ENDIF;
 2034      %LSET ALG=CHARTEXT(ALG);
 2035      /*!* V N */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          56   
 2036      %LSET LISTCOM='0'B;
 2037      %LSET LISTSUB='1'B;
 2038      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 2039      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 2040      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 2041      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 2042      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 2043
 2044
 2045      DCL 1 FPTN STCLASS %ALG,
 2046      %IF VECTORS;
 2047            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 2048      %IF L6=0;
 2049            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 2050                          /*K* STATION = VARIABLE    locates an area containing~F
 2051                          the name of the station to which this service is
 2052                          to be applied when used on COMGROUPs.  If the DCB
 2053                          specified is assigned to a comgroup this parameter
 2054                          may be specified;  if not it is ignored.  The
 2055                          VLP_STATION macro is used to generate the
 2056                          station name.
 2057                          The default is NIL.
 2058                                                                                   */
 2059      %ENDIF;
 2060      %ENDIF;
 2061            2 V %ALG,
 2062              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 2063                          /*K* DCB = DCBNAME
 2064                          .xeq KI_CP6_C M$GTRMCTL DCB
 2065                          */
 2066              3 * BIT(%(54-L6*46)) UNAL %INIT('0'B)%EINIT,
 2067              3 CTLFLG,
 2068                4 * BIT(%(4-L6))%INIT('0'B)%EINIT,
 2069                4 %CHARTEXT('CURSORHERE')%L6# BIT(1) %INIT(CURSORHERE)%EINIT,
 2070                          /*K* CURSORHERE = {YES|NO}  specifies whether the
 2071                          cursor is to be moved to the session issuing this
 2072                          M$TRMPRG request.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          57   
 2073
 2074                          The default is NO.
 2075                          */
 2076                4 %CHARTEXT('ABORTREAD')%L6# BIT(1) %INIT(ABORTREAD)%EINIT,
 2077                          /*K* ABORTREAD = {YES|NO}   specifies whether any pending
 2078                          no-wait read is to be terminated with the error code
 2079                          set to E$OPER.  Partially entered input data for such
 2080                          a read is moved into the read buffer.
 2081
 2082                          The default is NO.
 2083                          */
 2084                4 %CHARTEXT ('RSTBRK')%L6# BIT(1) UNAL %INIT(%(RSTBRK|RESETBREAK))%EINIT,
 2085                4 %CHARTEXT ('RESETBREAK') REDEF %CHARTEXT ('RSTBRK')%L6# BIT(1) UNAL,
 2086                          /*K* RESETBREAK = {YES|NO}  specifies whether the
 2087                          current terminal break count is to be reset.
 2088                          RESETBREAK=YES can be used to reset the break count
 2089                          to avoid having a CONTROL Y simulated because of
 2090                          four consecutive breaks.
 2091
 2092                          The default is NO.
 2093                          */
 2094                4 %CHARTEXT ('PURGEINPUT')%L6# BIT(1)UNAL %INIT(PURGEINPUT)%EINIT,
 2095                          /*K* PURGEINPUT = {YES|NO}  specifies whether
 2096                          type-ahead data accumulated in the input buffers
 2097                          is to be purged.
 2098
 2099                          The default is NO.
 2100                          */
 2101                4 %CHARTEXT ('PURGEOUTPUT')%L6# BIT(1) UNAL %INIT(PURGEOUTPUT)%EINIT,
 2102                          /*K* PURGEOUTPUT = {YES|NO}       specifies whether data
 2103                          remaining in the output buffers is to be purged.
 2104
 2105                          The default is NO.
 2106                          */
 2107              3 * BIT(%(63-L6*55))%INIT('0'B)%EINIT;
 2108      %MEND;
 2109
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          58   
 2110
 2111                               /***********************************************/
 2112                               /*  M$GLINEATTR - GET TERMINAL LINE ATTRIBUTES     */
 2113                               /***********************************************/
 2114
 2115
 2116                          /*F* NAME: M$GLINEATTR - Get Line Attributes
 2117
 2118                          The GLINEATTR service provides the
 2119                          user with information concerning the physical
 2120                          connection of the terminal to the system.
 2121
 2122                          The form of the call is as follows:
 2123
 2124                          CALL M$GLINEATTR (FPT_GLINEATTR) [ALTRET (label)];
 2125
 2126                          Parameters for the M$GLINEATTR service are as
 2127                          follows:
 2128                          */
 2129
 2130      %MACRO FPT_GLINEATTR (FPTN=FPT_GLINEATTR,
 2131              LINEATTR=NIL,
 2132              STATION=NIL,
 2133              DCB=M$UC,
 2134              VECTORS(YES='1'B,NO='0'B)='1'B,
 2135              %ALGN=,
 2136              STCLASS=STATIC);
 2137
 2138      /*!* V Y */
 2139      %LSET LISTDIR='0'B;
 2140      %LSET LISTEXP='1'B;
 2141      %LSET L6=BITBIN(MODE_FEP);
 2142      %LSET ALG=TEXTCHAR(ALGN);
 2143      %IF ALG = '';
 2144       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 2145      %ENDIF;
 2146      %LSET ALG=CHARTEXT(ALG);
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          59   
 2147      /*!* V N */
 2148      %LSET LISTCOM='0'B;
 2149      %LSET LISTSUB='1'B;
 2150      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 2151      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 2152      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 2153      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 2154
 2155
 2156      DCL 1 FPTN STCLASS %ALG,
 2157      %IF VECTORS;
 2158            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 2159      %IF L6=0;
 2160            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 2161                          /*K* STATION = VARIABLE    locates an area containing~F
 2162                          the name of the station to which this service is
 2163                          to be applied when used on COMGROUPs.  If the DCB
 2164                          specified is assigned to a comgroup this parameter
 2165                          may be specified;  if not it is ignored.  The
 2166                          VLP_STATION macro is used to generate the
 2167                          station name.
 2168                          The default is NIL.
 2169                                                                                   */
 2170      %ENDIF;
 2171            2 LINEATTR_ VECTOR %INIT(VECTOR(LINEATTR))%EINIT,
 2172                          /*K* LINEATTR = VARIABLE     locates a buffer that
 2173                          contains the physical line information.  The
 2174                          structure of the buffer is generated by the
 2175                          VLP_LINEATTR macro described next in this section.
 2176
 2177                          The default is NIL.
 2178                          */
 2179      %ENDIF;
 2180            2 V %ALG,
 2181              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 2182                          /*K* DCB = DCBNAME
 2183                          .xeq KI_CP6_C M$GTRMCTL DCB
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          60   
 2184                          */
 2185              3 * BIT(%(54-L6*46)) UNAL %INIT('0'B)%EINIT;
 2186      %MEND;
 2187
 2188                          /*F* NAME: VLP_LINEATTR
 2189
 2190                          The VLP_LINEATTR describes the physical connection
 2191                          of the terminal to the system.  The information in
 2192                          this VLP is never set by the user; the user can
 2193                          only look at the information.  Parameters for the
 2194                          VLP are as follows:
 2195                          */
 2196
 2197      %MACRO VLP_LINEATTR (FPTN=VLP_LINEATTR,
 2198              %ALGN=,
 2199              STCLASS=STATIC);
 2200
 2201      /*!* V Y */
 2202      %LSET LISTDIR='0'B;
 2203      %LSET LISTEXP='1'B;
 2204      %LSET L6=BITBIN(MODE_FEP);
 2205      %LSET ALG=TEXTCHAR(ALGN);
 2206      %IF ALG = '';
 2207       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 2208      %ENDIF;
 2209      %LSET ALG=CHARTEXT(ALG);
 2210      /*!* V N */
 2211      %LSET LISTCOM='0'B;
 2212      %LSET LISTSUB='1'B;
 2213      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 2214      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 2215      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 2216      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 2217      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 2218
 2219
 2220      DCL 1 FPTN STCLASS %ALG,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          61   
 2221            2 * BIT(%(5-L6)) UNAL %INIT('0'B)%EINIT,
 2222            2 MICROFPL%L6# BIT(1) UNAL %INIT('0'B)%EINIT,
 2223                          /*K* MICROFPL = {YES|NO}  indicates
 2224                          whether this terminal is a PC that is configured
 2225                          to use microFPL programs.
 2226                          */
 2227            2 MULTIDEVICE%L6# BIT(1) UNAL %INIT('0'B)%EINIT,
 2228                          /*K* MULTIDEVICE = {YES|NO}  indicates whether this
 2229                          terminal is the only device on the line (NO) or is
 2230                          a member of a cluster (for example, IRBT,
 2231                          multi-drop line, foreign network).
 2232                          */
 2233            2 HARDWIRE%L6# BIT(1) UNAL %INIT('0'B)%EINIT,
 2234                          /*K* HARDWIRE = {YES|NO}   indicates whether the terminal
 2235                          is hardwired (YES) or dial-up (NO).
 2236                          */
 2237            2 FOREIGN%L6# BIT(1) UNAL %INIT('0'B)%EINIT,
 2238                          /*K* FOREIGN = {YES|NO}  indicates whether the terminal
 2239                          is connected directly to a CP-6 node (NO) or via
 2240                          another network (YES).  If FOREIGN=YES, the other
 2241                          information in the buffer refers only to the
 2242                          physical connection of the foreign network to
 2243                          the CP-6 system.
 2244                          */
 2245            2 LINESPEED%L6# UBIN BYTE UNAL %INIT(0)%EINIT,
 2246                          /*K* LINESPEED = VALUE-DEC(0-15) indicates
 2247                          the line speed of the terminal.  The values are:
 2248
 2249                          .FIF
 2250                          0 =     50 BITS-PER-SECOND
 2251                          1 =     75
 2252                          2 =    110  (10 CPS)
 2253                          3 =    134
 2254                          4 =    150  (15 CPS)
 2255                          5 =    200
 2256                          6 =    300  (30 CPS)
 2257                          7 =    600
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          62   
 2258                          8 =   1050
 2259                          9 =   1200  (120 CPS)
 2260                          10 =  1800
 2261                          11 =  2000
 2262                          12 =  2400
 2263                          13 =  4800
 2264                          14 =  9600
 2265                          15 = 19200
 2266                          .FIN
 2267
 2268                          Values 0,1,3,8,10 and 11 are not currently supported.
 2269                          */
 2270            2 * (0:5) UBIN BYTE UNAL %INIT(0*0)%EINIT,
 2271            2 PROFILE%L6# CHAR(12) ALIGNED %INIT(' ')%EINIT,
 2272                          /*K* PROFILE = VALUE-CHAR(12) specifies the current
 2273                          terminal profile.  This is a TEXTC string in which the
 2274                          first byte contains the character count.  Profile
 2275                          names are a maximum of eleven characters.
 2276                          */
 2277            2 PROTXTC REDEF PROFILE%L6#,
 2278                          /*K* PROTXTC - the value returned for profile name on
 2279                          M$GLINEATTR is actually in TEXTC format.  PROTXTC
 2280                          redefines PROFILE and includes PROTXTC.CNT and
 2281                          PROTXTC.TXT.                                            */
 2282              3 CNT UBIN BYTE UNAL,
 2283              3 TXT CHAR(11) UNAL,
 2284            2 NODE%L6# CHAR(4) ALIGNED %INIT(' ')%EINIT,
 2285                          /*K* NODE = VALUE-CHAR(4) this is the identifier of the
 2286                          CP-6 node to which the terminal is most directly
 2287                          connected.
 2288                          */
 2289            2 PORT%L6# CHAR(4) ALIGNED %INIT(' ')%EINIT,
 2290                          /*K* PORT = VALUE-CHAR(4) identifies the port (see CP-6
 2291                          System Support Reference Manual) to which the
 2292                          terminal is most directly connected.
 2293                          */
 2294            2 CONTROLLER%L6# CHAR(4) CALIGNED %INIT(' ')%EINIT,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          63   
 2295                          /*K* CONTROLLER = VALUE-CHAR(4) identifies to which of
 2296                          perhaps several controllers on the same port
 2297                          that the terminal is connected.  Only meaningful if
 2298                          MULTIDEVICE=YES, but set to blanks if not.
 2299                          */
 2300            2 DEVICE%L6# CHAR(4) CALIGNED %INIT(' ')%EINIT,
 2301                          /*K* DEVICE = VALUE-CHAR(4) identifies to which of
 2302                          perhaps several device ports on the same controller
 2303                          that the terminal is connected.  Only meaningful if
 2304                          MULTIDEVICE=YES, but set to blanks if not.
 2305                          */
 2306            2 * (0:27) UBIN BYTE UNAL %INIT(0*0)%EINIT;
 2307      %MEND;
 2308
 2309
 2310                                    /*****************************************/
 2311                                    /* M$STRMATTR - SET TERMINAL ATTRIBUTES       */
 2312                                    /* M$GTRMATTR - GET TERMINAL ATTRIBUTES       */
 2313                                    /*****************************************/
 2314
 2315
 2316                          /*F* NAME: M$STRMATTR and M$GTRMATTR - Attributes
 2317
 2318                          The M$STRMATTR service
 2319                          is used to describe physical attributes of the terminal
 2320                          in the rare cases that M$PROFILE is inappropriate for
 2321                          this purpose.  The procedure call is of the form:
 2322
 2323                          CALL M$STRMATTR (FPT_TRMATTR) [ALTRET (label)];
 2324
 2325                          The monitor M$GTRMATTR service
 2326                          is used to obtain certain physical attributes of the
 2327                          terminal.  The procedure call is of the form:
 2328
 2329                          CALL M$GTRMATTR (FPT_TRMATTR) [ALTRET (label)];
 2330
 2331                          The parameters for these services are as follows:       */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          64   
 2332
 2333
 2334      %MACRO FPT_TRMATTR (FPTN=FPT_TRMATTR,
 2335              DCB=M$UC,
 2336              STATION=NIL,
 2337              TRMATTR=NIL,
 2338              VECTORS(YES='1'B,NO='0'B)='1'B,
 2339              %ALGN=,
 2340              STCLASS=STATIC);
 2341
 2342      /*!* V Y */
 2343      %LSET LISTDIR='0'B;
 2344      %LSET LISTEXP='1'B;
 2345      %LSET L6=BITBIN(MODE_FEP);
 2346      %LSET ALG=TEXTCHAR(ALGN);
 2347      %IF ALG = '';
 2348       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 2349      %ENDIF;
 2350      %LSET ALG=CHARTEXT(ALG);
 2351      /*!* V N */
 2352      %LSET LISTCOM='0'B;
 2353      %LSET LISTSUB='1'B;
 2354      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 2355      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 2356      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 2357      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 2358
 2359
 2360      DCL 1 FPTN STCLASS %ALG,
 2361      %IF VECTORS;
 2362            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 2363      %IF L6=0;
 2364            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 2365                          /*K* STATION = VARIABLE    locates an area containing~F
 2366                          the name of the station to which this service is
 2367                          to be applied when used on COMGROUPs.  If the DCB
 2368                          specified is assigned to a comgroup this parameter
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          65   
 2369                          may be specified;  if not it is ignored.  The
 2370                          VLP_STATION macro is used to generate the
 2371                          station name.
 2372                          The default is NIL.
 2373                                                                                   */
 2374      %ENDIF;
 2375            2 TRMATTR_ VECTOR %INIT(VECTOR(TRMATTR))%EINIT,
 2376                          /*K* TRMATTR = VARIABLE     locates a buffer that
 2377                          contains the terminal attributes.  The structure
 2378                          of the buffer is generated by the VLP_TRMATTR
 2379                          macro described in this section.
 2380
 2381                          The default is NIL.
 2382                          */
 2383      %ENDIF;
 2384            2 V %ALG,
 2385              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 2386                          /*K* DCB = DCBNAME
 2387                          .xeq KI_CP6_C M$GTRMCTL DCB
 2388                          */
 2389              3 * BIT(%(54-L6*46)) UNAL %INIT('0'B)%EINIT;
 2390      %MEND;
 2391
 2392                          /*F* NAME: VLP_TRMATTR
 2393
 2394                          The VLP_TRMATTR macro describes the physical attributes
 2395                          of the terminal.  Parameters for the VLP are
 2396                          described below.  If a parameter is not specified
 2397                          the value is not changed.
 2398                          */
 2399
 2400      %MACRO VLP_TRMATTR (FPTN=VLP_TRMATTR,
 2401              WIDTH=255,
 2402              EXTWID(YES='1'B,NO='0'B)='0'B,
 2403              HEIGHT=255,
 2404              PROGDTAB(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2405              OPDTAB(YES='1'B,NO='0'B,NA='01'B)='01'B,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          66   
 2406              DEVSCROLL(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2407              CURSORUP(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2408              DEVICECR(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2409              DEVICELF(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2410              DEVICEBS(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2411              AUTONL(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2412              LIMBOCLM(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2413              LOCALECHO(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2414              CRISNL(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2415              LFISNL(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2416              DEVPOSOPTS(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2417              BLANKERASES(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2418              LOWERCASEPRINTS(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2419              TRUOVRPRT(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2420              APL(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2421              BIN(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2422              PARITY(NONE=0,ODD=1,EVEN=2,ONE=3,ZERO=4)=7,
 2423              INPUT(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2424              OUTPUT(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2425              PRINTTYPE(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2426              TTYTYPE(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2427              SPCBFRPRT(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2428              ATRSCRNPOS(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2429              NO_FLDTRM(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2430              DCHMOVFLD(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2431              FF_FLUSH(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2432              FF_INCCR(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2433              MICROFPL(YES='1'B,NO='0'B,NA='01'B)='01'B,
 2434              DSPHEIGHT=255,
 2435              DVCFLWCTRALG(ENQACK=1,ETXACK=2,DC1DC3=3,NONE=0)=7,
 2436              MAXATRS=255,
 2437              MINREC=255,
 2438              SPEED=255,
 2439              CHARSETNAME=' ',
 2440              FCNTBL=' ',
 2441              %ALGN=,
 2442              STCLASS=STATIC);
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          67   
 2443
 2444      /*!* V Y */
 2445      %LSET LISTDIR='0'B;
 2446      %LSET LISTEXP='1'B;
 2447      %LSET L6=BITBIN(MODE_FEP);
 2448      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 2449      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 2450      %LSET FIL2=CHARTEXT (CONCAT (SUBSTR ('2 * BIT(1)INIT(''0''B)',0,(1-L6)*(10+S#*5)),SUBSTR (',',L6)));
 2451      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 2452      %LSET ALG=TEXTCHAR(ALGN);
 2453      %IF ALG = '';
 2454       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 2455      %ENDIF;
 2456      %LSET ALG=CHARTEXT(ALG);
 2457      /*!* V N */
 2458      %LSET LISTCOM='0'B;
 2459      %LSET LISTSUB='1'B;
 2460      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 2461      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 2462
 2463
 2464      DCL 1 FPTN STCLASS %ALG,
 2465            %FIL2
 2466            2 %CHARTEXT ('PROGDTAB')%L6# BIT(2) UNAL %INIT(PROGDTAB)%EINIT,
 2467                          /*K* PROGDTAB = {YES|NO} YES indicates that the
 2468                          terminal device tabs are programmatic.  NO
 2469                          indicates that the terminal device tabs are
 2470                          manual.
 2471
 2472                          The default causes this parameter to be ignored.
 2473                          */
 2474            2 %CHARTEXT ('OPDTAB')%L6# BIT(2) UNAL %INIT(OPDTAB)%EINIT,
 2475                          /*K* OPDTAB = {YES|NO} YES specifies that the terminal
 2476                          has device tabs which can be set by the operator.
 2477                          NO specifies that they are programmatic (PROGDTAB) or
 2478                          nonexistent.
 2479
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          68   
 2480                          The default causes this parameter to be ignored.
 2481                          */
 2482            2 %CHARTEXT ('DEVSCROLL')%L6# BIT(2) UNAL %INIT(DEVSCROLL)%EINIT,
 2483                          /*K* DEVSCROLL = {YES|NO} YES specifies that the
 2484                          terminal is self-scrolling.  This means it prints on
 2485                          a continuous form or rolls old lines off its screen as
 2486                          new ones are added at the bottom.  NO means that lines
 2487                          are overwritten when the screen is filled or the
 2488                          device is not a CRT.
 2489
 2490                          The default causes this parameter to be ignored.
 2491                          */
 2492            2 %CHARTEXT ('CURSORUP')%L6# BIT(2) UNAL %INIT(CURSORUP)%EINIT,
 2493                          /*K* CURSORUP = {YES|NO} YES specifies that the terminal
 2494                          is capable of moving its cursor upward (in the opposite
 2495                          direction of line feed).  NO specifies this feature is
 2496                          not present.
 2497
 2498                          This parameter is ignored for M$STRMATTR.
 2499                          */
 2500            %FIL2
 2501            2 %CHARTEXT ('DEVICECR')%L6# BIT(2) UNAL %INIT(DEVICECR)%EINIT,
 2502                          /*K* DEVICECR = {YES|NO} YES specifies that a carriage
 2503                          return character sent to the terminal causes exactly
 2504                          a carriage return (moves the cursor to left margin of the
 2505                          same line).  NO means that CR has some other (or no)
 2506                          effect.
 2507
 2508                          The default causes this parameter to be ignored.
 2509                          */
 2510            2 %CHARTEXT ('DEVICELF')%L6# BIT(2) UNAL %INIT(DEVICELF)%EINIT,
 2511                          /*K* DEVICELF = {YES|NO} YES specifies that a line feed
 2512                          character sent to the terminal causes exactly a line
 2513                          feed (moves the cursor down one line without horizontal
 2514                     movement.)  NO means that LF has some other (or no) effect.
 2515
 2516                     The default causes this parameter to be ignored.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          69   
 2517                     */
 2518            2 %CHARTEXT ('DEVICEBS')%L6# BIT(2)UNAL %INIT(DEVICEBS)%EINIT,
 2519                          /*K* DEVICEBS = {YES|NO} YES indicates that a BS
 2520                          character sent to the terminal causes a backspace.
 2521                          NO specifies that a BS character be processed
 2522                          normally, which may or may not cause a backspace.
 2523
 2524                          The default causes this parameter to be ignored.
 2525                          */
 2526            2 %CHARTEXT ('AUTONL')%L6# BIT(2) UNAL %INIT(AUTONL)%EINIT,
 2527                          /*K* AUTONL = {YES|NO} YES specifies that the terminal
 2528                          will itself perform a new line function (CR+LF)
 2529                          immediately after printing in (or spacing through)
 2530                          the right margin column.  NO means that the cursor will
 2531                          move to the right of the right margin column to a
 2532                          column that cannot be printed in.
 2533
 2534                          The default causes this parameter to be ignored.
 2535                          */
 2536            %FIL2
 2537            2 %CHARTEXT ('CRISNL')%L6# BIT(2) UNAL %INIT(CRISNL)%EINIT,
 2538                          /*K* CRISNL = {YES|NO} YES specifies that when a carriage
 2539                          return character is sent to the terminal a new line
 2540                          function (CR+LF) is performed.  NO specifies that CR
 2541                          has some other function (see DEVICECR). If CRISNL=YES is
 2542                          specified, DEVICECR=YES must not be specified.
 2543
 2544                          The default causes this parameter to be ignored.
 2545                          */
 2546            2 %CHARTEXT ('LFISNL')%L6# BIT(2) UNAL %INIT(LFISNL)%EINIT,
 2547                          /*K* LFISNL = {YES|NO} YES specifies that when a line
 2548                          feed character is sent to the terminal a new line
 2549                          function (CR+LF) is performed.  NO specifies that LF
 2550                          has some other function (see DEVICELF). If LFISNL=YES
 2551                          is specified, then DEVICELF=YES must not be specified.
 2552
 2553                          The default causes this parameter to be ignored.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          70   
 2554                          */
 2555            2 %CHARTEXT ('BLANKERASES')%L6# BIT(2)UNAL %INIT(BLANKERASES)%EINIT,
 2556                          /*K* BLANKERASES = {YES|NO}
 2557                          YES means that a blank (Space) character displayed
 2558                          on the terminal in a position occupied by another
 2559                          character erases the previous character.
 2560                          NO means that the previous character is unchanged.
 2561
 2562                          The default causes this parameter to be ignored.
 2563                          */
 2564            2 %CHARTEXT ('DEVPOSOPTS')%L6# BIT(2) UNAL %INIT(DEVPOSOPTS)%EINIT,
 2565                          /*K* DEVPOSOPTS = {YES|NO} indicates whether the
 2566                          terminal combines contiguous horizontal positioning
 2567                          requests into a single internal operation (device
 2568                          positioning optimization).  YES implies that if a
 2569                          tab to column 10 followed by a backspace were sent to
 2570                          the terminal, the carriage would go directly to
 2571                          column 9.
 2572
 2573                          The default causes this parameter to be ignored.
 2574                          */
 2575            %FIL2
 2576            2 %CHARTEXT ('TRUOVRPRT')%L6# BIT(2) UNAL %INIT(TRUOVRPRT)%EINIT,
 2577                          /*K* TRUOVRPRT = {YES|NO}  YES specifies that the
 2578                          terminal performs overprinting.  NO specifies that
 2579                          the terminal is not capable of overprinting (that
 2580                          is, upspace cannot be inhibited or multiple
 2581                          characters cannot be displayed in one position).
 2582                          NO specifies that the terminal is not capable of
 2583                          over printing.
 2584
 2585                          The default causes this parameter to be ignored.
 2586                          Not currently implemented.
 2587                          */
 2588            2 %CHARTEXT ('APL')%L6# BIT(2) UNAL %INIT(APL)%EINIT,
 2589                          /*K* APL = {YES|NO}  YES indicates that the APL character
 2590                          set is present, or is being simulated, on the
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          71   
 2591                          terminal.  When YES is specified, input and output
 2592                          characters are processed as the APL character set.
 2593                          NO specifies that normal translation is used.
 2594
 2595                          This parameter is ignored for M$STRMATTR.
 2596                          */
 2597            2 %CHARTEXT ('BIN')%L6# BIT(2) UNAL %INIT(BIN)%EINIT,
 2598                          /*K* BIN = {YES|NO} indicates whether binary output
 2599                          to this device is legal.  This option does not apply
 2600                          to timesharing terminals.
 2601
 2602                          The default causes this parameter to be ignored.
 2603                          */
 2604            2 %CHARTEXT ('LOWERCASEPRINTS')%L6# BIT(2)UNAL %INIT(LOWERCASEPRINTS)%EINIT,
 2605                          /*K* LOWERCASEPRINTS = {YES|NO}   YES indicates that the
 2606                          terminal is capable of printing (displaying)
 2607                          lower-case letters.  NO indicates that the
 2608                          terminal is not capable of printing lower-case
 2609                          letters.
 2610
 2611                          The default causes this parameter to be ignored.
 2612                          */
 2613            %FIL2
 2614            2 %CHARTEXT ('LIMBOCLM')%L6# BIT(2) UNAL %INIT(LIMBOCLM)%EINIT,
 2615                          /*K* LIMBOCLM = {YES|NO} YES indicates that a
 2616                          backspace operation, immediately after displaying a
 2617                          character in the rightmost column of the terminal, has
 2618                          the same effect as for any other column.
 2619                          NO specifies that the cursor remains in the rightmost
 2620                          column after a character is displayed there. Applicable
 2621                          only if AUTONL=NO.
 2622
 2623                          The default causes this parameter to be ignored.
 2624                          */
 2625            2 %CHARTEXT ('LOCALECHO')%L6# BIT(2) UNAL %INIT(LOCALECHO)%EINIT,
 2626                          /*K* LOCALECHO = {YES|NO} YES indicates that any
 2627                          characters received from the terminal have
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          72   
 2628                          already been displayed on the terminal.  This option
 2629                          is especially useful for very slow connections where
 2630                          the normal CP-6 echo mechanism becomes distracting.
 2631                          NO specifies normal processing.
 2632
 2633                          The default causes this parameter to be ignored.
 2634                          */
 2635            2 %CHARTEXT ('EXTWID')%L6# BIT(1) UNAL %INIT(EXTWID)%EINIT,
 2636                          /*K* EXTWID = {YES|NO}  YES indicates that WIDTH is the
 2637                          number of columns by which the terminal width
 2638                          exceeds 254.  NO indicates that WIDTH specifies
 2639                          the number of columns in the terminal line.
 2640
 2641                          The default is NO.
 2642                          */
 2643            2 %CHARTEXT ('PARITY')%L6# UBIN(3)UNAL %INIT(PARITY)%EINIT,
 2644                          /*K* PARITY = OPTION specifies the type of
 2645                          character parity at the terminal.  Possible
 2646                          options are:
 2647
 2648                          .FIF
 2649                          }Option  Parity
 2650                          }------  ------
 2651                          }NONE    On input the parity bit is ignored.
 2652                          }        On output the parity bit of
 2653                          }        translated characters is zero and
 2654                          }        the parity bit of transparent
 2655                          }        characters is unchanged.
 2656
 2657                          }ZERO    Parity is 0.
 2658
 2659                          }ODD     Parity is odd.
 2660
 2661                          }EVEN    Parity is even.
 2662
 2663                          }ONE     Parity bit is 1.
 2664
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          73   
 2665                          }DC      Do not change parity.
 2666                          TF
 2667
 2668                          The default causes this parameter to be ignored.
 2669                                                                             */
 2670            %FIL2
 2671            2 %CHARTEXT ('INPUT')%L6# BIT(2) UNAL %INIT(INPUT)%EINIT,
 2672                          /*K* INPUT = {YES|NO} YES specifies that the terminal
 2673                          is capable of receiving input.
 2674
 2675                          The default causes this parameter to be ignored.
 2676                          */
 2677
 2678            2 %CHARTEXT ('OUTPUT')%L6# BIT(2) UNAL %INIT(OUTPUT)%EINIT,
 2679                          /*K* OUTPUT = {YES|NO} specifies whether the terminal
 2680                          is capable of receiving output.
 2681
 2682                          The default causes this parameter to be ignored.
 2683                          */
 2684            2 %CHARTEXT ('PRINTTYPE')%L6# BIT(2) UNAL %INIT(PRINTTYPE)%EINIT,
 2685                          /*K* PRINTTYPE = {YES|NO} YES specifies that the
 2686                          terminal prints on a form or screen such that vertical
 2687                          positioning is sensible.  NO specifies that the
 2688                          terminal produces records only (like a card punch) and
 2689                          vertical positioning is meaningless.
 2690
 2691                          The default causes this parameter to be ignored.
 2692                          */
 2693            2 %CHARTEXT ('TTYTYPE')%L6# BIT(2) UNAL %INIT(TTYTYPE)%EINIT,
 2694                          /*K* TTYTYPE = {YES|NO} YES specifies that the terminal
 2695                          is capable of displaying what it sends.  YES is typically
 2696                          specified for a device such as a keyboard
 2697                          printer or CRT.  NO specifies that input is not displayed.
 2698
 2699                          The default causes this parameter to be ignored.
 2700                          */
 2701            %FIL2
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          74   
 2702            2 %CHARTEXT ('SPCBFRPRT')%L6# BIT(2) UNAL %INIT(SPCBFRPRT)%EINIT,
 2703                          /*K* SPCBFRPRT = {YES|NO} if SPCBFRPRT=NO then any
 2704                          VFC will be translated such that all paper motion
 2705                          will follow print (e.g., space 4 and print VFCs will
 2706                          be translated into write a blank line and space 4
 2707                          followed by write the read data and don't space).
 2708                          If SPCBFRPRT=YES, no special VFC translation is done.
 2709
 2710                          The default causes this parameter to be ignored.
 2711                          */
 2712            2 %CHARTEXT('ATRSCRNPOS')%L6# BIT(2) UNAL %INIT(ATRSCRNPOS)%EINIT,
 2713                          /*K* ATRSCRNPOS = {YES|NO}  specifies whether a field
 2714                          attribute definition occupies a printable column on
 2715                          the terminal, such that a character cannot also be
 2716                          displayed there.
 2717
 2718                          The default causes this parameter to be ignored.
 2719                          */
 2720            2 %CHARTEXT('NO_FLDTRM')%L6# BIT(2) UNAL %INIT(NO_FLDTRM)%EINIT,
 2721                          /*K* NO_FLDTRM = {YES|NO}  specifies whether an
 2722                          otherwise unterminated field definition extends to
 2723                          the end of the device.  NO specifies that such a
 2724                          field extends only to the end of the line.
 2725
 2726                          The default causes this parameter to be ignored.
 2727                          */
 2728            2 %CHARTEXT('DCHMOVFLD')%L6# BIT(2) %INIT('01'B)%EINIT,
 2729                          /*K* DCHMOVFLD = {YES|NO}  YES specifies that the
 2730                          local character-editing functions (insert- and delete-
 2731                          character) cause fields to the right of their
 2732                          invocation to slide along with the data contained in
 2733                          them.  No specifies that such fields remain stationary
 2734                          on the screen.  YES causes the use of such functions
 2735                          to be disabled if a field begins or ends to the right
 2736                          of the editing position.
 2737
 2738                          The default causes this parameter to be ignored.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          75   
 2739                          */
 2740            %FIL2
 2741            2 %CHARTEXT ('WIDTH')%L6# UBIN(8)UNAL %INIT(WIDTH)%EINIT,
 2742                          /*K* WIDTH = VALUE-DEC(0-254)     specifies the number
 2743                          of printable columns on the terminal.  This number
 2744                          can be increased by specifying the EXTWID
 2745                          parameter.  (If the WIDTH parameter specified by
 2746                          VLP_PLATEN is greater than the VLP_TRMATTR WIDTH,
 2747                          the line is continued on an additional line on the
 2748                          terminal.)
 2749
 2750                          The default is 255, which means that width is not altered.
 2751                          */
 2752            %FIL2
 2753            2 %CHARTEXT ('HEIGHT')%L6# UBIN(8)UNAL %INIT(HEIGHT)%EINIT,
 2754                          /*K* HEIGHT = VALUE-DEC(0-254) indicates the number of
 2755                          addressable lines on the screen of a screen-type
 2756                          terminal.  See also DSPHEIGHT.
 2757                          HEIGHT=0(zero) for non-screen-type terminals.
 2758
 2759                     The default is 255, which means that the height is not altered.
 2760                     */
 2761            %FIL2
 2762            2 %CHARTEXT ('MINREC')%L6# UBIN(8) UNAL %INIT(MINREC)%EINIT,
 2763                          /*K* MINREC = VALUE-DEC(0-254) specifies the minimum
 2764                          length of a record to be sent to the terminal.  This
 2765                          option does not apply to timesharing terminals.  If a
 2766                          record of less than MINREC is output, it is padded
 2767                          with spaces or zeros (depending on BIN in the M$WRITE)
 2768                          out to MINREC.  Zero specifies that there is no minimum.
 2769
 2770                     The default is 255, which means that MINREC is not altered.
 2771                     */
 2772            %FIL2
 2773            2 %CHARTEXT ('SPEED')%L6# UBIN(8) UNAL %INIT(SPEED)%EINIT,
 2774                          /*K* SPEED = VALUE-DEC(0-15)  specifies
 2775                          .xeq KI_CP6_C VLP_LINEATTR LINESPEED
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          76   
 2776                          The default, which is a value of 255, requests that the
 2777                          current speed not be changed.
 2778                          .spf 0
 2779                          WARNING:  CHANGING THE SPEED OF YOUR TERMINAL TO ONE IT
 2780                          DOES NOT SUPPORT MAY PREVENT YOU FROM RETURNING IT
 2781                          TO A USABLE SPEED.
 2782                          */
 2783            %FIL2
 2784            2 %CHARTEXT('FF_FLUSH')%L6# BIT(2) %INIT(FF_FLUSH)%EINIT,
 2785                          /*K* FF_FLUSH = {YES|NO}  YES specifies that the device
 2786                          (usually a plotter) needs to have a form-feed operation
 2787                          performed to complete the display of any data still
 2788                          buffered in the device.  NO specifies that a new-line
 2789                          operation is sufficient.
 2790
 2791                          The default causes this parameter to be ignored.
 2792                          */
 2793            2 %CHARTEXT('MICROFPL')%L6# BIT(2) %INIT(MICROFPL)%EINIT,
 2794                          /*K* MICROFPL = {YES|NO}  specifies
 2795                          .xeq KI_CP6_C VLP_LINEATTR MICROFPL
 2796
 2797                          The default causes this parameter to be ignored.
 2798                          */
 2799            2 C00FPT BIT(1) UNAL %INIT('1'B)%EINIT,
 2800            2 %CHARTEXT('DVCFLWCTRALG')%L6# UBIN(3) UNAL %INIT(DVCFLWCTRALG)%EINIT,
 2801                          /*K* DVCFLWCTRALG = OPTION  specifies the flow control
 2802                          algorithm used by a buffered device to prevent
 2803                          overfilling its buffer.
 2804
 2805                          NONE specifies that no algorithm is used.
 2806
 2807                          ENQACK or ETXACK specifies that CP-6 is to send an
 2808                          ENQ or ETX and wait for the device to respond with
 2809                          ACK whenever enough characters have been sent to fill
 2810                          the buffer.  The size of the buffer is specified in
 2811                          the profile for the device.
 2812
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          77   
 2813                          DC1DC3 specifies that the device sends DC3 to halt
 2814                          the flow of characters, and DC1 to resume it.  This
 2815                          algorithm is also commonly known as XON/XOFF.
 2816
 2817                          The default causes this parameter to be ignored.
 2818                          */
 2819            2 %CHARTEXT ('CHARSETNAME')%L6# CHAR(8) %INIT(CHARSETNAME)%EINIT,
 2820                          /*K* CHARSETNAME = VALUE-CHAR(8) specifies the name of
 2821                          the terminal character set; that is, how the
 2822                          characters sent to and received from the terminal
 2823                          are translated into ASCII.  Current defined values are:
 2824
 2825                                  APLBF^^^^APL bit-paired
 2826                                  translation.  Lowercase
 2827                                  ASCII characters are
 2828                                  printed as underscored
 2829                                  uppercase characters.
 2830                                  .spf 0
 2831                                  Device: ASYNC
 2832
 2833                                  APLBP^^^^APL bit-paired
 2834                                  translation.  Lowercase
 2835                                  ASCII characters are
 2836                                  printed as uppercase
 2837                                  characters on output.
 2838                                  .spf 0
 2839                                  Device: ASYNC
 2840
 2841                                  APLTF^^^^APL typewriter-paired
 2842                                  translation.  Lowercase
 2843                                  ASCII characters are
 2844                                  printed as underscored
 2845                                  uppercase characters on
 2846                                  output.
 2847                                  .spf 0
 2848                                  Device: ASYNC
 2849
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          78   
 2850                                  APLTP^^^^APL typewriter-paired
 2851                                  translation.  Lowercase
 2852                                  ASCII characters are
 2853                                  printed as uppercase
 2854                                  characters on output.
 2855                                  .spf 0
 2856                                  Device: ASYNC
 2857
 2858                                  ASC8I^^^^8-bit ASCII input.
 2859                                  Like ASCII-95, but passes
 2860                                  8-bit characters (X'00'
 2861                                  through X'FF') through
 2862                                  on input rather than
 2863                                  stripping the parity bit.
 2864                                  .spf 0
 2865                                  Device: ASYNC
 2866
 2867                                  ASC8^^^^8-bit ASCII.  Like
 2868                                  ASC8I, but passes 8-bit
 2869                                  output characters (X'80'
 2870                                  through X'FF') through
 2871                                  unchanged rather than as
 2872                                  "#".
 2873                                  .spf 0
 2874                                  Device: ASYNC
 2875
 2876                                  ASC64^^^^ASCII-64 translation
 2877                                  (the default for ASYNC devices).
 2878                                  .spf 0
 2879                                  Device: ASYNC URP
 2880
 2881                                  ASC64B^^^^ASCII-64 variant
 2882                                  translation for
 2883                                  Teletype Model 35.  This
 2884                                  table interprets Altmode
 2885                                  (X'7E', tilde) as escape
 2886                                  on input.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          79   
 2887                                  .spf 0
 2888                                  Device: ASYNC
 2889
 2890                                  ASC64C^^^^ASCII-64 variant
 2891                                  translation for
 2892                                  Teletype Model 33,
 2893                                  Xerox 7015, Hazeltine
 2894                                  2000, etc.  This table
 2895                                  exchanges NOT (tilde)
 2896                                  and OR (vertical line)
 2897                                  in CP-6 system with right
 2898                                  bracket and left bracket
 2899                                  at the terminal.  It also
 2900                                  interprets Altmode
 2901                                  (X'7E', tilde) as escape
 2902                                  on input.
 2903                                  .spf 0
 2904                                  Device: ASYNC
 2905
 2906                                  ASC95^^^^ASCII-95 translation (the default
 2907                                  for RBTD and URP).
 2908                                  .spf 0
 2909                                  Device: ASYNC RBTD URP
 2910
 2911                                  ASC95M^^^^ASCII-95 variant
 2912                                  translation for CDI1203
 2913                                  Miniterms operating in
 2914                                  STD mode.  Converts the
 2915                                  character generated by
 2916                                  the ESC key (without
 2917                                  CTRL) to an ESC.
 2918                                  .spf 0
 2919                                  Device: ASYNC
 2920
 2921                                  BIT^^^^EBC variant translation for BITNET.
 2922                                  The differences are:
 2923                             .fif
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          80   
 2924                             }    EBCDIC               ASCII
 2925                             }    Hex AD          <--> left-bracket
 2926                             }    Hex BD          <--> right-bracket
 2927                             }    solid-bar       <--> broken-bar
 2928                             }    broken-bar       --> broken-bar
 2929                             }    Hex FA           --> broken-bar
 2930                             }    Hex BF           --> hyphen
 2931                             }    Hex 8B           --> left-brace
 2932                             }    Hex 9B           --> right-brace
 2933                             }    Hex 8F           --> semi-colon
 2934                             .fin
 2935                                  .spf
 2936                                  Device:  RBTD
 2937
 2938                                  EBC[{I}|{O}]^^^^EBCDIC to CP-6 ASCII
 2939                                  and ASCII to EBCDIC input/output
 2940                                  translation.  See Host Monitor Services
 2941                                  Reference, Vol. II (CE75),
 2942                                  Table E-2.
 2943                                  .spf 0
 2944                                  Device:  RBTD
 2945
 2946                                  EBCE^^^^EBC variant for RBTD European
 2947                                  sites.  The differences are:
 2948                             .fif
 2949                             }    EBCDIC               ASCII
 2950                             }    cent-sign       <--> dollar sign
 2951                             }    solid-bar       <--> pound sign
 2952                             }    backslash       <--> ampersand
 2953                             }    ampersand       <--> backslash
 2954                             }    pound-sign      <--> left-bracket
 2955                             }    dollar-sign     <--> exclamation point
 2956                             }    exclamation pt. <--> left-bracket
 2957                             .fin
 2958                                  .spf
 2959                                  Device:  RBTD
 2960
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          81   
 2961                                  HIS[{I}|{O}]^^^^Bull
 2962                                  (e.g., GCOS MOD400) EBCDIC to CP-6
 2963                                  ASCII and ASCII to EBCDIC input/output
 2964                                  translation.
 2965                                  .spf 0
 2966                                  Device:  RBTD
 2967
 2968                                  NONE^^^^No translation to or from
 2969                                  CP-6 ASCII will be performed.
 2970                                  .spf 0
 2971                                  Device:  RBTD
 2972
 2973                                  SDS7012^^^^CP-6 ASCII operator console
 2974                                  output is translated to an uppercase
 2975                                  EBCDIC subset; this should be specified
 2976                                  for Xerox model 7012 operator consoles.
 2977                                  .spf 0
 2978                                  Device:  RBTD
 2979
 2980                                  XDS[{I}|{O}]^^^^Xerox-extended EBCDIC to
 2981                                  CP-6 ASCII and ASCII to EBCDIC input/output
 2982                                  translation.
 2983                                  .spf 0
 2984                                  Device:  RBTD
 2985
 2986                                  3276STD^^^^Standard EBCDIC-ASCII
 2987                                  translation with all
 2988                                  characters that can be
 2989                                  displayed by the 3276 type
 2990                                  devices.  The following
 2991                                  translation is used for
 2992                                  those characters not in
 2993                                  both sets:
 2994
 2995                                  }   EBCDIC                ASCII
 2996                                  }   not-sign         <--> vertical-arrow
 2997                                  }   cent-sign        <--> left-bracket
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          82   
 2998                                  }   solid-vert-line  <--> right-bracket
 2999                                  }   field-mark       <--> escape
 3000                                  .spf 0
 3001                                  Device: 3270
 3002
 3003                                  3276LIM^^^^Same as 3276STD
 3004                                  except useful for
 3005                                  data-entry keyboards that
 3006                                  do not have all keys, or
 3007                                  for others that prefer a
 3008                                  more obvious EBCDIC-ASCII
 3009                                  translation at the expense
 3010                                  of not being able to enter
 3011                                  or display square brackets:
 3012
 3013                                  }   EBCDIC                ASCII
 3014                                  }   not-sign         <--> tilde
 3015                                  }   solid-vert-line  <--> broken-vert-line
 3016                                  }   cent-sign        <--> vert arrow
 3017                                  }   left-paren       <--  left-bracket
 3018                                  }   right-paren      <--  right-bracket
 3019                                  }   broken-vert-line  --> broken-vert-line
 3020
 3021                                  Note:  Not all translations
 3022                                  hold for both input and
 3023                                  output.  The arrows
 3024                                  indicate the direction of
 3025                                  translation.
 3026                                  .spf 0
 3027                                  Device: 3270
 3028
 3029                                  3270^^^^For pre-IBM 3276 type
 3030                                  device (limited character
 3031                                  set).  Same as 3276LIM
 3032                                  with the following
 3033                                  differences:
 3034
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          83   
 3035                                  }   EBCDIC                ASCII
 3036                                  }   right-paren      <--  right-brace
 3037                                  }   left-paren       <--  left-brace
 3038                                  }   pound-sign       <--  accent-grave
 3039                                  }   pound-sign       <--  backslash
 3040                                  .spf
 3041                                  Device: 3270 (The default for 3270 devices.)
 3042
 3043                                  3270EUR^^^^Same as 3276STD except for
 3044                                  the following differences needed by
 3045                                  European sites:
 3046                             .fif
 3047                             }    EBCDIC               ASCII
 3048                             }    cent-sign       <--> dollar sign
 3049                             }    solid-bar       <--> pound sign
 3050                             }    backslash       <--> ampersand
 3051                             }    ampersand       <--> backslash
 3052                             }    pound-sign      <--> left-bracket
 3053                             }    dollar-sign     <--> exclamation point
 3054                             }    exclamation pt. <--> left-bracket
 3055                             .fin
 3056                             .spf
 3057                             Device:  3270
 3058
 3059
 3060                          The default is blank.
 3061                          */
 3062            2 %CHARTEXT ('FCNTBL')%L6# CHAR(8) %INIT(FCNTBL)%EINIT,
 3063                     /*K* FCNTBL = {'CP5'|'CP5S1'|'CP5S2'|'FRM1'|'NO'|'SE1'|'SE2'}
 3064                     is the name of a
 3065                     table which tells the terminal handler how to interpret
 3066                control functions.  If a name unknown to the system is specified,
 3067                the current table is not changed. CP5 identifies the full input
 3068                function table and is the default.  CP5S1 and CP5S2 identify
 3069                subset tables.  FRM1 identifies forms functions.  NO is a table
 3070                containing only necessary line-control functions (e.g., disconnect).
 3071                SE1 identifies Read-Write screen editing functions; SE2
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          84   
 3072                identifies Read-Only screen editing functions.
 3073
 3074                .FIF
 3075                .trf &^
 3076                Table    Escape        Special       Control        Numeric
 3077                Name     Characters    Characters    Strings        Escapes
 3078                .SPF 1
 3079                NO       None          None          DISCONNECT     None
 3080
 3081                .brn 15
 3082                Table    Escape        Special       Control        Numeric
 3083                Name     Characters    Characters    Strings        Escapes
 3084                .SPF 1
 3085                CP5      SOH    $      BS     DC2    BREAK          HT   M
 3086                }        STX    *      HT     DC3    DISCONNECT     C    R-T
 3087                }        EOT    '      LF     NAK    OVERRUN        D    .
 3088                }        HT     (      FF     ETB    PARITY CHECK   H    & (caret)
 3089                }        LF     )      CR     CAN                   I
 3090                }        VT     -      DEL    EM
 3091                }        CR     .      DC1
 3092                }        DEL    :
 3093                }        DC2    <
 3094                }        DC4    >
 3095                }        ETB    A-Y
 3096                }        ESC    & (caret)
 3097
 3098                .brn 16
 3099                Table    Escape        Special       Control        Numeric
 3100                Name     Characters    Characters    Strings        Escapes
 3101                .SPF 1
 3102                CP5S1    SOH    $      BS     DEL    BREAK          HT    M
 3103                }        STX    *      HT     DC2    DISCONNECT     C     R-T
 3104                }        EOT    '      LF     ETB    OVERRUN        D     .
 3105                }        HT     -      FF     CAN    PARITY CHECK   H     & (caret)
 3106                }        LF     .      CR     EM                    I
 3107                }        VT     :
 3108                }        CR     <
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          85   
 3109                }        DEL    >
 3110                }        DC2    A-B
 3111                }        DC4    D-O
 3112                }        ETB    Q-R
 3113                }        ESC    U-Y
 3114                }               & (caret)
 3115
 3116                .brn 16
 3117                Table    Escape        Special       Control        Numeric
 3118                Name     Characters    Characters    Strings        Escapes
 3119                .SPF 1
 3120                CP5S2    EOT    :      BS     DEL    BREAK          HT   R-T
 3121                }        HT     <      HT     DC2    DISCONNECT     C    .
 3122                }        LF     >      LF     ETB    OVERRUN        D    & (caret)
 3123                }        VT     D      FF     CAN    PARITY CHECK   I
 3124                }        CR     F      CR
 3125                }        DEL    G
 3126                }        DC2    I-K
 3127                }        DC4    N
 3128                }        ETB    Q
 3129                }        '      R
 3130                }        *      V
 3131                }        .      X
 3132                }               & (caret)
 3133
 3134                .brn 18
 3135                Table    Escape        Special       Control        Numeric
 3136                Name     Characters    Characters    Strings        Escapes
 3137                .SPF 1
 3138                FRM1     STX    :      BS     DC2    BREAK          I
 3139                }        EOT    <      HT     NAK    DISCONNECT     R-T
 3140                }        LF     >      LF     ETB    OVERRUN        .
 3141                }        VT     A      CR     CAN    PARITY CHECK
 3142                }        CR     B      DEL    EM
 3143                }        DEL    D
 3144                }        DC2    G-K
 3145                }        ETB    M-O
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          86   
 3146                }        ESC    Q
 3147                }        *      R
 3148                }        '      U
 3149                }        (      V
 3150                }        )      X
 3151                }        -      Y
 3152                }        .      i
 3153
 3154                .brn 17
 3155                Table    Escape        Special       Control        Numeric
 3156                Name     Characters    Characters    Strings        Escapes
 3157                .SPF 1
 3158                SE1      STX    *      BS     DC2    BREAK          HT   M
 3159                }        EOT    -      HT     ETB    DISCONNECT     LF   P
 3160                }        BS     .      LF     CAN    OVERRUN        A-E  R-T
 3161                }        HT     :      CR     EM     PARITY CHECK   H-I  .
 3162                }        VT     <      DEL                               & (caret)
 3163                }        FF     >
 3164                }        CR     A-D
 3165                }        DEL    G-K
 3166                }        DC2    M-R
 3167                }        ESC    U
 3168                }        '      V
 3169                }        (      X
 3170                }        )      Y
 3171                }               & (caret)
 3172
 3173                .brn 12
 3174                Table    Escape        Special       Control        Numeric
 3175                Name     Characters    Characters    Strings        Escapes
 3176                .SPF 1
 3177                SE2      STX    >      None          BREAK          HT   M
 3178                }        HT     A-D                  DISCONNECT     A-E  R-T
 3179                }        CR     G-J                  OVERRUN        H    .
 3180                }        DC2    N                    PARITY CHECK   I    & (caret)
 3181                }        ESC    Q
 3182                }        *      R
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          87   
 3183                }        -      V
 3184                }        .      Y
 3185                }        <      & (caret)
 3186                .TRF &&
 3187                .fin
 3188                */
 3189            2 %CHARTEXT('MAXATRS')%L6# UBIN BYTE CALIGNED %INIT(MAXATRS)%EINIT,
 3190                          /*K* MAXATRS = VALUE-DEC(0-254) specifies the number of
 3191                          field definition positions permitted on any line of
 3192                          the device.
 3193
 3194                          The default causes this parameter to be ignored.
 3195                          */
 3196            2 %CHARTEXT('DSPHEIGHT')%L6# UBIN BYTE UNAL %INIT(DSPHEIGHT)%EINIT,
 3197                          /*K* DSPHEIGHT = VALUE-DEC(0-254)  specifies the number
 3198                          of displayable lines on the screen for a screen-type
 3199                          terminal.  It should be specified only if it is smaller
 3200                          than HEIGHT.  It causes the default scrolling operation
 3201                          of the terminal to use the bottom DSPHEIGHT lines of
 3202                          the addressable memory so that the rest functions as
 3203                          a capture buffer, and so that direct cursor positioning
 3204                          can be used.
 3205
 3206                          The default is 255, which means that DSPHEIGHT is not
 3207                          altered.  A value of zero should be used to indicate
 3208                          that DSPHEIGHT = HEIGHT.
 3209                          */
 3210            %FIL2
 3211            2 %CHARTEXT('FF_INCCR')%L6# BIT(2) %INIT(FF_INCCR)%EINIT,
 3212                          /*K* FF_INCCR = {YES|NO}  YES specifies that the
 3213                          form-feed function for this terminal also positions
 3214                          to the left margin.  NO specifies that it positions
 3215                          only vertically.
 3216
 3217                          The default causes this parameter to be ignored.
 3218                          */
 3219            2 * BIT(2) %INIT('11'B)%EINIT,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          88   
 3220            2 * BIT(2) %INIT('11'B)%EINIT,
 3221            2 * BIT(2) %INIT('11'B)%EINIT,
 3222            2 * (0:8) UBIN BYTE UNAL %INIT(255*0)%EINIT;
 3223      %MEND;
 3224
 3225
 3226                                    /****************************************/
 3227                                    /*   M$PLATEN - DESCRIBE TERMINAL PAPER       */
 3228                                    /****************************************/
 3229
 3230                     /*F* NAME:  M$PLATEN and M$GPLATEN - Set and Get Page Format
 3231
 3232                     The M$PLATEN service is used to describe
 3233                     the page format on a terminal.  The M$GPLATEN
 3234                     service retrieves the current page format. The
 3235                     user can specify or retrieve the following:
 3236
 3237                     .inl 4
 3238                     .unl 4
 3239                     o^^^The maximum number of characters to be written
 3240                     per line on the terminal.
 3241
 3242                     .unl 4
 3243                     o^^^The number of lines to be printed following each
 3244                     automatic heading.
 3245
 3246                     .unl 4
 3247                     o^^^The number of lines to be skipped between the
 3248                     last print line on the page and the top of the
 3249                     next page.
 3250
 3251                     .unl 4
 3252                     o^^^The number of lines to be skipped between the top
 3253                     of a page and the heading line on the page.
 3254
 3255                     .unl 4
 3256                     o^^^The paper width in columns, height in lines, the
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          89   
 3257                     part of that height that is not to be printed in,
 3258                     and the location of page boundary within the
 3259                     non-printing area may be described.
 3260
 3261                     .inl 0
 3262                     The parameters of M$PLATEN are shown in relation to
 3263                     the printer page layout in the following diagram.
 3264
 3265                     .brn 22
 3266                     .fif
 3267                     .trf ^^
 3268                                  -<----- WIDTH ------>-
 3269                     |---------------   - - - - - - - - - -   (PERFORATION)
 3270                     |     ^           *                    *             |
 3271                     |     |           *                    *             |
 3272                     |FIRSTLINE        *                    *             |
 3273                     |     |           *                    *             |
 3274                     |     V                                              |
 3275                     |---------------  *TITLE AREA . . . .  *             |
 3276                     |     ^           *PRINT LINE . . . .  *             |
 3277                     |     |           *PRINT LINE . . . .  *             |
 3278                     |     |           *         .          *             |
 3279                     |   LENGTH        *         .          *             |
 3280                     |     |           *         .          *             |
 3281                     |     |           *         .          *             |
 3282                     |     V           *PRINT LINE . . . .  *             |
 3283                     |---------------                                     |
 3284                     |     ^           *                    *             |
 3285                     |     |           *                    *             |
 3286                     |   LIMBO         *                    *             |
 3287                     |     |           *                    *             |
 3288                     |     V           *                    *             |
 3289                     |---------------   - - - - - - - - - -  (PERFORATION)|
 3290                     .trf ^
 3291                     .fin
 3292
 3293                     The form of the calls are as follows:
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          90   
 3294
 3295                     CALL M$PLATEN (FPT_PLATEN) [ALTRET (label)];
 3296                     .spf
 3297                     CALL M$GPLATEN (FPT_PLATEN) [ALTRET (label)];
 3298
 3299                     Parameters for these services are as
 3300                     follows:
 3301
 3302                     */
 3303
 3304
 3305      %MACRO FPT_PLATEN (FPTN=FPT_PLATEN,
 3306              STATION=NIL,
 3307              PLATEN=NIL,
 3308              DCB=M$UC,
 3309              VECTORS(YES='1'B,NO='0'B)='1'B,
 3310              %ALGN=,
 3311              STCLASS=STATIC);
 3312
 3313      /*!* V Y */
 3314      %LSET LISTDIR='0'B;
 3315      %LSET LISTEXP='1'B;
 3316      %LSET L6=BITBIN(MODE_FEP);
 3317      %LSET ALG=TEXTCHAR(ALGN);
 3318      %IF ALG = '';
 3319       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 3320      %ENDIF;
 3321      %LSET ALG=CHARTEXT(ALG);
 3322      /*!* V N */
 3323      %LSET LISTCOM='0'B;
 3324      %LSET LISTSUB='1'B;
 3325      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 3326      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 3327      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 3328      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 3329
 3330
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          91   
 3331      DCL 1 FPTN STCLASS %ALG,
 3332      %IF VECTORS;
 3333            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 3334      %IF L6=0;
 3335            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 3336                          /*K* STATION = VARIABLE    locates an area containing~F
 3337                          the name of the station to which this service is
 3338                          to be applied when used on COMGROUPs.  If the DCB
 3339                          specified is assigned to a comgroup this parameter
 3340                          may be specified;  if not it is ignored.  The
 3341                          VLP_STATION macro is used to generate the
 3342                          station name.
 3343                          The default is NIL.
 3344                                                                                   */
 3345      %ENDIF;
 3346            2 PLATEN_ VECTOR %INIT(VECTOR(PLATEN))%EINIT,
 3347                          /*K* PLATEN = VARIABLE      specifies a buffer that
 3348                          contains the platen information.  The structure of
 3349                          the buffer is generated by the VLP_PLATEN macro
 3350                          described next in this section.
 3351
 3352                          The default is NIL.
 3353                          */
 3354      %ENDIF;
 3355            2 V %ALG,
 3356              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 3357                          /*K* DCB = DCBNAME
 3358                          .xeq KI_CP6_C M$GTRMCTL DCB
 3359                          */
 3360              3 * BIT(%(54-L6*46)) UNAL %INIT('0'B)%EINIT;
 3361      %MEND;
 3362
 3363                          /*F* NAME: VLP_PLATEN
 3364
 3365                          The VLP_PLATEN macro describes the page format of
 3366                          a terminal.  Parameters for the macro are as
 3367                          follows:
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          92   
 3368                          */
 3369
 3370
 3371      %MACRO VLP_PLATEN (FPTN=VLP_PLATEN,
 3372              EXTWID(YES='1'B,NO='0'B)='0'B,
 3373              WIDTH=255,
 3374              LENGTH=255,
 3375              LIMBO=255,
 3376              FIRSTLINE=255,
 3377              LPI=255,
 3378              %ALGN=,
 3379              STCLASS=STATIC);
 3380
 3381      /*!* V Y */
 3382      %LSET LISTDIR='0'B;
 3383      %LSET LISTEXP='1'B;
 3384      %LSET L6=BITBIN(MODE_FEP);
 3385      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 3386      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 3387      %LSET FIL2=CHARTEXT (CONCAT (SUBSTR ('2 * BIT(1)INIT(''0''B)',0,(1-L6)*(10+S#*5)),SUBSTR (',',L6)));
 3388      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 3389      %LSET ALG=TEXTCHAR(ALGN);
 3390      %IF ALG = '';
 3391       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 3392      %ENDIF;
 3393      %LSET ALG=CHARTEXT(ALG);
 3394      /*!* V N */
 3395      %LSET LISTCOM='0'B;
 3396      %LSET LISTSUB='1'B;
 3397      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 3398      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 3399
 3400
 3401      DCL 1 FPTN STCLASS %ALG,
 3402            %FIL2
 3403            2 %CHARTEXT ('WIDTH')%L6# UBIN(8)UNAL %INIT(WIDTH)%EINIT,
 3404                          /*K* WIDTH = VALUE-DEC(0-254)     specifies the maximum
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          93   
 3405                          number of characters to be written per line on the
 3406                          terminals.
 3407
 3408                     The default is 255, which causes this parameter to be ignored.
 3409                     */
 3410            %FIL2
 3411            2 %CHARTEXT ('LENGTH')%L6# UBIN(8)UNAL %INIT(LENGTH)%EINIT,
 3412                          /*K* LENGTH = VALUE-DEC(0-254)    specifies the number
 3413                          of printable lines on the page.  A value of zero specifies
 3414                          that the form is to be treated as one continuous page.
 3415                          There are FIRSTLINE+LENGTH+LIMBO total lines on one page
 3416                          or screen.
 3417
 3418                     The default is 255, which causes this parameter to be ignored.
 3419                     */
 3420            %FIL2
 3421            2 %CHARTEXT ('LIMBO')%L6# UBIN(8)UNAL %INIT(LIMBO)%EINIT,
 3422                          /*K* LIMBO = VALUE-DEC(0-254)     specifies the number
 3423                          of lines to be left blank between the last legal
 3424                          print line and the bottom of the page or screen.
 3425
 3426                     The default is 255, which causes this parameter to be ignored.
 3427                     */
 3428            %FIL2
 3429            2 %CHARTEXT ('FIRSTLINE')%L6# UBIN(8)UNAL %INIT(FIRSTLINE)%EINIT,
 3430                          /*K* FIRSTLINE = VALUE-DEC(0-254) specifies the height
 3431                          of the area which is to be left blank between the
 3432                          beginning of the page or screen and the first legal
 3433                          print line.
 3434
 3435                     The default is 255, which causes this parameter to be ignored.
 3436                     */
 3437            %FIL2
 3438            2 * UBIN(7) UNAL %INIT(0)%EINIT,
 3439            2 %CHARTEXT ('EXTWID')%L6# BIT(1) UNAL %INIT(EXTWID)%EINIT,
 3440                          /*K* EXTWID = {YES|NO}       specifies whether the
 3441                          value of WIDTH is the number of columns  by which
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          94   
 3442                          the carriage width exceeds 254.  When WIDTH = 255,
 3443                          this parameter is ignored.
 3444
 3445                          The default is NO.
 3446                          */
 3447            %FIL2
 3448            2 %CHARTEXT ('LPI')%L6# UBIN(8)UNAL %INIT(LPI)%EINIT,
 3449                          /*K* LPI = VALUE-DEC(0-254)  is currently unused.
 3450                          */
 3451            2 * (0:9) UBIN BYTE UNAL %INIT(0*0)%EINIT;
 3452      %MEND;
 3453
 3454
 3455                                    /*******************************************/
 3456                                    /* M$STRMTAB - SET TERMINAL DEVICE TABS       */
 3457                                    /* M$GTRMTAB - GET TERMINAL DEVICE TABS       */
 3458                                    /*******************************************/
 3459
 3460                          /*F* NAME: M$GTRMTAB and M$STRMTAB - Tab Settings
 3461
 3462                          The M$GTRMTAB service to obtain the device tab setting
 3463                          of the terminal.  Device tabs are the physical tabs of
 3464                          the terminal.  The system  uses device tabs to
 3465                          optimize carriage movement.  Device tabs are only
 3466                          used by the system and do not affect logical tabs
 3467                          or tab characters, with the following exceptions.
 3468                          When an M$WRITE is issued to the terminal with a
 3469                          DCB that specifies ORG=TERMINAL and TRANS=YES or
 3470                          when tab simulation is not used (in VLP_TRMCTL
 3471                          TABSIM=NO), a tab character causes the terminal to
 3472                          move to the next device tab.
 3473                          ..::IX "M$STRMTAB"
 3474
 3475                          NOTE:  To set normal horizontal tabulation at a terminal
 3476                          in order to align text, use the M$DEVICE not the
 3477                          M$STRMTAB service.  Refer to Section 3 for a discussion
 3478                          of M$DEVICE.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          95   
 3479
 3480                          The form of the call for this service is as
 3481                          follows:
 3482
 3483                          CALL M$GTRMTAB (FPT_TRMTAB) [ALTRET (label)];
 3484
 3485
 3486                          The M$STRMTAB service is used to set
 3487                          the device tab setting of the terminal.  The form
 3488                          of the call for this service is as follows:
 3489
 3490                          CALL M$STRMTAB (FPT_TRMTAB) [ALTRET (label)];
 3491
 3492                          Parameters for FPT_TRMTAB are as
 3493                          follows:
 3494
 3495                                                                             */
 3496
 3497      %MACRO FPT_TRMTAB (FPTN=FPT_TRMTAB,
 3498              STATION=NIL,
 3499              TAB=NIL,
 3500              DCB=M$UC,
 3501              VECTORS(YES='1'B,NO='0'B)='1'B,
 3502              %ALGN=,
 3503              STCLASS=STATIC);
 3504
 3505      /*!* V Y */
 3506      %LSET LISTDIR='0'B;
 3507      %LSET LISTEXP='1'B;
 3508      %LSET L6=BITBIN(MODE_FEP);
 3509      %LSET ALG=TEXTCHAR(ALGN);
 3510      %IF ALG = '';
 3511       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 3512      %ENDIF;
 3513      %LSET ALG=CHARTEXT(ALG);
 3514      /*!* V N */
 3515      %LSET LISTCOM='0'B;
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          96   
 3516      %LSET LISTSUB='1'B;
 3517      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 3518      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 3519      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 3520      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 3521
 3522
 3523      DCL 1 FPTN STCLASS %ALG,
 3524      %IF VECTORS;
 3525            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 3526      %IF L6=0;
 3527            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 3528                          /*K* STATION = VARIABLE    locates an area containing~F
 3529                          the name of the station to which this service is
 3530                          to be applied when used on COMGROUPs.  If the DCB
 3531                          specified is assigned to a comgroup this parameter
 3532                          may be specified;  if not it is ignored.  The
 3533                          VLP_STATION macro is used to generate the
 3534                          station name.
 3535                          The default is NIL.
 3536                                                                                   */
 3537      %ENDIF;
 3538            2 TAB_ VECTOR %INIT(VECTOR(TAB))%EINIT,
 3539                          /*K* TAB = VARIABLE     specifies a buffer from which
 3540                          the tab settings are moved.  The structure of
 3541                          the buffer is generated by the VLP_TAB macro.
 3542                          When specifying device tabs via VLP_TAB, MARGIN
 3543                          sets the first device tab and TAB specifies
 3544                          the remainder of the tabs.  (VLP_TAB is defined
 3545                          in Section 3.)
 3546                          If the terminal has no device tabs or if the
 3547                          device tabs are unknown, 0 is returned for all
 3548                          tab positions.
 3549
 3550                          The default is NIL.
 3551                                                                             */
 3552      %ENDIF;
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          97   
 3553            2 V %ALG,
 3554              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 3555                          /*K* DCB = DCBNAME
 3556                          .xeq KI_CP6_C M$GTRMCTL DCB
 3557                                                                                  */
 3558
 3559              3 * BIT(%(54-L6*46)) UNAL %INIT('0'B)%EINIT;
 3560      %MEND;
 3561
 3562
 3563                                    /*****************************************/
 3564                                    /* M$SINPUT - SET "LAST LINE TYPED IN"        */
 3565                                    /*****************************************/
 3566
 3567
 3568
 3569
 3570                          /*F* NAME: M$SINPUT - Set to Last Input.
 3571
 3572                          The M$SINPUT service is used to
 3573                          define a record that is to be processed as if it
 3574                          were the last input line entered by the user.
 3575                          This record is used for any editing functions on
 3576                          the next M$READ to the terminal.  If the next
 3577                          M$READ specifies REREAD, this line is printed
 3578                          after the prompt is issued.  This service allows
 3579                          the user to process a record in a file in the same
 3580                          manner as a record entered from the terminal.
 3581                          See also SINPUTSIZE in M$READ.
 3582
 3583                          For DCBs open with ORG=SE, this service is used to
 3584                          position the cursor on the screen, and supplies the
 3585                          key of the record instead of the data, since the data
 3586                          is already known.
 3587
 3588                          The form of the call is as follows:
 3589
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          98   
 3590                          CALL M$SINPUT (FPT_SINPUT) [ALTRET (label)];
 3591
 3592                          Parameters for the M$SINPUT service are as
 3593                          follows:
 3594                          */
 3595
 3596
 3597      %MACRO FPT_SINPUT (FPTN=FPT_SINPUT,
 3598              BUF=NIL,
 3599              STATION=NIL,
 3600              DCB=M$UC,
 3601              POSITION(YES='1'B,NO='0'B)='0'B,
 3602              REREADPOS=0,
 3603              VECTORS(YES='1'B,NO='0'B)='1'B,
 3604              RRR(YES='1'B,NO='0'B)='0'B,
 3605              %ALGN=,
 3606              STCLASS=STATIC);
 3607
 3608      /*!* V Y */
 3609      %LSET LISTDIR='0'B;
 3610      %LSET LISTEXP='1'B;
 3611      %LSET L6=BITBIN(MODE_FEP);
 3612      %LSET ALG=TEXTCHAR(ALGN);
 3613      %IF ALG = '';
 3614       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 3615      %ENDIF;
 3616      %LSET ALG=CHARTEXT(ALG);
 3617      /*!* V N */
 3618      %LSET LISTCOM='0'B;
 3619      %LSET LISTSUB='1'B;
 3620      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 3621      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 3622      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 3623      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 3624      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 3625
 3626
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          99   
 3627      DCL 1 FPTN STCLASS %ALG,
 3628      %IF VECTORS;
 3629            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 3630      %IF L6=0;
 3631            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 3632                          /*K* STATION = VARIABLE    locates an area containing~F
 3633                          the name of the station to which this service is
 3634                          to be applied when used on COMGROUPs.  If the DCB
 3635                          specified is assigned to a comgroup this parameter
 3636                          may be specified;  if not it is ignored.  The
 3637                          VLP_STATION macro is used to generate the
 3638                          station name.
 3639                          The default is NIL.
 3640                                                                                   */
 3641      %ENDIF;
 3642      %IF L6=0;
 3643            2 BUF_,
 3644              3 BOUND UBIN(20) UNAL %INIT(SIZEV(BUF))%EINIT,
 3645              3 * BIT(12) %INIT('7772'O)%EINIT,
 3646              3 BUF$ PTR %INIT(ADDR(BUF))%EINIT,
 3647      %ELSE;
 3648            2 BUF_ VECTOR %INIT(VECTOR(BUF))%EINIT,
 3649      %ENDIF;
 3650                          /*K* BUF = VARIABLE  locates a buffer that contains the
 3651                          record to be processed as the last input line. If
 3652                          POSITION=YES was specified, the first character of the
 3653                          buffer specifies where to position the carriage within
 3654                          this line if an
 3655                          M$READ with REREAD is performed.  The value is a
 3656                          character number (1-255).  If zero is specified
 3657                          here, the carriage is positioned at the end of the
 3658                          input.
 3659
 3660                          For DCBs open with ORG=SE, the buffer contains the key
 3661                          of the record that is to be edited next, and must be
 3662                          KEYL bytes long.  (KEYL is specified on a call to
 3663                          M$OPEN.)  In addition, the REREADPOS option
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          100  
 3664                          must be used instead of POSITION.
 3665
 3666                          The default is NIL.
 3667                          */
 3668      %ENDIF;
 3669            2 V %ALG,
 3670              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 3671                          /*K* DCB = DCBNAME
 3672                          .xeq KI_CP6_C M$GTRMCTL DCB
 3673                          */
 3674              3 * BIT(1) %INIT('1'B)%EINIT,
 3675              3 %CHARTEXT('POSITION')%L6# BIT(1) UNAL %INIT(POSITION)%EINIT,
 3676                          /*K* POSITION = {YES|NO} YES specifies that the first
 3677                          character of BUF provides carriage positioning (see BUF).
 3678                          NO specifies that the buffer is entirely text and
 3679                          the carriage is to be positioned after it on a REREAD.
 3680
 3681                          The default is NO.
 3682                          */
 3683      /*!* V Y */
 3684      %IF NOT(MODE_FEP);
 3685              3 * BIT(7)UNAL %INIT('0'B)%EINIT,
 3686              3 DVBYTE,
 3687                          /*B* DVBYTE. (Usually set at lower level BIT(9)).
 3688                          Specifies whether an error return is to be awaited.     */
 3689                4 TOP BIT(1) UNAL %INIT('0'B)%EINIT,
 3690                4 BP BIT(1) UNAL %INIT('0'B)%EINIT,
 3691                4 VFC BIT(1) UNAL %INIT('0'B)%EINIT,
 3692                4 BIN BIT(1) UNAL %INIT('0'B)%EINIT,
 3693
 3694                4 TRANS BIT(1) UNAL %INIT('0'B)%EINIT,
 3695                4 %CHARTEXT('RRR')%L6# BIT(1) UNAL %INIT(RRR)%EINIT,
 3696                     /*K* RRR = {YES|NO} YES specifies Return Receipt Request.~F
 3697                     This option specifies, for DCBs open with ORG=SE only,
 3698                     that M$SINPUT is to await verification that the
 3699                     record being positioned to is actually present in
 3700                     the FEP cache of records.  If the record is absent,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          101  
 3701                     the E$NOKEY error code will be returned.  This option
 3702                     should be used sparingly,  since it always requires
 3703                     a response from the FEP, which will adversely affect
 3704                     the responsiveness of an editor program.
 3705                     */
 3706                4 NODAT BIT(1) UNAL %INIT('0'B)%EINIT,
 3707                4 * BIT(1) UNAL %INIT('0'B)%EINIT,
 3708                4 CONT BIT(1) UNAL %INIT('0'B)%EINIT,
 3709      %ENDIF;
 3710      /*!* V N */
 3711              3 * BIT(%(18-L6*12))UNAL %INIT('0'B)%EINIT,
 3712              3 %CHARTEXT('REREADPOS')%L6# UBIN(%(18-L6*2))UNAL %INIT(REREADPOS)%EINIT;
 3713                          /*K* REREADPOS = VALUE-DEC(0-?)
 3714                          specifies where to position the carriage or cursor
 3715                          within the text if an
 3716                          M$READ with REREAD is performed.  The value is a
 3717                          character number in the text.  If zero is specified
 3718                          here, the carriage is positioned at the end of the
 3719                          text.  The POSITION option overrides this one, but
 3720                          provides only positioning in the first 255 bytes of
 3721                          the input text.
 3722
 3723                          The default is zero.
 3724                          */
 3725      %MEND;
 3726
 3727
 3728                                    /***************************************/
 3729                                    /* M$PROFILE - SET TERMINAL PROFILE           */
 3730                                    /*       Available for CP6 only               */
 3731                                    /***************************************/
 3732
 3733
 3734                          /*F* NAME: M$PROFILE - Set Terminal Profile.
 3735
 3736                          The M$PROFILE service changes
 3737                          the terminal profile.  Terminal profiles
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          102  
 3738                          are established by the system manager via SUPER.
 3739
 3740                          The form of the call is as follows:
 3741
 3742                          CALL M$PROFILE (FPT_PROFILE) [ALTRET (label)];
 3743
 3744                          Parameters for the M$PROFILE service are as
 3745                          follows:
 3746                          */
 3747
 3748
 3749      %MACRO FPT_PROFILE (FPTN=FPT_PROFILE,
 3750              PROFILE=NIL,
 3751              STATION=NIL,
 3752              BUF=NIL,
 3753              DCB=M$UC,
 3754              VECTORS(YES='1'B,NO='0'B)='1'B,
 3755              %ALGN=,
 3756              STCLASS=STATIC);
 3757
 3758      /*!* V Y */
 3759      %LSET LISTDIR='0'B;
 3760      %LSET LISTEXP='1'B;
 3761      %LSET ALG=TEXTCHAR(ALGN);
 3762      %IF ALG = '';
 3763       %LSET ALG='DALIGNED';
 3764      %ENDIF;
 3765      %LSET ALG=CHARTEXT(ALG);
 3766      /*!* V N */
 3767      %LSET LISTCOM='0'B;
 3768      %LSET LISTSUB='1'B;
 3769      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 3770      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 3771      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 3772      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 3773
 3774
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          103  
 3775      DCL 1 FPTN STCLASS %ALG,
 3776      %IF VECTORS;
 3777            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 3778            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 3779                          /*K* STATION = VARIABLE    locates an area containing~F
 3780                          the name of the station to which this service is
 3781                          to be applied when used on COMGROUPs.  If the DCB
 3782                          specified is assigned to a comgroup this parameter
 3783                          may be specified;  if not it is ignored.  The
 3784                          VLP_STATION macro is used to generate the
 3785                          station name.
 3786                          The default is NIL.
 3787                                                                                   */
 3788            2 PROFILE_ VECTOR %INIT(VECTOR(PROFILE))%EINIT,
 3789                          /*K* PROFILE = VARIABLE       locates a buffer that
 3790                          contains the profile name.  Profile names are
 3791                          identical to file names; therefore, the structure
 3792                          of the buffer may be generated with the VLP_NAME
 3793                          macro.  Profile names are a maximum of 11
 3794                          characters.
 3795
 3796                          The default is NIL.
 3797                          */
 3798            2 BUF_,
 3799              3 BOUND UBIN(20) UNAL %INIT(SIZEV(BUF))%EINIT,
 3800              3 * BIT(12) %INIT('7772'O)%EINIT,
 3801              3 BUF$ PTR %INIT(ADDR(BUF))%EINIT,
 3802                          /*K* BUF = VARIABLE    locates a buffer into which the
 3803                          profile is returned if the user wishes to look at
 3804                          the profile.  It is recommended that this
 3805                          buffer be at least 1K bytes.  If BUF is nil then
 3806                          the M$PROFILE will be done, but nothing will be returned
 3807                          to the user.
 3808
 3809                          The default is NIL.
 3810                          */
 3811      %ENDIF;
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          104  
 3812            2 V %ALG,
 3813              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%EINIT,
 3814                          /*K* DCB = DCBNAME
 3815                          .xeq KI_CP6_C M$GTRMCTL DCB
 3816                          */
 3817              3 * BIT(54) UNAL %INIT('0'B)%EINIT;
 3818      %MEND;
 3819
 3820
 3821
 3822                                    /*********************************************/
 3823                                    /*  M$TRMISC - MISCELLANEOUS TERMINAL CONTROLS*/
 3824                                    /*       Available for CP6 only               */
 3825                                    /*********************************************/
 3826
 3827
 3828                          /*F* NAME: M$TRMISC - Set Miscellaneous Controls.
 3829
 3830                          The M$TRMISC service is
 3831                          used to allow or inhibit SENDing and BROADCASTing to
 3832                          the terminal by operators.
 3833                          The procedure call is of the form:
 3834
 3835                          CALL M$TRMISC (FPT_TRMISC) [ALTRET (label)];
 3836
 3837                          The parameters for this service are as follows:         */
 3838
 3839
 3840      %MACRO FPT_TRMISC (FPTN=FPT_TRMISC,
 3841              DCB=M$UC,
 3842              STATION=NIL,
 3843              SEND(YES='1'B,NO='0'B,NA='01'B)='01'B,
 3844              BROADCAST(YES='1'B,NO='0'B,NA='01'B)='01'B,
 3845              ANNOUNCE(YES='1'B,NO='0'B,NA='01'B)='01'B,
 3846              VECTORS(YES='1'B,NO='0'B)='1'B,
 3847              %ALGN=,
 3848              STCLASS=STATIC);
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          105  
 3849
 3850      /*!* V Y */
 3851      %LSET LISTDIR='0'B;
 3852      %LSET LISTEXP='1'B;
 3853      %LSET ALG=TEXTCHAR(ALGN);
 3854      %IF ALG = '';
 3855       %LSET ALG='DALIGNED';
 3856      %ENDIF;
 3857      %LSET ALG=CHARTEXT(ALG);
 3858      /*!* V N */
 3859      %LSET LISTCOM='0'B;
 3860      %LSET LISTSUB='1'B;
 3861      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 3862      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 3863      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 3864      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 3865
 3866
 3867      DCL 1 FPTN STCLASS %ALG,
 3868      %IF VECTORS;
 3869            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 3870            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 3871                          /*K* STATION = VARIABLE    locates an area containing~F
 3872                          the name of the station to which this service is
 3873                          to be applied when used on COMGROUPs.  If the DCB
 3874                          specified is assigned to a comgroup this parameter
 3875                          may be specified;  if not it is ignored.  The
 3876                          VLP_STATION macro is used to generate the
 3877                          station name.
 3878                          The default is NIL.
 3879                                                                                   */
 3880      %ENDIF;
 3881            2 V %ALG,
 3882              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%EINIT,
 3883                          /*K* DCB = DCBNAME
 3884                          .xeq KI_CP6_C M$GTRMCTL DCB
 3885                                                                                   */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          106  
 3886              3 * BIT(18) UNAL %INIT('0'B)%EINIT,
 3887              3 SEND# BIT(2) UNAL %INIT(SEND)%EINIT,
 3888                          /*K* SEND = {YES|NO} indicates whether operator SEND
 3889                          keyin messages may be sent to the terminal.
 3890
 3891                          The default causes this parameter to be ignored.
 3892                          */
 3893              3 BROADCAST# BIT(2) UNAL %INIT(BROADCAST)%EINIT,
 3894                          /*K* BROADCAST = {YES|NO} indicates whether operator
 3895                BROADCAST and SENDALL keyin messages may be sent to the terminal.
 3896
 3897                The default causes this parameter to be ignored.
 3898                */
 3899              3 ANNOUNCE# BIT(2) UNAL %INIT(ANNOUNCE)%EINIT,
 3900                          /*K* ANNOUNCE = {YES|NO} indicates whether tape and
 3901                          disk mounts will be announced on the terminal
 3902                          by the following:
 3903
 3904                          .FIF
 3905                           ...MOUNTING LT#ABCDEF
 3906                          .FIN
 3907
 3908                          The default causes this parameter to be ignored.
 3909                          */
 3910              3 * BIT(30) UNAL %INIT('0'B)%EINIT;
 3911      %MEND;
 3912
 3913
 3914
 3915                                    /***************************/
 3916                                    /*   M$FEBOOT - BOOT FEP                      */
 3917                                    /*   M$FEDUMP - DUMP FEP                      */
 3918                                    /*   Available on CP6 only                    */
 3919                                    /***************************/
 3920
 3921
 3922                          /*F* NAME: M$FEBOOT - Boot Front-End Processor.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          107  
 3923
 3924                          The M$FEBOOT service is
 3925                          used by privileged processes to re-boot
 3926                          Front-End Processors.  The procedure call is of the form:
 3927
 3928                          CALL M$FEBOOT (FPT_FECTL) [ALTRET (label)];
 3929
 3930                          See M$FECTL for a description of parameters
 3931                          for this service.                                       */
 3932
 3933                          /*F* NAME: M$FEDUMP - Dump Front-End Processor.
 3934
 3935                          The M$FEDUMP service is
 3936                          used by privileged processes to dump the memory of
 3937                          a Front-End Processor.  The procedure call
 3938                          is of the form:
 3939
 3940                          CALL M$FEDUMP (FPT_FECTL) [ALTRET (label)];
 3941
 3942                          See M$FECTL for a description of parameters
 3943                          for this service.                                       */
 3944
 3945                          /*F* NAME: M$FECTL - Control Front-End Processor.
 3946
 3947                          The M$FECTL service is
 3948                          used by privileged processes to control FEP operations.
 3949                          The procedure call is of the form:
 3950
 3951                          CALL M$FECTL (FPT_FECTL) [ALTRET (label)];
 3952
 3953                          The parameters for FPT_FECTL are as follows:            */
 3954
 3955
 3956      %MACRO FPT_FECTL (FPTN=FPT_FECTL,
 3957              FEP=0,
 3958              DMPSTART=0,
 3959              BUF=NIL,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          108  
 3960              RESULTS=NIL,
 3961              HALT(YES='1'B,NO='0'B)='0'B,
 3962              STOP(YES='1'B,NO='0'B)='0'B,
 3963              START(YES='1'B,NO='0'B)='0'B,
 3964              MLCPDUMP(YES='1'B,NO='0'B)='0'B,
 3965                          NOTIME(YES='1'B,NO='0'B)='0'B,
 3966              STCLASS=STATIC);
 3967
 3968      %LSET LISTDIR='0'B;
 3969      %LSET LISTEXP='1'B;
 3970      %LSET LISTCOM='0'B;
 3971      %LSET LISTSUB='1'B;
 3972      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 3973      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 3974      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 3975      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 3976
 3977      DCL 1 FPTN STCLASS DALIGNED,
 3978            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 3979            2 BUF_,
 3980              3 BOUND UBIN(20) UNAL %INIT(SIZEV(BUF))%EINIT,
 3981              3 * BIT(12) %INIT('7772'O)%EINIT,
 3982              3 BUF$ PTR %INIT(ADDR(BUF))%EINIT,
 3983                          /*K* BUF = VARIABLE  Locates the user's buffer from
 3984                          which the FEP boot image comes on M$FEBOOT or to
 3985                          which the FEP dump is sent on M$FEDUMP.
 3986
 3987                          The default is NIL.
 3988                          */
 3989            2 RESULTS_ VECTOR %INIT(VECTOR(RESULTS))%EINIT,
 3990                          /*K* RESULTS = VARIABLE  Locates a DALIGNED doubleword
 3991                          into which the results of an M$FEBOOT or M$FEDUMP
 3992                          operation are stored.  The first word is the error if
 3993                          any that occurred (zero = no error), and the second
 3994                          word contains the size of the memory or MLCP dump
 3995                          performed.
 3996
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          109  
 3997                          The default is NIL.
 3998                          */
 3999
 4000            2 V DALIGNED,
 4001              3 DMPSTART# UBIN WORD %INIT(DMPSTART)%EINIT,
 4002                          /*K* DMPSTART = VALUE-DEC(0-?). Specifies the byte
 4003                          address within FEP memory at which to start the dump
 4004                          on an M$FEDUMP.  DMPSTART is unused on other services.
 4005                          The bottom 9 bits are ignored, thus dumps may only
 4006                          begin on multiples of 512 bytes.
 4007
 4008                          The default is 0.
 4009                          */
 4010              3 DMPSR REDEF DMPSTART#,
 4011                4 * BIT(12),
 4012                4 DADR UBIN(15) UNAL, /* USEFULL PART OF DMPSTART                 */
 4013                4 * BIT(9),
 4014              3 FEP# UBIN WORD %INIT(FEP)%EINIT,
 4015                          /*K* FEP = VALUE-DEC(1-?). Specifies the node number of
 4016                          the FEP to be booted or dumped.
 4017
 4018                          The default is 0.
 4019                          */
 4020              3 HALT# BIT(1) UNAL %INIT(HALT)%EINIT,
 4021                          /*K* HALT = {YES|NO}. On M$FECTL YES specifies that
 4022                          the FEP is to be halted, that is, all users logged
 4023                          off, halted and masked.
 4024
 4025                          The default is NO.
 4026                          */
 4027              3 MLCPDUMP# BIT(1) UNAL %INIT(MLCPDUMP)%EINIT,
 4028                          /*K* MLCPDUMP = {YES|NO}.  On an M$FEBOOT request, YES
 4029                          specifies that the FEP MLCPs are to be dumped into
 4030                          the buffer used to boot the FEP.  If NO is specified
 4031                          the MLCP dump is not performed.
 4032
 4033                          The default is NO.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          110  
 4034                          */
 4035              3 STOP# BIT(1) UNAL %INIT(STOP)%EINIT,
 4036                          /*K* STOP = {YES|NO}.  On M$FECTL YES specifies that
 4037                          the FEP is to be stopped, that is, all users are to be
 4038                          logged off and masked.  This bit is inspected after the
 4039                          HALT bit.  Note that this leaves the FEP running
 4040                          but not in contact with the host.
 4041
 4042                          The default is NO.
 4043                          */
 4044              3 START# BIT(1) UNAL %INIT(START)%EINIT,
 4045                          /*K* START = {YES|NO}. On M$FECTL YES specifies that
 4046                          the FEP is to be started.  The FEP is unmasked.  If
 4047                          it is not already running, the FEP is
 4048                          re-booted.  This bit is
 4049                          inspected after HALT and STOP.
 4050
 4051                          The default is NO.
 4052                          */
 4053              3 NOTIME# BIT(1) UNAL %INIT(NOTIME)%EINIT,
 4054                          /*K* NOTIME = {YES|NO}.  Specifies whether the
 4055                          FEP is to be timed out in the running state.
 4056                          NOTIME=YES is used for a debug FEP that it is
 4057                          not to be timed out.  The default is NO.
 4058                          */
 4059              3 * BIT(31) UNAL %INIT('0'B)%EINIT;
 4060      %MEND;
 4061
 4062
 4063
 4064                                    /********************************/
 4065                                    /*  M$SETFP - LOAD FEP PROGRAM                */
 4066                                    /*  Available on CP6 only                     */
 4067                                    /********************************/
 4068
 4069
 4070                          /*F* NAME: M$SETFP - Load FEP Program.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          111  
 4071
 4072                          The M$SETFP service is
 4073                          used to invoke a FEP program to be used in
 4074                          communicating with a FEP device.  The run unit
 4075                          of the FEP program resides in a file which
 4076                          this service describes.  As a result of M$SETFP
 4077                          it is sent to the front-end and put into execution
 4078                          on behalf of the FEP device described in the call.
 4079                          This service is available on ORG=FPRG DCBs only.
 4080                          The procedure call is of the form:
 4081
 4082                               CALL M$SETFP (FPT_SETFP) [ALTRET (label)];
 4083
 4084                          The parameters for this service are as follows:         */
 4085
 4086
 4087      %MACRO FPT_SETFP (FPTN=FPT_SETFP,
 4088            DCB=NIL,
 4089            FPRG=NIL,
 4090            STATION=NIL,
 4091            STCLASS=STATIC);
 4092
 4093      %LSET LISTDIR='0'B;
 4094      %LSET LISTEXP='1'B;
 4095      %LSET LISTCOM='0'B;
 4096      %LSET LISTSUB='1'B;
 4097      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 4098      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 4099      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 4100      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 4101
 4102      DCL 1 FPTN STCLASS DALIGNED,
 4103            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 4104            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 4105                          /*K* STATION = VARIABLE    locates an area containing~F
 4106                          the name of the station to which this service is
 4107                          to be applied when used on COMGROUPs.  If the DCB
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          112  
 4108                          specified is assigned to a comgroup this parameter
 4109                          may be specified;  if not it is ignored.  The
 4110                          VLP_STATION macro is used to generate the
 4111                          station name.
 4112                          The default is NIL.
 4113                                                                                   */
 4114            2 FPRG_ VECTOR %INIT(VECTOR(FPRG))%EINIT,
 4115                          /*K* FPRG = VARIABLE    locates a buffer that
 4116                          describes the FEP program to be invoked.  The
 4117                          structure of the buffer is generated by the
 4118                          VLP_FPRG macro.  The calling program must have
 4119                          input access to the file described.
 4120                          There is no default.
 4121                                                                                   */
 4122            2 * VECTOR %INIT(VECTOR(NIL))%EINIT,
 4123            2 V DALIGNED,
 4124              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%EINIT,
 4125                          /*K* DCB = DCBNAME     specifies the name of the DCB
 4126                          associated with the device.  The DCB must have
 4127                          FEP program organization (ORG=FPRG).
 4128                          DCB must be specified.
 4129                                                                                   */
 4130              3 * BIT(18) UNAL %INIT('1'B)%EINIT,
 4131              3 * BIT(36) UNAL %INIT('0'B)%EINIT,
 4132              3 * BIT(72) UNAL %INIT('0'B)%EINIT;
 4133      %MEND;
 4134
 4135
 4136                                    /**********************************/
 4137                                    /*     VLP_FPRG                               */
 4138                                    /*     Available for CP6 only                 */
 4139                                    /**********************************/
 4140
 4141
 4142                          /*F* NAME: VLP_FPRG
 4143
 4144                          The VLP_FPRG macro describes a FEP program.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          113  
 4145                          Parameters for the macro are as follows:
 4146                                                                                   */
 4147
 4148      %MACRO VLP_FPRG (FPTN=VLP_FPRG,
 4149            NAME="%SUBSTR(' ',0,0)",
 4150            ACCT=' ',
 4151            PSN=' ',
 4152           PASS = ' ',
 4153           LDBYPRO=0,
 4154           DEBUG(YES='1'B,NO='0'B)='0'B,
 4155           PROFILE=' ',
 4156           %LVL=1,
 4157            %LAST(YES=";",NO=",",ANY)=";",
 4158            STCLASS=STATIC);
 4159
 4160
 4161      %LSET LISTDIR='0'B;
 4162      %LSET LISTEXP='1'B;
 4163      %LSET LISTCOM='0'B;
 4164      %LSET LISTSUB='1'B;
 4165      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 4166      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 4167      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 4168      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 4169
 4170                                    /*!* VP Y                                     */
 4171      %LSET L6=BITBIN(MODE_FEP);
 4172       %IF LVL=1;
 4173
 4174      DCL 1 FPTN STCLASS DALIGNED,
 4175
 4176       %ELSE;
 4177
 4178              %LVL FPTN ALIGNED,
 4179
 4180       %ENDIF;
 4181                                    /*!* VP N                                     */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          114  
 4182
 4183                %(LVL+1) LDBYPRO# UBIN BYTE UNAL %INIT(LDBYPRO) %EINIT,
 4184                          /*K* LDBYPRO = VALUE-DEC(0-511) specifies, if non-zero,
 4185                          that the FPRG is to be found from the associated
 4186                          PROFILE, not from this VLP.                             */
 4187                %(LVL+1) FLGS,
 4188                %(LVL+2) DEBUG# BIT(1) UNAL %INIT(DEBUG)%EINIT,
 4189                          /*K* DEBUG = {YES|NO} specifies, if yes,
 4190                          that this FPRG is to be debugged and that
 4191                          as such, it is not to be started but is
 4192                          instead to be held awaiting commands from
 4193                          a debugger such as:
 4194
 4195                           DEBUG <station> ON <comgroup>
 4196
 4197                          DEBUG is only honored for comgroup station
 4198                          connected FPRGs since DCB-connected FPRGs
 4199                          will be debugged if their owner is running
 4200                          under control of a debugger when this
 4201                          M$SETFP is issued.
 4202
 4203                          The default is NO.
 4204                          */
 4205                %(LVL+2) * BIT(%(8-L6)) UNAL %INIT('0'B)%EINIT,
 4206                %(LVL+1) PSN# CHAR(6) %INIT(PSN)%EINIT,
 4207                          /*K* PSN = VALUE-CHAR(6) specifies the
 4208                          packset name of the FEP program
 4209                          file to be loaded.  The default is blanks, specifying
 4210                          the current packset name.
 4211                                                                                   */
 4212                %(LVL+1) %CHARTEXT('NAME'),
 4213                %(LVL+2) L# UBIN BYTE UNAL %INIT(%LENGTHC(NAME))%EINIT,
 4214                %(LVL+2) C# CHAR(31) %INIT(%CONCAT(NAME,SUBSTR(' ',0,BITBIN(LENGTHC(NAME)=0))))%EINIT,
 4215                          /*K* NAME = VALUE-CHAR(31) specifies
 4216                          the name of the FEP program
 4217                          file to be loaded.  NAME or LDBYPRO must be specified.
 4218                          The NAME area in the VLP contains a length byte, NAME#.L#,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          115  
 4219                          indicating the number of significant characters in
 4220                          the text portion, NAME#.C#.
 4221                                                                                   */
 4222                %(LVL+1) ACCT# CHAR(8) %INIT(ACCT)%EINIT,
 4223                          /*K* ACCT = VALUE-CHAR(8) specifies
 4224                          the account of the FEP program
 4225                          file to be loaded.  The default is blanks, specifying
 4226                          the current account.
 4227                                                                                   */
 4228                %(LVL+1) PASS# CHAR(8) UNAL %INIT(PASS)%EINIT,
 4229                          /*K* PASS = VALUE-CHAR(8) specifies
 4230                          the password of the FEP program
 4231                          file to be loaded.  The default is blanks, indicating
 4232                          that the file is not passworded.
 4233                                                                                   */
 4234                %(LVL+1) PROFILE#,
 4235                          /*K* PROFILE = VALUE-CHAR(11) specifies a profile
 4236                          name when LDBYPRO is specified.  The PROFILE area
 4237                          of the VLP contains a length byte, PROFILE#.C#,
 4238                          indicating the number of significant characters in
 4239                          the text portion, PROFILE#.T#.
 4240                          */
 4241                %(LVL+2) C# UBIN BYTE UNAL %INIT(SIZEC(PROFILE))%EINIT,
 4242                %(LVL+2) T# CHAR(11) UNAL %INIT(PROFILE)%EINIT LAST
 4243      %MEND;
 4244
 4245
 4246                          /*B*  NAME:  TERMINAL COUPLING.
 4247                          */
 4248                          /*B* M$ACPL.  The M$ACPL service accepts a terminal
 4249                          couple.  (Not presently available.)
 4250                          */
 4251
 4252                          /*B* NAME:  M$COUPLE.  The M$COUPLE service associates one
 4253                          terminal with another.  (Not presently available.)
 4254                          */
 4255
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          116  
 4256                          /*B* NAME:  M$DECOUPLE.  The M$DECOUPLE service ends the
 4257                          association of terminals established by M$COUPLE.
 4258                          (Not presently available.)
 4259                          */
 4260
 4261
 4262
 4263
 4264
 4265
 4266                          /*F* NAME: VLR_MODTIME
 4267
 4268                          The VLR_MODTIME macro describes the run unit
 4269                          modification time returned to TPFP in CCBUF.
 4270                          */
 4271
 4272      /* This macro is used by KIF$FPRG in the host and
 4273      the TPFP only.  It does not need to be extracted
 4274      for either the host or fep monitor services reference
 4275      manuals.
 4276      */
 4277
 4278      %MACRO VLR_MODTIME (FPTN=VLR_MODTIME,
 4279            LVL=1,
 4280            LAST(YES=";",NO=",",ANY)=";",
 4281            STCLASS=STATIC);
 4282
 4283
 4284      %LSET LISTDIR='0'B;
 4285      %LSET LISTEXP='1'B;
 4286      %LSET LISTCOM='0'B;
 4287      %LSET LISTSUB='1'B;
 4288      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 4289      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 4290      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 4291      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 4292
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          117  
 4293                                    /*!* VP Y                                     */
 4294       %IF LVL=1;
 4295      DCL 1 FPTN STCLASS DALIGNED,
 4296       %ELSE;
 4297              %LVL FPTN ALIGNED,
 4298       %ENDIF;
 4299                                    /*!* VP N                                     */
 4300
 4301                %(LVL+1) TIME CHAR(5) UNAL,
 4302                %(LVL+1) TIM REDEF TIME,
 4303                %(LVL+2) HH CHAR(2) UNAL,
 4304                %(LVL+2) * CHAR(1) UNAL,
 4305                %(LVL+2) MM CHAR(2) UNAL,
 4306                          /*K* TIME - CHAR(5).
 4307                          Contains the last modification time in the format:
 4308
 4309                          hh:mm
 4310                          */
 4311                %(LVL+1) * CHAR(1) UNAL,
 4312
 4313                %(LVL+1) DATE CHAR(8) UNAL,
 4314                %(LVL+1) DAT REDEF DATE,
 4315                %(LVL+2) MM CHAR(2) UNAL,
 4316                %(LVL+2) * CHAR(1) UNAL,
 4317                %(LVL+2) DD CHAR(2) UNAL,
 4318                %(LVL+2) * CHAR(1) UNAL,
 4319                %(LVL+2) YY CHAR(2) UNAL LAST
 4320                          /*K* DATE - CHAR(8).
 4321                          Contains the last modification date in the format:
 4322
 4323                          mm/dd/yy
 4324                          */
 4325      %MEND;
 4326
 4327
 4328
 4329
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          118  
 4330
 4331                                    /**********************************/
 4332                                    /*     M$DRIBBLE                              */
 4333                                    /*     Available for CP6 only                 */
 4334                                    /**********************************/
 4335
 4336
 4337                /*F* NAME: M$DRIBBLE - Control Recording of Terminal Interactions.
 4338
 4339
 4340           The M$DRIBBLE service is used to initiate or terminate the recording of
 4341           information read or written to the user's terminal on a file or
 4342           device assigned to the M$DRIBBLE M$DR.
 4343
 4344
 4345           The form of the call for this service is as follows:
 4346
 4347           CALL M$DRIBBLE (FPT_DRIBBLE) [ALTRET (label)];
 4348
 4349           The parameters for the service are as follows:
 4350           */
 4351      %MACRO FPT_DRIBBLE (FPTN=FPT_DRIBBLE,
 4352                 DRIBBLE(YES='1'B,NO='0'B)='1'B,
 4353                 STCLASS=STATIC);
 4354       %LSET LISTDIR='0'B;
 4355       %LSET LISTEXP='1'B;
 4356       %LSET LISTCOM='0'B;
 4357       %LSET LISTSUB='1'B;
 4358      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 4359      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 4360      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 4361      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 4362
 4363                                    /**/
 4364      DCL 1 FPTN STCLASS,
 4365            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 4366            2 V DALIGNED,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          119  
 4367              3 DRIBBLE# BIT(1) UNAL %INIT(DRIBBLE)%EINIT;
 4368                     /*K* DRIBBLE = {YES|NO} YES specifies that all records read or
 4369                          written to the user's terminal are also to be written to
 4370                          the file. NO specifies that the dribble file is to be
 4371                          closed and output discontinued.
 4372                          The default is YES.
 4373                     */
 4374      %MEND;
 4375                          /*F* NAME: M$DCLFLD - Declare a Field.
 4376
 4377                          The M$DCLFLD service is used to declare a field
 4378                          on a given virtual device.  The user specifies
 4379                          the location of the field, initializing text if
 4380                          there is any, and field attributes.
 4381
 4382                          A field is one or more contiguous positions on a
 4383                          line.  Field declarations must not overlap one
 4384                          another.
 4385
 4386                          The form of the call is as follows:
 4387
 4388                          CALL M$DCLFLD (FPT_DCLFLD) [ALTRET (label)];
 4389
 4390                          Parameters for the M$DCLFLD service are as
 4391                          follows:
 4392                          */
 4393
 4394      %MACRO FPT_DCLFLD (FPTN=FPT_DCLFLD,
 4395                         BUF=NIL,
 4396                         DCB=NIL,
 4397                         STATION=NIL,
 4398                         FLDATR=NIL,
 4399                         LIN=0,
 4400                         CLM=0,
 4401                         WDT=0,
 4402                         ID=0,
 4403                         RRR(YES='1'B,NO='0'B)='0'B,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          120  
 4404                         VECTORS(YES='1'B,NO='0'B)='1'B,
 4405                         STCLASS=STATIC,
 4406                         %ALGN=);
 4407
 4408      /*!* V Y */
 4409      %LSET LISTDIR='0'B;
 4410      %LSET LISTEXP='1'B;
 4411      %LSET L6=BITBIN(MODE_FEP);
 4412      %LSET ALG=TEXTCHAR(ALGN);
 4413      %IF ALG = '';
 4414       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 4415      %ENDIF;
 4416      %LSET ALG=CHARTEXT(ALG);
 4417      /*!* V N */
 4418      %LSET LISTCOM='0'B;
 4419      %LSET LISTSUB='1'B;
 4420      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 4421      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 4422      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 4423      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 4424      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 4425
 4426
 4427      DCL 1 FPTN STCLASS %ALG,
 4428      %IF VECTORS;
 4429            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 4430      %IF L6=0;
 4431            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 4432                          /*K* STATION = VARIABLE    locates an area containing~F
 4433                          the name of the station to which this service is
 4434                          to be applied when used on COMGROUPs.  If the DCB
 4435                          specified is assigned to a comgroup this parameter
 4436                          may be specified;  if not it is ignored.  The
 4437                          VLP_STATION macro is used to generate the
 4438                          station name.
 4439                          The default is NIL.
 4440                                                                                   */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          121  
 4441      %ENDIF;
 4442            2 BUF_ VECTOR %INIT(VECTOR(BUF))%EINIT,
 4443                          /*K* BUF = VARIABLE  locates a buffer which may
 4444                          contain initializing text for the field.  The
 4445                          default is NIL.                                         */
 4446            2 FLDATR_ VECTOR %INIT(VECTOR(FLDATR))%EINIT,
 4447                          /*K* FLDATR = VARIABLE  Locates a VLP_FLDATR area,
 4448                          which specifies the attributes of the field being
 4449                          defined.
 4450                          */
 4451      %ENDIF;
 4452            2 V %ALG,
 4453              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 4454                          /*K* DCB = DCBNAME     specifies the name of the DCB
 4455                          associated with the device.  The DCB must have
 4456                          ORG=FORM and be
 4457                          assigned to a timesharing terminal device.
 4458
 4459                          DCB must be specified.
 4460                          */
 4461      /*!* V Y */
 4462      %IF NOT(MODE_FEP);
 4463              3 * UBIN BYTE CALIGNED %INIT(0)%EINIT,
 4464      %ENDIF;
 4465              3 DVBYTE,
 4466                          /*B* DVBYTE. (Usually set at lower level BIT(9)).
 4467                          Specifies the format of the record being written        */
 4468      %IF NOT(MODE_FEP);
 4469                4 TOP BIT(1) UNAL %INIT('0'B)%EINIT,
 4470      %ENDIF;
 4471      /*!* V N */
 4472                4 BP BIT(1) UNAL %INIT('0'B)%EINIT,
 4473                4 VFC BIT(1) UNAL %INIT('0'B)%EINIT,
 4474                4 BIN BIT(1) UNAL %INIT('0'B)%EINIT,
 4475
 4476                4 TRANS BIT(1) UNAL %INIT('0'B)%EINIT,
 4477                4 %CHARTEXT('RRR')%L6# BIT(1) UNAL %INIT(RRR)%EINIT,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          122  
 4478                          /*K* RRR = {YES|NO} YES specifies Return Receipt Request.
 4479                          This option specifies that the function is not complete
 4480                          until it reaches its destination correctly.  Functions
 4481                          to a user terminal are normally considered complete
 4482                          when the data leaves the user buffer.  There is no
 4483                          way to know if the data reached the terminal correctly
 4484                          or if any errors occurred performing the function.
 4485                          If RRR is set, the function is not considered complete
 4486                          until the data reaches the terminal and any error
 4487                          status has been returned.
 4488
 4489                          RRR=YES should be used only for debugging, as it
 4490                          greatly reduces processing speed since a response
 4491                          is required whether an error occurs or not.
 4492                          Without RRR, any field-oriented error is reported
 4493                          on the next M$READ or other service request with
 4494                          RRR specified.  Only M$READ is capable of
 4495                          returning an error code by ALTRETurning unless the
 4496                          RRR option is used.
 4497                          */
 4498                4 NODAT BIT(1) UNAL %INIT('0'B)%EINIT,
 4499                4 * BIT(1) UNAL %INIT('0'B)%EINIT,
 4500                4 CONT BIT(1) UNAL %INIT('0'B)%EINIT,
 4501              3 %CHARTEXT ('LIN')%L6# UBIN(%(18-L6*2)) UNAL %INIT(LIN)%EINIT,
 4502                          /*K* LIN = VALUE-DEC(1-254) specifies the line
 4503                          within the virtual device that the field is to
 4504                          be placed on.                                           */
 4505              3 %CHARTEXT ('CLM')%L6# UBIN(%(18-L6*2)) UNAL %INIT(CLM)%EINIT,
 4506                          /*K* CLM = VALUE-DEC(1-254) specifies the column
 4507                          that the field begins in, within the given virtual
 4508                          device.                                                 */
 4509              3 %CHARTEXT('ID')%L6# UBIN(%(18-L6*2)) %INIT(ID)%EINIT UNAL,
 4510                     /*K* ID = VALUE-DEC(0-65535) specifies a field identifier to
 4511                     be used when referencing this field.                         */
 4512              3 %CHARTEXT ('WDT')%L6# UBIN(%(18-L6*10)) UNAL %INIT(WDT)%EINIT,
 4513                          /*K* WDT = VALUE-DEC(1-254) specifies the width
 4514                          (number of columns) that the field will occupy
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          123  
 4515                          within the virtual device.                              */
 4516
 4517              3 * BIT(%(36-L6*28)) UNAL %INIT('0'B)%EINIT;
 4518      %MEND;
 4519                          /*F* NAME: VLP_FLDATR
 4520
 4521                          The VLP_FLDATR macro describes the graphic
 4522                          rendition and input qualification attributes
 4523                          of a field in a virtual device.
 4524
 4525                          At compile time, the graphic rendition for the
 4526                          field may be initialized abstractly by specifying
 4527                          ABSGRPRND (e.g., ABSGRPRND = EMPHASIS), or
 4528                          directly by specifying ABSGRPRND = NONE (the default)
 4529                          and specifying individual graphic rendition items
 4530                          (e.g., UNDSCR = YES, SLWBLN = YES).
 4531
 4532                          At run time, the graphic rendition may be
 4533                          manipulated abstractly by setting VLP_FLDATR.ABSGRPRND
 4534                          to the proper abstract graphic rendition value.
 4535                          Or it may be manipulated directly by setting and
 4536                          resetting the items subordinate to VLP_FLDATR.GRPRND
 4537                          (e.g., VLP_FLDATR.GRPRND.UNDSCR = '1'B).
 4538                          Or all the graphic renditions may be manipulated
 4539                          directly and simultaneously by assigning the
 4540                          proper bit string to VLP_FLDATR.GRPRND
 4541                (e.g., VLP_FLDATR.GRPRND = %G#GRPRND_UNDSCR | %G#GRPRND_SLWBLN).
 4542                The G#GRPRND_... items are defined by the
 4543                G#GRPRND_E macro.
 4544
 4545                The input qualification items may be initialized
 4546                at compile or run time.  At run time, individual qualifications
 4547                may be manipulated by setting and resetting the
 4548                items subordinate to VLP_FLDATR.QLF
 4549                (e.g., VLP_FLDATR.QLF.ACPNMR = '1'B), or all
 4550                qualifications may be manipulated simultaneously
 4551                by assigning the proper bit string to
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          124  
 4552                VLP_FLDATR.QLF
 4553                (e.g., VLP_FLDATR.QLF = %G#QLF_ACPNMR | %G#QLF_ACPALP).
 4554                The G#QLF_... items are defined by the G#QLF_E
 4555                macro.
 4556                Parameters are as described below.
 4557                */
 4558
 4559      %MACRO VLP_FLDATR (FPTN=VLP_FLDATR,
 4560                         ABSGRPRND(
 4561                           NONE=0,
 4562                           NULL=1,
 4563                           HIDDEN=2,
 4564                           EMPHASIS=3,
 4565                           INPUT=4,
 4566                           OUTPUT=5,
 4567                           ERROR=6,
 4568                           WARNING=7)=0,
 4569                         HDN(YES='1'B,NO='0'B)='0'B,
 4570                         INCINT(YES='1'B,NO='0'B)='0'B,
 4571                         DCRINT(YES='1'B,NO='0'B)='0'B,
 4572                         UNDSCR(YES='1'B,NO='0'B)='0'B,
 4573                         SLWBLN(YES='1'B,NO='0'B)='0'B,
 4574                         FSTBLN(YES='1'B,NO='0'B)='0'B,
 4575                         RVRVID(YES='1'B,NO='0'B)='0'B,
 4576                         ACPALL(YES='1'B,NO='0'B)='0'B,
 4577                         PRTGRD(YES='1'B,NO='0'B)='0'B,
 4578                         ACPGRP(YES='1'B,NO='0'B)='0'B,
 4579                         ACPNMR(YES='1'B,NO='0'B)='0'B,
 4580                         ACPALP(YES='1'B,NO='0'B)='0'B,
 4581                         PRT(YES='1'B,NO='0'B)='0'B,
 4582                         MSTENT(YES='1'B,NO='0'B)='0'B,
 4583                         CNS(YES='1'B,NO='0'B)='0'B,
 4584                         %ALGN=,
 4585                         STCLASS=STATIC);
 4586
 4587      /*!* V Y */
 4588      %LSET LISTDIR='0'B;
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          125  
 4589      %LSET LISTEXP='1'B;
 4590      %LSET L6=BITBIN(MODE_FEP);
 4591      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 4592      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 4593      %LSET FIL3=CHARTEXT (CONCAT (SUBSTR ('3 * BIT(1)INIT(''0''B)',0,(1-L6)*(10+S#*5)),SUBSTR (',',L6)));
 4594      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 4595      %LSET ALG=TEXTCHAR(ALGN);
 4596      %IF ALG = '';
 4597       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 4598      %ENDIF;
 4599      %LSET ALG=CHARTEXT(ALG);
 4600      /*!* V N */
 4601      %LSET LISTCOM='0'B;
 4602      %LSET LISTSUB='1'B;
 4603      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 4604      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 4605
 4606      DCL 1 FPTN STCLASS %ALG,
 4607            2 GRPRND,
 4608              3 * BIT(1) UNAL %INIT('0'B)%EINIT, /* ABSGRPRND flag                */
 4609              3 %CHARTEXT ('HDN')%L6# BIT(1) UNAL %INIT(HDN)%EINIT,
 4610                          /*K* HDN = {YES|NO} specifies whether or not
 4611                          the field is to be hidden (not displayed).              */
 4612              3 %CHARTEXT ('INCINT')%L6# BIT(1) UNAL %INIT(INCINT)%EINIT,
 4613                          /*K* INCINT = {YES|NO} specifies whether or not
 4614                          the field is to be displayed with increased intensity.  */
 4615              3 %CHARTEXT ('DCRINT')%L6# BIT(1) UNAL %INIT(DCRINT)%EINIT,
 4616                          /*K* DCRINT = {YES|NO} specifies whether or not
 4617                          the field is to be displayed with decreased intensity.  */
 4618              3 %CHARTEXT ('UNDSCR')%L6# BIT(1) UNAL %INIT(UNDSCR)%EINIT,
 4619                          /*K* UNDSCR = {YES|NO} specifies whether or not
 4620                          the field is to be displayed with underscoring.         */
 4621              3 %CHARTEXT ('SLWBLN')%L6# BIT(1) UNAL %INIT(SLWBLN)%EINIT,
 4622                          /*K* SLWBLN = {YES|NO} specifies whether or not
 4623                          the field is to be displayed with slow blinking.        */
 4624              3 %CHARTEXT ('FSTBLN')%L6# BIT(1) UNAL %INIT(FSTBLN)%EINIT,
 4625                          /*K* FSTBLN = {YES|NO} specifies whether or not
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          126  
 4626                          the field is to be displayed with fast blinking.        */
 4627              3 %CHARTEXT ('RVRVID')%L6# BIT(1) UNAL %INIT(RVRVID)%EINIT,
 4628                          /*K* RVRVID = {YES|NO} specifies whether or not
 4629                          the field is to be displayed with reverse video.        */
 4630              3 * BIT(8) UNAL %INIT('0'B)%EINIT, /* Reserved for expansion of GRPRND */
 4631              %FIL3 %FIL3
 4632            2 QLF,
 4633              3 %CHARTEXT ('ACPALL')%L6# BIT(1) UNAL %INIT(ACPALL)%EINIT,
 4634                          /*K* ACPALL = {YES|NO} specifies whether or not
 4635                          to allow the input of all characters into this field.   */
 4636              3 %CHARTEXT ('PRTGRD')%L6# BIT(1) UNAL %INIT(PRTGRD)%EINIT,
 4637                          /*K* PRTGRD = {YES|NO} specifies whether or not
 4638                          to protect and guard this field.  (The "guard"
 4639                          feature is not currently implemented.)  Data cannot be
 4640                          input into a field that is protected.                   */
 4641              3 %CHARTEXT ('ACPGRP')%L6# BIT(1) UNAL %INIT(ACPGRP)%EINIT,
 4642                          /*K* ACPGRP = {YES|NO} specifies whether or not
 4643                     to allow the input of graphic characters into this field.    */
 4644              3 %CHARTEXT ('ACPNMR')%L6# BIT(1) UNAL %INIT(ACPNMR)%EINIT,
 4645                          /*K* ACPNMR = {YES|NO} specifies whether or not
 4646                     to allow the input of numeric characters into this field.    */
 4647              3 %CHARTEXT ('ACPALP')%L6# BIT(1) UNAL %INIT(ACPALP)%EINIT,
 4648                          /*K* ACPALP = {YES|NO} specifies whether or not
 4649                     to allow the input of alphabetic characters into this field. */
 4650              3 %CHARTEXT ('PRT')%L6# BIT(1) UNAL %INIT(PRT)%EINIT,
 4651                          /*K* PRT = {YES|NO} specifies whether or not
 4652                          to protect this field.  Data cannot be input into
 4653                          a field that is protected.  (Also see the PRT
 4654                          option of M$ERASE.)                                     */
 4655              3 %CHARTEXT ('MSTENT')%L6# BIT(1) UNAL %INIT(MSTENT)%EINIT,
 4656                          /*K* MSTENT = {YES|NO} specifies whether or not
 4657                          data must be input into this field.                     */
 4658              3 %CHARTEXT ('CNS')%L6# BIT(1) UNAL %INIT(CNS)%EINIT,
 4659                          /*K* CNS = {YES|NO} specifies whether this
 4660                          field is constant.  YES means don't erase this
 4661                          field unless the erase function
 4662                          explicitly declares that constant
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          127  
 4663                          fields are to be erased.  (See the CNS option of
 4664                          M$ERASE.)
 4665                          Constant fields are implicitly
 4666                          protected, to a greater extent
 4667                          than fields that are only 'protected'.                  */
 4668              3 * BIT(8) UNAL %INIT('0'B)%EINIT, /* Reserved for expansion of QLF */
 4669              %FIL3 %FIL3
 4670            2 %CHARTEXT('ABSGRPRND')%L6# UBIN BYTE UNAL %INIT(ABSGRPRND)%EINIT,
 4671                          /*K* ABSGRPRND = {NONE | NULL | HIDDEN | EMPHASIS |
 4672                          INPUT | OUTPUT | ERROR | WARNING} specifies the
 4673                          abstract graphic rendition to be applied to this
 4674                          field.  The corresponding graphic rendition set
 4675                          is determined by the device's profile.
 4676                          NONE (the default) indicates the graphic rendition
 4677                          is not specified abstractly, but by the GRPRND
 4678                          item and its subordinate definitions.                   */
 4679            2 * UBIN(%(27-L6*19)) UNAL %INIT(0)%EINIT;
 4680      %MEND;
 4681
 4682
 4683
 4684                                    /********************************/
 4685                                    /*  M$MDFFLD- Modify a field                  */
 4686                                    /********************************/
 4687
 4688
 4689                          /*F* NAME: M$MDFFLD - Modify a Field.
 4690
 4691                          The M$MDFFLD service is used to modify  a field
 4692                          on a given virtual device.  The user specifies
 4693                     a key defining the location of the field, initializing text
 4694                     if there is any, and field attributes(optionally).
 4695                     If no key is specified, all fields selected by the
 4696                     M$SLCFLD service are modified.
 4697
 4698                     The form of the call is as follows:
 4699
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          128  
 4700                     CALL M$MDFFLD (FPT_MDFFLD) [ALTRET (label)];
 4701
 4702                     Parameters for the M$MDFFLD service are as
 4703                     follows:
 4704                     */
 4705
 4706      %MACRO FPT_MDFFLD (FPTN=FPT_MDFFLD,
 4707                         BUF=NIL,
 4708                         DCB=NIL,
 4709                         STATION=NIL,
 4710                         FLDATR=NIL,
 4711                         KEY=NIL,
 4712                         SETGRPRND(YES='1'B,NO='0'B)='0'B,
 4713                         SETQLF(YES='1'B,NO='0'B)='0'B,
 4714                         RRR(YES='1'B,NO='0'B)='0'B,
 4715                         KEYTYPE(NONE=0,FLDID=1,COORD=2)=0,
 4716                         VECTORS(YES='1'B,NO='0'B)='1'B,
 4717                         STCLASS=STATIC,
 4718                         %ALGN=);
 4719
 4720      /*!* V Y */
 4721      %LSET LISTDIR='0'B;
 4722      %LSET LISTEXP='1'B;
 4723      %LSET L6=BITBIN(MODE_FEP);
 4724      %LSET ALG=TEXTCHAR(ALGN);
 4725      %IF ALG = '';
 4726       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 4727      %ENDIF;
 4728      %LSET ALG=CHARTEXT(ALG);
 4729      /*!* V N */
 4730      %LSET LISTCOM='0'B;
 4731      %LSET LISTSUB='1'B;
 4732      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 4733      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 4734      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 4735      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 4736      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          129  
 4737
 4738
 4739      DCL 1 FPTN STCLASS %ALG,
 4740      %IF VECTORS;
 4741            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 4742      %IF L6=0;
 4743            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 4744                          /*K* STATION = VARIABLE    locates an area containing~F
 4745                          the name of the station to which this service is
 4746                          to be applied when used on COMGROUPs.  If the DCB
 4747                          specified is assigned to a comgroup this parameter
 4748                          may be specified;  if not it is ignored.  The
 4749                          VLP_STATION macro is used to generate the
 4750                          station name.
 4751                          The default is NIL.
 4752                                                                                   */
 4753      %ENDIF;
 4754            2 BUF_ VECTOR %INIT(VECTOR(BUF))%EINIT,
 4755                          /*K* BUF = VARIABLE locates a buffer which may
 4756                          contain initializing text for the field.  The
 4757                          default is NIL.                                         */
 4758            2 KEY_ VECTOR %INIT(VECTOR(KEY))%EINIT,
 4759                          /*K* KEY = VARIABLE  locates an optional area
 4760                          (18 bits long and defined as CALIGNED)    ~F
 4761                          containing a key to identify which field is to
 4762                          be modified.  If no key is specified, all selected
 4763                          fields are modified.                                    */
 4764            2 FLDATR_ VECTOR %INIT(VECTOR(FLDATR))%EINIT,
 4765                          /*K* FLDATR = VARIABLE locates a VLP_FLDATR area,
 4766                          which specifies the attributes of the field being
 4767                          defined.  The FLDATR parameter is required.
 4768                          */
 4769      %ENDIF;
 4770            2 V %ALG,
 4771              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 4772                          /*K* DCB = DCBNAME
 4773                          .xeq KI_CP6_C M$DCLFLD DCB
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          130  
 4774                          */
 4775              3 * BIT(%(18-L6*10)) UNAL %INIT('0'B)%EINIT,
 4776              3 DVBYTE,
 4777                          /*B* DVBYTE. (Usually set at lower level BIT(9)).
 4778                          Specifies the format of the record being written        */
 4779      /*!* V Y */
 4780      %IF NOT(MODE_FEP);
 4781                4 TOP BIT(1) UNAL %INIT('0'B)%EINIT,
 4782      %ENDIF;
 4783      /*!* V N */
 4784                4 BP BIT(1) UNAL %INIT('0'B)%EINIT,
 4785                4 VFC BIT(1) UNAL %INIT('0'B)%EINIT,
 4786                4 BIN BIT(1) UNAL %INIT('0'B)%EINIT,
 4787
 4788                4 TRANS BIT(1) UNAL %INIT('0'B)%EINIT,
 4789                4 %CHARTEXT('RRR')%L6# BIT(1) UNAL %INIT(RRR)%EINIT,
 4790                          /*K* RRR = {YES|NO} YES specifies Return Receipt Request.
 4791                          .xeq KI_CP6_C M$DCLFLD RRR
 4792                          */
 4793                4 NODAT BIT(1) UNAL %INIT('0'B)%EINIT,
 4794                4 * BIT(1) UNAL %INIT('0'B)%EINIT,
 4795                4 CONT BIT(1) UNAL %INIT('0'B)%EINIT,
 4796              3 %CHARTEXT('KEYTYPE')%L6# UBIN BYTE CALIGNED %INIT(KEYTYPE)%EINIT,
 4797                          /*K* KEYTYPE = {COORD|FLDID|NONE}
 4798                          Specifies the keytype to be used on this function.
 4799
 4800                          FLDID refers to a field identifier (i.e.,
 4801                          FPT_DCLFLD.V.ID, a byte-aligned 2-byte value).
 4802
 4803                          COORD refers to the coordinates of a field (i.e.,
 4804                          a byte-aligned, 2-byte structure consisting of the
 4805                          line and column of the field's location).
 4806                          */
 4807              3 %CHARTEXT ('SETGRPRND')%L6# BIT(1) UNAL %INIT(SETGRPRND)%EINIT,
 4808                          /*K* SETGRPRND = {YES|NO} specifies whether
 4809                          or not the field's graphic rendition is to be changed.  */
 4810              3 %CHARTEXT ('SETQLF')%L6# BIT(1) UNAL %INIT(SETQLF)%EINIT,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          131  
 4811                          /*K* SETQLF = {YES|NO} specifies whether or not
 4812                          the field's qualification attributes are to change.     */
 4813              3 * UBIN(%(16-L6*2)) UNAL %INIT(0)%EINIT;
 4814
 4815      %MEND;
 4816
 4817
 4818
 4819                                    /********************************/
 4820                                    /*  M$SLCFLD- Select a field                  */
 4821                                    /********************************/
 4822
 4823
 4824                          /*F* NAME: M$SLCFLD - Select a Field for Modification
 4825
 4826                          The M$SLCFLD service is used to select a field for
 4827                          future modification by other field related services.
 4828                          All fields on a form can be selected by omitting
 4829                          the key on M$SLCFLD.  Or a series of fields can be
 4830                          selected by issuing successive calls to M$SLCFLD
 4831                          specifying the key for each field.  M$SLCFLD adds
 4832                          to the set of currently selected fields, if the
 4833                          previous operation was M$SLCFLD.  (If the previous
 4834                          operation was not M$SLCFLD, the current M$SLCFLD
 4835                          replaces any previously selected fields with the
 4836                          field(s) indicated on this call.)
 4837                          .spf
 4838                          Note:  The specification of a key for any
 4839                          of the services for which selected fields are
 4840                          required (M$READ, M$WRITE, M$ERASE, M$MDFFLD,
 4841                          M$RLSFLD) is considered to be an implicit M$SLCFLD
 4842                          operation, thereby adding to the fields selected
 4843                          by any immediately preceding M$SLCFLD operations.
 4844
 4845                          In the case of M$READ and M$ERASE, only those
 4846                          fields that are both selected and otherwise valid
 4847                          for the operation are actually affected.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          132  
 4848                          In the previous sentence, "valid" depends on the
 4849                          setting of CNS, PRT, and PRTGRD for the field (see
 4850                          VLP_FLDATR) and the setting of CNS and PRT for
 4851                          M$ERASE.
 4852
 4853                          The form of the call is as follows:
 4854
 4855                          CALL M$SLCFLD (FPT_SCLFLD) [ALTRET (label)];
 4856
 4857                          Parameters for the M$SLCFLD service are as
 4858                          follows:
 4859                          */
 4860
 4861      %MACRO FPT_SLCFLD (FPTN=FPT_SLCFLD,
 4862                         STATION=NIL,
 4863                         KEY=NIL,
 4864                         DCB=NIL,
 4865                         RRR(YES='1'B,NO='0'B)='0'B,
 4866                         KEYTYPE(NONE=0,FLDID=1,COORD=2)=0,
 4867                         VECTORS(YES='1'B,NO='0'B)='1'B,
 4868                         STCLASS=STATIC,
 4869                         %ALGN=);
 4870
 4871      /*!* V Y */
 4872      %LSET LISTDIR='0'B;
 4873      %LSET LISTEXP='1'B;
 4874      %LSET L6=BITBIN(MODE_FEP);
 4875      %LSET ALG=TEXTCHAR(ALGN);
 4876      %IF ALG = '';
 4877       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 4878      %ENDIF;
 4879      %LSET ALG=CHARTEXT(ALG);
 4880      /*!* V N */
 4881      %LSET LISTCOM='0'B;
 4882      %LSET LISTSUB='1'B;
 4883      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 4884      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          133  
 4885      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 4886      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 4887      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 4888
 4889
 4890      DCL 1 FPTN STCLASS %ALG,
 4891      %IF VECTORS;
 4892            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 4893      %IF L6=0;
 4894            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 4895                          /*K* STATION = VARIABLE    locates an area containing~F
 4896                          the name of the station to which this service is
 4897                          to be applied when used on COMGROUPs.  If the DCB
 4898                          specified is assigned to a comgroup this parameter
 4899                          may be specified;  if not it is ignored.  The
 4900                          VLP_STATION macro is used to generate the
 4901                          station name.
 4902                          The default is NIL.
 4903                                                                                   */
 4904      %ENDIF;
 4905            2 KEY_ VECTOR %INIT(VECTOR(KEY))%EINIT,
 4906                          /*K* KEY = VARIABLE  locates an optional area
 4907                          (18 bits long and defined as CALIGNED)    ~F
 4908                          containing a key to identify which field is to
 4909                          be selected.  If no key is specified, all fields in
 4910                          the given virtual device will become selected.          */
 4911      %ENDIF;
 4912            2 V %ALG,
 4913              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 4914                          /*K* DCB = DCBNAME
 4915                          .xeq KI_CP6_C M$DCLFLD DCB
 4916                          */
 4917              3 DVBYTE,
 4918                          /*B* DVBYTE. (Usually set at lower level BIT(9)).
 4919                          Specifies the format of the record being written        */
 4920      /*!* V Y */
 4921      %IF NOT(MODE_FEP);
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          134  
 4922                4 TOP BIT(1) UNAL %INIT('0'B)%EINIT,
 4923      %ENDIF;
 4924      /*!* V N */
 4925                4 BP BIT(1) UNAL %INIT('0'B)%EINIT,
 4926                4 VFC BIT(1) UNAL %INIT('0'B)%EINIT,
 4927                4 BIN BIT(1) UNAL %INIT('0'B)%EINIT,
 4928
 4929                4 TRANS BIT(1) UNAL %INIT('0'B)%EINIT,
 4930                4 %CHARTEXT('RRR')%L6# BIT(1) UNAL %INIT(RRR)%EINIT,
 4931                          /*K* RRR = {YES|NO} YES specifies Return Receipt Request.
 4932                          .xeq KI_CP6_C M$DCLFLD RRR
 4933                          */
 4934                4 NODAT BIT(1) UNAL %INIT('0'B)%EINIT,
 4935                4 * BIT(1) UNAL %INIT('0'B)%EINIT,
 4936                4 CONT BIT(1) UNAL %INIT('0'B)%EINIT,
 4937              3 %CHARTEXT('KEYTYPE')%L6# UBIN BYTE CALIGNED %INIT(KEYTYPE)%EINIT,
 4938                          /*K* KEYTYPE = {COORD|FLDID|NONE} specifies the keytype
 4939                          to be used on this function.
 4940                          .xeq KI_CP6_C M$MDFFLD KEYTYPE
 4941                          */
 4942              3 * BIT(%(36-L6*28)) UNAL %INIT('0'B)%EINIT;
 4943      %MEND;
 4944
 4945
 4946                                    /********************************/
 4947                                    /*  M$RLSFLD- Release a field                 */
 4948                                    /********************************/
 4949
 4950
 4951                          /*F* NAME: M$RLSFLD - Release a Field.
 4952
 4953                          The M$RLSFLD service is used to delete a
 4954                          previously defined field within a given form.
 4955                          If no key is
 4956                          specified, all selected fields are released.
 4957
 4958                          The form of the call is as follows:
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          135  
 4959
 4960                          CALL M$RLSFLD (FPT_RLSFLD) [ALTRET (label)];
 4961
 4962                          Parameters for the M$RLSFLD service are as
 4963                          follows:
 4964                          */
 4965
 4966      %MACRO FPT_RLSFLD (FPTN=FPT_RLSFLD,
 4967                         STATION=NIL,
 4968                         KEY=NIL,
 4969                         DCB=NIL,
 4970                         RRR(YES='1'B,NO='0'B)='0'B,
 4971                         KEYTYPE(NONE=0,FLDID=1,COORD=2)=0,
 4972                         VECTORS(YES='1'B,NO='0'B)='1'B,
 4973                         STCLASS=STATIC,
 4974                         %ALGN=);
 4975
 4976      /*!* V Y */
 4977      %LSET LISTDIR='0'B;
 4978      %LSET LISTEXP='1'B;
 4979      %LSET L6=BITBIN(MODE_FEP);
 4980      %LSET ALG=TEXTCHAR(ALGN);
 4981      %IF ALG = '';
 4982       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 4983      %ENDIF;
 4984      %LSET ALG=CHARTEXT(ALG);
 4985      /*!* V N */
 4986      %LSET LISTCOM='0'B;
 4987      %LSET LISTSUB='1'B;
 4988      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 4989      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 4990      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 4991      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 4992      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 4993
 4994
 4995      DCL 1 FPTN STCLASS %ALG,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          136  
 4996      %IF VECTORS;
 4997            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 4998      %IF L6=0;
 4999            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 5000                          /*K* STATION = VARIABLE    locates an area containing~F
 5001                          the name of the station to which this service is
 5002                          to be applied when used on COMGROUPs.  If the DCB
 5003                          specified is assigned to a comgroup this parameter
 5004                          may be specified;  if not it is ignored.  The
 5005                          VLP_STATION macro is used to generate the
 5006                          station name.
 5007                          The default is NIL.
 5008                                                                                   */
 5009      %ENDIF;
 5010            2 KEY_ VECTOR %INIT(VECTOR(KEY))%EINIT,
 5011                          /*K* KEY = VARIABLE  locates an optional area
 5012                          (18 bits long and defined as CALIGNED)    ~F
 5013                          containing a key to identify which field is to
 5014                          be released.  If no key is specified, all selected
 5015                          fields are released.                                    */
 5016      %ENDIF;
 5017            2 V %ALG,
 5018              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 5019                          /*K* DCB = DCBNAME
 5020                          .xeq KI_CP6_C M$DCLFLD DCB
 5021                          */
 5022              3 DVBYTE,
 5023                          /*B* DVBYTE. (Usually set at lower level BIT(9)).
 5024                          Specifies the format of the record being written        */
 5025      /*!* V Y */
 5026      %IF NOT(MODE_FEP);
 5027                4 TOP BIT(1) UNAL %INIT('0'B)%EINIT,
 5028      %ENDIF;
 5029      /*!* V N */
 5030                4 BP BIT(1) UNAL %INIT('0'B)%EINIT,
 5031                4 VFC BIT(1) UNAL %INIT('0'B)%EINIT,
 5032                4 BIN BIT(1) UNAL %INIT('0'B)%EINIT,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          137  
 5033
 5034                4 TRANS BIT(1) UNAL %INIT('0'B)%EINIT,
 5035                4 %CHARTEXT('RRR')%L6# BIT(1) UNAL %INIT(RRR)%EINIT,
 5036                          /*K* RRR = {YES|NO} YES specifies Return Receipt Request.
 5037                          .xeq KI_CP6_C M$DCLFLD RRR
 5038                          */
 5039                4 NODAT BIT(1) UNAL %INIT('0'B)%EINIT,
 5040                4 * BIT(1) UNAL %INIT('0'B)%EINIT,
 5041                4 CONT BIT(1) UNAL %INIT('0'B)%EINIT,
 5042              3 %CHARTEXT('KEYTYPE')%L6# UBIN BYTE CALIGNED %INIT(KEYTYPE)%EINIT,
 5043                          /*K* KEYTYPE = {COORD|FLDID|NONE} specifies the keytype
 5044                          to be used on this function.
 5045                          .xeq KI_CP6_C M$MDFFLD KEYTYPE
 5046                          */
 5047              3 * BIT(%(36-L6*28)) UNAL %INIT('0'B)%EINIT;
 5048      %MEND;
 5049
 5050
 5051
 5052                                    /********************************/
 5053                                    /*  M$ERASE- Erase a field                    */
 5054                                    /********************************/
 5055
 5056
 5057                          /*F* NAME: M$ERASE - Erase Fields or Records
 5058
 5059                          For a DCB opened with ORG = FORM, the M$ERASE
 5060                          service is used to erase the selected field(s).
 5061                          If no key is specified, all selected fields will
 5062                          be erased, subject to the PRT and CNS options.
 5063
 5064                          For a DCB opened with ORG = SE, the M$ERASE
 5065                          service is used to remove all records from the
 5066                          FEP cache.
 5067
 5068                          The form of the call is as follows:
 5069
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          138  
 5070                          CALL M$ERASE (FPT_ERASE) [ALTRET (label)];
 5071
 5072                          Parameters for the M$ERASE service are as
 5073                          follows:
 5074                          */
 5075
 5076      %MACRO FPT_ERASE (FPTN=FPT_ERASE,
 5077                         STATION=NIL,
 5078                         KEY=NIL,
 5079                         DCB=NIL,
 5080                         RRR(YES='1'B,NO='0'B)='0'B,
 5081                         KEYTYPE(NONE=0,FLDID=1,COORD=2)=0,
 5082                         PRT(YES='1'B,NO='0'B)='0'B,
 5083                         CNS(YES='1'B,NO='0'B)='0'B,
 5084                         VECTORS(YES='1'B,NO='0'B)='1'B,
 5085                         STCLASS=STATIC,
 5086                         %ALGN=);
 5087
 5088      /*!* V Y */
 5089      %LSET LISTDIR='0'B;
 5090      %LSET LISTEXP='1'B;
 5091      %LSET L6=BITBIN(MODE_FEP);
 5092      %LSET ALG=TEXTCHAR(ALGN);
 5093      %IF ALG = '';
 5094       %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
 5095      %ENDIF;
 5096      %LSET ALG=CHARTEXT(ALG);
 5097      /*!* V N */
 5098      %LSET LISTCOM='0'B;
 5099      %LSET LISTSUB='1'B;
 5100      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 5101      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 5102      %LSET L6#=CHARTEXT(SUBSTR('#',L6));
 5103      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 5104      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 5105
 5106
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          139  
 5107      DCL 1 FPTN STCLASS %ALG,
 5108      %IF VECTORS;
 5109            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 5110      %IF L6=0;
 5111            2 STATION_ VECTOR %INIT(VECTOR(STATION))%EINIT,
 5112                          /*K* STATION = VARIABLE    locates an area containing~F
 5113                          the name of the station to which this service is
 5114                          to be applied when used on COMGROUPs.  If the DCB
 5115                          specified is assigned to a comgroup this parameter
 5116                          may be specified;  if not it is ignored.  The
 5117                          VLP_STATION macro is used to generate the
 5118                          station name.
 5119                          The default is NIL.
 5120                                                                                   */
 5121      %ENDIF;
 5122            2 KEY_ VECTOR %INIT(VECTOR(KEY))%EINIT,
 5123                          /*K* KEY = VARIABLE  locates an optional area
 5124                          (18 bits long and defined as CALIGNED)    ~F
 5125                          containing a key to identify which field is to
 5126                          be erased.  If no key is specified, all selected
 5127                          fields are erased.                                      */
 5128      %ENDIF;
 5129            2 V %ALG,
 5130              3 DCB# UBIN(%(18-L6*10)) UNAL %INIT(DCBNUM(DCB))%EINIT,
 5131                          /*K* DCB = DCBNAME
 5132                          .xeq KI_CP6_C M$DCLFLD DCB
 5133                          */
 5134              3 DVBYTE,
 5135                          /*B* DVBYTE. (Usually set at lower level BIT(9)).
 5136                          Specifies the format of the record being written        */
 5137      /*!* V Y */
 5138      %IF NOT(MODE_FEP);
 5139                4 TOP BIT(1) UNAL %INIT('0'B)%EINIT,
 5140      %ENDIF;
 5141      /*!* V N */
 5142                4 BP BIT(1) UNAL %INIT('0'B)%EINIT,
 5143                4 VFC BIT(1) UNAL %INIT('0'B)%EINIT,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          140  
 5144                4 BIN BIT(1) UNAL %INIT('0'B)%EINIT,
 5145
 5146                4 TRANS BIT(1) UNAL %INIT('0'B)%EINIT,
 5147                4 %CHARTEXT('RRR')%L6# BIT(1) UNAL %INIT(RRR)%EINIT,
 5148                          /*K* RRR = {YES|NO} YES specifies Return Receipt Request.
 5149                          .xeq KI_CP6_C M$DCLFLD RRR
 5150                          */
 5151                4 NODAT BIT(1) UNAL %INIT('0'B)%EINIT,
 5152                4 * BIT(1) UNAL %INIT('0'B)%EINIT,
 5153                4 CONT BIT(1) UNAL %INIT('0'B)%EINIT,
 5154              3 %CHARTEXT('KEYTYPE')%L6# UBIN BYTE CALIGNED %INIT(KEYTYPE)%EINIT,
 5155                          /*K* KEYTYPE = {COORD|FLDID|NONE} specifies the keytype
 5156                          to be used on this function.
 5157                          .xeq KI_CP6_C M$MDFFLD KEYTYPE
 5158                          */
 5159              3 * BIT(%(18-L6*10)) UNAL %INIT('0'B)%EINIT,
 5160              3 %CHARTEXT ('PRT')%L6# BIT(1) UNAL %INIT(PRT)%EINIT,
 5161                          /*K* PRT = {YES|NO} specifies whether or not
 5162                          protected fields are to be erased.  Erasing
 5163                          unprotected fields is implicit.                         */
 5164              3 %CHARTEXT ('CNS')%L6# BIT(1) UNAL %INIT(CNS)%EINIT,
 5165                          /*K* CNS = {YES|NO} specifies whether or not
 5166                          constant fields are to be erased.  Erasing
 5167                          unprotected fields is implicit.                         */
 5168              3 * BIT(%(16-L6*2)) UNAL %INIT('0'B)%EINIT;
 5169      %MEND;
 5170
 5171
 5172                                    /*****************************/
 5173                                    /*     M$GCHAN                                */
 5174                                    /*     Available in LCP6 only                 */
 5175                                    /*****************************/
 5176
 5177
 5178                          /*F* NAME:  M$GCHAN - Get a Channel.
 5179
 5180                          The M$GCHAN monitor service
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          141  
 5181                          allows the user (with TND privilege) to acquire an
 5182                     available channel, with specific resource type and attributes,
 5183                     to be used for I/O.  Additionally, the user may request
 5184                     the channel for diagnostic purposes (T&Ds) and/or
 5185                     request the entire controller (in the case of NMLC
 5186                or MLCP devices).  If a device of the appropriate characteristics
 5187                cannot be acquired, an appropriate error is returned.
 5188
 5189                The form of the call is as follows:
 5190
 5191                CALL M$GCHAN (FPT_GCHAN) [ALTRET(label)];
 5192
 5193                Parameters for the M$GCHAN service are as follows:
 5194                */
 5195      %MACRO FPT_GCHAN (FPTN=FPT_GCHAN,
 5196                        GCHAN=NIL,
 5197                        CHANNEL=0,
 5198                        RES='  ',
 5199                        ATTR='0'B,
 5200                        DIAG(YES='1'B,NO='0'B)='0'B,
 5201                        CONTROLLER(YES='1'B,NO='0'B)='0'B,
 5202                        HIGHLOW(YES='1'B,NO='0'B)='1'B,
 5203                        ENB(YES='1'B,NO='0'B)='0'B,
 5204                        STCLASS=STATIC,
 5205                        %ALGN=,
 5206                        VECTORS(YES='1'B,NO='0'B)='1'B);
 5207
 5208      /*!* V Y */
 5209      %LSET LISTDIR='0'B;
 5210      %LSET LISTEXP='1'B;
 5211      %LSET ALG=TEXTCHAR(ALGN);
 5212      %IF ALG = '';
 5213       %LSET ALG='ALIGNED';
 5214      %ENDIF;
 5215      %LSET ALG=CHARTEXT(ALG);
 5216      /*!* V N */
 5217      %LSET LISTCOM='0'B;
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          142  
 5218      %LSET LISTSUB='1'B;
 5219      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 5220      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 5221      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 5222      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 5223
 5224
 5225      DCL 1 FPTN STCLASS %ALG,
 5226      %IF VECTORS;
 5227            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 5228            2 GCHAN_ VECTOR %INIT(VECTOR(GCHAN))%EINIT,
 5229                          /*K* GCHAN = VARIABLE locates an area defined by
 5230                          the VLR_GCHAN macro, which contains information
 5231                          passed back about the channel acquired.  The default
 5232                          is NIL.
 5233                          */
 5234      %ENDIF;
 5235            2 V %ALG,
 5236              3 %CHARTEXT('CHANNEL') UBIN %INIT(CHANNEL)%EINIT,
 5237                          /*K* CHANNEL = VALUE-DEC(0-?) specifies a
 5238                          particular channel.  This field is only valid if
 5239                          DIAG=YES.  The default is 0.
 5240                          */
 5241              3 %CHARTEXT('RES') CHAR(2) UNAL %INIT(RES)%EINIT,
 5242                          /*K* RES = VALUE-CHAR(2) is the software resource type
 5243                          of the channel to be acquired.
 5244                          The resource types are as follows:
 5245
 5246                          .fif
 5247                          CL    Communication Line
 5248                          DK    Diskette
 5249                          HL    Host Link
 5250                          UR    Unit Record
 5251                          .fin
 5252
 5253                          The default is blank.
 5254                          */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          143  
 5255              3 %CHARTEXT('ATTR') BIT(16) %INIT(ATTR)%EINIT,
 5256                     /*K* ATTR = VALUE-BIT(16) specifies a bit string indicating
 5257                     the software attributes of the channel to be acquired.
 5258                     For details,
 5259                     see the CP-6 System Support Reference (HA20/HA21), NETCON,
 5260                     ATTR option in the table 'CONFIG/DEFAULT Command Line
 5261                     Options' and the discussion in and before the table
 5262                     'RESOURCE Attribute Defaults'.
 5263                     The default is 0.
 5264                     */
 5265              3 FLAGS,
 5266                4 %CHARTEXT('DIAG') BIT(1) UNAL %INIT(DIAG)%EINIT,
 5267                          /*K* DIAG = {YES|NO} if set, this channel is being
 5268                          acquired for diagnostic purposes.  The default is NO.
 5269                          */
 5270                4 %CHARTEXT('CONTROLLER') BIT(1) UNAL %INIT(CONTROLLER)%EINIT,
 5271                          /*K* CONTROLLER = {YES|NO} if set, the entire controller
 5272                          is to be acquired.  CONTROLLER is only honored if
 5273                          DIAG is set.  Which controller to acquire is determined
 5274                          by the value specified for CHANNEL.  If no
 5275                          value is specified, an error is reported.  The default
 5276                          is NO.
 5277                          */
 5278                4 %CHARTEXT('HIGHLOW') BIT(1) UNAL %INIT(HIGHLOW)%EINIT,
 5279                          /*K* HIGHLOW = {YES|NO} specifies whether or not the
 5280                          HIGHCHAN and LOWCHAN fields are to be returned in
 5281                          the VLR_GCHAN macro.  The default is YES.
 5282                          */
 5283                4 %CHARTEXT('ENB') BIT(1) UNAL %INIT(ENB)%EINIT,
 5284                          /*K* ENB = {YES|NO} specifies whether or not the
 5285                          acquired channel is to come up enabled.  The default
 5286                          is NO.
 5287                          */
 5288                4 * BIT(4) UNAL %INIT('0'B)%EINIT,
 5289              3 * UBIN UNAL %INIT(0)%EINIT;
 5290      %MEND;
 5291
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          144  
 5292
 5293                                    /*****************************/
 5294                                    /*     M$RCHAN                                */
 5295                                    /*      Available in LCP6 only                */
 5296                                    /*****************************/
 5297
 5298
 5299                          /*F* NAME:  M$RCHAN - Release a Channel.
 5300
 5301                          The M$RCHAN monitor service
 5302                          allows the user to release an
 5303                          previously acquired channel.  If the user does not own the
 5304                          channel, an appropriate error code is returned.  If the
 5305                          CONTROLLER bit is set, the user must own each channel on
 5306                          the controller; otherwise an error is returned.
 5307
 5308
 5309                          The form of the call is as follows:
 5310
 5311                          CALL M$RCHAN (FPT_RCHAN) [ALTRET(label)];
 5312
 5313                          Parameters for the M$RCHAN service are as follows:
 5314                          */
 5315      %MACRO FPT_RCHAN (FPTN=FPT_RCHAN,
 5316                        CHANNEL=0,
 5317                        CONTROLLER(YES='1'B,NO='0'B)='0'B,
 5318                        STCLASS=STATIC,
 5319                        %ALGN=,
 5320                        VECTORS(YES='1'B,NO='0'B)='1'B);
 5321
 5322      /*!* V Y */
 5323      %LSET LISTDIR='0'B;
 5324      %LSET LISTEXP='1'B;
 5325      %LSET ALG=TEXTCHAR(ALGN);
 5326      %IF ALG = '';
 5327       %LSET ALG='ALIGNED';
 5328      %ENDIF;
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          145  
 5329      %LSET ALG=CHARTEXT(ALG);
 5330      /*!* V N */
 5331      %LSET LISTCOM='0'B;
 5332      %LSET LISTSUB='1'B;
 5333      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 5334      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 5335      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 5336      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 5337
 5338
 5339      DCL 1 FPTN STCLASS %ALG,
 5340      %IF VECTORS;
 5341            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 5342      %ENDIF;
 5343            2 V %ALG,
 5344              3 %CHARTEXT('CHANNEL') UBIN %INIT(CHANNEL)%EINIT,
 5345                     /*K* CHANNEL = VALUE-DEC(0-?) is the channel to be released.
 5346                     The default is 0.
 5347                     */
 5348              3 %CHARTEXT('CONTROLLER') BIT(1) UNAL %INIT(CONTROLLER)%EINIT,
 5349                          /*K* CONTROLLER = {YES|NO} if set, the entire
 5350                          controller, indicated by CHANNEL, is to be released.
 5351                          The user must own the entire controller; otherwise
 5352                          an error is returned.
 5353                          */
 5354              3 * BIT(15) UNAL %INIT('0'B)%EINIT,
 5355              3 * UBIN %INIT(0)%EINIT;
 5356      %MEND;
 5357
 5358
 5359                                    /*****************************/
 5360                                    /*      VLR_GCHAN                             */
 5361                                    /*      Available in LCP6 only                */
 5362                                    /*****************************/
 5363
 5364                          /*F* NAME:  VLR_GCHAN
 5365
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          146  
 5366                          The VLR_GCHAN macro is used to define an area which will
 5367                          contain the results of the M$GCHAN monitor service.
 5368                          It contains complete information about the channel
 5369                          that was obtained by the M$GCHAN service.  Parameters for
 5370                          the macro are as follows:
 5371                          */
 5372
 5373
 5374      %MACRO VLR_GCHAN (FPTN=VLR_GCHAN,
 5375                        STCLASS=STATIC,
 5376                        %ALGN=,
 5377                        CHANNEL=0,
 5378                        HIGHCHAN=0,
 5379                        LOWCHAN=0,
 5380                        DVCID=0,
 5381                        EXTDVCID=0,
 5382                        RES='  ',
 5383                        ATTR='0'B);
 5384
 5385      /*!* V Y */
 5386      %LSET LISTDIR='0'B;
 5387      %LSET LISTEXP='1'B;
 5388      %LSET ALG=TEXTCHAR(ALGN);
 5389      %IF ALG = '';
 5390       %LSET ALG='ALIGNED';
 5391      %ENDIF;
 5392      %LSET ALG=CHARTEXT(ALG);
 5393      /*!* V N */
 5394      %LSET LISTCOM='0'B;
 5395      %LSET LISTSUB='1'B;
 5396      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 5397      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 5398      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 5399      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 5400
 5401
 5402      DCL 1 FPTN STCLASS %ALG,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          147  
 5403            2 %CHARTEXT('CHANNEL') UBIN %INIT(CHANNEL)%EINIT,
 5404       /*K* CHANNEL = VALUE-DEC(0-n) contains the number of the returned channel.
 5405       */
 5406            2 %CHARTEXT('HIGHCHAN') UBIN %INIT(HIGHCHAN)%EINIT,
 5407       /*K*  HIGHCHAN = VALUE-DEC(0-n) contains the number of the highest channel in
 5408       a range of channels which satisfied the RES and ATTR requirements
 5409       specified in FPT_GCHAN.  Only returned if FPT_GCHAN.V.FLAGS.HIGHLOW
 5410       was set.
 5411       */
 5412            2 %CHARTEXT('LOWCHAN') UBIN %INIT(LOWCHAN)%EINIT,
 5413       /*K* LOWCHAN = VALUE-DEC(0-n) contains the number of the lowest channel in a
 5414       range of channels which satisfied the RES and ATTR requirements
 5415       specified in FPT_GCHAN.  Only returned if FPT_GCHAN.V.FLAGS.HIGHLOW
 5416       was set.
 5417       */
 5418            2 %CHARTEXT('DVCID') UBIN %INIT(DVCID)%EINIT,
 5419                /*K* DVCID = VALUE-DEC(0-n) contains the device I.D. of CHANNEL.
 5420                */
 5421            2 %CHARTEXT('EXTDVCID') UBIN %INIT(EXTDVCID)%EINIT,
 5422       /*K* EXTDVCID = VALUE-DEC(0-n) contains the extended device I.D. of CHANNEL.
 5423       */
 5424            2 %CHARTEXT('RES') CHAR(2) UNAL %INIT(RES)%EINIT,
 5425           /*K* DVCRES = VALUE-CHAR(2) contains the hardware device resource type
 5426           of CHANNEL.
 5427           */
 5428            2 %CHARTEXT('ATTR') BIT(16) UNAL %INIT(ATTR)%EINIT,
 5429                /*K* DVCATTR = VALUE-BIT(16) contains the hardware device attributes
 5430                     of CHANNEL.  For details, see the System Support
 5431                     Reference (HA20/HA21), NETCON, Device IDs in the table
 5432                     'RESOURCE Attribute Defaults'.
 5433                     */
 5434            2 * UBIN UNAL %INIT(0)%EINIT;
 5435      %MEND;
 5436                                    /*****************************/
 5437                                    /*     M$NODEINFO                             */
 5438                                    /*  Available on CP6 only                     */
 5439                                    /*****************************/
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          148  
 5440
 5441                          /*F* NAME:  M$NODEINFO - Get Node Information.
 5442
 5443                          The M$NODEINFO monitor service
 5444                          allows the user to obtain information on a particular
 5445                          node in the network.  It returns the current state,
 5446                          the type of node, the node name and number, and
 5447                          routing information for the specified node.
 5448
 5449                          The form of the call is:
 5450
 5451                          CALL M$NODEINFO (FPT_NODEINFO) [ALTRET(label)];
 5452
 5453                          Parameters for the M$NODEINFO service are:
 5454                          */
 5455      %MACRO FPT_NODEINFO (FPTN=FPT_NODEINFO,
 5456                           NODENAME=' ',
 5457                           NODENUM=0,
 5458                           NODEINFO=NIL,
 5459                           STCLASS=STATIC);
 5460       %LSET LISTDIR='0'B;
 5461       %LSET LISTEXP='1'B;
 5462       %LSET LISTCOM='0'B;
 5463       %LSET LISTSUB='1'B;
 5464      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 5465      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 5466      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 5467      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 5468
 5469      DCL 1 FPTN STCLASS DALIGNED,
 5470            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 5471            2 NODEINFO_ VECTOR %INIT(VECTOR(NODEINFO))%EINIT,
 5472                          /*K* NODEINFO = VARIABLE     locates an area where
 5473                          the information is to be returned.  This area is
 5474                          described under VLR_NODEINFO.
 5475                                                                             */
 5476
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          149  
 5477            2 V,
 5478              3 NODENAME# CHAR(8) %INIT(NODENAME)%EINIT,
 5479                          /*K* NODENAME = VALUE-CHAR(8) contains the node
 5480                          name of the node for which the information
 5481                          is requested.  If the name is nonblank
 5482                     the node name is used to define the node.  If the node name
 5483                     is blank the node number is used.  The default is blanks.
 5484                     */
 5485              3 NODENUM# UBIN BYTE CALIGNED %INIT(NODENUM)%EINIT,
 5486                          /*K* NODENUM = VALUE-DEC(0-255) specifies the node number
 5487                          for which the information is requested.  This
 5488                          field is used, if the node name is blank,
 5489                          to define the node for which the information
 5490                          is requested.
 5491
 5492                          */
 5493              3 *(0:6) UBIN BYTE CALIGNED %INIT(0*0)%EINIT;
 5494
 5495      %MEND;
 5496
 5497                                    /***************************/
 5498                                    /*    VLR_NODEINFO                            */
 5499                                    /*  Available on CP6 only                     */
 5500                                    /***************************/
 5501
 5502                          /*F* NAME:  VLR_NODEINFO
 5503
 5504                     The VLR_NODEINFO macro is used to define an area which will
 5505                     contain the results of the M$NODEINFO monitor service. It
 5506                     contains the information about the node.  Parameters for
 5507                     the macro are:
 5508                     */
 5509
 5510      %MACRO VLR_NODEINFO (FPTN=VLR_NODEINFO,
 5511                           STCLASS=STATIC,
 5512                           NODENAME=' ',
 5513                           NODENUM=0,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          150  
 5514                           HOST(YES='1'B,NO='0'B)='0'B,
 5515                           CURRENTNODE(YES='1'B,NO='0'B)='0'B,
 5516                           QOS=255,
 5517                           ALTQOS=255,
 5518                           ACTIVE(YES='1'B,NO='0'B)='0'B,
 5519                          LINKCONNECTED(YES='1'B,NO='0'B)='0'B,
 5520                           LINKNODENUM=0,
 5521                           LINKNODENAME=' ');
 5522
 5523       %LSET LISTDIR='0'B;
 5524       %LSET LISTEXP='1'B;
 5525       %LSET LISTCOM='0'B;
 5526       %LSET LISTSUB='1'B;
 5527      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 5528      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 5529      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 5530      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 5531
 5532      DCL 1 FPTN STCLASS DALIGNED,
 5533            2 NODENAME# CHAR(8) %INIT(NODENAME)%EINIT,
 5534       /*K* NODENAME = VALUE-CHAR(8).  Contains the node name for the node specified
 5535       on the M$NODEINFO monitor service.
 5536       */
 5537            2 NODENUM# UBIN BYTE CALIGNED %INIT(NODENUM)%EINIT,
 5538                     /*K* NODENUM = VALUE-DEC(0-255) is the node number of the node.
 5539                     */
 5540            2 HOST# BIT(1) UNAL %INIT(HOST)%EINIT,
 5541                          /*K* HOST = {YES|NO} YES specifies a host node;
 5542                          NO specifies a FEP.
 5543                          */
 5544            2 ACTIVE# BIT(1) UNAL %INIT(ACTIVE)%EINIT,
 5545                          /*K* ACTIVE = {YES|NO} is the current state of the node.
 5546                           */
 5547            2 CURRENTNODE# BIT(1) UNAL %INIT(CURRENTNODE)%EINIT,
 5548                     /*K* CURRENTNODE = {YES|NO} specifies if the node is the node
 5549                     for which the monitor service was issued.
 5550                     */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          151  
 5551            2 LINKCONNECTED# BIT(1) UNAL %INIT(LINKCONNECTED)%EINIT,
 5552                          /*K* LINKCONNECTED = {YES|NO} specifies if this node is
 5553                           directly connected by a link.
 5554                          */
 5555            2 * BIT(5) UNAL %INIT('0'B)%EINIT,
 5556            2 QOS# UBIN BYTE CALIGNED %INIT(QOS)%EINIT,
 5557                          /*K* QOS = VALUE-DEC(0-255) is a value representing the
 5558                          quality of service for the node.  0 is the highest
 5559                          quality.
 5560                          */
 5561            2 ALTQOS# UBIN BYTE CALIGNED %INIT(ALTQOS)%EINIT,
 5562                          /*K* ALTQOS = VALUE-DEC(0-255) is a value representing
 5563                          the alternate quality of service.  0 is the highest
 5564                          quality.
 5565                          */
 5566            2 LINKNODENAME# CHAR(8) %INIT(LINKNODENAME)%EINIT,
 5567                          /*K* LINKNODENAME = VALUE-CHAR(8) contains the node name
 5568                          to which messages for the specified FEP are routed.
 5569                          */
 5570            2 LINKNODENUM# UBIN BYTE CALIGNED %INIT(LINKNODENUM)%EINIT,
 5571                          /*K* LINKNODENUM = VALUE-DEC(0-255) is the node number
 5572                          to which messages are routed.
 5573                          */
 5574            2 * UBIN(27) UNAL %INIT(0)%EINIT;
 5575
 5576      %MEND;
 5577                                    /**********************************************/
 5578                                    /*              B$TERMINAL_ID                 */
 5579                                    /*       Available for CP6 only               */
 5580                                    /**********************************************/
 5581                     /*F* NAME: B$TERMINAL_ID - Structure Defining a Terminal ID
 5582
 5583                     The B$TERMINAL_ID macro may be used to define a structure
 5584                     containing terminal identification information.  The subfields
 5585                     which may be specified are:                                  */
 5586      %MACRO B$TERMINAL_ID(FPTN=B$TERMINAL_ID,STCLASS="",ALGN=CALIGNED,
 5587                            LAST=";",LVL=1);
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          152  
 5588
 5589       %LSET LISTDIR='0'B;
 5590       %LSET LISTEXP='1'B;
 5591       %LSET LISTCOM='0'B;
 5592       %LSET LISTSUB='1'B;
 5593       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 5594       %IF (SUBSTR(STR,0,6)='STATIC') OR
 5595       (SUBSTR(STR,0,8)='CONSTANT') OR
 5596       (SUBSTR(STR,0,3)='EXT');
 5597       %LSET INIT=CHARTEXT('INIT');
 5598       %LSET EINIT=CHARTEXT('');
 5599       %ELSE;
 5600       %LSET INIT=CHARTEXT('/*');
 5601       %LSET EINIT=CHARTEXT('*/');
 5602       %ENDIF;
 5603
 5604      %IF LVL=1;
 5605      DCL 1 FPTN STCLASS ALGN,
 5606      %ELSE;
 5607           %(LVL) FPTN ALGN,
 5608      %ENDIF;
 5609
 5610              %(LVL+1) TTYP UBIN BYTE CALIGNED %INIT(0)%EINIT,
 5611                          /*K* TTYP = OPTION.
 5612                          Specifies the terminal type.
 5613                          EQUs for terminal types are listed in the
 5614                          table.
 5615                          ..::TB "^\Identifier\#20\Meaning"
 5616                          .xeq KL_SUPER_C KLTY_E  KLTY_3270#
 5617                          .xeq KL_SUPER_C KLTY_E  KLTY_CONT#
 5618                          .xeq KL_SUPER_C KLTY_E  KLTY_FEP#
 5619                          .xeq KL_SUPER_C KLTY_E  KLTY_HIP_CONT#
 5620                          .xeq KL_SUPER_C KLTY_E  KLTY_HIP_DEV#
 5621                          .xeq KL_SUPER_C KLTY_E  KLTY_HIP_LINE#
 5622                          .xeq KL_SUPER_C KLTY_E  KLTY_LINEDEV#
 5623                          .xeq KL_SUPER_C KLTY_E  KLTY_LINK#
 5624                          .xeq KL_SUPER_C KLTY_E  KLTY_LINKDEV#
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          153  
 5625                          .xeq KL_SUPER_C KLTY_E  KLTY_PROG#
 5626                          .xeq KL_SUPER_C KLTY_E  KLTY_SDEV#
 5627                          .xeq KL_SUPER_C KLTY_E  KLTY_STRM#
 5628                          .xeq KL_SUPER_C KLTY_E  KLTY_TTY#
 5629                          .xeq KL_SUPER_C KLTY_E  KLTY_URP#
 5630                          .xeq KL_SUPER_C KLTY_E  KLTY_VIRCIR#
 5631                          ..::TB
 5632                          */
 5633              %(LVL+1) LEV UBIN BYTE CALIGNED %INIT(0)%EINIT,
 5634                          /*K* LEV = {1|2|3}.
 5635                          Specifies whether TERM.SUBDEVICE
 5636                          and TERM.SUBSUBDEVICE are meaningful.
 5637
 5638                          .fif
 5639                     1 - TERM.SUBDEVICE and TERM.SUBSUBDEVICE are not meaningful
 5640                     2 - TERM.SUBDEVICE is meaningful; TERM.SUBSUBDEVICE
 5641                     }   is not meaningful
 5642                     3 - TERM.SUBDEVICE and TERM.SUBSUBDEVICE are meaningful
 5643                     .fin
 5644
 5645                     For HASP stations, LEV=2, i.e., TERM.SUBDEVICE is
 5646                     valid.  For IBM 3270-like devices, LEV=3;
 5647                     TERM.SUBDEVICE identifies the controller and
 5648                     TERM.SUBSUBDEVICE identifies a specific 3270-like
 5649                     terminal device.
 5650                     */
 5651              %(LVL+1) TERM UNAL,
 5652      %IF NOT(MODE_FEP);
 5653                 %(LVL+2) CHANNEL(0:1) UNAL,
 5654                    %(LVL+3) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
 5655                    %(LVL+3) BYT UBIN(8) UNAL %INIT(0*0)%EINIT,
 5656                 %(LVL+2) SUBDEVICE(0:1) UNAL,
 5657                    %(LVL+3) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
 5658                    %(LVL+3) BYT UBIN(8) UNAL %INIT(0*0)%EINIT,
 5659                 %(LVL+2) SUBSUBDEVICE(0:1) UNAL,
 5660                    %(LVL+3) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
 5661                    %(LVL+3) BYT UBIN(8) UNAL %INIT(0*0)%EINIT,
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          154  
 5662      %ELSE;
 5663                 %(LVL+2) CHANNEL UBIN %INIT(0)%EINIT UNAL,
 5664                          /*K* TERM.CHANNEL = VALUE-DEC(0-65535).
 5665                          Specifies the port to which the terminal is most directly
 5666                          connected.
 5667                          */
 5668                 %(LVL+2) SUBDEVICE UBIN %INIT(0)%EINIT UNAL,
 5669                          /*K* TERM.SUBDEVICE = VALUE-DEC(0-65535).
 5670                          Specifies the CP-6 subdevice or controller number,
 5671                          assigned by SUPER when the device or controller
 5672                          was defined.
 5673                          */
 5674                 %(LVL+2) SUBSUBDEVICE UBIN %INIT(0)%EINIT UNAL,
 5675                          /*K* TERM.SUBSUBDEVICE = VALUE-DEC(0-65535).
 5676                          Specifies the device port through which the
 5677                          terminal is connected to its controller.
 5678                          */
 5679      %ENDIF;
 5680                 %(LVL+2) TERM_NAME CHAR(8) CALIGNED %INIT('        ')%EINIT,
 5681                          /*K* TERM.TERM_NAME = VALUE-CHAR(8).
 5682                          Specifies the terminal name specified to SUPER by
 5683                          the system manager.
 5684                          */
 5685              %(LVL+1) TERMID REDEF TERM CHAR(14) CALIGNED LAST
 5686                          /*K* TERMID = VALUE-CHAR(14).
 5687                          Is a REDEF of TERM and is used when
 5688                          TTYP is KLTY_PROG#.  TERMID will contain the
 5689                          user name from G$JIT.UNAME, or when the
 5690                          connection is being made by the LCP-6 monitor,
 5691                          will contain 'BABOON'.
 5692                          */
 5693      %MEND;
 5694
 5695
 5696                                    /**********************************/
 5697                                    /*   KI_MCL_E                                 */
 5698                                    /*   LCP6 internal use only                   */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          155  
 5699                                    /**********************************/
 5700
 5701
 5702
 5703                          /*F* NAME:  KI_MCL_E
 5704
 5705                          The KI_MCL_E macro generates the specific values
 5706                          for the individual monitor service requests within
 5707                          the KI functional code group.
 5708                          */
 5709
 5710      %MACRO KI_MCL_E;
 5711      %EQU G_MCL_STRMCTL#= %G_FCG_KI#*64+0;
 5712      %EQU G_MCL_GTRMCTL#= %G_FCG_KI#*64+1;
 5713      %EQU G_MCL_PROMPT# = %G_FCG_KI#*64+2;
 5714      %EQU G_MCL_EOM# = %G_FCG_KI#*64+3;
 5715      %EQU G_MCL_TRMPRG# = %G_FCG_KI#*64+4;
 5716      %EQU G_MCL_GLINEATTR# = %G_FCG_KI#*64+5;
 5717      %EQU G_MCL_STRMATTR# = %G_FCG_KI#*64+6;
 5718      %EQU G_MCL_GTRMATTR# = %G_FCG_KI#*64+7;
 5719      %EQU G_MCL_PLATEN# = %G_FCG_KI#*64+8;
 5720      %EQU G_MCL_STRMTAB# = %G_FCG_KI#*64+9;
 5721      %EQU G_MCL_GTRMTAB# = %G_FCG_KI#*64+10;
 5722      %EQU G_MCL_SINPUT# = %G_FCG_KI#*64+11;
 5723      /* %EQU G_MCL_PROFILE# = %G_FCG_KI#*64+12; AVAILABLE!!!! */
 5724      /* %EQU G_MCL_TRMISC# = %G_FCG_KI#*64+13;  AVAILABLE!!!! */
 5725      %EQU G_MCL_MDFFLD# = %G_FCG_KI#*64+14;
 5726      %EQU G_MCL_DCLFLD# = %G_FCG_KI#*64+15;
 5727      %EQU G_MCL_RLSFLD# = %G_FCG_KI#*64+16;
 5728      %EQU G_MCL_SLCFLD# = %G_FCG_KI#*64+17;
 5729      %EQU G_MCL_ERASE# = %G_FCG_KI#*64+18;
 5730      %EQU G_MCL_GCHAN#=%G_FCG_KI#*64+19;
 5731      %EQU G_MCL_RCHAN#=%G_FCG_KI#*64+20;
 5732      %EQU G_MCL_GPROMPT#=%G_FCG_KI#*64+21;
 5733      %EQU G_MCL_GPLATEN#=%G_FCG_KI#*64+22;
 5734      %MEND;
 5735
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          156  
 5736
 5737
 5738                                    /**********************************/
 5739                                    /*   KI$ENTS                                  */
 5740                                    /*   LCP6 internal use only                   */
 5741                                    /**********************************/
 5742
 5743
 5744
 5745                          /*F* NAME:  KI$ENTS
 5746
 5747                          The KI$ENTS macro generates the entry declerations
 5748                          for the monitor services belonging to the KI
 5749                          functional code group.
 5750                          */
 5751
 5752      %MACRO KI$ENTS;
 5753      DCL M$STRMCTL ENTRY(1) CONV(1,2,%G_MCL_STRMCTL#) ALTRET;
 5754      DCL M$GTRMCTL ENTRY(1) CONV(1,2,%G_MCL_GTRMCTL#) ALTRET;
 5755      DCL M$PROMPT ENTRY(1) CONV(1,2,%G_MCL_PROMPT#) ALTRET;
 5756      DCL M$EOM ENTRY(1) CONV(1,2,%G_MCL_EOM#) ALTRET;
 5757      DCL M$TRMPRG ENTRY(1) CONV(1,1,%G_MCL_TRMPRG#) ALTRET;
 5758      DCL M$GLINEATTR ENTRY(1) CONV(1,2,%G_MCL_GLINEATTR#) ALTRET;
 5759      DCL M$STRMATTR ENTRY(1) CONV(1,2,%G_MCL_STRMATTR#) ALTRET;
 5760      DCL M$GTRMATTR ENTRY(1) CONV(1,2,%G_MCL_GTRMATTR#) ALTRET;
 5761      DCL M$PLATEN ENTRY(1) CONV(1,2,%G_MCL_PLATEN#) ALTRET;
 5762      DCL M$STRMTAB ENTRY(1) CONV(1,2,%G_MCL_STRMTAB#) ALTRET;
 5763      DCL M$GTRMTAB ENTRY(1) CONV(1,2,%G_MCL_GTRMTAB#) ALTRET;
 5764      DCL M$SINPUT ENTRY(1) CONV(1,2,%G_MCL_SINPUT#) ALTRET;
 5765      DCL M$DCLFLD ENTRY(1) CONV(1,3,%G_MCL_DCLFLD#) ALTRET;
 5766      DCL M$MDFFLD ENTRY(1) CONV(1,4,%G_MCL_MDFFLD#) ALTRET;
 5767      DCL M$SLCFLD ENTRY(1) CONV(1,2,%G_MCL_SLCFLD#) ALTRET;
 5768      DCL M$RLSFLD ENTRY(1) CONV(1,2,%G_MCL_RLSFLD#) ALTRET;
 5769      DCL M$ERASE ENTRY(1) CONV(1,2,%G_MCL_ERASE#) ALTRET;
 5770      DCL M$GCHAN ENTRY(1) CONV(1,2,%G_MCL_GCHAN#) ALTRET;
 5771      DCL M$RCHAN ENTRY(1) CONV(1,1,%G_MCL_RCHAN#) ALTRET;
 5772      DCL M$GPROMPT ENTRY(1) CONV(1,2,%G_MCL_GPROMPT#) ALTRET;
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          157  
 5773      DCL M$GPLATEN ENTRY(1) CONV(1,2,%G_MCL_GPLATEN#) ALTRET;
 5774      %MEND;
 5775
 5776
 5777                                    /**********************************/
 5778                                    /*   KI$HANDLERS                              */
 5779                                    /*   LCP6 internal use only                   */
 5780                                    /**********************************/
 5781
 5782
 5783
 5784
 5785                          /*F* NAME: KI$HANDLERS
 5786
 5787                          The KI$HANDLERS macro generates the EQU for the
 5788                          single entry point of the KI monitor services
 5789                          handler.
 5790                          */
 5791
 5792      %MACRO KI$HANDLERS;
 5793      DCL KNA$MCL ENTRY(1);
 5794      %MEND;
 5795
 5796
 5797                                    /**********************************/
 5798                                    /*   KI_FPTS                                  */
 5799                                    /*   LCP6 internal use only                   */
 5800                                    /**********************************/
 5801
 5802
 5803
 5804
 5805                          /*F* NAME: KI_FPTS
 5806
 5807                          The KI_FPTS macro generates information used
 5808                          by the monitor services decoder in decoding
 5809                          and verifying the data for KI MCLs.
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          158  
 5810                          */
 5811
 5812      %MACRO KI_FPTS (FPTN=KI_FPTS);
 5813      %GUD_FCG_INFO(FPTN=FPTN,C=%G_MCL_GPLATEN#,HAND=KNA$MCL);
 5814      %GUD_MCL_INFO(C=%G_MCL_STRMCTL#,V=2);
 5815      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=3); /* V_              */
 5816      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=NO,BND=15); /* TRMCTL_        */
 5817      %GUD_MCL_INFO(C=%G_MCL_GTRMCTL#,V=2);
 5818      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=3); /* V_              */
 5819      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=YES,BND=15); /* TRMCTL_       */
 5820      %GUD_MCL_INFO(C=%G_MCL_PROMPT#,V=2);
 5821      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=3); /* V_              */
 5822      %GUD_VECT_INFO(ALIGN=BY,MAND=NO,TYP=LPAR,WRT=NO,BND=0); /* PROMPT_          */
 5823      %GUD_MCL_INFO(C=%G_MCL_EOM#,V=2);
 5824      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=5); /* V_              */
 5825      %GUD_VECT_INFO(ALIGN=BY,MAND=NO,TYP=LPAR,WRT=NO,BND=15); /* EOMTABLE_       */
 5826      %GUD_MCL_INFO(C=%G_MCL_TRMPRG#,V=1);
 5827      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=3); /* V_              */
 5828      %GUD_MCL_INFO(C=%G_MCL_GLINEATTR#,V=2);
 5829      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=1); /* V_              */
 5830      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=YES,BND=27); /* LINEATTR_     */
 5831      %GUD_MCL_INFO(C=%G_MCL_STRMATTR#,V=2);
 5832      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=1); /* V_              */
 5833      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=NO,BND=31); /* TRMATTR_       */
 5834      %GUD_MCL_INFO(C=%G_MCL_GTRMATTR#,V=2);
 5835      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=1); /* V_              */
 5836      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=YES,BND=31); /* TRMATTR_      */
 5837      %GUD_MCL_INFO(C=%G_MCL_PLATEN#,V=2);
 5838      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=1); /* V_              */
 5839      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=NO,BND=15); /* PLATEN_        */
 5840      %GUD_MCL_INFO(C=%G_MCL_STRMTAB#,V=2);
 5841      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=1); /* V_              */
 5842      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=NO,BND=1); /* TAB_            */
 5843      %GUD_MCL_INFO(C=%G_MCL_GTRMTAB#,V=2);
 5844      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=1); /* V_              */
 5845      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=YES,BND=1); /* TAB_           */
 5846      %GUD_MCL_INFO(C=%G_MCL_SINPUT#,V=2);
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          159  
 5847      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=3); /* V_              */
 5848      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=YES,BND=0); /* BUF_           */
 5849      %GUD_MCL_INFO(C=%G_MCL_DCLFLD#,V=3);
 5850      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=9); /* V_              */
 5851      %GUD_VECT_INFO(ALIGN=BY,MAND=NO,TYP=LPAR,WRT=NO,BND=0); /* BUF_             */
 5852      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=5); /* FLDATR_         */
 5853      %GUD_MCL_INFO(C=%G_MCL_MDFFLD#,V=4);
 5854      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=5); /* V_              */
 5855      %GUD_VECT_INFO(ALIGN=BY,MAND=NO,TYP=LPAR,WRT=NO,BND=0); /* BUF_             */
 5856      %GUD_VECT_INFO(ALIGN=BY,MAND=NO,TYP=LPAR,WRT=NO,BND=0); /* KEY_             */
 5857      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=5); /* FLDATR_         */
 5858      %GUD_MCL_INFO(C=%G_MCL_RLSFLD#,V=2);
 5859      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=3); /* V_              */
 5860      %GUD_VECT_INFO(ALIGN=BY,MAND=NO,TYP=LPAR,WRT=NO,BND=0); /* KEY_             */
 5861      %GUD_MCL_INFO(C=%G_MCL_SLCFLD#,V=2);
 5862      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=3); /* V_              */
 5863      %GUD_VECT_INFO(ALIGN=BY,MAND=NO,TYP=LPAR,WRT=NO,BND=0); /* KEY_             */
 5864      %GUD_MCL_INFO(C=%G_MCL_ERASE#,V=2);
 5865      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=5); /* V_              */
 5866      %GUD_VECT_INFO(ALIGN=BY,MAND=NO,TYP=LPAR,WRT=NO,BND=0); /* KEY_             */
 5867      %GUD_MCL_INFO(C=%G_MCL_GCHAN#,V=2);
 5868      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=9); /* V_              */
 5869      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=YES,BND=15); /* GCHAN_        */
 5870      %GUD_MCL_INFO(C=%G_MCL_RCHAN#,V=1);
 5871      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=5); /* V_              */
 5872      %GUD_MCL_INFO(C=%G_MCL_GPROMPT#,V=2);
 5873      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=YES,BND=3); /* V_             */
 5874      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=YES,BND=2); /* PROMPT_        */
 5875      %GUD_MCL_INFO(C=%G_MCL_GPLATEN#,V=2);
 5876      %GUD_VECT_INFO(ALIGN=WD,MAND=YES,TYP=LPAR,WRT=NO,BND=3); /* V_              */
 5877      %GUD_VECT_INFO(ALIGN=BY,MAND=YES,TYP=LPAR,WRT=YES,BND=7); /* PLATEN_        */
 5878      %MEND;
 5879
 5880
 5881                                    /**************************************/
 5882                                    /* M$CONFIG  - GET CHANNEL CONFIG             */
 5883                                    /* Available for CP6 only                     */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          160  
 5884                                    /**************************************/
 5885
 5886
 5887                          /*F* NAME: M$CONFIG  - Get Channel Configuration.
 5888
 5889                          The M$CONFIG service returns the configuration
 5890                          and status of a channel and its controller on a
 5891                          specified FEP.
 5892
 5893                          The form of the call is as follows:
 5894
 5895                          CALL M$CONFIG  (FPT_CONFIG ) [ALTRET (label)];
 5896
 5897                          Parameters for the M$CONFIG  service are as
 5898                          follows:
 5899                          */
 5900
 5901
 5902      %MACRO FPT_CONFIG  (FPTN=FPT_CONFIG,
 5903              RESULTS=NIL,
 5904              FEPNAME=NIL,
 5905              FEP=0,
 5906              CHANNEL=0,
 5907              STCLASS=STATIC);
 5908
 5909      %LSET LISTDIR='0'B;
 5910      %LSET LISTEXP='1'B;
 5911      %LSET LISTCOM='0'B;
 5912      %LSET LISTSUB='1'B;
 5913      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 5914      %IF (SUBSTR(STR,0,6)='STATIC') OR
 5915       (SUBSTR(STR,0,8)='CONSTANT') OR
 5916       (SUBSTR(STR,0,3)='EXT');
 5917       %LSET INIT=CHARTEXT('INIT');
 5918      %ELSE;
 5919       %LSET INIT=CHARTEXT('/*');
 5920      %ENDIF;
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          161  
 5921
 5922      DCL 1 FPTN STCLASS DALIGNED,
 5923            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
 5924            2 FEPNAME_ BIT(72) %INIT(VECTOR(FEPNAME))%CHARTEXT('/**/'),
 5925                          /*K* FEPNAME = VARIABLE  locates a VLP_FEPNAME
 5926                          structure which contains the name of the FEP.
 5927
 5928                          The default is NIL.
 5929                          */
 5930            2 RESULTS_ BIT(72) %INIT(VECTOR(RESULTS))%CHARTEXT('/**/'),
 5931                          /*K* RESULTS = VARIABLE  locates a VLR_CONFIG
 5932                          structure to contain the results of this M$CONFIG.
 5933                          See VLR_CONFIG for more information about this
 5934                          field.
 5935
 5936                          The default is NIL.
 5937                          */
 5938            2 V DALIGNED,
 5939              3 FEP# UBIN(18) UNAL %INIT(FEP)%CHARTEXT('/**/'),
 5940                          /*K* FEP = VALUE-DEC(1-n) specifies the
 5941                          number of the FEP. If FEPNAME is specified, it
 5942                          will override any value specified for FEP.
 5943
 5944                          The default is 0.
 5945                          */
 5946              3 CHANNEL# UBIN(18) UNAL %INIT(CHANNEL) %CHARTEXT('/**/'),
 5947                          /*K* CHANNEL = VALUE-DEC(0-n) specifies
 5948                          the channel number on which this M$CONFIG call
 5949                          is to report.
 5950
 5951                          Valid channel numbers must be multiples of
 5952                          128.
 5953
 5954                          The default is 0.
 5955                          */
 5956              3 * UBIN WORD %INIT(0)%CHARTEXT('/**/');
 5957      %MEND;
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          162  
 5958
 5959
 5960                                    /**********************************/
 5961                                    /*     VLR_CONFIG                             */
 5962                                    /*     Available for CP6 only                 */
 5963                                    /**********************************/
 5964
 5965
 5966
 5967
 5968                          /*F* NAME: VLR_CONFIG
 5969
 5970                          This macro generates an area which receives
 5971                          the results of M$CONFIG.                                */
 5972
 5973      %MACRO VLR_CONFIG (FPTN=VLR_CONFIG,STCLASS=STATIC);
 5974
 5975       %LSET LISTDIR='0'B;
 5976       %LSET LISTEXP='1'B;
 5977       %LSET LISTCOM='0'B;
 5978       %LSET LISTSUB='1'B;
 5979       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 5980       %IF (SUBSTR(STR,0,6)='STATIC') OR
 5981       (SUBSTR(STR,0,8)='CONSTANT') OR
 5982       (SUBSTR(STR,0,3)='EXT');
 5983       %LSET INIT=CHARTEXT('INIT');
 5984       %ELSE;
 5985       %LSET INIT=CHARTEXT('/*');
 5986       %ENDIF;
 5987
 5988      DCL 1 FPTN STCLASS DALIGNED,
 5989            2 DVCID# UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 5990                          /*K* DVCID = VALUE-DEC(0-n) is set to the
 5991                          device ID of the requested channel.
 5992                          */
 5993            2 EXDVCID# UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 5994                          /*K* EXDVCID = VALUE-DEC(0-n) is set to the
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          163  
 5995                          extended device ID of the requested channel.
 5996                          */
 5997            2 STATUS# UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 5998                          /*K* STATUS = VALUE-DEC(0-n)  is set to the
 5999                          status of the requested channel.
 6000                          STATUS may take on any of the following values
 6001                          to be found in the INCLUDE file, CP_6_SUBS:
 6002
 6003                          .fif
 6004                          STATUS       VALUE   CHANNEL DESCRIPTION
 6005                          -----------  -----   ---------------------------
 6006                          CHNST_NONE#    0     Does not exist
 6007                          CHNST_PART#    1     Partitioned for diagnostics
 6008                          CHNST_DSB#     2     Disabled
 6009                          CHNST_DIAG#    3     Busy with diagnostics
 6010                          CHNST_ENB#     4     Enabled
 6011                          .fin
 6012                          */
 6013            2 CTLR_STATUS# UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 6014                          /*K* CTLR_STATUS = VALUE-DEC(0-n)  is set to
 6015                          the status of the controller for the requested
 6016                          channel. The same status values will be used for
 6017                          CTLR_STATUS as for STATUS. The value reported for
 6018                          CTLR_STATUS will be the highest priority status
 6019                          found for all channels on this controller. The
 6020                          priority of the status is equal to its value,
 6021                          i.e. CHNST_ENB# has the highest priority while
 6022                          CHNST_NONE# has the lowest.
 6023                          */
 6024            2 * UBIN HALF UNAL %INIT(0) %CHARTEXT('/**/'),
 6025            2 * (0:1) UBIN WORD %INIT(0*0) %CHARTEXT('/**/');
 6026      %MEND;
 6027
 6028
 6029                                    /**********************************/
 6030                                    /*     VLP_FEPNAME                            */
 6031                                    /*     Available for CP6 only                 */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          164  
 6032                                    /**********************************/
 6033
 6034
 6035                          /*F* NAME:  VLP_FEPNAME
 6036
 6037                          The VLP_FEPNAME macro may be used to generate a
 6038                          FEP name.
 6039                          */
 6040
 6041       %MACRO VLP_FEPNAME (FPTN=VLP_FEPNAME,
 6042                         NAME=' ',
 6043                         STCLASS=STATIC);
 6044
 6045       %LSET LISTDIR='0'B;
 6046       %LSET LISTEXP='1'B;
 6047       %LSET LISTCOM='0'B;
 6048       %LSET LISTSUB='1'B;
 6049       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 6050       %IF (SUBSTR(STR,0,6)='STATIC') OR
 6051       (SUBSTR(STR,0,8)='CONSTANT') OR
 6052       (SUBSTR(STR,0,3)='EXT');
 6053       %LSET INIT=CHARTEXT('INIT');
 6054       %ELSE;
 6055       %LSET INIT=CHARTEXT('/*');
 6056       %ENDIF;
 6057
 6058
 6059      DCL 1 FPTN STCLASS,           /* FEPNAME AREA                               */
 6060            2 NAME# CHAR(8) %INIT(NAME)%CHARTEXT('/**/');
 6061                          /*K* FEPNAME = VALUE-CHAR(8) specifies a FEP name.
 6062                          The default is blanks, which is equivalent
 6063                          to no FEP name.
 6064                          */
 6065
 6066       %MEND;
 6067                                    /****************************/
 6068                                    /*    SYSTEM  CALLS                           */
07:22 JUL 29 '97 KI_CP6_C.:E05SI/KI_CP6_C.:E05TUI                          165  
 6069                                    /****************************/
 6070
 6071      DCL M$STRMCTL ENTRY(1) CONV(1,3,57344) ALTRET;
 6072      DCL M$GTRMCTL ENTRY(1) CONV(1,3,57345) ALTRET;
 6073      DCL M$PROMPT ENTRY(1) CONV(1,3,57346) ALTRET;
 6074      DCL M$EOM ENTRY(1) CONV(1,3,57347) ALTRET;
 6075      DCL M$TRMPRG ENTRY(1) CONV(1,2,57348) ALTRET;
 6076      DCL M$GLINEATTR ENTRY(1) CONV(1,3,57349) ALTRET;
 6077      DCL M$STRMATTR ENTRY(1) CONV(1,3,57350) ALTRET;
 6078      DCL M$GTRMATTR ENTRY(1) CONV(1,3,57351) ALTRET;
 6079      DCL M$PLATEN ENTRY(1) CONV(1,3,57352) ALTRET;
 6080      DCL M$STRMTAB ENTRY(1) CONV(1,3,57353) ALTRET;
 6081      DCL M$GTRMTAB ENTRY(1) CONV(1,3,57354) ALTRET;
 6082      DCL M$SINPUT ENTRY(1) CONV(1,3,57355) ALTRET;
 6083      DCL M$PROFILE ENTRY(1) CONV(1,4,57356) ALTRET;
 6084      DCL M$FEBOOT ENTRY(1) CONV(1,3,57357) ALTRET;
 6085      DCL M$FEDUMP ENTRY(1) CONV(1,3,57358) ALTRET;
 6086      DCL M$FECTL ENTRY(1) CONV(1,3,57359) ALTRET;
 6087      DCL M$TRMISC ENTRY(1) CONV(1,2,57360) ALTRET;
 6088      DCL M$SETFP ENTRY(1) CONV(1,4,57361) ALTRET;
 6089      DCL M$DRIBBLE ENTRY(1) CONV(1,1,57362) ALTRET;
 6090      DCL M$CONFIG ENTRY(1) CONV(1,3,57363) ALTRET;
 6091      DCL M$DCLFLD ENTRY(1) CONV(1,4,57364) ALTRET;
 6092      DCL M$ERASE  ENTRY(1) CONV(1,3,57365) ALTRET;
 6093      DCL M$MDFFLD ENTRY(1) CONV(1,5,57366) ALTRET;
 6094      DCL M$RLSFLD ENTRY(1) CONV(1,3,57367) ALTRET;
 6095      DCL M$SLCFLD ENTRY(1) CONV(1,3,57368) ALTRET;
 6096      DCL M$NODEINFO ENTRY(1) CONV(1,2,57369) ALTRET;
 6097      DCL M$GPROMPT ENTRY(1) CONV(1,3,57370) ALTRET;
 6098      DCL M$GPLATEN ENTRY(1) CONV(1,3,57371) ALTRET;

