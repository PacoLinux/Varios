VERSION E05

PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:1    
        1        1        /*M* TOL$GET_DATA   TOLTS LOADER GET DATA program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             PRB=Y,CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11
       12       12        TOL$GET_DATA: PROC (DATA$,
       13       13                   LENGTH,
       14       14                   DCW,
       15       15                   STATUS,
       16       16                   START_LOAD$,
       17       17                   DATA_SIZE,
       18       18                   CALL_SEQUENCE);
       19       19        %EJECT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:2    
       20       20        /* Parameters */
       21       21
       22       22    1      DCL 1 CALL_SEQUENCE ALIGNED,
       23       23    1            2 FDCWP UBIN (18) UNAL,
       24       24    1            2 STATUSP UBIN (18) UNAL,
       25       25    1            2 DECK# UBIN (18) UNAL,
       26       26    1            2 NEXT_ENTRY UBIN (18) UNAL,
       27       27    1            2 CATALOG_CKSUM ALIGNED,
       28       28    1              3 UPPER UBIN (18) UNAL,
       29       29    1              3 LOWER UBIN (18) UNAL,
       30       30    1            2 CATALOG_CHECKSUM REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       31       31    1            2 DECK_OFFSET REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       32       32    1            2 * UBIN (18) UNAL,
       33       33    1            2 ENTRY_COUNT UBIN (18) UNAL,
       34       34    1            2 CARD_COUNT REDEF ENTRY_COUNT UBIN (18) UNAL,
       35       35    1            2 CHECKSUM UBIN (36) ALIGNED,
       36       36    1            2 RELOCATION UBIN (36) ALIGNED,
       37       37    1            2 NO_MORE SBIN (36) ALIGNED;
       38       38    1      DCL DATA$ PTR ALIGNED;
       39       39    1      DCL 1 DATAP REDEF DATA$ ALIGNED,
       40       40    1            2 ADDRESS UBIN (18) UNAL,
       41       41    1            2 * BIT (18) UNAL;
       42       42    1      DCL DATA_SIZE UBIN (36) ALIGNED;
       43       43    1      DCL 1 DCW ALIGNED,
       44       44    1            2 ADDRESS UBIN (18) UNAL,
       45       45    1            2 TYPE UBIN (6) UNAL,
       46       46    1            2 SIZE UBIN (12) UNAL;
       47       47    1      DCL LENGTH UBIN (36) ALIGNED;
       48       48    1      DCL START_LOAD$ PTR ALIGNED;
       49       49    1      DCL 1 STATUS ALIGNED,
       50       50    1            2 HARDWARE_STATUS BIT (36) ALIGNED,
       51       51    1            2 LAST_DCW_POINTER UBIN (18) UNAL,
       52       52    1            2 RESIDUE UBIN (18) UNAL;
       53       53        %EJECT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:3    
       54       54        /* Local Variables */
       55       55
       56       56    1      DCL DATA (0:8191) BASED (DATA$) UBIN (36) ALIGNED;
       57       57    1      DCL ENTRY_ (0:8191) BASED (ENTRY$) UBIN (36) ALIGNED;
       58       58    1      DCL I UBIN (36) ALIGNED;
       59       59    1      DCL LOAD$ PTR ALIGNED;
       60       60    1      DCL MOVE UBIN (36) ALIGNED;
       61       61    1      DCL SEGMENT UBIN (36) ALIGNED;
       62       62    1      DCL 1 DATA_SPLIT (0:8191) BASED (DATA$) ALIGNED,
       63       63    1            2 UPPER UBIN (18) UNAL,
       64       64    1            2 LOWER UBIN (18) UNAL;
       65       65    1      DCL 1 ENTRY_SPLIT (0:8191) BASED (ENTRY$) ALIGNED,
       66       66    1            2 UPPER UBIN (18) UNAL,
       67       67    1            2 LOWER UBIN (18) UNAL;
       68       68    1      DCL ENTRY$ PTR ALIGNED;
       69       69    1      DCL 1 ENTRYP REDEF ENTRY$ ALIGNED,
       70       70    1            2 ADDRESS UBIN (18) UNAL,
       71       71    1            2 * BIT (18) UNAL;
       72       72    1      DCL 1 LOAD BASED (LOAD$) ALIGNED,
       73       73    1            2 TYPE UBIN (3) UNAL,
       74       74    1            2 * UBIN (9) UNAL,
       75       75    1            2 SIZE UBIN (6) UNAL,
       76       76    1            2 ADDRESS UBIN (18) UNAL,
       77       77    1            2 DATA (0:27) UBIN (36) ALIGNED;
       78       78        %EJECT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:4    
       79       79        /* External Entry Points */
       80       80
       81       81    1      DCL TOL$BAD_CARD ENTRY (1);
       82       82    1      DCL TOL$GET_NEXT_DCW ENTRY (3);
       83       83        %EJECT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:5    
       84       84        /* Error Messages */
       85       85
       86       86    1      DCL 1 ER#21 STATIC UNAL,
       87       87    1            2 * CHAR (2) UNAL INIT ('*'),
       88       88    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
       89       89    1            2 * CHAR (30) UNAL INIT ('LOAD_TYPE/LOAD_SIZE %LTT/%LTZ'),
       90       90    1            2 * CHAR (24) UNAL INIT ('FOR CALL TO TOL$GET_DATA');
       91       91    1      DCL 1 ER#22 STATIC UNAL,
       92       92    1            2 * CHAR (2) UNAL INIT ('*'),
       93       93    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
       94       94    1            2 * CHAR (34) UNAL INIT ('LENGTH FOR CALL TO TOL$GET_DATA');
       95       95        %EJECT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:6    
       96       96        /* Main Program */
       97       97
       98       98    1      LOAD$ = START_LOAD$;
       99       99    1      IF (LOAD.TYPE ~= 3)
      100      100    1      THEN CALL TOL$BAD_CARD (VECTOR (ER#21));
      101      101    1      MOVE = LENGTH;
      102      102    2      DO WHILE (MOVE ~= 0 AND DATA_SIZE ~= 0);
      103      103    2         IF (STATUS.RESIDUE = 0 AND DCW.TYPE ~= 0)
      104      104    2         THEN CALL TOL$GET_NEXT_DCW
      105      105    2                    (DCW,
      106      106    2                    CALL_SEQUENCE,
      107      107    2                    STATUS);
      108      108    2         IF (STATUS.RESIDUE = 0)
      109      109    2         THEN DATA_SIZE = 0;
      110      110    3         ELSE DO;
      111      111    3                 IF (STATUS.RESIDUE < MOVE)
      112      112    3                 THEN SEGMENT = STATUS.RESIDUE;
      113      113    3                 ELSE SEGMENT = MOVE;
      114      114    3                 IF (DATA_SIZE < SEGMENT)
      115      115    3                 THEN SEGMENT = DATA_SIZE;
      116      116    3                 ENTRY$ = ADDR (CALL_SEQUENCE);
      117      117    3                 ENTRYP.ADDRESS = DCW.ADDRESS;
      118      118    4                 DO I = 0 TO SEGMENT - 1;
      119      119    4                    DATA (I) = ENTRY_ (I);
      120      120    4                 END;
      121      121    3                 DATA_SIZE = DATA_SIZE - SEGMENT;
      122      122    3                 MOVE = MOVE - SEGMENT;
      123      123    3                 STATUS.RESIDUE = STATUS.RESIDUE - SEGMENT;
      124      124    3                 DCW.ADDRESS = DCW.ADDRESS + SEGMENT;
      125      125    3                 DATAP.ADDRESS = DATAP.ADDRESS + SEGMENT;
      126      126    3              END;
      127      127    2      END;
      128      128    1      IF (MOVE ~= 0)
      129      129    1      THEN CALL TOL$BAD_CARD (VECTOR (ER#22));
      130      130    1      RETURN;
      131      131    1   END TOL$GET_DATA;
      132      132
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:7    

PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:8    
      No diagnostics issued in procedure TOL$GET_DATA.

   Procedure TOL$GET_DATA requires 109 words for executable code.
   Procedure TOL$GET_DATA requires 20 words of local(AUTO) storage.

    No errors detected in file TOL$GET_DATA.:E05TSI    .

PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:9    

 Object Unit name= TOL$GET_DATA                               File name= TOL$GET_DATA.:E05TOU
 UTS= JUL 30 '97 06:26:14.40 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    27     33  TOL$GET_DATA
    1   Proc  even  none   109    155  TOL$GET_DATA
    2  RoData even  none     7      7  TOL$GET_DATA

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        7  TOL$GET_DATA

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 TOL$BAD_CARD
         yes           Std       3 TOL$GET_NEXT_DCW
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:10   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:11   


        1        1        /*M* TOL$GET_DATA   TOLTS LOADER GET DATA program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             PRB=Y,CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11
       12       12        TOL$GET_DATA: PROC (DATA$,

     12  1 000000   000000 700200 xent  TOL$GET_DATA TSX0  ! X66_AUTO_N
         1 000001   000024 000007                    ZERO    20,7

       13       13                   LENGTH,
       14       14                   DCW,
       15       15                   STATUS,
       16       16                   START_LOAD$,
       17       17                   DATA_SIZE,
       18       18                   CALL_SEQUENCE);
       19       19        %EJECT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:12   
       20       20        /* Parameters */
       21       21
       22       22    1      DCL 1 CALL_SEQUENCE ALIGNED,
       23       23    1            2 FDCWP UBIN (18) UNAL,
       24       24    1            2 STATUSP UBIN (18) UNAL,
       25       25    1            2 DECK# UBIN (18) UNAL,
       26       26    1            2 NEXT_ENTRY UBIN (18) UNAL,
       27       27    1            2 CATALOG_CKSUM ALIGNED,
       28       28    1              3 UPPER UBIN (18) UNAL,
       29       29    1              3 LOWER UBIN (18) UNAL,
       30       30    1            2 CATALOG_CHECKSUM REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       31       31    1            2 DECK_OFFSET REDEF CATALOG_CKSUM UBIN (36) ALIGNED,
       32       32    1            2 * UBIN (18) UNAL,
       33       33    1            2 ENTRY_COUNT UBIN (18) UNAL,
       34       34    1            2 CARD_COUNT REDEF ENTRY_COUNT UBIN (18) UNAL,
       35       35    1            2 CHECKSUM UBIN (36) ALIGNED,
       36       36    1            2 RELOCATION UBIN (36) ALIGNED,
       37       37    1            2 NO_MORE SBIN (36) ALIGNED;
       38       38    1      DCL DATA$ PTR ALIGNED;
       39       39    1      DCL 1 DATAP REDEF DATA$ ALIGNED,
       40       40    1            2 ADDRESS UBIN (18) UNAL,
       41       41    1            2 * BIT (18) UNAL;
       42       42    1      DCL DATA_SIZE UBIN (36) ALIGNED;
       43       43    1      DCL 1 DCW ALIGNED,
       44       44    1            2 ADDRESS UBIN (18) UNAL,
       45       45    1            2 TYPE UBIN (6) UNAL,
       46       46    1            2 SIZE UBIN (12) UNAL;
       47       47    1      DCL LENGTH UBIN (36) ALIGNED;
       48       48    1      DCL START_LOAD$ PTR ALIGNED;
       49       49    1      DCL 1 STATUS ALIGNED,
       50       50    1            2 HARDWARE_STATUS BIT (36) ALIGNED,
       51       51    1            2 LAST_DCW_POINTER UBIN (18) UNAL,
       52       52    1            2 RESIDUE UBIN (18) UNAL;
       53       53        %EJECT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:13   
       54       54        /* Local Variables */
       55       55
       56       56    1      DCL DATA (0:8191) BASED (DATA$) UBIN (36) ALIGNED;
       57       57    1      DCL ENTRY_ (0:8191) BASED (ENTRY$) UBIN (36) ALIGNED;
       58       58    1      DCL I UBIN (36) ALIGNED;
       59       59    1      DCL LOAD$ PTR ALIGNED;
       60       60    1      DCL MOVE UBIN (36) ALIGNED;
       61       61    1      DCL SEGMENT UBIN (36) ALIGNED;
       62       62    1      DCL 1 DATA_SPLIT (0:8191) BASED (DATA$) ALIGNED,
       63       63    1            2 UPPER UBIN (18) UNAL,
       64       64    1            2 LOWER UBIN (18) UNAL;
       65       65    1      DCL 1 ENTRY_SPLIT (0:8191) BASED (ENTRY$) ALIGNED,
       66       66    1            2 UPPER UBIN (18) UNAL,
       67       67    1            2 LOWER UBIN (18) UNAL;
       68       68    1      DCL ENTRY$ PTR ALIGNED;
       69       69    1      DCL 1 ENTRYP REDEF ENTRY$ ALIGNED,
       70       70    1            2 ADDRESS UBIN (18) UNAL,
       71       71    1            2 * BIT (18) UNAL;
       72       72    1      DCL 1 LOAD BASED (LOAD$) ALIGNED,
       73       73    1            2 TYPE UBIN (3) UNAL,
       74       74    1            2 * UBIN (9) UNAL,
       75       75    1            2 SIZE UBIN (6) UNAL,
       76       76    1            2 ADDRESS UBIN (18) UNAL,
       77       77    1            2 DATA (0:27) UBIN (36) ALIGNED;
       78       78        %EJECT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:14   
       79       79        /* External Entry Points */
       80       80
       81       81    1      DCL TOL$BAD_CARD ENTRY (1);
       82       82    1      DCL TOL$GET_NEXT_DCW ENTRY (3);
       83       83        %EJECT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:15   
       84       84        /* Error Messages */
       85       85
       86       86    1      DCL 1 ER#21 STATIC UNAL,
       87       87    1            2 * CHAR (2) UNAL INIT ('*'),
       88       88    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
       89       89    1            2 * CHAR (30) UNAL INIT ('LOAD_TYPE/LOAD_SIZE %LTT/%LTZ'),
       90       90    1            2 * CHAR (24) UNAL INIT ('FOR CALL TO TOL$GET_DATA');
       91       91    1      DCL 1 ER#22 STATIC UNAL,
       92       92    1            2 * CHAR (2) UNAL INIT ('*'),
       93       93    1            2 * CHAR (8) UNAL INIT ('ILLEGAL'),
       94       94    1            2 * CHAR (34) UNAL INIT ('LENGTH FOR CALL TO TOL$GET_DATA');
       95       95        %EJECT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:16   
       96       96        /* Main Program */
       97       97
       98       98    1      LOAD$ = START_LOAD$;

     98  1 000002   200007 470500                    LDP0    @START_LOAD$,,AUTO
         1 000003   000000 236100                    LDQ     0,,PR0
         1 000004   200013 756100                    STQ     LOAD$,,AUTO

       99       99    1      IF (LOAD.TYPE ~= 3)

     99  1 000005   200013 471500                    LDP1    LOAD$,,AUTO
         1 000006   100000 236100                    LDQ     0,,PR1
         1 000007   700000 376003                    ANQ     -32768,DU
         1 000010   300000 116003                    CMPQ    98304,DU
         1 000011   000016 600000 1                  TZE     s:101

      100      100    1      THEN CALL TOL$BAD_CARD (VECTOR (ER#21));

    100  1 000012   000002 630400 2                  EPPR0   2
         1 000013   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000014   000000 701000 xent               TSX1    TOL$BAD_CARD
         1 000015   000000 011000                    NOP     0

      101      101    1      MOVE = LENGTH;

    101  1 000016   200004 470500                    LDP0    @LENGTH,,AUTO
         1 000017   000000 235100                    LDA     0,,PR0
         1 000020   200014 755100                    STA     MOVE,,AUTO

      102      102    2      DO WHILE (MOVE ~= 0 AND DATA_SIZE ~= 0);

    102  1 000021   000141 710000 1                  TRA     s:127

      103      103    2         IF (STATUS.RESIDUE = 0 AND DCW.TYPE ~= 0)

    103  1 000022   200006 470500                    LDP0    @STATUS,,AUTO
         1 000023   000001 720100                    LXL0    1,,PR0
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:17   
         1 000024   000042 601000 1                  TNZ     s:108
         1 000025   200005 471500                    LDP1    @DCW,,AUTO
         1 000026   100000 236100                    LDQ     0,,PR1
         1 000027   770000 316007                    CANQ    -4096,DL
         1 000030   000042 600000 1                  TZE     s:108

      104      104    2         THEN CALL TOL$GET_NEXT_DCW

    104  1 000031   200006 236100                    LDQ     @STATUS,,AUTO
         1 000032   200022 756100                    STQ     ENTRY$+4,,AUTO
         1 000033   200011 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         1 000034   200005 235100                    LDA     @DCW,,AUTO
         1 000035   200020 757100                    STAQ    ENTRY$+2,,AUTO
         1 000036   200020 630500                    EPPR0   ENTRY$+2,,AUTO
         1 000037   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000040   000000 701000 xent               TSX1    TOL$GET_NEXT_DCW
         1 000041   000000 011000                    NOP     0

      105      105    2                    (DCW,
      106      106    2                    CALL_SEQUENCE,
      107      107    2                    STATUS);
      108      108    2         IF (STATUS.RESIDUE = 0)

    108  1 000042   200006 470500                    LDP0    @STATUS,,AUTO
         1 000043   000001 720100                    LXL0    1,,PR0
         1 000044   000050 601000 1                  TNZ     s:111

      109      109    2         THEN DATA_SIZE = 0;

    109  1 000045   200010 471500                    LDP1    @DATA_SIZE,,AUTO
         1 000046   100000 450100                    STZ     0,,PR1
         1 000047   000141 710000 1                  TRA     s:127

      110      110    3         ELSE DO;

      111      111    3                 IF (STATUS.RESIDUE < MOVE)

PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:18   
    111  1 000050   000001 236100                    LDQ     1,,PR0
         1 000051   777777 376007                    ANQ     -1,DL
         1 000052   200014 116100                    CMPQ    MOVE,,AUTO
         1 000053   000056 603000 1                  TRC     s:113

      112      112    3                 THEN SEGMENT = STATUS.RESIDUE;

    112  1 000054   200015 756100                    STQ     SEGMENT,,AUTO
         1 000055   000060 710000 1                  TRA     s:114

      113      113    3                 ELSE SEGMENT = MOVE;

    113  1 000056   200014 235100                    LDA     MOVE,,AUTO
         1 000057   200015 755100                    STA     SEGMENT,,AUTO

      114      114    3                 IF (DATA_SIZE < SEGMENT)

    114  1 000060   200010 471500                    LDP1    @DATA_SIZE,,AUTO
         1 000061   100000 236100                    LDQ     0,,PR1
         1 000062   200015 116100                    CMPQ    SEGMENT,,AUTO
         1 000063   000065 603000 1                  TRC     s:116

      115      115    3                 THEN SEGMENT = DATA_SIZE;

    115  1 000064   200015 756100                    STQ     SEGMENT,,AUTO

      116      116    3                 ENTRY$ = ADDR (CALL_SEQUENCE);

    116  1 000065   200011 236100                    LDQ     @CALL_SEQUENCE,,AUTO
         1 000066   200016 756100                    STQ     ENTRY$,,AUTO

      117      117    3                 ENTRYP.ADDRESS = DCW.ADDRESS;

    117  1 000067   200005 473500                    LDP3    @DCW,,AUTO
         1 000070   300000 221100                    LDX1    0,,PR3
         1 000071   200016 741100                    STX1    ENTRY$,,AUTO

PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:19   
      118      118    4                 DO I = 0 TO SEGMENT - 1;

    118  1 000072   200012 450100                    STZ     I,,AUTO
         1 000073   000105 710000 1                  TRA     s:120+3

      119      119    4                    DATA (I) = ENTRY_ (I);

    119  1 000074   200003 470500                    LDP0    @DATA$,,AUTO
         1 000075   000000 471500                    LDP1    0,,PR0
         1 000076   200016 473500                    LDP3    ENTRY$,,AUTO
         1 000077   200012 720100                    LXL0    I,,AUTO
         1 000100   300000 235110                    LDA     0,X0,PR3
         1 000101   100000 755110                    STA     0,X0,PR1

      120      120    4                 END;

    120  1 000102   200012 235100                    LDA     I,,AUTO
         1 000103   000001 035007                    ADLA    1,DL
         1 000104   200012 755100                    STA     I,,AUTO
         1 000105   200012 236100                    LDQ     I,,AUTO
         1 000106   200015 116100                    CMPQ    SEGMENT,,AUTO
         1 000107   000074 602000 1                  TNC     s:119

      121      121    3                 DATA_SIZE = DATA_SIZE - SEGMENT;

    121  1 000110   200010 470500                    LDP0    @DATA_SIZE,,AUTO
         1 000111   000000 236100                    LDQ     0,,PR0
         1 000112   200015 136100                    SBLQ    SEGMENT,,AUTO
         1 000113   000000 756100                    STQ     0,,PR0

      122      122    3                 MOVE = MOVE - SEGMENT;

    122  1 000114   200014 236100                    LDQ     MOVE,,AUTO
         1 000115   200015 136100                    SBLQ    SEGMENT,,AUTO
         1 000116   200014 756100                    STQ     MOVE,,AUTO

      123      123    3                 STATUS.RESIDUE = STATUS.RESIDUE - SEGMENT;
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:20   

    123  1 000117   200006 471500                    LDP1    @STATUS,,AUTO
         1 000120   100001 236100                    LDQ     1,,PR1
         1 000121   777777 376007                    ANQ     -1,DL
         1 000122   200015 136100                    SBLQ    SEGMENT,,AUTO
         1 000123   000000 620006                    EAX0    0,QL
         1 000124   100001 440100                    SXL0    1,,PR1

      124      124    3                 DCW.ADDRESS = DCW.ADDRESS + SEGMENT;

    124  1 000125   200005 473500                    LDP3    @DCW,,AUTO
         1 000126   300000 236100                    LDQ     0,,PR3
         1 000127   000022 772000                    QRL     18
         1 000130   200015 036100                    ADLQ    SEGMENT,,AUTO
         1 000131   000000 621006                    EAX1    0,QL
         1 000132   300000 741100                    STX1    0,,PR3

      125      125    3                 DATAP.ADDRESS = DATAP.ADDRESS + SEGMENT;

    125  1 000133   200003 474500                    LDP4    @DATA$,,AUTO
         1 000134   400000 236100                    LDQ     0,,PR4
         1 000135   000022 772000                    QRL     18
         1 000136   200015 036100                    ADLQ    SEGMENT,,AUTO
         1 000137   000000 620006                    EAX0    0,QL
         1 000140   400000 740100                    STX0    0,,PR4

      126      126    3              END;

      127      127    2      END;

    127  1 000141   200014 235100                    LDA     MOVE,,AUTO
         1 000142   000146 600000 1                  TZE     s:128
         1 000143   200010 470500                    LDP0    @DATA_SIZE,,AUTO
         1 000144   000000 235100                    LDA     0,,PR0
         1 000145   000022 601000 1                  TNZ     s:103

      128      128    1      IF (MOVE ~= 0)
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:21   

    128  1 000146   200014 235100                    LDA     MOVE,,AUTO
         1 000147   000154 600000 1                  TZE     s:130

      129      129    1      THEN CALL TOL$BAD_CARD (VECTOR (ER#22));

    129  1 000150   000006 630400 2                  EPPR0   6
         1 000151   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000152   000000 701000 xent               TSX1    TOL$BAD_CARD
         1 000153   000000 011000                    NOP     0

      130      130    1      RETURN;

    130  1 000154   000000 702200 xent               TSX2  ! X66_ARET

ER#21
 Sect OctLoc
   0     000   052040 111114   114105 107101   114040 114117   101104 137124    * ILLEGAL LOAD_T
   0     004   131120 105057   114117 101104   137123 111132   105040 045114    YPE/LOAD_SIZE %L
   0     010   124124 057045   114124 132040   106117 122040   103101 114114    TT/%LTZ FOR CALL
   0     014   040124 117040   124117 114044   107105 124137   104101 124101     TO TOL$GET_DATA

ER#22
 Sect OctLoc
   0     020   052040 111114   114105 107101   114040 114105   116107 124110    * ILLEGAL LENGTH
   0     024   040106 117122   040103 101114   114040 124117   040124 117114     FOR CALL TO TOL
   0     030   044107 105124   137104 101124   101040 040040                    $GET_DATA

(unnamed)
 Sect OctLoc
   2     000   000017 777640   000000 006000   000000 006000   000000 000000    ................
   2     004   000012 777640   000020 006000   000004 006000                    ............
      131      131    1   END TOL$GET_DATA;
      132      132

PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:22   
      No diagnostics issued in procedure TOL$GET_DATA.
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:23   

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    12-   131     31    32     1      0  y   y    7   1 TOL$GET_DATA
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:24   

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              12   1      0 Proc    0                                98   1      2 Assign  0
         $    99   1      5 If      0                               100   1     12 Call    0
             101   1     16 Assign  0                               102   1     21 DoWhil  0
        $$   103   1     22 If      0                          $$   104   1     31 Call    0
             108   1     42 If      0                           $   109   1     45 Assign  0
             110   1     50 Do      0                               111   1     50 If      0
             112   1     54 Assign  0                               113   1     56 Assign  0
         $   114   1     60 If      0                               115   1     64 Assign  0
             116   1     65 Assign  0                               117   1     67 Assign  0
             118   1     72 DoIndx  0                         $$$   119   1     74 Assign  0
             120   1    102 EndInd  0                           $   121   1    110 Assign  0
             122   1    114 Assign  0                           $   123   1    117 Assign  0
         $   124   1    125 Assign  0                           $   125   1    133 Assign  0
             126   1    141 EndDo   0                           $   127   1    141 EndWhi  0
             128   1    146 If      0                               129   1    150 Call    0
             130   1    154 Return  0

  **** Statement type totals  ****

    14 Assign     3 Call       6 If         1 Return     1 DoIndx     1 DoWhil
     1 Do         1 EndInd     1 EndWhi     1 EndDo      1 Proc

 # major stmts=   26 Code/major= 4.19 # stmts=   31 Code/stmt= 3.51  Point total= 97.3
 Cost/major stmt=  3.9 Cost/stmt=  3.3 Total cost=    103.8

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$$$$$$$$$$$$$$$$$$$$$
   6-8  $$$$$$
  8-10  $$$
 10-12
 12-14
 14-16
 16-18
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:25   
 18-20
 20-22
 22-??
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:26   

 **** Variables and constants ****

  ****  Section 000  Data  TOL$GET_DATA

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(576)   r     1 ER#21                     20-0-0/c STRC(396)   r     1 ER#22

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    11-0-0/w PTR         r     1 @CALL_SEQUENCE             3-0-0/w PTR         r     1 @DATA$
    10-0-0/w PTR         r     1 @DATA_SIZE                 5-0-0/w PTR         r     1 @DCW
     4-0-0/w PTR         r     1 @LENGTH                    7-0-0/w PTR         r     1 @START_LOAD$
     6-0-0/w PTR         r     1 @STATUS                   *0-0-0/w STRC(252)   r     1 CALL_SEQUENCE
    *0-0-0/w PTR         r     1 DATA$                     *0-0-0/w UBIN        r     1 DATA_SIZE
    16-0-0/w PTR         r     1 ENTRY$                    12-0-0/w UBIN        r     1 I
    *0-0-0/w UBIN        r     1 LENGTH                    13-0-0/w PTR         r     1 LOAD$
    14-0-0/w UBIN        r     1 MOVE                      15-0-0/w UBIN        r     1 SEGMENT
    *0-0-0/w PTR         r     1 START_LOAD$

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    *0-0-0/w STRC        r     1 DATAP
     0-0-0/b UBIN(18)    r         2 ADDRESS

    *0-0-0/w STRC        r     1 DCW
     0-0-0/b UBIN(18)    r         2 ADDRESS
     0-2-0/b UBIN(6)     r         2 TYPE

    16-0-0/w STRC        r     1 ENTRYP
    16-0-0/b UBIN(18)    r         2 ADDRESS

PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:27   
    *0-0-0/w STRC(72)    r     1 STATUS
     1-2-0/b UBIN(18)    r         2 RESIDUE


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 DATA(0:8191)               0-0-0/w UBIN        r     1 ENTRY_(0:8191)

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1044)  r     1 LOAD
     0-0-0/b UBIN(3)     r         2 TYPE



   Procedure TOL$GET_DATA requires 109 words for executable code.
   Procedure TOL$GET_DATA requires 20 words of local(AUTO) storage.

    No errors detected in file TOL$GET_DATA.:E05TSI    .
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:28   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:29   
          MINI XREF LISTING

CALL_SEQUENCE
        22**DCL        12--PROC      104<>CALL      116--ASSIGN
CALL_SEQUENCE.CATALOG_CKSUM
        27**DCL        30--REDEF      31--REDEF
CALL_SEQUENCE.ENTRY_COUNT
        33**DCL        34--REDEF
DATA
        56**DCL       119<<ASSIGN
DATA$
        38**DCL        12--PROC       39--REDEF      56--IMP-PTR    62--IMP-PTR   119>>ASSIGN
DATAP.ADDRESS
        40**DCL       125<<ASSIGN    125>>ASSIGN
DATA_SIZE
        42**DCL        12--PROC      102>>DOWHILE   109<<ASSIGN    114>>IF        115>>ASSIGN    121<<ASSIGN
       121>>ASSIGN
DCW
        43**DCL        12--PROC      104<>CALL
DCW.ADDRESS
        44**DCL       117>>ASSIGN    124<<ASSIGN    124>>ASSIGN
DCW.TYPE
        45**DCL       103>>IF
ENTRY$
        68**DCL        57--IMP-PTR    65--IMP-PTR    69--REDEF     116<<ASSIGN    119>>ASSIGN
ENTRYP.ADDRESS
        70**DCL       117<<ASSIGN
ENTRY_
        57**DCL       119>>ASSIGN
ER#21
        86**DCL       100--CALL
ER#22
        91**DCL       129--CALL
I
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:30   
        58**DCL       118<<DOINDEX   119>>ASSIGN    119>>ASSIGN
LENGTH
        47**DCL        12--PROC      101>>ASSIGN
LOAD.TYPE
        73**DCL        99>>IF
LOAD$
        59**DCL        72--IMP-PTR    98<<ASSIGN     99>>IF
MOVE
        60**DCL       101<<ASSIGN    102>>DOWHILE   111>>IF        113>>ASSIGN    122<<ASSIGN    122>>ASSIGN
       128>>IF
SEGMENT
        61**DCL       112<<ASSIGN    113<<ASSIGN    114>>IF        115<<ASSIGN    118>>DOINDEX   121>>ASSIGN
       122>>ASSIGN    123>>ASSIGN    124>>ASSIGN    125>>ASSIGN
START_LOAD$
        48**DCL        12--PROC       98>>ASSIGN
STATUS
        49**DCL        12--PROC      104<>CALL
STATUS.RESIDUE
        52**DCL       103>>IF        108>>IF        111>>IF        112>>ASSIGN    123<<ASSIGN    123>>ASSIGN
TOL$BAD_CARD
        81**DCL-ENT   100--CALL      129--CALL
TOL$GET_NEXT_DCW
        82**DCL-ENT   104--CALL
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:31   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:32   
              FULL UREF LISTING

CALL_SEQUENCE.CARD_COUNT
        34**DCL
CALL_SEQUENCE.CATALOG_CHECKSUM
        30**DCL
CALL_SEQUENCE.CATALOG_CKSUM.LOWER
        29**DCL
CALL_SEQUENCE.CATALOG_CKSUM.UPPER
        28**DCL
CALL_SEQUENCE.CHECKSUM
        35**DCL
CALL_SEQUENCE.DECK#
        25**DCL
CALL_SEQUENCE.DECK_OFFSET
        31**DCL
CALL_SEQUENCE.FDCWP
        23**DCL
CALL_SEQUENCE.NEXT_ENTRY
        26**DCL
CALL_SEQUENCE.NO_MORE
        37**DCL
CALL_SEQUENCE.RELOCATION
        36**DCL
CALL_SEQUENCE.STATUSP
        24**DCL
DATAP
        39**DCL
DATA_SPLIT
        62**DCL
DATA_SPLIT.LOWER
        64**DCL
DATA_SPLIT.UPPER
        63**DCL
PL6.E3A0      #001=TOL$GET_DATA File=TOL$GET_DATA.:E05TSI                        WED 07/30/97 06:26 Page:33   
DCW.SIZE
        46**DCL
ENTRYP
        69**DCL
ENTRY_SPLIT
        65**DCL
ENTRY_SPLIT.LOWER
        67**DCL
ENTRY_SPLIT.UPPER
        66**DCL
LOAD
        72**DCL
LOAD.ADDRESS
        76**DCL
LOAD.DATA
        77**DCL
LOAD.SIZE
        75**DCL
STATUS.HARDWARE_STATUS
        50**DCL
STATUS.LAST_DCW_POINTER
        51**DCL
TOL$GET_DATA
        12**PROC
