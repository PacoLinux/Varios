VERSION E05

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:1    
        1        1        /*M* DUS$ND_SRCH Overlay node utility routines for User DELTA */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*P* NAME: DYS$ND_SRCH
        9        9             PURPOSE: This module contains the routines used to manipulate
       10       10                      DELTA's overlay control tables.
       11       11             DESCRIPTION: This module contains various entry points that are
       12       12                          used by User DELTA to handle overlaid programs. */
       13       13        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:2    
       14       14        /*F* NAME: DDS$ND_SRCH
       15       15             PURPOSE: This routine finds an overlay node, given the overlay
       16       16                      name.
       17       17             DESCRIPTION: The Read-only-segment tree table is searched for the
       18       18                          desired overlay node. A linear search is performed on
       19       19                          the entire tree table. */
       20       20        /*D* NAME: DDS$ND_SRCH
       21       21             ENTRY: DDS$ND_SRCH
       22       22             CALL: CALL DDS$ND_SRCH( SYM$, N# ) ALTRET( not-found );
       23       23             INPUT: SYM$ - Pointer to TEXTC name of desired overlay node.
       24       24             OUTPUT: NODE - Node number if found.
       25       25             SCRATCH: Local AUTO only.
       26       26             DESCRIPTION: The Read-only-segment tree table is searched for the
       27       27                          desired overlay node. A linear search is performed on
       28       28                          the entire tree table. RETURNs if the search is
       29       29                          successful, else ALTRETURNs. */
       30       30                                                /**/
       31       31        DDS$ND_SRCH: PROC( SYM$, N# ) ALTRET;
       32       32                                                /**/
       33       33    1   DCL SYM$ PTR;
       34       34    1   DCL IC REDEF SYM$ UBIN;
       35       35    1   DCL N# UBIN;
       36       36    1   DCL TSYM$ PTR;
       37       37    1   DCL ICT UBIN;
       38       38    1   DCL ICN UBIN;
       39       39    1   DCL BACK SBIN;
       40       40    1   DCL PREV SBIN;
       41       41    1   DCL GOTAIL BIT(1) ALIGNED;
       42       42    1   DCL NOMEM BIT(1) ALIGNED;
       43       43    1   DCL I SBIN;
       44       44    1   DCL NODE$ PTR;
       45       45    1   DCL TREE$ PTR;
       46       46    1   DCL NODE SBIN;
       47       47    1   DCL NODENUM SBIN;
       48       48        %INCLUDE DD$BASED;
       49     1351        %TEXT$C;
       50     1356        %DU$TREE (NAME="DU$TREE(0:0)");
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:3    
       51     1362        %DU$NODE (NAME="DU$NODE(0:0)");
       52     1372        %INCLUDE DD_ERR_C;
       53     1769        %SUB @PAGE=0 /* @PAGE */;
       54     1770        %SUB @PSIZ=1024 /* @PSIZ */;
       55     1771        %INCLUDE B$OBJECT_C;
       56     5201        %B$RECORDSUBS;
       57     5229        %B$TREE_TABLE (HDR_NAME=B$TREEHDR,NODE_NAME="B$NODE(0:0)");
       58     5287        %B$EDEF;
       59     5357        %B$SDEF;
       60     5411        %INCLUDE XUH_MACRO_C;
       61     5495        %INCLUDE DD_SD_M;
       62     6831        %S_D;
       63     8149        %INCLUDE M_INFO_C;
       64     8289        %INCLUDE B$JIT;
       65     8579    1   DCL B$JIT$ PTR SYMREF;
       66     8580    1   DCL DD_RUMNODE$ PTR SYMREF;
       67     8581    1   DCL DDE$ERROR ENTRY(0);
       68     8582    1   DCL DDM$GETMEM ENTRY(3) ALTRET;
       69     8583    1   DCL DDM$PUTMEM ENTRY(3) ALTRET;
       70     8584    1   DCL DDQ$READLM ENTRY(7) ALTRET;
       71     8585                                                /**/
       72     8586    1        NODE$ = S_D.B$TREE$;
       73     8587    1        NODENUM = S_D.NODE#M1;
       74     8588    1        TSYM$ = SYM$;
       75     8589    2        DO NODE = 0 TO NODENUM;
       76     8590    2             IF NODE$ -> B$NODE.NAME$( 0 ) -> TEXT$C.TXT = TSYM$ -> TEXT$C.TXT
       77     8591    3             THEN DO;
       78     8592    3                  N# = NODE;
       79     8593    3                  RETURN;                  /* Got it */
       80     8594    3                END;
       81     8595    2             NODE$ = PINCRW( NODE$, SIZEW( B$NODE ) );
       82     8596    2           END;
       83     8597    1        S_D.ERROR = E@BADNODE;             /* E@BADNODE */
       84     8598                                                /**/
       85     8599    1        ALTRETURN;
       86     8600                                                /**/
       87     8601        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:4    
       88     8602        /*F* NAME: DDS$IC2NODE
       89     8603             PURPOSE: To find the node associated with the given IC value.
       90     8604             DESCRIPTION: Searches the tree table in the read-only-segment for
       91     8605                          the node containing the given IC value. */
       92     8606        /*D* NAME: DDS$IC2NODE
       93     8607             ENTRY: DDS$IC2NODE
       94     8608             CALL: CALL DDS$IC2NODE( IC ) ALTRET( program bug );
       95     8609                   CALL DDS$IC2NODE( IC, N# ) ALTRET( program bug );
       96     8610             INPUT: IC - Address in IS.
       97     8611             OUTPUT: S_D.NODE - Node containing IC.
       98     8612                     S_D.EDEF$ - Ptr to entdefs.
       99     8613                     S_D.EDEF_END$ - Ptr beyond entdefs end.
      100     8614                     S_D.SDEF$ - Ptr to symdefs.
      101     8615                     S_D.SDEF_END$ - Ptr beyond symdefs end.
      102     8616                     S_D.DNAME$ - Ptr to def names.
      103     8617                     N# - Returned only if called with 2 args.
      104     8618             SCRATCH: Local AUTO only.
      105     8619             DESCRIPTION: Searches the tree table in the read-only-segment for
      106     8620                          the node containing the given IC value. The IC value
      107     8621                          is checked to determine if it is in data or procedure.
      108     8622                          The appropriate tree is then searched. The tree has
      109     8623                          been sorted by backwards memory location in the table
      110     8624                          DU$TREE. RETURNs when done, ALTRETURNs only if a
      111     8625                          programming error is detected. */
      112     8626        /*D* Current Program Defs are left alone if called with 2 arguments. */
      113     8627                                                /**/
      114     8628    1   DDS$IC2NODE: ENTRY( SYM$, N# ) ALTRET;
      115     8629                                                /**/
      116     8630    1        ICT = IC;
      117     8631    1        NODE = S_D.TREE$ -> DU$TREE.NEXT#( S_D.NODE#M1 + 1 );
              8631                 /* Start of linked list */
      118     8632    2        DO WHILE ( NODE >= 0 );
      119     8633    2             IF ICT < S_D.PADDR
      120     8634    2             THEN ICN = S_D.B$TREE$ -> B$NODE.DADDR( NODE );
      121     8635    2             ELSE ICN = S_D.B$TREE$ -> B$NODE.PADDR( NODE );
      122     8636    2             IF ICT >= ICN
      123     8637    3             THEN DO;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:5    
      124     8638    3                  IF (ICT >= %LIBLO*1024 - %ISEGLO*1024) AND
      125     8639    3                    (B$JIT.TDP <= %LIBLO) AND (B$JIT.PCL > 0)
      126     8640    3                  THEN NODE = 0;
      127     8641    3                  IF ADDR( N# ) = ADDR( NIL )
      128     8642    4                  THEN DO;
      129     8643    4                       NODE$ = PINCRW( S_D.NODESEG$, SIZEW( DU$NODE ) * NODE );
      130     8644    4                       S_D.NODE = NODE;
      131     8645    4                       S_D.EDEF$ = NODE$ -> DU$NODE.EDEF$( 0 );
      132     8646    4                       S_D.EDEF_END$ = NODE$ -> DU$NODE.EDEF_END$( 0 );
      133     8647    4                       S_D.SDEF$ = NODE$ -> DU$NODE.SDEF$( 0 );
      134     8648    4                       S_D.SDEF_END$ = NODE$ -> DU$NODE.SDEF_END$( 0 );
      135     8649    4                       S_D.DNAME$ = NODE$ -> DU$NODE.DNAME$( 0 );
      136     8650    4                     END;
      137     8651    3                  ELSE N# = NODE;
      138     8652    3                  RETURN;
      139     8653    3                END;
      140     8654    2             NODE = S_D.TREE$ -> DU$TREE.NEXT#( NODE );
      141     8655    2           END;
      142     8656                                                /**/
      143     8657    1        S_D.ERROR = E@DELBUG;              /* E@DELBUG */
      144     8658    1        CALL DDE$ERROR;
      145     8659    1        ALTRETURN;
      146     8660                                                /**/
      147     8661        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:6    
      148     8662        /*F* NAME: DDS$EMTREE
      149     8663             PURPOSE: To establish the in memory overlay tree.
      150     8664             DESCRIPTION: This routine establishes the in memory overlay tree
      151     8665                          as a forward linked list. The nodes that are linked
      152     8666                          together are in descending memory locations. As the
      153     8667                          linked list is built, any unused overlay defs records
      154     8668                          are removed from memory. After the linked list is built
      155     8669                          any program defs that belong in memory but are not
      156     8670                          currently resident are brought into memory. This routine
      157     8671                          is called after every user program M$OLAY reported to
      158     8672                          DELTA. */
      159     8673        /*D* NAME: DDS$EMTREE
      160     8674             ENTRY: DDS$EMTREE
      161     8675             CALL: CALL DDS$EMTREE ALTRET( insufficent memory );
      162     8676             SCRATCH: Local AUTO only.
      163     8677             DESCRIPTION: This routine establishes the in memory overlay tree
      164     8678                          as a forward linked list. The nodes that are linked
      165     8679                          together are in descending memory locations. As the
      166     8680                          linked list is built, any unused overlay defs records
      167     8681                          are removed from memory. After the linked list is built
      168     8682                          any program defs that belong in memory but are not
      169     8683                          currently resident are brought into memory. This routine
      170     8684                          is called after every user program M$OLAY reported to
      171     8685                          DELTA. RETURNs when complete, ALTRETURNs if insufficent
      172     8686                          memory to read program defs into. */
      173     8687                                                /**/
      174     8688    1   DDS$EMTREE: ENTRY ALTRET;
      175     8689                                                /**/
      176     8690        /* Link tree & remove unused program defs */
      177     8691    1        TREE$ = S_D.MTREE$;
      178     8692    1        NODENUM = S_D.NODE#M1;
      179     8693    1        CALL TREE_INIT;
      180     8694    1        GOTAIL = '0'B;
      181     8695    2        DO I = 0 TO NODENUM;
      182     8696    2             NODE = S_D.NODESEG$ -> DU$NODE.INDX#( I );
      183     8697    2             IF S_D.B$TREE$ -> B$NODE.FLGS.NOW_IN( NODE )
      184     8698    3             THEN DO;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:7    
      185     8699    3                  TREE$ -> DU$TREE.NOW_IN( NODE ) = '1'B;
      186     8700    3                  IF GOTAIL
      187     8701    3                  THEN TREE$ -> DU$TREE.NEXT#( PREV ) = NODE;
      188     8702    4                  ELSE DO;
      189     8703    4                       GOTAIL = '1'B;
      190     8704    4                       TREE$ -> DU$TREE.NEXT#( NODENUM + 1 ) = NODE;
      191     8705    4                     END;
      192     8706    3                  PREV = NODE;
      193     8707    3                END;
      194     8708    2             ELSE CALL UNLOAD_DEFS;
      195     8709    2           END;
      196     8710        /* Now load program defs as necessary */
      197     8711    1        NODE = TREE$ -> DU$TREE.NEXT#( NODENUM + 1 ); /* Start of linked list */
      198     8712    1        NOMEM = '0'B;
      199     8713    2        DO WHILE ( NODE >= 0 );
      200     8714    2             CALL LOAD_DEFS;               /* Ignore altret */
      201     8715    2             NODE = TREE$ -> DU$TREE.NEXT#( NODE );
      202     8716    2           END;
      203     8717    1        CALL CHECK_MEM;
      204     8718                                                /**/
      205     8719    1        RETURN;
      206     8720                                                /**/
      207     8721        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:8    
      208     8722        /*F* NAME: DDS$EUTREE
      209     8723             PURPOSE: To establish the specified (USE NODE) overlay tree.
      210     8724             DESCRIPTION: This routine establishes the specified overlay tree
      211     8725                          as a forward linked list. The nodes that are linked
      212     8726                          together are in descending memory locations. Prior to
      213     8727                          building the linked list, any program defs that are
      214     8728                          currently in memory but whose corresponding overlay
      215     8729                          node is not in memory are released from memory. As the
      216     8730                          linked list is built, any program defs that belong in
      217     8731                          memory but are not currently resident are brought into
      218     8732                          memory. This routine is called by the USE NODE do routine. */
      219     8733        /*D* NAME: DDS$EUTREE
      220     8734             ENTRY: DDS$EUTREE
      221     8735             CALL: CALL DDS$EUTREE ALTRET( insufficient memory );
      222     8736             INPUT: S_D.NODE - Object of USE NODE command.
      223     8737             ISCRATCH: Local AUTO only.
      224     8738             DESCRIPTION: This routine establishes the specified overlay tree
      225     8739                          as a forward linked list. The nodes that are linked
      226     8740                          together are in descending memory locations. Prior to
      227     8741                          building the linked list, any program defs that are
      228     8742                          currently in memory but whose corresponding overlay
      229     8743                          node is not in memory are released from memory. As the
      230     8744                          linked list is built, any program defs that belong in
      231     8745                          memory but are not currently resident are brought into
      232     8746                          memory. This routine is called by the USE NODE do routine.
      233     8747                          RETURNs when complete, ALTRETURNs if insufficient memory
      234     8748                          to read program defs into. Note that program defs for
      235     8749                          a node not in memory may be released and then read back
      236     8750                          into memory again if their USE NODE trees overlap. */
      237     8751                                                /**/
      238     8752    1   DDS$EUTREE: ENTRY ALTRET;
      239     8753                                                /**/
      240     8754    1        NODENUM = S_D.NODE#M1;
      241     8755    1        TREE$ = S_D.UTREE$;
      242     8756        /* Remove current USE NODE program defs if corresponding node not in memory */
      243     8757    1        NODE = TREE$ -> DU$TREE.NEXT#( NODENUM + 1 );
      244     8758    2        DO WHILE ( NODE >= 0 );
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:9    
      245     8759    2             IF NOT S_D.B$TREE$ -> B$NODE.FLGS.NOW_IN( NODE )
      246     8760    2             THEN CALL UNLOAD_DEFS;
      247     8761    2             NODE = TREE$ -> DU$TREE.NEXT#( NODE );
      248     8762    2           END;
      249     8763        /* Now link up tree using backwards path & load program defs as necessary */
      250     8764    1        NODE = S_D.NODE;
      251     8765    1        CALL TREE_INIT;
      252     8766    1        NOMEM = '0'B;
      253     8767    1        TREE$ -> DU$TREE.NEXT#( NODENUM + 1 ) = NODE;
      254     8768    2        DO WHILE ( NODE >= 0 );
      255     8769    2             BACK = S_D.B$TREE$ -> B$NODE.BACK#( NODE );
      256     8770    2             TREE$ -> DU$TREE.NEXT#( NODE ) = BACK;
      257     8771    2             TREE$ -> DU$TREE.NOW_IN( NODE ) = '1'B;
      258     8772    2             CALL LOAD_DEFS;               /* Ignore altret */
      259     8773    2             NODE = BACK;
      260     8774    2           END;
      261     8775    1        CALL CHECK_MEM;
      262     8776                                                /**/
      263     8777    1        RETURN;
      264     8778                                                /**/
      265     8779        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:10   
      266     8780                                                /**/
      267     8781    1   TREE_INIT: PROC;
      268     8782                                                /**/
      269     8783    2   DCL I SBIN;
      270     8784                                                /**/
      271     8785    3        DO I = 0 TO NODENUM;
      272     8786    3             TREE$ -> DU$TREE.NEXT#( I ) = -1;
      273     8787    3             TREE$ -> DU$TREE.NOW_IN( I ) = '0'B;
      274     8788    3           END;
      275     8789                                                /**/
      276     8790    2        RETURN;
      277     8791                                                /**/
      278     8792    2   END TREE_INIT;
      279     8793                                                /**/
      280     8794        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:11   
      281     8795                                                /**/
      282     8796    1   UNLOAD_DEFS: PROC;
      283     8797                                                /**/
      284     8798    2   DCL 1 SPACE BASED ALIGNED,
      285     8799    2         2 * CHAR( S );
      286     8800    2   DCL S UBIN;
      287     8801    2   DCL W SBIN;
      288     8802    2   DCL ST$ PTR;
      289     8803    2   DCL EN$ PTR;
      290     8804    2   DCL NX$ PTR;
      291     8805    2   DCL I SBIN;
      292     8806    2   DCL NODE$ PTR;
      293     8807                                                /**/
      294     8808    2        NODE$ = PINCRW( S_D.NODESEG$, SIZEW( DU$NODE ) * NODE );
      295     8809    2        IF NODE$ -> DU$NODE.GOTDEFS( 0 )
      296     8810    3        THEN DO;
      297     8811    3             ST$ = NODE$ -> DU$NODE.DNAME$( 0 );
      298     8812    3             EN$ = PINCRW( NODE$ -> DU$NODE.SDEF_END$( 0 ), SIZEW( B$SDEF ) );
      299     8813    3             W = -1 * POFFW( EN$, ST$ );
      300     8814    3             NX$ = S_D.NODESEG_NEXT$;
      301     8815    3             S = POFFC( NX$, EN$ );
      302     8816        /* Move from delete end to end of all defs over delete start */
      303     8817    3             ST$ -> SPACE = EN$ -> SPACE;
      304     8818        /* Reset current node just deleted */
      305     8819    3             NODE$ -> DU$NODE.GOTDEFS( 0 ) = '0'B;
      306     8820    3             NODE$ -> DU$NODE.DNAME$( 0 ) = ADDR( NIL );
      307     8821    3             NODE$ -> DU$NODE.EDEF$( 0 ) = ADDR( NIL );
      308     8822    3             NODE$ -> DU$NODE.EDEF_END$( 0 ) = ADDR( NIL );
      309     8823    3             NODE$ -> DU$NODE.SDEF$( 0 ) = ADDR( NIL );
      310     8824    3             NODE$ -> DU$NODE.SDEF_END$( 0 ) = ADDR( NIL );
      311     8825        /* Change program defs pointers */
      312     8826    4             DO I = 1 TO NODENUM; /* Bypass root, which is not in this segment */
      313     8827    4                  NODE$ = PINCRW( S_D.NODESEG$, SIZEW( DU$NODE ) * I );
      314     8828    4                  IF ( NODE$ -> DU$NODE.DNAME$( 0 ) ~= ADDR( NIL ) )
      315     8829    4                    AND ( NODE$ -> DU$NODE.DNAME$( 0 ) > ST$ )
      316     8830    5                  THEN DO;
      317     8831    5                       CALL PTRW( NODE$ -> DU$NODE.DNAME$( 0 ) );
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:12   
      318     8832    5                       CALL PTRW( NODE$ -> DU$NODE.EDEF$( 0 ) );
      319     8833    5                       CALL PTRW( NODE$ -> DU$NODE.EDEF_END$( 0 ) );
      320     8834    5                       CALL PTRW( NODE$ -> DU$NODE.SDEF$( 0 ) );
      321     8835    5                       CALL PTRW( NODE$ -> DU$NODE.SDEF_END$( 0 ) );
      322     8836    5                     END;
      323     8837    4                END;
      324     8838        /* Change current memory allocation pointer */
      325     8839    3             S_D.NODESEG_NEXT$ = PINCRW( NX$, W );
      326     8840    3           END;
      327     8841                                                /**/
      328     8842    2        RETURN;
      329     8843                                                /**/
      330     8844        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:13   
      331     8845                                                /**/
      332     8846    2   PTRW: PROC( PTRW$ );
      333     8847                                                /**/
      334     8848    3   DCL PTRW$ PTR;
      335     8849                                                /**/
      336     8850    3        IF PTRW$ ~= ADDR( NIL )
      337     8851    3        THEN PTRW$ = PINCRW( PTRW$, W );
      338     8852                                                /**/
      339     8853    3        RETURN;
      340     8854                                                /**/
      341     8855    3   END PTRW;
      342     8856                                                /**/
      343     8857    2   END UNLOAD_DEFS;
      344     8858                                                /**/
      345     8859        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:14   
      346     8860                                                /**/
      347     8861    1   LOAD_DEFS: PROC ALTRET;
      348     8862                                                /**/
      349     8863    2   DCL NX$ PTR;
      350     8864    2   DCL US$ PTR;
      351     8865    2   DCL W UBIN;
      352     8866    2   DCL TYPE UBIN;
      353     8867    2   DCL NODE$ PTR;
      354     8868    2   DCL TEMP$ PTR;
      355     8869                                                /**/
      356     8870    2        NODE$ = PINCRW( S_D.NODESEG$, SIZEW( DU$NODE) * NODE );
      357     8871    2        IF NOT NODE$ -> DU$NODE.GOTDEFS( 0 )
      358     8872    3        THEN DO;
      359     8873    3             NX$ = S_D.NODESEG_NEXT$;
      360     8874    3             US$ = S_D.NODESEG_USED$;
      361     8875    3             TYPE = %TYPDNAM;
      362     8876    3             CALL READREC ALTRET( NORECD );
      363     8877    3             NODE$ -> DU$NODE.GOTDEFS( 0 ) = '1'B;
      364     8878    3             NODE$ -> DU$NODE.DNAME$( 0 ) = NX$;
      365     8879    3             NX$ = PINCRW( NX$, W );
      366     8880    3             TYPE = %TYPEDEF;
      367     8881    3             CALL READREC ALTRET( NORECE );
      368     8882    3             NODE$ -> DU$NODE.EDEF$( 0 ) = NX$;
      369     8883    3             TEMP$ = NX$;
      370     8884    3             NX$ = PINCRW( NX$, W );
      371     8885    3             NODE$ -> DU$NODE.EDEF_END$( 0 ) = PINCRW( NX$, -SIZEW( B$EDEF ) );
      372     8886    4             DO WHILE ( TEMP$ <= NODE$ -> DU$NODE.EDEF_END$( 0 ) );
      373     8887    4                  TEMP$ -> B$EDEF.LFLAGS.FAULTAGS = '0'B; /* For TRACE */
      374     8888    4                  TEMP$ = PINCRW( TEMP$, SIZEW( B$EDEF ) );
      375     8889    4                END;
      376     8890    3   NORECE:
      377     8891    3             TYPE = %TYPSDEF;
      378     8892    3             CALL READREC ALTRET( NORECS );
      379     8893    3             NODE$ -> DU$NODE.SDEF$( 0 ) = NX$;
      380     8894    3             NX$ = PINCRW( NX$, W );
      381     8895    3   NORECS:                            /* Always remember end of program defs */
      382     8896    3             NODE$ -> DU$NODE.SDEF_END$( 0 ) = PINCRW( NX$, -SIZEW( B$SDEF ) );
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:15   
      383     8897    3             S_D.NODESEG_NEXT$ = NX$;
      384     8898    3             S_D.NODESEG_USED$ = US$;
      385     8899    3           END;
      386     8900                                                /**/
      387     8901    2        RETURN;
      388     8902                                                /**/
      389     8903    2   NORECD:
      390     8904    2        S_D.NODESEG_NEXT$ = NX$;           /* May get here by altret someday */
      391     8905    2        S_D.NODESEG_USED$ = US$;           /* May have obtained some memory */
      392     8906                                                /**/
      393     8907    2        ALTRETURN;
      394     8908                                                /**/
      395     8909        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:16   
      396     8910                                                /**/
      397     8911    2   READREC: PROC ALTRET;
      398     8912                                                /**/
      399     8913    3   DCL ARS SBIN;
      400     8914                                                /**/
      401     8915    3        IF POFFC( US$, NX$ ) = 0
      402     8916    3        THEN GOTO GETMEM;
      403     8917    3   REREAD:
      404     8918    3        W = POFFC( US$, NX$ );
      405     8919    3        ARS = -1;
      406     8920    3        CALL DDQ$READLM( TYPE, @PAGE, NODE, NX$, W, ARS ) ALTRET( NOREC );
      407     8921    3        IF ARS < 0
      408     8922    3        THEN
      409     8923    3   GETMEM:
      410     8924    4        DO;
      411     8925    4             CALL DDM$GETMEM( S_D.NODESEG$, @PSIZ ) ALTRET( NOSTR );
      412     8926    4             US$ = PINCRW( US$, @PSIZ );
      413     8927    4             GOTO REREAD;
      414     8928    4           END;
      415     8929    3        W = ( ARS + LENGTHC( ARS ) -1 ) / LENGTHC( ARS ); /* For dnames record */
      416     8930                                                /**/
      417     8931    3        RETURN;
      418     8932                                                /**/
      419     8933    3   NOSTR:
      420     8934    3        IF NOT NOMEM
      421     8935    4        THEN DO;
      422     8936    4             NOMEM = '1'B;
      423     8937    4             S_D.ERROR = E@OVDEFS;         /* E@OVDEFS */
      424     8938    4             CALL DDE$ERROR;
      425     8939    4           END;
      426     8940    3   NOREC:
      427     8941    3        ALTRETURN;
      428     8942                                                /**/
      429     8943    3   END READREC;
      430     8944                                                /**/
      431     8945    2   END LOAD_DEFS;
      432     8946                                                /**/
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:17   
      433     8947        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:18   
      434     8948                                                /**/
      435     8949    1   CHECK_MEM: PROC;
      436     8950                                                /**/
      437     8951    2   DCL TOBEREL UBIN;
      438     8952                                                /**/
      439     8953    2        TOBEREL = ( POFFW( S_D.NODESEG_USED$, DD_RUMNODE$ ) / @PSIZ )
      440     8954    2          - ( ( POFFW( S_D.NODESEG_NEXT$, DD_RUMNODE$ ) + @PSIZ - 1 ) / @PSIZ );
      441     8955    2        IF TOBEREL > 0
      442     8956    3        THEN DO;
      443     8957    3             TOBEREL = TOBEREL * @PSIZ;
      444     8958    3             CALL DDM$PUTMEM( S_D.NODESEG$, TOBEREL ) ALTRET( DELBUG );
      445     8959    3             S_D.NODESEG_USED$ = PINCRW( S_D.NODESEG_USED$, -TOBEREL );
      446     8960    4             DO WHILE ( '0'B );
      447     8961    4   DELBUG:
      448     8962    4                  S_D.ERROR = E@DELBUG;    /* E@DELBUG */
      449     8963    4                  CALL DDE$ERROR;
      450     8964    4                END;
      451     8965    3           END;
      452     8966                                                /**/
      453     8967    2        RETURN;
      454     8968                                                /**/
      455     8969    2   END CHECK_MEM;
      456     8970                                                /**/
      457     8971    1   END DDS$ND_SRCH;

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:19   
--  Include file information  --

   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   M_INFO_C.:E05TOU  is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$ND_SRCH.

   Procedure DDS$ND_SRCH requires 576 words for executable code.
   Procedure DDS$ND_SRCH requires 34 words of local(AUTO) storage.

    No errors detected in file DUS$ND_SRCH.:E05TSI    .

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:20   

 Object Unit name= DDS$ND_SRCH                                File name= DUS$ND_SRCH.:E05TOU
 UTS= JUL 29 '97 14:59:44.52 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   576   1100  DDS$ND_SRCH
    1  RoData even  none     4      4  DDS$ND_SRCH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  DDS$ND_SRCH
     0     50          yes     yes      Std        2  DDS$IC2NODE
     0    170          yes     yes      Std        0  DDS$EMTREE
     0    274          yes     yes      Std        0  DDS$EUTREE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 DDE$ERROR
 yes     yes           Std       7 DDQ$READLM
 yes     yes           Std       3 DDM$GETMEM
 yes     yes           Std       3 DDM$PUTMEM
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:21   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    S_D$                                  B$JIT$                                DD_RUMNODE$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:22   


        1        1        /*M* DUS$ND_SRCH Overlay node utility routines for User DELTA */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*P* NAME: DYS$ND_SRCH
        9        9             PURPOSE: This module contains the routines used to manipulate
       10       10                      DELTA's overlay control tables.
       11       11             DESCRIPTION: This module contains various entry points that are
       12       12                          used by User DELTA to handle overlaid programs. */
       13       13        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:23   
       14       14        /*F* NAME: DDS$ND_SRCH
       15       15             PURPOSE: This routine finds an overlay node, given the overlay
       16       16                      name.
       17       17             DESCRIPTION: The Read-only-segment tree table is searched for the
       18       18                          desired overlay node. A linear search is performed on
       19       19                          the entire tree table. */
       20       20        /*D* NAME: DDS$ND_SRCH
       21       21             ENTRY: DDS$ND_SRCH
       22       22             CALL: CALL DDS$ND_SRCH( SYM$, N# ) ALTRET( not-found );
       23       23             INPUT: SYM$ - Pointer to TEXTC name of desired overlay node.
       24       24             OUTPUT: NODE - Node number if found.
       25       25             SCRATCH: Local AUTO only.
       26       26             DESCRIPTION: The Read-only-segment tree table is searched for the
       27       27                          desired overlay node. A linear search is performed on
       28       28                          the entire tree table. RETURNs if the search is
       29       29                          successful, else ALTRETURNs. */
       30       30                                                /**/
       31       31        DDS$ND_SRCH: PROC( SYM$, N# ) ALTRET;

     31  0 000000   000000 700200 xent  DDS$ND_SRCH  TSX0  ! X66_AUTO_2
         0 000001   000042 000002                    ZERO    34,2

       32       32                                                /**/
       33       33    1   DCL SYM$ PTR;
       34       34    1   DCL IC REDEF SYM$ UBIN;
       35       35    1   DCL N# UBIN;
       36       36    1   DCL TSYM$ PTR;
       37       37    1   DCL ICT UBIN;
       38       38    1   DCL ICN UBIN;
       39       39    1   DCL BACK SBIN;
       40       40    1   DCL PREV SBIN;
       41       41    1   DCL GOTAIL BIT(1) ALIGNED;
       42       42    1   DCL NOMEM BIT(1) ALIGNED;
       43       43    1   DCL I SBIN;
       44       44    1   DCL NODE$ PTR;
       45       45    1   DCL TREE$ PTR;
       46       46    1   DCL NODE SBIN;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:24   
       47       47    1   DCL NODENUM SBIN;
       48       48        %INCLUDE DD$BASED;
       49     1351        %TEXT$C;
       50     1356        %DU$TREE (NAME="DU$TREE(0:0)");
       51     1362        %DU$NODE (NAME="DU$NODE(0:0)");
       52     1372        %INCLUDE DD_ERR_C;
       53     1769        %SUB @PAGE=0 /* @PAGE */;
       54     1770        %SUB @PSIZ=1024 /* @PSIZ */;
       55     1771        %INCLUDE B$OBJECT_C;
       56     5201        %B$RECORDSUBS;
       57     5229        %B$TREE_TABLE (HDR_NAME=B$TREEHDR,NODE_NAME="B$NODE(0:0)");
       58     5287        %B$EDEF;
       59     5357        %B$SDEF;
       60     5411        %INCLUDE XUH_MACRO_C;
       61     5495        %INCLUDE DD_SD_M;
       62     6831        %S_D;
       63     8149        %INCLUDE M_INFO_C;
       64     8289        %INCLUDE B$JIT;
       65     8579    1   DCL B$JIT$ PTR SYMREF;
       66     8580    1   DCL DD_RUMNODE$ PTR SYMREF;
       67     8581    1   DCL DDE$ERROR ENTRY(0);
       68     8582    1   DCL DDM$GETMEM ENTRY(3) ALTRET;
       69     8583    1   DCL DDM$PUTMEM ENTRY(3) ALTRET;
       70     8584    1   DCL DDQ$READLM ENTRY(7) ALTRET;
       71     8585                                                /**/
       72     8586    1        NODE$ = S_D.B$TREE$;

   8586  0 000002   000000 470400 xsym               LDP0    S_D$
         0 000003   004767 236100                    LDQ     2551,,PR0
         0 000004   200015 756100                    STQ     NODE$,,AUTO

       73     8587    1        NODENUM = S_D.NODE#M1;

   8587  0 000005   004766 235100                    LDA     2550,,PR0
         0 000006   200020 755100                    STA     NODENUM,,AUTO

       74     8588    1        TSYM$ = SYM$;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:25   

   8588  0 000007   200003 471500                    LDP1    @SYM$,,AUTO
         0 000010   100000 236100                    LDQ     0,,PR1
         0 000011   200005 756100                    STQ     TSYM$,,AUTO

       75     8589    2        DO NODE = 0 TO NODENUM;

   8589  0 000012   200017 450100                    STZ     NODE,,AUTO
         0 000013   000041 710000 0                  TRA     s:8596+1

       76     8590    2             IF NODE$ -> B$NODE.NAME$( 0 ) -> TEXT$C.TXT = TSYM$ -> TEXT$C.TXT

   8590  0 000014   200015 470500                    LDP0    NODE$,,AUTO
         0 000015   000000 471500                    LDP1    0,,PR0
         0 000016   100000 236100                    LDQ     0,,PR1
         0 000017   000033 772000                    QRL     27
         0 000020   200005 473500                    LDP3    TSYM$,,AUTO
         0 000021   000000 620006                    EAX0    0,QL
         0 000022   300000 236100                    LDQ     0,,PR3
         0 000023   000033 772000                    QRL     27
         0 000024   000000 621006                    EAX1    0,QL
         0 000025   040140 106540                    CMPC    fill='040'O
         0 000026   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         0 000027   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         0 000030   000035 601000 0                  TNZ     s:8595

       77     8591    3             THEN DO;

       78     8592    3                  N# = NODE;

   8592  0 000031   200017 235100                    LDA     NODE,,AUTO
         0 000032   200004 474500                    LDP4    @N#,,AUTO
         0 000033   400000 755100                    STA     0,,PR4

       79     8593    3                  RETURN;                  /* Got it */

   8593  0 000034   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:26   

       80     8594    3                END;
       81     8595    2             NODE$ = PINCRW( NODE$, SIZEW( B$NODE ) );

   8595  0 000035   200015 236100                    LDQ     NODE$,,AUTO
         0 000036   000006 036003                    ADLQ    6,DU
         0 000037   200015 756100                    STQ     NODE$,,AUTO

       82     8596    2           END;

   8596  0 000040   200017 054100                    AOS     NODE,,AUTO
         0 000041   200017 236100                    LDQ     NODE,,AUTO
         0 000042   200020 116100                    CMPQ    NODENUM,,AUTO
         0 000043   000014 604400 0                  TMOZ    s:8590

       83     8597    1        S_D.ERROR = E@BADNODE;             /* E@BADNODE */

   8597  0 000044   000170 235007                    LDA     120,DL
         0 000045   000000 470400 xsym               LDP0    S_D$
         0 000046   000013 755100                    STA     11,,PR0

       84     8598                                                /**/
       85     8599    1        ALTRETURN;

   8599  0 000047   000000 702200 xent               TSX2  ! X66_AALT

       86     8600                                                /**/
       87     8601        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:27   
       88     8602        /*F* NAME: DDS$IC2NODE
       89     8603             PURPOSE: To find the node associated with the given IC value.
       90     8604             DESCRIPTION: Searches the tree table in the read-only-segment for
       91     8605                          the node containing the given IC value. */
       92     8606        /*D* NAME: DDS$IC2NODE
       93     8607             ENTRY: DDS$IC2NODE
       94     8608             CALL: CALL DDS$IC2NODE( IC ) ALTRET( program bug );
       95     8609                   CALL DDS$IC2NODE( IC, N# ) ALTRET( program bug );
       96     8610             INPUT: IC - Address in IS.
       97     8611             OUTPUT: S_D.NODE - Node containing IC.
       98     8612                     S_D.EDEF$ - Ptr to entdefs.
       99     8613                     S_D.EDEF_END$ - Ptr beyond entdefs end.
      100     8614                     S_D.SDEF$ - Ptr to symdefs.
      101     8615                     S_D.SDEF_END$ - Ptr beyond symdefs end.
      102     8616                     S_D.DNAME$ - Ptr to def names.
      103     8617                     N# - Returned only if called with 2 args.
      104     8618             SCRATCH: Local AUTO only.
      105     8619             DESCRIPTION: Searches the tree table in the read-only-segment for
      106     8620                          the node containing the given IC value. The IC value
      107     8621                          is checked to determine if it is in data or procedure.
      108     8622                          The appropriate tree is then searched. The tree has
      109     8623                          been sorted by backwards memory location in the table
      110     8624                          DU$TREE. RETURNs when done, ALTRETURNs only if a
      111     8625                          programming error is detected. */
      112     8626        /*D* Current Program Defs are left alone if called with 2 arguments. */
      113     8627                                                /**/
      114     8628    1   DDS$IC2NODE: ENTRY( SYM$, N# ) ALTRET;

   8628  0 000050   000000 700200 xent  DDS$IC2NODE  TSX0  ! X66_AUTO_2
         0 000051   000042 000002                    ZERO    34,2

      115     8629                                                /**/
      116     8630    1        ICT = IC;

   8630  0 000052   200003 470500                    LDP0    @SYM$,,AUTO
         0 000053   000000 235100                    LDA     0,,PR0
         0 000054   200006 755100                    STA     ICT,,AUTO
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:28   

      117     8631    1        NODE = S_D.TREE$ -> DU$TREE.NEXT#( S_D.NODE#M1 + 1 );
              8631                 /* Start of linked list */

   8631  0 000055   000000 471400 xsym               LDP1    S_D$
         0 000056   104761 473500                    LDP3    2545,,PR1
         0 000057   104766 236100                    LDQ     2550,,PR1
         0 000060   000003 402007                    MPY     3,DL
         0 000061   300003 235106                    LDA     3,QL,PR3
         0 000062   200017 755100                    STA     NODE,,AUTO

      118     8632    2        DO WHILE ( NODE >= 0 );

   8632  0 000063   000161 604000 0                  TMI     s:8657

      119     8633    2             IF ICT < S_D.PADDR

   8633  0 000064   000000 470400 xsym               LDP0    S_D$
         0 000065   200006 236100                    LDQ     ICT,,AUTO
         0 000066   004765 116100                    CMPQ    2549,,PR0
         0 000067   000077 603000 0                  TRC     s:8635

      120     8634    2             THEN ICN = S_D.B$TREE$ -> B$NODE.DADDR( NODE );

   8634  0 000070   004767 471500                    LDP1    2551,,PR0
         0 000071   200017 236100                    LDQ     NODE,,AUTO
         0 000072   000006 402007                    MPY     6,DL
         0 000073   100004 236106                    LDQ     4,QL,PR1
         0 000074   000022 772000                    QRL     18
         0 000075   200007 756100                    STQ     ICN,,AUTO
         0 000076   000105 710000 0                  TRA     s:8636

      121     8635    2             ELSE ICN = S_D.B$TREE$ -> B$NODE.PADDR( NODE );

   8635  0 000077   004767 471500                    LDP1    2551,,PR0
         0 000100   200017 236100                    LDQ     NODE,,AUTO
         0 000101   000006 402007                    MPY     6,DL
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:29   
         0 000102   100003 236106                    LDQ     3,QL,PR1
         0 000103   000022 772000                    QRL     18
         0 000104   200007 756100                    STQ     ICN,,AUTO

      122     8636    2             IF ICT >= ICN

   8636  0 000105   200006 116100                    CMPQ    ICT,,AUTO
         0 000106   000110 600000 0                  TZE     s:8638
         0 000107   000153 603000 0                  TRC     s:8654

      123     8637    3             THEN DO;

      124     8638    3                  IF (ICT >= %LIBLO*1024 - %ISEGLO*1024) AND

   8638  0 000110   200006 235100                    LDA     ICT,,AUTO
         0 000111   700000 115007                    CMPA    -32768,DL
         0 000112   000122 602000 0                  TNC     s:8641
         0 000113   000000 473400 xsym               LDP3    B$JIT$
         0 000114   300204 220100                    LDX0    132,,PR3
         0 000115   000441 100003                    CMPX0   289,DU
         0 000116   000122 603000 0                  TRC     s:8641
         0 000117   300215 721100                    LXL1    141,,PR3
         0 000120   000122 600000 0                  TZE     s:8641

      125     8639    3                    (B$JIT.TDP <= %LIBLO) AND (B$JIT.PCL > 0)
      126     8640    3                  THEN NODE = 0;

   8640  0 000121   200017 450100                    STZ     NODE,,AUTO

      127     8641    3                  IF ADDR( N# ) = ADDR( NIL )

   8641  0 000122   200004 236100                    LDQ     @N#,,AUTO
         0 000123   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000124   000147 601000 0                  TNZ     s:8651

      128     8642    4                  THEN DO;

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:30   
      129     8643    4                       NODE$ = PINCRW( S_D.NODESEG$, SIZEW( DU$NODE ) * NODE );

   8643  0 000125   005003 473500                    LDP3    2563,,PR0
         0 000126   200017 236100                    LDQ     NODE,,AUTO
         0 000127   000007 402007                    MPY     7,DL
         0 000130   300000 634506                    EPPR4   0,QL,PR3
         0 000131   200015 454500                    STP4    NODE$,,AUTO

      130     8644    4                       S_D.NODE = NODE;

   8644  0 000132   200017 235100                    LDA     NODE,,AUTO
         0 000133   004706 755100                    STA     2502,,PR0

      131     8645    4                       S_D.EDEF$ = NODE$ -> DU$NODE.EDEF$( 0 );

   8645  0 000134   400002 236100                    LDQ     2,,PR4
         0 000135   001042 756100                    STQ     546,,PR0

      132     8646    4                       S_D.EDEF_END$ = NODE$ -> DU$NODE.EDEF_END$( 0 );

   8646  0 000136   400003 236100                    LDQ     3,,PR4
         0 000137   001044 756100                    STQ     548,,PR0

      133     8647    4                       S_D.SDEF$ = NODE$ -> DU$NODE.SDEF$( 0 );

   8647  0 000140   400004 236100                    LDQ     4,,PR4
         0 000141   001043 756100                    STQ     547,,PR0

      134     8648    4                       S_D.SDEF_END$ = NODE$ -> DU$NODE.SDEF_END$( 0 );

   8648  0 000142   400005 236100                    LDQ     5,,PR4
         0 000143   001045 756100                    STQ     549,,PR0

      135     8649    4                       S_D.DNAME$ = NODE$ -> DU$NODE.DNAME$( 0 );

   8649  0 000144   400006 236100                    LDQ     6,,PR4
         0 000145   001041 756100                    STQ     545,,PR0
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:31   

      136     8650    4                     END;

   8650  0 000146   000152 710000 0                  TRA     s:8652

      137     8651    3                  ELSE N# = NODE;

   8651  0 000147   200017 235100                    LDA     NODE,,AUTO
         0 000150   200004 473500                    LDP3    @N#,,AUTO
         0 000151   300000 755100                    STA     0,,PR3

      138     8652    3                  RETURN;

   8652  0 000152   000000 702200 xent               TSX2  ! X66_ARET

      139     8653    3                END;
      140     8654    2             NODE = S_D.TREE$ -> DU$TREE.NEXT#( NODE );

   8654  0 000153   004761 473500                    LDP3    2545,,PR0
         0 000154   200017 236100                    LDQ     NODE,,AUTO
         0 000155   000003 402007                    MPY     3,DL
         0 000156   300000 235106                    LDA     0,QL,PR3
         0 000157   200017 755100                    STA     NODE,,AUTO

      141     8655    2           END;

   8655  0 000160   000064 605000 0                  TPL     s:8633

      142     8656                                                /**/
      143     8657    1        S_D.ERROR = E@DELBUG;              /* E@DELBUG */

   8657  0 000161   000766 236007                    LDQ     502,DL
         0 000162   000000 470400 xsym               LDP0    S_D$
         0 000163   000013 756100                    STQ     11,,PR0

      144     8658    1        CALL DDE$ERROR;

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:32   
   8658  0 000164   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000165   000000 701000 xent               TSX1    DDE$ERROR
         0 000166   000000 011000                    NOP     0

      145     8659    1        ALTRETURN;

   8659  0 000167   000000 702200 xent               TSX2  ! X66_AALT

      146     8660                                                /**/
      147     8661        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:33   
      148     8662        /*F* NAME: DDS$EMTREE
      149     8663             PURPOSE: To establish the in memory overlay tree.
      150     8664             DESCRIPTION: This routine establishes the in memory overlay tree
      151     8665                          as a forward linked list. The nodes that are linked
      152     8666                          together are in descending memory locations. As the
      153     8667                          linked list is built, any unused overlay defs records
      154     8668                          are removed from memory. After the linked list is built
      155     8669                          any program defs that belong in memory but are not
      156     8670                          currently resident are brought into memory. This routine
      157     8671                          is called after every user program M$OLAY reported to
      158     8672                          DELTA. */
      159     8673        /*D* NAME: DDS$EMTREE
      160     8674             ENTRY: DDS$EMTREE
      161     8675             CALL: CALL DDS$EMTREE ALTRET( insufficent memory );
      162     8676             SCRATCH: Local AUTO only.
      163     8677             DESCRIPTION: This routine establishes the in memory overlay tree
      164     8678                          as a forward linked list. The nodes that are linked
      165     8679                          together are in descending memory locations. As the
      166     8680                          linked list is built, any unused overlay defs records
      167     8681                          are removed from memory. After the linked list is built
      168     8682                          any program defs that belong in memory but are not
      169     8683                          currently resident are brought into memory. This routine
      170     8684                          is called after every user program M$OLAY reported to
      171     8685                          DELTA. RETURNs when complete, ALTRETURNs if insufficent
      172     8686                          memory to read program defs into. */
      173     8687                                                /**/
      174     8688    1   DDS$EMTREE: ENTRY ALTRET;

   8688  0 000170   000000 700200 xent  DDS$EMTREE   TSX0  ! X66_AUTO_2
         0 000171   000042 000002                    ZERO    34,2

      175     8689                                                /**/
      176     8690        /* Link tree & remove unused program defs */
      177     8691    1        TREE$ = S_D.MTREE$;

   8691  0 000172   000000 470400 xsym               LDP0    S_D$
         0 000173   004762 236100                    LDQ     2546,,PR0
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:34   
         0 000174   200016 756100                    STQ     TREE$,,AUTO

      178     8692    1        NODENUM = S_D.NODE#M1;

   8692  0 000175   004766 235100                    LDA     2550,,PR0
         0 000176   200020 755100                    STA     NODENUM,,AUTO

      179     8693    1        CALL TREE_INIT;

   8693  0 000177   000376 701000 0                  TSX1    TREE_INIT
         0 000200   000000 011000                    NOP     0

      180     8694    1        GOTAIL = '0'B;

   8694  0 000201   200012 450100                    STZ     GOTAIL,,AUTO

      181     8695    2        DO I = 0 TO NODENUM;

   8695  0 000202   200014 450100                    STZ     I,,AUTO
         0 000203   000247 710000 0                  TRA     s:8709+1

      182     8696    2             NODE = S_D.NODESEG$ -> DU$NODE.INDX#( I );

   8696  0 000204   000000 470400 xsym               LDP0    S_D$
         0 000205   005003 471500                    LDP1    2563,,PR0
         0 000206   200014 236100                    LDQ     I,,AUTO
         0 000207   000007 402007                    MPY     7,DL
         0 000210   100000 235106                    LDA     0,QL,PR1
         0 000211   200017 755100                    STA     NODE,,AUTO

      183     8697    2             IF S_D.B$TREE$ -> B$NODE.FLGS.NOW_IN( NODE )

   8697  0 000212   004767 473500                    LDP3    2551,,PR0
         0 000213   200017 236100                    LDQ     NODE,,AUTO
         0 000214   000006 402007                    MPY     6,DL
         0 000215   300001 234106                    SZN     1,QL,PR3
         0 000216   000244 605000 0                  TPL     s:8708
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:35   

      184     8698    3             THEN DO;

      185     8699    3                  TREE$ -> DU$TREE.NOW_IN( NODE ) = '1'B;

   8699  0 000217   200017 236100                    LDQ     NODE,,AUTO
         0 000220   000003 402007                    MPY     3,DL
         0 000221   000000 620006                    EAX0    0,QL
         0 000222   400000 236003                    LDQ     -131072,DU
         0 000223   200016 474500                    LDP4    TREE$,,AUTO
         0 000224   400002 756110                    STQ     2,X0,PR4

      186     8700    3                  IF GOTAIL

   8700  0 000225   200012 234100                    SZN     GOTAIL,,AUTO
         0 000226   000234 605000 0                  TPL     s:8703

      187     8701    3                  THEN TREE$ -> DU$TREE.NEXT#( PREV ) = NODE;

   8701  0 000227   200011 236100                    LDQ     PREV,,AUTO
         0 000230   000003 402007                    MPY     3,DL
         0 000231   200017 235100                    LDA     NODE,,AUTO
         0 000232   400000 755106                    STA     0,QL,PR4
         0 000233   000241 710000 0                  TRA     s:8706

      188     8702    4                  ELSE DO;

      189     8703    4                       GOTAIL = '1'B;

   8703  0 000234   200012 756100                    STQ     GOTAIL,,AUTO

      190     8704    4                       TREE$ -> DU$TREE.NEXT#( NODENUM + 1 ) = NODE;

   8704  0 000235   200020 236100                    LDQ     NODENUM,,AUTO
         0 000236   000003 402007                    MPY     3,DL
         0 000237   200017 235100                    LDA     NODE,,AUTO
         0 000240   400003 755106                    STA     3,QL,PR4
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:36   

      191     8705    4                     END;

      192     8706    3                  PREV = NODE;

   8706  0 000241   200017 235100                    LDA     NODE,,AUTO
         0 000242   200011 755100                    STA     PREV,,AUTO

      193     8707    3                END;

   8707  0 000243   000246 710000 0                  TRA     s:8709

      194     8708    2             ELSE CALL UNLOAD_DEFS;

   8708  0 000244   000415 701000 0                  TSX1    UNLOAD_DEFS
         0 000245   000000 011000                    NOP     0

      195     8709    2           END;

   8709  0 000246   200014 054100                    AOS     I,,AUTO
         0 000247   200014 236100                    LDQ     I,,AUTO
         0 000250   200020 116100                    CMPQ    NODENUM,,AUTO
         0 000251   000204 604400 0                  TMOZ    s:8696

      196     8710        /* Now load program defs as necessary */
      197     8711    1        NODE = TREE$ -> DU$TREE.NEXT#( NODENUM + 1 ); /* Start of linked list */

   8711  0 000252   200020 236100                    LDQ     NODENUM,,AUTO
         0 000253   000003 402007                    MPY     3,DL
         0 000254   200016 470500                    LDP0    TREE$,,AUTO
         0 000255   000003 235106                    LDA     3,QL,PR0
         0 000256   200017 755100                    STA     NODE,,AUTO

      198     8712    1        NOMEM = '0'B;

   8712  0 000257   200013 450100                    STZ     NOMEM,,AUTO

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:37   
      199     8713    2        DO WHILE ( NODE >= 0 );

   8713  0 000260   000271 604000 0                  TMI     s:8717

      200     8714    2             CALL LOAD_DEFS;               /* Ignore altret */

   8714  0 000261   000571 701000 0                  TSX1    LOAD_DEFS
         0 000262   000000 011000                    NOP     0

      201     8715    2             NODE = TREE$ -> DU$TREE.NEXT#( NODE );

   8715  0 000263   200017 236100                    LDQ     NODE,,AUTO
         0 000264   000003 402007                    MPY     3,DL
         0 000265   200016 470500                    LDP0    TREE$,,AUTO
         0 000266   000000 235106                    LDA     0,QL,PR0
         0 000267   200017 755100                    STA     NODE,,AUTO

      202     8716    2           END;

   8716  0 000270   000261 605000 0                  TPL     s:8714

      203     8717    1        CALL CHECK_MEM;

   8717  0 000271   001015 701000 0                  TSX1    CHECK_MEM
         0 000272   000000 011000                    NOP     0

      204     8718                                                /**/
      205     8719    1        RETURN;

   8719  0 000273   000000 702200 xent               TSX2  ! X66_ARET

      206     8720                                                /**/
      207     8721        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:38   
      208     8722        /*F* NAME: DDS$EUTREE
      209     8723             PURPOSE: To establish the specified (USE NODE) overlay tree.
      210     8724             DESCRIPTION: This routine establishes the specified overlay tree
      211     8725                          as a forward linked list. The nodes that are linked
      212     8726                          together are in descending memory locations. Prior to
      213     8727                          building the linked list, any program defs that are
      214     8728                          currently in memory but whose corresponding overlay
      215     8729                          node is not in memory are released from memory. As the
      216     8730                          linked list is built, any program defs that belong in
      217     8731                          memory but are not currently resident are brought into
      218     8732                          memory. This routine is called by the USE NODE do routine. */
      219     8733        /*D* NAME: DDS$EUTREE
      220     8734             ENTRY: DDS$EUTREE
      221     8735             CALL: CALL DDS$EUTREE ALTRET( insufficient memory );
      222     8736             INPUT: S_D.NODE - Object of USE NODE command.
      223     8737             ISCRATCH: Local AUTO only.
      224     8738             DESCRIPTION: This routine establishes the specified overlay tree
      225     8739                          as a forward linked list. The nodes that are linked
      226     8740                          together are in descending memory locations. Prior to
      227     8741                          building the linked list, any program defs that are
      228     8742                          currently in memory but whose corresponding overlay
      229     8743                          node is not in memory are released from memory. As the
      230     8744                          linked list is built, any program defs that belong in
      231     8745                          memory but are not currently resident are brought into
      232     8746                          memory. This routine is called by the USE NODE do routine.
      233     8747                          RETURNs when complete, ALTRETURNs if insufficient memory
      234     8748                          to read program defs into. Note that program defs for
      235     8749                          a node not in memory may be released and then read back
      236     8750                          into memory again if their USE NODE trees overlap. */
      237     8751                                                /**/
      238     8752    1   DDS$EUTREE: ENTRY ALTRET;

   8752  0 000274   000000 700200 xent  DDS$EUTREE   TSX0  ! X66_AUTO_2
         0 000275   000042 000002                    ZERO    34,2

      239     8753                                                /**/
      240     8754    1        NODENUM = S_D.NODE#M1;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:39   

   8754  0 000276   000000 470400 xsym               LDP0    S_D$
         0 000277   004766 235100                    LDA     2550,,PR0
         0 000300   200020 755100                    STA     NODENUM,,AUTO

      241     8755    1        TREE$ = S_D.UTREE$;

   8755  0 000301   004763 236100                    LDQ     2547,,PR0
         0 000302   200016 756100                    STQ     TREE$,,AUTO

      242     8756        /* Remove current USE NODE program defs if corresponding node not in memory */
      243     8757    1        NODE = TREE$ -> DU$TREE.NEXT#( NODENUM + 1 );

   8757  0 000303   200020 236100                    LDQ     NODENUM,,AUTO
         0 000304   000003 402007                    MPY     3,DL
         0 000305   200016 471500                    LDP1    TREE$,,AUTO
         0 000306   100003 235106                    LDA     3,QL,PR1
         0 000307   200017 755100                    STA     NODE,,AUTO

      244     8758    2        DO WHILE ( NODE >= 0 );

   8758  0 000310   000327 604000 0                  TMI     s:8764

      245     8759    2             IF NOT S_D.B$TREE$ -> B$NODE.FLGS.NOW_IN( NODE )

   8759  0 000311   000000 470400 xsym               LDP0    S_D$
         0 000312   004767 471500                    LDP1    2551,,PR0
         0 000313   200017 236100                    LDQ     NODE,,AUTO
         0 000314   000006 402007                    MPY     6,DL
         0 000315   100001 234106                    SZN     1,QL,PR1
         0 000316   000321 604000 0                  TMI     s:8761

      246     8760    2             THEN CALL UNLOAD_DEFS;

   8760  0 000317   000415 701000 0                  TSX1    UNLOAD_DEFS
         0 000320   000000 011000                    NOP     0

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:40   
      247     8761    2             NODE = TREE$ -> DU$TREE.NEXT#( NODE );

   8761  0 000321   200017 236100                    LDQ     NODE,,AUTO
         0 000322   000003 402007                    MPY     3,DL
         0 000323   200016 470500                    LDP0    TREE$,,AUTO
         0 000324   000000 235106                    LDA     0,QL,PR0
         0 000325   200017 755100                    STA     NODE,,AUTO

      248     8762    2           END;

   8762  0 000326   000311 605000 0                  TPL     s:8759

      249     8763        /* Now link up tree using backwards path & load program defs as necessary */
      250     8764    1        NODE = S_D.NODE;

   8764  0 000327   000000 470400 xsym               LDP0    S_D$
         0 000330   004706 235100                    LDA     2502,,PR0
         0 000331   200017 755100                    STA     NODE,,AUTO

      251     8765    1        CALL TREE_INIT;

   8765  0 000332   000376 701000 0                  TSX1    TREE_INIT
         0 000333   000000 011000                    NOP     0

      252     8766    1        NOMEM = '0'B;

   8766  0 000334   200013 450100                    STZ     NOMEM,,AUTO

      253     8767    1        TREE$ -> DU$TREE.NEXT#( NODENUM + 1 ) = NODE;

   8767  0 000335   200020 236100                    LDQ     NODENUM,,AUTO
         0 000336   000003 402007                    MPY     3,DL
         0 000337   200016 470500                    LDP0    TREE$,,AUTO
         0 000340   200017 235100                    LDA     NODE,,AUTO
         0 000341   000003 755106                    STA     3,QL,PR0

      254     8768    2        DO WHILE ( NODE >= 0 );
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:41   

   8768  0 000342   200017 235100                    LDA     NODE,,AUTO
         0 000343   000373 604000 0                  TMI     s:8775

      255     8769    2             BACK = S_D.B$TREE$ -> B$NODE.BACK#( NODE );

   8769  0 000344   000000 470400 xsym               LDP0    S_D$
         0 000345   004767 471500                    LDP1    2551,,PR0
         0 000346   200017 236100                    LDQ     NODE,,AUTO
         0 000347   000006 402007                    MPY     6,DL
         0 000350   100001 236106                    LDQ     1,QL,PR1
         0 000351   000022 736000                    QLS     18
         0 000352   000022 732000                    QRS     18
         0 000353   200010 756100                    STQ     BACK,,AUTO

      256     8770    2             TREE$ -> DU$TREE.NEXT#( NODE ) = BACK;

   8770  0 000354   200017 236100                    LDQ     NODE,,AUTO
         0 000355   000003 402007                    MPY     3,DL
         0 000356   200016 473500                    LDP3    TREE$,,AUTO
         0 000357   200010 235100                    LDA     BACK,,AUTO
         0 000360   300000 755106                    STA     0,QL,PR3

      257     8771    2             TREE$ -> DU$TREE.NOW_IN( NODE ) = '1'B;

   8771  0 000361   200017 236100                    LDQ     NODE,,AUTO
         0 000362   000003 402007                    MPY     3,DL
         0 000363   000000 620006                    EAX0    0,QL
         0 000364   400000 236003                    LDQ     -131072,DU
         0 000365   300002 756110                    STQ     2,X0,PR3

      258     8772    2             CALL LOAD_DEFS;               /* Ignore altret */

   8772  0 000366   000571 701000 0                  TSX1    LOAD_DEFS
         0 000367   000000 011000                    NOP     0

      259     8773    2             NODE = BACK;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:42   

   8773  0 000370   200010 235100                    LDA     BACK,,AUTO
         0 000371   200017 755100                    STA     NODE,,AUTO

      260     8774    2           END;

   8774  0 000372   000344 605000 0                  TPL     s:8769

      261     8775    1        CALL CHECK_MEM;

   8775  0 000373   001015 701000 0                  TSX1    CHECK_MEM
         0 000374   000000 011000                    NOP     0

      262     8776                                                /**/
      263     8777    1        RETURN;

   8777  0 000375   000000 702200 xent               TSX2  ! X66_ARET

      264     8778                                                /**/
      265     8779        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:43   
      266     8780                                                /**/
      267     8781    1   TREE_INIT: PROC;

   8781  0 000376   200022 741300       TREE_INIT    STX1  ! NODENUM+2,,AUTO

      268     8782                                                /**/
      269     8783    2   DCL I SBIN;
      270     8784                                                /**/
      271     8785    3        DO I = 0 TO NODENUM;

   8785  0 000377   200023 450100                    STZ     I,,AUTO
         0 000400   000410 710000 0                  TRA     s:8788+1

      272     8786    3             TREE$ -> DU$TREE.NEXT#( I ) = -1;

   8786  0 000401   200023 236100                    LDQ     I,,AUTO
         0 000402   000003 402007                    MPY     3,DL
         0 000403   000001 335007                    LCA     1,DL
         0 000404   200016 470500                    LDP0    TREE$,,AUTO
         0 000405   000000 755106                    STA     0,QL,PR0

      273     8787    3             TREE$ -> DU$TREE.NOW_IN( I ) = '0'B;

   8787  0 000406   000002 450106                    STZ     2,QL,PR0

      274     8788    3           END;

   8788  0 000407   200023 054100                    AOS     I,,AUTO
         0 000410   200023 236100                    LDQ     I,,AUTO
         0 000411   200020 116100                    CMPQ    NODENUM,,AUTO
         0 000412   000401 604400 0                  TMOZ    s:8786

      275     8789                                                /**/
      276     8790    2        RETURN;

   8790  0 000413   200022 221300                    LDX1  ! NODENUM+2,,AUTO
         0 000414   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:44   

      277     8791                                                /**/
      278     8792    2   END TREE_INIT;
      279     8793                                                /**/
      280     8794        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:45   
      281     8795                                                /**/
      282     8796    1   UNLOAD_DEFS: PROC;

   8796  0 000415   200022 741300       UNLOAD_DEFS  STX1  ! NODENUM+2,,AUTO

      283     8797                                                /**/
      284     8798    2   DCL 1 SPACE BASED ALIGNED,
      285     8799    2         2 * CHAR( S );
      286     8800    2   DCL S UBIN;
      287     8801    2   DCL W SBIN;
      288     8802    2   DCL ST$ PTR;
      289     8803    2   DCL EN$ PTR;
      290     8804    2   DCL NX$ PTR;
      291     8805    2   DCL I SBIN;
      292     8806    2   DCL NODE$ PTR;
      293     8807                                                /**/
      294     8808    2        NODE$ = PINCRW( S_D.NODESEG$, SIZEW( DU$NODE ) * NODE );

   8808  0 000416   000000 470400 xsym               LDP0    S_D$
         0 000417   005003 471500                    LDP1    2563,,PR0
         0 000420   200017 236100                    LDQ     NODE,,AUTO
         0 000421   000007 402007                    MPY     7,DL
         0 000422   100000 633506                    EPPR3   0,QL,PR1
         0 000423   200031 453500                    STP3    NODE$,,AUTO

      295     8809    2        IF NODE$ -> DU$NODE.GOTDEFS( 0 )

   8809  0 000424   300001 234100                    SZN     1,,PR3
         0 000425   000554 605000 0                  TPL     s:8842

      296     8810    3        THEN DO;

      297     8811    3             ST$ = NODE$ -> DU$NODE.DNAME$( 0 );

   8811  0 000426   300006 236100                    LDQ     6,,PR3
         0 000427   200025 756100                    STQ     ST$,,AUTO

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:46   
      298     8812    3             EN$ = PINCRW( NODE$ -> DU$NODE.SDEF_END$( 0 ), SIZEW( B$SDEF ) );

   8812  0 000430   300005 236100                    LDQ     5,,PR3
         0 000431   000002 036003                    ADLQ    2,DU
         0 000432   200026 756100                    STQ     EN$,,AUTO

      299     8813    3             W = -1 * POFFW( EN$, ST$ );

   8813  0 000433   200025 235100                    LDA     ST$,,AUTO
         0 000434   000022 771000                    ARL     18
         0 000435   200034 755100                    STA     ARS+1,,AUTO
         0 000436   200026 236100                    LDQ     EN$,,AUTO
         0 000437   000022 772000                    QRL     18
         0 000440   200034 136100                    SBLQ    ARS+1,,AUTO
         0 000441   000027 676000 xsym               ERQ     B_VECTNIL+23
         0 000442   000001 036007                    ADLQ    1,DL
         0 000443   200024 756100                    STQ     W,,AUTO

      300     8814    3             NX$ = S_D.NODESEG_NEXT$;

   8814  0 000444   004772 236100                    LDQ     2554,,PR0
         0 000445   200027 756100                    STQ     NX$,,AUTO

      301     8815    3             S = POFFC( NX$, EN$ );

   8815  0 000446   200026 236100                    LDQ     EN$,,AUTO
         0 000447   000020 772000                    QRL     16
         0 000450   200034 756100                    STQ     ARS+1,,AUTO
         0 000451   200027 236100                    LDQ     NX$,,AUTO
         0 000452   000020 772000                    QRL     16
         0 000453   200034 136100                    SBLQ    ARS+1,,AUTO
         0 000454   200023 756100                    STQ     S,,AUTO

      302     8816        /* Move from delete end to end of all defs over delete start */
      303     8817    3             ST$ -> SPACE = EN$ -> SPACE;

   8817  0 000455   200026 474500                    LDP4    EN$,,AUTO
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:47   
         0 000456   000000 620006                    EAX0    0,QL
         0 000457   200025 475500                    LDP5    ST$,,AUTO
         0 000460   200023 722100                    LXL2    S,,AUTO
         0 000461   000140 100540                    MLR     fill='000'O
         0 000462   400000 000010                    ADSC9   0,,PR4                   cn=0,n=*X0
         0 000463   500000 000012                    ADSC9   0,,PR5                   cn=0,n=*X2

      304     8818        /* Reset current node just deleted */
      305     8819    3             NODE$ -> DU$NODE.GOTDEFS( 0 ) = '0'B;

   8819  0 000464   300001 450100                    STZ     1,,PR3

      306     8820    3             NODE$ -> DU$NODE.DNAME$( 0 ) = ADDR( NIL );

   8820  0 000465   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000466   300006 756100                    STQ     6,,PR3

      307     8821    3             NODE$ -> DU$NODE.EDEF$( 0 ) = ADDR( NIL );

   8821  0 000467   300002 756100                    STQ     2,,PR3

      308     8822    3             NODE$ -> DU$NODE.EDEF_END$( 0 ) = ADDR( NIL );

   8822  0 000470   300003 756100                    STQ     3,,PR3

      309     8823    3             NODE$ -> DU$NODE.SDEF$( 0 ) = ADDR( NIL );

   8823  0 000471   300004 756100                    STQ     4,,PR3

      310     8824    3             NODE$ -> DU$NODE.SDEF_END$( 0 ) = ADDR( NIL );

   8824  0 000472   300005 756100                    STQ     5,,PR3

      311     8825        /* Change program defs pointers */
      312     8826    4             DO I = 1 TO NODENUM; /* Bypass root, which is not in this segment */

   8826  0 000473   000001 235007                    LDA     1,DL
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:48   
         0 000474   200030 755100                    STA     I,,AUTO
         0 000475   000544 710000 0                  TRA     s:8837+1

      313     8827    4                  NODE$ = PINCRW( S_D.NODESEG$, SIZEW( DU$NODE ) * I );

   8827  0 000476   000000 470400 xsym               LDP0    S_D$
         0 000477   005003 471500                    LDP1    2563,,PR0
         0 000500   200030 236100                    LDQ     I,,AUTO
         0 000501   000007 402007                    MPY     7,DL
         0 000502   100000 633506                    EPPR3   0,QL,PR1
         0 000503   200031 453500                    STP3    NODE$,,AUTO

      314     8828    4                  IF ( NODE$ -> DU$NODE.DNAME$( 0 ) ~= ADDR( NIL ) )

   8828  0 000504   300006 236100                    LDQ     6,,PR3
         0 000505   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000506   000543 600000 0                  TZE     s:8837
         0 000507   200025 116100                    CMPQ    ST$,,AUTO
         0 000510   000543 602000 0                  TNC     s:8837
         0 000511   000543 600000 0                  TZE     s:8837

      315     8829    4                    AND ( NODE$ -> DU$NODE.DNAME$( 0 ) > ST$ )
      316     8830    5                  THEN DO;

      317     8831    5                       CALL PTRW( NODE$ -> DU$NODE.DNAME$( 0 ) );

   8831  0 000512   200031 236100                    LDQ     NODE$,,AUTO
         0 000513   000006 036003                    ADLQ    6,DU
         0 000514   200033 756100                    STQ     NODE$+2,,AUTO
         0 000515   000556 701000 0                  TSX1    PTRW
         0 000516   000000 011000                    NOP     0

      318     8832    5                       CALL PTRW( NODE$ -> DU$NODE.EDEF$( 0 ) );

   8832  0 000517   200031 236100                    LDQ     NODE$,,AUTO
         0 000520   000002 036003                    ADLQ    2,DU
         0 000521   200033 756100                    STQ     NODE$+2,,AUTO
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:49   
         0 000522   000556 701000 0                  TSX1    PTRW
         0 000523   000000 011000                    NOP     0

      319     8833    5                       CALL PTRW( NODE$ -> DU$NODE.EDEF_END$( 0 ) );

   8833  0 000524   200031 236100                    LDQ     NODE$,,AUTO
         0 000525   000003 036003                    ADLQ    3,DU
         0 000526   200033 756100                    STQ     NODE$+2,,AUTO
         0 000527   000556 701000 0                  TSX1    PTRW
         0 000530   000000 011000                    NOP     0

      320     8834    5                       CALL PTRW( NODE$ -> DU$NODE.SDEF$( 0 ) );

   8834  0 000531   200031 236100                    LDQ     NODE$,,AUTO
         0 000532   000004 036003                    ADLQ    4,DU
         0 000533   200033 756100                    STQ     NODE$+2,,AUTO
         0 000534   000556 701000 0                  TSX1    PTRW
         0 000535   000000 011000                    NOP     0

      321     8835    5                       CALL PTRW( NODE$ -> DU$NODE.SDEF_END$( 0 ) );

   8835  0 000536   200031 236100                    LDQ     NODE$,,AUTO
         0 000537   000005 036003                    ADLQ    5,DU
         0 000540   200033 756100                    STQ     NODE$+2,,AUTO
         0 000541   000556 701000 0                  TSX1    PTRW
         0 000542   000000 011000                    NOP     0

      322     8836    5                     END;

      323     8837    4                END;

   8837  0 000543   200030 054100                    AOS     I,,AUTO
         0 000544   200030 236100                    LDQ     I,,AUTO
         0 000545   200020 116100                    CMPQ    NODENUM,,AUTO
         0 000546   000476 604400 0                  TMOZ    s:8827

      324     8838        /* Change current memory allocation pointer */
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:50   
      325     8839    3             S_D.NODESEG_NEXT$ = PINCRW( NX$, W );

   8839  0 000547   200024 236100                    LDQ     W,,AUTO
         0 000550   000022 736000                    QLS     18
         0 000551   200027 036100                    ADLQ    NX$,,AUTO
         0 000552   000000 470400 xsym               LDP0    S_D$
         0 000553   004772 756100                    STQ     2554,,PR0

      326     8840    3           END;

      327     8841                                                /**/
      328     8842    2        RETURN;

   8842  0 000554   200022 221300                    LDX1  ! NODENUM+2,,AUTO
         0 000555   000001 702211                    TSX2  ! 1,X1

      329     8843                                                /**/
      330     8844        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:51   
      331     8845                                                /**/
      332     8846    2   PTRW: PROC( PTRW$ );

   8846  0 000556   200032 741300       PTRW         STX1  ! NODE$+1,,AUTO

      333     8847                                                /**/
      334     8848    3   DCL PTRW$ PTR;
      335     8849                                                /**/
      336     8850    3        IF PTRW$ ~= ADDR( NIL )

   8850  0 000557   200033 470500                    LDP0    @PTRW$,,AUTO
         0 000560   000000 236100                    LDQ     0,,PR0
         0 000561   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000562   000567 600000 0                  TZE     s:8853

      337     8851    3        THEN PTRW$ = PINCRW( PTRW$, W );

   8851  0 000563   000000 471500                    LDP1    0,,PR0
         0 000564   200024 720100                    LXL0    W,,AUTO
         0 000565   100000 633510                    EPPR3   0,X0,PR1
         0 000566   000000 453500                    STP3    0,,PR0

      338     8852                                                /**/
      339     8853    3        RETURN;

   8853  0 000567   200032 221300                    LDX1  ! NODE$+1,,AUTO
         0 000570   000001 702211                    TSX2  ! 1,X1

      340     8854                                                /**/
      341     8855    3   END PTRW;
      342     8856                                                /**/
      343     8857    2   END UNLOAD_DEFS;
      344     8858                                                /**/
      345     8859        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:52   
      346     8860                                                /**/
      347     8861    1   LOAD_DEFS: PROC ALTRET;

   8861  0 000571   200022 741300       LOAD_DEFS    STX1  ! NODENUM+2,,AUTO

      348     8862                                                /**/
      349     8863    2   DCL NX$ PTR;
      350     8864    2   DCL US$ PTR;
      351     8865    2   DCL W UBIN;
      352     8866    2   DCL TYPE UBIN;
      353     8867    2   DCL NODE$ PTR;
      354     8868    2   DCL TEMP$ PTR;
      355     8869                                                /**/
      356     8870    2        NODE$ = PINCRW( S_D.NODESEG$, SIZEW( DU$NODE) * NODE );

   8870  0 000572   000000 470400 xsym               LDP0    S_D$
         0 000573   005003 471500                    LDP1    2563,,PR0
         0 000574   200017 236100                    LDQ     NODE,,AUTO
         0 000575   000007 402007                    MPY     7,DL
         0 000576   100000 633506                    EPPR3   0,QL,PR1
         0 000577   200027 453500                    STP3    NODE$,,AUTO

      357     8871    2        IF NOT NODE$ -> DU$NODE.GOTDEFS( 0 )

   8871  0 000600   300001 234100                    SZN     1,,PR3
         0 000601   000702 604000 0                  TMI     s:8901

      358     8872    3        THEN DO;

      359     8873    3             NX$ = S_D.NODESEG_NEXT$;

   8873  0 000602   004772 236100                    LDQ     2554,,PR0
         0 000603   200023 756100                    STQ     NX$,,AUTO

      360     8874    3             US$ = S_D.NODESEG_USED$;

   8874  0 000604   004771 236100                    LDQ     2553,,PR0
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:53   
         0 000605   200024 756100                    STQ     US$,,AUTO

      361     8875    3             TYPE = %TYPDNAM;

   8875  0 000606   000001 235007                    LDA     1,DL
         0 000607   200026 755100                    STA     TYPE,,AUTO

      362     8876    3             CALL READREC ALTRET( NORECD );

   8876  0 000610   000713 701000 0                  TSX1    READREC
         0 000611   000704 702000 0                  TSX2    NORECD

      363     8877    3             NODE$ -> DU$NODE.GOTDEFS( 0 ) = '1'B;

   8877  0 000612   400000 236003                    LDQ     -131072,DU
         0 000613   200027 470500                    LDP0    NODE$,,AUTO
         0 000614   000001 756100                    STQ     1,,PR0

      364     8878    3             NODE$ -> DU$NODE.DNAME$( 0 ) = NX$;

   8878  0 000615   200023 236100                    LDQ     NX$,,AUTO
         0 000616   000006 756100                    STQ     6,,PR0

      365     8879    3             NX$ = PINCRW( NX$, W );

   8879  0 000617   200025 236100                    LDQ     W,,AUTO
         0 000620   000022 736000                    QLS     18
         0 000621   200023 036100                    ADLQ    NX$,,AUTO
         0 000622   200023 756100                    STQ     NX$,,AUTO

      366     8880    3             TYPE = %TYPEDEF;

   8880  0 000623   000004 235007                    LDA     4,DL
         0 000624   200026 755100                    STA     TYPE,,AUTO

      367     8881    3             CALL READREC ALTRET( NORECE );

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:54   
   8881  0 000625   000713 701000 0                  TSX1    READREC
         0 000626   000656 702000 0                  TSX2    NORECE

      368     8882    3             NODE$ -> DU$NODE.EDEF$( 0 ) = NX$;

   8882  0 000627   200023 236100                    LDQ     NX$,,AUTO
         0 000630   200027 470500                    LDP0    NODE$,,AUTO
         0 000631   000002 756100                    STQ     2,,PR0

      369     8883    3             TEMP$ = NX$;

   8883  0 000632   200023 236100                    LDQ     NX$,,AUTO
         0 000633   200030 756100                    STQ     TEMP$,,AUTO

      370     8884    3             NX$ = PINCRW( NX$, W );

   8884  0 000634   200025 236100                    LDQ     W,,AUTO
         0 000635   000022 736000                    QLS     18
         0 000636   200023 036100                    ADLQ    NX$,,AUTO
         0 000637   200023 756100                    STQ     NX$,,AUTO

      371     8885    3             NODE$ -> DU$NODE.EDEF_END$( 0 ) = PINCRW( NX$, -SIZEW( B$EDEF ) );

   8885  0 000640   777776 036003                    ADLQ    -2,DU
         0 000641   000003 756100                    STQ     3,,PR0

      372     8886    4             DO WHILE ( TEMP$ <= NODE$ -> DU$NODE.EDEF_END$( 0 ) );

   8886  0 000642   200030 116100                    CMPQ    TEMP$,,AUTO
         0 000643   000656 602000 0                  TNC     NORECE

      373     8887    4                  TEMP$ -> B$EDEF.LFLAGS.FAULTAGS = '0'B; /* For TRACE */

   8887  0 000644   200030 470500                    LDP0    TEMP$,,AUTO
         0 000645   000000 236000 1                  LDQ     0
         0 000646   000000 356100                    ANSQ    0,,PR0

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:55   
      374     8888    4                  TEMP$ = PINCRW( TEMP$, SIZEW( B$EDEF ) );

   8888  0 000647   200030 236100                    LDQ     TEMP$,,AUTO
         0 000650   000002 036003                    ADLQ    2,DU
         0 000651   200030 756100                    STQ     TEMP$,,AUTO

      375     8889    4                END;

   8889  0 000652   200027 470500                    LDP0    NODE$,,AUTO
         0 000653   000003 116100                    CMPQ    3,,PR0
         0 000654   000644 602000 0                  TNC     s:8887
         0 000655   000644 600000 0                  TZE     s:8887

      376     8890    3   NORECE:
      377     8891    3             TYPE = %TYPSDEF;

   8891  0 000656   000006 235007       NORECE       LDA     6,DL
         0 000657   200026 755100                    STA     TYPE,,AUTO

      378     8892    3             CALL READREC ALTRET( NORECS );

   8892  0 000660   000713 701000 0                  TSX1    READREC
         0 000661   000671 702000 0                  TSX2    NORECS

      379     8893    3             NODE$ -> DU$NODE.SDEF$( 0 ) = NX$;

   8893  0 000662   200023 236100                    LDQ     NX$,,AUTO
         0 000663   200027 470500                    LDP0    NODE$,,AUTO
         0 000664   000004 756100                    STQ     4,,PR0

      380     8894    3             NX$ = PINCRW( NX$, W );

   8894  0 000665   200025 236100                    LDQ     W,,AUTO
         0 000666   000022 736000                    QLS     18
         0 000667   200023 036100                    ADLQ    NX$,,AUTO
         0 000670   200023 756100                    STQ     NX$,,AUTO

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:56   
      381     8895    3   NORECS:                            /* Always remember end of program defs */
      382     8896    3             NODE$ -> DU$NODE.SDEF_END$( 0 ) = PINCRW( NX$, -SIZEW( B$SDEF ) );

   8896  0 000671   200023 236100       NORECS       LDQ     NX$,,AUTO
         0 000672   777776 036003                    ADLQ    -2,DU
         0 000673   200027 470500                    LDP0    NODE$,,AUTO
         0 000674   000005 756100                    STQ     5,,PR0

      383     8897    3             S_D.NODESEG_NEXT$ = NX$;

   8897  0 000675   200023 236100                    LDQ     NX$,,AUTO
         0 000676   000000 471400 xsym               LDP1    S_D$
         0 000677   104772 756100                    STQ     2554,,PR1

      384     8898    3             S_D.NODESEG_USED$ = US$;

   8898  0 000700   200024 236100                    LDQ     US$,,AUTO
         0 000701   104771 756100                    STQ     2553,,PR1

      385     8899    3           END;

      386     8900                                                /**/
      387     8901    2        RETURN;

   8901  0 000702   200022 221300                    LDX1  ! NODENUM+2,,AUTO
         0 000703   000001 702211                    TSX2  ! 1,X1

      388     8902                                                /**/
      389     8903    2   NORECD:
      390     8904    2        S_D.NODESEG_NEXT$ = NX$;           /* May get here by altret someday */

   8904  0 000704   200023 236100       NORECD       LDQ     NX$,,AUTO
         0 000705   000000 470400 xsym               LDP0    S_D$
         0 000706   004772 756100                    STQ     2554,,PR0

      391     8905    2        S_D.NODESEG_USED$ = US$;           /* May have obtained some memory */

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:57   
   8905  0 000707   200024 236100                    LDQ     US$,,AUTO
         0 000710   004771 756100                    STQ     2553,,PR0

      392     8906                                                /**/
      393     8907    2        ALTRETURN;

   8907  0 000711   200022 221300                    LDX1  ! NODENUM+2,,AUTO
         0 000712   000000 702211                    TSX2  ! 0,X1

      394     8908                                                /**/
      395     8909        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:58   
      396     8910                                                /**/
      397     8911    2   READREC: PROC ALTRET;

   8911  0 000713   200032 741300       READREC      STX1  ! NODE$+1,,AUTO

      398     8912                                                /**/
      399     8913    3   DCL ARS SBIN;
      400     8914                                                /**/
      401     8915    3        IF POFFC( US$, NX$ ) = 0

   8915  0 000714   200023 236100                    LDQ     NX$,,AUTO
         0 000715   000020 772000                    QRL     16
         0 000716   200034 756100                    STQ     ARS+1,,AUTO
         0 000717   200024 236100                    LDQ     US$,,AUTO
         0 000720   000020 772000                    QRL     16
         0 000721   200034 136100                    SBLQ    ARS+1,,AUTO
         0 000722   000756 600000 0                  TZE     GETMEM

      402     8916    3        THEN GOTO GETMEM;
      403     8917    3   REREAD:
      404     8918    3        W = POFFC( US$, NX$ );

   8918  0 000723   200023 236100       REREAD       LDQ     NX$,,AUTO
         0 000724   000020 772000                    QRL     16
         0 000725   200034 756100                    STQ     ARS+1,,AUTO
         0 000726   200024 236100                    LDQ     US$,,AUTO
         0 000727   000020 772000                    QRL     16
         0 000730   200034 136100                    SBLQ    ARS+1,,AUTO
         0 000731   200025 756100                    STQ     W,,AUTO

      405     8919    3        ARS = -1;

   8919  0 000732   000001 335007                    LCA     1,DL
         0 000733   200033 755100                    STA     ARS,,AUTO

      406     8920    3        CALL DDQ$READLM( TYPE, @PAGE, NODE, NX$, W, ARS ) ALTRET( NOREC );

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:59   
   8920  0 000734   200033 630500                    EPPR0   ARS,,AUTO
         0 000735   200041 450500                    STP0    ARS+6,,AUTO
         0 000736   200025 631500                    EPPR1   W,,AUTO
         0 000737   200040 451500                    STP1    ARS+5,,AUTO
         0 000740   200023 633500                    EPPR3   NX$,,AUTO
         0 000741   200037 453500                    STP3    ARS+4,,AUTO
         0 000742   200017 634500                    EPPR4   NODE,,AUTO
         0 000743   200036 454500                    STP4    ARS+3,,AUTO
         0 000744   000001 236000 1                  LDQ     1
         0 000745   200035 756100                    STQ     ARS+2,,AUTO
         0 000746   200026 635500                    EPPR5   TYPE,,AUTO
         0 000747   200034 455500                    STP5    ARS+1,,AUTO
         0 000750   200034 630500                    EPPR0   ARS+1,,AUTO
         0 000751   000024 631400 xsym               EPPR1   B_VECTNIL+20
         0 000752   000000 701000 xent               TSX1    DDQ$READLM
         0 000753   001013 702000 0                  TSX2    NOREC

      407     8921    3        IF ARS < 0

   8921  0 000754   200033 235100                    LDA     ARS,,AUTO
         0 000755   000773 605000 0                  TPL     s:8929

      408     8922    3        THEN
      409     8923    3   GETMEM:
      410     8924    4        DO;

   8924  0 000756                       GETMEM       null
      411     8925    4             CALL DDM$GETMEM( S_D.NODESEG$, @PSIZ ) ALTRET( NOSTR );

   8925  0 000756   000003 236000 1                  LDQ     3
         0 000757   200035 756100                    STQ     ARS+2,,AUTO
         0 000760   000000 236000 xsym               LDQ     S_D$
         0 000761   005003 036003                    ADLQ    2563,DU
         0 000762   200034 756100                    STQ     ARS+1,,AUTO
         0 000763   200034 630500                    EPPR0   ARS+1,,AUTO
         0 000764   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000765   000000 701000 xent               TSX1    DDM$GETMEM
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:60   
         0 000766   001001 702000 0                  TSX2    NOSTR

      412     8926    4             US$ = PINCRW( US$, @PSIZ );

   8926  0 000767   200024 236100                    LDQ     US$,,AUTO
         0 000770   002000 036003                    ADLQ    1024,DU
         0 000771   200024 756100                    STQ     US$,,AUTO

      413     8927    4             GOTO REREAD;

   8927  0 000772   000723 710000 0                  TRA     REREAD

      414     8928    4           END;
      415     8929    3        W = ( ARS + LENGTHC( ARS ) -1 ) / LENGTHC( ARS ); /* For dnames record */

   8929  0 000773   200033 236100                    LDQ     ARS,,AUTO
         0 000774   000003 036007                    ADLQ    3,DL
         0 000775   000004 506007                    DIV     4,DL
         0 000776   200025 756100                    STQ     W,,AUTO

      416     8930                                                /**/
      417     8931    3        RETURN;

   8931  0 000777   200032 221300                    LDX1  ! NODE$+1,,AUTO
         0 001000   000001 702211                    TSX2  ! 1,X1

      418     8932                                                /**/
      419     8933    3   NOSTR:
      420     8934    3        IF NOT NOMEM

   8934  0 001001   200013 234100       NOSTR        SZN     NOMEM,,AUTO
         0 001002   001013 604000 0                  TMI     NOREC

      421     8935    4        THEN DO;

      422     8936    4             NOMEM = '1'B;

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:61   
   8936  0 001003   400000 236003                    LDQ     -131072,DU
         0 001004   200013 756100                    STQ     NOMEM,,AUTO

      423     8937    4             S_D.ERROR = E@OVDEFS;         /* E@OVDEFS */

   8937  0 001005   000167 235007                    LDA     119,DL
         0 001006   000000 470400 xsym               LDP0    S_D$
         0 001007   000013 755100                    STA     11,,PR0

      424     8938    4             CALL DDE$ERROR;

   8938  0 001010   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 001011   000000 701000 xent               TSX1    DDE$ERROR
         0 001012   000000 011000                    NOP     0

      425     8939    4           END;

      426     8940    3   NOREC:
      427     8941    3        ALTRETURN;

   8941  0 001013   200032 221300       NOREC        LDX1  ! NODE$+1,,AUTO
         0 001014   000000 702211                    TSX2  ! 0,X1

      428     8942                                                /**/
      429     8943    3   END READREC;
      430     8944                                                /**/
      431     8945    2   END LOAD_DEFS;
      432     8946                                                /**/
      433     8947        %EJECT;
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:62   
      434     8948                                                /**/
      435     8949    1   CHECK_MEM: PROC;

   8949  0 001015   200022 741300       CHECK_MEM    STX1  ! NODENUM+2,,AUTO

      436     8950                                                /**/
      437     8951    2   DCL TOBEREL UBIN;
      438     8952                                                /**/
      439     8953    2        TOBEREL = ( POFFW( S_D.NODESEG_USED$, DD_RUMNODE$ ) / @PSIZ )

   8953  0 001016   000000 235000 xsym               LDA     DD_RUMNODE$
         0 001017   000022 771000                    ARL     18
         0 001020   200034 755100                    STA     ARS+1,,AUTO
         0 001021   000000 470400 xsym               LDP0    S_D$
         0 001022   004771 236100                    LDQ     2553,,PR0
         0 001023   000022 772000                    QRL     18
         0 001024   200034 136100                    SBLQ    ARS+1,,AUTO
         0 001025   002000 506007                    DIV     1024,DL
         0 001026   000000 235000 xsym               LDA     DD_RUMNODE$
         0 001027   000022 771000                    ARL     18
         0 001030   200035 755100                    STA     ARS+2,,AUTO
         0 001031   200036 756100                    STQ     ARS+3,,AUTO
         0 001032   004772 236100                    LDQ     2554,,PR0
         0 001033   000022 772000                    QRL     18
         0 001034   200035 136100                    SBLQ    ARS+2,,AUTO
         0 001035   001777 036007                    ADLQ    1023,DL
         0 001036   002000 506007                    DIV     1024,DL
         0 001037   200037 756100                    STQ     ARS+4,,AUTO
         0 001040   200036 236100                    LDQ     ARS+3,,AUTO
         0 001041   200037 136100                    SBLQ    ARS+4,,AUTO
         0 001042   200023 756100                    STQ     TOBEREL,,AUTO

      440     8954    2          - ( ( POFFW( S_D.NODESEG_NEXT$, DD_RUMNODE$ ) + @PSIZ - 1 ) / @PSIZ );
      441     8955    2        IF TOBEREL > 0

   8955  0 001043   001076 600000 0                  TZE     s:8967

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:63   
      442     8956    3        THEN DO;

      443     8957    3             TOBEREL = TOBEREL * @PSIZ;

   8957  0 001044   200023 235100                    LDA     TOBEREL,,AUTO
         0 001045   000012 735000                    ALS     10
         0 001046   200023 755100                    STA     TOBEREL,,AUTO

      444     8958    3             CALL DDM$PUTMEM( S_D.NODESEG$, TOBEREL ) ALTRET( DELBUG );

   8958  0 001047   200023 631500                    EPPR1   TOBEREL,,AUTO
         0 001050   200035 451500                    STP1    ARS+2,,AUTO
         0 001051   000000 236000 xsym               LDQ     S_D$
         0 001052   005003 036003                    ADLQ    2563,DU
         0 001053   200034 756100                    STQ     ARS+1,,AUTO
         0 001054   200034 630500                    EPPR0   ARS+1,,AUTO
         0 001055   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 001056   000000 701000 xent               TSX1    DDM$PUTMEM
         0 001057   001070 702000 0                  TSX2    DELBUG

      445     8959    3             S_D.NODESEG_USED$ = PINCRW( S_D.NODESEG_USED$, -TOBEREL );

   8959  0 001060   000000 470400 xsym               LDP0    S_D$
         0 001061   004771 471500                    LDP1    2553,,PR0
         0 001062   200023 720100                    LXL0    TOBEREL,,AUTO
         0 001063   777777 620010                    EAX0    -1,X0
         0 001064   777777 660003                    ERX0    -1,DU
         0 001065   100000 633510                    EPPR3   0,X0,PR1
         0 001066   004771 453500                    STP3    2553,,PR0

      446     8960    4             DO WHILE ( '0'B );

   8960  0 001067   001076 710000 0                  TRA     s:8967

      447     8961    4   DELBUG:
      448     8962    4                  S_D.ERROR = E@DELBUG;    /* E@DELBUG */

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:64   
   8962  0 001070   000766 235007       DELBUG       LDA     502,DL
         0 001071   000000 470400 xsym               LDP0    S_D$
         0 001072   000013 755100                    STA     11,,PR0

      449     8963    4                  CALL DDE$ERROR;

   8963  0 001073   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 001074   000000 701000 xent               TSX1    DDE$ERROR
         0 001075   000000 011000                    NOP     0

      450     8964    4                END;

      451     8965    3           END;

      452     8966                                                /**/
      453     8967    2        RETURN;

   8967  0 001076   200022 221300                    LDX1  ! NODENUM+2,,AUTO
         0 001077   000001 702211                    TSX2  ! 1,X1

(unnamed)
 Sect OctLoc
   1     000   776777 777777   000002 006000   000000 002000   000002 006000    ................
      454     8968                                                /**/
      455     8969    2   END CHECK_MEM;
      456     8970                                                /**/
      457     8971    1   END DDS$ND_SRCH;

PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:65   
--  Include file information  --

   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   M_INFO_C.:E05TOU  is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$ND_SRCH.

   Procedure DDS$ND_SRCH requires 576 words for executable code.
   Procedure DDS$ND_SRCH requires 34 words of local(AUTO) storage.

    No errors detected in file DUS$ND_SRCH.:E05TSI    .
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:66   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:67   
          MINI XREF LISTING

ARS IN PROCEDURE READREC
      8913**DCL      8919<<ASSIGN   8920<>CALL     8921>>IF       8929>>ASSIGN   8929--ASSIGN   8929--ASSIGN
B$EDEF
      5288**DCL      8885--ASSIGN   8888--ASSIGN
B$EDEF.LFLAGS.FAULTAGS
      5303**DCL      8887<<ASSIGN
B$EDEF.OU
      5305**DCL      5311--REDEF
B$JIT.CPFLAGS1.SLEAZE
      8397**DCL      8397--REDEF
B$JIT.ERR.MID
      8304**DCL      8304--REDEF
B$JIT.JRESPEAK
      8465**DCL      8466--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      8574**DCL      8574--REDEF    8575--REDEF
B$JIT.PCL
      8467**DCL      8638>>IF
B$JIT.PNR
      8478**DCL      8478--REDEF
B$JIT.TDP
      8463**DCL      8638>>IF
B$JIT.TSLINE
      8572**DCL      8573--REDEF
B$JIT$
      8579**DCL      8298--IMP-PTR  8638>>IF       8638>>IF
B$NODE
      5246**DCL      8595--ASSIGN
B$NODE.BACK#
      5270**DCL      8769>>ASSIGN
B$NODE.DADDR
      5280**DCL      8634>>ASSIGN
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:68   
B$NODE.FLGS.NOW_IN
      5252**DCL      8697>>IF       8759>>IF
B$NODE.NAME$
      5248**DCL      8590>>IF       8590>>IF
B$NODE.PADDR
      5276**DCL      8635>>ASSIGN
B$SDEF
      5358**DCL      8812--ASSIGN   8896--ASSIGN
B$SDEF.AD.OU
      5378**DCL      5384--REDEF
B$SDEF.VALUE
      5359**DCL      5362--REDEF
BACK
        39**DCL      8769<<ASSIGN   8770>>ASSIGN   8773>>ASSIGN
CHECK_MEM
      8949**PROC     8717--CALL     8775--CALL
DDE$ERROR
      8581**DCL-ENT  8658--CALL     8938--CALL     8963--CALL
DDM$GETMEM
      8582**DCL-ENT  8925--CALL
DDM$PUTMEM
      8583**DCL-ENT  8958--CALL
DDQ$READLM
      8584**DCL-ENT  8920--CALL
DD_RUMNODE$
      8580**DCL      8953>>ASSIGN   8953>>ASSIGN
DELBUG IN PROCEDURE CHECK_MEM
      8962**LABEL    8958--CALLALT
DU$NODE
      1363**DCL      8643--ASSIGN   8808--ASSIGN   8827--ASSIGN   8870--ASSIGN
DU$NODE.DNAME$
      1370**DCL      8649>>ASSIGN   8811>>ASSIGN   8820<<ASSIGN   8828>>IF       8828>>IF       8831<>CALL
      8878<<ASSIGN
DU$NODE.EDEF$
      1366**DCL      8645>>ASSIGN   8821<<ASSIGN   8832<>CALL     8882<<ASSIGN
DU$NODE.EDEF_END$
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:69   
      1367**DCL      8646>>ASSIGN   8822<<ASSIGN   8833<>CALL     8885<<ASSIGN   8886>>DOWHILE
DU$NODE.GOTDEFS
      1365**DCL      8809>>IF       8819<<ASSIGN   8871>>IF       8877<<ASSIGN
DU$NODE.INDX#
      1364**DCL      8696>>ASSIGN
DU$NODE.SDEF$
      1368**DCL      8647>>ASSIGN   8823<<ASSIGN   8834<>CALL     8893<<ASSIGN
DU$NODE.SDEF_END$
      1369**DCL      8648>>ASSIGN   8812>>ASSIGN   8824<<ASSIGN   8835<>CALL     8896<<ASSIGN
DU$TREE.NEXT#
      1358**DCL      8631>>ASSIGN   8654>>ASSIGN   8701<<ASSIGN   8704<<ASSIGN   8711>>ASSIGN   8715>>ASSIGN
      8757>>ASSIGN   8761>>ASSIGN   8767<<ASSIGN   8770<<ASSIGN   8786<<ASSIGN
DU$TREE.NOW_IN
      1360**DCL      8699<<ASSIGN   8771<<ASSIGN   8787<<ASSIGN
EN$ IN PROCEDURE UNLOAD_DEFS
      8803**DCL      8812<<ASSIGN   8813>>ASSIGN   8815>>ASSIGN   8817>>ASSIGN
GETMEM IN PROCEDURE READREC
      8924**LABEL    8916--GOTO
GOTAIL
        41**DCL      8694<<ASSIGN   8700>>IF       8703<<ASSIGN
I
        43**DCL      8695<<DOINDEX  8696>>ASSIGN
I IN PROCEDURE TREE_INIT
      8783**DCL      8785<<DOINDEX  8786>>ASSIGN   8787>>ASSIGN
I IN PROCEDURE UNLOAD_DEFS
      8805**DCL      8826<<DOINDEX  8827>>ASSIGN
IC
        34**DCL      8630>>ASSIGN
ICN
        38**DCL      8634<<ASSIGN   8635<<ASSIGN   8636>>IF
ICT
        37**DCL      8630<<ASSIGN   8633>>IF       8636>>IF       8638>>IF
LOAD_DEFS
      8861**PROC     8714--CALL     8772--CALL
N#
        35**DCL        31--PROC     8592<<ASSIGN   8628--ENTRY    8641--IF       8651<<ASSIGN
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:70   
NODE
        46**DCL      8589<<DOINDEX  8592>>ASSIGN   8631<<ASSIGN   8632>>DOWHILE  8634>>ASSIGN   8635>>ASSIGN
      8640<<ASSIGN   8643>>ASSIGN   8644>>ASSIGN   8651>>ASSIGN   8654<<ASSIGN   8654>>ASSIGN   8696<<ASSIGN
      8697>>IF       8699>>ASSIGN   8701>>ASSIGN   8704>>ASSIGN   8706>>ASSIGN   8711<<ASSIGN   8713>>DOWHILE
      8715<<ASSIGN   8715>>ASSIGN   8757<<ASSIGN   8758>>DOWHILE  8759>>IF       8761<<ASSIGN   8761>>ASSIGN
      8764<<ASSIGN   8767>>ASSIGN   8768>>DOWHILE  8769>>ASSIGN   8770>>ASSIGN   8771>>ASSIGN   8773<<ASSIGN
      8808>>ASSIGN   8870>>ASSIGN   8920<>CALL
NODE$
        44**DCL      8586<<ASSIGN   8590>>IF       8590>>IF       8595<<ASSIGN   8595>>ASSIGN   8643<<ASSIGN
      8645>>ASSIGN   8646>>ASSIGN   8647>>ASSIGN   8648>>ASSIGN   8649>>ASSIGN
NODE$ IN PROCEDURE LOAD_DEFS
      8867**DCL      8870<<ASSIGN   8871>>IF       8877>>ASSIGN   8878>>ASSIGN   8882>>ASSIGN   8885>>ASSIGN
      8886>>DOWHILE  8893>>ASSIGN   8896>>ASSIGN
NODE$ IN PROCEDURE UNLOAD_DEFS
      8806**DCL      8808<<ASSIGN   8809>>IF       8811>>ASSIGN   8812>>ASSIGN   8819>>ASSIGN   8820>>ASSIGN
      8821>>ASSIGN   8822>>ASSIGN   8823>>ASSIGN   8824>>ASSIGN   8827<<ASSIGN   8828>>IF       8828>>IF
      8831>>CALL     8832>>CALL     8833>>CALL     8834>>CALL     8835>>CALL
NODENUM
        47**DCL      8587<<ASSIGN   8589>>DOINDEX  8692<<ASSIGN   8695>>DOINDEX  8704>>ASSIGN   8711>>ASSIGN
      8754<<ASSIGN   8757>>ASSIGN   8767>>ASSIGN   8785>>DOINDEX  8826>>DOINDEX
NOMEM
        42**DCL      8712<<ASSIGN   8766<<ASSIGN   8934>>IF       8936<<ASSIGN
NOREC IN PROCEDURE READREC
      8941**LABEL    8920--CALLALT
NORECD IN PROCEDURE LOAD_DEFS
      8904**LABEL    8876--CALLALT
NORECE IN PROCEDURE LOAD_DEFS
      8891**LABEL    8881--CALLALT
NORECS IN PROCEDURE LOAD_DEFS
      8896**LABEL    8892--CALLALT
NOSTR IN PROCEDURE READREC
      8934**LABEL    8925--CALLALT
NX$ IN PROCEDURE LOAD_DEFS
      8863**DCL      8873<<ASSIGN   8878>>ASSIGN   8879<<ASSIGN   8879>>ASSIGN   8882>>ASSIGN   8883>>ASSIGN
      8884<<ASSIGN   8884>>ASSIGN   8885>>ASSIGN   8893>>ASSIGN   8894<<ASSIGN   8894>>ASSIGN   8896>>ASSIGN
      8897>>ASSIGN   8904>>ASSIGN   8915>>IF       8918>>ASSIGN   8920<>CALL
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:71   
NX$ IN PROCEDURE UNLOAD_DEFS
      8804**DCL      8814<<ASSIGN   8815>>ASSIGN   8839>>ASSIGN
PREV
        40**DCL      8701>>ASSIGN   8706<<ASSIGN
PTRW IN PROCEDURE UNLOAD_DEFS
      8846**PROC     8831--CALL     8832--CALL     8833--CALL     8834--CALL     8835--CALL
PTRW$ IN PROCEDURE PTRW
      8848**DCL      8846--PROC     8850>>IF       8851<<ASSIGN   8851>>ASSIGN
READREC IN PROCEDURE LOAD_DEFS
      8911**PROC     8876--CALL     8881--CALL     8892--CALL
REREAD IN PROCEDURE READREC
      8918**LABEL    8927--GOTO
S IN PROCEDURE UNLOAD_DEFS
      8800**DCL      8799--IMP-SIZ  8815<<ASSIGN   8817>>ASSIGN   8817>>ASSIGN
SPACE IN PROCEDURE UNLOAD_DEFS
      8798**DCL      8817<<ASSIGN   8817>>ASSIGN
ST$ IN PROCEDURE UNLOAD_DEFS
      8802**DCL      8811<<ASSIGN   8813>>ASSIGN   8817>>ASSIGN   8828>>IF
SYM$
        33**DCL        31--PROC       34--REDEF    8588>>ASSIGN   8628--ENTRY
S_D.B$TREE$
      7503**DCL      8586>>ASSIGN   8634>>ASSIGN   8635>>ASSIGN   8697>>IF       8759>>IF       8769>>ASSIGN
S_D.CURRENT_CHANNEL
      7783**DCL      7785--REDEF
S_D.DEBUGA
      6935**DCL      6937--REDEF
S_D.DNAME$
      7277**DCL      8649<<ASSIGN
S_D.EDEF$
      7279**DCL      8645<<ASSIGN
S_D.EDEF_END$
      7283**DCL      8646<<ASSIGN
S_D.EIS
      7893**DCL      7922--REDEF
S_D.ERROR
      6864**DCL      8597<<ASSIGN   8657<<ASSIGN   8937<<ASSIGN   8962<<ASSIGN
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:72   
S_D.HOST_MESSAGE_BUF_REMOTE
      7826**DCL      7827--REDEF    7841--REDEF
S_D.JDE
      7440**DCL      7441--REDEF
S_D.L$.VALUE
      6993**DCL      6999--REDEF    7007--REDEF    7010--REDEF    7013--REDEF    7016--REDEF
S_D.L$.VALUE.L
      6994**DCL      6995--REDEF    6996--REDEF
S_D.L6_MESSAGE_BUF
      7847**DCL      7849--REDEF
S_D.MTREE$
      7493**DCL      8691>>ASSIGN
S_D.NODE
      7392**DCL      8644<<ASSIGN   8764>>ASSIGN
S_D.NODE#M1
      7501**DCL      8587>>ASSIGN   8631>>ASSIGN   8692>>ASSIGN   8754>>ASSIGN
S_D.NODESEG$
      7527**DCL      8643>>ASSIGN   8696>>ASSIGN   8808>>ASSIGN   8827>>ASSIGN   8870>>ASSIGN   8925<>CALL
      8958<>CALL
S_D.NODESEG_NEXT$
      7509**DCL      8814>>ASSIGN   8839<<ASSIGN   8873>>ASSIGN   8897<<ASSIGN   8904<<ASSIGN   8953>>ASSIGN
S_D.NODESEG_USED$
      7507**DCL      8874>>ASSIGN   8898<<ASSIGN   8905<<ASSIGN   8953>>ASSIGN   8959<<ASSIGN   8959>>ASSIGN
S_D.OUTPUT
      7813**DCL      7815--REDEF
S_D.PADDR
      7499**DCL      8633>>IF
S_D.REMOTE_MSG.FNCC
      7832**DCL      7833--REDEF
S_D.REMOTE_MSG.STXC
      7828**DCL      7829--REDEF
S_D.REMOTE_MSG.SUBFNCC
      7836**DCL      7837--REDEF
S_D.SDEF$
      7281**DCL      8647<<ASSIGN
S_D.SDEF_END$
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:73   
      7285**DCL      8648<<ASSIGN
S_D.SV
      6892**DCL      6913--REDEF
S_D.TREE$
      7491**DCL      8631>>ASSIGN   8654>>ASSIGN
S_D.UTREE$
      7495**DCL      8755>>ASSIGN
S_D$
      8144**DCL      6840--IMP-PTR  8586>>ASSIGN   8587>>ASSIGN   8597>>ASSIGN   8631>>ASSIGN   8631>>ASSIGN
      8633>>IF       8634>>ASSIGN   8635>>ASSIGN   8643>>ASSIGN   8644>>ASSIGN   8645>>ASSIGN   8646>>ASSIGN
      8647>>ASSIGN   8648>>ASSIGN   8649>>ASSIGN   8654>>ASSIGN   8657>>ASSIGN   8691>>ASSIGN   8692>>ASSIGN
      8696>>ASSIGN   8697>>IF       8754>>ASSIGN   8755>>ASSIGN   8759>>IF       8764>>ASSIGN   8769>>ASSIGN
      8808>>ASSIGN   8814>>ASSIGN   8827>>ASSIGN   8839>>ASSIGN   8870>>ASSIGN   8873>>ASSIGN   8874>>ASSIGN
      8897>>ASSIGN   8898>>ASSIGN   8904>>ASSIGN   8905>>ASSIGN   8925>>CALL     8937>>ASSIGN   8953>>ASSIGN
      8953>>ASSIGN   8958>>CALL     8959>>ASSIGN   8959>>ASSIGN   8962>>ASSIGN
TEMP$ IN PROCEDURE LOAD_DEFS
      8868**DCL      8883<<ASSIGN   8886>>DOWHILE  8887>>ASSIGN   8888<<ASSIGN   8888>>ASSIGN
TEXT$C.SIZE
      1353**DCL      1354--IMP-SIZ  8590>>IF       8590>>IF
TEXT$C.TXT
      1354**DCL      8590>>IF       8590>>IF
TOBEREL IN PROCEDURE CHECK_MEM
      8951**DCL      8953<<ASSIGN   8955>>IF       8957<<ASSIGN   8957>>ASSIGN   8958<>CALL     8959>>ASSIGN
TREE$
        45**DCL      8691<<ASSIGN   8699>>ASSIGN   8701>>ASSIGN   8704>>ASSIGN   8711>>ASSIGN   8715>>ASSIGN
      8755<<ASSIGN   8757>>ASSIGN   8761>>ASSIGN   8767>>ASSIGN   8770>>ASSIGN   8771>>ASSIGN   8786>>ASSIGN
      8787>>ASSIGN
TREE_INIT
      8781**PROC     8693--CALL     8765--CALL
TSYM$
        36**DCL      8588<<ASSIGN   8590>>IF       8590>>IF
TYPE IN PROCEDURE LOAD_DEFS
      8866**DCL      8875<<ASSIGN   8880<<ASSIGN   8891<<ASSIGN   8920<>CALL
UNLOAD_DEFS
      8796**PROC     8708--CALL     8760--CALL
US$ IN PROCEDURE LOAD_DEFS
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:74   
      8864**DCL      8874<<ASSIGN   8898>>ASSIGN   8905>>ASSIGN   8915>>IF       8918>>ASSIGN   8926<<ASSIGN
      8926>>ASSIGN
W IN PROCEDURE LOAD_DEFS
      8865**DCL      8879>>ASSIGN   8884>>ASSIGN   8894>>ASSIGN   8918<<ASSIGN   8920<>CALL     8929<<ASSIGN
W IN PROCEDURE UNLOAD_DEFS
      8801**DCL      8813<<ASSIGN   8839>>ASSIGN   8851>>ASSIGN
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:75   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$ND_SRCH File=DUS$ND_SRCH.:E05TSI                          TUE 07/29/97 14:59 Page:76   
              MINI UREF LISTING

B$TREEHDR    5230**DCL
DDS$EMTREE    8688**ENTRY
DDS$EUTREE    8752**ENTRY
DDS$IC2NODE    8628**ENTRY
DDS$ND_SRCH      31**PROC
