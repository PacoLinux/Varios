

14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        1    
    1      /*M* GU_MACROS_M   Macros used by the LCP-6 MCL decoder and handlers   */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*X*  MEC,MOC,EXM=20,CLM=30,CRM=100       */
    9
   10
   11
   12
   13
   14                          /*F*   NAME:  GU_MACROS_M.
   15
   16                          The file GU_MACROS_M contains the macro definitions
   17                          that are used to generate the data structures and
   18                          corresponding EQU statements that are used by the
   19                          LCP-6 monitor services decoder and related routines.
   20
   21                          Macros contained in this file include the following:
   22                          }
   23                          } GUD_FCG_INFO
   24                          } GUD_MCL_INFO
   25                          } GUD_VECT_INFO
   26                          } GUD_MCL_TABLE
   27                          } GUD_MCL_HANDLERS
   28                          }
   29                          } GUD$FPTCODE
   30                          } GUD$VECTOR
   31                          }
   32                          } GUD_HAND_PARAMS
   33                          } GUE_ENVTCB_PARAMS
   34                          }
   35                          */
   36
   37
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        2    
   38
   39
   40                          /*F*   NAME:   GUD_FCG_INFO.
   41
   42                          The GUD_FCG_INFO macro is invoked once within each
   43                          fcg_FPT macro to specify the parameters for decoding
   44                          MCLs assigned to this fcg.
   45
   46                          The following options may be specified when
   47                          invoking the GUD_FCG_INFO macro:
   48                          */
   49
   50      %MACRO GUD_FCG_INFO
   51        (FPTN=*,
   52        C=0,
   53        HAND=NIL,
   54        LVL=2,
   55        LAST(YES=";",NO=",",ANY)=",",
   56        ALGN=WALIGNED,
   57        STCLASS=CONSTANT);
   58
   59      %LSET LISTDIR='0'B;
   60      %LSET LISTEXP='1'B;
   61      %LSET LISTCOM='0'B;
   62      %LSET LISTSUB='1'B;
   63
   64      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   65      %IF (SUBSTR(STR,0,6)='STATIC') OR
   66      (SUBSTR(STR,0,8)='CONSTANT') OR
   67      (SUBSTR(STR,0,3)='EXT');
   68      %LSET INIT=CHARTEXT('INIT');
   69      %ELSE;
   70      %LSET INIT=CHARTEXT('/*');
   71      %ENDIF;
   72
   73      %LSET STR=CONCAT(TEXTCHAR(HAND),'        ');
   74      %IF (SUBSTR(STR,0,3)='NIL');
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        3    
   75      %LSET FCG_TYP=CHARTEXT('0');
   76      %LSET TYP=0;
   77      %ELSE;
   78      %LSET FCG_TYP=CHARTEXT('1');
   79      %LSET TYP=1;
   80      %ENDIF;
   81
   82      %IF LVL=1;
   83      DCL 1 FPTN STCLASS ALGN,
   84      %ELSE;
   85              %LVL FPTN,
   86      %ENDIF;
   87
   88                %(LVL+1) %CHARTEXT('FCG_TYP ') UBIN(1) UNAL %INIT(%FCG_TYP)%CHARTEXT('/**/'),
   89                %(LVL+1) * UBIN(5) UNAL %INIT(0)%CHARTEXT('/**/'),
   90
   91      %IF TYP=0;
   92                %(LVL+1) %CHARTEXT('C ') UBIN(10) UNAL %INIT(C)%CHARTEXT('/**/') LAST
   93                          /*K*  C = VALUE-UBIN(10).  Specifies the highest
   94                          MCL code that is valid for this fcg.  Note that this
   95                          value includes the fcg;  i.e. the highest
   96                          value specified in the fcg_MCL_E macro within the
   97                          fcg_LCP6_M file should be specified.  The GUD$MCLENT
   98                          routine will verify that the MCL code is valid
   99                          using the data generated by this macro.
  100
  101                          Default = 0; indicating there are no valid monitor
  102                          service calls for this fcg.
  103                          The default would be used in fcg_LCP6_M files that
  104                          contain only data structures that are to be made
  105                          available to the user, as in GH_LCP6_M.
  106                          */
  107      %ELSE;
  108                %(LVL+1) %CHARTEXT('C ') UBIN(10) UNAL %INIT(C)%CHARTEXT('/**/'),
  109                %(LVL+1) %CHARTEXT('HAND ') EPTR %INIT(ENTADDR(HAND))%CHARTEXT('/**/') LAST
  110                          /*K*  HAND = EPTR.  Specifies the name of the
  111                          monitor routine that is the handler for all
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        4    
  112                          monitor service requests in this fcg.   The HAND
  113                          option should be specified within the GUD_FCG_INFO
  114                          macro when the same monitor routine is to be called
  115                          to process all service requests for the fcg.  When
  116                          the HAND option is used with the GUD_FCG_INFO macro,
  117                          it must not then be used within subsequent GUD_MCL_INFO
  118                          macros.
  119
  120                          This handler name must also be specified within the
  121                          fcg$HANDLERS that is within the fcg_LCP6_m file.
  122                          Default = NIL.
  123                          */
  124      %ENDIF;
  125
  126      %MEND;
  127
  128
  129
  130
  131
  132                          /*F*   NAME:   GUD_MCL_INFO.
  133
  134                          The GUD_MCL_INFO macros is invoked by the fcg_FPT macro
  135                          once for each MCL code that is defined for that fcg.
  136                          The GUD$MCLENT routine uses the data generated by
  137                          macro to determine the number of parameters expected
  138                          by the MCL handler and the name of the individual
  139                          handlers if a global handler was not specified with the
  140                          GUD_FCG_INFO macro.
  141
  142                          When the number of parameters allowed for the MCL
  143                          is non-zero, the GUD_MCL_INFO macro invokation must be
  144                          followed by an invokation of the GUD_VECT_INFO macro,
  145                          once for each parameter the user may supply.
  146
  147                          The following options may be specified when
  148                          invoking the GUD_MCL_INFO macro:
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        5    
  149
  150                          */
  151
  152      %MACRO GUD_MCL_INFO
  153        (FPTN=*,
  154        C=0,
  155        V=0,
  156        HAND=NIL,
  157        LVL=2,
  158        LAST(YES=";",NO=",",ANY)=",",
  159        ALGN=WALIGNED,
  160        STCLASS=CONSTANT);
  161
  162      %LSET LISTDIR='0'B;
  163      %LSET LISTEXP='1'B;
  164      %LSET LISTCOM='0'B;
  165      %LSET LISTSUB='1'B;
  166
  167      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  168      %IF (SUBSTR(STR,0,6)='STATIC') OR
  169      (SUBSTR(STR,0,8)='CONSTANT') OR
  170      (SUBSTR(STR,0,3)='EXT');
  171      %LSET INIT=CHARTEXT('INIT');
  172      %ELSE;
  173      %LSET INIT=CHARTEXT('/*');
  174      %ENDIF;
  175
  176      %LSET STR=CONCAT(TEXTCHAR(HAND),'        ');
  177      %IF (SUBSTR(STR,0,3)='NIL');
  178      %LSET TYP=0;
  179      %ELSE;
  180      %LSET TYP=1;
  181      %ENDIF;
  182
  183      %IF LVL=1;
  184      DCL 1 FPTN STCLASS ALGN,
  185           %(LVL+1) %CHARTEXT('V ') SBIN(6) UNAL %INIT(V)%CHARTEXT('/**/'),
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        6    
  186                          /*K*  V = VALUE-SBIN(6).   Specifies the number
  187                           of parameters (expressed via seperate vectors in
  188                           the FPT) that are expected on this MCL.
  189                           Default = 0.
  190                           */
  191      %IF TYP=0;
  192           %(LVL+1) %CHARTEXT('C ') UBIN(10) UNAL %INIT(C)%CHARTEXT('/**/') LAST
  193      %ELSE;
  194           %(LVL+1) %CHARTEXT('C ') UBIN(10) UNAL %INIT(C)%CHARTEXT('/**/'),
  195                          /*K*  C= VALUE-UBIN(10).  Specifies the MCL code for
  196                          this monitor service request.  Note that this value
  197                          includes the fcg; i.e.  the value specified in the
  198                          fcg_MCL_E macro should be used here.
  199                          Default = 0.
  200                          */
  201           %(LVL+1) %CHARTEXT('HAND ') EPTR %INIT(ENTADDR(HAND))%CHARTEXT('/**/') LAST
  202      %ENDIF;
  203                          /*K*  HAND = EPTR.  Specifies the name of the
  204                          monitor routine that is the handler for this
  205                          specific monitor service request.  If the HAND
  206                          option is used in any GUD_MCL_INFO macro invokation
  207                          for a fcg, it must be specified in all GUD_MCL_INFO
  208                          macros for that fcg and must not be used with the
  209                          GUD_FCG_INFO macro for this fcg.
  210
  211                          This handler name must also be specified within the
  212                          fcg$HANDLERS that is within the fcg_LCP6_m file.
  213                          Default = NIL.
  214                          */
  215
  216      %ELSE;
  217      %IF TYP=0;
  218              %LVL FPTN UBIN WORD %INIT(%(V*1024 + C))%CHARTEXT('/**/') LAST
  219      %ELSE;
  220                %LVL FPTN UBIN WORD %INIT(%(V*1024 + C))%CHARTEXT('/**/'),
  221                %LVL * EPTR %INIT(ENTADDR(HAND))%CHARTEXT('/**/') LAST
  222      %ENDIF;
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        7    
  223
  224      %ENDIF;
  225
  226      %MEND;
  227
  228
  229
  230                          /*F*   NAME:   GUD_VECT_INFO.
  231
  232                          The GUD_VECT_INFO macro is invoked by the fcg_FPT macro
  233                          and describes the parameter requirements for the
  234                          monitor service that is defined by the GUD_MCL_INFO macro
  235                          invokation that must immediately preceed the use of
  236                          the GUD_VECT_INFO macro.
  237
  238                          The following options should be specified when
  239                          invoking the GUD_VECT_INFO macro.
  240
  241                          */
  242      %MACRO GUD_VECT_INFO
  243        (FPTN=*,
  244        MAND (YES=1,NO=0) =0,
  245        WRT (YES=1,NO=0) =0,
  246        TYP (LPAR=0,BPAR=1) =0,
  247        ALIGN (BY=1,WD=0) =0,
  248        BND = 3,
  249        LVL=2,
  250        LAST(YES=";",NO=",",ANY)=",",
  251        ALGN=WALIGNED,
  252        STCLASS=CONSTANT);
  253
  254      %LSET LISTDIR='0'B;
  255      %LSET LISTEXP='1'B;
  256      %LSET LISTCOM='0'B;
  257      %LSET LISTSUB='1'B;
  258
  259      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        8    
  260      %IF (SUBSTR(STR,0,6)='STATIC') OR
  261      (SUBSTR(STR,0,8)='CONSTANT') OR
  262      (SUBSTR(STR,0,3)='EXT');
  263      %LSET INIT=CHARTEXT('INIT');
  264      %ELSE;
  265      %LSET INIT=CHARTEXT('/*');
  266      %ENDIF;
  267
  268      %IF LVL=1;
  269      DCL 1 FPTN STCLASS ALGN,
  270            %(LVL+1) %CHARTEXT('MAND ') UBIN(1) UNAL %INIT(MAND)%CHARTEXT('/**/'),
  271                          /*K*  MAND = {YES | NO}.  Indicates if the parameter
  272                          is mandatory.  If NO is specified, the user is allowed
  273                          to specify a NULL vector for this parameter.
  274                          Default = NO.
  275                          */
  276            %(LVL+1) %CHARTEXT('WRT ') UBIN(1) UNAL %INIT(WRT)%CHARTEXT('/**/'),
  277                          /*K*  WRT = {YES | NO}.  Indicates if the monitor
  278                          services handler must have write access to this
  279                          parameter.
  280                          Default = NO.
  281                          */
  282            %(LVL+1) %CHARTEXT('TYP ') UBIN(1) UNAL %INIT(TYP)%CHARTEXT('/**/'),
  283                          /*K*  TYP = {LPAR | BPAR}.  Specifies if the GUD$MCLENT
  284                           routine is to use the Little PARameter or Big PARameter
  285                           slots within ASDT_MCL when building the descriptor for
  286                           this parameter.  Default = LPAR.
  287
  288                           There may be no more than two BPAR parameters within
  289                           the first eight.  However, all of the first eight
  290                           parameters may be of type LPAR; the seventh and
  291                           eighth will be mapped into BPAR1 and BPAR2 by the
  292                           monitor service decoder.  If there is a need
  293                           for less than six LPARs and more than two BPARs
  294                           the FPT should be padded with NULL vectors.
  295                           */
  296            %(LVL+1) %CHARTEXT('ALIGN ') UBIN(1) UNAL %INIT(ALIGN)%CHARTEXT('/**/'),
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        9    
  297                          /*K*  ALIGN = {BY | WD}.  Specifies BYte or WorD alignment.
  298                          If WD is specified and the user supplies a Character
  299                          Pointer within the vector for this parameter, the MCL
  300                          handler will not be entered and an ALTRET will
  301                          be made to the user's monitor service request.
  302                          Default = WD.
  303                          */
  304            %(LVL+1) %CHARTEXT('BND ') UBIN WORD %INIT(BND)%CHARTEXT('/**/') LAST
  305                          /*K*  BND = VALUE-UBIN WORD.  Specifies the minumum byte
  306                           size -1 (i.e. bound) for this parameter.  If that supplied by the user is
  307                           less than this value, the MCL handler will not be entered
  308                           and an ALTRET will be made to the user's monitor service
  309                           request.
  310                           Default = 3.
  311                           */
  312
  313      %ELSE;
  314
  315              %LVL FPTN UBIN WORD %INIT(%(MAND*32768 + WRT*16384 + TYP*8192 + ALIGN*4096))%CHARTEXT('/**/'),
  316                %LVL * UBIN WORD %INIT(BND)%CHARTEXT('/**/') LAST
  317
  318      %ENDIF;
  319      %MEND;
  320
  321
  322
  323
  324
  325                          /*F*   NAME: GUD_MCL_TABLE.
  326
  327                          The GUD_MCL_TABLE macro generates the table
  328                          of FPT specific information that is required
  329                          by the LCP-6 monitor services decoder.
  330
  331                          The fcg_FPTS macro from the individual FPT
  332                          files is invoked to generate the required
  333                          data.
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        10   
  334                          */
  335
  336      %MACRO GUD_MCL_TABLE (FPTN=GUD_MCL_TABLE,
  337                            STCLASS=CONSTANT);
  338
  339      DCL 1 FPTN STCLASS WALIGNED,
  340      /* Build an index to the rest of the table */
  341            2 INDEX_(0:%G_MAXFCG#) PTR
  342               INIT(ADDR(FPTN.FCG0),
  343                    ADDR(FPTN.GH_FPTS),
  344                    ADDR(FPTN.GJ_FPTS),
  345                    ADDR(FPTN.GU_FPTS),
  346                    ADDR(FPTN.GM_FPTS),
  347                    ADDR(FPTN.GF_FPTS),
  348                    ADDR(FPTN.KI_FPTS),
  349                    ADDR(FPTN.GT_FPTS)),
  350
  351            %GH_FPTS (FPTN=GH_FPTS);
  352            %GJ_FPTS (FPTN=GJ_FPTS);
  353            %GU_FPTS (FPTN=GU_FPTS);
  354            %GM_FPTS (FPTN=GM_FPTS);
  355            %GF_FPTS (FPTN=GF_FPTS);
  356            %KI_FPTS (FPTN=KI_FPTS);
  357            %GT_FPTS (FPTN=GT_FPTS);
  358            2 FCG0 SBIN INIT(-1);
  359
  360      %MEND;
  361
  362
  363
  364
  365
  366                          /*F*   NAME: GUD_MCL_HANDLERS.
  367
  368                          The GUD_MCL_HANDLERS macro is used by the LCP-6
  369                          monitor services decoder to generate the ENTRY
  370                          statements for the individual monitor service
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        11   
  371                          processing routines.
  372
  373                          This macro invokes the individual fcg$HANDLERS
  374                          macros.
  375                          */
  376
  377      %MACRO GUD_MCL_HANDLERS;
  378      %GH$HANDLERS;
  379      %GJ$HANDLERS;
  380      %GU$HANDLERS;
  381      %GM$HANDLERS;
  382      %GF$HANDLERS;
  383      %KI$HANDLERS;
  384      %GT$HANDLERS;
  385      %MEND;
  386                          /*F*   NAME:   GUD$FPTCODE.
  387
  388                          The GUD$FPTCODE macro generates a structure that
  389                          defines the R3 register value that is used for
  390                          MCL processing.
  391
  392                          Fields within this structure are as follows:
  393                          */
  394
  395      %MACRO GUD$FPTCODE (FPTN=GUD$FPTCODE,
  396         LVL=1,
  397         LAST(YES=";",NO=",",ANY)=";",
  398         STCLASS=BASED);
  399
  400      %IF LVL=1;
  401      DCL 1 FPTN STCLASS WALIGNED,
  402      %ELSE;
  403              %LVL FPTN,
  404      %ENDIF;
  405
  406                %(LVL+1) V# UBIN(6) UNAL,
  407                          /*K* V# = VALUE-UBIN(6).  Contains the number
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        12   
  408                          of vectors in the FPT.
  409                          */
  410                %(LVL+1) CODE UBIN(10) UNAL,
  411                          /*K* CODE = VALUE-UBIN(10).  Contains the monitor service
  412                          request code.  This field is REDEFed as C.FCG UBIN(4) and
  413                          C.MCL UBIN(6) so that the individual code may be isolated
  414                          within a specific FCG group.
  415                          */
  416                %(LVL+1) C REDEF CODE,
  417                %(LVL+2) FCG UBIN(4) UNAL,
  418                %(LVL+2) MCL UBIN(6) UNAL LAST
  419      %MEND;
  420
  421
  422
  423
  424
  425                          /*F*   NAME:   GUD$VECTOR.
  426
  427                          The GUD$VECTOR macro generates a structure that
  428                          defines the LCP-6 vector.
  429
  430                          The fields within this structure are as follows:
  431                          */
  432
  433      %MACRO GUD$VECTOR (FPTN=GUD$VECTOR,STCLASS=BASED);
  434
  435      DCL 1 FPTN STCLASS ALIGNED,
  436            2 BND UBIN WORD,
  437                          /*K* BND = VALUE-UBIN WORD.  Contains the bound
  438                          (size-1) of the area framed by this vector.
  439                          */
  440            2 BASE$ PTR,
  441                          /*K* BASE$ = PTR.  Contains the base
  442                          address of the data framed by this vector.
  443                          This field is REDEFed as CPTR$ and CBASE.
  444                          */
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        13   
  445            2 CPTR$ REDEF BASE$ CPTR,
  446                          /*K* CPTR$ = CPTR.  Redefines BASE$.
  447                          */
  448            2 CBASE REDEF BASE$,
  449              3 C BIT(1) UNAL,
  450                          /*K* CBASE.C = BIT(1).  If set, indicates
  451                          that the pointer is a character pointer.
  452                          */
  453              3 MBZ UBIN(11) UNAL,
  454              3 ADDRS UBIN(20) UNAL;
  455                          /*K* ADDRS = VALUE-UBIN(20).  Contains a
  456                          UBIN value for the base address of the
  457                          data framed by this vector.
  458                          */
  459      %MEND;
  460
  461
  462
  463
  464
  465                          /*F*   NAME:   GUD_HAND_PARAMS.
  466
  467                          Only one parameter is passed from the monitor services
  468                          decoder to the individual handlers.  This parameter
  469                          is a structure that contains the data that
  470                          enables the handler to address the user's data and
  471                          data to convey error information.
  472
  473                          The GUD_HAND_PARAMS macro is to be used to generate
  474                          the structure that contains the parameters that are
  475                          passed to the monitor service handlers from the
  476                          GUD$MCLENT routine.
  477
  478                          The FPTN option may be used to name the structure;
  479                          default name is GUD_HAND_PARAMS.  The STCLASS
  480                          option may be used to specify the storage class; the
  481                          default is parameter.
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        14   
  482
  483                          The following EQUs, to be used to set the USR_PARAM_INDX,
  484                          will be generated:
  485                          }
  486                          }   %EQU PAR9#=0;
  487                          }   %EQU PAR10#=1;
  488                          }   %EQU PAR11#=2;
  489                          }   %EQU PAR12#=3;
  490                          }   %EQU PAR13#=4;
  491                          }   %EQU PAR14#=5;
  492                          }   %EQU PAR15#=6;
  493                          }   %EQU PAR16#=7;
  494                          }
  495                          (If this macro is to be used more than once within the
  496                           same compilation, "GEN_EQUS=NO" should be specified
  497                           to prevent double definition of these values.)
  498
  499                          Note that this macro invokes the VLP_ERRCODE
  500                          macro which is defined in GU_LCP6_M.  The GU_LCP6_M file
  501                          must be specified as an %INCLUDE file when
  502                          using the GUD_HAND_PARAMS macro.
  503
  504                          Fields within this structure are as follows:
  505
  506                          */
  507
  508      %MACRO GUD_HAND_PARAMS (FPTN=GUD_HAND_PARAMS,
  509         GEN_EQUS(YES=1,NO=0,ANY)=1,
  510         STCLASS= " ");
  511
  512      DCL 1 FPTN STCLASS WALIGNED,
  513            %GUD$FPTCODE (FPTN=MCL,LVL=2,LAST=NO);
  514                          /*K*  MCL = VALUE-BIT(16).  Contains the contents of R3 at
  515                          the time of the monitor service MCL.  This field is subdivided
  516                          as follows:
  517                          */
  518                          /*K* MCL.V# = VALUE-SBIN(6).  Contains the number
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        15   
  519                          of vectors in the FPT.
  520                          */
  521                          /*K* MCL.CODE = VALUE-SBIN(10).  Contains the monitor service
  522                          request code.  This field is REDEFed as C.FCG UBIN(4) and
  523                          C.MCL UBIN(6) so that the individual code may be isolated
  524                          within a specific FCG group.
  525                          */
  526
  527            2 TSA$ PTR,
  528                          /*K* TSA$ = PTR.  Contains the address of
  529                          the Trap Save Area where the MCL environment
  530                          was stored by the hardware.
  531                          */
  532            %VLP_ERRCODE (FPTN=ERR,LVL=2,STCLASS=STCLASS,LAST=NO);
  533                          /*K* ERR = BIT(32).  Contains zero.  If the handler
  534                          wishes to report an error and ALTRET to the user the
  535                          error code (in VLP_ERRCODE format) should be put here.
  536                          */
  537
  538            2 ALT_SPEC SBIN WORD,
  539                          /*K* ALT_SPEC = VALUE-SBIN.  This word is set from the
  540                          contents of the user's memory which contains the ALTRET
  541                          specification for the the monitor service request.  It
  542                          is moved from the user memory to AUTO so that it will be
  543                          available to the MCL exit routine for error processing
  544                          while still mapped onto the monitor.
  545                          */
  546            2 PTRS,
  547                          /*K* PTRS.PARn$ = PTR.
  548
  549                          where n = 1-> 8.  Contains the
  550                          pointers that may be used to address the user parameters.
  551                          Descriptors for the user parameters are built in ASDT_MCL
  552                          by the GUD$MCLENT routine.
  553
  554
  555                          where n = 9 -> 16.  Contains
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        16   
  556                          the offset from the base of the segment as defined by the
  557                          corresponding DESC field to the first byte of user specified
  558                          data.  These pointers are usable only after the
  559                          the descriptor for the user parameter has been
  560                          placed in ASDT that is
  561                          used for monitor service processing, and the pointer
  562                          itself updated to reflect this mapping.  The monitor
  563                          service handler can accomplish this by setting the
  564                          value in ASDT_MCL_INDX to indicate an available
  565                          LPAR or BPAR descriptor slot, setting the value in
  566                          USR_PARAM_INDX to indicate which parameter (9 -> 16)
  567                          is to be mapped, and calling the GUD$MAPPER routine
  568                          specifying the entire GUD_HAND_PARAMS structure as
  569                          the only parameter.  For example:
  570                          }
  571                          }  MCL$HANDLER: PROC(GUD_PARAMS);
  572                          }
  573                          }  %INCLUDE GU_MACROS_M;   get GUD_HAND_PARAMS macro
  574                          }  %INCLUDE GU_LCP6_M;     get VLP_ERRCODE macro
  575                          }  %INCLUDE GM_VIRTUAL_E;  get ASDT_MCL indices for LPARn
  576                          }
  577                          }  %GUD_HAND_PARAMS (FPTN=GUD_PARAMS);
  578                          }
  579                          }  DCL GUD$MAPPER ENTRY(1);
  580                          }
  581                          }     GUD_PARAMS.ASDT_MCL_INDX = %GM_LPARn#;
  582                          }                                    or %GM_BPARn#
  583                          }     GUD_PARAMS.USR_PARAM_INDX = %PARn#;
  584                          }                                    where n = 9 -> 16
  585                          }     CALL GUD$MAPPER(GUD_PARAMS);
  586                          }
  587                          }  The user data may now be referenced by:
  588                          }      GUD_PARAMS.PTRS.PARn$ -> Based FPT structure
  589                          }
  590                          }  Note that the parameter originally mapped into  the ASDT_MCL
  591                          }  descriptor specified by the ASDT_MCL_INDX can no longer
  592                          }  be referenced.
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        17   
  593                          }
  594                          }  END MCL$HANDLER;
  595                          }
  596
  597
  598                          PTRS.PARn$ fields are REDEFed within this structure as
  599                          follows:
  600                          }
  601                          }   CPTRS.PARn$ CPTR
  602                          }   PTRS_ARRAY(0:15) PTR
  603                          }   CPTRS_ARRAY(0:15) CPTR
  604                          }   PTRS_UBIN(0:15) UBIN(32)
  605                          }
  606                          */
  607              3 PAR1$ PTR,
  608              3 PAR2$ PTR,
  609              3 PAR3$ PTR,
  610              3 PAR4$ PTR,
  611              3 PAR5$ PTR,
  612              3 PAR6$ PTR,
  613              3 PAR7$ PTR,
  614              3 PAR8$ PTR,
  615
  616              3 PAR9$ PTR,
  617              3 PAR10$ PTR,
  618              3 PAR11$ PTR,
  619              3 PAR12$ PTR,
  620              3 PAR13$ PTR,
  621              3 PAR14$ PTR,
  622              3 PAR15$ PTR,
  623              3 PAR16$ PTR,
  624
  625
  626            2 CPTRS REDEF PTRS,
  627              3 PAR1$ CPTR,
  628              3 PAR2$ CPTR,
  629              3 PAR3$ CPTR,
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        18   
  630              3 PAR4$ CPTR,
  631              3 PAR5$ CPTR,
  632              3 PAR6$ CPTR,
  633              3 PAR7$ CPTR,
  634              3 PAR8$ CPTR,
  635              3 PAR9$ PTR,
  636              3 PAR10$ PTR,
  637              3 PAR11$ PTR,
  638              3 PAR12$ PTR,
  639              3 PAR13$ PTR,
  640              3 PAR14$ PTR,
  641              3 PAR15$ PTR,
  642              3 PAR16$ PTR,
  643
  644            2 PTRS_ARRAY(0:15) REDEF PTRS PTR,
  645            2 CPTRS_ARRAY(0:15) REDEF PTRS CPTR,
  646            2 PTRS_UBIN(0:15) REDEF PTRS UBIN(32),
  647
  648            2 BND,
  649                          /*K* BND.PARn = VAULE-UBIN.  where n = 1-> 16.  Contains
  650                          the bound (size - 1) of each of the user supplied parameters.
  651                          These values are REDEFed within this structure as
  652                          follows:
  653                          }
  654                          }   BND_ARRAY(0:15) UBIN
  655                          }
  656                          */
  657              3 PAR1 UBIN,
  658              3 PAR2 UBIN,
  659              3 PAR3 UBIN,
  660              3 PAR4 UBIN,
  661              3 PAR5 UBIN,
  662              3 PAR6 UBIN,
  663              3 PAR7 UBIN,
  664              3 PAR8 UBIN,
  665              3 PAR9 UBIN,
  666              3 PAR10 UBIN,
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        19   
  667              3 PAR11 UBIN,
  668              3 PAR12 UBIN,
  669              3 PAR13 UBIN,
  670              3 PAR14 UBIN,
  671              3 PAR15 UBIN,
  672              3 PAR16 UBIN,
  673            2 BND_ARRAY(0:15) REDEF BND UBIN,
  674            2 DESC,
  675                          /*K* DESC.PARn = BIT(32).  where n = 9 -> 16.  Contains a skeleton
  676                          Address Space Segment Descriptor for later use by the
  677                          GUD$MAPPER routine when mapping user parameters
  678                          passed via FPT vectors 9 through 16.
  679                          These descriptors are REDEFed within this structure as
  680                          follows:
  681                          }
  682                          }   DESCS(0:7) BIT(32)
  683                          }
  684                          */
  685              3 PAR9 BIT(32),
  686              3 PAR10 BIT(32),
  687              3 PAR11 BIT(32),
  688              3 PAR12 BIT(32),
  689              3 PAR13 BIT(32),
  690              3 PAR14 BIT(32),
  691              3 PAR15 BIT(32),
  692              3 PAR16 BIT(32),
  693            2 DESCS(0:7) REDEF DESC BIT(32),
  694
  695            2 ASDT_USR_INDX(0:7) UBIN,
  696                          /*K* ASDT_USR_INDX = ARRAY(0:7)-UBIN.  These values are used
  697                          by the GUD$MAPPER routine to build a usable descriptor from
  698                          the corresponding DESC entry.  The value is used to find
  699                          the descriptor within UHJIT.ASDT_USR for those pages that
  700                          now (after a possible shuffle that may have occurred after
  701                          MCL processing began) contain the user parameter.
  702                          */
  703
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        20   
  704            2 ASDT_MCL_INDX UBIN,
  705                          /*K* ASDT_MCL_INDX = VALUE-UBIN.  This field is to be set by the
  706                          monitor service handler in preparation for a call to GUD$MAPPER
  707                          to indicate where the user's parameter, as specified
  708                          in USR_PARAM_INDX, is to be mapped in ASDT_MCL.
  709
  710                          This field is also to be set by the monitor service
  711                          handler in preperation for a call to GUD$CHKWP to
  712                          indicate which descriptor in ASDT_MCL is to be checked
  713                          for write access.
  714
  715                          One of the following values
  716                          (from the file GM_VIRTUAL_E) should be specified:
  717                          }
  718                          } %GM_LPARn#     where n = 1 -> 6
  719                          } %GM_BPARn#     where n = 1 -> 2
  720                          }
  721                          */
  722
  723            2 USR_PARAM_INDX UBIN;
  724                          /*K* USR_PARAM_INDX = VALUE-UBIN.  This field is to be set by the
  725                          monitor service handler in preparation for a call to GUD$MAPPER
  726                          to indicate which of the user's parameters is to be mapped
  727                          in the descriptor specified via the value in the ASDT_MCL_INDX
  728                          word.  The handler should set the value using one of the
  729                          EQUs that is generated by this macro:
  730                          }
  731                          }   %PARn       where n = 9 ->16;
  732                          }
  733                          */
  734
  735      %IF GEN_EQUS=1;
  736      %EQU PAR9#=0;
  737      %EQU PAR10#=1;
  738      %EQU PAR11#=2;
  739      %EQU PAR12#=3;
  740      %EQU PAR13#=4;
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        21   
  741      %EQU PAR14#=5;
  742      %EQU PAR15#=6;
  743      %EQU PAR16#=7;
  744      %ENDIF;
  745
  746      %MEND;
  747
  748
  749
  750
  751
  752                          /*F*   NAME:   GUE_ENVTCB_PARAMS.
  753
  754                          The GUE_ENVTCB_PARAMS macro is to be used to
  755                          generate the structure that contains the
  756                          parameters that are pased to the routine that
  757                          copies the user environment from his HJIT to
  758                          the TCB, GUE$ENVTCB.
  759
  760                          The FPTN option may be used to name the structure;
  761                          default name is GUE_ENVTCB_PARAMS.  The STCLASS
  762                          option may be used to specify the storage class; the
  763                          default is AUTO.
  764
  765                          The following EQUs, to be used to set the ENVTYPE,
  766                          will be generated:
  767                          }
  768                          }   %EQU GUE_ENVTYPE_TSA=0;
  769                          }   %EQU GUE_ENVTYPE_ISA=1;
  770                          }
  771                          (If this macro is to be used more once within the
  772                           same compilation, "GEN_EQUS=NO" should be specified
  773                           to prevent double definition of these values.)
  774
  775                          Note that this macros invokes the G$EXCFR_TRLR
  776                          macro which is defined in GU_LCP6_M.  The GU_LCP6_M file
  777                          must be specified as an %INCLUDE file when
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        22   
  778                          using the GUE_ENVTCB_PARAMS macro.
  779
  780                          There are no provisions for supplying initial values
  781                          for the fields within this structure.
  782
  783                          Fields within this structure are as follows:
  784
  785                          */
  786
  787      %MACRO GUE_ENVTCB_PARAMS (FPTN=GUE_ENVTCB_PARAMS,
  788         GEN_EQUS(YES=1,NO=0,ANY)=1,
  789         STCLASS=AUTO);
  790
  791      DCL 1 FPTN STCLASS WALIGNED,
  792            2 P$$ EPTR,
  793            2 P$ REDEF P$$ PTR,
  794                          /*K*  P$$ = EPTR.  This is the value to be used to
  795                          replace the Program Counter in the environment that
  796                          is within the user's HJIT after that environment
  797                          has been moved to the TCB.
  798                          This field is REDEFed as a PTR using the label P$.
  799                          */
  800            2 ECC SBIN WORD,
  801                          /*K*  ECC = VALUE-SBIN WORD.  Specifies the Exceptional
  802                          Condition Code that is to be placed in the first word
  803                          of the TCB frame.  One of the EQUs from the G_LCP6_E
  804                          file that specify the values for G$EXCFR.ECC should be
  805                          used.
  806                          */
  807            %G$EXCFR_TRLR (FPTN=ECINFO,LVL=2,LAST=NO);
  808                          /*K*  ECINFO = structure.  Specifies the Exceptional
  809                          Condition frame trailer information.  Please refer to
  810                          the discussion of the G$EXCFR_TRLR macro in the
  811                          GU_LCP6_M macro for the fields within this structure
  812                          and thier meanings.
  813                          */
  814            2 MOREINFO$ PTR,
14:36 JUL 28 '97 GU_MACROS_M.:E05SI                                        23   
  815                          /*K*  MOREINFO$ = PTR.  When the value for FPTN.ECINFO.P#
  816                          is non-zero, this field is to contain a pointer to the
  817                          additional TCB information.
  818                          */
  819            2 ENVTYPE SBIN,
  820                          /*K*  ENVTYPE = VALUE-SBIN.  If the user's environment is
  821                          within a Trap Save Area, this field is to be set to 0
  822                          (%GUE_ENVTYPE_TSA#);  if within an Interrupt Save Area, this
  823                          field is to be set to 1 (GUE_ENVTYPE_ISA#).
  824                          */
  825            2 ENV$ PTR,
  826                          /*K*  ENV$ = PTR.  Specifies the address of the user
  827                          environment within the user's HJIT that is to be moved
  828                          to the TCB.
  829                          */
  830            2 TCB$ PTR;
  831                          /*K*  TCB$ = PTR.  Specifies the address of the TCB that
  832                          is to contain the environment addressed by ENV$.  If this
  833                          pointer is nil, the GUE$ENVTCB routine will use the user's
  834                          TCB, which is contained within the user's Read Only Segment.
  835                          */
  836      %IF GEN_EQUS=1;
  837      %EQU GUE_ENVTCB_TSA# = 0;
  838      %EQU GUE_ENVTCB_ISA# = 1;
  839      %ENDIF;
  840
  841      %MEND;
  842
  843
  844
  845
  846

