VERSION E05

PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:1    
        1        1        /*M* VXR$READ - reads the LINK command stream. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DMR,PLM=6,IND=4,SDI=2,CTI=8,DCI=4,CSU=2,ECU=2,ENI=4,
        8        8              THI=0,DTI=0,IAD=0,CCC                          */
        9        9        /*
       10       10              Type      action
       11       11
       12       12               0        read thru M$SI
       13       13               1        read thru M$EI
       14       14               2        read thru M$UC
       15       15        */
       16       16        VXR$READ: PROC( BUF, SIZE, TYPE );
       17       17        /*
       18       18                  Include files
       19       19        */
       20       20        %INCLUDE VX_INC_C;
       21    10736        %INCLUDE XUE_MACRO_C;
       22    11480        %INCLUDE XUE_SUBS_C;
       23    11660        %INCLUDE CP_6_SUBS;
       24    12200        %INCLUDE B$JIT;
       25    12490        %INCLUDE B_MICROPS_C;
       26    12662        %PLIST;
       27    12663        %E;

             12671    1   /*******************************************************************************
             12672    1   *                                                                              *
             12673    1   *                          ENTRY                                                 *
             12674    1   *                                                                              *
             12675    1   *******************************************************************************/

       28    12679    1   DCL VXE$MERC        ENTRY;
       29    12680    1   DCL VXE$ERRMSG      ENTRY(3);
       30    12681    1   DCL X$PRE_PROCESS   ENTRY(1)      ALTRET;
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:2    
       31    12682        %P;

             12690    1   /*******************************************************************************
             12691    1   *                                                                              *
             12692    1   *                          PARAMETERS                                              *
             12693    1   *                                                                              *
             12694    1   *******************************************************************************/

       32    12698    1   DCL BUF        CHAR(256) UNAL;
       33    12699    1   DCL SIZE       UBIN(36)  ALIGNED;
       34    12700    1   DCL TYPE       UBIN(36)  ALIGNED;
       35    12701        %PTR;

             12709    1   /*******************************************************************************
             12710    1   *                                                                              *
             12711    1   *                          PTR                                                 *
             12712    1   *                                                                              *
             12713    1   *******************************************************************************/

       36    12717    1   DCL FPT$            PTR  ALIGNED   AUTO;
       37    12718    1   DCL DCB$            PTR  ALIGNED   AUTO;
       38    12719        %U;

             12727    1   /*******************************************************************************
             12728    1   *                                                                              *
             12729    1   *                          UBIN                                                 *
             12730    1   *                                                                              *
             12731    1   *******************************************************************************/

       39    12735        %LIST;
       40    12736        %INDEX;
             12737    1   DCL I          UBIN(36) ALIGNED AUTO;
             12738    1   DCL SI REDEF I SBIN WORD ALIGNED;
             12739    1   DCL J          UBIN(36) ALIGNED AUTO;
             12740    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             12741    1   DCL K          UBIN(36) ALIGNED AUTO;
             12742    1   DCL SK REDEF K SBIN WORD ALIGNED;
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:3    
             12743    1   DCL L          UBIN(36) ALIGNED AUTO;
             12744    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       41    12746    1   DCL CONSEC_NUM        UBIN    WORD    STATIC      INIT( 0 );
       42    12747    1   DCL XUE_PREEXP        UBIN    WORD    SYMREF;
       43    12748    1   DCL WSPACE(0:1023)    UBIN    WORD    AUTO;
       44    12749    1   DCL SOURCE_INDEX      UBIN    WORD    AUTO;
       45    12750        %PLIST;
       46    12751        %BANNER( ARG=FPTS );

             12759    1   /*******************************************************************************
             12760    1   *                                                                              *
             12761    1   *                          FPTS                                                 *
             12762    1   *                                                                              *
             12763    1   *******************************************************************************/

       47    12767        %FPT_READ( FPTN=VX_SI_FPT_READ,
       48    12768                   DCB=M$SI,
       49    12769                   KEYS=NO,
       50    12770                   KEYR=NO,
       51    12771                   STCLASS="STATIC SYMDEF");
       52    12810        %FPT_READ( FPTN=VX_EI_FPT_READ,
       53    12811                   DCB=M$EI,
       54    12812                   KEYS=NO,
       55    12813                   KEYR=YES,
       56    12814                   KEY=VX_EI_KEY_BUF,
       57    12815                   STCLASS="STATIC SYMDEF");
       58    12854        %FPT_READ( FPTN=VX_UC_FPT_READ,
       59    12855                   DCB=M$UC,
       60    12856                   KEYS=NO,
       61    12857                   KEYR=NO,
       62    12858                   STCLASS="STATIC SYMDEF");
       63    12897        %FPT_WRITE( FPTN=VX_LO_FPT_WRITE,
       64    12898                   DCB=M$LO,
       65    12899                   STCLASS="STATIC SYMDEF");
       66    12930        %FPT_WRITE( FPTN=VX_DO_FPT_WRITE,
       67    12931                   DCB=M$DO,
       68    12932                   STCLASS="STATIC SYMDEF");
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:4    
       69    12963        %FPT_READ( FPTN=FPT$READ, STCLASS="BASED(FPT$)");
       70    13002        %XUE_PPCB( NAME=XUE_PPCB,STCLASS=AUTO );
       71    13269        %XUE_PPCB( NAME=CXUE_PPCB,STCLASS=CONSTANT );
       72    13536        %BANNER( ARG=DCBS );

             13544    1   /*******************************************************************************
             13545    1   *                                                                              *
             13546    1   *                          DCBS                                                 *
             13547    1   *                                                                              *
             13548    1   *******************************************************************************/

       73    13552        %F$DCB;
       74    13609    1   DCL M$SI            DCB;
       75    13610    1   DCL M$EI            DCB;
       76    13611    1   DCL M$LO            DCB;
       77    13612    1   DCL M$DO            DCB;
       78    13613        %C;

             13621    1   /*******************************************************************************
             13622    1   *                                                                              *
             13623    1   *                          CHAR                                                 *
             13624    1   *                                                                              *
             13625    1   *******************************************************************************/

       79    13629    1   DCL EDIT_KEY CHAR(8);
       80    13630    1   DCL CONSEC_KEY CHAR(9);
       81    13631        %BANNER( ARG="MICROP STRINGS" );

             13639    1   /*******************************************************************************
             13640    1   *                                                                              *
             13641    1   *                          MICROP STRINGS                                          *
             13642    1   *                                                                              *
             13643    1   *******************************************************************************/

       82    13647    1   DCL EDIT_MOPS(0:4) BIT(9) UNAL CONSTANT INIT(%MVZB4,%MVC1,%SES10,%INSB7,%MVC3);
       83    13648    1   DCL CONSEC_MOPS(0:1) BIT(9) UNAL CONSTANT INIT( %MVZB8, %MVC1 );
       84    13649        %EJECT;
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:5    
       85    13650    2         DO CASE(TYPE);
       86    13651    2           CASE(0);                        /* M$SI */
       87    13652    2             FPT$ = ADDR( VX_SI_FPT_READ );
       88    13653    2             DCB$ = M$SI$;
       89    13654    2           CASE(1);                        /* M$EI */
       90    13655    2             FPT$ = ADDR( VX_EI_FPT_READ );
       91    13656    2             DCB$ = M$EI$;
       92    13657    2           CASE(2);                        /* M$UC */
       93    13658    2             FPT$ = ADDR( VX_UC_FPT_READ );
       94    13659    2             DCB$ = M$UC$;
       95    13660    2           END;
       96    13661
       97    13662    1         FPT$READ.BUF_ = VECTOR( BUF );
       98    13663    1         BUF = ' ';
       99    13664    2         DO UNTIL( SIZE > 0 );
      100    13665    2             CALL M$READ( FPT$READ       )       ALTRET(DO_MERC);
      101    13666    2             SIZE = DCB$  -> F$DCB.ARS#;
      102    13667    2             END;
      103    13668
      104    13669        /*
      105    13670            Check the command buffer to see if we have a '%'.  If so, set up
      106    13671            the pre-processor control block, else skip over the set-up and
      107    13672            the call.
      108    13673        */
      109    13674    1         CALL INDEX(SOURCE_INDEX,'%',BUF) ALTRET(NO_SUBS);
      110    13675    1         XUE_PPCB = CXUE_PPCB;
      111    13676    1         XUE_PPCB.INBUF$ = ADDR(BUF);
      112    13677    1         XUE_PPCB.OUTBUF$ = ADDR(BUF);
      113    13678    1         XUE_PPCB.ICHARS# = SIZE;
      114    13679    1         XUE_PPCB.OCHARS# = SIZEC(BUF);
      115    13680    1         XUE_PPCB.ROOT$ = ADDR(XUE_PREEXP);
      116    13681    1         XUE_PPCB.ECB.WORK$ = ADDR(WSPACE);
      117    13682    1         XUE_PPCB.ECB.WKSZ# = SIZEW(WSPACE);
      118    13683    1         XUE_PPCB.ECB.FUN$$ = ENTADDR(NIL);
      119    13684    1         XUE_PPCB.ECB.PROCNAME_ = VECTOR(NIL);
      120    13685
      121    13686    1         CALL X$PRE_PROCESS ( XUE_PPCB )
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:6    
      122    13687    2         WHENALTRETURN DO;
      123    13688    2             CALL VXE$ERRMSG ( XUE_PPCB.ECB.ERR, 4 );
      124    13689                  %ERROR_IT;
      125    13692    2             END;
      126    13693
      127    13694    1         SIZE = XUE_PPCB.RCHARS#;
      128    13695    1   NO_SUBS:;
      129    13696
      130    13697    2         DO CASE( TYPE );
      131    13698    2           CASE( 0 );
      132    13699    2             IF VX_ECHO  AND  ( NOT DCB$->F$DCB.DDEV.XEQ#
      133    13700    2                     OR ( B$JIT.CPFLAGS1 & %CP_ECHO# ) )
      134    13701    3             THEN DO;
      135    13702    3                 VX_LO_FPT_WRITE.BUF_ = VECTOR( SUBSTR(BUF,0,SIZE) );
      136    13703    3                 CALL M$WRITE( VX_LO_FPT_WRITE )     ALTRET(DO_MERC);
      137    13704    3                 END;
      138    13705    2             VX_LAST_LINE.SIZE = SIZE;
      139    13706    2             VX_LAST_LINE.OFFSET = 0;
      140    13707    2             VX_LAST_LINE.TEXT = BUF;
      141    13708    2           CASE( 1) ;
      142    13709    2             VX_LAST_LINE.SIZE = SIZE + 10;
      143    13710    2             VX_LAST_LINE.OFFSET = 10;
      144    13711    2             VX_LAST_LINE.TEXT = ' ';
      145    13712    2             IF M$EI$ -> F$DCB.ORG# = %KEYED#
      146    13713    2                     AND  VX_EI_KEY_BUF.COUNT = 3
      147    13714    2                     AND  VX_EI_KEY_BUF.EDIT.NUM <= 99999999
      148    13715    3             THEN DO;
      149    13716    3                 I = VX_EI_KEY_BUF.EDIT.NUM;
      150    13717    3                 CALL BINCHAR( EDIT_KEY, I );
      151    13718    3                 CALL EDITCHAR( VX_LAST_LINE.TEXT, 0, 9, EDIT_MOPS, EDIT_KEY );
      152    13719    3                 END;
      153    13720    3             ELSE DO;
      154    13721    3                 CONSEC_NUM = CONSEC_NUM + 1;
      155    13722    3                 CALL BINCHAR( CONSEC_KEY, CONSEC_NUM );
      156    13723    3                 CALL EDITCHAR( VX_LAST_LINE.TEXT, 0, 9, CONSEC_MOPS, CONSEC_KEY );
      157    13724    3                 END;
      158    13725    2             CALL INSERT( VX_LAST_LINE.TEXT, 10, , BUF );
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:7    
      159    13726    2             VX_LO_FPT_WRITE.BUF_ = VECTOR( SUBSTR(VX_LAST_LINE.TEXT,0,VX_LAST_LINE.
             13726                      SIZE) );
      160    13727    2             CALL M$WRITE( VX_LO_FPT_WRITE ) ALTRET( DO_MERC );
      161    13728    2           CASE( 2 );
      162    13729    2             VX_LAST_LINE.SIZE = SIZE + 1;
      163    13730    2             VX_LAST_LINE.OFFSET = 1;
      164    13731    2             CALL CONCAT( VX_LAST_LINE.TEXT, '*', BUF );
      165    13732    2           END;
      166    13733    1         RETURN;
      167    13734
      168    13735
      169    13736
      170    13737    1   DO_MERC:
      171    13738    1         CALL M$MERC                        ALTRET(MERC_ERROR);
      172    13739              %ERROR_IT;
      173    13742    1   MERC_ERROR:
      174    13743    1         CALL VXE$MERC;
      175    13744        %EJECT;
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:8    
      176    13745    1   VXW$WRITE: ENTRY( BUF, SIZE, TYPE );
      177    13746
      178    13747    1         VX_LO_FPT_WRITE.BUF_.BUF$   = ADDR( BUF );
      179    13748    1         VX_LO_FPT_WRITE.BUF_.BOUND  = SIZE - 1;
      180    13749    1         CALL M$WRITE( VX_LO_FPT_WRITE )         ALTRET( DO_MERC );
      181    13750    2         IF TYPE ~=0 AND VX_FPT_ERRMSG.V.OUTDCB2# ~= DCBNUM(NIL) THEN DO;
      182    13751    2             VX_DO_FPT_WRITE.BUF_.BUF$   = ADDR( BUF );
      183    13752    2             VX_DO_FPT_WRITE.BUF_.BOUND   = SIZE - 1;
      184    13753    2             CALL M$WRITE( VX_DO_FPT_WRITE )     ALTRET( DO_MERC );
      185    13754    2             END;
      186    13755    1         RETURN;
      187    13756        %EJECT;
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:9    
      188    13757    1   VXW$WRITE_DO: ENTRY( BUF, SIZE );
      189    13758
      190    13759    1         VX_DO_FPT_WRITE.BUF_.BUF$   = ADDR( BUF );
      191    13760    1         VX_DO_FPT_WRITE.BUF_.BOUND  = SIZE - 1;
      192    13761    1         CALL M$WRITE( VX_DO_FPT_WRITE )         ALTRET( DO_MERC );
      193    13762    1         RETURN;
      194    13763
      195    13764
      196    13765
      197    13766    1   END VXR$READ;

PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:10   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   XUE_SUBS_C.:E05TOU  is referenced.
   XUE_MACRO_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXR$READ.

   Procedure VXR$READ requires 257 words for executable code.
   Procedure VXR$READ requires 1080 words of local(AUTO) storage.

    No errors detected in file VXR$READ.:E05TSI    .

PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:11   

 Object Unit name= VXR$READ                                   File name= VXR$READ.:E05TOU
 UTS= JUL 30 '97 08:35:05.28 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Data  even  none    68    104  VXR$READ
    3  RoData even  UTS     37     45  VXR$READ
    4   DCB   even  none     0      0  M$SI
    5   DCB   even  none     0      0  M$EI
    6   DCB   even  none     0      0  M$LO
    7   DCB   even  none     0      0  M$DO
    8   Proc  even  none   257    401  VXR$READ
    9  RoData even  none    11     13  VXR$READ

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     8      0   yes            yes      Std        3  VXR$READ
     8    317                  yes      Std        3  VXW$WRITE
     8    361                  yes      Std        2  VXW$WRITE_DO

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    2      2  VX_SI_FPT_READ                     2     20  VX_EI_FPT_READ
    2     36  VX_UC_FPT_READ                     2     54  VX_LO_FPT_WRITE
    2     70  VX_DO_FPT_WRITE
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:12   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 X$PRE_PROCESS
         yes           Std       3 VXE$ERRMSG
         yes           Std       0 VXE$MERC
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_FPT_ERRMSG                         B$JIT$
     VX_OU_HEAD                            VX_ERRORS                             VX_ECHO
     VX_EI_KEY_BUF                         VX_LAST_LINE                          M$UC$
     M$SI$                                 M$EI$                                 XUE_PREEXP
     M$SI                                  M$EI                                  M$LO
     M$DO                                  B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:13   


        1        1        /*M* VXR$READ - reads the LINK command stream. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DMR,PLM=6,IND=4,SDI=2,CTI=8,DCI=4,CSU=2,ECU=2,ENI=4,
        8        8              THI=0,DTI=0,IAD=0,CCC                          */
        9        9        /*
       10       10              Type      action
       11       11
       12       12               0        read thru M$SI
       13       13               1        read thru M$EI
       14       14               2        read thru M$UC
       15       15        */
       16       16        VXR$READ: PROC( BUF, SIZE, TYPE );

     16  8 000000   000000 700200 xent  VXR$READ     TSX0  ! X66_AUTO_3
         8 000001   002070 000003                    ZERO    1080,3

       17       17        /*
       18       18                  Include files
       19       19        */
       20       20        %INCLUDE VX_INC_C;
       21    10736        %INCLUDE XUE_MACRO_C;
       22    11480        %INCLUDE XUE_SUBS_C;
       23    11660        %INCLUDE CP_6_SUBS;
       24    12200        %INCLUDE B$JIT;
       25    12490        %INCLUDE B_MICROPS_C;
       26    12662        %PLIST;
       27    12663        %E;

             12671    1   /*******************************************************************************
             12672    1   *                                                                              *
             12673    1   *                          ENTRY                                                 *
             12674    1   *                                                                              *
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:14   
             12675    1   *******************************************************************************/

       28    12679    1   DCL VXE$MERC        ENTRY;
       29    12680    1   DCL VXE$ERRMSG      ENTRY(3);
       30    12681    1   DCL X$PRE_PROCESS   ENTRY(1)      ALTRET;
       31    12682        %P;

             12690    1   /*******************************************************************************
             12691    1   *                                                                              *
             12692    1   *                          PARAMETERS                                             *
             12693    1   *                                                                              *
             12694    1   *******************************************************************************/

       32    12698    1   DCL BUF        CHAR(256) UNAL;
       33    12699    1   DCL SIZE       UBIN(36)  ALIGNED;
       34    12700    1   DCL TYPE       UBIN(36)  ALIGNED;
       35    12701        %PTR;

             12709    1   /*******************************************************************************
             12710    1   *                                                                              *
             12711    1   *                          PTR                                                 *
             12712    1   *                                                                              *
             12713    1   *******************************************************************************/

       36    12717    1   DCL FPT$            PTR  ALIGNED   AUTO;
       37    12718    1   DCL DCB$            PTR  ALIGNED   AUTO;
       38    12719        %U;

             12727    1   /*******************************************************************************
             12728    1   *                                                                              *
             12729    1   *                          UBIN                                                 *
             12730    1   *                                                                              *
             12731    1   *******************************************************************************/

       39    12735        %LIST;
       40    12736        %INDEX;
             12737    1   DCL I          UBIN(36) ALIGNED AUTO;
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:15   
             12738    1   DCL SI REDEF I SBIN WORD ALIGNED;
             12739    1   DCL J          UBIN(36) ALIGNED AUTO;
             12740    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             12741    1   DCL K          UBIN(36) ALIGNED AUTO;
             12742    1   DCL SK REDEF K SBIN WORD ALIGNED;
             12743    1   DCL L          UBIN(36) ALIGNED AUTO;
             12744    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       41    12746    1   DCL CONSEC_NUM        UBIN    WORD    STATIC      INIT( 0 );
       42    12747    1   DCL XUE_PREEXP        UBIN    WORD    SYMREF;
       43    12748    1   DCL WSPACE(0:1023)    UBIN    WORD    AUTO;
       44    12749    1   DCL SOURCE_INDEX      UBIN    WORD    AUTO;
       45    12750        %PLIST;
       46    12751        %BANNER( ARG=FPTS );

             12759    1   /*******************************************************************************
             12760    1   *                                                                              *
             12761    1   *                          FPTS                                                 *
             12762    1   *                                                                              *
             12763    1   *******************************************************************************/

       47    12767        %FPT_READ( FPTN=VX_SI_FPT_READ,
       48    12768                   DCB=M$SI,
       49    12769                   KEYS=NO,
       50    12770                   KEYR=NO,
       51    12771                   STCLASS="STATIC SYMDEF");
       52    12810        %FPT_READ( FPTN=VX_EI_FPT_READ,
       53    12811                   DCB=M$EI,
       54    12812                   KEYS=NO,
       55    12813                   KEYR=YES,
       56    12814                   KEY=VX_EI_KEY_BUF,
       57    12815                   STCLASS="STATIC SYMDEF");
       58    12854        %FPT_READ( FPTN=VX_UC_FPT_READ,
       59    12855                   DCB=M$UC,
       60    12856                   KEYS=NO,
       61    12857                   KEYR=NO,
       62    12858                   STCLASS="STATIC SYMDEF");
       63    12897        %FPT_WRITE( FPTN=VX_LO_FPT_WRITE,
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:16   
       64    12898                   DCB=M$LO,
       65    12899                   STCLASS="STATIC SYMDEF");
       66    12930        %FPT_WRITE( FPTN=VX_DO_FPT_WRITE,
       67    12931                   DCB=M$DO,
       68    12932                   STCLASS="STATIC SYMDEF");
       69    12963        %FPT_READ( FPTN=FPT$READ, STCLASS="BASED(FPT$)");
       70    13002        %XUE_PPCB( NAME=XUE_PPCB,STCLASS=AUTO );
       71    13269        %XUE_PPCB( NAME=CXUE_PPCB,STCLASS=CONSTANT );
       72    13536        %BANNER( ARG=DCBS );

             13544    1   /*******************************************************************************
             13545    1   *                                                                              *
             13546    1   *                          DCBS                                                 *
             13547    1   *                                                                              *
             13548    1   *******************************************************************************/

       73    13552        %F$DCB;
       74    13609    1   DCL M$SI            DCB;
       75    13610    1   DCL M$EI            DCB;
       76    13611    1   DCL M$LO            DCB;
       77    13612    1   DCL M$DO            DCB;
       78    13613        %C;

             13621    1   /*******************************************************************************
             13622    1   *                                                                              *
             13623    1   *                          CHAR                                                 *
             13624    1   *                                                                              *
             13625    1   *******************************************************************************/

       79    13629    1   DCL EDIT_KEY CHAR(8);
       80    13630    1   DCL CONSEC_KEY CHAR(9);
       81    13631        %BANNER( ARG="MICROP STRINGS" );

             13639    1   /*******************************************************************************
             13640    1   *                                                                              *
             13641    1   *                          MICROP STRINGS                                         *
             13642    1   *                                                                              *
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:17   
             13643    1   *******************************************************************************/

       82    13647    1   DCL EDIT_MOPS(0:4) BIT(9) UNAL CONSTANT INIT(%MVZB4,%MVC1,%SES10,%INSB7,%MVC3);
       83    13648    1   DCL CONSEC_MOPS(0:1) BIT(9) UNAL CONSTANT INIT( %MVZB8, %MVC1 );
       84    13649        %EJECT;
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:18   
       85    13650    2         DO CASE(TYPE);

  13650  8 000002   200005 470500                    LDP0    @TYPE,,AUTO
         8 000003   000000 235100                    LDA     0,,PR0
         8 000004   000003 115007                    CMPA    3,DL
         8 000005   000007 602005 8                  TNC     s:13650+5,AL
         8 000006   000030 710000 8                  TRA     s:13662
         8 000007   000012 710000 8                  TRA     s:13652
         8 000010   000017 710000 8                  TRA     s:13655
         8 000011   000024 710000 8                  TRA     s:13658

       86    13651    2           CASE(0);                        /* M$SI */

       87    13652    2             FPT$ = ADDR( VX_SI_FPT_READ );

  13652  8 000012   000000 236000 9                  LDQ     0
         8 000013   200006 756100                    STQ     FPT$,,AUTO

       88    13653    2             DCB$ = M$SI$;

  13653  8 000014   000000 236000 xsym               LDQ     M$SI$
         8 000015   200007 756100                    STQ     DCB$,,AUTO
         8 000016   000030 710000 8                  TRA     s:13662

       89    13654    2           CASE(1);                        /* M$EI */

       90    13655    2             FPT$ = ADDR( VX_EI_FPT_READ );

  13655  8 000017   000001 236000 9                  LDQ     1
         8 000020   200006 756100                    STQ     FPT$,,AUTO

       91    13656    2             DCB$ = M$EI$;

  13656  8 000021   000000 236000 xsym               LDQ     M$EI$
         8 000022   200007 756100                    STQ     DCB$,,AUTO
         8 000023   000030 710000 8                  TRA     s:13662

PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:19   
       92    13657    2           CASE(2);                        /* M$UC */

       93    13658    2             FPT$ = ADDR( VX_UC_FPT_READ );

  13658  8 000024   000002 236000 9                  LDQ     2
         8 000025   200006 756100                    STQ     FPT$,,AUTO

       94    13659    2             DCB$ = M$UC$;

  13659  8 000026   000000 236000 xsym               LDQ     M$UC$
         8 000027   200007 756100                    STQ     DCB$,,AUTO

       95    13660    2           END;

       96    13661
       97    13662    1         FPT$READ.BUF_ = VECTOR( BUF );

  13662  8 000030   000003 235000 9                  LDA     3
         8 000031   200003 236100                    LDQ     @BUF,,AUTO
         8 000032   200006 471500                    LDP1    FPT$,,AUTO
         8 000033   100004 757100                    STAQ    4,,PR1

       98    13663    1         BUF = ' ';

  13663  8 000034   200003 473500                    LDP3    @BUF,,AUTO
         8 000035   040100 100400                    MLR     fill='040'O
         8 000036   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         8 000037   300000 000400                    ADSC9   0,,PR3                   cn=0,n=256

       99    13664    2         DO UNTIL( SIZE > 0 );

      100    13665    2             CALL M$READ( FPT$READ       )       ALTRET(DO_MERC);

  13665  8 000040   200006 470500                    LDP0    FPT$,,AUTO
         8 000041   440000 713400                    CLIMB   alt,read
         8 000042   401400 401760                    pmme    nvectors=4
         8 000043   000306 702000 8                  TSX2    DO_MERC
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:20   

      101    13666    2             SIZE = DCB$  -> F$DCB.ARS#;

  13666  8 000044   200007 470500                    LDP0    DCB$,,AUTO
         8 000045   000000 235100                    LDA     0,,PR0
         8 000046   200004 471500                    LDP1    @SIZE,,AUTO
         8 000047   100000 755100                    STA     0,,PR1

      102    13667    2             END;

  13667  8 000050   000040 600000 8                  TZE     s:13665

      103    13668
      104    13669        /*
      105    13670            Check the command buffer to see if we have a '%'.  If so, set up
      106    13671            the pre-processor control block, else skip over the set-up and
      107    13672            the call.
      108    13673        */
      109    13674    1         CALL INDEX(SOURCE_INDEX,'%',BUF) ALTRET(NO_SUBS);

  13674  8 000051   200003 473500                    LDP3    @BUF,,AUTO
         8 000052   000000 124500                    SCM     mask='000'O
         8 000053   300000 000400                    ADSC9   0,,PR3                   cn=0,n=256
         8 000054   000004 000001 9                  ADSC9   4                        cn=0,n=1
         8 000055   202014 000100                    ARG     SOURCE_INDEX,,AUTO
         8 000056   000127 606400 8                  TTN     NO_SUBS

      110    13675    1         XUE_PPCB = CXUE_PPCB;

  13675  8 000057   000100 100400                    MLR     fill='000'O
         8 000060   000000 000210 3                  ADSC9   CXUE_PPCB                cn=0,n=136
         8 000061   202016 000210                    ADSC9   XUE_PPCB,,AUTO           cn=0,n=136

      111    13676    1         XUE_PPCB.INBUF$ = ADDR(BUF);

  13676  8 000062   200003 236100                    LDQ     @BUF,,AUTO
         8 000063   202016 756100                    STQ     XUE_PPCB,,AUTO
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:21   

      112    13677    1         XUE_PPCB.OUTBUF$ = ADDR(BUF);

  13677  8 000064   202020 756100                    STQ     XUE_PPCB+2,,AUTO

      113    13678    1         XUE_PPCB.ICHARS# = SIZE;

  13678  8 000065   100000 235100                    LDA     0,,PR1
         8 000066   202017 755100                    STA     XUE_PPCB+1,,AUTO

      114    13679    1         XUE_PPCB.OCHARS# = SIZEC(BUF);

  13679  8 000067   000400 235007                    LDA     256,DL
         8 000070   202021 755100                    STA     XUE_PPCB+3,,AUTO

      115    13680    1         XUE_PPCB.ROOT$ = ADDR(XUE_PREEXP);

  13680  8 000071   000005 236000 9                  LDQ     5
         8 000072   202023 756100                    STQ     XUE_PPCB+5,,AUTO

      116    13681    1         XUE_PPCB.ECB.WORK$ = ADDR(WSPACE);

  13681  8 000073   200014 634500                    EPPR4   WSPACE,,AUTO
         8 000074   202025 454500                    STP4    XUE_PPCB+7,,AUTO

      117    13682    1         XUE_PPCB.ECB.WKSZ# = SIZEW(WSPACE);

  13682  8 000075   002000 235007                    LDA     1024,DL
         8 000076   202026 755100                    STA     XUE_PPCB+8,,AUTO

      118    13683    1         XUE_PPCB.ECB.FUN$$ = ENTADDR(NIL);

  13683  8 000077   000002 236000 xsym               LDQ     B_VECTNIL+2
         8 000100   202031 756100                    STQ     XUE_PPCB+11,,AUTO

      119    13684    1         XUE_PPCB.ECB.PROCNAME_ = VECTOR(NIL);

PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:22   
  13684  8 000101   000006 237000 9                  LDAQ    6
         8 000102   202036 757100                    STAQ    XUE_PPCB+16,,AUTO

      120    13685
      121    13686    1         CALL X$PRE_PROCESS ( XUE_PPCB )

  13686  8 000103   202016 635500                    EPPR5   XUE_PPCB,,AUTO
         8 000104   202066 455500                    STP5    CONSEC_KEY+4,,AUTO
         8 000105   202066 630500                    EPPR0   CONSEC_KEY+4,,AUTO
         8 000106   000017 631400 xsym               EPPR1   B_VECTNIL+15
         8 000107   000000 701000 xent               TSX1    X$PRE_PROCESS
         8 000110   000112 702000 8                  TSX2    s:13688
         8 000111   000124 710000 8                  TRA     s:13694

      122    13687    2         WHENALTRETURN DO;

      123    13688    2             CALL VXE$ERRMSG ( XUE_PPCB.ECB.ERR, 4 );

  13688  8 000112   000010 236000 9                  LDQ     8
         8 000113   202067 756100                    STQ     CONSEC_KEY+5,,AUTO
         8 000114   202035 630500                    EPPR0   XUE_PPCB+15,,AUTO
         8 000115   202066 450500                    STP0    CONSEC_KEY+4,,AUTO
         8 000116   202066 630500                    EPPR0   CONSEC_KEY+4,,AUTO
         8 000117   000020 631400 xsym               EPPR1   B_VECTNIL+16
         8 000120   000000 701000 xent               TSX1    VXE$ERRMSG
         8 000121   000000 011000                    NOP     0

      124    13689                  %ERROR_IT;

  13690  8 000122   000002 713400                    CLIMB   err
         8 000123   000000 401760                    pmme    nvectors=0

      125    13692    2             END;

      126    13693
      127    13694    1         SIZE = XUE_PPCB.RCHARS#;

PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:23   
  13694  8 000124   200004 470500                    LDP0    @SIZE,,AUTO
         8 000125   202022 235100                    LDA     XUE_PPCB+4,,AUTO
         8 000126   000000 755100                    STA     0,,PR0

  13694  8 000127                       NO_SUBS      null
      128    13695    1   NO_SUBS:;
      129    13696
      130    13697    2         DO CASE( TYPE );

  13697  8 000127   200005 470500                    LDP0    @TYPE,,AUTO
         8 000130   000000 235100                    LDA     0,,PR0
         8 000131   000003 115007                    CMPA    3,DL
         8 000132   000134 602005 8                  TNC     NO_SUBS+5,AL
         8 000133   000305 710000 8                  TRA     s:13733
         8 000134   000137 710000 8                  TRA     s:13699
         8 000135   000176 710000 8                  TRA     s:13709
         8 000136   000271 710000 8                  TRA     s:13729

      131    13698    2           CASE( 0 );

      132    13699    2             IF VX_ECHO  AND  ( NOT DCB$->F$DCB.DDEV.XEQ#

  13699  8 000137   000000 234000 xsym               SZN     VX_ECHO
         8 000140   000165 605000 8                  TPL     s:13705
         8 000141   200007 471500                    LDP1    DCB$,,AUTO
         8 000142   100004 236100                    LDQ     4,,PR1
         8 000143   040000 316007                    CANQ    16384,DL
         8 000144   000151 600000 8                  TZE     s:13702
         8 000145   000000 473400 xsym               LDP3    B$JIT$
         8 000146   300143 236100                    LDQ     99,,PR3
         8 000147   000012 376000 xsym               ANQ     B_VECTNIL+10
         8 000150   000165 600000 8                  TZE     s:13705

      133    13700    2                     OR ( B$JIT.CPFLAGS1 & %CP_ECHO# ) )
      134    13701    3             THEN DO;

      135    13702    3                 VX_LO_FPT_WRITE.BUF_ = VECTOR( SUBSTR(BUF,0,SIZE) );
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:24   

  13702  8 000151   200004 473500                    LDP3    @SIZE,,AUTO
         8 000152   300000 720100                    LXL0    0,,PR3
         8 000153   000000 636010                    EAQ     0,X0
         8 000154   000022 772000                    QRL     18
         8 000155   000064 737000                    LLS     52
         8 000156   000140 135007                    SBLA    96,DL
         8 000157   200003 236100                    LDQ     @BUF,,AUTO
         8 000160   000060 757000 2                  STAQ    VX_LO_FPT_WRITE+4

      136    13703    3                 CALL M$WRITE( VX_LO_FPT_WRITE )     ALTRET(DO_MERC);

  13703  8 000161   000054 630400 2                  EPPR0   VX_LO_FPT_WRITE
         8 000162   440001 713400                    CLIMB   alt,write
         8 000163   401400 401760                    pmme    nvectors=4
         8 000164   000306 702000 8                  TSX2    DO_MERC

      137    13704    3                 END;

      138    13705    2             VX_LAST_LINE.SIZE = SIZE;

  13705  8 000165   200004 470500                    LDP0    @SIZE,,AUTO
         8 000166   000000 235100                    LDA     0,,PR0
         8 000167   000000 755000 xsym               STA     VX_LAST_LINE

      139    13706    2             VX_LAST_LINE.OFFSET = 0;

  13706  8 000170   000001 450000 xsym               STZ     VX_LAST_LINE+1

      140    13707    2             VX_LAST_LINE.TEXT = BUF;

  13707  8 000171   200003 471500                    LDP1    @BUF,,AUTO
         8 000172   040000 100500                    MLR     fill='040'O
         8 000173   100000 000400                    ADSC9   0,,PR1                   cn=0,n=256
         8 000174   000002 000412 xsym               ADSC9   VX_LAST_LINE+2           cn=0,n=266
         8 000175   000305 710000 8                  TRA     s:13733

PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:25   
      141    13708    2           CASE( 1) ;

      142    13709    2             VX_LAST_LINE.SIZE = SIZE + 10;

  13709  8 000176   200004 471500                    LDP1    @SIZE,,AUTO
         8 000177   100000 235100                    LDA     0,,PR1
         8 000200   000012 035007                    ADLA    10,DL
         8 000201   000000 755000 xsym               STA     VX_LAST_LINE

      143    13710    2             VX_LAST_LINE.OFFSET = 10;

  13710  8 000202   000012 236007                    LDQ     10,DL
         8 000203   000001 756000 xsym               STQ     VX_LAST_LINE+1

      144    13711    2             VX_LAST_LINE.TEXT = ' ';

  13711  8 000204   040000 100400                    MLR     fill='040'O
         8 000205   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         8 000206   000002 000412 xsym               ADSC9   VX_LAST_LINE+2           cn=0,n=266

      145    13712    2             IF M$EI$ -> F$DCB.ORG# = %KEYED#

  13712  8 000207   000000 473400 xsym               LDP3    M$EI$
         8 000210   300032 236100                    LDQ     26,,PR3
         8 000211   777000 376003                    ANQ     -512,DU
         8 000212   002000 116003                    CMPQ    1024,DU
         8 000213   000237 601000 8                  TNZ     s:13721
         8 000214   000000 236000 xsym               LDQ     VX_EI_KEY_BUF
         8 000215   777000 376003                    ANQ     -512,DU
         8 000216   003000 116003                    CMPQ    1536,DU
         8 000217   000237 601000 8                  TNZ     s:13721
         8 000220   000000 236000 xsym               LDQ     VX_EI_KEY_BUF
         8 000221   000032 376000 xsym               ANQ     B_VECTNIL+26
         8 000222   000011 116000 9                  CMPQ    9
         8 000223   000237 603000 8                  TRC     s:13721

      146    13713    2                     AND  VX_EI_KEY_BUF.COUNT = 3
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:26   
      147    13714    2                     AND  VX_EI_KEY_BUF.EDIT.NUM <= 99999999
      148    13715    3             THEN DO;

      149    13716    3                 I = VX_EI_KEY_BUF.EDIT.NUM;

  13716  8 000224   200010 756100                    STQ     I,,AUTO

      150    13717    3                 CALL BINCHAR( EDIT_KEY, I );

  13717  8 000225   000000 235003                    LDA     0,DU
         8 000226   202066 757100                    STAQ    CONSEC_KEY+4,,AUTO
         8 000227   000100 301500                    BTD
         8 000230   202066 000010                    NDSC9   CONSEC_KEY+4,,AUTO       cn=0,s=lsgnf,sf=0,n=8
         8 000231   202060 030010                    NDSC9   EDIT_KEY,,AUTO           cn=0,s=nosgn,sf=0,n=8

      151    13718    3                 CALL EDITCHAR( VX_LAST_LINE.TEXT, 0, 9, EDIT_MOPS, EDIT_KEY );

  13718  8 000232   000000 024500                    MVNE
         8 000233   202060 030010                    NDSC9   EDIT_KEY,,AUTO           cn=0,s=nosgn,sf=0,n=8
         8 000234   000042 000005 3                  ADSC9   EDIT_MOPS                cn=0,n=5
         8 000235   000002 000011 xsym               ADSC9   VX_LAST_LINE+2           cn=0,n=9

      152    13719    3                 END;

  13719  8 000236   000253 710000 8                  TRA     s:13725

      153    13720    3             ELSE DO;

      154    13721    3                 CONSEC_NUM = CONSEC_NUM + 1;

  13721  8 000237   000000 236000 2                  LDQ     CONSEC_NUM
         8 000240   000001 036007                    ADLQ    1,DL
         8 000241   000000 756000 2                  STQ     CONSEC_NUM

      155    13722    3                 CALL BINCHAR( CONSEC_KEY, CONSEC_NUM );

  13722  8 000242   000000 235003                    LDA     0,DU
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:27   
         8 000243   202066 757100                    STAQ    CONSEC_KEY+4,,AUTO
         8 000244   000100 301500                    BTD
         8 000245   202066 000010                    NDSC9   CONSEC_KEY+4,,AUTO       cn=0,s=lsgnf,sf=0,n=8
         8 000246   202062 030011                    NDSC9   CONSEC_KEY,,AUTO         cn=0,s=nosgn,sf=0,n=9

      156    13723    3                 CALL EDITCHAR( VX_LAST_LINE.TEXT, 0, 9, CONSEC_MOPS, CONSEC_KEY );

  13723  8 000247   000000 024500                    MVNE
         8 000250   202062 030011                    NDSC9   CONSEC_KEY,,AUTO         cn=0,s=nosgn,sf=0,n=9
         8 000251   000044 000002 3                  ADSC9   CONSEC_MOPS              cn=0,n=2
         8 000252   000002 000011 xsym               ADSC9   VX_LAST_LINE+2           cn=0,n=9

      157    13724    3                 END;

      158    13725    2             CALL INSERT( VX_LAST_LINE.TEXT, 10, , BUF );

  13725  8 000253   200003 474500                    LDP4    @BUF,,AUTO
         8 000254   040000 100500                    MLR     fill='040'O
         8 000255   400000 000400                    ADSC9   0,,PR4                   cn=0,n=256
         8 000256   000004 400400 xsym               ADSC9   VX_LAST_LINE+4           cn=2,n=256

      159    13726    2             VX_LO_FPT_WRITE.BUF_ = VECTOR( SUBSTR(VX_LAST_LINE.TEXT,0,VX_LAST_LINE.
             13726                      SIZE) );

  13726  8 000257   000000 236000 xsym               LDQ     VX_LAST_LINE
         8 000260   000064 737000                    LLS     52
         8 000261   000140 135007                    SBLA    96,DL
         8 000262   000012 236000 9                  LDQ     10
         8 000263   000060 757000 2                  STAQ    VX_LO_FPT_WRITE+4

      160    13727    2             CALL M$WRITE( VX_LO_FPT_WRITE ) ALTRET( DO_MERC );

  13727  8 000264   000054 630400 2                  EPPR0   VX_LO_FPT_WRITE
         8 000265   440001 713400                    CLIMB   alt,write
         8 000266   401400 401760                    pmme    nvectors=4
         8 000267   000306 702000 8                  TSX2    DO_MERC
         8 000270   000305 710000 8                  TRA     s:13733
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:28   

      161    13728    2           CASE( 2 );

      162    13729    2             VX_LAST_LINE.SIZE = SIZE + 1;

  13729  8 000271   200004 471500                    LDP1    @SIZE,,AUTO
         8 000272   100000 235100                    LDA     0,,PR1
         8 000273   000001 035007                    ADLA    1,DL
         8 000274   000000 755000 xsym               STA     VX_LAST_LINE

      163    13730    2             VX_LAST_LINE.OFFSET = 1;

  13730  8 000275   000001 236007                    LDQ     1,DL
         8 000276   000001 756000 xsym               STQ     VX_LAST_LINE+1

      164    13731    2             CALL CONCAT( VX_LAST_LINE.TEXT, '*', BUF );

  13731  8 000277   052000 236003                    LDQ     21504,DU
         8 000300   000002 756000 xsym               STQ     VX_LAST_LINE+2
         8 000301   200003 473500                    LDP3    @BUF,,AUTO
         8 000302   040000 100500                    MLR     fill='040'O
         8 000303   300000 000400                    ADSC9   0,,PR3                   cn=0,n=256
         8 000304   000002 200411 xsym               ADSC9   VX_LAST_LINE+2           cn=1,n=265

      165    13732    2           END;

      166    13733    1         RETURN;

  13733  8 000305   000000 702200 xent               TSX2  ! X66_ARET

      167    13734
      168    13735
      169    13736
      170    13737    1   DO_MERC:
      171    13738    1         CALL M$MERC                        ALTRET(MERC_ERROR);

  13738  8 000306   410007 713400       DO_MERC      CLIMB   alt,+4103
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:29   
         8 000307   000000 401760                    pmme    nvectors=0
         8 000310   000313 702000 8                  TSX2    MERC_ERROR

      172    13739              %ERROR_IT;

  13740  8 000311   000002 713400                    CLIMB   err
         8 000312   000000 401760                    pmme    nvectors=0

      173    13742    1   MERC_ERROR:
      174    13743    1         CALL VXE$MERC;

  13743  8 000313   000002 631400 xsym  MERC_ERROR   EPPR1   B_VECTNIL+2
         8 000314   000000 701000 xent               TSX1    VXE$MERC
         8 000315   000000 011000                    NOP     0
         8 000316   000321 710000 8                  TRA     s:13747

      175    13744        %EJECT;
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:30   
      176    13745    1   VXW$WRITE: ENTRY( BUF, SIZE, TYPE );

  13745  8 000317   000000 700200 xent  VXW$WRITE    TSX0  ! X66_AUTO_3
         8 000320   002070 000003                    ZERO    1080,3

      177    13746
      178    13747    1         VX_LO_FPT_WRITE.BUF_.BUF$   = ADDR( BUF );

  13747  8 000321   200003 236100                    LDQ     @BUF,,AUTO
         8 000322   000061 756000 2                  STQ     VX_LO_FPT_WRITE+5

      179    13748    1         VX_LO_FPT_WRITE.BUF_.BOUND  = SIZE - 1;

  13748  8 000323   200004 470500                    LDP0    @SIZE,,AUTO
         8 000324   000000 236100                    LDQ     0,,PR0
         8 000325   000001 136007                    SBLQ    1,DL
         8 000326   000020 736000                    QLS     16
         8 000327   000060 676000 2                  ERQ     VX_LO_FPT_WRITE+4
         8 000330   000034 376000 xsym               ANQ     B_VECTNIL+28
         8 000331   000060 656000 2                  ERSQ    VX_LO_FPT_WRITE+4

      180    13749    1         CALL M$WRITE( VX_LO_FPT_WRITE )         ALTRET( DO_MERC );

  13749  8 000332   000054 630400 2                  EPPR0   VX_LO_FPT_WRITE
         8 000333   440001 713400                    CLIMB   alt,write
         8 000334   401400 401760                    pmme    nvectors=4
         8 000335   000306 702000 8                  TSX2    DO_MERC

      181    13750    2         IF TYPE ~=0 AND VX_FPT_ERRMSG.V.OUTDCB2# ~= DCBNUM(NIL) THEN DO;

  13750  8 000336   200005 470500                    LDP0    @TYPE,,AUTO
         8 000337   000000 235100                    LDA     0,,PR0
         8 000340   000360 600000 8                  TZE     s:13755
         8 000341   000027 220000 xsym               LDX0    VX_FPT_ERRMSG+23
         8 000342   000360 600000 8                  TZE     s:13755

      182    13751    2             VX_DO_FPT_WRITE.BUF_.BUF$   = ADDR( BUF );
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:31   

  13751  8 000343   200003 236100                    LDQ     @BUF,,AUTO
         8 000344   000075 756000 2                  STQ     VX_DO_FPT_WRITE+5

      183    13752    2             VX_DO_FPT_WRITE.BUF_.BOUND   = SIZE - 1;

  13752  8 000345   200004 471500                    LDP1    @SIZE,,AUTO
         8 000346   100000 236100                    LDQ     0,,PR1
         8 000347   000001 136007                    SBLQ    1,DL
         8 000350   000020 736000                    QLS     16
         8 000351   000074 676000 2                  ERQ     VX_DO_FPT_WRITE+4
         8 000352   000034 376000 xsym               ANQ     B_VECTNIL+28
         8 000353   000074 656000 2                  ERSQ    VX_DO_FPT_WRITE+4

      184    13753    2             CALL M$WRITE( VX_DO_FPT_WRITE )     ALTRET( DO_MERC );

  13753  8 000354   000070 630400 2                  EPPR0   VX_DO_FPT_WRITE
         8 000355   440001 713400                    CLIMB   alt,write
         8 000356   401400 401760                    pmme    nvectors=4
         8 000357   000306 702000 8                  TSX2    DO_MERC

      185    13754    2             END;

      186    13755    1         RETURN;

  13755  8 000360   000000 702200 xent               TSX2  ! X66_ARET

      187    13756        %EJECT;
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:32   
      188    13757    1   VXW$WRITE_DO: ENTRY( BUF, SIZE );

  13757  8 000361   000000 700200 xent  VXW$WRITE_DO TSX0  ! X66_AUTO_3
         8 000362   002070 000003                    ZERO    1080,3

      189    13758
      190    13759    1         VX_DO_FPT_WRITE.BUF_.BUF$   = ADDR( BUF );

  13759  8 000363   200003 236100                    LDQ     @BUF,,AUTO
         8 000364   000075 756000 2                  STQ     VX_DO_FPT_WRITE+5

      191    13760    1         VX_DO_FPT_WRITE.BUF_.BOUND  = SIZE - 1;

  13760  8 000365   200004 470500                    LDP0    @SIZE,,AUTO
         8 000366   000000 236100                    LDQ     0,,PR0
         8 000367   000001 136007                    SBLQ    1,DL
         8 000370   000020 736000                    QLS     16
         8 000371   000074 676000 2                  ERQ     VX_DO_FPT_WRITE+4
         8 000372   000034 376000 xsym               ANQ     B_VECTNIL+28
         8 000373   000074 656000 2                  ERSQ    VX_DO_FPT_WRITE+4

      192    13761    1         CALL M$WRITE( VX_DO_FPT_WRITE )         ALTRET( DO_MERC );

  13761  8 000374   000070 630400 2                  EPPR0   VX_DO_FPT_WRITE
         8 000375   440001 713400                    CLIMB   alt,write
         8 000376   401400 401760                    pmme    nvectors=4
         8 000377   000306 702000 8                  TSX2    DO_MERC

      193    13762    1         RETURN;

  13762  8 000400   000000 702200 xent               TSX2  ! X66_ARET
      194    13763
      195    13764
      196    13765
      197    13766    1   END VXR$READ;

PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:33   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   XUE_SUBS_C.:E05TOU  is referenced.
   XUE_MACRO_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXR$READ.
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:34   

 **** Variables and constants ****

  ****  Section 002  Data  VXR$READ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 CONSEC_NUM                70-0-0/d STRC(432)   r     1 VX_DO_FPT_WRITE
    20-0-0/d STRC(504)   r     1 VX_EI_FPT_READ            54-0-0/d STRC(432)   r     1 VX_LO_FPT_WRITE
     2-0-0/d STRC(504)   r     1 VX_SI_FPT_READ            36-0-0/d STRC(504)   r     1 VX_UC_FPT_READ

  ****  Section 003 RoData VXR$READ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    44-0-0/b BIT (9)     r     1 CONSEC_MOPS(0:1)
     0-0-0/d STRC(1224)  r     1 CXUE_PPCB
    42-0-0/b BIT (9)     r     1 EDIT_MOPS(0:4)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BUF                       4-0-0/w PTR         r     1 @SIZE
     5-0-0/w PTR         r     1 @TYPE                     *0-0-0/c CHAR(256)   r     1 BUF
  2062-0-0/c CHAR(9)     r     1 CONSEC_KEY                 7-0-0/w PTR         r     1 DCB$
  2060-0-0/c CHAR(8)     r     1 EDIT_KEY                   6-0-0/w PTR         r     1 FPT$
    10-0-0/w UBIN        r     1 I                         *0-0-0/w UBIN        r     1 SIZE
  2014-0-0/w UBIN        r     1 SOURCE_INDEX              *0-0-0/w UBIN        r     1 TYPE
    14-0-0/w UBIN        r     1 WSPACE(0:1023)          2016-0-0/d STRC(1224)  r     1 XUE_PPCB

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:35   

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 M$EI$
     0-0-0/w PTR         r     1 M$SI$                      0-0-0/w PTR         r     1 M$UC$
     0-0-0/w BIT         r     1 VX_ECHO                    0-0-0/w STRC(2304)  r     1 VX_EI_KEY_BUF
     0-0-0/d STRC(936)   r     1 VX_FPT_ERRMSG              0-0-0/w STRC(2466)  r     1 VX_LAST_LINE
     0-0-0/w UBIN        r     1 XUE_PREEXP

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/d STRC(504)   r     1 FPT$READ                   0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$EI                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC


   Procedure VXR$READ requires 257 words for executable code.
   Procedure VXR$READ requires 1080 words of local(AUTO) storage.

    No errors detected in file VXR$READ.:E05TSI    .
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:36   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:37   
          MINI XREF LISTING

B$JIT.CPFLAGS1
     12303**DCL     13699>>IF
B$JIT.CPFLAGS1.SLEAZE
     12308**DCL     12308--REDEF
B$JIT.ERR.MID
     12215**DCL     12215--REDEF
B$JIT.JRESPEAK
     12376**DCL     12377--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
     12485**DCL     12485--REDEF   12486--REDEF
B$JIT.PNR
     12389**DCL     12389--REDEF
B$JIT.TSLINE
     12483**DCL     12484--REDEF
B$JIT$
      8920**DCL     12209--IMP-PTR 13699>>IF
BUF
     12698**DCL        16--PROC    13662--ASSIGN  13663<<ASSIGN  13674>>CALLBLT 13676--ASSIGN  13677--ASSIGN
     13679--ASSIGN  13702--ASSIGN  13707>>ASSIGN  13725>>CALLBLT 13731>>CALLBLT 13745--ENTRY   13747--ASSIGN
     13751--ASSIGN  13757--ENTRY   13759--ASSIGN
CONSEC_KEY
     13630**DCL     13722<<CALLBLT 13723>>CALLBLT
CONSEC_MOPS
     13648**DCL     13723>>CALLBLT
CONSEC_NUM
     12746**DCL     13721<<ASSIGN  13721>>ASSIGN  13722>>CALLBLT
CXUE_PPCB
     13284**DCL     13675>>ASSIGN
DCB$
     12718**DCL     13653<<ASSIGN  13656<<ASSIGN  13659<<ASSIGN  13666>>ASSIGN  13699>>IF
DO_MERC
     13738**LABEL   13665--CALLALT 13703--CALLALT 13727--CALLALT 13749--CALLALT 13753--CALLALT 13761--CALLALT
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:38   
EDIT_KEY
     13629**DCL     13717<<CALLBLT 13718>>CALLBLT
EDIT_MOPS
     13647**DCL     13718>>CALLBLT
F$DCB.ACTPOS
     13585**DCL     13585--REDEF
F$DCB.ARS#
     13559**DCL     13559--REDEF   13666>>ASSIGN
F$DCB.ATTR
     13578**DCL     13579--REDEF
F$DCB.BORROW
     13593**DCL     13593--REDEF   13593--REDEF   13593--REDEF
F$DCB.DCBNAME.L
     13607**DCL     13607--IMP-SIZ
F$DCB.DDEV.XEQ#
     13566**DCL     13699>>IF
F$DCB.EOMCHAR#
     13563**DCL     13563--REDEF
F$DCB.FLDID
     13588**DCL     13588--REDEF
F$DCB.FORM$
     13582**DCL     13582--REDEF
F$DCB.FSECT
     13598**DCL     13598--REDEF
F$DCB.FSN#
     13575**DCL     13575--REDEF   13575--REDEF   13576--REDEF
F$DCB.HEADER$
     13581**DCL     13581--REDEF
F$DCB.IXTNSIZE#
     13579**DCL     13579--REDEF
F$DCB.LASTSTA$
     13568**DCL     13568--REDEF
F$DCB.LVL
     13594**DCL     13594--REDEF
F$DCB.NAME#.C
     13569**DCL     13569--REDEF
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:39   
F$DCB.NOEOF
     13591**DCL     13591--REDEF
F$DCB.NRECS#
     13580**DCL     13580--REDEF
F$DCB.NRECX
     13599**DCL     13599--REDEF
F$DCB.OHDR
     13591**DCL     13591--REDEF
F$DCB.ORG#
     13574**DCL     13574--REDEF   13712>>IF
F$DCB.PRECNO
     13597**DCL     13597--REDEF
F$DCB.RCSZ
     13603**DCL     13603--REDEF
F$DCB.RES#
     13570**DCL     13570--REDEF
F$DCB.SETX
     13582**DCL     13582--REDEF
F$DCB.TAB$
     13582**DCL     13582--REDEF
F$DCB.TDA
     13596**DCL     13597--REDEF
F$DCB.WSN#
     13570**DCL     13570--REDEF
FPT$
     12717**DCL     12980--IMP-PTR 13652<<ASSIGN  13655<<ASSIGN  13658<<ASSIGN  13662>>ASSIGN  13665>>CALL
FPT$READ
     12980**DCL     13665<>CALL
FPT$READ.BUF_
     12982**DCL     13662<<ASSIGN
FPT$READ.STATION_
     12983**DCL     12984--REDEF
FPT$READ.V.DVBYTE.REREAD#
     12995**DCL     12995--REDEF
FPT$READ.V.INDX#
     12993**DCL     12993--REDEF
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:40   
I
     12737**DCL     12738--REDEF   13716<<ASSIGN  13717>>CALLBLT
J
     12739**DCL     12740--REDEF
K
     12741**DCL     12742--REDEF
L
     12743**DCL     12744--REDEF
M$EI$
     10653**DCL     13656>>ASSIGN  13712>>IF
M$ERR
      5095**DCL-ENT 13690--CALL    13740--CALL
M$MERC
      5139**DCL-ENT 13738--CALL
M$READ
      5084**DCL-ENT 13665--CALL
M$SI$
     10652**DCL     13653>>ASSIGN
M$UC$
     10651**DCL     13659>>ASSIGN
M$WRITE
      5084**DCL-ENT 13703--CALL    13727--CALL    13749--CALL    13753--CALL    13761--CALL
MERC_ERROR
     13743**LABEL   13738--CALLALT
NO_SUBS
     13694**LABEL   13674--CALLALT
SIZE
     12699**DCL        16--PROC    13664>>DOUNTIL 13666<<ASSIGN  13678>>ASSIGN  13694<<ASSIGN  13702>>ASSIGN
     13705>>ASSIGN  13709>>ASSIGN  13729>>ASSIGN  13745--ENTRY   13748>>ASSIGN  13752>>ASSIGN  13757--ENTRY
     13760>>ASSIGN
SOURCE_INDEX
     12749**DCL     13674<<CALLBLT
TYPE
     12700**DCL        16--PROC    13650>>DOCASE  13697>>DOCASE  13745--ENTRY   13750>>IF
VXE$ERRMSG
     12680**DCL-ENT 13688--CALL
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:41   
VXE$MERC
     12679**DCL-ENT 13743--CALL
VX_BIAS.A
      9586**DCL      9587--REDEF
VX_CBUF.CHARS_A
      9520**DCL      9521--REDEF
VX_CONST_DCB.ACTPOS
     10702**DCL     10702--REDEF
VX_CONST_DCB.ARS#
     10661**DCL     10661--REDEF
VX_CONST_DCB.ATTR#
     10691**DCL     10691--REDEF   10693--REDEF
VX_CONST_DCB.BORROW
     10713**DCL     10713--REDEF   10713--REDEF   10713--REDEF
VX_CONST_DCB.EOMCHAR#
     10668**DCL     10669--REDEF
VX_CONST_DCB.FLDID
     10705**DCL     10706--REDEF
VX_CONST_DCB.FORM$
     10697**DCL     10697--REDEF
VX_CONST_DCB.FSECT
     10720**DCL     10720--REDEF
VX_CONST_DCB.FSN#
     10687**DCL     10687--REDEF   10687--REDEF   10688--REDEF
VX_CONST_DCB.HEADER$
     10696**DCL     10697--REDEF
VX_CONST_DCB.IXTNSIZE#
     10693**DCL     10694--REDEF
VX_CONST_DCB.LASTSTA$
     10677**DCL     10677--REDEF
VX_CONST_DCB.LVL
     10714**DCL     10714--REDEF
VX_CONST_DCB.NAME#.C
     10677**DCL     10678--REDEF
VX_CONST_DCB.NOEOF
     10709**DCL     10709--REDEF
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:42   
VX_CONST_DCB.NRECS#
     10694**DCL     10694--REDEF
VX_CONST_DCB.NRECX
     10721**DCL     10721--REDEF
VX_CONST_DCB.OHDR
     10710**DCL     10710--REDEF
VX_CONST_DCB.ORG#
     10685**DCL     10686--REDEF
VX_CONST_DCB.PRECNO
     10718**DCL     10718--REDEF
VX_CONST_DCB.RCSZ
     10726**DCL     10726--REDEF
VX_CONST_DCB.RES#
     10679**DCL     10679--REDEF
VX_CONST_DCB.SETX
     10698**DCL     10698--REDEF
VX_CONST_DCB.TAB$
     10697**DCL     10697--REDEF
VX_CONST_DCB.TDA
     10717**DCL     10718--REDEF
VX_CONST_DCB.WSN#
     10679**DCL     10680--REDEF
VX_DO_FPT_WRITE
     12949**DCL     13753<>CALL    13761<>CALL
VX_DO_FPT_WRITE.BUF_.BOUND
     12949**DCL     13752<<ASSIGN  13760<<ASSIGN
VX_DO_FPT_WRITE.BUF_.BUF$
     12951**DCL     13751<<ASSIGN  13759<<ASSIGN
VX_DO_FPT_WRITE.STATION_
     12951**DCL     12951--REDEF
VX_DO_FPT_WRITE.V
     12952**DCL     12949--DCLINIT
VX_DO_FPT_WRITE.V.DVBYTE.VFC#
     12958**DCL     12958--REDEF
VX_EBUF.CHARS_A
     10109**DCL     10110--REDEF
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:43   
VX_ECHO
     10498**DCL     13699>>IF
VX_EFIELD1.CHARS
     10118**DCL     10119--REDEF
VX_EFIELD2.CHARS
     10122**DCL     10123--REDEF
VX_EFIELD3.CHARS
     10126**DCL     10127--REDEF
VX_EI_FPT_READ
     12832**DCL     13655--ASSIGN
VX_EI_FPT_READ.STATION_
     12835**DCL     12836--REDEF
VX_EI_FPT_READ.V
     12836**DCL     12832--DCLINIT
VX_EI_FPT_READ.V.DVBYTE.REREAD#
     12847**DCL     12847--REDEF
VX_EI_FPT_READ.V.INDX#
     12845**DCL     12845--REDEF
VX_EI_KEY_BUF
     10500**DCL     12832--DCLINIT 12833--DCLINIT
VX_EI_KEY_BUF.COUNT
     10501**DCL     13712>>IF
VX_EI_KEY_BUF.EDIT.NUM
     10504**DCL     13712>>IF      13716>>ASSIGN
VX_EI_KEY_BUF.KEY
     10502**DCL     10503--REDEF
VX_ERRORS
      9563**DCL      9574--REDEF
VX_ERRORS.CONFLICT_A
      9569**DCL      9570--REDEF
VX_ERRORS.UNSAT_A
      9565**DCL      9566--REDEF
VX_FPT_ERRMSG.V.OUTDCB2#
      8512**DCL     13750>>IF
VX_IMAGE_DATA.CPAGE#_A
      8700**DCL      8701--REDEF
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:44   
VX_IMAGE_DATA.NODE_A$
      8712**DCL      8713--REDEF
VX_IMAGE_DATA.START_A$
      8704**DCL      8705--REDEF
VX_IMAGE_DATA.STOP_A$
      8708**DCL      8709--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8769**DCL      8770--REDEF
VX_IMAGE_DS3.NODE_A$
      8781**DCL      8782--REDEF
VX_IMAGE_DS3.START_A$
      8773**DCL      8774--REDEF
VX_IMAGE_DS3.STOP_A$
      8777**DCL      8778--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8792**DCL      8793--REDEF
VX_IMAGE_DS4.NODE_A$
      8804**DCL      8805--REDEF
VX_IMAGE_DS4.START_A$
      8796**DCL      8797--REDEF
VX_IMAGE_DS4.STOP_A$
      8800**DCL      8801--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8815**DCL      8816--REDEF
VX_IMAGE_DS5.NODE_A$
      8827**DCL      8828--REDEF
VX_IMAGE_DS5.START_A$
      8819**DCL      8820--REDEF
VX_IMAGE_DS5.STOP_A$
      8823**DCL      8824--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8838**DCL      8839--REDEF
VX_IMAGE_DS6.NODE_A$
      8850**DCL      8851--REDEF
VX_IMAGE_DS6.START_A$
      8842**DCL      8843--REDEF
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:45   
VX_IMAGE_DS6.STOP_A$
      8846**DCL      8847--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8861**DCL      8862--REDEF
VX_IMAGE_DS7.NODE_A$
      8873**DCL      8874--REDEF
VX_IMAGE_DS7.START_A$
      8865**DCL      8866--REDEF
VX_IMAGE_DS7.STOP_A$
      8869**DCL      8870--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8884**DCL      8885--REDEF
VX_IMAGE_DS8.NODE_A$
      8896**DCL      8897--REDEF
VX_IMAGE_DS8.START_A$
      8888**DCL      8889--REDEF
VX_IMAGE_DS8.STOP_A$
      8892**DCL      8893--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8723**DCL      8724--REDEF
VX_IMAGE_PROC.NODE_A$
      8735**DCL      8736--REDEF
VX_IMAGE_PROC.START_A$
      8727**DCL      8728--REDEF
VX_IMAGE_PROC.STOP_A$
      8731**DCL      8732--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8746**DCL      8747--REDEF
VX_IMAGE_ROS.NODE_A$
      8758**DCL      8759--REDEF
VX_IMAGE_ROS.START_A$
      8750**DCL      8751--REDEF
VX_IMAGE_ROS.STOP_A$
      8754**DCL      8755--REDEF
VX_LAST_LINE.OFFSET
     10508**DCL     13706<<ASSIGN  13710<<ASSIGN  13730<<ASSIGN
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:46   
VX_LAST_LINE.SIZE
     10507**DCL     13705<<ASSIGN  13709<<ASSIGN  13726>>ASSIGN  13729<<ASSIGN
VX_LAST_LINE.TEXT
     10509**DCL     13707<<ASSIGN  13711<<ASSIGN  13718<<CALLBLT 13723<<CALLBLT 13725<<CALLBLT 13726--ASSIGN
     13731<<CALLBLT
VX_LO_FPT_WRITE
     12916**DCL     13703<>CALL    13727<>CALL    13749<>CALL
VX_LO_FPT_WRITE.BUF_
     12916**DCL     13702<<ASSIGN  13726<<ASSIGN
VX_LO_FPT_WRITE.BUF_.BOUND
     12916**DCL     13748<<ASSIGN
VX_LO_FPT_WRITE.BUF_.BUF$
     12918**DCL     13747<<ASSIGN
VX_LO_FPT_WRITE.STATION_
     12918**DCL     12918--REDEF
VX_LO_FPT_WRITE.V
     12919**DCL     12916--DCLINIT
VX_LO_FPT_WRITE.V.DVBYTE.VFC#
     12925**DCL     12925--REDEF
VX_M_VECTOR.F
      8551**DCL      8555--REDEF
VX_M_VECTOR_DP.F
      8586**DCL      8590--REDEF
VX_O.ACCTN_A$
      9715**DCL      9716--REDEF
VX_O.DCB_MATCH_A$
      9724**DCL      9725--REDEF
VX_O.DCB_MATCH_HIT_A
      9730**DCL      9731--REDEF
VX_O.FIDN_A$
      9709**DCL      9710--REDEF
VX_O.FID_A$
      9701**DCL      9702--REDEF
VX_O.INCLUDE_A$
      9721**DCL      9722--REDEF
VX_O.MAP_A
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:47   
      9695**DCL      9696--REDEF
VX_O.NODCB_A
      9752**DCL      9753--REDEF
VX_O.NUM_A
      9640**DCL      9642--REDEF
VX_O.OPT_A
      9740**DCL      9741--REDEF
VX_O.PRIV_A
      9656**DCL      9658--REDEF
VX_O.SIN_A
      9609**DCL      9610--REDEF
VX_O.TCB_A
      9736**DCL      9737--REDEF
VX_OD.ACCTN_A$
      9913**DCL      9914--REDEF
VX_OD.DCB_MATCH_A$
      9922**DCL      9923--REDEF
VX_OD.FIDN_A$
      9907**DCL      9908--REDEF
VX_OD.FID_A$
      9899**DCL      9900--REDEF
VX_OD.INCLUDE_A$
      9919**DCL      9920--REDEF
VX_OD.MAP_A
      9893**DCL      9894--REDEF
VX_OD.NODCB_A
      9937**DCL      9938--REDEF
VX_OD.NUM_A
      9840**DCL      9841--REDEF
VX_OD.PRIV_A
      9855**DCL      9856--REDEF
VX_OD.SIN_A
      9809**DCL      9810--REDEF
VX_OD.VECTOR_A$
      9928**DCL      9929--REDEF
VX_OL.MAX_A
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:48   
      9784**DCL      9786--REDEF
VX_OL.MIN_A
      9769**DCL      9770--REDEF
VX_ON.ACCTN_A$
     10058**DCL     10060--REDEF
VX_ON.DCB_MATCH_A$
     10069**DCL     10071--REDEF
VX_ON.FIDN_A$
     10051**DCL     10053--REDEF
VX_ON.FID_A$
     10042**DCL     10044--REDEF
VX_ON.INCLUDE_A$
     10065**DCL     10067--REDEF
VX_ON.MAP_A
     10035**DCL     10037--REDEF
VX_ON.NODCB_A$
     10085**DCL     10086--REDEF
VX_ON.NUM_A
      9980**DCL      9982--REDEF
VX_ON.PRIV_A
      9996**DCL      9998--REDEF
VX_ON.SIN_A
      9948**DCL      9950--REDEF
VX_ON.VECTOR_A$
     10076**DCL     10077--REDEF
VX_OUHEAD.VERSION
      9395**DCL      9397--REDEF
VX_OU_HEAD
      9338**DCL      9377--REDEF
VX_OU_HEAD.REC_A
      9350**DCL      9353--REDEF
VX_O_KEY_BUF.FORM0
      8599**DCL      8602--REDEF    8609--REDEF
VX_O_KEY_BUF_L.FORM0
      8622**DCL      8625--REDEF    8632--REDEF
VX_PASS2_REF.OU.L_START
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:49   
     10288**DCL     10293--REDEF
VX_PASS2_REF.OU.L_STOP
     10294**DCL     10299--REDEF
VX_PASS2_REF.OU.MAX
     10282**DCL     10287--REDEF
VX_PASS2_REF.OU.SIZE
     10300**DCL     10305--REDEF
VX_PASS2_REF.SAT.COUNT
     10327**DCL     10333--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10334**DCL     10340--REDEF
VX_PASS2_REF.SAT.L_START
     10313**DCL     10319--REDEF
VX_PASS2_REF.SAT.L_STOP
     10320**DCL     10326--REDEF
VX_PASS2_REF.SAT.MAX
     10307**DCL     10312--REDEF
VX_PASS2_REF.UNSAT.L_START
     10375**DCL     10380--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10381**DCL     10386--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10387**DCL     10392--REDEF
VX_PASS2_REF.UNSAT.MAX
     10369**DCL     10374--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10399**DCL     10404--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10393**DCL     10398--REDEF
VX_PHRASE.PHRASE
      9801**DCL      9803--REDEF
VX_PROGRAM_BIAS.A
      9579**DCL      9580--REDEF
VX_R_KEY_BUF.FORM0
      8648**DCL      8652--REDEF    8658--REDEF
VX_SD.A
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:50   
      8276**DCL      8277--REDEF
VX_SI_FPT_READ
     12788**DCL     13652--ASSIGN
VX_SI_FPT_READ.STATION_
     12791**DCL     12792--REDEF
VX_SI_FPT_READ.V
     12792**DCL     12788--DCLINIT
VX_SI_FPT_READ.V.DVBYTE.REREAD#
     12803**DCL     12803--REDEF
VX_SI_FPT_READ.V.INDX#
     12801**DCL     12801--REDEF
VX_SPC.B$.MINE
     10470**DCL     10476--REDEF
VX_SPC.B$.NAME
     10449**DCL     10455--REDEF
VX_SPC.B$.SKIP
     10463**DCL     10469--REDEF
VX_SPC.B$.VALUE
     10456**DCL     10462--REDEF
VX_SPC.SEG.NAME
     10418**DCL     10424--REDEF
VX_SPC.SEG.VALUE
     10425**DCL     10431--REDEF
VX_TSX0_OVERLAY.H
     10193**DCL     10196--REDEF
VX_UC_FPT_READ
     12875**DCL     13658--ASSIGN
VX_UC_FPT_READ.STATION_
     12878**DCL     12879--REDEF
VX_UC_FPT_READ.V
     12879**DCL     12875--DCLINIT
VX_UC_FPT_READ.V.DVBYTE.REREAD#
     12890**DCL     12890--REDEF
VX_UC_FPT_READ.V.INDX#
     12888**DCL     12888--REDEF
WSPACE
PL6.E3A0      #001=VXR$READ File=VXR$READ.:E05TSI                                WED 07/30/97 08:35 Page:51   
     12748**DCL     13681--ASSIGN  13682--ASSIGN
X$PRE_PROCESS
     12681**DCL-ENT 13686--CALL
XUE_PPCB
     13017**DCL     13675<<ASSIGN  13686<>CALL
XUE_PPCB.ECB.ERR
     13164**DCL     13688<>CALL
XUE_PPCB.ECB.FUN$$
     13119**DCL     13683<<ASSIGN
XUE_PPCB.ECB.PROCNAME_
     13179**DCL     13684<<ASSIGN
XUE_PPCB.ECB.WKSZ#
     13095**DCL     13682<<ASSIGN
XUE_PPCB.ECB.WORK$
     13090**DCL     13681<<ASSIGN
XUE_PPCB.ICHARS#
     13026**DCL     13678<<ASSIGN
XUE_PPCB.INBUF$
     13021**DCL     13676<<ASSIGN
XUE_PPCB.OCHARS#
     13040**DCL     13679<<ASSIGN
XUE_PPCB.OUTBUF$
     13033**DCL     13677<<ASSIGN
XUE_PPCB.RCHARS#
     13047**DCL     13694>>ASSIGN
XUE_PPCB.ROOT$
     13054**DCL     13680<<ASSIGN
XUE_PREEXP
     12747**DCL     13680--ASSIGN
