      *M*      KWIC_SIC - KWIC INDEX PROGRAM.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.  ARCHKWIC.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.  LEVEL-66-ASCII.
       OBJECT-COMPUTER.  LEVEL-66-ASCII.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT DATER ASSIGN TO CARD-READER.
           SELECT A-CARD ASSIGN TO DISC.
           SELECT LIST ASSIGN TO DISC.
           SELECT PRINTER ASSIGN TO PRINTER-F.
           SELECT TEMPFILE ASSIGN TO DISC.
       DATA DIVISION.
       FILE SECTION.
       FD  DATER
           LABEL RECORDS ARE OMITTED
           DATA RECORD TITLE-RECORD SORT-RECORD.
       01  TITLE-RECORD.
           02 TITLE PIC X(30).
           02 FILLER PIC X(50).
       01  SORT-RECORD.
 
           02 SORT-COLUMN-START PIC XXX.
           02 FILLER PIC XXXX.
           02 SORT-COLUMN-STOP PIC XXX.
           02 FILLER PIC X(1).
           02 FIRST-WORD PIC X.
           02 FILLER PIC X(68).
       FD  A-CARD
           LABEL RECORDS ARE STANDARD.
       01  CARD-REC.
           02  C OCCURS 160 TIMES      PIC X.
       FD  LIST
           LABEL RECORDS ARE STANDARD.
       01  LIST-REC.
           02  LIST-BUF OCCURS 160 TIMES      PIC X.
       FD  PRINTER
           LABEL RECORDS ARE OMITTED.
       01  PRNT-REC.
           02  CC                      PIC X.
           02  PRNT-DATA               PIC X(110).
       FD  TEMPFILE
           LABEL RECORDS ARE STANDARD.
       01  SORT-REC.
           02  SORT-WORD               PIC X(20).
           02  FILLER                    PIC X.
           02  SORT-DATA               PIC X(89).
       01  SORT-REC1.
           02  FILLER PIC X(99).
           02  BREAK  PIC X.
           02  SORT-NAME PIC X(10).
       WORKING-STORAGE SECTION.
       77  SAVE-REC                    PIC X(110).
       77  I                           COMP-6.
       77  J                           COMP-6.
       77  K                           COMP-6.
       77  L                           COMP-6.
       77  M                           COMP-6.
       77  SORT-START                  COMP-6.
       77  SORT-STOP                   COMP-6.
       77  SORT-ONE                    COMP-6 VALUE 1.
       77  SORT-LENGTH                 COMP-6.
       77  EOF-FLAG                    COMP-6 VALUE 0.
       77  KWOC-FLAG                   COMP-6 VALUE 1.
       77  LIST-FLAG                   COMP-6 VALUE 0.
       77  C-160                       COMP-6 VALUE 160.
       77  LINECT                      COMP-6 VALUE -1.
       77  PAGENO                      COMP-6 VALUE ZERO.
       77  FIRST-WORD-FLAG             PIC X.
       01  ZWORD.
           02 ZWORD0 OCCURS 6 TIMES    PIC X.
       01  ZWORD1 REDEFINES ZWORD      PIC X(6).
       01  ZSAVE.
           02 ZSAVE0 OCCURS 20 TIMES    PIC X.
       01  ZSAVE1 REDEFINES ZSAVE      PIC X(20).
       01  MODULE-L.
           02 MODULE-L0 OCCURS 20 TIMES    PIC X.
       01  MODULE-L1 REDEFINES MODULE-L      PIC X(20).
       01  NAME-L.
           02 NAME-L0 OCCURS 20 TIMES    PIC X.
       01  NAME-L1 REDEFINES NAME-L      PIC X(20).
       01  JUNK-TABLE.
           02 FILL-TABLE.
              03 FILLER PIC X(24) VALUE "ABOUT AGAIN ALL   AMONG ".
              03 FILLER PIC X(24) VALUE "AN    AND   AT    BY    ".
              03 FILLER PIC X(24) VALUE "CP-6  END   FOR   IN    ".
              03 FILLER PIC X(24) VALUE "MEMO  OF    ON    OR    ".
              03 FILLER PIC X(24) VALUE "THE   TO    WITH  FROM  ".
              03 FILLER PIC X(24) VALUE "ANY   ARE   IF    INTO  ".
              03 FILLER PIC X(24) VALUE "IS    ITS   THAT  THIS  ".
              03 FILLER PIC X(24) VALUE "WHICH AFTER AS    BUF   ".
              03 FILLER PIC X(24) VALUE "BE    FIRST GIVEN CAN   ".
              03 FILLER PIC X(24) VALUE "GIVINGMODULEMOST  PART  ".
              03 FILLER PIC X(24) VALUE "USED  COUNT COUNTSPER   ".
              03 FILLER PIC X(24) VALUE "EACH  I.E.  IT'S  HANDLE".
              03 FILLER PIC X(24) VALUE "CHECK CHECKSONCE  NEXT  ".
              03 FILLER PIC X(24) VALUE "READS COMMONDONE  DOES  ".
              03 FILLER PIC X(24) VALUE "DO    DURINGITEM  ITEMS ".
              03 FILLER PIC X(24) VALUE "MAIN  NAME  NAMES NUMBER".
              03 FILLER PIC X(24) VALUE "OBTAINONE   ONLY  PART  ".
              03 FILLER PIC X(24) VALUE "NEW   POINT READ  STRING".
              03 FILLER PIC X(24) VALUE "TURN  UP    USE   USED  ".
              03 FILLER PIC X(24) VALUE "USER  USERS VALUE VALUES".
           02 JUNK-TABL REDEFINES FILL-TABLE OCCURS 80 TIMES
              INDEXED BY J2.
              03 JUNK-WORD PIC X(6).
       01  JUNK-TABLE1.
           02 FILL-TABLE1.
              03 FILLER PIC X(24) VALUE "HANDLING    INFORMATION ".
              03 FILLER PIC X(24) VALUE "INTERNAL    PORTION     ".
              03 FILLER PIC X(24) VALUE "PROCEDURE   PROCEDURES  ".
              03 FILLER PIC X(24) VALUE "PROCESSES   PROCESSING  ".
              03 FILLER PIC X(24) VALUE "PROCESSOR   PROCESSORS  ".
              03 FILLER PIC X(24) VALUE "PROGRAM     ROUTINES    ".
              03 FILLER PIC X(24) VALUE "SELECTED    COLLECT     ".
              03 FILLER PIC X(24) VALUE "BETWEEN     FUNCTION    ".
              03 FILLER PIC X(24) VALUE "FUNCTIONS   ROUTINE     ".
              03 FILLER PIC X(24) VALUE "ROUTINES    ROUTINES.   ".
              03 FILLER PIC X(24) VALUE "SUBROUTINE  SUBROUTINES ".
              03 FILLER PIC X(24) VALUE "CONTAINS    MODULES     ".
              03 FILLER PIC X(24) VALUE "PROCESS     PRODUCE     ".
              03 FILLER PIC X(24) VALUE "HANDLES     STRING.     ".
              03 FILLER PIC X(24) VALUE "STRINGS     VARIOUS     ".
              03 FILLER PIC X(24) VALUE "ACCESSED    ACCESSING   ".
              03 FILLER PIC X(24) VALUE "ACTIVE      ADDITION    ".
              03 FILLER PIC X(24) VALUE "AGAINST     ALLOCATES   ".
              03 FILLER PIC X(24) VALUE "ALLOCATING  APPROPRIATE ".
              03 FILLER PIC X(24) VALUE "ACQUIRE     ARITHMETIC  ".
              03 FILLER PIC X(24) VALUE "ASSOCIATED  ASSORTED    ".
              03 FILLER PIC X(24) VALUE "ATTACH      ATTRIBUTE   ".
              03 FILLER PIC X(24) VALUE "ATTRIBUTES  AVAILABLE   ".
              03 FILLER PIC X(24) VALUE "BAD         BLANKS      ".
              03 FILLER PIC X(24) VALUE "CALLABLE    CALLED      ".
              03 FILLER PIC X(24) VALUE "CALLERS     CALLING     ".
              03 FILLER PIC X(24) VALUE "CHANGES     CHECKING    ".
              03 FILLER PIC X(24) VALUE "CHOICE      CLEAN       ".
              03 FILLER PIC X(24) VALUE "CLOSEST     COLLECTED   ".
              03 FILLER PIC X(24) VALUE "COLLECTING  COLLECTION  ".
              03 FILLER PIC X(24) VALUE "COLLECTS    COMPACTS    ".
              03 FILLER PIC X(24) VALUE "COMPENSATE  COMPLAINTS  ".
              03 FILLER PIC X(24) VALUE "COMPLETE    CONCERNED   ".
              03 FILLER PIC X(24) VALUE "CONCERNING  CONDITION   ".
              03 FILLER PIC X(24) VALUE "CONDITIONS  CONTAINING  ".
              03 FILLER PIC X(24) VALUE "CREATES     CREATING    ".
              03 FILLER PIC X(24) VALUE "DCL'S       DEALING     ".
              03 FILLER PIC X(24) VALUE "DEFINES     DESCRIBED   ".
              03 FILLER PIC X(24) VALUE "DESIRED     DETERMINE   ".
              03 FILLER PIC X(24) VALUE "DOWN        ENTER       ".
              03 FILLER PIC X(24) VALUE "ENTIRE      EVERYTIME   ".
              03 FILLER PIC X(24) VALUE "EXTERNALLY  EXTRANEOUS  ".
              03 FILLER PIC X(24) VALUE "FETCHES     FINDS       ".
              03 FILLER PIC X(24) VALUE "INTENDED    ISN'T       ".
              03 FILLER PIC X(24) VALUE "ISSUE       KNOWN       ".
              03 FILLER PIC X(24) VALUE "LARGE       LINK'S      ".
              03 FILLER PIC X(24) VALUE "MADE        MAKE        ".
              03 FILLER PIC X(24) VALUE "MAKING      MAKER       ".
              03 FILLER PIC X(24) VALUE "MANAGING    MANAGED     ".
              03 FILLER PIC X(24) VALUE "MOSTLY      NEED        ".
              03 FILLER PIC X(24) VALUE "NEEDED      OBTAINING   ".
              03 FILLER PIC X(24) VALUE "ORINTED     OTHER       ".
              03 FILLER PIC X(24) VALUE "PASSED      PREPARES    ".
              03 FILLER PIC X(24) VALUE "PRODUCING   SEE         ".
              03 FILLER PIC X(24) VALUE "SOME        THEN        ".
              03 FILLER PIC X(24) VALUE "WHAT        WITHIN      ".
              03 FILLER PIC X(24) VALUE "YET         ZERO        ".
           02 JUNK-TABL1 REDEFINES FILL-TABLE1 OCCURS 114 TIMES
              INDEXED BY J3.
              03 JUNK-WORD1 PIC X(12).
       01  HEADER1.
           02  FILLER                  PIC X VALUE "0".
           02  TODAY                   PIC X(10).
           02  FILLER                  PIC X(30) VALUE SPACE.
           02  HEADER-TITLE                  PIC X(30) VALUE SPACE.
           02  FILLER                  PIC X(31) VALUE SPACE.
           02  PAGEOUT                 PIC ZZZ.
       01  HEADER2.
           02  FILLER                  PIC X VALUE "a".
           02  FILLER                  PIC X(110) VALUE ALL ".".
       01  HEADER3.
           02  FILLER                  PIC X VALUE "a".
           02  SUB-TITLE                  PIC X(110) VALUE SPACE.
       PROCEDURE DIVISION.
       MAIN-PROC SECTION.
       BEGIN-JOB.
           OPEN INPUT DATER.
           DISPLAY " ENTER TITLE - 40 CHARS OR LESS "
           UPON SYSOUT.
           MOVE SPACES TO TITLE-RECORD.
           READ DATER AT END
               DISPLAY " MISSING TITLE " UPON SYSOUT
               STOP RUN.
           MOVE TITLE TO HEADER-TITLE.
           DISPLAY " ENTER COLUMNS TO SORT - XXX TO XXX. "
           UPON SYSOUT.
           MOVE SPACES TO TITLE-RECORD.
           READ DATER AT END
               DISPLAY " MISSING SORT-COLUMN COMMAND" UPON SYSOUT
               STOP RUN.
           MOVE SORT-COLUMN-START TO SORT-START.
           MOVE SORT-COLUMN-STOP TO SORT-STOP.
           MOVE FIRST-WORD TO FIRST-WORD-FLAG.
           ACCEPT TODAY FROM DATE.
           OPEN INPUT A-CARD, OUTPUT TEMPFILE.
           IF LIST-FLAG NOT EQUAL 0
               OPEN INPUT LIST.
               MOVE 0 TO EOF-FLAG.
           PERFORM READ-CARDS.
           CLOSE A-CARD, TEMPFILE.
           IF SORT-STOP NOT EQUAL 0
               CALL "SORTFILE" USING SORT-ONE SORT-STOP.
           OPEN INPUT TEMPFILE.
           OPEN OUTPUT PRINTER.
           PERFORM WRITE-LINES.
           CLOSE TEMPFILE.
           CLOSE PRINTER.
           STOP RUN.
       READ-CARDS SECTION.
       READ-A-CARD.
           MOVE SPACES TO CARD-REC.
           READ A-CARD AT END
               GO TO READ-EXIT.
           IF SORT-STOP = 0
               MOVE CARD-REC TO SORT-REC
               WRITE SORT-REC
               GO TO READ-A-CARD.
           INSPECT CARD-REC REPLACING ALL
               "a" BY "A", "b" BY "B", "c" BY "C", "d" BY "D",
               "e" BY "E", "f" BY "F", "g" BY "G", "h" BY "H",
               "i" BY "I", "j" BY "J", "k" BY "K", "l" BY "L",
               "m" BY "M", "n" BY "N", "o" BY "O", "p" BY "P",
               "q" BY "Q", "r" BY "R", "s" BY "S", "t" BY "T",
               "u" BY "U", "v" BY "V", "w" BY "W", "x" BY "X",
               "y" BY "Y", "z" BY "Z".
           MOVE CARD-REC TO SAVE-REC.
           MOVE SORT-START TO J.
           IF C(J) IS EQUAL TO SPACE GO TO SKIP-WRITE.
           PERFORM SUBR.
           IF KWOC-FLAG EQUAL 0 GO TO DO-WRITE.
           IF LIST-FLAG EQUAL 0 GO TO SKIP-WRITE.
           IF EOF-FLAG NOT EQUAL 0 GO TO BLANK-NAME.
           IF MODULE-L1 IS GREATER THAN ZSAVE1
               GO TO BLANK-NAME.
           IF MODULE-L1 IS EQUAL TO ZSAVE1
               GO TO SKIP-READ.
           MOVE SPACES TO NAME-L1.
       READ-AGAIN.
           MOVE SPACES TO LIST-REC.
           READ LIST AT END
               MOVE 1 TO EOF-FLAG
               GO TO BLANK-NAME.
       SKIP-READ.
           MOVE SPACE TO MODULE-L1.
           MOVE 1 TO M.
           PERFORM GET-LIST-MODULE VARYING J FROM 1 BY 1 UNTIL
               J IS GREATER THAN 160 OR
               LIST-BUF(J) IS EQUAL ",".
           IF MODULE-L1 IS LESS THAN ZSAVE1
               GO TO READ-AGAIN.
           IF MODULE-L1 IS GREATER THAN ZSAVE1
               GO TO BLANK-NAME.
           PERFORM TABLE-SEARCH VARYING J FROM J BY 1 UNTIL
               J IS GREATER THAN 160 OR
               LIST-BUF(J) IS EQUAL " ".
           PERFORM TABLE-SEARCH VARYING J FROM J BY 1 UNTIL
               J IS GREATER THAN 160 OR
               LIST-BUF(J) IS NOT EQUAL " ".
           MOVE 1 TO M.
           PERFORM GET-LIST-NAME VARYING J FROM J BY 1 UNTIL
               J IS GREATER THAN 160 OR
               LIST-BUF(J) IS EQUAL " ".
           IF M IS LESS THAN 4
               ADD 1 TO J
               ADD 1 TO M
               PERFORM GET-LIST-NAME VARYING J FROM J BY 1 UNTIL
                   J IS GREATER THAN 160 OR
                   LIST-BUF(J) IS EQUAL " ".
           GO TO SKIP-WRITE.
       GET-LIST-MODULE.
           MOVE LIST-BUF(J) TO MODULE-L0(M).
           ADD 1 TO M.
       GET-LIST-NAME.
           MOVE LIST-BUF(J) TO NAME-L0(M).
           ADD 1 TO M.
       DO-WRITE.
               MOVE SPACE TO SORT-REC
               MOVE ZSAVE1 TO SORT-WORD
               MOVE SAVE-REC TO SORT-DATA
               WRITE SORT-REC.
       BLANK-NAME.
       SKIP-WRITE.
           PERFORM TABLE-SEARCH VARYING I FROM 160 BY -1 UNTIL
               C(I) IS NOT EQUAL TO SPACE.
           ADD 1 TO I.
           MOVE ">" TO C(I).
           ADD 2 TO I.
           MOVE "<" TO C(I).
           ADD 1 TO I.
           IF FIRST-WORD-FLAG = "X" GO TO FIND-BREAK.
           MOVE SPACE TO ZWORD1.
           MOVE SPACE TO ZSAVE1.
           MOVE 1 TO M.
           PERFORM MOVE-CHAR1 VARYING J FROM SORT-START BY 1 UNTIL
              C(J) IS EQUAL " " OR
              C(J) IS EQUAL "," OR
              C(J) IS EQUAL ";" OR
              C(J) IS EQUAL "(" OR
              C(J) IS EQUAL ")" OR
              C(J) IS EQUAL ">" OR
              C(J) IS EQUAL "<".
           IF J EQUAL SORT-START + 1 OR
           ZWORD0(1) IS NUMERIC OR
           ZWORD0(1) IS EQUAL "." OR
           ZWORD0(1) IS EQUAL "-" OR
           ZWORD0(1) IS EQUAL """" OR
           ZWORD0(1) IS EQUAL "#" OR
           ZWORD0(1) IS EQUAL "$" OR
           ZWORD0(1) IS EQUAL "%" OR
           ZWORD0(1) IS EQUAL "'"
              GO TO FIND-BREAK.
           IF J NOT GREATER THAN SORT-START + 6
              SET J2 TO 1
              SEARCH JUNK-TABL
              WHEN JUNK-WORD (J2) = ZWORD1
              GO TO FIND-BREAK.
           MOVE SPACE TO SORT-REC.
              SET J3 TO 1
              SEARCH JUNK-TABL1
              WHEN JUNK-WORD1 (J3) = ZSAVE1
              GO TO FIND-BREAK.
           MOVE ZSAVE1 TO SORT-WORD.
           MOVE SAVE-REC TO SORT-DATA.
           IF LIST-FLAG NOT EQUAL 0
           MOVE "*" TO BREAK
           MOVE NAME-L1 TO SORT-NAME.
           WRITE SORT-REC.
       FIND-BREAK.
           PERFORM TABLE-SEARCH VARYING J FROM SORT-START BY 1 UNTIL
               J IS GREATER THAN SORT-STOP OR
               C(J) IS EQUAL " " OR
               C(J) IS EQUAL ">" OR
               C(J) IS EQUAL "<" OR
               C(J) IS EQUAL "," OR
               C(J) IS EQUAL ";" OR
               C(J) IS EQUAL "(" OR
               C(J) IS EQUAL ")".
           IF C(J) IS EQUAL TO ">",
               GO TO READ-A-CARD.
           PERFORM TABLE-SEARCH VARYING J FROM J BY 1 UNTIL
               J IS NOT LESS THAN I OR
               C(J) IS NOT EQUAL " " AND
               C(J) IS NOT EQUAL "<" AND
               C(J) IS NOT EQUAL "," AND
               C(J) IS NOT EQUAL ";" AND
               C(J) IS NOT EQUAL "(" AND
               C(J) IS NOT EQUAL ")"
               OR C(J) IS EQUAL TO ">".
           IF J IS NOT LESS THAN I OR C(J) IS EQUAL TO ">",
               GO TO READ-A-CARD.
           MOVE I TO L.
           PERFORM MOVE-CHAR VARYING K FROM SORT-START BY 1 UNTIL K IS
               EQUAL TO J.
           MOVE L TO J.
           MOVE SORT-START TO L.
           PERFORM MOVE-CHAR VARYING K FROM K BY 1 UNTIL
               K IS EQUAL TO J.
           PERFORM BLANK-IT VARYING L FROM L BY 1 UNTIL L
               IS GREATER THAN 160.
       SUBR.
           MOVE SPACE TO ZWORD1.
           MOVE SPACE TO ZSAVE1.
           MOVE 1 TO M.
           PERFORM MOVE-CHAR1 VARYING J FROM SORT-START BY 1 UNTIL
              C(J) IS EQUAL " " OR
              C(J) IS EQUAL "," OR
              C(J) IS EQUAL ";" OR
              C(J) IS EQUAL "(" OR
              C(J) IS EQUAL ")" OR
              C(J) IS EQUAL ">" OR
              C(J) IS EQUAL "<".
       SUBR-END.
           IF J EQUAL SORT-START + 1 OR
           ZWORD0(1) IS NUMERIC OR
           ZWORD0(1) IS EQUAL "." OR
           ZWORD0(1) IS EQUAL "-" OR
           ZWORD0(1) IS EQUAL """" OR
           ZWORD0(1) IS EQUAL "#" OR
           ZWORD0(1) IS EQUAL "$" OR
           ZWORD0(1) IS EQUAL "%" OR
           ZWORD0(1) IS EQUAL "'"
              GO TO FIND-BREAK.
           IF J NOT GREATER THAN SORT-START + 6
              SET J2 TO 1
              SEARCH JUNK-TABL
              WHEN JUNK-WORD (J2) = ZWORD1
              GO TO FIND-BREAK.
           MOVE SPACE TO SORT-REC.
              SET J3 TO 1
              SEARCH JUNK-TABL1
              WHEN JUNK-WORD1 (J3) = ZSAVE1
              GO TO FIND-BREAK.
           MOVE ZSAVE1 TO SORT-WORD.
           MOVE SAVE-REC TO SORT-DATA.
           IF LIST-FLAG NOT EQUAL 0
           MOVE "*" TO BREAK
           MOVE NAME-L1 TO SORT-NAME.
           WRITE SORT-REC.
           GO TO FIND-BREAK.
       MOVE-CHAR.
           MOVE C(K) TO C(L).
           ADD 1 TO L.
       MOVE-CHAR1.
           IF J NOT GREATER THAN SORT-START + 5
           MOVE C(J) TO ZWORD0(M).
           IF J NOT GREATER THAN SORT-START + 19
           MOVE C(J) TO ZSAVE0(M).
           ADD 1 TO M.
       BLANK-IT.
           MOVE SPACE TO C(L).
       TABLE-SEARCH.
           EXIT.
       READ-EXIT.
           EXIT.
       WRITE-LINES SECTION.
       WRITE-A-LINE.
           READ TEMPFILE AT END
               GO TO WRITE-EXIT.
           IF LINECT IS NOT POSITIVE,
               ADD 1 TO PAGENO;
               MOVE PAGENO TO PAGEOUT;
               WRITE PRNT-REC FROM HEADER1;
               WRITE PRNT-REC FROM HEADER2;
               WRITE PRNT-REC FROM HEADER3;
               WRITE PRNT-REC FROM HEADER2;
               MOVE "b" TO CC;
               MOVE 32 TO LINECT;
           ELSE
               SUBTRACT 1 FROM LINECT;
               MOVE "a" TO CC.
           MOVE SORT-REC TO PRNT-DATA.
           WRITE PRNT-REC.
           GO TO WRITE-A-LINE.
       WRITE-EXIT.
           EXIT.
