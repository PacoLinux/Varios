VERSION A06

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:1    
        1        1        /*M* Z7AR -- Special version of Z9AR */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8
        9        9        /*P*
       10       10              NAME: Z9AR
       11       11
       12       12           AUTHORS: Yawackum Schwartz
       13       13
       14       14           PURPOSE: (1) GET_DYNAMIC_SEGMENT -- Get page for IL or XUU$READ.
       15       15                    (2) FREE_DYNAMIC_SEGMENT -- Free IL table pages.
       16       16                     On CP-6 but not GCOS:
       17       17                    (3) ALLOCATE -- Get a page for XUU$READ for Fast I/O.
       18       18                    (4) RELEASE -- Free a page for XUU$READ Fast I/O.
       19       19
       20       20        */
       21       21
       22       22        /*D*   NAME: Z9AR$GET_DYNAMIC_SEGMENT
       23       23
       24       24               CALL: CALL Z9AR$GET_DYNAMIC_SEGMENT (Returned_Pointer) ;
       25       25
       26       26          INTERFACE:
       27       27          CP-6     : Calls M$GDP to get another logical page.
       28       28                     Uses M$GDS when the ISR space is exhausted.
       29       29          GCOS     : Calls ZVG$GDS to get another logical page.
       30       30
       31       31             OUTPUT: PTR$ (arg#1) -- points to page obtained.
       32       32
       33       33        DESCRIPTION:
       34       34                     Uses ISR space (via M$GDP) until this is all used up (CP-6 only).
       35       35                     The first call to M$GDS gets a free segment of
       36       36                     the system's choosing.  Subsequent calls to this
       37       37                     routine will then simply grow that segment by
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:2    
       38       38                     %BLOCK_SIZE word increments.  The variable PTR$
       39       39                     points to the allocated page upon exit.
       40       40                     If one dynamic segment is not enough, more are allocated.
       41       41        */
       42       42
       43       43        Z9AR$GET_DYNAMIC_SEGMENT:PROC(/*->*/ PTR$) NOAUTO ALTRET;
       44       44
       45       45        %EQU PHASE = 0;
       46       46        %INCLUDE Z8A_DEFC;
       47      114        %INCLUDE Z8A_COMCOM;
       48      764        %INCLUDE Z8A_SYS_FILE;
       49     7039
       50     7040    1        DCL PTR$ PTR;
       51     7041    1        DCL FIRST_CALL BIT(1) ALIGNED STATIC INIT('1'B);
       52     7042        %IF CP6;
       53     7043    1        DCL OUT_OF_ISR_SPACE BIT (1) ALIGNED STATIC INIT ('0'B) ;
       54     7044        %ENDIF;
       55     7045        %IF GCOS;
       56     7046 C           DCL M$ERR ENTRY CONV(1,0,1);
       57     7047        %ENDIF;
       58     7048    1        DCL Z9AT$TERMINATOR ENTRY;
       59     7049    1        DCL OBUF  CHAR (120) EXT ;
       60     7050
       61     7051
       62     7052        %IF CP6;
       63     7053        %FPT_GDP(RESULTS=VLR_GDS,PAGES=%PAGES_PER_BLOCK) ;
       64     7067        %FPT_GDS(RESULTS=VLR_GDS,FREE=YES,SEGSIZE=%BLOCK_SIZE);
       65     7083        %ENDIF;
       66     7084        %IF GCOS;
       67     7085 C      %FPT_GDS(RESULTS=VLR_GDS,SEGSIZE=%BLOCK_SIZE);
       68     7086        %ENDIF;
       69     7087        %VLR_GDS(LOGSIZE=%#256K,REALSIZE=10240);
       70     7115        %VLR_GDS(FPTN=LAST_VECTOR,LOGSIZE=%#256K,REALSIZE=10240);
       71     7143
       72     7144        %IF GCOS;
       73     7145 C          DCL B$TCB$ PTR SYMREF;
       74     7146 C          %B$TCB;
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:3    
       75     7147 C          %B$ALT;
       76     7148        %ENDIF;
       77     7149
       78     7150
       79     7151        %IF CP6;
       80     7152    2        IF OUT_OF_ISR_SPACE THEN DO ;
       81     7153        %ENDIF;
       82     7154    2          CALL M$GDS (FPT_GDS)
       83     7155    3          WHENALTRETURN DO ; /* No more space */
       84     7156    3            GET_SPACE:
       85     7157    3            VLR_GDS.VECT.PTR$ = ADDR(NIL) ; /* Start new segment */
       86     7158    3            CALL M$GDS (FPT_GDS) ALTRET (OOPS) ;
       87     7159    3            FIRST_CALL = '1'B ;
       88     7160    3          END ;
       89     7161        %IF CP6;
       90     7162    2        END ;
       91     7163    2        ELSE DO ; /* Continue using ISR space until exhausted */
       92     7164
       93     7165    2          CALL M$GDP (FPT_GDP)
       94     7166    3          WHENALTRETURN DO ; /* M$GDP ALTRET */
       95     7167    3            OUT_OF_ISR_SPACE = '1'B ;
       96     7168    3            VLR_GDS.VECT.PTR$ = ADDR(NIL) ; /* Start new segment */
       97     7169    3            CALL M$GDS (FPT_GDS) ALTRET (OOPS) ;
       98     7170    3            FIRST_CALL = '1'B ;
       99     7171    3          END ;
      100     7172    2        END ;
      101     7173        %ENDIF;
      102     7174
      103     7175    2        IF FIRST_CALL THEN DO ;
      104     7176    2          FIRST_CALL = '0'B;
      105     7177    2          PTR$ = VLR_GDS.VECT.PTR$;
      106     7178    2        END;
      107     7179    2        ELSE DO ;
      108     7180    2          PTR$ = PINCRC (LAST_VECTOR.VECT.PTR$, LAST_VECTOR.VECT.W1.VSIZE# + 1);
      109     7181    2        END ;
      110     7182
      111     7183    1        LAST_VECTOR = VLR_GDS;
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:4    
      112     7184
      113     7185    1        RETURN ;
      114     7186
      115     7187    1   OOPS: ;
      116     7188        %IF CP6;
      117     7189    1        OBUF = 'Not enough memory to compile; use ORES MEM=nnn.' ;
      118     7190        %ENDIF;
      119     7191        %IF GCOS;
      120     7192 C           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = 12028 /* %E$NORSPACE */
      121     7193 C             THEN OBUF = 'Not enough memory to compile; please increase RSPACE.';
      122     7194 C           ELSE OBUF = 'Not enough memory to compile; please increase VSPACE.';
      123     7195 C            /* Assume %E$NOVSPACE - other errors should be impossible. */
      124     7196        %ENDIF;
      125     7197    1        CALL M$ERR ;
      126     7198    1        RETURN ;
      127     7199
      128     7200        %EJECT;
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:5    
      129     7201        /*D*   NAME: Z9AR$FREE_DYNAMIC_SEGMENT
      130     7202
      131     7203               CALL: CALL Z9AR$FREE_DYNAMIC_SEGMENT ;
      132     7204
      133     7205          INTERFACE: Calls M$FDS
      134     7206
      135     7207        DESCRIPTION: This entry point is called at compiler wrapup
      136     7208                     to free the I.L. table space that was obtained
      137     7209                     thru Z9AR$GET_DYNAMIC_SEGMENT.
      138     7210                     In CP-6 and GCOS no action is needed because it will be done
      139     7211                     automatically by the system. On Multics that may not hold true.
      140     7212        */
      141     7213
      142     7214    1   Z9AR$FREE_DYNAMIC_SEGMENT:ENTRY ALTRET;
      143     7215
      144     7216        /*N*
      145     7217              For Multics,if necessary,add code here to free all dynamically
      146     7218              acquired space.
      147     7219        */
      148     7220    1        RETURN;
      149     7221
      150     7222    1   END Z9AR$GET_DYNAMIC_SEGMENT;
      151     7223        %EOD;

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:6    
--  Include file information  --

   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9AR$GET_DYNAMIC_SEGMENT.

   Procedure Z9AR$GET_DYNAMIC_SEGMENT requires 63 words for executable code.
   Procedure Z9AR$GET_DYNAMIC_SEGMENT is declared NOAUTO and requires 24 words of local(STATIC) storage.

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:7    

 Object Unit name= Z9AR$GET_DYNAMIC_SEGMENT                   File name= Z7AR.:Z8A6TOU
 UTS= AUG 09 '97 10:41:33.12 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    24     30  Z9AR$GET_DYNAMIC_SEGMENT
    1  LblCom even  none     1      1  ITERATION
    2   DCB   even  none     0      0  M$UC
    3  LblCom even  none    30     36  OBUF
    4  RoData even  UTS     12     14  Z9AR$GET_DYNAMIC_SEGMENT
    5   Proc  even  none    63     77  Z9AR$GET_DYNAMIC_SEGMENT
    6  RoData even  none     1      1  Z9AR$GET_DYNAMIC_SEGMENT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     5      0   yes    yes     yes      Std        1  Z9AR$GET_DYNAMIC_SEGMENT
     5     73          yes     yes      Std        0  Z9AR$FREE_DYNAMIC_SEGMENT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_STATIC_1

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     COMCOM                                M$UC
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:8    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:9    


        1        1        /*M* Z7AR -- Special version of Z9AR */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8
        9        9        /*P*
       10       10              NAME: Z9AR
       11       11
       12       12           AUTHORS: Yawackum Schwartz
       13       13
       14       14           PURPOSE: (1) GET_DYNAMIC_SEGMENT -- Get page for IL or XUU$READ.
       15       15                    (2) FREE_DYNAMIC_SEGMENT -- Free IL table pages.
       16       16                     On CP-6 but not GCOS:
       17       17                    (3) ALLOCATE -- Get a page for XUU$READ for Fast I/O.
       18       18                    (4) RELEASE -- Free a page for XUU$READ Fast I/O.
       19       19
       20       20        */
       21       21
       22       22        /*D*   NAME: Z9AR$GET_DYNAMIC_SEGMENT
       23       23
       24       24               CALL: CALL Z9AR$GET_DYNAMIC_SEGMENT (Returned_Pointer) ;
       25       25
       26       26          INTERFACE:
       27       27          CP-6     : Calls M$GDP to get another logical page.
       28       28                     Uses M$GDS when the ISR space is exhausted.
       29       29          GCOS     : Calls ZVG$GDS to get another logical page.
       30       30
       31       31             OUTPUT: PTR$ (arg#1) -- points to page obtained.
       32       32
       33       33        DESCRIPTION:
       34       34                     Uses ISR space (via M$GDP) until this is all used up (CP-6 only).
       35       35                     The first call to M$GDS gets a free segment of
       36       36                     the system's choosing.  Subsequent calls to this
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:10   
       37       37                     routine will then simply grow that segment by
       38       38                     %BLOCK_SIZE word increments.  The variable PTR$
       39       39                     points to the allocated page upon exit.
       40       40                     If one dynamic segment is not enough, more are allocated.
       41       41        */
       42       42
       43       43        Z9AR$GET_DYNAMIC_SEGMENT:PROC(/*->*/ PTR$) NOAUTO ALTRET;

     43  5 000000   000000 700200 xent  Z9AR$GET_DY* TSX0  ! X66_STATIC_1
         5 000001   000000 000001 0                  ZERO    0,1

       44       44
       45       45        %EQU PHASE = 0;
       46       46        %INCLUDE Z8A_DEFC;
       47      114        %INCLUDE Z8A_COMCOM;
       48      764        %INCLUDE Z8A_SYS_FILE;
       49     7039
       50     7040    1        DCL PTR$ PTR;
       51     7041    1        DCL FIRST_CALL BIT(1) ALIGNED STATIC INIT('1'B);
       52     7042        %IF CP6;
       53     7043    1        DCL OUT_OF_ISR_SPACE BIT (1) ALIGNED STATIC INIT ('0'B) ;
       54     7044        %ENDIF;
       55     7045        %IF GCOS;
       56     7046 C           DCL M$ERR ENTRY CONV(1,0,1);
       57     7047        %ENDIF;
       58     7048    1        DCL Z9AT$TERMINATOR ENTRY;
       59     7049    1        DCL OBUF  CHAR (120) EXT ;
       60     7050
       61     7051
       62     7052        %IF CP6;
       63     7053        %FPT_GDP(RESULTS=VLR_GDS,PAGES=%PAGES_PER_BLOCK) ;
       64     7067        %FPT_GDS(RESULTS=VLR_GDS,FREE=YES,SEGSIZE=%BLOCK_SIZE);
       65     7083        %ENDIF;
       66     7084        %IF GCOS;
       67     7085 C      %FPT_GDS(RESULTS=VLR_GDS,SEGSIZE=%BLOCK_SIZE);
       68     7086        %ENDIF;
       69     7087        %VLR_GDS(LOGSIZE=%#256K,REALSIZE=10240);
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:11   
       70     7115        %VLR_GDS(FPTN=LAST_VECTOR,LOGSIZE=%#256K,REALSIZE=10240);
       71     7143
       72     7144        %IF GCOS;
       73     7145 C          DCL B$TCB$ PTR SYMREF;
       74     7146 C          %B$TCB;
       75     7147 C          %B$ALT;
       76     7148        %ENDIF;
       77     7149
       78     7150
       79     7151        %IF CP6;
       80     7152    2        IF OUT_OF_ISR_SPACE THEN DO ;

   7152  5 000002   000003 234000 0                  SZN     OUT_OF_ISR_SPACE
         5 000003   000022 605000 5                  TPL     s:7165

       81     7153        %ENDIF;
       82     7154    2          CALL M$GDS (FPT_GDS)

   7154  5 000004   000012 630400 0                  EPPR0   FPT_GDS
         5 000005   430001 713400                    CLIMB   alt,gds
         5 000006   400400 401760                    pmme    nvectors=2
         5 000007   000011 702000 5                  TSX2    GET_SPACE
         5 000010   000021 710000 5                  TRA     s:7162

       83     7155    3          WHENALTRETURN DO ; /* No more space */

       84     7156    3            GET_SPACE:
       85     7157    3            VLR_GDS.VECT.PTR$ = ADDR(NIL) ; /* Start new segment */

   7157  5 000011   000000 236000 6     GET_SPACE    LDQ     0
         5 000012   000021 756000 0                  STQ     VLR_GDS+1

       86     7158    3            CALL M$GDS (FPT_GDS) ALTRET (OOPS) ;

   7158  5 000013   000012 630400 0                  EPPR0   FPT_GDS
         5 000014   430001 713400                    CLIMB   alt,gds
         5 000015   400400 401760                    pmme    nvectors=2
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:12   
         5 000016   000064 702000 5                  TSX2    OOPS

       87     7159    3            FIRST_CALL = '1'B ;

   7159  5 000017   400000 236003                    LDQ     -131072,DU
         5 000020   000002 756000 0                  STQ     FIRST_CALL

       88     7160    3          END ;

       89     7161        %IF CP6;
       90     7162    2        END ;

   7162  5 000021   000041 710000 5                  TRA     s:7175

       91     7163    2        ELSE DO ; /* Continue using ISR space until exhausted */

       92     7164
       93     7165    2          CALL M$GDP (FPT_GDP)

   7165  5 000022   000004 630400 0                  EPPR0   FPT_GDP
         5 000023   430003 713400                    CLIMB   alt,+12291
         5 000024   400400 401760                    pmme    nvectors=2
         5 000025   000027 702000 5                  TSX2    s:7167
         5 000026   000041 710000 5                  TRA     s:7175

       94     7166    3          WHENALTRETURN DO ; /* M$GDP ALTRET */

       95     7167    3            OUT_OF_ISR_SPACE = '1'B ;

   7167  5 000027   400000 236003                    LDQ     -131072,DU
         5 000030   000003 756000 0                  STQ     OUT_OF_ISR_SPACE

       96     7168    3            VLR_GDS.VECT.PTR$ = ADDR(NIL) ; /* Start new segment */

   7168  5 000031   000000 236000 6                  LDQ     0
         5 000032   000021 756000 0                  STQ     VLR_GDS+1

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:13   
       97     7169    3            CALL M$GDS (FPT_GDS) ALTRET (OOPS) ;

   7169  5 000033   000012 630400 0                  EPPR0   FPT_GDS
         5 000034   430001 713400                    CLIMB   alt,gds
         5 000035   400400 401760                    pmme    nvectors=2
         5 000036   000064 702000 5                  TSX2    OOPS

       98     7170    3            FIRST_CALL = '1'B ;

   7170  5 000037   400000 236003                    LDQ     -131072,DU
         5 000040   000002 756000 0                  STQ     FIRST_CALL

       99     7171    3          END ;

      100     7172    2        END ;

      101     7173        %ENDIF;
      102     7174
      103     7175    2        IF FIRST_CALL THEN DO ;

   7175  5 000041   000002 234000 0                  SZN     FIRST_CALL
         5 000042   000050 605000 5                  TPL     s:7180

      104     7176    2          FIRST_CALL = '0'B;

   7176  5 000043   000002 450000 0                  STZ     FIRST_CALL

      105     7177    2          PTR$ = VLR_GDS.VECT.PTR$;

   7177  5 000044   000021 236000 0                  LDQ     VLR_GDS+1
         5 000045   000001 470400 0                  LDP0    @PTR$
         5 000046   000000 756100                    STQ     0,,PR0

      106     7178    2        END;

   7178  5 000047   000057 710000 5                  TRA     s:7183

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:14   
      107     7179    2        ELSE DO ;

      108     7180    2          PTR$ = PINCRC (LAST_VECTOR.VECT.PTR$, LAST_VECTOR.VECT.W1.VSIZE# + 1);

   7180  5 000050   000024 236000 0                  LDQ     LAST_VECTOR
         5 000051   000020 772000                    QRL     16
         5 000052   000020 736000                    QLS     16
         5 000053   200000 036007                    ADLQ    65536,DL
         5 000054   000025 036000 0                  ADLQ    LAST_VECTOR+1
         5 000055   000001 470400 0                  LDP0    @PTR$
         5 000056   000000 756100                    STQ     0,,PR0

      109     7181    2        END ;

      110     7182
      111     7183    1        LAST_VECTOR = VLR_GDS;

   7183  5 000057   000000 100400                    MLR     fill='000'O
         5 000060   000020 000020 0                  ADSC9   VLR_GDS                  cn=0,n=16
         5 000061   000024 000020 0                  ADSC9   LAST_VECTOR              cn=0,n=16

      112     7184
      113     7185    1        RETURN ;

   7185  5 000062   000000 221200 0                  LDX1  ! 0
         5 000063   000001 702211                    TSX2  ! 1,X1

   7183  5 000064                       OOPS         null
      114     7186
      115     7187    1   OOPS: ;
      116     7188        %IF CP6;
      117     7189    1        OBUF = 'Not enough memory to compile; use ORES MEM=nnn.' ;

   7189  5 000064   040000 100400                    MLR     fill='040'O
         5 000065   000000 000057 4                  ADSC9   0                        cn=0,n=47
         5 000066   000000 000170 3                  ADSC9   OBUF                     cn=0,n=120

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:15   
      118     7190        %ENDIF;
      119     7191        %IF GCOS;
      120     7192 C           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = 12028 /* %E$NORSPACE */
      121     7193 C             THEN OBUF = 'Not enough memory to compile; please increase RSPACE.';
      122     7194 C           ELSE OBUF = 'Not enough memory to compile; please increase VSPACE.';
      123     7195 C            /* Assume %E$NOVSPACE - other errors should be impossible. */
      124     7196        %ENDIF;
      125     7197    1        CALL M$ERR ;

   7197  5 000067   000002 713400                    CLIMB   err
         5 000070   000000 401760                    pmme    nvectors=0

      126     7198    1        RETURN ;

   7198  5 000071   000000 221200 0                  LDX1  ! 0
         5 000072   000001 702211                    TSX2  ! 1,X1

      127     7199
      128     7200        %EJECT;
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:16   
      129     7201        /*D*   NAME: Z9AR$FREE_DYNAMIC_SEGMENT
      130     7202
      131     7203               CALL: CALL Z9AR$FREE_DYNAMIC_SEGMENT ;
      132     7204
      133     7205          INTERFACE: Calls M$FDS
      134     7206
      135     7207        DESCRIPTION: This entry point is called at compiler wrapup
      136     7208                     to free the I.L. table space that was obtained
      137     7209                     thru Z9AR$GET_DYNAMIC_SEGMENT.
      138     7210                     In CP-6 and GCOS no action is needed because it will be done
      139     7211                     automatically by the system. On Multics that may not hold true.
      140     7212        */
      141     7213
      142     7214    1   Z9AR$FREE_DYNAMIC_SEGMENT:ENTRY ALTRET;

   7214  5 000073   000000 700200 xent  Z9AR$FREE_D* TSX0  ! X66_STATIC_1
         5 000074   000000 000001 0                  ZERO    0,1

      143     7215
      144     7216        /*N*
      145     7217              For Multics,if necessary,add code here to free all dynamically
      146     7218              acquired space.
      147     7219        */
      148     7220    1        RETURN;

   7220  5 000075   000000 221200 0                  LDX1  ! 0
         5 000076   000001 702211                    TSX2  ! 1,X1
      149     7221
      150     7222    1   END Z9AR$GET_DYNAMIC_SEGMENT;
      151     7223        %EOD;

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:17   
--  Include file information  --

   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9AR$GET_DYNAMIC_SEGMENT.
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:18   

 **** Variables and constants ****

  ****  Section 000  Data  Z9AR$GET_DYNAMIC_SEGMENT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w PTR         r     1 @PTR$                      2-0-0/w BIT         r     1 FIRST_CALL
     4-0-0/d STRC(216)   r     1 FPT_GDP                   12-0-0/d STRC(216)   r     1 FPT_GDS
    24-0-0/d STRC(144)   r     1 LAST_VECTOR                3-0-0/w BIT         r     1 OUT_OF_ISR_SPACE
    *0-0-0/w PTR         r     1 PTR$                      20-0-0/d STRC(144)   r     1 VLR_GDS

  ****  Section 001 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 003 LblCom OBUF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(120)   r     1 OBUF

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(13248)       1 COMCOM

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z7AR.:Z8A6TSI                   SAT 08/09/97 10:41 Page:19   

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0N  NULL        r     1 M$UC                       0-0-0/w STRC(36864)       1 PAGE


   Procedure Z9AR$GET_DYNAMIC_SEGMENT requires 63 words for executable code.
   Procedure Z9AR$GET_DYNAMIC_SEGMENT is declared NOAUTO and requires 24 words of local(STATIC) storage.

PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:20   
      152        1        /*T***********************************************************/
      153        2        /*T*                                                         */
      154        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      155        4        /*T*                                                         */
      156        5        /*T***********************************************************/
      157        6        /*D*       NAME: Z9AR$ALLOCATE
      158        7
      159        8                   CALL: %XUU_PARAM (ALLOCATE = "Z9AR$ALLOCATE") ;
      160        9
      161       10              INTERFACE: Calls Z8AR$GET_SPACE.
      162       11
      163       12                  INPUT: None.
      164       13
      165       14                 OUTPUT: A Vector (XUU_VECTOR).
      166       15
      167       16            DESCRIPTION: This routine is called by XUU$READ to allocate
      168       17                         space for doing "Fast I/O".  It will be called
      169       18                         three times for each file required to be fast.
      170       19                         Thus, this routine will be called a maximum of
      171       20                         nine (9) times (Source, Updates, Includes).
      172       21                         To get its space, this routine calls Z8AR$GET_
      173       22                         SPACE, which is an entry into the same routine that
      174       23                         Z8AR$RESERVER uses to get Compiler IL space.
      175       24                         (Module is used only in CP-6 at this time.)
      176       25
      177       26        */
      178       27
      179       28        Z9AR$ALLOCATE: PROC (XUU_VECTOR) ; /* Called by XUU$READ */
      180       29
      181       30        %EQU PHASE = 0 ;
      182       31        %INCLUDE Z8A_DEFC ;
      183       99        %INCLUDE Z9A_FLAGS;
      184      113
      185      114    1   DCL 1 XUU_VECTOR DALIGNED,
      186      115    1       2 *          BIT (36),
      187      116    1       2 PTR$       PTR ;
      188      117
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:21   
      189      118        %IF CP6;
      190      119    1   DCL   SPACE (0: %(PAGE_SIZE - 1)) SBIN WORD BASED (XUU_VECTOR.PTR$);
      191      120
      192      121    1   DCL   Z8AR$GET_SPACE           ENTRY (1) ;
      193      122    1   DCL   Z8AR$FREE_SPACE          ENTRY (1) ;
      194      123
      195      124
      196      125    1          CALL Z8AR$GET_SPACE (XUU_VECTOR.PTR$) ;
      197      126    1          XUU_VECTOR = VECTOR (SPACE) ;
      198      127
      199      128        %ENDIF;
      200      129    1   RETURN ;
      201      130
      202      131        %EJECT;
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:22   
      203      132        /*D*       NAME: Z9AR$RELEASE
      204      133
      205      134                   CALL: %XUU_PARAM (RELEASE = "Z9AR$RELEASE", ...) ;
      206      135
      207      136              INTERFACE: Calls Z8AR$FREE_SPACE.
      208      137
      209      138                  INPUT: XUU_VECTOR -- A Vector of the space to release.
      210      139
      211      140                 OUTPUT: See Z8AR$FREE_SPACE.
      212      141
      213      142            DESCRIPTION: This routine is called by XUU$READ when it is
      214      143                         finished with the space that it allocated via
      215      144                         Z9AR$ALLOCATE.  This routine calls Z8AR$FREE_
      216      145                         SPACE to do the actual releasing.
      217      146                         (Module is used only in CP-6 at this time.)
      218      147
      219      148        */
      220      149
      221      150    1   Z9AR$RELEASE: ENTRY (XUU_VECTOR) ;
      222      151
      223      152        %IF CP6;
      224      153    1          CALL Z8AR$FREE_SPACE (XUU_VECTOR.PTR$) ;
      225      154
      226      155        %ENDIF;
      227      156    1   END Z9AR$ALLOCATE ;

PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:23   
--  Include file information  --

   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9AR$ALLOCATE.

   Procedure Z9AR$ALLOCATE requires 26 words for executable code.
   Procedure Z9AR$ALLOCATE requires 6 words of local(AUTO) storage.

    No errors detected in file Z7AR.:Z8A6TSI    .

PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:24   

 Object Unit name= Z9AR$ALLOCATE                              File name= Z7AR.:Z8A6TOU
 UTS= AUG 09 '97 10:42:45.00 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1   Proc  even  none    26     32  Z9AR$ALLOCATE
    2  RoData even  none     2      2  Z9AR$ALLOCATE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        1  Z9AR$ALLOCATE
     1     20                  yes      Std        1  Z9AR$RELEASE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 Z8AR$GET_SPACE
         yes           Std       1 Z8AR$FREE_SPACE
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:25   


      152        1        /*T***********************************************************/
      153        2        /*T*                                                         */
      154        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      155        4        /*T*                                                         */
      156        5        /*T***********************************************************/
      157        6        /*D*       NAME: Z9AR$ALLOCATE
      158        7
      159        8                   CALL: %XUU_PARAM (ALLOCATE = "Z9AR$ALLOCATE") ;
      160        9
      161       10              INTERFACE: Calls Z8AR$GET_SPACE.
      162       11
      163       12                  INPUT: None.
      164       13
      165       14                 OUTPUT: A Vector (XUU_VECTOR).
      166       15
      167       16            DESCRIPTION: This routine is called by XUU$READ to allocate
      168       17                         space for doing "Fast I/O".  It will be called
      169       18                         three times for each file required to be fast.
      170       19                         Thus, this routine will be called a maximum of
      171       20                         nine (9) times (Source, Updates, Includes).
      172       21                         To get its space, this routine calls Z8AR$GET_
      173       22                         SPACE, which is an entry into the same routine that
      174       23                         Z8AR$RESERVER uses to get Compiler IL space.
      175       24                         (Module is used only in CP-6 at this time.)
      176       25
      177       26        */
      178       27
      179       28        Z9AR$ALLOCATE: PROC (XUU_VECTOR) ; /* Called by XUU$READ */

     28  1 000000   000000 700200 xent  Z9AR$ALLOCA* TSX0  ! X66_AUTO_1
         1 000001   000006 000001                    ZERO    6,1

      180       29
      181       30        %EQU PHASE = 0 ;
      182       31        %INCLUDE Z8A_DEFC ;
      183       99        %INCLUDE Z9A_FLAGS;
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:26   
      184      113
      185      114    1   DCL 1 XUU_VECTOR DALIGNED,
      186      115    1       2 *          BIT (36),
      187      116    1       2 PTR$       PTR ;
      188      117
      189      118        %IF CP6;
      190      119    1   DCL   SPACE (0: %(PAGE_SIZE - 1)) SBIN WORD BASED (XUU_VECTOR.PTR$);
      191      120
      192      121    1   DCL   Z8AR$GET_SPACE           ENTRY (1) ;
      193      122    1   DCL   Z8AR$FREE_SPACE          ENTRY (1) ;
      194      123
      195      124
      196      125    1          CALL Z8AR$GET_SPACE (XUU_VECTOR.PTR$) ;

    125  1 000002   200003 236100                    LDQ     @XUU_VECTOR,,AUTO
         1 000003   000001 036003                    ADLQ    1,DU
         1 000004   200004 756100                    STQ     @XUU_VECTOR+1,,AUTO
         1 000005   200004 630500                    EPPR0   @XUU_VECTOR+1,,AUTO
         1 000006   000000 631400 2                  EPPR1   0
         1 000007   000000 701000 xent               TSX1    Z8AR$GET_SPACE
         1 000010   000000 011000                    NOP     0

      197      126    1          XUU_VECTOR = VECTOR (SPACE) ;

    126  1 000011   200003 470500                    LDP0    @XUU_VECTOR,,AUTO
         1 000012   000001 471500                    LDP1    1,,PR0
         1 000013   000001 235000 2                  LDA     1
         1 000014   200004 451500                    STP1    @XUU_VECTOR+1,,AUTO
         1 000015   200004 236100                    LDQ     @XUU_VECTOR+1,,AUTO
         1 000016   000000 757100                    STAQ    0,,PR0

      198      127
      199      128        %ENDIF;
      200      129    1   RETURN ;

    129  1 000017   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:27   
      201      130
      202      131        %EJECT;
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:28   
      203      132        /*D*       NAME: Z9AR$RELEASE
      204      133
      205      134                   CALL: %XUU_PARAM (RELEASE = "Z9AR$RELEASE", ...) ;
      206      135
      207      136              INTERFACE: Calls Z8AR$FREE_SPACE.
      208      137
      209      138                  INPUT: XUU_VECTOR -- A Vector of the space to release.
      210      139
      211      140                 OUTPUT: See Z8AR$FREE_SPACE.
      212      141
      213      142            DESCRIPTION: This routine is called by XUU$READ when it is
      214      143                         finished with the space that it allocated via
      215      144                         Z9AR$ALLOCATE.  This routine calls Z8AR$FREE_
      216      145                         SPACE to do the actual releasing.
      217      146                         (Module is used only in CP-6 at this time.)
      218      147
      219      148        */
      220      149
      221      150    1   Z9AR$RELEASE: ENTRY (XUU_VECTOR) ;

    150  1 000020   000000 700200 xent  Z9AR$RELEASE TSX0  ! X66_AUTO_1
         1 000021   000006 000001                    ZERO    6,1

      222      151
      223      152        %IF CP6;
      224      153    1          CALL Z8AR$FREE_SPACE (XUU_VECTOR.PTR$) ;

    153  1 000022   200003 236100                    LDQ     @XUU_VECTOR,,AUTO
         1 000023   000001 036003                    ADLQ    1,DU
         1 000024   200004 756100                    STQ     @XUU_VECTOR+1,,AUTO
         1 000025   200004 630500                    EPPR0   @XUU_VECTOR+1,,AUTO
         1 000026   000000 631400 2                  EPPR1   0
         1 000027   000000 701000 xent               TSX1    Z8AR$FREE_SPACE
         1 000030   000000 011000                    NOP     0

      225      154
      226      155        %ENDIF;
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:29   
      227      156    1   END Z9AR$ALLOCATE ;

    156  1 000031   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:30   
--  Include file information  --

   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9AR$ALLOCATE.
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z7AR.:Z8A6TSI                              SAT 08/09/97 10:42 Page:31   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @XUU_VECTOR               *0-0-0/d STRC(72)    r     1 XUU_VECTOR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w SBIN        r     1 SPACE(0:1023)


   Procedure Z9AR$ALLOCATE requires 26 words for executable code.
   Procedure Z9AR$ALLOCATE requires 6 words of local(AUTO) storage.

    No errors detected in file Z7AR.:Z8A6TSI    .
