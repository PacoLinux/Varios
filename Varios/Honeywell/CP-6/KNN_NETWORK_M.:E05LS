

14:51 JUL 28 '97 KNN_NETWORK_M.:E05SI                                      1    
    1      /*M* KNN_NETWORK_M - Various macros for the Network layer */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*X* MEC,MOC,EXM=20,CLM=20,CRM=80  */
    9
   10                          /*F* NAME: KNN$ROUTE - Fep Routing Tables
   11
   12                          There is a Route Table entry in the BOBCAT data segment
   13                          for each node in the network.  The size of the table
   14                          is (0:nodes), where nodes is the number specified by
   15                          the NODES option of the MON command in TIGR.
   16                          The macro KNN$ROUTE in file KNN_NETWORK_M generates
   17                          the structure for the Route Table.
   18
   19                          A route table entry may be located via a pointer
   20                          in Route Table pointer array, KNN$ROUTE$:
   21                          }
   22                          }   DCL KNN$ROUTE$(0:0) PTR BASED;
   23                          }   route$ = KNN_ROUTE$$ -> KNN$ROUTE$(node#)
   24                          }
   25                          The KNN$ROUTE structure contains:
   26                          */
   27      %MACRO KNN$ROUTE (STCLASS="BASED");
   28      DCL 1 KNN$ROUTE STCLASS CALIGNED,
   29            2 LINK$ PTR,
   30                          /*K* LINK$ - PTR.
   31                          Contains the address of the KNN$LINK structure
   32                          for this route.
   33                          See the description of KNN$LINK.
   34                          */
   35            2 CTX$ PTR,
   36                          /*K* CTX$ - PTR.
   37                          Contains the address of NODEADMN's context
14:51 JUL 28 '97 KNN_NETWORK_M.:E05SI                                      2    
   38                          for this route.  See the description of
   39                          GJA$HAND_CTX in file GJA_MSG_M.
   40                          */
   41            2 LINK# SBIN(16) CALIGNED,
   42                          /*K* LINK# - SBIN WORD.
   43                          Contains an index into the KNN$LINK table
   44                          for the first hop.
   45                          */
   46            2 CURRENT_QOS UBIN(16) CALIGNED,
   47                          /*K* CURRENT_QOS - UBIN WORD.
   48                          */
   49            2 ALT_QOS UBIN(16) CALIGNED,
   50                          /*K* ALT_QOS - UBIN WORD.
   51                          */
   52            2 FLAGS CALIGNED,
   53                %IF NOT(MODE_FEP);
   54              3 * BIT(1),
   55                %ENDIF;
   56              3 HOST_NODE BIT(1),
   57                          /*K* FLAGS.HOST_NODE - BIT(1).
   58                          Set if the node is a host.
   59                          */
   60              3 LINK_CONNECTED BIT(1),
   61                          /*K* FLAGS.LINK_CONNECTED - BIT(1).
   62                          Set it the node is link connected.
   63                          */
   64              3 * BIT(6) UNAL,
   65      %IF NOT(MODE_FEP);
   66              3 * BIT(1) UNAL,
   67      %ENDIF;
   68              3 * BIT(8) UNAL,
   69            2 LINK(0:0) CALIGNED,
   70                          /*K* LINK.. - ARRAY.
   71                          Each Route Table entry has a sub-structure for each link
   72                          known to this fep.  The array size is (0:maxlinks)
   73                          where maxlinks is defined by the MAXLINKS parameter
   74                          in NETCON.  For each link, we maintain the following
14:51 JUL 28 '97 KNN_NETWORK_M.:E05SI                                      3    
   75                          information:
   76                          */
   77           %IF NOT(MODE_FEP);
   78              3 * BIT(1) UNAL,
   79           %ENDIF;
   80              3 ACTIVE BIT(1) UNAL,
   81                          /*K* LINK.ACTIVE - BIT(1).
   82                          Set if this link is active.
   83                          */
   84              3 * BIT(7) UNAL,
   85              3 QOS UBIN BYTE CALIGNED,
   86                          /*K* LINK.QOS - UBIN BYTE.
   87                          */
   88              3 MSGS_IN UBIN(32) CALIGNED,
   89                          /*K* LINK.MSGS_IN - UBIN(32).
   90                          Contains a count of the number of
   91                          messages received on this link for this node.
   92                          */
   93              3 MSGS_OUT UBIN(32) CALIGNED;
   94                          /*K* LINK.MSGS_OUT - UBIN(32).
   95                          Contains a count of the number of
   96                          messages sent on this link for this node.
   97                          */
   98      %MEND;
   99
  100
  101
  102                          /*F* NAME: KNN$LINK - Fep Link Tables
  103
  104                          There is a Link Table entry in the BOBCAT data segment
  105                          for each link as defined by the MAXLINK parameter in
  106                          NETCON.  The size of the table is MAXLINK+1.
  107
  108                          The macro KNN$LINK in file KNN_NETWORK_M generates
  109                          the structure for the Link Table.
  110
  111                          A link table entry is usually located via KNN$ROUTE.LINK$.
14:51 JUL 28 '97 KNN_NETWORK_M.:E05SI                                      4    
  112                          A link table entry may also be located via a pointer
  113                          in Link Table pointer array, KNN$LINK$:
  114                          }
  115                          }   DCL KNN$LINK$(0:0) PTR BASED;
  116                          }   link$ = KNN_LINK$$ -> KNN$LINK$(link#)
  117                          }
  118                          The KNN$LINK structure contains:
  119                          */
  120      %MACRO KNN$LINK (STCLASS=BASED);
  121      DCL 1 KNN$LINK STCLASS CALIGNED,
  122            2 LDCT$ PTR CALIGNED,
  123                          /*K* LDCT$ - PTR.
  124                          Contains the address of a LINK type LDCT
  125                          which represents the end-point on this fep.
  126
  127                          If LDCT$ is the ADDR(NIL), this entry in the
  128                          Link Table is not in use.
  129                          */
  130            2 UID$ REDEF LDCT$ PTR CALIGNED,
  131                          /*K* UID$ - PTR.
  132                          For HDLCX's context.  Used when
  133                          FLAGS.CLASS_A is set.
  134                          */
  135           %IF NOT(MODE_FEP);
  136            2 NODE# UBIN(18) UNAL,
  137           %ELSE;
  138            2 NODE# UBIN(16) CALIGNED,
  139           %ENDIF;
  140                          /*K* NODE# - UBIN WORD.
  141                          If NODE# is 0 - 252, then this is the node number
  142                          of another node in a CP-6 network.
  143                          If FLAGS.HOST_NODE is set, that node is a CP-6
  144                          host; if reset, its a CP-6 fep.
  145
  146                          If NODE# = K_CNC_IS# (253) and FLAGS.VIRCIR is set,
  147                          then this is a circuit to an intermediate system.
  148
14:51 JUL 28 '97 KNN_NETWORK_M.:E05SI                                      5    
  149                          If NODE# = K_CNC_LINK# (255), then this is a
  150                          X.25 Link to a foreign (OSI) system.
  151                          */
  152            2 FLAGS,
  153                %IF NOT(MODE_FEP);
  154              3 * BIT(1) UNAL,
  155                %ENDIF;
  156              3 HOST_NODE BIT(1),
  157                          /*K* FLAGS.HOST_NODE - BIT(1).
  158                          Set if the other endpoint is a host.
  159                          */
  160              3 CLASS_A BIT(1),
  161                          /*K* FLAGS.CLASS_A - BIT(1).
  162                          indicates that this link is a class "A" network
  163                          connection (CONS);  i.e. X.25 over transport.
  164                          */
  165              3 BLOCKED BIT(1),
  166                          /*K* FLAGS.BLOCKED - BIT(1).
  167                          indicates that this link was blocked from the link layer.
  168                          set by a KN_FCN_BLOCK reset by KN_FCN_UNFLOW.             */
  169              3 VIRCIR BIT(1),
  170                          /*K* FLAGS.VIRCIR - BIT(1).
  171                          set by FPT_CONNECT.FLAGS.VIRCIR.  Indicates, if set, that
  172                          that this context is for a virtual circuit and not a link.*/
  173              3 * BIT(4),
  174              3 STATE UBIN BYTE UNAL,
  175                          /*K* STATE - UBIN BYTE.
  176                          Contains a value to indicate the state of
  177                          the Class A connection:
  178                          OPEN, OPENING or CLOSED.
  179                          ??  RESET  ??
  180                          */
  181           %IF NOT(MODE_FEP);
  182            2 QOS UBIN(18) CALIGNED,
  183           %ELSE;
  184            2 QOS UBIN(16) CALIGNED,
  185           %ENDIF;
14:51 JUL 28 '97 KNN_NETWORK_M.:E05SI                                      6    
  186                          /*K* QOS - UBIN WORD.
  187                          */
  188           %IF NOT(MODE_FEP);
  189            2 MSGS_IN UBIN(36) CALIGNED,
  190           %ELSE;
  191            2 MSGS_IN UBIN(32) CALIGNED,
  192           %ENDIF;
  193                          /*K* MSGS_IN - UBIN(32).
  194                          Contains a count of the total number of
  195                          messages received over this link.
  196                          */
  197           %IF NOT(MODE_FEP);
  198            2 MSGS_OUT UBIN(36) CALIGNED,
  199           %ELSE;
  200            2 MSGS_OUT UBIN(32) CALIGNED,
  201           %ENDIF;
  202                          /*K* MSGS_OUT - UBIN(32).
  203                          Contains a count of the total number of
  204                          messages sent over this link.
  205                          */
  206
  207           %K$NSAP(FPTN=LADR,LVL=2,ADRTYP=NET,STCLASS=STCLASS,LAST=",");
  208                          /*K* LADR - NSAP.
  209                          Network entity title.
  210                          x121/lacs or fep address that our
  211                          network is known as on this link.
  212                          */
  213
  214           %K$NSAP(FPTN=DEST,LVL=2,ADRTYP=NET,STCLASS=STCLASS,LAST=",");
  215                          /*K* DEST - NASP.
  216                          Network entity title.
  217                          x121/lacs of fep address of the
  218                          entity at the distant end point.
  219                          Could be either a full x121 address
  220                          or a link address.
  221                          */
  222           %K$SNPA(FPTN=SNPA,LVL=2,STCLASS=STCLASS,LAST=",");
14:51 JUL 28 '97 KNN_NETWORK_M.:E05SI                                      7    
  223                          /*K* SNPA - Subnetwork point of attachment.
  224                          If this context is for a Link (FLAGS.VIRCIR=0) this
  225                          field is probably the DNIC of an X.121 address.
  226                          If this context is for a virtual circuit this field is
  227                          probably a full X.121 address.
  228                          */
  229            2 CHAN# UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL,
  230                          /*K* CHAN# - UBIN WORD.
  231                          This field is filled in at initialization time
  232                          from FPT_CONNECT.TERMINAL_ID.TERM.CHANNEL.
  233                          It is used to associate a set of virtual circuits
  234                          with a particular link.
  235
  236                          Outbound Class A (CONS) connections can only be
  237                          made on a link and not on a virtual circuit.
  238                          The channel is used to determine the link from
  239                          the virtual circuit. (Dan, what does this mean?)
  240                          */
  241            2 BLKCNT UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL,
  242                     /*K* BLKCNT - number of block functions received on this link  */
  243            2 UNBLKCNT UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL;
  244                /*K* UNBLKCNT - number of unblock functions received on this link   */
  245
  246      %MEND;
  247
  248
  249
  250      /*F* NAME: KNN$OSIROUTE
  251      The KNN$OSIROUTE macro in file KNN_NETWORK_M generates
  252      a structure for the OSI Route Table on both the Host
  253      and the Fep.
  254
  255      The KNN$OSIROUTE structure contains:
  256      */
  257      %MACRO KNN$OSIROUTE(FPTN=KNN$OSIROUTE,STCLASS=BASED,LVL=1,LAST=";",LEN=0,
  258                          ADRTYP(X121=1,FEP=2,LACS=3,NET=4)=4);
  259       %LSET LISTDIR='0'B;
14:51 JUL 28 '97 KNN_NETWORK_M.:E05SI                                      8    
  260       %LSET LISTEXP='1'B;
  261       %LSET LISTCOM='0'B;
  262       %LSET LISTSUB='1'B;
  263       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  264       %IF (SUBSTR(STR,0,6)='STATIC') OR
  265       (SUBSTR(STR,0,8)='CONSTANT') OR
  266       (SUBSTR(STR,0,3)='EXT');
  267       %LSET INIT=CHARTEXT(' INIT');
  268       %LSET ENIT=CHARTEXT(' ');
  269       %ELSE;
  270       %LSET INIT=CHARTEXT('/*');
  271       %LSET ENIT=CHARTEXT('*/');
  272       %ENDIF;
  273
  274      %IF LVL=1 ;
  275      DCL 1 FPTN STCLASS ALIGNED,
  276      %ELSE;
  277             %(LVL) FPTN CALIGNED,
  278      %ENDIF;
  279
  280      %K$NSAP(FPTN=NSAP,ADRTYP=ADRTYP,STCLASS=STCLASS,LVL=2,LAST=",");
  281      /*K* NSAP - STRUCTURE.
  282           The NSAP field represents the network entity title for a particular network.
  283           If the type field is lnsap then nsap represents an address by which we
  284           are known to the outside world.  If the type field is rnsap then this
  285           field represents the network address of an external entity.*/
  286
  287      %K$SNPA(FPTN=SNPA,STCLASS=STCLASS,LVL=2,LAST=",");
  288      /*K* SNPA - STRUCTURE.
  289           The SubNetwork Point of Attachment for this network entity title.
  290           Not valid if type is LNSAP.                                    */
  291
  292      %K$NSAP(FPTN=LNSAP,ADRTYP=NET,STCLASS=STCLASS,LVL=2,LAST=",");
  293                /*K* LNSAP - if the type field is RNSAP, then this field represents
  294                            the network entity title by which we are known to the
  295                            address in the nsap field above.  If the type is LNSAP
  296                            then this field is not valid.                           */
14:51 JUL 28 '97 KNN_NETWORK_M.:E05SI                                      9    
  297
  298
  299      %IF NOT (MODE_FEP);
  300      %(LVL+1) * BIT(1) UNAL %INIT('0'B)%ENIT,
  301      %ENDIF;
  302
  303      %(LVL+1) NS_TYPE UBIN(4) UNAL %INIT(0)%ENIT,
  304                          /*K* NS_TYPE - UBIN(4).
  305                          The NSAP Type field indicates if this
  306                          is a local or remote NSAP.
  307
  308                          .XEQ K_ADDRESS_M K_TYPE_equ VALUES
  309                          */
  310
  311      %(LVL+1) NW_TYPE UBIN(4) UNAL %INIT(0)%ENIT,
  312                          /*K* NW_TYPE - UBIN(4).
  313                          The Network Type field indicates what type
  314                          of network is used to reach the target NSAP.
  315
  316                          .XEQ K_ADDRESS_M K_NWTYPE_equ VALUES
  317                          */
  318
  319        %(LVL+1) LINK(0:0),
  320                          /*K* LINK.. - ARRAY.
  321                          .XEQ KNN_NETWORK_M KNN$ROUTE LINK
  322                          */
  323
  324           %IF NOT (MODE_FEP);
  325              %(LVL+2) * BIT(1) UNAL %INIT('0'B)%ENIT,
  326           %ENDIF;
  327           %(LVL+2) ACTIVE BIT(1) UNAL %INIT('0'B)%ENIT,
  328       /*K* ACTIVE - is this link active?  used as a flow control bit when the link level
  329           becomes congested.
  330         */
  331
  332           %(LVL+2) * BIT(7) UNAL %INIT('0'B)%ENIT,
  333
14:51 JUL 28 '97 KNN_NETWORK_M.:E05SI                                      10   
  334           %(LVL+2) FEP# UBIN BYTE UNAL %INIT(0)%ENIT,
  335                     /*K* FEP# - FEP number thru which this address is to be routed.
  336                                 in the case of a local NSAP, FEP# is used in combination with
  337                                 the HOST# to find the correct transport context.  For
  338                                 a remote NSAP, indicates the boundry node to the real
  339                                 subnetwork.
  340                             */
  341
  342           %(LVL+2) HOST# UBIN BYTE UNAL %INIT(0)%ENIT,
  343                          /*K* HOST# - Host node# to which the address in connected.
  344                                       Also see FEP#.
  345                                 */
  346
  347           %(LVL+2) QOS UBIN BYTE UNAL %INIT(0)%ENIT,
  348       /*K* QOS - quality of service available on this link.  In the case of multiple
  349           link connectes the best can be derived from the summation of the
  350           qos to the node plus this value.
  351        */
  352
  353           %(LVL+2) * UBIN(%(27-3*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT,
  354
  355           %(LVL+2) MSGS_IN UBIN(%(36-4*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT,
  356       /*K* MSGS_IN - count of the number of messages received from this address on this
  357              link                                                                  */
  358
  359           %(LVL+2) MSGS_OUT UBIN(%(36-4*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT LAST
  360       /*K* MSGS_OUT - count of the number of messages sent/passed through this node/link
  361              destined for this address*/
  362      %MEND;

