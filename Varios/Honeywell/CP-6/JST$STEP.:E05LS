VERSION E05

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:1    
        1        1        /*M*   JST$STEP   Job Step Execution Control       */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0  */
        8        8
        9        9        JST$CPEXIT: PROC(NAME$,ACCT$,PASS$,PSN$,DEBUG$);
       10       10
       11       11                                                /* Input Parameters                   */
       12       12    1   DCL NAME$ PTR;
       13       13    1   DCL ACCT$ PTR;
       14       14    1   DCL PASS$ PTR;
       15       15    1   DCL PSN$ PTR;
       16       16    1   DCL DEBUG$ PTR;
       17       17
       18       18                                                /* AUTO Storage                       */
       19       19    1   DCL ASL$ PTR;
       20       20    1   DCL ASP$ PTR;
       21       21    1   DCL I SBIN;
       22       22    1   DCL NOOVER UBIN WORD;
       23       23    1   DCL SYSFLAG BIT(1);
       24       24    1   DCL SHARED_FLAG BIT(1);
       25       25    1   DCL TEMP1 SBIN;
       26       26    1   DCL TEMP2 SBIN;
       27       27    1   DCL TEMP3 SBIN;
       28       28    1   DCL ACCT_TYP REDEF TEMP3 UBIN BYTE;
       29       29    1   DCL 1 TEMP3_PTR REDEF TEMP3,
       30       30    1         2 * BIT(24),
       31       31    1         2 SEGID BIT(12);
       32       32    1   DCL TEMP3$ REDEF TEMP3 PTR;
       33       33    1   DCL MODTIME UBIN;
       34       34    1   DCL ERR UBIN;
       35       35    1   DCL TCBSZ UBIN;
       36       36    1   DCL INIT_ROSIZE UBIN;
       37       37    1   DCL ROSZ UBIN;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:2    
       38       38    1   DCL SEGSIZE UBIN;
       39       39    1   DCL RECSIZE UBIN;
       40       40    1   DCL PAGES SBIN;
       41       41    1   DCL LPTR$ PTR;
       42       42    1   DCL PNUM UBIN;
       43       43    1   DCL PTYPE BIT(18);
       44       44    1   DCL DSPTR$ PTR;
       45       45    1   DCL TPTR$ PTR;
       46       46    1   DCL LMDCB$ PTR;
       47       47    1   DCL PROC$ PTR;
       48       48    1   DCL ECC UBIN(36);                       /*Following used for deltago          */
       49       49    1   DCL 1 ECP,                              /* Fixed end of frame                 */
       50       50    1         2 ECCS UBIN(36),                  /* Ecc sub-code                       */
       51       51    1         2 EID UBIN(36),                   /* Event id                           */
       52       52    1         2 JERR BIT(36),                   /* JIT.ERR                            */
       53       53    1         2 P# UBIN(36);                    /* # of parameters                    */
       54       54        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:3    
       55       55
       56       56                                                /*  EXTERNAL ROUTINES                 */
       57       57    1   DCL JSD$DELUSR ENTRY;
       58       58    1   DCL JSE$ABORTM ENTRY;
       59       59    1   DCL JSF$CLSDCBS ENTRY;             /* Routine to close all dcbs except M$UC   */
       60       60    1   DCL JSU$RSTLMS ENTRY;              /* Routine to reset jit memory delimiters  */
       61       61    1   DCL JSU$RELMEM ENTRY(1);           /* Routine to free isr & data seg pages    */
       62       62    1   DCL JSA$ASL ENTRY(1) ALTRET;
       63       63    1   DCL JSA$CLIB ENTRY(1) ALTRET;
       64       64    1   DCL JSA$DB ENTRY(1) ALTRET;
       65       65    1   DCL JSA$GETTCB ENTRY(1) ALTRET;
       66       66    1   DCL JSA$RUNDSPC ENTRY(2);
       67       67    1   DCL JSA$MAP_DATASEGS ENTRY(2) ALTRET;
       68       68    1   DCL JSA$INSERTPROC ENTRY(5) ALTRET;
       69       69    1   DCL JSA$FINDSSP ENTRY(5) ALTRET;
       70       70    1   DCL JSA$FINDAUTO ENTRY(5) ALTRET;
       71       71    1   DCL JSU$RELFSEG ENTRY;                  /* Routine to free buffer segment     */
       72       72    1   DCL JSU$SP_GETFREE ENTRY(1) ALTRET;
       73       73    1   DCL JSU$GRAB_OLD ENTRY(1) ALTRET;
       74       74    1   DCL JSU$WSTAR ENTRY(1);
       75       75    1   DCL JSF$OPENLM ENTRY(1) ALTRET;         /* Routine to open M$LM               */
       76       76    1   DCL JSF$CLSLM ENTRY;                    /* Routine to close M$LM              */
       77       77    1   DCL JSS$INITSS ENTRY(2);                /* Routine to initialize ss frame     */
       78       78    1   DCL JSF$READ ENTRY(6) ALTRET;           /* Reads a record from run unit       */
       79       79    1   DCL JSF$READ_DS ENTRY(6) ALTRET;        /* Reads a record from run unit       */
       80       80    1   DCL JSF$DCBCHK ENTRY(1) ALTRET;         /* Routine to validate dcbs           */
       81       81    1   DCL FMR$SLIDE ENTRY(3);
       82       82    1   DCL MMG$SGVP ENTRY(5) ALTRET;           /* Seg-relative get virtual page      */
       83       83    1   DCL MME$WFVP ENTRY(4) ALTRET;           /* Wsq-relative free virtual page     */
       84       84    1   DCL MME$WGVP ENTRY(4) ALTRET;           /* Wsq-relative get virtual page      */
       85       85    1   DCL MMH$GDS ENTRY(5) ALTRET;
       86       86    1   DCL MMH$SMPRT ENTRY(5) ALTRET;
       87       87    1   DCL SSR$REG ENTRY(3) ALTRET;            /* Report event and give up           */
       88       88    1   DCL SSR$RUE ENTRY(4);
       89       89    1   DCL SSS$CACHE ENTRY;
       90       90    1   DCL SSS$CACHEBP ENTRY;
       91       91    1   DCL UDB$AUTO ENTRY;                     /* Reset auto & call SSS$SEXIT        */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:4    
       92       92    1   DCL SSU$DELTAGO ENTRY(3);          /* Routine to go to associated debugger    */
       93       93    1   DCL SSC$ACPENT ENTRY;                   /* Routine to give ctrl to cp         */
       94       94    1   DCL SSC$MON ENTRY;                      /* Set accnt'g mode to monitor xeq*/
       95       95    1   DCL SSC$SERV ENTRY;                     /* Set accnt'g mode to user service*/
       96       96    1   DCL SSQ$NUQUAN ENTRY ALTRET;            /* Give user new quantum accnt'g      */
       97       97    1   DCL FMM$ASSMRG ENTRY;                   /* Routine to merge assigns           */
       98       98    1   DCL FMF$TRUNCM ENTRY(1);
       99       99    1   DCL JSS$BACKSS ENTRY;
      100      100    1   DCL JSN$LTRAS ENTRY(1);
      101      101    1   DCL UDN$MAGIC ENTRY;
      102      102    1   DCL UDN$MAGICSS ENTRY;
      103      103    1   DCL UMD$CHKOPN ENTRY ALTRET;
      104      104    1   DCL UMD$CLSDRIB ENTRY ALTRET;
      105      105    1   DCL JSR$RUNDOWN ENTRY ALTRET;
      106      106    1   DCL SSS$SYSTIME ENTRY(1);
      107      107    1   DCL M$MLIMIT ENTRY(1) ALTRET;
      108      108
      109      109        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:5    
      110      110
      111      111        /* System string substitution and macro definitions */
      112      112
      113      113        %INCLUDE B$SS;
      114      292        %INCLUDE B_MACROS_C;                    /* General-purpose macros             */
      115      403        %INCLUDE B_SEGIDS_C;                    /* System segid definitions           */
      116      942        %INCLUDE HF_LOCK_C;
      117      956        %INCLUDE HF_DATA_R;
      118      999        %INCLUDE J_ERRORS_C;                    /* Execution control error mnemonics  */
      119     1086        %INCLUDE F_ERRORS_C;
      120     1326        %INCLUDE FR_ERRORS_C;
      121     1357        %INCLUDE J_ERRSET_C;                    /* Error-code-setting macros          */
      122     1377        %INCLUDE SS_SCHED_C;                    /* Scheduler event definitions        */
      123     1610        %INCLUDE CP_6_SUBS;                     /* File mgmt string substitutions     */
      124     2150        %INCLUDE FM$GRAN;
      125     2219        %FM$GRAN;
      126     2223
      127     2224
      128     2225        /* External data */
      129     2226    1   DCL M$LM DCB;
      130     2227
      131     2228
      132     2229        %INCLUDE JS_CNTRL_R;
      133     2263    1   DCL B$M$LM$ PTR SYMREF READONLY;
      134     2264    1   DCL B$ROSEG$ PTR SYMREF READONLY;
      135     2265    1   DCL B$SBUF1$ PTR SYMREF READONLY;
      136     2266    1   DCL B$SDS0$ PTR SYMREF READONLY;
      137     2267    1   DCL B$SDS1$ PTR SYMREF READONLY;
      138     2268    1   DCL B$JIT$ PTR SYMREF READONLY;
      139     2269    1   DCL B$USERLS$ PTR SYMREF READONLY;
      140     2270    1   DCL B$CPLS$ PTR SYMREF READONLY;
      141     2271    1   DCL B$DBLS$ PTR SYMREF READONLY;
      142     2272    1   DCL B$USERIS$ PTR SYMREF READONLY;
      143     2273    1   DCL B$UPT$ PTR SYMREF READONLY;
      144     2274    1   DCL B$PPUT$ PTR SYMREF READONLY;
      145     2275    1   DCL B$LS$ PTR SYMREF READONLY;
      146     2276    1   DCL B$MISC2$ PTR SYMREF READONLY;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:6    
      147     2277    1   DCL B$IPHYMAP$ PTR SYMREF READONLY;
      148     2278
      149     2279    1   DCL ES_PRIVMASK BIT(36) SYMREF;
      150     2280    1   DCL FR_SUMX SBIN WORD SYMREF;
      151     2281    1   DCL FR_SUNM(0:0) CHAR(8) SYMREF;
      152     2282
      153     2283    1   DCL J_PLOCK SYMREF BIT(72) DALIGNED;
      154     2284    1   DCL J_SYSTXT CHAR(8) SYMREF READONLY;
      155     2285    1   DCL J_SYS$ PTR SYMREF READONLY;
      156     2286    1   DCL 1 J_LOGON SYMREF READONLY,
      157     2287    1         2 CNT UBIN(9) UNAL,
      158     2288    1         2 NAME CHAR(7) UNAL;
      159     2289
      160     2290        %INCLUDE B$P;
      161     2374        %INCLUDE B_MAGIC_C;
      162     2492        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
      163     2585
      164     2586        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:7    
      165     2587        /* Based structures */
      166     2588
      167     2589        %INCLUDE B$JIT;
      168     3192        %INCLUDE B$ROSEG;                       /* Read-only segment definitions      */
      169     3255        %INCLUDE B$USER;                        /* User table definitions             */
      170     3471        %B$USERREFS;
      171     3475        %INCLUDE B_ULSMAC_C;
      172     4584        %INCLUDE B_MLSMAC_C;
      173     5526        %B_USRULS (FPTN=B$ULNK,STCLASS=BASED);
      174     5725        %B_MLS(FPTN=B$MLS,STCLASS=BASED);
      175     6540        %INCLUDE F$DCB;                         /* Based dcb definition               */
      176     6589        %INCLUDE F_CP6;
      177     7614        %FPT_RESCTL (FPTN=FPT$RESCTL,STCLASS="BASED(TPTR$)");
      178     7631        %VLP_PSEUDO (FPTN=VLP$PS,STCLASS="BASED(LPTR$)",N=1);
      179     7647        %FPT_RESCTL (FPTN=J_FPT_RESCTL,STCLASS=SYMREF);
      180     7664
      181     7665        %INCLUDE B$OBJECT_C;                    /* Based definition of ru head record */
      182    11095        %B$RECORDSUBS;
      183    11123        %INCLUDE B$MAP;
      184    11222    1   DCL 1 B$TCB DALIGNED BASED,
      185    11223    1         2 ALT$,                           /* Altret frame pointer               */
      186    11224    1           3 OFFSET UBIN(18) UNAL,
      187    11225    1           3 * UBIN(6) UNAL,
      188    11226    1           3 SID BIT(12) UNAL,
      189    11227    1         2 STK$,                           /* Tcb frame pointer                  */
      190    11228    1           3 OFFSET UBIN(18) UNAL,
      191    11229    1           3 * UBIN(6) UNAL,
      192    11230    1           3 SID BIT(12) UNAL,
      193    11231    1         2 TCBAVSZ UBIN(18) UNAL,          /* Avail tcb space                    */
      194    11232    1         2 CURSZ UBIN(18) UNAL,            /* Current tcb frame size             */
      195    11233    1         2 * UBIN(36),                     /* Filler to keep frames daligned     */
      196    11234    1         2 ALTFRM,                         /* Altret frame space                 */
      197    11235    1           3 UNUSED SBIN HALF UNAL,
      198    11236    1           3 CODE SBIN HALF UNAL,
      199    11237    1           3 WORDS(0:66) UBIN(36);
      200    11238    1   DCL B$PTR PTR BASED;
      201    11239    1   DCL DCB$(0:0) PTR BASED ALIGNED;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:8    
      202    11240    1   DCL DCB_WORD(0:0) UBIN BASED ALIGNED;
      203    11241        %INCLUDE B_UHJMAC_C;
      204    11570        %B_USDS (FPTN=B$SDS,STCLASS=BASED);
      205    11622    1   DCL B$DESCR BIT(72) BASED DALIGNED;
      206    11623    1   DCL B$DWTXT CHAR(8) BASED ALIGNED;
      207    11624    1   DCL B$TXT6 CHAR(6) BASED ALIGNED;
      208    11625        %T01DESCR (NAME=B$$DESCR);
      209    11633        %INCLUDE MM_DATA_R;                /* This is down here cause of its %subs    */
      210    12153
      211    12154        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:9    
      212    12155        /* To set JIT.ERR */
      213    12156        %INCLUDE UD_SEV_C;
      214    12170        %SUB FCG#='1223'O;
      215    12171        %SUB MID# = '24'O;
      216    12172        %ERRCODE (NAME=EBADFNME,COD#=%E$BADFNME);
      217    12180        %ERRCODE (NAME=EBADSSP,COD#=%E$BADSSP);
      218    12188        %ERRCODE (NAME=EBADDBUGR,COD#=%E$BADDBUGR);
      219    12196        %ERRCODE (NAME=EPROGTOOBIG,COD#=%E$PROGTOOBIG);
      220    12204        %ERRCODE (NAME=ENOSHRLIB,COD#=%E$NOSHRLIB);
      221    12212        %ERRCODE (NAME=ENOTANRU,COD#=%E$NOTANRU);
      222    12220        %ERRCODE (NAME=ENOSUCHASL,COD#=%E$NOSUCHASL);
      223    12228        %ERRCODE (NAME=ELDLNKSSP,COD#=%E$LDLNKSSP);
      224    12236        %ERRCODE (NAME=EBADLOGON,COD#=%E$PROCACCESS);
      225    12244        %ERRCODE (NAME=ERESTRICTED,COD#=%E$RESTRICTED);
      226    12252        %ERRCODE (NAME=ENSTDINVOC,COD#=%E$NSTDINVOC);
      227    12260        %ERRCODE (NAME=EBADHEAD,COD#=%E$BADHEAD);
      228    12268        %ERRCODE (NAME=EHALFHEAD,COD#=%E$HALFHEAD);
      229    12276        %ERRCODE (NAME=EBADROSEG,COD#=%E$BADROSEG);
      230    12284        %ERRCODE (NAME=ETCBSZBAD,COD#=%E$TCBSZBAD);
      231    12292        %ERRCODE (NAME=EDCBSZBAD,COD#=%E$DCBSZBAD);
      232    12300        %ERRCODE (NAME=EHALFTREE,COD#=%E$HALFTREE);
      233    12308        %ERRCODE (NAME=EDEBUGXONLY,COD#=%E$DEBUGXONLY);
      234    12316        %ERRCODE (NAME=EBSUNM,COD#=%E$BSUNM);
      235    12324        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:10   
      236    12325        /* Invocations of system macros */
      237    12326
      238    12327    1   DCL 1 B$TEXTC BASED(NAME$),
      239    12328    1         2 COUNT UBIN BYTE CALIGNED,
      240    12329    1         2 TEXT CHAR(31);
      241    12330        %B$HEAD;
      242    12530        %B$TREE_TABLE(HDR_NAME=B$TREEHDR,NODE_NAME=B$NODE);
      243    12588
      244    12589        %RU_FLAVORS;
      245    12595
      246    12596        /* The following is from the B$OBJECT_C source file for B03.
      247    12597           The words that are not the same in the old and new HEAD
      248    12598           record format are munged by STEP to the space in SBUF1
      249    12599           following the head record that is read from the run-unit.
      250    12600           This allows us to be concerned with the HEAD record change
      251    12601           in one centralized place.
      252    12602        */
      253    12603    1   DCL 1 B$OLDHEAD BASED ALIGNED,
      254    12604    1         2 PRIV BIT(36),
      255    12605    1         2 VPPGS UBIN BYTE UNAL,
      256    12606    1         2 VDPGS UBIN BYTE UNAL,
      257    12607    1         2 S BIT(1) UNAL,
      258    12608    1         2 LIB BIT(1) UNAL,
      259    12609    1         2 ASL BIT(1) UNAL,
      260    12610    1         2 OVRL BIT(1) UNAL,
      261    12611    1         2 PROCACC BIT(1) UNAL,
      262    12612    1         2 NOCHGPMEM BIT(1) UNAL,
      263    12613    1         2 PROCSURCHG BIT(1) UNAL,
      264    12614    1         2 RESTPROC BIT(1) UNAL,
      265    12615    1         2 STRONG_LOCK BIT(1) UNAL,
      266    12616    1         2 SEV UBIN BYTE UNAL,
      267    12617    1         2 RDATA UBIN HALF UNAL,
      268    12618    1         2 RPROC UBIN HALF UNAL,
      269    12619    1         2 BIAS UBIN HALF UNAL,
      270    12620    1         2 START UBIN HALF UNAL,
      271    12621    1         2 UDCBNUM UBIN HALF UNAL,
      272    12622    1         2 DCBRES UBIN HALF UNAL,
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:11   
      273    12623    1         2 TREEDISP UBIN HALF UNAL,
      274    12624    1         2 TCBSIZE UBIN HALF UNAL,
      275    12625    1         2 PRECSIZE UBIN HALF UNAL,
      276    12626    1         2 NRECSIZE UBIN HALF UNAL,
      277    12627    1         2 EPRECSIZE UBIN HALF UNAL,
      278    12628    1         2 EDRECSIZE UBIN HALF UNAL,
      279    12629    1         2 SDRECSIZE UBIN HALF UNAL,
      280    12630    1         2 ROSIZE UBIN HALF UNAL,
      281    12631    1         2 VERSION# UBIN BYTE UNAL,
      282    12632    1         2 MAP_BITS_A(0:2) UNAL,
      283    12633    1           3 MULTIPLE BIT(1) UNAL,
      284    12634    1           3 CON BIT(1) UNAL,
      285    12635    1           3 PRIMARY BIT(1) UNAL,
      286    12636    1           3 SECONDARY BIT(1) UNAL,
      287    12637    1         2 * BIT(8)  UNAL,
      288    12638    1         2 NSTDINVOC BIT(1) UNAL,
      289    12639    1         2 REMOVE_ENTDEF BIT(1) UNAL,
      290    12640    1         2 REMOVE_SYMDEF BIT(1) UNAL,
      291    12641    1         2 STATS BIT(1) UNAL,
      292    12642    1         2 * BIT(3) UNAL,
      293    12643    1         2 DATA_SEG (0:5),
      294    12644    1           3 SIZ UBIN HALF UNAL,
      295    12645    1           3 * UBIN(9) UNAL,
      296    12646    1           3 PROTECTION UBIN(9) UNAL,
      297    12647    1         2 LOCK(0:71) BIT(1) UNAL,
      298    12648    1         2 FLAVOR UBIN BYTE UNAL,
      299    12649    1         2 * UBIN(27) UNAL,
      300    12650    1         2 * (0:4) UBIN WORD UNAL,
      301    12651    1         2 LIBNAME,
      302    12652    1           3 CNT UBIN BYTE UNAL,
      303    12653    1           3 TXT CHAR(31) UNAL,
      304    12654    1         2 ASLNAME,
      305    12655    1           3 CNT UBIN BYTE UNAL,
      306    12656    1           3 TXT CHAR(31) UNAL;
      307    12657
      308    12658        /* Some handy-dandy, typing-saving string substitutions */
      309    12659        %SUB   B$JIT=B$JIT$->B$JIT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:12   
      310    12660        %SUB   B$ROSEG=B$ROSEG$->B$ROSEG;
      311    12661        %SUB   B$HEAD=B$SBUF1$->B$HEAD;
      312    12662        %SUB   B$SS=B_MPT.SS$->B$SS;
      313    12663        %SUB   B_P=B$P$->B$P;
      314    12664        %SUB   B$LOOKUP=B$LOOKUP$->B$LOOKUP;
      315    12665        %SUB   B$TREEHDR=B$ROSEG$->B$ROSEG.TREE$->B$TREEHDR;
      316    12666        %SUB   B$NODE=TPTR$->B$NODE;
      317    12667        %SUB   MM$PPUT=B$PPUT$->MM$PPUT;
      318    12668        %SUB   B$UPT=B$UPT$->B$MAP;
      319    12669        %SUB   B$U=S$CU$->B$U;
      320    12670
      321    12671        %LIST;
      322    12672        %INIT_RO_SIZE;                          /* Get 'INITROSIZE' from B$ROSEG      */
             12673        %SUB   INITROSIZE ="(POFFW(B$ROSEG$->B$ROSEG.DCBPTR$,B$ROSEG$)+%M$1STDCB#)";
      323    12675        %PLIST;
      324    12676
      325    12677        %INCLUDE UE_CP6;
      326    13368        %SUB_EXC;
      327    13415        %SUB_ECCDELTA;
      328    13452        %EQU_TCB_SZ;
      329    13456
      330    13457        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:13   
      331    13458        /*************************************************************
      332    13459         *                                                           *
      333    13460         *                      JST$CPEXIT                           *
      334    13461         *                                                           *
      335    13462         *************************************************************/
      336    13463        /*F*   NAME:   JST$CPEXIT
      337    13464               PURPOSE:  To associate a new user with his Command Processor.
      338    13465                         Called by SSQ$QEND when CPIC set in the user's
      339    13466                         flags and ACP = 0.
      340    13467        */
      341    13468    1      CALL UDN$MAGIC;
      342    13469    1      B$U.FLG = B$U.FLG &~ %U_CPIC;
      343    13470                                                /* Reset cp-in-control                */
      344    13471        /* Mark this guy "at job step" for his first excursion thru STEP.  */
      345    13472    1      B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 | %CP_JSTEP#;
      346    13473
      347    13474    1      IF B$JIT.RUNFLAGS = '0'B
      348    13475    1      THEN B$JIT.RUNFLAGS = %RUN_MON#;
      349    13476
      350    13477    1      IF NOT (B$JIT.RUNFLAGS & %RUN_MON#)
      351    13478    1      THEN B$JIT.PRIV.ACTIVE = B$JIT.PRIV.JOB; /* Give current privileges        */
      352    13479
      353    13480    1      CALL JSU$RSTLMS;                     /* Reset jit memory delimiters        */
      354    13481        /* Fall through to JST$GETPROC processing */
      355    13482
      356    13483        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:14   
      357    13484        /*************************************************************
      358    13485         *                                                           *
      359    13486         *                      JST$GETPROG                          *
      360    13487         *                                                           *
      361    13488         *************************************************************/
      362    13489        /*F*   NAME:   JST$GETPROG
      363    13490               PURPOSE: To associate any type or combination of shared or
      364    13491                       unshared programs with a user.
      365    13492        */
      366    13493
      367    13494    1   JST$GETPROG: ENTRY(NAME$,ACCT$,PASS$,PSN$,DEBUG$);
      368    13495
      369    13496    1      B$U.FLG = B$U.FLG | %U_STIP;
      370    13497    1      CALL UMD$CLSDRIB;
      371    13498
      372    13499        /* If NAME$ is null, assume we're going for a debugger and not at
      373    13500           Job step. If this assumption is wrong, we'll eventually error.
      374    13501           If neither NAME or DEBUG specified, exit immediately to ABORTM.
      375    13502        */
      376    13503    1      IF NAME$ = ADDR(NIL)
      377    13504    1      THEN NAME$ = DEBUG$;
      378    13505    1      IF NAME$ = ADDR(NIL)
      379    13506    2      THEN DO;
      380    13507    2           B$JIT.ERR=EBADFNME;
      381    13508    2           CALL JSE$ABORTM;
      382    13509    2           END;
      383    13510        /*E*    ERROR:  JST-E$BADFNME-E
      384    13511                MESSAGE: Invalid run unit name% %U1%% %FN%
      385    13512        */
      386    13513
      387    13514        /* Set SYSFLAG if run-unit is from :SYS.
      388    13515        */
      389    13516    1      IF ACCT$->B$DWTXT = J_SYSTXT
      390    13517    1      THEN SYSFLAG = '1'B;
      391    13518    1      ELSE SYSFLAG = '0'B;
      392    13519    1      SHARED_FLAG = %TRUE;
      393    13520    1      IF SUBSTR (NAME$ -> B$TEXTC.TEXT , 0 , 1) = '*'
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:15   
      394    13521    2      THEN DO;
      395    13522    2           SYSFLAG = %FALSE;
      396    13523    2           SHARED_FLAG = %FALSE;
      397    13524    2           END;
      398    13525
      399    13526        /* Only compute INIT_ROSIZE once.
      400    13527        */
      401    13528    1      INIT_ROSIZE = INITROSIZE%;
      402    13529
      403    13530        /* See if the program is special shared.
      404    13531        */
      405    13532    1      PTYPE='0'B;
      406    13533    1      PNUM = 0;
      407    13534    1      ERR = 0;
      408    13535    1      IF SYSFLAG
      409    13536    1      THEN
      410    13537    1           CALL JSA$FINDSSP (NAME$,ACCT$,PNUM,PTYPE,ERR);
      411    13538
      412    13539        /* If the cp's dsegs are there, we never decremented B$P.UC in JSA$RUNDSSP */
      413    13540    1      IF PTYPE&%P_CP AND B$UPT.RPN(%CPDSEGLO) ~= %FPMC THEN GOTO NEVER_DECRD;
      414    13541           %LOCK (G=J_PLOCK);
      415    13544    1      B_P.UC(PNUM) = B_P.UC(PNUM) + 1;     /* LOCK IT                            */
      416    13545           %UNLOCK (G=J_PLOCK);
      417    13548    1   NEVER_DECRD:;
      418    13549
      419    13550        /* Set job peak for temp disk (even when on the way to the CP).
      420    13551        */
      421    13552    1      IF B$JIT.STMPDPPK > B$JIT.JTMPDPPK THEN B$JIT.JTMPDPPK=B$JIT.STMPDPPK;
      422    13553    1      IF B$JIT.FBUL < 5 THEN B$JIT.FBUL = 5;
      423    13554
      424    13555        /* If this is the 1st CPEXIT and is not to another command proc-
      425    13556           essor, then do a rundown to get rid of the CP's privileges.
      426    13557        */
      427    13558    1      IF (B$JIT.STEPS = 0)
      428    13559    1        AND (B$JIT.CPFLAGS1 & %CP_JSTEP#)
      429    13560    1        AND NOT (PTYPE & %P_CP)
      430    13561    1      THEN CALL JSR$RUNDOWN;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:16   
      431    13562
      432    13563        /*
      433    13564           If this is to be the final exit to a Logoff Command Processor,
      434    13565           enforce it now.
      435    13566        */
      436    13567    1      IF (B$JIT.JUNK & %JJ_LOGOFF#)
      437    13568    1        AND NOT (PTYPE & %P_CP)
      438    13569    2      THEN DO;
      439    13570    2           CALL JSR$RUNDOWN;
      440    13571    2           CALL JSD$DELUSR;
      441    13572    2           END;
      442    13573        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:17   
      443    13574        /*************************************************************
      444    13575         *                                                           *
      445    13576         *     DO IF AUTO SHARED PROCESSOR OR FETCHABLE RUN UNIT     *
      446    13577         *                                                           *
      447    13578         *************************************************************/
      448    13579        /* Here begins a fairly large IF...THEN...ELSE clause:  it performs
      449    13580           some decidedly different processing based on whether the thing
      450    13581           being accessed is special shared, or an
      451    13582           auto shared or unshared run unit.
      452    13583        */
      453    13584
      454    13585        /* The first half of this clause handles auto shared or
      455    13586           unshared run-units.
      456    13587        */
      457    13588    1      IF (PNUM = 0)
      458    13589    2      THEN DO;
      459    13590
      460    13591        /*  If we are not at Job Step, the user must have thought he
      461    13592            was asking for a debugger.  Probably the command processor
      462    13593            neglected to do a 'QUIT'.  Exit immediately to ABORTM.
      463    13594        */
      464    13595    2           IF NOT (B$JIT.RUNFLAGS & %RUN_MON#)
      465    13596    3           THEN DO;
      466    13597    3                B$JIT.ERR=EBADDBUGR;
      467    13598    3                GOTO SSP_ERR;
      468    13599    3                END;
      469    13600        /*E*    ERROR:  JST-E$BADDBUGR-E
      470    13601                MESSAGE: Invalid Debugger name.
      471    13602        */
      472    13603
      473    13604        /* Reset Processor normal exit in case the CP forgot to do so.
      474    13605        */
      475    13606    2           B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 &~ %CP_EXIT#);
      476    13607
      477    13608        /* Open M$LM to point to the processor/user program in question.
      478    13609        */
      479    13610    2           CALL JSF$CLSLM;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:18   
      480    13611    2           LMDCB$ = B$M$LM$;
      481    13612    2           LMDCB$->F$DCB.NAME.L = NAME$->B$TEXTC.COUNT;
      482    13613    2           LMDCB$->F$DCB.NAME.C = SUBSTR(NAME$->B$TEXTC.TEXT,0,LMDCB$->F$DCB.NAME.L);
      483    13614    2           LMDCB$->F$DCB.ACCT = ACCT$->B$DWTXT;
      484    13615    2           IF PASS$ = ADDR(NIL)
      485    13616    2           THEN LMDCB$->F$DCB.PASS    = ' ';
      486    13617    2           ELSE LMDCB$->F$DCB.PASS    = PASS$->B$DWTXT;
      487    13618    2           IF PSN$ = ADDR(NIL)
      488    13619    2           THEN LMDCB$->F$DCB.PSN = ' ';
      489    13620    2           ELSE LMDCB$->F$DCB.PSN = PSN$->B$TXT6;
      490    13621    2           LMDCB$->F$DCB.PASSF = '0'B;
      491    13622    2           LMDCB$->F$DCB.RES = ' ';
      492    13623    2           LMDCB$->F$DCB.WSN = ' ';
      493    13624    2           LMDCB$->F$DCB.FUN = %IN#;
      494    13625    2           LMDCB$->F$DCB.ASN = %FILE#;
      495    13626    2           LMDCB$->F$DCB.WSR = 0;
      496    13627    2           IF (B$JIT.JUNK & %JJ_MONLINK#) THEN
      497    13628    2                LMDCB$->F$DCB.WSR = 1;
      498    13629
      499    13630    2           CALL JSF$OPENLM(ERR) ALTRET(ASP_ERR);
      500    13631    2           MODTIME = LMDCB$->F$DCB.EXPIRE;
      501    13632
      502    13633        /* Begin our security checks by seeing if the potential run unit
      503    13634           is a keyed file.
      504    13635        */
      505    13636    2           IF LMDCB$->F$DCB.ORG ~= %KEYED#
      506    13637    3           THEN DO;
      507    13638    3   ERR_217:
      508    13639    3                B$JIT.ERR=ENOTANRU;
      509    13640    3                GOTO ASP_ERR0;
      510    13641    3                END;
      511    13642        /*E*    ERROR:  JST-E$NOTANRU-E
      512    13643                MESSAGE: File% %U1%% %FN% is not a valid run unit.
      513    13644        */
      514    13645
      515    13646        /* Get sbuf1 for reading run unit head record.
      516    13647        */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:19   
      517    13648    2           CALL MME$WGVP(%USERWSQ,%SBUF1PG,BITBIN(%PGINMEM|%PGWRITE|%PGIOM),
      518    13649    2             ERR) ALTRET(ASP_ERR);
      519    13650
      520    13651        /* Now, read the HEAD record.
      521    13652        */
      522    13653    2           CALL JSF$READ(%TYPHEAD,SIZEW(B$HEAD),SIZEW(B$HEAD),B$SBUF1$,
      523    13654    2             0,ERR) ALTRET(ERR_217);
      524    13655
      525    13656        /* Validate the HEAD record size
      526    13657        */
      527    13658    2           IF LMDCB$->F$DCB.ARS ~= 4 * SIZEW(B$HEAD)
      528    13659    3           THEN DO;
      529    13660    3                B$JIT.ERR=EHALFHEAD;
      530    13661    3                GOTO ASP_ERR0;
      531    13662    3                END;
      532    13663        /*E*    ERROR:  JST-E$HALFHEAD-E
      533    13664               MESSAGE: The HEAD record size is invalid for that run unit.
      534    13665        */
      535    13666
      536    13667        /* If there is no Read-only Segment its not a host run-unit
      537    13668        */
      538    13669    2           IF B$HEAD.ROSIZE = 0 THEN GOTO ERR_217;
      539    13670
      540    13671        /* If this is a pre-C00 host run-unit, copy the HEAD record to
      541    13672           another place in SBUF1 and modify the original to look like a
      542    13673           new HEAD record.
      543    13674        */
      544    13675    2           IF B$HEAD.FLAVOR = 0
      545    13676    3           THEN DO;
      546    13677    3                TPTR$ = PINCRW(B$SBUF1$,SIZEW(B$HEAD));
      547    13678    3                TPTR$->B$OLDHEAD = B$HEAD;
      548    13679
      549    13680    3                B$HEAD.VPPGS = TPTR$->B$OLDHEAD.VPPGS;
      550    13681    3                B$HEAD.VDPGS = TPTR$->B$OLDHEAD.VDPGS;
      551    13682    3                B$HEAD.RPROC = TPTR$->B$OLDHEAD.RPROC;
      552    13683    3                B$HEAD.RDATA = TPTR$->B$OLDHEAD.RDATA;
      553    13684    3                B$HEAD.BIAS = TPTR$->B$OLDHEAD.BIAS;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:20   
      554    13685    3                B$HEAD.START = TPTR$->B$OLDHEAD.START;
      555    13686    3                B$HEAD.S = TPTR$->B$OLDHEAD.S;
      556    13687    3                B$HEAD.OVRL = TPTR$->B$OLDHEAD.OVRL;
      557    13688    3                B$HEAD.PROCACC = TPTR$->B$OLDHEAD.PROCACC;
      558    13689    3                B$HEAD.NOCHGPMEM = TPTR$->B$OLDHEAD.NOCHGPMEM;
      559    13690    3                B$HEAD.PROCSURCHG = TPTR$->B$OLDHEAD.PROCSURCHG;
      560    13691    3                B$HEAD.RESTPROC = TPTR$->B$OLDHEAD.RESTPROC;
      561    13692    3                B$HEAD.STRONG_LOCK = TPTR$->B$OLDHEAD.STRONG_LOCK;
      562    13693    3                END;
      563    13694
      564    13695        /* If not an old nor new Host run-unit, abort the job step.
      565    13696        */
      566    13697    2           ELSE IF (B$HEAD.FLAVOR ~= %HOST_RU)
      567    13698    2                THEN GOTO ERR_217;
      568    13699
      569    13700        /* Security check the head record in case the linker messed up.
      570    13701        */
      571    13702    2           IF ((B$HEAD.VPPGS + B$HEAD.VDPGS) > %ISEGSIZ) OR
      572    13703    2             ((B$HEAD.RDATA + B$HEAD.RPROC + B$HEAD.BIAS) > %ISEGSIZ*1024)
      573    13704    3           THEN DO;
      574    13705    3                B$JIT.ERR=EBADHEAD;
      575    13706    3                GOTO ASP_ERR0;
      576    13707    3                END;
      577    13708        /*E*    ERROR:  JST-E$BADHEAD-E
      578    13709                MESSAGE: The Run Unit HEAD record is bad.
      579    13710        */
      580    13711
      581    13712
      582    13713        /* If a pseudo resource is associated with the run-unit,
      583    13714           the pseudo resource name table is searched to determine if
      584    13715           the name is valid and if the user already has acquired the
      585    13716           the number required to execute the run-unit.
      586    13717        */
      587    13718    2           IF B$HEAD.PSEUDO_COUNT ~= 0
      588    13719    3           THEN DO;
      589    13720    4                DO TEMP1=0 TO FR_SUMX;
      590    13721    4                     IF B$HEAD.PSEUDO_TEXT = FR_SUNM(TEMP1)
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:21   
      591    13722    5                     THEN DO;
      592    13723    5                          IF B$JIT.CURSUDO(TEMP1) < B$HEAD.PSEUDO_COUNT
      593    13724    6                          THEN DO;
      594    13725
      595    13726        /* If the user has not yet acquired the number needed, M$LIMIT is
      596    13727           called to acquire those above the number that the user may already
      597    13728           have acquired.  The space in special buffer 1 beyond the Head
      598    13729           record is used to build the resource FPT and the pseudo VLP.
      599    13730        */
      600    13731    6                               TPTR$ = PINCRW(B$SBUF1$,SIZEW(B$HEAD));
      601    13732    6                               LPTR$ = PINCRW(TPTR$,SIZEW(FPT$RESCTL));
      602    13733    6                               FPT$RESCTL = J_FPT_RESCTL;
      603    13734    6                               FPT$RESCTL.V_ = VECTOR(FPT$RESCTL.V);
      604    13735    6                               FPT$RESCTL.PSEUDO_ = VECTOR(VLP$PS);
      605    13736    6                               VLP$PS='0'B;
      606    13737    6                               VLP$PS.NN# = 1;
      607    13738    6                               VLP$PS.PSLIST.PSEUDO#(0) = B$HEAD.PSEUDO_TEXT;
      608    13739    6                               VLP$PS.PSLIST.NUM#(0) =
      609    13740    6                                 B$HEAD.PSEUDO_COUNT - B$JIT.CURSUDO(TEMP1);
      610    13741
      611    13742    6                               CALL M$MLIMIT(FPT$RESCTL) ALTRET(ASP_ERR0);
      612    13743
      613    13744        /* If the pseudo resource is successfully acquired, the name of the
      614    13745           resource and the number acquired are remembered in the JIT.
      615    13746           These pseudo resources will be released when the
      616    13747           program terminates.
      617    13748        */
      618    13749    6                               B$JIT.PSEUDO_TEXT = VLP$PS.PSLIST.PSEUDO#(0);
      619    13750    6                               B$JIT.PSEUDO_COUNT = VLP$PS.PSLIST.NUM#(0);
      620    13751    6                               END/* do if user hasn't acquried resources*/;
      621    13752
      622    13753    5                          GOTO PSEUDO_END;
      623    13754    5                          END/*do if resource name match*/;
      624    13755
      625    13756    4                     END/* do to FR_SUMX*/;
      626    13757    3                B$JIT.ERR = EBSUNM;
      627    13758    3                GOTO ASP_ERR0;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:22   
      628    13759        /*E* ERROR: JST-E$BSUNM-A
      629    13760             MESSAGE: The pseudo resource required by that run-unit does not exist.
      630    13761        */
      631    13762
      632    13763    3   PSEUDO_END:  ;
      633    13764    3                END/*do if pseudo resource in Head*/;
      634    13765
      635    13766
      636    13767        /* Test for execute-only.  Set JIT.JUNK if so.
      637    13768        */
      638    13769    2           IF (LMDCB$->F$DCB.FFLG.EXEC) /*N* OR (B$JIT.JUNK & %JJ_MONLINK#) */
      639    13770    3           THEN DO;
      640    13771    3                B$JIT.JUNK = (B$JIT.JUNK | %JJ_EXONLY#);
      641    13772    3                LMDCB$->F$DCB.FFLG.EXEC='0'B;
      642    13773
      643    13774        /* Dont allow an execute-only run unit to be started under a Debugger.
      644    13775        */
      645    13776    3                IF (DEBUG$ ~= ADDR(NIL))
      646    13777    4                THEN DO;
      647    13778    4                     B$JIT.ERR=EDEBUGXONLY;
      648    13779    4                     GOTO ASP_ERR0;
      649    13780    4                     END;
      650    13781        /*E*    ERROR:  JST-E$DEBUGXONLY-E
      651    13782                MESSAGE: You cannot debug an execute-only run unit.
      652    13783        */
      653    13784
      654    13785        /* In case of M$LINK to execute only, reset dic & dela so it cant
      655    13786           be debugged. These will be reset and delta re-associated on return.
      656    13787           Also, reset the special delta bit in the ECCB descriptor.
      657    13788        */
      658    13789    3                B$U.FLG = B$U.FLG &~(%U_DIC | %U_DELA);
      659    13790    3                B_MPT.LS$->B$ULNK.ECCB.FLGS = B_MPT.LS$->B$ULNK.ECCB.FLGS &~ %DSXXX;
      660    13791    3                B$JIT.JUNK=(B$JIT.JUNK &~ %JJ_UDELTA#);
      661    13792    3                END;
      662    13793
      663    13794        /* Do Job Step specific functions now, if not LINKing.
      664    13795           Reset temp disk peak and memory usage peak values for last step,
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:23   
      665    13796           increment the count of job steps, and reset PNUM counts in the JIT.
      666    13797        */
      667    13798    2           IF NOT(B$JIT.JUNK & %JJ_MLINKIP#)
      668    13799    3           THEN DO;
      669    13800    3                B$JIT.SRESPEAK =0;
      670    13801    3                B$JIT.SPEAK = 0;
      671    13802    3                B$JIT.STMPDPPK = 0;
      672    13803    3                B$JIT.STEPS = B$JIT.STEPS + 1;
      673    13804    3                B$JIT.CURPNUM = 0;
      674    13805    3                B$JIT.HIGHPNUM = 0;
      675    13806
      676    13807        /* Write Step Accounting records to *S if appropriate to do so.
      677    13808        */
      678    13809    3                IF (B$JIT.CPFLAGS1 & %CP_STEPACCT#) OR (B$JIT.SSLEV ~= %AZ_NONE#)
      679    13810    4                THEN DO;
      680    13811    4                     CALL SSC$MON;
      681    13812    4                     CALL SSQ$NUQUAN;
      682    13813    4                     CALL SSC$SERV;
      683    13814    4                     ACCT_TYP = %SSTART#;
      684    13815    4                     CALL JSU$WSTAR(ACCT_TYP);
      685    13816    4                     END;
      686    13817    3                ELSE ;
      687    13818    3                END;
      688    13819
      689    13820        /* But, if LINKing, bump the count of processors for this Job Step
      690    13821        */
      691    13822    3           ELSE DO;
      692    13823    3                B$JIT.HIGHPNUM = B$JIT.HIGHPNUM+1;
      693    13824    3                B$JIT.CURPNUM = B$JIT.HIGHPNUM;
      694    13825    3                END;
      695    13826
      696    13827        /* Check to see if this is a restricted processor.
      697    13828        */
      698    13829    2           IF B$HEAD.RESTPROC
      699    13830    3           THEN DO;
      700    13831    3                IF B$HEAD.STRONG_LOCK
      701    13832    3                  AND ( (B$HEAD.LOCK & B$JIT.LOCK) ~= B$HEAD.LOCK )
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:24   
      702    13833    3                THEN GOTO RPROC_ERR;
      703    13834    3                ELSE IF NOT(B$HEAD.LOCK & B$JIT.LOCK)
      704    13835    4                     THEN DO;
      705    13836    4   RPROC_ERR:             ;
      706    13837    4                          B$JIT.ERR=ERESTRICTED;
      707    13838    4                          GOTO ASP_ERR0;
      708    13839    4                          END;
      709    13840    3                END;
      710    13841        /*E*   ERROR: JST-E$RESTRICTED-E
      711    13842               MESSAGE: You are not allowed to use that restricted processor.
      712    13843        */
      713    13844
      714    13845        /* Check for non-standard syntax.
      715    13846        */
      716    13847    2           IF B$JIT.PRFLAGS.NSSYNTAX AND (B$HEAD.NSTDINVOC)
      717    13848    3           THEN DO;
      718    13849    3                B$JIT.ERR=ENSTDINVOC;
      719    13850    3                GOTO ASP_ERR0;
      720    13851    3                END;
      721    13852
      722    13853        /*E*   ERROR:  JST-E$NSTDINVOC-E
      723    13854               MESSAGE: That processor must be invoked with standard syntax.
      724    13855               MESSAGE1: Standard syntax is as follows:
      725    13856
      726    13857             !Run_unit [source] [,update] [ ON|OVER|INTO [object] [,listout]] [(optionlist)]
      727    13858
      728    13859                          Where
      729    13860                                Run_unit - specifies the fid of a run unit created
      730    13861                                            by the LINK processor.
      731    13862                                source   - specifies the fid of the source input (M$SI).
      732    13863                                update   - specifies the fid of the update input (M$UI).
      733    13864                              ON       - specifies that the run unit is to be aborted if the
      734    13865                                           object or listout file currently exists.
      735    13866                                OVER     - specifies that the object or listout files are
      736    13867                                           to overwrite any existing files of the same name.
      737    13868                             INTO     - specifies that if object or listfiles exist they are
      738    13869                                       to be updated; otherwise new files are to be created.
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:25   
      739    13870                                object   - specifies the fid of the output file (M$OU).
      740    13871                                listout  - specifies the fid of the listing output (M$LO).
      741    13872                                optionlist - contains run unit specific options, enclosed in
      742    13873                                             parenthesis and separated by commas.
      743    13874
      744    13875               MESSAGE7: That processor must be invoked with standard syntax.
      745    13876        */
      746    13877
      747    13878
      748    13879
      749    13880        /* Remember the ASL and Run-time Library names (if any).
      750    13881        */
      751    13882    2           IF B$HEAD.ASLNAME.CNT = 0
      752    13883    2           THEN ASL$ = ADDR(NIL);
      753    13884    3           ELSE DO;
      754    13885    3                ASL$ = ADDR(B$HEAD.ASLNAME);
      755    13886    3                END;
      756    13887
      757    13888        /* Set up EUP and DDUL based on whether or not there's a shared library.
      758    13889        */
      759    13890    2           IF B$HEAD.LIBNAME.CNT = 0
      760    13891    3           THEN DO;
      761    13892    3                B$JIT.EUP = %ISEGHI;       /* Give him entire instr seg          */
      762    13893    3                ASP$ = ADDR(NIL);          /* No shared lib.                     */
      763    13894    3                B$JIT.LLL = %ISEGHI;
      764    13895    3                B$JIT.LUL = %ISEGHI-1;     /* NO LIBRARY AREA                    */
      765    13896    3                END;
      766    13897    3           ELSE DO;
      767    13898    3                B$JIT.EUP = %LIBLO - 1;    /* Leave room for share lib.          */
      768    13899    3                ASP$ = ADDR(B$HEAD.LIBNAME);
      769    13900    3                B$JIT.LLL = %LIBLO;
      770    13901    3                B$JIT.LUL = %LIBHI;
      771    13902    3                END;
      772    13903    2           B$JIT.DDUL = B$JIT.EUP;
      773    13904
      774    13905        /* Now set up the rest of the jit memory delimiters for the instr seg.
      775    13906        */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:26   
      776    13907    2           B$JIT.DLL = B$HEAD.BIAS/1024 + %ISEGLO;
      777    13908    2           B$JIT.DUL = B$JIT.DLL + B$HEAD.VDPGS - 1;
      778    13909    2           B$JIT.PLL = B$JIT.DUL + 1;
      779    13910    2           B$JIT.PUL = B$JIT.PLL + B$HEAD.VPPGS -1;
      780    13911
      781    13912    2           IF B$JIT.PUL > B$JIT.EUP
      782    13913    3           THEN DO;
      783    13914    3                B$JIT.ERR=EPROGTOOBIG;
      784    13915    3                GOTO ASP_ERR0;
      785    13916    3                END;
      786    13917        /*E*    ERROR:  JST-E$PROGTOOBIG-E
      787    13918                MESSAGE: Program size exceeds user authorization or limit.
      788    13919        */
      789    13920
      790    13921    2           B$JIT.DDLL = B$JIT.PUL + 1;
      791    13922    2           B$JIT.TDP = B$JIT.DDLL;
      792    13923    2           B$JIT.PCDD = 0;
      793    13924    2           B$JIT.PCL = 0;
      794    13925
      795    13926        /* Set flag in JIT to let MM know if this guy gets his procedure free.
      796    13927        */
      797    13928    2           IF B$HEAD.NOCHGPMEM AND SYSFLAG
      798    13929    2           THEN B$JIT.MMFLGS.FREE_PPGS = '1'B;
      799    13930    2           ELSE B$JIT.MMFLGS.FREE_PPGS = '0'B;
      800    13931
      801    13932        /* Set the privilege from the HEAD record in JIT.PRIV.PRC.
      802    13933        */
      803    13934    2           IF SYSFLAG
      804    13935    2           THEN IF DEBUG$ = ADDR(NIL) OR LMDCB$->F$DCB.FFLG.DELF
      805    13936    3                THEN DO;
      806    13937    3                     B$JIT.PRIV.PRC = B$HEAD.PRIV;
      807    13938        /* No future debugging if more privilege might thereby occur */
      808    13939    3                     IF NOT LMDCB$->F$DCB.FFLG.DELF
      809    13940    3                       AND (B$JIT.PRIV.PRC & B$JIT.PRIV.AUTH) ~= B$JIT.PRIV.PRC
      810    13941    3                     THEN B$JIT.JUNK = B$JIT.JUNK | %JJ_EXONLY#;
      811    13942    3                     END;
      812    13943    2                ELSE B$JIT.PRIV.PRC = '0'B;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:27   
      813    13944        /* Give the debugging user only as much privilege as he is permitted. */
      814    13945    2           ELSE B$JIT.PRIV.PRC = '0'B;
      815    13946        /* If PRC.MAXMEM, make it effective now. */
      816    13947    2           IF B$JIT.PRIV.PRC & %PR_MAXMEM#
      817    13948    2           THEN B$JIT.PRIV.ACTIVE = B$JIT.PRIV.ACTIVE | %PR_MAXMEM#;
      818    13949
      819    13950        /* Okay - let's prepare to read in its data and ROSEG pages. Also,
      820    13951           STEP guarantees that every run unit put into execution has at
      821    13952           least one TCB exceptional condition frame.
      822    13953        */
      823    13954    2           IF B$HEAD.TCBSIZE = 0 THEN B$HEAD.TCBSIZE = 1;
      824    13955
      825    13956        /*************************************************************
      826    13957         *                                                           *
      827    13958         *                      GET_RO_DATA                          *
      828    13959         *                                                           *
      829    13960         *************************************************************/
      830    13961
      831    13962        /* Begin by checking to see if the user has any DCBs or TCB frames.
      832    13963        */
      833    13964    2           SEGSIZE = B$HEAD.ROSIZE + (B$HEAD.TCBSIZE*%UE_AV_TCBSZ# + %UE_FX_TCBSZ#);
      834    13965
      835    13966        /* If so, see if they will fit in the current ROS pages.
      836    13967        */
      837    13968    2           TEMP1 = B$JIT.PCROS;
      838    13969    2           PAGES = ((SEGSIZE + INIT_ROSIZE + 1023)/1024) - TEMP1;
      839    13970    2           IF PAGES > 0
      840    13971    3           THEN DO;
      841    13972
      842    13973        /* If they don't fit in the current ROS pages, see if they fit in
      843    13974           the maximum ROS size.
      844    13975        */
      845    13976    3                IF PAGES > %ROSEGSIZ - TEMP1
      846    13977    4                THEN DO;
      847    13978
      848    13979        /* And if they don't fit the max ROS size, set the error code to
      849    13980           too many DCBs if this is the problem.  If the DCBs alone would
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:28   
      850    13981           fit, then the problem is obviously too many TCB frames.
      851    13982        */
      852    13983    4                     IF ((B$HEAD.ROSIZE + INIT_ROSIZE + 1023)/1024)  > %ROSEGSIZ
      853    13984    4                     THEN B$JIT.ERR = EDCBSZBAD;
      854    13985    4                     ELSE B$JIT.ERR = ETCBSZBAD;
      855    13986    4                     GOTO ASP_ERR0;
      856    13987    4                     END;
      857    13988        /*E* ERROR:  JST-E$DCBSZBAD-E
      858    13989             MESSAGE: Run Unit% %U1%% %FN% contains too many DCBs.
      859    13990        */
      860    13991        /*E* ERROR:  JST-E$TCBSZBAD-E
      861    13992             MESSAGE: Run Unit% %U1%% %FN% TCB size specification too large.
      862    13993        */
      863    13994
      864    13995        /* But if both DCBs and TCB frames fit within the max ROS size,
      865    13996           go get the pages to read them into.
      866    13997        */
      867    13998    4                ELSE DO;
      868    13999    4                     CALL MMG$SGVP(%USERWSQ,BITBIN(%ROSID),TEMP1,PAGES,ERR)
      869    14000    4                       ALTRET(ASP_ERR);
      870    14001    4                     END;
      871    14002    3                END;
      872    14003
      873    14004        /* Now go ahead and read in the user's DCBs.
      874    14005        */
      875    14006    2           SEGSIZE = B$HEAD.ROSIZE;
      876    14007    2           RECSIZE = B$HEAD.PRECSIZE;
      877    14008    2           CALL JSF$READ(%TYPROS,RECSIZE,SEGSIZE,
      878    14009    2             PINCRW(B$ROSEG$,INIT_ROSIZE),0,ERR)
      879    14010    2             ALTRET(ASP_ERR);
      880    14011
      881    14012        /* Now read in the data portions of the program records.
      882    14013        */
      883    14014    2           IF B$HEAD.RDATA > 0
      884    14015    3           THEN DO;
      885    14016    3                PAGES = ((B$HEAD.RDATA + B$HEAD.BIAS + 1023)/1024) - (B$HEAD.BIAS/1024)
             14016                         ;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:29   
      886    14017    3                CALL MMG$SGVP(%USERWSQ,BITBIN(%ISSID),B$HEAD.BIAS/1024,PAGES,ERR)
      887    14018    3                  ALTRET(ASP_ERR);
      888    14019    3                SEGSIZE = B$HEAD.RDATA;
      889    14020    3                CALL JSF$READ(%TYPPROG,RECSIZE,SEGSIZE,
      890    14021    3                  PINCRW(B$USERIS$,B$HEAD.BIAS),0,ERR)
      891    14022    3                  ALTRET(ASP_ERR);
      892    14023
      893    14024
      894    14025        /*************************************************************
      895    14026         *                                                           *
      896    14027         *                      SETUP_ROSEG                          *
      897    14028         *                                                           *
      898    14029         *************************************************************/
      899    14030        /* Initialize all necessary read-only segment information after
      900    14031           having brought the run unit's portion into memory.
      901    14032        */
      902    14033
      903    14034
      904    14035        /* Begin by relocating the TREE.
      905    14036        */
      906    14037    3                TEMP1 = B$HEAD.TREEDISP + INIT_ROSIZE;
      907    14038    3                B$ROSEG.TREE$ = PINCRW(B$ROSEG$ , TEMP1);
      908    14039
      909    14040        /* these instructions replace call RELOC_TREE   */
      910    14041    3                NOOVER = 0;
      911    14042    3                B$TREEHDR.LIB$ = PINCRW(B$TREEHDR.LIB$ , INIT_ROSIZE);
      912    14043
      913    14044        /* Get pointer to 1st node of tree table.
      914    14045        */
      915    14046    3                TPTR$ = PINCRW(B$ROSEG.TREE$,SIZEW(B$TREEHDR));
      916    14047    3                TEMP2 = B$TREEHDR.NODES * SIZEW(B$NODE) + SIZEW(B$TREEHDR);
      917    14048    3                IF (TEMP2 > B$TREEHDR.SIZE) OR (TEMP2 < (SIZEW(B$TREEHDR)+SIZEW(B$NODE)
             14048                         ))
      918    14049    4                THEN DO;
      919    14050    4                     B$JIT.ERR = EHALFTREE;
      920    14051    4                     GOTO ASP_ERR0;
      921    14052    4                     END;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:30   
      922    14053        /*E*    ERROR:  JST-E$HALFTREE-E
      923    14054                MESSAGE: The TREE table's size is incorrect.
      924    14055        */
      925    14056    4                DO TEMP2 = 1 TO B$TREEHDR.NODES;
      926    14057    4                     B$NODE.NAME$ = PINCRW(B$NODE.NAME$,TEMP1);
      927    14058    4                     IF TEMP2 = 1
      928    14059    4                     THEN B$NODE.FLGS = '600'O; /* Set 'NOW_IN' + 'WAS_IN'       */
      929    14060    4                     ELSE B$NODE.FLGS = '0'B; /* for the root only.              */
      930    14061
      931    14062    4                     IF B$NODE.FORWARD# > 1
      932    14063    4                     THEN SHARED_FLAG = %FALSE; /* cant be shared                */
      933    14064
      934    14065    4                     NOOVER = NOOVER + 1;
      935    14066    4                     TPTR$ = PINCRW(TPTR$,SIZEW(B$NODE));
      936    14067    4                     END;
      937    14068        /*  end RELOC_TREE  */
      938    14069
      939    14070
      940    14071    3                B$ROSEG.NUMDCBS = B$HEAD.UDCBNUM + B$HEAD.DCBRES + %SYS_DCBS#;
      941    14072
      942    14073        /* Set up the linkage segment TCB descriptor and initialize its
      943    14074           first few words.
      944    14075        */
      945    14076    3                TCBSZ = B$HEAD.TCBSIZE;
      946    14077    3                ROSZ = B$HEAD.ROSIZE;
      947    14078    3                CALL INIT_TCB;
      948    14079
      949    14080        /* Clear out all ECCBs.
      950    14081        */
      951    14082    3                IF (B$JIT.CPFLAGS1 & %CP_KEEPDS#)
      952    14083    3                THEN TEMP1=2;
      953    14084    3                ELSE TEMP1=3;
      954    14085    4                DO I = 0 TO TEMP1;
      955    14086    4                     B$ROSEG.ECCB(I) = '0'B;
      956    14087    4                     END;
      957    14088
      958    14089        /* Now, fix up the dcb pointer table.
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:31   
      959    14090        */
      960    14091        /* These instructions replace call to INIT_DCBPTR */
      961    14092    3                TEMP1 = %M$1STDCB# + B$HEAD.UDCBNUM - 1;
      962    14093    4                DO TEMP2 = %M$1STDCB# TO TEMP1;
      963    14094    4                     TEMP3 = B$ROSEG.DCBPTR$->DCB_WORD(TEMP2);
      964    14095    4                     IF TEMP3_PTR.SEGID ~= %ROSID THEN GOTO BAD_ROSEG;
      965    14096    4                     B$ROSEG.DCBPTR$->DCB$(TEMP2) =
      966    14097    4                       PINCRW(TEMP3$,INIT_ROSIZE);
      967    14098    4                     END;
      968    14099    4                DO TEMP2 = TEMP1+1 TO TEMP1+B$HEAD.DCBRES;
      969    14100    4                     B$ROSEG.DCBPTR$->DCB$(TEMP2) = ADDR(NIL);
      970    14101    4                     END;
      971    14102
      972    14103        /*   end INIT_DCBPTR  */
      973    14104
      974    14105
      975    14106        /* Now call JSF$DCBCHK to make sure the DCBs are OK.
      976    14107        */
      977    14108    3                IF B$HEAD.OVRL
      978    14109    3                THEN DSPTR$ = B$ROSEG.TREE$;
      979    14110    3                ELSE DSPTR$ = PINCRW(B$ROSEG$,B$HEAD.ROSIZE+INIT_ROSIZE);
      980    14111    3                CALL JSF$DCBCHK(DSPTR$)
      981    14112    4                WHENALTRETURN DO;
      982    14113    4   BAD_ROSEG:        ;
      983    14114    4                     B$JIT.ERR = EBADROSEG;
      984    14115    4                     GOTO ASP_ERR0;
      985    14116    4                     END;
      986    14117        /*E* ERROR:  JST-E$BADROSEG-E
      987    14118             MESSAGE: Run Unit% %U1%% %FN% contains a bad Read Only Segment.
      988    14119        */
      989    14120
      990    14121
      991    14122
      992    14123        /* See if we have any initialized data segments to read in.
      993    14124        */
      994    14125    3                RECSIZE = 1024;
      995    14126    3                I = BITBIN(%DS3SID & '1777'O)*2;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:32   
      996    14127    3                LPTR$ = PINCRW(B$USERLS$,I);
      997    14128    3                TEMP1 = BITBIN(%DS3SID);
      998    14129    4                DO I = 0 TO 5;
      999    14130    4                     SEGSIZE = B$HEAD.DATA_SEG.SIZ(I);
     1000    14131    4                     IF SEGSIZE > 0
     1001    14132    5                     THEN DO;
     1002    14133    5                          TEMP2 = B$HEAD.DATA_SEG.PROTECTION(I);
     1003    14134    5                          SEGSIZE = SEGSIZE + BITBIN('200000000000'O);/*VIRTONLY*/
     1004    14135    5                          CALL MMH$GDS(%USERWSQ,TEMP1,SEGSIZE,ERR) ALTRET(ASP_ERR);
     1005    14136    5                          SEGSIZE = SEGSIZE - BITBIN('200000000000'O);/*VIRTONLY*/
     1006    14137    5                          B$LS$->B$MLS.MISC2 = LPTR$->B$DESCR;
     1007    14138    5                          DSPTR$ = B$MISC2$;
     1008    14139    5                          CALL JSF$READ_DS(%TYPDATASEG,RECSIZE,SEGSIZE,DSPTR$,
     1009    14140    5                            TEMP1,ERR) ALTRET(ASP_ERR);
     1010    14141    5                          CALL MMH$SMPRT(%USERWSQ,TEMP1,,ERR,TEMP2) ALTRET(ASP_ERR);
     1011    14142    5                          END;
     1012    14143    4                     TEMP1 = TEMP1 + 1;
     1013    14144    4                     LPTR$ = PINCRW(LPTR$,2);
     1014    14145    4                     END;
     1015    14146    3                END;
     1016    14147        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:33   
     1017    14148
     1018    14149        /* Now decide if we should read the procedure or ASP it.
     1019    14150        */
     1020    14151        /*The basic strategy to be used here is as follows:
     1021    14152
     1022    14153                 1. If not a candidate for sharing, reset flag and goto fetch
     1023    14154
     1024    14155                 2. Look it up in auto share tables. If not found go to step 4.
     1025    14156
     1026    14157                 3. If found but not the current run unit, mark entry old and
     1027    14158
     1028    14159                 4. Try to get entries for proc and overlays. If unable, reset
     1029    14160                    flag.
     1030    14161
     1031    14162                 5. Go to fetch.
     1032    14163
     1033    14164                 6. If found and current and PPC ~= 0, use it.
     1034    14165
     1035    14166                 7. If found and current but PPC = 0, check UC.
     1036    14167
     1037    14168                 8. If UC ~= 0 (someone is fetching) wait and check again.
     1038    14169
     1039    14170                 9. If UC = 0 set UC = 1 and fetch, planning to install after
     1040    14171                    fetch.
     1041    14172        */
     1042    14173
     1043    14174
     1044    14175        /* If not on a publed pack
     1045    14176        */
     1046    14177    2           IF (LMDCB$->F$DCB.PSN ~= ' ')
     1047    14178        /* or Start Under DELTA or LINK-LDTRC under DELTA.
     1048    14179        */
     1049    14180    2             OR DEBUG$ ~= ADDR(NIL) OR B$U.DB ~=0
     1050    14181
     1051    14182    2             OR NOT ((B$HEAD.S) OR (JS_SHARE_ALL = 1))
     1052    14183    2             OR (JS_SHARE_ALL = 2)
     1053    14184    2             OR NOT SHARED_FLAG
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:34   
     1054    14185
     1055    14186    3           THEN DO;
     1056    14187        /* Then .... off to Fetch we go  */
     1057    14188    3   NOSHARE:     SHARED_FLAG = %FALSE;
     1058    14189    3                GOTO JST$FETCH;
     1059    14190    3                END;
     1060    14191
     1061    14192        /*Now lets find if there is a good copy of procedure around.*/
     1062    14193
     1063    14194    2   REFIND: CALL JSA$FINDAUTO (NAME$ , ACCT$ , PNUM) ALTRET (INST);
     1064    14195    2           IF B_P.CRDATE (PNUM) ~= MODTIME
     1065    14196    3           THEN DO;
     1066    14197    3                B_P.INSTDATE (PNUM) = 1;
     1067    14198    3   INST:        CALL ADD_SHARED ALTRET (NOSHARE);
     1068    14199    3                GOTO JST$FETCH;
     1069    14200    3                END;
     1070    14201    3           ELSE DO;
     1071    14202    3                IF B_P.PPC (PNUM) = 0
     1072    14203    4                THEN DO;
     1073    14204    4                     IF B_P.UC (PNUM) ~= 0
     1074    14205    5                     THEN DO;
     1075    14206                               %UNLOCK (G = J_PLOCK);
     1076    14209    5                          CALL SSR$REG (%SS_SL ,, 1);
     1077    14210    5                          GOTO REFIND;
     1078    14211    5                          END;
     1079    14212    5                     ELSE DO;
     1080    14213    5                          B_P.UC (PNUM) = 1;
     1081    14214                               %UNLOCK (G = J_PLOCK);
     1082    14217    5                          GOTO JST$FETCH;
     1083    14218    5                          END;
     1084    14219    4                     END;
     1085    14220    3                END;
     1086    14221
     1087    14222
     1088    14223        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:35   
     1089    14224        /*************************************************************
     1090    14225         *                                                           *
     1091    14226         *            DO IF AUTO SHARED PROCESSOR                    *
     1092    14227         *                                                           *
     1093    14228         *************************************************************/
     1094    14229        /* If we get here then it's an auto shared run-unit.
     1095    14230        */
     1096    14231    2           PROC$ = ADDR (B_P(PNUM));
     1097    14232    2           IF PROC$ -> B$P.UC (0) = 0
     1098    14233    3           THEN DO;
     1099    14234    3                MM$BYP.AUTOINUSE = MM$BYP.AUTOINUSE + PROC$ -> B$P.PPC (0);
     1100    14235    3                MM$BYP.AUTOP = MM$BYP.AUTOP - PROC$ -> B$P.PPC (0);
     1101    14236    3                END;
     1102    14237    2           PROC$ -> B$P.UC (0) = PROC$ -> B$P.UC (0) + 1;
     1103    14238
     1104    14239        /*Clear SHARED_FLAG so ASP_ERR won't throw away a good proc.
     1105    14240        */
     1106    14241    2           SHARED_FLAG = %FALSE;
     1107    14242
     1108    14243        /* Set the processor number into the user tables and bump
     1109    14244           the frequency counter.
     1110    14245        */
     1111    14246    2           B$U.APR = PNUM;
     1112    14247    2           PROC$ -> B$P.FRQ(0) = PROC$ -> B$P.FRQ(0) + 1;
     1113    14248    2           B$JIT.PCP = PROC$ -> B$P.PPC(0);
     1114    14249                %UNLOCK (G=J_PLOCK);
     1115    14252
     1116    14253        /* Access will be set by SSR when pages are mapped.
     1117    14254        */
     1118    14255
     1119    14256                  /* UPDATE THE CREATE DATE SO THE MOST RECENTLY ACCESSED WILL STAY   */
     1120    14257    2           CALL SSS$SYSTIME( B_P.INSTDATE (PNUM));
     1121    14258
     1122    14259
     1123    14260        /* MM will take care of charging procedure correctly.
     1124    14261        */
     1125    14262    2           GOTO ASP_FETCH;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:36   
     1126    14263        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:37   
     1127    14264        /*************************************************************
     1128    14265         *                                                           *
     1129    14266         *                      JST$FETCH                            *
     1130    14267         *                                                           *
     1131    14268         *************************************************************/
     1132    14269        /* This is the start of the fetch-a-run-unit section of JST$GETPROG */
     1133    14270    2   JST$FETCH:;
     1134    14271
     1135    14272
     1136    14273        /* And now, set up for and read in the program procedure records.
     1137    14274        */
     1138    14275    2           TEMP1 = B$HEAD.RPROC;           /* # of words of root procedure       */
     1139    14276    2           IF TEMP1 > 0
     1140    14277    3           THEN DO;
     1141    14278    3                TEMP2 = (TEMP1 + 1023)/1024;
     1142    14279    3                TEMP3 = B$JIT.PLL - %ISEGLO; /* PLL                              */
     1143    14280
     1144    14281    3                CALL MMG$SGVP(%USERWSQ,BITBIN(%ISSID),TEMP3,TEMP2,ERR)
     1145    14282    3                  ALTRET(ASP_ERR);
     1146    14283    3                TEMP2 = B$HEAD.PRECSIZE;
     1147    14284    3                DSPTR$ = PINCRW(B$USERIS$,TEMP3*1024);
     1148    14285    3                CALL JSF$READ(%TYPPROG,TEMP2,TEMP1,DSPTR$,0,ERR) ALTRET(ASP_ERR);
     1149    14286    3                END;
     1150    14287
     1151    14288        /* Now, set memory protection to read-only for all procedure pages.
     1152    14289           All other instruction segment pages will have been set to read/write
     1153    14290           Do this only if scheduler won't.
     1154    14291        */
     1155    14292    2           IF NOT SHARED_FLAG
     1156    14293    3           THEN DO;
     1157    14294    3                TEMP2= B$JIT.PLL + B$JIT.PCP - 1;
     1158    14295    4                DO I = B$JIT.PLL TO TEMP2;
     1159    14296    4                     B$UPT.CTRL(I) = %PGINMEM | %PGIOM;
     1160    14297    4                     END;
     1161    14298    3                END;
     1162    14299
     1163    14300        /* Fall through to ASP_FETCH.
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:38   
     1164    14301        */
     1165    14302
     1166    14303        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:39   
     1167    14304
     1168    14305        /*************************************************************
     1169    14306         *                                                           *
     1170    14307         *                      ASP_FETCH                            *
     1171    14308         *                                                           *
     1172    14309         *************************************************************/
     1173    14310        /* Must do the following for both.  */
     1174    14311    2   ASP_FETCH:;
     1175    14312
     1176    14313        /* Give back our file mgmt buffers if he's not overlaid.
     1177    14314        */
     1178    14315    2           IF NOT B$HEAD.OVRL
     1179    14316    3           THEN DO;
     1180    14317    3                CALL FMF$TRUNCM(0);
     1181    14318    3                END;
     1182    14319
     1183    14320        /* Now set user or processor accounting based on HEAD record flag.
     1184    14321        */
     1185    14322    2           IF B$HEAD.PROCACC AND SYSFLAG
     1186    14323    2           THEN B$JIT.RUNFLAGS = %RUN_PROC#;
     1187    14324    2           ELSE B$JIT.RUNFLAGS = %RUN_USER#;
     1188    14325
     1189    14326        /* Initialize a safe store frame for starting up this user.
     1190    14327        */
     1191    14328    2           TEMP1 = B$HEAD.START;
     1192    14329    2           CALL JSS$INITSS(TEMP1,%USERWSR);
     1193    14330
     1194    14331        /* Write Processor accounting record if thats the right thing to do.
     1195    14332        */
     1196    14333    2           IF B$HEAD.PROCSURCHG AND SYSFLAG
     1197    14334    3           THEN DO;
     1198    14335    3                B$JIT.RUNFLAGS = %RUN_PROC#;
     1199    14336    3                B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 | %CP_PROCACCT#);
     1200    14337    3                ACCT_TYP = %PSTART#;
     1201    14338    3                CALL JSU$WSTAR(ACCT_TYP);
     1202    14339    3                END;
     1203    14340
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:40   
     1204    14341        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:41   
     1205    14342        /*************************************************************
     1206    14343         *                                                           *
     1207    14344         *                      JST$ADDPROCS                           *
     1208    14345         *                                                           *
     1209    14346         *************************************************************/
     1210    14347    2   JST$ADDPROCS:;
     1211    14348        /*
     1212    14349              If we need an asl call JSA$ASL to associate it
     1213    14350        */
     1214    14351    2           IF ASL$ ~= ADDR(NIL)
     1215    14352    3           THEN DO;
     1216    14353    3                PTYPE=%P_ASL;
     1217    14354    3                CALL JSA$FINDSSP (ASL$,J_SYS$,ERR,PTYPE,ERR)
     1218    14355    4                WHENALTRETURN DO;
     1219    14356    4                     B$JIT.ERR=ENOSUCHASL;
     1220    14357    4                     GOTO ASP_ERR1;
     1221    14358    4                     END;
     1222    14359        /*E*    ERROR:  JST-E$NOSUCHASL-E
     1223    14360                MESSAGE: The requested Alternate Shared Library does not exist.
     1224    14361        */
     1225    14362    3                CALL JSA$ASL(ERR) ALTRET(ASP_ERR1);
     1226    14363    3                END;
     1227    14364        /*
     1228    14365               Now do the same for asp(core library)
     1229    14366        */
     1230    14367    2           IF ASP$ ~= ADDR(NIL)
     1231    14368    3           THEN DO;
     1232    14369    3                PTYPE=%P_LIB;
     1233    14370    3                CALL JSA$FINDSSP (ASP$,J_SYS$,ERR,PTYPE,ERR)
     1234    14371    4                WHENALTRETURN DO;
     1235    14372    4                     B$JIT.ERR=ENOSHRLIB;
     1236    14373    4                     GOTO ASP_ERR1;
     1237    14374    4                     END;
     1238    14375        /*E*    ERROR:  JST-E$NOSHRLIB-E
     1239    14376                MESSAGE: The requested shared library does not exist.
     1240    14377        */
     1241    14378    3                CALL JSA$CLIB(ERR) ALTRET(ASP_ERR1);
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:42   
     1242    14379    3                END;
     1243    14380        /*
     1244    14381               And finally, check for a debugger being ASSOCIATED...
     1245    14382        */
     1246    14383    2           IF DEBUG$ ~= ADDR(NIL)
     1247    14384    3           THEN DO;
     1248    14385    3                PTYPE=%P_DB;
     1249    14386    3                CALL JSA$FINDSSP (DEBUG$,J_SYS$,ERR,PTYPE,ERR)
     1250    14387    4                WHENALTRETURN DO;
     1251    14388    4                     B$JIT.ERR=EBADDBUGR;
     1252    14389    4                     GOTO ASP_ERR1;
     1253    14390    4                     END;
     1254    14391    3                CALL JSA$DB(ERR) ALTRET(ASP_ERR1);
     1255    14392    3                END;
     1256    14393
     1257    14394        /* If this program was intended to be shared, then
     1258    14395           put in the entries.
     1259    14396        */
     1260    14397    2           IF SHARED_FLAG
     1261    14398    2           THEN
     1262    14399    2                CALL INSTALL_PROC;
     1263    14400
     1264    14401        /* Finally, release fetch's special buffer page
     1265    14402        */
     1266    14403    2           CALL MME$WFVP(%USERWSQ,%SBUF1PG,TEMP1,ERR);
     1267    14404
     1268    14405        /* And go to join the SSP routine at JST$USERGO
     1269    14406        */
     1270    14407    2           GOTO JST$USERGO;
     1271    14408    2           END;                            /* End of 'do if sharable or R.U.     */
     1272    14409        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:43   
     1273    14410        /*************************************************************
     1274    14411         *                                                           *
     1275    14412         *     DO IF SPECIAL SHARED PROCESSOR                        *
     1276    14413         *                                                           *
     1277    14414         *************************************************************/
     1278    14415        /* Here begins the 'ELSE' half of the big IF...THEN...ELSE clause
     1279    14416           that was mentioned earlier.  This half handles special shared
     1280    14417           processors.
     1281    14418        */
     1282    14419    2      ELSE DO;
     1283    14420
     1284    14421        /* Yell if somebody calls an ASL or library as if it were a run unit.
     1285    14422        */
     1286    14423    2           IF (PTYPE & (%P_LIB | %P_ASL))
     1287    14424    3           THEN DO;
     1288    14425    3                B$JIT.ERR=ENOTANRU;
     1289    14426    3                GOTO SSP_ERR;
     1290    14427    3                END;
     1291    14428
     1292    14429        /* Check for illegal calls to LOGON or LOGON abort loops.
     1293    14430        */
     1294    14431    2           IF (B$U.ACP ~= 0) AND
     1295    14432    2             (SUBSTR(NAME$->B$TEXTC.TEXT,0,NAME$->B$TEXTC.COUNT) = J_LOGON.NAME)
     1296    14433    3           THEN DO;
     1297    14434                            /* Avoid looping back through JST$ABORTM if LOGON aborts. */
     1298    14435    3                IF B_P.NAME.TEXT(B$U.ACP) = J_LOGON.NAME
     1299    14436    3                THEN CALL JSD$DELUSR;
     1300    14437    3                B$JIT.ERR = EBADLOGON;
     1301    14438    3                GOTO SSP_ERR;
     1302    14439    3                END;
     1303    14440        /*E*    ERROR:  JST-E$PROCACCESS-E
     1304    14441                MESSAGE: You are not allowed to access that processor.
     1305    14442        */
     1306    14443
     1307    14444        /* Check for screw-up by operations: a special shared processor
     1308    14445           that didn't end up getting installed.
     1309    14446        */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:44   
     1310    14447    2           IF B_P.PPC(PNUM) = 0
     1311    14448    3           THEN DO;
     1312    14449    3                B$JIT.ERR=EBADSSP;
     1313    14450    3                GOTO SSP_ERR;
     1314    14451    3                END;
     1315    14452        /*E*    ERROR:  JST-E$BADSSP-E
     1316    14453               MESSAGE: That special shared processor has not been installed.
     1317    14454        */
     1318    14455
     1319    14456        /* Check for an M$LINK to a special shared processor.
     1320    14457        */
     1321    14458    2           IF (B$JIT.JUNK & %JJ_MLINKIP#)
     1322    14459    3           THEN DO;
     1323    14460    3                IF (PTYPE & %P_CP) AND (B$JIT.CPFLAGS1 & %CP_LNKPMME#)
     1324    14461    3                THEN EXIT;
     1325    14462
     1326    14463    3                B$JIT.ERR=ELDLNKSSP;
     1327    14464    3                GOTO SSP_ERR;
     1328    14465    3                END;
     1329    14466        /*E*    ERROR:  JST-E$LDLNKSSP-A
     1330    14467               MESSAGE: M$LINK and M$LDTRC to a Special Shared Processor is not allowed.
     1331    14468        */
     1332    14469    2           IF PTYPE & %P_CP
     1333    14470    3           THEN DO;
     1334    14471
     1335    14472        /* If switching from one Command Processor to another
     1336    14473           make sure the old CP Data Segments and ECCB are rundown.
     1337    14474        */
     1338    14475    3                IF (B$U.ACP ~= PNUM)
     1339    14476    4                THEN DO;
     1340    14477    4                     B$JIT.PRIOR_CP = B$U.ACP;
     1341    14478    4                     CALL JSA$RUNDSPC(%CPWSQ,1);
     1342    14479    4                     END;
     1343    14480    3                CALL JSA$GETTCB(PNUM) ALTRET(SSP_ERR);
     1344    14481
     1345    14482        /* Map in the CP's data segments here....
     1346    14483        */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:45   
     1347    14484    3                CALL JSA$MAP_DATASEGS(%CPWSQ,PNUM);
     1348    14485
     1349    14486        /* If this is a Command Processor, set JIT.PRIV.PRC from P.FLGS
     1350    14487           (but only if we're at job step!!!)
     1351    14488        */
     1352    14489    3                IF (B$JIT.CPFLAGS1 & %CP_JSTEP#)
     1353    14490    3                THEN B$JIT.PRIV.PRC = B_P.PRIV(PNUM);
     1354    14491
     1355    14492        /* Bump the frequency-of-use counter for CP's here. (Other special
     1356    14493           shared processors get their's bumped in the corresponding JSA routine).
     1357    14494        */
     1358    14495    3                B_P.FRQ(PNUM) = B_P.FRQ(PNUM) + 1;
     1359    14496
     1360    14497        /* Set up the CP's processor number and ISR.
     1361    14498        */
     1362    14499    3                B$U.ACP = PNUM;
     1363    14500    3                B$CPLS$->B$ULNK.IS.BOUND = (B_P.HVA(PNUM)-B_P.PVA(PNUM))*4096 - 1;
     1364    14501    3                B$CPLS$->B$ULNK.IS.BASE = B_P.PVA(PNUM) * 4096;
     1365    14502    3                B$SDS0$->B$SDS.ACPENT.ENTLOC = B_P.SA(PNUM); /*Start addr*/
     1366    14503    3                B$U.FLG = B$U.FLG | %U_CPIC;
     1367    14504    3                END;                       /* End of do-if-command program       */
     1368    14505        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:46   
     1369    14506    3           ELSE DO;
     1370    14507        /* To get here, we're going for a debugger */
     1371    14508
     1372    14509        /* If this is a batch user (post-)associating DELTA, then let him
     1373    14510           have the MAXMEM privilege for this job step to insure that any
     1374    14511           PMD's can get done.
     1375    14512        */
     1376    14513    3                IF (B$JIT.MODE = %M_BATCH#)
     1377    14514    3                THEN B$JIT.PRIV.PRC = B$JIT.PRIV.PRC | %PR_MAXMEM#;
     1378    14515        /* We bumped the UC for the debugger when we locked the processor
     1379    14516           after finding it in the shared proc tables.  Decrement the UC
     1380    14517           here, as JSA$DB is going to bump it again if successfully
     1381    14518           associated.
     1382    14519        */
     1383    14520    3                B$JIT.RUNFLAGS = %RUN_PROC#; /* Processor acctg                  */
     1384    14521                     %LOCK (G=J_PLOCK);
     1385    14524    3                B_P.UC(PNUM) = B_P.UC(PNUM) -1;
     1386    14525                     %UNLOCK (G=J_PLOCK);
     1387    14528    3                CALL JSA$DB(PNUM) ALTRET(JST$ABORTM1);
     1388    14529
     1389    14530        /* Get a data page if there's no program associated.
     1390    14531        */
     1391    14532    3                IF (B$JIT.PCD=0) AND (B$JIT.PCP=0)
     1392    14533    4                THEN DO;
     1393    14534    4                     TEMP1=1;
     1394    14535    4                     CALL JSS$INITSS(TEMP1,%USERWSR);
     1395    14536    4                     CALL MMG$SGVP(%USERWSQ,BITBIN(%ISSID),0,TEMP1,ERR)
     1396    14537    4                       ALTRET(ASP_ERR);
     1397    14538    4                     B$JIT.DLL = %ISEGLO;
     1398    14539    4                     B$JIT.DUL = %ISEGLO;
     1399    14540    4                     B$JIT.PCD = 1;
     1400    14541    4                     B$JIT.DDLL = %ISEGLO+1;
     1401    14542    4                     B$JIT.PCDD = 0;
     1402    14543    4                     B$JIT.TDP = %ISEGLO+1;
     1403    14544
     1404    14545
     1405    14546        /* Give stand-alone DELTA users a TCB with 4 frames.
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:47   
     1406    14547        */
     1407    14548    4                     TCBSZ = 4;
     1408    14549    4                     ROSZ = %IBEX_DCBS#;
     1409    14550    4                     CALL INIT_TCB;
     1410    14551
     1411    14552        /* Count stand-alone DELTA as a Job Step.
     1412    14553        */
     1413    14554    4                     B$JIT.STEPS = B$JIT.STEPS+1;
     1414    14555
     1415    14556        /* Write Step Accounting records to *S if appropriate to do so.
     1416    14557        */
     1417    14558    4                     IF (B$JIT.CPFLAGS1 & %CP_STEPACCT#) OR (B$JIT.SSLEV ~= %AZ_NONE#)
     1418    14559    5                     THEN DO;
     1419    14560    5                          ACCT_TYP = %SSTART#;
     1420    14561    5                          CALL JSU$WSTAR(ACCT_TYP);
     1421    14562    5                          END;
     1422    14563    4                     END;
     1423    14564    3                END;                       /* End of do-if-debugger              */
     1424    14565    2           END;                            /* End of do-if-special-shared        */
     1425    14566
     1426    14567        /* Now, just fall through to 'USERGO' */
     1427    14568
     1428    14569        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:48   
     1429    14570        /*************************************************************
     1430    14571         *                                                           *
     1431    14572         *                      JST$USERGO                           *
     1432    14573         *                                                           *
     1433    14574         *************************************************************/
     1434    14575    1   JST$USERGO:;
     1435    14576
     1436    14577        /* Call SSR$REG to associate the processor and transfer to the
     1437    14578           exit-to-user logic.
     1438    14579        */
     1439    14580    1      CALL SSR$REG(%SS_AP);
     1440    14581
     1441    14582        /* Give new quantum for new mode.
     1442    14583        */
     1443    14584    1      CALL SSC$MON;
     1444    14585    1      CALL SSQ$NUQUAN;
     1445    14586    1      CALL SSC$SERV;
     1446    14587
     1447    14588        /* Debugger associated and not at job STEP: Skip assmrg.
     1448    14589        */
     1449    14590    1      IF (B$U.DB ~= 0) AND NOT
     1450    14591    1        (B$JIT.CPFLAGS1 & %CP_JSTEP#) AND NOT
     1451    14592    1        (B$JIT.JUNK & %JJ_MLINKIP#)
     1452    14593    1      THEN GOTO NO_ASSMRG;
     1453    14594
     1454    14595        /* If cp-in-control and going for cp, dont merge assigns.
     1455    14596        */
     1456    14597    1      IF B$U.FLG & %U_CPIC AND PTYPE = %P_CP THEN GOTO NO_ASSMRG;
     1457    14598
     1458    14599        /* Merge assigns.
     1459    14600        */
     1460    14601    1   NOT_CP: CALL FMM$ASSMRG;
     1461    14602
     1462    14603    1      CALL UMD$CHKOPN;                     /* Get Dribble DCB open now           */
     1463    14604    1      IF B$JIT.ERR.CODE ~= 0
     1464    14605    2      THEN DO;                             /* Error detected by FMM$ASSMRG       */
     1465    14606    2           B$JIT.ERR.FCG = FCG#;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:49   
     1466    14607    2           B$JIT.ERR.MID = MID#;           /* Put FCG = JST                      */
     1467    14608    2           CALL JSE$ABORTM;
     1468    14609    2           END;
     1469    14610
     1470    14611        /* Set flag to tell user how his program was initiated.
     1471    14612        */
     1472    14613    1      B$JIT.PROG_ENTRY = (B$JIT.SVLDTF & %SVL_LYNX#);
     1473    14614    1      IF (B$JIT.JUNK & %JJ_MONLINK#)
     1474    14615    1      THEN B$JIT.PROG_ENTRY = %PE_MLINK#;
     1475    14616
     1476    14617    1   NO_ASSMRG:
     1477    14618    1      B$U.FLG = B$U.FLG &~ %U_STIP;
     1478    14619
     1479    14620        /* Set user privileges to 'OR' of defaults & processor privileges.
     1480    14621           Only use PRC if not at step.
     1481    14622        */
     1482    14623        /* Don't change PRIV.ACTIVE if just post-association of delta */
     1483    14624    1      IF NAME$ ~= DEBUG$
     1484    14625    1      THEN B$JIT.PRIV.ACTIVE = B$JIT.PRIV.JOB & ES_PRIVMASK;
     1485    14626
     1486    14627    1      IF (B$JIT.CPFLAGS1 & %CP_JSTEP#) OR (B$JIT.JUNK & %JJ_MLINKIP#)
     1487    14628    1      THEN B$JIT.PRIV.ACTIVE = (B$JIT.PRIV.ACTIVE | B$JIT.PRIV.PRC);
     1488    14629
     1489    14630    1      IF B$JIT.PRIV.ACTIVE & %PR_JIT#
     1490    14631    2      THEN DO;
     1491    14632                %SETFLG(LS$=B$USERLS$,SEGID=%JITSID,FLG="%DSWRITE");
     1492    14635    2           IF (B$U.FLG & %U_DIC)
     1493    14636    3           THEN DO;
     1494    14637                     %SETFLG(LS$=B$DBLS$,SEGID=%JITSID,FLG="%DSWRITE");
     1495    14640    3                END;
     1496    14641    2           END;
     1497    14642
     1498    14643        /* Now, decide whether to exit directly to the user or to go to
     1499    14644           his associated debugger or command processor.
     1500    14645        */
     1501    14646    1      IF (B$U.FLG & %U_CPIC)
     1502    14647    2      THEN DO;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:50   
     1503    14648    2           IF (B$JIT.CPFLAGS1 & %CP_YCPMME#)
     1504    14649    2           THEN CALL JSN$LTRAS(B$SDS1$->B$SDS.ACPENT);
     1505    14650    2           ELSE CALL SSC$ACPENT;
     1506    14651                                                /* Enter the Command Processor        */
     1507    14652    2           END;
     1508    14653
     1509    14654    1      ECC=%ECC_DELTA#;
     1510    14655    1      IF B$JIT.JUNK & %JJ_MLINKIP#
     1511    14656    2      THEN DO;
     1512    14657    2           ECC=%ECC_LINK#;
     1513    14658    2           IF B$JIT.SVLDTF = %SVL_LINK#
     1514    14659    2           THEN ECP.ECCS = %SC_MLINK#;
     1515    14660    2           ELSE ECP.ECCS = %SC_MLDTRC#;
     1516    14661    2           B$JIT.SVLDTF='000'O;
     1517    14662    2           END;
     1518    14663
     1519    14664    1      B$JIT.JUNK=(B$JIT.JUNK &~ (%JJ_MLINKIP# | %JJ_MONLINK#) );
     1520    14665    1      B$U.FLG = B$U.FLG &~ %U_STEP;
     1521    14666    1      B$JIT.XCONF = (B$JIT.XCONF &~ %XC_URND#);
     1522    14667
     1523    14668        /* If going to the Debugger, set up the parameters and call DELTAGO.
     1524    14669        */
     1525    14670    1      IF (B$U.FLG & %U_DIC)
     1526    14671    2      THEN DO;                             /*When going to delta                 */
     1527    14672    2           IF ECC=%ECC_LINK#
     1528    14673    3           THEN DO;
     1529    14674    3                PNUM = B$U.DB;
     1530    14675    3                CALL JSA$MAP_DATASEGS(%DBWSQ,PNUM);
     1531    14676    3                END;
     1532    14677                                                /* ECCS was set up above              */
     1533    14678
     1534    14679    3           ELSE DO;
     1535    14680    3                IF (B$JIT.CPFLAGS1 & %CP_JSTEP#)
     1536    14681    3                THEN IF DEBUG$ = ADDR(NIL)
     1537    14682    3                     THEN ECP.ECCS = %SC_JOBSTEP#;
     1538    14683    3                     ELSE ECP.ECCS = %SC_STARTU#;
     1539    14684    3                ELSE ECP.ECCS=%SC_YC#;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:51   
     1540    14685    3                END;
     1541    14686
     1542    14687    2           IF B$U.APR = 0
     1543    14688    2           THEN ECP.EID = %EVID_USER#;
     1544    14689    2           ELSE ECP.EID = %EVID_AUTOS#;
     1545    14690    2           ECP.JERR = B$JIT.USRERR;
     1546    14691    2           ECP.P# = 0;
     1547    14692    3           DO WHILE (B$SS.ISR.WSR ~= %USERWSR);
     1548    14693    3                CALL JSS$BACKSS;
     1549    14694    3                END;
     1550    14695    2           CALL UDN$MAGICSS;
     1551    14696    2           B_MPT.LS$->B$ULNK.ECCB.FLGS = (B_MPT.LS$->B$ULNK.ECCB.FLGS | %DSXXX);
     1552    14697    2           B$JIT.JUNK=(B$JIT.JUNK | %JJ_UDELTA#);
     1553    14698    2           IF (B$JIT.CPFLAGS1 & %CP_YCPMME#)
     1554    14699    2           THEN IF B$SS.FPT.ALT = '1'B
     1555    14700    3                THEN DO;
     1556    14701    3                     B$SS.IC = B$SS.IC+1;
     1557    14702    3                     END;
     1558    14703    2           B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 & %CP_RESET#);
     1559    14704    2           CALL SSU$DELTAGO (ECC,ECP);
     1560    14705    2           END;                            /* Do if going to delta               */
     1561    14706
     1562    14707        /* If not CP or Debugger, then enter user program.
     1563    14708        */
     1564    14709    1      B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 & %CP_RESET#);
     1565    14710    1      CALL UDB$AUTO;                       /*Flush auto and goto SSS$SEXIT       */
     1566    14711
     1567    14712        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:52   
     1568    14713        /*************************************************************
     1569    14714         *                                                           *
     1570    14715         *                      ASP_ERR                              *
     1571    14716         *                                                           *
     1572    14717         *************************************************************/
     1573    14718        /* Error handler for errors occurring when we have an auto slot
     1574    14719           but it's not yet filled in.
     1575    14720        */
     1576    14721    1   ASP_ERR: ;
     1577    14722    1      B$JIT.ERR=EBADFNME;                  /* any skeleton                       */
     1578    14723    1      B$JIT.ERR.CODE=ERR;
     1579    14724    1   ASP_ERR1: ;
     1580    14725    1      IF SHARED_FLAG
     1581    14726    2      THEN DO;
     1582    14727        /*Set slot old and not in use. GETFREE will unravel olays. */
     1583    14728
     1584    14729    2           B_P.INSTDATE(PNUM) = 1;
     1585    14730    2           B_P.UC(PNUM) = 0;
     1586    14731    2           END;
     1587    14732
     1588    14733        /* Try releasing sbuf1 in case we've still got it.
     1589    14734        */
     1590    14735    1   ASP_ERR0: ;
     1591    14736    1      CALL MME$WFVP(%USERWSQ,%SBUF1PG,TEMP1,ERR);
     1592    14737
     1593    14738
     1594    14739        /* Re-initialize the roseg in case it was bad coming in.
     1595    14740        */
     1596    14741    1      B$ROSEG.NUMDCBS = %SYS_DCBS# + %IBEX_DCBS#;
     1597    14742    1      B$ROSEG.AVAIL$ = PINCRW(B$ROSEG$,INIT_ROSIZE+%IBEX_DCBS#);
     1598    14743    1      B$ROSEG.AVAIL$->B$ROAVAIL.NEXT$ = ADDR(NIL);
     1599    14744    1      B$ROSEG.AVAIL$->B$ROAVAIL.NWORDS = 1024 - (INIT_ROSIZE + %IBEX_DCBS#);
     1600    14745    1      TPTR$  = PINCRW(B$ROSEG.DCBPTR$,%M$1STDCB#);
     1601    14746    2      DO I = 1 TO %IBEX_DCBS#;
     1602    14747    2           TPTR$->B$PTR = ADDR(NIL);
     1603    14748    2           TPTR$ = PINCRW(TPTR$,1);
     1604    14749    2           END;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:53   
     1605    14750    1      GOTO JST$ABORTM1;                    /* Don't need to decr UC for ASP_ERR  */
     1606    14751
     1607    14752        /* Special Shared Processor aborts come through here.
     1608    14753        */
     1609    14754    1   SSP_ERR: ;
     1610    14755
     1611    14756              /* If we've come here, as opposed to JST$ABORTM1, we need
     1612    14757                 to decr, UC */
     1613    14758           %LOCK (G=J_PLOCK);
     1614    14761    1      B_P.UC(PNUM) = B_P.UC(PNUM) - 1;
     1615    14762           %UNLOCK (G=J_PLOCK);
     1616    14765
     1617    14766        /* If we abort associating a special shared processor, exit
     1618    14767           immediately to JSE$ABORTM.
     1619    14768        */
     1620    14769    1   JST$ABORTM1: ;
     1621    14770    1      CALL JSE$ABORTM;
     1622    14771
     1623    14772        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:54   
     1624    14773        /******************************************************************
     1625    14774        *               INTERNAL PROCEDURES FOR
     1626    14775        *                 JOB STEP PROCESSING
     1627    14776        ******************************************************************/
     1628    14777
     1629    14778        /*************************************************************
     1630    14779         *                                                           *
     1631    14780         *                      INIT_TCB                             *
     1632    14781         *                                                           *
     1633    14782         *************************************************************/
     1634    14783        /* Initialize a TCB for user program, std shared processor, or
     1635    14784           stand alone DELTA.
     1636    14785            Must be called with TCBSZ set to the number of TCB frames and
     1637    14786            ROSZ set to the number of words in the ROSEG.
     1638    14787        */
     1639    14788    1   INIT_TCB: PROC;
     1640    14789    2   DCL 1 REST_OF_ROS BASED ALIGNED,
     1641    14790    2         2 * CHAR (TEMP2);
     1642    14791
     1643    14792
     1644    14793    2      TCBSZ = TCBSZ*%UE_AV_TCBSZ# + %UE_FX_TCBSZ#;
     1645    14794    2      IF MOD(ROSZ,2) = 1
     1646    14795    2      THEN ROSZ = ROSZ + 1;
     1647    14796    2      TEMP1 = (INIT_ROSIZE + ROSZ + %ROSEGLO*1024) * 4;
     1648    14797    2      TEMP2 = TCBSZ * 4 -1;
     1649    14798           %SETDBASE(LS$=B$USERLS$,SEGID=%TCBSID,DBASE=TEMP1);
     1650    14801           %SETDBOUND(LS$=B$USERLS$,SEGID=%TCBSID,DBOUND=TEMP2);
     1651    14804           %SETFLG(LS$=B$USERLS$,SEGID=%TCBSID,
     1652    14805           FLG="%DSREAD|%DSCACHE|%DSNULL");
     1653    14808    2      TEMP1 = TEMP1 - %ROSEGLO*4096;
     1654    14809    2      TPTR$ = PINCRC(B$ROSEG$,TEMP1);
     1655    14810    2      TPTR$->B$TCB = '0'B;
     1656    14811    2      TEMP2 = B$JIT.PCROS * 4096 - TEMP1;
     1657    14812    2      TPTR$->REST_OF_ROS = '0'B;
     1658    14813    2      TPTR$->B$TCB.ALT$.OFFSET = 4;
     1659    14814    2      TPTR$->B$TCB.ALT$.SID = %TCBSID;
     1660    14815    2      TPTR$->B$TCB.STK$.OFFSET = 72;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:55   
     1661    14816    2      TPTR$->B$TCB.STK$.SID = %TCBSID;
     1662    14817    2      TPTR$->B$TCB.TCBAVSZ = TCBSZ - SIZEW(TPTR$->B$TCB);
     1663    14818    2      TPTR$->B$TCB.ALTFRM.UNUSED = -1;     /* Mark tcb unused                    */
     1664    14819    2      TEMP1 = INIT_ROSIZE + ROSZ + TCBSZ;
     1665    14820    2      TEMP2 = (B$JIT.PCROS*1024) - TEMP1;
     1666    14821
     1667    14822        /* Set up roseg avail space, if there is any left.
     1668    14823        */
     1669    14824    2      IF TEMP2 > 2
     1670    14825    3      THEN DO;
     1671    14826    3           B$ROSEG.AVAIL$ = PINCRW(B$ROSEG$,TEMP1);
     1672    14827    3           B$ROSEG.AVAIL$->B$ROAVAIL.NEXT$ = ADDR(NIL);
     1673    14828    3           B$ROSEG.AVAIL$->B$ROAVAIL.NWORDS = TEMP2;
     1674    14829    3           END;
     1675    14830    2      ELSE B$ROSEG.AVAIL$ = ADDR(NIL);
     1676    14831    2      RETURN;
     1677    14832    2   END INIT_TCB;
     1678    14833
     1679    14834        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:56   
     1680    14835        /*************************************************************
     1681    14836         *                                                           *
     1682    14837         *                      ADD_SHARED                           *
     1683    14838         *                                                           *
     1684    14839         *************************************************************/
     1685    14840        /* Here we have the routine which will attempt to add a new shared
     1686    14841           program to the processor tables.  It will attempt to find a
     1687    14842           currently unused slot, but if one is not available, then the
     1688    14843           oldest slot in use by no users will be appropriated,
     1689    14844           and the 'old' program de-shared.
     1690    14845        */
     1691    14846    1   ADD_SHARED: PROC ALTRET;
     1692    14847
     1693    14848    2      PNUM = 0;
     1694    14849
     1695    14850        /* First, look for an empty slot */
     1696    14851    2      CALL JSU$SP_GETFREE(PNUM) ALTRET(NONE_AVAIL);
     1697    14852
     1698    14853
     1699    14854    2      PROC$ = ADDR (B$P$ -> B$P(PNUM));
     1700    14855    2      PROC$ -> B$P.UC(0) = 1;
     1701    14856    2      PROC$ -> B$P.INSTDATE(0) = 1;
     1702    14857    2      PROC$ -> B$P.CRDATE(0) = MODTIME;
     1703    14858    2      PROC$ -> B$P.NAME.COUNT(0) = NAME$->B$TEXTC.COUNT;
     1704    14859    2      PROC$ -> B$P.NAME.TEXT(0) = SUBSTR(NAME$->B$TEXTC.TEXT,0,PROC$->B$P.NAME.COUNT(0)
             14859               );
     1705    14860    2      PROC$ -> B$P.ACCT(0) = ACCT$->B$DWTXT;
     1706    14861    2      PROC$ -> B$P.FLGS(0) = %P_SP;
     1707    14862    2      IF B$HEAD.STATS AND SYSFLAG
     1708    14863    2      THEN PROC$ -> B$P.FLGS(0) = PROC$ -> B$P.FLGS(0) | %P_STATS;
     1709    14864    2      TPTR$ = PINCRW(B$ROSEG.TREE$,SIZEW(B$TREEHDR)+SIZEW(B$NODE));
     1710    14865    2      PROC$ -> B$P.LNK(0) = 0;             /* NO LINK YET                        */
     1711    14866    2      PROC$ -> B$P.LIB_LNK(0) = 0;         /* NO LIB_LNK                         */
     1712    14867    2      TEMP1 = PNUM;
     1713    14868    3      DO I = 2 TO NOOVER;                  /* DO FOR ALL OVERLAYS                */
     1714    14869    3           CALL JSU$SP_GETFREE(TEMP2) ALTRET(NONE_AVAIL);
     1715    14870
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:57   
     1716    14871    3           PROC$ = ADDR (B$P$ -> B$P(TEMP2));
     1717    14872    3           B_P.LNK(TEMP1) = TEMP2;         /* SET UP LINK IN PREV                */
     1718    14873    3           TEMP1 = TEMP2;
     1719    14874    3           PROC$ -> B$P.LNK(0) = 0;        /* ZERO FORWARD LINK                  */
     1720    14875    3           PROC$ -> B$P.PPC (0) = 0;       /* 0 PAGE COUNT                       */
     1721    14876    3           PROC$ -> B$P.NAME.COUNT(0) = B$NODE.NAME$ -> B$TEXTC.COUNT;
     1722    14877    3           PROC$ -> B$P.NAME.TEXT(0) = SUBSTR(B$NODE.NAME$->B$TEXTC.TEXT,0,PROC$->B$P.
             14877                    NAME.COUNT(0));
     1723    14878    3           PROC$ -> B$P.ACCT (0) = ACCT$ -> B$DWTXT;
     1724    14879    3           PROC$ -> B$P.NODE(0) = I - 1;
     1725    14880    3           PROC$ -> B$P.INSTDATE (0) = 1;  /* SET BUSY                           */
     1726    14881    3           PROC$ -> B$P.FLGS(0) = %P_OVRLY;
     1727    14882    3           PROC$ -> B$P.HPP(0) = 0;
     1728    14883    3           PROC$ -> B$P.FRQ(0) = 0;
     1729    14884    3           PROC$ -> B$P.LIB_LNK(0) = 0;
     1730    14885    3           TPTR$ = PINCRW(TPTR$,SIZEW(B$NODE));
     1731    14886    3           END;
     1732    14887
     1733    14888        /* Complete adding this program to the auto-shared table by entering
     1734    14889           its processor number into the alphabetically ordered B$LOOKUP
     1735    14890           table (used in binary search of currently shared programs.).    */
     1736    14891
     1737    14892    2      CALL JSA$INSERTPROC(NAME$,ACCT$,PNUM);
     1738    14893    2      RETURN;
     1739    14894    2   NONE_AVAIL:
     1740    14895        /*Set slot old and not in use. GETFREE will unravel olays. */
     1741    14896
     1742    14897    2      B_P.INSTDATE(PNUM) = 1;
     1743    14898    2      B_P.UC(PNUM) = 0;
     1744    14899
     1745    14900    2      ALTRETURN;
     1746    14901    2   END ADD_SHARED;
     1747    14902
     1748    14903        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:58   
     1749    14904        /*************************************************************
     1750    14905         *                                                           *
     1751    14906         *                      INSTALL_PROC                         *
     1752    14907         *                                                           *
     1753    14908         *************************************************************/
     1754    14909        /* The following entry is for installing a previously non-existant   */
     1755    14910        /* shared program.                                                   */
     1756    14911
     1757    14912    1   INSTALL_PROC: PROC;
     1758    14913        /* Reset "PAGE-BELONGS-TO-USER" bit in sctrl flags in pg tbl */
     1759    14914    2      TEMP2 = B$JIT.PLL + B$JIT.PCP - 1;   /* Last pg of proc                    */
     1760    14915    3      DO I = B$JIT.PLL TO TEMP2;
     1761    14916    3           B$UPT.SCTRL(I) = '0'B;
     1762    14917    3           IF HW_WSQ0PT THEN
     1763    14918    3                TEMP1 = B$IPHYMAP$->MM$IPHY_MAP(B$UPT.RPN(I));
     1764    14919    3           ELSE
     1765    14920    3                TEMP1 = B$UPT.RPN(I);
     1766    14921    3           IF I ~= TEMP2                   /* NOT AT TAIL                        */
     1767    14922    3           THEN
     1768    14923    3                IF HW_WSQ0PT THEN
     1769    14924    3                     MM$PPUT.PPNO(TEMP1) = B$IPHYMAP$->MM$IPHY_MAP(B$UPT.RPN(I+1));
     1770    14925    3                ELSE
     1771    14926    3                     MM$PPUT.PPNO(TEMP1) = B$UPT.RPN(I+1);
     1772    14927    3           ELSE
     1773    14928    3                MM$PPUT.PPNO(TEMP1) = 0;
     1774    14929    3           MM$PPUT.USER(TEMP1) = '0'B;
     1775    14930    3           MM$PPUT.PRC(TEMP1) = '1'B;      /* PAGE BELONGS TO PROC               */
     1776    14931    3           MM$PPUT.PNUM(TEMP1) = PNUM;     /* Save processor number              */
     1777    14932    3           END;
     1778    14933    2      PROC$ = ADDR (B$P$ -> B$P(PNUM));
     1779    14934    3      IF HW_WSQ0PT THEN DO;
     1780    14935    3           PROC$->B$P.HPP(0)=B$IPHYMAP$->MM$IPHY_MAP(B$UPT.RPN(B$JIT.PLL));
     1781    14936    3           PROC$->B$P.TPP(0)=B$IPHYMAP$->MM$IPHY_MAP(B$UPT.RPN(TEMP2));
     1782    14937    3           END;
     1783    14938    3      ELSE DO;
     1784    14939    3           PROC$->B$P.HPP(0)=B$UPT.RPN(B$JIT.PLL);
     1785    14940    3           PROC$->B$P.TPP(0)=B$UPT.RPN(TEMP2);
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:59   
     1786    14941    3           END;
     1787    14942    2      B$JIT.PPC = B$JIT.PPC - B$JIT.PCP;
     1788    14943    2      B$U.PCT = B$JIT.PPC;
     1789    14944    2      PROC$ -> B$P.PVA(0) = B$JIT.PLL;
     1790    14945    2      PROC$ -> B$P.HVA(0) = B$JIT.DDLL;
     1791    14946
     1792    14947
     1793    14948    2      PROC$ -> B$P.FRQ(0) = 1;
     1794    14949
     1795    14950        /* If this processor is overlaid, the overlays will be installed   */
     1796    14951        /* as they are accessed.  See JDP$SEGLD.                           */
     1797    14952
     1798    14953    2      B$U.APR = PNUM;
     1799    14954    2      PROC$ -> B$P.PPC(0) = B$JIT.PCP;
     1800    14955    2      CALL SSS$SYSTIME( PROC$ -> B$P.INSTDATE (0));
     1801    14956           %LOCK(G=J_PLOCK);
     1802    14959    2      MM$BYP.AUTOINUSE = MM$BYP.AUTOINUSE + PROC$ -> B$P.PPC(0);
     1803    14960           %UNLOCK (G=J_PLOCK);
     1804    14963    2      RETURN;
     1805    14964    2   END INSTALL_PROC;
     1806    14965
     1807    14966    1   END JST$CPEXIT;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:60   
--  Include file information  --

   UE_CP6.:E05TOU  is referenced.
   UD_SEV_C.:E05TOU  is referenced.
   MM_MACRO_M.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   MM$SYSGEN.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   MM_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B_UHJMAC_C.:E05TOU  is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   F_CP6.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MLSMAC_C.:E05TOU  is referenced.
   B_ULSMAC_C.:E05TOU  is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
   B$P.:E05TOU  cannot be made into a system file and is referenced.
   JS_CNTRL_R.:E05TOU  cannot be made into a system file and is referenced.
   FM$GRAN.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   SS_SCHED_C.:E05TOU  is referenced.
   J_ERRSET_C.:E05TOU  is referenced.
   FR_ERRORS_C.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   J_ERRORS_C.:E05TOU  is referenced.
   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   HF_LOCK_C.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JST$CPEXIT.
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:61   

   Procedure JST$CPEXIT requires 2406 words for executable code.
   Procedure JST$CPEXIT requires 48 words of local(AUTO) storage.

    No errors detected in file JST$STEP.:E05TSI    .

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:62   

 Object Unit name= JST$CPEXIT                                 File name= JST$STEP.:E05TOU
 UTS= JUL 29 '97 23:49:11.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$LM
    1  RoData even  UTS     32     40  JST$CPEXIT
    2   Proc  even  none  2406   4546  JST$CPEXIT
    3  RoData even  none    46     56  JST$CPEXIT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        5  JST$CPEXIT
     2     36                  yes      Std        5  JST$GETPROG
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:63   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 UDN$MAGIC
         yes           Std       0 JSU$RSTLMS
         yes           Std       0 JSE$ABORTM
         yes           Std       1 HFC$UNLOCK
 yes     yes           Std       3 SSR$REG
 yes     yes           Std       4 MME$WFVP
 yes     yes           Std       1 JSA$CLIB
 yes     yes           Std       0 JSR$RUNDOWN
         yes           Std       1 SSS$SYSTIME
         yes           Std       2 JSS$INITSS
         yes           Std       0 JSS$BACKSS
 yes     yes           Std       1 JSA$GETTCB
         yes           Std       0 JSD$DELUSR
         yes           Std       0 SSC$SERV
         yes           Std       0 SSC$MON
 yes     yes           Std       5 MMH$SMPRT
 yes     yes           Std       2 JSA$MAP_DATASEGS
 yes     yes           Std       5 MMG$SGVP
 yes     yes           Std       1 JSA$ASL
         yes           Std       3 SSU$DELTAGO
         yes           Std       0 UDB$AUTO
         yes           Std       0 UDN$MAGICSS
 yes     yes           Std       0 UMD$CLSDRIB
 yes     yes           Std       5 JSA$FINDSSP
 yes     yes           Std       0 SSQ$NUQUAN
         yes           Std       1 FMF$TRUNCM
 yes     yes           Std       1 JSA$DB
         yes           Std       1 HFC$LOCK
 yes     yes           Std       1 JSF$OPENLM
         yes           Std       1 JSU$WSTAR
 yes     yes           Std       5 MMH$GDS
 yes     yes           Std       6 JSF$READ_DS
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:64   
         yes           Std       2 JSA$RUNDSPC
 yes     yes           Std       4 MME$WGVP
 yes     yes           Std       1 M$MLIMIT
 yes     yes           Std       1 JSF$DCBCHK
         yes           Std       0 SSC$ACPENT
         yes           Std       0 FMM$ASSMRG
 yes     yes           Std       0 UMD$CHKOPN
         yes           Std       0 JSF$CLSLM
 yes     yes           Std       6 JSF$READ
 yes     yes           Std       5 JSA$FINDAUTO
         yes           Std       1 JSN$LTRAS
 yes     yes           Std       1 JSU$SP_GETFREE
 yes     yes           Std       5 JSA$INSERTPROC
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_5
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     HW_WSQ0PT                             M$LM                                  JS_SHARE_ALL
r    B$M$LM$                          r    B$ROSEG$                         r    B$SBUF1$
r    B$SDS0$                          r    B$SDS1$                          r    B$JIT$
r    B$USERLS$                        r    B$CPLS$                          r    B$DBLS$
r    B$USERIS$                        r    B$UPT$                           r    B$PPUT$
r    B$LS$                            r    B$MISC2$                         r    B$IPHYMAP$
     ES_PRIVMASK                           FR_SUMX                               FR_SUNM
     J_PLOCK                          r    J_SYSTXT                         r    J_SYS$
r    J_LOGON                               B$P$                                  B_MPT
     S$CU$                                 J_FPT_RESCTL                     r    MM_BYP$
     B_VECTNIL
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:65   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:66   


        1        1        /*M*   JST$STEP   Job Step Execution Control       */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0  */
        8        8
        9        9        JST$CPEXIT: PROC(NAME$,ACCT$,PASS$,PSN$,DEBUG$);

      9  2 000000   000000 700200 xent  JST$CPEXIT   TSX0  ! X66_AUTO_5
         2 000001   000060 000005                    ZERO    48,5

       10       10
       11       11                                                /* Input Parameters                   */
       12       12    1   DCL NAME$ PTR;
       13       13    1   DCL ACCT$ PTR;
       14       14    1   DCL PASS$ PTR;
       15       15    1   DCL PSN$ PTR;
       16       16    1   DCL DEBUG$ PTR;
       17       17
       18       18                                                /* AUTO Storage                       */
       19       19    1   DCL ASL$ PTR;
       20       20    1   DCL ASP$ PTR;
       21       21    1   DCL I SBIN;
       22       22    1   DCL NOOVER UBIN WORD;
       23       23    1   DCL SYSFLAG BIT(1);
       24       24    1   DCL SHARED_FLAG BIT(1);
       25       25    1   DCL TEMP1 SBIN;
       26       26    1   DCL TEMP2 SBIN;
       27       27    1   DCL TEMP3 SBIN;
       28       28    1   DCL ACCT_TYP REDEF TEMP3 UBIN BYTE;
       29       29    1   DCL 1 TEMP3_PTR REDEF TEMP3,
       30       30    1         2 * BIT(24),
       31       31    1         2 SEGID BIT(12);
       32       32    1   DCL TEMP3$ REDEF TEMP3 PTR;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:67   
       33       33    1   DCL MODTIME UBIN;
       34       34    1   DCL ERR UBIN;
       35       35    1   DCL TCBSZ UBIN;
       36       36    1   DCL INIT_ROSIZE UBIN;
       37       37    1   DCL ROSZ UBIN;
       38       38    1   DCL SEGSIZE UBIN;
       39       39    1   DCL RECSIZE UBIN;
       40       40    1   DCL PAGES SBIN;
       41       41    1   DCL LPTR$ PTR;
       42       42    1   DCL PNUM UBIN;
       43       43    1   DCL PTYPE BIT(18);
       44       44    1   DCL DSPTR$ PTR;
       45       45    1   DCL TPTR$ PTR;
       46       46    1   DCL LMDCB$ PTR;
       47       47    1   DCL PROC$ PTR;
       48       48    1   DCL ECC UBIN(36);                       /*Following used for deltago          */
       49       49    1   DCL 1 ECP,                              /* Fixed end of frame                 */
       50       50    1         2 ECCS UBIN(36),                  /* Ecc sub-code                       */
       51       51    1         2 EID UBIN(36),                   /* Event id                           */
       52       52    1         2 JERR BIT(36),                   /* JIT.ERR                            */
       53       53    1         2 P# UBIN(36);                    /* # of parameters                    */
       54       54        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:68   
       55       55
       56       56                                                /*  EXTERNAL ROUTINES                 */
       57       57    1   DCL JSD$DELUSR ENTRY;
       58       58    1   DCL JSE$ABORTM ENTRY;
       59       59    1   DCL JSF$CLSDCBS ENTRY;             /* Routine to close all dcbs except M$UC   */
       60       60    1   DCL JSU$RSTLMS ENTRY;              /* Routine to reset jit memory delimiters  */
       61       61    1   DCL JSU$RELMEM ENTRY(1);           /* Routine to free isr & data seg pages    */
       62       62    1   DCL JSA$ASL ENTRY(1) ALTRET;
       63       63    1   DCL JSA$CLIB ENTRY(1) ALTRET;
       64       64    1   DCL JSA$DB ENTRY(1) ALTRET;
       65       65    1   DCL JSA$GETTCB ENTRY(1) ALTRET;
       66       66    1   DCL JSA$RUNDSPC ENTRY(2);
       67       67    1   DCL JSA$MAP_DATASEGS ENTRY(2) ALTRET;
       68       68    1   DCL JSA$INSERTPROC ENTRY(5) ALTRET;
       69       69    1   DCL JSA$FINDSSP ENTRY(5) ALTRET;
       70       70    1   DCL JSA$FINDAUTO ENTRY(5) ALTRET;
       71       71    1   DCL JSU$RELFSEG ENTRY;                  /* Routine to free buffer segment     */
       72       72    1   DCL JSU$SP_GETFREE ENTRY(1) ALTRET;
       73       73    1   DCL JSU$GRAB_OLD ENTRY(1) ALTRET;
       74       74    1   DCL JSU$WSTAR ENTRY(1);
       75       75    1   DCL JSF$OPENLM ENTRY(1) ALTRET;         /* Routine to open M$LM               */
       76       76    1   DCL JSF$CLSLM ENTRY;                    /* Routine to close M$LM              */
       77       77    1   DCL JSS$INITSS ENTRY(2);                /* Routine to initialize ss frame     */
       78       78    1   DCL JSF$READ ENTRY(6) ALTRET;           /* Reads a record from run unit       */
       79       79    1   DCL JSF$READ_DS ENTRY(6) ALTRET;        /* Reads a record from run unit       */
       80       80    1   DCL JSF$DCBCHK ENTRY(1) ALTRET;         /* Routine to validate dcbs           */
       81       81    1   DCL FMR$SLIDE ENTRY(3);
       82       82    1   DCL MMG$SGVP ENTRY(5) ALTRET;           /* Seg-relative get virtual page      */
       83       83    1   DCL MME$WFVP ENTRY(4) ALTRET;           /* Wsq-relative free virtual page     */
       84       84    1   DCL MME$WGVP ENTRY(4) ALTRET;           /* Wsq-relative get virtual page      */
       85       85    1   DCL MMH$GDS ENTRY(5) ALTRET;
       86       86    1   DCL MMH$SMPRT ENTRY(5) ALTRET;
       87       87    1   DCL SSR$REG ENTRY(3) ALTRET;            /* Report event and give up           */
       88       88    1   DCL SSR$RUE ENTRY(4);
       89       89    1   DCL SSS$CACHE ENTRY;
       90       90    1   DCL SSS$CACHEBP ENTRY;
       91       91    1   DCL UDB$AUTO ENTRY;                     /* Reset auto & call SSS$SEXIT        */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:69   
       92       92    1   DCL SSU$DELTAGO ENTRY(3);          /* Routine to go to associated debugger    */
       93       93    1   DCL SSC$ACPENT ENTRY;                   /* Routine to give ctrl to cp         */
       94       94    1   DCL SSC$MON ENTRY;                      /* Set accnt'g mode to monitor xeq*/
       95       95    1   DCL SSC$SERV ENTRY;                     /* Set accnt'g mode to user service*/
       96       96    1   DCL SSQ$NUQUAN ENTRY ALTRET;            /* Give user new quantum accnt'g      */
       97       97    1   DCL FMM$ASSMRG ENTRY;                   /* Routine to merge assigns           */
       98       98    1   DCL FMF$TRUNCM ENTRY(1);
       99       99    1   DCL JSS$BACKSS ENTRY;
      100      100    1   DCL JSN$LTRAS ENTRY(1);
      101      101    1   DCL UDN$MAGIC ENTRY;
      102      102    1   DCL UDN$MAGICSS ENTRY;
      103      103    1   DCL UMD$CHKOPN ENTRY ALTRET;
      104      104    1   DCL UMD$CLSDRIB ENTRY ALTRET;
      105      105    1   DCL JSR$RUNDOWN ENTRY ALTRET;
      106      106    1   DCL SSS$SYSTIME ENTRY(1);
      107      107    1   DCL M$MLIMIT ENTRY(1) ALTRET;
      108      108
      109      109        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:70   
      110      110
      111      111        /* System string substitution and macro definitions */
      112      112
      113      113        %INCLUDE B$SS;
      114      292        %INCLUDE B_MACROS_C;                    /* General-purpose macros             */
      115      403        %INCLUDE B_SEGIDS_C;                    /* System segid definitions           */
      116      942        %INCLUDE HF_LOCK_C;
      117      956        %INCLUDE HF_DATA_R;
      118      999        %INCLUDE J_ERRORS_C;                    /* Execution control error mnemonics  */
      119     1086        %INCLUDE F_ERRORS_C;
      120     1326        %INCLUDE FR_ERRORS_C;
      121     1357        %INCLUDE J_ERRSET_C;                    /* Error-code-setting macros          */
      122     1377        %INCLUDE SS_SCHED_C;                    /* Scheduler event definitions        */
      123     1610        %INCLUDE CP_6_SUBS;                     /* File mgmt string substitutions     */
      124     2150        %INCLUDE FM$GRAN;
      125     2219        %FM$GRAN;
      126     2223
      127     2224
      128     2225        /* External data */
      129     2226    1   DCL M$LM DCB;
      130     2227
      131     2228
      132     2229        %INCLUDE JS_CNTRL_R;
      133     2263    1   DCL B$M$LM$ PTR SYMREF READONLY;
      134     2264    1   DCL B$ROSEG$ PTR SYMREF READONLY;
      135     2265    1   DCL B$SBUF1$ PTR SYMREF READONLY;
      136     2266    1   DCL B$SDS0$ PTR SYMREF READONLY;
      137     2267    1   DCL B$SDS1$ PTR SYMREF READONLY;
      138     2268    1   DCL B$JIT$ PTR SYMREF READONLY;
      139     2269    1   DCL B$USERLS$ PTR SYMREF READONLY;
      140     2270    1   DCL B$CPLS$ PTR SYMREF READONLY;
      141     2271    1   DCL B$DBLS$ PTR SYMREF READONLY;
      142     2272    1   DCL B$USERIS$ PTR SYMREF READONLY;
      143     2273    1   DCL B$UPT$ PTR SYMREF READONLY;
      144     2274    1   DCL B$PPUT$ PTR SYMREF READONLY;
      145     2275    1   DCL B$LS$ PTR SYMREF READONLY;
      146     2276    1   DCL B$MISC2$ PTR SYMREF READONLY;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:71   
      147     2277    1   DCL B$IPHYMAP$ PTR SYMREF READONLY;
      148     2278
      149     2279    1   DCL ES_PRIVMASK BIT(36) SYMREF;
      150     2280    1   DCL FR_SUMX SBIN WORD SYMREF;
      151     2281    1   DCL FR_SUNM(0:0) CHAR(8) SYMREF;
      152     2282
      153     2283    1   DCL J_PLOCK SYMREF BIT(72) DALIGNED;
      154     2284    1   DCL J_SYSTXT CHAR(8) SYMREF READONLY;
      155     2285    1   DCL J_SYS$ PTR SYMREF READONLY;
      156     2286    1   DCL 1 J_LOGON SYMREF READONLY,
      157     2287    1         2 CNT UBIN(9) UNAL,
      158     2288    1         2 NAME CHAR(7) UNAL;
      159     2289
      160     2290        %INCLUDE B$P;
      161     2374        %INCLUDE B_MAGIC_C;
      162     2492        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
      163     2585
      164     2586        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:72   
      165     2587        /* Based structures */
      166     2588
      167     2589        %INCLUDE B$JIT;
      168     3192        %INCLUDE B$ROSEG;                       /* Read-only segment definitions      */
      169     3255        %INCLUDE B$USER;                        /* User table definitions             */
      170     3471        %B$USERREFS;
      171     3475        %INCLUDE B_ULSMAC_C;
      172     4584        %INCLUDE B_MLSMAC_C;
      173     5526        %B_USRULS (FPTN=B$ULNK,STCLASS=BASED);
      174     5725        %B_MLS(FPTN=B$MLS,STCLASS=BASED);
      175     6540        %INCLUDE F$DCB;                         /* Based dcb definition               */
      176     6589        %INCLUDE F_CP6;
      177     7614        %FPT_RESCTL (FPTN=FPT$RESCTL,STCLASS="BASED(TPTR$)");
      178     7631        %VLP_PSEUDO (FPTN=VLP$PS,STCLASS="BASED(LPTR$)",N=1);
      179     7647        %FPT_RESCTL (FPTN=J_FPT_RESCTL,STCLASS=SYMREF);
      180     7664
      181     7665        %INCLUDE B$OBJECT_C;                    /* Based definition of ru head record */
      182    11095        %B$RECORDSUBS;
      183    11123        %INCLUDE B$MAP;
      184    11222    1   DCL 1 B$TCB DALIGNED BASED,
      185    11223    1         2 ALT$,                           /* Altret frame pointer               */
      186    11224    1           3 OFFSET UBIN(18) UNAL,
      187    11225    1           3 * UBIN(6) UNAL,
      188    11226    1           3 SID BIT(12) UNAL,
      189    11227    1         2 STK$,                           /* Tcb frame pointer                  */
      190    11228    1           3 OFFSET UBIN(18) UNAL,
      191    11229    1           3 * UBIN(6) UNAL,
      192    11230    1           3 SID BIT(12) UNAL,
      193    11231    1         2 TCBAVSZ UBIN(18) UNAL,          /* Avail tcb space                    */
      194    11232    1         2 CURSZ UBIN(18) UNAL,            /* Current tcb frame size             */
      195    11233    1         2 * UBIN(36),                     /* Filler to keep frames daligned     */
      196    11234    1         2 ALTFRM,                         /* Altret frame space                 */
      197    11235    1           3 UNUSED SBIN HALF UNAL,
      198    11236    1           3 CODE SBIN HALF UNAL,
      199    11237    1           3 WORDS(0:66) UBIN(36);
      200    11238    1   DCL B$PTR PTR BASED;
      201    11239    1   DCL DCB$(0:0) PTR BASED ALIGNED;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:73   
      202    11240    1   DCL DCB_WORD(0:0) UBIN BASED ALIGNED;
      203    11241        %INCLUDE B_UHJMAC_C;
      204    11570        %B_USDS (FPTN=B$SDS,STCLASS=BASED);
      205    11622    1   DCL B$DESCR BIT(72) BASED DALIGNED;
      206    11623    1   DCL B$DWTXT CHAR(8) BASED ALIGNED;
      207    11624    1   DCL B$TXT6 CHAR(6) BASED ALIGNED;
      208    11625        %T01DESCR (NAME=B$$DESCR);
      209    11633        %INCLUDE MM_DATA_R;                /* This is down here cause of its %subs    */
      210    12153
      211    12154        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:74   
      212    12155        /* To set JIT.ERR */
      213    12156        %INCLUDE UD_SEV_C;
      214    12170        %SUB FCG#='1223'O;
      215    12171        %SUB MID# = '24'O;
      216    12172        %ERRCODE (NAME=EBADFNME,COD#=%E$BADFNME);
      217    12180        %ERRCODE (NAME=EBADSSP,COD#=%E$BADSSP);
      218    12188        %ERRCODE (NAME=EBADDBUGR,COD#=%E$BADDBUGR);
      219    12196        %ERRCODE (NAME=EPROGTOOBIG,COD#=%E$PROGTOOBIG);
      220    12204        %ERRCODE (NAME=ENOSHRLIB,COD#=%E$NOSHRLIB);
      221    12212        %ERRCODE (NAME=ENOTANRU,COD#=%E$NOTANRU);
      222    12220        %ERRCODE (NAME=ENOSUCHASL,COD#=%E$NOSUCHASL);
      223    12228        %ERRCODE (NAME=ELDLNKSSP,COD#=%E$LDLNKSSP);
      224    12236        %ERRCODE (NAME=EBADLOGON,COD#=%E$PROCACCESS);
      225    12244        %ERRCODE (NAME=ERESTRICTED,COD#=%E$RESTRICTED);
      226    12252        %ERRCODE (NAME=ENSTDINVOC,COD#=%E$NSTDINVOC);
      227    12260        %ERRCODE (NAME=EBADHEAD,COD#=%E$BADHEAD);
      228    12268        %ERRCODE (NAME=EHALFHEAD,COD#=%E$HALFHEAD);
      229    12276        %ERRCODE (NAME=EBADROSEG,COD#=%E$BADROSEG);
      230    12284        %ERRCODE (NAME=ETCBSZBAD,COD#=%E$TCBSZBAD);
      231    12292        %ERRCODE (NAME=EDCBSZBAD,COD#=%E$DCBSZBAD);
      232    12300        %ERRCODE (NAME=EHALFTREE,COD#=%E$HALFTREE);
      233    12308        %ERRCODE (NAME=EDEBUGXONLY,COD#=%E$DEBUGXONLY);
      234    12316        %ERRCODE (NAME=EBSUNM,COD#=%E$BSUNM);
      235    12324        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:75   
      236    12325        /* Invocations of system macros */
      237    12326
      238    12327    1   DCL 1 B$TEXTC BASED(NAME$),
      239    12328    1         2 COUNT UBIN BYTE CALIGNED,
      240    12329    1         2 TEXT CHAR(31);
      241    12330        %B$HEAD;
      242    12530        %B$TREE_TABLE(HDR_NAME=B$TREEHDR,NODE_NAME=B$NODE);
      243    12588
      244    12589        %RU_FLAVORS;
      245    12595
      246    12596        /* The following is from the B$OBJECT_C source file for B03.
      247    12597           The words that are not the same in the old and new HEAD
      248    12598           record format are munged by STEP to the space in SBUF1
      249    12599           following the head record that is read from the run-unit.
      250    12600           This allows us to be concerned with the HEAD record change
      251    12601           in one centralized place.
      252    12602        */
      253    12603    1   DCL 1 B$OLDHEAD BASED ALIGNED,
      254    12604    1         2 PRIV BIT(36),
      255    12605    1         2 VPPGS UBIN BYTE UNAL,
      256    12606    1         2 VDPGS UBIN BYTE UNAL,
      257    12607    1         2 S BIT(1) UNAL,
      258    12608    1         2 LIB BIT(1) UNAL,
      259    12609    1         2 ASL BIT(1) UNAL,
      260    12610    1         2 OVRL BIT(1) UNAL,
      261    12611    1         2 PROCACC BIT(1) UNAL,
      262    12612    1         2 NOCHGPMEM BIT(1) UNAL,
      263    12613    1         2 PROCSURCHG BIT(1) UNAL,
      264    12614    1         2 RESTPROC BIT(1) UNAL,
      265    12615    1         2 STRONG_LOCK BIT(1) UNAL,
      266    12616    1         2 SEV UBIN BYTE UNAL,
      267    12617    1         2 RDATA UBIN HALF UNAL,
      268    12618    1         2 RPROC UBIN HALF UNAL,
      269    12619    1         2 BIAS UBIN HALF UNAL,
      270    12620    1         2 START UBIN HALF UNAL,
      271    12621    1         2 UDCBNUM UBIN HALF UNAL,
      272    12622    1         2 DCBRES UBIN HALF UNAL,
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:76   
      273    12623    1         2 TREEDISP UBIN HALF UNAL,
      274    12624    1         2 TCBSIZE UBIN HALF UNAL,
      275    12625    1         2 PRECSIZE UBIN HALF UNAL,
      276    12626    1         2 NRECSIZE UBIN HALF UNAL,
      277    12627    1         2 EPRECSIZE UBIN HALF UNAL,
      278    12628    1         2 EDRECSIZE UBIN HALF UNAL,
      279    12629    1         2 SDRECSIZE UBIN HALF UNAL,
      280    12630    1         2 ROSIZE UBIN HALF UNAL,
      281    12631    1         2 VERSION# UBIN BYTE UNAL,
      282    12632    1         2 MAP_BITS_A(0:2) UNAL,
      283    12633    1           3 MULTIPLE BIT(1) UNAL,
      284    12634    1           3 CON BIT(1) UNAL,
      285    12635    1           3 PRIMARY BIT(1) UNAL,
      286    12636    1           3 SECONDARY BIT(1) UNAL,
      287    12637    1         2 * BIT(8)  UNAL,
      288    12638    1         2 NSTDINVOC BIT(1) UNAL,
      289    12639    1         2 REMOVE_ENTDEF BIT(1) UNAL,
      290    12640    1         2 REMOVE_SYMDEF BIT(1) UNAL,
      291    12641    1         2 STATS BIT(1) UNAL,
      292    12642    1         2 * BIT(3) UNAL,
      293    12643    1         2 DATA_SEG (0:5),
      294    12644    1           3 SIZ UBIN HALF UNAL,
      295    12645    1           3 * UBIN(9) UNAL,
      296    12646    1           3 PROTECTION UBIN(9) UNAL,
      297    12647    1         2 LOCK(0:71) BIT(1) UNAL,
      298    12648    1         2 FLAVOR UBIN BYTE UNAL,
      299    12649    1         2 * UBIN(27) UNAL,
      300    12650    1         2 * (0:4) UBIN WORD UNAL,
      301    12651    1         2 LIBNAME,
      302    12652    1           3 CNT UBIN BYTE UNAL,
      303    12653    1           3 TXT CHAR(31) UNAL,
      304    12654    1         2 ASLNAME,
      305    12655    1           3 CNT UBIN BYTE UNAL,
      306    12656    1           3 TXT CHAR(31) UNAL;
      307    12657
      308    12658        /* Some handy-dandy, typing-saving string substitutions */
      309    12659        %SUB   B$JIT=B$JIT$->B$JIT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:77   
      310    12660        %SUB   B$ROSEG=B$ROSEG$->B$ROSEG;
      311    12661        %SUB   B$HEAD=B$SBUF1$->B$HEAD;
      312    12662        %SUB   B$SS=B_MPT.SS$->B$SS;
      313    12663        %SUB   B_P=B$P$->B$P;
      314    12664        %SUB   B$LOOKUP=B$LOOKUP$->B$LOOKUP;
      315    12665        %SUB   B$TREEHDR=B$ROSEG$->B$ROSEG.TREE$->B$TREEHDR;
      316    12666        %SUB   B$NODE=TPTR$->B$NODE;
      317    12667        %SUB   MM$PPUT=B$PPUT$->MM$PPUT;
      318    12668        %SUB   B$UPT=B$UPT$->B$MAP;
      319    12669        %SUB   B$U=S$CU$->B$U;
      320    12670
      321    12671        %LIST;
      322    12672        %INIT_RO_SIZE;                          /* Get 'INITROSIZE' from B$ROSEG      */
             12673        %SUB   INITROSIZE ="(POFFW(B$ROSEG$->B$ROSEG.DCBPTR$,B$ROSEG$)+%M$1STDCB#)";
      323    12675        %PLIST;
      324    12676
      325    12677        %INCLUDE UE_CP6;
      326    13368        %SUB_EXC;
      327    13415        %SUB_ECCDELTA;
      328    13452        %EQU_TCB_SZ;
      329    13456
      330    13457        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:78   
      331    13458        /*************************************************************
      332    13459         *                                                           *
      333    13460         *                      JST$CPEXIT                           *
      334    13461         *                                                           *
      335    13462         *************************************************************/
      336    13463        /*F*   NAME:   JST$CPEXIT
      337    13464               PURPOSE:  To associate a new user with his Command Processor.
      338    13465                         Called by SSQ$QEND when CPIC set in the user's
      339    13466                         flags and ACP = 0.
      340    13467        */
      341    13468    1      CALL UDN$MAGIC;

  13468  2 000002   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000003   000000 701000 xent               TSX1    UDN$MAGIC
         2 000004   000000 011000                    NOP     0

      342    13469    1      B$U.FLG = B$U.FLG &~ %U_CPIC;

  13469  2 000005   000023 236000 1                  LDQ     EBSUNM+1
         2 000006   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 000007   000000 470400 xsym               LDP0    S$CU$
         2 000010   000000 376100                    ANQ     0,,PR0
         2 000011   000000 756100                    STQ     0,,PR0

      343    13470                                                /* Reset cp-in-control                */
      344    13471        /* Mark this guy "at job step" for his first excursion thru STEP.  */
      345    13472    1      B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 | %CP_JSTEP#;

  13472  2 000012   000000 470400 xsym               LDP0    B$JIT$
         2 000013   000143 236100                    LDQ     99,,PR0
         2 000014   000024 276000 1                  ORQ     EBSUNM+2
         2 000015   000143 756100                    STQ     99,,PR0

      346    13473
      347    13474    1      IF B$JIT.RUNFLAGS = '0'B

  13474  2 000016   000314 236100                    LDQ     204,,PR0
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:79   
         2 000017   777000 316007                    CANQ    -512,DL
         2 000020   000023 601000 2                  TNZ     s:13477

      348    13475    1      THEN B$JIT.RUNFLAGS = %RUN_MON#;

  13475  2 000021   001000 236007                    LDQ     512,DL
         2 000022   000314 552110                    STBQ    204,'10'O,PR0

      349    13476
      350    13477    1      IF NOT (B$JIT.RUNFLAGS & %RUN_MON#)

  13477  2 000023   000314 236100                    LDQ     204,,PR0
         2 000024   000022 736000                    QLS     18
         2 000025   777000 376003                    ANQ     -512,DU
         2 000026   001000 376003                    ANQ     512,DU
         2 000027   000032 601000 2                  TNZ     s:13480

      351    13478    1      THEN B$JIT.PRIV.ACTIVE = B$JIT.PRIV.JOB; /* Give current privileges        */

  13478  2 000030   000015 236100                    LDQ     13,,PR0
         2 000031   000013 756100                    STQ     11,,PR0

      352    13479
      353    13480    1      CALL JSU$RSTLMS;                     /* Reset jit memory delimiters        */

  13480  2 000032   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000033   000000 701000 xent               TSX1    JSU$RSTLMS
         2 000034   000000 011000                    NOP     0
         2 000035   000040 710000 2                  TRA     s:13496

      354    13481        /* Fall through to JST$GETPROC processing */
      355    13482
      356    13483        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:80   
      357    13484        /*************************************************************
      358    13485         *                                                           *
      359    13486         *                      JST$GETPROG                          *
      360    13487         *                                                           *
      361    13488         *************************************************************/
      362    13489        /*F*   NAME:   JST$GETPROG
      363    13490               PURPOSE: To associate any type or combination of shared or
      364    13491                       unshared programs with a user.
      365    13492        */
      366    13493
      367    13494    1   JST$GETPROG: ENTRY(NAME$,ACCT$,PASS$,PSN$,DEBUG$);

  13494  2 000036   000000 700200 xent  JST$GETPROG  TSX0  ! X66_AUTO_5
         2 000037   000060 000005                    ZERO    48,5

      368    13495
      369    13496    1      B$U.FLG = B$U.FLG | %U_STIP;

  13496  2 000040   000000 470400 xsym               LDP0    S$CU$
         2 000041   000000 236100                    LDQ     0,,PR0
         2 000042   000025 276000 1                  ORQ     EBSUNM+3
         2 000043   000000 756100                    STQ     0,,PR0

      370    13497    1      CALL UMD$CLSDRIB;

  13497  2 000044   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000045   000000 701000 xent               TSX1    UMD$CLSDRIB
         2 000046   000000 011000                    NOP     0

      371    13498
      372    13499        /* If NAME$ is null, assume we're going for a debugger and not at
      373    13500           Job step. If this assumption is wrong, we'll eventually error.
      374    13501           If neither NAME or DEBUG specified, exit immediately to ABORTM.
      375    13502        */
      376    13503    1      IF NAME$ = ADDR(NIL)

  13503  2 000047   200003 470500                    LDP0    @NAME$,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:81   
         2 000050   000000 236100                    LDQ     0,,PR0
         2 000051   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000052   000056 601000 2                  TNZ     s:13505

      377    13504    1      THEN NAME$ = DEBUG$;

  13504  2 000053   200007 471500                    LDP1    @DEBUG$,,AUTO
         2 000054   100000 236100                    LDQ     0,,PR1
         2 000055   000000 756100                    STQ     0,,PR0

      378    13505    1      IF NAME$ = ADDR(NIL)

  13505  2 000056   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000057   000066 601000 2                  TNZ     s:13516

      379    13506    2      THEN DO;

      380    13507    2           B$JIT.ERR=EBADFNME;

  13507  2 000060   000000 236000 1                  LDQ     EBADFNME
         2 000061   000000 471400 xsym               LDP1    B$JIT$
         2 000062   100012 756100                    STQ     10,,PR1

      381    13508    2           CALL JSE$ABORTM;

  13508  2 000063   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000064   000000 701000 xent               TSX1    JSE$ABORTM
         2 000065   000000 011000                    NOP     0

      382    13509    2           END;

      383    13510        /*E*    ERROR:  JST-E$BADFNME-E
      384    13511                MESSAGE: Invalid run unit name% %U1%% %FN%
      385    13512        */
      386    13513
      387    13514        /* Set SYSFLAG if run-unit is from :SYS.
      388    13515        */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:82   
      389    13516    1      IF ACCT$->B$DWTXT = J_SYSTXT

  13516  2 000066   200004 470500                    LDP0    @ACCT$,,AUTO
         2 000067   000000 471500                    LDP1    0,,PR0
         2 000070   040000 106500                    CMPC    fill='040'O
         2 000071   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         2 000072   000000 000010 xsym               ADSC9   J_SYSTXT                 cn=0,n=8
         2 000073   000077 601000 2                  TNZ     s:13518

      390    13517    1      THEN SYSFLAG = '1'B;

  13517  2 000074   400000 236003                    LDQ     -131072,DU
         2 000075   200014 756100                    STQ     SYSFLAG,,AUTO
         2 000076   000100 710000 2                  TRA     s:13519

      391    13518    1      ELSE SYSFLAG = '0'B;

  13518  2 000077   200014 450100                    STZ     SYSFLAG,,AUTO

      392    13519    1      SHARED_FLAG = %TRUE;

  13519  2 000100   400000 236003                    LDQ     -131072,DU
         2 000101   200015 756100                    STQ     SHARED_FLAG,,AUTO

      393    13520    1      IF SUBSTR (NAME$ -> B$TEXTC.TEXT , 0 , 1) = '*'

  13520  2 000102   200003 473500                    LDP3    @NAME$,,AUTO
         2 000103   300000 474500                    LDP4    0,,PR3
         2 000104   040000 106500                    CMPC    fill='040'O
         2 000105   400000 200001                    ADSC9   0,,PR4                   cn=1,n=1
         2 000106   000000 000001 3                  ADSC9   0                        cn=0,n=1
         2 000107   000112 601000 2                  TNZ     s:13528

      394    13521    2      THEN DO;

      395    13522    2           SYSFLAG = %FALSE;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:83   
  13522  2 000110   200014 450100                    STZ     SYSFLAG,,AUTO

      396    13523    2           SHARED_FLAG = %FALSE;

  13523  2 000111   200015 450100                    STZ     SHARED_FLAG,,AUTO

      397    13524    2           END;

      398    13525
      399    13526        /* Only compute INIT_ROSIZE once.
      400    13527        */
      401    13528    1      INIT_ROSIZE = INITROSIZE%;

  13528  2 000112   000000 235000 xsym               LDA     B$ROSEG$
         2 000113   000022 771000                    ARL     18
         2 000114   200050 755100                    STA     ECP+7,,AUTO
         2 000115   000000 471400 xsym               LDP1    B$ROSEG$
         2 000116   100000 236100                    LDQ     0,,PR1
         2 000117   000022 772000                    QRL     18
         2 000120   200050 136100                    SBLQ    ECP+7,,AUTO
         2 000121   000012 036007                    ADLQ    10,DL
         2 000122   200024 756100                    STQ     INIT_ROSIZE,,AUTO

      402    13529
      403    13530        /* See if the program is special shared.
      404    13531        */
      405    13532    1      PTYPE='0'B;

  13532  2 000123   000000 220003                    LDX0    0,DU
         2 000124   200033 740100                    STX0    PTYPE,,AUTO

      406    13533    1      PNUM = 0;

  13533  2 000125   200032 450100                    STZ     PNUM,,AUTO

      407    13534    1      ERR = 0;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:84   
  13534  2 000126   200022 450100                    STZ     ERR,,AUTO

      408    13535    1      IF SYSFLAG

  13535  2 000127   200014 234100                    SZN     SYSFLAG,,AUTO
         2 000130   000146 605000 2                  TPL     s:13540

      409    13536    1      THEN
      410    13537    1           CALL JSA$FINDSSP (NAME$,ACCT$,PNUM,PTYPE,ERR);

  13537  2 000131   200022 634500                    EPPR4   ERR,,AUTO
         2 000132   200054 454500                    STP4    ECP+11,,AUTO
         2 000133   200033 635500                    EPPR5   PTYPE,,AUTO
         2 000134   200053 455500                    STP5    ECP+10,,AUTO
         2 000135   200032 636500                    EPPR6   PNUM,,AUTO
         2 000136   200052 456500                    STP6    ECP+9,,AUTO
         2 000137   200004 236100                    LDQ     @ACCT$,,AUTO
         2 000140   200003 235100                    LDA     @NAME$,,AUTO
         2 000141   200050 757100                    STAQ    ECP+7,,AUTO
         2 000142   200050 630500                    EPPR0   ECP+7,,AUTO
         2 000143   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000144   000000 701000 xent               TSX1    JSA$FINDSSP
         2 000145   000000 011000                    NOP     0

      411    13538
      412    13539        /* If the cp's dsegs are there, we never decremented B$P.UC in JSA$RUNDSSP */
      413    13540    1      IF PTYPE&%P_CP AND B$UPT.RPN(%CPDSEGLO) ~= %FPMC THEN GOTO NEVER_DECRD;

  13540  2 000146   200033 220100                    LDX0    PTYPE,,AUTO
         2 000147   400000 360003                    ANX0    -131072,DU
         2 000150   000155 600000 2                  TZE     s:13542
         2 000151   000000 470400 xsym               LDP0    B$UPT$
         2 000152   001010 220100                    LDX0    520,,PR0
         2 000153   777777 100003                    CMPX0   -1,DU
         2 000154   000171 601000 2                  TNZ     NEVER_DECRD

      414    13541           %LOCK (G=J_PLOCK);
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:85   

  13542  2 000155   000001 630400 3                  EPPR0   1
         2 000156   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000157   000000 701000 xent               TSX1    HFC$LOCK
         2 000160   000000 011000                    NOP     0

      415    13544    1      B_P.UC(PNUM) = B_P.UC(PNUM) + 1;     /* LOCK IT                            */

  13544  2 000161   200032 236100                    LDQ     PNUM,,AUTO
         2 000162   000042 402007                    MPY     34,DL
         2 000163   000000 470400 xsym               LDP0    B$P$
         2 000164   000000 054106                    AOS     0,QL,PR0

      416    13545           %UNLOCK (G=J_PLOCK);

  13546  2 000165   000001 630400 3                  EPPR0   1
         2 000166   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000167   000000 701000 xent               TSX1    HFC$UNLOCK
         2 000170   000000 011000                    NOP     0

  13544  2 000171                       NEVER_DECRD  null
      417    13548    1   NEVER_DECRD:;
      418    13549
      419    13550        /* Set job peak for temp disk (even when on the way to the CP).
      420    13551        */
      421    13552    1      IF B$JIT.STMPDPPK > B$JIT.JTMPDPPK THEN B$JIT.JTMPDPPK=B$JIT.STMPDPPK;

  13552  2 000171   000000 470400 xsym               LDP0    B$JIT$
         2 000172   000236 236100                    LDQ     158,,PR0
         2 000173   000237 116100                    CMPQ    159,,PR0
         2 000174   000176 604400 2                  TMOZ    s:13553

  13552  2 000175   000237 756100                    STQ     159,,PR0

      422    13553    1      IF B$JIT.FBUL < 5 THEN B$JIT.FBUL = 5;

  13553  2 000176   000205 720100                    LXL0    133,,PR0
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:86   
         2 000177   000005 100003                    CMPX0   5,DU
         2 000200   000203 603000 2                  TRC     s:13558

  13553  2 000201   000005 221003                    LDX1    5,DU
         2 000202   000205 441100                    SXL1    133,,PR0

      423    13554
      424    13555        /* If this is the 1st CPEXIT and is not to another command proc-
      425    13556           essor, then do a rundown to get rid of the CP's privileges.
      426    13557        */
      427    13558    1      IF (B$JIT.STEPS = 0)

  13558  2 000203   000315 720100                    LXL0    205,,PR0
         2 000204   000216 601000 2                  TNZ     s:13567
         2 000205   000143 236100                    LDQ     99,,PR0
         2 000206   000024 376000 1                  ANQ     EBSUNM+2
         2 000207   000216 600000 2                  TZE     s:13567
         2 000210   200033 221100                    LDX1    PTYPE,,AUTO
         2 000211   400000 361003                    ANX1    -131072,DU
         2 000212   000216 601000 2                  TNZ     s:13567

      428    13559    1        AND (B$JIT.CPFLAGS1 & %CP_JSTEP#)
      429    13560    1        AND NOT (PTYPE & %P_CP)
      430    13561    1      THEN CALL JSR$RUNDOWN;

  13561  2 000213   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000214   000000 701000 xent               TSX1    JSR$RUNDOWN
         2 000215   000000 011000                    NOP     0

      431    13562
      432    13563        /*
      433    13564           If this is to be the final exit to a Logoff Command Processor,
      434    13565           enforce it now.
      435    13566        */
      436    13567    1      IF (B$JIT.JUNK & %JJ_LOGOFF#)

  13567  2 000216   000000 470400 xsym               LDP0    B$JIT$
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:87   
         2 000217   000315 220100                    LDX0    205,,PR0
         2 000220   000200 360003                    ANX0    128,DU
         2 000221   000233 600000 2                  TZE     s:13588
         2 000222   200033 220100                    LDX0    PTYPE,,AUTO
         2 000223   400000 360003                    ANX0    -131072,DU
         2 000224   000233 601000 2                  TNZ     s:13588

      437    13568    1        AND NOT (PTYPE & %P_CP)
      438    13569    2      THEN DO;

      439    13570    2           CALL JSR$RUNDOWN;

  13570  2 000225   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000226   000000 701000 xent               TSX1    JSR$RUNDOWN
         2 000227   000000 011000                    NOP     0

      440    13571    2           CALL JSD$DELUSR;

  13571  2 000230   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000231   000000 701000 xent               TSX1    JSD$DELUSR
         2 000232   000000 011000                    NOP     0

      441    13572    2           END;

      442    13573        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:88   
      443    13574        /*************************************************************
      444    13575         *                                                           *
      445    13576         *     DO IF AUTO SHARED PROCESSOR OR FETCHABLE RUN UNIT     *
      446    13577         *                                                           *
      447    13578         *************************************************************/
      448    13579        /* Here begins a fairly large IF...THEN...ELSE clause:  it performs
      449    13580           some decidedly different processing based on whether the thing
      450    13581           being accessed is special shared, or an
      451    13582           auto shared or unshared run unit.
      452    13583        */
      453    13584
      454    13585        /* The first half of this clause handles auto shared or
      455    13586           unshared run-units.
      456    13587        */
      457    13588    1      IF (PNUM = 0)

  13588  2 000233   200032 235100                    LDA     PNUM,,AUTO
         2 000234   002643 601000 2                  TNZ     s:14423

      458    13589    2      THEN DO;

      459    13590
      460    13591        /*  If we are not at Job Step, the user must have thought he
      461    13592            was asking for a debugger.  Probably the command processor
      462    13593            neglected to do a 'QUIT'.  Exit immediately to ABORTM.
      463    13594        */
      464    13595    2           IF NOT (B$JIT.RUNFLAGS & %RUN_MON#)

  13595  2 000235   000000 470400 xsym               LDP0    B$JIT$
         2 000236   000314 236100                    LDQ     204,,PR0
         2 000237   000022 736000                    QLS     18
         2 000240   777000 376003                    ANQ     -512,DU
         2 000241   001000 376003                    ANQ     512,DU
         2 000242   000246 601000 2                  TNZ     s:13606

      465    13596    3           THEN DO;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:89   
      466    13597    3                B$JIT.ERR=EBADDBUGR;

  13597  2 000243   000002 236000 1                  LDQ     EBADDBUGR
         2 000244   000012 756100                    STQ     10,,PR0

      467    13598    3                GOTO SSP_ERR;

  13598  2 000245   003712 710000 2                  TRA     SSP_ERR

      468    13599    3                END;
      469    13600        /*E*    ERROR:  JST-E$BADDBUGR-E
      470    13601                MESSAGE: Invalid Debugger name.
      471    13602        */
      472    13603
      473    13604        /* Reset Processor normal exit in case the CP forgot to do so.
      474    13605        */
      475    13606    2           B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 &~ %CP_EXIT#);

  13606  2 000246   000026 236000 1                  LDQ     EBSUNM+4
         2 000247   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 000250   000143 376100                    ANQ     99,,PR0
         2 000251   000143 756100                    STQ     99,,PR0

      476    13607
      477    13608        /* Open M$LM to point to the processor/user program in question.
      478    13609        */
      479    13610    2           CALL JSF$CLSLM;

  13610  2 000252   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000253   000000 701000 xent               TSX1    JSF$CLSLM
         2 000254   000000 011000                    NOP     0

      480    13611    2           LMDCB$ = B$M$LM$;

  13611  2 000255   000000 236000 xsym               LDQ     B$M$LM$
         2 000256   200036 756100                    STQ     LMDCB$,,AUTO

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:90   
      481    13612    2           LMDCB$->F$DCB.NAME.L = NAME$->B$TEXTC.COUNT;

  13612  2 000257   200003 470500                    LDP0    @NAME$,,AUTO
         2 000260   000000 471500                    LDP1    0,,PR0
         2 000261   200036 473500                    LDP3    LMDCB$,,AUTO
         2 000262   000100 100500                    MLR     fill='000'O
         2 000263   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 000264   300010 000001                    ADSC9   8,,PR3                   cn=0,n=1

      482    13613    2           LMDCB$->F$DCB.NAME.C = SUBSTR(NAME$->B$TEXTC.TEXT,0,LMDCB$->F$DCB.NAME.L);

  13613  2 000265   000000 471500                    LDP1    0,,PR0
         2 000266   300010 236100                    LDQ     8,,PR3
         2 000267   000033 772000                    QRL     27
         2 000270   000000 620006                    EAX0    0,QL
         2 000271   040100 100540                    MLR     fill='040'O
         2 000272   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         2 000273   300010 200037                    ADSC9   8,,PR3                   cn=1,n=31

      483    13614    2           LMDCB$->F$DCB.ACCT = ACCT$->B$DWTXT;

  13614  2 000274   200004 471500                    LDP1    @ACCT$,,AUTO
         2 000275   100000 474500                    LDP4    0,,PR1
         2 000276   040100 100500                    MLR     fill='040'O
         2 000277   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
         2 000300   300020 000010                    ADSC9   16,,PR3                  cn=0,n=8

      484    13615    2           IF PASS$ = ADDR(NIL)

  13615  2 000301   200005 474500                    LDP4    @PASS$,,AUTO
         2 000302   400000 236100                    LDQ     0,,PR4
         2 000303   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000304   000311 601000 2                  TNZ     s:13617

      485    13616    2           THEN LMDCB$->F$DCB.PASS    = ' ';

  13616  2 000305   000035 235000 xsym               LDA     B_VECTNIL+29
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:91   
         2 000306   000035 236000 xsym               LDQ     B_VECTNIL+29
         2 000307   300022 757100                    STAQ    18,,PR3
         2 000310   000315 710000 2                  TRA     s:13618

      486    13617    2           ELSE LMDCB$->F$DCB.PASS    = PASS$->B$DWTXT;

  13617  2 000311   400000 475500                    LDP5    0,,PR4
         2 000312   040100 100500                    MLR     fill='040'O
         2 000313   500000 000010                    ADSC9   0,,PR5                   cn=0,n=8
         2 000314   300022 000010                    ADSC9   18,,PR3                  cn=0,n=8

      487    13618    2           IF PSN$ = ADDR(NIL)

  13618  2 000315   200006 475500                    LDP5    @PSN$,,AUTO
         2 000316   500000 236100                    LDQ     0,,PR5
         2 000317   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000320   000325 601000 2                  TNZ     s:13620

      488    13619    2           THEN LMDCB$->F$DCB.PSN = ' ';

  13619  2 000321   040100 100400                    MLR     fill='040'O
         2 000322   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000323   300024 000006                    ADSC9   20,,PR3                  cn=0,n=6
         2 000324   000331 710000 2                  TRA     s:13621

      489    13620    2           ELSE LMDCB$->F$DCB.PSN = PSN$->B$TXT6;

  13620  2 000325   500000 476500                    LDP6    0,,PR5
         2 000326   040100 100500                    MLR     fill='040'O
         2 000327   600000 000006                    ADSC9   0,,PR6                   cn=0,n=6
         2 000330   300024 000006                    ADSC9   20,,PR3                  cn=0,n=6

      490    13621    2           LMDCB$->F$DCB.PASSF = '0'B;

  13621  2 000331   000002 236000 3                  LDQ     2
         2 000332   300031 356100                    ANSQ    25,,PR3

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:92   
      491    13622    2           LMDCB$->F$DCB.RES = ' ';

  13622  2 000333   000035 236000 xsym               LDQ     B_VECTNIL+29
         2 000334   300026 756100                    STQ     22,,PR3

      492    13623    2           LMDCB$->F$DCB.WSN = ' ';

  13623  2 000335   000035 235000 xsym               LDA     B_VECTNIL+29
         2 000336   000035 236000 xsym               LDQ     B_VECTNIL+29
         2 000337   300027 755100                    STA     23,,PR3
         2 000340   300030 756100                    STQ     24,,PR3

      493    13624    2           LMDCB$->F$DCB.FUN = %IN#;

  13624  2 000341   000002 236003                    LDQ     2,DU
         2 000342   300032 552120                    STBQ    26,'20'O,PR3

      494    13625    2           LMDCB$->F$DCB.ASN = %FILE#;

  13625  2 000343   001000 236007                    LDQ     512,DL
         2 000344   300032 552110                    STBQ    26,'10'O,PR3

      495    13626    2           LMDCB$->F$DCB.WSR = 0;

  13626  2 000345   000000 236003                    LDQ     0,DU
         2 000346   300040 552120                    STBQ    32,'20'O,PR3

      496    13627    2           IF (B$JIT.JUNK & %JJ_MONLINK#) THEN

  13627  2 000347   000000 476400 xsym               LDP6    B$JIT$
         2 000350   600315 220100                    LDX0    205,,PR6
         2 000351   000020 360003                    ANX0    16,DU
         2 000352   000355 600000 2                  TZE     s:13630

      497    13628    2                LMDCB$->F$DCB.WSR = 1;

  13628  2 000353   000001 236003                    LDQ     1,DU
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:93   
         2 000354   300040 552120                    STBQ    32,'20'O,PR3

      498    13629
      499    13630    2           CALL JSF$OPENLM(ERR) ALTRET(ASP_ERR);

  13630  2 000355   200022 637500                    EPPR7   ERR,,AUTO
         2 000356   200050 457500                    STP7    ECP+7,,AUTO
         2 000357   200050 630500                    EPPR0   ECP+7,,AUTO
         2 000360   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000361   000000 701000 xent               TSX1    JSF$OPENLM
         2 000362   003616 702000 2                  TSX2    ASP_ERR

      500    13631    2           MODTIME = LMDCB$->F$DCB.EXPIRE;

  13631  2 000363   200036 470500                    LDP0    LMDCB$,,AUTO
         2 000364   000035 235100                    LDA     29,,PR0
         2 000365   200021 755100                    STA     MODTIME,,AUTO

      501    13632
      502    13633        /* Begin our security checks by seeing if the potential run unit
      503    13634           is a keyed file.
      504    13635        */
      505    13636    2           IF LMDCB$->F$DCB.ORG ~= %KEYED#

  13636  2 000366   000032 236100                    LDQ     26,,PR0
         2 000367   777000 376003                    ANQ     -512,DU
         2 000370   002000 116003                    CMPQ    1024,DU
         2 000371   000376 600000 2                  TZE     s:13648

      506    13637    3           THEN DO;

      507    13638    3   ERR_217:
      508    13639    3                B$JIT.ERR=ENOTANRU;

  13639  2 000372   000005 236000 1     ERR_217      LDQ     ENOTANRU
         2 000373   000000 470400 xsym               LDP0    B$JIT$
         2 000374   000012 756100                    STQ     10,,PR0
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:94   

      509    13640    3                GOTO ASP_ERR0;

  13640  2 000375   003641 710000 2                  TRA     ASP_ERR0

      510    13641    3                END;
      511    13642        /*E*    ERROR:  JST-E$NOTANRU-E
      512    13643                MESSAGE: File% %U1%% %FN% is not a valid run unit.
      513    13644        */
      514    13645
      515    13646        /* Get sbuf1 for reading run unit head record.
      516    13647        */
      517    13648    2           CALL MME$WGVP(%USERWSQ,%SBUF1PG,BITBIN(%PGINMEM|%PGWRITE|%PGIOM),

  13648  2 000376   200022 631500                    EPPR1   ERR,,AUTO
         2 000377   200053 451500                    STP1    ECP+10,,AUTO
         2 000400   000005 236000 3                  LDQ     5
         2 000401   200052 756100                    STQ     ECP+9,,AUTO
         2 000402   000006 237000 3                  LDAQ    6
         2 000403   200050 757100                    STAQ    ECP+7,,AUTO
         2 000404   200050 630500                    EPPR0   ECP+7,,AUTO
         2 000405   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000406   000000 701000 xent               TSX1    MME$WGVP
         2 000407   003616 702000 2                  TSX2    ASP_ERR

      518    13649    2             ERR) ALTRET(ASP_ERR);
      519    13650
      520    13651        /* Now, read the HEAD record.
      521    13652        */
      522    13653    2           CALL JSF$READ(%TYPHEAD,SIZEW(B$HEAD),SIZEW(B$HEAD),B$SBUF1$,

  13653  2 000410   200022 630500                    EPPR0   ERR,,AUTO
         2 000411   200055 450500                    STP0    ECP+12,,AUTO
         2 000412   000011 236000 3                  LDQ     9
         2 000413   200054 756100                    STQ     ECP+11,,AUTO
         2 000414   000012 237000 3                  LDAQ    10
         2 000415   200052 757100                    STAQ    ECP+9,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:95   
         2 000416   000014 237000 3                  LDAQ    12
         2 000417   200050 757100                    STAQ    ECP+7,,AUTO
         2 000420   200050 630500                    EPPR0   ECP+7,,AUTO
         2 000421   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 000422   000000 701000 xent               TSX1    JSF$READ
         2 000423   000372 702000 2                  TSX2    ERR_217

      523    13654    2             0,ERR) ALTRET(ERR_217);
      524    13655
      525    13656        /* Validate the HEAD record size
      526    13657        */
      527    13658    2           IF LMDCB$->F$DCB.ARS ~= 4 * SIZEW(B$HEAD)

  13658  2 000424   200036 470500                    LDP0    LMDCB$,,AUTO
         2 000425   000000 235100                    LDA     0,,PR0
         2 000426   000240 115007                    CMPA    160,DL
         2 000427   000434 600000 2                  TZE     s:13669

      528    13659    3           THEN DO;

      529    13660    3                B$JIT.ERR=EHALFHEAD;

  13660  2 000430   000014 236000 1                  LDQ     EHALFHEAD
         2 000431   000000 471400 xsym               LDP1    B$JIT$
         2 000432   100012 756100                    STQ     10,,PR1

      530    13661    3                GOTO ASP_ERR0;

  13661  2 000433   003641 710000 2                  TRA     ASP_ERR0

      531    13662    3                END;
      532    13663        /*E*    ERROR:  JST-E$HALFHEAD-E
      533    13664               MESSAGE: The HEAD record size is invalid for that run unit.
      534    13665        */
      535    13666
      536    13667        /* If there is no Read-only Segment its not a host run-unit
      537    13668        */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:96   
      538    13669    2           IF B$HEAD.ROSIZE = 0 THEN GOTO ERR_217;

  13669  2 000434   000000 471400 xsym               LDP1    B$SBUF1$
         2 000435   100010 720100                    LXL0    8,,PR1
         2 000436   000372 600000 2                  TZE     ERR_217

      539    13670
      540    13671        /* If this is a pre-C00 host run-unit, copy the HEAD record to
      541    13672           another place in SBUF1 and modify the original to look like a
      542    13673           new HEAD record.
      543    13674        */
      544    13675    2           IF B$HEAD.FLAVOR = 0

  13675  2 000437   100022 236100                    LDQ     18,,PR1
         2 000440   777000 316003                    CANQ    -512,DU
         2 000441   000557 601000 2                  TNZ     s:13697

      545    13676    3           THEN DO;

      546    13677    3                TPTR$ = PINCRW(B$SBUF1$,SIZEW(B$HEAD));

  13677  2 000442   000000 236000 xsym               LDQ     B$SBUF1$
         2 000443   000050 036003                    ADLQ    40,DU
         2 000444   200035 756100                    STQ     TPTR$,,AUTO

      547    13678    3                TPTR$->B$OLDHEAD = B$HEAD;

  13678  2 000445   200035 473500                    LDP3    TPTR$,,AUTO
         2 000446   000100 100500                    MLR     fill='000'O
         2 000447   100000 000240                    ADSC9   0,,PR1                   cn=0,n=160
         2 000450   300000 000240                    ADSC9   0,,PR3                   cn=0,n=160

      548    13679
      549    13680    3                B$HEAD.VPPGS = TPTR$->B$OLDHEAD.VPPGS;

  13680  2 000451   300001 236100                    LDQ     1,,PR3
         2 000452   777000 376003                    ANQ     -512,DU
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:97   
         2 000453   000005 772000                    QRL     5
         2 000454   100001 676100                    ERQ     1,,PR1
         2 000455   777760 376003                    ANQ     -16,DU
         2 000456   100001 656100                    ERSQ    1,,PR1

      550    13681    3                B$HEAD.VDPGS = TPTR$->B$OLDHEAD.VDPGS;

  13681  2 000457   300001 236100                    LDQ     1,,PR3
         2 000460   000777 376003                    ANQ     511,DU
         2 000461   000004 736000                    QLS     4
         2 000462   100002 676100                    ERQ     2,,PR1
         2 000463   777760 376003                    ANQ     -16,DU
         2 000464   100002 656100                    ERSQ    2,,PR1

      551    13682    3                B$HEAD.RPROC = TPTR$->B$OLDHEAD.RPROC;

  13682  2 000465   300002 236100                    LDQ     2,,PR3
         2 000466   777777 376007                    ANQ     -1,DL
         2 000467   100001 676100                    ERQ     1,,PR1
         2 000470   000016 376000 3                  ANQ     14
         2 000471   100001 656100                    ERSQ    1,,PR1

      552    13683    3                B$HEAD.RDATA = TPTR$->B$OLDHEAD.RDATA;

  13683  2 000472   300002 236100                    LDQ     2,,PR3
         2 000473   777777 376003                    ANQ     -1,DU
         2 000474   000022 772000                    QRL     18
         2 000475   100002 676100                    ERQ     2,,PR1
         2 000476   000016 376000 3                  ANQ     14
         2 000477   100002 656100                    ERSQ    2,,PR1

      553    13684    3                B$HEAD.BIAS = TPTR$->B$OLDHEAD.BIAS;

  13684  2 000500   300003 236100                    LDQ     3,,PR3
         2 000501   777777 376003                    ANQ     -1,DU
         2 000502   000022 772000                    QRL     18
         2 000503   100023 676100                    ERQ     19,,PR1
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:98   
         2 000504   000016 376000 3                  ANQ     14
         2 000505   100023 656100                    ERSQ    19,,PR1

      554    13685    3                B$HEAD.START = TPTR$->B$OLDHEAD.START;

  13685  2 000506   300003 236100                    LDQ     3,,PR3
         2 000507   777777 376007                    ANQ     -1,DL
         2 000510   100003 676100                    ERQ     3,,PR1
         2 000511   000016 376000 3                  ANQ     14
         2 000512   100003 656100                    ERSQ    3,,PR1

      555    13686    3                B$HEAD.S = TPTR$->B$OLDHEAD.S;

  13686  2 000513   300001 236100                    LDQ     1,,PR3
         2 000514   000011 736000                    QLS     9
         2 000515   100022 676100                    ERQ     18,,PR1
         2 000516   000400 376003                    ANQ     256,DU
         2 000517   100022 656100                    ERSQ    18,,PR1

      556    13687    3                B$HEAD.OVRL = TPTR$->B$OLDHEAD.OVRL;

  13687  2 000520   300001 236100                    LDQ     1,,PR3
         2 000521   000007 736000                    QLS     7
         2 000522   100022 676100                    ERQ     18,,PR1
         2 000523   000010 376003                    ANQ     8,DU
         2 000524   100022 656100                    ERSQ    18,,PR1

      557    13688    3                B$HEAD.PROCACC = TPTR$->B$OLDHEAD.PROCACC;

  13688  2 000525   300001 236100                    LDQ     1,,PR3
         2 000526   000007 736000                    QLS     7
         2 000527   100022 676100                    ERQ     18,,PR1
         2 000530   000004 376003                    ANQ     4,DU
         2 000531   100022 656100                    ERSQ    18,,PR1

      558    13689    3                B$HEAD.NOCHGPMEM = TPTR$->B$OLDHEAD.NOCHGPMEM;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:99   
  13689  2 000532   300001 236100                    LDQ     1,,PR3
         2 000533   000007 736000                    QLS     7
         2 000534   100022 676100                    ERQ     18,,PR1
         2 000535   000002 376003                    ANQ     2,DU
         2 000536   100022 656100                    ERSQ    18,,PR1

      559    13690    3                B$HEAD.PROCSURCHG = TPTR$->B$OLDHEAD.PROCSURCHG;

  13690  2 000537   300001 236100                    LDQ     1,,PR3
         2 000540   000007 736000                    QLS     7
         2 000541   100022 676100                    ERQ     18,,PR1
         2 000542   000001 376003                    ANQ     1,DU
         2 000543   100022 656100                    ERSQ    18,,PR1

      560    13691    3                B$HEAD.RESTPROC = TPTR$->B$OLDHEAD.RESTPROC;

  13691  2 000544   300001 236100                    LDQ     1,,PR3
         2 000545   000007 736000                    QLS     7
         2 000546   100022 676100                    ERQ     18,,PR1
         2 000547   400000 376007                    ANQ     -131072,DL
         2 000550   100022 656100                    ERSQ    18,,PR1

      561    13692    3                B$HEAD.STRONG_LOCK = TPTR$->B$OLDHEAD.STRONG_LOCK;

  13692  2 000551   300001 236100                    LDQ     1,,PR3
         2 000552   000007 736000                    QLS     7
         2 000553   100022 676100                    ERQ     18,,PR1
         2 000554   200000 376007                    ANQ     65536,DL
         2 000555   100022 656100                    ERSQ    18,,PR1

      562    13693    3                END;

  13693  2 000556   000563 710000 2                  TRA     s:13702

      563    13694
      564    13695        /* If not an old nor new Host run-unit, abort the job step.
      565    13696        */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:100  
      566    13697    2           ELSE IF (B$HEAD.FLAVOR ~= %HOST_RU)

  13697  2 000557   100022 236100                    LDQ     18,,PR1
         2 000560   777000 376003                    ANQ     -512,DU
         2 000561   001000 116003                    CMPQ    512,DU
         2 000562   000372 601000 2                  TNZ     ERR_217

      567    13698    2                THEN GOTO ERR_217;
      568    13699
      569    13700        /* Security check the head record in case the linker messed up.
      570    13701        */
      571    13702    2           IF ((B$HEAD.VPPGS + B$HEAD.VDPGS) > %ISEGSIZ) OR

  13702  2 000563   100002 236100                    LDQ     2,,PR1
         2 000564   000026 772000                    QRL     22
         2 000565   200050 756100                    STQ     ECP+7,,AUTO
         2 000566   100001 236100                    LDQ     1,,PR1
         2 000567   000026 772000                    QRL     22
         2 000570   200050 036100                    ADLQ    ECP+7,,AUTO
         2 000571   000401 116007                    CMPQ    257,DL
         2 000572   000611 603000 2                  TRC     s:13705
         2 000573   100001 236100                    LDQ     1,,PR1
         2 000574   000016 376000 3                  ANQ     14
         2 000575   200051 756100                    STQ     ECP+8,,AUTO
         2 000576   100002 236100                    LDQ     2,,PR1
         2 000577   000016 376000 3                  ANQ     14
         2 000600   200051 036100                    ADLQ    ECP+8,,AUTO
         2 000601   200052 756100                    STQ     ECP+9,,AUTO
         2 000602   100023 236100                    LDQ     19,,PR1
         2 000603   000016 376000 3                  ANQ     14
         2 000604   200053 756100                    STQ     ECP+10,,AUTO
         2 000605   200052 236100                    LDQ     ECP+9,,AUTO
         2 000606   200053 036100                    ADLQ    ECP+10,,AUTO
         2 000607   000017 116000 3                  CMPQ    15
         2 000610   000615 602000 2                  TNC     s:13718

      572    13703    2             ((B$HEAD.RDATA + B$HEAD.RPROC + B$HEAD.BIAS) > %ISEGSIZ*1024)
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:101  
      573    13704    3           THEN DO;

      574    13705    3                B$JIT.ERR=EBADHEAD;

  13705  2 000611   000013 236000 1                  LDQ     EBADHEAD
         2 000612   000000 473400 xsym               LDP3    B$JIT$
         2 000613   300012 756100                    STQ     10,,PR3

      575    13706    3                GOTO ASP_ERR0;

  13706  2 000614   003641 710000 2                  TRA     ASP_ERR0

      576    13707    3                END;
      577    13708        /*E*    ERROR:  JST-E$BADHEAD-E
      578    13709                MESSAGE: The Run Unit HEAD record is bad.
      579    13710        */
      580    13711
      581    13712
      582    13713        /* If a pseudo resource is associated with the run-unit,
      583    13714           the pseudo resource name table is searched to determine if
      584    13715           the name is valid and if the user already has acquired the
      585    13716           the number required to execute the run-unit.
      586    13717        */
      587    13718    2           IF B$HEAD.PSEUDO_COUNT ~= 0

  13718  2 000615   100023 236100                    LDQ     19,,PR1
         2 000616   777000 316003                    CANQ    -512,DU
         2 000617   000732 600000 2                  TZE     PSEUDO_END

      588    13719    3           THEN DO;

      589    13720    4                DO TEMP1=0 TO FR_SUMX;

  13720  2 000620   200016 450100                    STZ     TEMP1,,AUTO
         2 000621   000723 710000 2                  TRA     s:13756+1

      590    13721    4                     IF B$HEAD.PSEUDO_TEXT = FR_SUNM(TEMP1)
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:102  

  13721  2 000622   200016 235100                    LDA     TEMP1,,AUTO
         2 000623   000003 735000                    ALS     3
         2 000624   000000 470400 xsym               LDP0    B$SBUF1$
         2 000625   040005 106500                    CMPC    fill='040'O
         2 000626   000024 000010                    ADSC9   20,,PR0                  cn=0,n=8
         2 000627   000000 000010 xsym               ADSC9   FR_SUNM,A                cn=0,n=8
         2 000630   000722 601000 2                  TNZ     s:13756

      591    13722    5                     THEN DO;

      592    13723    5                          IF B$JIT.CURSUDO(TEMP1) < B$HEAD.PSEUDO_COUNT

  13723  2 000631   000023 236100                    LDQ     19,,PR0
         2 000632   000033 772000                    QRL     27
         2 000633   200050 756100                    STQ     ECP+7,,AUTO
         2 000634   000000 471400 xsym               LDP1    B$JIT$
         2 000635   200016 235100                    LDA     TEMP1,,AUTO
         2 000636   000100 101505                    MRL     fill='000'O
         2 000637   100334 000001                    ADSC9   220,A,PR1                cn=0,n=1
         2 000640   200051 000004                    ADSC9   ECP+8,,AUTO              cn=0,n=4
         2 000641   200051 236100                    LDQ     ECP+8,,AUTO
         2 000642   200050 116100                    CMPQ    ECP+7,,AUTO
         2 000643   000721 605000 2                  TPL     s:13753

      593    13724    6                          THEN DO;

      594    13725
      595    13726        /* If the user has not yet acquired the number needed, M$LIMIT is
      596    13727           called to acquire those above the number that the user may already
      597    13728           have acquired.  The space in special buffer 1 beyond the Head
      598    13729           record is used to build the resource FPT and the pseudo VLP.
      599    13730        */
      600    13731    6                               TPTR$ = PINCRW(B$SBUF1$,SIZEW(B$HEAD));

  13731  2 000644   000000 236000 xsym               LDQ     B$SBUF1$
         2 000645   000050 036003                    ADLQ    40,DU
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:103  
         2 000646   200035 756100                    STQ     TPTR$,,AUTO

      601    13732    6                               LPTR$ = PINCRW(TPTR$,SIZEW(FPT$RESCTL));

  13732  2 000647   000022 036003                    ADLQ    18,DU
         2 000650   200031 756100                    STQ     LPTR$,,AUTO

      602    13733    6                               FPT$RESCTL = J_FPT_RESCTL;

  13733  2 000651   200035 473500                    LDP3    TPTR$,,AUTO
         2 000652   000100 100400                    MLR     fill='000'O
         2 000653   000000 000110 xsym               ADSC9   J_FPT_RESCTL             cn=0,n=72
         2 000654   300000 000110                    ADSC9   0,,PR3                   cn=0,n=72

      603    13734    6                               FPT$RESCTL.V_ = VECTOR(FPT$RESCTL.V);

  13734  2 000655   000020 235000 3                  LDA     16
         2 000656   200035 236100                    LDQ     TPTR$,,AUTO
         2 000657   000014 036003                    ADLQ    12,DU
         2 000660   300000 757100                    STAQ    0,,PR3

      604    13735    6                               FPT$RESCTL.PSEUDO_ = VECTOR(VLP$PS);

  13735  2 000661   000021 235000 3                  LDA     17
         2 000662   200031 236100                    LDQ     LPTR$,,AUTO
         2 000663   300002 757100                    STAQ    2,,PR3

      605    13736    6                               VLP$PS='0'B;

  13736  2 000664   200031 474500                    LDP4    LPTR$,,AUTO
         2 000665   000100 100400                    MLR     fill='000'O
         2 000666   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000667   400000 000050                    ADSC9   0,,PR4                   cn=0,n=40

      606    13737    6                               VLP$PS.NN# = 1;

  13737  2 000670   000001 235007                    LDA     1,DL
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:104  
         2 000671   400000 755100                    STA     0,,PR4

      607    13738    6                               VLP$PS.PSLIST.PSEUDO#(0) = B$HEAD.PSEUDO_TEXT;

  13738  2 000672   040100 100500                    MLR     fill='040'O
         2 000673   000024 000010                    ADSC9   20,,PR0                  cn=0,n=8
         2 000674   400004 000010                    ADSC9   4,,PR4                   cn=0,n=8

      608    13739    6                               VLP$PS.PSLIST.NUM#(0) =

  13739  2 000675   200016 236100                    LDQ     TEMP1,,AUTO
         2 000676   000100 101506                    MRL     fill='000'O
         2 000677   100334 000001                    ADSC9   220,Q,PR1                cn=0,n=1
         2 000700   200050 000004                    ADSC9   ECP+7,,AUTO              cn=0,n=4
         2 000701   000023 236100                    LDQ     19,,PR0
         2 000702   000033 772000                    QRL     27
         2 000703   200050 136100                    SBLQ    ECP+7,,AUTO
         2 000704   000033 736000                    QLS     27
         2 000705   400006 552140                    STBQ    6,'40'O,PR4

      609    13740    6                                 B$HEAD.PSEUDO_COUNT - B$JIT.CURSUDO(TEMP1);
      610    13741
      611    13742    6                               CALL M$MLIMIT(FPT$RESCTL) ALTRET(ASP_ERR0);

  13742  2 000706   200035 630500                    EPPR0   TPTR$,,AUTO
         2 000707   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000710   000000 701000 xent               TSX1    M$MLIMIT
         2 000711   003641 702000 2                  TSX2    ASP_ERR0

      612    13743
      613    13744        /* If the pseudo resource is successfully acquired, the name of the
      614    13745           resource and the number acquired are remembered in the JIT.
      615    13746           These pseudo resources will be released when the
      616    13747           program terminates.
      617    13748        */
      618    13749    6                               B$JIT.PSEUDO_TEXT = VLP$PS.PSLIST.PSEUDO#(0);

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:105  
  13749  2 000712   200031 470500                    LDP0    LPTR$,,AUTO
         2 000713   000004 237100                    LDAQ    4,,PR0
         2 000714   000000 471400 xsym               LDP1    B$JIT$
         2 000715   100322 757100                    STAQ    210,,PR1

      619    13750    6                               B$JIT.PSEUDO_COUNT = VLP$PS.PSLIST.NUM#(0);

  13750  2 000716   000006 236100                    LDQ     6,,PR0
         2 000717   000033 772000                    QRL     27
         2 000720   100321 552104                    STBQ    209,'04'O,PR1

      620    13751    6                               END/* do if user hasn't acquried resources*/;

      621    13752
      622    13753    5                          GOTO PSEUDO_END;

  13753  2 000721   000732 710000 2                  TRA     PSEUDO_END

      623    13754    5                          END/*do if resource name match*/;
      624    13755
      625    13756    4                     END/* do to FR_SUMX*/;

  13756  2 000722   200016 054100                    AOS     TEMP1,,AUTO
         2 000723   200016 236100                    LDQ     TEMP1,,AUTO
         2 000724   000000 116000 xsym               CMPQ    FR_SUMX
         2 000725   000622 604400 2                  TMOZ    s:13721

      626    13757    3                B$JIT.ERR = EBSUNM;

  13757  2 000726   000022 236000 1                  LDQ     EBSUNM
         2 000727   000000 470400 xsym               LDP0    B$JIT$
         2 000730   000012 756100                    STQ     10,,PR0

      627    13758    3                GOTO ASP_ERR0;

  13758  2 000731   003641 710000 2                  TRA     ASP_ERR0

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:106  
  13757  2 000732                       PSEUDO_END   null
      628    13759        /*E* ERROR: JST-E$BSUNM-A
      629    13760             MESSAGE: The pseudo resource required by that run-unit does not exist.
      630    13761        */
      631    13762
      632    13763    3   PSEUDO_END:  ;
      633    13764    3                END/*do if pseudo resource in Head*/;

      634    13765
      635    13766
      636    13767        /* Test for execute-only.  Set JIT.JUNK if so.
      637    13768        */
      638    13769    2           IF (LMDCB$->F$DCB.FFLG.EXEC) /*N* OR (B$JIT.JUNK & %JJ_MONLINK#) */

  13769  2 000732   200036 470500                    LDP0    LMDCB$,,AUTO
         2 000733   000004 236100                    LDQ     4,,PR0
         2 000734   002000 316003                    CANQ    1024,DU
         2 000735   000775 600000 2                  TZE     s:13798

      639    13770    3           THEN DO;

      640    13771    3                B$JIT.JUNK = (B$JIT.JUNK | %JJ_EXONLY#);

  13771  2 000736   000000 471400 xsym               LDP1    B$JIT$
         2 000737   100315 220100                    LDX0    205,,PR1
         2 000740   000010 260003                    ORX0    8,DU
         2 000741   100315 740100                    STX0    205,,PR1

      641    13772    3                LMDCB$->F$DCB.FFLG.EXEC='0'B;

  13772  2 000742   000022 236000 3                  LDQ     18
         2 000743   000004 356100                    ANSQ    4,,PR0

      642    13773
      643    13774        /* Dont allow an execute-only run unit to be started under a Debugger.
      644    13775        */
      645    13776    3                IF (DEBUG$ ~= ADDR(NIL))
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:107  

  13776  2 000744   200007 473500                    LDP3    @DEBUG$,,AUTO
         2 000745   300000 236100                    LDQ     0,,PR3
         2 000746   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000747   000753 600000 2                  TZE     s:13789

      646    13777    4                THEN DO;

      647    13778    4                     B$JIT.ERR=EDEBUGXONLY;

  13778  2 000750   000021 236000 1                  LDQ     EDEBUGXONLY
         2 000751   100012 756100                    STQ     10,,PR1

      648    13779    4                     GOTO ASP_ERR0;

  13779  2 000752   003641 710000 2                  TRA     ASP_ERR0

      649    13780    4                     END;
      650    13781        /*E*    ERROR:  JST-E$DEBUGXONLY-E
      651    13782                MESSAGE: You cannot debug an execute-only run unit.
      652    13783        */
      653    13784
      654    13785        /* In case of M$LINK to execute only, reset dic & dela so it cant
      655    13786           be debugged. These will be reset and delta re-associated on return.
      656    13787           Also, reset the special delta bit in the ECCB descriptor.
      657    13788        */
      658    13789    3                B$U.FLG = B$U.FLG &~(%U_DIC | %U_DELA);

  13789  2 000753   000027 236000 1                  LDQ     EBSUNM+5
         2 000754   000030 276000 1                  ORQ     EBSUNM+6
         2 000755   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 000756   000000 474400 xsym               LDP4    S$CU$
         2 000757   400000 376100                    ANQ     0,,PR4
         2 000760   400000 756100                    STQ     0,,PR4

      659    13790    3                B_MPT.LS$->B$ULNK.ECCB.FLGS = B_MPT.LS$->B$ULNK.ECCB.FLGS &~ %DSXXX;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:108  
  13790  2 000761   000001 474400 xsym               LDP4    B_MPT+1
         2 000762   400034 236100                    LDQ     28,,PR4
         2 000763   000024 736000                    QLS     20
         2 000764   777000 376003                    ANQ     -512,DU
         2 000765   757000 376003                    ANQ     -8704,DU
         2 000766   000024 772000                    QRL     20
         2 000767   400034 676100                    ERQ     28,,PR4
         2 000770   177600 376007                    ANQ     65408,DL
         2 000771   400034 656100                    ERSQ    28,,PR4

      660    13791    3                B$JIT.JUNK=(B$JIT.JUNK &~ %JJ_UDELTA#);

  13791  2 000772   100315 220100                    LDX0    205,,PR1
         2 000773   577777 360003                    ANX0    -65537,DU
         2 000774   100315 740100                    STX0    205,,PR1

      661    13792    3                END;

      662    13793
      663    13794        /* Do Job Step specific functions now, if not LINKing.
      664    13795           Reset temp disk peak and memory usage peak values for last step,
      665    13796           increment the count of job steps, and reset PNUM counts in the JIT.
      666    13797        */
      667    13798    2           IF NOT(B$JIT.JUNK & %JJ_MLINKIP#)

  13798  2 000775   000000 471400 xsym               LDP1    B$JIT$
         2 000776   100315 220100                    LDX0    205,,PR1
         2 000777   000001 360003                    ANX0    1,DU
         2 001000   001043 601000 2                  TNZ     s:13823

      668    13799    3           THEN DO;

      669    13800    3                B$JIT.SRESPEAK =0;

  13800  2 001001   000000 220003                    LDX0    0,DU
         2 001002   100213 740100                    STX0    139,,PR1

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:109  
      670    13801    3                B$JIT.SPEAK = 0;

  13801  2 001003   100211 740100                    STX0    137,,PR1

      671    13802    3                B$JIT.STMPDPPK = 0;

  13802  2 001004   100236 450100                    STZ     158,,PR1

      672    13803    3                B$JIT.STEPS = B$JIT.STEPS + 1;

  13803  2 001005   100315 721100                    LXL1    205,,PR1
         2 001006   000001 622011                    EAX2    1,X1
         2 001007   100315 442100                    SXL2    205,,PR1

      673    13804    3                B$JIT.CURPNUM = 0;

  13804  2 001010   100320 740100                    STX0    208,,PR1

      674    13805    3                B$JIT.HIGHPNUM = 0;

  13805  2 001011   100320 440100                    SXL0    208,,PR1

      675    13806
      676    13807        /* Write Step Accounting records to *S if appropriate to do so.
      677    13808        */
      678    13809    3                IF (B$JIT.CPFLAGS1 & %CP_STEPACCT#) OR (B$JIT.SSLEV ~= %AZ_NONE#)

  13809  2 001012   100143 236100                    LDQ     99,,PR1
         2 001013   000031 376000 1                  ANQ     EBSUNM+7
         2 001014   001021 601000 2                  TNZ     s:13811
         2 001015   100151 236100                    LDQ     105,,PR1
         2 001016   007000 376003                    ANQ     3584,DU
         2 001017   003000 116003                    CMPQ    1536,DU
         2 001020   001047 600000 2                  TZE     s:13829

      679    13810    4                THEN DO;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:110  
      680    13811    4                     CALL SSC$MON;

  13811  2 001021   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001022   000000 701000 xent               TSX1    SSC$MON
         2 001023   000000 011000                    NOP     0

      681    13812    4                     CALL SSQ$NUQUAN;

  13812  2 001024   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001025   000000 701000 xent               TSX1    SSQ$NUQUAN
         2 001026   000000 011000                    NOP     0

      682    13813    4                     CALL SSC$SERV;

  13813  2 001027   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001030   000000 701000 xent               TSX1    SSC$SERV
         2 001031   000000 011000                    NOP     0

      683    13814    4                     ACCT_TYP = %SSTART#;

  13814  2 001032   003000 236003                    LDQ     1536,DU
         2 001033   200020 552140                    STBQ    TEMP3,'40'O,AUTO

      684    13815    4                     CALL JSU$WSTAR(ACCT_TYP);

  13815  2 001034   200020 630500                    EPPR0   TEMP3,,AUTO
         2 001035   200050 450500                    STP0    ECP+7,,AUTO
         2 001036   200050 630500                    EPPR0   ECP+7,,AUTO
         2 001037   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001040   000000 701000 xent               TSX1    JSU$WSTAR
         2 001041   000000 011000                    NOP     0

      685    13816    4                     END;

      686    13817    3                ELSE ;
      687    13818    3                END;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:111  
  13818  2 001042   001047 710000 2                  TRA     s:13829

      688    13819
      689    13820        /* But, if LINKing, bump the count of processors for this Job Step
      690    13821        */
      691    13822    3           ELSE DO;

      692    13823    3                B$JIT.HIGHPNUM = B$JIT.HIGHPNUM+1;

  13823  2 001043   100320 720100                    LXL0    208,,PR1
         2 001044   000001 621010                    EAX1    1,X0
         2 001045   100320 441100                    SXL1    208,,PR1

      693    13824    3                B$JIT.CURPNUM = B$JIT.HIGHPNUM;

  13824  2 001046   100320 741100                    STX1    208,,PR1

      694    13825    3                END;

      695    13826
      696    13827        /* Check to see if this is a restricted processor.
      697    13828        */
      698    13829    2           IF B$HEAD.RESTPROC

  13829  2 001047   000000 470400 xsym               LDP0    B$SBUF1$
         2 001050   000022 236100                    LDQ     18,,PR0
         2 001051   400000 316007                    CANQ    -131072,DL
         2 001052   001102 600000 2                  TZE     s:13847

      699    13830    3           THEN DO;

      700    13831    3                IF B$HEAD.STRONG_LOCK

  13831  2 001053   200000 316007                    CANQ    65536,DL
         2 001054   001070 600000 2                  TZE     s:13834
         2 001055   000000 471400 xsym               LDP1    B$JIT$
         2 001056   000100 100500                    MLR     fill='000'O
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:112  
         2 001057   000020 000010                    ADSC9   16,,PR0                  cn=0,n=8
         2 001060   200050 000010                    ADSC9   ECP+7,,AUTO              cn=0,n=8
         2 001061   200050 237100                    LDAQ    ECP+7,,AUTO
         2 001062   100154 377100                    ANAQ    108,,PR1
         2 001063   200052 757100                    STAQ    ECP+9,,AUTO
         2 001064   000100 106500                    CMPC    fill='000'O
         2 001065   200052 000010                    ADSC9   ECP+9,,AUTO              cn=0,n=8
         2 001066   000020 000010                    ADSC9   16,,PR0                  cn=0,n=8
         2 001067   001077 601000 2                  TNZ     RPROC_ERR

      701    13832    3                  AND ( (B$HEAD.LOCK & B$JIT.LOCK) ~= B$HEAD.LOCK )
      702    13833    3                THEN GOTO RPROC_ERR;
      703    13834    3                ELSE IF NOT(B$HEAD.LOCK & B$JIT.LOCK)

  13834  2 001070   000000 471400 xsym               LDP1    B$JIT$
         2 001071   000100 100500                    MLR     fill='000'O
         2 001072   000020 000010                    ADSC9   16,,PR0                  cn=0,n=8
         2 001073   200050 000010                    ADSC9   ECP+7,,AUTO              cn=0,n=8
         2 001074   200050 237100                    LDAQ    ECP+7,,AUTO
         2 001075   100154 377100                    ANAQ    108,,PR1
         2 001076   001102 601000 2                  TNZ     s:13847

      704    13835    4                     THEN DO;

  13832  2 001077                       RPROC_ERR    null
      705    13836    4   RPROC_ERR:             ;
      706    13837    4                          B$JIT.ERR=ERESTRICTED;

  13837  2 001077   000011 236000 1                  LDQ     ERESTRICTED
         2 001100   100012 756100                    STQ     10,,PR1

      707    13838    4                          GOTO ASP_ERR0;

  13838  2 001101   003641 710000 2                  TRA     ASP_ERR0

      708    13839    4                          END;
      709    13840    3                END;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:113  
      710    13841        /*E*   ERROR: JST-E$RESTRICTED-E
      711    13842               MESSAGE: You are not allowed to use that restricted processor.
      712    13843        */
      713    13844
      714    13845        /* Check for non-standard syntax.
      715    13846        */
      716    13847    2           IF B$JIT.PRFLAGS.NSSYNTAX AND (B$HEAD.NSTDINVOC)

  13847  2 001102   000000 471400 xsym               LDP1    B$JIT$
         2 001103   100030 236100                    LDQ     24,,PR1
         2 001104   002000 316003                    CANQ    1024,DU
         2 001105   001114 600000 2                  TZE     s:13882
         2 001106   000011 236100                    LDQ     9,,PR0
         2 001107   000100 316007                    CANQ    64,DL
         2 001110   001114 600000 2                  TZE     s:13882

      717    13848    3           THEN DO;

      718    13849    3                B$JIT.ERR=ENSTDINVOC;

  13849  2 001111   000012 236000 1                  LDQ     ENSTDINVOC
         2 001112   100012 756100                    STQ     10,,PR1

      719    13850    3                GOTO ASP_ERR0;

  13850  2 001113   003641 710000 2                  TRA     ASP_ERR0

      720    13851    3                END;
      721    13852
      722    13853        /*E*   ERROR:  JST-E$NSTDINVOC-E
      723    13854               MESSAGE: That processor must be invoked with standard syntax.
      724    13855               MESSAGE1: Standard syntax is as follows:
      725    13856
      726    13857            !Run_unit [source] [,update] [ ON|OVER|INTO [object] [,listout]] [(optionlist)]
      727    13858
      728    13859                          Where
      729    13860                                Run_unit - specifies the fid of a run unit created
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:114  
      730    13861                                            by the LINK processor.
      731    13862                                source   - specifies the fid of the source input (M$SI).
      732    13863                                update   - specifies the fid of the update input (M$UI).
      733    13864                              ON      - specifies that the run unit is to be aborted if the
      734    13865                                           object or listout file currently exists.
      735    13866                                OVER     - specifies that the object or listout files are
      736    13867                                          to overwrite any existing files of the same name.
      737    13868                             INTO    - specifies that if object or listfiles exist they are
      738    13869                                      to be updated; otherwise new files are to be created.
      739    13870                                object   - specifies the fid of the output file (M$OU).
      740    13871                                listout  - specifies the fid of the listing output (M$LO).
      741    13872                               optionlist - contains run unit specific options, enclosed in
      742    13873                                             parenthesis and separated by commas.
      743    13874
      744    13875               MESSAGE7: That processor must be invoked with standard syntax.
      745    13876        */
      746    13877
      747    13878
      748    13879
      749    13880        /* Remember the ASL and Run-time Library names (if any).
      750    13881        */
      751    13882    2           IF B$HEAD.ASLNAME.CNT = 0

  13882  2 001114   000040 236100                    LDQ     32,,PR0
         2 001115   777000 316003                    CANQ    -512,DU
         2 001116   001122 601000 2                  TNZ     s:13885

      752    13883    2           THEN ASL$ = ADDR(NIL);

  13883  2 001117   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001120   200010 756100                    STQ     ASL$,,AUTO
         2 001121   001125 710000 2                  TRA     s:13890

      753    13884    3           ELSE DO;

      754    13885    3                ASL$ = ADDR(B$HEAD.ASLNAME);

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:115  
  13885  2 001122   000000 236000 xsym               LDQ     B$SBUF1$
         2 001123   000040 036003                    ADLQ    32,DU
         2 001124   200010 756100                    STQ     ASL$,,AUTO

      755    13886    3                END;

      756    13887
      757    13888        /* Set up EUP and DDUL based on whether or not there's a shared library.
      758    13889        */
      759    13890    2           IF B$HEAD.LIBNAME.CNT = 0

  13890  2 001125   000030 236100                    LDQ     24,,PR0
         2 001126   777000 316003                    CANQ    -512,DU
         2 001127   001140 601000 2                  TNZ     s:13898

      760    13891    3           THEN DO;

      761    13892    3                B$JIT.EUP = %ISEGHI;       /* Give him entire instr seg          */

  13892  2 001130   000477 220003                    LDX0    319,DU
         2 001131   100204 440100                    SXL0    132,,PR1

      762    13893    3                ASP$ = ADDR(NIL);          /* No shared lib.                     */

  13893  2 001132   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001133   200011 756100                    STQ     ASP$,,AUTO

      763    13894    3                B$JIT.LLL = %ISEGHI;

  13894  2 001134   100214 440100                    SXL0    140,,PR1

      764    13895    3                B$JIT.LUL = %ISEGHI-1;     /* NO LIBRARY AREA                    */

  13895  2 001135   000476 221003                    LDX1    318,DU
         2 001136   100215 741100                    STX1    141,,PR1

      765    13896    3                END;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:116  

  13896  2 001137   001151 710000 2                  TRA     s:13903

      766    13897    3           ELSE DO;

      767    13898    3                B$JIT.EUP = %LIBLO - 1;    /* Leave room for share lib.          */

  13898  2 001140   000437 220003                    LDX0    287,DU
         2 001141   100204 440100                    SXL0    132,,PR1

      768    13899    3                ASP$ = ADDR(B$HEAD.LIBNAME);

  13899  2 001142   000000 236000 xsym               LDQ     B$SBUF1$
         2 001143   000030 036003                    ADLQ    24,DU
         2 001144   200011 756100                    STQ     ASP$,,AUTO

      769    13900    3                B$JIT.LLL = %LIBLO;

  13900  2 001145   000440 221003                    LDX1    288,DU
         2 001146   100214 441100                    SXL1    140,,PR1

      770    13901    3                B$JIT.LUL = %LIBHI;

  13901  2 001147   000477 222003                    LDX2    319,DU
         2 001150   100215 742100                    STX2    141,,PR1

      771    13902    3                END;

      772    13903    2           B$JIT.DDUL = B$JIT.EUP;

  13903  2 001151   100200 440100                    SXL0    128,,PR1

      773    13904
      774    13905        /* Now set up the rest of the jit memory delimiters for the instr seg.
      775    13906        */
      776    13907    2           B$JIT.DLL = B$HEAD.BIAS/1024 + %ISEGLO;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:117  
  13907  2 001152   000023 236100                    LDQ     19,,PR0
         2 001153   000016 376000 3                  ANQ     14
         2 001154   000012 772000                    QRL     10
         2 001155   000100 621006                    EAX1    64,QL
         2 001156   100177 741100                    STX1    127,,PR1

      777    13908    2           B$JIT.DUL = B$JIT.DLL + B$HEAD.VDPGS - 1;

  13908  2 001157   000002 236100                    LDQ     2,,PR0
         2 001160   000026 772000                    QRL     22
         2 001161   200050 756100                    STQ     ECP+7,,AUTO
         2 001162   100177 236100                    LDQ     127,,PR1
         2 001163   000022 772000                    QRL     18
         2 001164   200050 036100                    ADLQ    ECP+7,,AUTO
         2 001165   777777 622006                    EAX2    -1,QL
         2 001166   100177 442100                    SXL2    127,,PR1

      778    13909    2           B$JIT.PLL = B$JIT.DUL + 1;

  13909  2 001167   000001 623012                    EAX3    1,X2
         2 001170   100176 743100                    STX3    126,,PR1

      779    13910    2           B$JIT.PUL = B$JIT.PLL + B$HEAD.VPPGS -1;

  13910  2 001171   000001 236100                    LDQ     1,,PR0
         2 001172   000026 772000                    QRL     22
         2 001173   200050 756100                    STQ     ECP+7,,AUTO
         2 001174   100176 236100                    LDQ     126,,PR1
         2 001175   000022 772000                    QRL     18
         2 001176   200050 036100                    ADLQ    ECP+7,,AUTO
         2 001177   777777 624006                    EAX4    -1,QL
         2 001200   100176 444100                    SXL4    126,,PR1

      780    13911
      781    13912    2           IF B$JIT.PUL > B$JIT.EUP

  13912  2 001201   100176 236100                    LDQ     126,,PR1
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:118  
         2 001202   777777 376007                    ANQ     -1,DL
         2 001203   200050 756100                    STQ     ECP+7,,AUTO
         2 001204   100204 236100                    LDQ     132,,PR1
         2 001205   777777 376007                    ANQ     -1,DL
         2 001206   200050 116100                    CMPQ    ECP+7,,AUTO
         2 001207   001213 605000 2                  TPL     s:13921

      782    13913    3           THEN DO;

      783    13914    3                B$JIT.ERR=EPROGTOOBIG;

  13914  2 001210   000003 236000 1                  LDQ     EPROGTOOBIG
         2 001211   100012 756100                    STQ     10,,PR1

      784    13915    3                GOTO ASP_ERR0;

  13915  2 001212   003641 710000 2                  TRA     ASP_ERR0

      785    13916    3                END;
      786    13917        /*E*    ERROR:  JST-E$PROGTOOBIG-E
      787    13918                MESSAGE: Program size exceeds user authorization or limit.
      788    13919        */
      789    13920
      790    13921    2           B$JIT.DDLL = B$JIT.PUL + 1;

  13921  2 001213   000001 625014                    EAX5    1,X4
         2 001214   100200 745100                    STX5    128,,PR1

      791    13922    2           B$JIT.TDP = B$JIT.DDLL;

  13922  2 001215   100204 745100                    STX5    132,,PR1

      792    13923    2           B$JIT.PCDD = 0;

  13923  2 001216   000000 226003                    LDX6    0,DU
         2 001217   100203 446100                    SXL6    131,,PR1

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:119  
      793    13924    2           B$JIT.PCL = 0;

  13924  2 001220   100215 446100                    SXL6    141,,PR1

      794    13925
      795    13926        /* Set flag in JIT to let MM know if this guy gets his procedure free.
      796    13927        */
      797    13928    2           IF B$HEAD.NOCHGPMEM AND SYSFLAG

  13928  2 001221   000022 236100                    LDQ     18,,PR0
         2 001222   000002 316003                    CANQ    2,DU
         2 001223   001231 600000 2                  TZE     s:13930
         2 001224   200014 234100                    SZN     SYSFLAG,,AUTO
         2 001225   001231 605000 2                  TPL     s:13930

      798    13929    2           THEN B$JIT.MMFLGS.FREE_PPGS = '1'B;

  13929  2 001226   400000 236003                    LDQ     -131072,DU
         2 001227   100206 256100                    ORSQ    134,,PR1
         2 001230   001233 710000 2                  TRA     s:13934

      799    13930    2           ELSE B$JIT.MMFLGS.FREE_PPGS = '0'B;

  13930  2 001231   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 001232   100206 356100                    ANSQ    134,,PR1

      800    13931
      801    13932        /* Set the privilege from the HEAD record in JIT.PRIV.PRC.
      802    13933        */
      803    13934    2           IF SYSFLAG

  13934  2 001233   200014 234100                    SZN     SYSFLAG,,AUTO
         2 001234   001265 605000 2                  TPL     s:13945

      804    13935    2           THEN IF DEBUG$ = ADDR(NIL) OR LMDCB$->F$DCB.FFLG.DELF

  13935  2 001235   200007 473500                    LDP3    @DEBUG$,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:120  
         2 001236   300000 236100                    LDQ     0,,PR3
         2 001237   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001240   001245 600000 2                  TZE     s:13937
         2 001241   200036 474500                    LDP4    LMDCB$,,AUTO
         2 001242   400004 236100                    LDQ     4,,PR4
         2 001243   020000 316003                    CANQ    8192,DU
         2 001244   001263 600000 2                  TZE     s:13943

      805    13936    3                THEN DO;

      806    13937    3                     B$JIT.PRIV.PRC = B$HEAD.PRIV;

  13937  2 001245   000000 236100                    LDQ     0,,PR0
         2 001246   100016 756100                    STQ     14,,PR1

      807    13938        /* No future debugging if more privilege might thereby occur */
      808    13939    3                     IF NOT LMDCB$->F$DCB.FFLG.DELF

  13939  2 001247   200036 474500                    LDP4    LMDCB$,,AUTO
         2 001250   400004 236100                    LDQ     4,,PR4
         2 001251   020000 316003                    CANQ    8192,DU
         2 001252   001266 601000 2                  TNZ     s:13947
         2 001253   100016 236100                    LDQ     14,,PR1
         2 001254   100014 376100                    ANQ     12,,PR1
         2 001255   100016 116100                    CMPQ    14,,PR1
         2 001256   001266 600000 2                  TZE     s:13947

      809    13940    3                       AND (B$JIT.PRIV.PRC & B$JIT.PRIV.AUTH) ~= B$JIT.PRIV.PRC
      810    13941    3                     THEN B$JIT.JUNK = B$JIT.JUNK | %JJ_EXONLY#;

  13941  2 001257   100315 227100                    LDX7    205,,PR1
         2 001260   000010 267003                    ORX7    8,DU
         2 001261   100315 747100                    STX7    205,,PR1

      811    13942    3                     END;

  13942  2 001262   001266 710000 2                  TRA     s:13947
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:121  

      812    13943    2                ELSE B$JIT.PRIV.PRC = '0'B;

  13943  2 001263   100016 450100                    STZ     14,,PR1
         2 001264   001266 710000 2                  TRA     s:13947

      813    13944        /* Give the debugging user only as much privilege as he is permitted. */
      814    13945    2           ELSE B$JIT.PRIV.PRC = '0'B;

  13945  2 001265   100016 450100                    STZ     14,,PR1

      815    13946        /* If PRC.MAXMEM, make it effective now. */
      816    13947    2           IF B$JIT.PRIV.PRC & %PR_MAXMEM#

  13947  2 001266   100016 236100                    LDQ     14,,PR1
         2 001267   000006 376000 xsym               ANQ     B_VECTNIL+6
         2 001270   001274 600000 2                  TZE     s:13954

      817    13948    2           THEN B$JIT.PRIV.ACTIVE = B$JIT.PRIV.ACTIVE | %PR_MAXMEM#;

  13948  2 001271   100013 236100                    LDQ     11,,PR1
         2 001272   000006 276000 xsym               ORQ     B_VECTNIL+6
         2 001273   100013 756100                    STQ     11,,PR1

      818    13949
      819    13950        /* Okay - let's prepare to read in its data and ROSEG pages. Also,
      820    13951           STEP guarantees that every run unit put into execution has at
      821    13952           least one TCB exceptional condition frame.
      822    13953        */
      823    13954    2           IF B$HEAD.TCBSIZE = 0 THEN B$HEAD.TCBSIZE = 1;

  13954  2 001274   000005 727100                    LXL7    5,,PR0
         2 001275   001300 601000 2                  TNZ     s:13964

  13954  2 001276   000001 220003                    LDX0    1,DU
         2 001277   000005 440100                    SXL0    5,,PR0

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:122  
      824    13955
      825    13956        /*************************************************************
      826    13957         *                                                           *
      827    13958         *                      GET_RO_DATA                          *
      828    13959         *                                                           *
      829    13960         *************************************************************/
      830    13961
      831    13962        /* Begin by checking to see if the user has any DCBs or TCB frames.
      832    13963        */
      833    13964    2           SEGSIZE = B$HEAD.ROSIZE + (B$HEAD.TCBSIZE*%UE_AV_TCBSZ# + %UE_FX_TCBSZ#);

  13964  2 001300   000010 236100                    LDQ     8,,PR0
         2 001301   777777 376007                    ANQ     -1,DL
         2 001302   200050 756100                    STQ     ECP+7,,AUTO
         2 001303   000005 236100                    LDQ     5,,PR0
         2 001304   777777 376007                    ANQ     -1,DL
         2 001305   000112 402007                    MPY     74,DL
         2 001306   200050 036100                    ADLQ    ECP+7,,AUTO
         2 001307   000110 036007                    ADLQ    72,DL
         2 001310   200026 756100                    STQ     SEGSIZE,,AUTO

      834    13965
      835    13966        /* If so, see if they will fit in the current ROS pages.
      836    13967        */
      837    13968    2           TEMP1 = B$JIT.PCROS;

  13968  2 001311   100203 236100                    LDQ     131,,PR1
         2 001312   000022 772000                    QRL     18
         2 001313   200016 756100                    STQ     TEMP1,,AUTO

      838    13969    2           PAGES = ((SEGSIZE + INIT_ROSIZE + 1023)/1024) - TEMP1;

  13969  2 001314   200026 236100                    LDQ     SEGSIZE,,AUTO
         2 001315   200024 036100                    ADLQ    INIT_ROSIZE,,AUTO
         2 001316   001777 036007                    ADLQ    1023,DL
         2 001317   000012 772000                    QRL     10
         2 001320   200016 136100                    SBLQ    TEMP1,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:123  
         2 001321   200030 756100                    STQ     PAGES,,AUTO

      839    13970    2           IF PAGES > 0

  13970  2 001322   001360 604400 2                  TMOZ    s:14006

      840    13971    3           THEN DO;

      841    13972
      842    13973        /* If they don't fit in the current ROS pages, see if they fit in
      843    13974           the maximum ROS size.
      844    13975        */
      845    13976    3                IF PAGES > %ROSEGSIZ - TEMP1

  13976  2 001323   000016 236007                    LDQ     14,DL
         2 001324   200016 136100                    SBLQ    TEMP1,,AUTO
         2 001325   200030 116100                    CMPQ    PAGES,,AUTO
         2 001326   001344 605000 2                  TPL     s:13999

      846    13977    4                THEN DO;

      847    13978
      848    13979        /* And if they don't fit the max ROS size, set the error code to
      849    13980           too many DCBs if this is the problem.  If the DCBs alone would
      850    13981           fit, then the problem is obviously too many TCB frames.
      851    13982        */
      852    13983    4                     IF ((B$HEAD.ROSIZE + INIT_ROSIZE + 1023)/1024)  > %ROSEGSIZ

  13983  2 001327   000010 236100                    LDQ     8,,PR0
         2 001330   777777 376007                    ANQ     -1,DL
         2 001331   200024 036100                    ADLQ    INIT_ROSIZE,,AUTO
         2 001332   001777 036007                    ADLQ    1023,DL
         2 001333   000012 772000                    QRL     10
         2 001334   000017 116007                    CMPQ    15,DL
         2 001335   001341 602000 2                  TNC     s:13985

      853    13984    4                     THEN B$JIT.ERR = EDCBSZBAD;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:124  

  13984  2 001336   000017 236000 1                  LDQ     EDCBSZBAD
         2 001337   100012 756100                    STQ     10,,PR1
         2 001340   001343 710000 2                  TRA     s:13986

      854    13985    4                     ELSE B$JIT.ERR = ETCBSZBAD;

  13985  2 001341   000016 236000 1                  LDQ     ETCBSZBAD
         2 001342   100012 756100                    STQ     10,,PR1

      855    13986    4                     GOTO ASP_ERR0;

  13986  2 001343   003641 710000 2                  TRA     ASP_ERR0

      856    13987    4                     END;
      857    13988        /*E* ERROR:  JST-E$DCBSZBAD-E
      858    13989             MESSAGE: Run Unit% %U1%% %FN% contains too many DCBs.
      859    13990        */
      860    13991        /*E* ERROR:  JST-E$TCBSZBAD-E
      861    13992             MESSAGE: Run Unit% %U1%% %FN% TCB size specification too large.
      862    13993        */
      863    13994
      864    13995        /* But if both DCBs and TCB frames fit within the max ROS size,
      865    13996           go get the pages to read them into.
      866    13997        */
      867    13998    4                ELSE DO;

      868    13999    4                     CALL MMG$SGVP(%USERWSQ,BITBIN(%ROSID),TEMP1,PAGES,ERR)

  13999  2 001344   200022 633500                    EPPR3   ERR,,AUTO
         2 001345   200054 453500                    STP3    ECP+11,,AUTO
         2 001346   200030 634500                    EPPR4   PAGES,,AUTO
         2 001347   200053 454500                    STP4    ECP+10,,AUTO
         2 001350   200016 635500                    EPPR5   TEMP1,,AUTO
         2 001351   200052 455500                    STP5    ECP+9,,AUTO
         2 001352   000024 237000 3                  LDAQ    20
         2 001353   200050 757100                    STAQ    ECP+7,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:125  
         2 001354   200050 630500                    EPPR0   ECP+7,,AUTO
         2 001355   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 001356   000000 701000 xent               TSX1    MMG$SGVP
         2 001357   003616 702000 2                  TSX2    ASP_ERR

      869    14000    4                       ALTRET(ASP_ERR);
      870    14001    4                     END;

      871    14002    3                END;

      872    14003
      873    14004        /* Now go ahead and read in the user's DCBs.
      874    14005        */
      875    14006    2           SEGSIZE = B$HEAD.ROSIZE;

  14006  2 001360   000000 470400 xsym               LDP0    B$SBUF1$
         2 001361   000010 236100                    LDQ     8,,PR0
         2 001362   777777 376007                    ANQ     -1,DL
         2 001363   200026 756100                    STQ     SEGSIZE,,AUTO

      876    14007    2           RECSIZE = B$HEAD.PRECSIZE;

  14007  2 001364   000006 236100                    LDQ     6,,PR0
         2 001365   000022 772000                    QRL     18
         2 001366   200027 756100                    STQ     RECSIZE,,AUTO

      877    14008    2           CALL JSF$READ(%TYPROS,RECSIZE,SEGSIZE,

  14008  2 001367   200024 236100                    LDQ     INIT_ROSIZE,,AUTO
         2 001370   000022 736000                    QLS     18
         2 001371   000000 036000 xsym               ADLQ    B$ROSEG$
         2 001372   200050 756100                    STQ     ECP+7,,AUTO
         2 001373   200022 631500                    EPPR1   ERR,,AUTO
         2 001374   200057 451500                    STP1    ECP+14,,AUTO
         2 001375   000011 236000 3                  LDQ     9
         2 001376   200056 756100                    STQ     ECP+13,,AUTO
         2 001377   200050 633500                    EPPR3   ECP+7,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:126  
         2 001400   200055 453500                    STP3    ECP+12,,AUTO
         2 001401   200026 634500                    EPPR4   SEGSIZE,,AUTO
         2 001402   200054 454500                    STP4    ECP+11,,AUTO
         2 001403   200027 635500                    EPPR5   RECSIZE,,AUTO
         2 001404   200053 455500                    STP5    ECP+10,,AUTO
         2 001405   000027 236000 3                  LDQ     23
         2 001406   200052 756100                    STQ     ECP+9,,AUTO
         2 001407   200052 630500                    EPPR0   ECP+9,,AUTO
         2 001410   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 001411   000000 701000 xent               TSX1    JSF$READ
         2 001412   003616 702000 2                  TSX2    ASP_ERR

      878    14009    2             PINCRW(B$ROSEG$,INIT_ROSIZE),0,ERR)
      879    14010    2             ALTRET(ASP_ERR);
      880    14011
      881    14012        /* Now read in the data portions of the program records.
      882    14013        */
      883    14014    2           IF B$HEAD.RDATA > 0

  14014  2 001413   000000 470400 xsym               LDP0    B$SBUF1$
         2 001414   000002 236100                    LDQ     2,,PR0
         2 001415   000016 316000 3                  CANQ    14
         2 001416   002110 600000 2                  TZE     s:14177

      884    14015    3           THEN DO;

      885    14016    3               PAGES = ((B$HEAD.RDATA + B$HEAD.BIAS + 1023)/1024) - (B$HEAD.BIAS/1024)
             14016                         ;

  14016  2 001417   000023 236100                    LDQ     19,,PR0
         2 001420   000016 376000 3                  ANQ     14
         2 001421   200050 756100                    STQ     ECP+7,,AUTO
         2 001422   000002 236100                    LDQ     2,,PR0
         2 001423   000016 376000 3                  ANQ     14
         2 001424   200050 036100                    ADLQ    ECP+7,,AUTO
         2 001425   001777 036007                    ADLQ    1023,DL
         2 001426   000012 772000                    QRL     10
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:127  
         2 001427   200051 756100                    STQ     ECP+8,,AUTO
         2 001430   000023 236100                    LDQ     19,,PR0
         2 001431   000016 376000 3                  ANQ     14
         2 001432   000012 772000                    QRL     10
         2 001433   200052 756100                    STQ     ECP+9,,AUTO
         2 001434   200051 236100                    LDQ     ECP+8,,AUTO
         2 001435   200052 136100                    SBLQ    ECP+9,,AUTO
         2 001436   200030 756100                    STQ     PAGES,,AUTO

      886    14017    3                CALL MMG$SGVP(%USERWSQ,BITBIN(%ISSID),B$HEAD.BIAS/1024,PAGES,ERR)

  14017  2 001437   000023 236100                    LDQ     19,,PR0
         2 001440   000016 376000 3                  ANQ     14
         2 001441   000012 772000                    QRL     10
         2 001442   200050 756100                    STQ     ECP+7,,AUTO
         2 001443   200022 631500                    EPPR1   ERR,,AUTO
         2 001444   200055 451500                    STP1    ECP+12,,AUTO
         2 001445   200030 633500                    EPPR3   PAGES,,AUTO
         2 001446   200054 453500                    STP3    ECP+11,,AUTO
         2 001447   200050 634500                    EPPR4   ECP+7,,AUTO
         2 001450   200053 454500                    STP4    ECP+10,,AUTO
         2 001451   000031 236000 3                  LDQ     25
         2 001452   200052 756100                    STQ     ECP+9,,AUTO
         2 001453   000006 236000 3                  LDQ     6
         2 001454   200051 756100                    STQ     ECP+8,,AUTO
         2 001455   200051 630500                    EPPR0   ECP+8,,AUTO
         2 001456   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 001457   000000 701000 xent               TSX1    MMG$SGVP
         2 001460   003616 702000 2                  TSX2    ASP_ERR

      887    14018    3                  ALTRET(ASP_ERR);
      888    14019    3                SEGSIZE = B$HEAD.RDATA;

  14019  2 001461   000000 470400 xsym               LDP0    B$SBUF1$
         2 001462   000002 236100                    LDQ     2,,PR0
         2 001463   000016 376000 3                  ANQ     14
         2 001464   200026 756100                    STQ     SEGSIZE,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:128  

      889    14020    3                CALL JSF$READ(%TYPPROG,RECSIZE,SEGSIZE,

  14020  2 001465   000023 720100                    LXL0    19,,PR0
         2 001466   777777 360003                    ANX0    -1,DU
         2 001467   000000 636010                    EAQ     0,X0
         2 001470   000000 036000 xsym               ADLQ    B$USERIS$
         2 001471   200050 756100                    STQ     ECP+7,,AUTO
         2 001472   200022 631500                    EPPR1   ERR,,AUTO
         2 001473   200057 451500                    STP1    ECP+14,,AUTO
         2 001474   000011 236000 3                  LDQ     9
         2 001475   200056 756100                    STQ     ECP+13,,AUTO
         2 001476   200050 633500                    EPPR3   ECP+7,,AUTO
         2 001477   200055 453500                    STP3    ECP+12,,AUTO
         2 001500   200026 634500                    EPPR4   SEGSIZE,,AUTO
         2 001501   200054 454500                    STP4    ECP+11,,AUTO
         2 001502   200027 635500                    EPPR5   RECSIZE,,AUTO
         2 001503   200053 455500                    STP5    ECP+10,,AUTO
         2 001504   000032 236000 3                  LDQ     26
         2 001505   200052 756100                    STQ     ECP+9,,AUTO
         2 001506   200052 630500                    EPPR0   ECP+9,,AUTO
         2 001507   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 001510   000000 701000 xent               TSX1    JSF$READ
         2 001511   003616 702000 2                  TSX2    ASP_ERR

      890    14021    3                  PINCRW(B$USERIS$,B$HEAD.BIAS),0,ERR)
      891    14022    3                  ALTRET(ASP_ERR);
      892    14023
      893    14024
      894    14025        /*************************************************************
      895    14026         *                                                           *
      896    14027         *                      SETUP_ROSEG                          *
      897    14028         *                                                           *
      898    14029         *************************************************************/
      899    14030        /* Initialize all necessary read-only segment information after
      900    14031           having brought the run unit's portion into memory.
      901    14032        */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:129  
      902    14033
      903    14034
      904    14035        /* Begin by relocating the TREE.
      905    14036        */
      906    14037    3                TEMP1 = B$HEAD.TREEDISP + INIT_ROSIZE;

  14037  2 001512   000000 470400 xsym               LDP0    B$SBUF1$
         2 001513   000005 236100                    LDQ     5,,PR0
         2 001514   000022 772000                    QRL     18
         2 001515   200024 036100                    ADLQ    INIT_ROSIZE,,AUTO
         2 001516   200016 756100                    STQ     TEMP1,,AUTO

      907    14038    3                B$ROSEG.TREE$ = PINCRW(B$ROSEG$ , TEMP1);

  14038  2 001517   000022 736000                    QLS     18
         2 001520   000000 036000 xsym               ADLQ    B$ROSEG$
         2 001521   000000 471400 xsym               LDP1    B$ROSEG$
         2 001522   100001 756100                    STQ     1,,PR1

      908    14039
      909    14040        /* these instructions replace call RELOC_TREE   */
      910    14041    3                NOOVER = 0;

  14041  2 001523   200013 450100                    STZ     NOOVER,,AUTO

      911    14042    3                B$TREEHDR.LIB$ = PINCRW(B$TREEHDR.LIB$ , INIT_ROSIZE);

  14042  2 001524   100001 473500                    LDP3    1,,PR1
         2 001525   300001 474500                    LDP4    1,,PR3
         2 001526   200024 720100                    LXL0    INIT_ROSIZE,,AUTO
         2 001527   400000 635510                    EPPR5   0,X0,PR4
         2 001530   300001 455500                    STP5    1,,PR3

      912    14043
      913    14044        /* Get pointer to 1st node of tree table.
      914    14045        */
      915    14046    3                TPTR$ = PINCRW(B$ROSEG.TREE$,SIZEW(B$TREEHDR));
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:130  

  14046  2 001531   100001 473500                    LDP3    1,,PR1
         2 001532   100001 236100                    LDQ     1,,PR1
         2 001533   000003 036003                    ADLQ    3,DU
         2 001534   200035 756100                    STQ     TPTR$,,AUTO

      916    14047    3                TEMP2 = B$TREEHDR.NODES * SIZEW(B$NODE) + SIZEW(B$TREEHDR);

  14047  2 001535   300000 236100                    LDQ     0,,PR3
         2 001536   000022 772000                    QRL     18
         2 001537   000006 402007                    MPY     6,DL
         2 001540   000003 036007                    ADLQ    3,DL
         2 001541   200017 756100                    STQ     TEMP2,,AUTO

      917    14048    3               IF (TEMP2 > B$TREEHDR.SIZE) OR (TEMP2 < (SIZEW(B$TREEHDR)+SIZEW(B$NODE)
             14048                         ))

  14048  2 001542   100001 473500                    LDP3    1,,PR1
         2 001543   300000 236100                    LDQ     0,,PR3
         2 001544   777777 376007                    ANQ     -1,DL
         2 001545   200017 116100                    CMPQ    TEMP2,,AUTO
         2 001546   001552 604000 2                  TMI     s:14050
         2 001547   200017 235100                    LDA     TEMP2,,AUTO
         2 001550   000011 115007                    CMPA    9,DL
         2 001551   001556 605000 2                  TPL     s:14056

      918    14049    4                THEN DO;

      919    14050    4                     B$JIT.ERR = EHALFTREE;

  14050  2 001552   000020 236000 1                  LDQ     EHALFTREE
         2 001553   000000 474400 xsym               LDP4    B$JIT$
         2 001554   400012 756100                    STQ     10,,PR4

      920    14051    4                     GOTO ASP_ERR0;

  14051  2 001555   003641 710000 2                  TRA     ASP_ERR0
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:131  

      921    14052    4                     END;
      922    14053        /*E*    ERROR:  JST-E$HALFTREE-E
      923    14054                MESSAGE: The TREE table's size is incorrect.
      924    14055        */
      925    14056    4                DO TEMP2 = 1 TO B$TREEHDR.NODES;

  14056  2 001556   000001 235007                    LDA     1,DL
         2 001557   200017 755100                    STA     TEMP2,,AUTO
         2 001560   001611 710000 2                  TRA     s:14067+1

      926    14057    4                     B$NODE.NAME$ = PINCRW(B$NODE.NAME$,TEMP1);

  14057  2 001561   200035 470500                    LDP0    TPTR$,,AUTO
         2 001562   000000 471500                    LDP1    0,,PR0
         2 001563   200016 720100                    LXL0    TEMP1,,AUTO
         2 001564   100000 633510                    EPPR3   0,X0,PR1
         2 001565   000000 453500                    STP3    0,,PR0

      927    14058    4                     IF TEMP2 = 1

  14058  2 001566   200017 235100                    LDA     TEMP2,,AUTO
         2 001567   000001 115007                    CMPA    1,DL
         2 001570   001574 601000 2                  TNZ     s:14060

      928    14059    4                     THEN B$NODE.FLGS = '600'O; /* Set 'NOW_IN' + 'WAS_IN'       */

  14059  2 001571   600000 236003                    LDQ     -65536,DU
         2 001572   000001 552140                    STBQ    1,'40'O,PR0
         2 001573   001576 710000 2                  TRA     s:14062

      929    14060    4                     ELSE B$NODE.FLGS = '0'B; /* for the root only.              */

  14060  2 001574   000000 236003                    LDQ     0,DU
         2 001575   000001 552140                    STBQ    1,'40'O,PR0

      930    14061
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:132  
      931    14062    4                     IF B$NODE.FORWARD# > 1

  14062  2 001576   000002 220100                    LDX0    2,,PR0
         2 001577   000001 100003                    CMPX0   1,DU
         2 001600   001602 604400 2                  TMOZ    s:14065

      932    14063    4                     THEN SHARED_FLAG = %FALSE; /* cant be shared                */

  14063  2 001601   200015 450100                    STZ     SHARED_FLAG,,AUTO

      933    14064
      934    14065    4                     NOOVER = NOOVER + 1;

  14065  2 001602   200013 235100                    LDA     NOOVER,,AUTO
         2 001603   000001 035007                    ADLA    1,DL
         2 001604   200013 755100                    STA     NOOVER,,AUTO

      935    14066    4                     TPTR$ = PINCRW(TPTR$,SIZEW(B$NODE));

  14066  2 001605   200035 236100                    LDQ     TPTR$,,AUTO
         2 001606   000006 036003                    ADLQ    6,DU
         2 001607   200035 756100                    STQ     TPTR$,,AUTO

      936    14067    4                     END;

  14067  2 001610   200017 054100                    AOS     TEMP2,,AUTO
         2 001611   000000 470400 xsym               LDP0    B$ROSEG$
         2 001612   000001 471500                    LDP1    1,,PR0
         2 001613   100000 236100                    LDQ     0,,PR1
         2 001614   000022 772000                    QRL     18
         2 001615   200017 116100                    CMPQ    TEMP2,,AUTO
         2 001616   001561 605000 2                  TPL     s:14057

      937    14068        /*  end RELOC_TREE  */
      938    14069
      939    14070
      940    14071    3                B$ROSEG.NUMDCBS = B$HEAD.UDCBNUM + B$HEAD.DCBRES + %SYS_DCBS#;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:133  

  14071  2 001617   000000 473400 xsym               LDP3    B$SBUF1$
         2 001620   300004 236100                    LDQ     4,,PR3
         2 001621   777777 376007                    ANQ     -1,DL
         2 001622   200050 756100                    STQ     ECP+7,,AUTO
         2 001623   300004 236100                    LDQ     4,,PR3
         2 001624   000022 772000                    QRL     18
         2 001625   200050 036100                    ADLQ    ECP+7,,AUTO
         2 001626   000011 620006                    EAX0    9,QL
         2 001627   000002 740100                    STX0    2,,PR0

      941    14072
      942    14073        /* Set up the linkage segment TCB descriptor and initialize its
      943    14074           first few words.
      944    14075        */
      945    14076    3                TCBSZ = B$HEAD.TCBSIZE;

  14076  2 001630   300005 236100                    LDQ     5,,PR3
         2 001631   777777 376007                    ANQ     -1,DL
         2 001632   200023 756100                    STQ     TCBSZ,,AUTO

      946    14077    3                ROSZ = B$HEAD.ROSIZE;

  14077  2 001633   300010 236100                    LDQ     8,,PR3
         2 001634   777777 376007                    ANQ     -1,DL
         2 001635   200025 756100                    STQ     ROSZ,,AUTO

      947    14078    3                CALL INIT_TCB;

  14078  2 001636   003734 701000 2                  TSX1    INIT_TCB
         2 001637   000000 011000                    NOP     0

      948    14079
      949    14080        /* Clear out all ECCBs.
      950    14081        */
      951    14082    3                IF (B$JIT.CPFLAGS1 & %CP_KEEPDS#)

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:134  
  14082  2 001640   000000 470400 xsym               LDP0    B$JIT$
         2 001641   000143 236100                    LDQ     99,,PR0
         2 001642   000032 376000 1                  ANQ     EBSUNM+8
         2 001643   001647 600000 2                  TZE     s:14084

      952    14083    3                THEN TEMP1=2;

  14083  2 001644   000002 235007                    LDA     2,DL
         2 001645   200016 755100                    STA     TEMP1,,AUTO
         2 001646   001651 710000 2                  TRA     s:14085

      953    14084    3                ELSE TEMP1=3;

  14084  2 001647   000003 235007                    LDA     3,DL
         2 001650   200016 755100                    STA     TEMP1,,AUTO

      954    14085    4                DO I = 0 TO TEMP1;

  14085  2 001651   200012 450100                    STZ     I,,AUTO
         2 001652   001662 710000 2                  TRA     s:14087+1

      955    14086    4                     B$ROSEG.ECCB(I) = '0'B;

  14086  2 001653   200012 236100                    LDQ     I,,AUTO
         2 001654   000030 402007                    MPY     24,DL
         2 001655   000000 470400 xsym               LDP0    B$ROSEG$
         2 001656   000106 100400                    MLR     fill='000'O
         2 001657   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 001660   000024 000030                    ADSC9   20,Q,PR0                 cn=0,n=24

      956    14087    4                     END;

  14087  2 001661   200012 054100                    AOS     I,,AUTO
         2 001662   200012 236100                    LDQ     I,,AUTO
         2 001663   200016 116100                    CMPQ    TEMP1,,AUTO
         2 001664   001653 604400 2                  TMOZ    s:14086

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:135  
      957    14088
      958    14089        /* Now, fix up the dcb pointer table.
      959    14090        */
      960    14091        /* These instructions replace call to INIT_DCBPTR */
      961    14092    3                TEMP1 = %M$1STDCB# + B$HEAD.UDCBNUM - 1;

  14092  2 001665   000000 470400 xsym               LDP0    B$SBUF1$
         2 001666   000004 236100                    LDQ     4,,PR0
         2 001667   000022 772000                    QRL     18
         2 001670   000011 036007                    ADLQ    9,DL
         2 001671   200016 756100                    STQ     TEMP1,,AUTO

      962    14093    4                DO TEMP2 = %M$1STDCB# TO TEMP1;

  14093  2 001672   000012 235007                    LDA     10,DL
         2 001673   200017 755100                    STA     TEMP2,,AUTO
         2 001674   001714 710000 2                  TRA     s:14098+1

      963    14094    4                     TEMP3 = B$ROSEG.DCBPTR$->DCB_WORD(TEMP2);

  14094  2 001675   000000 470400 xsym               LDP0    B$ROSEG$
         2 001676   000000 471500                    LDP1    0,,PR0
         2 001677   200017 720100                    LXL0    TEMP2,,AUTO
         2 001700   100000 235110                    LDA     0,X0,PR1
         2 001701   200020 755100                    STA     TEMP3,,AUTO

      964    14095    4                     IF TEMP3_PTR.SEGID ~= %ROSID THEN GOTO BAD_ROSEG;

  14095  2 001702   200020 236100                    LDQ     TEMP3,,AUTO
         2 001703   007777 376007                    ANQ     4095,DL
         2 001704   006003 116007                    CMPQ    3075,DL
         2 001705   001763 601000 2                  TNZ     BAD_ROSEG

      965    14096    4                     B$ROSEG.DCBPTR$->DCB$(TEMP2) =

  14096  2 001706   000000 471500                    LDP1    0,,PR0
         2 001707   200024 236100                    LDQ     INIT_ROSIZE,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:136  
         2 001710   000022 736000                    QLS     18
         2 001711   200020 036100                    ADLQ    TEMP3,,AUTO
         2 001712   100000 756110                    STQ     0,X0,PR1

      966    14097    4                       PINCRW(TEMP3$,INIT_ROSIZE);
      967    14098    4                     END;

  14098  2 001713   200017 054100                    AOS     TEMP2,,AUTO
         2 001714   200017 236100                    LDQ     TEMP2,,AUTO
         2 001715   200016 116100                    CMPQ    TEMP1,,AUTO
         2 001716   001675 604400 2                  TMOZ    s:14094

      968    14099    4                DO TEMP2 = TEMP1+1 TO TEMP1+B$HEAD.DCBRES;

  14099  2 001717   200016 235100                    LDA     TEMP1,,AUTO
         2 001720   000001 035007                    ADLA    1,DL
         2 001721   200017 755100                    STA     TEMP2,,AUTO
         2 001722   001731 710000 2                  TRA     s:14101+1

      969    14100    4                     B$ROSEG.DCBPTR$->DCB$(TEMP2) = ADDR(NIL);

  14100  2 001723   000000 470400 xsym               LDP0    B$ROSEG$
         2 001724   000000 471500                    LDP1    0,,PR0
         2 001725   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001726   200017 720100                    LXL0    TEMP2,,AUTO
         2 001727   100000 756110                    STQ     0,X0,PR1

      970    14101    4                     END;

  14101  2 001730   200017 054100                    AOS     TEMP2,,AUTO
         2 001731   000000 470400 xsym               LDP0    B$SBUF1$
         2 001732   000004 236100                    LDQ     4,,PR0
         2 001733   777777 376007                    ANQ     -1,DL
         2 001734   200016 036100                    ADLQ    TEMP1,,AUTO
         2 001735   200017 116100                    CMPQ    TEMP2,,AUTO
         2 001736   001723 605000 2                  TPL     s:14100

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:137  
      971    14102
      972    14103        /*   end INIT_DCBPTR  */
      973    14104
      974    14105
      975    14106        /* Now call JSF$DCBCHK to make sure the DCBs are OK.
      976    14107        */
      977    14108    3                IF B$HEAD.OVRL

  14108  2 001737   000022 236100                    LDQ     18,,PR0
         2 001740   000010 316003                    CANQ    8,DU
         2 001741   001746 600000 2                  TZE     s:14110

      978    14109    3                THEN DSPTR$ = B$ROSEG.TREE$;

  14109  2 001742   000000 471400 xsym               LDP1    B$ROSEG$
         2 001743   100001 236100                    LDQ     1,,PR1
         2 001744   200034 756100                    STQ     DSPTR$,,AUTO
         2 001745   001754 710000 2                  TRA     s:14111

      979    14110    3                ELSE DSPTR$ = PINCRW(B$ROSEG$,B$HEAD.ROSIZE+INIT_ROSIZE);

  14110  2 001746   000010 236100                    LDQ     8,,PR0
         2 001747   777777 376007                    ANQ     -1,DL
         2 001750   200024 036100                    ADLQ    INIT_ROSIZE,,AUTO
         2 001751   000022 736000                    QLS     18
         2 001752   000000 036000 xsym               ADLQ    B$ROSEG$
         2 001753   200034 756100                    STQ     DSPTR$,,AUTO

      980    14111    3                CALL JSF$DCBCHK(DSPTR$)

  14111  2 001754   200034 631500                    EPPR1   DSPTR$,,AUTO
         2 001755   200050 451500                    STP1    ECP+7,,AUTO
         2 001756   200050 630500                    EPPR0   ECP+7,,AUTO
         2 001757   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001760   000000 701000 xent               TSX1    JSF$DCBCHK
         2 001761   001763 702000 2                  TSX2    BAD_ROSEG
         2 001762   001767 710000 2                  TRA     s:14125
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:138  

      981    14112    4                WHENALTRETURN DO;

  14110  2 001763                       BAD_ROSEG    null
      982    14113    4   BAD_ROSEG:        ;
      983    14114    4                     B$JIT.ERR = EBADROSEG;

  14114  2 001763   000015 236000 1                  LDQ     EBADROSEG
         2 001764   000000 470400 xsym               LDP0    B$JIT$
         2 001765   000012 756100                    STQ     10,,PR0

      984    14115    4                     GOTO ASP_ERR0;

  14115  2 001766   003641 710000 2                  TRA     ASP_ERR0

      985    14116    4                     END;
      986    14117        /*E* ERROR:  JST-E$BADROSEG-E
      987    14118             MESSAGE: Run Unit% %U1%% %FN% contains a bad Read Only Segment.
      988    14119        */
      989    14120
      990    14121
      991    14122
      992    14123        /* See if we have any initialized data segments to read in.
      993    14124        */
      994    14125    3                RECSIZE = 1024;

  14125  2 001767   002000 235007                    LDA     1024,DL
         2 001770   200027 755100                    STA     RECSIZE,,AUTO

      995    14126    3                I = BITBIN(%DS3SID & '1777'O)*2;

  14126  2 001771   000014 236007                    LDQ     12,DL
         2 001772   200012 756100                    STQ     I,,AUTO

      996    14127    3                LPTR$ = PINCRW(B$USERLS$,I);

  14127  2 001773   000022 736000                    QLS     18
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:139  
         2 001774   000000 036000 xsym               ADLQ    B$USERLS$
         2 001775   200031 756100                    STQ     LPTR$,,AUTO

      997    14128    3                TEMP1 = BITBIN(%DS3SID);

  14128  2 001776   006006 235007                    LDA     3078,DL
         2 001777   200016 755100                    STA     TEMP1,,AUTO

      998    14129    4                DO I = 0 TO 5;

  14129  2 002000   200012 450100                    STZ     I,,AUTO

      999    14130    4                     SEGSIZE = B$HEAD.DATA_SEG.SIZ(I);

  14130  2 002001   000000 470400 xsym               LDP0    B$SBUF1$
         2 002002   200012 720100                    LXL0    I,,AUTO
         2 002003   000012 236110                    LDQ     10,X0,PR0
         2 002004   000022 772000                    QRL     18
         2 002005   200026 756100                    STQ     SEGSIZE,,AUTO

     1000    14131    4                     IF SEGSIZE > 0

  14131  2 002006   002100 600000 2                  TZE     s:14143

     1001    14132    5                     THEN DO;

     1002    14133    5                          TEMP2 = B$HEAD.DATA_SEG.PROTECTION(I);

  14133  2 002007   000012 236110                    LDQ     10,X0,PR0
         2 002010   000777 376007                    ANQ     511,DL
         2 002011   200017 756100                    STQ     TEMP2,,AUTO

     1003    14134    5                          SEGSIZE = SEGSIZE + BITBIN('200000000000'O);/*VIRTONLY*/

  14134  2 002012   200026 236100                    LDQ     SEGSIZE,,AUTO
         2 002013   000024 036000 1                  ADLQ    EBSUNM+2
         2 002014   200026 756100                    STQ     SEGSIZE,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:140  

     1004    14135    5                          CALL MMH$GDS(%USERWSQ,TEMP1,SEGSIZE,ERR) ALTRET(ASP_ERR);

  14135  2 002015   200022 631500                    EPPR1   ERR,,AUTO
         2 002016   200053 451500                    STP1    ECP+10,,AUTO
         2 002017   200026 633500                    EPPR3   SEGSIZE,,AUTO
         2 002020   200052 453500                    STP3    ECP+9,,AUTO
         2 002021   200016 634500                    EPPR4   TEMP1,,AUTO
         2 002022   200051 454500                    STP4    ECP+8,,AUTO
         2 002023   000006 236000 3                  LDQ     6
         2 002024   200050 756100                    STQ     ECP+7,,AUTO
         2 002025   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002026   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 002027   000000 701000 xent               TSX1    MMH$GDS
         2 002030   003616 702000 2                  TSX2    ASP_ERR

     1005    14136    5                          SEGSIZE = SEGSIZE - BITBIN('200000000000'O);/*VIRTONLY*/

  14136  2 002031   200026 236100                    LDQ     SEGSIZE,,AUTO
         2 002032   000024 136000 1                  SBLQ    EBSUNM+2
         2 002033   200026 756100                    STQ     SEGSIZE,,AUTO

     1006    14137    5                          B$LS$->B$MLS.MISC2 = LPTR$->B$DESCR;

  14137  2 002034   200031 470500                    LDP0    LPTR$,,AUTO
         2 002035   000000 237100                    LDAQ    0,,PR0
         2 002036   000000 471400 xsym               LDP1    B$LS$
         2 002037   100260 757100                    STAQ    176,,PR1

     1007    14138    5                          DSPTR$ = B$MISC2$;

  14138  2 002040   000000 236000 xsym               LDQ     B$MISC2$
         2 002041   200034 756100                    STQ     DSPTR$,,AUTO

     1008    14139    5                          CALL JSF$READ_DS(%TYPDATASEG,RECSIZE,SEGSIZE,DSPTR$,

  14139  2 002042   200022 633500                    EPPR3   ERR,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:141  
         2 002043   200055 453500                    STP3    ECP+12,,AUTO
         2 002044   200016 634500                    EPPR4   TEMP1,,AUTO
         2 002045   200054 454500                    STP4    ECP+11,,AUTO
         2 002046   200034 635500                    EPPR5   DSPTR$,,AUTO
         2 002047   200053 455500                    STP5    ECP+10,,AUTO
         2 002050   200026 636500                    EPPR6   SEGSIZE,,AUTO
         2 002051   200052 456500                    STP6    ECP+9,,AUTO
         2 002052   200027 637500                    EPPR7   RECSIZE,,AUTO
         2 002053   200051 457500                    STP7    ECP+8,,AUTO
         2 002054   000034 236000 3                  LDQ     28
         2 002055   200050 756100                    STQ     ECP+7,,AUTO
         2 002056   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002057   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 002060   000000 701000 xent               TSX1    JSF$READ_DS
         2 002061   003616 702000 2                  TSX2    ASP_ERR

     1009    14140    5                            TEMP1,ERR) ALTRET(ASP_ERR);
     1010    14141    5                          CALL MMH$SMPRT(%USERWSQ,TEMP1,,ERR,TEMP2) ALTRET(ASP_ERR);

  14141  2 002062   200017 630500                    EPPR0   TEMP2,,AUTO
         2 002063   200054 450500                    STP0    ECP+11,,AUTO
         2 002064   200022 631500                    EPPR1   ERR,,AUTO
         2 002065   200053 451500                    STP1    ECP+10,,AUTO
         2 002066   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 002067   200052 756100                    STQ     ECP+9,,AUTO
         2 002070   200016 633500                    EPPR3   TEMP1,,AUTO
         2 002071   200051 453500                    STP3    ECP+8,,AUTO
         2 002072   000006 236000 3                  LDQ     6
         2 002073   200050 756100                    STQ     ECP+7,,AUTO
         2 002074   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002075   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 002076   000000 701000 xent               TSX1    MMH$SMPRT
         2 002077   003616 702000 2                  TSX2    ASP_ERR

     1011    14142    5                          END;

     1012    14143    4                     TEMP1 = TEMP1 + 1;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:142  

  14143  2 002100   200016 054100                    AOS     TEMP1,,AUTO

     1013    14144    4                     LPTR$ = PINCRW(LPTR$,2);

  14144  2 002101   200031 236100                    LDQ     LPTR$,,AUTO
         2 002102   000002 036003                    ADLQ    2,DU
         2 002103   200031 756100                    STQ     LPTR$,,AUTO

     1014    14145    4                     END;

  14145  2 002104   200012 054100                    AOS     I,,AUTO
         2 002105   200012 235100                    LDA     I,,AUTO
         2 002106   000005 115007                    CMPA    5,DL
         2 002107   002001 604400 2                  TMOZ    s:14130

     1015    14146    3                END;

     1016    14147        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:143  
     1017    14148
     1018    14149        /* Now decide if we should read the procedure or ASP it.
     1019    14150        */
     1020    14151        /*The basic strategy to be used here is as follows:
     1021    14152
     1022    14153                 1. If not a candidate for sharing, reset flag and goto fetch
     1023    14154
     1024    14155                 2. Look it up in auto share tables. If not found go to step 4.
     1025    14156
     1026    14157                 3. If found but not the current run unit, mark entry old and
     1027    14158
     1028    14159                 4. Try to get entries for proc and overlays. If unable, reset
     1029    14160                    flag.
     1030    14161
     1031    14162                 5. Go to fetch.
     1032    14163
     1033    14164                 6. If found and current and PPC ~= 0, use it.
     1034    14165
     1035    14166                 7. If found and current but PPC = 0, check UC.
     1036    14167
     1037    14168                 8. If UC ~= 0 (someone is fetching) wait and check again.
     1038    14169
     1039    14170                 9. If UC = 0 set UC = 1 and fetch, planning to install after
     1040    14171                    fetch.
     1041    14172        */
     1042    14173
     1043    14174
     1044    14175        /* If not on a publed pack
     1045    14176        */
     1046    14177    2           IF (LMDCB$->F$DCB.PSN ~= ' ')

  14177  2 002110   200036 470500                    LDP0    LMDCB$,,AUTO
         2 002111   040000 106500                    CMPC    fill='040'O
         2 002112   000024 000006                    ADSC9   20,,PR0                  cn=0,n=6
         2 002113   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002114   002141 601000 2                  TNZ     NOSHARE
         2 002115   200007 471500                    LDP1    @DEBUG$,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:144  
         2 002116   100000 236100                    LDQ     0,,PR1
         2 002117   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002120   002141 601000 2                  TNZ     NOSHARE
         2 002121   000000 473400 xsym               LDP3    S$CU$
         2 002122   300006 236100                    LDQ     6,,PR3
         2 002123   777000 316007                    CANQ    -512,DL
         2 002124   002141 601000 2                  TNZ     NOSHARE
         2 002125   000000 474400 xsym               LDP4    B$SBUF1$
         2 002126   400022 236100                    LDQ     18,,PR4
         2 002127   000400 316003                    CANQ    256,DU
         2 002130   002134 601000 2                  TNZ     s:14177+20
         2 002131   000000 235000 xsym               LDA     JS_SHARE_ALL
         2 002132   000001 115007                    CMPA    1,DL
         2 002133   002141 601000 2                  TNZ     NOSHARE
         2 002134   000000 235000 xsym               LDA     JS_SHARE_ALL
         2 002135   000002 115007                    CMPA    2,DL
         2 002136   002141 600000 2                  TZE     NOSHARE
         2 002137   200015 234100                    SZN     SHARED_FLAG,,AUTO
         2 002140   002143 604000 2                  TMI     REFIND

     1047    14178        /* or Start Under DELTA or LINK-LDTRC under DELTA.
     1048    14179        */
     1049    14180    2             OR DEBUG$ ~= ADDR(NIL) OR B$U.DB ~=0
     1050    14181
     1051    14182    2             OR NOT ((B$HEAD.S) OR (JS_SHARE_ALL = 1))
     1052    14183    2             OR (JS_SHARE_ALL = 2)
     1053    14184    2             OR NOT SHARED_FLAG
     1054    14185
     1055    14186    3           THEN DO;

     1056    14187        /* Then .... off to Fetch we go  */
     1057    14188    3   NOSHARE:     SHARED_FLAG = %FALSE;

  14188  2 002141   200015 450100       NOSHARE      STZ     SHARED_FLAG,,AUTO

     1058    14189    3                GOTO JST$FETCH;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:145  
  14189  2 002142   002274 710000 2                  TRA     JST$FETCH

     1059    14190    3                END;
     1060    14191
     1061    14192        /*Now lets find if there is a good copy of procedure around.*/
     1062    14193
     1063    14194    2   REFIND: CALL JSA$FINDAUTO (NAME$ , ACCT$ , PNUM) ALTRET (INST);

  14194  2 002143   200032 630500       REFIND       EPPR0   PNUM,,AUTO
         2 002144   200052 450500                    STP0    ECP+9,,AUTO
         2 002145   200004 236100                    LDQ     @ACCT$,,AUTO
         2 002146   200003 235100                    LDA     @NAME$,,AUTO
         2 002147   200050 757100                    STAQ    ECP+7,,AUTO
         2 002150   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002151   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002152   000000 701000 xent               TSX1    JSA$FINDAUTO
         2 002153   002166 702000 2                  TSX2    INST

     1064    14195    2           IF B_P.CRDATE (PNUM) ~= MODTIME

  14195  2 002154   200032 236100                    LDQ     PNUM,,AUTO
         2 002155   000042 402007                    MPY     34,DL
         2 002156   000000 470400 xsym               LDP0    B$P$
         2 002157   000004 236106                    LDQ     4,QL,PR0
         2 002160   200021 116100                    CMPQ    MODTIME,,AUTO
         2 002161   002171 600000 2                  TZE     s:14202

     1065    14196    3           THEN DO;

     1066    14197    3                B_P.INSTDATE (PNUM) = 1;

  14197  2 002162   200032 236100                    LDQ     PNUM,,AUTO
         2 002163   000042 402007                    MPY     34,DL
         2 002164   000001 235007                    LDA     1,DL
         2 002165   000005 755106                    STA     5,QL,PR0

     1067    14198    3   INST:        CALL ADD_SHARED ALTRET (NOSHARE);
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:146  

  14198  2 002166   004104 701000 2     INST         TSX1    ADD_SHARED
         2 002167   002141 702000 2                  TSX2    NOSHARE

     1068    14199    3                GOTO JST$FETCH;

  14199  2 002170   002274 710000 2                  TRA     JST$FETCH

     1069    14200    3                END;
     1070    14201    3           ELSE DO;

     1071    14202    3                IF B_P.PPC (PNUM) = 0

  14202  2 002171   200032 236100                    LDQ     PNUM,,AUTO
         2 002172   000042 402007                    MPY     34,DL
         2 002173   000003 235106                    LDA     3,QL,PR0
         2 002174   002224 601000 2                  TNZ     s:14231

     1072    14203    4                THEN DO;

     1073    14204    4                     IF B_P.UC (PNUM) ~= 0

  14204  2 002175   000000 235106                    LDA     0,QL,PR0
         2 002176   002215 600000 2                  TZE     s:14213

     1074    14205    5                     THEN DO;

     1075    14206                               %UNLOCK (G = J_PLOCK);

  14207  2 002177   000001 630400 3                  EPPR0   1
         2 002200   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002201   000000 701000 xent               TSX1    HFC$UNLOCK
         2 002202   000000 011000                    NOP     0

     1076    14209    5                          CALL SSR$REG (%SS_SL ,, 1);

  14209  2 002203   000036 236000 3                  LDQ     30
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:147  
         2 002204   200052 756100                    STQ     ECP+9,,AUTO
         2 002205   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 002206   000037 235000 3                  LDA     31
         2 002207   200050 757100                    STAQ    ECP+7,,AUTO
         2 002210   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002211   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002212   000000 701000 xent               TSX1    SSR$REG
         2 002213   000000 011000                    NOP     0

     1077    14210    5                          GOTO REFIND;

  14210  2 002214   002143 710000 2                  TRA     REFIND

     1078    14211    5                          END;
     1079    14212    5                     ELSE DO;

     1080    14213    5                          B_P.UC (PNUM) = 1;

  14213  2 002215   000001 235007                    LDA     1,DL
         2 002216   000000 755106                    STA     0,QL,PR0

     1081    14214                               %UNLOCK (G = J_PLOCK);

  14215  2 002217   000001 630400 3                  EPPR0   1
         2 002220   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002221   000000 701000 xent               TSX1    HFC$UNLOCK
         2 002222   000000 011000                    NOP     0

     1082    14217    5                          GOTO JST$FETCH;

  14217  2 002223   002274 710000 2                  TRA     JST$FETCH

     1083    14218    5                          END;
     1084    14219    4                     END;
     1085    14220    3                END;
     1086    14221
     1087    14222
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:148  
     1088    14223        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:149  
     1089    14224        /*************************************************************
     1090    14225         *                                                           *
     1091    14226         *            DO IF AUTO SHARED PROCESSOR                    *
     1092    14227         *                                                           *
     1093    14228         *************************************************************/
     1094    14229        /* If we get here then it's an auto shared run-unit.
     1095    14230        */
     1096    14231    2           PROC$ = ADDR (B_P(PNUM));

  14231  2 002224   200032 236100                    LDQ     PNUM,,AUTO
         2 002225   000042 402003                    MPY     34,DU
         2 002226   000000 036000 xsym               ADLQ    B$P$
         2 002227   200037 756100                    STQ     PROC$,,AUTO

     1097    14232    2           IF PROC$ -> B$P.UC (0) = 0

  14232  2 002230   200037 471500                    LDP1    PROC$,,AUTO
         2 002231   100000 235100                    LDA     0,,PR1
         2 002232   002242 601000 2                  TNZ     s:14237

     1098    14233    3           THEN DO;

     1099    14234    3                MM$BYP.AUTOINUSE = MM$BYP.AUTOINUSE + PROC$ -> B$P.PPC (0);

  14234  2 002233   000000 473400 xsym               LDP3    MM_BYP$
         2 002234   300015 236100                    LDQ     13,,PR3
         2 002235   100003 036100                    ADLQ    3,,PR1
         2 002236   300015 756100                    STQ     13,,PR3

     1100    14235    3                MM$BYP.AUTOP = MM$BYP.AUTOP - PROC$ -> B$P.PPC (0);

  14235  2 002237   300014 236100                    LDQ     12,,PR3
         2 002240   100003 136100                    SBLQ    3,,PR1
         2 002241   300014 756100                    STQ     12,,PR3

     1101    14236    3                END;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:150  
     1102    14237    2           PROC$ -> B$P.UC (0) = PROC$ -> B$P.UC (0) + 1;

  14237  2 002242   100000 054100                    AOS     0,,PR1

     1103    14238
     1104    14239        /*Clear SHARED_FLAG so ASP_ERR won't throw away a good proc.
     1105    14240        */
     1106    14241    2           SHARED_FLAG = %FALSE;

  14241  2 002243   200015 450100                    STZ     SHARED_FLAG,,AUTO

     1107    14242
     1108    14243        /* Set the processor number into the user tables and bump
     1109    14244           the frequency counter.
     1110    14245        */
     1111    14246    2           B$U.APR = PNUM;

  14246  2 002244   000000 470400 xsym               LDP0    S$CU$
         2 002245   200032 236100                    LDQ     PNUM,,AUTO
         2 002246   000030 736000                    QLS     24
         2 002247   000007 752160                    STCQ    7,'60'O,PR0

     1112    14247    2           PROC$ -> B$P.FRQ(0) = PROC$ -> B$P.FRQ(0) + 1;

  14247  2 002250   100001 235100                    LDA     1,,PR1
         2 002251   000001 035007                    ADLA    1,DL
         2 002252   100001 755100                    STA     1,,PR1

     1113    14248    2           B$JIT.PCP = PROC$ -> B$P.PPC(0);

  14248  2 002253   100003 720100                    LXL0    3,,PR1
         2 002254   000000 473400 xsym               LDP3    B$JIT$
         2 002255   300201 740100                    STX0    129,,PR3

     1114    14249                %UNLOCK (G=J_PLOCK);

  14250  2 002256   000001 630400 3                  EPPR0   1
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:151  
         2 002257   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002260   000000 701000 xent               TSX1    HFC$UNLOCK
         2 002261   000000 011000                    NOP     0

     1115    14252
     1116    14253        /* Access will be set by SSR when pages are mapped.
     1117    14254        */
     1118    14255
     1119    14256                  /* UPDATE THE CREATE DATE SO THE MOST RECENTLY ACCESSED WILL STAY   */
     1120    14257    2           CALL SSS$SYSTIME( B_P.INSTDATE (PNUM));

  14257  2 002262   200032 236100                    LDQ     PNUM,,AUTO
         2 002263   000042 402003                    MPY     34,DU
         2 002264   000005 036003                    ADLQ    5,DU
         2 002265   000000 036000 xsym               ADLQ    B$P$
         2 002266   200050 756100                    STQ     ECP+7,,AUTO
         2 002267   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002270   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002271   000000 701000 xent               TSX1    SSS$SYSTIME
         2 002272   000000 011000                    NOP     0

     1121    14258
     1122    14259
     1123    14260        /* MM will take care of charging procedure correctly.
     1124    14261        */
     1125    14262    2           GOTO ASP_FETCH;

  14262  2 002273   002406 710000 2                  TRA     ASP_FETCH

  14248  2 002274                       JST$FETCH    null
     1126    14263        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:152  
     1127    14264        /*************************************************************
     1128    14265         *                                                           *
     1129    14266         *                      JST$FETCH                            *
     1130    14267         *                                                           *
     1131    14268         *************************************************************/
     1132    14269        /* This is the start of the fetch-a-run-unit section of JST$GETPROG */
     1133    14270    2   JST$FETCH:;
     1134    14271
     1135    14272
     1136    14273        /* And now, set up for and read in the program procedure records.
     1137    14274        */
     1138    14275    2           TEMP1 = B$HEAD.RPROC;           /* # of words of root procedure       */

  14275  2 002274   000000 470400 xsym               LDP0    B$SBUF1$
         2 002275   000001 236100                    LDQ     1,,PR0
         2 002276   000016 376000 3                  ANQ     14
         2 002277   200016 756100                    STQ     TEMP1,,AUTO

     1139    14276    2           IF TEMP1 > 0

  14276  2 002300   002355 604400 2                  TMOZ    s:14292

     1140    14277    3           THEN DO;

     1141    14278    3                TEMP2 = (TEMP1 + 1023)/1024;

  14278  2 002301   001777 036007                    ADLQ    1023,DL
         2 002302   002000 506007                    DIV     1024,DL
         2 002303   200017 756100                    STQ     TEMP2,,AUTO

     1142    14279    3                TEMP3 = B$JIT.PLL - %ISEGLO; /* PLL                              */

  14279  2 002304   000000 471400 xsym               LDP1    B$JIT$
         2 002305   100176 236100                    LDQ     126,,PR1
         2 002306   000022 772000                    QRL     18
         2 002307   000100 136007                    SBLQ    64,DL
         2 002310   200020 756100                    STQ     TEMP3,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:153  

     1143    14280
     1144    14281    3                CALL MMG$SGVP(%USERWSQ,BITBIN(%ISSID),TEMP3,TEMP2,ERR)

  14281  2 002311   200022 633500                    EPPR3   ERR,,AUTO
         2 002312   200054 453500                    STP3    ECP+11,,AUTO
         2 002313   200017 634500                    EPPR4   TEMP2,,AUTO
         2 002314   200053 454500                    STP4    ECP+10,,AUTO
         2 002315   200020 635500                    EPPR5   TEMP3,,AUTO
         2 002316   200052 455500                    STP5    ECP+9,,AUTO
         2 002317   000040 237000 3                  LDAQ    32
         2 002320   200050 757100                    STAQ    ECP+7,,AUTO
         2 002321   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002322   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 002323   000000 701000 xent               TSX1    MMG$SGVP
         2 002324   003616 702000 2                  TSX2    ASP_ERR

     1145    14282    3                  ALTRET(ASP_ERR);
     1146    14283    3                TEMP2 = B$HEAD.PRECSIZE;

  14283  2 002325   000000 470400 xsym               LDP0    B$SBUF1$
         2 002326   000006 236100                    LDQ     6,,PR0
         2 002327   000022 772000                    QRL     18
         2 002330   200017 756100                    STQ     TEMP2,,AUTO

     1147    14284    3                DSPTR$ = PINCRW(B$USERIS$,TEMP3*1024);

  14284  2 002331   200020 236100                    LDQ     TEMP3,,AUTO
         2 002332   000034 736000                    QLS     28
         2 002333   000000 036000 xsym               ADLQ    B$USERIS$
         2 002334   200034 756100                    STQ     DSPTR$,,AUTO

     1148    14285    3                CALL JSF$READ(%TYPPROG,TEMP2,TEMP1,DSPTR$,0,ERR) ALTRET(ASP_ERR);

  14285  2 002335   200022 631500                    EPPR1   ERR,,AUTO
         2 002336   200055 451500                    STP1    ECP+12,,AUTO
         2 002337   000011 236000 3                  LDQ     9
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:154  
         2 002340   200054 756100                    STQ     ECP+11,,AUTO
         2 002341   200034 633500                    EPPR3   DSPTR$,,AUTO
         2 002342   200053 453500                    STP3    ECP+10,,AUTO
         2 002343   200016 634500                    EPPR4   TEMP1,,AUTO
         2 002344   200052 454500                    STP4    ECP+9,,AUTO
         2 002345   200017 635500                    EPPR5   TEMP2,,AUTO
         2 002346   200051 455500                    STP5    ECP+8,,AUTO
         2 002347   000032 236000 3                  LDQ     26
         2 002350   200050 756100                    STQ     ECP+7,,AUTO
         2 002351   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002352   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 002353   000000 701000 xent               TSX1    JSF$READ
         2 002354   003616 702000 2                  TSX2    ASP_ERR

     1149    14286    3                END;

     1150    14287
     1151    14288        /* Now, set memory protection to read-only for all procedure pages.
     1152    14289           All other instruction segment pages will have been set to read/write
     1153    14290           Do this only if scheduler won't.
     1154    14291        */
     1155    14292    2           IF NOT SHARED_FLAG

  14292  2 002355   200015 234100                    SZN     SHARED_FLAG,,AUTO
         2 002356   002406 604000 2                  TMI     ASP_FETCH

     1156    14293    3           THEN DO;

     1157    14294    3                TEMP2= B$JIT.PLL + B$JIT.PCP - 1;

  14294  2 002357   000000 470400 xsym               LDP0    B$JIT$
         2 002360   000201 236100                    LDQ     129,,PR0
         2 002361   000022 772000                    QRL     18
         2 002362   200050 756100                    STQ     ECP+7,,AUTO
         2 002363   000176 236100                    LDQ     126,,PR0
         2 002364   000022 772000                    QRL     18
         2 002365   200050 036100                    ADLQ    ECP+7,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:155  
         2 002366   000001 136007                    SBLQ    1,DL
         2 002367   200017 756100                    STQ     TEMP2,,AUTO

     1158    14295    4                DO I = B$JIT.PLL TO TEMP2;

  14295  2 002370   000176 236100                    LDQ     126,,PR0
         2 002371   000022 772000                    QRL     18
         2 002372   200012 756100                    STQ     I,,AUTO
         2 002373   002403 710000 2                  TRA     s:14297+1

     1159    14296    4                     B$UPT.CTRL(I) = %PGINMEM | %PGIOM;

  14296  2 002374   000000 470400 xsym               LDP0    B$UPT$
         2 002375   200012 720100                    LXL0    I,,AUTO
         2 002376   000000 236110                    LDQ     0,X0,PR0
         2 002377   000042 376000 3                  ANQ     34
         2 002400   000044 276007                    ORQ     36,DL
         2 002401   000000 756110                    STQ     0,X0,PR0

     1160    14297    4                     END;

  14297  2 002402   200012 054100                    AOS     I,,AUTO
         2 002403   200012 236100                    LDQ     I,,AUTO
         2 002404   200017 116100                    CMPQ    TEMP2,,AUTO
         2 002405   002374 604400 2                  TMOZ    s:14296

     1161    14298    3                END;

     1162    14299
     1163    14300        /* Fall through to ASP_FETCH.
     1164    14301        */
     1165    14302
     1166    14303        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:156  
     1167    14304
     1168    14305        /*************************************************************
     1169    14306         *                                                           *
     1170    14307         *                      ASP_FETCH                            *
     1171    14308         *                                                           *
     1172    14309         *************************************************************/
     1173    14310        /* Must do the following for both.  */
     1174    14311    2   ASP_FETCH:;

  14311  2 002406                       ASP_FETCH    null
     1175    14312
     1176    14313        /* Give back our file mgmt buffers if he's not overlaid.
     1177    14314        */
     1178    14315    2           IF NOT B$HEAD.OVRL

  14315  2 002406   000000 470400 xsym               LDP0    B$SBUF1$
         2 002407   000022 236100                    LDQ     18,,PR0
         2 002410   000010 316003                    CANQ    8,DU
         2 002411   002416 601000 2                  TNZ     s:14322

     1179    14316    3           THEN DO;

     1180    14317    3                CALL FMF$TRUNCM(0);

  14317  2 002412   000011 630400 3                  EPPR0   9
         2 002413   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002414   000000 701000 xent               TSX1    FMF$TRUNCM
         2 002415   000000 011000                    NOP     0

     1181    14318    3                END;

     1182    14319
     1183    14320        /* Now set user or processor accounting based on HEAD record flag.
     1184    14321        */
     1185    14322    2           IF B$HEAD.PROCACC AND SYSFLAG

  14322  2 002416   000000 470400 xsym               LDP0    B$SBUF1$
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:157  
         2 002417   000022 236100                    LDQ     18,,PR0
         2 002420   000004 316003                    CANQ    4,DU
         2 002421   002430 600000 2                  TZE     s:14324
         2 002422   200014 234100                    SZN     SYSFLAG,,AUTO
         2 002423   002430 605000 2                  TPL     s:14324

     1186    14323    2           THEN B$JIT.RUNFLAGS = %RUN_PROC#;

  14323  2 002424   000000 471400 xsym               LDP1    B$JIT$
         2 002425   002000 236007                    LDQ     1024,DL
         2 002426   100314 552110                    STBQ    204,'10'O,PR1
         2 002427   002433 710000 2                  TRA     s:14328

     1187    14324    2           ELSE B$JIT.RUNFLAGS = %RUN_USER#;

  14324  2 002430   000000 471400 xsym               LDP1    B$JIT$
         2 002431   004000 236007                    LDQ     2048,DL
         2 002432   100314 552110                    STBQ    204,'10'O,PR1

     1188    14325
     1189    14326        /* Initialize a safe store frame for starting up this user.
     1190    14327        */
     1191    14328    2           TEMP1 = B$HEAD.START;

  14328  2 002433   000003 236100                    LDQ     3,,PR0
         2 002434   000016 376000 3                  ANQ     14
         2 002435   200016 756100                    STQ     TEMP1,,AUTO

     1192    14329    2           CALL JSS$INITSS(TEMP1,%USERWSR);

  14329  2 002436   000043 236000 3                  LDQ     35
         2 002437   200051 756100                    STQ     ECP+8,,AUTO
         2 002440   200016 633500                    EPPR3   TEMP1,,AUTO
         2 002441   200050 453500                    STP3    ECP+7,,AUTO
         2 002442   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002443   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002444   000000 701000 xent               TSX1    JSS$INITSS
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:158  
         2 002445   000000 011000                    NOP     0

     1193    14330
     1194    14331        /* Write Processor accounting record if thats the right thing to do.
     1195    14332        */
     1196    14333    2           IF B$HEAD.PROCSURCHG AND SYSFLAG

  14333  2 002446   000000 470400 xsym               LDP0    B$SBUF1$
         2 002447   000022 236100                    LDQ     18,,PR0
         2 002450   000001 316003                    CANQ    1,DU
         2 002451   002472 600000 2                  TZE     JST$ADDPROCS
         2 002452   200014 234100                    SZN     SYSFLAG,,AUTO
         2 002453   002472 605000 2                  TPL     JST$ADDPROCS

     1197    14334    3           THEN DO;

     1198    14335    3                B$JIT.RUNFLAGS = %RUN_PROC#;

  14335  2 002454   000000 471400 xsym               LDP1    B$JIT$
         2 002455   002000 236007                    LDQ     1024,DL
         2 002456   100314 552110                    STBQ    204,'10'O,PR1

     1199    14336    3                B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 | %CP_PROCACCT#);

  14336  2 002457   100143 236100                    LDQ     99,,PR1
         2 002460   000033 276000 1                  ORQ     EBSUNM+9
         2 002461   100143 756100                    STQ     99,,PR1

     1200    14337    3                ACCT_TYP = %PSTART#;

  14337  2 002462   001000 236003                    LDQ     512,DU
         2 002463   200020 552140                    STBQ    TEMP3,'40'O,AUTO

     1201    14338    3                CALL JSU$WSTAR(ACCT_TYP);

  14338  2 002464   200020 633500                    EPPR3   TEMP3,,AUTO
         2 002465   200050 453500                    STP3    ECP+7,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:159  
         2 002466   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002467   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002470   000000 701000 xent               TSX1    JSU$WSTAR
         2 002471   000000 011000                    NOP     0

     1202    14339    3                END;

  14333  2 002472                       JST$ADDPROCS null
     1203    14340
     1204    14341        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:160  
     1205    14342        /*************************************************************
     1206    14343         *                                                           *
     1207    14344         *                      JST$ADDPROCS                           *
     1208    14345         *                                                           *
     1209    14346         *************************************************************/
     1210    14347    2   JST$ADDPROCS:;
     1211    14348        /*
     1212    14349              If we need an asl call JSA$ASL to associate it
     1213    14350        */
     1214    14351    2           IF ASL$ ~= ADDR(NIL)

  14351  2 002472   200010 236100                    LDQ     ASL$,,AUTO
         2 002473   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002474   002530 600000 2                  TZE     s:14367

     1215    14352    3           THEN DO;

     1216    14353    3                PTYPE=%P_ASL;

  14353  2 002475   200000 220003                    LDX0    65536,DU
         2 002476   200033 740100                    STX0    PTYPE,,AUTO

     1217    14354    3                CALL JSA$FINDSSP (ASL$,J_SYS$,ERR,PTYPE,ERR)

  14354  2 002477   200022 630500                    EPPR0   ERR,,AUTO
         2 002500   200054 450500                    STP0    ECP+11,,AUTO
         2 002501   200033 631500                    EPPR1   PTYPE,,AUTO
         2 002502   200053 451500                    STP1    ECP+10,,AUTO
         2 002503   200022 633500                    EPPR3   ERR,,AUTO
         2 002504   200052 453500                    STP3    ECP+9,,AUTO
         2 002505   000044 236000 3                  LDQ     36
         2 002506   200051 756100                    STQ     ECP+8,,AUTO
         2 002507   200010 634500                    EPPR4   ASL$,,AUTO
         2 002510   200050 454500                    STP4    ECP+7,,AUTO
         2 002511   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002512   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 002513   000000 701000 xent               TSX1    JSA$FINDSSP
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:161  
         2 002514   002516 702000 2                  TSX2    s:14356
         2 002515   002522 710000 2                  TRA     s:14362

     1218    14355    4                WHENALTRETURN DO;

     1219    14356    4                     B$JIT.ERR=ENOSUCHASL;

  14356  2 002516   000006 236000 1                  LDQ     ENOSUCHASL
         2 002517   000000 470400 xsym               LDP0    B$JIT$
         2 002520   000012 756100                    STQ     10,,PR0

     1220    14357    4                     GOTO ASP_ERR1;

  14357  2 002521   003626 710000 2                  TRA     ASP_ERR1

     1221    14358    4                     END;
     1222    14359        /*E*    ERROR:  JST-E$NOSUCHASL-E
     1223    14360                MESSAGE: The requested Alternate Shared Library does not exist.
     1224    14361        */
     1225    14362    3                CALL JSA$ASL(ERR) ALTRET(ASP_ERR1);

  14362  2 002522   200022 630500                    EPPR0   ERR,,AUTO
         2 002523   200050 450500                    STP0    ECP+7,,AUTO
         2 002524   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002525   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002526   000000 701000 xent               TSX1    JSA$ASL
         2 002527   003626 702000 2                  TSX2    ASP_ERR1

     1226    14363    3                END;

     1227    14364        /*
     1228    14365               Now do the same for asp(core library)
     1229    14366        */
     1230    14367    2           IF ASP$ ~= ADDR(NIL)

  14367  2 002530   200011 236100                    LDQ     ASP$,,AUTO
         2 002531   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:162  
         2 002532   002566 600000 2                  TZE     s:14383

     1231    14368    3           THEN DO;

     1232    14369    3                PTYPE=%P_LIB;

  14369  2 002533   100000 220003                    LDX0    32768,DU
         2 002534   200033 740100                    STX0    PTYPE,,AUTO

     1233    14370    3                CALL JSA$FINDSSP (ASP$,J_SYS$,ERR,PTYPE,ERR)

  14370  2 002535   200022 630500                    EPPR0   ERR,,AUTO
         2 002536   200054 450500                    STP0    ECP+11,,AUTO
         2 002537   200033 631500                    EPPR1   PTYPE,,AUTO
         2 002540   200053 451500                    STP1    ECP+10,,AUTO
         2 002541   200022 633500                    EPPR3   ERR,,AUTO
         2 002542   200052 453500                    STP3    ECP+9,,AUTO
         2 002543   000044 236000 3                  LDQ     36
         2 002544   200051 756100                    STQ     ECP+8,,AUTO
         2 002545   200011 634500                    EPPR4   ASP$,,AUTO
         2 002546   200050 454500                    STP4    ECP+7,,AUTO
         2 002547   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002550   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 002551   000000 701000 xent               TSX1    JSA$FINDSSP
         2 002552   002554 702000 2                  TSX2    s:14372
         2 002553   002560 710000 2                  TRA     s:14378

     1234    14371    4                WHENALTRETURN DO;

     1235    14372    4                     B$JIT.ERR=ENOSHRLIB;

  14372  2 002554   000004 236000 1                  LDQ     ENOSHRLIB
         2 002555   000000 470400 xsym               LDP0    B$JIT$
         2 002556   000012 756100                    STQ     10,,PR0

     1236    14373    4                     GOTO ASP_ERR1;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:163  
  14373  2 002557   003626 710000 2                  TRA     ASP_ERR1

     1237    14374    4                     END;
     1238    14375        /*E*    ERROR:  JST-E$NOSHRLIB-E
     1239    14376                MESSAGE: The requested shared library does not exist.
     1240    14377        */
     1241    14378    3                CALL JSA$CLIB(ERR) ALTRET(ASP_ERR1);

  14378  2 002560   200022 630500                    EPPR0   ERR,,AUTO
         2 002561   200050 450500                    STP0    ECP+7,,AUTO
         2 002562   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002563   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002564   000000 701000 xent               TSX1    JSA$CLIB
         2 002565   003626 702000 2                  TSX2    ASP_ERR1

     1242    14379    3                END;

     1243    14380        /*
     1244    14381               And finally, check for a debugger being ASSOCIATED...
     1245    14382        */
     1246    14383    2           IF DEBUG$ ~= ADDR(NIL)

  14383  2 002566   200007 470500                    LDP0    @DEBUG$,,AUTO
         2 002567   000000 236100                    LDQ     0,,PR0
         2 002570   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002571   002624 600000 2                  TZE     s:14397

     1247    14384    3           THEN DO;

     1248    14385    3                PTYPE=%P_DB;

  14385  2 002572   020000 220003                    LDX0    8192,DU
         2 002573   200033 740100                    STX0    PTYPE,,AUTO

     1249    14386    3                CALL JSA$FINDSSP (DEBUG$,J_SYS$,ERR,PTYPE,ERR)

  14386  2 002574   200022 631500                    EPPR1   ERR,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:164  
         2 002575   200054 451500                    STP1    ECP+11,,AUTO
         2 002576   200033 633500                    EPPR3   PTYPE,,AUTO
         2 002577   200053 453500                    STP3    ECP+10,,AUTO
         2 002600   200022 634500                    EPPR4   ERR,,AUTO
         2 002601   200052 454500                    STP4    ECP+9,,AUTO
         2 002602   000044 236000 3                  LDQ     36
         2 002603   200007 235100                    LDA     @DEBUG$,,AUTO
         2 002604   200050 757100                    STAQ    ECP+7,,AUTO
         2 002605   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002606   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 002607   000000 701000 xent               TSX1    JSA$FINDSSP
         2 002610   002612 702000 2                  TSX2    s:14388
         2 002611   002616 710000 2                  TRA     s:14391

     1250    14387    4                WHENALTRETURN DO;

     1251    14388    4                     B$JIT.ERR=EBADDBUGR;

  14388  2 002612   000002 236000 1                  LDQ     EBADDBUGR
         2 002613   000000 470400 xsym               LDP0    B$JIT$
         2 002614   000012 756100                    STQ     10,,PR0

     1252    14389    4                     GOTO ASP_ERR1;

  14389  2 002615   003626 710000 2                  TRA     ASP_ERR1

     1253    14390    4                     END;
     1254    14391    3                CALL JSA$DB(ERR) ALTRET(ASP_ERR1);

  14391  2 002616   200022 630500                    EPPR0   ERR,,AUTO
         2 002617   200050 450500                    STP0    ECP+7,,AUTO
         2 002620   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002621   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002622   000000 701000 xent               TSX1    JSA$DB
         2 002623   003626 702000 2                  TSX2    ASP_ERR1

     1255    14392    3                END;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:165  

     1256    14393
     1257    14394        /* If this program was intended to be shared, then
     1258    14395           put in the entries.
     1259    14396        */
     1260    14397    2           IF SHARED_FLAG

  14397  2 002624   200015 234100                    SZN     SHARED_FLAG,,AUTO
         2 002625   002630 605000 2                  TPL     s:14403

     1261    14398    2           THEN
     1262    14399    2                CALL INSTALL_PROC;

  14399  2 002626   004314 701000 2                  TSX1    INSTALL_PROC
         2 002627   000000 011000                    NOP     0

     1263    14400
     1264    14401        /* Finally, release fetch's special buffer page
     1265    14402        */
     1266    14403    2           CALL MME$WFVP(%USERWSQ,%SBUF1PG,TEMP1,ERR);

  14403  2 002630   200022 630500                    EPPR0   ERR,,AUTO
         2 002631   200053 450500                    STP0    ECP+10,,AUTO
         2 002632   200016 631500                    EPPR1   TEMP1,,AUTO
         2 002633   200052 451500                    STP1    ECP+9,,AUTO
         2 002634   000006 237000 3                  LDAQ    6
         2 002635   200050 757100                    STAQ    ECP+7,,AUTO
         2 002636   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002637   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 002640   000000 701000 xent               TSX1    MME$WFVP
         2 002641   000000 011000                    NOP     0

     1267    14404
     1268    14405        /* And go to join the SSP routine at JST$USERGO
     1269    14406        */
     1270    14407    2           GOTO JST$USERGO;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:166  
  14407  2 002642   003216 710000 2                  TRA     JST$USERGO

     1271    14408    2           END;                            /* End of 'do if sharable or R.U.     */
     1272    14409        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:167  
     1273    14410        /*************************************************************
     1274    14411         *                                                           *
     1275    14412         *     DO IF SPECIAL SHARED PROCESSOR                        *
     1276    14413         *                                                           *
     1277    14414         *************************************************************/
     1278    14415        /* Here begins the 'ELSE' half of the big IF...THEN...ELSE clause
     1279    14416           that was mentioned earlier.  This half handles special shared
     1280    14417           processors.
     1281    14418        */
     1282    14419    2      ELSE DO;

     1283    14420
     1284    14421        /* Yell if somebody calls an ASL or library as if it were a run unit.
     1285    14422        */
     1286    14423    2           IF (PTYPE & (%P_LIB | %P_ASL))

  14423  2 002643   200033 220100                    LDX0    PTYPE,,AUTO
         2 002644   300000 360003                    ANX0    98304,DU
         2 002645   002652 600000 2                  TZE     s:14431

     1287    14424    3           THEN DO;

     1288    14425    3                B$JIT.ERR=ENOTANRU;

  14425  2 002646   000005 236000 1                  LDQ     ENOTANRU
         2 002647   000000 470400 xsym               LDP0    B$JIT$
         2 002650   000012 756100                    STQ     10,,PR0

     1289    14426    3                GOTO SSP_ERR;

  14426  2 002651   003712 710000 2                  TRA     SSP_ERR

     1290    14427    3                END;
     1291    14428
     1292    14429        /* Check for illegal calls to LOGON or LOGON abort loops.
     1293    14430        */
     1294    14431    2           IF (B$U.ACP ~= 0) AND
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:168  

  14431  2 002652   000000 470400 xsym               LDP0    S$CU$
         2 002653   000006 236100                    LDQ     6,,PR0
         2 002654   000777 316003                    CANQ    511,DU
         2 002655   002711 600000 2                  TZE     s:14447
         2 002656   200003 471500                    LDP1    @NAME$,,AUTO
         2 002657   100000 473500                    LDP3    0,,PR1
         2 002660   000100 101500                    MRL     fill='000'O
         2 002661   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         2 002662   200050 000002                    ADSC9   ECP+7,,AUTO              cn=0,n=2
         2 002663   200050 220100                    LDX0    ECP+7,,AUTO
         2 002664   040000 106540                    CMPC    fill='040'O
         2 002665   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
         2 002666   000000 200007 xsym               ADSC9   J_LOGON                  cn=1,n=7
         2 002667   002711 601000 2                  TNZ     s:14447

     1295    14432    2             (SUBSTR(NAME$->B$TEXTC.TEXT,0,NAME$->B$TEXTC.COUNT) = J_LOGON.NAME)
     1296    14433    3           THEN DO;

     1297    14434                            /* Avoid looping back through JST$ABORTM if LOGON aborts. */
     1298    14435    3                IF B_P.NAME.TEXT(B$U.ACP) = J_LOGON.NAME

  14435  2 002670   000006 236100                    LDQ     6,,PR0
         2 002671   000022 772000                    QRL     18
         2 002672   000777 376007                    ANQ     511,DL
         2 002673   000021 402007                    MPY     17,DL
         2 002674   000003 736000                    QLS     3
         2 002675   000000 473400 xsym               LDP3    B$P$
         2 002676   040000 106506                    CMPC    fill='040'O
         2 002677   300032 200037                    ADSC9   26,Q,PR3                 cn=1,n=31
         2 002700   000000 200007 xsym               ADSC9   J_LOGON                  cn=1,n=7
         2 002701   002705 601000 2                  TNZ     s:14437

     1299    14436    3                THEN CALL JSD$DELUSR;

  14436  2 002702   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002703   000000 701000 xent               TSX1    JSD$DELUSR
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:169  
         2 002704   000000 011000                    NOP     0

     1300    14437    3                B$JIT.ERR = EBADLOGON;

  14437  2 002705   000010 236000 1                  LDQ     EBADLOGON
         2 002706   000000 470400 xsym               LDP0    B$JIT$
         2 002707   000012 756100                    STQ     10,,PR0

     1301    14438    3                GOTO SSP_ERR;

  14438  2 002710   003712 710000 2                  TRA     SSP_ERR

     1302    14439    3                END;
     1303    14440        /*E*    ERROR:  JST-E$PROCACCESS-E
     1304    14441                MESSAGE: You are not allowed to access that processor.
     1305    14442        */
     1306    14443
     1307    14444        /* Check for screw-up by operations: a special shared processor
     1308    14445           that didn't end up getting installed.
     1309    14446        */
     1310    14447    2           IF B_P.PPC(PNUM) = 0

  14447  2 002711   200032 236100                    LDQ     PNUM,,AUTO
         2 002712   000042 402007                    MPY     34,DL
         2 002713   000000 471400 xsym               LDP1    B$P$
         2 002714   100003 235106                    LDA     3,QL,PR1
         2 002715   002722 601000 2                  TNZ     s:14458

     1311    14448    3           THEN DO;

     1312    14449    3                B$JIT.ERR=EBADSSP;

  14449  2 002716   000001 236000 1                  LDQ     EBADSSP
         2 002717   000000 473400 xsym               LDP3    B$JIT$
         2 002720   300012 756100                    STQ     10,,PR3

     1313    14450    3                GOTO SSP_ERR;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:170  

  14450  2 002721   003712 710000 2                  TRA     SSP_ERR

     1314    14451    3                END;
     1315    14452        /*E*    ERROR:  JST-E$BADSSP-E
     1316    14453               MESSAGE: That special shared processor has not been installed.
     1317    14454        */
     1318    14455
     1319    14456        /* Check for an M$LINK to a special shared processor.
     1320    14457        */
     1321    14458    2           IF (B$JIT.JUNK & %JJ_MLINKIP#)

  14458  2 002722   000000 473400 xsym               LDP3    B$JIT$
         2 002723   300315 220100                    LDX0    205,,PR3
         2 002724   000001 360003                    ANX0    1,DU
         2 002725   002737 600000 2                  TZE     s:14469

     1322    14459    3           THEN DO;

     1323    14460    3                IF (PTYPE & %P_CP) AND (B$JIT.CPFLAGS1 & %CP_LNKPMME#)

  14460  2 002726   200033 220100                    LDX0    PTYPE,,AUTO
         2 002727   400000 360003                    ANX0    -131072,DU
         2 002730   002734 600000 2                  TZE     s:14463
         2 002731   300143 236100                    LDQ     99,,PR3
         2 002732   000034 376000 1                  ANQ     EBSUNM+10
         2 002733   002737 601000 2                  TNZ     s:14469

     1324    14461    3                THEN EXIT;
     1325    14462
     1326    14463    3                B$JIT.ERR=ELDLNKSSP;

  14463  2 002734   000007 236000 1                  LDQ     ELDLNKSSP
         2 002735   300012 756100                    STQ     10,,PR3

     1327    14464    3                GOTO SSP_ERR;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:171  
  14464  2 002736   003712 710000 2                  TRA     SSP_ERR

     1328    14465    3                END;
     1329    14466        /*E*    ERROR:  JST-E$LDLNKSSP-A
     1330    14467               MESSAGE: M$LINK and M$LDTRC to a Special Shared Processor is not allowed.
     1331    14468        */
     1332    14469    2           IF PTYPE & %P_CP

  14469  2 002737   200033 220100                    LDX0    PTYPE,,AUTO
         2 002740   400000 360003                    ANX0    -131072,DU
         2 002741   003062 600000 2                  TZE     s:14513

     1333    14470    3           THEN DO;

     1334    14471
     1335    14472        /* If switching from one Command Processor to another
     1336    14473           make sure the old CP Data Segments and ECCB are rundown.
     1337    14474        */
     1338    14475    3                IF (B$U.ACP ~= PNUM)

  14475  2 002742   000006 236100                    LDQ     6,,PR0
         2 002743   000022 772000                    QRL     18
         2 002744   000777 376007                    ANQ     511,DL
         2 002745   200032 116100                    CMPQ    PNUM,,AUTO
         2 002746   002756 600000 2                  TZE     s:14480

     1339    14476    4                THEN DO;

     1340    14477    4                     B$JIT.PRIOR_CP = B$U.ACP;

  14477  2 002747   000006 236100                    LDQ     6,,PR0
         2 002750   000011 772000                    QRL     9
         2 002751   300321 552110                    STBQ    209,'10'O,PR3

     1341    14478    4                     CALL JSA$RUNDSPC(%CPWSQ,1);

  14478  2 002752   000045 630400 3                  EPPR0   37
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:172  
         2 002753   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002754   000000 701000 xent               TSX1    JSA$RUNDSPC
         2 002755   000000 011000                    NOP     0

     1342    14479    4                     END;

     1343    14480    3                CALL JSA$GETTCB(PNUM) ALTRET(SSP_ERR);

  14480  2 002756   200032 630500                    EPPR0   PNUM,,AUTO
         2 002757   200050 450500                    STP0    ECP+7,,AUTO
         2 002760   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002761   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002762   000000 701000 xent               TSX1    JSA$GETTCB
         2 002763   003712 702000 2                  TSX2    SSP_ERR

     1344    14481
     1345    14482        /* Map in the CP's data segments here....
     1346    14483        */
     1347    14484    3                CALL JSA$MAP_DATASEGS(%CPWSQ,PNUM);

  14484  2 002764   200032 630500                    EPPR0   PNUM,,AUTO
         2 002765   200051 450500                    STP0    ECP+8,,AUTO
         2 002766   000045 236000 3                  LDQ     37
         2 002767   200050 756100                    STQ     ECP+7,,AUTO
         2 002770   200050 630500                    EPPR0   ECP+7,,AUTO
         2 002771   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002772   000000 701000 xent               TSX1    JSA$MAP_DATASEGS
         2 002773   000000 011000                    NOP     0

     1348    14485
     1349    14486        /* If this is a Command Processor, set JIT.PRIV.PRC from P.FLGS
     1350    14487           (but only if we're at job step!!!)
     1351    14488        */
     1352    14489    3                IF (B$JIT.CPFLAGS1 & %CP_JSTEP#)

  14489  2 002774   000000 470400 xsym               LDP0    B$JIT$
         2 002775   000143 236100                    LDQ     99,,PR0
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:173  
         2 002776   000024 376000 1                  ANQ     EBSUNM+2
         2 002777   003005 600000 2                  TZE     s:14495

     1353    14490    3                THEN B$JIT.PRIV.PRC = B_P.PRIV(PNUM);

  14490  2 003000   200032 236100                    LDQ     PNUM,,AUTO
         2 003001   000042 402007                    MPY     34,DL
         2 003002   000000 471400 xsym               LDP1    B$P$
         2 003003   100010 236106                    LDQ     8,QL,PR1
         2 003004   000016 756100                    STQ     14,,PR0

     1354    14491
     1355    14492        /* Bump the frequency-of-use counter for CP's here. (Other special
     1356    14493           shared processors get their's bumped in the corresponding JSA routine).
     1357    14494        */
     1358    14495    3                B_P.FRQ(PNUM) = B_P.FRQ(PNUM) + 1;

  14495  2 003005   200032 236100                    LDQ     PNUM,,AUTO
         2 003006   000042 402007                    MPY     34,DL
         2 003007   000000 471400 xsym               LDP1    B$P$
         2 003010   100001 235106                    LDA     1,QL,PR1
         2 003011   000001 035007                    ADLA    1,DL
         2 003012   100001 755106                    STA     1,QL,PR1

     1359    14496
     1360    14497        /* Set up the CP's processor number and ISR.
     1361    14498        */
     1362    14499    3                B$U.ACP = PNUM;

  14499  2 003013   000000 471400 xsym               LDP1    S$CU$
         2 003014   200032 236100                    LDQ     PNUM,,AUTO
         2 003015   000022 736000                    QLS     18
         2 003016   100006 552120                    STBQ    6,'20'O,PR1

     1363    14500    3                B$CPLS$->B$ULNK.IS.BOUND = (B_P.HVA(PNUM)-B_P.PVA(PNUM))*4096 - 1;

  14500  2 003017   200032 236100                    LDQ     PNUM,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:174  
         2 003020   000042 402007                    MPY     34,DL
         2 003021   000000 473400 xsym               LDP3    B$P$
         2 003022   300025 236106                    LDQ     21,QL,PR3
         2 003023   000022 772000                    QRL     18
         2 003024   200050 756100                    STQ     ECP+7,,AUTO
         2 003025   200032 236100                    LDQ     PNUM,,AUTO
         2 003026   000042 402007                    MPY     34,DL
         2 003027   300026 236106                    LDQ     22,QL,PR3
         2 003030   000022 772000                    QRL     18
         2 003031   200050 136100                    SBLQ    ECP+7,,AUTO
         2 003032   000000 474400 xsym               LDP4    B$CPLS$
         2 003033   000014 736000                    QLS     12
         2 003034   000001 136007                    SBLQ    1,DL
         2 003035   000020 736000                    QLS     16
         2 003036   400000 676100                    ERQ     0,,PR4
         2 003037   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 003040   400000 656100                    ERSQ    0,,PR4

     1364    14501    3                B$CPLS$->B$ULNK.IS.BASE = B_P.PVA(PNUM) * 4096;

  14501  2 003041   200032 236100                    LDQ     PNUM,,AUTO
         2 003042   000042 402007                    MPY     34,DL
         2 003043   000000 471400 xsym               LDP1    B$P$
         2 003044   100025 236106                    LDQ     21,QL,PR1
         2 003045   000006 772000                    QRL     6
         2 003046   000047 376000 3                  ANQ     39
         2 003047   400001 756100                    STQ     1,,PR4

     1365    14502    3                B$SDS0$->B$SDS.ACPENT.ENTLOC = B_P.SA(PNUM); /*Start addr*/

  14502  2 003050   200032 236100                    LDQ     PNUM,,AUTO
         2 003051   000042 402007                    MPY     34,DL
         2 003052   100026 720106                    LXL0    22,QL,PR1
         2 003053   000000 473400 xsym               LDP3    B$SDS0$
         2 003054   300006 740100                    STX0    6,,PR3

     1366    14503    3                B$U.FLG = B$U.FLG | %U_CPIC;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:175  

  14503  2 003055   000000 475400 xsym               LDP5    S$CU$
         2 003056   500000 236100                    LDQ     0,,PR5
         2 003057   000023 276000 1                  ORQ     EBSUNM+1
         2 003060   500000 756100                    STQ     0,,PR5

     1367    14504    3                END;                       /* End of do-if-command program       */

  14504  2 003061   003216 710000 2                  TRA     JST$USERGO

     1368    14505        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:176  
     1369    14506    3           ELSE DO;

     1370    14507        /* To get here, we're going for a debugger */
     1371    14508
     1372    14509        /* If this is a batch user (post-)associating DELTA, then let him
     1373    14510           have the MAXMEM privilege for this job step to insure that any
     1374    14511           PMD's can get done.
     1375    14512        */
     1376    14513    3                IF (B$JIT.MODE = %M_BATCH#)

  14513  2 003062   300000 236100                    LDQ     0,,PR3
         2 003063   740000 376003                    ANQ     -16384,DU
         2 003064   040000 116003                    CMPQ    16384,DU
         2 003065   003071 601000 2                  TNZ     s:14520

     1377    14514    3                THEN B$JIT.PRIV.PRC = B$JIT.PRIV.PRC | %PR_MAXMEM#;

  14514  2 003066   300016 236100                    LDQ     14,,PR3
         2 003067   000006 276000 xsym               ORQ     B_VECTNIL+6
         2 003070   300016 756100                    STQ     14,,PR3

     1378    14515        /* We bumped the UC for the debugger when we locked the processor
     1379    14516           after finding it in the shared proc tables.  Decrement the UC
     1380    14517           here, as JSA$DB is going to bump it again if successfully
     1381    14518           associated.
     1382    14519        */
     1383    14520    3                B$JIT.RUNFLAGS = %RUN_PROC#; /* Processor acctg                  */

  14520  2 003071   002000 236007                    LDQ     1024,DL
         2 003072   300314 552110                    STBQ    204,'10'O,PR3

     1384    14521                     %LOCK (G=J_PLOCK);

  14522  2 003073   000001 630400 3                  EPPR0   1
         2 003074   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003075   000000 701000 xent               TSX1    HFC$LOCK
         2 003076   000000 011000                    NOP     0
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:177  

     1385    14524    3                B_P.UC(PNUM) = B_P.UC(PNUM) -1;

  14524  2 003077   200032 236100                    LDQ     PNUM,,AUTO
         2 003100   000042 402007                    MPY     34,DL
         2 003101   000000 470400 xsym               LDP0    B$P$
         2 003102   000000 620006                    EAX0    0,QL
         2 003103   000001 336007                    LCQ     1,DL
         2 003104   000000 056110                    ASQ     0,X0,PR0

     1386    14525                     %UNLOCK (G=J_PLOCK);

  14526  2 003105   000001 630400 3                  EPPR0   1
         2 003106   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003107   000000 701000 xent               TSX1    HFC$UNLOCK
         2 003110   000000 011000                    NOP     0

     1387    14528    3                CALL JSA$DB(PNUM) ALTRET(JST$ABORTM1);

  14528  2 003111   200032 630500                    EPPR0   PNUM,,AUTO
         2 003112   200050 450500                    STP0    ECP+7,,AUTO
         2 003113   200050 630500                    EPPR0   ECP+7,,AUTO
         2 003114   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003115   000000 701000 xent               TSX1    JSA$DB
         2 003116   003730 702000 2                  TSX2    JST$ABORTM1

     1388    14529
     1389    14530        /* Get a data page if there's no program associated.
     1390    14531        */
     1391    14532    3                IF (B$JIT.PCD=0) AND (B$JIT.PCP=0)

  14532  2 003117   000000 470400 xsym               LDP0    B$JIT$
         2 003120   000201 720100                    LXL0    129,,PR0
         2 003121   003216 601000 2                  TNZ     JST$USERGO
         2 003122   000201 221100                    LDX1    129,,PR0
         2 003123   003216 601000 2                  TNZ     JST$USERGO

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:178  
     1392    14533    4                THEN DO;

     1393    14534    4                     TEMP1=1;

  14534  2 003124   000001 235007                    LDA     1,DL
         2 003125   200016 755100                    STA     TEMP1,,AUTO

     1394    14535    4                     CALL JSS$INITSS(TEMP1,%USERWSR);

  14535  2 003126   000043 236000 3                  LDQ     35
         2 003127   200051 756100                    STQ     ECP+8,,AUTO
         2 003130   200016 631500                    EPPR1   TEMP1,,AUTO
         2 003131   200050 451500                    STP1    ECP+7,,AUTO
         2 003132   200050 630500                    EPPR0   ECP+7,,AUTO
         2 003133   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 003134   000000 701000 xent               TSX1    JSS$INITSS
         2 003135   000000 011000                    NOP     0

     1395    14536    4                     CALL MMG$SGVP(%USERWSQ,BITBIN(%ISSID),0,TEMP1,ERR)

  14536  2 003136   200022 630500                    EPPR0   ERR,,AUTO
         2 003137   200054 450500                    STP0    ECP+11,,AUTO
         2 003140   200016 631500                    EPPR1   TEMP1,,AUTO
         2 003141   200053 451500                    STP1    ECP+10,,AUTO
         2 003142   000011 236000 3                  LDQ     9
         2 003143   200052 756100                    STQ     ECP+9,,AUTO
         2 003144   000040 237000 3                  LDAQ    32
         2 003145   200050 757100                    STAQ    ECP+7,,AUTO
         2 003146   200050 630500                    EPPR0   ECP+7,,AUTO
         2 003147   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 003150   000000 701000 xent               TSX1    MMG$SGVP
         2 003151   003616 702000 2                  TSX2    ASP_ERR

     1396    14537    4                       ALTRET(ASP_ERR);
     1397    14538    4                     B$JIT.DLL = %ISEGLO;

  14538  2 003152   000100 220003                    LDX0    64,DU
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:179  
         2 003153   000000 470400 xsym               LDP0    B$JIT$
         2 003154   000177 740100                    STX0    127,,PR0

     1398    14539    4                     B$JIT.DUL = %ISEGLO;

  14539  2 003155   000177 440100                    SXL0    127,,PR0

     1399    14540    4                     B$JIT.PCD = 1;

  14540  2 003156   000001 221003                    LDX1    1,DU
         2 003157   000201 441100                    SXL1    129,,PR0

     1400    14541    4                     B$JIT.DDLL = %ISEGLO+1;

  14541  2 003160   000101 222003                    LDX2    65,DU
         2 003161   000200 742100                    STX2    128,,PR0

     1401    14542    4                     B$JIT.PCDD = 0;

  14542  2 003162   000000 223003                    LDX3    0,DU
         2 003163   000203 443100                    SXL3    131,,PR0

     1402    14543    4                     B$JIT.TDP = %ISEGLO+1;

  14543  2 003164   000204 742100                    STX2    132,,PR0

     1403    14544
     1404    14545
     1405    14546        /* Give stand-alone DELTA users a TCB with 4 frames.
     1406    14547        */
     1407    14548    4                     TCBSZ = 4;

  14548  2 003165   000004 235007                    LDA     4,DL
         2 003166   200023 755100                    STA     TCBSZ,,AUTO

     1408    14549    4                     ROSZ = %IBEX_DCBS#;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:180  
  14549  2 003167   000006 236007                    LDQ     6,DL
         2 003170   200025 756100                    STQ     ROSZ,,AUTO

     1409    14550    4                     CALL INIT_TCB;

  14550  2 003171   003734 701000 2                  TSX1    INIT_TCB
         2 003172   000000 011000                    NOP     0

     1410    14551
     1411    14552        /* Count stand-alone DELTA as a Job Step.
     1412    14553        */
     1413    14554    4                     B$JIT.STEPS = B$JIT.STEPS+1;

  14554  2 003173   000000 470400 xsym               LDP0    B$JIT$
         2 003174   000315 720100                    LXL0    205,,PR0
         2 003175   000001 621010                    EAX1    1,X0
         2 003176   000315 441100                    SXL1    205,,PR0

     1414    14555
     1415    14556        /* Write Step Accounting records to *S if appropriate to do so.
     1416    14557        */
     1417    14558    4                     IF (B$JIT.CPFLAGS1 & %CP_STEPACCT#) OR (B$JIT.SSLEV ~= %AZ_NONE#)

  14558  2 003177   000143 236100                    LDQ     99,,PR0
         2 003200   000031 376000 1                  ANQ     EBSUNM+7
         2 003201   003206 601000 2                  TNZ     s:14560
         2 003202   000151 236100                    LDQ     105,,PR0
         2 003203   007000 376003                    ANQ     3584,DU
         2 003204   003000 116003                    CMPQ    1536,DU
         2 003205   003216 600000 2                  TZE     JST$USERGO

     1418    14559    5                     THEN DO;

     1419    14560    5                          ACCT_TYP = %SSTART#;

  14560  2 003206   003000 236003                    LDQ     1536,DU
         2 003207   200020 552140                    STBQ    TEMP3,'40'O,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:181  

     1420    14561    5                          CALL JSU$WSTAR(ACCT_TYP);

  14561  2 003210   200020 631500                    EPPR1   TEMP3,,AUTO
         2 003211   200050 451500                    STP1    ECP+7,,AUTO
         2 003212   200050 630500                    EPPR0   ECP+7,,AUTO
         2 003213   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003214   000000 701000 xent               TSX1    JSU$WSTAR
         2 003215   000000 011000                    NOP     0

     1421    14562    5                          END;

     1422    14563    4                     END;

     1423    14564    3                END;                       /* End of do-if-debugger              */

     1424    14565    2           END;                            /* End of do-if-special-shared        */

  14558  2 003216                       JST$USERGO   null
     1425    14566
     1426    14567        /* Now, just fall through to 'USERGO' */
     1427    14568
     1428    14569        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:182  
     1429    14570        /*************************************************************
     1430    14571         *                                                           *
     1431    14572         *                      JST$USERGO                           *
     1432    14573         *                                                           *
     1433    14574         *************************************************************/
     1434    14575    1   JST$USERGO:;
     1435    14576
     1436    14577        /* Call SSR$REG to associate the processor and transfer to the
     1437    14578           exit-to-user logic.
     1438    14579        */
     1439    14580    1      CALL SSR$REG(%SS_AP);

  14580  2 003216   000051 630400 3                  EPPR0   41
         2 003217   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003220   000000 701000 xent               TSX1    SSR$REG
         2 003221   000000 011000                    NOP     0

     1440    14581
     1441    14582        /* Give new quantum for new mode.
     1442    14583        */
     1443    14584    1      CALL SSC$MON;

  14584  2 003222   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003223   000000 701000 xent               TSX1    SSC$MON
         2 003224   000000 011000                    NOP     0

     1444    14585    1      CALL SSQ$NUQUAN;

  14585  2 003225   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003226   000000 701000 xent               TSX1    SSQ$NUQUAN
         2 003227   000000 011000                    NOP     0

     1445    14586    1      CALL SSC$SERV;

  14586  2 003230   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003231   000000 701000 xent               TSX1    SSC$SERV
         2 003232   000000 011000                    NOP     0
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:183  

     1446    14587
     1447    14588        /* Debugger associated and not at job STEP: Skip assmrg.
     1448    14589        */
     1449    14590    1      IF (B$U.DB ~= 0) AND NOT

  14590  2 003233   000000 470400 xsym               LDP0    S$CU$
         2 003234   000006 236100                    LDQ     6,,PR0
         2 003235   777000 316007                    CANQ    -512,DL
         2 003236   003246 600000 2                  TZE     s:14597
         2 003237   000000 471400 xsym               LDP1    B$JIT$
         2 003240   100143 236100                    LDQ     99,,PR1
         2 003241   000024 376000 1                  ANQ     EBSUNM+2
         2 003242   003246 601000 2                  TNZ     s:14597
         2 003243   100315 220100                    LDX0    205,,PR1
         2 003244   000001 360003                    ANX0    1,DU
         2 003245   003307 600000 2                  TZE     NO_ASSMRG

     1450    14591    1        (B$JIT.CPFLAGS1 & %CP_JSTEP#) AND NOT
     1451    14592    1        (B$JIT.JUNK & %JJ_MLINKIP#)
     1452    14593    1      THEN GOTO NO_ASSMRG;
     1453    14594
     1454    14595        /* If cp-in-control and going for cp, dont merge assigns.
     1455    14596        */
     1456    14597    1      IF B$U.FLG & %U_CPIC AND PTYPE = %P_CP THEN GOTO NO_ASSMRG;

  14597  2 003246   000000 236100                    LDQ     0,,PR0
         2 003247   000023 376000 1                  ANQ     EBSUNM+1
         2 003250   003254 600000 2                  TZE     NOT_CP
         2 003251   200033 220100                    LDX0    PTYPE,,AUTO
         2 003252   400000 100003                    CMPX0   -131072,DU
         2 003253   003307 600000 2                  TZE     NO_ASSMRG

     1457    14598
     1458    14599        /* Merge assigns.
     1459    14600        */
     1460    14601    1   NOT_CP: CALL FMM$ASSMRG;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:184  

  14601  2 003254   000002 631400 xsym  NOT_CP       EPPR1   B_VECTNIL+2
         2 003255   000000 701000 xent               TSX1    FMM$ASSMRG
         2 003256   000000 011000                    NOP     0

     1461    14602
     1462    14603    1      CALL UMD$CHKOPN;                     /* Get Dribble DCB open now           */

  14603  2 003257   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003260   000000 701000 xent               TSX1    UMD$CHKOPN
         2 003261   000000 011000                    NOP     0

     1463    14604    1      IF B$JIT.ERR.CODE ~= 0

  14604  2 003262   000000 470400 xsym               LDP0    B$JIT$
         2 003263   000012 236100                    LDQ     10,,PR0
         2 003264   377770 316007                    CANQ    131064,DL
         2 003265   003275 600000 2                  TZE     s:14613

     1464    14605    2      THEN DO;                             /* Error detected by FMM$ASSMRG       */

     1465    14606    2           B$JIT.ERR.FCG = FCG#;

  14606  2 003266   122300 236003                    LDQ     42176,DU
         2 003267   000012 752160                    STCQ    10,'60'O,PR0

     1466    14607    2           B$JIT.ERR.MID = MID#;           /* Put FCG = JST                      */

  14607  2 003270   000024 236003                    LDQ     20,DU
         2 003271   000012 752110                    STCQ    10,'10'O,PR0

     1467    14608    2           CALL JSE$ABORTM;

  14608  2 003272   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003273   000000 701000 xent               TSX1    JSE$ABORTM
         2 003274   000000 011000                    NOP     0

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:185  
     1468    14609    2           END;

     1469    14610
     1470    14611        /* Set flag to tell user how his program was initiated.
     1471    14612        */
     1472    14613    1      B$JIT.PROG_ENTRY = (B$JIT.SVLDTF & %SVL_LYNX#);

  14613  2 003275   000000 470400 xsym               LDP0    B$JIT$
         2 003276   000316 236100                    LDQ     206,,PR0
         2 003277   000033 736000                    QLS     27
         2 003300   030000 376003                    ANQ     12288,DU
         2 003301   000170 552140                    STBQ    120,'40'O,PR0

     1473    14614    1      IF (B$JIT.JUNK & %JJ_MONLINK#)

  14614  2 003302   000315 220100                    LDX0    205,,PR0
         2 003303   000020 360003                    ANX0    16,DU
         2 003304   003307 600000 2                  TZE     NO_ASSMRG

     1474    14615    1      THEN B$JIT.PROG_ENTRY = %PE_MLINK#;

  14615  2 003305   030000 236003                    LDQ     12288,DU
         2 003306   000170 552140                    STBQ    120,'40'O,PR0

     1475    14616
     1476    14617    1   NO_ASSMRG:
     1477    14618    1      B$U.FLG = B$U.FLG &~ %U_STIP;

  14618  2 003307   000025 236000 1     NO_ASSMRG    LDQ     EBSUNM+3
         2 003310   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 003311   000000 470400 xsym               LDP0    S$CU$
         2 003312   000000 376100                    ANQ     0,,PR0
         2 003313   000000 756100                    STQ     0,,PR0

     1478    14619
     1479    14620        /* Set user privileges to 'OR' of defaults & processor privileges.
     1480    14621           Only use PRC if not at step.
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:186  
     1481    14622        */
     1482    14623        /* Don't change PRIV.ACTIVE if just post-association of delta */
     1483    14624    1      IF NAME$ ~= DEBUG$

  14624  2 003314   200003 470500                    LDP0    @NAME$,,AUTO
         2 003315   200007 471500                    LDP1    @DEBUG$,,AUTO
         2 003316   000000 236100                    LDQ     0,,PR0
         2 003317   100000 116100                    CMPQ    0,,PR1
         2 003320   003325 600000 2                  TZE     s:14627

     1484    14625    1      THEN B$JIT.PRIV.ACTIVE = B$JIT.PRIV.JOB & ES_PRIVMASK;

  14625  2 003321   000000 473400 xsym               LDP3    B$JIT$
         2 003322   300015 236100                    LDQ     13,,PR3
         2 003323   000000 376000 xsym               ANQ     ES_PRIVMASK
         2 003324   300013 756100                    STQ     11,,PR3

     1485    14626
     1486    14627    1      IF (B$JIT.CPFLAGS1 & %CP_JSTEP#) OR (B$JIT.JUNK & %JJ_MLINKIP#)

  14627  2 003325   000000 473400 xsym               LDP3    B$JIT$
         2 003326   300143 236100                    LDQ     99,,PR3
         2 003327   000024 376000 1                  ANQ     EBSUNM+2
         2 003330   003334 601000 2                  TNZ     s:14628
         2 003331   300315 220100                    LDX0    205,,PR3
         2 003332   000001 360003                    ANX0    1,DU
         2 003333   003337 600000 2                  TZE     s:14630

     1487    14628    1      THEN B$JIT.PRIV.ACTIVE = (B$JIT.PRIV.ACTIVE | B$JIT.PRIV.PRC);

  14628  2 003334   300013 236100                    LDQ     11,,PR3
         2 003335   300016 276100                    ORQ     14,,PR3
         2 003336   300013 756100                    STQ     11,,PR3

     1488    14629
     1489    14630    1      IF B$JIT.PRIV.ACTIVE & %PR_JIT#

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:187  
  14630  2 003337   300013 236100                    LDQ     11,,PR3
         2 003340   000035 376000 1                  ANQ     EBSUNM+11
         2 003341   003370 600000 2                  TZE     s:14646

     1490    14631    2      THEN DO;

     1491    14632                %SETFLG(LS$=B$USERLS$,SEGID=%JITSID,FLG="%DSWRITE");

  14633  2 003342   000000 474400 xsym               LDP4    B$USERLS$
         2 003343   400002 236100                    LDQ     2,,PR4
         2 003344   000024 736000                    QLS     20
         2 003345   777000 376003                    ANQ     -512,DU
         2 003346   200000 276003                    ORQ     65536,DU
         2 003347   000024 772000                    QRL     20
         2 003350   400002 676100                    ERQ     2,,PR4
         2 003351   177600 376007                    ANQ     65408,DL
         2 003352   400002 656100                    ERSQ    2,,PR4

     1492    14635    2           IF (B$U.FLG & %U_DIC)

  14635  2 003353   000000 475400 xsym               LDP5    S$CU$
         2 003354   500000 236100                    LDQ     0,,PR5
         2 003355   000027 376000 1                  ANQ     EBSUNM+5
         2 003356   003370 600000 2                  TZE     s:14646

     1493    14636    3           THEN DO;

     1494    14637                     %SETFLG(LS$=B$DBLS$,SEGID=%JITSID,FLG="%DSWRITE");

  14638  2 003357   000000 476400 xsym               LDP6    B$DBLS$
         2 003360   600002 236100                    LDQ     2,,PR6
         2 003361   000024 736000                    QLS     20
         2 003362   777000 376003                    ANQ     -512,DU
         2 003363   200000 276003                    ORQ     65536,DU
         2 003364   000024 772000                    QRL     20
         2 003365   600002 676100                    ERQ     2,,PR6
         2 003366   177600 376007                    ANQ     65408,DL
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:188  
         2 003367   600002 656100                    ERSQ    2,,PR6

     1495    14640    3                END;

     1496    14641    2           END;

     1497    14642
     1498    14643        /* Now, decide whether to exit directly to the user or to go to
     1499    14644           his associated debugger or command processor.
     1500    14645        */
     1501    14646    1      IF (B$U.FLG & %U_CPIC)

  14646  2 003370   000000 474400 xsym               LDP4    S$CU$
         2 003371   400000 236100                    LDQ     0,,PR4
         2 003372   000023 376000 1                  ANQ     EBSUNM+1
         2 003373   003412 600000 2                  TZE     s:14654

     1502    14647    2      THEN DO;

     1503    14648    2           IF (B$JIT.CPFLAGS1 & %CP_YCPMME#)

  14648  2 003374   300143 236100                    LDQ     99,,PR3
         2 003375   000023 376000 1                  ANQ     EBSUNM+1
         2 003376   003407 600000 2                  TZE     s:14650

     1504    14649    2           THEN CALL JSN$LTRAS(B$SDS1$->B$SDS.ACPENT);

  14649  2 003377   000000 236000 xsym               LDQ     B$SDS1$
         2 003400   000006 036003                    ADLQ    6,DU
         2 003401   200050 756100                    STQ     ECP+7,,AUTO
         2 003402   200050 630500                    EPPR0   ECP+7,,AUTO
         2 003403   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003404   000000 701000 xent               TSX1    JSN$LTRAS
         2 003405   000000 011000                    NOP     0
         2 003406   003412 710000 2                  TRA     s:14654

     1505    14650    2           ELSE CALL SSC$ACPENT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:189  

  14650  2 003407   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003410   000000 701000 xent               TSX1    SSC$ACPENT
         2 003411   000000 011000                    NOP     0

     1506    14651                                                /* Enter the Command Processor        */
     1507    14652    2           END;

     1508    14653
     1509    14654    1      ECC=%ECC_DELTA#;

  14654  2 003412   000132 235007                    LDA     90,DL
         2 003413   200040 755100                    STA     ECC,,AUTO

     1510    14655    1      IF B$JIT.JUNK & %JJ_MLINKIP#

  14655  2 003414   000000 470400 xsym               LDP0    B$JIT$
         2 003415   000315 220100                    LDX0    205,,PR0
         2 003416   000001 360003                    ANX0    1,DU
         2 003417   003434 600000 2                  TZE     s:14664

     1511    14656    2      THEN DO;

     1512    14657    2           ECC=%ECC_LINK#;

  14657  2 003420   000134 236007                    LDQ     92,DL
         2 003421   200040 756100                    STQ     ECC,,AUTO

     1513    14658    2           IF B$JIT.SVLDTF = %SVL_LINK#

  14658  2 003422   000316 236100                    LDQ     206,,PR0
         2 003423   000777 376007                    ANQ     511,DL
         2 003424   000020 116007                    CMPQ    16,DL
         2 003425   003430 601000 2                  TNZ     s:14660

     1514    14659    2           THEN ECP.ECCS = %SC_MLINK#;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:190  
  14659  2 003426   200041 450100                    STZ     ECP,,AUTO
         2 003427   003432 710000 2                  TRA     s:14661

     1515    14660    2           ELSE ECP.ECCS = %SC_MLDTRC#;

  14660  2 003430   000001 236007                    LDQ     1,DL
         2 003431   200041 756100                    STQ     ECP,,AUTO

     1516    14661    2           B$JIT.SVLDTF='000'O;

  14661  2 003432   000000 236003                    LDQ     0,DU
         2 003433   000316 552104                    STBQ    206,'04'O,PR0

     1517    14662    2           END;

     1518    14663
     1519    14664    1      B$JIT.JUNK=(B$JIT.JUNK &~ (%JJ_MLINKIP# | %JJ_MONLINK#) );

  14664  2 003434   000315 220100                    LDX0    205,,PR0
         2 003435   777756 360003                    ANX0    -18,DU
         2 003436   000315 740100                    STX0    205,,PR0

     1520    14665    1      B$U.FLG = B$U.FLG &~ %U_STEP;

  14665  2 003437   000036 236000 1                  LDQ     EBSUNM+12
         2 003440   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 003441   000000 471400 xsym               LDP1    S$CU$
         2 003442   100000 376100                    ANQ     0,,PR1
         2 003443   100000 756100                    STQ     0,,PR1

     1521    14666    1      B$JIT.XCONF = (B$JIT.XCONF &~ %XC_URND#);

  14666  2 003444   000316 236100                    LDQ     206,,PR0
         2 003445   777000 376003                    ANQ     -512,DU
         2 003446   773000 376003                    ANQ     -2560,DU
         2 003447   000316 552140                    STBQ    206,'40'O,PR0

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:191  
     1522    14667
     1523    14668        /* If going to the Debugger, set up the parameters and call DELTAGO.
     1524    14669        */
     1525    14670    1      IF (B$U.FLG & %U_DIC)

  14670  2 003450   000000 471400 xsym               LDP1    S$CU$
         2 003451   100000 236100                    LDQ     0,,PR1
         2 003452   000027 376000 1                  ANQ     EBSUNM+5
         2 003453   003607 600000 2                  TZE     s:14709

     1526    14671    2      THEN DO;                             /*When going to delta                 */

     1527    14672    2           IF ECC=%ECC_LINK#

  14672  2 003454   200040 236100                    LDQ     ECC,,AUTO
         2 003455   000134 116007                    CMPQ    92,DL
         2 003456   003474 601000 2                  TNZ     s:14680

     1528    14673    3           THEN DO;

     1529    14674    3                PNUM = B$U.DB;

  14674  2 003457   100006 236100                    LDQ     6,,PR1
         2 003460   000011 772000                    QRL     9
         2 003461   000777 376007                    ANQ     511,DL
         2 003462   200032 756100                    STQ     PNUM,,AUTO

     1530    14675    3                CALL JSA$MAP_DATASEGS(%DBWSQ,PNUM);

  14675  2 003463   200032 633500                    EPPR3   PNUM,,AUTO
         2 003464   200051 453500                    STP3    ECP+8,,AUTO
         2 003465   000052 236000 3                  LDQ     42
         2 003466   200050 756100                    STQ     ECP+7,,AUTO
         2 003467   200050 630500                    EPPR0   ECP+7,,AUTO
         2 003470   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 003471   000000 701000 xent               TSX1    JSA$MAP_DATASEGS
         2 003472   000000 011000                    NOP     0
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:192  

     1531    14676    3                END;

  14676  2 003473   003512 710000 2                  TRA     s:14687

     1532    14677                                                /* ECCS was set up above              */
     1533    14678
     1534    14679    3           ELSE DO;

     1535    14680    3                IF (B$JIT.CPFLAGS1 & %CP_JSTEP#)

  14680  2 003474   000143 236100                    LDQ     99,,PR0
         2 003475   000024 376000 1                  ANQ     EBSUNM+2
         2 003476   003510 600000 2                  TZE     s:14684

     1536    14681    3                THEN IF DEBUG$ = ADDR(NIL)

  14681  2 003477   200007 473500                    LDP3    @DEBUG$,,AUTO
         2 003500   300000 236100                    LDQ     0,,PR3
         2 003501   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 003502   003506 601000 2                  TNZ     s:14683

     1537    14682    3                     THEN ECP.ECCS = %SC_JOBSTEP#;

  14682  2 003503   000001 235007                    LDA     1,DL
         2 003504   200041 755100                    STA     ECP,,AUTO
         2 003505   003512 710000 2                  TRA     s:14687

     1538    14683    3                     ELSE ECP.ECCS = %SC_STARTU#;

  14683  2 003506   200041 450100                    STZ     ECP,,AUTO
         2 003507   003512 710000 2                  TRA     s:14687

     1539    14684    3                ELSE ECP.ECCS=%SC_YC#;

  14684  2 003510   000002 236007                    LDQ     2,DL
         2 003511   200041 756100                    STQ     ECP,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:193  

     1540    14685    3                END;

     1541    14686
     1542    14687    2           IF B$U.APR = 0

  14687  2 003512   000000 470400 xsym               LDP0    S$CU$
         2 003513   000007 236100                    LDQ     7,,PR0
         2 003514   777700 316003                    CANQ    -64,DU
         2 003515   003520 601000 2                  TNZ     s:14689

     1543    14688    2           THEN ECP.EID = %EVID_USER#;

  14688  2 003516   200042 450100                    STZ     ECP+1,,AUTO
         2 003517   003522 710000 2                  TRA     s:14690

     1544    14689    2           ELSE ECP.EID = %EVID_AUTOS#;

  14689  2 003520   000001 235007                    LDA     1,DL
         2 003521   200042 755100                    STA     ECP+1,,AUTO

     1545    14690    2           ECP.JERR = B$JIT.USRERR;

  14690  2 003522   000000 471400 xsym               LDP1    B$JIT$
         2 003523   100144 236100                    LDQ     100,,PR1
         2 003524   200043 756100                    STQ     ECP+2,,AUTO

     1546    14691    2           ECP.P# = 0;

  14691  2 003525   200044 450100                    STZ     ECP+3,,AUTO

     1547    14692    3           DO WHILE (B$SS.ISR.WSR ~= %USERWSR);

  14692  2 003526   000000 473400 xsym               LDP3    B_MPT
         2 003527   300010 236100                    LDQ     8,,PR3
         2 003530   000160 376007                    ANQ     112,DL
         2 003531   000160 116007                    CMPQ    112,DL
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:194  
         2 003532   003543 600000 2                  TZE     s:14695

     1548    14693    3                CALL JSS$BACKSS;

  14693  2 003533   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003534   000000 701000 xent               TSX1    JSS$BACKSS
         2 003535   000000 011000                    NOP     0

     1549    14694    3                END;

  14694  2 003536   000000 470400 xsym               LDP0    B_MPT
         2 003537   000010 236100                    LDQ     8,,PR0
         2 003540   000160 376007                    ANQ     112,DL
         2 003541   000160 116007                    CMPQ    112,DL
         2 003542   003533 601000 2                  TNZ     s:14693

     1550    14695    2           CALL UDN$MAGICSS;

  14695  2 003543   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003544   000000 701000 xent               TSX1    UDN$MAGICSS
         2 003545   000000 011000                    NOP     0

     1551    14696    2           B_MPT.LS$->B$ULNK.ECCB.FLGS = (B_MPT.LS$->B$ULNK.ECCB.FLGS | %DSXXX);

  14696  2 003546   000001 470400 xsym               LDP0    B_MPT+1
         2 003547   000034 236100                    LDQ     28,,PR0
         2 003550   000024 736000                    QLS     20
         2 003551   777000 376003                    ANQ     -512,DU
         2 003552   020000 276003                    ORQ     8192,DU
         2 003553   000024 772000                    QRL     20
         2 003554   000034 676100                    ERQ     28,,PR0
         2 003555   177600 376007                    ANQ     65408,DL
         2 003556   000034 656100                    ERSQ    28,,PR0

     1552    14697    2           B$JIT.JUNK=(B$JIT.JUNK | %JJ_UDELTA#);

  14697  2 003557   000000 471400 xsym               LDP1    B$JIT$
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:195  
         2 003560   100315 220100                    LDX0    205,,PR1
         2 003561   200000 260003                    ORX0    65536,DU
         2 003562   100315 740100                    STX0    205,,PR1

     1553    14698    2           IF (B$JIT.CPFLAGS1 & %CP_YCPMME#)

  14698  2 003563   100143 236100                    LDQ     99,,PR1
         2 003564   000023 376000 1                  ANQ     EBSUNM+1
         2 003565   003574 600000 2                  TZE     s:14703

     1554    14699    2           THEN IF B$SS.FPT.ALT = '1'B

  14699  2 003566   000000 473400 xsym               LDP3    B_MPT
         2 003567   300001 234100                    SZN     1,,PR3
         2 003570   003574 605000 2                  TPL     s:14703

     1555    14700    3                THEN DO;

     1556    14701    3                     B$SS.IC = B$SS.IC+1;

  14701  2 003571   300004 221100                    LDX1    4,,PR3
         2 003572   000001 622011                    EAX2    1,X1
         2 003573   300004 742100                    STX2    4,,PR3

     1557    14702    3                     END;

     1558    14703    2           B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 & %CP_RESET#);

  14703  2 003574   100143 236100                    LDQ     99,,PR1
         2 003575   000037 376000 1                  ANQ     EBSUNM+13
         2 003576   100143 756100                    STQ     99,,PR1

     1559    14704    2           CALL SSU$DELTAGO (ECC,ECP);

  14704  2 003577   200041 633500                    EPPR3   ECP,,AUTO
         2 003600   200051 453500                    STP3    ECP+8,,AUTO
         2 003601   200040 634500                    EPPR4   ECC,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:196  
         2 003602   200050 454500                    STP4    ECP+7,,AUTO
         2 003603   200050 630500                    EPPR0   ECP+7,,AUTO
         2 003604   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 003605   000000 701000 xent               TSX1    SSU$DELTAGO
         2 003606   000000 011000                    NOP     0

     1560    14705    2           END;                            /* Do if going to delta               */

     1561    14706
     1562    14707        /* If not CP or Debugger, then enter user program.
     1563    14708        */
     1564    14709    1      B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 & %CP_RESET#);

  14709  2 003607   000000 470400 xsym               LDP0    B$JIT$
         2 003610   000143 236100                    LDQ     99,,PR0
         2 003611   000037 376000 1                  ANQ     EBSUNM+13
         2 003612   000143 756100                    STQ     99,,PR0

     1565    14710    1      CALL UDB$AUTO;                       /*Flush auto and goto SSS$SEXIT       */

  14710  2 003613   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003614   000000 701000 xent               TSX1    UDB$AUTO
         2 003615   000000 011000                    NOP     0

  14709  2 003616                       ASP_ERR      null
     1566    14711
     1567    14712        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:197  
     1568    14713        /*************************************************************
     1569    14714         *                                                           *
     1570    14715         *                      ASP_ERR                              *
     1571    14716         *                                                           *
     1572    14717         *************************************************************/
     1573    14718        /* Error handler for errors occurring when we have an auto slot
     1574    14719           but it's not yet filled in.
     1575    14720        */
     1576    14721    1   ASP_ERR: ;
     1577    14722    1      B$JIT.ERR=EBADFNME;                  /* any skeleton                       */

  14722  2 003616   000000 236000 1                  LDQ     EBADFNME
         2 003617   000000 470400 xsym               LDP0    B$JIT$
         2 003620   000012 756100                    STQ     10,,PR0

     1578    14723    1      B$JIT.ERR.CODE=ERR;

  14723  2 003621   200022 236100                    LDQ     ERR,,AUTO
         2 003622   000003 736000                    QLS     3
         2 003623   000012 676100                    ERQ     10,,PR0
         2 003624   377770 376007                    ANQ     131064,DL
         2 003625   000012 656100                    ERSQ    10,,PR0

  14723  2 003626                       ASP_ERR1     null
     1579    14724    1   ASP_ERR1: ;
     1580    14725    1      IF SHARED_FLAG

  14725  2 003626   200015 234100                    SZN     SHARED_FLAG,,AUTO
         2 003627   003641 605000 2                  TPL     ASP_ERR0

     1581    14726    2      THEN DO;

     1582    14727        /*Set slot old and not in use. GETFREE will unravel olays. */
     1583    14728
     1584    14729    2           B_P.INSTDATE(PNUM) = 1;

  14729  2 003630   200032 236100                    LDQ     PNUM,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:198  
         2 003631   000042 402007                    MPY     34,DL
         2 003632   000001 235007                    LDA     1,DL
         2 003633   000000 470400 xsym               LDP0    B$P$
         2 003634   000005 755106                    STA     5,QL,PR0

     1585    14730    2           B_P.UC(PNUM) = 0;

  14730  2 003635   200032 236100                    LDQ     PNUM,,AUTO
         2 003636   000042 402007                    MPY     34,DL
         2 003637   000000 470400 xsym               LDP0    B$P$
         2 003640   000000 450106                    STZ     0,QL,PR0

     1586    14731    2           END;

  14725  2 003641                       ASP_ERR0     null
     1587    14732
     1588    14733        /* Try releasing sbuf1 in case we've still got it.
     1589    14734        */
     1590    14735    1   ASP_ERR0: ;
     1591    14736    1      CALL MME$WFVP(%USERWSQ,%SBUF1PG,TEMP1,ERR);

  14736  2 003641   200022 630500                    EPPR0   ERR,,AUTO
         2 003642   200053 450500                    STP0    ECP+10,,AUTO
         2 003643   200016 631500                    EPPR1   TEMP1,,AUTO
         2 003644   200052 451500                    STP1    ECP+9,,AUTO
         2 003645   000006 237000 3                  LDAQ    6
         2 003646   200050 757100                    STAQ    ECP+7,,AUTO
         2 003647   200050 630500                    EPPR0   ECP+7,,AUTO
         2 003650   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 003651   000000 701000 xent               TSX1    MME$WFVP
         2 003652   000000 011000                    NOP     0

     1592    14737
     1593    14738
     1594    14739        /* Re-initialize the roseg in case it was bad coming in.
     1595    14740        */
     1596    14741    1      B$ROSEG.NUMDCBS = %SYS_DCBS# + %IBEX_DCBS#;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:199  

  14741  2 003653   000017 220003                    LDX0    15,DU
         2 003654   000000 470400 xsym               LDP0    B$ROSEG$
         2 003655   000002 740100                    STX0    2,,PR0

     1597    14742    1      B$ROSEG.AVAIL$ = PINCRW(B$ROSEG$,INIT_ROSIZE+%IBEX_DCBS#);

  14742  2 003656   200024 236100                    LDQ     INIT_ROSIZE,,AUTO
         2 003657   000022 736000                    QLS     18
         2 003660   000006 036003                    ADLQ    6,DU
         2 003661   000000 036000 xsym               ADLQ    B$ROSEG$
         2 003662   000003 756100                    STQ     3,,PR0

     1598    14743    1      B$ROSEG.AVAIL$->B$ROAVAIL.NEXT$ = ADDR(NIL);

  14743  2 003663   000003 471500                    LDP1    3,,PR0
         2 003664   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 003665   100000 756100                    STQ     0,,PR1

     1599    14744    1      B$ROSEG.AVAIL$->B$ROAVAIL.NWORDS = 1024 - (INIT_ROSIZE + %IBEX_DCBS#);

  14744  2 003666   000003 471500                    LDP1    3,,PR0
         2 003667   001772 235007                    LDA     1018,DL
         2 003670   200024 135100                    SBLA    INIT_ROSIZE,,AUTO
         2 003671   100001 755100                    STA     1,,PR1

     1600    14745    1      TPTR$  = PINCRW(B$ROSEG.DCBPTR$,%M$1STDCB#);

  14745  2 003672   000000 236100                    LDQ     0,,PR0
         2 003673   000012 036003                    ADLQ    10,DU
         2 003674   200035 756100                    STQ     TPTR$,,AUTO

     1601    14746    2      DO I = 1 TO %IBEX_DCBS#;

  14746  2 003675   000001 235007                    LDA     1,DL
         2 003676   200012 755100                    STA     I,,AUTO

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:200  
     1602    14747    2           TPTR$->B$PTR = ADDR(NIL);

  14747  2 003677   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 003700   200035 470500                    LDP0    TPTR$,,AUTO
         2 003701   000000 756100                    STQ     0,,PR0

     1603    14748    2           TPTR$ = PINCRW(TPTR$,1);

  14748  2 003702   200035 236100                    LDQ     TPTR$,,AUTO
         2 003703   000001 036003                    ADLQ    1,DU
         2 003704   200035 756100                    STQ     TPTR$,,AUTO

     1604    14749    2           END;

  14749  2 003705   200012 054100                    AOS     I,,AUTO
         2 003706   200012 235100                    LDA     I,,AUTO
         2 003707   000006 115007                    CMPA    6,DL
         2 003710   003677 604400 2                  TMOZ    s:14747

     1605    14750    1      GOTO JST$ABORTM1;                    /* Don't need to decr UC for ASP_ERR  */

  14750  2 003711   003730 710000 2                  TRA     JST$ABORTM1

  14747  2 003712                       SSP_ERR      null
     1606    14751
     1607    14752        /* Special Shared Processor aborts come through here.
     1608    14753        */
     1609    14754    1   SSP_ERR: ;
     1610    14755
     1611    14756              /* If we've come here, as opposed to JST$ABORTM1, we need
     1612    14757                 to decr, UC */
     1613    14758           %LOCK (G=J_PLOCK);

  14759  2 003712   000001 630400 3                  EPPR0   1
         2 003713   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003714   000000 701000 xent               TSX1    HFC$LOCK
         2 003715   000000 011000                    NOP     0
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:201  

     1614    14761    1      B_P.UC(PNUM) = B_P.UC(PNUM) - 1;

  14761  2 003716   200032 236100                    LDQ     PNUM,,AUTO
         2 003717   000042 402007                    MPY     34,DL
         2 003720   000000 470400 xsym               LDP0    B$P$
         2 003721   000000 620006                    EAX0    0,QL
         2 003722   000001 336007                    LCQ     1,DL
         2 003723   000000 056110                    ASQ     0,X0,PR0

     1615    14762           %UNLOCK (G=J_PLOCK);

  14763  2 003724   000001 630400 3                  EPPR0   1
         2 003725   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003726   000000 701000 xent               TSX1    HFC$UNLOCK
         2 003727   000000 011000                    NOP     0

  14761  2 003730                       JST$ABORTM1  null
     1616    14765
     1617    14766        /* If we abort associating a special shared processor, exit
     1618    14767           immediately to JSE$ABORTM.
     1619    14768        */
     1620    14769    1   JST$ABORTM1: ;
     1621    14770    1      CALL JSE$ABORTM;

  14770  2 003730   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003731   000000 701000 xent               TSX1    JSE$ABORTM
         2 003732   000000 011000                    NOP     0
         2 003733   004545 710000 2                  TRA     s:14966

     1622    14771
     1623    14772        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:202  
     1624    14773        /******************************************************************
     1625    14774        *               INTERNAL PROCEDURES FOR
     1626    14775        *                 JOB STEP PROCESSING
     1627    14776        ******************************************************************/
     1628    14777
     1629    14778        /*************************************************************
     1630    14779         *                                                           *
     1631    14780         *                      INIT_TCB                             *
     1632    14781         *                                                           *
     1633    14782         *************************************************************/
     1634    14783        /* Initialize a TCB for user program, std shared processor, or
     1635    14784           stand alone DELTA.
     1636    14785            Must be called with TCBSZ set to the number of TCB frames and
     1637    14786            ROSZ set to the number of words in the ROSEG.
     1638    14787        */
     1639    14788    1   INIT_TCB: PROC;

  14788  2 003734   200046 741300       INIT_TCB     STX1  ! ECP+5,,AUTO

     1640    14789    2   DCL 1 REST_OF_ROS BASED ALIGNED,
     1641    14790    2         2 * CHAR (TEMP2);
     1642    14791
     1643    14792
     1644    14793    2      TCBSZ = TCBSZ*%UE_AV_TCBSZ# + %UE_FX_TCBSZ#;

  14793  2 003735   200023 236100                    LDQ     TCBSZ,,AUTO
         2 003736   000112 402007                    MPY     74,DL
         2 003737   000110 036007                    ADLQ    72,DL
         2 003740   200023 756100                    STQ     TCBSZ,,AUTO

     1645    14794    2      IF MOD(ROSZ,2) = 1

  14794  2 003741   200025 236100                    LDQ     ROSZ,,AUTO
         2 003742   000001 376007                    ANQ     1,DL
         2 003743   000001 116007                    CMPQ    1,DL
         2 003744   003750 601000 2                  TNZ     s:14796

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:203  
     1646    14795    2      THEN ROSZ = ROSZ + 1;

  14795  2 003745   200025 235100                    LDA     ROSZ,,AUTO
         2 003746   000001 035007                    ADLA    1,DL
         2 003747   200025 755100                    STA     ROSZ,,AUTO

     1647    14796    2      TEMP1 = (INIT_ROSIZE + ROSZ + %ROSEGLO*1024) * 4;

  14796  2 003750   200024 236100                    LDQ     INIT_ROSIZE,,AUTO
         2 003751   200025 036100                    ADLQ    ROSZ,,AUTO
         2 003752   000002 736000                    QLS     2
         2 003753   570000 036007                    ADLQ    -69632,DL
         2 003754   200016 756100                    STQ     TEMP1,,AUTO

     1648    14797    2      TEMP2 = TCBSZ * 4 -1;

  14797  2 003755   200023 235100                    LDA     TCBSZ,,AUTO
         2 003756   000002 735000                    ALS     2
         2 003757   000001 135007                    SBLA    1,DL
         2 003760   200017 755100                    STA     TEMP2,,AUTO

     1649    14798           %SETDBASE(LS$=B$USERLS$,SEGID=%TCBSID,DBASE=TEMP1);

  14799  2 003761   000000 470400 xsym               LDP0    B$USERLS$
         2 003762   000037 756100                    STQ     31,,PR0

     1650    14801           %SETDBOUND(LS$=B$USERLS$,SEGID=%TCBSID,DBOUND=TEMP2);

  14802  2 003763   200017 236100                    LDQ     TEMP2,,AUTO
         2 003764   000020 736000                    QLS     16
         2 003765   000036 676100                    ERQ     30,,PR0
         2 003766   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 003767   000036 656100                    ERSQ    30,,PR0

     1651    14804           %SETFLG(LS$=B$USERLS$,SEGID=%TCBSID,
     1652    14805           FLG="%DSREAD|%DSCACHE|%DSNULL");

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:204  
  14806  2 003770   000036 236100                    LDQ     30,,PR0
         2 003771   000024 736000                    QLS     20
         2 003772   777000 376003                    ANQ     -512,DU
         2 003773   442000 276003                    ORQ     -113664,DU
         2 003774   000024 772000                    QRL     20
         2 003775   000036 676100                    ERQ     30,,PR0
         2 003776   177600 376007                    ANQ     65408,DL
         2 003777   000036 656100                    ERSQ    30,,PR0

     1653    14808    2      TEMP1 = TEMP1 - %ROSEGLO*4096;

  14808  2 004000   570000 336007                    LCQ     -69632,DL
         2 004001   200016 056100                    ASQ     TEMP1,,AUTO

     1654    14809    2      TPTR$ = PINCRC(B$ROSEG$,TEMP1);

  14809  2 004002   200016 236100                    LDQ     TEMP1,,AUTO
         2 004003   000020 736000                    QLS     16
         2 004004   000000 036000 xsym               ADLQ    B$ROSEG$
         2 004005   200035 756100                    STQ     TPTR$,,AUTO

     1655    14810    2      TPTR$->B$TCB = '0'B;

  14810  2 004006   200035 471500                    LDP1    TPTR$,,AUTO
         2 004007   000100 100400                    MLR     fill='000'O
         2 004010   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 004011   100000 000440                    ADSC9   0,,PR1                   cn=0,n=288

     1656    14811    2      TEMP2 = B$JIT.PCROS * 4096 - TEMP1;

  14811  2 004012   000000 473400 xsym               LDP3    B$JIT$
         2 004013   300203 236100                    LDQ     131,,PR3
         2 004014   000006 772000                    QRL     6
         2 004015   000047 376000 3                  ANQ     39
         2 004016   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 004017   000001 036007                    ADLQ    1,DL
         2 004020   200016 036100                    ADLQ    TEMP1,,AUTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:205  
         2 004021   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 004022   000001 036007                    ADLQ    1,DL
         2 004023   200017 756100                    STQ     TEMP2,,AUTO

     1657    14812    2      TPTR$->REST_OF_ROS = '0'B;

  14812  2 004024   000000 620006                    EAX0    0,QL
         2 004025   000140 100400                    MLR     fill='000'O
         2 004026   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 004027   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

     1658    14813    2      TPTR$->B$TCB.ALT$.OFFSET = 4;

  14813  2 004030   000004 220003                    LDX0    4,DU
         2 004031   100000 740100                    STX0    0,,PR1

     1659    14814    2      TPTR$->B$TCB.ALT$.SID = %TCBSID;

  14814  2 004032   006017 236007                    LDQ     3087,DL
         2 004033   100000 752103                    STCQ    0,'03'O,PR1

     1660    14815    2      TPTR$->B$TCB.STK$.OFFSET = 72;

  14815  2 004034   000110 221003                    LDX1    72,DU
         2 004035   100001 741100                    STX1    1,,PR1

     1661    14816    2      TPTR$->B$TCB.STK$.SID = %TCBSID;

  14816  2 004036   100001 752103                    STCQ    1,'03'O,PR1

     1662    14817    2      TPTR$->B$TCB.TCBAVSZ = TCBSZ - SIZEW(TPTR$->B$TCB);

  14817  2 004037   200023 722100                    LXL2    TCBSZ,,AUTO
         2 004040   777670 623012                    EAX3    -72,X2
         2 004041   100002 743100                    STX3    2,,PR1

     1663    14818    2      TPTR$->B$TCB.ALTFRM.UNUSED = -1;     /* Mark tcb unused                    */
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:206  

  14818  2 004042   777777 224003                    LDX4    -1,DU
         2 004043   100004 744100                    STX4    4,,PR1

     1664    14819    2      TEMP1 = INIT_ROSIZE + ROSZ + TCBSZ;

  14819  2 004044   200024 236100                    LDQ     INIT_ROSIZE,,AUTO
         2 004045   200025 036100                    ADLQ    ROSZ,,AUTO
         2 004046   200023 036100                    ADLQ    TCBSZ,,AUTO
         2 004047   200016 756100                    STQ     TEMP1,,AUTO

     1665    14820    2      TEMP2 = (B$JIT.PCROS*1024) - TEMP1;

  14820  2 004050   300203 236100                    LDQ     131,,PR3
         2 004051   000010 772000                    QRL     8
         2 004052   000053 376000 3                  ANQ     43
         2 004053   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 004054   000001 036007                    ADLQ    1,DL
         2 004055   200016 036100                    ADLQ    TEMP1,,AUTO
         2 004056   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 004057   000001 036007                    ADLQ    1,DL
         2 004060   200017 756100                    STQ     TEMP2,,AUTO

     1666    14821
     1667    14822        /* Set up roseg avail space, if there is any left.
     1668    14823        */
     1669    14824    2      IF TEMP2 > 2

  14824  2 004061   000002 116007                    CMPQ    2,DL
         2 004062   004077 604400 2                  TMOZ    s:14830

     1670    14825    3      THEN DO;

     1671    14826    3           B$ROSEG.AVAIL$ = PINCRW(B$ROSEG$,TEMP1);

  14826  2 004063   200016 236100                    LDQ     TEMP1,,AUTO
         2 004064   000022 736000                    QLS     18
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:207  
         2 004065   000000 036000 xsym               ADLQ    B$ROSEG$
         2 004066   000000 474400 xsym               LDP4    B$ROSEG$
         2 004067   400003 756100                    STQ     3,,PR4

     1672    14827    3           B$ROSEG.AVAIL$->B$ROAVAIL.NEXT$ = ADDR(NIL);

  14827  2 004070   400003 475500                    LDP5    3,,PR4
         2 004071   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 004072   500000 756100                    STQ     0,,PR5

     1673    14828    3           B$ROSEG.AVAIL$->B$ROAVAIL.NWORDS = TEMP2;

  14828  2 004073   400003 475500                    LDP5    3,,PR4
         2 004074   200017 236100                    LDQ     TEMP2,,AUTO
         2 004075   500001 756100                    STQ     1,,PR5

     1674    14829    3           END;

  14829  2 004076   004102 710000 2                  TRA     s:14831

     1675    14830    2      ELSE B$ROSEG.AVAIL$ = ADDR(NIL);

  14830  2 004077   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 004100   000000 474400 xsym               LDP4    B$ROSEG$
         2 004101   400003 756100                    STQ     3,,PR4

     1676    14831    2      RETURN;

  14831  2 004102   200046 221300                    LDX1  ! ECP+5,,AUTO
         2 004103   000001 702211                    TSX2  ! 1,X1

     1677    14832    2   END INIT_TCB;
     1678    14833
     1679    14834        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:208  
     1680    14835        /*************************************************************
     1681    14836         *                                                           *
     1682    14837         *                      ADD_SHARED                           *
     1683    14838         *                                                           *
     1684    14839         *************************************************************/
     1685    14840        /* Here we have the routine which will attempt to add a new shared
     1686    14841           program to the processor tables.  It will attempt to find a
     1687    14842           currently unused slot, but if one is not available, then the
     1688    14843           oldest slot in use by no users will be appropriated,
     1689    14844           and the 'old' program de-shared.
     1690    14845        */
     1691    14846    1   ADD_SHARED: PROC ALTRET;

  14846  2 004104   200046 741300       ADD_SHARED   STX1  ! ECP+5,,AUTO

     1692    14847
     1693    14848    2      PNUM = 0;

  14848  2 004105   200032 450100                    STZ     PNUM,,AUTO

     1694    14849
     1695    14850        /* First, look for an empty slot */
     1696    14851    2      CALL JSU$SP_GETFREE(PNUM) ALTRET(NONE_AVAIL);

  14851  2 004106   200032 630500                    EPPR0   PNUM,,AUTO
         2 004107   200050 450500                    STP0    ECP+7,,AUTO
         2 004110   200050 630500                    EPPR0   ECP+7,,AUTO
         2 004111   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 004112   000000 701000 xent               TSX1    JSU$SP_GETFREE
         2 004113   004301 702000 2                  TSX2    NONE_AVAIL

     1697    14852
     1698    14853
     1699    14854    2      PROC$ = ADDR (B$P$ -> B$P(PNUM));

  14854  2 004114   200032 236100                    LDQ     PNUM,,AUTO
         2 004115   000042 402003                    MPY     34,DU
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:209  
         2 004116   000000 036000 xsym               ADLQ    B$P$
         2 004117   200037 756100                    STQ     PROC$,,AUTO

     1700    14855    2      PROC$ -> B$P.UC(0) = 1;

  14855  2 004120   000001 235007                    LDA     1,DL
         2 004121   200037 470500                    LDP0    PROC$,,AUTO
         2 004122   000000 755100                    STA     0,,PR0

     1701    14856    2      PROC$ -> B$P.INSTDATE(0) = 1;

  14856  2 004123   000005 755100                    STA     5,,PR0

     1702    14857    2      PROC$ -> B$P.CRDATE(0) = MODTIME;

  14857  2 004124   200021 235100                    LDA     MODTIME,,AUTO
         2 004125   000004 755100                    STA     4,,PR0

     1703    14858    2      PROC$ -> B$P.NAME.COUNT(0) = NAME$->B$TEXTC.COUNT;

  14858  2 004126   200003 471500                    LDP1    @NAME$,,AUTO
         2 004127   100000 473500                    LDP3    0,,PR1
         2 004130   000100 100500                    MLR     fill='000'O
         2 004131   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         2 004132   000032 000001                    ADSC9   26,,PR0                  cn=0,n=1

     1704    14859    2     PROC$ -> B$P.NAME.TEXT(0) = SUBSTR(NAME$->B$TEXTC.TEXT,0,PROC$->B$P.NAME.COUNT(0)
             14859               );

  14859  2 004133   100000 473500                    LDP3    0,,PR1
         2 004134   000032 236100                    LDQ     26,,PR0
         2 004135   000033 772000                    QRL     27
         2 004136   000000 620006                    EAX0    0,QL
         2 004137   040100 100540                    MLR     fill='040'O
         2 004140   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
         2 004141   000032 200037                    ADSC9   26,,PR0                  cn=1,n=31

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:210  
     1705    14860    2      PROC$ -> B$P.ACCT(0) = ACCT$->B$DWTXT;

  14860  2 004142   200004 473500                    LDP3    @ACCT$,,AUTO
         2 004143   300000 474500                    LDP4    0,,PR3
         2 004144   040100 100500                    MLR     fill='040'O
         2 004145   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
         2 004146   000030 000010                    ADSC9   24,,PR0                  cn=0,n=8

     1706    14861    2      PROC$ -> B$P.FLGS(0) = %P_SP;

  14861  2 004147   040000 220003                    LDX0    16384,DU
         2 004150   000027 740100                    STX0    23,,PR0

     1707    14862    2      IF B$HEAD.STATS AND SYSFLAG

  14862  2 004151   000000 474400 xsym               LDP4    B$SBUF1$
         2 004152   400011 236100                    LDQ     9,,PR4
         2 004153   000010 316007                    CANQ    8,DL
         2 004154   004161 600000 2                  TZE     s:14864
         2 004155   200014 234100                    SZN     SYSFLAG,,AUTO
         2 004156   004161 605000 2                  TPL     s:14864

     1708    14863    2      THEN PROC$ -> B$P.FLGS(0) = PROC$ -> B$P.FLGS(0) | %P_STATS;

  14863  2 004157   000100 260003                    ORX0    64,DU
         2 004160   000027 740100                    STX0    23,,PR0

     1709    14864    2      TPTR$ = PINCRW(B$ROSEG.TREE$,SIZEW(B$TREEHDR)+SIZEW(B$NODE));

  14864  2 004161   000000 475400 xsym               LDP5    B$ROSEG$
         2 004162   500001 476500                    LDP6    1,,PR5
         2 004163   500001 236100                    LDQ     1,,PR5
         2 004164   000011 036003                    ADLQ    9,DU
         2 004165   200035 756100                    STQ     TPTR$,,AUTO

     1710    14865    2      PROC$ -> B$P.LNK(0) = 0;             /* NO LINK YET                        */

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:211  
  14865  2 004166   000000 221003                    LDX1    0,DU
         2 004167   000022 441100                    SXL1    18,,PR0

     1711    14866    2      PROC$ -> B$P.LIB_LNK(0) = 0;         /* NO LIB_LNK                         */

  14866  2 004170   000022 741100                    STX1    18,,PR0

     1712    14867    2      TEMP1 = PNUM;

  14867  2 004171   200032 235100                    LDA     PNUM,,AUTO
         2 004172   200016 755100                    STA     TEMP1,,AUTO

     1713    14868    3      DO I = 2 TO NOOVER;                  /* DO FOR ALL OVERLAYS                */

  14868  2 004173   000002 235007                    LDA     2,DL
         2 004174   200012 755100                    STA     I,,AUTO
         2 004175   004262 710000 2                  TRA     s:14886+1

     1714    14869    3           CALL JSU$SP_GETFREE(TEMP2) ALTRET(NONE_AVAIL);

  14869  2 004176   200017 630500                    EPPR0   TEMP2,,AUTO
         2 004177   200050 450500                    STP0    ECP+7,,AUTO
         2 004200   200050 630500                    EPPR0   ECP+7,,AUTO
         2 004201   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 004202   000000 701000 xent               TSX1    JSU$SP_GETFREE
         2 004203   004301 702000 2                  TSX2    NONE_AVAIL

     1715    14870
     1716    14871    3           PROC$ = ADDR (B$P$ -> B$P(TEMP2));

  14871  2 004204   200017 236100                    LDQ     TEMP2,,AUTO
         2 004205   000042 402003                    MPY     34,DU
         2 004206   000000 036000 xsym               ADLQ    B$P$
         2 004207   200037 756100                    STQ     PROC$,,AUTO

     1717    14872    3           B_P.LNK(TEMP1) = TEMP2;         /* SET UP LINK IN PREV                */

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:212  
  14872  2 004210   200016 236100                    LDQ     TEMP1,,AUTO
         2 004211   000042 402007                    MPY     34,DL
         2 004212   200017 720100                    LXL0    TEMP2,,AUTO
         2 004213   000000 470400 xsym               LDP0    B$P$
         2 004214   000022 440106                    SXL0    18,QL,PR0

     1718    14873    3           TEMP1 = TEMP2;

  14873  2 004215   200017 235100                    LDA     TEMP2,,AUTO
         2 004216   200016 755100                    STA     TEMP1,,AUTO

     1719    14874    3           PROC$ -> B$P.LNK(0) = 0;        /* ZERO FORWARD LINK                  */

  14874  2 004217   000000 220003                    LDX0    0,DU
         2 004220   200037 470500                    LDP0    PROC$,,AUTO
         2 004221   000022 440100                    SXL0    18,,PR0

     1720    14875    3           PROC$ -> B$P.PPC (0) = 0;       /* 0 PAGE COUNT                       */

  14875  2 004222   000003 450100                    STZ     3,,PR0

     1721    14876    3           PROC$ -> B$P.NAME.COUNT(0) = B$NODE.NAME$ -> B$TEXTC.COUNT;

  14876  2 004223   200035 471500                    LDP1    TPTR$,,AUTO
         2 004224   100000 473500                    LDP3    0,,PR1
         2 004225   000100 100500                    MLR     fill='000'O
         2 004226   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         2 004227   000032 000001                    ADSC9   26,,PR0                  cn=0,n=1

     1722    14877    3           PROC$ -> B$P.NAME.TEXT(0) = SUBSTR(B$NODE.NAME$->B$TEXTC.TEXT,0,PROC$->B$P.
             14877                    NAME.COUNT(0));

  14877  2 004230   100000 473500                    LDP3    0,,PR1
         2 004231   000032 236100                    LDQ     26,,PR0
         2 004232   000033 772000                    QRL     27
         2 004233   000000 621006                    EAX1    0,QL
         2 004234   040100 100540                    MLR     fill='040'O
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:213  
         2 004235   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         2 004236   000032 200037                    ADSC9   26,,PR0                  cn=1,n=31

     1723    14878    3           PROC$ -> B$P.ACCT (0) = ACCT$ -> B$DWTXT;

  14878  2 004237   200004 473500                    LDP3    @ACCT$,,AUTO
         2 004240   300000 474500                    LDP4    0,,PR3
         2 004241   040100 100500                    MLR     fill='040'O
         2 004242   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
         2 004243   000030 000010                    ADSC9   24,,PR0                  cn=0,n=8

     1724    14879    3           PROC$ -> B$P.NODE(0) = I - 1;

  14879  2 004244   200012 721100                    LXL1    I,,AUTO
         2 004245   777777 622011                    EAX2    -1,X1
         2 004246   000023 442100                    SXL2    19,,PR0

     1725    14880    3           PROC$ -> B$P.INSTDATE (0) = 1;  /* SET BUSY                           */

  14880  2 004247   000001 235007                    LDA     1,DL
         2 004250   000005 755100                    STA     5,,PR0

     1726    14881    3           PROC$ -> B$P.FLGS(0) = %P_OVRLY;

  14881  2 004251   002000 223003                    LDX3    1024,DU
         2 004252   000027 743100                    STX3    23,,PR0

     1727    14882    3           PROC$ -> B$P.HPP(0) = 0;

  14882  2 004253   000002 450100                    STZ     2,,PR0

     1728    14883    3           PROC$ -> B$P.FRQ(0) = 0;

  14883  2 004254   000001 450100                    STZ     1,,PR0

     1729    14884    3           PROC$ -> B$P.LIB_LNK(0) = 0;

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:214  
  14884  2 004255   000022 740100                    STX0    18,,PR0

     1730    14885    3           TPTR$ = PINCRW(TPTR$,SIZEW(B$NODE));

  14885  2 004256   200035 236100                    LDQ     TPTR$,,AUTO
         2 004257   000006 036003                    ADLQ    6,DU
         2 004260   200035 756100                    STQ     TPTR$,,AUTO

     1731    14886    3           END;

  14886  2 004261   200012 054100                    AOS     I,,AUTO
         2 004262   200013 236100                    LDQ     NOOVER,,AUTO
         2 004263   004176 604000 2                  TMI     s:14869
         2 004264   200012 116100                    CMPQ    I,,AUTO
         2 004265   004176 605000 2                  TPL     s:14869

     1732    14887
     1733    14888        /* Complete adding this program to the auto-shared table by entering
     1734    14889           its processor number into the alphabetically ordered B$LOOKUP
     1735    14890           table (used in binary search of currently shared programs.).    */
     1736    14891
     1737    14892    2      CALL JSA$INSERTPROC(NAME$,ACCT$,PNUM);

  14892  2 004266   200032 631500                    EPPR1   PNUM,,AUTO
         2 004267   200052 451500                    STP1    ECP+9,,AUTO
         2 004270   200004 236100                    LDQ     @ACCT$,,AUTO
         2 004271   200003 235100                    LDA     @NAME$,,AUTO
         2 004272   200050 757100                    STAQ    ECP+7,,AUTO
         2 004273   200050 630500                    EPPR0   ECP+7,,AUTO
         2 004274   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 004275   000000 701000 xent               TSX1    JSA$INSERTPROC
         2 004276   000000 011000                    NOP     0

     1738    14893    2      RETURN;

  14893  2 004277   200046 221300                    LDX1  ! ECP+5,,AUTO
         2 004300   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:215  

     1739    14894    2   NONE_AVAIL:
     1740    14895        /*Set slot old and not in use. GETFREE will unravel olays. */
     1741    14896
     1742    14897    2      B_P.INSTDATE(PNUM) = 1;

  14897  2 004301   200032 236100       NONE_AVAIL   LDQ     PNUM,,AUTO
         2 004302   000042 402007                    MPY     34,DL
         2 004303   000001 235007                    LDA     1,DL
         2 004304   000000 470400 xsym               LDP0    B$P$
         2 004305   000005 755106                    STA     5,QL,PR0

     1743    14898    2      B_P.UC(PNUM) = 0;

  14898  2 004306   200032 236100                    LDQ     PNUM,,AUTO
         2 004307   000042 402007                    MPY     34,DL
         2 004310   000000 470400 xsym               LDP0    B$P$
         2 004311   000000 450106                    STZ     0,QL,PR0

     1744    14899
     1745    14900    2      ALTRETURN;

  14900  2 004312   200046 221300                    LDX1  ! ECP+5,,AUTO
         2 004313   000000 702211                    TSX2  ! 0,X1

     1746    14901    2   END ADD_SHARED;
     1747    14902
     1748    14903        %EJECT;
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:216  
     1749    14904        /*************************************************************
     1750    14905         *                                                           *
     1751    14906         *                      INSTALL_PROC                         *
     1752    14907         *                                                           *
     1753    14908         *************************************************************/
     1754    14909        /* The following entry is for installing a previously non-existant   */
     1755    14910        /* shared program.                                                   */
     1756    14911
     1757    14912    1   INSTALL_PROC: PROC;

  14912  2 004314   200046 741300       INSTALL_PROC STX1  ! ECP+5,,AUTO

     1758    14913        /* Reset "PAGE-BELONGS-TO-USER" bit in sctrl flags in pg tbl */
     1759    14914    2      TEMP2 = B$JIT.PLL + B$JIT.PCP - 1;   /* Last pg of proc                    */

  14914  2 004315   000000 470400 xsym               LDP0    B$JIT$
         2 004316   000201 236100                    LDQ     129,,PR0
         2 004317   000022 772000                    QRL     18
         2 004320   200050 756100                    STQ     ECP+7,,AUTO
         2 004321   000176 236100                    LDQ     126,,PR0
         2 004322   000022 772000                    QRL     18
         2 004323   200050 036100                    ADLQ    ECP+7,,AUTO
         2 004324   000001 136007                    SBLQ    1,DL
         2 004325   200017 756100                    STQ     TEMP2,,AUTO

     1760    14915    3      DO I = B$JIT.PLL TO TEMP2;

  14915  2 004326   000176 236100                    LDQ     126,,PR0
         2 004327   000022 772000                    QRL     18
         2 004330   200012 756100                    STQ     I,,AUTO
         2 004331   004422 710000 2                  TRA     s:14932+1

     1761    14916    3           B$UPT.SCTRL(I) = '0'B;

  14916  2 004332   000000 470400 xsym               LDP0    B$UPT$
         2 004333   200012 720100                    LXL0    I,,AUTO
         2 004334   000054 236000 3                  LDQ     44
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:217  
         2 004335   000000 356110                    ANSQ    0,X0,PR0

     1762    14917    3           IF HW_WSQ0PT THEN

  14917  2 004336   000000 234000 xsym               SZN     HW_WSQ0PT
         2 004337   004350 605000 2                  TPL     s:14920

     1763    14918    3                TEMP1 = B$IPHYMAP$->MM$IPHY_MAP(B$UPT.RPN(I));

  14918  2 004340   000000 236110                    LDQ     0,X0,PR0
         2 004341   000022 772000                    QRL     18
         2 004342   000001 736000                    QLS     1
         2 004343   000000 471400 xsym               LDP1    B$IPHYMAP$
         2 004344   000100 101506                    MRL     fill='000'O
         2 004345   100000 000002                    ADSC9   0,Q,PR1                  cn=0,n=2
         2 004346   200016 000004                    ADSC9   TEMP1,,AUTO              cn=0,n=4
         2 004347   004353 710000 2                  TRA     s:14921

     1764    14919    3           ELSE
     1765    14920    3                TEMP1 = B$UPT.RPN(I);

  14920  2 004350   000000 236110                    LDQ     0,X0,PR0
         2 004351   000022 772000                    QRL     18
         2 004352   200016 756100                    STQ     TEMP1,,AUTO

     1766    14921    3           IF I ~= TEMP2                   /* NOT AT TAIL                        */

  14921  2 004353   200012 236100                    LDQ     I,,AUTO
         2 004354   200017 116100                    CMPQ    TEMP2,,AUTO
         2 004355   004400 600000 2                  TZE     s:14928

     1767    14922    3           THEN
     1768    14923    3                IF HW_WSQ0PT THEN

  14923  2 004356   000000 234000 xsym               SZN     HW_WSQ0PT
         2 004357   004373 605000 2                  TPL     s:14926

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:218  
     1769    14924    3                     MM$PPUT.PPNO(TEMP1) = B$IPHYMAP$->MM$IPHY_MAP(B$UPT.RPN(I+1));

  14924  2 004360   000001 236110                    LDQ     1,X0,PR0
         2 004361   000022 772000                    QRL     18
         2 004362   000001 736000                    QLS     1
         2 004363   200016 235100                    LDA     TEMP1,,AUTO
         2 004364   000002 735000                    ALS     2
         2 004365   000000 471400 xsym               LDP1    B$IPHYMAP$
         2 004366   000000 473400 xsym               LDP3    B$PPUT$
         2 004367   000105 100506                    MLR     fill='000'O
         2 004370   100000 000002                    ADSC9   0,Q,PR1                  cn=0,n=2
         2 004371   300000 400002                    ADSC9   0,A,PR3                  cn=2,n=2
         2 004372   004404 710000 2                  TRA     s:14929

     1770    14925    3                ELSE
     1771    14926    3                     MM$PPUT.PPNO(TEMP1) = B$UPT.RPN(I+1);

  14926  2 004373   000001 221110                    LDX1    1,X0,PR0
         2 004374   000000 471400 xsym               LDP1    B$PPUT$
         2 004375   200016 722100                    LXL2    TEMP1,,AUTO
         2 004376   100000 441112                    SXL1    0,X2,PR1
         2 004377   004404 710000 2                  TRA     s:14929

     1772    14927    3           ELSE
     1773    14928    3                MM$PPUT.PPNO(TEMP1) = 0;

  14928  2 004400   000000 221003                    LDX1    0,DU
         2 004401   000000 471400 xsym               LDP1    B$PPUT$
         2 004402   200016 722100                    LXL2    TEMP1,,AUTO
         2 004403   100000 441112                    SXL1    0,X2,PR1

     1774    14929    3           MM$PPUT.USER(TEMP1) = '0'B;

  14929  2 004404   000000 471400 xsym               LDP1    B$PPUT$
         2 004405   200016 721100                    LXL1    TEMP1,,AUTO
         2 004406   000055 236000 3                  LDQ     45
         2 004407   100000 356111                    ANSQ    0,X1,PR1
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:219  

     1775    14930    3           MM$PPUT.PRC(TEMP1) = '1'B;      /* PAGE BELONGS TO PROC               */

  14930  2 004410   200016 721100                    LXL1    TEMP1,,AUTO
         2 004411   004000 236003                    LDQ     2048,DU
         2 004412   100000 256111                    ORSQ    0,X1,PR1

     1776    14931    3           MM$PPUT.PNUM(TEMP1) = PNUM;     /* Save processor number              */

  14931  2 004413   200016 721100                    LXL1    TEMP1,,AUTO
         2 004414   200032 236100                    LDQ     PNUM,,AUTO
         2 004415   000022 736000                    QLS     18
         2 004416   100000 676111                    ERQ     0,X1,PR1
         2 004417   000777 376003                    ANQ     511,DU
         2 004420   100000 656111                    ERSQ    0,X1,PR1

     1777    14932    3           END;

  14932  2 004421   200012 054100                    AOS     I,,AUTO
         2 004422   200012 236100                    LDQ     I,,AUTO
         2 004423   200017 116100                    CMPQ    TEMP2,,AUTO
         2 004424   004332 604400 2                  TMOZ    s:14916

     1778    14933    2      PROC$ = ADDR (B$P$ -> B$P(PNUM));

  14933  2 004425   200032 236100                    LDQ     PNUM,,AUTO
         2 004426   000042 402003                    MPY     34,DU
         2 004427   000000 036000 xsym               ADLQ    B$P$
         2 004430   200037 756100                    STQ     PROC$,,AUTO

     1779    14934    3      IF HW_WSQ0PT THEN DO;

  14934  2 004431   000000 234000 xsym               SZN     HW_WSQ0PT
         2 004432   004456 605000 2                  TPL     s:14939

     1780    14935    3           PROC$->B$P.HPP(0)=B$IPHYMAP$->MM$IPHY_MAP(B$UPT.RPN(B$JIT.PLL));

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:220  
  14935  2 004433   000000 470400 xsym               LDP0    B$JIT$
         2 004434   000176 220100                    LDX0    126,,PR0
         2 004435   000000 471400 xsym               LDP1    B$UPT$
         2 004436   100000 236110                    LDQ     0,X0,PR1
         2 004437   000022 772000                    QRL     18
         2 004440   000001 736000                    QLS     1
         2 004441   000000 473400 xsym               LDP3    B$IPHYMAP$
         2 004442   200037 474500                    LDP4    PROC$,,AUTO
         2 004443   000100 101506                    MRL     fill='000'O
         2 004444   300000 000002                    ADSC9   0,Q,PR3                  cn=0,n=2
         2 004445   400002 000004                    ADSC9   2,,PR4                   cn=0,n=4

     1781    14936    3           PROC$->B$P.TPP(0)=B$IPHYMAP$->MM$IPHY_MAP(B$UPT.RPN(TEMP2));

  14936  2 004446   200017 720100                    LXL0    TEMP2,,AUTO
         2 004447   100000 236110                    LDQ     0,X0,PR1
         2 004450   000022 772000                    QRL     18
         2 004451   000001 736000                    QLS     1
         2 004452   000100 100506                    MLR     fill='000'O
         2 004453   300000 000002                    ADSC9   0,Q,PR3                  cn=0,n=2
         2 004454   400023 000002                    ADSC9   19,,PR4                  cn=0,n=2

     1782    14937    3           END;

  14937  2 004455   004470 710000 2                  TRA     s:14942

     1783    14938    3      ELSE DO;

     1784    14939    3           PROC$->B$P.HPP(0)=B$UPT.RPN(B$JIT.PLL);

  14939  2 004456   000000 470400 xsym               LDP0    B$JIT$
         2 004457   000176 220100                    LDX0    126,,PR0
         2 004460   000000 471400 xsym               LDP1    B$UPT$
         2 004461   100000 236110                    LDQ     0,X0,PR1
         2 004462   000022 772000                    QRL     18
         2 004463   200037 473500                    LDP3    PROC$,,AUTO
         2 004464   300002 756100                    STQ     2,,PR3
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:221  

     1785    14940    3           PROC$->B$P.TPP(0)=B$UPT.RPN(TEMP2);

  14940  2 004465   200017 720100                    LXL0    TEMP2,,AUTO
         2 004466   100000 221110                    LDX1    0,X0,PR1
         2 004467   300023 741100                    STX1    19,,PR3

     1786    14941    3           END;

     1787    14942    2      B$JIT.PPC = B$JIT.PPC - B$JIT.PCP;

  14942  2 004470   000201 236100                    LDQ     129,,PR0
         2 004471   000022 772000                    QRL     18
         2 004472   200050 756100                    STQ     ECP+7,,AUTO
         2 004473   000207 236100                    LDQ     135,,PR0
         2 004474   777777 376007                    ANQ     -1,DL
         2 004475   200050 136100                    SBLQ    ECP+7,,AUTO
         2 004476   000000 621006                    EAX1    0,QL
         2 004477   000207 441100                    SXL1    135,,PR0

     1788    14943    2      B$U.PCT = B$JIT.PPC;

  14943  2 004500   000000 473400 xsym               LDP3    S$CU$
         2 004501   300010 741100                    STX1    8,,PR3

     1789    14944    2      PROC$ -> B$P.PVA(0) = B$JIT.PLL;

  14944  2 004502   000176 220100                    LDX0    126,,PR0
         2 004503   200037 474500                    LDP4    PROC$,,AUTO
         2 004504   400025 740100                    STX0    21,,PR4

     1790    14945    2      PROC$ -> B$P.HVA(0) = B$JIT.DDLL;

  14945  2 004505   000200 221100                    LDX1    128,,PR0
         2 004506   400026 741100                    STX1    22,,PR4

     1791    14946
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:222  
     1792    14947
     1793    14948    2      PROC$ -> B$P.FRQ(0) = 1;

  14948  2 004507   000001 235007                    LDA     1,DL
         2 004510   400001 755100                    STA     1,,PR4

     1794    14949
     1795    14950        /* If this processor is overlaid, the overlays will be installed   */
     1796    14951        /* as they are accessed.  See JDP$SEGLD.                           */
     1797    14952
     1798    14953    2      B$U.APR = PNUM;

  14953  2 004511   200032 236100                    LDQ     PNUM,,AUTO
         2 004512   000030 736000                    QLS     24
         2 004513   300007 752160                    STCQ    7,'60'O,PR3

     1799    14954    2      PROC$ -> B$P.PPC(0) = B$JIT.PCP;

  14954  2 004514   000201 236100                    LDQ     129,,PR0
         2 004515   000022 772000                    QRL     18
         2 004516   400003 756100                    STQ     3,,PR4

     1800    14955    2      CALL SSS$SYSTIME( PROC$ -> B$P.INSTDATE (0));

  14955  2 004517   200037 236100                    LDQ     PROC$,,AUTO
         2 004520   000005 036003                    ADLQ    5,DU
         2 004521   200050 756100                    STQ     ECP+7,,AUTO
         2 004522   200050 630500                    EPPR0   ECP+7,,AUTO
         2 004523   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 004524   000000 701000 xent               TSX1    SSS$SYSTIME
         2 004525   000000 011000                    NOP     0

     1801    14956           %LOCK(G=J_PLOCK);

  14957  2 004526   000001 630400 3                  EPPR0   1
         2 004527   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 004530   000000 701000 xent               TSX1    HFC$LOCK
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:223  
         2 004531   000000 011000                    NOP     0

     1802    14959    2      MM$BYP.AUTOINUSE = MM$BYP.AUTOINUSE + PROC$ -> B$P.PPC(0);

  14959  2 004532   000000 470400 xsym               LDP0    MM_BYP$
         2 004533   200037 471500                    LDP1    PROC$,,AUTO
         2 004534   000015 236100                    LDQ     13,,PR0
         2 004535   100003 036100                    ADLQ    3,,PR1
         2 004536   000015 756100                    STQ     13,,PR0

     1803    14960           %UNLOCK (G=J_PLOCK);

  14961  2 004537   000001 630400 3                  EPPR0   1
         2 004540   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 004541   000000 701000 xent               TSX1    HFC$UNLOCK
         2 004542   000000 011000                    NOP     0

     1804    14963    2      RETURN;

  14963  2 004543   200046 221300                    LDX1  ! ECP+5,,AUTO
         2 004544   000001 702211                    TSX2  ! 1,X1

     1805    14964    2   END INSTALL_PROC;
     1806    14965
     1807    14966    1   END JST$CPEXIT;

  14966  2 004545   000000 702200 xent               TSX2  ! X66_ARET

EBADFNME
 Sect OctLoc
   1     000   122324 401624                                                    R...

EBADSSP
 Sect OctLoc
   1     001   122324 403514                                                    R...

EBADDBUGR
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:224  
 Sect OctLoc
   1     002   122324 403104                                                    R..D

EPROGTOOBIG
 Sect OctLoc
   1     003   122324 403164                                                    R..t

ENOSHRLIB
 Sect OctLoc
   1     004   122324 403174                                                    R..|

ENOTANRU
 Sect OctLoc
   1     005   122324 403314                                                    R...

ENOSUCHASL
 Sect OctLoc
   1     006   122324 403504                                                    R...

ELDLNKSSP
 Sect OctLoc
   1     007   122324 405014                                                    R...

EBADLOGON
 Sect OctLoc
   1     010   122324 403134                                                    R..\

ERESTRICTED
 Sect OctLoc
   1     011   122324 403544                                                    R...

ENSTDINVOC
 Sect OctLoc
   1     012   122324 403554                                                    R...

EBADHEAD
 Sect OctLoc
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:225  
   1     013   122324 403244                                                    R...

EHALFHEAD
 Sect OctLoc
   1     014   122324 403274                                                    R...

EBADROSEG
 Sect OctLoc
   1     015   122324 403234                                                    R...

ETCBSZBAD
 Sect OctLoc
   1     016   122324 403324                                                    R...

EDCBSZBAD
 Sect OctLoc
   1     017   122324 403334                                                    R...

EHALFTREE
 Sect OctLoc
   1     020   122324 403304                                                    R...

EDEBUGXONLY
 Sect OctLoc
   1     021   122324 403124                                                    R..T

EBSUNM
 Sect OctLoc
   1     022   122324 412264                                                    R...

(unnamed)
 Sect OctLoc
   1     023   020000 000000   200000 000000   000200 000000   000000 020000    ................
   1     027   100000 000000   040000 000000   000000 000400   000000 010000    @... ...........
   1     033   000000 001000   004000 000000   000000 000040   000000 100000    ........... ..@.
   1     037   416777 777777                                                    ....

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:226  
(unnamed)
 Sect OctLoc
   3     000   052040 040040   000000 006000   777777 377777   000000 000501    *   ............
   3     004   000000 000064   000004 006000   000012 006000   000003 006000    ...4............
   3     010   000000 000050   000002 006000   000010 006000   000000 006000    ...(............
   3     014   000002 006000   000010 006000   000003 777777   000001 000001    ................
   3     020   000005 777640   000011 777640   775777 777777   000000 006003    ................
   3     024   000012 006000   000023 006000   000000 000036   000026 006000    ................
   3     030   000000 006000   000030 006000   000014 006000   000000 000022    ................
   3     034   000033 006000   000000 000031   000003 006000   000035 006000    ................
   3     040   000012 006000   000030 006000   777777 777700   000011 006000    ................
   3     044   000000 006000   000006 006000   000003 006000   007777 770000    ................
   3     050   000000 000043   000050 006000   000007 006000   001777 776000    ...#.(..........
   3     054   777777 000377   757777 777777                                    ........

PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:227  
--  Include file information  --

   UE_CP6.:E05TOU  is referenced.
   UD_SEV_C.:E05TOU  is referenced.
   MM_MACRO_M.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   MM$SYSGEN.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   MM_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B_UHJMAC_C.:E05TOU  is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   F_CP6.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MLSMAC_C.:E05TOU  is referenced.
   B_ULSMAC_C.:E05TOU  is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
   B$P.:E05TOU  cannot be made into a system file and is referenced.
   JS_CNTRL_R.:E05TOU  cannot be made into a system file and is referenced.
   FM$GRAN.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   SS_SCHED_C.:E05TOU  is referenced.
   J_ERRSET_C.:E05TOU  is referenced.
   FR_ERRORS_C.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   J_ERRORS_C.:E05TOU  is referenced.
   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   HF_LOCK_C.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JST$CPEXIT.
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:228  

 **** Variables and constants ****

  ****  Section 001 RoData JST$CPEXIT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/b STRC        r     1 EBADDBUGR                  0-0-0/b STRC        r     1 EBADFNME
    13-0-0/b STRC        r     1 EBADHEAD                  10-0-0/b STRC        r     1 EBADLOGON
    15-0-0/b STRC        r     1 EBADROSEG                  1-0-0/b STRC        r     1 EBADSSP
    22-0-0/b STRC        r     1 EBSUNM                    17-0-0/b STRC        r     1 EDCBSZBAD
    21-0-0/b STRC        r     1 EDEBUGXONLY               14-0-0/b STRC        r     1 EHALFHEAD
    20-0-0/b STRC        r     1 EHALFTREE                  7-0-0/b STRC        r     1 ELDLNKSSP
     4-0-0/b STRC        r     1 ENOSHRLIB                  6-0-0/b STRC        r     1 ENOSUCHASL
     5-0-0/b STRC        r     1 ENOTANRU                  12-0-0/b STRC        r     1 ENSTDINVOC
     3-0-0/b STRC        r     1 EPROGTOOBIG               11-0-0/b STRC        r     1 ERESTRICTED
    16-0-0/b STRC        r     1 ETCBSZBAD

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ACCT$                     7-0-0/w PTR         r     1 @DEBUG$
     3-0-0/w PTR         r     1 @NAME$                     5-0-0/w PTR         r     1 @PASS$
     6-0-0/w PTR         r     1 @PSN$                     *0-0-0/w PTR         r     1 ACCT$
    20-0-0/w UBIN(9)     r     1 ACCT_TYP                  10-0-0/w PTR         r     1 ASL$
    11-0-0/w PTR         r     1 ASP$                      *0-0-0/w PTR         r     1 DEBUG$
    34-0-0/w PTR         r     1 DSPTR$                    40-0-0/w UBIN        r     1 ECC
    41-0-0/w STRC(144)   r     1 ECP                       22-0-0/w UBIN        r     1 ERR
    12-0-0/w SBIN        r     1 I                         24-0-0/w UBIN        r     1 INIT_ROSIZE
    36-0-0/w PTR         r     1 LMDCB$                    31-0-0/w PTR         r     1 LPTR$
    21-0-0/w UBIN        r     1 MODTIME                   *0-0-0/w PTR         r     1 NAME$
    13-0-0/w UBIN        r     1 NOOVER                    30-0-0/w SBIN        r     1 PAGES
    *0-0-0/w PTR         r     1 PASS$                     32-0-0/w UBIN        r     1 PNUM
    37-0-0/w PTR         r     1 PROC$                     *0-0-0/w PTR         r     1 PSN$
    33-0-0/b BIT (18)    r     1 PTYPE                     27-0-0/w UBIN        r     1 RECSIZE
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:229  
    25-0-0/w UBIN        r     1 ROSZ                      26-0-0/w UBIN        r     1 SEGSIZE
    15-0-0/b BIT         r     1 SHARED_FLAG               14-0-0/b BIT         r     1 SYSFLAG
    23-0-0/w UBIN        r     1 TCBSZ                     16-0-0/w SBIN        r     1 TEMP1
    17-0-0/w SBIN        r     1 TEMP2                     20-0-0/w SBIN        r     1 TEMP3
    20-0-0/w PTR         r     1 TEMP3$                    20-0-0/w STRC        r     1 TEMP3_PTR
    35-0-0/w PTR         r     1 TPTR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$CPLS$                    0-0-0/w PTR         r     1 B$DBLS$
     0-0-0/w PTR         r     1 B$IPHYMAP$                 0-0-0/w PTR         r     1 B$JIT$
     0-0-0/w PTR         r     1 B$LS$                      0-0-0/w PTR         r     1 B$M$LM$
     0-0-0/w PTR         r     1 B$MISC2$                   0-0-0/w PTR         r     1 B$P$
     0-0-0/w PTR         r     1 B$PPUT$                    0-0-0/w PTR         r     1 B$ROSEG$
     0-0-0/w PTR         r     1 B$SBUF1$                   0-0-0/w PTR         r     1 B$SDS0$
     0-0-0/w PTR         r     1 B$SDS1$                    0-0-0/w PTR         r     1 B$UPT$
     0-0-0/w PTR         r     1 B$USERIS$                  0-0-0/w PTR         r     1 B$USERLS$
     0-0-0/d STRC(432)   r     1 B_MPT                      0-0-0/b BIT         r     1 ES_PRIVMASK
     0-0-0/w SBIN        r     1 FR_SUMX
     0-0-0/c CHAR(8)     r     1 FR_SUNM(0:0)
     0-0-0/w BIT         r     1 HW_WSQ0PT                  0-0-0/w SBIN        r     1 JS_SHARE_ALL
     0-0-0/d STRC(648)   r     1 J_FPT_RESCTL               0-0-0/c STRC(72)    r     1 J_LOGON
     0-0-0/d BIT (72)    r     1 J_PLOCK                    0-0-0/w PTR         r     1 J_SYS$
     0-0-0/c CHAR(8)     r     1 J_SYSTXT                   0-0-0/w PTR         r     1 MM_BYP$
     0-0-0/w PTR         r     1 S$CU$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d BIT (72)    r     1 B$DESCR                    0-0-0/w CHAR(8)     r     1 B$DWTXT
     0-0-0/w STRC(1440)  r     1 B$HEAD                     0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC        r     1 B$MAP(0:1023)              0-0-0/d STRC(10368) r     1 B$MLS
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:230  
     0-0-0/w STRC(216)   r     1 B$NODE                     0-0-0/w STRC(1440)  r     1 B$OLDHEAD
     0-0-0/d STRC(1224)  r     1 B$P(0:0)                   0-0-0/w PTR         r     1 B$PTR
     0-0-0/d STRC(72)    r     1 B$ROAVAIL                  0-0-0/d STRC(3024)  r     1 B$ROSEG
     0-0-0/d STRC(576)   r     1 B$SDS                      0-0-0/d STRC(2304)  r     1 B$SS
     0-0-0/d STRC(2592)  r     1 B$TCB                      0-0-0/c STRC(288)   r     1 B$TEXTC
     0-0-0/w STRC(108)   r     1 B$TREEHDR                  0-0-0/w CHAR(6)     r     1 B$TXT6
     0-0-0/d STRC(576)   r     1 B$U                        0-0-0/d STRC(2592)  r     1 B$ULNK
     0-0-0/w PTR         r     1 DCB$(0:0)
     0-0-0/w UBIN        r     1 DCB_WORD(0:0)
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/d STRC(648)   r     1 FPT$RESCTL
     0-0-0/w STRC(576)   r     1 MM$BYP
     0-0-0/d STRC(72)    r     1 MM$DESC(0:0)
     0-0-0/h UBIN(18)    r     1 MM$IPHY_MAP(0:0)
     0-0-0/w STRC        r     1 MM$PPUT(0:0)
     0-0-0/w ASTR(0)     r     1 REST_OF_ROS                0-0-0/d STRC(360)   r     1 VLP$PS


   Procedure JST$CPEXIT requires 2406 words for executable code.
   Procedure JST$CPEXIT requires 48 words of local(AUTO) storage.

    No errors detected in file JST$STEP.:E05TSI    .
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:231  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:232  
          MINI XREF LISTING

ACCT$
        13**DCL         9--PROC    13494--ENTRY   13516>>IF      13537<>CALL    13614>>ASSIGN  14194<>CALL
     14860>>ASSIGN  14878>>ASSIGN  14892<>CALL
ACCT_TYP
        28**DCL     13814<<ASSIGN  13815<>CALL    14337<<ASSIGN  14338<>CALL    14560<<ASSIGN  14561<>CALL
ADD_SHARED
     14846**PROC    14198--CALL
ASL$
        19**DCL     13883<<ASSIGN  13885<<ASSIGN  14351>>IF      14354<>CALL
ASP$
        20**DCL     13893<<ASSIGN  13899<<ASSIGN  14367>>IF      14370<>CALL
ASP_ERR
     14709**LABEL   13630--CALLALT 13648--CALLALT 13999--CALLALT 14008--CALLALT 14017--CALLALT 14020--CALLALT
     14135--CALLALT 14139--CALLALT 14141--CALLALT 14281--CALLALT 14285--CALLALT 14536--CALLALT
ASP_ERR0
     14725**LABEL   13640--GOTO    13661--GOTO    13706--GOTO    13742--CALLALT 13758--GOTO    13779--GOTO
     13838--GOTO    13850--GOTO    13915--GOTO    13986--GOTO    14051--GOTO    14115--GOTO
ASP_ERR1
     14723**LABEL   14357--GOTO    14362--CALLALT 14373--GOTO    14378--CALLALT 14389--GOTO    14391--CALLALT
ASP_FETCH
     14311**LABEL   14262--GOTO
B$CPLS$
      2270**DCL     14500>>ASSIGN  14501>>ASSIGN
B$DBLS$
      2271**DCL     14638>>ASSIGN  14638>>ASSIGN
B$DESCR
     11622**DCL     14137>>ASSIGN
B$DO.ECCINFO
      3406**DCL      3407--REDEF
B$DWTXT
     11623**DCL     13516>>IF      13614>>ASSIGN  13617>>ASSIGN  14860>>ASSIGN  14878>>ASSIGN
B$HEAD
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:233  
     12331**DCL     13653--CALL    13653--CALL    13658--IF      13677--ASSIGN  13678>>ASSIGN  13731--ASSIGN
B$HEAD.ASLNAME
     12513**DCL     13885--ASSIGN
B$HEAD.ASLNAME.CNT
     12518**DCL     13882>>IF
B$HEAD.BIAS
     12495**DCL     13684<<ASSIGN  13702>>IF      13907>>ASSIGN  14016>>ASSIGN  14016>>ASSIGN  14017>>CALL
     14020>>CALL
B$HEAD.DATA_SEG.PROTECTION
     12451**DCL     14133>>ASSIGN
B$HEAD.DATA_SEG.SIZ
     12447**DCL     14130>>ASSIGN
B$HEAD.DCBRES
     12382**DCL     14071>>ASSIGN  14099>>DOINDEX
B$HEAD.FLAVOR
     12456**DCL     13675>>IF      13697>>IF
B$HEAD.LIBNAME
     12503**DCL     13899--ASSIGN
B$HEAD.LIBNAME.CNT
     12508**DCL     13890>>IF
B$HEAD.LOCK
     12454**DCL     13831>>IF      13831>>IF      13834>>IF
B$HEAD.NOCHGPMEM
     12475**DCL     13689<<ASSIGN  13928>>IF
B$HEAD.NSTDINVOC
     12428**DCL     13847>>IF
B$HEAD.OVRL
     12470**DCL     13687<<ASSIGN  14108>>IF      14315>>IF
B$HEAD.PRECSIZE
     12393**DCL     14007>>ASSIGN  14283>>ASSIGN
B$HEAD.PRIV
     12332**DCL     13937>>ASSIGN
B$HEAD.PROCACC
     12472**DCL     13688<<ASSIGN  14322>>IF
B$HEAD.PROCSURCHG
     12478**DCL     13690<<ASSIGN  14333>>IF
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:234  
B$HEAD.PSEUDO_COUNT
     12490**DCL     13718>>IF      13723>>IF      13739>>ASSIGN
B$HEAD.PSEUDO_TEXT
     12498**DCL     13721>>IF      13738>>ASSIGN
B$HEAD.RDATA
     12350**DCL     13683<<ASSIGN  13702>>IF      14014>>IF      14016>>ASSIGN  14019>>ASSIGN
B$HEAD.RESTPROC
     12481**DCL     13691<<ASSIGN  13829>>IF
B$HEAD.ROSIZE
     12409**DCL     13669>>IF      13964>>ASSIGN  13983>>IF      14006>>ASSIGN  14077>>ASSIGN  14110>>ASSIGN
B$HEAD.RPROC
     12340**DCL     13682<<ASSIGN  13702>>IF      14275>>ASSIGN
B$HEAD.S
     12459**DCL     13686<<ASSIGN  14177>>IF
B$HEAD.START
     12376**DCL     13685<<ASSIGN  14328>>ASSIGN
B$HEAD.STATS
     12437**DCL     14862>>IF
B$HEAD.STRONG_LOCK
     12484**DCL     13692<<ASSIGN  13831>>IF
B$HEAD.TCBSIZE
     12389**DCL     13954>>IF      13954<<ASSIGN  13964>>ASSIGN  14076>>ASSIGN
B$HEAD.TREEDISP
     12385**DCL     14037>>ASSIGN
B$HEAD.UDCBNUM
     12379**DCL     14071>>ASSIGN  14092>>ASSIGN
B$HEAD.VDPGS
     12342**DCL     13681<<ASSIGN  13702>>IF      13908>>ASSIGN
B$HEAD.VPPGS
     12334**DCL     13680<<ASSIGN  13702>>IF      13910>>ASSIGN
B$IPHYMAP$
      2277**DCL     14918>>ASSIGN  14924>>ASSIGN  14935>>ASSIGN  14936>>ASSIGN
B$JIT.CPFLAGS1
      3005**DCL     13472<<ASSIGN  13472>>ASSIGN  13558>>IF      13606<<ASSIGN  13606>>ASSIGN  13809>>IF
     14082>>IF      14336<<ASSIGN  14336>>ASSIGN  14460>>IF      14489>>IF      14558>>IF      14590>>IF
     14627>>IF      14648>>IF      14680>>IF      14698>>IF      14703<<ASSIGN  14703>>ASSIGN  14709<<ASSIGN
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:235  
     14709>>ASSIGN
B$JIT.CPFLAGS1.SLEAZE
      3010**DCL      3010--REDEF
B$JIT.CURPNUM
      3170**DCL     13804<<ASSIGN  13824<<ASSIGN
B$JIT.CURSUDO
      3185**DCL     13723>>IF      13739>>ASSIGN
B$JIT.DDLL
      3074**DCL     13921<<ASSIGN  13922>>ASSIGN  14541<<ASSIGN  14945>>ASSIGN
B$JIT.DDUL
      3074**DCL     13903<<ASSIGN
B$JIT.DLL
      3074**DCL     13907<<ASSIGN  13908>>ASSIGN  14538<<ASSIGN
B$JIT.DUL
      3074**DCL     13908<<ASSIGN  13909>>ASSIGN  14539<<ASSIGN
B$JIT.ERR
      2916**DCL     13507<<ASSIGN  13597<<ASSIGN  13639<<ASSIGN  13660<<ASSIGN  13705<<ASSIGN  13757<<ASSIGN
     13778<<ASSIGN  13837<<ASSIGN  13849<<ASSIGN  13914<<ASSIGN  13984<<ASSIGN  13985<<ASSIGN  14050<<ASSIGN
     14114<<ASSIGN  14356<<ASSIGN  14372<<ASSIGN  14388<<ASSIGN  14425<<ASSIGN  14437<<ASSIGN  14449<<ASSIGN
     14463<<ASSIGN  14722<<ASSIGN
B$JIT.ERR.CODE
      2917**DCL     14604>>IF      14723<<ASSIGN
B$JIT.ERR.FCG
      2916**DCL     14606<<ASSIGN
B$JIT.ERR.MID
      2917**DCL      2917--REDEF   14607<<ASSIGN
B$JIT.EUP
      3076**DCL     13892<<ASSIGN  13898<<ASSIGN  13903>>ASSIGN  13912>>IF
B$JIT.FBUL
      3076**DCL     13553>>IF      13553<<ASSIGN
B$JIT.HIGHPNUM
      3170**DCL     13805<<ASSIGN  13823<<ASSIGN  13823>>ASSIGN  13824>>ASSIGN
B$JIT.JRESPEAK
      3078**DCL      3079--REDEF
B$JIT.JTMPDPPK
      3085**DCL     13552>>IF      13552<<ASSIGN
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:236  
B$JIT.JUNK
      3116**DCL     13567>>IF      13627>>IF      13771<<ASSIGN  13771>>ASSIGN  13791<<ASSIGN  13791>>ASSIGN
     13798>>IF      13941<<ASSIGN  13941>>ASSIGN  14458>>IF      14590>>IF      14614>>IF      14627>>IF
     14655>>IF      14664<<ASSIGN  14664>>ASSIGN  14697<<ASSIGN  14697>>ASSIGN
B$JIT.LLL
      3080**DCL     13894<<ASSIGN  13900<<ASSIGN
B$JIT.LOCK
      3065**DCL     13831>>IF      13834>>IF
B$JIT.LUL
      3080**DCL     13895<<ASSIGN  13901<<ASSIGN
B$JIT.MMFLGS.FREE_PPGS
      3077**DCL     13929<<ASSIGN  13930<<ASSIGN
B$JIT.MODE
      2911**DCL     14513>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
      3187**DCL      3187--REDEF    3188--REDEF
B$JIT.PCD
      3075**DCL     14532>>IF      14540<<ASSIGN
B$JIT.PCDD
      3076**DCL     13923<<ASSIGN  14542<<ASSIGN
B$JIT.PCL
      3080**DCL     13924<<ASSIGN
B$JIT.PCP
      3075**DCL     14248<<ASSIGN  14294>>ASSIGN  14532>>IF      14914>>ASSIGN  14942>>ASSIGN  14954>>ASSIGN
B$JIT.PCROS
      3075**DCL     13968>>ASSIGN  14811>>ASSIGN  14820>>ASSIGN
B$JIT.PLL
      3074**DCL     13909<<ASSIGN  13910>>ASSIGN  14279>>ASSIGN  14294>>ASSIGN  14295>>DOINDEX 14914>>ASSIGN
     14915>>DOINDEX 14935>>ASSIGN  14939>>ASSIGN  14944>>ASSIGN
B$JIT.PNR
      3091**DCL      3091--REDEF
B$JIT.PPC
      3077**DCL     14942<<ASSIGN  14942>>ASSIGN  14943>>ASSIGN
B$JIT.PRFLAGS.NSSYNTAX
      3000**DCL     13847>>IF
B$JIT.PRIOR_CP
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:237  
      3180**DCL     14477<<ASSIGN
B$JIT.PRIV.ACTIVE
      2917**DCL     13478<<ASSIGN  13948<<ASSIGN  13948>>ASSIGN  14625<<ASSIGN  14628<<ASSIGN  14628>>ASSIGN
     14630>>IF
B$JIT.PRIV.AUTH
      2957**DCL     13939>>IF
B$JIT.PRIV.JOB
      2960**DCL     13478>>ASSIGN  14625>>ASSIGN
B$JIT.PRIV.PRC
      2964**DCL     13937<<ASSIGN  13939>>IF      13939>>IF      13943<<ASSIGN  13945<<ASSIGN  13947>>IF
     14490<<ASSIGN  14514<<ASSIGN  14514>>ASSIGN  14628>>ASSIGN
B$JIT.PROG_ENTRY
      3066**DCL     14613<<ASSIGN  14615<<ASSIGN
B$JIT.PSEUDO_COUNT
      3180**DCL     13750<<ASSIGN
B$JIT.PSEUDO_TEXT
      3180**DCL     13749<<ASSIGN
B$JIT.PUL
      3074**DCL     13910<<ASSIGN  13912>>IF      13921>>ASSIGN
B$JIT.RUNFLAGS
      3112**DCL     13474>>IF      13475<<ASSIGN  13477>>IF      13595>>IF      14323<<ASSIGN  14324<<ASSIGN
     14335<<ASSIGN  14520<<ASSIGN
B$JIT.SPEAK
      3078**DCL     13801<<ASSIGN
B$JIT.SRESPEAK
      3079**DCL     13800<<ASSIGN
B$JIT.SSLEV
      3053**DCL     13809>>IF      14558>>IF
B$JIT.STEPS
      3137**DCL     13558>>IF      13803<<ASSIGN  13803>>ASSIGN  14554<<ASSIGN  14554>>ASSIGN
B$JIT.STMPDPPK
      3085**DCL     13552>>IF      13552>>ASSIGN  13802<<ASSIGN
B$JIT.SVLDTF
      3157**DCL     14613>>ASSIGN  14658>>IF      14661<<ASSIGN
B$JIT.TDP
      3076**DCL     13922<<ASSIGN  14543<<ASSIGN
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:238  
B$JIT.TSLINE
      3185**DCL      3186--REDEF
B$JIT.USRERR
      3052**DCL     14690>>ASSIGN
B$JIT.XCONF
      3137**DCL     14666<<ASSIGN  14666>>ASSIGN
B$JIT$
      2268**DCL      2911--IMP-PTR 13472>>ASSIGN  13472>>ASSIGN  13474>>IF      13475>>ASSIGN  13477>>IF
     13478>>ASSIGN  13478>>ASSIGN  13507>>ASSIGN  13552>>IF      13552>>IF      13552>>ASSIGN  13552>>ASSIGN
     13553>>IF      13553>>ASSIGN  13558>>IF      13558>>IF      13567>>IF      13595>>IF      13597>>ASSIGN
     13606>>ASSIGN  13606>>ASSIGN  13627>>IF      13639>>ASSIGN  13660>>ASSIGN  13705>>ASSIGN  13723>>IF
     13739>>ASSIGN  13749>>ASSIGN  13750>>ASSIGN  13757>>ASSIGN  13771>>ASSIGN  13771>>ASSIGN  13778>>ASSIGN
     13791>>ASSIGN  13791>>ASSIGN  13798>>IF      13800>>ASSIGN  13801>>ASSIGN  13802>>ASSIGN  13803>>ASSIGN
     13803>>ASSIGN  13804>>ASSIGN  13805>>ASSIGN  13809>>IF      13809>>IF      13823>>ASSIGN  13823>>ASSIGN
     13824>>ASSIGN  13824>>ASSIGN  13831>>IF      13834>>IF      13837>>ASSIGN  13847>>IF      13849>>ASSIGN
     13892>>ASSIGN  13894>>ASSIGN  13895>>ASSIGN  13898>>ASSIGN  13900>>ASSIGN  13901>>ASSIGN  13903>>ASSIGN
     13903>>ASSIGN  13907>>ASSIGN  13908>>ASSIGN  13908>>ASSIGN  13909>>ASSIGN  13909>>ASSIGN  13910>>ASSIGN
     13910>>ASSIGN  13912>>IF      13912>>IF      13914>>ASSIGN  13921>>ASSIGN  13921>>ASSIGN  13922>>ASSIGN
     13922>>ASSIGN  13923>>ASSIGN  13924>>ASSIGN  13929>>ASSIGN  13930>>ASSIGN  13937>>ASSIGN  13939>>IF
     13939>>IF      13939>>IF      13941>>ASSIGN  13941>>ASSIGN  13943>>ASSIGN  13945>>ASSIGN  13947>>IF
     13948>>ASSIGN  13948>>ASSIGN  13968>>ASSIGN  13984>>ASSIGN  13985>>ASSIGN  14050>>ASSIGN  14082>>IF
     14114>>ASSIGN  14248>>ASSIGN  14279>>ASSIGN  14294>>ASSIGN  14294>>ASSIGN  14295>>DOINDEX 14323>>ASSIGN
     14324>>ASSIGN  14335>>ASSIGN  14336>>ASSIGN  14336>>ASSIGN  14356>>ASSIGN  14372>>ASSIGN  14388>>ASSIGN
     14425>>ASSIGN  14437>>ASSIGN  14449>>ASSIGN  14458>>IF      14460>>IF      14463>>ASSIGN  14477>>ASSIGN
     14489>>IF      14490>>ASSIGN  14513>>IF      14514>>ASSIGN  14514>>ASSIGN  14520>>ASSIGN  14532>>IF
     14532>>IF      14538>>ASSIGN  14539>>ASSIGN  14540>>ASSIGN  14541>>ASSIGN  14542>>ASSIGN  14543>>ASSIGN
     14554>>ASSIGN  14554>>ASSIGN  14558>>IF      14558>>IF      14590>>IF      14590>>IF      14604>>IF
     14606>>ASSIGN  14607>>ASSIGN  14613>>ASSIGN  14613>>ASSIGN  14614>>IF      14615>>ASSIGN  14625>>ASSIGN
     14625>>ASSIGN  14627>>IF      14627>>IF      14628>>ASSIGN  14628>>ASSIGN  14628>>ASSIGN  14630>>IF
     14648>>IF      14655>>IF      14658>>IF      14661>>ASSIGN  14664>>ASSIGN  14664>>ASSIGN  14666>>ASSIGN
     14666>>ASSIGN  14680>>IF      14690>>ASSIGN  14697>>ASSIGN  14697>>ASSIGN  14698>>IF      14703>>ASSIGN
     14703>>ASSIGN  14709>>ASSIGN  14709>>ASSIGN  14722>>ASSIGN  14723>>ASSIGN  14811>>ASSIGN  14820>>ASSIGN
     14914>>ASSIGN  14914>>ASSIGN  14915>>DOINDEX 14935>>ASSIGN  14939>>ASSIGN  14942>>ASSIGN  14942>>ASSIGN
     14942>>ASSIGN  14943>>ASSIGN  14944>>ASSIGN  14945>>ASSIGN  14954>>ASSIGN
B$LS$
      2275**DCL     14137>>ASSIGN
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:239  
B$M$LM$
      2263**DCL     13611>>ASSIGN
B$MAP.CTRL
     11169**DCL     14296<<ASSIGN
B$MAP.RPN
     11165**DCL     13540>>IF      14918>>ASSIGN  14920>>ASSIGN  14924>>ASSIGN  14926>>ASSIGN  14935>>ASSIGN
     14936>>ASSIGN  14939>>ASSIGN  14940>>ASSIGN
B$MAP.SCTRL
     11166**DCL     11167--REDEF   14916<<ASSIGN
B$MISC2$
      2276**DCL     14138>>ASSIGN
B$MLS.MISC2
      6305**DCL     14137<<ASSIGN
B$NODE
     12547**DCL     14047--ASSIGN  14048--IF      14066--ASSIGN  14864--ASSIGN  14885--ASSIGN
B$NODE.FLGS
     12551**DCL     14059<<ASSIGN  14060<<ASSIGN
B$NODE.FORWARD#
     12573**DCL     14062>>IF
B$NODE.NAME$
     12549**DCL     14057<<ASSIGN  14057>>ASSIGN  14876>>ASSIGN  14877>>ASSIGN
B$OLDHEAD
     12603**DCL     13678<<ASSIGN
B$OLDHEAD.BIAS
     12619**DCL     13684>>ASSIGN
B$OLDHEAD.NOCHGPMEM
     12612**DCL     13689>>ASSIGN
B$OLDHEAD.OVRL
     12610**DCL     13687>>ASSIGN
B$OLDHEAD.PROCACC
     12611**DCL     13688>>ASSIGN
B$OLDHEAD.PROCSURCHG
     12613**DCL     13690>>ASSIGN
B$OLDHEAD.RDATA
     12617**DCL     13683>>ASSIGN
B$OLDHEAD.RESTPROC
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:240  
     12614**DCL     13691>>ASSIGN
B$OLDHEAD.RPROC
     12618**DCL     13682>>ASSIGN
B$OLDHEAD.S
     12607**DCL     13686>>ASSIGN
B$OLDHEAD.START
     12620**DCL     13685>>ASSIGN
B$OLDHEAD.STRONG_LOCK
     12615**DCL     13692>>ASSIGN
B$OLDHEAD.VDPGS
     12606**DCL     13681>>ASSIGN
B$OLDHEAD.VPPGS
     12605**DCL     13680>>ASSIGN
B$P
      2298**DCL     14231--ASSIGN  14854--ASSIGN  14871--ASSIGN  14933--ASSIGN
B$P.ACCT
      2321**DCL     14860<<ASSIGN  14878<<ASSIGN
B$P.CRDATE
      2303**DCL     14195>>IF      14857<<ASSIGN
B$P.FLGS
      2319**DCL     14861<<ASSIGN  14863<<ASSIGN  14863>>ASSIGN  14881<<ASSIGN
B$P.FRQ
      2300**DCL     14247<<ASSIGN  14247>>ASSIGN  14495<<ASSIGN  14495>>ASSIGN  14883<<ASSIGN  14948<<ASSIGN
B$P.HPP
      2301**DCL     14882<<ASSIGN  14935<<ASSIGN  14939<<ASSIGN
B$P.HVA
      2317**DCL     14500>>ASSIGN  14945<<ASSIGN
B$P.INSTDATE
      2304**DCL     14197<<ASSIGN  14257<>CALL    14729<<ASSIGN  14856<<ASSIGN  14880<<ASSIGN  14897<<ASSIGN
     14955<>CALL
B$P.LIB_LNK
      2309**DCL     14866<<ASSIGN  14884<<ASSIGN
B$P.LNK
      2310**DCL     14865<<ASSIGN  14872<<ASSIGN  14874<<ASSIGN
B$P.NAME.COUNT
      2323**DCL     14858<<ASSIGN  14859>>ASSIGN  14876<<ASSIGN  14877>>ASSIGN
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:241  
B$P.NAME.TEXT
      2324**DCL     14435>>IF      14859<<ASSIGN  14877<<ASSIGN
B$P.NODE
      2312**DCL     14879<<ASSIGN
B$P.PPC
      2302**DCL     14202>>IF      14234>>ASSIGN  14235>>ASSIGN  14248>>ASSIGN  14447>>IF      14875<<ASSIGN
     14954<<ASSIGN  14959>>ASSIGN
B$P.PRIV
      2307**DCL     14490>>ASSIGN
B$P.PVA
      2315**DCL     14500>>ASSIGN  14501>>ASSIGN  14944<<ASSIGN
B$P.SA
      2318**DCL     14502>>ASSIGN
B$P.TPP
      2311**DCL     14936<<ASSIGN  14940<<ASSIGN
B$P.UC
      2299**DCL     13544<<ASSIGN  13544>>ASSIGN  14204>>IF      14213<<ASSIGN  14232>>IF      14237<<ASSIGN
     14237>>ASSIGN  14524<<ASSIGN  14524>>ASSIGN  14730<<ASSIGN  14761<<ASSIGN  14761>>ASSIGN  14855<<ASSIGN
     14898<<ASSIGN
B$P$
      2352**DCL     13544>>ASSIGN  13544>>ASSIGN  14195>>IF      14197>>ASSIGN  14202>>IF      14204>>IF
     14213>>ASSIGN  14231>>ASSIGN  14257>>CALL    14435>>IF      14447>>IF      14490>>ASSIGN  14495>>ASSIGN
     14495>>ASSIGN  14500>>ASSIGN  14500>>ASSIGN  14501>>ASSIGN  14502>>ASSIGN  14524>>ASSIGN  14524>>ASSIGN
     14729>>ASSIGN  14730>>ASSIGN  14761>>ASSIGN  14761>>ASSIGN  14854>>ASSIGN  14871>>ASSIGN  14872>>ASSIGN
     14897>>ASSIGN  14898>>ASSIGN  14933>>ASSIGN
B$PPUT$
      2274**DCL     14924>>ASSIGN  14926>>ASSIGN  14928>>ASSIGN  14929>>ASSIGN  14930>>ASSIGN  14931>>ASSIGN
B$PTR
     11238**DCL     14747<<ASSIGN
B$ROAVAIL.NEXT$
      3243**DCL     14743<<ASSIGN  14827<<ASSIGN
B$ROAVAIL.NWORDS
      3244**DCL     14744<<ASSIGN  14828<<ASSIGN
B$ROSEG.AVAIL$
      3207**DCL     14742<<ASSIGN  14743>>ASSIGN  14744>>ASSIGN  14826<<ASSIGN  14827>>ASSIGN  14828>>ASSIGN
     14830<<ASSIGN
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:242  
B$ROSEG.DCBPTR$
      3203**DCL     13528>>ASSIGN  14094>>ASSIGN  14096>>ASSIGN  14100>>ASSIGN  14745>>ASSIGN
B$ROSEG.ECCB
      3209**DCL     14086<<ASSIGN
B$ROSEG.NUMDCBS
      3205**DCL     14071<<ASSIGN  14741<<ASSIGN
B$ROSEG.TREE$
      3204**DCL     14038<<ASSIGN  14042>>ASSIGN  14042>>ASSIGN  14046>>ASSIGN  14046>>ASSIGN  14047>>ASSIGN
     14047>>ASSIGN  14048>>IF      14048>>IF      14056>>DOINDEX 14109>>ASSIGN  14864>>ASSIGN  14864>>ASSIGN
B$ROSEG$
      2264**DCL     13528>>ASSIGN  13528>>ASSIGN  14008>>CALL    14038>>ASSIGN  14038>>ASSIGN  14042>>ASSIGN
     14042>>ASSIGN  14046>>ASSIGN  14046>>ASSIGN  14047>>ASSIGN  14047>>ASSIGN  14048>>IF      14048>>IF
     14056>>DOINDEX 14071>>ASSIGN  14086>>ASSIGN  14094>>ASSIGN  14096>>ASSIGN  14100>>ASSIGN  14109>>ASSIGN
     14110>>ASSIGN  14741>>ASSIGN  14742>>ASSIGN  14742>>ASSIGN  14743>>ASSIGN  14744>>ASSIGN  14745>>ASSIGN
     14809>>ASSIGN  14826>>ASSIGN  14826>>ASSIGN  14827>>ASSIGN  14828>>ASSIGN  14830>>ASSIGN  14864>>ASSIGN
     14864>>ASSIGN
B$SBUF1$
      2265**DCL     13653>>CALL    13653>>CALL    13653<>CALL    13658>>IF      13669>>IF      13675>>IF
     13677>>ASSIGN  13677>>ASSIGN  13678>>ASSIGN  13680>>ASSIGN  13681>>ASSIGN  13682>>ASSIGN  13683>>ASSIGN
     13684>>ASSIGN  13685>>ASSIGN  13686>>ASSIGN  13687>>ASSIGN  13688>>ASSIGN  13689>>ASSIGN  13690>>ASSIGN
     13691>>ASSIGN  13692>>ASSIGN  13697>>IF      13702>>IF      13702>>IF      13702>>IF      13702>>IF
     13702>>IF      13718>>IF      13721>>IF      13723>>IF      13731>>ASSIGN  13731>>ASSIGN  13738>>ASSIGN
     13739>>ASSIGN  13829>>IF      13831>>IF      13831>>IF      13831>>IF      13834>>IF      13847>>IF
     13882>>IF      13885>>ASSIGN  13890>>IF      13899>>ASSIGN  13907>>ASSIGN  13908>>ASSIGN  13910>>ASSIGN
     13928>>IF      13937>>ASSIGN  13954>>IF      13954>>ASSIGN  13964>>ASSIGN  13964>>ASSIGN  13983>>IF
     14006>>ASSIGN  14007>>ASSIGN  14014>>IF      14016>>ASSIGN  14016>>ASSIGN  14016>>ASSIGN  14017>>CALL
     14019>>ASSIGN  14020>>CALL    14037>>ASSIGN  14071>>ASSIGN  14071>>ASSIGN  14076>>ASSIGN  14077>>ASSIGN
     14092>>ASSIGN  14099>>DOINDEX 14108>>IF      14110>>ASSIGN  14130>>ASSIGN  14133>>ASSIGN  14177>>IF
     14275>>ASSIGN  14283>>ASSIGN  14315>>IF      14322>>IF      14328>>ASSIGN  14333>>IF      14862>>IF
B$SDS.ACPENT
     11612**DCL     14649<>CALL
B$SDS.ACPENT.ENTLOC
     11613**DCL     14502<<ASSIGN
B$SDS0$
      2266**DCL     14502>>ASSIGN
B$SDS1$
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:243  
      2267**DCL     14649>>CALL
B$SS.FPT.ALT
       125**DCL     14699>>IF
B$SS.IC
       132**DCL     14701<<ASSIGN  14701>>ASSIGN
B$SS.ISR.WSR
       170**DCL     14692>>DOWHILE
B$SS.RVA
       165**DCL       166--REDEF
B$TCB
     11222**DCL     14810<<ASSIGN  14817--ASSIGN
B$TCB.ALT$.OFFSET
     11224**DCL     14813<<ASSIGN
B$TCB.ALT$.SID
     11226**DCL     14814<<ASSIGN
B$TCB.ALTFRM.UNUSED
     11235**DCL     14818<<ASSIGN
B$TCB.STK$.OFFSET
     11228**DCL     14815<<ASSIGN
B$TCB.STK$.SID
     11230**DCL     14816<<ASSIGN
B$TCB.TCBAVSZ
     11231**DCL     14817<<ASSIGN
B$TEXTC.COUNT
     12328**DCL     13612>>ASSIGN  14431>>IF      14858>>ASSIGN  14876>>ASSIGN
B$TEXTC.TEXT
     12329**DCL     13520>>IF      13613>>ASSIGN  14431>>IF      14859>>ASSIGN  14877>>ASSIGN
B$TREEHDR
     12531**DCL     14046--ASSIGN  14047--ASSIGN  14048--IF      14864--ASSIGN
B$TREEHDR.LIB$
     12538**DCL     14042<<ASSIGN  14042>>ASSIGN
B$TREEHDR.NODES
     12533**DCL     14047>>ASSIGN  14056>>DOINDEX
B$TREEHDR.SIZE
     12535**DCL     14048>>IF
B$TXT6
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:244  
     11624**DCL     13620>>ASSIGN
B$U.ACP
      3362**DCL     14431>>IF      14435>>IF      14475>>IF      14477>>ASSIGN  14499<<ASSIGN
B$U.APR
      3365**DCL     14246<<ASSIGN  14687>>IF      14953<<ASSIGN
B$U.DB
      3363**DCL     14177>>IF      14590>>IF      14674>>ASSIGN
B$U.FLG
      3272**DCL     13469<<ASSIGN  13469>>ASSIGN  13496<<ASSIGN  13496>>ASSIGN  13789<<ASSIGN  13789>>ASSIGN
     14503<<ASSIGN  14503>>ASSIGN  14597>>IF      14618<<ASSIGN  14618>>ASSIGN  14635>>IF      14646>>IF
     14665<<ASSIGN  14665>>ASSIGN  14670>>IF
B$U.MISC
      3385**DCL      3386--REDEF
B$U.PCT
      3369**DCL     14943<<ASSIGN
B$ULNK.ECCB.FLGS
      5630**DCL     13790<<ASSIGN  13790>>ASSIGN  14696<<ASSIGN  14696>>ASSIGN
B$ULNK.IS.BASE
      5549**DCL     14501<<ASSIGN
B$ULNK.IS.BOUND
      5545**DCL     14500<<ASSIGN
B$UPT$
      2273**DCL     13540>>IF      14296>>ASSIGN  14916>>ASSIGN  14918>>ASSIGN  14920>>ASSIGN  14924>>ASSIGN
     14926>>ASSIGN  14935>>ASSIGN  14936>>ASSIGN  14939>>ASSIGN  14940>>ASSIGN
B$USER.MISC
      3461**DCL      3462--REDEF
B$USERIS$
      2272**DCL     14020>>CALL    14284>>ASSIGN
B$USERLS$
      2269**DCL     14127>>ASSIGN  14633>>ASSIGN  14633>>ASSIGN  14799>>ASSIGN  14802>>ASSIGN  14806>>ASSIGN
     14806>>ASSIGN
BAD_ROSEG
     14110**LABEL   14095--GOTO
B_MPT.AS
      2528**DCL      2531--REDEF
B_MPT.ASDESC
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:245  
      2560**DCL      2564--REDEF
B_MPT.ECCB
      2543**DCL      2546--REDEF
B_MPT.ECCBDESC
      2578**DCL      2582--REDEF
B_MPT.LS
      2523**DCL      2526--REDEF
B_MPT.LS$
      2526**DCL     13790>>ASSIGN  13790>>ASSIGN  14696>>ASSIGN  14696>>ASSIGN
B_MPT.LSDESC
      2554**DCL      2558--REDEF
B_MPT.PS
      2533**DCL      2536--REDEF
B_MPT.PSDESC
      2566**DCL      2570--REDEF
B_MPT.SS
      2518**DCL      2521--REDEF
B_MPT.SS$
      2521**DCL     14692>>DOWHILE 14699>>IF      14701>>ASSIGN  14701>>ASSIGN
B_MPT.SSDESC
      2548**DCL      2552--REDEF
B_MPT.TCB
      2538**DCL      2541--REDEF
B_MPT.TCBDESC
      2572**DCL      2576--REDEF
DCB$
     11239**DCL     14096<<ASSIGN  14100<<ASSIGN
DCB_WORD
     11240**DCL     14094>>ASSIGN
DEBUG$
        16**DCL         9--PROC    13494--ENTRY   13504>>ASSIGN  13776>>IF      13935>>IF      14177>>IF
     14383>>IF      14386<>CALL    14624>>IF      14681>>IF
DSPTR$
        44**DCL     14109<<ASSIGN  14110<<ASSIGN  14111<>CALL    14138<<ASSIGN  14139<>CALL    14284<<ASSIGN
     14285<>CALL
EBADDBUGR
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:246  
     12189**DCL     13597>>ASSIGN  14388>>ASSIGN
EBADFNME
     12173**DCL     13507>>ASSIGN  14722>>ASSIGN
EBADHEAD
     12261**DCL     13705>>ASSIGN
EBADLOGON
     12237**DCL     14437>>ASSIGN
EBADROSEG
     12277**DCL     14114>>ASSIGN
EBADSSP
     12181**DCL     14449>>ASSIGN
EBSUNM
     12317**DCL     13757>>ASSIGN
ECC
        48**DCL     14654<<ASSIGN  14657<<ASSIGN  14672>>IF      14704<>CALL
ECP
        49**DCL     14704<>CALL
ECP.ECCS
        50**DCL     14659<<ASSIGN  14660<<ASSIGN  14682<<ASSIGN  14683<<ASSIGN  14684<<ASSIGN
ECP.EID
        51**DCL     14688<<ASSIGN  14689<<ASSIGN
ECP.JERR
        52**DCL     14690<<ASSIGN
ECP.P#
        53**DCL     14691<<ASSIGN
EDCBSZBAD
     12293**DCL     13984>>ASSIGN
EDEBUGXONLY
     12309**DCL     13778>>ASSIGN
EHALFHEAD
     12269**DCL     13660>>ASSIGN
EHALFTREE
     12301**DCL     14050>>ASSIGN
ELDLNKSSP
     12229**DCL     14463>>ASSIGN
ENOSHRLIB
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:247  
     12205**DCL     14372>>ASSIGN
ENOSUCHASL
     12221**DCL     14356>>ASSIGN
ENOTANRU
     12213**DCL     13639>>ASSIGN  14425>>ASSIGN
ENSTDINVOC
     12253**DCL     13849>>ASSIGN
EPROGTOOBIG
     12197**DCL     13914>>ASSIGN
ERESTRICTED
     12245**DCL     13837>>ASSIGN
ERR
        34**DCL     13534<<ASSIGN  13537<>CALL    13630<>CALL    13648<>CALL    13653<>CALL    13999<>CALL
     14008<>CALL    14017<>CALL    14020<>CALL    14135<>CALL    14139<>CALL    14141<>CALL    14281<>CALL
     14285<>CALL    14354<>CALL    14354<>CALL    14362<>CALL    14370<>CALL    14370<>CALL    14378<>CALL
     14386<>CALL    14386<>CALL    14391<>CALL    14403<>CALL    14536<>CALL    14723>>ASSIGN  14736<>CALL
ERR_217
     13639**LABEL   13653--CALLALT 13669--GOTO    13698--GOTO
ES_PRIVMASK
      2279**DCL     14625>>ASSIGN
ETCBSZBAD
     12285**DCL     13985>>ASSIGN
F$DCB.ACCT
      6551**DCL     13614<<ASSIGN
F$DCB.ACTPOS
      6566**DCL      6566--REDEF
F$DCB.ARS
      6541**DCL      6541--REDEF   13658>>IF
F$DCB.ASN
      6556**DCL     13625<<ASSIGN
F$DCB.ATTR
      6559**DCL      6560--REDEF
F$DCB.BORROW
      6574**DCL      6574--REDEF    6574--REDEF    6574--REDEF
F$DCB.DCBNAME.L
      6588**DCL      6588--IMP-SIZ
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:248  
F$DCB.EOMCHAR
      6545**DCL      6545--REDEF
F$DCB.EXPIRE
      6557**DCL     13631>>ASSIGN
F$DCB.FFLG.DELF
      6546**DCL     13935>>IF      13939>>IF
F$DCB.FFLG.EXEC
      6546**DCL     13769>>IF      13772<<ASSIGN
F$DCB.FLDID
      6569**DCL      6569--REDEF
F$DCB.FORM$
      6563**DCL      6563--REDEF
F$DCB.FSECT
      6579**DCL      6579--REDEF
F$DCB.FSN
      6556**DCL      6556--REDEF    6556--REDEF    6557--REDEF
F$DCB.FUN
      6555**DCL     13624<<ASSIGN
F$DCB.HEADER$
      6562**DCL      6562--REDEF
F$DCB.IXTNSIZE
      6560**DCL      6560--REDEF
F$DCB.LASTSTA$
      6550**DCL      6550--REDEF
F$DCB.LVL
      6575**DCL      6575--REDEF
F$DCB.NAME.C
      6550**DCL      6550--REDEF   13613<<ASSIGN
F$DCB.NAME.L
      6550**DCL     13612<<ASSIGN  13613>>ASSIGN
F$DCB.NOEOF
      6571**DCL      6571--REDEF
F$DCB.NRECS
      6561**DCL      6561--REDEF
F$DCB.NRECX
      6580**DCL      6580--REDEF
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:249  
F$DCB.OHDR
      6572**DCL      6572--REDEF
F$DCB.ORG
      6555**DCL      6555--REDEF   13636>>IF
F$DCB.PASS
      6551**DCL     13616<<ASSIGN  13617<<ASSIGN
F$DCB.PASSF
      6553**DCL     13621<<ASSIGN
F$DCB.PRECNO
      6578**DCL      6578--REDEF
F$DCB.PSN
      6551**DCL     13619<<ASSIGN  13620<<ASSIGN  14177>>IF
F$DCB.RCSZ
      6583**DCL      6583--REDEF
F$DCB.RES
      6551**DCL      6551--REDEF   13622<<ASSIGN
F$DCB.SETX
      6563**DCL      6563--REDEF
F$DCB.TAB$
      6562**DCL      6563--REDEF
F$DCB.TDA
      6577**DCL      6577--REDEF
F$DCB.WSN
      6552**DCL      6552--REDEF   13623<<ASSIGN
F$DCB.WSR
      6558**DCL     13626<<ASSIGN  13628<<ASSIGN
FMF$TRUNCM
        98**DCL-ENT 14317--CALL
FMM$ASSMRG
        97**DCL-ENT 14601--CALL
FPT$RESCTL
      7625**DCL     13732--ASSIGN  13733<<ASSIGN  13742<>CALL
FPT$RESCTL.PSEUDO_
      7625**DCL     13735<<ASSIGN
FPT$RESCTL.V
      7627**DCL     13734--ASSIGN
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:250  
FPT$RESCTL.V_
      7625**DCL     13734<<ASSIGN
FR_SUMX
      2280**DCL     13720>>DOINDEX
FR_SUNM
      2281**DCL     13721>>IF
HFC$LOCK
       955**DCL-ENT 13542--CALL    14522--CALL    14759--CALL    14957--CALL
HFC$UNLOCK
       955**DCL-ENT 13546--CALL    14207--CALL    14215--CALL    14250--CALL    14526--CALL    14763--CALL
     14961--CALL
HW_WSQ0PT
       994**DCL     14917>>IF      14923>>IF      14934>>IF
I
        21**DCL     14085<<DOINDEX 14086>>ASSIGN  14126<<ASSIGN  14127>>ASSIGN  14129<<DOINDEX 14130>>ASSIGN
     14133>>ASSIGN  14295<<DOINDEX 14296>>ASSIGN  14746<<DOINDEX 14868<<DOINDEX 14879>>ASSIGN  14915<<DOINDEX
     14916>>ASSIGN  14918>>ASSIGN  14920>>ASSIGN  14921>>IF      14924>>ASSIGN  14926>>ASSIGN
INIT_ROSIZE
        36**DCL     13528<<ASSIGN  13969>>ASSIGN  13983>>IF      14008>>CALL    14037>>ASSIGN  14042>>ASSIGN
     14096>>ASSIGN  14110>>ASSIGN  14742>>ASSIGN  14744>>ASSIGN  14796>>ASSIGN  14819>>ASSIGN
INIT_TCB
     14788**PROC    14078--CALL    14550--CALL
INST
     14198**LABEL   14194--CALLALT
INSTALL_PROC
     14912**PROC    14399--CALL
JSA$ASL
        62**DCL-ENT 14362--CALL
JSA$CLIB
        63**DCL-ENT 14378--CALL
JSA$DB
        64**DCL-ENT 14391--CALL    14528--CALL
JSA$FINDAUTO
        70**DCL-ENT 14194--CALL
JSA$FINDSSP
        69**DCL-ENT 13537--CALL    14354--CALL    14370--CALL    14386--CALL
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:251  
JSA$GETTCB
        65**DCL-ENT 14480--CALL
JSA$INSERTPROC
        68**DCL-ENT 14892--CALL
JSA$MAP_DATASEGS
        67**DCL-ENT 14484--CALL    14675--CALL
JSA$RUNDSPC
        66**DCL-ENT 14478--CALL
JSD$DELUSR
        57**DCL-ENT 13571--CALL    14436--CALL
JSE$ABORTM
        58**DCL-ENT 13508--CALL    14608--CALL    14770--CALL
JSF$CLSLM
        76**DCL-ENT 13610--CALL
JSF$DCBCHK
        80**DCL-ENT 14111--CALL
JSF$OPENLM
        75**DCL-ENT 13630--CALL
JSF$READ
        78**DCL-ENT 13653--CALL    14008--CALL    14020--CALL    14285--CALL
JSF$READ_DS
        79**DCL-ENT 14139--CALL
JSN$LTRAS
       100**DCL-ENT 14649--CALL
JSR$RUNDOWN
       105**DCL-ENT 13561--CALL    13570--CALL
JSS$BACKSS
        99**DCL-ENT 14693--CALL
JSS$INITSS
        77**DCL-ENT 14329--CALL    14535--CALL
JST$ABORTM1
     14761**LABEL   14528--CALLALT 14750--GOTO
JST$FETCH
     14248**LABEL   14189--GOTO    14199--GOTO    14217--GOTO
JST$USERGO
     14558**LABEL   14407--GOTO
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:252  
JSU$RSTLMS
        60**DCL-ENT 13480--CALL
JSU$SP_GETFREE
        72**DCL-ENT 14851--CALL    14869--CALL
JSU$WSTAR
        74**DCL-ENT 13815--CALL    14338--CALL    14561--CALL
JS_SHARE_ALL
      2262**DCL     14177>>IF      14177>>IF
J_FPT_RESCTL
      7658**DCL     13733>>ASSIGN
J_LOGON.NAME
      2288**DCL     14431>>IF      14435>>IF
J_PLOCK
      2283**DCL     13542<>CALL    13546<>CALL    14207<>CALL    14215<>CALL    14250<>CALL    14522<>CALL
     14526<>CALL    14759<>CALL    14763<>CALL    14957<>CALL    14961<>CALL
J_SYS$
      2285**DCL     14354<>CALL    14370<>CALL    14386<>CALL
J_SYSTXT
      2284**DCL     13516>>IF
LMDCB$
        46**DCL     13611<<ASSIGN  13612>>ASSIGN  13613>>ASSIGN  13613>>ASSIGN  13614>>ASSIGN  13616>>ASSIGN
     13617>>ASSIGN  13619>>ASSIGN  13620>>ASSIGN  13621>>ASSIGN  13622>>ASSIGN  13623>>ASSIGN  13624>>ASSIGN
     13625>>ASSIGN  13626>>ASSIGN  13628>>ASSIGN  13631>>ASSIGN  13636>>IF      13658>>IF      13769>>IF
     13772>>ASSIGN  13935>>IF      13939>>IF      14177>>IF
LPTR$
        41**DCL      7642--IMP-PTR 13732<<ASSIGN  13735>>ASSIGN  13736>>ASSIGN  13737>>ASSIGN  13738>>ASSIGN
     13739>>ASSIGN  13749>>ASSIGN  13750>>ASSIGN  14127<<ASSIGN  14137>>ASSIGN  14144<<ASSIGN  14144>>ASSIGN
M$MLIMIT
       107**DCL-ENT 13742--CALL
MM$BYP.AUTOINUSE
     12026**DCL     14234<<ASSIGN  14234>>ASSIGN  14959<<ASSIGN  14959>>ASSIGN
MM$BYP.AUTOP
     12026**DCL     14235<<ASSIGN  14235>>ASSIGN
MM$DESC.BASE
     12106**DCL     14799<<ASSIGN
MM$DESC.BOUND
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:253  
     12104**DCL     12105--REDEF   14802<<ASSIGN
MM$DESC.FLGS
     12105**DCL     12105--REDEF   14633<<ASSIGN  14633>>ASSIGN  14638<<ASSIGN  14638>>ASSIGN  14806<<ASSIGN
     14806>>ASSIGN
MM$IPHY_MAP
     11220**DCL     14918>>ASSIGN  14924>>ASSIGN  14935>>ASSIGN  14936>>ASSIGN
MM$PPUT.PNUM
     12093**DCL     14931<<ASSIGN
MM$PPUT.PPNO
     12093**DCL     14924<<ASSIGN  14926<<ASSIGN  14928<<ASSIGN
MM$PPUT.PRC
     12092**DCL     14930<<ASSIGN
MM$PPUT.USER
     12092**DCL     14929<<ASSIGN
MM$PPUT.USER#
     12093**DCL     12093--REDEF
MME$WFVP
        83**DCL-ENT 14403--CALL    14736--CALL
MME$WGVP
        84**DCL-ENT 13648--CALL
MMG$SGVP
        82**DCL-ENT 13999--CALL    14017--CALL    14281--CALL    14536--CALL
MMH$GDS
        85**DCL-ENT 14135--CALL
MMH$SMPRT
        86**DCL-ENT 14141--CALL
MM_BYP$
     12024**DCL     12024--IMP-PTR 14234>>ASSIGN  14234>>ASSIGN  14235>>ASSIGN  14235>>ASSIGN  14959>>ASSIGN
     14959>>ASSIGN
MODTIME
        33**DCL     13631<<ASSIGN  14195>>IF      14857>>ASSIGN
NAME$
        12**DCL         9--PROC    12327--IMP-PTR 13494--ENTRY   13503>>IF      13504<<ASSIGN  13505>>IF
     13520>>IF      13537<>CALL    13612>>ASSIGN  13613>>ASSIGN  14194<>CALL    14431>>IF      14431>>IF
     14624>>IF      14858>>ASSIGN  14859>>ASSIGN  14892<>CALL
NEVER_DECRD
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:254  
     13544**LABEL   13540--GOTO
NONE_AVAIL IN PROCEDURE ADD_SHARED
     14897**LABEL   14851--CALLALT 14869--CALLALT
NOOVER
        22**DCL     14041<<ASSIGN  14065<<ASSIGN  14065>>ASSIGN  14868>>DOINDEX
NOSHARE
     14188**LABEL   14198--CALLALT
NO_ASSMRG
     14618**LABEL   14593--GOTO    14597--GOTO
PAGES
        40**DCL     13969<<ASSIGN  13970>>IF      13976>>IF      13999<>CALL    14016<<ASSIGN  14017<>CALL
PASS$
        14**DCL         9--PROC    13494--ENTRY   13615>>IF      13617>>ASSIGN
PNUM
        42**DCL     13533<<ASSIGN  13537<>CALL    13544>>ASSIGN  13544>>ASSIGN  13588>>IF      14194<>CALL
     14195>>IF      14197>>ASSIGN  14202>>IF      14204>>IF      14213>>ASSIGN  14231>>ASSIGN  14246>>ASSIGN
     14257>>CALL    14447>>IF      14475>>IF      14480<>CALL    14484<>CALL    14490>>ASSIGN  14495>>ASSIGN
     14495>>ASSIGN  14499>>ASSIGN  14500>>ASSIGN  14500>>ASSIGN  14501>>ASSIGN  14502>>ASSIGN  14524>>ASSIGN
     14524>>ASSIGN  14528<>CALL    14674<<ASSIGN  14675<>CALL    14729>>ASSIGN  14730>>ASSIGN  14761>>ASSIGN
     14761>>ASSIGN  14848<<ASSIGN  14851<>CALL    14854>>ASSIGN  14867>>ASSIGN  14892<>CALL    14897>>ASSIGN
     14898>>ASSIGN  14931>>ASSIGN  14933>>ASSIGN  14953>>ASSIGN
PROC$
        47**DCL     14231<<ASSIGN  14232>>IF      14234>>ASSIGN  14235>>ASSIGN  14237>>ASSIGN  14237>>ASSIGN
     14247>>ASSIGN  14247>>ASSIGN  14248>>ASSIGN  14854<<ASSIGN  14855>>ASSIGN  14856>>ASSIGN  14857>>ASSIGN
     14858>>ASSIGN  14859>>ASSIGN  14859>>ASSIGN  14860>>ASSIGN  14861>>ASSIGN  14863>>ASSIGN  14863>>ASSIGN
     14865>>ASSIGN  14866>>ASSIGN  14871<<ASSIGN  14874>>ASSIGN  14875>>ASSIGN  14876>>ASSIGN  14877>>ASSIGN
     14877>>ASSIGN  14878>>ASSIGN  14879>>ASSIGN  14880>>ASSIGN  14881>>ASSIGN  14882>>ASSIGN  14883>>ASSIGN
     14884>>ASSIGN  14933<<ASSIGN  14935>>ASSIGN  14936>>ASSIGN  14939>>ASSIGN  14940>>ASSIGN  14944>>ASSIGN
     14945>>ASSIGN  14948>>ASSIGN  14954>>ASSIGN  14955>>CALL    14959>>ASSIGN
PSEUDO_END
     13757**LABEL   13753--GOTO
PSN$
        15**DCL         9--PROC    13494--ENTRY   13618>>IF      13620>>ASSIGN
PTYPE
        43**DCL     13532<<ASSIGN  13537<>CALL    13540>>IF      13558>>IF      13567>>IF      14353<<ASSIGN
     14354<>CALL    14369<<ASSIGN  14370<>CALL    14385<<ASSIGN  14386<>CALL    14423>>IF      14460>>IF
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:255  
     14469>>IF      14597>>IF
RECSIZE
        39**DCL     14007<<ASSIGN  14008<>CALL    14020<>CALL    14125<<ASSIGN  14139<>CALL
REFIND
     14194**LABEL   14210--GOTO
REST_OF_ROS IN PROCEDURE INIT_TCB
     14789**DCL     14812<<ASSIGN
ROSZ
        37**DCL     14077<<ASSIGN  14549<<ASSIGN  14794>>IF      14795<<ASSIGN  14795>>ASSIGN  14796>>ASSIGN
     14819>>ASSIGN
RPROC_ERR
     13832**LABEL   13833--GOTO
S$CU$
      3472**DCL     13469>>ASSIGN  13469>>ASSIGN  13496>>ASSIGN  13496>>ASSIGN  13789>>ASSIGN  13789>>ASSIGN
     14177>>IF      14246>>ASSIGN  14431>>IF      14435>>IF      14475>>IF      14477>>ASSIGN  14499>>ASSIGN
     14503>>ASSIGN  14503>>ASSIGN  14590>>IF      14597>>IF      14618>>ASSIGN  14618>>ASSIGN  14635>>IF
     14646>>IF      14665>>ASSIGN  14665>>ASSIGN  14670>>IF      14674>>ASSIGN  14687>>IF      14943>>ASSIGN
     14953>>ASSIGN
SEGSIZE
        38**DCL     13964<<ASSIGN  13969>>ASSIGN  14006<<ASSIGN  14008<>CALL    14019<<ASSIGN  14020<>CALL
     14130<<ASSIGN  14131>>IF      14134<<ASSIGN  14134>>ASSIGN  14135<>CALL    14136<<ASSIGN  14136>>ASSIGN
     14139<>CALL
SHARED_FLAG
        24**DCL     13519<<ASSIGN  13523<<ASSIGN  14063<<ASSIGN  14177>>IF      14188<<ASSIGN  14241<<ASSIGN
     14292>>IF      14397>>IF      14725>>IF
SSC$ACPENT
        93**DCL-ENT 14650--CALL
SSC$MON
        94**DCL-ENT 13811--CALL    14584--CALL
SSC$SERV
        95**DCL-ENT 13813--CALL    14586--CALL
SSP_ERR
     14747**LABEL   13598--GOTO    14426--GOTO    14438--GOTO    14450--GOTO    14464--GOTO    14480--CALLALT
SSQ$NUQUAN
        96**DCL-ENT 13812--CALL    14585--CALL
SSR$REG
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:256  
        87**DCL-ENT 14209--CALL    14580--CALL
SSS$SYSTIME
       106**DCL-ENT 14257--CALL    14955--CALL
SSU$DELTAGO
        92**DCL-ENT 14704--CALL
SYSFLAG
        23**DCL     13517<<ASSIGN  13518<<ASSIGN  13522<<ASSIGN  13535>>IF      13928>>IF      13934>>IF
     14322>>IF      14333>>IF      14862>>IF
TCBSZ
        35**DCL     14076<<ASSIGN  14548<<ASSIGN  14793<<ASSIGN  14793>>ASSIGN  14797>>ASSIGN  14817>>ASSIGN
     14819>>ASSIGN
TEMP1
        25**DCL     13720<<DOINDEX 13721>>IF      13723>>IF      13739>>ASSIGN  13968<<ASSIGN  13969>>ASSIGN
     13976>>IF      13999<>CALL    14037<<ASSIGN  14038>>ASSIGN  14057>>ASSIGN  14083<<ASSIGN  14084<<ASSIGN
     14085>>DOINDEX 14092<<ASSIGN  14093>>DOINDEX 14099>>DOINDEX 14099>>DOINDEX 14128<<ASSIGN  14135<>CALL
     14139<>CALL    14141<>CALL    14143<<ASSIGN  14143>>ASSIGN  14275<<ASSIGN  14276>>IF      14278>>ASSIGN
     14285<>CALL    14328<<ASSIGN  14329<>CALL    14403<>CALL    14534<<ASSIGN  14535<>CALL    14536<>CALL
     14736<>CALL    14796<<ASSIGN  14799>>ASSIGN  14808<<ASSIGN  14808>>ASSIGN  14809>>ASSIGN  14811>>ASSIGN
     14819<<ASSIGN  14820>>ASSIGN  14826>>ASSIGN  14867<<ASSIGN  14872>>ASSIGN  14873<<ASSIGN  14918<<ASSIGN
     14920<<ASSIGN  14924>>ASSIGN  14926>>ASSIGN  14928>>ASSIGN  14929>>ASSIGN  14930>>ASSIGN  14931>>ASSIGN
TEMP2
        26**DCL     14047<<ASSIGN  14048>>IF      14048>>IF      14056<<DOINDEX 14058>>IF      14093<<DOINDEX
     14094>>ASSIGN  14096>>ASSIGN  14099<<DOINDEX 14100>>ASSIGN  14133<<ASSIGN  14141<>CALL    14278<<ASSIGN
     14281<>CALL    14283<<ASSIGN  14285<>CALL    14294<<ASSIGN  14295>>DOINDEX 14790--IMP-SIZ 14797<<ASSIGN
     14802>>ASSIGN  14811<<ASSIGN  14812>>ASSIGN  14820<<ASSIGN  14824>>IF      14828>>ASSIGN  14869<>CALL
     14871>>ASSIGN  14872>>ASSIGN  14873>>ASSIGN  14914<<ASSIGN  14915>>DOINDEX 14921>>IF      14936>>ASSIGN
     14940>>ASSIGN
TEMP3
        27**DCL        28--REDEF      29--REDEF      32--REDEF   14094<<ASSIGN  14279<<ASSIGN  14281<>CALL
     14284>>ASSIGN
TEMP3$
        32**DCL     14096>>ASSIGN
TEMP3_PTR.SEGID
        31**DCL     14095>>IF
TPTR$
        45**DCL      7625--IMP-PTR 13677<<ASSIGN  13678>>ASSIGN  13680>>ASSIGN  13681>>ASSIGN  13682>>ASSIGN
PL6.E3A0      #001=JST$CPEXIT File=JST$STEP.:E05TSI                              TUE 07/29/97 23:49 Page:257  
     13683>>ASSIGN  13684>>ASSIGN  13685>>ASSIGN  13686>>ASSIGN  13687>>ASSIGN  13688>>ASSIGN  13689>>ASSIGN
     13690>>ASSIGN  13691>>ASSIGN  13692>>ASSIGN  13731<<ASSIGN  13732>>ASSIGN  13733>>ASSIGN  13734>>ASSIGN
     13734>>ASSIGN  13735>>ASSIGN  13742>>CALL    14046<<ASSIGN  14047>>ASSIGN  14048>>IF      14057>>ASSIGN
     14057>>ASSIGN  14059>>ASSIGN  14060>>ASSIGN  14062>>IF      14066<<ASSIGN  14066>>ASSIGN  14066>>ASSIGN
     14745<<ASSIGN  14747>>ASSIGN  14748<<ASSIGN  14748>>ASSIGN  14809<<ASSIGN  14810>>ASSIGN  14812>>ASSIGN
     14813>>ASSIGN  14814>>ASSIGN  14815>>ASSIGN  14816>>ASSIGN  14817>>ASSIGN  14817>>ASSIGN  14818>>ASSIGN
     14864<<ASSIGN  14864>>ASSIGN  14876>>ASSIGN  14877>>ASSIGN  14885<<ASSIGN  14885>>ASSIGN  14885>>ASSIGN
UDB$AUTO
        91**DCL-ENT 14710--CALL
UDN$MAGIC
       101**DCL-ENT 13468--CALL
UDN$MAGICSS
       102**DCL-ENT 14695--CALL
UMD$CHKOPN
       103**DCL-ENT 14603--CALL
UMD$CLSDRIB
       104**DCL-ENT 13497--CALL
VLP$PS
      7642**DCL     13735--ASSIGN  13736<<ASSIGN
VLP$PS.NN#
      7642**DCL     13737<<ASSIGN
VLP$PS.PSLIST.NUM#
      7644**DCL     13739<<ASSIGN  13750>>ASSIGN
VLP$PS.PSLIST.PSEUDO#
      7644**DCL     13738<<ASSIGN  13749>>ASSIGN
