VERSION E05

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:1    
        1        1        /*M* VXT$PRE - does pre-processing for pass 2. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
        8        8        VXT$PRE: PROC;
        9        9
       10       10        %INCLUDE VX_INC_C;
       11    10726        %VX$NODE;

             10738    1   /*******************************************************************************
             10739    1   *                                                                              *
             10740    1   *                          VX$NODE                                                 *
             10741    1   *                                                                              *
             10742    1   *******************************************************************************/

             10758    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10759    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10760    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10761    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10762    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10763    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10764                              to list of file nodes for this node            */
             10765    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10766    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10766                  /* Head pointer to shared library list */
             10767    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10767                  /* Head pointer to list of shared libraries
             10768                                          which have been mapped to included libraries */
             10769    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10770    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10771    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10772    1         2 ADDR_START REDEF  ADDR_START_A,
             10773    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10774    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:2    
             10775    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10776    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10777    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10778    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10779    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10780    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10781    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10782    1         2 START_PAGE# REDEF START_PAGE#_A,
             10783    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10784    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10785    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10786    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10787    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10788    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10789    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10790    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10791    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10791                  /* Starting pointer for common sections for this node */
             10792    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10792                  /* Stopping pointer for common sections for this node */
             10793    1         2 L_START,
             10794    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10795    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10796    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10797    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10798    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10799    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10800    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10801    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10802    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10803    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10804    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10805    1         2 L_STOP,
             10806    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10807    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10808    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10809    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:3    
             10810    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10811    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10812    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10813    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10814    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10815    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10816    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10817    1         2 L_SIZE,
             10818    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10819    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10820    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10821    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10822    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10823    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10824    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10825    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10826    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10827    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10828    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10829    1         2 L_PREV_SIZE,
             10830    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10831    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10832    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10833    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10834    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10835    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10836    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10837    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10838    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10839    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10840    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10841    1         2 BIT_MAP                ALIGNED,
             10842    1           3 DATA                  ALIGNED,
             10843    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10844    1           3 RPROC                 ALIGNED,
             10845    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10846    1           3 ROS                   ALIGNED,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:4    
             10847    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10848    1         2 L_SC_START,
             10849    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10850    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10851    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10852    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10853    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10854    1         2 L_SC_STOP,
             10855    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10856    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10857    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10858    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10859    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10860    1         2 PROMOTE_HEAD,
             10861    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10862    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10863    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10864    1         2 PROMOTE_TAIL,
             10865    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10866    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10867    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10868    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10869    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10870    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10871    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10872    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       12    10876        %VX$SC;

             10889    1   /*******************************************************************************
             10890    1   *                                                                              *
             10891    1   *                          VX$SC                                                 *
             10892    1   *                                                                              *
             10893    1   *******************************************************************************/

             10898    1   DCL 1 VX$SC BASED ALIGNED,
             10899    1         2 SEG UBIN(3) UNAL,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:5    
             10900                /*K*  SEG - The segment number of this section */
             10901    1         2 TYPE UBIN(6) UNAL,
             10902                /*K*  TYPE -
             10903                      Type code      Section type
             10904                      ---------      ------------
             10905                          0          Data control section with write access.
             10906                          1          Procedure control section.
             10907                          2          Unlabeled common, name pointer must be zero.
             10908                          3          Labeled common, with mandatory name pointer.
             10909                                     This is for labeled common which must be
             10910                                     in the root.
             10911                          4          Labeled common, with mandatory name pointer.
             10912                                     This is for labeled common which need not
             10913                                     be in the root.
             10914                          5          DCB, word 1 is name pointer.
             10915                          6          Data control section with read only access,
             10916                                     word 1 = 0 or name pointer.      */
             10917    1         2 EMPTY BIT(1) UNAL,
             10918                /*K*  EMPTY is the empty bit.  This bit is set if the control
             10919                      section is of size zero.  */
             10920    1         2 ATTR UNAL,
             10921    1           3 INT  UBIN(2) UNAL,
             10922                  /*K*  INT is the Section initialization.  */
             10923    1           3 SEGMENT BIT(1) UNAL,
             10924                  /*K* SEGMENT is set if the Section is defined in a data
             10925                       segment.  */
             10926    1           3 ALL BIT(1) UNAL,
             10927                  /*K*  ALL is set if the Section is allocated.  */
             10928    1           3 PRE_DCB BIT(1) UNAL,
             10929                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             10930    1           3 MES_INIT BIT(1) UNAL,
             10931    1           3 ALIGN UBIN(2) UNAL,
             10932                  /*K*  ALIGN is the Section alignment.  */
             10933    1         2 ADDRESS UBIN HALF UNAL,
             10934                /*K*  ADDRESS is the address within the Instruction Segment of
             10935                      the entry point of the external procedure.  */
             10936    1         2 NAME_DISP SBIN HALF UNAL,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:6    
             10937                /*K*  NAME_DISP is the Name index.  */
             10938    1         2 SIZE UBIN HALF UNAL,
             10939                /*K*  SIZE is the size, in words, of the section.  */
             10940    1         2 NODE# UBIN HALF UNAL,
             10941                /*K*  NODE# is the Node number of section.  */
             10942    1         2 COM_LINK UBIN HALF UNAL;
             10943                /*K*  COM_LINK is used internally by linker to link common sections */

             10953    1   /*******************************************************************************
             10954    1   *                                                                              *
             10955    1   *                          VX$SECT                                                 *
             10956    1   *                                                                              *
             10957    1   *******************************************************************************/

             10962    1   DCL 1 VX$SECT BASED ALIGNED,
             10963    1         2 TYPE UBIN BYTE UNAL,
             10964                /*K*  TYPE -
             10965                      Type code      Section type
             10966                      ---------      ------------
             10967                          0          Data control section with write access.
             10968                          1          Procedure control section.
             10969                          2          Unlabeled common, name pointer must be zero.
             10970                          3          Labeled common, with mandatory name pointer.
             10971                                     This is for labeled common which must be
             10972                                     in the root.
             10973                          4          Labeled common, with mandatory name pointer.
             10974                                     This is for labeled common which need not
             10975                                     be in the root.
             10976                          5          DCB, word 1 is name pointer.
             10977                          6          Data control section with read only access,
             10978                                     word 1 = 0 or name pointer.
             10979                          7          Constant labeled common, with mandatory name pointer.
             10980                                     This is for labeled common which must be
             10981                                     in the root.
             10982                          8          Constant labeled common, with mandatory name pointer.
             10983                                     This is for labeled common which need not
             10984                                     be in the root.                        */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:7    
             10985    1         2 * BIT(1),
             10986                /*K*  * is reserved for future use and must be zero. */
             10987    1         2 INITZERO BIT(1),
             10988                /*K*  INITZERO - if 1, initialize with zero.  */
             10989    1         2 INITUTS BIT(1),
             10990                /*K*  INITUTS - if 1, initialize with UTS.  */
             10991    1         2 SEGMENT BIT(1),
             10992                /*K*  SEGMENT - if 1, specifies that this section is
             10993                                to be placed in the segment specified by
             10994                                SEG_NPOINTER.  */
             10995    1         2 * BIT(3),
             10996                /*K*  * is reserved for future use and must be zero. */
             10997    1         2 BOUND UBIN(2) UNAL,
             10998                /*K*  BOUND - bits 6-7 - defines starting location.
             10999                              00 - starts on even word
             11000                              01 - starts on odd word
             11001                              10 - starts on multiple of 8
             11002                              11 - starts on page boundary     */
             11003    1         2 SIZE UBIN HALF UNAL,
             11004                /*K*  SIZE is the size, in words, of the section.  */
             11005    1         2 NPOINTER SBIN HALF UNAL,
             11006                /*K*  NPOINTER is the word displacement into the name record
             11007                      (TYPE 1) locating the name of this section.  If the
             11008                      field is negative, the section has no name.  */
             11009    1         2 MBZ UBIN HALF UNAL,
             11010                /*K*  MBZ is reserved for future expansion and must be zero. */
             11011    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11012                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11013                      Section.  The name must be a valid segment name
             11014                      recognized by the linker.  */
             11015    1         2 G66 REDEF MBZ,
             11016                /*K*  G66 is not used on CP-6. */
             11017    1           3 * BIT(9),
             11018    1           3 NSAB BIT(9);
       13    11021        %VX$SECTNUM;

             11034    1   /*******************************************************************************
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:8    
             11035    1   *                                                                              *
             11036    1   *                          VX$SECTNUM                                              *
             11037    1   *                                                                              *
             11038    1   *******************************************************************************/

             11043    1   DCL 1 VX$SECTNUM ALIGNED BASED,
             11044    1         2 NEXT$ PTR,
             11045    1         2 SECT#    UBIN HALF HALIGNED,
             11046    1         2 NPOINTER UBIN HALF HALIGNED,
             11047    1         2 NODE#    UBIN HALF HALIGNED,
             11048    1         2 RU_SECT# UBIN HALF HALIGNED;
       14    11051        %VXD$TMPLT(SEGDEF=YES,EDEF=YES);

             11064    1   /*******************************************************************************
             11065    1   *                                                                              *
             11066    1   *                          VXD$TMPLT                                               *
             11067    1   *                                                                              *
             11068    1   *******************************************************************************/

             11072        /*
             11073                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11074                  ENTDEFs, SYMDEFs and SEGDEFs.
             11075        */
             11077    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11078    1         2 VALUE SBIN UNAL,
             11079                /*K*  VALUE is the value if this entry is a constant.  */
             11080    1         2 AD REDEF VALUE,
             11081                /*K*  AD is the address if this entry is not constant.  */
             11082    1           3 LFLAGS UNAL,
             11083                  /*K*  LFLAGS is the field reserved for loader to flag load
             11084                        time attributes of the definition and must be zero
             11085                        in the object unit. */
             11086    1             4 SOURCE UBIN(3) UNAL,
             11087                    /*K*  SOURCE - Source of this DEF */
             11088    1             4 DEFINED BIT(1) UNAL,
             11089                    /*K*  DEFINED - Set if this DEF defined */
             11090    1             4 MULTIPLE BIT(1) UNAL,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:9    
             11091                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11092    1             4 USED BIT(1) UNAL,
             11093                    /*K*  USED - Set if this DEF is used. */
             11094    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11095                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11096                        than 2048 (RU).  */
             11097    1           3 SECTNUM UBIN(11) UNAL,
             11098                  /*K*  SECTNUM contains an entry number into the section
             11099                        table (TYPE 3).  */
             11100    1           3 ISADDR UBIN HALF UNAL,
             11101                  /*K*  ISADDR - Is Address (RU)  */
             11102    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11103                  /*K*  OFFSET is the word offset from the origin of the section. */
             11104    1         2 NPOINTER SBIN HALF UNAL,
             11105                /*K*  NPOINTER is a word displacement into the name record
             11106                      (TYPE 1) locating the name (of this entry). */
             11107    1         2 CONSTNT BIT(1) UNAL,
             11108                /*K*  CONSTNT is a flag bit to determine the interpretation
             11109                      of word 0.
             11110                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11111                                    SECTNUM, and ISADDR or OFFSET.
             11112                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11113    1         2 LFLAGS UNAL,
             11114                /*K*  LFLAGS is the field reserved for loader to flag load
             11115                      time attributes and must be zero in the object unit. */
             11116    1           3 MULTIPLE BIT(1) UNAL,
             11117                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11118    1           3 USED BIT(1) UNAL,
             11119                  /*K*  USED - Set if this DEF is used. */
             11120    1           3 SOURCE UBIN(4) UNAL,
             11121                  /*K*  SOURCE - Source of this DEF */
             11122    1           3 IS_DCB BIT(1) UNAL,
             11123                  /*K* IS_DCB - Set if this is a DCB */
             11124    1           3 * BIT(10) UNAL,
             11125                  /*K*  * is reserved for future use and must be zero.  */
             11126    1         2 PROTECTION REDEF LFLAGS,
             11127                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:10   
             11128    1           3 TYPE UBIN(5) UNAL,
             11129                  /*K*  TYPE is the Protection type.  */
             11130    1           3 * UBIN(12) UNAL;
             11131                  /*K*  * is reserved for future use and must be zero.  */

             11142    1   /*******************************************************************************
             11143    1   *                                                                              *
             11144    1   *                          B$EDEF                                                 *
             11145    1   *                                                                              *
             11146    1   *******************************************************************************/

             11151    1   DCL 1 B$EDEF BASED ALIGNED,
             11152    1         2 LFLAGS UNAL,
             11153                /*K*  LFLAGS is the field reserved for loader to flag load
             11154                      time attributes of the definition and must be zero
             11155                      in the object unit. */
             11156    1           3 SOURCE UBIN(3) UNAL,
             11157                  /*K*  SOURCE - Source of this ENTDEF */
             11158    1           3 DEFINED BIT(1)  UNAL,
             11159                  /*K*  DEFINED - Set if this ENTDEF defined */
             11160    1           3 MULTIPLE BIT(1) UNAL,
             11161                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             11162    1           3 USED BIT(1) UNAL,
             11163                  /*K*  USED - Set if this ENTDEF is used. */
             11164    1           3 * BIT(2) UNAL,
             11165                  /*K*  * - Unused and must be zero. */
             11166    1           3 FAULTAGS BIT(1) UNAL,
             11167                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             11168    1         2 OU UNAL,
             11169    1           3 SECTNUM UBIN BYTE UNAL,
             11170                  /*K*  SECTNUM contains an entry number into the section
             11171                        table (TYPE 3).  */
             11172    1           3 OFFSET UBIN HALF UNAL,
             11173                  /*K*  OFFSET is the word offset from the origin of the section. */
             11174    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             11175                /*K*  ISADDR - Is Address (RU)  */
             11176    1         2 NPOINTER SBIN HALF UNAL,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:11   
             11177                /*K*  NPOINTER is a word displacement into the name record
             11178                      (TYPE 1) locating the name (of this entry). */
             11179    1         2 PRI BIT(1) UNAL,
             11180                /*K*  PRI is a one-bit flag denoting primary entry
             11181                      definition.
             11182                         PRI = 1, primary name (object unit name)
             11183                             = 0, not primary name                 */
             11184    1         2 ALT BIT(1) UNAL,
             11185                /*K*  ALT is a one-bit flag denoting permissible alternate
             11186                      return.
             11187                         ALT = 1, alternate return allowed
             11188                             = 0, alternate return not allowed        */
             11189    1         2 CHECK BIT(1) UNAL,
             11190                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             11191                      check and alternate return specification check.
             11192                         CHECK = 0, do not check for matching
             11193                                    arguments/parameters and alternate
             11194                                    return specification check.
             11195                               = 1, check for matching arguments/parameters
             11196                                    and alternate return specification.  */
             11197    1         2 CST UBIN(4) UNAL,
             11198                /*K*  CST is a 4-bit field denoting calling sequence type.
             11199                         CST =  0, Standard CP-6 Callable Procedure
             11200                         CST =  1, Nonstandard Call Type
             11201                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11202                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11203                         CST =  4, Standard CP-6 Function Procedure; a
             11204                                   variable table entry will be present to
             11205                                   define the attributes of the function
             11206                         CST =  5, Same as 0, except USE, AVOID, or
             11207                                   MATERIALIZE attributes specified
             11208                         CST =  7, Same as 2, except USE, AVOID, or
             11209                                   MATERIALIZE attributes specified
             11210                         CST =  8, Same as 3, except USE, AVOID, or
             11211                                   MATERIALIZE attributes specified
             11212                         CST =  9, Same as 4, except USE, AVOID, or
             11213                                   MATERIALIZE attributes specified
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:12   
             11214                         CST = 13, GCOS domain, save
             11215                         CST = 14, GCOS domain, no save
             11216                         CST = 15, Non-Callable Procedure.          */
             11217    1         2 NPARAM UBIN(11) UNAL;
             11218                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             11234    1   /*******************************************************************************
             11235    1   *                                                                              *
             11236    1   *                          B$SEGDEF                                                *
             11237    1   *                                                                              *
             11238    1   *******************************************************************************/

             11243    1   DCL 1 B$SEGDEF BASED ALIGNED,
             11244    1         2 VALUE SBIN UNAL,
             11245                /*K*  VALUE is the value of the constant segment definition
             11246                      pointer if CONSTANT=1.  */
             11247    1         2 S REDEF VALUE,
             11248    1           3 * UBIN(24) UNAL,
             11249    1           3 SEGID UBIN(12) UNAL,
             11250                  /*K*  SEGID - Segid of constant value */
             11251    1         2 AD REDEF VALUE,
             11252                /*K*  AD - Address (not constant )  */
             11253    1           3 LFLAGS UNAL,
             11254                  /*K*  LFLAGS is the field reserved for loader to flag load
             11255                        time attributes of the definition and must be zero
             11256                        in object unit.  */
             11257    1             4 SOURCE UBIN(3) UNAL,
             11258                    /*K*  SOURCE - Source of this SEGDEF */
             11259    1             4 DEFINED BIT(1) UNAL,
             11260                    /*K*  DEFINED - Set if this SEGDEF is defined */
             11261    1             4 MULTIPLE BIT(1) UNAL,
             11262                    /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11263    1             4 USED BIT(1) UNAL,
             11264                    /*K*  USED - Set if this SEGDEF is used */
             11265    1             4 * BIT(3) UNAL,
             11266                    /*K*  * is reserved for future use and must be zero. */
             11267    1           3 OU UNAL,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:13   
             11268    1             4 SECTNUM UBIN BYTE UNAL,
             11269                    /*K*  SECTNUM is the Section number.  */
             11270    1             4 OFFSET UBIN HALF UNAL,
             11271                    /*K*  OFFSET is the offset within section. */
             11272    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11273                  /*K*  ISADDR - IS Address (RU)  */
             11274    1         2 NPOINTER SBIN HALF UNAL,
             11275                /*K*  NPOINTER is the word displacement into DEFNAMES record. */
             11276    1         2 CONSTNT BIT(1) UNAL,
             11277                /*K*  CONSTNT is a flag bit to determine the interpretation
             11278                      of word 0.
             11279                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11280                                    SECTNUM, and ISADDR or OFFSET.
             11281                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11282    1         2 LFLAGS UNAL,
             11283                /*K*  LFLAGS is the field reserved for loader to flag load time
             11284                      attributes and must be zero in the object unit.  */
             11285    1           3 MULTIPLE BIT(1) UNAL,
             11286                  /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11287    1           3 USED BIT(1) UNAL,
             11288                  /*K*  USED - Set if this SEGDEF is used */
             11289    1           3 SOURCE UBIN(4) UNAL,
             11290                  /*K*  SOURCE - Source of this SEGDEF */
             11291    1           3 * BIT(11) UNAL,
             11292                  /*K*  * is reserved for future use and must be zero. */
             11293    1         2 SEG REDEF LFLAGS UNAL,          /* Not constant SEGDEF (RU) */
             11294    1           3 TYPE UBIN(5) UNAL,            /* Segment protection type (RU) */
             11295    1           3 SEGID UBIN(12) UNAL;          /* Segid of segment (RU) */
       15    11299        %VXR$TMPLT;

             11312    1   /*******************************************************************************
             11313    1   *                                                                              *
             11314    1   *                          VXR$TMPLT                                               *
             11315    1   *                                                                              *
             11316    1   *******************************************************************************/

             11321    1   DCL 1 VXR$TMPLT BASED ALIGNED,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:14   
             11322    1         2 NPOINTER SBIN HALF UNAL,
             11323                /*K*  NPOINTER is the word index to the symbol name.  */
             11324    1         2 SREF BIT(1) UNAL,
             11325                /*K*  SREF is set is this is a secondary reference.  */
             11326    1         2 READ_ONLY BIT(1) UNAL,
             11327    1         2 GOT BIT(1) UNAL,
             11328                /*K*  GOT is set if got the OU name displacement.  */
             11329    1         2 STATE REDEF GOT BIT(1) UNAL,
             11330    1         2 OPOINTER UBIN(15) UNAL;
             11331                /*K*  OPOINTER is the word index to the OU name.  */

             11353    1   /*******************************************************************************
             11354    1   *                                                                              *
             11355    1   *                          VXR$SAT                                                 *
             11356    1   *                                                                              *
             11357    1   *******************************************************************************/

             11361    1   DCL 1 VXR$SAT                 ALIGNED   BASED,
             11362    1         2 VALUE        UBIN(36)  ALIGNED,
             11363    1         2 SEG   REDEF  VALUE,
             11364    1           3 OFFSET     UBIN(18)  UNAL,
             11365    1           3 *          BIT(6)    UNAL,
             11366    1           3 SEGID      UBIN(12)  UNAL,
             11367    1         2 BELOW        BIT(1)    UNAL,
             11368    1         2 *            BIT(17)   UNAL,
             11369    1         2 NODE#        UBIN(18)  UNAL;
       16    11371        %TMPLT;

             11383    1   /*******************************************************************************
             11384    1   *                                                                              *
             11385    1   *                          TMPLT                                                 *
             11386    1   *                                                                              *
             11387    1   *******************************************************************************/

             11392    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11393    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11394    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:15   
             11395    1         2 W       REDEF     A,            /* By name                            */
             11396    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11397    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       17    11400        %VX$WORD;

             11412    1   /*******************************************************************************
             11413    1   *                                                                              *
             11414    1   *                          VX$WORD                                                 *
             11415    1   *                                                                              *
             11416    1   *******************************************************************************/

             11421    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             11422    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             11423    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             11424    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             11425        /**/
             11426    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             11427    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             11428    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             11429    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
       18    11432        %SET LISTMAC='1'B;
       19    11433        %SET LISTSUB='1'B;
       20    11434        %SET LISTEXP='1'B;
       21    11435        %BANNER(ARG=SUBS);
             11436        %LSET LISTDIR='0'B;

             11443    1   /*******************************************************************************
             11444    1   *                                                                              *
             11445    1   *                          SUBS                                                 *
             11446    1   *                                                                              *
             11447    1   *******************************************************************************/

       22    11451        %B$RECORDSUBS;
             11452        %EQU TYPHEAD=0 ;
             11453        %EQU TYPDNAM=1 ;
             11454        %EQU TYPRNAM=2 ;
             11455        %EQU TYPSECT=3 ;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:16   
             11456        %EQU TYPEDEF=4 ;
             11457        %EQU TYPEREF=5 ;
             11458        %EQU TYPSDEF=6 ;
             11459        %EQU TYPSREF=7 ;
             11460        %EQU TYPSEGDEF=8 ;
             11461        %EQU TYPSEGREF=9 ;
             11462        %EQU TYPPROG=10 ;
             11463        %EQU SUBTYPPROG=0 ;
             11464        %EQU SUBTYPREL=1 ;
             11465        %EQU TYPLOGBLK=11 ;
             11466        %EQU TYPINTNTRY=12 ;
             11467        %EQU TYPEXST=13 ;
             11468        %EQU TYPVREBL=14 ;
             11469        %EQU TYPDBGNAM=15 ;
             11470        %EQU TYPLV1LB=16 ;
             11471        %EQU TYPLV1=17 ;
             11472        %EQU TYPDATASEG=18 ;
             11473        %EQU TYPRUM=20 ;
             11474        %EQU TYPBIRTH=21 ;
             11475        %EQU TYPPLOVER=22 ;
             11476        %EQU TYPCOMPID=23 ;
             11477        %EQU TYPROS=30 ;
       23    11479        %B$SECTIONSUBS;
             11480        %EQU DATASECTION=0 ;
             11481        %EQU CODESECTION=1 ;
             11482        %EQU UCOMSECTION=2 ;
             11483        %EQU RLCOMSECTION=3 ;
             11484        %EQU LCOMSECTION=4 ;
             11485        %EQU DCBSECTION=5 ;
             11486        %EQU ROSECTION=6 ;
             11487        %EQU RORLCOMSECTION=7 ;
             11488        %EQU ROLCOMSECTION=8 ;
             11489        %EQU EVENBOUNDSECTION=0 ;
             11490        %EQU ODDBOUNDSECTION=1 ;
             11491        %EQU EIGHTBOUNDSECTION=2 ;
             11492        %EQU PAGEBOUNDSECTION=3 ;
       24    11494        %BANNER(ARG=B$DNAME);
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:17   
             11495        %LSET LISTDIR='0'B;

             11502    1   /*******************************************************************************
             11503    1   *                                                                              *
             11504    1   *                          B$DNAME                                                 *
             11505    1   *                                                                              *
             11506    1   *******************************************************************************/

       25    11510        %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11511            %LSET STR='BASED        ';
             11512            %IF
             11513                '0'B;
             11515            %ELSE;
             11516                %LSET INIT=/*;
             11517            %ENDIF;
             11518    1   DCL 1 B$DNAME BASED ALIGNED,
             11519    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11520                /*K*  COUNT is the number of characters in the name */
             11521            %IF
             11522                '0'B;
             11525            %ELSE;
             11526    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11527            %ENDIF;
       26    11529        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER,NODE_NAME=VX$TREE_NODE);
             11530    1   DCL 1 VX$TREE_HEADER BASED ALIGNED,
             11531              /*K*  HDR_NAME is the Tree table header.  */
             11532    1         2 NODES UBIN HALF UNAL,
             11533                /*K*  NODES is the number of nodes in the tree table.  */
             11534    1         2 SIZE UBIN HALF UNAL,
             11535                /*K*  SIZE is the total word size of the tree table
             11536                      (HDR + NODES + TEST pool).   */
             11537    1         2 LIB$ PTR,
             11538                /*K*  LIB$ is the pointer to the name of the shared library
             11539                      currently associated.  */
             11540    1         2 PRECSIZE UBIN HALF UNAL,
             11541                /*K*  PRECSIZE  is the maximum program record size in the
             11542                      Run Unit (from the Head record).  */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:18   
             11543    1         2 MAX_LIB_DATA UBIN HALF UNAL;
             11544                /*K*  MAX_LIB_DATA is the maximum reserved in the program
             11545                      image for the shared library data.  */
             11546    1   DCL 1 VX$TREE_NODE BASED ALIGNED,
             11547              /*K*  NODE_NAME is the node specification.  */
             11548    1         2 NAME$ PTR,
             11549                /*K*  NAME$ is the pointer to the name of the node.  */
             11550    1         2 FLGS,
             11551                /*K*  FLGS are control flags used by M$OLAY.  */
             11552    1           3 NOW_IN BIT(1) UNAL,
             11553                  /*K*  NOW_IN is set if this node is now in memory.  */
             11554    1           3 WAS_IN BIT(1) UNAL,
             11555                  /*K*  WAS_IN is set if this node was in memory.  */
             11556    1           3 * BIT(7) UNAL,
             11557                  /*K*  * is reserved for future use and must be zero.  */
             11558    1         2 AFLGS,
             11559                /*K*  AFLGS are access flags.  */
             11560    1           3 * BIT(6) UNAL,
             11561                  /*K*  * is reserved for future use and must be zero.  */
             11562    1           3 NOPATH BIT(1) UNAL,
             11563                  /*K*  NOPATH is set if this node is independently loaded
             11564                        (no backward path).  */
             11565    1           3 ENTER BIT(1) UNAL,
             11566                  /*K*  ENTER is set if ENTRY$ is valid.  */
             11567    1           3 CANCEL BIT(1) UNAL,
             11568                  /*K*  CANCEL is set if the overlay was removed by
             11569                        "CANCEL=YES".   */
             11570    1         2 BACK# SBIN HALF UNAL,
             11571                /*K*  BACK# is the backward link (parent).  */
             11572    1         2 FORWARD# SBIN HALF UNAL,
             11573                /*K*  FORWARD# is the forward link (daughter).  */
             11574    1         2 OVERLAY# SBIN HALF UNAL,
             11575                /*K*  OVERLAY# is the overlay link (same level).   */
             11576    1         2 PADDR UBIN HALF UNAL,
             11577                /*K*  PADDR is the address of procedure.  */
             11578    1         2 PSIZE UBIN HALF UNAL,
             11579                /*K*  PSIZE is the size of procedure.  */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:19   
             11580    1         2 DADDR UBIN HALF UNAL,
             11581                /*K*  DADDR is the address of data.  */
             11582    1         2 DSIZE UBIN HALF UNAL,
             11583                /*K*  DSIZE is the size of data.  */
             11584    1         2 ENTRY$ EPTR;
             11585                /*K*  ENTRY$ is the overlay entry point (see ENTER).  */
       27    11587        /**/
       28    11588        /**/
       29    11589        /**/
       30    11590        %VX$BREF;
             11591    1   DCL 1 VX$BREF                    ALIGNED     BASED (VX_NEXT_BREF$),
             11592    1         2 WORD_A(0:1)       UBIN(36)  ALIGNED,
             11593    1         2 I  REDEF     WORD_A         ALIGNED,
             11594    1           3 WORD0            UBIN(36)  ALIGNED,
             11595    1           3 WORD1            UBIN(36)  ALIGNED;
       31    11597        %VX$DCB;
             11598        %BANNER( ARG=VX$DCB );
             11599        %LSET LISTDIR='0'B;

             11606    1   /*******************************************************************************
             11607    1   *                                                                              *
             11608    1   *                          VX$DCB                                                 *
             11609    1   *                                                                              *
             11610    1   *******************************************************************************/

             11614        %LIST;
             11615    1   DCL 1 VX$DCB                       ALIGNED   BASED,
             11616    1         2 * CHAR( VX_DCB_SIZEC);
             11617        /* End of actual DCB; now for NAME: Just one word in this description */
             11618        /* Dcb name description */
             11619    1   DCL 1 VX$DCB$T$C                   ALIGNED   BASED,
             11620    1         2 LOGICAL_DCB_NUM             UBIN(3)   UNAL,
             11621    1         2 INT                         BIT(1)    UNAL,      /* '1'=> no relocation
             11622                                                                        '0' => relocation */
             11623    1         2 COUNT                       UBIN(5)   UNAL,
             11624    1         2 CHARS                       CHAR( VX$DCB$T$C.COUNT ) UNAL;
       32    11626        %PLIST;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:20   
       33    11627        %F$DCB;
       34    11684        %SET LISTSUB='1'B;
       35    11685        %E;

             11693    1   /*******************************************************************************
             11694    1   *                                                                              *
             11695    1   *                          ENTRY                                                 *
             11696    1   *                                                                              *
             11697    1   *******************************************************************************/

       36    11701        %ENTRIES;
       37    11716        %ENTRIES_IO;
       38    11724    1   DCL VXU$MERGE       ENTRY(10);
       39    11725    1   DCL VXU$SETUP            ENTRY(5);
       40    11726    1   DCL VXU$PAGEOUT          ENTRY(3);
       41    11727    1   DCL VXU$FIND_SECTNUM      ENTRY(4);
       42    11728        %PTR;

             11736    1   /*******************************************************************************
             11737    1   *                                                                              *
             11738    1   *                          PTR                                                 *
             11739    1   *                                                                              *
             11740    1   *******************************************************************************/

       43    11744        %POINTER;
       44    11749    1   DCL CURR$           PTR ALIGNED    AUTO;
       45    11750    1   DCL ICURR$          PTR ALIGNED    AUTO;
       46    11751    1   DCL DCB_CURR$       PTR ALIGNED    AUTO;
       47    11752    1   DCL DN_ROOT_START$  PTR ALIGNED    AUTO;
       48    11753    1   DCL WHERE$          PTR  ALIGNED   AUTO;
       49    11754    1   DCL NEXT$           PTR  ALIGNED   AUTO;
       50    11755    1   DCL T$              PTR  ALIGNED   AUTO;
       51    11756    1   DCL NODE$           PTR  ALIGNED   AUTO;
       52    11757    1   DCL NAME$           PTR ALIGNED    AUTO;
       53    11758    1   DCL N$              PTR ALIGNED    AUTO;
       54    11759    1   DCL SC_START$       PTR ALIGNED    AUTO;
       55    11760    1   DCL SC_BASE$        PTR ALIGNED    AUTO;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:21   
       56    11761    1   DCL FIRST_START$    PTR ALIGNED    AUTO;
       57    11762    1   DCL FIRST_STOP$     PTR ALIGNED    AUTO;
       58    11763    1   DCL STOP$           PTR  ALIGNED   AUTO;
       59    11764    1   DCL BUF$            PTR  ALIGNED   AUTO;
       60    11765        %VX$PTR$;
       61    11769        %U;

             11777    1   /*******************************************************************************
             11778    1   *                                                                              *
             11779    1   *                          UBIN                                                 *
             11780    1   *                                                                              *
             11781    1   *******************************************************************************/

       62    11785        %INDEX;
       63    11795    1   DCL RTYPE           UBIN(36)  ALIGNED   AUTO;
       64    11796    1   DCL J1              UBIN(36)  ALIGNED   AUTO;
       65    11797    1   DCL MX              UBIN(36)  ALIGNED   AUTO;
       66    11798    1   DCL SAT_MX          UBIN(36)  ALIGNED   AUTO;
       67    11799    1   DCL NEXT            UBIN(36)  ALIGNED   AUTO;
       68    11800    1   DCL TREE_TABLE_SIZE UBIN(36)  ALIGNED   AUTO;
       69    11801    1   DCL STOP            UBIN(36)  ALIGNED   AUTO;
       70    11802    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
       71    11803    1   DCL VALUE           UBIN(36)  ALIGNED   AUTO;
       72    11804    1   DCL BUFTYP          UBIN(36)  ALIGNED   AUTO;
       73    11805    1   DCL NODE#           UBIN(36)  ALIGNED   AUTO;
       74    11806    1   DCL SECTNUM         UBIN(36)  ALIGNED   AUTO;
       75    11807    1   DCL SC_IDX          UBIN(36)  ALIGNED   AUTO;
       76    11808    1   DCL NPOINTER        UBIN(36)  ALIGNED   AUTO;
       77    11809    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       78    11810    1   DCL S_SIZE          UBIN(36)  ALIGNED   AUTO;
       79    11811    1   DCL C_SIZE          UBIN(36)  ALIGNED   AUTO;
       80    11812    1   DCL I_SIZE          UBIN(36)  ALIGNED   AUTO;
       81    11813        %S;

             11821    1   /*******************************************************************************
             11822    1   *                                                                              *
             11823    1   *                          SBIN                                                 *
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:22   
             11824    1   *                                                                              *
             11825    1   *******************************************************************************/

       82    11829    1   DCL ADR             SBIN WORD ALIGNED AUTO;
       83    11830    1   DCL DIFF            SBIN WORD ALIGNED AUTO;
       84    11831        %BIN_SEARCH_TEMPS(
       85    11832                   LOW=BIN_LOW,
       86    11833                   HIGH=BIN_HIGH,
       87    11834                   START1$=BIN_START1$,
       88    11835                   MID=BIN_MID,
       89    11836                   NTEMP$=BIN_NTEMP$);
       90    11843        %BIN_SEARCH_VARS(
       91    11844                   START$=BIN_START$,
       92    11845                   STOP$=BIN_STOP$,
       93    11846                   RESULT$=BIN_RESULT$,
       94    11847                   N$=BIN_N$,
       95    11848                   MATCH$=BIN_MATCH$,
       96    11849                   NAME_DISP=BIN_NAME_DISP,
       97    11850                   SIZE=BIN_SIZE);
       98    11859        %IMAGE_BUFFERS( NAME=VX$IMAGE, STCLASS="BASED(VX_IMAGE$)");
       99    11882        %MOVE_PAGE_DCL;
      100    11889        %MOVE_TMPLT;
      101    11895        %PLIST;
      102    11896        %SET LISTEXP='0'B;
      103    11897    1   DCL 1 B$VERSION ALIGNED BASED,
      104    11898    1         2 COUNT UBIN BYTE UNAL,
      105    11899    1         2 TEXT CHAR(6) UNAL;
      106    11900    1   DCL DONE BIT(1);
      107    11901        %EJECT;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:23   
      108    11902    1         VX_PASS = 2;
      109    11903    1         VX_PHRASE.I.PASS = '2';
      110    11904    1         BIN_START$ = ADDR( VX_SD );
      111    11905    1         BIN_STOP$ = VX_SD_STOP$;
      112    11906    1         BIN_N$ = ADDR( VX_SN );
      113    11907    2         DO I = 0 TO SIZEW( VX_SPC.SEG.NAME_A$ ) - 1;
      114    11908    2             T$ = VX_SPC.SEG.NAME_A$(I);
      115    11909                  %BIN_SEARCH(
      116    11910                  START$=BIN_START$,
      117    11911                  STOP$=BIN_STOP$,
      118    11912                  RESULT$=BIN_RESULT$,
      119    11913                  N$=BIN_N$,
      120    11914                  MATCH$=T$,
      121    11915                  NAME_DISP=2,
      122    11916                  SIZE="SIZEW(VXD$TMPLT)",
      123    11917                  SPLIT=BIN_SPLIT,
      124    11918                  CHECK=BIN_CHECK,
      125    11919                  ALTRETURN=NOT_FOUND,
      126    11920                  EMPTY=NOT_FOUND);
             11922    2           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND;
             11923    3           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;
             11924    3              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             11925    4              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             11926    4                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             11927    4                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             11928    4                   >=
             11929    5                   T$ -> B$DNAME.TEXT THEN DO;
             11930    5                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             11931    5                      =
             11932    5                      T$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND;
             11933    5                    ELSE GOTO NOT_FOUND;
             11934    5                    END;
             11935    4                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );
             11936    4                 END;                      /* Do while                           */
             11937    3              GOTO NOT_FOUND;
             11938    3              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             11939    3           ELSE DO;                        /* Binary search                      */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:24   
             11940    3              BIN_LOW = 0;
             11941    3              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
             11942    3              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );
             11943    3   BIN_SPLIT:     ;
             11944    3              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             11945    3              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );
             11946    3              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             11947    3              IF BIN_NTEMP$ -> B$DNAME.TEXT
             11948    3                <
             11949    4                T$ -> B$DNAME.TEXT THEN DO;
             11950    4                 BIN_LOW = BIN_MID;
             11951    4                 GOTO BIN_CHECK;
             11952    4                 END;
             11953    3              IF BIN_NTEMP$ -> B$DNAME.TEXT
             11954    3                >
             11955    4                T$ -> B$DNAME.TEXT THEN DO;
             11956    4                 BIN_HIGH = BIN_MID;
             11957    4   BIN_CHECK:        ;
             11958    4                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT;
             11959                                                /* Here => looping or not found       */
             11960                                      /* Result -> < match => a boundary condition    */
             11961    4                 %@COMMENT
             11962    4                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             11963    4                   <
             11964    4                   T$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             11964                            VXD$TMPLT) );
             11965    4                 %@TNEMMOC
             11966    4                   GOTO NOT_FOUND;
             11967    4                 END;
             11968    3              END;                         /* Else do;                           */
             11969    2   BIN_FOUND:
             11970        /* Here -> found */
      127    11972        /*Here => found */
      128    11973    2             VX_SPC.SEG.VALUE_A(I) = BIN_RESULT$ -> B$SEGDEF.VALUE;
      129    11974    2            END;
      130    11975    2         DO WHILE( '0'B );
      131    11976    2   NOT_FOUND:
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:25   
      132    11977        /* Here we are in a bloody mess */
      133    11978        /*E*  ERROR: VXT-E$INTERNAL_SEGID_VX-0
      134    11979              MESSAGE: Internal LINK error. Cannot find segment name: %U1.
      135    11980              DESCRIPTION: Self-explanatory.
      136    11981        */
      137    11982    2             VX_EFIELD1.CHARS = T$ -> B$DNAME.TEXT;
      138    11983    2             VX_EFIELD1.COUNT = T$ -> B$DNAME.COUNT;
      139    11984                  %SCREAM( ERR#=E$INTERNAL_SEGID_VX, LEVEL=@E$F_VX, MID="'T'" );
      140    11987                  %ERROR_IT;
      141    11990    2            END;                           /* Do never */
      142    11991        /* Allocate image formation buffers */
      143    11992    2         DO I = 0 TO SIZEW(VX_IMAGE_PTR$)-1;
      144    11993    2             P$ = VX_IMAGE_PTR$(I);
      145    11994    2             IF I = 2/*@ROS*/ AND NOT VX_ROS_ALLOWED THEN GOTO SKIP_BUF_ALLOCATION;
      146    11995    2             IF I >= 3/*@DATA_SEGMENT*/
      147    11996    2             THEN SIZE = VX_SEG_SIZE(I-3);
      148    11997    2             ELSE SIZE = VX_EADR(I) - VX_BADR(I) + 1;
      149    11998    2             IF SIZE <= 0 THEN GOTO SKIP_BUF_ALLOCATION;
      150    11999    2             IF SIZE <= 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/
      151    12000    2             THEN L = SIZEW( VX$IMAGE.START_A$ ) - 2;
      152    12001    2             ELSE L = SIZEW( VX$IMAGE.START_A$ ) - 1;
      153    12002    3             DO J = 0 TO L;
      154    12003                      %ALLOCATE(
      155    12004                      PTR$=WHERE$,
      156    12005                      TYPE=@SC_DS_2,
      157    12006                      SIZE=@BUF_SIZE);
      158    12013    3                 P$ -> VX$IMAGE.START_A$(J) = WHERE$;
      159    12014    3                 P$ -> VX$IMAGE.STOP_A$(J) = PINCRW( WHERE$, 1024
             12014                          /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ - 1 );
      160    12015    3                END;                       /* Do j */
      161    12016    2   SKIP_BUF_ALLOCATION:
      162    12017    2            END;                           /* Do i */
      163    12018
      164    12019        %PLIST;
      165    12020
      166    12021    2         DO I = 0 TO 5;
      167    12022    2             VX_SEG_EPAGE#(I) = VX_SEG_SIZE(I) / 1024
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:26   
             12022                      /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      168    12023    2            END;
      169    12024
      170    12025    1         IF VX_ROOT$ -> VX$NODE.ADDR_START.ROS > 0 THEN
      171    12026    1             VX_ROOT$ -> VX$NODE.START_PAGE#.ROS =
      172    12027    1                     VX_ROOT$ -> VX$NODE.ADDR_START.ROS / 1024
             12027                              /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      173    12028    1         ELSE VX_ROOT$ -> VX$NODE.START_PAGE#.ROS = -1;
      174    12029
      175    12030    1         IF VX_ROOT$ -> VX$NODE.ADDR_STOP.ROS > 0 THEN
      176    12031    1             VX_ROOT$ -> VX$NODE.STOP_PAGE#.ROS =
      177    12032    1                     VX_ROOT$ -> VX$NODE.ADDR_STOP.ROS / 1024
             12032                              /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      178    12033    1         ELSE VX_ROOT$ -> VX$NODE.STOP_PAGE#.ROS = -1;
      179    12034    1         I = VX_PROGRAM_BIAS.I.DATA;
      180    12035        /* Now initialize dcbs */
      181    12036    2         IF VX_DCB_START$ ~= ADDR(NIL) AND VX_EADR(2/*@ROS*/) - VX_BADR(2/*@ROS*/) + 1
             12036                  > 0 THEN DO;
      182    12037    2             J = POFFW( VX_DCB_STOP$, VX_DCB_START$ ) / SIZEW( VX$SC ) + 1;
      183    12038    2             CALL VXU$SETUP( WHERE$, 2/*@ROS*/, I, J, 0 );
      184    12039    2             DCB_CURR$ = VX_DCB_START$;
      185    12040    3             DO WHILE( DCB_CURR$ <= VX_DCB_STOP$ );
      186    12041    4                 IF NOT DCB_CURR$ -> VX$SC.ATTR.PRE_DCB THEN DO;
      187    12042    4                     WHERE$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE.ROS;
      188    12043    4                     WHERE$ -> VX$HALF_A(0) = DCB_CURR$ -> VX$SC.ADDRESS;
      189    12044    4                     WHERE$ = PINCRW( WHERE$, SIZEW( WHERE$ ) );
      190    12045    4                    END;       /* If ~DCB_CURR$ -> VX$SC.ATTR.PRE_DCB then do; */
      191    12046    3                 DCB_CURR$ = PINCRW( DCB_CURR$, SIZEW( VX$SC ) );
      192    12047    3                END;                   /* Do while( DCB_CURR$ <= VX_DCB_STOP$ ); */
      193    12048    2             DCB_CURR$ = VX_DCB_START$;
      194    12049    2             DN_ROOT_START$ = VX_ROOT$ -> VX$NODE.L_START.DN$;
      195    12050    3             DO WHILE( DCB_CURR$ <= VX_DCB_STOP$ );
      196    12051    4                 IF NOT DCB_CURR$ -> VX$SC.ATTR.PRE_DCB THEN DO;
      197    12052    4                     K = DCB_CURR$ -> VX$SC.ADDRESS;
      198    12053    4                     L = DCB_CURR$ -> VX$SC.SIZE;
      199    12054    4                     CALL VXU$SETUP( WHERE$, 2/*@ROS*/, K, L, 0 );
      200    12055        /* Now have dcb all set up */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:27   
      201    12056    4                     WHERE$ -> VX$DCB = VX_CONST_DCB;
      202    12057    4                     Q$ = PINCRW( DN_ROOT_START$, DCB_CURR$ -> VX$SC.NAME_DISP );
      203    12058    4                     WHERE$ -> F$DCB.DCBNAME = '0'B;
      204    12059    4                     WHERE$ -> F$DCB.DCBNAME.S = '1'B; /* Set no inits */
      205    12060    4                     WHERE$ -> F$DCB.DCBNAME.L = Q$ -> B$DNAME.COUNT;
      206    12061    4                     WHERE$ -> F$DCB.DCBNAME.N = Q$ -> B$DNAME.TEXT;
      207    12062    5                     DO K = 0 TO SIZEW( VX_O.DCB_MATCH_A$ ) - 1;
      208    12063    5                         P$ = VX_O.DCB_MATCH_A$(K);
      209    12064    6                         IF P$ ~= ADDR(NIL) AND NOT VX_OD.NODCB_A(K) THEN DO;
      210    12065    7                             IF P$ -> B$DNAME.TEXT = Q$ -> B$DNAME.TEXT THEN DO;
      211    12066    7                                 WHERE$ -> F$DCB.DCBNAME.X = K + 1;
      212    12067    7                                 VX_O.DCB_MATCH_HIT_A(K) = '1'B/*@TRUE_B*/;
      213    12068    7                                END;       /* If P$ -> B$DNAME.TEXT = ... */
      214    12069    6                            END;           /* If P$ ~= addr(nil) then do; */
      215    12070    5                        END;   /* Do k = 0 to sizew( VX_O.DCB_MATCH_A$ ) - 1; */
      216    12071    4                    END;       /* If ~DCB_CURR$ -> VX$SC.ATTR.PRE_DCB then do; */
      217    12072    3                 DCB_CURR$ = PINCRW( DCB_CURR$, SIZEW( VX$SC ) );
      218    12073    3                END;                       /* Do while */
      219    12074    2            END;                       /* If VX_DCB_START$ ~= addr(nil) then do; */
      220    12075    1         K = VX_RU_HEAD.DCBRES;
      221    12076    2         IF K > 0 THEN DO;                 /* Init reserved pointer slots */
      222    12077    2             IF VX_OD.NUM.DBIAS AND VX_SLIB_INIT$ = ADDR(NIL)
      223    12078    2             THEN I = 0;
      224    12079    2             CALL VXU$SETUP( WHERE$, 2/*@ROS*/, I+J, K, 0 );
      225    12080    2             K = K - 1;
      226    12081    3             DO L = 0 TO K;
      227    12082    3                 WHERE$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE.NUL;
      228    12083    3                 WHERE$ = PINCRW( WHERE$, SIZEW( WHERE$ ) );
      229    12084    3                END;                       /* Do l = 0 to k */
      230    12085    2            END;                           /* If k > 0 then do; */
      231    12086    1         VX_CURR$ = VX_ROOT$;
      232    12087    2         DO WHILE( '1'B );
      233    12088    2             IF VX_CURR$ -> VX$NODE.ADDR_START.RDATA > 0 THEN
      234    12089    2                 VX_CURR$ -> VX$NODE.START_PAGE#.RDATA =
      235    12090    2                         VX_CURR$ -> VX$NODE.ADDR_START.RDATA / 1024
             12090                                  /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      236    12091    2             ELSE VX_CURR$ -> VX$NODE.START_PAGE#.RDATA = -1;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:28   
      237    12092        /**/
      238    12093    2             IF VX_CURR$ -> VX$NODE.ADDR_STOP.RDATA > 0 THEN
      239    12094    2                 VX_CURR$ -> VX$NODE.STOP_PAGE#.RDATA =
      240    12095    2                         VX_CURR$ -> VX$NODE.ADDR_STOP.RDATA / 1024
             12095                                  /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      241    12096    2             ELSE VX_CURR$ -> VX$NODE.STOP_PAGE#.RDATA = -1;
      242    12097        /**/
      243    12098    2             IF VX_CURR$ -> VX$NODE.ADDR_START.RPROC > 0 THEN
      244    12099    2                 VX_CURR$ -> VX$NODE.START_PAGE#.RPROC =
      245    12100    2                         VX_CURR$ -> VX$NODE.ADDR_START.RPROC / 1024
             12100                                  /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      246    12101    2             ELSE VX_CURR$ -> VX$NODE.START_PAGE#.RPROC = -1;
      247    12102        /**/
      248    12103    2             IF VX_CURR$ -> VX$NODE.ADDR_STOP.RPROC > 0 THEN
      249    12104    2                 VX_CURR$ -> VX$NODE.STOP_PAGE#.RPROC =
      250    12105    2                         VX_CURR$ -> VX$NODE.ADDR_STOP.RPROC / 1024
             12105                                  /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      251    12106    2             ELSE VX_CURR$ -> VX$NODE.STOP_PAGE#.RPROC = -1;
      252    12107    2             VX_CURR$ -> VX$NODE.ADDR_START.ROS = VX_ROOT$ -> VX$NODE.ADDR_START.ROS;
      253    12108    2             VX_CURR$ -> VX$NODE.ADDR_STOP.ROS  = VX_ROOT$ -> VX$NODE.ADDR_STOP.ROS;
      254    12109    2             VX_CURR$ -> VX$NODE.START_PAGE#.ROS = VX_ROOT$ -> VX$NODE.START_PAGE#.ROS;
      255    12110    2             VX_CURR$ -> VX$NODE.STOP_PAGE#.ROS  = VX_ROOT$ -> VX$NODE.STOP_PAGE#.ROS;
      256    12111
      257    12112
      258    12113    3             IF VX_CURR$ -> VX$NODE.ALL_BLK_COM THEN DO;
      259    12114    3                 P$ = VX_CURR$ -> VX$NODE.BLANK_COMMON$;
      260    12115    4                 DO CASE( P$ -> VX$SC.ATTR.INT );
      261    12116    4                   CASE(1);
      262    12117    4                     VALUE = VX_LINK_UTS;
      263    12118    4                     GOTO INT_BLK_COM;
      264    12119    4                   CASE(2);
      265    12120    4                     VALUE = 0;
      266    12121    4   INT_BLK_COM:
      267    12122    4                     SIZE = P$ -> VX$SC.SIZE;
      268    12123    5                     IF SIZE > 0 THEN DO;  /* Make sure its not empty */
      269    12124        /**/
      270    12125    5                         ADR = P$ -> VX$SC.ADDRESS;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:29   
      271    12126    5                         NODE# = P$ -> VX$SC.NODE#;
      272    12127    5                         ADR = ADR - 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      273    12128    6                         DO WHILE( SIZE > 0 );
      274    12129    6                             ADR = ADR + 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      275    12130    6                             IF SIZE >= 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ THEN
             12130                                      S_SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      276    12131    6                             ELSE S_SIZE = SIZE;
      277    12132    6                             SIZE = SIZE - S_SIZE;
      278    12133        /* Set up at most 1 @BUF_SIZE in buffers */
      279    12134    6                             CALL VXU$SETUP( WHERE$, 0/*@DATA*/, ADR, S_SIZE, NODE# );
      280    12135        /*Now set init conditions */
      281    12136    6                             WHERE$ -> VX$WORD_A(0) = VALUE;
      282    12137    6                             NEXT$ = PINCRW( WHERE$, 1 );
      283    12138    6                             C_SIZE = 1;
      284    12139    6                             S_SIZE = S_SIZE - 1;
      285    12140        /* Now do exponential initialization routine */
      286    12141    7                             DO WHILE( S_SIZE > 0 );
      287    12142    7                                 IF C_SIZE < S_SIZE THEN I_SIZE = C_SIZE;
      288    12143    7                                 ELSE I_SIZE = S_SIZE;
      289    12144    7                                 S_SIZE = S_SIZE - I_SIZE;
      290    12145    7                                 VX_TARGET_COUNT = I_SIZE * 4/*@CHAR_WORD*/;
      291    12146    7                                 VX_SOURCE_COUNT = VX_TARGET_COUNT;
      292    12147    7                                 NEXT$ -> VX$TARGET_C = WHERE$ -> VX$SOURCE_C;
             12147                                          /* Do the move */
      293    12148    7                                 NEXT$ = PINCRW( NEXT$, I_SIZE );
      294    12149    7                                 C_SIZE = C_SIZE + I_SIZE;
      295    12150    7                                END;       /* Do while( S_SIZE > 0 ); */
      296    12151    6                            END;           /* Do while( size > 0 ); */
      297    12152    5                        END;               /* If size > 0 then do; */
      298    12153    4                   END;                    /* Do case( P$ -> VX$SC.ATTR.INT ); */
      299    12154    3                END;           /* If VX_CURR$ -> VX$NODE.ALL_BLK_COM then do; */
      300    12155    2             P$ = VX_CURR$ -> VX$NODE.L_START.SC$;
      301    12156    3             IF P$ ~= ADDR(NIL) THEN DO;
      302    12157    3                 Q$ = VX_CURR$ -> VX$NODE.L_STOP.SC$;
      303    12158    4                 DO WHILE ( P$ <= Q$ );
      304    12159    5                     DO CASE( P$ -> VX$SC.ATTR.INT );
      305    12160    5                       CASE(1);            /* Init with uts */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:30   
      306    12161    5                         VALUE = VX_LINK_UTS;
      307    12162    5                         GOTO CONTINUE_INIT;
      308    12163    5                       CASE(2);            /* Init with 0 */
      309    12164    5                         VALUE = 0;
      310    12165    5   CONTINUE_INIT:
      311    12166    5                         SIZE = P$ -> VX$SC.SIZE;
      312    12167    6                         IF SIZE > 0 THEN DO; /* Make sure its not empty */
      313    12168    7                             DO CASE( P$ -> VX$SC.TYPE );
             12168                                      /* Map to appropriate buffer */
      314    12169    7                               CASE( %DATASECTION,%LCOMSECTION,%RLCOMSECTION );
      315    12170    7                                 IF P$ -> VX$SC.ATTR.SEGMENT
      316    12171    7                                 THEN BUFTYP = 3/*@DS3*/ + VX_SEGID( P$ -> VX$SC.SEG )
             12171                                          - VX_SEGID(0/*@DS3SID*/);
      317    12172    7                                 ELSE BUFTYP = 0/*@DATA*/;
      318    12173    7                               CASE( %CODESECTION );
      319    12174    7                                 BUFTYP = 1/*@PROC*/;
      320    12175    7                               CASE( %ROSECTION,%ROLCOMSECTION,%RORLCOMSECTION );
      321    12176    7                                 IF P$ -> VX$SC.ATTR.SEGMENT
      322    12177    7                                 THEN BUFTYP = 3/*@DS3*/ + VX_SEGID( P$ -> VX$SC.SEG )
             12177                                          - VX_SEGID(0/*@DS3SID*/);
      323    12178    7                                 ELSE BUFTYP = 1/*@PROC*/;
      324    12179    7                               CASE( %DCBSECTION,
      325    12180    7                                             %UCOMSECTION );
      326    12181    7                                 GOTO IGNORE;
      327    12182    7                               END;        /* Do case */
      328    12183        /**/
      329    12184    6                             ADR = P$ -> VX$SC.ADDRESS;
      330    12185    6                             NODE# = P$ -> VX$SC.NODE#;
      331    12186    6                             ADR = ADR - 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      332    12187    7                             DO WHILE( SIZE > 0 );
      333    12188    7                                 ADR = ADR + 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      334    12189    7                                 IF SIZE >= 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/
             12189                                          THEN S_SIZE = 1024
             12189                                          /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      335    12190    7                                 ELSE S_SIZE = SIZE;
      336    12191    7                                 SIZE = SIZE - S_SIZE;
      337    12192        /* Set up at most 1 @BUF_SIZE in buffers */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:31   
      338    12193    7                                 CALL VXU$SETUP( WHERE$, BUFTYP, ADR, S_SIZE, NODE# );
      339    12194        /*Now set init conditions */
      340    12195    7                                 WHERE$ -> VX$WORD_A(0) = VALUE;
      341    12196    7                                 NEXT$ = PINCRW( WHERE$, 1 );
      342    12197    7                                 C_SIZE = 1;
      343    12198    7                                 S_SIZE = S_SIZE - 1;
      344    12199        /* Now do exponential initialization routine */
      345    12200    8                                 DO WHILE( S_SIZE > 0 );
      346    12201    8                                     IF C_SIZE < S_SIZE THEN I_SIZE = C_SIZE;
      347    12202    8                                     ELSE I_SIZE = S_SIZE;
      348    12203    8                                     S_SIZE = S_SIZE - I_SIZE;
      349    12204    8                                     VX_TARGET_COUNT = I_SIZE * 4/*@CHAR_WORD*/;
      350    12205    8                                     VX_SOURCE_COUNT = VX_TARGET_COUNT;
      351    12206    8                                     NEXT$ -> VX$TARGET_C = WHERE$ -> VX$SOURCE_C;
             12206                                              /* Do the move */
      352    12207    8                                     NEXT$ = PINCRW( NEXT$, I_SIZE );
      353    12208    8                                     C_SIZE = C_SIZE + I_SIZE;
      354    12209    8                                    END;   /* Do while( S_SIZE > 0 ); */
      355    12210    7                                END;       /* Do while( size > 0 ); */
      356    12211    6                            END;           /* If size > 0 then do; */
      357    12212    5                       END;                /* Do case( P$ -> VX$SC.ATTR.INT ); */
      358    12213    4   IGNORE:
      359    12214    4                     P$ = PINCRW( P$, SIZEW( VX$SC ) );
      360    12215    4                    END;                   /* Do while ( P$ <= Q$ ); */
      361    12216    3                END;                       /* If P$ ~= addr(nil) then do */
      362    12217    3             IF VX_CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */
      363    12218    3                 VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;
      364    12219    3                END;
      365    12220    3             ELSE DO;
      366    12221    4                 DO WHILE( VX_CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );
      367    12222    4                     VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$; /* Move up */
      368    12223    4                     IF VX_CURR$ = ADDR(NIL) THEN GOTO DONE_INIT; /* Check if done */
      369    12224    4                    END;
      370    12225    3                 VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$; /* Move to a brother */
      371    12226    3                END;                       /* Else do */
      372    12227    2            END;                           /* Do forever */
      373    12228    1   DONE_INIT:
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:32   
      374    12229        /*
      375    12230              Allocate buffers for refs from object unit
      376    12231        */
      377    12232    2         DO I = 0 TO SIZEW( VX_PASS2_REF.OU.MAX_A ) - 1;
      378    12233    2             MX = VX_PASS2_REF.OU.MAX_A(I);
      379    12234    3             IF MX > 0 THEN DO;
      380    12235                      %ALLOCATE(
      381    12236                      PTR$="VX_PASS2_REF.OU.L_START_A$(I)",
      382    12237                      TYPE=@SC_DS_2,
      383    12238                      SIZE=MX);
      384    12245    3                 IF VX_SLIB_AREA$ = ADDR(NIL) THEN VX_SLIB_AREA$ = VX_PASS2_REF.OU.
             12245                          L_START_A$(I);
      385    12246    3                END;                       /* If mx > 0 then do; */
      386    12247    2            END;           /* Do i = 0 to sizew( VX_PASS2_REF.OU.MAX_A ) - 1; */
      387    12248        /*
      388    12249              Allocate buffers for (un)satisfied refs
      389    12250        */
      390    12251    2         DO I = 1 TO SIZEW( VX_PASS2_REF.OU.MAX_A ) - 1;
      391    12252    2             MX = VX_PASS2_REF.OU.MAX_A(I) * SIZEW(VXR$SAT);
      392    12253    3             IF MX > 0 THEN DO;
      393    12254                      %ALLOCATE(
      394    12255                      PTR$="VX_PASS2_REF.SAT.L_START_A$(I)",
      395    12256                      TYPE=@SC_DS_2,
      396    12257                      SIZE=MX);
      397    12264    3                END;                       /* If mx > 0 then do; */
      398    12265    2            END;           /* Do i = 0 to sizew( VX_PASS2_REF.OU.MAX_A ) - 1; */
      399    12266        /*
      400    12267              Allocate bref space
      401    12268        */
      402    12269    2         IF VX_O.NUM.BREF ~= 0 THEN DO;
      403    12270    2             VX_BREF_SIZE = VX_O.NUM.BREF * SIZEW( VX$BREF );
      404    12271                  %ALLOCATE(
      405    12272                  PTR$=VX_BREF_START$,
      406    12273                  TYPE=@SC_DS_2,
      407    12274                  SIZE=VX_BREF_SIZE);
      408    12281    2             VX_NEXT_BREF$ = VX_BREF_START$;
      409    12282    2            END;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:33   
      410    12283    2         IF VX_SPC_DATA_INSERT THEN DO;
      411    12284    2             K = 2/*@SPC_FAULT_AREA_SIZEW*/ + 10/*@SPC_DELTA_AREA_SIZEW*/ + 16
             12284                      /*@TCB_SIZE*/;
      412    12285    2             IF VX_OD.NUM.DBIAS AND VX_SLIB_INIT$ = ADDR(NIL)
      413    12286    2             THEN I = VX_PROGRAM_BIAS.A(0);
      414    12287    2             ELSE I = VX_SPC.FAULT;
      415    12288    2             CALL VXU$SETUP(BUF$,0,I,K,0);
      416    12289    2             VX_TARGET_COUNT = K * 4/*@CHAR_WORD*/ * 9/*@BIT_CHAR*/;
      417    12290    2             BUF$ -> VX$TARGET_B = '0'B;
      418    12291    2            END;                           /* If VX_SPC_DATA_INSERT */
      419    12292        /**/
      420    12293        /**/
      421    12294    1         SC_BASE$ = VX_ROOT$ -> VX$NODE.L_START.SC$;
      422    12295    1         VX_CURR$ = VX_ROOT$;
      423    12296    2         DO WHILE( '1'B );
      424    12297    2             VX_CURR$ -> VX$NODE.L_PREV_SIZE.DN = 0;
      425    12298    3             DO J = 1 TO SIZEW( VX_DEF_REC_A ) - 1 ;
      426    12299    3                 RTYPE = VX_DEF_REC_A(J);
      427    12300    3                 SIZE  = VX_CURR$ -> VX$NODE.L_SIZE_A(RTYPE);
      428    12301    3                 VX_CURR$ -> VX$NODE.L_START_A$(RTYPE) = ADDR(NIL);
      429    12302    3                 VX_CURR$ -> VX$NODE.L_STOP_A$(RTYPE) = ADDR(NIL);
      430    12303    3                 VX_CURR$ -> VX$NODE.L_SIZE_A(RTYPE)  = 0;
      431    12304    3                 VX_CURR$ -> VX$NODE.L_PREV_SIZE_A(RTYPE) = 0;
      432    12305    4                 IF SIZE > 0 THEN DO;
      433    12306    4                     J1 = J - 1;
      434    12307                          %ALLOCATE(
      435    12308                          PTR$=WHERE$,
      436    12309                          TYPE=@DD_DS_2,
      437    12310                          SIZE=SIZE);
      438    12317    4                     CALL VXU$PREAD( I,
      439    12318    4                             K,
      440    12319    4                             1/*@RF*/,
      441    12320    4                             1/*@RF*/,
      442    12321    4                             RTYPE,
      443    12322    4                             WHERE$,
      444    12323    4                             SIZE,
      445    12324    4                             SIZE,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:34   
      446    12325    4                             7/*@DD_DS_2*/,
      447    12326    4                             SIZE,
      448    12327    4                             VX_CURR$,
      449    12328    4                             0
      450    12329    4                             );
      451    12330    5                     IF K ~= SIZE THEN DO;
      452    12331        /*E*  ERROR: VXT-E$INTERNAL_BNDADR_VX-0
      453    12332              MESSAGE: Internal LINK error. Inconsistent sizes in VXT$PRE. %U1 vs. %U2.
      454    12333              DESCRIPTION: Self-explanatory.
      455    12334        */
      456    12335                              %NUMBER(
      457    12336                              NUM1=SIZE, SIZE1=6, BASE1=10,
      458    12337                              NUM2=K, SIZE2=6, BASE2=10);
      459    12354                              %SCREAM(
      460    12355                              ERR#=E$INTERNAL_BNDADR_VX,
      461    12356                              LEVEL=@E$F_VX,
      462    12357                              MID="'T'");
      463    12360    5                        END;
      464    12361    4                    END;                   /* If size > 0 then do; */
      465    12362    4                 IF VX_CURR$ = VX_ROOT$ AND RTYPE = %TYPSDEF THEN DO;
      466    12363    5                     IF VX_HAVE_SPC > 0 THEN DO;
      467    12364    5                         BIN_START$ = VX_ROOT$ -> VX$NODE.L_START.DD$;
      468    12365    5                         BIN_STOP$  = VX_ROOT$ -> VX$NODE.L_STOP.DD$;
      469    12366    5                         BIN_N$     = VX_ROOT$ -> VX$NODE.L_START.DN$;
      470    12367    5                         P$ = VX_MERGE_START$;
      471    12368    5                         Q$ = VX_MERGE_START$;
      472    12369    6                         DO WHILE( P$ <= VX_MERGE_STOP$ );
      473    12370    6                             BIN_MATCH$ = PINCRW( BIN_N$, P$->VXD$TMPLT.NPOINTER );
      474    12371                                  %BIN_SEARCH(
      475    12372                                  START$=BIN_START$,
      476    12373                                  STOP$=BIN_STOP$,
      477    12374                                  RESULT$=BIN_RESULT$,
      478    12375                                  N$=BIN_N$,
      479    12376                                  MATCH$=BIN_MATCH$,
      480    12377                                  NAME_DISP=2,
      481    12378                                  SIZE="SIZEW(VXD$TMPLT)",
      482    12379                                  SPLIT=BIN_SPLIT_SPC,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:35   
      483    12380                                  CHECK=BIN_CHECK_SPC,
      484    12381                                  FOUND=BIN_FOUND_SPC,
      485    12382                                  NEG=%@COMMENT,
      486    12383                                  GEN=%@TNEMMOC,
      487    12384                                  ALTRETURN=NOT_FOUND_SPC,
      488    12385                                  EMPTY=NOT_FOUND_SPC );
             12387    6           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND_SPC;
             12388    7           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;
             12389    7              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             12390    8              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             12391    8                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             12392    8                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             12393    8                   >=
             12394    9                   BIN_MATCH$ -> B$DNAME.TEXT THEN DO;
             12395    9                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             12396    9                      =
             12397    9                      BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND_SPC;
             12398    9                    ELSE GOTO NOT_FOUND_SPC;
             12399    9                    END;
             12400    8                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );
             12401    8                 END;                      /* Do while                           */
             12402    7              GOTO NOT_FOUND_SPC;
             12403    7              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12404    7           ELSE DO;                        /* Binary search                      */
             12405    7              BIN_LOW = 0;
             12406    7              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
             12407    7              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );
             12408    7   BIN_SPLIT_SPC:     ;
             12409    7              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             12410    7              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );
             12411    7              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             12412    7              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12413    7                <
             12414    8                BIN_MATCH$ -> B$DNAME.TEXT THEN DO;
             12415    8                 BIN_LOW = BIN_MID;
             12416    8                 GOTO BIN_CHECK_SPC;
             12417    8                 END;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:36   
             12418    7              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12419    7                >
             12420    8                BIN_MATCH$ -> B$DNAME.TEXT THEN DO;
             12421    8                 BIN_HIGH = BIN_MID;
             12422    8   BIN_CHECK_SPC:        ;
             12423    8                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_SPC;
             12424                                                /* Here => looping or not found       */
             12425                                      /* Result -> < match => a boundary condition    */
             12426    8                 %@COMMENT
             12427    8                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             12428    8                   <
             12429    8                   BIN_MATCH$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$,
             12429                            SIZEW(VXD$TMPLT) );
             12430    8                 %@TNEMMOC
             12431    8                   GOTO NOT_FOUND_SPC;
             12432    8                 END;
             12433    7              END;                         /* Else do;                           */
             12434    6   BIN_FOUND_SPC:
             12435        /* Here -> found */
      489    12437        /* Here => found the special symbol */
      490    12438    6                             BUF$ = BIN_RESULT$;
      491    12439    6                             DONE = '0'B;
      492    12440    7                             DO WHILE( BUF$ >= BIN_START$  AND  NOT DONE );
      493    12441    7                                 IF PINCRW(BIN_N$, BUF$->VXD$TMPLT.NPOINTER)
      494    12442    7                                         ->B$DNAME.TEXT = BIN_MATCH$->B$DNAME.TEXT
      495    12443    8                                 THEN DO;
      496    12444    8                                     BUF$ -> VXD$TMPLT = P$ -> VXD$TMPLT;
      497    12445    8                                     BUF$ = PINCRW(BUF$, -SIZEW(VXD$TMPLT) );
      498    12446    8                                    END;
      499    12447    7                                 ELSE DONE = '1'B;
      500    12448    7                                END;
      501    12449    6                             BUF$ = PINCRW(BUF$, SIZEW(VXD$TMPLT) );
      502    12450    6                             DONE = '0'B;
      503    12451    7                             DO WHILE( BUF$ <= BIN_STOP$  AND  NOT DONE );
      504    12452    7                                 IF PINCRW(BIN_N$, BUF$->VXD$TMPLT.NPOINTER)
      505    12453    7                                         ->B$DNAME.TEXT = BIN_MATCH$->B$DNAME.TEXT
      506    12454    8                                 THEN DO;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:37   
      507    12455    8                                     BUF$ -> VXD$TMPLT = P$ -> VXD$TMPLT;
      508    12456    8                                     BUF$ = PINCRW(BUF$, SIZEW(VXD$TMPLT) );
      509    12457    8                                    END;
      510    12458    7                                 ELSE DONE = '1'B;
      511    12459    7                                END;
      512    12460    6                             VX_HAVE_SPC = VX_HAVE_SPC - 1;
      513    12461    7                             DO WHILE( '0'B );
      514    12462    7   NOT_FOUND_SPC:                IF Q$ ~= P$ THEN
      515    12463    7                                     Q$ -> VXD$TMPLT = P$ -> VXD$TMPLT;
      516    12464    7                                 Q$ = PINCRW( Q$, SIZEW(VXD$TMPLT) );
      517    12465    7                                END;
      518    12466    6                             P$ = PINCRW( P$, SIZEW(VXD$TMPLT) );
      519    12467    6                            END;
      520    12468    5                         VX_MERGE_STOP$ = PINCRW( Q$, -SIZEW(VXD$TMPLT) );
      521    12469    5                        END;
      522    12470    5                     IF VX_HAVE_SPC > 0 THEN DO; /* Do special symbol merge */
      523    12471    5                         I = ( VX_HAVE_SPC + 2) * SIZEW( VXD$TMPLT );
      524    12472                              %ALLOCATE( PTR$=NEXT$, TYPE=@DD_DS_2, SIZE=I );
      525    12479    5                         FIRST_START$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START.DD$,
      526    12480    5                                 2*SIZEW(VXD$TMPLT) );
      527    12481    5                         IF VX_ROOT$ -> VX$NODE.L_START.DD$ = ADDR(NIL)
      528    12482    5                         THEN FIRST_STOP$ = PINCRW( NEXT$, ( VX_HAVE_SPC + 1 ) * SIZEW(
             12482                                  VXD$TMPLT) );
      529    12483    5                         ELSE FIRST_STOP$ = PINCRW( VX_ROOT$ -> VX$NODE.L_STOP.DD$,
      530    12484    5                                     ( VX_HAVE_SPC+1 ) * SIZEW( VXD$TMPLT ) );
      531    12485    5                         CALL VXU$MERGE(     FIRST_START$,
      532    12486    5                                 FIRST_STOP$,
      533    12487    5                                 VX_ROOT$ -> VX$NODE.L_START.DN$,
      534    12488    5                                 VX_ROOT$ -> VX$NODE.L_START.DD$,
      535    12489    5                                 VX_ROOT$ -> VX$NODE.L_STOP.DD$,
      536    12490    5                                 VX_ROOT$ -> VX$NODE.L_START.DN$,
      537    12491    5                                 VX_MERGE_START$,
      538    12492    5                                 VX_MERGE_STOP$,
      539    12493    5                                 SIZEW(VXD$TMPLT),
      540    12494    5                                 2         );
      541    12495    5                         VX_ROOT$ -> VX$NODE.L_START.DD$ = FIRST_START$;
      542    12496    5                         VX_ROOT$ -> VX$NODE.L_STOP.DD$ = FIRST_STOP$;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:38   
      543    12497    5                         VX_ROOT$ -> VX$NODE.L_SIZE.DD = POFFW( FIRST_STOP$,
             12497                                  FIRST_START$ ) + SIZEW( VXD$TMPLT );
      544    12498    5                         WHERE$ = FIRST_START$;
      545    12499    5                        END;
      546    12500        /**/
      547    12501        /**/
      548    12502        /**/
      549    12503    5                     DO I = 0 TO SIZEW( VX_SPC.B$.NAME_A$ ) - 1;
      550    12504    5                         IF VX_SPC.B$.SKIP_A(I) ~= 1/*@YES*/
      551    12505    5                                 AND  VX_SPC.B$.MINE_A(I) = 1/*@YES*/
      552    12506    6                         THEN DO;
      553    12507    7                             DO CASE( I );
      554    12508    7                               CASE( 0, 2, 3  /* B$JIT$, B$TCB$, B$ROS$ */ );
      555    12509    7                                 ADR = VX_SPC.B$.VALUE_A(I) + VX_PROGRAM_BIAS.I.RPROC;
      556    12510    7                                 CALL VXU$SETUP( BUF$, 1/*@PROC*/, ADR, 1, 0 );
      557    12511    7                                 BUF$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE_A(I);
      558    12512    7                               CASE( 1 );
      559    12513    7                                 ADR = VX_SPC.B$.VALUE.DELTA + VX_PROGRAM_BIAS.I.RPROC;
      560    12514    7                                 CALL VXU$SETUP( BUF$, 1/*@PROC*/, ADR, 1, 0 );
      561    12515    7                                 BUF$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE_A(I);
      562    12516    7                                 BUF$ -> VX$HALF_A(0) = VX_PROGRAM_BIAS.I.DATA
      563    12517    7                                         + VX_SPC.DELTA_DATA_ADR;
      564    12518    7                               CASE( 4  /* B_VERSION */ );
      565    12519    7                                 ADR = VX_SPC.B$.VALUE.VERSION + VX_PROGRAM_BIAS.I.
             12519                                          RPROC;
      566    12520    7                                 CALL VXU$SETUP( BUF$, 1/*@PROC*/, ADR, 2, 0 );
      567    12521    7                                 BUF$ -> B$VERSION = VX_O.VERSION;
      568    12522    7                               END;
      569    12523    6                            END;           /* If VX_SPC.B$.SKIP ... */
      570    12524    5                        END;               /* Do i = 0 to ... */
      571    12525    4                    END;                   /* If VX_CURR$ = VX_ROOT$ ... */
      572    12526        %EJECT;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:39   
      573    12527    4                 IF VX_CURR$ -> VX$NODE.L_SIZE_A(RTYPE) > 0 THEN DO;
      574    12528    4                     STOP$ = VX_CURR$ -> VX$NODE.L_STOP_A$(RTYPE);
      575    12529    5                     DO WHILE ( WHERE$ <= STOP$ );
      576    12530    5                         IF RTYPE ~= %TYPEDEF
      577    12531    5                                 AND
      578    12532    5                                 WHERE$ -> VXD$TMPLT.CONSTNT
      579    12533    5                         THEN VX_RU_HEAD.MAP_BITS_A.CON(J1) = '1'B/*@TRUE_B*/;
      580    12534    5                         ELSE
      581    12535    5                             IF NOT WHERE$ -> VXD$TMPLT.AD.LFLAGS.DEFINED
      582    12536    6                             THEN DO;
      583    12537        /* Here => not defined as an address yet */
      584    12538    6                                 IF WHERE$->VXD$TMPLT.AD.LOOKUP_SECTNUM
      585    12539    6                                 THEN CALL VXU$FIND_SECTNUM(WHERE$->VXD$TMPLT,
      586    12540    6                                             VX_CURR$->VX$NODE.NUM,SECTNUM);
      587    12541    6                                 ELSE SECTNUM=WHERE$->VXD$TMPLT.AD.SECTNUM;
      588    12542    6                                 P$ = PINCRW( SC_BASE$, SECTNUM * SIZEW(VX$SC) );
      589    12543    6                                 WHERE$ -> VXD$TMPLT.AD.OFFSET =
      590    12544    6                                         P$ -> VX$SC.ADDRESS
      591    12545    6                                         + WHERE$ -> VXD$TMPLT.AD.OFFSET;
      592    12546    6                                 WHERE$ -> VXD$TMPLT.AD.LFLAGS.DEFINED = '1'B/*@YES_B*/
             12546                                          ;
      593    12547    7                                 IF RTYPE ~= %TYPEDEF THEN DO;
      594    12548    7                                     WHERE$ -> VXD$TMPLT.PROTECTION.TYPE =
      595    12549    7                                             P$ -> VX$SC.TYPE;
      596    12550    7                                    END;
      597    12551    7                                 IF RTYPE = %TYPSEGDEF THEN DO;
      598    12552    7                                     WHERE$ -> B$SEGDEF.SEG.SEGID =
      599    12553    7                                             VX_SEGID( P$ -> VX$SC.SEG );
      600    12554    7                                    END;
      601    12555    6                                END;
      602    12556    5                         WHERE$ = PINCRW( WHERE$, SIZEW( VXD$TMPLT ) );
      603    12557    5                        END;               /* Do while */
      604    12558    4                    END; /*  If VX_CURR$ -> VX$NODE.L_SIZE_A(RTYPE) > 0 then do; */
      605    12559    3                END;                   /* Do j = 1 to sizew( VX_REF_REC_A ) - 1; */
      606    12560        /**/
      607    12561        /**/
      608    12562        /**/
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:40   
      609    12563    3             IF VX_CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */
      610    12564    3                 VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;
      611    12565    3                END;
      612    12566    3             ELSE DO;
      613    12567    4                 DO WHILE( VX_CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );
      614    12568    4                     VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$; /* Move up */
      615    12569    4                     IF VX_CURR$ = ADDR(NIL) THEN GOTO DONE; /* Check if done */
      616    12570    4                    END;
      617    12571    3                 VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$; /* Move to a brother */
      618    12572    3                END;                       /* Else do */
      619    12573    2            END;                           /* Do forever */
      620    12574    1   DONE: ;                             /* Thru traversing; do post for pass 1 */
      621    12575        %EJECT;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:41   
      622    12576    2         IF VX_O.NUM.BREF > 0 AND VX_NODE_NUMBER > 0 THEN DO;
      623    12577    2             BIN_START$ = VX_ROOT$ -> VX$NODE.L_START.ED$;
      624    12578    2             BIN_STOP$  = VX_ROOT$ -> VX$NODE.L_STOP.ED$;
      625    12579    2             BIN_N$ = VX_ROOT$ -> VX$NODE.L_START.DN$;
      626    12580                  %BIN_SEARCH(
      627    12581                  START$=BIN_START$,
      628    12582                  STOP$=BIN_STOP$,
      629    12583                  RESULT$=BIN_RESULT$,
      630    12584                  N$=BIN_N$,
      631    12585                  MATCH$="ADDR(VX_XSO$BREF)",
      632    12586                  NAME_DISP=2,
      633    12587                  SIZE="SIZEW(VXD$TMPLT)",
      634    12588                  SPLIT=BIN_SPLIT_OVERLAY,
      635    12589                  CHECK=BIN_CHECK_OVERLAY,
      636    12590                  FOUND=BIN_FOUND_OVERLAY,
      637    12591                  NEG=%@COMMENT,
      638    12592                  GEN=%@TNEMMOC,
      639    12593                  ALTRETURN=LINK_ERROR_OVERLAY,
      640    12594                  EMPTY=LINK_ERROR_OVERLAY);
             12596    2           IF BIN_START$ = ADDR(NIL) THEN GOTO LINK_ERROR_OVERLAY;
             12597    3           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;
             12598    3              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             12599    4              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             12600    4                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             12601    4                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             12602    4                   >=
             12603    5                   ADDR(VX_XSO$BREF) -> B$DNAME.TEXT THEN DO;
             12604    5                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             12605    5                      =
             12606    5                      ADDR(VX_XSO$BREF) -> B$DNAME.TEXT THEN GOTO BIN_FOUND_OVERLAY;
             12607    5                    ELSE GOTO LINK_ERROR_OVERLAY;
             12608    5                    END;
             12609    4                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );
             12610    4                 END;                      /* Do while                           */
             12611    3              GOTO LINK_ERROR_OVERLAY;
             12612    3              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12613    3           ELSE DO;                        /* Binary search                      */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:42   
             12614    3              BIN_LOW = 0;
             12615    3              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
             12616    3              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );
             12617    3   BIN_SPLIT_OVERLAY:     ;
             12618    3              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             12619    3              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );
             12620    3              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             12621    3              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12622    3                <
             12623    4                ADDR(VX_XSO$BREF) -> B$DNAME.TEXT THEN DO;
             12624    4                 BIN_LOW = BIN_MID;
             12625    4                 GOTO BIN_CHECK_OVERLAY;
             12626    4                 END;
             12627    3              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12628    3                >
             12629    4                ADDR(VX_XSO$BREF) -> B$DNAME.TEXT THEN DO;
             12630    4                 BIN_HIGH = BIN_MID;
             12631    4   BIN_CHECK_OVERLAY:        ;
             12632    4                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_OVERLAY;
             12633                                                /* Here => looping or not found       */
             12634                                      /* Result -> < match => a boundary condition    */
             12635    4                 %@COMMENT
             12636    4                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             12637    4                   <
             12638    4                   ADDR(VX_XSO$BREF) -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW(
             12638                            BIN_RESULT$, SIZEW(VXD$TMPLT) );
             12639    4                 %@TNEMMOC
             12640    4                   GOTO LINK_ERROR_OVERLAY;
             12641    4                 END;
             12642    3              END;                         /* Else do;                           */
             12643    2   BIN_FOUND_OVERLAY:
             12644        /* Here -> found */
      641    12646    2             VX_TSX0_OVERLAY.H.LEFT_HALF = BIN_RESULT$->B$EDEF.OU.OFFSET;
      642    12647    2            END;                           /* If VX_O.NUM.BREF > 0 then do; */
      643    12648        /*
      644    12649              Allocate receiving buffer
      645    12650        */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:43   
      646    12651              %ALLOCATE(
      647    12652              PTR$=VX_REC_BUF_START$,
      648    12653              TYPE=@SC_DS_2,
      649    12654              SIZE=VX_REC_BUF_SIZE );
      650    12661    1         IF VX_SLIB_AREA$ = ADDR(NIL) THEN VX_SLIB_AREA$ = VX_REC_BUF_START$;
      651    12662    1         VX_SLIB_AREA_SIZE = POFFW( VX_REC_BUF_START$, VX_SLIB_AREA$ )
      652    12663    1                 +
      653    12664    1                 VX_REC_BUF_SIZE;
      654    12665        /*
      655    12666              Now allocate areas for unsatisfied references
      656    12667        */
      657    12668    1         DIFF = VX_M_ALL( 8/*@GDP*/ ) - VX_M_FREE( 8/*@GDP*/ );
      658    12669    1         IF 20 * SIZEW( VXR$TMPLT ) > DIFF THEN
      659    12670    1             SIZE = ( 1024/*@PAGE_SIZE*/ + DIFF ) / SIZEW( VXR$TMPLT );
      660    12671    1         ELSE SIZE = DIFF;
      661    12672    1         SIZE = SIZE / 2;
      662    12673        /**/
      663    12674    2         DO I = 1 TO SIZEW( VX_PASS2_REF.UNSAT.L_START_A$ ) - 1;
      664    12675                  %ALLOCATE(
      665    12676                  PTR$="VX_PASS2_REF.UNSAT.L_WHERE_A$(I)",
      666    12677                  TYPE=@ER_DS_2,
      667    12678                  SIZE=SIZE);
      668    12685    2             VX_PASS2_REF.UNSAT.L_STOP_A$(I) = VX_PASS2_REF.UNSAT.L_WHERE_A$(I);
      669    12686    2             VX_PASS2_REF.UNSAT.MAX_A(I) = SIZE;
      670    12687    2            END;
      671    12688        /**/
      672    12689        /*
      673    12690              Now for name area for unsatisfied references
      674    12691        */
      675    12692    1         DIFF = VX_M_ALL( 4/*@RN_DS_2*/ ) - VX_M_FREE( 4/*@RN_DS_2*/ );
      676    12693    2         IF SIZE < 1024/*@PAGE_SIZE*//2 THEN DO;
      677    12694                                                /* Here => using partials */
      678    12695    2             IF 2*3*SIZE > DIFF THEN GOTO GET_PAGE;
      679    12696    2             SIZE = DIFF;
      680    12697    2            END;
      681    12698    2         ELSE DO;
      682    12699    2   GET_PAGE:
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:44   
      683    12700    2             SIZE = 1024/*@PAGE_SIZE*/ + DIFF;
      684    12701    2            END;
      685    12702        /**/
      686    12703              %ALLOCATE(
      687    12704              PTR$=VX_PASS2_REF.UNSAT.L_WHERE.RN$,
      688    12705              TYPE=@RN_DS_2,
      689    12706              SIZE=SIZE);
      690    12713    1         VX_PASS2_REF.UNSAT.L_STOP.RN$ = VX_PASS2_REF.UNSAT.L_WHERE.RN$;
      691    12714    1         VX_PASS2_REF.UNSAT.MAX.RN = SIZE;
      692    12715    1         RETURN;
      693    12716        %EJECT;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:45   
      694    12717    1   LINK_ERROR_OVERLAY:
      695    12718        /*E*  ERROR: VXT-E$INTERNAL_BREF_VX-0
      696    12719              MESSAGE: Internal LINK error. Cannot find %U1 in entry definitions.
      697    12720              DESCRIPTION: Self-explanatory.
      698    12721        */
      699    12722    1         VX_EFIELD1.COUNT = VX_XSO$BREF.COUNT;
      700    12723    1         VX_EFIELD1.CHARS = VX_XSO$BREF.CHARS;
      701    12724              %SCREAM(
      702    12725              ERR#=E$INTERNAL_BREF_VX,
      703    12726              MID="'T'",
      704    12727              LEVEL=@E$F_VX);
      705    12730    1   END;

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:46   
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXT$PRE.

   Procedure VXT$PRE requires 1710 words for executable code.
   Procedure VXT$PRE requires 76 words of local(AUTO) storage.

    No errors detected in file VXT$PRE.:E05TSI    .

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:47   

 Object Unit name= VXT$PRE                                    File name= VXT$PRE.:E05TOU
 UTS= JUL 30 '97 08:41:25.00 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Proc  even  none  1710   3256  VXT$PRE
    3  RoData even  none    49     61  VXT$PRE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  VXT$PRE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 VXE$ERROR
         yes           Std       3 VXA$GET
         yes           Std       5 VXU$SETUP
         yes           Std      12 VXU$PREAD
         yes           Std       5 VXD$B2C
         yes           Std       4 VXU$FIND_SECTNUM
         yes           Std      10 VXU$MERGE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:48   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_SN                                 VX_SD_STOP$
     VX_SD                                 VX_IMAGE_PTR$                         VX_RU_HEAD
     VX_OU_HEAD                            VX_PASS                               VX_LINK_UTS
     VX_NODE_NUMBER                        VX_ROOT$                              VX_CURR$
     VX_ERRORS                             VX_PROGRAM_BIAS                       VX_M_FREE
     VX_M_ALL                              VX_M_BASE_PTR                         VX_O
     VX_PHRASE                             VX_OD                                 VX_EFIELD1
     VX_EFIELD2                            VX_IMAGE$                             VX_BADR
     VX_EADR                               VX_TARGET_COUNT                       VX_SOURCE_COUNT
     VX_SLIB_INIT$                         VX_REC_BUF_START$                     VX_REC_BUF_SIZE
     VX_BREF_START$                        VX_NEXT_BREF$                         VX_BREF_SIZE
     VX_XSO$BREF                           VX_TSX0_OVERLAY                       VX_SLIB_AREA$
     VX_SLIB_AREA_SIZE                     VX_SC_X_NODE$                         VX_DCB_START$
     VX_DCB_STOP$                          VX_MERGE_START$                       VX_MERGE_STOP$
     VX_DEF_REC_A                          VX_PASS2_REF                          VX_SEG_SIZE
     VX_SEGID                              VX_SEG_EPAGE#                         VX_HAVE_SPC
     VX_SPC                                VX_SPC_DATA_INSERT                    VX_ROS_ALLOWED
     VX_DCB_SIZEC                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:49   


        1        1        /*M* VXT$PRE - does pre-processing for pass 2. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
        8        8        VXT$PRE: PROC;

      8  2 000000   000000 700200 xent  VXT$PRE      TSX0  ! X66_AUTO_0
         2 000001   000114 000000                    ZERO    76,0

        9        9
       10       10        %INCLUDE VX_INC_C;
       11    10726        %VX$NODE;

             10738    1   /*******************************************************************************
             10739    1   *                                                                              *
             10740    1   *                          VX$NODE                                                *
             10741    1   *                                                                              *
             10742    1   *******************************************************************************/

             10758    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10759    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10760    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10761    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10762    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10763    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10764                              to list of file nodes for this node            */
             10765    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10766    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10766                  /* Head pointer to shared library list */
             10767    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10767                  /* Head pointer to list of shared libraries
             10768                                          which have been mapped to included libraries */
             10769    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:50   
             10770    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10771    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10772    1         2 ADDR_START REDEF  ADDR_START_A,
             10773    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10774    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10775    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10776    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10777    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10778    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10779    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10780    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10781    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10782    1         2 START_PAGE# REDEF START_PAGE#_A,
             10783    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10784    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10785    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10786    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10787    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10788    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10789    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10790    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10791    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10791                  /* Starting pointer for common sections for this node */
             10792    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10792                  /* Stopping pointer for common sections for this node */
             10793    1         2 L_START,
             10794    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10795    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10796    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10797    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10798    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10799    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10800    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10801    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10802    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10803    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10804    1         2 L_START_A$(0:9)     REDEF L_START PTR,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:51   
             10805    1         2 L_STOP,
             10806    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10807    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10808    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10809    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10810    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10811    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10812    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10813    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10814    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10815    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10816    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10817    1         2 L_SIZE,
             10818    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10819    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10820    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10821    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10822    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10823    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10824    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10825    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10826    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10827    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10828    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10829    1         2 L_PREV_SIZE,
             10830    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10831    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10832    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10833    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10834    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10835    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10836    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10837    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10838    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10839    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10840    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10841    1         2 BIT_MAP                ALIGNED,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:52   
             10842    1           3 DATA                  ALIGNED,
             10843    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10844    1           3 RPROC                 ALIGNED,
             10845    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10846    1           3 ROS                   ALIGNED,
             10847    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10848    1         2 L_SC_START,
             10849    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10850    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10851    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10852    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10853    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10854    1         2 L_SC_STOP,
             10855    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10856    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10857    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10858    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10859    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10860    1         2 PROMOTE_HEAD,
             10861    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10862    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10863    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10864    1         2 PROMOTE_TAIL,
             10865    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10866    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10867    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10868    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10869    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10870    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10871    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10872    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       12    10876        %VX$SC;

             10889    1   /*******************************************************************************
             10890    1   *                                                                              *
             10891    1   *                          VX$SC                                                 *
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:53   
             10892    1   *                                                                              *
             10893    1   *******************************************************************************/

             10898    1   DCL 1 VX$SC BASED ALIGNED,
             10899    1         2 SEG UBIN(3) UNAL,
             10900                /*K*  SEG - The segment number of this section */
             10901    1         2 TYPE UBIN(6) UNAL,
             10902                /*K*  TYPE -
             10903                      Type code      Section type
             10904                      ---------      ------------
             10905                          0          Data control section with write access.
             10906                          1          Procedure control section.
             10907                          2          Unlabeled common, name pointer must be zero.
             10908                          3          Labeled common, with mandatory name pointer.
             10909                                     This is for labeled common which must be
             10910                                     in the root.
             10911                          4          Labeled common, with mandatory name pointer.
             10912                                     This is for labeled common which need not
             10913                                     be in the root.
             10914                          5          DCB, word 1 is name pointer.
             10915                          6          Data control section with read only access,
             10916                                     word 1 = 0 or name pointer.      */
             10917    1         2 EMPTY BIT(1) UNAL,
             10918                /*K*  EMPTY is the empty bit.  This bit is set if the control
             10919                      section is of size zero.  */
             10920    1         2 ATTR UNAL,
             10921    1           3 INT  UBIN(2) UNAL,
             10922                  /*K*  INT is the Section initialization.  */
             10923    1           3 SEGMENT BIT(1) UNAL,
             10924                  /*K* SEGMENT is set if the Section is defined in a data
             10925                       segment.  */
             10926    1           3 ALL BIT(1) UNAL,
             10927                  /*K*  ALL is set if the Section is allocated.  */
             10928    1           3 PRE_DCB BIT(1) UNAL,
             10929                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             10930    1           3 MES_INIT BIT(1) UNAL,
             10931    1           3 ALIGN UBIN(2) UNAL,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:54   
             10932                  /*K*  ALIGN is the Section alignment.  */
             10933    1         2 ADDRESS UBIN HALF UNAL,
             10934                /*K*  ADDRESS is the address within the Instruction Segment of
             10935                      the entry point of the external procedure.  */
             10936    1         2 NAME_DISP SBIN HALF UNAL,
             10937                /*K*  NAME_DISP is the Name index.  */
             10938    1         2 SIZE UBIN HALF UNAL,
             10939                /*K*  SIZE is the size, in words, of the section.  */
             10940    1         2 NODE# UBIN HALF UNAL,
             10941                /*K*  NODE# is the Node number of section.  */
             10942    1         2 COM_LINK UBIN HALF UNAL;
             10943                /*K*  COM_LINK is used internally by linker to link common sections */

             10953    1   /*******************************************************************************
             10954    1   *                                                                              *
             10955    1   *                          VX$SECT                                                *
             10956    1   *                                                                              *
             10957    1   *******************************************************************************/

             10962    1   DCL 1 VX$SECT BASED ALIGNED,
             10963    1         2 TYPE UBIN BYTE UNAL,
             10964                /*K*  TYPE -
             10965                      Type code      Section type
             10966                      ---------      ------------
             10967                          0          Data control section with write access.
             10968                          1          Procedure control section.
             10969                          2          Unlabeled common, name pointer must be zero.
             10970                          3          Labeled common, with mandatory name pointer.
             10971                                     This is for labeled common which must be
             10972                                     in the root.
             10973                          4          Labeled common, with mandatory name pointer.
             10974                                     This is for labeled common which need not
             10975                                     be in the root.
             10976                          5          DCB, word 1 is name pointer.
             10977                          6          Data control section with read only access,
             10978                                     word 1 = 0 or name pointer.
             10979                          7          Constant labeled common, with mandatory name pointer.
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:55   
             10980                                     This is for labeled common which must be
             10981                                     in the root.
             10982                          8          Constant labeled common, with mandatory name pointer.
             10983                                     This is for labeled common which need not
             10984                                     be in the root.                        */
             10985    1         2 * BIT(1),
             10986                /*K*  * is reserved for future use and must be zero. */
             10987    1         2 INITZERO BIT(1),
             10988                /*K*  INITZERO - if 1, initialize with zero.  */
             10989    1         2 INITUTS BIT(1),
             10990                /*K*  INITUTS - if 1, initialize with UTS.  */
             10991    1         2 SEGMENT BIT(1),
             10992                /*K*  SEGMENT - if 1, specifies that this section is
             10993                                to be placed in the segment specified by
             10994                                SEG_NPOINTER.  */
             10995    1         2 * BIT(3),
             10996                /*K*  * is reserved for future use and must be zero. */
             10997    1         2 BOUND UBIN(2) UNAL,
             10998                /*K*  BOUND - bits 6-7 - defines starting location.
             10999                              00 - starts on even word
             11000                              01 - starts on odd word
             11001                              10 - starts on multiple of 8
             11002                              11 - starts on page boundary     */
             11003    1         2 SIZE UBIN HALF UNAL,
             11004                /*K*  SIZE is the size, in words, of the section.  */
             11005    1         2 NPOINTER SBIN HALF UNAL,
             11006                /*K*  NPOINTER is the word displacement into the name record
             11007                      (TYPE 1) locating the name of this section.  If the
             11008                      field is negative, the section has no name.  */
             11009    1         2 MBZ UBIN HALF UNAL,
             11010                /*K*  MBZ is reserved for future expansion and must be zero. */
             11011    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11012                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11013                      Section.  The name must be a valid segment name
             11014                      recognized by the linker.  */
             11015    1         2 G66 REDEF MBZ,
             11016                /*K*  G66 is not used on CP-6. */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:56   
             11017    1           3 * BIT(9),
             11018    1           3 NSAB BIT(9);
       13    11021        %VX$SECTNUM;

             11034    1   /*******************************************************************************
             11035    1   *                                                                              *
             11036    1   *                          VX$SECTNUM                                             *
             11037    1   *                                                                              *
             11038    1   *******************************************************************************/

             11043    1   DCL 1 VX$SECTNUM ALIGNED BASED,
             11044    1         2 NEXT$ PTR,
             11045    1         2 SECT#    UBIN HALF HALIGNED,
             11046    1         2 NPOINTER UBIN HALF HALIGNED,
             11047    1         2 NODE#    UBIN HALF HALIGNED,
             11048    1         2 RU_SECT# UBIN HALF HALIGNED;
       14    11051        %VXD$TMPLT(SEGDEF=YES,EDEF=YES);

             11064    1   /*******************************************************************************
             11065    1   *                                                                              *
             11066    1   *                          VXD$TMPLT                                              *
             11067    1   *                                                                              *
             11068    1   *******************************************************************************/

             11072        /*
             11073                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11074                  ENTDEFs, SYMDEFs and SEGDEFs.
             11075        */
             11077    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11078    1         2 VALUE SBIN UNAL,
             11079                /*K*  VALUE is the value if this entry is a constant.  */
             11080    1         2 AD REDEF VALUE,
             11081                /*K*  AD is the address if this entry is not constant.  */
             11082    1           3 LFLAGS UNAL,
             11083                  /*K*  LFLAGS is the field reserved for loader to flag load
             11084                        time attributes of the definition and must be zero
             11085                        in the object unit. */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:57   
             11086    1             4 SOURCE UBIN(3) UNAL,
             11087                    /*K*  SOURCE - Source of this DEF */
             11088    1             4 DEFINED BIT(1) UNAL,
             11089                    /*K*  DEFINED - Set if this DEF defined */
             11090    1             4 MULTIPLE BIT(1) UNAL,
             11091                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11092    1             4 USED BIT(1) UNAL,
             11093                    /*K*  USED - Set if this DEF is used. */
             11094    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11095                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11096                        than 2048 (RU).  */
             11097    1           3 SECTNUM UBIN(11) UNAL,
             11098                  /*K*  SECTNUM contains an entry number into the section
             11099                        table (TYPE 3).  */
             11100    1           3 ISADDR UBIN HALF UNAL,
             11101                  /*K*  ISADDR - Is Address (RU)  */
             11102    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11103                  /*K*  OFFSET is the word offset from the origin of the section. */
             11104    1         2 NPOINTER SBIN HALF UNAL,
             11105                /*K*  NPOINTER is a word displacement into the name record
             11106                      (TYPE 1) locating the name (of this entry). */
             11107    1         2 CONSTNT BIT(1) UNAL,
             11108                /*K*  CONSTNT is a flag bit to determine the interpretation
             11109                      of word 0.
             11110                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11111                                    SECTNUM, and ISADDR or OFFSET.
             11112                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11113    1         2 LFLAGS UNAL,
             11114                /*K*  LFLAGS is the field reserved for loader to flag load
             11115                      time attributes and must be zero in the object unit. */
             11116    1           3 MULTIPLE BIT(1) UNAL,
             11117                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11118    1           3 USED BIT(1) UNAL,
             11119                  /*K*  USED - Set if this DEF is used. */
             11120    1           3 SOURCE UBIN(4) UNAL,
             11121                  /*K*  SOURCE - Source of this DEF */
             11122    1           3 IS_DCB BIT(1) UNAL,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:58   
             11123                  /*K* IS_DCB - Set if this is a DCB */
             11124    1           3 * BIT(10) UNAL,
             11125                  /*K*  * is reserved for future use and must be zero.  */
             11126    1         2 PROTECTION REDEF LFLAGS,
             11127                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11128    1           3 TYPE UBIN(5) UNAL,
             11129                  /*K*  TYPE is the Protection type.  */
             11130    1           3 * UBIN(12) UNAL;
             11131                  /*K*  * is reserved for future use and must be zero.  */

             11142    1   /*******************************************************************************
             11143    1   *                                                                              *
             11144    1   *                          B$EDEF                                                 *
             11145    1   *                                                                              *
             11146    1   *******************************************************************************/

             11151    1   DCL 1 B$EDEF BASED ALIGNED,
             11152    1         2 LFLAGS UNAL,
             11153                /*K*  LFLAGS is the field reserved for loader to flag load
             11154                      time attributes of the definition and must be zero
             11155                      in the object unit. */
             11156    1           3 SOURCE UBIN(3) UNAL,
             11157                  /*K*  SOURCE - Source of this ENTDEF */
             11158    1           3 DEFINED BIT(1)  UNAL,
             11159                  /*K*  DEFINED - Set if this ENTDEF defined */
             11160    1           3 MULTIPLE BIT(1) UNAL,
             11161                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             11162    1           3 USED BIT(1) UNAL,
             11163                  /*K*  USED - Set if this ENTDEF is used. */
             11164    1           3 * BIT(2) UNAL,
             11165                  /*K*  * - Unused and must be zero. */
             11166    1           3 FAULTAGS BIT(1) UNAL,
             11167                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             11168    1         2 OU UNAL,
             11169    1           3 SECTNUM UBIN BYTE UNAL,
             11170                  /*K*  SECTNUM contains an entry number into the section
             11171                        table (TYPE 3).  */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:59   
             11172    1           3 OFFSET UBIN HALF UNAL,
             11173                  /*K*  OFFSET is the word offset from the origin of the section. */
             11174    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             11175                /*K*  ISADDR - Is Address (RU)  */
             11176    1         2 NPOINTER SBIN HALF UNAL,
             11177                /*K*  NPOINTER is a word displacement into the name record
             11178                      (TYPE 1) locating the name (of this entry). */
             11179    1         2 PRI BIT(1) UNAL,
             11180                /*K*  PRI is a one-bit flag denoting primary entry
             11181                      definition.
             11182                         PRI = 1, primary name (object unit name)
             11183                             = 0, not primary name                 */
             11184    1         2 ALT BIT(1) UNAL,
             11185                /*K*  ALT is a one-bit flag denoting permissible alternate
             11186                      return.
             11187                         ALT = 1, alternate return allowed
             11188                             = 0, alternate return not allowed        */
             11189    1         2 CHECK BIT(1) UNAL,
             11190                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             11191                      check and alternate return specification check.
             11192                         CHECK = 0, do not check for matching
             11193                                    arguments/parameters and alternate
             11194                                    return specification check.
             11195                               = 1, check for matching arguments/parameters
             11196                                    and alternate return specification.  */
             11197    1         2 CST UBIN(4) UNAL,
             11198                /*K*  CST is a 4-bit field denoting calling sequence type.
             11199                         CST =  0, Standard CP-6 Callable Procedure
             11200                         CST =  1, Nonstandard Call Type
             11201                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11202                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11203                         CST =  4, Standard CP-6 Function Procedure; a
             11204                                   variable table entry will be present to
             11205                                   define the attributes of the function
             11206                         CST =  5, Same as 0, except USE, AVOID, or
             11207                                   MATERIALIZE attributes specified
             11208                         CST =  7, Same as 2, except USE, AVOID, or
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:60   
             11209                                   MATERIALIZE attributes specified
             11210                         CST =  8, Same as 3, except USE, AVOID, or
             11211                                   MATERIALIZE attributes specified
             11212                         CST =  9, Same as 4, except USE, AVOID, or
             11213                                   MATERIALIZE attributes specified
             11214                         CST = 13, GCOS domain, save
             11215                         CST = 14, GCOS domain, no save
             11216                         CST = 15, Non-Callable Procedure.          */
             11217    1         2 NPARAM UBIN(11) UNAL;
             11218                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             11234    1   /*******************************************************************************
             11235    1   *                                                                              *
             11236    1   *                          B$SEGDEF                                               *
             11237    1   *                                                                              *
             11238    1   *******************************************************************************/

             11243    1   DCL 1 B$SEGDEF BASED ALIGNED,
             11244    1         2 VALUE SBIN UNAL,
             11245                /*K*  VALUE is the value of the constant segment definition
             11246                      pointer if CONSTANT=1.  */
             11247    1         2 S REDEF VALUE,
             11248    1           3 * UBIN(24) UNAL,
             11249    1           3 SEGID UBIN(12) UNAL,
             11250                  /*K*  SEGID - Segid of constant value */
             11251    1         2 AD REDEF VALUE,
             11252                /*K*  AD - Address (not constant )  */
             11253    1           3 LFLAGS UNAL,
             11254                  /*K*  LFLAGS is the field reserved for loader to flag load
             11255                        time attributes of the definition and must be zero
             11256                        in object unit.  */
             11257    1             4 SOURCE UBIN(3) UNAL,
             11258                    /*K*  SOURCE - Source of this SEGDEF */
             11259    1             4 DEFINED BIT(1) UNAL,
             11260                    /*K*  DEFINED - Set if this SEGDEF is defined */
             11261    1             4 MULTIPLE BIT(1) UNAL,
             11262                    /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:61   
             11263    1             4 USED BIT(1) UNAL,
             11264                    /*K*  USED - Set if this SEGDEF is used */
             11265    1             4 * BIT(3) UNAL,
             11266                    /*K*  * is reserved for future use and must be zero. */
             11267    1           3 OU UNAL,
             11268    1             4 SECTNUM UBIN BYTE UNAL,
             11269                    /*K*  SECTNUM is the Section number.  */
             11270    1             4 OFFSET UBIN HALF UNAL,
             11271                    /*K*  OFFSET is the offset within section. */
             11272    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11273                  /*K*  ISADDR - IS Address (RU)  */
             11274    1         2 NPOINTER SBIN HALF UNAL,
             11275                /*K*  NPOINTER is the word displacement into DEFNAMES record. */
             11276    1         2 CONSTNT BIT(1) UNAL,
             11277                /*K*  CONSTNT is a flag bit to determine the interpretation
             11278                      of word 0.
             11279                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11280                                    SECTNUM, and ISADDR or OFFSET.
             11281                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11282    1         2 LFLAGS UNAL,
             11283                /*K*  LFLAGS is the field reserved for loader to flag load time
             11284                      attributes and must be zero in the object unit.  */
             11285    1           3 MULTIPLE BIT(1) UNAL,
             11286                  /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11287    1           3 USED BIT(1) UNAL,
             11288                  /*K*  USED - Set if this SEGDEF is used */
             11289    1           3 SOURCE UBIN(4) UNAL,
             11290                  /*K*  SOURCE - Source of this SEGDEF */
             11291    1           3 * BIT(11) UNAL,
             11292                  /*K*  * is reserved for future use and must be zero. */
             11293    1         2 SEG REDEF LFLAGS UNAL,          /* Not constant SEGDEF (RU) */
             11294    1           3 TYPE UBIN(5) UNAL,            /* Segment protection type (RU) */
             11295    1           3 SEGID UBIN(12) UNAL;          /* Segid of segment (RU) */
       15    11299        %VXR$TMPLT;

             11312    1   /*******************************************************************************
             11313    1   *                                                                              *
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:62   
             11314    1   *                          VXR$TMPLT                                              *
             11315    1   *                                                                              *
             11316    1   *******************************************************************************/

             11321    1   DCL 1 VXR$TMPLT BASED ALIGNED,
             11322    1         2 NPOINTER SBIN HALF UNAL,
             11323                /*K*  NPOINTER is the word index to the symbol name.  */
             11324    1         2 SREF BIT(1) UNAL,
             11325                /*K*  SREF is set is this is a secondary reference.  */
             11326    1         2 READ_ONLY BIT(1) UNAL,
             11327    1         2 GOT BIT(1) UNAL,
             11328                /*K*  GOT is set if got the OU name displacement.  */
             11329    1         2 STATE REDEF GOT BIT(1) UNAL,
             11330    1         2 OPOINTER UBIN(15) UNAL;
             11331                /*K*  OPOINTER is the word index to the OU name.  */

             11353    1   /*******************************************************************************
             11354    1   *                                                                              *
             11355    1   *                          VXR$SAT                                                *
             11356    1   *                                                                              *
             11357    1   *******************************************************************************/

             11361    1   DCL 1 VXR$SAT                 ALIGNED   BASED,
             11362    1         2 VALUE        UBIN(36)  ALIGNED,
             11363    1         2 SEG   REDEF  VALUE,
             11364    1           3 OFFSET     UBIN(18)  UNAL,
             11365    1           3 *          BIT(6)    UNAL,
             11366    1           3 SEGID      UBIN(12)  UNAL,
             11367    1         2 BELOW        BIT(1)    UNAL,
             11368    1         2 *            BIT(17)   UNAL,
             11369    1         2 NODE#        UBIN(18)  UNAL;
       16    11371        %TMPLT;

             11383    1   /*******************************************************************************
             11384    1   *                                                                              *
             11385    1   *                          TMPLT                                                 *
             11386    1   *                                                                              *
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:63   
             11387    1   *******************************************************************************/

             11392    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11393    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11394    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11395    1         2 W       REDEF     A,            /* By name                            */
             11396    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11397    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       17    11400        %VX$WORD;

             11412    1   /*******************************************************************************
             11413    1   *                                                                              *
             11414    1   *                          VX$WORD                                                *
             11415    1   *                                                                              *
             11416    1   *******************************************************************************/

             11421    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             11422    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             11423    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             11424    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             11425        /**/
             11426    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             11427    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             11428    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             11429    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
       18    11432        %SET LISTMAC='1'B;
       19    11433        %SET LISTSUB='1'B;
       20    11434        %SET LISTEXP='1'B;
       21    11435        %BANNER(ARG=SUBS);
             11436        %LSET LISTDIR='0'B;

             11443    1   /*******************************************************************************
             11444    1   *                                                                              *
             11445    1   *                          SUBS                                                 *
             11446    1   *                                                                              *
             11447    1   *******************************************************************************/

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:64   
       22    11451        %B$RECORDSUBS;
             11452        %EQU TYPHEAD=0 ;
             11453        %EQU TYPDNAM=1 ;
             11454        %EQU TYPRNAM=2 ;
             11455        %EQU TYPSECT=3 ;
             11456        %EQU TYPEDEF=4 ;
             11457        %EQU TYPEREF=5 ;
             11458        %EQU TYPSDEF=6 ;
             11459        %EQU TYPSREF=7 ;
             11460        %EQU TYPSEGDEF=8 ;
             11461        %EQU TYPSEGREF=9 ;
             11462        %EQU TYPPROG=10 ;
             11463        %EQU SUBTYPPROG=0 ;
             11464        %EQU SUBTYPREL=1 ;
             11465        %EQU TYPLOGBLK=11 ;
             11466        %EQU TYPINTNTRY=12 ;
             11467        %EQU TYPEXST=13 ;
             11468        %EQU TYPVREBL=14 ;
             11469        %EQU TYPDBGNAM=15 ;
             11470        %EQU TYPLV1LB=16 ;
             11471        %EQU TYPLV1=17 ;
             11472        %EQU TYPDATASEG=18 ;
             11473        %EQU TYPRUM=20 ;
             11474        %EQU TYPBIRTH=21 ;
             11475        %EQU TYPPLOVER=22 ;
             11476        %EQU TYPCOMPID=23 ;
             11477        %EQU TYPROS=30 ;
       23    11479        %B$SECTIONSUBS;
             11480        %EQU DATASECTION=0 ;
             11481        %EQU CODESECTION=1 ;
             11482        %EQU UCOMSECTION=2 ;
             11483        %EQU RLCOMSECTION=3 ;
             11484        %EQU LCOMSECTION=4 ;
             11485        %EQU DCBSECTION=5 ;
             11486        %EQU ROSECTION=6 ;
             11487        %EQU RORLCOMSECTION=7 ;
             11488        %EQU ROLCOMSECTION=8 ;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:65   
             11489        %EQU EVENBOUNDSECTION=0 ;
             11490        %EQU ODDBOUNDSECTION=1 ;
             11491        %EQU EIGHTBOUNDSECTION=2 ;
             11492        %EQU PAGEBOUNDSECTION=3 ;
       24    11494        %BANNER(ARG=B$DNAME);
             11495        %LSET LISTDIR='0'B;

             11502    1   /*******************************************************************************
             11503    1   *                                                                              *
             11504    1   *                          B$DNAME                                                *
             11505    1   *                                                                              *
             11506    1   *******************************************************************************/

       25    11510        %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11511            %LSET STR='BASED        ';
             11512            %IF
             11513                '0'B;
             11515            %ELSE;
             11516                %LSET INIT=/*;
             11517            %ENDIF;
             11518    1   DCL 1 B$DNAME BASED ALIGNED,
             11519    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11520                /*K*  COUNT is the number of characters in the name */
             11521            %IF
             11522                '0'B;
             11525            %ELSE;
             11526    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11527            %ENDIF;
       26    11529        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER,NODE_NAME=VX$TREE_NODE);
             11530    1   DCL 1 VX$TREE_HEADER BASED ALIGNED,
             11531              /*K*  HDR_NAME is the Tree table header.  */
             11532    1         2 NODES UBIN HALF UNAL,
             11533                /*K*  NODES is the number of nodes in the tree table.  */
             11534    1         2 SIZE UBIN HALF UNAL,
             11535                /*K*  SIZE is the total word size of the tree table
             11536                      (HDR + NODES + TEST pool).   */
             11537    1         2 LIB$ PTR,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:66   
             11538                /*K*  LIB$ is the pointer to the name of the shared library
             11539                      currently associated.  */
             11540    1         2 PRECSIZE UBIN HALF UNAL,
             11541                /*K*  PRECSIZE  is the maximum program record size in the
             11542                      Run Unit (from the Head record).  */
             11543    1         2 MAX_LIB_DATA UBIN HALF UNAL;
             11544                /*K*  MAX_LIB_DATA is the maximum reserved in the program
             11545                      image for the shared library data.  */
             11546    1   DCL 1 VX$TREE_NODE BASED ALIGNED,
             11547              /*K*  NODE_NAME is the node specification.  */
             11548    1         2 NAME$ PTR,
             11549                /*K*  NAME$ is the pointer to the name of the node.  */
             11550    1         2 FLGS,
             11551                /*K*  FLGS are control flags used by M$OLAY.  */
             11552    1           3 NOW_IN BIT(1) UNAL,
             11553                  /*K*  NOW_IN is set if this node is now in memory.  */
             11554    1           3 WAS_IN BIT(1) UNAL,
             11555                  /*K*  WAS_IN is set if this node was in memory.  */
             11556    1           3 * BIT(7) UNAL,
             11557                  /*K*  * is reserved for future use and must be zero.  */
             11558    1         2 AFLGS,
             11559                /*K*  AFLGS are access flags.  */
             11560    1           3 * BIT(6) UNAL,
             11561                  /*K*  * is reserved for future use and must be zero.  */
             11562    1           3 NOPATH BIT(1) UNAL,
             11563                  /*K*  NOPATH is set if this node is independently loaded
             11564                        (no backward path).  */
             11565    1           3 ENTER BIT(1) UNAL,
             11566                  /*K*  ENTER is set if ENTRY$ is valid.  */
             11567    1           3 CANCEL BIT(1) UNAL,
             11568                  /*K*  CANCEL is set if the overlay was removed by
             11569                        "CANCEL=YES".   */
             11570    1         2 BACK# SBIN HALF UNAL,
             11571                /*K*  BACK# is the backward link (parent).  */
             11572    1         2 FORWARD# SBIN HALF UNAL,
             11573                /*K*  FORWARD# is the forward link (daughter).  */
             11574    1         2 OVERLAY# SBIN HALF UNAL,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:67   
             11575                /*K*  OVERLAY# is the overlay link (same level).   */
             11576    1         2 PADDR UBIN HALF UNAL,
             11577                /*K*  PADDR is the address of procedure.  */
             11578    1         2 PSIZE UBIN HALF UNAL,
             11579                /*K*  PSIZE is the size of procedure.  */
             11580    1         2 DADDR UBIN HALF UNAL,
             11581                /*K*  DADDR is the address of data.  */
             11582    1         2 DSIZE UBIN HALF UNAL,
             11583                /*K*  DSIZE is the size of data.  */
             11584    1         2 ENTRY$ EPTR;
             11585                /*K*  ENTRY$ is the overlay entry point (see ENTER).  */
       27    11587        /**/
       28    11588        /**/
       29    11589        /**/
       30    11590        %VX$BREF;
             11591    1   DCL 1 VX$BREF                    ALIGNED     BASED (VX_NEXT_BREF$),
             11592    1         2 WORD_A(0:1)       UBIN(36)  ALIGNED,
             11593    1         2 I  REDEF     WORD_A         ALIGNED,
             11594    1           3 WORD0            UBIN(36)  ALIGNED,
             11595    1           3 WORD1            UBIN(36)  ALIGNED;
       31    11597        %VX$DCB;
             11598        %BANNER( ARG=VX$DCB );
             11599        %LSET LISTDIR='0'B;

             11606    1   /*******************************************************************************
             11607    1   *                                                                              *
             11608    1   *                          VX$DCB                                                 *
             11609    1   *                                                                              *
             11610    1   *******************************************************************************/

             11614        %LIST;
             11615    1   DCL 1 VX$DCB                       ALIGNED   BASED,
             11616    1         2 * CHAR( VX_DCB_SIZEC);
             11617        /* End of actual DCB; now for NAME: Just one word in this description */
             11618        /* Dcb name description */
             11619    1   DCL 1 VX$DCB$T$C                   ALIGNED   BASED,
             11620    1         2 LOGICAL_DCB_NUM             UBIN(3)   UNAL,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:68   
             11621    1         2 INT                         BIT(1)    UNAL,      /* '1'=> no relocation
             11622                                                                       '0' => relocation */
             11623    1         2 COUNT                       UBIN(5)   UNAL,
             11624    1         2 CHARS                       CHAR( VX$DCB$T$C.COUNT ) UNAL;
       32    11626        %PLIST;
       33    11627        %F$DCB;
       34    11684        %SET LISTSUB='1'B;
       35    11685        %E;

             11693    1   /*******************************************************************************
             11694    1   *                                                                              *
             11695    1   *                          ENTRY                                                 *
             11696    1   *                                                                              *
             11697    1   *******************************************************************************/

       36    11701        %ENTRIES;
       37    11716        %ENTRIES_IO;
       38    11724    1   DCL VXU$MERGE       ENTRY(10);
       39    11725    1   DCL VXU$SETUP            ENTRY(5);
       40    11726    1   DCL VXU$PAGEOUT          ENTRY(3);
       41    11727    1   DCL VXU$FIND_SECTNUM      ENTRY(4);
       42    11728        %PTR;

             11736    1   /*******************************************************************************
             11737    1   *                                                                              *
             11738    1   *                          PTR                                                 *
             11739    1   *                                                                              *
             11740    1   *******************************************************************************/

       43    11744        %POINTER;
       44    11749    1   DCL CURR$           PTR ALIGNED    AUTO;
       45    11750    1   DCL ICURR$          PTR ALIGNED    AUTO;
       46    11751    1   DCL DCB_CURR$       PTR ALIGNED    AUTO;
       47    11752    1   DCL DN_ROOT_START$  PTR ALIGNED    AUTO;
       48    11753    1   DCL WHERE$          PTR  ALIGNED   AUTO;
       49    11754    1   DCL NEXT$           PTR  ALIGNED   AUTO;
       50    11755    1   DCL T$              PTR  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:69   
       51    11756    1   DCL NODE$           PTR  ALIGNED   AUTO;
       52    11757    1   DCL NAME$           PTR ALIGNED    AUTO;
       53    11758    1   DCL N$              PTR ALIGNED    AUTO;
       54    11759    1   DCL SC_START$       PTR ALIGNED    AUTO;
       55    11760    1   DCL SC_BASE$        PTR ALIGNED    AUTO;
       56    11761    1   DCL FIRST_START$    PTR ALIGNED    AUTO;
       57    11762    1   DCL FIRST_STOP$     PTR ALIGNED    AUTO;
       58    11763    1   DCL STOP$           PTR  ALIGNED   AUTO;
       59    11764    1   DCL BUF$            PTR  ALIGNED   AUTO;
       60    11765        %VX$PTR$;
       61    11769        %U;

             11777    1   /*******************************************************************************
             11778    1   *                                                                              *
             11779    1   *                          UBIN                                                 *
             11780    1   *                                                                              *
             11781    1   *******************************************************************************/

       62    11785        %INDEX;
       63    11795    1   DCL RTYPE           UBIN(36)  ALIGNED   AUTO;
       64    11796    1   DCL J1              UBIN(36)  ALIGNED   AUTO;
       65    11797    1   DCL MX              UBIN(36)  ALIGNED   AUTO;
       66    11798    1   DCL SAT_MX          UBIN(36)  ALIGNED   AUTO;
       67    11799    1   DCL NEXT            UBIN(36)  ALIGNED   AUTO;
       68    11800    1   DCL TREE_TABLE_SIZE UBIN(36)  ALIGNED   AUTO;
       69    11801    1   DCL STOP            UBIN(36)  ALIGNED   AUTO;
       70    11802    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
       71    11803    1   DCL VALUE           UBIN(36)  ALIGNED   AUTO;
       72    11804    1   DCL BUFTYP          UBIN(36)  ALIGNED   AUTO;
       73    11805    1   DCL NODE#           UBIN(36)  ALIGNED   AUTO;
       74    11806    1   DCL SECTNUM         UBIN(36)  ALIGNED   AUTO;
       75    11807    1   DCL SC_IDX          UBIN(36)  ALIGNED   AUTO;
       76    11808    1   DCL NPOINTER        UBIN(36)  ALIGNED   AUTO;
       77    11809    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       78    11810    1   DCL S_SIZE          UBIN(36)  ALIGNED   AUTO;
       79    11811    1   DCL C_SIZE          UBIN(36)  ALIGNED   AUTO;
       80    11812    1   DCL I_SIZE          UBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:70   
       81    11813        %S;

             11821    1   /*******************************************************************************
             11822    1   *                                                                              *
             11823    1   *                          SBIN                                                 *
             11824    1   *                                                                              *
             11825    1   *******************************************************************************/

       82    11829    1   DCL ADR             SBIN WORD ALIGNED AUTO;
       83    11830    1   DCL DIFF            SBIN WORD ALIGNED AUTO;
       84    11831        %BIN_SEARCH_TEMPS(
       85    11832                   LOW=BIN_LOW,
       86    11833                   HIGH=BIN_HIGH,
       87    11834                   START1$=BIN_START1$,
       88    11835                   MID=BIN_MID,
       89    11836                   NTEMP$=BIN_NTEMP$);
       90    11843        %BIN_SEARCH_VARS(
       91    11844                   START$=BIN_START$,
       92    11845                   STOP$=BIN_STOP$,
       93    11846                   RESULT$=BIN_RESULT$,
       94    11847                   N$=BIN_N$,
       95    11848                   MATCH$=BIN_MATCH$,
       96    11849                   NAME_DISP=BIN_NAME_DISP,
       97    11850                   SIZE=BIN_SIZE);
       98    11859        %IMAGE_BUFFERS( NAME=VX$IMAGE, STCLASS="BASED(VX_IMAGE$)");
       99    11882        %MOVE_PAGE_DCL;
      100    11889        %MOVE_TMPLT;
      101    11895        %PLIST;
      102    11896        %SET LISTEXP='0'B;
      103    11897    1   DCL 1 B$VERSION ALIGNED BASED,
      104    11898    1         2 COUNT UBIN BYTE UNAL,
      105    11899    1         2 TEXT CHAR(6) UNAL;
      106    11900    1   DCL DONE BIT(1);
      107    11901        %EJECT;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:71   
      108    11902    1         VX_PASS = 2;

  11902  2 000002   000002 235007                    LDA     2,DL
         2 000003   000000 755000 xsym               STA     VX_PASS

      109    11903    1         VX_PHRASE.I.PASS = '2';

  11903  2 000004   062000 236003                    LDQ     25600,DU
         2 000005   000003 552040 xsym               STBQ    VX_PHRASE+3,'40'O

      110    11904    1         BIN_START$ = ADDR( VX_SD );

  11904  2 000006   000000 236000 3                  LDQ     0
         2 000007   200063 756100                    STQ     BIN_START$,,AUTO

      111    11905    1         BIN_STOP$ = VX_SD_STOP$;

  11905  2 000010   000000 236000 xsym               LDQ     VX_SD_STOP$
         2 000011   200064 756100                    STQ     BIN_STOP$,,AUTO

      112    11906    1         BIN_N$ = ADDR( VX_SN );

  11906  2 000012   000001 236000 3                  LDQ     1
         2 000013   200066 756100                    STQ     BIN_N$,,AUTO

      113    11907    2         DO I = 0 TO SIZEW( VX_SPC.SEG.NAME_A$ ) - 1;

  11907  2 000014   200026 450100                    STZ     I,,AUTO
         2 000015   000153 710000 2                  TRA     s:11974+3

      114    11908    2             T$ = VX_SPC.SEG.NAME_A$(I);

  11908  2 000016   200026 720100                    LXL0    I,,AUTO
         2 000017   000000 236010 xsym               LDQ     VX_SPC,X0
         2 000020   200014 756100                    STQ     T$,,AUTO

      115    11909                  %BIN_SEARCH(
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:72   
      116    11910                  START$=BIN_START$,
      117    11911                  STOP$=BIN_STOP$,
      118    11912                  RESULT$=BIN_RESULT$,
      119    11913                  N$=BIN_N$,
      120    11914                  MATCH$=T$,
      121    11915                  NAME_DISP=2,
      122    11916                  SIZE="SIZEW(VXD$TMPLT)",
      123    11917                  SPLIT=BIN_SPLIT,
      124    11918                  CHECK=BIN_CHECK,
      125    11919                  ALTRETURN=NOT_FOUND,
      126    11920                  EMPTY=NOT_FOUND);
             11922    2           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND;

  11922  2 000021   200063 236100                    LDQ     BIN_START$,,AUTO
         2 000022   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000023   000157 600000 2                  TZE     NOT_FOUND

             11923    3           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;

  11923  2 000024   200063 235100                    LDA     BIN_START$,,AUTO
         2 000025   000022 771000                    ARL     18
         2 000026   200100 755100                    STA     DONE+1,,AUTO
         2 000027   200064 236100                    LDQ     BIN_STOP$,,AUTO
         2 000030   000022 772000                    QRL     18
         2 000031   200100 136100                    SBLQ    DONE+1,,AUTO
         2 000032   000002 506007                    DIV     2,DL
         2 000033   000021 116007                    CMPQ    17,DL
         2 000034   000070 605000 2                  TPL     s:11940

             11924    3              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  11924  2 000035   200063 236100                    LDQ     BIN_START$,,AUTO
         2 000036   200065 756100                    STQ     BIN_RESULT$,,AUTO

             11925    4              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  11925  2 000037   200064 116100                    CMPQ    BIN_STOP$,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:73   
         2 000040   000042 600000 2                  TZE     s:11926
         2 000041   000067 603000 2                  TRC     s:11937

             11926    4                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  11926  2 000042   200065 470500                    LDP0    BIN_RESULT$,,AUTO
         2 000043   000001 220100                    LDX0    1,,PR0
         2 000044   000000 636010                    EAQ     0,X0
         2 000045   200066 036100                    ADLQ    BIN_N$,,AUTO
         2 000046   200061 756100                    STQ     BIN_NTEMP$,,AUTO

             11927    4                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  11927  2 000047   200061 471500                    LDP1    BIN_NTEMP$,,AUTO
         2 000050   100000 221100                    LDX1    0,,PR1
         2 000051   200014 473500                    LDP3    T$,,AUTO
         2 000052   300000 222100                    LDX2    0,,PR3
         2 000053   040140 106540                    CMPC    fill='040'O
         2 000054   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         2 000055   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         2 000056   000061 602000 2                  TNC     s:11935

             11928    4                   >=
             11929    5                   T$ -> B$DNAME.TEXT THEN DO;

             11930    5                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  11930  2 000057   000145 600000 2                  TZE     BIN_FOUND

             11931    5                      =
             11932    5                      T$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND;
             11933    5                    ELSE GOTO NOT_FOUND;

  11933  2 000060   000157 710000 2                  TRA     NOT_FOUND

             11934    5                    END;
             11935    4                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:74   

  11935  2 000061   200065 236100                    LDQ     BIN_RESULT$,,AUTO
         2 000062   000002 036003                    ADLQ    2,DU
         2 000063   200065 756100                    STQ     BIN_RESULT$,,AUTO

             11936    4                 END;                      /* Do while                           */

  11936  2 000064   200064 116100                    CMPQ    BIN_STOP$,,AUTO
         2 000065   000042 602000 2                  TNC     s:11926
         2 000066   000042 600000 2                  TZE     s:11926

             11937    3              GOTO NOT_FOUND;

  11937  2 000067   000157 710000 2                  TRA     NOT_FOUND

             11938    3              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             11939    3           ELSE DO;                        /* Binary search                      */

             11940    3              BIN_LOW = 0;

  11940  2 000070   200056 450100                    STZ     BIN_LOW,,AUTO

             11941    3              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;

  11941  2 000071   200063 235100                    LDA     BIN_START$,,AUTO
         2 000072   000022 771000                    ARL     18
         2 000073   200100 755100                    STA     DONE+1,,AUTO
         2 000074   200064 236100                    LDQ     BIN_STOP$,,AUTO
         2 000075   000022 772000                    QRL     18
         2 000076   200100 136100                    SBLQ    DONE+1,,AUTO
         2 000077   000002 506007                    DIV     2,DL
         2 000100   000002 036007                    ADLQ    2,DL
         2 000101   200057 756100                    STQ     BIN_HIGH,,AUTO

             11942    3              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );

  11942  2 000102   200063 236100                    LDQ     BIN_START$,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:75   
         2 000103   777776 036003                    ADLQ    -2,DU
         2 000104   200062 756100                    STQ     BIN_START1$,,AUTO

  11942  2 000105                       BIN_SPLIT    null
             11943    3   BIN_SPLIT:     ;
             11944    3              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  11944  2 000105   200056 236100                    LDQ     BIN_LOW,,AUTO
         2 000106   200057 036100                    ADLQ    BIN_HIGH,,AUTO
         2 000107   000001 772000                    QRL     1
         2 000110   200060 756100                    STQ     BIN_MID,,AUTO

             11945    3              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );

  11945  2 000111   000023 736000                    QLS     19
         2 000112   200062 036100                    ADLQ    BIN_START1$,,AUTO
         2 000113   200065 756100                    STQ     BIN_RESULT$,,AUTO

             11946    3              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  11946  2 000114   200065 470500                    LDP0    BIN_RESULT$,,AUTO
         2 000115   000001 220100                    LDX0    1,,PR0
         2 000116   000000 636010                    EAQ     0,X0
         2 000117   200066 036100                    ADLQ    BIN_N$,,AUTO
         2 000120   200061 756100                    STQ     BIN_NTEMP$,,AUTO

             11947    3              IF BIN_NTEMP$ -> B$DNAME.TEXT

  11947  2 000121   200061 471500                    LDP1    BIN_NTEMP$,,AUTO
         2 000122   100000 221100                    LDX1    0,,PR1
         2 000123   200014 473500                    LDP3    T$,,AUTO
         2 000124   300000 222100                    LDX2    0,,PR3
         2 000125   040140 106540                    CMPC    fill='040'O
         2 000126   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         2 000127   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         2 000130   000134 603000 2                  TRC     s:11953

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:76   
             11948    3                <
             11949    4                T$ -> B$DNAME.TEXT THEN DO;

             11950    4                 BIN_LOW = BIN_MID;

  11950  2 000131   200060 235100                    LDA     BIN_MID,,AUTO
         2 000132   200056 755100                    STA     BIN_LOW,,AUTO

             11951    4                 GOTO BIN_CHECK;

  11951  2 000133   000140 710000 2                  TRA     BIN_CHECK

             11952    4                 END;
             11953    3              IF BIN_NTEMP$ -> B$DNAME.TEXT

  11953  2 000134   000145 602000 2                  TNC     BIN_FOUND
         2 000135   000145 600000 2                  TZE     BIN_FOUND

             11954    3                >
             11955    4                T$ -> B$DNAME.TEXT THEN DO;

             11956    4                 BIN_HIGH = BIN_MID;

  11956  2 000136   200060 235100                    LDA     BIN_MID,,AUTO
         2 000137   200057 755100                    STA     BIN_HIGH,,AUTO

  11956  2 000140                       BIN_CHECK    null
             11957    4   BIN_CHECK:        ;
             11958    4                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT;

  11958  2 000140   200056 236100                    LDQ     BIN_LOW,,AUTO
         2 000141   000001 036007                    ADLQ    1,DL
         2 000142   200057 116100                    CMPQ    BIN_HIGH,,AUTO
         2 000143   000105 602000 2                  TNC     BIN_SPLIT

             11959                                                /* Here => looping or not found       */
             11960                                      /* Result -> < match => a boundary condition    */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:77   
             11961    4                 %@COMMENT
             11962    4                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             11963    4                   <
             11964    4                   T$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             11964                            VXD$TMPLT) );
             11965    4                 %@TNEMMOC
             11966    4                   GOTO NOT_FOUND;

  11966  2 000144   000157 710000 2                  TRA     NOT_FOUND

             11967    4                 END;
             11968    3              END;                         /* Else do;                           */
             11969    2   BIN_FOUND:
             11970        /* Here -> found */
      127    11972        /*Here => found */
      128    11973    2             VX_SPC.SEG.VALUE_A(I) = BIN_RESULT$ -> B$SEGDEF.VALUE;

  11973  2 000145   000000 235100       BIN_FOUND    LDA     0,,PR0
         2 000146   200026 723100                    LXL3    I,,AUTO
         2 000147   000005 755013 xsym               STA     VX_SPC+5,X3

      129    11974    2            END;

  11974  2 000150   200026 235100                    LDA     I,,AUTO
         2 000151   000001 035007                    ADLA    1,DL
         2 000152   200026 755100                    STA     I,,AUTO
         2 000153   200026 235100                    LDA     I,,AUTO
         2 000154   000005 115007                    CMPA    5,DL
         2 000155   000016 602000 2                  TNC     s:11908

      130    11975    2         DO WHILE( '0'B );

  11975  2 000156   000175 710000 2                  TRA     s:11992

      131    11976    2   NOT_FOUND:
      132    11977        /* Here we are in a bloody mess */
      133    11978        /*E*  ERROR: VXT-E$INTERNAL_SEGID_VX-0
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:78   
      134    11979              MESSAGE: Internal LINK error. Cannot find segment name: %U1.
      135    11980              DESCRIPTION: Self-explanatory.
      136    11981        */
      137    11982    2             VX_EFIELD1.CHARS = T$ -> B$DNAME.TEXT;

  11982  2 000157   200014 470500       NOT_FOUND    LDP0    T$,,AUTO
         2 000160   000000 220100                    LDX0    0,,PR0
         2 000161   040000 100540                    MLR     fill='040'O
         2 000162   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         2 000163   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      138    11983    2             VX_EFIELD1.COUNT = T$ -> B$DNAME.COUNT;

  11983  2 000164   000000 236100                    LDQ     0,,PR0
         2 000165   000011 736000                    QLS     9
         2 000166   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      139    11984                  %SCREAM( ERR#=E$INTERNAL_SEGID_VX, LEVEL=@E$F_VX, MID="'T'" );

  11985  2 000167   000004 630400 3                  EPPR0   4
         2 000170   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000171   000000 701000 xent               TSX1    VXE$ERROR
         2 000172   000000 011000                    NOP     0

      140    11987                  %ERROR_IT;

  11988  2 000173   000002 713400                    CLIMB   err
         2 000174   000000 401760                    pmme    nvectors=0

      141    11990    2            END;                           /* Do never */

      142    11991        /* Allocate image formation buffers */
      143    11992    2         DO I = 0 TO SIZEW(VX_IMAGE_PTR$)-1;

  11992  2 000175   200026 450100                    STZ     I,,AUTO
         2 000176   000300 710000 2                  TRA     SKIP_BUF_ALLOCATION+3

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:79   
      144    11993    2             P$ = VX_IMAGE_PTR$(I);

  11993  2 000177   200026 720100                    LXL0    I,,AUTO
         2 000200   000000 236010 xsym               LDQ     VX_IMAGE_PTR$,X0
         2 000201   200003 756100                    STQ     P$,,AUTO

      145    11994    2             IF I = 2/*@ROS*/ AND NOT VX_ROS_ALLOWED THEN GOTO SKIP_BUF_ALLOCATION;

  11994  2 000202   200026 235100                    LDA     I,,AUTO
         2 000203   000002 115007                    CMPA    2,DL
         2 000204   000207 601000 2                  TNZ     s:11995
         2 000205   000000 234000 xsym               SZN     VX_ROS_ALLOWED
         2 000206   000275 605000 2                  TPL     SKIP_BUF_ALLOCATION

      146    11995    2             IF I >= 3/*@DATA_SEGMENT*/

  11995  2 000207   000003 115007                    CMPA    3,DL
         2 000210   000214 602000 2                  TNC     s:11997

      147    11996    2             THEN SIZE = VX_SEG_SIZE(I-3);

  11996  2 000211   777775 235010 xsym               LDA     VX_SEG_SIZE-3,X0
         2 000212   200050 755100                    STA     SIZE,,AUTO
         2 000213   000220 710000 2                  TRA     s:11998

      148    11997    2             ELSE SIZE = VX_EADR(I) - VX_BADR(I) + 1;

  11997  2 000214   000000 236010 xsym               LDQ     VX_EADR,X0
         2 000215   000000 136010 xsym               SBLQ    VX_BADR,X0
         2 000216   000001 036007                    ADLQ    1,DL
         2 000217   200050 756100                    STQ     SIZE,,AUTO

      149    11998    2             IF SIZE <= 0 THEN GOTO SKIP_BUF_ALLOCATION;

  11998  2 000220   200050 235100                    LDA     SIZE,,AUTO
         2 000221   000275 600000 2                  TZE     SKIP_BUF_ALLOCATION

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:80   
      150    11999    2             IF SIZE <= 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/

  11999  2 000222   002001 115007                    CMPA    1025,DL
         2 000223   000226 603000 2                  TRC     s:12001

      151    12000    2             THEN L = SIZEW( VX$IMAGE.START_A$ ) - 2;

  12000  2 000224   200031 450100                    STZ     L,,AUTO
         2 000225   000230 710000 2                  TRA     s:12002

      152    12001    2             ELSE L = SIZEW( VX$IMAGE.START_A$ ) - 1;

  12001  2 000226   000001 236007                    LDQ     1,DL
         2 000227   200031 756100                    STQ     L,,AUTO

      153    12002    3             DO J = 0 TO L;

  12002  2 000230   200027 450100                    STZ     J,,AUTO
         2 000231   000272 710000 2                  TRA     s:12015+3

      154    12003                      %ALLOCATE(
      155    12004                      PTR$=WHERE$,
      156    12005                      TYPE=@SC_DS_2,
      157    12006                      SIZE=@BUF_SIZE);

  12007  2 000232   000007 236000 xsym               LDQ     VX_M_ALL+7
         2 000233   000007 136000 xsym               SBLQ    VX_M_FREE+7
         2 000234   002000 116007                    CMPQ    1024,DL
         2 000235   000245 604000 2                  TMI     s:12011

  12008  2 000236   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 000237   000022 736000                    QLS     18
         2 000240   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         2 000241   200012 756100                    STQ     WHERE$,,AUTO

  12009  2 000242   002000 236007                    LDQ     1024,DL
         2 000243   000007 056000 xsym               ASQ     VX_M_FREE+7
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:81   

  12010  2 000244   000257 710000 2                  TRA     s:12013

  12011  2 000245   000011 236000 3                  LDQ     9
         2 000246   200102 756100                    STQ     DONE+3,,AUTO
         2 000247   000012 236000 3                  LDQ     10
         2 000250   200101 756100                    STQ     DONE+2,,AUTO
         2 000251   200012 630500                    EPPR0   WHERE$,,AUTO
         2 000252   200100 450500                    STP0    DONE+1,,AUTO
         2 000253   200100 630500                    EPPR0   DONE+1,,AUTO
         2 000254   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000255   000000 701000 xent               TSX1    VXA$GET
         2 000256   000000 011000                    NOP     0

      158    12013    3                 P$ -> VX$IMAGE.START_A$(J) = WHERE$;

  12013  2 000257   200012 236100                    LDQ     WHERE$,,AUTO
         2 000260   200003 470500                    LDP0    P$,,AUTO
         2 000261   200027 720100                    LXL0    J,,AUTO
         2 000262   000002 756110                    STQ     2,X0,PR0

      159    12014    3                 P$ -> VX$IMAGE.STOP_A$(J) = PINCRW( WHERE$, 1024
             12014                          /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ - 1 );

  12014  2 000263   200012 236100                    LDQ     WHERE$,,AUTO
         2 000264   001777 036003                    ADLQ    1023,DU
         2 000265   200027 720100                    LXL0    J,,AUTO
         2 000266   000004 756110                    STQ     4,X0,PR0

      160    12015    3                END;                       /* Do j */

  12015  2 000267   200027 235100                    LDA     J,,AUTO
         2 000270   000001 035007                    ADLA    1,DL
         2 000271   200027 755100                    STA     J,,AUTO
         2 000272   200031 236100                    LDQ     L,,AUTO
         2 000273   200027 116100                    CMPQ    J,,AUTO
         2 000274   000232 603000 2                  TRC     s:12007
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:82   

      161    12016    2   SKIP_BUF_ALLOCATION:
      162    12017    2            END;                           /* Do i */

  12017  2 000275   200026 235100       SKIP_BUF_AL* LDA     I,,AUTO
         2 000276   000001 035007                    ADLA    1,DL
         2 000277   200026 755100                    STA     I,,AUTO
         2 000300   200026 235100                    LDA     I,,AUTO
         2 000301   000011 115007                    CMPA    9,DL
         2 000302   000177 602000 2                  TNC     s:11993

      163    12018
      164    12019        %PLIST;
      165    12020
      166    12021    2         DO I = 0 TO 5;

  12021  2 000303   200026 450100                    STZ     I,,AUTO

      167    12022    2             VX_SEG_EPAGE#(I) = VX_SEG_SIZE(I) / 1024
             12022                      /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  12022  2 000304   200026 720100                    LXL0    I,,AUTO
         2 000305   000000 236010 xsym               LDQ     VX_SEG_SIZE,X0
         2 000306   002000 506007                    DIV     1024,DL
         2 000307   000000 756010 xsym               STQ     VX_SEG_EPAGE#,X0

      168    12023    2            END;

  12023  2 000310   200026 235100                    LDA     I,,AUTO
         2 000311   000001 035007                    ADLA    1,DL
         2 000312   200026 755100                    STA     I,,AUTO
         2 000313   000006 115007                    CMPA    6,DL
         2 000314   000304 602000 2                  TNC     s:12022

      169    12024
      170    12025    1         IF VX_ROOT$ -> VX$NODE.ADDR_START.ROS > 0 THEN

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:83   
  12025  2 000315   000000 470400 xsym               LDP0    VX_ROOT$
         2 000316   000014 235100                    LDA     12,,PR0
         2 000317   000324 604400 2                  TMOZ    s:12028

      171    12026    1             VX_ROOT$ -> VX$NODE.START_PAGE#.ROS =

  12026  2 000320   000014 236100                    LDQ     12,,PR0
         2 000321   002000 506007                    DIV     1024,DL
         2 000322   000022 756100                    STQ     18,,PR0
         2 000323   000326 710000 2                  TRA     s:12030

      172    12027    1                     VX_ROOT$ -> VX$NODE.ADDR_START.ROS / 1024
             12027                              /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      173    12028    1         ELSE VX_ROOT$ -> VX$NODE.START_PAGE#.ROS = -1;

  12028  2 000324   000001 336007                    LCQ     1,DL
         2 000325   000022 756100                    STQ     18,,PR0

      174    12029
      175    12030    1         IF VX_ROOT$ -> VX$NODE.ADDR_STOP.ROS > 0 THEN

  12030  2 000326   000017 235100                    LDA     15,,PR0
         2 000327   000334 604400 2                  TMOZ    s:12033

      176    12031    1             VX_ROOT$ -> VX$NODE.STOP_PAGE#.ROS =

  12031  2 000330   000017 236100                    LDQ     15,,PR0
         2 000331   002000 506007                    DIV     1024,DL
         2 000332   000025 756100                    STQ     21,,PR0
         2 000333   000336 710000 2                  TRA     s:12034

      177    12032    1                     VX_ROOT$ -> VX$NODE.ADDR_STOP.ROS / 1024
             12032                              /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      178    12033    1         ELSE VX_ROOT$ -> VX$NODE.STOP_PAGE#.ROS = -1;

  12033  2 000334   000001 335007                    LCA     1,DL
         2 000335   000025 755100                    STA     21,,PR0
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:84   

      179    12034    1         I = VX_PROGRAM_BIAS.I.DATA;

  12034  2 000336   000000 235000 xsym               LDA     VX_PROGRAM_BIAS
         2 000337   200026 755100                    STA     I,,AUTO

      180    12035        /* Now initialize dcbs */
      181    12036    2         IF VX_DCB_START$ ~= ADDR(NIL) AND VX_EADR(2/*@ROS*/) - VX_BADR(2/*@ROS*/) + 1
             12036                  > 0 THEN DO;

  12036  2 000340   000000 236000 xsym               LDQ     VX_DCB_START$
         2 000341   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000342   000602 600000 2                  TZE     s:12075
         2 000343   000002 236000 xsym               LDQ     VX_EADR+2
         2 000344   000002 136000 xsym               SBLQ    VX_BADR+2
         2 000345   000027 116000 xsym               CMPQ    B_VECTNIL+23
         2 000346   000602 604400 2                  TMOZ    s:12075

      182    12037    2             J = POFFW( VX_DCB_STOP$, VX_DCB_START$ ) / SIZEW( VX$SC ) + 1;

  12037  2 000347   000000 236000 xsym               LDQ     VX_DCB_START$
         2 000350   000022 772000                    QRL     18
         2 000351   200100 756100                    STQ     DONE+1,,AUTO
         2 000352   000000 236000 xsym               LDQ     VX_DCB_STOP$
         2 000353   000022 772000                    QRL     18
         2 000354   200100 136100                    SBLQ    DONE+1,,AUTO
         2 000355   000003 506007                    DIV     3,DL
         2 000356   000001 036007                    ADLQ    1,DL
         2 000357   200027 756100                    STQ     J,,AUTO

      183    12038    2             CALL VXU$SETUP( WHERE$, 2/*@ROS*/, I, J, 0 );

  12038  2 000360   000006 236000 3                  LDQ     6
         2 000361   200104 756100                    STQ     DONE+5,,AUTO
         2 000362   200027 631500                    EPPR1   J,,AUTO
         2 000363   200103 451500                    STP1    DONE+4,,AUTO
         2 000364   200026 633500                    EPPR3   I,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:85   
         2 000365   200102 453500                    STP3    DONE+3,,AUTO
         2 000366   000013 236000 3                  LDQ     11
         2 000367   200101 756100                    STQ     DONE+2,,AUTO
         2 000370   200012 634500                    EPPR4   WHERE$,,AUTO
         2 000371   200100 454500                    STP4    DONE+1,,AUTO
         2 000372   200100 630500                    EPPR0   DONE+1,,AUTO
         2 000373   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000374   000000 701000 xent               TSX1    VXU$SETUP
         2 000375   000000 011000                    NOP     0

      184    12039    2             DCB_CURR$ = VX_DCB_START$;

  12039  2 000376   000000 236000 xsym               LDQ     VX_DCB_START$
         2 000377   200010 756100                    STQ     DCB_CURR$,,AUTO

      185    12040    3             DO WHILE( DCB_CURR$ <= VX_DCB_STOP$ );

  12040  2 000400   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         2 000401   000403 600000 2                  TZE     s:12041
         2 000402   000427 603000 2                  TRC     s:12048

      186    12041    4                 IF NOT DCB_CURR$ -> VX$SC.ATTR.PRE_DCB THEN DO;

  12041  2 000403   200010 470500                    LDP0    DCB_CURR$,,AUTO
         2 000404   000000 236100                    LDQ     0,,PR0
         2 000405   000010 316003                    CANQ    8,DU
         2 000406   000421 601000 2                  TNZ     s:12046

      187    12042    4                     WHERE$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE.ROS;

  12042  2 000407   200012 471500                    LDP1    WHERE$,,AUTO
         2 000410   000010 235000 xsym               LDA     VX_SPC+8
         2 000411   100000 755100                    STA     0,,PR1

      188    12043    4                     WHERE$ -> VX$HALF_A(0) = DCB_CURR$ -> VX$SC.ADDRESS;

  12043  2 000412   200012 471500                    LDP1    WHERE$,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:86   
         2 000413   000100 100500                    MLR     fill='000'O
         2 000414   000000 400002                    ADSC9   0,,PR0                   cn=2,n=2
         2 000415   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

      189    12044    4                     WHERE$ = PINCRW( WHERE$, SIZEW( WHERE$ ) );

  12044  2 000416   200012 236100                    LDQ     WHERE$,,AUTO
         2 000417   000001 036003                    ADLQ    1,DU
         2 000420   200012 756100                    STQ     WHERE$,,AUTO

      190    12045    4                    END;       /* If ~DCB_CURR$ -> VX$SC.ATTR.PRE_DCB then do; */

      191    12046    3                 DCB_CURR$ = PINCRW( DCB_CURR$, SIZEW( VX$SC ) );

  12046  2 000421   200010 236100                    LDQ     DCB_CURR$,,AUTO
         2 000422   000003 036003                    ADLQ    3,DU
         2 000423   200010 756100                    STQ     DCB_CURR$,,AUTO

      192    12047    3                END;                   /* Do while( DCB_CURR$ <= VX_DCB_STOP$ ); */

  12047  2 000424   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         2 000425   000403 602000 2                  TNC     s:12041
         2 000426   000403 600000 2                  TZE     s:12041

      193    12048    2             DCB_CURR$ = VX_DCB_START$;

  12048  2 000427   000000 236000 xsym               LDQ     VX_DCB_START$
         2 000430   200010 756100                    STQ     DCB_CURR$,,AUTO

      194    12049    2             DN_ROOT_START$ = VX_ROOT$ -> VX$NODE.L_START.DN$;

  12049  2 000431   000000 470400 xsym               LDP0    VX_ROOT$
         2 000432   000031 236100                    LDQ     25,,PR0
         2 000433   200011 756100                    STQ     DN_ROOT_START$,,AUTO

      195    12050    3             DO WHILE( DCB_CURR$ <= VX_DCB_STOP$ );

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:87   
  12050  2 000434   000000 236000 xsym               LDQ     VX_DCB_STOP$
         2 000435   200010 116100                    CMPQ    DCB_CURR$,,AUTO
         2 000436   000602 602000 2                  TNC     s:12075

      196    12051    4                 IF NOT DCB_CURR$ -> VX$SC.ATTR.PRE_DCB THEN DO;

  12051  2 000437   200010 470500                    LDP0    DCB_CURR$,,AUTO
         2 000440   000000 236100                    LDQ     0,,PR0
         2 000441   000010 316003                    CANQ    8,DU
         2 000442   000574 601000 2                  TNZ     s:12072

      197    12052    4                     K = DCB_CURR$ -> VX$SC.ADDRESS;

  12052  2 000443   000000 236100                    LDQ     0,,PR0
         2 000444   777777 376007                    ANQ     -1,DL
         2 000445   200030 756100                    STQ     K,,AUTO

      198    12053    4                     L = DCB_CURR$ -> VX$SC.SIZE;

  12053  2 000446   000001 236100                    LDQ     1,,PR0
         2 000447   777777 376007                    ANQ     -1,DL
         2 000450   200031 756100                    STQ     L,,AUTO

      199    12054    4                     CALL VXU$SETUP( WHERE$, 2/*@ROS*/, K, L, 0 );

  12054  2 000451   000006 236000 3                  LDQ     6
         2 000452   200104 756100                    STQ     DONE+5,,AUTO
         2 000453   200031 631500                    EPPR1   L,,AUTO
         2 000454   200103 451500                    STP1    DONE+4,,AUTO
         2 000455   200030 633500                    EPPR3   K,,AUTO
         2 000456   200102 453500                    STP3    DONE+3,,AUTO
         2 000457   000013 236000 3                  LDQ     11
         2 000460   200101 756100                    STQ     DONE+2,,AUTO
         2 000461   200012 634500                    EPPR4   WHERE$,,AUTO
         2 000462   200100 454500                    STP4    DONE+1,,AUTO
         2 000463   200100 630500                    EPPR0   DONE+1,,AUTO
         2 000464   000023 631400 xsym               EPPR1   B_VECTNIL+19
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:88   
         2 000465   000000 701000 xent               TSX1    VXU$SETUP
         2 000466   000000 011000                    NOP     0

      200    12055        /* Now have dcb all set up */
      201    12056    4                     WHERE$ -> VX$DCB = VX_CONST_DCB;

  12056  2 000467   200012 470500                    LDP0    WHERE$,,AUTO
         2 000470   000000 720000 xsym               LXL0    VX_DCB_SIZEC
         2 000471   000140 100400                    MLR     fill='000'O
         2 000472   000000 000600 1                  ADSC9   VX_CONST_DCB             cn=0,n=384
         2 000473   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

      202    12057    4                     Q$ = PINCRW( DN_ROOT_START$, DCB_CURR$ -> VX$SC.NAME_DISP );

  12057  2 000474   200010 470500                    LDP0    DCB_CURR$,,AUTO
         2 000475   000001 220100                    LDX0    1,,PR0
         2 000476   000000 636010                    EAQ     0,X0
         2 000477   200011 036100                    ADLQ    DN_ROOT_START$,,AUTO
         2 000500   200004 756100                    STQ     Q$,,AUTO

      203    12058    4                     WHERE$ -> F$DCB.DCBNAME = '0'B;

  12058  2 000501   200012 471500                    LDP1    WHERE$,,AUTO
         2 000502   100140 236100                    LDQ     96,,PR1
         2 000503   000033 772000                    QRL     27
         2 000504   000037 376007                    ANQ     31,DL
         2 000505   000001 621006                    EAX1    1,QL
         2 000506   000140 100400                    MLR     fill='000'O
         2 000507   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000510   100140 000011                    ADSC9   96,,PR1                  cn=0,n=*X1

      204    12059    4                     WHERE$ -> F$DCB.DCBNAME.S = '1'B; /* Set no inits */

  12059  2 000511   040000 236003                    LDQ     16384,DU
         2 000512   100140 256100                    ORSQ    96,,PR1

      205    12060    4                     WHERE$ -> F$DCB.DCBNAME.L = Q$ -> B$DNAME.COUNT;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:89   

  12060  2 000513   200004 473500                    LDP3    Q$,,AUTO
         2 000514   300000 236100                    LDQ     0,,PR3
         2 000515   000011 736000                    QLS     9
         2 000516   100140 676100                    ERQ     96,,PR1
         2 000517   037000 376003                    ANQ     15872,DU
         2 000520   100140 656100                    ERSQ    96,,PR1

      206    12061    4                     WHERE$ -> F$DCB.DCBNAME.N = Q$ -> B$DNAME.TEXT;

  12061  2 000521   100140 236100                    LDQ     96,,PR1
         2 000522   000033 772000                    QRL     27
         2 000523   000037 376007                    ANQ     31,DL
         2 000524   300000 220100                    LDX0    0,,PR3
         2 000525   000000 621006                    EAX1    0,QL
         2 000526   040140 100540                    MLR     fill='040'O
         2 000527   300000 400010                    ADSC9   0,,PR3                   cn=2,n=*X0
         2 000530   100140 200011                    ADSC9   96,,PR1                  cn=1,n=*X1

      207    12062    5                     DO K = 0 TO SIZEW( VX_O.DCB_MATCH_A$ ) - 1;

  12062  2 000531   200030 450100                    STZ     K,,AUTO
         2 000532   000571 710000 2                  TRA     s:12070+3

      208    12063    5                         P$ = VX_O.DCB_MATCH_A$(K);

  12063  2 000533   200030 720100                    LXL0    K,,AUTO
         2 000534   000141 236010 xsym               LDQ     VX_O+97,X0
         2 000535   200003 756100                    STQ     P$,,AUTO

      209    12064    6                         IF P$ ~= ADDR(NIL) AND NOT VX_OD.NODCB_A(K) THEN DO;

  12064  2 000536   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000537   000566 600000 2                  TZE     s:12070
         2 000540   200030 235100                    LDA     K,,AUTO
         2 000541   000000 066405                    CMPB    filb='0'B
         2 000542   000003 000001 xsym               BDSC    VX_OD+3,A                by=0,bit=0,n=1
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:90   
         2 000543   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         2 000544   000566 601000 2                  TNZ     s:12070

      210    12065    7                             IF P$ -> B$DNAME.TEXT = Q$ -> B$DNAME.TEXT THEN DO;

  12065  2 000545   200003 470500                    LDP0    P$,,AUTO
         2 000546   000000 221100                    LDX1    0,,PR0
         2 000547   200004 471500                    LDP1    Q$,,AUTO
         2 000550   100000 222100                    LDX2    0,,PR1
         2 000551   040140 106540                    CMPC    fill='040'O
         2 000552   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
         2 000553   100000 400012                    ADSC9   0,,PR1                   cn=2,n=*X2
         2 000554   000566 601000 2                  TNZ     s:12070

      211    12066    7                                 WHERE$ -> F$DCB.DCBNAME.X = K + 1;

  12066  2 000555   200012 473500                    LDP3    WHERE$,,AUTO
         2 000556   200030 236100                    LDQ     K,,AUTO
         2 000557   000001 036007                    ADLQ    1,DL
         2 000560   000041 736000                    QLS     33
         2 000561   300140 676100                    ERQ     96,,PR3
         2 000562   700000 376003                    ANQ     -32768,DU
         2 000563   300140 656100                    ERSQ    96,,PR3

      212    12067    7                                 VX_O.DCB_MATCH_HIT_A(K) = '1'B/*@TRUE_B*/;

  12067  2 000564   400000 236003                    LDQ     -131072,DU
         2 000565   000145 256010 xsym               ORSQ    VX_O+101,X0

      213    12068    7                                END;       /* If P$ -> B$DNAME.TEXT = ... */

      214    12069    6                            END;           /* If P$ ~= addr(nil) then do; */

      215    12070    5                        END;   /* Do k = 0 to sizew( VX_O.DCB_MATCH_A$ ) - 1; */

  12070  2 000566   200030 235100                    LDA     K,,AUTO
         2 000567   000001 035007                    ADLA    1,DL
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:91   
         2 000570   200030 755100                    STA     K,,AUTO
         2 000571   200030 235100                    LDA     K,,AUTO
         2 000572   000004 115007                    CMPA    4,DL
         2 000573   000533 602000 2                  TNC     s:12063

      216    12071    4                    END;       /* If ~DCB_CURR$ -> VX$SC.ATTR.PRE_DCB then do; */

      217    12072    3                 DCB_CURR$ = PINCRW( DCB_CURR$, SIZEW( VX$SC ) );

  12072  2 000574   200010 236100                    LDQ     DCB_CURR$,,AUTO
         2 000575   000003 036003                    ADLQ    3,DU
         2 000576   200010 756100                    STQ     DCB_CURR$,,AUTO

      218    12073    3                END;                       /* Do while */

  12073  2 000577   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         2 000600   000437 602000 2                  TNC     s:12051
         2 000601   000437 600000 2                  TZE     s:12051

      219    12074    2            END;                       /* If VX_DCB_START$ ~= addr(nil) then do; */

      220    12075    1         K = VX_RU_HEAD.DCBRES;

  12075  2 000602   000004 236000 xsym               LDQ     VX_RU_HEAD+4
         2 000603   777777 376007                    ANQ     -1,DL
         2 000604   200030 756100                    STQ     K,,AUTO

      221    12076    2         IF K > 0 THEN DO;                 /* Init reserved pointer slots */

  12076  2 000605   000657 600000 2                  TZE     s:12086

      222    12077    2             IF VX_OD.NUM.DBIAS AND VX_SLIB_INIT$ = ADDR(NIL)

  12077  2 000606   000000 236000 xsym               LDQ     VX_OD
         2 000607   000020 316007                    CANQ    16,DL
         2 000610   000615 600000 2                  TZE     s:12079
         2 000611   000000 236000 xsym               LDQ     VX_SLIB_INIT$
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:92   
         2 000612   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000613   000615 601000 2                  TNZ     s:12079

      223    12078    2             THEN I = 0;

  12078  2 000614   200026 450100                    STZ     I,,AUTO

      224    12079    2             CALL VXU$SETUP( WHERE$, 2/*@ROS*/, I+J, K, 0 );

  12079  2 000615   200026 236100                    LDQ     I,,AUTO
         2 000616   200027 036100                    ADLQ    J,,AUTO
         2 000617   200100 756100                    STQ     DONE+1,,AUTO
         2 000620   000006 236000 3                  LDQ     6
         2 000621   200105 756100                    STQ     DONE+6,,AUTO
         2 000622   200030 630500                    EPPR0   K,,AUTO
         2 000623   200104 450500                    STP0    DONE+5,,AUTO
         2 000624   200100 631500                    EPPR1   DONE+1,,AUTO
         2 000625   200103 451500                    STP1    DONE+4,,AUTO
         2 000626   000013 236000 3                  LDQ     11
         2 000627   200102 756100                    STQ     DONE+3,,AUTO
         2 000630   200012 633500                    EPPR3   WHERE$,,AUTO
         2 000631   200101 453500                    STP3    DONE+2,,AUTO
         2 000632   200101 630500                    EPPR0   DONE+2,,AUTO
         2 000633   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000634   000000 701000 xent               TSX1    VXU$SETUP
         2 000635   000000 011000                    NOP     0

      225    12080    2             K = K - 1;

  12080  2 000636   200030 235100                    LDA     K,,AUTO
         2 000637   000001 135007                    SBLA    1,DL
         2 000640   200030 755100                    STA     K,,AUTO

      226    12081    3             DO L = 0 TO K;

  12081  2 000641   200031 450100                    STZ     L,,AUTO
         2 000642   000654 710000 2                  TRA     s:12084+3
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:93   

      227    12082    3                 WHERE$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE.NUL;

  12082  2 000643   200012 470500                    LDP0    WHERE$,,AUTO
         2 000644   000011 235000 xsym               LDA     VX_SPC+9
         2 000645   000000 755100                    STA     0,,PR0

      228    12083    3                 WHERE$ = PINCRW( WHERE$, SIZEW( WHERE$ ) );

  12083  2 000646   200012 236100                    LDQ     WHERE$,,AUTO
         2 000647   000001 036003                    ADLQ    1,DU
         2 000650   200012 756100                    STQ     WHERE$,,AUTO

      229    12084    3                END;                       /* Do l = 0 to k */

  12084  2 000651   200031 235100                    LDA     L,,AUTO
         2 000652   000001 035007                    ADLA    1,DL
         2 000653   200031 755100                    STA     L,,AUTO
         2 000654   200030 236100                    LDQ     K,,AUTO
         2 000655   200031 116100                    CMPQ    L,,AUTO
         2 000656   000643 603000 2                  TRC     s:12082

      230    12085    2            END;                           /* If k > 0 then do; */

      231    12086    1         VX_CURR$ = VX_ROOT$;

  12086  2 000657   000000 236000 xsym               LDQ     VX_ROOT$
         2 000660   000000 756000 xsym               STQ     VX_CURR$

      232    12087    2         DO WHILE( '1'B );

      233    12088    2             IF VX_CURR$ -> VX$NODE.ADDR_START.RDATA > 0 THEN

  12088  2 000661   000000 470400 xsym               LDP0    VX_CURR$
         2 000662   000012 235100                    LDA     10,,PR0
         2 000663   000670 604400 2                  TMOZ    s:12091

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:94   
      234    12089    2                 VX_CURR$ -> VX$NODE.START_PAGE#.RDATA =

  12089  2 000664   000012 236100                    LDQ     10,,PR0
         2 000665   002000 506007                    DIV     1024,DL
         2 000666   000020 756100                    STQ     16,,PR0
         2 000667   000672 710000 2                  TRA     s:12093

      235    12090    2                         VX_CURR$ -> VX$NODE.ADDR_START.RDATA / 1024
             12090                                  /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      236    12091    2             ELSE VX_CURR$ -> VX$NODE.START_PAGE#.RDATA = -1;

  12091  2 000670   000001 336007                    LCQ     1,DL
         2 000671   000020 756100                    STQ     16,,PR0

      237    12092        /**/
      238    12093    2             IF VX_CURR$ -> VX$NODE.ADDR_STOP.RDATA > 0 THEN

  12093  2 000672   000015 235100                    LDA     13,,PR0
         2 000673   000700 604400 2                  TMOZ    s:12096

      239    12094    2                 VX_CURR$ -> VX$NODE.STOP_PAGE#.RDATA =

  12094  2 000674   000015 236100                    LDQ     13,,PR0
         2 000675   002000 506007                    DIV     1024,DL
         2 000676   000023 756100                    STQ     19,,PR0
         2 000677   000702 710000 2                  TRA     s:12098

      240    12095    2                         VX_CURR$ -> VX$NODE.ADDR_STOP.RDATA / 1024
             12095                                  /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      241    12096    2             ELSE VX_CURR$ -> VX$NODE.STOP_PAGE#.RDATA = -1;

  12096  2 000700   000001 335007                    LCA     1,DL
         2 000701   000023 755100                    STA     19,,PR0

      242    12097        /**/
      243    12098    2             IF VX_CURR$ -> VX$NODE.ADDR_START.RPROC > 0 THEN

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:95   
  12098  2 000702   000013 235100                    LDA     11,,PR0
         2 000703   000710 604400 2                  TMOZ    s:12101

      244    12099    2                 VX_CURR$ -> VX$NODE.START_PAGE#.RPROC =

  12099  2 000704   000013 236100                    LDQ     11,,PR0
         2 000705   002000 506007                    DIV     1024,DL
         2 000706   000021 756100                    STQ     17,,PR0
         2 000707   000712 710000 2                  TRA     s:12103

      245    12100    2                         VX_CURR$ -> VX$NODE.ADDR_START.RPROC / 1024
             12100                                  /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      246    12101    2             ELSE VX_CURR$ -> VX$NODE.START_PAGE#.RPROC = -1;

  12101  2 000710   000001 336007                    LCQ     1,DL
         2 000711   000021 756100                    STQ     17,,PR0

      247    12102        /**/
      248    12103    2             IF VX_CURR$ -> VX$NODE.ADDR_STOP.RPROC > 0 THEN

  12103  2 000712   000016 235100                    LDA     14,,PR0
         2 000713   000720 604400 2                  TMOZ    s:12106

      249    12104    2                 VX_CURR$ -> VX$NODE.STOP_PAGE#.RPROC =

  12104  2 000714   000016 236100                    LDQ     14,,PR0
         2 000715   002000 506007                    DIV     1024,DL
         2 000716   000024 756100                    STQ     20,,PR0
         2 000717   000722 710000 2                  TRA     s:12107

      250    12105    2                         VX_CURR$ -> VX$NODE.ADDR_STOP.RPROC / 1024
             12105                                  /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      251    12106    2             ELSE VX_CURR$ -> VX$NODE.STOP_PAGE#.RPROC = -1;

  12106  2 000720   000001 335007                    LCA     1,DL
         2 000721   000024 755100                    STA     20,,PR0

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:96   
      252    12107    2             VX_CURR$ -> VX$NODE.ADDR_START.ROS = VX_ROOT$ -> VX$NODE.ADDR_START.ROS;

  12107  2 000722   000000 471400 xsym               LDP1    VX_ROOT$
         2 000723   100014 235100                    LDA     12,,PR1
         2 000724   000014 755100                    STA     12,,PR0

      253    12108    2             VX_CURR$ -> VX$NODE.ADDR_STOP.ROS  = VX_ROOT$ -> VX$NODE.ADDR_STOP.ROS;

  12108  2 000725   100017 235100                    LDA     15,,PR1
         2 000726   000017 755100                    STA     15,,PR0

      254    12109    2            VX_CURR$ -> VX$NODE.START_PAGE#.ROS = VX_ROOT$ -> VX$NODE.START_PAGE#.ROS;

  12109  2 000727   100022 235100                    LDA     18,,PR1
         2 000730   000022 755100                    STA     18,,PR0

      255    12110    2             VX_CURR$ -> VX$NODE.STOP_PAGE#.ROS  = VX_ROOT$ -> VX$NODE.STOP_PAGE#.ROS;

  12110  2 000731   100025 235100                    LDA     21,,PR1
         2 000732   000025 755100                    STA     21,,PR0

      256    12111
      257    12112
      258    12113    3             IF VX_CURR$ -> VX$NODE.ALL_BLK_COM THEN DO;

  12113  2 000733   000144 236100                    LDQ     100,,PR0
         2 000734   200000 316003                    CANQ    65536,DU
         2 000735   001101 600000 2                  TZE     s:12155

      259    12114    3                 P$ = VX_CURR$ -> VX$NODE.BLANK_COMMON$;

  12114  2 000736   000145 236100                    LDQ     101,,PR0
         2 000737   200003 756100                    STQ     P$,,AUTO

      260    12115    4                 DO CASE( P$ -> VX$SC.ATTR.INT );

  12115  2 000740   200003 473500                    LDP3    P$,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:97   
         2 000741   300000 236100                    LDQ     0,,PR3
         2 000742   000030 772000                    QRL     24
         2 000743   000003 376007                    ANQ     3,DL
         2 000744   000003 116007                    CMPQ    3,DL
         2 000745   000747 602006 2                  TNC     s:12115+7,QL
         2 000746   001101 710000 2                  TRA     s:12155
         2 000747   001101 710000 2                  TRA     s:12155
         2 000750   000752 710000 2                  TRA     s:12117
         2 000751   000755 710000 2                  TRA     s:12120

      261    12116    4                   CASE(1);

      262    12117    4                     VALUE = VX_LINK_UTS;

  12117  2 000752   000000 235000 xsym               LDA     VX_LINK_UTS
         2 000753   200042 755100                    STA     VALUE,,AUTO

      263    12118    4                     GOTO INT_BLK_COM;

  12118  2 000754   000756 710000 2                  TRA     INT_BLK_COM

      264    12119    4                   CASE(2);

      265    12120    4                     VALUE = 0;

  12120  2 000755   200042 450100                    STZ     VALUE,,AUTO

      266    12121    4   INT_BLK_COM:
      267    12122    4                     SIZE = P$ -> VX$SC.SIZE;

  12122  2 000756   300001 236100       INT_BLK_COM  LDQ     1,,PR3
         2 000757   777777 376007                    ANQ     -1,DL
         2 000760   200050 756100                    STQ     SIZE,,AUTO

      268    12123    5                     IF SIZE > 0 THEN DO;  /* Make sure its not empty */

  12123  2 000761   001101 600000 2                  TZE     s:12155
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:98   

      269    12124        /**/
      270    12125    5                         ADR = P$ -> VX$SC.ADDRESS;

  12125  2 000762   300000 236100                    LDQ     0,,PR3
         2 000763   777777 376007                    ANQ     -1,DL
         2 000764   200054 756100                    STQ     ADR,,AUTO

      271    12126    5                         NODE# = P$ -> VX$SC.NODE#;

  12126  2 000765   300002 236100                    LDQ     2,,PR3
         2 000766   000022 772000                    QRL     18
         2 000767   200044 756100                    STQ     NODE#,,AUTO

      272    12127    5                         ADR = ADR - 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  12127  2 000770   002000 336007                    LCQ     1024,DL
         2 000771   200054 056100                    ASQ     ADR,,AUTO

      273    12128    6                         DO WHILE( SIZE > 0 );

  12128  2 000772   200050 235100                    LDA     SIZE,,AUTO
         2 000773   001101 600000 2                  TZE     s:12155

      274    12129    6                             ADR = ADR + 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  12129  2 000774   002000 236007                    LDQ     1024,DL
         2 000775   200054 056100                    ASQ     ADR,,AUTO

      275    12130    6                             IF SIZE >= 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ THEN
             12130                                      S_SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  12130  2 000776   200050 235100                    LDA     SIZE,,AUTO
         2 000777   002000 115007                    CMPA    1024,DL
         2 001000   001003 602000 2                  TNC     s:12131

  12130  2 001001   200051 756100                    STQ     S_SIZE,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:99   
         2 001002   001004 710000 2                  TRA     s:12132

      276    12131    6                             ELSE S_SIZE = SIZE;

  12131  2 001003   200051 755100                    STA     S_SIZE,,AUTO

      277    12132    6                             SIZE = SIZE - S_SIZE;

  12132  2 001004   200050 236100                    LDQ     SIZE,,AUTO
         2 001005   200051 136100                    SBLQ    S_SIZE,,AUTO
         2 001006   200050 756100                    STQ     SIZE,,AUTO

      278    12133        /* Set up at most 1 @BUF_SIZE in buffers */
      279    12134    6                             CALL VXU$SETUP( WHERE$, 0/*@DATA*/, ADR, S_SIZE, NODE# );

  12134  2 001007   200044 630500                    EPPR0   NODE#,,AUTO
         2 001010   200104 450500                    STP0    DONE+5,,AUTO
         2 001011   200051 631500                    EPPR1   S_SIZE,,AUTO
         2 001012   200103 451500                    STP1    DONE+4,,AUTO
         2 001013   200054 633500                    EPPR3   ADR,,AUTO
         2 001014   200102 453500                    STP3    DONE+3,,AUTO
         2 001015   000006 236000 3                  LDQ     6
         2 001016   200101 756100                    STQ     DONE+2,,AUTO
         2 001017   200012 634500                    EPPR4   WHERE$,,AUTO
         2 001020   200100 454500                    STP4    DONE+1,,AUTO
         2 001021   200100 630500                    EPPR0   DONE+1,,AUTO
         2 001022   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 001023   000000 701000 xent               TSX1    VXU$SETUP
         2 001024   000000 011000                    NOP     0

      280    12135        /*Now set init conditions */
      281    12136    6                             WHERE$ -> VX$WORD_A(0) = VALUE;

  12136  2 001025   200012 470500                    LDP0    WHERE$,,AUTO
         2 001026   200042 235100                    LDA     VALUE,,AUTO
         2 001027   000000 755100                    STA     0,,PR0

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:100  
      282    12137    6                             NEXT$ = PINCRW( WHERE$, 1 );

  12137  2 001030   200012 236100                    LDQ     WHERE$,,AUTO
         2 001031   000001 036003                    ADLQ    1,DU
         2 001032   200013 756100                    STQ     NEXT$,,AUTO

      283    12138    6                             C_SIZE = 1;

  12138  2 001033   000001 235007                    LDA     1,DL
         2 001034   200052 755100                    STA     C_SIZE,,AUTO

      284    12139    6                             S_SIZE = S_SIZE - 1;

  12139  2 001035   200051 235100                    LDA     S_SIZE,,AUTO
         2 001036   000001 135007                    SBLA    1,DL
         2 001037   200051 755100                    STA     S_SIZE,,AUTO

      285    12140        /* Now do exponential initialization routine */
      286    12141    7                             DO WHILE( S_SIZE > 0 );

  12141  2 001040   001077 600000 2                  TZE     s:12151

      287    12142    7                                 IF C_SIZE < S_SIZE THEN I_SIZE = C_SIZE;

  12142  2 001041   200052 236100                    LDQ     C_SIZE,,AUTO
         2 001042   200051 116100                    CMPQ    S_SIZE,,AUTO
         2 001043   001046 603000 2                  TRC     s:12143

  12142  2 001044   200053 756100                    STQ     I_SIZE,,AUTO
         2 001045   001050 710000 2                  TRA     s:12144

      288    12143    7                                 ELSE I_SIZE = S_SIZE;

  12143  2 001046   200051 235100                    LDA     S_SIZE,,AUTO
         2 001047   200053 755100                    STA     I_SIZE,,AUTO

      289    12144    7                                 S_SIZE = S_SIZE - I_SIZE;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:101  

  12144  2 001050   200051 236100                    LDQ     S_SIZE,,AUTO
         2 001051   200053 136100                    SBLQ    I_SIZE,,AUTO
         2 001052   200051 756100                    STQ     S_SIZE,,AUTO

      290    12145    7                                 VX_TARGET_COUNT = I_SIZE * 4/*@CHAR_WORD*/;

  12145  2 001053   200053 235100                    LDA     I_SIZE,,AUTO
         2 001054   000002 735000                    ALS     2
         2 001055   000000 755000 xsym               STA     VX_TARGET_COUNT

      291    12146    7                                 VX_SOURCE_COUNT = VX_TARGET_COUNT;

  12146  2 001056   000000 755000 xsym               STA     VX_SOURCE_COUNT

      292    12147    7                                 NEXT$ -> VX$TARGET_C = WHERE$ -> VX$SOURCE_C;
             12147                                          /* Do the move */

  12147  2 001057   200012 470500                    LDP0    WHERE$,,AUTO
         2 001060   000000 620005                    EAX0    0,AL
         2 001061   200013 471500                    LDP1    NEXT$,,AUTO
         2 001062   000000 721000 xsym               LXL1    VX_TARGET_COUNT
         2 001063   040140 100540                    MLR     fill='040'O
         2 001064   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         2 001065   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1

      293    12148    7                                 NEXT$ = PINCRW( NEXT$, I_SIZE );

  12148  2 001066   200053 236100                    LDQ     I_SIZE,,AUTO
         2 001067   000022 736000                    QLS     18
         2 001070   200013 036100                    ADLQ    NEXT$,,AUTO
         2 001071   200013 756100                    STQ     NEXT$,,AUTO

      294    12149    7                                 C_SIZE = C_SIZE + I_SIZE;

  12149  2 001072   200052 236100                    LDQ     C_SIZE,,AUTO
         2 001073   200053 036100                    ADLQ    I_SIZE,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:102  
         2 001074   200052 756100                    STQ     C_SIZE,,AUTO

      295    12150    7                                END;       /* Do while( S_SIZE > 0 ); */

  12150  2 001075   200051 235100                    LDA     S_SIZE,,AUTO
         2 001076   001041 601000 2                  TNZ     s:12142

      296    12151    6                            END;           /* Do while( size > 0 ); */

  12151  2 001077   200050 236100                    LDQ     SIZE,,AUTO
         2 001100   000774 601000 2                  TNZ     s:12129

      297    12152    5                        END;               /* If size > 0 then do; */

      298    12153    4                   END;                    /* Do case( P$ -> VX$SC.ATTR.INT ); */

      299    12154    3                END;           /* If VX_CURR$ -> VX$NODE.ALL_BLK_COM then do; */

      300    12155    2             P$ = VX_CURR$ -> VX$NODE.L_START.SC$;

  12155  2 001101   000000 470400 xsym               LDP0    VX_CURR$
         2 001102   000033 236100                    LDQ     27,,PR0
         2 001103   200003 756100                    STQ     P$,,AUTO

      301    12156    3             IF P$ ~= ADDR(NIL) THEN DO;

  12156  2 001104   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001105   001335 600000 2                  TZE     s:12217

      302    12157    3                 Q$ = VX_CURR$ -> VX$NODE.L_STOP.SC$;

  12157  2 001106   000045 236100                    LDQ     37,,PR0
         2 001107   200004 756100                    STQ     Q$,,AUTO

      303    12158    4                 DO WHILE ( P$ <= Q$ );

  12158  2 001110   200003 116100                    CMPQ    P$,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:103  
         2 001111   001335 602000 2                  TNC     s:12217

      304    12159    5                     DO CASE( P$ -> VX$SC.ATTR.INT );

  12159  2 001112   200003 470500                    LDP0    P$,,AUTO
         2 001113   000000 236100                    LDQ     0,,PR0
         2 001114   000030 772000                    QRL     24
         2 001115   000003 376007                    ANQ     3,DL
         2 001116   000003 116007                    CMPQ    3,DL
         2 001117   001121 602006 2                  TNC     s:12159+7,QL
         2 001120   001327 710000 2                  TRA     IGNORE
         2 001121   001327 710000 2                  TRA     IGNORE
         2 001122   001124 710000 2                  TRA     s:12161
         2 001123   001127 710000 2                  TRA     s:12164

      305    12160    5                       CASE(1);            /* Init with uts */

      306    12161    5                         VALUE = VX_LINK_UTS;

  12161  2 001124   000000 235000 xsym               LDA     VX_LINK_UTS
         2 001125   200042 755100                    STA     VALUE,,AUTO

      307    12162    5                         GOTO CONTINUE_INIT;

  12162  2 001126   001130 710000 2                  TRA     CONTINUE_INIT

      308    12163    5                       CASE(2);            /* Init with 0 */

      309    12164    5                         VALUE = 0;

  12164  2 001127   200042 450100                    STZ     VALUE,,AUTO

      310    12165    5   CONTINUE_INIT:
      311    12166    5                         SIZE = P$ -> VX$SC.SIZE;

  12166  2 001130   000001 236100       CONTINUE_IN* LDQ     1,,PR0
         2 001131   777777 376007                    ANQ     -1,DL
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:104  
         2 001132   200050 756100                    STQ     SIZE,,AUTO

      312    12167    6                         IF SIZE > 0 THEN DO; /* Make sure its not empty */

  12167  2 001133   001327 600000 2                  TZE     IGNORE

      313    12168    7                             DO CASE( P$ -> VX$SC.TYPE );
             12168                                      /* Map to appropriate buffer */

  12168  2 001134   000000 236100                    LDQ     0,,PR0
         2 001135   000033 772000                    QRL     27
         2 001136   000077 376007                    ANQ     63,DL
         2 001137   000011 116007                    CMPQ    9,DL
         2 001140   001142 602006 2                  TNC     s:12168+6,QL
         2 001141   001210 710000 2                  TRA     s:12184
         2 001142   001153 710000 2                  TRA     s:12170
         2 001143   001167 710000 2                  TRA     s:12174
         2 001144   001207 710000 2                  TRA     s:12181
         2 001145   001153 710000 2                  TRA     s:12170
         2 001146   001153 710000 2                  TRA     s:12170
         2 001147   001207 710000 2                  TRA     s:12181
         2 001150   001172 710000 2                  TRA     s:12176
         2 001151   001172 710000 2                  TRA     s:12176
         2 001152   001172 710000 2                  TRA     s:12176

      314    12169    7                               CASE( %DATASECTION,%LCOMSECTION,%RLCOMSECTION );

      315    12170    7                                 IF P$ -> VX$SC.ATTR.SEGMENT

  12170  2 001153   000000 236100                    LDQ     0,,PR0
         2 001154   000040 316003                    CANQ    32,DU
         2 001155   001165 600000 2                  TZE     s:12172

      316    12171    7                                 THEN BUFTYP = 3/*@DS3*/ + VX_SEGID( P$ -> VX$SC.SEG )
             12171                                          - VX_SEGID(0/*@DS3SID*/);

  12171  2 001156   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:105  
         2 001157   000041 772000                    QRL     33
         2 001160   000000 236006 xsym               LDQ     VX_SEGID,QL
         2 001161   000000 136000 xsym               SBLQ    VX_SEGID
         2 001162   000003 036007                    ADLQ    3,DL
         2 001163   200043 756100                    STQ     BUFTYP,,AUTO
         2 001164   001210 710000 2                  TRA     s:12184

      317    12172    7                                 ELSE BUFTYP = 0/*@DATA*/;

  12172  2 001165   200043 450100                    STZ     BUFTYP,,AUTO
         2 001166   001210 710000 2                  TRA     s:12184

      318    12173    7                               CASE( %CODESECTION );

      319    12174    7                                 BUFTYP = 1/*@PROC*/;

  12174  2 001167   000001 235007                    LDA     1,DL
         2 001170   200043 755100                    STA     BUFTYP,,AUTO
         2 001171   001210 710000 2                  TRA     s:12184

      320    12175    7                               CASE( %ROSECTION,%ROLCOMSECTION,%RORLCOMSECTION );

      321    12176    7                                 IF P$ -> VX$SC.ATTR.SEGMENT

  12176  2 001172   000000 236100                    LDQ     0,,PR0
         2 001173   000040 316003                    CANQ    32,DU
         2 001174   001204 600000 2                  TZE     s:12178

      322    12177    7                                 THEN BUFTYP = 3/*@DS3*/ + VX_SEGID( P$ -> VX$SC.SEG )
             12177                                          - VX_SEGID(0/*@DS3SID*/);

  12177  2 001175   000000 236100                    LDQ     0,,PR0
         2 001176   000041 772000                    QRL     33
         2 001177   000000 236006 xsym               LDQ     VX_SEGID,QL
         2 001200   000000 136000 xsym               SBLQ    VX_SEGID
         2 001201   000003 036007                    ADLQ    3,DL
         2 001202   200043 756100                    STQ     BUFTYP,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:106  
         2 001203   001210 710000 2                  TRA     s:12184

      323    12178    7                                 ELSE BUFTYP = 1/*@PROC*/;

  12178  2 001204   000001 235007                    LDA     1,DL
         2 001205   200043 755100                    STA     BUFTYP,,AUTO
         2 001206   001210 710000 2                  TRA     s:12184

      324    12179    7                               CASE( %DCBSECTION,

      325    12180    7                                             %UCOMSECTION );
      326    12181    7                                 GOTO IGNORE;

  12181  2 001207   001327 710000 2                  TRA     IGNORE

      327    12182    7                               END;        /* Do case */

      328    12183        /**/
      329    12184    6                             ADR = P$ -> VX$SC.ADDRESS;

  12184  2 001210   000000 236100                    LDQ     0,,PR0
         2 001211   777777 376007                    ANQ     -1,DL
         2 001212   200054 756100                    STQ     ADR,,AUTO

      330    12185    6                             NODE# = P$ -> VX$SC.NODE#;

  12185  2 001213   000002 236100                    LDQ     2,,PR0
         2 001214   000022 772000                    QRL     18
         2 001215   200044 756100                    STQ     NODE#,,AUTO

      331    12186    6                             ADR = ADR - 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  12186  2 001216   002000 336007                    LCQ     1024,DL
         2 001217   200054 056100                    ASQ     ADR,,AUTO

      332    12187    7                             DO WHILE( SIZE > 0 );

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:107  
  12187  2 001220   200050 235100                    LDA     SIZE,,AUTO
         2 001221   001327 600000 2                  TZE     IGNORE

      333    12188    7                                 ADR = ADR + 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  12188  2 001222   002000 236007                    LDQ     1024,DL
         2 001223   200054 056100                    ASQ     ADR,,AUTO

      334    12189    7                                 IF SIZE >= 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/
             12189                                          THEN S_SIZE = 1024
             12189                                          /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  12189  2 001224   200050 235100                    LDA     SIZE,,AUTO
         2 001225   002000 115007                    CMPA    1024,DL
         2 001226   001231 602000 2                  TNC     s:12190

  12189  2 001227   200051 756100                    STQ     S_SIZE,,AUTO
         2 001230   001232 710000 2                  TRA     s:12191

      335    12190    7                                 ELSE S_SIZE = SIZE;

  12190  2 001231   200051 755100                    STA     S_SIZE,,AUTO

      336    12191    7                                 SIZE = SIZE - S_SIZE;

  12191  2 001232   200050 236100                    LDQ     SIZE,,AUTO
         2 001233   200051 136100                    SBLQ    S_SIZE,,AUTO
         2 001234   200050 756100                    STQ     SIZE,,AUTO

      337    12192        /* Set up at most 1 @BUF_SIZE in buffers */
      338    12193    7                                 CALL VXU$SETUP( WHERE$, BUFTYP, ADR, S_SIZE, NODE# );

  12193  2 001235   200044 630500                    EPPR0   NODE#,,AUTO
         2 001236   200104 450500                    STP0    DONE+5,,AUTO
         2 001237   200051 631500                    EPPR1   S_SIZE,,AUTO
         2 001240   200103 451500                    STP1    DONE+4,,AUTO
         2 001241   200054 633500                    EPPR3   ADR,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:108  
         2 001242   200102 453500                    STP3    DONE+3,,AUTO
         2 001243   200043 634500                    EPPR4   BUFTYP,,AUTO
         2 001244   200101 454500                    STP4    DONE+2,,AUTO
         2 001245   200012 635500                    EPPR5   WHERE$,,AUTO
         2 001246   200100 455500                    STP5    DONE+1,,AUTO
         2 001247   200100 630500                    EPPR0   DONE+1,,AUTO
         2 001250   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 001251   000000 701000 xent               TSX1    VXU$SETUP
         2 001252   000000 011000                    NOP     0

      339    12194        /*Now set init conditions */
      340    12195    7                                 WHERE$ -> VX$WORD_A(0) = VALUE;

  12195  2 001253   200012 470500                    LDP0    WHERE$,,AUTO
         2 001254   200042 235100                    LDA     VALUE,,AUTO
         2 001255   000000 755100                    STA     0,,PR0

      341    12196    7                                 NEXT$ = PINCRW( WHERE$, 1 );

  12196  2 001256   200012 236100                    LDQ     WHERE$,,AUTO
         2 001257   000001 036003                    ADLQ    1,DU
         2 001260   200013 756100                    STQ     NEXT$,,AUTO

      342    12197    7                                 C_SIZE = 1;

  12197  2 001261   000001 235007                    LDA     1,DL
         2 001262   200052 755100                    STA     C_SIZE,,AUTO

      343    12198    7                                 S_SIZE = S_SIZE - 1;

  12198  2 001263   200051 235100                    LDA     S_SIZE,,AUTO
         2 001264   000001 135007                    SBLA    1,DL
         2 001265   200051 755100                    STA     S_SIZE,,AUTO

      344    12199        /* Now do exponential initialization routine */
      345    12200    8                                 DO WHILE( S_SIZE > 0 );

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:109  
  12200  2 001266   001325 600000 2                  TZE     s:12210

      346    12201    8                                     IF C_SIZE < S_SIZE THEN I_SIZE = C_SIZE;

  12201  2 001267   200052 236100                    LDQ     C_SIZE,,AUTO
         2 001270   200051 116100                    CMPQ    S_SIZE,,AUTO
         2 001271   001274 603000 2                  TRC     s:12202

  12201  2 001272   200053 756100                    STQ     I_SIZE,,AUTO
         2 001273   001276 710000 2                  TRA     s:12203

      347    12202    8                                     ELSE I_SIZE = S_SIZE;

  12202  2 001274   200051 235100                    LDA     S_SIZE,,AUTO
         2 001275   200053 755100                    STA     I_SIZE,,AUTO

      348    12203    8                                     S_SIZE = S_SIZE - I_SIZE;

  12203  2 001276   200051 236100                    LDQ     S_SIZE,,AUTO
         2 001277   200053 136100                    SBLQ    I_SIZE,,AUTO
         2 001300   200051 756100                    STQ     S_SIZE,,AUTO

      349    12204    8                                     VX_TARGET_COUNT = I_SIZE * 4/*@CHAR_WORD*/;

  12204  2 001301   200053 235100                    LDA     I_SIZE,,AUTO
         2 001302   000002 735000                    ALS     2
         2 001303   000000 755000 xsym               STA     VX_TARGET_COUNT

      350    12205    8                                     VX_SOURCE_COUNT = VX_TARGET_COUNT;

  12205  2 001304   000000 755000 xsym               STA     VX_SOURCE_COUNT

      351    12206    8                                     NEXT$ -> VX$TARGET_C = WHERE$ -> VX$SOURCE_C;
             12206                                              /* Do the move */

  12206  2 001305   200012 470500                    LDP0    WHERE$,,AUTO
         2 001306   000000 620005                    EAX0    0,AL
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:110  
         2 001307   200013 471500                    LDP1    NEXT$,,AUTO
         2 001310   000000 721000 xsym               LXL1    VX_TARGET_COUNT
         2 001311   040140 100540                    MLR     fill='040'O
         2 001312   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         2 001313   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1

      352    12207    8                                     NEXT$ = PINCRW( NEXT$, I_SIZE );

  12207  2 001314   200053 236100                    LDQ     I_SIZE,,AUTO
         2 001315   000022 736000                    QLS     18
         2 001316   200013 036100                    ADLQ    NEXT$,,AUTO
         2 001317   200013 756100                    STQ     NEXT$,,AUTO

      353    12208    8                                     C_SIZE = C_SIZE + I_SIZE;

  12208  2 001320   200052 236100                    LDQ     C_SIZE,,AUTO
         2 001321   200053 036100                    ADLQ    I_SIZE,,AUTO
         2 001322   200052 756100                    STQ     C_SIZE,,AUTO

      354    12209    8                                    END;   /* Do while( S_SIZE > 0 ); */

  12209  2 001323   200051 235100                    LDA     S_SIZE,,AUTO
         2 001324   001267 601000 2                  TNZ     s:12201

      355    12210    7                                END;       /* Do while( size > 0 ); */

  12210  2 001325   200050 236100                    LDQ     SIZE,,AUTO
         2 001326   001222 601000 2                  TNZ     s:12188

      356    12211    6                            END;           /* If size > 0 then do; */

      357    12212    5                       END;                /* Do case( P$ -> VX$SC.ATTR.INT ); */

      358    12213    4   IGNORE:
      359    12214    4                     P$ = PINCRW( P$, SIZEW( VX$SC ) );

  12214  2 001327   200003 236100       IGNORE       LDQ     P$,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:111  
         2 001330   000003 036003                    ADLQ    3,DU
         2 001331   200003 756100                    STQ     P$,,AUTO

      360    12215    4                    END;                   /* Do while ( P$ <= Q$ ); */

  12215  2 001332   200004 116100                    CMPQ    Q$,,AUTO
         2 001333   001112 602000 2                  TNC     s:12159
         2 001334   001112 600000 2                  TZE     s:12159

      361    12216    3                END;                       /* If P$ ~= addr(nil) then do */

      362    12217    3            IF VX_CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */

  12217  2 001335   000000 470400 xsym               LDP0    VX_CURR$
         2 001336   000000 236100                    LDQ     0,,PR0
         2 001337   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001340   001343 600000 2                  TZE     s:12221

      363    12218    3                 VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;

  12218  2 001341   000000 756000 xsym               STQ     VX_CURR$

      364    12219    3                END;

  12219  2 001342   000661 710000 2                  TRA     s:12088

      365    12220    3             ELSE DO;

      366    12221    4                 DO WHILE( VX_CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );

  12221  2 001343   001351 710000 2                  TRA     s:12224

      367    12222    4                     VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$; /* Move up */

  12222  2 001344   000000 470400 xsym               LDP0    VX_CURR$
         2 001345   000002 236100                    LDQ     2,,PR0
         2 001346   000000 756000 xsym               STQ     VX_CURR$
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:112  

      368    12223    4                     IF VX_CURR$ = ADDR(NIL) THEN GOTO DONE_INIT; /* Check if done */

  12223  2 001347   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001350   001357 600000 2                  TZE     DONE_INIT

      369    12224    4                    END;

  12224  2 001351   000000 470400 xsym               LDP0    VX_CURR$
         2 001352   000001 236100                    LDQ     1,,PR0
         2 001353   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001354   001344 600000 2                  TZE     s:12222

      370    12225    3                 VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$; /* Move to a brother */

  12225  2 001355   000000 756000 xsym               STQ     VX_CURR$

      371    12226    3                END;                       /* Else do */

      372    12227    2            END;                           /* Do forever */

  12227  2 001356   000661 710000 2                  TRA     s:12088

      373    12228    1   DONE_INIT:
      374    12229        /*
      375    12230              Allocate buffers for refs from object unit
      376    12231        */
      377    12232    2         DO I = 0 TO SIZEW( VX_PASS2_REF.OU.MAX_A ) - 1;

  12232  2 001357   200026 450100       DONE_INIT    STZ     I,,AUTO
         2 001360   001425 710000 2                  TRA     s:12247+3

      378    12233    2             MX = VX_PASS2_REF.OU.MAX_A(I);

  12233  2 001361   200026 720100                    LXL0    I,,AUTO
         2 001362   000000 235010 xsym               LDA     VX_PASS2_REF,X0
         2 001363   200034 755100                    STA     MX,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:113  

      379    12234    3             IF MX > 0 THEN DO;

  12234  2 001364   001422 600000 2                  TZE     s:12247

      380    12235                      %ALLOCATE(
      381    12236                      PTR$="VX_PASS2_REF.OU.L_START_A$(I)",
      382    12237                      TYPE=@SC_DS_2,
      383    12238                      SIZE=MX);

  12239  2 001365   000007 236000 xsym               LDQ     VX_M_ALL+7
         2 001366   000007 136000 xsym               SBLQ    VX_M_FREE+7
         2 001367   001402 604000 2                  TMI     s:12243
         2 001370   200034 116100                    CMPQ    MX,,AUTO
         2 001371   001402 602000 2                  TNC     s:12243

  12240  2 001372   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 001373   000022 736000                    QLS     18
         2 001374   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         2 001375   000004 756010 xsym               STQ     VX_PASS2_REF+4,X0

  12241  2 001376   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 001377   200034 036100                    ADLQ    MX,,AUTO
         2 001400   000007 756000 xsym               STQ     VX_M_FREE+7

  12242  2 001401   001414 710000 2                  TRA     s:12245

  12243  2 001402   200034 630500                    EPPR0   MX,,AUTO
         2 001403   200102 450500                    STP0    DONE+3,,AUTO
         2 001404   000012 236000 3                  LDQ     10
         2 001405   200101 756100                    STQ     DONE+2,,AUTO
         2 001406   000004 631410 xsym               EPPR1   VX_PASS2_REF+4,X0
         2 001407   200100 451500                    STP1    DONE+1,,AUTO
         2 001410   200100 630500                    EPPR0   DONE+1,,AUTO
         2 001411   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001412   000000 701000 xent               TSX1    VXA$GET
         2 001413   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:114  

      384    12245    3                 IF VX_SLIB_AREA$ = ADDR(NIL) THEN VX_SLIB_AREA$ = VX_PASS2_REF.OU.
             12245                          L_START_A$(I);

  12245  2 001414   000000 236000 xsym               LDQ     VX_SLIB_AREA$
         2 001415   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001416   001422 601000 2                  TNZ     s:12247

  12245  2 001417   200026 720100                    LXL0    I,,AUTO
         2 001420   000004 236010 xsym               LDQ     VX_PASS2_REF+4,X0
         2 001421   000000 756000 xsym               STQ     VX_SLIB_AREA$

      385    12246    3                END;                       /* If mx > 0 then do; */

      386    12247    2            END;           /* Do i = 0 to sizew( VX_PASS2_REF.OU.MAX_A ) - 1; */

  12247  2 001422   200026 235100                    LDA     I,,AUTO
         2 001423   000001 035007                    ADLA    1,DL
         2 001424   200026 755100                    STA     I,,AUTO
         2 001425   200026 235100                    LDA     I,,AUTO
         2 001426   000004 115007                    CMPA    4,DL
         2 001427   001361 602000 2                  TNC     s:12233

      387    12248        /*
      388    12249              Allocate buffers for (un)satisfied refs
      389    12250        */
      390    12251    2         DO I = 1 TO SIZEW( VX_PASS2_REF.OU.MAX_A ) - 1;

  12251  2 001430   000001 236007                    LDQ     1,DL
         2 001431   200026 756100                    STQ     I,,AUTO
         2 001432   001472 710000 2                  TRA     s:12265+3

      391    12252    2             MX = VX_PASS2_REF.OU.MAX_A(I) * SIZEW(VXR$SAT);

  12252  2 001433   200026 720100                    LXL0    I,,AUTO
         2 001434   000000 235010 xsym               LDA     VX_PASS2_REF,X0
         2 001435   000001 735000                    ALS     1
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:115  
         2 001436   200034 755100                    STA     MX,,AUTO

      392    12253    3             IF MX > 0 THEN DO;

  12253  2 001437   001467 600000 2                  TZE     s:12265

      393    12254                      %ALLOCATE(
      394    12255                      PTR$="VX_PASS2_REF.SAT.L_START_A$(I)",
      395    12256                      TYPE=@SC_DS_2,
      396    12257                      SIZE=MX);

  12258  2 001440   000007 236000 xsym               LDQ     VX_M_ALL+7
         2 001441   000007 136000 xsym               SBLQ    VX_M_FREE+7
         2 001442   001455 604000 2                  TMI     s:12262
         2 001443   200034 116100                    CMPQ    MX,,AUTO
         2 001444   001455 602000 2                  TNC     s:12262

  12259  2 001445   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 001446   000022 736000                    QLS     18
         2 001447   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         2 001450   000024 756010 xsym               STQ     VX_PASS2_REF+20,X0

  12260  2 001451   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 001452   200034 036100                    ADLQ    MX,,AUTO
         2 001453   000007 756000 xsym               STQ     VX_M_FREE+7

  12261  2 001454   001467 710000 2                  TRA     s:12265

  12262  2 001455   200034 630500                    EPPR0   MX,,AUTO
         2 001456   200102 450500                    STP0    DONE+3,,AUTO
         2 001457   000012 236000 3                  LDQ     10
         2 001460   200101 756100                    STQ     DONE+2,,AUTO
         2 001461   000024 631410 xsym               EPPR1   VX_PASS2_REF+20,X0
         2 001462   200100 451500                    STP1    DONE+1,,AUTO
         2 001463   200100 630500                    EPPR0   DONE+1,,AUTO
         2 001464   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001465   000000 701000 xent               TSX1    VXA$GET
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:116  
         2 001466   000000 011000                    NOP     0

      397    12264    3                END;                       /* If mx > 0 then do; */

      398    12265    2            END;           /* Do i = 0 to sizew( VX_PASS2_REF.OU.MAX_A ) - 1; */

  12265  2 001467   200026 235100                    LDA     I,,AUTO
         2 001470   000001 035007                    ADLA    1,DL
         2 001471   200026 755100                    STA     I,,AUTO
         2 001472   200026 235100                    LDA     I,,AUTO
         2 001473   000004 115007                    CMPA    4,DL
         2 001474   001433 602000 2                  TNC     s:12252

      399    12266        /*
      400    12267              Allocate bref space
      401    12268        */
      402    12269    2         IF VX_O.NUM.BREF ~= 0 THEN DO;

  12269  2 001475   000035 236000 xsym               LDQ     VX_O+29
         2 001476   001525 600000 2                  TZE     s:12283

      403    12270    2             VX_BREF_SIZE = VX_O.NUM.BREF * SIZEW( VX$BREF );

  12270  2 001477   000035 235000 xsym               LDA     VX_O+29
         2 001500   000001 735000                    ALS     1
         2 001501   000000 755000 xsym               STA     VX_BREF_SIZE

      404    12271                  %ALLOCATE(
      405    12272                  PTR$=VX_BREF_START$,
      406    12273                  TYPE=@SC_DS_2,
      407    12274                  SIZE=VX_BREF_SIZE);

  12275  2 001502   000007 236000 xsym               LDQ     VX_M_ALL+7
         2 001503   000007 136000 xsym               SBLQ    VX_M_FREE+7
         2 001504   001517 604000 2                  TMI     s:12279
         2 001505   000000 116000 xsym               CMPQ    VX_BREF_SIZE
         2 001506   001517 602000 2                  TNC     s:12279
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:117  

  12276  2 001507   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 001510   000022 736000                    QLS     18
         2 001511   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         2 001512   000000 756000 xsym               STQ     VX_BREF_START$

  12277  2 001513   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 001514   000000 036000 xsym               ADLQ    VX_BREF_SIZE
         2 001515   000007 756000 xsym               STQ     VX_M_FREE+7

  12278  2 001516   001523 710000 2                  TRA     s:12281

  12279  2 001517   000014 630400 3                  EPPR0   12
         2 001520   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001521   000000 701000 xent               TSX1    VXA$GET
         2 001522   000000 011000                    NOP     0

      408    12281    2             VX_NEXT_BREF$ = VX_BREF_START$;

  12281  2 001523   000000 236000 xsym               LDQ     VX_BREF_START$
         2 001524   000000 756000 xsym               STQ     VX_NEXT_BREF$

      409    12282    2            END;

      410    12283    2         IF VX_SPC_DATA_INSERT THEN DO;

  12283  2 001525   000000 234000 xsym               SZN     VX_SPC_DATA_INSERT
         2 001526   001571 605000 2                  TPL     s:12294

      411    12284    2             K = 2/*@SPC_FAULT_AREA_SIZEW*/ + 10/*@SPC_DELTA_AREA_SIZEW*/ + 16
             12284                      /*@TCB_SIZE*/;

  12284  2 001527   000034 235007                    LDA     28,DL
         2 001530   200030 755100                    STA     K,,AUTO

      412    12285    2             IF VX_OD.NUM.DBIAS AND VX_SLIB_INIT$ = ADDR(NIL)

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:118  
  12285  2 001531   000000 236000 xsym               LDQ     VX_OD
         2 001532   000020 316007                    CANQ    16,DL
         2 001533   001542 600000 2                  TZE     s:12287
         2 001534   000000 236000 xsym               LDQ     VX_SLIB_INIT$
         2 001535   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001536   001542 601000 2                  TNZ     s:12287

      413    12286    2             THEN I = VX_PROGRAM_BIAS.A(0);

  12286  2 001537   000000 235000 xsym               LDA     VX_PROGRAM_BIAS
         2 001540   200026 755100                    STA     I,,AUTO
         2 001541   001544 710000 2                  TRA     s:12288

      414    12287    2             ELSE I = VX_SPC.FAULT;

  12287  2 001542   000062 236000 xsym               LDQ     VX_SPC+50
         2 001543   200026 756100                    STQ     I,,AUTO

      415    12288    2             CALL VXU$SETUP(BUF$,0,I,K,0);

  12288  2 001544   000006 236000 3                  LDQ     6
         2 001545   200104 756100                    STQ     DONE+5,,AUTO
         2 001546   200030 630500                    EPPR0   K,,AUTO
         2 001547   200103 450500                    STP0    DONE+4,,AUTO
         2 001550   200026 631500                    EPPR1   I,,AUTO
         2 001551   200102 451500                    STP1    DONE+3,,AUTO
         2 001552   200101 756100                    STQ     DONE+2,,AUTO
         2 001553   200025 633500                    EPPR3   BUF$,,AUTO
         2 001554   200100 453500                    STP3    DONE+1,,AUTO
         2 001555   200100 630500                    EPPR0   DONE+1,,AUTO
         2 001556   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 001557   000000 701000 xent               TSX1    VXU$SETUP
         2 001560   000000 011000                    NOP     0

      416    12289    2             VX_TARGET_COUNT = K * 4/*@CHAR_WORD*/ * 9/*@BIT_CHAR*/;

  12289  2 001561   200030 236100                    LDQ     K,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:119  
         2 001562   000044 402007                    MPY     36,DL
         2 001563   000000 756000 xsym               STQ     VX_TARGET_COUNT

      417    12290    2             BUF$ -> VX$TARGET_B = '0'B;

  12290  2 001564   200025 470500                    LDP0    BUF$,,AUTO
         2 001565   000000 620006                    EAX0    0,QL
         2 001566   003140 060400                    CSL     bolr='003'O
         2 001567   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         2 001570   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0

      418    12291    2            END;                           /* If VX_SPC_DATA_INSERT */

      419    12292        /**/
      420    12293        /**/
      421    12294    1         SC_BASE$ = VX_ROOT$ -> VX$NODE.L_START.SC$;

  12294  2 001571   000000 470400 xsym               LDP0    VX_ROOT$
         2 001572   000033 236100                    LDQ     27,,PR0
         2 001573   200021 756100                    STQ     SC_BASE$,,AUTO

      422    12295    1         VX_CURR$ = VX_ROOT$;

  12295  2 001574   000000 236000 xsym               LDQ     VX_ROOT$
         2 001575   000000 756000 xsym               STQ     VX_CURR$

      423    12296    2         DO WHILE( '1'B );

      424    12297    2             VX_CURR$ -> VX$NODE.L_PREV_SIZE.DN = 0;

  12297  2 001576   000000 470400 xsym               LDP0    VX_CURR$
         2 001577   000067 450100                    STZ     55,,PR0

      425    12298    3             DO J = 1 TO SIZEW( VX_DEF_REC_A ) - 1 ;

  12298  2 001600   000001 235007                    LDA     1,DL
         2 001601   200027 755100                    STA     J,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:120  
         2 001602   002664 710000 2                  TRA     s:12559+3

      426    12299    3                 RTYPE = VX_DEF_REC_A(J);

  12299  2 001603   200027 720100                    LXL0    J,,AUTO
         2 001604   000000 235010 xsym               LDA     VX_DEF_REC_A,X0
         2 001605   200032 755100                    STA     RTYPE,,AUTO

      427    12300    3                 SIZE  = VX_CURR$ -> VX$NODE.L_SIZE_A(RTYPE);

  12300  2 001606   000000 470400 xsym               LDP0    VX_CURR$
         2 001607   000054 235105                    LDA     44,AL,PR0
         2 001610   200050 755100                    STA     SIZE,,AUTO

      428    12301    3                 VX_CURR$ -> VX$NODE.L_START_A$(RTYPE) = ADDR(NIL);

  12301  2 001611   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001612   200032 721100                    LXL1    RTYPE,,AUTO
         2 001613   000030 756111                    STQ     24,X1,PR0

      429    12302    3                 VX_CURR$ -> VX$NODE.L_STOP_A$(RTYPE) = ADDR(NIL);

  12302  2 001614   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001615   000000 470400 xsym               LDP0    VX_CURR$
         2 001616   200032 720100                    LXL0    RTYPE,,AUTO
         2 001617   000042 756110                    STQ     34,X0,PR0

      430    12303    3                 VX_CURR$ -> VX$NODE.L_SIZE_A(RTYPE)  = 0;

  12303  2 001620   000000 470400 xsym               LDP0    VX_CURR$
         2 001621   200032 720100                    LXL0    RTYPE,,AUTO
         2 001622   000054 450110                    STZ     44,X0,PR0

      431    12304    3                 VX_CURR$ -> VX$NODE.L_PREV_SIZE_A(RTYPE) = 0;

  12304  2 001623   000000 470400 xsym               LDP0    VX_CURR$
         2 001624   200032 720100                    LXL0    RTYPE,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:121  
         2 001625   000066 450110                    STZ     54,X0,PR0

      432    12305    4                 IF SIZE > 0 THEN DO;

  12305  2 001626   200050 235100                    LDA     SIZE,,AUTO
         2 001627   001751 600000 2                  TZE     s:12362

      433    12306    4                     J1 = J - 1;

  12306  2 001630   200027 236100                    LDQ     J,,AUTO
         2 001631   000001 136007                    SBLQ    1,DL
         2 001632   200033 756100                    STQ     J1,,AUTO

      434    12307                          %ALLOCATE(
      435    12308                          PTR$=WHERE$,
      436    12309                          TYPE=@DD_DS_2,
      437    12310                          SIZE=SIZE);

  12311  2 001633   000007 236000 xsym               LDQ     VX_M_ALL+7
         2 001634   000007 136000 xsym               SBLQ    VX_M_FREE+7
         2 001635   001650 604000 2                  TMI     s:12315
         2 001636   200050 116100                    CMPQ    SIZE,,AUTO
         2 001637   001650 602000 2                  TNC     s:12315

  12312  2 001640   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 001641   000022 736000                    QLS     18
         2 001642   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         2 001643   200012 756100                    STQ     WHERE$,,AUTO

  12313  2 001644   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 001645   200050 036100                    ADLQ    SIZE,,AUTO
         2 001646   000007 756000 xsym               STQ     VX_M_FREE+7

  12314  2 001647   001662 710000 2                  TRA     s:12317

  12315  2 001650   200050 630500                    EPPR0   SIZE,,AUTO
         2 001651   200102 450500                    STP0    DONE+3,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:122  
         2 001652   000012 236000 3                  LDQ     10
         2 001653   200101 756100                    STQ     DONE+2,,AUTO
         2 001654   200012 631500                    EPPR1   WHERE$,,AUTO
         2 001655   200100 451500                    STP1    DONE+1,,AUTO
         2 001656   200100 630500                    EPPR0   DONE+1,,AUTO
         2 001657   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001660   000000 701000 xent               TSX1    VXA$GET
         2 001661   000000 011000                    NOP     0

      438    12317    4                     CALL VXU$PREAD( I,

  12317  2 001662   000020 237000 3                  LDAQ    16
         2 001663   200112 757100                    STAQ    DONE+11,,AUTO
         2 001664   200050 630500                    EPPR0   SIZE,,AUTO
         2 001665   200111 450500                    STP0    DONE+10,,AUTO
         2 001666   000012 236000 3                  LDQ     10
         2 001667   200110 756100                    STQ     DONE+9,,AUTO
         2 001670   200050 631500                    EPPR1   SIZE,,AUTO
         2 001671   200107 451500                    STP1    DONE+8,,AUTO
         2 001672   200050 633500                    EPPR3   SIZE,,AUTO
         2 001673   200106 453500                    STP3    DONE+7,,AUTO
         2 001674   200012 634500                    EPPR4   WHERE$,,AUTO
         2 001675   200105 454500                    STP4    DONE+6,,AUTO
         2 001676   200032 635500                    EPPR5   RTYPE,,AUTO
         2 001677   200104 455500                    STP5    DONE+5,,AUTO
         2 001700   000022 237000 3                  LDAQ    18
         2 001701   200102 757100                    STAQ    DONE+3,,AUTO
         2 001702   200030 636500                    EPPR6   K,,AUTO
         2 001703   200101 456500                    STP6    DONE+2,,AUTO
         2 001704   200026 637500                    EPPR7   I,,AUTO
         2 001705   200100 457500                    STP7    DONE+1,,AUTO
         2 001706   200100 630500                    EPPR0   DONE+1,,AUTO
         2 001707   000017 631400 3                  EPPR1   15
         2 001710   000000 701000 xent               TSX1    VXU$PREAD
         2 001711   000000 011000                    NOP     0

      439    12318    4                             K,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:123  
      440    12319    4                             1/*@RF*/,
      441    12320    4                             1/*@RF*/,
      442    12321    4                             RTYPE,
      443    12322    4                             WHERE$,
      444    12323    4                             SIZE,
      445    12324    4                             SIZE,
      446    12325    4                             7/*@DD_DS_2*/,
      447    12326    4                             SIZE,
      448    12327    4                             VX_CURR$,
      449    12328    4                             0
      450    12329    4                             );
      451    12330    5                     IF K ~= SIZE THEN DO;

  12330  2 001712   200030 236100                    LDQ     K,,AUTO
         2 001713   200050 116100                    CMPQ    SIZE,,AUTO
         2 001714   001751 600000 2                  TZE     s:12362

      452    12331        /*E*  ERROR: VXT-E$INTERNAL_BNDADR_VX-0
      453    12332              MESSAGE: Internal LINK error. Inconsistent sizes in VXT$PRE. %U1 vs. %U2.
      454    12333              DESCRIPTION: Self-explanatory.
      455    12334        */
      456    12335                              %NUMBER(
      457    12336                              NUM1=SIZE, SIZE1=6, BASE1=10,
      458    12337                              NUM2=K, SIZE2=6, BASE2=10);

  12343  2 001715   000024 236000 3                  LDQ     20
         2 001716   200104 756100                    STQ     DONE+5,,AUTO
         2 001717   200050 630500                    EPPR0   SIZE,,AUTO
         2 001720   200103 450500                    STP0    DONE+4,,AUTO
         2 001721   000025 236000 3                  LDQ     21
         2 001722   200102 756100                    STQ     DONE+3,,AUTO
         2 001723   000026 237000 3                  LDAQ    22
         2 001724   200100 757100                    STAQ    DONE+1,,AUTO
         2 001725   200100 630500                    EPPR0   DONE+1,,AUTO
         2 001726   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 001727   000000 701000 xent               TSX1    VXD$B2C
         2 001730   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:124  

  12347  2 001731   000024 236000 3                  LDQ     20
         2 001732   200104 756100                    STQ     DONE+5,,AUTO
         2 001733   200030 630500                    EPPR0   K,,AUTO
         2 001734   200103 450500                    STP0    DONE+4,,AUTO
         2 001735   000031 236000 3                  LDQ     25
         2 001736   200102 756100                    STQ     DONE+3,,AUTO
         2 001737   000032 237000 3                  LDAQ    26
         2 001740   200100 757100                    STAQ    DONE+1,,AUTO
         2 001741   200100 630500                    EPPR0   DONE+1,,AUTO
         2 001742   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 001743   000000 701000 xent               TSX1    VXD$B2C
         2 001744   000000 011000                    NOP     0

      459    12354                              %SCREAM(
      460    12355                              ERR#=E$INTERNAL_BNDADR_VX,
      461    12356                              LEVEL=@E$F_VX,
      462    12357                              MID="'T'");

  12358  2 001745   000035 630400 3                  EPPR0   29
         2 001746   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 001747   000000 701000 xent               TSX1    VXE$ERROR
         2 001750   000000 011000                    NOP     0

      463    12360    5                        END;

      464    12361    4                    END;                   /* If size > 0 then do; */

      465    12362    4                 IF VX_CURR$ = VX_ROOT$ AND RTYPE = %TYPSDEF THEN DO;

  12362  2 001751   000000 236000 xsym               LDQ     VX_CURR$
         2 001752   000000 116000 xsym               CMPQ    VX_ROOT$
         2 001753   002537 601000 2                  TNZ     s:12527
         2 001754   200032 235100                    LDA     RTYPE,,AUTO
         2 001755   000006 115007                    CMPA    6,DL
         2 001756   002537 601000 2                  TNZ     s:12527

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:125  
      466    12363    5                     IF VX_HAVE_SPC > 0 THEN DO;

  12363  2 001757   000000 235000 xsym               LDA     VX_HAVE_SPC
         2 001760   002254 600000 2                  TZE     s:12470

      467    12364    5                         BIN_START$ = VX_ROOT$ -> VX$NODE.L_START.DD$;

  12364  2 001761   000000 470400 xsym               LDP0    VX_ROOT$
         2 001762   000036 236100                    LDQ     30,,PR0
         2 001763   200063 756100                    STQ     BIN_START$,,AUTO

      468    12365    5                         BIN_STOP$  = VX_ROOT$ -> VX$NODE.L_STOP.DD$;

  12365  2 001764   000050 236100                    LDQ     40,,PR0
         2 001765   200064 756100                    STQ     BIN_STOP$,,AUTO

      469    12366    5                         BIN_N$     = VX_ROOT$ -> VX$NODE.L_START.DN$;

  12366  2 001766   000031 236100                    LDQ     25,,PR0
         2 001767   200066 756100                    STQ     BIN_N$,,AUTO

      470    12367    5                         P$ = VX_MERGE_START$;

  12367  2 001770   000000 236000 xsym               LDQ     VX_MERGE_START$
         2 001771   200003 756100                    STQ     P$,,AUTO

      471    12368    5                         Q$ = VX_MERGE_START$;

  12368  2 001772   200004 756100                    STQ     Q$,,AUTO

      472    12369    6                         DO WHILE( P$ <= VX_MERGE_STOP$ );

  12369  2 001773   000000 116000 xsym               CMPQ    VX_MERGE_STOP$
         2 001774   001776 600000 2                  TZE     s:12370
         2 001775   002251 603000 2                  TRC     s:12468

      473    12370    6                             BIN_MATCH$ = PINCRW( BIN_N$, P$->VXD$TMPLT.NPOINTER );
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:126  

  12370  2 001776   200003 470500                    LDP0    P$,,AUTO
         2 001777   000001 220100                    LDX0    1,,PR0
         2 002000   000000 636010                    EAQ     0,X0
         2 002001   200066 036100                    ADLQ    BIN_N$,,AUTO
         2 002002   200067 756100                    STQ     BIN_MATCH$,,AUTO

      474    12371                                  %BIN_SEARCH(
      475    12372                                  START$=BIN_START$,
      476    12373                                  STOP$=BIN_STOP$,
      477    12374                                  RESULT$=BIN_RESULT$,
      478    12375                                  N$=BIN_N$,
      479    12376                                  MATCH$=BIN_MATCH$,
      480    12377                                  NAME_DISP=2,
      481    12378                                  SIZE="SIZEW(VXD$TMPLT)",
      482    12379                                  SPLIT=BIN_SPLIT_SPC,
      483    12380                                  CHECK=BIN_CHECK_SPC,
      484    12381                                  FOUND=BIN_FOUND_SPC,
      485    12382                                  NEG=%@COMMENT,
      486    12383                                  GEN=%@TNEMMOC,
      487    12384                                  ALTRETURN=NOT_FOUND_SPC,
      488    12385                                  EMPTY=NOT_FOUND_SPC );
             12387    6           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND_SPC;

  12387  2 002003   200063 236100                    LDQ     BIN_START$,,AUTO
         2 002004   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002005   002231 600000 2                  TZE     NOT_FOUND_SPC

             12388    7           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;

  12388  2 002006   200063 235100                    LDA     BIN_START$,,AUTO
         2 002007   000022 771000                    ARL     18
         2 002010   200100 755100                    STA     DONE+1,,AUTO
         2 002011   200064 236100                    LDQ     BIN_STOP$,,AUTO
         2 002012   000022 772000                    QRL     18
         2 002013   200100 136100                    SBLQ    DONE+1,,AUTO
         2 002014   000002 506007                    DIV     2,DL
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:127  
         2 002015   000021 116007                    CMPQ    17,DL
         2 002016   002052 605000 2                  TPL     s:12405

             12389    7              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  12389  2 002017   200063 236100                    LDQ     BIN_START$,,AUTO
         2 002020   200065 756100                    STQ     BIN_RESULT$,,AUTO

             12390    8              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  12390  2 002021   200064 116100                    CMPQ    BIN_STOP$,,AUTO
         2 002022   002024 600000 2                  TZE     s:12391
         2 002023   002051 603000 2                  TRC     s:12402

             12391    8                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  12391  2 002024   200065 470500                    LDP0    BIN_RESULT$,,AUTO
         2 002025   000001 220100                    LDX0    1,,PR0
         2 002026   000000 636010                    EAQ     0,X0
         2 002027   200066 036100                    ADLQ    BIN_N$,,AUTO
         2 002030   200061 756100                    STQ     BIN_NTEMP$,,AUTO

             12392    8                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  12392  2 002031   200061 471500                    LDP1    BIN_NTEMP$,,AUTO
         2 002032   100000 221100                    LDX1    0,,PR1
         2 002033   200067 473500                    LDP3    BIN_MATCH$,,AUTO
         2 002034   300000 222100                    LDX2    0,,PR3
         2 002035   040140 106540                    CMPC    fill='040'O
         2 002036   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         2 002037   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         2 002040   002043 602000 2                  TNC     s:12400

             12393    8                   >=
             12394    9                   BIN_MATCH$ -> B$DNAME.TEXT THEN DO;

             12395    9                    IF BIN_NTEMP$ -> B$DNAME.TEXT
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:128  

  12395  2 002041   002127 600000 2                  TZE     BIN_FOUND_SPC

             12396    9                      =
             12397    9                      BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND_SPC;
             12398    9                    ELSE GOTO NOT_FOUND_SPC;

  12398  2 002042   002231 710000 2                  TRA     NOT_FOUND_SPC

             12399    9                    END;
             12400    8                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );

  12400  2 002043   200065 236100                    LDQ     BIN_RESULT$,,AUTO
         2 002044   000002 036003                    ADLQ    2,DU
         2 002045   200065 756100                    STQ     BIN_RESULT$,,AUTO

             12401    8                 END;                      /* Do while                           */

  12401  2 002046   200064 116100                    CMPQ    BIN_STOP$,,AUTO
         2 002047   002024 602000 2                  TNC     s:12391
         2 002050   002024 600000 2                  TZE     s:12391

             12402    7              GOTO NOT_FOUND_SPC;

  12402  2 002051   002231 710000 2                  TRA     NOT_FOUND_SPC

             12403    7              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12404    7           ELSE DO;                        /* Binary search                      */

             12405    7              BIN_LOW = 0;

  12405  2 002052   200056 450100                    STZ     BIN_LOW,,AUTO

             12406    7              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;

  12406  2 002053   200063 235100                    LDA     BIN_START$,,AUTO
         2 002054   000022 771000                    ARL     18
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:129  
         2 002055   200100 755100                    STA     DONE+1,,AUTO
         2 002056   200064 236100                    LDQ     BIN_STOP$,,AUTO
         2 002057   000022 772000                    QRL     18
         2 002060   200100 136100                    SBLQ    DONE+1,,AUTO
         2 002061   000002 506007                    DIV     2,DL
         2 002062   000002 036007                    ADLQ    2,DL
         2 002063   200057 756100                    STQ     BIN_HIGH,,AUTO

             12407    7              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );

  12407  2 002064   200063 236100                    LDQ     BIN_START$,,AUTO
         2 002065   777776 036003                    ADLQ    -2,DU
         2 002066   200062 756100                    STQ     BIN_START1$,,AUTO

  12407  2 002067                       BIN_SPLIT_S* null
             12408    7   BIN_SPLIT_SPC:     ;
             12409    7              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  12409  2 002067   200056 236100                    LDQ     BIN_LOW,,AUTO
         2 002070   200057 036100                    ADLQ    BIN_HIGH,,AUTO
         2 002071   000001 772000                    QRL     1
         2 002072   200060 756100                    STQ     BIN_MID,,AUTO

             12410    7              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );

  12410  2 002073   000023 736000                    QLS     19
         2 002074   200062 036100                    ADLQ    BIN_START1$,,AUTO
         2 002075   200065 756100                    STQ     BIN_RESULT$,,AUTO

             12411    7              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  12411  2 002076   200065 470500                    LDP0    BIN_RESULT$,,AUTO
         2 002077   000001 220100                    LDX0    1,,PR0
         2 002100   000000 636010                    EAQ     0,X0
         2 002101   200066 036100                    ADLQ    BIN_N$,,AUTO
         2 002102   200061 756100                    STQ     BIN_NTEMP$,,AUTO

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:130  
             12412    7              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12412  2 002103   200061 471500                    LDP1    BIN_NTEMP$,,AUTO
         2 002104   100000 221100                    LDX1    0,,PR1
         2 002105   200067 473500                    LDP3    BIN_MATCH$,,AUTO
         2 002106   300000 222100                    LDX2    0,,PR3
         2 002107   040140 106540                    CMPC    fill='040'O
         2 002110   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         2 002111   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         2 002112   002116 603000 2                  TRC     s:12418

             12413    7                <
             12414    8                BIN_MATCH$ -> B$DNAME.TEXT THEN DO;

             12415    8                 BIN_LOW = BIN_MID;

  12415  2 002113   200060 235100                    LDA     BIN_MID,,AUTO
         2 002114   200056 755100                    STA     BIN_LOW,,AUTO

             12416    8                 GOTO BIN_CHECK_SPC;

  12416  2 002115   002122 710000 2                  TRA     BIN_CHECK_SPC

             12417    8                 END;
             12418    7              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12418  2 002116   002127 602000 2                  TNC     BIN_FOUND_SPC
         2 002117   002127 600000 2                  TZE     BIN_FOUND_SPC

             12419    7                >
             12420    8                BIN_MATCH$ -> B$DNAME.TEXT THEN DO;

             12421    8                 BIN_HIGH = BIN_MID;

  12421  2 002120   200060 235100                    LDA     BIN_MID,,AUTO
         2 002121   200057 755100                    STA     BIN_HIGH,,AUTO

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:131  
  12421  2 002122                       BIN_CHECK_S* null
             12422    8   BIN_CHECK_SPC:        ;
             12423    8                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_SPC;

  12423  2 002122   200056 236100                    LDQ     BIN_LOW,,AUTO
         2 002123   000001 036007                    ADLQ    1,DL
         2 002124   200057 116100                    CMPQ    BIN_HIGH,,AUTO
         2 002125   002067 602000 2                  TNC     BIN_SPLIT_SPC

             12424                                                /* Here => looping or not found       */
             12425                                      /* Result -> < match => a boundary condition    */
             12426    8                 %@COMMENT
             12427    8                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             12428    8                   <
             12429    8                   BIN_MATCH$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$,
             12429                            SIZEW(VXD$TMPLT) );
             12430    8                 %@TNEMMOC
             12431    8                   GOTO NOT_FOUND_SPC;

  12431  2 002126   002231 710000 2                  TRA     NOT_FOUND_SPC

             12432    8                 END;
             12433    7              END;                         /* Else do;                           */
             12434    6   BIN_FOUND_SPC:
             12435        /* Here -> found */
      489    12437        /* Here => found the special symbol */
      490    12438    6                             BUF$ = BIN_RESULT$;

  12438  2 002127   200065 236100       BIN_FOUND_S* LDQ     BIN_RESULT$,,AUTO
         2 002130   200025 756100                    STQ     BUF$,,AUTO

      491    12439    6                             DONE = '0'B;

  12439  2 002131   200077 450100                    STZ     DONE,,AUTO

      492    12440    7                             DO WHILE( BUF$ >= BIN_START$  AND  NOT DONE );

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:132  
  12440  2 002132   002161 710000 2                  TRA     s:12448

      493    12441    7                                 IF PINCRW(BIN_N$, BUF$->VXD$TMPLT.NPOINTER)

  12441  2 002133   200025 470500                    LDP0    BUF$,,AUTO
         2 002134   000001 220100                    LDX0    1,,PR0
         2 002135   200066 471500                    LDP1    BIN_N$,,AUTO
         2 002136   100000 221110                    LDX1    0,X0,PR1
         2 002137   200067 473500                    LDP3    BIN_MATCH$,,AUTO
         2 002140   300000 222100                    LDX2    0,,PR3
         2 002141   000000 635010                    EAA     0,X0
         2 002142   000020 731000                    ARS     16
         2 002143   040140 106545                    CMPC    fill='040'O
         2 002144   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         2 002145   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         2 002146   002157 601000 2                  TNZ     s:12447

      494    12442    7                                         ->B$DNAME.TEXT = BIN_MATCH$->B$DNAME.TEXT
      495    12443    8                                 THEN DO;

      496    12444    8                                     BUF$ -> VXD$TMPLT = P$ -> VXD$TMPLT;

  12444  2 002147   200003 474500                    LDP4    P$,,AUTO
         2 002150   000100 100500                    MLR     fill='000'O
         2 002151   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
         2 002152   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      497    12445    8                                     BUF$ = PINCRW(BUF$, -SIZEW(VXD$TMPLT) );

  12445  2 002153   200025 236100                    LDQ     BUF$,,AUTO
         2 002154   777776 036003                    ADLQ    -2,DU
         2 002155   200025 756100                    STQ     BUF$,,AUTO

      498    12446    8                                    END;

  12446  2 002156   002161 710000 2                  TRA     s:12448

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:133  
      499    12447    7                                 ELSE DONE = '1'B;

  12447  2 002157   400000 236003                    LDQ     -131072,DU
         2 002160   200077 756100                    STQ     DONE,,AUTO

      500    12448    7                                END;

  12448  2 002161   200025 236100                    LDQ     BUF$,,AUTO
         2 002162   200063 116100                    CMPQ    BIN_START$,,AUTO
         2 002163   002166 602000 2                  TNC     s:12449
         2 002164   200077 234100                    SZN     DONE,,AUTO
         2 002165   002133 605000 2                  TPL     s:12441

      501    12449    6                             BUF$ = PINCRW(BUF$, SIZEW(VXD$TMPLT) );

  12449  2 002166   000002 036003                    ADLQ    2,DU
         2 002167   200025 756100                    STQ     BUF$,,AUTO

      502    12450    6                             DONE = '0'B;

  12450  2 002170   200077 450100                    STZ     DONE,,AUTO

      503    12451    7                             DO WHILE( BUF$ <= BIN_STOP$  AND  NOT DONE );

  12451  2 002171   002220 710000 2                  TRA     s:12459

      504    12452    7                                 IF PINCRW(BIN_N$, BUF$->VXD$TMPLT.NPOINTER)

  12452  2 002172   200025 470500                    LDP0    BUF$,,AUTO
         2 002173   000001 220100                    LDX0    1,,PR0
         2 002174   200066 471500                    LDP1    BIN_N$,,AUTO
         2 002175   100000 221110                    LDX1    0,X0,PR1
         2 002176   200067 473500                    LDP3    BIN_MATCH$,,AUTO
         2 002177   300000 222100                    LDX2    0,,PR3
         2 002200   000000 635010                    EAA     0,X0
         2 002201   000020 731000                    ARS     16
         2 002202   040140 106545                    CMPC    fill='040'O
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:134  
         2 002203   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         2 002204   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         2 002205   002216 601000 2                  TNZ     s:12458

      505    12453    7                                         ->B$DNAME.TEXT = BIN_MATCH$->B$DNAME.TEXT
      506    12454    8                                 THEN DO;

      507    12455    8                                     BUF$ -> VXD$TMPLT = P$ -> VXD$TMPLT;

  12455  2 002206   200003 474500                    LDP4    P$,,AUTO
         2 002207   000100 100500                    MLR     fill='000'O
         2 002210   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
         2 002211   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      508    12456    8                                     BUF$ = PINCRW(BUF$, SIZEW(VXD$TMPLT) );

  12456  2 002212   200025 236100                    LDQ     BUF$,,AUTO
         2 002213   000002 036003                    ADLQ    2,DU
         2 002214   200025 756100                    STQ     BUF$,,AUTO

      509    12457    8                                    END;

  12457  2 002215   002220 710000 2                  TRA     s:12459

      510    12458    7                                 ELSE DONE = '1'B;

  12458  2 002216   400000 236003                    LDQ     -131072,DU
         2 002217   200077 756100                    STQ     DONE,,AUTO

      511    12459    7                                END;

  12459  2 002220   200064 236100                    LDQ     BIN_STOP$,,AUTO
         2 002221   200025 116100                    CMPQ    BUF$,,AUTO
         2 002222   002225 602000 2                  TNC     s:12460
         2 002223   200077 234100                    SZN     DONE,,AUTO
         2 002224   002172 605000 2                  TPL     s:12452

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:135  
      512    12460    6                             VX_HAVE_SPC = VX_HAVE_SPC - 1;

  12460  2 002225   000000 235000 xsym               LDA     VX_HAVE_SPC
         2 002226   000001 135007                    SBLA    1,DL
         2 002227   000000 755000 xsym               STA     VX_HAVE_SPC

      513    12461    7                             DO WHILE( '0'B );

  12461  2 002230   002243 710000 2                  TRA     s:12466

      514    12462    7   NOT_FOUND_SPC:                IF Q$ ~= P$ THEN

  12462  2 002231   200004 236100       NOT_FOUND_S* LDQ     Q$,,AUTO
         2 002232   200003 116100                    CMPQ    P$,,AUTO
         2 002233   002241 600000 2                  TZE     s:12464

      515    12463    7                                     Q$ -> VXD$TMPLT = P$ -> VXD$TMPLT;

  12463  2 002234   200003 470500                    LDP0    P$,,AUTO
         2 002235   200004 471500                    LDP1    Q$,,AUTO
         2 002236   000100 100500                    MLR     fill='000'O
         2 002237   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         2 002240   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

      516    12464    7                                 Q$ = PINCRW( Q$, SIZEW(VXD$TMPLT) );

  12464  2 002241   000002 036003                    ADLQ    2,DU
         2 002242   200004 756100                    STQ     Q$,,AUTO

      517    12465    7                                END;

      518    12466    6                             P$ = PINCRW( P$, SIZEW(VXD$TMPLT) );

  12466  2 002243   200003 236100                    LDQ     P$,,AUTO
         2 002244   000002 036003                    ADLQ    2,DU
         2 002245   200003 756100                    STQ     P$,,AUTO

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:136  
      519    12467    6                            END;

  12467  2 002246   000000 116000 xsym               CMPQ    VX_MERGE_STOP$
         2 002247   001776 602000 2                  TNC     s:12370
         2 002250   001776 600000 2                  TZE     s:12370

      520    12468    5                         VX_MERGE_STOP$ = PINCRW( Q$, -SIZEW(VXD$TMPLT) );

  12468  2 002251   200004 236100                    LDQ     Q$,,AUTO
         2 002252   777776 036003                    ADLQ    -2,DU
         2 002253   000000 756000 xsym               STQ     VX_MERGE_STOP$

      521    12469    5                        END;

      522    12470    5                     IF VX_HAVE_SPC > 0 THEN DO; /* Do special symbol merge */

  12470  2 002254   000000 235000 xsym               LDA     VX_HAVE_SPC
         2 002255   002401 600000 2                  TZE     s:12503

      523    12471    5                         I = ( VX_HAVE_SPC + 2) * SIZEW( VXD$TMPLT );

  12471  2 002256   000001 735000                    ALS     1
         2 002257   000004 035007                    ADLA    4,DL
         2 002260   200026 755100                    STA     I,,AUTO

      524    12472                              %ALLOCATE( PTR$=NEXT$, TYPE=@DD_DS_2, SIZE=I );

  12473  2 002261   000007 236000 xsym               LDQ     VX_M_ALL+7
         2 002262   000007 136000 xsym               SBLQ    VX_M_FREE+7
         2 002263   002276 604000 2                  TMI     s:12477
         2 002264   200026 116100                    CMPQ    I,,AUTO
         2 002265   002276 602000 2                  TNC     s:12477

  12474  2 002266   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 002267   000022 736000                    QLS     18
         2 002270   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         2 002271   200013 756100                    STQ     NEXT$,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:137  

  12475  2 002272   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 002273   200026 036100                    ADLQ    I,,AUTO
         2 002274   000007 756000 xsym               STQ     VX_M_FREE+7

  12476  2 002275   002310 710000 2                  TRA     s:12479

  12477  2 002276   200026 630500                    EPPR0   I,,AUTO
         2 002277   200102 450500                    STP0    DONE+3,,AUTO
         2 002300   000012 236000 3                  LDQ     10
         2 002301   200101 756100                    STQ     DONE+2,,AUTO
         2 002302   200013 631500                    EPPR1   NEXT$,,AUTO
         2 002303   200100 451500                    STP1    DONE+1,,AUTO
         2 002304   200100 630500                    EPPR0   DONE+1,,AUTO
         2 002305   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002306   000000 701000 xent               TSX1    VXA$GET
         2 002307   000000 011000                    NOP     0

      525    12479    5                         FIRST_START$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START.DD$,

  12479  2 002310   000000 470400 xsym               LDP0    VX_ROOT$
         2 002311   000036 236100                    LDQ     30,,PR0
         2 002312   000004 036003                    ADLQ    4,DU
         2 002313   200022 756100                    STQ     FIRST_START$,,AUTO

      526    12480    5                                 2*SIZEW(VXD$TMPLT) );
      527    12481    5                         IF VX_ROOT$ -> VX$NODE.L_START.DD$ = ADDR(NIL)

  12481  2 002314   000036 236100                    LDQ     30,,PR0
         2 002315   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002316   002325 601000 2                  TNZ     s:12483

      528    12482    5                        THEN FIRST_STOP$ = PINCRW( NEXT$, ( VX_HAVE_SPC + 1 ) * SIZEW(
             12482                                  VXD$TMPLT) );

  12482  2 002317   000000 236000 xsym               LDQ     VX_HAVE_SPC
         2 002320   000023 736000                    QLS     19
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:138  
         2 002321   000002 036003                    ADLQ    2,DU
         2 002322   200013 036100                    ADLQ    NEXT$,,AUTO
         2 002323   200023 756100                    STQ     FIRST_STOP$,,AUTO
         2 002324   002332 710000 2                  TRA     s:12485

      529    12483    5                         ELSE FIRST_STOP$ = PINCRW( VX_ROOT$ -> VX$NODE.L_STOP.DD$,

  12483  2 002325   000050 471500                    LDP1    40,,PR0
         2 002326   000000 235000 xsym               LDA     VX_HAVE_SPC
         2 002327   000001 735000                    ALS     1
         2 002330   100002 633505                    EPPR3   2,AL,PR1
         2 002331   200023 453500                    STP3    FIRST_STOP$,,AUTO

      530    12484    5                                     ( VX_HAVE_SPC+1 ) * SIZEW( VXD$TMPLT ) );
      531    12485    5                         CALL VXU$MERGE(     FIRST_START$,

  12485  2 002332   000042 237000 3                  LDAQ    34
         2 002333   200110 757100                    STAQ    DONE+9,,AUTO
         2 002334   000044 237000 3                  LDAQ    36
         2 002335   200106 757100                    STAQ    DONE+7,,AUTO
         2 002336   000000 236000 xsym               LDQ     VX_ROOT$
         2 002337   000031 036003                    ADLQ    25,DU
         2 002340   200105 756100                    STQ     DONE+6,,AUTO
         2 002341   000000 236000 xsym               LDQ     VX_ROOT$
         2 002342   000050 036003                    ADLQ    40,DU
         2 002343   200104 756100                    STQ     DONE+5,,AUTO
         2 002344   000000 236000 xsym               LDQ     VX_ROOT$
         2 002345   000036 036003                    ADLQ    30,DU
         2 002346   200103 756100                    STQ     DONE+4,,AUTO
         2 002347   000000 236000 xsym               LDQ     VX_ROOT$
         2 002350   000031 036003                    ADLQ    25,DU
         2 002351   200102 756100                    STQ     DONE+3,,AUTO
         2 002352   200023 631500                    EPPR1   FIRST_STOP$,,AUTO
         2 002353   200101 451500                    STP1    DONE+2,,AUTO
         2 002354   200022 633500                    EPPR3   FIRST_START$,,AUTO
         2 002355   200100 453500                    STP3    DONE+1,,AUTO
         2 002356   200100 630500                    EPPR0   DONE+1,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:139  
         2 002357   000041 631400 3                  EPPR1   33
         2 002360   000000 701000 xent               TSX1    VXU$MERGE
         2 002361   000000 011000                    NOP     0

      532    12486    5                                 FIRST_STOP$,
      533    12487    5                                 VX_ROOT$ -> VX$NODE.L_START.DN$,
      534    12488    5                                 VX_ROOT$ -> VX$NODE.L_START.DD$,
      535    12489    5                                 VX_ROOT$ -> VX$NODE.L_STOP.DD$,
      536    12490    5                                 VX_ROOT$ -> VX$NODE.L_START.DN$,
      537    12491    5                                 VX_MERGE_START$,
      538    12492    5                                 VX_MERGE_STOP$,
      539    12493    5                                 SIZEW(VXD$TMPLT),
      540    12494    5                                 2         );
      541    12495    5                         VX_ROOT$ -> VX$NODE.L_START.DD$ = FIRST_START$;

  12495  2 002362   200022 236100                    LDQ     FIRST_START$,,AUTO
         2 002363   000000 470400 xsym               LDP0    VX_ROOT$
         2 002364   000036 756100                    STQ     30,,PR0

      542    12496    5                         VX_ROOT$ -> VX$NODE.L_STOP.DD$ = FIRST_STOP$;

  12496  2 002365   200023 236100                    LDQ     FIRST_STOP$,,AUTO
         2 002366   000050 756100                    STQ     40,,PR0

      543    12497    5                         VX_ROOT$ -> VX$NODE.L_SIZE.DD = POFFW( FIRST_STOP$,
             12497                                  FIRST_START$ ) + SIZEW( VXD$TMPLT );

  12497  2 002367   200022 235100                    LDA     FIRST_START$,,AUTO
         2 002370   000022 771000                    ARL     18
         2 002371   200100 755100                    STA     DONE+1,,AUTO
         2 002372   200023 236100                    LDQ     FIRST_STOP$,,AUTO
         2 002373   000022 772000                    QRL     18
         2 002374   200100 136100                    SBLQ    DONE+1,,AUTO
         2 002375   000002 036007                    ADLQ    2,DL
         2 002376   000062 756100                    STQ     50,,PR0

      544    12498    5                         WHERE$ = FIRST_START$;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:140  

  12498  2 002377   200022 236100                    LDQ     FIRST_START$,,AUTO
         2 002400   200012 756100                    STQ     WHERE$,,AUTO

      545    12499    5                        END;

      546    12500        /**/
      547    12501        /**/
      548    12502        /**/
      549    12503    5                     DO I = 0 TO SIZEW( VX_SPC.B$.NAME_A$ ) - 1;

  12503  2 002401   200026 450100                    STZ     I,,AUTO
         2 002402   002534 710000 2                  TRA     s:12524+3

      550    12504    5                         IF VX_SPC.B$.SKIP_A(I) ~= 1/*@YES*/

  12504  2 002403   200026 720100                    LXL0    I,,AUTO
         2 002404   000037 235010 xsym               LDA     VX_SPC+31,X0
         2 002405   000001 115007                    CMPA    1,DL
         2 002406   002531 600000 2                  TZE     s:12524
         2 002407   000044 235010 xsym               LDA     VX_SPC+36,X0
         2 002410   000001 115007                    CMPA    1,DL
         2 002411   002531 601000 2                  TNZ     s:12524

      551    12505    5                                 AND  VX_SPC.B$.MINE_A(I) = 1/*@YES*/
      552    12506    6                         THEN DO;

      553    12507    7                             DO CASE( I );

  12507  2 002412   200026 236100                    LDQ     I,,AUTO
         2 002413   000005 116007                    CMPQ    5,DL
         2 002414   002416 602006 2                  TNC     s:12507+4,QL
         2 002415   002531 710000 2                  TRA     s:12524
         2 002416   002423 710000 2                  TRA     s:12509
         2 002417   002450 710000 2                  TRA     s:12513
         2 002420   002423 710000 2                  TRA     s:12509
         2 002421   002423 710000 2                  TRA     s:12509
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:141  
         2 002422   002504 710000 2                  TRA     s:12519

      554    12508    7                               CASE( 0, 2, 3  /* B$JIT$, B$TCB$, B$ROS$ */ );

      555    12509    7                                 ADR = VX_SPC.B$.VALUE_A(I) + VX_PROGRAM_BIAS.I.RPROC;

  12509  2 002423   000032 236010 xsym               LDQ     VX_SPC+26,X0
         2 002424   000001 036000 xsym               ADLQ    VX_PROGRAM_BIAS+1
         2 002425   200054 756100                    STQ     ADR,,AUTO

      556    12510    7                                 CALL VXU$SETUP( BUF$, 1/*@PROC*/, ADR, 1, 0 );

  12510  2 002426   000006 236000 3                  LDQ     6
         2 002427   200104 756100                    STQ     DONE+5,,AUTO
         2 002430   000022 236000 3                  LDQ     18
         2 002431   200103 756100                    STQ     DONE+4,,AUTO
         2 002432   200054 630500                    EPPR0   ADR,,AUTO
         2 002433   200102 450500                    STP0    DONE+3,,AUTO
         2 002434   200101 756100                    STQ     DONE+2,,AUTO
         2 002435   200025 631500                    EPPR1   BUF$,,AUTO
         2 002436   200100 451500                    STP1    DONE+1,,AUTO
         2 002437   200100 630500                    EPPR0   DONE+1,,AUTO
         2 002440   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 002441   000000 701000 xent               TSX1    VXU$SETUP
         2 002442   000000 011000                    NOP     0

      557    12511    7                                 BUF$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE_A(I);

  12511  2 002443   200026 720100                    LXL0    I,,AUTO
         2 002444   200025 470500                    LDP0    BUF$,,AUTO
         2 002445   000005 235010 xsym               LDA     VX_SPC+5,X0
         2 002446   000000 755100                    STA     0,,PR0
         2 002447   002531 710000 2                  TRA     s:12524

      558    12512    7                               CASE( 1 );

      559    12513    7                                ADR = VX_SPC.B$.VALUE.DELTA + VX_PROGRAM_BIAS.I.RPROC;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:142  

  12513  2 002450   000033 236000 xsym               LDQ     VX_SPC+27
         2 002451   000001 036000 xsym               ADLQ    VX_PROGRAM_BIAS+1
         2 002452   200054 756100                    STQ     ADR,,AUTO

      560    12514    7                                 CALL VXU$SETUP( BUF$, 1/*@PROC*/, ADR, 1, 0 );

  12514  2 002453   000006 236000 3                  LDQ     6
         2 002454   200104 756100                    STQ     DONE+5,,AUTO
         2 002455   000022 236000 3                  LDQ     18
         2 002456   200103 756100                    STQ     DONE+4,,AUTO
         2 002457   200054 630500                    EPPR0   ADR,,AUTO
         2 002460   200102 450500                    STP0    DONE+3,,AUTO
         2 002461   200101 756100                    STQ     DONE+2,,AUTO
         2 002462   200025 631500                    EPPR1   BUF$,,AUTO
         2 002463   200100 451500                    STP1    DONE+1,,AUTO
         2 002464   200100 630500                    EPPR0   DONE+1,,AUTO
         2 002465   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 002466   000000 701000 xent               TSX1    VXU$SETUP
         2 002467   000000 011000                    NOP     0

      561    12515    7                                 BUF$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE_A(I);

  12515  2 002470   200026 720100                    LXL0    I,,AUTO
         2 002471   200025 470500                    LDP0    BUF$,,AUTO
         2 002472   000005 235010 xsym               LDA     VX_SPC+5,X0
         2 002473   000000 755100                    STA     0,,PR0

      562    12516    7                                 BUF$ -> VX$HALF_A(0) = VX_PROGRAM_BIAS.I.DATA

  12516  2 002474   000000 236000 xsym               LDQ     VX_PROGRAM_BIAS
         2 002475   000063 036000 xsym               ADLQ    VX_SPC+51
         2 002476   200100 756100                    STQ     DONE+1,,AUTO
         2 002477   200025 470500                    LDP0    BUF$,,AUTO
         2 002500   000100 101500                    MRL     fill='000'O
         2 002501   200100 000004                    ADSC9   DONE+1,,AUTO             cn=0,n=4
         2 002502   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:143  
         2 002503   002531 710000 2                  TRA     s:12524

      563    12517    7                                         + VX_SPC.DELTA_DATA_ADR;
      564    12518    7                               CASE( 4  /* B_VERSION */ );

      565    12519    7                                 ADR = VX_SPC.B$.VALUE.VERSION + VX_PROGRAM_BIAS.I.
             12519                                          RPROC;

  12519  2 002504   000036 236000 xsym               LDQ     VX_SPC+30
         2 002505   000001 036000 xsym               ADLQ    VX_PROGRAM_BIAS+1
         2 002506   200054 756100                    STQ     ADR,,AUTO

      566    12520    7                                 CALL VXU$SETUP( BUF$, 1/*@PROC*/, ADR, 2, 0 );

  12520  2 002507   000006 236000 3                  LDQ     6
         2 002510   200104 756100                    STQ     DONE+5,,AUTO
         2 002511   000013 236000 3                  LDQ     11
         2 002512   200103 756100                    STQ     DONE+4,,AUTO
         2 002513   200054 630500                    EPPR0   ADR,,AUTO
         2 002514   200102 450500                    STP0    DONE+3,,AUTO
         2 002515   000022 236000 3                  LDQ     18
         2 002516   200101 756100                    STQ     DONE+2,,AUTO
         2 002517   200025 631500                    EPPR1   BUF$,,AUTO
         2 002520   200100 451500                    STP1    DONE+1,,AUTO
         2 002521   200100 630500                    EPPR0   DONE+1,,AUTO
         2 002522   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 002523   000000 701000 xent               TSX1    VXU$SETUP
         2 002524   000000 011000                    NOP     0

      567    12521    7                                 BUF$ -> B$VERSION = VX_O.VERSION;

  12521  2 002525   200025 470500                    LDP0    BUF$,,AUTO
         2 002526   000100 100400                    MLR     fill='000'O
         2 002527   000172 000007 xsym               ADSC9   VX_O+122                 cn=0,n=7
         2 002530   000000 000007                    ADSC9   0,,PR0                   cn=0,n=7

      568    12522    7                               END;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:144  

      569    12523    6                            END;           /* If VX_SPC.B$.SKIP ... */

      570    12524    5                        END;               /* Do i = 0 to ... */

  12524  2 002531   200026 235100                    LDA     I,,AUTO
         2 002532   000001 035007                    ADLA    1,DL
         2 002533   200026 755100                    STA     I,,AUTO
         2 002534   200026 235100                    LDA     I,,AUTO
         2 002535   000005 115007                    CMPA    5,DL
         2 002536   002403 602000 2                  TNC     s:12504

      571    12525    4                    END;                   /* If VX_CURR$ = VX_ROOT$ ... */

      572    12526        %EJECT;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:145  
      573    12527    4                 IF VX_CURR$ -> VX$NODE.L_SIZE_A(RTYPE) > 0 THEN DO;

  12527  2 002537   000000 470400 xsym               LDP0    VX_CURR$
         2 002540   200032 720100                    LXL0    RTYPE,,AUTO
         2 002541   000054 235110                    LDA     44,X0,PR0
         2 002542   002661 600000 2                  TZE     s:12559

      574    12528    4                     STOP$ = VX_CURR$ -> VX$NODE.L_STOP_A$(RTYPE);

  12528  2 002543   000042 236110                    LDQ     34,X0,PR0
         2 002544   200024 756100                    STQ     STOP$,,AUTO

      575    12529    5                     DO WHILE ( WHERE$ <= STOP$ );

  12529  2 002545   200012 116100                    CMPQ    WHERE$,,AUTO
         2 002546   002661 602000 2                  TNC     s:12559

      576    12530    5                         IF RTYPE ~= %TYPEDEF

  12530  2 002547   200032 235100                    LDA     RTYPE,,AUTO
         2 002550   000004 115007                    CMPA    4,DL
         2 002551   002564 600000 2                  TZE     s:12535
         2 002552   200012 470500                    LDP0    WHERE$,,AUTO
         2 002553   000001 236100                    LDQ     1,,PR0
         2 002554   400000 316007                    CANQ    -131072,DL
         2 002555   002564 600000 2                  TZE     s:12535

      577    12531    5                                 AND
      578    12532    5                                 WHERE$ -> VXD$TMPLT.CONSTNT
      579    12533    5                         THEN VX_RU_HEAD.MAP_BITS_A.CON(J1) = '1'B/*@TRUE_B*/;

  12533  2 002556   200033 235100                    LDA     J1,,AUTO
         2 002557   000002 735000                    ALS     2
         2 002560   003005 060400                    CSL     bolr='003'O
         2 002561   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         2 002562   000011 210001 xsym               BDSC    VX_RU_HEAD+9,A           by=1,bit=1,n=1
         2 002563   002653 710000 2                  TRA     s:12556
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:146  

      580    12534    5                         ELSE
      581    12535    5                             IF NOT WHERE$ -> VXD$TMPLT.AD.LFLAGS.DEFINED

  12535  2 002564   200012 470500                    LDP0    WHERE$,,AUTO
         2 002565   000000 236100                    LDQ     0,,PR0
         2 002566   040000 316003                    CANQ    16384,DU
         2 002567   002653 601000 2                  TNZ     s:12556

      582    12536    6                             THEN DO;

      583    12537        /* Here => not defined as an address yet */
      584    12538    6                                 IF WHERE$->VXD$TMPLT.AD.LOOKUP_SECTNUM

  12538  2 002570   004000 316003                    CANQ    2048,DU
         2 002571   002605 600000 2                  TZE     s:12541

      585    12539    6                                 THEN CALL VXU$FIND_SECTNUM(WHERE$->VXD$TMPLT,

  12539  2 002572   200045 631500                    EPPR1   SECTNUM,,AUTO
         2 002573   200102 451500                    STP1    DONE+3,,AUTO
         2 002574   000000 236000 xsym               LDQ     VX_CURR$
         2 002575   000010 036003                    ADLQ    8,DU
         2 002576   200012 235100                    LDA     WHERE$,,AUTO
         2 002577   200100 757100                    STAQ    DONE+1,,AUTO
         2 002600   200100 630500                    EPPR0   DONE+1,,AUTO
         2 002601   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002602   000000 701000 xent               TSX1    VXU$FIND_SECTNUM
         2 002603   000000 011000                    NOP     0
         2 002604   002611 710000 2                  TRA     s:12542

      586    12540    6                                             VX_CURR$->VX$NODE.NUM,SECTNUM);
      587    12541    6                                 ELSE SECTNUM=WHERE$->VXD$TMPLT.AD.SECTNUM;

  12541  2 002605   000000 236100                    LDQ     0,,PR0
         2 002606   000022 772000                    QRL     18
         2 002607   003777 376007                    ANQ     2047,DL
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:147  
         2 002610   200045 756100                    STQ     SECTNUM,,AUTO

      588    12542    6                                 P$ = PINCRW( SC_BASE$, SECTNUM * SIZEW(VX$SC) );

  12542  2 002611   200045 236100                    LDQ     SECTNUM,,AUTO
         2 002612   000003 402003                    MPY     3,DU
         2 002613   200021 036100                    ADLQ    SC_BASE$,,AUTO
         2 002614   200003 756100                    STQ     P$,,AUTO

      589    12543    6                                 WHERE$ -> VXD$TMPLT.AD.OFFSET =

  12543  2 002615   200012 470500                    LDP0    WHERE$,,AUTO
         2 002616   000000 236100                    LDQ     0,,PR0
         2 002617   777777 376007                    ANQ     -1,DL
         2 002620   200100 756100                    STQ     DONE+1,,AUTO
         2 002621   200003 471500                    LDP1    P$,,AUTO
         2 002622   100000 236100                    LDQ     0,,PR1
         2 002623   777777 376007                    ANQ     -1,DL
         2 002624   200100 036100                    ADLQ    DONE+1,,AUTO
         2 002625   000000 620006                    EAX0    0,QL
         2 002626   000000 440100                    SXL0    0,,PR0

      590    12544    6                                         P$ -> VX$SC.ADDRESS
      591    12545    6                                         + WHERE$ -> VXD$TMPLT.AD.OFFSET;
      592    12546    6                                WHERE$ -> VXD$TMPLT.AD.LFLAGS.DEFINED = '1'B/*@YES_B*/
             12546                                          ;

  12546  2 002627   200012 470500                    LDP0    WHERE$,,AUTO
         2 002630   040000 236003                    LDQ     16384,DU
         2 002631   000000 256100                    ORSQ    0,,PR0

      593    12547    7                                 IF RTYPE ~= %TYPEDEF THEN DO;

  12547  2 002632   200032 235100                    LDA     RTYPE,,AUTO
         2 002633   000004 115007                    CMPA    4,DL
         2 002634   002643 600000 2                  TZE     s:12551

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:148  
      594    12548    7                                     WHERE$ -> VXD$TMPLT.PROTECTION.TYPE =

  12548  2 002635   200012 470500                    LDP0    WHERE$,,AUTO
         2 002636   100000 236100                    LDQ     0,,PR1
         2 002637   000017 772000                    QRL     15
         2 002640   000001 676100                    ERQ     1,,PR0
         2 002641   370000 376007                    ANQ     126976,DL
         2 002642   000001 656100                    ERSQ    1,,PR0

      595    12549    7                                             P$ -> VX$SC.TYPE;
      596    12550    7                                    END;

      597    12551    7                                 IF RTYPE = %TYPSEGDEF THEN DO;

  12551  2 002643   200032 235100                    LDA     RTYPE,,AUTO
         2 002644   000010 115007                    CMPA    8,DL
         2 002645   002653 601000 2                  TNZ     s:12556

      598    12552    7                                     WHERE$ -> B$SEGDEF.SEG.SEGID =

  12552  2 002646   100000 236100                    LDQ     0,,PR1
         2 002647   000041 772000                    QRL     33
         2 002650   200012 470500                    LDP0    WHERE$,,AUTO
         2 002651   000000 236006 xsym               LDQ     VX_SEGID,QL
         2 002652   000001 752103                    STCQ    1,'03'O,PR0

      599    12553    7                                             VX_SEGID( P$ -> VX$SC.SEG );
      600    12554    7                                    END;

      601    12555    6                                END;

      602    12556    5                         WHERE$ = PINCRW( WHERE$, SIZEW( VXD$TMPLT ) );

  12556  2 002653   200012 236100                    LDQ     WHERE$,,AUTO
         2 002654   000002 036003                    ADLQ    2,DU
         2 002655   200012 756100                    STQ     WHERE$,,AUTO

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:149  
      603    12557    5                        END;               /* Do while */

  12557  2 002656   200024 116100                    CMPQ    STOP$,,AUTO
         2 002657   002547 602000 2                  TNC     s:12530
         2 002660   002547 600000 2                  TZE     s:12530

      604    12558    4                    END; /*  If VX_CURR$ -> VX$NODE.L_SIZE_A(RTYPE) > 0 then do; */

      605    12559    3                END;                   /* Do j = 1 to sizew( VX_REF_REC_A ) - 1; */

  12559  2 002661   200027 235100                    LDA     J,,AUTO
         2 002662   000001 035007                    ADLA    1,DL
         2 002663   200027 755100                    STA     J,,AUTO
         2 002664   000004 115007                    CMPA    4,DL
         2 002665   001603 602000 2                  TNC     s:12299

      606    12560        /**/
      607    12561        /**/
      608    12562        /**/
      609    12563    3            IF VX_CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */

  12563  2 002666   000000 470400 xsym               LDP0    VX_CURR$
         2 002667   000000 236100                    LDQ     0,,PR0
         2 002670   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002671   002674 600000 2                  TZE     s:12567

      610    12564    3                 VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;

  12564  2 002672   000000 756000 xsym               STQ     VX_CURR$

      611    12565    3                END;

  12565  2 002673   001576 710000 2                  TRA     s:12297

      612    12566    3             ELSE DO;

      613    12567    4                 DO WHILE( VX_CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:150  

  12567  2 002674   002702 710000 2                  TRA     s:12570

      614    12568    4                     VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$; /* Move up */

  12568  2 002675   000000 470400 xsym               LDP0    VX_CURR$
         2 002676   000002 236100                    LDQ     2,,PR0
         2 002677   000000 756000 xsym               STQ     VX_CURR$

      615    12569    4                     IF VX_CURR$ = ADDR(NIL) THEN GOTO DONE; /* Check if done */

  12569  2 002700   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002701   002710 600000 2                  TZE     DONE

      616    12570    4                    END;

  12570  2 002702   000000 470400 xsym               LDP0    VX_CURR$
         2 002703   000001 236100                    LDQ     1,,PR0
         2 002704   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002705   002675 600000 2                  TZE     s:12568

      617    12571    3                 VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$; /* Move to a brother */

  12571  2 002706   000000 756000 xsym               STQ     VX_CURR$

      618    12572    3                END;                       /* Else do */

      619    12573    2            END;                           /* Do forever */

  12573  2 002707   001576 710000 2                  TRA     s:12297

  12567  2 002710                       DONE         null
      620    12574    1   DONE: ;                             /* Thru traversing; do post for pass 1 */
      621    12575        %EJECT;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:151  
      622    12576    2         IF VX_O.NUM.BREF > 0 AND VX_NODE_NUMBER > 0 THEN DO;

  12576  2 002710   000035 235000 xsym               LDA     VX_O+29
         2 002711   003047 604400 2                  TMOZ    s:12655
         2 002712   000000 235000 xsym               LDA     VX_NODE_NUMBER
         2 002713   003047 604400 2                  TMOZ    s:12655

      623    12577    2             BIN_START$ = VX_ROOT$ -> VX$NODE.L_START.ED$;

  12577  2 002714   000000 470400 xsym               LDP0    VX_ROOT$
         2 002715   000034 236100                    LDQ     28,,PR0
         2 002716   200063 756100                    STQ     BIN_START$,,AUTO

      624    12578    2             BIN_STOP$  = VX_ROOT$ -> VX$NODE.L_STOP.ED$;

  12578  2 002717   000046 236100                    LDQ     38,,PR0
         2 002720   200064 756100                    STQ     BIN_STOP$,,AUTO

      625    12579    2             BIN_N$ = VX_ROOT$ -> VX$NODE.L_START.DN$;

  12579  2 002721   000031 236100                    LDQ     25,,PR0
         2 002722   200066 756100                    STQ     BIN_N$,,AUTO

      626    12580                  %BIN_SEARCH(
      627    12581                  START$=BIN_START$,
      628    12582                  STOP$=BIN_STOP$,
      629    12583                  RESULT$=BIN_RESULT$,
      630    12584                  N$=BIN_N$,
      631    12585                  MATCH$="ADDR(VX_XSO$BREF)",
      632    12586                  NAME_DISP=2,
      633    12587                  SIZE="SIZEW(VXD$TMPLT)",
      634    12588                  SPLIT=BIN_SPLIT_OVERLAY,
      635    12589                  CHECK=BIN_CHECK_OVERLAY,
      636    12590                  FOUND=BIN_FOUND_OVERLAY,
      637    12591                  NEG=%@COMMENT,
      638    12592                  GEN=%@TNEMMOC,
      639    12593                  ALTRETURN=LINK_ERROR_OVERLAY,
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:152  
      640    12594                  EMPTY=LINK_ERROR_OVERLAY);
             12596    2           IF BIN_START$ = ADDR(NIL) THEN GOTO LINK_ERROR_OVERLAY;

  12596  2 002723   200063 236100                    LDQ     BIN_START$,,AUTO
         2 002724   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002725   003243 600000 2                  TZE     LINK_ERROR_OVERLAY

             12597    3           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;

  12597  2 002726   200063 235100                    LDA     BIN_START$,,AUTO
         2 002727   000022 771000                    ARL     18
         2 002730   200100 755100                    STA     DONE+1,,AUTO
         2 002731   200064 236100                    LDQ     BIN_STOP$,,AUTO
         2 002732   000022 772000                    QRL     18
         2 002733   200100 136100                    SBLQ    DONE+1,,AUTO
         2 002734   000002 506007                    DIV     2,DL
         2 002735   000021 116007                    CMPQ    17,DL
         2 002736   002771 605000 2                  TPL     s:12614

             12598    3              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  12598  2 002737   200063 236100                    LDQ     BIN_START$,,AUTO
         2 002740   200065 756100                    STQ     BIN_RESULT$,,AUTO

             12599    4              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  12599  2 002741   200064 116100                    CMPQ    BIN_STOP$,,AUTO
         2 002742   002744 600000 2                  TZE     s:12600
         2 002743   002770 603000 2                  TRC     s:12611

             12600    4                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  12600  2 002744   200065 470500                    LDP0    BIN_RESULT$,,AUTO
         2 002745   000001 220100                    LDX0    1,,PR0
         2 002746   000000 636010                    EAQ     0,X0
         2 002747   200066 036100                    ADLQ    BIN_N$,,AUTO
         2 002750   200061 756100                    STQ     BIN_NTEMP$,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:153  

             12601    4                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  12601  2 002751   200061 471500                    LDP1    BIN_NTEMP$,,AUTO
         2 002752   100000 221100                    LDX1    0,,PR1
         2 002753   000000 222000 xsym               LDX2    VX_XSO$BREF
         2 002754   040040 106540                    CMPC    fill='040'O
         2 002755   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         2 002756   000000 400012 xsym               ADSC9   VX_XSO$BREF              cn=2,n=*X2
         2 002757   002762 602000 2                  TNC     s:12609

             12602    4                   >=
             12603    5                   ADDR(VX_XSO$BREF) -> B$DNAME.TEXT THEN DO;

             12604    5                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  12604  2 002760   003045 600000 2                  TZE     BIN_FOUND_OVERLAY

             12605    5                      =
             12606    5                      ADDR(VX_XSO$BREF) -> B$DNAME.TEXT THEN GOTO BIN_FOUND_OVERLAY;
             12607    5                    ELSE GOTO LINK_ERROR_OVERLAY;

  12607  2 002761   003243 710000 2                  TRA     LINK_ERROR_OVERLAY

             12608    5                    END;
             12609    4                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );

  12609  2 002762   200065 236100                    LDQ     BIN_RESULT$,,AUTO
         2 002763   000002 036003                    ADLQ    2,DU
         2 002764   200065 756100                    STQ     BIN_RESULT$,,AUTO

             12610    4                 END;                      /* Do while                           */

  12610  2 002765   200064 116100                    CMPQ    BIN_STOP$,,AUTO
         2 002766   002744 602000 2                  TNC     s:12600
         2 002767   002744 600000 2                  TZE     s:12600

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:154  
             12611    3              GOTO LINK_ERROR_OVERLAY;

  12611  2 002770   003243 710000 2                  TRA     LINK_ERROR_OVERLAY

             12612    3              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12613    3           ELSE DO;                        /* Binary search                      */

             12614    3              BIN_LOW = 0;

  12614  2 002771   200056 450100                    STZ     BIN_LOW,,AUTO

             12615    3              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;

  12615  2 002772   200063 235100                    LDA     BIN_START$,,AUTO
         2 002773   000022 771000                    ARL     18
         2 002774   200100 755100                    STA     DONE+1,,AUTO
         2 002775   200064 236100                    LDQ     BIN_STOP$,,AUTO
         2 002776   000022 772000                    QRL     18
         2 002777   200100 136100                    SBLQ    DONE+1,,AUTO
         2 003000   000002 506007                    DIV     2,DL
         2 003001   000002 036007                    ADLQ    2,DL
         2 003002   200057 756100                    STQ     BIN_HIGH,,AUTO

             12616    3              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );

  12616  2 003003   200063 236100                    LDQ     BIN_START$,,AUTO
         2 003004   777776 036003                    ADLQ    -2,DU
         2 003005   200062 756100                    STQ     BIN_START1$,,AUTO

  12616  2 003006                       BIN_SPLIT_O* null
             12617    3   BIN_SPLIT_OVERLAY:     ;
             12618    3              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  12618  2 003006   200056 236100                    LDQ     BIN_LOW,,AUTO
         2 003007   200057 036100                    ADLQ    BIN_HIGH,,AUTO
         2 003010   000001 772000                    QRL     1
         2 003011   200060 756100                    STQ     BIN_MID,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:155  

             12619    3              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );

  12619  2 003012   000023 736000                    QLS     19
         2 003013   200062 036100                    ADLQ    BIN_START1$,,AUTO
         2 003014   200065 756100                    STQ     BIN_RESULT$,,AUTO

             12620    3              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  12620  2 003015   200065 470500                    LDP0    BIN_RESULT$,,AUTO
         2 003016   000001 220100                    LDX0    1,,PR0
         2 003017   000000 636010                    EAQ     0,X0
         2 003020   200066 036100                    ADLQ    BIN_N$,,AUTO
         2 003021   200061 756100                    STQ     BIN_NTEMP$,,AUTO

             12621    3              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12621  2 003022   200061 471500                    LDP1    BIN_NTEMP$,,AUTO
         2 003023   100000 221100                    LDX1    0,,PR1
         2 003024   000000 222000 xsym               LDX2    VX_XSO$BREF
         2 003025   040040 106540                    CMPC    fill='040'O
         2 003026   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         2 003027   000000 400012 xsym               ADSC9   VX_XSO$BREF              cn=2,n=*X2
         2 003030   003034 603000 2                  TRC     s:12627

             12622    3                <
             12623    4                ADDR(VX_XSO$BREF) -> B$DNAME.TEXT THEN DO;

             12624    4                 BIN_LOW = BIN_MID;

  12624  2 003031   200060 235100                    LDA     BIN_MID,,AUTO
         2 003032   200056 755100                    STA     BIN_LOW,,AUTO

             12625    4                 GOTO BIN_CHECK_OVERLAY;

  12625  2 003033   003040 710000 2                  TRA     BIN_CHECK_OVERLAY

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:156  
             12626    4                 END;
             12627    3              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12627  2 003034   003045 602000 2                  TNC     BIN_FOUND_OVERLAY
         2 003035   003045 600000 2                  TZE     BIN_FOUND_OVERLAY

             12628    3                >
             12629    4                ADDR(VX_XSO$BREF) -> B$DNAME.TEXT THEN DO;

             12630    4                 BIN_HIGH = BIN_MID;

  12630  2 003036   200060 235100                    LDA     BIN_MID,,AUTO
         2 003037   200057 755100                    STA     BIN_HIGH,,AUTO

  12630  2 003040                       BIN_CHECK_O* null
             12631    4   BIN_CHECK_OVERLAY:        ;
             12632    4                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_OVERLAY;

  12632  2 003040   200056 236100                    LDQ     BIN_LOW,,AUTO
         2 003041   000001 036007                    ADLQ    1,DL
         2 003042   200057 116100                    CMPQ    BIN_HIGH,,AUTO
         2 003043   003006 602000 2                  TNC     BIN_SPLIT_OVERLAY

             12633                                                /* Here => looping or not found       */
             12634                                      /* Result -> < match => a boundary condition    */
             12635    4                 %@COMMENT
             12636    4                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             12637    4                   <
             12638    4                   ADDR(VX_XSO$BREF) -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW(
             12638                            BIN_RESULT$, SIZEW(VXD$TMPLT) );
             12639    4                 %@TNEMMOC
             12640    4                   GOTO LINK_ERROR_OVERLAY;

  12640  2 003044   003243 710000 2                  TRA     LINK_ERROR_OVERLAY

             12641    4                 END;
             12642    3              END;                         /* Else do;                           */
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:157  
             12643    2   BIN_FOUND_OVERLAY:
             12644        /* Here -> found */
      641    12646    2             VX_TSX0_OVERLAY.H.LEFT_HALF = BIN_RESULT$->B$EDEF.OU.OFFSET;

  12646  2 003045   000000 723100       BIN_FOUND_O* LXL3    0,,PR0
         2 003046   000000 743000 xsym               STX3    VX_TSX0_OVERLAY

      642    12647    2            END;                           /* If VX_O.NUM.BREF > 0 then do; */

      643    12648        /*
      644    12649              Allocate receiving buffer
      645    12650        */
      646    12651              %ALLOCATE(
      647    12652              PTR$=VX_REC_BUF_START$,
      648    12653              TYPE=@SC_DS_2,
      649    12654              SIZE=VX_REC_BUF_SIZE );

  12655  2 003047   000007 236000 xsym               LDQ     VX_M_ALL+7
         2 003050   000007 136000 xsym               SBLQ    VX_M_FREE+7
         2 003051   003064 604000 2                  TMI     s:12659
         2 003052   000000 116000 xsym               CMPQ    VX_REC_BUF_SIZE
         2 003053   003064 602000 2                  TNC     s:12659

  12656  2 003054   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 003055   000022 736000                    QLS     18
         2 003056   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         2 003057   000000 756000 xsym               STQ     VX_REC_BUF_START$

  12657  2 003060   000007 236000 xsym               LDQ     VX_M_FREE+7
         2 003061   000000 036000 xsym               ADLQ    VX_REC_BUF_SIZE
         2 003062   000007 756000 xsym               STQ     VX_M_FREE+7

  12658  2 003063   003070 710000 2                  TRA     s:12661

  12659  2 003064   000046 630400 3                  EPPR0   38
         2 003065   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 003066   000000 701000 xent               TSX1    VXA$GET
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:158  
         2 003067   000000 011000                    NOP     0

      650    12661    1         IF VX_SLIB_AREA$ = ADDR(NIL) THEN VX_SLIB_AREA$ = VX_REC_BUF_START$;

  12661  2 003070   000000 236000 xsym               LDQ     VX_SLIB_AREA$
         2 003071   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 003072   003075 601000 2                  TNZ     s:12662

  12661  2 003073   000000 236000 xsym               LDQ     VX_REC_BUF_START$
         2 003074   000000 756000 xsym               STQ     VX_SLIB_AREA$

      651    12662    1         VX_SLIB_AREA_SIZE = POFFW( VX_REC_BUF_START$, VX_SLIB_AREA$ )

  12662  2 003075   000000 235000 xsym               LDA     VX_SLIB_AREA$
         2 003076   000022 771000                    ARL     18
         2 003077   200100 755100                    STA     DONE+1,,AUTO
         2 003100   000000 236000 xsym               LDQ     VX_REC_BUF_START$
         2 003101   000022 772000                    QRL     18
         2 003102   200100 136100                    SBLQ    DONE+1,,AUTO
         2 003103   000000 036000 xsym               ADLQ    VX_REC_BUF_SIZE
         2 003104   000000 756000 xsym               STQ     VX_SLIB_AREA_SIZE

      652    12663    1                 +
      653    12664    1                 VX_REC_BUF_SIZE;
      654    12665        /*
      655    12666              Now allocate areas for unsatisfied references
      656    12667        */
      657    12668    1         DIFF = VX_M_ALL( 8/*@GDP*/ ) - VX_M_FREE( 8/*@GDP*/ );

  12668  2 003105   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 003106   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 003107   200055 756100                    STQ     DIFF,,AUTO

      658    12669    1         IF 20 * SIZEW( VXR$TMPLT ) > DIFF THEN

  12669  2 003110   000024 116007                    CMPQ    20,DL
         2 003111   003115 605000 2                  TPL     s:12671
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:159  

      659    12670    1             SIZE = ( 1024/*@PAGE_SIZE*/ + DIFF ) / SIZEW( VXR$TMPLT );

  12670  2 003112   002000 036007                    ADLQ    1024,DL
         2 003113   200050 756100                    STQ     SIZE,,AUTO
         2 003114   003116 710000 2                  TRA     s:12672

      660    12671    1         ELSE SIZE = DIFF;

  12671  2 003115   200050 756100                    STQ     SIZE,,AUTO

      661    12672    1         SIZE = SIZE / 2;

  12672  2 003116   000001 772000                    QRL     1
         2 003117   200050 756100                    STQ     SIZE,,AUTO

      662    12673        /**/
      663    12674    2         DO I = 1 TO SIZEW( VX_PASS2_REF.UNSAT.L_START_A$ ) - 1;

  12674  2 003120   000001 235007                    LDA     1,DL
         2 003121   200026 755100                    STA     I,,AUTO
         2 003122   003164 710000 2                  TRA     s:12687+3

      664    12675                  %ALLOCATE(
      665    12676                  PTR$="VX_PASS2_REF.UNSAT.L_WHERE_A$(I)",
      666    12677                  TYPE=@ER_DS_2,
      667    12678                  SIZE=SIZE);

  12679  2 003123   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 003124   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 003125   003141 604000 2                  TMI     s:12683
         2 003126   200050 116100                    CMPQ    SIZE,,AUTO
         2 003127   003141 602000 2                  TNC     s:12683

  12680  2 003130   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 003131   000022 736000                    QLS     18
         2 003132   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:160  
         2 003133   200026 720100                    LXL0    I,,AUTO
         2 003134   000064 756010 xsym               STQ     VX_PASS2_REF+52,X0

  12681  2 003135   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 003136   200050 036100                    ADLQ    SIZE,,AUTO
         2 003137   000010 756000 xsym               STQ     VX_M_FREE+8

  12682  2 003140   003154 710000 2                  TRA     s:12685

  12683  2 003141   200050 630500                    EPPR0   SIZE,,AUTO
         2 003142   200102 450500                    STP0    DONE+3,,AUTO
         2 003143   000051 236000 3                  LDQ     41
         2 003144   200101 756100                    STQ     DONE+2,,AUTO
         2 003145   200026 720100                    LXL0    I,,AUTO
         2 003146   000064 631410 xsym               EPPR1   VX_PASS2_REF+52,X0
         2 003147   200100 451500                    STP1    DONE+1,,AUTO
         2 003150   200100 630500                    EPPR0   DONE+1,,AUTO
         2 003151   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 003152   000000 701000 xent               TSX1    VXA$GET
         2 003153   000000 011000                    NOP     0

      668    12685    2             VX_PASS2_REF.UNSAT.L_STOP_A$(I) = VX_PASS2_REF.UNSAT.L_WHERE_A$(I);

  12685  2 003154   200026 720100                    LXL0    I,,AUTO
         2 003155   000064 236010 xsym               LDQ     VX_PASS2_REF+52,X0
         2 003156   000060 756010 xsym               STQ     VX_PASS2_REF+48,X0

      669    12686    2             VX_PASS2_REF.UNSAT.MAX_A(I) = SIZE;

  12686  2 003157   200050 235100                    LDA     SIZE,,AUTO
         2 003160   000050 755010 xsym               STA     VX_PASS2_REF+40,X0

      670    12687    2            END;

  12687  2 003161   200026 236100                    LDQ     I,,AUTO
         2 003162   000001 036007                    ADLQ    1,DL
         2 003163   200026 756100                    STQ     I,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:161  
         2 003164   200026 235100                    LDA     I,,AUTO
         2 003165   000004 115007                    CMPA    4,DL
         2 003166   003123 602000 2                  TNC     s:12679

      671    12688        /**/
      672    12689        /*
      673    12690              Now for name area for unsatisfied references
      674    12691        */
      675    12692    1         DIFF = VX_M_ALL( 4/*@RN_DS_2*/ ) - VX_M_FREE( 4/*@RN_DS_2*/ );

  12692  2 003167   000004 236000 xsym               LDQ     VX_M_ALL+4
         2 003170   000004 136000 xsym               SBLQ    VX_M_FREE+4
         2 003171   200055 756100                    STQ     DIFF,,AUTO

      676    12693    2         IF SIZE < 1024/*@PAGE_SIZE*//2 THEN DO;

  12693  2 003172   200050 235100                    LDA     SIZE,,AUTO
         2 003173   001000 115007                    CMPA    512,DL
         2 003174   003206 603000 2                  TRC     GET_PAGE

      677    12694                                                /* Here => using partials */
      678    12695    2             IF 2*3*SIZE > DIFF THEN GOTO GET_PAGE;

  12695  2 003175   200050 236100                    LDQ     SIZE,,AUTO
         2 003176   000006 402007                    MPY     6,DL
         2 003177   000000 116003                    CMPQ    0,DU
         2 003200   003206 604000 2                  TMI     GET_PAGE
         2 003201   200055 116100                    CMPQ    DIFF,,AUTO
         2 003202   003206 605400 2                  TPNZ    GET_PAGE

      679    12696    2             SIZE = DIFF;

  12696  2 003203   200055 235100                    LDA     DIFF,,AUTO
         2 003204   200050 755100                    STA     SIZE,,AUTO

      680    12697    2            END;

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:162  
  12697  2 003205   003211 710000 2                  TRA     s:12707

      681    12698    2         ELSE DO;

      682    12699    2   GET_PAGE:
      683    12700    2             SIZE = 1024/*@PAGE_SIZE*/ + DIFF;

  12700  2 003206   200055 235100       GET_PAGE     LDA     DIFF,,AUTO
         2 003207   002000 035007                    ADLA    1024,DL
         2 003210   200050 755100                    STA     SIZE,,AUTO

      684    12701    2            END;

      685    12702        /**/
      686    12703              %ALLOCATE(
      687    12704              PTR$=VX_PASS2_REF.UNSAT.L_WHERE.RN$,
      688    12705              TYPE=@RN_DS_2,
      689    12706              SIZE=SIZE);

  12707  2 003211   000004 236000 xsym               LDQ     VX_M_ALL+4
         2 003212   000004 136000 xsym               SBLQ    VX_M_FREE+4
         2 003213   003226 604000 2                  TMI     s:12711
         2 003214   200050 116100                    CMPQ    SIZE,,AUTO
         2 003215   003226 602000 2                  TNC     s:12711

  12708  2 003216   000004 236000 xsym               LDQ     VX_M_FREE+4
         2 003217   000022 736000                    QLS     18
         2 003220   000004 036000 xsym               ADLQ    VX_M_BASE_PTR+4
         2 003221   000064 756000 xsym               STQ     VX_PASS2_REF+52

  12709  2 003222   000004 236000 xsym               LDQ     VX_M_FREE+4
         2 003223   200050 036100                    ADLQ    SIZE,,AUTO
         2 003224   000004 756000 xsym               STQ     VX_M_FREE+4

  12710  2 003225   003236 710000 2                  TRA     s:12713

  12711  2 003226   200050 630500                    EPPR0   SIZE,,AUTO
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:163  
         2 003227   200102 450500                    STP0    DONE+3,,AUTO
         2 003230   000052 237000 3                  LDAQ    42
         2 003231   200100 757100                    STAQ    DONE+1,,AUTO
         2 003232   200100 630500                    EPPR0   DONE+1,,AUTO
         2 003233   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 003234   000000 701000 xent               TSX1    VXA$GET
         2 003235   000000 011000                    NOP     0

      690    12713    1         VX_PASS2_REF.UNSAT.L_STOP.RN$ = VX_PASS2_REF.UNSAT.L_WHERE.RN$;

  12713  2 003236   000064 236000 xsym               LDQ     VX_PASS2_REF+52
         2 003237   000060 756000 xsym               STQ     VX_PASS2_REF+48

      691    12714    1         VX_PASS2_REF.UNSAT.MAX.RN = SIZE;

  12714  2 003240   200050 235100                    LDA     SIZE,,AUTO
         2 003241   000050 755000 xsym               STA     VX_PASS2_REF+40

      692    12715    1         RETURN;

  12715  2 003242   000000 702200 xent               TSX2  ! X66_ARET

      693    12716        %EJECT;
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:164  
      694    12717    1   LINK_ERROR_OVERLAY:
      695    12718        /*E*  ERROR: VXT-E$INTERNAL_BREF_VX-0
      696    12719              MESSAGE: Internal LINK error. Cannot find %U1 in entry definitions.
      697    12720              DESCRIPTION: Self-explanatory.
      698    12721        */
      699    12722    1         VX_EFIELD1.COUNT = VX_XSO$BREF.COUNT;

  12722  2 003243   000000 236000 xsym  LINK_ERROR_* LDQ     VX_XSO$BREF
         2 003244   000011 736000                    QLS     9
         2 003245   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      700    12723    1         VX_EFIELD1.CHARS = VX_XSO$BREF.CHARS;

  12723  2 003246   040000 100400                    MLR     fill='040'O
         2 003247   000000 400036 xsym               ADSC9   VX_XSO$BREF              cn=2,n=30
         2 003250   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      701    12724              %SCREAM(
      702    12725              ERR#=E$INTERNAL_BREF_VX,
      703    12726              MID="'T'",
      704    12727              LEVEL=@E$F_VX);

  12728  2 003251   000055 630400 3                  EPPR0   45
         2 003252   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 003253   000000 701000 xent               TSX1    VXE$ERROR
         2 003254   000000 011000                    NOP     0

      705    12730    1   END;

  12730  2 003255   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:165  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXT$PRE.
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:166  

 **** Variables and constants ****

  ****  Section 001 LblCom VX_CONST_DCB

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(3456)  r     1 VX_CONST_DCB

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    54-0-0/w SBIN        r     1 ADR                       57-0-0/w UBIN        r     1 BIN_HIGH
    56-0-0/w UBIN        r     1 BIN_LOW                   67-0-0/w PTR         r     1 BIN_MATCH$
    60-0-0/w UBIN        r     1 BIN_MID                   66-0-0/w PTR         r     1 BIN_N$
    61-0-0/w PTR         r     1 BIN_NTEMP$                65-0-0/w PTR         r     1 BIN_RESULT$
    63-0-0/w PTR         r     1 BIN_START$                62-0-0/w PTR         r     1 BIN_START1$
    64-0-0/w PTR         r     1 BIN_STOP$                 25-0-0/w PTR         r     1 BUF$
    43-0-0/w UBIN        r     1 BUFTYP                    52-0-0/w UBIN        r     1 C_SIZE
    10-0-0/w PTR         r     1 DCB_CURR$                 55-0-0/w SBIN        r     1 DIFF
    11-0-0/w PTR         r     1 DN_ROOT_START$            77-0-0/b BIT         r     1 DONE
    22-0-0/w PTR         r     1 FIRST_START$              23-0-0/w PTR         r     1 FIRST_STOP$
    26-0-0/w UBIN        r     1 I                         53-0-0/w UBIN        r     1 I_SIZE
    27-0-0/w UBIN        r     1 J                         33-0-0/w UBIN        r     1 J1
    30-0-0/w UBIN        r     1 K                         31-0-0/w UBIN        r     1 L
    34-0-0/w UBIN        r     1 MX                        13-0-0/w PTR         r     1 NEXT$
    44-0-0/w UBIN        r     1 NODE#                      3-0-0/w PTR         r     1 P$
     4-0-0/w PTR         r     1 Q$                        32-0-0/w UBIN        r     1 RTYPE
    21-0-0/w PTR         r     1 SC_BASE$                  45-0-0/w UBIN        r     1 SECTNUM
    50-0-0/w UBIN        r     1 SIZE                      24-0-0/w PTR         r     1 STOP$
    51-0-0/w UBIN        r     1 S_SIZE                    14-0-0/w PTR         r     1 T$
    42-0-0/w UBIN        r     1 VALUE                     12-0-0/w PTR         r     1 WHERE$

  ****  SYMREF variables  ****

PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:167  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 VX_BADR(0:2)
     0-0-0/w UBIN        r     1 VX_BREF_SIZE               0-0-0/w PTR         r     1 VX_BREF_START$
     0-0-0/w PTR         r     1 VX_CURR$                   0-0-0/w UBIN        r     1 VX_DCB_SIZEC
     0-0-0/w PTR         r     1 VX_DCB_START$              0-0-0/w PTR         r     1 VX_DCB_STOP$
     0-0-0/w UBIN        r     1 VX_DEF_REC_A(0:3)
     0-0-0/w SBIN        r     1 VX_EADR(0:2)
     0-0-0/w STRC(720)   r     1 VX_EFIELD1                 0-0-0/w STRC(720)   r     1 VX_EFIELD2
     0-0-0/w UBIN        r     1 VX_HAVE_SPC                0-0-0/w PTR         r     1 VX_IMAGE$
     0-0-0/w PTR         r     1 VX_IMAGE_PTR$(0:8)
     0-0-0/w UBIN        r     1 VX_LINK_UTS                0-0-0/w PTR         r     1 VX_MERGE_START$
     0-0-0/w PTR         r     1 VX_MERGE_STOP$
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w PTR         r     1 VX_NEXT_BREF$              0-0-0/w SBIN        r     1 VX_NODE_NUMBER
     0-0-0/w STRC(4572)  r     1 VX_O                       0-0-0/b STRC(116)   r     1 VX_OD
     0-0-0/w UBIN        r     1 VX_PASS                    0-0-0/w STRC(2340)  r     1 VX_PASS2_REF
     0-0-0/c STRC(216)   r     1 VX_PHRASE                  0-0-0/w STRC(108)   r     1 VX_PROGRAM_BIAS
     0-0-0/w UBIN        r     1 VX_REC_BUF_SIZE            0-0-0/w PTR         r     1 VX_REC_BUF_START$
     0-0-0/w PTR         r     1 VX_ROOT$                   0-0-0/w BIT         r     1 VX_ROS_ALLOWED
     0-0-0/w STRC(1440)  r     1 VX_RU_HEAD                 0-0-0/w PTR         r     1 VX_SC_X_NODE$
     0-0-0/w STRC(72)    r     1 VX_SD                      0-0-0/w PTR         r     1 VX_SD_STOP$
     0-0-0/w UBIN        r     1 VX_SEGID(0:5)
     0-0-0/w UBIN        r     1 VX_SEG_EPAGE#(0:5)
     0-0-0/w SBIN        r     1 VX_SEG_SIZE(0:5)
     0-0-0/w PTR         r     1 VX_SLIB_AREA$              0-0-0/w UBIN        r     1 VX_SLIB_AREA_SIZE
     0-0-0/w PTR         r     1 VX_SLIB_INIT$              0-0-0/w STRC(27)    r     1 VX_SN
     0-0-0/w UBIN        r     1 VX_SOURCE_COUNT            0-0-0/w STRC(1908)  r     1 VX_SPC
     0-0-0/w BIT         r     1 VX_SPC_DATA_INSERT         0-0-0/w UBIN        r     1 VX_TARGET_COUNT
     0-0-0/w STRC        r     1 VX_TSX0_OVERLAY            0-0-0/w STRC(288)   r     1 VX_XSO$BREF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:168  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC(72)    r     1 B$EDEF
     0-0-0/w STRC(72)    r     1 B$SEGDEF                   0-0-0/w STRC(63)    r     1 B$VERSION
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/w STRC(72)    r     1 VX$BREF
     0-0-0/w ASTR(0)     r     1 VX$DCB                     0-0-0/w ASTR(9)     r     1 VX$DCB$T$C
     0-0-0/h UBIN(18)    r     1 VX$HALF_A(0:0)
     0-0-0/w STRC(432)   r     1 VX$IMAGE                   0-0-0/w STRC(3672)  r     1 VX$NODE
     0-0-0/w STRC(108)   r     1 VX$SC                      0-0-0/w ACHR        r     1 VX$SOURCE_C
     0-0-0/w ABIT        r     1 VX$TARGET_B                0-0-0/w ACHR        r     1 VX$TARGET_C
     0-0-0/w STRC(72)    r     1 VX$TMPLT
     0-0-0/w UBIN        r     1 VX$WORD_A(0:0)
     0-0-0/w STRC(72)    r     1 VXD$TMPLT                  0-0-0/w STRC(72)    r     1 VXR$SAT
     0-0-0/w STRC        r     1 VXR$TMPLT


   Procedure VXT$PRE requires 1710 words for executable code.
   Procedure VXT$PRE requires 76 words of local(AUTO) storage.

    No errors detected in file VXT$PRE.:E05TSI    .
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:169  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:170  
          MINI XREF LISTING

ADR
     11829**DCL     12125<<ASSIGN  12127<<ASSIGN  12127>>ASSIGN  12129<<ASSIGN  12129>>ASSIGN  12134<>CALL
     12184<<ASSIGN  12186<<ASSIGN  12186>>ASSIGN  12188<<ASSIGN  12188>>ASSIGN  12193<>CALL    12509<<ASSIGN
     12510<>CALL    12513<<ASSIGN  12514<>CALL    12519<<ASSIGN  12520<>CALL
B$DNAME.COUNT
     11519**DCL     11526--IMP-SIZ 11927>>IF      11927>>IF      11930>>IF      11930>>IF      11947>>IF
     11947>>IF      11953>>IF      11953>>IF      11982>>ASSIGN  11983>>ASSIGN  12060>>ASSIGN  12061>>ASSIGN
     12065>>IF      12065>>IF      12392>>IF      12392>>IF      12395>>IF      12395>>IF      12412>>IF
     12412>>IF      12418>>IF      12418>>IF      12441>>IF      12441>>IF      12452>>IF      12452>>IF
     12601>>IF      12601>>IF      12604>>IF      12604>>IF      12621>>IF      12621>>IF      12627>>IF
     12627>>IF
B$DNAME.TEXT
     11526**DCL     11927>>IF      11927>>IF      11930>>IF      11930>>IF      11947>>IF      11947>>IF
     11953>>IF      11953>>IF      11982>>ASSIGN  12061>>ASSIGN  12065>>IF      12065>>IF      12392>>IF
     12392>>IF      12395>>IF      12395>>IF      12412>>IF      12412>>IF      12418>>IF      12418>>IF
     12441>>IF      12441>>IF      12452>>IF      12452>>IF      12601>>IF      12601>>IF      12604>>IF
     12604>>IF      12621>>IF      12621>>IF      12627>>IF      12627>>IF
B$EDEF.OU
     11168**DCL     11174--REDEF
B$EDEF.OU.OFFSET
     11172**DCL     12646>>ASSIGN
B$SEGDEF.AD.OU
     11267**DCL     11272--REDEF
B$SEGDEF.LFLAGS
     11282**DCL     11293--REDEF
B$SEGDEF.SEG.SEGID
     11295**DCL     12552<<ASSIGN
B$SEGDEF.VALUE
     11244**DCL     11247--REDEF   11251--REDEF   11973>>ASSIGN
B$VERSION
     11897**DCL     12521<<ASSIGN
BIN_CHECK
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:171  
     11956**LABEL   11951--GOTO
BIN_CHECK_OVERLAY
     12630**LABEL   12625--GOTO
BIN_CHECK_SPC
     12421**LABEL   12416--GOTO
BIN_FOUND
     11973**LABEL   11932--GOTO
BIN_FOUND_OVERLAY
     12646**LABEL   12606--GOTO
BIN_FOUND_SPC
     12438**LABEL   12397--GOTO
BIN_HIGH
     11838**DCL     11941<<ASSIGN  11944>>ASSIGN  11956<<ASSIGN  11958>>IF      12406<<ASSIGN  12409>>ASSIGN
     12421<<ASSIGN  12423>>IF      12615<<ASSIGN  12618>>ASSIGN  12630<<ASSIGN  12632>>IF
BIN_LOW
     11837**DCL     11940<<ASSIGN  11944>>ASSIGN  11950<<ASSIGN  11958>>IF      12405<<ASSIGN  12409>>ASSIGN
     12415<<ASSIGN  12423>>IF      12614<<ASSIGN  12618>>ASSIGN  12624<<ASSIGN  12632>>IF
BIN_MATCH$
     11855**DCL     12370<<ASSIGN  12392>>IF      12392>>IF      12395>>IF      12395>>IF      12412>>IF
     12412>>IF      12418>>IF      12418>>IF      12441>>IF      12441>>IF      12452>>IF      12452>>IF
BIN_MID
     11839**DCL     11944<<ASSIGN  11945>>ASSIGN  11950>>ASSIGN  11956>>ASSIGN  12409<<ASSIGN  12410>>ASSIGN
     12415>>ASSIGN  12421>>ASSIGN  12618<<ASSIGN  12619>>ASSIGN  12624>>ASSIGN  12630>>ASSIGN
BIN_N$
     11854**DCL     11906<<ASSIGN  11926>>ASSIGN  11946>>ASSIGN  12366<<ASSIGN  12370>>ASSIGN  12391>>ASSIGN
     12411>>ASSIGN  12441>>IF      12441>>IF      12452>>IF      12452>>IF      12579<<ASSIGN  12600>>ASSIGN
     12620>>ASSIGN
BIN_NTEMP$
     11840**DCL     11926<<ASSIGN  11927>>IF      11927>>IF      11930>>IF      11930>>IF      11946<<ASSIGN
     11947>>IF      11947>>IF      11953>>IF      11953>>IF      12391<<ASSIGN  12392>>IF      12392>>IF
     12395>>IF      12395>>IF      12411<<ASSIGN  12412>>IF      12412>>IF      12418>>IF      12418>>IF
     12600<<ASSIGN  12601>>IF      12601>>IF      12604>>IF      12604>>IF      12620<<ASSIGN  12621>>IF
     12621>>IF      12627>>IF      12627>>IF
BIN_RESULT$
     11853**DCL     11924<<ASSIGN  11925>>DOWHILE 11926>>ASSIGN  11935<<ASSIGN  11935>>ASSIGN  11945<<ASSIGN
     11946>>ASSIGN  11973>>ASSIGN  12389<<ASSIGN  12390>>DOWHILE 12391>>ASSIGN  12400<<ASSIGN  12400>>ASSIGN
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:172  
     12410<<ASSIGN  12411>>ASSIGN  12438>>ASSIGN  12598<<ASSIGN  12599>>DOWHILE 12600>>ASSIGN  12609<<ASSIGN
     12609>>ASSIGN  12619<<ASSIGN  12620>>ASSIGN  12646>>ASSIGN
BIN_SPLIT
     11942**LABEL   11958--GOTO
BIN_SPLIT_OVERLAY
     12616**LABEL   12632--GOTO
BIN_SPLIT_SPC
     12407**LABEL   12423--GOTO
BIN_START$
     11851**DCL     11904<<ASSIGN  11922>>IF      11923>>IF      11924>>ASSIGN  11941>>ASSIGN  11942>>ASSIGN
     12364<<ASSIGN  12387>>IF      12388>>IF      12389>>ASSIGN  12406>>ASSIGN  12407>>ASSIGN  12440>>DOWHILE
     12577<<ASSIGN  12596>>IF      12597>>IF      12598>>ASSIGN  12615>>ASSIGN  12616>>ASSIGN
BIN_START1$
     11841**DCL     11942<<ASSIGN  11945>>ASSIGN  12407<<ASSIGN  12410>>ASSIGN  12616<<ASSIGN  12619>>ASSIGN
BIN_STOP$
     11852**DCL     11905<<ASSIGN  11923>>IF      11925>>DOWHILE 11941>>ASSIGN  12365<<ASSIGN  12388>>IF
     12390>>DOWHILE 12406>>ASSIGN  12451>>DOWHILE 12578<<ASSIGN  12597>>IF      12599>>DOWHILE 12615>>ASSIGN
BUF$
     11764**DCL     12288<>CALL    12290>>ASSIGN  12438<<ASSIGN  12440>>DOWHILE 12441>>IF      12441>>IF
     12444>>ASSIGN  12445<<ASSIGN  12445>>ASSIGN  12449<<ASSIGN  12449>>ASSIGN  12451>>DOWHILE 12452>>IF
     12452>>IF      12455>>ASSIGN  12456<<ASSIGN  12456>>ASSIGN  12510<>CALL    12511>>ASSIGN  12514<>CALL
     12515>>ASSIGN  12516>>ASSIGN  12520<>CALL    12521>>ASSIGN
BUFTYP
     11804**DCL     12171<<ASSIGN  12172<<ASSIGN  12174<<ASSIGN  12177<<ASSIGN  12178<<ASSIGN  12193<>CALL
CONTINUE_INIT
     12166**LABEL   12162--GOTO
C_SIZE
     11811**DCL     12138<<ASSIGN  12142>>IF      12142>>ASSIGN  12149<<ASSIGN  12149>>ASSIGN  12197<<ASSIGN
     12201>>IF      12201>>ASSIGN  12208<<ASSIGN  12208>>ASSIGN
DCB_CURR$
     11751**DCL     12039<<ASSIGN  12040>>DOWHILE 12041>>IF      12043>>ASSIGN  12046<<ASSIGN  12046>>ASSIGN
     12048<<ASSIGN  12050>>DOWHILE 12051>>IF      12052>>ASSIGN  12053>>ASSIGN  12057>>ASSIGN  12072<<ASSIGN
     12072>>ASSIGN
DIFF
     11830**DCL     12668<<ASSIGN  12669>>IF      12670>>ASSIGN  12671>>ASSIGN  12692<<ASSIGN  12695>>IF
     12696>>ASSIGN  12700>>ASSIGN
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:173  
DN_ROOT_START$
     11752**DCL     12049<<ASSIGN  12057>>ASSIGN
DONE
     12567**LABEL   12439<<ASSIGN  12440>>DOWHILE 12447<<ASSIGN  12450<<ASSIGN  12451>>DOWHILE 12458<<ASSIGN
     12569--GOTO
DONE_INIT
     12232**LABEL   12223--GOTO
F$DCB.ACTPOS
     11660**DCL     11660--REDEF
F$DCB.ARS#
     11634**DCL     11634--REDEF
F$DCB.ATTR
     11653**DCL     11654--REDEF
F$DCB.BORROW
     11668**DCL     11668--REDEF   11668--REDEF   11668--REDEF
F$DCB.DCBNAME
     11681**DCL     12058<<ASSIGN
F$DCB.DCBNAME.L
     11682**DCL     11682--IMP-SIZ 12058>>ASSIGN  12060<<ASSIGN  12061>>ASSIGN
F$DCB.DCBNAME.N
     11682**DCL     12061<<ASSIGN
F$DCB.DCBNAME.S
     11682**DCL     12059<<ASSIGN
F$DCB.DCBNAME.X
     11682**DCL     12066<<ASSIGN
F$DCB.EOMCHAR#
     11638**DCL     11638--REDEF
F$DCB.FLDID
     11663**DCL     11663--REDEF
F$DCB.FORM$
     11657**DCL     11657--REDEF
F$DCB.FSECT
     11673**DCL     11673--REDEF
F$DCB.FSN#
     11650**DCL     11650--REDEF   11650--REDEF   11651--REDEF
F$DCB.HEADER$
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:174  
     11656**DCL     11656--REDEF
F$DCB.IXTNSIZE#
     11654**DCL     11654--REDEF
F$DCB.LASTSTA$
     11643**DCL     11643--REDEF
F$DCB.LVL
     11669**DCL     11669--REDEF
F$DCB.NAME#.C
     11644**DCL     11644--REDEF
F$DCB.NOEOF
     11666**DCL     11666--REDEF
F$DCB.NRECS#
     11655**DCL     11655--REDEF
F$DCB.NRECX
     11674**DCL     11674--REDEF
F$DCB.OHDR
     11666**DCL     11666--REDEF
F$DCB.ORG#
     11649**DCL     11649--REDEF
F$DCB.PRECNO
     11672**DCL     11672--REDEF
F$DCB.RCSZ
     11678**DCL     11678--REDEF
F$DCB.RES#
     11645**DCL     11645--REDEF
F$DCB.SETX
     11657**DCL     11657--REDEF
F$DCB.TAB$
     11657**DCL     11657--REDEF
F$DCB.TDA
     11671**DCL     11672--REDEF
F$DCB.WSN#
     11645**DCL     11645--REDEF
FIRST_START$
     11761**DCL     12479<<ASSIGN  12485<>CALL    12495>>ASSIGN  12497>>ASSIGN  12498>>ASSIGN
FIRST_STOP$
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:175  
     11762**DCL     12482<<ASSIGN  12483<<ASSIGN  12485<>CALL    12496>>ASSIGN  12497>>ASSIGN
GET_PAGE
     12700**LABEL   12695--GOTO
I
     11786**DCL     11787--REDEF   11907<<DOINDEX 11908>>ASSIGN  11973>>ASSIGN  11992<<DOINDEX 11993>>ASSIGN
     11994>>IF      11995>>IF      11996>>ASSIGN  11997>>ASSIGN  11997>>ASSIGN  12021<<DOINDEX 12022>>ASSIGN
     12022>>ASSIGN  12034<<ASSIGN  12038<>CALL    12078<<ASSIGN  12079>>CALL    12232<<DOINDEX 12233>>ASSIGN
     12240>>ASSIGN  12243>>CALL    12245>>ASSIGN  12251<<DOINDEX 12252>>ASSIGN  12259>>ASSIGN  12262>>CALL
     12286<<ASSIGN  12287<<ASSIGN  12288<>CALL    12317<>CALL    12471<<ASSIGN  12473>>IF      12475>>ASSIGN
     12477<>CALL    12503<<DOINDEX 12504>>IF      12504>>IF      12507>>DOCASE  12509>>ASSIGN  12511>>ASSIGN
     12515>>ASSIGN  12674<<DOINDEX 12680>>ASSIGN  12683>>CALL    12685>>ASSIGN  12685>>ASSIGN  12686>>ASSIGN
IGNORE
     12214**LABEL   12181--GOTO
INT_BLK_COM
     12122**LABEL   12118--GOTO
I_SIZE
     11812**DCL     12142<<ASSIGN  12143<<ASSIGN  12144>>ASSIGN  12145>>ASSIGN  12148>>ASSIGN  12149>>ASSIGN
     12201<<ASSIGN  12202<<ASSIGN  12203>>ASSIGN  12204>>ASSIGN  12207>>ASSIGN  12208>>ASSIGN
J
     11788**DCL     11789--REDEF   12002<<DOINDEX 12013>>ASSIGN  12014>>ASSIGN  12037<<ASSIGN  12038<>CALL
     12079>>CALL    12298<<DOINDEX 12299>>ASSIGN  12306>>ASSIGN
J1
     11796**DCL     12306<<ASSIGN  12533>>ASSIGN
K
     11790**DCL     11791--REDEF   12052<<ASSIGN  12054<>CALL    12062<<DOINDEX 12063>>ASSIGN  12064>>IF
     12066>>ASSIGN  12067>>ASSIGN  12075<<ASSIGN  12076>>IF      12079<>CALL    12080<<ASSIGN  12080>>ASSIGN
     12081>>DOINDEX 12284<<ASSIGN  12288<>CALL    12289>>ASSIGN  12317<>CALL    12330>>IF      12347<>CALL
L
     11792**DCL     11793--REDEF   12000<<ASSIGN  12001<<ASSIGN  12002>>DOINDEX 12053<<ASSIGN  12054<>CALL
     12081<<DOINDEX
LINK_ERROR_OVERLAY
     12722**LABEL   12596--GOTO    12607--GOTO    12611--GOTO    12640--GOTO
M$ERR
      5085**DCL-ENT 11988--CALL
MX
     11797**DCL     12233<<ASSIGN  12234>>IF      12239>>IF      12241>>ASSIGN  12243<>CALL    12252<<ASSIGN
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:176  
     12253>>IF      12258>>IF      12260>>ASSIGN  12262<>CALL
NEXT$
     11754**DCL     12137<<ASSIGN  12147>>ASSIGN  12148<<ASSIGN  12148>>ASSIGN  12196<<ASSIGN  12206>>ASSIGN
     12207<<ASSIGN  12207>>ASSIGN  12474<<ASSIGN  12477<>CALL    12482>>ASSIGN
NODE#
     11805**DCL     12126<<ASSIGN  12134<>CALL    12185<<ASSIGN  12193<>CALL
NOT_FOUND
     11982**LABEL   11922--GOTO    11933--GOTO    11937--GOTO    11966--GOTO
NOT_FOUND_SPC
     12462**LABEL   12387--GOTO    12398--GOTO    12402--GOTO    12431--GOTO
P$
     11745**DCL     11993<<ASSIGN  12013>>ASSIGN  12014>>ASSIGN  12063<<ASSIGN  12064>>IF      12065>>IF
     12065>>IF      12114<<ASSIGN  12115>>DOCASE  12122>>ASSIGN  12125>>ASSIGN  12126>>ASSIGN  12155<<ASSIGN
     12156>>IF      12158>>DOWHILE 12159>>DOCASE  12166>>ASSIGN  12168>>DOCASE  12170>>IF      12171>>ASSIGN
     12176>>IF      12177>>ASSIGN  12184>>ASSIGN  12185>>ASSIGN  12214<<ASSIGN  12214>>ASSIGN  12367<<ASSIGN
     12369>>DOWHILE 12370>>ASSIGN  12444>>ASSIGN  12455>>ASSIGN  12462>>IF      12463>>ASSIGN  12466<<ASSIGN
     12466>>ASSIGN  12542<<ASSIGN  12543>>ASSIGN  12548>>ASSIGN  12552>>ASSIGN
Q$
     11746**DCL     12057<<ASSIGN  12060>>ASSIGN  12061>>ASSIGN  12061>>ASSIGN  12065>>IF      12065>>IF
     12157<<ASSIGN  12158>>DOWHILE 12368<<ASSIGN  12462>>IF      12463>>ASSIGN  12464<<ASSIGN  12464>>ASSIGN
     12468>>ASSIGN
RTYPE
     11795**DCL     12299<<ASSIGN  12300>>ASSIGN  12301>>ASSIGN  12302>>ASSIGN  12303>>ASSIGN  12304>>ASSIGN
     12317<>CALL    12362>>IF      12527>>IF      12528>>ASSIGN  12530>>IF      12547>>IF      12551>>IF
SC_BASE$
     11760**DCL     12294<<ASSIGN  12542>>ASSIGN
SECTNUM
     11806**DCL     12539<>CALL    12541<<ASSIGN  12542>>ASSIGN
SIZE
     11809**DCL     11996<<ASSIGN  11997<<ASSIGN  11998>>IF      11999>>IF      12122<<ASSIGN  12123>>IF
     12128>>DOWHILE 12130>>IF      12131>>ASSIGN  12132<<ASSIGN  12132>>ASSIGN  12166<<ASSIGN  12167>>IF
     12187>>DOWHILE 12189>>IF      12190>>ASSIGN  12191<<ASSIGN  12191>>ASSIGN  12300<<ASSIGN  12305>>IF
     12311>>IF      12313>>ASSIGN  12315<>CALL    12317<>CALL    12317<>CALL    12317<>CALL    12330>>IF
     12343<>CALL    12670<<ASSIGN  12671<<ASSIGN  12672<<ASSIGN  12672>>ASSIGN  12679>>IF      12681>>ASSIGN
     12683<>CALL    12686>>ASSIGN  12693>>IF      12695>>IF      12696<<ASSIGN  12700<<ASSIGN  12707>>IF
     12709>>ASSIGN  12711<>CALL    12714>>ASSIGN
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:177  
SKIP_BUF_ALLOCATION
     12017**LABEL   11994--GOTO    11998--GOTO
STOP$
     11763**DCL     12528<<ASSIGN  12529>>DOWHILE
S_SIZE
     11810**DCL     12130<<ASSIGN  12131<<ASSIGN  12132>>ASSIGN  12134<>CALL    12139<<ASSIGN  12139>>ASSIGN
     12141>>DOWHILE 12142>>IF      12143>>ASSIGN  12144<<ASSIGN  12144>>ASSIGN  12189<<ASSIGN  12190<<ASSIGN
     12191>>ASSIGN  12193<>CALL    12198<<ASSIGN  12198>>ASSIGN  12200>>DOWHILE 12201>>IF      12202>>ASSIGN
     12203<<ASSIGN  12203>>ASSIGN
T$
     11755**DCL     11908<<ASSIGN  11927>>IF      11927>>IF      11930>>IF      11930>>IF      11947>>IF
     11947>>IF      11953>>IF      11953>>IF      11982>>ASSIGN  11982>>ASSIGN  11983>>ASSIGN
VALUE
     11803**DCL     12117<<ASSIGN  12120<<ASSIGN  12136>>ASSIGN  12161<<ASSIGN  12164<<ASSIGN  12195>>ASSIGN
VX$BREF
     11591**DCL     12270--ASSIGN
VX$BREF.WORD_A
     11592**DCL     11593--REDEF
VX$DCB
     11615**DCL     12056<<ASSIGN
VX$DCB$T$C.COUNT
     11623**DCL     11624--IMP-SIZ
VX$HALF_A
     11422**DCL     12043<<ASSIGN  12516<<ASSIGN
VX$IMAGE.CPAGE#_A
     11861**DCL     11862--REDEF
VX$IMAGE.NODE_A$
     11873**DCL     11874--REDEF
VX$IMAGE.START_A$
     11865**DCL     11866--REDEF   12000--ASSIGN  12001--ASSIGN  12013<<ASSIGN
VX$IMAGE.STOP_A$
     11869**DCL     11870--REDEF   12014<<ASSIGN
VX$NODE.ADDR_START.RDATA
     10773**DCL     12088>>IF      12089>>ASSIGN
VX$NODE.ADDR_START.ROS
     10775**DCL     12025>>IF      12026>>ASSIGN  12107<<ASSIGN  12107>>ASSIGN
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:178  
VX$NODE.ADDR_START.RPROC
     10774**DCL     12098>>IF      12099>>ASSIGN
VX$NODE.ADDR_START_A
     10771**DCL     10772--REDEF
VX$NODE.ADDR_STOP.RDATA
     10778**DCL     12093>>IF      12094>>ASSIGN
VX$NODE.ADDR_STOP.ROS
     10780**DCL     12030>>IF      12031>>ASSIGN  12108<<ASSIGN  12108>>ASSIGN
VX$NODE.ADDR_STOP.RPROC
     10779**DCL     12103>>IF      12104>>ASSIGN
VX$NODE.ADDR_STOP_A
     10776**DCL     10777--REDEF
VX$NODE.ALL_BLK_COM
     10869**DCL     12113>>IF
VX$NODE.BLANK_COMMON$
     10872**DCL     12114>>ASSIGN
VX$NODE.BROTHER$
     10760**DCL     12221>>DOWHILE 12225>>ASSIGN  12567>>DOWHILE 12571>>ASSIGN
VX$NODE.FATHER$
     10761**DCL     12222>>ASSIGN  12568>>ASSIGN
VX$NODE.L_PREV_SIZE
     10829**DCL     10840--REDEF
VX$NODE.L_PREV_SIZE.DN
     10831**DCL     12297<<ASSIGN
VX$NODE.L_PREV_SIZE_A
     10840**DCL     12304<<ASSIGN
VX$NODE.L_SC_START
     10848**DCL     10853--REDEF
VX$NODE.L_SC_STOP
     10854**DCL     10859--REDEF
VX$NODE.L_SIZE
     10817**DCL     10828--REDEF
VX$NODE.L_SIZE.DD
     10824**DCL     12497<<ASSIGN
VX$NODE.L_SIZE_A
     10828**DCL     12300>>ASSIGN  12303<<ASSIGN  12527>>IF
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:179  
VX$NODE.L_START
     10793**DCL     10804--REDEF
VX$NODE.L_START.DD$
     10800**DCL     12364>>ASSIGN  12479>>ASSIGN  12481>>IF      12485<>CALL    12495<<ASSIGN
VX$NODE.L_START.DN$
     10795**DCL     12049>>ASSIGN  12366>>ASSIGN  12485<>CALL    12485<>CALL    12579>>ASSIGN
VX$NODE.L_START.ED$
     10798**DCL     12577>>ASSIGN
VX$NODE.L_START.SC$
     10797**DCL     12155>>ASSIGN  12294>>ASSIGN
VX$NODE.L_START_A$
     10804**DCL     12301<<ASSIGN
VX$NODE.L_STOP
     10805**DCL     10816--REDEF
VX$NODE.L_STOP.DD$
     10812**DCL     12365>>ASSIGN  12483>>ASSIGN  12485<>CALL    12496<<ASSIGN
VX$NODE.L_STOP.ED$
     10810**DCL     12578>>ASSIGN
VX$NODE.L_STOP.SC$
     10809**DCL     12157>>ASSIGN
VX$NODE.L_STOP_A$
     10816**DCL     12302<<ASSIGN  12528>>ASSIGN
VX$NODE.NUM
     10769**DCL     12539<>CALL
VX$NODE.PROMOTE_HEAD
     10860**DCL     10863--REDEF
VX$NODE.PROMOTE_TAIL
     10864**DCL     10867--REDEF
VX$NODE.SON$
     10759**DCL     12217>>IF      12218>>ASSIGN  12563>>IF      12564>>ASSIGN
VX$NODE.START_PAGE#.RDATA
     10783**DCL     12089<<ASSIGN  12091<<ASSIGN
VX$NODE.START_PAGE#.ROS
     10785**DCL     12026<<ASSIGN  12028<<ASSIGN  12109<<ASSIGN  12109>>ASSIGN
VX$NODE.START_PAGE#.RPROC
     10784**DCL     12099<<ASSIGN  12101<<ASSIGN
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:180  
VX$NODE.START_PAGE#_A
     10781**DCL     10782--REDEF
VX$NODE.STOP_PAGE#.RDATA
     10788**DCL     12094<<ASSIGN  12096<<ASSIGN
VX$NODE.STOP_PAGE#.ROS
     10790**DCL     12031<<ASSIGN  12033<<ASSIGN  12110<<ASSIGN  12110>>ASSIGN
VX$NODE.STOP_PAGE#.RPROC
     10789**DCL     12104<<ASSIGN  12106<<ASSIGN
VX$NODE.STOP_PAGE#_A
     10786**DCL     10787--REDEF
VX$SC
     10898**DCL     12037--ASSIGN  12046--ASSIGN  12072--ASSIGN  12214--ASSIGN  12542--ASSIGN
VX$SC.ADDRESS
     10933**DCL     12043>>ASSIGN  12052>>ASSIGN  12125>>ASSIGN  12184>>ASSIGN  12543>>ASSIGN
VX$SC.ATTR.INT
     10921**DCL     12115>>DOCASE  12159>>DOCASE
VX$SC.ATTR.PRE_DCB
     10928**DCL     12041>>IF      12051>>IF
VX$SC.ATTR.SEGMENT
     10923**DCL     12170>>IF      12176>>IF
VX$SC.NAME_DISP
     10936**DCL     12057>>ASSIGN
VX$SC.NODE#
     10940**DCL     12126>>ASSIGN  12185>>ASSIGN
VX$SC.SEG
     10899**DCL     12171>>ASSIGN  12177>>ASSIGN  12552>>ASSIGN
VX$SC.SIZE
     10938**DCL     12053>>ASSIGN  12122>>ASSIGN  12166>>ASSIGN
VX$SC.TYPE
     10901**DCL     12168>>DOCASE  12548>>ASSIGN
VX$SECT.MBZ
     11009**DCL     11011--REDEF   11015--REDEF
VX$SOURCE_C
     11893**DCL     12147>>ASSIGN  12206>>ASSIGN
VX$TARGET_B
     11890**DCL     12290<<ASSIGN
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:181  
VX$TARGET_C
     11892**DCL     12147<<ASSIGN  12206<<ASSIGN
VX$TMPLT.A
     11393**DCL     11394--REDEF   11395--REDEF   11926>>ASSIGN  11946>>ASSIGN  12391>>ASSIGN  12411>>ASSIGN
     12600>>ASSIGN  12620>>ASSIGN
VX$WORD_A
     11421**DCL     12042<<ASSIGN  12082<<ASSIGN  12136<<ASSIGN  12195<<ASSIGN  12511<<ASSIGN  12515<<ASSIGN
VXA$GET
     11711**DCL-ENT 12011--CALL    12243--CALL    12262--CALL    12279--CALL    12315--CALL    12477--CALL
     12659--CALL    12683--CALL    12711--CALL
VXD$B2C
     11709**DCL-ENT 12343--CALL    12347--CALL
VXD$TMPLT
     11077**DCL     11923--IF      11935--ASSIGN  11941--ASSIGN  11942--ASSIGN  11945--ASSIGN  12388--IF
     12400--ASSIGN  12406--ASSIGN  12407--ASSIGN  12410--ASSIGN  12444<<ASSIGN  12444>>ASSIGN  12445--ASSIGN
     12449--ASSIGN  12455<<ASSIGN  12455>>ASSIGN  12456--ASSIGN  12463<<ASSIGN  12463>>ASSIGN  12464--ASSIGN
     12466--ASSIGN  12468--ASSIGN  12471--ASSIGN  12479--ASSIGN  12482--ASSIGN  12483--ASSIGN  12485--CALL
     12497--ASSIGN  12539<>CALL    12556--ASSIGN  12597--IF      12609--ASSIGN  12615--ASSIGN  12616--ASSIGN
     12619--ASSIGN
VXD$TMPLT.AD.ISADDR
     11100**DCL     11102--REDEF
VXD$TMPLT.AD.LFLAGS.DEFINED
     11088**DCL     12535>>IF      12546<<ASSIGN
VXD$TMPLT.AD.LOOKUP_SECTNUM
     11094**DCL     12538>>IF
VXD$TMPLT.AD.OFFSET
     11102**DCL     12543<<ASSIGN  12543>>ASSIGN
VXD$TMPLT.AD.SECTNUM
     11097**DCL     12541>>ASSIGN
VXD$TMPLT.CONSTNT
     11107**DCL     12530>>IF
VXD$TMPLT.LFLAGS
     11113**DCL     11126--REDEF
VXD$TMPLT.NPOINTER
     11104**DCL     12370>>ASSIGN  12441>>IF      12441>>IF      12452>>IF      12452>>IF
VXD$TMPLT.PROTECTION.TYPE
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:182  
     11128**DCL     12548<<ASSIGN
VXD$TMPLT.VALUE
     11078**DCL     11080--REDEF
VXE$ERROR
     11702**DCL-ENT 11985--CALL    12358--CALL    12728--CALL
VXR$SAT
     11361**DCL     12252--ASSIGN
VXR$SAT.VALUE
     11362**DCL     11363--REDEF
VXR$TMPLT
     11321**DCL     12669--IF      12670--ASSIGN
VXR$TMPLT.GOT
     11327**DCL     11329--REDEF
VXU$FIND_SECTNUM
     11727**DCL-ENT 12539--CALL
VXU$MERGE
     11724**DCL-ENT 12485--CALL
VXU$PREAD
     11719**DCL-ENT 12317--CALL
VXU$SETUP
     11725**DCL-ENT 12038--CALL    12054--CALL    12079--CALL    12134--CALL    12193--CALL    12288--CALL
     12510--CALL    12514--CALL    12520--CALL
VX_BADR
     10122**DCL     11997>>ASSIGN  12036>>IF
VX_BIAS.A
      9576**DCL      9577--REDEF
VX_BREF_SIZE
     10174**DCL     12270<<ASSIGN  12275>>IF      12277>>ASSIGN  12279<>CALL
VX_BREF_START$
     10172**DCL     12276<<ASSIGN  12279<>CALL    12281>>ASSIGN
VX_CBUF.CHARS_A
      9510**DCL      9511--REDEF
VX_CONST_DCB
     10651**DCL     12056>>ASSIGN
VX_CONST_DCB.ACTPOS
     10692**DCL     10692--REDEF
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:183  
VX_CONST_DCB.ARS#
     10651**DCL     10651--REDEF
VX_CONST_DCB.ATTR#
     10681**DCL     10681--REDEF   10683--REDEF
VX_CONST_DCB.BORROW
     10703**DCL     10703--REDEF   10703--REDEF   10703--REDEF
VX_CONST_DCB.EOMCHAR#
     10658**DCL     10659--REDEF
VX_CONST_DCB.FLDID
     10695**DCL     10696--REDEF
VX_CONST_DCB.FORM$
     10687**DCL     10687--REDEF
VX_CONST_DCB.FSECT
     10710**DCL     10710--REDEF
VX_CONST_DCB.FSN#
     10677**DCL     10677--REDEF   10677--REDEF   10678--REDEF
VX_CONST_DCB.HEADER$
     10686**DCL     10687--REDEF
VX_CONST_DCB.IXTNSIZE#
     10683**DCL     10684--REDEF
VX_CONST_DCB.LASTSTA$
     10667**DCL     10667--REDEF
VX_CONST_DCB.LVL
     10704**DCL     10704--REDEF
VX_CONST_DCB.NAME#.C
     10667**DCL     10668--REDEF
VX_CONST_DCB.NOEOF
     10699**DCL     10699--REDEF
VX_CONST_DCB.NRECS#
     10684**DCL     10684--REDEF
VX_CONST_DCB.NRECX
     10711**DCL     10711--REDEF
VX_CONST_DCB.OHDR
     10700**DCL     10700--REDEF
VX_CONST_DCB.ORG#
     10675**DCL     10676--REDEF
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:184  
VX_CONST_DCB.PRECNO
     10708**DCL     10708--REDEF
VX_CONST_DCB.RCSZ
     10716**DCL     10716--REDEF
VX_CONST_DCB.RES#
     10669**DCL     10669--REDEF
VX_CONST_DCB.SETX
     10688**DCL     10688--REDEF
VX_CONST_DCB.TAB$
     10687**DCL     10687--REDEF
VX_CONST_DCB.TDA
     10707**DCL     10708--REDEF
VX_CONST_DCB.WSN#
     10669**DCL     10670--REDEF
VX_CURR$
      9545**DCL     12086<<ASSIGN  12088>>IF      12089>>ASSIGN  12089>>ASSIGN  12091>>ASSIGN  12093>>IF
     12094>>ASSIGN  12094>>ASSIGN  12096>>ASSIGN  12098>>IF      12099>>ASSIGN  12099>>ASSIGN  12101>>ASSIGN
     12103>>IF      12104>>ASSIGN  12104>>ASSIGN  12106>>ASSIGN  12107>>ASSIGN  12108>>ASSIGN  12109>>ASSIGN
     12110>>ASSIGN  12113>>IF      12114>>ASSIGN  12155>>ASSIGN  12157>>ASSIGN  12217>>IF      12218<<ASSIGN
     12218>>ASSIGN  12221>>DOWHILE 12222<<ASSIGN  12222>>ASSIGN  12223>>IF      12225<<ASSIGN  12225>>ASSIGN
     12295<<ASSIGN  12297>>ASSIGN  12300>>ASSIGN  12301>>ASSIGN  12302>>ASSIGN  12303>>ASSIGN  12304>>ASSIGN
     12317<>CALL    12362>>IF      12527>>IF      12528>>ASSIGN  12539>>CALL    12563>>IF      12564<<ASSIGN
     12564>>ASSIGN  12567>>DOWHILE 12568<<ASSIGN  12568>>ASSIGN  12569>>IF      12571<<ASSIGN  12571>>ASSIGN
VX_DCB_SIZEC
     10725**DCL     11616--IMP-SIZ 12056>>ASSIGN
VX_DCB_START$
     10196**DCL     12036>>IF      12037>>ASSIGN  12039>>ASSIGN  12048>>ASSIGN
VX_DCB_STOP$
     10197**DCL     12037>>ASSIGN  12040>>DOWHILE 12050>>DOWHILE
VX_DEF_REC_A
     10217**DCL     12298--DOINDEX 12299>>ASSIGN
VX_EADR
     10123**DCL     11997>>ASSIGN  12036>>IF
VX_EBUF.CHARS_A
     10099**DCL     10100--REDEF
VX_EFIELD1.CHARS
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:185  
     10108**DCL     10109--REDEF   11982<<ASSIGN  12723<<ASSIGN
VX_EFIELD1.CHARS_A
     10109**DCL     12343<>CALL
VX_EFIELD1.COUNT
     10107**DCL     11983<<ASSIGN  12722<<ASSIGN
VX_EFIELD2.CHARS
     10112**DCL     10113--REDEF
VX_EFIELD2.CHARS_A
     10113**DCL     12347<>CALL
VX_EFIELD3.CHARS
     10116**DCL     10117--REDEF
VX_EI_KEY_BUF.KEY
     10492**DCL     10493--REDEF
VX_ERRORS
      9553**DCL      9564--REDEF
VX_ERRORS.CONFLICT_A
      9559**DCL      9560--REDEF
VX_ERRORS.UNSAT_A
      9555**DCL      9556--REDEF
VX_HAVE_SPC
     10405**DCL     12363>>IF      12460<<ASSIGN  12460>>ASSIGN  12470>>IF      12471>>ASSIGN  12482>>ASSIGN
     12483>>ASSIGN
VX_IMAGE$
     10121**DCL     11860--IMP-PTR
VX_IMAGE_DATA.CPAGE#_A
      8690**DCL      8691--REDEF
VX_IMAGE_DATA.NODE_A$
      8702**DCL      8703--REDEF
VX_IMAGE_DATA.START_A$
      8694**DCL      8695--REDEF
VX_IMAGE_DATA.STOP_A$
      8698**DCL      8699--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8759**DCL      8760--REDEF
VX_IMAGE_DS3.NODE_A$
      8771**DCL      8772--REDEF
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:186  
VX_IMAGE_DS3.START_A$
      8763**DCL      8764--REDEF
VX_IMAGE_DS3.STOP_A$
      8767**DCL      8768--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8782**DCL      8783--REDEF
VX_IMAGE_DS4.NODE_A$
      8794**DCL      8795--REDEF
VX_IMAGE_DS4.START_A$
      8786**DCL      8787--REDEF
VX_IMAGE_DS4.STOP_A$
      8790**DCL      8791--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8805**DCL      8806--REDEF
VX_IMAGE_DS5.NODE_A$
      8817**DCL      8818--REDEF
VX_IMAGE_DS5.START_A$
      8809**DCL      8810--REDEF
VX_IMAGE_DS5.STOP_A$
      8813**DCL      8814--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8828**DCL      8829--REDEF
VX_IMAGE_DS6.NODE_A$
      8840**DCL      8841--REDEF
VX_IMAGE_DS6.START_A$
      8832**DCL      8833--REDEF
VX_IMAGE_DS6.STOP_A$
      8836**DCL      8837--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8851**DCL      8852--REDEF
VX_IMAGE_DS7.NODE_A$
      8863**DCL      8864--REDEF
VX_IMAGE_DS7.START_A$
      8855**DCL      8856--REDEF
VX_IMAGE_DS7.STOP_A$
      8859**DCL      8860--REDEF
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:187  
VX_IMAGE_DS8.CPAGE#_A
      8874**DCL      8875--REDEF
VX_IMAGE_DS8.NODE_A$
      8886**DCL      8887--REDEF
VX_IMAGE_DS8.START_A$
      8878**DCL      8879--REDEF
VX_IMAGE_DS8.STOP_A$
      8882**DCL      8883--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8713**DCL      8714--REDEF
VX_IMAGE_PROC.NODE_A$
      8725**DCL      8726--REDEF
VX_IMAGE_PROC.START_A$
      8717**DCL      8718--REDEF
VX_IMAGE_PROC.STOP_A$
      8721**DCL      8722--REDEF
VX_IMAGE_PTR$
      8896**DCL     11992--DOINDEX 11993>>ASSIGN
VX_IMAGE_ROS.CPAGE#_A
      8736**DCL      8737--REDEF
VX_IMAGE_ROS.NODE_A$
      8748**DCL      8749--REDEF
VX_IMAGE_ROS.START_A$
      8740**DCL      8741--REDEF
VX_IMAGE_ROS.STOP_A$
      8744**DCL      8745--REDEF
VX_LINK_UTS
      9535**DCL     12117>>ASSIGN  12161>>ASSIGN
VX_MERGE_START$
     10198**DCL     12367>>ASSIGN  12368>>ASSIGN  12485<>CALL
VX_MERGE_STOP$
     10199**DCL     12369>>DOWHILE 12468<<ASSIGN  12485<>CALL
VX_M_ALL
      9587**DCL     12007>>IF      12239>>IF      12258>>IF      12275>>IF      12311>>IF      12473>>IF
     12655>>IF      12668>>ASSIGN  12679>>IF      12692>>ASSIGN  12707>>IF
VX_M_BASE_PTR
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:188  
      9589**DCL     12008>>ASSIGN  12240>>ASSIGN  12259>>ASSIGN  12276>>ASSIGN  12312>>ASSIGN  12474>>ASSIGN
     12656>>ASSIGN  12680>>ASSIGN  12708>>ASSIGN
VX_M_FREE
      9585**DCL     12007>>IF      12008>>ASSIGN  12009<<ASSIGN  12009>>ASSIGN  12239>>IF      12240>>ASSIGN
     12241<<ASSIGN  12241>>ASSIGN  12258>>IF      12259>>ASSIGN  12260<<ASSIGN  12260>>ASSIGN  12275>>IF
     12276>>ASSIGN  12277<<ASSIGN  12277>>ASSIGN  12311>>IF      12312>>ASSIGN  12313<<ASSIGN  12313>>ASSIGN
     12473>>IF      12474>>ASSIGN  12475<<ASSIGN  12475>>ASSIGN  12655>>IF      12656>>ASSIGN  12657<<ASSIGN
     12657>>ASSIGN  12668>>ASSIGN  12679>>IF      12680>>ASSIGN  12681<<ASSIGN  12681>>ASSIGN  12692>>ASSIGN
     12707>>IF      12708>>ASSIGN  12709<<ASSIGN  12709>>ASSIGN
VX_M_VECTOR.F
      8541**DCL      8545--REDEF
VX_M_VECTOR_DP.F
      8576**DCL      8580--REDEF
VX_NEXT_BREF$
     10173**DCL     11591--IMP-PTR 12281<<ASSIGN
VX_NODE_NUMBER
      9536**DCL     12576>>IF
VX_O.ACCTN_A$
      9705**DCL      9706--REDEF
VX_O.DCB_MATCH_A$
      9714**DCL      9715--REDEF   12062--DOINDEX 12063>>ASSIGN
VX_O.DCB_MATCH_HIT_A
      9720**DCL      9721--REDEF   12067<<ASSIGN
VX_O.FIDN_A$
      9699**DCL      9700--REDEF
VX_O.FID_A$
      9691**DCL      9692--REDEF
VX_O.INCLUDE_A$
      9711**DCL      9712--REDEF
VX_O.MAP_A
      9685**DCL      9686--REDEF
VX_O.NODCB_A
      9742**DCL      9743--REDEF
VX_O.NUM.BREF
      9633**DCL     12269>>IF      12270>>ASSIGN  12576>>IF
VX_O.NUM_A
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:189  
      9630**DCL      9632--REDEF
VX_O.OPT_A
      9730**DCL      9731--REDEF
VX_O.PRIV_A
      9646**DCL      9648--REDEF
VX_O.SIN_A
      9599**DCL      9600--REDEF
VX_O.TCB_A
      9726**DCL      9727--REDEF
VX_O.VERSION
      9749**DCL     12521>>ASSIGN
VX_OD.ACCTN_A$
      9903**DCL      9904--REDEF
VX_OD.DCB_MATCH_A$
      9912**DCL      9913--REDEF
VX_OD.FIDN_A$
      9897**DCL      9898--REDEF
VX_OD.FID_A$
      9889**DCL      9890--REDEF
VX_OD.INCLUDE_A$
      9909**DCL      9910--REDEF
VX_OD.MAP_A
      9883**DCL      9884--REDEF
VX_OD.NODCB_A
      9927**DCL      9928--REDEF   12064>>IF
VX_OD.NUM.DBIAS
      9834**DCL     12077>>IF      12285>>IF
VX_OD.NUM_A
      9830**DCL      9831--REDEF
VX_OD.PRIV_A
      9845**DCL      9846--REDEF
VX_OD.SIN_A
      9799**DCL      9800--REDEF
VX_OD.VECTOR_A$
      9918**DCL      9919--REDEF
VX_OL.MAX_A
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:190  
      9774**DCL      9776--REDEF
VX_OL.MIN_A
      9759**DCL      9760--REDEF
VX_ON.ACCTN_A$
     10048**DCL     10050--REDEF
VX_ON.DCB_MATCH_A$
     10059**DCL     10061--REDEF
VX_ON.FIDN_A$
     10041**DCL     10043--REDEF
VX_ON.FID_A$
     10032**DCL     10034--REDEF
VX_ON.INCLUDE_A$
     10055**DCL     10057--REDEF
VX_ON.MAP_A
     10025**DCL     10027--REDEF
VX_ON.NODCB_A$
     10075**DCL     10076--REDEF
VX_ON.NUM_A
      9970**DCL      9972--REDEF
VX_ON.PRIV_A
      9986**DCL      9988--REDEF
VX_ON.SIN_A
      9938**DCL      9940--REDEF
VX_ON.VECTOR_A$
     10066**DCL     10067--REDEF
VX_OUHEAD.VERSION
      9385**DCL      9387--REDEF
VX_OU_HEAD
      9328**DCL      9367--REDEF
VX_OU_HEAD.REC_A
      9340**DCL      9343--REDEF
VX_O_KEY_BUF.FORM0
      8589**DCL      8592--REDEF    8599--REDEF
VX_O_KEY_BUF_L.FORM0
      8612**DCL      8615--REDEF    8622--REDEF
VX_PASS
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:191  
      9526**DCL     11902<<ASSIGN
VX_PASS2_REF.OU.L_START
     10278**DCL     10283--REDEF
VX_PASS2_REF.OU.L_START_A$
     10283**DCL     12240<<ASSIGN  12243<>CALL    12245>>ASSIGN
VX_PASS2_REF.OU.L_STOP
     10284**DCL     10289--REDEF
VX_PASS2_REF.OU.MAX
     10272**DCL     10277--REDEF
VX_PASS2_REF.OU.MAX_A
     10277**DCL     12232--DOINDEX 12233>>ASSIGN  12251--DOINDEX 12252>>ASSIGN
VX_PASS2_REF.OU.SIZE
     10290**DCL     10295--REDEF
VX_PASS2_REF.SAT.COUNT
     10317**DCL     10323--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10324**DCL     10330--REDEF
VX_PASS2_REF.SAT.L_START
     10303**DCL     10309--REDEF
VX_PASS2_REF.SAT.L_START_A$
     10309**DCL     12259<<ASSIGN  12262<>CALL
VX_PASS2_REF.SAT.L_STOP
     10310**DCL     10316--REDEF
VX_PASS2_REF.SAT.MAX
     10297**DCL     10302--REDEF
VX_PASS2_REF.UNSAT.L_START
     10365**DCL     10370--REDEF
VX_PASS2_REF.UNSAT.L_START_A$
     10370**DCL     12674--DOINDEX
VX_PASS2_REF.UNSAT.L_STOP
     10371**DCL     10376--REDEF
VX_PASS2_REF.UNSAT.L_STOP.RN$
     10372**DCL     12713<<ASSIGN
VX_PASS2_REF.UNSAT.L_STOP_A$
     10376**DCL     12685<<ASSIGN
VX_PASS2_REF.UNSAT.L_WHERE
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:192  
     10377**DCL     10382--REDEF
VX_PASS2_REF.UNSAT.L_WHERE.RN$
     10378**DCL     12708<<ASSIGN  12711<>CALL    12713>>ASSIGN
VX_PASS2_REF.UNSAT.L_WHERE_A$
     10382**DCL     12680<<ASSIGN  12683<>CALL    12685>>ASSIGN
VX_PASS2_REF.UNSAT.MAX
     10359**DCL     10364--REDEF
VX_PASS2_REF.UNSAT.MAX.RN
     10360**DCL     12714<<ASSIGN
VX_PASS2_REF.UNSAT.MAX_A
     10364**DCL     12686<<ASSIGN
VX_PASS2_REF.UNSAT.PAGE#
     10389**DCL     10394--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10383**DCL     10388--REDEF
VX_PHRASE.I.PASS
      9795**DCL     11903<<ASSIGN
VX_PHRASE.PHRASE
      9791**DCL      9793--REDEF
VX_PROGRAM_BIAS.A
      9569**DCL      9570--REDEF   12286>>ASSIGN
VX_PROGRAM_BIAS.I.DATA
      9571**DCL     12034>>ASSIGN  12516>>ASSIGN
VX_PROGRAM_BIAS.I.RPROC
      9572**DCL     12509>>ASSIGN  12513>>ASSIGN  12519>>ASSIGN
VX_REC_BUF_SIZE
     10171**DCL     12655>>IF      12657>>ASSIGN  12659<>CALL    12662>>ASSIGN
VX_REC_BUF_START$
     10170**DCL     12656<<ASSIGN  12659<>CALL    12661>>ASSIGN  12662>>ASSIGN
VX_ROOT$
      9542**DCL     12025>>IF      12026>>ASSIGN  12026>>ASSIGN  12028>>ASSIGN  12030>>IF      12031>>ASSIGN
     12031>>ASSIGN  12033>>ASSIGN  12049>>ASSIGN  12086>>ASSIGN  12107>>ASSIGN  12108>>ASSIGN  12109>>ASSIGN
     12110>>ASSIGN  12294>>ASSIGN  12295>>ASSIGN  12362>>IF      12364>>ASSIGN  12365>>ASSIGN  12366>>ASSIGN
     12479>>ASSIGN  12481>>IF      12483>>ASSIGN  12485>>CALL    12485>>CALL    12485>>CALL    12485>>CALL
     12495>>ASSIGN  12496>>ASSIGN  12497>>ASSIGN  12577>>ASSIGN  12578>>ASSIGN  12579>>ASSIGN
VX_ROS_ALLOWED
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:193  
     10501**DCL     11994>>IF
VX_RU_HEAD.DCBRES
      8971**DCL     12075>>ASSIGN
VX_RU_HEAD.MAP_BITS_A.CON
      9006**DCL     12533<<ASSIGN
VX_R_KEY_BUF.FORM0
      8638**DCL      8642--REDEF    8648--REDEF
VX_SC_X_NODE$
     10192**DCL     11766--IMP-PTR
VX_SD
      8265**DCL     11904--ASSIGN
VX_SD.A
      8266**DCL      8267--REDEF
VX_SD_STOP$
      8263**DCL     11905>>ASSIGN
VX_SEGID
     10402**DCL     12171>>ASSIGN  12171>>ASSIGN  12177>>ASSIGN  12177>>ASSIGN  12552>>ASSIGN
VX_SEG_EPAGE#
     10404**DCL     12022<<ASSIGN
VX_SEG_SIZE
     10401**DCL     11996>>ASSIGN  12022>>ASSIGN
VX_SLIB_AREA$
     10190**DCL     12245>>IF      12245<<ASSIGN  12661>>IF      12661<<ASSIGN  12662>>ASSIGN
VX_SLIB_AREA_SIZE
     10191**DCL     12662<<ASSIGN
VX_SLIB_INIT$
     10164**DCL     12077>>IF      12285>>IF
VX_SN
      8260**DCL     11906--ASSIGN
VX_SOURCE_COUNT
     10125**DCL     11891--IMP-SIZ 11893--IMP-SIZ 12146<<ASSIGN  12147>>ASSIGN  12205<<ASSIGN  12206>>ASSIGN
VX_SPC.B$.MINE
     10460**DCL     10466--REDEF
VX_SPC.B$.MINE_A
     10466**DCL     12504>>IF
VX_SPC.B$.NAME
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:194  
     10439**DCL     10445--REDEF
VX_SPC.B$.NAME_A$
     10445**DCL     12503--DOINDEX
VX_SPC.B$.SKIP
     10453**DCL     10459--REDEF
VX_SPC.B$.SKIP_A
     10459**DCL     12504>>IF
VX_SPC.B$.VALUE
     10446**DCL     10452--REDEF
VX_SPC.B$.VALUE.DELTA
     10448**DCL     12513>>ASSIGN
VX_SPC.B$.VALUE.VERSION
     10451**DCL     12519>>ASSIGN
VX_SPC.B$.VALUE_A
     10452**DCL     12509>>ASSIGN
VX_SPC.DELTA_DATA_ADR
     10481**DCL     12516>>ASSIGN
VX_SPC.FAULT
     10480**DCL     12287>>ASSIGN
VX_SPC.SEG.NAME
     10408**DCL     10414--REDEF
VX_SPC.SEG.NAME_A$
     10414**DCL     11907--DOINDEX 11908>>ASSIGN
VX_SPC.SEG.VALUE
     10415**DCL     10421--REDEF
VX_SPC.SEG.VALUE.NUL
     10420**DCL     12082>>ASSIGN
VX_SPC.SEG.VALUE.ROS
     10419**DCL     12042>>ASSIGN
VX_SPC.SEG.VALUE_A
     10421**DCL     11973<<ASSIGN  12511>>ASSIGN  12515>>ASSIGN
VX_SPC_DATA_INSERT
     10500**DCL     12283>>IF
VX_TARGET_COUNT
     10124**DCL     11890--IMP-SIZ 11892--IMP-SIZ 12145<<ASSIGN  12146>>ASSIGN  12147>>ASSIGN  12204<<ASSIGN
     12205>>ASSIGN  12206>>ASSIGN  12289<<ASSIGN  12290>>ASSIGN
PL6.E3A0      #001=VXT$PRE File=VXT$PRE.:E05TSI                                  WED 07/30/97 08:41 Page:195  
VX_TSX0_OVERLAY.H
     10183**DCL     10186--REDEF
VX_TSX0_OVERLAY.H.LEFT_HALF
     10184**DCL     12646<<ASSIGN
VX_XSO$BREF
     10178**DCL     12601--IF      12601--IF      12604--IF      12604--IF      12621--IF      12621--IF
     12627--IF      12627--IF
VX_XSO$BREF.CHARS
     10180**DCL     12723>>ASSIGN
VX_XSO$BREF.COUNT
     10179**DCL     12722>>ASSIGN
WHERE$
     11753**DCL     12008<<ASSIGN  12011<>CALL    12013>>ASSIGN  12014>>ASSIGN  12038<>CALL    12042>>ASSIGN
     12043>>ASSIGN  12044<<ASSIGN  12044>>ASSIGN  12044--ASSIGN  12054<>CALL    12056>>ASSIGN  12058>>ASSIGN
     12058>>ASSIGN  12059>>ASSIGN  12060>>ASSIGN  12061>>ASSIGN  12061>>ASSIGN  12066>>ASSIGN  12079<>CALL
     12082>>ASSIGN  12083<<ASSIGN  12083>>ASSIGN  12083--ASSIGN  12134<>CALL    12136>>ASSIGN  12137>>ASSIGN
     12147>>ASSIGN  12193<>CALL    12195>>ASSIGN  12196>>ASSIGN  12206>>ASSIGN  12312<<ASSIGN  12315<>CALL
     12317<>CALL    12498<<ASSIGN  12529>>DOWHILE 12530>>IF      12535>>IF      12538>>IF      12539>>CALL
     12541>>ASSIGN  12543>>ASSIGN  12543>>ASSIGN  12546>>ASSIGN  12548>>ASSIGN  12552>>ASSIGN  12556<<ASSIGN
     12556>>ASSIGN
