VERSION A02

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:1    
        1        1        /*M* FUI$IORQS - NFS disk I/O handling - reading and writing */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=2,CSI=0,ECI=0,CLM=30,CRM=67, MOC=Y,CCI=3 */
        8        8        /*F*  NAME: FUI$IORQS
        9        9              Purpose:
       10       10                    Handles NFS disk I/O requests (reads and writes).
       11       11        */
       12       12        /*D*  NAME: FUI$IORQS
       13       13              Inputs:
       14       14                    REQUEST - contains I/O request and pertinant information.
       15       15              Outputs:
       16       16                    REQUEST - completed I/O information filled in.
       17       17        */
       18       18
       19       19        FUI$IORQS: PROC (REQUEST);
       20       20
       21       21             %INCLUDE CP_6;
       22      102             %INCLUDE B_ERRORS_C;
       23     1228             %INCLUDE XSL_SOCKET_M;
       24     1976             %INCLUDE FU_NFS_M;
       25     2491             %INCLUDE FU_NFSSUBS_C;
       26     2586
       27     2587                                      /* ARGUMENT */
       28     2588
       29     2589        %FU$RQSCTX (NAME=REQUEST,STCLASS=PARAM);
       30     2678
       31     2679                                      /* LOCAL EQU's */
       32     2680
       33     2681        %EQU TRUE#='1'B;
       34     2682        %EQU FALSE#='0'B;
       35     2683        %EQU FUI_CHUNKSIZE = 4096;
       36     2684
       37     2685                                      /* OTHER NEEDED STRUCTURES */
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:2    
       38     2686
       39     2687        %FU$UCTX (NAME=USERCTX,STCLASS="BASED(UCTX$)");
       40     2740        %FU$FCTX (NAME=FILECTX,STCLASS="BASED(FCTX$)");
       41     2843        %FU$READARGS (STCLASS="BASED(BODY$)");
       42     2885        %FU$WRITEARGS (STCLASS="BASED(BODY$)");
       43     2928        %FU$ATTRSTAT (STCLASS="BASED(RESULT$)");
       44     2979        %FU$READRES (STCLASS="BASED(RESULT$)");
       45     3031
       46     3032                                      /* CP-6 MONITOR INTERACTION */
       47     3033
       48     3034    1   DCL B$TCB$ PTR SYMREF;
       49     3035
       50     3036             %F$DCB(DCBN=USERDCB, BASED="BASED(USERDCB$)");
       51     3093             %B$TCB;
       52     3096             %B$ALT;
       53     3104
       54     3105        %SUB B$ALT=B$TCB$->B$TCB.ALT$->B$ALT;
       55     3106
       56     3107             %FPT_READ (FPTN=READ_USER_REC,
       57     3108                        STRPVFC=YES);
       58     3147
       59     3148             %FPT_READ (FPTN=READ_KEYED_REC,
       60     3149                        KEYS=YES,
       61     3150                        KEY=FILE_KEY);
       62     3189
       63     3190             %FPT_WRITE (FPTN=WRITE_USER_REC);
       64     3221
       65     3222             %FPT_WRITE (FPTN=WRITE_VFC_REC,
       66     3223                         VFC=YES,
       67     3224                         CONT=YES);
       68     3255
       69     3256             %FPT_WRITE (FPTN=WRITE_KEYED_REC,
       70     3257                            KEY=FILE_KEY);
       71     3288
       72     3289             %FPT_PRECORD (FPTN=POSITION_BACK,
       73     3290                            N=-1);
       74     3311
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:3    
       75     3312             %FPT_PRECORD (FPTN=POSITION_BINARY,
       76     3313                           KEY=FILE_KEY,
       77     3314                           KEYS=YES);
       78     3335
       79     3336             %FPT_READ (FPTN=READ_NEXT_KEYED_REC,
       80     3337                        KEY=FILE_KEY,
       81     3338                        KEYR=YES);
       82     3377
       83     3378                                      /* SLAVE ROUTINES TO THIS ONE */
       84     3379
       85     3380    1   DCL FUI$MEMALLOC ENTRY(1);
       86     3381    1   DCL XSL$NTOHL ENTRY(2);
       87     3382    1   DCL XSL$HTONL ENTRY(2);
       88     3383
       89     3384                                      /* LOCAL DATA DEFINITIONS */
       90     3385
       91     3386    1   DCL LFINDX SBIN;
       92     3387    1   DCL RECLEN SBIN;
       93     3388    1   DCL NBYTES SBIN;
       94     3389    1   DCL TRANSFER_SIZE UBIN;
       95     3390    1   DCL RECSTART UBIN;
       96     3391    1   DCL RECKEY UBIN;
       97     3392    1   DCL BASED_STRING CHAR(TRANSFER_SIZE) BASED;
       98     3393    1   DCL 1 BASED_STRUCT BASED,
       99     3394    1          2 * CHAR(NBYTES) CALIGNED;
      100     3395    1   DCL BUF_TEMPLATE CHAR(NBYTES) BASED;
      101     3396    1   DCL 1 BINARY_BLOCK BASED,
      102     3397    1          2 T CHAR(1024);
      103     3398    1   DCL BUFU (0:0) UBIN BYTE CALIGNED BASED;
      104     3399
      105     3400    1   DCL OBLOCK$ PTR;
      106     3401    1   DCL OBLOCKI$ PTR;
      107     3402    1   DCL BODY$ PTR;
      108     3403    1   DCL UCTX$ PTR;
      109     3404    1   DCL FCTX$ PTR;
      110     3405    1   DCL USERDCB$ PTR;
      111     3406    1   DCL BUF$ PTR;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:4    
      112     3407    1   DCL RESULT$ PTR;
      113     3408
      114     3409    1   DCL 1 FILE_KEY STATIC,
      115     3410    1          2 COUNT_ UBIN BYTE CALIGNED INIT(3),
      116     3411    1          2 VALUE_ UBIN(27) CALIGNED INIT(0);
      117     3412
      118     3413    1   DCL STARTBYTE_SAVE SBIN;
      119     3414    1   DCL STARTBYTE UBIN;
      120     3415    1   DCL SIZEBYTES SBIN;
      121     3416    1   DCL FOUND SBIN;
      122     3417    1   DCL LASTI SBIN;
      123     3418
      124     3419        %EQU CACHESZ = 10; /* number of entries in USERCTX.FILEPOS cache */
      125     3420
      126     3421    1   DCL FIND_LF_CR_FF(0:255) UBIN BYTE CALIGNED CONSTANT INIT (
      127     3422    1     0*10, 1 /* LF */, 0, 3 /* FF */, 2 /* CR */, 0*0 );
      128     3423    1   DCL VFC_NONE CHAR(1) CONSTANT INIT ('@'); /* no LF, CR, or FF found */
      129     3424    1   DCL VFC_CR CHAR(1) CONSTANT INIT ('`'); /* CR */
      130     3425    1   DCL VFC_FF CHAR(1) CONSTANT INIT ('P'); /* FF */
      131     3426
      132     3427
      133     3428                            /* enter with REQUEST.BODY$ pointing to REQUEST
      134     3429                                 parameters, and local points set up */
      135     3430
      136     3431    1        UCTX$ = REQUEST.UCTX$;
      137     3432    1        FCTX$ = USERCTX.FCTX$;
      138     3433    1        BODY$ = REQUEST.BODY$;
      139     3434    1        USERDCB$ = DCBADDR (FILECTX.DCB#);
      140     3435    1        RESULT$ = ADDR(REQUEST.REPLYHDR.RESULTS);
      141     3436    1        LASTI = 0;
      142     3437
      143     3438    2        DO CASE (REQUEST.PROC#);
      144     3439
      145     3440    2        CASE (%NFSPROC_READ);
      146     3441
      147     3442    2           CALL XSL$NTOHL (STARTBYTE, FU$READARGS.OFFSET);
      148     3443    2           CALL XSL$NTOHL (SIZEBYTES, FU$READARGS.COUNT);
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:5    
      149     3444    2           OBLOCK$ = ADDR( FU$READRES.DATA);
      150     3445    2           OBLOCKI$ = OBLOCK$;
      151     3446    2           CALL FUI$RDRQS;
      152     3447
      153     3448    2           CALL XSL$HTONL (FU$READRES.COUNT, POFFC (OBLOCK$, OBLOCKI$));
      154     3449
      155     3450
      156     3451    2        CASE (%NFSPROC_WRITE);
      157     3452
      158     3453    2           CALL XSL$NTOHL (STARTBYTE, FU$WRITEARGS.OFFSET);
      159     3454    2           CALL XSL$NTOHL (SIZEBYTES, FU$WRITEARGS.COUNT);
      160     3455    2           OBLOCK$ = ADDR(FU$WRITEARGS.DATA);
      161     3456    2           OBLOCKI$ = OBLOCK$;
      162     3457    2           CALL FUI$WRRQS;
      163     3458    2           CALL XSL$HTONL (FU$WRITEARGS.COUNT, POFFC (OBLOCK$, OBLOCKI$));
      164     3459
      165     3460    2        CASE (ELSE);             /* IGNORE OTHER REQUESTS */
      166     3461
      167     3462    2        END;
      168     3463
      169     3464    1        RETURN;
      170     3465
      171     3466        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:6    
      172     3467        /*I*  NAME:    FUI$RDRQS
      173     3468              Purpose: To read data from a file into the caller's buffer.
      174     3469              Inputs:  STARTBYTE - the byte offset into the file to start reading from.
      175     3470                       SIZEBYTES - the number of bytes to read from the file.
      176     3471                       OBLOCK$ - points to the buffer to read into.
      177     3472              Outputs: REQUEST.REPLYHDR - contains the data/size for the file.
      178     3473                       OBLOCK$ - points to the byte after the last byte read in.
      179     3474              Algorithm:
      180     3475                       For text files (any file other than a C-library binary file):
      181     3476                         We try to position as close to STARTBYTE as possible using info
      182     3477                         gained previously - otherwise we have to start from the start
      183     3478                         of the file.  Then position till we get a buffer containing the
      184     3479                         STARTBYTE, and then fill up the user buffer.
      185     3480                       For binary files:
      186     3481                         We can immediately position to STARTBYTE, because each record
      187     3482                         is fixed length (1024 bytes), and indexed by STARTBYTE/1024.
      188     3483                         Read these blocks, and fill in the user buffer.  These files
      189     3484                         can have "holes", these are assumed to be filled with zeros.
      190     3485        */
      191     3486
      192     3487    1   FUI$RDRQS: PROC;
      193     3488
      194     3489    2        OBLOCKI$ = ADDR( FU$READRES.DATA);
      195     3490    2        OBLOCK$ = OBLOCKI$;
      196     3491
      197     3492                                 /* if the request is in a binary file,
      198     3493                                      branch off here to handle it
      199     3494                                      entirely differently.
      200     3495                                 */
      201     3496
      202     3497    2        IF  FILECTX.FATTR.XATTR.TEXTMODE = %FALSE#
      203     3498    2        THEN
      204     3499    2           GOTO BINARY_HANDLING;
      205     3500
      206     3501        /* TEXT HANDLING - this code is used for reading text files - any CP-6 file
      207     3502           that is not a C library binary file format, and can be read sequentially.
      208     3503        */
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:7    
      209     3504
      210     3505    2        CALL POSITION_FILE ALTRET (ALL_DONE);
      211     3506
      212     3507    3        DO UNTIL (SIZEBYTES = 0);
      213     3508    3           CALL READAREC (OBLOCK$, SIZEBYTES) ALTRET (ALL_DONE);
      214     3509    3           END;
      215     3510
      216     3511    2        GOTO ALL_DONE;
      217     3512
      218     3513        /* BINARY_HANDLING - this code is used for reading binary files.  The
      219     3514            only files that NFS treats as binary files are the C library
      220     3515            binary file formats with 1024 byte records.
      221     3516        */
      222     3517    2   BINARY_HANDLING: ;
      223     3518
      224     3519    2        IF USERCTX.BUF$ = ADDR(NIL) THEN CALL FUI$MEMALLOC (USERCTX.BUF$);
      225     3520    2        READ_NEXT_KEYED_REC.V.DCB# = FILECTX.DCB#;
      226     3521    2        READ_NEXT_KEYED_REC.BUF_ = VECTOR (USERCTX.BUF$ -> BINARY_BLOCK);
      227     3522    2        POSITION_BINARY.V.DCB# = FILECTX.DCB#;
      228     3523    2        FILE_KEY.VALUE_ = STARTBYTE/1024+1; /* setup for the position file */
      229     3524    2        FILE_KEY.COUNT_ = 3;
      230     3525    3        CALL M$PRECORD( POSITION_BINARY) WHENALTRETURN DO; END;
      231     3526
      232     3527    3        DO WHILE (SIZEBYTES > 0);
      233     3528    3           CALL M$READ (READ_NEXT_KEYED_REC) ALTRET( ALL_DONE);
      234     3529    3           NBYTES = MINIMUM((FILE_KEY.VALUE_-1)*1024 - STARTBYTE, SIZEBYTES);
      235     3530    3           IF NBYTES > 0
      236     3531    4           THEN DO; /* we have to pad a hole in the file with 0's */
      237     3532    4              OBLOCK$->BASED_STRUCT = '0'B; /* insert padding */
      238     3533    4              OBLOCK$ = PINCRC(OBLOCK$,NBYTES);
      239     3534    4              STARTBYTE = STARTBYTE + NBYTES;
      240     3535    4              SIZEBYTES = SIZEBYTES - NBYTES;
      241     3536    4              NBYTES = 0;
      242     3537    4              END;
      243     3538    3           RECSTART = -NBYTES; /* the first byte to copy in current data */
      244     3539    3           NBYTES = MINIMUM( MAXIMUM( USERDCB.ARS#-RECSTART, 0), SIZEBYTES);
      245     3540    3           IF NBYTES > 0
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:8    
      246     3541    4           THEN DO;    /* we have data to copy to the user buffer */
      247     3542    4              OBLOCK$->BUF_TEMPLATE = PINCRC (USERCTX.BUF$,RECSTART)->BUF_TEMPLATE;
      248     3543    4              OBLOCK$ = PINCRC(OBLOCK$,NBYTES);
      249     3544    4              STARTBYTE = STARTBYTE + NBYTES;
      250     3545    4              SIZEBYTES = SIZEBYTES - NBYTES;
      251     3546    4              END;
      252     3547    3           CALL XSL$HTONL (NBYTES, STARTBYTE);
      253     3548    3           FILECTX.FATTR.SIZE = MAXIMUM (NBYTES, FILECTX.FATTR.SIZE);
      254     3549
      255     3550    3           END;                  /* do while SIZEBYTES > 0 */
      256     3551
      257     3552    2   ALL_DONE: ;    /* setup the reply for the caller, and return */
      258     3553    2        FU$READRES.COUNT = POFFC (OBLOCK$, OBLOCKI$);
      259     3554    2        REQUEST.LEN = 32 /* RPC HEAD */+ 4*SIZEW( FU$READRES);
      260     3555    2        FU$READRES.FATTR = FILECTX.FATTR;
      261     3556    2        FU$READRES.FATTR.XATTR = '0'B;
      262     3557    2        FU$READRES.STAT = %NFS_OK;
      263     3558
      264     3559    2        RETURN;
      265     3560
      266     3561    2   END FUI$RDRQS;
      267     3562
      268     3563        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:9    
      269     3564        /*I*  NAME:      POSITION_FILE
      270     3565              Purpose:   To position the USERCTX file to STARTBYTE, so that it's ready
      271     3566                         for reading or writing.
      272     3567              Algorithm: Find a CRECNO that will allow us to position as close to
      273     3568                         STARTBYTE as possible, using the information in the USERCTX
      274     3569                         cache, and FILECTX's current position.  If we can't find a
      275     3570                         CRECNO entry to position to, we have to use 0 (BOF).  Use that
      276     3571                         cache entry to position ourselves closer to STARTBYTE in the
      277     3572                         file, and then do RECAREC calls until we're at STARTBYTE.
      278     3573        */
      279     3574    1   POSITION_FILE: PROC ALTRET;
      280     3575
      281     3576    2   DCL I SBIN;
      282     3577    2   DCL MAX UBIN; /* maximum cached file offset that starts a record */
      283     3578    2   DCL MAXI UBIN; /* index into FILEPOS of the entry corresponding to MAX */
      284     3579    2   DCL REC_POS UBIN; /* file offset of start of Record for this cache entry */
      285     3580
      286     3581             %FPT_PRECORD (FPTN=POSITION_REC,
      287     3582                           BOF=YES);
      288     3603             %FPT_PFIL (FPTN=POSITION_BOF,
      289     3604                        BOF=YES);
      290     3619
      291     3620    2        IF STARTBYTE = 0 THEN GOTO FROM_BOF;
      292     3621
      293     3622         /* If we're already positioned where we need to be, there's nothing to do */
      294     3623    2        IF (STARTBYTE = FILECTX.FOFFSET)
      295     3624    2           AND (REQUEST.PROC# = %NFSPROC_READ)
      296     3625    2        THEN
      297     3626    2           RETURN;
      298     3627
      299     3628                  /* look for the entry which is closest to STARTBYTE */
      300     3629    2        MAX = 0;
      301     3630    3        DO I = 0 TO %CACHESZ-1;
      302     3631    3           REC_POS = USERCTX.FILEPOS.FOFFSET(I);
      303     3632    3           IF REC_POS <= STARTBYTE AND REC_POS > MAX
      304     3633    4           THEN DO;              /* got an entry which is closer */
      305     3634    4              MAX = REC_POS;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:10   
      306     3635    4              MAXI = I;
      307     3636    4              END;
      308     3637    3           END;
      309     3638
      310     3639    2        IF MAX > 0
      311     3640    3        THEN DO;            /* a suitable cache entry was found */
      312     3641    3           POSITION_REC.V.DCB# = FILECTX.DCB#;
      313     3642    3           POSITION_REC.V.N# = USERCTX.FILEPOS.CRECNO(MAXI)-1;
      314     3643    3           CALL M$PRECORD (POSITION_REC) ALTRET (FROM_BOF);
      315     3644    3           FILECTX.CRECNO = USERCTX.FILEPOS.CRECNO(MAXI)-1;
      316     3645    3           FILECTX.FOFFSET = USERCTX.FILEPOS.FOFFSET(MAXI);
      317     3646    3           END;                  /* found a suitable cache entry */
      318     3647
      319     3648    3        ELSE DO;       /* no suitable cache entries - look from BOF */
      320     3649    3   FROM_BOF: ;
      321     3650    3           POSITION_BOF.V.DCB# = FILECTX.DCB#;
      322     3651    3           CALL M$PFIL (POSITION_BOF)
      323     3652    4           WHENALTRETURN DO;
      324     3653    4              ALTRETURN;
      325     3654    4              END;
      326     3655    3           FILECTX.CRECNO = 0;
      327     3656    3           FILECTX.FOFFSET = 0;
      328     3657    3           END;                  /* no suitable cache entry */
      329     3658    2        USERCTX.LFCNT = 0;
      330     3659    2        USERCTX.ARS# = 0;
      331     3660    2        FILECTX.CHUNK = 0;
      332     3661
      333     3662                       /* Position file to immediately before STARTBYTE */
      334     3663    3        DO WHILE (STARTBYTE > FILECTX.FOFFSET);
      335     3664    3           IF USERCTX.BUF$ = ADDR(NIL) THEN CALL FUI$MEMALLOC (USERCTX.BUF$);
      336     3665    3           BUF$ = USERCTX.BUF$;
      337     3666    3           CALL READAREC (BUF$, MINIMUM (%FUI_CHUNKSIZE, STARTBYTE-FILECTX.FOFFSET))
      338     3667    4           WHENALTRETURN DO;
      339     3668    4              ALTRETURN;
      340     3669    4              END;
      341     3670    3           END;
      342     3671
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:11   
      343     3672    2   END POSITION_FILE;
      344     3673
      345     3674        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:12   
      346     3675        /*I*  NAME:    READAREC
      347     3676              Purpose: To read a record (or continuation of a record) into BUF in a form
      348     3677                       that can be sent via NFS (ie. with LF's instead of record
      349     3678                       boundaries).
      350     3679              Inputs:  USERCTX - describes input file and position where it left off.
      351     3680                       BUFL - maximum amount of data to put into BUF.
      352     3681                       BUF$ - points to the buffer (BUF) to read into.
      353     3682              Outputs: USERCTX - describes where READAREC left off in user file.
      354     3683                       BUF - filled with the data read.
      355     3684                       BUF$ - points to after that data that we read into BUF.
      356     3685                       BUFL - number of bytes remaining in BUF.
      357     3686                       ARS# - number of characters put into BUF.
      358     3687              Algorithm: There's 2 things we'll stick into BUF: data from the file; or
      359     3688                       LFs (or CR or FF) as determined by the VFC from the last recordhe
      360     3689                       read.  We read data from the current record if there's some
      361     3690                       there, then we process the record's VFC (or lack thereof) to
      362     3691                       determine how to turn this into something UNIX understands, and
      363     3692                       put that into USERCTX.LFCNT.  If USERCTX.LFCNT isn't zero, we've
      364     3693                       got NFS translation data to put in the buffer.
      365     3694                         LFCNT: 1 - 15, put in that many LFs (over 1 came from VFC)
      366     3695                                16, put in a FF (had a 'P' VFC character)
      367     3696                                32, put in a CR (had a '`' VFC character)
      368     3697                       We know we reached EOF if ARS# ~= RECL, or we ALTRETurn;
      369     3698        */
      370     3699    1   READAREC: PROC (BUF$, BUFL) ALTRET;
      371     3700
      372     3701    2   DCL BUF$ PTR PARAM;      /* points to the buffer to read into */
      373     3702    2   DCL BUFL UBIN PARAM;     /* length of the buffer to read into */
      374     3703
      375     3704    2   DCL BUFREM UBIN; /* number of bytes remaining in the user buffer */
      376     3705    2   DCL BUFCHAR CHAR(1) BASED;
      377     3706
      378     3707    2   DCL LFS_INIT(0:15) CONSTANT CHAR(1) CALIGNED INIT (BINASC(10)*0);
      379     3708    2   DCL LFS REDEF LFS_INIT CHAR(16);
      380     3709
      381     3710    2        BUFREM = BUFL;
      382     3711
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:13   
      383     3712    2        IF USERDCB.TYC.LD# /* we have more of the current record to read */
      384     3713    2           OR USERCTX.LFCNT = 0 /* LFCNT = 0, so we need to read more data */
      385     3714    3        THEN DO;
      386     3715    3           READ_USER_REC.V.DCB# = FILECTX.DCB#;
      387     3716    3           READ_USER_REC.BUF_.BUF$ = BUF$;
      388     3717    3           READ_USER_REC.BUF_.BOUND = BUFREM - 1;
      389     3718
      390     3719         /* Setup to read the next record or another chunk of current one */
      391     3720    3           READ_USER_REC.V.DVBYTE.CONT# = USERDCB.TYC.LD#;
      392     3721
      393     3722    3           CALL M$READ (READ_USER_REC)
      394     3723    4           WHENALTRETURN DO;
      395     3724                            /* treat anything other than E$LD as EOF */
      396     3725    4              IF B$ALT.ERR.CODE ~= %E$LD THEN GOTO REACHED_EOF;
      397     3726    4              END;
      398     3727
      399     3728    3           IF NOT READ_USER_REC.V.DVBYTE.CONT# /* not a continuation read */
      400     3729    4           THEN DO; /* not a continuation read - reading a new record */
      401     3730    4              FILECTX.CRECNO = FILECTX.CRECNO + 1;
      402     3731    4              FILECTX.CHUNK = 0;
      403     3732    4              CALL UPDATECACHE;
      404     3733    4              USERCTX.LFCNT = 1; /* default to one LF character for output */
      405     3734    4              IF USERDCB.DVBYTE.VFC# /* a VFC character */
      406     3735    4                 AND ((USERDCB.VFCCHAR# >= '@' AND USERDCB.VFCCHAR# <= 'P')
      407     3736    4                 OR (USERDCB.VFCCHAR# = '`'))
      408     3737    4              THEN
      409     3738    4                 USERCTX.LFCNT = ASCBIN(USERDCB.VFCCHAR#) - ASCBIN('@');
      410     3739    4              END;
      411     3740
      412     3741    3           BUF$ = PINCRC (BUF$, USERDCB.ARS#);
      413     3742    3           BUFREM = BUFREM - USERDCB.ARS#;
      414     3743    3           END;                  /* if LFCNT = 0 */
      415     3744
      416     3745    2        IF USERCTX.LFCNT > 0 AND /* put LFs from the last record into buffer */
      417     3746    2           BUFREM > 0
      418     3747    3        THEN DO;
      419     3748    3           IF USERCTX.LFCNT < 16 /* LFCNT is actually a count of LFs */
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:14   
      420     3749    4           THEN DO;
      421     3750    4              TRANSFER_SIZE = MINIMUM (USERCTX.LFCNT, BUFREM);
      422     3751    4              BUF$ -> BASED_STRING = LFS;
      423     3752    4              USERCTX.LFCNT = USERCTX.LFCNT - TRANSFER_SIZE;
      424     3753    4              END;
      425     3754    4           ELSE DO; /* not LFs: LFCNT=16 : VFC='P'=FF, LFCNT=32 : VFC='`'=CR */
      426     3755    4              IF USERCTX.LFCNT = 16
      427     3756    4              THEN BUF$ -> BUFCHAR = BINASC(12); /* FF char */
      428     3757    4              ELSE BUF$ -> BUFCHAR = BINASC(13); /* CR char */
      429     3758    4              TRANSFER_SIZE = 1;
      430     3759    4              USERCTX.LFCNT = 0;
      431     3760    4              END;
      432     3761    3           BUF$ = PINCRC (BUF$, TRANSFER_SIZE);
      433     3762    3           BUFREM = BUFREM - TRANSFER_SIZE;
      434     3763    3           END;                  /* LFCNT > 0 */
      435     3764
      436     3765    2   REACHED_EOF:;
      437     3766    2        USERCTX.ARS# = BUFL - BUFREM;
      438     3767    2        BUFL = BUFREM;
      439     3768    2        FILECTX.CHUNK = FILECTX.CHUNK + USERCTX.ARS#;
      440     3769    2        FILECTX.FOFFSET = FILECTX.FOFFSET + USERCTX.ARS#;
      441     3770    2        IF USERCTX.ARS# = 0      /* must have reached EOF */
      442     3771    3        THEN DO;
      443     3772             /* we now know the true file file, so use it in the future. */
      444     3773    3           CALL XSL$HTONL(FILECTX.FATTR.SIZE, FILECTX.FOFFSET);
      445     3774    3           ALTRETURN;
      446     3775    3           END;
      447     3776    2        RETURN;
      448     3777
      449     3778    2   END READAREC;
      450     3779
      451     3780        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:15   
      452     3781        /*I*  NAME:    UPDATECACHE
      453     3782              Purpose: To update the USERCTX.FILEPOS cache with the file position in
      454     3783                       FILECTX.
      455     3784              Inputs:  FILECTX - positioned at the beginning of a CP-6 record.
      456     3785              Outputs: USERCTX.FILEPOS - cache updated.
      457     3786              Algorithm: What we want is to have a cache full of entries which will
      458     3787                       allow for quick access to the file at intervals of 4096 bytes
      459     3788                       (size of a granule).  So ideally, we'd want one cache entry
      460     3789                       for each CP-6 record that is right before each 4096 bytes of
      461     3790                       data.  So we want to maintain this system here.
      462     3791        */
      463     3792    1   UPDATECACHE: PROC;
      464     3793
      465     3794    2   DCL I SBIN;
      466     3795    2   DCL MAXVAL SBIN;
      467     3796    2   DCL MAXI SBIN;
      468     3797    2   DCL TMP SBIN;
      469     3798
      470     3799    2        IF FILECTX.FOFFSET_.GRAN ~= USERCTX.FILEPOS.FOFFSET_.GRAN(LASTI)
      471     3800    3        THEN DO;
      472     3801    4           DO LASTI = 0 TO %CACHESZ-1; /* look for entry in the same granule */
      473     3802    4              IF FILECTX.FOFFSET_.GRAN = USERCTX.FILEPOS.FOFFSET_.GRAN(LASTI)
      474     3803    4              THEN
      475     3804    4                 GOTO FOUND_LASTI;
      476     3805    4              END;               /* do LASTI = */
      477     3806    3           MAXI = 0;
      478     3807    3           MAXVAL = 0;
      479     3808    4           DO LASTI = 0 TO %CACHESZ-1; /* look for a cache entry to use */
      480     3809    4              IF USERCTX.FILEPOS.FOFFSET(LASTI) = 0 THEN GOTO FOUND_LASTI;
      481     3810    4              TMP = FILECTX.FOFFSET_.GRAN - USERCTX.FILEPOS.FOFFSET_.GRAN(LASTI);
      482     3811    4              IF TMP < 0 THEN TMP = -TMP; /* get absolute value of TMP     */
      483     3812    4              IF TMP > MAXVAL
      484     3813    5              THEN DO;
      485     3814    5                 MAXVAL = TMP;
      486     3815    5                 MAXI = LASTI;
      487     3816    5                 END;
      488     3817    4              END;               /* do LASTI = */
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:16   
      489     3818    3           LASTI = MAXI;
      490     3819    3           END;
      491     3820
      492     3821    2   FOUND_LASTI:
      493     3822    2        USERCTX.FILEPOS.FOFFSET(LASTI) = FILECTX.FOFFSET;
      494     3823    2        USERCTX.FILEPOS.CRECNO(LASTI) = FILECTX.CRECNO;
      495     3824
      496     3825    2   END UPDATECACHE;
      497     3826
      498     3827        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:17   
      499     3828        /*I*  NAME:    FUI$WRRQS
      500     3829              Purpose: To write this user's data into a file.
      501     3830              Inputs:  STARTBYTE - the byte offset into the file to start writing to.
      502     3831              Outputs: OBLOCK$ - points to after the last byte written.
      503     3832                       SIZEBYTES - the number of bytes to write to the file.
      504     3833                       OBLOCK$ - points to the bytes to write.
      505     3834              Algorithm:
      506     3835                       For text files (any file other than a C-library binary file):
      507     3836                         Position into the file, if we end up at the middle of a record,
      508     3837                         then we have to append to that record, and rewrite that record.
      509     3838                         Then we start writing out records to the file.  To make a
      510     3839                         record, we look for a LF, CR, or FF (maximum record size we
      511     3840                         want is 4095 bytes (4096 including CR, LF or FF) - 1 page.
      512     3841                         Write out this block with the appropriate VFC (to indicate CR,
      513     3842                         LF, or FF).
      514     3843                       For binary files:
      515     3844                         Remember we're writing on the 1024-byte block boundaries, if
      516     3845                         we've got a partial record, then we have to read a block, put
      517     3846                         in the user data, and rewrite it.  Otherwise we can just write
      518     3847                         out the block directly to the user file.
      519     3848        */
      520     3849
      521     3850    1   FUI$WRRQS: PROC;
      522     3851
      523     3852                                 /* if this block is being retransmitted
      524     3853                                      and isn't at the current write point
      525     3854                                      ignore it, as I'm not as stupid as
      526     3855                                      NFS or dog-slow networks */
      527     3856
      528     3857    2        IF REQUEST.CALLHDR.REXMIT.F AND FU$WRITEARGS.OFFSET < FILECTX.FATTR.SIZE
      529     3858    2        THEN
      530     3859    2           GOTO OK_RETURN;       /* return just as if we did it */
      531     3860
      532     3861    2        STARTBYTE_SAVE = STARTBYTE;
      533     3862
      534     3863                            /* split up the processing here for text or
      535     3864                                 binary handling, since they're so
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:18   
      536     3865                                 different */
      537     3866    2        IF FILECTX.FATTR.XATTR.TEXTMODE = %FALSE#
      538     3867    2        THEN
      539     3868    2           GOTO BINARY_HANDLING;
      540     3869
      541     3870        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:19   
      542     3871        /* TEXT HANDLING - this code is used for writing text files - any CP-6 file
      543     3872           with ORG=CONSEC or ORG=UR, and expanded records <= 4096 bytes.
      544     3873        */
      545     3874
      546     3875    2        POSITION_BACK.V.DCB# = FILECTX.DCB#;
      547     3876    2        WRITE_USER_REC.V.DCB# = FILECTX.DCB#;
      548     3877    2        WRITE_VFC_REC.V.DCB# = FILECTX.DCB#;
      549     3878
      550     3879                                      /* call the read routine to make sure
      551     3880                                             we are where we wanted to be */
      552     3881
      553     3882    2        IF USERCTX.BUF$ = ADDR(NIL) THEN CALL FUI$MEMALLOC (USERCTX.BUF$);
      554     3883
      555     3884    2        CALL POSITION_FILE ALTRET( WRITE_ERR); /* if past EOF - bad write */
      556     3885
      557     3886    2        IF NOT USERDCB.TYC.LD#
      558     3887    2           AND USERCTX.LFCNT = 0
      559     3888    2           AND ((USERCTX.ARS# > 0
      560     3889    2           AND FIND_LF_CR_FF( USERCTX.BUF$->BUFU( USERCTX.ARS#-1 )) ~= 0)
      561     3890    2           OR USERCTX.ARS# = 4096
      562     3891    2           OR STARTBYTE = 0)
      563     3892    3        THEN DO;
      564     3893             /* Repositioning left us at the beginning of a record, just
      565     3894                start dumping complete records at this point. */
      566     3895    3           RECSTART = 0;
      567     3896    3           FILECTX.CRECNO = FILECTX.CRECNO + 1;
      568     3897    3           END;
      569     3898    3        ELSE DO;
      570     3899             /* Repositioning left us with a partially filled record in
      571     3900                the buffer, tack onto the existant partial record in the
      572     3901                buffer and rewrite it. */
      573     3902
      574     3903    3           IF FILECTX.CHUNK > USERCTX.ARS# /* rewriting in a too BIG record */
      575     3904    3           THEN                  /* ... wasn't written by NFS */
      576     3905    3              GOTO WRITE_ERR;
      577     3906
      578     3907    3           CALL M$PRECORD (POSITION_BACK);
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:20   
      579     3908
      580     3909    3           RECSTART = USERCTX.ARS#;
      581     3910    3           USERCTX.LFCNT = 0;
      582     3911    3           END;        /* do if partial record already in buffer */
      583     3912
      584     3913    3        DO WHILE (SIZEBYTES > 0); /* dump the NFSblock into file */
      585     3914
      586     3915    3           IF USERCTX.BUF$ = ADDR(NIL) THEN CALL FUI$MEMALLOC (USERCTX.BUF$);
      587     3916
      588     3917    3           NBYTES = MINIMUM (SIZEBYTES, %(FUI_CHUNKSIZE-1)-RECSTART);
      589     3918
      590     3919    3           CALL SEARCH (NBYTES, FOUND, FIND_LF_CR_FF, OBLOCK$->BUF_TEMPLATE)
      591     3920    4           WHENRETURN DO;
      592     3921    4              TRANSFER_SIZE = NBYTES + 1; /* data + SIZEC( LF ) */
      593     3922    5              DO CASE( FOUND);
      594     3923    5              CASE( 1);          /* LF - don't output a vfc char */
      595     3924    5              CASE( 2);          /* CR */
      596     3925    5                 WRITE_VFC_REC.BUF_ = VECTOR( VFC_CR);
      597     3926    5                 CALL M$WRITE( WRITE_VFC_REC) ALTRET( WRITE_ERR);
      598     3927    5              CASE( 3);          /* FF */
      599     3928    5                 WRITE_VFC_REC.BUF_ = VECTOR( VFC_FF);
      600     3929    5                 CALL M$WRITE( WRITE_VFC_REC) ALTRET( WRITE_ERR);
      601     3930    5              END;               /* case */
      602     3931    4              END;
      603     3932    4           WHENALTRETURN DO;
      604     3933    4              TRANSFER_SIZE = NBYTES; /* no LF, CR or FF found */
      605     3934    4              WRITE_VFC_REC.BUF_ = VECTOR( VFC_NONE);
      606     3935    4              CALL M$WRITE( WRITE_VFC_REC) ALTRET( WRITE_ERR);
      607     3936    4              END;
      608     3937
      609     3938    3           PINCRC(USERCTX.BUF$,RECSTART)->BASED_STRING = OBLOCK$->BASED_STRING;
      610     3939    3           USERCTX.ARS# = TRANSFER_SIZE + RECSTART;
      611     3940    3           NBYTES = NBYTES + RECSTART;
      612     3941
      613     3942                                 /* Rewrite the modified record with the
      614     3943                                    appropriate VFC character. */
      615     3944
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:21   
      616     3945    3           IF NBYTES > 0
      617     3946    3           THEN WRITE_USER_REC.BUF_ = VECTOR (USERCTX.BUF$->BUF_TEMPLATE);
      618     3947    3           ELSE WRITE_USER_REC.BUF_ = VECTOR (NIL);
      619     3948    3           CALL M$WRITE(WRITE_USER_REC) ALTRET(WRITE_ERR);
      620     3949
      621     3950    3           RECSTART = 0;
      622     3951    3           OBLOCK$ = PINCRC (OBLOCK$, TRANSFER_SIZE);
      623     3952    3           SIZEBYTES = SIZEBYTES - TRANSFER_SIZE;
      624     3953    3           FILECTX.FOFFSET = FILECTX.FOFFSET + TRANSFER_SIZE;
      625     3954    3           FILECTX.CRECNO = FILECTX.CRECNO + 1;
      626     3955    3           FILECTX.CHUNK = 0;
      627     3956    3           IF FOUND ~= 0 OR NBYTES >= 4095
      628     3957    3           THEN /* save next record position if it's not complete. */
      629     3958    3              CALL UPDATECACHE;
      630     3959
      631     3960    3           END;                  /* do while SIZEBYTES > 0 */
      632     3961
      633     3962         /* Trash any saved file positions after this insertion point */
      634     3963    2        UCTX$ = FILECTX.UCTX$;
      635     3964    3        DO UNTIL UCTX$ = ADDR(NIL);
      636     3965    4           DO FOUND = 0 TO %CACHESZ-1;
      637     3966    4              IF USERCTX.FILEPOS.FOFFSET(FOUND) > STARTBYTE_SAVE
      638     3967    4              THEN USERCTX.FILEPOS(FOUND) = '0'B;
      639     3968    4              END;
      640     3969    3           UCTX$ = USERCTX.FLNK$;
      641     3970    3           END;
      642     3971    2        UCTX$ = REQUEST.UCTX$;
      643     3972
      644     3973    2        CALL XSL$HTONL(FILECTX.FATTR.SIZE, FILECTX.FOFFSET);
      645     3974    2        USERCTX.ARS# = 0;
      646     3975
      647     3976    2        GOTO OK_RETURN; /* now we can return with a successful status */
      648     3977
      649     3978    2   WRITE_ERR:
      650     3979    2        REQUEST.LEN = 32 /* RPC HEAD */+ SIZEC(FU$ATTRSTAT.STAT);
      651     3980    2        FU$ATTRSTAT.STAT = %NFSERR_IO;
      652     3981    2        RETURN;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:22   
      653     3982
      654     3983        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:23   
      655     3984        /* BINARY_HANDLING - this code is used for writing binary files.  The
      656     3985            only files that NFS treats as binary files are the C library
      657     3986            binary file formats with 1024 byte records.
      658     3987        */
      659     3988    2   BINARY_HANDLING: ;
      660     3989                                 /* go get a file buffer for this guy if he
      661     3990                                      doesn't have one yet */
      662     3991    2        IF USERCTX.BUF$ = ADDR(NIL)
      663     3992    2        THEN
      664     3993    2           CALL FUI$MEMALLOC (USERCTX.BUF$);
      665     3994
      666     3995                                      /* initialize the FPTs for PMMEs */
      667     3996    2        READ_KEYED_REC.V.DCB# = FILECTX.DCB#;
      668     3997    2        WRITE_KEYED_REC.V.DCB# = FILECTX.DCB#;
      669     3998    2        READ_KEYED_REC.BUF_ = VECTOR (USERCTX.BUF$ -> BINARY_BLOCK);
      670     3999
      671     4000    3        DO WHILE (SIZEBYTES > 0);
      672     4001                                      /* setup the binary file read key */
      673     4002    3           FILE_KEY.VALUE_ = (STARTBYTE/1024)+1;
      674     4003    3           FILE_KEY.COUNT_ = 3;
      675     4004    3           LFINDX = MOD(STARTBYTE,1024);
      676     4005
      677     4006    3           IF LFINDX ~= 0 OR SIZEBYTES < 1024
      678     4007    4           THEN DO; /* If starting/ending in the middle of a record, read first */
      679     4008
      680     4009    4              RECLEN = 0;
      681     4010    4              CALL M$READ (READ_KEYED_REC)
      682     4011    5              WHENRETURN DO;
      683     4012    5                 RECLEN = USERDCB.ARS#;
      684     4013    5                 END;
      685     4014    4              IF RECLEN < LFINDX
      686     4015    5              THEN DO;
      687     4016    5                 NBYTES = LFINDX - RECLEN;
      688     4017    5                 PINCRC (USERCTX.BUF$, RECLEN)->BASED_STRUCT = '0'B;
      689     4018    5                 END;
      690     4019
      691     4020    4              NBYTES = MINIMUM (SIZEBYTES, 1024-LFINDX);
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:24   
      692     4021
      693     4022    4              PINCRC (USERCTX.BUF$, LFINDX)->BUF_TEMPLATE = OBLOCK$->BUF_TEMPLATE;
      694     4023
      695     4024    4              WRITE_KEYED_REC.BUF_.BUF$ = USERCTX.BUF$;
      696     4025    4              WRITE_KEYED_REC.BUF_.BOUND = MAXIMUM( RECLEN, LFINDX + NBYTES) - 1;
      697     4026    4              END;
      698     4027
      699     4028    4           ELSE DO;         /* LFINDX = O AND SIZEBYTES >= 1024 */
      700     4029    4              WRITE_KEYED_REC.BUF_ = VECTOR (OBLOCK$ -> BINARY_BLOCK);
      701     4030    4              NBYTES = 1024;
      702     4031    4              END;
      703     4032
      704     4033    3           CALL M$WRITE (WRITE_KEYED_REC) ALTRET(WRITE_ERR);
      705     4034
      706     4035    3           OBLOCK$ = PINCRC(OBLOCK$,NBYTES);
      707     4036    3           STARTBYTE = STARTBYTE + NBYTES;
      708     4037    3           SIZEBYTES = SIZEBYTES - NBYTES;
      709     4038
      710     4039    3           END;                  /* do while SIZEBYTES > 0 */
      711     4040
      712     4041    2        CALL XSL$HTONL (NBYTES, STARTBYTE);
      713     4042    2        FILECTX.FATTR.SIZE = MAXIMUM (NBYTES, FILECTX.FATTR.SIZE);
      714     4043
      715     4044    2   OK_RETURN:;
      716     4045    2        REQUEST.LEN = 32 /* RPC HEAD */+ SIZEC(FU$ATTRSTAT);
      717     4046
      718     4047    2        FU$ATTRSTAT.STAT = %NFS_OK;
      719     4048    2        FU$ATTRSTAT.FATTR = FILECTX.FATTR;
      720     4049    2        FU$ATTRSTAT.FATTR.XATTR = '0'B;
      721     4050    2        RETURN;
      722     4051
      723     4052    2   END FUI$WRRQS;
      724     4053
      725     4054    1   END FUI$IORQS;
      726     4055        %EOD;

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:25   
--  Include file information  --

   FU_NFSSUBS_C.:FUA2TOU  is referenced.
   FU_NFS_M.:FUA2TOU  is referenced.
   XSL_SOCKET_M.:LIBRARY  is referenced.
   B_ERRORS_C.:E05OU  is referenced.
   CP_6.:E05OU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FUI$IORQS.

   Procedure FUI$IORQS requires 1010 words for executable code.
   Procedure FUI$IORQS requires 48 words of local(AUTO) storage.

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:26   

 Object Unit name= FUI$IORQS                                  File name= FUI$IORQS.:FUA2TOU
 UTS= NOV 21 '97 11:32:07.44 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none   114    162  FUI$IORQS
    2  RoData even  UTS     71    107  FUI$IORQS
    3   Proc  even  none  1010   1762  FUI$IORQS
    4  RoData even  none    14     16  FUI$IORQS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        1  FUI$IORQS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XSL$NTOHL
         yes           Std       2 XSL$HTONL
         yes           Std       1 FUI$MEMALLOC
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:27   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:28   


        1        1        /*M* FUI$IORQS - NFS disk I/O handling - reading and writing */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=2,CSI=0,ECI=0,CLM=30,CRM=67, MOC=Y,CCI=3 */
        8        8        /*F*  NAME: FUI$IORQS
        9        9              Purpose:
       10       10                    Handles NFS disk I/O requests (reads and writes).
       11       11        */
       12       12        /*D*  NAME: FUI$IORQS
       13       13              Inputs:
       14       14                    REQUEST - contains I/O request and pertinant information.
       15       15              Outputs:
       16       16                    REQUEST - completed I/O information filled in.
       17       17        */
       18       18
       19       19        FUI$IORQS: PROC (REQUEST);

     19  3 000000   000000 700200 xent  FUI$IORQS    TSX0  ! X66_AUTO_1
         3 000001   000060 000001                    ZERO    48,1

       20       20
       21       21             %INCLUDE CP_6;
       22      102             %INCLUDE B_ERRORS_C;
       23     1228             %INCLUDE XSL_SOCKET_M;
       24     1976             %INCLUDE FU_NFS_M;
       25     2491             %INCLUDE FU_NFSSUBS_C;
       26     2586
       27     2587                                      /* ARGUMENT */
       28     2588
       29     2589        %FU$RQSCTX (NAME=REQUEST,STCLASS=PARAM);
       30     2678
       31     2679                                      /* LOCAL EQU's */
       32     2680
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:29   
       33     2681        %EQU TRUE#='1'B;
       34     2682        %EQU FALSE#='0'B;
       35     2683        %EQU FUI_CHUNKSIZE = 4096;
       36     2684
       37     2685                                      /* OTHER NEEDED STRUCTURES */
       38     2686
       39     2687        %FU$UCTX (NAME=USERCTX,STCLASS="BASED(UCTX$)");
       40     2740        %FU$FCTX (NAME=FILECTX,STCLASS="BASED(FCTX$)");
       41     2843        %FU$READARGS (STCLASS="BASED(BODY$)");
       42     2885        %FU$WRITEARGS (STCLASS="BASED(BODY$)");
       43     2928        %FU$ATTRSTAT (STCLASS="BASED(RESULT$)");
       44     2979        %FU$READRES (STCLASS="BASED(RESULT$)");
       45     3031
       46     3032                                      /* CP-6 MONITOR INTERACTION */
       47     3033
       48     3034    1   DCL B$TCB$ PTR SYMREF;
       49     3035
       50     3036             %F$DCB(DCBN=USERDCB, BASED="BASED(USERDCB$)");
       51     3093             %B$TCB;
       52     3096             %B$ALT;
       53     3104
       54     3105        %SUB B$ALT=B$TCB$->B$TCB.ALT$->B$ALT;
       55     3106
       56     3107             %FPT_READ (FPTN=READ_USER_REC,
       57     3108                        STRPVFC=YES);
       58     3147
       59     3148             %FPT_READ (FPTN=READ_KEYED_REC,
       60     3149                        KEYS=YES,
       61     3150                        KEY=FILE_KEY);
       62     3189
       63     3190             %FPT_WRITE (FPTN=WRITE_USER_REC);
       64     3221
       65     3222             %FPT_WRITE (FPTN=WRITE_VFC_REC,
       66     3223                         VFC=YES,
       67     3224                         CONT=YES);
       68     3255
       69     3256             %FPT_WRITE (FPTN=WRITE_KEYED_REC,
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:30   
       70     3257                            KEY=FILE_KEY);
       71     3288
       72     3289             %FPT_PRECORD (FPTN=POSITION_BACK,
       73     3290                            N=-1);
       74     3311
       75     3312             %FPT_PRECORD (FPTN=POSITION_BINARY,
       76     3313                           KEY=FILE_KEY,
       77     3314                           KEYS=YES);
       78     3335
       79     3336             %FPT_READ (FPTN=READ_NEXT_KEYED_REC,
       80     3337                        KEY=FILE_KEY,
       81     3338                        KEYR=YES);
       82     3377
       83     3378                                      /* SLAVE ROUTINES TO THIS ONE */
       84     3379
       85     3380    1   DCL FUI$MEMALLOC ENTRY(1);
       86     3381    1   DCL XSL$NTOHL ENTRY(2);
       87     3382    1   DCL XSL$HTONL ENTRY(2);
       88     3383
       89     3384                                      /* LOCAL DATA DEFINITIONS */
       90     3385
       91     3386    1   DCL LFINDX SBIN;
       92     3387    1   DCL RECLEN SBIN;
       93     3388    1   DCL NBYTES SBIN;
       94     3389    1   DCL TRANSFER_SIZE UBIN;
       95     3390    1   DCL RECSTART UBIN;
       96     3391    1   DCL RECKEY UBIN;
       97     3392    1   DCL BASED_STRING CHAR(TRANSFER_SIZE) BASED;
       98     3393    1   DCL 1 BASED_STRUCT BASED,
       99     3394    1          2 * CHAR(NBYTES) CALIGNED;
      100     3395    1   DCL BUF_TEMPLATE CHAR(NBYTES) BASED;
      101     3396    1   DCL 1 BINARY_BLOCK BASED,
      102     3397    1          2 T CHAR(1024);
      103     3398    1   DCL BUFU (0:0) UBIN BYTE CALIGNED BASED;
      104     3399
      105     3400    1   DCL OBLOCK$ PTR;
      106     3401    1   DCL OBLOCKI$ PTR;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:31   
      107     3402    1   DCL BODY$ PTR;
      108     3403    1   DCL UCTX$ PTR;
      109     3404    1   DCL FCTX$ PTR;
      110     3405    1   DCL USERDCB$ PTR;
      111     3406    1   DCL BUF$ PTR;
      112     3407    1   DCL RESULT$ PTR;
      113     3408
      114     3409    1   DCL 1 FILE_KEY STATIC,
      115     3410    1          2 COUNT_ UBIN BYTE CALIGNED INIT(3),
      116     3411    1          2 VALUE_ UBIN(27) CALIGNED INIT(0);
      117     3412
      118     3413    1   DCL STARTBYTE_SAVE SBIN;
      119     3414    1   DCL STARTBYTE UBIN;
      120     3415    1   DCL SIZEBYTES SBIN;
      121     3416    1   DCL FOUND SBIN;
      122     3417    1   DCL LASTI SBIN;
      123     3418
      124     3419        %EQU CACHESZ = 10; /* number of entries in USERCTX.FILEPOS cache */
      125     3420
      126     3421    1   DCL FIND_LF_CR_FF(0:255) UBIN BYTE CALIGNED CONSTANT INIT (
      127     3422    1     0*10, 1 /* LF */, 0, 3 /* FF */, 2 /* CR */, 0*0 );
      128     3423    1   DCL VFC_NONE CHAR(1) CONSTANT INIT ('@'); /* no LF, CR, or FF found */
      129     3424    1   DCL VFC_CR CHAR(1) CONSTANT INIT ('`'); /* CR */
      130     3425    1   DCL VFC_FF CHAR(1) CONSTANT INIT ('P'); /* FF */
      131     3426
      132     3427
      133     3428                            /* enter with REQUEST.BODY$ pointing to REQUEST
      134     3429                                 parameters, and local points set up */
      135     3430
      136     3431    1        UCTX$ = REQUEST.UCTX$;

   3431  3 000002   200003 470500                    LDP0    @REQUEST,,AUTO
         3 000003   000004 236100                    LDQ     4,,PR0
         3 000004   200015 756100                    STQ     UCTX$,,AUTO

      137     3432    1        FCTX$ = USERCTX.FCTX$;

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:32   
   3432  3 000005   200015 471500                    LDP1    UCTX$,,AUTO
         3 000006   100003 236100                    LDQ     3,,PR1
         3 000007   200016 756100                    STQ     FCTX$,,AUTO

      138     3433    1        BODY$ = REQUEST.BODY$;

   3433  3 000010   000003 236100                    LDQ     3,,PR0
         3 000011   200014 756100                    STQ     BODY$,,AUTO

      139     3434    1        USERDCB$ = DCBADDR (FILECTX.DCB#);

   3434  3 000012   000000 473400 4                  LDP3    0
         3 000013   300000 474500                    LDP4    0,,PR3
         3 000014   200016 475500                    LDP5    FCTX$,,AUTO
         3 000015   500012 220100                    LDX0    10,,PR5
         3 000016   400000 236110                    LDQ     0,X0,PR4
         3 000017   200017 756100                    STQ     USERDCB$,,AUTO

      140     3435    1        RESULT$ = ADDR(REQUEST.REPLYHDR.RESULTS);

   3435  3 000020   200003 236100                    LDQ     @REQUEST,,AUTO
         3 000021   000023 036003                    ADLQ    19,DU
         3 000022   200021 756100                    STQ     RESULT$,,AUTO

      141     3436    1        LASTI = 0;

   3436  3 000023   200026 450100                    STZ     LASTI,,AUTO

      142     3437
      143     3438    2        DO CASE (REQUEST.PROC#);

   3438  3 000024   000005 235100                    LDA     5,,PR0
         3 000025   000006 135007                    SBLA    6,DL
         3 000026   000003 115007                    CMPA    3,DL
         3 000027   000031 602005 3                  TNC     s:3438+5,AL
         3 000030   000156 710000 3                  TRA     s:3464
         3 000031   000034 710000 3                  TRA     s:3442
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:33   
         3 000032   000156 710000 3                  TRA     s:3464
         3 000033   000105 710000 3                  TRA     s:3453

      144     3439
      145     3440    2        CASE (%NFSPROC_READ);

      146     3441
      147     3442    2           CALL XSL$NTOHL (STARTBYTE, FU$READARGS.OFFSET);

   3442  3 000034   200014 236100                    LDQ     BODY$,,AUTO
         3 000035   000010 036003                    ADLQ    8,DU
         3 000036   200053 756100                    STQ     TMP+3,,AUTO
         3 000037   200023 636500                    EPPR6   STARTBYTE,,AUTO
         3 000040   200052 456500                    STP6    TMP+2,,AUTO
         3 000041   200052 630500                    EPPR0   TMP+2,,AUTO
         3 000042   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000043   000000 701000 xent               TSX1    XSL$NTOHL
         3 000044   000000 011000                    NOP     0

      148     3443    2           CALL XSL$NTOHL (SIZEBYTES, FU$READARGS.COUNT);

   3443  3 000045   200014 236100                    LDQ     BODY$,,AUTO
         3 000046   000011 036003                    ADLQ    9,DU
         3 000047   200053 756100                    STQ     TMP+3,,AUTO
         3 000050   200024 630500                    EPPR0   SIZEBYTES,,AUTO
         3 000051   200052 450500                    STP0    TMP+2,,AUTO
         3 000052   200052 630500                    EPPR0   TMP+2,,AUTO
         3 000053   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000054   000000 701000 xent               TSX1    XSL$NTOHL
         3 000055   000000 011000                    NOP     0

      149     3444    2           OBLOCK$ = ADDR( FU$READRES.DATA);

   3444  3 000056   200021 236100                    LDQ     RESULT$,,AUTO
         3 000057   000023 036003                    ADLQ    19,DU
         3 000060   200012 756100                    STQ     OBLOCK$,,AUTO

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:34   
      150     3445    2           OBLOCKI$ = OBLOCK$;

   3445  3 000061   200013 756100                    STQ     OBLOCKI$,,AUTO

      151     3446    2           CALL FUI$RDRQS;

   3446  3 000062   000157 701000 3                  TSX1    FUI$RDRQS
         3 000063   000000 011000                    NOP     0

      152     3447
      153     3448    2           CALL XSL$HTONL (FU$READRES.COUNT, POFFC (OBLOCK$, OBLOCKI$));

   3448  3 000064   200013 236100                    LDQ     OBLOCKI$,,AUTO
         3 000065   000020 772000                    QRL     16
         3 000066   200052 756100                    STQ     TMP+2,,AUTO
         3 000067   200012 236100                    LDQ     OBLOCK$,,AUTO
         3 000070   000020 772000                    QRL     16
         3 000071   200052 136100                    SBLQ    TMP+2,,AUTO
         3 000072   200053 756100                    STQ     TMP+3,,AUTO
         3 000073   200053 630500                    EPPR0   TMP+3,,AUTO
         3 000074   200055 450500                    STP0    TMP+5,,AUTO
         3 000075   200021 236100                    LDQ     RESULT$,,AUTO
         3 000076   000022 036003                    ADLQ    18,DU
         3 000077   200054 756100                    STQ     TMP+4,,AUTO
         3 000100   200054 630500                    EPPR0   TMP+4,,AUTO
         3 000101   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000102   000000 701000 xent               TSX1    XSL$HTONL
         3 000103   000000 011000                    NOP     0
         3 000104   000156 710000 3                  TRA     s:3464

      154     3449
      155     3450
      156     3451    2        CASE (%NFSPROC_WRITE);

      157     3452
      158     3453    2           CALL XSL$NTOHL (STARTBYTE, FU$WRITEARGS.OFFSET);

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:35   
   3453  3 000105   200014 236100                    LDQ     BODY$,,AUTO
         3 000106   000011 036003                    ADLQ    9,DU
         3 000107   200053 756100                    STQ     TMP+3,,AUTO
         3 000110   200023 636500                    EPPR6   STARTBYTE,,AUTO
         3 000111   200052 456500                    STP6    TMP+2,,AUTO
         3 000112   200052 630500                    EPPR0   TMP+2,,AUTO
         3 000113   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000114   000000 701000 xent               TSX1    XSL$NTOHL
         3 000115   000000 011000                    NOP     0

      159     3454    2           CALL XSL$NTOHL (SIZEBYTES, FU$WRITEARGS.COUNT);

   3454  3 000116   200014 236100                    LDQ     BODY$,,AUTO
         3 000117   000013 036003                    ADLQ    11,DU
         3 000120   200053 756100                    STQ     TMP+3,,AUTO
         3 000121   200024 630500                    EPPR0   SIZEBYTES,,AUTO
         3 000122   200052 450500                    STP0    TMP+2,,AUTO
         3 000123   200052 630500                    EPPR0   TMP+2,,AUTO
         3 000124   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000125   000000 701000 xent               TSX1    XSL$NTOHL
         3 000126   000000 011000                    NOP     0

      160     3455    2           OBLOCK$ = ADDR(FU$WRITEARGS.DATA);

   3455  3 000127   200014 236100                    LDQ     BODY$,,AUTO
         3 000130   000014 036003                    ADLQ    12,DU
         3 000131   200012 756100                    STQ     OBLOCK$,,AUTO

      161     3456    2           OBLOCKI$ = OBLOCK$;

   3456  3 000132   200013 756100                    STQ     OBLOCKI$,,AUTO

      162     3457    2           CALL FUI$WRRQS;

   3457  3 000133   001170 701000 3                  TSX1    FUI$WRRQS
         3 000134   000000 011000                    NOP     0

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:36   
      163     3458    2           CALL XSL$HTONL (FU$WRITEARGS.COUNT, POFFC (OBLOCK$, OBLOCKI$));

   3458  3 000135   200013 236100                    LDQ     OBLOCKI$,,AUTO
         3 000136   000020 772000                    QRL     16
         3 000137   200052 756100                    STQ     TMP+2,,AUTO
         3 000140   200012 236100                    LDQ     OBLOCK$,,AUTO
         3 000141   000020 772000                    QRL     16
         3 000142   200052 136100                    SBLQ    TMP+2,,AUTO
         3 000143   200053 756100                    STQ     TMP+3,,AUTO
         3 000144   200053 630500                    EPPR0   TMP+3,,AUTO
         3 000145   200055 450500                    STP0    TMP+5,,AUTO
         3 000146   200014 236100                    LDQ     BODY$,,AUTO
         3 000147   000013 036003                    ADLQ    11,DU
         3 000150   200054 756100                    STQ     TMP+4,,AUTO
         3 000151   200054 630500                    EPPR0   TMP+4,,AUTO
         3 000152   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000153   000000 701000 xent               TSX1    XSL$HTONL
         3 000154   000000 011000                    NOP     0
         3 000155   000156 710000 3                  TRA     s:3464

      164     3459
      165     3460    2        CASE (ELSE);             /* IGNORE OTHER REQUESTS */

      166     3461
      167     3462    2        END;

      168     3463
      169     3464    1        RETURN;

   3464  3 000156   000000 702200 xent               TSX2  ! X66_ARET

      170     3465
      171     3466        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:37   
      172     3467        /*I*  NAME:    FUI$RDRQS
      173     3468              Purpose: To read data from a file into the caller's buffer.
      174     3469              Inputs:  STARTBYTE - the byte offset into the file to start reading from.
      175     3470                       SIZEBYTES - the number of bytes to read from the file.
      176     3471                       OBLOCK$ - points to the buffer to read into.
      177     3472              Outputs: REQUEST.REPLYHDR - contains the data/size for the file.
      178     3473                       OBLOCK$ - points to the byte after the last byte read in.
      179     3474              Algorithm:
      180     3475                       For text files (any file other than a C-library binary file):
      181     3476                         We try to position as close to STARTBYTE as possible using info
      182     3477                         gained previously - otherwise we have to start from the start
      183     3478                         of the file.  Then position till we get a buffer containing the
      184     3479                         STARTBYTE, and then fill up the user buffer.
      185     3480                       For binary files:
      186     3481                         We can immediately position to STARTBYTE, because each record
      187     3482                         is fixed length (1024 bytes), and indexed by STARTBYTE/1024.
      188     3483                         Read these blocks, and fill in the user buffer.  These files
      189     3484                         can have "holes", these are assumed to be filled with zeros.
      190     3485        */
      191     3486
      192     3487    1   FUI$RDRQS: PROC;

   3487  3 000157   200030 741300       FUI$RDRQS    STX1  ! LASTI+2,,AUTO

      193     3488
      194     3489    2        OBLOCKI$ = ADDR( FU$READRES.DATA);

   3489  3 000160   200021 236100                    LDQ     RESULT$,,AUTO
         3 000161   000023 036003                    ADLQ    19,DU
         3 000162   200013 756100                    STQ     OBLOCKI$,,AUTO

      195     3490    2        OBLOCK$ = OBLOCKI$;

   3490  3 000163   200012 756100                    STQ     OBLOCK$,,AUTO

      196     3491
      197     3492                                 /* if the request is in a binary file,
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:38   
      198     3493                                      branch off here to handle it
      199     3494                                      entirely differently.
      200     3495                                 */
      201     3496
      202     3497    2        IF  FILECTX.FATTR.XATTR.TEXTMODE = %FALSE#

   3497  3 000164   200016 470500                    LDP0    FCTX$,,AUTO
         3 000165   000017 234100                    SZN     15,,PR0
         3 000166   000202 605000 3                  TPL     BINARY_HANDLING

      203     3498    2        THEN
      204     3499    2           GOTO BINARY_HANDLING;
      205     3500
      206     3501        /* TEXT HANDLING - this code is used for reading text files - any CP-6 file
      207     3502           that is not a C library binary file format, and can be read sequentially.
      208     3503        */
      209     3504
      210     3505    2        CALL POSITION_FILE ALTRET (ALL_DONE);

   3505  3 000167   000423 701000 3                  TSX1    POSITION_FILE
         3 000170   000367 702000 3                  TSX2    ALL_DONE

      211     3506
      212     3507    3        DO UNTIL (SIZEBYTES = 0);

      213     3508    3           CALL READAREC (OBLOCK$, SIZEBYTES) ALTRET (ALL_DONE);

   3508  3 000171   200024 630500                    EPPR0   SIZEBYTES,,AUTO
         3 000172   200042 450500                    STP0    @BUF$+1,,AUTO
         3 000173   200012 631500                    EPPR1   OBLOCK$,,AUTO
         3 000174   200041 451500                    STP1    REC_POS+3,,AUTO
         3 000175   000612 701000 3                  TSX1    READAREC
         3 000176   000367 702000 3                  TSX2    ALL_DONE

      214     3509    3           END;

   3509  3 000177   200024 235100                    LDA     SIZEBYTES,,AUTO
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:39   
         3 000200   000171 601000 3                  TNZ     s:3508

      215     3510
      216     3511    2        GOTO ALL_DONE;

   3511  3 000201   000367 710000 3                  TRA     ALL_DONE

   3508  3 000202                       BINARY_HAND* null
      217     3512
      218     3513        /* BINARY_HANDLING - this code is used for reading binary files.  The
      219     3514            only files that NFS treats as binary files are the C library
      220     3515            binary file formats with 1024 byte records.
      221     3516        */
      222     3517    2   BINARY_HANDLING: ;
      223     3518
      224     3519    2        IF USERCTX.BUF$ = ADDR(NIL) THEN CALL FUI$MEMALLOC (USERCTX.BUF$);

   3519  3 000202   200015 471500                    LDP1    UCTX$,,AUTO
         3 000203   100017 236100                    LDQ     15,,PR1
         3 000204   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000205   000215 601000 3                  TNZ     s:3520

   3519  3 000206   200015 236100                    LDQ     UCTX$,,AUTO
         3 000207   000017 036003                    ADLQ    15,DU
         3 000210   200052 756100                    STQ     TMP+2,,AUTO
         3 000211   200052 630500                    EPPR0   TMP+2,,AUTO
         3 000212   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000213   000000 701000 xent               TSX1    FUI$MEMALLOC
         3 000214   000000 011000                    NOP     0

      225     3520    2        READ_NEXT_KEYED_REC.V.DCB# = FILECTX.DCB#;

   3520  3 000215   200016 470500                    LDP0    FCTX$,,AUTO
         3 000216   000012 220100                    LDX0    10,,PR0
         3 000217   000134 740000 1                  STX0    READ_NEXT_KEYED_REC+8

      226     3521    2        READ_NEXT_KEYED_REC.BUF_ = VECTOR (USERCTX.BUF$ -> BINARY_BLOCK);
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:40   

   3521  3 000220   200015 471500                    LDP1    UCTX$,,AUTO
         3 000221   100017 473500                    LDP3    15,,PR1
         3 000222   000001 235000 4                  LDA     1
         3 000223   200052 453500                    STP3    TMP+2,,AUTO
         3 000224   200052 236100                    LDQ     TMP+2,,AUTO
         3 000225   000130 757000 1                  STAQ    READ_NEXT_KEYED_REC+4

      227     3522    2        POSITION_BINARY.V.DCB# = FILECTX.DCB#;

   3522  3 000226   000012 221100                    LDX1    10,,PR0
         3 000227   000120 741000 1                  STX1    POSITION_BINARY+6

      228     3523    2        FILE_KEY.VALUE_ = STARTBYTE/1024+1; /* setup for the position file */

   3523  3 000230   200023 236100                    LDQ     STARTBYTE,,AUTO
         3 000231   000012 772000                    QRL     10
         3 000232   000001 036007                    ADLQ    1,DL
         3 000233   000142 552034 1                  STBQ    FILE_KEY,'34'O

      229     3524    2        FILE_KEY.COUNT_ = 3;

   3524  3 000234   003000 236003                    LDQ     1536,DU
         3 000235   000142 552040 1                  STBQ    FILE_KEY,'40'O

      230     3525    3        CALL M$PRECORD( POSITION_BINARY) WHENALTRETURN DO; END;

   3525  3 000236   000112 630400 1                  EPPR0   POSITION_BINARY
         3 000237   440003 713400                    CLIMB   alt,+16387
         3 000240   401000 401760                    pmme    nvectors=3
         3 000241   000243 702000 3                  TSX2    s:3527
         3 000242   000243 710000 3                  TRA     s:3527

      231     3526
      232     3527    3        DO WHILE (SIZEBYTES > 0);

   3527  3 000243   200024 235100                    LDA     SIZEBYTES,,AUTO
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:41   
         3 000244   000367 604400 3                  TMOZ    ALL_DONE

      233     3528    3           CALL M$READ (READ_NEXT_KEYED_REC) ALTRET( ALL_DONE);

   3528  3 000245   000124 630400 1                  EPPR0   READ_NEXT_KEYED_REC
         3 000246   440000 713400                    CLIMB   alt,read
         3 000247   401400 401760                    pmme    nvectors=4
         3 000250   000367 702000 3                  TSX2    ALL_DONE

      234     3529    3           NBYTES = MINIMUM((FILE_KEY.VALUE_-1)*1024 - STARTBYTE, SIZEBYTES);

   3529  3 000251   000142 236000 1                  LDQ     FILE_KEY
         3 000252   000012 736000                    QLS     10
         3 000253   000027 676000 xsym               ERQ     B_VECTNIL+23
         3 000254   000001 036007                    ADLQ    1,DL
         3 000255   200023 036100                    ADLQ    STARTBYTE,,AUTO
         3 000256   000027 676000 xsym               ERQ     B_VECTNIL+23
         3 000257   001777 136007                    SBLQ    1023,DL
         3 000260   200024 116100                    CMPQ    SIZEBYTES,,AUTO
         3 000261   000263 604400 3                  TMOZ    s:3529+10
         3 000262   200024 236100                    LDQ     SIZEBYTES,,AUTO
         3 000263   200006 756100                    STQ     NBYTES,,AUTO

      235     3530    3           IF NBYTES > 0

   3530  3 000264   000000 116003                    CMPQ    0,DU
         3 000265   000306 604400 3                  TMOZ    s:3538

      236     3531    4           THEN DO; /* we have to pad a hole in the file with 0's */

      237     3532    4              OBLOCK$->BASED_STRUCT = '0'B; /* insert padding */

   3532  3 000266   200012 470500                    LDP0    OBLOCK$,,AUTO
         3 000267   000000 620006                    EAX0    0,QL
         3 000270   000140 100400                    MLR     fill='000'O
         3 000271   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 000272   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:42   

      238     3533    4              OBLOCK$ = PINCRC(OBLOCK$,NBYTES);

   3533  3 000273   200006 236100                    LDQ     NBYTES,,AUTO
         3 000274   000020 736000                    QLS     16
         3 000275   200012 036100                    ADLQ    OBLOCK$,,AUTO
         3 000276   200012 756100                    STQ     OBLOCK$,,AUTO

      239     3534    4              STARTBYTE = STARTBYTE + NBYTES;

   3534  3 000277   200023 236100                    LDQ     STARTBYTE,,AUTO
         3 000300   200006 036100                    ADLQ    NBYTES,,AUTO
         3 000301   200023 756100                    STQ     STARTBYTE,,AUTO

      240     3535    4              SIZEBYTES = SIZEBYTES - NBYTES;

   3535  3 000302   200024 236100                    LDQ     SIZEBYTES,,AUTO
         3 000303   200006 136100                    SBLQ    NBYTES,,AUTO
         3 000304   200024 756100                    STQ     SIZEBYTES,,AUTO

      241     3536    4              NBYTES = 0;

   3536  3 000305   200006 450100                    STZ     NBYTES,,AUTO

      242     3537    4              END;

      243     3538    3           RECSTART = -NBYTES; /* the first byte to copy in current data */

   3538  3 000306   200006 335100                    LCA     NBYTES,,AUTO
         3 000307   200010 755100                    STA     RECSTART,,AUTO

      244     3539    3           NBYTES = MINIMUM( MAXIMUM( USERDCB.ARS#-RECSTART, 0), SIZEBYTES);

   3539  3 000310   200017 470500                    LDP0    USERDCB$,,AUTO
         3 000311   000000 236100                    LDQ     0,,PR0
         3 000312   200010 136100                    SBLQ    RECSTART,,AUTO
         3 000313   000000 116003                    CMPQ    0,DU
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:43   
         3 000314   000316 605000 3                  TPL     s:3539+6
         3 000315   000000 236003                    LDQ     0,DU
         3 000316   200024 116100                    CMPQ    SIZEBYTES,,AUTO
         3 000317   000321 604400 3                  TMOZ    s:3539+9
         3 000320   200024 236100                    LDQ     SIZEBYTES,,AUTO
         3 000321   200006 756100                    STQ     NBYTES,,AUTO

      245     3540    3           IF NBYTES > 0

   3540  3 000322   000000 116003                    CMPQ    0,DU
         3 000323   000346 604400 3                  TMOZ    s:3547

      246     3541    4           THEN DO;    /* we have data to copy to the user buffer */

      247     3542    4              OBLOCK$->BUF_TEMPLATE = PINCRC (USERCTX.BUF$,RECSTART)->BUF_TEMPLATE;

   3542  3 000324   200015 471500                    LDP1    UCTX$,,AUTO
         3 000325   100017 473500                    LDP3    15,,PR1
         3 000326   000000 620006                    EAX0    0,QL
         3 000327   200012 474500                    LDP4    OBLOCK$,,AUTO
         3 000330   200006 721100                    LXL1    NBYTES,,AUTO
         3 000331   040140 100545                    MLR     fill='040'O
         3 000332   300000 000010                    ADSC9   0,A,PR3                  cn=0,n=*X0
         3 000333   400000 000011                    ADSC9   0,,PR4                   cn=0,n=*X1

      248     3543    4              OBLOCK$ = PINCRC(OBLOCK$,NBYTES);

   3543  3 000334   200006 236100                    LDQ     NBYTES,,AUTO
         3 000335   000020 736000                    QLS     16
         3 000336   200012 036100                    ADLQ    OBLOCK$,,AUTO
         3 000337   200012 756100                    STQ     OBLOCK$,,AUTO

      249     3544    4              STARTBYTE = STARTBYTE + NBYTES;

   3544  3 000340   200023 236100                    LDQ     STARTBYTE,,AUTO
         3 000341   200006 036100                    ADLQ    NBYTES,,AUTO
         3 000342   200023 756100                    STQ     STARTBYTE,,AUTO
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:44   

      250     3545    4              SIZEBYTES = SIZEBYTES - NBYTES;

   3545  3 000343   200024 236100                    LDQ     SIZEBYTES,,AUTO
         3 000344   200006 136100                    SBLQ    NBYTES,,AUTO
         3 000345   200024 756100                    STQ     SIZEBYTES,,AUTO

      251     3546    4              END;

      252     3547    3           CALL XSL$HTONL (NBYTES, STARTBYTE);

   3547  3 000346   200023 631500                    EPPR1   STARTBYTE,,AUTO
         3 000347   200053 451500                    STP1    TMP+3,,AUTO
         3 000350   200006 633500                    EPPR3   NBYTES,,AUTO
         3 000351   200052 453500                    STP3    TMP+2,,AUTO
         3 000352   200052 630500                    EPPR0   TMP+2,,AUTO
         3 000353   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000354   000000 701000 xent               TSX1    XSL$HTONL
         3 000355   000000 011000                    NOP     0

      253     3548    3           FILECTX.FATTR.SIZE = MAXIMUM (NBYTES, FILECTX.FATTR.SIZE);

   3548  3 000356   200016 470500                    LDP0    FCTX$,,AUTO
         3 000357   000023 236100                    LDQ     19,,PR0
         3 000360   000364 604000 3                  TMI     s:3548+6
         3 000361   200006 116100                    CMPQ    NBYTES,,AUTO
         3 000362   000364 605000 3                  TPL     s:3548+6
         3 000363   200006 236100                    LDQ     NBYTES,,AUTO
         3 000364   000023 756100                    STQ     19,,PR0

      254     3549
      255     3550    3           END;                  /* do while SIZEBYTES > 0 */

   3550  3 000365   200024 235100                    LDA     SIZEBYTES,,AUTO
         3 000366   000245 605400 3                  TPNZ    s:3528

   3548  3 000367                       ALL_DONE     null
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:45   
      256     3551
      257     3552    2   ALL_DONE: ;    /* setup the reply for the caller, and return */
      258     3553    2        FU$READRES.COUNT = POFFC (OBLOCK$, OBLOCKI$);

   3553  3 000367   200013 236100                    LDQ     OBLOCKI$,,AUTO
         3 000370   000020 772000                    QRL     16
         3 000371   200052 756100                    STQ     TMP+2,,AUTO
         3 000372   200012 236100                    LDQ     OBLOCK$,,AUTO
         3 000373   000020 772000                    QRL     16
         3 000374   200052 136100                    SBLQ    TMP+2,,AUTO
         3 000375   200021 470500                    LDP0    RESULT$,,AUTO
         3 000376   000022 756100                    STQ     18,,PR0

      259     3554    2        REQUEST.LEN = 32 /* RPC HEAD */+ 4*SIZEW( FU$READRES);

   3554  3 000377   000022 720100                    LXL0    18,,PR0
         3 000400   000114 621010                    EAX1    76,X0
         3 000401   000000 636011                    EAQ     0,X1
         3 000402   000022 772000                    QRL     18
         3 000403   000011 402007                    MPY     9,DL
         3 000404   000043 036007                    ADLQ    35,DL
         3 000405   000044 506007                    DIV     36,DL
         3 000406   000002 736000                    QLS     2
         3 000407   000040 036007                    ADLQ    32,DL
         3 000410   200003 471500                    LDP1    @REQUEST,,AUTO
         3 000411   100002 756100                    STQ     2,,PR1

      260     3555    2        FU$READRES.FATTR = FILECTX.FATTR;

   3555  3 000412   200016 473500                    LDP3    FCTX$,,AUTO
         3 000413   000100 100500                    MLR     fill='000'O
         3 000414   300016 000104                    ADSC9   14,,PR3                  cn=0,n=68
         3 000415   000001 000104                    ADSC9   1,,PR0                   cn=0,n=68

      261     3556    2        FU$READRES.FATTR.XATTR = '0'B;

   3556  3 000416   000000 220003                    LDX0    0,DU
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:46   
         3 000417   000002 740100                    STX0    2,,PR0

      262     3557    2        FU$READRES.STAT = %NFS_OK;

   3557  3 000420   000000 450100                    STZ     0,,PR0

      263     3558
      264     3559    2        RETURN;

   3559  3 000421   200030 221300                    LDX1  ! LASTI+2,,AUTO
         3 000422   000001 702211                    TSX2  ! 1,X1

      265     3560
      266     3561    2   END FUI$RDRQS;
      267     3562
      268     3563        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:47   
      269     3564        /*I*  NAME:      POSITION_FILE
      270     3565              Purpose:   To position the USERCTX file to STARTBYTE, so that it's ready
      271     3566                         for reading or writing.
      272     3567              Algorithm: Find a CRECNO that will allow us to position as close to
      273     3568                         STARTBYTE as possible, using the information in the USERCTX
      274     3569                         cache, and FILECTX's current position.  If we can't find a
      275     3570                         CRECNO entry to position to, we have to use 0 (BOF).  Use that
      276     3571                         cache entry to position ourselves closer to STARTBYTE in the
      277     3572                         file, and then do RECAREC calls until we're at STARTBYTE.
      278     3573        */
      279     3574    1   POSITION_FILE: PROC ALTRET;

   3574  3 000423   200032 741300       POSITION_FI* STX1  ! LASTI+4,,AUTO

      280     3575
      281     3576    2   DCL I SBIN;
      282     3577    2   DCL MAX UBIN; /* maximum cached file offset that starts a record */
      283     3578    2   DCL MAXI UBIN; /* index into FILEPOS of the entry corresponding to MAX */
      284     3579    2   DCL REC_POS UBIN; /* file offset of start of Record for this cache entry */
      285     3580
      286     3581             %FPT_PRECORD (FPTN=POSITION_REC,
      287     3582                           BOF=YES);
      288     3603             %FPT_PFIL (FPTN=POSITION_BOF,
      289     3604                        BOF=YES);
      290     3619
      291     3620    2        IF STARTBYTE = 0 THEN GOTO FROM_BOF;

   3620  3 000424   200023 235100                    LDA     STARTBYTE,,AUTO
         3 000425   000517 600000 3                  TZE     FROM_BOF

      292     3621
      293     3622         /* If we're already positioned where we need to be, there's nothing to do */
      294     3623    2        IF (STARTBYTE = FILECTX.FOFFSET)

   3623  3 000426   200016 470500                    LDP0    FCTX$,,AUTO
         3 000427   200023 236100                    LDQ     STARTBYTE,,AUTO
         3 000430   000055 116100                    CMPQ    45,,PR0
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:48   
         3 000431   000437 601000 3                  TNZ     s:3629
         3 000432   200003 471500                    LDP1    @REQUEST,,AUTO
         3 000433   100005 235100                    LDA     5,,PR1
         3 000434   000006 115007                    CMPA    6,DL
         3 000435   000437 601000 3                  TNZ     s:3629

      295     3624    2           AND (REQUEST.PROC# = %NFSPROC_READ)
      296     3625    2        THEN
      297     3626    2           RETURN;

   3626  3 000436   000001 702211                    TSX2  ! 1,X1

      298     3627
      299     3628                  /* look for the entry which is closest to STARTBYTE */
      300     3629    2        MAX = 0;

   3629  3 000437   200034 450100                    STZ     MAX,,AUTO

      301     3630    3        DO I = 0 TO %CACHESZ-1;

   3630  3 000440   200033 450100                    STZ     I,,AUTO
         3 000441   000461 710000 3                  TRA     s:3637+1

      302     3631    3           REC_POS = USERCTX.FILEPOS.FOFFSET(I);

   3631  3 000442   200033 235100                    LDA     I,,AUTO
         3 000443   000001 735000                    ALS     1
         3 000444   200015 470500                    LDP0    UCTX$,,AUTO
         3 000445   000021 235105                    LDA     17,AL,PR0
         3 000446   200036 755100                    STA     REC_POS,,AUTO

      303     3632    3           IF REC_POS <= STARTBYTE AND REC_POS > MAX

   3632  3 000447   200023 236100                    LDQ     STARTBYTE,,AUTO
         3 000450   200036 116100                    CMPQ    REC_POS,,AUTO
         3 000451   000460 602000 3                  TNC     s:3637
         3 000452   200034 236100                    LDQ     MAX,,AUTO
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:49   
         3 000453   200036 116100                    CMPQ    REC_POS,,AUTO
         3 000454   000460 603000 3                  TRC     s:3637

      304     3633    4           THEN DO;              /* got an entry which is closer */

      305     3634    4              MAX = REC_POS;

   3634  3 000455   200034 755100                    STA     MAX,,AUTO

      306     3635    4              MAXI = I;

   3635  3 000456   200033 236100                    LDQ     I,,AUTO
         3 000457   200035 756100                    STQ     MAXI,,AUTO

      307     3636    4              END;

      308     3637    3           END;

   3637  3 000460   200033 054100                    AOS     I,,AUTO
         3 000461   200033 235100                    LDA     I,,AUTO
         3 000462   000011 115007                    CMPA    9,DL
         3 000463   000442 604400 3                  TMOZ    s:3631

      309     3638
      310     3639    2        IF MAX > 0

   3639  3 000464   200034 236100                    LDQ     MAX,,AUTO
         3 000465   000517 600000 3                  TZE     FROM_BOF

      311     3640    3        THEN DO;            /* a suitable cache entry was found */

      312     3641    3           POSITION_REC.V.DCB# = FILECTX.DCB#;

   3641  3 000466   200016 470500                    LDP0    FCTX$,,AUTO
         3 000467   000012 220100                    LDX0    10,,PR0
         3 000470   000152 740000 1                  STX0    POSITION_REC+6

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:50   
      313     3642    3           POSITION_REC.V.N# = USERCTX.FILEPOS.CRECNO(MAXI)-1;

   3642  3 000471   200035 235100                    LDA     MAXI,,AUTO
         3 000472   000001 735000                    ALS     1
         3 000473   200015 471500                    LDP1    UCTX$,,AUTO
         3 000474   100020 235105                    LDA     16,AL,PR1
         3 000475   000001 135007                    SBLA    1,DL
         3 000476   000153 755000 1                  STA     POSITION_REC+7

      314     3643    3           CALL M$PRECORD (POSITION_REC) ALTRET (FROM_BOF);

   3643  3 000477   000144 630400 1                  EPPR0   POSITION_REC
         3 000500   440003 713400                    CLIMB   alt,+16387
         3 000501   401000 401760                    pmme    nvectors=3
         3 000502   000517 702000 3                  TSX2    FROM_BOF

      315     3644    3           FILECTX.CRECNO = USERCTX.FILEPOS.CRECNO(MAXI)-1;

   3644  3 000503   200035 235100                    LDA     MAXI,,AUTO
         3 000504   000001 735000                    ALS     1
         3 000505   200015 470500                    LDP0    UCTX$,,AUTO
         3 000506   200016 471500                    LDP1    FCTX$,,AUTO
         3 000507   000020 235105                    LDA     16,AL,PR0
         3 000510   000001 135007                    SBLA    1,DL
         3 000511   100014 755100                    STA     12,,PR1

      316     3645    3           FILECTX.FOFFSET = USERCTX.FILEPOS.FOFFSET(MAXI);

   3645  3 000512   200035 236100                    LDQ     MAXI,,AUTO
         3 000513   000001 736000                    QLS     1
         3 000514   000021 235106                    LDA     17,QL,PR0
         3 000515   100055 755100                    STA     45,,PR1

      317     3646    3           END;                  /* found a suitable cache entry */

   3646  3 000516   000534 710000 3                  TRA     s:3658

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:51   
      318     3647
      319     3648    3        ELSE DO;       /* no suitable cache entries - look from BOF */

   3645  3 000517                       FROM_BOF     null
      320     3649    3   FROM_BOF: ;
      321     3650    3           POSITION_BOF.V.DCB# = FILECTX.DCB#;

   3650  3 000517   200016 470500                    LDP0    FCTX$,,AUTO
         3 000520   000012 220100                    LDX0    10,,PR0
         3 000521   000160 740000 1                  STX0    POSITION_BOF+2

      322     3651    3           CALL M$PFIL (POSITION_BOF)

   3651  3 000522   000156 630400 1                  EPPR0   POSITION_BOF
         3 000523   440004 713400                    CLIMB   alt,+16388
         3 000524   400000 401760                    pmme    nvectors=1
         3 000525   000527 702000 3                  TSX2    s:3653
         3 000526   000531 710000 3                  TRA     s:3655

      323     3652    4           WHENALTRETURN DO;

      324     3653    4              ALTRETURN;

   3653  3 000527   200032 221300                    LDX1  ! LASTI+4,,AUTO
         3 000530   000000 702211                    TSX2  ! 0,X1

      325     3654    4              END;
      326     3655    3           FILECTX.CRECNO = 0;

   3655  3 000531   200016 470500                    LDP0    FCTX$,,AUTO
         3 000532   000014 450100                    STZ     12,,PR0

      327     3656    3           FILECTX.FOFFSET = 0;

   3656  3 000533   000055 450100                    STZ     45,,PR0

      328     3657    3           END;                  /* no suitable cache entry */
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:52   

      329     3658    2        USERCTX.LFCNT = 0;

   3658  3 000534   200015 470500                    LDP0    UCTX$,,AUTO
         3 000535   000000 236003                    LDQ     0,DU
         3 000536   000015 752101                    STCQ    13,'01'O,PR0

      330     3659    2        USERCTX.ARS# = 0;

   3659  3 000537   000016 450100                    STZ     14,,PR0

      331     3660    2        FILECTX.CHUNK = 0;

   3660  3 000540   000000 220003                    LDX0    0,DU
         3 000541   200016 471500                    LDP1    FCTX$,,AUTO
         3 000542   100015 440100                    SXL0    13,,PR1

      332     3661
      333     3662                       /* Position file to immediately before STARTBYTE */
      334     3663    3        DO WHILE (STARTBYTE > FILECTX.FOFFSET);

   3663  3 000543   100055 236100                    LDQ     45,,PR1
         3 000544   200023 116100                    CMPQ    STARTBYTE,,AUTO
         3 000545   000610 603000 3                  TRC     s:3672

      335     3664    3           IF USERCTX.BUF$ = ADDR(NIL) THEN CALL FUI$MEMALLOC (USERCTX.BUF$);

   3664  3 000546   200015 470500                    LDP0    UCTX$,,AUTO
         3 000547   000017 236100                    LDQ     15,,PR0
         3 000550   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000551   000561 601000 3                  TNZ     s:3665

   3664  3 000552   200015 236100                    LDQ     UCTX$,,AUTO
         3 000553   000017 036003                    ADLQ    15,DU
         3 000554   200052 756100                    STQ     TMP+2,,AUTO
         3 000555   200052 630500                    EPPR0   TMP+2,,AUTO
         3 000556   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:53   
         3 000557   000000 701000 xent               TSX1    FUI$MEMALLOC
         3 000560   000000 011000                    NOP     0

      336     3665    3           BUF$ = USERCTX.BUF$;

   3665  3 000561   200015 470500                    LDP0    UCTX$,,AUTO
         3 000562   000017 236100                    LDQ     15,,PR0
         3 000563   200020 756100                    STQ     BUF$,,AUTO

      337     3666    3           CALL READAREC (BUF$, MINIMUM (%FUI_CHUNKSIZE, STARTBYTE-FILECTX.FOFFSET))

   3666  3 000564   200016 471500                    LDP1    FCTX$,,AUTO
         3 000565   200023 236100                    LDQ     STARTBYTE,,AUTO
         3 000566   100055 136100                    SBLQ    45,,PR1
         3 000567   010000 116007                    CMPQ    4096,DL
         3 000570   000572 604400 3                  TMOZ    s:3666+6
         3 000571   010000 236007                    LDQ     4096,DL
         3 000572   200056 756100                    STQ     TMP+6,,AUTO
         3 000573   200056 633500                    EPPR3   TMP+6,,AUTO
         3 000574   200042 453500                    STP3    @BUF$+1,,AUTO
         3 000575   200020 634500                    EPPR4   BUF$,,AUTO
         3 000576   200041 454500                    STP4    REC_POS+3,,AUTO
         3 000577   000612 701000 3                  TSX1    READAREC
         3 000600   000602 702000 3                  TSX2    s:3668
         3 000601   000604 710000 3                  TRA     s:3670

      338     3667    4           WHENALTRETURN DO;

      339     3668    4              ALTRETURN;

   3668  3 000602   200032 221300                    LDX1  ! LASTI+4,,AUTO
         3 000603   000000 702211                    TSX2  ! 0,X1

      340     3669    4              END;
      341     3670    3           END;

   3670  3 000604   200016 470500                    LDP0    FCTX$,,AUTO
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:54   
         3 000605   000055 236100                    LDQ     45,,PR0
         3 000606   200023 116100                    CMPQ    STARTBYTE,,AUTO
         3 000607   000546 602000 3                  TNC     s:3664

      342     3671
      343     3672    2   END POSITION_FILE;

   3672  3 000610   200032 221300                    LDX1  ! LASTI+4,,AUTO
         3 000611   000001 702211                    TSX2  ! 1,X1

      344     3673
      345     3674        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:55   
      346     3675        /*I*  NAME:    READAREC
      347     3676              Purpose: To read a record (or continuation of a record) into BUF in a form
      348     3677                       that can be sent via NFS (ie. with LF's instead of record
      349     3678                       boundaries).
      350     3679              Inputs:  USERCTX - describes input file and position where it left off.
      351     3680                       BUFL - maximum amount of data to put into BUF.
      352     3681                       BUF$ - points to the buffer (BUF) to read into.
      353     3682              Outputs: USERCTX - describes where READAREC left off in user file.
      354     3683                       BUF - filled with the data read.
      355     3684                       BUF$ - points to after that data that we read into BUF.
      356     3685                       BUFL - number of bytes remaining in BUF.
      357     3686                       ARS# - number of characters put into BUF.
      358     3687              Algorithm: There's 2 things we'll stick into BUF: data from the file; or
      359     3688                       LFs (or CR or FF) as determined by the VFC from the last recordhe
      360     3689                       read.  We read data from the current record if there's some
      361     3690                       there, then we process the record's VFC (or lack thereof) to
      362     3691                       determine how to turn this into something UNIX understands, and
      363     3692                       put that into USERCTX.LFCNT.  If USERCTX.LFCNT isn't zero, we've
      364     3693                       got NFS translation data to put in the buffer.
      365     3694                         LFCNT: 1 - 15, put in that many LFs (over 1 came from VFC)
      366     3695                                16, put in a FF (had a 'P' VFC character)
      367     3696                                32, put in a CR (had a '`' VFC character)
      368     3697                       We know we reached EOF if ARS# ~= RECL, or we ALTRETurn;
      369     3698        */
      370     3699    1   READAREC: PROC (BUF$, BUFL) ALTRET;

   3699  3 000612   200040 741300       READAREC     STX1  ! REC_POS+2,,AUTO

      371     3700
      372     3701    2   DCL BUF$ PTR PARAM;      /* points to the buffer to read into */
      373     3702    2   DCL BUFL UBIN PARAM;     /* length of the buffer to read into */
      374     3703
      375     3704    2   DCL BUFREM UBIN; /* number of bytes remaining in the user buffer */
      376     3705    2   DCL BUFCHAR CHAR(1) BASED;
      377     3706
      378     3707    2   DCL LFS_INIT(0:15) CONSTANT CHAR(1) CALIGNED INIT (BINASC(10)*0);
      379     3708    2   DCL LFS REDEF LFS_INIT CHAR(16);
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:56   
      380     3709
      381     3710    2        BUFREM = BUFL;

   3710  3 000613   200042 470500                    LDP0    @BUFL,,AUTO
         3 000614   000000 235100                    LDA     0,,PR0
         3 000615   200043 755100                    STA     BUFREM,,AUTO

      382     3711
      383     3712    2        IF USERDCB.TYC.LD# /* we have more of the current record to read */

   3712  3 000616   200017 471500                    LDP1    USERDCB$,,AUTO
         3 000617   100002 236100                    LDQ     2,,PR1
         3 000620   002000 316003                    CANQ    1024,DU
         3 000621   000626 601000 3                  TNZ     s:3715
         3 000622   200015 473500                    LDP3    UCTX$,,AUTO
         3 000623   300015 236100                    LDQ     13,,PR3
         3 000624   000077 316007                    CANQ    63,DL
         3 000625   000741 601000 3                  TNZ     s:3745

      384     3713    2           OR USERCTX.LFCNT = 0 /* LFCNT = 0, so we need to read more data */
      385     3714    3        THEN DO;

      386     3715    3           READ_USER_REC.V.DCB# = FILECTX.DCB#;

   3715  3 000626   200016 473500                    LDP3    FCTX$,,AUTO
         3 000627   300012 220100                    LDX0    10,,PR3
         3 000630   000010 740000 1                  STX0    READ_USER_REC+8

      387     3716    3           READ_USER_REC.BUF_.BUF$ = BUF$;

   3716  3 000631   200041 474500                    LDP4    @BUF$,,AUTO
         3 000632   400000 236100                    LDQ     0,,PR4
         3 000633   000005 756000 1                  STQ     READ_USER_REC+5

      388     3717    3           READ_USER_REC.BUF_.BOUND = BUFREM - 1;

   3717  3 000634   200043 236100                    LDQ     BUFREM,,AUTO
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:57   
         3 000635   000001 136007                    SBLQ    1,DL
         3 000636   000020 736000                    QLS     16
         3 000637   000004 676000 1                  ERQ     READ_USER_REC+4
         3 000640   000034 376000 xsym               ANQ     B_VECTNIL+28
         3 000641   000004 656000 1                  ERSQ    READ_USER_REC+4

      389     3718
      390     3719         /* Setup to read the next record or another chunk of current one */
      391     3720    3           READ_USER_REC.V.DVBYTE.CONT# = USERDCB.TYC.LD#;

   3720  3 000642   100002 236100                    LDQ     2,,PR1
         3 000643   000001 772000                    QRL     1
         3 000644   000013 676000 1                  ERQ     READ_USER_REC+11
         3 000645   001000 376003                    ANQ     512,DU
         3 000646   000013 656000 1                  ERSQ    READ_USER_REC+11

      392     3721
      393     3722    3           CALL M$READ (READ_USER_REC)

   3722  3 000647   000000 630400 1                  EPPR0   READ_USER_REC
         3 000650   440000 713400                    CLIMB   alt,read
         3 000651   401400 401760                    pmme    nvectors=4
         3 000652   000654 702000 3                  TSX2    s:3725
         3 000653   000662 710000 3                  TRA     s:3728

      394     3723    4           WHENALTRETURN DO;

      395     3724                            /* treat anything other than E$LD as EOF */
      396     3725    4              IF B$ALT.ERR.CODE ~= %E$LD THEN GOTO REACHED_EOF;

   3725  3 000654   000000 470400 xsym               LDP0    B$TCB$
         3 000655   000000 471500                    LDP1    0,,PR0
         3 000656   100102 236100                    LDQ     66,,PR1
         3 000657   377770 376007                    ANQ     131064,DL
         3 000660   000070 116007                    CMPQ    56,DL
         3 000661   001023 601000 3                  TNZ     REACHED_EOF

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:58   
      397     3726    4              END;

      398     3727
      399     3728    3           IF NOT READ_USER_REC.V.DVBYTE.CONT# /* not a continuation read */

   3728  3 000662   000013 430000 1                  FSZN    READ_USER_REC+11
         3 000663   000724 604000 3                  TMI     s:3741

      400     3729    4           THEN DO; /* not a continuation read - reading a new record */

      401     3730    4              FILECTX.CRECNO = FILECTX.CRECNO + 1;

   3730  3 000664   200016 470500                    LDP0    FCTX$,,AUTO
         3 000665   000014 235100                    LDA     12,,PR0
         3 000666   000001 035007                    ADLA    1,DL
         3 000667   000014 755100                    STA     12,,PR0

      402     3731    4              FILECTX.CHUNK = 0;

   3731  3 000670   000000 220003                    LDX0    0,DU
         3 000671   000015 440100                    SXL0    13,,PR0

      403     3732    4              CALL UPDATECACHE;

   3732  3 000672   001063 701000 3                  TSX1    UPDATECACHE
         3 000673   000000 011000                    NOP     0

      404     3733    4              USERCTX.LFCNT = 1; /* default to one LF character for output */

   3733  3 000674   200015 470500                    LDP0    UCTX$,,AUTO
         3 000675   000001 236007                    LDQ     1,DL
         3 000676   000015 752101                    STCQ    13,'01'O,PR0

      405     3734    4              IF USERDCB.DVBYTE.VFC# /* a VFC character */

   3734  3 000677   200017 471500                    LDP1    USERDCB$,,AUTO
         3 000700   100003 236100                    LDQ     3,,PR1
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:59   
         3 000701   100000 316003                    CANQ    32768,DU
         3 000702   000724 600000 3                  TZE     s:3741
         3 000703   100056 236100                    LDQ     46,,PR1
         3 000704   777000 376003                    ANQ     -512,DU
         3 000705   100000 116003                    CMPQ    32768,DU
         3 000706   000714 602000 3                  TNC     s:3734+13
         3 000707   100056 236100                    LDQ     46,,PR1
         3 000710   777000 376003                    ANQ     -512,DU
         3 000711   120000 116003                    CMPQ    40960,DU
         3 000712   000720 602000 3                  TNC     s:3738
         3 000713   000720 600000 3                  TZE     s:3738
         3 000714   100056 236100                    LDQ     46,,PR1
         3 000715   777000 376003                    ANQ     -512,DU
         3 000716   140000 116003                    CMPQ    49152,DU
         3 000717   000724 601000 3                  TNZ     s:3741

      406     3735    4                 AND ((USERDCB.VFCCHAR# >= '@' AND USERDCB.VFCCHAR# <= 'P')
      407     3736    4                 OR (USERDCB.VFCCHAR# = '`'))
      408     3737    4              THEN
      409     3738    4                 USERCTX.LFCNT = ASCBIN(USERDCB.VFCCHAR#) - ASCBIN('@');

   3738  3 000720   100056 236100                    LDQ     46,,PR1
         3 000721   000033 772000                    QRL     27
         3 000722   000100 136007                    SBLQ    64,DL
         3 000723   000015 752101                    STCQ    13,'01'O,PR0

      410     3739    4              END;

      411     3740
      412     3741    3           BUF$ = PINCRC (BUF$, USERDCB.ARS#);

   3741  3 000724   200017 470500                    LDP0    USERDCB$,,AUTO
         3 000725   000000 236100                    LDQ     0,,PR0
         3 000726   200041 471500                    LDP1    @BUF$,,AUTO
         3 000727   100000 473500                    LDP3    0,,PR1
         3 000730   000011 402007                    MPY     9,DL
         3 000731   000000 116003                    CMPQ    0,DU
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:60   
         3 000732   000734 605000 3                  TPL     s:3741+8
         3 000733   000044 036003                    ADLQ    36,DU
         3 000734   300000 503506                    ABD     0,QL,PR3
         3 000735   100000 453500                    STP3    0,,PR1

      413     3742    3           BUFREM = BUFREM - USERDCB.ARS#;

   3742  3 000736   200043 236100                    LDQ     BUFREM,,AUTO
         3 000737   000000 136100                    SBLQ    0,,PR0
         3 000740   200043 756100                    STQ     BUFREM,,AUTO

      414     3743    3           END;                  /* if LFCNT = 0 */

      415     3744
      416     3745    2        IF USERCTX.LFCNT > 0 AND /* put LFs from the last record into buffer */

   3745  3 000741   200015 470500                    LDP0    UCTX$,,AUTO
         3 000742   000015 236100                    LDQ     13,,PR0
         3 000743   000077 316007                    CANQ    63,DL
         3 000744   001023 600000 3                  TZE     REACHED_EOF
         3 000745   200043 235100                    LDA     BUFREM,,AUTO
         3 000746   001023 600000 3                  TZE     REACHED_EOF

      417     3746    2           BUFREM > 0
      418     3747    3        THEN DO;

      419     3748    3           IF USERCTX.LFCNT < 16 /* LFCNT is actually a count of LFs */

   3748  3 000747   000015 236100                    LDQ     13,,PR0
         3 000750   000077 376007                    ANQ     63,DL
         3 000751   000020 116007                    CMPQ    16,DL
         3 000752   000773 603000 3                  TRC     s:3755

      420     3749    4           THEN DO;

      421     3750    4              TRANSFER_SIZE = MINIMUM (USERCTX.LFCNT, BUFREM);

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:61   
   3750  3 000753   200043 116100                    CMPQ    BUFREM,,AUTO
         3 000754   000757 602000 3                  TNC     s:3750+4
         3 000755   000757 600000 3                  TZE     s:3750+4
         3 000756   200043 236100                    LDQ     BUFREM,,AUTO
         3 000757   200007 756100                    STQ     TRANSFER_SIZE,,AUTO

      422     3751    4              BUF$ -> BASED_STRING = LFS;

   3751  3 000760   200041 471500                    LDP1    @BUF$,,AUTO
         3 000761   100000 473500                    LDP3    0,,PR1
         3 000762   000000 620006                    EAX0    0,QL
         3 000763   040140 100400                    MLR     fill='040'O
         3 000764   000103 000020 2                  ADSC9   LFS_INIT                 cn=0,n=16
         3 000765   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0

      423     3752    4              USERCTX.LFCNT = USERCTX.LFCNT - TRANSFER_SIZE;

   3752  3 000766   000015 236100                    LDQ     13,,PR0
         3 000767   000077 376007                    ANQ     63,DL
         3 000770   200007 136100                    SBLQ    TRANSFER_SIZE,,AUTO
         3 000771   000015 752101                    STCQ    13,'01'O,PR0

      424     3753    4              END;

   3753  3 000772   001013 710000 3                  TRA     s:3761

      425     3754    4           ELSE DO; /* not LFs: LFCNT=16 : VFC='P'=FF, LFCNT=32 : VFC='`'=CR */

      426     3755    4              IF USERCTX.LFCNT = 16

   3755  3 000773   001002 601000 3                  TNZ     s:3757

      427     3756    4              THEN BUF$ -> BUFCHAR = BINASC(12); /* FF char */

   3756  3 000774   200041 471500                    LDP1    @BUF$,,AUTO
         3 000775   100000 473500                    LDP3    0,,PR1
         3 000776   040100 100400                    MLR     fill='040'O
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:62   
         3 000777   000002 000001 4                  ADSC9   2                        cn=0,n=1
         3 001000   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         3 001001   001007 710000 3                  TRA     s:3758

      428     3757    4              ELSE BUF$ -> BUFCHAR = BINASC(13); /* CR char */

   3757  3 001002   200041 471500                    LDP1    @BUF$,,AUTO
         3 001003   100000 473500                    LDP3    0,,PR1
         3 001004   040100 100400                    MLR     fill='040'O
         3 001005   000003 000001 4                  ADSC9   3                        cn=0,n=1
         3 001006   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1

      429     3758    4              TRANSFER_SIZE = 1;

   3758  3 001007   000001 236007                    LDQ     1,DL
         3 001010   200007 756100                    STQ     TRANSFER_SIZE,,AUTO

      430     3759    4              USERCTX.LFCNT = 0;

   3759  3 001011   000000 236003                    LDQ     0,DU
         3 001012   000015 752101                    STCQ    13,'01'O,PR0

      431     3760    4              END;

      432     3761    3           BUF$ = PINCRC (BUF$, TRANSFER_SIZE);

   3761  3 001013   100000 473500                    LDP3    0,,PR1
         3 001014   200007 236100                    LDQ     TRANSFER_SIZE,,AUTO
         3 001015   000011 402007                    MPY     9,DL
         3 001016   300000 503506                    ABD     0,QL,PR3
         3 001017   100000 453500                    STP3    0,,PR1

      433     3762    3           BUFREM = BUFREM - TRANSFER_SIZE;

   3762  3 001020   200043 236100                    LDQ     BUFREM,,AUTO
         3 001021   200007 136100                    SBLQ    TRANSFER_SIZE,,AUTO
         3 001022   200043 756100                    STQ     BUFREM,,AUTO
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:63   

      434     3763    3           END;                  /* LFCNT > 0 */

   3762  3 001023                       REACHED_EOF  null
      435     3764
      436     3765    2   REACHED_EOF:;
      437     3766    2        USERCTX.ARS# = BUFL - BUFREM;

   3766  3 001023   200042 470500                    LDP0    @BUFL,,AUTO
         3 001024   000000 236100                    LDQ     0,,PR0
         3 001025   200043 136100                    SBLQ    BUFREM,,AUTO
         3 001026   200015 471500                    LDP1    UCTX$,,AUTO
         3 001027   100016 756100                    STQ     14,,PR1

      438     3767    2        BUFL = BUFREM;

   3767  3 001030   200043 235100                    LDA     BUFREM,,AUTO
         3 001031   000000 755100                    STA     0,,PR0

      439     3768    2        FILECTX.CHUNK = FILECTX.CHUNK + USERCTX.ARS#;

   3768  3 001032   200016 473500                    LDP3    FCTX$,,AUTO
         3 001033   300015 236100                    LDQ     13,,PR3
         3 001034   777777 376007                    ANQ     -1,DL
         3 001035   100016 036100                    ADLQ    14,,PR1
         3 001036   000000 620006                    EAX0    0,QL
         3 001037   300015 440100                    SXL0    13,,PR3

      440     3769    2        FILECTX.FOFFSET = FILECTX.FOFFSET + USERCTX.ARS#;

   3769  3 001040   300055 236100                    LDQ     45,,PR3
         3 001041   100016 036100                    ADLQ    14,,PR1
         3 001042   300055 756100                    STQ     45,,PR3

      441     3770    2        IF USERCTX.ARS# = 0      /* must have reached EOF */

   3770  3 001043   100016 235100                    LDA     14,,PR1
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:64   
         3 001044   001061 601000 3                  TNZ     s:3776

      442     3771    3        THEN DO;

      443     3772             /* we now know the true file file, so use it in the future. */
      444     3773    3           CALL XSL$HTONL(FILECTX.FATTR.SIZE, FILECTX.FOFFSET);

   3773  3 001045   200016 236100                    LDQ     FCTX$,,AUTO
         3 001046   000055 036003                    ADLQ    45,DU
         3 001047   200053 756100                    STQ     TMP+3,,AUTO
         3 001050   200016 236100                    LDQ     FCTX$,,AUTO
         3 001051   000023 036003                    ADLQ    19,DU
         3 001052   200052 756100                    STQ     TMP+2,,AUTO
         3 001053   200052 630500                    EPPR0   TMP+2,,AUTO
         3 001054   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001055   000000 701000 xent               TSX1    XSL$HTONL
         3 001056   000000 011000                    NOP     0

      445     3774    3           ALTRETURN;

   3774  3 001057   200040 221300                    LDX1  ! REC_POS+2,,AUTO
         3 001060   000000 702211                    TSX2  ! 0,X1

      446     3775    3           END;
      447     3776    2        RETURN;

   3776  3 001061   200040 221300                    LDX1  ! REC_POS+2,,AUTO
         3 001062   000001 702211                    TSX2  ! 1,X1

      448     3777
      449     3778    2   END READAREC;
      450     3779
      451     3780        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:65   
      452     3781        /*I*  NAME:    UPDATECACHE
      453     3782              Purpose: To update the USERCTX.FILEPOS cache with the file position in
      454     3783                       FILECTX.
      455     3784              Inputs:  FILECTX - positioned at the beginning of a CP-6 record.
      456     3785              Outputs: USERCTX.FILEPOS - cache updated.
      457     3786              Algorithm: What we want is to have a cache full of entries which will
      458     3787                       allow for quick access to the file at intervals of 4096 bytes
      459     3788                       (size of a granule).  So ideally, we'd want one cache entry
      460     3789                       for each CP-6 record that is right before each 4096 bytes of
      461     3790                       data.  So we want to maintain this system here.
      462     3791        */
      463     3792    1   UPDATECACHE: PROC;

   3792  3 001063   200044 741300       UPDATECACHE  STX1  ! BUFREM+1,,AUTO

      464     3793
      465     3794    2   DCL I SBIN;
      466     3795    2   DCL MAXVAL SBIN;
      467     3796    2   DCL MAXI SBIN;
      468     3797    2   DCL TMP SBIN;
      469     3798
      470     3799    2        IF FILECTX.FOFFSET_.GRAN ~= USERCTX.FILEPOS.FOFFSET_.GRAN(LASTI)

   3799  3 001064   200026 235100                    LDA     LASTI,,AUTO
         3 001065   000001 735000                    ALS     1
         3 001066   200015 470500                    LDP0    UCTX$,,AUTO
         3 001067   000000 620005                    EAX0    0,AL
         3 001070   200016 471500                    LDP1    FCTX$,,AUTO
         3 001071   100055 236100                    LDQ     45,,PR1
         3 001072   000021 676110                    ERQ     17,X0,PR0
         3 001073   000004 376000 4                  ANQ     4
         3 001074   001156 600000 3                  TZE     FOUND_LASTI

      471     3800    3        THEN DO;

      472     3801    4           DO LASTI = 0 TO %CACHESZ-1; /* look for entry in the same granule */

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:66   
   3801  3 001075   200026 450100                    STZ     LASTI,,AUTO
         3 001076   001111 710000 3                  TRA     s:3805+1

      473     3802    4              IF FILECTX.FOFFSET_.GRAN = USERCTX.FILEPOS.FOFFSET_.GRAN(LASTI)

   3802  3 001077   200026 235100                    LDA     LASTI,,AUTO
         3 001100   000001 735000                    ALS     1
         3 001101   200015 470500                    LDP0    UCTX$,,AUTO
         3 001102   000000 620005                    EAX0    0,AL
         3 001103   200016 471500                    LDP1    FCTX$,,AUTO
         3 001104   100055 236100                    LDQ     45,,PR1
         3 001105   000021 676110                    ERQ     17,X0,PR0
         3 001106   000004 376000 4                  ANQ     4
         3 001107   001156 600000 3                  TZE     FOUND_LASTI

      474     3803    4              THEN
      475     3804    4                 GOTO FOUND_LASTI;
      476     3805    4              END;               /* do LASTI = */

   3805  3 001110   200026 054100                    AOS     LASTI,,AUTO
         3 001111   200026 235100                    LDA     LASTI,,AUTO
         3 001112   000011 115007                    CMPA    9,DL
         3 001113   001077 604400 3                  TMOZ    s:3802

      477     3806    3           MAXI = 0;

   3806  3 001114   200047 450100                    STZ     MAXI,,AUTO

      478     3807    3           MAXVAL = 0;

   3807  3 001115   200046 450100                    STZ     MAXVAL,,AUTO

      479     3808    4           DO LASTI = 0 TO %CACHESZ-1; /* look for a cache entry to use */

   3808  3 001116   200026 450100                    STZ     LASTI,,AUTO
         3 001117   001151 710000 3                  TRA     s:3817+1

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:67   
      480     3809    4              IF USERCTX.FILEPOS.FOFFSET(LASTI) = 0 THEN GOTO FOUND_LASTI;

   3809  3 001120   200026 235100                    LDA     LASTI,,AUTO
         3 001121   000001 735000                    ALS     1
         3 001122   200015 470500                    LDP0    UCTX$,,AUTO
         3 001123   000021 235105                    LDA     17,AL,PR0
         3 001124   001156 600000 3                  TZE     FOUND_LASTI

      481     3810    4              TMP = FILECTX.FOFFSET_.GRAN - USERCTX.FILEPOS.FOFFSET_.GRAN(LASTI);

   3810  3 001125   200026 235100                    LDA     LASTI,,AUTO
         3 001126   000001 735000                    ALS     1
         3 001127   000021 236105                    LDQ     17,AL,PR0
         3 001130   000014 772000                    QRL     12
         3 001131   200052 756100                    STQ     TMP+2,,AUTO
         3 001132   200016 471500                    LDP1    FCTX$,,AUTO
         3 001133   100055 236100                    LDQ     45,,PR1
         3 001134   000014 772000                    QRL     12
         3 001135   200052 136100                    SBLQ    TMP+2,,AUTO
         3 001136   200050 756100                    STQ     TMP,,AUTO

      482     3811    4              IF TMP < 0 THEN TMP = -TMP; /* get absolute value of TMP     */

   3811  3 001137   001142 605000 3                  TPL     s:3812

   3811  3 001140   200050 335100                    LCA     TMP,,AUTO
         3 001141   200050 755100                    STA     TMP,,AUTO

      483     3812    4              IF TMP > MAXVAL

   3812  3 001142   200050 236100                    LDQ     TMP,,AUTO
         3 001143   200046 116100                    CMPQ    MAXVAL,,AUTO
         3 001144   001150 604400 3                  TMOZ    s:3817

      484     3813    5              THEN DO;

      485     3814    5                 MAXVAL = TMP;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:68   

   3814  3 001145   200046 756100                    STQ     MAXVAL,,AUTO

      486     3815    5                 MAXI = LASTI;

   3815  3 001146   200026 235100                    LDA     LASTI,,AUTO
         3 001147   200047 755100                    STA     MAXI,,AUTO

      487     3816    5                 END;

      488     3817    4              END;               /* do LASTI = */

   3817  3 001150   200026 054100                    AOS     LASTI,,AUTO
         3 001151   200026 235100                    LDA     LASTI,,AUTO
         3 001152   000011 115007                    CMPA    9,DL
         3 001153   001120 604400 3                  TMOZ    s:3809

      489     3818    3           LASTI = MAXI;

   3818  3 001154   200047 236100                    LDQ     MAXI,,AUTO
         3 001155   200026 756100                    STQ     LASTI,,AUTO

      490     3819    3           END;

      491     3820
      492     3821    2   FOUND_LASTI:
      493     3822    2        USERCTX.FILEPOS.FOFFSET(LASTI) = FILECTX.FOFFSET;

   3822  3 001156   200026 235100       FOUND_LASTI  LDA     LASTI,,AUTO
         3 001157   000001 735000                    ALS     1
         3 001160   200016 471500                    LDP1    FCTX$,,AUTO
         3 001161   000000 620005                    EAX0    0,AL
         3 001162   100055 235100                    LDA     45,,PR1
         3 001163   000021 755110                    STA     17,X0,PR0

      494     3823    2        USERCTX.FILEPOS.CRECNO(LASTI) = FILECTX.CRECNO;

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:69   
   3823  3 001164   100014 235100                    LDA     12,,PR1
         3 001165   000020 755110                    STA     16,X0,PR0

      495     3824
      496     3825    2   END UPDATECACHE;

   3825  3 001166   200044 221300                    LDX1  ! BUFREM+1,,AUTO
         3 001167   000001 702211                    TSX2  ! 1,X1

      497     3826
      498     3827        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:70   
      499     3828        /*I*  NAME:    FUI$WRRQS
      500     3829              Purpose: To write this user's data into a file.
      501     3830              Inputs:  STARTBYTE - the byte offset into the file to start writing to.
      502     3831              Outputs: OBLOCK$ - points to after the last byte written.
      503     3832                       SIZEBYTES - the number of bytes to write to the file.
      504     3833                       OBLOCK$ - points to the bytes to write.
      505     3834              Algorithm:
      506     3835                       For text files (any file other than a C-library binary file):
      507     3836                         Position into the file, if we end up at the middle of a record,
      508     3837                         then we have to append to that record, and rewrite that record.
      509     3838                         Then we start writing out records to the file.  To make a
      510     3839                         record, we look for a LF, CR, or FF (maximum record size we
      511     3840                         want is 4095 bytes (4096 including CR, LF or FF) - 1 page.
      512     3841                         Write out this block with the appropriate VFC (to indicate CR,
      513     3842                         LF, or FF).
      514     3843                       For binary files:
      515     3844                         Remember we're writing on the 1024-byte block boundaries, if
      516     3845                         we've got a partial record, then we have to read a block, put
      517     3846                         in the user data, and rewrite it.  Otherwise we can just write
      518     3847                         out the block directly to the user file.
      519     3848        */
      520     3849
      521     3850    1   FUI$WRRQS: PROC;

   3850  3 001170   200030 741300       FUI$WRRQS    STX1  ! LASTI+2,,AUTO

      522     3851
      523     3852                                 /* if this block is being retransmitted
      524     3853                                      and isn't at the current write point
      525     3854                                      ignore it, as I'm not as stupid as
      526     3855                                      NFS or dog-slow networks */
      527     3856
      528     3857    2        IF REQUEST.CALLHDR.REXMIT.F AND FU$WRITEARGS.OFFSET < FILECTX.FATTR.SIZE

   3857  3 001171   200003 470500                    LDP0    @REQUEST,,AUTO
         3 001172   000013 234100                    SZN     11,,PR0
         3 001173   001201 605000 3                  TPL     s:3861
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:71   
         3 001174   200014 471500                    LDP1    BODY$,,AUTO
         3 001175   200016 473500                    LDP3    FCTX$,,AUTO
         3 001176   100011 236100                    LDQ     9,,PR1
         3 001177   300023 116100                    CMPQ    19,,PR3
         3 001200   001745 602000 3                  TNC     OK_RETURN

      529     3858    2        THEN
      530     3859    2           GOTO OK_RETURN;       /* return just as if we did it */
      531     3860
      532     3861    2        STARTBYTE_SAVE = STARTBYTE;

   3861  3 001201   200023 235100                    LDA     STARTBYTE,,AUTO
         3 001202   200022 755100                    STA     STARTBYTE_SAVE,,AUTO

      533     3862
      534     3863                            /* split up the processing here for text or
      535     3864                                 binary handling, since they're so
      536     3865                                 different */
      537     3866    2        IF FILECTX.FATTR.XATTR.TEXTMODE = %FALSE#

   3866  3 001203   200016 471500                    LDP1    FCTX$,,AUTO
         3 001204   100017 234100                    SZN     15,,PR1
         3 001205   001554 605000 3                  TPL     BINARY_HANDLING

      538     3867    2        THEN
      539     3868    2           GOTO BINARY_HANDLING;
      540     3869
      541     3870        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:72   
      542     3871        /* TEXT HANDLING - this code is used for writing text files - any CP-6 file
      543     3872           with ORG=CONSEC or ORG=UR, and expanded records <= 4096 bytes.
      544     3873        */
      545     3874
      546     3875    2        POSITION_BACK.V.DCB# = FILECTX.DCB#;

   3875  3 001206   100012 220100                    LDX0    10,,PR1
         3 001207   000106 740000 1                  STX0    POSITION_BACK+6

      547     3876    2        WRITE_USER_REC.V.DCB# = FILECTX.DCB#;

   3876  3 001210   100012 222100                    LDX2    10,,PR1
         3 001211   000044 742000 1                  STX2    WRITE_USER_REC+8

      548     3877    2        WRITE_VFC_REC.V.DCB# = FILECTX.DCB#;

   3877  3 001212   100012 223100                    LDX3    10,,PR1
         3 001213   000060 743000 1                  STX3    WRITE_VFC_REC+8

      549     3878
      550     3879                                      /* call the read routine to make sure
      551     3880                                             we are where we wanted to be */
      552     3881
      553     3882    2        IF USERCTX.BUF$ = ADDR(NIL) THEN CALL FUI$MEMALLOC (USERCTX.BUF$);

   3882  3 001214   200015 473500                    LDP3    UCTX$,,AUTO
         3 001215   300017 236100                    LDQ     15,,PR3
         3 001216   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001217   001227 601000 3                  TNZ     s:3884

   3882  3 001220   200015 236100                    LDQ     UCTX$,,AUTO
         3 001221   000017 036003                    ADLQ    15,DU
         3 001222   200052 756100                    STQ     TMP+2,,AUTO
         3 001223   200052 630500                    EPPR0   TMP+2,,AUTO
         3 001224   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001225   000000 701000 xent               TSX1    FUI$MEMALLOC
         3 001226   000000 011000                    NOP     0
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:73   

      554     3883
      555     3884    2        CALL POSITION_FILE ALTRET( WRITE_ERR); /* if past EOF - bad write */

   3884  3 001227   000423 701000 3                  TSX1    POSITION_FILE
         3 001230   001544 702000 3                  TSX2    WRITE_ERR

      556     3885
      557     3886    2        IF NOT USERDCB.TYC.LD#

   3886  3 001231   200017 470500                    LDP0    USERDCB$,,AUTO
         3 001232   000002 236100                    LDQ     2,,PR0
         3 001233   002000 316003                    CANQ    1024,DU
         3 001234   001271 601000 3                  TNZ     s:3903
         3 001235   200015 471500                    LDP1    UCTX$,,AUTO
         3 001236   100015 236100                    LDQ     13,,PR1
         3 001237   000077 316007                    CANQ    63,DL
         3 001240   001271 601000 3                  TNZ     s:3903
         3 001241   100016 235100                    LDA     14,,PR1
         3 001242   001256 600000 3                  TZE     s:3886+21
         3 001243   100017 473500                    LDP3    15,,PR1
         3 001244   000100 101505                    MRL     fill='000'O
         3 001245   377777 600001                    ADSC9   -1,A,PR3                 cn=3,n=1
         3 001246   200052 000004                    ADSC9   TMP+2,,AUTO              cn=0,n=4
         3 001247   200052 236100                    LDQ     TMP+2,,AUTO
         3 001250   000100 101406                    MRL     fill='000'O
         3 001251   000000 000001 2                  ADSC9   FIND_LF_CR_FF,Q          cn=0,n=1
         3 001252   200053 000004                    ADSC9   TMP+3,,AUTO              cn=0,n=4
         3 001253   200053 236100                    LDQ     TMP+3,,AUTO
         3 001254   000000 116003                    CMPQ    0,DU
         3 001255   001263 601000 3                  TNZ     s:3895
         3 001256   100016 235100                    LDA     14,,PR1
         3 001257   010000 115007                    CMPA    4096,DL
         3 001260   001263 600000 3                  TZE     s:3895
         3 001261   200023 236100                    LDQ     STARTBYTE,,AUTO
         3 001262   001271 601000 3                  TNZ     s:3903

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:74   
      558     3887    2           AND USERCTX.LFCNT = 0
      559     3888    2           AND ((USERCTX.ARS# > 0
      560     3889    2           AND FIND_LF_CR_FF( USERCTX.BUF$->BUFU( USERCTX.ARS#-1 )) ~= 0)
      561     3890    2           OR USERCTX.ARS# = 4096
      562     3891    2           OR STARTBYTE = 0)
      563     3892    3        THEN DO;

      564     3893             /* Repositioning left us at the beginning of a record, just
      565     3894                start dumping complete records at this point. */
      566     3895    3           RECSTART = 0;

   3895  3 001263   200010 450100                    STZ     RECSTART,,AUTO

      567     3896    3           FILECTX.CRECNO = FILECTX.CRECNO + 1;

   3896  3 001264   200016 473500                    LDP3    FCTX$,,AUTO
         3 001265   300014 235100                    LDA     12,,PR3
         3 001266   000001 035007                    ADLA    1,DL
         3 001267   300014 755100                    STA     12,,PR3

      568     3897    3           END;

   3897  3 001270   001310 710000 3                  TRA     s:3913

      569     3898    3        ELSE DO;

      570     3899             /* Repositioning left us with a partially filled record in
      571     3900                the buffer, tack onto the existant partial record in the
      572     3901                buffer and rewrite it. */
      573     3902
      574     3903    3           IF FILECTX.CHUNK > USERCTX.ARS# /* rewriting in a too BIG record */

   3903  3 001271   200015 471500                    LDP1    UCTX$,,AUTO
         3 001272   200016 473500                    LDP3    FCTX$,,AUTO
         3 001273   300015 236100                    LDQ     13,,PR3
         3 001274   777777 376007                    ANQ     -1,DL
         3 001275   100016 116100                    CMPQ    14,,PR1
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:75   
         3 001276   001300 600000 3                  TZE     s:3907
         3 001277   001544 603000 3                  TRC     WRITE_ERR

      575     3904    3           THEN                  /* ... wasn't written by NFS */
      576     3905    3              GOTO WRITE_ERR;
      577     3906
      578     3907    3           CALL M$PRECORD (POSITION_BACK);

   3907  3 001300   000100 630400 1                  EPPR0   POSITION_BACK
         3 001301   040003 713400                    CLIMB   16387
         3 001302   401000 401760                    pmme    nvectors=3

      579     3908
      580     3909    3           RECSTART = USERCTX.ARS#;

   3909  3 001303   200015 470500                    LDP0    UCTX$,,AUTO
         3 001304   000016 235100                    LDA     14,,PR0
         3 001305   200010 755100                    STA     RECSTART,,AUTO

      581     3910    3           USERCTX.LFCNT = 0;

   3910  3 001306   000000 236003                    LDQ     0,DU
         3 001307   000015 752101                    STCQ    13,'01'O,PR0

      582     3911    3           END;        /* do if partial record already in buffer */

      583     3912
      584     3913    3        DO WHILE (SIZEBYTES > 0); /* dump the NFSblock into file */

   3913  3 001310   200024 235100                    LDA     SIZEBYTES,,AUTO
         3 001311   001475 604400 3                  TMOZ    s:3963

      585     3914
      586     3915    3           IF USERCTX.BUF$ = ADDR(NIL) THEN CALL FUI$MEMALLOC (USERCTX.BUF$);

   3915  3 001312   200015 470500                    LDP0    UCTX$,,AUTO
         3 001313   000017 236100                    LDQ     15,,PR0
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:76   
         3 001314   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001315   001325 601000 3                  TNZ     s:3917

   3915  3 001316   200015 236100                    LDQ     UCTX$,,AUTO
         3 001317   000017 036003                    ADLQ    15,DU
         3 001320   200052 756100                    STQ     TMP+2,,AUTO
         3 001321   200052 630500                    EPPR0   TMP+2,,AUTO
         3 001322   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001323   000000 701000 xent               TSX1    FUI$MEMALLOC
         3 001324   000000 011000                    NOP     0

      587     3916
      588     3917    3           NBYTES = MINIMUM (SIZEBYTES, %(FUI_CHUNKSIZE-1)-RECSTART);

   3917  3 001325   007777 236007                    LDQ     4095,DL
         3 001326   200010 136100                    SBLQ    RECSTART,,AUTO
         3 001327   200024 116100                    CMPQ    SIZEBYTES,,AUTO
         3 001330   001332 604400 3                  TMOZ    s:3917+5
         3 001331   200024 236100                    LDQ     SIZEBYTES,,AUTO
         3 001332   200006 756100                    STQ     NBYTES,,AUTO

      589     3918
      590     3919    3           CALL SEARCH (NBYTES, FOUND, FIND_LF_CR_FF, OBLOCK$->BUF_TEMPLATE)

   3919  3 001333   200012 470500                    LDP0    OBLOCK$,,AUTO
         3 001334   000000 620006                    EAX0    0,QL
         3 001335   000000 164540                    TCT
         3 001336   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         3 001337   000000 000000 2                  ARG     FIND_LF_CR_FF
         3 001340   200006 000100                    ARG     NBYTES,,AUTO
         3 001341   200006 235100                    LDA     NBYTES,,AUTO
         3 001342   000033 771000                    ARL     27
         3 001343   200025 755100                    STA     FOUND,,AUTO
         3 001344   200006 551140                    STBA    NBYTES,'40'O,AUTO
         3 001345   001376 606400 3                  TTN     s:3933

      591     3920    4           WHENRETURN DO;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:77   

      592     3921    4              TRANSFER_SIZE = NBYTES + 1; /* data + SIZEC( LF ) */

   3921  3 001346   200006 236100                    LDQ     NBYTES,,AUTO
         3 001347   000001 036007                    ADLQ    1,DL
         3 001350   200007 756100                    STQ     TRANSFER_SIZE,,AUTO

      593     3922    5              DO CASE( FOUND);

   3922  3 001351   000004 115007                    CMPA    4,DL
         3 001352   001354 602005 3                  TNC     s:3922+3,AL
         3 001353   001375 710000 3                  TRA     s:3931
         3 001354   001375 710000 3                  TRA     s:3931
         3 001355   001375 710000 3                  TRA     s:3931
         3 001356   001360 710000 3                  TRA     s:3925
         3 001357   001367 710000 3                  TRA     s:3928

      594     3923    5              CASE( 1);          /* LF - don't output a vfc char */

      595     3924    5              CASE( 2);          /* CR */

      596     3925    5                 WRITE_VFC_REC.BUF_ = VECTOR( VFC_CR);

   3925  3 001360   000006 237000 4                  LDAQ    6
         3 001361   000054 757000 1                  STAQ    WRITE_VFC_REC+4

      597     3926    5                 CALL M$WRITE( WRITE_VFC_REC) ALTRET( WRITE_ERR);

   3926  3 001362   000050 630400 1                  EPPR0   WRITE_VFC_REC
         3 001363   440001 713400                    CLIMB   alt,write
         3 001364   401400 401760                    pmme    nvectors=4
         3 001365   001544 702000 3                  TSX2    WRITE_ERR
         3 001366   001375 710000 3                  TRA     s:3931

      598     3927    5              CASE( 3);          /* FF */

      599     3928    5                 WRITE_VFC_REC.BUF_ = VECTOR( VFC_FF);
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:78   

   3928  3 001367   000010 237000 4                  LDAQ    8
         3 001370   000054 757000 1                  STAQ    WRITE_VFC_REC+4

      600     3929    5                 CALL M$WRITE( WRITE_VFC_REC) ALTRET( WRITE_ERR);

   3929  3 001371   000050 630400 1                  EPPR0   WRITE_VFC_REC
         3 001372   440001 713400                    CLIMB   alt,write
         3 001373   401400 401760                    pmme    nvectors=4
         3 001374   001544 702000 3                  TSX2    WRITE_ERR

      601     3930    5              END;               /* case */

      602     3931    4              END;

   3931  3 001375   001406 710000 3                  TRA     s:3938

      603     3932    4           WHENALTRETURN DO;

      604     3933    4              TRANSFER_SIZE = NBYTES; /* no LF, CR or FF found */

   3933  3 001376   200006 235100                    LDA     NBYTES,,AUTO
         3 001377   200007 755100                    STA     TRANSFER_SIZE,,AUTO

      605     3934    4              WRITE_VFC_REC.BUF_ = VECTOR( VFC_NONE);

   3934  3 001400   000012 237000 4                  LDAQ    10
         3 001401   000054 757000 1                  STAQ    WRITE_VFC_REC+4

      606     3935    4              CALL M$WRITE( WRITE_VFC_REC) ALTRET( WRITE_ERR);

   3935  3 001402   000050 630400 1                  EPPR0   WRITE_VFC_REC
         3 001403   440001 713400                    CLIMB   alt,write
         3 001404   401400 401760                    pmme    nvectors=4
         3 001405   001544 702000 3                  TSX2    WRITE_ERR

      607     3936    4              END;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:79   

      608     3937
      609     3938    3           PINCRC(USERCTX.BUF$,RECSTART)->BASED_STRING = OBLOCK$->BASED_STRING;

   3938  3 001406   200015 470500                    LDP0    UCTX$,,AUTO
         3 001407   000017 471500                    LDP1    15,,PR0
         3 001410   200012 473500                    LDP3    OBLOCK$,,AUTO
         3 001411   200007 720100                    LXL0    TRANSFER_SIZE,,AUTO
         3 001412   200010 235100                    LDA     RECSTART,,AUTO
         3 001413   040145 100540                    MLR     fill='040'O
         3 001414   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         3 001415   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0

      610     3939    3           USERCTX.ARS# = TRANSFER_SIZE + RECSTART;

   3939  3 001416   200007 236100                    LDQ     TRANSFER_SIZE,,AUTO
         3 001417   200010 036100                    ADLQ    RECSTART,,AUTO
         3 001420   000016 756100                    STQ     14,,PR0

      611     3940    3           NBYTES = NBYTES + RECSTART;

   3940  3 001421   200006 236100                    LDQ     NBYTES,,AUTO
         3 001422   200010 036100                    ADLQ    RECSTART,,AUTO
         3 001423   200006 756100                    STQ     NBYTES,,AUTO

      612     3941
      613     3942                                 /* Rewrite the modified record with the
      614     3943                                    appropriate VFC character. */
      615     3944
      616     3945    3           IF NBYTES > 0

   3945  3 001424   001435 604400 3                  TMOZ    s:3947

      617     3946    3           THEN WRITE_USER_REC.BUF_ = VECTOR (USERCTX.BUF$->BUF_TEMPLATE);

   3946  3 001425   000017 471500                    LDP1    15,,PR0
         3 001426   200006 235100                    LDA     NBYTES,,AUTO
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:80   
         3 001427   000020 735000                    ALS     16
         3 001430   000140 135007                    SBLA    96,DL
         3 001431   200052 451500                    STP1    TMP+2,,AUTO
         3 001432   200052 236100                    LDQ     TMP+2,,AUTO
         3 001433   000040 757000 1                  STAQ    WRITE_USER_REC+4
         3 001434   001437 710000 3                  TRA     s:3948

      618     3947    3           ELSE WRITE_USER_REC.BUF_ = VECTOR (NIL);

   3947  3 001435   000014 237000 4                  LDAQ    12
         3 001436   000040 757000 1                  STAQ    WRITE_USER_REC+4

      619     3948    3           CALL M$WRITE(WRITE_USER_REC) ALTRET(WRITE_ERR);

   3948  3 001437   000034 630400 1                  EPPR0   WRITE_USER_REC
         3 001440   440001 713400                    CLIMB   alt,write
         3 001441   401400 401760                    pmme    nvectors=4
         3 001442   001544 702000 3                  TSX2    WRITE_ERR

      620     3949
      621     3950    3           RECSTART = 0;

   3950  3 001443   200010 450100                    STZ     RECSTART,,AUTO

      622     3951    3           OBLOCK$ = PINCRC (OBLOCK$, TRANSFER_SIZE);

   3951  3 001444   200007 236100                    LDQ     TRANSFER_SIZE,,AUTO
         3 001445   000020 736000                    QLS     16
         3 001446   200012 036100                    ADLQ    OBLOCK$,,AUTO
         3 001447   200012 756100                    STQ     OBLOCK$,,AUTO

      623     3952    3           SIZEBYTES = SIZEBYTES - TRANSFER_SIZE;

   3952  3 001450   200024 236100                    LDQ     SIZEBYTES,,AUTO
         3 001451   200007 136100                    SBLQ    TRANSFER_SIZE,,AUTO
         3 001452   200024 756100                    STQ     SIZEBYTES,,AUTO

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:81   
      624     3953    3           FILECTX.FOFFSET = FILECTX.FOFFSET + TRANSFER_SIZE;

   3953  3 001453   200016 470500                    LDP0    FCTX$,,AUTO
         3 001454   000055 236100                    LDQ     45,,PR0
         3 001455   200007 036100                    ADLQ    TRANSFER_SIZE,,AUTO
         3 001456   000055 756100                    STQ     45,,PR0

      625     3954    3           FILECTX.CRECNO = FILECTX.CRECNO + 1;

   3954  3 001457   000014 235100                    LDA     12,,PR0
         3 001460   000001 035007                    ADLA    1,DL
         3 001461   000014 755100                    STA     12,,PR0

      626     3955    3           FILECTX.CHUNK = 0;

   3955  3 001462   000000 220003                    LDX0    0,DU
         3 001463   000015 440100                    SXL0    13,,PR0

      627     3956    3           IF FOUND ~= 0 OR NBYTES >= 4095

   3956  3 001464   200025 235100                    LDA     FOUND,,AUTO
         3 001465   001471 601000 3                  TNZ     s:3958
         3 001466   200006 235100                    LDA     NBYTES,,AUTO
         3 001467   007777 115007                    CMPA    4095,DL
         3 001470   001473 604000 3                  TMI     s:3960

      628     3957    3           THEN /* save next record position if it's not complete. */
      629     3958    3              CALL UPDATECACHE;

   3958  3 001471   001063 701000 3                  TSX1    UPDATECACHE
         3 001472   000000 011000                    NOP     0

      630     3959
      631     3960    3           END;                  /* do while SIZEBYTES > 0 */

   3960  3 001473   200024 235100                    LDA     SIZEBYTES,,AUTO
         3 001474   001312 605400 3                  TPNZ    s:3915
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:82   

      632     3961
      633     3962         /* Trash any saved file positions after this insertion point */
      634     3963    2        UCTX$ = FILECTX.UCTX$;

   3963  3 001475   200016 470500                    LDP0    FCTX$,,AUTO
         3 001476   000001 236100                    LDQ     1,,PR0
         3 001477   200015 756100                    STQ     UCTX$,,AUTO

      635     3964    3        DO UNTIL UCTX$ = ADDR(NIL);

      636     3965    4           DO FOUND = 0 TO %CACHESZ-1;

   3965  3 001500   200025 450100                    STZ     FOUND,,AUTO
         3 001501   001514 710000 3                  TRA     s:3968+1

      637     3966    4              IF USERCTX.FILEPOS.FOFFSET(FOUND) > STARTBYTE_SAVE

   3966  3 001502   200025 235100                    LDA     FOUND,,AUTO
         3 001503   000001 735000                    ALS     1
         3 001504   200015 470500                    LDP0    UCTX$,,AUTO
         3 001505   000021 236105                    LDQ     17,AL,PR0
         3 001506   001511 604000 3                  TMI     s:3967
         3 001507   200022 116100                    CMPQ    STARTBYTE_SAVE,,AUTO
         3 001510   001513 604400 3                  TMOZ    s:3968

      638     3967    4              THEN USERCTX.FILEPOS(FOUND) = '0'B;

   3967  3 001511   000020 450105                    STZ     16,AL,PR0
         3 001512   000021 450105                    STZ     17,AL,PR0

      639     3968    4              END;

   3968  3 001513   200025 054100                    AOS     FOUND,,AUTO
         3 001514   200025 235100                    LDA     FOUND,,AUTO
         3 001515   000011 115007                    CMPA    9,DL
         3 001516   001502 604400 3                  TMOZ    s:3966
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:83   

      640     3969    3           UCTX$ = USERCTX.FLNK$;

   3969  3 001517   200015 470500                    LDP0    UCTX$,,AUTO
         3 001520   000002 236100                    LDQ     2,,PR0
         3 001521   200015 756100                    STQ     UCTX$,,AUTO

      641     3970    3           END;

   3970  3 001522   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001523   001500 601000 3                  TNZ     s:3965

      642     3971    2        UCTX$ = REQUEST.UCTX$;

   3971  3 001524   200003 470500                    LDP0    @REQUEST,,AUTO
         3 001525   000004 236100                    LDQ     4,,PR0
         3 001526   200015 756100                    STQ     UCTX$,,AUTO

      643     3972
      644     3973    2        CALL XSL$HTONL(FILECTX.FATTR.SIZE, FILECTX.FOFFSET);

   3973  3 001527   200016 236100                    LDQ     FCTX$,,AUTO
         3 001530   000055 036003                    ADLQ    45,DU
         3 001531   200053 756100                    STQ     TMP+3,,AUTO
         3 001532   200016 236100                    LDQ     FCTX$,,AUTO
         3 001533   000023 036003                    ADLQ    19,DU
         3 001534   200052 756100                    STQ     TMP+2,,AUTO
         3 001535   200052 630500                    EPPR0   TMP+2,,AUTO
         3 001536   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001537   000000 701000 xent               TSX1    XSL$HTONL
         3 001540   000000 011000                    NOP     0

      645     3974    2        USERCTX.ARS# = 0;

   3974  3 001541   200015 470500                    LDP0    UCTX$,,AUTO
         3 001542   000016 450100                    STZ     14,,PR0

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:84   
      646     3975
      647     3976    2        GOTO OK_RETURN; /* now we can return with a successful status */

   3976  3 001543   001745 710000 3                  TRA     OK_RETURN

      648     3977
      649     3978    2   WRITE_ERR:
      650     3979    2        REQUEST.LEN = 32 /* RPC HEAD */+ SIZEC(FU$ATTRSTAT.STAT);

   3979  3 001544   000044 235007       WRITE_ERR    LDA     36,DL
         3 001545   200003 470500                    LDP0    @REQUEST,,AUTO
         3 001546   000002 755100                    STA     2,,PR0

      651     3980    2        FU$ATTRSTAT.STAT = %NFSERR_IO;

   3980  3 001547   000005 236007                    LDQ     5,DL
         3 001550   200021 471500                    LDP1    RESULT$,,AUTO
         3 001551   100000 756100                    STQ     0,,PR1

      652     3981    2        RETURN;

   3981  3 001552   200030 221300                    LDX1  ! LASTI+2,,AUTO
         3 001553   000001 702211                    TSX2  ! 1,X1

   3980  3 001554                       BINARY_HAND* null
      653     3982
      654     3983        %EJECT;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:85   
      655     3984        /* BINARY_HANDLING - this code is used for writing binary files.  The
      656     3985            only files that NFS treats as binary files are the C library
      657     3986            binary file formats with 1024 byte records.
      658     3987        */
      659     3988    2   BINARY_HANDLING: ;
      660     3989                                 /* go get a file buffer for this guy if he
      661     3990                                      doesn't have one yet */
      662     3991    2        IF USERCTX.BUF$ = ADDR(NIL)

   3991  3 001554   200015 473500                    LDP3    UCTX$,,AUTO
         3 001555   300017 236100                    LDQ     15,,PR3
         3 001556   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001557   001567 601000 3                  TNZ     s:3996

      663     3992    2        THEN
      664     3993    2           CALL FUI$MEMALLOC (USERCTX.BUF$);

   3993  3 001560   200015 236100                    LDQ     UCTX$,,AUTO
         3 001561   000017 036003                    ADLQ    15,DU
         3 001562   200052 756100                    STQ     TMP+2,,AUTO
         3 001563   200052 630500                    EPPR0   TMP+2,,AUTO
         3 001564   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001565   000000 701000 xent               TSX1    FUI$MEMALLOC
         3 001566   000000 011000                    NOP     0

      665     3994
      666     3995                                      /* initialize the FPTs for PMMEs */
      667     3996    2        READ_KEYED_REC.V.DCB# = FILECTX.DCB#;

   3996  3 001567   200016 470500                    LDP0    FCTX$,,AUTO
         3 001570   000012 220100                    LDX0    10,,PR0
         3 001571   000026 740000 1                  STX0    READ_KEYED_REC+8

      668     3997    2        WRITE_KEYED_REC.V.DCB# = FILECTX.DCB#;

   3997  3 001572   000012 221100                    LDX1    10,,PR0
         3 001573   000074 741000 1                  STX1    WRITE_KEYED_REC+8
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:86   

      669     3998    2        READ_KEYED_REC.BUF_ = VECTOR (USERCTX.BUF$ -> BINARY_BLOCK);

   3998  3 001574   200015 471500                    LDP1    UCTX$,,AUTO
         3 001575   100017 473500                    LDP3    15,,PR1
         3 001576   000001 235000 4                  LDA     1
         3 001577   200052 453500                    STP3    TMP+2,,AUTO
         3 001600   200052 236100                    LDQ     TMP+2,,AUTO
         3 001601   000022 757000 1                  STAQ    READ_KEYED_REC+4

      670     3999
      671     4000    3        DO WHILE (SIZEBYTES > 0);

   4000  3 001602   200024 235100                    LDA     SIZEBYTES,,AUTO
         3 001603   001726 604400 3                  TMOZ    s:4041

      672     4001                                      /* setup the binary file read key */
      673     4002    3           FILE_KEY.VALUE_ = (STARTBYTE/1024)+1;

   4002  3 001604   200023 236100                    LDQ     STARTBYTE,,AUTO
         3 001605   000012 772000                    QRL     10
         3 001606   000001 036007                    ADLQ    1,DL
         3 001607   000142 552034 1                  STBQ    FILE_KEY,'34'O

      674     4003    3           FILE_KEY.COUNT_ = 3;

   4003  3 001610   003000 236003                    LDQ     1536,DU
         3 001611   000142 552040 1                  STBQ    FILE_KEY,'40'O

      675     4004    3           LFINDX = MOD(STARTBYTE,1024);

   4004  3 001612   200023 236100                    LDQ     STARTBYTE,,AUTO
         3 001613   001777 376007                    ANQ     1023,DL
         3 001614   200004 756100                    STQ     LFINDX,,AUTO

      676     4005
      677     4006    3           IF LFINDX ~= 0 OR SIZEBYTES < 1024
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:87   

   4006  3 001615   001621 601000 3                  TNZ     s:4009
         3 001616   200024 235100                    LDA     SIZEBYTES,,AUTO
         3 001617   002000 115007                    CMPA    1024,DL
         3 001620   001702 605000 3                  TPL     s:4029

      678     4007    4           THEN DO; /* If starting/ending in the middle of a record, read first */

      679     4008
      680     4009    4              RECLEN = 0;

   4009  3 001621   200005 450100                    STZ     RECLEN,,AUTO

      681     4010    4              CALL M$READ (READ_KEYED_REC)

   4010  3 001622   000016 630400 1                  EPPR0   READ_KEYED_REC
         3 001623   440000 713400                    CLIMB   alt,read
         3 001624   401400 401760                    pmme    nvectors=4
         3 001625   001631 702000 3                  TSX2    s:4014

      682     4011    5              WHENRETURN DO;

      683     4012    5                 RECLEN = USERDCB.ARS#;

   4012  3 001626   200017 470500                    LDP0    USERDCB$,,AUTO
         3 001627   000000 235100                    LDA     0,,PR0
         3 001630   200005 755100                    STA     RECLEN,,AUTO

      684     4013    5                 END;

      685     4014    4              IF RECLEN < LFINDX

   4014  3 001631   200005 236100                    LDQ     RECLEN,,AUTO
         3 001632   200004 116100                    CMPQ    LFINDX,,AUTO
         3 001633   001646 605000 3                  TPL     s:4020

      686     4015    5              THEN DO;
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:88   

      687     4016    5                 NBYTES = LFINDX - RECLEN;

   4016  3 001634   200004 236100                    LDQ     LFINDX,,AUTO
         3 001635   200005 136100                    SBLQ    RECLEN,,AUTO
         3 001636   200006 756100                    STQ     NBYTES,,AUTO

      688     4017    5                 PINCRC (USERCTX.BUF$, RECLEN)->BASED_STRUCT = '0'B;

   4017  3 001637   200015 470500                    LDP0    UCTX$,,AUTO
         3 001640   000017 471500                    LDP1    15,,PR0
         3 001641   000000 620006                    EAX0    0,QL
         3 001642   200005 235100                    LDA     RECLEN,,AUTO
         3 001643   000145 100400                    MLR     fill='000'O
         3 001644   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 001645   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0

      689     4018    5                 END;

      690     4019
      691     4020    4              NBYTES = MINIMUM (SIZEBYTES, 1024-LFINDX);

   4020  3 001646   002000 236007                    LDQ     1024,DL
         3 001647   200004 136100                    SBLQ    LFINDX,,AUTO
         3 001650   200024 116100                    CMPQ    SIZEBYTES,,AUTO
         3 001651   001653 604400 3                  TMOZ    s:4020+5
         3 001652   200024 236100                    LDQ     SIZEBYTES,,AUTO
         3 001653   200006 756100                    STQ     NBYTES,,AUTO

      692     4021
      693     4022    4              PINCRC (USERCTX.BUF$, LFINDX)->BUF_TEMPLATE = OBLOCK$->BUF_TEMPLATE;

   4022  3 001654   200015 470500                    LDP0    UCTX$,,AUTO
         3 001655   000017 471500                    LDP1    15,,PR0
         3 001656   200012 473500                    LDP3    OBLOCK$,,AUTO
         3 001657   000000 620006                    EAX0    0,QL
         3 001660   200006 721100                    LXL1    NBYTES,,AUTO
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:89   
         3 001661   200004 235100                    LDA     LFINDX,,AUTO
         3 001662   040145 100540                    MLR     fill='040'O
         3 001663   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         3 001664   100000 000011                    ADSC9   0,A,PR1                  cn=0,n=*X1

      694     4023
      695     4024    4              WRITE_KEYED_REC.BUF_.BUF$ = USERCTX.BUF$;

   4024  3 001665   000017 236100                    LDQ     15,,PR0
         3 001666   000071 756000 1                  STQ     WRITE_KEYED_REC+5

      696     4025    4              WRITE_KEYED_REC.BUF_.BOUND = MAXIMUM( RECLEN, LFINDX + NBYTES) - 1;

   4025  3 001667   200004 236100                    LDQ     LFINDX,,AUTO
         3 001670   200006 036100                    ADLQ    NBYTES,,AUTO
         3 001671   200005 116100                    CMPQ    RECLEN,,AUTO
         3 001672   001674 605000 3                  TPL     s:4025+5
         3 001673   200005 236100                    LDQ     RECLEN,,AUTO
         3 001674   000001 136007                    SBLQ    1,DL
         3 001675   000020 736000                    QLS     16
         3 001676   000070 676000 1                  ERQ     WRITE_KEYED_REC+4
         3 001677   000034 376000 xsym               ANQ     B_VECTNIL+28
         3 001700   000070 656000 1                  ERSQ    WRITE_KEYED_REC+4

      697     4026    4              END;

   4026  3 001701   001707 710000 3                  TRA     s:4033

      698     4027
      699     4028    4           ELSE DO;         /* LFINDX = O AND SIZEBYTES >= 1024 */

      700     4029    4              WRITE_KEYED_REC.BUF_ = VECTOR (OBLOCK$ -> BINARY_BLOCK);

   4029  3 001702   000001 235000 4                  LDA     1
         3 001703   200012 236100                    LDQ     OBLOCK$,,AUTO
         3 001704   000070 757000 1                  STAQ    WRITE_KEYED_REC+4

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:90   
      701     4030    4              NBYTES = 1024;

   4030  3 001705   002000 235007                    LDA     1024,DL
         3 001706   200006 755100                    STA     NBYTES,,AUTO

      702     4031    4              END;

      703     4032
      704     4033    3           CALL M$WRITE (WRITE_KEYED_REC) ALTRET(WRITE_ERR);

   4033  3 001707   000064 630400 1                  EPPR0   WRITE_KEYED_REC
         3 001710   440001 713400                    CLIMB   alt,write
         3 001711   401400 401760                    pmme    nvectors=4
         3 001712   001544 702000 3                  TSX2    WRITE_ERR

      705     4034
      706     4035    3           OBLOCK$ = PINCRC(OBLOCK$,NBYTES);

   4035  3 001713   200006 236100                    LDQ     NBYTES,,AUTO
         3 001714   000020 736000                    QLS     16
         3 001715   200012 036100                    ADLQ    OBLOCK$,,AUTO
         3 001716   200012 756100                    STQ     OBLOCK$,,AUTO

      707     4036    3           STARTBYTE = STARTBYTE + NBYTES;

   4036  3 001717   200023 236100                    LDQ     STARTBYTE,,AUTO
         3 001720   200006 036100                    ADLQ    NBYTES,,AUTO
         3 001721   200023 756100                    STQ     STARTBYTE,,AUTO

      708     4037    3           SIZEBYTES = SIZEBYTES - NBYTES;

   4037  3 001722   200024 236100                    LDQ     SIZEBYTES,,AUTO
         3 001723   200006 136100                    SBLQ    NBYTES,,AUTO
         3 001724   200024 756100                    STQ     SIZEBYTES,,AUTO

      709     4038
      710     4039    3           END;                  /* do while SIZEBYTES > 0 */
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:91   

   4039  3 001725   001604 605400 3                  TPNZ    s:4002

      711     4040
      712     4041    2        CALL XSL$HTONL (NBYTES, STARTBYTE);

   4041  3 001726   200023 630500                    EPPR0   STARTBYTE,,AUTO
         3 001727   200053 450500                    STP0    TMP+3,,AUTO
         3 001730   200006 631500                    EPPR1   NBYTES,,AUTO
         3 001731   200052 451500                    STP1    TMP+2,,AUTO
         3 001732   200052 630500                    EPPR0   TMP+2,,AUTO
         3 001733   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001734   000000 701000 xent               TSX1    XSL$HTONL
         3 001735   000000 011000                    NOP     0

      713     4042    2        FILECTX.FATTR.SIZE = MAXIMUM (NBYTES, FILECTX.FATTR.SIZE);

   4042  3 001736   200016 470500                    LDP0    FCTX$,,AUTO
         3 001737   000023 236100                    LDQ     19,,PR0
         3 001740   001744 604000 3                  TMI     s:4042+6
         3 001741   200006 116100                    CMPQ    NBYTES,,AUTO
         3 001742   001744 605000 3                  TPL     s:4042+6
         3 001743   200006 236100                    LDQ     NBYTES,,AUTO
         3 001744   000023 756100                    STQ     19,,PR0

   4042  3 001745                       OK_RETURN    null
      714     4043
      715     4044    2   OK_RETURN:;
      716     4045    2        REQUEST.LEN = 32 /* RPC HEAD */+ SIZEC(FU$ATTRSTAT);

   4045  3 001745   000150 235007                    LDA     104,DL
         3 001746   200003 470500                    LDP0    @REQUEST,,AUTO
         3 001747   000002 755100                    STA     2,,PR0

      717     4046
      718     4047    2        FU$ATTRSTAT.STAT = %NFS_OK;

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:92   
   4047  3 001750   200021 471500                    LDP1    RESULT$,,AUTO
         3 001751   100000 450100                    STZ     0,,PR1

      719     4048    2        FU$ATTRSTAT.FATTR = FILECTX.FATTR;

   4048  3 001752   200016 473500                    LDP3    FCTX$,,AUTO
         3 001753   000100 100500                    MLR     fill='000'O
         3 001754   300016 000104                    ADSC9   14,,PR3                  cn=0,n=68
         3 001755   100001 000104                    ADSC9   1,,PR1                   cn=0,n=68

      720     4049    2        FU$ATTRSTAT.FATTR.XATTR = '0'B;

   4049  3 001756   000000 220003                    LDX0    0,DU
         3 001757   100002 740100                    STX0    2,,PR1

      721     4050    2        RETURN;

   4050  3 001760   200030 221300                    LDX1  ! LASTI+2,,AUTO
         3 001761   000001 702211                    TSX2  ! 1,X1
      722     4051
      723     4052    2   END FUI$WRRQS;
      724     4053
      725     4054    1   END FUI$IORQS;
      726     4055        %EOD;

PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:93   
--  Include file information  --

   FU_NFSSUBS_C.:FUA2TOU  is referenced.
   FU_NFS_M.:FUA2TOU  is referenced.
   XSL_SOCKET_M.:LIBRARY  is referenced.
   B_ERRORS_C.:E05OU  is referenced.
   CP_6.:E05OU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FUI$IORQS.
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:94   

 **** Variables and constants ****

  ****  Section 001  Data  FUI$IORQS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   142-0-0/c STRC        r     1 FILE_KEY                 100-0-0/d STRC(360)   r     1 POSITION_BACK
   112-0-0/d STRC(360)   r     1 POSITION_BINARY          156-0-0/d STRC(144)   r     1 POSITION_BOF
   144-0-0/d STRC(360)   r     1 POSITION_REC              16-0-0/d STRC(504)   r     1 READ_KEYED_REC
   124-0-0/d STRC(504)   r     1 READ_NEXT_KEYED_REC        0-0-0/d STRC(504)   r     1 READ_USER_REC
    64-0-0/d STRC(432)   r     1 WRITE_KEYED_REC           34-0-0/d STRC(432)   r     1 WRITE_USER_REC
    50-0-0/d STRC(432)   r     1 WRITE_VFC_REC

  ****  Section 002 RoData FUI$IORQS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c UBIN(9)     r     1 FIND_LF_CR_FF(0:255)
   103-0-0/c CHAR(16)    r     1 LFS
   103-0-0/c CHAR        r     1 LFS_INIT(0:15)
   101-0-0/c CHAR        r     1 VFC_CR                   102-0-0/c CHAR        r     1 VFC_FF
   100-0-0/c CHAR        r     1 VFC_NONE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    41-0-0/w PTR         r     1 @BUF$                     42-0-0/w PTR         r     1 @BUFL
     3-0-0/w PTR         r     1 @REQUEST                  14-0-0/w PTR         r     1 BODY$
    20-0-0/w PTR         r     1 BUF$                      *0-0-0/w PTR         r     1 BUF$
    *0-0-0/w UBIN        r     1 BUFL                      43-0-0/w UBIN        r     1 BUFREM
    16-0-0/w PTR         r     1 FCTX$                     25-0-0/w SBIN        r     1 FOUND
    33-0-0/w SBIN        r     1 I                         26-0-0/w SBIN        r     1 LASTI
     4-0-0/w SBIN        r     1 LFINDX                    34-0-0/w UBIN        r     1 MAX
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:95   
    35-0-0/w UBIN        r     1 MAXI                      47-0-0/w SBIN        r     1 MAXI
    46-0-0/w SBIN        r     1 MAXVAL                     6-0-0/w SBIN        r     1 NBYTES
    12-0-0/w PTR         r     1 OBLOCK$                   13-0-0/w PTR         r     1 OBLOCKI$
     5-0-0/w SBIN        r     1 RECLEN                    10-0-0/w UBIN        r     1 RECSTART
    36-0-0/w UBIN        r     1 REC_POS                   *0-0-0/w STRC(74556) r     1 REQUEST
    21-0-0/w PTR         r     1 RESULT$                   24-0-0/w SBIN        r     1 SIZEBYTES
    23-0-0/w UBIN        r     1 STARTBYTE                 22-0-0/w SBIN        r     1 STARTBYTE_SAVE
    50-0-0/w SBIN        r     1 TMP                        7-0-0/w UBIN        r     1 TRANSFER_SIZE
    15-0-0/w PTR         r     1 UCTX$                     17-0-0/w PTR         r     1 USERDCB$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/c ACHR        r     1 BASED_STRING               0-0-0/c ASTR(0)     r     1 BASED_STRUCT
     0-0-0/c STRC(9216)  r     1 BINARY_BLOCK               0-0-0/c CHAR        r     1 BUFCHAR
     0-0-0/c UBIN(9)     r     1 BUFU(0:0)                  0-0-0/c ACHR        r     1 BUF_TEMPLATE
     0-0-0/w STRC(1656)  r     1 FILECTX                    0-0-0/w STRC(648)   r     1 FU$ATTRSTAT
     0-0-0/w STRC(396)   r     1 FU$READARGS                0-0-0/w ASTR(684)   r     1 FU$READRES
     0-0-0/w ASTR(432)   r     1 FU$WRITEARGS               0-0-0/w STRC(1296)  r     1 USERCTX
     0-0-0/d ASTR(3528)  r     1 USERDCB


   Procedure FUI$IORQS requires 1010 words for executable code.
   Procedure FUI$IORQS requires 48 words of local(AUTO) storage.
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:96   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:97   
          MINI XREF LISTING

ALL_DONE IN PROCEDURE FUI$RDRQS
      3548**LABEL    3505--CALLALT  3508--CALLALT  3511--GOTO     3528--CALLALT
B$ALT.CODE
      3098**DCL      3098--REDEF    3099--REDEF    3099--REDEF
B$ALT.ERR.CODE
      3100**DCL      3725>>IF
B$ALT.ERR.ERR#
      3100**DCL      3100--REDEF
B$ALT.EVID
      3099**DCL      3099--REDEF    3099--REDEF
B$TCB.ALT$
      3094**DCL      3725>>IF
B$TCB$
      3034**DCL      3725>>IF
BASED_STRING
      3392**DCL      3751<<ASSIGN   3938<<ASSIGN   3938>>ASSIGN
BASED_STRUCT
      3393**DCL      3532<<ASSIGN   4017<<ASSIGN
BINARY_BLOCK
      3396**DCL      3521--ASSIGN   3998--ASSIGN   4029--ASSIGN
BINARY_HANDLING IN PROCEDURE FUI$RDRQS
      3508**LABEL    3499--GOTO
BINARY_HANDLING IN PROCEDURE FUI$WRRQS
      3980**LABEL    3868--GOTO
BODY$
      3402**DCL      2857--IMP-PTR  2899--IMP-PTR  3433<<ASSIGN   3442>>CALL     3443>>CALL     3453>>CALL
      3454>>CALL     3455>>ASSIGN   3458>>CALL     3857>>IF
BUF$
      3406**DCL      3665<<ASSIGN   3666<>CALL
BUF$ IN PROCEDURE READAREC
      3701**DCL      3699--PROC     3716>>ASSIGN   3741<<ASSIGN   3741>>ASSIGN   3751>>ASSIGN   3756>>ASSIGN
      3757>>ASSIGN   3761<<ASSIGN   3761>>ASSIGN
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:98   
BUFCHAR IN PROCEDURE READAREC
      3705**DCL      3756<<ASSIGN   3757<<ASSIGN
BUFL IN PROCEDURE READAREC
      3702**DCL      3699--PROC     3710>>ASSIGN   3766>>ASSIGN   3767<<ASSIGN
BUFREM IN PROCEDURE READAREC
      3704**DCL      3710<<ASSIGN   3717>>ASSIGN   3742<<ASSIGN   3742>>ASSIGN   3745>>IF       3750>>ASSIGN
      3762<<ASSIGN   3762>>ASSIGN   3766>>ASSIGN   3767>>ASSIGN
BUFU
      3398**DCL      3886>>IF
BUF_TEMPLATE
      3395**DCL      3542<<ASSIGN   3542>>ASSIGN   3919>>CALLBLT  3946--ASSIGN   4022<<ASSIGN   4022>>ASSIGN
FCTX$
      3404**DCL      2754--IMP-PTR  3432<<ASSIGN   3434>>ASSIGN   3497>>IF       3520>>ASSIGN   3522>>ASSIGN
      3548>>ASSIGN   3548>>ASSIGN   3555>>ASSIGN   3623>>IF       3641>>ASSIGN   3644>>ASSIGN   3645>>ASSIGN
      3650>>ASSIGN   3655>>ASSIGN   3656>>ASSIGN   3660>>ASSIGN   3663>>DOWHILE  3666>>CALL     3715>>ASSIGN
      3730>>ASSIGN   3730>>ASSIGN   3731>>ASSIGN   3768>>ASSIGN   3768>>ASSIGN   3769>>ASSIGN   3769>>ASSIGN
      3773>>CALL     3773>>CALL     3799>>IF       3802>>IF       3810>>ASSIGN   3822>>ASSIGN   3823>>ASSIGN
      3857>>IF       3866>>IF       3875>>ASSIGN   3876>>ASSIGN   3877>>ASSIGN   3896>>ASSIGN   3896>>ASSIGN
      3903>>IF       3953>>ASSIGN   3953>>ASSIGN   3954>>ASSIGN   3954>>ASSIGN   3955>>ASSIGN   3963>>ASSIGN
      3973>>CALL     3973>>CALL     3996>>ASSIGN   3997>>ASSIGN   4042>>ASSIGN   4042>>ASSIGN   4048>>ASSIGN
FILECTX.CHUNK
      2783**DCL      3660<<ASSIGN   3731<<ASSIGN   3768<<ASSIGN   3768>>ASSIGN   3903>>IF       3955<<ASSIGN
FILECTX.CRECNO
      2781**DCL      3644<<ASSIGN   3655<<ASSIGN   3730<<ASSIGN   3730>>ASSIGN   3823>>ASSIGN   3896<<ASSIGN
      3896>>ASSIGN   3954<<ASSIGN   3954>>ASSIGN
FILECTX.DCB#
      2781**DCL      3434--ASSIGN   3520>>ASSIGN   3522>>ASSIGN   3641>>ASSIGN   3650>>ASSIGN   3715>>ASSIGN
      3875>>ASSIGN   3876>>ASSIGN   3877>>ASSIGN   3996>>ASSIGN   3997>>ASSIGN
FILECTX.FATTR
      2800**DCL      3555>>ASSIGN   4048>>ASSIGN
FILECTX.FATTR.SIZE
      2808**DCL      3548<<ASSIGN   3548>>ASSIGN   3773<>CALL     3857>>IF       3973<>CALL     4042<<ASSIGN
      4042>>ASSIGN
FILECTX.FATTR.XATTR.TEXTMODE
      2802**DCL      3497>>IF       3866>>IF
FILECTX.FID.ASN
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:99   
      2832**DCL      2833--REDEF
FILECTX.FOFFSET
      2841**DCL      2841--REDEF    3623>>IF       3645<<ASSIGN   3656<<ASSIGN   3663>>DOWHILE  3666>>CALL
      3769<<ASSIGN   3769>>ASSIGN   3773<>CALL     3822>>ASSIGN   3953<<ASSIGN   3953>>ASSIGN   3973<>CALL
FILECTX.FOFFSET_.GRAN
      2841**DCL      3799>>IF       3802>>IF       3810>>ASSIGN
FILECTX.UCTX$
      2758**DCL      3963>>ASSIGN
FILE_KEY
      3409**DCL      3167--DCLINIT  3168--DCLINIT  3274--DCLINIT  3325--DCLINIT  3326--DCLINIT  3355--DCLINIT
      3356--DCLINIT
FILE_KEY.COUNT_
      3410**DCL      3524<<ASSIGN   4003<<ASSIGN
FILE_KEY.VALUE_
      3411**DCL      3523<<ASSIGN   3529>>ASSIGN   4002<<ASSIGN
FIND_LF_CR_FF
      3421**DCL      3886>>IF       3919>>CALLBLT
FOUND
      3416**DCL      3919<<CALLBLT  3922>>DOCASE   3956>>IF       3965<<DOINDEX  3966>>IF       3967>>ASSIGN
FOUND_LASTI IN PROCEDURE UPDATECACHE
      3822**LABEL    3804--GOTO     3809--GOTO
FROM_BOF IN PROCEDURE POSITION_FILE
      3645**LABEL    3620--GOTO     3643--CALLALT
FU$ATTRSTAT
      2942**DCL      4045--ASSIGN
FU$ATTRSTAT.FATTR
      2964**DCL      4048<<ASSIGN
FU$ATTRSTAT.FATTR.XATTR
      2966**DCL      4049<<ASSIGN
FU$ATTRSTAT.STAT
      2947**DCL      3979--ASSIGN   3980<<ASSIGN   4047<<ASSIGN
FU$READARGS.COUNT
      2883**DCL      3443<>CALL
FU$READARGS.OFFSET
      2883**DCL      3442<>CALL
FU$READRES
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:100  
      2993**DCL      3554--ASSIGN
FU$READRES.COUNT
      3029**DCL      3029--IMP-SIZ  3448<>CALL     3553<<ASSIGN   3554>>ASSIGN
FU$READRES.DATA
      3029**DCL      3444--ASSIGN   3489--ASSIGN
FU$READRES.FATTR
      3015**DCL      3555<<ASSIGN
FU$READRES.FATTR.XATTR
      3017**DCL      3556<<ASSIGN
FU$READRES.STAT
      2997**DCL      3557<<ASSIGN
FU$WRITEARGS.COUNT
      2925**DCL      2926--IMP-SIZ  3454<>CALL     3458<>CALL
FU$WRITEARGS.DATA
      2926**DCL      3455--ASSIGN
FU$WRITEARGS.OFFSET
      2925**DCL      3453<>CALL     3857>>IF
FUI$MEMALLOC
      3380**DCL-ENT  3519--CALL     3664--CALL     3882--CALL     3915--CALL     3993--CALL
FUI$RDRQS
      3487**PROC     3446--CALL
FUI$WRRQS
      3850**PROC     3457--CALL
I IN PROCEDURE POSITION_FILE
      3576**DCL      3630<<DOINDEX  3631>>ASSIGN   3635>>ASSIGN
LASTI
      3417**DCL      3436<<ASSIGN   3799>>IF       3801<<DOINDEX  3802>>IF       3808<<DOINDEX  3809>>IF
      3810>>ASSIGN   3815>>ASSIGN   3818<<ASSIGN   3822>>ASSIGN   3823>>ASSIGN
LFINDX
      3386**DCL      4004<<ASSIGN   4006>>IF       4014>>IF       4016>>ASSIGN   4020>>ASSIGN   4022>>ASSIGN
      4025>>ASSIGN
LFS IN PROCEDURE READAREC
      3708**DCL      3751>>ASSIGN
LFS_INIT IN PROCEDURE READAREC
      3707**DCL      3708--REDEF
M$PFIL
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:101  
        32**DCL-ENT  3651--CALL
M$PRECORD
        34**DCL-ENT  3525--CALL     3643--CALL     3907--CALL
M$READ
        31**DCL-ENT  3528--CALL     3722--CALL     4010--CALL
M$WRITE
        31**DCL-ENT  3926--CALL     3929--CALL     3935--CALL     3948--CALL     4033--CALL
MAX IN PROCEDURE POSITION_FILE
      3577**DCL      3629<<ASSIGN   3632>>IF       3634<<ASSIGN   3639>>IF
MAXI IN PROCEDURE POSITION_FILE
      3578**DCL      3635<<ASSIGN   3642>>ASSIGN   3644>>ASSIGN   3645>>ASSIGN
MAXI IN PROCEDURE UPDATECACHE
      3796**DCL      3806<<ASSIGN   3815<<ASSIGN   3818>>ASSIGN
MAXVAL IN PROCEDURE UPDATECACHE
      3795**DCL      3807<<ASSIGN   3812>>IF       3814<<ASSIGN
NBYTES
      3388**DCL      3394--IMP-SIZ  3395--IMP-SIZ  3529<<ASSIGN   3530>>IF       3532>>ASSIGN   3533>>ASSIGN
      3534>>ASSIGN   3535>>ASSIGN   3536<<ASSIGN   3538>>ASSIGN   3539<<ASSIGN   3540>>IF       3542>>ASSIGN
      3542>>ASSIGN   3543>>ASSIGN   3544>>ASSIGN   3545>>ASSIGN   3547<>CALL     3548>>ASSIGN   3917<<ASSIGN
      3919<<CALLBLT  3919>>CALLBLT  3921>>ASSIGN   3933>>ASSIGN   3940<<ASSIGN   3940>>ASSIGN   3945>>IF
      3946>>ASSIGN   3956>>IF       4016<<ASSIGN   4017>>ASSIGN   4020<<ASSIGN   4022>>ASSIGN   4022>>ASSIGN
      4025>>ASSIGN   4030<<ASSIGN   4035>>ASSIGN   4036>>ASSIGN   4037>>ASSIGN   4041<>CALL     4042>>ASSIGN
OBLOCK$
      3400**DCL      3444<<ASSIGN   3445>>ASSIGN   3448>>CALL     3455<<ASSIGN   3456>>ASSIGN   3458>>CALL
      3490<<ASSIGN   3508<>CALL     3532>>ASSIGN   3533<<ASSIGN   3533>>ASSIGN   3542>>ASSIGN   3543<<ASSIGN
      3543>>ASSIGN   3553>>ASSIGN   3919>>CALLBLT  3938>>ASSIGN   3951<<ASSIGN   3951>>ASSIGN   4022>>ASSIGN
      4029>>ASSIGN   4035<<ASSIGN   4035>>ASSIGN
OBLOCKI$
      3401**DCL      3445<<ASSIGN   3448>>CALL     3456<<ASSIGN   3458>>CALL     3489<<ASSIGN   3490>>ASSIGN
      3553>>ASSIGN
OK_RETURN IN PROCEDURE FUI$WRRQS
      4042**LABEL    3859--GOTO     3976--GOTO
POSITION_BACK
      3301**DCL      3907<>CALL
POSITION_BACK.V
      3303**DCL      3301--DCLINIT
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:102  
POSITION_BACK.V.DCB#
      3303**DCL      3875<<ASSIGN
POSITION_BINARY
      3325**DCL      3525<>CALL
POSITION_BINARY.V
      3327**DCL      3325--DCLINIT
POSITION_BINARY.V.DCB#
      3327**DCL      3522<<ASSIGN
POSITION_BOF IN PROCEDURE POSITION_FILE
      3615**DCL      3651<>CALL
POSITION_BOF.V IN PROCEDURE POSITION_FILE
      3615**DCL      3615--DCLINIT
POSITION_BOF.V.DCB# IN PROCEDURE POSITION_FILE
      3615**DCL      3650<<ASSIGN
POSITION_FILE
      3574**PROC     3505--CALL     3884--CALL
POSITION_REC IN PROCEDURE POSITION_FILE
      3593**DCL      3643<>CALL
POSITION_REC.V IN PROCEDURE POSITION_FILE
      3595**DCL      3593--DCLINIT
POSITION_REC.V.DCB# IN PROCEDURE POSITION_FILE
      3595**DCL      3641<<ASSIGN
POSITION_REC.V.N# IN PROCEDURE POSITION_FILE
      3599**DCL      3642<<ASSIGN
REACHED_EOF IN PROCEDURE READAREC
      3762**LABEL    3725--GOTO
READAREC
      3699**PROC     3508--CALL     3666--CALL
READ_KEYED_REC
      3167**DCL      4010<>CALL
READ_KEYED_REC.BUF_
      3169**DCL      3998<<ASSIGN
READ_KEYED_REC.STATION_
      3170**DCL      3171--REDEF
READ_KEYED_REC.V
      3171**DCL      3167--DCLINIT
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:103  
READ_KEYED_REC.V.DCB#
      3171**DCL      3996<<ASSIGN
READ_KEYED_REC.V.DVBYTE.REREAD#
      3182**DCL      3182--REDEF
READ_KEYED_REC.V.INDX#
      3180**DCL      3180--REDEF
READ_NEXT_KEYED_REC
      3355**DCL      3528<>CALL
READ_NEXT_KEYED_REC.BUF_
      3357**DCL      3521<<ASSIGN
READ_NEXT_KEYED_REC.STATION_
      3358**DCL      3359--REDEF
READ_NEXT_KEYED_REC.V
      3359**DCL      3355--DCLINIT
READ_NEXT_KEYED_REC.V.DCB#
      3359**DCL      3520<<ASSIGN
READ_NEXT_KEYED_REC.V.DVBYTE.REREAD#
      3370**DCL      3370--REDEF
READ_NEXT_KEYED_REC.V.INDX#
      3368**DCL      3368--REDEF
READ_USER_REC
      3125**DCL      3722<>CALL
READ_USER_REC.BUF_.BOUND
      3127**DCL      3717<<ASSIGN
READ_USER_REC.BUF_.BUF$
      3128**DCL      3716<<ASSIGN
READ_USER_REC.STATION_
      3128**DCL      3129--REDEF
READ_USER_REC.V
      3129**DCL      3125--DCLINIT
READ_USER_REC.V.DCB#
      3129**DCL      3715<<ASSIGN
READ_USER_REC.V.DVBYTE.CONT#
      3142**DCL      3720<<ASSIGN   3728>>IF
READ_USER_REC.V.DVBYTE.REREAD#
      3140**DCL      3140--REDEF
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:104  
READ_USER_REC.V.INDX#
      3138**DCL      3138--REDEF
RECLEN
      3387**DCL      4009<<ASSIGN   4012<<ASSIGN   4014>>IF       4016>>ASSIGN   4017>>ASSIGN   4025>>ASSIGN
RECSTART
      3390**DCL      3538<<ASSIGN   3539>>ASSIGN   3542>>ASSIGN   3895<<ASSIGN   3909<<ASSIGN   3917>>ASSIGN
      3938>>ASSIGN   3939>>ASSIGN   3940>>ASSIGN   3950<<ASSIGN
REC_POS IN PROCEDURE POSITION_FILE
      3579**DCL      3631<<ASSIGN   3632>>IF       3632>>IF       3634>>ASSIGN
REQUEST
      2603**DCL        19--PROC
REQUEST.BODY$
      2607**DCL      3433>>ASSIGN
REQUEST.CALLHDR
      2664**DCL      2669--REDEF
REQUEST.CALLHDR.AUTH_CRED
      2666**DCL      2668--REDEF
REQUEST.CALLHDR.REXMIT.F
      2664**DCL      3857>>IF
REQUEST.CALLHDR.XID
      2664**DCL      2664--REDEF
REQUEST.LEN
      2607**DCL      3554<<ASSIGN   3979<<ASSIGN   4045<<ASSIGN
REQUEST.PROC#
      2608**DCL      3438>>DOCASE   3623>>IF
REQUEST.REPLYHDR.AUTH_VERF_HID
      2673**DCL      2673--REDEF    2673--REDEF
REQUEST.REPLYHDR.PVERS_HIGH
      2675**DCL      2675--REDEF
REQUEST.REPLYHDR.PVERS_LOW
      2674**DCL      2674--REDEF    2675--REDEF
REQUEST.REPLYHDR.REJECT_STAT
      2670**DCL      2670--REDEF    2671--REDEF
REQUEST.REPLYHDR.RESULTS
      2674**DCL      3435--ASSIGN
REQUEST.REPLYHDR.VERS_HIGH
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:105  
      2672**DCL      2672--REDEF    2672--REDEF
REQUEST.REPLYHDR.VERS_LOW
      2671**DCL      2671--REDEF    2672--REDEF
REQUEST.UCTX$
      2608**DCL      3431>>ASSIGN   3971>>ASSIGN
RESULT$
      3407**DCL      2942--IMP-PTR  2993--IMP-PTR  3435<<ASSIGN   3444>>ASSIGN   3448>>CALL     3489>>ASSIGN
      3553>>ASSIGN   3554>>ASSIGN   3554>>ASSIGN   3555>>ASSIGN   3556>>ASSIGN   3557>>ASSIGN   3980>>ASSIGN
      4047>>ASSIGN   4048>>ASSIGN   4049>>ASSIGN
SIZEBYTES
      3415**DCL      3443<>CALL     3454<>CALL     3507>>DOUNTIL  3508<>CALL     3527>>DOWHILE  3529>>ASSIGN
      3535<<ASSIGN   3535>>ASSIGN   3539>>ASSIGN   3545<<ASSIGN   3545>>ASSIGN   3913>>DOWHILE  3917>>ASSIGN
      3952<<ASSIGN   3952>>ASSIGN   4000>>DOWHILE  4006>>IF       4020>>ASSIGN   4037<<ASSIGN   4037>>ASSIGN
STARTBYTE
      3414**DCL      3442<>CALL     3453<>CALL     3523>>ASSIGN   3529>>ASSIGN   3534<<ASSIGN   3534>>ASSIGN
      3544<<ASSIGN   3544>>ASSIGN   3547<>CALL     3620>>IF       3623>>IF       3632>>IF       3663>>DOWHILE
      3666>>CALL     3861>>ASSIGN   3886>>IF       4002>>ASSIGN   4004>>ASSIGN   4036<<ASSIGN   4036>>ASSIGN
      4041<>CALL
STARTBYTE_SAVE
      3413**DCL      3861<<ASSIGN   3966>>IF
TMP IN PROCEDURE UPDATECACHE
      3797**DCL      3810<<ASSIGN   3811>>IF       3811<<ASSIGN   3811>>ASSIGN   3812>>IF       3814>>ASSIGN
TRANSFER_SIZE
      3389**DCL      3392--IMP-SIZ  3750<<ASSIGN   3751>>ASSIGN   3752>>ASSIGN   3758<<ASSIGN   3761>>ASSIGN
      3762>>ASSIGN   3921<<ASSIGN   3933<<ASSIGN   3938>>ASSIGN   3938>>ASSIGN   3939>>ASSIGN   3951>>ASSIGN
      3952>>ASSIGN   3953>>ASSIGN
UCTX$
      3403**DCL      2702--IMP-PTR  3431<<ASSIGN   3432>>ASSIGN   3519>>IF       3519>>CALL     3521>>ASSIGN
      3542>>ASSIGN   3631>>ASSIGN   3642>>ASSIGN   3644>>ASSIGN   3645>>ASSIGN   3658>>ASSIGN   3659>>ASSIGN
      3664>>IF       3664>>CALL     3665>>ASSIGN   3712>>IF       3733>>ASSIGN   3738>>ASSIGN   3745>>IF
      3748>>IF       3750>>ASSIGN   3752>>ASSIGN   3752>>ASSIGN   3755>>IF       3759>>ASSIGN   3766>>ASSIGN
      3768>>ASSIGN   3769>>ASSIGN   3770>>IF       3799>>IF       3802>>IF       3809>>IF       3810>>ASSIGN
      3822>>ASSIGN   3823>>ASSIGN   3882>>IF       3882>>CALL     3886>>IF       3886>>IF       3886>>IF
      3886>>IF       3886>>IF       3903>>IF       3909>>ASSIGN   3910>>ASSIGN   3915>>IF       3915>>CALL
      3938>>ASSIGN   3939>>ASSIGN   3946>>ASSIGN   3963<<ASSIGN   3964>>DOUNTIL  3966>>IF       3967>>ASSIGN
      3969<<ASSIGN   3969>>ASSIGN   3971<<ASSIGN   3974>>ASSIGN   3991>>IF       3993>>CALL     3998>>ASSIGN
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:106  
      4017>>ASSIGN   4022>>ASSIGN   4024>>ASSIGN
UPDATECACHE
      3792**PROC     3732--CALL     3958--CALL
USERCTX.ARS#
      2735**DCL      3659<<ASSIGN   3766<<ASSIGN   3768>>ASSIGN   3769>>ASSIGN   3770>>IF       3886>>IF
      3886>>IF       3886>>IF       3903>>IF       3909>>ASSIGN   3939<<ASSIGN   3974<<ASSIGN
USERCTX.BUF$
      2736**DCL      3519>>IF       3519<>CALL     3521>>ASSIGN   3542>>ASSIGN   3664>>IF       3664<>CALL
      3665>>ASSIGN   3882>>IF       3882<>CALL     3886>>IF       3915>>IF       3915<>CALL     3938>>ASSIGN
      3946>>ASSIGN   3991>>IF       3993<>CALL     3998>>ASSIGN   4017>>ASSIGN   4022>>ASSIGN   4024>>ASSIGN
USERCTX.FCTX$
      2706**DCL      3432>>ASSIGN
USERCTX.FFLG#
      2732**DCL      2732--REDEF
USERCTX.FILEPOS
      2736**DCL      2737--REDEF    3967<<ASSIGN
USERCTX.FILEPOS.CRECNO
      2736**DCL      3642>>ASSIGN   3644>>ASSIGN   3823<<ASSIGN
USERCTX.FILEPOS.FOFFSET
      2736**DCL      2737--REDEF    3631>>ASSIGN   3645>>ASSIGN   3809>>IF       3822<<ASSIGN   3966>>IF
USERCTX.FILEPOS.FOFFSET_.GRAN
      2737**DCL      3799>>IF       3802>>IF       3810>>ASSIGN
USERCTX.FLNK$
      2706**DCL      3969>>ASSIGN
USERCTX.LFCNT
      2735**DCL      3658<<ASSIGN   3712>>IF       3733<<ASSIGN   3738<<ASSIGN   3745>>IF       3748>>IF
      3750>>ASSIGN   3752<<ASSIGN   3752>>ASSIGN   3755>>IF       3759<<ASSIGN   3886>>IF       3910<<ASSIGN
USERDCB.ACTPOS
      3069**DCL      3069--REDEF
USERDCB.ARS#
      3043**DCL      3043--REDEF    3539>>ASSIGN   3741>>ASSIGN   3742>>ASSIGN   4012>>ASSIGN
USERDCB.ATTR
      3062**DCL      3063--REDEF
USERDCB.BORROW
      3077**DCL      3077--REDEF    3077--REDEF    3077--REDEF
USERDCB.DCBNAME.L
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:107  
      3091**DCL      3091--IMP-SIZ
USERDCB.DVBYTE.VFC#
      3046**DCL      3734>>IF
USERDCB.EOMCHAR#
      3047**DCL      3047--REDEF
USERDCB.FLDID
      3072**DCL      3072--REDEF
USERDCB.FORM$
      3066**DCL      3066--REDEF
USERDCB.FSECT
      3082**DCL      3082--REDEF
USERDCB.FSN#
      3059**DCL      3059--REDEF    3059--REDEF    3060--REDEF
USERDCB.HEADER$
      3065**DCL      3065--REDEF
USERDCB.IXTNSIZE#
      3063**DCL      3063--REDEF
USERDCB.LASTSTA$
      3052**DCL      3052--REDEF
USERDCB.LVL
      3078**DCL      3078--REDEF
USERDCB.NAME#.C
      3053**DCL      3053--REDEF
USERDCB.NOEOF
      3075**DCL      3075--REDEF
USERDCB.NRECS#
      3064**DCL      3064--REDEF
USERDCB.NRECX
      3083**DCL      3083--REDEF
USERDCB.OHDR
      3075**DCL      3075--REDEF
USERDCB.ORG#
      3058**DCL      3058--REDEF
USERDCB.PRECNO
      3081**DCL      3081--REDEF
USERDCB.RCSZ
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:108  
      3087**DCL      3087--REDEF
USERDCB.RES#
      3054**DCL      3054--REDEF
USERDCB.SETX
      3066**DCL      3066--REDEF
USERDCB.TAB$
      3066**DCL      3066--REDEF
USERDCB.TDA
      3080**DCL      3081--REDEF
USERDCB.TYC.LD#
      3044**DCL      3712>>IF       3720>>ASSIGN   3886>>IF
USERDCB.VFCCHAR#
      3068**DCL      3734>>IF       3734>>IF       3734>>IF       3738>>ASSIGN
USERDCB.WSN#
      3054**DCL      3054--REDEF
USERDCB$
      3405**DCL      3037--IMP-PTR  3434<<ASSIGN   3539>>ASSIGN   3712>>IF       3720>>ASSIGN   3734>>IF
      3734>>IF       3734>>IF       3734>>IF       3738>>ASSIGN   3741>>ASSIGN   3742>>ASSIGN   3886>>IF
      4012>>ASSIGN
VFC_CR
      3424**DCL      3925--ASSIGN
VFC_FF
      3425**DCL      3928--ASSIGN
VFC_NONE
      3423**DCL      3934--ASSIGN
WRITE_ERR IN PROCEDURE FUI$WRRQS
      3979**LABEL    3884--CALLALT  3905--GOTO     3926--CALLALT  3929--CALLALT  3935--CALLALT  3948--CALLALT
      4033--CALLALT
WRITE_KEYED_REC
      3274**DCL      4033<>CALL
WRITE_KEYED_REC.BUF_
      3274**DCL      4029<<ASSIGN
WRITE_KEYED_REC.BUF_.BOUND
      3274**DCL      4025<<ASSIGN
WRITE_KEYED_REC.BUF_.BUF$
      3276**DCL      4024<<ASSIGN
PL6.E3A0      #001=FUI$IORQS File=FUI$IORQS.:FUA2TSI                             FRI 11/21/97 11:32 Page:109  
WRITE_KEYED_REC.STATION_
      3276**DCL      3276--REDEF
WRITE_KEYED_REC.V
      3277**DCL      3274--DCLINIT
WRITE_KEYED_REC.V.DCB#
      3277**DCL      3997<<ASSIGN
WRITE_KEYED_REC.V.DVBYTE.VFC#
      3283**DCL      3283--REDEF
WRITE_USER_REC
      3207**DCL      3948<>CALL
WRITE_USER_REC.BUF_
      3207**DCL      3946<<ASSIGN   3947<<ASSIGN
WRITE_USER_REC.STATION_
      3209**DCL      3209--REDEF
WRITE_USER_REC.V
      3210**DCL      3207--DCLINIT
WRITE_USER_REC.V.DCB#
      3210**DCL      3876<<ASSIGN
WRITE_USER_REC.V.DVBYTE.VFC#
      3216**DCL      3216--REDEF
WRITE_VFC_REC
      3241**DCL      3926<>CALL     3929<>CALL     3935<>CALL
WRITE_VFC_REC.BUF_
      3241**DCL      3925<<ASSIGN   3928<<ASSIGN   3934<<ASSIGN
WRITE_VFC_REC.STATION_
      3243**DCL      3243--REDEF
WRITE_VFC_REC.V
      3244**DCL      3241--DCLINIT
WRITE_VFC_REC.V.DCB#
      3244**DCL      3877<<ASSIGN
WRITE_VFC_REC.V.DVBYTE.VFC#
      3250**DCL      3250--REDEF
XSL$HTONL
      3382**DCL-ENT  3448--CALL     3458--CALL     3547--CALL     3773--CALL     3973--CALL     4041--CALL
XSL$NTOHL
      3381**DCL-ENT  3442--CALL     3443--CALL     3453--CALL     3454--CALL

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:110  
      727        1        /*M* FUI$FILELEN - figure out the length of a file (maybe)   */
      728        2        /*T***********************************************************/
      729        3        /*T*                                                         */
      730        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      731        5        /*T*                                                         */
      732        6        /*T***********************************************************/
      733        7        /*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=2,CSI=0,ECI=0,CLM=30,CRM=67, MOC=Y,CCI=3 */
      734        8        /*F*  NAME: FUI$FILELEN
      735        9              Purpose:
      736       10                    Calculates the length (in NFS bytes) of a file.
      737       11        */
      738       12        /*D*  NAME: FUI$IORQS
      739       13              Inputs:
      740       14                    CODE03 - the FIT CODE03 of the file we're to open/read from.
      741       15                    F$TEST - the DCB that the file is linked to.
      742       16              Outputs:
      743       17                    FILELEN - the length of the file we're reading from.
      744       18        */
      745       19
      746       20        FUI$FILELEN: PROC (FILELEN, CODE03) ALTRET;
      747       21
      748       22             %INCLUDE CP_6;
      749      103             %INCLUDE CP_6_SUBS;
      750      643             %INCLUDE B_ERRORS_C;
      751     1769             %INCLUDE FM$FIT;
      752     1990             %INCLUDE FM$GRAN;
      753     2059             %INCLUDE B$JIT;
      754     2349             %INCLUDE FU_NFS_M;
      755     2864
      756     2865                                      /* ARGUMENTS */
      757     2866
      758     2867    1   DCL FILELEN UBIN PARAM;
      759     2868             %CODE03( BASED=PARAM );
      760     2875    1   DCL F$TEST DCB;
      761     2876
      762     2877        %EQU GRANULE_SIZE=1024;
      763     2878
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:111  
      764     2879    1   DCL B$DS8 PTR SYMREF;
      765     2880        %FU$NFSDS (NAME=DS, STCLASS="BASED(B$DS8)");
      766     2910    1   DCL B$JIT$ PTR SYMREF;
      767     2911        %B$TCB;
      768     2914    1   DCL B$TCB$ PTR SYMREF;
      769     2915        %B$ALT;
      770     2923        %F$DCB (DCBN = USERDCB, STCLASS = "BASED (F$TEST$)");
      771     2980
      772     2981        %FPT_OPEN  (FPTN =                 OPEN_INPUT,
      773     2982                    SHARE = IN,
      774     2983                    FUN = IN,
      775     2984                    ACS = UBLOCK,
      776     2985                    DCB=F$TEST);
      777     3094        %FPT_READ  (FPTN =                 READ_BINARY,
      778     3095                    DCB = F$TEST,
      779     3096                    KEYR = YES,
      780     3097                    KEY = BINKEY);
      781     3136        %FPT_PRECORD (FPTN =                POS_BINARY,
      782     3137                      DCB = F$TEST);
      783     3158        %FPT_READ  (FPTN =                 READ_INPUT,
      784     3159                    DCB = F$TEST);
      785     3198        %FPT_READ  (FPTN =                 READ_KGRAN,
      786     3199                    KEY=KGRAN#,
      787     3200                    DCB=F$TEST,
      788     3201                    FULL=YES,
      789     3202                    KEYS=YES);
      790     3241        %FPT_READ  (FPTN =                 READ_DGRAN,
      791     3242                    KEY=DGRAN#,
      792     3243                    DCB=F$TEST,
      793     3244                    FULL=YES,
      794     3245                    KEYS=YES);
      795     3284        %FPT_CLOSE (FPTN =                 CLOSE_INPUT,
      796     3285                    DCB = F$TEST);
      797     3327        %VLP_ERRCODE (FPTN =               E_EOF,
      798     3328                      STCLASS=CONSTANT,
      799     3329                      FCG='0625'O,
      800     3330                      MID='11'O,
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:112  
      801     3331                      MON='1'B,
      802     3332                      SEV=0,
      803     3333                      ERR#=%E$EOF);
      804     3378        %VLP_ERRCODE (FPTN =               E_DI,
      805     3379                      STCLASS=CONSTANT,
      806     3380                      FCG='0625'O,
      807     3381                      MID='11'O,
      808     3382                      MON='1'B,
      809     3383                      SEV=0,
      810     3384                      ERR#=%E$DI);
      811     3429
      812     3430                                      /* QUICK FILE ACCESS VARIABLES */
      813     3431
      814     3432    1   DCL KGRAN# SBIN STATIC;
      815     3433    1   DCL DGRAN# SBIN STATIC;
      816     3434    1   DCL LCRECX# SBIN;
      817     3435    1   DCL CRECX# SBIN;
      818     3436    1   DCL CRECNO# SBIN;
      819     3437    1   DCL EOF# BIT(1);
      820     3438    1   DCL ORG# SBIN;
      821     3439    1   DCL KEYRECX# (0:280) SBIN;    /* unpacked index to keys    */
      822     3440    1   DCL NUMKEYS# SBIN;            /* number of keys in KEYRECX */
      823     3441        %VLP_ERRCODE(FPTN= ERROR#, STCLASS="STATIC SYMDEF");
      824     3486
      825     3487    1   DCL KGRAN$ PTR;
      826     3488    1   DCL DGRAN$ PTR;
      827     3489    1   DCL KGRAN (0:1023) SBIN BASED( KGRAN$ );
      828     3490    1   DCL DGRAN (0:1023) SBIN BASED( DGRAN$ );
      829     3491
      830     3492
      831     3493        %FM$GRAN(BASED="BASED(KGRAN$)");
      832     3497        %FM$CON(BASED="BASED(CRECX$)");
      833     3501        %FM$KEYENT;
      834     3504        %FM$MISEG (BASED="BASED(MISEG$)");
      835     3508        %FM$FIT;
      836     3511    1   DCL 1 BINKEY STATIC, 2 * UBIN BYTE CALIGNED, 2 VAL UBIN(27) CALIGNED;
      837     3512
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:113  
      838     3513                                      /* LOCAL VARIABLES */
      839     3514
      840     3515    1   DCL FUI$MEMALLOC ENTRY(1);
      841     3516    1   DCL FUI$MEMFREE ENTRY(1);
      842     3517    1   DCL F$TEST$ PTR;
      843     3518    1   DCL BKEY_ BIT(36) BASED ALIGNED;
      844     3519    1   DCL CHK_VFC BIT(1);
      845     3520    1   DCL LEN SBIN;
      846     3521    1   DCL VFC UBIN BYTE BASED ALIGNED;
      847     3522    1   DCL CRECX$ PTR AUTO;          /* To current control word  */
      848     3523    1   DCL MISEG$ PTR AUTO;
      849     3524    1   DCL PAST_MISEG$ PTR AUTO;     /* To word past last MISEG  */
      850     3525
      851     3526    1   DCL GDA# UBIN WORD ALIGNED AUTO;
      852     3527    1   DCL 1 GDA REDEF GDA#,
      853     3528    1          2 * UBIN HALF UNAL,
      854     3529    1          2 GRAN UBIN HALF UNAL;
      855     3530    1   DCL VFC_ADJUST(0:511) SBIN CONSTANT INIT (
      856     3531    1       0*64, -1 /* @ */, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,0*0);
      857     3532
      858     3533        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:114  
      859     3534    1        ORG# = 0;
      860     3535    1        ERROR# = '0'B;
      861     3536    1        EOF# = %NO#;
      862     3537    1        CRECNO# = 0;
      863     3538
      864     3539    1        IF CODE03.ORG = %KEYED# AND CODE03.TYPE = 'ur' /* binary file */
      865     3540    2        THEN DO;
      866     3541    2           OPEN_INPUT.V.ACS# = %SEQUEN#;
      867     3542    2           IF DS.QREADLIM < 1 THEN ALTRETURN; /* we'll need to read 1 rec */
      868     3543    2           ORG# = -1;
      869     3544    2           POS_BINARY.V.N# = CODE03.NRECS - 1;
      870     3545    2           END;
      871     3546    1        ELSE IF (CODE03.ORG = %KEYED# OR CODE03.ORG = %CONSEC# OR CODE03.ORG = %UR#)
      872     3547    1              AND NOT CODE03.DESC.BAD AND NOT CODE03.COMP
      873     3548    2           THEN DO;         /* try to set up for optimized reads */
      874     3549    2              OPEN_INPUT.V.ACS# = %UBLOCK#;
      875     3550    2              IF CODE03.UGRANS > DS.QREADLIM THEN ALTRETURN;
      876     3551    2              END;
      877     3552    2           ELSE DO;              /* can't do optimized reads */
      878     3553    2              OPEN_INPUT.V.ACS# = %SEQUEN#;
      879     3554    2              IF CODE03.UGRANS > DS.SREADLIM THEN ALTRETURN;
      880     3555    2              END;
      881     3556
      882     3557    1        F$TEST$ = DCBADDR (DCBNUM (F$TEST));
      883     3558    1        CALL FUI$MEMALLOC( DGRAN$ );
      884     3559    1        CALL FUI$MEMALLOC( KGRAN$ );
      885     3560    1        READ_INPUT.BUF_ = VECTOR( KGRAN );
      886     3561    1        READ_BINARY.BUF_ = VECTOR( KGRAN );
      887     3562    1        READ_KGRAN.BUF_ = VECTOR( KGRAN );
      888     3563    1        READ_DGRAN.BUF_ = VECTOR( DGRAN );
      889     3564
      890     3565    2        CALL M$OPEN( OPEN_INPUT ) WHENALTRETURN DO; ALTRETURN; END;
      891     3566    1        IF USERDCB.ACS# = %UBLOCK# /* a successful "fast" open */
      892     3567    2        THEN DO;
      893     3568    2           ORG# = CODE03.ORG; /* set ORG# to %KEYED#, %CONSEC# or %UR# */
      894     3569
      895     3570    2           KGRAN# = 0;      /* Initialize for first read or write. */
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:115  
      896     3571    2           DGRAN# = -1;          /* nothing yet */
      897     3572    2           CALL M$READ (READ_KGRAN);
      898     3573    3           DO SELECT (ORG#);
      899     3574    3              SELECT (%CONSEC#, %UR#); /* consecutive file, fill up CBUF */
      900     3575    3              CRECX# = %GRANULE_SIZE;
      901     3576    3              LCRECX# = FM$GRAN.NAVX + KGRAN$->FM$GRAN.AVAIL;
      902     3577    3              SELECT (%KEYED#); /* keyed file, fill up CBUF iff whole file */
      903     3578    3              CRECX# = 0;
      904     3579    3              LCRECX# = 0;
      905     3580    3              CALL FUI_UNPACK_KEY_GRAN;
      906     3581    3              END;               /* do select */
      907     3582    2           END;
      908     3583
      909     3584    1        FILELEN = 0;
      910     3585    2        DO WHILE ('1'B);
      911     3586    2           CALL FUI_READ ALTRET( EXITT );
      912     3587    2           FILELEN = FILELEN + LEN;
      913     3588    2           END;
      914     3589
      915     3590    1   EXITT:;
      916     3591    2        IF USERDCB.FCD# THEN CALL M$CLOSE( CLOSE_INPUT )WHENALTRETURN DO; END;
      917     3592    1        CALL FUI$MEMFREE( DGRAN$ );
      918     3593    1        CALL FUI$MEMFREE( KGRAN$ );
      919     3594    1        RETURN;
      920     3595        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:116  
      921     3596        /*I*  NAME:      FUI_READ
      922     3597              Purpose:   To get the length for the next record in the input file.
      923     3598              Algorithm: If we're set up for quick reading, we can do a quick read,
      924     3599                         otherwise we have to do a regular read (including continuation
      925     3600                         reads, since records can be > 4096 chars).
      926     3601              Outputs:   LEN (global) - length of record in NFS characters (after
      927     3602                         VFC translation).
      928     3603        */
      929     3604    1   FUI_READ: PROC ALTRET;
      930     3605
      931     3606    2        ERROR# = '0'B;
      932     3607
      933     3608    2        IF EOF# THEN ALTRETURN;
      934     3609
      935     3610    3        DO CASE( ORG# );
      936     3611    3        CASE( %CONSEC#, %UR# );
      937     3612    3           CALL FUI_CONSEC_READ;
      938     3613    3        CASE( %KEYED# );
      939     3614    3           CALL FUI_KEYED_READ;
      940     3615    3        CASE(ELSE);    /* a binary file read - read last record */
      941     3616    3           IF POS_BINARY.V.N# > 0 THEN CALL M$PRECORD( POS_BINARY );
      942     3617    3           CALL M$READ( READ_BINARY )
      943     3618    4           WHENRETURN DO;
      944     3619    4              LEN = (BINKEY.VAL-1) * 1024 + USERDCB.ARS#;
      945     3620    4              END;
      946     3621    4           WHENALTRETURN DO;
      947     3622    4              ERROR# = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      948     3623    4              END;
      949     3624    3           EOF# = %YES#;
      950     3625    3        CASE(0);                 /* It is not an optimized read */
      951     3626    3           CRECNO# = CRECNO# + 1;
      952     3627    3           CALL M$READ( READ_INPUT )
      953     3628    4           WHENALTRETURN DO;
      954     3629    4              ERROR# = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      955     3630    4              END;
      956     3631    3           LEN = USERDCB.ARS#;
      957     3632    3           IF USERDCB.DVBYTE.VFC#
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:117  
      958     3633    3           THEN LEN = LEN + VFC_ADJUST( ASCBIN( USERDCB.VFCCHAR# ));
      959     3634    3           ELSE LEN = LEN + 1;   /* lengthc (LF) */
      960     3635    4           DO WHILE (ERROR#.ERR# = %E$LD);
      961     3636    4              ERROR# = '0'B;
      962     3637    4              READ_INPUT.V.DVBYTE.CONT# = %YES#;
      963     3638    4              CALL M$READ( READ_INPUT )
      964     3639    5              WHENALTRETURN DO;
      965     3640    5                 ERROR# = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      966     3641    5                 END;
      967     3642    4              LEN = LEN + USERDCB.ARS#;
      968     3643    4              READ_INPUT.V.DVBYTE.CONT# = %NO#;
      969     3644    4              END;
      970     3645    3        END;                     /* do case */
      971     3646
      972     3647    2        IF ERROR# = '0'B
      973     3648    2        THEN RETURN;             /* no error */
      974     3649    2        ELSE ALTRETURN;          /* otherwise EOF or something else */
      975     3650
      976     3651    2   END FUI_READ;
      977     3652        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:118  
      978     3653        /*I*  NAME:      FUI_KEYED_READ
      979     3654              Purpose:   To get the length for the KEYED file's next record
      980     3655              Algorithm: Get to the next record.  For each MISEG in that record,
      981     3656                         add the length to the record length.  If there's a VFC
      982     3657                         char, then we have to read a data granule, so that we'll
      983     3658                         get the VFC char to adjust the length by.
      984     3659        */
      985     3660    1   FUI_KEYED_READ: PROC ALTRET;
      986     3661
      987     3662    3        DO UNTIL( NOT CRECX$->FM$KEYENT.D );
      988     3663    3           CRECX# = CRECX# + 1;  /* Index next key   */
      989     3664    4           DO WHILE(CRECX# > NUMKEYS#);
      990     3665    4              GDA# = FM$GRAN.FLINK;
      991     3666    4              KGRAN# = GDA.GRAN;
      992     3667    4              IF KGRAN# = 0 THEN GOTO RPT_EOF; /* End of file     */
      993     3668    4              CALL M$READ( READ_KGRAN )ALTRET( JUSTALT );
      994     3669    4              CALL FUI_UNPACK_KEY_GRAN;
      995     3670    4              CRECX# = 1;        /* First key of gran        */
      996     3671    4              END;
      997     3672    3           CRECX$ = PINCRW( KGRAN$, KEYRECX#( CRECX# ));
      998     3673    3           END /* until not CRECX$->FM$KEYENT.D */;
      999     3674
     1000     3675    2        MISEG$ = PINCRW( CRECX$, SIZEW(CRECX$->FM$KEYENT));
              3675                 /* Point to first MISEG entry */
     1001     3676    2        LEN = 0;
     1002     3677    2        CHK_VFC = %NO#;
     1003     3678    2        IF FM$MISEG.CTL & '001'B /* see if builtin VFC */
     1004     3679    2        THEN CHK_VFC = %YES#;
     1005     3680    2        ELSE LEN = LEN + 1;      /* lengthc (LF) */
     1006     3681
     1007     3682    2        CRECNO# = CRECNO# + 1;
     1008     3683    2   READ_DATA:               /* return record segment by segment. */
     1009     3684    3        DO WHILE( %YES# );
     1010     3685    3           PAST_MISEG$ = PINCRW( KGRAN$, KEYRECX#( CRECX#+1 ));
     1011     3686
     1012     3687    4           DO WHILE( MISEG$ < PAST_MISEG$ );
     1013     3688    4              LEN = LEN + FM$MISEG.GACTB; /* Number of bytes in segment */
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:119  
     1014     3689    4              IF CHK_VFC AND LEN > 0
     1015     3690    5              THEN DO;      /* need to check what the VFC char is */
     1016     3691    5                 GDA# = FM$MISEG.GDA;
     1017     3692    5                 IF GDA.GRAN = KGRAN#
     1018     3693    5                 THEN CRECX$ = PINCRW( KGRAN$, FM$MISEG.GX ); /* data in key gran */
     1019     3694    6                 ELSE DO;
     1020     3695    6                    IF GDA.GRAN ~= DGRAN#
     1021     3696    7                    THEN DO;
     1022     3697    7                       DGRAN# = GDA.GRAN;
     1023     3698    7                       CALL M$READ( READ_DGRAN )ALTRET( JUSTALT);
     1024     3699    7                       END;
     1025     3700    6                    CRECX$ = PINCRW( DGRAN$, FM$MISEG.GX );
     1026     3701    6                    END;
     1027     3702    5                 LEN = LEN + VFC_ADJUST( CRECX$->VFC );
     1028     3703    5                 CHK_VFC = %NO#;
     1029     3704    5                 END;
     1030     3705    4              MISEG$ = PINCRW( MISEG$, LENGTHW(FM$MISEG) );
     1031     3706    4              END;
     1032     3707    3           IF CRECX# < NUMKEYS#
     1033     3708    3           THEN EXIT READ_DATA;  /* Another segment can't exist */
     1034     3709    3           GDA# = FM$GRAN.FLINK;
     1035     3710    3           KGRAN# = GDA.GRAN;
     1036     3711    3           IF KGRAN# = 0
     1037     3712    3           THEN EXIT READ_DATA;  /* Another segment can't exist */
     1038     3713    3           CALL M$READ( READ_KGRAN )ALTRET( JUSTALT );
     1039     3714    3           CALL FUI_UNPACK_KEY_GRAN;
     1040     3715    3           CRECX# = 0;           /* Before first key of gran */
     1041     3716    3           MISEG$ = PINCRW( KGRAN$, KEYRECX#( CRECX# ));
     1042     3717    3           END;
     1043     3718
     1044     3719    2        RETURN;
     1045     3720
     1046     3721    2   RPT_EOF: ;
     1047     3722    2        ERROR# = E_EOF;
     1048     3723    2        EOF# = %YES#;
     1049     3724    2   JUSTALT: ;
     1050     3725    2        ALTRETURN;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:120  
     1051     3726
     1052     3727    2   END FUI_KEYED_READ;
     1053     3728        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:121  
     1054     3729        /*I*  NAME:      FUI_UNPACK_KEY_GRAN
     1055     3730              Purpose:   To unpack a key granule's key indices for easier access.
     1056     3731        */
     1057     3732    1   FUI_UNPACK_KEY_GRAN: PROC ALTRET;
     1058     3733
     1059     3734    2   DCL KEYTBL$ PTR;
     1060     3735        %FM$KEYTBL (BASED="BASED (KEYTBL$)");
     1061     3738    2   DCL KEYNUM SBIN;
     1062     3739    2   DCL KEY512 SBIN;
     1063     3740
     1064     3741
     1065     3742    2        KEYTBL$ = PINCRW( KGRAN$, FM$GRAN.FCEX );
     1066     3743    2        NUMKEYS# = FM$GRAN.KEYCNT;
     1067     3744    2        KEY512 = FM$KEYTBL(0);   /* any key > this : add 512 to it */
     1068     3745    2        KEYRECX#(0) = FM$GRAN.FCEX+SIZEW(FM$KEYTBL);
     1069     3746    3        DO KEYNUM = 1 TO NUMKEYS#;
     1070     3747    3           KEYRECX#( KEYNUM ) = FM$KEYTBL( KEYNUM );
     1071     3748    3           IF KEYNUM >= KEY512 THEN KEYRECX#( KEYNUM ) = KEYRECX#( KEYNUM )+512;
     1072     3749    3           END;
     1073     3750    2        KEYRECX#( KEYNUM ) = FM$GRAN.NAVX;
     1074     3751
     1075     3752    2        RETURN;
     1076     3753
     1077     3754    2   END FUI_UNPACK_KEY_GRAN;
     1078     3755
     1079     3756        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:122  
     1080     3757        /*I*  NAME:      FUI_CONSEC_READ
     1081     3758              Purpose:   To get the length for the CONSEC or UR file's next record
     1082     3759              Algorithm: Position to the start of the next record.  Keep adding the
     1083     3760                         length of record segments while a next segment exists,
     1084     3761                         and the start of the next record is not encountered.  If
     1085     3762                         there's a VFC char to check, it's in the same granule.
     1086     3763        */
     1087     3764    1   FUI_CONSEC_READ: PROC ALTRET;
     1088     3765
     1089     3766    3        DO UNTIL( FM$CON.FAK ~= 0 ); /* Find beginning of next record */
     1090     3767    3           CALL FUI_CONSEC_SEG ALTRET( EOF_EXPECTED );
     1091     3768    3           END;                  /* do until FM$CON.FAK ~= 0 */
     1092     3769    2        CRECNO# = CRECNO# + 1;
     1093     3770
     1094     3771    2        LEN = 0;
     1095     3772    2        CHK_VFC = %NO#;
     1096     3773    2        IF FM$CON.CTL & '001'B   /* look for builtin VFC     */
     1097     3774    2        THEN CHK_VFC = %YES#;
     1098     3775    2        ELSE LEN = LEN + 1;      /* lengthc (LF) */
     1099     3776
     1100     3777    2   APPEND_CONSEC_SEG: /* Keep appending record segments for this record */
     1101     3778    2        LEN = LEN + FM$CON.GACTB; /* Get # bytes in segment   */
     1102     3779    2        IF CHK_VFC AND LEN > 0
     1103     3780    3        THEN DO;
     1104     3781    3           LEN = LEN + VFC_ADJUST( ADDR(KGRAN(ADDR(KGRAN)->FM$CON.GX))->VFC );
     1105     3782    3           CHK_VFC = %NO#;
     1106     3783    3           END;
     1107     3784
     1108     3785    2        IF ( FM$CON.C ~= 0 )     /* continuation of segment */
     1109     3786    2        THEN
     1110     3787    2           CALL FUI_CONSEC_SEG
     1111     3788    3           WHENRETURN DO;
     1112     3789    3              IF FM$CON.FAK ~= 0
     1113     3790    3              THEN               /* Hit beginning of next record  */
     1114     3791    3                 CRECX# = CRECX# + 1; /* Remember position        */
     1115     3792    3              ELSE               /* a continuation segment - */
     1116     3793    3                 GOTO APPEND_CONSEC_SEG; /* append it */
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:123  
     1117     3794    3              END;
     1118     3795    3           WHENALTRETURN DO;
     1119     3796    3              IF ERROR#.ERR# = %E$EOF THEN
     1120     3797    3                 ERROR#='0'B;    /* Give him what we have so far. */
     1121     3798    3              END;
     1122     3799
     1123     3800    2        RETURN;
     1124     3801
     1125     3802    2   JUSTALT: ;
     1126     3803    2   EOF_EXPECTED: ;
     1127     3804    2        ALTRETURN;
     1128     3805
     1129     3806    2   END FUI_CONSEC_READ;
     1130     3807        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:124  
     1131     3808        /*I*  NAME:      FUI_CONSEC_SEG
     1132     3809              Purpose:   Position to the next segment of a CONSEC or UR file.
     1133     3810        */
     1134     3811    1   FUI_CONSEC_SEG: PROC ALTRET;
     1135     3812
     1136     3813    2        CRECX# = CRECX# - 1;     /* Next control word      */
     1137     3814
     1138     3815    3        DO WHILE (CRECX# < LCRECX#);
     1139     3816    3           CALL FUI_GET_NEXT_GRAN ALTRET( JUSTALT );
     1140     3817    3           CRECX# = %(GRANULE_SIZE-1); /* Index of first record control word */
     1141     3818    3           LCRECX# = FM$GRAN.NAVX + KGRAN$->FM$GRAN.AVAIL;
     1142     3819    3           END;
     1143     3820
     1144     3821    2        CRECX$ = ADDR( KGRAN( CRECX# ) );
     1145     3822    2        RETURN;
     1146     3823
     1147     3824    2   JUSTALT: ;
     1148     3825    2        ALTRETURN;
     1149     3826
     1150     3827    2   END FUI_CONSEC_SEG;
     1151     3828        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:125  
     1152     3829        /*I*  NAME:      FUI_GET_NEXT_GRAN
     1153     3830              Purpose:   Read the next granule of the CONSEC or UR input file.
     1154     3831        */
     1155     3832    1   FUI_GET_NEXT_GRAN: PROC ALTRET;
     1156     3833
     1157     3834    2        IF NOT KGRAN$->FM$GRAN.ENDLVL
     1158     3835    3        THEN DO;                 /* That *was* the last granule   */
     1159     3836    3           ERROR# = E_EOF;
     1160     3837    3           EOF# = %YES#;
     1161     3838    3           ALTRETURN;
     1162     3839    3           END;
     1163     3840
     1164     3841    2        KGRAN# = KGRAN# + 1;     /* get the next granule. */
     1165     3842    2        CALL M$READ (READ_KGRAN) ALTRET (RTN_ERR);
     1166     3843
     1167     3844    2        IF KGRAN(0) ~= -1 THEN
     1168     3845    2           RETURN;
     1169     3846    2        ERROR# = E_DI;
     1170     3847    2        GOTO JUSTALT;
     1171     3848
     1172     3849    2   RTN_ERR:
     1173     3850    2        ERROR# = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     1174     3851    2   JUSTALT:;
     1175     3852    2        ALTRETURN;
     1176     3853
     1177     3854    2   END FUI_GET_NEXT_GRAN;
     1178     3855
     1179     3856    1   END FUI$FILELEN;
     1180     3857        %EOD;

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:126  
--  Include file information  --

   FU_NFS_M.:FUA2TOU  is referenced.
   B$JIT.:E05OU  cannot be made into a system file and is referenced.
   FM$GRAN.:E05OU  is referenced.
   FM$FIT.:E05OU  is referenced.
   B_ERRORS_C.:E05OU  is referenced.
   CP_6_SUBS.:E05OU  is referenced.
   CP_6.:E05OU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FUI$FILELEN.

   Procedure FUI$FILELEN requires 566 words for executable code.
   Procedure FUI$FILELEN requires 312 words of local(AUTO) storage.

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:127  

 Object Unit name= FUI$FILELEN                                File name= FUI$IORQS.:FUA2TOU
 UTS= NOV 21 '97 11:32:59.52 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  F$TEST
    2   Data  even  none   158    236  FUI$FILELEN
    3  RoData even  UTS    515   1003  FUI$FILELEN
    4   Proc  even  none   566   1066  FUI$FILELEN
    5  RoData even  none     3      3  FUI$FILELEN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes    yes     yes      Std        2  FUI$FILELEN

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    2    234  ERROR#
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:128  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 FUI$MEMALLOC
         yes           Std       1 FUI$MEMFREE
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_AALT
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  F$TEST                                B$DS8
     B$JIT$                                B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:129  


      727        1        /*M* FUI$FILELEN - figure out the length of a file (maybe)   */
      728        2        /*T***********************************************************/
      729        3        /*T*                                                         */
      730        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      731        5        /*T*                                                         */
      732        6        /*T***********************************************************/
      733        7        /*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=2,CSI=0,ECI=0,CLM=30,CRM=67, MOC=Y,CCI=3 */
      734        8        /*F*  NAME: FUI$FILELEN
      735        9              Purpose:
      736       10                    Calculates the length (in NFS bytes) of a file.
      737       11        */
      738       12        /*D*  NAME: FUI$IORQS
      739       13              Inputs:
      740       14                    CODE03 - the FIT CODE03 of the file we're to open/read from.
      741       15                    F$TEST - the DCB that the file is linked to.
      742       16              Outputs:
      743       17                    FILELEN - the length of the file we're reading from.
      744       18        */
      745       19
      746       20        FUI$FILELEN: PROC (FILELEN, CODE03) ALTRET;

     20  4 000000   000000 700200 xent  FUI$FILELEN  TSX0  ! X66_AUTO_2
         4 000001   000470 000002                    ZERO    312,2

      747       21
      748       22             %INCLUDE CP_6;
      749      103             %INCLUDE CP_6_SUBS;
      750      643             %INCLUDE B_ERRORS_C;
      751     1769             %INCLUDE FM$FIT;
      752     1990             %INCLUDE FM$GRAN;
      753     2059             %INCLUDE B$JIT;
      754     2349             %INCLUDE FU_NFS_M;
      755     2864
      756     2865                                      /* ARGUMENTS */
      757     2866
      758     2867    1   DCL FILELEN UBIN PARAM;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:130  
      759     2868             %CODE03( BASED=PARAM );
      760     2875    1   DCL F$TEST DCB;
      761     2876
      762     2877        %EQU GRANULE_SIZE=1024;
      763     2878
      764     2879    1   DCL B$DS8 PTR SYMREF;
      765     2880        %FU$NFSDS (NAME=DS, STCLASS="BASED(B$DS8)");
      766     2910    1   DCL B$JIT$ PTR SYMREF;
      767     2911        %B$TCB;
      768     2914    1   DCL B$TCB$ PTR SYMREF;
      769     2915        %B$ALT;
      770     2923        %F$DCB (DCBN = USERDCB, STCLASS = "BASED (F$TEST$)");
      771     2980
      772     2981        %FPT_OPEN  (FPTN =                 OPEN_INPUT,
      773     2982                    SHARE = IN,
      774     2983                    FUN = IN,
      775     2984                    ACS = UBLOCK,
      776     2985                    DCB=F$TEST);
      777     3094        %FPT_READ  (FPTN =                 READ_BINARY,
      778     3095                    DCB = F$TEST,
      779     3096                    KEYR = YES,
      780     3097                    KEY = BINKEY);
      781     3136        %FPT_PRECORD (FPTN =                POS_BINARY,
      782     3137                      DCB = F$TEST);
      783     3158        %FPT_READ  (FPTN =                 READ_INPUT,
      784     3159                    DCB = F$TEST);
      785     3198        %FPT_READ  (FPTN =                 READ_KGRAN,
      786     3199                    KEY=KGRAN#,
      787     3200                    DCB=F$TEST,
      788     3201                    FULL=YES,
      789     3202                    KEYS=YES);
      790     3241        %FPT_READ  (FPTN =                 READ_DGRAN,
      791     3242                    KEY=DGRAN#,
      792     3243                    DCB=F$TEST,
      793     3244                    FULL=YES,
      794     3245                    KEYS=YES);
      795     3284        %FPT_CLOSE (FPTN =                 CLOSE_INPUT,
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:131  
      796     3285                    DCB = F$TEST);
      797     3327        %VLP_ERRCODE (FPTN =               E_EOF,
      798     3328                      STCLASS=CONSTANT,
      799     3329                      FCG='0625'O,
      800     3330                      MID='11'O,
      801     3331                      MON='1'B,
      802     3332                      SEV=0,
      803     3333                      ERR#=%E$EOF);
      804     3378        %VLP_ERRCODE (FPTN =               E_DI,
      805     3379                      STCLASS=CONSTANT,
      806     3380                      FCG='0625'O,
      807     3381                      MID='11'O,
      808     3382                      MON='1'B,
      809     3383                      SEV=0,
      810     3384                      ERR#=%E$DI);
      811     3429
      812     3430                                      /* QUICK FILE ACCESS VARIABLES */
      813     3431
      814     3432    1   DCL KGRAN# SBIN STATIC;
      815     3433    1   DCL DGRAN# SBIN STATIC;
      816     3434    1   DCL LCRECX# SBIN;
      817     3435    1   DCL CRECX# SBIN;
      818     3436    1   DCL CRECNO# SBIN;
      819     3437    1   DCL EOF# BIT(1);
      820     3438    1   DCL ORG# SBIN;
      821     3439    1   DCL KEYRECX# (0:280) SBIN;    /* unpacked index to keys    */
      822     3440    1   DCL NUMKEYS# SBIN;            /* number of keys in KEYRECX */
      823     3441        %VLP_ERRCODE(FPTN= ERROR#, STCLASS="STATIC SYMDEF");
      824     3486
      825     3487    1   DCL KGRAN$ PTR;
      826     3488    1   DCL DGRAN$ PTR;
      827     3489    1   DCL KGRAN (0:1023) SBIN BASED( KGRAN$ );
      828     3490    1   DCL DGRAN (0:1023) SBIN BASED( DGRAN$ );
      829     3491
      830     3492
      831     3493        %FM$GRAN(BASED="BASED(KGRAN$)");
      832     3497        %FM$CON(BASED="BASED(CRECX$)");
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:132  
      833     3501        %FM$KEYENT;
      834     3504        %FM$MISEG (BASED="BASED(MISEG$)");
      835     3508        %FM$FIT;
      836     3511    1   DCL 1 BINKEY STATIC, 2 * UBIN BYTE CALIGNED, 2 VAL UBIN(27) CALIGNED;
      837     3512
      838     3513                                      /* LOCAL VARIABLES */
      839     3514
      840     3515    1   DCL FUI$MEMALLOC ENTRY(1);
      841     3516    1   DCL FUI$MEMFREE ENTRY(1);
      842     3517    1   DCL F$TEST$ PTR;
      843     3518    1   DCL BKEY_ BIT(36) BASED ALIGNED;
      844     3519    1   DCL CHK_VFC BIT(1);
      845     3520    1   DCL LEN SBIN;
      846     3521    1   DCL VFC UBIN BYTE BASED ALIGNED;
      847     3522    1   DCL CRECX$ PTR AUTO;          /* To current control word  */
      848     3523    1   DCL MISEG$ PTR AUTO;
      849     3524    1   DCL PAST_MISEG$ PTR AUTO;     /* To word past last MISEG  */
      850     3525
      851     3526    1   DCL GDA# UBIN WORD ALIGNED AUTO;
      852     3527    1   DCL 1 GDA REDEF GDA#,
      853     3528    1          2 * UBIN HALF UNAL,
      854     3529    1          2 GRAN UBIN HALF UNAL;
      855     3530    1   DCL VFC_ADJUST(0:511) SBIN CONSTANT INIT (
      856     3531    1       0*64, -1 /* @ */, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,0*0);
      857     3532
      858     3533        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:133  
      859     3534    1        ORG# = 0;

   3534  4 000002   200011 450100                    STZ     ORG#,,AUTO

      860     3535    1        ERROR# = '0'B;

   3535  4 000003   000234 450000 2                  STZ     ERROR#

      861     3536    1        EOF# = %NO#;

   3536  4 000004   200010 450100                    STZ     EOF#,,AUTO

      862     3537    1        CRECNO# = 0;

   3537  4 000005   200007 450100                    STZ     CRECNO#,,AUTO

      863     3538
      864     3539    1        IF CODE03.ORG = %KEYED# AND CODE03.TYPE = 'ur' /* binary file */

   3539  4 000006   200004 470500                    LDP0    @CODE03,,AUTO
         4 000007   000000 236100                    LDQ     0,,PR0
         4 000010   777000 376003                    ANQ     -512,DU
         4 000011   002000 116003                    CMPQ    1024,DU
         4 000012   000032 601000 4                  TNZ     s:3546
         4 000013   000001 720100                    LXL0    1,,PR0
         4 000014   001002 100000 3                  CMPX0   VFC_ADJUST+512
         4 000015   000032 601000 4                  TNZ     s:3546

      865     3540    2        THEN DO;

      866     3541    2           OPEN_INPUT.V.ACS# = %SEQUEN#;

   3541  4 000016   000001 236007                    LDQ     1,DL
         4 000017   000046 552004 2                  STBQ    OPEN_INPUT+38,'04'O

      867     3542    2           IF DS.QREADLIM < 1 THEN ALTRETURN; /* we'll need to read 1 rec */

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:134  
   3542  4 000020   000000 471400 xsym               LDP1    B$DS8
         4 000021   100016 235100                    LDA     14,,PR1
         4 000022   000024 601000 4                  TNZ     s:3543

   3542  4 000023   000000 702200 xent               TSX2  ! X66_AALT

      868     3543    2           ORG# = -1;

   3543  4 000024   000001 335007                    LCA     1,DL
         4 000025   200011 755100                    STA     ORG#,,AUTO

      869     3544    2           POS_BINARY.V.N# = CODE03.NRECS - 1;

   3544  4 000026   000002 235100                    LDA     2,,PR0
         4 000027   000001 135007                    SBLA    1,DL
         4 000030   000117 755000 2                  STA     POS_BINARY+7

      870     3545    2           END;

   3545  4 000031   000067 710000 4                  TRA     s:3557

      871     3546    1        ELSE IF (CODE03.ORG = %KEYED# OR CODE03.ORG = %CONSEC# OR CODE03.ORG = %UR#)

   3546  4 000032   002000 116003                    CMPQ    1024,DU
         4 000033   000040 600000 4                  TZE     s:3546+6
         4 000034   001000 116003                    CMPQ    512,DU
         4 000035   000040 600000 4                  TZE     s:3546+6
         4 000036   004000 116003                    CMPQ    2048,DU
         4 000037   000056 601000 4                  TNZ     s:3553
         4 000040   000001 236100                    LDQ     1,,PR0
         4 000041   020000 316003                    CANQ    8192,DU
         4 000042   000056 601000 4                  TNZ     s:3553
         4 000043   000004 234100                    SZN     4,,PR0
         4 000044   000056 604000 4                  TMI     s:3553

      872     3547    1              AND NOT CODE03.DESC.BAD AND NOT CODE03.COMP
      873     3548    2           THEN DO;         /* try to set up for optimized reads */
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:135  

      874     3549    2              OPEN_INPUT.V.ACS# = %UBLOCK#;

   3549  4 000045   000014 236007                    LDQ     12,DL
         4 000046   000046 552004 2                  STBQ    OPEN_INPUT+38,'04'O

      875     3550    2              IF CODE03.UGRANS > DS.QREADLIM THEN ALTRETURN;

   3550  4 000047   000000 471400 xsym               LDP1    B$DS8
         4 000050   000000 236100                    LDQ     0,,PR0
         4 000051   000032 376000 xsym               ANQ     B_VECTNIL+26
         4 000052   100016 116100                    CMPQ    14,,PR1
         4 000053   000067 602000 4                  TNC     s:3557
         4 000054   000067 600000 4                  TZE     s:3557

   3550  4 000055   000000 702200 xent               TSX2  ! X66_AALT

      876     3551    2              END;
      877     3552    2           ELSE DO;              /* can't do optimized reads */

      878     3553    2              OPEN_INPUT.V.ACS# = %SEQUEN#;

   3553  4 000056   000001 236007                    LDQ     1,DL
         4 000057   000046 552004 2                  STBQ    OPEN_INPUT+38,'04'O

      879     3554    2              IF CODE03.UGRANS > DS.SREADLIM THEN ALTRETURN;

   3554  4 000060   000000 471400 xsym               LDP1    B$DS8
         4 000061   000000 236100                    LDQ     0,,PR0
         4 000062   000032 376000 xsym               ANQ     B_VECTNIL+26
         4 000063   100017 116100                    CMPQ    15,,PR1
         4 000064   000067 602000 4                  TNC     s:3557
         4 000065   000067 600000 4                  TZE     s:3557

   3554  4 000066   000000 702200 xent               TSX2  ! X66_AALT

      880     3555    2              END;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:136  
      881     3556
      882     3557    1        F$TEST$ = DCBADDR (DCBNUM (F$TEST));

   3557  4 000067   000000 236007 xsym               LDQ     F$TEST,DL
         4 000070   000000 473400 5                  LDP3    0
         4 000071   300000 474500                    LDP4    0,,PR3
         4 000072   400000 236106                    LDQ     0,QL,PR4
         4 000073   200446 756100                    STQ     F$TEST$,,AUTO

      883     3558    1        CALL FUI$MEMALLOC( DGRAN$ );

   3558  4 000074   200445 635500                    EPPR5   DGRAN$,,AUTO
         4 000075   200466 455500                    STP5    KEY512+1,,AUTO
         4 000076   200466 630500                    EPPR0   KEY512+1,,AUTO
         4 000077   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 000100   000000 701000 xent               TSX1    FUI$MEMALLOC
         4 000101   000000 011000                    NOP     0

      884     3559    1        CALL FUI$MEMALLOC( KGRAN$ );

   3559  4 000102   200444 630500                    EPPR0   KGRAN$,,AUTO
         4 000103   200466 450500                    STP0    KEY512+1,,AUTO
         4 000104   200466 630500                    EPPR0   KEY512+1,,AUTO
         4 000105   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 000106   000000 701000 xent               TSX1    FUI$MEMALLOC
         4 000107   000000 011000                    NOP     0

      885     3560    1        READ_INPUT.BUF_ = VECTOR( KGRAN );

   3560  4 000110   000001 235000 5                  LDA     1
         4 000111   200444 236100                    LDQ     KGRAN$,,AUTO
         4 000112   000126 757000 2                  STAQ    READ_INPUT+4

      886     3561    1        READ_BINARY.BUF_ = VECTOR( KGRAN );

   3561  4 000113   000001 235000 5                  LDA     1
         4 000114   200444 236100                    LDQ     KGRAN$,,AUTO
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:137  
         4 000115   000076 757000 2                  STAQ    READ_BINARY+4

      887     3562    1        READ_KGRAN.BUF_ = VECTOR( KGRAN );

   3562  4 000116   000001 235000 5                  LDA     1
         4 000117   200444 236100                    LDQ     KGRAN$,,AUTO
         4 000120   000144 757000 2                  STAQ    READ_KGRAN+4

      888     3563    1        READ_DGRAN.BUF_ = VECTOR( DGRAN );

   3563  4 000121   000001 235000 5                  LDA     1
         4 000122   200445 236100                    LDQ     DGRAN$,,AUTO
         4 000123   000162 757000 2                  STAQ    READ_DGRAN+4

      889     3564
      890     3565    2        CALL M$OPEN( OPEN_INPUT ) WHENALTRETURN DO; ALTRETURN; END;

   3565  4 000124   000000 630400 2                  EPPR0   OPEN_INPUT
         4 000125   450000 713400                    CLIMB   alt,open
         4 000126   410400 401760                    pmme    nvectors=18
         4 000127   000131 702000 4                  TSX2    s:3565+5
         4 000130   000132 710000 4                  TRA     s:3566

   3565  4 000131   000000 702200 xent               TSX2  ! X66_AALT

      891     3566    1        IF USERDCB.ACS# = %UBLOCK# /* a successful "fast" open */

   3566  4 000132   200446 470500                    LDP0    F$TEST$,,AUTO
         4 000133   000036 236100                    LDQ     30,,PR0
         4 000134   000777 376007                    ANQ     511,DL
         4 000135   000014 116007                    CMPQ    12,DL
         4 000136   000202 601000 4                  TNZ     s:3584

      892     3567    2        THEN DO;

      893     3568    2           ORG# = CODE03.ORG; /* set ORG# to %KEYED#, %CONSEC# or %UR# */

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:138  
   3568  4 000137   200004 471500                    LDP1    @CODE03,,AUTO
         4 000140   100000 236100                    LDQ     0,,PR1
         4 000141   000033 772000                    QRL     27
         4 000142   200011 756100                    STQ     ORG#,,AUTO

      894     3569
      895     3570    2           KGRAN# = 0;      /* Initialize for first read or write. */

   3570  4 000143   000232 450000 2                  STZ     KGRAN#

      896     3571    2           DGRAN# = -1;          /* nothing yet */

   3571  4 000144   000001 335007                    LCA     1,DL
         4 000145   000233 755000 2                  STA     DGRAN#

      897     3572    2           CALL M$READ (READ_KGRAN);

   3572  4 000146   000140 630400 2                  EPPR0   READ_KGRAN
         4 000147   040000 713400                    CLIMB   read
         4 000150   401400 401760                    pmme    nvectors=4

      898     3573    3           DO SELECT (ORG#);

   3573  4 000151   200011 236100                    LDQ     ORG#,,AUTO
         4 000152   000002 116007                    CMPQ    2,DL
         4 000153   000160 604000 4                  TMI     s:3573+7
         4 000154   000176 600000 4                  TZE     s:3578
         4 000155   000004 116007                    CMPQ    4,DL
         4 000156   000202 601000 4                  TNZ     s:3584
         4 000157   000163 710000 4                  TRA     s:3575
         4 000160   000001 116007                    CMPQ    1,DL
         4 000161   000202 601000 4                  TNZ     s:3584
         4 000162   000163 710000 4                  TRA     s:3575

      899     3574    3              SELECT (%CONSEC#, %UR#); /* consecutive file, fill up CBUF */

      900     3575    3              CRECX# = %GRANULE_SIZE;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:139  

   3575  4 000163   002000 235007                    LDA     1024,DL
         4 000164   200006 755100                    STA     CRECX#,,AUTO

      901     3576    3              LCRECX# = FM$GRAN.NAVX + KGRAN$->FM$GRAN.AVAIL;

   3576  4 000165   200444 470500                    LDP0    KGRAN$,,AUTO
         4 000166   000001 236100                    LDQ     1,,PR0
         4 000167   001777 376007                    ANQ     1023,DL
         4 000170   200466 756100                    STQ     KEY512+1,,AUTO
         4 000171   000001 236100                    LDQ     1,,PR0
         4 000172   000022 772000                    QRL     18
         4 000173   200466 036100                    ADLQ    KEY512+1,,AUTO
         4 000174   200005 756100                    STQ     LCRECX#,,AUTO
         4 000175   000202 710000 4                  TRA     s:3584

      902     3577    3              SELECT (%KEYED#); /* keyed file, fill up CBUF iff whole file */

      903     3578    3              CRECX# = 0;

   3578  4 000176   200006 450100                    STZ     CRECX#,,AUTO

      904     3579    3              LCRECX# = 0;

   3579  4 000177   200005 450100                    STZ     LCRECX#,,AUTO

      905     3580    3              CALL FUI_UNPACK_KEY_GRAN;

   3580  4 000200   000624 701000 4                  TSX1    FUI_UNPACK_KEY_GRAN
         4 000201   000000 011000                    NOP     0

      906     3581    3              END;               /* do select */

      907     3582    2           END;

      908     3583
      909     3584    1        FILELEN = 0;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:140  

   3584  4 000202   200003 470500                    LDP0    @FILELEN,,AUTO
         4 000203   000000 450100                    STZ     0,,PR0

      910     3585    2        DO WHILE ('1'B);

      911     3586    2           CALL FUI_READ ALTRET( EXITT );

   3586  4 000204   000241 701000 4                  TSX1    FUI_READ
         4 000205   000213 702000 4                  TSX2    EXITT

      912     3587    2           FILELEN = FILELEN + LEN;

   3587  4 000206   200003 470500                    LDP0    @FILELEN,,AUTO
         4 000207   000000 236100                    LDQ     0,,PR0
         4 000210   200450 036100                    ADLQ    LEN,,AUTO
         4 000211   000000 756100                    STQ     0,,PR0

      913     3588    2           END;

   3588  4 000212   000204 710000 4                  TRA     s:3586

   3586  4 000213                       EXITT        null
      914     3589
      915     3590    1   EXITT:;
      916     3591    2        IF USERDCB.FCD# THEN CALL M$CLOSE( CLOSE_INPUT )WHENALTRETURN DO; END;

   3591  4 000213   200446 470500                    LDP0    F$TEST$,,AUTO
         4 000214   000031 236100                    LDQ     25,,PR0
         4 000215   020000 316007                    CANQ    8192,DL
         4 000216   000224 600000 4                  TZE     s:3592

   3591  4 000217   000174 630400 2                  EPPR0   CLOSE_INPUT
         4 000220   450001 713400                    CLIMB   alt,close
         4 000221   406000 401760                    pmme    nvectors=13
         4 000222   000224 702000 4                  TSX2    s:3592
         4 000223   000224 710000 4                  TRA     s:3592
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:141  

      917     3592    1        CALL FUI$MEMFREE( DGRAN$ );

   3592  4 000224   200445 630500                    EPPR0   DGRAN$,,AUTO
         4 000225   200466 450500                    STP0    KEY512+1,,AUTO
         4 000226   200466 630500                    EPPR0   KEY512+1,,AUTO
         4 000227   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 000230   000000 701000 xent               TSX1    FUI$MEMFREE
         4 000231   000000 011000                    NOP     0

      918     3593    1        CALL FUI$MEMFREE( KGRAN$ );

   3593  4 000232   200444 630500                    EPPR0   KGRAN$,,AUTO
         4 000233   200466 450500                    STP0    KEY512+1,,AUTO
         4 000234   200466 630500                    EPPR0   KEY512+1,,AUTO
         4 000235   000017 631400 xsym               EPPR1   B_VECTNIL+15
         4 000236   000000 701000 xent               TSX1    FUI$MEMFREE
         4 000237   000000 011000                    NOP     0

      919     3594    1        RETURN;

   3594  4 000240   000000 702200 xent               TSX2  ! X66_ARET

      920     3595        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:142  
      921     3596        /*I*  NAME:      FUI_READ
      922     3597              Purpose:   To get the length for the next record in the input file.
      923     3598              Algorithm: If we're set up for quick reading, we can do a quick read,
      924     3599                         otherwise we have to do a regular read (including continuation
      925     3600                         reads, since records can be > 4096 chars).
      926     3601              Outputs:   LEN (global) - length of record in NFS characters (after
      927     3602                         VFC translation).
      928     3603        */
      929     3604    1   FUI_READ: PROC ALTRET;

   3604  4 000241   200456 741300       FUI_READ     STX1  ! GDA#+2,,AUTO

      930     3605
      931     3606    2        ERROR# = '0'B;

   3606  4 000242   000234 450000 2                  STZ     ERROR#

      932     3607
      933     3608    2        IF EOF# THEN ALTRETURN;

   3608  4 000243   200010 234100                    SZN     EOF#,,AUTO
         4 000244   000246 605000 4                  TPL     s:3610

   3608  4 000245   000000 702211                    TSX2  ! 0,X1

      934     3609
      935     3610    3        DO CASE( ORG# );

   3610  4 000246   200011 235100                    LDA     ORG#,,AUTO
         4 000247   000005 115007                    CMPA    5,DL
         4 000250   000252 602005 4                  TNC     s:3610+4,AL
         4 000251   000265 710000 4                  TRA     s:3616
         4 000252   000314 710000 4                  TRA     s:3626
         4 000253   000257 710000 4                  TRA     s:3612
         4 000254   000262 710000 4                  TRA     s:3614
         4 000255   000265 710000 4                  TRA     s:3616
         4 000256   000257 710000 4                  TRA     s:3612
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:143  

      936     3611    3        CASE( %CONSEC#, %UR# );

      937     3612    3           CALL FUI_CONSEC_READ;

   3612  4 000257   000700 701000 4                  TSX1    FUI_CONSEC_READ
         4 000260   000000 011000                    NOP     0
         4 000261   000376 710000 4                  TRA     s:3647

      938     3613    3        CASE( %KEYED# );

      939     3614    3           CALL FUI_KEYED_READ;

   3614  4 000262   000404 701000 4                  TSX1    FUI_KEYED_READ
         4 000263   000000 011000                    NOP     0
         4 000264   000376 710000 4                  TRA     s:3647

      940     3615    3        CASE(ELSE);    /* a binary file read - read last record */

      941     3616    3           IF POS_BINARY.V.N# > 0 THEN CALL M$PRECORD( POS_BINARY );

   3616  4 000265   000117 236000 2                  LDQ     POS_BINARY+7
         4 000266   000272 604400 4                  TMOZ    s:3617

   3616  4 000267   000110 630400 2                  EPPR0   POS_BINARY
         4 000270   040003 713400                    CLIMB   16387
         4 000271   401000 401760                    pmme    nvectors=3

      942     3617    3           CALL M$READ( READ_BINARY )

   3617  4 000272   000072 630400 2                  EPPR0   READ_BINARY
         4 000273   440000 713400                    CLIMB   alt,read
         4 000274   401400 401760                    pmme    nvectors=4
         4 000275   000305 702000 4                  TSX2    s:3622

      943     3618    4           WHENRETURN DO;

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:144  
      944     3619    4              LEN = (BINKEY.VAL-1) * 1024 + USERDCB.ARS#;

   3619  4 000276   200446 470500                    LDP0    F$TEST$,,AUTO
         4 000277   000235 236000 2                  LDQ     BINKEY
         4 000300   000012 736000                    QLS     10
         4 000301   000000 036100                    ADLQ    0,,PR0
         4 000302   002000 136007                    SBLQ    1024,DL
         4 000303   200450 756100                    STQ     LEN,,AUTO

      945     3620    4              END;

   3620  4 000304   000311 710000 4                  TRA     s:3624

      946     3621    4           WHENALTRETURN DO;

      947     3622    4              ERROR# = B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   3622  4 000305   000000 470400 xsym               LDP0    B$TCB$
         4 000306   000000 471500                    LDP1    0,,PR0
         4 000307   100102 236100                    LDQ     66,,PR1
         4 000310   000234 756000 2                  STQ     ERROR#

      948     3623    4              END;

      949     3624    3           EOF# = %YES#;

   3624  4 000311   400000 236003                    LDQ     -131072,DU
         4 000312   200010 756100                    STQ     EOF#,,AUTO
         4 000313   000376 710000 4                  TRA     s:3647

      950     3625    3        CASE(0);                 /* It is not an optimized read */

      951     3626    3           CRECNO# = CRECNO# + 1;

   3626  4 000314   200007 054100                    AOS     CRECNO#,,AUTO

      952     3627    3           CALL M$READ( READ_INPUT )
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:145  

   3627  4 000315   000122 630400 2                  EPPR0   READ_INPUT
         4 000316   440000 713400                    CLIMB   alt,read
         4 000317   401400 401760                    pmme    nvectors=4
         4 000320   000322 702000 4                  TSX2    s:3629
         4 000321   000326 710000 4                  TRA     s:3631

      953     3628    4           WHENALTRETURN DO;

      954     3629    4              ERROR# = B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   3629  4 000322   000000 470400 xsym               LDP0    B$TCB$
         4 000323   000000 471500                    LDP1    0,,PR0
         4 000324   100102 236100                    LDQ     66,,PR1
         4 000325   000234 756000 2                  STQ     ERROR#

      955     3630    4              END;

      956     3631    3           LEN = USERDCB.ARS#;

   3631  4 000326   200446 470500                    LDP0    F$TEST$,,AUTO
         4 000327   000000 235100                    LDA     0,,PR0
         4 000330   200450 755100                    STA     LEN,,AUTO

      957     3632    3           IF USERDCB.DVBYTE.VFC#

   3632  4 000331   000003 236100                    LDQ     3,,PR0
         4 000332   100000 316003                    CANQ    32768,DU
         4 000333   000343 600000 4                  TZE     s:3634

      958     3633    3           THEN LEN = LEN + VFC_ADJUST( ASCBIN( USERDCB.VFCCHAR# ));

   3633  4 000334   000056 236100                    LDQ     46,,PR0
         4 000335   000033 772000                    QRL     27
         4 000336   000000 620006                    EAX0    0,QL
         4 000337   200450 236100                    LDQ     LEN,,AUTO
         4 000340   000002 036010 3                  ADLQ    VFC_ADJUST,X0
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:146  
         4 000341   200450 756100                    STQ     LEN,,AUTO
         4 000342   000344 710000 4                  TRA     s:3635

      959     3634    3           ELSE LEN = LEN + 1;   /* lengthc (LF) */

   3634  4 000343   200450 054100                    AOS     LEN,,AUTO

      960     3635    4           DO WHILE (ERROR#.ERR# = %E$LD);

   3635  4 000344   000234 236000 2                  LDQ     ERROR#
         4 000345   377770 376007                    ANQ     131064,DL
         4 000346   000070 116007                    CMPQ    56,DL
         4 000347   000376 601000 4                  TNZ     s:3647

      961     3636    4              ERROR# = '0'B;

   3636  4 000350   000234 450000 2                  STZ     ERROR#

      962     3637    4              READ_INPUT.V.DVBYTE.CONT# = %YES#;

   3637  4 000351   001000 236003                    LDQ     512,DU
         4 000352   000135 256000 2                  ORSQ    READ_INPUT+11

      963     3638    4              CALL M$READ( READ_INPUT )

   3638  4 000353   000122 630400 2                  EPPR0   READ_INPUT
         4 000354   440000 713400                    CLIMB   alt,read
         4 000355   401400 401760                    pmme    nvectors=4
         4 000356   000360 702000 4                  TSX2    s:3640
         4 000357   000364 710000 4                  TRA     s:3642

      964     3639    5              WHENALTRETURN DO;

      965     3640    5                 ERROR# = B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   3640  4 000360   000000 470400 xsym               LDP0    B$TCB$
         4 000361   000000 471500                    LDP1    0,,PR0
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:147  
         4 000362   100102 236100                    LDQ     66,,PR1
         4 000363   000234 756000 2                  STQ     ERROR#

      966     3641    5                 END;

      967     3642    4              LEN = LEN + USERDCB.ARS#;

   3642  4 000364   200446 470500                    LDP0    F$TEST$,,AUTO
         4 000365   200450 236100                    LDQ     LEN,,AUTO
         4 000366   000000 036100                    ADLQ    0,,PR0
         4 000367   200450 756100                    STQ     LEN,,AUTO

      968     3643    4              READ_INPUT.V.DVBYTE.CONT# = %NO#;

   3643  4 000370   000002 236000 5                  LDQ     2
         4 000371   000135 356000 2                  ANSQ    READ_INPUT+11

      969     3644    4              END;

   3644  4 000372   000234 236000 2                  LDQ     ERROR#
         4 000373   377770 376007                    ANQ     131064,DL
         4 000374   000070 116007                    CMPQ    56,DL
         4 000375   000350 600000 4                  TZE     s:3636

      970     3645    3        END;                     /* do case */

      971     3646
      972     3647    2        IF ERROR# = '0'B

   3647  4 000376   000234 235000 2                  LDA     ERROR#
         4 000377   000402 601000 4                  TNZ     s:3649

      973     3648    2        THEN RETURN;             /* no error */

   3648  4 000400   200456 221300                    LDX1  ! GDA#+2,,AUTO
         4 000401   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:148  
      974     3649    2        ELSE ALTRETURN;          /* otherwise EOF or something else */

   3649  4 000402   200456 221300                    LDX1  ! GDA#+2,,AUTO
         4 000403   000000 702211                    TSX2  ! 0,X1

      975     3650
      976     3651    2   END FUI_READ;
      977     3652        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:149  
      978     3653        /*I*  NAME:      FUI_KEYED_READ
      979     3654              Purpose:   To get the length for the KEYED file's next record
      980     3655              Algorithm: Get to the next record.  For each MISEG in that record,
      981     3656                         add the length to the record length.  If there's a VFC
      982     3657                         char, then we have to read a data granule, so that we'll
      983     3658                         get the VFC char to adjust the length by.
      984     3659        */
      985     3660    1   FUI_KEYED_READ: PROC ALTRET;

   3660  4 000404   200460 741300       FUI_KEYED_R* STX1  ! GDA#+4,,AUTO

      986     3661
      987     3662    3        DO UNTIL( NOT CRECX$->FM$KEYENT.D );

      988     3663    3           CRECX# = CRECX# + 1;  /* Index next key   */

   3663  4 000405   200006 054100                    AOS     CRECX#,,AUTO

      989     3664    4           DO WHILE(CRECX# > NUMKEYS#);

   3664  4 000406   200006 236100                    LDQ     CRECX#,,AUTO
         4 000407   200443 116100                    CMPQ    NUMKEYS#,,AUTO
         4 000410   000433 604400 4                  TMOZ    s:3672

      990     3665    4              GDA# = FM$GRAN.FLINK;

   3665  4 000411   200444 470500                    LDP0    KGRAN$,,AUTO
         4 000412   000004 235100                    LDA     4,,PR0
         4 000413   200454 755100                    STA     GDA#,,AUTO

      991     3666    4              KGRAN# = GDA.GRAN;

   3666  4 000414   200454 236100                    LDQ     GDA#,,AUTO
         4 000415   777777 376007                    ANQ     -1,DL
         4 000416   000232 756000 2                  STQ     KGRAN#

      992     3667    4              IF KGRAN# = 0 THEN GOTO RPT_EOF; /* End of file     */
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:150  

   3667  4 000417   000616 600000 4                  TZE     RPT_EOF

      993     3668    4              CALL M$READ( READ_KGRAN )ALTRET( JUSTALT );

   3668  4 000420   000140 630400 2                  EPPR0   READ_KGRAN
         4 000421   440000 713400                    CLIMB   alt,read
         4 000422   401400 401760                    pmme    nvectors=4
         4 000423   000622 702000 4                  TSX2    JUSTALT

      994     3669    4              CALL FUI_UNPACK_KEY_GRAN;

   3669  4 000424   000624 701000 4                  TSX1    FUI_UNPACK_KEY_GRAN
         4 000425   000000 011000                    NOP     0

      995     3670    4              CRECX# = 1;        /* First key of gran        */

   3670  4 000426   000001 235007                    LDA     1,DL
         4 000427   200006 755100                    STA     CRECX#,,AUTO

      996     3671    4              END;

   3671  4 000430   200006 236100                    LDQ     CRECX#,,AUTO
         4 000431   200443 116100                    CMPQ    NUMKEYS#,,AUTO
         4 000432   000411 605400 4                  TPNZ    s:3665

      997     3672    3           CRECX$ = PINCRW( KGRAN$, KEYRECX#( CRECX# ));

   3672  4 000433   200012 236106                    LDQ     KEYRECX#,QL,AUTO
         4 000434   000022 736000                    QLS     18
         4 000435   200444 036100                    ADLQ    KGRAN$,,AUTO
         4 000436   200451 756100                    STQ     CRECX$,,AUTO

      998     3673    3           END /* until not CRECX$->FM$KEYENT.D */;

   3673  4 000437   200451 470500                    LDP0    CRECX$,,AUTO
         4 000440   000000 234100                    SZN     0,,PR0
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:151  
         4 000441   000405 604000 4                  TMI     s:3663

      999     3674
     1000     3675    2        MISEG$ = PINCRW( CRECX$, SIZEW(CRECX$->FM$KEYENT));
              3675                 /* Point to first MISEG entry */

   3675  4 000442   000000 236100                    LDQ     0,,PR0
         4 000443   000033 772000                    QRL     27
         4 000444   000377 376007                    ANQ     255,DL
         4 000445   000001 620006                    EAX0    1,QL
         4 000446   000000 636010                    EAQ     0,X0
         4 000447   000022 772000                    QRL     18
         4 000450   000011 402007                    MPY     9,DL
         4 000451   000043 036007                    ADLQ    35,DL
         4 000452   000044 506007                    DIV     36,DL
         4 000453   000022 736000                    QLS     18
         4 000454   200451 036100                    ADLQ    CRECX$,,AUTO
         4 000455   200452 756100                    STQ     MISEG$,,AUTO

     1001     3676    2        LEN = 0;

   3676  4 000456   200450 450100                    STZ     LEN,,AUTO

     1002     3677    2        CHK_VFC = %NO#;

   3677  4 000457   200447 450100                    STZ     CHK_VFC,,AUTO

     1003     3678    2        IF FM$MISEG.CTL & '001'B /* see if builtin VFC */

   3678  4 000460   200452 471500                    LDP1    MISEG$,,AUTO
         4 000461   100001 236100                    LDQ     1,,PR1
         4 000462   000001 736000                    QLS     1
         4 000463   776000 376003                    ANQ     -1024,DU
         4 000464   100000 376003                    ANQ     32768,DU
         4 000465   000471 600000 4                  TZE     s:3680

     1004     3679    2        THEN CHK_VFC = %YES#;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:152  

   3679  4 000466   400000 236003                    LDQ     -131072,DU
         4 000467   200447 756100                    STQ     CHK_VFC,,AUTO
         4 000470   000472 710000 4                  TRA     s:3682

     1005     3680    2        ELSE LEN = LEN + 1;      /* lengthc (LF) */

   3680  4 000471   200450 054100                    AOS     LEN,,AUTO

     1006     3681
     1007     3682    2        CRECNO# = CRECNO# + 1;

   3682  4 000472   200007 054100                    AOS     CRECNO#,,AUTO

     1008     3683    2   READ_DATA:               /* return record segment by segment. */
     1009     3684    3        DO WHILE( %YES# );

   3684  4 000473                       READ_DATA    null
     1010     3685    3           PAST_MISEG$ = PINCRW( KGRAN$, KEYRECX#( CRECX#+1 ));

   3685  4 000473   200006 720100                    LXL0    CRECX#,,AUTO
         4 000474   200013 236110                    LDQ     KEYRECX#+1,X0,AUTO
         4 000475   000022 736000                    QLS     18
         4 000476   200444 036100                    ADLQ    KGRAN$,,AUTO
         4 000477   200453 756100                    STQ     PAST_MISEG$,,AUTO

     1011     3686
     1012     3687    4           DO WHILE( MISEG$ < PAST_MISEG$ );

   3687  4 000500   200452 116100                    CMPQ    MISEG$,,AUTO
         4 000501   000565 602000 4                  TNC     s:3707
         4 000502   000565 600000 4                  TZE     s:3707

     1013     3688    4              LEN = LEN + FM$MISEG.GACTB; /* Number of bytes in segment */

   3688  4 000503   200452 470500                    LDP0    MISEG$,,AUTO
         4 000504   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:153  
         4 000505   007777 376007                    ANQ     4095,DL
         4 000506   200450 036100                    ADLQ    LEN,,AUTO
         4 000507   200450 756100                    STQ     LEN,,AUTO

     1014     3689    4              IF CHK_VFC AND LEN > 0

   3689  4 000510   200447 234100                    SZN     CHK_VFC,,AUTO
         4 000511   000560 605000 4                  TPL     s:3705
         4 000512   000000 116003                    CMPQ    0,DU
         4 000513   000560 604400 4                  TMOZ    s:3705

     1015     3690    5              THEN DO;      /* need to check what the VFC char is */

     1016     3691    5                 GDA# = FM$MISEG.GDA;

   3691  4 000514   000001 236100                    LDQ     1,,PR0
         4 000515   000032 376000 xsym               ANQ     B_VECTNIL+26
         4 000516   200454 756100                    STQ     GDA#,,AUTO

     1017     3692    5                 IF GDA.GRAN = KGRAN#

   3692  4 000517   200454 236100                    LDQ     GDA#,,AUTO
         4 000520   777777 376007                    ANQ     -1,DL
         4 000521   000232 116000 2                  CMPQ    KGRAN#
         4 000522   000532 601000 4                  TNZ     s:3695

     1018     3693    5                 THEN CRECX$ = PINCRW( KGRAN$, FM$MISEG.GX ); /* data in key gran */

   3693  4 000523   000000 236100                    LDQ     0,,PR0
         4 000524   000014 772000                    QRL     12
         4 000525   001777 376007                    ANQ     1023,DL
         4 000526   000022 736000                    QLS     18
         4 000527   200444 036100                    ADLQ    KGRAN$,,AUTO
         4 000530   200451 756100                    STQ     CRECX$,,AUTO
         4 000531   000550 710000 4                  TRA     s:3702

     1019     3694    6                 ELSE DO;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:154  

     1020     3695    6                    IF GDA.GRAN ~= DGRAN#

   3695  4 000532   000233 116000 2                  CMPQ    DGRAN#
         4 000533   000541 600000 4                  TZE     s:3700

     1021     3696    7                    THEN DO;

     1022     3697    7                       DGRAN# = GDA.GRAN;

   3697  4 000534   000233 756000 2                  STQ     DGRAN#

     1023     3698    7                       CALL M$READ( READ_DGRAN )ALTRET( JUSTALT);

   3698  4 000535   000156 630400 2                  EPPR0   READ_DGRAN
         4 000536   440000 713400                    CLIMB   alt,read
         4 000537   401400 401760                    pmme    nvectors=4
         4 000540   000622 702000 4                  TSX2    JUSTALT

     1024     3699    7                       END;

     1025     3700    6                    CRECX$ = PINCRW( DGRAN$, FM$MISEG.GX );

   3700  4 000541   200452 470500                    LDP0    MISEG$,,AUTO
         4 000542   000000 236100                    LDQ     0,,PR0
         4 000543   000014 772000                    QRL     12
         4 000544   001777 376007                    ANQ     1023,DL
         4 000545   000022 736000                    QLS     18
         4 000546   200445 036100                    ADLQ    DGRAN$,,AUTO
         4 000547   200451 756100                    STQ     CRECX$,,AUTO

     1026     3701    6                    END;

     1027     3702    5                 LEN = LEN + VFC_ADJUST( CRECX$->VFC );

   3702  4 000550   200451 471500                    LDP1    CRECX$,,AUTO
         4 000551   100000 236100                    LDQ     0,,PR1
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:155  
         4 000552   000033 772000                    QRL     27
         4 000553   000000 620006                    EAX0    0,QL
         4 000554   200450 236100                    LDQ     LEN,,AUTO
         4 000555   000002 036010 3                  ADLQ    VFC_ADJUST,X0
         4 000556   200450 756100                    STQ     LEN,,AUTO

     1028     3703    5                 CHK_VFC = %NO#;

   3703  4 000557   200447 450100                    STZ     CHK_VFC,,AUTO

     1029     3704    5                 END;

     1030     3705    4              MISEG$ = PINCRW( MISEG$, LENGTHW(FM$MISEG) );

   3705  4 000560   200452 236100                    LDQ     MISEG$,,AUTO
         4 000561   000002 036003                    ADLQ    2,DU
         4 000562   200452 756100                    STQ     MISEG$,,AUTO

     1031     3706    4              END;

   3706  4 000563   200453 116100                    CMPQ    PAST_MISEG$,,AUTO
         4 000564   000503 602000 4                  TNC     s:3688

     1032     3707    3           IF CRECX# < NUMKEYS#

   3707  4 000565   200006 236100                    LDQ     CRECX#,,AUTO
         4 000566   200443 116100                    CMPQ    NUMKEYS#,,AUTO
         4 000567   000614 604000 4                  TMI     s:3719

     1033     3708    3           THEN EXIT READ_DATA;  /* Another segment can't exist */
     1034     3709    3           GDA# = FM$GRAN.FLINK;

   3709  4 000570   200444 470500                    LDP0    KGRAN$,,AUTO
         4 000571   000004 235100                    LDA     4,,PR0
         4 000572   200454 755100                    STA     GDA#,,AUTO

     1035     3710    3           KGRAN# = GDA.GRAN;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:156  

   3710  4 000573   200454 236100                    LDQ     GDA#,,AUTO
         4 000574   777777 376007                    ANQ     -1,DL
         4 000575   000232 756000 2                  STQ     KGRAN#

     1036     3711    3           IF KGRAN# = 0

   3711  4 000576   000614 600000 4                  TZE     s:3719

     1037     3712    3           THEN EXIT READ_DATA;  /* Another segment can't exist */
     1038     3713    3           CALL M$READ( READ_KGRAN )ALTRET( JUSTALT );

   3713  4 000577   000140 630400 2                  EPPR0   READ_KGRAN
         4 000600   440000 713400                    CLIMB   alt,read
         4 000601   401400 401760                    pmme    nvectors=4
         4 000602   000622 702000 4                  TSX2    JUSTALT

     1039     3714    3           CALL FUI_UNPACK_KEY_GRAN;

   3714  4 000603   000624 701000 4                  TSX1    FUI_UNPACK_KEY_GRAN
         4 000604   000000 011000                    NOP     0

     1040     3715    3           CRECX# = 0;           /* Before first key of gran */

   3715  4 000605   200006 450100                    STZ     CRECX#,,AUTO

     1041     3716    3           MISEG$ = PINCRW( KGRAN$, KEYRECX#( CRECX# ));

   3716  4 000606   200006 720100                    LXL0    CRECX#,,AUTO
         4 000607   200012 236110                    LDQ     KEYRECX#,X0,AUTO
         4 000610   000022 736000                    QLS     18
         4 000611   200444 036100                    ADLQ    KGRAN$,,AUTO
         4 000612   200452 756100                    STQ     MISEG$,,AUTO

     1042     3717    3           END;

   3717  4 000613   000473 710000 4                  TRA     READ_DATA
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:157  

     1043     3718
     1044     3719    2        RETURN;

   3719  4 000614   200460 221300                    LDX1  ! GDA#+4,,AUTO
         4 000615   000001 702211                    TSX2  ! 1,X1

   3716  4 000616                       RPT_EOF      null
     1045     3720
     1046     3721    2   RPT_EOF: ;
     1047     3722    2        ERROR# = E_EOF;

   3722  4 000616   000000 236000 3                  LDQ     E_EOF
         4 000617   000234 756000 2                  STQ     ERROR#

     1048     3723    2        EOF# = %YES#;

   3723  4 000620   400000 236003                    LDQ     -131072,DU
         4 000621   200010 756100                    STQ     EOF#,,AUTO

   3723  4 000622                       JUSTALT      null
     1049     3724    2   JUSTALT: ;
     1050     3725    2        ALTRETURN;

   3725  4 000622   200460 221300                    LDX1  ! GDA#+4,,AUTO
         4 000623   000000 702211                    TSX2  ! 0,X1

     1051     3726
     1052     3727    2   END FUI_KEYED_READ;
     1053     3728        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:158  
     1054     3729        /*I*  NAME:      FUI_UNPACK_KEY_GRAN
     1055     3730              Purpose:   To unpack a key granule's key indices for easier access.
     1056     3731        */
     1057     3732    1   FUI_UNPACK_KEY_GRAN: PROC ALTRET;

   3732  4 000624   200462 741300       FUI_UNPACK_* STX1  ! GDA#+6,,AUTO

     1058     3733
     1059     3734    2   DCL KEYTBL$ PTR;
     1060     3735        %FM$KEYTBL (BASED="BASED (KEYTBL$)");
     1061     3738    2   DCL KEYNUM SBIN;
     1062     3739    2   DCL KEY512 SBIN;
     1063     3740
     1064     3741
     1065     3742    2        KEYTBL$ = PINCRW( KGRAN$, FM$GRAN.FCEX );

   3742  4 000625   200444 470500                    LDP0    KGRAN$,,AUTO
         4 000626   000002 220100                    LDX0    2,,PR0
         4 000627   000000 636010                    EAQ     0,X0
         4 000630   200444 036100                    ADLQ    KGRAN$,,AUTO
         4 000631   200463 756100                    STQ     KEYTBL$,,AUTO

     1066     3743    2        NUMKEYS# = FM$GRAN.KEYCNT;

   3743  4 000632   000002 236100                    LDQ     2,,PR0
         4 000633   000777 376007                    ANQ     511,DL
         4 000634   200443 756100                    STQ     NUMKEYS#,,AUTO

     1067     3744    2        KEY512 = FM$KEYTBL(0);   /* any key > this : add 512 to it */

   3744  4 000635   200463 471500                    LDP1    KEYTBL$,,AUTO
         4 000636   100000 236100                    LDQ     0,,PR1
         4 000637   000033 772000                    QRL     27
         4 000640   200465 756100                    STQ     KEY512,,AUTO

     1068     3745    2        KEYRECX#(0) = FM$GRAN.FCEX+SIZEW(FM$KEYTBL);

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:159  
   3745  4 000641   000002 236100                    LDQ     2,,PR0
         4 000642   000022 772000                    QRL     18
         4 000643   000106 036007                    ADLQ    70,DL
         4 000644   200012 756100                    STQ     KEYRECX#,,AUTO

     1069     3746    3        DO KEYNUM = 1 TO NUMKEYS#;

   3746  4 000645   000001 235007                    LDA     1,DL
         4 000646   200464 755100                    STA     KEYNUM,,AUTO
         4 000647   000666 710000 4                  TRA     s:3749+1

     1070     3747    3           KEYRECX#( KEYNUM ) = FM$KEYTBL( KEYNUM );

   3747  4 000650   200464 235100                    LDA     KEYNUM,,AUTO
         4 000651   000002 735000                    ALS     2
         4 000652   200463 470500                    LDP0    KEYTBL$,,AUTO
         4 000653   200464 236100                    LDQ     KEYNUM,,AUTO
         4 000654   000105 101506                    MRL     fill='000'O
         4 000655   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         4 000656   200012 000004                    ADSC9   KEYRECX#,A,AUTO          cn=0,n=4

     1071     3748    3           IF KEYNUM >= KEY512 THEN KEYRECX#( KEYNUM ) = KEYRECX#( KEYNUM )+512;

   3748  4 000657   200465 116100                    CMPQ    KEY512,,AUTO
         4 000660   000665 604000 4                  TMI     s:3749

   3748  4 000661   200464 720100                    LXL0    KEYNUM,,AUTO
         4 000662   200012 235106                    LDA     KEYRECX#,QL,AUTO
         4 000663   001000 035007                    ADLA    512,DL
         4 000664   200012 755110                    STA     KEYRECX#,X0,AUTO

     1072     3749    3           END;

   3749  4 000665   200464 054100                    AOS     KEYNUM,,AUTO
         4 000666   200464 236100                    LDQ     KEYNUM,,AUTO
         4 000667   200443 116100                    CMPQ    NUMKEYS#,,AUTO
         4 000670   000650 604400 4                  TMOZ    s:3747
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:160  

     1073     3750    2        KEYRECX#( KEYNUM ) = FM$GRAN.NAVX;

   3750  4 000671   200444 470500                    LDP0    KGRAN$,,AUTO
         4 000672   000001 236100                    LDQ     1,,PR0
         4 000673   000022 772000                    QRL     18
         4 000674   200464 720100                    LXL0    KEYNUM,,AUTO
         4 000675   200012 756110                    STQ     KEYRECX#,X0,AUTO

     1074     3751
     1075     3752    2        RETURN;

   3752  4 000676   200462 221300                    LDX1  ! GDA#+6,,AUTO
         4 000677   000001 702211                    TSX2  ! 1,X1

     1076     3753
     1077     3754    2   END FUI_UNPACK_KEY_GRAN;
     1078     3755
     1079     3756        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:161  
     1080     3757        /*I*  NAME:      FUI_CONSEC_READ
     1081     3758              Purpose:   To get the length for the CONSEC or UR file's next record
     1082     3759              Algorithm: Position to the start of the next record.  Keep adding the
     1083     3760                         length of record segments while a next segment exists,
     1084     3761                         and the start of the next record is not encountered.  If
     1085     3762                         there's a VFC char to check, it's in the same granule.
     1086     3763        */
     1087     3764    1   FUI_CONSEC_READ: PROC ALTRET;

   3764  4 000700   200460 741300       FUI_CONSEC_* STX1  ! GDA#+4,,AUTO

     1088     3765
     1089     3766    3        DO UNTIL( FM$CON.FAK ~= 0 ); /* Find beginning of next record */

     1090     3767    3           CALL FUI_CONSEC_SEG ALTRET( EOF_EXPECTED );

   3767  4 000701   000774 701000 4                  TSX1    FUI_CONSEC_SEG
         4 000702   000772 702000 4                  TSX2    JUSTALT

     1091     3768    3           END;                  /* do until FM$CON.FAK ~= 0 */

   3768  4 000703   200451 470500                    LDP0    CRECX$,,AUTO
         4 000704   000000 236100                    LDQ     0,,PR0
         4 000705   400000 316003                    CANQ    -131072,DU
         4 000706   000701 600000 4                  TZE     s:3767

     1092     3769    2        CRECNO# = CRECNO# + 1;

   3769  4 000707   200007 054100                    AOS     CRECNO#,,AUTO

     1093     3770
     1094     3771    2        LEN = 0;

   3771  4 000710   200450 450100                    STZ     LEN,,AUTO

     1095     3772    2        CHK_VFC = %NO#;

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:162  
   3772  4 000711   200447 450100                    STZ     CHK_VFC,,AUTO

     1096     3773    2        IF FM$CON.CTL & '001'B   /* look for builtin VFC     */

   3773  4 000712   000000 236100                    LDQ     0,,PR0
         4 000713   000004 736000                    QLS     4
         4 000714   776000 376003                    ANQ     -1024,DU
         4 000715   100000 376003                    ANQ     32768,DU
         4 000716   000722 600000 4                  TZE     s:3775

     1097     3774    2        THEN CHK_VFC = %YES#;

   3774  4 000717   400000 236003                    LDQ     -131072,DU
         4 000720   200447 756100                    STQ     CHK_VFC,,AUTO
         4 000721   000723 710000 4                  TRA     APPEND_CONSEC_SEG

     1098     3775    2        ELSE LEN = LEN + 1;      /* lengthc (LF) */

   3775  4 000722   200450 054100                    AOS     LEN,,AUTO

     1099     3776
     1100     3777    2   APPEND_CONSEC_SEG: /* Keep appending record segments for this record */
     1101     3778    2        LEN = LEN + FM$CON.GACTB; /* Get # bytes in segment   */

   3778  4 000723   200451 470500       APPEND_CONS* LDP0    CRECX$,,AUTO
         4 000724   000000 236100                    LDQ     0,,PR0
         4 000725   007777 376007                    ANQ     4095,DL
         4 000726   200450 036100                    ADLQ    LEN,,AUTO
         4 000727   200450 756100                    STQ     LEN,,AUTO

     1102     3779    2        IF CHK_VFC AND LEN > 0

   3779  4 000730   200447 234100                    SZN     CHK_VFC,,AUTO
         4 000731   000747 605000 4                  TPL     s:3785
         4 000732   000000 116003                    CMPQ    0,DU
         4 000733   000747 604400 4                  TMOZ    s:3785

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:163  
     1103     3780    3        THEN DO;

     1104     3781    3           LEN = LEN + VFC_ADJUST( ADDR(KGRAN(ADDR(KGRAN)->FM$CON.GX))->VFC );

   3781  4 000734   200444 471500                    LDP1    KGRAN$,,AUTO
         4 000735   100000 236100                    LDQ     0,,PR1
         4 000736   000014 772000                    QRL     12
         4 000737   001777 376007                    ANQ     1023,DL
         4 000740   100000 236106                    LDQ     0,QL,PR1
         4 000741   000033 772000                    QRL     27
         4 000742   000000 620006                    EAX0    0,QL
         4 000743   200450 236100                    LDQ     LEN,,AUTO
         4 000744   000002 036010 3                  ADLQ    VFC_ADJUST,X0
         4 000745   200450 756100                    STQ     LEN,,AUTO

     1105     3782    3           CHK_VFC = %NO#;

   3782  4 000746   200447 450100                    STZ     CHK_VFC,,AUTO

     1106     3783    3           END;

     1107     3784
     1108     3785    2        IF ( FM$CON.C ~= 0 )     /* continuation of segment */

   3785  4 000747   000000 236100                    LDQ     0,,PR0
         4 000750   200000 316003                    CANQ    65536,DU
         4 000751   000770 600000 4                  TZE     s:3800

     1109     3786    2        THEN
     1110     3787    2           CALL FUI_CONSEC_SEG

   3787  4 000752   000774 701000 4                  TSX1    FUI_CONSEC_SEG
         4 000753   000763 702000 4                  TSX2    s:3796

     1111     3788    3           WHENRETURN DO;

     1112     3789    3              IF FM$CON.FAK ~= 0
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:164  

   3789  4 000754   200451 470500                    LDP0    CRECX$,,AUTO
         4 000755   000000 236100                    LDQ     0,,PR0
         4 000756   400000 316003                    CANQ    -131072,DU
         4 000757   000723 600000 4                  TZE     APPEND_CONSEC_SEG

     1113     3790    3              THEN               /* Hit beginning of next record  */
     1114     3791    3                 CRECX# = CRECX# + 1; /* Remember position        */

   3791  4 000760   200006 054100                    AOS     CRECX#,,AUTO
         4 000761   000762 710000 4                  TRA     s:3791+2
         4 000762   000770 710000 4                  TRA     s:3800

     1115     3792    3              ELSE               /* a continuation segment - */
     1116     3793    3                 GOTO APPEND_CONSEC_SEG; /* append it */
     1117     3794    3              END;
     1118     3795    3           WHENALTRETURN DO;

     1119     3796    3              IF ERROR#.ERR# = %E$EOF THEN

   3796  4 000763   000234 236000 2                  LDQ     ERROR#
         4 000764   377770 376007                    ANQ     131064,DL
         4 000765   000060 116007                    CMPQ    48,DL
         4 000766   000770 601000 4                  TNZ     s:3800

     1120     3797    3                 ERROR#='0'B;    /* Give him what we have so far. */

   3797  4 000767   000234 450000 2                  STZ     ERROR#

     1121     3798    3              END;

     1122     3799
     1123     3800    2        RETURN;

   3800  4 000770   200460 221300                    LDX1  ! GDA#+4,,AUTO
         4 000771   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:165  
     1124     3801
     1125     3802    2   JUSTALT: ;

   3802  4 000772                       JUSTALT      null
   3802  4 000772                       EOF_EXPECTED null
     1126     3803    2   EOF_EXPECTED: ;
     1127     3804    2        ALTRETURN;

   3804  4 000772   200460 221300                    LDX1  ! GDA#+4,,AUTO
         4 000773   000000 702211                    TSX2  ! 0,X1

     1128     3805
     1129     3806    2   END FUI_CONSEC_READ;
     1130     3807        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:166  
     1131     3808        /*I*  NAME:      FUI_CONSEC_SEG
     1132     3809              Purpose:   Position to the next segment of a CONSEC or UR file.
     1133     3810        */
     1134     3811    1   FUI_CONSEC_SEG: PROC ALTRET;

   3811  4 000774   200462 741300       FUI_CONSEC_* STX1  ! GDA#+6,,AUTO

     1135     3812
     1136     3813    2        CRECX# = CRECX# - 1;     /* Next control word      */

   3813  4 000775   000001 336007                    LCQ     1,DL
         4 000776   200006 056100                    ASQ     CRECX#,,AUTO

     1137     3814
     1138     3815    3        DO WHILE (CRECX# < LCRECX#);

   3815  4 000777   200006 236100                    LDQ     CRECX#,,AUTO
         4 001000   200005 116100                    CMPQ    LCRECX#,,AUTO
         4 001001   001020 605000 4                  TPL     s:3821

     1139     3816    3           CALL FUI_GET_NEXT_GRAN ALTRET( JUSTALT );

   3816  4 001002   001030 701000 4                  TSX1    FUI_GET_NEXT_GRAN
         4 001003   001026 702000 4                  TSX2    JUSTALT

     1140     3817    3           CRECX# = %(GRANULE_SIZE-1); /* Index of first record control word */

   3817  4 001004   001777 235007                    LDA     1023,DL
         4 001005   200006 755100                    STA     CRECX#,,AUTO

     1141     3818    3           LCRECX# = FM$GRAN.NAVX + KGRAN$->FM$GRAN.AVAIL;

   3818  4 001006   200444 470500                    LDP0    KGRAN$,,AUTO
         4 001007   000001 236100                    LDQ     1,,PR0
         4 001010   001777 376007                    ANQ     1023,DL
         4 001011   200466 756100                    STQ     KEY512+1,,AUTO
         4 001012   000001 236100                    LDQ     1,,PR0
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:167  
         4 001013   000022 772000                    QRL     18
         4 001014   200466 036100                    ADLQ    KEY512+1,,AUTO
         4 001015   200005 756100                    STQ     LCRECX#,,AUTO

     1142     3819    3           END;

   3819  4 001016   200006 116100                    CMPQ    CRECX#,,AUTO
         4 001017   001002 605400 4                  TPNZ    s:3816

     1143     3820
     1144     3821    2        CRECX$ = ADDR( KGRAN( CRECX# ) );

   3821  4 001020   200006 236100                    LDQ     CRECX#,,AUTO
         4 001021   000022 736000                    QLS     18
         4 001022   200444 036100                    ADLQ    KGRAN$,,AUTO
         4 001023   200451 756100                    STQ     CRECX$,,AUTO

     1145     3822    2        RETURN;

   3822  4 001024   200462 221300                    LDX1  ! GDA#+6,,AUTO
         4 001025   000001 702211                    TSX2  ! 1,X1

   3821  4 001026                       JUSTALT      null
     1146     3823
     1147     3824    2   JUSTALT: ;
     1148     3825    2        ALTRETURN;

   3825  4 001026   200462 221300                    LDX1  ! GDA#+6,,AUTO
         4 001027   000000 702211                    TSX2  ! 0,X1

     1149     3826
     1150     3827    2   END FUI_CONSEC_SEG;
     1151     3828        %EJECT;
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:168  
     1152     3829        /*I*  NAME:      FUI_GET_NEXT_GRAN
     1153     3830              Purpose:   Read the next granule of the CONSEC or UR input file.
     1154     3831        */
     1155     3832    1   FUI_GET_NEXT_GRAN: PROC ALTRET;

   3832  4 001030   200464 741300       FUI_GET_NEX* STX1  ! KEYNUM,,AUTO

     1156     3833
     1157     3834    2        IF NOT KGRAN$->FM$GRAN.ENDLVL

   3834  4 001031   200444 470500                    LDP0    KGRAN$,,AUTO
         4 001032   000002 236100                    LDQ     2,,PR0
         4 001033   400000 316007                    CANQ    -131072,DL
         4 001034   001042 601000 4                  TNZ     s:3841

     1158     3835    3        THEN DO;                 /* That *was* the last granule   */

     1159     3836    3           ERROR# = E_EOF;

   3836  4 001035   000000 236000 3                  LDQ     E_EOF
         4 001036   000234 756000 2                  STQ     ERROR#

     1160     3837    3           EOF# = %YES#;

   3837  4 001037   400000 236003                    LDQ     -131072,DU
         4 001040   200010 756100                    STQ     EOF#,,AUTO

     1161     3838    3           ALTRETURN;

   3838  4 001041   000000 702211                    TSX2  ! 0,X1

     1162     3839    3           END;
     1163     3840
     1164     3841    2        KGRAN# = KGRAN# + 1;     /* get the next granule. */

   3841  4 001042   000232 054000 2                  AOS     KGRAN#

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:169  
     1165     3842    2        CALL M$READ (READ_KGRAN) ALTRET (RTN_ERR);

   3842  4 001043   000140 630400 2                  EPPR0   READ_KGRAN
         4 001044   440000 713400                    CLIMB   alt,read
         4 001045   401400 401760                    pmme    nvectors=4
         4 001046   001060 702000 4                  TSX2    RTN_ERR

     1166     3843
     1167     3844    2        IF KGRAN(0) ~= -1 THEN

   3844  4 001047   200444 470500                    LDP0    KGRAN$,,AUTO
         4 001050   000000 235100                    LDA     0,,PR0
         4 001051   000027 115000 xsym               CMPA    B_VECTNIL+23
         4 001052   001055 600000 4                  TZE     s:3846

     1168     3845    2           RETURN;

   3845  4 001053   200464 221300                    LDX1  ! KEYNUM,,AUTO
         4 001054   000001 702211                    TSX2  ! 1,X1

     1169     3846    2        ERROR# = E_DI;

   3846  4 001055   000001 236000 3                  LDQ     E_DI
         4 001056   000234 756000 2                  STQ     ERROR#

     1170     3847    2        GOTO JUSTALT;

   3847  4 001057   001064 710000 4                  TRA     JUSTALT

     1171     3848
     1172     3849    2   RTN_ERR:
     1173     3850    2        ERROR# = B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   3850  4 001060   000000 470400 xsym  RTN_ERR      LDP0    B$TCB$
         4 001061   000000 471500                    LDP1    0,,PR0
         4 001062   100102 236100                    LDQ     66,,PR1
         4 001063   000234 756000 2                  STQ     ERROR#
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:170  

   3846  4 001064                       JUSTALT      null
     1174     3851    2   JUSTALT:;
     1175     3852    2        ALTRETURN;

   3852  4 001064   200464 221300                    LDX1  ! KEYNUM,,AUTO
         4 001065   000000 702211                    TSX2  ! 0,X1
     1176     3853
     1177     3854    2   END FUI_GET_NEXT_GRAN;
     1178     3855
     1179     3856    1   END FUI$FILELEN;
     1180     3857        %EOD;

PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:171  
--  Include file information  --

   FU_NFS_M.:FUA2TOU  is referenced.
   B$JIT.:E05OU  cannot be made into a system file and is referenced.
   FM$GRAN.:E05OU  is referenced.
   FM$FIT.:E05OU  is referenced.
   B_ERRORS_C.:E05OU  is referenced.
   CP_6_SUBS.:E05OU  is referenced.
   CP_6.:E05OU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FUI$FILELEN.
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:172  

 **** Variables and constants ****

  ****  Section 002  Data  FUI$FILELEN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   235-0-0/c STRC        r     1 BINKEY                   174-0-0/d STRC(1080)  r     1 CLOSE_INPUT
   233-0-0/w SBIN        r     1 DGRAN#                   234-0-0/w STRC        r     1 ERROR#
   232-0-0/w SBIN        r     1 KGRAN#                     0-0-0/d STRC(2088)  r     1 OPEN_INPUT
   110-0-0/d STRC(360)   r     1 POS_BINARY                72-0-0/d STRC(504)   r     1 READ_BINARY
   156-0-0/d STRC(504)   r     1 READ_DGRAN               122-0-0/d STRC(504)   r     1 READ_INPUT
   140-0-0/d STRC(504)   r     1 READ_KGRAN

  ****  Section 003 RoData FUI$FILELEN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w STRC        r     1 E_DI                       0-0-0/w STRC        r     1 E_EOF
     2-0-0/w SBIN        r     1 VFC_ADJUST(0:511)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CODE03                    3-0-0/w PTR         r     1 @FILELEN
   447-0-0/b BIT         r     1 CHK_VFC                   *0-0-0/w STRC(324)   r     1 CODE03
     7-0-0/w SBIN        r     1 CRECNO#                    6-0-0/w SBIN        r     1 CRECX#
   451-0-0/w PTR         r     1 CRECX$                   445-0-0/w PTR         r     1 DGRAN$
    10-0-0/b BIT         r     1 EOF#                     446-0-0/w PTR         r     1 F$TEST$
    *0-0-0/w UBIN        r     1 FILELEN                  454-0-0/w STRC        r     1 GDA
   454-0-0/w UBIN        r     1 GDA#                     465-0-0/w SBIN        r     1 KEY512
   464-0-0/w SBIN        r     1 KEYNUM                    12-0-0/w SBIN        r     1 KEYRECX#(0:280)
   463-0-0/w PTR         r     1 KEYTBL$                  444-0-0/w PTR         r     1 KGRAN$
     5-0-0/w SBIN        r     1 LCRECX#                  450-0-0/w SBIN        r     1 LEN
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:173  
   452-0-0/w PTR         r     1 MISEG$                   443-0-0/w SBIN        r     1 NUMKEYS#
    11-0-0/w SBIN        r     1 ORG#                     453-0-0/w PTR         r     1 PAST_MISEG$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$DS8                      0-0-0/w PTR         r     1 B$JIT$
     0-0-0/w PTR         r     1 B$TCB$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w SBIN        r     1 DGRAN(0:1023)              0-0-0/w STRC(4716)  r     1 DS
     0-0-0N  NULL        r     1 F$TEST                     0-0-0/w STRC        r     1 FM$CON
     0-0-0/w STRC(180)   r     1 FM$GRAN                    0-0-0/w ASTR(9)     r     1 FM$KEYENT
     0-0-0/w UBIN(9)     r     1 FM$KEYTBL(0:279)
     0-0-0/w UBIN        r     1 FM$KT(0:69)                0-0-0/w STRC(72)    r     1 FM$MISEG
     0-0-0/w SBIN        r     1 KGRAN(0:1023)              0-0-0/d ASTR(3528)  r     1 USERDCB
     0-0-0/w UBIN(9)     r     1 VFC


   Procedure FUI$FILELEN requires 566 words for executable code.
   Procedure FUI$FILELEN requires 312 words of local(AUTO) storage.
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:174  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:175  
          MINI XREF LISTING

APPEND_CONSEC_SEG IN PROCEDURE FUI_CONSEC_READ
      3778**LABEL    3793--GOTO
B$ALT.CODE
      2917**DCL      2917--REDEF    2918--REDEF    2918--REDEF
B$ALT.ERR
      2918**DCL      3622>>ASSIGN   3629>>ASSIGN   3640>>ASSIGN   3850>>ASSIGN
B$ALT.ERR.ERR#
      2919**DCL      2919--REDEF
B$ALT.EVID
      2918**DCL      2918--REDEF    2918--REDEF
B$DS8
      2879**DCL      2894--IMP-PTR  3542>>IF       3550>>IF       3554>>IF
B$JIT.CPFLAGS1.SLEAZE
      2167**DCL      2167--REDEF
B$JIT.ERR.MID
      2074**DCL      2074--REDEF
B$JIT.JRESPEAK
      2235**DCL      2236--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      2344**DCL      2344--REDEF    2345--REDEF
B$JIT.PNR
      2248**DCL      2248--REDEF
B$JIT.TSLINE
      2342**DCL      2343--REDEF
B$JIT$
      2910**DCL      2068--IMP-PTR
B$TCB.ALT$
      2912**DCL      3622>>ASSIGN   3629>>ASSIGN   3640>>ASSIGN   3850>>ASSIGN
B$TCB$
      2914**DCL      3622>>ASSIGN   3629>>ASSIGN   3640>>ASSIGN   3850>>ASSIGN
BINKEY
      3511**DCL      3114--DCLINIT  3115--DCLINIT
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:176  
BINKEY.VAL
      3511**DCL      3619>>ASSIGN
CHK_VFC
      3519**DCL      3677<<ASSIGN   3679<<ASSIGN   3689>>IF       3703<<ASSIGN   3772<<ASSIGN   3774<<ASSIGN
      3779>>IF       3782<<ASSIGN
CLOSE_INPUT
      3308**DCL      3591<>CALL
CLOSE_INPUT.SN_
      3308**DCL      3308--REDEF
CLOSE_INPUT.UTL_
      3309**DCL      3309--REDEF
CLOSE_INPUT.V
      3313**DCL      3308--DCLINIT
CLOSE_INPUT.V.EXPIRE#
      3323**DCL      3323--REDEF
CLOSE_INPUT.V.TYPE#
      3321**DCL      3321--REDEF
CLOSE_INPUT.V.XTNSIZE#
      3318**DCL      3318--REDEF    3320--REDEF
CODE03
      2869**DCL        20--PROC
CODE03.COMP
      2871**DCL      3546>>IF
CODE03.DESC.BAD
      2870**DCL      3546>>IF
CODE03.NRECS
      2871**DCL      3544>>ASSIGN
CODE03.ORG
      2869**DCL      3539>>IF       3546>>IF       3546>>IF       3546>>IF       3568>>ASSIGN
CODE03.TYPE
      2871**DCL      3539>>IF
CODE03.UGRANS
      2869**DCL      3550>>IF       3554>>IF
CRECNO#
      3436**DCL      3537<<ASSIGN   3626<<ASSIGN   3626>>ASSIGN   3682<<ASSIGN   3682>>ASSIGN   3769<<ASSIGN
      3769>>ASSIGN
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:177  
CRECX#
      3435**DCL      3575<<ASSIGN   3578<<ASSIGN   3663<<ASSIGN   3663>>ASSIGN   3664>>DOWHILE  3670<<ASSIGN
      3672>>ASSIGN   3685>>ASSIGN   3707>>IF       3715<<ASSIGN   3716>>ASSIGN   3791<<ASSIGN   3791>>ASSIGN
      3813<<ASSIGN   3813>>ASSIGN   3815>>DOWHILE  3817<<ASSIGN   3821>>ASSIGN
CRECX$
      3522**DCL      3498--IMP-PTR  3662>>DOUNTIL  3672<<ASSIGN   3675>>ASSIGN   3675>>ASSIGN   3675>>ASSIGN
      3693<<ASSIGN   3700<<ASSIGN   3702>>ASSIGN   3766>>DOUNTIL  3773>>IF       3778>>ASSIGN   3785>>IF
      3789>>IF       3821<<ASSIGN
DGRAN
      3490**DCL      3563--ASSIGN
DGRAN#
      3433**DCL      3262--DCLINIT  3263--DCLINIT  3571<<ASSIGN   3695>>IF       3697<<ASSIGN
DGRAN$
      3488**DCL      3490--IMP-PTR  3558<>CALL     3563>>ASSIGN   3592<>CALL     3700>>ASSIGN
DS.QREADLIM
      2901**DCL      3542>>IF       3550>>IF
DS.SREADLIM
      2902**DCL      3554>>IF
EOF#
      3437**DCL      3536<<ASSIGN   3608>>IF       3624<<ASSIGN   3723<<ASSIGN   3837<<ASSIGN
EOF_EXPECTED IN PROCEDURE FUI_CONSEC_READ
      3802**LABEL    3767--CALLALT
ERROR#
      3453**DCL      3535<<ASSIGN   3606<<ASSIGN   3622<<ASSIGN   3629<<ASSIGN   3636<<ASSIGN   3640<<ASSIGN
      3647>>IF       3722<<ASSIGN   3797<<ASSIGN   3836<<ASSIGN   3846<<ASSIGN   3850<<ASSIGN
ERROR#.ERR#
      3483**DCL      3635>>DOWHILE  3796>>IF
EXITT
      3586**LABEL    3586--CALLALT
E_DI
      3396**DCL      3846>>ASSIGN
E_EOF
      3345**DCL      3722>>ASSIGN   3836>>ASSIGN
F$TEST
      2875**DCL      3557--ASSIGN
F$TEST$
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:178  
      3517**DCL      2924--IMP-PTR  3557<<ASSIGN   3566>>IF       3591>>IF       3619>>ASSIGN   3631>>ASSIGN
      3632>>IF       3633>>ASSIGN   3642>>ASSIGN
FILELEN
      2867**DCL        20--PROC     3584<<ASSIGN   3587<<ASSIGN   3587>>ASSIGN
FM$CON.C
      3498**DCL      3785>>IF
FM$CON.CTL
      3498**DCL      3773>>IF
FM$CON.FAK
      3498**DCL      3766>>DOUNTIL  3789>>IF
FM$CON.GACTB
      3498**DCL      3778>>ASSIGN
FM$CON.GX
      3498**DCL      3781>>ASSIGN
FM$GRAN.AVAIL
      3495**DCL      3576>>ASSIGN   3818>>ASSIGN
FM$GRAN.ENDLVL
      3495**DCL      3834>>IF
FM$GRAN.FCEX
      3495**DCL      3742>>ASSIGN   3745>>ASSIGN
FM$GRAN.FLINK
      3495**DCL      3665>>ASSIGN   3709>>ASSIGN
FM$GRAN.KEYCNT
      3495**DCL      3743>>ASSIGN
FM$GRAN.NAVX
      3494**DCL      3576>>ASSIGN   3750>>ASSIGN   3818>>ASSIGN
FM$KEYENT
      3502**DCL      3675--ASSIGN
FM$KEYENT.D
      3502**DCL      3662>>DOUNTIL
FM$KEYENT.KLB
      3502**DCL      3502--IMP-SIZ  3675>>ASSIGN
FM$KEYTBL IN PROCEDURE FUI_UNPACK_KEY_GRAN
      3736**DCL      3744>>ASSIGN   3745--ASSIGN   3747>>ASSIGN
FM$KT IN PROCEDURE FUI_UNPACK_KEY_GRAN
      3736**DCL      3736--REDEF
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:179  
FM$MISEG
      3505**DCL      3705--ASSIGN
FM$MISEG.CTL
      3506**DCL      3678>>IF
FM$MISEG.GACTB
      3505**DCL      3688>>ASSIGN
FM$MISEG.GDA
      3506**DCL      3691>>ASSIGN
FM$MISEG.GX
      3505**DCL      3693>>ASSIGN   3700>>ASSIGN
FUI$MEMALLOC
      3515**DCL-ENT  3558--CALL     3559--CALL
FUI$MEMFREE
      3516**DCL-ENT  3592--CALL     3593--CALL
FUI_CONSEC_READ
      3764**PROC     3612--CALL
FUI_CONSEC_SEG
      3811**PROC     3767--CALL     3787--CALL
FUI_GET_NEXT_GRAN
      3832**PROC     3816--CALL
FUI_KEYED_READ
      3660**PROC     3614--CALL
FUI_READ
      3604**PROC     3586--CALL
FUI_UNPACK_KEY_GRAN
      3732**PROC     3580--CALL     3669--CALL     3714--CALL
GDA.GRAN
      3529**DCL      3666>>ASSIGN   3692>>IF       3695>>IF       3697>>ASSIGN   3710>>ASSIGN
GDA#
      3526**DCL      3527--REDEF    3665<<ASSIGN   3691<<ASSIGN   3709<<ASSIGN
JUSTALT IN PROCEDURE FUI_CONSEC_SEG
      3821**LABEL    3816--CALLALT
JUSTALT IN PROCEDURE FUI_GET_NEXT_GRAN
      3846**LABEL    3847--GOTO
JUSTALT IN PROCEDURE FUI_KEYED_READ
      3723**LABEL    3668--CALLALT  3698--CALLALT  3713--CALLALT
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:180  
KEY512 IN PROCEDURE FUI_UNPACK_KEY_GRAN
      3739**DCL      3744<<ASSIGN   3748>>IF
KEYNUM IN PROCEDURE FUI_UNPACK_KEY_GRAN
      3738**DCL      3746<<DOINDEX  3747>>ASSIGN   3747>>ASSIGN   3748>>IF       3748>>ASSIGN   3748>>ASSIGN
      3750>>ASSIGN
KEYRECX#
      3439**DCL      3672>>ASSIGN   3685>>ASSIGN   3716>>ASSIGN   3745<<ASSIGN   3747<<ASSIGN   3748<<ASSIGN
      3748>>ASSIGN   3750<<ASSIGN
KEYTBL$ IN PROCEDURE FUI_UNPACK_KEY_GRAN
      3734**DCL      3736--IMP-PTR  3736--IMP-PTR  3742<<ASSIGN   3744>>ASSIGN   3747>>ASSIGN
KGRAN
      3489**DCL      3560--ASSIGN   3561--ASSIGN   3562--ASSIGN   3781--ASSIGN   3781--ASSIGN   3821--ASSIGN
      3844>>IF
KGRAN#
      3432**DCL      3219--DCLINIT  3220--DCLINIT  3570<<ASSIGN   3666<<ASSIGN   3667>>IF       3692>>IF
      3710<<ASSIGN   3711>>IF       3841<<ASSIGN   3841>>ASSIGN
KGRAN$
      3487**DCL      3489--IMP-PTR  3494--IMP-PTR  3559<>CALL     3560>>ASSIGN   3561>>ASSIGN   3562>>ASSIGN
      3576>>ASSIGN   3576>>ASSIGN   3593<>CALL     3665>>ASSIGN   3672>>ASSIGN   3685>>ASSIGN   3693>>ASSIGN
      3709>>ASSIGN   3716>>ASSIGN   3742>>ASSIGN   3742>>ASSIGN   3743>>ASSIGN   3745>>ASSIGN   3750>>ASSIGN
      3781>>ASSIGN   3781>>ASSIGN   3818>>ASSIGN   3818>>ASSIGN   3821>>ASSIGN   3834>>IF       3844>>IF
LCRECX#
      3434**DCL      3576<<ASSIGN   3579<<ASSIGN   3815>>DOWHILE  3818<<ASSIGN
LEN
      3520**DCL      3587>>ASSIGN   3619<<ASSIGN   3631<<ASSIGN   3633<<ASSIGN   3633>>ASSIGN   3634<<ASSIGN
      3634>>ASSIGN   3642<<ASSIGN   3642>>ASSIGN   3676<<ASSIGN   3680<<ASSIGN   3680>>ASSIGN   3688<<ASSIGN
      3688>>ASSIGN   3689>>IF       3702<<ASSIGN   3702>>ASSIGN   3771<<ASSIGN   3775<<ASSIGN   3775>>ASSIGN
      3778<<ASSIGN   3778>>ASSIGN   3779>>IF       3781<<ASSIGN   3781>>ASSIGN
M$CLOSE
        31**DCL-ENT  3591--CALL
M$OPEN
        31**DCL-ENT  3565--CALL
M$PRECORD
        35**DCL-ENT  3616--CALL
M$READ
        32**DCL-ENT  3572--CALL     3617--CALL     3627--CALL     3638--CALL     3668--CALL     3698--CALL
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:181  
      3713--CALL     3842--CALL
MISEG$
      3523**DCL      3505--IMP-PTR  3675<<ASSIGN   3678>>IF       3687>>DOWHILE  3688>>ASSIGN   3691>>ASSIGN
      3693>>ASSIGN   3700>>ASSIGN   3705<<ASSIGN   3705>>ASSIGN   3716<<ASSIGN
NUMKEYS#
      3440**DCL      3664>>DOWHILE  3707>>IF       3743<<ASSIGN   3746>>DOINDEX
OPEN_INPUT
      3050**DCL      3565<>CALL
OPEN_INPUT.ACSVEH_
      3052**DCL      3053--REDEF
OPEN_INPUT.ALTKEYS_
      3058**DCL      3059--REDEF    3059--REDEF
OPEN_INPUT.HDR_
      3057**DCL      3058--REDEF
OPEN_INPUT.TAB_
      3056**DCL      3057--REDEF
OPEN_INPUT.UHL_
      3050**DCL      3051--REDEF    3051--REDEF
OPEN_INPUT.V
      3059**DCL      3050--DCLINIT
OPEN_INPUT.V.ACS#
      3070**DCL      3541<<ASSIGN   3549<<ASSIGN   3553<<ASSIGN
OPEN_INPUT.V.FSN#
      3090**DCL      3090--REDEF    3090--REDEF
OPEN_INPUT.WSN_
      3056**DCL      3056--REDEF
ORG#
      3438**DCL      3534<<ASSIGN   3543<<ASSIGN   3568<<ASSIGN   3573>>DOSELCT  3610>>DOCASE
PAST_MISEG$
      3524**DCL      3685<<ASSIGN   3687>>DOWHILE
POS_BINARY
      3148**DCL      3616<>CALL
POS_BINARY.V
      3150**DCL      3148--DCLINIT
POS_BINARY.V.N#
      3154**DCL      3544<<ASSIGN   3616>>IF
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:182  
READ_BINARY
      3114**DCL      3617<>CALL
READ_BINARY.BUF_
      3116**DCL      3561<<ASSIGN
READ_BINARY.STATION_
      3117**DCL      3118--REDEF
READ_BINARY.V
      3118**DCL      3114--DCLINIT
READ_BINARY.V.DVBYTE.REREAD#
      3129**DCL      3129--REDEF
READ_BINARY.V.INDX#
      3127**DCL      3127--REDEF
READ_DATA IN PROCEDURE FUI_KEYED_READ
      3684**LABEL    3708--EXIT     3712--EXIT
READ_DGRAN
      3262**DCL      3698<>CALL
READ_DGRAN.BUF_
      3264**DCL      3563<<ASSIGN
READ_DGRAN.STATION_
      3265**DCL      3266--REDEF
READ_DGRAN.V
      3266**DCL      3262--DCLINIT
READ_DGRAN.V.DVBYTE.REREAD#
      3277**DCL      3277--REDEF
READ_DGRAN.V.INDX#
      3275**DCL      3275--REDEF
READ_INPUT
      3176**DCL      3627<>CALL     3638<>CALL
READ_INPUT.BUF_
      3178**DCL      3560<<ASSIGN
READ_INPUT.STATION_
      3179**DCL      3180--REDEF
READ_INPUT.V
      3180**DCL      3176--DCLINIT
READ_INPUT.V.DVBYTE.CONT#
      3193**DCL      3637<<ASSIGN   3643<<ASSIGN
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:183  
READ_INPUT.V.DVBYTE.REREAD#
      3191**DCL      3191--REDEF
READ_INPUT.V.INDX#
      3189**DCL      3189--REDEF
READ_KGRAN
      3219**DCL      3572<>CALL     3668<>CALL     3713<>CALL     3842<>CALL
READ_KGRAN.BUF_
      3221**DCL      3562<<ASSIGN
READ_KGRAN.STATION_
      3222**DCL      3223--REDEF
READ_KGRAN.V
      3223**DCL      3219--DCLINIT
READ_KGRAN.V.DVBYTE.REREAD#
      3234**DCL      3234--REDEF
READ_KGRAN.V.INDX#
      3232**DCL      3232--REDEF
RPT_EOF IN PROCEDURE FUI_KEYED_READ
      3716**LABEL    3667--GOTO
RTN_ERR IN PROCEDURE FUI_GET_NEXT_GRAN
      3850**LABEL    3842--CALLALT
USERDCB.ACS#
      2948**DCL      3566>>IF
USERDCB.ACTPOS
      2956**DCL      2956--REDEF
USERDCB.ARS#
      2930**DCL      2930--REDEF    3619>>ASSIGN   3631>>ASSIGN   3642>>ASSIGN
USERDCB.ATTR
      2949**DCL      2950--REDEF
USERDCB.BORROW
      2964**DCL      2964--REDEF    2964--REDEF    2964--REDEF
USERDCB.DCBNAME.L
      2978**DCL      2978--IMP-SIZ
USERDCB.DVBYTE.VFC#
      2933**DCL      3632>>IF
USERDCB.EOMCHAR#
      2934**DCL      2934--REDEF
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:184  
USERDCB.FCD#
      2943**DCL      3591>>IF
USERDCB.FLDID
      2959**DCL      2959--REDEF
USERDCB.FORM$
      2953**DCL      2953--REDEF
USERDCB.FSECT
      2969**DCL      2969--REDEF
USERDCB.FSN#
      2946**DCL      2946--REDEF    2946--REDEF    2947--REDEF
USERDCB.HEADER$
      2952**DCL      2952--REDEF
USERDCB.IXTNSIZE#
      2950**DCL      2950--REDEF
USERDCB.LASTSTA$
      2939**DCL      2939--REDEF
USERDCB.LVL
      2965**DCL      2965--REDEF
USERDCB.NAME#.C
      2940**DCL      2940--REDEF
USERDCB.NOEOF
      2962**DCL      2962--REDEF
USERDCB.NRECS#
      2951**DCL      2951--REDEF
USERDCB.NRECX
      2970**DCL      2970--REDEF
USERDCB.OHDR
      2962**DCL      2962--REDEF
USERDCB.ORG#
      2945**DCL      2945--REDEF
USERDCB.PRECNO
      2968**DCL      2968--REDEF
USERDCB.RCSZ
      2974**DCL      2974--REDEF
USERDCB.RES#
      2941**DCL      2941--REDEF
PL6.E3A0      #002=FUI$FILELEN File=FUI$IORQS.:FUA2TSI                           FRI 11/21/97 11:32 Page:185  
USERDCB.SETX
      2953**DCL      2953--REDEF
USERDCB.TAB$
      2953**DCL      2953--REDEF
USERDCB.TDA
      2967**DCL      2968--REDEF
USERDCB.VFCCHAR#
      2955**DCL      3633>>ASSIGN
USERDCB.WSN#
      2941**DCL      2941--REDEF
VFC
      3521**DCL      3702>>ASSIGN   3781>>ASSIGN
VFC_ADJUST
      3530**DCL      3633>>ASSIGN   3702>>ASSIGN   3781>>ASSIGN

PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:186  
     1181        1        /*M* FUI$MEMALLOC - NFS per-user I/O buffer allocation */
     1182        2        /*T***********************************************************/
     1183        3        /*T*                                                         */
     1184        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1185        5        /*T*                                                         */
     1186        6        /*T***********************************************************/
     1187        7        /*F*  NAME: FUI$MEMALLOC
     1188        8              Purpose:
     1189        9                    To get the user a hunk (1024 words) of memory.
     1190       10        */
     1191       11        /*D*  NAME: FUI$MEMALLOC
     1192       12              Outputs:
     1193       13                    BUF$ - points to the hunk of memory gotten.
     1194       14        */
     1195       15
     1196       16        FUI$MEMALLOC: PROC (BUF$);
     1197       17
     1198       18    1   DCL BUF$ PTR PARAM;
     1199       19
     1200       20
     1201       21        %INCLUDE CP_6;
     1202      102        %INCLUDE B_SEGIDS_C;
     1203      641        %INCLUDE FU_NFS_M;
     1204     1156
     1205     1157    1   DCL FUI$FREE_BUF$ PTR STATIC INIT( ADDR(NIL));
     1206     1158    1   DCL FREE_BUF_NEXT$ PTR BASED;
     1207     1159
     1208     1160    1   DCL FU_PROC# UBIN SYMREF;
     1209     1161    1   DCL B$DS8 PTR SYMREF;
     1210     1162
     1211     1163        %FU$NFSDS (NAME=DATASEG, STCLASS="BASED(B$DS8)");
     1212     1193
     1213     1194        %VLP_VECTOR (FPTN=GDS_RESULTS);
     1214     1209        %FPT_GDS (FPTN=GETUSERBUFFER,
     1215     1210                       RESULTS=GDS_RESULTS,
     1216     1211                       SEGSIZE = 1024);
     1217     1227
PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:187  
     1218     1228
     1219     1229    1        IF FUI$FREE_BUF$ ~= ADDR(NIL) /* a free buffer that we can use */
     1220     1230    2        THEN DO;
     1221     1231    2           BUF$ = FUI$FREE_BUF$;
     1222     1232    2           FUI$FREE_BUF$ = BUF$ -> FREE_BUF_NEXT$;
     1223     1233    2           END;
     1224     1234    2        ELSE DO;  /* no free buffer's, we'll have to allocate one */
     1225     1235    2           CALL M$GDS (GETUSERBUFFER)
     1226     1236    3           WHENALTRETURN DO;     /* can't allocate any more memory */
     1227     1237    3              CALL M$MERC;
     1228     1238    3              CALL M$XXX;
     1229     1239                  /* should probably call the garbage collector, and see
     1230     1240                     if FUI$FREE_BUF$ ~= ADDR(NIL) */
     1231     1241    3              END;
     1232     1242    2           BUF$ = PINCRC(GDS_RESULTS.PTR$, GDS_RESULTS.W1.VSIZE#-4095);
     1233     1243    2           END;
     1234     1244
     1235     1245    1        DATASEG.P.UCNT(FU_PROC#) = DATASEG.P.UCNT(FU_PROC#) + 1;
     1236     1246
     1237     1247    1        RETURN;
     1238     1248
     1239     1249        /*F*  NAME: FUI$MEMFREE
     1240     1250              Purpose:
     1241     1251                    To free a block of memory for re-use.
     1242     1252        */
     1243     1253        /*D*  NAME: FUI$MEMFREE
     1244     1254              Inputs:
     1245     1255                    BUF$ - a pointer to the block of memory to free.
     1246     1256        */
     1247     1257
     1248     1258    1   FUI$MEMFREE: ENTRY (BUF$);
     1249     1259
     1250     1260    1        BUF$ -> FREE_BUF_NEXT$ = FUI$FREE_BUF$;
     1251     1261    1        FUI$FREE_BUF$ = BUF$;
     1252     1262
     1253     1263    1   END FUI$MEMALLOC;

PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:188  
--  Include file information  --

   FU_NFS_M.:FUA2TOU  is referenced.
   B_SEGIDS_C.:E05OU  is referenced.
   CP_6.:E05OU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FUI$MEMALLOC.

   Procedure FUI$MEMALLOC requires 41 words for executable code.
   Procedure FUI$MEMALLOC requires 4 words of local(AUTO) storage.

    No errors detected in file FUI$IORQS.:FUA2TSI    .

PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:189  

 Object Unit name= FUI$MEMALLOC                               File name= FUI$IORQS.:FUA2TOU
 UTS= NOV 21 '97 11:33:42.88 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    10     12  FUI$MEMALLOC
    2   Proc  even  none    41     51  FUI$MEMALLOC
    3  RoData even  none     1      1  FUI$MEMALLOC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        1  FUI$MEMALLOC
     2     40                  yes      Std        1  FUI$MEMFREE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  FU_PROC#                              B$DS8
     B_VECTNIL
PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:190  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:191  


     1181        1        /*M* FUI$MEMALLOC - NFS per-user I/O buffer allocation */
     1182        2        /*T***********************************************************/
     1183        3        /*T*                                                         */
     1184        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1185        5        /*T*                                                         */
     1186        6        /*T***********************************************************/
     1187        7        /*F*  NAME: FUI$MEMALLOC
     1188        8              Purpose:
     1189        9                    To get the user a hunk (1024 words) of memory.
     1190       10        */
     1191       11        /*D*  NAME: FUI$MEMALLOC
     1192       12              Outputs:
     1193       13                    BUF$ - points to the hunk of memory gotten.
     1194       14        */
     1195       15
     1196       16        FUI$MEMALLOC: PROC (BUF$);

     16  2 000000   000000 700200 xent  FUI$MEMALLOC TSX0  ! X66_AUTO_1
         2 000001   000004 000001                    ZERO    4,1

     1197       17
     1198       18    1   DCL BUF$ PTR PARAM;
     1199       19
     1200       20
     1201       21        %INCLUDE CP_6;
     1202      102        %INCLUDE B_SEGIDS_C;
     1203      641        %INCLUDE FU_NFS_M;
     1204     1156
     1205     1157    1   DCL FUI$FREE_BUF$ PTR STATIC INIT( ADDR(NIL));
     1206     1158    1   DCL FREE_BUF_NEXT$ PTR BASED;
     1207     1159
     1208     1160    1   DCL FU_PROC# UBIN SYMREF;
     1209     1161    1   DCL B$DS8 PTR SYMREF;
     1210     1162
     1211     1163        %FU$NFSDS (NAME=DATASEG, STCLASS="BASED(B$DS8)");
     1212     1193
PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:192  
     1213     1194        %VLP_VECTOR (FPTN=GDS_RESULTS);
     1214     1209        %FPT_GDS (FPTN=GETUSERBUFFER,
     1215     1210                       RESULTS=GDS_RESULTS,
     1216     1211                       SEGSIZE = 1024);
     1217     1227
     1218     1228
     1219     1229    1        IF FUI$FREE_BUF$ ~= ADDR(NIL) /* a free buffer that we can use */

   1229  2 000002   000000 236000 1                  LDQ     FUI$FREE_BUF$
         2 000003   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000004   000013 600000 2                  TZE     s:1235

     1220     1230    2        THEN DO;

     1221     1231    2           BUF$ = FUI$FREE_BUF$;

   1231  2 000005   200003 470500                    LDP0    @BUF$,,AUTO
         2 000006   000000 756100                    STQ     0,,PR0

     1222     1232    2           FUI$FREE_BUF$ = BUF$ -> FREE_BUF_NEXT$;

   1232  2 000007   000000 471500                    LDP1    0,,PR0
         2 000010   100000 236100                    LDQ     0,,PR1
         2 000011   000000 756000 1                  STQ     FUI$FREE_BUF$

     1223     1233    2           END;

   1233  2 000012   000033 710000 2                  TRA     s:1245

     1224     1234    2        ELSE DO;  /* no free buffer's, we'll have to allocate one */

     1225     1235    2           CALL M$GDS (GETUSERBUFFER)

   1235  2 000013   000004 630400 1                  EPPR0   GETUSERBUFFER
         2 000014   430001 713400                    CLIMB   alt,gds
         2 000015   400400 401760                    pmme    nvectors=2
         2 000016   000020 702000 2                  TSX2    s:1237
PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:193  
         2 000017   000024 710000 2                  TRA     s:1242

     1226     1236    3           WHENALTRETURN DO;     /* can't allocate any more memory */

     1227     1237    3              CALL M$MERC;

   1237  2 000020   010007 713400                    CLIMB   4103
         2 000021   000000 401760                    pmme    nvectors=0

     1228     1238    3              CALL M$XXX;

   1238  2 000022   000003 713400                    CLIMB   3
         2 000023   000000 401760                    pmme    nvectors=0

     1229     1239                  /* should probably call the garbage collector, and see
     1230     1240                     if FUI$FREE_BUF$ ~= ADDR(NIL) */
     1231     1241    3              END;

     1232     1242    2           BUF$ = PINCRC(GDS_RESULTS.PTR$, GDS_RESULTS.W1.VSIZE#-4095);

   1242  2 000024   000002 236000 1                  LDQ     GDS_RESULTS
         2 000025   000020 772000                    QRL     16
         2 000026   000020 736000                    QLS     16
         2 000027   000000 136000 3                  SBLQ    0
         2 000030   000003 036000 1                  ADLQ    GDS_RESULTS+1
         2 000031   200003 470500                    LDP0    @BUF$,,AUTO
         2 000032   000000 756100                    STQ     0,,PR0

     1233     1243    2           END;

     1234     1244
     1235     1245    1        DATASEG.P.UCNT(FU_PROC#) = DATASEG.P.UCNT(FU_PROC#) + 1;

   1245  2 000033   000000 235000 xsym               LDA     FU_PROC#
         2 000034   000004 735000                    ALS     4
         2 000035   000000 471400 xsym               LDP1    B$DS8
         2 000036   100047 054105                    AOS     39,AL,PR1
PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:194  

     1236     1246
     1237     1247    1        RETURN;

   1247  2 000037   000000 702200 xent               TSX2  ! X66_ARET

     1238     1248
     1239     1249        /*F*  NAME: FUI$MEMFREE
     1240     1250              Purpose:
     1241     1251                    To free a block of memory for re-use.
     1242     1252        */
     1243     1253        /*D*  NAME: FUI$MEMFREE
     1244     1254              Inputs:
     1245     1255                    BUF$ - a pointer to the block of memory to free.
     1246     1256        */
     1247     1257
     1248     1258    1   FUI$MEMFREE: ENTRY (BUF$);

   1258  2 000040   000000 700200 xent  FUI$MEMFREE  TSX0  ! X66_AUTO_1
         2 000041   000004 000001                    ZERO    4,1

     1249     1259
     1250     1260    1        BUF$ -> FREE_BUF_NEXT$ = FUI$FREE_BUF$;

   1260  2 000042   200003 470500                    LDP0    @BUF$,,AUTO
         2 000043   000000 471500                    LDP1    0,,PR0
         2 000044   000000 236000 1                  LDQ     FUI$FREE_BUF$
         2 000045   100000 756100                    STQ     0,,PR1

     1251     1261    1        FUI$FREE_BUF$ = BUF$;

   1261  2 000046   000000 236100                    LDQ     0,,PR0
         2 000047   000000 756000 1                  STQ     FUI$FREE_BUF$

     1252     1262
     1253     1263    1   END FUI$MEMALLOC;

PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:195  
   1263  2 000050   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:196  
--  Include file information  --

   FU_NFS_M.:FUA2TOU  is referenced.
   B_SEGIDS_C.:E05OU  is referenced.
   CP_6.:E05OU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FUI$MEMALLOC.
PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:197  

 **** Variables and constants ****

  ****  Section 001  Data  FUI$MEMALLOC

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 FUI$FREE_BUF$              2-0-0/d STRC(72)    r     1 GDS_RESULTS
     4-0-0/d STRC(216)   r     1 GETUSERBUFFER

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BUF$                     *0-0-0/w PTR         r     1 BUF$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$DS8                      0-0-0/w UBIN        r     1 FU_PROC#

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(4716)  r     1 DATASEG                    0-0-0/w PTR         r     1 FREE_BUF_NEXT$


   Procedure FUI$MEMALLOC requires 41 words for executable code.
   Procedure FUI$MEMALLOC requires 4 words of local(AUTO) storage.
PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:198  

    No errors detected in file FUI$IORQS.:FUA2TSI    .
PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:199  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=FUI$MEMALLOC File=FUI$IORQS.:FUA2TSI                          FRI 11/21/97 11:33 Page:200  
          MINI XREF LISTING

B$DS8
      1161**DCL      1177--IMP-PTR  1245>>ASSIGN   1245>>ASSIGN
BUF$
        18**DCL        16--PROC     1231<<ASSIGN   1232>>ASSIGN   1242<<ASSIGN   1258--ENTRY    1260>>ASSIGN
      1261>>ASSIGN
DATASEG.P.UCNT
      1188**DCL      1245<<ASSIGN   1245>>ASSIGN
FREE_BUF_NEXT$
      1158**DCL      1232>>ASSIGN   1260<<ASSIGN
FUI$FREE_BUF$
      1157**DCL      1229>>IF       1231>>ASSIGN   1232<<ASSIGN   1260>>ASSIGN   1261<<ASSIGN
FU_PROC#
      1160**DCL      1245>>ASSIGN   1245>>ASSIGN
GDS_RESULTS
      1205**DCL      1222--DCLINIT
GDS_RESULTS.PTR$
      1207**DCL      1242>>ASSIGN
GDS_RESULTS.W1.VSIZE#
      1205**DCL      1242>>ASSIGN
GDS_RESULTS.W2
      1206**DCL      1207--REDEF
GETUSERBUFFER
      1222**DCL      1235<>CALL
GETUSERBUFFER.V
      1222**DCL      1222--DCLINIT
M$GDS
        65**DCL-ENT  1235--CALL
M$MERC
        86**DCL-ENT  1237--CALL
M$XXX
        42**DCL-ENT  1238--CALL
