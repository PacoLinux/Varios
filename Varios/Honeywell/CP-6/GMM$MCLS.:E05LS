VERSION E05

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:1    
        1        1        /*M* Memory Management User Service Procedures                */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM = 3,IND=5,ENU=0,ECU=0,CRM=80    */
        8        8        /*P*
        9        9             NAME: GMM$MCLS
       10       10             PURPOSE:
       11       11                   To provide Memory Management User Services.
       12       12             DESCRIPTION:
       13       13                   This module includes procedures to process Memory
       14       14                   Management Service requests.
       15       15             REFERENCE:
       16       16                   "LCP-6 Monitor Service Interface" AF Section 26.7 #0703A-0.
       17       17                   "Memory Management for LCP-6" AF Section 26.2 #0708A-0.
       18       18                   The FPTs are defined in GM_LCP6_M .
       19       19        */
       20       20        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:2    
       21       21        GMM$MCLS: PROC (PARM) ALTRET;
       22       22
       23       23
       24       24 S      %INCLUDE GH_LCP6_M;
       25       25 S      %INCLUDE GM_LCP6_M;
       26       26 S      %INCLUDE GU_LCP6_M;
       27       27        %INCLUDE GM_MACRO_M;
       28      509        %INCLUDE GU_MACROS_M;
       29      668        %INCLUDE G_HJIT_M;
       30      813        %INCLUDE G_JIT_M;
       31     1078        %INCLUDE G_ROS_M;
       32     1160        %INCLUDE GH_SCHD_M;
       33     1304        %INCLUDE G_SFILE_M;
       34     1364
       35     1365
       36     1366        %GUD_HAND_PARAMS (FPTN=PARM);           /* FPT parameters                     */
       37     1442        %GM_SHARED_PARAMS (FPTN=SHARED,STCLASS="BASED(R$)");
       38     1532        %GM_CHKSZ_PARAMS (FPTN=CHKSZ, STCLASS=AUTO);
       39     1626
       40     1627        /* EQUs and SUBs */
       41     1628
       42     1629        %INCLUDE M_ERRORS_C;
       43     1693        %INCLUDE UD_ERRORS_C;
       44     1735        %INCLUDE GH_SCHD_E;
       45     1831        %INCLUDE GM_VIRTUAL_E;
       46     2041 S      %INCLUDE G_LCP6_E;
       47     2042        %GM_MCL_E;
       48     2053        %G$JIT_E;
       49     2115
       50     2116        /* Based */
       51     2117
       52     2118        %FPT_GDS (FPTN=FPT_GDS,VECTORS=NO,STCLASS="BASED (V$)");
       53     2142        %FPT_FDS (FPTN=FPT_FDS,VECTORS=NO,STCLASS="BASED (V$)");
       54     2164        %FPT_GAUTO (FPTN=FPT_GAUTO,VECTORS=NO,STCLASS="BASED (V$)");
       55     2186        %FPT_FAUTO (FPTN=FPT_FAUTO,VECTORS=NO,STCLASS="BASED (V$)");
       56     2208        %FPT_PDS (FPTN=FPT_PDS,VECTORS=NO,STCLASS="BASED (V$)");
       57     2230        %FPT_CVM (FPTN=FPT_CVM,VECTORS=NO,STCLASS="BASED (V$)");
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:3    
       58     2254        %G$SEGDESC (FPTN="G$SEGDESCA(0:0)",STCLASS=BASED);
       59     2276        %G$JIT (FPTN=G$JIT,STCLASS="BASED (G$JIT$)");
       60     2690        %G$MHJIT (FPTN=G$MHJIT,STCLASS="BASED(G$MHJIT$)");
       61     9564        %G$ROS (FPTN=G$ROS,STCLASS="BASED(G$ROS$)");
       62     9608        %G$USER (FPTN="G$USER(0:0)",STCLASS="BASED(G$USRT$)");
       63     9619        %G$UHJIT (FPTN=G$UHJIT,STCLASS="BASED (G$UHJIT$)");
       64    12593        %VLP_SEGMENT (FPTN=RESULTS,STCLASS="BASED(R$)");
       65    12614        %VLP_SEGMENT (FPTN=FROMSEG,STCLASS="BASED(L$)");
       66    12635        %VLR_GDDL (STCLASS="BASED(V$)");
       67    12658        %G$USER (FPTN=G$U,STCLASS="BASED(CU$)");
       68    12669        %G$SFILE (ARRAYED=NO,STCLASS=BASED);
       69    12706
       70    12707        /* Auto */
       71    12708
       72    12709        %G$SEGDESC (STCLASS=" ");
       73    12731    1   DCL MCL_CODE UBIN;
       74    12732    1   DCL HI UBIN;
       75    12733    1   DCL I UBIN;
       76    12734    1   DCL LO UBIN;
       77    12735    1   DCL NEXT UBIN;
       78    12736    1   DCL L$ PTR;
       79    12737    1   DCL BASE UBIN;
       80    12738    1   DCL FROMX UBIN;
       81    12739    1   DCL CU$ PTR;
       82    12740    1   DCL PAGES UBIN;
       83    12741    1   DCL V$ PTR;
       84    12742    1   DCL R$ PTR;
       85    12743    1   DCL SEGI UBIN;
       86    12744
       87    12745    1   DCL SEGX UBIN;                     /* low segment number of specified extent  */
       88    12746    1   DCL SEGY UBIN;                     /* high segment number of specified extent */
       89    12747    1   DCL MAX_EXT_SZ UBIN;                    /* max pgs that may be allocated      */
       90    12748    1   DCL CURR_EXT_SZ UBIN;                   /* currents pgs allocated             */
       91    12749    1   DCL EXT_HI_SEG UBIN;          /* highest possible seg number of the extent    */
       92    12750
       93    12751    1   DCL THIS_SIZE UBIN;
       94    12752    1   DCL MAX_SEG_SZ UBIN;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:4    
       95    12753
       96    12754    1   DCL BEST_SEGX UBIN;
       97    12755    1   DCL BEST_SIZE UBIN;
       98    12756
       99    12757    1   DCL SIZE UBIN;
      100    12758
      101    12759        /* Constants */
      102    12760
      103    12761        %EQU SEG#=15;            /* Number of data segments which we know, less 1.    */
      104    12762        %EQU LSEG#=6;                 /* Number of them that are little segments.     */
      105    12763
      106    12764    1   DCL SETLO(0:2) UBIN CONSTANT INIT(0, 0, 2);
      107    12765                                                /* corresponds to EITHER, LITTLE, BIG */
      108    12766
      109    12767    1   DCL SEGHIX(0:%SEG#) UBIN CONSTANT INIT(%GM_LAUTO_DS3#,
      110    12768    1                                          %GM_LAUTO_DS3#,
      111    12769    1                                          %GM_LAUTO_DS3#,
      112    12770    1                                          %GM_LAUTO_DS3#,
      113    12771    1                                          %GM_LAUTO_DS3#,
      114    12772    1                                          %GM_LAUTO_DS3#,
      115    12773    1                                          %GM_USR_DS4#,
      116    12774    1                                          %GM_USR_DS4#,
      117    12775    1                                          %GM_USR_DS4#,
      118    12776    1                                          %GM_USR_DS4#,
      119    12777    1                                          %GM_USR_DS4#,
      120    12778    1                                          %GM_USR_DS4#,
      121    12779    1                                          %GM_USR_DS4#,
      122    12780    1                                          %GM_USR_DS4#,
      123    12781    1                                          %GM_USR_DS4#,
      124    12782    1                                          %GM_USR_DS4#);
      125    12783
      126    12784
      127    12785        /* ASDTX contains an index into the user ASDT for each of the 9
      128    12786           user allocatable segments.
      129    12787        */
      130    12788    1   DCL ASDTX(0:%SEG#) UBIN CONSTANT INIT(%GM_USR_DS1#,
      131    12789    1                                         %GM_USR_DS2#,
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:5    
      132    12790    1                                          %GM_CP_DS#,
      133    12791    1                                          %GM_LAUTO_DS#,
      134    12792    1                                          %GM_LAUTO_DS2#,
      135    12793    1                                          %GM_LAUTO_DS3#,
      136    12794    1                                         %GM_ISR3#,
      137    12795    1                                         %GM_ISR4#,
      138    12796    1                                         %GM_ISR5#,
      139    12797    1                                         %GM_ISR6#,
      140    12798    1                                         %GM_ISR7#,
      141    12799    1                                          %GM_DB_PROC#,
      142    12800    1                                          %GM_CP_PROC#,
      143    12801    1                                          %GM_UAUTO_DS#,
      144    12802    1                                         %GM_USR_DS3#,
      145    12803    1                                         %GM_USR_DS4#);
      146    12804
      147    12805
      148    12806
      149    12807    1   DCL SZ(0:%SEG#) UBIN CONSTANT INIT(16*%LSEG#, 256*0);
      150    12808    1   DCL PROT(0:1) BIT(2) CONSTANT ALIGNED INIT(%G_R_MON#, %G_R_USR#);
      151    12809    1   DCL 1 CHECK_BASE CONSTANT,
      152    12810    1         2 WORD1 BIT(16) INIT('FFF0'X),
      153    12811    1         2 WORD2 BIT(16) INIT('0FFF'X);
      154    12812    1   DCL 1 B$CHECK_BASE BASED ALIGNED,
      155    12813    1         2 WORD1 BIT(16),
      156    12814    1         2 WORD2 BIT(16);
      157    12815
      158    12816        /* Symrefs */
      159    12817
      160    12818    1   DCL G$JIT$ PTR SYMREF READONLY;
      161    12819    1   DCL G$UHJIT$ PTR SYMREF READONLY;
      162    12820    1   DCL G$MHJIT$ PTR SYMREF;
      163    12821    1   DCL G$ROS$ PTR SYMREF READONLY;
      164    12822    1   DCL G$USRT$ PTR SYMREF;
      165    12823    1   DCL G$WINDOW1$ PTR SYMREF;
      166    12824    1   DCL G$ASDT_USR$ PTR SYMREF;
      167    12825    1   DCL GM_MEM_HI UBIN SYMREF;
      168    12826    1   DCL GM_SHUF_HI UBIN SYMREF;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:6    
      169    12827    1   DCL G_MUAIS UBIN SYMREF;
      170    12828
      171    12829        /* Entrefs */
      172    12830
      173    12831    1   DCL GHH$ASD ENTRY (2) ALTRET;
      174    12832    1   DCL GMA$GET ENTRY(5) ALTRET;
      175    12833    1   DCL GMA$GETIO ENTRY(5) ALTRET;
      176    12834    1   DCL GMA$REL ENTRY(2) ALTRET;
      177    12835    1   DCL GMA$CHKSIZE ENTRY(1) ALTRET;
      178    12836    1   DCL GMA$REL_ACCTMEM ENTRY(1) ALTRET;
      179    12837    1   DCL GMA$PROT ENTRY(3) ALTRET;
      180    12838    1   DCL GMA$CVM ENTRY(3) ALTRET;
      181    12839    1   DCL GMA$UNSHARE ENTRY(1) ALTRET;
      182    12840    1   DCL GMA$SHARED ENTRY(1) ALTRET;
      183    12841
      184    12842        %VLP_ERRCODE (FPTN=SEGSIZE,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      185    12843              STCLASS=CONSTANT,ERR#=%E$SEGSIZE);
      186    12889        %VLP_ERRCODE (FPTN=BADSEGID,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      187    12890              STCLASS=CONSTANT,ERR#=%E$BADSEGID);
      188    12936        %VLP_ERRCODE (FPTN=ALLUSED,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      189    12937              STCLASS=CONSTANT,ERR#=%E$ALLUSED);
      190    12983        %VLP_ERRCODE (FPTN=ALLGONE,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      191    12984              STCLASS=CONSTANT,ERR#=%E$ALLGONE);
      192    13030        %VLP_ERRCODE (FPTN=SEGFULL,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      193    13031              STCLASS=CONSTANT,ERR#=%E$SEGFULL);
      194    13077        %VLP_ERRCODE (FPTN=MMPRIV,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      195    13078              STCLASS=CONSTANT,ERR#=%E$MMPRIV);
      196    13124        %VLP_ERRCODE (FPTN=BADPP,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      197    13125              STCLASS=CONSTANT,ERR#=%E$BADPP);
      198    13171        %VLP_ERRCODE (FPTN=IOEXT,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      199    13172              STCLASS=CONSTANT,ERR#=%E$DSMODEBAD);
      200    13218        %VLP_ERRCODE (FPTN=BADDSPROT,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      201    13219              STCLASS=CONSTANT,ERR#=%E$DSPROTBAD);
      202    13265        %VLP_ERRCODE (FPTN=HANDSOFF,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      203    13266              STCLASS=CONSTANT,ERR#=%E$HANDSOFF);
      204    13312        %VLP_ERRCODE (FPTN=BADVECT0,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      205    13313              STCLASS=CONSTANT,ERR#=%E$BADVECT0);
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:7    
      206    13359        %VLP_ERRCODE (FPTN=BADVECT1,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      207    13360              STCLASS=CONSTANT,ERR#=%E$BADVECT1);
      208    13406        %VLP_ERRCODE (FPTN=ILGLSEG,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      209    13407              STCLASS=CONSTANT,ERR#=%E$ILGLSEG);
      210    13453        %VLP_ERRCODE (FPTN=BIGFREE,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      211    13454              STCLASS=CONSTANT,ERR#=%E$BIGFREE);
      212    13500        %VLP_ERRCODE (FPTN=ITISSHARED,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      213    13501              STCLASS=CONSTANT,ERR#=%E$ITISSHARED);
      214    13547        %VLP_ERRCODE (FPTN=INTERR,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      215    13548              STCLASS=CONSTANT,ERR#=%E$INTLVL);
      216    13594        %VLP_ERRCODE (FPTN=PGINUSE,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      217    13595              STCLASS=CONSTANT,ERR#=%E$PGINUSE);
      218    13641        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:8    
      219    13642        /*D*
      220    13643             NAME: GMM$MCL
      221    13644             CALL:
      222    13645                   Standard MCL service decoder call.
      223    13646             DESCRIPTION:
      224    13647                   This routine is called to perform the memory management
      225    13648                   service request as specified in the parameter block passed
      226    13649                   to it by the MCL services decoder.
      227    13650        */
      228    13651
      229    13652
      230    13653
      231    13654    1   GMM$MCL: ENTRY (PARM) ALTRET;
      232    13655
      233    13656    1      IF G$USRT$->G$USER.UHJITPP(G$MHJIT.CUN) ~= G$UHJIT.ASDT_MCL.UHJIT.BASE
      234    13657    2      THEN DO;
      235    13658    2           PARM.ERR = INTERR;
      236    13659    2           RETURN;
      237    13660    2           END;
      238    13661        /*E* ERROR: GMM-E$INTLVL-E
      239    13662             MESSAGE: Memory Management services not allowed from an interrupt.
      240    13663        */
      241    13664
      242    13665    1      MCL_CODE = PARM.MCL.CODE;
      243    13666    1      V$ = PARM.PTRS.PAR1$;
      244    13667    1      IF MCL_CODE ~= %G_MCL_GDDL#
      245    13668    1      THEN R$=PARM.PTRS.PAR2$;
      246    13669    1      CU$=G$MHJIT.CU$;
      247    13670
      248    13671    2      DO CASE (MCL_CODE);
      249    13672
      250    13673    2       CASE (%G_MCL_GDS#,%G_MCL_GAUTO#);
      251    13674
      252    13675    2         CHKSZ = '0'B;
      253    13676    2         IF MCL_CODE = %G_MCL_GDS#
      254    13677    3         THEN DO;
      255    13678    3              CHKSZ.FLGS.REQ_ALL=FPT_GDS.FREE;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:9    
      256    13679    3              CHKSZ.FLGS.NSHUF=FPT_GDS.IOBUF;
      257    13680    3              CHKSZ.FLGS.PARK=FPT_GDS.PARK;
      258    13681    3              NEXT=FPT_GDS.NEXT;
      259    13682    3              END;
      260    13683
      261    13684        /*  Call GETSEGX to get info about the current allocation.
      262    13685        */
      263    13686    2         SIZE=FPT_GDS.PAGES;
      264    13687    2         CALL GETSEGX ALTRET(RTRN);
      265    13688
      266    13689        /* If requested size is zero this is simply a status request.
      267    13690        */
      268    13691    2         IF SIZE ~= 0
      269    13692    3         THEN DO;
      270    13693    3              IF G$SEGDESC.V AND CHKSZ.FLGS.NSHUF
      271    13694    4              THEN DO;
      272    13695    4                   PARM.ERR=IOEXT;
      273    13696    4                   RETURN;
      274    13697    4                   END;
      275    13698        /*E* ERROR: GMM-E$DSMODEBAD-E
      276    13699             MESSAGE: You may not extend an I/O data segment.
      277    13700        */
      278    13701
      279    13702        /*  Check if the requested size will fit into the segment.  If not,
      280    13703            and if FREE was specified, return.  Otherwise set the error code
      281    13704            and adjust the requested size to get all we can.
      282    13705        */
      283    13706    3              IF SIZE + CURR_EXT_SZ > MAX_EXT_SZ
      284    13707    4              THEN DO;
      285    13708    4                   SIZE = MAX_EXT_SZ - CURR_EXT_SZ;
      286    13709    4                   PARM.ERR=SEGFULL;
      287    13710
      288    13711    4                   IF SIZE=0 OR CHKSZ.FLGS.REQ_ALL THEN RETURN;
      289    13712        /*E* ERROR: GMM-E$SEGFULL-E
      290    13713          MESSAGE: Your request exceeds the available pages in the specified memory segment.
      291    13714        */
      292    13715
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:10   
      293    13716    4                   PARM.ERR.SEV = %G_SEV_CONT#;
      294    13717    4                   END;
      295    13718
      296    13719
      297    13720        /*  Check the guys size against his resource limit.
      298    13721            CHKSIZE adjusts SIZE to fit; PARAM.ERR set.
      299    13722        */
      300    13723    3              CHKSZ.SIZE = SIZE;
      301    13724    3              CALL GMA$CHKSIZE (CHKSZ)
      302    13725    4              WHENALTRETURN DO;
      303    13726    4                   IF CHKSZ.FLGS.REQ_ALL OR CHKSZ.ERR.ERR#=%E$BRKCTY
      304    13727    5                   THEN DO;
      305    13728    5                        PARM.ERR = CHKSZ.ERR;
      306    13729    5                        PARM.ERR.SEV = %G_SEV_ERR#;
      307    13730    5                        RETURN;
      308    13731    5                        END;
      309    13732    4                   END;
      310    13733    3              SIZE = CHKSZ.SIZE;
      311    13734    3              IF CHKSZ.ERR ~= '0'B
      312    13735    3              THEN PARM.ERR = CHKSZ.ERR;
      313    13736
      314    13737
      315    13738        /* Find the index to the first segment to get or extend.
      316    13739        */
      317    13740    3              IF CURR_EXT_SZ = 0
      318    13741    4              THEN DO;
      319    13742    4                   THIS_SIZE = MAX_SEG_SZ;
      320    13743    4                   SEGI = SEGX;
      321    13744    4                   G$JIT.FIRST_SEG(SEGX) = '1'B;
      322    13745    4                   END;
      323    13746
      324    13747    4              ELSE DO;
      325    13748    4                   SEGI = CURR_EXT_SZ / MAX_SEG_SZ;
             13748                            /*# fully allocated segs-this extent*/
      326    13749    4                   THIS_SIZE = MAX_SEG_SZ - ( CURR_EXT_SZ - (MAX_SEG_SZ * SEGI) );
      327    13750
      328    13751    4                   SEGI = SEGX + SEGI;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:11   
      329    13752
      330    13753    4                   IF THIS_SIZE = 0
      331    13754    4                   THEN GOTO SEG_FULL;
      332    13755    4                   END;
      333    13756
      334    13757        /*  Get the requested segment, set the protection.
      335    13758        */
      336    13759    4              DO WHILE(SIZE > 0);
      337    13760    4                   IF THIS_SIZE > SIZE
      338    13761    4                   THEN THIS_SIZE = SIZE;
      339    13762
      340    13763    4                   IF CHKSZ.FLGS.NSHUF
      341    13764    5                   THEN DO;
      342    13765    5                        CALL GMA$GETIO (SEGI,THIS_SIZE,%G_R_USR#,%G_R_USR#,%G_RING0#)
      343    13766    6                        WHENALTRETURN DO;
      344    13767    6                             PARM.ERR = ALLGONE;
      345    13768    6                             GOTO SETR;
      346    13769    6                             END;
      347    13770    5                        G$JIT.NSPC = G$JIT.NSPC + THIS_SIZE;
      348    13771    5                        END;
      349    13772    5                   ELSE DO;
      350    13773    5                        CALL GMA$GET (SEGI,THIS_SIZE,%G_R_USR#,%G_R_USR#,%G_RING0#);
      351    13774    5                        G$JIT.PCDS = G$JIT.PCDS + THIS_SIZE;
      352    13775    5                        END;
      353    13776
      354    13777    4                   SIZE = SIZE - THIS_SIZE;
      355    13778    4   SEG_FULL:
      356    13779    4                   SEGI = SEGI +1;
      357    13780    4                   THIS_SIZE = MAX_SEG_SZ;
      358    13781    4                   END/*do while*/;
      359    13782
      360    13783    3              END/*do if size ~ zero*/;
      361    13784
      362    13785        /*E* ERROR: GMM-E$ALLGONE-E
      363    13786             MESSAGE: Non I/O memory is too fragmented to satisfy your request.
      364    13787        */
      365    13788
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:12   
      366    13789
      367    13790        /* Setup RESULTS if the user asked for it.  RESULTS reflects the
      368    13791           total current allocation, not just the extension.
      369    13792        */
      370    13793
      371    13794    2   SETR: IF R$ ~= ADDR(NIL)
      372    13795    3         THEN DO;
      373    13796    3              IF SEGX < %GM_ISR1#
      374    13797    3              THEN RESULTS.BASE=SEGX * 4096;
      375    13798    3              ELSE RESULTS.BASE=(SEGX-15) * 65536;
      376    13799
      377    13800    3              CALL GET_EXT_SIZE;
      378    13801    3              RESULTS.PAGES = CURR_EXT_SZ;
      379    13802    3              END;
      380    13803
      381    13804    2         IF MCL_CODE = %G_MCL_GAUTO# OR MCL_CODE = %G_MCL_FAUTO#
      382    13805    3         THEN DO;
      383    13806    3              CALL GET_EXT_SIZE;
      384    13807    3              G$ROS.AUTO_T$ = PINCRW (G$ROS.AUTO_DS$, CURR_EXT_SZ*256 - 6);
      385    13808    3              END;
      386    13809
      387    13810        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:13   
      388    13811
      389    13812    2       CASE (%G_MCL_FDS#,%G_MCL_FAUTO#);
      390    13813
      391    13814        /*  Call GETSEGX to get info about the current allocation.
      392    13815        */
      393    13816    2         SIZE=FPT_FDS.PAGES;
      394    13817    2         CALL GETSEGX ALTRET(RTRN);
      395    13818
      396    13819        /* If requested size is zero this is simply a status request.
      397    13820        */
      398    13821    2         IF SIZE ~= 0
      399    13822    3         THEN DO;
      400    13823
      401    13824        /*  Check if the segment was empty, or shared, or CVMed.
      402    13825            If so, set the error code and return.
      403    13826        */
      404    13827    3              IF NOT G$SEGDESC.V
      405    13828    4              THEN DO;
      406    13829    4                   PARM.ERR=HANDSOFF;
      407    13830    4                   RETURN;
      408    13831    4                   END;
      409    13832        /*E* ERROR: GMM-E$HANDSOFF-E
      410    13833             MESSAGE: The memory you are requesting be released is not allocated.
      411    13834        */
      412    13835
      413    13836        /*  Check if he requested to free more pages than there are.  If so,
      414    13837            just free all there are and return an error.
      415    13838        */
      416    13839    3              IF CURR_EXT_SZ  < SIZE
      417    13840    4              THEN DO;
      418    13841    4                   PARM.ERR = BIGFREE;
      419    13842    4                   SIZE = CURR_EXT_SZ;
      420    13843    4                   IF SIZE = 0 THEN GOTO SETR;
      421    13844    4                   END;
      422    13845        /*E* ERROR: GMM-E$BIGFREE-0
      423    13846           MESSAGE: Attempt to free more space than currently allocated in specified extent.
      424    13847        */
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:14   
      425    13848
      426    13849        /*  Remove the pages from the account recource table.
      427    13850        */
      428    13851    3              CALL GMA$REL_ACCTMEM(SIZE);
      429    13852
      430    13853    3              IF G$SEGDESC.BASE > GM_SHUF_HI
      431    13854    3              THEN G$JIT.NSPC = G$JIT.NSPC - SIZE;
      432    13855    3              ELSE G$JIT.PCDS = G$JIT.PCDS - SIZE;
      433    13856
      434    13857
      435    13858        /* Find the index to the last segment with pages to be released.
      436    13859        */
      437    13860    3              IF CURR_EXT_SZ <= MAX_SEG_SZ
      438    13861    4              THEN DO;
      439    13862    4                   THIS_SIZE = SIZE;
      440    13863    4                   SEGI = SEGX;
      441    13864    4                   END;
      442    13865    4              ELSE DO;
      443    13866    4                   SEGI = CURR_EXT_SZ / MAX_SEG_SZ; /* # of fully allocated segs */
      444    13867    4                   THIS_SIZE = CURR_EXT_SZ - (MAX_SEG_SZ * SEGI);
      445    13868    4                   SEGI = SEGX + SEGI;
      446    13869
      447    13870    4                   IF THIS_SIZE = 0
      448    13871    4                   THEN GOTO SEG_FULL2;
      449    13872    4                   END;
      450    13873
      451    13874        /* Free the requested pages.
      452    13875        */
      453    13876    4              DO WHILE(SIZE > 0);
      454    13877    4                   IF THIS_SIZE > SIZE
      455    13878    4                   THEN THIS_SIZE = SIZE;
      456    13879
      457    13880    4                   CALL GMA$REL (SEGI,THIS_SIZE);
      458    13881
      459    13882    4                   IF NOT G$ASDT_USR$->G$SEGDESCA.V(SEGI)
      460    13883    4                   THEN G$JIT.FIRST_SEG(SEGI) = '0'B;
      461    13884
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:15   
      462    13885    4                   SIZE = SIZE - THIS_SIZE;
      463    13886    4   SEG_FULL2:
      464    13887    4                   SEGI = SEGI -1;
      465    13888    4                   THIS_SIZE = MAX_SEG_SZ;
      466    13889    4                   END;
      467    13890
      468    13891    3              END;
      469    13892
      470    13893    2         GOTO SETR;                        /* setup results                      */
      471    13894        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:16   
      472    13895    2       CASE(%G_MCL_GDDL#);
      473    13896    2         VLR_GDDL='0'B;
      474    13897
      475    13898    3         DO I = 0 TO %SEG#;
      476    13899    3              IF NOT G$ASDT_USR$->G$SEGDESCA.V(ASDTX(I))
      477    13900    4              THEN DO;
      478    13901    4                   IF I < 2
      479    13902    5                   THEN DO;
      480    13903    5                        VLR_GDDL.NUM_LITTLE=VLR_GDDL.NUM_LITTLE + 1;
      481    13904    5                        IF VLR_GDDL.NEXT_LITTLE = 0
      482    13905    5                        THEN VLR_GDDL.NEXT_LITTLE = ASDTX(I);
      483    13906    5                        END;
      484    13907    5                   ELSE DO;
      485    13908    5                        VLR_GDDL.NUM_BIG=VLR_GDDL.NUM_BIG + 1;
      486    13909    5                        IF VLR_GDDL.NEXT_BIG = 0
      487    13910    5                        THEN VLR_GDDL.NEXT_BIG = ASDTX(I);
      488    13911    5                        END;
      489    13912    4                   END/*if not segdesc.v*/;
      490    13913    3              END;
      491    13914
      492    13915    2         CHKSZ = '0'B;
      493    13916    2         CHKSZ.FLGS.CHK_ONLY='1'B;
      494    13917    2         CHKSZ.SIZE=G$JIT.MAXMEM;
      495    13918    2         CALL GMA$CHKSIZE (CHKSZ);
      496    13919    2         VLR_GDDL.REMAINING = CHKSZ.SIZE;
      497    13920    2         VLR_GDDL.AUTHORIZED=G$JIT.MAXMEM;
      498    13921    2         PARM.ERR='0'B;
      499    13922        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:17   
      500    13923
      501    13924    2       CASE(%G_MCL_PDS#);
      502    13925
      503    13926    2         IF R$ = ADDR(NIL)
      504    13927    2         THEN GOTO PDSERR;
      505    13928
      506    13929    2         IF RESULTS.BASE$ = ADDR(NIL)
      507    13930    3         THEN DO;
      508    13931    3   PDSERR:    PARM.ERR=BADVECT1;
      509    13932    3              END;
      510    13933
      511    13934    3         ELSE DO;
      512    13935    3              CALL GETSEGX ALTRET(RTRN);
      513    13936    3              I=BITBIN(FPT_PDS.READ);
      514    13937    3              LO=BITBIN(FPT_PDS.WRITE);
      515    13938    3              CALL GMA$PROT (SEGX,PROT(I),PROT(LO));
      516    13939    3              END;
      517    13940        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:18   
      518    13941
      519    13942    2       CASE(%G_MCL_CVM#);
      520    13943    2         IF NOT G$JIT.PRIV.ACTIVE.SPCLMM
      521    13944    2           AND NOT G$JIT.PRIV.ACTIVE.EXMM
      522    13945    3         THEN DO;
      523    13946    3              PARM.ERR=MMPRIV;
      524    13947    3              RETURN;
      525    13948    3              END;
      526    13949        /*E*  ERROR: GMM-E$MMPRIV-E
      527    13950              MESSAGE0: M$CVM users must have EXMM or SPCLMM privilege on.
      528    13951              MESSAGE1: EXMM privilege gives write access, SPCLMM allows read
      529    13952                        access only.
      530    13953        */
      531    13954    2         IF FPT_CVM.TYPE > 2
      532    13955    3         THEN DO;
      533    13956    3              PARM.ERR=BADVECT0;
      534    13957    3              RETURN;
      535    13958    3              END;
      536    13959
      537    13960    2         L$ = PARM.PTRS.PAR3$;
      538    13961    2         NEXT=FPT_CVM.NEXT;
      539    13962    2         SIZE=FPT_CVM.PAGES;
      540    13963
      541    13964    2         IF SIZE > 256
      542    13965    3         THEN DO;
      543    13966    3              PARM.ERR=SEGSIZE;
      544    13967    3              RETURN;
      545    13968    3              END;
      546    13969        /*E* ERROR: GMM-E$SEGSIZE-E
      547    13970             MESSAGE: Illegal size specification.
      548    13971        */
      549    13972
      550    13973    2         IF SIZE ~= 0
      551    13974    3         THEN DO;
      552    13975    3              CALL GETSEGX ALTRET(RTRN);
      553    13976    3              CALL UNCVM
      554    13977    4              WHENALTRETURN DO;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:19   
      555    13978    4                   IF G$ASDT_USR$->G$SEGDESCA.V(SEGX)
      556    13979    5                   THEN DO;
      557    13980    5                        PARM.ERR = PGINUSE;
      558    13981    5                        RETURN;
      559    13982    5                        END;
      560    13983    4                   END/*uncvm altreturn*/;
      561    13984        /*E* ERROR: GMM-E$PGINUSE-E
      562    13985             MESSAGE: You cannot CVM over a previously allocated segment.
      563    13986        */
      564    13987
      565    13988
      566    13989    3              IF FPT_CVM.TYPE = %G_CVM_PHYSICAL#
      567    13990    4              THEN DO;
      568    13991    4                   IF FROMSEG.PAGES > GM_MEM_HI
      569    13992    5                   THEN DO;
      570    13993    5   BADPHYS:             PARM.ERR=BADPP;
      571    13994    5                        RETURN;
      572    13995    5                        END;
      573    13996        /*E* ERROR: GMM-E$BADPP-E
      574    13997             MESSAGE: That physical page does not exist.
      575    13998        */
      576    13999
      577    14000    5                   ELSE DO;
      578    14001    5                        BASE=FROMSEG.PAGES;
      579    14002    5                        END;
      580    14003    4                   END/*do if physical*/;
      581    14004
      582    14005    4              ELSE DO;
      583    14006    4                   IF FROMSEG.BASE$ = ADDR(NIL) THEN GOTO SET_BADSEGID;
      584    14007    4                   IF (L$->B$CHECK_BASE.WORD1 & CHECK_BASE.WORD1)
      585    14008    4                     OR (L$->B$CHECK_BASE.WORD2 & CHECK_BASE.WORD2)
      586    14009    5                   THEN DO;
      587    14010    5   SET_BADSEGID:        ;
      588    14011    5                        PARM.ERR = BADSEGID;
      589    14012    5                        RETURN;
      590    14013    5                        END;
      591    14014
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:20   
      592    14015    4                   IF FROMSEG.BASE < %GM_SEG0100_BASE
      593    14016    4                   THEN FROMX = FROMSEG.BASE / 4096;
      594    14017    4                   ELSE FROMX = (FROMSEG.BASE / 65536) +15;
      595    14018
      596    14019    4                   IF FPT_CVM.TYPE = %G_CVM_MON#
      597    14020    5                   THEN DO;
      598    14021    5                        CU$=ADDR(G$MHJIT.ASDT_MON);
      599    14022    5                        END;
      600    14023    5                   ELSE DO;
      601    14024    5                        IF (FPT_CVM.USERID > G_MUAIS) OR (FPT_CVM.USERID = 0)
      602    14025    5                          OR (G$USER.US(FPT_CVM.USERID) = %GH_NULL)
      603    14026    6                        THEN DO;
      604    14027    6                             PARM.ERR = BADVECT0;
      605    14028    6                             RETURN;
      606    14029    6                             END;
      607    14030    5                        CU$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_USR);
      608    14031    5                        G$UHJIT.ASDT_MCL.WINDOW1=G$UHJIT.ASDT_MCL.UHJIT;
      609    14032    5                        G$UHJIT.ASDT_MCL.WINDOW1.BASE=G$USER.UHJITPP(FPT_CVM.USERID);
      610    14033    5                        CALL GHH$ASD (G$WINDOW1$,G$UHJIT.ASDT_MCL.WINDOW1);
      611    14034    5                        END;
      612    14035
      613    14036    4                   IF SIZE > CU$->G$SEGDESCA.SIZE(FROMX)+1
      614    14037    4                   THEN SIZE = CU$->G$SEGDESCA.SIZE(FROMX)+1;
      615    14038
      616    14039    4                   BASE=CU$->G$SEGDESCA.BASE(FROMX);
      617    14040    4                   END;
      618    14041    3              CALL GMA$CVM (SEGX,SIZE,BASE);
      619    14042    3              G$JIT.FIRST_SEG(SEGX) = '1'B;
      620    14043    3              GOTO SETR;
      621    14044    3              END;
      622    14045
      623    14046        /* Release a CVMed segment.
      624    14047        */
      625    14048    3         ELSE DO/*when size is 0*/;
      626    14049    3              IF R$ = ADDR(NIL) THEN GOTO SET_BADSEGID;
      627    14050    3              IF RESULTS.BASE$ = ADDR(NIL) THEN GOTO SET_BADSEGID;
      628    14051
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:21   
      629    14052    3              CALL GETSEGX ALTRET(RTRN);
      630    14053    3              CALL UNCVM ALTRET(SET_BADSEGID);
      631    14054    3              END;
      632    14055    2         END;                              /*END CASE*/
      633    14056    1   RTRN: RETURN;
      634    14057
      635    14058        /*E* ERROR: GMM-E$BADVECT0-E
      636    14059             MESSAGE: Invalid value supplied in your FPT.
      637    14060             MESSAGE1: Bad TYPE or USERID on M$CVM or bad NEXT on M$GDS.
      638    14061             MESSAGE7: Invalid value supplied in your FPT.
      639    14062        */
      640    14063        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:22   
      641    14064        /*I* NAME: UNCVM
      642    14065             CALL: CALL UNCVM ALTRET(label);
      643    14066             INPUT: SEGX - segment to be unCVMed.
      644    14067        */
      645    14068
      646    14069    1   UNCVM: PROC ALTRET;
      647    14070
      648    14071    2      IF G$JIT.CVM_REAL(SEGX)
      649    14072    3      THEN DO;
      650    14073    3           G$JIT.CVM_REAL(SEGX)='0'B;
      651    14074    3           G$ASDT_USR$->G$SEGDESCA(SEGX)='0'B;
      652    14075    3           END;
      653    14076    3      ELSE DO;
      654    14077    3           IF G$UHJIT$->G$UHJIT.SHRD_SEG(SEGX) ~= 0
      655    14078    3           THEN CALL GMA$UNSHARE (SEGX);
      656    14079    3           ELSE ALTRETURN;
      657    14080    3           END;
      658    14081    2      G$JIT.FIRST_SEG(SEGX) = '0'B;
      659    14082    2      RETURN;
      660    14083    2   END;
      661    14084
      662    14085        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:23   
      663    14086        /*I*  NAME: GETSEGX
      664    14087              CALL: CALL GETSEGX ALTRET(label);
      665    14088              INPUT: SIZE - # of pages requested
      666    14089                     R$ -> vlp_segment
      667    14090
      668    14091              OUTPUT: SEGX - Index into user ASDT for the low segment of extent
      669    14092                      CURR_EXT_SIZE - Number of pages currently allocated in the extent
      670    14093                      MAX_EXT_SZ - Maximum size this extent can ever be in pages
      671    14094                      MAX_SEG_SZ - Number of pages in a segment for this extent (16 or 256)
      672    14095                      G$SEGDESC - descriptor from user ASDT for SEGX
      673    14096        */
      674    14097    1   GETSEGX: PROC ALTRET;
      675    14098
      676    14099        /* Set up SEGX.  First the tests for specific data segments.
      677    14100        */
      678    14101
      679    14102    2      IF MCL_CODE = %G_MCL_GAUTO# OR MCL_CODE = %G_MCL_FAUTO#
      680    14103    3      THEN DO;
      681    14104    3           SEGX = MINIMUM (G$ROS.AUTO_DS/4096, %GM_UAUTO_DS#);
      682    14105    3           GOTO GOT_SEGX;
      683    14106    3           END;
      684    14107
      685    14108    2      IF G$U.FLG.DIC
      686    14109    3      THEN DO;
      687    14110    3           SEGX = %GM_DB_DS#;
      688    14111    3           GOTO SET_SEG_SZ;
      689    14112    3           END;
      690    14113
      691    14114    2      IF G$U.FLG.CPIC
      692    14115    3      THEN DO;
      693    14116    3           SEGX = %GM_CP_DS#;
      694    14117    3   SET_SEG_SZ: ;
      695    14118    3           MAX_SEG_SZ = 16;
      696    14119    3   SET_EXT_SZ: ;
      697    14120    3           MAX_EXT_SZ = MAX_SEG_SZ;
      698    14121    3           CURR_EXT_SZ = 0;
      699    14122    3           IF G$ASDT_USR$->G$SEGDESCA.V(SEGX)
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:24   
      700    14123    3           THEN CURR_EXT_SZ = G$ASDT_USR$->G$SEGDESCA.SIZE(SEGX) +1;
      701    14124    3           GOTO SET_SEG_DESC;
      702    14125    3           END;
      703    14126
      704    14127        /*  If he wants the next available segment, figure out which type it
      705    14128            should be and see if there is one we can use.
      706    14129        */
      707    14130    2      IF R$ = ADDR(NIL) THEN GOTO PICK_SEGX;
      708    14131
      709    14132    2      IF RESULTS.BASE$ = ADDR(NIL)
      710    14133    3      THEN DO;
      711    14134    3   PICK_SEGX: ;
      712    14135    3           IF (MCL_CODE = %G_MCL_FDS#) OR (MCL_CODE = %G_MCL_PDS#)
      713    14136    4           THEN DO;
      714    14137    4                PARM.ERR = BADVECT1;
      715    14138    4                ALTRETURN;
      716    14139    4                END;
      717    14140
      718    14141
      719    14142    3           IF NEXT > 2
      720    14143    4           THEN DO;
      721    14144    4                PARM.ERR = BADVECT0;
      722    14145    4                ALTRETURN;
      723    14146    4                END;
      724    14147
      725    14148        /* Set LO and HI to indicies into our ASDTX.
      726    14149        */
      727    14150    3           IF NEXT = %G_GDS_LITTLE# OR
      728    14151    3             (NEXT = %G_GDS_EITHER# AND SIZE <= 16)
      729    14152    4           THEN DO; LO=0; HI=%LSEG#-1; END;
      730    14153    4           ELSE DO; LO=%LSEG#; HI=%SEG#; END;
      731    14154
      732    14155    3           BEST_SEGX = 0;
      733    14156    3           BEST_SIZE = 0;
      734    14157
      735    14158    3   TRY_AGAIN: ;
      736    14159    4           DO SEGI = LO TO HI;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:25   
      737    14160    4                CURR_EXT_SZ = 0;
      738    14161    4                SEGX = ASDTX(SEGI);        /* index into user ASDT               */
      739    14162    4                EXT_HI_SEG = SEGHIX(SEGI);
      740    14163
      741    14164    5                DO I = SEGX TO EXT_HI_SEG;
      742    14165    5                     IF NOT G$ASDT_USR$->G$SEGDESCA.V(I)
      743    14166    5                     THEN CURR_EXT_SZ = CURR_EXT_SZ + SZ(SEGI);
      744    14167    5                     ELSE GOTO CHECK_FIT;
      745    14168    5                     END/*segx to ext_hi_seg*/;
      746    14169
      747    14170    4   CHECK_FIT:   ;
      748    14171    4                IF SIZE <= CURR_EXT_SZ
      749    14172    4                THEN GOTO GOT_SEGX;
      750    14173
      751    14174    4                IF CURR_EXT_SZ > BEST_SIZE
      752    14175    5                THEN DO;
      753    14176    5                     BEST_SIZE = CURR_EXT_SZ;
      754    14177    5                     BEST_SEGX = SEGX;
      755    14178    5                     END;
      756    14179
      757    14180    4                END/*lo to hi*/;
      758    14181
      759    14182    3           IF (NEXT = %G_GDS_EITHER#) AND (HI = 1)
      760    14183    4           THEN DO;
      761    14184    4                LO=%LSEG#; HI=%SEG#;
      762    14185    4                GOTO TRY_AGAIN;
      763    14186    4                END;
      764    14187
      765    14188    3           SEGX = BEST_SEGX;
      766    14189    3           IF SEGX ~= 0 THEN GOTO GOT_SEGX;
      767    14190
      768    14191    3           PARM.ERR = ALLUSED;
      769    14192    3           ALTRETURN;
      770    14193    3           END/*do if we must pick one*/;
      771    14194        /*E* ERROR: GMM-E$ALLUSED-E
      772    14195             MESSAGE: All available data segments have been allocated.
      773    14196        */
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:26   
      774    14197
      775    14198        /*  If a segment was specified, check thats its legal.
      776    14199        */
      777    14200    3      ELSE DO/* results.base$ was specified*/;
      778    14201    3           IF (ADDR(RESULTS.BASE)->B$CHECK_BASE.WORD1 & CHECK_BASE.WORD1)
      779    14202    3             OR (ADDR(RESULTS.BASE)->B$CHECK_BASE.WORD2 & CHECK_BASE.WORD2)
      780    14203    3           THEN GOTO NGSEGX;
      781    14204
      782    14205    3           IF RESULTS.BASE < %GM_SEG0100_BASE
      783    14206    3           THEN SEGX = RESULTS.BASE/4096;
      784    14207    3           ELSE SEGX = RESULTS.BASE/65536 + 15;
      785    14208
      786    14209    4           DO SEGI = 0 TO %SEG#;
      787    14210    4                IF SEGX = ASDTX(SEGI)
      788    14211    5                THEN DO;
      789    14212    5                     IF MCL_CODE > %G_MCL_GDDL# THEN RETURN;
      790    14213
      791    14214    5                     IF G$ASDT_USR$->G$SEGDESCA.V(SEGX)
      792    14215    6                     THEN DO;
      793    14216    6                          IF NOT G$JIT.FIRST_SEG(SEGX)
      794    14217    7                          THEN DO;
      795    14218    7                               PARM.ERR = ILGLSEG;
      796    14219    7                               ALTRETURN;
      797    14220    7                               END;
      798    14221    6                          END/*do if asdt.v*/;
      799    14222        /*E* ERROR: GMM-E$ILGLSEG-E
      800    14223             MESSAGE: VLP_SEGMENT.BASE$ does not specify the start of a memory extent.
      801    14224        */
      802    14225    5                     GOTO GOT_SEGX;
      803    14226    5                     END/*do if found in asdtx*/;
      804    14227    4                END/*do 0 to seg#*/;
      805    14228
      806    14229    3   NGSEGX: PARM.ERR = BADSEGID;
      807    14230    3           ALTRETURN;
      808    14231    3           END/*do if .base$ specified*/;
      809    14232        /*E* ERROR: GMM-E$BADSEGID-E
      810    14233             MESSAGE: VLP_SEGMENT.BASE$ does not specify a segment accessible by you.
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:27   
      811    14234        */
      812    14235
      813    14236
      814    14237    2   GOT_SEGX: ;
      815    14238    2      IF (MCL_CODE ~= %G_MCL_PDS#) AND (MCL_CODE ~= %G_MCL_CVM#)
      816    14239    3      THEN DO;
      817    14240    3           IF G$UHJIT$->G$UHJIT.SHRD_SEG(SEGX) ~= 0
      818    14241    3             OR G$JIT.CVM_REAL(SEGX)
      819    14242    4           THEN DO;
      820    14243    4                PARM.ERR = ITISSHARED;
      821    14244    4                ALTRETURN;
      822    14245    4                END;
      823    14246    3           END;
      824    14247        /*E* ERROR: GMM-E$ITISSHARED-E
      825    14248             MESSAGE: M$GDS or M$FDS on a shared segment is not allowed.
      826    14249        */
      827    14250
      828    14251        /* Set CURR_EXT_SZ to the number pages currently in the extent.
      829    14252        */
      830    14253    2      CALL GET_EXT_SIZE;
      831    14254
      832    14255        /* Set MAX_EXT_SZ to the number of virtual pages in the extent.
      833    14256        */
      834    14257    2      IF SEGX < %GM_ISR1#
      835    14258    2      THEN MAX_SEG_SZ = 16;
      836    14259    2      ELSE MAX_SEG_SZ = 256;
      837    14260
      838    14261    2      MAX_EXT_SZ = MAX_SEG_SZ;
      839    14262
      840    14263    2      I = SEGX+1;
      841    14264    3      DO WHILE (G$JIT.FIRST_SEG(I)= '0'B);
      842    14265    3           MAX_EXT_SZ = MAX_EXT_SZ + MAX_SEG_SZ;
      843    14266    3           I = I+1;
      844    14267    3           END;
      845    14268
      846    14269    2   SET_SEG_DESC: ;
      847    14270    2      G$SEGDESC = G$ASDT_USR$->G$SEGDESCA(SEGX);
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:28   
      848    14271
      849    14272    2      RETURN;
      850    14273    2   END GETSEGX;
      851    14274        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:29   
      852    14275        /*I* NAME: GET_EXT_SIZE
      853    14276
      854    14277             INPUT: SEGX - Index into user ASDT for the low seg of the extent
      855    14278             OUTPUT: CURR_EXT_SZ - Number of pages currently allocated in the extent
      856    14279        */
      857    14280    1   GET_EXT_SIZE: PROC;
      858    14281
      859    14282    2      CURR_EXT_SZ = 0;
      860    14283    2      I = SEGX;
      861    14284    3      DO WHILE (G$ASDT_USR$->G$SEGDESCA.V(I) );
      862    14285    3           IF G$JIT.FIRST_SEG(I) AND I ~= SEGX THEN EXIT;
      863    14286    3           CURR_EXT_SZ = CURR_EXT_SZ + G$ASDT_USR$->G$SEGDESCA.SIZE(I) +1;
      864    14287    3           I = I+1;
      865    14288    3           END;
      866    14289
      867    14290    2      RETURN;
      868    14291    2   END GET_EXT_SIZE;
      869    14292        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:30   
      870    14293
      871    14294        /*D*
      872    14295              NAME: GMM$SHAREDS
      873    14296              CALL:
      874    14297                   CALL GMS$SHAREDS (parameter) ALTRET(label);
      875    14298              PARAMETERS:
      876    14299                   parameter is the parameter structure defined by the
      877    14300                   GM_SHARED macro in GM_MACRO_M.
      878    14301
      879    14302              DESCRIPTION:
      880    14303                   This procedure is called from the M$OPEN monitor service
      881    14304                   procedure when ACS=DS1 - DS7 is specified.  After making
      882    14305                   the necessary validity check on the request it determines
      883    14306                   if memory is to be allocated, and does so, or if memory
      884    14307                   allready associated with the shared file is to be assoc-
      885    14308                   iated with this user.  If memory is allocated, the shared
      886    14309                   file table entry is updated.
      887    14310
      888    14311                                                                           */
      889    14312
      890    14313        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:31   
      891    14314    1   GMM$SHAREDS: ENTRY (PARM) ALTRET;
      892    14315
      893    14316
      894    14317    1      R$=ADDR(PARM);
      895    14318    1      SEGX=SHARED.SEGX;
      896    14319    1      PAGES=SHARED.PAGES;
      897    14320    2      DO I = 0 TO %SEG#;
      898    14321    2           SEGI=I;
      899    14322    2           IF SEGX = ASDTX(I) THEN GOTO OKSHSEGX;
      900    14323    2           END;
      901    14324    1      SHARED.ERR=BADSEGID;
      902    14325    1      ALTRETURN;
      903    14326
      904    14327    1   OKSHSEGX: ;
      905    14328    1      IF SIZE > SZ(SEGI)
      906    14329    2      THEN DO;
      907    14330    2           SHARED.ERR=SEGSIZE;
      908    14331    2           ALTRETURN;
      909    14332    2           END;
      910    14333
      911    14334    1      IF SHARED.S$->G$SFILE.PGSZ_PROC = 0
      912    14335    2      THEN DO;
      913    14336    2           IF SHARED.WP ~= BITBIN(%G_R_USR#)
      914    14337    3           THEN DO;
      915    14338    3                SHARED.ERR=BADDSPROT;
      916    14339    3                ALTRETURN;
      917    14340    3                END;
      918    14341    2           END;
      919    14342
      920    14343    1      IF SHARED.S$->G$SFILE.PGSZ_PROC = 0
      921    14344    2      THEN DO;
      922    14345    2           CHKSZ = '0'B;
      923    14346    2           CHKSZ.FLGS.REQ_ALL = '1'B;
      924    14347    2           CHKSZ.FLGS.PARK ='1'B;
      925    14348    2           CALL GMA$CHKSIZE (CHKSZ)
      926    14349    3           WHENALTRETURN DO;
      927    14350    3                PARM.ERR = CHKSZ.ERR;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:32   
      928    14351    3                ALTRETURN;
      929    14352    3                END;
      930    14353
      931    14354
      932    14355    2           CALL GMA$GET(SEGX,SIZE,SHARED.RP,SHARED.WP,PROT(0));
      933    14356    2           SHARED.S$->G$SFILE.PP_SEG1 = G$ASDT_USR$->G$SEGDESCA.BASE(SEGX);
      934    14357    2           SHARED.S$->G$SFILE.PGSZ_PROC = SIZE;
      935    14358    2           END;
      936    14359
      937    14360    1      CALL GMA$SHARED (SHARED.S$->G$SFILE);
      938    14361    1      RETURN;
      939    14362
      940    14363    1   END;

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:33   
--  Include file information  --

   GM_VIRTUAL_E.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   UD_ERRORS_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   G_SFILE_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   GU_MACROS_M.:E05TOU  is referenced.
   GM_MACRO_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GMM$MCLS.

   Procedure GMM$MCLS requires 1940 words for executable code.
   Procedure GMM$MCLS requires 54 words of local(AUTO) storage.

    No errors detected in file GMM$MCLS.:E05TSI    .

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:34   

 Object Unit name= GMM$MCLS                                   File name= GMM$MCLS.:E05TOU
 UTS= JUL 29 '97 22:06:55.92 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS     89     59  GMM$MCLS
    1   Proc  even  none  1940    794  GMM$MCLS
    2  RoData even  none     1      1  GMM$MCLS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        1  GMM$MCLS
     1      7          yes     yes      Std        1  GMM$MCL
     1    6D8          yes     yes      Std        1  GMM$SHAREDS
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:35   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       5 GMA$GETIO
 yes     yes           Std       5 GMA$GET
 yes     yes           Std       1 GMA$REL_ACCTMEM
 yes     yes           Std       1 GMA$CHKSIZE
 yes     yes           Std       2 GHH$ASD
 yes     yes           Std       1 GMA$SHARED
 yes     yes           Std       2 GMA$REL
 yes     yes           Std       3 GMA$CVM
 yes     yes           Std       3 GMA$PROT
 yes     yes           Std       1 GMA$UNSHARE
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_ARET
                       nStd      0 X6A_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$JIT$                           r    G$UHJIT$                              G$MHJIT$
r    G$ROS$                                G$USRT$                               G$WINDOW1$
     G$ASDT_USR$                           GM_MEM_HI                             GM_SHUF_HI
     G_MUAIS                          r    G$ROS$
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:36   


        1        1        /*M* Memory Management User Service Procedures                */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM = 3,IND=5,ENU=0,ECU=0,CRM=80    */
        8        8        /*P*
        9        9             NAME: GMM$MCLS
       10       10             PURPOSE:
       11       11                   To provide Memory Management User Services.
       12       12             DESCRIPTION:
       13       13                   This module includes procedures to process Memory
       14       14                   Management Service requests.
       15       15             REFERENCE:
       16       16                   "LCP-6 Monitor Service Interface" AF Section 26.7 #0703A-0.
       17       17                   "Memory Management for LCP-6" AF Section 26.2 #0708A-0.
       18       18                   The FPTs are defined in GM_LCP6_M .
       19       19        */
       20       20        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:37   
       21       21        GMM$MCLS: PROC (PARM) ALTRET;

     21   1 000000  D380 0000 0000  xent GMM$MCLS        LNJ,B5   X6A_AUTO_1
          1 000003       0036 0001                       DC       54,1
          1 000005  0F81 0006                            B        s:13656,PREL

       22       22
       23       23
       24       24 S      %INCLUDE GH_LCP6_M;
       25       25 S      %INCLUDE GM_LCP6_M;
       26       26 S      %INCLUDE GU_LCP6_M;
       27       27        %INCLUDE GM_MACRO_M;
       28      509        %INCLUDE GU_MACROS_M;
       29      668        %INCLUDE G_HJIT_M;
       30      813        %INCLUDE G_JIT_M;
       31     1078        %INCLUDE G_ROS_M;
       32     1160        %INCLUDE GH_SCHD_M;
       33     1304        %INCLUDE G_SFILE_M;
       34     1364
       35     1365
       36     1366        %GUD_HAND_PARAMS (FPTN=PARM);           /* FPT parameters                     */
       37     1442        %GM_SHARED_PARAMS (FPTN=SHARED,STCLASS="BASED(R$)");
       38     1532        %GM_CHKSZ_PARAMS (FPTN=CHKSZ, STCLASS=AUTO);
       39     1626
       40     1627        /* EQUs and SUBs */
       41     1628
       42     1629        %INCLUDE M_ERRORS_C;
       43     1693        %INCLUDE UD_ERRORS_C;
       44     1735        %INCLUDE GH_SCHD_E;
       45     1831        %INCLUDE GM_VIRTUAL_E;
       46     2041 S      %INCLUDE G_LCP6_E;
       47     2042        %GM_MCL_E;
       48     2053        %G$JIT_E;
       49     2115
       50     2116        /* Based */
       51     2117
       52     2118        %FPT_GDS (FPTN=FPT_GDS,VECTORS=NO,STCLASS="BASED (V$)");
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:38   
       53     2142        %FPT_FDS (FPTN=FPT_FDS,VECTORS=NO,STCLASS="BASED (V$)");
       54     2164        %FPT_GAUTO (FPTN=FPT_GAUTO,VECTORS=NO,STCLASS="BASED (V$)");
       55     2186        %FPT_FAUTO (FPTN=FPT_FAUTO,VECTORS=NO,STCLASS="BASED (V$)");
       56     2208        %FPT_PDS (FPTN=FPT_PDS,VECTORS=NO,STCLASS="BASED (V$)");
       57     2230        %FPT_CVM (FPTN=FPT_CVM,VECTORS=NO,STCLASS="BASED (V$)");
       58     2254        %G$SEGDESC (FPTN="G$SEGDESCA(0:0)",STCLASS=BASED);
       59     2276        %G$JIT (FPTN=G$JIT,STCLASS="BASED (G$JIT$)");
       60     2690        %G$MHJIT (FPTN=G$MHJIT,STCLASS="BASED(G$MHJIT$)");
       61     9564        %G$ROS (FPTN=G$ROS,STCLASS="BASED(G$ROS$)");
       62     9608        %G$USER (FPTN="G$USER(0:0)",STCLASS="BASED(G$USRT$)");
       63     9619        %G$UHJIT (FPTN=G$UHJIT,STCLASS="BASED (G$UHJIT$)");
       64    12593        %VLP_SEGMENT (FPTN=RESULTS,STCLASS="BASED(R$)");
       65    12614        %VLP_SEGMENT (FPTN=FROMSEG,STCLASS="BASED(L$)");
       66    12635        %VLR_GDDL (STCLASS="BASED(V$)");
       67    12658        %G$USER (FPTN=G$U,STCLASS="BASED(CU$)");
       68    12669        %G$SFILE (ARRAYED=NO,STCLASS=BASED);
       69    12706
       70    12707        /* Auto */
       71    12708
       72    12709        %G$SEGDESC (STCLASS=" ");
       73    12731    1   DCL MCL_CODE UBIN;
       74    12732    1   DCL HI UBIN;
       75    12733    1   DCL I UBIN;
       76    12734    1   DCL LO UBIN;
       77    12735    1   DCL NEXT UBIN;
       78    12736    1   DCL L$ PTR;
       79    12737    1   DCL BASE UBIN;
       80    12738    1   DCL FROMX UBIN;
       81    12739    1   DCL CU$ PTR;
       82    12740    1   DCL PAGES UBIN;
       83    12741    1   DCL V$ PTR;
       84    12742    1   DCL R$ PTR;
       85    12743    1   DCL SEGI UBIN;
       86    12744
       87    12745    1   DCL SEGX UBIN;                     /* low segment number of specified extent  */
       88    12746    1   DCL SEGY UBIN;                     /* high segment number of specified extent */
       89    12747    1   DCL MAX_EXT_SZ UBIN;                    /* max pgs that may be allocated      */
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:39   
       90    12748    1   DCL CURR_EXT_SZ UBIN;                   /* currents pgs allocated             */
       91    12749    1   DCL EXT_HI_SEG UBIN;          /* highest possible seg number of the extent    */
       92    12750
       93    12751    1   DCL THIS_SIZE UBIN;
       94    12752    1   DCL MAX_SEG_SZ UBIN;
       95    12753
       96    12754    1   DCL BEST_SEGX UBIN;
       97    12755    1   DCL BEST_SIZE UBIN;
       98    12756
       99    12757    1   DCL SIZE UBIN;
      100    12758
      101    12759        /* Constants */
      102    12760
      103    12761        %EQU SEG#=15;            /* Number of data segments which we know, less 1.    */
      104    12762        %EQU LSEG#=6;                 /* Number of them that are little segments.     */
      105    12763
      106    12764    1   DCL SETLO(0:2) UBIN CONSTANT INIT(0, 0, 2);
      107    12765                                                /* corresponds to EITHER, LITTLE, BIG */
      108    12766
      109    12767    1   DCL SEGHIX(0:%SEG#) UBIN CONSTANT INIT(%GM_LAUTO_DS3#,
      110    12768    1                                          %GM_LAUTO_DS3#,
      111    12769    1                                          %GM_LAUTO_DS3#,
      112    12770    1                                          %GM_LAUTO_DS3#,
      113    12771    1                                          %GM_LAUTO_DS3#,
      114    12772    1                                          %GM_LAUTO_DS3#,
      115    12773    1                                          %GM_USR_DS4#,
      116    12774    1                                          %GM_USR_DS4#,
      117    12775    1                                          %GM_USR_DS4#,
      118    12776    1                                          %GM_USR_DS4#,
      119    12777    1                                          %GM_USR_DS4#,
      120    12778    1                                          %GM_USR_DS4#,
      121    12779    1                                          %GM_USR_DS4#,
      122    12780    1                                          %GM_USR_DS4#,
      123    12781    1                                          %GM_USR_DS4#,
      124    12782    1                                          %GM_USR_DS4#);
      125    12783
      126    12784
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:40   
      127    12785        /* ASDTX contains an index into the user ASDT for each of the 9
      128    12786           user allocatable segments.
      129    12787        */
      130    12788    1   DCL ASDTX(0:%SEG#) UBIN CONSTANT INIT(%GM_USR_DS1#,
      131    12789    1                                         %GM_USR_DS2#,
      132    12790    1                                          %GM_CP_DS#,
      133    12791    1                                          %GM_LAUTO_DS#,
      134    12792    1                                          %GM_LAUTO_DS2#,
      135    12793    1                                          %GM_LAUTO_DS3#,
      136    12794    1                                         %GM_ISR3#,
      137    12795    1                                         %GM_ISR4#,
      138    12796    1                                         %GM_ISR5#,
      139    12797    1                                         %GM_ISR6#,
      140    12798    1                                         %GM_ISR7#,
      141    12799    1                                          %GM_DB_PROC#,
      142    12800    1                                          %GM_CP_PROC#,
      143    12801    1                                          %GM_UAUTO_DS#,
      144    12802    1                                         %GM_USR_DS3#,
      145    12803    1                                         %GM_USR_DS4#);
      146    12804
      147    12805
      148    12806
      149    12807    1   DCL SZ(0:%SEG#) UBIN CONSTANT INIT(16*%LSEG#, 256*0);
      150    12808    1   DCL PROT(0:1) BIT(2) CONSTANT ALIGNED INIT(%G_R_MON#, %G_R_USR#);
      151    12809    1   DCL 1 CHECK_BASE CONSTANT,
      152    12810    1         2 WORD1 BIT(16) INIT('FFF0'X),
      153    12811    1         2 WORD2 BIT(16) INIT('0FFF'X);
      154    12812    1   DCL 1 B$CHECK_BASE BASED ALIGNED,
      155    12813    1         2 WORD1 BIT(16),
      156    12814    1         2 WORD2 BIT(16);
      157    12815
      158    12816        /* Symrefs */
      159    12817
      160    12818    1   DCL G$JIT$ PTR SYMREF READONLY;
      161    12819    1   DCL G$UHJIT$ PTR SYMREF READONLY;
      162    12820    1   DCL G$MHJIT$ PTR SYMREF;
      163    12821    1   DCL G$ROS$ PTR SYMREF READONLY;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:41   
      164    12822    1   DCL G$USRT$ PTR SYMREF;
      165    12823    1   DCL G$WINDOW1$ PTR SYMREF;
      166    12824    1   DCL G$ASDT_USR$ PTR SYMREF;
      167    12825    1   DCL GM_MEM_HI UBIN SYMREF;
      168    12826    1   DCL GM_SHUF_HI UBIN SYMREF;
      169    12827    1   DCL G_MUAIS UBIN SYMREF;
      170    12828
      171    12829        /* Entrefs */
      172    12830
      173    12831    1   DCL GHH$ASD ENTRY (2) ALTRET;
      174    12832    1   DCL GMA$GET ENTRY(5) ALTRET;
      175    12833    1   DCL GMA$GETIO ENTRY(5) ALTRET;
      176    12834    1   DCL GMA$REL ENTRY(2) ALTRET;
      177    12835    1   DCL GMA$CHKSIZE ENTRY(1) ALTRET;
      178    12836    1   DCL GMA$REL_ACCTMEM ENTRY(1) ALTRET;
      179    12837    1   DCL GMA$PROT ENTRY(3) ALTRET;
      180    12838    1   DCL GMA$CVM ENTRY(3) ALTRET;
      181    12839    1   DCL GMA$UNSHARE ENTRY(1) ALTRET;
      182    12840    1   DCL GMA$SHARED ENTRY(1) ALTRET;
      183    12841
      184    12842        %VLP_ERRCODE (FPTN=SEGSIZE,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      185    12843              STCLASS=CONSTANT,ERR#=%E$SEGSIZE);
      186    12889        %VLP_ERRCODE (FPTN=BADSEGID,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      187    12890              STCLASS=CONSTANT,ERR#=%E$BADSEGID);
      188    12936        %VLP_ERRCODE (FPTN=ALLUSED,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      189    12937              STCLASS=CONSTANT,ERR#=%E$ALLUSED);
      190    12983        %VLP_ERRCODE (FPTN=ALLGONE,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      191    12984              STCLASS=CONSTANT,ERR#=%E$ALLGONE);
      192    13030        %VLP_ERRCODE (FPTN=SEGFULL,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      193    13031              STCLASS=CONSTANT,ERR#=%E$SEGFULL);
      194    13077        %VLP_ERRCODE (FPTN=MMPRIV,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      195    13078              STCLASS=CONSTANT,ERR#=%E$MMPRIV);
      196    13124        %VLP_ERRCODE (FPTN=BADPP,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      197    13125              STCLASS=CONSTANT,ERR#=%E$BADPP);
      198    13171        %VLP_ERRCODE (FPTN=IOEXT,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
      199    13172              STCLASS=CONSTANT,ERR#=%E$DSMODEBAD);
      200    13218        %VLP_ERRCODE (FPTN=BADDSPROT,FCG='GM',MID='M',MON='1'B,SEV=%G_SEV_ERR#,
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:42   
      201    13219              STCLASS=CONSTANT,ERR#=%E$DSPROTBAD);
      202    13265        %VLP_ERRCODE (FPTN=HANDSOFF,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      203    13266              STCLASS=CONSTANT,ERR#=%E$HANDSOFF);
      204    13312        %VLP_ERRCODE (FPTN=BADVECT0,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      205    13313              STCLASS=CONSTANT,ERR#=%E$BADVECT0);
      206    13359        %VLP_ERRCODE (FPTN=BADVECT1,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      207    13360              STCLASS=CONSTANT,ERR#=%E$BADVECT1);
      208    13406        %VLP_ERRCODE (FPTN=ILGLSEG,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      209    13407              STCLASS=CONSTANT,ERR#=%E$ILGLSEG);
      210    13453        %VLP_ERRCODE (FPTN=BIGFREE,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      211    13454              STCLASS=CONSTANT,ERR#=%E$BIGFREE);
      212    13500        %VLP_ERRCODE (FPTN=ITISSHARED,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      213    13501              STCLASS=CONSTANT,ERR#=%E$ITISSHARED);
      214    13547        %VLP_ERRCODE (FPTN=INTERR,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      215    13548              STCLASS=CONSTANT,ERR#=%E$INTLVL);
      216    13594        %VLP_ERRCODE (FPTN=PGINUSE,FCG=GM,MID=M,MON='1'B,SEV=%G_SEV_ERR#,
      217    13595              STCLASS=CONSTANT,ERR#=%E$PGINUSE);
      218    13641        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:43   
      219    13642        /*D*
      220    13643             NAME: GMM$MCL
      221    13644             CALL:
      222    13645                   Standard MCL service decoder call.
      223    13646             DESCRIPTION:
      224    13647                   This routine is called to perform the memory management
      225    13648                   service request as specified in the parameter block passed
      226    13649                   to it by the MCL services decoder.
      227    13650        */
      228    13651
      229    13652
      230    13653
      231    13654    1   GMM$MCL: ENTRY (PARM) ALTRET;

  13654   1 000007  D380 0000 0000  xent GMM$MCL         LNJ,B5   X6A_AUTO_1
          1 00000A       0036 0001                       DC       54,1

      232    13655
      233    13656    1      IF G$USRT$->G$USER.UHJITPP(G$MHJIT.CUN) ~= G$UHJIT.ASDT_MCL.UHJIT.BASE

  13656   1 00000C  EC80 0000 0000  xsym                 LDB,B6   G$MHJIT$
          1 00000F  B846 0351                            LDR,R3   849,B6
          1 000011  DC80 0000 0000  xsym                 LDB,B5   G$USRT$
          1 000014  CBC5 0011                            LAB,B4   17,B5
          1 000016  3F0C                                 MLV,R3   12
          1 000017  BC80 0000 0000  xsym                 LDB,B3   G$UHJIT$
          1 00001A  F843 0048                            LDR,R7   72,B3
          1 00001C  F570 7FFF                            AND,R7   32767,IMO
          1 00001E  6C00                                 LDV,R6   0
          1 00001F  84B4                                 SID      ,B4,R3
          1 000020  6981 0003                            BNEZ,R6  s:13658,PREL
          1 000022  7901 000B                            BEZ,R7   s:13665,PREL

      234    13657    2      THEN DO;

      235    13658    2           PARM.ERR = INTERR;

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:44   
  13658   1 000024  8C80 0000 0055  00                   LDI      INTERR
          1 000027  CCC7 0004                            LDB,B4   @PARM,AUTO
          1 000029  8D44 0003                            SDI      3,B4

      236    13659    2           RETURN;

  13659   1 00002B  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      237    13660    2           END;
      238    13661        /*E* ERROR: GMM-E$INTLVL-E
      239    13662             MESSAGE: Memory Management services not allowed from an interrupt.
      240    13663        */
      241    13664
      242    13665    1      MCL_CODE = PARM.MCL.CODE;

  13665   1 00002E  CCC7 0004                            LDB,B4   @PARM,AUTO
          1 000030  E804                                 LDR,R6   ,B4
          1 000031  E570 03FF                            AND,R6   1023,IMO
          1 000033  EF47 000C                            STR,R6   MCL_CODE,AUTO

      243    13666    1      V$ = PARM.PTRS.PAR1$;

  13666   1 000035  ACC4 0006                            LDB,B2   6,B4
          1 000037  AFC7 0018                            STB,B2   V$,AUTO

      244    13667    1      IF MCL_CODE ~= %G_MCL_GDDL#

  13667   1 000039  E970 0106                            CMR,R6   262,IMO
          1 00003B  0901 0005                            BE       s:13669,PREL

      245    13668    1      THEN R$=PARM.PTRS.PAR2$;

  13668   1 00003D  9CC4 0008                            LDB,B1   8,B4
          1 00003F  9FC7 001A                            STB,B1   R$,AUTO

      246    13669    1      CU$=G$MHJIT.CU$;

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:45   
  13669   1 000041  9CC6 0352                            LDB,B1   850,B6
          1 000043  9FC7 0015                            STB,B1   CU$,AUTO

      247    13670
      248    13671    2      DO CASE (MCL_CODE);

  13671   1 000045  B856                                 LDR,R3   R6
          1 000046  BA70 FEFE                            ADD,R3   -258,IMO
          1 000048  3D07                                 CMV,R3   7
          1 000049  0281 043C                            BGE      s:14055,PREL
          1 00004B  A830 0000 0051  01                   LDR,R2   s:13671+12,R3
          1 00004E  83A0 0000 0058  01                   JMP      s:13675,R2
          1 000051       0000                            DC       s:13675,PREL
          1 000052       0193                            DC       s:13816,PREL
          1 000053       0000                            DC       s:13675,PREL
          1 000054       0193                            DC       s:13816,PREL
          1 000055       024C                            DC       s:13896,PREL
          1 000056       02B7                            DC       s:13926,PREL
          1 000057       02F0                            DC       s:13943,PREL

      249    13672
      250    13673    2       CASE (%G_MCL_GDS#,%G_MCL_GAUTO#);

      251    13674
      252    13675    2         CHKSZ = '0'B;

  13675   1 000058  5C08                                 LDV,R5   8
          1 000059  0021                                 ALR      ;
          1 00005A       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 00005C       4007 0006                                ALPHANUM(CHKSZ,AUTO,,R5,FILL)

      253    13676    2         IF MCL_CODE = %G_MCL_GDS#

  13676   1 00005E  437F                                 CSYNC    s:13675+5,SPREL
          1 00005F  C847 000C                            LDR,R4   MCL_CODE,AUTO
          1 000061  C970 0102                            CMR,R4   258,IMO
          1 000063  0981 001B                            BNE      s:13686,PREL
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:46   

      254    13677    3         THEN DO;

      255    13678    3              CHKSZ.FLGS.REQ_ALL=FPT_GDS.FREE;

  13678   1 000065  ACC7 0018                            LDB,B2   V$,AUTO
          1 000067  9842 0001                            LDR,R1   1,B2
          1 000069  1041                                 SOR,R1   1
          1 00006A  9AC7 0009                            SRM,R1,'4000'X    CHKSZ+3,AUTO
          1 00006C       4000

      256    13679    3              CHKSZ.FLGS.NSHUF=FPT_GDS.IOBUF;

  13679   1 00006D  9842 0001                            LDR,R1   1,B2
          1 00006F  1041                                 SOR,R1   1
          1 000070  9AC7 0009                            SRM,R1,'1000'X    CHKSZ+3,AUTO
          1 000072       1000

      257    13680    3              CHKSZ.FLGS.PARK=FPT_GDS.PARK;

  13680   1 000073  9842 0001                            LDR,R1   1,B2
          1 000075  1041                                 SOR,R1   1
          1 000076  9AC7 0009                            SRM,R1,'2000'X    CHKSZ+3,AUTO
          1 000078       2000

      258    13681    3              NEXT=FPT_GDS.NEXT;

  13681   1 000079  9842 0001                            LDR,R1   1,B2
          1 00007B  9570 00FF                            AND,R1   255,IMO
          1 00007D  9F47 0010                            STR,R1   NEXT,AUTO

      259    13682    3              END;

      260    13683
      261    13684        /*  Call GETSEGX to get info about the current allocation.
      262    13685        */
      263    13686    2         SIZE=FPT_GDS.PAGES;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:47   

  13686   1 00007F  ACC7 0018                            LDB,B2   V$,AUTO
          1 000081  9802                                 LDR,R1   ,B2
          1 000082  9F47 0026                            STR,R1   SIZE,AUTO

      264    13687    2         CALL GETSEGX ALTRET(RTRN);

  13687   1 000084  E3C0 044A                            LNJ,B6   s:0,PREL
          1 000086       0400                            DC       s:14055,PREL

      265    13688
      266    13689        /* If requested size is zero this is simply a status request.
      267    13690        */
      268    13691    2         IF SIZE ~= 0

  13691   1 000087  E847 0026                            LDR,R6   SIZE,AUTO
          1 000089  6901 011D                            BEZ,R6   s:13783,PREL

      269    13692    3         THEN DO;

      270    13693    3              IF G$SEGDESC.V AND CHKSZ.FLGS.NSHUF

  13693   1 00008B  89C7 000A                            CMZ      G$SEGDESC,AUTO
          1 00008D  0881 0010                            BAGE     s:13706,PREL
          1 00008F  82C7 0009                            LB,'1000'X        CHKSZ+3,AUTO
          1 000091       1000
          1 000092  0581 000B                            BBF      s:13706,PREL

      271    13694    4              THEN DO;

      272    13695    4                   PARM.ERR=IOEXT;

  13695   1 000094  8C80 0000 0045  00                   LDI      IOEXT
          1 000097  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 000099  8D46 0003                            SDI      3,B6

      273    13696    4                   RETURN;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:48   

  13696   1 00009B  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      274    13697    4                   END;
      275    13698        /*E* ERROR: GMM-E$DSMODEBAD-E
      276    13699             MESSAGE: You may not extend an I/O data segment.
      277    13700        */
      278    13701
      279    13702        /*  Check if the requested size will fit into the segment.  If not,
      280    13703            and if FREE was specified, return.  Otherwise set the error code
      281    13704            and adjust the requested size to get all we can.
      282    13705        */
      283    13706    3              IF SIZE + CURR_EXT_SZ > MAX_EXT_SZ

  13706   1 00009E  EA47 0020                            ADD,R6   CURR_EXT_SZ,AUTO
          1 0000A0  E947 001F                            CMR,R6   MAX_EXT_SZ,AUTO
          1 0000A2  0381 001D                            BLE      s:13723,PREL

      284    13707    4              THEN DO;

      285    13708    4                   SIZE = MAX_EXT_SZ - CURR_EXT_SZ;

  13708   1 0000A4  E847 001F                            LDR,R6   MAX_EXT_SZ,AUTO
          1 0000A6  E247 0020                            SUB,R6   CURR_EXT_SZ,AUTO
          1 0000A8  EF47 0026                            STR,R6   SIZE,AUTO

      286    13709    4                   PARM.ERR=SEGFULL;

  13709   1 0000AA  8C80 0000 003F  00                   LDI      SEGFULL
          1 0000AD  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 0000AF  8D46 0003                            SDI      3,B6

      287    13710
      288    13711    4                   IF SIZE=0 OR CHKSZ.FLGS.REQ_ALL THEN RETURN;

  13711   1 0000B1  D847 0026                            LDR,R5   SIZE,AUTO
          1 0000B3  5901 0006                            BEZ,R5   s:13711+9,PREL
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:49   
          1 0000B5  82C7 0009                            LB,'4000'X        CHKSZ+3,AUTO
          1 0000B7       4000
          1 0000B8  0581 0004                            BBF      s:13716,PREL

  13711   1 0000BA  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      289    13712        /*E* ERROR: GMM-E$SEGFULL-E
      290    13713         MESSAGE: Your request exceeds the available pages in the specified memory segment.
      291    13714        */
      292    13715
      293    13716    4                   PARM.ERR.SEV = %G_SEV_CONT#;

  13716   1 0000BD  8846 0004                            LBF,'0007'X       4,B6
  13716   1 0000BF       0007

      294    13717    4                   END;

      295    13718
      296    13719
      297    13720        /*  Check the guys size against his resource limit.
      298    13721            CHKSIZE adjusts SIZE to fit; PARAM.ERR set.
      299    13722        */
      300    13723    3              CHKSZ.SIZE = SIZE;

  13723   1 0000C0  E847 0026                            LDR,R6   SIZE,AUTO
          1 0000C2  EF47 0006                            STR,R6   CHKSZ,AUTO

      301    13724    3              CALL GMA$CHKSIZE (CHKSZ)

  13724   1 0000C4  EBC7 0006                            LAB,B6   CHKSZ,AUTO
          1 0000C6  EFC7 002C                            STB,B6   SIZE+6,AUTO
          1 0000C8  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 0000CA  CBF0 0100                            LAB,B4   256,IMO
          1 0000CC  E380 0000 0000  xent                 LNJ,B6   GMA$CHKSIZE
          1 0000CF       0003                            DC       s:13726,PREL
          1 0000D0  0F81 001A                            B        s:13733,PREL

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:50   
      302    13725    4              WHENALTRETURN DO;

      303    13726    4                   IF CHKSZ.FLGS.REQ_ALL OR CHKSZ.ERR.ERR#=%E$BRKCTY

  13726   1 0000D2  82C7 0009                            LB,'4000'X        CHKSZ+3,AUTO
  13726   1 0000D4       4000
          1 0000D5  0501 0008                            BBT      s:13728,PREL
          1 0000D7  E847 0008                            LDR,R6   CHKSZ+2,AUTO
          1 0000D9  6043                                 SOR,R6   3
          1 0000DA  E970 0287                            CMR,R6   647,IMO
          1 0000DC  0981 000E                            BNE      s:13733,PREL

      304    13727    5                   THEN DO;

      305    13728    5                        PARM.ERR = CHKSZ.ERR;

  13728   1 0000DE  8CC7 0007                            LDI      CHKSZ+1,AUTO
          1 0000E0  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 0000E2  8D46 0003                            SDI      3,B6

      306    13729    5                        PARM.ERR.SEV = %G_SEV_ERR#;

  13729   1 0000E4  5C04                                 LDV,R5   4
          1 0000E5  DAC6 0004                            SRM,R5,'0007'X    4,B6
          1 0000E7       0007

      307    13730    5                        RETURN;

  13730   1 0000E8  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      308    13731    5                        END;
      309    13732    4                   END;
      310    13733    3              SIZE = CHKSZ.SIZE;

  13733   1 0000EB  E847 0006                            LDR,R6   CHKSZ,AUTO
          1 0000ED  EF47 0026                            STR,R6   SIZE,AUTO

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:51   
      311    13734    3              IF CHKSZ.ERR ~= '0'B

  13734   1 0000EF  EB80 0000 0000  02                   LAB,B6   0
          1 0000F2  5C01                                 LDV,R5   1
          1 0000F3  0022                                 ACM      ;
          1 0000F4       4407 0007                                ALPHANUM(CHKSZ+1,AUTO,,4,FILL),;
          1 0000F6       4006 0000                                ALPHANUM(0,B6,,R5,FILL)
          1 0000F8  5381 0007                            CBE      s:13740,PREL

      312    13735    3              THEN PARM.ERR = CHKSZ.ERR;

  13735   1 0000FA  8CC7 0007                            LDI      CHKSZ+1,AUTO
          1 0000FC  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 0000FE  8D46 0003                            SDI      3,B6

      313    13736
      314    13737
      315    13738        /* Find the index to the first segment to get or extend.
      316    13739        */
      317    13740    3              IF CURR_EXT_SZ = 0

  13740   1 000100  E847 0020                            LDR,R6   CURR_EXT_SZ,AUTO
          1 000102  6981 0011                            BNEZ,R6  s:13748,PREL

      318    13741    4              THEN DO;

      319    13742    4                   THIS_SIZE = MAX_SEG_SZ;

  13742   1 000104  C847 0023                            LDR,R4   MAX_SEG_SZ,AUTO
          1 000106  CF47 0022                            STR,R4   THIS_SIZE,AUTO

      320    13743    4                   SEGI = SEGX;

  13743   1 000108  B847 001D                            LDR,R3   SEGX,AUTO
          1 00010A  BF47 001C                            STR,R3   SEGI,AUTO

      321    13744    4                   G$JIT.FIRST_SEG(SEGX) = '1'B;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:52   

  13744   1 00010C  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 00010F  DBC6 0064                            LAB,B5   100,B6
          1 000111  8935                                 LBT      ,B5,R3

      322    13745    4                   END;

  13745   1 000112  0F81 001A                            B        s:13759,PREL

      323    13746
      324    13747    4              ELSE DO;

      325    13748    4                   SEGI = CURR_EXT_SZ / MAX_SEG_SZ;
             13748                            /*# fully allocated segs-this extent*/

  13748   1 000114  F856                                 LDR,R7   R6
          1 000115  6C00                                 LDV,R6   0
          1 000116  F347 0023                            DIV,R7   MAX_SEG_SZ,AUTO
          1 000118  E857                                 LDR,R6   R7
          1 000119  EF47 001C                            STR,R6   SEGI,AUTO

      326    13749    4                   THIS_SIZE = MAX_SEG_SZ - ( CURR_EXT_SZ - (MAX_SEG_SZ * SEGI) );

  13749   1 00011B  F856                                 LDR,R7   R6
          1 00011C  FB47 0023                            MUL,R7   MAX_SEG_SZ,AUTO
          1 00011E  E857                                 LDR,R6   R7
          1 00011F  E247 0020                            SUB,R6   CURR_EXT_SZ,AUTO
          1 000121  EA47 0023                            ADD,R6   MAX_SEG_SZ,AUTO
          1 000123  EF47 0022                            STR,R6   THIS_SIZE,AUTO

      327    13750
      328    13751    4                   SEGI = SEGX + SEGI;

  13751   1 000125  C847 001D                            LDR,R4   SEGX,AUTO
          1 000127  CA47 001C                            ADD,R4   SEGI,AUTO
          1 000129  CF47 001C                            STR,R4   SEGI,AUTO

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:53   
      329    13752
      330    13753    4                   IF THIS_SIZE = 0

  13753   1 00012B  6901 0071                            BEZ,R6   s:13779,PREL

      331    13754    4                   THEN GOTO SEG_FULL;
      332    13755    4                   END;

      333    13756
      334    13757        /*  Get the requested segment, set the protection.
      335    13758        */
      336    13759    4              DO WHILE(SIZE > 0);

  13759   1 00012D  E847 0026                            LDR,R6   SIZE,AUTO
          1 00012F  6901 0077                            BEZ,R6   s:13783,PREL

      337    13760    4                   IF THIS_SIZE > SIZE

  13760   1 000131  E847 0022                            LDR,R6   THIS_SIZE,AUTO
          1 000133  E947 0026                            CMR,R6   SIZE,AUTO
          1 000135  0381 0005                            BLE      s:13763,PREL

      338    13761    4                   THEN THIS_SIZE = SIZE;

  13761   1 000137  E847 0026                            LDR,R6   SIZE,AUTO
          1 000139  EF47 0022                            STR,R6   THIS_SIZE,AUTO

      339    13762
      340    13763    4                   IF CHKSZ.FLGS.NSHUF

  13763   1 00013B  82C7 0009                            LB,'1000'X        CHKSZ+3,AUTO
  13763   1 00013D       1000
          1 00013E  0581 0033                            BBF      s:13773,PREL

      341    13764    5                   THEN DO;

      342    13765    5                        CALL GMA$GETIO (SEGI,THIS_SIZE,%G_R_USR#,%G_R_USR#,%G_RING0#)
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:54   

  13765   1 000140  EBF0 0000                            LAB,B6   0,IMO
          1 000142  DBF0 0000                            LAB,B5   0,IMO
          1 000144  CBF0 C000                            LAB,B4   -16384,IMO
          1 000146  CFC7 0034                            STB,B4   SIZE+14,AUTO
          1 000148  DFC7 0032                            STB,B5   SIZE+12,AUTO
          1 00014A  EFC7 0030                            STB,B6   SIZE+10,AUTO
          1 00014C  BBC7 0022                            LAB,B3   THIS_SIZE,AUTO
          1 00014E  BFC7 002E                            STB,B3   SIZE+8,AUTO
          1 000150  ABC7 001C                            LAB,B2   SEGI,AUTO
          1 000152  AFC7 002C                            STB,B2   SIZE+6,AUTO
          1 000154  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 000156  CBF0 0500                            LAB,B4   1280,IMO
          1 000158  E380 0000 0000  xent                 LNJ,B6   GMA$GETIO
          1 00015B       0003                            DC       s:13767,PREL
          1 00015C  0F81 000A                            B        s:13770,PREL

      343    13766    6                        WHENALTRETURN DO;

      344    13767    6                             PARM.ERR = ALLGONE;

  13767   1 00015E  8C80 0000 003D  00                   LDI      ALLGONE
          1 000161  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 000163  8D46 0003                            SDI      3,B6

      345    13768    6                             GOTO SETR;

  13768   1 000165  0F81 0041                            B        s:13783,PREL

      346    13769    6                             END;
      347    13770    5                        G$JIT.NSPC = G$JIT.NSPC + THIS_SIZE;

  13770   1 000167  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 00016A  E846 0087                            LDR,R6   135,B6
          1 00016C  EA47 0022                            ADD,R6   THIS_SIZE,AUTO
          1 00016E  EF46 0087                            STR,R6   135,B6

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:55   
      348    13771    5                        END;

  13771   1 000170  0F81 0026                            B        s:13777,PREL

      349    13772    5                   ELSE DO;

      350    13773    5                        CALL GMA$GET (SEGI,THIS_SIZE,%G_R_USR#,%G_R_USR#,%G_RING0#);

  13773   1 000172  EBF0 0000                            LAB,B6   0,IMO
          1 000174  DBF0 0000                            LAB,B5   0,IMO
          1 000176  CBF0 C000                            LAB,B4   -16384,IMO
          1 000178  CFC7 0034                            STB,B4   SIZE+14,AUTO
          1 00017A  DFC7 0032                            STB,B5   SIZE+12,AUTO
          1 00017C  EFC7 0030                            STB,B6   SIZE+10,AUTO
          1 00017E  BBC7 0022                            LAB,B3   THIS_SIZE,AUTO
          1 000180  BFC7 002E                            STB,B3   SIZE+8,AUTO
          1 000182  ABC7 001C                            LAB,B2   SEGI,AUTO
          1 000184  AFC7 002C                            STB,B2   SIZE+6,AUTO
          1 000186  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 000188  CBF0 0500                            LAB,B4   1280,IMO
          1 00018A  E380 0000 0000  xent                 LNJ,B6   GMA$GET
          1 00018D       0001                            DC       s:13774,PREL

      351    13774    5                        G$JIT.PCDS = G$JIT.PCDS + THIS_SIZE;

  13774   1 00018E  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 000191  E846 0083                            LDR,R6   131,B6
          1 000193  EA47 0022                            ADD,R6   THIS_SIZE,AUTO
          1 000195  EF46 0083                            STR,R6   131,B6

      352    13775    5                        END;

      353    13776
      354    13777    4                   SIZE = SIZE - THIS_SIZE;

  13777   1 000197  E847 0026                            LDR,R6   SIZE,AUTO
          1 000199  E247 0022                            SUB,R6   THIS_SIZE,AUTO
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:56   
          1 00019B  EF47 0026                            STR,R6   SIZE,AUTO

      355    13778    4   SEG_FULL:
      356    13779    4                   SEGI = SEGI +1;

  13779   1 00019D  8AC7 001C            SEG_FULL        INC      SEGI,AUTO

      357    13780    4                   THIS_SIZE = MAX_SEG_SZ;

  13780   1 00019F  E847 0023                            LDR,R6   MAX_SEG_SZ,AUTO
          1 0001A1  EF47 0022                            STR,R6   THIS_SIZE,AUTO

      358    13781    4                   END/*do while*/;

  13781   1 0001A3  D847 0026                            LDR,R5   SIZE,AUTO
          1 0001A5  5981 FF8B                            BNEZ,R5  s:13760,PREL

      359    13782
      360    13783    3              END/*do if size ~ zero*/;

      361    13784
      362    13785        /*E* ERROR: GMM-E$ALLGONE-E
      363    13786             MESSAGE: Non I/O memory is too fragmented to satisfy your request.
      364    13787        */
      365    13788
      366    13789
      367    13790        /* Setup RESULTS if the user asked for it.  RESULTS reflects the
      368    13791           total current allocation, not just the extension.
      369    13792        */
      370    13793
      371    13794    2   SETR: IF R$ ~= ADDR(NIL)

  13794   1 0001A7  8DC7 001A            SETR            CMN      R$,AUTO
          1 0001A9  0901 0020                            BE       s:13804,PREL

      372    13795    3         THEN DO;

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:57   
      373    13796    3              IF SEGX < %GM_ISR1#

  13796   1 0001AB  E847 001D                            LDR,R6   SEGX,AUTO
          1 0001AD  6D10                                 CMV,R6   16
          1 0001AE  0281 0009                            BGE      s:13798,PREL

      374    13797    3              THEN RESULTS.BASE=SEGX * 4096;

  13797   1 0001B0  F856                                 LDR,R7   R6
          1 0001B1  6C00                                 LDV,R6   0
          1 0001B2  708C                                 DOL,R7   12
          1 0001B3  ECC7 001A                            LDB,B6   R$,AUTO
          1 0001B5  8D06                                 SDI      ,B6
          1 0001B6  0F81 000A                            B        s:13800,PREL

      375    13798    3              ELSE RESULTS.BASE=(SEGX-15) * 65536;

  13798   1 0001B8  F856                                 LDR,R7   R6
          1 0001B9  6C00                                 LDV,R6   0
          1 0001BA  7090                                 DOL,R7   16
          1 0001BB  8470 FFF1 0000                       AID      -983040,IMO
          1 0001BE  ECC7 001A                            LDB,B6   R$,AUTO
          1 0001C0  8D06                                 SDI      ,B6

      376    13799
      377    13800    3              CALL GET_EXT_SIZE;

  13800   1 0001C1  E3C0 04E0                            LNJ,B6   s:0,PREL
          1 0001C3       0001                            DC       s:13801,PREL

      378    13801    3              RESULTS.PAGES = CURR_EXT_SZ;

  13801   1 0001C4  ECC7 001A                            LDB,B6   R$,AUTO
          1 0001C6  E847 0020                            LDR,R6   CURR_EXT_SZ,AUTO
          1 0001C8  EF46 0002                            STR,R6   2,B6

      379    13802    3              END;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:58   

      380    13803
      381    13804    2         IF MCL_CODE = %G_MCL_GAUTO# OR MCL_CODE = %G_MCL_FAUTO#

  13804   1 0001CA  E847 000C                            LDR,R6   MCL_CODE,AUTO
          1 0001CC  E970 0104                            CMR,R6   260,IMO
          1 0001CE  0901 0005                            BE       s:13806,PREL
          1 0001D0  E970 0105                            CMR,R6   261,IMO
          1 0001D2  0981 02B3                            BNE      s:14055,PREL

      382    13805    3         THEN DO;

      383    13806    3              CALL GET_EXT_SIZE;

  13806   1 0001D4  E3C0 04CD                            LNJ,B6   s:0,PREL
          1 0001D6       0001                            DC       s:13807,PREL

      384    13807    3              G$ROS.AUTO_T$ = PINCRW (G$ROS.AUTO_DS$, CURR_EXT_SZ*256 - 6);

  13807   1 0001D7  EC80 0000 0000  xsym                 LDB,B6   G$ROS$
          1 0001DA  DCC6 0016                            LDB,B5   22,B6
          1 0001DC  DFC7 002C                            STB,B5   SIZE+6,AUTO
          1 0001DE  F847 0020                            LDR,R7   CURR_EXT_SZ,AUTO
          1 0001E0  6C00                                 LDV,R6   0
          1 0001E1  7088                                 DOL,R7   8
          1 0001E2  8447 002C                            AID      SIZE+6,AUTO
          1 0001E4  8470 FFFF FFFA                       AID      -6,IMO
          1 0001E7  8D46 0018                            SDI      24,B6

      385    13808    3              END;

  13808   1 0001E9  0F81 029C                            B        s:14055,PREL

      386    13809
      387    13810        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:59   
      388    13811
      389    13812    2       CASE (%G_MCL_FDS#,%G_MCL_FAUTO#);

      390    13813
      391    13814        /*  Call GETSEGX to get info about the current allocation.
      392    13815        */
      393    13816    2         SIZE=FPT_FDS.PAGES;

  13816   1 0001EB  D802                                 LDR,R5   ,B2
          1 0001EC  DF47 0026                            STR,R5   SIZE,AUTO

      394    13817    2         CALL GETSEGX ALTRET(RTRN);

  13817   1 0001EE  E3C0 02E0                            LNJ,B6   s:0,PREL
          1 0001F0       0296                            DC       s:14055,PREL

      395    13818
      396    13819        /* If requested size is zero this is simply a status request.
      397    13820        */
      398    13821    2         IF SIZE ~= 0

  13821   1 0001F1  E847 0026                            LDR,R6   SIZE,AUTO
          1 0001F3  6901 00AE                            BEZ,R6   s:13893,PREL

      399    13822    3         THEN DO;

      400    13823
      401    13824        /*  Check if the segment was empty, or shared, or CVMed.
      402    13825            If so, set the error code and return.
      403    13826        */
      404    13827    3              IF NOT G$SEGDESC.V

  13827   1 0001F5  89C7 000A                            CMZ      G$SEGDESC,AUTO
          1 0001F7  0801 000B                            BAL      s:13839,PREL

      405    13828    4              THEN DO;

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:60   
      406    13829    4                   PARM.ERR=HANDSOFF;

  13829   1 0001F9  8C80 0000 0049  00                   LDI      HANDSOFF
          1 0001FC  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 0001FE  8D46 0003                            SDI      3,B6

      407    13830    4                   RETURN;

  13830   1 000200  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      408    13831    4                   END;
      409    13832        /*E* ERROR: GMM-E$HANDSOFF-E
      410    13833             MESSAGE: The memory you are requesting be released is not allocated.
      411    13834        */
      412    13835
      413    13836        /*  Check if he requested to free more pages than there are.  If so,
      414    13837            just free all there are and return an error.
      415    13838        */
      416    13839    3              IF CURR_EXT_SZ  < SIZE

  13839   1 000203  E947 0020                            CMR,R6   CURR_EXT_SZ,AUTO
          1 000205  0381 000E                            BLE      s:13851,PREL

      417    13840    4              THEN DO;

      418    13841    4                   PARM.ERR = BIGFREE;

  13841   1 000207  8C80 0000 0051  00                   LDI      BIGFREE
          1 00020A  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 00020C  8D46 0003                            SDI      3,B6

      419    13842    4                   SIZE = CURR_EXT_SZ;

  13842   1 00020E  D847 0020                            LDR,R5   CURR_EXT_SZ,AUTO
          1 000210  DF47 0026                            STR,R5   SIZE,AUTO

      420    13843    4                   IF SIZE = 0 THEN GOTO SETR;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:61   

  13843   1 000212  5901 FF94                            BEZ,R5   s:13783,PREL

      421    13844    4                   END;

      422    13845        /*E* ERROR: GMM-E$BIGFREE-0
      423    13846          MESSAGE: Attempt to free more space than currently allocated in specified extent.
      424    13847        */
      425    13848
      426    13849        /*  Remove the pages from the account recource table.
      427    13850        */
      428    13851    3              CALL GMA$REL_ACCTMEM(SIZE);

  13851   1 000214  EBC7 0026                            LAB,B6   SIZE,AUTO
          1 000216  EFC7 002C                            STB,B6   SIZE+6,AUTO
          1 000218  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 00021A  CBF0 0100                            LAB,B4   256,IMO
          1 00021C  E380 0000 0000  xent                 LNJ,B6   GMA$REL_ACCTMEM
          1 00021F       0001                            DC       s:13853,PREL

      429    13852
      430    13853    3              IF G$SEGDESC.BASE > GM_SHUF_HI

  13853   1 000220  E847 000A                            LDR,R6   G$SEGDESC,AUTO
          1 000222  E570 7FFF                            AND,R6   32767,IMO
          1 000224  E900 0000 0000  xsym                 CMR,R6   GM_SHUF_HI
          1 000227  0381 000C                            BLE      s:13855,PREL

      431    13854    3              THEN G$JIT.NSPC = G$JIT.NSPC - SIZE;

  13854   1 000229  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 00022C  D846 0087                            LDR,R5   135,B6
          1 00022E  D247 0026                            SUB,R5   SIZE,AUTO
          1 000230  DF46 0087                            STR,R5   135,B6
          1 000232  0F81 000A                            B        s:13860,PREL

      432    13855    3              ELSE G$JIT.PCDS = G$JIT.PCDS - SIZE;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:62   

  13855   1 000234  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 000237  D846 0083                            LDR,R5   131,B6
          1 000239  D247 0026                            SUB,R5   SIZE,AUTO
          1 00023B  DF46 0083                            STR,R5   131,B6

      433    13856
      434    13857
      435    13858        /* Find the index to the last segment with pages to be released.
      436    13859        */
      437    13860    3              IF CURR_EXT_SZ <= MAX_SEG_SZ

  13860   1 00023D  D847 0020                            LDR,R5   CURR_EXT_SZ,AUTO
          1 00023F  D947 0023                            CMR,R5   MAX_SEG_SZ,AUTO
          1 000241  0301 000B                            BG       s:13866,PREL

      438    13861    4              THEN DO;

      439    13862    4                   THIS_SIZE = SIZE;

  13862   1 000243  C847 0026                            LDR,R4   SIZE,AUTO
          1 000245  CF47 0022                            STR,R4   THIS_SIZE,AUTO

      440    13863    4                   SEGI = SEGX;

  13863   1 000247  B847 001D                            LDR,R3   SEGX,AUTO
          1 000249  BF47 001C                            STR,R3   SEGI,AUTO

      441    13864    4                   END;

  13864   1 00024B  0F81 0018                            B        s:13876,PREL

      442    13865    4              ELSE DO;

      443    13866    4                   SEGI = CURR_EXT_SZ / MAX_SEG_SZ; /* # of fully allocated segs */

  13866   1 00024D  F855                                 LDR,R7   R5
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:63   
          1 00024E  6C00                                 LDV,R6   0
          1 00024F  F347 0023                            DIV,R7   MAX_SEG_SZ,AUTO
          1 000251  E857                                 LDR,R6   R7
          1 000252  EF47 001C                            STR,R6   SEGI,AUTO

      444    13867    4                   THIS_SIZE = CURR_EXT_SZ - (MAX_SEG_SZ * SEGI);

  13867   1 000254  F856                                 LDR,R7   R6
          1 000255  FB47 0023                            MUL,R7   MAX_SEG_SZ,AUTO
          1 000257  E857                                 LDR,R6   R7
          1 000258  E255                                 SUB,R6   R5
          1 000259  8256                                 NEG      R6
          1 00025A  EF47 0022                            STR,R6   THIS_SIZE,AUTO

      445    13868    4                   SEGI = SEGX + SEGI;

  13868   1 00025C  C847 001D                            LDR,R4   SEGX,AUTO
          1 00025E  CA47 001C                            ADD,R4   SEGI,AUTO
          1 000260  CF47 001C                            STR,R4   SEGI,AUTO

      446    13869
      447    13870    4                   IF THIS_SIZE = 0

  13870   1 000262  6901 0036                            BEZ,R6   s:13887,PREL

      448    13871    4                   THEN GOTO SEG_FULL2;
      449    13872    4                   END;

      450    13873
      451    13874        /* Free the requested pages.
      452    13875        */
      453    13876    4              DO WHILE(SIZE > 0);

  13876   1 000264  E847 0026                            LDR,R6   SIZE,AUTO
          1 000266  6901 003B                            BEZ,R6   s:13893,PREL

      454    13877    4                   IF THIS_SIZE > SIZE
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:64   

  13877   1 000268  E847 0022                            LDR,R6   THIS_SIZE,AUTO
          1 00026A  E947 0026                            CMR,R6   SIZE,AUTO
          1 00026C  0381 0005                            BLE      s:13880,PREL

      455    13878    4                   THEN THIS_SIZE = SIZE;

  13878   1 00026E  E847 0026                            LDR,R6   SIZE,AUTO
          1 000270  EF47 0022                            STR,R6   THIS_SIZE,AUTO

      456    13879
      457    13880    4                   CALL GMA$REL (SEGI,THIS_SIZE);

  13880   1 000272  EBC7 0022                            LAB,B6   THIS_SIZE,AUTO
          1 000274  EFC7 002E                            STB,B6   SIZE+8,AUTO
          1 000276  DBC7 001C                            LAB,B5   SEGI,AUTO
          1 000278  DFC7 002C                            STB,B5   SIZE+6,AUTO
          1 00027A  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 00027C  CBF0 0200                            LAB,B4   512,IMO
          1 00027E  E380 0000 0000  xent                 LNJ,B6   GMA$REL
          1 000281       0001                            DC       s:13882,PREL

      458    13881
      459    13882    4                   IF NOT G$ASDT_USR$->G$SEGDESCA.V(SEGI)

  13882   1 000282  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 000285  B847 001C                            LDR,R3   SEGI,AUTO
          1 000287  3001                                 SOL,R3   1
          1 000288  89B6                                 CMZ      ,B6,R3
          1 000289  0801 0009                            BAL      s:13885,PREL

      460    13883    4                   THEN G$JIT.FIRST_SEG(SEGI) = '0'B;

  13883   1 00028B  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          1 00028E  CBC5 0064                            LAB,B4   100,B5
          1 000290  A847 001C                            LDR,R2   SEGI,AUTO
          1 000292  8824                                 LBF      ,B4,R2
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:65   

      461    13884
      462    13885    4                   SIZE = SIZE - THIS_SIZE;

  13885   1 000293  E847 0026                            LDR,R6   SIZE,AUTO
          1 000295  E247 0022                            SUB,R6   THIS_SIZE,AUTO
          1 000297  EF47 0026                            STR,R6   SIZE,AUTO

      463    13886    4   SEG_FULL2:
      464    13887    4                   SEGI = SEGI -1;

  13887   1 000299  88C7 001C            SEG_FULL2       DEC      SEGI,AUTO

      465    13888    4                   THIS_SIZE = MAX_SEG_SZ;

  13888   1 00029B  E847 0023                            LDR,R6   MAX_SEG_SZ,AUTO
          1 00029D  EF47 0022                            STR,R6   THIS_SIZE,AUTO

      466    13889    4                   END;

  13889   1 00029F  D847 0026                            LDR,R5   SIZE,AUTO
          1 0002A1  59C7                                 BNEZ,R5  s:13877,SPREL

      467    13890
      468    13891    3              END;

      469    13892
      470    13893    2         GOTO SETR;                        /* setup results                      */

  13893   1 0002A2  0F81 FF04                            B        s:13783,PREL

      471    13894        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:66   
      472    13895    2       CASE(%G_MCL_GDDL#);

      473    13896    2         VLR_GDDL='0'B;

  13896   1 0002A4  5C10                                 LDV,R5   16
          1 0002A5  0021                                 ALR      ;
          1 0002A6       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 0002A8       4002 0000                                ALPHANUM(0,B2,,R5,FILL)

      474    13897
      475    13898    3         DO I = 0 TO %SEG#;

  13898   1 0002AA  437F                                 CSYNC    s:13896+5,SPREL
          1 0002AB  8747 000E                            CL       I,AUTO

      476    13899    3              IF NOT G$ASDT_USR$->G$SEGDESCA.V(ASDTX(I))

  13899   1 0002AD  B847 000E                            LDR,R3   I,AUTO
          1 0002AF  A830 0000 0013  00                   LDR,R2   ASDTX,R3
          1 0002B2  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 0002B5  2001                                 SOL,R2   1
          1 0002B6  89A6                                 CMZ      ,B6,R2
          1 0002B7  0801 0020                            BAL      s:13913,PREL

      477    13900    4              THEN DO;

      478    13901    4                   IF I < 2

  13901   1 0002B9  3D02                                 CMV,R3   2
          1 0002BA  0281 0010                            BGE      s:13908,PREL

      479    13902    5                   THEN DO;

      480    13903    5                        VLR_GDDL.NUM_LITTLE=VLR_GDDL.NUM_LITTLE + 1;

  13903   1 0002BC  DCC7 0018                            LDB,B5   V$,AUTO
          1 0002BE  8AC5 0004                            INC      4,B5
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:67   

      481    13904    5                        IF VLR_GDDL.NEXT_LITTLE = 0

  13904   1 0002C0  E845 0002                            LDR,R6   2,B5
          1 0002C2  6981 0015                            BNEZ,R6  s:13913,PREL

      482    13905    5                        THEN VLR_GDDL.NEXT_LITTLE = ASDTX(I);

  13905   1 0002C4  E830 0000 0013  00                   LDR,R6   ASDTX,R3
          1 0002C7  EF45 0002                            STR,R6   2,B5

      483    13906    5                        END;

  13906   1 0002C9  0F81 000E                            B        s:13913,PREL

      484    13907    5                   ELSE DO;

      485    13908    5                        VLR_GDDL.NUM_BIG=VLR_GDDL.NUM_BIG + 1;

  13908   1 0002CB  DCC7 0018                            LDB,B5   V$,AUTO
          1 0002CD  8AC5 0005                            INC      5,B5

      486    13909    5                        IF VLR_GDDL.NEXT_BIG = 0

  13909   1 0002CF  E845 0003                            LDR,R6   3,B5
          1 0002D1  6981 0006                            BNEZ,R6  s:13913,PREL

      487    13910    5                        THEN VLR_GDDL.NEXT_BIG = ASDTX(I);

  13910   1 0002D3  E830 0000 0013  00                   LDR,R6   ASDTX,R3
          1 0002D6  EF45 0003                            STR,R6   3,B5

      488    13911    5                        END;

      489    13912    4                   END/*if not segdesc.v*/;

      490    13913    3              END;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:68   

  13913   1 0002D8  8AC7 000E                            INC      I,AUTO
          1 0002DA  E847 000E                            LDR,R6   I,AUTO
          1 0002DC  6D0F                                 CMV,R6   15
          1 0002DD  03D0                                 BLE      s:13899,SPREL

      491    13914
      492    13915    2         CHKSZ = '0'B;

  13915   1 0002DE  5C08                                 LDV,R5   8
          1 0002DF  0021                                 ALR      ;
          1 0002E0       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 0002E2       4007 0006                                ALPHANUM(CHKSZ,AUTO,,R5,FILL)

      493    13916    2         CHKSZ.FLGS.CHK_ONLY='1'B;

  13916   1 0002E4  437F                                 CSYNC    s:13915+5,SPREL
          1 0002E5  8947 0009                            LBT,'8000'X       CHKSZ+3,AUTO
          1 0002E7       8000

      494    13917    2         CHKSZ.SIZE=G$JIT.MAXMEM;

  13917   1 0002E8  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          1 0002EB  E845 0089                            LDR,R6   137,B5
          1 0002ED  EF47 0006                            STR,R6   CHKSZ,AUTO

      495    13918    2         CALL GMA$CHKSIZE (CHKSZ);

  13918   1 0002EF  CBC7 0006                            LAB,B4   CHKSZ,AUTO
          1 0002F1  CFC7 002C                            STB,B4   SIZE+6,AUTO
          1 0002F3  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 0002F5  CBF0 0100                            LAB,B4   256,IMO
          1 0002F7  E380 0000 0000  xent                 LNJ,B6   GMA$CHKSIZE
          1 0002FA       0001                            DC       s:13919,PREL

      496    13919    2         VLR_GDDL.REMAINING = CHKSZ.SIZE;

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:69   
  13919   1 0002FB  ECC7 0018                            LDB,B6   V$,AUTO
          1 0002FD  E847 0006                            LDR,R6   CHKSZ,AUTO
          1 0002FF  EF46 0001                            STR,R6   1,B6

      497    13920    2         VLR_GDDL.AUTHORIZED=G$JIT.MAXMEM;

  13920   1 000301  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          1 000304  D845 0089                            LDR,R5   137,B5
          1 000306  DF06                                 STR,R5   ,B6

      498    13921    2         PARM.ERR='0'B;

  13921   1 000307  CCC7 0004                            LDB,B4   @PARM,AUTO
          1 000309  8744 0003                            CL       3,B4
          1 00030B  8744 0004                            CL       4,B4
          1 00030D  0F81 0178                            B        s:14055,PREL

      499    13922        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:70   
      500    13923
      501    13924    2       CASE(%G_MCL_PDS#);

      502    13925
      503    13926    2         IF R$ = ADDR(NIL)

  13926   1 00030F  8DC7 001A                            CMN      R$,AUTO
          1 000311  0901 0006                            BE       s:13930,PREL

      504    13927    2         THEN GOTO PDSERR;
      505    13928
      506    13929    2         IF RESULTS.BASE$ = ADDR(NIL)

  13929   1 000313  ECC7 001A                            LDB,B6   R$,AUTO
          1 000315  8D86                                 CMN      ,B6
          1 000316  0981 0008                            BNE      s:13935,PREL

      507    13930    3         THEN DO;

      508    13931    3   PDSERR:    PARM.ERR=BADVECT1;

  13931   1 000318  8C80 0000 004D  00   PDSERR          LDI      BADVECT1
          1 00031B  8D44 0003                            SDI      3,B4

      509    13932    3              END;

  13932   1 00031D  0F81 0168                            B        s:14055,PREL

      510    13933
      511    13934    3         ELSE DO;

      512    13935    3              CALL GETSEGX ALTRET(RTRN);

  13935   1 00031F  E3C0 01AF                            LNJ,B6   s:0,PREL
          1 000321       0165                            DC       s:14055,PREL

      513    13936    3              I=BITBIN(FPT_PDS.READ);
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:71   

  13936   1 000322  ECC7 0018                            LDB,B6   V$,AUTO
          1 000324  E806                                 LDR,R6   ,B6
          1 000325  604F                                 SOR,R6   15
          1 000326  EF47 000E                            STR,R6   I,AUTO

      514    13937    3              LO=BITBIN(FPT_PDS.WRITE);

  13937   1 000328  D806                                 LDR,R5   ,B6
          1 000329  504E                                 SOR,R5   14
          1 00032A  D570 0001                            AND,R5   1,IMO
          1 00032C  DF47 000F                            STR,R5   LO,AUTO

      515    13938    3              CALL GMA$PROT (SEGX,PROT(I),PROT(LO));

  13938   1 00032E  B855                                 LDR,R3   R5
          1 00032F  DBB0 0000 0033  00                   LAB,B5   PROT,R3
          1 000332  DFC7 0030                            STB,B5   SIZE+10,AUTO
          1 000334  A856                                 LDR,R2   R6
          1 000335  CBA0 0000 0033  00                   LAB,B4   PROT,R2
          1 000338  CFC7 002E                            STB,B4   SIZE+8,AUTO
          1 00033A  BBC7 001D                            LAB,B3   SEGX,AUTO
          1 00033C  BFC7 002C                            STB,B3   SIZE+6,AUTO
          1 00033E  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 000340  CBF0 0300                            LAB,B4   768,IMO
          1 000342  E380 0000 0000  xent                 LNJ,B6   GMA$PROT
          1 000345       0001                            DC       s:13939,PREL

      516    13939    3              END;

  13939   1 000346  0F81 013F                            B        s:14055,PREL

      517    13940        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:72   
      518    13941
      519    13942    2       CASE(%G_MCL_CVM#);

      520    13943    2         IF NOT G$JIT.PRIV.ACTIVE.SPCLMM

  13943   1 000348  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 00034B  82C6 008F                            LB,'0001'X        143,B6
          1 00034D       0001
          1 00034E  0501 000E                            BBT      s:13954,PREL
          1 000350  82C6 008F                            LB,'0002'X        143,B6
          1 000352       0002
          1 000353  0501 0009                            BBT      s:13954,PREL

      521    13944    2           AND NOT G$JIT.PRIV.ACTIVE.EXMM
      522    13945    3         THEN DO;

      523    13946    3              PARM.ERR=MMPRIV;

  13946   1 000355  8C80 0000 0041  00                   LDI      MMPRIV
          1 000358  8D44 0003                            SDI      3,B4

      524    13947    3              RETURN;

  13947   1 00035A  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      525    13948    3              END;
      526    13949        /*E*  ERROR: GMM-E$MMPRIV-E
      527    13950              MESSAGE0: M$CVM users must have EXMM or SPCLMM privilege on.
      528    13951              MESSAGE1: EXMM privilege gives write access, SPCLMM allows read
      529    13952                        access only.
      530    13953        */
      531    13954    2         IF FPT_CVM.TYPE > 2

  13954   1 00035D  D2C2 0001                            LLH,R5   1,B2
          1 00035F  5D02                                 CMV,R5   2
          1 000360  0381 0009                            BLE      s:13960,PREL

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:73   
      532    13955    3         THEN DO;

      533    13956    3              PARM.ERR=BADVECT0;

  13956   1 000362  8C80 0000 004B  00                   LDI      BADVECT0
          1 000365  8D44 0003                            SDI      3,B4

      534    13957    3              RETURN;

  13957   1 000367  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      535    13958    3              END;
      536    13959
      537    13960    2         L$ = PARM.PTRS.PAR3$;

  13960   1 00036A  ECC4 000A                            LDB,B6   10,B4
          1 00036C  EFC7 0011                            STB,B6   L$,AUTO

      538    13961    2         NEXT=FPT_CVM.NEXT;

  13961   1 00036E  C2C2 0002                            LLH,R4   2,B2
          1 000370  CF47 0010                            STR,R4   NEXT,AUTO

      539    13962    2         SIZE=FPT_CVM.PAGES;

  13962   1 000372  9802                                 LDR,R1   ,B2
          1 000373  9F47 0026                            STR,R1   SIZE,AUTO

      540    13963
      541    13964    2         IF SIZE > 256

  13964   1 000375  9970 0100                            CMR,R1   256,IMO
          1 000377  0381 0009                            BLE      s:13973,PREL

      542    13965    3         THEN DO;

      543    13966    3              PARM.ERR=SEGSIZE;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:74   

  13966   1 000379  8C80 0000 0037  00                   LDI      SEGSIZE
          1 00037C  8D44 0003                            SDI      3,B4

      544    13967    3              RETURN;

  13967   1 00037E  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      545    13968    3              END;
      546    13969        /*E* ERROR: GMM-E$SEGSIZE-E
      547    13970             MESSAGE: Illegal size specification.
      548    13971        */
      549    13972
      550    13973    2         IF SIZE ~= 0

  13973   1 000381  1901 00F5                            BEZ,R1   s:14049,PREL

      551    13974    3         THEN DO;

      552    13975    3              CALL GETSEGX ALTRET(RTRN);

  13975   1 000383  E3C0 014B                            LNJ,B6   s:0,PREL
          1 000385       0101                            DC       s:14055,PREL

      553    13976    3              CALL UNCVM

  13976   1 000386  E3C0 0102                            LNJ,B6   s:0,PREL
          1 000388       0003                            DC       s:13978,PREL
          1 000389  0F81 0014                            B        s:13989,PREL

      554    13977    4              WHENALTRETURN DO;

      555    13978    4                   IF G$ASDT_USR$->G$SEGDESCA.V(SEGX)

  13978   1 00038B  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 00038E  B847 001D                            LDR,R3   SEGX,AUTO
          1 000390  3001                                 SOL,R3   1
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:75   
          1 000391  89B6                                 CMZ      ,B6,R3
          1 000392  0881 000B                            BAGE     s:13989,PREL

      556    13979    5                   THEN DO;

      557    13980    5                        PARM.ERR = PGINUSE;

  13980   1 000394  8C80 0000 0057  00                   LDI      PGINUSE
          1 000397  DCC7 0004                            LDB,B5   @PARM,AUTO
          1 000399  8D45 0003                            SDI      3,B5

      558    13981    5                        RETURN;

  13981   1 00039B  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      559    13982    5                        END;
      560    13983    4                   END/*uncvm altreturn*/;
      561    13984        /*E* ERROR: GMM-E$PGINUSE-E
      562    13985             MESSAGE: You cannot CVM over a previously allocated segment.
      563    13986        */
      564    13987
      565    13988
      566    13989    3              IF FPT_CVM.TYPE = %G_CVM_PHYSICAL#

  13989   1 00039E  ECC7 0018                            LDB,B6   V$,AUTO
          1 0003A0  E2C6 0001                            LLH,R6   1,B6
          1 0003A2  6D02                                 CMV,R6   2
          1 0003A3  0981 0018                            BNE      s:14006,PREL

      567    13990    4              THEN DO;

      568    13991    4                   IF FROMSEG.PAGES > GM_MEM_HI

  13991   1 0003A5  DCC7 0011                            LDB,B5   L$,AUTO
          1 0003A7  D845 0002                            LDR,R5   2,B5
          1 0003A9  D900 0000 0000  xsym                 CMR,R5   GM_MEM_HI
          1 0003AC  0381 000B                            BLE      s:14001,PREL
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:76   

      569    13992    5                   THEN DO;

      570    13993    5   BADPHYS:             PARM.ERR=BADPP;

  13993   1 0003AE  8C80 0000 0043  00   BADPHYS         LDI      BADPP
          1 0003B1  CCC7 0004                            LDB,B4   @PARM,AUTO
          1 0003B3  8D44 0003                            SDI      3,B4

      571    13994    5                        RETURN;

  13994   1 0003B5  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      572    13995    5                        END;
      573    13996        /*E* ERROR: GMM-E$BADPP-E
      574    13997             MESSAGE: That physical page does not exist.
      575    13998        */
      576    13999
      577    14000    5                   ELSE DO;

      578    14001    5                        BASE=FROMSEG.PAGES;

  14001   1 0003B8  DF47 0013                            STR,R5   BASE,AUTO

      579    14002    5                        END;

      580    14003    4                   END/*do if physical*/;

  14003   1 0003BA  0F81 009E                            B        s:14041,PREL

      581    14004
      582    14005    4              ELSE DO;

      583    14006    4                   IF FROMSEG.BASE$ = ADDR(NIL) THEN GOTO SET_BADSEGID;

  14006   1 0003BC  DCC7 0011                            LDB,B5   L$,AUTO
          1 0003BE  8D85                                 CMN      ,B5
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:77   
          1 0003BF  0901 000E                            BE       s:14009,PREL

      584    14007    4                   IF (L$->B$CHECK_BASE.WORD1 & CHECK_BASE.WORD1)

  14007   1 0003C1  D805                                 LDR,R5   ,B5
          1 0003C2  D500 0000 0035  00                   AND,R5   CHECK_BASE
          1 0003C5  5981 0008                            BNEZ,R5  s:14009,PREL
          1 0003C7  D845 0001                            LDR,R5   1,B5
          1 0003C9  D500 0000 0036  00                   AND,R5   CHECK_BASE+1
          1 0003CC  5901 000B                            BEZ,R5   s:14015,PREL

      585    14008    4                     OR (L$->B$CHECK_BASE.WORD2 & CHECK_BASE.WORD2)
      586    14009    5                   THEN DO;

  14001   1                              SET_BADSEGID    null
      587    14010    5   SET_BADSEGID:        ;
      588    14011    5                        PARM.ERR = BADSEGID;

  14011   1 0003CE  8C80 0000 0039  00   SET_BADSEGID    LDI      BADSEGID
          1 0003D1  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 0003D3  8D46 0003                            SDI      3,B6

      589    14012    5                        RETURN;

  14012   1 0003D5  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      590    14013    5                        END;
      591    14014
      592    14015    4                   IF FROMSEG.BASE < %GM_SEG0100_BASE

  14015   1 0003D8  8C85                                 LDI      ,B5
          1 0003D9  84F0 0001 0000                       SID      65536,IMO
          1 0003DC  0601 0008                            BCT      s:14017,PREL

      593    14016    4                   THEN FROMX = FROMSEG.BASE / 4096;

  14016   1 0003DE  8C85                                 LDI      ,B5
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:78   
          1 0003DF  70CC                                 DOR,R7   12
          1 0003E0  E857                                 LDR,R6   R7
          1 0003E1  EF47 0014                            STR,R6   FROMX,AUTO
          1 0003E3  0F81 0009                            B        s:14019,PREL

      594    14017    4                   ELSE FROMX = (FROMSEG.BASE / 65536) +15;

  14017   1 0003E5  8C85                                 LDI      ,B5
          1 0003E6  70D0                                 DOR,R7   16
          1 0003E7  8470 0000 000F                       AID      15,IMO
          1 0003EA  E857                                 LDR,R6   R7
          1 0003EB  EF47 0014                            STR,R6   FROMX,AUTO

      595    14018
      596    14019    4                   IF FPT_CVM.TYPE = %G_CVM_MON#

  14019   1 0003ED  D2C6 0001                            LLH,R5   1,B6
          1 0003EF  5981 0008                            BNEZ,R5  s:14024,PREL

      597    14020    5                   THEN DO;

      598    14021    5                        CU$=ADDR(G$MHJIT.ASDT_MON);

  14021   1 0003F1  CC80 0000 0000  xsym                 LDB,B4   G$MHJIT$
          1 0003F4  CFC7 0015                            STB,B4   CU$,AUTO

      599    14022    5                        END;

  14022   1 0003F6  0F81 004A                            B        s:14036,PREL

      600    14023    5                   ELSE DO;

      601    14024    5                        IF (FPT_CVM.USERID > G_MUAIS) OR (FPT_CVM.USERID = 0)

  14024   1 0003F8  C846 0001                            LDR,R4   1,B6
          1 0003FA  C570 00FF                            AND,R4   255,IMO
          1 0003FC  C900 0000 0000                       CMR,R4   0
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:79   
          1 0003FF  0301 0010                            BG       s:14027,PREL
          1 000401  82C6 0001                            LB,'00FF'X        1,B6
          1 000403       00FF
          1 000404  0581 000B                            BBF      s:14027,PREL
          1 000406  B854                                 LDR,R3   R4
          1 000407  CC80 0000 0000  xsym                 LDB,B4   G$USRT$
          1 00040A  3F18                                 MLV,R3   24
          1 00040B  3E02                                 ADV,R3   2
          1 00040C  A834                                 LDR,R2   ,B4,R3
          1 00040D  2D1F                                 CMV,R2   31
          1 00040E  0981 000B                            BNE      s:14030,PREL

      602    14025    5                          OR (G$USER.US(FPT_CVM.USERID) = %GH_NULL)
      603    14026    6                        THEN DO;

      604    14027    6                             PARM.ERR = BADVECT0;

  14027   1 000410  8C80 0000 004B  00                   LDI      BADVECT0
          1 000413  CCC7 0004                            LDB,B4   @PARM,AUTO
          1 000415  8D44 0003                            SDI      3,B4

      605    14028    6                             RETURN;

  14028   1 000417  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      606    14029    6                             END;
      607    14030    5                        CU$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_USR);

  14030   1 00041A  BC80 0000 0000  xsym                 LDB,B3   G$WINDOW1$
          1 00041D  BFC7 0015                            STB,B3   CU$,AUTO

      608    14031    5                        G$UHJIT.ASDT_MCL.WINDOW1=G$UHJIT.ASDT_MCL.UHJIT;

  14031   1 00041F  AC80 0000 0000  xsym                 LDB,B2   G$UHJIT$
          1 000422  8CC2 0048                            LDI      72,B2
          1 000424  8D42 006E                            SDI      110,B2

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:80   
      609    14032    5                        G$UHJIT.ASDT_MCL.WINDOW1.BASE=G$USER.UHJITPP(FPT_CVM.USERID);

  14032   1 000426  B846 0001                            LDR,R3   1,B6
          1 000428  B570 00FF                            AND,R3   255,IMO
          1 00042A  3F18                                 MLV,R3   24
          1 00042B  3E12                                 ADV,R3   18
          1 00042C  D834                                 LDR,R5   ,B4,R3
          1 00042D  DAC2 006E                            SRM,R5,'7FFF'X    110,B2
          1 00042F       7FFF

      610    14033    5                        CALL GHH$ASD (G$WINDOW1$,G$UHJIT.ASDT_MCL.WINDOW1);

  14033   1 000430  9BC2 006E                            LAB,B1   110,B2
          1 000432  9FC7 002E                            STB,B1   SIZE+8,AUTO
          1 000434  EB80 0000 0000  xsym                 LAB,B6   G$WINDOW1$
          1 000437  EFC7 002C                            STB,B6   SIZE+6,AUTO
          1 000439  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 00043B  CBF0 0200                            LAB,B4   512,IMO
          1 00043D  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 000440       0001                            DC       s:14036,PREL

      611    14034    5                        END;

      612    14035
      613    14036    4                   IF SIZE > CU$->G$SEGDESCA.SIZE(FROMX)+1

  14036   1 000441  ECC7 0015                            LDB,B6   CU$,AUTO
          1 000443  B847 0014                            LDR,R3   FROMX,AUTO
          1 000445  3001                                 SOL,R3   1
          1 000446  3E01                                 ADV,R3   1
          1 000447  E836                                 LDR,R6   ,B6,R3
          1 000448  E570 01FF                            AND,R6   511,IMO
          1 00044A  6E01                                 ADV,R6   1
          1 00044B  E947 0026                            CMR,R6   SIZE,AUTO
          1 00044D  0281 0003                            BGE      s:14039,PREL

      614    14037    4                   THEN SIZE = CU$->G$SEGDESCA.SIZE(FROMX)+1;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:81   

  14037   1 00044F  EF47 0026                            STR,R6   SIZE,AUTO

      615    14038
      616    14039    4                   BASE=CU$->G$SEGDESCA.BASE(FROMX);

  14039   1 000451  A847 0014                            LDR,R2   FROMX,AUTO
          1 000453  2001                                 SOL,R2   1
          1 000454  E826                                 LDR,R6   ,B6,R2
          1 000455  E570 7FFF                            AND,R6   32767,IMO
          1 000457  EF47 0013                            STR,R6   BASE,AUTO

      617    14040    4                   END;

      618    14041    3              CALL GMA$CVM (SEGX,SIZE,BASE);

  14041   1 000459  EBC7 0013                            LAB,B6   BASE,AUTO
          1 00045B  EFC7 0030                            STB,B6   SIZE+10,AUTO
          1 00045D  DBC7 0026                            LAB,B5   SIZE,AUTO
          1 00045F  DFC7 002E                            STB,B5   SIZE+8,AUTO
          1 000461  CBC7 001D                            LAB,B4   SEGX,AUTO
          1 000463  CFC7 002C                            STB,B4   SIZE+6,AUTO
          1 000465  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 000467  CBF0 0300                            LAB,B4   768,IMO
          1 000469  E380 0000 0000  xent                 LNJ,B6   GMA$CVM
          1 00046C       0001                            DC       s:14042,PREL

      619    14042    3              G$JIT.FIRST_SEG(SEGX) = '1'B;

  14042   1 00046D  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 000470  DBC6 0064                            LAB,B5   100,B6
          1 000472  B847 001D                            LDR,R3   SEGX,AUTO
          1 000474  8935                                 LBT      ,B5,R3

      620    14043    3              GOTO SETR;

  14043   1 000475  0F81 FD31                            B        s:13783,PREL
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:82   

      621    14044    3              END;
      622    14045
      623    14046        /* Release a CVMed segment.
      624    14047        */
      625    14048    3         ELSE DO/*when size is 0*/;

      626    14049    3              IF R$ = ADDR(NIL) THEN GOTO SET_BADSEGID;

  14049   1 000477  8DC7 001A                            CMN      R$,AUTO
          1 000479  0901 FF54                            BE       s:14009,PREL

      627    14050    3              IF RESULTS.BASE$ = ADDR(NIL) THEN GOTO SET_BADSEGID;

  14050   1 00047B  ECC7 001A                            LDB,B6   R$,AUTO
          1 00047D  8D86                                 CMN      ,B6
          1 00047E  0901 FF4F                            BE       s:14009,PREL

      628    14051
      629    14052    3              CALL GETSEGX ALTRET(RTRN);

  14052   1 000480  E3C0 004E                            LNJ,B6   s:0,PREL
          1 000482       0004                            DC       s:14055,PREL

      630    14053    3              CALL UNCVM ALTRET(SET_BADSEGID);

  14053   1 000483  E3C0 0005                            LNJ,B6   s:0,PREL
          1 000485       FF49                            DC       s:14009,PREL

      631    14054    3              END;

      632    14055    2         END;                              /*END CASE*/

      633    14056    1   RTRN: RETURN;

  14056   1 000486  C380 0000 0000  xent RTRN            LNJ,B4   X6A_ARET

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:83   
      634    14057
      635    14058        /*E* ERROR: GMM-E$BADVECT0-E
      636    14059             MESSAGE: Invalid value supplied in your FPT.
      637    14060             MESSAGE1: Bad TYPE or USERID on M$CVM or bad NEXT on M$GDS.
      638    14061             MESSAGE7: Invalid value supplied in your FPT.
      639    14062        */
      640    14063        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:84   
      641    14064        /*I* NAME: UNCVM
      642    14065             CALL: CALL UNCVM ALTRET(label);
      643    14066             INPUT: SEGX - segment to be unCVMed.
      644    14067        */
      645    14068
      646    14069    1   UNCVM: PROC ALTRET;

  14069   1 000489  EFC7 0028            UNCVM           STB,B6   SIZE+2,AUTO

      647    14070
      648    14071    2      IF G$JIT.CVM_REAL(SEGX)

  14071   1 00048B  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          1 00048E  CBC5 00B6                            LAB,B4   182,B5
          1 000490  B847 001D                            LDR,R3   SEGX,AUTO
          1 000492  82B4                                 LB       ,B4,R3
          1 000493  0581 0015                            BBF      s:14077,PREL

      649    14072    3      THEN DO;

      650    14073    3           G$JIT.CVM_REAL(SEGX)='0'B;

  14073   1 000495  CBC5 00B6                            LAB,B4   182,B5
          1 000497  8834                                 LBF      ,B4,R3

      651    14074    3           G$ASDT_USR$->G$SEGDESCA(SEGX)='0'B;

  14074   1 000498  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 00049B  B847 001D                            LDR,R3   SEGX,AUTO
          1 00049D  3001                                 SOL,R3   1
          1 00049E  8736                                 CL       ,B6,R3
          1 00049F  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 0004A2  B847 001D                            LDR,R3   SEGX,AUTO
          1 0004A4  3001                                 SOL,R3   1
          1 0004A5  3E01                                 ADV,R3   1
          1 0004A6  8736                                 CL       ,B6,R3

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:85   
      652    14075    3           END;

  14075   1 0004A7  0F81 001B                            B        s:14081,PREL

      653    14076    3      ELSE DO;

      654    14077    3           IF G$UHJIT$->G$UHJIT.SHRD_SEG(SEGX) ~= 0

  14077   1 0004A9  CC80 0000 0000  xsym                 LDB,B4   G$UHJIT$
          1 0004AC  BBC4 0183                            LAB,B3   387,B4
          1 0004AE  E2B3                                 LLH,R6   ,B3,R3
          1 0004AF  6901 000F                            BEZ,R6   s:14079,PREL

      655    14078    3           THEN CALL GMA$UNSHARE (SEGX);

  14078   1 0004B1  BBC7 001D                            LAB,B3   SEGX,AUTO
          1 0004B3  BFC7 002C                            STB,B3   SIZE+6,AUTO
          1 0004B5  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 0004B7  CBF0 0100                            LAB,B4   256,IMO
          1 0004B9  E380 0000 0000  xent                 LNJ,B6   GMA$UNSHARE
          1 0004BC       0001                            DC       s:14078+12,PREL
          1 0004BD  0F81 0005                            B        s:14081,PREL

      656    14079    3           ELSE ALTRETURN;

  14079   1 0004BF  ECC7 0028                            LDB,B6   SIZE+2,AUTO
          1 0004C1  A806                                 LDR,R2   ,B6
          1 0004C2  C3A6                                 LNJ,B4   ,B6,R2

      657    14080    3           END;
      658    14081    2      G$JIT.FIRST_SEG(SEGX) = '0'B;

  14081   1 0004C3  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 0004C6  DBC6 0064                            LAB,B5   100,B6
          1 0004C8  B847 001D                            LDR,R3   SEGX,AUTO
          1 0004CA  8835                                 LBF      ,B5,R3

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:86   
      659    14082    2      RETURN;

  14082   1 0004CB  ECC7 0028                            LDB,B6   SIZE+2,AUTO
          1 0004CD  C3C6 0001                            LNJ,B4   1,B6

      660    14083    2   END;
      661    14084
      662    14085        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:87   
      663    14086        /*I*  NAME: GETSEGX
      664    14087              CALL: CALL GETSEGX ALTRET(label);
      665    14088              INPUT: SIZE - # of pages requested
      666    14089                     R$ -> vlp_segment
      667    14090
      668    14091              OUTPUT: SEGX - Index into user ASDT for the low segment of extent
      669    14092                      CURR_EXT_SIZE - Number of pages currently allocated in the extent
      670    14093                      MAX_EXT_SZ - Maximum size this extent can ever be in pages
      671    14094                      MAX_SEG_SZ - Number of pages in a segment for this extent (16 or 256)
      672    14095                      G$SEGDESC - descriptor from user ASDT for SEGX
      673    14096        */
      674    14097    1   GETSEGX: PROC ALTRET;

  14097   1 0004CF  EFC7 0028            GETSEGX         STB,B6   SIZE+2,AUTO

      675    14098
      676    14099        /* Set up SEGX.  First the tests for specific data segments.
      677    14100        */
      678    14101
      679    14102    2      IF MCL_CODE = %G_MCL_GAUTO# OR MCL_CODE = %G_MCL_FAUTO#

  14102   1 0004D1  E847 000C                            LDR,R6   MCL_CODE,AUTO
          1 0004D3  E970 0104                            CMR,R6   260,IMO
          1 0004D5  0901 0005                            BE       s:14104,PREL
          1 0004D7  E970 0105                            CMR,R6   261,IMO
          1 0004D9  0981 0020                            BNE      s:14108,PREL

      680    14103    3      THEN DO;

      681    14104    3           SEGX = MINIMUM (G$ROS.AUTO_DS/4096, %GM_UAUTO_DS#);

  14104   1 0004DB  DC80 0000 0000  xsym                 LDB,B5   G$ROS$
          1 0004DE  8CC5 0016                            LDI      22,B5
          1 0004E0  70CC                                 DOR,R7   12
          1 0004E1  8D47 002E                            SDI      SIZE+8,AUTO
          1 0004E3  8CF0 0000 0019                       LDI      25,IMO
          1 0004E6  8D47 002C                            SDI      SIZE+6,AUTO
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:88   
          1 0004E8  84C7 002E                            SID      SIZE+8,AUTO
          1 0004EA  0681 0009                            BCF      s:14104+25,PREL
          1 0004EC  6981 0003                            BNEZ,R6  s:14104+21,PREL
          1 0004EE  7901 0005                            BEZ,R7   s:14104+25,PREL
          1 0004F0  8CC7 002E                            LDI      SIZE+8,AUTO
          1 0004F2  8D47 002C                            SDI      SIZE+6,AUTO
          1 0004F4  E847 002D                            LDR,R6   SIZE+7,AUTO
          1 0004F6  EF47 001D                            STR,R6   SEGX,AUTO

      682    14105    3           GOTO GOT_SEGX;

  14105   1 0004F8  0F81 0146                            B        s:14216,PREL

      683    14106    3           END;
      684    14107
      685    14108    2      IF G$U.FLG.DIC

  14108   1 0004FA  DCC7 0015                            LDB,B5   CU$,AUTO
          1 0004FC  8285                                 LB,'4000'X        ,B5
          1 0004FD       4000
          1 0004FE  0581 0006                            BBF      s:14114,PREL

      686    14109    3      THEN DO;

      687    14110    3           SEGX = %GM_DB_DS#;

  14110   1 000500  5C02                                 LDV,R5   2
          1 000501  DF47 001D                            STR,R5   SEGX,AUTO

      688    14111    3           GOTO SET_SEG_SZ;

  14111   1 000503  0F81 0007                            B        s:14116,PREL

      689    14112    3           END;
      690    14113
      691    14114    2      IF G$U.FLG.CPIC

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:89   
  14114   1 000505  8985                                 CMZ      ,B5
          1 000506  0881 001C                            BAGE     s:14130,PREL

      692    14115    3      THEN DO;

      693    14116    3           SEGX = %GM_CP_DS#;

  14116   1 000508  5C0C                                 LDV,R5   12
          1 000509  DF47 001D                            STR,R5   SEGX,AUTO

  14116   1                              SET_SEG_SZ      null
      694    14117    3   SET_SEG_SZ: ;
      695    14118    3           MAX_SEG_SZ = 16;

  14118   1 00050B  4C10                 SET_SEG_SZ      LDV,R4   16
          1 00050C  CF47 0023                            STR,R4   MAX_SEG_SZ,AUTO

  14118   1                              SET_EXT_SZ      null
      696    14119    3   SET_EXT_SZ: ;
      697    14120    3           MAX_EXT_SZ = MAX_SEG_SZ;

  14120   1 00050E  CF47 001F            SET_EXT_SZ      STR,R4   MAX_EXT_SZ,AUTO

      698    14121    3           CURR_EXT_SZ = 0;

  14121   1 000510  8747 0020                            CL       CURR_EXT_SZ,AUTO

      699    14122    3           IF G$ASDT_USR$->G$SEGDESCA.V(SEGX)

  14122   1 000512  CC80 0000 0000  xsym                 LDB,B4   G$ASDT_USR$
          1 000515  B855                                 LDR,R3   R5
          1 000516  3001                                 SOL,R3   1
          1 000517  89B4                                 CMZ      ,B4,R3
          1 000518  0881 0008                            BAGE     s:14124,PREL

      700    14123    3           THEN CURR_EXT_SZ = G$ASDT_USR$->G$SEGDESCA.SIZE(SEGX) +1;

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:90   
  14123   1 00051A  3E01                                 ADV,R3   1
          1 00051B  A834                                 LDR,R2   ,B4,R3
          1 00051C  A570 01FF                            AND,R2   511,IMO
          1 00051E  2E01                                 ADV,R2   1
          1 00051F  AF47 0020                            STR,R2   CURR_EXT_SZ,AUTO

      701    14124    3           GOTO SET_SEG_DESC;

  14124   1 000521  0F81 0174                            B        s:14265,PREL

      702    14125    3           END;
      703    14126
      704    14127        /*  If he wants the next available segment, figure out which type it
      705    14128            should be and see if there is one we can use.
      706    14129        */
      707    14130    2      IF R$ = ADDR(NIL) THEN GOTO PICK_SEGX;

  14130   1 000523  8DC7 001A                            CMN      R$,AUTO
          1 000525  0901 0006                            BE       s:14133,PREL

      708    14131
      709    14132    2      IF RESULTS.BASE$ = ADDR(NIL)

  14132   1 000527  CCC7 001A                            LDB,B4   R$,AUTO
          1 000529  8D84                                 CMN      ,B4
          1 00052A  0981 00AE                            BNE      s:14201,PREL

      710    14133    3      THEN DO;

  14124   1                              PICK_SEGX       null
      711    14134    3   PICK_SEGX: ;
      712    14135    3           IF (MCL_CODE = %G_MCL_FDS#) OR (MCL_CODE = %G_MCL_PDS#)

  14135   1 00052C  E970 0103            PICK_SEGX       CMR,R6   259,IMO
          1 00052E  0901 0005                            BE       s:14137,PREL
          1 000530  E970 0107                            CMR,R6   263,IMO
          1 000532  0981 000C                            BNE      s:14142,PREL
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:91   

      713    14136    4           THEN DO;

      714    14137    4                PARM.ERR = BADVECT1;

  14137   1 000534  8C80 0000 004D  00                   LDI      BADVECT1
          1 000537  CCC7 0004                            LDB,B4   @PARM,AUTO
          1 000539  8D44 0003                            SDI      3,B4

      715    14138    4                ALTRETURN;

  14138   1 00053B  ECC7 0028                            LDB,B6   SIZE+2,AUTO
          1 00053D  B806                                 LDR,R3   ,B6
          1 00053E  C3B6                                 LNJ,B4   ,B6,R3

      716    14139    4                END;
      717    14140
      718    14141
      719    14142    3           IF NEXT > 2

  14142   1 00053F  D847 0010                            LDR,R5   NEXT,AUTO
          1 000541  5D02                                 CMV,R5   2
          1 000542  0381 000C                            BLE      s:14150,PREL

      720    14143    4           THEN DO;

      721    14144    4                PARM.ERR = BADVECT0;

  14144   1 000544  8C80 0000 004B  00                   LDI      BADVECT0
          1 000547  CCC7 0004                            LDB,B4   @PARM,AUTO
          1 000549  8D44 0003                            SDI      3,B4

      722    14145    4                ALTRETURN;

  14145   1 00054B  ECC7 0028                            LDB,B6   SIZE+2,AUTO
          1 00054D  B806                                 LDR,R3   ,B6
          1 00054E  C3B6                                 LNJ,B4   ,B6,R3
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:92   

      723    14146    4                END;
      724    14147
      725    14148        /* Set LO and HI to indicies into our ASDTX.
      726    14149        */
      727    14150    3           IF NEXT = %G_GDS_LITTLE# OR

  14150   1 00054F  5D01                                 CMV,R5   1
          1 000550  0901 0008                            BE       s:14152,PREL
          1 000552  5981 000D                            BNEZ,R5  s:14153,PREL
          1 000554  C847 0026                            LDR,R4   SIZE,AUTO
          1 000556  4D10                                 CMV,R4   16
          1 000557  0301 0008                            BG       s:14153,PREL

      728    14151    3             (NEXT = %G_GDS_EITHER# AND SIZE <= 16)
      729    14152    4           THEN DO; LO=0; HI=%LSEG#-1; END;

  14152   1 000559  8747 000F                            CL       LO,AUTO

  14152   1 00055B  4C05                                 LDV,R4   5
          1 00055C  CF47 000D                            STR,R4   HI,AUTO

  14152   1 00055E  0F81 0007                            B        s:14155,PREL

      730    14153    4           ELSE DO; LO=%LSEG#; HI=%SEG#; END;

  14153   1 000560  4C06                                 LDV,R4   6
          1 000561  CF47 000F                            STR,R4   LO,AUTO

  14153   1 000563  3C0F                                 LDV,R3   15
          1 000564  BF47 000D                            STR,R3   HI,AUTO

      731    14154
      732    14155    3           BEST_SEGX = 0;

  14155   1 000566  8747 0024                            CL       BEST_SEGX,AUTO

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:93   
      733    14156    3           BEST_SIZE = 0;

  14156   1 000568  8747 0025                            CL       BEST_SIZE,AUTO

  14156   1                              TRY_AGAIN       null
      734    14157
      735    14158    3   TRY_AGAIN: ;
      736    14159    4           DO SEGI = LO TO HI;

  14159   1 00056A  E847 000F            TRY_AGAIN       LDR,R6   LO,AUTO
          1 00056C  EF47 001C                            STR,R6   SEGI,AUTO
          1 00056E  0F81 0042                            B        s:14180+2,PREL

      737    14160    4                CURR_EXT_SZ = 0;

  14160   1 000570  8747 0020                            CL       CURR_EXT_SZ,AUTO

      738    14161    4                SEGX = ASDTX(SEGI);        /* index into user ASDT               */

  14161   1 000572  B847 001C                            LDR,R3   SEGI,AUTO
          1 000574  E830 0000 0013  00                   LDR,R6   ASDTX,R3
          1 000577  EF47 001D                            STR,R6   SEGX,AUTO

      739    14162    4                EXT_HI_SEG = SEGHIX(SEGI);

  14162   1 000579  D830 0000 0003  00                   LDR,R5   SEGHIX,R3
          1 00057C  DF47 0021                            STR,R5   EXT_HI_SEG,AUTO

      740    14163
      741    14164    5                DO I = SEGX TO EXT_HI_SEG;

  14164   1 00057E  EF47 000E                            STR,R6   I,AUTO
          1 000580  0F81 0017                            B        s:14168+2,PREL

      742    14165    5                     IF NOT G$ASDT_USR$->G$SEGDESCA.V(I)

  14165   1 000582  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:94   
          1 000585  B847 000E                            LDR,R3   I,AUTO
          1 000587  3001                                 SOL,R3   1
          1 000588  89B6                                 CMZ      ,B6,R3
          1 000589  0801 0013                            BAL      s:14164,PREL

      743    14166    5                     THEN CURR_EXT_SZ = CURR_EXT_SZ + SZ(SEGI);

  14166   1 00058B  A847 001C                            LDR,R2   SEGI,AUTO
          1 00058D  E847 0020                            LDR,R6   CURR_EXT_SZ,AUTO
          1 00058F  EA20 0000 0023  00                   ADD,R6   SZ,R2
          1 000592  EF47 0020                            STR,R6   CURR_EXT_SZ,AUTO
          1 000594  0F81 0001                            B        s:14168,PREL

      744    14167    5                     ELSE GOTO CHECK_FIT;
      745    14168    5                     END/*segx to ext_hi_seg*/;

  14168   1 000596  8AC7 000E                            INC      I,AUTO
          1 000598  E847 000E                            LDR,R6   I,AUTO
          1 00059A  E947 0021                            CMR,R6   EXT_HI_SEG,AUTO
          1 00059C  03E6                                 BLE      s:14165,SPREL

  14164   1                              CHECK_FIT       null
      746    14169
      747    14170    4   CHECK_FIT:   ;
      748    14171    4                IF SIZE <= CURR_EXT_SZ

  14171   1 00059D  E847 0026            CHECK_FIT       LDR,R6   SIZE,AUTO
          1 00059F  E947 0020                            CMR,R6   CURR_EXT_SZ,AUTO
          1 0005A1  0381 009D                            BLE      s:14216,PREL

      749    14172    4                THEN GOTO GOT_SEGX;
      750    14173
      751    14174    4                IF CURR_EXT_SZ > BEST_SIZE

  14174   1 0005A3  D847 0020                            LDR,R5   CURR_EXT_SZ,AUTO
          1 0005A5  D947 0025                            CMR,R5   BEST_SIZE,AUTO
          1 0005A7  0381 0007                            BLE      s:14180,PREL
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:95   

      752    14175    5                THEN DO;

      753    14176    5                     BEST_SIZE = CURR_EXT_SZ;

  14176   1 0005A9  DF47 0025                            STR,R5   BEST_SIZE,AUTO

      754    14177    5                     BEST_SEGX = SEGX;

  14177   1 0005AB  C847 001D                            LDR,R4   SEGX,AUTO
          1 0005AD  CF47 0024                            STR,R4   BEST_SEGX,AUTO

      755    14178    5                     END;

      756    14179
      757    14180    4                END/*lo to hi*/;

  14180   1 0005AF  8AC7 001C                            INC      SEGI,AUTO
          1 0005B1  E847 001C                            LDR,R6   SEGI,AUTO
          1 0005B3  E947 000D                            CMR,R6   HI,AUTO
          1 0005B5  0381 FFBA                            BLE      s:14160,PREL

      758    14181
      759    14182    3           IF (NEXT = %G_GDS_EITHER#) AND (HI = 1)

  14182   1 0005B7  D847 0010                            LDR,R5   NEXT,AUTO
          1 0005B9  5981 000E                            BNEZ,R5  s:14188,PREL
          1 0005BB  C847 000D                            LDR,R4   HI,AUTO
          1 0005BD  4D01                                 CMV,R4   1
          1 0005BE  0981 0009                            BNE      s:14188,PREL

      760    14183    4           THEN DO;

      761    14184    4                LO=%LSEG#; HI=%SEG#;

  14184   1 0005C0  3C06                                 LDV,R3   6
          1 0005C1  BF47 000F                            STR,R3   LO,AUTO
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:96   

  14184   1 0005C3  4C0F                                 LDV,R4   15
          1 0005C4  CF47 000D                            STR,R4   HI,AUTO

      762    14185    4                GOTO TRY_AGAIN;

  14185   1 0005C6  0F81 FFA3                            B        s:14156,PREL

      763    14186    4                END;
      764    14187
      765    14188    3           SEGX = BEST_SEGX;

  14188   1 0005C8  C847 0024                            LDR,R4   BEST_SEGX,AUTO
          1 0005CA  CF47 001D                            STR,R4   SEGX,AUTO

      766    14189    3           IF SEGX ~= 0 THEN GOTO GOT_SEGX;

  14189   1 0005CC  4981 0072                            BNEZ,R4  s:14216,PREL

      767    14190
      768    14191    3           PARM.ERR = ALLUSED;

  14191   1 0005CE  8C80 0000 003B  00                   LDI      ALLUSED
          1 0005D1  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 0005D3  8D46 0003                            SDI      3,B6

      769    14192    3           ALTRETURN;

  14192   1 0005D5  ECC7 0028                            LDB,B6   SIZE+2,AUTO
          1 0005D7  B806                                 LDR,R3   ,B6
          1 0005D8  C3B6                                 LNJ,B4   ,B6,R3

      770    14193    3           END/*do if we must pick one*/;
      771    14194        /*E* ERROR: GMM-E$ALLUSED-E
      772    14195             MESSAGE: All available data segments have been allocated.
      773    14196        */
      774    14197
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:97   
      775    14198        /*  If a segment was specified, check thats its legal.
      776    14199        */
      777    14200    3      ELSE DO/* results.base$ was specified*/;

      778    14201    3           IF (ADDR(RESULTS.BASE)->B$CHECK_BASE.WORD1 & CHECK_BASE.WORD1)

  14201   1 0005D9  D804                                 LDR,R5   ,B4
          1 0005DA  D500 0000 0035  00                   AND,R5   CHECK_BASE
          1 0005DD  5981 0056                            BNEZ,R5  s:14229,PREL
          1 0005DF  D844 0001                            LDR,R5   1,B4
          1 0005E1  D500 0000 0036  00                   AND,R5   CHECK_BASE+1
          1 0005E4  5981 004F                            BNEZ,R5  s:14229,PREL

      779    14202    3             OR (ADDR(RESULTS.BASE)->B$CHECK_BASE.WORD2 & CHECK_BASE.WORD2)
      780    14203    3           THEN GOTO NGSEGX;
      781    14204
      782    14205    3           IF RESULTS.BASE < %GM_SEG0100_BASE

  14205   1 0005E6  8C84                                 LDI      ,B4
          1 0005E7  84F0 0001 0000                       SID      65536,IMO
          1 0005EA  0601 0008                            BCT      s:14207,PREL

      783    14206    3           THEN SEGX = RESULTS.BASE/4096;

  14206   1 0005EC  8C84                                 LDI      ,B4
          1 0005ED  70CC                                 DOR,R7   12
          1 0005EE  E857                                 LDR,R6   R7
          1 0005EF  EF47 001D                            STR,R6   SEGX,AUTO
          1 0005F1  0F81 0009                            B        s:14209,PREL

      784    14207    3           ELSE SEGX = RESULTS.BASE/65536 + 15;

  14207   1 0005F3  8C84                                 LDI      ,B4
          1 0005F4  70D0                                 DOR,R7   16
          1 0005F5  8470 0000 000F                       AID      15,IMO
          1 0005F8  E857                                 LDR,R6   R7
          1 0005F9  EF47 001D                            STR,R6   SEGX,AUTO
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:98   

      785    14208
      786    14209    4           DO SEGI = 0 TO %SEG#;

  14209   1 0005FB  8747 001C                            CL       SEGI,AUTO

      787    14210    4                IF SEGX = ASDTX(SEGI)

  14210   1 0005FD  B847 001C                            LDR,R3   SEGI,AUTO
          1 0005FF  E847 001D                            LDR,R6   SEGX,AUTO
          1 000601  E930 0000 0013  00                   CMR,R6   ASDTX,R3
          1 000604  0981 0029                            BNE      s:14227,PREL

      788    14211    5                THEN DO;

      789    14212    5                     IF MCL_CODE > %G_MCL_GDDL# THEN RETURN;

  14212   1 000606  D847 000C                            LDR,R5   MCL_CODE,AUTO
          1 000608  D970 0106                            CMR,R5   262,IMO
          1 00060A  0381 0005                            BLE      s:14214,PREL

  14212   1 00060C  ECC7 0028                            LDB,B6   SIZE+2,AUTO
          1 00060E  C3C6 0001                            LNJ,B4   1,B6

      790    14213
      791    14214    5                     IF G$ASDT_USR$->G$SEGDESCA.V(SEGX)

  14214   1 000610  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 000613  A856                                 LDR,R2   R6
          1 000614  2001                                 SOL,R2   1
          1 000615  89A6                                 CMZ      ,B6,R2
          1 000616  0881 0015                            BAGE     s:14225,PREL

      792    14215    6                     THEN DO;

      793    14216    6                          IF NOT G$JIT.FIRST_SEG(SEGX)

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:99   
  14216   1 000618  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          1 00061B  CBC5 0064                            LAB,B4   100,B5
          1 00061D  9856                                 LDR,R1   R6
          1 00061E  8294                                 LB       ,B4,R1
          1 00061F  0501 000C                            BBT      s:14225,PREL

      794    14217    7                          THEN DO;

      795    14218    7                               PARM.ERR = ILGLSEG;

  14218   1 000621  8C80 0000 004F  00                   LDI      ILGLSEG
          1 000624  CCC7 0004                            LDB,B4   @PARM,AUTO
          1 000626  8D44 0003                            SDI      3,B4

      796    14219    7                               ALTRETURN;

  14219   1 000628  ECC7 0028                            LDB,B6   SIZE+2,AUTO
          1 00062A  B806                                 LDR,R3   ,B6
          1 00062B  C3B6                                 LNJ,B4   ,B6,R3

      797    14220    7                               END;
      798    14221    6                          END/*do if asdt.v*/;
      799    14222        /*E* ERROR: GMM-E$ILGLSEG-E
      800    14223             MESSAGE: VLP_SEGMENT.BASE$ does not specify the start of a memory extent.
      801    14224        */
      802    14225    5                     GOTO GOT_SEGX;

  14225   1 00062C  0F81 0012                            B        s:14216,PREL

      803    14226    5                     END/*do if found in asdtx*/;
      804    14227    4                END/*do 0 to seg#*/;

  14227   1 00062E  8AC7 001C                            INC      SEGI,AUTO
          1 000630  D847 001C                            LDR,R5   SEGI,AUTO
          1 000632  5D0F                                 CMV,R5   15
          1 000633  03CA                                 BLE      s:14210,SPREL

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:100  
      805    14228
      806    14229    3   NGSEGX: PARM.ERR = BADSEGID;

  14229   1 000634  8C80 0000 0039  00   NGSEGX          LDI      BADSEGID
          1 000637  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 000639  8D46 0003                            SDI      3,B6

      807    14230    3           ALTRETURN;

  14230   1 00063B  ECC7 0028                            LDB,B6   SIZE+2,AUTO
          1 00063D  B806                                 LDR,R3   ,B6
          1 00063E  C3B6                                 LNJ,B4   ,B6,R3

  14216   1                              GOT_SEGX        null
      808    14231    3           END/*do if .base$ specified*/;
      809    14232        /*E* ERROR: GMM-E$BADSEGID-E
      810    14233             MESSAGE: VLP_SEGMENT.BASE$ does not specify a segment accessible by you.
      811    14234        */
      812    14235
      813    14236
      814    14237    2   GOT_SEGX: ;
      815    14238    2      IF (MCL_CODE ~= %G_MCL_PDS#) AND (MCL_CODE ~= %G_MCL_CVM#)

  14238   1 00063F  E847 000C            GOT_SEGX        LDR,R6   MCL_CODE,AUTO
          1 000641  E970 0107                            CMR,R6   263,IMO
          1 000643  0901 0022                            BE       s:14253,PREL
          1 000645  E970 0108                            CMR,R6   264,IMO
          1 000647  0901 001E                            BE       s:14253,PREL

      816    14239    3      THEN DO;

      817    14240    3           IF G$UHJIT$->G$UHJIT.SHRD_SEG(SEGX) ~= 0

  14240   1 000649  EC80 0000 0000  xsym                 LDB,B6   G$UHJIT$
          1 00064C  DBC6 0183                            LAB,B5   387,B6
          1 00064E  B847 001D                            LDR,R3   SEGX,AUTO
          1 000650  D2B5                                 LLH,R5   ,B5,R3
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:101  
          1 000651  5981 0009                            BNEZ,R5  s:14243,PREL
          1 000653  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          1 000656  CBC5 00B6                            LAB,B4   182,B5
          1 000658  82B4                                 LB       ,B4,R3
          1 000659  0581 000C                            BBF      s:14253,PREL

      818    14241    3             OR G$JIT.CVM_REAL(SEGX)
      819    14242    4           THEN DO;

      820    14243    4                PARM.ERR = ITISSHARED;

  14243   1 00065B  8C80 0000 0053  00                   LDI      ITISSHARED
          1 00065E  DCC7 0004                            LDB,B5   @PARM,AUTO
          1 000660  8D45 0003                            SDI      3,B5

      821    14244    4                ALTRETURN;

  14244   1 000662  ECC7 0028                            LDB,B6   SIZE+2,AUTO
          1 000664  B806                                 LDR,R3   ,B6
          1 000665  C3B6                                 LNJ,B4   ,B6,R3

      822    14245    4                END;
      823    14246    3           END;
      824    14247        /*E* ERROR: GMM-E$ITISSHARED-E
      825    14248             MESSAGE: M$GDS or M$FDS on a shared segment is not allowed.
      826    14249        */
      827    14250
      828    14251        /* Set CURR_EXT_SZ to the number pages currently in the extent.
      829    14252        */
      830    14253    2      CALL GET_EXT_SIZE;

  14253   1 000666  E3C0 003B                            LNJ,B6   s:0,PREL
          1 000668       0001                            DC       s:14257,PREL

      831    14254
      832    14255        /* Set MAX_EXT_SZ to the number of virtual pages in the extent.
      833    14256        */
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:102  
      834    14257    2      IF SEGX < %GM_ISR1#

  14257   1 000669  E847 001D                            LDR,R6   SEGX,AUTO
          1 00066B  6D10                                 CMV,R6   16
          1 00066C  0281 0006                            BGE      s:14259,PREL

      835    14258    2      THEN MAX_SEG_SZ = 16;

  14258   1 00066E  5C10                                 LDV,R5   16
          1 00066F  DF47 0023                            STR,R5   MAX_SEG_SZ,AUTO
          1 000671  0F81 0005                            B        s:14261,PREL

      836    14259    2      ELSE MAX_SEG_SZ = 256;

  14259   1 000673  D870 0100                            LDR,R5   256,IMO
          1 000675  DF47 0023                            STR,R5   MAX_SEG_SZ,AUTO

      837    14260
      838    14261    2      MAX_EXT_SZ = MAX_SEG_SZ;

  14261   1 000677  DF47 001F                            STR,R5   MAX_EXT_SZ,AUTO

      839    14262
      840    14263    2      I = SEGX+1;

  14263   1 000679  6E01                                 ADV,R6   1
          1 00067A  EF47 000E                            STR,R6   I,AUTO

      841    14264    3      DO WHILE (G$JIT.FIRST_SEG(I)= '0'B);

  14264   1 00067C  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 00067F  DBC6 0064                            LAB,B5   100,B6
          1 000681  B856                                 LDR,R3   R6
          1 000682  82B5                                 LB       ,B5,R3
          1 000683  0501 0012                            BBT      s:14265,PREL

      842    14265    3           MAX_EXT_SZ = MAX_EXT_SZ + MAX_SEG_SZ;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:103  

  14265   1 000685  E847 001F                            LDR,R6   MAX_EXT_SZ,AUTO
          1 000687  EA47 0023                            ADD,R6   MAX_SEG_SZ,AUTO
          1 000689  EF47 001F                            STR,R6   MAX_EXT_SZ,AUTO

      843    14266    3           I = I+1;

  14266   1 00068B  8AC7 000E                            INC      I,AUTO

      844    14267    3           END;

  14267   1 00068D  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 000690  DBC6 0064                            LAB,B5   100,B6
          1 000692  B847 000E                            LDR,R3   I,AUTO
          1 000694  82B5                                 LB       ,B5,R3
          1 000695  05F0                                 BBF      s:14265,SPREL

  14265   1                              SET_SEG_DESC    null
      845    14268
      846    14269    2   SET_SEG_DESC: ;
      847    14270    2      G$SEGDESC = G$ASDT_USR$->G$SEGDESCA(SEGX);

  14270   1 000696  EC80 0000 0000  xsym SET_SEG_DESC    LDB,B6   G$ASDT_USR$
          1 000699  B847 001D                            LDR,R3   SEGX,AUTO
          1 00069B  8CB6                                 LDI      ,B6,R3
          1 00069C  8D47 000A                            SDI      G$SEGDESC,AUTO

      848    14271
      849    14272    2      RETURN;

  14272   1 00069E  ECC7 0028                            LDB,B6   SIZE+2,AUTO
          1 0006A0  C3C6 0001                            LNJ,B4   1,B6

      850    14273    2   END GETSEGX;
      851    14274        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:104  
      852    14275        /*I* NAME: GET_EXT_SIZE
      853    14276
      854    14277             INPUT: SEGX - Index into user ASDT for the low seg of the extent
      855    14278             OUTPUT: CURR_EXT_SZ - Number of pages currently allocated in the extent
      856    14279        */
      857    14280    1   GET_EXT_SIZE: PROC;

  14280   1 0006A2  EFC7 002A            GET_EXT_SIZE    STB,B6   SIZE+4,AUTO

      858    14281
      859    14282    2      CURR_EXT_SZ = 0;

  14282   1 0006A4  8747 0020                            CL       CURR_EXT_SZ,AUTO

      860    14283    2      I = SEGX;

  14283   1 0006A6  E847 001D                            LDR,R6   SEGX,AUTO
          1 0006A8  EF47 000E                            STR,R6   I,AUTO

      861    14284    3      DO WHILE (G$ASDT_USR$->G$SEGDESCA.V(I) );

  14284   1 0006AA  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          1 0006AD  B856                                 LDR,R3   R6
          1 0006AE  3001                                 SOL,R3   1
          1 0006AF  89B5                                 CMZ      ,B5,R3
          1 0006B0  0881 0023                            BAGE     s:14290,PREL

      862    14285    3           IF G$JIT.FIRST_SEG(I) AND I ~= SEGX THEN EXIT;

  14285   1 0006B2  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 0006B5  DBC6 0064                            LAB,B5   100,B6
          1 0006B7  B847 000E                            LDR,R3   I,AUTO
          1 0006B9  82B5                                 LB       ,B5,R3
          1 0006BA  0581 0005                            BBF      s:14286,PREL
          1 0006BC  B947 001D                            CMR,R3   SEGX,AUTO
          1 0006BE  0981 0015                            BNE      s:14290,PREL

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:105  
      863    14286    3           CURR_EXT_SZ = CURR_EXT_SZ + G$ASDT_USR$->G$SEGDESCA.SIZE(I) +1;

  14286   1 0006C0  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          1 0006C3  3001                                 SOL,R3   1
          1 0006C4  3E01                                 ADV,R3   1
          1 0006C5  E835                                 LDR,R6   ,B5,R3
          1 0006C6  E570 01FF                            AND,R6   511,IMO
          1 0006C8  EA47 0020                            ADD,R6   CURR_EXT_SZ,AUTO
          1 0006CA  6E01                                 ADV,R6   1
          1 0006CB  EF47 0020                            STR,R6   CURR_EXT_SZ,AUTO

      864    14287    3           I = I+1;

  14287   1 0006CD  8AC7 000E                            INC      I,AUTO

      865    14288    3           END;

  14288   1 0006CF  B847 000E                            LDR,R3   I,AUTO
          1 0006D1  3001                                 SOL,R3   1
          1 0006D2  89B5                                 CMZ      ,B5,R3
          1 0006D3  085F                                 BAL      s:14285,SPREL

      866    14289
      867    14290    2      RETURN;

  14290   1 0006D4  ECC7 002A                            LDB,B6   SIZE+4,AUTO
          1 0006D6  C3C6 0001                            LNJ,B4   1,B6

      868    14291    2   END GET_EXT_SIZE;
      869    14292        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:106  
      870    14293
      871    14294        /*D*
      872    14295              NAME: GMM$SHAREDS
      873    14296              CALL:
      874    14297                   CALL GMS$SHAREDS (parameter) ALTRET(label);
      875    14298              PARAMETERS:
      876    14299                   parameter is the parameter structure defined by the
      877    14300                   GM_SHARED macro in GM_MACRO_M.
      878    14301
      879    14302              DESCRIPTION:
      880    14303                   This procedure is called from the M$OPEN monitor service
      881    14304                   procedure when ACS=DS1 - DS7 is specified.  After making
      882    14305                   the necessary validity check on the request it determines
      883    14306                   if memory is to be allocated, and does so, or if memory
      884    14307                   allready associated with the shared file is to be assoc-
      885    14308                   iated with this user.  If memory is allocated, the shared
      886    14309                   file table entry is updated.
      887    14310
      888    14311                                                                           */
      889    14312
      890    14313        %EJECT;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:107  
      891    14314    1   GMM$SHAREDS: ENTRY (PARM) ALTRET;

  14314   1 0006D8  D380 0000 0000  xent GMM$SHAREDS     LNJ,B5   X6A_AUTO_1
          1 0006DB       0036 0001                       DC       54,1

      892    14315
      893    14316
      894    14317    1      R$=ADDR(PARM);

  14317   1 0006DD  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 0006DF  EFC7 001A                            STB,B6   R$,AUTO

      895    14318    1      SEGX=SHARED.SEGX;

  14318   1 0006E1  E806                                 LDR,R6   ,B6
          1 0006E2  EF47 001D                            STR,R6   SEGX,AUTO

      896    14319    1      PAGES=SHARED.PAGES;

  14319   1 0006E4  D846 0001                            LDR,R5   1,B6
          1 0006E6  DF47 0017                            STR,R5   PAGES,AUTO

      897    14320    2      DO I = 0 TO %SEG#;

  14320   1 0006E8  8747 000E                            CL       I,AUTO

      898    14321    2           SEGI=I;

  14321   1 0006EA  E847 000E                            LDR,R6   I,AUTO
          1 0006EC  EF47 001C                            STR,R6   SEGI,AUTO

      899    14322    2           IF SEGX = ASDTX(I) THEN GOTO OKSHSEGX;

  14322   1 0006EE  B856                                 LDR,R3   R6
          1 0006EF  D847 001D                            LDR,R5   SEGX,AUTO
          1 0006F1  D930 0000 0013  00                   CMR,R5   ASDTX,R3
          1 0006F4  0901 0011                            BE       s:14324,PREL
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:108  

      900    14323    2           END;

  14323   1 0006F6  8AC7 000E                            INC      I,AUTO
          1 0006F8  C847 000E                            LDR,R4   I,AUTO
          1 0006FA  4D0F                                 CMV,R4   15
          1 0006FB  03EF                                 BLE      s:14321,SPREL

      901    14324    1      SHARED.ERR=BADSEGID;

  14324   1 0006FC  8C80 0000 0039  00                   LDI      BADSEGID
          1 0006FF  ECC7 001A                            LDB,B6   R$,AUTO
          1 000701  8D46 0002                            SDI      2,B6

      902    14325    1      ALTRETURN;

  14325   1 000703  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

  14324   1                              OKSHSEGX        null
      903    14326
      904    14327    1   OKSHSEGX: ;
      905    14328    1      IF SIZE > SZ(SEGI)

  14328   1 000706  C847 0026            OKSHSEGX        LDR,R4   SIZE,AUTO
          1 000708  C930 0000 0023  00                   CMR,R4   SZ,R3
          1 00070B  0381 000B                            BLE      s:14334,PREL

      906    14329    2      THEN DO;

      907    14330    2           SHARED.ERR=SEGSIZE;

  14330   1 00070D  8C80 0000 0037  00                   LDI      SEGSIZE
          1 000710  ECC7 001A                            LDB,B6   R$,AUTO
          1 000712  8D46 0002                            SDI      2,B6

      908    14331    2           ALTRETURN;

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:109  
  14331   1 000714  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      909    14332    2           END;
      910    14333
      911    14334    1      IF SHARED.S$->G$SFILE.PGSZ_PROC = 0

  14334   1 000717  ECC7 001A                            LDB,B6   R$,AUTO
          1 000719  DCC6 0006                            LDB,B5   6,B6
          1 00071B  A845 0027                            LDR,R2   39,B5
          1 00071D  2981 000D                            BNEZ,R2  s:14343,PREL

      912    14335    2      THEN DO;

      913    14336    2           IF SHARED.WP ~= BITBIN(%G_R_USR#)

  14336   1 00071F  9846 0005                            LDR,R1   5,B6
          1 000721  1901 0009                            BEZ,R1   s:14343,PREL

      914    14337    3           THEN DO;

      915    14338    3                SHARED.ERR=BADDSPROT;

  14338   1 000723  8C80 0000 0047  00                   LDI      BADDSPROT
          1 000726  8D46 0002                            SDI      2,B6

      916    14339    3                ALTRETURN;

  14339   1 000728  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      917    14340    3                END;
      918    14341    2           END;
      919    14342
      920    14343    1      IF SHARED.S$->G$SFILE.PGSZ_PROC = 0

  14343   1 00072B  2981 0059                            BNEZ,R2  s:14360,PREL

      921    14344    2      THEN DO;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:110  

      922    14345    2           CHKSZ = '0'B;

  14345   1 00072D  5C08                                 LDV,R5   8
          1 00072E  0021                                 ALR      ;
          1 00072F       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 000731       4007 0006                                ALPHANUM(CHKSZ,AUTO,,R5,FILL)

      923    14346    2           CHKSZ.FLGS.REQ_ALL = '1'B;

  14346   1 000733  437F                                 CSYNC    s:14345+5,SPREL
          1 000734  8947 0009                            LBT,'4000'X       CHKSZ+3,AUTO
          1 000736       4000

      924    14347    2           CHKSZ.FLGS.PARK ='1'B;

  14347   1 000737  8947 0009                            LBT,'2000'X       CHKSZ+3,AUTO
  14347   1 000739       2000

      925    14348    2           CALL GMA$CHKSIZE (CHKSZ)

  14348   1 00073A  EBC7 0006                            LAB,B6   CHKSZ,AUTO
          1 00073C  EFC7 002C                            STB,B6   SIZE+6,AUTO
          1 00073E  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 000740  CBF0 0100                            LAB,B4   256,IMO
          1 000742  E380 0000 0000  xent                 LNJ,B6   GMA$CHKSIZE
          1 000745       0003                            DC       s:14350,PREL
          1 000746  0F81 000A                            B        s:14355,PREL

      926    14349    3           WHENALTRETURN DO;

      927    14350    3                PARM.ERR = CHKSZ.ERR;

  14350   1 000748  8CC7 0007                            LDI      CHKSZ+1,AUTO
          1 00074A  ECC7 0004                            LDB,B6   @PARM,AUTO
          1 00074C  8D46 0003                            SDI      3,B6

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:111  
      928    14351    3                ALTRETURN;

  14351   1 00074E  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      929    14352    3                END;
      930    14353
      931    14354
      932    14355    2           CALL GMA$GET(SEGX,SIZE,SHARED.RP,SHARED.WP,PROT(0));

  14355   1 000751  EB80 0000 0033  00                   LAB,B6   PROT
          1 000754  EFC7 0034                            STB,B6   SIZE+14,AUTO
          1 000756  DCC7 001A                            LDB,B5   R$,AUTO
          1 000758  CBC5 0005                            LAB,B4   5,B5
          1 00075A  CFC7 0032                            STB,B4   SIZE+12,AUTO
          1 00075C  BBC5 0004                            LAB,B3   4,B5
          1 00075E  BFC7 0030                            STB,B3   SIZE+10,AUTO
          1 000760  ABC7 0026                            LAB,B2   SIZE,AUTO
          1 000762  AFC7 002E                            STB,B2   SIZE+8,AUTO
          1 000764  9BC7 001D                            LAB,B1   SEGX,AUTO
          1 000766  9FC7 002C                            STB,B1   SIZE+6,AUTO
          1 000768  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 00076A  CBF0 0500                            LAB,B4   1280,IMO
          1 00076C  E380 0000 0000  xent                 LNJ,B6   GMA$GET
          1 00076F       0001                            DC       s:14356,PREL

      933    14356    2           SHARED.S$->G$SFILE.PP_SEG1 = G$ASDT_USR$->G$SEGDESCA.BASE(SEGX);

  14356   1 000770  ECC7 001A                            LDB,B6   R$,AUTO
          1 000772  DCC6 0006                            LDB,B5   6,B6
          1 000774  CC80 0000 0000  xsym                 LDB,B4   G$ASDT_USR$
          1 000777  B847 001D                            LDR,R3   SEGX,AUTO
          1 000779  3001                                 SOL,R3   1
          1 00077A  E834                                 LDR,R6   ,B4,R3
          1 00077B  E570 7FFF                            AND,R6   32767,IMO
          1 00077D  EF45 0029                            STR,R6   41,B5

      934    14357    2           SHARED.S$->G$SFILE.PGSZ_PROC = SIZE;
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:112  

  14357   1 00077F  DCC6 0006                            LDB,B5   6,B6
          1 000781  E847 0026                            LDR,R6   SIZE,AUTO
          1 000783  EF45 0027                            STR,R6   39,B5

      935    14358    2           END;

      936    14359
      937    14360    1      CALL GMA$SHARED (SHARED.S$->G$SFILE);

  14360   1 000785  DCC6 0006                            LDB,B5   6,B6
          1 000787  DFC7 002C                            STB,B5   SIZE+6,AUTO
          1 000789  BBC7 002C                            LAB,B3   SIZE+6,AUTO
          1 00078B  CBF0 0100                            LAB,B4   256,IMO
          1 00078D  E380 0000 0000  xent                 LNJ,B6   GMA$SHARED
          1 000790       0001                            DC       s:14361,PREL

      938    14361    1      RETURN;

  14361   1 000791  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
      939    14362
      940    14363    1   END;

PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:113  
--  Include file information  --

   GM_VIRTUAL_E.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   UD_ERRORS_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   G_SFILE_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   GU_MACROS_M.:E05TOU  is referenced.
   GM_MACRO_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GMM$MCLS.
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:114  

 **** Variables and constants ****

  ****  Section 000 RoData GMM$MCLS

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

    3D-0-0/w STRC(32)    r     1 ALLGONE                   3B-0-0/w STRC(32)    r     1 ALLUSED
    13-0-0/w UBIN(16)    r     1 ASDTX(0:15)               47-0-0/w STRC(32)    r     1 BADDSPROT
    43-0-0/w STRC(32)    r     1 BADPP                     39-0-0/w STRC(32)    r     1 BADSEGID
    4B-0-0/w STRC(32)    r     1 BADVECT0                  4D-0-0/w STRC(32)    r     1 BADVECT1
    51-0-0/w STRC(32)    r     1 BIGFREE                   35-0-0/b STRC(32)    r     1 CHECK_BASE
    49-0-0/w STRC(32)    r     1 HANDSOFF                  4F-0-0/w STRC(32)    r     1 ILGLSEG
    55-0-0/w STRC(32)    r     1 INTERR                    45-0-0/w STRC(32)    r     1 IOEXT
    53-0-0/w STRC(32)    r     1 ITISSHARED                41-0-0/w STRC(32)    r     1 MMPRIV
    57-0-0/w STRC(32)    r     1 PGINUSE                   33-0-0/w BIT (2)     r     1 PROT(0:1)
    3F-0-0/w STRC(32)    r     1 SEGFULL                    3-0-0/w UBIN(16)    r     1 SEGHIX(0:15)
    37-0-0/w STRC(32)    r     1 SEGSIZE                   23-0-0/w UBIN(16)    r     1 SZ(0:15)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @PARM                     13-0-0/w UBIN(16)    r     1 BASE
    24-0-0/w UBIN(16)    r     1 BEST_SEGX                 25-0-0/w UBIN(16)    r     1 BEST_SIZE
     6-0-0/w STRC(64)    r     1 CHKSZ                     15-0-0/w PTR         r     1 CU$
    20-0-0/w UBIN(16)    r     1 CURR_EXT_SZ               21-0-0/w UBIN(16)    r     1 EXT_HI_SEG
    14-0-0/w UBIN(16)    r     1 FROMX                      A-0-0/w STRC(32)    r     1 G$SEGDESC
     D-0-0/w UBIN(16)    r     1 HI                         E-0-0/w UBIN(16)    r     1 I
    11-0-0/w PTR         r     1 L$                         F-0-0/w UBIN(16)    r     1 LO
    1F-0-0/w UBIN(16)    r     1 MAX_EXT_SZ                23-0-0/w UBIN(16)    r     1 MAX_SEG_SZ
     C-0-0/w UBIN(16)    r     1 MCL_CODE                  10-0-0/w UBIN(16)    r     1 NEXT
    17-0-0/w UBIN(16)    r     1 PAGES                     *0-0-0/w STRC(1280)  r     1 PARM
    1A-0-0/w PTR         r     1 R$                        1C-0-0/w UBIN(16)    r     1 SEGI
    1D-0-0/w UBIN(16)    r     1 SEGX                      26-0-0/w UBIN(16)    r     1 SIZE
    22-0-0/w UBIN(16)    r     1 THIS_SIZE                 18-0-0/w PTR         r     1 V$
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:115  

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$ASDT_USR$                0-0-0/w PTR         r     1 G$JIT$
     0-0-0/w PTR         r     1 G$MHJIT$                   0-0-0/w PTR         r     1 G$ROS$
     0-0-0/w PTR         r     1 G$UHJIT$                   0-0-0/w PTR         r     1 G$USRT$
     0-0-0/w PTR         r     1 G$WINDOW1$                 0-0-0/w UBIN(16)    r     1 GM_MEM_HI
     0-0-0/w UBIN(16)    r     1 GM_SHUF_HI                 0-0-0/w UBIN(16)    r     1 G_MUAIS

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(32)    r     1 B$CHECK_BASE               0-0-0/w STRC(48)    r     1 FPT_CVM
     0-0-0/w STRC(32)    r     1 FPT_FDS                    0-0-0/w STRC(32)    r     1 FPT_GDS
     0-0-0/w STRC(16)    r     1 FPT_PDS                    0-0-0/w STRC(48)    r     1 FROMSEG
     0-0-0/w STRC(5616)  r     1 G$JIT                      0-0-0/w STRC(27232) r     1 G$MHJIT
     0-0-0/w STRC(928)   r     1 G$ROS
     0-0-0/w STRC(32)    r     1 G$SEGDESCA(0:0)
     0-0-0/w STRC(768)   r     1 G$SFILE                    0-0-0/w STRC(384)   r     1 G$U
     0-0-0/w STRC(6480)  r     1 G$UHJIT                    0-0-0/w STRC(384)   r     1 G$USER(0:0)
     0-0-0/w STRC(48)    r     1 RESULTS                    0-0-0/w STRC(128)   r     1 SHARED
     0-0-0/w STRC(128)   r     1 VLR_GDDL


   Procedure GMM$MCLS requires 1940 words for executable code.
   Procedure GMM$MCLS requires 54 words of local(AUTO) storage.

    No errors detected in file GMM$MCLS.:E05TSI    .
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:116  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:117  
          MINI XREF LISTING

ALLGONE
     12998**DCL     13767>>ASSIGN
ALLUSED
     12951**DCL     14191>>ASSIGN
ASDTX
     12788**DCL     13899>>IF      13905>>ASSIGN  13910>>ASSIGN  14161>>ASSIGN  14210>>IF      14322>>IF
B$CHECK_BASE.WORD1
     12813**DCL     14007>>IF      14201>>IF
B$CHECK_BASE.WORD2
     12814**DCL     14007>>IF      14201>>IF
BADDSPROT
     13233**DCL     14338>>ASSIGN
BADPP
     13139**DCL     13993>>ASSIGN
BADSEGID
     12904**DCL     14011>>ASSIGN  14229>>ASSIGN  14324>>ASSIGN
BADVECT0
     13327**DCL     13956>>ASSIGN  14027>>ASSIGN  14144>>ASSIGN
BADVECT1
     13374**DCL     13931>>ASSIGN  14137>>ASSIGN
BASE
     12737**DCL     14001<<ASSIGN  14039<<ASSIGN  14041<>CALL
BEST_SEGX
     12754**DCL     14155<<ASSIGN  14177<<ASSIGN  14188>>ASSIGN
BEST_SIZE
     12755**DCL     14156<<ASSIGN  14174>>IF      14176<<ASSIGN
BIGFREE
     13468**DCL     13841>>ASSIGN
CHECK_BASE.WORD1
     12810**DCL     14007>>IF      14201>>IF
CHECK_BASE.WORD2
     12811**DCL     14007>>IF      14201>>IF
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:118  
CHECK_FIT IN PROCEDURE GETSEGX
     14164**LABEL   14167--GOTO
CHKSZ
      1538**DCL     13675<<ASSIGN  13724<>CALL    13915<<ASSIGN  13918<>CALL    14345<<ASSIGN  14348<>CALL
CHKSZ.ERR
      1559**DCL     13728>>ASSIGN  13734>>IF      13735>>ASSIGN  14350>>ASSIGN
CHKSZ.ERR.ERR#
      1586**DCL     13726>>IF
CHKSZ.FLGS.CHK_ONLY
      1593**DCL     13916<<ASSIGN
CHKSZ.FLGS.NSHUF
      1612**DCL     13679<<ASSIGN  13693>>IF      13763>>IF
CHKSZ.FLGS.PARK
      1606**DCL     13680<<ASSIGN  14347<<ASSIGN
CHKSZ.FLGS.REQ_ALL
      1600**DCL     13678<<ASSIGN  13711>>IF      13726>>IF      14346<<ASSIGN
CHKSZ.SIZE
      1539**DCL     13723<<ASSIGN  13733>>ASSIGN  13917<<ASSIGN  13919>>ASSIGN
CU$
     12739**DCL     12663--IMP-PTR 13669<<ASSIGN  14021<<ASSIGN  14030<<ASSIGN  14036>>IF      14037>>ASSIGN
     14039>>ASSIGN  14108>>IF      14114>>IF
CURR_EXT_SZ
     12748**DCL     13706>>IF      13708>>ASSIGN  13740>>IF      13748>>ASSIGN  13749>>ASSIGN  13801>>ASSIGN
     13807>>ASSIGN  13839>>IF      13842>>ASSIGN  13860>>IF      13866>>ASSIGN  13867>>ASSIGN  14121<<ASSIGN
     14123<<ASSIGN  14160<<ASSIGN  14166<<ASSIGN  14166>>ASSIGN  14171>>IF      14174>>IF      14176>>ASSIGN
     14282<<ASSIGN  14286<<ASSIGN  14286>>ASSIGN
EXT_HI_SEG
     12749**DCL     14162<<ASSIGN  14164>>DOINDEX
FPT_CVM.NEXT
      2252**DCL     13961>>ASSIGN
FPT_CVM.PAGES
      2251**DCL     13962>>ASSIGN
FPT_CVM.TYPE
      2251**DCL     13954>>IF      13989>>IF      14019>>IF
FPT_CVM.USERID
      2251**DCL     14024>>IF      14024>>IF      14024>>IF      14032>>ASSIGN
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:119  
FPT_FDS.PAGES
      2162**DCL     13816>>ASSIGN
FPT_GDS.FREE
      2138**DCL     13678>>ASSIGN
FPT_GDS.IOBUF
      2139**DCL     13679>>ASSIGN
FPT_GDS.NEXT
      2139**DCL     13681>>ASSIGN
FPT_GDS.PAGES
      2138**DCL     13686>>ASSIGN
FPT_GDS.PARK
      2138**DCL     13680>>ASSIGN
FPT_PDS.READ
      2228**DCL     13936>>ASSIGN
FPT_PDS.WRITE
      2228**DCL     13937>>ASSIGN
FROMSEG.BASE
     12632**DCL     12632--REDEF   14015>>IF      14016>>ASSIGN  14017>>ASSIGN
FROMSEG.BASE$
     12632**DCL     14006>>IF
FROMSEG.PAGES
     12632**DCL     13991>>IF      14001>>ASSIGN
FROMX
     12738**DCL     14016<<ASSIGN  14017<<ASSIGN  14036>>IF      14037>>ASSIGN  14039>>ASSIGN
G$ASDT_USR$
     12824**DCL     13882>>IF      13899>>IF      13978>>IF      14074>>ASSIGN  14122>>IF      14123>>ASSIGN
     14165>>IF      14214>>IF      14270>>ASSIGN  14284>>DOWHILE 14286>>ASSIGN  14356>>ASSIGN
G$JIT.CVM_REAL
      2680**DCL     14071>>IF      14073<<ASSIGN  14240>>IF
G$JIT.ERRLOG
      2620**DCL      2623--REDEF
G$JIT.FIRST_SEG
      2456**DCL     13744<<ASSIGN  13883<<ASSIGN  14042<<ASSIGN  14081<<ASSIGN  14216>>IF      14264>>DOWHILE
     14285>>IF
G$JIT.JSUNIT
      2359**DCL      2360--REDEF
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:120  
G$JIT.MAXMEM
      2469**DCL     13917>>ASSIGN  13920>>ASSIGN
G$JIT.MCLS
      2358**DCL      2358--REDEF
G$JIT.NSPC
      2467**DCL     13770<<ASSIGN  13770>>ASSIGN  13854<<ASSIGN  13854>>ASSIGN
G$JIT.PCDS
      2466**DCL     13774<<ASSIGN  13774>>ASSIGN  13855<<ASSIGN  13855>>ASSIGN
G$JIT.PRIV.ACTIVE.EXMM
      2500**DCL     13943>>IF
G$JIT.PRIV.ACTIVE.SPCLMM
      2501**DCL     13943>>IF
G$JIT.TMRZ
      2627**DCL      2628--REDEF
G$JIT.USER_EXTIME
      2351**DCL      2352--REDEF
G$JIT.USER_MEMTIME
      2354**DCL      2354--REDEF
G$JIT.USER_SVTIME
      2353**DCL      2353--REDEF
G$JIT$
     12818**DCL      2290--IMP-PTR 13744>>ASSIGN  13770>>ASSIGN  13770>>ASSIGN  13774>>ASSIGN  13774>>ASSIGN
     13854>>ASSIGN  13854>>ASSIGN  13855>>ASSIGN  13855>>ASSIGN  13883>>ASSIGN  13917>>ASSIGN  13920>>ASSIGN
     13943>>IF      13943>>IF      14042>>ASSIGN  14071>>IF      14073>>ASSIGN  14081>>ASSIGN  14216>>IF
     14240>>IF      14264>>DOWHILE 14285>>IF
G$MHJIT.ASDT_MON
      2720**DCL     14021--ASSIGN
G$MHJIT.CU$
      9035**DCL     13669>>ASSIGN
G$MHJIT.CUN
      9035**DCL     13656>>IF
G$MHJIT.INTCON.HHJIT
      9169**DCL      9169--REDEF
G$MHJIT.INTCON.P$$
      9142**DCL      9142--REDEF
G$MHJIT.ISA_BIGFOOT.P$$
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:121  
      6087**DCL      6087--REDEF
G$MHJIT.ISA_DBINH.P$$
      7301**DCL      7301--REDEF
G$MHJIT.ISA_IDLE.P$$
      4182**DCL      4182--REDEF
G$MHJIT.ISA_LVL10.P$$
      7604**DCL      7604--REDEF
G$MHJIT.ISA_LVL11.P$$
      7907**DCL      7907--REDEF
G$MHJIT.ISA_LVL12.P$$
      8210**DCL      8210--REDEF
G$MHJIT.ISA_LVL5.P$$
      6390**DCL      6390--REDEF
G$MHJIT.ISA_OV.P$$
      5784**DCL      5784--REDEF
G$MHJIT.ISA_PFS.P$$
      5455**DCL      5455--REDEF
G$MHJIT.ISA_RT_CLOCK.P$$
      8817**DCL      8817--REDEF
G$MHJIT.ISA_SATYR_RCV.P$$
      6694**DCL      6694--REDEF
G$MHJIT.ISA_SATYR_TRN.P$$
      6998**DCL      6998--REDEF
G$MHJIT.ISA_SCHD.P$$
      8513**DCL      8513--REDEF
G$MHJIT.ISA_WDOG.P$$
      5563**DCL      5563--REDEF
G$MHJIT.TSA_DB.ISA.P$$
      4785**DCL      4785--REDEF
G$MHJIT.TSA_DB.P$$
      4656**DCL      4656--REDEF    4657--REDEF
G$MHJIT.TSA_HND.ISA.P$$
      9363**DCL      9363--REDEF
G$MHJIT.TSA_HND.P$$
      9234**DCL      9234--REDEF    9235--REDEF
G$MHJIT.TSA_MON.ISA.P$$
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:122  
      4397**DCL      4397--REDEF
G$MHJIT.TSA_MON.P$$
      4268**DCL      4268--REDEF    4269--REDEF
G$MHJIT.TSA_OV.ISA.P$$
      5173**DCL      5173--REDEF
G$MHJIT.TSA_OV.P$$
      5044**DCL      5044--REDEF    5045--REDEF
G$MHJIT$
     12820**DCL      2707--IMP-PTR 13656>>IF      13669>>ASSIGN  14021>>ASSIGN
G$ROS.AUTO_DS
      9588**DCL     14104>>ASSIGN
G$ROS.AUTO_DS$
      9587**DCL      9588--REDEF   13807>>ASSIGN
G$ROS.AUTO_T$
      9588**DCL      9588--REDEF   13807<<ASSIGN
G$ROS$
     12821**DCL      9578--IMP-PTR 13807>>ASSIGN  13807>>ASSIGN  14104>>ASSIGN
G$SEGDESC
     12723**DCL     14270<<ASSIGN
G$SEGDESC.BASE
     12727**DCL     13853>>IF
G$SEGDESC.V
     12727**DCL     13693>>IF      13827>>IF
G$SEGDESCA
      2268**DCL     14074<<ASSIGN  14270>>ASSIGN
G$SEGDESCA.BASE
      2272**DCL     14039>>ASSIGN  14356>>ASSIGN
G$SEGDESCA.SIZE
      2274**DCL     14036>>IF      14037>>ASSIGN  14123>>ASSIGN  14286>>ASSIGN
G$SEGDESCA.V
      2272**DCL     13882>>IF      13899>>IF      13978>>IF      14122>>IF      14165>>IF      14214>>IF
     14284>>DOWHILE
G$SFILE
     12685**DCL     14360<>CALL
G$SFILE.LIB_WDSZ_DATA
     12701**DCL     12702--REDEF
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:123  
G$SFILE.PGSZ_PROC
     12702**DCL     14334>>IF      14343>>IF      14357<<ASSIGN
G$SFILE.PP_SEG1
     12703**DCL     14356<<ASSIGN
G$U.FLG.CPIC
     12663**DCL     14114>>IF
G$U.FLG.DIC
     12663**DCL     14108>>IF
G$U.MISC
     12664**DCL     12664--REDEF
G$UHJIT.ASDT_MCL.UHJIT
     10472**DCL     14031>>ASSIGN
G$UHJIT.ASDT_MCL.UHJIT.BASE
     10474**DCL     13656>>IF
G$UHJIT.ASDT_MCL.WINDOW1
     10890**DCL     14031<<ASSIGN  14033<>CALL
G$UHJIT.ASDT_MCL.WINDOW1.BASE
     10892**DCL     14032<<ASSIGN
G$UHJIT.ASDT_USR
      9649**DCL     14030--ASSIGN
G$UHJIT.ISA_USR
     11059**DCL     11354--REDEF
G$UHJIT.ISA_USR.P$$
     11134**DCL     11134--REDEF
G$UHJIT.SHRD_SEG
     12590**DCL     14077>>IF      14240>>IF
G$UHJIT.TSA_CP.ISA.P$$
     12341**DCL     12341--REDEF
G$UHJIT.TSA_CP.P$$
     12212**DCL     12212--REDEF   12213--REDEF
G$UHJIT.TSA_DB.ISA.P$$
     11953**DCL     11953--REDEF
G$UHJIT.TSA_DB.P$$
     11824**DCL     11824--REDEF   11825--REDEF
G$UHJIT.TSA_RTT.P$$
     12587**DCL     12587--REDEF   12588--REDEF
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:124  
G$UHJIT.TSA_USR.ISA.P$$
     11543**DCL     11543--REDEF
G$UHJIT.TSA_USR.P$$
     11414**DCL     11414--REDEF   11415--REDEF
G$UHJIT$
     12819**DCL      9636--IMP-PTR 13656>>IF      14031>>ASSIGN  14031>>ASSIGN  14032>>ASSIGN  14033>>CALL
     14077>>IF      14240>>IF
G$USER.MISC
      9614**DCL      9614--REDEF
G$USER.UHJITPP
      9616**DCL     13656>>IF      14032>>ASSIGN
G$USER.US
      9614**DCL     14024>>IF
G$USRT$
     12822**DCL      9613--IMP-PTR 13656>>IF      14024>>IF      14032>>ASSIGN
G$WINDOW1$
     12823**DCL     14030>>ASSIGN  14033<>CALL
GETSEGX
     14097**PROC    13687--CALL    13817--CALL    13935--CALL    13975--CALL    14052--CALL
GET_EXT_SIZE
     14280**PROC    13800--CALL    13806--CALL    14253--CALL
GHH$ASD
     12831**DCL-ENT 14033--CALL
GMA$CHKSIZE
     12835**DCL-ENT 13724--CALL    13918--CALL    14348--CALL
GMA$CVM
     12838**DCL-ENT 14041--CALL
GMA$GET
     12832**DCL-ENT 13773--CALL    14355--CALL
GMA$GETIO
     12833**DCL-ENT 13765--CALL
GMA$PROT
     12837**DCL-ENT 13938--CALL
GMA$REL
     12834**DCL-ENT 13880--CALL
GMA$REL_ACCTMEM
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:125  
     12836**DCL-ENT 13851--CALL
GMA$SHARED
     12840**DCL-ENT 14360--CALL
GMA$UNSHARE
     12839**DCL-ENT 14078--CALL
GM_MEM_HI
     12825**DCL     13991>>IF
GM_SHUF_HI
     12826**DCL     13853>>IF
GOT_SEGX IN PROCEDURE GETSEGX
     14216**LABEL   14105--GOTO    14172--GOTO    14189--GOTO    14225--GOTO
G_MUAIS
     12827**DCL     14024>>IF
HANDSOFF
     13280**DCL     13829>>ASSIGN
HI
     12732**DCL     14152<<ASSIGN  14153<<ASSIGN  14159>>DOINDEX 14182>>IF      14184<<ASSIGN
I
     12733**DCL     13898<<DOINDEX 13899>>IF      13901>>IF      13905>>ASSIGN  13910>>ASSIGN  13936<<ASSIGN
     13938>>CALL    14164<<DOINDEX 14165>>IF      14263<<ASSIGN  14264>>DOWHILE 14266<<ASSIGN  14266>>ASSIGN
     14283<<ASSIGN  14284>>DOWHILE 14285>>IF      14285>>IF      14286>>ASSIGN  14287<<ASSIGN  14287>>ASSIGN
     14320<<DOINDEX 14321>>ASSIGN  14322>>IF
ILGLSEG
     13421**DCL     14218>>ASSIGN
INTERR
     13562**DCL     13658>>ASSIGN
IOEXT
     13186**DCL     13695>>ASSIGN
ITISSHARED
     13515**DCL     14243>>ASSIGN
L$
     12736**DCL     12628--IMP-PTR 13960<<ASSIGN  13991>>IF      14001>>ASSIGN  14006>>IF      14007>>IF
     14007>>IF      14015>>IF      14016>>ASSIGN  14017>>ASSIGN
LO
     12734**DCL     13937<<ASSIGN  13938>>CALL    14152<<ASSIGN  14153<<ASSIGN  14159>>DOINDEX 14184<<ASSIGN
MAX_EXT_SZ
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:126  
     12747**DCL     13706>>IF      13708>>ASSIGN  14120<<ASSIGN  14261<<ASSIGN  14265<<ASSIGN  14265>>ASSIGN
MAX_SEG_SZ
     12752**DCL     13742>>ASSIGN  13748>>ASSIGN  13749>>ASSIGN  13749>>ASSIGN  13780>>ASSIGN  13860>>IF
     13866>>ASSIGN  13867>>ASSIGN  13888>>ASSIGN  14118<<ASSIGN  14120>>ASSIGN  14258<<ASSIGN  14259<<ASSIGN
     14261>>ASSIGN  14265>>ASSIGN
MCL_CODE
     12731**DCL     13665<<ASSIGN  13667>>IF      13671>>DOCASE  13676>>IF      13804>>IF      13804>>IF
     14102>>IF      14102>>IF      14135>>IF      14135>>IF      14212>>IF      14238>>IF      14238>>IF
MMPRIV
     13092**DCL     13946>>ASSIGN
NEXT
     12735**DCL     13681<<ASSIGN  13961<<ASSIGN  14142>>IF      14150>>IF      14150>>IF      14182>>IF
NGSEGX IN PROCEDURE GETSEGX
     14229**LABEL   14203--GOTO
OKSHSEGX
     14324**LABEL   14322--GOTO
PAGES
     12740**DCL     14319<<ASSIGN
PARM
      1367**DCL        21--PROC    13654--ENTRY   14314--ENTRY   14317--ASSIGN
PARM.BND
      1427**DCL      1428--REDEF
PARM.DESC
      1429**DCL      1430--REDEF
PARM.ERR
      1393**DCL     13658<<ASSIGN  13695<<ASSIGN  13709<<ASSIGN  13728<<ASSIGN  13735<<ASSIGN  13767<<ASSIGN
     13829<<ASSIGN  13841<<ASSIGN  13921<<ASSIGN  13931<<ASSIGN  13946<<ASSIGN  13956<<ASSIGN  13966<<ASSIGN
     13980<<ASSIGN  13993<<ASSIGN  14011<<ASSIGN  14027<<ASSIGN  14137<<ASSIGN  14144<<ASSIGN  14191<<ASSIGN
     14218<<ASSIGN  14229<<ASSIGN  14243<<ASSIGN  14350<<ASSIGN
PARM.ERR.SEV
      1421**DCL     13716<<ASSIGN  13729<<ASSIGN
PARM.MCL.CODE
      1374**DCL      1374--REDEF   13665>>ASSIGN
PARM.PTRS
      1423**DCL      1424--REDEF    1426--REDEF    1426--REDEF    1426--REDEF
PARM.PTRS.PAR1$
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:127  
      1423**DCL     13666>>ASSIGN
PARM.PTRS.PAR2$
      1423**DCL     13668>>ASSIGN
PARM.PTRS.PAR3$
      1423**DCL     13960>>ASSIGN
PDSERR
     13931**LABEL   13927--GOTO
PGINUSE
     13609**DCL     13980>>ASSIGN
PICK_SEGX IN PROCEDURE GETSEGX
     14124**LABEL   14130--GOTO
PROT
     12808**DCL     13938<>CALL    13938<>CALL    14355<>CALL
R$
     12742**DCL      1456--IMP-PTR 12607--IMP-PTR 13668<<ASSIGN  13794>>IF      13797>>ASSIGN  13798>>ASSIGN
     13801>>ASSIGN  13926>>IF      13929>>IF      14049>>IF      14050>>IF      14130>>IF      14132>>IF
     14201>>IF      14201>>IF      14205>>IF      14206>>ASSIGN  14207>>ASSIGN  14317<<ASSIGN  14318>>ASSIGN
     14319>>ASSIGN  14324>>ASSIGN  14330>>ASSIGN  14334>>IF      14336>>IF      14338>>ASSIGN  14343>>IF
     14355>>CALL    14355>>CALL    14356>>ASSIGN  14357>>ASSIGN  14360>>CALL
RESULTS.BASE
     12611**DCL     12611--REDEF   13797<<ASSIGN  13798<<ASSIGN  14201--IF      14201--IF      14205>>IF
     14206>>ASSIGN  14207>>ASSIGN
RESULTS.BASE$
     12611**DCL     13929>>IF      14050>>IF      14132>>IF
RESULTS.PAGES
     12611**DCL     13801<<ASSIGN
RTRN
     14056**LABEL   13687--CALLALT 13817--CALLALT 13935--CALLALT 13975--CALLALT 14052--CALLALT
SEGFULL
     13045**DCL     13709>>ASSIGN
SEGHIX
     12767**DCL     14162>>ASSIGN
SEGI
     12743**DCL     13743<<ASSIGN  13748<<ASSIGN  13749>>ASSIGN  13751<<ASSIGN  13751>>ASSIGN  13765<>CALL
     13773<>CALL    13779<<ASSIGN  13779>>ASSIGN  13863<<ASSIGN  13866<<ASSIGN  13867>>ASSIGN  13868<<ASSIGN
     13868>>ASSIGN  13880<>CALL    13882>>IF      13883>>ASSIGN  13887<<ASSIGN  13887>>ASSIGN  14159<<DOINDEX
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:128  
     14161>>ASSIGN  14162>>ASSIGN  14166>>ASSIGN  14209<<DOINDEX 14210>>IF      14321<<ASSIGN  14328>>IF
SEGSIZE
     12857**DCL     13966>>ASSIGN  14330>>ASSIGN
SEGX
     12745**DCL     13743>>ASSIGN  13744>>ASSIGN  13751>>ASSIGN  13796>>IF      13797>>ASSIGN  13798>>ASSIGN
     13863>>ASSIGN  13868>>ASSIGN  13938<>CALL    13978>>IF      14041<>CALL    14042>>ASSIGN  14071>>IF
     14073>>ASSIGN  14074>>ASSIGN  14077>>IF      14078<>CALL    14081>>ASSIGN  14104<<ASSIGN  14110<<ASSIGN
     14116<<ASSIGN  14122>>IF      14123>>ASSIGN  14161<<ASSIGN  14164>>DOINDEX 14177>>ASSIGN  14188<<ASSIGN
     14189>>IF      14206<<ASSIGN  14207<<ASSIGN  14210>>IF      14214>>IF      14216>>IF      14240>>IF
     14240>>IF      14257>>IF      14263>>ASSIGN  14270>>ASSIGN  14283>>ASSIGN  14285>>IF      14318<<ASSIGN
     14322>>IF      14355<>CALL    14356>>ASSIGN
SEG_FULL
     13779**LABEL   13754--GOTO
SEG_FULL2
     13887**LABEL   13871--GOTO
SETR
     13794**LABEL   13768--GOTO    13843--GOTO    13893--GOTO    14043--GOTO
SET_BADSEGID
     14001**LABEL   14006--GOTO    14049--GOTO    14050--GOTO    14053--CALLALT
SET_SEG_DESC IN PROCEDURE GETSEGX
     14265**LABEL   14124--GOTO
SET_SEG_SZ IN PROCEDURE GETSEGX
     14116**LABEL   14111--GOTO
SHARED.ERR
      1484**DCL     14324<<ASSIGN  14330<<ASSIGN  14338<<ASSIGN
SHARED.PAGES
      1464**DCL     14319>>ASSIGN
SHARED.RP
      1518**DCL     14355<>CALL
SHARED.S$
      1526**DCL     14334>>IF      14343>>IF      14356>>ASSIGN  14357>>ASSIGN  14360>>CALL
SHARED.SEGX
      1460**DCL     14318>>ASSIGN
SHARED.WP
      1522**DCL     14336>>IF      14355<>CALL
SIZE
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:129  
     12757**DCL     13686<<ASSIGN  13691>>IF      13706>>IF      13708<<ASSIGN  13711>>IF      13723>>ASSIGN
     13733<<ASSIGN  13759>>DOWHILE 13760>>IF      13761>>ASSIGN  13777<<ASSIGN  13777>>ASSIGN  13816<<ASSIGN
     13821>>IF      13839>>IF      13842<<ASSIGN  13843>>IF      13851<>CALL    13854>>ASSIGN  13855>>ASSIGN
     13862>>ASSIGN  13876>>DOWHILE 13877>>IF      13878>>ASSIGN  13885<<ASSIGN  13885>>ASSIGN  13962<<ASSIGN
     13964>>IF      13973>>IF      14036>>IF      14037<<ASSIGN  14041<>CALL    14150>>IF      14171>>IF
     14328>>IF      14355<>CALL    14357>>ASSIGN
SZ
     12807**DCL     14166>>ASSIGN  14328>>IF
THIS_SIZE
     12751**DCL     13742<<ASSIGN  13749<<ASSIGN  13753>>IF      13760>>IF      13761<<ASSIGN  13765<>CALL
     13770>>ASSIGN  13773<>CALL    13774>>ASSIGN  13777>>ASSIGN  13780<<ASSIGN  13862<<ASSIGN  13867<<ASSIGN
     13870>>IF      13877>>IF      13878<<ASSIGN  13880<>CALL    13885>>ASSIGN  13888<<ASSIGN
TRY_AGAIN IN PROCEDURE GETSEGX
     14156**LABEL   14185--GOTO
UNCVM
     14069**PROC    13976--CALL    14053--CALL
V$
     12741**DCL      2131--IMP-PTR  2155--IMP-PTR  2177--IMP-PTR  2199--IMP-PTR  2221--IMP-PTR  2243--IMP-PTR
     12649--IMP-PTR 13666<<ASSIGN  13678>>ASSIGN  13679>>ASSIGN  13680>>ASSIGN  13681>>ASSIGN  13686>>ASSIGN
     13816>>ASSIGN  13896>>ASSIGN  13903>>ASSIGN  13903>>ASSIGN  13904>>IF      13905>>ASSIGN  13908>>ASSIGN
     13908>>ASSIGN  13909>>IF      13910>>ASSIGN  13919>>ASSIGN  13920>>ASSIGN  13936>>ASSIGN  13937>>ASSIGN
     13954>>IF      13961>>ASSIGN  13962>>ASSIGN  13989>>IF      14019>>IF      14024>>IF      14024>>IF
     14024>>IF      14032>>ASSIGN
VLR_GDDL
     12649**DCL     13896<<ASSIGN
VLR_GDDL.AUTHORIZED
     12653**DCL     13920<<ASSIGN
VLR_GDDL.NEXT_BIG
     12654**DCL     13909>>IF      13910<<ASSIGN
VLR_GDDL.NEXT_LITTLE
     12653**DCL     13904>>IF      13905<<ASSIGN
VLR_GDDL.NUM_BIG
     12655**DCL     13908<<ASSIGN  13908>>ASSIGN
VLR_GDDL.NUM_LITTLE
     12654**DCL     13903<<ASSIGN  13903>>ASSIGN
VLR_GDDL.REMAINING
PL6.E3A0      #001=GMM$MCLS File=GMM$MCLS.:E05TSI                                TUE 07/29/97 22:06 Page:130  
     12653**DCL     13919<<ASSIGN
