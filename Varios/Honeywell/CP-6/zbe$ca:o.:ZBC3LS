

CC.C03    File=zbe$ca:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ca.c,v 1.6 87/03/25 16:22:26 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*
        7         7              *  C O M P A C T   A S S E M B L Y   L A N G U A G E   G E N E R A T I O N
        8         8              *
        9         9              */
       10        10
       11        11
       12        12             #include <stdio:h>
       13        13             #include "types:h"
       14        14             #include "ca:h"
       15        15             #include "debug:h"
       16        16             #include "global:h"
       17        17             #include "lset:h"
       18        18             #include "files:h"
       19        19             #include "map:h"
       20        20             #include "alloc:h"
       21        21             #include "get:h"
       22        22             #include "em_pseu:h"
       23        23             #include "em_mes:h"
       24        24             #include "ca_put:h"
       25        25
       26        26
       27        27             /* This phase transforms the Intermediate Code of the global optimizer
       28        28              * to 'standard' compact assembly language, which will be processed
       29        29              * by the code generator.
       30        30              */
       31        31
       32        32
       33        33             extern line_p get_next_line();
       34        34             short  dlength;
       35        35             dblock_p *dmap;
       36        36
CC.C03    File=zbe$ca:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=2  
       37        37             char **dnames, **pnames;  /* Dynamically allocated arrays of strings.
       38        38                     * pnames[i] contains a pointer to the name
       39        39                     * of the procedure  with proc_id i.
       40        40                     */
       41        41
       42        42
       43        43
       44        44             STATIC line_p get_ca_lines(p_out)
       45        45              proc_p *p_out;
       46        46             {
       47        47    1         /* Read lines of EM text and link them.
       48        48    1          * Register messages are outputted immediately after the PRO.
       49        49    1          */
       50        50    1
       51        51    1         line_p head, *pp, l;
       52        52    1         line_p headm, *mp;
       53        53    1         arg_p a;
       54        54    1
       55        55    1         pp = &head;
       56        56    1         mp = &headm;
       57        57    1         headm = (line_p) 0;
       58        58    1         while (TRUE) {
       59        59    2          l = get_next_line(p_out);
       60        60    2            if (l == (line_p) 0) break;
       61        61    2            assert (l != (line_p) 0);
       62        62    2            if (INSTR(l) == ps_end && INSTR(head) != ps_pro) {
       63        63    3               /* Delete end pseudo after data-unit */
       64        64    3        /* oldline(l);  - temporary delete this  */
       65        65    3               break;
       66        66    3            }
       67        67    2            if (INSTR(l) == ps_mes && l->l_a.la_arg->a_a.a_offset == ms_reg) {
       68        68    3               /* l is a register message */
       69        69    3               if (l->l_a.la_arg->a_next == (arg_p) 0) {
       70        70    4                  /* register message without arguments */
       71        71    4        /* oldline(l);      - temporary delete this out */
       72        72    4               } else {
       73        73    4                  *mp = l;
CC.C03    File=zbe$ca:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=3  
       74        74    4                  mp = &l->l_next;
       75        75    4           l->l_next = (line_p) 0;
       76        76    4               }
       77        77    3            } else {
       78        78    3               *pp = l;
       79        79    3               pp = &l->l_next;
       80        80    3           l->l_next = (line_p) 0;
       81        81    3            }
       82        82    2            if (INSTR(l) == ps_end) {
       83        83    3               break;
       84        84    3            }
       85        85    2         }
       86        86    1         *pp = (line_p) 0;
       87        87    1         if (head != (line_p) 0 && INSTR(head) == ps_pro) {
       88        88    2            /* append register message without arguments to list */
       89        89    2            l = newline(OPLIST);
       90        90    2            l->l_instr = ps_mes;
       91        91    2            a = ARG(l) = newarg(ARGOFF);
       92        92    2           a->a_next = (arg_p) 0;  /*  set next to null.. */
       93        93    2            a->a_a.a_offset = ms_reg;
       94        94    2            *mp = l;
       95        95    2            l->l_next = head->l_next;
       96        96    2            head->l_next = headm;
       97        97    2         } else {
       98        98    2            assert(headm == (line_p) 0);
       99        99    2         }
      100       100    1         return head;
      101       101    1        }
      102       102
      103       103             STATIC int makedmap(dbl)
      104       104              dblock_p dbl;
      105       105             {
      106       106    1         /* construct the dmap table */
      107       107    1
      108       108    1         dblock_p d;
      109       109    1         int cnt;
      110       110    1
CC.C03    File=zbe$ca:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=4  
      111       111    1         /* determine the length of the table */
      112       112    1
      113       113    1         cnt = 0;
      114       114    1         for (d = dbl; d != (dblock_p) 0; d = d->d_next) cnt++;
      115       115    1         dmap = (dblock_p *) newmap(cnt);
      116       116    1         for (d = dbl; d != (dblock_p) 0; d = d->d_next) {
      117       117    2            assert(d->d_id) <= cnt;
      118       118    2            dmap[d->d_id] = d;
      119       119    2         }
      120       120    1         return cnt;
      121       121    1        }
      122       122
      123       123
      124       124
      125       125             STATIC getdnames(dumpd)
      126       126              FILE *dumpd;
      127       127             {
      128       128    1         /* Read the names of the datalabels from
      129       129    1          * the dump file.
      130       130    1          */
      131       131    1
      132       132    1         char str[IDL+1];
      133       133    1         int id;
      134       134    1
      135       135    1         dnames = (char **) newmap(dlength);
      136       136    1         for (;;) {
      137       137    2            if (fscanf(dumpd,"%d %s",&id,str) == EOF) return;
      138       138    2            assert(id <= dlength);
      139       139    2            dnames[id] = (char *) newcore(strlen(str)+1);
      140       140    2            strcpy(dnames[id], str);
      141       141    2         }
      142       142    1        }
      143       143
      144       144             STATIC getpnames(dumpp)
      145       145              FILE *dumpp;
      146       146             {
      147       147    1         /* Read the names of the procedures from
CC.C03    File=zbe$ca:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=5  
      148       148    1          * the dump file.
      149       149    1          */
      150       150    1
      151       151    1         char str[IDL+1];
      152       152    1         int id;
      153       153    1
      154       154    1         pnames = (char **) newmap(plength);
      155       155    1         for (;;) {
      156       156    2            if (fscanf(dumpp,"%d %s",&id,str) == EOF) return;
      157       157    2            assert(id <= plength);
      158       158    2            pnames[id] = (char *) newcore(strlen(str)+1);
      159       159    2            strcpy(pnames[id], str);
      160       160    2         }
      161       161    1        }
      162       162
      163       163
      164       164             STATIC bool name_exists(name,endp,endd)
      165       165              char *name;
      166       166              proc_p endp;
      167       167              dblock_p endd;
      168       168             {
      169       169    1         /* Search the proctable (from fproc to endp)
      170       170    1          * and the data block table (from fdblock to endd)
      171       171    1          * to see if the name is already in use.
      172       172    1          */
      173       173    1
      174       174    1         proc_p p;
      175       175    1         dblock_p d;
      176       176    1
      177       177    1         for (p = fproc; p != endp; p = p->p_next) {
      178       178    2          if (p->p_id != 0) {
      179       179    3            if (strcmp(name,pnames[p->p_id]) == 0) return TRUE;  }
      180       180    2         }
      181       181    1         for (d = fdblock; d != endd; d = d->d_next) {
      182       182    2            if (strcmp(name,dnames[d->d_id]) == 0) return TRUE;
      183       183    2         }
      184       184    1         return FALSE;
CC.C03    File=zbe$ca:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=6  
      185       185    1        }
      186       186
      187       187
      188       188
      189       189             static int nn = 0;
      190       190
      191       191             STATIC new_name(s)
      192       192              char *s;
      193       193             {
      194       194    1         s[0] = '_';
      195       195    1         s[1] = 'I';
      196       196    1         s[2] = 'I';
      197       197    1         sprintf(&s[3],"%d",nn);
      198       198    1         nn++;
      199       199    1        }
      200       200
      201       201
      202       202
      203       203             STATIC uniq_names()
      204       204             {
      205       205    1         /* The names of all internal procedures and data blocks
      206       206    1          * are made different. As the optimizer combines several
      207       207    1          * modules into one, there may be name conflicts between
      208       208    1          * procedures or data blocks that were internal in
      209       209    1          * different source modules.
      210       210    1          */
      211       211    1
      212       212    1         proc_p p;
      213       213    1         dblock_p d;
      214       214    1
      215       215    1         for (p = fproc; p != (proc_p) 0; p = p->p_next) {
      216       216    2            if (!(p->p_flags1 & PF_EXTERNAL) &&
      217       217    2                name_exists(pnames[p->p_id],p,fdblock)) {
      218       218    3               new_name(pnames[p->p_id]);
      219       219    3            }
      220       220    2         }
      221       221    1         for (d = fdblock; d != (dblock_p) 0; d = d->d_next) {
CC.C03    File=zbe$ca:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=7  
      222       222    2            if (!(d->d_flags1 & DF_EXTERNAL) &&
      223       223    2                name_exists(dnames[d->d_id],(proc_p) 0,d) ) {
      224       224    3               new_name(dnames[d->d_id]);
      225       225    3            }
      226       226    2         }
      227       227    1        }
      228       228             camain(argc,argv)
      229       229              int argc;
"zbe$ca:c.:ZBC3TSI", line 229: (warning) identifier "argc" is not used
      230       230              char *argv[];
      231       231             {
      232       232    1         /* CA does not output proctable etc. files. Instead, its
      233       233    1          * pname2 and dname2 arguments contain the names of the
      234       234    1          * dump files created by IC.
      235       235    1          */
      236       236    1         FILE  *f2;    /* The EM  output. */
      237       237    1         extern FILE *zbe_ddump, *zbe_pdump ;
      238       238    1         FILE *df, *pf;    /* The dump files */
      239       239    1         line_p lnp;
      240       240    1        line_table_p next_lt;
      241       241    1        int first_flag;
      242       242    1
      243       243    1         fproc = first_proc; /* proc table */
      244       244    1         next_proc = first_proc; /* set for get_next_line */
      245       245    1         curproc = first_proc; /* set current to the very first proc. */
      246       246    1         dlength = makedmap(fdblock); /* allocate dmap table */
      247       247    1         df = zbe_ddump;
      248       248    1         getdnames(df);
      249       249    1         fclose(df);
      250       250    1         pf = zbe_pdump;
      251       251    1         getpnames(pf);
      252       252    1         fclose(pf);
      253       253    1         uniq_names();
      254       254    1         f2 = openfile(lname2,"wb");
      255       255    1         next_line_ptr = first_line_table->first_line;
      256       256    1         next_lt = first_line_table;
      257       257    1         cputmagic(f2); /* write magic number */
CC.C03    File=zbe$ca:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=8  
      258       258    1         /* link all the instructions in the procedures to gether. */
      259       259    1         ca_link_lines();
      260       260    1         first_flag = 1;
      261       261    1         while ((lnp = get_ca_lines(&curproc)) != (line_p) 0) {
      262       262    2          if(curproc->p_mes16 != (line_p) 0 && first_flag == 0) {
      263       263    3            curproc->p_mes16->l_next = lnp;
      264       264    3            lnp = curproc->p_mes16; }
      265       265    2          first_flag = 0;
      266       266    2            cputlines(lnp,f2);
      267       267    2          if (next_lt->lt_next != (line_table_p) 0) {
      268       268    3            next_lt = next_lt->lt_next;
      269       269    3            next_line_ptr = next_lt->first_line; }
      270       270    2         }
      271       271    1         fclose(f2);
      272       272    1           return ;
      273       273    1        }
      274       274             /*i*
      275       275                   name: ca_link_lines
      276       276                   purpose: This routine walks all the blocks and puts the line
      277       277                   together for final output processing in the ca routine.
      278       278             */
      279       279             ca_link_lines() {
      280       280    1
      281       281    1        bblock_p b, b1;
      282       282    1        line_p l, last_l, first_l;
      283       283    1        proc_p p1;
      284       284    1        line_table_p next_lt;
      285       285    1
      286       286    1         next_lt = first_line_table->lt_next;
      287       287    1        next_proc:
      288       288    1
      289       289    1         if (next_lt == (line_table_p) 0 ) return; /* no more return. */
      290       290    1         p1 = next_lt->assoc_proc;
      291       291    1         b = p1->p_start;
      292       292    1         if (b == (bblock_p) 0) {
      293       293    2           next_lt = next_lt->lt_next;
      294       294    2           goto next_proc; }
CC.C03    File=zbe$ca:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=9  
      295       295    1         first_l = (line_p) 0;
      296       296    1         last_l = (line_p) 0;
      297       297    1         for (b1 = b; b1 != (bblock_p) 0; b1 = b1->b_next) {
      298       298    2           first_l = b1->b_start;
      299       299    2           if (last_l != (line_p) 0 ) {
      300       300    3              last_l->l_next = first_l; }
      301       301    2           for ( l=first_l; l != (line_p) 0; l=l->l_next) {
      302       302    3              last_l = l; }  }
      303       303    1
      304       304    1           next_lt = next_lt->lt_next;
      305       305    1           goto next_proc;
      306       306    1        } /* end of the ca_link_lines function. */
      307       307
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$ca:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$files:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$get:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_mes:h.:ZBC3TOU. is referenced
   zbe$ca_put:h.:ZBC3TOU. is referenced

1 warning was detected in the file zbe$ca:c.:ZBC3TSI
