/*M* FILAGE - determines accounts' ages */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* THI=1,PLM=3 */
FILAGE: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B_ERRORS_C;
%INCLUDE B$JIT_C;
%INCLUDE FM$FIT;
%INCLUDE XUD_UTS_M;
%XUD$UTS_ENTRIES;
%FPT_OPEN(FPTN = FPT_OPEN,
        ASN = FILE,
        TEST = YES,
        FUN = IN,
        NXTF = YES,
        SN = VLP_SN,
        FPARAM=FIT,
        DCB = M$SI);
%VLP_NAME(NAME="%BINASC(0)");
DCL FIT(0:1023) UBIN WORD STATIC;
DCL CODE$ PTR;
DCL MODIFIED_AGE SBIN;                  /* in seconds                         */
DCL ACCESSED_AGE SBIN;                  /* in seconds                         */
DCL NEWEST_MODIFIED_AGE SBIN;           /* in seconds                         */
DCL NEWEST_ACCESSED_AGE SBIN;           /* in seconds                         */
%CODE04(BASED="BASED(CODE$)");
DCL NUM_FILES_ACCT SBIN;
DCL NUM_FILES_SYS SBIN;
DCL CODE SBIN;
DCL ERR_ACCT CHAR(8);
DCL M$SI DCB;
DCL M$LO DCB;
DCL BREAK_COUNT SBIN STATIC SYMDEF INIT(0);
%B$JIT0(STCLASS="BASED(B$JIT$)");
      2 * BIT(1);
%FPT_INT(FPTN = FPT_INT,STCLASS = CONSTANT,
        UENTRY = FILAGE_BRK);
DCL XSF$LOCCODP ENTRY(2) ALTRET;
DCL FILAGE_BRK ENTRY ASYNC;
DCL 1 ACCT_MSG STATIC,
      2 * CHAR(0) INIT( '*** ' ),
      2 ACCT CHAR(8),
      2 * CHAR(0) INIT( '  ' ),
      2 NUM_FILES CHAR(6),
      2 * CHAR(0) INIT( ' files' ),
      2 * CHAR(0) INIT ( ' ***' );
DCL 1 ACCT_AVG_MSG STATIC,
      2 * CHAR(0) INIT( ' modified ' ),
      2 AVG_MOD_DELTA_TEXT_LOW CHAR(11),
      2 * CHAR(0) INIT('- '),
      2 AVG_MOD_DELTA_TEXT CHAR(10),
      2 * CHAR(0) INIT( '     accessed ' ),
      2 AVG_ACC_DELTA_TEXT_LOW CHAR(11),
      2 * CHAR(0) INIT('- '),
      2 AVG_ACC_DELTA_TEXT CHAR(10);
DCL 1 ACCT_RPT_MSG STATIC,
      2 * CHAR(0) INIT( ' ' ),
      2 AVG_MOD_DELTA_TEXT_LOW CHAR(11),
      2 * CHAR(0) INIT(' '),
      2 AVG_MOD_DELTA_TEXT CHAR(10),
      2 * CHAR(0) INIT(' '),
      2 NUM_FILES CHAR(6) INIT(' '),
      2 * CHAR(0) INIT(' '),
      2 ACCT CHAR(8) INIT(' '),
      2 * CHAR(0) INIT(' '),
      2 AVG_ACC_DELTA_TEXT_LOW CHAR(11),
      2 * CHAR(0) INIT(' '),
      2 AVG_ACC_DELTA_TEXT CHAR(10);
DCL 1 ACCT_RPT_HDR_MSG STATIC,
      2 * CHAR(0) INIT(' '),
      2 * CHAR(11) INIT('most recent'),
      2 * CHAR(0) INIT(' '),
      2 * CHAR(10) INIT('modified'),
      2 * CHAR(0) INIT(' '),
      2 * CHAR(6) INIT(' files'),
      2 * CHAR(0) INIT(' '),
      2 * CHAR(8) INIT('account'),
      2 * CHAR(0) INIT(' '),
      2 * CHAR(11) INIT('most recent'),
      2 * CHAR(0) INIT(' '),
      2 * CHAR(10) INIT('accessed');
DCL BLANK CHAR(1) INIT(' ') CONSTANT;
DCL STARS CHAR(20) CONSTANT INIT('********************');
%FPT_WRITE(FPTN=WRT_BLANK,
   DCB=M$LO,
   BUF=BLANK );
%FPT_WRITE(FPTN=WRT_ACCT_AVG_MSG,
   BUF=ACCT_AVG_MSG,
   DCB=M$LO);
%FPT_WRITE(FPTN=WRT_ACCT_RPT_MSG,
   BUF=ACCT_RPT_MSG,
   DCB=M$LO);
%FPT_WRITE(FPTN=WRT_ACCT_RPT_HDR_MSG,
   BUF=ACCT_RPT_HDR_MSG,
   DCB=M$LO);
%FPT_WRITE(FPTN=WRT_ACCT_MSG,
   DCB=M$LO,
   BUF=ACCT_MSG);
DCL 1 RANGE_MSG STATIC,
      2 TEXT_DELTA_MOD CHAR(8),
      2 * CHAR(0) INIT( ' ' ),
      2 PERCENT_MOD CHAR(3),
      2 * CHAR(0) INIT('% '),
      2 PLOT_PT_MOD CHAR(20) CALIGNED INIT(' '),
      2 * CHAR(0) INIT( ' | ' ),
      2 TEXT_DELTA_ACC CHAR(8),
      2 * CHAR(0) INIT( ' ' ),
      2 PERCENT_ACC CHAR(3),
      2 * CHAR(0) INIT('% '),
      2 PLOT_PT_ACC CHAR(20) CALIGNED INIT(' ');
%FPT_WRITE(FPTN=WRT_RANGE_MSG,
   DCB=M$LO,
   BUF=RANGE_MSG);
DCL B$JIT$ PTR SYMREF;
%FPT_ERRMSG(FPTN = FPT_ERRMSG,STCLASS = STATIC,
        CODE = ERRCODE,
        BUF = ERRBUF,
        RESULTS = VLR_ERRMSG,
        DCB = M$SI,
        OUTDCB1 = M$LO);
DCL NOW_UTS UBIN STATIC;
%FPT_TIME(FPTN=NOW_TIME,
   SOURCE=CLOCK,
        TSTAMP=NOW_UTS);
DCL 1 ERRCODE STATIC,
      2 FCG BIT(12) UNAL,
      2 MID BIT(6) UNAL,
      2 MON BIT(1) UNAL,
      2 CODE UBIN(14) UNAL,
      2 SEV UBIN(3) UNAL;
DCL ERRBUF CHAR(120) STATIC;
%VLR_ERRMSG(FPTN = VLR_ERRMSG,STCLASS = STATIC);
%VLP_SN(FPTN = VLP_SN,STCLASS = STATIC,
        N = 1);
%B$TCB(STCLASS="BASED(B$TCB$)");
%B$ALT;
DCL B$TCB$ PTR SYMREF;
%EQU SECS_IN_HOUR=3600;
%EQU SECS_IN_HALF_HOUR=1800;
%EQU MAX_SBIN=BITBIN('377777777777'O);
DCL 1 ACCT_INFO (0:2000),               /* info per each account              */
      2 NAME CHAR(8),                   /* account's name                     */
      2 AVG_MODIFY SBIN,                /* average modify age                 */
      2 AVG_ACCESS SBIN,                /* average access age                 */
      2 NUM_FILES SBIN,                 /* number of files                    */
      2 NEW_MODIFY SBIN,                /* newest modify age                  */
      2 NEW_ACCESS SBIN,                /* newest access age                  */
      2 * SBIN;
DCL 1 TEMP_ACCT_INFO, 2 * (0:7) SBIN;
DCL NUM_ACCOUNTS SBIN;
DCL AVG_MOD UBIN;
DCL TOTAL_MODIFIED_HRS UBIN;            /* per account                        */
DCL AVG_ACC UBIN;
DCL TOTAL_ACCESSED_HRS UBIN;            /* per account                        */
%EQU MAX_UTS_DELTA=16;
DCL MAX_SECS_PER_RANGE(0:%MAX_UTS_DELTA) SBIN CONSTANT INIT(
/*     1         2          4          8         16  */
     3600,   7200, 14400, 28800, 57600, /* hours                              */
    86400,   172800,    345600,         /* days                               */
   604800,  1209600,                    /* weeks                              */
  2592000,  5184000,  10368000,         /* months                             */
31536000, 63072000, 126144000, %MAX_SBIN); /* years                           */
DCL RANGE_IN_TEXT(0:%MAX_UTS_DELTA) CHAR(8) CONSTANT INIT(
   '1 hour', '2 hours', '4 hours', '8 hours', '16 hours',
   '1 day', '2 days', '4 days',
   '1 week', '2 weeks',
   '1 month', '2 months', '4 months',
   '1 year', '2 years', '4 years', 'more' );
DCL MODIFIED_SYS_FILES(0:%MAX_UTS_DELTA) SBIN; /* per range                   */
DCL ACCESSED_SYS_FILES(0:%MAX_UTS_DELTA) SBIN; /* per range                   */
DCL MODIFIED_ACCT_FILES(0:%MAX_UTS_DELTA) SBIN; /* per range                  */
DCL ACCESSED_ACCT_FILES(0:%MAX_UTS_DELTA) SBIN; /* per range                  */
DCL I SBIN;
DCL PERCENT SBIN;
DCL M$SI$ PTR;
%F$DCB(BASED="BASED(M$SI$)");
DCL CRNT_ACCT CHAR(8);
DCL NXTA BIT(1);
%EJECT;
   M$SI$ = DCBADDR(DCBNUM(M$SI));
   NUM_FILES_SYS = 0;
   NUM_FILES_ACCT = 0;
   CALL M$TIME( NOW_TIME );
   NUM_ACCOUNTS = 0;
   DO I=0 TO %MAX_UTS_DELTA;
      MODIFIED_SYS_FILES(I) = 0;
      ACCESSED_SYS_FILES(I) = 0;
      MODIFIED_ACCT_FILES(I) = 0;
      ACCESSED_ACCT_FILES(I) = 0;
      END;
   ERR_ACCT = BINASC(0);                /* An impossible account              */
   CRNT_ACCT = BINASC(0);
   TOTAL_MODIFIED_HRS = 0;
   TOTAL_ACCESSED_HRS = 0;
   NEWEST_MODIFIED_AGE = %MAX_SBIN;
   NEWEST_ACCESSED_AGE = %MAX_SBIN;
   VLP_NAME.L# = 1;
   VLP_NAME.NAME# = BINASC(0);
   CALL M$INT(FPT_INT);
   NXTA = (F$DCB.ACCT# = ' ');          /* going through all accounts ?       */
   FPT_OPEN.V.OPER.NXTA# = NXTA;
/*
   go through every file in account (system if NXTA is set)
*/
   DO WHILE('1'B);
      CALL M$OPEN(FPT_OPEN)
       WHENRETURN DO;
         FPT_OPEN.NAME_ = VECTOR(NIL);
         FPT_OPEN.V.OPER.NXTA# = %NO#;
         NUM_FILES_SYS = NUM_FILES_SYS + 1;
         NUM_FILES_ACCT = NUM_FILES_ACCT + 1;
         CODE$ = ADDR(FIT);
         CALL XSF$LOCCODP( CODE$, 04 )
          WHENRETURN DO;
            CALL XUD$UTS_DIFF_SEC (MODIFIED_AGE, NOW_UTS, CODE04.MODIFY.TIME);
            NEWEST_MODIFIED_AGE = MINIMUM (NEWEST_MODIFIED_AGE, MODIFIED_AGE);
            CALL XUD$UTS_DIFF_SEC (ACCESSED_AGE, NOW_UTS, CODE04.ACCESS.TIME);
            NEWEST_ACCESSED_AGE = MINIMUM (NEWEST_ACCESSED_AGE, ACCESSED_AGE);
            TOTAL_MODIFIED_HRS = TOTAL_MODIFIED_HRS + (MODIFIED_AGE + %SECS_IN_HALF_HOUR) / %SECS_IN_HOUR;
            TOTAL_ACCESSED_HRS = TOTAL_ACCESSED_HRS + (ACCESSED_AGE + %SECS_IN_HALF_HOUR) / %SECS_IN_HOUR;
            CALL SECS_TO_RANGE (MODIFIED_AGE, I);
            MODIFIED_SYS_FILES(I) = MODIFIED_SYS_FILES(I) + 1;
            MODIFIED_ACCT_FILES(I) = MODIFIED_ACCT_FILES(I) + 1;
            CALL SECS_TO_RANGE (ACCESSED_AGE, I);
            ACCESSED_SYS_FILES(I) = ACCESSED_SYS_FILES(I) + 1;
            ACCESSED_ACCT_FILES(I) = ACCESSED_ACCT_FILES(I) + 1;
            CRNT_ACCT = F$DCB.ACCT#;
            END;
         END;
       WHENALTRETURN DO;
         CODE = B$TCB.ALT$->B$ALT.ERR.CODE;
         IF CODE=%E$ADEOF OR BREAK_COUNT > 4
          THEN DO;
            CALL CALC_FOR_SYSTEM;
            CALL SORT_BY_ACC;
            CALL REPORT_BY_ACCOUNT;
            CALL SORT_BY_MOD;
            CALL REPORT_BY_ACCOUNT;
            CALL M$EXIT;
            END;
          ELSE
            IF CODE=%E$NOFILE OR CODE=%E$NOKEY OR CODE=%E$FDEOF
              OR (VLP_SN.SN#(0)=' '
              AND (CODE=%E$SETDOWN OR CODE=%E$XCLSET))
             THEN DO;
               CALL CALC_FOR_ACCOUNT;
               IF NOT NXTA
                THEN CALL M$EXIT;
                ELSE DO;
                  FPT_OPEN.NAME_ = VECTOR(VLP_NAME);
                  FPT_OPEN.V.OPER.NXTA# = %YES#;
                  END;
               END;
             ELSE DO;
               IF ERR_ACCT = F$DCB.ACCT#
                 AND ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR
                THEN CALL M$EXIT;
               ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
               ERR_ACCT = F$DCB.ACCT#;
               CALL M$ERRMSG( FPT_ERRMSG );
               END;
         END;
      END;
%EJECT;
CALC_FOR_ACCOUNT: PROC;
 
   IF NUM_FILES_ACCT = 0
    THEN DO;
      ACCT_MSG.ACCT = F$DCB.ACCT#;
      ACCT_MSG.NUM_FILES = '   no';
      ACCT_INFO.AVG_MODIFY(NUM_ACCOUNTS) = 0;
      ACCT_INFO.AVG_ACCESS(NUM_ACCOUNTS) = 0;
      ACCT_INFO.NUM_FILES(NUM_ACCOUNTS) = 0;
      END;
    ELSE DO;
      ACCT_MSG.ACCT = CRNT_ACCT;
      CALL BINCHAR( ACCT_MSG.NUM_FILES, NUM_FILES_ACCT );
      AVG_ACC = (TOTAL_ACCESSED_HRS + (NUM_FILES_ACCT/2)) / NUM_FILES_ACCT * %SECS_IN_HOUR;
      AVG_MOD = (TOTAL_MODIFIED_HRS + (NUM_FILES_ACCT/2)) / NUM_FILES_ACCT * %SECS_IN_HOUR;
      ACCT_INFO.AVG_MODIFY(NUM_ACCOUNTS) = AVG_MOD;
      ACCT_INFO.AVG_ACCESS(NUM_ACCOUNTS) = AVG_ACC;
      ACCT_INFO.NUM_FILES(NUM_ACCOUNTS) = NUM_FILES_ACCT;
      END;
   ACCT_INFO.NEW_MODIFY(NUM_ACCOUNTS) = NEWEST_MODIFIED_AGE;
   ACCT_INFO.NEW_ACCESS(NUM_ACCOUNTS) = NEWEST_ACCESSED_AGE;
   ACCT_INFO.NAME(NUM_ACCOUNTS) = ACCT_MSG.ACCT;
   NUM_ACCOUNTS = NUM_ACCOUNTS + 1;
   CALL M$WRITE( WRT_BLANK );
   CALL M$WRITE( WRT_ACCT_MSG );
   IF NUM_FILES_ACCT = 0 THEN RETURN;
   CALL SECS_TO_RANGE( AVG_MOD, I );
   ACCT_AVG_MSG.AVG_MOD_DELTA_TEXT = RANGE_IN_TEXT(I);
   IF I <= 0
    THEN ACCT_AVG_MSG.AVG_MOD_DELTA_TEXT_LOW = 'present';
    ELSE ACCT_AVG_MSG.AVG_MOD_DELTA_TEXT_LOW = RANGE_IN_TEXT(I-1);
   CALL SECS_TO_RANGE( AVG_ACC, I );
   ACCT_AVG_MSG.AVG_ACC_DELTA_TEXT = RANGE_IN_TEXT(I);
   IF I <= 0
    THEN ACCT_AVG_MSG.AVG_ACC_DELTA_TEXT_LOW = 'present';
    ELSE ACCT_AVG_MSG.AVG_ACC_DELTA_TEXT_LOW = RANGE_IN_TEXT(I-1);
   CALL M$WRITE( WRT_ACCT_AVG_MSG );
   DO I=0 TO %MAX_UTS_DELTA;
      IF MODIFIED_ACCT_FILES(I) > 0 OR ACCESSED_ACCT_FILES(I) > 0
       THEN DO;
         RANGE_MSG.TEXT_DELTA_MOD = RANGE_IN_TEXT(I);
         PERCENT = ((MODIFIED_ACCT_FILES(I) * 1000 / NUM_FILES_ACCT) + 5) / 10;
         CALL BINCHAR( RANGE_MSG.PERCENT_MOD, PERCENT );
         RANGE_MSG.PLOT_PT_MOD = SUBSTR (STARS,0,(PERCENT+4)/5);
         RANGE_MSG.TEXT_DELTA_ACC = RANGE_IN_TEXT(I);
         PERCENT = ((ACCESSED_ACCT_FILES(I) * 1000 / NUM_FILES_ACCT) + 5) / 10;
         CALL BINCHAR( RANGE_MSG.PERCENT_ACC, PERCENT );
         RANGE_MSG.PLOT_PT_ACC = SUBSTR (STARS,0,(PERCENT+4)/5);
         CALL M$WRITE( WRT_RANGE_MSG );
         MODIFIED_ACCT_FILES(I) = 0;
         ACCESSED_ACCT_FILES(I) = 0;
         END;
      END;
   NUM_FILES_ACCT = 0;
   NEWEST_MODIFIED_AGE = %MAX_SBIN;
   NEWEST_ACCESSED_AGE = %MAX_SBIN;
   TOTAL_MODIFIED_HRS = 0;
   TOTAL_ACCESSED_HRS = 0;
 
END CALC_FOR_ACCOUNT;
 
CALC_FOR_SYSTEM: PROC;
 
   CALL BINCHAR( ACCT_MSG.NUM_FILES, NUM_FILES_SYS );
   ACCT_MSG.ACCT = '* all *';
   CALL M$WRITE( WRT_BLANK );
   CALL M$WRITE( WRT_ACCT_MSG );
   IF NUM_FILES_SYS = 0 THEN RETURN;
   DO I=0 TO %MAX_UTS_DELTA;
      RANGE_MSG.TEXT_DELTA_MOD = RANGE_IN_TEXT(I);
      PERCENT = ((MODIFIED_SYS_FILES(I) * 1000 / NUM_FILES_SYS) + 5) / 10;
      CALL BINCHAR( RANGE_MSG.PERCENT_MOD, PERCENT );
      RANGE_MSG.PLOT_PT_MOD = SUBSTR(STARS,0,(PERCENT+4)/5);
      RANGE_MSG.TEXT_DELTA_ACC = RANGE_IN_TEXT(I);
      PERCENT = ((ACCESSED_SYS_FILES(I) * 1000 / NUM_FILES_SYS) + 5) / 10;
      CALL BINCHAR( RANGE_MSG.PERCENT_ACC, PERCENT );
      RANGE_MSG.PLOT_PT_ACC = SUBSTR(STARS,0,(PERCENT+4)/5);
      CALL M$WRITE( WRT_RANGE_MSG );
      END;
 
END CALC_FOR_SYSTEM;
 
REPORT_BY_ACCOUNT: PROC;
 
DCL DIX SBIN;
 
   CALL M$WRITE( WRT_BLANK );
   CALL M$WRITE( WRT_ACCT_RPT_HDR_MSG );
   DO I=0 TO NUM_ACCOUNTS - 1;
      CALL SECS_TO_RANGE( ACCT_INFO.AVG_ACCESS(I), DIX );
      ACCT_RPT_MSG.AVG_ACC_DELTA_TEXT = RANGE_IN_TEXT(DIX);
      CALL SECS_TO_RANGE( ACCT_INFO.AVG_MODIFY(I), DIX );
      ACCT_RPT_MSG.AVG_MOD_DELTA_TEXT = RANGE_IN_TEXT(DIX);
      CALL SECS_TO_RANGE( ACCT_INFO.NEW_ACCESS(I), DIX );
      ACCT_RPT_MSG.AVG_ACC_DELTA_TEXT_LOW = RANGE_IN_TEXT(DIX);
      CALL SECS_TO_RANGE( ACCT_INFO.NEW_MODIFY(I), DIX );
      ACCT_RPT_MSG.AVG_MOD_DELTA_TEXT_LOW = RANGE_IN_TEXT(DIX);
      ACCT_RPT_MSG.ACCT = ACCT_INFO.NAME(I);
      IF ACCT_INFO.NUM_FILES(I) > 0
       THEN CALL BINCHAR( ACCT_RPT_MSG.NUM_FILES, ACCT_INFO.NUM_FILES(I) );
       ELSE ACCT_RPT_MSG.NUM_FILES = '   no';
      CALL M$WRITE( WRT_ACCT_RPT_MSG );
      END;
   RETURN;
 
END REPORT_BY_ACCOUNT;
 
SECS_TO_RANGE: PROC( P_SECS, P_RANGE );
 
DCL P_SECS SBIN;              /* IN: number of seconds we're dealing with     */
DCL P_RANGE SBIN;             /* OUT: corresponding range: 0=1hr, 1=2hr, ...  */
 
DCL SECS SBIN;
DCL I SBIN;
 
   I = 0;
   SECS = P_SECS;
   DO WHILE( SECS > MAX_SECS_PER_RANGE(I) );
      I = I + 1;
      END;
   P_RANGE = I;
   RETURN;
 
END SECS_TO_RANGE;
%EJECT;
SORT_BY_MOD: PROC;
 
DCL CMPR_IX SBIN;
DCL LAST_SORT_IX SBIN;
DCL LAST_SWAP_IX SBIN;
 
   LAST_SORT_IX = NUM_ACCOUNTS - 1;
   DO WHILE( LAST_SORT_IX > 0 );
      LAST_SWAP_IX = 0;
      DO CMPR_IX = 0 TO LAST_SORT_IX - 1;
         IF ACCT_INFO.AVG_MODIFY(CMPR_IX) > ACCT_INFO.AVG_MODIFY(CMPR_IX+1) THEN CALL SWAP;
         END;
      LAST_SORT_IX = LAST_SWAP_IX;
      END;
   RETURN;
 
SORT_BY_ACC: ENTRY;
 
   LAST_SORT_IX = NUM_ACCOUNTS - 1;
   DO WHILE( LAST_SORT_IX > 0 );
      LAST_SWAP_IX = 0;
      DO CMPR_IX = 0 TO LAST_SORT_IX - 1;
         IF ACCT_INFO.AVG_ACCESS(CMPR_IX) > ACCT_INFO.AVG_ACCESS(CMPR_IX+1) THEN CALL SWAP;
         END;
      LAST_SORT_IX = LAST_SWAP_IX;
      END;
   RETURN;
 
SWAP: PROC;
   TEMP_ACCT_INFO = ACCT_INFO(CMPR_IX);
   ACCT_INFO(CMPR_IX) = ACCT_INFO(CMPR_IX+1);
   ACCT_INFO(CMPR_IX+1) = TEMP_ACCT_INFO;
   LAST_SWAP_IX = CMPR_IX;
   RETURN;
END SWAP;
END SORT_BY_MOD;
 
END FILAGE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
FILAGE_BRK: PROC ASYNC;
%INCLUDE CP_6;
%F$DCB;
DCL M$LO DCB;
DCL M$SI DCB;
DCL BREAK_COUNT SBIN SYMREF;
%FPT_TRMPRG(FPTN = FPT_TRMPRG,STCLASS = CONSTANT,
        RSTBRK = YES);
%FPT_WRITE(FPTN = FPT_WRITE,STCLASS = CONSTANT,
        DCB = M$LO,
        BUF = WR_BRK);
DCL 1 WR_BRK STATIC,
      2 * CHAR(0) INIT('...Working on .'),
      2 ACCT CHAR(8);
/**/
   BREAK_COUNT = BREAK_COUNT + 1;
   WR_BRK.ACCT = DCBADDR(DCBNUM(M$SI))->F$DCB.ACCT#;
   CALL M$WRITE(FPT_WRITE);
   CALL M$TRMPRG(FPT_TRMPRG);
   RETURN;
END FILAGE_BRK;
