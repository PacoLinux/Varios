

14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         1    
    1      /*M* KJ_MACRO_M - Macros to generate data for the COUPLER.   */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
    8
    9
   10      /*F* NAME: KJ$DCW
   11      */
   12      %MACRO KJ$DCW (NAME=KJ$DCW,
   13                STCLASS=BASED,
   14                LVL=1,
   15                LAST=";",
   16                OPERATION(
   17                     DISCONNECT=48,
   18                     DISCONNECTINT=56,
   19                     STCONFST=60,
   20                     DATAL6_L66=61,
   21                     DATAL66_L6=62,
   22                     READCLR_OR=53,
   23                     INTL6=57,
   24                     JUMP=58,
   25                     NOP=51,
   26                     STALL=52,
   27                     INTL66=59)=0,
   28                MODE(ASCII=1,BCD=2,BIN=3,ANY)=0,
   29                TALLY=0,
   30                L66A=0,
   31                L6A=0);
   32
   33      %LSET LISTDIR='0'B;
   34      %LSET LISTEXP='1'B;
   35      %LSET LISTCOM='0'B;
   36      %LSET LISTSUB='1'B;
   37      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         2    
   38      %IF (SUBSTR(STR,0,6)='STATIC') OR
   39       (SUBSTR(STR,0,8)='CONSTANT') OR
   40       (SUBSTR(STR,0,3)='EXT');
   41       %LSET INIT=CHARTEXT('INIT');
   42      %ELSE;
   43       %LSET INIT=CHARTEXT('/*');
   44      %ENDIF;
   45
   46      %IF LVL=1;
   47      DCL 1 NAME STCLASS ALIGNED,
   48      %ELSE;
   49           %IF NOT(MODE_FEP);
   50           %(LVL) NAME UNAL,
   51           %ELSE;
   52           %(LVL) NAME ALIGNED,
   53           %ENDIF;
   54      %ENDIF;
   55            %IF NOT(MODE_FEP);
   56            %(LVL+1) %CHARTEXT('OPERATION ') UBIN(9) UNAL %INIT(OPERATION)%CHARTEXT('/**/'),
   57            %ELSE;
   58            %(LVL+1) %CHARTEXT('OPERATION ') UBIN(8) CALIGNED %INIT(OPERATION)%CHARTEXT('/**/'),
   59            %ENDIF;
   60
   61            %IF NOT(MODE_FEP);
   62            %(LVL+1) %CHARTEXT('MODE ') UBIN(9) UNAL %INIT(MODE)%CHARTEXT('/**/'),
   63            %ELSE;
   64            %(LVL+1) %CHARTEXT('MODE ') UBIN(8) CALIGNED %INIT(MODE)%CHARTEXT('/**/'),
   65            %ENDIF;
   66
   67            %IF NOT(MODE_FEP);
   68            %(LVL+1) %CHARTEXT('TALLY ') UBIN(18) UNAL %INIT(TALLY)%CHARTEXT('/**/'),
   69            %ELSE;
   70            %(LVL+1) %CHARTEXT('TALLY ') UBIN(16) %INIT(TALLY)%CHARTEXT('/**/'),
   71            %ENDIF;
   72
   73            %(LVL+1) %CHARTEXT('L66A ') UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL %INIT(L66A)%CHARTEXT('/**/'),
   74            %(LVL+1) %CHARTEXT('L6A ') UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL %INIT(L6A)%CHARTEXT('/**/') LAST
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         3    
   75      %MEND;
   76
   77
   78      /*F* NAME: KJ$STATUS1
   79      */
   80      %MACRO KJ$STATUS1 (NAME=KJ$STATUS1,STCLASS=BASED);
   81
   82      DCL 1 NAME STCLASS WALIGNED,
   83               2 DR BIT(1) UNAL,              /* Device ready                       */
   84               2 ATT BIT(1) UNAL,             /* Attention                          */
   85               2 * BIT(1) UNAL,
   86               2 ESE BIT(1) UNAL,             /* External system error              */
   87               2 ESP BIT(1) UNAL,             /* External system parity             */
   88               2 CNOP BIT(1) UNAL,            /* Central non-operational            */
   89               2 CSP BIT(1) UNAL,             /* Central system parity              */
   90               2 CSR BIT(1) UNAL,             /* Central system read                */
   91               2 CSW BIT(1) UNAL,             /* Central system write               */
   92               2 COP BIT(1) UNAL,             /* Central operational                */
   93               2 TT BIT(1) UNAL,              /* Transaction timer                  */
   94               2 W2NZ BIT(1) UNAL,            /* Word 2 nonzero                     */
   95               2 MY BIT(1) UNAL,              /* Memory yellow                      */
   96               2 NER BIT(1) UNAL,             /* Nonexisten resource                */
   97               2 L6B BIT(1) UNAL,             /* Level 6 bus parity error           */
   98               2 MR BIT(1) UNAL;              /* Memory red                         */
   99      %MEND;
  100      %EJECT;

14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         4    
  101      %MACRO KJ$STATUS2 (NAME=KJ$STATUS2,STCLASS=BASED);
  102
  103      DCL 1 NAME STCLASS WALIGNED,
  104               2 BV BIT(1) UNAL,              /* Barricade Violation                */
  105               2 CWE BIT(1) UNAL,             /* Contol word exhaust                */
  106               2 IFC BIT(1) UNAL,             /* Illegal function code              */
  107               2 IDCW BIT(1) UNAL,            /* Illegal DCW op code                */
  108               2 IPCW BIT(1) UNAL,            /* Illegal PCW op code                */
  109               2 HF6 BIT(1) UNAL,             /* Hardware fault L6                  */
  110               2 HF66 BIT(1) UNAL,            /* Hardware fault L66                 */
  111               2 HFDCW BIT(1) UNAL,           /* Hardware fault DCW                 */
  112               2 STBT BIT(1) UNAL,            /* Stored boot                        */
  113               2 MSB BIT(1) UNAL,             /* Most significant byte nonzero      */
  114               2 IL6PARM UBIN (6) UNAL;       /* Interupt l6 parameter              */
  115      %MEND;
  116
  117
  118      /*F* NAME: KJ$INTCTL
  119      */
  120      %MACRO KJ$INTCTL (NAME=KJ$INTCTL,
  121                          STCLASS=BASED,
  122                          CPUCHAN=0,
  123                          L6TERMINTLVL=0);
  124
  125      %LSET LISTDIR='0'B;
  126      %LSET LISTEXP='1'B;
  127      %LSET LISTCOM='0'B;
  128      %LSET LISTSUB='1'B;
  129      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  130      %IF (SUBSTR(STR,0,6)='STATIC') OR
  131       (SUBSTR(STR,0,8)='CONSTANT') OR
  132       (SUBSTR(STR,0,3)='EXT');
  133       %LSET INIT=CHARTEXT('INIT');
  134      %ELSE;
  135       %LSET INIT=CHARTEXT('/*');
  136      %ENDIF;
  137      DCL 1 NAME STCLASS WALIGNED,
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         5    
  138               2 %CHARTEXT('CPUCHAN ') UBIN(10) UNAL %INIT(CPUCHAN)%CHARTEXT('/**/'),
  139               2 %CHARTEXT('L6TERMINTLVL ') UBIN(6) UNAL %INIT(L6TERMINTLVL)%CHARTEXT('/**/');
  140      %MEND;
  141
  142
  143      /*F* NAME: KJ$TASK
  144      */
  145
  146      %MACRO KJ$TASK (NAME=KJ$TASK,
  147                          STCLASS=BASED,
  148                   TH(YES='1'B,NO='0'B)='0'B, /* Throttle                    */
  149                BTINH(YES='1'B,NO='0'B)='0'B, /* Boot inhibit             */
  150                          L66TESTINTLVL=0,    /* L66 test termination level         */
  151                          L66SPECINTLVL=0);   /* L66 spec termination level         */
  152
  153      %LSET LISTDIR='0'B;
  154      %LSET LISTEXP='1'B;
  155      %LSET LISTCOM='0'B;
  156      %LSET LISTSUB='1'B;
  157      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  158      %IF (SUBSTR(STR,0,6)='STATIC') OR
  159       (SUBSTR(STR,0,8)='CONSTANT') OR
  160       (SUBSTR(STR,0,3)='EXT');
  161       %LSET INIT=CHARTEXT('INIT');
  162      %ELSE;
  163       %LSET INIT=CHARTEXT('/*');
  164      %ENDIF;
  165      DCL 1 NAME STCLASS WALIGNED,
  166               2 %CHARTEXT('TH ') BIT(1) UNAL %INIT(TH)%CHARTEXT('/**/'),
  167               2 %CHARTEXT('BTINH ') BIT(1) UNAL %INIT(BTINH)%CHARTEXT('/**/'),
  168               2 %CHARTEXT('L66TESTINTLVL ') UBIN(3) UNAL %INIT(L66TESTINTLVL)%CHARTEXT('/**/'),
  169               2 %CHARTEXT('L66SPECINTLVL ') UBIN(3) UNAL %INIT(L66SPECINTLVL)%CHARTEXT('/**/'),
  170               2 * UBIN(8) CALIGNED %INIT(0)%CHARTEXT('/**/');
  171      %MEND;
  172
  173
  174      /*F* NAME: KJ$CONFIG
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         6    
  175      */
  176      %MACRO KJ$CONFIG (NAME=KJ$CONFIG,
  177                          STCLASS=BASED,
  178                CSBAR(YES='1'B,NO='0'B)='0'B, /* CS bar                   */
  179               FEPBAR(YES='1'B,NO='0'B)='0'B, /* FEP BAR                 */
  180              ADPHOST(YES='1'B,NO='0'B)='0'B, /* ADP HOST               */
  181                  OPL(YES='1'B,NO='0'B)='0'B, /* Operational                */
  182                 TEST(YES='1'B,NO='0'B)='0'B, /* Test                      */
  183                          L6SPECINTLVL=0);    /* L6 spec termination level          */
  184
  185      %LSET LISTDIR='0'B;
  186      %LSET LISTEXP='1'B;
  187      %LSET LISTCOM='0'B;
  188      %LSET LISTSUB='1'B;
  189      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  190      %IF (SUBSTR(STR,0,6)='STATIC') OR
  191       (SUBSTR(STR,0,8)='CONSTANT') OR
  192       (SUBSTR(STR,0,3)='EXT');
  193       %LSET INIT=CHARTEXT('INIT');
  194      %ELSE;
  195       %LSET INIT=CHARTEXT('/*');
  196      %ENDIF;
  197      DCL 1 NAME STCLASS WALIGNED,
  198               2 %CHARTEXT('CSBAR ') BIT(1) UNAL %INIT(CSBAR)%CHARTEXT('/**/'),
  199               2 %CHARTEXT('FEPBAR ') BIT(1) UNAL %INIT(FEPBAR)%CHARTEXT('/**/'),
  200               2 %CHARTEXT('ADPHOST ') BIT(1) UNAL %INIT(ADPHOST)%CHARTEXT('/**/'),
  201               2 * UBIN(5) UNAL %INIT(0)%CHARTEXT('/**/'),
  202               2 %CHARTEXT('OPL ') BIT(1) UNAL %INIT(OPL)%CHARTEXT('/**/'),
  203               2 %CHARTEXT('TEST ') BIT(1) UNAL %INIT(TEST)%CHARTEXT('/**/'),
  204               2 %CHARTEXT('L6SPECINTLVL ') UBIN(6) UNAL %INIT(L6SPECINTLVL)%CHARTEXT('/**/');
  205      %MEND;
  206
  207
  208      /*F* NAME: KJ$OUTCONT
  209      */
  210      %MACRO KJ$OUTCONT (NAME=KJ$OUTCONT,STCLASS=BASED,
  211                INITIALIZE(YES='1'B,NO='0'B)='0'B,
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         7    
  212                STOPIO(YES='1'B,NO='0'B)='0'B);
  213
  214
  215      %LSET LISTDIR='0'B;
  216      %LSET LISTEXP='1'B;
  217      %LSET LISTCOM='0'B;
  218      %LSET LISTSUB='1'B;
  219      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  220      %IF (SUBSTR(STR,0,6)='STATIC') OR
  221       (SUBSTR(STR,0,8)='CONSTANT') OR
  222       (SUBSTR(STR,0,3)='EXT');
  223       %LSET INIT=CHARTEXT('INIT');
  224      %ELSE;
  225       %LSET INIT=CHARTEXT('/*');
  226      %ENDIF;
  227
  228      DCL 1 NAME STCLASS WALIGNED,
  229               2 %CHARTEXT('INITIALIZE ') BIT(1) UNAL %INIT(INITIALIZE)%CHARTEXT('/**/'),
  230               2 %CHARTEXT('STOPIO ') BIT(1) UNAL %INIT(STOPIO)%CHARTEXT('/**/'),
  231               2 * BIT(14) %INIT('0'B)%CHARTEXT('/**/');
  232      %MEND;
  233
  234
  235      /*F* NAME: KJ$BLDDCW
  236      */
  237      %MACRO KJ$BLDDCW (
  238                          DCW$ = DCW$,        /* DCW pointer                        */
  239                OPERATION(
  240                     DISCONNECT=48,
  241                     DISCONNECTINT=56,
  242                     STCONFST=60,
  243                     DATAL6_L66=61,
  244                     DATAL66_L6=62,
  245                     READCLR_OR=53,
  246                     INTL6=57,
  247                     JUMP=58,
  248                     NOP=51,
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         8    
  249                     STALL=52,
  250                     INTL66=59)=0,
  251                          MODE = 1,           /* ASCII MODE                         */
  252                          TALLY = 0,
  253      /*
  254              Tally -- if mode is BINARY or BCD then tally is number of 36 bit words
  255                       if mode is ASCII tally is number bytes
  256      */
  257                          L66A = 0,           /* L66 address                        */
  258                          L6A = 0);           /* L6 address                         */
  259
  260      %IF (TEXTCHAR(OPERATION)='61');         /* CHECK IF DTL6L66                   */
  261           DCW$ -> KJ$DCW = KJ_DCW_DTL6L66;
  262      %ELSEIF (TEXTCHAR(OPERATION) = '62') ;  /* DTL66L6                            */
  263           DCW$->KJ$DCW = KJ_DCW_DTL66L6;
  264      %ELSE;
  265           DCW$->KJ$DCW = KJ_DCW_DTL6L66;
  266           DCW$->KJ$DCW.%CHARTEXT('OPERATION') = OPERATION;
  267      %ENDIF;
  268      %IF (TEXTCHAR(MODE) ~= '1');
  269           DCW$->KJ$DCW.%CHARTEXT('MODE') = MODE;
  270      %ENDIF;
  271      %IF (TEXTCHAR(TALLY) ~= '0');
  272           DCW$->KJ$DCW.%CHARTEXT('TALLY') = TALLY;
  273      %ENDIF;
  274      %IF (TEXTCHAR(L66A) ~= '0');
  275           DCW$->KJ$DCW.%CHARTEXT('L66A') = L66A;
  276      %ENDIF;
  277      %IF (TEXTCHAR(L6A) ~= '0');
  278           DCW$->KJ$DCW.%CHARTEXT('L6A') = L6A;
  279      %ENDIF;
  280           DCW$ = PINCRW(DCW$,SIZEW(KJ$DCW));
  281      %MEND;
  282
  283
  284
  285      /*F* NAME: KJJ$STT_FEI
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         9    
  286      */
  287      %MACRO KJ$STT_FEI (NAME=KJ$STT_FEI,LVL=1,STCLASS=BASED,LAST=";");
  288      %LSET LISTDIR='0'B;
  289      %LSET LISTEXP='1'B;
  290      %LSET LISTCOM='0'B;
  291      %LSET LISTSUB='1'B;
  292      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  293      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  294      %LSET INIT=CHARTEXT('INIT');
  295      %ELSE;
  296      %LSET INIT=CHARTEXT('/*');
  297      %ENDIF;
  298      %LSET LVL0=LVL;
  299      %LSET LVL1=%(LVL0+1);
  300      %IF LVL=1;
  301      DCL 1 NAME STCLASS ALIGNED,
  302      %ELSE;
  303           %LVL0 NAME ALIGNED,
  304      %ENDIF;
  305                %KL_REQSTATS(NAME=REQSTATS,LVL=%LVL1,STCLASS=STCLASS,LAST=",");
  306      %KH$STT(LAST=",",LVL=%LVL1,STCLASS=STCLASS,NAME=USRSTT);
  307               2 ICQ_MSGS UBIN(32) %INIT(0) %CHARTEXT('/**/'), /* Messages into the host             */
  308               2 OCQ_MSGS UBIN(32) %INIT(0) %CHARTEXT('/**/'), /* Messages from the host             */
  309               2 ICQ_MBC UBIN(32) %INIT(0) %CHARTEXT('/**/'), /* Message bytes into host            */
  310               2 OCQ_MBC UBIN(32) %INIT(0) %CHARTEXT('/**/'), /* Message bytes from host            */
  311               2 DCW_ABRT UBIN(32) %INIT(0) %CHARTEXT('/**/'), /* DCW LIST ABORTS                    */
  312               2 SCHXEQTIM UBIN(32) %INIT(0) %CHARTEXT('/**/'), /* scheduled xeq time */
  313               2 DATAFNC,
  314                    3 RUOK UBIN(32) %INIT(0) %CHARTEXT('/**/'), /* host query for fep okay */
  315                    3 ODATA UBIN(32) %INIT(0) %CHARTEXT('/**/'), /* output data */
  316                    3 NOP UBIN(32) %INIT(0) %CHARTEXT('/**/'), /* nops */
  317                    3 TIM UBIN(32) %INIT(0) %CHARTEXT('/**/') LAST /* time messages from host */
  318      %MEND;
  319      /*F* NAME: KJ$CTX
  320
  321      The COUPLER's Context Block is maintained
  322      in the context area of the Circular Queue
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         10   
  323      Header.
  324      */
  325
  326      %MACRO KJ_CTX (FPTN=KJ$CTX,
  327                        STCLASS=STATIC,
  328                        ALGN=WALIGNED);
  329
  330       %LSET LISTDIR='0'B;
  331       %LSET LISTEXP='1'B;
  332       %LSET LISTCOM='0'B;
  333       %LSET LISTSUB='1'B;
  334       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  335       %IF (SUBSTR(STR,0,6)='STATIC') OR
  336       (SUBSTR(STR,0,8)='CONSTANT') OR
  337       (SUBSTR(STR,0,3)='EXT');
  338       %LSET INIT=CHARTEXT('INIT');
  339       %LSET EINIT=CHARTEXT('');
  340       %ELSE;
  341       %LSET INIT=CHARTEXT('/*');
  342       %LSET EINIT=CHARTEXT('*/');
  343       %ENDIF;
  344
  345      DCL 1 FPTN STCLASS ALGN,
  346               2 STATE UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL,
  347               2 CURRENT_FUNCTION UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Current function in progress       */
  348               2 CHAN0 UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Coupler chan address               */
  349               2 CHAN1 UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Coupler chan address               */
  350               2 CHAN2 UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Coupler chan address               */
  351               2 STATUS1 BIT(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Couplers current status            */
  352               2 STATUS2 BIT(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Couplers current status            */
  353               2 HOST_NODE UBIN BYTE UNAL,    /* Node number of host                */
  354               2 FEP_NODE UBIN BYTE UNAL,     /* Node number of fep                 */
  355               2 QOS UBIN BYTE UNAL,          /* QOS for connection                 */
  356               2 * UBIN BYTE UNAL,
  357           %IF NOT(MODE_FEP);
  358               2 FLAGS UNAL,
  359           %ELSE;
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         11   
  360               2 FLAGS WALIGNED,
  361           %ENDIF;
  362            %IF NOT(MODE_FEP);
  363                    3 * BIT(1),
  364            %ENDIF;
  365                    3 BUF_FULL BIT(1) UNAL,   /* Buffer contains data               */
  366                    3 * UBIN(15) UNAL,
  367              %IF NOT(MODE_FEP);
  368                    3 * BIT(1),
  369              %ENDIF;
  370           %IF NOT(MODE_FEP);
  371               2 ICQ UNAL,
  372           %ELSE;
  373               2 ICQ ALIGNED,
  374           %ENDIF;
  375                    3 IPTR UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* Insert pointer                     */
  376                    3 * UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Filler for rest of word            */
  377                    3 RPTR UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* Removal pointer                    */
  378                    3 * UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Filler for rest of word            */
  379                    3 SIZE UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* Queue size                         */
  380                    3 * UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Filler for rest of word            */
  381                    3 LSTIPTR UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* last icq iptr                      */
  382                    3 * UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /*filler for rest of word*/
  383                    3 OFFSET UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* Offset to ICQ                      */
  384                    3 BUF$ PTR UNAL,          /* Pointer to Buffer for ICQ          */
  385                    3 BUF_SIZE SBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* Size of buffer                     */
  386                    3 NEW_RPTR UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* New removal ptr for handerl CQ     */
  387            %IF NOT(MODE_FEP);
  388               2 OCQ UNAL,
  389            %ELSE;
  390               2 OCQ ALIGNED,
  391            %ENDIF;
  392                    3 IPTR UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* Insert pointer                     */
  393                    3 * UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Filler for rest of word            */
  394                    3 RPTR UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* Removal pointer                    */
  395                    3 * UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Filler for rest of word            */
  396                    3 SIZE UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* Queue size                         */
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         12   
  397                    3 * UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Filler for rest of word            */
  398                    3 FLAGS UNAL,
  399              %IF NOT(MODE_FEP);
  400                         4 * BIT(1),
  401              %ENDIF;
  402                         4 * BIT(7) UNAL,
  403                         4 QFULL BIT(1) UNAL,
  404              %IF NOT(MODE_FEP);
  405                         4 * BIT(3),
  406              %ENDIF;
  407                         4 * BIT(24) UNAL,
  408                    3 * UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL,
  409                    3 RDSIZE UBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* Size of area read in               */
  410                    3 BUF$ PTR UNAL,          /* Pointer for OCQ buffer             */
  411                    3 BUF_SIZE SBIN(%(36-(4*BITBIN(MODE_FEP)))) UNAL, /* Size of buffer                     */
  412            %IF NOT(MODE_FEP);
  413               2 IBUF UNAL,
  414            %ELSE;
  415               2 IBUF,                        /* Buffer for internal messages       */
  416            %ENDIF;
  417                    3 BUF$ PTR UNAL,
  418                    3 SIZE UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL,
  419                    3 CSIZE UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL, /* Current size                       */
  420           %IF NOT(MODE_FEP);
  421               2 IOIP UNAL,
  422           %ELSE;
  423               2 IOIP,
  424           %ENDIF;
  425              %IF NOT(MODE_FEP);
  426                    3 * BIT(1),
  427              %ENDIF;
  428                    3 FLAG BIT(1) UNAL,
  429                    3 * BIT(15) UNAL,
  430              %IF NOT(MODE_FEP);
  431                    3 * BIT(1) UNAL,
  432              %ENDIF;
  433                    3 * (0:1) UBIN(%(18-(2*BITBIN(MODE_FEP)))) UNAL,
14:49 JUL 28 '97 KJ_MACRO_M.:E05SI                                         13   
  434            %KJ$DCW (LVL=2,LAST=",",NAME="DCWS(0:19)");
  435            %KJ$DCW (NAME="PTR_DCW(0:8)",LVL=2); /* DCWS FOR READING AND WRITING PTRS */
  436      %MEND;

