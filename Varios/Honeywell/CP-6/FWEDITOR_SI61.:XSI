/*M* FWEDITOR - manipulates IFAD tapes' firmware files */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
 
 
%SET LISTSUB='1'B;
 
 
FWEDITOR: PROC MAIN;
DCL B$JIT$ PTR SYMREF;
%INCLUDE CP_6_SUBS;
%INCLUDE CP_6;
%INCLUDE B$JIT;
%INCLUDE XU_MACRO_C;
                                        /* ERROR MESSAGE PROCESS              */
%INCLUDE FWEDITOR_C61;
DCL M$LM DCB;
%FPT_UNFID(DCB=M$LM,TEXTFID=ERRFID.TEX);
%VLP_ERRCODE(FPTN=ERR_CODE,FCG='3030'O,MID='30'O);
DCL 1 ERRFID STATIC ALIGNED,
         2 CNT SBIN BYTE CALIGNED,
         2 TEX CHAR(39) CALIGNED INIT(' ');
 
DCL B$TCB$ PTR SYMREF;
%B$TCB;
%B$ALT;
DCL NXTAPFIL BIT(1);
DCL TBLCNT SBIN STATIC;
DCL PAGE SBIN STATIC;                   /* Space for cmd table                */
%VLP_VECTOR;
%FPT_GDS(RESULTS=VLP_VECTOR,SEGSIZE=1000);
DCL 1 TBL(0:0)BASED(VLP_VECTOR.PTR$),   /* Cmd table                          */
         2 FNAME CHAR(12) ALIGNED,      /* Firmware file name                 */
         2 BMOD CHAR(4) ALIGNED,        /* Firmware module name in the file   */
         2 EMOD CHAR(4) ALIGNED,        /* Ending module name in the file     */
         2 STATU CHAR(4) ALIGNED,       /* Work has finished for the cmd cell */
         2 REV CHAR(4) ALIGNED;         /* Revision code for module in BMOD */
 
DCL R$ PTR;                             /* Read pointer of input file         */
DCL 1 BLOCK STATIC ALIGNED,             /* Data struc. for reading input file */
         2 BCW,                         /* Block control word                 */
              3 BLKNUMB UBIN HALF UNAL, /* Block number                       */
              3 BSN(0:5) REDEF BLKNUMB UBIN(3) UNAL, /* Block serial #              */
              3 SZ UBIN HALF UNAL,      /* Block size                         */
         2 INFO(0:318) BIT(36);         /* Max blk size is 320 words          */
DCL 1 REC BASED(R$) ALIGNED,
         2 RCW,
              3 SZ UBIN HALF UNAL,
              3 * BIT(8) UNAL,
              3 MEDIA UBIN(4) UNAL,
              3 RC BIT(6) UNAL,
         2 BYT6(0:161) BIT(6) ; /* Max rec size is 27 wds of data
                                  Logical Record Media Code:
                              1 = binary card image
                              2 = BCD card image
                              3 = BCD printline image
                              4 = (user)
                              5 = TSS ASCII (GCOS prior to Release E)
                              6 = GFRC ASCII
                              7 = ASCII printline image
                              8 = TSS info record
                              9 = BCD printline image
                             10 = ASCII card image
                             13 = ASCII printline image */
 
DCL 1 PLINE STATIC,                     /* Data struc. for listing output     */
         2 H,
              3 BNO CHAR(5),            /* Sequence # of blocks in the file   */
              3 * CHAR(1)INIT(' '),
              3 BNOO(0:5)CHAR(1),       /* Block serial #                     */
              3 * CHAR(1)INIT(' '),
              3 RNO CHAR(3),            /* Sequence # of records in the block */
              3 * CHAR(2)INIT('  '),
         2 HCLEAR REDEF H CHAR(18),     /* clear above statistic data         */
         2 P CHAR(80);
                                        /* Listing output title $ format      */
%FPT_WRITE(FPTN=WLINE,STCLASS=STATIC,DCB=M$LO,BUF=PLINE);
%VLP_HDR(FPTN=LOTITLE,STCLASS=STATIC,
        TITLE='BLOCK B.SER# REC  ');
%FPT_DEVICE(FPTN=TITLO,STCLASS=STATIC,DCB=M$LO,HDR=LOTITLE,PAGE=YES);
DCL FIRSTITLO CHAR(0)STATIC INIT('qBLOCK B.SER# REC  ');
%FPT_WRITE(FPTN=FIRSTIT,STCLASS=STATIC,DCB=M$LO,
        VFC=YES,BUF=FIRSTITLO);
DCL BLK# UBIN STATIC;
DCL REC# UBIN STATIC;
 
DCL WRITTEN BIT(1);
%FPT_WRITE(FPTN=WRT_FPT,DCB=F$FWOUT,BUF=BLOCK,KEY=KEYBUF,ONEWKEY=NO);
 
DCL CARD CHAR(80) STATIC;               /* ASCII card image process           */
%FPT_READ(FPTN=READ_FPT,BIN=YES,DCB=F$FWIN,BUF=BLOCK,WAIT=YES);
DCL BCD2ASC CHAR(64)CONSTANT INIT
('0123456789[#@:>? ABCDEFGHI&.](<\^JKLMNOPQR-$*);''+/STUVWXYZ_,%="!');
 
DCL DCBIN UBIN(36);                     /* IO DCB structure                   */
DCL F$FWIN DCB;
DCL F$FWOUT DCB;
DCL SRCIN CHAR(4) STATIC;
DCL F$REPL DCB;
 
DCL J SBIN;
DCL LINE$ PTR;                /* Line pointer for parse output of user cmd    */
DCL FILE$ PTR;                     /* Pointer to firmware file in user cmd    */
DCL MOD$ PTR;                      /* pointer to firmware module in user cmd  */
DCL FILE_NAME CHAR(12) ;
DCL FILENAME CHAR(12) ;
DCL START_MOD CHAR(4) ;
DCL END_MOD CHAR(4) ;
DCL ENDMOD CHAR(4);
DCL REV CHAR(4) ALIGNED;
DCL REVSET BIT(1);
DCL RECNBR UBIN ALIGNED;
DCL 1 KEYBUF STATIC ALIGNED,
         2 KEYL UBIN(9) UNAL INIT(7),
         2 MODU CHAR(4) UNAL,
         2 SEQ CHAR(3) UNAL;
DCL LASTKEY CHAR(8) ALIGNED STATIC;
%FPT_DELREC(FPTN=DEL_REV,DCB=F$FWOUT,LKEY=LASTKEY,KEY=KEYBUF);
DCL FOUND BIT(1);
DCL FILEFND BIT(1);
 
%INCLUDE XUR_ENTRY;                     /* Struc. for parsing user cmd        */
DCL CMD$ PTR;
%PARSE$OUT (NAME=OUT,STCLASS="BASED(CMD$)");
%PARSE$SYM (NAME=SYM,STCLASS="BASED(CMD$)");
%P$PCB(NAME=P_PCB,STCLASS="STATIC SYMDEF");
DCL FW_NODE SBIN SYMREF;                /* Link to cmd node definition file   */
%XUR_INIT(PCB=P_PCB);
 
%F$DCB;                  /* provide DCB struc. so DCB parameters can be exam. */
DCL M$DO DCB;                           /* Struc to process message output    */
DCL M$LO DCB;
%FPT_WRITE(FPTN=MSG_FPT,DCB=M$LO,WAIT=YES,BUF=OUTBUF);
DCL OUTBUF CHAR(80) STATIC UNAL;
 %INCLUDE B_ERRORS_C;
%INCLUDE XU_FORMAT_C;
DCL BUF CHAR(80);
DCL I SBIN;
 
                    /* Struc. to process user specified listing output file   */
%FPT_OPEN(ACCT=VLP_ACCT,NAME=VLP_NAME,PASS=VLP_PASS,SN=VLP_SN,
          WSN=VLP_WSN,FPTN=LIST_OPEN,CTG=YES,DCB=M$LO);
%FPT_FID(ACCT=VLP_ACCT,NAME=VLP_NAME,PASS=VLP_PASS,SN=VLP_SN,
          WSN=VLP_WSN,ASN="LIST_OPEN.V.ASN#",RES="LIST_OPEN.V.RES#",
          RESULTS=VLR_FID,FPTN=LIST_FID);
%FPT_CLOSE(FPTN=LIST_CLOSE,DCB=M$LO);
 
                                   /*Struc. to process input-output files     */
%FPT_OPEN(ACCT=VLP_ACCT,NAME=VLP_NAME,PASS=VLP_PASS,SN=VLP_SN,SCRUB=YES,
          WSN=VLP_WSN,FPTN=TAPE_OPEN,FUN=IN,DCB=F$FWIN);
%FPT_OPEN(ACCT=VLP_ACCT,NAME=VLP_NAME,PASS=VLP_PASS,SN=VLP_SN,SCRUB=YES,
     ORG=KEYED,ACS=DIRECT,WSN=VLP_WSN,FPTN=DISK_OPEN,DCB=F$FWOUT,CTG=YES);
%FPT_CLOSE(FPTN=TAPE_CLOSE,DCB=F$FWIN);
%FPT_CLOSE(FPTN=DISK_CLOSE,DCB=F$FWOUT);
%FPT_FID(ACCT=VLP_ACCT,NAME=VLP_NAME,PASS=VLP_PASS,SN=VLP_SN,
          WSN=VLP_WSN,ASN="TAPE_OPEN.V.ASN#",RES="TAPE_OPEN.V.RES#",
          RESULTS=VLR_FID,FPTN=TAPE_FID);
%FPT_FID(ACCT=VLP_ACCT,NAME=VLP_NAME,PASS=VLP_PASS,SN=VLP_SN,
          WSN=VLP_WSN,ASN="DISK_OPEN.V.ASN#",RES="DISK_OPEN.V.RES#",
          RESULTS=VLR_FID,FPTN=DISK_FID);
%FPT_REW(DCB=F$FWIN,FPTN=TAPE_REW);
%FPT_REW(DCB=F$FWOUT,FPTN=DISK_REW);
%VLR_FID;
%VLP_ACCT;
%VLP_NAME;
%VLP_PASS;
%VLP_SN;
%VLP_WSN;
 
%INCLUDE XUH_MACRO_C;
%XUH_PARAM(PROCNAME=FWEDNAME,OUTDCB1=M$DO,OUTDCB2=M$LO
                                     );
%VLP_NAME(FPTN=FWEDNAME,NAME='FWEDITOR');
 
                                   /* Convert IBEX cmd to user cmd format     */
     I=0;BUF=' ';
     DO WHILE SUBSTR(B$JIT.CCBUF,I,1)=' ';
          I=I+1;
        END;
     DO UNTIL SUBSTR(B$JIT.CCBUF,I,1)=' ';
          I=I+1;
        END;
     CALL CONCAT(BUF,'EDIT',SUBSTR(B$JIT.CCBUF,I,B$JIT.CCARS-I+1));
     DCBIN=0;
     CALL XUR$INIT(XUR_INIT);
     CALL XUR$GETCMD(FW_NODE,CMD$,,BUF,80) WHENALTRETURN DO;
          CALL XUR$ERRPTR(,DCBNUM(M$DO));
          GOTO KILL;
        END;
     CALL FILESET ALTRET(KILL);
KILL: CALL GETCMD;
     CALL XUR$CLOSE_DCBS;
     CALL M$EXIT;                       /* End of a session                   */
 
FILESET: PROC ALTRET;
 
  /* Assign DCB F$FWIN to input medium, DCB F$FWOUT to output file. F$FWOUT is
     also the input DCB if only single FID in command EDIT.                   */
     IF DCBADDR(DCBNUM(F$FWIN))->F$DCB.FCD#
     THEN CALL M$CLOSE(TAPE_CLOSE)ALTRET(MONERR);
     IF DCBADDR(DCBNUM(F$FWOUT))->F$DCB.FCD#
     THEN CALL M$CLOSE(DISK_CLOSE)ALTRET(MONERR);
     IF OUT.NSUBLKS =0 THEN RETURN;
     TAPE_FID.TEXTFID_=VECTOR(OUT.SUBLK$(0)->SYM.TEXT);
     CALL M$FID(TAPE_FID)ALTRET(MONERR);
     DO CASE(TAPE_OPEN.V.ASN#);
     CASE(%DEVICE#);                    /* Tape input                         */
        IF (SUBSTR(TAPE_OPEN.V.RES#,0,2)='MT')
             OR (SUBSTR(TAPE_OPEN.V.RES#,0,2)='FT') THEN DO;
             TAPE_OPEN.V.ORG#=%FREE#;
             SRCIN='TAPE';
           END;
     CASE(%FILE#);                      /* Disk input                         */
        SRCIN='DISK';
        DISK_OPEN.V.FUN#=%UPDATE#;
     CASE(ELSE); CALL ERR_MSG;
     END;
     DCBIN=DCBNUM(F$FWIN);
     IF OUT.NSUBLKS=3 THEN DO;
GOOD:     CALL M$OPEN(TAPE_OPEN)ALTRET(MONERR);
          DISK_OPEN.V.EXIST#=OUT.SUBLK$(1)->OUT.CODE;
          DISK_OPEN.V.FUN#=%CREATE#;
          DISK_FID.TEXTFID_=VECTOR(OUT.SUBLK$(2)->SYM.TEXT);
        END;
     ELSE DO;                           /* only single FID specified          */
          DCBIN=DCBNUM(F$FWOUT);
          IF SRCIN='TAPE' THEN DO;
               DISK_OPEN.V.ORG#=%FREE#;
               DISK_OPEN.V.FUN#=%IN#;
             END;
          DISK_FID.TEXTFID_=VECTOR(OUT.SUBLK$(0)->SYM.TEXT);
        END;
     CALL M$FID(DISK_FID)ALTRET(MONERR);
     IF OUT.NSUBLKS=3 AND DISK_OPEN.V.ASN#=%DEVICE# THEN DO;
          ERR_CODE.ERR#=%E$TAPEWRT;
          CALL XUR$ERRMSG(ERR_CODE);
          ALTRETURN;
        END;
/*E*   ERROR:  XXX-E$TAPEWRT
          MESSAGE:  Output can not be on tape file.
           MESSAGE1: This program does not update tape file.
                                                                */
     CALL M$OPEN(DISK_OPEN)ALTRET(MONERR);
     RETURN;
MONERR: CALL ERR_MSG;
ERROR: ALTRETURN;
 
END FILESET;
 
GETCMD: PROC;
 
DCL PRMPT CHAR(0) CONSTANT INIT('$');
 
                                        /* Initialize to receive user cmd     */
     TBLCNT=-1;                         /* GET SPACE FOR CMD TBL              */
     CALL VECTORIZE ALTRET(CMDLINE);
 
                                        /* Setup error message process        */
     CALL M$UNFID(FPT_UNFID)ALTRET(MONERR);
     CALL INDEX1(I,' ',ERRFID.TEX)ALTRET(MONERR);
     ERRFID.CNT=I;
     CALL XUR$SETERRMSG(ERRFID)ALTRET(MONERR);
 
AGAIN: DO UNTIL OUT.CODE=20;
          FILE_NAME=' ';START_MOD=' ';END_MOD=' ';TBLCNT=0;
          IF DCBIN=0 THEN GOTO CMDLINE;
          IF DCBADDR(DCBNUM(F$FWOUT))->F$DCB.FCI# THEN
               CALL M$REW(DISK_REW)ALTRET(ERRCMD);
          TAPE_REW.V.DCB#=DCBIN;
          IF DCBADDR(DCBIN)->F$DCB.FCI# THEN
               CALL M$REW(TAPE_REW)ALTRET(ERRCMD);
          BLK#=0;
CMDLINE:  CALL XUR$GETCMD(FW_NODE,CMD$,VECTOR(PRMPT))ALTRET(BAD_CMD);
          CALL CMDPROS ALTRET(AGAIN);
          CALL CHKCMPL;
        END;
     RETURN;
BAD_CMD: CALL XUR$ERRPTR(,DCBNUM(M$DO));
     CALL XUR$ERRMSG(CMD$);
     GOTO AGAIN;
ERRCMD: CALL ERR_MSG;
     GOTO CMDLINE;
MONERR: CALL ERR_MSG;
     GOTO AGAIN;
END GETCMD;
 
CMDPROS: PROC ALTRET;                   /* Process user cmd                   */
 
     LINE$=OUT.SUBLK$(0);
     DO CASE(OUT.CODE);
     CASE(2);                      /* Cmd EDIT to define input-output files   */
        CALL FILESET ALTRET(ERROR);
     CASE(3,4);                         /* Cmd BUILD or LIST                  */
        IF OUT.CODE=4 THEN DO;          /* Input file needed for build        */
             IF NOT DCBADDR(DCBNUM(F$FWIN))->F$DCB.FCD# THEN DO;
TWOMISS:          ERR_CODE.ERR#=%E$TWOMISS;
                  CALL XUR$ERRMSG(ERR_CODE);
                  ALTRETURN;
                END;
/*E*      ERROR:  XXX-E$TWOMISS
          MESSAGE: Need both input and output files for this function.
                                                                   */
           END;
        ELSE DO;
             IF NOT DCBADDR(DCBNUM(F$FWOUT))->F$DCB.FCD# THEN DO;
ONEMISS:          ERR_CODE.ERR#=%E$ONEMISS;
                  CALL XUR$ERRMSG(ERR_CODE);
                  ALTRETURN;
                END;
/*E*      ERROR:  XXX-E$ONEMISS
          MESSAGE: Need input or output file for the function.
                                                                   */
             IF OUT.NSUBLKS=3 THEN CALL LISTFILE ALTRET(ERROR);
             CALL M$DEVICE(TITLO)ALTRET(MONERR);
             CALL M$WRITE(FIRSTIT)ALTRET(MONERR);
           END;
                             /* Default to CP6 applicable if no firmware file name specified in
                                                       user cmd. */
        IF (OUT.NSUBLKS=0) THEN DO; FILE_NAME='CP6APPLICABL';
             CALL VECTORIZE ALTRET(ERROR); END;
        ELSE DO;
             IF LINE$->OUT.CODE ~= 12 THEN DO;
                  IF LINE$->OUT.CODE = 14 THEN FILE_NAME='ALLAPPLICABL';
                  ELSE FILE_NAME='CP6APPLICABL';
                  IF OUT.NSUBLKS > 2 AND
                                        /* Identify SKIP option in cmd BUILD  */
                       OUT.SUBLK$(1)->OUT.CODE=8 THEN DO;
                       START_MOD='SKIP';
                       CALL VECTORIZE ALTRET(ERROR);
                       LINE$=OUT.SUBLK$(2);
                       CALL CMDTBL ALTRET(ERROR);
                     END;
                  ELSE CALL VECTORIZE ALTRET(ERROR);
                END;
             ELSE DO;
                  CALL CMDTBL ALTRET(ERROR);
                END;
           END;
        WRT_FPT.V.NEWKEY# = %YES#;
        CALL MATCH ALTRET(ERROR);
        IF OUT.CODE=3 AND OUT.NSUBLKS=3 THEN
             CALL CLSLIST ALTRET(ERROR);
     CASE(5,6);                         /* Cmd ADD or DELETE                  */
        IF NOT DCBADDR(DCBNUM(F$FWIN))->F$DCB.FCD#
             AND OUT.CODE=6 THEN GOTO TWOMISS;
        IF NOT DCBADDR(DCBNUM(F$FWOUT))->F$DCB.FCD# THEN GOTO ONEMISS;
        IF LINE$->OUT.CODE=12 THEN DO;
             CALL CMDTBL ALTRET(ERROR);
             WRT_FPT.V.NEWKEY# = %YES#;
             CALL MATCH ALTRET(ERROR);
           END;
     CASE(7);                      /* Cmd REPLACE needs input & output files  */
        IF NOT DCBADDR(DCBNUM(F$FWIN))->F$DCB.FCD# THEN GOTO TWOMISS;
        IF NOT DCBADDR(DCBNUM(F$FWOUT))->F$DCB.FCD# THEN GOTO TWOMISS;
        CALL CMDTBL ALTRET(ERROR);
        IF LINE$->OUT.CODE=12 THEN
             CALL REPLACE ALTRET(ERROR);
     CASE(21);                          /* Help info for user                 */
        XUH_PARAM.HELP$=OUT.SUBLK$(0)->SYM.TEXTC$;
        CALL XUR$HELP(XUH_PARAM)ALTRET(ERROR);
     CASE(22);
        CALL XUR$ALLMSG(XUH_PARAM)ALTRET(ALLMSG);
     CASE(23);
        CALL XUR$MOREMSG(XUH_PARAM)ALTRET(MORMSG);
     CASE(ELSE);
     END;
     RETURN;
ALLMSG: ERR_CODE.ERR#=%E$ALLMSG;
     CALL XUR$ERRMSG(ERR_CODE);
     ALTRETURN;
/*E*      ERROR:  XXX-E$ALLMSG
          MESSAGE: TH TH TH..... THat's all folks!
                                                                   */
MORMSG: ERR_CODE.ERR#=%E$MORMSG;
     CALL XUR$ERRMSG(ERR_CODE);
     ALTRETURN;
/*E*      ERROR:  XXX-E$MORMSG
          MESSAGE: No more message, sorry.
                                                                   */
MONERR: CALL ERR_MSG;
ERROR: ALTRETURN;
END CMDPROS;
 
CMDTBL: PROC ALTRET;
 
                     /* Construct a cell for each firmware module or range of modules
                        of the same file, vectorize cells to form a cmd table */
     DO I=0 TO LINE$->OUT.NSUBLKS-1;
          FILE$=LINE$->OUT.SUBLK$(I);
          IF (FILE$->OUT.CODE)=%file_list THEN DO;/* fw file name found in cmd line  */
               FILE_NAME=FILE$->OUT.SUBLK$(0)->SYM.TEXT;
               IF FILE$->OUT.NSUBLKS > 1 THEN DO;
                    DO J=1 TO FILE$->OUT.NSUBLKS-1; /* # of cells in cmd  table  */
                         MOD$=FILE$->OUT.SUBLK$(J);
                         START_MOD=MOD$->OUT.SUBLK$(0)->SYM.TEXT;
                         REV = 'XXXX';
                         DO CASE( MOD$->OUT.CODE );
                         CASE( %mod_name );
                                   /* Single module specified in this fw file */
                            END_MOD = START_MOD;
                         CASE( %mod_range );
                              /* Range of modules specified in this fw file   */
                            END_MOD = MOD$->OUT.SUBLK$(1)->SYM.TEXT;
                         CASE( %mod_rev );
                            END_MOD = START_MOD;
                            REV = MOD$->OUT.SUBLK$(1)->SYM.TEXT;
                         END;
                         CALL VECTORIZE ALTRET(ERROR);
                       END;
                  END;
                         /* Specified all applicable modules in this fw file  */
               ELSE DO; START_MOD='XXXX';END_MOD='XXXX';
                    CALL VECTORIZE ALTRET(ERROR); END;
             END;
          ELSE DO;
               FILE_NAME='XXXX';
               MOD$=FILE$;
               DO J=0 TO MOD$->OUT.NSUBLKS-1; /* # of cells in cmd  table  */
                    START_MOD=MOD$->OUT.SUBLK$(0)->SYM.TEXT;
                    REV = 'XXXX';
                    DO CASE( MOD$->OUT.CODE );
                    CASE( %mod_name );
                                   /* Single module specified in this fw file */
                       END_MOD = START_MOD;
                    CASE( %mod_range );
                              /* Range of modules specified in this fw file   */
                       END_MOD = MOD$->OUT.SUBLK$(1)->SYM.TEXT;
                    CASE( %mod_rev );
                       END_MOD = START_MOD;
                       REV = MOD$->OUT.SUBLK$(1)->SYM.TEXT;
                    END;
                    CALL VECTORIZE ALTRET(ERROR);
                  END;
             END;
        END;
 
     RETURN;
ERROR: ALTRETURN;
END CMDTBL;
 
               /* Walk thru input file, try to match every fw file with the file
                                               name in each cell of cmd table */
MATCH: PROC ALTRET;
%FPT_PFIL(FPTN=NXFIL_PFIL,BOF=NO,DCB=F$FWIN);
 
     IF OUT.CODE=5 OR OUT.CODE=3 THEN
          READ_FPT.V.DCB#=DCBNUM(F$FWOUT);/* DELETE*/
     ELSE READ_FPT.V.DCB#=DCBIN;
READ: CALL XBLK ALTRET(READ_NG);
     IF REC.RCW.MEDIA=2
     THEN DO;
CHECK:    CALL XLATE_6_TO_9(CARD,BCD2ASC,REC.BYT6);
          IF SUBSTR(CARD,7,6)='OBJECT' THEN DO;
               IF SUBSTR(CARD,22,1) = 'M' THEN RETURN; /* MDR STUFF */
               IF TBL.FNAME(0)='ALLAPPLICABL' OR TBL.FNAME(0)=
                    'CP6APPLICABL' THEN DO;
                    IF TBL.FNAME(0)='CP6APPLICABL' THEN DO;
     /* Only system fw file or module which applicable to CP6 are of interest */
                         IF SUBSTR(CARD,22,1)='F' AND SUBSTR(CARD,24,1)=' '
                         THEN CALL CP6_ALL ALTRET(ERROR);
                         ELSE CALL INCPTR ALTRET(READ_NG);
                         GOTO CHECK;
                       END;
                                        /* All fw modules are interested      */
                    IF TBL.FNAME(0)='ALLAPPLICABL' THEN DO;
                         CALL CP6_ALL ALTRET(ERROR);
                         GOTO CHECK; END;
                  END;
               ELSE DO;
                    CALL TBLSCAN;
                    IF FOUND AND (ENDMOD~='XXXX' OR ( FILENAME~='XXXX'
                         AND FILEFND)) AND SUBSTR(CARD,22,1)='F'
                    THEN DO;
                         CALL GETFW ALTRET(ERROR);
                         GOTO CHECK;
                       END;
                                        /* Fast scan for tape input file      */
                    ELSE IF SRCIN='TAPE' AND (NOT FILEFND) THEN DO;
                              NXFIL_PFIL.V.DCB#=DCBIN;
                              CALL M$PFIL(NXFIL_PFIL)ALTRET(MONERR);
                              BLK#=0;
                              NXTAPFIL='1'B;
                            END;
                  END;
             END;
        END;
     GOTO READ;
READ_NG: RETURN;
MONERR: CALL ERR_MSG;
ERROR: ALTRETURN;
END MATCH;
 
CP6_ALL: PROC ALTRET;
     ENDMOD='XXXX';
     IF TBL.BMOD(0)='SKIP' THEN DO;
          CALL TBLSCAN;
          IF FOUND THEN
               TBL.EMOD(0)='SKIP';
        END;
     CALL GETFW ALTRET(ERROR);
     TBL.EMOD(0)=' ';TBL.STATU(0)='DONE';
READ_NG: RETURN;
ERROR: ALTRETURN;
END CP6_ALL;
 
TBLSCAN: PROC;      /* Scan cmd table to match input fw file & module name    */
     FOUND='0'B; FILEFND='0'B; REVSET = '0'B; FILENAME=' '; ENDMOD=' ';
     DO I=0 TO TBLCNT-1;
          IF TBL.FNAME(I)='XXXX' OR SUBSTR(CARD,42,12)
               =TBL.FNAME(I) THEN DO;
               FILEFND='1'B;            /* fw file name matches               */
               FILENAME = TBL.FNAME(I);
               IF SUBSTR(CARD,72,4)=TBL.BMOD(I)
                    OR TBL.BMOD(I)='XXXX' THEN DO;
                    FOUND='1'B;    /* Complete match of input fw and cmd cell */
                    ENDMOD=TBL.EMOD(I);
                    TBL.STATU(I)='DONE';
                    IF TBL.REV(I) ~= 'XXXX' AND
                         ( OUT.CODE = %Add OR OUT.CODE = %Build )
                    THEN DO;
                         REVSET = '1'B;
                         REV = TBL.REV(I);
                       END;
                  END;
             END;
          IF FILEFND AND ENDMOD='XXXX' THEN EXIT;
        END;
END TBLSCAN;
 
XBLK: PROC ALTRET;                      /* Read input file a block a time     */
 
     WRITTEN='0'B;
     CALL M$READ(READ_FPT)ALTRET(FIL_MK);
     BLK#=BLK#+1;
INCMNT: R$=PINCRW(ADDR(BLOCK),1);       /* R$ -> RCW(NEXT OF BCW)*/
     REC#=1;
     NXTAPFIL='0'B;
     RETURN;
FIL_MK: IF NXTAPFIL THEN GOTO END_FIL;  /* file mark encountered              */
     ELSE CALL M$READ(READ_FPT)ALTRET(END_FIL);
     BLK#=1;
     GOTO INCMNT;
END_FIL: ALTRETURN;                /* Two consecutive file marks encountered  */
END XBLK;
 
INCPTR: PROC ALTRET;                    /* Increment read pointer             */
     R$=PINCRW(R$,REC.RCW.SZ+1);        /* R$ -> NEXT REC.RCW                 */
     IF POFFW(R$,ADDR(BLOCK)) > BLOCK.BCW.SZ THEN
          CALL XBLK ALTRET(READ_NG);    /* Across block boundary              */
     ELSE REC#=REC#+1;
     RETURN;
READ_NG: ALTRETURN;
END INCPTR;
 
WORK: PROC ALTRET;                 /* Do work as function name in user cmd    */
%FPT_PFIL(DCB=F$FWOUT,BOF=NO,FPTN=EOF_PFIL);
%FPT_DELREC(DCB=F$FWOUT);
 
     DO CASE(OUT.CODE);
     CASE(3);                           /* CODE OF CMD LIST                   */
                    /* Put statistic & $OBJECT or $DKEND  in output format    */
        IF REC.RCW.MEDIA=2 THEN DO;
             CALL BINCHAR(PLINE.H.BNO,BLK#);
             DO I=0 TO 5;
                  CALL BINCHAR(PLINE.H.BNOO(I),BLOCK.BCW.BSN(I));
                END;
             CALL BINCHAR(PLINE.H.RNO,REC#);
             PLINE.P=CARD;
             CALL M$WRITE(WLINE);
           END;
     CASE(4,6);                         /* CODE OF CMD BUILD AND ADD          */
        IF NOT WRITTEN THEN DO;
             IF OUT.CODE=6 THEN
                  CALL M$PFIL(EOF_PFIL)ALTRET(MONERR); /* add modules to end*/
             WRT_FPT.BUF_.BOUND= 4 * BLOCK.BCW.SZ + 3 ;
             CALL M$WRITE(WRT_FPT)
             WHENALTRETURN DO;
                  IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE ~= %E$OLDREC
                       OR OUT.CODE ~= %Build
                  THEN GOTO MONERR;
                END;
             WRITTEN='1'B;
           END;
                              /*   write REC from F$FWIN to end of F$FWOUT;*/
     CASE(5);                           /*  CODE OF CMD DELETE                */
        IF NOT WRITTEN THEN DO;
                                        /* delete REC from F$FWOUT            */
             CALL M$DELREC(FPT_DELREC)ALTRET(MONERR);
             WRITTEN='1'B;
           END;
     END;
     RETURN;
MONERR: CALL ERR_MSG;
ERROR: ALTRETURN;
END WORK;
 
REPLACE: PROC ALTRET;                   /* CALL OF CMD REPLACE                */
%FPT_PFIL(DCB=F$REPL,BOF=YES,FPTN=REPL_PFIL);
%FPT_OPEN(DCB=F$REPL,DISP=SCRATCH,NAME=TEMP_NAME,FPTN=TEMP_OPEN,
       ORG=CONSEC,FUN=CREATE,ASN=FILE);
%VLP_NAME(FPTN=TEMP_NAME,NAME='*TEMP');
     IF NOT DCBADDR(DCBNUM(F$REPL))->F$DCB.FCD#
     THEN CALL M$OPEN(TEMP_OPEN);
     CALL M$PFIL(REPL_PFIL)ALTRET(PFILALT);
BTEMP: OUT.CODE=4;       /*  Build selected f/w modules to temp dcb F$REPL    */
     WRT_FPT.V.DCB#=DCBNUM(F$REPL);
     DCBIN=DCBNUM(F$FWIN);
     CALL MATCH ALTRET(ABORT);
     CALL CHKCMPL ALTRET(ABORT);
     SRCIN='DISK';
     OUT.CODE=5;                        /* delete REC from F$FWOUT            */
     CALL MATCH ALTRET(ABORT) ;
     CALL CHKCMPL ALTRET(ABORT);
     OUT.CODE=6;                        /* add REC from F$REPL to F$FWOUT     */
     WRT_FPT.V.NEWKEY# = %YES#;
     WRT_FPT.V.DCB#=DCBNUM(F$FWOUT);
     DCBIN=DCBNUM(F$REPL);
     CALL M$PFIL(REPL_PFIL)ALTRET(PFILALT);
     TBL.FNAME(0)='ALLAPPLICABL'; TBLCNT=1;
     CALL MATCH ALTRET(ABORT);
     DCBIN=DCBNUM(F$FWIN);
     IF TAPE_OPEN.V.ASN#=%DEVICE# THEN SRCIN='TAPE';
     ELSE SRCIN='DISK';
ERROR: RETURN;
PFILALT: IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$BOF THEN GOTO BTEMP;
ABORT: ;
     IF TAPE_OPEN.V.ASN#=%DEVICE# THEN SRCIN='TAPE';
     ELSE SRCIN='DISK';
     WRT_FPT.V.DCB#=DCBNUM(F$FWOUT);
     DCBIN=DCBNUM(F$FWIN);
     ALTRETURN;
END REPLACE;
 
                    /* Process a single module or range of modules at a time  */
GETFW: PROC ALTRET;
     RECNBR = 1;
     KEYBUF.MODU = SUBSTR( CARD,72,4 );
     DO UNTIL ENDMOD='XXXX' OR SUBSTR(CARD,72,4)=ENDMOD;
          CALL XLATE_6_TO_9(CARD,BCD2ASC,REC.BYT6);/* $OBJECT*/
          IF TBL.EMOD(0)~='SKIP' THEN DO;
               CALL BINCHAR( KEYBUF.SEQ, RECNBR );
               CALL WORK  ALTRET(ERROR);/*ON $OBJECT                          */
             END;
          CALL INCPTR ALTRET(INCMPL);
          DO WHILE REC.RCW.MEDIA=1;
               IF TBL.EMOD(0)~='SKIP' THEN DO;
                    RECNBR = RECNBR + 1;
                    CALL BINCHAR( KEYBUF.SEQ, RECNBR );
                    CALL WORK ALTRET(ERROR);/* ON FIRMWARE CODE                  */
                  END;
               CALL INCPTR ALTRET(INCMPL);
             END;
          CALL XLATE_6_TO_9(CARD,BCD2ASC,REC.BYT6);/* xlate $DKEND           */
          IF TBL.EMOD(0)~='SKIP' THEN DO;
               RECNBR = RECNBR + 1;
               CALL BINCHAR( KEYBUF.SEQ, RECNBR );
               CALL WORK  ALTRET(ERROR);/*ON $DKEND CARD                      */
               IF REVSET AND OUT.CODE=%Add THEN DO;
                    IF REV ~= SUBSTR( CARD,70,2 )
                    THEN DO;
                         CALL CONCAT( LASTKEY,BINASC(KEYBUF.KEYL),KEYBUF.MODU, KEYBUF.SEQ);
                         CALL BINCHAR( KEYBUF.SEQ, 1 );
                         CALL M$DELREC(DEL_REV) ALTRET(ERROR);
                       END;
                  END;
             END;
          CALL INCPTR;
        END;
     RETURN;
INCMPL: DO I=0 TO TBLCNT-1;             /* Can't find end of range module     */
          IF TBL.EMOD(I)=ENDMOD THEN DO;
               ERR_CODE.ERR#=%E$ENDMISS;
               CALL XUR$ERRMSG(ERR_CODE);
/*E*    ERROR:  XXX-E$ENDMISS
      MESSAGE:Can't find end of range module for following firmware
                file. Output file may be wrong.
                                                                  */
               OUTBUF=TBL.FNAME(I);
               CALL M$WRITE(MSG_FPT);
               OUTBUF=TBL.BMOD(I);
               CALL M$WRITE(MSG_FPT);
               OUTBUF=TBL.EMOD(I);
               CALL M$WRITE(MSG_FPT);
             END;
        END;
ERROR: ALTRETURN;
END GETFW;
 
VECTORIZE: PROC ALTRET;
                                   /* Get data segment for building cmd table */
     IF TBLCNT<0 THEN DO;
          VLP_VECTOR.PTR$=ADDR(NIL);
          CALL M$GDS(FPT_GDS)ALTRET(NOSPACE);
          PAGE=1;
          TBLCNT=0;
        END;
     ELSE DO;
          IF TBLCNT>(PAGE*170) THEN DO; /* a page hold 170 cmd cells         */
               CALL M$GDS(FPT_GDS)ALTRET(NOSPACE);
               PAGE=PAGE+1;
             END;
        END;
                                   /* Vectorize cmd cell to form a cmd table  */
     TBL.FNAME(TBLCNT)=FILE_NAME;
     TBL.BMOD(TBLCNT)=START_MOD;
     TBL.EMOD(TBLCNT)=END_MOD;
     TBL.REV(TBLCNT) = REV;
     TBLCNT=TBLCNT+1;                   /* NEXT AVAIBLE CELL IN TBL*/
     RETURN;
NOSPACE: ALTRETURN;
 
END VECTORIZE;
 
 
ERR_MSG: PROC ALTRET;
 
     CALL XUR$ERRMSG(B$TCB$->B$TCB.ALT$->B$ALT.ERR,
          B$TCB$->B$TCB.ALT$->B$ALT.DCB#,DCBNUM(M$LO),,,,);
END ERR_MSG;
 
CHKCMPL: PROC ALTRET;
                              /* Check completion status for each cmd cell    */
     DO I=0 TO TBLCNT-1;
          IF TBL.STATU(I)~='DONE' THEN DO;
               ERR_CODE.ERR#=%E$NOTDONE;
               CALL XUR$ERRMSG(ERR_CODE);
/*E* ERROR:   XXX-E$NOTDONE
 MESSAGE: did not find following firmware on specified file. Output file may be wrong.
                                                                 */
               OUTBUF=TBL.FNAME(I);
               CALL M$WRITE(MSG_FPT);
               OUTBUF=TBL.BMOD(I);
               CALL M$WRITE(MSG_FPT);
               OUTBUF=TBL.EMOD(I);
               CALL M$WRITE(MSG_FPT);
               ALTRETURN;
             END;
          TBL.STATU(I)=' ';
        END;
END CHKCMPL;
 
LISTFILE: PROC ALTRET;
                                        /* Open output listing file           */
     IF DCBADDR(DCBNUM(M$LO))->F$DCB.FCD#
     THEN CALL M$CLOSE(LIST_CLOSE)ALTRET(MONERR);
     LIST_FID.TEXTFID_=VECTOR(OUT.SUBLK$(2)->SYM.TEXT);
     CALL M$FID(LIST_FID)ALTRET(MONERR);
     CALL M$OPEN(LIST_OPEN)ALTRET(MONERR);
     RETURN;
MONERR: CALL ERR_MSG;
     ALTRETURN;
END LISTFILE;
 
CLSLIST: PROC ALTRET;
                                        /* Close output listing file          */
%FPT_OPEN(REASSIGN=YES,SCRUB=YES
        ,FPTN=TERM_OPEN,FUN=CREATE,EXIST=OLDFILE,DCB=M$LO);
 
     CALL M$CLOSE(LIST_CLOSE)ALTRET(MONERR);
     CALL M$OPEN(TERM_OPEN)ALTRET(MONERR);
     RETURN;
MONERR: CALL ERR_MSG;
     ALTRETURN;
END CLSLIST;
 
END FWEDITOR;
