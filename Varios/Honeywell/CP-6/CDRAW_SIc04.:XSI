#define FLEX_COMPRESSED
/* A lexical scanner generated by flex */
 
/* scanner skeleton version:
 * $Header: flex.skel,v 2.0 89/06/20 15:49:46 vern Locked $
 */
 
#include <stdio.h>
 
#define FLEX_SCANNER
 
/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
 
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) /* size of input buffer */
#endif
 
/* returned upon end-of-file */
#define YY_END_TOK 0
 
/* copy whatever the last rule matched to the standard output */
 
#define ECHO fputs( yytext, yyout )
 
/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#define YY_INPUT(buf,result,max_size) \
  if ((result = fread (buf, (size_t) 1, (size_t)max_size, yyin)) <0) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );
#define YY_NULL 0
#define yyterminate() return ( YY_NULL )
 
/* report a fatal error */
#define YY_FATAL_ERROR(msg) \
	{ \
	fputs( msg, stderr ); \
	putc( '\n', stderr ); \
	exit( 1 ); \
	}
 
/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1
 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *
 
/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
 
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE goto new_file
 
/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#ifdef __STDC__
#define YY_DECL int yylex( void )
#else
#define YY_DECL int yylex()
#endif
 
/* code executed at the end of each rule */
#define YY_BREAK break;
 
#define YY_END_OF_BUFFER_CHAR 0
 
/* done after the current pattern has been matched and before the
 * corresponding action - sets up yytext
 */
#define YY_DO_BEFORE_ACTION \
	yytext = yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;
 
/* returns the length of the matched text */
#define yyleng (yy_cp - yy_bp)
 
#define EOB_ACT_RESTART_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
 
/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	{ \
	*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
	yy_c_buf_p = yy_cp = yy_bp + n; \
	YY_DO_BEFORE_ACTION; /* set up yytext again */ \
	}
 
#define unput(c) yyunput( c, yy_bp )
 
#define YY_USER_ACTION
 
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
char *yytext;
register char *yy_cp, *yy_bp;
 
#ifndef __STDC__
#define const
#endif
 
# line 1 "CDRAW_SIl04.:XSI"
#define INITIAL 0
# line 2 "CDRAW_SIl04.:XSI"
  /*M*    cdraw$lex:l -- lex rules for looking for structs      */
 
#ifdef TS_CP6
#include "CDRAW_Cc07"
#include "CDRAW_Cc06"
#include "CDRAW_Cc08"
#include "CDRAW_Cc09"
#else
#include "cdraw.h"
#include "alloc.h"
#include "struct.h"
#include "sym.h"
#endif
 
#ifdef __STDC__
#include <stdlib.h>
 
#else
  char *realloc();
 
#endif
 
#undef yywrap
 
 
  int   LineNo = 1, TotalLines = 0;
  int   Depth  = 0, SDepth = 0;
  int   Struct = 0;
  int   IdCol = 0, SIdCol = 0;
  int   ForceNL = 0, InComment;
  int   GotName = 0, ItsaPointer = 0, ItsanArray = 0, NextIsTag = 0;
  int   TagNameLen = 0, StructNameLen = 0;
  int   ItsBitf = 0, ItsBitNo = -2, ItsBitPos = 0;
  struct   BF {
     int      ItsBitf; /* Set if its a bit field  */
     int      ItsBitNo;   /* Possible bit number  */
     int      ItsBitPos;  /* start of bit expresion  */
     }  BitField = {0, -2, 0};
 
 
  char  StructName[100], TagName[100];
  char  **StructMembers;  /* Pointers to pointers to names */
  enum  Phase {STRUCT_LOOKING, STRUCT_MAYBE_DEFN, STRUCT_DEFN}
        StructPhase = STRUCT_LOOKING;
  int   UnionFlag  = 0;
 
  struct   lex_stack   {
     struct lex_stack *next;
     int               lx_class;   /* 0=struct, 1=union */
     struct StructSym *lx_struct;
     struct StructTag **lx_tag;
     };
 
  struct   lex_stack  *lex_stack = 0;
  struct   StructSym   *ThisStruct = 0;
  struct   alloc_descriptor alloc_lex_stack =
              INIT_alloc_descriptor(10, struct lex_stack, 1);
 
  struct   alloc_descriptor allocStructSym =
              INIT_alloc_descriptor(25, struct StructSym, 1);
  struct   alloc_descriptor allocStructTag =
              INIT_alloc_descriptor(25, struct StructTag, 1);
 
#define AllocLexStack()   (struct lex_stack *)Allocator(&alloc_lex_stack)
#define AllocStructSym()  (struct StructSym *) Allocator(&allocStructSym)
#define AllocStructTag()  (struct StructTag *) Allocator(&allocStructTag)
#define FreeLexStack(blk) Free(&alloc_lex_stack,blk)
 
  int   NStructs;
 
 
  char  *LineBuf = 0;     /* to hold declaration  */
  char   LineBufSize = 0;
  char   LineBufPos  = 0;
 
  int    ExpandLineBuf ProToType( (int) );
  int    Str2LineBuf ProToType( (char *, int) );
  int    Char2LineBuf ProToType( (int) );
 
  struct HashTable NameHash = HASH_SIZE;
 
  struct StructSym *BuildStructSym ProToType( (char *, int, char *, int) );
  struct StructTag *BuildStructTag ProToType( (char *, int, char *, struct StructSym*,struct BF*,int) );
 
# line 88 "CDRAW_SIl04.:XSI"
#define YY_END_OF_BUFFER 25
typedef int yy_state_type;
static const short int yy_accept[51] =
    {   0,
        0,    0,   25,   23,   20,    1,   19,    4,   22,    3,
       18,   13,   15,   23,   21,    6,   16,   17,   14,   22,
       22,   22,   22,    7,    8,    5,   22,    2,   21,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,    9,   22,   11,   22,   12,   22,   22,   10,    0
    } ;

static const char yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    7,    1,    1,    8,    9,
        1,   10,    1,   11,    1,    1,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,    1,
       16,    1,    1,    1,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       17,    1,    1,    1,    7,    1,   18,    7,   19,    7,

       20,    7,    7,    7,   21,    7,    7,   22,    7,   23,
       24,    7,    7,   25,   26,   27,   28,   29,    7,    7,
        7,    7,   30,    1,   31,    1,    1
    } ;

static const char yy_meta[32] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
        1,    1,    2,    1,    1,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1
    } ;

static const short int yy_base[52] =
    {   0,
        0,   51,   56,   58,   58,   58,   58,   58,    0,   58,
       58,   58,   58,   45,   41,   58,   58,   58,   58,   29,
       25,   28,   26,   58,   58,   58,    0,   58,   36,   25,
       22,   25,   23,   18,   15,   18,   23,   13,   20,   15,
       10,    0,    9,    0,   14,    0,   12,   13,    0,   58,
       30
    } ;

static const short int yy_def[52] =
    {   0,
       50,    1,   50,   50,   50,   50,   50,   50,   51,   50,
       50,   50,   50,   50,   51,   50,   50,   50,   50,   51,
       51,   51,   51,   50,   50,   50,   51,   50,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,    0,
       50
    } ;

static const short int yy_nxt[90] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    9,   20,    9,
        9,    9,    9,    9,    9,   21,    9,   22,   23,   24,
       25,   27,   49,   48,   47,   46,   45,   44,   43,   42,
       41,   40,   39,   38,   37,   36,   35,   34,   29,   33,
       32,   31,   30,   29,   28,   50,   26,    3,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50
    } ;

static const short int yy_chk[90] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   51,   48,   47,   45,   43,   41,   40,   39,   38,
       37,   36,   35,   34,   33,   32,   31,   30,   29,   23,
       22,   21,   20,   15,   14,    3,    2,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50
    } ;

/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
 
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
static char *yy_c_buf_p;	/* points to current character in buffer */
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */
 
/* true when we've seen an EOF for the current input file */
static int yy_eof_has_been_seen;
 
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
 
/* yy_ch_buf has to be 2 characters longer than YY_BUF_SIZE because we need
 * to put in 2 end-of-buffer characters (this is explained where it is
 * done) at the end of yy_ch_buf
 */
static char yy_ch_buf[YY_BUF_SIZE + 2];
 
/* yy_hold_char holds the character lost when yytext is formed */
static char yy_hold_char;
 
static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;
 
#ifdef __STDC__
static yy_state_type yy_get_previous_state( void );
static int yy_get_next_buffer( void );
static void yyunput( int c, char *buf_ptr );
static int input( void );
static void yyrestart( FILE *input_file );
#else
static yy_state_type yy_get_previous_state();
static int yy_get_next_buffer();
static void yyunput();
static int input();
static void yyrestart();
#endif
 
YY_DECL
    {
    register yy_state_type yy_current_state;
    register int yy_act;
 

 
    if ( yy_init )
	{
	if ( ! yy_start )
	    yy_start = 1;	/* first start state */
 
	if ( ! yyin )
	    yyin = stdin;
 
	if ( ! yyout )
	    yyout = stdout;
 
new_file:
	/* this is where we enter upon encountering an end-of-file and
	 * yywrap() indicating that we should continue processing
	 */
 
	/* we put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */
 
	yy_ch_buf[0] = '\n';
	yy_n_chars = 1;
 
	/* we always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
 
	yy_eof_has_been_seen = 0;
 
	yytext = yy_c_buf_p = &yy_ch_buf[1];
	yy_hold_char = *yy_c_buf_p;
	yy_init = 0;
	}
 
    while ( 1 )		/* loops until end-of-file is reached */
	{
	yy_cp = yy_c_buf_p;
 
	/* support of yytext */
	*yy_cp = yy_hold_char;
 
	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;
 
	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
	    ++yy_current_state;
	do
	    {
	    register char yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 51 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 50 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
 
	/* bogus while loop to let YY_BACK_TRACK, EOB_ACT_LAST_MATCH,
	 * and EOF actions branch here without introducing an optimizer-
	 * daunting goto
	 */
	while ( 1 )
	    {
	    yy_act = yy_accept[yy_current_state];
 
	    YY_DO_BEFORE_ACTION;
	    YY_USER_ACTION;
 
#ifdef FLEX_DEBUG
	    fprintf( stderr, "--accepting rule #%d (\"%s\")\n",
		     yy_act, yytext );
#endif
 
do_action:	/* this label is used only to access EOF actions */
	    switch ( yy_act )
		{
		case 0: /* must backtrack */
		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;
		continue; /* go to "YY_DO_BEFORE_ACTION" */

case 1:
# line 89 "CDRAW_SIl04.:XSI"
LineNo++;
	YY_BREAK
case 2:
# line 90 "CDRAW_SIl04.:XSI"
{
                    int c = 0;
                    InComment++;
                    do {
                          if (c != '*')
                             while ('*' != MyInput());
                       }  while ('/' != (c = MyInput()));
                    InComment = 0;
                 }
	YY_BREAK
case 3:
# line 100 "CDRAW_SIl04.:XSI"
case 4:
# line 100 "CDRAW_SIl04.:XSI"
{
                    int ec = yytext[0], pc = 0, c;
 
                    if (ForceNL) DoNewLine();
                    if (Struct) Char2LineBuf(ec);
                    while (ec != (c = MyInput()) || pc == '\\')
                       pc = c;
                 }
	YY_BREAK
case 5:
# line 108 "CDRAW_SIl04.:XSI"
{
                    int  c, pc;
                    InComment++;
                    while ('\n' != (c = MyInput()) || pc == '\\')
                       pc = c;
                 }
	YY_BREAK
case 6:
# line 114 "CDRAW_SIl04.:XSI"
{
                 if (ForceNL) DoNewLine();
                 if (Struct) {
                    BitField.ItsBitf++;
                    BitField.ItsBitNo = -2;
                    Char2LineBuf(':');
                    BitField.ItsBitPos = LineBufPos;
                    GotName++;
                    }
              }
	YY_BREAK
case 7:
# line 124 "CDRAW_SIl04.:XSI"
{  Depth++;
                 if (Struct) SDepth++;
 
                 if (ForceNL) DoNewLine();
                 if (Struct) {
                    Char2LineBuf('{');
                    }
                 if (StructPhase == STRUCT_MAYBE_DEFN)  {
                    if (!StructName[0] && !Struct)  {
                       fprintf(stderr,
                               "Skipping unnamed struct on line %d\n",
                               LineNo);
                       }
                    else if (Depth > 1 && !Struct)  {
                       fprintf(stderr,
                               "Skipping non-global struct %s on line %d\n",
                                StructName, LineNo);
                       }
                    else  {
                       struct lex_stack *stack = AllocLexStack();
                       struct StructSym *ss;
                       stack->next     = lex_stack;
                       stack->lx_class = UnionFlag;
                       stack->lx_tag   = 0;
                       if (lex_stack) lex_stack->lx_tag = StructTagIns;
                       lex_stack       = stack;
                       if (Struct) {
                          ForceNL++;
                          SIdCol = 0;
                          }
                       StructPhase = STRUCT_DEFN;
                       if (!ForceNL)  {
                          Str2LineBuf((UnionFlag? "union  ":"struct "), 7);
                          Str2LineBuf(StructName, strlen(StructName));
                          Str2LineBuf(" {", 2);
                          ForceNL++; SIdCol = 0;
                          }
                       LineBuf[LineBufPos] = 0;
                       lex_stack->lx_struct = BuildStructSym(StructName,
                                                strlen(StructName),
                                                LineBuf, UnionFlag);
                       Struct++, SDepth++;
                       }
                 }
              }
	YY_BREAK
case 8:
# line 169 "CDRAW_SIl04.:XSI"
{  Depth--;
                 if (ForceNL) DoNewLine();
                 if (Struct) {
                    struct lex_stack *p = lex_stack;
                    ThisStruct = lex_stack->lx_struct;
                    lex_stack = p->next;
                    if (lex_stack) StructTagIns = lex_stack->lx_tag;
                    FreeLexStack(p);
                    Char2LineBuf('}');
                    if (!lex_stack) {
                       SDepth = 0;
                       Struct = 0;
                       StructPhase = STRUCT_LOOKING;
                       Str2LineBuf(";\n", 2);
                       DoNewLine();
                    }
                 }
              }
	YY_BREAK
case 9:
# line 188 "CDRAW_SIl04.:XSI"
case 10:
# line 188 "CDRAW_SIl04.:XSI"
{
                    if (ForceNL) DoNewLine();
                    if (Struct)  Str2LineBuf( yytext, yyleng );
                 }
	YY_BREAK
case 11:
# line 193 "CDRAW_SIl04.:XSI"
case 12:
# line 193 "CDRAW_SIl04.:XSI"
{
                    if (ForceNL) DoNewLine();
                    ThisStruct = 0;
                    if (Struct)
                       Str2LineBuf(yytext, yyleng);
                    StructPhase = STRUCT_MAYBE_DEFN;
                    StructName[0] = 0;
                    UnionFlag = yytext[0] == 'u';
                 }
	YY_BREAK
case 13:
# line 203 "CDRAW_SIl04.:XSI"
case 14:
# line 204 "CDRAW_SIl04.:XSI"
case 15:
# line 205 "CDRAW_SIl04.:XSI"
case 16:
# line 206 "CDRAW_SIl04.:XSI"
case 17:
# line 206 "CDRAW_SIl04.:XSI"
{  int c = yytext[0];
                    if (ForceNL) DoNewLine();
                    if (StructPhase == STRUCT_MAYBE_DEFN)
                       StructPhase = STRUCT_LOOKING;
                    if (Struct) {
                       Char2LineBuf(c);
                       if (c == ';' || c == ',') {
                          ForceNL++;
                          LineBuf[LineBufPos] = 0;
                          if (!BitField.ItsBitf)
                             BitField.ItsBitNo = -1;
                          BuildStructTag(TagName, TagNameLen,
                                   LineBuf,
                                   (ItsaPointer? 0 :ThisStruct),
                                   &BitField,
                                   ItsanArray
                                   );
                          TagName[0] = 0;
                          GotName=ItsaPointer=NextIsTag=SIdCol = 0;
                          ItsanArray = BitField.ItsBitf = 0;
                          if (c == ',')  /* space out */
                             SIdCol = IdCol;
                          else ThisStruct = 0;
                          }     /* end of ',' or ';' */
                       else if ('*' == yytext[0] && !GotName)
                          ItsaPointer++;
                       else if ('[' == yytext[0] && !GotName)
                          GotName++, ItsanArray++;
                       }
                 }
	YY_BREAK
case 18:
# line 236 "CDRAW_SIl04.:XSI"
{
                    if (ForceNL) DoNewLine();
                    if (Struct) {
                       NextIsTag++;
                       Char2LineBuf(yytext[0]);
                       }
                 }
	YY_BREAK
case 19:
# line 244 "CDRAW_SIl04.:XSI"
case 20:
# line 244 "CDRAW_SIl04.:XSI"
{
                    if (Struct && LineBufPos != 0) {
                       Char2LineBuf(' ');
                       if (yytext[0] == '\t')  {
                          int i = LineBufPos % 3;
                          while (i > 0)
                             Char2LineBuf(' '), i--;
                          }     /* end of if tab  */
                       }        /* end of if outputting */
                 }
	YY_BREAK
case 21:
# line 254 "CDRAW_SIl04.:XSI"
{
                    if (ForceNL)   DoNewLine();
                    if (Struct) {
                       Str2LineBuf(yytext, yyleng);
                     /*if (ItsBitf) ItsBitNo = strtoul(yytext,0,0);*/
                       }
                 }
	YY_BREAK
case 22:
# line 261 "CDRAW_SIl04.:XSI"
{
                    if (StructPhase == STRUCT_MAYBE_DEFN && !StructName[0])  {
                       struct sym_ *sym = lookup_sym(&NameHash, yytext, yyleng, 0);
                       memcpy(StructName, yytext, yyleng+1);
                       StructNameLen = yyleng;
                       if (sym) ThisStruct = sym->sym_user;
                       }
                    if (ForceNL) DoNewLine();
                    if (Struct) {
                       IdCol = LineBufPos;
                       Str2LineBuf(yytext, yyleng);
                       if (!GotName)  {
                          memcpy(TagName, yytext, yyleng+1);
                          TagNameLen = yyleng;
                          if (NextIsTag) GotName++;
                          }
                       }
                 }
	YY_BREAK
case 23:
# line 279 "CDRAW_SIl04.:XSI"
{
                    if (ForceNL) DoNewLine();
                    if (Struct) Char2LineBuf(yytext[0]);
                 }
	YY_BREAK
case 24:
# line 283 "CDRAW_SIl04.:XSI"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
 
		case YY_END_OF_BUFFER:
		    /* undo the effects of YY_DO_BEFORE_ACTION */
		    *yy_cp = yy_hold_char;
 
		    yytext = yy_bp;
 
		    switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
			    {
			    if ( yywrap() )
				{
				/* note: because we've taken care in
				 * yy_get_next_buffer() to have set up yytext,
				 * we can now set up yy_c_buf_p so that if some
				 * total hoser (like flex itself) wants
				 * to call the scanner after we return the
				 * YY_NULL, it'll still work - another YY_NULL
				 * will get returned.
				 */
				yy_c_buf_p = yytext;
 
				yy_act = YY_STATE_EOF((yy_start - 1) / 2);
				goto do_action;
				}
 
			    else
				YY_NEW_FILE;
			    }
			    break;
 
			case EOB_ACT_RESTART_SCAN:
			    yy_c_buf_p = yytext;
			    yy_hold_char = *yy_c_buf_p;
			    break;
 
			case EOB_ACT_LAST_MATCH:
			    yy_c_buf_p = &yy_ch_buf[yy_n_chars];
 
			    yy_current_state = yy_get_previous_state();
 
			    yy_cp = yy_c_buf_p;
			    yy_bp = yytext;
			    continue; /* go to "YY_DO_BEFORE_ACTION" */
			}
		    break;
 
		default:
		    printf( "action # %d\n", yy_act );
		    YY_FATAL_ERROR( "fatal flex scanner internal error" );
		}
 
	    break; /* exit bogus while loop */
	    }
	}
    }
 
 
/* yy_get_next_buffer - try to read in new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH -
 *     EOB_ACT_RESTART_SCAN - restart the scanner
 *     EOB_ACT_END_OF_FILE - end of file
 */
 
static int yy_get_next_buffer()
 
    {
    register char *dest = yy_ch_buf;
    register char *source = yytext - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;
 
    if ( yy_c_buf_p != &yy_ch_buf[yy_n_chars + 1] )
	{
	YY_FATAL_ERROR( "NULL in input" );
	/*NOTREACHED*/
	}
 
    /* try to read more data */
 
    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yytext;
 
    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);
 
    if ( yy_eof_has_been_seen )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;
 
    else
	{
	int num_to_read = YY_BUF_SIZE - number_to_move - 1;
 
	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;
 
	/* read in more data */
	YY_INPUT( (&yy_ch_buf[number_to_move]), yy_n_chars, num_to_read );
	}
 
    if ( yy_n_chars == 0 )
	{
	if ( number_to_move == 1 )
	    ret_val = EOB_ACT_END_OF_FILE;
	else
	    ret_val = EOB_ACT_LAST_MATCH;
 
	yy_eof_has_been_seen = 1;
	}
 
    else
	ret_val = EOB_ACT_RESTART_SCAN;
 
    yy_n_chars += number_to_move;
    yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
 
    /* yytext begins at the second character in
     * yy_ch_buf; the first character is the one which
     * preceded it before reading in the latest buffer;
     * it needs to be kept around in case it's a
     * newline, so yy_get_previous_state() will have
     * with '^' rules active
     */
 
    yytext = &yy_ch_buf[1];
 
    return ( ret_val );
    }
 
 
/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */
 
static yy_state_type yy_get_previous_state()
 
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;
 
    register char *yy_bp = yytext;

    yy_current_state = yy_start;
    if ( yy_bp[-1] == '\n' )
	++yy_current_state;
 
    for ( yy_cp = yytext; yy_cp < yy_c_buf_p; ++yy_cp )
	{
	register char yy_c = yy_ec[*yy_cp];
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 51 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	}
 
    return ( yy_current_state );
    }
 
 
#ifdef __STDC__
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
 
    {
    register char *yy_cp = yy_c_buf_p;
 
    *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
 
    if ( yy_cp < yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register char *dest = &yy_ch_buf[YY_BUF_SIZE + 2];
	register char *source = &yy_ch_buf[number_to_move];
 
	while ( source > yy_ch_buf )
	    *--dest = *--source;
 
	yy_cp += dest - source;
	yy_bp += dest - source;
 
	if ( yy_cp < yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}
 
    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';
 
    *--yy_cp = c;
 
    YY_DO_BEFORE_ACTION; /* set up yytext again */
    }
 
 
static int input()
 
    {
    int c;
    char *yy_cp = yy_c_buf_p;
 
    *yy_cp = yy_hold_char;
 
    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{ /* need more input */
	yytext = yy_c_buf_p;
	++yy_c_buf_p;
 
	switch ( yy_get_next_buffer() )
	    {
	    /* this code, unfortunately, is somewhat redundant with
	     * that above
	     */
	    case EOB_ACT_END_OF_FILE:
		{
		if ( yywrap() )
		    {
		    yy_c_buf_p = yytext;
		    return ( EOF );
		    }
 
		yy_ch_buf[0] = '\n';
		yy_n_chars = 1;
		yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
		yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
		yy_eof_has_been_seen = 0;
		yytext = yy_c_buf_p = &yy_ch_buf[1];
		yy_hold_char = *yy_c_buf_p;
 
		return ( input() );
		}
		break;
 
	    case EOB_ACT_RESTART_SCAN:
		yy_c_buf_p = yytext;
		break;
 
	    case EOB_ACT_LAST_MATCH:
		YY_FATAL_ERROR( "unexpected last match in input()" );
	    }
	}
 
    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;
 
    return ( c );
    }
 
 
#ifdef __STDC__
static void yyrestart( FILE *input_file )
#else
static void yyrestart( input_file )
FILE *input_file;
#endif
 
    {
    if ( yyin != stdin )
	fclose( yyin );
 
    yyin = input_file;
    yy_init = 1;
    }
 
# line 283 "CDRAW_SIl04.:XSI"

 
MyInput()  {
  int c = input();
  if (c == EOF)  {
     fprintf(stderr, "Processing completed (something is wrong)\n");
     exit(4);
     }
  if (Struct && !InComment) {
     if (c != '\n')
        Char2LineBuf(c);
     else DoNewLine();
     }
  if (c == '\n') LineNo++;
  return c;
}
 
 
 
DoNewLine()   {
  Str2LineBuf("\n", 2);
  if (print_all)
     fputs(LineBuf, stdout);
  LineBufPos = 0;
 
  if (SIdCol) {
     while (SIdCol > 0 && !isspace(LineBuf[SIdCol-1])) SIdCol --;
     memset(LineBuf, ' ', SIdCol), LineBufPos = SIdCol;
     }
  ForceNL = 0;
}
 
 
 
/*D* NAME:       yywrap()
     PURPOSE:    To handle switching to other files specified
                 on the command line.
     DESCRIPTION:
        The command line file names are communicated via the
        variables FileNames and FileCount.  When all files have
        been processed, EOF is signaled by returning 1.
*/
 
yywrap()   {
 
  TotalLines += --LineNo;
  fprintf(stderr, "End of file %s on line %d\n",
        CurrentFid, LineNo);
  FileCount--;
  if (FileCount > 0)   {
     int fidlen;
     CurrentFid = *++FileNames;
     fidlen = strlen(CurrentFid);
     maxFid = MAX(maxFid, fidlen);
     if (!freopen(CurrentFid, "r", stdin))
        fatal("Can't open file: %s\n", CurrentFid);
     LineNo     = 1;
     return 0;
     }
  fprintf(stderr, "Total Lines processed = %d\n", TotalLines);
  return 1;
}
 
 
 
Str2LineBuf(text, len)
  char *text;
  int   len;
{
  if ((LineBufPos + len) >= LineBufSize)
     ExpandLineBuf(len);
  memcpy( LineBuf+LineBufPos, text, len);
  LineBufPos += len;
}
 
Char2LineBuf(ch)
  int ch;
{
 
  if ((LineBufPos + 1) >= LineBufSize)
     ExpandLineBuf(1);
  LineBuf[LineBufPos++] = ch;
}
 
ExpandLineBuf(len)
  int   len;
{
  int   i = LineBufSize + 1 + (len > 500) ? len+500 : 500;
  char *b = (char *) (LineBuf) ? realloc(LineBuf, i) : malloc(i);
 
  if (!b)
     fatal("Out of Memory");
 
  LineBufSize = i-1;
  LineBuf     = b;
}
 
 
 
struct StructSym *
BuildStructSym(name, len, dcl, class)
  char *name;
  int   len;
  char *dcl;
  int   class;
{
  int                 dlen = strlen(dcl);
  struct sym_         *sym = lookup_sym(&NameHash, name, len, 2);
  static CONST struct StructSym     constStructSym;
  struct StructSym    *rs = AllocStructSym();
 
  *rs             = constStructSym;
  rs->ss_filename = CurrentFid;
  rs->ss_lineno   = LineNo;
  rs->ss_name     = sym->sym_text;
  rs->ss_nmlen    = len;
  rs->ss_dcl      = AllocString( dlen+1, dcl);
  rs->ss_maxwidth = dlen;
  rs->ss_class    = class;
 
  if (!sym->sym_user)
     sym->sym_user = (struct sym_ *) rs;
  else if (len)
     fprintf(stderr, "*** Multiple definitions of %s %s\n",
                    (class ? "union" : "struct"),       name);
 
  *StructSymIns = rs;
  StructSymIns  = &rs->next;
  StructTagIns  = &rs->ss_tag;
  maxStruct     = MAX(maxStruct, len);
  return rs;
}
 
 
 
struct StructTag *
BuildStructTag(name, len, dcl, tp, bt, arr)
  char             *name;
  int               len;
  char             *dcl;
  struct StructSym *tp;
  struct BF        *bt;
  int               arr;
{
  int              dlen = strlen(dcl);
  struct sym_      *sym = lookup_sym(&NameHash, name, len, 2);
  struct StructTag *rs  = AllocStructTag();
 
  rs->next      = 0;
  rs->sm_struct = lex_stack->lx_struct;
  rs->sm_type   = tp;
  rs->sm_name   = sym->sym_text;
  rs->sm_nmlen  = len;
  rs->sm_bitno  = bt->ItsBitNo;
  rs->sm_bitexp = 0;
  if (bt->ItsBitf)  {  /* save away expression for bit field size */
     int bp = bt->ItsBitPos;
     int chs = dcl[dlen-1];
     dcl[dlen-1] = 0;  /* zap "," or ";" */
     rs->sm_bitexp = AllocString(dlen-bp, dcl+bp);
     dcl[dlen-1] = chs;
     }
  rs->sm_array  = arr;
  rs->sm_dcl    = AllocString( dlen+1, dcl);
  rs->sm_dcllen = dlen;
  rs->sm_lineno = LineNo;
 
  *StructTagIns = rs;
  StructTagIns  = &rs->next;
  maxTag        = MAX(maxTag, len);
  return rs;
}
 
 
 
int
isspace(c)
  int   c;
{
  if (c == ' ' || c == '\t')
     return 1;
  else return 0;
}
