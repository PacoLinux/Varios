

10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               1    
    1      /* $Header: mkcalls.c,v 1.6 87/03/29 12:55:25 ceriel Exp $ */
    2      /*
    3       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    4       * See the copyright notice in the ACK home directory, in the file "Copyright".
    5       */
    6      /*  makecalls: expand a datastructure as delivered by "EM_getline"
    7       into calls to the procedural interface.
    8       Exported routine:
    9          EM_mkcalls
   10      */
   11
   12      #include <em_spec.h>
   13      #include <em_mnem.h>
   14      #include <em_pseu.h>
   15      #include <em_flag.h>
   16      #include "em_ptyp.h"
   17      #include <em.h>
   18      #include "em_comp.h"
   19      #include <assert.h>
   20
   21      extern char em_flag[];   /* One per EM instruction: indicates parameter kind */
   22      extern short em_ptyp[];  /* One per parameter kind: indicates parameter type */
   23
   24      static int listtype = 0; /* indicates pseudo when generating code for
   25                   variable length argument lists
   26                   (only for MES)
   27                */
   28
   29      #ifdef CHECKING
   30      /*  c_getarg: Check the argument indicated by "args".
   31       The argument must be of a type allowed by "typset".
   32       Return a pointer to the next argument.
   33      */
   34      PRIVATE struct e_args *
   35      c_getarg(args, typset)
   36       register struct e_args *args;
   37      {
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               2    
   38
   39       if (((!typset) && args) ||
   40           ((!args) && typset)) {
   41          /* End of arguments expected, but there are more, or
   42             an argument expected, but there is none
   43          */
   44          EM_error = "Illegal number of parameters";
   45          return 0;
   46       }
   47
   48       if (!args) return 0;
   49       if (!(args->em_argtype & typset)) {
   50          /* Type error */
   51          EM_error = "Illegal parameter type";
   52       }
   53
   54       return args->em_next;
   55      }
   56      #else not CHECKING
   57      #define c_getarg(arg, x) ((arg) ? (arg)->em_next : (arg))
   58      #endif CHECKING
   59
   60      /*  EM_doinstr: An EM instruction
   61      */
   62      PRIVATE
   63      EM_doinstr(opcode, arg)
   64       register struct e_args *arg;
   65      {
   66       register int parametertype;   /* parametertype of the instruction */
   67       register struct e_args *args;
   68
   69       parametertype = em_flag[opcode-sp_fmnem] & EM_PAR;
   70      #ifdef CHECKING
   71       if (parametertype != PAR_NO && parametertype != PAR_W) {
   72          if (!arg) {
   73             EM_error = "Illegal number of parameters";
   74             return;
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               3    
   75          }
   76       }
   77      #endif CHECKING
   78       switch(parametertype) {
   79          case PAR_NO:
   80             break;
   81          default:
   82             args = c_getarg(arg, em_ptyp[parametertype]);
   83             args = c_getarg(args, 0);
   84             break;
   85          case PAR_W:
   86             if (arg) {
   87                args = c_getarg(arg, cst_ptyp);
   88                args = c_getarg(args, 0);
   89             }
   90             else {
   91      #include "C_mnem_narg"
   92                return;
   93             }
   94             break;
   95       }
   96      #include "C_mnem"
   97      }
   98
   99      PRIVATE
  100      EM_dopseudo(opcode, args)
  101       register struct e_args *args;
  102      {
  103       register struct e_args *arg;
  104
  105       switch(opcode) {
  106          case ps_exc: {
  107             register struct e_args *args2;
  108
  109             arg = c_getarg(args, cst_ptyp);
  110             args2 = c_getarg(arg, cst_ptyp);
  111             args2 = c_getarg(args2, 0);
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               4    
  112             C_exc(args->em_cst, arg->em_cst);
  113             break;
  114          }
  115          case ps_hol: {
  116             register struct e_args *args2, *args3;
  117
  118             arg = c_getarg(args, cst_ptyp);
  119             args2 = c_getarg(arg, par_ptyp);
  120             args3 = c_getarg(args2, cst_ptyp);
  121             args3 = c_getarg(args3, 0);
  122             switch(arg->em_argtype) {
  123                 case cst_ptyp:
  124                C_hol_cst(args->em_cst,
  125                     arg->em_cst,
  126                     (int) (args2->em_cst));
  127                break;
  128                 case ico_ptyp:
  129                C_hol_icon(args->em_cst,
  130                      arg->em_str,
  131                      arg->em_size,
  132                      (int)(args2->em_cst));
  133                break;
  134                 case uco_ptyp:
  135                C_hol_ucon(args->em_cst,
  136                      arg->em_str,
  137                      arg->em_size,
  138                      (int)(args2->em_cst));
  139                break;
  140                 case fco_ptyp:
  141                C_hol_fcon(args->em_cst,
  142                      arg->em_str,
  143                      arg->em_size,
  144                      (int)(args2->em_cst));
  145                break;
  146                 case sof_ptyp:
  147                C_hol_dnam(args->em_cst,
  148                      arg->em_dnam,
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               5    
  149                      arg->em_soff,
  150                      (int)(args2->em_cst));
  151                break;
  152                 case nof_ptyp:
  153                C_hol_dlb(args->em_cst,
  154                     arg->em_dlb,
  155                     arg->em_noff,
  156                     (int)(args2->em_cst));
  157                break;
  158                 case ilb_ptyp:
  159                C_hol_ilb(args->em_cst,
  160                     arg->em_ilb,
  161                     (int)(args2->em_cst));
  162                break;
  163                 case pro_ptyp:
  164                C_hol_pnam(args->em_cst,
  165                      arg->em_pnam,
  166                      (int)(args2->em_cst));
  167                break;
  168                 default:
  169                EM_error = "Illegal parameter type";
  170                break;
  171             }
  172             break;
  173          }
  174          case ps_bss: {
  175             register struct e_args *args2, *args3;
  176
  177             arg = c_getarg(args, cst_ptyp);
  178             args2 = c_getarg(arg, par_ptyp);
  179             args3 = c_getarg(args2, cst_ptyp);
  180             args3 = c_getarg(args3, 0);
  181             switch(arg->em_argtype) {
  182                 case cst_ptyp:
  183                C_bss_cst(args->em_cst,
  184                     arg->em_cst,
  185                     (int)(args2->em_cst));
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               6    
  186                break;
  187                 case ico_ptyp:
  188                C_bss_icon(args->em_cst,
  189                      arg->em_str,
  190                      arg->em_size,
  191                      (int)(args2->em_cst));
  192                break;
  193                 case uco_ptyp:
  194                C_bss_ucon(args->em_cst,
  195                      arg->em_str,
  196                      arg->em_size,
  197                      (int)(args2->em_cst));
  198                break;
  199                 case fco_ptyp:
  200                C_bss_fcon(args->em_cst,
  201                      arg->em_str,
  202                      arg->em_size,
  203                      (int)(args2->em_cst));
  204                break;
  205                 case sof_ptyp:
  206                C_bss_dnam(args->em_cst,
  207                      arg->em_dnam,
  208                      arg->em_soff,
  209                      (int)(args2->em_cst));
  210                break;
  211                 case nof_ptyp:
  212                C_bss_dlb(args->em_cst,
  213                     arg->em_dlb,
  214                     arg->em_noff,
  215                     (int)(args2->em_cst));
  216                break;
  217                 case ilb_ptyp:
  218                C_bss_ilb(args->em_cst,
  219                     arg->em_ilb,
  220                     (int)(args2->em_cst));
  221                break;
  222                 case pro_ptyp:
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               7    
  223                C_bss_pnam(args->em_cst,
  224                      arg->em_pnam,
  225                      (int)(args2->em_cst));
  226                break;
  227                 default:
  228                EM_error = "Illegal parameter type";
  229                break;
  230             }
  231             break;
  232          }
  233          case ps_end:
  234             if (args) {
  235                arg = c_getarg(args, cst_ptyp);
  236                arg = c_getarg(arg, 0);
  237                C_end(args->em_cst);
  238                break;
  239             }
  240             C_end_narg();
  241             break;
  242          case ps_exa:
  243          case ps_ina:
  244             arg = c_getarg(args, lab_ptyp);
  245             arg = c_getarg(arg, 0);
  246             if (args->em_argtype == nof_ptyp) {
  247                if (opcode == ps_exa) {
  248                   C_exa_dlb(args->em_dlb);
  249                }
  250                else  C_ina_dlb(args->em_dlb);
  251                break;
  252             }
  253             if (opcode == ps_exa) {
  254                C_exa_dnam(args->em_dnam);
  255             }
  256             else  C_ina_dnam(args->em_dnam);
  257             break;
  258          case ps_exp:
  259          case ps_inp:
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               8    
  260             arg = c_getarg(args, pro_ptyp);
  261             arg = c_getarg(arg, 0);
  262             if (opcode == ps_exp) {
  263                C_exp(args->em_pnam);
  264             }
  265             else  C_inp(args->em_pnam);
  266             break;
  267          case ps_pro:
  268             arg = c_getarg(args, pro_ptyp);
  269             if (arg) {
  270                struct e_args *args2;
  271
  272                args2 = c_getarg(arg, cst_ptyp);
  273                args2 = c_getarg(args2, 0);
  274                C_pro(args->em_pnam, arg->em_cst);
  275             }
  276             else  C_pro_narg(args->em_pnam);
  277             break;
  278          case ps_con:
  279             arg = c_getarg(args, val_ptyp);
  280             arg = c_getarg(arg, 0);
  281             switch(args->em_argtype) {
  282                case ilb_ptyp:
  283                   C_con_ilb(args->em_ilb);
  284                   break;
  285                case nof_ptyp:
  286                   C_con_dlb(args->em_dlb, args->em_noff);
  287                   break;
  288                case sof_ptyp:
  289                   C_con_dnam(args->em_dnam, args->em_soff);
  290                   break;
  291                case cst_ptyp:
  292                   C_con_cst(args->em_cst);
  293                   break;
  294                case pro_ptyp:
  295                   C_con_pnam(args->em_pnam);
  296                   break;
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               9    
  297                case str_ptyp:
  298                   C_con_scon(args->em_str, args->em_size);
  299                   break;
  300                case ico_ptyp:
  301                   C_con_icon(args->em_str, args->em_size);
  302                   break;
  303                case uco_ptyp:
  304                   C_con_ucon(args->em_str, args->em_size);
  305                   break;
  306                case fco_ptyp:
  307                   C_con_fcon(args->em_str, args->em_size);
  308                   break;
  309                default:
  310                   EM_error = "Illegal argument type";
  311                   return 0;
  312             }
  313             break;
  314          case ps_rom:
  315             arg = c_getarg(args, val_ptyp);
  316             arg = c_getarg(arg, 0);
  317             switch(args->em_argtype) {
  318                case ilb_ptyp:
  319                   C_rom_ilb(args->em_ilb);
  320                   break;
  321                case nof_ptyp:
  322                   C_rom_dlb(args->em_dlb, args->em_noff);
  323                   break;
  324                case sof_ptyp:
  325                   C_rom_dnam(args->em_dnam, args->em_soff);
  326                   break;
  327                case cst_ptyp:
  328                   C_rom_cst(args->em_cst);
  329                   break;
  330                case pro_ptyp:
  331                   C_rom_pnam(args->em_pnam);
  332                   break;
  333                case str_ptyp:
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               10   
  334                   C_rom_scon(args->em_str, args->em_size);
  335                   break;
  336                case ico_ptyp:
  337                   C_rom_icon(args->em_str, args->em_size);
  338                   break;
  339                case uco_ptyp:
  340                   C_rom_ucon(args->em_str, args->em_size);
  341                   break;
  342                case fco_ptyp:
  343                   C_rom_fcon(args->em_str, args->em_size);
  344                   break;
  345                default:
  346                   EM_error = "Illegal argument type";
  347                   return 0;
  348             }
  349             break;
  350          default:
  351             EM_error = "Illegal pseudo instruction";
  352             break;
  353       }
  354      }
  355
  356      PRIVATE
  357      EM_docon(args)
  358       register struct e_args *args;
  359      {
  360       register struct e_args *arg;
  361
  362       arg = c_getarg(args, val_ptyp);
  363       arg = c_getarg(arg, 0);
  364       switch(args->em_argtype) {
  365          case ilb_ptyp:
  366             C_ilb(args->em_ilb);
  367             break;
  368          case nof_ptyp:
  369             C_dlb(args->em_dlb, args->em_noff);
  370             break;
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               11   
  371          case sof_ptyp:
  372             C_dnam(args->em_dnam, args->em_soff);
  373             break;
  374          case cst_ptyp:
  375             C_cst(args->em_cst);
  376             break;
  377          case pro_ptyp:
  378             C_pnam(args->em_pnam);
  379             break;
  380          case str_ptyp:
  381             C_scon(args->em_str, args->em_size);
  382             break;
  383          case ico_ptyp:
  384             C_icon(args->em_str, args->em_size);
  385             break;
  386          case uco_ptyp:
  387             C_ucon(args->em_str, args->em_size);
  388             break;
  389          case fco_ptyp:
  390             C_fcon(args->em_str, args->em_size);
  391             break;
  392          default:
  393             EM_error = "Illegal argument type";
  394             break;
  395       }
  396      }
  397
  398      PRIVATE
  399      EM_dostartmes(args)
  400       register struct e_args *args;
  401      {
  402       register struct e_args *arg;
  403
  404       if (listtype) {
  405          EM_error = "Message not ended";
  406          return;
  407       }
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               12   
  408       arg = c_getarg(args, cst_ptyp);
  409       arg = c_getarg(arg, 0);
  410       C_mes_begin((int) (args->em_cst));
  411       listtype = ps_mes;
  412      }
  413
  414      EXPORT int
  415      EM_mkcalls(line)
  416       register struct e_instr *line;
  417      {
  418
  419      #ifdef CHECKING
  420       if (listtype && line->em_type != EM_MESARG && line->em_type != EM_ENDMES) {
  421          EM_error = "Message not ended";
  422          return 0;
  423       }
  424      #endif CHECKING
  425       EM_error = 0;
  426       switch(line->em_type) {
  427          default:
  428             EM_error = "Illegal EM line";
  429             break;
  430          case EM_MNEM:
  431             /* normal instruction */
  432             EM_doinstr(line->em_opcode, line->em_args);
  433             break;
  434          case EM_DEFILB:
  435             /* defining occurrence of an instruction label */
  436             C_df_ilb(line->em_deflb);
  437             break;
  438          case EM_DEFDLB:
  439             /* defining occurrence of a global data label */
  440             C_df_dlb(line->em_deflb);
  441             break;
  442          case EM_DEFDNAM:
  443             /* defining occurrence of a non-numeric data label */
  444             C_df_dnam(line->em_defdnam);
10:54 AUG 20 '97 zbm$read$mkcalls:c.:ZBC3TSI                               13   
  445             break;
  446          case EM_PSEU:
  447             /* pseudo */
  448             EM_dopseudo(line->em_opcode, line->em_args);
  449             break;
  450          case EM_STARTMES:
  451             /* start of a MES pseudo */
  452             EM_dostartmes(line->em_arg);
  453             break;
  454          case EM_MESARG:
  455          case EM_ENDMES:
  456      #ifdef CHECKING
  457             if (!listtype) {
  458                EM_error = "Message not started";
  459                return 0;
  460             }
  461      #endif
  462             if (line->em_type == EM_MESARG) {
  463                EM_docon(line->em_arg);
  464                break;
  465             }
  466             C_mes_end();
  467             listtype = 0;
  468             break;
  469       }
  470       if (EM_error) return 0;
  471       return 1;
  472      }
  473

