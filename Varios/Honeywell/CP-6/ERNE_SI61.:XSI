/*M*   $XEFT_GEN_SERIAL Produces the JCL needed in the data center */
%SUB $DAY = %$DAY;
%SUB $DATE = %$DATE;
%EQU FL_NUMBER_FIX_LINES = 20;
%EQU FL_NUMBER_BASE_LINES = 175;
%EQU FL_NUMBER_DAILY_LINES = 550;
%EQU FL_NUMBER_MONTHLY_LINES = 125;
%EQU FL_NUMBER_DUAL_LINES = 125;
%EQU FL_TAPE_JCL_LINES = 10;
%EQU FL_PRECHECK_LINES = 100;
%EQU FL_POST_LINES = 50;
 
/*X*  DMR,PLM=10,IND=4,SDI=2,CTI=8,DCI=4,CSU=2,ECU=2,ENI=4,
      THI=0,DTI=0,IAD=0,CCC,CEI=8,CRM=80,CRT=5       */
XEFT_GEN: PROC MAIN;
    /*P*  NAME: $XEFT_GEN_SERIAL
          PURPOSE:
       It is time to advance to the next stage.  This program will look
    at many dcbs.  If a particular dcb is set to a file, some JCL will be
    written to it.
 
    M$ATAPE    produces JCL for the A system exclusive of ZZZ.
       !BATCH $XEFT_ABACKUP ATAPE = 'AfwB00'
       !"ATCH $XEFT_ABACKUP ATAPE = 'AfwB20'
 
    ETC.  JOB cards are generated, and then some JCL that will
    cause the job to eat its first batch line each time, and
    advance to the next tape set.

 
    M$BTAPE produces the same effect for the B system.
 
    M$ZTAPE produces the same effect for the ZZZ packset.
 
    M$PTAPE produces a somewhat tricky file.  It assumes that
    8 unique purge tapes for the :SYSTAC account are to be
    rotated.  When one is full, the end of tape error will cause
    the $XEFT_PTAPE.SUPPORT file to batch itself.  It batches the
    $XEFT_PURGE_SYS_BASE.SUPPORT job with a new tape serial number. It
    then fixes itself so the next tape is at the top of the list.
    When the list is exhausted, then $XEFT_PTAPE.SUPPORT batches
    itself with a trigger that causes it to regenerate the serial
    numbers it knows about and batch itself again without the
    trigger which causes it to batch $XEFT_PURGE_SYS_BASE.SUPPORT with
    the first tape again.  Once this file is generated, it should
    run forever.
 
    M$MONTH produces the $XMONTHLY JCL.  When it is then executed,
    it fixes itself up so that the next time it's executed, it
    actually batches the correct VAULT jobs with the correct serial
    numbers.
 
    M$WEEK produces the $XDAILY JCL.  When it is executed the first
    time, if fixes itself up so the next time it is run it will have
    the correct tape serial numbers for friday already in place.
 
    This sequence will force all the JCL to get fixed up at least
    once a week, so if no one messes with this program, any mistakes
    should be erased at the end of the week.
 
    Note, if you change the canned $XDAILY section, you should force
    it thru a TUESDAY run by batching it with "SPECIAL = TUESDAY".
    This fixes up the $XDAILY first, then subsequently the other
    jobs.  Note, you will also screw up the current position of
    the $XEFT_ATAPE or $XEFT_BTAPE jobs.  That should not present
    a problem unless you are already on the 2'nd or third tape set.
    Note, the only way you can force TUESDAY twice in one fiscal
    week is by zapping the DEFAULT line of the $XDAILY job.  This
    should prevent most mistakes. ""silly of me to think that"".
    I had forgotten holidays, where we force tuesday on monday,
    which worked.  But when real tuesday occured, the job was
    batched before 1500 so it assumed it was supposed to process
    tuesday again.
 
     */
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%B$TCB;
%B$EXCFR;
 
DCL VSFFISCAL ENTRY(2);
 
DCL M$SI DCB;
DCL M$DO DCB;
DCL M$ATAPE DCB;
DCL M$BTAPE DCB;
DCL M$PTAPE DCB;
DCL M$SAVE_TAPE DCB;
DCL M$VAULT_TAPE DCB;
DCL M$ZTAPE DCB;
DCL M$MONTH DCB;
DCL M$WEEK DCB;
DCL M$DUAL DCB;
 
DCL M$ABASE DCB;
DCL M$BBASE DCB;
DCL M$SCAN DCB;
DCL M$PBASE DCB;
DCL M$SBASE DCB;
DCL M$VBASE DCB;
DCL M$ZBASE DCB;
 
DCL FL_TEMP$ PTR STATIC SYMDEF;         /* Used at each file                  */
DCL B$TCB$ PTR SYMREF;
 
%VLP_ACCT (FPTN=FL_BASE_ACCT,ACCT='SUPPORT',STCLASS = STATIC SYMDEF);
 
%VLP_NAME (FPTN=FL_ABASE,NAME='$XEFT_ABACKUP_BASE',STCLASS = STATIC SYMDEF);
%VLP_NAME (FPTN=FL_BBASE,NAME='$XEFT_BBACKUP_BASE',STCLASS = STATIC SYMDEF);
%VLP_NAME (FPTN=FL_WBASE,NAME='$XDAILY',STCLASS = STATIC SYMDEF);
%VLP_NAME (FPTN=FL_PBASE,NAME='$XEFT_PURGE_SYS_BASE',STCLASS = STATIC SYMDEF);
%VLP_NAME (FPTN=FL_SBASE,NAME='$XEFT_SAVE_ALL',STCLASS = STATIC SYMDEF);
%VLP_NAME (FPTN=FL_VBASE,NAME='$XEFT_VAULT',STCLASS = STATIC SYMDEF);
%VLP_NAME (FPTN=FL_ZBASE,NAME='$XEFT_ZBACKUP_BASE',STCLASS = STATIC SYMDEF);
%VLP_NAME (FPTN=FL_SCAN_SCAN,NAME='$XEFT_SCAN_PRIME',STCLASS = STATIC SYMDEF);
 
DCL TAPE_TYPE CHAR(10) STATIC SYMDEF INIT (' BACKUP');
DCL FL_CHARS CHAR(360) CALIGNED STATIC;
DCL OUTPUT CHAR(108) STATIC;
DCL FISCAL CHAR(10);
DCL DATE CHAR(6) STATIC;
 
DCL I UBIN WORD STATIC SYMDEF;
DCL J UBIN WORD STATIC SYMDEF;
DCL K UBIN WORD STATIC SYMDEF;
 
%F$DCB;
 
%FPT_ERRMSG(FPTN=FL_ERR,CODE=ERR_SYS,OUTDCB1=M$DO,RESULTS=FL_R1,
    BUF=FL_CHARS, STCLASS = STATIC SYMDEF);
%VLP_ERRCODE(FPTN=ERR_SYS,STCLASS = STATIC SYMDEF);
%VLR_ERRMSG(FPTN=FL_R1,STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_STOP_TUESDAY,DCB=M$WEEK,REASSIGN=YES,FUN=IN,TEST=NO,
       NAME=FL_WBASE,ACCT=FL_BASE_ACCT,STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_TEST_MONTH,DCB=M$MONTH,REASSIGN=YES,FUN=CREATE,TEST=NO,
    ORG=CONSEC,ACCT=FL_BASE_ACCT,EXIST=NEWFILE,CTG=YES,ASN=FILE,
    STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_TEST_WEEK,DCB=M$WEEK,REASSIGN=YES,FUN=CREATE,TEST=NO,
     ORG=CONSEC,SCRUB=YES,ACCT=FL_BASE_ACCT,EXIST=NEWFILE,CTG=YES,ASN=FILE,
    STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_TEST_DUAL,DCB=M$DUAL,REASSIGN=YES,FUN=CREATE,TEST=NO,
     ORG=CONSEC,SCRUB=YES,ACCT=FL_BASE_ACCT,EXIST=NEWFILE,CTG=YES,ASN=FILE,
    STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_TEST_SCAN,DCB=M$SCAN,REASSIGN=YES,FUN=CREATE,TEST=NO,
    ORG=CONSEC,ACCT=FL_BASE_ACCT,EXIST=NEWFILE,CTG=YES,ASN=FILE,
    NAME=FL_SCAN_SCAN,
    STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_TEST_A,DCB=M$ATAPE,REASSIGN=YES,FUN=CREATE,TEST=NO);
%FPT_OPEN(FPTN=FL_TEST_B,DCB=M$BTAPE,REASSIGN=YES,FUN=CREATE,TEST=NO);
%FPT_OPEN(FPTN=FL_TEST_P,DCB=M$PTAPE,REASSIGN=YES,FUN=CREATE,TEST=NO);
%FPT_OPEN(FPTN=FL_TEST_S,DCB=M$SAVE_TAPE,REASSIGN=YES,FUN=CREATE,TEST=YES);
%FPT_OPEN(FPTN=FL_TEST_V,DCB=M$VAULT_TAPE,REASSIGN=YES,FUN=CREATE,TEST=YES);
%FPT_OPEN(FPTN=FL_TEST_Z,DCB=M$ZTAPE,REASSIGN=YES,FUN=CREATE,TEST=NO);
 
%FPT_OPEN(FPTN=FL_AFILE,DCB=M$ABASE,REASSIGN=YES,ORG=CONSEC,ACCT=FL_BASE_ACCT,
    NAME=FL_ABASE,FUN=CREATE,EXIST=NEWFILE,CTG=YES,ASN=FILE,TEST=NO,
    STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_BFILE,DCB=M$BBASE,REASSIGN=YES,ORG=CONSEC,ACCT=FL_BASE_ACCT,
    NAME=FL_BBASE,FUN=CREATE,EXIST=NEWFILE,CTG=YES,ASN=FILE,TEST=NO,
    STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_PFILE,DCB=M$PBASE,REASSIGN=YES,ORG=CONSEC,ACCT=FL_BASE_ACCT,
    NAME=FL_PBASE,FUN=CREATE,EXIST=NEWFILE,CTG=YES,ASN=FILE,TEST=NO,
    STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_SFILE,DCB=M$SBASE,REASSIGN=YES,ORG=CONSEC,ACCT=FL_BASE_ACCT,
    NAME=FL_SBASE,FUN=CREATE,EXIST=NEWFILE,CTG=YES,ASN=FILE,TEST=NO,
    STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_VFILE,DCB=M$VBASE,REASSIGN=YES,ORG=CONSEC,ACCT=FL_BASE_ACCT,
    NAME=FL_VBASE,FUN=CREATE,EXIST=NEWFILE,CTG=YES,ASN=FILE,TEST=NO,
    STCLASS = STATIC SYMDEF);
%FPT_OPEN(FPTN=FL_ZFILE,DCB=M$ZBASE,REASSIGN=YES,ORG=CONSEC,ACCT=FL_BASE_ACCT,
    NAME=FL_ZBASE,FUN=CREATE,EXIST=NEWFILE,CTG=YES,ASN=FILE,TEST=NO,
    STCLASS = STATIC SYMDEF);
 
%FPT_CLOSE(FPTN=FL_CLOSE_DUAL,DCB=M$DUAL,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_SCAN,DCB=M$SCAN,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_WEEK,DCB=M$WEEK,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_MONTH,DCB=M$MONTH,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_A,DCB=M$ATAPE,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_B,DCB=M$BTAPE,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_Z,DCB=M$ZTAPE,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_P,DCB=M$PTAPE,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_S,DCB=M$SAVE_TAPE,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_V,DCB=M$VAULT_TAPE,DISP=SAVE);
 
%FPT_CLOSE(FPTN=FL_CLOSE_AFILE,DCB=M$ABASE,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_BFILE,DCB=M$BBASE,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_PFILE,DCB=M$PBASE,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_SFILE,DCB=M$SBASE,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_VFILE,DCB=M$VBASE,DISP=SAVE);
%FPT_CLOSE(FPTN=FL_CLOSE_ZFILE,DCB=M$ZBASE,DISP=SAVE);
 
%FPT_READ(FPTN=FL_READ_TUESDAY,DCB=M$WEEK,BUF=NIL,STCLASS = STATIC);
%FPT_WRITE(FPTN=WRITEA,DCB=M$ATAPE,BUF=NIL);
%FPT_WRITE(FPTN=WRITEB,DCB=M$BTAPE,BUF=NIL);
%FPT_WRITE(FPTN=WRITEP,DCB=M$PTAPE,BUF=NIL);
%FPT_WRITE(FPTN=WRITES,DCB=M$SAVE_TAPE,BUF=NIL);
%FPT_WRITE(FPTN=WRITEV,DCB=M$VAULT_TAPE,BUF=NIL);
%FPT_WRITE(FPTN=WRITEZ,DCB=M$ZTAPE,BUF=NIL);
%FPT_WRITE(FPTN=WRITEM,DCB=M$MONTH,BUF=NIL);
%FPT_WRITE(FPTN=WRITEW,DCB=M$WEEK,BUF=NIL);
%FPT_WRITE(FPTN=WRITED,DCB=M$DUAL,BUF=NIL);
%FPT_WRITE(FPTN=WRITE_SCAN,DCB=M$SCAN,BUF=NIL);
 
%FPT_WRITE(FPTN=WRITE_AFILE,DCB=M$ABASE,BUF=NIL);
%FPT_WRITE(FPTN=WRITE_BFILE,DCB=M$BBASE,BUF=NIL);
%FPT_WRITE(FPTN=WRITE_PFILE,DCB=M$PBASE,BUF=NIL);
%FPT_WRITE(FPTN=WRITE_SFILE,DCB=M$SBASE,BUF=NIL);
%FPT_WRITE(FPTN=WRITE_VFILE,DCB=M$VBASE,BUF=NIL);
%FPT_WRITE(FPTN=WRITE_ZFILE,DCB=M$ZBASE,BUF=NIL);
 
 
%FPT_TIME(FPTN=NOWTIME,DATE=DATE,DEST=ANS);
 
%FPT_KEYIN(FPTN=FL_TO_OP,OCTYPE=SYSTEM,STCLASS = STATIC SYMDEF);
 
DCL STARS CHAR(0) CALIGNED STATIC SYMDEF INIT ('**************************************************');
DCL BITCH CHAR(0) CALIGNED STATIC SYMDEF INIT ('* One tuesday per week is all I can take. try MON');
 
 
                                            /* This
                                                     is the
                                                     daily
                                                     source
                                                     file
                                            */
 
DCL 1 FL_DAILY CALIGNED STATIC SYMDEF,
      2 JCL(0:%FL_NUMBER_DAILY_LINES) CHAR(108) CALIGNED INIT (' ',
   '!DEFAULT NOWAIT=8,NEXTPRI=8,SPECIAL=NORMALDAY,PACK=ALLOFEM,SHIFTLO=NO "WEEK NN  "',
   '!JOB PRIO=NOWAIT,NAME=XEQ$DAILY',
   '!RESOURCE TIME=999,OR=1,MEM=200,NHPSN,DP#EFTLO(PUBLIC)',
   '!ORES MEM=200',
   '!PRIV ALL',
   '!EDIT ',
   'COPY $XDAILY.SUPPORT ',
   'SE1-9000;/KILLJOY/S/FWSV00/;TX ',
   'SE1-9000;/STUFF WHAT YOU WANT/S/TO REPLACE/;TX ',
   'SE15-9000;/DRILL/S/ODD_OR_EVEN/;TX',
   'DE5-14',
   'END',
   '!COPY $XDAILY.SUPPORT OVER $XDAILY.SUPPORT(NLN)',
   '!GOTO LASTONE "LETS BATCH THIS LATER" ',
   '!LET BYPASSIT = ''SHIFTLO'', WHATDAY = ''SPECIAL''',
   '!LET WHICHONE = ''PACK''',
   '!IF WHICHONE = ''ALLOFEM'' THEN GOTO TAPESOKNOW',
   '!LET WHATDAY = ''SAT''',
   '!GOTO DAYSSTRAIGHT',
   '!TAPESOKNOW:',
   '!IF WHATDAY = ''NORMALDAY'' THEN GOTO SETDAY',
   '!LET THISDAY = $SUBSTR(WHATDAY,0,3)',
   '!GOTO DAYSTRAIGHT',
   '!SETDAY:  " only when user does not force override "',
   '!LET THISDAY = $DAY',
   '!"',
   '!IF $TIME > 1500 THEN GOTO BADTIME',
   '!"',
   '!DAYSTRAIGHT:   " We think we know what day it is now"',
   '!"',
   '!BATCH $XEFT_STATUS.SUPPORT',
   '!"',
   '!IF THISDAY = ''MON'' THEN GOTO MONDAY',
   '!"',
   '!IF THISDAY ~= ''TUE'' THEN GOTO DAILYCHECK',
   '!NEWWEEK:',
   '!"',
   '!"',
   '!BATCH $XEFT_COMMON.SUPPORT  ''nn'' = ''96'' " cover long gap "',
   '!IF $SITE=''LADC L66A'' THEN BATCH $XEFT_AARCHIVE.SUPPORT',
   '!IF $SITE=''LADC L66A'' THEN BATCH $XEFT_ARETRIEVE.SUPPORT',
   '!IF $SITE=''LADC L66B'' THEN BATCH $XEFT_BARCHIVE.SUPPORT',
   '!IF $SITE=''LADC L66B'' THEN BATCH $XEFT_BRETRIEVE.SUPPORT',
   '!PRIV ALL',
   '!SET M$MONTH $XMONTHLY.SUPPORT,ORG=CONSEC,CTG=YES,EXIST=NEWFILE',
   '!SET M$WEEK $XDAILY.SUPPORT,ORG=CONSEC,CTG=YES,EXIST=NEWFILE',
   '!SET M$SAVE_TAPE $XEFT_SAVE_ALL.SUPPORT,ORG=CONSEC,CTG=YES,EXIST=NEWFILE',
   '!SET M$VAULT_TAPE $XEFT_VAULT.SUPPORT,ORG=CONSEC,CTG=YES,EXIST=NEWFILE',
   '!SET M$DUAL $XEFT_DUAL_INCR.SUPPORT,ORG=CONSEC,CTG=YES,EXIST=NEWFILE',
   '!DIR .SUPPORT',
   '!IF $SITE = ''LADC L66B'' THEN GOTO MAKEBTAPE',
   '!MAKEATAPES:',
   '!"',
   '!M ************************************************',
   '!M * new serial number generator files via following ',
   '!M *',
   '!M * $XEFT_ZTAPE  for DP#ZZZ on the L66A',
   '!M * ',
   '!M * $XEFT_ATAPE    for the rest of the L66A packsets.',
   '!M *',
   '!M ******************************************************',
   '!"',
   '!SET M$ATAPE $XEFT_ATAPE.SUPPORT,ORG=CON,CTG=YES,EXIST=NEWFILE',
   '!SET M$ZTAPE $XEFT_ZTAPE.SUPPORT,ORG=CON,CTG=YES,EXIST=NEWFILE',
   '!$XEFT_GEN_SERIAL_TOOLS.SUPPORT',
   '!DI STEPCC',
   '!IF STEPCC > 0 THEN GOTO SCREWED',
   '!IF BYPASSIT = ''YES'' THEN GOTO JUMPERA',
   '!PCL',
   'DIR .FILE_MAP',
   'DELETE ABACKUP16',
   'MODIFY ABACKUP15 TO ABACKUP16',
   'MODIFY ABACKUP14 TO ABACKUP15',
   'MODIFY ABACKUP13 TO ABACKUP14',
   'MODIFY ABACKUP12 TO ABACKUP13',
   'MODIFY ABACKUP11 TO ABACKUP12',
   'MODIFY ABACKUP10 TO ABACKUP11',
   'MODIFY ABACKUP09 TO ABACKUP10',
   'MODIFY ABACKUP08 TO ABACKUP09',
   'MODIFY ABACKUP07 TO ABACKUP08',
   'MODIFY ABACKUP06 TO ABACKUP07',
   'MODIFY ABACKUP05 TO ABACKUP06',
   'MODIFY ABACKUP04 TO ABACKUP05',
   'MODIFY ABACKUP03 TO ABACKUP04',
   'MODIFY ABACKUP02 TO ABACKUP03',
   'MODIFY ABACKUP01 TO ABACKUP02',
   'MODIFY ABACKUP00 TO ABACKUP01',
   'MODIFY ABACKUP TO ABACKUP00',
   'DELETE ZBACKUP16',
   'MODIFY ZBACKUP15 TO ZBACKUP16',
   'MODIFY ZBACKUP14 TO ZBACKUP15',
   'MODIFY ZBACKUP13 TO ZBACKUP14',
   'MODIFY ZBACKUP12 TO ZBACKUP13',
   'MODIFY ZBACKUP11 TO ZBACKUP12',
   'MODIFY ZBACKUP10 TO ZBACKUP11',
   'MODIFY ZBACKUP09 TO ZBACKUP10',
   'MODIFY ZBACKUP08 TO ZBACKUP09',
   'MODIFY ZBACKUP07 TO ZBACKUP08',
   'MODIFY ZBACKUP06 TO ZBACKUP07',
   'MODIFY ZBACKUP05 TO ZBACKUP06',
   'MODIFY ZBACKUP04 TO ZBACKUP05',
   'MODIFY ZBACKUP03 TO ZBACKUP04',
   'MODIFY ZBACKUP02 TO ZBACKUP03',
   'MODIFY ZBACKUP01 TO ZBACKUP02',
   'MODIFY ZBACKUP00 TO ZBACKUP01',
   'MODIFY ZBACKUP TO ZBACKUP00',
   'DELETE SBACKUP16',
   'MODIFY SBACKUP15 TO SBACKUP16',
   'MODIFY SBACKUP14 TO SBACKUP15',
   'MODIFY SBACKUP13 TO SBACKUP14',
   'MODIFY SBACKUP12 TO SBACKUP13',
   'MODIFY SBACKUP11 TO SBACKUP12',
   'MODIFY SBACKUP10 TO SBACKUP11',
   'MODIFY SBACKUP09 TO SBACKUP10',
   'MODIFY SBACKUP08 TO SBACKUP09',
   'MODIFY SBACKUP07 TO SBACKUP08',
   'MODIFY SBACKUP06 TO SBACKUP07',
   'MODIFY SBACKUP05 TO SBACKUP06',
   'MODIFY SBACKUP04 TO SBACKUP05',
   'MODIFY SBACKUP03 TO SBACKUP04',
   'MODIFY SBACKUP02 TO SBACKUP03',
   'MODIFY SBACKUP01 TO SBACKUP02',
   'MODIFY SBACKUP00 TO SBACKUP01',
   'MODIFY SBACKUP TO SBACKUP00',
   'DIR .SUPPORT',
   'END',
   '!JUMPERA:',
   '!LET STEPCC=0',
   '!"',
   '!BATCH $XEFT_ZTAPE.SUPPORT NOWAIT = 8 " STARTS WITH ZfwB00 "',
   '!BATCH $XEFT_ATAPE.SUPPORT NOWAIT = 8 " starts with AfwB00 "',
   '!"',
   '!GOTO MONTHLYCHECK',
   '!"',
   '!MAKEBTAPE:',
   '!"',
   '!"',
   '!M ************************************************',
   '!M * new serial number generator files via following ',
   '!M *',
   '!M * $XEFT_BTAPE       for all the packsets on the L66B',
   '!M *',
   '!M ************************************************',
   '!SET M$BTAPE $XEFT_BTAPE.SUPPORT,ORG=CON,CTG=YES,EXIST=NEWFILE',
   '!SET M$ZTAPE $XEFT_ZTAPE.SUPPORT,ORG=CON,CTG=YES,EXIST=NEWFILE',
   '!$XEFT_GEN_SERIAL_TOOLS.SUPPORT',
   '!DI STEPCC',
   '!IF STEPCC > 0 THEN GOTO SCREWED',
   '!IF BYPASSIT = ''YES'' THEN GOTO JUMPERB',
   '!PCL',
   'DIR .FILE_MAP',
   'DELETE BBACKUP16',
   'MODIFY BBACKUP15 TO BBACKUP16',
   'MODIFY BBACKUP14 TO BBACKUP15',
   'MODIFY BBACKUP13 TO BBACKUP14',
   'MODIFY BBACKUP12 TO BBACKUP13',
   'MODIFY BBACKUP11 TO BBACKUP12',
   'MODIFY BBACKUP10 TO BBACKUP11',
   'MODIFY BBACKUP09 TO BBACKUP10',
   'MODIFY BBACKUP08 TO BBACKUP09',
   'MODIFY BBACKUP07 TO BBACKUP08',
   'MODIFY BBACKUP06 TO BBACKUP07',
   'MODIFY BBACKUP05 TO BBACKUP06',
   'MODIFY BBACKUP04 TO BBACKUP05',
   'MODIFY BBACKUP03 TO BBACKUP04',
   'MODIFY BBACKUP02 TO BBACKUP03',
   'MODIFY BBACKUP01 TO BBACKUP02',
   'MODIFY BBACKUP00 TO BBACKUP01',
   'MODIFY BBACKUP TO BBACKUP00',
   'DELETE DBACKUP16',
   'MODIFY DBACKUP15 TO DBACKUP16',
   'MODIFY DBACKUP14 TO DBACKUP15',
   'MODIFY DBACKUP13 TO DBACKUP14',
   'MODIFY DBACKUP12 TO DBACKUP13',
   'MODIFY DBACKUP11 TO DBACKUP12',
   'MODIFY DBACKUP10 TO DBACKUP11',
   'MODIFY DBACKUP09 TO DBACKUP10',
   'MODIFY DBACKUP08 TO DBACKUP09',
   'MODIFY DBACKUP07 TO DBACKUP08',
   'MODIFY DBACKUP06 TO DBACKUP07',
   'MODIFY DBACKUP05 TO DBACKUP06',
   'MODIFY DBACKUP04 TO DBACKUP05',
   'MODIFY DBACKUP03 TO DBACKUP04',
   'MODIFY DBACKUP02 TO DBACKUP03',
   'MODIFY DBACKUP01 TO DBACKUP02',
   'MODIFY DBACKUP00 TO DBACKUP01',
   'MODIFY DBACKUP TO DBACKUP00',
   'DELETE SBACKUP16',
   'MODIFY SBACKUP15 TO SBACKUP16',
   'MODIFY SBACKUP14 TO SBACKUP15',
   'MODIFY SBACKUP13 TO SBACKUP14',
   'MODIFY SBACKUP12 TO SBACKUP13',
   'MODIFY SBACKUP11 TO SBACKUP12',
   'MODIFY SBACKUP10 TO SBACKUP11',
   'MODIFY SBACKUP09 TO SBACKUP10',
   'MODIFY SBACKUP08 TO SBACKUP09',
   'MODIFY SBACKUP07 TO SBACKUP08',
   'MODIFY SBACKUP06 TO SBACKUP07',
   'MODIFY SBACKUP05 TO SBACKUP06',
   'MODIFY SBACKUP04 TO SBACKUP05',
   'MODIFY SBACKUP03 TO SBACKUP04',
   'MODIFY SBACKUP02 TO SBACKUP03',
   'MODIFY SBACKUP01 TO SBACKUP02',
   'MODIFY SBACKUP00 TO SBACKUP01',
   'MODIFY SBACKUP TO SBACKUP00',
   'DIR .SUPPORT',
   'END',
   '!JUMPERB:',
   '!LET STEPCC=0',
   '!"',
   '!BATCH $XEFT_BTAPE.SUPPORT NOWAIT = 8  " STARTS WITH BfwB00 "',
   '!EDIT "CHANGE ZTAPE TO DTAPE"',
   'COPY $XEFT_ZTAPE.SUPPORT OVER $XEFT_DTAPE.SUPPORT',
   '/Z/S/D/',
   '/Z/S/D/',
   '/Z/S/D/',
   '/L66B/S/L66A/',
   'END ',
   '!BATCH $XEFT_DTAPE.SUPPORT NOWAIT = 8  "STARTS WITH DfwB00"',
   '!"',
   '!"',
   '!MONTHLYCHECK:',
   '!"',
   '!XEQ $XMONTHLY.SUPPORT " FIX UP THE FILE "',
   '!XEQ $XDAILY.SUPPORT "FIX UP THE FILE"',
   '!"',
   '!IF $SITE = ''LADC L66A'' THEN GOTO TUE',
   '!"',
   '!TUESDAY:',
   '!"',
   '!IF BYPASSIT = ''YES'' THEN GOTO LASTONE',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL1,PSN=CNTL1,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL2,PSN=CNTL2,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL3,PSN=CNTL3,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL4,PSN=CNTL4,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL5,PSN=CNTL5,NUM=1 ',
   '!BATCH $XPACLIST_WEEKLY.SUPPORT',
   '!BATCH $XBADFILES.SUPPORT',
   '!BATCH $XTRACKER.SUPPORT',
   '!BATCH $XCHECKOUT.SUPPORT',
   '!GOTO LASTONE',
   '!"',
   '!"',
   '!TUE:',
   '!"',
   '!IF BYPASSIT = ''YES'' THEN GOTO LASTONE',
   '!BATCH $XPACLIST_WEEKLY.SUPPORT',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL1,PSN=CNTL1,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL2,PSN=CNTL2,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL3,PSN=CNTL3,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL4,PSN=CNTL4,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL5,PSN=CNTL5,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CNTL6,PSN=CNTL6,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=IAI,PSN=IAI,NUM=1 ',
   '!BATCH $XBADFILES.SUPPORT',
   '!BATCH $XTRACKER.SUPPORT',
   '!BATCH $XCHECKOUT.SUPPORT',
   '!BATCH $XSTARDMP.SUPPORT',
   '!GOTO LASTONE',
   '!"',
   '!DAILYCHECK:     " JUST RUN THE BACKUP''S FIRST "',
   '!"',
   '!M ***************************************************',
   '!M * just continue with yesterdays tapes for BACKUP.',
   '!M * If they don''t work, see shift supervisor.',
   '!M *',
   '!M * All EFT listing''s have been shifted to .FILE_MAP',
   '!M * ALL recon''s produce summary on console only.',
   '!M * COMMON listing''s are COMMON_A or COMMON_B .SUPPORT ',
   '!M * ',
   '!M * If you need a new tape because of tape errors ',
   '!M * then !XEQ $XEFT_ATAPE for L66A packsets. ',
   '!M *      !XEQ $XEFT_BTAPE for L66B packsets. ',
   '!M *      !XEQ $XEFT_ZTAPE for ZZZ packset. ',
   '!M * ',
   '!M * Check to be sure that EFTLO is mounted ',
   '!M * before starting the incremental on the L66A. ',
   '!M ***************************************************',
   '!"',
   '!"',
   '!IF $SITE = ''LADC L66A'' THEN GOTO CHECKADAY',
   '!"',
   '!CHECKBDAY:',
   '!"',
   '!IF THISDAY ~= ''SUN'' THEN BATCH $XEFT_COMMON.SUPPORT  ''nn'' = ''26''',
   '!IF THISDAY = ''SUN'' THEN BATCH $XEFT_COMMON.SUPPORT  ''nn'' = ''48''',
   '!"',
   '!BATCH $XEFT_BBACKUP.SUPPORT    " CONTINUE YESTERDAYS TAPE "',
   '!BATCH $XEFT_DBACKUP.SUPPORT    " CONTINUE YESTERDAYS TAPE "',
   '!IF THISDAY = ''WED'' THEN GOTO WEDNESDAY',
   '!IF THISDAY = ''THU'' THEN GOTO THURSDAY',
   '!IF THISDAY = ''FRI'' THEN GOTO FRIDAY',
   '!IF THISDAY = ''SAT'' THEN GOTO SATURDAY',
   '!IF THISDAY = ''SUN'' THEN GOTO LASTONE',
   '!M WHAT GIVES HERE, WHAT DAY IS IT.',
   '!GOTO LASTONE',
   '!"',
   '!WEDNESDAY:',
   '!"',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=HOST,PSN=HOST,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=MOVE,PSN=MOVE,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=PONDB,PSN=PONDB,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=SWAMP,PSN=SWAMP,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=GMARK,PSN=GMARK,NUM=1 ',
   '!GOTO LASTONE',
   '!"',
   '!THURSDAY:',
   '!"',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=FEP,PSN=FEP,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=OPER,PSN=OPER,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=DOVE,PSN=DOVE,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=EFTLO,PSN=EFTLO,NUM=1 ',
   '!GOTO LASTONE',
   '!"',
   '!FRIDAY:',
   '!"',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=ESRC,PSN=ESRC,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=MICRO,PSN=MICRO,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=STATUS,PSN=STATUS,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=ISSCO,PSN=ISSCO,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CP6D00,PSN=CP6D00,NUM=2 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CP6D0A,PSN=CP6D0A,NUM=3 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=AZREX,PSN=AZREX,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=EUG,PSN=EUG,NUM=1 ',
   '!M *************************************************** ',
   '!M * ',
   '!M * The following savealls are for 451 type disks that ',
   '!M * may be in use on another system. Please find them ',
   '!M * and mount them on the L66B to save them, then return ',
   '!M * them to the system you found them on. Thankyou. ',
   '!M * ',
   '!M **************************************************** ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=MICRO,USETAPE=MKILLJOY,''XSN''=MICRO,TEMP1=MICRODRILL ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=ESRC,USETAPE=EKILLJOY,''XSN''=ESRC,TEMP1=ESRCDRILL ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=ISSCO,USETAPE=IKILLJOY,''XSN''=ISSCO,TEMP1=ISSCODRILL ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=AZREX,USETAPE=AKILLJOY,''XSN''=AZREX,TEMP1=AZREXDRILL',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=EUG,USETAPE=EKILLJOY,''XSN''=EUG,TEMP1=EUGDRILL',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=STATUS,USETAPE=SKILLJOY,''XSN''=STATUS,TEMP1=STATUSDRILL ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CP6D00,USETAPE=DKILLJOY,''XSN''=CP6D00,TEMP1=CP6D00DRILL ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CP6D0A,USETAPE=DKILLJOY,''XSN''=CP6D0A,TEMP1=CP6D0ADRILL ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=SFA,USETAPE=SKILLJOY,''XSN''=SFA,TEMP1=SFADRILL ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=TP,USETAPE=TKILLJOY,''XSN''=TP,TEMP1=TPDRILL ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=TULSA,USETAPE=TKILLJOY,''XSN''=TULSA,TEMP1=TULSADRILL ',
   '!GOTO LASTONE',
   '!"',
   '!SATURDAY:',
   '!IF WHICHONE = ''ALLOFEM'' THEN GOTO BTAPESOK',
   '!COPY $XDAILY.SUPPORT OVER *THREE(LN)',
   '!EDIT *THREE',
   'FD1-99999,/ /AND NOT/PACK/;TX',
   'FD1-9999,/DUAL/;TX',
   'END',
   '!XEQ *THREE',
   '!GOTO LASTONE',
   '!BTAPESOK:',
   '!"',
   '!M ***************************************************',
   '!M * If saves have tape errors, get a new tape and   ',
   '!M *  !XEQ $XDAILY PACK = ONE_U_WANT                 ',
   '!M *    eventually we may automate this      ',
   '!M ***************************************************',
   '!"',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL1,USETAPE=1KILLJOY,''XSN''=CNTL1,TEMP1=CNTL1DRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL2,USETAPE=2KILLJOY,''XSN''=CNTL2,TEMP1=CNTL2DRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL3,USETAPE=3KILLJOY,''XSN''=CNTL3,TEMP1=CNTL3DRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL4,USETAPE=4KILLJOY,''XSN''=CNTL4,TEMP1=CNTL4DRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL5,USETAPE=5KILLJOY,''XSN''=CNTL5,TEMP1=CNTL5DRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=DOVE,USETAPE=DKILLJOY,''XSN''=DOVE,TEMP1=DOVEDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=FEP,USETAPE=FKILLJOY,''XSN''=FEP,TEMP1=FEPDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=GMARK,USETAPE=GKILLJOY,''XSN''=GMARK,TEMP1=GMARKDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=HOST,USETAPE=HKILLJOY,''XSN''=HOST,TEMP1=HOSTDRILL',
   '!"BATCH $XEFT_DUAL_INCR.SUPPORT PSN=HOST,DSN=D00152,NUM=3,BNUM=1,''XSN''=HOST,TEMP1=HOST_DUAL',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=MOVE,USETAPE=BSAM00,''XSN''=MOVE,TEMP1=MOVEDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=OPER,USETAPE=OKILLJOY,''XSN''=OPER,TEMP1=OPERDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=PONDB,USETAPE=PKILLJOY,''XSN''=PONDB,TEMP1=PONDBDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=SWAMP,USETAPE=SKILLJOY,''XSN''=SWAMP,TEMP1=SWAMPDRILL',
   '!" ',
   '!M **************************************************',
   '!M * WEEKLY ACCOUNTING TRANSFER JOB AT PRIO 0 ',
   '!M *',
   '!M *   A T T E N T I O N   O P E R A T O R ! ! !',
   '!M *',
   '!M * PLEASE BE SURE THAT THE WEEKLY ACCOUNTING JOB RUNS BEFORE',
   '!M * THE OPER SAVEALL (BUT NOT BEFORE NIDNIGHT!!)!! THANKS!! ',
   '!M *',
   '!M * PURGE$SYS cleans out .:SYSTAC. "run last" ',
   '!M * It cycles tapes BPRG1 THRU BPRG9 automatically ',
   '!M *  listings goto .SUPPORT.  Tape errors will ',
   '!M *   automatically jump to next tape. " I HOPE " ',
   '!M * ',
   '!M **************************************************',
   '!BATCH $XWEEKLY_ACCTLG_B.SUPPORT',
   '!BATCH $XEFT_PURGE_SYS.SUPPORT ',
   '!GOTO LASTONE',
   '!"',
   '!CHECKADAY:',
   '!"',
   '!IF THISDAY ~= ''SUN'' THEN BATCH $XEFT_COMMON.SUPPORT  ''nn'' = ''26''',
   '!IF THISDAY = ''SUN'' THEN BATCH $XEFT_COMMON.SUPPORT  ''nn'' = ''48''',
   '!BATCH $XSTARDMP.SUPPORT',
   '!"',
   '!BATCH $XEFT_ZBACKUP.SUPPORT    " CONTINUE YESTERDAYS TAPE "',
   '!BATCH $XEFT_ABACKUP.SUPPORT    " CONTINUE YESTERDAYS TAPE "',
   '!"',
   '!IF THISDAY = ''WED'' THEN GOTO WED',
   '!IF THISDAY = ''THU'' THEN GOTO THU',
   '!IF THISDAY = ''FRI'' THEN GOTO FRI',
   '!IF THISDAY = ''SAT'' THEN GOTO SAT',
   '!IF THISDAY = ''SUN'' THEN GOTO LASTONE',
   '!M WHAT GIVES , WHAT DAY IS IT ANYWAY????',
   '!GOTO LASTONE',
   '!WED:',
   '!"',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=CARR,PSN=CARR,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=WOLF,PSN=WOLF,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=POND,PSN=POND,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=1NVIL,PSN=1NVIL,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=2NVIL,PSN=2NVIL,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=GALXC,PSN=GALXC,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=RAT,PSN=RAT,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=BAYOU,PSN=BAYOU,NUM=1 ',
   '!GOTO LASTONE',
   '!"',
   '!THU:',
   '!"',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=UTIL,PSN=UTIL,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=COMP,PSN=COMP,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=OPER,PSN=OPER,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=WONG,PSN=WONG,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=VALCOB,PSN=VALCOB,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=FORT,PSN=FORT,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=DOG,PSN=DOG,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=EFTLO,PSN=EFTLO,NUM=1 ',
   '!GOTO LASTONE',
   '!"',
   '!FRI:',
   '!"',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=ANSF,PSN=ANSF,NUM=2 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=EMARK,PSN=EMARK,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=EDUC,PSN=EDUC,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=SOFT,PSN=SOFT,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=SOLAR,PSN=SOLAR,NUM=1 ',
   '!BATCH $XPIGRECON.SUPPORT ''XSN''=TCOX,PSN=TCOX,NUM=1 ',
   '!BATCH $XEFT_DUAL_INCR.SUPPORT PSN=CNTL1,''XSN''=CNTL1,NUM=3,DSN=D00150,TEMP1=CNTL1_DUAL ',
   '!"BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL1,USETAPE=1KILLJOY,''XSN''=CNTL1,TEMP1=CNTL1DRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL2,USETAPE=2KILLJOY,''XSN''=CNTL2,TEMP1=CNTL2DRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL3,USETAPE=3KILLJOY,''XSN''=CNTL3,TEMP1=CNTL3DRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL4,USETAPE=4KILLJOY,''XSN''=CNTL4,TEMP1=CNTL4DRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL5,USETAPE=5KILLJOY,''XSN''=CNTL5,TEMP1=CNTL5DRILL ',
   '!BATCH $XEFT_DUAL_INCR.SUPPORT PSN=CNTL6,''XSN''=CNTL6,NUM=3,DSN=D00014,TEMP1=CNTL6_DUAL ',
   '!"BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CNTL6,USETAPE=6KILLJOY,''XSN''=CNTL6,TEMP1=CNTL6DRILL ',
   '!BATCH $XEFT_DUAL_INCR.SUPPORT PSN=GALXC,''XSN''=GALXC,NUM=2,DSN=D00183,TEMP1=GALXC_DUAL ',
   '!"BATCH $XEFT_SAVE_ALL.SUPPORT PSN=GALXC,USETAPE=GKILLJOY,''XSN''=GALXC,TEMP1=GALXCDRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=ZZZ,USETAPE=ZKILLJOY,''XSN''=ZZZ,TEMP1=ZZZDRILL ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=IAI,USETAPE=IKILLJOY,''XSN''=IAI,TEMP1=IAIDRILL ',
   '!GOTO LASTONE',
   '!"',
   '!SAT:',
   '!"',
   '!IF WHICHONE = ''ALLOFEM'' THEN GOTO ATAPESOK',
   '!COPY $XDAILY.SUPPORT OVER *THREE(LN)',
   '!EDIT *THREE',
   'FD1-99999,/ /AND NOT/PACK/;TX',
   'FD1-99999,/DUAL/;TX',
   'END',
   '!XEQ *THREE',
   '!GOTO LASTONE',
   '!ATAPESOK:',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=ANSF,USETAPE=AKILLJOY,''XSN''=ANSF,TEMP1=ANSFDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=BAYOU,USETAPE=BKILLJOY,''XSN''=BAYOU,TEMP1=BAYOUDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=CARR,USETAPE=CKILLJOY,''XSN''=CARR,TEMP1=CARRDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=COMP,USETAPE=CKILLJOY,''XSN''=COMP,TEMP1=COMPDRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=DOG,USETAPE=DKILLJOY,''XSN''=DOG,TEMP1=DOGDRILL',
   '!"',
   '!M ***************************************************',
   '!M * If saves have tape errors, get a new tape and   ',
   '!M *  !XEQ $XDAILY PACK = ONE_U_WANT                 ',
   '!M *    eventually we may automate this      ',
   '!M ***************************************************',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=EDUC,USETAPE=EKILLJOY,''XSN''=EDUC,TEMP1=EDUCDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=EMARK,USETAPE=EKILLJOY,''XSN''=EMARK,TEMP1=EMARKDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=FORT,USETAPE=FKILLJOY,''XSN''=FORT,TEMP1=FORTDRILL',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=MOVE,USETAPE=ASAM00,''XSN''=MOVE,TEMP1=MOVEDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=1NVIL,USETAPE=1KILLJOY,''XSN''=1NVIL,TEMP1=1NVILDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=2NVIL,USETAPE=2KILLJOY,''XSN''=2NVIL,TEMP1=2NVILDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=OPER,USETAPE=OKILLJOY,''XSN''=OPER,TEMP1=OPERDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=PHX,USETAPE=PKILLJOY,''XSN''=PHX,TEMP1=PHXDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=POND,USETAPE=PKILLJOY,''XSN''=POND,TEMP1=PONDDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=RAT,USETAPE=RKILLJOY,''XSN''=RAT,TEMP1=RATDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=SCOUT,USETAPE=SKILLJOY,''XSN''=SCOUT,TEMP1=SCOUTDRILL ',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=SOFT,USETAPE=SKILLJOY,''XSN''=SOFT,TEMP1=SOFTDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=SOLAR,USETAPE=SKILLJOY,''XSN''=SOLAR,TEMP1=SOLARDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=TCOX,USETAPE=TKILLJOY,''XSN''=TCOX,TEMP1=TCOXDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=UTIL,USETAPE=UKILLJOY,''XSN''=UTIL,TEMP1=UTILDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=VALCOB,USETAPE=VKILLJOY,''XSN''=VALCOB,TEMP1=VALCOBDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=WOLF,USETAPE=WKILLJOY,''XSN''=WOLF,TEMP1=WOLFDRILL',
   '!BATCH $XEFT_SAVE_ALL.SUPPORT PSN=WONG,USETAPE=WKILLJOY,''XSN''=WONG,TEMP1=WONGDRILL',
   '!M ***************************************************** ',
   '!M * WEEKLY ACCOUNTING JOB AT PRIO 0 WAITING FOR ',
   '!M * THE TAPE FROM THE L66B ',
   '!M *',
   '!M * PURGE$SYS cleans out .:SYSTAC. "run last" ',
   '!M * It cycles tapes APRG1 THRU APRG9 automatically ',
   '!M *  listings goto .SUPPORT.  Tape errors will ',
   '!M *   automatically jump to next tape. " I HOPE " ',
   '!M **************************************************: ',
   '!BATCH $XWEEKLY_ACCTLG.SUPPORT',
   '!BATCH $XEFT_PURGE_SYS.SUPPORT ',
   '!GOTO LASTONE',
   '!"',
   '!MONDAY:',
   '!"',
   '!M TRY AGAIN ',
   '!M NO JOBS BATCHED',
   '!GOTO LASTONE',
   '!"',
   '!SCREWED:',
   '!M ***********************************************',
   '!M * either you tried   TUESDAY twice in the ',
   '!M *  same week, or there is a bad JCL bug.',
   '!M *   check output.  If you tried to double up ',
   '!M *    on TUESDAY, batch it again, correctly. ',
   '!M *******************************************',
   '!PRINT',
   '!GOTO LASTONE',
   '!"',
   '!BADTIME:',
   '!"',
   '!M YOU MUST WAIT TIL AFTER MIDNIGHT TO DO THIS AUTOMATICALLY',
   '!"',
   '!LASTONE:',
   '!"',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
  ' '*0);
                                            /* This
                                                    is
                                                        monthly
                                            */
DCL 1 FL_MONTHLY CALIGNED STATIC SYMDEF,
      2 JCL(0:%FL_NUMBER_MONTHLY_LINES) CHAR(108) CALIGNED INIT (' ',
   '!DEFAULT HOLDUP=8,PACK=ALLOFEM',
   '!JOB PRIO=HOLDUP,NAME=XEQ$MONTHLY ',
   '!RESOURCE TIME=999,OR=1,MEM=200,NHPSN,DP#EFTLO(PUBLIC) ',
   '!ORES MEM=200 ',
   '!PRIV ALL',
   '!EDIT ',
  'COPY $XMONTHLY.SUPPORT ',
  'SE1-9000;/KILLJOY/S/FWSV00/;TX ',
  'SE14-9000;/DRILL/S/ODD_OR_EVEN/;TX',
  'DE5-13',
  'END',
   '!COPY $XMONTHLY.SUPPORT OVER $XMONTHLY.SUPPORT(NLN)',
   '!GOTO EOJ',
   '!LET WHICHONE = ''PACK''',
   '!DATE.X (ANS,DATE=FWEEK)',
   '!IF $SITE = ''LADC L66B'' THEN GOTO BVAULTS ',
   '!AVAULTS: ',
   '!M ************************************************ ',
   '!M * Time for vaults on the A again. If a job ',
   '!M * aborts for tape errors, get new tape and ',
   '!M * just !XEQ $XMONTHLY PACK = ONEUWANT      ',
   '!M ************************************************ ',
   '!IF WHICHONE = ''ALLOFEM'' THEN GOTO ASRIGHT',
   '!COPY $XMONTHLY.SUPPORT OVER *ONE(LN)',
   '!EDIT *ONE',
  'FD1-9000,/ /AND NOT/PACK/',
  'END',
   '!XEQ *ONE',
   '!GOTO EOJ',
   '!ASRIGHT:',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=ANSF,USETAPE=AKILLJOY,''XSN''=ANSF,TEMP1=ANSF_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=BAYOU,USETAPE=BKILLJOY,''XSN''=BAYOU,TEMP1=BAYOU_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CARR,USETAPE=CKILLJOY,''XSN''=CARR,TEMP1=CARR_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL1,USETAPE=1KILLJOY,''XSN''=CNTL1,TEMP1=CNTL1_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL2,USETAPE=2KILLJOY,''XSN''=CNTL2,TEMP1=CNTL2_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL3,USETAPE=3KILLJOY,''XSN''=CNTL3,TEMP1=CNTL3_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL4,USETAPE=4KILLJOY,''XSN''=CNTL4,TEMP1=CNTL4_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL5,USETAPE=5KILLJOY,''XSN''=CNTL5,TEMP1=CNTL5_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL6,USETAPE=6KILLJOY,''XSN''=CNTL6,TEMP1=CNTL6_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=COMP,USETAPE=CKILLJOY,''XSN''=COMP,TEMP1=COMP_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=DOG,USETAPE=DKILLJOY,''XSN''=DOG,TEMP1=DOG_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=EDUC,USETAPE=EKILLJOY,''XSN''=EDUC,TEMP1=EDUC_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=EMARK,USETAPE=EKILLJOY,''XSN''=EMARK,TEMP1=EMARK_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=FORT,USETAPE=FKILLJOY,''XSN''=FORT,TEMP1=FORT_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=GALXC,USETAPE=GKILLJOY,''XSN''=GALXC,TEMP1=GALXC_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=1NVIL,USETAPE=1KILLJOY,''XSN''=1NVIL,TEMP1=1NVIL_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=2NVIL,USETAPE=2KILLJOY,''XSN''=2NVIL,TEMP1=2NVIL_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=OPER,USETAPE=OKILLJOY,''XSN''=OPER,TEMP1=OPER_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=PHX,USETAPE=PKILLJOY,''XSN''=PHX,TEMP1=PHX_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=POND,USETAPE=PKILLJOY,''XSN''=POND,TEMP1=POND_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=RAT,USETAPE=RKILLJOY,''XSN''=RAT,TEMP1=RAT_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=SOFT,USETAPE=SKILLJOY,''XSN''=SOFT,TEMP1=SOFT_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=SOLAR,USETAPE=SKILLJOY,''XSN''=SOLAR,TEMP1=SOLAR_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=TC0X,USETAPE=TKILLJOY,''XSN''=TCOX,TEMP1=TCOX_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=UTIL,USETAPE=UKILLJOY,''XSN''=UTIL,TEMP1=UTIL_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=VALCOB,USETAPE=VKILLJOY,''XSN''=VALCOB,TEMP1=VALCOB_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=WOLF,USETAPE=WKILLJOY,''XSN''=WOLF,TEMP1=WOLF_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=WONG,USETAPE=WKILLJOY,''XSN''=WONG,TEMP1=WONG_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=ZZZ,USETAPE=ZKILLJOY,''XSN''=ZZZ,TEMP1=ZZZ_VAULT_%FWEEK ',
   '!GOTO EOJ ',
   '!BVAULTS: ',
   '!M ************************************************ ',
   '!M * Time for vaults on the B again. If a job ',
   '!M * aborts for tape errors, get new tape and ',
   '!M * just !XEQ $XMONTHLY PACK = ONEUWANT      ',
   '!M * It''s quicker than trying to figure out  ',
   '!M * how to continue it.  We will reserve this ',
   '!M * option for a later date.                  ',
   '!M ************************************************ ',
   '!IF WHICHONE = ''ALLOFEM'' THEN GOTO BSRIGHT',
   '!COPY $XMONTHLY.SUPPORT OVER *ONE(LN)',
   '!EDIT *ONE',
  'FD1-9000,/ /AND NOT/PACK/',
  'END',
   '!XEQ *ONE',
   '!GOTO EOJ',
   '!BSRIGHT:',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=DOVE,USETAPE=DKILLJOY,''XSN''=DOVE,TEMP1=DOVE_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL1,USETAPE=1KILLJOY,''XSN''=CNTL1,TEMP1=CNTL1_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL2,USETAPE=2KILLJOY,''XSN''=CNTL2,TEMP1=CNTL2_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL3,USETAPE=3KILLJOY,''XSN''=CNTL3,TEMP1=CNTL3_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL4,USETAPE=4KILLJOY,''XSN''=CNTL4,TEMP1=CNTL4_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=CNTL5,USETAPE=5KILLJOY,''XSN''=CNTL5,TEMP1=CNTL5_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=BMARK,USETAPE=BKILLJOY,''XSN''=BMARK,TEMP1=BMARK_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=FEP,USETAPE=FKILLJOY,''XSN''=FEP,TEMP1=FEP_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=GMARK,USETAPE=GKILLJOY,''XSN''=GMARK,TEMP1=GMARK_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=HOST,USETAPE=HKILLJOY,''XSN''=HOST,TEMP1=HOST_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=MOVE,USETAPE=MKILLJOY,''XSN''=MOVE,TEMP1=MOVE_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=PONDB,USETAPE=PKILLJOY,''XSN''=PONDB,TEMP1=PONDB_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=SWAMP,USETAPE=SKILLJOY,''XSN''=SWAMP,TEMP1=SWAMP_VAULT_%FWEEK ',
   '!M ***************************************************** ',
   '!M * The following vault saves are for 451 type packs that ',
   '!M * may be in use on another system. Please get them and ',
   '!M * mount them here for the vaults and then return them ',
   '!M * to the system you found them on. Thanks. ',
   '!M ****************************************************** ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=MICRO,USETAPE=MKILLJOY,''XSN''=MICRO,TEMP1=MICRO_VAULT_%FWEEK ',
   '!BATCH $XEFT_VAULT.SUPPORT PSN=ESRC,USETAPE=EKILLJOY,''XSN''=ESRC,TEMP1=ESRC_VAULT_%FWEEK ',
   '!EOJ: ',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
  ' '*0);
 
                                            /* This
                                                     is the
                                                     basic
                                                     backup
                                                     generator
                                                     file
                                            */
 
DCL 1 FL_TAPE CALIGNED STATIC SYMDEF,
      2 JCL (0:%FL_TAPE_JCL_LINES) CHAR(80) CALIGNED INIT (' ',
   '!DEFAULT NOWAIT=8',
   '!JOB PRIO=NOWAIT,NAME=$XEFT_BTAPE,NRERUN',
   '!RESOURCE TIME=999,OR=1,NHPSN,DP#EFTLO(PUBLIC)',
   '!ORES MEM=128',
   '!IF $SITE=''LADC66B'' THEN GOTO EATLO',
    ' '*0);
 
DCL 1 FL_EFT CALIGNED STATIC SYMDEF,
      2 TAG CHAR(2) CALIGNED INIT ('!B'),
      2 CMND CHAR(5) CALIGNED INIT ('ATCH'),
      2 JOBNAME CHAR(18) CALIGNED INIT (' '),
      2 JACCT CHAR(10) CALIGNED INIT ('.SUPPORT '),
      2 TNAME CHAR(5) CALIGNED INIT (' '),
      2 * CHAR(3) CALIGNED INIT (' = '),
      2 SYSTEM CHAR(1) CALIGNED INIT (' '),
      2 WEEK CHAR(2) CALIGNED INIT (' '),
      2 TYPE CHAR(1) CALIGNED INIT (' '),
      2 TNUM# CHAR(2) CALIGNED INIT (' '),
      2 BANNER# CHAR(32) CALIGNED INIT (' ');
 
                                            /* This
                                                     is
                                                        rest of
                                                        tape jcl
                                            */
DCL 1 FL_FIX CALIGNED STATIC SYMDEF,
      2 TAPE(0:%FL_NUMBER_FIX_LINES) CHAR(80) CALIGNED INIT (' ',
   '!COPY $SEQUENCE OVER *THREE(LN) ',
   '!EDIT *THREE ',
  'DE6 ',
  'SE7;/!"/S/!B/;TX ',
  'END ',
   '!COPY *THREE OVER $SEQUENCE(NLN) ',
   '!EATLO:',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
  ' '*0);
 
                               /* This is first
                                     part of common jcl
                                     stepcc checker
                                     gets plugged
                                     in when the routine
                                     finds output =
       'REPLACE ME WITH STEPCC CHECK ONE '
                                     saves listing time
                                */
 
DCL 1 FL_PRECHECK CALIGNED STATIC SYMDEF,
      2 STEPCC (0:%FL_PRECHECK_LINES) CHAR(80) CALIGNED INIT (' ',
   '!DI STEPCC',
   '!IF CHECKPASSED = ''NO'' THEN GOTO SKIP4',
   '!IF PAPERCHECK = ''NO'' THEN GOTO SKIP4',
   '!PRINT LP02',
   '!SKIP4:',
   '!IF STEPCC = 0 THEN GOTO LOOKOK',
   '!IF STEPCC = 4 THEN GOTO LOOKOK',
   '!IF STEPCC = 1 THEN GOTO TAPE_ERROR',
   '!IF STEPCC = 2 THEN GOTO DISK_ERROR',
   '!IF STEPCC = 3 THEN GOTO BAD',
   '!BAD:',
   '!M *****************************************',
   '!M *  SEVERE ERRORS, YOU SHOULD SEE',
   '!M *   MIKE TO RESOLVE THESE',
   '!M *',
   '!M ******************************************',
   '!ERROUT:',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!COPY *DOFILE TO LP02',
   '!PRINT LP02',
   '!GOTO EATLO',
   '!TAPE_ERROR:',
   '!M ****************************************',
   '!M *  IRRECOVERABLE TAPE ERRORS.',
   '!M *    SEE SHIFT SUPERVISOR FOR PROPER',
   '!M *    ERROR RECOVERY PROCEDURE',
   '!M *',
   '!M ****************************************',
   '!GOTO ERROUT',
   '!DISK_ERROR:',
   '!M *************************************',
   '!M * JOB ABORTED DUE TO DISK I/O ERROR',
   '!M *  PLEASE HAVE CSD CHECK DRIVE AND TRY',
   '!M *  TO RUN AGAIN ',
   '!M * ***********************************',
   '!GOTO ERROUT',
   '!LOOKOK:',
   '!" ************************************',
   '!" DONT CLUTTER CRT WITH NON NECESSARY',
   '!" REPORT THAT IT LOOKS OK.',
   '!" ************************************',
   '!EATLO:',
   '!LDEV LP02,ERASE',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
   ' '*0);
                         /*
                               Now for the common jcl
                               for the second stepcc
                               checker
                               neato i suppose
                            */
 
DCL 1 FL_POSTCHECK CALIGNED STATIC SYMDEF,
      2 STEPCC (0:%FL_POST_LINES) CHAR(80) CALIGNED INIT (' ',
   '!IF STEPCC=0 THEN GOTO EATLO',
   '!IF STEPCC = 450 THEN GOTO BAD',
   '!IF STEPCC = 400 THEN GOTO BAD',
   '!IF STEPCC = 350 THEN GOTO BAD',
   '!IF STEPCC = 300 THEN GOTO TWO300',
   '!IF STEPCC = 250 THEN GOTO BAD',
   '!IF STEPCC = 200 THEN GOTO BAD',
   '!IF STEPCC = 150 THEN GOTO JCLBAD',
   '!IF STEPCC = 100 THEN GOTO JCLBAD',
   '!IF STEPCC = 50 THEN GOTO EATLO',
   '!IF STEPCC = 40 THEN GOTO EATLO',
   '!IF STEPCC = 20 THEN GOTO EATLO',
   '!IF STEPCC = 10 THEN GOTO EATLO',
   '!IF STEPCC = 5  THEN GOTO EATLO',
   '!GOTO BAD',
   '!TWO300:',
   '!M *****************************************',
   '!M *  CHECK FAILED,  YOU MAY HAVE TO',
   '!M *   REDO THE FIRST PART',
   '!M *     SEE YOUR SHIFT SUPERVISOR',
   '!M *',
   '!M ****************************************',
   '!GOTO ERROUT',
   '!EATLO:',
   '!LDEV LP02,ERASE',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
   ' '*0);
 
                         /*
                             This is the driver
                               for the purge tapes
                         */
DCL 1 FL_PURGE CALIGNED STATIC SYMDEF,
      2 BASE(0:%FL_NUMBER_BASE_LINES) CHAR(80) CALIGNED INIT (' ',
   '!DEFAULT NOWAIT=8,NEWTAPE=NO',
   '!JOB PRIO=NOWAIT,NAME=XEFT_PTAPE,NRERUN',
   '!RESOURCE TIME=999,OR=1,NHPSN,DP#EFTLO(PUBLIC)',
   '!ORES MEM=128',
   '!LET MAKEIT = ''NEWTAPE''',
   '!IF MAKEIT = ''YES'' THEN GOTO DOIT',
   '!IF $SITE= ''LADC L66A'' THEN GOTO SETATAPE',
   '!BATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG1,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG2,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG3,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG4,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG5,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG6,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG7,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG8,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG9,HOLDUP=8',
   '!"ATCH $XEFT_PTAPE.SUPPORT NEWTAPE=YES',
   '!COPY $XEFT_PTAPE.SUPPORT OVER *THREE(LN)',
   '!EDIT *THREE',
   'DE8',
   'SE9;/!"/S/!B/;TX',
   'IP17.01',
   'THIS IS SNEAKY',
   'SE17.01;/THIS/S/!"  /;TX',
   'END',
   '!COPY *THREE OVER $XEFT_PTAPE.SUPPORT(NLN)',
   '!GOTO EATLO',
   '!SETATAPE:',
   '!BATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG1,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG2,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG3,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG4,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG5,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG6,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG7,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG8,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG9,HOLDUP=8',
   '!"ATCH $XEFT_PTAPE.SUPPORT NEWTAPE=YES',
   '!COPY $XEFT_PTAPE.SUPPORT OVER *THREE(LN)',
   '!EDIT *THREE',
   'DE29',
   'SE30;/!"/S/!B/;TX',
   'IP38.01',
   'THIS IS ALSO',
   'SE38.01;/THIS/S/!"  /;TX',
   'END',
   '!COPY *THREE OVER $XEFT_PTAPE.SUPPORT(NLN)',
   '!GOTO EATLO',
   '!DOIT:',
   '!COPY $XEFT_PTAPE.SUPPORT OVER *FOUR(LN)',
   '!EDIT *FOUR',
   'DE 8-17',
   'DE 29-38',
   'MK 60-69,8,1',
   'MK 70-79,29,1',
   'END',
   '!COPY *FOUR OVER $XEFT_PTAPE.SUPPORT(NLN)',
   '!BATCH $XEFT_PTAPE.SUPPORT',
   '!GOTO EATLO',
   '!BATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG1,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG2,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG3,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG4,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG5,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG6,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG7,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG8,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = BPRG9,HOLDUP=8',
   '!"ATCH $XEFT_PTAPE.SUPPORT NEWTAPE=YES',
   '!BATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG1,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG2,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG3,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG4,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG5,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG6,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG7,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG8,HOLDUP=8',
   '!"ATCH $XEFT_PURGE_SYS_BASE.SUPPORT STAPE = APRG9,HOLDUP=8',
   '!"ATCH $XEFT_PTAPE.SUPPORT NEWTAPE=YES',
   '!GOTO EATLO',
   '!EATLO:',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
   ' '*0);
 
                                            /* This
                                                     is
                                                        source
                                                        for
                                                        abackup
                                            */
 
DCL 1 FL_ABACK CALIGNED STATIC SYMDEF,
      2 BASE(0:%FL_NUMBER_BASE_LINES) CHAR(80) CALIGNED INIT (' ',
   '!DEFAULT BPI=6250,SIZE=8,ATAPE=OLDONE,HOLDUP=0',
   '!JOB PRIO=HOLDUP,NAME=L66A$MULTI$INCREMENTAL,NRERUN',
   '!RESOURCE TIME=999,OR=1,MT(BPI)=1,MEM=511,NHPSN,DP#EFTLO(PUBLIC)',
   '!ORES MT(BPI)=1,MEM=511',
   '!LIMIT LO=9999,DO=50,FPOOLS=31',
   '!IF $SITE=''LADC L66B'' THEN GOTO BAD',
   '!" remember to keep line numbers the same in these files ',
   '!LET TAPESET = ''ATAPE''',
   '!IF TAPESET = ''OLDONE'' THEN GOTO POTSRIGHT',
   '!COPY $XEFT_ABACKUP_BASE.SUPPORT OVER *TWO(LN)',
   '!EDIT *TWO',
   'SE25-9000;/BACKUP_TAPE/S/ATAPE/;TX',
   'END',
   '!BATCH *TWO',
   '!M ************************************************',
   '!M * REBATCHING JOB WITH ATAPE',
   '!M * PRIO NEW ONE TO 8 WHEN READY',
   '!M ************************************************',
   '!EDIT *TWO',
   'SE30-9000;/OVER;/S/EXTEND;/;TX',
   'END',
   '!PRIV ALL',
   '!COPY *TWO OVER $XEFT_ABACKUP.SUPPORT(NLN)',
   '!GOTO EATLO',
   '!"',
   '!POTSRIGHT:     " JUST CONTINUE WITH THIS TAPESET "',
   '!BANNER (^~TODAY/BACKUP_TAPE/BACKUP/^)',
   '!BANNER (^~TODAY/BACKUP_TAPE/BACKUP/^)',
   '!EFT',
   '        BACKUP ;',
   '           DP#ANSF ,;',
   '           DP#BAYOU ,;',
   '           DP#CARR ,;',
   '           DP#COMP ,;',
   '           DP#DOG ,;',
   '           DP#EDUC ,;',
   '           DP#EFTLO ,;',
   '           DP#EMARK ,;',
   '           DP#1NVIL ,;',
   '           DP#2NVIL ,;',
   '           DP#OPER ,;',
   '           DP#PHX ,;',
   '           DP#POND ,;',
   '           DP#RAT ,;',
   '           DP#SOFT ,;',
   '           DP#TCOX ,;',
   '           DP#UTIL ,;',
   '           DP#WOLF ,;',
   '           DP#WONG ;',
   '    OVER;',
   '          CT#BACKUP_TAPE(;',
   '             BLOCK=SIZE,;',
   '             DENSITY=BPI)',
   '  REM CT#BACKUP_TAPE',
   '  CAT ONTO ABACKUP.FILE_MAP ',
   '    CHECK',
   '    END',
   '!DI STEPCC',
   '!IF STEPCC = 0 THEN GOTO LOOKOK',
   '!IF STEPCC = 1 THEN GOTO LOOKOK',
   '!IF STEPCC = 2 THEN GOTO BAD',
   '!IF STEPCC = 3 THEN GOTO DISK_ERROR',
   '!IF STEPCC = 4 THEN GOTO TAPE_ERROR',
   '!BAD:',
   '!M *****************************************',
   '!M *  SEVERE ERRORS, YOU SHOULD SEE',
   '!M *   MIKE TO RESOLVE THESE',
   '!M *',
   '!M ******************************************',
   '!ERROUT:',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!GOTO ERROROUT',
   '!TAPE_ERROR:',
   '!M ****************************************',
   '!M *  IRRECOVERABLE TAPE ERRORS.',
   '!M *    SEE SHIFT SUPERVISOR FOR PROPER',
   '!M *    ERROR RECOVERY PROCEDURE',
   '!M *',
   '!M ****************************************',
   '!GOTO ERROUT',
   '!DISK_ERROR:',
   '!M *************************************',
   '!M * JOB ABORTED DUE TO DISK I/O ERROR',
   '!M *  PLEASE HAVE CSD CHECK DRIVE AND TRY',
   '!M *  TO RUN AGAIN ',
   '!M * ***********************************',
   '!GOTO ERROUT',
   '!LOOKOK:',
   '!" ************************************',
   '!" DONT CLUTTER CRT WITH NON NECESSARY',
   '!" REPORT THAT IT LOOKS OK.',
   '!" ************************************',
   '!ERROROUT:',
   '!OFF',
   '!EATLO:',
   '!LDEV LP02,ERASE',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
   ' '*0);
                                            /* This
                                                     is
                                                        source
                                                        for
                                                        bbackup
                                            */
 
DCL 1 FL_BBACK CALIGNED STATIC SYMDEF,
      2 BASE(0:%FL_NUMBER_BASE_LINES) CHAR(80) CALIGNED INIT (' ',
   '!DEFAULT BPI=6250,SIZE=8,BTAPE=OLDONE,HOLDUP=0',
   '!JOB PRIO=HOLDUP,NAME=L66B$MULTI$INCREMENTAL,NRERUN',
   '!RESOURCE TIME=999,OR=1,MT(BPI)=1,MEM=511,NHPSN,DP#EFTLO(PUBLIC)',
   '!ORES MT(BPI)=1,MEM=511',
   '!LIMIT LO=9999,DO=50,FPOOLS=31',
   '!IF $SITE=''LADC L66A'' THEN GOTO BAD',
   '!" remember to keep line numbers the same in these files ',
   '!LET TAPESET = ''BTAPE''',
   '!IF TAPESET = ''OLDONE'' THEN GOTO POTSRIGHT',
   '!COPY $XEFT_BBACKUP_BASE.SUPPORT OVER *TWO(LN)',
   '!EDIT *TWO',
   'SE25-90;/BACKUP_TAPE/S/BTAPE/;TX',
   'END',
   '!BATCH *TWO',
   '!M ************************************************',
   '!M * REBATCHING JOB WITH BTAPE',
   '!M * PRIO NEW ONE TO 8 WHEN READY',
   '!M ************************************************',
   '!EDIT *TWO',
   'SE30-90;/OVER;/S/EXTEND;/;TX',
   'END',
   '!PRIV ALL',
   '!COPY *TWO OVER $XEFT_BBACKUP.SUPPORT(NLN)',
   '!GOTO EATLO',
   '!"',
   '!POTSRIGHT:     " JUST CONTINUE WITH THIS TAPESET "',
   '!BANNER (^~TODAY/BACKUP_TAPE/BACKUP/^)',
   '!BANNER (^~TODAY/BACKUP_TAPE/BACKUP/^)',
   '!M Please make sure that DP#CP6D0A is up for this backup run.',
   '!EFT',
   '        BACKUP ;',
   '          DP#DOVE ,;',
   '          DP#CNTL1 ,;',
   '          DP#CNTL2 ,;',
   '          DP#CNTL3 ,;',
   '          DP#CNTL4 ,;',
   '          DP#CNTL5 ,;',
   '          DP#CP6D0A,;',
   '          DP#EFTLO ,; ',
   '          DP#FEP ,;',
   '          DP#GMARK ,;',
   '          DP#HOST ,;',
   '          DP#MOVE ,;',
   '          DP#PONDB ,;',
   '          DP#OPER ,;',
   '          DP#SWAMP ;',
   '    OVER;',
   '          CT#BACKUP_TAPE(;',
   '             BLOCK=SIZE,;',
   '             DENSITY=BPI)',
   '  REM CT#BACKUP_TAPE',
   '  CAT ONTO BBACKUP.FILE_MAP ',
   '     CHECK',
   '    END',
   '!DI STEPCC',
   '!IF STEPCC = 0 THEN GOTO LOOKOK',
   '!IF STEPCC = 1 THEN GOTO LOOKOK',
   '!IF STEPCC = 2 THEN GOTO BAD',
   '!IF STEPCC = 3 THEN GOTO DISK_ERROR',
   '!IF STEPCC = 4 THEN GOTO TAPE_ERROR',
   '!BAD:',
   '!M *****************************************',
   '!M *  SEVERE ERRORS, YOU SHOULD SEE',
   '!M *   MIKE TO RESOLVE THESE',
   '!M *',
   '!M ******************************************',
   '!ERROUT:',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!GOTO ERROROUT',
   '!TAPE_ERROR:',
   '!M ****************************************',
   '!M *  IRRECOVERABLE TAPE ERRORS.',
   '!M *    SEE SHIFT SUPERVISOR FOR PROPER',
   '!M *    ERROR RECOVERY PROCEDURE',
   '!M *',
   '!M ****************************************',
   '!GOTO ERROUT',
   '!DISK_ERROR:',
   '!M *************************************',
   '!M * JOB ABORTED DUE TO DISK I/O ERROR',
   '!M *  PLEASE HAVE CSD CHECK DRIVE AND TRY',
   '!M *  TO RUN AGAIN ',
   '!M * ***********************************',
   '!GOTO ERROUT',
   '!LOOKOK:',
   '!" ************************************',
   '!" DONT CLUTTER CRT WITH NON NECESSARY',
   '!" REPORT THAT IT LOOKS OK.',
   '!" ************************************',
   '!GOTO EATLO ',
   '!ERROROUT:',
   '!OFF',
   '!EATLO:',
   '!LDEV LP02,ERASE',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
   ' '*0);
                                            /* This
                                                     is
                                                        source
                                                        for
                                                        spurge
                                            */
 
DCL 1 FL_STRIP CALIGNED STATIC SYMDEF,
      2 BASE(0:%FL_NUMBER_BASE_LINES) CHAR(108) CALIGNED INIT (' ',
   '!DEFAULT BPI=6250,SIZE=8,NDAYS=7,NWEEKS=1,NHRS=24,REEL=1,SIZE=4,HOLDUP=0,STAPE=OLDONE',
   '!JOB PRIO=HOLDUP,NAME=PURGE$SYS,NRERUN ',
   '!RESOURCE TIME=999,OR=1,MT(BPI)=1,MEM=511,NHPSN,DP#EFTLO(PUBLIC) ',
   '!ORES MT(BPI)=1,MEM=511 ',
   '!LIMIT LO=9999,DO=50,FPOOLS=31 ',
   '!LET HOURCHECK=NHRS,DAYCHECK=NDAYS,PRUNECHECK=NWEEKS,TAPESET=''STAPE''',
   '!IF TAPESET = ''OLDONE'' THEN GOTO POTSRIGHT ',
   '!COPY $XEFT_PURGE_SYS_BASE.SUPPORT OVER *THREE(LN) ',
   '!EDIT *THREE ',
   'SE19-9000;/THISTAPE/S/STAPE/;TX ',
   'END ',
   '!COPY *THREE OVER $XEFT_PURGE_SYS.SUPPORT(NLN) ',
   '!EFT ',
   'OPEN CREATE LT#STAPE FOR TRANSPORT ',
   'DP#MOVE/$XEFT_PTAPE.SUPPORT ',
   'CLOSE',
   'END ',
   '!BATCH $XEFT_PURGE_SYS.SUPPORT HOLDUP = 8 ',
   '!GOTO EATLO ',
   '!POTSRIGHT: ',
   '!PCL ',
   'SPE LT#THISTAPE ',
   'END ',
   '!SKIPSPE: ',
   '!LET SPACEWORD = $SITE || '' offline dump files '' || $DATE || '' '' || $TIME ',
   '!LET RESTBACK = HOURCHECK * DAYCHECK ',
   '!LET ELBACK = 168 * PRUNECHECK ',
   '!BANNER (^~TODAY/THISTAPE/PURGE #SYS/ ) ',
   '!BANNER (^~TODAY/THISTAPE/PURGE #SYS/ ) ',
   '!EDIT ',
   'COPY $XEFT_PURGE_SYS.SUPPORT OVER *ONE,1,1 ',
   'DE5-35 ',
   'END ',
   '!XEQ *ONE WEEKBACK=''%RESTBACK'',MONTHBACK=''%ELBACK'',PASSCHECK=''PAPER'' ',
   '!GOTO EATLO ',
   '!DOIT: ',
   '!EFT ',
   ' CAT INTO SBACKUP.FILE_MAP ',
   ' PURGE DP#SYS(NOT MOD DELTA = WEEKBACK)/(:DF.:SYSTAC - :ERRLOG760101.:SYSTAC) ; ',
   '       OVER LT#THISTAPE(BLOCK=SIZE,DENSITY=BPI,CHECK) ',
   '  END',
   '!IF STEPCC = 3 THEN GOTO DISK_ERROR',
   '!IF STEPCC = 4 THEN GOTO TAPE_ERROR',
   '!EFT ',
   ' CAT INTO SBACKUP.FILE_MAP ',
   ' PURGE DP#SYS(NOT MOD DELTA = MONTHBACK)/(:ERR.:SYSTAC - :ERRz.:SYSTAC) ; ',
   '       OVER LT#THISTAPE(BLOCK=SIZE,DENSITY=BPI,CHECK) ',
   ' END',
   '!IF STEPCC = 3 THEN GOTO DISK_ERROR',
   '!IF STEPCC = 4 THEN GOTO TAPE_ERROR',
   '!EFT ',
   ' CAT INTO SBACKUP.FILE_MAP ',
   ' PURGE DP#SYS(NOT MOD DELTA = MONTHBACK)/(:OCH.:SYSTAC - :OCHz.:SYSTAC) ; ',
   '       OVER LT#THISTAPE(BLOCK=SIZE,DENSITY=BPI,CHECK) ',
   ' END',
   '!IF STEPCC = 3 THEN GOTO DISK_ERROR',
   '!IF STEPCC = 4 THEN GOTO TAPE_ERROR',
   '!EFT ',
   ' CAT INTO SBACKUP.FILE_MAP ',
   ' PURGE DP#SYS(NOT MOD DELTA = MONTHBACK)/(:PF.:SYSTAC - :PFz.:SYSTAC) ; ',
   '       OVER LT#THISTAPE(BLOCK=SIZE,DENSITY=BPI,CHECK) ',
   ' END ',
   '!DI STEPCC',
   '!IF STEPCC = 0 THEN GOTO LOOKOK',
   '!IF STEPCC = 1 THEN GOTO LOOKOK',
   '!IF STEPCC = 2 THEN GOTO LOOKOK   "For purge job only...',
   '!IF STEPCC = 3 THEN GOTO DISK_ERROR',
   '!IF STEPCC = 4 THEN GOTO TAPE_ERROR',
   '!BAD:',
   '!M *****************************************',
   '!M *  SEVERE ERRORS, YOU SHOULD SEE',
   '!M *   MIKE TO RESOLVE THESE',
   '!M *',
   '!M ******************************************',
   '!ERROUT:',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!GOTO ERROROUT',
   '!TAPE_ERROR:',
   '!M ****************************************',
   '!M *  IRRECOVERABLE TAPE ERRORS.',
   '!M *    SEE SHIFT SUPERVISOR FOR PROPER',
   '!M *    ERROR RECOVERY PROCEDURE',
   '!M *',
   '!M ****************************************',
   '!GOTO ERROUT',
   '!DISK_ERROR:',
   '!M *************************************',
   '!M * JOB ABORTED DUE TO DISK I/O ERROR',
   '!M *  PLEASE HAVE CSD CHECK DRIVE AND TRY',
   '!M *  TO RUN AGAIN ',
   '!M * ***********************************',
   '!GOTO ERROUT',
   '!LOOKOK:',
   '!" ************************************',
   '!" DONT CLUTTER CRT WITH NON NECESSARY',
   '!" REPORT THAT IT LOOKS OK.',
   '!" ************************************',
   '!ERROROUT',
   '!OFF',
   '!EATLO:',
   '!LDEV LP02,ERASE',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
    ' '*0);
 
                                            /* This
                                                     is
                                                        source
                                                        for
                                                        zbackup
                                            */
DCL 1 FL_ZBACK CALIGNED STATIC SYMDEF,
      2 BASE(0:%FL_NUMBER_BASE_LINES) CHAR(80) CALIGNED INIT (' ',
   '!DEFAULT BPI=6250,SIZE=8,ZTAPE=OLDONE,HOLDUP=0',
   '!JOB PRIO=HOLDUP,NAME=L66A$ZZZ$INCREMENTAL,NRERUN',
   '!RESOURCE TIME=999,OR=1,MT(BPI)=1,MEM=511,NHPSN,DP#EFTLO(PUBLIC)',
   '!ORES MT(BPI)=1,MEM=511',
   '!LIMIT LO=9999,DO=50,FPOOLS=31',
   '!IF $SITE=''LADC L66B'' THEN GOTO BAD',
   '!" remember to keep line numbers the same in these files ',
   '!LET TAPESET = ''ZTAPE''',
   '!IF TAPESET = ''OLDONE'' THEN GOTO POTSRIGHT',
   '!COPY $XEFT_ZBACKUP_BASE.SUPPORT OVER *TWO(LN)',
   '!EDIT *TWO  " DO IDS FULL EACH NEW TAPE SET " ',
   'SE27-9000;/BACKUP_TAPE/S/ZTAPE/;/(IDS_MODE)/S/(FULL)/;TX',
   'END',
   '!BATCH *TWO',
   '!M ************************************************',
   '!M * REBATCHING JOB WITH ZTAPE',
   '!M * PRIO NEW ONE TO 8 WHEN READY',
   '!M ************************************************',
   '!EDIT *TWO',
   'SE25-9000;/OVER;/S/EXTEND;/;/IDS(FULL)/S/IDS(FAST)/;TX',
   'END',
   '!PRIV ALL',
   '!COPY *TWO OVER $XEFT_ZBACKUP.SUPPORT(NLN)',
   '!GOTO EATLO',
   '!"',
   '!POTSRIGHT:     " JUST CONTINUE WITH THIS TAPESET "',
   '!BANNER (^~TODAY/BACKUP_TAPE/BACKUP/^)',
   '!BANNER (^~TODAY/BACKUP_TAPE/BACKUP/^)',
   '!EFT',
   '        BACKUP ;',
   '          DP#CNTL1 ,;',
   '          DP#CNTL2 ,;',
   '          DP#CNTL3 ,;',
   '          DP#CNTL4 ,;',
   '          DP#CNTL5 ,;',
   '          DP#CNTL6 ,;',
   '          DP#GALXC ,;',
   '          DP#SOLAR ,;',
   '          DP#ZZZ ;',
   '    OVER;',
   '          CT#BACKUP_TAPE(;',
   '             BLOCK=SIZE,;',
   '             DENSITY=BPI)',
   '  REM CT#BACKUP_TAPE ',
   '  CAT ONTO ZBACKUP.FILE_MAP ',
   '     CHECK',
   '    END',
   '!DI STEPCC',
   '!IF STEPCC = 0 THEN GOTO LOOKOK',
   '!IF STEPCC = 1 THEN GOTO LOOKOK',
   '!IF STEPCC = 2 THEN GOTO BAD',
   '!IF STEPCC = 3 THEN GOTO DISK_ERROR',
   '!IF STEPCC = 4 THEN GOTO TAPE_ERROR',
   '!BAD:',
   '!M *****************************************',
   '!M *  SEVERE ERRORS, YOU SHOULD SEE',
   '!M *   MIKE TO RESOLVE THESE',
   '!M *',
   '!M ******************************************',
   '!ERROUT:',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!GOTO ERROROUT',
   '!TAPE_ERROR:',
   '!M ****************************************',
   '!M *  IRRECOVERABLE TAPE ERRORS.',
   '!M *    SEE SHIFT SUPERVISOR FOR PROPER',
   '!M *    ERROR RECOVERY PROCEDURE',
   '!M *',
   '!M ****************************************',
   '!GOTO ERROUT',
   '!DISK_ERROR:',
   '!M *************************************',
   '!M * JOB ABORTED DUE TO DISK I/O ERROR',
   '!M *  PLEASE HAVE CSD CHECK DRIVE AND TRY',
   '!M *  TO RUN AGAIN ',
   '!M * ***********************************',
   '!GOTO ERROUT',
   '!LOOKOK:',
   '!" ************************************',
   '!" DONT CLUTTER CRT WITH NON NECESSARY',
   '!" REPORT THAT IT LOOKS OK.',
   '!" ************************************',
   '!ERROROUT:',
   '!OFF',
   '!EATLO:',
   '!LDEV LP02,ERASE',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
   ' '*0);
                         /*
                            Here is the saveall
                            source jcl
                            it is just slightly
                            different plus
                            the lo file names
                            get fixed here
                            as well
                         */
 
DCL 1 FL_SAVE CALIGNED STATIC SYMDEF,
      2 JCL (0:%FL_NUMBER_BASE_LINES) CHAR(80) CALIGNED INIT (' ',
   '!DEFAULT BPI=6250,SIZE=8,HOLDUP=0,START=$,STOP=zzzzzzzz',
   '!JOB PRIO=HOLDUP,NAME=SAVE$ALL$XSN,NRERUN',
   '!RESOURCE TIME=999,OR=1,MT(BPI)=1,MEM=511,NHPSN,DP#EFTLO(PUBLIC)',
   '!ORES MT(BPI)=1,MEM=511',
   '!LIMIT LO=9999,DO=50,FPOOLS=31',
   '!"',
   '!BANNER (^~TODAY/USETAPE/SAVE ALL/^)',
   '!BANNER (^~TODAY/USETAPE/SAVE ALL/^)',
   '!EFT',
   '        SAVE ;',
   '          DP#PSN  ; ',
   '    OVER;',
   '          CT#USETAPE(;',
   '             BLOCK=SIZE,;',
   '             DENSITY=BPI)',
   '  REM CT#USETAPE ',
   '   CAT OVER TEMP1.FILE_MAP ',
   '    CHECK',
   '    END',
   '!DI STEPCC',
   '!IF STEPCC = 0 THEN GOTO LOOKOK',
   '!IF STEPCC = 1 THEN GOTO LOOKOK',
   '!IF STEPCC = 2 THEN GOTO BAD',
   '!IF STEPCC = 3 THEN GOTO DISK_ERROR',
   '!IF STEPCC = 4 THEN GOTO TAPE_ERROR',
   '!BAD:',
   '!M *****************************************',
   '!M *  SEVERE ERRORS, YOU SHOULD SEE',
   '!M *   MIKE TO RESOLVE THESE',
   '!M *',
   '!M ******************************************',
   '!ERROUT:',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!GOTO ERROROUT',
   '!TAPE_ERROR:',
   '!M ****************************************',
   '!M *  IRRECOVERABLE TAPE ERRORS.',
   '!M *    SEE SHIFT SUPERVISOR FOR PROPER',
   '!M *    ERROR RECOVERY PROCEDURE',
   '!M *',
   '!M ****************************************',
   '!GOTO ERROUT',
   '!DISK_ERROR:',
   '!M *************************************',
   '!M * JOB ABORTED DUE TO DISK I/O ERROR',
   '!M *  PLEASE HAVE CSD CHECK DRIVE AND TRY',
   '!M *  TO RUN AGAIN ',
   '!M * ***********************************',
   '!GOTO ERROUT',
   '!LOOKOK:',
   '!" ************************************',
   '!" DONT CLUTTER CRT WITH NON NECESSARY',
   '!" REPORT THAT IT LOOKS OK.',
   '!" ************************************',
   '!GOTO EATLO',
   '!ERROROUT:',
   '!OFF',
   '!EATLO:',
   '!LDEV LP02,ERASE',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
    ' '*0);
                         /*
                            Here is the vaultall
                            source jcl
                            it is just slightly
                            different plus
                            the lo file names
                            get fixed here
                            as well
                         */
 
DCL 1 FL_VAULT CALIGNED STATIC SYMDEF,
      2 JCL (0:%FL_NUMBER_BASE_LINES) CHAR(80) CALIGNED INIT (' ',
   '!DEFAULT BPI=6250,SIZE=8,HOLDUP=0,START=$,STOP=zzzzzzzz',
   '!JOB PRIO=HOLDUP,NAME=VAULT$ALL$XSN,NRERUN',
   '!RESOURCE TIME=999,OR=1,MT(BPI)=1,MEM=511,NHPSN,DP#EFTLO(PUBLIC)',
   '!ORES MT(BPI)=1,MEM=511',
   '!LIMIT LO=9999,DO=50,FPOOLS=31',
   '!"',
   '!BANNER (^~TODAY/USETAPE/VAULT ALL/^)',
   '!BANNER (^~TODAY/USETAPE/VAULT ALL/^)',
   '!EFT',
   '    OPEN CREATE ; ',
   '          CT#USETAPE(;',
   '             BLOCK=SIZE,;',
   '             DENSITY=BPI);',
   '    FOR TRANSPORT ',
   '        DP#PSN(PAD,DIR,ANYF) ',
   '    CLOSE(REMOVE) ',
   '  CAT OVER TEMP1.FILE_MAP ',
   '     CHECK',
   '     END',
   '!DI STEPCC',
   '!IF STEPCC = 0 THEN GOTO LOOKOK',
   '!IF STEPCC = 1 THEN GOTO LOOKOK',
   '!IF STEPCC = 2 THEN GOTO BAD',
   '!IF STEPCC = 3 THEN GOTO DISK_ERROR',
   '!IF STEPCC = 4 THEN GOTO TAPE_ERROR',
   '!BAD:',
   '!M *****************************************',
   '!M *  SEVERE ERRORS, YOU SHOULD SEE',
   '!M *   MIKE TO RESOLVE THESE',
   '!M *',
   '!M ******************************************',
   '!ERROUT:',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!BANNER (SAVE ERROR/4 DATABASE/MANAGER/^)',
   '!GOTO ERROROUT',
   '!TAPE_ERROR:',
   '!M ****************************************',
   '!M *  IRRECOVERABLE TAPE ERRORS.',
   '!M *    SEE SHIFT SUPERVISOR FOR PROPER',
   '!M *    ERROR RECOVERY PROCEDURE',
   '!M *',
   '!M ****************************************',
   '!GOTO ERROUT',
   '!DISK_ERROR:',
   '!M *************************************',
   '!M * JOB ABORTED DUE TO DISK I/O ERROR',
   '!M *  PLEASE HAVE CSD CHECK DRIVE AND TRY',
   '!M *  TO RUN AGAIN ',
   '!M * ***********************************',
   '!GOTO ERROUT',
   '!LOOKOK:',
   '!" ************************************',
   '!" DONT CLUTTER CRT WITH NON NECESSARY',
   '!" REPORT THAT IT LOOKS OK.',
   '!" ************************************',
   '!GOTO EATLO',
   '!ERROROUT:',
   '!OFF',
   '!EATLO:',
   '!LDEV LP02,ERASE',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
    ' '*0);
                            /*
                                  Here is the dual
                                  jcl
                                  3 jobs in 1
                            */
DCL 1 FL_DUAL CALIGNED STATIC SYMDEF,
      2 JCL (0:%FL_NUMBER_DUAL_LINES) CHAR(108) UNAL INIT (' ',
   '!DEFAULT PHOW=EXCLUSIVE,DHOW=EXCLUSIVE,PSN=BADPACKNAME,yy=10',
   '!DEFAULT COM1 = '' '',COM2 = ''"'',COM3=''"'',HOLDUP=0,BNUM=0 ',
   '!JOB PRIO=HOLDUP,NAME=DL$XSN,NRERUN ',
   '!RESOURCE TIME=999,NHPSN,DP#EFTLO(SH),MEM=511,OR=1,NHPSN,DP#PSN(PHOW),DP#DSN(DHOW),DP(200)=NUM,DP(600)=BNUM',
   '!ORES DP#PSN(PHOW),DP#DSN(DHOW),DP=NUM ',
   '!LIMIT LO=9999,DO=50,FPOOLS=31 ',
   '!" ',
   '!" CHOSE CAREFULLY, THIS JCL CAN DO THEM ALL ',
   '!BANNER (^~TODAY/DUAL PSN/INCR DSN/ ) ',
   '!BANNER (^~TODAY/DUAL PSN/INCR DSN/ ) ',
   '!M BEGINNING DUAL INCR FROM PSN TO DP#DSN ',
   '!PIG ',
   'DEF #PSN NEWFDS ',
   'END ',
   '!EFT ',
   'COM1 CAT INTO TEMP1.FILE_MAP ',
   'COM1 DUAL INCR DP#PSN OVER DP#DSN ',
   'COM2 CAT OVER TEMP1.FILE_MAP ',
   'COM2 DUAL ALL DP#PSN(CLEANUP,SWITCH IF ERRORS < yy) OVER DP#DSN ',
   'COM3 CAT OVER TEMP1.FILE_MAP ',
   'COM3 DUAL ALL DP#PSN OVER DP#DSN ',
   'END ',
   '!DI STEPCC ',
   '!IF STEPCC > 1 THEN GOTO BAD ',
   '!GOTO LOOKOK ',
   '!BAD: ',
   '!M ***************************************** ',
   '!M *  SEVERE ERRORS, YOU SHOULD SEE ',
   '!M *   MIKE TO RESOLVE THESE ',
   '!M * ',
   '!M ****************************************** ',
   '!ERROUT: ',
   '!BANNER (^PSN ERROR/4 PACKSET/MANAGER/^) ',
   '!BANNER (^PSN ERROR/4 PACKSET/MANAGER/^) ',
   '!GOTO ERROROUT ',
   '!LOOKOK: ',
   '!" ************************************ ',
   '!" DONT CLUTTER CRT WITH NON NECESSARY ',
   '!" REPORT THAT IT LOOKS OK. ',
   '!" ************************************ ',
   '!M PUBLIC #PSN when enough spindles are free. ',
   '!ERROROUT:',
   '!OFF',
   '!EATLO: ',
   '!PIG ',
   'DEF #PSN NONEWFDS ',
   'END ',
   '!RELEASE DP#PSN,DP#DSN ',
   '!SET M$LL NO ',
   '!LDEV LP01,ERASE ',
   ' '*0);
 
                         /*
                            Here is the stripper
                            jcl for the dual
 
                         */
DCL 1 FL_DUAL_STRIP CALIGNED STATIC SYMDEF,
      2 JCL (0:%FL_NUMBER_DUAL_LINES) CHAR(80) CALIGNED INIT (' ',
   '!DEFAULT HOLDUP=8,PHOW=PUBLIC,TRUESET=BADPACKNAME,LONAME=SORRYCHARLIE',
   '!JOB PRIO=HOLDUP,NAME=LISTING$LONAME,NRERUN',
   '!RESOURCE TIME=999,NHPSN,DP#EFTLO(PUBLIC),MEM=511,OR=1,DP#TRUESET(PHOW)',
   '!ORES DP#TRUESET(PHOW)',
   '!LIMIT LO=9999,DO=50,FPOOLS=31',
   '!LDEV LP02 LP@LOCAL',
   '!LET STOPUS = ''LONAME''',
   '!IF STOPUS = ''SORRYCHARLIE'' THEN GOTO SKIP1',
   '!GOTO SKIP2',
   '!SKIP1:',
   '!M ****************************************************:',
   '!M * The only place where you need ''string'' = ''string''',
   '!M * DUAL listing did not get produced.',
   '!M ****************************************************',
   '!GOTO EOJ',
   '!SKIP2:',
   '!SET M$LO LONAME.FILE_MAP,ORG=UR,CTG=YES,EXIST=NEWFILE',
   '!EFT',
   'SCAN DP#TRUESET',
   'END',
   '!LET FLAGGING = $SITE || '' dual files '' || $DATE || '' '' || $TIME ',
   '!DELETE LONAME_DUAL.FILE_MAP',
   '!SET M$LL  LONAME_DUAL.FILE_MAP',
   '!OUTPUT FLAGGING  ',
   '!R M$LL',
   '!SET M$INPUT LONAME.FILE_MAP',
   '!SET M$OUTPUT LONAME_DUAL.FILE_MAP,ORG=CON,FUN=UPDATE,EXIST=OLDFILE',
   '!$XEFT_STRIP_TOOLS.SUPPORT',
   '!IF STEPCC > 0 THEN GOTO EOJ',
   '!DELETE LONAME.FILE_MAP',
   '!EOJ:',
   '!SET M$LL NO',
   '!LDEV LP01,ERASE',
   ' '*0);
%EJECT;
    /*
             Procedure
    */
INIT_BUFFERS:   ;
          WRITEM.BUF_ = VECTOR(OUTPUT);
          WRITEW.BUF_ = VECTOR(OUTPUT);
          WRITED.BUF_ = VECTOR(OUTPUT);
          WRITE_AFILE.BUF_ = VECTOR(OUTPUT);
          WRITE_BFILE.BUF_ = VECTOR(OUTPUT);
          WRITE_PFILE.BUF_ = VECTOR(OUTPUT);
          WRITE_SFILE.BUF_ = VECTOR(OUTPUT);
          WRITE_VFILE.BUF_ = VECTOR(OUTPUT);
          WRITE_ZFILE.BUF_ = VECTOR(OUTPUT);
          WRITED.BUF_ = VECTOR(OUTPUT);
          WRITE_SCAN.BUF_ = VECTOR(OUTPUT);
CHECK_DOUBLE_UP:   ;
          FL_EFT.BANNER#= ',HOLDUP=8';
          CALL M$TIME(NOWTIME) ALTRET(GIVE_HINT);
          CALL VSFFISCAL(DATE,FISCAL);
          CALL M$OPEN(FL_STOP_TUESDAY) ALTRET(GIVE_HINT);
          FL_READ_TUESDAY.BUF_ = VECTOR(OUTPUT);
          CALL M$READ(FL_READ_TUESDAY) ALTRET(GIVE_HINT);
          I = 900;
          CALL INDEX(I,'"WEEK',OUTPUT);
          IF I <108
          THEN DO;
              I = I + 6;
              IF SUBSTR(OUTPUT,I,3) = SUBSTR(FISCAL,5,2)
              THEN DO;
                  FL_TO_OP.MESS_ = VECTOR(STARS);
                  CALL M$KEYIN(FL_TO_OP) ALTRET(GIVE_HINT);
                  FL_TO_OP.MESS_ = VECTOR(BITCH);
                  CALL M$KEYIN(FL_TO_OP) ALTRET(GIVE_HINT);
                  FL_TO_OP.MESS_ = VECTOR(STARS);
                  CALL M$KEYIN(FL_TO_OP) ALTRET(GIVE_HINT);
                  CALL M$ERR;
                  END;
                ELSE DO;
                CALL M$CLOSE(FL_CLOSE_WEEK) ALTRET(GIVE_HINT);
                END;
              END;
          ELSE CALL M$ERR;
       /*
                Set up jcl for $XEFT_A_PACKS
       */
SETUP_L66A_BACKUPS:   ;
          CALL M$OPEN(FL_TEST_A) ALTRET(SKIP_A);
          FL_TEMP$ = DCBADDR(DCBNUM(M$ATAPE));
          IF FL_TEMP$->F$DCB.ASN# = %FILE#
          THEN DO;
              FL_TAPE.JCL(2) = '!JOB PRIO=NOWAIT,NAME=XEFT_ATAPE,NRERUN';
              FL_TAPE.JCL(5) = '!IF $SITE = ''LADC L66B'' THEN GOTO EATLO';
              WRITEA.BUF_ = VECTOR(OUTPUT);
              DO I = 1 TO %FL_TAPE_JCL_LINES;
                  OUTPUT = FL_TAPE.JCL(I);
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITEA) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              WRITEA.BUF_ = VECTOR(FL_EFT);
              FL_EFT.JOBNAME = '$XEFT_ABACKUP_BASE';
              FL_EFT.TNAME = 'ATAPE';
              FL_EFT.SYSTEM = 'A';
              FL_EFT.WEEK = SUBSTR(FISCAL,5,2);
              FL_EFT.TYPE = SUBSTR(TAPE_TYPE,1,1);
              FL_EFT.TAG = '!B';
              DO I = 0 TO 80 BY 20;
                  CALL BINCHAR(FL_EFT.TNUM#,I);
                  CALL M$WRITE(WRITEA) ALTRET(GIVE_HINT);
                  FL_EFT.TAG = '!"';
                  END;
              FL_FIX.TAPE(1) = '!COPY $XEFT_ATAPE.SUPPORT OVER *THREE(LN)';
              FL_FIX.TAPE(6) = '!COPY *THREE OVER $XEFT_ATAPE.SUPPORT(NLN)';
              WRITEA.BUF_ = VECTOR(OUTPUT);
              DO I = 1 TO %FL_NUMBER_FIX_LINES;
                  OUTPUT = FL_FIX.TAPE(I);
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITEA) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_A) ALTRET(GIVE_HINT);
              CALL M$OPEN(FL_AFILE) ALTRET(GIVE_HINT);
              DO I = 1 TO %FL_NUMBER_BASE_LINES;
                  OUTPUT = FL_ABACK.BASE(I);
                  IF OUTPUT = 'REPLACE WITH STEPCC SET ONE'
                  THEN DO;
                      DO K = 1 TO %FL_PRECHECK_LINES;
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_AFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT = 'REPLACE WITH STEPCC SET TWO'
                  THEN DO;
                      DO K = 1 TO %FL_POST_LINES;
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_AFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITE_AFILE) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_AFILE) ALTRET(GIVE_HINT);
              END;
          ELSE;
SKIP_A:   ;
       /*
                Set up jcl for $XEFT_B_PACKS
       */
SETUP_L66B_BACKUPS:   ;
          CALL M$OPEN(FL_TEST_B) ALTRET(SKIP_B);
          FL_TEMP$ = DCBADDR(DCBNUM(M$BTAPE));
          IF FL_TEMP$->F$DCB.ASN# = %FILE#
          THEN DO;
              FL_TAPE.JCL(2) = '!JOB PRIO=NOWAIT,NAME=XEFT_BTAPE,NRERUN';
              FL_TAPE.JCL(5) = '!IF $SITE = ''LADC L66A'' THEN GOTO EATLO';
              WRITEB.BUF_ = VECTOR(OUTPUT);
              DO I = 1 TO %FL_TAPE_JCL_LINES;
                  OUTPUT = FL_TAPE.JCL(I);
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITEB) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              WRITEB.BUF_ = VECTOR(FL_EFT);
              FL_EFT.JOBNAME = '$XEFT_BBACKUP_BASE';
              FL_EFT.TNAME = 'BTAPE';
              FL_EFT.SYSTEM = 'B';
              FL_EFT.WEEK = SUBSTR(FISCAL,5,2);
              FL_EFT.TYPE = SUBSTR(TAPE_TYPE,1,1);
              FL_EFT.TAG = '!B';
              DO I = 0 TO 80 BY 20;
                  CALL BINCHAR(FL_EFT.TNUM#,I);
                  CALL M$WRITE(WRITEB) ALTRET(GIVE_HINT);
                  FL_EFT.TAG = '!"';
                  END;
              FL_FIX.TAPE(1) = '!COPY $XEFT_BTAPE.SUPPORT OVER *THREE(LN)';
              FL_FIX.TAPE(6) = '!COPY *THREE OVER $XEFT_BTAPE.SUPPORT(NLN)';
              WRITEB.BUF_ = VECTOR(OUTPUT);
              DO I = 1 TO %FL_NUMBER_FIX_LINES;
                  OUTPUT = FL_FIX.TAPE(I);
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITEB) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_B) ALTRET(GIVE_HINT);
              CALL M$OPEN(FL_BFILE) ALTRET(GIVE_HINT);
              DO I = 1 TO %FL_NUMBER_BASE_LINES;
                  OUTPUT = FL_BBACK.BASE(I);
                  IF OUTPUT = 'REPLACE WITH STEPCC SET ONE'
                  THEN DO;
                      DO K = 1 TO %FL_PRECHECK_LINES;
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_BFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT = 'REPLACE WITH STEPCC SET TWO'
                  THEN DO;
                      DO K = 1 TO %FL_POST_LINES;
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_BFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITE_BFILE) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_BFILE) ALTRET(GIVE_HINT);
              END;
          ELSE;
SKIP_B:   ;
       /*
                Set up jcl for $XEFT_Z_PACKS
       */
SETUP_L66A_ZZZPACK:   ;
          CALL M$OPEN(FL_TEST_Z) ALTRET(SKIP_Z);
          FL_TEMP$ = DCBADDR(DCBNUM(M$ZTAPE));
          IF FL_TEMP$->F$DCB.ASN# = %FILE#
          THEN DO;
              FL_TAPE.JCL(2) = '!JOB PRIO=NOWAIT,NAME=XEFT_ZTAPE,NRERUN';
              FL_TAPE.JCL(5) = '!IF $SITE = ''LADC L66B'' THEN GOTO EATLO';
              WRITEZ.BUF_ = VECTOR(OUTPUT);
              DO I = 1 TO %FL_TAPE_JCL_LINES;
                  OUTPUT = FL_TAPE.JCL(I);
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITEZ) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              WRITEZ.BUF_ = VECTOR(FL_EFT);
              FL_EFT.JOBNAME = '$XEFT_ZBACKUP_BASE';
              FL_EFT.TNAME = 'ZTAPE';
              FL_EFT.SYSTEM = 'Z';
              FL_EFT.WEEK = SUBSTR(FISCAL,5,2);
              FL_EFT.TYPE = SUBSTR(TAPE_TYPE,1,1);
              FL_EFT.TAG = '!B';
              DO I = 0 TO 80 BY 20;
                  CALL BINCHAR(FL_EFT.TNUM#,I);
                  CALL M$WRITE(WRITEZ) ALTRET(GIVE_HINT);
                  FL_EFT.TAG = '!"';
                  END;
              WRITEZ.BUF_ = VECTOR(OUTPUT);
              FL_FIX.TAPE(1) = '!COPY $XEFT_ZTAPE.SUPPORT OVER *THREE(LN)';
              FL_FIX.TAPE(6) = '!COPY *THREE OVER $XEFT_ZTAPE.SUPPORT(NLN)';
              DO I = 1 TO %FL_NUMBER_FIX_LINES;
                  OUTPUT = FL_FIX.TAPE(I);
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITEZ) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_Z) ALTRET(GIVE_HINT);
              CALL M$OPEN(FL_ZFILE) ALTRET(GIVE_HINT);
              DO I = 1 TO %FL_NUMBER_BASE_LINES;
                  OUTPUT = FL_ZBACK.BASE(I);
                  IF OUTPUT = 'REPLACE WITH STEPCC SET ONE'
                  THEN DO;
                      DO K = 1 TO %FL_PRECHECK_LINES;
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_ZFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT = 'REPLACE WITH STEPCC SET TWO'
                  THEN DO;
                      DO K = 1 TO %FL_POST_LINES;
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_ZFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITE_ZFILE) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_ZFILE) ALTRET(GIVE_HINT);
              END;
          ELSE;
SKIP_Z:   ;
       /*
                Set up jcl for purging #SYS.:SYSTAC
       */
SETUP_PURGE_SYSTAC:   ;
          CALL M$OPEN(FL_TEST_P) ALTRET(SKIP_P);
          FL_TEMP$ = DCBADDR(DCBNUM(M$PTAPE));
          IF FL_TEMP$->F$DCB.ASN# = %FILE#
          THEN DO;
              WRITEP.BUF_ = VECTOR(OUTPUT);
              DO I = 1 TO %FL_NUMBER_BASE_LINES;
                  OUTPUT = FL_PURGE.BASE(I);
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITEP) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_P) ALTRET(GIVE_HINT);
              CALL M$OPEN(FL_PFILE) ALTRET(GIVE_HINT);
              DO I = 1 TO %FL_NUMBER_BASE_LINES;
                  OUTPUT = FL_STRIP.BASE(I);
                  IF OUTPUT = 'REPLACE WITH STEPCC SET ONE'
                  THEN DO;
                      DO K = 1 TO %FL_PRECHECK_LINES;
                          OUTPUT = FL_PRECHECK.STEPCC(K);
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_PFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT = 'REPLACE WITH STEPCC SET TWO'
                  THEN DO;
                      DO K = 1 TO %FL_POST_LINES;
                          OUTPUT = FL_POSTCHECK.STEPCC(K);
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_PFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITE_PFILE) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_PFILE) ALTRET(GIVE_HINT);
              END;
          ELSE;
SKIP_P:   ;
       /*
                Set up jcl for save all either system
       */
SETUP_STANDARD_SAVE:  ;
          CALL M$OPEN(FL_TEST_S) ALTRET(SKIP_S);
          FL_TEMP$ = DCBADDR(DCBNUM(M$SAVE_TAPE));
          IF FL_TEMP$->F$DCB.ASN# = %FILE#
          THEN DO;
              WRITEP.BUF_ = VECTOR(OUTPUT);
              CALL M$OPEN(FL_SFILE) ALTRET(GIVE_HINT);
              DO I = 1 TO %FL_NUMBER_BASE_LINES;
                  OUTPUT = FL_SAVE.JCL(I);
                  IF OUTPUT = 'REPLACE WITH STEPCC SET ONE'
                  THEN DO;
                      DO K = 1 TO %FL_PRECHECK_LINES;
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_SFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT = 'REPLACE WITH STEPCC SET TWO'
                  THEN DO;
                      DO K = 1 TO %FL_POST_LINES;
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_SFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITE_SFILE) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_SFILE) ALTRET(GIVE_HINT);
              END;
          ELSE;
SKIP_S:   ;
       /*
                Set up jcl for vaulting either system
       */
SETUP_STANDARD_VAULT: ;
          CALL M$OPEN(FL_TEST_V) ALTRET(SKIP_V);
          FL_TEMP$ = DCBADDR(DCBNUM(M$SAVE_TAPE));
          IF FL_TEMP$->F$DCB.ASN# = %FILE#
          THEN DO;
              WRITEP.BUF_ = VECTOR(OUTPUT);
              CALL M$OPEN(FL_VFILE) ALTRET(GIVE_HINT);
              DO I = 1 TO %FL_NUMBER_BASE_LINES;
                  OUTPUT = FL_VAULT.JCL(I);
                  IF OUTPUT = 'REPLACE WITH STEPCC SET ONE'
                  THEN DO;
                      DO K = 1 TO %FL_PRECHECK_LINES;
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_VFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT = 'REPLACE WITH STEPCC SET TWO'
                  THEN DO;
                      DO K = 1 TO %FL_POST_LINES;
                          IF OUTPUT ~= ' '
                          THEN CALL M$WRITE(WRITE_VFILE) ALTRET(GIVE_HINT);
                          ELSE;
                          END;
                      END;
                  ELSE;
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITE_VFILE) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_VFILE) ALTRET(GIVE_HINT);
              END;
          ELSE;
SKIP_V:   ;
                   /*
                      Set up jcl for
                      lots of dual operations
                      including strip options
                      ha, what options,
 
                   */
SETUP_STANDARD_DUAL:  ;
          CALL M$OPEN(FL_TEST_DUAL) ALTRET(SKIP_DUAL);
          FL_TEMP$ = DCBADDR(DCBNUM(M$DUAL));
          IF FL_TEMP$->F$DCB.ASN# = %FILE#
          THEN DO;
              DO I = 1 TO %FL_NUMBER_DUAL_LINES;
                  OUTPUT = FL_DUAL.JCL(I);
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITED) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_DUAL) ALTRET(GIVE_HINT);
              CALL M$OPEN(FL_TEST_SCAN) ALTRET(GIVE_HINT);
              DO I = 1 TO %FL_NUMBER_DUAL_LINES;
                  OUTPUT = FL_DUAL_STRIP.JCL(I);
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITE_SCAN) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_SCAN) ALTRET(GIVE_HINT);
              END;
          ELSE;
SKIP_DUAL: ;
       /*
                Set up $XDAILY jcl
       */
SETUP_STANDARD_WEEK:  ;
          CALL M$OPEN(FL_TEST_WEEK) ALTRET(SKIP_WEEK);
          FL_TEMP$ = DCBADDR(DCBNUM(M$WEEK));
          IF FL_TEMP$->F$DCB.ASN# = %FILE#
          THEN DO;
              CALL CONCAT(FL_DAILY.JCL(8),'SE1-9000;/KILLJOY/S/',
                      SUBSTR(FISCAL,5,2),'S00/;TX ');
              CALL CHARBIN(I,SUBSTR(FISCAL,5,2));
              DO CASE(I);
                CASE(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,
                      31,33,35,37,39,41,43,45,47,49,51,53);
                  CALL CONCAT(FL_DAILY.JCL(10),'SE15-9000;/DRILL/S/_SAVE_ODD/;TX');
                CASE(ELSE);
                  CALL CONCAT(FL_DAILY.JCL(10),'SE15-9000;/DRILL/S/_SAVE_EVEN/;TX');
                END;
              DO I = 1 TO %FL_NUMBER_DAILY_LINES;
                  OUTPUT = FL_DAILY.JCL(I);
                  IF I = 1
                  THEN DO;
                      J = 108;
                      CALL INDEX(J,'"WEEK',OUTPUT);
                      IF J < 108
                      THEN DO;
                          J = J + 6;
                          CALL INSERT(SUBSTR(OUTPUT,J,2),,,SUBSTR(FISCAL,5,2));
                          END;
                      ELSE CALL M$ERR;
                      END;
                  ELSE;
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITEW) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_WEEK) ALTRET(GIVE_HINT);
              END;
          ELSE;
SKIP_WEEK: ;
       /*
                Set up monthly jcl
       */
SETUP_STANDARD_MONTH: ;
          CALL M$OPEN(FL_TEST_MONTH) ALTRET(SKIP_MONTH);
          FL_TEMP$ = DCBADDR(DCBNUM(M$MONTH));
          IF FL_TEMP$->F$DCB.ASN# = %FILE#
          THEN DO;
              CALL CONCAT(FL_MONTHLY.JCL(8),'SE1-9000;/KILLJOY/S/',
                      SUBSTR(FISCAL,5,2),'V00/;TX ');
              CALL CHARBIN(I,SUBSTR(FISCAL,5,2));
              DO CASE(I);
                CASE(1,2,3,4,5,10,11,12,13,19,20,21,22,
                      27,28,29,30,31,36,37,38,39,45,46,47,48);
                  CALL CONCAT(FL_MONTHLY.JCL(9),'SE13-9000;/DRILL/S/_VAULT_ODD/;TX');
                CASE(ELSE);
                  CALL CONCAT(FL_MONTHLY.JCL(9),'SE13-9000;/DRILL/S/_VAULT_EVEN/;TX');
                END;
              DO I = 1 TO 99;
                  OUTPUT = FL_MONTHLY.JCL(I);
                  IF OUTPUT ~= ' '
                  THEN CALL M$WRITE(WRITEM) ALTRET(GIVE_HINT);
                  ELSE;
                  END;
              CALL M$CLOSE(FL_CLOSE_MONTH) ALTRET(GIVE_HINT);
              END;
          ELSE;
SKIP_MONTH: ;
          CALL M$EXIT;
GIVE_HINT: ;
          ERR_SYS = B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
          CALL M$ERRMSG(FL_ERR) ALTRET(BYE_NOW);
BYE_NOW:  ;
          CALL M$ERR;
END;
