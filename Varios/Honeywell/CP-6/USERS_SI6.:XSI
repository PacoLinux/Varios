/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*  DMC,DMR,PLM=6,IND=4,SDI=2,CTI=8,DCI=4,CSU=2,ECU=2,ENI=4,
      THI=0,DTI=0,IAD=0                              */
CONVERT_USERS: PROC  MAIN ;
/**********************************************************/
 
/*D* NAME:     CONVERT_USERS
     CALL:     CALL CONVERT_USERS
     INPUT:    :USERS.:SYS & :HLP.:SYS
     OUTPUT:   Builds 2 new files called *USERS and *HLP.
     DESCRIPTION:  CONVERT_USERS is a routine to fix a :USERS file
                    to allow a CMPR.X run against it and a new
                    :USERS file created through the use of the
                    JCL command output from SUPER to correctly
                    compare the two files.
                    Currently, this procedure will set BAD_LOGON_CNT to
                    zero (This was CUR_BAD_LOGON_CNT in pre E00,
                    PREV_BAD_LOGON_CNT went away for E00).
                    It will also zero the new fields added for E00,
                    LOGINS.LAST_LOGON_TIME, LOGINS.BAD_LOGON_CNT,
                    PASSWORD_CHANGE_TIME, MAXENQ, RFUH1, RFUW1,
                    RFUW2, RFUW3, RFUW4, RFUW5.
                    (Rserved for Future Use   W -> Word  H -> Half)
                    This procedure will also zero out all of the
                    unused bits in the AS_USERS records.
                    Those unused bit fields are:
                         Word .5 - byte 1 - bits 2 through 8 get 0's.
                         Word .17 - byte 1 - bits 5 through 8 get 0's.
                         Word .30  get blanks.
                         Word .31  get blanks.
                         Word .32  get blanks.
                         Word .33  get blanks.
                         Word .34  get blanks.
                         Word .35 - bytes 0 through 2  get blanks.
                         Word .112  get blanks.
                         Word .113  get blanks.
                         Word .114  get blanks.
                         Word .115  get blanks.
                         Word .116  get blanks.
                         Word .117  get blanks.
                         Word .120  get blanks.
                         Word .121  get blanks.
                         Word .122  get blanks.
                         Word .124 - bytes 2 through 3  get 0's.
                         Word .225 bits 0,1,5,6,7,8,9,10,11,12,13,15,19,23,24,31 get 0.
                         Word .226 bits 0,1,5,6,7,8,9,10,11,12,13,15,19,23,24,31 get 0.
                         Word .227 bits 0,1,5,6,7,8,9,10,11,12,13,15,19,23,24,31 get 0.
                         Word .230 bits 0,1,5,6,7,8,9,10,11,12,13,15,19,23,24,31 get 0.
                         Word .231 bits 21 thru 35 get 0.
                         Word .232 bits 21 thru 35 get 0.
                         Word .233 bits 21 thru 35 get 0.
                         Word .234 bits 21 thru 35 get 0.
                         Word .237 get 0's.
                         Word .240 get 0's.
                         Word .244 - byte 0 - bits 0 through 4 get 0's.
                         Word .244 - byte 0 - bits 6 through 8 get 0's.
                         Word .244 - bytes 1 through 3 get 0's.
                     Also SETUP_CHRA.TXT from SETUP_CHRA.SIZE to 1023
                     get blanks.
                   BUDGET.ACCUM is recalculated.
                    BUDGET.PMAXC is set to -1 if the current user is
                         not a project.
                    BUDGET.MAX_PROJECTS is set to -1 if the current
                         user is not a project.
                    BANNER_PERM(0) gets '1'B;
                    MTIME's & DTIME's are recalculated
                    In addition to all of the above, this procedure
                    now contains the functionality of the tool
                    called PQ0, which will report which users
                    have a non-zero PRIOB or QUAN value in their
                    :USERS record.  It will then zero those fields.
                    This functionality is needed due to the
                    implementation of star #26924.  See your E00
                    host srb for more info.
 
               In addition, the drec in :HLP is also modified,
                  FEBLK.FLAGS bits 1 through 8 are set to 0.
                  and the PROFILE name will be blank padded on the
                  right.
                 The FEBLK.RESL is also checked for all 0's, in
                 one or more of the specifications, in which case
                 the RNAME for that spec is blanked.  The .RESL is
                 further checked for all zeros and a blank RNAME
                 in which case the .RESL is deleted from the FEBLK.
 
*/
%EJECT;
/********************************************************************/
/*   Include files   include files   include files   include files  */
/********************************************************************/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
%INCLUDE AS_SUPER_C ;
%INCLUDE KL_SUPER_C ;
%INCLUDE XU_MACRO_C ;
%INCLUDE B$JIT;
%INCLUDE B_ERRORS_C ;
%INCLUDE B_MICROPS_C ;
 
 
DCL B$JIT$ PTR SYMREF ;
DCL B$TCB$ PTR SYMREF ;
%B$TCB ;
%B$ALT ;
 
%M$DCB( DCBN=M$SI, NAME=':USERS', ACCT=':SYS' );
%M$DCB( DCBN=M$UI, NAME=':HLP', ACCT=':SYS' );
%M$DCB( DCBN=M$OU, FUN=CREATE, NAME='*USERS' );
%M$DCB( DCBN=M$LO, FUN=CREATE, NAME='*HLP' );
DCL M$DO DCB ;
%F$DCB;
 
%FPT_OPEN( FPTN=SI_OPEN, DCB=M$SI, ACS=DIRECT, ASN=FILE, ORG=KEYED, SHARE=ALL );
%FPT_OPEN( FPTN=UI_OPEN, DCB=M$UI, ACS=DIRECT, ASN=FILE, ORG=KEYED, SHARE=ALL );
%FPT_OPEN( FPTN=OU_OPEN, DCB=M$OU, DISP=NAMED, ASN=FILE, ACS=DIRECT, ORG=KEYED, SHARE=ALL );
%FPT_OPEN( FPTN=LO_OPEN, DCB=M$LO, DISP=NAMED, ASN=FILE, ACS=DIRECT, ORG=KEYED, SHARE=ALL );
 
%FPT_READ( FPTN=READ_USERS, DCB=M$SI, KEYR=YES, KEY=USERS_KEY, BUF=D00_USERS, KEYS=NO );
%FPT_READ( FPTN=READ_HLP, DCB=M$UI, KEYS=YES, KEY=USERS_KEY, BUF=E00_HLP );
%FPT_WRITE( FPTN=WRITE_USERS, DCB=M$OU, ONEWKEY=YES, BUF=E00_USERS, KEY=USERS_KEY );
%FPT_WRITE( FPTN=WRITE_USERS_KEY, DCB=M$OU, ONEWKEY=YES, KEY=USERS_KEY );
%FPT_WRITE( FPTN=DO_WRITE, DCB=M$DO, BUF=DO_BUF, STCLASS=STATIC SYMDEF ) ;
%FPT_WRITE( FPTN=WRITE_HLP, DCB=M$LO, ONEWKEY=YES, BUF=E00_HLP, KEY=USERS_KEY );
%FPT_REW( FPTN=USERS_FILE, DCB=M$SI );
%FPT_CLOSE( FPTN=SI_CLOSE, DCB=M$SI, DISP=SAVE );
%FPT_CLOSE( FPTN=UI_CLOSE, DCB=M$UI, DISP=SAVE );
%FPT_CLOSE( FPTN=OU_CLOSE, DCB=M$OU, DISP=SAVE );
%FPT_CLOSE( FPTN=LO_CLOSE, DCB=M$LO, DISP=SAVE );
%FPT_ERRMSG( BUF=ERR_BUF, CODE=ERR_CODE, OUTDCB1=M$DO, SUBMESS=YES, INCLCODE=NO, STCLASS=STATIC ) ;
%FPT_EXIT( FPTN=STEPCC_2, STEPCC=2, STCLASS=STATIC SYMDEF );
%FPT_INT( UENTRY=BREAK );
 
DCL BREAK ENTRY ASYNC ;
DCL BREAK_FLG BIT(1) STATIC SYMDEF INIT( '0'B );
%FPT_UNFID( LEN=FILE_LEN, TEXTFID=FILE_NAME, DCB=M$SI );
DCL FILE_LEN UBIN STATIC;
DCL FILE_NAME CHAR(80) STATIC INIT(' ');
DCL FILE_NAME$ PTR CONSTANT INIT(ADDR(FILE_NAME));
DCL FILE$NAME CHAR(FILE_LEN) BASED(FILE_NAME$);
 
 
DCL 1 USERS_KEY ALIGNED STATIC ,
      2 COUNT UBIN BYTE UNAL ,
      2 TEXT CHAR(41) UNAL ;
 
 
 
%LIST ;
%SET LISTSUB='1'B ;
%SET LISTEXP='1'B ;
 
                                                           /**/
DCL 1 D00_USERS STATIC,
      2 ACCT CHAR(8) INIT(' ') ,
      2 NAME CHAR(12) INIT(' ') ,
      2 NAT_LANG CHAR(1) INIT(' ') ,            /* Native language */
      2 STEPACCNT BIT(1) UNAL INIT('0'B) ,
      2 BATOK BIT(1) UNAL INIT( '1'B ) ,
      2 BATNUM SBIN HALF UNAL INIT(-1) ,
      2 * BIT(7) UNAL INIT('0'B) ,
      2 BUDGET,
        3 MAXC SBIN INIT(-1) , /* 'MCHARGES' for user */
        3 ACCUM SBIN INIT(0) , /*Charges accumulated by user*/
        3 PMAXC SBIN INIT(-1) , /* Proj. admin. record only;
                                                     'MCHARGES for project */
        3 PROJ_ALLOWED REDEF PMAXC SBIN, /* Default project record only;
                                maximum number of users allowed in this project
                                and all sub-projects. */
        3 PACCUM SBIN INIT(0) , /* Proj. admin. record only;
                                               charges accumulated by project */
        3 PROJ_CREATED REDEF PACCUM SBIN, /* Default project record only;
                                          number of users created in project */
        3 MACCT,
          4 COUNT UBIN(9) UNAL INIT(4) ,
          4 ACCT CHAR(8) UNAL INIT('NONE') ,
          4 NAME CHAR(12) UNAL INIT(' ') ,
        3 MACCT_ REDEF MACCT,
          4 * UBIN BYTE UNAL,
          4 TEXT CHAR(20) UNAL,
        3 BKACC BIT(1) UNAL INIT('1'B) ,
        3 BUDLIM BIT(1) UNAL INIT( '0'B ) ,
        3 PCHARGES BIT(1) UNAL INIT( '1'B ) ,
        3 ICHARGES BIT(1) UNAL INIT( '1'B ) ,
        3 BLINDACCTNG BIT(1) UNAL INIT('0'B),
        3 * BIT(4) INIT('0'B),
        3 MAX_PROJECTS SBIN(18) UNAL INIT(0) ,
                                  /* Proj. admin. record only;
                                     maximum number of sub-projects allowed. */
        3 SUB_PROJS REDEF MAX_PROJECTS SBIN(18) UNAL,
                                  /* Default project record only;
                                     number of sub-projects created. */
      2 BILL(0:3) CHAR(6) UNAL INIT('1','1','1','1') ,
      2 KEY(0:71) BIT(1) UNAL INIT('0'B*0) ,
      2 *      CHAR(23) INIT(' ') ,
      2 OUTPUTPRIO UBIN(9) UNAL INIT(7) ,
                                                      /* Services */
                                                      /*   Batch   = 0 ,
                                                           ghost   = 1 ,
                                                           on-line = 2,
                                                           tp      = 3
                                                                       */
      2 MLO(0:3) UBIN WORD UNAL INIT( 99999, 99999, 99999, 99999 ) ,
      2 DLO(0:3) UBIN WORD UNAL INIT( 1000, 99999, 99999, 99999 ) ,
      2 MDO(0:3) UBIN WORD UNAL INIT( 99999, 99999, 99999, 99999 ) ,
      2 DDO(0:3) UBIN WORD UNAL INIT( 50, 99999, 99999, 99999 ) ,
      2 MPO(0:3) UBIN WORD UNAL INIT( 99999, 99999, 99999, 99999 ) ,
      2 DPO(0:3) UBIN WORD UNAL INIT( 100, 99999, 99999, 99999 ) ,
      2 MPDIS(0:3) UBIN WORD UNAL INIT( 99999, 99999, 99999, 99999 ) ,
      2 DPDIS(0:3) UBIN WORD UNAL INIT( 99999, 99999, 99999, 99999 ) ,
      2 MTDIS(0:3) UBIN WORD UNAL INIT( 99999, 99999, 99999, 99999 ) ,
      2 DTDIS(0:3) UBIN WORD UNAL INIT( 2000, 2000, 9999, 2000 ) ,
      2 MFPOOLS(0:3) UBIN BYTE UNAL INIT( 31, 31, 31, 31 ) ,
      2 DFPOOLS(0:3) UBIN BYTE UNAL INIT( 10, 10, 10, 10 ) ,
      2 MMPRIO(0:3) UBIN BYTE UNAL INIT( 7, 7, 7, 7 ) ,
      2 DMPRIO(0:3) UBIN BYTE UNAL INIT( 7, 7, 7, 7 ) ,
      2 *     CHAR(36)                          /* Peripheral */
          INIT(' '),
      2 HPSN CHAR(6) INIT('SYS') ,
      2 * UBIN(18) UNAL INIT(0) ,
                                                           /*   Command processor   */
      2 CPROC(0:3) ALIGNED,
        3 NAME,
          4 CNT UBIN BYTE UNAL INIT(4*0) ,
          4 TEXT CHAR(31) UNAL INIT('IBEX'*0) ,
                                                 /*   Last command processor   */
      2 LASTCPROC(0:3) ALIGNED,
        3 NAME,
          4 CNT UBIN BYTE UNAL INIT(0*0) ,
          4 TEXT CHAR(31) UNAL INIT(' '*0) ,
                                                      /*   Privileges   */
      2 PRIV (0:3) BIT(36) ALIGNED INIT('0'B*0) ,
      2 PPRIV (0:3) BIT(36) ALIGNED INIT('0'B*0) ,
                                                      /*   Batch   = 0 ,
                                                           ghost   = 1 ,
                                                           on-line = 2,
                                                           tp      = 3
                                                                     */
      2 QUAN(0:3) SBIN HALF UNAL INIT(0*0) ,
      2 *(0:3) UBIN HALF UNAL INIT(0*0) ,
      2 PRIOB(0:3) SBIN BYTE UNAL INIT(0*0) ,
      2 MEXP SBIN INIT(-1) ,                  /* Expiration */
      2 DEXP SBIN INIT(-1) ,                  /* Expiration */
      2 FLAGS ALIGNED,
        3 *  BIT(5) UNAL INIT('0'B) ,
        3 STARSACC BIT(1) UNAL INIT('0'B) ,   /* *S accounting */
        3 * BIT(30) UNAL INIT('0'B) ,
      2 INSTUSE CHAR(16) INIT(' ') ,            /* Installation use */
                                                      /*  Time  */
      2 MTIME(0:3) UBIN WORD UNAL INIT( 59999400, 59999400, 59999400,59999400 ) ,
      2 DTIME(0:3) UBIN WORD UNAL INIT( 60000,59999400,59999400,59999400 ) ,
                                                      /*  Memory  */
      2 MMEM(0:3) UBIN HALF UNAL INIT( 511, 511, 511, 511 ) ,
      2 DMEM(0:3) UBIN HALF UNAL INIT( 64, 256, 128, 256 ) ,
      2 PSDOL(0:7),
        3 PSDO_NAME CHAR(8) UNAL INIT( ' '*0 ) ,
        3 BMAX UBIN HALF UNAL INIT( 0*0 ) ,
        3 GMAX UBIN HALF UNAL INIT( 0*0 ) ,
        3 OMAX UBIN HALF UNAL INIT( 0*0 ) ,
        3 TMAX UBIN HALF UNAL INIT( 0*0 ) ,
      2 TOT_TYPES UBIN HALF UNAL INIT( 2 ) ,    /* Total res. Types */
      2 RESL( 0:7 ) UNAL ,     /* Resources */
        3 RNAME CHAR(2) UNAL INIT( 'MT', 'DP', ' '*0),
        3 BMAX UBIN HALF UNAL INIT( 4, 4, 0*0 ),
        3 GMAX UBIN HALF UNAL INIT( 4, 4, 0*0 ) ,
        3 OMAX UBIN HALF UNAL INIT( 4, 4, 0*0 ) ,
        3 TMAX UBIN HALF UNAL INIT( 4, 4, 0*0 ) ,
      2 SETUP_PERM(0:3) BIT(1) UNAL INIT('0'B*0),
      2 BANNER_PERM (0:9) BIT (1) UNAL INIT ('0'B*0),
      2 PERM_BLOCK REDEF BANNER_PERM BIT (10),
      2 SETUP_FORCE(0:3) BIT(1) UNAL INIT('0'B*0),
            /* This bit marks if the setup can be bypassed with the
               ns option during logon.
            */
                                   /* Setup contains the index into the
                                      pool of text, it is referenced
                                      with the following text structure.
                                      An index of
                                      -1 implies that the setup command
                                      for that mode does not exist.  */
      2 SETUP(0:3) SBIN HALF UNAL INIT(-1*0),
      2 BANNER (0:9) SBIN HALF UNAL INIT (-1*0),
      2 SETUP_CHRA ALIGNED,
        3 SIZE UBIN INIT (0) ,
        3 TXT CHAR (1024) INIT (' ') ,
        3 TXT_CHR (0:1023) REDEF TXT CHAR (1),
        3 TXT_UBIN (0:1023) REDEF TXT UBIN (9) UNAL,
                   /* At the third level- SIZE_ is the total size of
                      the used area in the pool of setup and banner
                      text items. SETUPMAX-SIZE_=free space remaining.
                      Txt is the area containing setup and banner
                      TXT_CHR and TXT_UBIN are ways of accessing the
                      text for those commands.                     */
      2 LAST_LOGON_TIME BIT(36) ALIGNED INIT('0'B) ,
                   /* Uts of last successful logon, from slug. */
      2 CUR_BAD_LOGON_CNT UBIN HALF UNAL INIT(0) ,
        /* Number of failed logon attempts logged since the last
           system exit.                                           */
      2 PREV_BAD_LOGON_CNT UBIN HALF UNAL INIT(0) ;
        /* Saved version of the previous CUR_BAD_LOGON_CNT.       */
                                                           /**/
 
 
%KL_DREC ( NAME=E00_HLP, STCLASS=STATIC, LAST ="," );
%KL_FEBLK (NAME=FEBLK, LVL=2, STCLASS=STATIC, RCNT=31);
 
%KL_DREC ( NAME=E00_HLP_CONST, STCLASS=CONSTANT, LAST =";" );
%KL_FEBLK (NAME=E00_FEBLK_CONST, LVL=1, RCNT=0, STCLASS=CONSTANT );
 
%AS_USERS( STR_NAME=E00_USERS, STCLASS=STATIC );
 
 
 
DCL ERR_CODE BIT(36) STATIC ;
DCL ERR_BUF CHAR(120) STATIC INIT( ' ' );
DCL I UBIN ;
DCL COUNT UBIN STATIC INIT(0) ;
DCL J UBIN ;
DCL TEMP1 CHAR(13) ;
DCL TEMP2 CHAR(13) ;
DCL MOPSTR(0:1) BIT(9) CONSTANT INIT( %MVZB12, %MVC1 );
DCL DO_BUF CHAR(80) STATIC  SYMDEF INIT( ' ' );
DCL LS_FLG BIT(1) STATIC SYMDEF INIT( '0'B ) ;
DCL TABS UBIN STATIC  INIT( 0 );
DCL SI$ PTR;
DCL K UBIN;
DCL L UBIN;
DCL STORESZ UBIN WORD ;
DCL BRK_SETUP CHAR(254);
DCL BRK_SETUP1(0:253) REDEF BRK_SETUP CHAR(1);
DCL MODE_CHAR  (0:3)  CHAR(1) CONSTANT INIT ('B','G','O','T');
DCL VALUE_CHR   CHAR(8) STATIC INIT ('        ');
DCL ABIT            BIT(1) BASED;
DCL ABYTE           UBIN(9) BASED CALIGNED;
DCL AWORD           UBIN    BASED;
DCL ACHAR           CHAR(1) BASED;
DCL AWORD_OF_CHARS  CHAR(4) BASED;
DCL DOLLARS         SBIN;
DCL PTR$            PTR;
DCL PENNIES         SBIN;
DCL 1 PROFILE,
      2 CNT         UBIN BYTE UNAL,
      2 TXT         CHAR(11) CALIGNED;
DCL TEMP_CNT        SBIN;
DCL UVAL            SBIN;
DCL ZERO_BYTE       UBIN BYTE CONSTANT INIT (0) CALIGNED;
DCL ZERO_WORD       UBIN      CONSTANT INIT (0);
 
 
 
 
/*
                              Set break control.
*/
      CALL M$INT( FPT_INT ) ;
/*
                              Open files
*/
      CALL M$OPEN( SI_OPEN ) ALTRET( IO_ERROR ) ;
      CALL M$OPEN( OU_OPEN ) ALTRET( IO_ERROR ) ;
      SI$ = DCBADDR(DCBNUM(M$SI));
      CALL M$UNFID( FPT_UNFID ) ALTRET( IO_ERROR ) ;
      IF SI$->F$DCB.ASN# ~= %FILE# OR SI$->F$DCB.ORG# ~= %KEYED# THEN GOTO NOT_USERS;
      CALL M$READ( READ_USERS ) ALTRET( NOT_USERS );
      CALL M$REW( USERS_FILE ) ALTRET(IO_ERROR);
      CALL M$OPEN( UI_OPEN ) ALTRET( IO_ERROR ) ;
      CALL M$OPEN( LO_OPEN ) ALTRET( IO_ERROR ) ;
      DO_BUF='..Converting D00 :USERS and :HLP records to E00 :USERS and :HLP records.';
      CALL M$WRITE( DO_WRITE ) ALTRET( IO_ERROR );
      CALL CONVERT_D00_TO_E00;
 
      RETURN;
 
 
NOT_USERS: CALL CONCAT(DO_BUF,'  ',FILE$NAME,' is not a D00 :USERS file.');
      CALL M$WRITE( DO_WRITE ) ALTRET(IO_ERROR);
      RETURN;
IO_ERROR:
      ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR ;
      FPT_ERRMSG.V.DCB# = B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB# ;
      CALL M$ERRMSG( FPT_ERRMSG ) ALTRET( ABORT );
ABORT:
      CALL M$EXIT( STEPCC_2 ) ;
 
%EJECT;
LIST: PROC ;
 
DCL I UBIN ;
DCL J UBIN ;
DCL TEMP CHAR(21) ;
DCL SIZE UBIN ;
 
 
      IF USERS_KEY.COUNT < 9
      THEN DO;
          TEMP = SUBSTR( USERS_KEY.TEXT, 0, USERS_KEY.COUNT ) ;
          SIZE = USERS_KEY.COUNT ;
          END ;
      ELSE DO ;
          CALL INDEX1( I, ' ', SUBSTR( USERS_KEY.TEXT, 0, 8 ) );
          CALL CONCAT( TEMP, SUBSTR(USERS_KEY.TEXT,0,I), ',',
                  SUBSTR(USERS_KEY.TEXT,8,USERS_KEY.COUNT-8) );
          SIZE = USERS_KEY.COUNT + I - 7 ;
          END ;
 
      IF TABS*22 + SIZE > 80 THEN CALL FLUSH ;
 
      CALL INSERT( DO_BUF, TABS*22, , TEMP );
      TABS = TABS + 1 ;
 
END LIST ;
%EJECT ;
FLUSH: PROC ;
 
 
 
      IF TABS > 0
      THEN DO ;
          CALL M$WRITE( DO_WRITE ) ;
          DO_BUF = ' ' ;
          TABS = 0 ;
          END ;
 
END FLUSH ;
 
%EJECT;
CONVERT_D00_TO_E00: PROC;
 
 
      DO WHILE( '1'B );
/*
                              Read D00 user records
*/
READ_USER_REC:
          CALL M$READ( READ_USERS ) ALTRET( USERS_READ_ERR );
          IF USERS_KEY.COUNT > 21 AND SI$->F$DCB.ARS# = 0 THEN DO;
              CALL M$WRITE( WRITE_USERS_KEY ) ALTRET(IO_ERROR);
              GOTO READ_USER_REC;
              END;
          IF SI$->F$DCB.ARS# ~= SIZEC(D00_USERS) THEN DO;
              CALL CONCAT( DO_BUF, '**** ', FILE$NAME, ' is not a B03 :USERS file.' );
              CALL CONCAT( DO_BUF, '**** ', FILE$NAME, ' is not a D00 :USERS file.' );
              CALL M$EXIT( STEPCC_2 );
              END;
          CALL M$READ ( READ_HLP ) ALTRET ( SKIP );
/*
                              Build E00 user records
*/
          DO I = 0 TO 3;
              IF D00_USERS.PRIOB(I) ~= 0 THEN DO;
                  CALL BINXCHAR(VALUE_CHR,D00_USERS.PRIOB(I));
                  CALL CONCAT (DO_BUF, '''',SUBSTR(USERS_KEY.TEXT,0,USERS_KEY.COUNT),''' has a PRIOB(',MODE_CHAR(I),') of ',VALUE_CHR);
                  CALL M$WRITE (DO_WRITE) ALTRET (IO_ERROR);
                  END; /*  PRIOB ~= 0  */
 
              IF D00_USERS.QUAN(I) ~= 0 THEN DO;
                  CALL BINXCHAR(VALUE_CHR,D00_USERS.QUAN(I));
                  CALL CONCAT (DO_BUF, '''',SUBSTR(USERS_KEY.TEXT,0,USERS_KEY.COUNT),''' has a QUAN(',MODE_CHAR(I),') of ',VALUE_CHR);
                  CALL M$WRITE (DO_WRITE) ALTRET (IO_ERROR);
                  END; /*  QUAN ~= 0  */
              END;  /*  DO I  */
          DO I = 0 TO 3;
              E00_USERS.BILL(I) = D00_USERS.BILL(I);
              E00_USERS.MLO(I) = D00_USERS.MLO(I);
              E00_USERS.DLO(I) = D00_USERS.DLO(I);
              E00_USERS.MDO(I) = D00_USERS.MDO(I);
              E00_USERS.DDO(I) = D00_USERS.DDO(I);
              E00_USERS.MPO(I) = D00_USERS.MPO(I);
              E00_USERS.DPO(I) = D00_USERS.DPO(I);
              E00_USERS.MPDIS(I) = D00_USERS.MPDIS(I);
              E00_USERS.DPDIS(I) = D00_USERS.DPDIS(I);
              E00_USERS.MTDIS(I) = D00_USERS.MTDIS(I);
              E00_USERS.DTDIS(I) = D00_USERS.DTDIS(I);
              E00_USERS.MFPOOLS(I) = D00_USERS.MFPOOLS(I);
              E00_USERS.DFPOOLS(I) = D00_USERS.DFPOOLS(I);
              E00_USERS.MMPRIO(I) = D00_USERS.MMPRIO(I);
              E00_USERS.DMPRIO(I) = D00_USERS.DMPRIO(I);
              E00_USERS.CPROC(I) = D00_USERS.CPROC(I);
              E00_USERS.LASTCPROC(I) = D00_USERS.LASTCPROC(I);
              E00_USERS.PRIV (I) = D00_USERS.PRIV(I);
              E00_USERS.PPRIV (I) = D00_USERS.PPRIV(I);
              E00_USERS.QUAN(I) = D00_USERS.QUAN(I);
              E00_USERS.PRIOB(I) = D00_USERS.PRIOB(I);
              E00_USERS.MTIME(I) = D00_USERS.MTIME(I) / 6000 * 6000;
              E00_USERS.DTIME(I) = D00_USERS.DTIME(I) / 6000 * 6000;
              E00_USERS.MMEM(I) = D00_USERS.MMEM(I);
              E00_USERS.DMEM(I) = D00_USERS.DMEM(I);
              E00_USERS.SETUP_PERM(I) = D00_USERS.SETUP_PERM(I);
              E00_USERS.SETUP_FORCE(I) = D00_USERS.SETUP_FORCE(I);
              E00_USERS.SETUP(I) = D00_USERS.SETUP(I);
              E00_USERS.LOGINS.LAST_LOGON_TIME (I) = 0;
              E00_USERS.LOGINS.BAD_LOGON_CNT (I) = 0;
              E00_USERS.MAXENQ(I) = 0;
              END;
          E00_USERS.ACCT = D00_USERS.ACCT;
          E00_USERS.NAME = D00_USERS.NAME;
          E00_USERS.NAT_LANG = D00_USERS.NAT_LANG;
          E00_USERS.STEPACCNT = D00_USERS.STEPACCNT;
          E00_USERS.BATOK = D00_USERS.BATOK;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, 5);
          PTR$ = PINCRC (PTR$, 1);
          PTR$ = PINCRB (PTR$, 2);
          DO I = 2 TO 8;
              PTR$ -> ABIT = %NO#;
              PTR$ = PINCRB (PTR$, 1);
              END;
          E00_USERS.BATNUM = D00_USERS.BATNUM;
          E00_USERS.BUDGET.MAXC = D00_USERS.BUDGET.MAXC;
/* E00_USERS.BUDGET.ACCUM = D00_USERS.BUDGET.ACCUM;*/
          UVAL = D00_USERS.BUDGET.ACCUM;
          UVAL = UVAL/100;      /* in pennies              */
          DOLLARS = UVAL/100;   /* Dollar amount           */
          PENNIES = UVAL - DOLLARS*100;
          IF PENNIES < 0 THEN
              PENNIES = PENNIES*-1;
          E00_USERS.BUDGET.ACCUM = DOLLARS * 10000 + PENNIES * 100 ;
          E00_USERS.BUDGET.PMAXC = D00_USERS.BUDGET.PMAXC;
          E00_USERS.BUDGET.PACCUM = D00_USERS.BUDGET.PACCUM;
          E00_USERS.BUDGET.MACCT = D00_USERS.BUDGET.MACCT;
          E00_USERS.BUDGET.BKACC = D00_USERS.BUDGET.BKACC;
          E00_USERS.BUDGET.BUDLIM = D00_USERS.BUDGET.BUDLIM;
          E00_USERS.BUDGET.PCHARGES = D00_USERS.BUDGET.PCHARGES;
          E00_USERS.BUDGET.ICHARGES = D00_USERS.BUDGET.ICHARGES;
          E00_USERS.BUDGET.BLINDACCTNG = D00_USERS.BUDGET.BLINDACCTNG;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('017'O));
          PTR$ = PINCRC (PTR$, 1);
          PTR$ = PINCRB (PTR$, 5);
          DO I = 5 TO 8;
              PTR$ -> ABIT = %NO#;
              PTR$ = PINCRB (PTR$, 1);
              END;
          E00_USERS.BUDGET.MAX_PROJECTS = D00_USERS.BUDGET.MAX_PROJECTS;
          IF NOT (D00_USERS.PPRIV(1) & '000010000000'O) THEN DO;
              IF USERS_KEY.COUNT < 21 THEN DO;
                  E00_USERS.BUDGET.PMAXC = -1 ;
                  E00_USERS.BUDGET.MAX_PROJECTS = 0 ;
                  END;
              END;
          DO I = 0 TO 71;
              E00_USERS.KEY(I) = D00_USERS.KEY(I);
              END;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('030'O));
          DO I = 30 TO 34;
              PTR$ -> AWORD_OF_CHARS = '    ';
              PTR$ = PINCRW (PTR$, 1);
              END;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('035'O));
          DO I = 0 TO 2;
              PTR$ -> ACHAR = ' ';
              PTR$ = PINCRC (PTR$, 1);
              END;
          E00_USERS.OUTPUTPRIO = D00_USERS.OUTPUTPRIO;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('112'O));
          DO I = 74 TO 82;
              PTR$ -> AWORD_OF_CHARS = '    ';
              PTR$ = PINCRW (PTR$, 1);
              END;
          E00_USERS.HPSN = D00_USERS.HPSN;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('124'O));
          PTR$ = PINCRC (PTR$, 2);
          DO I = 2 TO 3;
              PTR$ -> ABYTE = ZERO_BYTE;
              PTR$ = PINCRC (PTR$, 1);
              END;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('225'O));
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 2);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 7);
          PTR$ -> ABIT = %NO#;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('226'O));
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 2);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 7);
          PTR$ -> ABIT = %NO#;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('227'O));
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 2);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 7);
          PTR$ -> ABIT = %NO#;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('230'O));
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 2);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 4);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 1);
          PTR$ -> ABIT = %NO#;
          PTR$ = PINCRB (PTR$, 7);
          PTR$ -> ABIT = %NO#;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('231'O));
          PTR$ = PINCRB (PTR$, 21);
          DO I = 21 TO 35;
              PTR$ -> ABIT = %NO#;
              PTR$ = PINCRB (PTR$, 1);
              END;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('232'O));
          PTR$ = PINCRB (PTR$, 21);
          DO I = 21 TO 35;
              PTR$ -> ABIT = %NO#;
              PTR$ = PINCRB (PTR$, 1);
              END;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('233'O));
          PTR$ = PINCRB (PTR$, 21);
          DO I = 21 TO 35;
              PTR$ -> ABIT = %NO#;
              PTR$ = PINCRB (PTR$, 1);
              END;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('234'O));
          PTR$ = PINCRB (PTR$, 21);
          DO I = 21 TO 35;
              PTR$ -> ABIT = %NO#;
              PTR$ = PINCRB (PTR$, 1);
              END;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('237'O));
          PTR$ -> AWORD = ZERO_WORD;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('240'O));
          PTR$ -> AWORD = ZERO_WORD;
          E00_USERS.MEXP = D00_USERS.MEXP;
          E00_USERS.DEXP = D00_USERS.DEXP;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('244'O));
          DO I = 0 TO 4;
              PTR$ -> ABIT = %NO#;
              PTR$ = PINCRB (PTR$, 1);
              END;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('244'O));
          PTR$ = PINCRB (PTR$, 6);
          DO I = 6 TO 8;
              PTR$ -> ABIT = %NO#;
              PTR$ = PINCRB (PTR$, 1);
              END;
          PTR$ = ADDR (E00_USERS);
          PTR$ = PINCRW (PTR$, %BITBIN('244'O));
          PTR$ = PINCRC (PTR$, 1);
          DO I = 1 TO 3;
              PTR$ -> ABYTE = ZERO_BYTE;
              PTR$ = PINCRC (PTR$, 1);
              END;
          E00_USERS.FLAGS.STARSACC = D00_USERS.FLAGS.STARSACC;
          E00_USERS.INSTUSE = D00_USERS.INSTUSE;
          DO I = 0 TO 7;
              E00_USERS.PSDOL(I) = D00_USERS.PSDOL(I);
              E00_USERS.RESL(I) = D00_USERS.RESL(I);
              END;
          E00_USERS.TOT_TYPES = D00_USERS.TOT_TYPES;
          E00_USERS.BANNER_PERM (0) = '1'B;
          DO I = 1 TO 9;
              E00_USERS.BANNER_PERM (I) = D00_USERS.BANNER_PERM(I);
              END;
          DO I = 0 TO 9;
              E00_USERS.BANNER (I) = D00_USERS.BANNER(I);
              END;
          E00_USERS.SETUP_CHRA = D00_USERS.SETUP_CHRA;
          PTR$ = ADDR(E00_USERS.SETUP_CHRA.TXT_CHR);
          PTR$ = PINCRC (PTR$, E00_USERS.SETUP_CHRA.SIZE);
          DO I = E00_USERS.SETUP_CHRA.SIZE TO 1023;
              PTR$ -> ACHAR = ' ';
              PTR$ = PINCRC (PTR$, 1);
              END;
          E00_USERS.LAST_LOGON_TIME = D00_USERS.LAST_LOGON_TIME;
          E00_USERS.BAD_LOGON_CNT = 0;
          E00_USERS.PASSWORD_CHANGE_TIME = 0;
          E00_USERS.RFUH1 = 0;
          E00_USERS.RFUW1 = 0;
          E00_USERS.RFUW2 = 0;
          E00_USERS.RFUW3 = 0;
          E00_USERS.RFUW4 = 0;
          E00_USERS.RFUW5 = 0;
          DO I = 0 TO 7;
              IF ((E00_USERS.RESL.BMAX (I) = 0) AND
                      (E00_USERS.RESL.GMAX (I) = 0) AND
                      (E00_USERS.RESL.OMAX (I) = 0) AND
                      (E00_USERS.RESL.TMAX (I) = 0) AND
                      (E00_USERS.RESL.RNAME(I) ~= '  '))
              THEN DO;
                  E00_USERS.RESL.RNAME (I) = ' ';
                  E00_USERS.TOT_TYPES = E00_USERS.TOT_TYPES -1;
SWAPONE:          DO J = 7 DOWNTO (I + 1);
                      IF (E00_USERS.RESL.RNAME(J) ~= '  ')
                      THEN DO;
                          E00_USERS.RESL.RNAME(I) = E00_USERS.RESL.RNAME(J);
                          E00_USERS.RESL.RNAME(J) = ' ';
                          E00_USERS.RESL.TMAX(I) = E00_USERS.RESL.TMAX(J);
                          E00_USERS.RESL.GMAX(I) = E00_USERS.RESL.GMAX(J);
                          E00_USERS.RESL.BMAX(I) = E00_USERS.RESL.BMAX(J);
                          E00_USERS.RESL.OMAX(I) = E00_USERS.RESL.OMAX(J);
                          EXIT SWAPONE;
                          END;  /*  RNAME NOT BLANK  */
                      END;  /*  DO 7 DOWNTO (I+1)  */
                  END;  /*  RNAME NOT BLANK BUT VALUES ALL 0  */
              END;  /*  DO 0 TO 7  */
/*
              Set the E00 :HLPs record for users
*/
          PTR$ = ADDR (E00_HLP.FEBLK.FLAGS.STEPACCT);
          PTR$ = PINCRB (PTR$, 1);
          DO I = 1 TO 8;
              PTR$ -> ABIT = %NO#;
              PTR$ = PINCRB (PTR$, 1);
              END; /*  DO I  */
          PROFILE.TXT = ' ';
          PROFILE.CNT = E00_HLP.PNAME.CNT;
          PROFILE.TXT = SUBSTR (E00_HLP.PNAME.TXT,0,E00_HLP.PNAME.CNT);
          E00_HLP.PNAME.TXT = ' ';
          SUBSTR (E00_HLP.PNAME.TXT,0,E00_HLP.PNAME.CNT) = PROFILE.TXT;
/*
    GET RID OF EXCESS RESL'S
    IE. IF THE END ONES ARE BLANKS AND ZEROS DON'T OUTPUT THEM
*/
          TEMP_CNT = E00_HLP.FEBLK.RESL_CNT ;
          DO I = 0 TO TEMP_CNT - 1;
              IF ((E00_HLP.FEBLK.RESL.UMAX (I) = 0) AND
                      (E00_HLP.FEBLK.RESL.CMAX (I) = 0) AND
                      (E00_HLP.FEBLK.RESL.HMAX (I) = 0) AND
                      (E00_HLP.FEBLK.RESL.GMAX (I) = 0))
              THEN DO;
                  E00_HLP.FEBLK.RESL.RNAME (I) = ' ';
                  E00_HLP.FEBLK.RESL_CNT = E00_HLP.FEBLK.RESL_CNT -1;
SWAPTWO:          DO J = TEMP_CNT DOWNTO (I + 1);
                      IF (E00_HLP.FEBLK.RESL.RNAME(J) ~= '  ')
                      THEN DO;
                          E00_HLP.FEBLK.RESL.RNAME(I) = E00_HLP.FEBLK.RESL.RNAME(J);
                          E00_HLP.FEBLK.RESL.RNAME(J) = ' ';
                          E00_HLP.FEBLK.RESL.GMAX(I) = E00_HLP.FEBLK.RESL.GMAX(J);
                          E00_HLP.FEBLK.RESL.CMAX(I) = E00_HLP.FEBLK.RESL.CMAX(J);
                          E00_HLP.FEBLK.RESL.UMAX(I) = E00_HLP.FEBLK.RESL.UMAX(J);
                          E00_HLP.FEBLK.RESL.HMAX(I) = E00_HLP.FEBLK.RESL.HMAX(J);
                          EXIT SWAPTWO;
                          END;  /*  RNAME NOT BLANK  */
                      END;  /*  DO TEMP_CNT DOWNTO (I+1)  */
                  END;  /*  RNAME NOT BLANK BUT VALUES ALL 0  */
              END;  /*  DO 0 TO TEMP_CNT - 1  */
          E00_HLP.NWINFO = SIZEW(E00_FEBLK_CONST) ;
          IF E00_HLP.FEBLK.RESL_CNT > 1 THEN
              E00_HLP.NWINFO = E00_HLP.NWINFO + ((SIZEC (E00_FEBLK_CONST.RESL) * E00_HLP.FEBLK.RESL_CNT ) + 3) / 4;
 
/*
                  Write the E00 :HLPs and :USERs record
*/
          CALL M$WRITE( WRITE_USERS )  ALTRET ( IO_ERROR );
          STORESZ = SIZEC(E00_HLP_CONST) + (E00_HLP.NWINFO * 4) ;
          WRITE_HLP.BUF_.BOUND = STORESZ - 1 ;
          CALL M$WRITE( WRITE_HLP )  ALTRET ( IO_ERROR );
          CALL LIST ;
          IF BREAK_FLG
          THEN DO;
              CALL FLUSH ;
              BREAK_FLG = '0'B ;
              END ;
          COUNT = COUNT + 1 ;
SKIP:     ;
          END;     /* DO FOREVER */
 
USERS_READ_ERR:
      IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.ERR# = %E$EOF
      THEN DO;
                                                  /* Close files */
          CALL M$CLOSE( SI_CLOSE ) ;
          CALL M$CLOSE( OU_CLOSE ) ;
          CALL M$CLOSE( UI_CLOSE ) ;
          CALL M$CLOSE( LO_CLOSE ) ;
          CALL FLUSH ;
          CALL BINCHAR( TEMP1, COUNT );
          CALL EDITCHAR( TEMP2, 0, 13, MOPSTR, TEMP1 );
          CALL INDEX1R( I, ' ', TEMP2 );
          CALL CONCAT( DO_BUF, '.. ', SUBSTR(TEMP2,I), ' user records converted.' ) ;
          CALL M$WRITE( DO_WRITE ) ;
          RETURN;
          END ;
      IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.ERR# = %E$LD THEN DO;
          CALL CONCAT( DO_BUF, '**** ', FILE$NAME, ' is not a D00 :USERS file.' );
          CALL M$WRITE( DO_WRITE ) ALTRET( IO_ERROR );
          CALL M$EXIT( STEPCC_2 );
          END;
 
IO_ERROR:
      ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR ;
      FPT_ERRMSG.V.DCB# = B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB# ;
      CALL M$ERRMSG( FPT_ERRMSG ) ALTRET( ABORT );
ABORT:
      CALL M$EXIT( STEPCC_2 ) ;
 
 
END CONVERT_D00_TO_E00;
 
 
END CONVERT_USERS ;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
BREAK: PROC ASYNC ;
 
%INCLUDE CP_6 ;
 
%FPT_TRMPRG( RSTBRK=YES ) ;
 
DCL BREAK_FLG BIT(1) SYMREF ;
 
      DO INHIBIT ;
          BREAK_FLG = '1'B ;
          CALL M$TRMPRG( FPT_TRMPRG ) ;
          RETURN ;
          END ;
 
END BREAK ;
