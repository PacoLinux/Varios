/*M* MIDGET_SIc2 (mdg:c) -- Lower level drivers for different modes */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*P*    NAME:     MIDGET_SIc2
        PURPOSE:  This file contains all the lower level drivers for
                  all the different operating modes of MIDGET, the guts
                  will be in other files (ie. utility functions, etc.)
        DESCRIPTION:
            There are several operating modes to MIDGET, all of which
            have their own driver to get things done.  These are the
            functions that follow:
               1)  STD file mode driver    -    md2_DoStdFileMode ()
               2)  Wildcard mode driver    -    md2_DoWildcardMode ()
               3)  Make file mode driver   -    md2_DoMakeFileMode ()
               4)  Make file mode driver   -    md2_DoMakeStdMode ()
            There is also a function that puts the comment header into
            the output file.
               6)                          -    md2_DoCommentHeader ()
*/
/********************************************************************/
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
 
#define  __SG_MACROS__
#include <SEAGULL.h>
 
#include "MIDGET1:h"
 
 
#pragma LIST EJECT
/********************************************************************/
/*F*  NAME:    md2_OpenFiles ()
      PURPOSE: Open input & output files given on command line.
      INPUT:
         ifp   -  ptr to input file
         ofp   -  ptr to output file
      OUTPUT:
         none  -  if successful return, else exit(7).
*/
/********************************************************************/
 
void
md2_OpenFiles( FILE **ifp, char *in_mode, FILE **ofp, char *out_mode)
{
   char  mode[ 12];
   char  default_in[] = "r sharein";
 
#ifdef DEBUG
   char   ME[] = "md2_OpenFiles";
#else
   char  *ME = NULL;
#endif
   if (ifp)  {
      if (!in_mode)
         in_mode = default_in;
      /* open the given input file */
#ifdef DEBUG
      if (md_debug > 1)  {
      debug_s( "``` Opening the INPUT file: ", md_info.in_fid.pathname);
      }  /*end if debug*/
#endif
      *ifp = fopen( md_info.in_fid.pathname, in_mode);
      if (*ifp == NULL)  {
         Error ( ME, "%s %s %s\n", "STD file: ", md_info.in_fid.pathname,
               " DNE or something.");
         exit( 7);
      }
      md_info.in_fid.fp = *ifp;   /* open successful */
   }  /*if ifp */
 
   if (ofp)  {
      /* open the given output file */
#ifdef DEBUG
      if (md_debug > 1)  {
      debug_s( "``` Opening the OUTPUT file: ", md_info.out_fid.pathname);
      }  /*end if debug*/
#endif
      if (!out_mode)  {
         if (md_info.opt.append_to_outfid)
            strcpy( mode, "a\0");
         else
            strcpy( mode, "w\0");
         out_mode = mode;
      }
      *ofp = fopen( md_info.out_fid.pathname, out_mode);
      if (*ofp == NULL)  {
         if (*out_mode == 'r')
            return;
         Error ( ME, "%s %s %s\n", "OUTPUT file: ", md_info.out_fid.pathname,
               " could not be opened or created.");
         exit( 7);
      }
      md_info.out_fid.fp = *ofp;    /* open successful */
   }  /*if ofp*/
 
}  /* md2_OpenFiles() */
 
 
#pragma LIST EJECT
/********************************************************************/
/*F*  NAME:    md2_DoStdFileMode ()
      PURPOSE: lower level Driver function for STD FILE operating mode
      INPUT:   all input data is setup in the global structure,  md_info
      OUTPUT:  if successful, the MIDGET output file is generated
*/
 
void
md2_DoStdFileMode()
{
   FILE *ifp;     /* Input STD file ptr */
   FILE *ofp;     /* Output file ptr */
   char srch_char;
   FILE *sfp;     /* Source file ptr */
   char file_name[32];
   char formatted_name[32];
   char *pos_o_filename;
   char *pos_o_include;
   char *local_h;
 
#ifdef DEBUG
   char   ME[] = "md2_DoStdFileMode";
#else
   char  *ME = NULL;
#endif
 
   md2_OpenFiles( &ifp, 0, &ofp, 0);
   md2_DoCommentHeader( ofp);
   /* determine our context - set environment appropreiately */
   if (md_info.opt.cc)  {
      srch_char = '#';
   }
   else if (md_info.opt.pl6)  {
      srch_char = '%';
   }
   else if (md_info.opt.fortran)  {
      srch_char = 'I';  /* search more records, but it can't be
                           avoided with Fortran */
   }
   /* do some initialization here... */
   md_out_buf[0] = '\0';
 
   while ( fgets( file_name, PathNameLen, ifp) )  {  /* get Source file */
      StripNewline ( file_name);
#ifdef DEBUG
   if (md_debug > 1)  {
   debug_s( "``` Opening the SOURCE file: ", file_name);
   }  /*end if debug*/
#endif
 
/*N* Use the new SEAGULL.X XUU service interface here...
 *** (eg. for open, reading, and close)
 ***/
      sfp = fopen( file_name, "r sharein");  /* open Source file */
                            /* shared, one updater/multiple readers */
      if (sfp == NULL)  {
         Error ( ME, "%s %s %s\n", "Source file: ", file_name,
               " could not be opened!");
         strcat( formatted_name, md3_ConvertSourceName( file_name) );
         fprintf( ofp, "#??? %s  SOURCE FILE COULD NOT BE OPENED!!\n", file_name);
         fprintf( ofp, "#??? %s  No Dependencies Generated\n\n", formatted_name);
      }
      else  {
         /* our Source is  open now, let's proceed */
         md_info.source_file = file_name;
         strcpy( formatted_name, md3_ConvertSourceName( file_name));
         md3_PutSourceFileName( ofp, formatted_name, md_out_buf);
 
         /* NOW we have to search the file for dependencies */
 
         while ( fgets( md_input_buf, IN_REC_LEN, sfp) )  {  /* !EOF Source */
 
            /* look for #, %  in string (i.e. the search char) */
            if (pos_o_include = strchr( md_input_buf, srch_char) )  {
               if (pos_o_filename = md3_CheckForReal( pos_o_include))  {
                  if (local_h = md3_ConvertIncludeName(pos_o_filename,
                                                     file_name) )  {
                     strcpy( formatted_name, local_h);
                     md3_PutIncludeName( ofp, formatted_name, md_out_buf);
                  }  /*end if local_h*/
               }  /*end if pos_o_filename*/
               else  ;   /* ignore this record, it ain't for real! */
            }  /*end if pos_o_include*/
 
         }  /*end while not EOF source*/
#ifdef DEBUG
   if (md_debug > 1)  {
       debug_s( "~~~ Closing the SOURCE file: ", file_name);
   }  /*end if debug*/
#endif
         fclose( sfp);
      }  /*end else sfp != NULL*/
   }  /*end while not EOF STD (ifp)*/
 
   /* flush the last record out of the buffer here ..*/
   md3_PutFlushStuff( ofp, md_out_buf);
 
#ifdef DEBUG
   if (md_debug > 1)  {
   debug_s( "~~~ Closing the INPUT file: ", md_info.in_fid.pathname);
   debug_s( "~~~ Closing the OUTPUT file: ", md_info.out_fid.pathname);
   }  /*end if debug*/
#endif
   fclose( ofp);
   fclose( ifp);
return;
}  /*end md2_DoStdFileMode ()*/
 
 
#pragma LIST EJECT
/*------------------------------------------------------------------*/
/*F*  NAME:    md2_DoWildcardMode ()
      PURPOSE: lower level Driver function for WILDCARD operating mode
      INPUT:   all input data is setup in the global structure,  md_info
      OUTPUT:  if successful, the MIDGET output file is generated
*/
 
void
md2_DoWildcardMode()
{
   FILE *ifp;
   char fid[PathNameLen];
   static char std_name[PathNameLen];
   char *wildstr;
   char *tmp;
   int fidcnt;
 
#ifdef DEBUG
   char  ME[] = "md2_DoWildcardMode";
#else
   char *ME = NULL;
#endif
 
   wildstr = md_info.wildcard_str;
   fidcnt = 0;
   if (tmp = fwildfid( wildstr, fidcnt++, '?') )  {
      strcpy( &(fid[0]), tmp);
      /* we have at least one fid that matches here, so we best open
         up a STD file to stuff it into, eh.
      */
      if (md_info.in_fid.pathname)  {   /* -s given with -w, grab it */
         strcpy( std_name, md_info.in_fid.pathname);
      }
      else  {  /* use the default STD file name */
         strcpy( std_name, "*std-");
         strcpy( &(std_name[5]), GetTime () );
         md_info.in_fid.pathname = std_name;
      }
#ifdef DEBUG
   if (md_debug > 1)  {
   debug_s( "``` Opening the STD file: ", std_name);
   }  /*end if debug*/
#endif
      ifp = fopen( std_name, "w");   /* ??? was "a" */
      if (ifp == NULL)  {
         Error ( ME, "%s %s\n","Could not open file: ", std_name);
         exit( 7);
      }
      md_info.in_fid.fp = ifp;
      fprintf( ifp, "%s\n", fid);     /* put 1st fid out to STD file */
 
      /* now go see if we have any more matches to "wildstr" */
      while (tmp = fwildfid( wildstr, fidcnt++, '?') )  {
         strcpy( &(fid[0]), tmp);
         fprintf( ifp, "%s\n", fid);   /* put Nth fid out to STD */
      }  /*end while tmp*/
#ifdef DEBUG
   if (md_debug > 1)  {
   debug_s( "~~~ Closing the STD file: ", std_name);
   }  /*end if debug*/
#endif
      fclose( ifp);  /* close up STD file, and go to work elsewhere */
      md2_DoStdFileMode( );
   }  /*if tmp*/
   else  {
   /* if we get here... we didn't find any fid's that match "wildstr"
      so we had better blow off, eh.
   */
      Error ( ME, "%s %s \n",
         "NO fids found that match the wildcard string: ", wildstr);
      exit( 3);
   }  /*end else*/
return;
}  /*end md2_DoWildcardMode ()*/
 
 
#pragma LIST EJECT
/*------------------------------------------------------------------*/
/*F*  NAME:    md2_DoCommentHeader (FILE *ofp)
      PURPOSE: function to generate a header of md_informative comments in the
               output file (comments generated in CP-6 MAKE fashion).
      INPUT:   ofp   is a pointer to the output file to write to
      OUTPUT:  if successful, the comments are written out to the file
*/
 
void
md2_DoCommentHeader( FILE *ofp)
{
   char blanks[81] = "#                                       "
                     "                                       #\0";
   char dashes[81] = "#---------------------------------------"
                     "---------------------------------------#\0";
   char using[81]  = "#                                       "
                     "                                       #\0";
 
#ifdef DEBUG
   char  ME[] = "md2_DoCommentHeader";
#else
   char *ME = NULL;
#endif
 
   if (ofp == NULL)  {
     /* try to open up the output file, to get us going */
#ifdef DEBUG
   if (md_debug > 1)  {
   debug_s( "``` Opening the OUTPUT file: ", md_info.out_fid.pathname);
   }  /*end if debug*/
#endif
     ofp = fopen( md_info.out_fid.pathname, "a");
     if (ofp == NULL)  {
        Error ( ME, "%s %s %s \n",  "OUTPUT file: ",
           md_info.out_fid.pathname, " could not be opened or created!!");
           exit( 7);
     }
     md_info.out_fid.fp = ofp;   /* open successful */
   }
   /* we all ready have the output file open if here ... */
 
   /* now we can write out the comments to the file, let's roll... */
   if (md_info.opt.header)  {
      fprintf( ofp, "#*M*   %s -- MAKE dependency include file  #\n",
               md_info.out_fid.pathname);   /* ??? just name some day */
      fprintf( ofp, "%s\n", dashes);
      fprintf( ofp, "%s\n", blanks);
   }
   fprintf( ofp, "#   Generated by %s %s @ %s                         #\n",
            TOOLNAME, VERSION, GetTimeAndDate ( )  );
   if (md_info.opt.header)  {
      fprintf( ofp, "%s\n", blanks);
      if (md_info.opt.verbose > 1)  {     /* put more comments in now */
         if (md_info.opt.std_file)  {
            memcpy( using+7, "Using STD file: ", 16);
            memcpy( using+23, md_info.in_fid.pathname,
                    strlen( md_info.in_fid.pathname)  );
         }
         if (md_info.opt.wildcard)  {
            memcpy( using+7, "Using WILDCARD : ", 17);
            memcpy( using+24, md_info.wildcard_str,
                    strlen( md_info.wildcard_str) );
         }
         if (md_info.opt.make_std)  {
            memcpy( using+7, "Using MAKE Standard file: ", 26);
            memcpy( using+33, md_info.in_fid.pathname,
                    strlen( md_info.in_fid.pathname)  );
         }
         fprintf( ofp, "%s\n", using);
         fprintf( ofp, "%s\n", blanks);
      }  /*end verbose*/
      fprintf( ofp, "%s\n", dashes);
   }  /*end if header*/
   fprintf( ofp, "# \n\n");
 
return;
}  /*end md2_DoCommentHeader ()*/
 
 
#pragma LIST EJECT
/*------------------------------------------------------------------*/
/*F*  NAME:    md2_DoMakeStdMode ()
      PURPOSE: lower level Driver function for MAKE STD operating mode
      INPUT:   all input data is setup in the global structure,  md_info
      OUTPUT:  if successful, the MIDGET output file is generated
*/
 
void
md2_DoMakeStdMode()
{
   FILE  *ifp;
   FILE  *ofp;
   char   input_fid[ FID_LEN];
   char   output_fid[ FID_LEN];
   char   input_target[ TARGET_LEN];
   char   output_target[ TARGET_LEN];
   char   make_rule[ RULE_LEN];
   char   std_rec[ STD_REC_LEN];
   char  *ui_fid;
   char  *comma;
   char  *include_p;
   char  *depend_p;
   int    source_type;
   SGFILEINFO  fileinfo;
 
#ifdef DEBUG
   char  ME[] = "md2_DoMakeStdMode";
#else
   char *ME = NULL;
#endif
 
   md2_OpenFiles( &ifp, "r sharein", &ofp, "r sharein");
   if (md4_BuildTargetTable( ifp))  {
      Error( ME, "Problem building target symbol table (fatal) \n");
      exit( 7);
   }
   rewind( ifp);  /* just in case */
   if (ofp)  {
      md4_GetTimeStamps( ofp);
      fclose( ofp);
      md4_SaveOldOutput();
   }
   md2_OpenFiles( 0, 0, &ofp, "w");
   md2_DoCommentHeader( ofp);
   md4_GenerateUTS( md_time_stamp, md_English_time, 0);
   md_out_buf[ 0] = '\0';
 
/*********************************************************************
 * The BIG loop:  (thru standard file)
 */
   while (fgets( std_rec, STD_REC_LEN, ifp) )  {
 
      if (sscanf( std_rec, "%s %s %s %s %s",
                  input_fid, input_target,
                  output_fid, output_target, make_rule) != 5)  {
         Error( ME, "MAKE Standard file malformed: %s \n",
                md_info.in_fid.pathname );
         exit( 5);
      }
 
      source_type = md4_SetupByRule( make_rule);
      switch (source_type)  {
         case MD_NO_DEFAULT_RULE:
         case MD_LEMUR_LIB:
         case MD_SHARED_LIB:
         case MD_EXTERNAL_LIB:
         case MD_OBJECT_FILE:
         case MD_RUNUNIT:
         case MD_LISTING_FILE:
            goto Skip_File;
         default:
            break;
      }
      ui_fid = (char *)NULL;
      if (comma = strchr( input_fid, ',') )  {
         *comma = '\0';
         ui_fid = comma+1;
      }
 
      if (md4_IsUpToDate( input_fid, ui_fid, output_target))  {
         md4_CopyOldDepends( ofp, output_target, md_out_buf);
         if (md_info.opt.verbose > 1 )
            printf( "Using old dependency list for target -> %s\n",
                    output_target);
      }
      else  {
         if (md_info.opt.verbose > 1 )
            printf( "Creating dependency list for target -> %s\n",
                    output_target);
         fileinfo = md_fileinfo;
         fileinfo.si_fid = input_fid;
         fileinfo.ui_fid = ui_fid;
         if (ui_fid)
            fileinfo.filetype = SG4_IN_UPDATE;
         else
            fileinfo.filetype = SG4_IN_BASE;
         fileinfo.optui = SG4_OPTUI;
         fileinfo.list_update = SG4_NO_LU;
         /* try to open the sucker up with XUU services...
          */
         if (!sg4__xuu_Open( &fileinfo) )  {
            Error( ME, "Could not XUU OPEN file: %s \n", input_fid);
            perror( ME);
            exit( 3);
         }
         ++md_source_file_num;
         md_info.source_file = input_fid;
         md_info.flag.source_type = MD_GENERIC_SOURCE;
         if (ui_fid)
            strcpy( md_info.update_path, ui_fid);
         else
            md_info.update_path[ 0] = 0;
         md3_PutSourceFileName( ofp, output_target, md_out_buf);
 
/*--------------------------------------------------------------------
 * Mini loop:  (thru file)
 */
         fileinfo.buffer = md_input_buf;
         while (sg4__xuu_Read( &fileinfo) )  {
            if (include_p = md4_IsInclude( md_input_buf) )  {
               /* lookup & put into md_out_buf, etc.*/
#ifdef DEBUG
               if (md_debug > 1)
                  printf( "Found include: %s \n", include_p);
#endif
               if (depend_p = md4_IsDependent( include_p))  {
                  md3_PutIncludeName( ofp, depend_p, md_out_buf);
#ifdef DEBUG
                  if (md_debug > 1)
                     printf( "Dependency: %s \n", depend_p);
#endif
               }  /*if depend_p*/
            }  /*if include_p*/
         }  /*while !EOF si,ui*/
 
         if (!sg4__xuu_Close( &fileinfo) )  {
            /*error, warning*/
         }
      }  /*if out-o-date*/
Skip_File:
         ;
   }  /*while !EOF std*/
 
   /* cleanup up any leftover messes... */
   md3_PutFlushStuff( ofp, md_out_buf);
   fclose( ifp);
   fclose( ofp);
   if (md_info.out_save.pathname)
      if (md_info.opt.keep)  {
         if (md_info.opt.verbose)
            Verbose( ME, "Keeping old dependency file: %s \n",
                     md_info.out_save.pathname);
      }
      else  {
         if (md_info.opt.verbose)
            Verbose( ME, "Deleting old dependency file: %s \n",
                     md_info.out_save.pathname);
         remove( md_info.out_save.pathname);
      }
return;
}  /*end md2_DoMakeStdMode ()*/
