/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
ETAD:   PROC MAIN;
 
/*M*  ETAD update program for :DATE used by DATE.X           */
/*X*           DMR,PLM=5,IND=5,CTI=5,SDI=5,CSI=0,ECI=0       */
 
%INCLUDE CP_6;
%INCLUDE ETAD_C;
%INCLUDE XU_MACRO_C;
%INCLUDE CP_6_SUBS;
%INCLUDE XUR_ENTRY;
DCL CHIP$MESS ENTRY (6);
%EJECT;
 
%SUB FOREVER = "WHILE ('1'B)";
 
%PARSE$SYM (NAME = P$SYM);
%PARSE$OUT (NAME = P$BLK);
 
%XUR_INIT (WORK = PARSE_AREA);
%EJECT;
%FPT_OPEN (FPTN = OCR_SDATE,
  DCB = M$SDATE,
  FUN = IN,
  CTG = YES,
  EXIST = OLDFILE,
  ASN = FILE,
  SHARE = ALL,
  ORG = KEYED,
  ACS = DIRECT,
  NAME = SDATE_NAME,
  ACCT = SDATE_ACCT);
 
%FPT_READ (FPTN = R_SDATE,
  DCB = M$SDATE,
  KEYS = YES,
     KEYR = YES,
          BUF = BUFFER,
          KEY = DKEY);
 
     %FPT_CLOSE (FPTN = CLS_SDATE,
     DCB = M$SDATE,
     DISP = SAVE);
 
     %VLP_NAME (FPTN = SDATE_NAME,NAME=':DATE');
     %VLP_ACCT (FPTN = SDATE_ACCT,ACCT='SUPPORT');
DCL M$SDATE DCB;
 
%EJECT;
%FPT_OPEN (FPTN = OCR_UDATE,
  DCB = M$UDATE,
  FUN = CREATE,
  CTG = YES,
  EXIST = OLDFILE,
  ASN = FILE,
  SHARE = ALL,
  ORG = KEYED,
  ACS = DIRECT,
  NAME = UDATE_NAME);
 
%FPT_READ (FPTN = R_UDATE,
  DCB = M$UDATE,
  KEYS = YES,
  KEYR = YES,
  BUF = BUFFER,
  KEY = DKEY);
 
%FPT_WRITE (FPTN = W_UDATE,
  DCB = M$UDATE,
  ONEWKEY = YES,
  KEY = DKEY,
  BUF = BUFFER);
 
%FPT_CLOSE (FPTN = CLS_UDATE,
  DCB = M$UDATE,
  DISP = SAVE);
 
%FPT_DELREC (FPTN = REMDATE,
  DCB = M$UDATE,
  KEY = DKEY);
 
%VLP_NAME (FPTN = UDATE_NAME,NAME=':DATE');
DCL M$UDATE DCB;
 
DCL BUFFER CHAR (34) STATIC;
DCL OUTLINE CHAR (60);
DCL 1 DKEY STATIC,
         2 LEN UBIN (9) INIT (8) UNAL,
         2 KEY CHAR (8) UNAL;
%EJECT;
%FPT_OPEN (FPTN = O_USER,
  CTG = YES,
  DCB = M$ME);
%FPT_WRITE (FPTN = W_USER,
  DCB = M$ME);
%FPT_CLOSE (FPTN = C_USER,
  DCB = M$ME,
  DISP = SAVE);
%FPT_TIME (FPTN=FIXDATE,DATE=DKEY.KEY,SOURCE=LOCAL,DEST=LOCAL);
%EJECT;
DCL HEADING CHAR (14) STATIC INIT ('S M T W R F S');
 
DCL WEEK (0:6) CHAR (2) STATIC;
DCL WEEKALL REDEF WEEK CHAR (14);
DCL SWEEK (0:6) CHAR (2) STATIC;
DCL SWEEKALL REDEF SWEEK CHAR (14);
DCL 1 PROMPT STATIC,
         2 * UBIN (9) INIT (8) UNAL,
         2 * CHAR (8) INIT ('Command:') UNAL;
 
DCL 1 ERRFILE STATIC,
         2 * UBIN BYTE INIT (06) UNAL,
         2 * CHAR (13) INIT ('ETAD.X') UNAL;
 
DCL PARSE_AREA (0:199) UBIN STATIC;
DCL DAYOFF_NODE UBIN SYMREF;
DCL BLK$ PTR;
DCL DO$ PTR;
DCL M$ME DCB;
DCL I UBIN;
%EJECT;
/*
  Mainline
*/
     CALL XUR$SETERRMSG (ERRFILE) ALTRET (BARFOUT);
     CALL CHIP$MESS (%GREETINGS,GO#);
     CALL M$OPEN (OCR_UDATE) WHENALTRETURN
     DO;
          CALL CHIP$MESS (%NO_UDATE,GO#);
        END;
 
     WEEKALL = ' ';
     R_UDATE.BUF_ = VECTOR (WEEKALL);
     DKEY.KEY = 'DOF_WEEK';
     CALL M$READ (R_UDATE) WHENALTRETURN
     DO;
/* NOTHING */
        END;
     DO FOREVER;
          DKEY.LEN = 8;
          CALL XUR$GETCMD (DAYOFF_NODE,DO$,PROMPT) WHENRETURN
          DO;
               DO I = 0 TO DO$->P$BLK.NSUBLKS -1;
                    DO CASE (DO$->P$BLK.SUBLK$(I)->P$BLK.CODE);
                    CASE (%SUN,%MON,%TUE,%WED,%THU,%FRI,%SAT);
                       DO CASE (DO$->P$BLK.SUBLK$(I)->P$BLK.SUBLK$(0)->P$BLK.CODE);
                       CASE (20);
                          WEEK(DO$->P$BLK.SUBLK$(I)->P$BLK.CODE) = 'W';
                       CASE (21);
                          WEEK(DO$->P$BLK.SUBLK$(I)->P$BLK.CODE) = 'O';
                       CASE (22);
                          WEEK(DO$->P$BLK.SUBLK$(I)->P$BLK.CODE) = ' ';
                       END;
                       W_UDATE.BUF_ = VECTOR (WEEKALL);
                       DKEY.KEY = 'DOF_WEEK';
                       CALL M$WRITE (W_UDATE) ALTRET (BARFOUT);
                    CASE (%END);
                       CALL XUR$CLOSE_DCBS;
                       CALL M$EXIT;
                    CASE (%ODAY);
                       W_UDATE.BUF_ = VECTOR (BUFFER);
                       CALL BLD_KEY;
                       CALL CONCAT (BUFFER,'Off  ',
                            DO$->P$BLK.SUBLK$(0)->P$BLK.SUBLK$(3)->P$SYM.TEXT);
                       CALL M$WRITE (W_UDATE) ALTRET (BARFOUT);
                    CASE (%WDAY);
                       W_UDATE.BUF_ = VECTOR (BUFFER);
                       CALL BLD_KEY;
                       CALL CONCAT (BUFFER,'Work ',
                            DO$->P$BLK.SUBLK$(0)->P$BLK.SUBLK$(3)->P$SYM.TEXT);
                       CALL M$WRITE (W_UDATE) ALTRET (BARFOUT);
                    CASE (%DELR);
                       CALL BLD_KEY;
                       CALL M$DELREC (REMDATE) WHENALTRETURN
                       DO;
                            CALL CHIP$MESS (%SYS,GO#);
                          END;
                    CASE (%DSYS);
                       CALL M$OPEN (OCR_SDATE) ALTRET (NOSYS);
                       SWEEKALL = ' ';
                       R_SDATE.BUF_ = VECTOR (SWEEKALL);
                       DKEY.KEY = 'DOF_WEEK';
                       CALL M$READ (R_SDATE) ALTRET (NOSYS);
                       W_USER.BUF_ = VECTOR (HEADING);
                       CALL M$WRITE (W_USER);
                       W_USER.BUF_ = VECTOR (SWEEKALL);
                       CALL M$WRITE (W_USER);
 
                       CALL M$CLOSE (CLS_SDATE);
                       OCR_SDATE.V.ACS#=%SEQUEN#;
                       OCR_SDATE.V.FUN# = %IN#;
                       R_SDATE.V.KEYS# = '0'B;
                       CALL M$OPEN (OCR_SDATE) ALTRET (BARFOUT);
                       R_SDATE.BUF_ = VECTOR (BUFFER);
                       W_USER.BUF_ = VECTOR (OUTLINE);
                       DO FOREVER;
                            BUFFER = ' ';
                            CALL M$READ (R_SDATE) ALTRET(NMORE);
                            IF DKEY.KEY ~= 'DOF_WEEK'
                            THEN
                            DO;
                                 CALL CONCAT (OUTLINE,DKEY.KEY,' = ',BUFFER);
                                 CALL M$WRITE (W_USER) ALTRET (BARFOUT);
                               END;
                          END;
NMORE:                 ;
                       CALL M$CLOSE (CLS_SDATE) ALTRET (BARFOUT);
                       OCR_SDATE.V.ACS# = %DIRECT#;
                       OCR_SDATE.V.FUN# = %UPDATE#;
                       R_SDATE.V.KEYS# = '1'B;
NOSYS:                 ;
                    CASE (%DISP);
                       W_USER.BUF_ = VECTOR (HEADING);
                       CALL M$WRITE (W_USER);
                       W_USER.BUF_ = VECTOR (WEEKALL);
                       CALL M$WRITE (W_USER);
 
                       CALL M$CLOSE (CLS_UDATE);
                       OCR_UDATE.V.ACS#=%SEQUEN#;
                       OCR_UDATE.V.FUN# = %IN#;
                       R_UDATE.V.KEYS# = '0'B;
                       CALL M$OPEN (OCR_UDATE) ALTRET(BARFOUT);
                       R_UDATE.BUF_ = VECTOR (BUFFER);
                       W_USER.BUF_ = VECTOR (OUTLINE);
                       DO FOREVER;
                            BUFFER = ' ';
                            CALL M$READ (R_UDATE) ALTRET(NOMORE);
                            IF DKEY.KEY ~= 'DOF_WEEK'
                            THEN
                            DO;
                                 CALL CONCAT (OUTLINE,DKEY.KEY,' = ',BUFFER);
                                 CALL M$WRITE (W_USER) ALTRET (BARFOUT);
                               END;
                          END;
NOMORE:                ;
                       CALL M$CLOSE (CLS_UDATE) ALTRET (BARFOUT);
                       OCR_UDATE.V.ACS# = %DIRECT#;
                       OCR_UDATE.V.FUN# = %UPDATE#;
                       R_UDATE.V.KEYS# = '1'B;
                       CALL M$OPEN (OCR_UDATE) ALTRET (BARFOUT);
                    END;
                  END;
             END;
          WHENALTRETURN
          DO;
               CALL CHIP$MESS (%SYNTAX,GO#);
             END;
        END;
BARFOUT: ;
     CALL CHIP$MESS (%SCREECH,HALT#);
%EJECT;
BLD_KEY: PROC;
     CALL CONCAT (DKEY.KEY,DO$->P$BLK.SUBLK$(0)->P$BLK.SUBLK$(0)->P$SYM.TEXT,
          '/',DO$->P$BLK.SUBLK$(0)->P$BLK.SUBLK$(1)->P$SYM.TEXT,
          '/',DO$->P$BLK.SUBLK$(0)->P$BLK.SUBLK$(2)->P$SYM.TEXT);
     CALL M$TIME(FIXDATE);
     RETURN;
END BLD_KEY;
END ETAD;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
CHIP$MESS: PROC (MESSCODE,RUNCON,MESSDCB,U1,U2,U3);
 
/*M*     CHIP$MESS - error message routine                   */
/*F*
     NAME: CHIP$MESS
     PURPOSE:
           An error message routine.
     DESCRIPTION:
           Routine can be called with the error message code and
           a bit set to either give a message and return of close
           all dcbs give a message and call a M$ERR.
     REFERENCE:
           XUR routines in CP6 Monitor Service Manual.
           Error Message routines in CP6 Monitor Service Manual.
*/
/*D*
     NAME: CHIP$MESS
     ENTRY:
          CHIP$MESS
     CALL:
          CALL CHIP$MESS (messcode,runcon,[messdcb],[u1],[u2],[u3])]
     PARAMETERS:
            messcode - UBIN word container error message number.
            runcon - BIT containing yes or no to return.
            messdcb - UBIN word containing the number of the error dcb.
            u1,u2,u3 - TEXTC variables for error code user varialbes.
 
*/
%INCLUDE CP_6;
%INCLUDE XUR_ENTRY;
 
%B$ALT;
%B$TCB;
 
%VLP_ERRCODE (FPTN = ERRCODE);
 
DCL B$TCB$ PTR SYMREF;
DCL U1_ VECTOR;
DCL U2_ VECTOR;
DCL U3_ VECTOR;
DCL ERRDCB UBIN;
 
DCL MESSCODE UBIN; /*K* word containing the error message code */
DCL RUNCON BIT (1); /*K* true bit - RETURN; false - M$ERR */
DCL MESSDCB UBIN; /*K* word containing the number of the err DCB */
 
DCL 1 U1, /*K* TEXTC variable containing user variable 1 */
         2 LEN UBIN BYTE UNAL,
         2 TEXT CHAR (U1.LEN) UNAL;
DCL 1 U2, /*K* TEXTC variable containing user variable 2 */
         2 LEN UBIN BYTE UNAL,
         2 TEXT CHAR (U2.LEN) UNAL;
DCL 1 U3, /*K* TEXTC variable containing user variable 3 */
         2 LEN UBIN BYTE UNAL,
         2 TEXT CHAR (U3.LEN) UNAL;
 
%EJECT;
     IF ADDR (MESSCODE) = ADDR (NIL)
     THEN
          GOTO BARFOUT;
     IF ADDR (MESSDCB ) = ADDR (NIL)
     THEN
          ERRDCB = 0;
     ELSE
          ERRDCB = MESSDCB;
     IF ADDR (RUNCON) = ADDR (NIL)
     THEN
          GOTO BARFOUT;
     IF ADDR (U1) = ADDR (NIL)
     THEN
          U1_ = VECTOR (NIL);
     ELSE
          U1_ = VECTOR (U1);
     IF ADDR (U2) = ADDR (NIL)
     THEN
          U2_ = VECTOR (NIL);
     ELSE
          U2_ = VECTOR (U2);
     IF ADDR (U3) = ADDR (NIL)
     THEN
          U3_ = VECTOR (NIL);
     ELSE
          U3_ = VECTOR (U3);
 
     IF MESSCODE < 5000
     THEN
     DO;
          ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
          ERRDCB = B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
 
          CALL XUR$ERRMSG (ERRCODE,ERRDCB) ALTRET (BARFOUT);
        END;
 
     ERRCODE = '0'B;
     ERRCODE.ERR# = MESSCODE;
 
     CALL XUR$ERRMSG (ERRCODE,ERRDCB,,U1_,U2_,U3_) ALTRET (BARFOUT);
 
     IF RUNCON
     THEN
          RETURN;
     ELSE
     DO;
BARFOUT:  ;
          CALL XUR$CLOSE_DCBS;
          CALL M$ERR;
        END;
END CHIP$MESS;
