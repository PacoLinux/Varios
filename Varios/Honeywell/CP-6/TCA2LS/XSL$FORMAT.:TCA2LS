VERSION A02


CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              1    
        1        1        /*M* XSL$FORMAT - CRAWDAD format strings for socket library context. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F* NAME: DEBUGGING
        8        8        .spb
        9        9        Following is a description of several commands available to debug
       10       10        Socket Library applications under DELTA and ANLZ.  This is not a
       11       11        general debugging tutorial, nor is much information provided about the
       12       12        internals of Socket Library operation.
       13       13        .spb
       14       14        The debugging commands are \XSL$SOCKHD, \XSL$SOCKINFO, \XSL$DATABUF, and \XSL$EVLOG
                14        .
       15       15        They are implemented as CRAWDAD strings, so the system administrator will
       16       16        need to have installed them as part of the general TCP/IP installation
       17       17        at your site.
       18       18        .spb
       19       19        The general format for usage of the commands is:
       20       20        .inl +8
       21       21        .spb
       22       22        .fif
       23       23                command offset [USING user#]
       24       24        .fin
       25       25        .spb
       26       26        .inl -8
       27       27        Under ANLZ, the user number of the user running the Socket Library
       28       28        application to be debugged will need to be specified.  Under either
       29       29        DELTA or ANLZ, the symbol table of the running application needs
       30       30        to be loaded.  The whole process goes something like this:
       31       31        .inl +8
       32       32        .spb
       33       33        .fif
       34       34                !" example of DELTA debugging session follows..
       35       35                !UNDER DELTA
       36       36                !run-unit-fid
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              2    
       37       37                 ...
       38       38                >command offset         " issue command
       39       39                 (repeat as needed)
       40       40                 ...
       41       41                >QUIT
       42       42
       43       43                !" example of ANLZ debugging session follows..
       44       44                !ANLZ
       45       45                -SPY A=account          " identify the user to be debugged
       46       46                -SYM run-unit-fid       " load the correct symbol table
       47       47                 ...
       48       48                -command offset U user# " issue command referring to user
       49       49                 (repeat as needed)
       50       50                 ...
       51       51                -QUIT
       52       52        .fin
       53       53        .inl -8
       54       54        .spb
       55       55        These commands can be used to debug either a currently running application
       56       56        or one that has been SNAPped with SNAP.X.  For later use, invoke
       57       57        ANLZ specifying the name of the SNAP dumpfile.
       58       58        .spb
       59       59        The most common errors in using the commands are (1) forgetting to load
       60       60        the correct symbol table before use, and (2) using the incorrect offset.
       61       61        Rudimentary error checking is performed by the commands to help diagnose
       62       62        these errors.
       63       63        .spb
       64       64        Following are brief descriptions of the command.
       65       65        .spb
       66       66        */
       67       67        /*K* $_$XSL$SOCKHD
       68       68        .spb
       69       69        The \XSL$SOCKHD command provides general information about the Socket
       70       70        Library data segment.  The offset parameter must be given as zero.
       71       71        .spb
       72       72        The output from the \XSL$SOCKHD command contains the following values:
       73       73        .inl +4
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              3    
       74       74        .spb
       75       75        .fif
       76       76            XSL_SOCK$$=hexnum   " base address of data segment
       77       77            segsize=hexnum      " size of data segment in words
       78       78            maxbuf=decnum       " default value of MAXBUF
       79       79            maxrds=decnum       " default value of MAXRDS
       80       80            maxsock=decnum      " number of sockets defined
       81       81            evnt$=address       " address of application's event handler
       82       82            sock(0)=hexnum, sock(1)=hexnum, etc. " socket offset array
       83       83            bufhd=hexnum, buftl=hexnum, " head and tail of free buffer chain
       84       84            hexnum [ >> hexnum ]... >> .0 " chain of free buffer offsets
       85       85        .fin
       86       86        .inl -4
       87       87        .spb
       88       88        */
       89       89        XSL$SOCKHD/64
       90       90            '%10.2.3072E'
       91       91            '%.8Ctry \XSL$SOCKHD 0 USING uu%/%1Q%C'
       92       92            '%1.1P%N.6='
       93       93            '%1.6#[%1P%N.1=%3072.1#[%?%8C%]%]'
       94       94            '%7E%(XSL_SOCK$$%)%2P%2.1.127#E%2P%N.4='
       95       95            '%3084.4#[data segment not present%/%1Q%]'
       96       96            '%2P%10.40.4#E'
       97       97            '%2.2P%N.7=%36:7#>.7=%36.7#[%?%8C%]'
       98       98            'XSL_SOCK$$=.%.4#KO,  socket library dataseg head:%/'
       99       99            '%2.1Psegsize=.%.18O,  '
      100      100            '%2.1.2Pmaxbuf=%.9D,  '
      101      101            '%2.1.3Pmaxrds=%.9D,  '
      102      102            '%2.2Pmaxsock=%D,  '
      103      103            '%2.3Pevnt$=%18N.2=%6.1.2#E=+.%.1#KO'
      104      104            '%/'
      105      105            '%4.2=%0.1=%2.2P%N('
      106      106                '%R%2.2#Psock(%.1#KD)=.%.18O,  %2#:1+.2=%1#:1+.1='
      107      107                '%)%:3-X'
      108      108            '%/'
      109      109            '%2Pbufhd=.%.18O,  '
      110      110            '%2.0.2Pbuftl=.%.18O,  '
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              4    
      111      111            'free buffer chain:%/'
      112      112            '%2.2E%3E%2P%18N.1=%999('
      113      113                '%R.%.1#KO >> '
      114      114                '%0.1#[%:4-X%2/%1Q%]'
      115      115                '%3.1#E%2.1.2P%18N.1='
      116      116                '%2P%)'
      117      117            ;
      118      118
      119      119        /*K* $_$XSL$SOCKINFO
      120      120        .spb
      121      121        The \XSL$SOCKINFO command provides information about a specific socket.
      122      122        The offset parameter is a word offset into the Socket Library data
      123      123        segment (obtained from the \XSL$SOCKHD display).
      124      124        .spb
      125      125        The output from the \XSL$SOCKINFO command contains the following values:
      126      126        .inl +4
      127      127        .spb
      128      128        .fif
      129      129            sock#=decnum        " socket number
      130      130            dcbn=decnum         " DCBNUM of the socket's DCB
      131      131            dcb=string          " name of the socket's DCB
      132      132            af=decnum           " socket address family
      133      133            type=string         " socket type
      134      134            protocol=decnum     " socket protocol
      135      135            flags set:[ string ]... " currently set socket status flags
      136      136            sockname=decnum/decnum/string " sock family/port/inet-address
      137      137            peername=decnum/decnum/string " peer family/port/inet-address
      138      138            sernum=string       " name of FEP socket is bound to
      139      139            rcrbytsiz=decnum    " maximum data chunk size host to/from FEP
      140      140            feperror=decnum     " asynchronous error to be reported
      141      141            maxbuf=decnum       " socket's current MAXBUF
      142      142            maxrds=decnum       " socket's current MAXRDS
      143      143            bufpnd#=decnum      " current number of pending buffers
      144      144            oob#=decnum         " current number of active oob buffers
      145      145            dat#=decnum         " current number of active data buffers
      146      146            bufhd=hexnum, buftl=hexnum " head and tail of socket's active buffers
      147      147        .fin
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              5    
      148      148        .spb
      149      149        .inl -4
      150      150        At this point in the display the socket's buffer chain is dumped.  See the
      151      151        description of the \XSL$DATABUF command for more information on the buffer
      152      152        display.
      153      153        .spb
      154      154        */
      155      155        XSL$SOCKINFO/20
      156      156            '%.8Ctry \XSL$SOCKINFO nn USING uu%/%1Q%C'
      157      157            '%1.1P%N.6='
      158      158            '%1.6#[%1P%N.1=%3072.1#[%8C%]%]'
      159      159            '%1P%N.5=%5#:262144/.5='
      160      160            '%7E%(XSL_SOCK$$%)%2P%2.1.127#E%2P%N.4='
      161      161            '%3084.4#[data segment not present%/%1Q%]'
      162      162            '%2P%10.40.4#E'
      163      163            '%2.2P%N.4=%36:4#>.4=%36.4#[%?%8C%]'
      164      164            '%2P%2.20.5#E'
      165      165            '%2.0.3Psock#=%.9D,  '
      166      166            '%2.3.2Pdcbn=%.18D,  '
      167      167            '%2.0.3Pdcb=F$XSL%2.9ZD,  '
      168      168            '%2Paf=%.9D,  '
      169      169            '%2.0.1Ptype=%1.9N[stream%2?dgram%3?raw%?unknown%],  '
      170      170            '%2.0.2Pprotocol=%.9D'
      171      171            '%/'
      172      172            'flags set: %2.1P'
      173      173            '%1.1N[terminated %]'
      174      174            '%1.1N[sendshut %]'
      175      175            '%1.1N[recvshut %]'
      176      176            '%1.1N[connect %]'
      177      177            '%1.1N[accept %]'
      178      178            '%1.1N[listen %]'
      179      179            '%1.1N[bind %]'
      180      180            '%1.1N[socket %]'
      181      181            '%1.1N[blocking %]'
      182      182            '%1.1N[reuseaddr %]'
      183      183            '%1.1N[connecting %]'
      184      184            '%1.1N[accepting %]'
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              6    
      185      185            '%1.1N[selread %]'
      186      186            '%1.1N[selwrite %]'
      187      187            '%1.1N[selexcep %]'
      188      188            '%1.1N[reusebuf %]'
      189      189            '%1.1N[oobinline %]'
      190      190            '%1.1N[mustread %]'
      191      191            '%1.1N[drip %]'
      192      192            '%1.1N[cp6err %]'
      193      193            '%/'
      194      194            '%2.4Psockname=%D/%.32@D/%.9D%3(.%.9D%),  '
      195      195            '%2.9Ppeername=%D/%.32@D/%.9D%3(.%.9D%)'
      196      196            '%/'
      197      197            '%2.2Psernum=''%6A'',  '
      198      198            '%2.15Prcrbytsiz=%.18D,  '
      199      199            '%2.1.3Pfeperror=%.9D'
      200      200            '%/'
      201      201            '%2.1.2.1P%1.1N['
      202      202                '%2.18Pcp6error=%J%2.18P%..1J'
      203      203                '%/%]'
      204      204            '%2.1.1.2P%1.1N['
      205      205                '%2.18Pnbaccept_sock$=.%KO,  '
      206      206                '%2.19Pnbaccept_ldctx=%D'
      207      207                '%/%]'
      208      208            '%2.16Pmaxbuf=%.18D,  '
      209      209            '%2.16.2Pmaxrds=%.18D,  '
      210      210            '%2.15.2Pbufpnd#=%.18D,  '
      211      211            '%2.17Poob#=%.18D,  '
      212      212            '%2.17.2Pdat#=%.18D'
      213      213            '%/'
      214      214            '%2.14Pbufhd=.%.18O,  '
      215      215            '%2.14.2Pbuftl=.%.18O'
      216      216            '%2.14P%0.18N[%?,  buffer chain:%2/%]'
      217      217            '%2.14P%2.512E%3E%18N.2=%999('
      218      218                '%0.2#[%2/%1Q%]'
      219      219                '%3.2#E%2.1.2P%18N.1='
      220      220                'bufx=.%.2#KO,  '
      221      221                '%2.1.2Pnxt=.%.18O,  '
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              7    
      222      222                '%2.1P%1.1N['
      223      223                    '%2Psock=.%.18O,  '
      224      224                '%?'
      225      225                    '%2Pstart=.%.18O,  '
      226      226                    '%2.0.2Plen=%.18D,  '
      227      227                    '%]'
      228      228                'flags set: '
      229      229                '%2.1P%1.1N[busy %]'
      230      230                '%2.1.0.1P%1.1N[oob %]'
      231      231                '%/'
      232      232                '%2.2Pkey=.%6(%6.18ZO %)%/    .%6(%6.18ZO %)%/'
      233      233                '%0.0=key.msgcode=%2.2P%0.18N['
      234      234                    '%01?AcceptRqs'
      235      235                    '%02?AcceptRsp'
      236      236                    '%03?BindRqs'
      237      237                    '%04?BindRsp'
      238      238                    '%05?ConnectRqs'
      239      239                    '%06?ConnectRsp'
      240      240                    '%07?GSOptRqs'
      241      241                    '%08?GSOptRsp'
      242      242                    '%09?GiveupRqs'
      243      243                    '%10?GiveupRsp'
      244      244                    '%11?ListenRqs'
      245      245                    '%12?ListenRsp'
      246      246                    '%13?RecvRqs'
      247      247                    '%14?RecvRsp%1.0='
      248      248                    '%15?RecvfromRqs'
      249      249                    '%16?RecvfromRsp%1.0='
      250      250                    '%17?SelectRqs'
      251      251                    '%18?SelectRsp'
      252      252                    '%19?SendRqs'
      253      253                    '%20?SendRsp'
      254      254                    '%21?SendtoRqs'
      255      255                    '%22?SendtoRsp'
      256      256                    '%23?SSOptRqs'
      257      257                    '%24?SSOptRsp'
      258      258                    '%25?ShutdownRqs'
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              8    
      259      259                    '%26?ShutdownRsp'
      260      260                    '%27?SocketRqs'
      261      261                    '%28?SocketRsp'
      262      262                    '%29?GSNameRqs'
      263      263                    '%30?GSNameRsp'
      264      264                    '%31?GPNameRqs'
      265      265                    '%32?GPNameRsp'
      266      266                    '%33?IoctlRqs'
      267      267                    '%34?IoctlRsp'
      268      268                    '%35?DetachRqs'
      269      269                    '%?<bad>'
      270      270                    '%]'
      271      271                '%0.0#[%?%2.10P,  data elided...%/'
      272      272                '%]'
      273      273                '%2.1.2P%18N.2='
      274      274                '%2P%)'
      275      275            ;
      276      276
      277      277        /*K* $_$XSL$DATABUF
      278      278        .spb
      279      279        The \XSL$DATABUF command provides information about a specific NoWait
      280      280        data buffer.  The offset parameter is a word offset into the Socket
      281      281        Library data segment (obtained from one of the other commands).
      282      282        .spb
      283      283        The output from the \XSL$DATABUF command contains the following values:
      284      284        .inl +4
      285      285        .spb
      286      286        .fif
      287      287            bufx=hexnum         " offset of data buffer
      288      288            nxt=hexnum          " offset of next data buffer in chain
      289      289            sock=hexnum         " (pending buf) offset of owning socket
      290      290            start=hexnum        " (active buf) byte offset to unread data
      291      291            len=decnum          " (active buf) number of bytes of unread data
      292      292            flags set:[ string ]... " currently set buffer status flags
      293      293            key=hexnum...       " contents of KEY for M$READ or M$WRITE
      294      294            key.msgcode=string  " decoded contents of KEY.MSGCODE
      295      295        .fin
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              9    
      296      296        .spb
      297      297        .inl -4
      298      298        The data in a data buffer is not displayed, due to its potential size.
      299      299        The DU or DUA commands can be used to dump the data manually.  (The
      300      300        data region starts ten words higher than bufx.)
      301      301        .spb
      302      302        */
      303      303        XSL$DATABUF/10
      304      304            '%.8Ctry \XSL$DATABUF nn USING uu%/%1Q%C'
      305      305            '%1.1P%N.6='
      306      306            '%1.6#[%1P%N.1=%3072.1#[%8C%]%]'
      307      307            '%1P%N.5=%5#:262144/.5='
      308      308            '%7E%(XSL_BUFSIZE%)%2.1.127#E%2P%N.7=%7#:3+.7=%7#:4/.7='
      309      309            '%7E%(XSL_SOCK$$%)%2P%2.1.127#E%2P%N.4='
      310      310            '%3084.4#[data segment not present%/%1Q%]'
      311      311            '%2P%10.40.4#E'
      312      312            '%2.2P%N.4=%36:4#>.4=%36.4#[%?%8C%]'
      313      313            '%2P%2.20.5#E'
      314      314            'bufx=.%.5#KO,  '
      315      315            '%2.1.2Pnxt=.%.18O,  '
      316      316            '%2.1P%1.1N['
      317      317                '%2Psock=.%.18O,  '
      318      318            '%?'
      319      319                '%2Pstart=.%.18O,  '
      320      320                '%2.0.2Plen=%.18D,  '
      321      321                '%]'
      322      322            'flags set: '
      323      323            '%2.1P%1.1N[busy %]'
      324      324            '%1.1N[oob %]'
      325      325            '%1.1N[more %]'
      326      326            '%/'
      327      327            '%2.2Pkey=.%6(%6.18ZO %)%/    .%6(%6.18ZO %)%/'
      328      328            '%0.0=key.msgcode=%2.2P%0.18N[<bad>'
      329      329                '%01?AcceptRqs'
      330      330                '%02?AcceptRsp'
      331      331                '%03?BindRqs'
      332      332                '%04?BindRsp'
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              10   
      333      333                '%05?ConnectRqs'
      334      334                '%06?ConnectRsp'
      335      335                '%07?GetsockoptRqs'
      336      336                '%08?GetsockoptRsp'
      337      337                '%09?GiveupRqs'
      338      338                '%10?GiveupRsp'
      339      339                '%11?ListenRqs'
      340      340                '%12?ListenRsp'
      341      341                '%13?RecvRqs'
      342      342                '%14?RecvRsp%1.0='
      343      343                '%15?RecvfromRqs'
      344      344                '%16?RecvfromRsp%1.0='
      345      345                '%17?SelectRqs'
      346      346                '%18?SelectRsp'
      347      347                '%19?SendRqs'
      348      348                '%20?SendRsp'
      349      349                '%21?SendtoRqs'
      350      350                '%22?SendtoRsp'
      351      351                '%23?SetsockoptRqs'
      352      352                '%24?SetsockoptRsp'
      353      353                '%25?ShutdownRqs'
      354      354                '%26?ShutdownRsp'
      355      355                '%27?SocketRqs'
      356      356                '%28?SocketRsp'
      357      357                '%29?GetsocknameRqs'
      358      358                '%30?GetsocknameRsp'
      359      359                '%31?GetpeernameRqs'
      360      360                '%32?GetpeernameRsp'
      361      361                '%33?IoctlRqs'
      362      362                '%34?IoctlRsp'
      363      363                '%35?DetachRqs'
      364      364                '%?<bad>'
      365      365                '%]'
      366      366                '%0.0#[%/%?%2.512E%2.10P,  data:%/'
      367      367                '%7#(%R.%12ZO  %)'
      368      368                '%]'
      369      369            '%/%1Q'
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              11   
      370      370            ;
      371      371
      372      372        /*K* $_$XSL$EVLOG
      373      373        .spb
      374      374        The \XSL$EVLOG command provides a human-readable dump of the Socket
      375      375        Library's internal event log.  The offset parameter must be given as zero.
      376      376        .spb
      377      377        The output from the \XSL$EVLOG command contains the following values:
      378      378        .inl +4
      379      379        .spb
      380      380        .fif
      381      381            XSL_EVENTIDX=hexnum   " index of next available event log entry
      382      382            XSL_EVENTLOG$=address " address of event log in data segment
      383      383        .fin
      384      384        .inl -4
      385      385        .spb
      386      386        At this point in the display, the Socket Library's event log is dumped.
      387      387        Each entry in the log occupies one or two words, and each word occupies
      388      388        one line of the display.  Time increases downward in the display.  The
      389      389        display wraps from last entry to first.  There is an indication of where
      390      390        the next available entry is located.  If an entry indicates some sort of
      391      391        monitor error, the error itself occupies the next entry.
      392      392        .spb
      393      393        Following is an example of an event log dump.
      394      394        .inl +4
      395      395        .spb
      396      396        .fif
      397      397            GP .044706  get sockptr from XSL$LISTEN+.22
      398      398            GB .006114  get buffer .6114
      399      399            NW .006114  nowait read on buffer .6114
      400      400            WT .000006  M$WAIT on sock .6
      401      401            EV .006114  event on buffer .6114
      402      402            RB .006114  release buffer .6114
      403      403            GP .037161  get sockptr from XSL$ACCEPT+.25
      404      404            GT .000032  M$GETDCB on sock .32
      405      405            OP .000032  M$OPEN on sock .32
      406      406            RQ .000032  space available on sock .32
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              12   
      407      407            WR .000032  M$WRITE on sock .32
      408      408            RD .000032  M$READ on sock .32
      409      409            WR .000032  M$WRITE on sock .32
      410      410            GB .006114  get buffer .6114
      411      411            NW .006114  nowait read on buffer .6114
      412      412            WT .000006  M$WAIT on sock .6
      413      413            >>> next event goes here <<<
      414      414        .fin
      415      415        .inl -4
      416      416        .spb
      417      417        */
      418      418        XSL$EVLOG/64
      419      419            '%10.2.3072E'
      420      420            '%.8Ctry \XSL$EVLOG 0 USING uu%/%1Q%C'
      421      421            '%1.1P%N.6='
      422      422            '%1.6#[%1P%N.1=%3072.1#[%?%8C%]%]'
      423      423            '%7E%(XSL_EVENTIDX%)%2.1.127#E%2P%N.3='
      424      424            '%64:3#>.5=%64.5#[%?%8C%]'
      425      425            '%7E%(XSL_EVENTLOG$%)%2P%2.1.127#E%2P%N.4='
      426      426            '%7E%(XSL_SOCK$$%)%2P%2.1.127#E%2P%N.7='
      427      427            '%3084.7#[data segment not present%/%1Q%]'
      428      428            '%2P%10.40.7#E'
      429      429            '%2.2P%N.7=%36:7#>.7=%36.7#[%?%8C%]'
      430      430            '%3084.4#[event log not present%/%1Q%]'
      431      431            '%2P%2.64.4#E'
      432      432            'XSL_EVENTIDX=.%.3#KO,  XSL_EVENTLOG$=.%.4#KO,  event circular log...%/'
      433      433            '%0.0=%64('
      434      434                '%0.3#[>>> next event goes here <<<%/%]'
      435      435                '%2.0#P'
      436      436                '%2.2A .%6.18ZO  '
      437      437                '%2.0#P'
      438      438                '%23085.18N[(end of event log)%/%1Q'
      439      439                '%36432?get sockptr from %18N.2=%6.1.2#E=+.%.1#KO'
      440      440                '%35414?event on buffer .%.18O'
      441      441                '%36418?get buffer .%.18O'
      442      442                '%40023?nowait read on buffer .%.18O'
      443      443                '%42050?release buffer .%.18O'
CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              13   
      444      444                '%33366?data available on sock .%.18O'
      445      445                '%34380?M$CLOSE on sock .%.18O'
      446      446                '%36436?M$GETDCB on sock .%.18O'
      447      447                '%40528?M$OPEN on sock .%.18O'
      448      448                '%42052?M$READ on sock .%.18O'
      449      449                '%42060?M$RELDCB on sock .%.18O'
      450      450                '%42065?space available on sock .%.18O'
      451      451                '%44626?M$WRITE on sock .%.18O'
      452      452                '%44628?M$WAIT on sock .%.18O'
      453      453                '%44632?wait for read cancel on sock .%.18O'
      454      454                '%45144?M$TRMPRG on sock .%.18O'
      455      455                '%35410?error on buffer or sock .%.18O'
      456      456                '%?%2.0#P%J%2.0#P%..1J%]'
      457      457                '%0#:1+.0=%3#:1-.3=%/%)'
      458      458            '%/%1Q'
      459      459            ;

CRAWDAD version A00  Source listing      14:28:42.96 NOV 16 '97 XSL$FORMAT                              14   

         No errors,   4 Format Definitions in XSL$FORMAT

