VERSION A02

PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:1    
        1        1        /*M*    XSL$SOCKET3             BSD4.3 Socket Library for CP-6, part 3  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,DCI=8,DTI=0,ENI=4,ECI=4,CSI=4,DIN=4,SDI=0 */
        8        8
        9        9        /*F* NAME: getpeername() and XSL$GETPEERNAME  --  Get Socket Peer Name
       10       10        ..::IT "Purpose:"
       11       11        .INL +4
       12       12        Obtains the name of the socket at the remote end of a connection.
       13       13        ..::IT "C Usage:"
       14       14        .INL 4
       15       15        .FIF
       16       16        status = getpeername( s, &name, &namelen );
       17       17        ..::IT "PL6 Usage:"
       18       18        .INL 4
       19       19        .FIF
       20       20        CALL XSL$GETPEERNAME( status, s, name, namelen );
       21       21        ..::IT "Parameters:"
       22       22        .INL 4
       23       23        .FIF
       24       24        s           integer socket descriptor
       25       25
       26       26        name        sockaddr structure
       27       27
       28       28        namelen     integer size of name in characters
       29       29        ..::IT "Results:"
       30       30        .INL 4
       31       31        .FIF
       32       32        status      integer error code
       33       33
       34       34        name        sockaddr structure
       35       35
       36       36        namelen     integer number of significant characters in name
       37       37        ..::IT "Description:"
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:2    
       38       38        The getpeername() function obtains the name of the socket at the remote
       39       39        end of a connection with one of the application's sockets.
       40       40        .SPB
       41       41        The s parameter specifies the descriptor of the socket or
       42       42        communication end point.
       43       43        .SPB
       44       44        The name parameter specifies an application-defined buffer to receive
       45       45        the remote socket's name.
       46       46        .SPB
       47       47        The namelen parameter specifies how large the name buffer is, expressed
       48       48        as the number of characters it can hold.
       49       49        .SPB
       50       50        If the getpeername() function is successful, the status result contains
       51       51        ESUCCESS or E$SUCCESS.  The name and namelen parameters are modified to
       52       52        identify the name of the remote socket.
       53       53        .SPB
       54       54        If the getpeername() function is unsuccessful, the status result contains
       55       55        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
       56       56        to determine the specific error condition.  The XSL$GETPEERNAME procedure
       57       57        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
       58       58        to the getpeername() function.
       59       59        ..::IT "Errors:"
       60       60        Following are the possible error conditions reported when the getpeername()
       61       61        function is unsuccessful.  Equates for the possible values can be found in
       62       62        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
       63       63
       64       64        .FIF
       65       65
       66       66        C #define               PL6 %EQU
       67       67        ----------------------- -----------------------
       68       68        EBADF                   E$BADF
       69       69        .FIN
       70       70        The descriptor s is not appropriate to identify a socket.
       71       71        .FIF
       72       72
       73       73        ENOTSOCK                E$NOTSOCK
       74       74        .FIN
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:3    
       75       75        The descriptor s is no longer valid to identify a socket.
       76       76        .FIF
       77       77        */
       78       78        /*F* NAME: getsockname() and XSL$GETSOCKNAME  --  Get Socket Name
       79       79        ..::IT "Purpose:"
       80       80        .INL +4
       81       81        Obtains the name of a socket.
       82       82        ..::IT "C Usage:"
       83       83        .INL 4
       84       84        .FIF
       85       85        status = getsockname( s, &name, &namelen );
       86       86        ..::IT "PL6 Usage:"
       87       87        .INL 4
       88       88        .FIF
       89       89        CALL XSL$GETSOCKNAME( status, s, name, namelen );
       90       90        ..::IT "Parameters:"
       91       91        .INL 4
       92       92        .FIF
       93       93        s           integer socket descriptor
       94       94
       95       95        name        sockaddr structure
       96       96
       97       97        namelen     integer size of name in characters
       98       98        ..::IT "Results:"
       99       99        .INL 4
      100      100        .FIF
      101      101        status      integer error code
      102      102
      103      103        name        sockaddr structure
      104      104
      105      105        namelen     integer number of significant characters in name
      106      106        ..::IT "Description:"
      107      107        The getsockname() function obtains the name of the specified socket.
      108      108        .SPB
      109      109        The name parameter specifies an application-defined buffer to receive
      110      110        the socket's name.
      111      111        .SPB
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:4    
      112      112        The s parameter specifies the descriptor of the socket or
      113      113        communication end point.
      114      114        .SPB
      115      115        The namelen parameter specifies how large the name buffer is, expressed
      116      116        as the number of characters it can hold.
      117      117        .SPB
      118      118        If the getsockname() function is successful, the status result contains
      119      119        ESUCCESS or E$SUCCESS.  The name and namelen parameters are modified to
      120      120        identify the name of the socket.
      121      121        .SPB
      122      122        If the getsockname() function is unsuccessful, the status result contains
      123      123        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      124      124        to determine the specific error condition.  The XSL$GETSOCKNAME procedure
      125      125        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      126      126        to the getsockname() function.
      127      127        ..::IT "Errors:"
      128      128        Following are the possible error conditions reported when the getsockname()
      129      129        function is unsuccessful.  Equates for the possible values can be found in
      130      130        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      131      131
      132      132        .FIF
      133      133
      134      134        C #define               PL6 %EQU
      135      135        ----------------------- -----------------------
      136      136        EBADF                   E$BADF
      137      137        .FIN
      138      138        The descriptor s is not appropriate to identify a socket.
      139      139        .FIF
      140      140
      141      141        ENOTSOCK                E$NOTSOCK
      142      142        .FIN
      143      143        The descriptor s is no longer valid to identify a socket.
      144      144        .FIF
      145      145        */
      146      146        XSL$GETPEERNAME: PROC( RESULT, SOCK#, NAME, NAMELEN) ALTRET;
      147      147        %INCLUDE XSL_SOCKET_E;
      148      405        %INCLUDE XSL_SOCKET_M;
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:5    
      149     1166            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
      150     1206        %INCLUDE XSL_PERR_C;
      151     1261        %INCLUDE XSL_INTERNAL_M;
      152     1512            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( XSL_SOCK$)");
      153     1656        %INCLUDE XSL_SOCKMSGS_E;
      154     1702        %INCLUDE XSL_SOCKMSGS_M;
      155     2835            %XSL$GETPEERNAMERQS( FPTN=XSL_GETPEERNAMERQS, STCLASS="CONSTANT SYMDEF");
      156     2861            %XSL$GETSOCKNAMERQS( FPTN=XSL_GETSOCKNAMERQS, STCLASS="CONSTANT SYMDEF");
      157     2887    1       DCL XSL_KEYBUF CHAR(XSL_ERRNO) SYMREF;
      158     2888            %XSL$GETSOCKNAMERQS( STCLASS=REDEF XSL_KEYBUF);
      159     2914            %XSL$GETSOCKNAMERSP( STCLASS=REDEF XSL_KEYBUF);
      160     2968
      161     2969    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      162     2970    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      163     2971    1       DCL XSL$NTOHADDR ENTRY(2);
      164     2972    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
      165     2973    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
      166     2974
      167     2975    1       DCL XSL_ERRNO SBIN SYMREF;
      168     2976    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      169     2977
      170     2978    1       DCL NAMELEN SBIN;
      171     2979    1       DCL RESULT SBIN;
      172     2980    1       DCL SOCK# SBIN;
      173     2981
      174     2982    1       XSL$GETSOCKNAMERQS = XSL_GETPEERNAMERQS;
      175     2983    1       GOTO COMMONDCBN;
      176     2984
      177     2985    1   XSL$QGETPEERNAME: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;
      178     2986
      179     2987    1       XSL$GETSOCKNAMERQS = XSL_GETPEERNAMERQS;
      180     2988    1       GOTO COMMONSOCK;
      181     2989
      182     2990    1   XSL$GETSOCKNAME: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;
      183     2991
      184     2992    1       XSL$GETSOCKNAMERQS = XSL_GETSOCKNAMERQS;
      185     2993    1   COMMONDCBN:
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:6    
      186     2994    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
      187     2995    1       GOTO COMMON;
      188     2996
      189     2997    1   XSL$QGETSOCKNAME: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;
      190     2998
      191     2999    1       XSL$GETSOCKNAMERQS = XSL_GETSOCKNAMERQS;
      192     3000    1   COMMONSOCK:
      193     3001    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$)
      194     3002    2       WHENALTRETURN DO;
      195     3003    2   BAILOUT:;
      196     3004    2           RESULT = %E$FAILURE;
      197     3005    2           ALTRETURN;
      198     3006    2           END;
      199     3007    1   COMMON:
      200     3008    1       IF XSL$GETSOCKNAMERQS = XSL_GETPEERNAMERQS THEN
      201     3009    1           CALL GETNAME( SOCK.PEERNAME) ALTRET (BAILOUT);
      202     3010    1       ELSE
      203     3011    1           CALL GETNAME( SOCK.SOCKNAME) ALTRET (BAILOUT);
      204     3012    1       RESULT = %E$SUCCESS;
      205     3013    1       RETURN;
      206     3014
      207     3015    1   GETNAME: PROC (SOCKNAME) ALTRET;
      208     3016        %XSL$SOCKADDR( FPTN=SOCKNAME, STCLASS=);
      209     3056
      210     3057    2       XSL$GETSOCKNAMERQS.NAMELEN = NAMELEN;
      211     3058    2       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$GETSOCKNAMERQS));
      212     3059    2       CALL XSL$CL_READ( SOCK);
      213     3060    3       IF XSL$GETSOCKNAMERSP.RESULT < 0 THEN DO;
      214     3061    3           XSL_ERRNO = XSL$GETSOCKNAMERSP.ERRNO;
      215     3062    3           ALTRETURN;
      216     3063    3           END;
      217     3064    2       CALL XSL$NTOHADDR( SOCKNAME, XSL$GETSOCKNAMERSP.NAME);
      218     3065    2       NAME = SOCKNAME;
      219     3066    2       NAMELEN = XSL$GETSOCKNAMERSP.NAMELEN;
      220     3067    2   END GETNAME;
      221     3068
      222     3069    1   END XSL$GETPEERNAME;
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:7    
      223     3070        %EOD;

PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:8    
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$GETPEERNAME.

   Procedure XSL$GETPEERNAME requires 96 words for executable code.
   Procedure XSL$GETPEERNAME requires 12 words of local(AUTO) storage.

PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:9    

 Object Unit name= XSL$GETPEERNAME                            File name= XSL$SOCKET3.:TCA2TOU
 UTS= NOV 16 '97 14:31:57.96 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      2      2  XSL$GETPEERNAME
    1   Proc  even  none    96    140  XSL$GETPEERNAME
    2  RoData even  none     3      3  XSL$GETPEERNAME

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  XSL$GETPEERNAME
     1      5          yes     yes      Std        4  XSL$QGETPEERNAME
     1     12          yes     yes      Std        4  XSL$GETSOCKNAME
     1     26          yes     yes      Std        4  XSL$QGETSOCKNAME

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  XSL_GETPEERNAMERQS                 0      1  XSL_GETSOCKNAMERQS
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:10   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSL$DCBNPTR
 yes     yes           Std       2 XSL$SOCKPTR
 yes     yes           Std       4 XSL$CL_WRITE
         yes           Std       2 XSL$NTOHADDR
 yes     yes           Std       3 XSL$CL_READ
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSL_KEYBUF                            XSL_ERRNO                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:11   


        1        1        /*M*    XSL$SOCKET3             BSD4.3 Socket Library for CP-6, part 3  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,DCI=8,DTI=0,ENI=4,ECI=4,CSI=4,DIN=4,SDI=0 */
        8        8
        9        9        /*F* NAME: getpeername() and XSL$GETPEERNAME  --  Get Socket Peer Name
       10       10        ..::IT "Purpose:"
       11       11        .INL +4
       12       12        Obtains the name of the socket at the remote end of a connection.
       13       13        ..::IT "C Usage:"
       14       14        .INL 4
       15       15        .FIF
       16       16        status = getpeername( s, &name, &namelen );
       17       17        ..::IT "PL6 Usage:"
       18       18        .INL 4
       19       19        .FIF
       20       20        CALL XSL$GETPEERNAME( status, s, name, namelen );
       21       21        ..::IT "Parameters:"
       22       22        .INL 4
       23       23        .FIF
       24       24        s           integer socket descriptor
       25       25
       26       26        name        sockaddr structure
       27       27
       28       28        namelen     integer size of name in characters
       29       29        ..::IT "Results:"
       30       30        .INL 4
       31       31        .FIF
       32       32        status      integer error code
       33       33
       34       34        name        sockaddr structure
       35       35
       36       36        namelen     integer number of significant characters in name
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:12   
       37       37        ..::IT "Description:"
       38       38        The getpeername() function obtains the name of the socket at the remote
       39       39        end of a connection with one of the application's sockets.
       40       40        .SPB
       41       41        The s parameter specifies the descriptor of the socket or
       42       42        communication end point.
       43       43        .SPB
       44       44        The name parameter specifies an application-defined buffer to receive
       45       45        the remote socket's name.
       46       46        .SPB
       47       47        The namelen parameter specifies how large the name buffer is, expressed
       48       48        as the number of characters it can hold.
       49       49        .SPB
       50       50        If the getpeername() function is successful, the status result contains
       51       51        ESUCCESS or E$SUCCESS.  The name and namelen parameters are modified to
       52       52        identify the name of the remote socket.
       53       53        .SPB
       54       54        If the getpeername() function is unsuccessful, the status result contains
       55       55        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
       56       56        to determine the specific error condition.  The XSL$GETPEERNAME procedure
       57       57        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
       58       58        to the getpeername() function.
       59       59        ..::IT "Errors:"
       60       60        Following are the possible error conditions reported when the getpeername()
       61       61        function is unsuccessful.  Equates for the possible values can be found in
       62       62        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
       63       63
       64       64        .FIF
       65       65
       66       66        C #define               PL6 %EQU
       67       67        ----------------------- -----------------------
       68       68        EBADF                   E$BADF
       69       69        .FIN
       70       70        The descriptor s is not appropriate to identify a socket.
       71       71        .FIF
       72       72
       73       73        ENOTSOCK                E$NOTSOCK
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:13   
       74       74        .FIN
       75       75        The descriptor s is no longer valid to identify a socket.
       76       76        .FIF
       77       77        */
       78       78        /*F* NAME: getsockname() and XSL$GETSOCKNAME  --  Get Socket Name
       79       79        ..::IT "Purpose:"
       80       80        .INL +4
       81       81        Obtains the name of a socket.
       82       82        ..::IT "C Usage:"
       83       83        .INL 4
       84       84        .FIF
       85       85        status = getsockname( s, &name, &namelen );
       86       86        ..::IT "PL6 Usage:"
       87       87        .INL 4
       88       88        .FIF
       89       89        CALL XSL$GETSOCKNAME( status, s, name, namelen );
       90       90        ..::IT "Parameters:"
       91       91        .INL 4
       92       92        .FIF
       93       93        s           integer socket descriptor
       94       94
       95       95        name        sockaddr structure
       96       96
       97       97        namelen     integer size of name in characters
       98       98        ..::IT "Results:"
       99       99        .INL 4
      100      100        .FIF
      101      101        status      integer error code
      102      102
      103      103        name        sockaddr structure
      104      104
      105      105        namelen     integer number of significant characters in name
      106      106        ..::IT "Description:"
      107      107        The getsockname() function obtains the name of the specified socket.
      108      108        .SPB
      109      109        The name parameter specifies an application-defined buffer to receive
      110      110        the socket's name.
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:14   
      111      111        .SPB
      112      112        The s parameter specifies the descriptor of the socket or
      113      113        communication end point.
      114      114        .SPB
      115      115        The namelen parameter specifies how large the name buffer is, expressed
      116      116        as the number of characters it can hold.
      117      117        .SPB
      118      118        If the getsockname() function is successful, the status result contains
      119      119        ESUCCESS or E$SUCCESS.  The name and namelen parameters are modified to
      120      120        identify the name of the socket.
      121      121        .SPB
      122      122        If the getsockname() function is unsuccessful, the status result contains
      123      123        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      124      124        to determine the specific error condition.  The XSL$GETSOCKNAME procedure
      125      125        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      126      126        to the getsockname() function.
      127      127        ..::IT "Errors:"
      128      128        Following are the possible error conditions reported when the getsockname()
      129      129        function is unsuccessful.  Equates for the possible values can be found in
      130      130        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      131      131
      132      132        .FIF
      133      133
      134      134        C #define               PL6 %EQU
      135      135        ----------------------- -----------------------
      136      136        EBADF                   E$BADF
      137      137        .FIN
      138      138        The descriptor s is not appropriate to identify a socket.
      139      139        .FIF
      140      140
      141      141        ENOTSOCK                E$NOTSOCK
      142      142        .FIN
      143      143        The descriptor s is no longer valid to identify a socket.
      144      144        .FIF
      145      145        */
      146      146        XSL$GETPEERNAME: PROC( RESULT, SOCK#, NAME, NAMELEN) ALTRET;

PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:15   
    146  1 000000   000000 700200 xent  XSL$GETPEER* TSX0  ! X66_AUTO_4
         1 000001   000014 000004                    ZERO    12,4

      147      147        %INCLUDE XSL_SOCKET_E;
      148      405        %INCLUDE XSL_SOCKET_M;
      149     1166            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
      150     1206        %INCLUDE XSL_PERR_C;
      151     1261        %INCLUDE XSL_INTERNAL_M;
      152     1512            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( XSL_SOCK$)");
      153     1656        %INCLUDE XSL_SOCKMSGS_E;
      154     1702        %INCLUDE XSL_SOCKMSGS_M;
      155     2835            %XSL$GETPEERNAMERQS( FPTN=XSL_GETPEERNAMERQS, STCLASS="CONSTANT SYMDEF");
      156     2861            %XSL$GETSOCKNAMERQS( FPTN=XSL_GETSOCKNAMERQS, STCLASS="CONSTANT SYMDEF");
      157     2887    1       DCL XSL_KEYBUF CHAR(XSL_ERRNO) SYMREF;
      158     2888            %XSL$GETSOCKNAMERQS( STCLASS=REDEF XSL_KEYBUF);
      159     2914            %XSL$GETSOCKNAMERSP( STCLASS=REDEF XSL_KEYBUF);
      160     2968
      161     2969    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      162     2970    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      163     2971    1       DCL XSL$NTOHADDR ENTRY(2);
      164     2972    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
      165     2973    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
      166     2974
      167     2975    1       DCL XSL_ERRNO SBIN SYMREF;
      168     2976    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      169     2977
      170     2978    1       DCL NAMELEN SBIN;
      171     2979    1       DCL RESULT SBIN;
      172     2980    1       DCL SOCK# SBIN;
      173     2981
      174     2982    1       XSL$GETSOCKNAMERQS = XSL_GETPEERNAMERQS;

   2982  1 000002   000000 236000 0                  LDQ     XSL_GETPEERNAMERQS
         1 000003   000000 756000 xsym               STQ     XSL_KEYBUF

      175     2983    1       GOTO COMMONDCBN;

PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:16   
   2983  1 000004   000016 710000 1                  TRA     COMMONDCBN

      176     2984
      177     2985    1   XSL$QGETPEERNAME: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;

   2985  1 000005   000000 700200 xent  XSL$QGETPEE* TSX0  ! X66_AUTO_4
         1 000006   000014 000004                    ZERO    12,4

      178     2986
      179     2987    1       XSL$GETSOCKNAMERQS = XSL_GETPEERNAMERQS;

   2987  1 000007   000000 236000 0                  LDQ     XSL_GETPEERNAMERQS
         1 000010   000000 756000 xsym               STQ     XSL_KEYBUF

      180     2988    1       GOTO COMMONSOCK;

   2988  1 000011   000032 710000 1                  TRA     COMMONSOCK

      181     2989
      182     2990    1   XSL$GETSOCKNAME: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;

   2990  1 000012   000000 700200 xent  XSL$GETSOCK* TSX0  ! X66_AUTO_4
         1 000013   000014 000004                    ZERO    12,4

      183     2991
      184     2992    1       XSL$GETSOCKNAMERQS = XSL_GETSOCKNAMERQS;

   2992  1 000014   000001 236000 0                  LDQ     XSL_GETSOCKNAMERQS
         1 000015   000000 756000 xsym               STQ     XSL_KEYBUF

      185     2993    1   COMMONDCBN:
      186     2994    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);

   2994  1 000016   000000 236000 2     COMMONDCBN   LDQ     0
         1 000017   200004 235100                    LDA     @SOCK#,,AUTO
         1 000020   200012 757100                    STAQ    @SOCKNAME+1,,AUTO
         1 000021   200012 630500                    EPPR0   @SOCKNAME+1,,AUTO
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:17   
         1 000022   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000023   000000 701000 xent               TSX1    XSL$DCBNPTR
         1 000024   000042 702000 1                  TSX2    BAILOUT

      187     2995    1       GOTO COMMON;

   2995  1 000025   000046 710000 1                  TRA     COMMON

      188     2996
      189     2997    1   XSL$QGETSOCKNAME: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;

   2997  1 000026   000000 700200 xent  XSL$QGETSOC* TSX0  ! X66_AUTO_4
         1 000027   000014 000004                    ZERO    12,4

      190     2998
      191     2999    1       XSL$GETSOCKNAMERQS = XSL_GETSOCKNAMERQS;

   2999  1 000030   000001 236000 0                  LDQ     XSL_GETSOCKNAMERQS
         1 000031   000000 756000 xsym               STQ     XSL_KEYBUF

      192     3000    1   COMMONSOCK:
      193     3001    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$)

   3001  1 000032   000000 236000 2     COMMONSOCK   LDQ     0
         1 000033   200004 235100                    LDA     @SOCK#,,AUTO
         1 000034   200012 757100                    STAQ    @SOCKNAME+1,,AUTO
         1 000035   200012 630500                    EPPR0   @SOCKNAME+1,,AUTO
         1 000036   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000037   000000 701000 xent               TSX1    XSL$SOCKPTR
         1 000040   000042 702000 1                  TSX2    BAILOUT
         1 000041   000046 710000 1                  TRA     COMMON

      194     3002    2       WHENALTRETURN DO;

      195     3003    2   BAILOUT:;

   3003  1 000042                       BAILOUT      null
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:18   
      196     3004    2           RESULT = %E$FAILURE;

   3004  1 000042   000001 335007                    LCA     1,DL
         1 000043   200003 470500                    LDP0    @RESULT,,AUTO
         1 000044   000000 755100                    STA     0,,PR0

      197     3005    2           ALTRETURN;

   3005  1 000045   000000 702200 xent               TSX2  ! X66_AALT

      198     3006    2           END;
      199     3007    1   COMMON:
      200     3008    1       IF XSL$GETSOCKNAMERQS = XSL_GETPEERNAMERQS THEN

   3008  1 000046   000000 236000 xsym  COMMON       LDQ     XSL_KEYBUF
         1 000047   000000 116000 0                  CMPQ    XSL_GETPEERNAMERQS
         1 000050   000057 601000 1                  TNZ     s:3011

      201     3009    1           CALL GETNAME( SOCK.PEERNAME) ALTRET (BAILOUT);

   3009  1 000051   000000 236000 xsym               LDQ     XSL_ERRNO
         1 000052   000011 036003                    ADLQ    9,DU
         1 000053   200011 756100                    STQ     @NAMELEN+3,,AUTO
         1 000054   000067 701000 1                  TSX1    GETNAME
         1 000055   000042 702000 1                  TSX2    BAILOUT
         1 000056   000064 710000 1                  TRA     s:3012

      202     3010    1       ELSE
      203     3011    1           CALL GETNAME( SOCK.SOCKNAME) ALTRET (BAILOUT);

   3011  1 000057   000000 236000 xsym               LDQ     XSL_ERRNO
         1 000060   000004 036003                    ADLQ    4,DU
         1 000061   200011 756100                    STQ     @NAMELEN+3,,AUTO
         1 000062   000067 701000 1                  TSX1    GETNAME
         1 000063   000042 702000 1                  TSX2    BAILOUT

      204     3012    1       RESULT = %E$SUCCESS;
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:19   

   3012  1 000064   200003 470500                    LDP0    @RESULT,,AUTO
         1 000065   000000 450100                    STZ     0,,PR0

      205     3013    1       RETURN;

   3013  1 000066   000000 702200 xent               TSX2  ! X66_ARET

      206     3014
      207     3015    1   GETNAME: PROC (SOCKNAME) ALTRET;

   3015  1 000067   200010 741300       GETNAME      STX1  ! @NAMELEN+2,,AUTO

      208     3016        %XSL$SOCKADDR( FPTN=SOCKNAME, STCLASS=);
      209     3056
      210     3057    2       XSL$GETSOCKNAMERQS.NAMELEN = NAMELEN;

   3057  1 000070   200006 470500                    LDP0    @NAMELEN,,AUTO
         1 000071   000000 720100                    LXL0    0,,PR0
         1 000072   000000 440000 xsym               SXL0    XSL_KEYBUF

      211     3058    2       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$GETSOCKNAMERQS));

   3058  1 000073   000001 236000 2                  LDQ     1
         1 000074   000000 235000 xsym               LDA     XSL_ERRNO
         1 000075   200012 757100                    STAQ    @SOCKNAME+1,,AUTO
         1 000076   200012 630500                    EPPR0   @SOCKNAME+1,,AUTO
         1 000077   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000100   000000 701000 xent               TSX1    XSL$CL_WRITE
         1 000101   000000 011000                    NOP     0

      212     3059    2       CALL XSL$CL_READ( SOCK);

   3059  1 000102   000000 630400 xsym               EPPR0   XSL_ERRNO
         1 000103   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000104   000000 701000 xent               TSX1    XSL$CL_READ
         1 000105   000000 011000                    NOP     0
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:20   

      213     3060    3       IF XSL$GETSOCKNAMERSP.RESULT < 0 THEN DO;

   3060  1 000106   000000 720000 xsym               LXL0    XSL_KEYBUF
         1 000107   000115 605000 1                  TPL     s:3064

      214     3061    3           XSL_ERRNO = XSL$GETSOCKNAMERSP.ERRNO;

   3061  1 000110   000001 235000 xsym               LDA     XSL_KEYBUF+1
         1 000111   000022 731000                    ARS     18
         1 000112   000000 755000 xsym               STA     XSL_ERRNO

      215     3062    3           ALTRETURN;

   3062  1 000113   200010 221300                    LDX1  ! @NAMELEN+2,,AUTO
         1 000114   000000 702211                    TSX2  ! 0,X1

      216     3063    3           END;
      217     3064    2       CALL XSL$NTOHADDR( SOCKNAME, XSL$GETSOCKNAMERSP.NAME);

   3064  1 000115   000002 236000 2                  LDQ     2
         1 000116   200011 235100                    LDA     @SOCKNAME,,AUTO
         1 000117   200012 757100                    STAQ    @SOCKNAME+1,,AUTO
         1 000120   200012 630500                    EPPR0   @SOCKNAME+1,,AUTO
         1 000121   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000122   000000 701000 xent               TSX1    XSL$NTOHADDR
         1 000123   000000 011000                    NOP     0

      218     3065    2       NAME = SOCKNAME;

   3065  1 000124   200011 470500                    LDP0    @SOCKNAME,,AUTO
         1 000125   200005 471500                    LDP1    @NAME,,AUTO
         1 000126   000100 100500                    MLR     fill='000'O
         1 000127   000000 000024                    ADSC9   0,,PR0                   cn=0,n=20
         1 000130   100000 000024                    ADSC9   0,,PR1                   cn=0,n=20

      219     3066    2       NAMELEN = XSL$GETSOCKNAMERSP.NAMELEN;
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:21   

   3066  1 000131   000001 236000 xsym               LDQ     XSL_KEYBUF+1
         1 000132   000022 736000                    QLS     18
         1 000133   000022 732000                    QRS     18
         1 000134   200006 473500                    LDP3    @NAMELEN,,AUTO
         1 000135   300000 756100                    STQ     0,,PR3

      220     3067    2   END GETNAME;

   3067  1 000136   200010 221300                    LDX1  ! @NAMELEN+2,,AUTO
         1 000137   000001 702211                    TSX2  ! 1,X1

XSL_GETPEERNAMERQS
 Sect OctLoc
   0     000   000037 000000                                                    ....

XSL_GETSOCKNAMERQS
 Sect OctLoc
   0     001   000035 000000                                                    ....

(unnamed)
 Sect OctLoc
   2     000   000000 006000   000006 006000   000002 006000                    ............
      221     3068
      222     3069    1   END XSL$GETPEERNAME;
      223     3070        %EOD;

PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:22   
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$GETPEERNAME.
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:23   

 **** Variables and constants ****

  ****  Section 000 RoData XSL$GETPEERNAME

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 XSL_GETPEERNAMERQS         1-0-0/w STRC        r     1 XSL_GETSOCKNAMERQS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @NAME                      6-0-0/w PTR         r     1 @NAMELEN
     3-0-0/w PTR         r     1 @RESULT                    4-0-0/w PTR         r     1 @SOCK#
    11-0-0/w PTR         r     1 @SOCKNAME                 *0-0-0/w STRC(180)   r     1 NAME
    *0-0-0/w SBIN        r     1 NAMELEN                   *0-0-0/w SBIN        r     1 RESULT
    *0-0-0/w SBIN        r     1 SOCK#                     *0-0-0/w STRC(180)   r     1 SOCKNAME

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 XSL$GETSOCKNAMERQS         0-0-0/w STRC(216)   r     1 XSL$GETSOCKNAMERSP
     0-0-0/w SBIN        r     1 XSL_ERRNO                  0-0-0/w ACHR        r     1 XSL_KEYBUF
     0-0-0/w PTR         r     1 XSL_SOCK$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 SOCK

PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:24   

   Procedure XSL$GETPEERNAME requires 96 words for executable code.
   Procedure XSL$GETPEERNAME requires 12 words of local(AUTO) storage.
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:25   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:26   
          MINI XREF LISTING

BAILOUT
      3003**LABEL    2994--CALLALT  3009--CALLALT  3011--CALLALT
COMMON
      3008**LABEL    2995--GOTO
COMMONDCBN
      2994**LABEL    2983--GOTO
COMMONSOCK
      3001**LABEL    2988--GOTO
GETNAME
      3015**PROC     3009--CALL     3011--CALL
NAME
      1183**DCL       146--PROC     2985--ENTRY    2990--ENTRY    2997--ENTRY    3065<<ASSIGN
NAMELEN
      2978**DCL       146--PROC     2985--ENTRY    2990--ENTRY    2997--ENTRY    3057>>ASSIGN   3066<<ASSIGN
RESULT
      2979**DCL       146--PROC     2985--ENTRY    2990--ENTRY    2997--ENTRY    3004<<ASSIGN   3012<<ASSIGN
SOCK
      1530**DCL      3058<>CALL     3059<>CALL
SOCK.NBACCEPT_SOCK$
      1652**DCL      1653--REDEF
SOCK.PEERNAME
      1623**DCL      3009<>CALL
SOCK.SOCKNAME
      1583**DCL      3011<>CALL
SOCK#
      2980**DCL       146--PROC     2985--ENTRY    2990--ENTRY    2994<>CALL     2997--ENTRY    3001<>CALL
SOCKNAME IN PROCEDURE GETNAME
      3033**DCL      3015--PROC     3064<>CALL     3065>>ASSIGN
XSL$CL_READ
      2969**DCL-ENT  3059--CALL
XSL$CL_WRITE
      2970**DCL-ENT  3058--CALL
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:27   
XSL$DCBNPTR
      2973**DCL-ENT  2994--CALL
XSL$GETSOCKNAMERQS
      2905**DCL      2982<<ASSIGN   2987<<ASSIGN   2992<<ASSIGN   2999<<ASSIGN   3008>>IF       3058--CALL
XSL$GETSOCKNAMERQS.NAMELEN
      2912**DCL      3057<<ASSIGN
XSL$GETSOCKNAMERSP.ERRNO
      2939**DCL      3061>>ASSIGN
XSL$GETSOCKNAMERSP.NAME
      2960**DCL      3064<>CALL
XSL$GETSOCKNAMERSP.NAMELEN
      2940**DCL      3066>>ASSIGN
XSL$GETSOCKNAMERSP.RESULT
      2938**DCL      3060>>IF
XSL$NTOHADDR
      2971**DCL-ENT  3064--CALL
XSL$SOCKPTR
      2972**DCL-ENT  3001--CALL
XSL_ERRNO
      2975**DCL      2887--IMP-SIZ  2976--REDEF    3061<<ASSIGN
XSL_GETPEERNAMERQS
      2852**DCL      2982>>ASSIGN   2987>>ASSIGN   3008>>IF
XSL_GETSOCKNAMERQS
      2878**DCL      2992>>ASSIGN   2999>>ASSIGN
XSL_KEYBUF
      2887**DCL      2905--REDEF    2931--REDEF
XSL_SOCK$
      2976**DCL      1530--IMP-PTR  2994<>CALL     3001<>CALL     3009>>CALL     3011>>CALL     3058>>CALL
      3059>>CALL
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:28   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XSL$GETPEERNAME File=XSL$SOCKET3.:TCA2TSI                     SUN 11/16/97 14:31 Page:29   
              MINI UREF LISTING

XSL$GETPEERNAME     146**PROC
XSL$GETSOCKNAME    2990**ENTRY
XSL$QGETPEERNAME    2985**ENTRY
XSL$QGETSOCKNAME    2997**ENTRY

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:30   
      224        1        /*T***********************************************************/
      225        2        /*T*                                                         */
      226        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      227        4        /*T*                                                         */
      228        5        /*T***********************************************************/
      229        6        /*F* NAME: getsockopt() and XSL$GETSOCKOPT  --  Get Socket Option
      230        7        ..::IT "Purpose:"
      231        8        .INL +4
      232        9        Obtains the current setting of an option at one of the internal protocol
      233       10        levels supporting a socket.
      234       11        ..::IT "C Usage:"
      235       12        .INL 4
      236       13        .FIF
      237       14        status = getsockopt( s, level, optname, &optval, &optlen );
      238       15        ..::IT "PL6 Usage:"
      239       16        .INL 4
      240       17        .FIF
      241       18        CALL XSL$GETSOCKOPT( status, s, level, optname, optval, optlen );
      242       19        ..::IT "Parameters:"
      243       20        .INL 4
      244       21        .FIF
      245       22        s           integer socket descriptor
      246       23
      247       24        level       integer protocol number
      248       25
      249       26        optname     integer option name
      250       27
      251       28        optval      character array buffer for option value
      252       29
      253       30        optlen      integer size of optval in characters
      254       31        ..::IT "Results:"
      255       32        .INL 4
      256       33        .FIF
      257       34        status      integer error code
      258       35
      259       36        optval      current option value
      260       37
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:31   
      261       38        optlen      integer number of significant characters in optval
      262       39        ..::IT "Description:"
      263       40        The getsockopt() function obtains the current setting of any option at
      264       41        any internal protocol level supporting an existing socket.
      265       42        .SPB
      266       43        The s parameter specifies the descriptor of the socket of interest.
      267       44        .SPB
      268       45        The level parameter specifies the protocol level managing the option
      269       46        of interest.  "Socket" level is specified by coding SOL_SOCKET or
      270       47        %XSL_SOL_SOCKET in C or PL6 source, respectively.  Other levels are
      271       48        specified by using a protocol number from the include files <xsl_socket.h>
      272       49        or XSL_SOCKET_E, respectively.  "Socket" is the only level implemented
      273       50        at this time.
      274       51        .SPB
      275       52        The optname parameter specifies the option of interest.  For "socket"
      276       53        level this is coded using one of the SO_ #defines or %XSL_SO_ equates
      277       54        which are defined in the include file <xsl_socket.h> or XSL_SOCKET_E.
      278       55        These options are listed in the following table.
      279       56        .trf ]%
      280       57        ..::TB "^\C #define\#8\PL6 ]EQU\#15\Meaning\#"
      281       58        .trf ]]
      282       59        .xeq XSL_SOCKET_E SO_E SO_ACCEPTCONN
      283       60        .xeq XSL_SOCKET_E SO_E SO_BLOCKING
      284       61        .xeq XSL_SOCKET_E SO_E SO_BROADCAST
      285       62        .xeq XSL_SOCKET_E SO_E SO_DEBUG
      286       63        .xeq XSL_SOCKET_E SO_E SO_DONTROUTE
      287       64        .xeq XSL_SOCKET_E SO_E SO_ERROR
      288       65        .xeq XSL_SOCKET_E SO_E SO_IMASOCKET
      289       66        .xeq XSL_SOCKET_E SO_E SO_KEEPALIVE
      290       67        .xeq XSL_SOCKET_E SO_E SO_LINGER
      291       68        .xeq XSL_SOCKET_E SO_E SO_NWREADS
      292       69        .xeq XSL_SOCKET_E SO_E SO_NWBUFFS
      293       70        .xeq XSL_SOCKET_E SO_E SO_OOBINLINE
      294       71        .xeq XSL_SOCKET_E SO_E SO_ORDREL
      295       72        .xeq XSL_SOCKET_E SO_E SO_RCVBUF
      296       73        .xeq XSL_SOCKET_E SO_E SO_RCVLOWAT
      297       74        .xeq XSL_SOCKET_E SO_E SO_RCVTIMEO
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:32   
      298       75        .xeq XSL_SOCKET_E SO_E SO_REUSEADDR
      299       76        .xeq XSL_SOCKET_E SO_E SO_SNDBUF
      300       77        .xeq XSL_SOCKET_E SO_E SO_SNDLOWAT
      301       78        .xeq XSL_SOCKET_E SO_E SO_SNDTIMEO
      302       79        .xeq XSL_SOCKET_E SO_E SO_TYPE
      303       80        .xeq XSL_SOCKET_E SO_E SO_USELOOPBACK
      304       81        ..::TB
      305       82        .SPB
      306       83        The optval parameter specifies an application-defined buffer to receive
      307       84        the current setting of the option.
      308       85        .SPB
      309       86        The optlen parameter specifies how large the optval buffer is, expressed
      310       87        as the number of characters it can hold.
      311       88        .SPB
      312       89        If the getsockopt() function is successful, the status result contains
      313       90        ESUCCESS or E$SUCCESS.  The optval and optlen parameters are modified
      314       91        to contain the current value of the selected option.
      315       92        .SPB
      316       93        If the getsockopt() function is unsuccessful, the status result contains
      317       94        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      318       95        to determine the specific error condition.  The XSL$GETSOCKOPT procedure
      319       96        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      320       97        to the getsockopt() function.
      321       98        .SPB
      322       99        If level is SOL_SOCKET and optname is one of SO_NWBUFFS, SO_NWREADS,
      323      100        SO_OOBINLINE, or SO_TYPE, the Socket Library provides the result.  For
      324      101        any other combination of level and optname, the socket must already be
      325      102        bound to a FEP and the result is provided by that FEP.
      326      103        ..::IT "Errors:"
      327      104        Following are the possible error conditions reported when the getsockopt()
      328      105        function is unsuccessful.  Equates for the possible values can be found in
      329      106        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      330      107
      331      108        .FIF
      332      109
      333      110        C #define               PL6 %EQU
      334      111        ----------------------- -----------------------
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:33   
      335      112        EBADF                   E$BADF
      336      113        .FIN
      337      114        The descriptor s is not appropriate to identify a socket.
      338      115        .FIF
      339      116
      340      117        ENOPROTOOPT             E$NOPROTOOPT
      341      118        .FIN
      342      119        The option specified in optname is not recognized by protocol level.
      343      120        .FIF
      344      121
      345      122        ENOTBOUND               E$NOTBOUND
      346      123        .FIN
      347      124        Socket is not bound to a FEP.
      348      125        .FIF
      349      126
      350      127        ENOTSOCK                E$NOTSOCK
      351      128        .FIN
      352      129        The descriptor s is no longer valid to identify a socket.
      353      130        .FIF
      354      131        */
      355      132        /*F* NAME: setsockopt() and XSL$SETSOCKOPT  --  Set Socket Option
      356      133        ..::IT "Purpose:"
      357      134        .INL +4
      358      135        Modifies the current setting of an option at one of the internal protocol
      359      136        levels supporting a socket.
      360      137        ..::IT "C Usage:"
      361      138        .INL 4
      362      139        .FIF
      363      140        status = setsockopt( s, level, optname, &optval, optlen );
      364      141        ..::IT "PL6 Usage:"
      365      142        .INL 4
      366      143        .FIF
      367      144        CALL XSL$SETSOCKOPT( status, s, level, optname, optval, optlen );
      368      145        ..::IT "Parameters:"
      369      146        .INL 4
      370      147        .FIF
      371      148        s           integer socket descriptor
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:34   
      372      149
      373      150        level       integer protocol number
      374      151
      375      152        optname     integer option name
      376      153
      377      154        optval      address of option value
      378      155
      379      156        optlen      integer number of significant characters in optval
      380      157        ..::IT "Result:"
      381      158        .INL 4
      382      159        .FIF
      383      160        status      integer error code
      384      161        ..::IT "Description:"
      385      162        The setsockopt() function modifies the current setting of any option at
      386      163        any internal protocol level supporting an existing socket.
      387      164        .SPB
      388      165        The s parameter specifies the descriptor of the socket of interest.
      389      166        .SPB
      390      167        The level parameter specifies the protocol level managing the option
      391      168        of interest.  "Socket" level is specified by coding SOL_SOCKET or
      392      169        %XSL_SOL_SOCKET in C or PL6 source, respectively.  Other levels are
      393      170        specified by using a protocol number from the include files <xsl_socket.h>
      394      171        or XSL_SOCKET_E, respectively.
      395      172        .SPB
      396      173        The optname parameter specifies the option of interest.  For "socket"
      397      174        level this is coded using one of the SO_ #defines or %XSL_SO_ equates
      398      175        which are defined in the include file <xsl_socket.h> or XSL_SOCKET_E.
      399      176        These options are listed in the following table.
      400      177        .trf ]%
      401      178        ..::TB "^\C #define\#8\PL6 ]EQU\#15\Meaning\#"
      402      179        .trf ]]
      403      180        .xeq XSL_SOCKET_E SO_E SO_ACCEPTCONN
      404      181        .xeq XSL_SOCKET_E SO_E SO_BLOCKING
      405      182        .xeq XSL_SOCKET_E SO_E SO_BROADCAST
      406      183        .xeq XSL_SOCKET_E SO_E SO_DEBUG
      407      184        .xeq XSL_SOCKET_E SO_E SO_DONTROUTE
      408      185        .xeq XSL_SOCKET_E SO_E SO_ERROR
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:35   
      409      186        .xeq XSL_SOCKET_E SO_E SO_IMASOCKET
      410      187        .xeq XSL_SOCKET_E SO_E SO_KEEPALIVE
      411      188        .xeq XSL_SOCKET_E SO_E SO_LINGER
      412      189        .xeq XSL_SOCKET_E SO_E SO_NWREADS
      413      190        .xeq XSL_SOCKET_E SO_E SO_NWBUFFS
      414      191        .xeq XSL_SOCKET_E SO_E SO_OOBINLINE
      415      192        .xeq XSL_SOCKET_E SO_E SO_ORDREL
      416      193        .xeq XSL_SOCKET_E SO_E SO_RCVBUF
      417      194        .xeq XSL_SOCKET_E SO_E SO_RCVLOWAT
      418      195        .xeq XSL_SOCKET_E SO_E SO_RCVTIMEO
      419      196        .xeq XSL_SOCKET_E SO_E SO_REUSEADDR
      420      197        .xeq XSL_SOCKET_E SO_E SO_SNDBUF
      421      198        .xeq XSL_SOCKET_E SO_E SO_SNDLOWAT
      422      199        .xeq XSL_SOCKET_E SO_E SO_SNDTIMEO
      423      200        .xeq XSL_SOCKET_E SO_E SO_TYPE
      424      201        .xeq XSL_SOCKET_E SO_E SO_USELOOPBACK
      425      202        ..::TB
      426      203        .SPB
      427      204        The optval parameter specifies an application-defined buffer containing
      428      205        the new setting of the option.
      429      206        .SPB
      430      207        The optlen parameter specifies the number of significant characters in optval.
      431      208        .SPB
      432      209        If the setsockopt() function is successful, the status result contains
      433      210        ESUCCESS or E$SUCCESS.
      434      211        .SPB
      435      212        If the setsockopt() function is unsuccessful, the status result contains
      436      213        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      437      214        to determine the specific error condition.  The XSL$SETSOCKOPT procedure
      438      215        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      439      216        to the setsockopt() function.
      440      217        .SPB
      441      218        If the socket is not bound to a FEP, only level SOL_SOCKET and optname
      442      219        SO_REUSEADDR can be specified.  If the socket is bound to a FEP, then
      443      220        level SOL_SOCKET and optnames SO_NWBUFFS, SO_NWREADS, and SO_OOBINLINE
      444      221        are processed by the Socket Library; all other combinations of level
      445      222        and optname are processed by the FEP.
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:36   
      446      223        ..::IT "Errors:"
      447      224        Following are the possible error conditions reported when the setsockopt()
      448      225        function is unsuccessful.  Equates for the possible values can be found in
      449      226        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      450      227
      451      228        .FIF
      452      229
      453      230        C #define               PL6 %EQU
      454      231        ----------------------- -----------------------
      455      232        EBADF                   E$BADF
      456      233        .FIN
      457      234        The descriptor s is not appropriate to identify a socket.
      458      235        .FIF
      459      236
      460      237        ENOPROTOOPT             E$NOPROTOOPT
      461      238        .FIN
      462      239        The option specified in optname is not recognized by protocol level.
      463      240        .FIF
      464      241
      465      242        ENOTBOUND               E$NOTBOUND
      466      243        .FIN
      467      244        Socket is not bound to a FEP.
      468      245        .FIF
      469      246
      470      247        ENOTSOCK                E$NOTSOCK
      471      248        .FIN
      472      249        The descriptor s is no longer valid to identify a socket.
      473      250        .FIF
      474      251        */
      475      252        /*F* NAME: fcntl() and XSL$FCNTL  --  File Control
      476      253        ..::IT "Purpose:"
      477      254        .INL +4
      478      255        Sets or obtains file control information for a file descriptor.
      479      256        ..::IT "C Usage:"
      480      257        .INL 4
      481      258        .FIF
      482      259        status = fcntl( f, cmd, flags );
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:37   
      483      260        ..::IT "PL6 Usage:"
      484      261        .INL 4
      485      262        .FIF
      486      263        CALL XSL$FCNTL( status, f, cmd, flags );
      487      264        ..::IT "Parameters:"
      488      265        .INL 4
      489      266        .FIF
      490      267        f           integer file descriptor
      491      268
      492      269        cmd         integer command code
      493      270
      494      271        flags       sum of integer command flags
      495      272        ..::IT "Result:"
      496      273        .INL 4
      497      274        .FIF
      498      275        status      integer current setting or error code
      499      276        ..::IT "Description:"
      500      277        The fcntl() function provides a subset of the corresponding function
      501      278        available on other systems.  On CP-6 systems, it is used only to set
      502      279        the mode of a socket to "nonblocking", or to get the current
      503      280        setting of the mode.
      504      281        .FIF
      505      282        ..::IX "non-blocking"
      506      283        .SPB
      507      284        The f parameter specifies the descriptor of the socket whose mode is
      508      285        to be queried or modified.
      509      286        .SPB
      510      287        The cmd parameter specifies the command to be issued.  Equates for the
      511      288        possible values can be found in <fcntl.h> or XSL_SOCKET_E. Only the
      512      289        "get status flags" and "set status flags" commands are currently
      513      290        supported.  "Get status flags" is selected by coding F_GETFL or %XSL_F_GETFL
      514      291        in C or PL6 source, respectively.  "Set status flags" is selected by coding
      515      292        F_SETFL or %XSL_F_SETFL in C or PL6 source, respectively.
      516      293        .SPB
      517      294        The flags parameter specifies the particular flags to be queried or modified.
      518      295        Equates for the possible values can be found in <fcntl.h> or XSL_SOCKET_E.
      519      296        Only the "ndelay" flag is currently supported.  This is selected by coding
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:38   
      520      297        O_NDELAY or %XSL_O_NDELAY in C or PL6 source, respectively.
      521      298        .SPB
      522      299        If the fcntl() function is successful, the status result depends on the
      523      300        command issued.  If the command is "get status flags", status contains
      524      301        the value of the select status flags.  If the command is "set status flags",
      525      302        status contains ESUCCESS or E$SUCCESS.
      526      303        .SPB
      527      304        If the fcntl() function is unsuccessful, the status result contains
      528      305        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      529      306        to determine the specific error condition.  The XSL$FCNTL procedure
      530      307        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      531      308        to the fcntl() function.
      532      309        .SPB
      533      310        If the command is other than "get status flags" or "set status flags" the
      534      311        error EINVAL is reported.  If command is "get status flags" or "set status
      535      312        flags" and flags other than "ndelay" are specified, they are ignored.
      536      313        If the command is "set status flags" and one of the flags is "ndelay", the
      537      314        socket mode is set to "non-blocking"; otherwise it is set to "blocking".
      538      315        .SPB
      539      316        Modifications to the socket mode are processed by the Socket Library and,
      540      317        if the socket is bound to a FEP, modifications to the socket mode are
      541      318        processed by that FEP.
      542      319        ..::IT "Errors:"
      543      320        Following are the possible error conditions reported when the fcntl()
      544      321        function is unsuccessful.  Equates for the possible values can be found in
      545      322        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      546      323
      547      324        .FIF
      548      325
      549      326        C #define               PL6 %EQU
      550      327        ----------------------- -----------------------
      551      328        EBADF                   E$BADF
      552      329        .FIN
      553      330        The descriptor f is not appropriate to identify a socket.
      554      331        .FIF
      555      332
      556      333        EINVAL                  E$INVAL
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:39   
      557      334        .FIN
      558      335        The command is neither get status flags nor set status flags.
      559      336        .FIF
      560      337
      561      338        ENOTSOCK                E$NOTSOCK
      562      339        .FIN
      563      340        The descriptor f is no longer valid to identify a socket.
      564      341        .FIF
      565      342        */
      566      343        /*F* NAME: ioctl() and XSL$IOCTL  --  I/O Control
      567      344        ..::IT "Purpose:"
      568      345        .INL +4
      569      346        Sets or obtains I/O control information for a file descriptor.
      570      347        ..::IT "C Usage:"
      571      348        .INL 4
      572      349        .FIF
      573      350        status = ioctl( f, cmd, &parm );
      574      351        ..::IT "PL6 Usage:"
      575      352        .INL 4
      576      353        .FIF
      577      354        CALL XSL$IOCTL( status, f, cmd, parm );
      578      355        ..::IT "Parameters:"
      579      356        .INL 4
      580      357        .FIF
      581      358        f           integer file descriptor
      582      359
      583      360        cmd         integer command code
      584      361
      585      362        parm        address of parameter buffer
      586      363        ..::IT "Results:"
      587      364        .INL 4
      588      365        .FIF
      589      366        status      integer error code
      590      367
      591      368        parm        optionally modified parameter buffer
      592      369        ..::IT "Description:"
      593      370        The ioctl() function provides a subset of the corresponding function
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:40   
      594      371        available on other systems.
      595      372        .SPB
      596      373        The f parameter specifies the descriptor of the socket for which the
      597      374        command is to be issued.
      598      375        .SPB
      599      376        The cmd parameter specifies the command to be issued.  Equates for the
      600      377        possible values can be found in <ioctl.h> or XSL_SOCKET_M.  If the latter
      601      378        include file is used, the macro XSL_IOCTLS must be invoked to establish the
      602      379        equates.  The available commands are listed in the following table.
      603      380        .trf ]%
      604      381        ..::TB "^\C #define\#8\PL6 ]EQU\#15\Meaning\#"
      605      382        .trf ]]
      606      383        .xeq XSL_SOCKET_M IOCTL_E XSL_FIOCLEX
      607      384        .xeq XSL_SOCKET_M IOCTL_E XSL_FIONCLEX
      608      385        .xeq XSL_SOCKET_M IOCTL_E XSL_FIONREAD
      609      386        .xeq XSL_SOCKET_M IOCTL_E XSL_FIONBIO
      610      387        .xeq XSL_SOCKET_M IOCTL_E XSL_FIOASYNC
      611      388        .xeq XSL_SOCKET_M IOCTL_E XSL_FIOSETOWN
      612      389        .xeq XSL_SOCKET_M IOCTL_E XSL_FIOGETOWN
      613      390        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCSHIWAT
      614      391        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCGHIWAT
      615      392        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCSLOWAT
      616      393        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCGLOWAT
      617      394        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCATMARK
      618      395        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCSPGRP
      619      396        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCGPGRP
      620      397        ..::TB
      621      398        .SPB
      622      399        The parm parameter specifies an application-defined buffer containing
      623      400        information appropriate to the command.
      624      401        .SPB
      625      402        If the ioctl() function is successful, the status result contains
      626      403        ESUCCESS or E$SUCCESS.  The parm parameter may be modified by some commands.
      627      404        .SPB
      628      405        If the ioctl() function is unsuccessful, the status result contains
      629      406        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      630      407        to determine the specific error condition.  The XSL$IOCTL procedure
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:41   
      631      408        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      632      409        to the ioctl() function.
      633      410        .SPB
      634      411        All ioctl() commands require the socket to be bound to a FEP, otherwise
      635      412        the error ENOTBOUND is reported.  The command FIONBIO is processed by the
      636      413        Socket Library and the FEP.  The commands FIONREAD and SIOCATMARK are
      637      414        processed either by the Socket Library or the FEP, depending on whether the
      638      415        socket is currently conditioned for NoWait I/O.  The commands FIOCLEX,
      639      416        FIONCLEX, FIOASYNC, FIOSETOWN, FIOGETOWN, SIOCSPGRP, and SIOCGPGRP are
      640      417        currently not implemented, and report the error EINVAL.  All other commands
      641      418        are processed by the FEP.
      642      419        ..::IT "Errors:"
      643      420        Following are the possible error conditions reported when the ioctl()
      644      421        function is unsuccessful.  Equates for the possible values can be found in
      645      422        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      646      423
      647      424        .FIF
      648      425
      649      426        C #define               PL6 %EQU
      650      427        ----------------------- -----------------------
      651      428        EBADF                   E$BADF
      652      429        .FIN
      653      430        The descriptor f is not appropriate to identify a socket.
      654      431        .FIF
      655      432
      656      433        EINVAL                  E$INVAL
      657      434        .FIN
      658      435        The command is not supported.
      659      436        .FIF
      660      437
      661      438        ENOTSOCK                E$NOTSOCK
      662      439        .FIN
      663      440        The descriptor f is no longer valid to identify a socket.
      664      441        .FIF
      665      442        */
      666      443        XSL$GETSOCKOPT: PROC( RESULT, SOCK#, LEVEL, OPTNAME, OPTVAL, OPTLEN) ALTRET;
      667      444        %INCLUDE XSL_SOCKET_E;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:42   
      668      702        %INCLUDE XSL_SOCKET_M;
      669     1463            %XSL_IOCTLS;
      670     1501        %INCLUDE XSL_PERR_C;
      671     1556        %INCLUDE XSL_INTERNAL_M;
      672     1807            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
      673     1951            %XSL$DATABUF( STCLASS="BASED( BUF$)");
      674     1984            %XSL$SOCKHD( STCLASS="BASED( XSL_SOCK$$)");
      675     2017        %INCLUDE XSL_SOCKMSGS_E;
      676     2063        %INCLUDE XSL_SOCKMSGS_M;
      677     3196            %XSL$GETSOCKOPTRQS( FPTN=XSL_GETSOCKOPTRQS, STCLASS="CONSTANT SYMDEF");
      678     3223            %XSL$GETSOCKOPTRQS( STCLASS="BASED( XSL_KEYBUF$)");
      679     3250            %XSL$GETSOCKOPTRSP( STCLASS="BASED( XSL_KEYBUF$)");
      680     3279            %XSL$SETSOCKOPTRQS( FPTN=XSL_SETSOCKOPTRQS, STCLASS="CONSTANT SYMDEF");
      681     3308            %XSL$SETSOCKOPTRQS( STCLASS="BASED( XSL_KEYBUF$)");
      682     3337            %XSL$SETSOCKOPTRSP( STCLASS="BASED( XSL_KEYBUF$)");
      683     3364            %XSL$IOCTLRQS( FPTN=XSL_IOCTLRQS, STCLASS="CONSTANT SYMDEF");
      684     3390            %XSL$IOCTLRQS( STCLASS="BASED( XSL_KEYBUF$)");
      685     3416            %XSL$IOCTLRSP( STCLASS="BASED( XSL_KEYBUF$)");
      686     3443
      687     3444    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      688     3445    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      689     3446    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
      690     3447    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
      691     3448
      692     3449    1       DCL XSL_ERRNO SBIN SYMREF;
      693     3450    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      694     3451    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
      695     3452    1       DCL XSL_SOCK$$ PTR SYMREF;
      696     3453
      697     3454    1       DCL BUFX SBIN;
      698     3455    1       DCL BUF$ PTR;
      699     3456    1       DCL ENTRYFLAG SBIN;
      700     3457        %EQU GET = 0;
      701     3458        %EQU SET = 1;
      702     3459        %EQU FCNTL = 2;
      703     3460        %EQU IOCTL = 3;
      704     3461    1       DCL IOCTLDATA CHAR(128);
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:43   
      705     3462    1       DCL LEVEL SBIN;
      706     3463    1       DCL COMMAND REDEF LEVEL SBIN;
      707     3464    1       DCL OPTLEN SBIN;
      708     3465    1       DCL OPTNAME SBIN;
      709     3466    1       DCL PARM REDEF OPTNAME SBIN;
      710     3467    1       DCL PARMCHARS REDEF OPTNAME CHAR( LEN);
      711     3468    1       DCL PARMPTR REDEF OPTNAME PTR;
      712     3469    1       DCL OPTVAL CHAR( OPTLEN);
      713     3470    1       DCL OPTVALINT REDEF OPTVAL SBIN;
      714     3471    1       DCL RESULT SBIN;
      715     3472    1       DCL SOCK# SBIN;
      716     3473    1       DCL SOCK$ PTR;
      717     3474    1       DCL LEN SBIN;
      718     3475    1       DCL NEWPROXY SBIN;
      719     3476    1       DCL OLDPROXY SBIN;
      720     3477
      721     3478    1       ENTRYFLAG = %GET;
      722     3479    1       GOTO COMMONDCBN;
      723     3480
      724     3481    1   XSL$QGETSOCKOPT: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME, OPTVAL, OPTLEN) ALTRET;
      725     3482
      726     3483    1       ENTRYFLAG = %GET;
      727     3484    1       GOTO COMMONSOCK;
      728     3485
      729     3486    1   XSL$SETSOCKOPT: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME, OPTVAL, OPTLEN) ALTRET;
      730     3487
      731     3488    1       ENTRYFLAG = %SET;
      732     3489    1       GOTO COMMONDCBN;
      733     3490
      734     3491    1   XSL$QSETSOCKOPT: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME, OPTVAL, OPTLEN) ALTRET;
      735     3492
      736     3493    1       ENTRYFLAG = %SET;
      737     3494    1   COMMONSOCK:
      738     3495    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
      739     3496    1       GOTO LATER;
      740     3497
      741     3498    1   XSL$FCNTL: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME) ALTRET;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:44   
      742     3499    1       ENTRYFLAG = %FCNTL;
      743     3500    1       GOTO COMMONDCBN;
      744     3501
      745     3502    1   XSL$QFCNTL: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME) ALTRET;
      746     3503
      747     3504    1       ENTRYFLAG = %FCNTL;
      748     3505    1       GOTO COMMONSOCK;
      749     3506
      750     3507    1   XSL$IOCTL: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME) ALTRET;
      751     3508
      752     3509    1       ENTRYFLAG = %IOCTL;
      753     3510    1       GOTO COMMONDCBN;
      754     3511
      755     3512    1   XSL$QIOCTL: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME) ALTRET;
      756     3513
      757     3514    1       ENTRYFLAG = %IOCTL;
      758     3515    1       GOTO COMMONSOCK;
      759     3516
      760     3517    1   COMMONDCBN:
      761     3518    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
      762     3519    1   LATER:
      763     3520    1       SOCK$ = XSL_SOCK$;
      764     3521    1   CASE_ENTRYFLAG:
      765     3522    2       DO CASE( ENTRYFLAG);
      766     3523    2           CASE( %GET);
      767     3524    2               IF LEVEL = %XSL_SOL_SOCKET THEN
      768     3525    3               DO SELECT( OPTNAME);
      769     3526    3                   SELECT( %XSL_SO_OOBINLINE);
      770     3527    3                   OPTLEN = 4;
      771     3528    3                   OPTVALINT = BITBIN( SOCK.FLAGS.OOBINLINE);
      772     3529    3                   EXIT CASE_ENTRYFLAG;
      773     3530    3                   SELECT( %XSL_SO_TYPE);
      774     3531    3                   OPTLEN = 4;
      775     3532    3                   OPTVALINT = SOCK.TYPE;
      776     3533    3                   EXIT CASE_ENTRYFLAG;
      777     3534    3                   SELECT( %XSL_SO_BLOCKING);
      778     3535    3                   OPTLEN = 4;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:45   
      779     3536    3                   OPTVALINT = BITBIN( SOCK.FLAGS.BLOCKING);
      780     3537    3                   EXIT CASE_ENTRYFLAG;
      781     3538    3                   SELECT( %XSL_SO_NWREADS);
      782     3539    3                   OPTLEN = 4;
      783     3540    3                   OPTVALINT = SOCK.MAXRDS;
      784     3541    3                   EXIT CASE_ENTRYFLAG;
      785     3542    3                   SELECT( %XSL_SO_NWBUFFS);
      786     3543    3                   OPTLEN = 4;
      787     3544    3                   OPTVALINT = SOCK.MAXBUF;
      788     3545    3                   EXIT CASE_ENTRYFLAG;
      789     3546    3                   END;
      790     3547    3               IF NOT SOCK.FLAGS.SOCKET THEN DO;
      791     3548    3   NOTBOUND:
      792     3549    3                   XSL_ERRNO = %E$NOTBOUND;
      793     3550    3                   GOTO BAILOUT;
      794     3551    3                   END;
      795     3552    2               XSL$GETSOCKOPTRQS = XSL_GETSOCKOPTRQS;
      796     3553    2               XSL$GETSOCKOPTRQS.LEVEL = LEVEL;
      797     3554    2               XSL$GETSOCKOPTRQS.OPTNAME = OPTNAME;
      798     3555    2               CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$GETSOCKOPTRQS));
      799     3556    2               CALL XSL$CL_READ( SOCK);
      800     3557    3               IF XSL$GETSOCKOPTRSP.RESULT < 0 THEN DO;
      801     3558    3                   XSL_ERRNO = XSL$GETSOCKOPTRSP.ERRNO;
      802     3559    3   BAILOUT:
      803     3560    3                   RESULT = %E$FAILURE;
      804     3561    3                   ALTRETURN;
      805     3562    3                   END;
      806     3563    2               OPTLEN = MINIMUM( OPTLEN, XSL$GETSOCKOPTRSP.OPTLEN);
      807     3564    2               SUBSTR( OPTVAL, 0, OPTLEN) = SUBSTR( XSL$GETSOCKOPTRSP.OPTVAL, 0, OPTLEN
              3564                        );
      808     3565    2           CASE( %SET);
      809     3566    3               IF NOT SOCK.FLAGS.SOCKET THEN DO;
      810     3567    3                   IF LEVEL ~= %XSL_SOL_SOCKET OR OPTNAME ~= %XSL_SO_REUSEADDR THEN
      811     3568    3                       GOTO NOTBOUND;
      812     3569    3                   SOCK.FLAGS.REUSEADDR = '1'B;
      813     3570    3                   EXIT CASE_ENTRYFLAG;
      814     3571    3                   END;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:46   
      815     3572    2               IF LEVEL = %XSL_SOL_SOCKET THEN
      816     3573    3               DO SELECT( OPTNAME);
      817     3574    3                   SELECT( %XSL_SO_OOBINLINE);
      818     3575    3                   IF OPTVALINT = 0 THEN
      819     3576    3                       SOCK.FLAGS.OOBINLINE = '0'B;
      820     3577    3                   ELSE
      821     3578    3                       SOCK.FLAGS.OOBINLINE = '1'B;
      822     3579    3                   EXIT CASE_ENTRYFLAG;
      823     3580    3                   SELECT( %XSL_SO_BLOCKING);
      824     3581    3                   OLDPROXY = 0;
      825     3582    3                   IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.BLOCKING THEN
      826     3583    3                       OLDPROXY = OLDPROXY + 1;
      827     3584    3                   IF OPTVALINT = 0 THEN
      828     3585    3                       SOCK.FLAGS.BLOCKING = '0'B;
      829     3586    3                   ELSE
      830     3587    3                       SOCK.FLAGS.BLOCKING = '1'B;
      831     3588    3                   GOTO SENDBLOCKFLAG;
      832     3589    3                   SELECT( %XSL_SO_NWREADS);
      833     3590    3                   OLDPROXY = 0;
      834     3591    3                   IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.BLOCKING THEN
      835     3592    3                       OLDPROXY = OLDPROXY + 1;
      836     3593    3                   SOCK.MAXRDS = OPTVALINT;
      837     3594    3                   GOTO SENDBLOCKFLAG;
      838     3595    3                   SELECT( %XSL_SO_NWBUFFS);
      839     3596    3                   SOCK.MAXBUF = OPTVALINT;
      840     3597    3                   EXIT CASE_ENTRYFLAG;
      841     3598    3                   END;
      842     3599    2               XSL$SETSOCKOPTRQS = XSL_SETSOCKOPTRQS;
      843     3600    2               XSL$SETSOCKOPTRQS.LEVEL = LEVEL;
      844     3601    2               XSL$SETSOCKOPTRQS.OPTNAME = OPTNAME;
      845     3602    2               XSL$SETSOCKOPTRQS.OPTLEN = OPTLEN;
      846     3603    2               SUBSTR( XSL$SETSOCKOPTRQS.OPTVAL, 0, OPTLEN) = SUBSTR( OPTVAL, 0, OPTLEN
              3603                        );
      847     3604    2               CALL XSL$CL_WRITE( SOCK, OPTLEN+LENGTHC( XSL$SETSOCKOPTRQS)-1);
      848     3605    2               CALL XSL$CL_READ( SOCK);
      849     3606    3               IF XSL$SETSOCKOPTRSP.RESULT < 0 THEN DO;
      850     3607    3                   XSL_ERRNO = XSL$SETSOCKOPTRSP.ERRNO;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:47   
      851     3608    3                   GOTO BAILOUT;
      852     3609    3                   END;
      853     3610    2           CASE( %FCNTL);
      854     3611    3               DO CASE( COMMAND);
      855     3612    3                   CASE( ELSE);
      856     3613    3   NOGOOD:
      857     3614    3                       XSL_ERRNO = %E$INVAL;
      858     3615    3                       GOTO BAILOUT;
      859     3616    3                   CASE( %XSL_F_GETFL);
      860     3617    3                       IF SOCK.FLAGS.BLOCKING THEN
      861     3618    3                           RESULT = 0;
      862     3619    3                       ELSE
      863     3620    3                           RESULT = BITBIN( BINBIT( PARM, 36) & BINBIT( %XSL_O_NDELAY,
              3620                                    36));
      864     3621    3                       RETURN;
      865     3622    3                   CASE( %XSL_F_SETFL);
      866     3623    3                       OLDPROXY = 0;
      867     3624    3                       IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.BLOCKING THEN
      868     3625    3                           OLDPROXY = OLDPROXY + 1;
      869     3626    3                       IF BINBIT( PARM, 36) & BINBIT( %XSL_O_NDELAY, 36) THEN
      870     3627    3                           SOCK.FLAGS.BLOCKING = '0'B;
      871     3628    3                       ELSE
      872     3629    3                           SOCK.FLAGS.BLOCKING = '1'B;
      873     3630    3                   END;
      874     3631    2   SENDBLOCKFLAG:
      875     3632    2               IF NOT SOCK.FLAGS.SOCKET THEN EXIT;
      876     3633    2               NEWPROXY = 0;
      877     3634    2               IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.BLOCKING THEN
      878     3635    2                   NEWPROXY = NEWPROXY + 1;
      879     3636    2               IF NEWPROXY = OLDPROXY THEN EXIT;
      880     3637    2               XSL$SETSOCKOPTRQS = XSL_SETSOCKOPTRQS;
      881     3638    2               XSL$SETSOCKOPTRQS.LEVEL = %XSL_SOL_SOCKET;
      882     3639    2               XSL$SETSOCKOPTRQS.OPTNAME = %XSL_SO_BLOCKING;
      883     3640    2               XSL$SETSOCKOPTRQS.OPTLEN = 1;
      884     3641    2               IF SOCK.FLAGS.BLOCKING THEN
      885     3642    2                   XSL$SETSOCKOPTRQS.OPTVAL = BINASC( 1);
      886     3643    2               ELSE
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:48   
      887     3644    2                   XSL$SETSOCKOPTRQS.OPTVAL = BINASC( 0);
      888     3645    2               CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$SETSOCKOPTRQS));
      889     3646    2               CALL XSL$CL_READ( SOCK);
      890     3647    3               IF XSL$SETSOCKOPTRSP.RESULT < 0 THEN DO;
      891     3648    3                   XSL_ERRNO = XSL$SETSOCKOPTRSP.ERRNO;
      892     3649    3                   GOTO BAILOUT;
      893     3650    3                   END;
      894     3651    2           CASE( %IOCTL);
      895     3652    2               IF NOT SOCK.FLAGS.SOCKET THEN
      896     3653    2                   GOTO NOTBOUND;
      897     3654    3               DO SELECT( COMMAND);
      898     3655    3                   SELECT( %XSL_FIOCLEX, %XSL_FIONCLEX,
      899     3656    3                     %XSL_FIOASYNC,
      900     3657    3                     %XSL_FIOSETOWN, %XSL_FIOGETOWN,
      901     3658    3                     %XSL_SIOCSPGRP, %XSL_SIOCGPGRP);
      902     3659    3                   GOTO NOGOOD;
      903     3660    3                   SELECT( %XSL_FIONBIO);
      904     3661    3                   OLDPROXY = 0;
      905     3662    3                   IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.BLOCKING THEN
      906     3663    3                       OLDPROXY = OLDPROXY + 1;
      907     3664    3                   IF PARM = 0 THEN
      908     3665    3                       SOCK.FLAGS.BLOCKING = '1'B;
      909     3666    3                   ELSE
      910     3667    3                       SOCK.FLAGS.BLOCKING = '0'B;
      911     3668    3                   GOTO SENDBLOCKFLAG;
      912     3669    3                   SELECT( %XSL_FIONREAD);
      913     3670    3                   IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.SELREAD THEN
      914     3671    3                       GOTO SENDIOCTL;
      915     3672    3                   PARM = 0;
      916     3673    3                   BUFX = SOCK.BUFHD;
      917     3674    4                   DO WHILE( BUFX ~= 0);
      918     3675    4                       BUF$ = PINCRW( XSL_SOCK$$, BUFX);
      919     3676    4                       IF XSL$DATABUF.FLAGS.BUSY THEN EXIT;
      920     3677    4                       IF ( XSL$DATABUF.KEY(1) = %RECVRSP OR
      921     3678    4                         XSL$DATABUF.KEY(1) = %RECVFROMRSP) AND
      922     3679    4                         NOT XSL$DATABUF.FLAGS.OOB THEN
      923     3680    4                           PARM = PARM + XSL$DATABUF.LEN;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:49   
      924     3681    4                       BUFX = XSL$DATABUF.NXT;
      925     3682    4                       END;
      926     3683    3                   EXIT CASE_ENTRYFLAG;
      927     3684    3                   SELECT( %XSL_SIOCATMARK);
      928     3685    3                   IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.SELEXCEP THEN
      929     3686    3                       GOTO SENDIOCTL;
      930     3687    3                   RESULT = 0;
      931     3688    3                   BUFX = SOCK.BUFHD;
      932     3689    3                   IF BUFX ~= 0 AND
      933     3690    3                     PINCRW( XSL_SOCK$$, BUFX)->XSL$DATABUF.FLAGS.OOB THEN
      934     3691    3                       RESULT = 1;
      935     3692    3                   EXIT CASE_ENTRYFLAG;
      936     3693    3                   END;
      937     3694    2   SENDIOCTL:
      938     3695    2               XSL$IOCTLRQS = XSL_IOCTLRQS;
      939     3696    2               XSL$IOCTLRQS.CMDCODE = COMMAND;
      940     3697    2               LEN = MOD( COMMAND/262144, 128);
      941     3698    2               IF LEN > 0 THEN
      942     3699    2                   SUBSTR( IOCTLDATA, 0, LEN) = PARMCHARS;
      943     3700    2               CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$IOCTLRQS), LEN, IOCTLDATA);
      944     3701    2               CALL XSL$CL_READ( SOCK, LEN, IOCTLDATA);
      945     3702    3               IF XSL$IOCTLRSP.RESULT < 0 THEN DO;
      946     3703    3                   XSL_ERRNO = XSL$IOCTLRSP.ERRNO;
      947     3704    3                   GOTO BAILOUT;
      948     3705    3                   END;
      949     3706    2               ELSE
      950     3707    2                   IF LEN > 0 THEN
      951     3708    2                       PARMCHARS = SUBSTR( IOCTLDATA, 0, LEN);
      952     3709    2           END;
      953     3710    1       RESULT = %E$SUCCESS;
      954     3711    1       RETURN;
      955     3712    1   END XSL$GETSOCKOPT;
      956     3713        %EOD;

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:50   
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$GETSOCKOPT.

   Procedure XSL$GETSOCKOPT requires 547 words for executable code.
   Procedure XSL$GETSOCKOPT requires 52 words of local(AUTO) storage.

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:51   

 Object Unit name= XSL$GETSOCKOPT                             File name= XSL$SOCKET3.:TCA2TOU
 UTS= NOV 16 '97 14:32:33.84 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      7      7  XSL$GETSOCKOPT
    1   Proc  even  none   547   1043  XSL$GETSOCKOPT
    2  RoData even  none    15     17  XSL$GETSOCKOPT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        6  XSL$GETSOCKOPT
     1      4          yes     yes      Std        6  XSL$QGETSOCKOPT
     1     10          yes     yes      Std        6  XSL$SETSOCKOPT
     1     15          yes     yes      Std        6  XSL$QSETSOCKOPT
     1     31          yes     yes      Std        4  XSL$FCNTL
     1     36          yes     yes      Std        4  XSL$QFCNTL
     1     43          yes     yes      Std        4  XSL$IOCTL
     1     50          yes     yes      Std        4  XSL$QIOCTL

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  XSL_GETSOCKOPTRQS                  0      2  XSL_SETSOCKOPTRQS
    0      5  XSL_IOCTLRQS
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:52   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSL$SOCKPTR
 yes     yes           Std       4 XSL$CL_WRITE
 yes     yes           Std       2 XSL$DCBNPTR
 yes     yes           Std       3 XSL$CL_READ
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSL_ERRNO                        r    XSL_KEYBUF$                           XSL_SOCK$$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:53   


      224        1        /*T***********************************************************/
      225        2        /*T*                                                         */
      226        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      227        4        /*T*                                                         */
      228        5        /*T***********************************************************/
      229        6        /*F* NAME: getsockopt() and XSL$GETSOCKOPT  --  Get Socket Option
      230        7        ..::IT "Purpose:"
      231        8        .INL +4
      232        9        Obtains the current setting of an option at one of the internal protocol
      233       10        levels supporting a socket.
      234       11        ..::IT "C Usage:"
      235       12        .INL 4
      236       13        .FIF
      237       14        status = getsockopt( s, level, optname, &optval, &optlen );
      238       15        ..::IT "PL6 Usage:"
      239       16        .INL 4
      240       17        .FIF
      241       18        CALL XSL$GETSOCKOPT( status, s, level, optname, optval, optlen );
      242       19        ..::IT "Parameters:"
      243       20        .INL 4
      244       21        .FIF
      245       22        s           integer socket descriptor
      246       23
      247       24        level       integer protocol number
      248       25
      249       26        optname     integer option name
      250       27
      251       28        optval      character array buffer for option value
      252       29
      253       30        optlen      integer size of optval in characters
      254       31        ..::IT "Results:"
      255       32        .INL 4
      256       33        .FIF
      257       34        status      integer error code
      258       35
      259       36        optval      current option value
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:54   
      260       37
      261       38        optlen      integer number of significant characters in optval
      262       39        ..::IT "Description:"
      263       40        The getsockopt() function obtains the current setting of any option at
      264       41        any internal protocol level supporting an existing socket.
      265       42        .SPB
      266       43        The s parameter specifies the descriptor of the socket of interest.
      267       44        .SPB
      268       45        The level parameter specifies the protocol level managing the option
      269       46        of interest.  "Socket" level is specified by coding SOL_SOCKET or
      270       47        %XSL_SOL_SOCKET in C or PL6 source, respectively.  Other levels are
      271       48        specified by using a protocol number from the include files <xsl_socket.h>
      272       49        or XSL_SOCKET_E, respectively.  "Socket" is the only level implemented
      273       50        at this time.
      274       51        .SPB
      275       52        The optname parameter specifies the option of interest.  For "socket"
      276       53        level this is coded using one of the SO_ #defines or %XSL_SO_ equates
      277       54        which are defined in the include file <xsl_socket.h> or XSL_SOCKET_E.
      278       55        These options are listed in the following table.
      279       56        .trf ]%
      280       57        ..::TB "^\C #define\#8\PL6 ]EQU\#15\Meaning\#"
      281       58        .trf ]]
      282       59        .xeq XSL_SOCKET_E SO_E SO_ACCEPTCONN
      283       60        .xeq XSL_SOCKET_E SO_E SO_BLOCKING
      284       61        .xeq XSL_SOCKET_E SO_E SO_BROADCAST
      285       62        .xeq XSL_SOCKET_E SO_E SO_DEBUG
      286       63        .xeq XSL_SOCKET_E SO_E SO_DONTROUTE
      287       64        .xeq XSL_SOCKET_E SO_E SO_ERROR
      288       65        .xeq XSL_SOCKET_E SO_E SO_IMASOCKET
      289       66        .xeq XSL_SOCKET_E SO_E SO_KEEPALIVE
      290       67        .xeq XSL_SOCKET_E SO_E SO_LINGER
      291       68        .xeq XSL_SOCKET_E SO_E SO_NWREADS
      292       69        .xeq XSL_SOCKET_E SO_E SO_NWBUFFS
      293       70        .xeq XSL_SOCKET_E SO_E SO_OOBINLINE
      294       71        .xeq XSL_SOCKET_E SO_E SO_ORDREL
      295       72        .xeq XSL_SOCKET_E SO_E SO_RCVBUF
      296       73        .xeq XSL_SOCKET_E SO_E SO_RCVLOWAT
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:55   
      297       74        .xeq XSL_SOCKET_E SO_E SO_RCVTIMEO
      298       75        .xeq XSL_SOCKET_E SO_E SO_REUSEADDR
      299       76        .xeq XSL_SOCKET_E SO_E SO_SNDBUF
      300       77        .xeq XSL_SOCKET_E SO_E SO_SNDLOWAT
      301       78        .xeq XSL_SOCKET_E SO_E SO_SNDTIMEO
      302       79        .xeq XSL_SOCKET_E SO_E SO_TYPE
      303       80        .xeq XSL_SOCKET_E SO_E SO_USELOOPBACK
      304       81        ..::TB
      305       82        .SPB
      306       83        The optval parameter specifies an application-defined buffer to receive
      307       84        the current setting of the option.
      308       85        .SPB
      309       86        The optlen parameter specifies how large the optval buffer is, expressed
      310       87        as the number of characters it can hold.
      311       88        .SPB
      312       89        If the getsockopt() function is successful, the status result contains
      313       90        ESUCCESS or E$SUCCESS.  The optval and optlen parameters are modified
      314       91        to contain the current value of the selected option.
      315       92        .SPB
      316       93        If the getsockopt() function is unsuccessful, the status result contains
      317       94        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      318       95        to determine the specific error condition.  The XSL$GETSOCKOPT procedure
      319       96        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      320       97        to the getsockopt() function.
      321       98        .SPB
      322       99        If level is SOL_SOCKET and optname is one of SO_NWBUFFS, SO_NWREADS,
      323      100        SO_OOBINLINE, or SO_TYPE, the Socket Library provides the result.  For
      324      101        any other combination of level and optname, the socket must already be
      325      102        bound to a FEP and the result is provided by that FEP.
      326      103        ..::IT "Errors:"
      327      104        Following are the possible error conditions reported when the getsockopt()
      328      105        function is unsuccessful.  Equates for the possible values can be found in
      329      106        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      330      107
      331      108        .FIF
      332      109
      333      110        C #define               PL6 %EQU
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:56   
      334      111        ----------------------- -----------------------
      335      112        EBADF                   E$BADF
      336      113        .FIN
      337      114        The descriptor s is not appropriate to identify a socket.
      338      115        .FIF
      339      116
      340      117        ENOPROTOOPT             E$NOPROTOOPT
      341      118        .FIN
      342      119        The option specified in optname is not recognized by protocol level.
      343      120        .FIF
      344      121
      345      122        ENOTBOUND               E$NOTBOUND
      346      123        .FIN
      347      124        Socket is not bound to a FEP.
      348      125        .FIF
      349      126
      350      127        ENOTSOCK                E$NOTSOCK
      351      128        .FIN
      352      129        The descriptor s is no longer valid to identify a socket.
      353      130        .FIF
      354      131        */
      355      132        /*F* NAME: setsockopt() and XSL$SETSOCKOPT  --  Set Socket Option
      356      133        ..::IT "Purpose:"
      357      134        .INL +4
      358      135        Modifies the current setting of an option at one of the internal protocol
      359      136        levels supporting a socket.
      360      137        ..::IT "C Usage:"
      361      138        .INL 4
      362      139        .FIF
      363      140        status = setsockopt( s, level, optname, &optval, optlen );
      364      141        ..::IT "PL6 Usage:"
      365      142        .INL 4
      366      143        .FIF
      367      144        CALL XSL$SETSOCKOPT( status, s, level, optname, optval, optlen );
      368      145        ..::IT "Parameters:"
      369      146        .INL 4
      370      147        .FIF
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:57   
      371      148        s           integer socket descriptor
      372      149
      373      150        level       integer protocol number
      374      151
      375      152        optname     integer option name
      376      153
      377      154        optval      address of option value
      378      155
      379      156        optlen      integer number of significant characters in optval
      380      157        ..::IT "Result:"
      381      158        .INL 4
      382      159        .FIF
      383      160        status      integer error code
      384      161        ..::IT "Description:"
      385      162        The setsockopt() function modifies the current setting of any option at
      386      163        any internal protocol level supporting an existing socket.
      387      164        .SPB
      388      165        The s parameter specifies the descriptor of the socket of interest.
      389      166        .SPB
      390      167        The level parameter specifies the protocol level managing the option
      391      168        of interest.  "Socket" level is specified by coding SOL_SOCKET or
      392      169        %XSL_SOL_SOCKET in C or PL6 source, respectively.  Other levels are
      393      170        specified by using a protocol number from the include files <xsl_socket.h>
      394      171        or XSL_SOCKET_E, respectively.
      395      172        .SPB
      396      173        The optname parameter specifies the option of interest.  For "socket"
      397      174        level this is coded using one of the SO_ #defines or %XSL_SO_ equates
      398      175        which are defined in the include file <xsl_socket.h> or XSL_SOCKET_E.
      399      176        These options are listed in the following table.
      400      177        .trf ]%
      401      178        ..::TB "^\C #define\#8\PL6 ]EQU\#15\Meaning\#"
      402      179        .trf ]]
      403      180        .xeq XSL_SOCKET_E SO_E SO_ACCEPTCONN
      404      181        .xeq XSL_SOCKET_E SO_E SO_BLOCKING
      405      182        .xeq XSL_SOCKET_E SO_E SO_BROADCAST
      406      183        .xeq XSL_SOCKET_E SO_E SO_DEBUG
      407      184        .xeq XSL_SOCKET_E SO_E SO_DONTROUTE
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:58   
      408      185        .xeq XSL_SOCKET_E SO_E SO_ERROR
      409      186        .xeq XSL_SOCKET_E SO_E SO_IMASOCKET
      410      187        .xeq XSL_SOCKET_E SO_E SO_KEEPALIVE
      411      188        .xeq XSL_SOCKET_E SO_E SO_LINGER
      412      189        .xeq XSL_SOCKET_E SO_E SO_NWREADS
      413      190        .xeq XSL_SOCKET_E SO_E SO_NWBUFFS
      414      191        .xeq XSL_SOCKET_E SO_E SO_OOBINLINE
      415      192        .xeq XSL_SOCKET_E SO_E SO_ORDREL
      416      193        .xeq XSL_SOCKET_E SO_E SO_RCVBUF
      417      194        .xeq XSL_SOCKET_E SO_E SO_RCVLOWAT
      418      195        .xeq XSL_SOCKET_E SO_E SO_RCVTIMEO
      419      196        .xeq XSL_SOCKET_E SO_E SO_REUSEADDR
      420      197        .xeq XSL_SOCKET_E SO_E SO_SNDBUF
      421      198        .xeq XSL_SOCKET_E SO_E SO_SNDLOWAT
      422      199        .xeq XSL_SOCKET_E SO_E SO_SNDTIMEO
      423      200        .xeq XSL_SOCKET_E SO_E SO_TYPE
      424      201        .xeq XSL_SOCKET_E SO_E SO_USELOOPBACK
      425      202        ..::TB
      426      203        .SPB
      427      204        The optval parameter specifies an application-defined buffer containing
      428      205        the new setting of the option.
      429      206        .SPB
      430      207        The optlen parameter specifies the number of significant characters in optval.
      431      208        .SPB
      432      209        If the setsockopt() function is successful, the status result contains
      433      210        ESUCCESS or E$SUCCESS.
      434      211        .SPB
      435      212        If the setsockopt() function is unsuccessful, the status result contains
      436      213        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      437      214        to determine the specific error condition.  The XSL$SETSOCKOPT procedure
      438      215        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      439      216        to the setsockopt() function.
      440      217        .SPB
      441      218        If the socket is not bound to a FEP, only level SOL_SOCKET and optname
      442      219        SO_REUSEADDR can be specified.  If the socket is bound to a FEP, then
      443      220        level SOL_SOCKET and optnames SO_NWBUFFS, SO_NWREADS, and SO_OOBINLINE
      444      221        are processed by the Socket Library; all other combinations of level
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:59   
      445      222        and optname are processed by the FEP.
      446      223        ..::IT "Errors:"
      447      224        Following are the possible error conditions reported when the setsockopt()
      448      225        function is unsuccessful.  Equates for the possible values can be found in
      449      226        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      450      227
      451      228        .FIF
      452      229
      453      230        C #define               PL6 %EQU
      454      231        ----------------------- -----------------------
      455      232        EBADF                   E$BADF
      456      233        .FIN
      457      234        The descriptor s is not appropriate to identify a socket.
      458      235        .FIF
      459      236
      460      237        ENOPROTOOPT             E$NOPROTOOPT
      461      238        .FIN
      462      239        The option specified in optname is not recognized by protocol level.
      463      240        .FIF
      464      241
      465      242        ENOTBOUND               E$NOTBOUND
      466      243        .FIN
      467      244        Socket is not bound to a FEP.
      468      245        .FIF
      469      246
      470      247        ENOTSOCK                E$NOTSOCK
      471      248        .FIN
      472      249        The descriptor s is no longer valid to identify a socket.
      473      250        .FIF
      474      251        */
      475      252        /*F* NAME: fcntl() and XSL$FCNTL  --  File Control
      476      253        ..::IT "Purpose:"
      477      254        .INL +4
      478      255        Sets or obtains file control information for a file descriptor.
      479      256        ..::IT "C Usage:"
      480      257        .INL 4
      481      258        .FIF
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:60   
      482      259        status = fcntl( f, cmd, flags );
      483      260        ..::IT "PL6 Usage:"
      484      261        .INL 4
      485      262        .FIF
      486      263        CALL XSL$FCNTL( status, f, cmd, flags );
      487      264        ..::IT "Parameters:"
      488      265        .INL 4
      489      266        .FIF
      490      267        f           integer file descriptor
      491      268
      492      269        cmd         integer command code
      493      270
      494      271        flags       sum of integer command flags
      495      272        ..::IT "Result:"
      496      273        .INL 4
      497      274        .FIF
      498      275        status      integer current setting or error code
      499      276        ..::IT "Description:"
      500      277        The fcntl() function provides a subset of the corresponding function
      501      278        available on other systems.  On CP-6 systems, it is used only to set
      502      279        the mode of a socket to "nonblocking", or to get the current
      503      280        setting of the mode.
      504      281        .FIF
      505      282        ..::IX "non-blocking"
      506      283        .SPB
      507      284        The f parameter specifies the descriptor of the socket whose mode is
      508      285        to be queried or modified.
      509      286        .SPB
      510      287        The cmd parameter specifies the command to be issued.  Equates for the
      511      288        possible values can be found in <fcntl.h> or XSL_SOCKET_E. Only the
      512      289        "get status flags" and "set status flags" commands are currently
      513      290        supported.  "Get status flags" is selected by coding F_GETFL or %XSL_F_GETFL
      514      291        in C or PL6 source, respectively.  "Set status flags" is selected by coding
      515      292        F_SETFL or %XSL_F_SETFL in C or PL6 source, respectively.
      516      293        .SPB
      517      294        The flags parameter specifies the particular flags to be queried or modified.
      518      295        Equates for the possible values can be found in <fcntl.h> or XSL_SOCKET_E.
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:61   
      519      296        Only the "ndelay" flag is currently supported.  This is selected by coding
      520      297        O_NDELAY or %XSL_O_NDELAY in C or PL6 source, respectively.
      521      298        .SPB
      522      299        If the fcntl() function is successful, the status result depends on the
      523      300        command issued.  If the command is "get status flags", status contains
      524      301        the value of the select status flags.  If the command is "set status flags",
      525      302        status contains ESUCCESS or E$SUCCESS.
      526      303        .SPB
      527      304        If the fcntl() function is unsuccessful, the status result contains
      528      305        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      529      306        to determine the specific error condition.  The XSL$FCNTL procedure
      530      307        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      531      308        to the fcntl() function.
      532      309        .SPB
      533      310        If the command is other than "get status flags" or "set status flags" the
      534      311        error EINVAL is reported.  If command is "get status flags" or "set status
      535      312        flags" and flags other than "ndelay" are specified, they are ignored.
      536      313        If the command is "set status flags" and one of the flags is "ndelay", the
      537      314        socket mode is set to "non-blocking"; otherwise it is set to "blocking".
      538      315        .SPB
      539      316        Modifications to the socket mode are processed by the Socket Library and,
      540      317        if the socket is bound to a FEP, modifications to the socket mode are
      541      318        processed by that FEP.
      542      319        ..::IT "Errors:"
      543      320        Following are the possible error conditions reported when the fcntl()
      544      321        function is unsuccessful.  Equates for the possible values can be found in
      545      322        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      546      323
      547      324        .FIF
      548      325
      549      326        C #define               PL6 %EQU
      550      327        ----------------------- -----------------------
      551      328        EBADF                   E$BADF
      552      329        .FIN
      553      330        The descriptor f is not appropriate to identify a socket.
      554      331        .FIF
      555      332
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:62   
      556      333        EINVAL                  E$INVAL
      557      334        .FIN
      558      335        The command is neither get status flags nor set status flags.
      559      336        .FIF
      560      337
      561      338        ENOTSOCK                E$NOTSOCK
      562      339        .FIN
      563      340        The descriptor f is no longer valid to identify a socket.
      564      341        .FIF
      565      342        */
      566      343        /*F* NAME: ioctl() and XSL$IOCTL  --  I/O Control
      567      344        ..::IT "Purpose:"
      568      345        .INL +4
      569      346        Sets or obtains I/O control information for a file descriptor.
      570      347        ..::IT "C Usage:"
      571      348        .INL 4
      572      349        .FIF
      573      350        status = ioctl( f, cmd, &parm );
      574      351        ..::IT "PL6 Usage:"
      575      352        .INL 4
      576      353        .FIF
      577      354        CALL XSL$IOCTL( status, f, cmd, parm );
      578      355        ..::IT "Parameters:"
      579      356        .INL 4
      580      357        .FIF
      581      358        f           integer file descriptor
      582      359
      583      360        cmd         integer command code
      584      361
      585      362        parm        address of parameter buffer
      586      363        ..::IT "Results:"
      587      364        .INL 4
      588      365        .FIF
      589      366        status      integer error code
      590      367
      591      368        parm        optionally modified parameter buffer
      592      369        ..::IT "Description:"
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:63   
      593      370        The ioctl() function provides a subset of the corresponding function
      594      371        available on other systems.
      595      372        .SPB
      596      373        The f parameter specifies the descriptor of the socket for which the
      597      374        command is to be issued.
      598      375        .SPB
      599      376        The cmd parameter specifies the command to be issued.  Equates for the
      600      377        possible values can be found in <ioctl.h> or XSL_SOCKET_M.  If the latter
      601      378        include file is used, the macro XSL_IOCTLS must be invoked to establish the
      602      379        equates.  The available commands are listed in the following table.
      603      380        .trf ]%
      604      381        ..::TB "^\C #define\#8\PL6 ]EQU\#15\Meaning\#"
      605      382        .trf ]]
      606      383        .xeq XSL_SOCKET_M IOCTL_E XSL_FIOCLEX
      607      384        .xeq XSL_SOCKET_M IOCTL_E XSL_FIONCLEX
      608      385        .xeq XSL_SOCKET_M IOCTL_E XSL_FIONREAD
      609      386        .xeq XSL_SOCKET_M IOCTL_E XSL_FIONBIO
      610      387        .xeq XSL_SOCKET_M IOCTL_E XSL_FIOASYNC
      611      388        .xeq XSL_SOCKET_M IOCTL_E XSL_FIOSETOWN
      612      389        .xeq XSL_SOCKET_M IOCTL_E XSL_FIOGETOWN
      613      390        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCSHIWAT
      614      391        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCGHIWAT
      615      392        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCSLOWAT
      616      393        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCGLOWAT
      617      394        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCATMARK
      618      395        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCSPGRP
      619      396        .xeq XSL_SOCKET_M IOCTL_E XSL_SIOCGPGRP
      620      397        ..::TB
      621      398        .SPB
      622      399        The parm parameter specifies an application-defined buffer containing
      623      400        information appropriate to the command.
      624      401        .SPB
      625      402        If the ioctl() function is successful, the status result contains
      626      403        ESUCCESS or E$SUCCESS.  The parm parameter may be modified by some commands.
      627      404        .SPB
      628      405        If the ioctl() function is unsuccessful, the status result contains
      629      406        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:64   
      630      407        to determine the specific error condition.  The XSL$IOCTL procedure
      631      408        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      632      409        to the ioctl() function.
      633      410        .SPB
      634      411        All ioctl() commands require the socket to be bound to a FEP, otherwise
      635      412        the error ENOTBOUND is reported.  The command FIONBIO is processed by the
      636      413        Socket Library and the FEP.  The commands FIONREAD and SIOCATMARK are
      637      414        processed either by the Socket Library or the FEP, depending on whether the
      638      415        socket is currently conditioned for NoWait I/O.  The commands FIOCLEX,
      639      416        FIONCLEX, FIOASYNC, FIOSETOWN, FIOGETOWN, SIOCSPGRP, and SIOCGPGRP are
      640      417        currently not implemented, and report the error EINVAL.  All other commands
      641      418        are processed by the FEP.
      642      419        ..::IT "Errors:"
      643      420        Following are the possible error conditions reported when the ioctl()
      644      421        function is unsuccessful.  Equates for the possible values can be found in
      645      422        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      646      423
      647      424        .FIF
      648      425
      649      426        C #define               PL6 %EQU
      650      427        ----------------------- -----------------------
      651      428        EBADF                   E$BADF
      652      429        .FIN
      653      430        The descriptor f is not appropriate to identify a socket.
      654      431        .FIF
      655      432
      656      433        EINVAL                  E$INVAL
      657      434        .FIN
      658      435        The command is not supported.
      659      436        .FIF
      660      437
      661      438        ENOTSOCK                E$NOTSOCK
      662      439        .FIN
      663      440        The descriptor f is no longer valid to identify a socket.
      664      441        .FIF
      665      442        */
      666      443        XSL$GETSOCKOPT: PROC( RESULT, SOCK#, LEVEL, OPTNAME, OPTVAL, OPTLEN) ALTRET;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:65   

    443  1 000000   000000 700200 xent  XSL$GETSOCK* TSX0  ! X66_AUTO_N
         1 000001   000064 000006                    ZERO    52,6

      667      444        %INCLUDE XSL_SOCKET_E;
      668      702        %INCLUDE XSL_SOCKET_M;
      669     1463            %XSL_IOCTLS;
      670     1501        %INCLUDE XSL_PERR_C;
      671     1556        %INCLUDE XSL_INTERNAL_M;
      672     1807            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
      673     1951            %XSL$DATABUF( STCLASS="BASED( BUF$)");
      674     1984            %XSL$SOCKHD( STCLASS="BASED( XSL_SOCK$$)");
      675     2017        %INCLUDE XSL_SOCKMSGS_E;
      676     2063        %INCLUDE XSL_SOCKMSGS_M;
      677     3196            %XSL$GETSOCKOPTRQS( FPTN=XSL_GETSOCKOPTRQS, STCLASS="CONSTANT SYMDEF");
      678     3223            %XSL$GETSOCKOPTRQS( STCLASS="BASED( XSL_KEYBUF$)");
      679     3250            %XSL$GETSOCKOPTRSP( STCLASS="BASED( XSL_KEYBUF$)");
      680     3279            %XSL$SETSOCKOPTRQS( FPTN=XSL_SETSOCKOPTRQS, STCLASS="CONSTANT SYMDEF");
      681     3308            %XSL$SETSOCKOPTRQS( STCLASS="BASED( XSL_KEYBUF$)");
      682     3337            %XSL$SETSOCKOPTRSP( STCLASS="BASED( XSL_KEYBUF$)");
      683     3364            %XSL$IOCTLRQS( FPTN=XSL_IOCTLRQS, STCLASS="CONSTANT SYMDEF");
      684     3390            %XSL$IOCTLRQS( STCLASS="BASED( XSL_KEYBUF$)");
      685     3416            %XSL$IOCTLRSP( STCLASS="BASED( XSL_KEYBUF$)");
      686     3443
      687     3444    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      688     3445    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      689     3446    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
      690     3447    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
      691     3448
      692     3449    1       DCL XSL_ERRNO SBIN SYMREF;
      693     3450    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      694     3451    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
      695     3452    1       DCL XSL_SOCK$$ PTR SYMREF;
      696     3453
      697     3454    1       DCL BUFX SBIN;
      698     3455    1       DCL BUF$ PTR;
      699     3456    1       DCL ENTRYFLAG SBIN;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:66   
      700     3457        %EQU GET = 0;
      701     3458        %EQU SET = 1;
      702     3459        %EQU FCNTL = 2;
      703     3460        %EQU IOCTL = 3;
      704     3461    1       DCL IOCTLDATA CHAR(128);
      705     3462    1       DCL LEVEL SBIN;
      706     3463    1       DCL COMMAND REDEF LEVEL SBIN;
      707     3464    1       DCL OPTLEN SBIN;
      708     3465    1       DCL OPTNAME SBIN;
      709     3466    1       DCL PARM REDEF OPTNAME SBIN;
      710     3467    1       DCL PARMCHARS REDEF OPTNAME CHAR( LEN);
      711     3468    1       DCL PARMPTR REDEF OPTNAME PTR;
      712     3469    1       DCL OPTVAL CHAR( OPTLEN);
      713     3470    1       DCL OPTVALINT REDEF OPTVAL SBIN;
      714     3471    1       DCL RESULT SBIN;
      715     3472    1       DCL SOCK# SBIN;
      716     3473    1       DCL SOCK$ PTR;
      717     3474    1       DCL LEN SBIN;
      718     3475    1       DCL NEWPROXY SBIN;
      719     3476    1       DCL OLDPROXY SBIN;
      720     3477
      721     3478    1       ENTRYFLAG = %GET;

   3478  1 000002   200013 450100                    STZ     ENTRYFLAG,,AUTO

      722     3479    1       GOTO COMMONDCBN;

   3479  1 000003   000055 710000 1                  TRA     COMMONDCBN

      723     3480
      724     3481    1   XSL$QGETSOCKOPT: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME, OPTVAL, OPTLEN) ALTRET;

   3481  1 000004   000000 700200 xent  XSL$QGETSOC* TSX0  ! X66_AUTO_N
         1 000005   000064 000006                    ZERO    52,6

      725     3482
      726     3483    1       ENTRYFLAG = %GET;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:67   

   3483  1 000006   200013 450100                    STZ     ENTRYFLAG,,AUTO

      727     3484    1       GOTO COMMONSOCK;

   3484  1 000007   000021 710000 1                  TRA     COMMONSOCK

      728     3485
      729     3486    1   XSL$SETSOCKOPT: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME, OPTVAL, OPTLEN) ALTRET;

   3486  1 000010   000000 700200 xent  XSL$SETSOCK* TSX0  ! X66_AUTO_N
         1 000011   000064 000006                    ZERO    52,6

      730     3487
      731     3488    1       ENTRYFLAG = %SET;

   3488  1 000012   000001 235007                    LDA     1,DL
         1 000013   200013 755100                    STA     ENTRYFLAG,,AUTO

      732     3489    1       GOTO COMMONDCBN;

   3489  1 000014   000055 710000 1                  TRA     COMMONDCBN

      733     3490
      734     3491    1   XSL$QSETSOCKOPT: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME, OPTVAL, OPTLEN) ALTRET;

   3491  1 000015   000000 700200 xent  XSL$QSETSOC* TSX0  ! X66_AUTO_N
         1 000016   000064 000006                    ZERO    52,6

      735     3492
      736     3493    1       ENTRYFLAG = %SET;

   3493  1 000017   000001 235007                    LDA     1,DL
         1 000020   200013 755100                    STA     ENTRYFLAG,,AUTO

      737     3494    1   COMMONSOCK:
      738     3495    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:68   

   3495  1 000021   000000 236000 2     COMMONSOCK   LDQ     0
         1 000022   200004 235100                    LDA     @SOCK#,,AUTO
         1 000023   200060 757100                    STAQ    OLDPROXY+1,,AUTO
         1 000024   200060 630500                    EPPR0   OLDPROXY+1,,AUTO
         1 000025   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000026   000000 701000 xent               TSX1    XSL$SOCKPTR
         1 000027   000244 702000 1                  TSX2    BAILOUT

      739     3496    1       GOTO LATER;

   3496  1 000030   000064 710000 1                  TRA     LATER

      740     3497
      741     3498    1   XSL$FCNTL: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME) ALTRET;

   3498  1 000031   000000 700200 xent  XSL$FCNTL    TSX0  ! X66_AUTO_N
         1 000032   000064 000006                    ZERO    52,6

      742     3499    1       ENTRYFLAG = %FCNTL;

   3499  1 000033   000002 235007                    LDA     2,DL
         1 000034   200013 755100                    STA     ENTRYFLAG,,AUTO

      743     3500    1       GOTO COMMONDCBN;

   3500  1 000035   000055 710000 1                  TRA     COMMONDCBN

      744     3501
      745     3502    1   XSL$QFCNTL: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME) ALTRET;

   3502  1 000036   000000 700200 xent  XSL$QFCNTL   TSX0  ! X66_AUTO_N
         1 000037   000064 000006                    ZERO    52,6

      746     3503
      747     3504    1       ENTRYFLAG = %FCNTL;

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:69   
   3504  1 000040   000002 235007                    LDA     2,DL
         1 000041   200013 755100                    STA     ENTRYFLAG,,AUTO

      748     3505    1       GOTO COMMONSOCK;

   3505  1 000042   000021 710000 1                  TRA     COMMONSOCK

      749     3506
      750     3507    1   XSL$IOCTL: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME) ALTRET;

   3507  1 000043   000000 700200 xent  XSL$IOCTL    TSX0  ! X66_AUTO_N
         1 000044   000064 000006                    ZERO    52,6

      751     3508
      752     3509    1       ENTRYFLAG = %IOCTL;

   3509  1 000045   000003 235007                    LDA     3,DL
         1 000046   200013 755100                    STA     ENTRYFLAG,,AUTO

      753     3510    1       GOTO COMMONDCBN;

   3510  1 000047   000055 710000 1                  TRA     COMMONDCBN

      754     3511
      755     3512    1   XSL$QIOCTL: ENTRY( RESULT, SOCK#, LEVEL, OPTNAME) ALTRET;

   3512  1 000050   000000 700200 xent  XSL$QIOCTL   TSX0  ! X66_AUTO_N
         1 000051   000064 000006                    ZERO    52,6

      756     3513
      757     3514    1       ENTRYFLAG = %IOCTL;

   3514  1 000052   000003 235007                    LDA     3,DL
         1 000053   200013 755100                    STA     ENTRYFLAG,,AUTO

      758     3515    1       GOTO COMMONSOCK;

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:70   
   3515  1 000054   000021 710000 1                  TRA     COMMONSOCK

      759     3516
      760     3517    1   COMMONDCBN:
      761     3518    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);

   3518  1 000055   000000 236000 2     COMMONDCBN   LDQ     0
         1 000056   200004 235100                    LDA     @SOCK#,,AUTO
         1 000057   200060 757100                    STAQ    OLDPROXY+1,,AUTO
         1 000060   200060 630500                    EPPR0   OLDPROXY+1,,AUTO
         1 000061   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000062   000000 701000 xent               TSX1    XSL$DCBNPTR
         1 000063   000244 702000 1                  TSX2    BAILOUT

      762     3519    1   LATER:
      763     3520    1       SOCK$ = XSL_SOCK$;

   3520  1 000064   000000 236000 xsym  LATER        LDQ     XSL_ERRNO
         1 000065   200054 756100                    STQ     SOCK$,,AUTO

      764     3521    1   CASE_ENTRYFLAG:
      765     3522    2       DO CASE( ENTRYFLAG);

   3522  1 000066   200013 235100       CASE_ENTRYF* LDA     ENTRYFLAG,,AUTO
         1 000067   000004 115007                    CMPA    4,DL
         1 000070   000072 602005 1                  TNC     CASE_ENTRYFLAG+4,AL
         1 000071   001040 710000 1                  TRA     s:3710
         1 000072   000076 710000 1                  TRA     s:3524
         1 000073   000267 710000 1                  TRA     s:3566
         1 000074   000446 710000 1                  TRA     s:3611
         1 000075   000575 710000 1                  TRA     s:3652

      766     3523    2           CASE( %GET);

      767     3524    2               IF LEVEL = %XSL_SOL_SOCKET THEN

   3524  1 000076   200005 470500                    LDP0    @LEVEL,,AUTO
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:71   
         1 000077   000000 235100                    LDA     0,,PR0
         1 000100   000027 115000 xsym               CMPA    B_VECTNIL+23
         1 000101   000203 601000 1                  TNZ     s:3547

      768     3525    3               DO SELECT( OPTNAME);

   3525  1 000102   200006 471500                    LDP1    @OPTNAME,,AUTO
         1 000103   100000 236100                    LDQ     0,,PR1
         1 000104   010010 116007                    CMPQ    4104,DL
         1 000105   000120 604000 1                  TMI     s:3525+14
         1 000106   000135 600000 1                  TZE     s:3531
         1 000107   020002 116007                    CMPQ    8194,DL
         1 000110   000115 604000 1                  TMI     s:3525+11
         1 000111   000161 600000 1                  TZE     s:3539
         1 000112   020003 116007                    CMPQ    8195,DL
         1 000113   000203 601000 1                  TNZ     s:3547
         1 000114   000172 710000 1                  TRA     s:3543
         1 000115   020001 116007                    CMPQ    8193,DL
         1 000116   000203 601000 1                  TNZ     s:3547
         1 000117   000147 710000 1                  TRA     s:3535
         1 000120   001000 116007                    CMPQ    512,DL
         1 000121   000203 601000 1                  TNZ     s:3547
         1 000122   000123 710000 1                  TRA     s:3527

      769     3526    3                   SELECT( %XSL_SO_OOBINLINE);

      770     3527    3                   OPTLEN = 4;

   3527  1 000123   000004 235007                    LDA     4,DL
         1 000124   200010 473500                    LDP3    @OPTLEN,,AUTO
         1 000125   300000 755100                    STA     0,,PR3

      771     3528    3                   OPTVALINT = BITBIN( SOCK.FLAGS.OOBINLINE);

   3528  1 000126   200054 474500                    LDP4    SOCK$,,AUTO
         1 000127   400001 236100                    LDQ     1,,PR4
         1 000130   000023 772000                    QRL     19
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:72   
         1 000131   000001 376007                    ANQ     1,DL
         1 000132   200007 475500                    LDP5    @OPTVAL,,AUTO
         1 000133   500000 756100                    STQ     0,,PR5

      772     3529    3                   EXIT CASE_ENTRYFLAG;

   3529  1 000134   001040 710000 1                  TRA     s:3710

      773     3530    3                   SELECT( %XSL_SO_TYPE);

      774     3531    3                   OPTLEN = 4;

   3531  1 000135   000004 235007                    LDA     4,DL
         1 000136   200010 473500                    LDP3    @OPTLEN,,AUTO
         1 000137   300000 755100                    STA     0,,PR3

      775     3532    3                   OPTVALINT = SOCK.TYPE;

   3532  1 000140   200054 474500                    LDP4    SOCK$,,AUTO
         1 000141   400000 236100                    LDQ     0,,PR4
         1 000142   000022 772000                    QRL     18
         1 000143   000777 376007                    ANQ     511,DL
         1 000144   200007 475500                    LDP5    @OPTVAL,,AUTO
         1 000145   500000 756100                    STQ     0,,PR5

      776     3533    3                   EXIT CASE_ENTRYFLAG;

   3533  1 000146   001040 710000 1                  TRA     s:3710

      777     3534    3                   SELECT( %XSL_SO_BLOCKING);

      778     3535    3                   OPTLEN = 4;

   3535  1 000147   000004 235007                    LDA     4,DL
         1 000150   200010 473500                    LDP3    @OPTLEN,,AUTO
         1 000151   300000 755100                    STA     0,,PR3

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:73   
      779     3536    3                   OPTVALINT = BITBIN( SOCK.FLAGS.BLOCKING);

   3536  1 000152   200054 474500                    LDP4    SOCK$,,AUTO
         1 000153   400001 236100                    LDQ     1,,PR4
         1 000154   000033 772000                    QRL     27
         1 000155   000001 376007                    ANQ     1,DL
         1 000156   200007 475500                    LDP5    @OPTVAL,,AUTO
         1 000157   500000 756100                    STQ     0,,PR5

      780     3537    3                   EXIT CASE_ENTRYFLAG;

   3537  1 000160   001040 710000 1                  TRA     s:3710

      781     3538    3                   SELECT( %XSL_SO_NWREADS);

      782     3539    3                   OPTLEN = 4;

   3539  1 000161   000004 235007                    LDA     4,DL
         1 000162   200010 473500                    LDP3    @OPTLEN,,AUTO
         1 000163   300000 755100                    STA     0,,PR3

      783     3540    3                   OPTVALINT = SOCK.MAXRDS;

   3540  1 000164   200054 474500                    LDP4    SOCK$,,AUTO
         1 000165   400020 236100                    LDQ     16,,PR4
         1 000166   777777 376007                    ANQ     -1,DL
         1 000167   200007 475500                    LDP5    @OPTVAL,,AUTO
         1 000170   500000 756100                    STQ     0,,PR5

      784     3541    3                   EXIT CASE_ENTRYFLAG;

   3541  1 000171   001040 710000 1                  TRA     s:3710

      785     3542    3                   SELECT( %XSL_SO_NWBUFFS);

      786     3543    3                   OPTLEN = 4;

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:74   
   3543  1 000172   000004 235007                    LDA     4,DL
         1 000173   200010 473500                    LDP3    @OPTLEN,,AUTO
         1 000174   300000 755100                    STA     0,,PR3

      787     3544    3                   OPTVALINT = SOCK.MAXBUF;

   3544  1 000175   200054 474500                    LDP4    SOCK$,,AUTO
         1 000176   400020 236100                    LDQ     16,,PR4
         1 000177   000022 772000                    QRL     18
         1 000200   200007 475500                    LDP5    @OPTVAL,,AUTO
         1 000201   500000 756100                    STQ     0,,PR5

      788     3545    3                   EXIT CASE_ENTRYFLAG;

   3545  1 000202   001040 710000 1                  TRA     s:3710

      789     3546    3                   END;

      790     3547    3               IF NOT SOCK.FLAGS.SOCKET THEN DO;

   3547  1 000203   200054 471500                    LDP1    SOCK$,,AUTO
         1 000204   100001 236100                    LDQ     1,,PR1
         1 000205   002000 316003                    CANQ    1024,DU
         1 000206   000212 601000 1                  TNZ     s:3552

      791     3548    3   NOTBOUND:
      792     3549    3                   XSL_ERRNO = %E$NOTBOUND;

   3549  1 000207   000401 235007       NOTBOUND     LDA     257,DL
         1 000210   000000 755000 xsym               STA     XSL_ERRNO

      793     3550    3                   GOTO BAILOUT;

   3550  1 000211   000244 710000 1                  TRA     BAILOUT

      794     3551    3                   END;
      795     3552    2               XSL$GETSOCKOPTRQS = XSL_GETSOCKOPTRQS;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:75   

   3552  1 000212   000000 473400 xsym               LDP3    XSL_KEYBUF$
         1 000213   000100 100400                    MLR     fill='000'O
         1 000214   000000 000006 0                  ADSC9   XSL_GETSOCKOPTRQS        cn=0,n=6
         1 000215   300000 000006                    ADSC9   0,,PR3                   cn=0,n=6

      796     3553    2               XSL$GETSOCKOPTRQS.LEVEL = LEVEL;

   3553  1 000216   000000 720100                    LXL0    0,,PR0
         1 000217   300000 440100                    SXL0    0,,PR3

      797     3554    2               XSL$GETSOCKOPTRQS.OPTNAME = OPTNAME;

   3554  1 000220   200006 474500                    LDP4    @OPTNAME,,AUTO
         1 000221   400000 721100                    LXL1    0,,PR4
         1 000222   300001 741100                    STX1    1,,PR3

      798     3555    2               CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$GETSOCKOPTRQS));

   3555  1 000223   000001 236000 2                  LDQ     1
         1 000224   200054 235100                    LDA     SOCK$,,AUTO
         1 000225   200060 757100                    STAQ    OLDPROXY+1,,AUTO
         1 000226   200060 630500                    EPPR0   OLDPROXY+1,,AUTO
         1 000227   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000230   000000 701000 xent               TSX1    XSL$CL_WRITE
         1 000231   000000 011000                    NOP     0

      799     3556    2               CALL XSL$CL_READ( SOCK);

   3556  1 000232   200054 630500                    EPPR0   SOCK$,,AUTO
         1 000233   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000234   000000 701000 xent               TSX1    XSL$CL_READ
         1 000235   000000 011000                    NOP     0

      800     3557    3               IF XSL$GETSOCKOPTRSP.RESULT < 0 THEN DO;

   3557  1 000236   000000 470400 xsym               LDP0    XSL_KEYBUF$
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:76   
         1 000237   000000 720100                    LXL0    0,,PR0
         1 000240   000250 605000 1                  TPL     s:3563

      801     3558    3                   XSL_ERRNO = XSL$GETSOCKOPTRSP.ERRNO;

   3558  1 000241   000001 236100                    LDQ     1,,PR0
         1 000242   000022 732000                    QRS     18
         1 000243   000000 756000 xsym               STQ     XSL_ERRNO

      802     3559    3   BAILOUT:
      803     3560    3                   RESULT = %E$FAILURE;

   3560  1 000244   000001 335007       BAILOUT      LCA     1,DL
         1 000245   200003 470500                    LDP0    @RESULT,,AUTO
         1 000246   000000 755100                    STA     0,,PR0

      804     3561    3                   ALTRETURN;

   3561  1 000247   000000 702200 xent               TSX2  ! X66_AALT

      805     3562    3                   END;
      806     3563    2               OPTLEN = MINIMUM( OPTLEN, XSL$GETSOCKOPTRSP.OPTLEN);

   3563  1 000250   000001 236100                    LDQ     1,,PR0
         1 000251   000022 736000                    QLS     18
         1 000252   000022 732000                    QRS     18
         1 000253   200010 471500                    LDP1    @OPTLEN,,AUTO
         1 000254   100000 116100                    CMPQ    0,,PR1
         1 000255   000257 604400 1                  TMOZ    s:3563+7
         1 000256   100000 236100                    LDQ     0,,PR1
         1 000257   100000 756100                    STQ     0,,PR1

      807     3564    2              SUBSTR( OPTVAL, 0, OPTLEN) = SUBSTR( XSL$GETSOCKOPTRSP.OPTVAL, 0, OPTLEN
              3564                        );

   3564  1 000260   100000 720100                    LXL0    0,,PR1
         1 000261   100000 721100                    LXL1    0,,PR1
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:77   
         1 000262   200007 473500                    LDP3    @OPTVAL,,AUTO
         1 000263   040140 100540                    MLR     fill='040'O
         1 000264   000002 000011                    ADSC9   2,,PR0                   cn=0,n=*X1
         1 000265   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         1 000266   001040 710000 1                  TRA     s:3710

      808     3565    2           CASE( %SET);

      809     3566    3               IF NOT SOCK.FLAGS.SOCKET THEN DO;

   3566  1 000267   200054 470500                    LDP0    SOCK$,,AUTO
         1 000270   000001 236100                    LDQ     1,,PR0
         1 000271   002000 316003                    CANQ    1024,DU
         1 000272   000306 601000 1                  TNZ     s:3572

      810     3567    3                   IF LEVEL ~= %XSL_SOL_SOCKET OR OPTNAME ~= %XSL_SO_REUSEADDR THEN

   3567  1 000273   200005 471500                    LDP1    @LEVEL,,AUTO
         1 000274   100000 235100                    LDA     0,,PR1
         1 000275   000027 115000 xsym               CMPA    B_VECTNIL+23
         1 000276   000207 601000 1                  TNZ     NOTBOUND
         1 000277   200006 473500                    LDP3    @OPTNAME,,AUTO
         1 000300   300000 235100                    LDA     0,,PR3
         1 000301   000004 115007                    CMPA    4,DL
         1 000302   000207 601000 1                  TNZ     NOTBOUND

      811     3568    3                       GOTO NOTBOUND;
      812     3569    3                   SOCK.FLAGS.REUSEADDR = '1'B;

   3569  1 000303   000400 236003                    LDQ     256,DU
         1 000304   000001 256100                    ORSQ    1,,PR0

      813     3570    3                   EXIT CASE_ENTRYFLAG;

   3570  1 000305   001040 710000 1                  TRA     s:3710

      814     3571    3                   END;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:78   
      815     3572    2               IF LEVEL = %XSL_SOL_SOCKET THEN

   3572  1 000306   200005 471500                    LDP1    @LEVEL,,AUTO
         1 000307   100000 235100                    LDA     0,,PR1
         1 000310   000027 115000 xsym               CMPA    B_VECTNIL+23
         1 000311   000376 601000 1                  TNZ     s:3599

      816     3573    3               DO SELECT( OPTNAME);

   3573  1 000312   200006 473500                    LDP3    @OPTNAME,,AUTO
         1 000313   300000 236100                    LDQ     0,,PR3
         1 000314   020001 116007                    CMPQ    8193,DL
         1 000315   000325 604000 1                  TMI     s:3573+11
         1 000316   000341 600000 1                  TZE     s:3581
         1 000317   020002 116007                    CMPQ    8194,DL
         1 000320   000376 604000 1                  TMI     s:3599
         1 000321   000360 600000 1                  TZE     s:3590
         1 000322   020003 116007                    CMPQ    8195,DL
         1 000323   000376 601000 1                  TNZ     s:3599
         1 000324   000372 710000 1                  TRA     s:3596
         1 000325   001000 116007                    CMPQ    512,DL
         1 000326   000376 601000 1                  TNZ     s:3599
         1 000327   000330 710000 1                  TRA     s:3575

      817     3574    3                   SELECT( %XSL_SO_OOBINLINE);

      818     3575    3                   IF OPTVALINT = 0 THEN

   3575  1 000330   200007 474500                    LDP4    @OPTVAL,,AUTO
         1 000331   400000 235100                    LDA     0,,PR4
         1 000332   000336 601000 1                  TNZ     s:3578

      819     3576    3                       SOCK.FLAGS.OOBINLINE = '0'B;

   3576  1 000333   000002 236000 2                  LDQ     2
         1 000334   000001 356100                    ANSQ    1,,PR0
         1 000335   000340 710000 1                  TRA     s:3579
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:79   

      820     3577    3                   ELSE
      821     3578    3                       SOCK.FLAGS.OOBINLINE = '1'B;

   3578  1 000336   000002 236003                    LDQ     2,DU
         1 000337   000001 256100                    ORSQ    1,,PR0

      822     3579    3                   EXIT CASE_ENTRYFLAG;

   3579  1 000340   001040 710000 1                  TRA     s:3710

      823     3580    3                   SELECT( %XSL_SO_BLOCKING);

      824     3581    3                   OLDPROXY = 0;

   3581  1 000341   200057 450100                    STZ     OLDPROXY,,AUTO

      825     3582    3                   IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.BLOCKING THEN

   3582  1 000342   000020 720100                    LXL0    16,,PR0
         1 000343   000347 601000 1                  TNZ     s:3584
         1 000344   000001 430100                    FSZN    1,,PR0
         1 000345   000347 604000 1                  TMI     s:3584

      826     3583    3                       OLDPROXY = OLDPROXY + 1;

   3583  1 000346   200057 054100                    AOS     OLDPROXY,,AUTO

      827     3584    3                   IF OPTVALINT = 0 THEN

   3584  1 000347   200007 474500                    LDP4    @OPTVAL,,AUTO
         1 000350   400000 235100                    LDA     0,,PR4
         1 000351   000355 601000 1                  TNZ     s:3587

      828     3585    3                       SOCK.FLAGS.BLOCKING = '0'B;

   3585  1 000352   000003 236000 2                  LDQ     3
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:80   
         1 000353   000001 356100                    ANSQ    1,,PR0
         1 000354   000357 710000 1                  TRA     s:3588

      829     3586    3                   ELSE
      830     3587    3                       SOCK.FLAGS.BLOCKING = '1'B;

   3587  1 000355   001000 236003                    LDQ     512,DU
         1 000356   000001 256100                    ORSQ    1,,PR0

      831     3588    3                   GOTO SENDBLOCKFLAG;

   3588  1 000357   000515 710000 1                  TRA     SENDBLOCKFLAG

      832     3589    3                   SELECT( %XSL_SO_NWREADS);

      833     3590    3                   OLDPROXY = 0;

   3590  1 000360   200057 450100                    STZ     OLDPROXY,,AUTO

      834     3591    3                   IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.BLOCKING THEN

   3591  1 000361   000020 720100                    LXL0    16,,PR0
         1 000362   000366 601000 1                  TNZ     s:3593
         1 000363   000001 430100                    FSZN    1,,PR0
         1 000364   000366 604000 1                  TMI     s:3593

      835     3592    3                       OLDPROXY = OLDPROXY + 1;

   3592  1 000365   200057 054100                    AOS     OLDPROXY,,AUTO

      836     3593    3                   SOCK.MAXRDS = OPTVALINT;

   3593  1 000366   200007 474500                    LDP4    @OPTVAL,,AUTO
         1 000367   400000 721100                    LXL1    0,,PR4
         1 000370   000020 441100                    SXL1    16,,PR0

      837     3594    3                   GOTO SENDBLOCKFLAG;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:81   

   3594  1 000371   000515 710000 1                  TRA     SENDBLOCKFLAG

      838     3595    3                   SELECT( %XSL_SO_NWBUFFS);

      839     3596    3                   SOCK.MAXBUF = OPTVALINT;

   3596  1 000372   200007 474500                    LDP4    @OPTVAL,,AUTO
         1 000373   400000 720100                    LXL0    0,,PR4
         1 000374   000020 740100                    STX0    16,,PR0

      840     3597    3                   EXIT CASE_ENTRYFLAG;

   3597  1 000375   001040 710000 1                  TRA     s:3710

      841     3598    3                   END;

      842     3599    2               XSL$SETSOCKOPTRQS = XSL_SETSOCKOPTRQS;

   3599  1 000376   000000 473400 xsym               LDP3    XSL_KEYBUF$
         1 000377   000100 100400                    MLR     fill='000'O
         1 000400   000002 000011 0                  ADSC9   XSL_SETSOCKOPTRQS        cn=0,n=9
         1 000401   300000 000011                    ADSC9   0,,PR3                   cn=0,n=9

      843     3600    2               XSL$SETSOCKOPTRQS.LEVEL = LEVEL;

   3600  1 000402   100000 720100                    LXL0    0,,PR1
         1 000403   300000 440100                    SXL0    0,,PR3

      844     3601    2               XSL$SETSOCKOPTRQS.OPTNAME = OPTNAME;

   3601  1 000404   200006 474500                    LDP4    @OPTNAME,,AUTO
         1 000405   400000 721100                    LXL1    0,,PR4
         1 000406   300001 741100                    STX1    1,,PR3

      845     3602    2               XSL$SETSOCKOPTRQS.OPTLEN = OPTLEN;

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:82   
   3602  1 000407   200010 475500                    LDP5    @OPTLEN,,AUTO
         1 000410   500000 722100                    LXL2    0,,PR5
         1 000411   300001 442100                    SXL2    1,,PR3

      846     3603    2              SUBSTR( XSL$SETSOCKOPTRQS.OPTVAL, 0, OPTLEN) = SUBSTR( OPTVAL, 0, OPTLEN
              3603                        );

   3603  1 000412   500000 723100                    LXL3    0,,PR5
         1 000413   500000 724100                    LXL4    0,,PR5
         1 000414   200007 476500                    LDP6    @OPTVAL,,AUTO
         1 000415   040140 100540                    MLR     fill='040'O
         1 000416   600000 000014                    ADSC9   0,,PR6                   cn=0,n=*X4
         1 000417   300002 000013                    ADSC9   2,,PR3                   cn=0,n=*X3

      847     3604    2               CALL XSL$CL_WRITE( SOCK, OPTLEN+LENGTHC( XSL$SETSOCKOPTRQS)-1);

   3604  1 000420   500000 235100                    LDA     0,,PR5
         1 000421   000010 035007                    ADLA    8,DL
         1 000422   200060 755100                    STA     OLDPROXY+1,,AUTO
         1 000423   200060 637500                    EPPR7   OLDPROXY+1,,AUTO
         1 000424   200063 457500                    STP7    OLDPROXY+4,,AUTO
         1 000425   200054 236100                    LDQ     SOCK$,,AUTO
         1 000426   200062 756100                    STQ     OLDPROXY+3,,AUTO
         1 000427   200062 630500                    EPPR0   OLDPROXY+3,,AUTO
         1 000430   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000431   000000 701000 xent               TSX1    XSL$CL_WRITE
         1 000432   000000 011000                    NOP     0

      848     3605    2               CALL XSL$CL_READ( SOCK);

   3605  1 000433   200054 630500                    EPPR0   SOCK$,,AUTO
         1 000434   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000435   000000 701000 xent               TSX1    XSL$CL_READ
         1 000436   000000 011000                    NOP     0

      849     3606    3               IF XSL$SETSOCKOPTRSP.RESULT < 0 THEN DO;

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:83   
   3606  1 000437   000000 470400 xsym               LDP0    XSL_KEYBUF$
         1 000440   000000 720100                    LXL0    0,,PR0
         1 000441   001040 605000 1                  TPL     s:3710

      850     3607    3                   XSL_ERRNO = XSL$SETSOCKOPTRSP.ERRNO;

   3607  1 000442   000001 236100                    LDQ     1,,PR0
         1 000443   000022 732000                    QRS     18
         1 000444   000000 756000 xsym               STQ     XSL_ERRNO

      851     3608    3                   GOTO BAILOUT;

   3608  1 000445   000244 710000 1                  TRA     BAILOUT

      852     3609    3                   END;
      853     3610    2           CASE( %FCNTL);

      854     3611    3               DO CASE( COMMAND);

   3611  1 000446   200005 470500                    LDP0    @LEVEL,,AUTO
         1 000447   000000 235100                    LDA     0,,PR0
         1 000450   000004 135007                    SBLA    4,DL
         1 000451   000002 115007                    CMPA    2,DL
         1 000452   000454 602005 1                  TNC     s:3611+6,AL
         1 000453   000456 710000 1                  TRA     NOGOOD
         1 000454   000461 710000 1                  TRA     s:3617
         1 000455   000475 710000 1                  TRA     s:3623

      855     3612    3                   CASE( ELSE);

      856     3613    3   NOGOOD:
      857     3614    3                       XSL_ERRNO = %E$INVAL;

   3614  1 000456   000026 235007       NOGOOD       LDA     22,DL
         1 000457   000000 755000 xsym               STA     XSL_ERRNO

      858     3615    3                       GOTO BAILOUT;
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:84   

   3615  1 000460   000244 710000 1                  TRA     BAILOUT

      859     3616    3                   CASE( %XSL_F_GETFL);

      860     3617    3                       IF SOCK.FLAGS.BLOCKING THEN

   3617  1 000461   200054 471500                    LDP1    SOCK$,,AUTO
         1 000462   100001 430100                    FSZN    1,,PR1
         1 000463   000467 605000 1                  TPL     s:3620

      861     3618    3                           RESULT = 0;

   3618  1 000464   200003 473500                    LDP3    @RESULT,,AUTO
         1 000465   300000 450100                    STZ     0,,PR3
         1 000466   000474 710000 1                  TRA     s:3621

      862     3619    3                       ELSE
      863     3620    3                           RESULT = BITBIN( BINBIT( PARM, 36) & BINBIT( %XSL_O_NDELAY,
              3620                                    36));

   3620  1 000467   000010 236007                    LDQ     8,DL
         1 000470   200006 473500                    LDP3    @OPTNAME,,AUTO
         1 000471   300000 376100                    ANQ     0,,PR3
         1 000472   200003 474500                    LDP4    @RESULT,,AUTO
         1 000473   400000 756100                    STQ     0,,PR4

      864     3621    3                       RETURN;

   3621  1 000474   000000 702200 xent               TSX2  ! X66_ARET

      865     3622    3                   CASE( %XSL_F_SETFL);

      866     3623    3                       OLDPROXY = 0;

   3623  1 000475   200057 450100                    STZ     OLDPROXY,,AUTO

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:85   
      867     3624    3                       IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.BLOCKING THEN

   3624  1 000476   200054 471500                    LDP1    SOCK$,,AUTO
         1 000477   100020 720100                    LXL0    16,,PR1
         1 000500   000504 601000 1                  TNZ     s:3626
         1 000501   100001 430100                    FSZN    1,,PR1
         1 000502   000504 604000 1                  TMI     s:3626

      868     3625    3                           OLDPROXY = OLDPROXY + 1;

   3625  1 000503   200057 054100                    AOS     OLDPROXY,,AUTO

      869     3626    3                       IF BINBIT( PARM, 36) & BINBIT( %XSL_O_NDELAY, 36) THEN

   3626  1 000504   000010 236007                    LDQ     8,DL
         1 000505   200006 473500                    LDP3    @OPTNAME,,AUTO
         1 000506   300000 376100                    ANQ     0,,PR3
         1 000507   000513 600000 1                  TZE     s:3629

      870     3627    3                           SOCK.FLAGS.BLOCKING = '0'B;

   3627  1 000510   000003 236000 2                  LDQ     3
         1 000511   100001 356100                    ANSQ    1,,PR1
         1 000512   000515 710000 1                  TRA     SENDBLOCKFLAG

      871     3628    3                       ELSE
      872     3629    3                           SOCK.FLAGS.BLOCKING = '1'B;

   3629  1 000513   001000 236003                    LDQ     512,DU
         1 000514   100001 256100                    ORSQ    1,,PR1

      873     3630    3                   END;

      874     3631    2   SENDBLOCKFLAG:
      875     3632    2               IF NOT SOCK.FLAGS.SOCKET THEN EXIT;

   3632  1 000515   200054 470500       SENDBLOCKFL* LDP0    SOCK$,,AUTO
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:86   
         1 000516   000001 236100                    LDQ     1,,PR0
         1 000517   002000 316003                    CANQ    1024,DU
         1 000520   001040 600000 1                  TZE     s:3710

      876     3633    2               NEWPROXY = 0;

   3633  1 000521   200056 450100                    STZ     NEWPROXY,,AUTO

      877     3634    2               IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.BLOCKING THEN

   3634  1 000522   000020 720100                    LXL0    16,,PR0
         1 000523   000527 601000 1                  TNZ     s:3636
         1 000524   000001 430100                    FSZN    1,,PR0
         1 000525   000527 604000 1                  TMI     s:3636

      878     3635    2                   NEWPROXY = NEWPROXY + 1;

   3635  1 000526   200056 054100                    AOS     NEWPROXY,,AUTO

      879     3636    2               IF NEWPROXY = OLDPROXY THEN EXIT;

   3636  1 000527   200056 236100                    LDQ     NEWPROXY,,AUTO
         1 000530   200057 116100                    CMPQ    OLDPROXY,,AUTO
         1 000531   001040 600000 1                  TZE     s:3710

      880     3637    2               XSL$SETSOCKOPTRQS = XSL_SETSOCKOPTRQS;

   3637  1 000532   000000 471400 xsym               LDP1    XSL_KEYBUF$
         1 000533   000100 100400                    MLR     fill='000'O
         1 000534   000002 000011 0                  ADSC9   XSL_SETSOCKOPTRQS        cn=0,n=9
         1 000535   100000 000011                    ADSC9   0,,PR1                   cn=0,n=9

      881     3638    2               XSL$SETSOCKOPTRQS.LEVEL = %XSL_SOL_SOCKET;

   3638  1 000536   777777 220003                    LDX0    -1,DU
         1 000537   100000 440100                    SXL0    0,,PR1

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:87   
      882     3639    2               XSL$SETSOCKOPTRQS.OPTNAME = %XSL_SO_BLOCKING;

   3639  1 000540   020001 221003                    LDX1    8193,DU
         1 000541   100001 741100                    STX1    1,,PR1

      883     3640    2               XSL$SETSOCKOPTRQS.OPTLEN = 1;

   3640  1 000542   000001 222003                    LDX2    1,DU
         1 000543   100001 442100                    SXL2    1,,PR1

      884     3641    2               IF SOCK.FLAGS.BLOCKING THEN

   3641  1 000544   000001 430100                    FSZN    1,,PR0
         1 000545   000551 605000 1                  TPL     s:3644

      885     3642    2                   XSL$SETSOCKOPTRQS.OPTVAL = BINASC( 1);

   3642  1 000546   001000 236003                    LDQ     512,DU
         1 000547   100002 756100                    STQ     2,,PR1
         1 000550   000553 710000 1                  TRA     s:3645

      886     3643    2               ELSE
      887     3644    2                   XSL$SETSOCKOPTRQS.OPTVAL = BINASC( 0);

   3644  1 000551   000000 236003                    LDQ     0,DU
         1 000552   100002 756100                    STQ     2,,PR1

      888     3645    2               CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$SETSOCKOPTRQS));

   3645  1 000553   000004 236000 2                  LDQ     4
         1 000554   200054 235100                    LDA     SOCK$,,AUTO
         1 000555   200060 757100                    STAQ    OLDPROXY+1,,AUTO
         1 000556   200060 630500                    EPPR0   OLDPROXY+1,,AUTO
         1 000557   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000560   000000 701000 xent               TSX1    XSL$CL_WRITE
         1 000561   000000 011000                    NOP     0

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:88   
      889     3646    2               CALL XSL$CL_READ( SOCK);

   3646  1 000562   200054 630500                    EPPR0   SOCK$,,AUTO
         1 000563   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000564   000000 701000 xent               TSX1    XSL$CL_READ
         1 000565   000000 011000                    NOP     0

      890     3647    3               IF XSL$SETSOCKOPTRSP.RESULT < 0 THEN DO;

   3647  1 000566   000000 470400 xsym               LDP0    XSL_KEYBUF$
         1 000567   000000 720100                    LXL0    0,,PR0
         1 000570   001040 605000 1                  TPL     s:3710

      891     3648    3                   XSL_ERRNO = XSL$SETSOCKOPTRSP.ERRNO;

   3648  1 000571   000001 236100                    LDQ     1,,PR0
         1 000572   000022 732000                    QRS     18
         1 000573   000000 756000 xsym               STQ     XSL_ERRNO

      892     3649    3                   GOTO BAILOUT;

   3649  1 000574   000244 710000 1                  TRA     BAILOUT

      893     3650    3                   END;
      894     3651    2           CASE( %IOCTL);

      895     3652    2               IF NOT SOCK.FLAGS.SOCKET THEN

   3652  1 000575   200054 470500                    LDP0    SOCK$,,AUTO
         1 000576   000001 236100                    LDQ     1,,PR0
         1 000577   002000 316003                    CANQ    1024,DU
         1 000600   000207 600000 1                  TZE     NOTBOUND

      896     3653    2                   GOTO NOTBOUND;
      897     3654    3               DO SELECT( COMMAND);

   3654  1 000601   200005 471500                    LDP1    @LEVEL,,AUTO
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:89   
         1 000602   100000 236100                    LDQ     0,,PR1
         1 000603   000005 116000 2                  CMPQ    5
         1 000604   000617 604000 1                  TMI     s:3654+14
         1 000605   000642 600000 1                  TZE     s:3659
         1 000606   000006 116000 2                  CMPQ    6
         1 000607   000614 604000 1                  TMI     s:3654+11
         1 000610   000643 600000 1                  TZE     s:3661
         1 000611   000007 116000 2                  CMPQ    7
         1 000612   000751 601000 1                  TNZ     SENDIOCTL
         1 000613   000642 710000 1                  TRA     s:3659
         1 000614   000010 116000 2                  CMPQ    8
         1 000615   000751 601000 1                  TNZ     SENDIOCTL
         1 000616   000642 710000 1                  TRA     s:3659
         1 000617   000011 116000 2                  CMPQ    9
         1 000620   000631 604000 1                  TMI     s:3654+24
         1 000621   000662 600000 1                  TZE     s:3670
         1 000622   000012 116000 2                  CMPQ    10
         1 000623   000626 604000 1                  TMI     s:3654+21
         1 000624   000642 600000 1                  TZE     s:3659
         1 000625   000751 710000 1                  TRA     SENDIOCTL
         1 000626   000013 116000 2                  CMPQ    11
         1 000627   000751 601000 1                  TNZ     SENDIOCTL
         1 000630   000727 710000 1                  TRA     s:3685
         1 000631   000014 116000 2                  CMPQ    12
         1 000632   000637 604000 1                  TMI     s:3654+30
         1 000633   000642 600000 1                  TZE     s:3659
         1 000634   000015 116000 2                  CMPQ    13
         1 000635   000751 601000 1                  TNZ     SENDIOCTL
         1 000636   000642 710000 1                  TRA     s:3659
         1 000637   000016 116000 2                  CMPQ    14
         1 000640   000751 601000 1                  TNZ     SENDIOCTL
         1 000641   000642 710000 1                  TRA     s:3659

      898     3655    3                   SELECT( %XSL_FIOCLEX, %XSL_FIONCLEX,

      899     3656    3                     %XSL_FIOASYNC,
      900     3657    3                     %XSL_FIOSETOWN, %XSL_FIOGETOWN,
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:90   
      901     3658    3                     %XSL_SIOCSPGRP, %XSL_SIOCGPGRP);
      902     3659    3                   GOTO NOGOOD;

   3659  1 000642   000456 710000 1                  TRA     NOGOOD

      903     3660    3                   SELECT( %XSL_FIONBIO);

      904     3661    3                   OLDPROXY = 0;

   3661  1 000643   200057 450100                    STZ     OLDPROXY,,AUTO

      905     3662    3                   IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.BLOCKING THEN

   3662  1 000644   000020 720100                    LXL0    16,,PR0
         1 000645   000651 601000 1                  TNZ     s:3664
         1 000646   000001 430100                    FSZN    1,,PR0
         1 000647   000651 604000 1                  TMI     s:3664

      906     3663    3                       OLDPROXY = OLDPROXY + 1;

   3663  1 000650   200057 054100                    AOS     OLDPROXY,,AUTO

      907     3664    3                   IF PARM = 0 THEN

   3664  1 000651   200006 473500                    LDP3    @OPTNAME,,AUTO
         1 000652   300000 235100                    LDA     0,,PR3
         1 000653   000657 601000 1                  TNZ     s:3667

      908     3665    3                       SOCK.FLAGS.BLOCKING = '1'B;

   3665  1 000654   001000 236003                    LDQ     512,DU
         1 000655   000001 256100                    ORSQ    1,,PR0
         1 000656   000661 710000 1                  TRA     s:3668

      909     3666    3                   ELSE
      910     3667    3                       SOCK.FLAGS.BLOCKING = '0'B;

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:91   
   3667  1 000657   000003 236000 2                  LDQ     3
         1 000660   000001 356100                    ANSQ    1,,PR0

      911     3668    3                   GOTO SENDBLOCKFLAG;

   3668  1 000661   000515 710000 1                  TRA     SENDBLOCKFLAG

      912     3669    3                   SELECT( %XSL_FIONREAD);

      913     3670    3                   IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.SELREAD THEN

   3670  1 000662   000020 720100                    LXL0    16,,PR0
         1 000663   000667 601000 1                  TNZ     s:3672
         1 000664   000001 236100                    LDQ     1,,PR0
         1 000665   000040 316003                    CANQ    32,DU
         1 000666   000751 600000 1                  TZE     SENDIOCTL

      914     3671    3                       GOTO SENDIOCTL;
      915     3672    3                   PARM = 0;

   3672  1 000667   200006 473500                    LDP3    @OPTNAME,,AUTO
         1 000670   300000 450100                    STZ     0,,PR3

      916     3673    3                   BUFX = SOCK.BUFHD;

   3673  1 000671   000016 236100                    LDQ     14,,PR0
         1 000672   000022 772000                    QRL     18
         1 000673   200011 756100                    STQ     BUFX,,AUTO

      917     3674    4                   DO WHILE( BUFX ~= 0);

   3674  1 000674   000726 600000 1                  TZE     s:3683

      918     3675    4                       BUF$ = PINCRW( XSL_SOCK$$, BUFX);

   3675  1 000675   200011 236100                    LDQ     BUFX,,AUTO
         1 000676   000022 736000                    QLS     18
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:92   
         1 000677   000000 036000 xsym               ADLQ    XSL_SOCK$$
         1 000700   200012 756100                    STQ     BUF$,,AUTO

      919     3676    4                       IF XSL$DATABUF.FLAGS.BUSY THEN EXIT;

   3676  1 000701   200012 470500                    LDP0    BUF$,,AUTO
         1 000702   000001 234100                    SZN     1,,PR0
         1 000703   000726 604000 1                  TMI     s:3683

      920     3677    4                       IF ( XSL$DATABUF.KEY(1) = %RECVRSP OR

   3677  1 000704   000002 236100                    LDQ     2,,PR0
         1 000705   000777 376003                    ANQ     511,DU
         1 000706   000016 116003                    CMPQ    14,DU
         1 000707   000712 600000 1                  TZE     s:3677+6
         1 000710   000020 116003                    CMPQ    16,DU
         1 000711   000722 601000 1                  TNZ     s:3681
         1 000712   000001 236100                    LDQ     1,,PR0
         1 000713   200000 316003                    CANQ    65536,DU
         1 000714   000722 601000 1                  TNZ     s:3681

      921     3678    4                         XSL$DATABUF.KEY(1) = %RECVFROMRSP) AND
      922     3679    4                         NOT XSL$DATABUF.FLAGS.OOB THEN
      923     3680    4                           PARM = PARM + XSL$DATABUF.LEN;

   3680  1 000715   200006 471500                    LDP1    @OPTNAME,,AUTO
         1 000716   000000 236100                    LDQ     0,,PR0
         1 000717   777777 376007                    ANQ     -1,DL
         1 000720   100000 036100                    ADLQ    0,,PR1
         1 000721   100000 756100                    STQ     0,,PR1

      924     3681    4                       BUFX = XSL$DATABUF.NXT;

   3681  1 000722   000001 236100                    LDQ     1,,PR0
         1 000723   777777 376007                    ANQ     -1,DL
         1 000724   200011 756100                    STQ     BUFX,,AUTO

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:93   
      925     3682    4                       END;

   3682  1 000725   000675 601000 1                  TNZ     s:3675

      926     3683    3                   EXIT CASE_ENTRYFLAG;

   3683  1 000726   001040 710000 1                  TRA     s:3710

      927     3684    3                   SELECT( %XSL_SIOCATMARK);

      928     3685    3                   IF SOCK.MAXRDS = 0 AND NOT SOCK.FLAGS.SELEXCEP THEN

   3685  1 000727   000020 720100                    LXL0    16,,PR0
         1 000730   000734 601000 1                  TNZ     s:3687
         1 000731   000001 236100                    LDQ     1,,PR0
         1 000732   000010 316003                    CANQ    8,DU
         1 000733   000751 600000 1                  TZE     SENDIOCTL

      929     3686    3                       GOTO SENDIOCTL;
      930     3687    3                   RESULT = 0;

   3687  1 000734   200003 473500                    LDP3    @RESULT,,AUTO
         1 000735   300000 450100                    STZ     0,,PR3

      931     3688    3                   BUFX = SOCK.BUFHD;

   3688  1 000736   000016 236100                    LDQ     14,,PR0
         1 000737   000022 772000                    QRL     18
         1 000740   200011 756100                    STQ     BUFX,,AUTO

      932     3689    3                   IF BUFX ~= 0 AND

   3689  1 000741   000750 600000 1                  TZE     s:3692
         1 000742   000000 474400 xsym               LDP4    XSL_SOCK$$
         1 000743   400001 236106                    LDQ     1,QL,PR4
         1 000744   200000 316003                    CANQ    65536,DU
         1 000745   000750 600000 1                  TZE     s:3692
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:94   

      933     3690    3                     PINCRW( XSL_SOCK$$, BUFX)->XSL$DATABUF.FLAGS.OOB THEN
      934     3691    3                       RESULT = 1;

   3691  1 000746   000001 236007                    LDQ     1,DL
         1 000747   300000 756100                    STQ     0,,PR3

      935     3692    3                   EXIT CASE_ENTRYFLAG;

   3692  1 000750   001040 710000 1                  TRA     s:3710

      936     3693    3                   END;

      937     3694    2   SENDIOCTL:
      938     3695    2               XSL$IOCTLRQS = XSL_IOCTLRQS;

   3695  1 000751   000000 473400 xsym  SENDIOCTL    LDP3    XSL_KEYBUF$
         1 000752   000100 100400                    MLR     fill='000'O
         1 000753   000005 000006 0                  ADSC9   XSL_IOCTLRQS             cn=0,n=6
         1 000754   300000 000006                    ADSC9   0,,PR3                   cn=0,n=6

      939     3696    2               XSL$IOCTLRQS.CMDCODE = COMMAND;

   3696  1 000755   000100 100500                    MLR     fill='000'O
         1 000756   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
         1 000757   300000 400004                    ADSC9   0,,PR3                   cn=2,n=4

      940     3697    2               LEN = MOD( COMMAND/262144, 128);

   3697  1 000760   100000 236100                    LDQ     0,,PR1
         1 000761   000001 506003                    DIV     1,DU
         1 000762   000200 506007                    DIV     128,DL
         1 000763   200055 755100                    STA     LEN,,AUTO

      941     3698    2               IF LEN > 0 THEN

   3698  1 000764   000000 115003                    CMPA    0,DU
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:95   
         1 000765   000774 604400 1                  TMOZ    s:3700

      942     3699    2                   SUBSTR( IOCTLDATA, 0, LEN) = PARMCHARS;

   3699  1 000766   200006 474500                    LDP4    @OPTNAME,,AUTO
         1 000767   000000 620005                    EAX0    0,AL
         1 000770   200055 721100                    LXL1    LEN,,AUTO
         1 000771   040140 100540                    MLR     fill='040'O
         1 000772   400000 000010                    ADSC9   0,,PR4                   cn=0,n=*X0
         1 000773   200014 000011                    ADSC9   IOCTLDATA,,AUTO          cn=0,n=*X1

      943     3700    2               CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$IOCTLRQS), LEN, IOCTLDATA);

   3700  1 000774   200014 634500                    EPPR4   IOCTLDATA,,AUTO
         1 000775   200063 454500                    STP4    OLDPROXY+4,,AUTO
         1 000776   200055 635500                    EPPR5   LEN,,AUTO
         1 000777   200062 455500                    STP5    OLDPROXY+3,,AUTO
         1 001000   000001 236000 2                  LDQ     1
         1 001001   200054 235100                    LDA     SOCK$,,AUTO
         1 001002   200060 757100                    STAQ    OLDPROXY+1,,AUTO
         1 001003   200060 630500                    EPPR0   OLDPROXY+1,,AUTO
         1 001004   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001005   000000 701000 xent               TSX1    XSL$CL_WRITE
         1 001006   000000 011000                    NOP     0

      944     3701    2               CALL XSL$CL_READ( SOCK, LEN, IOCTLDATA);

   3701  1 001007   200014 630500                    EPPR0   IOCTLDATA,,AUTO
         1 001010   200062 450500                    STP0    OLDPROXY+3,,AUTO
         1 001011   200055 631500                    EPPR1   LEN,,AUTO
         1 001012   200061 451500                    STP1    OLDPROXY+2,,AUTO
         1 001013   200054 236100                    LDQ     SOCK$,,AUTO
         1 001014   200060 756100                    STQ     OLDPROXY+1,,AUTO
         1 001015   200060 630500                    EPPR0   OLDPROXY+1,,AUTO
         1 001016   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001017   000000 701000 xent               TSX1    XSL$CL_READ
         1 001020   000000 011000                    NOP     0
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:96   

      945     3702    3               IF XSL$IOCTLRSP.RESULT < 0 THEN DO;

   3702  1 001021   000000 470400 xsym               LDP0    XSL_KEYBUF$
         1 001022   000000 720100                    LXL0    0,,PR0
         1 001023   001030 605000 1                  TPL     s:3707

      946     3703    3                   XSL_ERRNO = XSL$IOCTLRSP.ERRNO;

   3703  1 001024   000001 236100                    LDQ     1,,PR0
         1 001025   000022 732000                    QRS     18
         1 001026   000000 756000 xsym               STQ     XSL_ERRNO

      947     3704    3                   GOTO BAILOUT;

   3704  1 001027   000244 710000 1                  TRA     BAILOUT

      948     3705    3                   END;
      949     3706    2               ELSE
      950     3707    2                   IF LEN > 0 THEN

   3707  1 001030   200055 235100                    LDA     LEN,,AUTO
         1 001031   001040 604400 1                  TMOZ    s:3710

      951     3708    2                       PARMCHARS = SUBSTR( IOCTLDATA, 0, LEN);

   3708  1 001032   000000 621005                    EAX1    0,AL
         1 001033   200006 471500                    LDP1    @OPTNAME,,AUTO
         1 001034   200055 722100                    LXL2    LEN,,AUTO
         1 001035   040140 100540                    MLR     fill='040'O
         1 001036   200014 000011                    ADSC9   IOCTLDATA,,AUTO          cn=0,n=*X1
         1 001037   100000 000012                    ADSC9   0,,PR1                   cn=0,n=*X2

      952     3709    2           END;

      953     3710    1       RESULT = %E$SUCCESS;

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:97   
   3710  1 001040   200003 470500                    LDP0    @RESULT,,AUTO
         1 001041   000000 450100                    STZ     0,,PR0

      954     3711    1       RETURN;

   3711  1 001042   000000 702200 xent               TSX2  ! X66_ARET

XSL_GETSOCKOPTRQS
 Sect OctLoc
   0     000   000007 000000   000000 ******                                    ........

XSL_SETSOCKOPTRQS
 Sect OctLoc
   0     002   000027 000000   000000 000000   040*** ******                    ........ ...

XSL_IOCTLRQS
 Sect OctLoc
   0     005   000041 000000   000000 ******                                    .!......

(unnamed)
 Sect OctLoc
   2     000   000000 006000   000010 006000   777775 777777   776777 777777    ................
   2     004   000013 006000   200004 146174   200004 146176   200004 163010    ......f|..f~..s.
   2     010   200004 146175   100004 146177   100004 163011   100004 163007    ..f}@.f.@.s.@.s.
   2     014   040000 146002   100004 146173   040000 146001                     .f.@.f{ .f.
      955     3712    1   END XSL$GETSOCKOPT;
      956     3713        %EOD;

PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:98   
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$GETSOCKOPT.
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:99   

 **** Variables and constants ****

  ****  Section 000 RoData XSL$GETSOCKOPT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(54)    r     1 XSL_GETSOCKOPTRQS          5-0-0/w STRC(54)    r     1 XSL_IOCTLRQS
     2-0-0/w STRC(81)    r     1 XSL_SETSOCKOPTRQS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @LEVEL                    10-0-0/w PTR         r     1 @OPTLEN
     6-0-0/w PTR         r     1 @OPTNAME                   7-0-0/w PTR         r     1 @OPTVAL
     3-0-0/w PTR         r     1 @RESULT                    4-0-0/w PTR         r     1 @SOCK#
    12-0-0/w PTR         r     1 BUF$                      11-0-0/w SBIN        r     1 BUFX
    *0-0-0/w SBIN        r     1 COMMAND                   13-0-0/w SBIN        r     1 ENTRYFLAG
    14-0-0/c CHAR(128)   r     1 IOCTLDATA                 55-0-0/w SBIN        r     1 LEN
    *0-0-0/w SBIN        r     1 LEVEL                     56-0-0/w SBIN        r     1 NEWPROXY
    57-0-0/w SBIN        r     1 OLDPROXY                  *0-0-0/w SBIN        r     1 OPTLEN
    *0-0-0/w SBIN        r     1 OPTNAME                   *0-0-0/c ACHR        r     1 OPTVAL
    *0-0-0/w SBIN        r     1 OPTVALINT                 *0-0-0/w SBIN        r     1 PARM
    *0-0-0/w ACHR        r     1 PARMCHARS                 *0-0-0/w SBIN        r     1 RESULT
    *0-0-0/w SBIN        r     1 SOCK#                     54-0-0/w PTR         r     1 SOCK$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSL_ERRNO                  0-0-0/w PTR         r     1 XSL_KEYBUF$
     0-0-0/w PTR         r     1 XSL_SOCK$                  0-0-0/w PTR         r     1 XSL_SOCK$$

  ****  BASED and DCB variables  ****
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:100  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 SOCK                       0-0-0/w STRC(360)   r     1 XSL$DATABUF
     0-0-0/w STRC(54)    r     1 XSL$GETSOCKOPTRQS          0-0-0/w STRC(81)    r     1 XSL$GETSOCKOPTRSP
     0-0-0/w STRC(54)    r     1 XSL$IOCTLRQS               0-0-0/w STRC(54)    r     1 XSL$IOCTLRSP
     0-0-0/w STRC(81)    r     1 XSL$SETSOCKOPTRQS          0-0-0/w STRC(54)    r     1 XSL$SETSOCKOPTRSP


   Procedure XSL$GETSOCKOPT requires 547 words for executable code.
   Procedure XSL$GETSOCKOPT requires 52 words of local(AUTO) storage.
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:101  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:102  
          MINI XREF LISTING

BAILOUT
      3560**LABEL    3495--CALLALT  3518--CALLALT  3550--GOTO     3608--GOTO     3615--GOTO     3649--GOTO
      3704--GOTO
BUF$
      3455**DCL      1968--IMP-PTR  3675<<ASSIGN   3676>>IF       3677>>IF       3677>>IF       3677>>IF
      3680>>ASSIGN   3681>>ASSIGN
BUFX
      3454**DCL      3673<<ASSIGN   3674>>DOWHILE  3675>>ASSIGN   3681<<ASSIGN   3688<<ASSIGN   3689>>IF
      3689>>IF
CASE_ENTRYFLAG
      3522**LABEL    3529--EXIT     3533--EXIT     3537--EXIT     3541--EXIT     3545--EXIT     3570--EXIT
      3579--EXIT     3597--EXIT     3683--EXIT     3692--EXIT
COMMAND
      3463**DCL      3611>>DOCASE   3654>>DOSELCT  3696>>ASSIGN   3697>>ASSIGN
COMMONDCBN
      3518**LABEL    3479--GOTO     3489--GOTO     3500--GOTO     3510--GOTO
COMMONSOCK
      3495**LABEL    3484--GOTO     3505--GOTO     3515--GOTO
ENTRYFLAG
      3456**DCL      3478<<ASSIGN   3483<<ASSIGN   3488<<ASSIGN   3493<<ASSIGN   3499<<ASSIGN   3504<<ASSIGN
      3509<<ASSIGN   3514<<ASSIGN   3522>>DOCASE
IOCTLDATA
      3461**DCL      3699<<ASSIGN   3700<>CALL     3701<>CALL     3708>>ASSIGN
LATER
      3520**LABEL    3496--GOTO
LEN
      3474**DCL      3467--IMP-SIZ  3697<<ASSIGN   3698>>IF       3699>>ASSIGN   3699>>ASSIGN   3700<>CALL
      3701<>CALL     3707>>IF       3708>>ASSIGN   3708>>ASSIGN
LEVEL
      3462**DCL       443--PROC     3463--REDEF    3481--ENTRY    3486--ENTRY    3491--ENTRY    3498--ENTRY
      3502--ENTRY    3507--ENTRY    3512--ENTRY    3524>>IF       3553>>ASSIGN   3567>>IF       3572>>IF
      3600>>ASSIGN
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:103  
NEWPROXY
      3475**DCL      3633<<ASSIGN   3635<<ASSIGN   3635>>ASSIGN   3636>>IF
NOGOOD
      3614**LABEL    3659--GOTO
NOTBOUND
      3549**LABEL    3568--GOTO     3653--GOTO
OLDPROXY
      3476**DCL      3581<<ASSIGN   3583<<ASSIGN   3583>>ASSIGN   3590<<ASSIGN   3592<<ASSIGN   3592>>ASSIGN
      3623<<ASSIGN   3625<<ASSIGN   3625>>ASSIGN   3636>>IF       3661<<ASSIGN   3663<<ASSIGN   3663>>ASSIGN
OPTLEN
      3464**DCL       443--PROC     3469--IMP-SIZ  3481--ENTRY    3486--ENTRY    3491--ENTRY    3527<<ASSIGN
      3531<<ASSIGN   3535<<ASSIGN   3539<<ASSIGN   3543<<ASSIGN   3563<<ASSIGN   3563>>ASSIGN   3564>>ASSIGN
      3564>>ASSIGN   3564>>ASSIGN   3602>>ASSIGN   3603>>ASSIGN   3603>>ASSIGN   3603>>ASSIGN   3604>>CALL
OPTNAME
      3465**DCL       443--PROC     3466--REDEF    3467--REDEF    3468--REDEF    3481--ENTRY    3486--ENTRY
      3491--ENTRY    3498--ENTRY    3502--ENTRY    3507--ENTRY    3512--ENTRY    3525>>DOSELCT  3554>>ASSIGN
      3567>>IF       3573>>DOSELCT  3601>>ASSIGN
OPTVAL
      3469**DCL       443--PROC     3470--REDEF    3481--ENTRY    3486--ENTRY    3491--ENTRY    3564<<ASSIGN
      3603>>ASSIGN
OPTVALINT
      3470**DCL      3528<<ASSIGN   3532<<ASSIGN   3536<<ASSIGN   3540<<ASSIGN   3544<<ASSIGN   3575>>IF
      3584>>IF       3593>>ASSIGN   3596>>ASSIGN
PARM
      3466**DCL      3620>>ASSIGN   3626>>IF       3664>>IF       3672<<ASSIGN   3680<<ASSIGN   3680>>ASSIGN
PARMCHARS
      3467**DCL      3699>>ASSIGN   3708<<ASSIGN
RESULT
      3471**DCL       443--PROC     3481--ENTRY    3486--ENTRY    3491--ENTRY    3498--ENTRY    3502--ENTRY
      3507--ENTRY    3512--ENTRY    3560<<ASSIGN   3618<<ASSIGN   3620<<ASSIGN   3687<<ASSIGN   3691<<ASSIGN
      3710<<ASSIGN
SENDBLOCKFLAG
      3632**LABEL    3588--GOTO     3594--GOTO     3668--GOTO
SENDIOCTL
      3695**LABEL    3671--GOTO     3686--GOTO
SOCK
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:104  
      1825**DCL      3555<>CALL     3556<>CALL     3604<>CALL     3605<>CALL     3645<>CALL     3646<>CALL
      3700<>CALL     3701<>CALL
SOCK.BUFHD
      1939**DCL      3673>>ASSIGN   3688>>ASSIGN
SOCK.FLAGS.BLOCKING
      1844**DCL      3536>>ASSIGN   3582>>IF       3585<<ASSIGN   3587<<ASSIGN   3591>>IF       3617>>IF
      3624>>IF       3627<<ASSIGN   3629<<ASSIGN   3634>>IF       3641>>IF       3662>>IF       3665<<ASSIGN
      3667<<ASSIGN
SOCK.FLAGS.OOBINLINE
      1852**DCL      3528>>ASSIGN   3576<<ASSIGN   3578<<ASSIGN
SOCK.FLAGS.REUSEADDR
      1845**DCL      3569<<ASSIGN
SOCK.FLAGS.SELEXCEP
      1850**DCL      3685>>IF
SOCK.FLAGS.SELREAD
      1848**DCL      3670>>IF
SOCK.FLAGS.SOCKET
      1843**DCL      3547>>IF       3566>>IF       3632>>IF       3652>>IF
SOCK.MAXBUF
      1943**DCL      3544>>ASSIGN   3596<<ASSIGN
SOCK.MAXRDS
      1944**DCL      3540>>ASSIGN   3582>>IF       3591>>IF       3593<<ASSIGN   3624>>IF       3634>>IF
      3662>>IF       3670>>IF       3685>>IF
SOCK.NBACCEPT_SOCK$
      1947**DCL      1948--REDEF
SOCK.TYPE
      1832**DCL      3532>>ASSIGN
SOCK#
      3472**DCL       443--PROC     3481--ENTRY    3486--ENTRY    3491--ENTRY    3495<>CALL     3498--ENTRY
      3502--ENTRY    3507--ENTRY    3512--ENTRY    3518<>CALL
SOCK$
      3473**DCL      1825--IMP-PTR  3520<<ASSIGN   3528>>ASSIGN   3532>>ASSIGN   3536>>ASSIGN   3540>>ASSIGN
      3544>>ASSIGN   3547>>IF       3555>>CALL     3556>>CALL     3566>>IF       3569>>ASSIGN   3576>>ASSIGN
      3578>>ASSIGN   3582>>IF       3582>>IF       3585>>ASSIGN   3587>>ASSIGN   3591>>IF       3591>>IF
      3593>>ASSIGN   3596>>ASSIGN   3604>>CALL     3605>>CALL     3617>>IF       3624>>IF       3624>>IF
      3627>>ASSIGN   3629>>ASSIGN   3632>>IF       3634>>IF       3634>>IF       3641>>IF       3645>>CALL
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:105  
      3646>>CALL     3652>>IF       3662>>IF       3662>>IF       3665>>ASSIGN   3667>>ASSIGN   3670>>IF
      3670>>IF       3673>>ASSIGN   3685>>IF       3685>>IF       3688>>ASSIGN   3700>>CALL     3701>>CALL
XSL$CL_READ
      3444**DCL-ENT  3556--CALL     3605--CALL     3646--CALL     3701--CALL
XSL$CL_WRITE
      3445**DCL-ENT  3555--CALL     3604--CALL     3645--CALL     3700--CALL
XSL$DATABUF.FLAGS.BUSY
      1978**DCL      3676>>IF
XSL$DATABUF.FLAGS.OOB
      1979**DCL      3677>>IF       3689>>IF
XSL$DATABUF.KEY
      1982**DCL      3677>>IF       3677>>IF
XSL$DATABUF.LEN
      1976**DCL      3680>>ASSIGN
XSL$DATABUF.NXT
      1981**DCL      3681>>ASSIGN
XSL$DCBNPTR
      3446**DCL-ENT  3518--CALL
XSL$GETSOCKOPTRQS
      3240**DCL      3552<<ASSIGN   3555--CALL
XSL$GETSOCKOPTRQS.LEVEL
      3247**DCL      3553<<ASSIGN
XSL$GETSOCKOPTRQS.OPTNAME
      3248**DCL      3554<<ASSIGN
XSL$GETSOCKOPTRSP.ERRNO
      3275**DCL      3558>>ASSIGN
XSL$GETSOCKOPTRSP.OPTLEN
      3276**DCL      3563>>ASSIGN
XSL$GETSOCKOPTRSP.OPTVAL
      3277**DCL      3564>>ASSIGN
XSL$GETSOCKOPTRSP.RESULT
      3274**DCL      3557>>IF
XSL$IOCTLRQS
      3407**DCL      3695<<ASSIGN   3700--CALL
XSL$IOCTLRQS.CMDCODE
      3414**DCL      3696<<ASSIGN
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:106  
XSL$IOCTLRSP.ERRNO
      3441**DCL      3703>>ASSIGN
XSL$IOCTLRSP.RESULT
      3440**DCL      3702>>IF
XSL$SETSOCKOPTRQS
      3325**DCL      3599<<ASSIGN   3604--CALL     3637<<ASSIGN   3645--CALL
XSL$SETSOCKOPTRQS.LEVEL
      3332**DCL      3600<<ASSIGN   3638<<ASSIGN
XSL$SETSOCKOPTRQS.OPTLEN
      3334**DCL      3602<<ASSIGN   3640<<ASSIGN
XSL$SETSOCKOPTRQS.OPTNAME
      3333**DCL      3601<<ASSIGN   3639<<ASSIGN
XSL$SETSOCKOPTRQS.OPTVAL
      3335**DCL      3603<<ASSIGN   3642<<ASSIGN   3644<<ASSIGN
XSL$SETSOCKOPTRSP.ERRNO
      3362**DCL      3607>>ASSIGN   3648>>ASSIGN
XSL$SETSOCKOPTRSP.RESULT
      3361**DCL      3606>>IF       3647>>IF
XSL$SOCKPTR
      3447**DCL-ENT  3495--CALL
XSL_ERRNO
      3449**DCL      3450--REDEF    3549<<ASSIGN   3558<<ASSIGN   3607<<ASSIGN   3614<<ASSIGN   3648<<ASSIGN
      3703<<ASSIGN
XSL_GETSOCKOPTRQS
      3213**DCL      3552>>ASSIGN
XSL_IOCTLRQS
      3381**DCL      3695>>ASSIGN
XSL_KEYBUF$
      3451**DCL      3240--IMP-PTR  3267--IMP-PTR  3325--IMP-PTR  3354--IMP-PTR  3407--IMP-PTR  3433--IMP-PTR
      3552>>ASSIGN   3553>>ASSIGN   3554>>ASSIGN   3557>>IF       3558>>ASSIGN   3563>>ASSIGN   3564>>ASSIGN
      3599>>ASSIGN   3600>>ASSIGN   3601>>ASSIGN   3602>>ASSIGN   3603>>ASSIGN   3606>>IF       3607>>ASSIGN
      3637>>ASSIGN   3638>>ASSIGN   3639>>ASSIGN   3640>>ASSIGN   3642>>ASSIGN   3644>>ASSIGN   3647>>IF
      3648>>ASSIGN   3695>>ASSIGN   3696>>ASSIGN   3702>>IF       3703>>ASSIGN
XSL_SETSOCKOPTRQS
      3296**DCL      3599>>ASSIGN   3637>>ASSIGN
XSL_SOCK$
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:107  
      3450**DCL      3495<>CALL     3518<>CALL     3520>>ASSIGN
XSL_SOCK$$
      3452**DCL      2001--IMP-PTR  3675>>ASSIGN   3689>>IF
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:108  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XSL$GETSOCKOPT File=XSL$SOCKET3.:TCA2TSI                      SUN 11/16/97 14:32 Page:109  
              MINI UREF LISTING

PARMPTR    3468**DCL
XSL$FCNTL    3498**ENTRY
XSL$GETSOCKOPT     443**PROC
XSL$IOCTL    3507**ENTRY
XSL$QFCNTL    3502**ENTRY
XSL$QGETSOCKOPT    3481**ENTRY
XSL$QIOCTL    3512**ENTRY
XSL$QSETSOCKOPT    3491**ENTRY
XSL$SETSOCKOPT    3486**ENTRY
XSL$SOCKHD    2001**DCL

PL6.E3A0      #003=XSL$MSGSDEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:110  
      957        1        /*T***********************************************************/
      958        2        /*T*                                                         */
      959        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      960        4        /*T*                                                         */
      961        5        /*T***********************************************************/
      962        6        XSL$MSGSDEFS: PROC NOAUTO;
      963        7        %INCLUDE XSL_SOCKMSGS_E;
      964       53        %INCLUDE XSL_SOCKMSGS_M;
      965     1186
      966     1187            %XSL$ACCEPTRQS( FPTN=XSL_ACCEPTRQS, STCLASS="CONSTANT SYMDEF");
      967     1213             %XSL$DETACHRQS( FPTN=XSL_DETACHRQS, STCLASS="CONSTANT SYMDEF");
      968     1238            %XSL$GIVEUPRQS( FPTN=XSL_GIVEUPRQS, STCLASS="CONSTANT SYMDEF");
      969     1263             %XSL$RECVRQS( FPTN=XSL_RECVRQS, STCLASS="CONSTANT SYMDEF");
      970     1290             %XSL$RECVFROMRQS( FPTN=XSL_RECVFROMRQS, STCLASS="CONSTANT SYMDEF");
      971     1318
      972     1319    1       DCL XSL_MSGSDEFS SBIN CONSTANT SYMDEF INIT( 0);
      973     1320
      974     1321    1   END XSL$MSGSDEFS;
      975     1322        %EOD;

PL6.E3A0      #003=XSL$MSGSDEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:111  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$MSGSDEFS.

   No code generated for procedure XSL$MSGSDEFS .
   Procedure XSL$MSGSDEFS is declared NOAUTO and requires 2 words of local(STATIC) storage.

PL6.E3A0      #003=XSL$MSGSDEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:112  

 Object Unit name= XSL$MSGSDEFS                               File name= XSL$SOCKET3.:TCA2TOU
 UTS= NOV 16 '97 14:34:02.04 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     2      2  XSL$MSGSDEFS
    1  RoData even  UTS      8     10  XSL$MSGSDEFS
    2   Proc  even  none     0      0  XSL$MSGSDEFS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes     ~proc       0  XSL$MSGSDEFS

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1      0  XSL_ACCEPTRQS                      1      1  XSL_DETACHRQS
    1      2  XSL_GIVEUPRQS                      1      3  XSL_RECVRQS
    1      5  XSL_RECVFROMRQS                    1      7  XSL_MSGSDEFS
PL6.E3A0      #003=XSL$MSGSDEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:113  


(unnamed)
 Sect OctLoc
   1     000   000001 000000   000043 ******   000011 ******   000015 000000    .....#..........
   1     004   000000 ******   000017 000000   000000 000000   000000 000000    ................
      957        1        /*T***********************************************************/
      958        2        /*T*                                                         */
      959        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      960        4        /*T*                                                         */
      961        5        /*T***********************************************************/
      962        6        XSL$MSGSDEFS: PROC NOAUTO;
      963        7        %INCLUDE XSL_SOCKMSGS_E;
      964       53        %INCLUDE XSL_SOCKMSGS_M;
      965     1186
      966     1187            %XSL$ACCEPTRQS( FPTN=XSL_ACCEPTRQS, STCLASS="CONSTANT SYMDEF");
      967     1213             %XSL$DETACHRQS( FPTN=XSL_DETACHRQS, STCLASS="CONSTANT SYMDEF");
      968     1238            %XSL$GIVEUPRQS( FPTN=XSL_GIVEUPRQS, STCLASS="CONSTANT SYMDEF");
      969     1263             %XSL$RECVRQS( FPTN=XSL_RECVRQS, STCLASS="CONSTANT SYMDEF");
      970     1290             %XSL$RECVFROMRQS( FPTN=XSL_RECVFROMRQS, STCLASS="CONSTANT SYMDEF");
      971     1318
      972     1319    1       DCL XSL_MSGSDEFS SBIN CONSTANT SYMDEF INIT( 0);
      973     1320
      974     1321    1   END XSL$MSGSDEFS;
      975     1322        %EOD;

PL6.E3A0      #003=XSL$MSGSDEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:114  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$MSGSDEFS.
PL6.E3A0      #003=XSL$MSGSDEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:115  

 **** Variables and constants ****


   No code generated for procedure XSL$MSGSDEFS .
   Procedure XSL$MSGSDEFS is declared NOAUTO and requires 2 words of local(STATIC) storage.
PL6.E3A0      #003=XSL$MSGSDEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:116  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XSL$MSGSDEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:117  
          MINI XREF LISTING

PL6.E3A0      #003=XSL$MSGSDEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:118  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XSL$MSGSDEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:119  
          MINI UREF LISTING

XSL$MSGSDEFS       6**PROC
XSL_ACCEPTRQS    1204**DCL
XSL_DETACHRQS    1230**DCL
XSL_GIVEUPRQS    1255**DCL
XSL_MSGSDEFS    1319**DCL
XSL_RECVFROMRQS    1307**DCL
XSL_RECVRQS    1280**DCL

PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:120  
      976        1        /*T***********************************************************/
      977        2        /*T*                                                         */
      978        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      979        4        /*T*                                                         */
      980        5        /*T***********************************************************/
      981        6        XSL$DATADEFS: PROC NOAUTO;
      982        7        %INCLUDE XSL_PERR_C;
      983       62
      984       63    1       DCL XSL_DATADEFS SBIN STATIC SYMDEF INIT( 0);  /* so LEMUR libs work */
      985       64    1       DCL XSL_ERRNO SBIN STATIC SYMDEF INIT( %E$SUCCESS);
      986       65    1       DCL XSL_NETMASK SBIN STATIC SYMDEF INIT( -1);
      987       66    1       DCL XSL_SN CHAR(6) STATIC SYMDEF INIT( '      ');
      988       67
      989       68        /***                            ***/
      990       69        /***    GENERIC ERROR STATUS    ***/
      991       70        /***                            ***/
      992       71        /*E*  ERROR:  XSL-E$SUCCESS
      993       72            MESSAGE:The operation succeeded.
      994       73        */
      995       74        /*    ERROR:  XSL-E$FAILURE     -- not a real error like the others --
      996       75            MESSAGE:The operation failed.
      997       76        */
      998       77        /***                            ***/
      999       78        /***    SPECIFIC ERROR CODES    ***/
     1000       79        /***                            ***/
     1001       80        /*E*  ERROR:  XSL-E$ACCES
     1002       81            MESSAGE:Permission denied.
     1003       82        */
     1004       83        /*E*  ERROR:  XSL-E$ADDRINUSE
     1005       84            MESSAGE:Address already in use.
     1006       85        */
     1007       86        /*E*  ERROR:  XSL-E$ADDRNOTAVAIL
     1008       87            MESSAGE:Can't assign requested address.
     1009       88        */
     1010       89        /*E*  ERROR:  XSL-E$AFNOSUPPORT
     1011       90            MESSAGE:Address family not supported.
     1012       91        */
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:121  
     1013       92        /*E*  ERROR:  XSL-E$ALREADY
     1014       93            MESSAGE:Operation already in progress.
     1015       94        */
     1016       95        /*E*  ERROR:  XSL-E$BADF
     1017       96            MESSAGE:Bad file number.
     1018       97        */
     1019       98        /*E*  ERROR:  XSL-E$CONNABORTED
     1020       99            MESSAGE:Software caused connection abort.
     1021      100        */
     1022      101        /*E*  ERROR:  XSL-E$CONNREFUSED
     1023      102            MESSAGE:Connection refused.
     1024      103        */
     1025      104        /*E*  ERROR:  XSL-E$CONNRESET
     1026      105            MESSAGE:Connection reset by peer.
     1027      106        */
     1028      107        /*E*  ERROR:  XSL-E$DESTADDRREQ
     1029      108            MESSAGE:Destination address required.
     1030      109        */
     1031      110        /*E*  ERROR:  XSL-E$FAULT
     1032      111            MESSAGE:Bad address.
     1033      112        */
     1034      113        /*E*  ERROR:  XSL-E$HOSTDOWN
     1035      114            MESSAGE:Host is down.
     1036      115        */
     1037      116        /*E*  ERROR:  XSL-E$HOSTUNREACH
     1038      117            MESSAGE:No route to host.
     1039      118        */
     1040      119        /*E*  ERROR:  XSL-E$INPROGRESS
     1041      120            MESSAGE:Operation now in progress.
     1042      121        */
     1043      122        /*E*  ERROR:  XSL-E$INTR
     1044      123            MESSAGE:Interrupted system call.
     1045      124        */
     1046      125        /*E*  ERROR:  XSL-E$INVAL
     1047      126            MESSAGE:Invalid argument.
     1048      127        */
     1049      128        /*E*  ERROR:  XSL-E$IO
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:122  
     1050      129            MESSAGE:Indeterminate FEP I/O error.
     1051      130        */
     1052      131        /*E*  ERROR:  XSL-E$ISCONN
     1053      132            MESSAGE:Socket is already connected.
     1054      133        */
     1055      134        /*E*  ERROR:  XSL-E$LOOP
     1056      135            MESSAGE:Too many levels of symbolic links.
     1057      136        */
     1058      137        /*E*  ERROR:  XSL-E$MFILE
     1059      138            MESSAGE:Too many links, or not enough socket slots.
     1060      139        */
     1061      140        /*E*  ERROR:  XSL-E$MSGSIZE
     1062      141            MESSAGE:Message too long.
     1063      142        */
     1064      143        /*E*  ERROR:  XSL-E$NAMETOOLONG
     1065      144            MESSAGE:Name too long.
     1066      145        */
     1067      146        /*E*  ERROR:  XSL-E$NETDOWN
     1068      147            MESSAGE:Network is down.
     1069      148        */
     1070      149        /*E*  ERROR:  XSL-E$NETRESET
     1071      150            MESSAGE:Network dropped connection on reset.
     1072      151        */
     1073      152        /*E*  ERROR:  XSL-E$NETUNREACH
     1074      153            MESSAGE:Network is unreachable.
     1075      154        */
     1076      155        /*E*  ERROR:  XSL-E$NOBUFFS
     1077      156            MESSAGE:No buffer space is available.
     1078      157        */
     1079      158        /*E*  ERROR:  XSL-E$NOENT
     1080      159            MESSAGE:Host, network, protocol, or service not found.
     1081      160        */
     1082      161        /*E*  ERROR:  XSL-E$NOPROTOOPT
     1083      162            MESSAGE:Protocol not available.
     1084      163        */
     1085      164        /*E*  ERROR:  XSL-E$NOTBOUND
     1086      165            MESSAGE:Socket is not bound to a FEP.
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:123  
     1087      166        */
     1088      167        /*E*  ERROR:  XSL-E$NOTCONN
     1089      168            MESSAGE:Socket is not connected.
     1090      169        */
     1091      170        /*E*  ERROR:  XSL-E$NOTSOCK
     1092      171            MESSAGE:Socket operation on non-socket.
     1093      172        */
     1094      173        /*E*  ERROR:  XSL-E$OPNOTSUPP
     1095      174            MESSAGE:Operation not supported on socket.
     1096      175        */
     1097      176        /*E*  ERROR:  XSL-E$PERM
     1098      177            MESSAGE:Not owner.
     1099      178        */
     1100      179        /*E*  ERROR:  XSL-E$PFNOSUPPORT
     1101      180            MESSAGE:Protocol family not supported.
     1102      181        */
     1103      182        /*E*  ERROR:  XSL-E$PROTONOSUPPORT
     1104      183            MESSAGE:Protocol not supported.
     1105      184        */
     1106      185        /*E*  ERROR:  XSL-E$PROTOTYPE
     1107      186            MESSAGE:Protocol wrong type for socket.
     1108      187        */
     1109      188        /*E*  ERROR:  XSL-E$SHUTDOWN
     1110      189            MESSAGE:Can't send after socket shutdown.
     1111      190        */
     1112      191        /*E*  ERROR:  XSL-E$SOCKTNOSUPPORT
     1113      192            MESSAGE:Socket type not supported.
     1114      193        */
     1115      194        /*E*  ERROR:  XSL-E$TIMEDOUT
     1116      195            MESSAGE:Connection timed out.
     1117      196        */
     1118      197        /*E*  ERROR:  XSL-E$TOOMANYREFS
     1119      198            MESSAGE:Too many references: can't splice.
     1120      199        */
     1121      200        /*E*  ERROR:  XSL-E$WOULDBLOCK
     1122      201            MESSAGE:Operation would block.
     1123      202        */
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:124  
     1124      203
     1125      204        /*F* NAME: ERRORS
     1126      205        .spb
     1127      206        Most of the Socket Library functions will return an error indication
     1128      207            programs; the error names in PL-6 programs are preceded by E$
     1129      208            rather than E (for example, E$FAILURE instead of EFAILURE).
     1130      209        .ibl D:XSL_ERRORS
     1131      210        */
     1132      211        /*F*  NAME: CHANGES
     1133      212        .FIF
     1134      213        ..::HL "\The following changes were made for the A00 release of the Socket Library."
     1135      214        ..::HL "\o New C functions: bcmp(), bcopy(), bzero()."
     1136      215        ..::HL "\o New C functions: sendmsg(), recvmsg(), writev(), readv()."
     1137      216        ..::HL "\o New C structures: iovec, msghdr, xsl_sockinit."
     1138      217        ..::HL "\o New PL6 procedures: XSL$SENDMSG, XSL$RECVMSG, XSL$WRITEV, XSL$READV."
     1139      218        ..::HL "\o New PL6 structures: XSL$IOVEC, XSL$MSGHDR, XSL_SOCKINIT."
     1140      219        ..::HL "\o Added support for 'raw' socket type."
     1141      220        ..::HL "\o Added support for datagrams of up to 9000 bytes."
     1142      221        ..::HL "\o Added provisions for automatically contacting a name server."
     1143      222        ..::HL "\o Fixed send(), recv(), sendto(), recvfrom() to set errno only on errors."
     1144      223        ..::HL "\o Fixed send(), sendto(), write() to honor advantageous throttling."
     1145      224        ..::HL "\o Fixed some unusual situations to report ENOTBOUND."
     1146      225        ..::HL "\o Fixed asynchronous error reporting."
     1147      226        ..::HL "\o Fixed inet_addr(), inet_lnaof(), inet_netof(), inet_network() prototypes.
               226        "
     1148      227        ..::HL "\o Modified CRAWDAD commands for new features and documented them."
     1149      228        ..::HL "\o Modified defaults for XSL_SOCKINIT."
     1150      229        ..::HL "\o Added information to accept_srvr() and XSL$ACCEPT_SRVR help topics."
     1151      230        ..::HL "\o Added information on errors to select() and XSL$SELECT help topics."
     1152      231        ..::HL "\o Added ERRORS help topic with discussion of asynchronous error reporting."
     1153      232        ..::HL "\o Added XSL_SOCKINIT and xsl_sockinit help topics."
     1154      233        ..::HL "\o Added DEBUGGING help topic."
     1155      234        ..::HL "\o Added XSL$CHAM help topic."
     1156      235        ..::HL "\o Fixed numerous grammatical and typographical errors in help topics."
     1157      236        .FIN
     1158      237        */
     1159      238    1   END XSL$DATADEFS;
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:125  

PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:126  
--  Include file information  --

   XSL_PERR_C.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$DATADEFS.

   No code generated for procedure XSL$DATADEFS .
   Procedure XSL$DATADEFS is declared NOAUTO and requires 6 words of local(STATIC) storage.

    No errors detected in file XSL$SOCKET3.:TCA2TSI    .

PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:127  

 Object Unit name= XSL$DATADEFS                               File name= XSL$SOCKET3.:TCA2TOU
 UTS= NOV 16 '97 14:34:15.08 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     6      6  XSL$DATADEFS
    1   Proc  even  none     0      0  XSL$DATADEFS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes     ~proc       0  XSL$DATADEFS

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      1  XSL_DATADEFS                       0      2  XSL_ERRNO
    0      3  XSL_NETMASK                        0      4  XSL_SN
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:128  


(unnamed)
 Sect OctLoc
   0     000   ****** ******   000000 000000   000000 000000   777777 777777    ................
   0     004   040040 040040   040040 ******                                          ..
      976        1        /*T***********************************************************/
      977        2        /*T*                                                         */
      978        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      979        4        /*T*                                                         */
      980        5        /*T***********************************************************/
      981        6        XSL$DATADEFS: PROC NOAUTO;
      982        7        %INCLUDE XSL_PERR_C;
      983       62
      984       63    1       DCL XSL_DATADEFS SBIN STATIC SYMDEF INIT( 0);  /* so LEMUR libs work */
      985       64    1       DCL XSL_ERRNO SBIN STATIC SYMDEF INIT( %E$SUCCESS);
      986       65    1       DCL XSL_NETMASK SBIN STATIC SYMDEF INIT( -1);
      987       66    1       DCL XSL_SN CHAR(6) STATIC SYMDEF INIT( '      ');
      988       67
      989       68        /***                            ***/
      990       69        /***    GENERIC ERROR STATUS    ***/
      991       70        /***                            ***/
      992       71        /*E*  ERROR:  XSL-E$SUCCESS
      993       72            MESSAGE:The operation succeeded.
      994       73        */
      995       74        /*    ERROR:  XSL-E$FAILURE     -- not a real error like the others --
      996       75            MESSAGE:The operation failed.
      997       76        */
      998       77        /***                            ***/
      999       78        /***    SPECIFIC ERROR CODES    ***/
     1000       79        /***                            ***/
     1001       80        /*E*  ERROR:  XSL-E$ACCES
     1002       81            MESSAGE:Permission denied.
     1003       82        */
     1004       83        /*E*  ERROR:  XSL-E$ADDRINUSE
     1005       84            MESSAGE:Address already in use.
     1006       85        */
     1007       86        /*E*  ERROR:  XSL-E$ADDRNOTAVAIL
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:129  
     1008       87            MESSAGE:Can't assign requested address.
     1009       88        */
     1010       89        /*E*  ERROR:  XSL-E$AFNOSUPPORT
     1011       90            MESSAGE:Address family not supported.
     1012       91        */
     1013       92        /*E*  ERROR:  XSL-E$ALREADY
     1014       93            MESSAGE:Operation already in progress.
     1015       94        */
     1016       95        /*E*  ERROR:  XSL-E$BADF
     1017       96            MESSAGE:Bad file number.
     1018       97        */
     1019       98        /*E*  ERROR:  XSL-E$CONNABORTED
     1020       99            MESSAGE:Software caused connection abort.
     1021      100        */
     1022      101        /*E*  ERROR:  XSL-E$CONNREFUSED
     1023      102            MESSAGE:Connection refused.
     1024      103        */
     1025      104        /*E*  ERROR:  XSL-E$CONNRESET
     1026      105            MESSAGE:Connection reset by peer.
     1027      106        */
     1028      107        /*E*  ERROR:  XSL-E$DESTADDRREQ
     1029      108            MESSAGE:Destination address required.
     1030      109        */
     1031      110        /*E*  ERROR:  XSL-E$FAULT
     1032      111            MESSAGE:Bad address.
     1033      112        */
     1034      113        /*E*  ERROR:  XSL-E$HOSTDOWN
     1035      114            MESSAGE:Host is down.
     1036      115        */
     1037      116        /*E*  ERROR:  XSL-E$HOSTUNREACH
     1038      117            MESSAGE:No route to host.
     1039      118        */
     1040      119        /*E*  ERROR:  XSL-E$INPROGRESS
     1041      120            MESSAGE:Operation now in progress.
     1042      121        */
     1043      122        /*E*  ERROR:  XSL-E$INTR
     1044      123            MESSAGE:Interrupted system call.
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:130  
     1045      124        */
     1046      125        /*E*  ERROR:  XSL-E$INVAL
     1047      126            MESSAGE:Invalid argument.
     1048      127        */
     1049      128        /*E*  ERROR:  XSL-E$IO
     1050      129            MESSAGE:Indeterminate FEP I/O error.
     1051      130        */
     1052      131        /*E*  ERROR:  XSL-E$ISCONN
     1053      132            MESSAGE:Socket is already connected.
     1054      133        */
     1055      134        /*E*  ERROR:  XSL-E$LOOP
     1056      135            MESSAGE:Too many levels of symbolic links.
     1057      136        */
     1058      137        /*E*  ERROR:  XSL-E$MFILE
     1059      138            MESSAGE:Too many links, or not enough socket slots.
     1060      139        */
     1061      140        /*E*  ERROR:  XSL-E$MSGSIZE
     1062      141            MESSAGE:Message too long.
     1063      142        */
     1064      143        /*E*  ERROR:  XSL-E$NAMETOOLONG
     1065      144            MESSAGE:Name too long.
     1066      145        */
     1067      146        /*E*  ERROR:  XSL-E$NETDOWN
     1068      147            MESSAGE:Network is down.
     1069      148        */
     1070      149        /*E*  ERROR:  XSL-E$NETRESET
     1071      150            MESSAGE:Network dropped connection on reset.
     1072      151        */
     1073      152        /*E*  ERROR:  XSL-E$NETUNREACH
     1074      153            MESSAGE:Network is unreachable.
     1075      154        */
     1076      155        /*E*  ERROR:  XSL-E$NOBUFFS
     1077      156            MESSAGE:No buffer space is available.
     1078      157        */
     1079      158        /*E*  ERROR:  XSL-E$NOENT
     1080      159            MESSAGE:Host, network, protocol, or service not found.
     1081      160        */
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:131  
     1082      161        /*E*  ERROR:  XSL-E$NOPROTOOPT
     1083      162            MESSAGE:Protocol not available.
     1084      163        */
     1085      164        /*E*  ERROR:  XSL-E$NOTBOUND
     1086      165            MESSAGE:Socket is not bound to a FEP.
     1087      166        */
     1088      167        /*E*  ERROR:  XSL-E$NOTCONN
     1089      168            MESSAGE:Socket is not connected.
     1090      169        */
     1091      170        /*E*  ERROR:  XSL-E$NOTSOCK
     1092      171            MESSAGE:Socket operation on non-socket.
     1093      172        */
     1094      173        /*E*  ERROR:  XSL-E$OPNOTSUPP
     1095      174            MESSAGE:Operation not supported on socket.
     1096      175        */
     1097      176        /*E*  ERROR:  XSL-E$PERM
     1098      177            MESSAGE:Not owner.
     1099      178        */
     1100      179        /*E*  ERROR:  XSL-E$PFNOSUPPORT
     1101      180            MESSAGE:Protocol family not supported.
     1102      181        */
     1103      182        /*E*  ERROR:  XSL-E$PROTONOSUPPORT
     1104      183            MESSAGE:Protocol not supported.
     1105      184        */
     1106      185        /*E*  ERROR:  XSL-E$PROTOTYPE
     1107      186            MESSAGE:Protocol wrong type for socket.
     1108      187        */
     1109      188        /*E*  ERROR:  XSL-E$SHUTDOWN
     1110      189            MESSAGE:Can't send after socket shutdown.
     1111      190        */
     1112      191        /*E*  ERROR:  XSL-E$SOCKTNOSUPPORT
     1113      192            MESSAGE:Socket type not supported.
     1114      193        */
     1115      194        /*E*  ERROR:  XSL-E$TIMEDOUT
     1116      195            MESSAGE:Connection timed out.
     1117      196        */
     1118      197        /*E*  ERROR:  XSL-E$TOOMANYREFS
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:132  
     1119      198            MESSAGE:Too many references: can't splice.
     1120      199        */
     1121      200        /*E*  ERROR:  XSL-E$WOULDBLOCK
     1122      201            MESSAGE:Operation would block.
     1123      202        */
     1124      203
     1125      204        /*F* NAME: ERRORS
     1126      205        .spb
     1127      206        Most of the Socket Library functions will return an error indication
     1128      207            programs; the error names in PL-6 programs are preceded by E$
     1129      208            rather than E (for example, E$FAILURE instead of EFAILURE).
     1130      209        .ibl D:XSL_ERRORS
     1131      210        */
     1132      211        /*F*  NAME: CHANGES
     1133      212        .FIF
     1134      213       ..::HL "\The following changes were made for the A00 release of the Socket Library."
     1135      214        ..::HL "\o New C functions: bcmp(), bcopy(), bzero()."
     1136      215        ..::HL "\o New C functions: sendmsg(), recvmsg(), writev(), readv()."
     1137      216        ..::HL "\o New C structures: iovec, msghdr, xsl_sockinit."
     1138      217        ..::HL "\o New PL6 procedures: XSL$SENDMSG, XSL$RECVMSG, XSL$WRITEV, XSL$READV."
     1139      218        ..::HL "\o New PL6 structures: XSL$IOVEC, XSL$MSGHDR, XSL_SOCKINIT."
     1140      219        ..::HL "\o Added support for 'raw' socket type."
     1141      220        ..::HL "\o Added support for datagrams of up to 9000 bytes."
     1142      221        ..::HL "\o Added provisions for automatically contacting a name server."
     1143      222        ..::HL "\o Fixed send(), recv(), sendto(), recvfrom() to set errno only on errors."
     1144      223        ..::HL "\o Fixed send(), sendto(), write() to honor advantageous throttling."
     1145      224        ..::HL "\o Fixed some unusual situations to report ENOTBOUND."
     1146      225        ..::HL "\o Fixed asynchronous error reporting."
     1147      226       ..::HL "\o Fixed inet_addr(), inet_lnaof(), inet_netof(), inet_network() prototypes.
               226        "
     1148      227        ..::HL "\o Modified CRAWDAD commands for new features and documented them."
     1149      228        ..::HL "\o Modified defaults for XSL_SOCKINIT."
     1150      229        ..::HL "\o Added information to accept_srvr() and XSL$ACCEPT_SRVR help topics."
     1151      230        ..::HL "\o Added information on errors to select() and XSL$SELECT help topics."
     1152      231       ..::HL "\o Added ERRORS help topic with discussion of asynchronous error reporting."
     1153      232        ..::HL "\o Added XSL_SOCKINIT and xsl_sockinit help topics."
     1154      233        ..::HL "\o Added DEBUGGING help topic."
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:133  
     1155      234        ..::HL "\o Added XSL$CHAM help topic."
     1156      235        ..::HL "\o Fixed numerous grammatical and typographical errors in help topics."
     1157      236        .FIN
     1158      237        */
     1159      238    1   END XSL$DATADEFS;

PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:134  
--  Include file information  --

   XSL_PERR_C.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$DATADEFS.
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:135  

 **** Variables and constants ****


   No code generated for procedure XSL$DATADEFS .
   Procedure XSL$DATADEFS is declared NOAUTO and requires 6 words of local(STATIC) storage.

    No errors detected in file XSL$SOCKET3.:TCA2TSI    .
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:136  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:137  
          MINI XREF LISTING

PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:138  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=XSL$DATADEFS File=XSL$SOCKET3.:TCA2TSI                        SUN 11/16/97 14:34 Page:139  
          MINI UREF LISTING

XSL$DATADEFS       6**PROC
XSL_DATADEFS      63**DCL
XSL_ERRNO      64**DCL
XSL_NETMASK      65**DCL
XSL_SN      66**DCL
