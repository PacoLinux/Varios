/*M* EMIT.X - puts errormessage files into textual form */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
EMIT:   PROC MAIN;
/*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: J.L.Joseph, LADC
                                        Date: 5/87
                                                                  */
%SET LISTSUB='1'B;
%SUB TRUE#='1'B /*TRUE#*/;
%SUB FALSE#='0'B /*FALSE#*/;
 
%INCLUDE CP_6;
%INCLUDE B_ERRORS_C;
%INCLUDE B$JIT_C;
     %INCLUDE XU_MACRO_C;
     %INCLUDE XU_SUBS_C;
     %INCLUDE XU_PERR_C;
 
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$SI$ PTR STATIC;
DCL EMIT_NODES SBIN WORD SYMREF;
DCL X$PARSE ENTRY(1) ALTRET;
DCL B$TCB$ PTR SYMREF;
DCL B$JIT$ PTR SYMREF;
 
%F$DCB;
%B$JIT0;
%U$JIT1;
%A$JIT6X;
 
%FPT_READ (FPTN=READ_SI,
               DCB=M$SI,
               BUF=ERRMSG_BUF,
               KEYR=YES,
               KEY=KEY_BUF);
 
%FPT_WRITE (FPTN=WRITE_LO,
               DCB=M$LO,
               BUF=CVT_BUF);
 
%FPT_CLOSE (FPTN=CLOSE_LO,
               DCB=M$LO,
               DISP=SAVE);
 
DCL ERRMSG_BUF CHAR(190) STATIC SYMDEF;
DCL CVT_BUF CHAR(190) STATIC SYMDEF;
DCL 1 KEY_BUF STATIC CALIGNED,
       2 LN UBIN(9) CALIGNED,
       2 TX CHAR(12) CALIGNED;
 
DCL 1 CODE_ STATIC UNAL,
       2 FCG(0:2) UBIN(6) UNAL,
       2 MON BIT(1) UNAL,
       2 ERRCODE UBIN(14) UNAL,
       2 SEVLEV UBIN(3) UNAL,
       2 CNT UBIN(9) UNAL;
 
DCL ERRCODE REDEF CODE_ CHAR(5);
DCL 1 CODESV_ STATIC UNAL,
       2 FCG(0:2) UBIN(6) UNAL,
       2 MON BIT(1) UNAL,
       2 ERRCODE UBIN(14) UNAL,
       2 SEVLEV UBIN(3) UNAL,
       2 CNT UBIN(9) UNAL;
 
DCL ERRCODESV REDEF CODESV_ CHAR(5);
DCL ERRCODE_R BIT(36) STATIC CALIGNED INIT('777777777777'O);
DCL ERRCODE_RESET REDEF ERRCODE_R CHAR(4);
DCL I SBIN;
DCL J SBIN;
DCL TEMPSTR CHAR(6) STATIC SYMDEF;
DCL MSGPND BIT(1) ALIGNED STATIC;
DCL MONONLY_ BIT(1) ALIGNED STATIC INIT(FALSE#);
DCL FCGSIZE_ UBIN WORD STATIC INIT(0);
DCL FCGSTRING_ CHAR(4) STATIC;
DCL EMIT_WORKSPACE (0:255) UBIN WORD STATIC;
 
     %B$TCB;
 
     %B$ALT;
 
%SUB B$ALT=B$TCB$->B$TCB.ALT$->B$ALT;
 
     %PARSE$SYM     (NAME=EMIT$SYM,
                         STCLASS="BASED");
 
     %P_PCB         (NAME=EMIT_PCB,
                         STCLASS="STATIC SYMDEF",
                         R=NIL,
                         W=EMIT_WORKSPACE,
                         U$=NIL,
                         WSZ=50,
                         N#=0);
 
     %PARSE$OUT     (NAME=EMIT$OUTBLK,
                         STCLASS="BASED");
 
 
 
%EJECT;
     IF B$JIT$->B$JIT.CCARS > B$JIT$->B$JIT.CCDISP
     THEN
     DO;                                /* MUST BE OPTIONS ON CMD LINE */
 
        EMIT_PCB.TEXT$ = PINCRC(ADDR(B$JIT.CCBUF),B$JIT.CCDISP+1);
        EMIT_PCB.NCHARS = B$JIT.CCARS - B$JIT.CCDISP - 1;
        EMIT_PCB.ROOT$ = ADDR(EMIT_NODES);
 
        CALL X$PARSE (EMIT_PCB)
 
        WHENALTRETURN
        DO;
/*         CALL PARSE_ERROR(1); */
           CALL M$XXX;
           END;                         /* DO IF PARSE ERROR */
 
        DO I = 0 TO EMIT_PCB.OUT$ -> EMIT$OUTBLK.NSUBLKS - 1;
 
           DO CASE (EMIT_PCB.OUT$ -> EMIT$OUTBLK.SUBLK$(I) ->
              EMIT$OUTBLK.CODE);
 
           CASE (1);
              MONONLY_ = TRUE#;
 
 
           CASE (2);
              FCGSTRING_=
                 EMIT_PCB.OUT$ -> EMIT$OUTBLK.SUBLK$(I) ->
                 EMIT$OUTBLK.SUBLK$(0) -> EMIT$SYM.TEXT;
              FCGSIZE_ = EMIT_PCB.OUT$ -> EMIT$OUTBLK.SUBLK$(I) ->
                 EMIT$OUTBLK.SUBLK$(0) -> EMIT$SYM.COUNT;
 
           END;                         /* DO CASE ON PARSE.NCODE */
 
           END;                         /* DO I = 0 TO NSUBLKS - 1 */
 
        END;                            /* DO IF OPTIONS ON CMD LINE */
 
 
     M$SI$=DCBADDR(DCBNUM(M$SI));
     ERRCODESV=ERRCODE_RESET;
     MSGPND='0'B;
 
     DO WHILE ('1'B);
 
TOP:    ;
        CALL M$READ (READ_SI)
        WHENALTRETURN
        DO;
           IF B$ALT.ERR.CODE = %E$EOF
           THEN
           DO;
              CALL CLOSE_MESSAGE;
              CALL M$CLOSE (CLOSE_LO);
              CALL M$EXIT;
              END;
           IF B$ALT.ERR.CODE = %E$LD
           THEN
              GOTO TOP;
           CALL M$MERC;
           END;
 
        IF KEY_BUF.LN ~= 5
        THEN
                                        /* ERROR, SOMEDAY? */
           GOTO TOP;
        ERRCODE = SUBSTR(KEY_BUF.TX,0,5);
/*      IF SUBSTR(ERRCODE,0,1)=BITASC('000'O) AND
           SUBSTR(ERRCODE,1,1)=BITASC('000'O)
        THEN
        DO;
           ERRCODESV=ERRCODE_RESET;
           GOTO TOP;
           END; */
 
        IF SUBSTR(ERRCODE,0,3) ~= SUBSTR(ERRCODESV,0,3)
        THEN
        DO;
                                        /* New message */
           CALL CLOSE_MESSAGE;
           IF CODE_.MON ~= MONONLY_
           THEN
              GOTO TOP;
           CALL INIT_MESSAGE WHENALTRETURN DO; GOTO TOP; END;
           ERRCODESV = ERRCODE;
           GOTO TOP;
           END;
                                        /* here, fcg is equal,
                                            so check err code */
        IF CODE_.ERRCODE ~= CODESV_.ERRCODE
        THEN
        DO;
           CALL CLOSE_MESSAGE;
           IF CODE_.MON ~= MONONLY_
           THEN
              GOTO TOP;
           CALL INIT_MESSAGE WHENALTRETURN DO; GOTO TOP; END;
           ERRCODESV = ERRCODE;
           GOTO TOP;
           END;
 
                                        /* here, fcg and code are
                                             equal. if sev is
                                             different, then
                                             "msglvl" changes */
        IF CODE_.SEVLEV ~= CODESV_.SEVLEV
        THEN
        DO;
           CALL HIGHER_LEV;
           ERRCODESV = ERRCODE;
           GOTO TOP;
           END;
 
                                        /* here, all factors are
                                             equal, assume that
                                             the counter is the
                                             only thing that
                                             changed, and just
                                             add the text to
                                             the current msg */
        CALL ADD_TEXT;
 
 
        END;                            /* DO FOREVER */
 
ADD_TEXT: PROC;
 
     CVT_BUF = ' ';
     CALL INSERT (CVT_BUF,13,,
        SUBSTR(ERRMSG_BUF,1,M$SI$->F$DCB.ARS#-1));
     CALL WRITE (CVT_BUF,M$SI$->F$DCB.ARS#-1+14);
 
     RETURN;
 
END ADD_TEXT;
 
HIGHER_LEV: PROC;
 
     CVT_BUF = '    MESSAGE';
     CALL BINCHAR(TEMPSTR,CODE_.SEVLEV);
     CALL INSERT(CVT_BUF,11,1,SUBSTR(TEMPSTR,4,1));
     CALL INSERT(CVT_BUF,12,2,': ');
     CALL INSERT (CVT_BUF,13,,
        SUBSTR(ERRMSG_BUF,1,M$SI$->F$DCB.ARS#-1));
     CALL WRITE (CVT_BUF,M$SI$->F$DCB.ARS#-1+14);
     MSGPND='1'B;
 
     RETURN;
 
END HIGHER_LEV;
INIT_MESSAGE: PROC ALTRET;
 
 
     CVT_BUF = '     ERROR: ';
 
     DO I=0 TO 2;
        J = CODE_.FCG(I);
        IF J<48 THEN J=J+64;
        IF J=64 THEN J=32;
        CALL INSERT (CVT_BUF, 12+I, 1, BINASC(J));
        END;
     IF FCGSIZE_ ~= 0
     THEN
     DO;
        IF SUBSTR(CVT_BUF,12,FCGSIZE_) ~=
           SUBSTR(FCGSTRING_,0,FCGSIZE_)
        THEN
           ALTRETURN;
        END;                            /* DO IF TESTING FCG */
 
     CALL INSERT(CVT_BUF,15,1,'-');
     IF CODE_.MON
     THEN
     DO;
/*      CALL INSERT(CVT_BUF,16,1,'M'); */
        END;
     CALL BINCHAR(TEMPSTR,CODE_.ERRCODE);
     CALL INSERT (CVT_BUF,16,6,TEMPSTR);
     CALL INSERT (CVT_BUF,22,1,'-');
     CALL INSERT (CVT_BUF,23,1,'0');
     CALL WRITE('/*E* ',5);
     CALL WRITE(CVT_BUF,25);
     CVT_BUF = '     MESSAGE: ';
     CALL INSERT (CVT_BUF,13,,
        SUBSTR(ERRMSG_BUF,1,M$SI$->F$DCB.ARS#-1));
     CALL WRITE (CVT_BUF,M$SI$->F$DCB.ARS#-1+14);
     MSGPND='1'B;
 
     RETURN;
 
END INIT_MESSAGE;
 
CLOSE_MESSAGE: PROC;
 
     IF MSGPND
     THEN
     DO;
        MSGPND='0'B;
        CALL WRITE ('*/',2);
        END;
     RETURN;
 
END CLOSE_MESSAGE;
 
 
WRITE: PROC (BUF_, SIZE_);
 
DCL BUF_ CHAR(190);
DCL SIZE_ UBIN;
 
     WRITE_LO.BUF_ = VECTOR(SUBSTR(BUF_,0,SIZE_));
     CALL M$WRITE (WRITE_LO);
     RETURN;
 
END WRITE;
END EMIT;
