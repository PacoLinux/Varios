VERSION A01

PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:1    
        1        1        /*M*    XSS$CLOCK       Clock routines for the Session layer            */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DDA */
        8        8        /*F*    NAME:   XSS$CLOCK
        9        9                DESCRIPTION:
       10       10                    This routine is called to start and stop the Session timer TIM
       11       11                    for a particular connection context.  The timer is used when a
       12       12                    disconnect is issued, so that the context can be thrown away
       13       13                    even if the disconnect is not acknowledged by the other end of
       14       14                    the connection.
       15       15        */
       16       16        XSS$CLOCK: PROC( FLAG, XSCID);
       17       17        %INCLUDE CP_6;
       18     5576            %FPT_TIME( SOURCE=CLOCK, TSTAMP=XUTS);
       19     5595        %INCLUDE K_ADDRESS_M;
       20     6098        %INCLUDE XSS_SESSION_E;
       21     6663        %INCLUDE XSS_INTERNAL_E;
       22     6961        %INCLUDE XSS_INTERNAL_M;
       23     7550            %XSS$SCTX( NAME=SCTX, STCLASS="BASED( CTX$)");
       24     7984        %EQU TIMERVALUE = 12000;  /* two minutes, in .01 second units */
       25     7985
       26     7986    1       DCL XSS$CTXPTR ENTRY(2) ALTRET;
       27     7987    1       DCL XUD$UTS_ADJUST ENTRY(3) ALTRET;
       28     7988
       29     7989    1       DCL XSS_ALARMCOUNT SBIN STATIC SYMDEF INIT( 0);
       30     7990    1       DCL XSS_ALARMHEAD SBIN STATIC SYMDEF INIT( %NONE);
       31     7991    1       DCL 1 XSS_ALARMS(0:%MAXALARMS) STATIC SYMDEF,
       32     7992    1            2 XUTS UBIN,
       33     7993    1            2 NEXT UBIN HALF UNAL,
       34     7994    1            2 PREV UBIN HALF UNAL;
       35     7995
       36     7996    1       DCL CTX$ PTR;
       37     7997    1       DCL FLAG UBIN;
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:2    
       38     7998    1       DCL I UBIN;
       39     7999    1       DCL SCID SBIN;
       40     8000    1       DCL XSCID UBIN BYTE CALIGNED;
       41     8001    1       DCL XUTS UBIN STATIC;
       42     8002
       43     8003    1       SCID = XSCID;
       44     8004    1       CALL XSS$CTXPTR( SCID, CTX$);
       45     8005    2       IF FLAG = %SETCLK THEN DO;
       46     8006                /* slide this request into the queue */
       47     8007    2           SCTX.ALARM = %TRUE;
       48     8008    2           CALL M$TIME( FPT_TIME);
       49     8009    2           CALL XUD$UTS_ADJUST( XUTS, XUTS, %TIMERVALUE);
       50     8010    3           IF XSS_ALARMHEAD = %NONE THEN DO;
       51     8011                    /* first (only) item in queue */
       52     8012    3               XSS_ALARMS.NEXT( SCID) = %NONE;
       53     8013    3               XSS_ALARMS.PREV( SCID) = %NONE;
       54     8014    3               XSS_ALARMS.XUTS( SCID) = XUTS;
       55     8015    3               XSS_ALARMHEAD = SCID;
       56     8016    3               XSS_ALARMCOUNT = 1 + XSS_ALARMCOUNT;
       57     8017    3               END;
       58     8018    3           ELSE DO;
       59     8019                    /* insert at appropriate place in queue */
       60     8020    3               I = XSS_ALARMHEAD;
       61     8021    4               DO WHILE( XUTS < XSS_ALARMS.XUTS( I));
       62     8022    5                   IF XSS_ALARMS.NEXT( I) = %NONE THEN DO;
       63     8023                            /* expire time puts it at the end of the queue */
       64     8024    5                       XSS_ALARMS.NEXT( I) = SCID;
       65     8025    5                       XSS_ALARMS.NEXT( SCID) = %NONE;
       66     8026    5                       XSS_ALARMS.PREV( SCID) = I;
       67     8027    5                       XSS_ALARMS.XUTS( SCID) = XUTS;
       68     8028    5                       XSS_ALARMCOUNT = 1 + XSS_ALARMCOUNT;
       69     8029    5                       RETURN;
       70     8030    5                       END;
       71     8031    4                   I = XSS_ALARMS.NEXT( I);
       72     8032    4                   END;
       73     8033                    /* expire time puts it before the entry we're pointing at */
       74     8034    3               XSS_ALARMS.PREV( SCID) = XSS_ALARMS.PREV( I);
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:3    
       75     8035    3               IF XSS_ALARMS.PREV( SCID) = %NONE THEN
       76     8036    3                   XSS_ALARMHEAD = SCID;
       77     8037    3               ELSE
       78     8038    3                   XSS_ALARMS.NEXT( XSS_ALARMS.PREV( SCID)) = SCID;
       79     8039    3               XSS_ALARMS.PREV( I) = SCID;
       80     8040    3               XSS_ALARMS.NEXT( SCID) = I;
       81     8041    3               XSS_ALARMS.XUTS( SCID) = XUTS;
       82     8042    3               XSS_ALARMCOUNT = 1 + XSS_ALARMCOUNT;
       83     8043    3               END;
       84     8044    2           END;
       85     8045    2       ELSE DO;
       86     8046                /* remove a previous request from the queue */
       87     8047    2           SCTX.ALARM = %FALSE;
       88     8048    2           IF XSS_ALARMS.PREV( SCID) = %NONE THEN
       89     8049    2               XSS_ALARMHEAD = XSS_ALARMS.NEXT( SCID);
       90     8050    2           ELSE
       91     8051    2               XSS_ALARMS.NEXT( XSS_ALARMS.PREV( SCID)) = XSS_ALARMS.NEXT( SCID);
       92     8052    2           IF XSS_ALARMS.NEXT( SCID) ~= %NONE THEN
       93     8053    2               XSS_ALARMS.PREV( XSS_ALARMS.NEXT( SCID)) = XSS_ALARMS.PREV( SCID);
       94     8054    2           XSS_ALARMS.NEXT( SCID) = %NONE;
       95     8055    2           XSS_ALARMS.PREV( SCID) = %NONE;
       96     8056    2           XSS_ALARMS.XUTS( SCID) = 0;
       97     8057    2           XSS_ALARMCOUNT = XSS_ALARMCOUNT - 1;
       98     8058    2           END;
       99     8059    1       RETURN;
      100     8060
      101     8061    1       END XSS$CLOCK;
      102     8062        %EOD;

PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:4    
--  Include file information  --

   XSS_INTERNAL_M.:XSA1TOU  is referenced.
   XSS_INTERNAL_E.:XSA1TOU  is referenced.
   XSS_SESSION_E.:XSA1TOU  is referenced.
   K_ADDRESS_M.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XSS$CLOCK.

   Procedure XSS$CLOCK requires 126 words for executable code.
   Procedure XSS$CLOCK requires 10 words of local(AUTO) storage.

PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:5    

 Object Unit name= XSS$CLOCK                                  File name= XSS$CLOCK.:XSA1TOU
 UTS= OCT 01 '97 12:07:45.00 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    81    121  XSS$CLOCK
    2   Proc  even  none   126    176  XSS$CLOCK
    3  RoData even  none     7      7  XSS$CLOCK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        2  XSS$CLOCK

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1     14  XSS_ALARMCOUNT                     1     15  XSS_ALARMHEAD
    1     16  XSS_ALARMS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSS$CTXPTR
 yes     yes           Std       3 XUD$UTS_ADJUST
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:6    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:7    


        1        1        /*M*    XSS$CLOCK       Clock routines for the Session layer            */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DDA */
        8        8        /*F*    NAME:   XSS$CLOCK
        9        9                DESCRIPTION:
       10       10                    This routine is called to start and stop the Session timer TIM
       11       11                    for a particular connection context.  The timer is used when a
       12       12                    disconnect is issued, so that the context can be thrown away
       13       13                    even if the disconnect is not acknowledged by the other end of
       14       14                    the connection.
       15       15        */
       16       16        XSS$CLOCK: PROC( FLAG, XSCID);

     16  2 000000   000000 700200 xent  XSS$CLOCK    TSX0  ! X66_AUTO_2
         2 000001   000012 000002                    ZERO    10,2

       17       17        %INCLUDE CP_6;
       18     5576            %FPT_TIME( SOURCE=CLOCK, TSTAMP=XUTS);
       19     5595        %INCLUDE K_ADDRESS_M;
       20     6098        %INCLUDE XSS_SESSION_E;
       21     6663        %INCLUDE XSS_INTERNAL_E;
       22     6961        %INCLUDE XSS_INTERNAL_M;
       23     7550            %XSS$SCTX( NAME=SCTX, STCLASS="BASED( CTX$)");
       24     7984        %EQU TIMERVALUE = 12000;  /* two minutes, in .01 second units */
       25     7985
       26     7986    1       DCL XSS$CTXPTR ENTRY(2) ALTRET;
       27     7987    1       DCL XUD$UTS_ADJUST ENTRY(3) ALTRET;
       28     7988
       29     7989    1       DCL XSS_ALARMCOUNT SBIN STATIC SYMDEF INIT( 0);
       30     7990    1       DCL XSS_ALARMHEAD SBIN STATIC SYMDEF INIT( %NONE);
       31     7991    1       DCL 1 XSS_ALARMS(0:%MAXALARMS) STATIC SYMDEF,
       32     7992    1            2 XUTS UBIN,
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:8    
       33     7993    1            2 NEXT UBIN HALF UNAL,
       34     7994    1            2 PREV UBIN HALF UNAL;
       35     7995
       36     7996    1       DCL CTX$ PTR;
       37     7997    1       DCL FLAG UBIN;
       38     7998    1       DCL I UBIN;
       39     7999    1       DCL SCID SBIN;
       40     8000    1       DCL XSCID UBIN BYTE CALIGNED;
       41     8001    1       DCL XUTS UBIN STATIC;
       42     8002
       43     8003    1       SCID = XSCID;

   8003  2 000002   200004 470500                    LDP0    @XSCID,,AUTO
         2 000003   000100 101500                    MRL     fill='000'O
         2 000004   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000005   200007 000004                    ADSC9   SCID,,AUTO               cn=0,n=4

       44     8004    1       CALL XSS$CTXPTR( SCID, CTX$);

   8004  2 000006   200005 631500                    EPPR1   CTX$,,AUTO
         2 000007   200011 451500                    STP1    SCID+2,,AUTO
         2 000010   200007 633500                    EPPR3   SCID,,AUTO
         2 000011   200010 453500                    STP3    SCID+1,,AUTO
         2 000012   200010 630500                    EPPR0   SCID+1,,AUTO
         2 000013   000000 631400 3                  EPPR1   0
         2 000014   000000 701000 xent               TSX1    XSS$CTXPTR
         2 000015   000000 011000                    NOP     0

       45     8005    2       IF FLAG = %SETCLK THEN DO;

   8005  2 000016   200003 470500                    LDP0    @FLAG,,AUTO
         2 000017   000000 235100                    LDA     0,,PR0
         2 000020   000001 115007                    CMPA    1,DL
         2 000021   000136 601000 2                  TNZ     s:8047

       46     8006                /* slide this request into the queue */
       47     8007    2           SCTX.ALARM = %TRUE;
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:9    

   8007  2 000022   200005 471500                    LDP1    CTX$,,AUTO
         2 000023   010000 236007                    LDQ     4096,DL
         2 000024   100013 256100                    ORSQ    11,,PR1

       48     8008    2           CALL M$TIME( FPT_TIME);

   8008  2 000025   000000 630400 1                  EPPR0   FPT_TIME
         2 000026   020004 713400                    CLIMB   8196
         2 000027   402000 401760                    pmme    nvectors=5

       49     8009    2           CALL XUD$UTS_ADJUST( XUTS, XUTS, %TIMERVALUE);

   8009  2 000030   000003 630400 3                  EPPR0   3
         2 000031   000001 631400 3                  EPPR1   1
         2 000032   000000 701000 xent               TSX1    XUD$UTS_ADJUST
         2 000033   000000 011000                    NOP     0

       50     8010    3           IF XSS_ALARMHEAD = %NONE THEN DO;

   8010  2 000034   000015 235000 1                  LDA     XSS_ALARMHEAD
         2 000035   000051 601000 2                  TNZ     s:8020

       51     8011                    /* first (only) item in queue */
       52     8012    3               XSS_ALARMS.NEXT( SCID) = %NONE;

   8012  2 000036   200007 236100                    LDQ     SCID,,AUTO
         2 000037   000001 736000                    QLS     1
         2 000040   000000 220003                    LDX0    0,DU
         2 000041   000017 740006 1                  STX0    XSS_ALARMS+1,QL

       53     8013    3               XSS_ALARMS.PREV( SCID) = %NONE;

   8013  2 000042   000017 440006 1                  SXL0    XSS_ALARMS+1,QL

       54     8014    3               XSS_ALARMS.XUTS( SCID) = XUTS;

PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:10   
   8014  2 000043   000120 235000 1                  LDA     XUTS
         2 000044   000016 755006 1                  STA     XSS_ALARMS,QL

       55     8015    3               XSS_ALARMHEAD = SCID;

   8015  2 000045   200007 235100                    LDA     SCID,,AUTO
         2 000046   000015 755000 1                  STA     XSS_ALARMHEAD

       56     8016    3               XSS_ALARMCOUNT = 1 + XSS_ALARMCOUNT;

   8016  2 000047   000014 054000 1                  AOS     XSS_ALARMCOUNT

       57     8017    3               END;

   8017  2 000050   000175 710000 2                  TRA     s:8059

       58     8018    3           ELSE DO;

       59     8019                    /* insert at appropriate place in queue */
       60     8020    3               I = XSS_ALARMHEAD;

   8020  2 000051   200006 755100                    STA     I,,AUTO

       61     8021    4               DO WHILE( XUTS < XSS_ALARMS.XUTS( I));

   8021  2 000052   000001 735000                    ALS     1
         2 000053   000120 236000 1                  LDQ     XUTS
         2 000054   000016 116005 1                  CMPQ    XSS_ALARMS,AL
         2 000055   000106 603000 2                  TRC     s:8034

       62     8022    5                   IF XSS_ALARMS.NEXT( I) = %NONE THEN DO;

   8022  2 000056   200006 235100                    LDA     I,,AUTO
         2 000057   000001 735000                    ALS     1
         2 000060   000017 220005 1                  LDX0    XSS_ALARMS+1,AL
         2 000061   000076 601000 2                  TNZ     s:8031

PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:11   
       63     8023                            /* expire time puts it at the end of the queue */
       64     8024    5                       XSS_ALARMS.NEXT( I) = SCID;

   8024  2 000062   200007 721100                    LXL1    SCID,,AUTO
         2 000063   000017 741005 1                  STX1    XSS_ALARMS+1,AL

       65     8025    5                       XSS_ALARMS.NEXT( SCID) = %NONE;

   8025  2 000064   200007 236100                    LDQ     SCID,,AUTO
         2 000065   000001 736000                    QLS     1
         2 000066   000000 220003                    LDX0    0,DU
         2 000067   000017 740006 1                  STX0    XSS_ALARMS+1,QL

       66     8026    5                       XSS_ALARMS.PREV( SCID) = I;

   8026  2 000070   200006 722100                    LXL2    I,,AUTO
         2 000071   000017 442006 1                  SXL2    XSS_ALARMS+1,QL

       67     8027    5                       XSS_ALARMS.XUTS( SCID) = XUTS;

   8027  2 000072   000120 235000 1                  LDA     XUTS
         2 000073   000016 755006 1                  STA     XSS_ALARMS,QL

       68     8028    5                       XSS_ALARMCOUNT = 1 + XSS_ALARMCOUNT;

   8028  2 000074   000014 054000 1                  AOS     XSS_ALARMCOUNT

       69     8029    5                       RETURN;

   8029  2 000075   000000 702200 xent               TSX2  ! X66_ARET

       70     8030    5                       END;
       71     8031    4                   I = XSS_ALARMS.NEXT( I);

   8031  2 000076   000017 236005 1                  LDQ     XSS_ALARMS+1,AL
         2 000077   000022 772000                    QRL     18
         2 000100   200006 756100                    STQ     I,,AUTO
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:12   

       72     8032    4                   END;

   8032  2 000101   200006 235100                    LDA     I,,AUTO
         2 000102   000001 735000                    ALS     1
         2 000103   000120 236000 1                  LDQ     XUTS
         2 000104   000016 116005 1                  CMPQ    XSS_ALARMS,AL
         2 000105   000056 602000 2                  TNC     s:8022

       73     8033                    /* expire time puts it before the entry we're pointing at */
       74     8034    3               XSS_ALARMS.PREV( SCID) = XSS_ALARMS.PREV( I);

   8034  2 000106   200007 235100                    LDA     SCID,,AUTO
         2 000107   000001 735000                    ALS     1
         2 000110   200006 236100                    LDQ     I,,AUTO
         2 000111   000001 736000                    QLS     1
         2 000112   000017 720006 1                  LXL0    XSS_ALARMS+1,QL
         2 000113   000017 440005 1                  SXL0    XSS_ALARMS+1,AL

       75     8035    3               IF XSS_ALARMS.PREV( SCID) = %NONE THEN

   8035  2 000114   000120 601000 2                  TNZ     s:8038

       76     8036    3                   XSS_ALARMHEAD = SCID;

   8036  2 000115   200007 235100                    LDA     SCID,,AUTO
         2 000116   000015 755000 1                  STA     XSS_ALARMHEAD
         2 000117   000124 710000 2                  TRA     s:8039

       77     8037    3               ELSE
       78     8038    3                   XSS_ALARMS.NEXT( XSS_ALARMS.PREV( SCID)) = SCID;

   8038  2 000120   000000 635010                    EAA     0,X0
         2 000121   000021 771000                    ARL     17
         2 000122   200007 720100                    LXL0    SCID,,AUTO
         2 000123   000017 740005 1                  STX0    XSS_ALARMS+1,AL

PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:13   
       79     8039    3               XSS_ALARMS.PREV( I) = SCID;

   8039  2 000124   200007 720100                    LXL0    SCID,,AUTO
         2 000125   000017 440006 1                  SXL0    XSS_ALARMS+1,QL

       80     8040    3               XSS_ALARMS.NEXT( SCID) = I;

   8040  2 000126   200007 235100                    LDA     SCID,,AUTO
         2 000127   000001 735000                    ALS     1
         2 000130   200006 721100                    LXL1    I,,AUTO
         2 000131   000017 741005 1                  STX1    XSS_ALARMS+1,AL

       81     8041    3               XSS_ALARMS.XUTS( SCID) = XUTS;

   8041  2 000132   000120 236000 1                  LDQ     XUTS
         2 000133   000016 756005 1                  STQ     XSS_ALARMS,AL

       82     8042    3               XSS_ALARMCOUNT = 1 + XSS_ALARMCOUNT;

   8042  2 000134   000014 054000 1                  AOS     XSS_ALARMCOUNT

       83     8043    3               END;

       84     8044    2           END;

   8044  2 000135   000175 710000 2                  TRA     s:8059

       85     8045    2       ELSE DO;

       86     8046                /* remove a previous request from the queue */
       87     8047    2           SCTX.ALARM = %FALSE;

   8047  2 000136   200005 471500                    LDP1    CTX$,,AUTO
         2 000137   000006 236000 3                  LDQ     6
         2 000140   100013 356100                    ANSQ    11,,PR1

       88     8048    2           IF XSS_ALARMS.PREV( SCID) = %NONE THEN
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:14   

   8048  2 000141   200007 235100                    LDA     SCID,,AUTO
         2 000142   000001 735000                    ALS     1
         2 000143   000017 720005 1                  LXL0    XSS_ALARMS+1,AL
         2 000144   000151 601000 2                  TNZ     s:8051

       89     8049    2               XSS_ALARMHEAD = XSS_ALARMS.NEXT( SCID);

   8049  2 000145   000017 236005 1                  LDQ     XSS_ALARMS+1,AL
         2 000146   000022 772000                    QRL     18
         2 000147   000015 756000 1                  STQ     XSS_ALARMHEAD
         2 000150   000157 710000 2                  TRA     s:8052

       90     8050    2           ELSE
       91     8051    2               XSS_ALARMS.NEXT( XSS_ALARMS.PREV( SCID)) = XSS_ALARMS.NEXT( SCID);

   8051  2 000151   000000 635010                    EAA     0,X0
         2 000152   000021 771000                    ARL     17
         2 000153   200007 236100                    LDQ     SCID,,AUTO
         2 000154   000001 736000                    QLS     1
         2 000155   000017 220006 1                  LDX0    XSS_ALARMS+1,QL
         2 000156   000017 740005 1                  STX0    XSS_ALARMS+1,AL

       92     8052    2           IF XSS_ALARMS.NEXT( SCID) ~= %NONE THEN

   8052  2 000157   200007 235100                    LDA     SCID,,AUTO
         2 000160   000001 735000                    ALS     1
         2 000161   000017 220005 1                  LDX0    XSS_ALARMS+1,AL
         2 000162   000167 600000 2                  TZE     s:8054

       93     8053    2               XSS_ALARMS.PREV( XSS_ALARMS.NEXT( SCID)) = XSS_ALARMS.PREV( SCID);

   8053  2 000163   000000 636010                    EAQ     0,X0
         2 000164   000021 772000                    QRL     17
         2 000165   000017 721005 1                  LXL1    XSS_ALARMS+1,AL
         2 000166   000017 441006 1                  SXL1    XSS_ALARMS+1,QL

PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:15   
       94     8054    2           XSS_ALARMS.NEXT( SCID) = %NONE;

   8054  2 000167   000000 220003                    LDX0    0,DU
         2 000170   000017 740005 1                  STX0    XSS_ALARMS+1,AL

       95     8055    2           XSS_ALARMS.PREV( SCID) = %NONE;

   8055  2 000171   000017 440005 1                  SXL0    XSS_ALARMS+1,AL

       96     8056    2           XSS_ALARMS.XUTS( SCID) = 0;

   8056  2 000172   000016 450005 1                  STZ     XSS_ALARMS,AL

       97     8057    2           XSS_ALARMCOUNT = XSS_ALARMCOUNT - 1;

   8057  2 000173   000001 336007                    LCQ     1,DL
         2 000174   000014 056000 1                  ASQ     XSS_ALARMCOUNT

       98     8058    2           END;

       99     8059    1       RETURN;

   8059  2 000175   000000 702200 xent               TSX2  ! X66_ARET

FPT_TIME
 Sect OctLoc
   1     000   000001 777640   000012 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     010   000000 777640   000120 006000   000001 000000   ****** ******    .....P..........

XSS_ALARMCOUNT
 Sect OctLoc
   1     014   000000 000000                                                    ....

XSS_ALARMHEAD
 Sect OctLoc
   1     015   000000 000000                                                    ....
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:16   

XSS_ALARMS
 Sect OctLoc
   1     016   ****** ******   ****** ******   ****** ******   ****** ******    ................

(unnamed)
 Sect OctLoc
   3     000   000002 000000   000003 000000   000000 027340   000120 006000    .............P..
   3     004   000120 006000   000002 006000   777777 767777                    .P..........
      100     8060
      101     8061    1       END XSS$CLOCK;
      102     8062        %EOD;

PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:17   
--  Include file information  --

   XSS_INTERNAL_M.:XSA1TOU  is referenced.
   XSS_INTERNAL_E.:XSA1TOU  is referenced.
   XSS_SESSION_E.:XSA1TOU  is referenced.
   K_ADDRESS_M.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XSS$CLOCK.
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:18   

 **** Variables and constants ****

  ****  Section 001  Data  XSS$CLOCK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 FPT_TIME                  14-0-0/w SBIN        r     1 XSS_ALARMCOUNT
    15-0-0/w SBIN        r     1 XSS_ALARMHEAD
    16-0-0/w STRC(72)    r     1 XSS_ALARMS(0:32)
   120-0-0/w UBIN        r     1 XUTS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FLAG                      4-0-0/w PTR         r     1 @XSCID
     5-0-0/w PTR         r     1 CTX$                      *0-0-0/w UBIN        r     1 FLAG
     6-0-0/w UBIN        r     1 I                          7-0-0/w SBIN        r     1 SCID
    *0-0-0/c UBIN(9)     r     1 XSCID

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1260)  r     1 SCTX


   Procedure XSS$CLOCK requires 126 words for executable code.
   Procedure XSS$CLOCK requires 10 words of local(AUTO) storage.
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:19   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:20   
          MINI XREF LISTING

CTX$
      7996**DCL      7568--IMP-PTR  8004<>CALL     8007>>ASSIGN   8047>>ASSIGN
FLAG
      7997**DCL        16--PROC     8005>>IF
FPT_TIME
      5587**DCL      8008<>CALL
FPT_TIME.V
      5591**DCL      5587--DCLINIT
I
      7998**DCL      8020<<ASSIGN   8021>>DOWHILE  8022>>IF       8024>>ASSIGN   8026>>ASSIGN   8031<<ASSIGN
      8031>>ASSIGN   8034>>ASSIGN   8039>>ASSIGN   8040>>ASSIGN
M$TIME
      5571**DCL-ENT  8008--CALL
SCID
      7999**DCL      8003<<ASSIGN   8004<>CALL     8012>>ASSIGN   8013>>ASSIGN   8014>>ASSIGN   8015>>ASSIGN
      8024>>ASSIGN   8025>>ASSIGN   8026>>ASSIGN   8027>>ASSIGN   8034>>ASSIGN   8035>>IF       8036>>ASSIGN
      8038>>ASSIGN   8038>>ASSIGN   8039>>ASSIGN   8040>>ASSIGN   8041>>ASSIGN   8048>>IF       8049>>ASSIGN
      8051>>ASSIGN   8051>>ASSIGN   8052>>IF       8053>>ASSIGN   8053>>ASSIGN   8054>>ASSIGN   8055>>ASSIGN
      8056>>ASSIGN
SCTX.ALARM
      7860**DCL      8007<<ASSIGN   8047<<ASSIGN
SCTX.HISTZ
      7882**DCL      7883--REDEF
XSCID
      8000**DCL        16--PROC     8003>>ASSIGN
XSS$CTXPTR
      7986**DCL-ENT  8004--CALL
XSS_ALARMCOUNT
      7989**DCL      8016<<ASSIGN   8016>>ASSIGN   8028<<ASSIGN   8028>>ASSIGN   8042<<ASSIGN   8042>>ASSIGN
      8057<<ASSIGN   8057>>ASSIGN
XSS_ALARMHEAD
      7990**DCL      8010>>IF       8015<<ASSIGN   8020>>ASSIGN   8036<<ASSIGN   8049<<ASSIGN
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:21   
XSS_ALARMS.NEXT
      7993**DCL      8012<<ASSIGN   8022>>IF       8024<<ASSIGN   8025<<ASSIGN   8031>>ASSIGN   8038<<ASSIGN
      8040<<ASSIGN   8049>>ASSIGN   8051<<ASSIGN   8051>>ASSIGN   8052>>IF       8053>>ASSIGN   8054<<ASSIGN
XSS_ALARMS.PREV
      7994**DCL      8013<<ASSIGN   8026<<ASSIGN   8034<<ASSIGN   8034>>ASSIGN   8035>>IF       8038>>ASSIGN
      8039<<ASSIGN   8048>>IF       8051>>ASSIGN   8053<<ASSIGN   8053>>ASSIGN   8055<<ASSIGN
XSS_ALARMS.XUTS
      7992**DCL      8014<<ASSIGN   8021>>DOWHILE  8027<<ASSIGN   8041<<ASSIGN   8056<<ASSIGN
XUD$UTS_ADJUST
      7987**DCL-ENT  8009--CALL
XUTS
      8001**DCL      5591--DCLINIT  8009<>CALL     8009<>CALL     8014>>ASSIGN   8021>>DOWHILE  8027>>ASSIGN
      8041>>ASSIGN
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:22   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:23   
              MINI UREF LISTING

M$ACCT    5521**DCL-ENT
M$ACTIVATE    5524**DCL-ENT
M$ALIB    5517**DCL-ENT
M$ASUSER    5519**DCL-ENT
M$ATTACH    5526**DCL-ENT
M$BADPP    5544**DCL-ENT
M$CGCTL    5525**DCL-ENT
M$CGINFO    5525**DCL-ENT
M$CHECK    5506**DCL-ENT
M$CHGUNIT    5564**DCL-ENT
M$CLOSE    5504**DCL-ENT
M$CLRSTK    5562**DCL-ENT
M$CMDVAR    5573**DCL-ENT
M$CONFIG    5534**DCL-ENT
M$CORRES    5509**DCL-ENT
M$CPEXIT    5518**DCL-ENT
M$CVM    5542**DCL-ENT
M$CVOL    5507**DCL-ENT
M$DCLFLD    5534**DCL-ENT
M$DEACTIVATE    5524**DCL-ENT
M$DELREC    5506**DCL-ENT
M$DEQ    5571**DCL-ENT
M$DETACH    5526**DCL-ENT
M$DEVICE    5508**DCL-ENT
M$DISPLAY    5571**DCL-ENT
M$DISPRES    5511**DCL-ENT
M$DLIB    5517**DCL-ENT
M$DRIBBLE    5534**DCL-ENT
M$DRTN    5562**DCL-ENT
M$DSUSER    5519**DCL-ENT
M$ENQ    5570**DCL-ENT
M$EOM    5529**DCL-ENT
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:24   
M$ERASE    5535**DCL-ENT
M$ERR    5516**DCL-ENT
M$ERRMSG    5567**DCL-ENT
M$EVENT    5559**DCL-ENT
M$EXHUME    5568**DCL-ENT
M$EXIT    5516**DCL-ENT
M$EXTEND    5508**DCL-ENT
M$FDP    5540**DCL-ENT
M$FDS    5539**DCL-ENT
M$FEBOOT    5532**DCL-ENT
M$FECTL    5533**DCL-ENT
M$FEDUMP    5532**DCL-ENT
M$FID    5567**DCL-ENT
M$FINDPROC    5521**DCL-ENT
M$FSUSER    5519**DCL-ENT
M$FVP    5541**DCL-ENT
M$FWCG    5525**DCL-ENT
M$GBPL    5545**DCL-ENT
M$GDDL    5541**DCL-ENT
M$GDP    5540**DCL-ENT
M$GDS    5539**DCL-ENT
M$GETDCB    5510**DCL-ENT
M$GETMOUSE    5550**DCL-ENT
M$GETPM    5551**DCL-ENT
M$GJOB    5569**DCL-ENT
M$GLINEATTR    5529**DCL-ENT
M$GOODPP    5544**DCL-ENT
M$GPLATEN    5537**DCL-ENT
M$GPROMPT    5536**DCL-ENT
M$GTRMATTR    5530**DCL-ENT
M$GTRMCTL    5528**DCL-ENT
M$GTRMTAB    5531**DCL-ENT
M$GVP    5540**DCL-ENT
M$HELP    5567**DCL-ENT
M$INT    5559**DCL-ENT
M$INTRTN    5520**DCL-ENT
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:25   
M$IOQ    5555**DCL-ENT
M$JOBSTATS    5569**DCL-ENT
M$KEYIN    5509**DCL-ENT
M$LDEV    5504**DCL-ENT
M$LDTRC    5517**DCL-ENT
M$LIMIT    5510**DCL-ENT
M$LINES    5509**DCL-ENT
M$LINK    5516**DCL-ENT
M$MADMUCK    5512**DCL-ENT
M$MAKUSER    5543**DCL-ENT
M$MBS    5511**DCL-ENT
M$MDFFLD    5535**DCL-ENT
M$MERC    5560**DCL-ENT
M$MERCS    5561**DCL-ENT
M$MIRROR    5555**DCL-ENT
M$MONINFO    5572**DCL-ENT
M$MPL    5545**DCL-ENT
M$NODEINFO    5536**DCL-ENT
M$NXTUSR    5570**DCL-ENT
M$OCMSG    5568**DCL-ENT
M$OLAY    5516**DCL-ENT
M$OPEN    5504**DCL-ENT
M$PAS    5545**DCL-ENT
M$PATHCON    5568**DCL-ENT
M$PDS    5539**DCL-ENT
M$PFIL    5506**DCL-ENT
M$PLATEN    5530**DCL-ENT
M$PRECORD    5508**DCL-ENT
M$PROCNAME    5521**DCL-ENT
M$PROFILE    5532**DCL-ENT
M$PROMPT    5528**DCL-ENT
M$RACST    5512**DCL-ENT
M$RDSYSLOG    5553**DCL-ENT
M$READ    5505**DCL-ENT
M$RELDCB    5510**DCL-ENT
M$RELRES    5511**DCL-ENT
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:26   
M$RELSTARF    5513**DCL-ENT
M$REM    5513**DCL-ENT
M$RENV    5560**DCL-ENT
M$REQUIRE    5512**DCL-ENT
M$RETRY    5561**DCL-ENT
M$RETRYS    5561**DCL-ENT
M$REW    5507**DCL-ENT
M$RLSFLD    5535**DCL-ENT
M$RPRIV    5563**DCL-ENT
M$RSPP    5542**DCL-ENT
M$RSWITCH    5564**DCL-ENT
M$RUE    5570**DCL-ENT
M$SAD    5543**DCL-ENT
M$SAVE    5519**DCL-ENT
M$SCON    5520**DCL-ENT
M$SCREECH    5518**DCL-ENT
M$SENV    5560**DCL-ENT
M$SETFMA    5504**DCL-ENT
M$SETFP    5533**DCL-ENT
M$SINPUT    5531**DCL-ENT
M$SLCFLD    5536**DCL-ENT
M$SMOUSE    5550**DCL-ENT
M$SMPRT    5542**DCL-ENT
M$SPRIV    5563**DCL-ENT
M$SSC    5543**DCL-ENT
M$SSWITCH    5563**DCL-ENT
M$STATE    5572**DCL-ENT
M$STD    5544**DCL-ENT
M$STIMER    5558**DCL-ENT
M$STLPP    5541**DCL-ENT
M$STRAP    5558**DCL-ENT
M$STRMATTR    5530**DCL-ENT
M$STRMCTL    5528**DCL-ENT
M$STRMTAB    5531**DCL-ENT
M$SYMBIO    5569**DCL-ENT
M$SYSCON    5555**DCL-ENT
PL6.E3A0      #001=XSS$CLOCK File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:07 Page:27   
M$SYSID    5573**DCL-ENT
M$TDCLOSE    5554**DCL-ENT
M$TDIO    5554**DCL-ENT
M$TDOPEN    5553**DCL-ENT
M$TDREQCPU    5554**DCL-ENT
M$TEMPWROC    5548**DCL-ENT
M$TRAP    5558**DCL-ENT
M$TRMISC    5533**DCL-ENT
M$TRMPRG    5529**DCL-ENT
M$TRTN    5562**DCL-ENT
M$TRUNC    5505**DCL-ENT
M$TTIMER    5558**DCL-ENT
M$UC    5528**DCL
M$UMPL    5545**DCL-ENT
M$UNFID    5567**DCL-ENT
M$UNLATCH    5524**DCL-ENT
M$UNSHARE    5521**DCL-ENT
M$USRFIELD    5564**DCL-ENT
M$VIRTUAL    5539**DCL-ENT
M$WAIT    5562**DCL-ENT
M$WEOF    5507**DCL-ENT
M$WRITE    5505**DCL-ENT
M$WRSYSLOG    5553**DCL-ENT
M$XCON    5559**DCL-ENT
M$XCONRTN    5520**DCL-ENT
M$XEQTIME    5572**DCL-ENT
M$XFLUSH    5513**DCL-ENT
M$XMOUSE    5550**DCL-ENT
M$XXX    5516**DCL-ENT
M$YC    5518**DCL-ENT
XSS$CLOCK      16**PROC

PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:28   
      103        1        /*T***********************************************************/
      104        2        /*T*                                                         */
      105        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      106        4        /*T*                                                         */
      107        5        /*T***********************************************************/
      108        6        /*F*    NAME:   XSS$ALARMCHECK
      109        7                DESCRIPTION:
      110        8                    This routine is called periodically from various places in the
      111        9                    Session layer code to see if the TIM clock has expired for any
      112       10                    of the connection contexts using the timer.  If so, the clock
      113       11                    expiration routine is called.
      114       12        */
      115       13        XSS$ALARMCHECK: PROC;
      116       14        %INCLUDE CP_6;
      117     5573            %FPT_TIME( SOURCE=CLOCK, TSTAMP=CUTS);
      118     5592        %INCLUDE XSS_INTERNAL_E;
      119     5890
      120     5891    1       DCL XSS$ALARM ENTRY(1);
      121     5892    1       DCL XSS$CLOCK ENTRY(2);
      122     5893
      123     5894    1       DCL XSS_ALARMCOUNT SBIN SYMREF;
      124     5895    1       DCL XSS_ALARMHEAD SBIN SYMREF;
      125     5896    1       DCL 1 XSS_ALARMS(0:%MAXALARMS) SYMREF,
      126     5897    1            2 XUTS UBIN,
      127     5898    1            2 NEXT UBIN HALF UNAL,
      128     5899    1            2 PREV UBIN HALF UNAL;
      129     5900
      130     5901    1       DCL CUTS UBIN STATIC;
      131     5902    1       DCL TEMP SBIN;
      132     5903
      133     5904    1       IF XSS_ALARMCOUNT = 0 THEN
      134     5905    1           RETURN;
      135     5906            /* look for clock entries that have expired, and dispatch 'em */
      136     5907    1       CALL M$TIME( FPT_TIME);
      137     5908    2       DO WHILE( XSS_ALARMCOUNT > 0);
      138     5909    3           IF CUTS >= XSS_ALARMS.XUTS( XSS_ALARMHEAD) THEN DO;
      139     5910                    /* time's up for this one */
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:29   
      140     5911    3               TEMP = XSS_ALARMHEAD;
      141     5912    3               CALL XSS$ALARM( XSS_ALARMHEAD);
      142     5913    3               IF XSS_ALARMHEAD = TEMP THEN
      143     5914    3                   CALL XSS$CLOCK( %CANCLK, XSS_ALARMHEAD);
      144     5915    3               END;
      145     5916    2           ELSE
      146     5917                    /* entry at head of list is still in the future */
      147     5918    2               RETURN;
      148     5919    2           END;
      149     5920    1       RETURN;
      150     5921
      151     5922    1       END XSS$ALARMCHECK;
      152     5923        %EOD;

PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:30   
--  Include file information  --

   XSS_INTERNAL_E.:XSA1TOU  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XSS$ALARMCHECK.

   Procedure XSS$ALARMCHECK requires 33 words for executable code.
   Procedure XSS$ALARMCHECK requires 4 words of local(AUTO) storage.

PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:31   

 Object Unit name= XSS$ALARMCHECK                             File name= XSS$CLOCK.:XSA1TOU
 UTS= OCT 01 '97 12:08:02.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    13     15  XSS$ALARMCHECK
    2   Proc  even  none    33     41  XSS$ALARMCHECK
    3  RoData even  none     6      6  XSS$ALARMCHECK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  XSS$ALARMCHECK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 XSS$ALARM
         yes           Std       2 XSS$CLOCK
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  XSS_ALARMCOUNT                        XSS_ALARMHEAD
     XSS_ALARMS
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:32   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:33   


      103        1        /*T***********************************************************/
      104        2        /*T*                                                         */
      105        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      106        4        /*T*                                                         */
      107        5        /*T***********************************************************/
      108        6        /*F*    NAME:   XSS$ALARMCHECK
      109        7                DESCRIPTION:
      110        8                    This routine is called periodically from various places in the
      111        9                    Session layer code to see if the TIM clock has expired for any
      112       10                    of the connection contexts using the timer.  If so, the clock
      113       11                    expiration routine is called.
      114       12        */
      115       13        XSS$ALARMCHECK: PROC;

     13  2 000000   000000 700200 xent  XSS$ALARMCH* TSX0  ! X66_AUTO_0
         2 000001   000004 000000                    ZERO    4,0

      116       14        %INCLUDE CP_6;
      117     5573            %FPT_TIME( SOURCE=CLOCK, TSTAMP=CUTS);
      118     5592        %INCLUDE XSS_INTERNAL_E;
      119     5890
      120     5891    1       DCL XSS$ALARM ENTRY(1);
      121     5892    1       DCL XSS$CLOCK ENTRY(2);
      122     5893
      123     5894    1       DCL XSS_ALARMCOUNT SBIN SYMREF;
      124     5895    1       DCL XSS_ALARMHEAD SBIN SYMREF;
      125     5896    1       DCL 1 XSS_ALARMS(0:%MAXALARMS) SYMREF,
      126     5897    1            2 XUTS UBIN,
      127     5898    1            2 NEXT UBIN HALF UNAL,
      128     5899    1            2 PREV UBIN HALF UNAL;
      129     5900
      130     5901    1       DCL CUTS UBIN STATIC;
      131     5902    1       DCL TEMP SBIN;
      132     5903
      133     5904    1       IF XSS_ALARMCOUNT = 0 THEN

PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:34   
   5904  2 000002   000000 235000 xsym               LDA     XSS_ALARMCOUNT
         2 000003   000005 601000 2                  TNZ     s:5907

      134     5905    1           RETURN;

   5905  2 000004   000000 702200 xent               TSX2  ! X66_ARET

      135     5906            /* look for clock entries that have expired, and dispatch 'em */
      136     5907    1       CALL M$TIME( FPT_TIME);

   5907  2 000005   000000 630400 1                  EPPR0   FPT_TIME
         2 000006   020004 713400                    CLIMB   8196
         2 000007   402000 401760                    pmme    nvectors=5

      137     5908    2       DO WHILE( XSS_ALARMCOUNT > 0);

   5908  2 000010   000000 235000 xsym               LDA     XSS_ALARMCOUNT
         2 000011   000040 604400 2                  TMOZ    s:5920

      138     5909    3           IF CUTS >= XSS_ALARMS.XUTS( XSS_ALARMHEAD) THEN DO;

   5909  2 000012   000000 235000 xsym               LDA     XSS_ALARMHEAD
         2 000013   000001 735000                    ALS     1
         2 000014   000014 236000 1                  LDQ     CUTS
         2 000015   000000 116005 xsym               CMPQ    XSS_ALARMS,AL
         2 000016   000035 602000 2                  TNC     s:5918

      139     5910                    /* time's up for this one */
      140     5911    3               TEMP = XSS_ALARMHEAD;

   5911  2 000017   000000 235000 xsym               LDA     XSS_ALARMHEAD
         2 000020   200003 755100                    STA     TEMP,,AUTO

      141     5912    3               CALL XSS$ALARM( XSS_ALARMHEAD);

   5912  2 000021   000001 630400 3                  EPPR0   1
         2 000022   000000 631400 3                  EPPR1   0
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:35   
         2 000023   000000 701000 xent               TSX1    XSS$ALARM
         2 000024   000000 011000                    NOP     0

      142     5913    3               IF XSS_ALARMHEAD = TEMP THEN

   5913  2 000025   000000 236000 xsym               LDQ     XSS_ALARMHEAD
         2 000026   200003 116100                    CMPQ    TEMP,,AUTO
         2 000027   000036 601000 2                  TNZ     s:5919

      143     5914    3                   CALL XSS$CLOCK( %CANCLK, XSS_ALARMHEAD);

   5914  2 000030   000004 630400 3                  EPPR0   4
         2 000031   000002 631400 3                  EPPR1   2
         2 000032   000000 701000 xent               TSX1    XSS$CLOCK
         2 000033   000000 011000                    NOP     0

      144     5915    3               END;

   5915  2 000034   000036 710000 2                  TRA     s:5919

      145     5916    2           ELSE
      146     5917                    /* entry at head of list is still in the future */
      147     5918    2               RETURN;

   5918  2 000035   000000 702200 xent               TSX2  ! X66_ARET

      148     5919    2           END;

   5919  2 000036   000000 235000 xsym               LDA     XSS_ALARMCOUNT
         2 000037   000012 605400 2                  TPNZ    s:5909

      149     5920    1       RETURN;

   5920  2 000040   000000 702200 xent               TSX2  ! X66_ARET

FPT_TIME
 Sect OctLoc
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:36   
   1     000   000001 777640   000012 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     010   000000 777640   000014 006000   000001 000000   ****** ******    ................

(unnamed)
 Sect OctLoc
   3     000   000001 000000   000000 006000   000002 000000   000000 000002    ................
   3     004   000003 006000   000000 006000                                    ........
      150     5921
      151     5922    1       END XSS$ALARMCHECK;
      152     5923        %EOD;

PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:37   
--  Include file information  --

   XSS_INTERNAL_E.:XSA1TOU  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XSS$ALARMCHECK.
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:38   

 **** Variables and constants ****

  ****  Section 001  Data  XSS$ALARMCHECK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    14-0-0/w UBIN        r     1 CUTS                       0-0-0/d STRC(432)   r     1 FPT_TIME

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w SBIN        r     1 TEMP

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSS_ALARMCOUNT             0-0-0/w SBIN        r     1 XSS_ALARMHEAD
     0-0-0/w STRC(72)    r     1 XSS_ALARMS(0:32)


   Procedure XSS$ALARMCHECK requires 33 words for executable code.
   Procedure XSS$ALARMCHECK requires 4 words of local(AUTO) storage.
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:39   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:40   
          MINI XREF LISTING

CUTS
      5901**DCL      5588--DCLINIT  5909>>IF
FPT_TIME
      5584**DCL      5907<>CALL
FPT_TIME.V
      5588**DCL      5584--DCLINIT
M$TIME
      5568**DCL-ENT  5907--CALL
TEMP
      5902**DCL      5911<<ASSIGN   5913>>IF
XSS$ALARM
      5891**DCL-ENT  5912--CALL
XSS$CLOCK
      5892**DCL-ENT  5914--CALL
XSS_ALARMCOUNT
      5894**DCL      5904>>IF       5908>>DOWHILE
XSS_ALARMHEAD
      5895**DCL      5909>>IF       5911>>ASSIGN   5912<>CALL     5913>>IF       5914<>CALL
XSS_ALARMS.XUTS
      5897**DCL      5909>>IF
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:41   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:42   
              MINI UREF LISTING

M$ACCT    5518**DCL-ENT
M$ACTIVATE    5521**DCL-ENT
M$ALIB    5514**DCL-ENT
M$ASUSER    5516**DCL-ENT
M$ATTACH    5523**DCL-ENT
M$BADPP    5541**DCL-ENT
M$CGCTL    5522**DCL-ENT
M$CGINFO    5522**DCL-ENT
M$CHECK    5503**DCL-ENT
M$CHGUNIT    5561**DCL-ENT
M$CLOSE    5501**DCL-ENT
M$CLRSTK    5559**DCL-ENT
M$CMDVAR    5570**DCL-ENT
M$CONFIG    5531**DCL-ENT
M$CORRES    5506**DCL-ENT
M$CPEXIT    5515**DCL-ENT
M$CVM    5539**DCL-ENT
M$CVOL    5504**DCL-ENT
M$DCLFLD    5531**DCL-ENT
M$DEACTIVATE    5521**DCL-ENT
M$DELREC    5503**DCL-ENT
M$DEQ    5568**DCL-ENT
M$DETACH    5523**DCL-ENT
M$DEVICE    5505**DCL-ENT
M$DISPLAY    5568**DCL-ENT
M$DISPRES    5508**DCL-ENT
M$DLIB    5514**DCL-ENT
M$DRIBBLE    5531**DCL-ENT
M$DRTN    5559**DCL-ENT
M$DSUSER    5516**DCL-ENT
M$ENQ    5567**DCL-ENT
M$EOM    5526**DCL-ENT
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:43   
M$ERASE    5532**DCL-ENT
M$ERR    5513**DCL-ENT
M$ERRMSG    5564**DCL-ENT
M$EVENT    5556**DCL-ENT
M$EXHUME    5565**DCL-ENT
M$EXIT    5513**DCL-ENT
M$EXTEND    5505**DCL-ENT
M$FDP    5537**DCL-ENT
M$FDS    5536**DCL-ENT
M$FEBOOT    5529**DCL-ENT
M$FECTL    5530**DCL-ENT
M$FEDUMP    5529**DCL-ENT
M$FID    5564**DCL-ENT
M$FINDPROC    5518**DCL-ENT
M$FSUSER    5516**DCL-ENT
M$FVP    5538**DCL-ENT
M$FWCG    5522**DCL-ENT
M$GBPL    5542**DCL-ENT
M$GDDL    5538**DCL-ENT
M$GDP    5537**DCL-ENT
M$GDS    5536**DCL-ENT
M$GETDCB    5507**DCL-ENT
M$GETMOUSE    5547**DCL-ENT
M$GETPM    5548**DCL-ENT
M$GJOB    5566**DCL-ENT
M$GLINEATTR    5526**DCL-ENT
M$GOODPP    5541**DCL-ENT
M$GPLATEN    5534**DCL-ENT
M$GPROMPT    5533**DCL-ENT
M$GTRMATTR    5527**DCL-ENT
M$GTRMCTL    5525**DCL-ENT
M$GTRMTAB    5528**DCL-ENT
M$GVP    5537**DCL-ENT
M$HELP    5564**DCL-ENT
M$INT    5556**DCL-ENT
M$INTRTN    5517**DCL-ENT
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:44   
M$IOQ    5552**DCL-ENT
M$JOBSTATS    5566**DCL-ENT
M$KEYIN    5506**DCL-ENT
M$LDEV    5501**DCL-ENT
M$LDTRC    5514**DCL-ENT
M$LIMIT    5507**DCL-ENT
M$LINES    5506**DCL-ENT
M$LINK    5513**DCL-ENT
M$MADMUCK    5509**DCL-ENT
M$MAKUSER    5540**DCL-ENT
M$MBS    5508**DCL-ENT
M$MDFFLD    5532**DCL-ENT
M$MERC    5557**DCL-ENT
M$MERCS    5558**DCL-ENT
M$MIRROR    5552**DCL-ENT
M$MONINFO    5569**DCL-ENT
M$MPL    5542**DCL-ENT
M$NODEINFO    5533**DCL-ENT
M$NXTUSR    5567**DCL-ENT
M$OCMSG    5565**DCL-ENT
M$OLAY    5513**DCL-ENT
M$OPEN    5501**DCL-ENT
M$PAS    5542**DCL-ENT
M$PATHCON    5565**DCL-ENT
M$PDS    5536**DCL-ENT
M$PFIL    5503**DCL-ENT
M$PLATEN    5527**DCL-ENT
M$PRECORD    5505**DCL-ENT
M$PROCNAME    5518**DCL-ENT
M$PROFILE    5529**DCL-ENT
M$PROMPT    5525**DCL-ENT
M$RACST    5509**DCL-ENT
M$RDSYSLOG    5550**DCL-ENT
M$READ    5502**DCL-ENT
M$RELDCB    5507**DCL-ENT
M$RELRES    5508**DCL-ENT
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:45   
M$RELSTARF    5510**DCL-ENT
M$REM    5510**DCL-ENT
M$RENV    5557**DCL-ENT
M$REQUIRE    5509**DCL-ENT
M$RETRY    5558**DCL-ENT
M$RETRYS    5558**DCL-ENT
M$REW    5504**DCL-ENT
M$RLSFLD    5532**DCL-ENT
M$RPRIV    5560**DCL-ENT
M$RSPP    5539**DCL-ENT
M$RSWITCH    5561**DCL-ENT
M$RUE    5567**DCL-ENT
M$SAD    5540**DCL-ENT
M$SAVE    5516**DCL-ENT
M$SCON    5517**DCL-ENT
M$SCREECH    5515**DCL-ENT
M$SENV    5557**DCL-ENT
M$SETFMA    5501**DCL-ENT
M$SETFP    5530**DCL-ENT
M$SINPUT    5528**DCL-ENT
M$SLCFLD    5533**DCL-ENT
M$SMOUSE    5547**DCL-ENT
M$SMPRT    5539**DCL-ENT
M$SPRIV    5560**DCL-ENT
M$SSC    5540**DCL-ENT
M$SSWITCH    5560**DCL-ENT
M$STATE    5569**DCL-ENT
M$STD    5541**DCL-ENT
M$STIMER    5555**DCL-ENT
M$STLPP    5538**DCL-ENT
M$STRAP    5555**DCL-ENT
M$STRMATTR    5527**DCL-ENT
M$STRMCTL    5525**DCL-ENT
M$STRMTAB    5528**DCL-ENT
M$SYMBIO    5566**DCL-ENT
M$SYSCON    5552**DCL-ENT
PL6.E3A0      #002=XSS$ALARMCHECK File=XSS$CLOCK.:XSA1TSI                        WED 10/01/97 12:08 Page:46   
M$SYSID    5570**DCL-ENT
M$TDCLOSE    5551**DCL-ENT
M$TDIO    5551**DCL-ENT
M$TDOPEN    5550**DCL-ENT
M$TDREQCPU    5551**DCL-ENT
M$TEMPWROC    5545**DCL-ENT
M$TRAP    5555**DCL-ENT
M$TRMISC    5530**DCL-ENT
M$TRMPRG    5526**DCL-ENT
M$TRTN    5559**DCL-ENT
M$TRUNC    5502**DCL-ENT
M$TTIMER    5555**DCL-ENT
M$UC    5525**DCL
M$UMPL    5542**DCL-ENT
M$UNFID    5564**DCL-ENT
M$UNLATCH    5521**DCL-ENT
M$UNSHARE    5518**DCL-ENT
M$USRFIELD    5561**DCL-ENT
M$VIRTUAL    5536**DCL-ENT
M$WAIT    5559**DCL-ENT
M$WEOF    5504**DCL-ENT
M$WRITE    5502**DCL-ENT
M$WRSYSLOG    5550**DCL-ENT
M$XCON    5556**DCL-ENT
M$XCONRTN    5517**DCL-ENT
M$XEQTIME    5569**DCL-ENT
M$XFLUSH    5510**DCL-ENT
M$XMOUSE    5547**DCL-ENT
M$XXX    5513**DCL-ENT
M$YC    5515**DCL-ENT
XSS$ALARMCHECK      13**PROC

PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:47   
      153        1        /*T***********************************************************/
      154        2        /*T*                                                         */
      155        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      156        4        /*T*                                                         */
      157        5        /*T***********************************************************/
      158        6        /*F*    NAME:   XSS$ALARM
      159        7                DESCRIPTION:
      160        8                    This routine is called when a particular connection context timer
      161        9                    has expired.  This causes a pseudo-asynchronous entry into the
      162       10                    Session state machine.
      163       11        */
      164       12        XSS$ALARM: PROC( SCID);
      165       13        %INCLUDE UM_CP6;
      166      865        %INCLUDE XSS_INTERNAL_E;
      167     1163        %INCLUDE XSS_INTERNAL_M;
      168     1752            %XSS$VBLK( NAME=VBLK, STCLASS=AUTO);
      169     1857            %XSS$VBLK( NAME=XSS_VBLK, STCLASS=SYMREF);
      170     1962            %XSS$SCTX( NAME=SCTX, STCLASS="BASED( CTX$)");
      171     2396
      172     2397    1       DCL XSS$COMMPEND ENTRY(1) ALTRET;
      173     2398    1       DCL XSS$CTXPTR ENTRY(2) ALTRET;
      174     2399    1       DCL XSS$MACHINE ENTRY(1) ALTRET;
      175     2400
      176     2401    1       DCL CTX$ PTR;
      177     2402    1       DCL SCID SBIN;
      178     2403
      179     2404    1   LOOP:
      180     2405    1       CALL XSS$CTXPTR( SCID, CTX$) ALTRET( DONE);
      181     2406    1       IF SCTX.LATCH.PRESENT THEN
      182     2407    1           CALL XSS$COMMPEND( SCID) ALTRET( LOOP);
      183     2408    1       IF NOT SCTX.ALARM THEN
      184     2409    1           GOTO DONE;
      185     2410    1       VBLK = XSS_VBLK;
      186     2411    1       VBLK.CTX$ = CTX$;
      187     2412    1       VBLK.EVENT = %XSS_SEV_TIM;
      188     2413    1       CALL XSS$MACHINE( VBLK)
      189     2414    2       WHENALTRETURN DO;
PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:48   
      190     2415                /* Connection has aborted.  O.k. by me. */
      191     2416    2           END;
      192     2417    1   DONE:
      193     2418    1       RETURN;
      194     2419
      195     2420    1       END XSS$ALARM;

PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:49   
--  Include file information  --

   XSS_INTERNAL_M.:XSA1TOU  is referenced.
   XSS_INTERNAL_E.:XSA1TOU  is referenced.
   UM_CP6.:E05OU  is referenced.
      No diagnostics issued in procedure XSS$ALARM.

   Procedure XSS$ALARM requires 36 words for executable code.
   Procedure XSS$ALARM requires 16 words of local(AUTO) storage.

    No errors detected in file XSS$CLOCK.:XSA1TSI    .

PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:50   

 Object Unit name= XSS$ALARM                                  File name= XSS$CLOCK.:XSA1TOU
 UTS= OCT 01 '97 12:08:14.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    36     44  XSS$ALARM
    1  RoData even  none     2      2  XSS$ALARM

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        1  XSS$ALARM

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSS$CTXPTR
 yes     yes           Std       1 XSS$COMMPEND
 yes     yes           Std       1 XSS$MACHINE
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSS_VBLK
PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:51   


      153        1        /*T***********************************************************/
      154        2        /*T*                                                         */
      155        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      156        4        /*T*                                                         */
      157        5        /*T***********************************************************/
      158        6        /*F*    NAME:   XSS$ALARM
      159        7                DESCRIPTION:
      160        8                    This routine is called when a particular connection context timer
      161        9                    has expired.  This causes a pseudo-asynchronous entry into the
      162       10                    Session state machine.
      163       11        */
      164       12        XSS$ALARM: PROC( SCID);

     12  0 000000   000000 700200 xent  XSS$ALARM    TSX0  ! X66_AUTO_1
         0 000001   000020 000001                    ZERO    16,1

      165       13        %INCLUDE UM_CP6;
      166      865        %INCLUDE XSS_INTERNAL_E;
      167     1163        %INCLUDE XSS_INTERNAL_M;
      168     1752            %XSS$VBLK( NAME=VBLK, STCLASS=AUTO);
      169     1857            %XSS$VBLK( NAME=XSS_VBLK, STCLASS=SYMREF);
      170     1962            %XSS$SCTX( NAME=SCTX, STCLASS="BASED( CTX$)");
      171     2396
      172     2397    1       DCL XSS$COMMPEND ENTRY(1) ALTRET;
      173     2398    1       DCL XSS$CTXPTR ENTRY(2) ALTRET;
      174     2399    1       DCL XSS$MACHINE ENTRY(1) ALTRET;
      175     2400
      176     2401    1       DCL CTX$ PTR;
      177     2402    1       DCL SCID SBIN;
      178     2403
      179     2404    1   LOOP:
      180     2405    1       CALL XSS$CTXPTR( SCID, CTX$) ALTRET( DONE);

   2405  0 000002   200014 630500       LOOP         EPPR0   CTX$,,AUTO
         0 000003   200017 450500                    STP0    CTX$+3,,AUTO
         0 000004   200003 236100                    LDQ     @SCID,,AUTO
PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:52   
         0 000005   200016 756100                    STQ     CTX$+2,,AUTO
         0 000006   200016 630500                    EPPR0   CTX$+2,,AUTO
         0 000007   000000 631400 1                  EPPR1   0
         0 000010   000000 701000 xent               TSX1    XSS$CTXPTR
         0 000011   000043 702000 0                  TSX2    DONE

      181     2406    1       IF SCTX.LATCH.PRESENT THEN

   2406  0 000012   200014 470500                    LDP0    CTX$,,AUTO
         0 000013   000035 234100                    SZN     29,,PR0
         0 000014   000021 605000 0                  TPL     s:2408

      182     2407    1           CALL XSS$COMMPEND( SCID) ALTRET( LOOP);

   2407  0 000015   200003 630500                    EPPR0   @SCID,,AUTO
         0 000016   000001 631400 1                  EPPR1   1
         0 000017   000000 701000 xent               TSX1    XSS$COMMPEND
         0 000020   000002 702000 0                  TSX2    LOOP

      183     2408    1       IF NOT SCTX.ALARM THEN

   2408  0 000021   200014 470500                    LDP0    CTX$,,AUTO
         0 000022   000013 236100                    LDQ     11,,PR0
         0 000023   010000 316007                    CANQ    4096,DL
         0 000024   000043 600000 0                  TZE     DONE

      184     2409    1           GOTO DONE;
      185     2410    1       VBLK = XSS_VBLK;

   2410  0 000025   000100 100400                    MLR     fill='000'O
         0 000026   000000 000040 xsym               ADSC9   XSS_VBLK                 cn=0,n=32
         0 000027   200004 000040                    ADSC9   VBLK,,AUTO               cn=0,n=32

      186     2411    1       VBLK.CTX$ = CTX$;

   2411  0 000030   200014 236100                    LDQ     CTX$,,AUTO
         0 000031   200004 756100                    STQ     VBLK,,AUTO
PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:53   

      187     2412    1       VBLK.EVENT = %XSS_SEV_TIM;

   2412  0 000032   000052 236007                    LDQ     42,DL
         0 000033   200005 552104                    STBQ    VBLK+1,'04'O,AUTO

      188     2413    1       CALL XSS$MACHINE( VBLK)

   2413  0 000034   200004 631500                    EPPR1   VBLK,,AUTO
         0 000035   200016 451500                    STP1    CTX$+2,,AUTO
         0 000036   200016 630500                    EPPR0   CTX$+2,,AUTO
         0 000037   000001 631400 1                  EPPR1   1
         0 000040   000000 701000 xent               TSX1    XSS$MACHINE
         0 000041   000043 702000 0                  TSX2    DONE
         0 000042   000043 710000 0                  TRA     DONE

      189     2414    2       WHENALTRETURN DO;

      190     2415                /* Connection has aborted.  O.k. by me. */
      191     2416    2           END;

      192     2417    1   DONE:
      193     2418    1       RETURN;

   2418  0 000043   000000 702200 xent  DONE         TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   1     000   000002 000000   000001 000000                                    ........
      194     2419
      195     2420    1       END XSS$ALARM;

PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:54   
--  Include file information  --

   XSS_INTERNAL_M.:XSA1TOU  is referenced.
   XSS_INTERNAL_E.:XSA1TOU  is referenced.
   UM_CP6.:E05OU  is referenced.
      No diagnostics issued in procedure XSS$ALARM.
PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:55   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @SCID                     14-0-0/w PTR         r     1 CTX$
    *0-0-0/w SBIN        r     1 SCID                       4-0-0/d STRC(288)   r     1 VBLK

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(288)   r     1 XSS_VBLK

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1260)  r     1 SCTX


   Procedure XSS$ALARM requires 36 words for executable code.
   Procedure XSS$ALARM requires 16 words of local(AUTO) storage.

    No errors detected in file XSS$CLOCK.:XSA1TSI    .
PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:56   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:57   
          MINI XREF LISTING

CTX$
      2401**DCL      1980--IMP-PTR  2405<>CALL     2406>>IF       2408>>IF       2411>>ASSIGN
DONE
      2418**LABEL    2405--CALLALT  2409--GOTO
LOOP
      2405**LABEL    2407--CALLALT
SCID
      2402**DCL        12--PROC     2405<>CALL     2407<>CALL
SCTX.ALARM
      2272**DCL      2408>>IF
SCTX.HISTZ
      2294**DCL      2295--REDEF
SCTX.LATCH.PRESENT
      2342**DCL      2406>>IF
VBLK
      1769**DCL      2410<<ASSIGN   2413<>CALL
VBLK.CTX$
      1777**DCL      2411<<ASSIGN
VBLK.EVENT
      1787**DCL      2412<<ASSIGN
XSS$COMMPEND
      2397**DCL-ENT  2407--CALL
XSS$CTXPTR
      2398**DCL-ENT  2405--CALL
XSS$MACHINE
      2399**DCL-ENT  2413--CALL
XSS_VBLK
      1874**DCL      2410>>ASSIGN
PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:58   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XSS$ALARM File=XSS$CLOCK.:XSA1TSI                             WED 10/01/97 12:08 Page:59   
              MINI UREF LISTING

XSS$ALARM      12**PROC
