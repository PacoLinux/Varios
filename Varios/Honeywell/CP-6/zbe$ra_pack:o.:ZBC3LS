

CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ra_pack.c,v 1.5 87/03/10 11:26:05 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  R E G I S T E R   A L L O C A T I O N
        7         7              *
        8         8              *  R A _ P A C K . C
        9         9              */
       10        10
       11        11             #include "types:h"
       12        12             #include "debug:h"
       13        13             #include "def:h"
       14        14             #include "global:h"
       15        15             #include "lset:h"
       16        16             #include "cset:h"
       17        17             #include "alloc:h"
       18        18             #include "aux:h"
       19        19             #include "em_reg:h"
       20        20             #include "ra:h"
       21        21             #include "ra_aux:h"
       22        22             #include "ra_interv:h"
       23        23
       24        24
       25        25             short regs_occupied[NRREGTYPES];  /* #occupied registers for reg_pointer,
       26        26                           * reg_any etc.
       27        27                           */
       28        28             #define reg_available(t) (regs_available[t] > regs_occupied[t])
       29        29
       30        30             STATIC initregcount()
       31        31             {
       32        32    1         int t;
       33        33    1
       34        34    1         for (t = 0; t < NRREGTYPES; t++) {
       35        35    2            regs_occupied[t] = 0;
       36        36    2         }
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37    1        }
       38        38
       39        39             STATIC alloc_p make_dummy()
       40        40             {
       41        41    1         alloc_p x;
       42        42    1
       43        43    1         x = newalloc();
       44        44    1         /* x->al_profits = 0; */
       45        45    1         return x;
       46        46    1        }
       47        47
       48        48
       49        49             STATIC bool fits_in(a,b,cont_item)
       50        50              alloc_p a,b;
       51        51              bool *cont_item;
       52        52             {
       53        53    1         /* See if allocation a can be assigned the same register as b.
       54        54    1          * Both allocations should be of the same register-type.
       55        55    1          * Note that there may be several other allocations (mates) assigned to
       56        56    1          * the same register as b. A new candidate (i.e. 'a') is only
       57        57    1          * allowed to join them if it is not the rival of any resident
       58        58    1          * allocation.
       59        59    1          */
       60        60    1
       61        61    1         *cont_item = FALSE;
       62        62    1         if (a->al_regtype == b->al_regtype) {
       63        63    2            while (b != (alloc_p) 0) {
       64        64    3               if (Cis_elem(a->al_id,b->al_rivals)) break;
       65        65    3               b = b->al_mates;
       66        66    3               if (b != (alloc_p) 0 && a->al_item == b->al_item) {
       67        67    4                  *cont_item = TRUE;
       68        68    4               }
       69        69    3            }
       70        70    2         }
       71        71    1         return b == (alloc_p) 0;
       72        72    1        }
       73        73
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74
       75        75             STATIC alloc_p find_fitting_alloc(alloc,packed)
       76        76              alloc_p alloc,packed;
       77        77             {
       78        78    1         /* Try to find and already packed allocation that is assigned
       79        79    1          * a register that may also be used for alloc.
       80        80    1          * We prefer allocations that have the same item as alloc.
       81        81    1          */
       82        82    1
       83        83    1         register alloc_p x;
       84        84    1         alloc_p cand = (alloc_p) 0;
       85        85    1         bool cont_item;
       86        86    1
       87        87    1         for (x = packed->al_next; x != (alloc_p) 0; x = x->al_next) {
       88        88    2            if (fits_in(alloc,x,&cont_item)) {
       89        89    3               cand = x;
       90        90    3               if (cont_item) break;
       91        91    3            }
       92        92    2         }
       93        93    1         if (cont_item == FALSE) cand = (alloc_p) 0;
       94        94    1         return cand;
       95        95    1        }
       96        96
       97        97
       98        98             STATIC bool room_for(alloc,packed)
       99        99              alloc_p alloc,packed;
      100       100             {
      101       101    1         /* See if there is any register available for alloc */
      102       102    1
      103       103    1         return reg_available(alloc->al_regtype) ||
      104       104    1            (find_fitting_alloc(alloc,packed) != (alloc_p) 0);
      105       105    1        }
      106       106
      107       107
      108       108
      109       109             STATIC alloc_p best_alloc(unpacked,packed,time_opt)
      110       110              alloc_p unpacked,packed;
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111              bool time_opt;
      112       112             {
      113       113    1         /* Find the next best candidate */
      114       114    1
      115       115    1         register alloc_p x,best;
      116       116    1         bool loops_only;
      117       117    1
      118       118    1         for (loops_only = time_opt; ; loops_only = FALSE) {
      119       119    2            /* If we're optimizing execution time, we first
      120       120    2             * consider loops.
      121       121    2             */
      122       122    2            best = unpacked; /* dummy */
      123       123    2            for (x = unpacked->al_next; x != (alloc_p) 0; x = x->al_next) {
      124       124    3               if ((!loops_only || x->al_isloop) &&
      125       125    3                   x->al_profits > best->al_profits &&
      126       126    3                   room_for(x,packed)) {
      127       127    4                  best = x;
      128       128    4               }
      129       129    3            }
      130       130    2            if (best != unpacked || !loops_only) break;
      131       131    2         }
      132       132    1         return (best == unpacked ? (alloc_p) 0 : best);
      133       133    1        }
      134       134
      135       135
      136       136
      137       137
      138       138             STATIC alloc_p choose_location(alloc,packed,p)
      139       139              alloc_p alloc,packed;
      140       140              proc_p p;
      141       141             {
      142       142    1         /* Decide in which register to put alloc */
      143       143    1
      144       144    1         alloc_p fit;
      145       145    1         offset dum;
      146       146    1
      147       147    1         fit = find_fitting_alloc(alloc,packed);
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148    1         if (fit == (alloc_p) 0) {
      149       149    2            /* Take a brand new register; allocate a dummy local for it */
      150       150    2            alloc->al_regnr = regs_occupied[alloc->al_regtype]++;
      151       151    2            dum = tmplocal(p,(offset) alloc->al_item->it_size);
      152       152    2            alloc->al_dummy = dum;
      153       153    2         } else {
      154       154    2            alloc->al_regnr = fit->al_regnr;
      155       155    2            alloc->al_dummy = fit->al_dummy;
      156       156    2         }
      157       157    1         return fit;
      158       158    1        }
      159       159
      160       160
      161       161
      162       162             STATIC update_lists(alloc,unpacked,packed,fit)
      163       163              alloc_p alloc,unpacked,packed,fit;
      164       164             {
      165       165    1         /* 'alloc' has been granted a register; move it from the 'unpacked'
      166       166    1          * list to the 'packed' list. Also remove any allocation from 'unpacked'
      167       167    1          * having:
      168       168    1          *  1. the same item as 'alloc' and
      169       169    1          *  2. a timespan that overlaps the timespan of alloc.
      170       170    1          */
      171       171    1
      172       172    1         register alloc_p x,q,next;
      173       173    1
      174       174    1         q = unpacked; /* dummy element at head of list */
      175       175    1         for (x = unpacked->al_next; x != (alloc_p) 0; x = next) {
      176       176    2            next = x->al_next;
      177       177    2            if (x->al_item == alloc->al_item &&
      178       178    2                not_disjoint(x->al_timespan, alloc->al_timespan)) {
      179       179    3               /* this code kills two birds with one stone;
      180       180    3                * x is either an overlapping allocation or
      181       181    3                * alloc itself!
      182       182    3                */
      183       183    3               q->al_next = x->al_next;
      184       184    3               if (x == alloc) {
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185    4                  if (fit == (alloc_p) 0) {
      186       186    5                     x->al_next = packed->al_next;
      187       187    5                     packed->al_next = x;
      188       188    5                  } else {
      189       189    5                     x->al_mates = fit->al_mates;
      190       190    5                     fit->al_mates = x;
      191       191    5                     x->al_next = (alloc_p) 0;
      192       192    5                  }
      193       193    4               }
      194       194    3            } else {
      195       195    3               q = x;
      196       196    3            }
      197       197    2         }
      198       198    1        }
      199       199
      200       200
      201       201
      202       202             STATIC short cum_profits(alloc)
      203       203              alloc_p alloc;
      204       204             {
      205       205    1         /* Add the profits of all allocations packed in the same
      206       206    1          * register as alloc (i.e. alloc and all its 'mates').
      207       207    1          */
      208       208    1
      209       209    1         alloc_p m;
      210       210    1         short sum = 0;
      211       211    1
      212       212    1         for (m = alloc; m != (alloc_p) 0; m = m->al_mates) {
      213       213    2            sum += m->al_profits;
      214       214    2         }
      215       215    1         return sum;
      216       216    1        }
      217       217
      218       218
      219       219
      220       220             STATIC alloc_p best_cumprofits(list,x_out,prev_out)
      221       221              alloc_p list, *x_out, *prev_out;
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      222       222             {
      223       223    1         /* Find the allocation with the best cummulative profits */
      224       224    1
      225       225    1         register alloc_p x,prev,best_prev;
      226       226    1         short best = 0, cum;
      227       227    1
      228       228    1         prev = list;
      229       229    1         for (x = list->al_next; x != (alloc_p) 0; x = x->al_next) {
      230       230    2            cum = cum_profits(x);
      231       231    2            if (cum > best) {
      232       232    3               best = cum;
      233       233    3               best_prev = prev;
      234       234    3            }
      235       235    2            prev = x;
      236       236    2         }
      237       237    1         if (best == 0) {
      238       238    2            *x_out = (alloc_p) 0;
      239       239    2         } else {
      240       240    2            *x_out = best_prev->al_next;
      241       241    2            *prev_out = best_prev;
      242       242    2         }
      243       243    1        }
      244       244
      245       245
      246       246
      247       247             STATIC account_regsave(packed,unpacked)
      248       248              alloc_p packed,unpacked;
      249       249             {
      250       250    1         /* After all packing has been done, we check for every allocated
      251       251    1          * register whether it is really advantageous to use this
      252       252    1          * register. It may be possible that the cost of saving
      253       253    1          * and restoring the register are higher than the profits of all
      254       254    1          * allocations packed in the register. If so, we simply remove
      255       255    1          * all these allocations.
      256       256    1          * The cost of saving/restoring one extra register may depend on
      257       257    1          * the number of registers already saved.
      258       258    1          */
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      259       259    1
      260       260    1         alloc_p x,prev,checked;
      261       261    1         short time,space;
      262       262    1         short tot_cost = 0,diff;
      263       263    1
      264       264    1         initregcount();
      265       265    1         checked = make_dummy();
      266       266    1         checked->al_next = (alloc_p) 0;
      267       267    1         while (TRUE) {
      268       268    2            best_cumprofits(packed,&x,&prev);
      269       269    2            if (x == (alloc_p) 0) break;
      270       270    2            regs_occupied[x->al_regtype]++;
      271       271    2            regsave_cost(regs_occupied,&time,&space);
      272       272    2            diff = add_timespace(time,space) - tot_cost;
      273       273    2            if (diff < cum_profits(x)) {
      274       274    3               /* x is o.k. */
      275       275    3               prev->al_next = x->al_next;
      276       276    3               x->al_next = checked->al_next;
      277       277    3               checked->al_next = x;
      278       278    3               tot_cost += diff;
      279       279    3            } else {
      280       280    3               break;
      281       281    3            }
      282       282    2         }
      283       283    1         /* Now every allocation in 'packed' does not pay off, so
      284       284    1          * it is moved to unpacked, indicating it will not be assigned
      285       285    1          * a register.
      286       286    1          */
      287       287    1         for (x = unpacked; x->al_next != (alloc_p) 0; x = x->al_next);
      288       288    1         x->al_next = packed->al_next;
      289       289    1         packed->al_next = checked->al_next;
      290       290    1         oldalloc(checked);
      291       291    1        }
      292       292
      293       293
      294       294
      295       295             STATIC bool in_single_reg(item,packed)
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      296       296              item_p item;
      297       297              alloc_p packed;
      298       298             {
      299       299    1         /* See if item is allocated in only one register (i.e. not in
      300       300    1          * several different registers during several parts of its lifetime.
      301       301    1          */
      302       302    1
      303       303    1         register alloc_p x,m;
      304       304    1         bool seen = FALSE;
      305       305    1
      306       306    1         for (x = packed->al_next; x != (alloc_p) 0; x = x->al_next) {
      307       307    2            for ( m = x; m != (alloc_p) 0; m = m->al_mates) {
      308       308    3               if (m->al_item == item) {
      309       309    4                  if (seen) return FALSE;
      310       310    4                  seen = TRUE;
      311       311    4                  break;
      312       312    4               }
      313       313    3            }
      314       314    2         }
      315       315    1         return TRUE;
      316       316    1        }
      317       317
      318       318
      319       319
      320       320             STATIC alloc_p find_prev(alloc,list)
      321       321              alloc_p alloc,list;
      322       322             {
      323       323    1         register alloc_p x;
      324       324    1
      325       325    1         assert ( alloc != (alloc_p) 0);
      326       326    1         for (x = list; x->al_next != alloc ; x = x->al_next)
      327       327    1            assert(x != (alloc_p) 0);
      328       328    1         return x;
      329       329    1        }
      330       330
      331       331
      332       332             /* If an item is always put in the same register during different loops,
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      333       333              * we try to put it in that register during the whole procedure.
      334       334              * The profits of the whole-procedure allocation are updated to prevent
      335       335              * account_regsave from rejecting it.
      336       336              */
      337       337
      338       338             STATIC repl_allocs(new,old,packed)
      339       339              alloc_p new,old,packed;
      340       340             {
      341       341    1         alloc_p x,next,prev,*p;
      342       342    1         short prof = 0;
      343       343    1
      344       344    1         new->al_regnr = old->al_regnr;
      345       345    1         new->al_dummy = old->al_dummy;
      346       346    1         prev = find_prev(old,packed);
      347       347    1         new->al_next = old->al_next;
      348       348    1         old->al_next = (alloc_p) 0;
      349       349    1         prev->al_next = new;
      350       350    1         new->al_mates = old;
      351       351    1         p = &new->al_mates;
      352       352    1         for (x = old; x != (alloc_p) 0; x = next) {
      353       353    2            next = x->al_mates;
      354       354    2            if (x->al_item == new->al_item) {
      355       355    3               prof += x->al_profits;
      356       356    3               *p = next;
      357       357    3               oldalloc(x);
      358       358    3            } else {
      359       359    3               p = &x->al_mates;
      360       360    3            }
      361       361    2         }
      362       362    1         new->al_profits = prof;
      363       363    1        }
      364       364
      365       365
      366       366
      367       367             STATIC assemble_allocs(packed)
      368       368              alloc_p packed;
      369       369             {
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      370       370    1         register alloc_p x,m,next;
      371       371    1         alloc_p e;
      372       372    1         bool voidb;
      373       373    1
      374       374    1         for (x = packed->al_next; x != (alloc_p) 0; x = next) {
      375       375    2            next = x->al_next;
      376       376    2            for ( m = x; m != (alloc_p) 0; m = m->al_mates) {
      377       377    3               if (in_single_reg(m->al_item,packed) &&
      378       378    3                   (e = m->al_wholeproc) != (alloc_p) 0 &&
      379       379    3                   e->al_profits > 0 &&
      380       380    3                   fits_in(e,x,&voidb)) {
      381       381    4                  repl_allocs(e,x,packed);
      382       382    4                  break;
      383       383    4               }
      384       384    3            }
      385       385    2         }
      386       386    1        }
      387       387
      388       388             pack(alloclist,time_opt,packed_out,not_packed_out,p)
      389       389              alloc_p alloclist, *packed_out,*not_packed_out;
      390       390              bool time_opt;
      391       391              proc_p p;
      392       392             {
      393       393    1         /* This is the packing system. It decides which allations
      394       394    1          * to grant a register.
      395       395    1          * We use two lists: packed (for allocations that are assigned a
      396       396    1          * register) and unpacked (allocations not yet assigned a register).
      397       397    1          * The packed list is in fact '2-dimensional': the al_next field is
      398       398    1          * used to link allations that are assigned different registers;
      399       399    1          * the al_mates field links allocations that are assigned to
      400       400    1          * the same registers (i.e. these allocations fit together).
      401       401    1          */
      402       402    1
      403       403    1         register alloc_p x;
      404       404    1         alloc_p packed,unpacked,fit;
      405       405    1
      406       406    1         initregcount();
CC.C03    File=zbe$ra_pack:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=12 
      407       407    1         packed = make_dummy();
      408       408    1         packed->al_next = (alloc_p) 0;
      409       409    1         unpacked = make_dummy();
      410       410    1         unpacked->al_next = alloclist;
      411       411    1         while ((x = best_alloc(unpacked,packed,time_opt)) != (alloc_p) 0) {
      412       412    2            fit = choose_location(x,packed,p);
      413       413    2            update_lists(x,unpacked,packed,fit);
      414       414    2         }
      415       415    1         assemble_allocs(packed);
      416       416    1         account_regsave(packed,unpacked);
      417       417    1         /* remove allocations that don't pay off against register
      418       418    1          * save/restore costs.
      419       419    1          */
      420       420    1         *packed_out = packed->al_next;
      421       421    1         *not_packed_out = unpacked->al_next;
      422       422    1         oldalloc(packed);
      423       423    1         oldalloc(unpacked);
      424       424    1        }
      425       425
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced
   zbe$ra:h.:ZBC3TOU. is referenced
   zbe$ra_aux:h.:ZBC3TOU. is referenced
   zbe$ra_interv:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$ra_pack:c.:ZBC3TSI
