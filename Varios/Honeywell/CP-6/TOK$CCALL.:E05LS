VERSION E05

PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:1    
        1        1        /*M* TOK$CCALL     TOLTS Courtesy CALL program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOK$CCALL
       12       12             PURPOSE:      Simulate a GCOS type Courtesy Call to a subexec.
       13       13        */
       14       14
       15       15        /*F* NAME:         TOK$COURTESY_CALL
       16       16             PURPOSE:      Simulate a GCOS type Courtesy Call to a subexec.
       17       17             DESCRIPTION:  This routine is called by anyone wishing to pay
       18       18                           a Courtesy Call to a subexec, passing the address
       19       19                           of the Courtesy Call routine.
       20       20             REFERENCE:    CP-6 Release C00, A00 Integration
       21       21                           Carl Eichert
       22       22        */
       23       23        %EJECT;
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:2    
       24       24        /*D* NAME:         TOK$COURTESY_CALL
       25       25             CALL:         CALL TOK$COURTESY_CALL(CC$);
       26       26             INTERFACE:    Transfers control to a subexec's Courtesy Call
       27       27                           routine.
       28       28             INPUT:        CC$ is an entry pointer to a subexec's Courtesy
       29       29                           Call routine.
       30       30             OUTPUT:       None.
       31       31             DESCRIPTION:  In the GCOS world, the equivalent of no wait I/O
       32       32                           and events is the Courtesy Call.  If a GCOS program
       33       33                           desires to do no wait type I/O, it gives GCOS a
       34       34                           an address of a Courtesy Call which will be entered
       35       35                           when the I/O completes in much the same way
       36       36                           M$EVENT passes the address of the an Event
       37       37                           Handler to CP6.  The Courtesy Call routines in GCOS
       38       38                           terminate by doing a MME GEENDC.
       39       39
       40       40                           So this function must be simulated for the Slave
       41       41                           Mode Subexecs.  TOK$COURTEST_CALL is called when
       42       42                           a PL6 program desires to pay a Courtesy Call to
       43       43                           a subexec.  The calling routine builds a PL6
       44       44                           entry pointer to the Courtesy Call routine and
       45       45                            passes it.  The REMEMBER statement of PL6 is used to
       46       46                           build the REMEBER variable TOK$CC_RETURN.  This
       47       47                           REMEMBER variable will be used in conjunction with
       48       48                           the PL6 UNWIND statement to return control to this
       49       49                           routine following the termination of the Courtesy
       50       50                           Call.
       51       51
       52       52                           The REMEMBER statement saves a pointer to the
       53       53                           auto frame for TOK$COURTESY_CALL, and an address in
       54       54                           it, COURTESY_CALL_RETURN.  An UNWIND to this
       55       55                           variable will pop all intervening auto frames and
       56       56                           return control to this routine at the specified
       57       57                           address.
       58       58
       59       59                           CALL CC$ transfers control to the subexec's
       60       60                           Courtesy Call routine.  When it is done processing,
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:3    
       61       61                           it does a MME GEENDC.  The MME Service Routine
       62       62                           for GEENDC merely does an UNWIND TO TOK$CC_RETURN
       63       63                           which returns control here.
       64       64
       65       65                           The current design requires that TOK$CC_RETURN
       66       66                           be a static SYMDEFed variable.  This precludes
       67       67                           this routine from being recursive.  Therefore, a
       68       68                           Courtesy Call cannot be paid if one is already
       69       69                           in progress.  Specifically what this means, is that
       70       70                           the dispatcher queue cannot be serviced if a MME
       71       71                           GEENDC is about to be serviced because the
       72       72                           dispatcher service itself may requre a Courtesy
       73       73                           Call (e.g., if servicing an Interslave Write or the
       74       74                           completion of a no wait I/O or returning the status
       75       75                           from a MME TADIO type console I/O).  Therefore,
       76       76                           the MME Handler (in TOF$FAULTS) specifically
       77       77                           checks to see if the MME to be serviced is a MME
       78       78                           GEENDC.  If it is, a Courtesy Call is in progress
       79       79                           and the dispatcher queue is not serviced on this
       80       80                           pass through the MME Handler.
       81       81             LAST UPDATE:  09/13/82
       82       82        */
       83       83        %EJECT;
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:4    
       84       84        TOK$COURTESY_CALL: PROC(CC$);
       85       85
       86       86    1      DCL CC$           EPTR;
       87       87    1      DCL TOK$CC_RETURN REMEMBER STATIC SYMDEF DALIGNED;
       88       88
       89       89        /* Code */
       90       90
       91       91    1      REMEMBER COURTESY_CALL_RETURN IN TOK$CC_RETURN;
       92       92    1      CALL CC$;
       93       93
       94       94        /* MME GEENDC unwinds to here */
       95       95    1   COURTESY_CALL_RETURN:
       96       96    1      RETURN;
       97       97
       98       98    1   END TOK$COURTESY_CALL;

PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:5    
      No diagnostics issued in procedure TOK$COURTESY_CALL.

   Procedure TOK$COURTESY_CALL requires 11 words for executable code.
   Procedure TOK$COURTESY_CALL requires 4 words of local(AUTO) storage.

    No errors detected in file TOK$CCALL.:E05TSI    .

PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:6    

 Object Unit name= TOK$COURTESY_CALL                          File name= TOK$CCALL.:E05TOU
 UTS= JUL 30 '97 06:24:17.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     2      2  TOK$COURTESY_CALL
    1   Proc  even  none    11     13  TOK$COURTESY_CALL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        1  TOK$COURTESY_CALL

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  TOK$CC_RETURN

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:7    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:8    


        1        1        /*M* TOK$CCALL     TOLTS Courtesy CALL program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOK$CCALL
       12       12             PURPOSE:      Simulate a GCOS type Courtesy Call to a subexec.
       13       13        */
       14       14
       15       15        /*F* NAME:         TOK$COURTESY_CALL
       16       16             PURPOSE:      Simulate a GCOS type Courtesy Call to a subexec.
       17       17             DESCRIPTION:  This routine is called by anyone wishing to pay
       18       18                           a Courtesy Call to a subexec, passing the address
       19       19                           of the Courtesy Call routine.
       20       20             REFERENCE:    CP-6 Release C00, A00 Integration
       21       21                           Carl Eichert
       22       22        */
       23       23        %EJECT;
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:9    
       24       24        /*D* NAME:         TOK$COURTESY_CALL
       25       25             CALL:         CALL TOK$COURTESY_CALL(CC$);
       26       26             INTERFACE:    Transfers control to a subexec's Courtesy Call
       27       27                           routine.
       28       28             INPUT:        CC$ is an entry pointer to a subexec's Courtesy
       29       29                           Call routine.
       30       30             OUTPUT:       None.
       31       31             DESCRIPTION:  In the GCOS world, the equivalent of no wait I/O
       32       32                           and events is the Courtesy Call.  If a GCOS program
       33       33                           desires to do no wait type I/O, it gives GCOS a
       34       34                           an address of a Courtesy Call which will be entered
       35       35                           when the I/O completes in much the same way
       36       36                           M$EVENT passes the address of the an Event
       37       37                           Handler to CP6.  The Courtesy Call routines in GCOS
       38       38                           terminate by doing a MME GEENDC.
       39       39
       40       40                           So this function must be simulated for the Slave
       41       41                           Mode Subexecs.  TOK$COURTEST_CALL is called when
       42       42                           a PL6 program desires to pay a Courtesy Call to
       43       43                           a subexec.  The calling routine builds a PL6
       44       44                           entry pointer to the Courtesy Call routine and
       45       45                            passes it.  The REMEMBER statement of PL6 is used to
       46       46                           build the REMEBER variable TOK$CC_RETURN.  This
       47       47                           REMEMBER variable will be used in conjunction with
       48       48                           the PL6 UNWIND statement to return control to this
       49       49                           routine following the termination of the Courtesy
       50       50                           Call.
       51       51
       52       52                           The REMEMBER statement saves a pointer to the
       53       53                           auto frame for TOK$COURTESY_CALL, and an address in
       54       54                           it, COURTESY_CALL_RETURN.  An UNWIND to this
       55       55                           variable will pop all intervening auto frames and
       56       56                           return control to this routine at the specified
       57       57                           address.
       58       58
       59       59                           CALL CC$ transfers control to the subexec's
       60       60                           Courtesy Call routine.  When it is done processing,
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:10   
       61       61                           it does a MME GEENDC.  The MME Service Routine
       62       62                           for GEENDC merely does an UNWIND TO TOK$CC_RETURN
       63       63                           which returns control here.
       64       64
       65       65                           The current design requires that TOK$CC_RETURN
       66       66                           be a static SYMDEFed variable.  This precludes
       67       67                           this routine from being recursive.  Therefore, a
       68       68                           Courtesy Call cannot be paid if one is already
       69       69                           in progress.  Specifically what this means, is that
       70       70                           the dispatcher queue cannot be serviced if a MME
       71       71                           GEENDC is about to be serviced because the
       72       72                           dispatcher service itself may requre a Courtesy
       73       73                           Call (e.g., if servicing an Interslave Write or the
       74       74                           completion of a no wait I/O or returning the status
       75       75                           from a MME TADIO type console I/O).  Therefore,
       76       76                           the MME Handler (in TOF$FAULTS) specifically
       77       77                           checks to see if the MME to be serviced is a MME
       78       78                           GEENDC.  If it is, a Courtesy Call is in progress
       79       79                           and the dispatcher queue is not serviced on this
       80       80                           pass through the MME Handler.
       81       81             LAST UPDATE:  09/13/82
       82       82        */
       83       83        %EJECT;
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:11   
       84       84        TOK$COURTESY_CALL: PROC(CC$);

     84  1 000000   000000 700200 xent  TOK$COURTES* TSX0  ! X66_AUTO_1
         1 000001   000004 000001                    ZERO    4,1

       85       85
       86       86    1      DCL CC$           EPTR;
       87       87    1      DCL TOK$CC_RETURN REMEMBER STATIC SYMDEF DALIGNED;
       88       88
       89       89        /* Code */
       90       90
       91       91    1      REMEMBER COURTESY_CALL_RETURN IN TOK$CC_RETURN;

     91  1 000002   000012 635000 1                  EAA     COURTESY_CALL_RETURN
         1 000003   000000 452400 0                  STP2    TOK$CC_RETURN
         1 000004   000001 755000 0                  STA     TOK$CC_RETURN+1

       92       92    1      CALL CC$;

     92  1 000005   200003 470500                    LDP0    @CC$,,AUTO
         1 000006   000000 220100                    LDX0    0,,PR0
         1 000007   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000010   000000 701010                    TSX1    0,X0
         1 000011   000000 011000                    NOP     0

       93       93
       94       94        /* MME GEENDC unwinds to here */
       95       95    1   COURTESY_CALL_RETURN:
       96       96    1      RETURN;

     96  1 000012   000000 702200 xent  COURTESY_CA* TSX2  ! X66_ARET
       97       97
       98       98    1   END TOK$COURTESY_CALL;

PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:12   
      No diagnostics issued in procedure TOK$COURTESY_CALL.
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:13   

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    84-    98      4     3     1      0  y   y    1   1 TOK$COURTESY_CALL
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:14   

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              84   1      0 Proc    0                                91   1      2 Rememb  0
         $    92   1      5 Call    0
              96   1     12 Return  0 COURTESY_CALL_RETURN


  **** Statement type totals  ****

     1 Call       1 Return     1 Rememb     1 Proc       1 Labels

 # major stmts=    3 Code/major= 3.66 # stmts=    4 Code/stmt= 2.75  Point total= 92.0
 Cost/major stmt=  2.8 Cost/stmt=  2.1 Total cost=      8.6

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$$$$$$$$$$$$$$$$$$$
   6-8
  8-10
 10-12
 12-14
 14-16
 16-18
 18-20
 20-22
 22-??
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:15   

 **** Variables and constants ****

  ****  Section 000  Data  TOK$COURTESY_CALL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d REMB        r     1 TOK$CC_RETURN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @CC$                      *0-0-0/w EPTR        r     1 CC$


   Procedure TOK$COURTESY_CALL requires 11 words for executable code.
   Procedure TOK$COURTESY_CALL requires 4 words of local(AUTO) storage.

    No errors detected in file TOK$CCALL.:E05TSI    .
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:16   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:17   
          MINI XREF LISTING

CC$
        86**DCL        84--PROC       92>>CALL
COURTESY_CALL_RETURN
        96**LABEL      91--REMEMBR
TOK$CC_RETURN
        87**DCL        91<<REMEMBR
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:18   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOK$COURTESY_CALL File=TOK$CCALL.:E05TSI                      WED 07/30/97 06:24 Page:19   
              FULL UREF LISTING

TOK$COURTESY_CALL
        84**PROC
