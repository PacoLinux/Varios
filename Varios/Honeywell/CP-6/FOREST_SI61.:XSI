/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/************************
*  GETDCB               *
*************************/
GET_DCB: PROC (UNIT, PDCBNUM);
 
/*F*  NAME:    GET_DCB
      PURPOSE: Gets the DCB number for a unit between 1 and 999.
               DCB numbers are stored in an array to eliminate the
               need to call M$GETDCB more than once.
      CALL:    CALL GET_DCB (UNIT, PDCBNUM)
      INPUT:   UNIT     -unit number.  Usually this refers to a
                         FORTRAN unit number, but BUILDDCB may
                         be called to associate another DCB with
                         a unit number.  Must be between 1 and 999.
      OUTPUT:  PDCBNUM  -DCB number of DCB associated with UNIT.
*/
 
   %INCLUDE CP_6;
   %INCLUDE FOREST_C61;
   DCL UNIT SBIN WORD ALIGNED;
   DCL 1 UNIT_NAME,
       2 I SBIN BYTE UNAL,
       2 NAME CHAR(7) UNAL;
   DCL CHAR_DCB CHAR(3);
   DCL I SBIN;
   DCL PDCBNUM       SBIN;
   DCL LDCBNUM       SBIN;
   DCL DCBNUMBER (0:999) SBIN BYTE STATIC SYMDEF UNAL INIT (-1 * 1000);
   DCL MESSAGE       CHAR (0) CONSTANT INIT (
      'Bad unit number.  Number must be between 1 and 999.');
   DCL M$DO          DCB;
 
   %FPT_GETDCB (FPTN=FPT_GETDCB_CONSTANT, STCLASS=CONSTANT, MERGE=YES);
   %FPT_GETDCB (STCLASS=AUTO);
   %FPT_WRITE (STCLASS=CONSTANT, DCB=M$DO, BUF=MESSAGE);
 
      IF UNIT < 1 OR UNIT > 999 THEN
         DO;
         CALL M$WRITE (FPT_WRITE);
         CALL M$XXX;
         END;
      LDCBNUM = DCBNUMBER (UNIT);
      IF LDCBNUM = -1 THEN
         DO;
 
         /* Initialize GETDCB FPT */
 
         FPT_GETDCB = FPT_GETDCB_CONSTANT;
         FPT_GETDCB.V_ = VECTOR (FPT_GETDCB.V);
         FPT_GETDCB.DCBNAME_ = VECTOR (UNIT_NAME);
         FPT_GETDCB.DCBNUM_ = VECTOR (LDCBNUM);
 
         CALL BINCHAR(CHAR_DCB,UNIT);
         I = 1;
         IF SUBSTR (CHAR_DCB, 1, 1) ~= '0' THEN I = 2;
         IF SUBSTR (CHAR_DCB, 0, 1) ~= '0' THEN I = 3;
         CALL INSERT(UNIT_NAME.NAME,0,2 + I,'F$',SUBSTR(CHAR_DCB, 3-I, I));
         UNIT_NAME.I = 2 + I;
         CALL M$GETDCB (FPT_GETDCB) ALTRET (BUM_DCB);
         DCBNUMBER (UNIT) = LDCBNUM;
         LAST_DCB = LDCBNUM;
         END;
      IF ADDR (PDCBNUM) ~= ADDR (NIL) THEN PDCBNUM = LDCBNUM;
      RETURN;
 
BUM_DCB:
   CALL ALTRET_ABORT;
END GET_DCB;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************
*  HANDLER_ABORT               *
*******************************/
HANDLER_ABORT: PROC;
 
/*F*  NAME:       HANDLER_ABORT
      PURPOSE:    Called by library routines in case of an unexpected
                  altreturn from a monitor service call.  If the
                  user has specified a error handler (via a call to
                  IOERRHAN) that routine will be given control.
                  Otherwise, M$ERRMSG is called to print the system
                  error message and M$XXX is called to abort the
                  program.
      CALL:       CALL HANDLER_ABORT;
 
      ENTRY:      ALTRET_ABORT
      PURPOSE:    User callable to report unexpected altreturn from
                  a monitor service call.  Calls M$ERRMSG and then
                  M$XXX.
 
      ENTRY:      IO$ABORT
      PURPOSE:    Same purpose as ALTRET_ABORT except that it may
                  be called from a FORTRAN program.
*/
%INCLUDE CP_6;
%B$TCB;
%B$EXCFR;
%B$ALT;
DCL   BUFFER                           CHAR (120);
DCL   B$TCB$                           PTR SYMREF;
DCL   M$DO                             DCB;
%FPT_ERRMSG (FPTN=FPT_ERRMSG_CONSTANT, STCLASS=CONSTANT, OUTDCB1 = M$DO, TYC=YES);
%FPT_ERRMSG (STCLASS=AUTO);
DCL   LAST_DCB                         SBIN WORD EXTROOT;
DCL   ABORT_ROUTINE                    EPTR EXTROOT INIT (ENTADDR (NIL));
 
   IF ABORT_ROUTINE ~= ENTADDR (NIL) THEN CALL ABORT_ROUTINE;
 
/*************************
*  ALTRET_ABORT          *
**************************/
ALTRET_ABORT: ENTRY;
/*************************
*  IO$ABORT              *
**************************/
IO$ABORT: ENTRY;
 
   /* Initialize the ERRMSG FPT */
 
   FPT_ERRMSG = FPT_ERRMSG_CONSTANT;
   FPT_ERRMSG.V_ = VECTOR (FPT_ERRMSG.V);
 
   FPT_ERRMSG.BUF_ = VECTOR (BUFFER);
   FPT_ERRMSG.CODE_ = VECTOR (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR);
   FPT_ERRMSG.V.DCB# = B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB#;
   CALL M$ERRMSG (FPT_ERRMSG);
   CALL M$XXX;
END HANDLER_ABORT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*********************
*  ALTRET_ERROR      *
**********************/
ALTRET_ERROR: PROC (ERR_CODE);
 
/*F*  NAME:       ALTRET_ERROR
      PURPOSE:    Returns error code of last altreturn from a monitor
                  service call.  This info comes from altret frame
                  of the TCB.
      CALL:       CALL ALTRET_ERROR (ERR_CODE);
      OUTPUT:     ERR_CODE SBIN WORD;  -error code of last altret
*/
 
%INCLUDE CP_6;
%LIST;
%B$TCB;
%B$EXCFR;
DCL ERR_CODE            SBIN WORD;
DCL B$TCB$              PTR SYMREF;
 
    ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR#;
END ALTRET_ERROR;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/****************************
*  R$SKEYED               *
*****************************/
R$SKEYED: PROC (UNIT, BUFFER, BUFLEN, KEY, KEYLEN, BUF$SIZE, IOERROR);
%INCLUDE CP_6;
%F$DCB;
DCL UNIT                 SBIN WORD;
DCL BUF$SIZE                  SBIN WORD;
DCL IOERROR                   SBIN WORD;
DCL BUFFER                    CHAR(BUF$SIZE);
DCL BUFLEN                    SBIN WORD;
DCL KEY                       CHAR(KEYLEN);
DCL KEYLEN                    SBIN WORD;
DCL LOCAL_KEY                 CHAR (256);
DCL GET_DCB                   ENTRY (2);
%INCLUDE FOREST_C61;
%INCLUDE B_ERRORS_C;
%FPT_READ (FPTN=FPT_READ_CONSTANT, STCLASS=CONSTANT, KEYR=YES);
%FPT_READ (STCLASS=AUTO);
 
R$SKEYNE: ENTRY (UNIT, BUFFER, BUFLEN, KEY, KEYLEN, BUF$SIZE);
 
   /* Initialize the READ FPT */
 
   FPT_READ = FPT_READ_CONSTANT;
   FPT_READ.V_ = VECTOR (FPT_READ.V);
 
   IF ADDR (IOERROR) ~= ADDR (NIL) THEN IOERROR = 0;
   CALL GET_DCB (UNIT, LAST_DCB);
   FPT_READ.V.DCB# = LAST_DCB;
   FPT_READ.BUF_ = VECTOR (BUFFER);
   FPT_READ.KEY_ = VECTOR (LOCAL_KEY);
   CALL M$READ (FPT_READ) ALTRET (NOGO);
   BUFLEN = DCBADDR (LAST_DCB) -> F$DCB.ARS#;
   KEYLEN = ASCBIN (SUBSTR (LOCAL_KEY, 0, 1));
   KEY = SUBSTR (LOCAL_KEY, 1, KEYLEN);
   RETURN;
 
NOGO:
   IF ADDR (IOERROR) = ADDR (NIL) THEN CALL HANDLER_ABORT;
   CALL ALTRET_ERROR (IOERROR);
   IF IOERROR = %(E$EOF) THEN RETURN;
   CALL ALTRET_ABORT;
 
END R$SKEYED;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/****************************
*  R$KEYED               *
*****************************/
R$KEYED: PROC (UNIT, BUFFER, BUFLEN, KEY, KEYLEN, BUF$SIZE, IOERROR);
%INCLUDE CP_6;
%F$DCB;
DCL UNIT                 SBIN WORD;
DCL BUF$SIZE                  SBIN WORD;
DCL IOERROR                   SBIN WORD;
DCL BUFFER                    CHAR(BUF$SIZE);
DCL BUFLEN                    SBIN WORD;
DCL KEY                       CHAR(KEYLEN);
DCL KEYLEN                    SBIN WORD;
DCL LOCAL_KEY                 CHAR(256);
DCL GET_DCB                   ENTRY (2);
%INCLUDE FOREST_C61;
%INCLUDE B_ERRORS_C;
%FPT_READ (FPTN=FPT_READ_CONSTANT, STCLASS=CONSTANT, KEYS=YES);
%FPT_READ (STCLASS=AUTO);
 
R$KEYNE: ENTRY (UNIT, BUFFER, BUFLEN, KEY, KEYLEN, BUF$SIZE);
 
   /* Initialize READ FPT */
 
   FPT_READ = FPT_READ_CONSTANT;
   FPT_READ.V_ = VECTOR (FPT_READ.V);
 
   IF ADDR (IOERROR) ~= ADDR (NIL) THEN IOERROR = 0;
   CALL GET_DCB (UNIT, LAST_DCB);
   FPT_READ.V.DCB# = LAST_DCB;
   CALL INSERT (LOCAL_KEY,1,KEYLEN, KEY);
   CALL INSERT (LOCAL_KEY, 0, 1, BINASC(KEYLEN));
   FPT_READ.BUF_ = VECTOR (BUFFER);
   FPT_READ.KEY_ = VECTOR (LOCAL_KEY);
   CALL M$READ (FPT_READ) ALTRET (NOGO);
   BUFLEN = DCBADDR (LAST_DCB) -> F$DCB.ARS#;
   RETURN;
 
NOGO:
   IF ADDR (IOERROR) = ADDR (NIL) THEN CALL HANDLER_ABORT;
   CALL ALTRET_ERROR (IOERROR);
   IF IOERROR = %(E$NOKEY) THEN RETURN;
   CALL ALTRET_ABORT;
 
END R$KEYED;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/****************************
*  W$KEYED               *
*****************************/
W$KEYED: PROC (UNIT, BUFFER, BUFLEN, KEY, KEYLEN, MODE, IOERROR);
%INCLUDE CP_6;
%F$DCB;
DCL UNIT                 SBIN WORD;
DCL BUFFER                    CHAR(BUFLEN);
DCL BUFLEN                    SBIN WORD;
DCL KEY                       CHAR(KEYLEN);
DCL KEYLEN                    SBIN WORD;
DCL MODE                      SBIN WORD;
DCL IOERROR                   SBIN WORD;
DCL LOCAL_KEY                 CHAR(256);
DCL GET_DCB                   ENTRY (2);
%INCLUDE FOREST_C61;
%INCLUDE B_ERRORS_C;
%FPT_WRITE (FPTN=FPT_WRITE_CONSTANT, STCLASS=CONSTANT);
%FPT_WRITE (STCLASS=AUTO);
 
W$KEYNE: ENTRY (UNIT, BUFFER, BUFLEN, KEY, KEYLEN, MODE);
 
   /* Initialize WRITE FPT */
 
   FPT_WRITE = FPT_WRITE_CONSTANT;
   FPT_WRITE.V_ = VECTOR (FPT_WRITE.V);
 
   IF ADDR (IOERROR) ~= ADDR (NIL) THEN IOERROR = 0;
   CALL GET_DCB (UNIT, LAST_DCB);
   FPT_WRITE.V.DCB# = LAST_DCB;
   CALL INSERT (LOCAL_KEY,1,KEYLEN, KEY);
   CALL INSERT (LOCAL_KEY, 0, 1, BINASC(KEYLEN));
   FPT_WRITE.KEY_ = VECTOR (LOCAL_KEY);
   IF BUFLEN = 0 THEN DO;
      FPT_WRITE.BUF_.BUF$ = ADDR (NIL);
      FPT_WRITE.BUF_.BOUND = 0;
      END;
   ELSE
      FPT_WRITE.BUF_ = VECTOR(BUFFER);
   DO CASE (MODE);
      CASE (NORMAL);
         FPT_WRITE.V.ONEWKEY# = '1'B;
      CASE (NEW_KEY);
         FPT_WRITE.V.ONEWKEY# = '0'B;
         FPT_WRITE.V.NEWKEY# = '1'B;
      CASE (OLD_KEY);
         FPT_WRITE.V.ONEWKEY# = '0'B;
         FPT_WRITE.V.NEWKEY# = '0'B;
      CASE (ELSE);
         CALL BAD_MODE ('W$KEYED', 7);
   END;
   CALL M$WRITE (FPT_WRITE) ALTRET (NOGO);
   RETURN;
 
NOGO:
   IF ADDR (IOERROR) = ADDR (NIL) THEN CALL HANDLER_ABORT;
   CALL ALTRET_ERROR (IOERROR);
   IF IOERROR = %(E$OLDREC) OR IOERROR = %(E$NEWREC) THEN RETURN;
   CALL ALTRET_ABORT;
 
END W$KEYED;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/************************
*  BAD_MODE             *
*************************/
BAD_MODE: PROC (ROUTINE_NAME, SIZE);
 
/*F*  NAME:       BAD_MODE
      PURPOSE:    Reports bad mode in a call to a library routine.
      CALL:       CALL BAD_MODE (ROUTINE_NAME, SIZE)
      INPUT:      ROUTINE_NAME CHAR (SIZE);  -name of routine
                        that was called with a bad mode.
                  SIZE SBIN WORD;            -length of ROUTINE_NAME
*/
 
   %INCLUDE CP_6;
 
   DCL   ROUTINE_NAME               CHAR (SIZE);
   DCL   SIZE                       SBIN WORD;
   DCL   BUFFER                     CHAR (120);
   DCL M$DO                         DCB;
 
   %FPT_WRITE (FPTN=FPT_WRITE_CONSTANT, STCLASS=CONSTANT, DCB=M$DO);
   %FPT_WRITE (STCLASS=AUTO);
 
   /* Initialize WRITE FPT */
 
   FPT_WRITE = FPT_WRITE_CONSTANT;
   FPT_WRITE.V_ = VECTOR (FPT_WRITE.V);
 
   CALL CONCAT (BUFFER, ' Bad mode in call to ', ROUTINE_NAME, '.');
   FPT_WRITE.BUF_.BUF$ = ADDR (BUFFER);
   FPT_WRITE.BUF_.BOUND = 21 + SIZE;
   CALL M$WRITE (FPT_WRITE);
   CALL M$XXX;
END BAD_MODE;
