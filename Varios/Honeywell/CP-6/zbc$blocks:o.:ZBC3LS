

CC.C03    File=zbc$blocks:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: blocks.c,v 3.4 87/03/20 08:23:56 ceriel Exp $ */
        6         6             /*  B L O C K   S T O R I N G   A N D   L O A D I N G  */
        7         7
        8         8             #include <em.h>
        9         9             #include "arith.h"
       10        10             #include "sizes.h"
       11        11             #include "atw.h"
       12        12             #include "align.h"
       13        13             #include "zb_target.h"
       14        14             #ifndef STB
       15        15             #include "label.h"
       16        16             #include "stack.h"
       17        17             extern arith tmp_pointer_var();
       18        18             #endif STB
       19        19
       20        20             /*  Because EM does not support the loading and storing of
       21        21              objects having other sizes than word fragment and multiple,
       22        22              we need to have a way of transferring these objects, whereby
       23        23              we simulate "loi" and "sti": the address of the source resp.
       24        24              destination is located on top of stack and a call is done
       25        25              to load_block() resp. store_block().
       26        26              ===============================================================
       27        27              # Loadblock() works on the stack as follows: ([ ] indicates the
       28        28              # position of the stackpointer)
       29        29              # lower address--->
       30        30              # 1)  | &object
       31        31              # 2)  | ... ATW(sz) bytes ... | sz | &stack_block | &object
       32        32              # 3)  | ... ATW(sz) bytes ...
       33        33              ===============================================================
       34        34              Loadblock() pushes ATW(sz) bytes directly onto the stack!
       35        35
       36        36              Store_block() works on the stack as follows:
CC.C03    File=zbc$blocks:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37              lower address--->
       38        38              1) | ... ATW(sz) bytes ... | &object
       39        39              2) | ... ATW(sz) bytes ... | &object | &stack_block | sz
       40        40              3) <empty>
       41        41
       42        42              If sz is a legal argument for "loi" or "sti", just one EM
       43        43              instruction is generated.
       44        44              In the other cases, the notion of alignment is taken into account:
       45        45              we only push an object of the size accepted by EM onto the stack,
       46        46              while we need a loop to store the stack block into a memory object.
       47        47             */
       48        48             store_block(sz, al)
       49        49              arith sz;
       50        50              int al;
       51        51             {
       52        52    1         if ( (zb_target_sys == TARGET_CP6) ||
       53        53    1            ((sz == al) && (word_align % al == 0)) ||
       54        54    1            (
       55        55    1               (sz % word_size == 0 || word_size % sz == 0) &&
       56        56    1               (al % word_align == 0)
       57        57    1            )
       58        58    1         )  /* Lots of Irritating Stupid Parentheses */
       59        59    1            C_sti(sz);
       60        60    1         else {
       61        61    2        #ifndef STB
       62        62    2            arith src, dst, src_offs, dst_offs;
       63        63    2
       64        64    2            /* allocate two pointer temporaries */
       65        65    2            src = tmp_pointer_var(&src_offs);
       66        66    2            dst = tmp_pointer_var(&dst_offs);
       67        67    2
       68        68    2            /* load the addresses */
       69        69    2            C_lal(dst);
       70        70    2            C_sti(pointer_size);
       71        71    2            C_lor((arith)1);  /* push current sp */
       72        72    2            C_lal(src);
       73        73    2            C_sti(pointer_size);
CC.C03    File=zbc$blocks:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74    2            copy_loop(sz, src, dst);
       75        75    2            C_asp(ATW(sz));
       76        76    2            free_tmp_var(dst_offs);
       77        77    2            free_tmp_var(src_offs);
       78        78    2        #else STB
       79        79   *S*           /* address of destination lies on the stack  */
       80        80   *S*
       81        81   *S*           /* push address of first byte of block on stack onto
       82        82   *S*              the stack by computing it from the current stack
       83        83   *S*              pointer position
       84        84   *S*           */
       85        85   *S*           C_lor((arith)1);  /* push current sp      */
       86        86   *S*           C_adp(pointer_size); /* set & to 1st byte of block */
       87        87   *S*           C_loc(sz);     /* number of bytes to transfer   */
       88        88   *S*           C_cal("__stb");      /* call transfer routine   */
       89        89   *S*           C_asp(pointer_size + pointer_size + int_size + ATW(sz));
       90        90   *S*       #endif STB
       91        91    2         }
       92        92    1        }
       93        93
       94        94             load_block(sz, al)
       95        95              arith sz;
       96        96              int al;
       97        97             {
       98        98    1         arith esz = ATW(sz); /* effective size == actual # pushed bytes */
       99        99    1
      100       100    1         if ((sz == al) && (word_align % al == 0))
      101       101    1            C_loi(sz);
      102       102    1         else
      103       103    1         if (al % word_align == 0)
      104       104    1            C_loi(esz);
      105       105    1         else if (zb_target_sys == TARGET_CP6)
      106       106    1            C_loi(sz);
      107       107    1         else {
      108       108    2        #ifndef STB
      109       109    2            arith src, dst, src_offs, dst_offs;
      110       110    2
CC.C03    File=zbc$blocks:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111    2            /* allocate two pointer temporaries */
      112       112    2            src = tmp_pointer_var(&src_offs);
      113       113    2            dst = tmp_pointer_var(&dst_offs);
      114       114    2
      115       115    2            C_lal(src);
      116       116    2            C_sti(pointer_size);
      117       117    2            C_asp(-esz);      /* allocate stack block */
      118       118    2            C_lor((arith)1);  /* push & of stack block as dst  */
      119       119    2            C_lal(dst);
      120       120    2            C_sti(pointer_size);
      121       121    2            copy_loop(sz, src, dst);
      122       122    2            free_tmp_var(dst_offs);
      123       123    2            free_tmp_var(src_offs);
      124       124    2        #else STB
      125       125   *S*           C_asp(-(esz - pointer_size)); /* allocate stack block */
      126       126   *S*           C_lor((arith)1);  /* push & of stack block as dst  */
      127       127   *S*           C_dup(pointer_size);    /* fetch source address */
      128       128   *S*           C_adp(esz - pointer_size);
      129       129   *S*           C_loi(pointer_size);
      130       130   *S*           C_loc(sz);        /* # bytes to copy   */
      131       131   *S*           C_cal("__stb");         /* library copy routine */
      132       132   *S*           C_asp(int_size + pointer_size + pointer_size);
      133       133   *S*       #endif STB
      134       134    2         }
      135       135    1        }
      136       136
      137       137             #ifndef STB
      138       138             copy_loop(sz, src, dst)
      139       139              arith sz, src, dst;
      140       140             {
      141       141    1         /* generate inline byte-copy loop */
      142       142    1         label l_cont = text_label(), l_stop = text_label();
      143       143    1
      144       144    1         C_loc(sz);     /* amount of bytes */
      145       145    1         C_df_ilb(l_cont);
      146       146    1         C_dup(word_size);
      147       147    1         C_zle(l_stop);
CC.C03    File=zbc$blocks:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148    1         C_dec();
      149       149    1         C_lal(src);
      150       150    1         C_loi(pointer_size);
      151       151    1         C_dup(pointer_size);
      152       152    1         C_adp((arith)1);
      153       153    1         C_lal(src);
      154       154    1         C_sti(pointer_size);
      155       155    1         C_loi((arith)1);
      156       156    1         C_lal(dst);
      157       157    1         C_loi(pointer_size);
      158       158    1         C_dup(pointer_size);
      159       159    1         C_adp((arith)1);
      160       160    1         C_lal(dst);
      161       161    1         C_sti(pointer_size);
      162       162    1         C_sti((arith)1);
      163       163    1         C_bra(l_cont);
      164       164    1         C_df_ilb(l_stop);
      165       165    1         C_asp(word_size);
      166       166    1        }
      167       167             #endif STB
      168       168
---  Include file information  ---

   em:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   em_code:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   zbc$sizes:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$target_sizes:h.:ZBC3TOU. is referenced
   zbc$atw:h.:ZBC3TOU. is referenced
   zbc$align:h.:ZBC3TOU. is referenced
   zbc$zb_target:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$blocks:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
   zbc$stack:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$blocks:c.:ZBC3TSI
