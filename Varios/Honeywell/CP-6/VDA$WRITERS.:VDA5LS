VERSION A05

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:1    
        1        1        /*M* VDA$WRITERS - Writer-routines for predefined file nodes */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDA$WRITERS
       12       12            PURPOSE:  Routines to write the nodes of predefined files.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines, which are called when
       15       15                a node at a specific level of a specific predefined file is updated.
       16       16                The Spec-type (%SPT_) of the node determines which of the following
       17       17                routines is called.
       18       18
       19       19                The routines are called after any existing version of the node
       20       20                (that is, same keys) has been read into the Port; if the
       21       21                node doesn't exist yet, the Port has been positioned to
       22       22                the requested location (PORT.LEVEL.SPEC and .DATA are %CLEAR/NIL).
       23       23                Based on the parameters passed, these routines determine if they
       24       24                are to insert, replace, or delete the node; they must do the
       25       25                equivalent of a VDA$PWRITE (insert or replace) or a VDA$PDELETE.
       26       26                    Note on deletion:  Certain predefined files must have
       27       27                    Spec components for each node.  The interface to the
       28       28                    VDA$Wxxx routines allows the caller to specify
       29       29                    erasure of a component (replacing it with a zero-length
       30       30                    string), but doesn't explicitly specify node deletion.
       31       31                    However, for these predefined files, erasure of the
       32       32                    Spec component implies deletion of the node.
       33       33                Before calling these routines, it should already be determined
       34       34                that the user has write-access to the file, and has
       35       35                write- or delete-access to the specific node.
       36       36
       37       37                VDA$WNAMES
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:2    
       38       38                If the Spec component specifies special handling of the
       39       39                Data component, then perform the appropriate routine; this
       40       40                routine will usually verify that the new value is legal
       41       41                for the name, and/or store the new value in a global
       42       42                internal cell.
       43       43                Also handles "windowable" names, that is, names to which different
       44       44                values can be assigned for different windows (eg, $HSCROLL_MARGIN
       45       45                and all Keyins).
       46       46                If we're erasing a Data component, force it to the default
       47       47                value for the name.
       48       48
       49       49                VDA$WWINDOWS
       50       50                If we're inserting a node, call the Presenter to
       51       51                    create the new window specified by the VD$WINDOW_SPEC.
       52       52                If we're replacing a node, call the Presenter to
       53       53                    change the window's specs (size, placement, etc.).
       54       54                If we're erasing the Spec component, this implies deletion
       55       55                    of the node.  Call the Presenter to remove the window
       56       56                    and adjust the other windows accordingly.
       57       57        */
       58       58
       59       59        /*D* NAME: VDA$WNAMES
       60       60            PARAMETERS:
       61       61                PORT - VD$PORT into which a node from a predefined file has been
       62       62                    read.  PORT.LEVEL.SPEC (%LVL_LOWER) and .DATA$ (%LVL_LOWER)
       63       63                    contain copies of the Spec and Data components of the old version
       64       64                    of the node, if any.
       65       65                    The user must have write-access to the file.
       66       66                    The record key at %LVL_LOWER in PORT.CURRENT must contain the name
       67       67                    we're writing to.
       68       68                SPEC - Optional VD$SPEC specifying the new Spec component
       69       69                    for the node.  If you don't want to affect the
       70       70                    Spec component, omit this parameter; to erase the
       71       71                    node's current Spec component, SPEC should specify a
       72       72                    0-length string.  For the Names files, erasing the Spec component
       73       73                    implies that the entire node is to be deleted.
       74       74                    If passed, SPEC must point to a VD$NAME_SPEC.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:3    
       75       75                    Note - Passing a VD$SPEC which is BASED on a pointer
       76       76                        which is currently NIL acts as tho you omitted
       77       77                        the parameter -- the Spec component isn't affected.
       78       78                    Note - Any dynamic storage pointed-to by SPEC will no
       79       79                        longer be owned by the caller after this call!!
       80       80                        Give me a Spec and I keep it, not you.  See SPEC
       81       81                        under OUTPUT comments.
       82       82                DATA - Optional VD$BUFFER containing the new Data component
       83       83                    for the node.  If you don't want to affect the
       84       84                    Data component, omit this parameter; to erase the
       85       85                    node's current Data component, DATA should specify a
       86       86                    0-length string (VD$BUFFER.LENGTH# = 0).
       87       87                    For the Names files, erasing the Data component will force
       88       88                        a user name to revert to a zero or "clear" value.
       89       89                        The predefined names can't be erased, and since the
       90       90                        user is denied deletion-access to them, no one will
       91       91                        try to erase them.
       92       92                    Chained VD$BUFFERs can be used to write multi-element Data
       93       93                        components (ie, array values):
       94       94                        If you write a single-element Data component to a name which
       95       95                            currently has a multi-element Data, then you effectively
       96       96                            eliminate the array, collapsing it down to one element.
       97       97                        If you want to replace just one or a few elements in a
       98       98                            multi-element Data component, you have to write the entire
       99       99                            new set of elements.
      100      100                        For now, any name to which you write a multi-element Data
      101      101                            component must have the .WINDOWABLE bit set in the
      102      102                            VD$NAME_SPEC for the name.
      103      103        *N**N**N*           In future, there will probably also be an .ARRAYABLE flag,
      104      104        *N**N**N*           where the only names which DON'T have the flag set are
      105      105        *N**N**N*           the non-windowable predefined names (all user-created names
      106      106        *N**N**N*           would have the flag set).
      107      107        *N**N**N*           .WINDOWABLE should only tell us to tell the Presenter when
      108      108        *N**N**N*           when the name's value changes; .ARRAYABLE should tell us
      109      109        *N**N**N*           if the name can accept multi-element values or not.
      110      110                    Note - Passing a VD$BUFFER which is BASED on a pointer
      111      111                        which is currently NIL acts as tho you omitted
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:4    
      112      112                        the parameter -- the Data component isn't affected.
      113      113                    Note - DATA must reside in either dynamic storage, static,
      114      114                        or constant -- never the caller's auto storage!!
      115      115                        If DATA resides in dynamic (as indicated by having a
      116      116                        non-0 .OBJECT.SIZE#), it will no longer be owned
      117      117                        by the caller after this call.
      118      118                        Give me a Data buffer and I keep it, not you.  See
      119      119                        DATA under OUTPUT comments.
      120      120                NODE_EXISTS - A BIT(1) ALIGNED flag.  If set, then the Port contains
      121      121                    an old node which is being replaced by SPEC and/or DATA.
      122      122                    If NODE_EXISTS = %FALSE, then SPEC and DATA represent
      123      123                    a node which is being inserted into the file.
      124      124            INPUT:
      125      125                VD_CURRENT_WINDOW$ points to a VD$FILE_NODE in the Windows file for
      126      126                    the current editing window.  VD_CURRENT_WINDOW$ will be NIL if
      127      127                    no windows have yet been opened.
      128      128                VD_COMMAND_WINDOW$ points to a VD$FILE_NODE in the Windows file for
      129      129                    the command window.  VD_COMMAND_WINDOW$ will be NIL if there is
      130      130                    no command window currently (not fully initialized yet).
      131      131                VD_SCREEN_HEIGHT and VD_SCREEN_WIDTH must contain the height (in
      132      132                    lines) and width (in columns) of the terminal screen which 6Edit
      133      133                    using.
      134      134            OUTPUT:
      135      135                Upon normal return:
      136      136                    SPEC will be %CLEAR; the Port now owns the SPEC and any
      137      137                        dynamic storage pointed-to by SPEC.V$.
      138      138                    DATA -- if it's dynamic -- will no longer be owned by the
      139      139                        caller.  The Port owns it now.  The caller should
      140      140                        spoil it's pointer to the DATA VD$BUFFER.
      141      141                Upon non-fatal altreturns, SPEC and DATA will be untouched.
      142      142                    The caller will still own any dynamic storage associated
      143      143                    with them.
      144      144                PORT.LEVEL.SPEC (n) and/or .DATA (n) will contain/point-to SPEC/DATA
      145      145                    (unchanged if SPEC/DATA omitted).  In the Port only, a special
      146      146                    representation is used for components which have been "cleared"
      147      147                    (contents erased):  PORT.LEVEL.SPEC/.DATA will refer to a 0-length
      148      148                    local string or a 0-length (but allocated) buffer, as appropriate.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:5    
      149      149                    This special representation is used so VDA$PFLUSH will know to
      150      150                    actively erase a component, rather than ignore it, since if PFLUSH
      151      151                    sees %CLEAR/NIL in the port it will just ignore the component.
      152      152                For internal files, the VD$FILE_NODE for the node will have new copies
      153      153                    of the components changed by the write.  If components have been
      154      154                    "cleared", they will be %CLEAR/NIL in the VD$FILE_NODE.
      155      155            DESCRIPTION:
      156      156                It's illegal to call with no SPEC, DATA passed, and NODE_EXISTS =
      157      157                    %FALSE:  we don't know how to build the VD$NAME_SPEC for the new
      158      158                    node.
      159      159                If DATA was passed, look at the node's (new) Spec:  if it specifies a
      160      160                    WRITER, then call the writer.  The writer will verify the new (or
      161      161                    supply a default) Data component and update any global internal
      162      162                    value for the name.  If the writer doesn't like the new value,
      163      163                    altreturn.
      164      164                If SPEC passed and specifies erasure, call VDA$PDELETE.  If the node
      165      165                    exists and its old data type was KEYIN, tell the Presenter to
      166      166                    delete the key binding in the FEP.
      167      167                Else call VDA$PWRITE.  If the name is "windowable", tell the
      168      168                    Presenter to update the setting for the name in the FEP.
      169      169        */
      170      170
      171      171        VDA$WNAMES: PROC (PORT, SPEC, DATA, NODE_EXISTS) ALTRET;
      172      172
      173      173        %INCLUDE VD_MACROS_M;
      174     2388        %INCLUDE VD_PERR_C;
      175     2536        %INCLUDE XU_MACRO_C;
      176     5630        %INCLUDE CP_6;
      177     5711        %INCLUDE CP_6_SUBS;
      178     6251
      179     6252
      180     6253        %VD$PORT (NAME=PORT, STCLASS=PARAM);
      181     6351        %VD$SPEC (NAME=SPEC, STCLASS=PARAM);
      182     6365        %VD$BUFFER (NAME=DATA, STCLASS=PARAM);
      183     6423    1   DCL NODE_EXISTS BIT(1) ALIGNED;
      184     6424
      185     6425
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:6    
      186     6426    1   DCL VDA$PWRITE          ENTRY (4) ALTRET;
      187     6427    1   DCL VDA$PDELETE         ENTRY (4) ALTRET;
      188     6428    1   DCL VDP$NEQUALS         ENTRY (3) ALTRET;
      189     6429    1   DCL VDP$NKEYIN          ENTRY (3) ALTRET;
      190     6430    1   DCL VDP$NKEYIN_DELETE   ENTRY (3) ALTRET;
      191     6431    1   DCL VDG$EXEC_CONTROL    ENTRY (5) ALTRET;
      192     6432    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      193     6433    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      194     6434    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      195     6435    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
      196     6436    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
      197     6437    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
      198     6438    1   DCL VDG$INFOMSG         ENTRY (4) ALTRET;
      199     6439    1   DCL VDG$MONERR          ENTRY ALTRET;
      200     6440    1   DCL VDG$WARNMSG         ENTRY (4) ALTRET;
      201     6441    1   DCL VDP$WCHANGE         ENTRY (2) ALTRET;
      202     6442    1   DCL VDG$EREPORT_ERROR   ENTRY (1);
      203     6443    1   DCL VDG$ESCREECH        ENTRY (3);
      204     6444    1   DCL X$DEC_CONVERT       ENTRY (2) ALTRET;
      205     6445
      206     6446
      207     6447        %VD_6E (STCLASS=SYMREF);
      208     6483    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
      209     6484    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
      210     6485    1   DCL VD_IBEX_WINDOW SBIN SYMREF;
      211     6486    1   DCL VD_EDITING_HEIGHT SBIN SYMREF;
      212     6487    1   DCL VD_OLD_$SCREEN SBIN SYMREF;
      213     6488    1   DCL VD_SCREEN_HEIGHT UBIN SYMREF;
      214     6489    1   DCL VD_SCREEN_WIDTH UBIN SYMREF;
      215     6490    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
      216     6491            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, ALIGNMENT=UNAL, STCLASS=STATIC);
      217     6505    1   DCL 1 VD_XLATE_CHAR_CLASS ALIGNED SYMREF,
      218     6506    1         2 CCL (0:511) UBIN BYTE CALIGNED;
      219     6507    1   DCL 1 VD_STATIC_TEMP ALIGNED SYMREF,
      220     6508    1         2 FLAG (0:511) UBIN BYTE CALIGNED;
      221     6509    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
      222     6510        %P_PCB (NAME=VD_PCB, STCLASS=SYMREF);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:7    
      223     6709
      224     6710
      225     6711        /* Internal forms of predefined names */
      226     6712        %VD$NUMBER (NAME=VD_$$INCANTATION, STCLASS=SYMREF);
      227     6757        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
      228     6802        %VD$NUMBER (NAME=VD_$$MON_EVAL, STCLASS=SYMREF);
      229     6847        %VD$NUMBER (NAME=VD_$$MON_PRES, STCLASS=SYMREF);
      230     6892        %VD$NUMBER (NAME=VD_$$QUAC, STCLASS=SYMREF);
      231     6937        %VD$NUMBER (NAME=VD_$AUTOTAB, STCLASS=SYMREF);
      232     6982        %VD$NUMBER (NAME=VD_$BY, STCLASS=SYMREF);
      233     7027        %VD$NUMBER (NAME=VD_$CASE, STCLASS=SYMREF);
      234     7072        %VD$NUMBER (NAME=VD_$COMMAND, STCLASS=SYMREF);
      235     7117        %VD_BUFFER (NAME=VD_$COMMENT, STCLASS=SYMREF, MXNB=%MXNB_$COMMENT);
      236     7177        %VD$NUMBER (NAME=VD_$COMPONENT, STCLASS=SYMREF);
      237     7222        %VD_BUFFER (NAME=VD_$CONTEXT, STCLASS=SYMREF, MXNB=%MXNB_FID);
      238     7282        %VD_BUFFER (NAME=VD_$CONTROL, STCLASS=SYMREF, MXNB=%MXNB_$CONTROL);
      239     7342        %VD_BUFFER (NAME=VD_$DEFAULT_DESTINATION, STCLASS=SYMREF,
      240     7343            MXNB=%MXNB_DFLT_BLKEXPR);
      241     7403        %VD_BUFFER (NAME=VD_$DEFAULT_SOURCE, STCLASS=SYMREF,
      242     7404            MXNB=%MXNB_DFLT_BLKEXPR);
      243     7464        %VD$NUMBER (NAME=VD_$DIRECTION, STCLASS=SYMREF);
      244     7509        %VD_BUFFER (NAME=VD_$EOF_MARK, STCLASS=SYMREF, MXNB=%MXNB_$EOF_MARK);
      245     7569        %VD$NUMBER (NAME=VD_$EXIST, STCLASS=SYMREF);
      246     7614        %VD$NUMBER (NAME=VD_$EZ_APPEND, STCLASS=SYMREF);
      247     7659        %VD_BUFFER (NAME=VD_$FILETYPE, STCLASS=SYMREF, MXNB=2);
      248     7719        %VD$NUMBER (NAME=VD_$HSALL, STCLASS=SYMREF);
      249     7764        %VD$NUMBER (NAME=VD_$HSCROLL, STCLASS=SYMREF);
      250     7809        %VD$NUMBER (NAME=VD_$HSCROLL_MARGIN, STCLASS=SYMREF);
      251     7854        %VD$BUFFER (NAME=VD_$INITIALIZE, STCLASS=SYMREF);
      252     7912        %VD$NUMBER (NAME=VD_$INSERT, STCLASS=SYMREF);
      253     7957        %VD_BUFFER (NAME=VD_$INTRO_1, STCLASS=SYMREF, MXNB=%MXNB_$INTRO);
      254     8017        %VD_BUFFER (NAME=VD_$INTRO_2, STCLASS=SYMREF, MXNB=%MXNB_$INTRO);
      255     8077        %VD$NUMBER (NAME=VD_$KEY_GENERATION, STCLASS=SYMREF);
      256     8122        %VD$NUMBER (NAME=VD_$MATCHES, STCLASS=SYMREF);
      257     8167        %VD$NUMBER (NAME=VD_$MATCH_LIMIT, STCLASS=SYMREF);
      258     8212        %VD$NUMBER (NAME=VD_$MAX_COMMAND, STCLASS=SYMREF);
      259     8257        %VD$NUMBER (NAME=VD_$MAX_RECORD, STCLASS=SYMREF);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:8    
      260     8302        %VD$NUMBER (NAME=VD_$MIN_COMMAND, STCLASS=SYMREF);
      261     8347        %VD$NUMBER (NAME=VD_$MIN_RECORD, STCLASS=SYMREF);
      262     8392        %VD_NUMBER (NAME=VD_$ONESPACEEDIT, STCLASS=SYMREF);
      263     8439        %VD_BUFFER (NAME=VD_$PAD, STCLASS=SYMREF, MXNB=%MXNB_$PAD);
      264     8499        %VD$NUMBER (NAME=VD_$POINT, STCLASS=SYMREF);
      265     8544        %VD$NUMBER (NAME=VD_$PROTECT, STCLASS=SYMREF);
      266     8589        %VD$NUMBER (NAME=VD_$RECORDS_DELETED, STCLASS=SYMREF);
      267     8634        %VD$NUMBER (NAME=VD_$RECORDS_INSERTED, STCLASS=SYMREF);
      268     8679        %VD$NUMBER (NAME=VD_$RECORDWRAP, STCLASS=SYMREF);
      269     8724        %VD$NUMBER (NAME=VD_$REKEY, STCLASS=SYMREF);
      270     8769        %VD_BUFFER (NAME=VD_$RESTORE, STCLASS=SYMREF, MXNB=%MXNB_$RESTORE);
      271     8829        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
      272     8874        %VD$NUMBER (NAME=VD_$SCROLL, STCLASS=SYMREF);
      273     8919        %VD$NUMBER (NAME=VD_$SEARCH, STCLASS=SYMREF);
      274     8964        %VD$NUMBER (NAME=VD_$SITES, STCLASS=SYMREF);
      275     9009        %VD$NUMBER (NAME=VD_$SKIP, STCLASS=SYMREF);
      276     9054        %VD$NUMBER (NAME=VD_$STRIP_BLANKS, STCLASS=SYMREF);
      277     9099        %VD$POINTER (NAME=VD_$STRUCTURE, STCLASS=SYMREF);
      278     9144        %VD$NUMBER (NAME=VD_$TEXTEDIT, STCLASS=SYMREF);
      279     9189        %VD$NUMBER (NAME=VD_$VSCROLL, STCLASS=SYMREF);
      280     9234        %VD$NUMBER (NAME=VD_$VSCROLL_MARGIN, STCLASS=SYMREF);
      281     9279        %VD_BUFFER (NAME=VD_$WI_BORDER, STCLASS=SYMREF, MXNB=1);
      282     9339        %VD$NUMBER (NAME=VD_$WI_PERCENT, STCLASS=SYMREF);
      283     9384        %VD$NUMBER (NAME=VD_$WORDWRAP, STCLASS=SYMREF);
      284     9429        %VD_BUFFER (NAME=VD_$WS_STORAGE, STCLASS=SYMREF, MXNB=1);
      285     9489
      286     9490
      287     9491
      288     9492    1   DCL DELETE_NODE BIT(1) ALIGNED;
      289     9493    1   DCL BUFFER_TO_FREE$ PTR;
      290     9494    1   DCL REF_SPEC$ PTR;
      291     9495    1   DCL NODE_KEY$ PTR;
      292     9496    1   DCL DATA$ PTR;
      293     9497        %VD_TEXTC (NAME=DATA_TEXTC, STCLASS=AUTO, MXNB=11);
      294     9638    1   DCL INDX SBIN;
      295     9639    1   DCL ALT_INDX SBIN;
      296     9640    1   DCL CCL SBIN;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:9    
      297     9641    1   DCL CAND_CHAR CHAR(1);
      298     9642        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);
      299     9711    1   DCL COUNT SBIN;
      300     9712    1   DCL VD_ERR$ PTR;
      301     9713    1   DCL VD_ERR_SUBST$ PTR;
      302     9714    1   DCL ERRCODE SBIN;
      303     9715
      304     9716
      305     9717        %VD$NAME_SPEC (NAME=REF$SPEC, STCLASS="BASED(REF_SPEC$)");
      306     9765        %VD$TEXTC (NAME=NODE$KEY, STCLASS="BASED(NODE_KEY$)");
      307     9788        %VD$BUFFER (NAME=DATA$BUFFER, STCLASS="BASED(DATA$)");
      308     9846        %VD$NUMBER (NAME=DATA$NUMBER, STCLASS="BASED(DATA$)");
      309     9891        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      310     9944        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(VD_ERR_SUBST$)");
      311     9989        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(VD_ERR_SUBST$)");
      312    10034        %VD$TEXTC;
      313    10057        %VD$TEXTC_REMOTE;
      314    10118        %VD$STRING_HEADER;
      315    10154        %VD$BUFFER;
      316    10212        %VD$WINDOW_SPEC;
      317    10278        %VD$PORT;
      318    10376        %VD$FILE_NODE;
      319    10469        %VD$STREAM;
      320    10575
      321    10576
      322    10577
      323    10578                /*
      324    10579                *   Check for errors, and point REF_SPEC$ at the Spec
      325    10580                *       component which we'll use for info about the name.
      326    10581                */
      327    10582
      328    10583    1           DELETE_NODE = %FALSE;
      329    10584    1           BUFFER_TO_FREE$ = ADDR(NIL);
      330    10585    1           DATA$ = ADDR(DATA);
      331    10586
      332    10587    2           IF ADDR(SPEC) = ADDR(NIL) THEN DO;
      333    10588    2              IF NOT NODE_EXISTS THEN
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:10   
      334    10589    2                 CALL VDG$ESCREECH;
      335    10590    2              REF_SPEC$ = PORT.LEVEL.SPEC.V$ (%LVL_LOWER);
      336    10591    2              END;
      337    10592    2           ELSE DO;
      338    10593    3              IF SPEC.REP# ~= %REP_REMOTE THEN DO;
      339    10594    3                 IF ADDR(SPEC.V$)->VD$TEXTC.LENGTH# ~= 0 THEN
      340    10595    3                    CALL VDG$ESCREECH;
      341    10596    3                 DELETE_NODE = %TRUE;
      342    10597    3                 IF NOT NODE_EXISTS THEN
      343    10598    3                    CALL VDG$ESCREECH;
      344    10599    3                 REF_SPEC$ = PORT.LEVEL.SPEC.V$ (%LVL_LOWER);
      345    10600    3                 END;
      346    10601    3              ELSE DO;
      347    10602    3                 IF SPEC.TYPE# ~= %SPT_NAME_SPEC THEN
      348    10603    3                    CALL VDG$ESCREECH (SPEC.TYPE#);
      349    10604    3                 REF_SPEC$ = SPEC.V$;
      350    10605    3                 END;
      351    10606    2              END;
      352    10607
      353    10608                /* Get the name's Key component */
      354    10609
      355    10610                %GETKEY (KEY=PORT.CURRENT.KEY, INDX="%(LVL_LOWER-1)",
      356    10611                PTR=NODE_KEY$);
      357    10621
      358    10622
      359    10623                /*
      360    10624                *   If writing DATA, call the name's writer, if there is one.
      361    10625                */
      362    10626
      363    10627    1           IF DATA$ ~= ADDR(NIL) AND REF$SPEC.WRITER# ~= 0 THEN
      364    10628    2   CALL_DATA_WRITER: DO;
      365    10629    2              IF REF$SPEC.LEGAL_DATA_TYPE# ~= 0
      366    10630    2                AND REF$SPEC.DATA_TYPE# ~= REF$SPEC.LEGAL_DATA_TYPE# THEN
      367    10631    2                 GOTO ILL_TYPE_FOR_NAME_FAILURE;
      368    10632
      369    10633    3              DO CASE (REF$SPEC.WRITER#);
      370    10634    3               CASE (%WRTR_$$INCANTATION);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:11   
      371    10635    3                 CALL WRTR_$$INCANTATION (VD_$$INCANTATION)
      372    10636    3                   ALTRET (DATA_WRITER_FAILED);
      373    10637    3               CASE (%WRTR_$$MON_ACC);
      374    10638    3                 CALL WRTR_MAGIC (VD_$$MON_ACC)
      375    10639    3                   ALTRET (DATA_WRITER_FAILED);
      376    10640    3               CASE (%WRTR_$$MON_EVAL);
      377    10641    3                 CALL WRTR_MAGIC (VD_$$MON_EVAL)
      378    10642    3                   ALTRET (DATA_WRITER_FAILED);
      379    10643    3               CASE (%WRTR_$$MON_PRES);
      380    10644    3                 CALL WRTR_MAGIC (VD_$$MON_PRES)
      381    10645    3                   ALTRET (DATA_WRITER_FAILED);
      382    10646    3               CASE (%WRTR_$$QUAC);
      383    10647    3                 CALL WRTR_MAGIC (VD_$$QUAC)
      384    10648    3                   ALTRET (DATA_WRITER_FAILED);
      385    10649    3               CASE (%WRTR_$AUTOTAB);
      386    10650    3                 CALL WRTR_NUMBER (VD_$AUTOTAB)
      387    10651    3                   ALTRET (DATA_WRITER_FAILED);
      388    10652    3               CASE (%WRTR_$BY);
      389    10653    3                 CALL WRTR_$BY (VD_$BY)
      390    10654    3                   ALTRET (DATA_WRITER_FAILED);
      391    10655    3               CASE (%WRTR_$CASE);
      392    10656    3                 CALL WRTR_BOOLEAN (VD_$CASE)
      393    10657    3                   ALTRET (DATA_WRITER_FAILED);
      394    10658    3               CASE (%WRTR_$COMMAND);
      395    10659    3                 CALL WRTR_BOOLEAN (VD_$COMMAND)
      396    10660    3                   ALTRET (DATA_WRITER_FAILED);
      397    10661    3               CASE (%WRTR_$COMMENT);
      398    10662    3                 CALL WRTR_$COMMENT (VD_$COMMENT)
      399    10663    3                   ALTRET (DATA_WRITER_FAILED);
      400    10664    3               CASE (%WRTR_$COMPONENT);
      401    10665    3                 CALL WRTR_NUMBER (VD_$COMPONENT)
      402    10666    3                   ALTRET (DATA_WRITER_FAILED);
      403    10667    3               CASE (%WRTR_$CONTEXT);
      404    10668    3                 CALL WRTR_$CONTEXT (VD_$CONTEXT)
      405    10669    3                   ALTRET (DATA_WRITER_FAILED);
      406    10670    3               CASE (%WRTR_$CONTROL);
      407    10671    3                 CALL WRTR_$CONTROL (VD_$CONTROL)
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:12   
      408    10672    3                   ALTRET (DATA_WRITER_FAILED);
      409    10673    3               CASE (%WRTR_$DEFAULT_DEST);
      410    10674    3                 CALL WRTR_BLOCK_EXPR (VD_$DEFAULT_DESTINATION)
      411    10675    3                   ALTRET (DATA_WRITER_FAILED);
      412    10676    3               CASE (%WRTR_$DEFAULT_SOURCE);
      413    10677    3                 CALL WRTR_BLOCK_EXPR (VD_$DEFAULT_SOURCE)
      414    10678    3                   ALTRET (DATA_WRITER_FAILED);
      415    10679    3               CASE (%WRTR_$DIRECTION);
      416    10680    3                 CALL WRTR_NUMBER (VD_$DIRECTION)
      417    10681    3                   ALTRET (DATA_WRITER_FAILED);
      418    10682    3               CASE (%WRTR_$EOF_MARK);
      419    10683    3                 CALL WRTR_BUFFER (VD_$EOF_MARK)
      420    10684    3                   ALTRET (DATA_WRITER_FAILED);
      421    10685    3               CASE (%WRTR_$EXIST);
      422    10686    3                 CALL WRTR_NUMBER (VD_$EXIST)
      423    10687    3                   ALTRET (DATA_WRITER_FAILED);
      424    10688    3               CASE (%WRTR_$EZ_APPEND);
      425    10689    3                 CALL WRTR_BOOLEAN (VD_$EZ_APPEND)
      426    10690    3                   ALTRET (DATA_WRITER_FAILED);
      427    10691    3               CASE (%WRTR_$FILETYPE);
      428    10692    3                 CALL WRTR_BUFFER (VD_$FILETYPE)
      429    10693    3                   ALTRET (DATA_WRITER_FAILED);
      430    10694    3                 CALL WRTR_$FILETYPE;
      431    10695    3               CASE (%WRTR_$HSALL);
      432    10696    3                 CALL WRTR_BOOLEAN (VD_$HSALL)
      433    10697    3                   ALTRET (DATA_WRITER_FAILED);
      434    10698    3               CASE (%WRTR_$HSCROLL);
      435    10699    3                 CALL WRTR_$HSCROLL (VD_$HSCROLL)
      436    10700    3                   ALTRET (DATA_WRITER_FAILED);
      437    10701    3               CASE (%WRTR_$HSCROLL_MARGIN);
      438    10702    3                 CALL WRTR_$HSCROLL_MARGIN (VD_$HSCROLL_MARGIN)
      439    10703    3                   ALTRET (DATA_WRITER_FAILED);
      440    10704    3               CASE (%WRTR_$INITIALIZE);
      441    10705    3                 CALL WRTR_$CONTEXT (VD_$INITIALIZE)
      442    10706    3                   ALTRET (DATA_WRITER_FAILED);
      443    10707    3               CASE (%WRTR_$INSERT);
      444    10708    3                 CALL WRTR_BOOLEAN (VD_$INSERT)
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:13   
      445    10709    3                   ALTRET (DATA_WRITER_FAILED);
      446    10710    3               CASE (%WRTR_$INTRO_1);
      447    10711    3                 CALL WRTR_IMP_INTRO (VD_$INTRO_1)
      448    10712    3                   ALTRET (DATA_WRITER_FAILED);
      449    10713    3               CASE (%WRTR_$INTRO_2);
      450    10714    3                 CALL WRTR_IMP_INTRO (VD_$INTRO_2)
      451    10715    3                   ALTRET (DATA_WRITER_FAILED);
      452    10716    3               CASE (%WRTR_$KEY_GENERATION);
      453    10717    3                 CALL WRTR_NUMBER (VD_$KEY_GENERATION)
      454    10718    3                   ALTRET (DATA_WRITER_FAILED);
      455    10719    3               CASE (%WRTR_$MATCHES);
      456    10720    3                 CALL WRTR_NUMBER (VD_$MATCHES)
      457    10721    3                   ALTRET (DATA_WRITER_FAILED);
      458    10722    3               CASE (%WRTR_$MATCH_LIMIT);
      459    10723    3                 CALL WRTR_NUMBER (VD_$MATCH_LIMIT)
      460    10724    3                   ALTRET (DATA_WRITER_FAILED);
      461    10725    3               CASE (%WRTR_$MAX_COMMAND);
      462    10726    3                 CALL WRTR_$MAX_COMMAND (VD_$MAX_COMMAND)
      463    10727    3                   ALTRET (DATA_WRITER_FAILED);
      464    10728    3               CASE (%WRTR_$MAX_RECORD);
      465    10729    3                 CALL WRTR_$MAX_RECORD (VD_$MAX_RECORD)
      466    10730    3                   ALTRET (DATA_WRITER_FAILED);
      467    10731    3               CASE (%WRTR_$MIN_COMMAND);
      468    10732    3                 CALL WRTR_$MIN_COMMAND (VD_$MIN_COMMAND)
      469    10733    3                   ALTRET (DATA_WRITER_FAILED);
      470    10734    3               CASE (%WRTR_$MIN_RECORD);
      471    10735    3                 CALL WRTR_$MIN_RECORD (VD_$MIN_RECORD)
      472    10736    3                   ALTRET (DATA_WRITER_FAILED);
      473    10737    3               CASE (%WRTR_$ONESPACEEDIT);
      474    10738    3                 CALL WRTR_BOOLEAN (VD_$ONESPACEEDIT)
      475    10739    3                   ALTRET (DATA_WRITER_FAILED);
      476    10740    3               CASE (%WRTR_$PAD);
      477    10741    3                 CALL WRTR_BUFFER (VD_$PAD)
      478    10742    3                   ALTRET (DATA_WRITER_FAILED);
      479    10743    3               CASE (%WRTR_$POINT);
      480    10744    3                 CALL WRTR_NUMBER (VD_$POINT)
      481    10745    3                   ALTRET (DATA_WRITER_FAILED);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:14   
      482    10746    3               CASE (%WRTR_$PROTECT);
      483    10747    3                 CALL WRTR_NUMBER (VD_$PROTECT)
      484    10748    3                   ALTRET (DATA_WRITER_FAILED);
      485    10749    3               CASE (%WRTR_$RECORDS_DELETED);
      486    10750    3                 CALL WRTR_NUMBER (VD_$RECORDS_DELETED)
      487    10751    3                   ALTRET (DATA_WRITER_FAILED);
      488    10752    3               CASE (%WRTR_$RECORDS_INSERTED);
      489    10753    3                 CALL WRTR_NUMBER (VD_$RECORDS_INSERTED)
      490    10754    3                   ALTRET (DATA_WRITER_FAILED);
      491    10755    3               CASE (%WRTR_$RECORDWRAP);
      492    10756    3                 CALL WRTR_BOOLEAN (VD_$RECORDWRAP)
      493    10757    3                   ALTRET (DATA_WRITER_FAILED);
      494    10758    3               CASE (%WRTR_$REKEY);
      495    10759    3                 CALL WRTR_NUMBER (VD_$REKEY)
      496    10760    3                   ALTRET (DATA_WRITER_FAILED);
      497    10761    3               CASE (%WRTR_$RESTORE);
      498    10762    3                 CALL WRTR_BUFFER (VD_$RESTORE)
      499    10763    3                   ALTRET (DATA_WRITER_FAILED);
      500    10764    3               CASE (%WRTR_$SCREEN);
      501    10765    3                 CALL WRTR_$SCREEN (VD_$SCREEN)
      502    10766    3                   ALTRET (DATA_WRITER_FAILED);
      503    10767    3               CASE (%WRTR_$SCROLL);
      504    10768    3                 CALL WRTR_BOOLEAN (VD_$SCROLL)
      505    10769    3                   ALTRET (DATA_WRITER_FAILED);
      506    10770    3               CASE (%WRTR_$SEARCH);
      507    10771    3                 CALL WRTR_BOOLEAN (VD_$SEARCH)
      508    10772    3                   ALTRET (DATA_WRITER_FAILED);
      509    10773    3               CASE (%WRTR_$SITES);
      510    10774    3                 CALL WRTR_NUMBER (VD_$SITES)
      511    10775    3                   ALTRET (DATA_WRITER_FAILED);
      512    10776    3               CASE (%WRTR_$SKIP);
      513    10777    3                 CALL WRTR_NUMBER (VD_$SKIP)
      514    10778    3                   ALTRET (DATA_WRITER_FAILED);
      515    10779    3               CASE (%WRTR_$STRIP_BLANKS);
      516    10780    3                 CALL WRTR_BOOLEAN (VD_$STRIP_BLANKS)
      517    10781    3                   ALTRET (DATA_WRITER_FAILED);
      518    10782    3               CASE (%WRTR_$STRUCTURE);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:15   
      519    10783    3                 ;     /*N* Don't handle this yet */
      520    10784    3               CASE (%WRTR_$TEXTEDIT);
      521    10785    3                 CALL WRTR_BOOLEAN (VD_$TEXTEDIT)
      522    10786    3                   ALTRET (DATA_WRITER_FAILED);
      523    10787    3               CASE (%WRTR_$VSCROLL);
      524    10788    3                 CALL WRTR_$VSCROLL (VD_$VSCROLL)
      525    10789    3                   ALTRET (DATA_WRITER_FAILED);
      526    10790    3               CASE (%WRTR_$VSCROLL_MARGIN);
      527    10791    3                 CALL WRTR_$VSCROLL_MARGIN (VD_$VSCROLL_MARGIN)
      528    10792    3                   ALTRET (DATA_WRITER_FAILED);
      529    10793    3               CASE (%WRTR_$WI_BORDER);
      530    10794    3                 CALL WRTR_$WI_BORDER (VD_$WI_BORDER)
      531    10795    3                   ALTRET (DATA_WRITER_FAILED);
      532    10796    3               CASE (%WRTR_$WI_PERCENT);
      533    10797    3                 CALL WRTR_NUMBER (VD_$WI_PERCENT)
      534    10798    3                   ALTRET (DATA_WRITER_FAILED);
      535    10799    3               CASE (%WRTR_$WORDWRAP);
      536    10800    3                 CALL WRTR_NUMBER (VD_$WORDWRAP)
      537    10801    3                   ALTRET (DATA_WRITER_FAILED);
      538    10802    3               CASE (%WRTR_$WS_STORAGE);
      539    10803    3                 CALL WRTR_FILE_STCLASS (VD_$WS_STORAGE)
      540    10804    3                   ALTRET (DATA_WRITER_FAILED);
      541    10805    3               CASE (ELSE);
      542    10806    3                 CALL VDG$ESCREECH (REF$SPEC.WRITER#);
      543    10807    3               END;
      544    10808    2              END CALL_DATA_WRITER;
      545    10809                /*
      546    10810                *              !!! CAUTION !!!
      547    10811                *   The name writers (WRTR_xxx) may have created a new Data component.
      548    10812                *   From now on, don't refer to DATA directly; DATA$
      549    10813                *       points to the valid new data component:  use
      550    10814                *       DATA$BUFFER to refer to it.
      551    10815                */
      552    10816
      553    10817
      554    10818                /*
      555    10819                *   Delete or write the new Spec and/or Data components.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:16   
      556    10820                */
      557    10821
      558    10822    1           IF DELETE_NODE THEN
      559    10823    2   DELETE_THE_NODE: DO;
      560    10824    3              IF NODE_EXISTS AND REF$SPEC.DATA_TYPE# = %NDT_KEYIN THEN DO;
      561    10825    3                 IF VD_$SCREEN.V# > 0 THEN
      562    10826    3                    CALL VDP$NKEYIN_DELETE (NODE$KEY)
      563    10827    3                      ALTRET (NKEYIN_DELETE_FAILED);
      564    10828    3                 END;
      565    10829    2              CALL VDG$OCOPY_LOCATION (PORT.CURRENT, DEL_RANGE.START)
      566    10830    2                ALTRET (OCOPY_LOCATION_FAILED);
      567    10831    2              DEL_RANGE.ENDD = DEL_RANGE.START;
      568    10832    2              CALL VDA$PDELETE (PORT, DEL_RANGE, %LVL_LOWER, COUNT)
      569    10833    2                ALTRET (PDELETE_FAILED);
      570    10834    2              CALL VDG$OCLEAR_LOCATION (DEL_RANGE.START)
      571    10835    2                ALTRET (OCLEAR_LOCATION_FAILED);
      572    10836    2              END DELETE_THE_NODE;
      573    10837
      574    10838    1           ELSE
      575    10839
      576    10840    2   REPLACE_COMPONENT: DO;
      577    10841    2              IF REF$SPEC.WINDOWABLE THEN
      578    10842    3   WINDOWABLE_NAME: DO;
      579    10843    3                 IF VD_$SCREEN.V# > 0 THEN
      580    10844    4                 DO CASE REF$SPEC.DATA_TYPE#;
      581    10845    4                  CASE %NDT_EQUALS;
      582    10846    4                    CALL VDP$NEQUALS (REF$SPEC, DATA$BUFFER)
      583    10847    4                      ALTRET (NEQUALS_FAILED);
      584    10848    4                  CASE %NDT_KEYIN;
      585    10849    4                    CALL VDP$NKEYIN (NODE$KEY, DATA$BUFFER)
      586    10850    4                      ALTRET (NKEYIN_FAILED);
      587    10851    4                  CASE ELSE;
      588    10852    4                    CALL VDG$ESCREECH (NODE$KEY.BYTES, REF$SPEC.DATA_TYPE#);
      589    10853    4                  END;
      590    10854    3                 END WINDOWABLE_NAME;
      591    10855    3              ELSE IF DATA$ ~= ADDR(NIL) THEN DO;
      592    10856    3                    IF DATA$BUFFER.FLINK$ ~= ADDR(NIL) THEN
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:17   
      593    10857    3                       GOTO CANT_WINDOW_THIS_NAME_FAILURE;
      594    10858    3                    END;
      595    10859
      596    10860    2              CALL VDA$PWRITE (PORT, %LVL_LOWER, SPEC, DATA$BUFFER)
      597    10861    2                ALTRET (PWRITE_FAILED);
      598    10862    2              END REPLACE_COMPONENT;
      599    10863
      600    10864                /*
      601    10865                *   The writer routines may have created a new Data component, so we
      602    10866                *       should free the original DATA we were called with at this
      603    10867                *       point.
      604    10868                *   We didn't free DATA earlier because we weren't sure if we were
      605    10869                *       going to altreturn or not; and if we altreturn, we shouldn't
      606    10870                *       free DATA.
      607    10871                *   Now, we're about to return normally.  So if appropriate,
      608    10872                *       free the original DATA.
      609    10873                */
      610    10874    2           IF BUFFER_TO_FREE$ ~= ADDR(NIL) THEN DO;
      611    10875    2              CALL VDG$OFREE (BUFFER_TO_FREE$ -> VD$BUFFER)
      612    10876    2                ALTRET (OFREE_FAILED);
      613    10877    2              END;
      614    10878
      615    10879    1           RETURN;
      616    10880
      617    10881
      618    10882
      619    10883    1   ILL_TYPE_FOR_NAME_FAILURE:
      620    10884    1           CALL VDG$ERRMSG (%E$BAD_TYPE_FOR_NAME, NODE$KEY) ALTRET (ERRMSG_FAILED);
      621    10885    1           VD_ERR_SUBST$ = PINCRW(VD_6E.ERR_TAIL$, SIZEW(VD$ERR));
      622    10886    1           SUBST$NUMBER.OBJECT.CLASS# (1) = %CLS_NAME_DATA_TYPE;
      623    10887    1           SUBST$NUMBER.V# (1) = REF$SPEC.LEGAL_DATA_TYPE#;
      624    10888    1           ALTRETURN;
      625    10889
      626    10890
      627    10891    1   CANT_WINDOW_THIS_NAME_FAILURE:
      628    10892    1           CALL VDG$ERRMSG (%E$CANT_WINDOW_THIS_NAME, NODE$KEY)
      629    10893    1             ALTRET (ERRMSG_FAILED);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:18   
      630    10894    1           ALTRETURN;
      631    10895
      632    10896
      633    10897    1   DATA_WRITER_FAILED: ;
      634    10898    1   NEQUALS_FAILED: ;
      635    10899    1   NKEYIN_FAILED: ;
      636    10900    1   NKEYIN_DELETE_FAILED: ;
      637    10901    1   ERRMSG_FAILED: ;
      638    10902    1   OCOPY_LOCATION_FAILED: ;
      639    10903    1   OCLEAR_LOCATION_FAILED: ;
      640    10904    1   PDELETE_FAILED: ;
      641    10905    1   PWRITE_FAILED: ;
      642    10906    1   OALLOC_FAILED: ;
      643    10907    1   OFREE_FAILED: ;
      644    10908    1           ALTRETURN;
      645    10909
      646    10910
      647    10911        %BOX (TITLE="Name data writer routines", PAGE=YES);
             10919    1
             10923    1   /***************************************************************************
             10925    1    *                                                                         *
             10929    1            *                         Name data writer routines                       *
             10931    1            *                                                                         *
             10933    1           ***************************************************************************/

      648    10937
      649    10938        /*I* NAME: WRTR_xxx     (Data-component writers for Names files)
      650    10939            PARAMETERS:
      651    10940                GLOBAL - A VD$NUMBER or VD$BUFFER for the global internal cell for the
      652    10941                    name being written.  This may be a chain of buffer-objects.
      653    10942                    If a name whose value is a VD$NUMBER is updated with a VD$BUFFER,
      654    10943                    we'll convert the ASCII decimal number in the buffer to a binary
      655    10944                    number before processing it.  However, names whose values are
      656    10945                    VD$BUFFERs cannot be updated with VD$NUMBERs:  we'll screech.
      657    10946            INPUT:
      658    10947                PORT, SPEC, DATA, and NODE_EXISTS same as for main routine.
      659    10948                    DATA must be passed (ie, ADDR(DATA) must not be ADDR(NIL)).
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:19   
      660    10949                DELETE_NODE would be set if we were deleting.  Note that these
      661    10950                    routines are only used for predefined names, which are never
      662    10951                    deleted by 6Edit and to which the user should be denied deletion
      663    10952                    access.  Therefore, DELETE_NODE should never be set for these
      664    10953                    routines.
      665    10954                NODE_KEY$ must point to a VD$TEXTC for the key we're writing.
      666    10955                REF$SPEC must be the Spec component for the name.  If SPEC wasn't
      667    10956                    passed, REF$SPEC should be the name's current VD$SPEC.
      668    10957                    REF$SPEC.DATA_TYPE# must be of the appropriate type (%NDT_ code).
      669    10958                DATA$NUMBER must be a VD$NUMBER based on ADDR(DATA).
      670    10959            OUTPUT:
      671    10960                GLOBAL may be updated.
      672    10961                BUFFER_TO_FREE$ may point to a VD$BUFFER chain to free IF AND ONLY IF
      673    10962                    we return normally from VDP$WNAMES.
      674    10963            DESCRIPTION:
      675    10964                Each routine below (WRTR_xxx) has the same interface.  The routines:
      676    10965                    o Convert the new DATA component value(s) to the appropriate
      677    10966                        representation:  VD$BUFFER or VD$NUMBER.
      678    10967                    o Validate the value(s).
      679    10968                    o Update GLOBAL.
      680    10969                    o Perform any side-effects of the name's value change.
      681    10970        */
      682    10971
      683    10972        %BOX (TITLE=WRTR_NUMBER);

             10984    1   /***************************************************************************
             10986    1    *                                                                         *
             10990    1            *                                WRTR_NUMBER                              *
             10992    1            *                                                                         *
             10994    1           ***************************************************************************/

      684    10998
      685    10999        /*I* NAME: WRTR_NUMBER
      686    11000            PARAMETERS:
      687    11001                GLOBAL must be a VD$NUMBER (chain).
      688    11002            INPUT:
      689    11003                DATA may be (a chain of) either VD$NUMBER or VD$BUFFER.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:20   
      690    11004            DESCRIPTION:
      691    11005                Loop thru each element (buffer-object) of DATA:
      692    11006                    If the element is a VD$BUFFER, the buffer must contain an ASCII
      693    11007                        decimal number:
      694    11008                        o Convert the number to binary and build a VD$NUMBER for it.
      695    11009                        o Flag the old VD$BUFFER to be freed; it's not needed anymore.
      696    11010                    New value must be between REF$SPEC.M# and REF$SPEC.N#, inclusive.
      697    11011        */
      698    11012
      699    11013    1   WRTR_NUMBER: PROC (GLOBAL) ALTRET;
      700    11014
      701    11015        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
      702    11060
      703    11061    2   DCL CURR_ELEMENT$ PTR;
      704    11062    2   DCL PREV_ELEMENT$ PTR;
      705    11063    2   DCL NEW_ELEMENT$ PTR;
      706    11064    2   DCL CURR_BUF_TO_FREE$ PTR;
      707    11065
      708    11066
      709    11067        %VD$NUMBER (NAME=CURR$ELEMENT, STCLASS="BASED(CURR_ELEMENT$)");
      710    11112        %VD$BUFFER (NAME=CURR$BUFFER, STCLASS="BASED(CURR_ELEMENT$)");
      711    11170        %VD$NUMBER (NAME=PREV$ELEMENT, STCLASS="BASED(PREV_ELEMENT$)");
      712    11215        %VD$NUMBER (NAME=NEW$ELEMENT, STCLASS="BASED(NEW_ELEMENT$)");
      713    11260        %VD$BUFFER (NAME=CURR$BUF_TO_FREE, STCLASS="BASED(CURR_BUF_TO_FREE$)");
      714    11318
      715    11319
      716    11320    2   COMMON_NUMBER:
      717    11321    2           PREV_ELEMENT$ = ADDR(NIL);
      718    11322    2           CURR_ELEMENT$ = ADDR(DATA);
      719    11323
      720    11324    2   EACH_ELEMENT:
      721    11325    3           DO WHILE CURR_ELEMENT$ ~= ADDR(NIL);
      722    11326    4              IF CURR$ELEMENT.OBJECT.CLASS# ~= GLOBAL.OBJECT.CLASS# THEN DO;
      723    11327    4                 CALL VDG$OALLOC (BINBIT(GLOBAL.OBJECT.CLASS#,36), NEW_ELEMENT$)
      724    11328    4                   ALTRET (O_FAILED);
      725    11329    5                 IF CURR$BUFFER.LENGTH# = 0 THEN DO;
      726    11330    5                    NEW$ELEMENT.V# = 0;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:21   
      727    11331    5                    NEW$ELEMENT.LENGTH# = 0;
      728    11332    5                    END;
      729    11333    4                 ELSE IF CURR$BUFFER.OBJECT.CLASS# ~= %CLS_BUFFER THEN
      730    11334    4                       NEW$ELEMENT.V# = CURR$ELEMENT.V#;
      731    11335    4                    ELSE
      732    11336    4                       CALL X$DEC_CONVERT (PINCRC(ADDR(CURR$BUFFER.LENGTH#), 1),
      733    11337    4                         NEW$ELEMENT.V#)
      734    11338    4                         ALTRET (DEC_CONVERT_FAILED);
      735    11339    4                 IF PREV_ELEMENT$ = ADDR(NIL) THEN
      736    11340    4                    DATA$ = NEW_ELEMENT$;
      737    11341    4                 ELSE
      738    11342    4                    PREV$ELEMENT.FLINK$ = NEW_ELEMENT$;
      739    11343    4                 NEW$ELEMENT.FLINK$ = CURR$BUFFER.FLINK$;
      740    11344    4                 CURR$BUFFER.FLINK$ = ADDR(NIL);
      741    11345                      /* Append CURR_ELEMENT$ to end of BUFFER_TO_FREE$ chain */
      742    11346    4                 IF BUFFER_TO_FREE$ = ADDR(NIL) THEN
      743    11347    4                    BUFFER_TO_FREE$ = CURR_ELEMENT$;
      744    11348    5                 ELSE DO;
      745    11349    5                    CURR_BUF_TO_FREE$ = BUFFER_TO_FREE$;
      746    11350    6                    DO WHILE CURR$BUF_TO_FREE.FLINK$ ~= ADDR(NIL);
      747    11351    6                       CURR_BUF_TO_FREE$ = CURR$BUF_TO_FREE.FLINK$;
      748    11352    6                       END;
      749    11353    5                    CURR$BUF_TO_FREE.FLINK$ = CURR_ELEMENT$;
      750    11354    5                    END;
      751    11355    4                 CURR_ELEMENT$ = NEW_ELEMENT$;
      752    11356    4                 END;
      753    11357
      754    11358    4              IF CURR$ELEMENT.OBJECT.CLASS# = %CLS_BOOLEAN THEN DO;
      755    11359    4                 IF CURR$ELEMENT.V# > 0 THEN
      756    11360    4                    CURR$ELEMENT.V# = %BITBIN(TRUE);
      757    11361    4                 ELSE
      758    11362    4                    CURR$ELEMENT.V# = %BITBIN(FALSE);
      759    11363    4                 END;
      760    11364    3              ELSE
      761    11365    3                 IF CURR$ELEMENT.V# < REF$SPEC.M#
      762    11366    3                   OR CURR$ELEMENT.V# > REF$SPEC.N# THEN
      763    11367    3                    GOTO ILL_NUMBER_FOR_NAME_FAILURE;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:22   
      764    11368
      765    11369    3              PREV_ELEMENT$ = CURR_ELEMENT$;
      766    11370    3              CURR_ELEMENT$ = CURR$ELEMENT.FLINK$;
      767    11371    3              END EACH_ELEMENT;
      768    11372
      769    11373    2           GLOBAL.V# = DATA$NUMBER.V#;
      770    11374
      771    11375    2           CALL VDG$OFREE (GLOBAL.FLINK$->VD$BUFFER)
      772    11376    2             ALTRET (O_FAILED);
      773    11377    2           GLOBAL.FLINK$ = ADDR(NIL);
      774    11378    3           IF DATA$NUMBER.FLINK$ ~= ADDR(NIL) THEN DO;
      775    11379    3              CALL VDG$OCOPY (DATA$NUMBER.FLINK$->VD$BUFFER, GLOBAL.FLINK$)
      776    11380    3                ALTRET (O_FAILED);
      777    11381    3              END;
      778    11382
      779    11383    2           RETURN;
      780    11384
      781    11385
      782    11386
      783    11387    2   DEC_CONVERT_FAILED:
      784    11388    2           CALL VDG$ERRMSG (%E$DECIMAL_NOT_LEGAL, NODE$KEY)
      785    11389    2             ALTRET (O_FAILED);
      786    11390    2           ALTRETURN;
      787    11391
      788    11392
      789    11393    2   ILL_NUMBER_FOR_NAME_FAILURE:
      790    11394    2           CALL VDG$ERRMSG (%E$BAD_NUMBER_FOR_NAME, NODE$KEY,
      791    11395    2             REF$SPEC.M#, REF$SPEC.N#) ALTRET (O_FAILED);
      792    11396    2   O_FAILED: ;
      793    11397    2           ALTRETURN;
      794    11398
      795    11399        %BOX (TITLE="Writers which call WRTR_NUMBER but do other things as well.");

             11411    2   /***************************************************************************
             11413    2    *                                                                         *
             11417    2            *        Writers which call WRTR_NUMBER but do other things as well.      *
             11419    2            *                                                                         *
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:23   
             11421    2           ***************************************************************************/

      796    11425
      797    11426
      798    11427    2   WRTR_BOOLEAN: ENTRY (GLOBAL) ALTRET;
      799    11428
      800    11429    2           GOTO COMMON_NUMBER; /* GLOBAL.OBJECT.CLASS# defines any differences */
      801    11430    2   WRTR_$HSCROLL: ENTRY (GLOBAL) ALTRET;
      802    11431
      803    11432    2   WRTR_$HSCROLL_MARGIN: ENTRY (GLOBAL) ALTRET;
      804    11433
      805    11434    3           IF NOT NODE_EXISTS THEN DO;
      806    11435                   /*
      807    11436                   *  Creating node:  adjust NAME_SPEC.M# and .N# based on
      808    11437                   *    current screen width.
      809    11438                   */
      810    11439    3              REF$SPEC.M# = MINIMUM(REF$SPEC.M#, VD_SCREEN_WIDTH);
      811    11440    3              REF$SPEC.N# = MINIMUM(REF$SPEC.N#, VD_SCREEN_WIDTH);
      812    11441    3              END;
      813    11442    2           GOTO COMMON_NUMBER;
      814    11443
      815    11444
      816    11445    2   WRTR_$VSCROLL: ENTRY (GLOBAL) ALTRET;
      817    11446
      818    11447    2   WRTR_$VSCROLL_MARGIN: ENTRY (GLOBAL) ALTRET;
      819    11448
      820    11449    3           IF NOT NODE_EXISTS THEN DO;
      821    11450                   /*
      822    11451                   *  Creating node:  adjust NAME_SPEC.M# and .N# based on
      823    11452                   *    current screen height.
      824    11453                   */
      825    11454    3              REF$SPEC.M# = MINIMUM(REF$SPEC.M#, VD_SCREEN_HEIGHT);
      826    11455    3              REF$SPEC.N# = MINIMUM(REF$SPEC.N#, VD_SCREEN_HEIGHT);
      827    11456    3              END;
      828    11457    2           GOTO COMMON_NUMBER;
      829    11458
      830    11459    2   END WRTR_NUMBER;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:24   
      831    11460
      832    11461        %BOX (TITLE="Writers for field which are MIN/MAX pairs.", PAGE=YES);
             11469    2
             11473    2   /***************************************************************************
             11475    2    *                                                                         *
             11479    2            *                 Writers for field which are MIN/MAX pairs.              *
             11481    2            *                                                                         *
             11483    2           ***************************************************************************/

      833    11487
      834    11488        /*I* NAME: WRTR_MIN_MAX_PAIRS
      835    11489            PARAMETERS:
      836    11490                GLOBAL must be a VD$NUMBER.
      837    11491            INPUT:
      838    11492                DATA may be either a VD$NUMBER or a VD$BUFFER.
      839    11493            DESCRIPTION:
      840    11494                Call WRTR_NUMBER or WRTR_BOOLEAN to validate the value first.
      841    11495                If all ok, see if the name's twin (MIN/MAX-wise) is
      842    11496                    appropriately greater or lesser; if not, change this
      843    11497                    name's value to the limit implied by its twin's value.
      844    11498        */
      845    11499
      846    11500    1   WRTR_MIN_MAX_PAIRS: PROC (GLOBAL) ALTRET;
      847    11501
      848    11502        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
      849    11547
      850    11548
      851    11549    2   DCL WINDOWS_L0_NODE$ PTR;
      852    11550    2   DCL EDITING_WINDOW_LINES SBIN;
      853    11551    2   DCL OLD_$SCREEN SBIN;
      854    11552
      855    11553
      856    11554        %VD$FILE_NODE (NAME=WINDOWS$L0_NODE, STCLASS="BASED(WINDOWS_L0_NODE$)");
      857    11647
      858    11648
      859    11649    2   WRTR_$MIN_COMMAND: ENTRY (GLOBAL) ALTRET;
      860    11650
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:25   
      861    11651    2           IF VD_EDITING_HEIGHT = 0 THEN
      862    11652    2              OLD_$SCREEN = VD_SCREEN_HEIGHT - VD_IBEX_WINDOW;
      863    11653    2           ELSE OLD_$SCREEN = VD_EDITING_HEIGHT + VD_$MIN_COMMAND.V#;
      864    11654    2           CALL WRTR_NUMBER (GLOBAL)
      865    11655    2             ALTRET (X_FAILED);
      866    11656    2           WINDOWS_L0_NODE$ = VD_6E.WINDOWS$ ->VD$STREAM.PORT$ ->
      867    11657    2             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
      868    11658    2           EDITING_WINDOW_LINES = MAXIMUM (0, WINDOWS$L0_NODE.COUNT# - 1);
      869    11659    2           IF VD_$WI_BORDER.LENGTH# > 0 THEN
      870    11660    2              EDITING_WINDOW_LINES = EDITING_WINDOW_LINES * 2;
      871    11661    3           IF (VD_$MIN_COMMAND.V# + EDITING_WINDOW_LINES) > OLD_$SCREEN THEN DO;
      872    11662    3              VD_$MIN_COMMAND.V# = OLD_$SCREEN - EDITING_WINDOW_LINES;
      873    11663    3              DATA$NUMBER.V# = VD_$MIN_COMMAND.V#;
      874    11664                   /*??* Warn the user of the change? */
      875    11665    3              END;
      876    11666    3           IF VD_$MIN_COMMAND.V# > VD_$MAX_COMMAND.V# THEN DO;
      877    11667    3              VD_$MIN_COMMAND.V# = VD_$MAX_COMMAND.V#;
      878    11668    3              ERRCODE = %E$WARN_MIN_CANT_BE_GRTR_MAX;
      879    11669    3              CALL WARN_PAIRS_DONT_COOPERATE
      880    11670    3                ALTRET (X_FAILED);
      881    11671    3              END;
      882    11672
      883    11673                /* If cmd window height not in $MIN_CMD .. $MAX_CMD, change it */
      884    11674    2           CALL ADJUST_COMMAND_WINDOW
      885    11675    2             ALTRET (X_FAILED);
      886    11676    2           IF VD_EDITING_HEIGHT > 0 THEN
      887    11677    2              VD_EDITING_HEIGHT = OLD_$SCREEN - VD_$MIN_COMMAND.V#;
      888    11678
      889    11679    2           RETURN;
      890    11680
      891    11681
      892    11682    2   WRTR_$MIN_RECORD: ENTRY (GLOBAL) ALTRET;
      893    11683
      894    11684    2           CALL WRTR_NUMBER (GLOBAL)
      895    11685    2             ALTRET (X_FAILED);
      896    11686    3           IF VD_$MIN_RECORD.V# > VD_$MAX_RECORD.V# THEN DO;
      897    11687    3              VD_$MIN_RECORD.V# = VD_$MAX_RECORD.V#;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:26   
      898    11688    3              ERRCODE = %E$WARN_MIN_CANT_BE_GRTR_MAX;
      899    11689    3              CALL WARN_PAIRS_DONT_COOPERATE
      900    11690    3                ALTRET (X_FAILED);
      901    11691    3              END;
      902    11692
      903    11693    2           RETURN;
      904    11694
      905    11695
      906    11696    2   WRTR_$MAX_COMMAND: ENTRY (GLOBAL) ALTRET;
      907    11697
      908    11698    2           CALL WRTR_NUMBER (GLOBAL)
      909    11699    2             ALTRET (X_FAILED);
      910    11700    3           IF VD_$MAX_COMMAND.V# > VD_SCREEN_HEIGHT THEN DO;
      911    11701    3              VD_$MAX_COMMAND.V# = VD_SCREEN_HEIGHT;
      912    11702                   /*??* Warn the user of the change? */
      913    11703    3              END;
      914    11704    3           IF VD_$MAX_COMMAND.V# < VD_$MIN_COMMAND.V# THEN DO;
      915    11705    3              VD_$MAX_COMMAND.V# = VD_$MIN_COMMAND.V#;
      916    11706    3              ERRCODE = %E$WARN_MAX_CANT_BE_LESS_MIN;
      917    11707    3              CALL WARN_PAIRS_DONT_COOPERATE
      918    11708    3                ALTRET (X_FAILED);
      919    11709    3              END;
      920    11710
      921    11711                /* If cmd window height not in $MIN_CMD .. $MAX_CMD, change it */
      922    11712    2           CALL ADJUST_COMMAND_WINDOW
      923    11713    2             ALTRET (X_FAILED);
      924    11714
      925    11715    2           RETURN;
      926    11716
      927    11717
      928    11718    2   WRTR_$MAX_RECORD: ENTRY (GLOBAL) ALTRET;
      929    11719
      930    11720    2           CALL WRTR_NUMBER (GLOBAL)
      931    11721    2             ALTRET (X_FAILED);
      932    11722    3           IF VD_$MAX_RECORD.V# < VD_$MIN_RECORD.V# THEN DO;
      933    11723    3              VD_$MAX_RECORD.V# = VD_$MIN_RECORD.V#;
      934    11724    3              ERRCODE = %E$WARN_MAX_CANT_BE_LESS_MIN;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:27   
      935    11725    3              CALL WARN_PAIRS_DONT_COOPERATE
      936    11726    3                ALTRET (X_FAILED);
      937    11727    3              END;
      938    11728
      939    11729    2           RETURN;
      940    11730
      941    11731    2   X_FAILED: ALTRETURN;
      942    11732
      943    11733    2   ADJUST_COMMAND_WINDOW: PROC ALTRET;
      944    11734
      945    11735    3   DCL CMD_WINDOW$ PTR;
      946    11736        %VD$WINDOW_SPEC (NAME=WSPEC, STCLASS=AUTO);
      947    11802
      948    11803
      949    11804        %VD$WINDOW_SPEC (NAME=CMD$WINDOW, STCLASS="BASED(CMD_WINDOW$)");
      950    11870
      951    11871
      952    11872
      953    11873    3           IF VD_COMMAND_WINDOW$ = ADDR(NIL)
      954    11874    3             OR VD_$SCREEN.V# < %MN_SCREEN_EDITING_HEIGHT THEN
      955    11875    3              RETURN;
      956    11876    3           WSPEC = %CLEAR;
      957    11877    3           CMD_WINDOW$ = VD_COMMAND_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;
      958    11878    3           IF CMD$WINDOW.COORDS.HEIGHT# < VD_$MIN_COMMAND.V# THEN
      959    11879    3              WSPEC.COORDS.HEIGHT# = VD_$MIN_COMMAND.V#;
      960    11880    3           ELSE IF CMD$WINDOW.COORDS.HEIGHT# > VD_$MAX_COMMAND.V# THEN
      961    11881    3                 WSPEC.COORDS.HEIGHT# = VD_$MAX_COMMAND.V#;
      962    11882    3              ELSE
      963    11883    3                 RETURN;
      964    11884    3           CALL VDP$WCHANGE (VD_COMMAND_WINDOW$->VD$FILE_NODE, WSPEC)
      965    11885    4           WHENALTRETURN DO; ALTRETURN; END;
      966    11886
      967    11887    3           RETURN;
      968    11888
      969    11889    3   END ADJUST_COMMAND_WINDOW;
      970    11890
      971    11891
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:28   
      972    11892    2   WARN_PAIRS_DONT_COOPERATE: PROC ALTRET;
      973    11893
      974    11894
      975    11895    3           DATA$NUMBER.V# = GLOBAL.V#;
      976    11896    3           DATA_TEXTC.LENGTH# = LENGTHC(NODE$KEY.BYTES) - %LENGTHC('$MIN');
      977    11897    3           DATA_TEXTC.BYTES = SUBSTR(NODE$KEY.BYTES, %LENGTHC('$MIN'));
      978    11898    3           CALL VDG$WARNMSG (ERRCODE, NODE$KEY, DATA_TEXTC);
      979    11899
      980    11900    3           CALL VDG$EREPORT_ERROR;     /* Report the warning */
      981    11901
      982    11902    3           RETURN;
      983    11903
      984    11904
      985    11905    3   END WARN_PAIRS_DONT_COOPERATE;
      986    11906
      987    11907    2   END WRTR_MIN_MAX_PAIRS;
      988    11908
      989    11909        %BOX (TITLE=WRTR_$SCREEN, PAGE=YES);
             11917    2
             11921    2   /***************************************************************************
             11923    2    *                                                                         *
             11927    2            *                                WRTR_$SCREEN                             *
             11929    2            *                                                                         *
             11931    2           ***************************************************************************/

      990    11935
      991    11936        /*I* NAME: WRTR_$SCREEN
      992    11937            PARAMETERS:
      993    11938                GLOBAL must be a VD$NUMBER.
      994    11939            INPUT:
      995    11940                DATA may be either a VD$NUMBER or a VD$BUFFER.
      996    11941            DESCRIPTION:
      997    11942                After changing $SCREEN's value, adjust the values of
      998    11943                $MAX_COMMAND, $MIN_COMMAND, $VSCROLL, and $VSCROLL_MARGIN
      999    11944                so they are between 0 and the new value of $SCREEN.
     1000    11945        */
     1001    11946
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:29   
     1002    11947    1   WRTR_$SCREEN: PROC (GLOBAL) ALTRET;
     1003    11948
     1004    11949        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
     1005    11994
     1006    11995
     1007    11996    2   DCL WINDOWS_L0_NODE$ PTR;
     1008    11997    2   DCL MN_HEIGHT SBIN;
     1009    11998    2   DCL N_EDITING_WINDOWS SBIN;
     1010    11999    2   DCL N_BORDERS SBIN;
     1011    12000    2   DCL CURR_NODE$ PTR;
     1012    12001    2   DCL OLD_$SCREEN SBIN;
     1013    12002    2   DCL OLD_CURRENT_WINDOW$ PTR;
     1014    12003    2   DCL SCREEN_PERCENT SBIN;
     1015    12004        %VD$WINDOW_SPEC (NAME=NEW_WSPEC, STCLASS=AUTO);
     1016    12070    2   DCL EDITING_WINDOW_HEIGHT SBIN;
     1017    12071
     1018    12072
     1019    12073        %VD$FILE_NODE (NAME=WINDOWS$L0_NODE, STCLASS="BASED(WINDOWS_L0_NODE$)");
     1020    12166        %VD$FILE_NODE (NAME=CURR$NODE, STCLASS="BASED(CURR_NODE$)");
     1021    12259
     1022    12260
     1023    12261                /*
     1024    12262                *   Guarantee that NAME_SPEC.M# and .N# are valid for the current
     1025    12263                *       screen height.  The NAME_SPEC may be coming from a workspace
     1026    12264                *       file which was SAVEd with a different screen height.
     1027    12265                *   Also, if the new value is a %CLS_NUMBER, we always force it to be
     1028    12266                *       legal; again, it may be coming from a workspace file which was
     1029    12267                *       SAVEd with a different screen height; if we let WRTR_NUMBER
     1030    12268                *       catch the error, it'll report a %FLV_SERIOUS error and abort
     1031    12269                *       the rest of the workspace file.  So instead, $SCREEN is a
     1032    12270                *       "magic" name which sometimes tops out at VD_SCREEN_HEIGHT, no
     1033    12271                *       matter what value is assigned to it.
     1034    12272                *N**N*  Should we warn the user if we change the new value?!?!?
     1035    12273                *   Let WRTR_NUMBER catch and report values < 0, and all bad values in
     1036    12274                *       %CLS_BUFFERs.
     1037    12275                */
     1038    12276    2           OLD_$SCREEN = VD_$SCREEN.V#; /* Save to determine how to fix windows */
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:30   
     1039    12277    2           REF$SPEC.M# = 0;
     1040    12278    2           REF$SPEC.N# = VD_SCREEN_HEIGHT;
     1041    12279    2           IF DATA.OBJECT.CLASS# = %CLS_NUMBER THEN
     1042    12280    2              DATA$NUMBER.V# = MINIMUM(DATA$NUMBER.V#, VD_SCREEN_HEIGHT);
     1043    12281    2           CALL WRTR_NUMBER (GLOBAL)
     1044    12282    3           WHENALTRETURN DO; ALTRETURN; END;
     1045    12283
     1046    12284    2           WINDOWS_L0_NODE$ = VD_6E.WINDOWS$ -> VD$STREAM.PORT$ ->
     1047    12285    2             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     1048    12286    2           N_EDITING_WINDOWS = MAXIMUM (0, WINDOWS$L0_NODE.COUNT# - 1);
     1049    12287    2           N_BORDERS = VD_$WI_BORDER.LENGTH# + 1;
     1050    12288    2           MN_HEIGHT = MAXIMUM (%MN_SCREEN_EDITING_HEIGHT, VD_$MIN_COMMAND.V# +
     1051    12289    2             N_EDITING_WINDOWS * N_BORDERS);
     1052    12290    2           IF VD_$SCREEN.V# = 1 THEN /* "ON" should mean back the default */
     1053    12291    2              VD_$SCREEN.V# = VD_EDITING_HEIGHT+VD_$MIN_COMMAND.V#;
     1054    12292    3           IF VD_$SCREEN.V# < MN_HEIGHT THEN DO;
     1055    12293    3              VD_$SCREEN.V# = 0;
     1056    12294    3              IF VD_$COMMAND.V# = %BITBIN(FALSE) THEN
     1057    12295    3                 VD_$COMMAND.V# = %BITBIN(TRUE)+1; /* Default rd from cmd window */
     1058    12296    3              END;
     1059    12297    3           ELSE DO;
     1060    12298    3              IF VD_$COMMAND.V# > %BITBIN(TRUE) THEN
     1061    12299    3                 VD_$COMMAND.V# = %BITBIN(FALSE); /* Back to edit wnd if chnged */
     1062    12300    3              VD_$MAX_COMMAND.V# = MINIMUM (VD_$MAX_COMMAND.V#, VD_$SCREEN.V#);
     1063    12301    3              VD_$MIN_COMMAND.V# = MINIMUM (VD_$MIN_COMMAND.V#,
     1064    12302    3                VD_$SCREEN.V# - N_EDITING_WINDOWS - N_BORDERS);
     1065    12303    3              VD_$VSCROLL.V# = MINIMUM (VD_$VSCROLL.V#, VD_$SCREEN.V# / 2);
     1066    12304    3              VD_$VSCROLL_MARGIN.V# = MINIMUM (VD_$VSCROLL_MARGIN.V#,
     1067    12305    3                VD_$SCREEN.V# / 2);
     1068    12306    3              END;
     1069    12307
     1070    12308                /* Adjust size of all windows */
     1071    12309    2           NEW_WSPEC = %CLEAR;
     1072    12310    2           CURR_NODE$ = WINDOWS$L0_NODE.TAIL$;
     1073    12311    2           IF CURR_NODE$ = ADDR(NIL)
     1074    12312    3             OR OLD_$SCREEN = VD_$SCREEN.V# AND VD_OLD_$SCREEN = 0 THEN DO;
     1075    12313    4              IF VD_OLD_$SCREEN > 0 THEN DO;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:31   
     1076    12314    4                 DATA$NUMBER.V# = VD_OLD_$SCREEN;
     1077    12315    4                 VD_$SCREEN.V# = 0;
     1078    12316    4                 END;
     1079    12317    3              RETURN;
     1080    12318    3              END;
     1081    12319    2           OLD_$SCREEN = VD_$SCREEN.V#;
     1082    12320    2           VD_$SCREEN.V# = 0; /* Change all to 1dim to begin */
     1083    12321    2           SCREEN_PERCENT = 0; /* Start counting lines currently in use */
     1084    12322    3           DO WHILE '1'B;
     1085    12323    3              SCREEN_PERCENT = SCREEN_PERCENT +
     1086    12324    3                CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS.HEIGHT#;
     1087    12325    3              NEW_WSPEC.COORDS = CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS;
     1088    12326    3              CALL VDP$WCHANGE (CURR$NODE, NEW_WSPEC);
     1089    12327    3              IF CURR$NODE.BLINK$ = ADDR(NIL) THEN EXIT;
     1090    12328    3              CURR_NODE$ = CURR$NODE.BLINK$;
     1091    12329    3              END;
     1092    12330    2           VD_$SCREEN.V# = OLD_$SCREEN;
     1093    12331        /* Now set (and get) the new command window size */
     1094    12332    2           NEW_WSPEC.COORDS.HEIGHT# = VD_$SCREEN.V#;
     1095    12333    2           OLD_$SCREEN = CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS.HEIGHT#;
     1096    12334    3           IF VD_$SCREEN.V#>0 THEN DO;
     1097    12335    3              CALL VDP$WCHANGE (CURR$NODE, NEW_WSPEC);
     1098    12336    3              VD_$SCREEN.V# =
     1099    12337    3                CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS.HEIGHT#;
     1100    12338    3              END;
     1101    12339    2           IF DATA$NUMBER.V# = 2 THEN     /* if temporary expansion for SHOW ... */
     1102    12340    2              DATA$NUMBER.V# = VD_OLD_$SCREEN;     /* Display the previous value */
     1103    12341    3           ELSE DO;
     1104    12342    3              DATA$NUMBER.V# = VD_$SCREEN.V#; /* Otherwise set the new value ... */
     1105    12343    3              IF VD_OLD_$SCREEN>0 THEN VD_OLD_$SCREEN = VD_$SCREEN.V#;
     1106    12344    3              END;              /* and remember it if we're temporarily expanded */
     1107    12345    2           IF VD_$SCREEN.V# = 0 THEN RETURN;
     1108    12346    2           VD_EDITING_HEIGHT = VD_$SCREEN.V#-VD_$MIN_COMMAND.V#;
     1109    12347    2           IF SCREEN_PERCENT = 0 THEN SCREEN_PERCENT = 100;
     1110    12348    2           ELSE SCREEN_PERCENT = VD_$SCREEN.V# * 100 / SCREEN_PERCENT;
     1111    12349    2           NEW_WSPEC.COORDS.HEIGHT# = VD_$SCREEN.V# - OLD_$SCREEN;
     1112    12350    2           OLD_CURRENT_WINDOW$ = VD_CURRENT_WINDOW$;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:32   
     1113    12351    3           DO WHILE '1'B;
     1114    12352    3              CURR_NODE$ = CURR$NODE.FLINK$;
     1115    12353    3              IF CURR_NODE$ = ADDR(NIL) THEN EXIT;
     1116    12354    3              VD_CURRENT_WINDOW$ = CURR_NODE$;
     1117    12355    3              EDITING_WINDOW_HEIGHT = SCREEN_PERCENT *
     1118    12356    3                CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS.HEIGHT# / 100;
     1119    12357    3              CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS.HEIGHT# = 0;
     1120    12358    3              CALL VDP$WCHANGE (CURR$NODE, NEW_WSPEC);
     1121    12359    3              N_EDITING_WINDOWS = N_EDITING_WINDOWS - 1;
     1122    12360    3              NEW_WSPEC.COORDS.HEIGHT# = MAXIMUM (N_EDITING_WINDOWS * N_BORDERS,
     1123    12361    3                NEW_WSPEC.COORDS.HEIGHT# - EDITING_WINDOW_HEIGHT);
     1124    12362    3              END;
     1125    12363    2           VD_CURRENT_WINDOW$ = OLD_CURRENT_WINDOW$;
     1126    12364
     1127    12365
     1128    12366    2           RETURN;
     1129    12367
     1130    12368    2   END WRTR_$SCREEN;
     1131    12369
     1132    12370        %BOX (TITLE=WRTR_BUFFER, PAGE=YES);
             12378    2
             12382    2   /***************************************************************************
             12384    2    *                                                                         *
             12388    2            *                                WRTR_BUFFER                              *
             12390    2            *                                                                         *
             12392    2           ***************************************************************************/

     1133    12396
     1134    12397        /*I* NAME: WRTR_BUFFER
     1135    12398            PARAMETERS:
     1136    12399                GLOBAL must be a VD$BUFFER.
     1137    12400            INPUT:
     1138    12401                DATA must be a VD$BUFFER.
     1139    12402            DESCRIPTION:
     1140    12403                The length of the new value must be between
     1141    12404                    REF$SPEC.M# and REF$SPEC.N#, inclusive.
     1142    12405        */
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:33   
     1143    12406
     1144    12407    1   WRTR_BUFFER: PROC (GLOBAL) ALTRET;
     1145    12408
     1146    12409        %VD$BUFFER (NAME=GLOBAL, STCLASS=PARAM);
     1147    12467        %VD$BUFFER (NAME=DATA, STCLASS="BASED(DATA$)");
     1148    12525
     1149    12526
     1150    12527    2   DCL ALT_INTRO$ PTR;
     1151    12528    2   DCL ALT_LEX_FUNC$ PTR;
     1152    12529    2   DCL INDX SBIN;
     1153    12530    2   DCL SINK SBIN;
     1154    12531    2   DCL WINDOWS_L0_NODE$ PTR;
     1155    12532    2   DCL N_EDITING_WINDOWS SBIN;
     1156    12533    2   DCL RET_CODE CHAR(1);
     1157    12534
     1158    12535
     1159    12536    2   DCL CHAR$WORD CHAR(%NB_PER_WORD) ALIGNED BASED;
     1160    12537        %VD$BUFFER (NAME=ALT$INTRO, STCLASS="BASED(ALT_INTRO$)");
     1161    12595        %VD$BUFFER (NAME=ALT$LEX_FUNC, STCLASS="BASED(ALT_LEX_FUNC$)");
     1162    12653        %VD$FILE_NODE (NAME=WINDOWS$L0_NODE, STCLASS="BASED(WINDOWS_L0_NODE$)");
     1163    12746
     1164    12747
     1165    12748    2   COMMON_BUFFER:
     1166    12749    2           IF DATA.LENGTH# < REF$SPEC.M#
     1167    12750    2             OR DATA.LENGTH# > REF$SPEC.N# THEN
     1168    12751    2              GOTO ILL_NAME_VALUE_LENGTH_FAILURE;
     1169    12752
     1170    12753    2           GLOBAL.LENGTH# = DATA.LENGTH#;
     1171    12754    2           IF REF$SPEC.WRITER# ~= %WRTR_$CONTEXT
     1172    12755    2             AND REF$SPEC.WRITER# ~= %WRTR_$INITIALIZE THEN
     1173    12756    2              GLOBAL.BYTES = DATA.BYTES;
     1174    12757    3           ELSE DO; /* For large non_window values, just point global at value */
     1175    12758    3              GLOBAL.FLINK$ = DATA$;
     1176    12759    3              RETURN;
     1177    12760    3              END;
     1178    12761
     1179    12762    2           CALL VDG$OFREE (GLOBAL.FLINK$->VD$BUFFER)
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:34   
     1180    12763    2             ALTRET(X_FAILED);
     1181    12764    2           GLOBAL.FLINK$ = ADDR(NIL);
     1182    12765    3           IF DATA.FLINK$ ~= ADDR(NIL) THEN DO;
     1183    12766    3              CALL VDG$OCOPY (DATA.FLINK$->VD$BUFFER, GLOBAL.FLINK$)
     1184    12767    3                ALTRET(X_FAILED);
     1185    12768    3              END;
     1186    12769
     1187    12770    2           RETURN;
     1188    12771
     1189    12772
     1190    12773    2   ILL_NAME_VALUE_LENGTH_FAILURE:
     1191    12774    2           CALL VDG$ERRMSG (%E$BAD_NAME_VALUE_LENGTH, NODE$KEY,
     1192    12775    2             REF$SPEC.M#, REF$SPEC.N#);
     1193    12776
     1194    12777    2   X_FAILED: ;
     1195    12778    2           ALTRETURN;
     1196    12779
     1197    12780
     1198    12781        /*I** NAME: WRTR_BLOCK_EXPR
     1199    12782            PARAMETERS:
     1200    12783                GLOBAL must be a VD$BUFFER.
     1201    12784            INPUT:
     1202    12785                DATA must be a VD$BUFFER containing a block expression.
     1203    12786            DESCRIPTION:
     1204    12787        *N**N*  Validate the block expression,
     1205    12788                    then process as a normal VD$BUFFER.
     1206    12789        */
     1207    12790
     1208    12791    2   WRTR_BLOCK_EXPR: ENTRY (GLOBAL) ALTRET;
     1209    12792
     1210    12793    2           GOTO COMMON_BUFFER;
     1211    12794
     1212    12795
     1213    12796        /*I* NAME: WRTR_$CONTEXT
     1214    12797             DESCRIPTION:
     1215    12798                Just makes sure the data buffer is large enough to stuff the
     1216    12799                actual context file fid.  Only initialiaztion ever writes it.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:35   
     1217    12800                Also used for $INITIALIZE, but only when initialization is writing
     1218    12801                it.
     1219    12802        */
     1220    12803
     1221    12804    2   WRTR_$CONTEXT: ENTRY (GLOBAL) ALTRET;
     1222    12805
     1223    12806    2           IF DATA$ ~= ADDR(GLOBAL) THEN GOTO COMMON_BUFFER;
     1224    12807    2           CALL VDG$OALLOC (%CLS_BUFFER, DATA.FLINK$, (LENGTHC(VD$STRING_HEADER) +
     1225    12808    2             %MXNB_FID + %NB_PER_WORD - 1) / %NB_PER_WORD) ALTRET (X_FAILED);
     1226    12809    2           DATA$ = DATA.FLINK$;
     1227    12810    2           DATA$BUFFER.LENGTH# = 0;
     1228    12811    2           GOTO COMMON_BUFFER;
     1229    12812
     1230    12813
     1231    12814        /*I** NAME: WRTR_IMP_INTRO
     1232    12815            PARAMETERS:
     1233    12816                GLOBAL must be a VD$BUFFER.
     1234    12817            INPUT:
     1235    12818                DATA must be a VD$BUFFER containing an IMP introducer string.
     1236    12819            DESCRIPTION:
     1237    12820                If the IMP introducer string equals the other IMP introducer,
     1238    12821                    reject the assignment.
     1239    12822                If the IMP introducer string is a displayable character,
     1240    12823                    warn the user.  Then process as a normal VD$BUFFER.
     1241    12824        */
     1242    12825
     1243    12826    2   WRTR_IMP_INTRO: ENTRY (GLOBAL) ALTRET;
     1244    12827
     1245    12828    2           INDX = DATA.LENGTH#;
     1246    12829    2           SINK = 0;
     1247    12830                /* First eliminate any control_value functions in the string */
     1248    12831    3           DO WHILE '1'B;
     1249    12832    3              CALL INDEX (SINK, VD_$CONTROL.BYTES, DATA.BYTES, SINK)
     1250    12833    4              WHENRETURN DO;
     1251    12834    4                 CALL VDG$EXEC_CONTROL (INDX, DATA.BYTES, SINK, RET_CODE)
     1252    12835    4                   ALTRET (X_FAILED);
     1253    12836    4                 DATA.LENGTH# = INDX;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:36   
     1254    12837    5                 IF RET_CODE ~= %CHR_SPACE THEN DO;
     1255    12838    5                    CALL VDG$ERRMSG (%E$CTRLFN_CONFLICTS_W_KEYIN);
     1256    12839    5                    ALTRETURN;
     1257    12840    5                    END;
     1258    12841    4                 END;
     1259    12842    3              IF SINK >= INDX THEN EXIT;
     1260    12843    3              END;
     1261    12844
     1262    12845    3           IF DATA.LENGTH# > 0 THEN DO;
     1263    12846    3              IF ADDR(GLOBAL) = ADDR(VD_$INTRO_1) THEN
     1264    12847    3                 ALT_INTRO$ = ADDR(VD_$INTRO_2);
     1265    12848    3              ELSE
     1266    12849    3                 ALT_INTRO$ = ADDR(VD_$INTRO_1);
     1267    12850    3              IF ALT$INTRO.LENGTH# = DATA.LENGTH#
     1268    12851    3                AND ALT$INTRO.BYTES =
     1269    12852    4                SUBSTR(DATA.BYTES, 0, DATA.LENGTH#) THEN DO;
     1270    12853    4                 CALL VDG$ERRMSG (%E$IMP_INTROS_EQUAL);
     1271    12854    4                 ALTRETURN;
     1272    12855    4                 END;
     1273    12856    3              IF SUBSTR(DATA.BYTES, 0, 1) >= %CHR_FIRST_DISPLAYABLE
     1274    12857    4                AND SUBSTR(DATA.BYTES, 0, 1) <= %CHR_LAST_DISPLAYABLE THEN DO;
     1275    12858                      /* DATA_TEXTC can be in AUTO 'cause this is a warning, */
     1276    12859                      /*   and we'll call VDG$EREPORT_ERROR immediately      */
     1277    12860    4                 DATA_TEXTC.LENGTH# = 1;
     1278    12861    4                 DATA_TEXTC.BYTES = SUBSTR(DATA.BYTES, 0, 1);
     1279    12862    4                 CALL VDG$WARNMSG (%E$WARN_INTRO_DISPLAYABLE,DATA_TEXTC,NODE$KEY);
     1280    12863    4                 CALL VDG$EREPORT_ERROR;   /* Display the warning */
     1281    12864    4                 END;
     1282    12865    3              END;
     1283    12866
     1284    12867    2           GOTO COMMON_BUFFER;
     1285    12868
     1286    12869
     1287    12870        /*I** NAME: WRTR_FILE_STCLASS
     1288    12871            PARAMETERS:
     1289    12872                GLOBAL must be a VD$BUFFER.
     1290    12873            INPUT:
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:37   
     1291    12874                DATA must be a VD$BUFFER containing a single %FSTCL_ character.
     1292    12875            DESCRIPTION:
     1293    12876                Validate the character in DATA,
     1294    12877                    then process as a normal VD$BUFFER.
     1295    12878        */
     1296    12879
     1297    12880    2   WRTR_FILE_STCLASS: ENTRY (GLOBAL) ALTRET;
     1298    12881
     1299    12882    2           IF DATA.LENGTH# > 0 THEN
     1300    12883    3           DO SELECT (SUBSTR(DATA.BYTES, 0, 1));
     1301    12884    3              SELECT(%FSTCL_EXTERNAL, %FSTCL_INTERNAL, %FSTCL_MIGRATABLE);
     1302    12885    3              ;   /* Do nothing:  ok */
     1303    12886    3              SELECT(ELSE);
     1304    12887    3           SINK = %E$BAD_FILE_STCLASS_FOR_NAME;
     1305    12888    3   DATA_ERR: CALL VDG$ERRMSG (SINK, NODE$KEY) ALTRET(X_FAILED);
     1306    12889    3           VD_ERR_SUBST$ = PINCRW(VD_6E.ERR_TAIL$, SIZEW(VD$ERR));
     1307    12890    3           INDX = 0;
     1308    12891    4           DO WHILE INDX < %MX_CMD_OBJECTS
     1309    12892    4             AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
     1310    12893    4              INDX = INDX + 1;
     1311    12894    4              END;
     1312    12895    3           IF INDX >= %MX_CMD_OBJECTS THEN
     1313    12896    3              CALL VDG$ESCREECH (INDX);
     1314    12897    3           CALL VDG$OCOPY (DATA, VD_CMD_OBJECTS$ (INDX))
     1315    12898    4           WHENALTRETURN DO; ALTRETURN; END;
     1316    12899
     1317    12900    3           SUBST$POINTER.OBJECT.CLASS# (1) = %CLS_PTR_TEXTC;
     1318    12901    3           SUBST$POINTER.V$ (1) =
     1319    12902    3             PINCRC(ADDR(VD_CMD_OBJECTS$ (INDX) -> VD$BUFFER.LENGTH#),
     1320    12903    3             LENGTHC(VD$BUFFER.LENGTH#) - LENGTHC(VD$TEXTC.LENGTH#));
     1321    12904    3           ALTRETURN;
     1322    12905    3              END;
     1323    12906
     1324    12907    2           GOTO COMMON_BUFFER;
     1325    12908
     1326    12909
     1327    12910        /*I** NAME: WRTR_$COMMENT
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:38   
     1328    12911            PARAMETERS:
     1329    12912                GLOBAL must be a VD$BUFFER.
     1330    12913            INPUT:
     1331    12914                DATA must be a VD$BUFFER.
     1332    12915            DESCRIPTION:
     1333    12916                Validate the character(s) in DATA, update the PCB,
     1334    12917                    then process as a normal VD$BUFFER.
     1335    12918        */
     1336    12919
     1337    12920    2   WRTR_$COMMENT: ENTRY (GLOBAL) ALTRET;
     1338    12921
     1339    12922    2           ALT_LEX_FUNC$ = ADDR(VD_$CONTROL);
     1340    12923
     1341    12924    3           DO CASE (DATA.LENGTH#);
     1342    12925    3            CASE (1);
     1343    12926    3              CALL CONCAT (VD_PCB.COMMENT.LEAD, %CHR_SPACE, DATA.BYTES);
     1344    12927    3            CASE (2);
     1345    12928    3              VD_PCB.COMMENT.LEAD = DATA.BYTES;
     1346    12929    3            CASE (0);
     1347    12930    3              VD_PCB.COMMENT.LEAD = %CHR_SPACE;
     1348    12931    3            END;
     1349    12932    2           VD_PCB.COMMENT.TRAIL = VD_PCB.COMMENT.LEAD;
     1350    12933    2           GOTO COMMON_COMM_CON;
     1351    12934
     1352    12935
     1353    12936        /*I** NAME: WRTR_$CONTROL
     1354    12937            PARAMETERS:
     1355    12938                GLOBAL must be a VD$BUFFER.
     1356    12939            INPUT:
     1357    12940                DATA must be a VD$BUFFER.
     1358    12941            DESCRIPTION:
     1359    12942                Validate the character(s) in DATA,
     1360    12943                    then process as a normal VD$BUFFER.
     1361    12944        */
     1362    12945
     1363    12946    2   WRTR_$CONTROL: ENTRY (GLOBAL) ALTRET;
     1364    12947
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:39   
     1365    12948    2           ALT_LEX_FUNC$ = ADDR(VD_$COMMENT);
     1366    12949    2   COMMON_COMM_CON:;
     1367    12950    3           IF DATA.LENGTH# > 0 THEN DO;
     1368    12951    4              DO INDX = 0 TO (DATA.LENGTH# - 1);
     1369    12952    4                 CAND_CHAR = SUBSTR(DATA.BYTES, INDX, 1);
     1370    12953    5                 IF ALT$LEX_FUNC.LENGTH# > 0 THEN DO;
     1371    12954    5                    CALL INDEX (ALT_INDX, CAND_CHAR, ALT$LEX_FUNC.BYTES)
     1372    12955    6                    WHENRETURN DO;
     1373    12956    6                       IF ALT_LEX_FUNC$ = ADDR(VD_$COMMENT) THEN
     1374    12957    6                          CALL VDG$ERRMSG (%E$CONTROL_CONFLICTS_W_COMMENT);
     1375    12958    6                       ELSE
     1376    12959    6                          CALL VDG$ERRMSG (%E$COMMENT_CONFLICTS_W_CONTROL);
     1377    12960    6                       ALTRETURN;
     1378    12961    6                       END;
     1379    12962    5                    END;
     1380    12963    4                 CCL = VD_XLATE_CHAR_CLASS.CCL (ASCBIN(CAND_CHAR));
     1381    12964    4                 IF CCL = %CCL_RES OR CCL = %CCL_DOT
     1382    12965    4                   OR CCL = %CCL_NUM OR CCL = %CCL_WHSP
     1383    12966    4                   OR (CAND_CHAR >= 'A' AND CAND_CHAR <= 'Z')
     1384    12967    5                   OR (CAND_CHAR >= 'a' AND CAND_CHAR <= 'z') THEN DO;
     1385    12968    5                    SINK = %E$COMM_CON_CANT_HAVE_RES_SPEC;
     1386    12969    5                    GOTO DATA_ERR;
     1387    12970    5                    END;
     1388    12971    4                 END;
     1389    12972    3              END;
     1390    12973    2           GOTO COMMON_BUFFER;
     1391    12974
     1392    12975
     1393    12976        /*I** NAME: WRTR_$WI_BORDER
     1394    12977            PARAMETERS:
     1395    12978                GLOBAL must be a VD$BUFFER.
     1396    12979            INPUT:
     1397    12980                DATA must be a VD$BUFFER.
     1398    12981            DESCRIPTION:
     1399    12982                If $WI_BORDER had a 0-length value before, and we're about to
     1400    12983                assign it a non-0 length, then check to make sure that there is
     1401    12984                room for editing-window borders in the $SCREEN size.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:40   
     1402    12985                If so:
     1403    12986                    Process as a normal VD$BUFFER.
     1404    12987        *N**N*      Tell the FEP to put up borders on the editing windows.
     1405    12988        */
     1406    12989
     1407    12990    2   WRTR_$WI_BORDER: ENTRY (GLOBAL) ALTRET;
     1408    12991
     1409    12992
     1410    12993
     1411    12994    3           IF VD_$WI_BORDER.LENGTH# = 0 AND DATA.LENGTH# > 0 THEN DO;
     1412    12995    3              WINDOWS_L0_NODE$ = VD_6E.WINDOWS$ -> VD$STREAM.PORT$ ->
     1413    12996    3                VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     1414    12997    3              N_EDITING_WINDOWS = MAXIMUM (0, WINDOWS$L0_NODE.COUNT# - 1);
     1415    12998    4              IF (N_EDITING_WINDOWS * 2) > VD_EDITING_HEIGHT THEN DO;
     1416    12999    4                 DATA.LENGTH# = 0;
     1417    13000    4                 CALL VDG$WARNMSG (%E$NO_ROOM_FOR_BORDERS);
     1418    13001    4                 CALL VDG$EREPORT_ERROR;   /* Display the warning */
     1419    13002    4                 RETURN;   /* Don't update $WI_BORDER */
     1420    13003    4                 END;
     1421    13004    3              END;
     1422    13005
     1423    13006    2           GOTO COMMON_BUFFER;
     1424    13007
     1425    13008    2   END WRTR_BUFFER;
     1426    13009
     1427    13010        %BOX (TITLE=WTRT_$BY, PAGE=YES);
             13018    2
             13022    2   /***************************************************************************
             13024    2    *                                                                         *
             13028    2            *                                  WTRT_$BY                               *
             13030    2            *                                                                         *
             13032    2           ***************************************************************************/

     1428    13036
     1429    13037        /*I* NAME: WRTR_$BY
     1430    13038            PARAMETERS:
     1431    13039                GLOBAL is unused, since it must always be VD_$BY.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:41   
     1432    13040            INPUT:
     1433    13041                DATA is either a CLS_PTR_KEY or a VD$BUFFER containing decimal
     1434    13042                digits possibly separated by a period.
     1435    13043                Or, it might be a VD$NUMBER from an old encoded context file.
     1436    13044            DESCRIPTION:
     1437    13045                If DATA is a CLS_PTR_KEY, this might be the initial write, so just
     1438    13046                return if so.  Or it might be an encoded image, so copy the key and
     1439    13047                point to it.  Otherwise, convert the decimal digits into a proper key.
     1440    13048        */
     1441    13049
     1442    13050    1   WRTR_$BY: PROC(GLOBAL) ALTRET;
     1443    13051
     1444    13052        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
     1445    13097
     1446    13098        %VD$KEY_NUMBER (NAME=VD_$BY_KEY, STCLASS=SYMREF);
     1447    13113        %VD$KEY_NUMBER;
     1448    13128        %VD$POINTER (NAME=DATA$POINTER, STCLASS="BASED(DATA$)");
     1449    13173
     1450    13174
     1451    13175    2   DCL I SBIN;
     1452    13176    2   DCL KEY SBIN;
     1453    13177    2   DCL TEMP$ PTR;
     1454    13178    2   DCL 1 FRACT REDEF TEMP$ CHAR(4);
     1455    13179
     1456    13180
     1457    13181    3           IF DATA.OBJECT.CLASS# = %CLS_NUMBER THEN DO;
     1458    13182    3              KEY = DATA$NUMBER.V#;
     1459    13183    3              GOTO GOT_KEY;
     1460    13184    3              END;
     1461    13185    3           IF DATA.OBJECT.CLASS# = %CLS_PTR_KEY THEN DO;
     1462    13186    3              KEY = DATA$POINTER.V$ -> VD$KEY_NUMBER.BYTES#;
     1463    13187    3              IF DATA$POINTER.V$ = ADDR(VD_$BY_KEY) THEN RETURN;
     1464    13188    3              GOTO GOT_KEY;
     1465    13189    3              END;
     1466    13190    2           KEY = 0;
     1467    13191    3           CALL INDEX (I, '.', DATA$BUFFER.BYTES) WHENRETURN DO;
     1468    13192    3              FRACT = %CONCAT(BINASC(3),'000'); /* Right extend to 3 digits */
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:42   
     1469    13193    3              KEY = DATA$BUFFER.LENGTH#-I-1;
     1470    13194    3              SUBSTR (FRACT,1,KEY) = SUBSTR (DATA$BUFFER.BYTES,I+1,KEY);
     1471    13195    3              IF KEY>0 THEN CALL X$DEC_CONVERT (ADDR (FRACT), KEY)
     1472    13196    4                 WHENALTRETURN DO;
     1473    13197    4   DEC_CONVERT_FAILED: CALL VDG$ERRMSG (%E$DECIMAL_NOT_LEGAL, NODE$KEY);
     1474    13198    4   OALLOC_FAILED:   ALTRETURN;
     1475    13199    4                    END;
     1476    13200    3              DATA$BUFFER.LENGTH# = I;
     1477    13201    3              END;
     1478    13202
     1479    13203    3           IF DATA$BUFFER.LENGTH#>0 THEN DO;
     1480    13204    3              CALL X$DEC_CONVERT (PINCRC (ADDR( DATA.LENGTH#), 1), I)
     1481    13205    3                ALTRET (DEC_CONVERT_FAILED);
     1482    13206    3              IF I>66 THEN I = 66;
     1483    13207    3              KEY = KEY + I*1000;
     1484    13208    3              END;
     1485    13209
     1486    13210    2   GOT_KEY: ;
     1487    13211    3           IF KEY > 65534 THEN DO;
     1488    13212    3              CALL VDG$ERRMSG (%E$BAD_KEY_INCR);
     1489    13213    3              ALTRETURN;
     1490    13214    3              END;
     1491    13215    2           CALL VDG$OALLOC (%CLS_PTR_KEY, TEMP$) ALTRET (OALLOC_FAILED);
     1492    13216    2           BUFFER_TO_FREE$ = DATA$;
     1493    13217    2           DATA$ = TEMP$;
     1494    13218    2           DATA$POINTER.V$ = ADDR(VD_$BY_KEY);
     1495    13219    2           VD_$BY_KEY.BYTES# = KEY;
     1496    13220    2           VD_$BY.V# = KEY;
     1497    13221    2           RETURN;
     1498    13222    2   END;
     1499    13223
     1500    13224        %BOX (TITLE=WTRT_$FILETYPE, PAGE=YES);
             13232    2
             13236    2   /***************************************************************************
             13238    2    *                                                                         *
             13242    2            *                               WTRT_$FILETYPE                            *
             13244    2            *                                                                         *
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:43   
             13246    2           ***************************************************************************/

     1501    13250
     1502    13251        /*I* NAME: WRTR_$FILETYPE
     1503    13252            PARAMETERS:
     1504    13253                None.
     1505    13254            INPUT:
     1506    13255                The new value in VD_$FILETYPE.
     1507    13256            OUTPUT:
     1508    13257                Modifies the currently open file, if any, to have the new filetpye.
     1509    13258        */
     1510    13259
     1511    13260    1   WRTR_$FILETYPE: PROC ALTRET;
     1512    13261
     1513    13262        %FPT_CLOSE (FPTN=MOD_FILE, CHGATT=YES, DISP=SAVE);
     1514    13304        %F$DCB;
     1515    13361
     1516    13362
     1517    13363    3   MOD_TYPE: DO; /* Put it all in a DO group so that EXIT gets us out */
     1518    13364    3              IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN EXIT;
     1519    13365    3              IF VD_CURRENT_WINDOW$ -> VD$FILE_NODE.DESC.SPEC.V$ ->
     1520    13366    3                VD$WINDOW_SPEC.OPERAND.STREAM$ = ADDR(NIL) THEN EXIT;
     1521    13367    3              MOD_FILE.V.DCB# = VD_CURRENT_WINDOW$ -> VD$FILE_NODE.DESC.SPEC.V$ ->
     1522    13368    3                VD$WINDOW_SPEC.OPERAND.STREAM$ -> VD$STREAM.PORT$ -> VD$PORT.DCB#;
     1523    13369    3              IF MOD_FILE.V.DCB# = 0 THEN EXIT;
     1524    13370    3              IF NOT DCBADDR(MOD_FILE.V.DCB#) -> F$DCB.FCD# OR
     1525    13371    3                NOT DCBADDR(MOD_FILE.V.DCB#) -> F$DCB.FFLG.REATTR# THEN EXIT;
     1526    13372    3              MOD_FILE.V.TYPE# = VD_$FILETYPE.BYTES;
     1527    13373    4              CALL M$CLOSE (MOD_FILE) WHENALTRETURN DO;
     1528    13374    4   MONERR:       CALL VDG$MONERR;
     1529    13375    4                 END;
     1530    13376    3              CALL M$REW (MOD_FILE) ALTRET(MONERR); /* REopen the DCB */
     1531    13377    3              END;
     1532    13378    2           RETURN;
     1533    13379    2   END;
     1534    13380        %BOX (TITLE=WRTR_MAGIC, PAGE=YES);
             13388    2
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:44   
             13392    2   /***************************************************************************
             13394    2    *                                                                         *
             13398    2            *                                 WRTR_MAGIC                              *
             13400    2            *                                                                         *
             13402    2           ***************************************************************************/

     1535    13406
     1536    13407        /*I* NAME: WRTR_MAGIC
     1537    13408            PARAMETERS:
     1538    13409                GLOBAL must be a VD$NUMBER containing a %CLS_BOOLEAN value.
     1539    13410            INPUT:
     1540    13411                DATA may be either a VD$NUMBER or a VD$BUFFER.
     1541    13412                VD_$$INCANTATION must be a VD$NUMBER containing a %CLS_BOOLEAN value.
     1542    13413            OUTPUT:
     1543    13414                BUFFER_TO_FREE$ may point to a VD$BUFFER chain to free IF AND ONLY IF
     1544    13415                    we return normally from VDP$WNAMES.
     1545    13416            DESCRIPTION:
     1546    13417                If DATA is a VD$BUFFER, the buffer must contain an ASCII
     1547    13418                    decimal number:
     1548    13419                    o Convert the number to binary and build a VD$NUMBER for it.
     1549    13420                    o Flag the old VD$BUFFER to be freed; it's not needed anymore.
     1550    13421                VD_$$INCANTATION must be TRUE to allow this write.
     1551    13422                If it is, update GLOBAL with DATA.
     1552    13423        */
     1553    13424
     1554    13425    1   WRTR_MAGIC: PROC (GLOBAL) ALTRET;
     1555    13426
     1556    13427        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
     1557    13472
     1558    13473
     1559    13474    2           IF VD_$$INCANTATION.V# <= 0
     1560    13475    3             AND NOT VD_ACCESSOR_PRIV.ACCESS (%NAC_WRITE) THEN DO;
     1561    13476    3              CALL VDG$ERRMSG (%E$CANT_ACCESS_NODE, NODE$KEY);
     1562    13477    3              ALTRETURN;
     1563    13478    3              END;
     1564    13479
     1565    13480    2           CALL WRTR_BOOLEAN (GLOBAL)
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:45   
     1566    13481    3           WHENALTRETURN DO; ALTRETURN; END;
     1567    13482
     1568    13483    2   END WRTR_MAGIC;
     1569    13484
     1570    13485        %BOX (TITLE=WRTR_$$INCANTATION, PAGE=YES);
             13493    2
             13497    2   /***************************************************************************
             13499    2    *                                                                         *
             13503    2            *                             WRTR_$$INCANTATION                          *
             13505    2            *                                                                         *
             13507    2           ***************************************************************************/

     1571    13511
     1572    13512        /*I* NAME: WRTR_$$INCANTATION
     1573    13513            PARAMETERS:
     1574    13514                GLOBAL must be the VD$NUMBER for WRTR_$$INCANTATION.
     1575    13515            INPUT:
     1576    13516                DATA must be a VD$BUFFER.
     1577    13517            DESCRIPTION:
     1578    13518                If DATA contains the required incantation, then set
     1579    13519                GLOBAL true; else set GLOBAL false.
     1580    13520        */
     1581    13521
     1582    13522    1   WRTR_$$INCANTATION: PROC (GLOBAL) ALTRET;
     1583    13523
     1584    13524        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
     1585    13569
     1586    13570
     1587    13571    3           IF DATA.BYTES = %CHR_INCANTATION THEN DO;
     1588    13572    3              GLOBAL.V# = %BITBIN(TRUE);
     1589    13573    3              CALL VDG$INFOMSG (%E$INFO_FOR_ALICE);
     1590    13574    3              CALL VDG$EREPORT_ERROR;
     1591    13575    3              END;
     1592    13576    2           ELSE
     1593    13577    2              GLOBAL.V# = %BITBIN(FALSE);
     1594    13578
     1595    13579    2           CALL VDG$OFREE (GLOBAL.FLINK$->VD$BUFFER)
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:46   
     1596    13580    3           WHENALTRETURN DO; ALTRETURN; END;
     1597    13581    2           GLOBAL.FLINK$ = ADDR(NIL);
     1598    13582    2           RETURN;
     1599    13583
     1600    13584    2   END WRTR_$$INCANTATION;
     1601    13585
     1602    13586    1   END VDA$WNAMES;
     1603    13587        %EOD;

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:47   
--  Include file information  --

   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$WNAMES.

   Procedure VDA$WNAMES requires 1801 words for executable code.
   Procedure VDA$WNAMES requires 88 words of local(AUTO) storage.

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:48   

 Object Unit name= VDA$WNAMES                                 File name= VDA$WRITERS.:VDA5TOU
 UTS= JUL 04 '97 11:09:20.92 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    30     36  VDA$WNAMES
    2  RoData even  UTS     23     27  VDA$WNAMES
    3   Proc  even  none  1801   3411  VDA$WNAMES
    4  RoData even  none    96    140  VDA$WNAMES

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        4  VDA$WNAMES
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:49   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       4 VDA$PDELETE
 yes     yes           Std       3 VDP$NEQUALS
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       4 VDG$ERRMSG
 yes     yes           Std       2 VDG$OCOPY_LOCATION
 yes     yes           Std       3 VDP$NKEYIN
 yes     yes           Std       3 VDP$NKEYIN_DELETE
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       4 VDA$PWRITE
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       2 X$DEC_CONVERT
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       2 VDP$WCHANGE
 yes     yes           Std       4 VDG$WARNMSG
         yes           Std       1 VDG$EREPORT_ERROR
 yes     yes           Std       5 VDG$EXEC_CONTROL
 yes     yes           Std       0 VDG$MONERR
 yes     yes           Std       4 VDG$INFOMSG
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
                       nStd      0 X66_INDEX
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:50   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 VD_CURRENT_WINDOW$
     VD_COMMAND_WINDOW$                    VD_IBEX_WINDOW                        VD_EDITING_HEIGHT
     VD_OLD_$SCREEN                        VD_SCREEN_HEIGHT                      VD_SCREEN_WIDTH
     VD_ACCESSOR_PRIV                      VD_XLATE_CHAR_CLASS                   VD_CMD_OBJECTS$
     VD_PCB                                VD_$$INCANTATION                      VD_$$MON_ACC
     VD_$$MON_EVAL                         VD_$$MON_PRES                         VD_$$QUAC
     VD_$AUTOTAB                           VD_$BY                                VD_$CASE
     VD_$COMMAND                           VD_$COMMENT                           VD_$COMPONENT
     VD_$CONTEXT                           VD_$CONTROL                           VD_$DEFAULT_DESTINATION
     VD_$DEFAULT_SOURCE                    VD_$DIRECTION                         VD_$EOF_MARK
     VD_$EXIST                             VD_$EZ_APPEND                         VD_$FILETYPE
     VD_$HSALL                             VD_$HSCROLL                           VD_$HSCROLL_MARGIN
     VD_$INITIALIZE                        VD_$INSERT                            VD_$INTRO_1
     VD_$INTRO_2                           VD_$KEY_GENERATION                    VD_$MATCHES
     VD_$MATCH_LIMIT                       VD_$MAX_COMMAND                       VD_$MAX_RECORD
     VD_$MIN_COMMAND                       VD_$MIN_RECORD                        VD_$ONESPACEEDIT
     VD_$PAD                               VD_$POINT                             VD_$PROTECT
     VD_$RECORDS_DELETED                   VD_$RECORDS_INSERTED                  VD_$RECORDWRAP
     VD_$REKEY                             VD_$RESTORE                           VD_$SCREEN
     VD_$SCROLL                            VD_$SEARCH                            VD_$SITES
     VD_$SKIP                              VD_$STRIP_BLANKS                      VD_$TEXTEDIT
     VD_$VSCROLL                           VD_$VSCROLL_MARGIN                    VD_$WI_BORDER
     VD_$WI_PERCENT                        VD_$WORDWRAP                          VD_$WS_STORAGE
     VD_$BY_KEY                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:51   


        1        1        /*M* VDA$WRITERS - Writer-routines for predefined file nodes */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDA$WRITERS
       12       12            PURPOSE:  Routines to write the nodes of predefined files.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines, which are called when
       15       15                a node at a specific level of a specific predefined file is updated.
       16       16                The Spec-type (%SPT_) of the node determines which of the following
       17       17                routines is called.
       18       18
       19       19                The routines are called after any existing version of the node
       20       20                (that is, same keys) has been read into the Port; if the
       21       21                node doesn't exist yet, the Port has been positioned to
       22       22                the requested location (PORT.LEVEL.SPEC and .DATA are %CLEAR/NIL).
       23       23                Based on the parameters passed, these routines determine if they
       24       24                are to insert, replace, or delete the node; they must do the
       25       25                equivalent of a VDA$PWRITE (insert or replace) or a VDA$PDELETE.
       26       26                    Note on deletion:  Certain predefined files must have
       27       27                    Spec components for each node.  The interface to the
       28       28                    VDA$Wxxx routines allows the caller to specify
       29       29                    erasure of a component (replacing it with a zero-length
       30       30                    string), but doesn't explicitly specify node deletion.
       31       31                    However, for these predefined files, erasure of the
       32       32                    Spec component implies deletion of the node.
       33       33                Before calling these routines, it should already be determined
       34       34                that the user has write-access to the file, and has
       35       35                write- or delete-access to the specific node.
       36       36
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:52   
       37       37                VDA$WNAMES
       38       38                If the Spec component specifies special handling of the
       39       39                Data component, then perform the appropriate routine; this
       40       40                routine will usually verify that the new value is legal
       41       41                for the name, and/or store the new value in a global
       42       42                internal cell.
       43       43                Also handles "windowable" names, that is, names to which different
       44       44                values can be assigned for different windows (eg, $HSCROLL_MARGIN
       45       45                and all Keyins).
       46       46                If we're erasing a Data component, force it to the default
       47       47                value for the name.
       48       48
       49       49                VDA$WWINDOWS
       50       50                If we're inserting a node, call the Presenter to
       51       51                    create the new window specified by the VD$WINDOW_SPEC.
       52       52                If we're replacing a node, call the Presenter to
       53       53                    change the window's specs (size, placement, etc.).
       54       54                If we're erasing the Spec component, this implies deletion
       55       55                    of the node.  Call the Presenter to remove the window
       56       56                    and adjust the other windows accordingly.
       57       57        */
       58       58
       59       59        /*D* NAME: VDA$WNAMES
       60       60            PARAMETERS:
       61       61                PORT - VD$PORT into which a node from a predefined file has been
       62       62                    read.  PORT.LEVEL.SPEC (%LVL_LOWER) and .DATA$ (%LVL_LOWER)
       63       63                    contain copies of the Spec and Data components of the old version
       64       64                    of the node, if any.
       65       65                    The user must have write-access to the file.
       66       66                    The record key at %LVL_LOWER in PORT.CURRENT must contain the name
       67       67                    we're writing to.
       68       68                SPEC - Optional VD$SPEC specifying the new Spec component
       69       69                    for the node.  If you don't want to affect the
       70       70                    Spec component, omit this parameter; to erase the
       71       71                    node's current Spec component, SPEC should specify a
       72       72                    0-length string.  For the Names files, erasing the Spec component
       73       73                    implies that the entire node is to be deleted.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:53   
       74       74                    If passed, SPEC must point to a VD$NAME_SPEC.
       75       75                    Note - Passing a VD$SPEC which is BASED on a pointer
       76       76                        which is currently NIL acts as tho you omitted
       77       77                        the parameter -- the Spec component isn't affected.
       78       78                    Note - Any dynamic storage pointed-to by SPEC will no
       79       79                        longer be owned by the caller after this call!!
       80       80                        Give me a Spec and I keep it, not you.  See SPEC
       81       81                        under OUTPUT comments.
       82       82                DATA - Optional VD$BUFFER containing the new Data component
       83       83                    for the node.  If you don't want to affect the
       84       84                    Data component, omit this parameter; to erase the
       85       85                    node's current Data component, DATA should specify a
       86       86                    0-length string (VD$BUFFER.LENGTH# = 0).
       87       87                    For the Names files, erasing the Data component will force
       88       88                        a user name to revert to a zero or "clear" value.
       89       89                        The predefined names can't be erased, and since the
       90       90                        user is denied deletion-access to them, no one will
       91       91                        try to erase them.
       92       92                    Chained VD$BUFFERs can be used to write multi-element Data
       93       93                        components (ie, array values):
       94       94                        If you write a single-element Data component to a name which
       95       95                            currently has a multi-element Data, then you effectively
       96       96                            eliminate the array, collapsing it down to one element.
       97       97                        If you want to replace just one or a few elements in a
       98       98                            multi-element Data component, you have to write the entire
       99       99                            new set of elements.
      100      100                        For now, any name to which you write a multi-element Data
      101      101                            component must have the .WINDOWABLE bit set in the
      102      102                            VD$NAME_SPEC for the name.
      103      103        *N**N**N*           In future, there will probably also be an .ARRAYABLE flag,
      104      104        *N**N**N*           where the only names which DON'T have the flag set are
      105      105        *N**N**N*           the non-windowable predefined names (all user-created names
      106      106        *N**N**N*           would have the flag set).
      107      107        *N**N**N*           .WINDOWABLE should only tell us to tell the Presenter when
      108      108        *N**N**N*           when the name's value changes; .ARRAYABLE should tell us
      109      109        *N**N**N*           if the name can accept multi-element values or not.
      110      110                    Note - Passing a VD$BUFFER which is BASED on a pointer
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:54   
      111      111                        which is currently NIL acts as tho you omitted
      112      112                        the parameter -- the Data component isn't affected.
      113      113                    Note - DATA must reside in either dynamic storage, static,
      114      114                        or constant -- never the caller's auto storage!!
      115      115                        If DATA resides in dynamic (as indicated by having a
      116      116                        non-0 .OBJECT.SIZE#), it will no longer be owned
      117      117                        by the caller after this call.
      118      118                        Give me a Data buffer and I keep it, not you.  See
      119      119                        DATA under OUTPUT comments.
      120      120                NODE_EXISTS - A BIT(1) ALIGNED flag.  If set, then the Port contains
      121      121                    an old node which is being replaced by SPEC and/or DATA.
      122      122                    If NODE_EXISTS = %FALSE, then SPEC and DATA represent
      123      123                    a node which is being inserted into the file.
      124      124            INPUT:
      125      125                VD_CURRENT_WINDOW$ points to a VD$FILE_NODE in the Windows file for
      126      126                    the current editing window.  VD_CURRENT_WINDOW$ will be NIL if
      127      127                    no windows have yet been opened.
      128      128                VD_COMMAND_WINDOW$ points to a VD$FILE_NODE in the Windows file for
      129      129                    the command window.  VD_COMMAND_WINDOW$ will be NIL if there is
      130      130                    no command window currently (not fully initialized yet).
      131      131                VD_SCREEN_HEIGHT and VD_SCREEN_WIDTH must contain the height (in
      132      132                    lines) and width (in columns) of the terminal screen which 6Edit
      133      133                    using.
      134      134            OUTPUT:
      135      135                Upon normal return:
      136      136                    SPEC will be %CLEAR; the Port now owns the SPEC and any
      137      137                        dynamic storage pointed-to by SPEC.V$.
      138      138                    DATA -- if it's dynamic -- will no longer be owned by the
      139      139                        caller.  The Port owns it now.  The caller should
      140      140                        spoil it's pointer to the DATA VD$BUFFER.
      141      141                Upon non-fatal altreturns, SPEC and DATA will be untouched.
      142      142                    The caller will still own any dynamic storage associated
      143      143                    with them.
      144      144                PORT.LEVEL.SPEC (n) and/or .DATA (n) will contain/point-to SPEC/DATA
      145      145                    (unchanged if SPEC/DATA omitted).  In the Port only, a special
      146      146                    representation is used for components which have been "cleared"
      147      147                    (contents erased):  PORT.LEVEL.SPEC/.DATA will refer to a 0-length
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:55   
      148      148                    local string or a 0-length (but allocated) buffer, as appropriate.
      149      149                    This special representation is used so VDA$PFLUSH will know to
      150      150                    actively erase a component, rather than ignore it, since if PFLUSH
      151      151                    sees %CLEAR/NIL in the port it will just ignore the component.
      152      152                For internal files, the VD$FILE_NODE for the node will have new copies
      153      153                    of the components changed by the write.  If components have been
      154      154                    "cleared", they will be %CLEAR/NIL in the VD$FILE_NODE.
      155      155            DESCRIPTION:
      156      156                It's illegal to call with no SPEC, DATA passed, and NODE_EXISTS =
      157      157                    %FALSE:  we don't know how to build the VD$NAME_SPEC for the new
      158      158                    node.
      159      159                If DATA was passed, look at the node's (new) Spec:  if it specifies a
      160      160                    WRITER, then call the writer.  The writer will verify the new (or
      161      161                    supply a default) Data component and update any global internal
      162      162                    value for the name.  If the writer doesn't like the new value,
      163      163                    altreturn.
      164      164                If SPEC passed and specifies erasure, call VDA$PDELETE.  If the node
      165      165                    exists and its old data type was KEYIN, tell the Presenter to
      166      166                    delete the key binding in the FEP.
      167      167                Else call VDA$PWRITE.  If the name is "windowable", tell the
      168      168                    Presenter to update the setting for the name in the FEP.
      169      169        */
      170      170
      171      171        VDA$WNAMES: PROC (PORT, SPEC, DATA, NODE_EXISTS) ALTRET;

    171  3 000000   000000 700200 xent  VDA$WNAMES   TSX0  ! X66_AUTO_4
         3 000001   000130 000004                    ZERO    88,4

      172      172
      173      173        %INCLUDE VD_MACROS_M;
      174     2388        %INCLUDE VD_PERR_C;
      175     2536        %INCLUDE XU_MACRO_C;
      176     5630        %INCLUDE CP_6;
      177     5711        %INCLUDE CP_6_SUBS;
      178     6251
      179     6252
      180     6253        %VD$PORT (NAME=PORT, STCLASS=PARAM);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:56   
      181     6351        %VD$SPEC (NAME=SPEC, STCLASS=PARAM);
      182     6365        %VD$BUFFER (NAME=DATA, STCLASS=PARAM);
      183     6423    1   DCL NODE_EXISTS BIT(1) ALIGNED;
      184     6424
      185     6425
      186     6426    1   DCL VDA$PWRITE          ENTRY (4) ALTRET;
      187     6427    1   DCL VDA$PDELETE         ENTRY (4) ALTRET;
      188     6428    1   DCL VDP$NEQUALS         ENTRY (3) ALTRET;
      189     6429    1   DCL VDP$NKEYIN          ENTRY (3) ALTRET;
      190     6430    1   DCL VDP$NKEYIN_DELETE   ENTRY (3) ALTRET;
      191     6431    1   DCL VDG$EXEC_CONTROL    ENTRY (5) ALTRET;
      192     6432    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      193     6433    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      194     6434    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      195     6435    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
      196     6436    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
      197     6437    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
      198     6438    1   DCL VDG$INFOMSG         ENTRY (4) ALTRET;
      199     6439    1   DCL VDG$MONERR          ENTRY ALTRET;
      200     6440    1   DCL VDG$WARNMSG         ENTRY (4) ALTRET;
      201     6441    1   DCL VDP$WCHANGE         ENTRY (2) ALTRET;
      202     6442    1   DCL VDG$EREPORT_ERROR   ENTRY (1);
      203     6443    1   DCL VDG$ESCREECH        ENTRY (3);
      204     6444    1   DCL X$DEC_CONVERT       ENTRY (2) ALTRET;
      205     6445
      206     6446
      207     6447        %VD_6E (STCLASS=SYMREF);
      208     6483    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
      209     6484    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
      210     6485    1   DCL VD_IBEX_WINDOW SBIN SYMREF;
      211     6486    1   DCL VD_EDITING_HEIGHT SBIN SYMREF;
      212     6487    1   DCL VD_OLD_$SCREEN SBIN SYMREF;
      213     6488    1   DCL VD_SCREEN_HEIGHT UBIN SYMREF;
      214     6489    1   DCL VD_SCREEN_WIDTH UBIN SYMREF;
      215     6490    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
      216     6491            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, ALIGNMENT=UNAL, STCLASS=STATIC);
      217     6505    1   DCL 1 VD_XLATE_CHAR_CLASS ALIGNED SYMREF,
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:57   
      218     6506    1         2 CCL (0:511) UBIN BYTE CALIGNED;
      219     6507    1   DCL 1 VD_STATIC_TEMP ALIGNED SYMREF,
      220     6508    1         2 FLAG (0:511) UBIN BYTE CALIGNED;
      221     6509    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
      222     6510        %P_PCB (NAME=VD_PCB, STCLASS=SYMREF);
      223     6709
      224     6710
      225     6711        /* Internal forms of predefined names */
      226     6712        %VD$NUMBER (NAME=VD_$$INCANTATION, STCLASS=SYMREF);
      227     6757        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
      228     6802        %VD$NUMBER (NAME=VD_$$MON_EVAL, STCLASS=SYMREF);
      229     6847        %VD$NUMBER (NAME=VD_$$MON_PRES, STCLASS=SYMREF);
      230     6892        %VD$NUMBER (NAME=VD_$$QUAC, STCLASS=SYMREF);
      231     6937        %VD$NUMBER (NAME=VD_$AUTOTAB, STCLASS=SYMREF);
      232     6982        %VD$NUMBER (NAME=VD_$BY, STCLASS=SYMREF);
      233     7027        %VD$NUMBER (NAME=VD_$CASE, STCLASS=SYMREF);
      234     7072        %VD$NUMBER (NAME=VD_$COMMAND, STCLASS=SYMREF);
      235     7117        %VD_BUFFER (NAME=VD_$COMMENT, STCLASS=SYMREF, MXNB=%MXNB_$COMMENT);
      236     7177        %VD$NUMBER (NAME=VD_$COMPONENT, STCLASS=SYMREF);
      237     7222        %VD_BUFFER (NAME=VD_$CONTEXT, STCLASS=SYMREF, MXNB=%MXNB_FID);
      238     7282        %VD_BUFFER (NAME=VD_$CONTROL, STCLASS=SYMREF, MXNB=%MXNB_$CONTROL);
      239     7342        %VD_BUFFER (NAME=VD_$DEFAULT_DESTINATION, STCLASS=SYMREF,
      240     7343            MXNB=%MXNB_DFLT_BLKEXPR);
      241     7403        %VD_BUFFER (NAME=VD_$DEFAULT_SOURCE, STCLASS=SYMREF,
      242     7404            MXNB=%MXNB_DFLT_BLKEXPR);
      243     7464        %VD$NUMBER (NAME=VD_$DIRECTION, STCLASS=SYMREF);
      244     7509        %VD_BUFFER (NAME=VD_$EOF_MARK, STCLASS=SYMREF, MXNB=%MXNB_$EOF_MARK);
      245     7569        %VD$NUMBER (NAME=VD_$EXIST, STCLASS=SYMREF);
      246     7614        %VD$NUMBER (NAME=VD_$EZ_APPEND, STCLASS=SYMREF);
      247     7659        %VD_BUFFER (NAME=VD_$FILETYPE, STCLASS=SYMREF, MXNB=2);
      248     7719        %VD$NUMBER (NAME=VD_$HSALL, STCLASS=SYMREF);
      249     7764        %VD$NUMBER (NAME=VD_$HSCROLL, STCLASS=SYMREF);
      250     7809        %VD$NUMBER (NAME=VD_$HSCROLL_MARGIN, STCLASS=SYMREF);
      251     7854        %VD$BUFFER (NAME=VD_$INITIALIZE, STCLASS=SYMREF);
      252     7912        %VD$NUMBER (NAME=VD_$INSERT, STCLASS=SYMREF);
      253     7957        %VD_BUFFER (NAME=VD_$INTRO_1, STCLASS=SYMREF, MXNB=%MXNB_$INTRO);
      254     8017        %VD_BUFFER (NAME=VD_$INTRO_2, STCLASS=SYMREF, MXNB=%MXNB_$INTRO);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:58   
      255     8077        %VD$NUMBER (NAME=VD_$KEY_GENERATION, STCLASS=SYMREF);
      256     8122        %VD$NUMBER (NAME=VD_$MATCHES, STCLASS=SYMREF);
      257     8167        %VD$NUMBER (NAME=VD_$MATCH_LIMIT, STCLASS=SYMREF);
      258     8212        %VD$NUMBER (NAME=VD_$MAX_COMMAND, STCLASS=SYMREF);
      259     8257        %VD$NUMBER (NAME=VD_$MAX_RECORD, STCLASS=SYMREF);
      260     8302        %VD$NUMBER (NAME=VD_$MIN_COMMAND, STCLASS=SYMREF);
      261     8347        %VD$NUMBER (NAME=VD_$MIN_RECORD, STCLASS=SYMREF);
      262     8392        %VD_NUMBER (NAME=VD_$ONESPACEEDIT, STCLASS=SYMREF);
      263     8439        %VD_BUFFER (NAME=VD_$PAD, STCLASS=SYMREF, MXNB=%MXNB_$PAD);
      264     8499        %VD$NUMBER (NAME=VD_$POINT, STCLASS=SYMREF);
      265     8544        %VD$NUMBER (NAME=VD_$PROTECT, STCLASS=SYMREF);
      266     8589        %VD$NUMBER (NAME=VD_$RECORDS_DELETED, STCLASS=SYMREF);
      267     8634        %VD$NUMBER (NAME=VD_$RECORDS_INSERTED, STCLASS=SYMREF);
      268     8679        %VD$NUMBER (NAME=VD_$RECORDWRAP, STCLASS=SYMREF);
      269     8724        %VD$NUMBER (NAME=VD_$REKEY, STCLASS=SYMREF);
      270     8769        %VD_BUFFER (NAME=VD_$RESTORE, STCLASS=SYMREF, MXNB=%MXNB_$RESTORE);
      271     8829        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
      272     8874        %VD$NUMBER (NAME=VD_$SCROLL, STCLASS=SYMREF);
      273     8919        %VD$NUMBER (NAME=VD_$SEARCH, STCLASS=SYMREF);
      274     8964        %VD$NUMBER (NAME=VD_$SITES, STCLASS=SYMREF);
      275     9009        %VD$NUMBER (NAME=VD_$SKIP, STCLASS=SYMREF);
      276     9054        %VD$NUMBER (NAME=VD_$STRIP_BLANKS, STCLASS=SYMREF);
      277     9099        %VD$POINTER (NAME=VD_$STRUCTURE, STCLASS=SYMREF);
      278     9144        %VD$NUMBER (NAME=VD_$TEXTEDIT, STCLASS=SYMREF);
      279     9189        %VD$NUMBER (NAME=VD_$VSCROLL, STCLASS=SYMREF);
      280     9234        %VD$NUMBER (NAME=VD_$VSCROLL_MARGIN, STCLASS=SYMREF);
      281     9279        %VD_BUFFER (NAME=VD_$WI_BORDER, STCLASS=SYMREF, MXNB=1);
      282     9339        %VD$NUMBER (NAME=VD_$WI_PERCENT, STCLASS=SYMREF);
      283     9384        %VD$NUMBER (NAME=VD_$WORDWRAP, STCLASS=SYMREF);
      284     9429        %VD_BUFFER (NAME=VD_$WS_STORAGE, STCLASS=SYMREF, MXNB=1);
      285     9489
      286     9490
      287     9491
      288     9492    1   DCL DELETE_NODE BIT(1) ALIGNED;
      289     9493    1   DCL BUFFER_TO_FREE$ PTR;
      290     9494    1   DCL REF_SPEC$ PTR;
      291     9495    1   DCL NODE_KEY$ PTR;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:59   
      292     9496    1   DCL DATA$ PTR;
      293     9497        %VD_TEXTC (NAME=DATA_TEXTC, STCLASS=AUTO, MXNB=11);
      294     9638    1   DCL INDX SBIN;
      295     9639    1   DCL ALT_INDX SBIN;
      296     9640    1   DCL CCL SBIN;
      297     9641    1   DCL CAND_CHAR CHAR(1);
      298     9642        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);
      299     9711    1   DCL COUNT SBIN;
      300     9712    1   DCL VD_ERR$ PTR;
      301     9713    1   DCL VD_ERR_SUBST$ PTR;
      302     9714    1   DCL ERRCODE SBIN;
      303     9715
      304     9716
      305     9717        %VD$NAME_SPEC (NAME=REF$SPEC, STCLASS="BASED(REF_SPEC$)");
      306     9765        %VD$TEXTC (NAME=NODE$KEY, STCLASS="BASED(NODE_KEY$)");
      307     9788        %VD$BUFFER (NAME=DATA$BUFFER, STCLASS="BASED(DATA$)");
      308     9846        %VD$NUMBER (NAME=DATA$NUMBER, STCLASS="BASED(DATA$)");
      309     9891        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      310     9944        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(VD_ERR_SUBST$)");
      311     9989        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(VD_ERR_SUBST$)");
      312    10034        %VD$TEXTC;
      313    10057        %VD$TEXTC_REMOTE;
      314    10118        %VD$STRING_HEADER;
      315    10154        %VD$BUFFER;
      316    10212        %VD$WINDOW_SPEC;
      317    10278        %VD$PORT;
      318    10376        %VD$FILE_NODE;
      319    10469        %VD$STREAM;
      320    10575
      321    10576
      322    10577
      323    10578                /*
      324    10579                *   Check for errors, and point REF_SPEC$ at the Spec
      325    10580                *       component which we'll use for info about the name.
      326    10581                */
      327    10582
      328    10583    1           DELETE_NODE = %FALSE;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:60   

  10583  3 000002   200007 450100                    STZ     DELETE_NODE,,AUTO

      329    10584    1           BUFFER_TO_FREE$ = ADDR(NIL);

  10584  3 000003   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000004   200010 756100                    STQ     BUFFER_TO_FREE$,,AUTO

      330    10585    1           DATA$ = ADDR(DATA);

  10585  3 000005   200005 236100                    LDQ     @DATA,,AUTO
         3 000006   200013 756100                    STQ     DATA$,,AUTO

      331    10586
      332    10587    2           IF ADDR(SPEC) = ADDR(NIL) THEN DO;

  10587  3 000007   200004 236100                    LDQ     @SPEC,,AUTO
         3 000010   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000011   000024 601000 3                  TNZ     s:10593

      333    10588    2              IF NOT NODE_EXISTS THEN

  10588  3 000012   200006 470500                    LDP0    @NODE_EXISTS,,AUTO
         3 000013   000000 234100                    SZN     0,,PR0
         3 000014   000020 604000 3                  TMI     s:10590

      334    10589    2                 CALL VDG$ESCREECH;

  10589  3 000015   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000016   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000017   000000 011000                    NOP     0

      335    10590    2              REF_SPEC$ = PORT.LEVEL.SPEC.V$ (%LVL_LOWER);

  10590  3 000020   200003 470500                    LDP0    @PORT,,AUTO
         3 000021   000035 236100                    LDQ     29,,PR0
         3 000022   200011 756100                    STQ     REF_SPEC$,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:61   

      336    10591    2              END;

  10591  3 000023   000064 710000 3                  TRA     s:10618

      337    10592    2           ELSE DO;

      338    10593    3              IF SPEC.REP# ~= %REP_REMOTE THEN DO;

  10593  3 000024   200004 470500                    LDP0    @SPEC,,AUTO
         3 000025   000000 720100                    LXL0    0,,PR0
         3 000026   000002 100003                    CMPX0   2,DU
         3 000027   000052 600000 3                  TZE     s:10602

      339    10594    3                 IF ADDR(SPEC.V$)->VD$TEXTC.LENGTH# ~= 0 THEN

  10594  3 000030   000001 236100                    LDQ     1,,PR0
         3 000031   777000 316003                    CANQ    -512,DU
         3 000032   000036 600000 3                  TZE     s:10596

      340    10595    3                    CALL VDG$ESCREECH;

  10595  3 000033   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000034   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000035   000000 011000                    NOP     0

      341    10596    3                 DELETE_NODE = %TRUE;

  10596  3 000036   400000 236003                    LDQ     -131072,DU
         3 000037   200007 756100                    STQ     DELETE_NODE,,AUTO

      342    10597    3                 IF NOT NODE_EXISTS THEN

  10597  3 000040   200006 470500                    LDP0    @NODE_EXISTS,,AUTO
         3 000041   000000 234100                    SZN     0,,PR0
         3 000042   000046 604000 3                  TMI     s:10599

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:62   
      343    10598    3                    CALL VDG$ESCREECH;

  10598  3 000043   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000044   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000045   000000 011000                    NOP     0

      344    10599    3                 REF_SPEC$ = PORT.LEVEL.SPEC.V$ (%LVL_LOWER);

  10599  3 000046   200003 470500                    LDP0    @PORT,,AUTO
         3 000047   000035 236100                    LDQ     29,,PR0
         3 000050   200011 756100                    STQ     REF_SPEC$,,AUTO

      345    10600    3                 END;

  10600  3 000051   000064 710000 3                  TRA     s:10618

      346    10601    3              ELSE DO;

      347    10602    3                 IF SPEC.TYPE# ~= %SPT_NAME_SPEC THEN

  10602  3 000052   000000 221100                    LDX1    0,,PR0
         3 000053   000003 101003                    CMPX1   3,DU
         3 000054   000061 600000 3                  TZE     s:10604

      348    10603    3                    CALL VDG$ESCREECH (SPEC.TYPE#);

  10603  3 000055   200004 630500                    EPPR0   @SPEC,,AUTO
         3 000056   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000057   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000060   000000 011000                    NOP     0

      349    10604    3                 REF_SPEC$ = SPEC.V$;

  10604  3 000061   200004 470500                    LDP0    @SPEC,,AUTO
         3 000062   000001 236100                    LDQ     1,,PR0
         3 000063   200011 756100                    STQ     REF_SPEC$,,AUTO

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:63   
      350    10605    3                 END;

      351    10606    2              END;

      352    10607
      353    10608                /* Get the name's Key component */
      354    10609
      355    10610                %GETKEY (KEY=PORT.CURRENT.KEY, INDX="%(LVL_LOWER-1)",
      356    10611                PTR=NODE_KEY$);

  10618  3 000064   200003 470500                    LDP0    @PORT,,AUTO
         3 000065   000012 720100                    LXL0    10,,PR0
         3 000066   000002 100003                    CMPX0   2,DU
         3 000067   000074 601000 3                  TNZ     s:10618+8

  10618  3 000070   000013 471500                    LDP1    11,,PR0
         3 000071   100002 633500                    EPPR3   2,,PR1
         3 000072   200012 453500                    STP3    NODE_KEY$,,AUTO
         3 000073   000077 710000 3                  TRA     s:10627

  10618  3 000074   200003 236100                    LDQ     @PORT,,AUTO
         3 000075   000013 036003                    ADLQ    11,DU
         3 000076   200012 756100                    STQ     NODE_KEY$,,AUTO

      357    10621
      358    10622
      359    10623                /*
      360    10624                *   If writing DATA, call the name's writer, if there is one.
      361    10625                */
      362    10626
      363    10627    1           IF DATA$ ~= ADDR(NIL) AND REF$SPEC.WRITER# ~= 0 THEN

  10627  3 000077   200013 236100                    LDQ     DATA$,,AUTO
         3 000100   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000101   000651 600000 3                  TZE     s:10822
         3 000102   200011 471500                    LDP1    REF_SPEC$,,AUTO
         3 000103   100006 721100                    LXL1    6,,PR1
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:64   
         3 000104   000651 600000 3                  TZE     s:10822

      364    10628    2   CALL_DATA_WRITER: DO;

  10628  3 000105                       CALL_DATA_W* null
      365    10629    2              IF REF$SPEC.LEGAL_DATA_TYPE# ~= 0

  10629  3 000105   100003 222100                    LDX2    3,,PR1
         3 000106   000112 600000 3                  TZE     s:10633
         3 000107   100002 723100                    LXL3    2,,PR1
         3 000110   100003 103100                    CMPX3   3,,PR1
         3 000111   001027 601000 3                  TNZ     ILL_TYPE_FOR_NAME_FAILURE

      366    10630    2                AND REF$SPEC.DATA_TYPE# ~= REF$SPEC.LEGAL_DATA_TYPE# THEN
      367    10631    2                 GOTO ILL_TYPE_FOR_NAME_FAILURE;
      368    10632
      369    10633    3              DO CASE (REF$SPEC.WRITER#);

  10633  3 000112   000073 101003                    CMPX1   59,DU
         3 000113   000115 602011 3                  TNC     s:10633+3,X1
         3 000114   000642 710000 3                  TRA     s:10806
         3 000115   000642 710000 3                  TRA     s:10806
         3 000116   000210 710000 3                  TRA     s:10635
         3 000117   000215 710000 3                  TRA     s:10638
         3 000120   000222 710000 3                  TRA     s:10641
         3 000121   000227 710000 3                  TRA     s:10644
         3 000122   000234 710000 3                  TRA     s:10647
         3 000123   000241 710000 3                  TRA     s:10650
         3 000124   000246 710000 3                  TRA     s:10653
         3 000125   000253 710000 3                  TRA     s:10656
         3 000126   000260 710000 3                  TRA     s:10659
         3 000127   000265 710000 3                  TRA     s:10662
         3 000130   000272 710000 3                  TRA     s:10665
         3 000131   000277 710000 3                  TRA     s:10668
         3 000132   000304 710000 3                  TRA     s:10671
         3 000133   000311 710000 3                  TRA     s:10674
         3 000134   000316 710000 3                  TRA     s:10677
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:65   
         3 000135   000323 710000 3                  TRA     s:10680
         3 000136   000642 710000 3                  TRA     s:10806
         3 000137   000335 710000 3                  TRA     s:10686
         3 000140   000363 710000 3                  TRA     s:10699
         3 000141   000370 710000 3                  TRA     s:10702
         3 000142   000402 710000 3                  TRA     s:10708
         3 000143   000407 710000 3                  TRA     s:10711
         3 000144   000414 710000 3                  TRA     s:10714
         3 000145   000421 710000 3                  TRA     s:10717
         3 000146   000426 710000 3                  TRA     s:10720
         3 000147   000433 710000 3                  TRA     s:10723
         3 000150   000440 710000 3                  TRA     s:10726
         3 000151   000445 710000 3                  TRA     s:10729
         3 000152   000452 710000 3                  TRA     s:10732
         3 000153   000457 710000 3                  TRA     s:10735
         3 000154   000471 710000 3                  TRA     s:10741
         3 000155   000476 710000 3                  TRA     s:10744
         3 000156   000503 710000 3                  TRA     s:10747
         3 000157   000510 710000 3                  TRA     s:10750
         3 000160   000515 710000 3                  TRA     s:10753
         3 000161   000522 710000 3                  TRA     s:10756
         3 000162   000534 710000 3                  TRA     s:10762
         3 000163   000541 710000 3                  TRA     s:10765
         3 000164   000553 710000 3                  TRA     s:10771
         3 000165   000560 710000 3                  TRA     s:10774
         3 000166   000565 710000 3                  TRA     s:10777
         3 000167   000572 710000 3                  TRA     s:10780
         3 000170   000651 710000 3                  TRA     s:10822
         3 000171   000604 710000 3                  TRA     s:10788
         3 000172   000611 710000 3                  TRA     s:10791
         3 000173   000616 710000 3                  TRA     s:10794
         3 000174   000623 710000 3                  TRA     s:10797
         3 000175   000630 710000 3                  TRA     s:10800
         3 000176   000635 710000 3                  TRA     s:10803
         3 000177   000527 710000 3                  TRA     s:10759
         3 000200   000356 710000 3                  TRA     s:10696
         3 000201   000577 710000 3                  TRA     s:10785
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:66   
         3 000202   000342 710000 3                  TRA     s:10689
         3 000203   000546 710000 3                  TRA     s:10768
         3 000204   000330 710000 3                  TRA     s:10683
         3 000205   000347 710000 3                  TRA     s:10692
         3 000206   000375 710000 3                  TRA     s:10705
         3 000207   000464 710000 3                  TRA     s:10738

      370    10634    3               CASE (%WRTR_$$INCANTATION);

      371    10635    3                 CALL WRTR_$$INCANTATION (VD_$$INCANTATION)

  10635  3 000210   000000 236000 4                  LDQ     0
         3 000211   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000212   003346 701000 3                  TSX1    WRTR_$$INCANTATION
         3 000213   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000214   000651 710000 3                  TRA     s:10822

      372    10636    3                   ALTRET (DATA_WRITER_FAILED);
      373    10637    3               CASE (%WRTR_$$MON_ACC);

      374    10638    3                 CALL WRTR_MAGIC (VD_$$MON_ACC)

  10638  3 000215   000001 236000 4                  LDQ     1
         3 000216   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000217   003316 701000 3                  TSX1    WRTR_MAGIC
         3 000220   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000221   000651 710000 3                  TRA     s:10822

      375    10639    3                   ALTRET (DATA_WRITER_FAILED);
      376    10640    3               CASE (%WRTR_$$MON_EVAL);

      377    10641    3                 CALL WRTR_MAGIC (VD_$$MON_EVAL)

  10641  3 000222   000002 236000 4                  LDQ     2
         3 000223   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000224   003316 701000 3                  TSX1    WRTR_MAGIC
         3 000225   001061 702000 3                  TSX2    DATA_WRITER_FAILED
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:67   
         3 000226   000651 710000 3                  TRA     s:10822

      378    10642    3                   ALTRET (DATA_WRITER_FAILED);
      379    10643    3               CASE (%WRTR_$$MON_PRES);

      380    10644    3                 CALL WRTR_MAGIC (VD_$$MON_PRES)

  10644  3 000227   000003 236000 4                  LDQ     3
         3 000230   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000231   003316 701000 3                  TSX1    WRTR_MAGIC
         3 000232   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000233   000651 710000 3                  TRA     s:10822

      381    10645    3                   ALTRET (DATA_WRITER_FAILED);
      382    10646    3               CASE (%WRTR_$$QUAC);

      383    10647    3                 CALL WRTR_MAGIC (VD_$$QUAC)

  10647  3 000234   000004 236000 4                  LDQ     4
         3 000235   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000236   003316 701000 3                  TSX1    WRTR_MAGIC
         3 000237   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000240   000651 710000 3                  TRA     s:10822

      384    10648    3                   ALTRET (DATA_WRITER_FAILED);
      385    10649    3               CASE (%WRTR_$AUTOTAB);

      386    10650    3                 CALL WRTR_NUMBER (VD_$AUTOTAB)

  10650  3 000241   000005 236000 4                  LDQ     5
         3 000242   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000243   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000244   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000245   000651 710000 3                  TRA     s:10822

      387    10651    3                   ALTRET (DATA_WRITER_FAILED);
      388    10652    3               CASE (%WRTR_$BY);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:68   

      389    10653    3                 CALL WRTR_$BY (VD_$BY)

  10653  3 000246   000006 236000 4                  LDQ     6
         3 000247   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000250   003055 701000 3                  TSX1    WRTR_$BY
         3 000251   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000252   000651 710000 3                  TRA     s:10822

      390    10654    3                   ALTRET (DATA_WRITER_FAILED);
      391    10655    3               CASE (%WRTR_$CASE);

      392    10656    3                 CALL WRTR_BOOLEAN (VD_$CASE)

  10656  3 000253   000007 236000 4                  LDQ     7
         3 000254   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000255   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000256   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000257   000651 710000 3                  TRA     s:10822

      393    10657    3                   ALTRET (DATA_WRITER_FAILED);
      394    10658    3               CASE (%WRTR_$COMMAND);

      395    10659    3                 CALL WRTR_BOOLEAN (VD_$COMMAND)

  10659  3 000260   000010 236000 4                  LDQ     8
         3 000261   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000262   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000263   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000264   000651 710000 3                  TRA     s:10822

      396    10660    3                   ALTRET (DATA_WRITER_FAILED);
      397    10661    3               CASE (%WRTR_$COMMENT);

      398    10662    3                 CALL WRTR_$COMMENT (VD_$COMMENT)

  10662  3 000265   000011 236000 4                  LDQ     9
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:69   
         3 000266   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000267   002645 701000 3                  TSX1    WRTR_$COMMENT
         3 000270   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000271   000651 710000 3                  TRA     s:10822

      399    10663    3                   ALTRET (DATA_WRITER_FAILED);
      400    10664    3               CASE (%WRTR_$COMPONENT);

      401    10665    3                 CALL WRTR_NUMBER (VD_$COMPONENT)

  10665  3 000272   000012 236000 4                  LDQ     10
         3 000273   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000274   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000275   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000276   000651 710000 3                  TRA     s:10822

      402    10666    3                   ALTRET (DATA_WRITER_FAILED);
      403    10667    3               CASE (%WRTR_$CONTEXT);

      404    10668    3                 CALL WRTR_$CONTEXT (VD_$CONTEXT)

  10668  3 000277   000013 236000 4                  LDQ     11
         3 000300   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000301   002334 701000 3                  TSX1    WRTR_$CONTEXT
         3 000302   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000303   000651 710000 3                  TRA     s:10822

      405    10669    3                   ALTRET (DATA_WRITER_FAILED);
      406    10670    3               CASE (%WRTR_$CONTROL);

      407    10671    3                 CALL WRTR_$CONTROL (VD_$CONTROL)

  10671  3 000304   000014 236000 4                  LDQ     12
         3 000305   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000306   002677 701000 3                  TSX1    WRTR_$CONTROL
         3 000307   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000310   000651 710000 3                  TRA     s:10822
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:70   

      408    10672    3                   ALTRET (DATA_WRITER_FAILED);
      409    10673    3               CASE (%WRTR_$DEFAULT_DEST);

      410    10674    3                 CALL WRTR_BLOCK_EXPR (VD_$DEFAULT_DESTINATION)

  10674  3 000311   000015 236000 4                  LDQ     13
         3 000312   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000313   002332 701000 3                  TSX1    WRTR_BLOCK_EXPR
         3 000314   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000315   000651 710000 3                  TRA     s:10822

      411    10675    3                   ALTRET (DATA_WRITER_FAILED);
      412    10676    3               CASE (%WRTR_$DEFAULT_SOURCE);

      413    10677    3                 CALL WRTR_BLOCK_EXPR (VD_$DEFAULT_SOURCE)

  10677  3 000316   000016 236000 4                  LDQ     14
         3 000317   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000320   002332 701000 3                  TSX1    WRTR_BLOCK_EXPR
         3 000321   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000322   000651 710000 3                  TRA     s:10822

      414    10678    3                   ALTRET (DATA_WRITER_FAILED);
      415    10679    3               CASE (%WRTR_$DIRECTION);

      416    10680    3                 CALL WRTR_NUMBER (VD_$DIRECTION)

  10680  3 000323   000017 236000 4                  LDQ     15
         3 000324   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000325   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000326   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000327   000651 710000 3                  TRA     s:10822

      417    10681    3                   ALTRET (DATA_WRITER_FAILED);
      418    10682    3               CASE (%WRTR_$EOF_MARK);

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:71   
      419    10683    3                 CALL WRTR_BUFFER (VD_$EOF_MARK)

  10683  3 000330   000020 236000 4                  LDQ     16
         3 000331   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000332   002231 701000 3                  TSX1    WRTR_BUFFER
         3 000333   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000334   000651 710000 3                  TRA     s:10822

      420    10684    3                   ALTRET (DATA_WRITER_FAILED);
      421    10685    3               CASE (%WRTR_$EXIST);

      422    10686    3                 CALL WRTR_NUMBER (VD_$EXIST)

  10686  3 000335   000021 236000 4                  LDQ     17
         3 000336   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000337   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000340   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000341   000651 710000 3                  TRA     s:10822

      423    10687    3                   ALTRET (DATA_WRITER_FAILED);
      424    10688    3               CASE (%WRTR_$EZ_APPEND);

      425    10689    3                 CALL WRTR_BOOLEAN (VD_$EZ_APPEND)

  10689  3 000342   000022 236000 4                  LDQ     18
         3 000343   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000344   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000345   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000346   000651 710000 3                  TRA     s:10822

      426    10690    3                   ALTRET (DATA_WRITER_FAILED);
      427    10691    3               CASE (%WRTR_$FILETYPE);

      428    10692    3                 CALL WRTR_BUFFER (VD_$FILETYPE)

  10692  3 000347   000023 236000 4                  LDQ     19
         3 000350   200053 756100                    STQ     ERRCODE+3,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:72   
         3 000351   002231 701000 3                  TSX1    WRTR_BUFFER
         3 000352   001061 702000 3                  TSX2    DATA_WRITER_FAILED

      429    10693    3                   ALTRET (DATA_WRITER_FAILED);
      430    10694    3                 CALL WRTR_$FILETYPE;

  10694  3 000353   003245 701000 3                  TSX1    WRTR_$FILETYPE
         3 000354   000000 011000                    NOP     0
         3 000355   000651 710000 3                  TRA     s:10822

      431    10695    3               CASE (%WRTR_$HSALL);

      432    10696    3                 CALL WRTR_BOOLEAN (VD_$HSALL)

  10696  3 000356   000024 236000 4                  LDQ     20
         3 000357   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000360   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000361   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000362   000651 710000 3                  TRA     s:10822

      433    10697    3                   ALTRET (DATA_WRITER_FAILED);
      434    10698    3               CASE (%WRTR_$HSCROLL);

      435    10699    3                 CALL WRTR_$HSCROLL (VD_$HSCROLL)

  10699  3 000363   000025 236000 4                  LDQ     21
         3 000364   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000365   001323 701000 3                  TSX1    WRTR_$HSCROLL
         3 000366   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000367   000651 710000 3                  TRA     s:10822

      436    10700    3                   ALTRET (DATA_WRITER_FAILED);
      437    10701    3               CASE (%WRTR_$HSCROLL_MARGIN);

      438    10702    3                 CALL WRTR_$HSCROLL_MARGIN (VD_$HSCROLL_MARGIN)

  10702  3 000370   000026 236000 4                  LDQ     22
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:73   
         3 000371   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000372   001325 701000 3                  TSX1    WRTR_$HSCROLL_MARGIN
         3 000373   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000374   000651 710000 3                  TRA     s:10822

      439    10703    3                   ALTRET (DATA_WRITER_FAILED);
      440    10704    3               CASE (%WRTR_$INITIALIZE);

      441    10705    3                 CALL WRTR_$CONTEXT (VD_$INITIALIZE)

  10705  3 000375   000027 236000 4                  LDQ     23
         3 000376   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000377   002334 701000 3                  TSX1    WRTR_$CONTEXT
         3 000400   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000401   000651 710000 3                  TRA     s:10822

      442    10706    3                   ALTRET (DATA_WRITER_FAILED);
      443    10707    3               CASE (%WRTR_$INSERT);

      444    10708    3                 CALL WRTR_BOOLEAN (VD_$INSERT)

  10708  3 000402   000030 236000 4                  LDQ     24
         3 000403   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000404   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000405   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000406   000651 710000 3                  TRA     s:10822

      445    10709    3                   ALTRET (DATA_WRITER_FAILED);
      446    10710    3               CASE (%WRTR_$INTRO_1);

      447    10711    3                 CALL WRTR_IMP_INTRO (VD_$INTRO_1)

  10711  3 000407   000031 236000 4                  LDQ     25
         3 000410   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000411   002361 701000 3                  TSX1    WRTR_IMP_INTRO
         3 000412   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000413   000651 710000 3                  TRA     s:10822
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:74   

      448    10712    3                   ALTRET (DATA_WRITER_FAILED);
      449    10713    3               CASE (%WRTR_$INTRO_2);

      450    10714    3                 CALL WRTR_IMP_INTRO (VD_$INTRO_2)

  10714  3 000414   000032 236000 4                  LDQ     26
         3 000415   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000416   002361 701000 3                  TSX1    WRTR_IMP_INTRO
         3 000417   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000420   000651 710000 3                  TRA     s:10822

      451    10715    3                   ALTRET (DATA_WRITER_FAILED);
      452    10716    3               CASE (%WRTR_$KEY_GENERATION);

      453    10717    3                 CALL WRTR_NUMBER (VD_$KEY_GENERATION)

  10717  3 000421   000033 236000 4                  LDQ     27
         3 000422   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000423   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000424   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000425   000651 710000 3                  TRA     s:10822

      454    10718    3                   ALTRET (DATA_WRITER_FAILED);
      455    10719    3               CASE (%WRTR_$MATCHES);

      456    10720    3                 CALL WRTR_NUMBER (VD_$MATCHES)

  10720  3 000426   000034 236000 4                  LDQ     28
         3 000427   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000430   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000431   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000432   000651 710000 3                  TRA     s:10822

      457    10721    3                   ALTRET (DATA_WRITER_FAILED);
      458    10722    3               CASE (%WRTR_$MATCH_LIMIT);

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:75   
      459    10723    3                 CALL WRTR_NUMBER (VD_$MATCH_LIMIT)

  10723  3 000433   000035 236000 4                  LDQ     29
         3 000434   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000435   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000436   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000437   000651 710000 3                  TRA     s:10822

      460    10724    3                   ALTRET (DATA_WRITER_FAILED);
      461    10725    3               CASE (%WRTR_$MAX_COMMAND);

      462    10726    3                 CALL WRTR_$MAX_COMMAND (VD_$MAX_COMMAND)

  10726  3 000440   000036 236000 4                  LDQ     30
         3 000441   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000442   001504 701000 3                  TSX1    WRTR_$MAX_COMMAND
         3 000443   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000444   000651 710000 3                  TRA     s:10822

      463    10727    3                   ALTRET (DATA_WRITER_FAILED);
      464    10728    3               CASE (%WRTR_$MAX_RECORD);

      465    10729    3                 CALL WRTR_$MAX_RECORD (VD_$MAX_RECORD)

  10729  3 000445   000037 236000 4                  LDQ     31
         3 000446   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000447   001533 701000 3                  TSX1    WRTR_$MAX_RECORD
         3 000450   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000451   000651 710000 3                  TRA     s:10822

      466    10730    3                   ALTRET (DATA_WRITER_FAILED);
      467    10731    3               CASE (%WRTR_$MIN_COMMAND);

      468    10732    3                 CALL WRTR_$MIN_COMMAND (VD_$MIN_COMMAND)

  10732  3 000452   000040 236000 4                  LDQ     32
         3 000453   200053 756100                    STQ     ERRCODE+3,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:76   
         3 000454   001375 701000 3                  TSX1    WRTR_$MIN_COMMAND
         3 000455   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000456   000651 710000 3                  TRA     s:10822

      469    10733    3                   ALTRET (DATA_WRITER_FAILED);
      470    10734    3               CASE (%WRTR_$MIN_RECORD);

      471    10735    3                 CALL WRTR_$MIN_RECORD (VD_$MIN_RECORD)

  10735  3 000457   000041 236000 4                  LDQ     33
         3 000460   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000461   001464 701000 3                  TSX1    WRTR_$MIN_RECORD
         3 000462   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000463   000651 710000 3                  TRA     s:10822

      472    10736    3                   ALTRET (DATA_WRITER_FAILED);
      473    10737    3               CASE (%WRTR_$ONESPACEEDIT);

      474    10738    3                 CALL WRTR_BOOLEAN (VD_$ONESPACEEDIT)

  10738  3 000464   000042 236000 4                  LDQ     34
         3 000465   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000466   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000467   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000470   000651 710000 3                  TRA     s:10822

      475    10739    3                   ALTRET (DATA_WRITER_FAILED);
      476    10740    3               CASE (%WRTR_$PAD);

      477    10741    3                 CALL WRTR_BUFFER (VD_$PAD)

  10741  3 000471   000043 236000 4                  LDQ     35
         3 000472   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000473   002231 701000 3                  TSX1    WRTR_BUFFER
         3 000474   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000475   000651 710000 3                  TRA     s:10822

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:77   
      478    10742    3                   ALTRET (DATA_WRITER_FAILED);
      479    10743    3               CASE (%WRTR_$POINT);

      480    10744    3                 CALL WRTR_NUMBER (VD_$POINT)

  10744  3 000476   000044 236000 4                  LDQ     36
         3 000477   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000500   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000501   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000502   000651 710000 3                  TRA     s:10822

      481    10745    3                   ALTRET (DATA_WRITER_FAILED);
      482    10746    3               CASE (%WRTR_$PROTECT);

      483    10747    3                 CALL WRTR_NUMBER (VD_$PROTECT)

  10747  3 000503   000045 236000 4                  LDQ     37
         3 000504   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000505   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000506   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000507   000651 710000 3                  TRA     s:10822

      484    10748    3                   ALTRET (DATA_WRITER_FAILED);
      485    10749    3               CASE (%WRTR_$RECORDS_DELETED);

      486    10750    3                 CALL WRTR_NUMBER (VD_$RECORDS_DELETED)

  10750  3 000510   000046 236000 4                  LDQ     38
         3 000511   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000512   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000513   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000514   000651 710000 3                  TRA     s:10822

      487    10751    3                   ALTRET (DATA_WRITER_FAILED);
      488    10752    3               CASE (%WRTR_$RECORDS_INSERTED);

      489    10753    3                 CALL WRTR_NUMBER (VD_$RECORDS_INSERTED)
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:78   

  10753  3 000515   000047 236000 4                  LDQ     39
         3 000516   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000517   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000520   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000521   000651 710000 3                  TRA     s:10822

      490    10754    3                   ALTRET (DATA_WRITER_FAILED);
      491    10755    3               CASE (%WRTR_$RECORDWRAP);

      492    10756    3                 CALL WRTR_BOOLEAN (VD_$RECORDWRAP)

  10756  3 000522   000050 236000 4                  LDQ     40
         3 000523   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000524   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000525   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000526   000651 710000 3                  TRA     s:10822

      493    10757    3                   ALTRET (DATA_WRITER_FAILED);
      494    10758    3               CASE (%WRTR_$REKEY);

      495    10759    3                 CALL WRTR_NUMBER (VD_$REKEY)

  10759  3 000527   000051 236000 4                  LDQ     41
         3 000530   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000531   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000532   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000533   000651 710000 3                  TRA     s:10822

      496    10760    3                   ALTRET (DATA_WRITER_FAILED);
      497    10761    3               CASE (%WRTR_$RESTORE);

      498    10762    3                 CALL WRTR_BUFFER (VD_$RESTORE)

  10762  3 000534   000052 236000 4                  LDQ     42
         3 000535   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000536   002231 701000 3                  TSX1    WRTR_BUFFER
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:79   
         3 000537   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000540   000651 710000 3                  TRA     s:10822

      499    10763    3                   ALTRET (DATA_WRITER_FAILED);
      500    10764    3               CASE (%WRTR_$SCREEN);

      501    10765    3                 CALL WRTR_$SCREEN (VD_$SCREEN)

  10765  3 000541   000053 236000 4                  LDQ     43
         3 000542   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000543   001665 701000 3                  TSX1    WRTR_$SCREEN
         3 000544   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000545   000651 710000 3                  TRA     s:10822

      502    10766    3                   ALTRET (DATA_WRITER_FAILED);
      503    10767    3               CASE (%WRTR_$SCROLL);

      504    10768    3                 CALL WRTR_BOOLEAN (VD_$SCROLL)

  10768  3 000546   000054 236000 4                  LDQ     44
         3 000547   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000550   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000551   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000552   000651 710000 3                  TRA     s:10822

      505    10769    3                   ALTRET (DATA_WRITER_FAILED);
      506    10770    3               CASE (%WRTR_$SEARCH);

      507    10771    3                 CALL WRTR_BOOLEAN (VD_$SEARCH)

  10771  3 000553   000055 236000 4                  LDQ     45
         3 000554   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000555   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000556   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000557   000651 710000 3                  TRA     s:10822

      508    10772    3                   ALTRET (DATA_WRITER_FAILED);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:80   
      509    10773    3               CASE (%WRTR_$SITES);

      510    10774    3                 CALL WRTR_NUMBER (VD_$SITES)

  10774  3 000560   000056 236000 4                  LDQ     46
         3 000561   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000562   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000563   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000564   000651 710000 3                  TRA     s:10822

      511    10775    3                   ALTRET (DATA_WRITER_FAILED);
      512    10776    3               CASE (%WRTR_$SKIP);

      513    10777    3                 CALL WRTR_NUMBER (VD_$SKIP)

  10777  3 000565   000057 236000 4                  LDQ     47
         3 000566   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000567   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000570   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000571   000651 710000 3                  TRA     s:10822

      514    10778    3                   ALTRET (DATA_WRITER_FAILED);
      515    10779    3               CASE (%WRTR_$STRIP_BLANKS);

      516    10780    3                 CALL WRTR_BOOLEAN (VD_$STRIP_BLANKS)

  10780  3 000572   000060 236000 4                  LDQ     48
         3 000573   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000574   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000575   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000576   000651 710000 3                  TRA     s:10822

      517    10781    3                   ALTRET (DATA_WRITER_FAILED);
      518    10782    3               CASE (%WRTR_$STRUCTURE);

      519    10783    3                 ;     /*N* Don't handle this yet */
      520    10784    3               CASE (%WRTR_$TEXTEDIT);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:81   

      521    10785    3                 CALL WRTR_BOOLEAN (VD_$TEXTEDIT)

  10785  3 000577   000061 236000 4                  LDQ     49
         3 000600   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000601   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 000602   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000603   000651 710000 3                  TRA     s:10822

      522    10786    3                   ALTRET (DATA_WRITER_FAILED);
      523    10787    3               CASE (%WRTR_$VSCROLL);

      524    10788    3                 CALL WRTR_$VSCROLL (VD_$VSCROLL)

  10788  3 000604   000062 236000 4                  LDQ     50
         3 000605   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000606   001347 701000 3                  TSX1    WRTR_$VSCROLL
         3 000607   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000610   000651 710000 3                  TRA     s:10822

      525    10789    3                   ALTRET (DATA_WRITER_FAILED);
      526    10790    3               CASE (%WRTR_$VSCROLL_MARGIN);

      527    10791    3                 CALL WRTR_$VSCROLL_MARGIN (VD_$VSCROLL_MARGIN)

  10791  3 000611   000063 236000 4                  LDQ     51
         3 000612   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000613   001351 701000 3                  TSX1    WRTR_$VSCROLL_MARGIN
         3 000614   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000615   000651 710000 3                  TRA     s:10822

      528    10792    3                   ALTRET (DATA_WRITER_FAILED);
      529    10793    3               CASE (%WRTR_$WI_BORDER);

      530    10794    3                 CALL WRTR_$WI_BORDER (VD_$WI_BORDER)

  10794  3 000616   000064 236000 4                  LDQ     52
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:82   
         3 000617   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000620   003015 701000 3                  TSX1    WRTR_$WI_BORDER
         3 000621   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000622   000651 710000 3                  TRA     s:10822

      531    10795    3                   ALTRET (DATA_WRITER_FAILED);
      532    10796    3               CASE (%WRTR_$WI_PERCENT);

      533    10797    3                 CALL WRTR_NUMBER (VD_$WI_PERCENT)

  10797  3 000623   000065 236000 4                  LDQ     53
         3 000624   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000625   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000626   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000627   000651 710000 3                  TRA     s:10822

      534    10798    3                   ALTRET (DATA_WRITER_FAILED);
      535    10799    3               CASE (%WRTR_$WORDWRAP);

      536    10800    3                 CALL WRTR_NUMBER (VD_$WORDWRAP)

  10800  3 000630   000066 236000 4                  LDQ     54
         3 000631   200117 756100                    STQ     EDITING_WINDOW_HEIGHT+2,,AUTO
         3 000632   001062 701000 3                  TSX1    WRTR_NUMBER
         3 000633   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000634   000651 710000 3                  TRA     s:10822

      537    10801    3                   ALTRET (DATA_WRITER_FAILED);
      538    10802    3               CASE (%WRTR_$WS_STORAGE);

      539    10803    3                 CALL WRTR_FILE_STCLASS (VD_$WS_STORAGE)

  10803  3 000635   000067 236000 4                  LDQ     55
         3 000636   200053 756100                    STQ     ERRCODE+3,,AUTO
         3 000637   002527 701000 3                  TSX1    WRTR_FILE_STCLASS
         3 000640   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000641   000651 710000 3                  TRA     s:10822
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:83   

      540    10804    3                   ALTRET (DATA_WRITER_FAILED);
      541    10805    3               CASE (ELSE);

      542    10806    3                 CALL VDG$ESCREECH (REF$SPEC.WRITER#);

  10806  3 000642   200011 236100                    LDQ     REF_SPEC$,,AUTO
         3 000643   000070 036000 4                  ADLQ    56
         3 000644   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 000645   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 000646   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000647   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000650   000000 011000                    NOP     0

      543    10807    3               END;

      544    10808    2              END CALL_DATA_WRITER;

      545    10809                /*
      546    10810                *              !!! CAUTION !!!
      547    10811                *   The name writers (WRTR_xxx) may have created a new Data component.
      548    10812                *   From now on, don't refer to DATA directly; DATA$
      549    10813                *       points to the valid new data component:  use
      550    10814                *       DATA$BUFFER to refer to it.
      551    10815                */
      552    10816
      553    10817
      554    10818                /*
      555    10819                *   Delete or write the new Spec and/or Data components.
      556    10820                */
      557    10821
      558    10822    1           IF DELETE_NODE THEN

  10822  3 000651   200007 234100                    SZN     DELETE_NODE,,AUTO
         3 000652   000727 605000 3                  TPL     REPLACE_COMPONENT

      559    10823    2   DELETE_THE_NODE: DO;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:84   

  10823  3 000653                       DELETE_THE_* null
      560    10824    3              IF NODE_EXISTS AND REF$SPEC.DATA_TYPE# = %NDT_KEYIN THEN DO;

  10824  3 000653   200006 470500                    LDP0    @NODE_EXISTS,,AUTO
         3 000654   000000 234100                    SZN     0,,PR0
         3 000655   000670 605000 3                  TPL     s:10829
         3 000656   200011 471500                    LDP1    REF_SPEC$,,AUTO
         3 000657   100002 720100                    LXL0    2,,PR1
         3 000660   000004 100003                    CMPX0   4,DU
         3 000661   000670 601000 3                  TNZ     s:10829

      561    10825    3                 IF VD_$SCREEN.V# > 0 THEN

  10825  3 000662   000003 235000 xsym               LDA     VD_$SCREEN+3
         3 000663   000670 604400 3                  TMOZ    s:10829

      562    10826    3                    CALL VDP$NKEYIN_DELETE (NODE$KEY)

  10826  3 000664   200012 630500                    EPPR0   NODE_KEY$,,AUTO
         3 000665   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000666   000000 701000 xent               TSX1    VDP$NKEYIN_DELETE
         3 000667   001061 702000 3                  TSX2    DATA_WRITER_FAILED

      563    10827    3                      ALTRET (NKEYIN_DELETE_FAILED);
      564    10828    3                 END;

      565    10829    2              CALL VDG$OCOPY_LOCATION (PORT.CURRENT, DEL_RANGE.START)

  10829  3 000670   200023 630500                    EPPR0   DEL_RANGE,,AUTO
         3 000671   200125 450500                    STP0    CURR_BUF_TO_FREE$+2,,AUTO
         3 000672   200003 236100                    LDQ     @PORT,,AUTO
         3 000673   000012 036003                    ADLQ    10,DU
         3 000674   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 000675   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 000676   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000677   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:85   
         3 000700   001061 702000 3                  TSX2    DATA_WRITER_FAILED

      566    10830    2                ALTRET (OCOPY_LOCATION_FAILED);
      567    10831    2              DEL_RANGE.ENDD = DEL_RANGE.START;

  10831  3 000701   000100 100500                    MLR     fill='000'O
         3 000702   200023 000044                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=36
         3 000703   200034 000044                    ADSC9   DEL_RANGE+9,,AUTO        cn=0,n=36

      568    10832    2              CALL VDA$PDELETE (PORT, DEL_RANGE, %LVL_LOWER, COUNT)

  10832  3 000704   200045 630500                    EPPR0   COUNT,,AUTO
         3 000705   200127 450500                    STP0    CURR_BUF_TO_FREE$+4,,AUTO
         3 000706   000071 236000 4                  LDQ     57
         3 000707   200126 756100                    STQ     CURR_BUF_TO_FREE$+3,,AUTO
         3 000710   200023 631500                    EPPR1   DEL_RANGE,,AUTO
         3 000711   200125 451500                    STP1    CURR_BUF_TO_FREE$+2,,AUTO
         3 000712   200003 236100                    LDQ     @PORT,,AUTO
         3 000713   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 000714   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 000715   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000716   000000 701000 xent               TSX1    VDA$PDELETE
         3 000717   001061 702000 3                  TSX2    DATA_WRITER_FAILED

      569    10833    2                ALTRET (PDELETE_FAILED);
      570    10834    2              CALL VDG$OCLEAR_LOCATION (DEL_RANGE.START)

  10834  3 000720   200023 630500                    EPPR0   DEL_RANGE,,AUTO
         3 000721   200124 450500                    STP0    CURR_BUF_TO_FREE$+1,,AUTO
         3 000722   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 000723   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000724   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         3 000725   001061 702000 3                  TSX2    DATA_WRITER_FAILED

      571    10835    2                ALTRET (OCLEAR_LOCATION_FAILED);
      572    10836    2              END DELETE_THE_NODE;

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:86   
  10836  3 000726   001017 710000 3                  TRA     s:10874

      573    10837
      574    10838    1           ELSE
      575    10839
      576    10840    2   REPLACE_COMPONENT: DO;

  10840  3 000727                       REPLACE_COM* null
      577    10841    2              IF REF$SPEC.WINDOWABLE THEN

  10841  3 000727   200011 470500                    LDP0    REF_SPEC$,,AUTO
         3 000730   000003 236100                    LDQ     3,,PR0
         3 000731   400000 316007                    CANQ    -131072,DL
         3 000732   000776 600000 3                  TZE     s:10855

      578    10842    3   WINDOWABLE_NAME: DO;

  10842  3 000733                       WINDOWABLE_* null
      579    10843    3                 IF VD_$SCREEN.V# > 0 THEN

  10843  3 000733   000003 235000 xsym               LDA     VD_$SCREEN+3
         3 000734   001005 604400 3                  TMOZ    s:10860

      580    10844    4                 DO CASE REF$SPEC.DATA_TYPE#;

  10844  3 000735   000002 720100                    LXL0    2,,PR0
         3 000736   000005 100003                    CMPX0   5,DU
         3 000737   000741 602010 3                  TNC     s:10844+4,X0
         3 000740   000763 710000 3                  TRA     s:10852
         3 000741   000763 710000 3                  TRA     s:10852
         3 000742   000746 710000 3                  TRA     s:10846
         3 000743   000763 710000 3                  TRA     s:10852
         3 000744   000763 710000 3                  TRA     s:10852
         3 000745   000756 710000 3                  TRA     s:10849

      581    10845    4                  CASE %NDT_EQUALS;

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:87   
      582    10846    4                    CALL VDP$NEQUALS (REF$SPEC, DATA$BUFFER)

  10846  3 000746   200013 236100                    LDQ     DATA$,,AUTO
         3 000747   200011 235100                    LDA     REF_SPEC$,,AUTO
         3 000750   200124 757100                    STAQ    CURR_BUF_TO_FREE$+1,,AUTO
         3 000751   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 000752   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000753   000000 701000 xent               TSX1    VDP$NEQUALS
         3 000754   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000755   001005 710000 3                  TRA     s:10860

      583    10847    4                      ALTRET (NEQUALS_FAILED);
      584    10848    4                  CASE %NDT_KEYIN;

      585    10849    4                    CALL VDP$NKEYIN (NODE$KEY, DATA$BUFFER)

  10849  3 000756   200012 630500                    EPPR0   NODE_KEY$,,AUTO
         3 000757   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000760   000000 701000 xent               TSX1    VDP$NKEYIN
         3 000761   001061 702000 3                  TSX2    DATA_WRITER_FAILED
         3 000762   001005 710000 3                  TRA     s:10860

      586    10850    4                      ALTRET (NKEYIN_FAILED);
      587    10851    4                  CASE ELSE;

      588    10852    4                    CALL VDG$ESCREECH (NODE$KEY.BYTES, REF$SPEC.DATA_TYPE#);

  10852  3 000763   200011 236100                    LDQ     REF_SPEC$,,AUTO
         3 000764   000072 036000 4                  ADLQ    58
         3 000765   200125 756100                    STQ     CURR_BUF_TO_FREE$+2,,AUTO
         3 000766   200012 236100                    LDQ     NODE_KEY$,,AUTO
         3 000767   200000 036007                    ADLQ    65536,DL
         3 000770   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 000771   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 000772   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000773   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000774   000000 011000                    NOP     0
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:88   

      589    10853    4                  END;

      590    10854    3                 END WINDOWABLE_NAME;

  10854  3 000775   001005 710000 3                  TRA     s:10860

      591    10855    3              ELSE IF DATA$ ~= ADDR(NIL) THEN DO;

  10855  3 000776   200013 236100                    LDQ     DATA$,,AUTO
         3 000777   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001000   001005 600000 3                  TZE     s:10860

      592    10856    3                    IF DATA$BUFFER.FLINK$ ~= ADDR(NIL) THEN

  10856  3 001001   200013 471500                    LDP1    DATA$,,AUTO
         3 001002   100001 236100                    LDQ     1,,PR1
         3 001003   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001004   001051 601000 3                  TNZ     CANT_WINDOW_THIS_NAME_FAILURE

      593    10857    3                       GOTO CANT_WINDOW_THIS_NAME_FAILURE;
      594    10858    3                    END;

      595    10859
      596    10860    2              CALL VDA$PWRITE (PORT, %LVL_LOWER, SPEC, DATA$BUFFER)

  10860  3 001005   200013 236100                    LDQ     DATA$,,AUTO
         3 001006   200004 235100                    LDA     @SPEC,,AUTO
         3 001007   200126 757100                    STAQ    CURR_BUF_TO_FREE$+3,,AUTO
         3 001010   000071 236000 4                  LDQ     57
         3 001011   200003 235100                    LDA     @PORT,,AUTO
         3 001012   200124 757100                    STAQ    CURR_BUF_TO_FREE$+1,,AUTO
         3 001013   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 001014   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001015   000000 701000 xent               TSX1    VDA$PWRITE
         3 001016   001061 702000 3                  TSX2    DATA_WRITER_FAILED

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:89   
      597    10861    2                ALTRET (PWRITE_FAILED);
      598    10862    2              END REPLACE_COMPONENT;

      599    10863
      600    10864                /*
      601    10865                *   The writer routines may have created a new Data component, so we
      602    10866                *       should free the original DATA we were called with at this
      603    10867                *       point.
      604    10868                *   We didn't free DATA earlier because we weren't sure if we were
      605    10869                *       going to altreturn or not; and if we altreturn, we shouldn't
      606    10870                *       free DATA.
      607    10871                *   Now, we're about to return normally.  So if appropriate,
      608    10872                *       free the original DATA.
      609    10873                */
      610    10874    2           IF BUFFER_TO_FREE$ ~= ADDR(NIL) THEN DO;

  10874  3 001017   200010 236100                    LDQ     BUFFER_TO_FREE$,,AUTO
         3 001020   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001021   001026 600000 3                  TZE     s:10879

      611    10875    2              CALL VDG$OFREE (BUFFER_TO_FREE$ -> VD$BUFFER)

  10875  3 001022   200010 630500                    EPPR0   BUFFER_TO_FREE$,,AUTO
         3 001023   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001024   000000 701000 xent               TSX1    VDG$OFREE
         3 001025   001061 702000 3                  TSX2    DATA_WRITER_FAILED

      612    10876    2                ALTRET (OFREE_FAILED);
      613    10877    2              END;

      614    10878
      615    10879    1           RETURN;

  10879  3 001026   000000 702200 xent               TSX2  ! X66_ARET

      616    10880
      617    10881
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:90   
      618    10882
      619    10883    1   ILL_TYPE_FOR_NAME_FAILURE:
      620    10884    1           CALL VDG$ERRMSG (%E$BAD_TYPE_FOR_NAME, NODE$KEY) ALTRET (ERRMSG_FAILED);

  10884  3 001027   200012 236100       ILL_TYPE_FO* LDQ     NODE_KEY$,,AUTO
         3 001030   000074 235000 4                  LDA     60
         3 001031   200124 757100                    STAQ    CURR_BUF_TO_FREE$+1,,AUTO
         3 001032   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 001033   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001034   000000 701000 xent               TSX1    VDG$ERRMSG
         3 001035   001061 702000 3                  TSX2    DATA_WRITER_FAILED

      621    10885    1           VD_ERR_SUBST$ = PINCRW(VD_6E.ERR_TAIL$, SIZEW(VD$ERR));

  10885  3 001036   000032 236000 xsym               LDQ     VD_6E+26
         3 001037   000005 036003                    ADLQ    5,DU
         3 001040   200047 756100                    STQ     VD_ERR_SUBST$,,AUTO

      622    10886    1           SUBST$NUMBER.OBJECT.CLASS# (1) = %CLS_NAME_DATA_TYPE;

  10886  3 001041   000031 220003                    LDX0    25,DU
         3 001042   200047 470500                    LDP0    VD_ERR_SUBST$,,AUTO
         3 001043   000004 740100                    STX0    4,,PR0

      623    10887    1           SUBST$NUMBER.V# (1) = REF$SPEC.LEGAL_DATA_TYPE#;

  10887  3 001044   200011 471500                    LDP1    REF_SPEC$,,AUTO
         3 001045   100003 236100                    LDQ     3,,PR1
         3 001046   000022 772000                    QRL     18
         3 001047   000007 756100                    STQ     7,,PR0

      624    10888    1           ALTRETURN;

  10888  3 001050   000000 702200 xent               TSX2  ! X66_AALT

      625    10889
      626    10890
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:91   
      627    10891    1   CANT_WINDOW_THIS_NAME_FAILURE:
      628    10892    1           CALL VDG$ERRMSG (%E$CANT_WINDOW_THIS_NAME, NODE$KEY)

  10892  3 001051   200012 236100       CANT_WINDOW* LDQ     NODE_KEY$,,AUTO
         3 001052   000076 235000 4                  LDA     62
         3 001053   200124 757100                    STAQ    CURR_BUF_TO_FREE$+1,,AUTO
         3 001054   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 001055   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001056   000000 701000 xent               TSX1    VDG$ERRMSG
         3 001057   001061 702000 3                  TSX2    DATA_WRITER_FAILED

      629    10893    1             ALTRET (ERRMSG_FAILED);
      630    10894    1           ALTRETURN;

  10894  3 001060   000000 702200 xent               TSX2  ! X66_AALT

  10887  3 001061                       DATA_WRITER* null
  10887  3 001061                       NEQUALS_FAI* null
  10887  3 001061                       NKEYIN_FAIL* null
  10887  3 001061                       NKEYIN_DELE* null
  10887  3 001061                       ERRMSG_FAIL* null
  10887  3 001061                       OCOPY_LOCAT* null
  10887  3 001061                       OCLEAR_LOCA* null
  10887  3 001061                       PDELETE_FAI* null
  10887  3 001061                       PWRITE_FAIL* null
      631    10895
      632    10896
      633    10897    1   DATA_WRITER_FAILED: ;
      634    10898    1   NEQUALS_FAILED: ;
      635    10899    1   NKEYIN_FAILED: ;
      636    10900    1   NKEYIN_DELETE_FAILED: ;
      637    10901    1   ERRMSG_FAILED: ;
      638    10902    1   OCOPY_LOCATION_FAILED: ;
      639    10903    1   OCLEAR_LOCATION_FAILED: ;
      640    10904    1   PDELETE_FAILED: ;
      641    10905    1   PWRITE_FAILED: ;
      642    10906    1   OALLOC_FAILED: ;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:92   

  10906  3 001061                       OALLOC_FAIL* null
  10906  3 001061                       OFREE_FAILED null
      643    10907    1   OFREE_FAILED: ;
      644    10908    1           ALTRETURN;

  10908  3 001061   000000 702200 xent               TSX2  ! X66_AALT

      645    10909
      646    10910
      647    10911        %BOX (TITLE="Name data writer routines", PAGE=YES);
             10919    1
             10923    1   /***************************************************************************
             10925    1    *                                                                         *
             10929    1            *                         Name data writer routines                      *
             10931    1            *                                                                        *
             10933    1          ***************************************************************************/

      648    10937
      649    10938        /*I* NAME: WRTR_xxx     (Data-component writers for Names files)
      650    10939            PARAMETERS:
      651    10940                GLOBAL - A VD$NUMBER or VD$BUFFER for the global internal cell for the
      652    10941                    name being written.  This may be a chain of buffer-objects.
      653    10942                    If a name whose value is a VD$NUMBER is updated with a VD$BUFFER,
      654    10943                    we'll convert the ASCII decimal number in the buffer to a binary
      655    10944                    number before processing it.  However, names whose values are
      656    10945                    VD$BUFFERs cannot be updated with VD$NUMBERs:  we'll screech.
      657    10946            INPUT:
      658    10947                PORT, SPEC, DATA, and NODE_EXISTS same as for main routine.
      659    10948                    DATA must be passed (ie, ADDR(DATA) must not be ADDR(NIL)).
      660    10949                DELETE_NODE would be set if we were deleting.  Note that these
      661    10950                    routines are only used for predefined names, which are never
      662    10951                    deleted by 6Edit and to which the user should be denied deletion
      663    10952                    access.  Therefore, DELETE_NODE should never be set for these
      664    10953                    routines.
      665    10954                NODE_KEY$ must point to a VD$TEXTC for the key we're writing.
      666    10955                REF$SPEC must be the Spec component for the name.  If SPEC wasn't
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:93   
      667    10956                    passed, REF$SPEC should be the name's current VD$SPEC.
      668    10957                    REF$SPEC.DATA_TYPE# must be of the appropriate type (%NDT_ code).
      669    10958                DATA$NUMBER must be a VD$NUMBER based on ADDR(DATA).
      670    10959            OUTPUT:
      671    10960                GLOBAL may be updated.
      672    10961                BUFFER_TO_FREE$ may point to a VD$BUFFER chain to free IF AND ONLY IF
      673    10962                    we return normally from VDP$WNAMES.
      674    10963            DESCRIPTION:
      675    10964                Each routine below (WRTR_xxx) has the same interface.  The routines:
      676    10965                    o Convert the new DATA component value(s) to the appropriate
      677    10966                        representation:  VD$BUFFER or VD$NUMBER.
      678    10967                    o Validate the value(s).
      679    10968                    o Update GLOBAL.
      680    10969                    o Perform any side-effects of the name's value change.
      681    10970        */
      682    10971
      683    10972        %BOX (TITLE=WRTR_NUMBER);

             10984    1   /***************************************************************************
             10986    1    *                                                                         *
             10990    1            *                                WRTR_NUMBER                             *
             10992    1            *                                                                        *
             10994    1          ***************************************************************************/

      684    10998
      685    10999        /*I* NAME: WRTR_NUMBER
      686    11000            PARAMETERS:
      687    11001                GLOBAL must be a VD$NUMBER (chain).
      688    11002            INPUT:
      689    11003                DATA may be (a chain of) either VD$NUMBER or VD$BUFFER.
      690    11004            DESCRIPTION:
      691    11005                Loop thru each element (buffer-object) of DATA:
      692    11006                    If the element is a VD$BUFFER, the buffer must contain an ASCII
      693    11007                        decimal number:
      694    11008                        o Convert the number to binary and build a VD$NUMBER for it.
      695    11009                        o Flag the old VD$BUFFER to be freed; it's not needed anymore.
      696    11010                    New value must be between REF$SPEC.M# and REF$SPEC.N#, inclusive.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:94   
      697    11011        */
      698    11012
      699    11013    1   WRTR_NUMBER: PROC (GLOBAL) ALTRET;

  11013  3 001062   200116 741300       WRTR_NUMBER  STX1  ! EDITING_WINDOW_HEIGHT+1,,AUTO

      700    11014
      701    11015        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
      702    11060
      703    11061    2   DCL CURR_ELEMENT$ PTR;
      704    11062    2   DCL PREV_ELEMENT$ PTR;
      705    11063    2   DCL NEW_ELEMENT$ PTR;
      706    11064    2   DCL CURR_BUF_TO_FREE$ PTR;
      707    11065
      708    11066
      709    11067        %VD$NUMBER (NAME=CURR$ELEMENT, STCLASS="BASED(CURR_ELEMENT$)");
      710    11112        %VD$BUFFER (NAME=CURR$BUFFER, STCLASS="BASED(CURR_ELEMENT$)");
      711    11170        %VD$NUMBER (NAME=PREV$ELEMENT, STCLASS="BASED(PREV_ELEMENT$)");
      712    11215        %VD$NUMBER (NAME=NEW$ELEMENT, STCLASS="BASED(NEW_ELEMENT$)");
      713    11260        %VD$BUFFER (NAME=CURR$BUF_TO_FREE, STCLASS="BASED(CURR_BUF_TO_FREE$)");
      714    11318
      715    11319
      716    11320    2   COMMON_NUMBER:
      717    11321    2           PREV_ELEMENT$ = ADDR(NIL);

  11321  3 001063   000001 236000 xsym  COMMON_NUMB* LDQ     B_VECTNIL+1
         3 001064   200121 756100                    STQ     PREV_ELEMENT$,,AUTO

      718    11322    2           CURR_ELEMENT$ = ADDR(DATA);

  11322  3 001065   200005 236100                    LDQ     @DATA,,AUTO
         3 001066   200120 756100                    STQ     CURR_ELEMENT$,,AUTO

      719    11323
      720    11324    2   EACH_ELEMENT:
      721    11325    3           DO WHILE CURR_ELEMENT$ ~= ADDR(NIL);

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:95   
  11325  3 001067   001233 710000 3     EACH_ELEMENT TRA     s:11371

      722    11326    4              IF CURR$ELEMENT.OBJECT.CLASS# ~= GLOBAL.OBJECT.CLASS# THEN DO;

  11326  3 001070   200120 470500                    LDP0    CURR_ELEMENT$,,AUTO
         3 001071   000000 220100                    LDX0    0,,PR0
         3 001072   200117 471500                    LDP1    @GLOBAL,,AUTO
         3 001073   100000 100100                    CMPX0   0,,PR1
         3 001074   001206 600000 3                  TZE     s:11358

      723    11327    4                 CALL VDG$OALLOC (BINBIT(GLOBAL.OBJECT.CLASS#,36), NEW_ELEMENT$)

  11327  3 001075   100000 236100                    LDQ     0,,PR1
         3 001076   000022 772000                    QRL     18
         3 001077   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 001100   200122 633500                    EPPR3   NEW_ELEMENT$,,AUTO
         3 001101   200127 453500                    STP3    CURR_BUF_TO_FREE$+4,,AUTO
         3 001102   200124 634500                    EPPR4   CURR_BUF_TO_FREE$+1,,AUTO
         3 001103   200126 454500                    STP4    CURR_BUF_TO_FREE$+3,,AUTO
         3 001104   200126 630500                    EPPR0   CURR_BUF_TO_FREE$+3,,AUTO
         3 001105   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001106   000000 701000 xent               TSX1    VDG$OALLOC
         3 001107   001317 702000 3                  TSX2    O_FAILED

      724    11328    4                   ALTRET (O_FAILED);
      725    11329    5                 IF CURR$BUFFER.LENGTH# = 0 THEN DO;

  11329  3 001110   200120 470500                    LDP0    CURR_ELEMENT$,,AUTO
         3 001111   000002 220100                    LDX0    2,,PR0
         3 001112   001121 601000 3                  TNZ     s:11333

      726    11330    5                    NEW$ELEMENT.V# = 0;

  11330  3 001113   200122 471500                    LDP1    NEW_ELEMENT$,,AUTO
         3 001114   100003 450100                    STZ     3,,PR1

      727    11331    5                    NEW$ELEMENT.LENGTH# = 0;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:96   

  11331  3 001115   000000 220003                    LDX0    0,DU
         3 001116   200122 471500                    LDP1    NEW_ELEMENT$,,AUTO
         3 001117   100002 740100                    STX0    2,,PR1

      728    11332    5                    END;

  11332  3 001120   001144 710000 3                  TRA     s:11339

      729    11333    4                 ELSE IF CURR$BUFFER.OBJECT.CLASS# ~= %CLS_BUFFER THEN

  11333  3 001121   000000 221100                    LDX1    0,,PR0
         3 001122   000004 101003                    CMPX1   4,DU
         3 001123   001130 600000 3                  TZE     s:11336

      730    11334    4                       NEW$ELEMENT.V# = CURR$ELEMENT.V#;

  11334  3 001124   200122 471500                    LDP1    NEW_ELEMENT$,,AUTO
         3 001125   000003 235100                    LDA     3,,PR0
         3 001126   100003 755100                    STA     3,,PR1
         3 001127   001144 710000 3                  TRA     s:11339

      731    11335    4                    ELSE
      732    11336    4                       CALL X$DEC_CONVERT (PINCRC(ADDR(CURR$BUFFER.LENGTH#), 1),

  11336  3 001130   200120 236100                    LDQ     CURR_ELEMENT$,,AUTO
         3 001131   000077 036000 4                  ADLQ    63
         3 001132   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 001133   200122 236100                    LDQ     NEW_ELEMENT$,,AUTO
         3 001134   000003 036003                    ADLQ    3,DU
         3 001135   200127 756100                    STQ     CURR_BUF_TO_FREE$+4,,AUTO
         3 001136   200124 631500                    EPPR1   CURR_BUF_TO_FREE$+1,,AUTO
         3 001137   200126 451500                    STP1    CURR_BUF_TO_FREE$+3,,AUTO
         3 001140   200126 630500                    EPPR0   CURR_BUF_TO_FREE$+3,,AUTO
         3 001141   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001142   000000 701000 xent               TSX1    X$DEC_CONVERT
         3 001143   001271 702000 3                  TSX2    DEC_CONVERT_FAILED
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:97   

      733    11337    4                         NEW$ELEMENT.V#)
      734    11338    4                         ALTRET (DEC_CONVERT_FAILED);
      735    11339    4                 IF PREV_ELEMENT$ = ADDR(NIL) THEN

  11339  3 001144   200121 236100                    LDQ     PREV_ELEMENT$,,AUTO
         3 001145   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001146   001152 601000 3                  TNZ     s:11342

      736    11340    4                    DATA$ = NEW_ELEMENT$;

  11340  3 001147   200122 236100                    LDQ     NEW_ELEMENT$,,AUTO
         3 001150   200013 756100                    STQ     DATA$,,AUTO
         3 001151   001155 710000 3                  TRA     s:11343

      737    11341    4                 ELSE
      738    11342    4                    PREV$ELEMENT.FLINK$ = NEW_ELEMENT$;

  11342  3 001152   200122 236100                    LDQ     NEW_ELEMENT$,,AUTO
         3 001153   200121 470500                    LDP0    PREV_ELEMENT$,,AUTO
         3 001154   000001 756100                    STQ     1,,PR0

      739    11343    4                 NEW$ELEMENT.FLINK$ = CURR$BUFFER.FLINK$;

  11343  3 001155   200120 470500                    LDP0    CURR_ELEMENT$,,AUTO
         3 001156   000001 236100                    LDQ     1,,PR0
         3 001157   200122 471500                    LDP1    NEW_ELEMENT$,,AUTO
         3 001160   100001 756100                    STQ     1,,PR1

      740    11344    4                 CURR$BUFFER.FLINK$ = ADDR(NIL);

  11344  3 001161   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001162   000001 756100                    STQ     1,,PR0

      741    11345                      /* Append CURR_ELEMENT$ to end of BUFFER_TO_FREE$ chain */
      742    11346    4                 IF BUFFER_TO_FREE$ = ADDR(NIL) THEN

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:98   
  11346  3 001163   200010 236100                    LDQ     BUFFER_TO_FREE$,,AUTO
         3 001164   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001165   001171 601000 3                  TNZ     s:11349

      743    11347    4                    BUFFER_TO_FREE$ = CURR_ELEMENT$;

  11347  3 001166   200120 236100                    LDQ     CURR_ELEMENT$,,AUTO
         3 001167   200010 756100                    STQ     BUFFER_TO_FREE$,,AUTO
         3 001170   001204 710000 3                  TRA     s:11355

      744    11348    5                 ELSE DO;

      745    11349    5                    CURR_BUF_TO_FREE$ = BUFFER_TO_FREE$;

  11349  3 001171   200123 756100                    STQ     CURR_BUF_TO_FREE$,,AUTO

      746    11350    6                    DO WHILE CURR$BUF_TO_FREE.FLINK$ ~= ADDR(NIL);

  11350  3 001172   001176 710000 3                  TRA     s:11352

      747    11351    6                       CURR_BUF_TO_FREE$ = CURR$BUF_TO_FREE.FLINK$;

  11351  3 001173   200123 470500                    LDP0    CURR_BUF_TO_FREE$,,AUTO
         3 001174   000001 236100                    LDQ     1,,PR0
         3 001175   200123 756100                    STQ     CURR_BUF_TO_FREE$,,AUTO

      748    11352    6                       END;

  11352  3 001176   200123 470500                    LDP0    CURR_BUF_TO_FREE$,,AUTO
         3 001177   000001 236100                    LDQ     1,,PR0
         3 001200   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001201   001173 601000 3                  TNZ     s:11351

      749    11353    5                    CURR$BUF_TO_FREE.FLINK$ = CURR_ELEMENT$;

  11353  3 001202   200120 236100                    LDQ     CURR_ELEMENT$,,AUTO
         3 001203   000001 756100                    STQ     1,,PR0
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:99   

      750    11354    5                    END;

      751    11355    4                 CURR_ELEMENT$ = NEW_ELEMENT$;

  11355  3 001204   200122 236100                    LDQ     NEW_ELEMENT$,,AUTO
         3 001205   200120 756100                    STQ     CURR_ELEMENT$,,AUTO

      752    11356    4                 END;

      753    11357
      754    11358    4              IF CURR$ELEMENT.OBJECT.CLASS# = %CLS_BOOLEAN THEN DO;

  11358  3 001206   200120 470500                    LDP0    CURR_ELEMENT$,,AUTO
         3 001207   000000 220100                    LDX0    0,,PR0
         3 001210   000003 100003                    CMPX0   3,DU
         3 001211   001221 601000 3                  TNZ     s:11365

      755    11359    4                 IF CURR$ELEMENT.V# > 0 THEN

  11359  3 001212   000003 235100                    LDA     3,,PR0
         3 001213   001217 604400 3                  TMOZ    s:11362

      756    11360    4                    CURR$ELEMENT.V# = %BITBIN(TRUE);

  11360  3 001214   000001 236007                    LDQ     1,DL
         3 001215   000003 756100                    STQ     3,,PR0
         3 001216   001227 710000 3                  TRA     s:11369

      757    11361    4                 ELSE
      758    11362    4                    CURR$ELEMENT.V# = %BITBIN(FALSE);

  11362  3 001217   000003 450100                    STZ     3,,PR0

      759    11363    4                 END;

  11363  3 001220   001227 710000 3                  TRA     s:11369
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:100  

      760    11364    3              ELSE
      761    11365    3                 IF CURR$ELEMENT.V# < REF$SPEC.M#

  11365  3 001221   200011 471500                    LDP1    REF_SPEC$,,AUTO
         3 001222   000003 236100                    LDQ     3,,PR0
         3 001223   100004 116100                    CMPQ    4,,PR1
         3 001224   001302 604000 3                  TMI     ILL_NUMBER_FOR_NAME_FAILURE
         3 001225   100005 116100                    CMPQ    5,,PR1
         3 001226   001302 605400 3                  TPNZ    ILL_NUMBER_FOR_NAME_FAILURE

      762    11366    3                   OR CURR$ELEMENT.V# > REF$SPEC.N# THEN
      763    11367    3                    GOTO ILL_NUMBER_FOR_NAME_FAILURE;
      764    11368
      765    11369    3              PREV_ELEMENT$ = CURR_ELEMENT$;

  11369  3 001227   200120 236100                    LDQ     CURR_ELEMENT$,,AUTO
         3 001230   200121 756100                    STQ     PREV_ELEMENT$,,AUTO

      766    11370    3              CURR_ELEMENT$ = CURR$ELEMENT.FLINK$;

  11370  3 001231   000001 236100                    LDQ     1,,PR0
         3 001232   200120 756100                    STQ     CURR_ELEMENT$,,AUTO

      767    11371    3              END EACH_ELEMENT;

  11371  3 001233   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001234   001070 601000 3                  TNZ     s:11326

      768    11372
      769    11373    2           GLOBAL.V# = DATA$NUMBER.V#;

  11373  3 001235   200013 470500                    LDP0    DATA$,,AUTO
         3 001236   200117 471500                    LDP1    @GLOBAL,,AUTO
         3 001237   000003 235100                    LDA     3,,PR0
         3 001240   100003 755100                    STA     3,,PR1

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:101  
      770    11374
      771    11375    2           CALL VDG$OFREE (GLOBAL.FLINK$->VD$BUFFER)

  11375  3 001241   100001 473500                    LDP3    1,,PR1
         3 001242   200124 453500                    STP3    CURR_BUF_TO_FREE$+1,,AUTO
         3 001243   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 001244   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001245   000000 701000 xent               TSX1    VDG$OFREE
         3 001246   001317 702000 3                  TSX2    O_FAILED

      772    11376    2             ALTRET (O_FAILED);
      773    11377    2           GLOBAL.FLINK$ = ADDR(NIL);

  11377  3 001247   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001250   200117 470500                    LDP0    @GLOBAL,,AUTO
         3 001251   000001 756100                    STQ     1,,PR0

      774    11378    3           IF DATA$NUMBER.FLINK$ ~= ADDR(NIL) THEN DO;

  11378  3 001252   200013 471500                    LDP1    DATA$,,AUTO
         3 001253   100001 236100                    LDQ     1,,PR1
         3 001254   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001255   001267 600000 3                  TZE     s:11383

      775    11379    3              CALL VDG$OCOPY (DATA$NUMBER.FLINK$->VD$BUFFER, GLOBAL.FLINK$)

  11379  3 001256   100001 473500                    LDP3    1,,PR1
         3 001257   200117 236100                    LDQ     @GLOBAL,,AUTO
         3 001260   000001 036003                    ADLQ    1,DU
         3 001261   200125 756100                    STQ     CURR_BUF_TO_FREE$+2,,AUTO
         3 001262   200124 453500                    STP3    CURR_BUF_TO_FREE$+1,,AUTO
         3 001263   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 001264   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001265   000000 701000 xent               TSX1    VDG$OCOPY
         3 001266   001317 702000 3                  TSX2    O_FAILED

      776    11380    3                ALTRET (O_FAILED);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:102  
      777    11381    3              END;

      778    11382
      779    11383    2           RETURN;

  11383  3 001267   200116 221300                    LDX1  ! EDITING_WINDOW_HEIGHT+1,,AUTO
         3 001270   000001 702211                    TSX2  ! 1,X1

      780    11384
      781    11385
      782    11386
      783    11387    2   DEC_CONVERT_FAILED:
      784    11388    2           CALL VDG$ERRMSG (%E$DECIMAL_NOT_LEGAL, NODE$KEY)

  11388  3 001271   200012 236100       DEC_CONVERT* LDQ     NODE_KEY$,,AUTO
         3 001272   000101 235000 4                  LDA     65
         3 001273   200124 757100                    STAQ    CURR_BUF_TO_FREE$+1,,AUTO
         3 001274   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 001275   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001276   000000 701000 xent               TSX1    VDG$ERRMSG
         3 001277   001317 702000 3                  TSX2    O_FAILED

      785    11389    2             ALTRET (O_FAILED);
      786    11390    2           ALTRETURN;

  11390  3 001300   200116 221300                    LDX1  ! EDITING_WINDOW_HEIGHT+1,,AUTO
         3 001301   000000 702211                    TSX2  ! 0,X1

      787    11391
      788    11392
      789    11393    2   ILL_NUMBER_FOR_NAME_FAILURE:
      790    11394    2           CALL VDG$ERRMSG (%E$BAD_NUMBER_FOR_NAME, NODE$KEY,

  11394  3 001302   200011 236100       ILL_NUMBER_* LDQ     REF_SPEC$,,AUTO
         3 001303   000005 036003                    ADLQ    5,DU
         3 001304   200127 756100                    STQ     CURR_BUF_TO_FREE$+4,,AUTO
         3 001305   200011 236100                    LDQ     REF_SPEC$,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:103  
         3 001306   000004 036003                    ADLQ    4,DU
         3 001307   200126 756100                    STQ     CURR_BUF_TO_FREE$+3,,AUTO
         3 001310   200012 236100                    LDQ     NODE_KEY$,,AUTO
         3 001311   000103 235000 4                  LDA     67
         3 001312   200124 757100                    STAQ    CURR_BUF_TO_FREE$+1,,AUTO
         3 001313   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 001314   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001315   000000 701000 xent               TSX1    VDG$ERRMSG
         3 001316   001317 702000 3                  TSX2    O_FAILED

  11394  3 001317                       O_FAILED     null
      791    11395    2             REF$SPEC.M#, REF$SPEC.N#) ALTRET (O_FAILED);
      792    11396    2   O_FAILED: ;
      793    11397    2           ALTRETURN;

  11397  3 001317   200116 221300                    LDX1  ! EDITING_WINDOW_HEIGHT+1,,AUTO
         3 001320   000000 702211                    TSX2  ! 0,X1

      794    11398
      795    11399        %BOX (TITLE="Writers which call WRTR_NUMBER but do other things as well.");

             11411    2   /***************************************************************************
             11413    2    *                                                                         *
             11417    2            *        Writers which call WRTR_NUMBER but do other things as well.     *
             11419    2            *                                                                        *
             11421    2          ***************************************************************************/

      796    11425
      797    11426
      798    11427    2   WRTR_BOOLEAN: ENTRY (GLOBAL) ALTRET;

  11427  3 001321   200116 741300       WRTR_BOOLEAN STX1  ! EDITING_WINDOW_HEIGHT+1,,AUTO

      799    11428
      800    11429    2           GOTO COMMON_NUMBER; /* GLOBAL.OBJECT.CLASS# defines any differences */

  11429  3 001322   001063 710000 3                  TRA     COMMON_NUMBER
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:104  

      801    11430    2   WRTR_$HSCROLL: ENTRY (GLOBAL) ALTRET;

  11430  3 001323   200116 741300       WRTR_$HSCRO* STX1  ! EDITING_WINDOW_HEIGHT+1,,AUTO
         3 001324   001326 710000 3                  TRA     s:11434

      802    11431
      803    11432    2   WRTR_$HSCROLL_MARGIN: ENTRY (GLOBAL) ALTRET;

  11432  3 001325   200116 741300       WRTR_$HSCRO* STX1  ! EDITING_WINDOW_HEIGHT+1,,AUTO

      804    11433
      805    11434    3           IF NOT NODE_EXISTS THEN DO;

  11434  3 001326   200006 470500                    LDP0    @NODE_EXISTS,,AUTO
         3 001327   000000 234100                    SZN     0,,PR0
         3 001330   001346 604000 3                  TMI     s:11442

      806    11435                   /*
      807    11436                   *  Creating node:  adjust NAME_SPEC.M# and .N# based on
      808    11437                   *    current screen width.
      809    11438                   */
      810    11439    3              REF$SPEC.M# = MINIMUM(REF$SPEC.M#, VD_SCREEN_WIDTH);

  11439  3 001331   000000 236000 xsym               LDQ     VD_SCREEN_WIDTH
         3 001332   200011 471500                    LDP1    REF_SPEC$,,AUTO
         3 001333   001336 604000 3                  TMI     s:11439+5
         3 001334   100004 116100                    CMPQ    4,,PR1
         3 001335   001337 604400 3                  TMOZ    s:11439+6
         3 001336   100004 236100                    LDQ     4,,PR1
         3 001337   100004 756100                    STQ     4,,PR1

      811    11440    3              REF$SPEC.N# = MINIMUM(REF$SPEC.N#, VD_SCREEN_WIDTH);

  11440  3 001340   000000 236000 xsym               LDQ     VD_SCREEN_WIDTH
         3 001341   001344 604000 3                  TMI     s:11440+4
         3 001342   100005 116100                    CMPQ    5,,PR1
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:105  
         3 001343   001345 604400 3                  TMOZ    s:11440+5
         3 001344   100005 236100                    LDQ     5,,PR1
         3 001345   100005 756100                    STQ     5,,PR1

      812    11441    3              END;

      813    11442    2           GOTO COMMON_NUMBER;

  11442  3 001346   001063 710000 3                  TRA     COMMON_NUMBER

      814    11443
      815    11444
      816    11445    2   WRTR_$VSCROLL: ENTRY (GLOBAL) ALTRET;

  11445  3 001347   200116 741300       WRTR_$VSCRO* STX1  ! EDITING_WINDOW_HEIGHT+1,,AUTO
         3 001350   001352 710000 3                  TRA     s:11449

      817    11446
      818    11447    2   WRTR_$VSCROLL_MARGIN: ENTRY (GLOBAL) ALTRET;

  11447  3 001351   200116 741300       WRTR_$VSCRO* STX1  ! EDITING_WINDOW_HEIGHT+1,,AUTO

      819    11448
      820    11449    3           IF NOT NODE_EXISTS THEN DO;

  11449  3 001352   200006 470500                    LDP0    @NODE_EXISTS,,AUTO
         3 001353   000000 234100                    SZN     0,,PR0
         3 001354   001372 604000 3                  TMI     s:11457

      821    11450                   /*
      822    11451                   *  Creating node:  adjust NAME_SPEC.M# and .N# based on
      823    11452                   *    current screen height.
      824    11453                   */
      825    11454    3              REF$SPEC.M# = MINIMUM(REF$SPEC.M#, VD_SCREEN_HEIGHT);

  11454  3 001355   000000 236000 xsym               LDQ     VD_SCREEN_HEIGHT
         3 001356   200011 471500                    LDP1    REF_SPEC$,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:106  
         3 001357   001362 604000 3                  TMI     s:11454+5
         3 001360   100004 116100                    CMPQ    4,,PR1
         3 001361   001363 604400 3                  TMOZ    s:11454+6
         3 001362   100004 236100                    LDQ     4,,PR1
         3 001363   100004 756100                    STQ     4,,PR1

      826    11455    3              REF$SPEC.N# = MINIMUM(REF$SPEC.N#, VD_SCREEN_HEIGHT);

  11455  3 001364   000000 236000 xsym               LDQ     VD_SCREEN_HEIGHT
         3 001365   001370 604000 3                  TMI     s:11455+4
         3 001366   100005 116100                    CMPQ    5,,PR1
         3 001367   001371 604400 3                  TMOZ    s:11455+5
         3 001370   100005 236100                    LDQ     5,,PR1
         3 001371   100005 756100                    STQ     5,,PR1

      827    11456    3              END;

      828    11457    2           GOTO COMMON_NUMBER;

  11457  3 001372   001063 710000 3                  TRA     COMMON_NUMBER

      829    11458
      830    11459    2   END WRTR_NUMBER;
      831    11460
      832    11461        %BOX (TITLE="Writers for field which are MIN/MAX pairs.", PAGE=YES);
             11469    2
             11473    2   /***************************************************************************
             11475    2    *                                                                         *
             11479    2            *                 Writers for field which are MIN/MAX pairs.             *
             11481    2            *                                                                        *
             11483    2          ***************************************************************************/

      833    11487
      834    11488        /*I* NAME: WRTR_MIN_MAX_PAIRS
      835    11489            PARAMETERS:
      836    11490                GLOBAL must be a VD$NUMBER.
      837    11491            INPUT:
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:107  
      838    11492                DATA may be either a VD$NUMBER or a VD$BUFFER.
      839    11493            DESCRIPTION:
      840    11494                Call WRTR_NUMBER or WRTR_BOOLEAN to validate the value first.
      841    11495                If all ok, see if the name's twin (MIN/MAX-wise) is
      842    11496                    appropriately greater or lesser; if not, change this
      843    11497                    name's value to the limit implied by its twin's value.
      844    11498        */
      845    11499
      846    11500    1   WRTR_MIN_MAX_PAIRS: PROC (GLOBAL) ALTRET;

  11500  3 001373   200052 741300       WRTR_MIN_MA* STX1  ! ERRCODE+2,,AUTO
         3 001374   001376 710000 3                  TRA     s:11651

      847    11501
      848    11502        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
      849    11547
      850    11548
      851    11549    2   DCL WINDOWS_L0_NODE$ PTR;
      852    11550    2   DCL EDITING_WINDOW_LINES SBIN;
      853    11551    2   DCL OLD_$SCREEN SBIN;
      854    11552
      855    11553
      856    11554        %VD$FILE_NODE (NAME=WINDOWS$L0_NODE, STCLASS="BASED(WINDOWS_L0_NODE$)");
      857    11647
      858    11648
      859    11649    2   WRTR_$MIN_COMMAND: ENTRY (GLOBAL) ALTRET;

  11649  3 001375   200052 741300       WRTR_$MIN_C* STX1  ! ERRCODE+2,,AUTO

      860    11650
      861    11651    2           IF VD_EDITING_HEIGHT = 0 THEN

  11651  3 001376   000000 235000 xsym               LDA     VD_EDITING_HEIGHT
         3 001377   001404 601000 3                  TNZ     s:11653

      862    11652    2              OLD_$SCREEN = VD_SCREEN_HEIGHT - VD_IBEX_WINDOW;

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:108  
  11652  3 001400   000000 236000 xsym               LDQ     VD_SCREEN_HEIGHT
         3 001401   000000 136000 xsym               SBLQ    VD_IBEX_WINDOW
         3 001402   200056 756100                    STQ     OLD_$SCREEN,,AUTO
         3 001403   001407 710000 3                  TRA     s:11654

      863    11653    2           ELSE OLD_$SCREEN = VD_EDITING_HEIGHT + VD_$MIN_COMMAND.V#;

  11653  3 001404   000000 236000 xsym               LDQ     VD_EDITING_HEIGHT
         3 001405   000003 036000 xsym               ADLQ    VD_$MIN_COMMAND+3
         3 001406   200056 756100                    STQ     OLD_$SCREEN,,AUTO

      864    11654    2           CALL WRTR_NUMBER (GLOBAL)

  11654  3 001407   200053 236100                    LDQ     @GLOBAL,,AUTO
         3 001410   200117 756100                    STQ     @GLOBAL,,AUTO
         3 001411   001062 701000 3                  TSX1    WRTR_NUMBER
         3 001412   001553 702000 3                  TSX2    X_FAILED

      865    11655    2             ALTRET (X_FAILED);
      866    11656    2           WINDOWS_L0_NODE$ = VD_6E.WINDOWS$ ->VD$STREAM.PORT$ ->

  11656  3 001413   000006 470400 xsym               LDP0    VD_6E+6
         3 001414   000001 471500                    LDP1    1,,PR0
         3 001415   100031 236100                    LDQ     25,,PR1
         3 001416   200054 756100                    STQ     WINDOWS_L0_NODE$,,AUTO

      867    11657    2             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
      868    11658    2           EDITING_WINDOW_LINES = MAXIMUM (0, WINDOWS$L0_NODE.COUNT# - 1);

  11658  3 001417   200054 473500                    LDP3    WINDOWS_L0_NODE$,,AUTO
         3 001420   300014 236100                    LDQ     12,,PR3
         3 001421   000001 136007                    SBLQ    1,DL
         3 001422   000000 116003                    CMPQ    0,DU
         3 001423   001425 605000 3                  TPL     s:11658+6
         3 001424   000000 236003                    LDQ     0,DU
         3 001425   200055 756100                    STQ     EDITING_WINDOW_LINES,,AUTO

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:109  
      869    11659    2           IF VD_$WI_BORDER.LENGTH# > 0 THEN

  11659  3 001426   000002 220000 xsym               LDX0    VD_$WI_BORDER+2
         3 001427   001431 604400 3                  TMOZ    s:11661

      870    11660    2              EDITING_WINDOW_LINES = EDITING_WINDOW_LINES * 2;

  11660  3 001430   200055 056100                    ASQ     EDITING_WINDOW_LINES,,AUTO

      871    11661    3           IF (VD_$MIN_COMMAND.V# + EDITING_WINDOW_LINES) > OLD_$SCREEN THEN DO;

  11661  3 001431   000003 236000 xsym               LDQ     VD_$MIN_COMMAND+3
         3 001432   200055 036100                    ADLQ    EDITING_WINDOW_LINES,,AUTO
         3 001433   200056 116100                    CMPQ    OLD_$SCREEN,,AUTO
         3 001434   001442 604400 3                  TMOZ    s:11666

      872    11662    3              VD_$MIN_COMMAND.V# = OLD_$SCREEN - EDITING_WINDOW_LINES;

  11662  3 001435   200056 236100                    LDQ     OLD_$SCREEN,,AUTO
         3 001436   200055 136100                    SBLQ    EDITING_WINDOW_LINES,,AUTO
         3 001437   000003 756000 xsym               STQ     VD_$MIN_COMMAND+3

      873    11663    3              DATA$NUMBER.V# = VD_$MIN_COMMAND.V#;

  11663  3 001440   200013 471500                    LDP1    DATA$,,AUTO
         3 001441   100003 756100                    STQ     3,,PR1

      874    11664                   /*??* Warn the user of the change? */
      875    11665    3              END;

      876    11666    3           IF VD_$MIN_COMMAND.V# > VD_$MAX_COMMAND.V# THEN DO;

  11666  3 001442   000003 236000 xsym               LDQ     VD_$MIN_COMMAND+3
         3 001443   000003 116000 xsym               CMPQ    VD_$MAX_COMMAND+3
         3 001444   001453 604400 3                  TMOZ    s:11674

      877    11667    3              VD_$MIN_COMMAND.V# = VD_$MAX_COMMAND.V#;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:110  

  11667  3 001445   000003 235000 xsym               LDA     VD_$MAX_COMMAND+3
         3 001446   000003 755000 xsym               STA     VD_$MIN_COMMAND+3

      878    11668    3              ERRCODE = %E$WARN_MIN_CANT_BE_GRTR_MAX;

  11668  3 001447   000413 236007                    LDQ     267,DL
         3 001450   200050 756100                    STQ     ERRCODE,,AUTO

      879    11669    3              CALL WARN_PAIRS_DONT_COOPERATE

  11669  3 001451   001625 701000 3                  TSX1    WARN_PAIRS_DONT_COOPERATE
         3 001452   001553 702000 3                  TSX2    X_FAILED

      880    11670    3                ALTRET (X_FAILED);
      881    11671    3              END;

      882    11672
      883    11673                /* If cmd window height not in $MIN_CMD .. $MAX_CMD, change it */
      884    11674    2           CALL ADJUST_COMMAND_WINDOW

  11674  3 001453   001555 701000 3                  TSX1    ADJUST_COMMAND_WINDOW
         3 001454   001553 702000 3                  TSX2    X_FAILED

      885    11675    2             ALTRET (X_FAILED);
      886    11676    2           IF VD_EDITING_HEIGHT > 0 THEN

  11676  3 001455   000000 235000 xsym               LDA     VD_EDITING_HEIGHT
         3 001456   001462 604400 3                  TMOZ    s:11679

      887    11677    2              VD_EDITING_HEIGHT = OLD_$SCREEN - VD_$MIN_COMMAND.V#;

  11677  3 001457   200056 236100                    LDQ     OLD_$SCREEN,,AUTO
         3 001460   000003 136000 xsym               SBLQ    VD_$MIN_COMMAND+3
         3 001461   000000 756000 xsym               STQ     VD_EDITING_HEIGHT

      888    11678
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:111  
      889    11679    2           RETURN;

  11679  3 001462   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 001463   000001 702211                    TSX2  ! 1,X1

      890    11680
      891    11681
      892    11682    2   WRTR_$MIN_RECORD: ENTRY (GLOBAL) ALTRET;

  11682  3 001464   200052 741300       WRTR_$MIN_R* STX1  ! ERRCODE+2,,AUTO

      893    11683
      894    11684    2           CALL WRTR_NUMBER (GLOBAL)

  11684  3 001465   200053 236100                    LDQ     @GLOBAL,,AUTO
         3 001466   200117 756100                    STQ     @GLOBAL,,AUTO
         3 001467   001062 701000 3                  TSX1    WRTR_NUMBER
         3 001470   001553 702000 3                  TSX2    X_FAILED

      895    11685    2             ALTRET (X_FAILED);
      896    11686    3           IF VD_$MIN_RECORD.V# > VD_$MAX_RECORD.V# THEN DO;

  11686  3 001471   000003 236000 xsym               LDQ     VD_$MIN_RECORD+3
         3 001472   000003 116000 xsym               CMPQ    VD_$MAX_RECORD+3
         3 001473   001502 604400 3                  TMOZ    s:11693

      897    11687    3              VD_$MIN_RECORD.V# = VD_$MAX_RECORD.V#;

  11687  3 001474   000003 235000 xsym               LDA     VD_$MAX_RECORD+3
         3 001475   000003 755000 xsym               STA     VD_$MIN_RECORD+3

      898    11688    3              ERRCODE = %E$WARN_MIN_CANT_BE_GRTR_MAX;

  11688  3 001476   000413 236007                    LDQ     267,DL
         3 001477   200050 756100                    STQ     ERRCODE,,AUTO

      899    11689    3              CALL WARN_PAIRS_DONT_COOPERATE
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:112  

  11689  3 001500   001625 701000 3                  TSX1    WARN_PAIRS_DONT_COOPERATE
         3 001501   001553 702000 3                  TSX2    X_FAILED

      900    11690    3                ALTRET (X_FAILED);
      901    11691    3              END;

      902    11692
      903    11693    2           RETURN;

  11693  3 001502   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 001503   000001 702211                    TSX2  ! 1,X1

      904    11694
      905    11695
      906    11696    2   WRTR_$MAX_COMMAND: ENTRY (GLOBAL) ALTRET;

  11696  3 001504   200052 741300       WRTR_$MAX_C* STX1  ! ERRCODE+2,,AUTO

      907    11697
      908    11698    2           CALL WRTR_NUMBER (GLOBAL)

  11698  3 001505   200053 236100                    LDQ     @GLOBAL,,AUTO
         3 001506   200117 756100                    STQ     @GLOBAL,,AUTO
         3 001507   001062 701000 3                  TSX1    WRTR_NUMBER
         3 001510   001553 702000 3                  TSX2    X_FAILED

      909    11699    2             ALTRET (X_FAILED);
      910    11700    3           IF VD_$MAX_COMMAND.V# > VD_SCREEN_HEIGHT THEN DO;

  11700  3 001511   000000 236000 xsym               LDQ     VD_SCREEN_HEIGHT
         3 001512   001516 604000 3                  TMI     s:11704
         3 001513   000003 116000 xsym               CMPQ    VD_$MAX_COMMAND+3
         3 001514   001516 605000 3                  TPL     s:11704

      911    11701    3              VD_$MAX_COMMAND.V# = VD_SCREEN_HEIGHT;

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:113  
  11701  3 001515   000003 756000 xsym               STQ     VD_$MAX_COMMAND+3

      912    11702                   /*??* Warn the user of the change? */
      913    11703    3              END;

      914    11704    3           IF VD_$MAX_COMMAND.V# < VD_$MIN_COMMAND.V# THEN DO;

  11704  3 001516   000003 236000 xsym               LDQ     VD_$MAX_COMMAND+3
         3 001517   000003 116000 xsym               CMPQ    VD_$MIN_COMMAND+3
         3 001520   001527 605000 3                  TPL     s:11712

      915    11705    3              VD_$MAX_COMMAND.V# = VD_$MIN_COMMAND.V#;

  11705  3 001521   000003 235000 xsym               LDA     VD_$MIN_COMMAND+3
         3 001522   000003 755000 xsym               STA     VD_$MAX_COMMAND+3

      916    11706    3              ERRCODE = %E$WARN_MAX_CANT_BE_LESS_MIN;

  11706  3 001523   000414 236007                    LDQ     268,DL
         3 001524   200050 756100                    STQ     ERRCODE,,AUTO

      917    11707    3              CALL WARN_PAIRS_DONT_COOPERATE

  11707  3 001525   001625 701000 3                  TSX1    WARN_PAIRS_DONT_COOPERATE
         3 001526   001553 702000 3                  TSX2    X_FAILED

      918    11708    3                ALTRET (X_FAILED);
      919    11709    3              END;

      920    11710
      921    11711                /* If cmd window height not in $MIN_CMD .. $MAX_CMD, change it */
      922    11712    2           CALL ADJUST_COMMAND_WINDOW

  11712  3 001527   001555 701000 3                  TSX1    ADJUST_COMMAND_WINDOW
         3 001530   001553 702000 3                  TSX2    X_FAILED

      923    11713    2             ALTRET (X_FAILED);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:114  
      924    11714
      925    11715    2           RETURN;

  11715  3 001531   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 001532   000001 702211                    TSX2  ! 1,X1

      926    11716
      927    11717
      928    11718    2   WRTR_$MAX_RECORD: ENTRY (GLOBAL) ALTRET;

  11718  3 001533   200052 741300       WRTR_$MAX_R* STX1  ! ERRCODE+2,,AUTO

      929    11719
      930    11720    2           CALL WRTR_NUMBER (GLOBAL)

  11720  3 001534   200053 236100                    LDQ     @GLOBAL,,AUTO
         3 001535   200117 756100                    STQ     @GLOBAL,,AUTO
         3 001536   001062 701000 3                  TSX1    WRTR_NUMBER
         3 001537   001553 702000 3                  TSX2    X_FAILED

      931    11721    2             ALTRET (X_FAILED);
      932    11722    3           IF VD_$MAX_RECORD.V# < VD_$MIN_RECORD.V# THEN DO;

  11722  3 001540   000003 236000 xsym               LDQ     VD_$MAX_RECORD+3
         3 001541   000003 116000 xsym               CMPQ    VD_$MIN_RECORD+3
         3 001542   001551 605000 3                  TPL     s:11729

      933    11723    3              VD_$MAX_RECORD.V# = VD_$MIN_RECORD.V#;

  11723  3 001543   000003 235000 xsym               LDA     VD_$MIN_RECORD+3
         3 001544   000003 755000 xsym               STA     VD_$MAX_RECORD+3

      934    11724    3              ERRCODE = %E$WARN_MAX_CANT_BE_LESS_MIN;

  11724  3 001545   000414 236007                    LDQ     268,DL
         3 001546   200050 756100                    STQ     ERRCODE,,AUTO

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:115  
      935    11725    3              CALL WARN_PAIRS_DONT_COOPERATE

  11725  3 001547   001625 701000 3                  TSX1    WARN_PAIRS_DONT_COOPERATE
         3 001550   001553 702000 3                  TSX2    X_FAILED

      936    11726    3                ALTRET (X_FAILED);
      937    11727    3              END;

      938    11728
      939    11729    2           RETURN;

  11729  3 001551   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 001552   000001 702211                    TSX2  ! 1,X1

      940    11730
      941    11731    2   X_FAILED: ALTRETURN;

  11731  3 001553   200052 221300       X_FAILED     LDX1  ! ERRCODE+2,,AUTO
         3 001554   000000 702211                    TSX2  ! 0,X1

      942    11732
      943    11733    2   ADJUST_COMMAND_WINDOW: PROC ALTRET;

  11733  3 001555   200060 741300       ADJUST_COMM* STX1  ! SINK+1,,AUTO

      944    11734
      945    11735    3   DCL CMD_WINDOW$ PTR;
      946    11736        %VD$WINDOW_SPEC (NAME=WSPEC, STCLASS=AUTO);
      947    11802
      948    11803
      949    11804        %VD$WINDOW_SPEC (NAME=CMD$WINDOW, STCLASS="BASED(CMD_WINDOW$)");
      950    11870
      951    11871
      952    11872
      953    11873    3           IF VD_COMMAND_WINDOW$ = ADDR(NIL)

  11873  3 001556   000000 236000 xsym               LDQ     VD_COMMAND_WINDOW$
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:116  
         3 001557   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001560   001564 600000 3                  TZE     s:11875
         3 001561   000003 235000 xsym               LDA     VD_$SCREEN+3
         3 001562   000003 115007                    CMPA    3,DL
         3 001563   001565 605000 3                  TPL     s:11876

      954    11874    3             OR VD_$SCREEN.V# < %MN_SCREEN_EDITING_HEIGHT THEN
      955    11875    3              RETURN;

  11875  3 001564   000001 702211                    TSX2  ! 1,X1

      956    11876    3           WSPEC = %CLEAR;

  11876  3 001565   000100 100400                    MLR     fill='000'O
         3 001566   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 001567   200062 000144                    ADSC9   WSPEC,,AUTO              cn=0,n=100

      957    11877    3           CMD_WINDOW$ = VD_COMMAND_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;

  11877  3 001570   000000 470400 xsym               LDP0    VD_COMMAND_WINDOW$
         3 001571   000007 236100                    LDQ     7,,PR0
         3 001572   200061 756100                    STQ     CMD_WINDOW$,,AUTO

      958    11878    3           IF CMD$WINDOW.COORDS.HEIGHT# < VD_$MIN_COMMAND.V# THEN

  11878  3 001573   200061 471500                    LDP1    CMD_WINDOW$,,AUTO
         3 001574   100005 236100                    LDQ     5,,PR1
         3 001575   000003 116000 xsym               CMPQ    VD_$MIN_COMMAND+3
         3 001576   001602 605000 3                  TPL     s:11880

      959    11879    3              WSPEC.COORDS.HEIGHT# = VD_$MIN_COMMAND.V#;

  11879  3 001577   000003 235000 xsym               LDA     VD_$MIN_COMMAND+3
         3 001600   200067 755100                    STA     NEW_WSPEC+3,,AUTO
         3 001601   001610 710000 3                  TRA     s:11884

      960    11880    3           ELSE IF CMD$WINDOW.COORDS.HEIGHT# > VD_$MAX_COMMAND.V# THEN
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:117  

  11880  3 001602   000003 116000 xsym               CMPQ    VD_$MAX_COMMAND+3
         3 001603   001607 604400 3                  TMOZ    s:11883

      961    11881    3                 WSPEC.COORDS.HEIGHT# = VD_$MAX_COMMAND.V#;

  11881  3 001604   000003 235000 xsym               LDA     VD_$MAX_COMMAND+3
         3 001605   200067 755100                    STA     NEW_WSPEC+3,,AUTO
         3 001606   001610 710000 3                  TRA     s:11884

      962    11882    3              ELSE
      963    11883    3                 RETURN;

  11883  3 001607   000001 702211                    TSX2  ! 1,X1

      964    11884    3           CALL VDP$WCHANGE (VD_COMMAND_WINDOW$->VD$FILE_NODE, WSPEC)

  11884  3 001610   200062 633500                    EPPR3   WSPEC,,AUTO
         3 001611   200125 453500                    STP3    CURR_BUF_TO_FREE$+2,,AUTO
         3 001612   000000 236000 xsym               LDQ     VD_COMMAND_WINDOW$
         3 001613   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 001614   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 001615   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001616   000000 701000 xent               TSX1    VDP$WCHANGE
         3 001617   001621 702000 3                  TSX2    s:11885
         3 001620   001623 710000 3                  TRA     s:11887

      965    11885    4           WHENALTRETURN DO; ALTRETURN; END;

  11885  3 001621   200060 221300                    LDX1  ! SINK+1,,AUTO
         3 001622   000000 702211                    TSX2  ! 0,X1

      966    11886
      967    11887    3           RETURN;

  11887  3 001623   200060 221300                    LDX1  ! SINK+1,,AUTO
         3 001624   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:118  

      968    11888
      969    11889    3   END ADJUST_COMMAND_WINDOW;
      970    11890
      971    11891
      972    11892    2   WARN_PAIRS_DONT_COOPERATE: PROC ALTRET;

  11892  3 001625   200060 741300       WARN_PAIRS_* STX1  ! SINK+1,,AUTO

      973    11893
      974    11894
      975    11895    3           DATA$NUMBER.V# = GLOBAL.V#;

  11895  3 001626   200053 470500                    LDP0    @GLOBAL,,AUTO
         3 001627   200013 471500                    LDP1    DATA$,,AUTO
         3 001630   000003 235100                    LDA     3,,PR0
         3 001631   100003 755100                    STA     3,,PR1

      976    11896    3           DATA_TEXTC.LENGTH# = LENGTHC(NODE$KEY.BYTES) - %LENGTHC('$MIN');

  11896  3 001632   200012 473500                    LDP3    NODE_KEY$,,AUTO
         3 001633   300000 236100                    LDQ     0,,PR3
         3 001634   000033 772000                    QRL     27
         3 001635   000004 136007                    SBLQ    4,DL
         3 001636   000033 736000                    QLS     27
         3 001637   200014 552140                    STBQ    DATA_TEXTC,'40'O,AUTO

      977    11897    3           DATA_TEXTC.BYTES = SUBSTR(NODE$KEY.BYTES, %LENGTHC('$MIN'));

  11897  3 001640   300000 236100                    LDQ     0,,PR3
         3 001641   000033 772000                    QRL     27
         3 001642   777774 620006                    EAX0    -4,QL
         3 001643   040100 100540                    MLR     fill='040'O
         3 001644   300001 200010                    ADSC9   1,,PR3                   cn=1,n=*X0
         3 001645   200014 200013                    ADSC9   DATA_TEXTC,,AUTO         cn=1,n=11

      978    11898    3           CALL VDG$WARNMSG (ERRCODE, NODE$KEY, DATA_TEXTC);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:119  

  11898  3 001646   200014 634500                    EPPR4   DATA_TEXTC,,AUTO
         3 001647   200126 454500                    STP4    CURR_BUF_TO_FREE$+3,,AUTO
         3 001650   200012 236100                    LDQ     NODE_KEY$,,AUTO
         3 001651   200125 756100                    STQ     CURR_BUF_TO_FREE$+2,,AUTO
         3 001652   200050 635500                    EPPR5   ERRCODE,,AUTO
         3 001653   200124 455500                    STP5    CURR_BUF_TO_FREE$+1,,AUTO
         3 001654   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 001655   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 001656   000000 701000 xent               TSX1    VDG$WARNMSG
         3 001657   000000 011000                    NOP     0

      979    11899
      980    11900    3           CALL VDG$EREPORT_ERROR;     /* Report the warning */

  11900  3 001660   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001661   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         3 001662   000000 011000                    NOP     0

      981    11901
      982    11902    3           RETURN;

  11902  3 001663   200060 221300                    LDX1  ! SINK+1,,AUTO
         3 001664   000001 702211                    TSX2  ! 1,X1

      983    11903
      984    11904
      985    11905    3   END WARN_PAIRS_DONT_COOPERATE;
      986    11906
      987    11907    2   END WRTR_MIN_MAX_PAIRS;
      988    11908
      989    11909        %BOX (TITLE=WRTR_$SCREEN, PAGE=YES);
             11917    2
             11921    2   /***************************************************************************
             11923    2    *                                                                         *
             11927    2            *                                WRTR_$SCREEN                            *
             11929    2            *                                                                        *
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:120  
             11931    2          ***************************************************************************/

      990    11935
      991    11936        /*I* NAME: WRTR_$SCREEN
      992    11937            PARAMETERS:
      993    11938                GLOBAL must be a VD$NUMBER.
      994    11939            INPUT:
      995    11940                DATA may be either a VD$NUMBER or a VD$BUFFER.
      996    11941            DESCRIPTION:
      997    11942                After changing $SCREEN's value, adjust the values of
      998    11943                $MAX_COMMAND, $MIN_COMMAND, $VSCROLL, and $VSCROLL_MARGIN
      999    11944                so they are between 0 and the new value of $SCREEN.
     1000    11945        */
     1001    11946
     1002    11947    1   WRTR_$SCREEN: PROC (GLOBAL) ALTRET;

  11947  3 001665   200052 741300       WRTR_$SCREEN STX1  ! ERRCODE+2,,AUTO

     1003    11948
     1004    11949        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
     1005    11994
     1006    11995
     1007    11996    2   DCL WINDOWS_L0_NODE$ PTR;
     1008    11997    2   DCL MN_HEIGHT SBIN;
     1009    11998    2   DCL N_EDITING_WINDOWS SBIN;
     1010    11999    2   DCL N_BORDERS SBIN;
     1011    12000    2   DCL CURR_NODE$ PTR;
     1012    12001    2   DCL OLD_$SCREEN SBIN;
     1013    12002    2   DCL OLD_CURRENT_WINDOW$ PTR;
     1014    12003    2   DCL SCREEN_PERCENT SBIN;
     1015    12004        %VD$WINDOW_SPEC (NAME=NEW_WSPEC, STCLASS=AUTO);
     1016    12070    2   DCL EDITING_WINDOW_HEIGHT SBIN;
     1017    12071
     1018    12072
     1019    12073        %VD$FILE_NODE (NAME=WINDOWS$L0_NODE, STCLASS="BASED(WINDOWS_L0_NODE$)");
     1020    12166        %VD$FILE_NODE (NAME=CURR$NODE, STCLASS="BASED(CURR_NODE$)");
     1021    12259
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:121  
     1022    12260
     1023    12261                /*
     1024    12262                *   Guarantee that NAME_SPEC.M# and .N# are valid for the current
     1025    12263                *       screen height.  The NAME_SPEC may be coming from a workspace
     1026    12264                *       file which was SAVEd with a different screen height.
     1027    12265                *   Also, if the new value is a %CLS_NUMBER, we always force it to be
     1028    12266                *       legal; again, it may be coming from a workspace file which was
     1029    12267                *       SAVEd with a different screen height; if we let WRTR_NUMBER
     1030    12268                *       catch the error, it'll report a %FLV_SERIOUS error and abort
     1031    12269                *       the rest of the workspace file.  So instead, $SCREEN is a
     1032    12270                *       "magic" name which sometimes tops out at VD_SCREEN_HEIGHT, no
     1033    12271                *       matter what value is assigned to it.
     1034    12272                *N**N*  Should we warn the user if we change the new value?!?!?
     1035    12273                *   Let WRTR_NUMBER catch and report values < 0, and all bad values in
     1036    12274                *       %CLS_BUFFERs.
     1037    12275                */
     1038    12276    2           OLD_$SCREEN = VD_$SCREEN.V#; /* Save to determine how to fix windows */

  12276  3 001666   000003 235000 xsym               LDA     VD_$SCREEN+3
         3 001667   200061 755100                    STA     OLD_$SCREEN,,AUTO

     1039    12277    2           REF$SPEC.M# = 0;

  12277  3 001670   200011 470500                    LDP0    REF_SPEC$,,AUTO
         3 001671   000004 450100                    STZ     4,,PR0

     1040    12278    2           REF$SPEC.N# = VD_SCREEN_HEIGHT;

  12278  3 001672   000000 236000 xsym               LDQ     VD_SCREEN_HEIGHT
         3 001673   000005 756100                    STQ     5,,PR0

     1041    12279    2           IF DATA.OBJECT.CLASS# = %CLS_NUMBER THEN

  12279  3 001674   200005 471500                    LDP1    @DATA,,AUTO
         3 001675   100000 220100                    LDX0    0,,PR1
         3 001676   000033 100003                    CMPX0   27,DU
         3 001677   001707 601000 3                  TNZ     s:12281
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:122  

     1042    12280    2              DATA$NUMBER.V# = MINIMUM(DATA$NUMBER.V#, VD_SCREEN_HEIGHT);

  12280  3 001700   200013 473500                    LDP3    DATA$,,AUTO
         3 001701   000000 116003                    CMPQ    0,DU
         3 001702   001705 604000 3                  TMI     s:12280+5
         3 001703   300003 116100                    CMPQ    3,,PR3
         3 001704   001706 604400 3                  TMOZ    s:12280+6
         3 001705   300003 236100                    LDQ     3,,PR3
         3 001706   300003 756100                    STQ     3,,PR3

     1043    12281    2           CALL WRTR_NUMBER (GLOBAL)

  12281  3 001707   200053 236100                    LDQ     @GLOBAL,,AUTO
         3 001710   200117 756100                    STQ     @GLOBAL,,AUTO
         3 001711   001062 701000 3                  TSX1    WRTR_NUMBER
         3 001712   001714 702000 3                  TSX2    s:12282
         3 001713   001716 710000 3                  TRA     s:12284

     1044    12282    3           WHENALTRETURN DO; ALTRETURN; END;

  12282  3 001714   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 001715   000000 702211                    TSX2  ! 0,X1

     1045    12283
     1046    12284    2           WINDOWS_L0_NODE$ = VD_6E.WINDOWS$ -> VD$STREAM.PORT$ ->

  12284  3 001716   000006 470400 xsym               LDP0    VD_6E+6
         3 001717   000001 471500                    LDP1    1,,PR0
         3 001720   100031 236100                    LDQ     25,,PR1
         3 001721   200054 756100                    STQ     WINDOWS_L0_NODE$,,AUTO

     1047    12285    2             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     1048    12286    2           N_EDITING_WINDOWS = MAXIMUM (0, WINDOWS$L0_NODE.COUNT# - 1);

  12286  3 001722   200054 473500                    LDP3    WINDOWS_L0_NODE$,,AUTO
         3 001723   300014 236100                    LDQ     12,,PR3
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:123  
         3 001724   000001 136007                    SBLQ    1,DL
         3 001725   000000 116003                    CMPQ    0,DU
         3 001726   001730 605000 3                  TPL     s:12286+6
         3 001727   000000 236003                    LDQ     0,DU
         3 001730   200056 756100                    STQ     N_EDITING_WINDOWS,,AUTO

     1049    12287    2           N_BORDERS = VD_$WI_BORDER.LENGTH# + 1;

  12287  3 001731   000002 235000 xsym               LDA     VD_$WI_BORDER+2
         3 001732   000022 731000                    ARS     18
         3 001733   000001 035007                    ADLA    1,DL
         3 001734   200057 755100                    STA     N_BORDERS,,AUTO

     1050    12288    2           MN_HEIGHT = MAXIMUM (%MN_SCREEN_EDITING_HEIGHT, VD_$MIN_COMMAND.V# +

  12288  3 001735   200057 402100                    MPY     N_BORDERS,,AUTO
         3 001736   000003 036000 xsym               ADLQ    VD_$MIN_COMMAND+3
         3 001737   000003 116007                    CMPQ    3,DL
         3 001740   001742 605000 3                  TPL     s:12288+5
         3 001741   000003 236007                    LDQ     3,DL
         3 001742   200055 756100                    STQ     MN_HEIGHT,,AUTO

     1051    12289    2             N_EDITING_WINDOWS * N_BORDERS);
     1052    12290    2           IF VD_$SCREEN.V# = 1 THEN /* "ON" should mean back the default */

  12290  3 001743   000003 235000 xsym               LDA     VD_$SCREEN+3
         3 001744   000001 115007                    CMPA    1,DL
         3 001745   001751 601000 3                  TNZ     s:12292

     1053    12291    2              VD_$SCREEN.V# = VD_EDITING_HEIGHT+VD_$MIN_COMMAND.V#;

  12291  3 001746   000000 236000 xsym               LDQ     VD_EDITING_HEIGHT
         3 001747   000003 036000 xsym               ADLQ    VD_$MIN_COMMAND+3
         3 001750   000003 756000 xsym               STQ     VD_$SCREEN+3

     1054    12292    3           IF VD_$SCREEN.V# < MN_HEIGHT THEN DO;

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:124  
  12292  3 001751   000003 236000 xsym               LDQ     VD_$SCREEN+3
         3 001752   200055 116100                    CMPQ    MN_HEIGHT,,AUTO
         3 001753   001762 605000 3                  TPL     s:12298

     1055    12293    3              VD_$SCREEN.V# = 0;

  12293  3 001754   000003 450000 xsym               STZ     VD_$SCREEN+3

     1056    12294    3              IF VD_$COMMAND.V# = %BITBIN(FALSE) THEN

  12294  3 001755   000003 235000 xsym               LDA     VD_$COMMAND+3
         3 001756   002015 601000 3                  TNZ     s:12309

     1057    12295    3                 VD_$COMMAND.V# = %BITBIN(TRUE)+1; /* Default rd from cmd window */

  12295  3 001757   000002 236007                    LDQ     2,DL
         3 001760   000003 756000 xsym               STQ     VD_$COMMAND+3

     1058    12296    3              END;

  12296  3 001761   002015 710000 3                  TRA     s:12309

     1059    12297    3           ELSE DO;

     1060    12298    3              IF VD_$COMMAND.V# > %BITBIN(TRUE) THEN

  12298  3 001762   000003 235000 xsym               LDA     VD_$COMMAND+3
         3 001763   000001 115007                    CMPA    1,DL
         3 001764   001766 604400 3                  TMOZ    s:12300

     1061    12299    3                 VD_$COMMAND.V# = %BITBIN(FALSE); /* Back to edit wnd if chnged */

  12299  3 001765   000003 450000 xsym               STZ     VD_$COMMAND+3

     1062    12300    3              VD_$MAX_COMMAND.V# = MINIMUM (VD_$MAX_COMMAND.V#, VD_$SCREEN.V#);

  12300  3 001766   000003 116000 xsym               CMPQ    VD_$MAX_COMMAND+3
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:125  
         3 001767   001771 604400 3                  TMOZ    s:12300+3
         3 001770   000003 236000 xsym               LDQ     VD_$MAX_COMMAND+3
         3 001771   000003 756000 xsym               STQ     VD_$MAX_COMMAND+3

     1063    12301    3              VD_$MIN_COMMAND.V# = MINIMUM (VD_$MIN_COMMAND.V#,

  12301  3 001772   000003 236000 xsym               LDQ     VD_$SCREEN+3
         3 001773   200056 136100                    SBLQ    N_EDITING_WINDOWS,,AUTO
         3 001774   200057 136100                    SBLQ    N_BORDERS,,AUTO
         3 001775   000003 116000 xsym               CMPQ    VD_$MIN_COMMAND+3
         3 001776   002000 604400 3                  TMOZ    s:12301+6
         3 001777   000003 236000 xsym               LDQ     VD_$MIN_COMMAND+3
         3 002000   000003 756000 xsym               STQ     VD_$MIN_COMMAND+3

     1064    12302    3                VD_$SCREEN.V# - N_EDITING_WINDOWS - N_BORDERS);
     1065    12303    3              VD_$VSCROLL.V# = MINIMUM (VD_$VSCROLL.V#, VD_$SCREEN.V# / 2);

  12303  3 002001   000003 236000 xsym               LDQ     VD_$SCREEN+3
         3 002002   000002 506007                    DIV     2,DL
         3 002003   000003 116000 xsym               CMPQ    VD_$VSCROLL+3
         3 002004   002006 604400 3                  TMOZ    s:12303+5
         3 002005   000003 236000 xsym               LDQ     VD_$VSCROLL+3
         3 002006   000003 756000 xsym               STQ     VD_$VSCROLL+3

     1066    12304    3              VD_$VSCROLL_MARGIN.V# = MINIMUM (VD_$VSCROLL_MARGIN.V#,

  12304  3 002007   000003 236000 xsym               LDQ     VD_$SCREEN+3
         3 002010   000002 506007                    DIV     2,DL
         3 002011   000003 116000 xsym               CMPQ    VD_$VSCROLL_MARGIN+3
         3 002012   002014 604400 3                  TMOZ    s:12304+5
         3 002013   000003 236000 xsym               LDQ     VD_$VSCROLL_MARGIN+3
         3 002014   000003 756000 xsym               STQ     VD_$VSCROLL_MARGIN+3

     1067    12305    3                VD_$SCREEN.V# / 2);
     1068    12306    3              END;

     1069    12307
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:126  
     1070    12308                /* Adjust size of all windows */
     1071    12309    2           NEW_WSPEC = %CLEAR;

  12309  3 002015   000100 100400                    MLR     fill='000'O
         3 002016   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 002017   200064 000144                    ADSC9   NEW_WSPEC,,AUTO          cn=0,n=100

     1072    12310    2           CURR_NODE$ = WINDOWS$L0_NODE.TAIL$;

  12310  3 002020   300013 236100                    LDQ     11,,PR3
         3 002021   200060 756100                    STQ     CURR_NODE$,,AUTO

     1073    12311    2           IF CURR_NODE$ = ADDR(NIL)

  12311  3 002022   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002023   002031 600000 3                  TZE     s:12313
         3 002024   200061 236100                    LDQ     OLD_$SCREEN,,AUTO
         3 002025   000003 116000 xsym               CMPQ    VD_$SCREEN+3
         3 002026   002040 601000 3                  TNZ     s:12319
         3 002027   000000 235000 xsym               LDA     VD_OLD_$SCREEN
         3 002030   002040 601000 3                  TNZ     s:12319

     1074    12312    3             OR OLD_$SCREEN = VD_$SCREEN.V# AND VD_OLD_$SCREEN = 0 THEN DO;

     1075    12313    4              IF VD_OLD_$SCREEN > 0 THEN DO;

  12313  3 002031   000000 235000 xsym               LDA     VD_OLD_$SCREEN
         3 002032   002036 604400 3                  TMOZ    s:12317

     1076    12314    4                 DATA$NUMBER.V# = VD_OLD_$SCREEN;

  12314  3 002033   200013 471500                    LDP1    DATA$,,AUTO
         3 002034   100003 755100                    STA     3,,PR1

     1077    12315    4                 VD_$SCREEN.V# = 0;

  12315  3 002035   000003 450000 xsym               STZ     VD_$SCREEN+3
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:127  

     1078    12316    4                 END;

     1079    12317    3              RETURN;

  12317  3 002036   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002037   000001 702211                    TSX2  ! 1,X1

     1080    12318    3              END;
     1081    12319    2           OLD_$SCREEN = VD_$SCREEN.V#;

  12319  3 002040   000003 235000 xsym               LDA     VD_$SCREEN+3
         3 002041   200061 755100                    STA     OLD_$SCREEN,,AUTO

     1082    12320    2           VD_$SCREEN.V# = 0; /* Change all to 1dim to begin */

  12320  3 002042   000003 450000 xsym               STZ     VD_$SCREEN+3

     1083    12321    2           SCREEN_PERCENT = 0; /* Start counting lines currently in use */

  12321  3 002043   200063 450100                    STZ     SCREEN_PERCENT,,AUTO

     1084    12322    3           DO WHILE '1'B;

     1085    12323    3              SCREEN_PERCENT = SCREEN_PERCENT +

  12323  3 002044   200060 470500                    LDP0    CURR_NODE$,,AUTO
         3 002045   000007 471500                    LDP1    7,,PR0
         3 002046   200063 236100                    LDQ     SCREEN_PERCENT,,AUTO
         3 002047   100005 036100                    ADLQ    5,,PR1
         3 002050   200063 756100                    STQ     SCREEN_PERCENT,,AUTO

     1086    12324    3                CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS.HEIGHT#;
     1087    12325    3              NEW_WSPEC.COORDS = CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS;

  12325  3 002051   003100 060500                    CSL     bolr='003'O
         3 002052   100003 000222                    BDSC    3,,PR1                   by=0,bit=0,n=146
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:128  
         3 002053   200067 000222                    BDSC    NEW_WSPEC+3,,AUTO        by=0,bit=0,n=146

     1088    12326    3              CALL VDP$WCHANGE (CURR$NODE, NEW_WSPEC);

  12326  3 002054   200064 631500                    EPPR1   NEW_WSPEC,,AUTO
         3 002055   200125 451500                    STP1    CURR_BUF_TO_FREE$+2,,AUTO
         3 002056   200060 236100                    LDQ     CURR_NODE$,,AUTO
         3 002057   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 002060   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002061   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002062   000000 701000 xent               TSX1    VDP$WCHANGE
         3 002063   000000 011000                    NOP     0

     1089    12327    3              IF CURR$NODE.BLINK$ = ADDR(NIL) THEN EXIT;

  12327  3 002064   200060 470500                    LDP0    CURR_NODE$,,AUTO
         3 002065   000001 236100                    LDQ     1,,PR0
         3 002066   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002067   002072 600000 3                  TZE     s:12330

     1090    12328    3              CURR_NODE$ = CURR$NODE.BLINK$;

  12328  3 002070   200060 756100                    STQ     CURR_NODE$,,AUTO

     1091    12329    3              END;

  12329  3 002071   002044 710000 3                  TRA     s:12323

     1092    12330    2           VD_$SCREEN.V# = OLD_$SCREEN;

  12330  3 002072   200061 235100                    LDA     OLD_$SCREEN,,AUTO
         3 002073   000003 755000 xsym               STA     VD_$SCREEN+3

     1093    12331        /* Now set (and get) the new command window size */
     1094    12332    2           NEW_WSPEC.COORDS.HEIGHT# = VD_$SCREEN.V#;

  12332  3 002074   200071 755100                    STA     NEW_WSPEC+5,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:129  

     1095    12333    2           OLD_$SCREEN = CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS.HEIGHT#;

  12333  3 002075   000007 471500                    LDP1    7,,PR0
         3 002076   100005 235100                    LDA     5,,PR1
         3 002077   200061 755100                    STA     OLD_$SCREEN,,AUTO

     1096    12334    3           IF VD_$SCREEN.V#>0 THEN DO;

  12334  3 002100   000003 236000 xsym               LDQ     VD_$SCREEN+3
         3 002101   002116 604400 3                  TMOZ    s:12339

     1097    12335    3              CALL VDP$WCHANGE (CURR$NODE, NEW_WSPEC);

  12335  3 002102   200064 633500                    EPPR3   NEW_WSPEC,,AUTO
         3 002103   200125 453500                    STP3    CURR_BUF_TO_FREE$+2,,AUTO
         3 002104   200060 236100                    LDQ     CURR_NODE$,,AUTO
         3 002105   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 002106   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002107   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002110   000000 701000 xent               TSX1    VDP$WCHANGE
         3 002111   000000 011000                    NOP     0

     1098    12336    3              VD_$SCREEN.V# =

  12336  3 002112   200060 470500                    LDP0    CURR_NODE$,,AUTO
         3 002113   000007 471500                    LDP1    7,,PR0
         3 002114   100005 235100                    LDA     5,,PR1
         3 002115   000003 755000 xsym               STA     VD_$SCREEN+3

     1099    12337    3                CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS.HEIGHT#;
     1100    12338    3              END;

     1101    12339    2           IF DATA$NUMBER.V# = 2 THEN     /* if temporary expansion for SHOW ... */

  12339  3 002116   200013 473500                    LDP3    DATA$,,AUTO
         3 002117   300003 235100                    LDA     3,,PR3
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:130  
         3 002120   000002 115007                    CMPA    2,DL
         3 002121   002125 601000 3                  TNZ     s:12342

     1102    12340    2              DATA$NUMBER.V# = VD_OLD_$SCREEN;     /* Display the previous value */

  12340  3 002122   000000 236000 xsym               LDQ     VD_OLD_$SCREEN
         3 002123   300003 756100                    STQ     3,,PR3
         3 002124   002133 710000 3                  TRA     s:12345

     1103    12341    3           ELSE DO;

     1104    12342    3              DATA$NUMBER.V# = VD_$SCREEN.V#; /* Otherwise set the new value ... */

  12342  3 002125   000003 236000 xsym               LDQ     VD_$SCREEN+3
         3 002126   300003 756100                    STQ     3,,PR3

     1105    12343    3              IF VD_OLD_$SCREEN>0 THEN VD_OLD_$SCREEN = VD_$SCREEN.V#;

  12343  3 002127   000000 235000 xsym               LDA     VD_OLD_$SCREEN
         3 002130   002133 604400 3                  TMOZ    s:12345

  12343  3 002131   000003 235000 xsym               LDA     VD_$SCREEN+3
         3 002132   000000 755000 xsym               STA     VD_OLD_$SCREEN

     1106    12344    3              END;              /* and remember it if we're temporarily expanded */

     1107    12345    2           IF VD_$SCREEN.V# = 0 THEN RETURN;

  12345  3 002133   000003 235000 xsym               LDA     VD_$SCREEN+3
         3 002134   002137 601000 3                  TNZ     s:12346

  12345  3 002135   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002136   000001 702211                    TSX2  ! 1,X1

     1108    12346    2           VD_EDITING_HEIGHT = VD_$SCREEN.V#-VD_$MIN_COMMAND.V#;

  12346  3 002137   000003 236000 xsym               LDQ     VD_$SCREEN+3
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:131  
         3 002140   000003 136000 xsym               SBLQ    VD_$MIN_COMMAND+3
         3 002141   000000 756000 xsym               STQ     VD_EDITING_HEIGHT

     1109    12347    2           IF SCREEN_PERCENT = 0 THEN SCREEN_PERCENT = 100;

  12347  3 002142   200063 235100                    LDA     SCREEN_PERCENT,,AUTO
         3 002143   002147 601000 3                  TNZ     s:12348

  12347  3 002144   000144 235007                    LDA     100,DL
         3 002145   200063 755100                    STA     SCREEN_PERCENT,,AUTO
         3 002146   002153 710000 3                  TRA     s:12349

     1110    12348    2           ELSE SCREEN_PERCENT = VD_$SCREEN.V# * 100 / SCREEN_PERCENT;

  12348  3 002147   000003 236000 xsym               LDQ     VD_$SCREEN+3
         3 002150   000144 402007                    MPY     100,DL
         3 002151   200063 506100                    DIV     SCREEN_PERCENT,,AUTO
         3 002152   200063 756100                    STQ     SCREEN_PERCENT,,AUTO

     1111    12349    2           NEW_WSPEC.COORDS.HEIGHT# = VD_$SCREEN.V# - OLD_$SCREEN;

  12349  3 002153   000003 236000 xsym               LDQ     VD_$SCREEN+3
         3 002154   200061 136100                    SBLQ    OLD_$SCREEN,,AUTO
         3 002155   200071 756100                    STQ     NEW_WSPEC+5,,AUTO

     1112    12350    2           OLD_CURRENT_WINDOW$ = VD_CURRENT_WINDOW$;

  12350  3 002156   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         3 002157   200062 756100                    STQ     OLD_CURRENT_WINDOW$,,AUTO

     1113    12351    3           DO WHILE '1'B;

     1114    12352    3              CURR_NODE$ = CURR$NODE.FLINK$;

  12352  3 002160   200060 470500                    LDP0    CURR_NODE$,,AUTO
         3 002161   000002 236100                    LDQ     2,,PR0
         3 002162   200060 756100                    STQ     CURR_NODE$,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:132  

     1115    12353    3              IF CURR_NODE$ = ADDR(NIL) THEN EXIT;

  12353  3 002163   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002164   002225 600000 3                  TZE     s:12363

     1116    12354    3              VD_CURRENT_WINDOW$ = CURR_NODE$;

  12354  3 002165   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

     1117    12355    3              EDITING_WINDOW_HEIGHT = SCREEN_PERCENT *

  12355  3 002166   200060 470500                    LDP0    CURR_NODE$,,AUTO
         3 002167   000007 471500                    LDP1    7,,PR0
         3 002170   200063 236100                    LDQ     SCREEN_PERCENT,,AUTO
         3 002171   100005 402100                    MPY     5,,PR1
         3 002172   000144 506007                    DIV     100,DL
         3 002173   200115 756100                    STQ     EDITING_WINDOW_HEIGHT,,AUTO

     1118    12356    3                CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS.HEIGHT# / 100;
     1119    12357    3              CURR$NODE.DESC.SPEC.V$->VD$WINDOW_SPEC.COORDS.HEIGHT# = 0;

  12357  3 002174   100005 450100                    STZ     5,,PR1

     1120    12358    3              CALL VDP$WCHANGE (CURR$NODE, NEW_WSPEC);

  12358  3 002175   200064 631500                    EPPR1   NEW_WSPEC,,AUTO
         3 002176   200125 451500                    STP1    CURR_BUF_TO_FREE$+2,,AUTO
         3 002177   200060 236100                    LDQ     CURR_NODE$,,AUTO
         3 002200   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 002201   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002202   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002203   000000 701000 xent               TSX1    VDP$WCHANGE
         3 002204   000000 011000                    NOP     0

     1121    12359    3              N_EDITING_WINDOWS = N_EDITING_WINDOWS - 1;

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:133  
  12359  3 002205   000001 336007                    LCQ     1,DL
         3 002206   200056 056100                    ASQ     N_EDITING_WINDOWS,,AUTO

     1122    12360    3              NEW_WSPEC.COORDS.HEIGHT# = MAXIMUM (N_EDITING_WINDOWS * N_BORDERS,

  12360  3 002207   200071 236100                    LDQ     NEW_WSPEC+5,,AUTO
         3 002210   200115 136100                    SBLQ    EDITING_WINDOW_HEIGHT,,AUTO
         3 002211   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 002212   200056 236100                    LDQ     N_EDITING_WINDOWS,,AUTO
         3 002213   200057 402100                    MPY     N_BORDERS,,AUTO
         3 002214   200125 756100                    STQ     CURR_BUF_TO_FREE$+2,,AUTO
         3 002215   200124 236100                    LDQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 002216   200126 756100                    STQ     CURR_BUF_TO_FREE$+3,,AUTO
         3 002217   200125 236100                    LDQ     CURR_BUF_TO_FREE$+2,,AUTO
         3 002220   200126 116100                    CMPQ    CURR_BUF_TO_FREE$+3,,AUTO
         3 002221   002223 605000 3                  TPL     s:12360+12
         3 002222   200126 236100                    LDQ     CURR_BUF_TO_FREE$+3,,AUTO
         3 002223   200071 756100                    STQ     NEW_WSPEC+5,,AUTO

     1123    12361    3                NEW_WSPEC.COORDS.HEIGHT# - EDITING_WINDOW_HEIGHT);
     1124    12362    3              END;

  12362  3 002224   002160 710000 3                  TRA     s:12352

     1125    12363    2           VD_CURRENT_WINDOW$ = OLD_CURRENT_WINDOW$;

  12363  3 002225   200062 236100                    LDQ     OLD_CURRENT_WINDOW$,,AUTO
         3 002226   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

     1126    12364
     1127    12365
     1128    12366    2           RETURN;

  12366  3 002227   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002230   000001 702211                    TSX2  ! 1,X1

     1129    12367
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:134  
     1130    12368    2   END WRTR_$SCREEN;
     1131    12369
     1132    12370        %BOX (TITLE=WRTR_BUFFER, PAGE=YES);
             12378    2
             12382    2   /***************************************************************************
             12384    2    *                                                                         *
             12388    2            *                                WRTR_BUFFER                             *
             12390    2            *                                                                        *
             12392    2          ***************************************************************************/

     1133    12396
     1134    12397        /*I* NAME: WRTR_BUFFER
     1135    12398            PARAMETERS:
     1136    12399                GLOBAL must be a VD$BUFFER.
     1137    12400            INPUT:
     1138    12401                DATA must be a VD$BUFFER.
     1139    12402            DESCRIPTION:
     1140    12403                The length of the new value must be between
     1141    12404                    REF$SPEC.M# and REF$SPEC.N#, inclusive.
     1142    12405        */
     1143    12406
     1144    12407    1   WRTR_BUFFER: PROC (GLOBAL) ALTRET;

  12407  3 002231   200052 741300       WRTR_BUFFER  STX1  ! ERRCODE+2,,AUTO

     1145    12408
     1146    12409        %VD$BUFFER (NAME=GLOBAL, STCLASS=PARAM);
     1147    12467        %VD$BUFFER (NAME=DATA, STCLASS="BASED(DATA$)");
     1148    12525
     1149    12526
     1150    12527    2   DCL ALT_INTRO$ PTR;
     1151    12528    2   DCL ALT_LEX_FUNC$ PTR;
     1152    12529    2   DCL INDX SBIN;
     1153    12530    2   DCL SINK SBIN;
     1154    12531    2   DCL WINDOWS_L0_NODE$ PTR;
     1155    12532    2   DCL N_EDITING_WINDOWS SBIN;
     1156    12533    2   DCL RET_CODE CHAR(1);
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:135  
     1157    12534
     1158    12535
     1159    12536    2   DCL CHAR$WORD CHAR(%NB_PER_WORD) ALIGNED BASED;
     1160    12537        %VD$BUFFER (NAME=ALT$INTRO, STCLASS="BASED(ALT_INTRO$)");
     1161    12595        %VD$BUFFER (NAME=ALT$LEX_FUNC, STCLASS="BASED(ALT_LEX_FUNC$)");
     1162    12653        %VD$FILE_NODE (NAME=WINDOWS$L0_NODE, STCLASS="BASED(WINDOWS_L0_NODE$)");
     1163    12746
     1164    12747
     1165    12748    2   COMMON_BUFFER:
     1166    12749    2           IF DATA.LENGTH# < REF$SPEC.M#

  12749  3 002232   200011 470500       COMMON_BUFF* LDP0    REF_SPEC$,,AUTO
         3 002233   200013 471500                    LDP1    DATA$,,AUTO
         3 002234   100002 236100                    LDQ     2,,PR1
         3 002235   000022 732000                    QRS     18
         3 002236   000004 116100                    CMPQ    4,,PR0
         3 002237   002313 604000 3                  TMI     ILL_NAME_VALUE_LENGTH_FAILURE
         3 002240   000005 116100                    CMPQ    5,,PR0
         3 002241   002313 605400 3                  TPNZ    ILL_NAME_VALUE_LENGTH_FAILURE

     1167    12750    2             OR DATA.LENGTH# > REF$SPEC.N# THEN
     1168    12751    2              GOTO ILL_NAME_VALUE_LENGTH_FAILURE;
     1169    12752
     1170    12753    2           GLOBAL.LENGTH# = DATA.LENGTH#;

  12753  3 002242   100002 220100                    LDX0    2,,PR1
         3 002243   200053 473500                    LDP3    @GLOBAL,,AUTO
         3 002244   300002 740100                    STX0    2,,PR3

     1171    12754    2           IF REF$SPEC.WRITER# ~= %WRTR_$CONTEXT

  12754  3 002245   000006 721100                    LXL1    6,,PR0
         3 002246   000014 101003                    CMPX1   12,DU
         3 002247   002257 600000 3                  TZE     s:12758
         3 002250   000071 101003                    CMPX1   57,DU
         3 002251   002257 600000 3                  TZE     s:12758

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:136  
     1172    12755    2             AND REF$SPEC.WRITER# ~= %WRTR_$INITIALIZE THEN
     1173    12756    2              GLOBAL.BYTES = DATA.BYTES;

  12756  3 002252   100002 222100                    LDX2    2,,PR1
         3 002253   040140 100540                    MLR     fill='040'O
         3 002254   100002 400012                    ADSC9   2,,PR1                   cn=2,n=*X2
         3 002255   300002 400010                    ADSC9   2,,PR3                   cn=2,n=*X0
         3 002256   002263 710000 3                  TRA     s:12762

     1174    12757    3           ELSE DO; /* For large non_window values, just point global at value */

     1175    12758    3              GLOBAL.FLINK$ = DATA$;

  12758  3 002257   200013 236100                    LDQ     DATA$,,AUTO
         3 002260   300001 756100                    STQ     1,,PR3

     1176    12759    3              RETURN;

  12759  3 002261   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002262   000001 702211                    TSX2  ! 1,X1

     1177    12760    3              END;
     1178    12761
     1179    12762    2           CALL VDG$OFREE (GLOBAL.FLINK$->VD$BUFFER)

  12762  3 002263   300001 474500                    LDP4    1,,PR3
         3 002264   200124 454500                    STP4    CURR_BUF_TO_FREE$+1,,AUTO
         3 002265   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002266   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002267   000000 701000 xent               TSX1    VDG$OFREE
         3 002270   002330 702000 3                  TSX2    X_FAILED

     1180    12763    2             ALTRET(X_FAILED);
     1181    12764    2           GLOBAL.FLINK$ = ADDR(NIL);

  12764  3 002271   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 002272   200053 470500                    LDP0    @GLOBAL,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:137  
         3 002273   000001 756100                    STQ     1,,PR0

     1182    12765    3           IF DATA.FLINK$ ~= ADDR(NIL) THEN DO;

  12765  3 002274   200013 471500                    LDP1    DATA$,,AUTO
         3 002275   100001 236100                    LDQ     1,,PR1
         3 002276   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002277   002311 600000 3                  TZE     s:12770

     1183    12766    3              CALL VDG$OCOPY (DATA.FLINK$->VD$BUFFER, GLOBAL.FLINK$)

  12766  3 002300   100001 473500                    LDP3    1,,PR1
         3 002301   200053 236100                    LDQ     @GLOBAL,,AUTO
         3 002302   000001 036003                    ADLQ    1,DU
         3 002303   200125 756100                    STQ     CURR_BUF_TO_FREE$+2,,AUTO
         3 002304   200124 453500                    STP3    CURR_BUF_TO_FREE$+1,,AUTO
         3 002305   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002306   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002307   000000 701000 xent               TSX1    VDG$OCOPY
         3 002310   002330 702000 3                  TSX2    X_FAILED

     1184    12767    3                ALTRET(X_FAILED);
     1185    12768    3              END;

     1186    12769
     1187    12770    2           RETURN;

  12770  3 002311   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002312   000001 702211                    TSX2  ! 1,X1

     1188    12771
     1189    12772
     1190    12773    2   ILL_NAME_VALUE_LENGTH_FAILURE:
     1191    12774    2           CALL VDG$ERRMSG (%E$BAD_NAME_VALUE_LENGTH, NODE$KEY,

  12774  3 002313   200011 236100       ILL_NAME_VA* LDQ     REF_SPEC$,,AUTO
         3 002314   000005 036003                    ADLQ    5,DU
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:138  
         3 002315   200127 756100                    STQ     CURR_BUF_TO_FREE$+4,,AUTO
         3 002316   200011 236100                    LDQ     REF_SPEC$,,AUTO
         3 002317   000004 036003                    ADLQ    4,DU
         3 002320   200126 756100                    STQ     CURR_BUF_TO_FREE$+3,,AUTO
         3 002321   200012 236100                    LDQ     NODE_KEY$,,AUTO
         3 002322   000105 235000 4                  LDA     69
         3 002323   200124 757100                    STAQ    CURR_BUF_TO_FREE$+1,,AUTO
         3 002324   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002325   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 002326   000000 701000 xent               TSX1    VDG$ERRMSG
         3 002327   000000 011000                    NOP     0

     1192    12775    2             REF$SPEC.M#, REF$SPEC.N#);
     1193    12776
     1194    12777    2   X_FAILED: ;

  12777  3 002330                       X_FAILED     null
     1195    12778    2           ALTRETURN;

  12778  3 002330   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002331   000000 702211                    TSX2  ! 0,X1

     1196    12779
     1197    12780
     1198    12781        /*I** NAME: WRTR_BLOCK_EXPR
     1199    12782            PARAMETERS:
     1200    12783                GLOBAL must be a VD$BUFFER.
     1201    12784            INPUT:
     1202    12785                DATA must be a VD$BUFFER containing a block expression.
     1203    12786            DESCRIPTION:
     1204    12787        *N**N*  Validate the block expression,
     1205    12788                    then process as a normal VD$BUFFER.
     1206    12789        */
     1207    12790
     1208    12791    2   WRTR_BLOCK_EXPR: ENTRY (GLOBAL) ALTRET;

  12791  3 002332   200052 741300       WRTR_BLOCK_* STX1  ! ERRCODE+2,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:139  

     1209    12792
     1210    12793    2           GOTO COMMON_BUFFER;

  12793  3 002333   002232 710000 3                  TRA     COMMON_BUFFER

     1211    12794
     1212    12795
     1213    12796        /*I* NAME: WRTR_$CONTEXT
     1214    12797             DESCRIPTION:
     1215    12798                Just makes sure the data buffer is large enough to stuff the
     1216    12799                actual context file fid.  Only initialiaztion ever writes it.
     1217    12800                Also used for $INITIALIZE, but only when initialization is writing
     1218    12801                it.
     1219    12802        */
     1220    12803
     1221    12804    2   WRTR_$CONTEXT: ENTRY (GLOBAL) ALTRET;

  12804  3 002334   200052 741300       WRTR_$CONTE* STX1  ! ERRCODE+2,,AUTO

     1222    12805
     1223    12806    2           IF DATA$ ~= ADDR(GLOBAL) THEN GOTO COMMON_BUFFER;

  12806  3 002335   200013 236100                    LDQ     DATA$,,AUTO
         3 002336   200053 116100                    CMPQ    @GLOBAL,,AUTO
         3 002337   002232 601000 3                  TNZ     COMMON_BUFFER

     1224    12807    2           CALL VDG$OALLOC (%CLS_BUFFER, DATA.FLINK$, (LENGTHC(VD$STRING_HEADER) +

  12807  3 002340   000107 236000 4                  LDQ     71
         3 002341   200126 756100                    STQ     CURR_BUF_TO_FREE$+3,,AUTO
         3 002342   200013 236100                    LDQ     DATA$,,AUTO
         3 002343   000001 036003                    ADLQ    1,DU
         3 002344   000110 235000 4                  LDA     72
         3 002345   200124 757100                    STAQ    CURR_BUF_TO_FREE$+1,,AUTO
         3 002346   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002347   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:140  
         3 002350   000000 701000 xent               TSX1    VDG$OALLOC
         3 002351   002330 702000 3                  TSX2    X_FAILED

     1225    12808    2             %MXNB_FID + %NB_PER_WORD - 1) / %NB_PER_WORD) ALTRET (X_FAILED);
     1226    12809    2           DATA$ = DATA.FLINK$;

  12809  3 002352   200013 470500                    LDP0    DATA$,,AUTO
         3 002353   000001 236100                    LDQ     1,,PR0
         3 002354   200013 756100                    STQ     DATA$,,AUTO

     1227    12810    2           DATA$BUFFER.LENGTH# = 0;

  12810  3 002355   000000 220003                    LDX0    0,DU
         3 002356   200013 470500                    LDP0    DATA$,,AUTO
         3 002357   000002 740100                    STX0    2,,PR0

     1228    12811    2           GOTO COMMON_BUFFER;

  12811  3 002360   002232 710000 3                  TRA     COMMON_BUFFER

     1229    12812
     1230    12813
     1231    12814        /*I** NAME: WRTR_IMP_INTRO
     1232    12815            PARAMETERS:
     1233    12816                GLOBAL must be a VD$BUFFER.
     1234    12817            INPUT:
     1235    12818                DATA must be a VD$BUFFER containing an IMP introducer string.
     1236    12819            DESCRIPTION:
     1237    12820                If the IMP introducer string equals the other IMP introducer,
     1238    12821                    reject the assignment.
     1239    12822                If the IMP introducer string is a displayable character,
     1240    12823                    warn the user.  Then process as a normal VD$BUFFER.
     1241    12824        */
     1242    12825
     1243    12826    2   WRTR_IMP_INTRO: ENTRY (GLOBAL) ALTRET;

  12826  3 002361   200052 741300       WRTR_IMP_IN* STX1  ! ERRCODE+2,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:141  

     1244    12827
     1245    12828    2           INDX = DATA.LENGTH#;

  12828  3 002362   200013 470500                    LDP0    DATA$,,AUTO
         3 002363   000002 236100                    LDQ     2,,PR0
         3 002364   000022 732000                    QRS     18
         3 002365   200056 756100                    STQ     INDX,,AUTO

     1246    12829    2           SINK = 0;

  12829  3 002366   200057 450100                    STZ     SINK,,AUTO

     1247    12830                /* First eliminate any control_value functions in the string */
     1248    12831    3           DO WHILE '1'B;

     1249    12832    3              CALL INDEX (SINK, VD_$CONTROL.BYTES, DATA.BYTES, SINK)

  12832  3 002367   200013 470500                    LDP0    DATA$,,AUTO
         3 002370   000002 220100                    LDX0    2,,PR0
         3 002371   200057 631500                    EPPR1   SINK,,AUTO
         3 002372   000002 633400 xsym               EPPR3   VD_$CONTROL+2
         3 002373   000002 221003                    LDX1    2,DU
         3 002374   300000 500511                    A9BD    0,X1,PR3
         3 002375   000002 223000 xsym               LDX3    VD_$CONTROL+2
         3 002376   000012 222003                    LDX2    10,DU
         3 002377   000000 500512                    A9BD    0,X2,PR0
         3 002400   200057 236100                    LDQ     SINK,,AUTO
         3 002401   000000 701000 xent               TSX1    X66_INDEX
         3 002402   002435 710000 3                  TRA     s:12842

     1250    12833    4              WHENRETURN DO;

     1251    12834    4                 CALL VDG$EXEC_CONTROL (INDX, DATA.BYTES, SINK, RET_CODE)

  12834  3 002403   200062 630500                    EPPR0   RET_CODE,,AUTO
         3 002404   200127 450500                    STP0    CURR_BUF_TO_FREE$+4,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:142  
         3 002405   200057 631500                    EPPR1   SINK,,AUTO
         3 002406   200126 451500                    STP1    CURR_BUF_TO_FREE$+3,,AUTO
         3 002407   200013 236100                    LDQ     DATA$,,AUTO
         3 002410   000072 036000 4                  ADLQ    58
         3 002411   200125 756100                    STQ     CURR_BUF_TO_FREE$+2,,AUTO
         3 002412   200056 633500                    EPPR3   INDX,,AUTO
         3 002413   200124 453500                    STP3    CURR_BUF_TO_FREE$+1,,AUTO
         3 002414   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002415   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 002416   000000 701000 xent               TSX1    VDG$EXEC_CONTROL
         3 002417   002330 702000 3                  TSX2    X_FAILED

     1252    12835    4                   ALTRET (X_FAILED);
     1253    12836    4                 DATA.LENGTH# = INDX;

  12836  3 002420   200056 720100                    LXL0    INDX,,AUTO
         3 002421   200013 470500                    LDP0    DATA$,,AUTO
         3 002422   000002 740100                    STX0    2,,PR0

     1254    12837    5                 IF RET_CODE ~= %CHR_SPACE THEN DO;

  12837  3 002423   200062 236100                    LDQ     RET_CODE,,AUTO
         3 002424   777000 376003                    ANQ     -512,DU
         3 002425   040000 116003                    CMPQ    16384,DU
         3 002426   002435 600000 3                  TZE     s:12842

     1255    12838    5                    CALL VDG$ERRMSG (%E$CTRLFN_CONFLICTS_W_KEYIN);

  12838  3 002427   000112 630400 4                  EPPR0   74
         3 002430   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002431   000000 701000 xent               TSX1    VDG$ERRMSG
         3 002432   000000 011000                    NOP     0

     1256    12839    5                    ALTRETURN;

  12839  3 002433   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002434   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:143  

     1257    12840    5                    END;
     1258    12841    4                 END;
     1259    12842    3              IF SINK >= INDX THEN EXIT;

  12842  3 002435   200057 236100                    LDQ     SINK,,AUTO
         3 002436   200056 116100                    CMPQ    INDX,,AUTO
         3 002437   002441 605000 3                  TPL     s:12845

     1260    12843    3              END;

  12843  3 002440   002367 710000 3                  TRA     s:12832

     1261    12844
     1262    12845    3           IF DATA.LENGTH# > 0 THEN DO;

  12845  3 002441   200013 470500                    LDP0    DATA$,,AUTO
         3 002442   000002 220100                    LDX0    2,,PR0
         3 002443   002526 604400 3                  TMOZ    s:12867

     1263    12846    3              IF ADDR(GLOBAL) = ADDR(VD_$INTRO_1) THEN

  12846  3 002444   000031 236000 4                  LDQ     25
         3 002445   200053 116100                    CMPQ    @GLOBAL,,AUTO
         3 002446   002452 601000 3                  TNZ     s:12849

     1264    12847    3                 ALT_INTRO$ = ADDR(VD_$INTRO_2);

  12847  3 002447   000032 236000 4                  LDQ     26
         3 002450   200054 756100                    STQ     ALT_INTRO$,,AUTO
         3 002451   002453 710000 3                  TRA     s:12850

     1265    12848    3              ELSE
     1266    12849    3                 ALT_INTRO$ = ADDR(VD_$INTRO_1);

  12849  3 002452   200054 756100                    STQ     ALT_INTRO$,,AUTO

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:144  
     1267    12850    3              IF ALT$INTRO.LENGTH# = DATA.LENGTH#

  12850  3 002453   200054 471500                    LDP1    ALT_INTRO$,,AUTO
         3 002454   100002 221100                    LDX1    2,,PR1
         3 002455   000002 101100                    CMPX1   2,,PR0
         3 002456   002471 601000 3                  TNZ     s:12856
         3 002457   040140 106540                    CMPC    fill='040'O
         3 002460   100002 400011                    ADSC9   2,,PR1                   cn=2,n=*X1
         3 002461   000002 400010                    ADSC9   2,,PR0                   cn=2,n=*X0
         3 002462   002471 601000 3                  TNZ     s:12856

     1268    12851    3                AND ALT$INTRO.BYTES =
     1269    12852    4                SUBSTR(DATA.BYTES, 0, DATA.LENGTH#) THEN DO;

     1270    12853    4                 CALL VDG$ERRMSG (%E$IMP_INTROS_EQUAL);

  12853  3 002463   000114 630400 4                  EPPR0   76
         3 002464   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002465   000000 701000 xent               TSX1    VDG$ERRMSG
         3 002466   000000 011000                    NOP     0

     1271    12854    4                 ALTRETURN;

  12854  3 002467   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002470   000000 702211                    TSX2  ! 0,X1

     1272    12855    4                 END;
     1273    12856    3              IF SUBSTR(DATA.BYTES, 0, 1) >= %CHR_FIRST_DISPLAYABLE

  12856  3 002471   000002 220100                    LDX0    2,,PR0
         3 002472   000002 236100                    LDQ     2,,PR0
         3 002473   777000 376007                    ANQ     -512,DL
         3 002474   040000 116007                    CMPQ    16384,DL
         3 002475   002526 602000 3                  TNC     s:12867
         3 002476   000002 236100                    LDQ     2,,PR0
         3 002477   777000 376007                    ANQ     -512,DL
         3 002500   176000 116007                    CMPQ    64512,DL
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:145  
         3 002501   002503 600000 3                  TZE     s:12860
         3 002502   002526 603000 3                  TRC     s:12867

     1274    12857    4                AND SUBSTR(DATA.BYTES, 0, 1) <= %CHR_LAST_DISPLAYABLE THEN DO;

     1275    12858                      /* DATA_TEXTC can be in AUTO 'cause this is a warning, */
     1276    12859                      /*   and we'll call VDG$EREPORT_ERROR immediately      */
     1277    12860    4                 DATA_TEXTC.LENGTH# = 1;

  12860  3 002503   001000 236003                    LDQ     512,DU
         3 002504   200014 552140                    STBQ    DATA_TEXTC,'40'O,AUTO

     1278    12861    4                 DATA_TEXTC.BYTES = SUBSTR(DATA.BYTES, 0, 1);

  12861  3 002505   000002 220100                    LDX0    2,,PR0
         3 002506   040100 100500                    MLR     fill='040'O
         3 002507   000002 400001                    ADSC9   2,,PR0                   cn=2,n=1
         3 002510   200014 200013                    ADSC9   DATA_TEXTC,,AUTO         cn=1,n=11

     1279    12862    4                 CALL VDG$WARNMSG (%E$WARN_INTRO_DISPLAYABLE,DATA_TEXTC,NODE$KEY);

  12862  3 002511   200012 236100                    LDQ     NODE_KEY$,,AUTO
         3 002512   200126 756100                    STQ     CURR_BUF_TO_FREE$+3,,AUTO
         3 002513   200014 633500                    EPPR3   DATA_TEXTC,,AUTO
         3 002514   200125 453500                    STP3    CURR_BUF_TO_FREE$+2,,AUTO
         3 002515   000116 236000 4                  LDQ     78
         3 002516   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 002517   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002520   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 002521   000000 701000 xent               TSX1    VDG$WARNMSG
         3 002522   000000 011000                    NOP     0

     1280    12863    4                 CALL VDG$EREPORT_ERROR;   /* Display the warning */

  12863  3 002523   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 002524   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         3 002525   000000 011000                    NOP     0
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:146  

     1281    12864    4                 END;

     1282    12865    3              END;

     1283    12866
     1284    12867    2           GOTO COMMON_BUFFER;

  12867  3 002526   002232 710000 3                  TRA     COMMON_BUFFER

     1285    12868
     1286    12869
     1287    12870        /*I** NAME: WRTR_FILE_STCLASS
     1288    12871            PARAMETERS:
     1289    12872                GLOBAL must be a VD$BUFFER.
     1290    12873            INPUT:
     1291    12874                DATA must be a VD$BUFFER containing a single %FSTCL_ character.
     1292    12875            DESCRIPTION:
     1293    12876                Validate the character in DATA,
     1294    12877                    then process as a normal VD$BUFFER.
     1295    12878        */
     1296    12879
     1297    12880    2   WRTR_FILE_STCLASS: ENTRY (GLOBAL) ALTRET;

  12880  3 002527   200052 741300       WRTR_FILE_S* STX1  ! ERRCODE+2,,AUTO

     1298    12881
     1299    12882    2           IF DATA.LENGTH# > 0 THEN

  12882  3 002530   200013 470500                    LDP0    DATA$,,AUTO
         3 002531   000002 220100                    LDX0    2,,PR0
         3 002532   002644 604400 3                  TMOZ    s:12907

     1300    12883    3           DO SELECT (SUBSTR(DATA.BYTES, 0, 1));

  12883  3 002533   000002 236100                    LDQ     2,,PR0
         3 002534   777000 376007                    ANQ     -512,DL
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:147  
         3 002535   052000 116007                    CMPQ    21504,DL
         3 002536   002550 602000 3                  TNC     s:12883+13
         3 002537   000002 236100                    LDQ     2,,PR0
         3 002540   777000 376007                    ANQ     -512,DL
         3 002541   052000 116007                    CMPQ    21504,DL
         3 002542   002555 600000 3                  TZE     s:12884
         3 002543   000002 236100                    LDQ     2,,PR0
         3 002544   777000 376007                    ANQ     -512,DL
         3 002545   072000 116007                    CMPQ    29696,DL
         3 002546   002556 601000 3                  TNZ     s:12887
         3 002547   002555 710000 3                  TRA     s:12884
         3 002550   000002 236100                    LDQ     2,,PR0
         3 002551   777000 376007                    ANQ     -512,DL
         3 002552   042000 116007                    CMPQ    17408,DL
         3 002553   002556 601000 3                  TNZ     s:12887
         3 002554   002555 710000 3                  TRA     s:12884

     1301    12884    3              SELECT(%FSTCL_EXTERNAL, %FSTCL_INTERNAL, %FSTCL_MIGRATABLE);

  12884  3 002555   002644 710000 3                  TRA     s:12907

     1302    12885    3              ;   /* Do nothing:  ok */
     1303    12886    3              SELECT(ELSE);

     1304    12887    3           SINK = %E$BAD_FILE_STCLASS_FOR_NAME;

  12887  3 002556   000406 235007                    LDA     262,DL
         3 002557   200057 755100                    STA     SINK,,AUTO

     1305    12888    3   DATA_ERR: CALL VDG$ERRMSG (SINK, NODE$KEY) ALTRET(X_FAILED);

  12888  3 002560   200012 236100       DATA_ERR     LDQ     NODE_KEY$,,AUTO
         3 002561   200125 756100                    STQ     CURR_BUF_TO_FREE$+2,,AUTO
         3 002562   200057 630500                    EPPR0   SINK,,AUTO
         3 002563   200124 450500                    STP0    CURR_BUF_TO_FREE$+1,,AUTO
         3 002564   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002565   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:148  
         3 002566   000000 701000 xent               TSX1    VDG$ERRMSG
         3 002567   002330 702000 3                  TSX2    X_FAILED

     1306    12889    3           VD_ERR_SUBST$ = PINCRW(VD_6E.ERR_TAIL$, SIZEW(VD$ERR));

  12889  3 002570   000032 236000 xsym               LDQ     VD_6E+26
         3 002571   000005 036003                    ADLQ    5,DU
         3 002572   200047 756100                    STQ     VD_ERR_SUBST$,,AUTO

     1307    12890    3           INDX = 0;

  12890  3 002573   200056 450100                    STZ     INDX,,AUTO

     1308    12891    4           DO WHILE INDX < %MX_CMD_OBJECTS

  12891  3 002574   002576 710000 3                  TRA     s:12894

     1309    12892    4             AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
     1310    12893    4              INDX = INDX + 1;

  12893  3 002575   200056 054100                    AOS     INDX,,AUTO

     1311    12894    4              END;

  12894  3 002576   200056 235100                    LDA     INDX,,AUTO
         3 002577   000062 115007                    CMPA    50,DL
         3 002600   002604 605000 3                  TPL     s:12895
         3 002601   000000 236005 xsym               LDQ     VD_CMD_OBJECTS$,AL
         3 002602   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002603   002575 601000 3                  TNZ     s:12893

     1312    12895    3           IF INDX >= %MX_CMD_OBJECTS THEN

  12895  3 002604   200056 235100                    LDA     INDX,,AUTO
         3 002605   000062 115007                    CMPA    50,DL
         3 002606   002615 604000 3                  TMI     s:12897

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:149  
     1313    12896    3              CALL VDG$ESCREECH (INDX);

  12896  3 002607   200056 630500                    EPPR0   INDX,,AUTO
         3 002610   200124 450500                    STP0    CURR_BUF_TO_FREE$+1,,AUTO
         3 002611   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002612   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002613   000000 701000 xent               TSX1    VDG$ESCREECH
         3 002614   000000 011000                    NOP     0

     1314    12897    3           CALL VDG$OCOPY (DATA, VD_CMD_OBJECTS$ (INDX))

  12897  3 002615   200056 720100                    LXL0    INDX,,AUTO
         3 002616   000000 630410 xsym               EPPR0   VD_CMD_OBJECTS$,X0
         3 002617   200125 450500                    STP0    CURR_BUF_TO_FREE$+2,,AUTO
         3 002620   200013 236100                    LDQ     DATA$,,AUTO
         3 002621   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 002622   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 002623   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002624   000000 701000 xent               TSX1    VDG$OCOPY
         3 002625   002627 702000 3                  TSX2    s:12898
         3 002626   002631 710000 3                  TRA     s:12900

     1315    12898    4           WHENALTRETURN DO; ALTRETURN; END;

  12898  3 002627   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002630   000000 702211                    TSX2  ! 0,X1

     1316    12899
     1317    12900    3           SUBST$POINTER.OBJECT.CLASS# (1) = %CLS_PTR_TEXTC;

  12900  3 002631   000045 220003                    LDX0    37,DU
         3 002632   200047 470500                    LDP0    VD_ERR_SUBST$,,AUTO
         3 002633   000004 740100                    STX0    4,,PR0

     1318    12901    3           SUBST$POINTER.V$ (1) =

  12901  3 002634   200056 721100                    LXL1    INDX,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:150  
         3 002635   000000 471411 xsym               LDP1    VD_CMD_OBJECTS$,X1
         3 002636   200124 451500                    STP1    CURR_BUF_TO_FREE$+1,,AUTO
         3 002637   200124 236100                    LDQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 002640   000077 036000 4                  ADLQ    63
         3 002641   000007 756100                    STQ     7,,PR0

     1319    12902    3             PINCRC(ADDR(VD_CMD_OBJECTS$ (INDX) -> VD$BUFFER.LENGTH#),
     1320    12903    3             LENGTHC(VD$BUFFER.LENGTH#) - LENGTHC(VD$TEXTC.LENGTH#));
     1321    12904    3           ALTRETURN;

  12904  3 002642   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002643   000000 702211                    TSX2  ! 0,X1

     1322    12905    3              END;

     1323    12906
     1324    12907    2           GOTO COMMON_BUFFER;

  12907  3 002644   002232 710000 3                  TRA     COMMON_BUFFER

     1325    12908
     1326    12909
     1327    12910        /*I** NAME: WRTR_$COMMENT
     1328    12911            PARAMETERS:
     1329    12912                GLOBAL must be a VD$BUFFER.
     1330    12913            INPUT:
     1331    12914                DATA must be a VD$BUFFER.
     1332    12915            DESCRIPTION:
     1333    12916                Validate the character(s) in DATA, update the PCB,
     1334    12917                    then process as a normal VD$BUFFER.
     1335    12918        */
     1336    12919
     1337    12920    2   WRTR_$COMMENT: ENTRY (GLOBAL) ALTRET;

  12920  3 002645   200052 741300       WRTR_$COMME* STX1  ! ERRCODE+2,,AUTO

     1338    12921
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:151  
     1339    12922    2           ALT_LEX_FUNC$ = ADDR(VD_$CONTROL);

  12922  3 002646   000014 236000 4                  LDQ     12
         3 002647   200055 756100                    STQ     ALT_LEX_FUNC$,,AUTO

     1340    12923
     1341    12924    3           DO CASE (DATA.LENGTH#);

  12924  3 002650   200013 470500                    LDP0    DATA$,,AUTO
         3 002651   000002 220100                    LDX0    2,,PR0
         3 002652   000003 100003                    CMPX0   3,DU
         3 002653   002655 602010 3                  TNC     s:12924+5,X0
         3 002654   002674 710000 3                  TRA     s:12932
         3 002655   002672 710000 3                  TRA     s:12930
         3 002656   002660 710000 3                  TRA     s:12926
         3 002657   002666 710000 3                  TRA     s:12928

     1342    12925    3            CASE (1);

     1343    12926    3              CALL CONCAT (VD_PCB.COMMENT.LEAD, %CHR_SPACE, DATA.BYTES);

  12926  3 002660   040000 236003                    LDQ     16384,DU
         3 002661   000007 552040 xsym               STBQ    VD_PCB+7,'40'O
         3 002662   040000 100540                    MLR     fill='040'O
         3 002663   000002 400010                    ADSC9   2,,PR0                   cn=2,n=*X0
         3 002664   000007 200001 xsym               ADSC9   VD_PCB+7                 cn=1,n=1
         3 002665   002674 710000 3                  TRA     s:12932

     1344    12927    3            CASE (2);

     1345    12928    3              VD_PCB.COMMENT.LEAD = DATA.BYTES;

  12928  3 002666   040000 100540                    MLR     fill='040'O
         3 002667   000002 400010                    ADSC9   2,,PR0                   cn=2,n=*X0
         3 002670   000007 000002 xsym               ADSC9   VD_PCB+7                 cn=0,n=2
         3 002671   002674 710000 3                  TRA     s:12932

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:152  
     1346    12929    3            CASE (0);

     1347    12930    3              VD_PCB.COMMENT.LEAD = %CHR_SPACE;

  12930  3 002672   040040 222003                    LDX2    16416,DU
         3 002673   000007 742000 xsym               STX2    VD_PCB+7

     1348    12931    3            END;

     1349    12932    2           VD_PCB.COMMENT.TRAIL = VD_PCB.COMMENT.LEAD;

  12932  3 002674   000007 220000 xsym               LDX0    VD_PCB+7
         3 002675   000007 440000 xsym               SXL0    VD_PCB+7

     1350    12933    2           GOTO COMMON_COMM_CON;

  12933  3 002676   002702 710000 3                  TRA     COMMON_COMM_CON

     1351    12934
     1352    12935
     1353    12936        /*I** NAME: WRTR_$CONTROL
     1354    12937            PARAMETERS:
     1355    12938                GLOBAL must be a VD$BUFFER.
     1356    12939            INPUT:
     1357    12940                DATA must be a VD$BUFFER.
     1358    12941            DESCRIPTION:
     1359    12942                Validate the character(s) in DATA,
     1360    12943                    then process as a normal VD$BUFFER.
     1361    12944        */
     1362    12945
     1363    12946    2   WRTR_$CONTROL: ENTRY (GLOBAL) ALTRET;

  12946  3 002677   200052 741300       WRTR_$CONTR* STX1  ! ERRCODE+2,,AUTO

     1364    12947
     1365    12948    2           ALT_LEX_FUNC$ = ADDR(VD_$COMMENT);

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:153  
  12948  3 002700   000011 236000 4                  LDQ     9
         3 002701   200055 756100                    STQ     ALT_LEX_FUNC$,,AUTO

  12948  3 002702                       COMMON_COMM* null
     1366    12949    2   COMMON_COMM_CON:;
     1367    12950    3           IF DATA.LENGTH# > 0 THEN DO;

  12950  3 002702   200013 470500                    LDP0    DATA$,,AUTO
         3 002703   000002 220100                    LDX0    2,,PR0
         3 002704   003014 604400 3                  TMOZ    s:12973

     1368    12951    4              DO INDX = 0 TO (DATA.LENGTH# - 1);

  12951  3 002705   200056 450100                    STZ     INDX,,AUTO
         3 002706   003007 710000 3                  TRA     s:12971+1

     1369    12952    4                 CAND_CHAR = SUBSTR(DATA.BYTES, INDX, 1);

  12952  3 002707   200013 470500                    LDP0    DATA$,,AUTO
         3 002710   000002 220100                    LDX0    2,,PR0
         3 002711   200056 235100                    LDA     INDX,,AUTO
         3 002712   040100 100505                    MLR     fill='040'O
         3 002713   000002 400001                    ADSC9   2,A,PR0                  cn=2,n=1
         3 002714   200022 000001                    ADSC9   CAND_CHAR,,AUTO          cn=0,n=1

     1370    12953    5                 IF ALT$LEX_FUNC.LENGTH# > 0 THEN DO;

  12953  3 002715   200055 471500                    LDP1    ALT_LEX_FUNC$,,AUTO
         3 002716   100002 221100                    LDX1    2,,PR1
         3 002717   002743 604400 3                  TMOZ    s:12963

     1371    12954    5                    CALL INDEX (ALT_INDX, CAND_CHAR, ALT$LEX_FUNC.BYTES)

  12954  3 002720   000100 124540                    SCM     mask='000'O
         3 002721   100002 400011                    ADSC9   2,,PR1                   cn=2,n=*X1
         3 002722   200022 000001                    ADSC9   CAND_CHAR,,AUTO          cn=0,n=1
         3 002723   200020 000100                    ARG     ALT_INDX,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:154  
         3 002724   002743 606400 3                  TTN     s:12963

     1372    12955    6                    WHENRETURN DO;

     1373    12956    6                       IF ALT_LEX_FUNC$ = ADDR(VD_$COMMENT) THEN

  12956  3 002725   000011 236000 4                  LDQ     9
         3 002726   200055 116100                    CMPQ    ALT_LEX_FUNC$,,AUTO
         3 002727   002735 601000 3                  TNZ     s:12959

     1374    12957    6                          CALL VDG$ERRMSG (%E$CONTROL_CONFLICTS_W_COMMENT);

  12957  3 002730   000120 630400 4                  EPPR0   80
         3 002731   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002732   000000 701000 xent               TSX1    VDG$ERRMSG
         3 002733   000000 011000                    NOP     0
         3 002734   002741 710000 3                  TRA     s:12960

     1375    12958    6                       ELSE
     1376    12959    6                          CALL VDG$ERRMSG (%E$COMMENT_CONFLICTS_W_CONTROL);

  12959  3 002735   000122 630400 4                  EPPR0   82
         3 002736   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002737   000000 701000 xent               TSX1    VDG$ERRMSG
         3 002740   000000 011000                    NOP     0

     1377    12960    6                       ALTRETURN;

  12960  3 002741   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 002742   000000 702211                    TSX2  ! 0,X1

     1378    12961    6                       END;
     1379    12962    5                    END;

     1380    12963    4                 CCL = VD_XLATE_CHAR_CLASS.CCL (ASCBIN(CAND_CHAR));

  12963  3 002743   200022 236100                    LDQ     CAND_CHAR,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:155  
         3 002744   000033 772000                    QRL     27
         3 002745   000100 101406                    MRL     fill='000'O
         3 002746   000000 000001 xsym               ADSC9   VD_XLATE_CHAR_CLASS,Q    cn=0,n=1
         3 002747   200021 000004                    ADSC9   CCL,,AUTO                cn=0,n=4

     1381    12964    4                 IF CCL = %CCL_RES OR CCL = %CCL_DOT

  12964  3 002750   200021 235100                    LDA     CCL,,AUTO
         3 002751   000003 115007                    CMPA    3,DL
         3 002752   003003 600000 3                  TZE     s:12968
         3 002753   000002 115007                    CMPA    2,DL
         3 002754   003003 600000 3                  TZE     s:12968
         3 002755   000004 115007                    CMPA    4,DL
         3 002756   003003 600000 3                  TZE     s:12968
         3 002757   000000 115003                    CMPA    0,DU
         3 002760   003003 600000 3                  TZE     s:12968
         3 002761   200022 236100                    LDQ     CAND_CHAR,,AUTO
         3 002762   777000 376003                    ANQ     -512,DU
         3 002763   101000 116003                    CMPQ    33280,DU
         3 002764   002772 602000 3                  TNC     s:12964+18
         3 002765   200022 236100                    LDQ     CAND_CHAR,,AUTO
         3 002766   777000 376003                    ANQ     -512,DU
         3 002767   132000 116003                    CMPQ    46080,DU
         3 002770   003003 602000 3                  TNC     s:12968
         3 002771   003003 600000 3                  TZE     s:12968
         3 002772   200022 236100                    LDQ     CAND_CHAR,,AUTO
         3 002773   777000 376003                    ANQ     -512,DU
         3 002774   141000 116003                    CMPQ    49664,DU
         3 002775   003006 602000 3                  TNC     s:12971
         3 002776   200022 236100                    LDQ     CAND_CHAR,,AUTO
         3 002777   777000 376003                    ANQ     -512,DU
         3 003000   172000 116003                    CMPQ    62464,DU
         3 003001   003003 600000 3                  TZE     s:12968
         3 003002   003006 603000 3                  TRC     s:12971

     1382    12965    4                   OR CCL = %CCL_NUM OR CCL = %CCL_WHSP
     1383    12966    4                   OR (CAND_CHAR >= 'A' AND CAND_CHAR <= 'Z')
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:156  
     1384    12967    5                   OR (CAND_CHAR >= 'a' AND CAND_CHAR <= 'z') THEN DO;

     1385    12968    5                    SINK = %E$COMM_CON_CANT_HAVE_RES_SPEC;

  12968  3 003003   000417 236007                    LDQ     271,DL
         3 003004   200057 756100                    STQ     SINK,,AUTO

     1386    12969    5                    GOTO DATA_ERR;

  12969  3 003005   002560 710000 3                  TRA     DATA_ERR

     1387    12970    5                    END;
     1388    12971    4                 END;

  12971  3 003006   200056 054100                    AOS     INDX,,AUTO
         3 003007   200013 470500                    LDP0    DATA$,,AUTO
         3 003010   000002 236100                    LDQ     2,,PR0
         3 003011   000022 732000                    QRS     18
         3 003012   200056 116100                    CMPQ    INDX,,AUTO
         3 003013   002707 605400 3                  TPNZ    s:12952

     1389    12972    3              END;

     1390    12973    2           GOTO COMMON_BUFFER;

  12973  3 003014   002232 710000 3                  TRA     COMMON_BUFFER

     1391    12974
     1392    12975
     1393    12976        /*I** NAME: WRTR_$WI_BORDER
     1394    12977            PARAMETERS:
     1395    12978                GLOBAL must be a VD$BUFFER.
     1396    12979            INPUT:
     1397    12980                DATA must be a VD$BUFFER.
     1398    12981            DESCRIPTION:
     1399    12982                If $WI_BORDER had a 0-length value before, and we're about to
     1400    12983                assign it a non-0 length, then check to make sure that there is
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:157  
     1401    12984                room for editing-window borders in the $SCREEN size.
     1402    12985                If so:
     1403    12986                    Process as a normal VD$BUFFER.
     1404    12987        *N**N*      Tell the FEP to put up borders on the editing windows.
     1405    12988        */
     1406    12989
     1407    12990    2   WRTR_$WI_BORDER: ENTRY (GLOBAL) ALTRET;

  12990  3 003015   200052 741300       WRTR_$WI_BO* STX1  ! ERRCODE+2,,AUTO

     1408    12991
     1409    12992
     1410    12993
     1411    12994    3           IF VD_$WI_BORDER.LENGTH# = 0 AND DATA.LENGTH# > 0 THEN DO;

  12994  3 003016   000002 220000 xsym               LDX0    VD_$WI_BORDER+2
         3 003017   003054 601000 3                  TNZ     s:13006
         3 003020   200013 470500                    LDP0    DATA$,,AUTO
         3 003021   000002 222100                    LDX2    2,,PR0
         3 003022   003054 604400 3                  TMOZ    s:13006

     1412    12995    3              WINDOWS_L0_NODE$ = VD_6E.WINDOWS$ -> VD$STREAM.PORT$ ->

  12995  3 003023   000006 471400 xsym               LDP1    VD_6E+6
         3 003024   100001 473500                    LDP3    1,,PR1
         3 003025   300031 236100                    LDQ     25,,PR3
         3 003026   200060 756100                    STQ     WINDOWS_L0_NODE$,,AUTO

     1413    12996    3                VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     1414    12997    3              N_EDITING_WINDOWS = MAXIMUM (0, WINDOWS$L0_NODE.COUNT# - 1);

  12997  3 003027   200060 474500                    LDP4    WINDOWS_L0_NODE$,,AUTO
         3 003030   400014 236100                    LDQ     12,,PR4
         3 003031   000001 136007                    SBLQ    1,DL
         3 003032   000000 116003                    CMPQ    0,DU
         3 003033   003035 605000 3                  TPL     s:12997+6
         3 003034   000000 236003                    LDQ     0,DU
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:158  
         3 003035   200061 756100                    STQ     N_EDITING_WINDOWS,,AUTO

     1415    12998    4              IF (N_EDITING_WINDOWS * 2) > VD_EDITING_HEIGHT THEN DO;

  12998  3 003036   000001 736000                    QLS     1
         3 003037   000000 116000 xsym               CMPQ    VD_EDITING_HEIGHT
         3 003040   003054 604400 3                  TMOZ    s:13006

     1416    12999    4                 DATA.LENGTH# = 0;

  12999  3 003041   000000 223003                    LDX3    0,DU
         3 003042   000002 743100                    STX3    2,,PR0

     1417    13000    4                 CALL VDG$WARNMSG (%E$NO_ROOM_FOR_BORDERS);

  13000  3 003043   000124 630400 4                  EPPR0   84
         3 003044   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003045   000000 701000 xent               TSX1    VDG$WARNMSG
         3 003046   000000 011000                    NOP     0

     1418    13001    4                 CALL VDG$EREPORT_ERROR;   /* Display the warning */

  13001  3 003047   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 003050   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         3 003051   000000 011000                    NOP     0

     1419    13002    4                 RETURN;   /* Don't update $WI_BORDER */

  13002  3 003052   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 003053   000001 702211                    TSX2  ! 1,X1

     1420    13003    4                 END;
     1421    13004    3              END;
     1422    13005
     1423    13006    2           GOTO COMMON_BUFFER;

  13006  3 003054   002232 710000 3                  TRA     COMMON_BUFFER
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:159  

     1424    13007
     1425    13008    2   END WRTR_BUFFER;
     1426    13009
     1427    13010        %BOX (TITLE=WTRT_$BY, PAGE=YES);
             13018    2
             13022    2   /***************************************************************************
             13024    2    *                                                                         *
             13028    2            *                                  WTRT_$BY                              *
             13030    2            *                                                                        *
             13032    2          ***************************************************************************/

     1428    13036
     1429    13037        /*I* NAME: WRTR_$BY
     1430    13038            PARAMETERS:
     1431    13039                GLOBAL is unused, since it must always be VD_$BY.
     1432    13040            INPUT:
     1433    13041                DATA is either a CLS_PTR_KEY or a VD$BUFFER containing decimal
     1434    13042                digits possibly separated by a period.
     1435    13043                Or, it might be a VD$NUMBER from an old encoded context file.
     1436    13044            DESCRIPTION:
     1437    13045                If DATA is a CLS_PTR_KEY, this might be the initial write, so just
     1438    13046                return if so.  Or it might be an encoded image, so copy the key and
     1439    13047                point to it.  Otherwise, convert the decimal digits into a proper key.
     1440    13048        */
     1441    13049
     1442    13050    1   WRTR_$BY: PROC(GLOBAL) ALTRET;

  13050  3 003055   200052 741300       WRTR_$BY     STX1  ! ERRCODE+2,,AUTO

     1443    13051
     1444    13052        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
     1445    13097
     1446    13098        %VD$KEY_NUMBER (NAME=VD_$BY_KEY, STCLASS=SYMREF);
     1447    13113        %VD$KEY_NUMBER;
     1448    13128        %VD$POINTER (NAME=DATA$POINTER, STCLASS="BASED(DATA$)");
     1449    13173
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:160  
     1450    13174
     1451    13175    2   DCL I SBIN;
     1452    13176    2   DCL KEY SBIN;
     1453    13177    2   DCL TEMP$ PTR;
     1454    13178    2   DCL 1 FRACT REDEF TEMP$ CHAR(4);
     1455    13179
     1456    13180
     1457    13181    3           IF DATA.OBJECT.CLASS# = %CLS_NUMBER THEN DO;

  13181  3 003056   200005 470500                    LDP0    @DATA,,AUTO
         3 003057   000000 220100                    LDX0    0,,PR0
         3 003060   000033 100003                    CMPX0   27,DU
         3 003061   003066 601000 3                  TNZ     s:13185

     1458    13182    3              KEY = DATA$NUMBER.V#;

  13182  3 003062   200013 471500                    LDP1    DATA$,,AUTO
         3 003063   100003 235100                    LDA     3,,PR1
         3 003064   200055 755100                    STA     KEY,,AUTO

     1459    13183    3              GOTO GOT_KEY;

  13183  3 003065   003210 710000 3                  TRA     GOT_KEY

     1460    13184    3              END;
     1461    13185    3           IF DATA.OBJECT.CLASS# = %CLS_PTR_KEY THEN DO;

  13185  3 003066   000043 100003                    CMPX0   35,DU
         3 003067   003102 601000 3                  TNZ     s:13190

     1462    13186    3              KEY = DATA$POINTER.V$ -> VD$KEY_NUMBER.BYTES#;

  13186  3 003070   200013 471500                    LDP1    DATA$,,AUTO
         3 003071   100003 473500                    LDP3    3,,PR1
         3 003072   300001 236100                    LDQ     1,,PR3
         3 003073   000032 376000 xsym               ANQ     B_VECTNIL+26
         3 003074   200055 756100                    STQ     KEY,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:161  

     1463    13187    3              IF DATA$POINTER.V$ = ADDR(VD_$BY_KEY) THEN RETURN;

  13187  3 003075   000125 236000 4                  LDQ     85
         3 003076   100003 116100                    CMPQ    3,,PR1
         3 003077   003101 601000 3                  TNZ     s:13188

  13187  3 003100   000001 702211                    TSX2  ! 1,X1

     1464    13188    3              GOTO GOT_KEY;

  13188  3 003101   003210 710000 3                  TRA     GOT_KEY

     1465    13189    3              END;
     1466    13190    2           KEY = 0;

  13190  3 003102   200055 450100                    STZ     KEY,,AUTO

     1467    13191    3           CALL INDEX (I, '.', DATA$BUFFER.BYTES) WHENRETURN DO;

  13191  3 003103   200013 471500                    LDP1    DATA$,,AUTO
         3 003104   100002 220100                    LDX0    2,,PR1
         3 003105   000000 124540                    SCM     mask='000'O
         3 003106   100002 400010                    ADSC9   2,,PR1                   cn=2,n=*X0
         3 003107   000126 000001 4                  ADSC9   86                       cn=0,n=1
         3 003110   200054 000100                    ARG     I,,AUTO
         3 003111   003161 606400 3                  TTN     s:13203

     1468    13192    3              FRACT = %CONCAT(BINASC(3),'000'); /* Right extend to 3 digits */

  13192  3 003112   000000 236000 2                  LDQ     0
         3 003113   200056 756100                    STQ     TEMP$,,AUTO

     1469    13193    3              KEY = DATA$BUFFER.LENGTH#-I-1;

  13193  3 003114   100002 236100                    LDQ     2,,PR1
         3 003115   000022 732000                    QRS     18
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:162  
         3 003116   200054 136100                    SBLQ    I,,AUTO
         3 003117   000001 136007                    SBLQ    1,DL
         3 003120   200055 756100                    STQ     KEY,,AUTO

     1470    13194    3              SUBSTR (FRACT,1,KEY) = SUBSTR (DATA$BUFFER.BYTES,I+1,KEY);

  13194  3 003121   100002 220100                    LDX0    2,,PR1
         3 003122   000000 622006                    EAX2    0,QL
         3 003123   200054 235100                    LDA     I,,AUTO
         3 003124   200055 723100                    LXL3    KEY,,AUTO
         3 003125   040140 100545                    MLR     fill='040'O
         3 003126   100002 600012                    ADSC9   2,A,PR1                  cn=3,n=*X2
         3 003127   200056 200013                    ADSC9   TEMP$,,AUTO              cn=1,n=*X3

     1471    13195    3              IF KEY>0 THEN CALL X$DEC_CONVERT (ADDR (FRACT), KEY)

  13195  3 003130   200055 236100                    LDQ     KEY,,AUTO
         3 003131   003156 604400 3                  TMOZ    s:13200

  13195  3 003132   200056 633500                    EPPR3   TEMP$,,AUTO
         3 003133   200124 453500                    STP3    CURR_BUF_TO_FREE$+1,,AUTO
         3 003134   200055 634500                    EPPR4   KEY,,AUTO
         3 003135   200127 454500                    STP4    CURR_BUF_TO_FREE$+4,,AUTO
         3 003136   200124 635500                    EPPR5   CURR_BUF_TO_FREE$+1,,AUTO
         3 003137   200126 455500                    STP5    CURR_BUF_TO_FREE$+3,,AUTO
         3 003140   200126 630500                    EPPR0   CURR_BUF_TO_FREE$+3,,AUTO
         3 003141   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 003142   000000 701000 xent               TSX1    X$DEC_CONVERT
         3 003143   003145 702000 3                  TSX2    DEC_CONVERT_FAILED
         3 003144   003156 710000 3                  TRA     s:13200

     1472    13196    4                 WHENALTRETURN DO;

     1473    13197    4   DEC_CONVERT_FAILED: CALL VDG$ERRMSG (%E$DECIMAL_NOT_LEGAL, NODE$KEY);

  13197  3 003145   200012 236100       DEC_CONVERT* LDQ     NODE_KEY$,,AUTO
         3 003146   000101 235000 4                  LDA     65
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:163  
         3 003147   200124 757100                    STAQ    CURR_BUF_TO_FREE$+1,,AUTO
         3 003150   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 003151   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 003152   000000 701000 xent               TSX1    VDG$ERRMSG
         3 003153   000000 011000                    NOP     0

     1474    13198    4   OALLOC_FAILED:   ALTRETURN;

  13198  3 003154   200052 221300       OALLOC_FAIL* LDX1  ! ERRCODE+2,,AUTO
         3 003155   000000 702211                    TSX2  ! 0,X1

     1475    13199    4                    END;
     1476    13200    3              DATA$BUFFER.LENGTH# = I;

  13200  3 003156   200054 720100                    LXL0    I,,AUTO
         3 003157   200013 470500                    LDP0    DATA$,,AUTO
         3 003160   000002 740100                    STX0    2,,PR0

     1477    13201    3              END;

     1478    13202
     1479    13203    3           IF DATA$BUFFER.LENGTH#>0 THEN DO;

  13203  3 003161   200013 470500                    LDP0    DATA$,,AUTO
         3 003162   000002 220100                    LDX0    2,,PR0
         3 003163   003210 604400 3                  TMOZ    GOT_KEY

     1480    13204    3              CALL X$DEC_CONVERT (PINCRC (ADDR( DATA.LENGTH#), 1), I)

  13204  3 003164   200005 236100                    LDQ     @DATA,,AUTO
         3 003165   000077 036000 4                  ADLQ    63
         3 003166   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 003167   200054 631500                    EPPR1   I,,AUTO
         3 003170   200127 451500                    STP1    CURR_BUF_TO_FREE$+4,,AUTO
         3 003171   200124 633500                    EPPR3   CURR_BUF_TO_FREE$+1,,AUTO
         3 003172   200126 453500                    STP3    CURR_BUF_TO_FREE$+3,,AUTO
         3 003173   200126 630500                    EPPR0   CURR_BUF_TO_FREE$+3,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:164  
         3 003174   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 003175   000000 701000 xent               TSX1    X$DEC_CONVERT
         3 003176   003145 702000 3                  TSX2    DEC_CONVERT_FAILED

     1481    13205    3                ALTRET (DEC_CONVERT_FAILED);
     1482    13206    3              IF I>66 THEN I = 66;

  13206  3 003177   200054 235100                    LDA     I,,AUTO
         3 003200   000102 115007                    CMPA    66,DL
         3 003201   003204 604400 3                  TMOZ    s:13207

  13206  3 003202   000102 236007                    LDQ     66,DL
         3 003203   200054 756100                    STQ     I,,AUTO

     1483    13207    3              KEY = KEY + I*1000;

  13207  3 003204   200054 236100                    LDQ     I,,AUTO
         3 003205   001750 402007                    MPY     1000,DL
         3 003206   200055 036100                    ADLQ    KEY,,AUTO
         3 003207   200055 756100                    STQ     KEY,,AUTO

     1484    13208    3              END;

     1485    13209
     1486    13210    2   GOT_KEY: ;

  13210  3 003210                       GOT_KEY      null
     1487    13211    3           IF KEY > 65534 THEN DO;

  13211  3 003210   200055 235100                    LDA     KEY,,AUTO
         3 003211   177776 115007                    CMPA    65534,DL
         3 003212   003221 604400 3                  TMOZ    s:13215

     1488    13212    3              CALL VDG$ERRMSG (%E$BAD_KEY_INCR);

  13212  3 003213   000130 630400 4                  EPPR0   88
         3 003214   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:165  
         3 003215   000000 701000 xent               TSX1    VDG$ERRMSG
         3 003216   000000 011000                    NOP     0

     1489    13213    3              ALTRETURN;

  13213  3 003217   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 003220   000000 702211                    TSX2  ! 0,X1

     1490    13214    3              END;
     1491    13215    2           CALL VDG$OALLOC (%CLS_PTR_KEY, TEMP$) ALTRET (OALLOC_FAILED);

  13215  3 003221   200056 630500                    EPPR0   TEMP$,,AUTO
         3 003222   200125 450500                    STP0    CURR_BUF_TO_FREE$+2,,AUTO
         3 003223   000132 236000 4                  LDQ     90
         3 003224   200124 756100                    STQ     CURR_BUF_TO_FREE$+1,,AUTO
         3 003225   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 003226   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 003227   000000 701000 xent               TSX1    VDG$OALLOC
         3 003230   003154 702000 3                  TSX2    OALLOC_FAILED

     1492    13216    2           BUFFER_TO_FREE$ = DATA$;

  13216  3 003231   200013 236100                    LDQ     DATA$,,AUTO
         3 003232   200010 756100                    STQ     BUFFER_TO_FREE$,,AUTO

     1493    13217    2           DATA$ = TEMP$;

  13217  3 003233   200056 236100                    LDQ     TEMP$,,AUTO
         3 003234   200013 756100                    STQ     DATA$,,AUTO

     1494    13218    2           DATA$POINTER.V$ = ADDR(VD_$BY_KEY);

  13218  3 003235   000125 236000 4                  LDQ     85
         3 003236   200013 470500                    LDP0    DATA$,,AUTO
         3 003237   000003 756100                    STQ     3,,PR0

     1495    13219    2           VD_$BY_KEY.BYTES# = KEY;
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:166  

  13219  3 003240   200055 236100                    LDQ     KEY,,AUTO
         3 003241   000001 552034 xsym               STBQ    VD_$BY_KEY+1,'34'O

     1496    13220    2           VD_$BY.V# = KEY;

  13220  3 003242   000003 756000 xsym               STQ     VD_$BY+3

     1497    13221    2           RETURN;

  13221  3 003243   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 003244   000001 702211                    TSX2  ! 1,X1

     1498    13222    2   END;
     1499    13223
     1500    13224        %BOX (TITLE=WTRT_$FILETYPE, PAGE=YES);
             13232    2
             13236    2   /***************************************************************************
             13238    2    *                                                                         *
             13242    2            *                               WTRT_$FILETYPE                           *
             13244    2            *                                                                        *
             13246    2          ***************************************************************************/

     1501    13250
     1502    13251        /*I* NAME: WRTR_$FILETYPE
     1503    13252            PARAMETERS:
     1504    13253                None.
     1505    13254            INPUT:
     1506    13255                The new value in VD_$FILETYPE.
     1507    13256            OUTPUT:
     1508    13257                Modifies the currently open file, if any, to have the new filetpye.
     1509    13258        */
     1510    13259
     1511    13260    1   WRTR_$FILETYPE: PROC ALTRET;

  13260  3 003245   200052 741300       WRTR_$FILET* STX1  ! ERRCODE+2,,AUTO

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:167  
     1512    13261
     1513    13262        %FPT_CLOSE (FPTN=MOD_FILE, CHGATT=YES, DISP=SAVE);
     1514    13304        %F$DCB;
     1515    13361
     1516    13362
     1517    13363    3   MOD_TYPE: DO; /* Put it all in a DO group so that EXIT gets us out */

  13363  3 003246                       MOD_TYPE     null
     1518    13364    3              IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN EXIT;

  13364  3 003246   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         3 003247   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 003250   003314 600000 3                  TZE     s:13378

     1519    13365    3              IF VD_CURRENT_WINDOW$ -> VD$FILE_NODE.DESC.SPEC.V$ ->

  13365  3 003251   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         3 003252   000007 471500                    LDP1    7,,PR0
         3 003253   100010 236100                    LDQ     8,,PR1
         3 003254   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 003255   003314 600000 3                  TZE     s:13378

     1520    13366    3                VD$WINDOW_SPEC.OPERAND.STREAM$ = ADDR(NIL) THEN EXIT;
     1521    13367    3              MOD_FILE.V.DCB# = VD_CURRENT_WINDOW$ -> VD$FILE_NODE.DESC.SPEC.V$ ->

  13367  3 003256   100010 473500                    LDP3    8,,PR1
         3 003257   300001 474500                    LDP4    1,,PR3
         3 003260   400004 720100                    LXL0    4,,PR4
         3 003261   000032 740000 1                  STX0    MOD_FILE+26

     1522    13368    3                VD$WINDOW_SPEC.OPERAND.STREAM$ -> VD$STREAM.PORT$ -> VD$PORT.DCB#;
     1523    13369    3              IF MOD_FILE.V.DCB# = 0 THEN EXIT;

  13369  3 003262   003314 600000 3                  TZE     s:13378

     1524    13370    3              IF NOT DCBADDR(MOD_FILE.V.DCB#) -> F$DCB.FCD# OR

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:168  
  13370  3 003263   000133 471400 4                  LDP1    91
         3 003264   100000 473500                    LDP3    0,,PR1
         3 003265   300000 474510                    LDP4    0,X0,PR3
         3 003266   400031 236100                    LDQ     25,,PR4
         3 003267   020000 316007                    CANQ    8192,DL
         3 003270   003314 600000 3                  TZE     s:13378
         3 003271   400004 236100                    LDQ     4,,PR4
         3 003272   004000 316003                    CANQ    2048,DU
         3 003273   003314 600000 3                  TZE     s:13378

     1525    13371    3                NOT DCBADDR(MOD_FILE.V.DCB#) -> F$DCB.FFLG.REATTR# THEN EXIT;
     1526    13372    3              MOD_FILE.V.TYPE# = VD_$FILETYPE.BYTES;

  13372  3 003274   000002 222000 xsym               LDX2    VD_$FILETYPE+2
         3 003275   040000 100440                    MLR     fill='040'O
         3 003276   000002 400012 xsym               ADSC9   VD_$FILETYPE+2           cn=2,n=*X2
         3 003277   000033 400002 1                  ADSC9   MOD_FILE+27              cn=2,n=2

     1527    13373    4              CALL M$CLOSE (MOD_FILE) WHENALTRETURN DO;

  13373  3 003300   000000 630400 1                  EPPR0   MOD_FILE
         3 003301   450001 713400                    CLIMB   alt,close
         3 003302   406000 401760                    pmme    nvectors=13
         3 003303   003305 702000 3                  TSX2    MONERR
         3 003304   003310 710000 3                  TRA     s:13376

     1528    13374    4   MONERR:       CALL VDG$MONERR;

  13374  3 003305   000002 631400 xsym  MONERR       EPPR1   B_VECTNIL+2
         3 003306   000000 701000 xent               TSX1    VDG$MONERR
         3 003307   000000 011000                    NOP     0

     1529    13375    4                 END;

     1530    13376    3              CALL M$REW (MOD_FILE) ALTRET(MONERR); /* REopen the DCB */

  13376  3 003310   000000 630400 1                  EPPR0   MOD_FILE
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:169  
         3 003311   440006 713400                    CLIMB   alt,+16390
         3 003312   400000 401760                    pmme    nvectors=1
         3 003313   003305 702000 3                  TSX2    MONERR

     1531    13377    3              END;

     1532    13378    2           RETURN;

  13378  3 003314   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 003315   000001 702211                    TSX2  ! 1,X1

     1533    13379    2   END;
     1534    13380        %BOX (TITLE=WRTR_MAGIC, PAGE=YES);
             13388    2
             13392    2   /***************************************************************************
             13394    2    *                                                                         *
             13398    2            *                                 WRTR_MAGIC                             *
             13400    2            *                                                                        *
             13402    2          ***************************************************************************/

     1535    13406
     1536    13407        /*I* NAME: WRTR_MAGIC
     1537    13408            PARAMETERS:
     1538    13409                GLOBAL must be a VD$NUMBER containing a %CLS_BOOLEAN value.
     1539    13410            INPUT:
     1540    13411                DATA may be either a VD$NUMBER or a VD$BUFFER.
     1541    13412                VD_$$INCANTATION must be a VD$NUMBER containing a %CLS_BOOLEAN value.
     1542    13413            OUTPUT:
     1543    13414                BUFFER_TO_FREE$ may point to a VD$BUFFER chain to free IF AND ONLY IF
     1544    13415                    we return normally from VDP$WNAMES.
     1545    13416            DESCRIPTION:
     1546    13417                If DATA is a VD$BUFFER, the buffer must contain an ASCII
     1547    13418                    decimal number:
     1548    13419                    o Convert the number to binary and build a VD$NUMBER for it.
     1549    13420                    o Flag the old VD$BUFFER to be freed; it's not needed anymore.
     1550    13421                VD_$$INCANTATION must be TRUE to allow this write.
     1551    13422                If it is, update GLOBAL with DATA.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:170  
     1552    13423        */
     1553    13424
     1554    13425    1   WRTR_MAGIC: PROC (GLOBAL) ALTRET;

  13425  3 003316   200052 741300       WRTR_MAGIC   STX1  ! ERRCODE+2,,AUTO

     1555    13426
     1556    13427        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
     1557    13472
     1558    13473
     1559    13474    2           IF VD_$$INCANTATION.V# <= 0

  13474  3 003317   000003 235000 xsym               LDA     VD_$$INCANTATION+3
         3 003320   003335 605400 3                  TPNZ    s:13480
         3 003321   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         3 003322   100000 316003                    CANQ    32768,DU
         3 003323   003335 601000 3                  TNZ     s:13480

     1560    13475    3             AND NOT VD_ACCESSOR_PRIV.ACCESS (%NAC_WRITE) THEN DO;

     1561    13476    3              CALL VDG$ERRMSG (%E$CANT_ACCESS_NODE, NODE$KEY);

  13476  3 003324   200012 236100                    LDQ     NODE_KEY$,,AUTO
         3 003325   000135 235000 4                  LDA     93
         3 003326   200124 757100                    STAQ    CURR_BUF_TO_FREE$+1,,AUTO
         3 003327   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 003330   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 003331   000000 701000 xent               TSX1    VDG$ERRMSG
         3 003332   000000 011000                    NOP     0

     1562    13477    3              ALTRETURN;

  13477  3 003333   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 003334   000000 702211                    TSX2  ! 0,X1

     1563    13478    3              END;
     1564    13479
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:171  
     1565    13480    2           CALL WRTR_BOOLEAN (GLOBAL)

  13480  3 003335   200053 236100                    LDQ     @GLOBAL,,AUTO
         3 003336   200117 756100                    STQ     @GLOBAL,,AUTO
         3 003337   001321 701000 3                  TSX1    WRTR_BOOLEAN
         3 003340   003342 702000 3                  TSX2    s:13481
         3 003341   003344 710000 3                  TRA     s:13483

     1566    13481    3           WHENALTRETURN DO; ALTRETURN; END;

  13481  3 003342   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 003343   000000 702211                    TSX2  ! 0,X1

     1567    13482
     1568    13483    2   END WRTR_MAGIC;

  13483  3 003344   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 003345   000001 702211                    TSX2  ! 1,X1

     1569    13484
     1570    13485        %BOX (TITLE=WRTR_$$INCANTATION, PAGE=YES);
             13493    2
             13497    2   /***************************************************************************
             13499    2    *                                                                         *
             13503    2            *                             WRTR_$$INCANTATION                         *
             13505    2            *                                                                        *
             13507    2          ***************************************************************************/

     1571    13511
     1572    13512        /*I* NAME: WRTR_$$INCANTATION
     1573    13513            PARAMETERS:
     1574    13514                GLOBAL must be the VD$NUMBER for WRTR_$$INCANTATION.
     1575    13515            INPUT:
     1576    13516                DATA must be a VD$BUFFER.
     1577    13517            DESCRIPTION:
     1578    13518                If DATA contains the required incantation, then set
     1579    13519                GLOBAL true; else set GLOBAL false.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:172  
     1580    13520        */
     1581    13521
     1582    13522    1   WRTR_$$INCANTATION: PROC (GLOBAL) ALTRET;

  13522  3 003346   200052 741300       WRTR_$$INCA* STX1  ! ERRCODE+2,,AUTO

     1583    13523
     1584    13524        %VD$NUMBER (NAME=GLOBAL, STCLASS=PARAM);
     1585    13569
     1586    13570
     1587    13571    3           IF DATA.BYTES = %CHR_INCANTATION THEN DO;

  13571  3 003347   200005 470500                    LDP0    @DATA,,AUTO
         3 003350   000002 220100                    LDX0    2,,PR0
         3 003351   040000 106540                    CMPC    fill='040'O
         3 003352   000002 400010                    ADSC9   2,,PR0                   cn=2,n=*X0
         3 003353   000001 000126 2                  ADSC9   1                        cn=0,n=86
         3 003354   003370 601000 3                  TNZ     s:13577

     1588    13572    3              GLOBAL.V# = %BITBIN(TRUE);

  13572  3 003355   000001 235007                    LDA     1,DL
         3 003356   200053 471500                    LDP1    @GLOBAL,,AUTO
         3 003357   100003 755100                    STA     3,,PR1

     1589    13573    3              CALL VDG$INFOMSG (%E$INFO_FOR_ALICE);

  13573  3 003360   000137 630400 4                  EPPR0   95
         3 003361   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003362   000000 701000 xent               TSX1    VDG$INFOMSG
         3 003363   000000 011000                    NOP     0

     1590    13574    3              CALL VDG$EREPORT_ERROR;

  13574  3 003364   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 003365   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         3 003366   000000 011000                    NOP     0
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:173  

     1591    13575    3              END;

  13575  3 003367   003372 710000 3                  TRA     s:13579

     1592    13576    2           ELSE
     1593    13577    2              GLOBAL.V# = %BITBIN(FALSE);

  13577  3 003370   200053 471500                    LDP1    @GLOBAL,,AUTO
         3 003371   100003 450100                    STZ     3,,PR1

     1594    13578
     1595    13579    2           CALL VDG$OFREE (GLOBAL.FLINK$->VD$BUFFER)

  13579  3 003372   200053 470500                    LDP0    @GLOBAL,,AUTO
         3 003373   000001 471500                    LDP1    1,,PR0
         3 003374   200124 451500                    STP1    CURR_BUF_TO_FREE$+1,,AUTO
         3 003375   200124 630500                    EPPR0   CURR_BUF_TO_FREE$+1,,AUTO
         3 003376   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003377   000000 701000 xent               TSX1    VDG$OFREE
         3 003400   003402 702000 3                  TSX2    s:13580
         3 003401   003404 710000 3                  TRA     s:13581

     1596    13580    3           WHENALTRETURN DO; ALTRETURN; END;

  13580  3 003402   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
         3 003403   000000 702211                    TSX2  ! 0,X1

     1597    13581    2           GLOBAL.FLINK$ = ADDR(NIL);

  13581  3 003404   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 003405   200053 470500                    LDP0    @GLOBAL,,AUTO
         3 003406   000001 756100                    STQ     1,,PR0

     1598    13582    2           RETURN;

  13582  3 003407   200052 221300                    LDX1  ! ERRCODE+2,,AUTO
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:174  
         3 003410   000001 702211                    TSX2  ! 1,X1
     1599    13583
     1600    13584    2   END WRTR_$$INCANTATION;
     1601    13585
     1602    13586    1   END VDA$WNAMES;
     1603    13587        %EOD;

PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:175  
--  Include file information  --

   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$WNAMES.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:176  

 **** Variables and constants ****

  ****  Section 001  Data  VDA$WNAMES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(1080)  r     1 MOD_FILE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @DATA                    117-0-0/w PTR         r     1 @GLOBAL
    53-0-0/w PTR         r     1 @GLOBAL                   53-0-0/w PTR         r     1 @GLOBAL
    53-0-0/w PTR         r     1 @GLOBAL                   53-0-0/w PTR         r     1 @GLOBAL
    53-0-0/w PTR         r     1 @GLOBAL                   53-0-0/w PTR         r     1 @GLOBAL
     6-0-0/w PTR         r     1 @NODE_EXISTS               3-0-0/w PTR         r     1 @PORT
     4-0-0/w PTR         r     1 @SPEC                     20-0-0/w SBIN        r     1 ALT_INDX
    54-0-0/w PTR         r     1 ALT_INTRO$                55-0-0/w PTR         r     1 ALT_LEX_FUNC$
    10-0-0/w PTR         r     1 BUFFER_TO_FREE$           22-0-0/c CHAR        r     1 CAND_CHAR
    21-0-0/w SBIN        r     1 CCL                       61-0-0/w PTR         r     1 CMD_WINDOW$
    45-0-0/w SBIN        r     1 COUNT                    123-0-0/w PTR         r     1 CURR_BUF_TO_FREE$
   120-0-0/w PTR         r     1 CURR_ELEMENT$             60-0-0/w PTR         r     1 CURR_NODE$
    *0-0-0/w ASTR(90)    r     1 DATA                      13-0-0/w PTR         r     1 DATA$
    14-0-0/c STRC(108)   r     1 DATA_TEXTC                 7-0-0/w BIT         r     1 DELETE_NODE
    23-0-0/w STRC(648)   r     1 DEL_RANGE
   115-0-0/w SBIN        r     1 EDITING_WINDOW_HEIGHT
    55-0-0/w SBIN        r     1 EDITING_WINDOW_LINES      50-0-0/w SBIN        r     1 ERRCODE
    56-0-0/w CHAR(4)     r     1 FRACT                     *0-0-0/w STRC(144)   r     1 GLOBAL
    *0-0-0/w STRC(144)   r     1 GLOBAL                    *0-0-0/w STRC(144)   r     1 GLOBAL
    *0-0-0/w ASTR(90)    r     1 GLOBAL                    *0-0-0/w STRC(144)   r     1 GLOBAL
    *0-0-0/w STRC(144)   r     1 GLOBAL                    *0-0-0/w STRC(144)   r     1 GLOBAL
    54-0-0/w SBIN        r     1 I                         56-0-0/w SBIN        r     1 INDX
    55-0-0/w SBIN        r     1 KEY                       55-0-0/w SBIN        r     1 MN_HEIGHT
   122-0-0/w PTR         r     1 NEW_ELEMENT$              64-0-0/w STRC(900)   r     1 NEW_WSPEC
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:177  
    *0-0-0/w BIT         r     1 NODE_EXISTS               12-0-0/w PTR         r     1 NODE_KEY$
    57-0-0/w SBIN        r     1 N_BORDERS                 56-0-0/w SBIN        r     1 N_EDITING_WINDOWS
    61-0-0/w SBIN        r     1 N_EDITING_WINDOWS         56-0-0/w SBIN        r     1 OLD_$SCREEN
    61-0-0/w SBIN        r     1 OLD_$SCREEN               62-0-0/w PTR         r     1 OLD_CURRENT_WINDOW$
    *0-0-0/w STRC(1944)  r     1 PORT                     121-0-0/w PTR         r     1 PREV_ELEMENT$
    11-0-0/w PTR         r     1 REF_SPEC$                 62-0-0/c CHAR        r     1 RET_CODE
    63-0-0/w SBIN        r     1 SCREEN_PERCENT            57-0-0/w SBIN        r     1 SINK
    *0-0-0/w STRC(72)    r     1 SPEC                      56-0-0/w PTR         r     1 TEMP$
    46-0-0/w PTR         r     1 VD_ERR$                   47-0-0/w PTR         r     1 VD_ERR_SUBST$
    54-0-0/w PTR         r     1 WINDOWS_L0_NODE$          54-0-0/w PTR         r     1 WINDOWS_L0_NODE$
    60-0-0/w PTR         r     1 WINDOWS_L0_NODE$          62-0-0/w STRC(900)   r     1 WSPEC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$$INCANTATION           0-0-0/w STRC(144)   r     1 VD_$$MON_ACC
     0-0-0/w STRC(144)   r     1 VD_$$MON_EVAL              0-0-0/w STRC(144)   r     1 VD_$$MON_PRES
     0-0-0/w STRC(144)   r     1 VD_$$QUAC                  0-0-0/w STRC(144)   r     1 VD_$AUTOTAB
     0-0-0/w STRC(144)   r     1 VD_$BY                     0-0-0/w STRC(72)    r     1 VD_$BY_KEY
     0-0-0/w STRC(144)   r     1 VD_$CASE                   0-0-0/w STRC(144)   r     1 VD_$COMMAND
     0-0-0/w ASTR(90)    r     1 VD_$COMMENT                0-0-0/w STRC(144)   r     1 VD_$COMPONENT
     0-0-0/w ASTR(90)    r     1 VD_$CONTEXT                0-0-0/w ASTR(90)    r     1 VD_$CONTROL
     0-0-0/w ASTR(90)    r     1 VD_$DEFAULT_DESTINATION
     0-0-0/w ASTR(90)    r     1 VD_$DEFAULT_SOURCE         0-0-0/w STRC(144)   r     1 VD_$DIRECTION
     0-0-0/w ASTR(90)    r     1 VD_$EOF_MARK               0-0-0/w STRC(144)   r     1 VD_$EXIST
     0-0-0/w STRC(144)   r     1 VD_$EZ_APPEND              0-0-0/w ASTR(90)    r     1 VD_$FILETYPE
     0-0-0/w STRC(144)   r     1 VD_$HSALL                  0-0-0/w STRC(144)   r     1 VD_$HSCROLL
     0-0-0/w STRC(144)   r     1 VD_$HSCROLL_MARGIN         0-0-0/w ASTR(90)    r     1 VD_$INITIALIZE
     0-0-0/w STRC(144)   r     1 VD_$INSERT                 0-0-0/w ASTR(90)    r     1 VD_$INTRO_1
     0-0-0/w ASTR(90)    r     1 VD_$INTRO_2                0-0-0/w STRC(144)   r     1 VD_$KEY_GENERATION
     0-0-0/w STRC(144)   r     1 VD_$MATCHES                0-0-0/w STRC(144)   r     1 VD_$MATCH_LIMIT
     0-0-0/w STRC(144)   r     1 VD_$MAX_COMMAND            0-0-0/w STRC(144)   r     1 VD_$MAX_RECORD
     0-0-0/w STRC(144)   r     1 VD_$MIN_COMMAND            0-0-0/w STRC(144)   r     1 VD_$MIN_RECORD
     0-0-0/w STRC(144)   r     1 VD_$ONESPACEEDIT           0-0-0/w ASTR(90)    r     1 VD_$PAD
     0-0-0/w STRC(144)   r     1 VD_$POINT                  0-0-0/w STRC(144)   r     1 VD_$PROTECT
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:178  
     0-0-0/w STRC(144)   r     1 VD_$RECORDS_DELETED        0-0-0/w STRC(144)   r     1 VD_$RECORDS_INSERTED
     0-0-0/w STRC(144)   r     1 VD_$RECORDWRAP             0-0-0/w STRC(144)   r     1 VD_$REKEY
     0-0-0/w ASTR(90)    r     1 VD_$RESTORE                0-0-0/w STRC(144)   r     1 VD_$SCREEN
     0-0-0/w STRC(144)   r     1 VD_$SCROLL                 0-0-0/w STRC(144)   r     1 VD_$SEARCH
     0-0-0/w STRC(144)   r     1 VD_$SITES                  0-0-0/w STRC(144)   r     1 VD_$SKIP
     0-0-0/w STRC(144)   r     1 VD_$STRIP_BLANKS           0-0-0/w STRC(144)   r     1 VD_$TEXTEDIT
     0-0-0/w STRC(144)   r     1 VD_$VSCROLL                0-0-0/w STRC(144)   r     1 VD_$VSCROLL_MARGIN
     0-0-0/w ASTR(90)    r     1 VD_$WI_BORDER              0-0-0/w STRC(144)   r     1 VD_$WI_PERCENT
     0-0-0/w STRC(144)   r     1 VD_$WORDWRAP               0-0-0/w ASTR(90)    r     1 VD_$WS_STORAGE
     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w STRC(9)     r     1 VD_ACCESSOR_PRIV
     0-0-0/w PTR         r     1 VD_CMD_OBJECTS$(0:49)
     0-0-0/w PTR         r     1 VD_COMMAND_WINDOW$         0-0-0/w PTR         r     1 VD_CURRENT_WINDOW$
     0-0-0/w SBIN        r     1 VD_EDITING_HEIGHT          0-0-0/w SBIN        r     1 VD_IBEX_WINDOW
     0-0-0/w SBIN        r     1 VD_OLD_$SCREEN             0-0-0/w STRC(504)   r     1 VD_PCB
     0-0-0/w UBIN        r     1 VD_SCREEN_HEIGHT           0-0-0/w UBIN        r     1 VD_SCREEN_WIDTH
     0-0-0/w STRC(4608)  r     1 VD_XLATE_CHAR_CLASS

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(90)    r     1 ALT$INTRO                  0-0-0/w ASTR(90)    r     1 ALT$LEX_FUNC
     0-0-0/w STRC(900)   r     1 CMD$WINDOW                 0-0-0/w ASTR(90)    r     1 CURR$BUFFER
     0-0-0/w ASTR(90)    r     1 CURR$BUF_TO_FREE           0-0-0/w STRC(144)   r     1 CURR$ELEMENT
     0-0-0/w STRC(468)   r     1 CURR$NODE                  0-0-0/w ASTR(90)    r     1 DATA
     0-0-0/w ASTR(90)    r     1 DATA$BUFFER                0-0-0/w STRC(144)   r     1 DATA$NUMBER
     0-0-0/w STRC(144)   r     1 DATA$POINTER               0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/w STRC(144)   r     1 NEW$ELEMENT                0-0-0/w ASTR(9)     r     1 NODE$KEY
     0-0-0/w STRC(144)   r     1 PREV$ELEMENT               0-0-0/w STRC(252)   r     1 REF$SPEC
     0-0-0/w STRC(144)   r     1 SUBST$NUMBER(0:2)
     0-0-0/w STRC(144)   r     1 SUBST$POINTER(0:2)
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w STRC(72)    r     1 VD$KEY_NUMBER
     0-0-0/w STRC(1944)  r     1 VD$PORT                    0-0-0/w STRC(864)   r     1 VD$STREAM
     0-0-0/w STRC(81)    r     1 VD$STRING_HEADER           0-0-0/w ASTR(9)     r     1 VD$TEXTC
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE            0-0-0/w STRC(900)   r     1 VD$WINDOW_SPEC
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:179  
     0-0-0/w STRC(468)   r     1 WINDOWS$L0_NODE            0-0-0/w STRC(468)   r     1 WINDOWS$L0_NODE
     0-0-0/w STRC(468)   r     1 WINDOWS$L0_NODE


   Procedure VDA$WNAMES requires 1801 words for executable code.
   Procedure VDA$WNAMES requires 88 words of local(AUTO) storage.
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:180  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:181  
          MINI XREF LISTING

ADJUST_COMMAND_WINDOW IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11733**PROC    11674--CALL    11712--CALL
ALT$INTRO.BYTES IN PROCEDURE WRTR_BUFFER
     12590**DCL     12850>>IF
ALT$INTRO.LENGTH# IN PROCEDURE WRTR_BUFFER
     12588**DCL     12590--IMP-SIZ 12850>>IF      12850>>IF
ALT$LEX_FUNC.BYTES IN PROCEDURE WRTR_BUFFER
     12648**DCL     12954>>CALLBLT
ALT$LEX_FUNC.LENGTH# IN PROCEDURE WRTR_BUFFER
     12646**DCL     12648--IMP-SIZ 12953>>IF      12954>>CALLBLT
ALT_INDX
      9639**DCL     12954<<CALLBLT
ALT_INTRO$ IN PROCEDURE WRTR_BUFFER
     12527**DCL     12562--IMP-PTR 12847<<ASSIGN  12849<<ASSIGN  12850>>IF      12850>>IF      12850>>IF
ALT_LEX_FUNC$ IN PROCEDURE WRTR_BUFFER
     12528**DCL     12620--IMP-PTR 12922<<ASSIGN  12948<<ASSIGN  12953>>IF      12954>>CALLBLT 12954>>CALLBLT
     12956>>IF
BUFFER_TO_FREE$
      9493**DCL     10584<<ASSIGN  10874>>IF      10875>>CALL    10875>>CALL    11346>>IF      11347<<ASSIGN
     11349>>ASSIGN  13216<<ASSIGN
CAND_CHAR
      9641**DCL     12952<<ASSIGN  12954>>CALLBLT 12963>>ASSIGN  12964>>IF      12964>>IF      12964>>IF
     12964>>IF
CANT_WINDOW_THIS_NAME_FAILURE
     10892**LABEL   10857--GOTO
CCL
      9640**DCL     12963<<ASSIGN  12964>>IF      12964>>IF      12964>>IF      12964>>IF
CMD$WINDOW.COORDS.HEIGHT# IN PROCEDURE ADJUST_COMMAND_WINDOW
     11839**DCL     11878>>IF      11880>>IF
CMD_WINDOW$ IN PROCEDURE ADJUST_COMMAND_WINDOW
     11735**DCL     11812--IMP-PTR 11877<<ASSIGN  11878>>IF      11880>>IF
COMMON_BUFFER IN PROCEDURE WRTR_BUFFER
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:182  
     12749**LABEL   12793--GOTO    12806--GOTO    12811--GOTO    12867--GOTO    12907--GOTO    12973--GOTO
     13006--GOTO
COMMON_COMM_CON IN PROCEDURE WRTR_BUFFER
     12948**LABEL   12933--GOTO
COMMON_NUMBER IN PROCEDURE WRTR_NUMBER
     11321**LABEL   11429--GOTO    11442--GOTO    11457--GOTO
COUNT
      9711**DCL     10832<>CALL
CURR$BUFFER.FLINK$ IN PROCEDURE WRTR_NUMBER
     11163**DCL     11343>>ASSIGN  11344<<ASSIGN
CURR$BUFFER.LENGTH# IN PROCEDURE WRTR_NUMBER
     11163**DCL     11165--IMP-SIZ 11329>>IF      11336--CALL
CURR$BUFFER.OBJECT.CLASS# IN PROCEDURE WRTR_NUMBER
     11161**DCL     11333>>IF
CURR$BUF_TO_FREE.FLINK$ IN PROCEDURE WRTR_NUMBER
     11311**DCL     11350>>DOWHILE 11351>>ASSIGN  11353<<ASSIGN
CURR$BUF_TO_FREE.LENGTH# IN PROCEDURE WRTR_NUMBER
     11311**DCL     11313--IMP-SIZ
CURR$ELEMENT.FLINK$ IN PROCEDURE WRTR_NUMBER
     11109**DCL     11370>>ASSIGN
CURR$ELEMENT.OBJECT.CLASS# IN PROCEDURE WRTR_NUMBER
     11107**DCL     11326>>IF      11358>>IF
CURR$ELEMENT.V# IN PROCEDURE WRTR_NUMBER
     11109**DCL     11334>>ASSIGN  11359>>IF      11360<<ASSIGN  11362<<ASSIGN  11365>>IF      11365>>IF
CURR$NODE IN PROCEDURE WRTR_$SCREEN
     12174**DCL     12326<>CALL    12335<>CALL    12358<>CALL
CURR$NODE.BLINK$ IN PROCEDURE WRTR_$SCREEN
     12200**DCL     12327>>IF      12328>>ASSIGN
CURR$NODE.DESC.SPEC.V$ IN PROCEDURE WRTR_$SCREEN
     12253**DCL     12323>>ASSIGN  12325>>ASSIGN  12333>>ASSIGN  12336>>ASSIGN  12355>>ASSIGN  12357>>ASSIGN
CURR$NODE.FLINK$ IN PROCEDURE WRTR_$SCREEN
     12200**DCL     12352>>ASSIGN
CURR_BUF_TO_FREE$ IN PROCEDURE WRTR_NUMBER
     11064**DCL     11285--IMP-PTR 11349<<ASSIGN  11350>>DOWHILE 11351<<ASSIGN  11351>>ASSIGN  11353>>ASSIGN
CURR_ELEMENT$ IN PROCEDURE WRTR_NUMBER
     11061**DCL     11075--IMP-PTR 11137--IMP-PTR 11322<<ASSIGN  11325>>DOWHILE 11326>>IF      11329>>IF
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:183  
     11333>>IF      11334>>ASSIGN  11336>>CALL    11343>>ASSIGN  11344>>ASSIGN  11347>>ASSIGN  11353>>ASSIGN
     11355<<ASSIGN  11358>>IF      11359>>IF      11360>>ASSIGN  11362>>ASSIGN  11365>>IF      11365>>IF
     11369>>ASSIGN  11370<<ASSIGN  11370>>ASSIGN
CURR_NODE$ IN PROCEDURE WRTR_$SCREEN
     12000**DCL     12174--IMP-PTR 12310<<ASSIGN  12311>>IF      12323>>ASSIGN  12325>>ASSIGN  12326>>CALL
     12327>>IF      12328<<ASSIGN  12328>>ASSIGN  12333>>ASSIGN  12335>>CALL    12336>>ASSIGN  12352<<ASSIGN
     12352>>ASSIGN  12353>>IF      12354>>ASSIGN  12355>>ASSIGN  12357>>ASSIGN  12358>>CALL
DATA
      6390**DCL       171--PROC    10585--ASSIGN  11322--ASSIGN
DATA.BYTES
      6418**DCL     13571>>IF
DATA.LENGTH#
      6416**DCL      6418--IMP-SIZ 13204--CALL    13571>>IF
DATA.OBJECT.CLASS#
      6414**DCL     12279>>IF      13181>>IF      13185>>IF
DATA IN PROCEDURE WRTR_BUFFER
     12492**DCL     12897<>CALL
DATA.BYTES IN PROCEDURE WRTR_BUFFER
     12520**DCL     12756>>ASSIGN  12832>>CALLBLT 12834<>CALL    12850>>IF      12856>>IF      12856>>IF
     12861>>ASSIGN  12883>>DOSELCT 12926>>CALLBLT 12928>>ASSIGN  12952>>ASSIGN
DATA.FLINK$ IN PROCEDURE WRTR_BUFFER
     12518**DCL     12765>>IF      12766>>CALL    12766>>CALL    12807<>CALL    12809>>ASSIGN
DATA.LENGTH# IN PROCEDURE WRTR_BUFFER
     12518**DCL     12520--IMP-SIZ 12749>>IF      12749>>IF      12753>>ASSIGN  12756>>ASSIGN  12828>>ASSIGN
     12832>>CALLBLT 12834>>CALL    12836<<ASSIGN  12845>>IF      12850>>IF      12850>>IF      12850>>IF
     12856>>IF      12856>>IF      12861>>ASSIGN  12882>>IF      12883>>DOSELCT 12897>>CALL    12924>>DOCASE
     12926>>CALLBLT 12928>>ASSIGN  12950>>IF      12951>>DOINDEX 12952>>ASSIGN  12994>>IF      12999<<ASSIGN
DATA$
      9496**DCL      9813--IMP-PTR  9854--IMP-PTR 10585<<ASSIGN  10627>>IF      10846>>CALL    10846>>CALL
     10849>>CALL    10849>>CALL    10855>>IF      10856>>IF      10860>>CALL    10860>>CALL    11340<<ASSIGN
     11373>>ASSIGN  11378>>IF      11379>>CALL    11379>>CALL    11663>>ASSIGN  11895>>ASSIGN  12280>>ASSIGN
     12280>>ASSIGN  12314>>ASSIGN  12339>>IF      12340>>ASSIGN  12342>>ASSIGN  12492--IMP-PTR 12749>>IF
     12749>>IF      12753>>ASSIGN  12756>>ASSIGN  12756>>ASSIGN  12758>>ASSIGN  12765>>IF      12766>>CALL
     12766>>CALL    12806>>IF      12807>>CALL    12809<<ASSIGN  12809>>ASSIGN  12810>>ASSIGN  12828>>ASSIGN
     12832>>CALLBLT 12832>>CALLBLT 12834>>CALL    12834>>CALL    12836>>ASSIGN  12845>>IF      12850>>IF
     12850>>IF      12850>>IF      12850>>IF      12856>>IF      12856>>IF      12856>>IF      12856>>IF
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:184  
     12861>>ASSIGN  12861>>ASSIGN  12882>>IF      12883>>DOSELCT 12883>>DOSELCT 12897>>CALL    12897>>CALL
     12924>>DOCASE  12926>>CALLBLT 12926>>CALLBLT 12928>>ASSIGN  12928>>ASSIGN  12950>>IF      12951>>DOINDEX
     12952>>ASSIGN  12952>>ASSIGN  12994>>IF      12999>>ASSIGN  13144--IMP-PTR 13182>>ASSIGN  13186>>ASSIGN
     13187>>IF      13191>>CALLBLT 13191>>CALLBLT 13193>>ASSIGN  13194>>ASSIGN  13194>>ASSIGN  13200>>ASSIGN
     13203>>IF      13216>>ASSIGN  13217<<ASSIGN  13218>>ASSIGN
DATA$BUFFER
      9813**DCL     10846<>CALL    10849<>CALL    10860<>CALL
DATA$BUFFER.BYTES
      9841**DCL     13191>>CALLBLT 13194>>ASSIGN
DATA$BUFFER.FLINK$
      9839**DCL     10856>>IF
DATA$BUFFER.LENGTH#
      9839**DCL      9841--IMP-SIZ 10846>>CALL    10849>>CALL    10860>>CALL    12810<<ASSIGN  13191>>CALLBLT
     13193>>ASSIGN  13194>>ASSIGN  13200<<ASSIGN  13203>>IF
DATA$NUMBER.FLINK$
      9888**DCL     11378>>IF      11379>>CALL    11379>>CALL
DATA$NUMBER.V#
      9888**DCL     11373>>ASSIGN  11663<<ASSIGN  11895<<ASSIGN  12280<<ASSIGN  12280>>ASSIGN  12314<<ASSIGN
     12339>>IF      12340<<ASSIGN  12342<<ASSIGN  13182>>ASSIGN
DATA$POINTER.V$ IN PROCEDURE WRTR_$BY
     13170**DCL     13186>>ASSIGN  13187>>IF      13218<<ASSIGN
DATA_ERR IN PROCEDURE WRTR_BUFFER
     12888**LABEL   12969--GOTO
DATA_TEXTC
      9631**DCL     11898<>CALL    12862<>CALL
DATA_TEXTC.BYTES
      9635**DCL     11897<<ASSIGN  12861<<ASSIGN
DATA_TEXTC.LENGTH#
      9635**DCL     11896<<ASSIGN  12860<<ASSIGN
DATA_WRITER_FAILED
     10887**LABEL   10635--CALLALT 10638--CALLALT 10641--CALLALT 10644--CALLALT 10647--CALLALT 10650--CALLALT
     10653--CALLALT 10656--CALLALT 10659--CALLALT 10662--CALLALT 10665--CALLALT 10668--CALLALT 10671--CALLALT
     10674--CALLALT 10677--CALLALT 10680--CALLALT 10683--CALLALT 10686--CALLALT 10689--CALLALT 10692--CALLALT
     10696--CALLALT 10699--CALLALT 10702--CALLALT 10705--CALLALT 10708--CALLALT 10711--CALLALT 10714--CALLALT
     10717--CALLALT 10720--CALLALT 10723--CALLALT 10726--CALLALT 10729--CALLALT 10732--CALLALT 10735--CALLALT
     10738--CALLALT 10741--CALLALT 10744--CALLALT 10747--CALLALT 10750--CALLALT 10753--CALLALT 10756--CALLALT
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:185  
     10759--CALLALT 10762--CALLALT 10765--CALLALT 10768--CALLALT 10771--CALLALT 10774--CALLALT 10777--CALLALT
     10780--CALLALT 10785--CALLALT 10788--CALLALT 10791--CALLALT 10794--CALLALT 10797--CALLALT 10800--CALLALT
     10803--CALLALT
DEC_CONVERT_FAILED IN PROCEDURE WRTR_$BY
     13197**LABEL   13204--CALLALT
DEC_CONVERT_FAILED IN PROCEDURE WRTR_NUMBER
     11388**LABEL   11336--CALLALT
DELETE_NODE
      9492**DCL     10583<<ASSIGN  10596<<ASSIGN  10822>>IF
DEL_RANGE
      9650**DCL     10832<>CALL
DEL_RANGE.ENDD
      9692**DCL     10831<<ASSIGN
DEL_RANGE.START
      9664**DCL     10829<>CALL    10831>>ASSIGN  10834<>CALL
EDITING_WINDOW_HEIGHT IN PROCEDURE WRTR_$SCREEN
     12070**DCL     12355<<ASSIGN  12360>>ASSIGN
EDITING_WINDOW_LINES IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11550**DCL     11658<<ASSIGN  11660<<ASSIGN  11660>>ASSIGN  11661>>IF      11662>>ASSIGN
ERRCODE
      9714**DCL     11668<<ASSIGN  11688<<ASSIGN  11706<<ASSIGN  11724<<ASSIGN  11898<>CALL
ERRMSG_FAILED
     10887**LABEL   10884--CALLALT 10892--CALLALT
F$DCB.ACTPOS IN PROCEDURE WRTR_$FILETYPE
     13337**DCL     13337--REDEF
F$DCB.ARS# IN PROCEDURE WRTR_$FILETYPE
     13311**DCL     13311--REDEF
F$DCB.ATTR IN PROCEDURE WRTR_$FILETYPE
     13330**DCL     13331--REDEF
F$DCB.BORROW IN PROCEDURE WRTR_$FILETYPE
     13345**DCL     13345--REDEF   13345--REDEF   13345--REDEF
F$DCB.DCBNAME.L IN PROCEDURE WRTR_$FILETYPE
     13359**DCL     13359--IMP-SIZ
F$DCB.EOMCHAR# IN PROCEDURE WRTR_$FILETYPE
     13315**DCL     13315--REDEF
F$DCB.FCD# IN PROCEDURE WRTR_$FILETYPE
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:186  
     13324**DCL     13370>>IF
F$DCB.FFLG.REATTR# IN PROCEDURE WRTR_$FILETYPE
     13316**DCL     13370>>IF
F$DCB.FLDID IN PROCEDURE WRTR_$FILETYPE
     13340**DCL     13340--REDEF
F$DCB.FORM$ IN PROCEDURE WRTR_$FILETYPE
     13334**DCL     13334--REDEF
F$DCB.FSECT IN PROCEDURE WRTR_$FILETYPE
     13350**DCL     13350--REDEF
F$DCB.FSN# IN PROCEDURE WRTR_$FILETYPE
     13327**DCL     13327--REDEF   13327--REDEF   13328--REDEF
F$DCB.HEADER$ IN PROCEDURE WRTR_$FILETYPE
     13333**DCL     13333--REDEF
F$DCB.IXTNSIZE# IN PROCEDURE WRTR_$FILETYPE
     13331**DCL     13331--REDEF
F$DCB.LASTSTA$ IN PROCEDURE WRTR_$FILETYPE
     13320**DCL     13320--REDEF
F$DCB.LVL IN PROCEDURE WRTR_$FILETYPE
     13346**DCL     13346--REDEF
F$DCB.NAME#.C IN PROCEDURE WRTR_$FILETYPE
     13321**DCL     13321--REDEF
F$DCB.NOEOF IN PROCEDURE WRTR_$FILETYPE
     13343**DCL     13343--REDEF
F$DCB.NRECS# IN PROCEDURE WRTR_$FILETYPE
     13332**DCL     13332--REDEF
F$DCB.NRECX IN PROCEDURE WRTR_$FILETYPE
     13351**DCL     13351--REDEF
F$DCB.OHDR IN PROCEDURE WRTR_$FILETYPE
     13343**DCL     13343--REDEF
F$DCB.ORG# IN PROCEDURE WRTR_$FILETYPE
     13326**DCL     13326--REDEF
F$DCB.PRECNO IN PROCEDURE WRTR_$FILETYPE
     13349**DCL     13349--REDEF
F$DCB.RCSZ IN PROCEDURE WRTR_$FILETYPE
     13355**DCL     13355--REDEF
F$DCB.RES# IN PROCEDURE WRTR_$FILETYPE
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:187  
     13322**DCL     13322--REDEF
F$DCB.SETX IN PROCEDURE WRTR_$FILETYPE
     13334**DCL     13334--REDEF
F$DCB.TAB$ IN PROCEDURE WRTR_$FILETYPE
     13334**DCL     13334--REDEF
F$DCB.TDA IN PROCEDURE WRTR_$FILETYPE
     13348**DCL     13349--REDEF
F$DCB.WSN# IN PROCEDURE WRTR_$FILETYPE
     13322**DCL     13322--REDEF
FRACT IN PROCEDURE WRTR_$BY
     13178**DCL     13192<<ASSIGN  13194<<ASSIGN  13195--CALL
GLOBAL IN PROCEDURE WRTR_$$INCANTATION
     13532**DCL     13522--PROC
GLOBAL.FLINK$ IN PROCEDURE WRTR_$$INCANTATION
     13566**DCL     13579>>CALL    13579>>CALL    13581<<ASSIGN
GLOBAL.V# IN PROCEDURE WRTR_$$INCANTATION
     13566**DCL     13572<<ASSIGN  13577<<ASSIGN
GLOBAL IN PROCEDURE WRTR_$BY
     13060**DCL     13050--PROC
GLOBAL IN PROCEDURE WRTR_$SCREEN
     11957**DCL     11947--PROC    12281<>CALL
GLOBAL IN PROCEDURE WRTR_BUFFER
     12434**DCL     12407--PROC    12791--ENTRY   12804--ENTRY   12806--IF      12826--ENTRY   12846--IF
     12880--ENTRY   12920--ENTRY   12946--ENTRY   12990--ENTRY
GLOBAL.BYTES IN PROCEDURE WRTR_BUFFER
     12462**DCL     12756<<ASSIGN
GLOBAL.FLINK$ IN PROCEDURE WRTR_BUFFER
     12460**DCL     12758<<ASSIGN  12762>>CALL    12762>>CALL    12764<<ASSIGN  12766<>CALL
GLOBAL.LENGTH# IN PROCEDURE WRTR_BUFFER
     12460**DCL     12462--IMP-SIZ 12753<<ASSIGN  12756>>ASSIGN
GLOBAL IN PROCEDURE WRTR_MAGIC
     13435**DCL     13425--PROC    13480<>CALL
GLOBAL IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11510**DCL     11500--PROC    11649--ENTRY   11654<>CALL    11682--ENTRY   11684<>CALL    11696--ENTRY
     11698<>CALL    11718--ENTRY   11720<>CALL
GLOBAL.V# IN PROCEDURE WRTR_MIN_MAX_PAIRS
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:188  
     11544**DCL     11895>>ASSIGN
GLOBAL IN PROCEDURE WRTR_NUMBER
     11023**DCL     11013--PROC    11427--ENTRY   11430--ENTRY   11432--ENTRY   11445--ENTRY   11447--ENTRY
GLOBAL.FLINK$ IN PROCEDURE WRTR_NUMBER
     11057**DCL     11375>>CALL    11375>>CALL    11377<<ASSIGN  11379<>CALL
GLOBAL.OBJECT.CLASS# IN PROCEDURE WRTR_NUMBER
     11055**DCL     11326>>IF      11327>>CALL
GLOBAL.V# IN PROCEDURE WRTR_NUMBER
     11057**DCL     11373<<ASSIGN
GOT_KEY IN PROCEDURE WRTR_$BY
     13210**LABEL   13183--GOTO    13188--GOTO
I IN PROCEDURE WRTR_$BY
     13175**DCL     13191<<CALLBLT 13193>>ASSIGN  13194>>ASSIGN  13200>>ASSIGN  13204<>CALL    13206>>IF
     13206<<ASSIGN  13207>>ASSIGN
ILL_NAME_VALUE_LENGTH_FAILURE IN PROCEDURE WRTR_BUFFER
     12774**LABEL   12751--GOTO
ILL_NUMBER_FOR_NAME_FAILURE IN PROCEDURE WRTR_NUMBER
     11394**LABEL   11367--GOTO
ILL_TYPE_FOR_NAME_FAILURE
     10884**LABEL   10631--GOTO
INDX IN PROCEDURE WRTR_BUFFER
     12529**DCL     12828<<ASSIGN  12834<>CALL    12836>>ASSIGN  12842>>IF      12890<<ASSIGN  12891>>DOWHILE
     12891>>DOWHILE 12893<<ASSIGN  12893>>ASSIGN  12895>>IF      12896<>CALL    12897>>CALL    12901>>ASSIGN
     12951<<DOINDEX 12952>>ASSIGN
KEY IN PROCEDURE WRTR_$BY
     13176**DCL     13182<<ASSIGN  13186<<ASSIGN  13190<<ASSIGN  13193<<ASSIGN  13194>>ASSIGN  13194>>ASSIGN
     13195>>IF      13195<>CALL    13207<<ASSIGN  13207>>ASSIGN  13211>>IF      13219>>ASSIGN  13220>>ASSIGN
M$CLOSE
      5639**DCL-ENT 13373--CALL
M$REW
      5642**DCL-ENT 13376--CALL
MN_HEIGHT IN PROCEDURE WRTR_$SCREEN
     11997**DCL     12288<<ASSIGN  12292>>IF
MOD_FILE IN PROCEDURE WRTR_$FILETYPE
     13285**DCL     13373<>CALL    13376<>CALL
MOD_FILE.SN_ IN PROCEDURE WRTR_$FILETYPE
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:189  
     13285**DCL     13285--REDEF
MOD_FILE.UTL_ IN PROCEDURE WRTR_$FILETYPE
     13286**DCL     13286--REDEF
MOD_FILE.V IN PROCEDURE WRTR_$FILETYPE
     13290**DCL     13285--DCLINIT
MOD_FILE.V.DCB# IN PROCEDURE WRTR_$FILETYPE
     13291**DCL     13367<<ASSIGN  13369>>IF      13370--IF      13370--IF
MOD_FILE.V.EXPIRE# IN PROCEDURE WRTR_$FILETYPE
     13300**DCL     13300--REDEF
MOD_FILE.V.TYPE# IN PROCEDURE WRTR_$FILETYPE
     13298**DCL     13298--REDEF   13372<<ASSIGN
MOD_FILE.V.XTNSIZE# IN PROCEDURE WRTR_$FILETYPE
     13295**DCL     13295--REDEF   13297--REDEF
MONERR IN PROCEDURE WRTR_$FILETYPE
     13374**LABEL   13376--CALLALT
NEQUALS_FAILED
     10887**LABEL   10846--CALLALT
NEW$ELEMENT.FLINK$ IN PROCEDURE WRTR_NUMBER
     11257**DCL     11343<<ASSIGN
NEW$ELEMENT.LENGTH# IN PROCEDURE WRTR_NUMBER
     11257**DCL     11331<<ASSIGN
NEW$ELEMENT.V# IN PROCEDURE WRTR_NUMBER
     11257**DCL     11330<<ASSIGN  11334<<ASSIGN  11336<>CALL
NEW_ELEMENT$ IN PROCEDURE WRTR_NUMBER
     11063**DCL     11223--IMP-PTR 11327<>CALL    11330>>ASSIGN  11331>>ASSIGN  11334>>ASSIGN  11336>>CALL
     11340>>ASSIGN  11342>>ASSIGN  11343>>ASSIGN  11355>>ASSIGN
NEW_WSPEC IN PROCEDURE WRTR_$SCREEN
     12012**DCL     12309<<ASSIGN  12326<>CALL    12335<>CALL    12358<>CALL
NEW_WSPEC.COORDS IN PROCEDURE WRTR_$SCREEN
     12038**DCL     12325<<ASSIGN
NEW_WSPEC.COORDS.HEIGHT# IN PROCEDURE WRTR_$SCREEN
     12039**DCL     12332<<ASSIGN  12349<<ASSIGN  12360<<ASSIGN  12360>>ASSIGN
NKEYIN_DELETE_FAILED
     10887**LABEL   10826--CALLALT
NKEYIN_FAILED
     10887**LABEL   10849--CALLALT
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:190  
NODE$KEY
      9773**DCL     10826<>CALL    10849<>CALL    10884<>CALL    10892<>CALL    11388<>CALL    11394<>CALL
     11898<>CALL    12774<>CALL    12862<>CALL    12888<>CALL    13197<>CALL    13476<>CALL
NODE$KEY.BYTES
      9783**DCL     10852<>CALL    11896--ASSIGN  11897>>ASSIGN
NODE$KEY.LENGTH#
      9781**DCL      9783--IMP-SIZ 10826>>CALL    10849>>CALL    10852>>CALL    10884>>CALL    10892>>CALL
     11388>>CALL    11394>>CALL    11896>>ASSIGN  11897>>ASSIGN  11898>>CALL    12774>>CALL    12862>>CALL
     12888>>CALL    13197>>CALL    13476>>CALL
NODE_EXISTS
      6423**DCL       171--PROC    10588>>IF      10597>>IF      10824>>IF      11434>>IF      11449>>IF
NODE_KEY$
      9495**DCL      9773--IMP-PTR 10618<<ASSIGN  10618<<ASSIGN  10826>>CALL    10826>>CALL    10849>>CALL
     10849>>CALL    10852>>CALL    10852>>CALL    10884>>CALL    10884>>CALL    10892>>CALL    10892>>CALL
     11388>>CALL    11388>>CALL    11394>>CALL    11394>>CALL    11896>>ASSIGN  11896>>ASSIGN  11897>>ASSIGN
     11897>>ASSIGN  11898>>CALL    11898>>CALL    12774>>CALL    12774>>CALL    12862>>CALL    12862>>CALL
     12888>>CALL    12888>>CALL    13197>>CALL    13197>>CALL    13476>>CALL    13476>>CALL
N_BORDERS IN PROCEDURE WRTR_$SCREEN
     11999**DCL     12287<<ASSIGN  12288>>ASSIGN  12301>>ASSIGN  12360>>ASSIGN
N_EDITING_WINDOWS IN PROCEDURE WRTR_$SCREEN
     11998**DCL     12286<<ASSIGN  12288>>ASSIGN  12301>>ASSIGN  12359<<ASSIGN  12359>>ASSIGN  12360>>ASSIGN
N_EDITING_WINDOWS IN PROCEDURE WRTR_BUFFER
     12532**DCL     12997<<ASSIGN  12998>>IF
OALLOC_FAILED IN PROCEDURE WRTR_$BY
     13198**LABEL   13215--CALLALT
OCLEAR_LOCATION_FAILED
     10887**LABEL   10834--CALLALT
OCOPY_LOCATION_FAILED
     10887**LABEL   10829--CALLALT
OFREE_FAILED
     10906**LABEL   10875--CALLALT
OLD_$SCREEN IN PROCEDURE WRTR_$SCREEN
     12001**DCL     12276<<ASSIGN  12311>>IF      12319<<ASSIGN  12330>>ASSIGN  12333<<ASSIGN  12349>>ASSIGN
OLD_$SCREEN IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11551**DCL     11652<<ASSIGN  11653<<ASSIGN  11661>>IF      11662>>ASSIGN  11677>>ASSIGN
OLD_CURRENT_WINDOW$ IN PROCEDURE WRTR_$SCREEN
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:191  
     12002**DCL     12350<<ASSIGN  12363>>ASSIGN
O_FAILED IN PROCEDURE WRTR_NUMBER
     11394**LABEL   11327--CALLALT 11375--CALLALT 11379--CALLALT 11388--CALLALT 11394--CALLALT
PDELETE_FAILED
     10887**LABEL   10832--CALLALT
PORT
      6261**DCL       171--PROC    10832<>CALL    10860<>CALL
PORT.CURRENT
      6314**DCL     10829<>CALL
PORT.CURRENT.KEY.REP#
      6328**DCL     10618>>IF
PORT.CURRENT.KEY.V$
      6328**DCL     10618>>ASSIGN  10618--ASSIGN
PORT.LEVEL.SPEC.V$
      6346**DCL     10590>>ASSIGN  10599>>ASSIGN
PREV$ELEMENT.FLINK$ IN PROCEDURE WRTR_NUMBER
     11212**DCL     11342<<ASSIGN
PREV_ELEMENT$ IN PROCEDURE WRTR_NUMBER
     11062**DCL     11178--IMP-PTR 11321<<ASSIGN  11339>>IF      11342>>ASSIGN  11369<<ASSIGN
PWRITE_FAILED
     10887**LABEL   10860--CALLALT
REF$SPEC
      9733**DCL     10846<>CALL
REF$SPEC.DATA_TYPE#
      9760**DCL     10629>>IF      10824>>IF      10844>>DOCASE  10852<>CALL
REF$SPEC.LEGAL_DATA_TYPE#
      9760**DCL     10629>>IF      10629>>IF      10887>>ASSIGN
REF$SPEC.M#
      9761**DCL     11365>>IF      11394<>CALL    11439<<ASSIGN  11439>>ASSIGN  11454<<ASSIGN  11454>>ASSIGN
     12277<<ASSIGN  12749>>IF      12774<>CALL
REF$SPEC.N#
      9762**DCL     11365>>IF      11394<>CALL    11440<<ASSIGN  11440>>ASSIGN  11455<<ASSIGN  11455>>ASSIGN
     12278<<ASSIGN  12749>>IF      12774<>CALL
REF$SPEC.WINDOWABLE
      9761**DCL     10841>>IF
REF$SPEC.WRITER#
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:192  
      9762**DCL     10627>>IF      10633>>DOCASE  10806<>CALL    12754>>IF      12754>>IF
REF_SPEC$
      9494**DCL      9733--IMP-PTR 10590<<ASSIGN  10599<<ASSIGN  10604<<ASSIGN  10627>>IF      10629>>IF
     10629>>IF      10629>>IF      10633>>DOCASE  10806>>CALL    10824>>IF      10841>>IF      10844>>DOCASE
     10846>>CALL    10852>>CALL    10887>>ASSIGN  11365>>IF      11365>>IF      11394>>CALL    11394>>CALL
     11439>>ASSIGN  11439>>ASSIGN  11440>>ASSIGN  11440>>ASSIGN  11454>>ASSIGN  11454>>ASSIGN  11455>>ASSIGN
     11455>>ASSIGN  12277>>ASSIGN  12278>>ASSIGN  12749>>IF      12749>>IF      12754>>IF      12754>>IF
     12774>>CALL    12774>>CALL
RET_CODE IN PROCEDURE WRTR_BUFFER
     12533**DCL     12834<>CALL    12837>>IF
SCREEN_PERCENT IN PROCEDURE WRTR_$SCREEN
     12003**DCL     12321<<ASSIGN  12323<<ASSIGN  12323>>ASSIGN  12347>>IF      12347<<ASSIGN  12348<<ASSIGN
     12348>>ASSIGN  12355>>ASSIGN
SINK IN PROCEDURE WRTR_BUFFER
     12530**DCL     12829<<ASSIGN  12832<<CALLBLT 12832>>CALLBLT 12834<>CALL    12842>>IF      12887<<ASSIGN
     12888<>CALL    12968<<ASSIGN
SPEC
      6359**DCL       171--PROC    10587--IF      10860<>CALL
SPEC.REP#
      6363**DCL     10593>>IF
SPEC.TYPE#
      6363**DCL     10602>>IF      10603<>CALL
SPEC.V$
      6363**DCL     10594--IF      10604>>ASSIGN
SUBST$NUMBER.OBJECT.CLASS#
     10029**DCL     10886<<ASSIGN
SUBST$NUMBER.V#
     10031**DCL     10887<<ASSIGN
SUBST$POINTER.OBJECT.CLASS#
      9984**DCL     12900<<ASSIGN
SUBST$POINTER.V$
      9986**DCL     12901<<ASSIGN
TEMP$ IN PROCEDURE WRTR_$BY
     13177**DCL     13178--REDEF   13215<>CALL    13217>>ASSIGN
VD$BUFFER
     10179**DCL     10875<>CALL    11375<>CALL    11379<>CALL    12762<>CALL    12766<>CALL    13579<>CALL
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:193  
VD$BUFFER.LENGTH#
     10205**DCL     10207--IMP-SIZ 10875>>CALL    11375>>CALL    11379>>CALL    12762>>CALL    12766>>CALL
     12901--ASSIGN  12901--ASSIGN  13579>>CALL
VD$ERR
      9899**DCL     10885--ASSIGN  12889--ASSIGN
VD$FILE_NODE
     10384**DCL     11884<>CALL
VD$FILE_NODE.DESC.SPEC.V$
     10463**DCL     11877>>ASSIGN  13365>>IF      13367>>ASSIGN
VD$KEY_NUMBER.BYTES# IN PROCEDURE WRTR_$BY
     13125**DCL     13186>>ASSIGN
VD$PORT.DCB#
     10313**DCL     13367>>ASSIGN
VD$PORT.LEVEL.INTERNAL$
     10373**DCL     11656>>ASSIGN  12284>>ASSIGN  12995>>ASSIGN
VD$STREAM.PORT$
     10503**DCL     11656>>ASSIGN  12284>>ASSIGN  12995>>ASSIGN  13367>>ASSIGN
VD$STRING_HEADER
     10126**DCL     12807--CALL
VD$TEXTC.LENGTH#
     10050**DCL     10052--IMP-SIZ 10594>>IF      12901--ASSIGN
VD$TEXTC_REMOTE.LENGTH#
     10111**DCL     10113--IMP-SIZ 10618--ASSIGN
VD$WINDOW_SPEC.COORDS
     10246**DCL     12325>>ASSIGN
VD$WINDOW_SPEC.COORDS.HEIGHT#
     10247**DCL     12323>>ASSIGN  12333>>ASSIGN  12336>>ASSIGN  12355>>ASSIGN  12357<<ASSIGN
VD$WINDOW_SPEC.OPERAND.STREAM$
     10261**DCL     13365>>IF      13367>>ASSIGN
VDA$PDELETE
      6427**DCL-ENT 10832--CALL
VDA$PWRITE
      6426**DCL-ENT 10860--CALL
VDG$EREPORT_ERROR
      6442**DCL-ENT 11900--CALL    12863--CALL    13001--CALL    13574--CALL
VDG$ERRMSG
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:194  
      6437**DCL-ENT 10884--CALL    10892--CALL    11388--CALL    11394--CALL    12774--CALL    12838--CALL
     12853--CALL    12888--CALL    12957--CALL    12959--CALL    13197--CALL    13212--CALL    13476--CALL
VDG$ESCREECH
      6443**DCL-ENT 10589--CALL    10595--CALL    10598--CALL    10603--CALL    10806--CALL    10852--CALL
     12896--CALL
VDG$EXEC_CONTROL
      6431**DCL-ENT 12834--CALL
VDG$INFOMSG
      6438**DCL-ENT 13573--CALL
VDG$MONERR
      6439**DCL-ENT 13374--CALL
VDG$OALLOC
      6432**DCL-ENT 11327--CALL    12807--CALL    13215--CALL
VDG$OCLEAR_LOCATION
      6436**DCL-ENT 10834--CALL
VDG$OCOPY
      6434**DCL-ENT 11379--CALL    12766--CALL    12897--CALL
VDG$OCOPY_LOCATION
      6435**DCL-ENT 10829--CALL
VDG$OFREE
      6433**DCL-ENT 10875--CALL    11375--CALL    12762--CALL    13579--CALL
VDG$WARNMSG
      6440**DCL-ENT 11898--CALL    12862--CALL    13000--CALL
VDP$NEQUALS
      6428**DCL-ENT 10846--CALL
VDP$NKEYIN
      6429**DCL-ENT 10849--CALL
VDP$NKEYIN_DELETE
      6430**DCL-ENT 10826--CALL
VDP$WCHANGE
      6441**DCL-ENT 11884--CALL    12326--CALL    12335--CALL    12358--CALL
VD_$$INCANTATION
      6720**DCL     10635<>CALL
VD_$$INCANTATION.V#
      6754**DCL     13474>>IF
VD_$$MON_ACC
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:195  
      6765**DCL     10638<>CALL
VD_$$MON_EVAL
      6810**DCL     10641<>CALL
VD_$$MON_PRES
      6855**DCL     10644<>CALL
VD_$$QUAC
      6900**DCL     10647<>CALL
VD_$AUTOTAB
      6945**DCL     10650<>CALL
VD_$BY
      6990**DCL     10653<>CALL
VD_$BY.V#
      7024**DCL     13220<<ASSIGN
VD_$BY_KEY IN PROCEDURE WRTR_$BY
     13106**DCL     13187--IF      13218--ASSIGN
VD_$BY_KEY.BYTES# IN PROCEDURE WRTR_$BY
     13110**DCL     13219<<ASSIGN
VD_$CASE
      7035**DCL     10656<>CALL
VD_$COMMAND
      7080**DCL     10659<>CALL
VD_$COMMAND.V#
      7114**DCL     12294>>IF      12295<<ASSIGN  12298>>IF      12299<<ASSIGN
VD_$COMMENT
      7143**DCL     10662<>CALL    12948--ASSIGN  12956--IF
VD_$COMMENT.LENGTH#
      7169**DCL      7171--IMP-SIZ 10662>>CALL
VD_$COMPONENT
      7185**DCL     10665<>CALL
VD_$CONTEXT
      7248**DCL     10668<>CALL
VD_$CONTEXT.LENGTH#
      7274**DCL      7276--IMP-SIZ 10668>>CALL
VD_$CONTROL
      7308**DCL     10671<>CALL    12922--ASSIGN
VD_$CONTROL.BYTES
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:196  
      7336**DCL     12832>>CALLBLT
VD_$CONTROL.LENGTH#
      7334**DCL      7336--IMP-SIZ 10671>>CALL    12832>>CALLBLT
VD_$DEFAULT_DESTINATION
      7369**DCL     10674<>CALL
VD_$DEFAULT_DESTINATION.LENGTH#
      7395**DCL      7397--IMP-SIZ 10674>>CALL
VD_$DEFAULT_SOURCE
      7430**DCL     10677<>CALL
VD_$DEFAULT_SOURCE.LENGTH#
      7456**DCL      7458--IMP-SIZ 10677>>CALL
VD_$DIRECTION
      7472**DCL     10680<>CALL
VD_$EOF_MARK
      7535**DCL     10683<>CALL
VD_$EOF_MARK.LENGTH#
      7561**DCL      7563--IMP-SIZ 10683>>CALL
VD_$EXIST
      7577**DCL     10686<>CALL
VD_$EZ_APPEND
      7622**DCL     10689<>CALL
VD_$FILETYPE
      7685**DCL     10692<>CALL
VD_$FILETYPE.BYTES
      7713**DCL     13372>>ASSIGN
VD_$FILETYPE.LENGTH#
      7711**DCL      7713--IMP-SIZ 10692>>CALL    13372>>ASSIGN
VD_$HSALL
      7727**DCL     10696<>CALL
VD_$HSCROLL
      7772**DCL     10699<>CALL
VD_$HSCROLL_MARGIN
      7817**DCL     10702<>CALL
VD_$INITIALIZE
      7879**DCL     10705<>CALL
VD_$INITIALIZE.LENGTH#
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:197  
      7905**DCL      7907--IMP-SIZ 10705>>CALL
VD_$INSERT
      7920**DCL     10708<>CALL
VD_$INTRO_1
      7983**DCL     10711<>CALL    12846--IF      12849--ASSIGN
VD_$INTRO_1.LENGTH#
      8009**DCL      8011--IMP-SIZ 10711>>CALL
VD_$INTRO_2
      8043**DCL     10714<>CALL    12847--ASSIGN
VD_$INTRO_2.LENGTH#
      8069**DCL      8071--IMP-SIZ 10714>>CALL
VD_$KEY_GENERATION
      8085**DCL     10717<>CALL
VD_$MATCHES
      8130**DCL     10720<>CALL
VD_$MATCH_LIMIT
      8175**DCL     10723<>CALL
VD_$MAX_COMMAND
      8220**DCL     10726<>CALL
VD_$MAX_COMMAND.V#
      8254**DCL     11666>>IF      11667>>ASSIGN  11700>>IF      11701<<ASSIGN  11704>>IF      11705<<ASSIGN
     11880>>IF      11881>>ASSIGN  12300<<ASSIGN  12300>>ASSIGN
VD_$MAX_RECORD
      8265**DCL     10729<>CALL
VD_$MAX_RECORD.V#
      8299**DCL     11686>>IF      11687>>ASSIGN  11722>>IF      11723<<ASSIGN
VD_$MIN_COMMAND
      8310**DCL     10732<>CALL
VD_$MIN_COMMAND.V#
      8344**DCL     11653>>ASSIGN  11661>>IF      11662<<ASSIGN  11663>>ASSIGN  11666>>IF      11667<<ASSIGN
     11677>>ASSIGN  11704>>IF      11705>>ASSIGN  11878>>IF      11879>>ASSIGN  12288>>ASSIGN  12291>>ASSIGN
     12301<<ASSIGN  12301>>ASSIGN  12346>>ASSIGN
VD_$MIN_RECORD
      8355**DCL     10735<>CALL
VD_$MIN_RECORD.V#
      8389**DCL     11686>>IF      11687<<ASSIGN  11722>>IF      11723>>ASSIGN
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:198  
VD_$ONESPACEEDIT
      8401**DCL     10738<>CALL
VD_$PAD
      8465**DCL     10741<>CALL
VD_$PAD.LENGTH#
      8491**DCL      8493--IMP-SIZ 10741>>CALL
VD_$POINT
      8507**DCL     10744<>CALL
VD_$PROTECT
      8552**DCL     10747<>CALL
VD_$RECORDS_DELETED
      8597**DCL     10750<>CALL
VD_$RECORDS_INSERTED
      8642**DCL     10753<>CALL
VD_$RECORDWRAP
      8687**DCL     10756<>CALL
VD_$REKEY
      8732**DCL     10759<>CALL
VD_$RESTORE
      8795**DCL     10762<>CALL
VD_$RESTORE.LENGTH#
      8821**DCL      8823--IMP-SIZ 10762>>CALL
VD_$SCREEN
      8837**DCL     10765<>CALL
VD_$SCREEN.V#
      8871**DCL     10825>>IF      10843>>IF      11873>>IF      12276>>ASSIGN  12290>>IF      12291<<ASSIGN
     12292>>IF      12293<<ASSIGN  12300>>ASSIGN  12301>>ASSIGN  12303>>ASSIGN  12304>>ASSIGN  12311>>IF
     12315<<ASSIGN  12319>>ASSIGN  12320<<ASSIGN  12330<<ASSIGN  12332>>ASSIGN  12334>>IF      12336<<ASSIGN
     12342>>ASSIGN  12343>>ASSIGN  12345>>IF      12346>>ASSIGN  12348>>ASSIGN  12349>>ASSIGN
VD_$SCROLL
      8882**DCL     10768<>CALL
VD_$SEARCH
      8927**DCL     10771<>CALL
VD_$SITES
      8972**DCL     10774<>CALL
VD_$SKIP
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:199  
      9017**DCL     10777<>CALL
VD_$STRIP_BLANKS
      9062**DCL     10780<>CALL
VD_$TEXTEDIT
      9152**DCL     10785<>CALL
VD_$VSCROLL
      9197**DCL     10788<>CALL
VD_$VSCROLL.V#
      9231**DCL     12303<<ASSIGN  12303>>ASSIGN
VD_$VSCROLL_MARGIN
      9242**DCL     10791<>CALL
VD_$VSCROLL_MARGIN.V#
      9276**DCL     12304<<ASSIGN  12304>>ASSIGN
VD_$WI_BORDER
      9305**DCL     10794<>CALL
VD_$WI_BORDER.LENGTH#
      9331**DCL      9333--IMP-SIZ 10794>>CALL    11659>>IF      12287>>ASSIGN  12994>>IF
VD_$WI_PERCENT
      9347**DCL     10797<>CALL
VD_$WORDWRAP
      9392**DCL     10800<>CALL
VD_$WS_STORAGE
      9455**DCL     10803<>CALL
VD_$WS_STORAGE.LENGTH#
      9481**DCL      9483--IMP-SIZ 10803>>CALL
VD_6E.ERR_TAIL$
      6479**DCL     10885>>ASSIGN  12889>>ASSIGN
VD_6E.WINDOWS$
      6461**DCL     11656>>ASSIGN  12284>>ASSIGN  12995>>ASSIGN
VD_ACCESSOR_PRIV.ACCESS
      6502**DCL     13474>>IF
VD_CMD_OBJECTS$
      6509**DCL     12891>>DOWHILE 12897<>CALL    12901>>ASSIGN
VD_COMMAND_WINDOW$
      6484**DCL     11873>>IF      11877>>ASSIGN  11884>>CALL
VD_CURRENT_WINDOW$
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:200  
      6483**DCL     12350>>ASSIGN  12354<<ASSIGN  12363<<ASSIGN  13364>>IF      13365>>IF      13367>>ASSIGN
VD_EDITING_HEIGHT
      6486**DCL     11651>>IF      11653>>ASSIGN  11676>>IF      11677<<ASSIGN  12291>>ASSIGN  12346<<ASSIGN
     12998>>IF
VD_ERR$
      9712**DCL      9899--IMP-PTR
VD_ERR_SUBST$
      9713**DCL      9960--IMP-PTR  9997--IMP-PTR 10885<<ASSIGN  10886>>ASSIGN  10887>>ASSIGN  12889<<ASSIGN
     12900>>ASSIGN  12901>>ASSIGN
VD_IBEX_WINDOW
      6485**DCL     11652>>ASSIGN
VD_OLD_$SCREEN
      6487**DCL     12311>>IF      12313>>IF      12314>>ASSIGN  12340>>ASSIGN  12343>>IF      12343<<ASSIGN
VD_PCB.COMMENT.LEAD
      6646**DCL     12926<<CALLBLT 12928<<ASSIGN  12930<<ASSIGN  12932>>ASSIGN
VD_PCB.COMMENT.TRAIL
      6654**DCL     12932<<ASSIGN
VD_SCREEN_HEIGHT
      6488**DCL     11454>>ASSIGN  11455>>ASSIGN  11652>>ASSIGN  11700>>IF      11701>>ASSIGN  12278>>ASSIGN
     12280>>ASSIGN
VD_SCREEN_WIDTH
      6489**DCL     11439>>ASSIGN  11440>>ASSIGN
VD_XLATE_CHAR_CLASS.CCL
      6506**DCL     12963>>ASSIGN
WARN_PAIRS_DONT_COOPERATE IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11892**PROC    11669--CALL    11689--CALL    11707--CALL    11725--CALL
WINDOWS$L0_NODE.COUNT# IN PROCEDURE WRTR_$SCREEN
     12164**DCL     12286>>ASSIGN
WINDOWS$L0_NODE.TAIL$ IN PROCEDURE WRTR_$SCREEN
     12164**DCL     12310>>ASSIGN
WINDOWS$L0_NODE.COUNT# IN PROCEDURE WRTR_BUFFER
     12744**DCL     12997>>ASSIGN
WINDOWS$L0_NODE.COUNT# IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11645**DCL     11658>>ASSIGN
WINDOWS_L0_NODE$ IN PROCEDURE WRTR_$SCREEN
     11996**DCL     12081--IMP-PTR 12284<<ASSIGN  12286>>ASSIGN  12310>>ASSIGN
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:201  
WINDOWS_L0_NODE$ IN PROCEDURE WRTR_BUFFER
     12531**DCL     12661--IMP-PTR 12995<<ASSIGN  12997>>ASSIGN
WINDOWS_L0_NODE$ IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11549**DCL     11562--IMP-PTR 11656<<ASSIGN  11658>>ASSIGN
WRTR_$$INCANTATION
     13522**PROC    10635--CALL
WRTR_$BY
     13050**PROC    10653--CALL
WRTR_$COMMENT IN PROCEDURE WRTR_BUFFER
     12920**ENTRY   10662--CALL
WRTR_$CONTEXT IN PROCEDURE WRTR_BUFFER
     12804**ENTRY   10668--CALL    10705--CALL
WRTR_$CONTROL IN PROCEDURE WRTR_BUFFER
     12946**ENTRY   10671--CALL
WRTR_$FILETYPE
     13260**PROC    10694--CALL
WRTR_$HSCROLL IN PROCEDURE WRTR_NUMBER
     11430**ENTRY   10699--CALL
WRTR_$HSCROLL_MARGIN IN PROCEDURE WRTR_NUMBER
     11432**ENTRY   10702--CALL
WRTR_$MAX_COMMAND IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11696**ENTRY   10726--CALL
WRTR_$MAX_RECORD IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11718**ENTRY   10729--CALL
WRTR_$MIN_COMMAND IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11649**ENTRY   10732--CALL
WRTR_$MIN_RECORD IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11682**ENTRY   10735--CALL
WRTR_$SCREEN
     11947**PROC    10765--CALL
WRTR_$VSCROLL IN PROCEDURE WRTR_NUMBER
     11445**ENTRY   10788--CALL
WRTR_$VSCROLL_MARGIN IN PROCEDURE WRTR_NUMBER
     11447**ENTRY   10791--CALL
WRTR_$WI_BORDER IN PROCEDURE WRTR_BUFFER
     12990**ENTRY   10794--CALL
PL6.E3A0      #001=VDA$WNAMES File=VDA$WRITERS.:VDA5TSI                          FRI 07/04/97 11:09 Page:202  
WRTR_BLOCK_EXPR IN PROCEDURE WRTR_BUFFER
     12791**ENTRY   10674--CALL    10677--CALL
WRTR_BOOLEAN IN PROCEDURE WRTR_NUMBER
     11427**ENTRY   10656--CALL    10659--CALL    10689--CALL    10696--CALL    10708--CALL    10738--CALL
     10756--CALL    10768--CALL    10771--CALL    10780--CALL    10785--CALL    13480--CALL
WRTR_BUFFER
     12407**PROC    10683--CALL    10692--CALL    10741--CALL    10762--CALL
WRTR_FILE_STCLASS IN PROCEDURE WRTR_BUFFER
     12880**ENTRY   10803--CALL
WRTR_IMP_INTRO IN PROCEDURE WRTR_BUFFER
     12826**ENTRY   10711--CALL    10714--CALL
WRTR_MAGIC
     13425**PROC    10638--CALL    10641--CALL    10644--CALL    10647--CALL
WRTR_NUMBER
     11013**PROC    10650--CALL    10665--CALL    10680--CALL    10686--CALL    10717--CALL    10720--CALL
     10723--CALL    10744--CALL    10747--CALL    10750--CALL    10753--CALL    10759--CALL    10774--CALL
     10777--CALL    10797--CALL    10800--CALL    11654--CALL    11684--CALL    11698--CALL    11720--CALL
     12281--CALL
WSPEC IN PROCEDURE ADJUST_COMMAND_WINDOW
     11744**DCL     11876<<ASSIGN  11884<>CALL
WSPEC.COORDS.HEIGHT# IN PROCEDURE ADJUST_COMMAND_WINDOW
     11771**DCL     11879<<ASSIGN  11881<<ASSIGN
X$DEC_CONVERT
      6444**DCL-ENT 11336--CALL    13195--CALL    13204--CALL
X_FAILED IN PROCEDURE WRTR_BUFFER
     12777**LABEL   12762--CALLALT 12766--CALLALT 12807--CALLALT 12834--CALLALT 12888--CALLALT
X_FAILED IN PROCEDURE WRTR_MIN_MAX_PAIRS
     11731**LABEL   11654--CALLALT 11669--CALLALT 11674--CALLALT 11684--CALLALT 11689--CALLALT 11698--CALLALT
     11707--CALLALT 11712--CALLALT 11720--CALLALT 11725--CALLALT

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:203  
     1604        1        /*T***********************************************************/
     1605        2        /*T*                                                         */
     1606        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1607        4        /*T*                                                         */
     1608        5        /*T***********************************************************/
     1609        6        /*D* NAME: VDA$WWINDOWS
     1610        7            PARAMETERS:
     1611        8                PORT - VD$PORT into which a node from a predefined file has been
     1612        9                    read.  PORT.LEVEL.SPEC (%LVL_LOWER) and .DATA$ (%LVL_LOWER)
     1613       10                    contain copies of the Spec and Data components of the
     1614       11                    old version of the node, if any.
     1615       12                    The user must have write-access to the file.
     1616       13                SPEC - Optional VD$SPEC specifying the new Spec component
     1617       14                    for the node.  If you don't want to affect the
     1618       15                    Spec component, omit this parameter; to erase the
     1619       16                    node's current Spec component, SPEC should specify a
     1620       17                    0-length string.  For the Windows file, erasing the Spec
     1621       18                    component implies that the entire node is to be deleted.
     1622       19                    If passed, SPEC must point to a VD$WINDOW_SPEC.
     1623       20                    Note - Passing a VD$SPEC which is BASED on a pointer
     1624       21                        which is currently NIL acts as tho you omitted
     1625       22                        the parameter -- the Spec component isn't affected.
     1626       23                    Note - Any dynamic storage pointed-to by SPEC will no
     1627       24                        longer be owned by the caller after this call!!
     1628       25                        Give me a Spec and I keep it, not you.  See SPEC
     1629       26                        under OUTPUT comments.
     1630       27                DATA - Optional VD$BUFFER containing the new Data component
     1631       28                    for the node.  If you don't want to affect the
     1632       29                    Data component, omit this parameter; to erase the
     1633       30                    node's current Data component, DATA should specify a
     1634       31                    0-length string (VD$BUFFER.LENGTH# = 0).
     1635       32                    For the Windows file, erasing the Data component does simply
     1636       33                        that:  frees the old Data component.
     1637       34                    Note - Passing a VD$BUFFER which is BASED on a pointer
     1638       35                        which is currently NIL acts as tho you omitted
     1639       36                        the parameter -- the Data component isn't affected.
     1640       37                    Note - DATA must reside in either dynamic storage, static,
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:204  
     1641       38                        or constant -- never the caller's auto storage!!
     1642       39                        If DATA resides in dynamic (as indicated by having a
     1643       40                        non-0 .OBJECT.SIZE#), it will no longer be owned
     1644       41                        by the caller after this call.
     1645       42                        Give me a Data buffer and I keep it, not you.  See
     1646       43                        DATA under OUTPUT comments.
     1647       44                NODE_EXISTS - A BIT(1) ALIGNED flag.  If set, then the Port contains
     1648       45                    an old node which is being replaced by SPEC and/or DATA.
     1649       46                    If NODE_EXISTS = %FALSE, then SPEC and DATA represent
     1650       47                    a node which is being inserted into the file.
     1651       48                If NODE_EXISTS = %FALSE (insertion, new window), SPEC's WINDOW$SPEC
     1652       49                must contain:
     1653       50                    .COMMAND - If set, this is a command window:  .OPERAND
     1654       51                            is ignored.
     1655       52                        If reset, this is an editing window:  we'll allocate a
     1656       53                            new stream for the new window.
     1657       54                    .COORDS must specify the .HEIGHT# and .WIDTH# (as # lines
     1658       55                        or percentages) only; .LINE# and .COLUMN# must be 0.
     1659       56                    .OPERAND.STREAM$ should be NIL.
     1660       57                    .OPERAND.EDIT_BLOCK$ must point to a VD$BLOCK_DESC for the
     1661       58                        initial edit block for the new window; may
     1662       59                        be NIL for an initially empty window.
     1663       60                    .OPERAND.EVAL$ - If .EDIT_BLOCK$ is not NIL, .EVAL$ must
     1664       61                        point to a VD$EVAL for the initial range for the
     1665       62                        new window; else must be NIL.
     1666       63                    .DCB# must be 0 for the new window.
     1667       64                    The remaining info in WINDOW$SPEC must be %CLEAR/NIL.
     1668       65                If NODE_EXISTS = %TRUE (replacement), WINDOW$SPEC must contain
     1669       66                    only .COMMAND, .COORDS.HEIGHT#, and .COORDS.WIDTH# (the
     1670       67                    COORDS must be given as numbers of lines, not as percentages).
     1671       68                    The COORDS are the only window parameters which can be
     1672       69                    changed without deleting then reinserting the window.
     1673       70                    The .COMMAND flag must be set to indicate what type of
     1674       71                    window we think we're changing.
     1675       72            INPUT:
     1676       73                VD_CURRENT_WINDOW$ must point to the VD$FILE_NODE (at level
     1677       74                    1 of the Windows file) of the current editing window.
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:205  
     1678       75                    If none currently (implying no editing windows at all
     1679       76                    currently), then VD_CURRENT_WINDOW$ must be NIL.
     1680       77                VD_COMMAND_WINDOW$ must point to the VD$FILE_NODE (at level
     1681       78                    1 of the Windows file) of the command window.
     1682       79                    If none currently (implying we're not completely
     1683       80                    initialized yet) then VD_COMMAND_WINDOW$ must be NIL.
     1684       81            OUTPUT:
     1685       82                Upon normal return:
     1686       83                    SPEC will be %CLEAR; the Port now owns the SPEC and any
     1687       84                        dynamic storage pointed-to by SPEC.V$.
     1688       85                    DATA -- if it's dynamic -- will no longer be owned by the
     1689       86                        caller.  The Port owns it now.  The caller should
     1690       87                        spoil it's pointer to the DATA VD$BUFFER.
     1691       88                Upon non-fatal altreturns, SPEC and DATA will be untouched.
     1692       89                    The caller will still own any dynamic storage associated
     1693       90                    with them.
     1694       91                PORT.LEVEL.SPEC (n) and/or .DATA (n) will contain/point-to
     1695       92                    SPEC/DATA (unchanged if SPEC/DATA omitted).
     1696       93                    In the Port only, a special representation is used for
     1697       94                    components which have been "cleared" (contents erased):
     1698       95                    PORT.LEVEL.SPEC/.DATA will refer to
     1699       96                    a 0-length local string or a 0-length (but allocated)
     1700       97                    buffer, as appropriate.  This special representation is
     1701       98                    used so VDA$PFLUSH will know to actively erase a
     1702       99                    component, rather than ignore it, since if PFLUSH sees
     1703      100                    %CLEAR/NIL in the port it will just ignore the component.
     1704      101                The VD$FILE_NODE for the node will have new copies of the components
     1705      102                    changed by the write.  If components have been "cleared", they
     1706      103                    will be %CLEAR/NIL in the VD$FILE_NODE.
     1707      104                WINDOW$SPEC.OPERAND.STREAM$ - If this is an editing window,
     1708      105                    .STREAM$ will be updated to point to a VD$STREAM
     1709      106                    (which will be open to the window's initial EDIT_BLOCK,
     1710      107                    if any).
     1711      108                WINDOW$SPEC.OPERAND.EDIT_BLOCK$ and .EVAL$ - If this is
     1712      109                    insertion of a new editing window, and the window
     1713      110                    creation worked fine but opening to an initial EditBlock
     1714      111                    failed, we'll return normally, but the .EDIT_BLOCK$ and
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:206  
     1715      112                    .EVAL$ (if any) will have been freed.  If you try to
     1716      113                    create a window with an EditBlock and the call comes
     1717      114                    back with no EditBlock in the window spec, then you
     1718      115                    know there's a VDA$FOPEN error on the error chain, waiting
     1719      116                    to be reported.
     1720      117                VD_CURRENT_WINDOW$ - For insertion and replacement, the
     1721      118                    affected window will become the new current window.
     1722      119                    For deletion, VD_CURRENT_WINDOW$ will only be changed
     1723      120                    if the deleted window is the current window; in this case,
     1724      121                    the next editing window will become the current window,
     1725      122                    and if there are no other editing windows, VD_CURRENT_WINDOW$
     1726      123                    will be set to NIL.
     1727      124                VD_COMMAND_WINDOW$ - For insertion, the affected window
     1728      125                    will become the new command window (if there already is
     1729      126                    a command window, we'll screech).
     1730      127                    For deletion, VD_COMMAND_WINDOW$ will be set to NIL.
     1731      128            DESCRIPTION:
     1732      129                If we're inserting a new node (opening a new window):
     1733      130                    Build a stream for the window.
     1734      131                    If there is an .OPERAND.EDIT_BLOCK for the new window,
     1735      132                        open the stream to the edit block.
     1736      133                        NOTE that if the open fails, we want to keep going
     1737      134                        so that we complete the creation of the window.
     1738      135                        However, the EditBlock and Eval stack should be freed,
     1739      136                        tho we should return normally when done (assuming the
     1740      137                        creation of the window succeeded).
     1741      138                    Tell the Presenter to create the window.
     1742      139                    Call VDA$PWRITE.
     1743      140                    Set the new current window.
     1744      141                If we're replacing a node (changing a window's COORDS):
     1745      142                    Tell the Presenter to change the window's COORDS.
     1746      143                    The Presenter has changed the old window spec:  set
     1747      144                        the .SPEC_MODIFIED flag in the port to force a PFLUSH.
     1748      145                    Set the new current window.
     1749      146                If we're erasing the Spec component (deleting the node,
     1750      147                    closing the window):
     1751      148                    Tell the Presenter to close the window.
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:207  
     1752      149                    If the window being deleted is the current window,
     1753      150                        find a new current window (if any).
     1754      151                    Call VDA$PDELETE.
     1755      152        */
     1756      153
     1757      154        VDA$WWINDOWS: PROC (PORT, SPEC, DATA, NODE_EXISTS) ALTRET;
     1758      155
     1759      156        %INCLUDE VD_MACROS_M;
     1760     2371        %INCLUDE VD_PERR_C;
     1761     2519        %INCLUDE CP_6;
     1762     2600        %INCLUDE CP_6_SUBS;
     1763     3140
     1764     3141
     1765     3142        %VD$PORT (NAME=PORT, STCLASS=PARAM);
     1766     3240        %VD$SPEC (NAME=SPEC, STCLASS=PARAM);
     1767     3254        %VD$BUFFER (NAME=DATA, STCLASS=PARAM);
     1768     3312    1   DCL NODE_EXISTS BIT(1) ALIGNED;
     1769     3313
     1770     3314
     1771     3315    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
     1772     3316    1   DCL VDA$FOPEN           ENTRY (4) ALTRET;
     1773     3317    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     1774     3318    1   DCL VDA$PWRITE          ENTRY (4) ALTRET;
     1775     3319    1   DCL VDA$PDELETE         ENTRY (4) ALTRET;
     1776     3320    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
     1777     3321    1   DCL VDP$WNEW            ENTRY (2) ALTRET;
     1778     3322    1   DCL VDP$WCHANGE         ENTRY (2) ALTRET;
     1779     3323    1   DCL VDP$WREMOVE         ENTRY (1) ALTRET;
     1780     3324    1   DCL VDP$NEQUALS_1_WINDOW ENTRY (3) ALTRET;
     1781     3325    1   DCL VDP$NKEYIN_1_WINDOW ENTRY (3) ALTRET;
     1782     3326    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1783     3327    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
     1784     3328    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1785     3329    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1786     3330    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1787     3331    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1788     3332    1   DCL VDG$ESCREECH        ENTRY (3);
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:208  
     1789     3333
     1790     3334
     1791     3335
     1792     3336        %VD_6E (STCLASS=SYMREF);
     1793     3372    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
     1794     3373    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
     1795     3374    1   DCL VD_2DIM BIT(1) ALIGNED SYMREF;
     1796     3375    1   DCL VD_EDITING_WINDOWS SBIN SYMREF;
     1797     3376        %VD$NUMBER (NAME=VD_$MIN_COMMAND, STCLASS=SYMREF);
     1798     3421        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
     1799     3466        %VD$BUFFER (NAME=VD_$WI_BORDER, STCLASS=SYMREF);
     1800     3524
     1801     3525
     1802     3526
     1803     3527    1   DCL ALTRETURN_WHEN_DONE BIT(1) ALIGNED;
     1804     3528    1   DCL WINDOW_SPEC$ PTR;
     1805     3529    1   DCL GIVEN_COMMAND_WINDOW BIT(1) ALIGNED;
     1806     3530
     1807     3531
     1808     3532        %VD$WINDOW_SPEC (NAME=WINDOW$SPEC, STCLASS="BASED(WINDOW_SPEC$)");
     1809     3598        %VD$STREAM (NAME=KEYINS$STREAM, STCLASS="BASED(VD_6E.KEYINS$)");
     1810     3704        %VD$FILE_NODE;
     1811     3797        %VD$WINDOW_SPEC;
     1812     3863        %VD$TEXTC_REMOTE;
     1813     3924        %VD$TEXTC;
     1814     3947
     1815     3948
     1816     3949
     1817     3950    1           ALTRETURN_WHEN_DONE = %FALSE;
     1818     3951    1           IF ADDR(SPEC) = ADDR(NIL) THEN
     1819     3952    1              RETURN;          /* Nothing to do to Spec, so -- nothing to do!!! */
     1820     3953
     1821     3954                %GETSPEC (SPEC=SPEC, PTR=WINDOW_SPEC$);
     1822     3964
     1823     3965    2           IF WINDOW_SPEC$->VD$TEXTC.LENGTH# = 0 THEN DO;
     1824     3966    2              IF NODE_EXISTS THEN
     1825     3967    2                 CALL DELETE_WINDOW
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:209  
     1826     3968    2                   ALTRET (DELETE_WINDOW_FAILED);
     1827     3969    2              VD_EDITING_WINDOWS = PORT.LEVEL.INTERNAL$ (%LVL_FILE) ->
     1828     3970    2                VD$FILE_NODE.COUNT#;
     1829     3971    2              END;
     1830     3972    2           ELSE DO;
     1831     3973    2              WINDOW_SPEC$ = SPEC.V$;
     1832     3974    3              IF NOT NODE_EXISTS THEN DO;
     1833     3975    3                 CALL NEW_WINDOW
     1834     3976    3                   ALTRET (NEW_WINDOW_FAILED);
     1835     3977    3                 VD_EDITING_WINDOWS = VD_EDITING_WINDOWS+1;
     1836     3978                      %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=%LVL_LOWER);
     1837     3988                      %COPYSPEC (TSPEC=PORT.LEVEL.SPEC, TINDX=%LVL_LOWER,
     1838     3989                      FSPEC="PORT.LEVEL.INTERNAL$(%LVL_LOWER) -> VD$FILE_NODE.DESC.SPEC");
     1839     4005    3                 END;
     1840     4006    2              ELSE
     1841     4007    3   CHANGE_WINDOW: DO;
     1842     4008    3                 GIVEN_COMMAND_WINDOW = WINDOW$SPEC.COMMAND;
     1843     4009    3                 CALL VDP$WCHANGE (PORT.LEVEL.INTERNAL$ (%LVL_LOWER) ->
     1844     4010    3                   VD$FILE_NODE, WINDOW$SPEC)
     1845     4011    3                   ALTRET (WCHANGE_FAILED);
     1846     4012    3                 PORT.LEVEL.SPEC_MODIFIED (%LVL_LOWER) = %TRUE;
     1847     4013
     1848     4014    4                 IF GIVEN_COMMAND_WINDOW THEN DO;
     1849     4015    4                    IF VD_COMMAND_WINDOW$ ~=
     1850     4016    4                      PORT.LEVEL.INTERNAL$ (%LVL_LOWER) THEN
     1851     4017    4                       CALL VDG$ESCREECH;
     1852     4018    4                    END;
     1853     4019    3                 ELSE
     1854     4020    3                    VD_CURRENT_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER);
     1855     4021    3                 END CHANGE_WINDOW;
     1856     4022    2              END;
     1857     4023
     1858     4024    1           IF ALTRETURN_WHEN_DONE THEN
     1859     4025    1              ALTRETURN;
     1860     4026    1           RETURN;
     1861     4027
     1862     4028
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:210  
     1863     4029    1   NEW_WINDOW_FAILED: ;
     1864     4030    1   WCHANGE_FAILED: ;
     1865     4031    1   OALLOC_FAILED: ;
     1866     4032    1   DELETE_WINDOW_FAILED: ;
     1867     4033    1           ALTRETURN;
     1868     4034
     1869     4035
     1870     4036        %EJECT;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:211  
     1871     4037        /*D* NAME: VDA$WREWINDOW
     1872     4038           PARAMETERS:
     1873     4039               WINDOW_NODE - VD$FILE_NODE describing the window being changed
     1874     4040                   from 1dim to 2dim.
     1875     4041               SPEC - FromWindow Spec for calling VDP$WNEW.
     1876     4042           DESCRIPTION:
     1877     4043               Provides an entry point for switching from 1dim to 2dim, so that
     1878     4044               keyins and other TRMCTL parameters get stuffed in the new stream
     1879     4045               from the old window spec.
     1880     4046        */
     1881     4047    1   VDA$WREWINDOW: ENTRY (PORT, SPEC) ALTRET;
     1882     4048
     1883     4049    1           CALL RE_WINDOW
     1884     4050    1             ALTRET (WCHANGE_FAILED);
     1885     4051    1           RETURN;
     1886     4052        %BOX (TITLE=NEW_WINDOW, PAGE=YES);
              4060    1
              4064    1   /***************************************************************************
              4066    1    *                                                                         *
              4070    1            *                                 NEW_WINDOW                              *
              4072    1            *                                                                         *
              4074    1           ***************************************************************************/

     1887     4078
     1888     4079        /*I* NAME: NEW_WINDOW
     1889     4080            PARAMETERS:
     1890     4081                None.
     1891     4082            INPUT:
     1892     4083                PORT, SPEC, and DATA as for main routine.
     1893     4084                WINDOW$SPEC is the VD$WINDOW_SPEC for the new window.
     1894     4085            OUTPUT:
     1895     4086                WINDOW$SPEC.TRMCTL, .EDTCTL, .TABS, .INTRO_1, .INTRO_2, and
     1896     4087                    .KEY_DEFINITION_BUFFER$ will be filled in with values appropriate
     1897     4088                    for this window (based on the window's key).
     1898     4089                The SPEC and DATA components will be written to PORT.
     1899     4090                VDP$WNEW will have done anything necessary with the FEP.
     1900     4091            DESCRIPTION:
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:212  
     1901     4092                Determine if we're creating the command window or an editing window.
     1902     4093                If it's the command window, we assume there are currently no other
     1903     4094                    windows in 6Edit's "screen".
     1904     4095                If it's an editing window:
     1905     4096                    Make sure there's enough room on the screen for this window.
     1906     4097                    Allocate a VD$STREAM for the window.
     1907     4098                    If the window has an EditBlock, VDA$FOPEN the stream to it.
     1908     4099                Call VDA$PWRITE to write the Spec and Data components.
     1909     4100                Call VDP$WNEW to open the window's DCB and, if appropriate, create the
     1910     4101                    window in the FEP.
     1911     4102                If the FEP created a new window, it will have:
     1912     4103                    o Used the "from-window" (what we call OLD$WINDOW) to obtain
     1913     4104                        "real estate" (space on the terminal screen) for the new
     1914     4105                        window -- the FEP has shrunk the from-window to make room
     1915     4106                        for the new window.
     1916     4107                    o Copied the terminal parameters and IMPs from UC01 to the new
     1917     4108                        window.  But see star #25506; eventually, the FEP may either:
     1918     4109                        o Copy these things from the from-window, in which case our
     1919     4110                            only recourse is to create a new stream for the new window
     1920     4111                            using M$LDEV, which allows us to specify which stream
     1921     4112                            (window) to copy these things from.
     1922     4113                        o Or the FEP may require that we explicitly request that it
     1923     4114                            copy these things from UC01 via a flag in the FPT_OPEN or
     1924     4115                            VLP_WINDOW.
     1925     4116                Search the Equals and Keyins files for values for this window for the
     1926     4117                    terminal control parameters.  We've saved the user's settings for
     1927     4118                    UC01 in VD_ORIGINAL_TRMCTL, _EDTCTL, and _TAB, so:
     1928     4119                    For the Equals values, use the global VD$NUMBERs/VD$BUFFERs.  Set
     1929     4120                        the value appropriate for the new window in WINDOW$SPEC.  If the
     1930     4121                        value is different from the user's value for UC01, then also
     1931     4122                        set the "flush" flag for the parameter group.
     1932     4123                    For the Keyins, loop thru the Keyins file.  (For keyins, there can
     1933     4124                        be "no value" for a name, if the value for the name has a
     1934     4125                        length of 0.)  For each keyin, add the new window's keyin
     1935     4126                        definition to the new window's KEY_DEFINITION_BUFFER.
     1936     4127        */
     1937     4128
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:213  
     1938     4129    1   NEW_WINDOW: PROC ALTRET;
     1939     4130
     1940     4131
     1941     4132
     1942     4133    2   DCL STREAM$ PTR;
     1943     4134    2   DCL EDIT_BLOCK$ PTR;
     1944     4135    2   DCL VD_EVAL$ PTR;
     1945     4136    2   DCL NEXT_EVAL$ PTR;
     1946     4137    2   DCL OLD_WINDOW_NODE$ PTR;
     1947     4138    2   DCL OLD_WINDOW$ PTR;
     1948     4139    2   DCL NEW_WINDOW_KEY$ PTR;
     1949     4140    2   DCL NEW_VALUE$ PTR;
     1950     4141        %VD$LOCATION (NAME=BOF_LOC, STCLASS=AUTO);
     1951     4169    2   DCL KEYINS_PORT$ PTR;
     1952     4170    2   DCL KEYIN_NAME$ PTR;
     1953     4171
     1954     4172
     1955     4173        %VD$STREAM (NAME=STREAM, STCLASS="BASED(STREAM$)");
     1956     4279        %VD$BLOCK_DESC (NAME=EDIT$BLOCK, STCLASS="BASED(EDIT_BLOCK$)");
     1957     4426        %VD$EVAL (NAME=VD$EVAL, STCLASS="BASED(VD_EVAL$)");
     1958     4671        %VD$FILE_NODE (NAME=OLD$WINDOW_NODE, STCLASS="BASED(OLD_WINDOW_NODE$)");
     1959     4764        %VD$WINDOW_SPEC (NAME=OLD$WINDOW, STCLASS="BASED(OLD_WINDOW$)");
     1960     4830        %VD$TEXTC_NUMBER (NAME=NEW$WINDOW_KEY, STCLASS="BASED(NEW_WINDOW_KEY$)");
     1961     4844        %VD$BUFFER (NAME=NEW$VALUE_BUFFER, STCLASS="BASED(NEW_VALUE$)");
     1962     4902        %VD$NUMBER (NAME=NEW$VALUE_NUMBER, STCLASS="BASED(NEW_VALUE$)");
     1963     4947        %VD$POINTER (NAME=NEW$VALUE_PTR, STCLASS="BASED(NEW_VALUE$)");
     1964     4992        %VD$PORT (NAME=KEYINS$PORT, STCLASS="BASED(KEYINS_PORT$)");
     1965     5090        %VD$TEXTC (NAME=KEYIN$NAME, STCLASS="BASED(KEYIN_NAME$)");
     1966     5113    2   DCL X SBIN;
     1967     5114    2   DCL 1 VD_EQUALS_INIT(0:0) SYMREF READONLY,
     1968     5115    2         2 KEY$ PTR,
     1969     5116    2         2 SPEC$ PTR,
     1970     5117    2         2 DATA$ PTR,
     1971     5118    2         2 ACCESS$ PTR;
     1972     5119        %VD$NAME_SPEC;
     1973     5167        %VD$BUFFER (NAME=VD$DATA);
     1974     5225
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:214  
     1975     5226
     1976     5227
     1977     5228    2           IF NOT WINDOW$SPEC.COMMAND THEN
     1978     5229    3   NEW_EDITING_WINDOW: DO;
     1979     5230                   /* Make sure there's room for this editing window */
     1980     5231    3              OLD_WINDOW_NODE$ = PORT.LEVEL.INTERNAL$ (%LVL_FILE) ->
     1981     5232    3                OLD$WINDOW_NODE.TAIL$;
     1982     5233    3              OLD_WINDOW$ = OLD$WINDOW_NODE.DESC.SPEC.V$;
     1983     5234    3              IF OLD$WINDOW.COORDS.HEIGHT# < 2*(VD_$WI_BORDER.LENGTH#+1)
     1984     5235    3                AND VD_$SCREEN.V# > 0 THEN
     1985     5236    3                 GOTO NO_ROOM_FOR_WINDOW_FAILURE;
     1986     5237                   /* Adjust height if necessary to make it fit */
     1987     5238    3              IF WINDOW$SPEC.COORDS.HEIGHT# > OLD$WINDOW.COORDS.HEIGHT#-2 THEN
     1988     5239    3                 WINDOW$SPEC.COORDS.HEIGHT# = OLD$WINDOW.COORDS.HEIGHT#-2;
     1989     5240
     1990     5241    3              CALL VDG$OALLOC (%CLS_STREAM, STREAM$)
     1991     5242    3                ALTRET (OALLOC_FAILED);
     1992     5243    3              WINDOW$SPEC.OPERAND.STREAM$ = STREAM$;
     1993     5244
     1994     5245    3              EDIT_BLOCK$ = WINDOW$SPEC.OPERAND.EDIT_BLOCK$;
     1995     5246    3              IF EDIT_BLOCK$ ~= ADDR(NIL) THEN
     1996     5247    4   FOPEN_EDIT_BLOCK: DO;
     1997     5248    4                 IF WINDOW$SPEC.OPERAND.EVAL$ = ADDR(NIL) THEN
     1998     5249    4                    CALL VDG$ESCREECH;
     1999     5250    4                 CALL VDA$FOPEN (STREAM, EDIT$BLOCK.FILE_KEY, 0,
     2000     5251    4                   EDIT$BLOCK.OPTIONS)
     2001     5252    5                 WHENRETURN DO;
     2002     5253                         /* Open succeeded */
     2003     5254    5                    IF EDIT$BLOCK.OPTIONS.EXIST# = %EX_NEW THEN
     2004     5255    5                       EDIT$BLOCK.OPTIONS.EXIST# = %EX_OLD;
     2005     5256    5                    END;   /* WhenReturn */
     2006     5257    5                 WHENALTRETURN DO;
     2007     5258                         /* Open failed:  remove the EditBlock */
     2008     5259    5                    CALL VDG$OFREE (EDIT$BLOCK)
     2009     5260    5                      ALTRET (OFREE_FAILED);
     2010     5261    5                    WINDOW$SPEC.OPERAND.EDIT_BLOCK$ = ADDR(NIL);
     2011     5262    5                    VD_EVAL$ = WINDOW$SPEC.OPERAND.EVAL$;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:215  
     2012     5263    5                    WINDOW$SPEC.OPERAND.EVAL$ = ADDR(NIL);
     2013     5264    6                    DO WHILE VD_EVAL$ ~= ADDR(NIL);
     2014     5265    6                       NEXT_EVAL$ = VD$EVAL.BLINK$;
     2015     5266    6                       CALL VDG$OFREE (VD$EVAL)
     2016     5267    6                         ALTRET (OFREE_FAILED);
     2017     5268    6                       VD_EVAL$ = NEXT_EVAL$;
     2018     5269    6                       END;
     2019     5270    5                    END;   /* WhenAltreturn */
     2020     5271    4                 END FOPEN_EDIT_BLOCK;
     2021     5272    3              END NEW_EDITING_WINDOW;
     2022     5273
     2023     5274    2           ELSE OLD_WINDOW$ = ADDR(NIL);
     2024     5275
     2025     5276    2           CALL VDA$PWRITE (PORT, %LVL_LOWER, SPEC, DATA)
     2026     5277    2             ALTRET (PWRITE_FAILED);
     2027     5278                /* We lost our Spec!! Get it back! */
     2028     5279    2           WINDOW_SPEC$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER) ->
     2029     5280    2             VD$FILE_NODE.DESC.SPEC.V$;
     2030     5281
     2031     5282    3           IF WINDOW$SPEC.COMMAND THEN DO;
     2032     5283    3              IF VD_COMMAND_WINDOW$ ~= ADDR(NIL) THEN
     2033     5284    3                 CALL VDG$ESCREECH;
     2034     5285    3              VD_COMMAND_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER);
     2035     5286    3              END;
     2036     5287    2           ELSE
     2037     5288    2              VD_CURRENT_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER);
     2038     5289
     2039     5290                /*
     2040     5291                *  VD_CURRENT_WINDOW$ must be set for the new window
     2041     5292                *     before we call VDP$WNEW.
     2042     5293                */
     2043     5294
     2044     5295                /*
     2045     5296                *   Set the terminal control parameters for the new window.
     2046     5297                */
     2047     5298                %GETKEY (KEY=PORT.CURRENT.KEY, INDX="%(LVL_LOWER-1)",
     2048     5299                PTR=NEW_WINDOW_KEY$);
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:216  
     2049     5309
     2050     5310    2           GOTO GET_PARMS;
     2051     5311    2   RE_WINDOW: ENTRY ALTRET;
     2052     5312                %GETKEY (KEY="ADDR(PORT)->VD$FILE_NODE.DESC.KEY",
     2053     5313                PTR=NEW_WINDOW_KEY$);
     2054     5323    2           WINDOW_SPEC$ = ADDR(PORT)-> VD$FILE_NODE.DESC.SPEC.V$;
     2055     5324    2           OLD_WINDOW$ = ADDR(SPEC);
     2056     5325    2   GET_PARMS:;
     2057     5326    2           X = 0;
     2058     5327    3           DO UNTIL VD_EQUALS_INIT.KEY$(X) = ADDR(NIL);
     2059     5328    4              IF VD_EQUALS_INIT.SPEC$(X)->VD$NAME_SPEC.WINDOWABLE THEN DO;
     2060     5329    4                 CALL FIND_VALUE_FOR_WINDOW (VD_EQUALS_INIT.DATA$(X)->VD$DATA);
     2061     5330    4                 IF NEW$VALUE_BUFFER.LENGTH# > 0
     2062     5331    4                   OR NEW$VALUE_BUFFER.OBJECT.CLASS# = %CLS_BUFFER THEN
     2063     5332    4                    CALL VDP$NEQUALS_1_WINDOW
     2064     5333    4                      (VD_EQUALS_INIT.SPEC$(X)->VD$NAME_SPEC,
     2065     5334    4                      NEW$VALUE_BUFFER, WINDOW$SPEC);
     2066     5335    4                 END;
     2067     5336    3              X = X + 1;
     2068     5337    3              END;
     2069     5338                /*N*
     2070     5339                *N* We should check NEW$VALUE_BUFFER.LENGTH# to see if it's 0, and
     2071     5340                *N*   if so, ignore it.  This is because, for most windowable names,
     2072     5341                *N*   a 0-length entry is just a place-holder in the value-chain,
     2073     5342                *N*   and doesn't represent an actual value.
     2074     5343                *N* However, for $INTRO_1 and $INTRO_2, we need some way to represent
     2075     5344                *N*   both:
     2076     5345                *N*     The place-holder in the value-chain; and
     2077     5346                *N*     An empty string as a value (so user can remove an introducer).
     2078     5347                *N* The correct thing to do is to have some indication in the
     2079     5348                *N*   value-chain entries that they are dummy entries, without using
     2080     5349                *N*   the value's string-length do indicate this.
     2081     5350                *N* For now, the user can't remove an introducer, only change it to
     2082     5351                *N*   something else.
     2083     5352                *N*/
     2084     5353
     2085     5354                /*
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:217  
     2086     5355                * Tell the Fep about the window
     2087     5356                */
     2088     5357    2           CALL VDP$WNEW (WINDOW$SPEC, OLD$WINDOW)
     2089     5358    2             ALTRET (WNEW_FAILED);
     2090     5359
     2091     5360                /*
     2092     5361                * Forget keyins if there's not really any windows (yet).
     2093     5362                */
     2094     5363    2           IF VD_$SCREEN.V# = 0 THEN RETURN;
     2095     5364
     2096     5365                /*
     2097     5366                *   Set the keyins for the new window.
     2098     5367                *  On the first VDA$LREAD call, position to BOF.
     2099     5368                */
     2100     5369    2           BOF_LOC = %CLEAR;
     2101     5370    2           CALL VDA$LREAD (KEYINS$STREAM, BOF_LOC, 0, %TRUE)
     2102     5371    2             ALTRET (LREAD_FAILED);
     2103     5372    2           KEYINS_PORT$ = KEYINS$STREAM.PORT$;
     2104     5373
     2105     5374    2   EACH_KEYIN:
     2106     5375    3           DO WHILE NOT KEYINS$STREAM.CURRENT.EOF;
     2107     5376    3              CALL FIND_VALUE_FOR_WINDOW (KEYINS$PORT.LEVEL.DATA$ (%LVL_LOWER) ->
              5376                       VD$DATA);
     2108     5377    4              IF NEW$VALUE_BUFFER.LENGTH# > 0 THEN DO;
     2109     5378                      %GETKEY (KEY=KEYINS$PORT.CURRENT.KEY, INDX="%(LVL_LOWER-1)",
     2110     5379                      PTR=KEYIN_NAME$);
     2111     5389    4                 CALL VDP$NKEYIN_1_WINDOW (KEYIN$NAME, NEW$VALUE_BUFFER,
     2112     5390    4                   WINDOW$SPEC)
     2113     5391    4                   ALTRET (NKEYIN_FAILED);
     2114     5392    4                 END;
     2115     5393
     2116     5394                   /* Read next KEYIN */
     2117     5395    3              CALL VDA$LREAD (KEYINS$STREAM, , 1, %TRUE)
     2118     5396    3                ALTRET (LREAD_FAILED);
     2119     5397    3              END EACH_KEYIN;
     2120     5398
     2121     5399    2           RETURN;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:218  
     2122     5400
     2123     5401
     2124     5402
     2125     5403    2   NO_ROOM_FOR_WINDOW_FAILURE:
     2126     5404    2           CALL VDG$ERRMSG (%E$NO_ROOM_FOR_WINDOW);
     2127     5405    2           ALTRETURN;
     2128     5406
     2129     5407
     2130     5408    2   OALLOC_FAILED: ;
     2131     5409    2   OFREE_FAILED: ;
     2132     5410    2   OCOPY_FAILED: ;
     2133     5411    2   PFLUSH_FAILED: ;
     2134     5412    2   PWRITE_FAILED: ;
     2135     5413    2   WNEW_FAILED: ;
     2136     5414    2   LREAD_FAILED: ;
     2137     5415    2   NKEYIN_FAILED: ;
     2138     5416    2           ALTRETURN;
     2139     5417
     2140     5418        %BOX (TITLE=FIND_VALUE_FOR_WINDOW);

              5430    2   /***************************************************************************
              5432    2    *                                                                         *
              5436    2            *                           FIND_VALUE_FOR_WINDOW                         *
              5438    2            *                                                                         *
              5440    2           ***************************************************************************/

     2141     5444
     2142     5445        /*I** NAME: FIND_VALUE_FOR_WINDOW
     2143     5446            PARAMETER:
     2144     5447                VALUE_CHAIN - VD$NUMBER or VD$BUFFER (or any other "buffer_object") for
     2145     5448                    the value for a terminal parameter or KEYIN name.
     2146     5449                    This is the root of a chain of values, where each value in the chain
     2147     5450                    is for a specific window or group of windows, based on their
     2148     5451                    type and key:
     2149     5452                        First entry in chain:  For all windows.
     2150     5453                        Second entry in chain:  For all editing windows (overrides the
     2151     5454                            first entry).
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:219  
     2152     5455                        Successive entry in chain:  For specific windows, where
     2153     5456                            entry "e" in the chain is for the window whose key
     2154     5457                            is "e"-%WI_KEY_OFFSET.  A value in this set overrides
     2155     5458                            values in the first or second entries in the chain.
     2156     5459                    Note on 0-length buffer_objects:  these may appear in the chain
     2157     5460                    simply as place-holders.  If so, they do NOT represent a value
     2158     5461                    for this parameter/KEYIN.  Thus, there may be no value for this
     2159     5462                    parameter/KEYIN at all, in which case this routine will return
     2160     5463                    a 0-length buffer_object.
     2161     5464            INPUT:
     2162     5465                NEW$WINDOW_KEY - key for the window.
     2163     5466                WINDOW$SPEC.COMMAND - %TRUE if the window is a command window;
     2164     5467                    %FALSE otherwise.
     2165     5468                NEW_VALUE$ - An uninitialized result pointer.
     2166     5469            OUTPUT:
     2167     5470                VALUE$ will point to the appropriate VD$NUMBER/BUFFER for the window.
     2168     5471                    If this NUMBER/BUFFER has a .LENGTH# of 0, then there is no value
     2169     5472                    (window-specific or otherwise) for this window in this value-chain.
     2170     5473            DESCRIPTION:
     2171     5474                Search the VALUE_CHAIN for the value appropriate for the window,
     2172     5475                based on KEY and COMMAND.
     2173     5476        */
     2174     5477
     2175     5478    2   FIND_VALUE_FOR_WINDOW: PROC (VALUE_CHAIN);
     2176     5479
     2177     5480        %VD$BUFFER (NAME=VALUE_CHAIN, STCLASS=PARAM);
     2178     5538
     2179     5539
     2180     5540    3   DCL CURR_ENTRY$ PTR;
     2181     5541    3   DCL K SBIN;
     2182     5542
     2183     5543
     2184     5544        %VD$BUFFER (NAME=CURR$ENTRY, STCLASS="BASED(CURR_ENTRY$)");
     2185     5602
     2186     5603
     2187     5604    3           NEW_VALUE$ = ADDR(VALUE_CHAIN);
     2188     5605
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:220  
     2189     5606    3           CURR_ENTRY$ = VALUE_CHAIN.FLINK$;
     2190     5607    3           IF CURR_ENTRY$ = ADDR(NIL) THEN
     2191     5608    3              RETURN;  /* No values for the editing windows */
     2192     5609    3           IF CURR$ENTRY.LENGTH# > 0 AND NOT WINDOW$SPEC.COMMAND THEN
     2193     5610    3              NEW_VALUE$ = CURR_ENTRY$;    /* Newest guess */
     2194     5611
     2195     5612    4           DO K = NEW$WINDOW_KEY.BYTES# DOWNTO 0;
     2196     5613    4              CURR_ENTRY$ = CURR$ENTRY.FLINK$;
     2197     5614    4              IF CURR_ENTRY$ = ADDR(NIL) THEN
     2198     5615    4                 RETURN;       /* No value for this specific window */
     2199     5616    4              END;
     2200     5617    3           IF CURR$ENTRY.LENGTH# > 0 THEN
     2201     5618    3              NEW_VALUE$ = CURR_ENTRY$;    /* This is it */
     2202     5619
     2203     5620    3           RETURN;
     2204     5621
     2205     5622    3   END FIND_VALUE_FOR_WINDOW;
     2206     5623
     2207     5624    2   END NEW_WINDOW;
     2208     5625
     2209     5626        %BOX (TITLE=DELETE_WINDOW, PAGE=YES);
              5634    2
              5638    2   /***************************************************************************
              5640    2    *                                                                         *
              5644    2            *                               DELETE_WINDOW                             *
              5646    2            *                                                                         *
              5648    2           ***************************************************************************/

     2210     5652
     2211     5653        /*I* NAME: DELETE_WINDOW
     2212     5654            PARAMETERS:
     2213     5655                None.
     2214     5656            INPUT:
     2215     5657                PORT, SPEC, and DATA as for main routine.
     2216     5658            OUTPUT:
     2217     5659                The file node to which PORT is currently positioned will be deleted
     2218     5660                    from the file.
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:221  
     2219     5661            DESCRIPTION:
     2220     5662                Determine if we're deleting the command window or an editing window.
     2221     5663                Call VDP$WREMOVE to close the window's DCB.
     2222     5664                If we're deleting the current window, find a new editing window to be
     2223     5665                    the current window.  If we're deleting the only editing window,
     2224     5666                    then turn VD_2DIM off, and "change" the command window to
     2225     5667                    serial (1-dimensional) mode.
     2226     5668                Call VDA$PDELETE to delete the node from the Windows file.
     2227     5669        */
     2228     5670
     2229     5671    1   DELETE_WINDOW: PROC ALTRET;
     2230     5672
     2231     5673
     2232     5674        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);
     2233     5743    2   DCL COUNT SBIN;
     2234     5744        %VD$WINDOW_SPEC (NAME=SPEC_CLEAR, STCLASS=AUTO);
     2235     5810
     2236     5811        %VD$STREAM;
     2237     5917
     2238     5918
     2239     5919
     2240     5920    2           SPEC_CLEAR = %CLEAR;
     2241     5921    2           WINDOW_SPEC$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER) ->
     2242     5922    2             VD$FILE_NODE.DESC.SPEC.V$;
     2243     5923        /* Release space to editing windows until there are no more */
     2244     5924    2           IF PORT.LEVEL.INTERNAL$ (%LVL_LOWER) ->
     2245     5925    2             VD$FILE_NODE.BLINK$ = VD_COMMAND_WINDOW$ AND
     2246     5926    2             PORT.LEVEL.INTERNAL$ (%LVL_LOWER) ->
     2247     5927    2             VD$FILE_NODE.FLINK$ ~= ADDR(NIL) THEN
     2248     5928    2              WINDOW$SPEC.COORDS.LINE# = -1;
     2249     5929    2           CALL VDP$WCHANGE (PORT.LEVEL.INTERNAL$ (%LVL_LOWER) -> VD$FILE_NODE,
     2250     5930    2             SPEC_CLEAR) ALTRET (WCHANGE_FAILED);
     2251     5931    2           IF WINDOW$SPEC.OPERAND.STREAM$ ~= ADDR(NIL) THEN
     2252     5932    2              CALL VDA$FCLOSE (WINDOW$SPEC.OPERAND.STREAM$ -> VD$STREAM)
     2253     5933    2                ALTRET (FCLOSE_FAILED);
     2254     5934
     2255     5935    2           CALL VDP$WREMOVE (WINDOW$SPEC)
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:222  
     2256     5936    2             ALTRET (WREMOVE_FAILED);
     2257     5937
     2258     5938    2           IF VD_CURRENT_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER) THEN
     2259     5939    3   FIND_NEW_CURRENT_WINDOW: DO;
     2260     5940                   /* Deleting current editing window:  find new one */
     2261     5941    3              VD_CURRENT_WINDOW$ = VD_CURRENT_WINDOW$ -> VD$FILE_NODE.FLINK$;
     2262     5942    3              IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN
     2263     5943    3                 VD_CURRENT_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_FILE) ->
     2264     5944    3                   VD$FILE_NODE.HEAD$ -> VD$FILE_NODE.FLINK$;
     2265     5945    4              IF VD_CURRENT_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER) THEN DO;
     2266     5946                      /* Deleting the only editing window */
     2267     5947    4                 VD_CURRENT_WINDOW$ = ADDR(NIL);
     2268     5948    4                 END;
     2269     5949    3              END;
     2270     5950
     2271     5951    3           IF PORT.LEVEL.INTERNAL$ (%LVL_LOWER) = VD_COMMAND_WINDOW$ THEN DO;
     2272     5952                   /* Deleting the command window */
     2273     5953    3              VD_COMMAND_WINDOW$ = ADDR(NIL);
     2274     5954    3              END;
     2275     5955
     2276     5956    2           CALL VDG$OCOPY_LOCATION (PORT.CURRENT, DEL_RANGE.START)
     2277     5957    2             ALTRET (OCOPY_LOCATION_FAILED);
     2278     5958    2           DEL_RANGE.ENDD = DEL_RANGE.START;
     2279     5959
     2280     5960    2           CALL VDA$PDELETE (PORT, DEL_RANGE, %LVL_LOWER, COUNT)
     2281     5961    2             ALTRET (PDELETE_FAILED);
     2282     5962
     2283     5963    2           CALL VDG$OCLEAR_LOCATION (DEL_RANGE.START)
     2284     5964    2             ALTRET (OCLEAR_LOCATION_FAILED);
     2285     5965
     2286     5966    2           RETURN;
     2287     5967
     2288     5968
     2289     5969
     2290     5970    2   WREMOVE_FAILED: ;
     2291     5971    2   FCLOSE_FAILED: ;
     2292     5972    2   WCHANGE_FAILED: ;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:223  
     2293     5973    2   OCOPY_LOCATION_FAILED: ;
     2294     5974    2   PDELETE_FAILED: ;
     2295     5975    2   OCLEAR_LOCATION_FAILED: ;
     2296     5976    2           ALTRETURN;
     2297     5977
     2298     5978    2   END DELETE_WINDOW;
     2299     5979
     2300     5980    1   END VDA$WWINDOWS;

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:224  
--  Include file information  --

   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$WWINDOWS.

   Procedure VDA$WWINDOWS requires 510 words for executable code.
   Procedure VDA$WWINDOWS requires 60 words of local(AUTO) storage.

    No errors detected in file VDA$WRITERS.:VDA5TSI    .

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:225  

 Object Unit name= VDA$WWINDOWS                               File name= VDA$WRITERS.:VDA5TOU
 UTS= JUL 04 '97 11:10:26.32 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   510    776  VDA$WWINDOWS
    2  RoData even  none    10     12  VDA$WWINDOWS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  VDA$WWINDOWS
     1    152          yes     yes      Std        2  VDA$WREWINDOW
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:226  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 VDG$OFREE
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       2 VDP$WCHANGE
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       3 VDP$NKEYIN_1_WINDOW
 yes     yes           Std       4 VDA$LREAD
 yes     yes           Std       4 VDA$FOPEN
 yes     yes           Std       4 VDG$ERRMSG
 yes     yes           Std       4 VDA$PWRITE
 yes     yes           Std       3 VDP$NEQUALS_1_WINDOW
 yes     yes           Std       2 VDP$WNEW
 yes     yes           Std       1 VDA$FCLOSE
 yes     yes           Std       2 VDG$OCOPY_LOCATION
 yes     yes           Std       4 VDA$PDELETE
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       1 VDP$WREMOVE
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 VD_CURRENT_WINDOW$
     VD_COMMAND_WINDOW$                    VD_EDITING_WINDOWS                    VD_$SCREEN
     VD_$WI_BORDER                    r    VD_EQUALS_INIT                        B_VECTNIL
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:227  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:228  


     1604        1        /*T***********************************************************/
     1605        2        /*T*                                                         */
     1606        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1607        4        /*T*                                                         */
     1608        5        /*T***********************************************************/
     1609        6        /*D* NAME: VDA$WWINDOWS
     1610        7            PARAMETERS:
     1611        8                PORT - VD$PORT into which a node from a predefined file has been
     1612        9                    read.  PORT.LEVEL.SPEC (%LVL_LOWER) and .DATA$ (%LVL_LOWER)
     1613       10                    contain copies of the Spec and Data components of the
     1614       11                    old version of the node, if any.
     1615       12                    The user must have write-access to the file.
     1616       13                SPEC - Optional VD$SPEC specifying the new Spec component
     1617       14                    for the node.  If you don't want to affect the
     1618       15                    Spec component, omit this parameter; to erase the
     1619       16                    node's current Spec component, SPEC should specify a
     1620       17                    0-length string.  For the Windows file, erasing the Spec
     1621       18                    component implies that the entire node is to be deleted.
     1622       19                    If passed, SPEC must point to a VD$WINDOW_SPEC.
     1623       20                    Note - Passing a VD$SPEC which is BASED on a pointer
     1624       21                        which is currently NIL acts as tho you omitted
     1625       22                        the parameter -- the Spec component isn't affected.
     1626       23                    Note - Any dynamic storage pointed-to by SPEC will no
     1627       24                        longer be owned by the caller after this call!!
     1628       25                        Give me a Spec and I keep it, not you.  See SPEC
     1629       26                        under OUTPUT comments.
     1630       27                DATA - Optional VD$BUFFER containing the new Data component
     1631       28                    for the node.  If you don't want to affect the
     1632       29                    Data component, omit this parameter; to erase the
     1633       30                    node's current Data component, DATA should specify a
     1634       31                    0-length string (VD$BUFFER.LENGTH# = 0).
     1635       32                    For the Windows file, erasing the Data component does simply
     1636       33                        that:  frees the old Data component.
     1637       34                    Note - Passing a VD$BUFFER which is BASED on a pointer
     1638       35                        which is currently NIL acts as tho you omitted
     1639       36                        the parameter -- the Data component isn't affected.
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:229  
     1640       37                    Note - DATA must reside in either dynamic storage, static,
     1641       38                        or constant -- never the caller's auto storage!!
     1642       39                        If DATA resides in dynamic (as indicated by having a
     1643       40                        non-0 .OBJECT.SIZE#), it will no longer be owned
     1644       41                        by the caller after this call.
     1645       42                        Give me a Data buffer and I keep it, not you.  See
     1646       43                        DATA under OUTPUT comments.
     1647       44                NODE_EXISTS - A BIT(1) ALIGNED flag.  If set, then the Port contains
     1648       45                    an old node which is being replaced by SPEC and/or DATA.
     1649       46                    If NODE_EXISTS = %FALSE, then SPEC and DATA represent
     1650       47                    a node which is being inserted into the file.
     1651       48                If NODE_EXISTS = %FALSE (insertion, new window), SPEC's WINDOW$SPEC
     1652       49                must contain:
     1653       50                    .COMMAND - If set, this is a command window:  .OPERAND
     1654       51                            is ignored.
     1655       52                        If reset, this is an editing window:  we'll allocate a
     1656       53                            new stream for the new window.
     1657       54                    .COORDS must specify the .HEIGHT# and .WIDTH# (as # lines
     1658       55                        or percentages) only; .LINE# and .COLUMN# must be 0.
     1659       56                    .OPERAND.STREAM$ should be NIL.
     1660       57                    .OPERAND.EDIT_BLOCK$ must point to a VD$BLOCK_DESC for the
     1661       58                        initial edit block for the new window; may
     1662       59                        be NIL for an initially empty window.
     1663       60                    .OPERAND.EVAL$ - If .EDIT_BLOCK$ is not NIL, .EVAL$ must
     1664       61                        point to a VD$EVAL for the initial range for the
     1665       62                        new window; else must be NIL.
     1666       63                    .DCB# must be 0 for the new window.
     1667       64                    The remaining info in WINDOW$SPEC must be %CLEAR/NIL.
     1668       65                If NODE_EXISTS = %TRUE (replacement), WINDOW$SPEC must contain
     1669       66                    only .COMMAND, .COORDS.HEIGHT#, and .COORDS.WIDTH# (the
     1670       67                    COORDS must be given as numbers of lines, not as percentages).
     1671       68                    The COORDS are the only window parameters which can be
     1672       69                    changed without deleting then reinserting the window.
     1673       70                    The .COMMAND flag must be set to indicate what type of
     1674       71                    window we think we're changing.
     1675       72            INPUT:
     1676       73                VD_CURRENT_WINDOW$ must point to the VD$FILE_NODE (at level
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:230  
     1677       74                    1 of the Windows file) of the current editing window.
     1678       75                    If none currently (implying no editing windows at all
     1679       76                    currently), then VD_CURRENT_WINDOW$ must be NIL.
     1680       77                VD_COMMAND_WINDOW$ must point to the VD$FILE_NODE (at level
     1681       78                    1 of the Windows file) of the command window.
     1682       79                    If none currently (implying we're not completely
     1683       80                    initialized yet) then VD_COMMAND_WINDOW$ must be NIL.
     1684       81            OUTPUT:
     1685       82                Upon normal return:
     1686       83                    SPEC will be %CLEAR; the Port now owns the SPEC and any
     1687       84                        dynamic storage pointed-to by SPEC.V$.
     1688       85                    DATA -- if it's dynamic -- will no longer be owned by the
     1689       86                        caller.  The Port owns it now.  The caller should
     1690       87                        spoil it's pointer to the DATA VD$BUFFER.
     1691       88                Upon non-fatal altreturns, SPEC and DATA will be untouched.
     1692       89                    The caller will still own any dynamic storage associated
     1693       90                    with them.
     1694       91                PORT.LEVEL.SPEC (n) and/or .DATA (n) will contain/point-to
     1695       92                    SPEC/DATA (unchanged if SPEC/DATA omitted).
     1696       93                    In the Port only, a special representation is used for
     1697       94                    components which have been "cleared" (contents erased):
     1698       95                    PORT.LEVEL.SPEC/.DATA will refer to
     1699       96                    a 0-length local string or a 0-length (but allocated)
     1700       97                    buffer, as appropriate.  This special representation is
     1701       98                    used so VDA$PFLUSH will know to actively erase a
     1702       99                    component, rather than ignore it, since if PFLUSH sees
     1703      100                    %CLEAR/NIL in the port it will just ignore the component.
     1704      101                The VD$FILE_NODE for the node will have new copies of the components
     1705      102                    changed by the write.  If components have been "cleared", they
     1706      103                    will be %CLEAR/NIL in the VD$FILE_NODE.
     1707      104                WINDOW$SPEC.OPERAND.STREAM$ - If this is an editing window,
     1708      105                    .STREAM$ will be updated to point to a VD$STREAM
     1709      106                    (which will be open to the window's initial EDIT_BLOCK,
     1710      107                    if any).
     1711      108                WINDOW$SPEC.OPERAND.EDIT_BLOCK$ and .EVAL$ - If this is
     1712      109                    insertion of a new editing window, and the window
     1713      110                    creation worked fine but opening to an initial EditBlock
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:231  
     1714      111                    failed, we'll return normally, but the .EDIT_BLOCK$ and
     1715      112                    .EVAL$ (if any) will have been freed.  If you try to
     1716      113                    create a window with an EditBlock and the call comes
     1717      114                    back with no EditBlock in the window spec, then you
     1718      115                    know there's a VDA$FOPEN error on the error chain, waiting
     1719      116                    to be reported.
     1720      117                VD_CURRENT_WINDOW$ - For insertion and replacement, the
     1721      118                    affected window will become the new current window.
     1722      119                    For deletion, VD_CURRENT_WINDOW$ will only be changed
     1723      120                    if the deleted window is the current window; in this case,
     1724      121                    the next editing window will become the current window,
     1725      122                    and if there are no other editing windows, VD_CURRENT_WINDOW$
     1726      123                    will be set to NIL.
     1727      124                VD_COMMAND_WINDOW$ - For insertion, the affected window
     1728      125                    will become the new command window (if there already is
     1729      126                    a command window, we'll screech).
     1730      127                    For deletion, VD_COMMAND_WINDOW$ will be set to NIL.
     1731      128            DESCRIPTION:
     1732      129                If we're inserting a new node (opening a new window):
     1733      130                    Build a stream for the window.
     1734      131                    If there is an .OPERAND.EDIT_BLOCK for the new window,
     1735      132                        open the stream to the edit block.
     1736      133                        NOTE that if the open fails, we want to keep going
     1737      134                        so that we complete the creation of the window.
     1738      135                        However, the EditBlock and Eval stack should be freed,
     1739      136                        tho we should return normally when done (assuming the
     1740      137                        creation of the window succeeded).
     1741      138                    Tell the Presenter to create the window.
     1742      139                    Call VDA$PWRITE.
     1743      140                    Set the new current window.
     1744      141                If we're replacing a node (changing a window's COORDS):
     1745      142                    Tell the Presenter to change the window's COORDS.
     1746      143                    The Presenter has changed the old window spec:  set
     1747      144                        the .SPEC_MODIFIED flag in the port to force a PFLUSH.
     1748      145                    Set the new current window.
     1749      146                If we're erasing the Spec component (deleting the node,
     1750      147                    closing the window):
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:232  
     1751      148                    Tell the Presenter to close the window.
     1752      149                    If the window being deleted is the current window,
     1753      150                        find a new current window (if any).
     1754      151                    Call VDA$PDELETE.
     1755      152        */
     1756      153
     1757      154        VDA$WWINDOWS: PROC (PORT, SPEC, DATA, NODE_EXISTS) ALTRET;

    154  1 000000   000000 700200 xent  VDA$WWINDOWS TSX0  ! X66_AUTO_4
         1 000001   000074 000004                    ZERO    60,4

     1758      155
     1759      156        %INCLUDE VD_MACROS_M;
     1760     2371        %INCLUDE VD_PERR_C;
     1761     2519        %INCLUDE CP_6;
     1762     2600        %INCLUDE CP_6_SUBS;
     1763     3140
     1764     3141
     1765     3142        %VD$PORT (NAME=PORT, STCLASS=PARAM);
     1766     3240        %VD$SPEC (NAME=SPEC, STCLASS=PARAM);
     1767     3254        %VD$BUFFER (NAME=DATA, STCLASS=PARAM);
     1768     3312    1   DCL NODE_EXISTS BIT(1) ALIGNED;
     1769     3313
     1770     3314
     1771     3315    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
     1772     3316    1   DCL VDA$FOPEN           ENTRY (4) ALTRET;
     1773     3317    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     1774     3318    1   DCL VDA$PWRITE          ENTRY (4) ALTRET;
     1775     3319    1   DCL VDA$PDELETE         ENTRY (4) ALTRET;
     1776     3320    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
     1777     3321    1   DCL VDP$WNEW            ENTRY (2) ALTRET;
     1778     3322    1   DCL VDP$WCHANGE         ENTRY (2) ALTRET;
     1779     3323    1   DCL VDP$WREMOVE         ENTRY (1) ALTRET;
     1780     3324    1   DCL VDP$NEQUALS_1_WINDOW ENTRY (3) ALTRET;
     1781     3325    1   DCL VDP$NKEYIN_1_WINDOW ENTRY (3) ALTRET;
     1782     3326    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1783     3327    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:233  
     1784     3328    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1785     3329    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1786     3330    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1787     3331    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1788     3332    1   DCL VDG$ESCREECH        ENTRY (3);
     1789     3333
     1790     3334
     1791     3335
     1792     3336        %VD_6E (STCLASS=SYMREF);
     1793     3372    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
     1794     3373    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
     1795     3374    1   DCL VD_2DIM BIT(1) ALIGNED SYMREF;
     1796     3375    1   DCL VD_EDITING_WINDOWS SBIN SYMREF;
     1797     3376        %VD$NUMBER (NAME=VD_$MIN_COMMAND, STCLASS=SYMREF);
     1798     3421        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
     1799     3466        %VD$BUFFER (NAME=VD_$WI_BORDER, STCLASS=SYMREF);
     1800     3524
     1801     3525
     1802     3526
     1803     3527    1   DCL ALTRETURN_WHEN_DONE BIT(1) ALIGNED;
     1804     3528    1   DCL WINDOW_SPEC$ PTR;
     1805     3529    1   DCL GIVEN_COMMAND_WINDOW BIT(1) ALIGNED;
     1806     3530
     1807     3531
     1808     3532        %VD$WINDOW_SPEC (NAME=WINDOW$SPEC, STCLASS="BASED(WINDOW_SPEC$)");
     1809     3598        %VD$STREAM (NAME=KEYINS$STREAM, STCLASS="BASED(VD_6E.KEYINS$)");
     1810     3704        %VD$FILE_NODE;
     1811     3797        %VD$WINDOW_SPEC;
     1812     3863        %VD$TEXTC_REMOTE;
     1813     3924        %VD$TEXTC;
     1814     3947
     1815     3948
     1816     3949
     1817     3950    1           ALTRETURN_WHEN_DONE = %FALSE;

   3950  1 000002   200007 450100                    STZ     ALTRETURN_WHEN_DONE,,AUTO

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:234  
     1818     3951    1           IF ADDR(SPEC) = ADDR(NIL) THEN

   3951  1 000003   200004 236100                    LDQ     @SPEC,,AUTO
         1 000004   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000005   000007 601000 1                  TNZ     s:3961

     1819     3952    1              RETURN;          /* Nothing to do to Spec, so -- nothing to do!!! */

   3952  1 000006   000000 702200 xent               TSX2  ! X66_ARET

     1820     3953
     1821     3954                %GETSPEC (SPEC=SPEC, PTR=WINDOW_SPEC$);

   3961  1 000007   200004 470500                    LDP0    @SPEC,,AUTO
         1 000010   000000 720100                    LXL0    0,,PR0
         1 000011   000002 100003                    CMPX0   2,DU
         1 000012   000017 601000 1                  TNZ     s:3961+8

   3961  1 000013   000001 471500                    LDP1    1,,PR0
         1 000014   100002 633500                    EPPR3   2,,PR1
         1 000015   200010 453500                    STP3    WINDOW_SPEC$,,AUTO
         1 000016   000021 710000 1                  TRA     s:3965

   3961  1 000017   000001 036003                    ADLQ    1,DU
         1 000020   200010 756100                    STQ     WINDOW_SPEC$,,AUTO

     1822     3964
     1823     3965    2           IF WINDOW_SPEC$->VD$TEXTC.LENGTH# = 0 THEN DO;

   3965  1 000021   200010 471500                    LDP1    WINDOW_SPEC$,,AUTO
         1 000022   100000 236100                    LDQ     0,,PR1
         1 000023   777000 316003                    CANQ    -512,DU
         1 000024   000037 601000 1                  TNZ     s:3973

     1824     3966    2              IF NODE_EXISTS THEN

   3966  1 000025   200006 473500                    LDP3    @NODE_EXISTS,,AUTO
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:235  
         1 000026   300000 234100                    SZN     0,,PR3
         1 000027   000032 605000 1                  TPL     s:3969

     1825     3967    2                 CALL DELETE_WINDOW

   3967  1 000030   000637 701000 1                  TSX1    DELETE_WINDOW
         1 000031   000151 702000 1                  TSX2    NEW_WINDOW_FAILED

     1826     3968    2                   ALTRET (DELETE_WINDOW_FAILED);
     1827     3969    2              VD_EDITING_WINDOWS = PORT.LEVEL.INTERNAL$ (%LVL_FILE) ->

   3969  1 000032   200003 470500                    LDP0    @PORT,,AUTO
         1 000033   000031 471500                    LDP1    25,,PR0
         1 000034   100014 235100                    LDA     12,,PR1
         1 000035   000000 755000 xsym               STA     VD_EDITING_WINDOWS

     1828     3970    2                VD$FILE_NODE.COUNT#;
     1829     3971    2              END;

   3971  1 000036   000145 710000 1                  TRA     s:4024

     1830     3972    2           ELSE DO;

     1831     3973    2              WINDOW_SPEC$ = SPEC.V$;

   3973  1 000037   000001 236100                    LDQ     1,,PR0
         1 000040   200010 756100                    STQ     WINDOW_SPEC$,,AUTO

     1832     3974    3              IF NOT NODE_EXISTS THEN DO;

   3974  1 000041   200006 471500                    LDP1    @NODE_EXISTS,,AUTO
         1 000042   100000 234100                    SZN     0,,PR1
         1 000043   000111 604000 1                  TMI     CHANGE_WINDOW

     1833     3975    3                 CALL NEW_WINDOW

   3975  1 000044   000157 701000 1                  TSX1    NEW_WINDOW
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:236  
         1 000045   000151 702000 1                  TSX2    NEW_WINDOW_FAILED

     1834     3976    3                   ALTRET (NEW_WINDOW_FAILED);
     1835     3977    3                 VD_EDITING_WINDOWS = VD_EDITING_WINDOWS+1;

   3977  1 000046   000000 054000 xsym               AOS     VD_EDITING_WINDOWS

     1836     3978                      %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=%LVL_LOWER);

   3985  1 000047   200003 470500                    LDP0    @PORT,,AUTO
         1 000050   000034 720100                    LXL0    28,,PR0
         1 000051   000002 100003                    CMPX0   2,DU
         1 000052   000063 601000 1                  TNZ     s:3986+1

   3985  1 000053   000035 471500                    LDP1    29,,PR0
         1 000054   200070 451500                    STP1    K+21,,AUTO
         1 000055   200070 630500                    EPPR0   K+21,,AUTO
         1 000056   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000057   000000 701000 xent               TSX1    VDG$OFREE
         1 000060   000062 702000 1                  TSX2    s:3986
         1 000061   000063 710000 1                  TRA     s:3986+1

   3986  1 000062   000000 702200 xent               TSX2  ! X66_AALT

   3986  1 000063   200003 470500                    LDP0    @PORT,,AUTO
         1 000064   000034 450100                    STZ     28,,PR0
         1 000065   000035 450100                    STZ     29,,PR0

     1837     3988                      %COPYSPEC (TSPEC=PORT.LEVEL.SPEC, TINDX=%LVL_LOWER,
     1838     3989                      FSPEC="PORT.LEVEL.INTERNAL$(%LVL_LOWER) -> VD$FILE_NODE.DESC.SPEC");

   4002  1 000066   000040 471500                    LDP1    32,,PR0
         1 000067   000100 100500                    MLR     fill='000'O
         1 000070   100006 000010                    ADSC9   6,,PR1                   cn=0,n=8
         1 000071   000034 000010                    ADSC9   28,,PR0                  cn=0,n=8

   4002  1 000072   100006 720100                    LXL0    6,,PR1
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:237  
         1 000073   000002 100003                    CMPX0   2,DU
         1 000074   000145 601000 1                  TNZ     s:4024

   4002  1 000075   100007 473500                    LDP3    7,,PR1
         1 000076   200003 236100                    LDQ     @PORT,,AUTO
         1 000077   000035 036003                    ADLQ    29,DU
         1 000100   200071 756100                    STQ     K+22,,AUTO
         1 000101   200070 453500                    STP3    K+21,,AUTO
         1 000102   200070 630500                    EPPR0   K+21,,AUTO
         1 000103   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000104   000000 701000 xent               TSX1    VDG$OCOPY
         1 000105   000107 702000 1                  TSX2    s:4003
         1 000106   000110 710000 1                  TRA     s:4005

   4003  1 000107   000000 702200 xent               TSX2  ! X66_AALT

     1839     4005    3                 END;

   4005  1 000110   000145 710000 1                  TRA     s:4024

     1840     4006    2              ELSE
     1841     4007    3   CHANGE_WINDOW: DO;

   4007  1 000111                       CHANGE_WIND* null
     1842     4008    3                 GIVEN_COMMAND_WINDOW = WINDOW$SPEC.COMMAND;

   4008  1 000111   200010 473500                    LDP3    WINDOW_SPEC$,,AUTO
         1 000112   300002 236100                    LDQ     2,,PR3
         1 000113   000011 736000                    QLS     9
         1 000114   400000 376003                    ANQ     -131072,DU
         1 000115   200011 756100                    STQ     GIVEN_COMMAND_WINDOW,,AUTO

     1843     4009    3                 CALL VDP$WCHANGE (PORT.LEVEL.INTERNAL$ (%LVL_LOWER) ->

   4009  1 000116   200003 474500                    LDP4    @PORT,,AUTO
         1 000117   400040 475500                    LDP5    32,,PR4
         1 000120   200010 236100                    LDQ     WINDOW_SPEC$,,AUTO
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:238  
         1 000121   200071 756100                    STQ     K+22,,AUTO
         1 000122   200070 455500                    STP5    K+21,,AUTO
         1 000123   200070 630500                    EPPR0   K+21,,AUTO
         1 000124   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000125   000000 701000 xent               TSX1    VDP$WCHANGE
         1 000126   000151 702000 1                  TSX2    NEW_WINDOW_FAILED

     1844     4010    3                   VD$FILE_NODE, WINDOW$SPEC)
     1845     4011    3                   ALTRET (WCHANGE_FAILED);
     1846     4012    3                 PORT.LEVEL.SPEC_MODIFIED (%LVL_LOWER) = %TRUE;

   4012  1 000127   200003 470500                    LDP0    @PORT,,AUTO
         1 000130   400000 236003                    LDQ     -131072,DU
         1 000131   000037 256100                    ORSQ    31,,PR0

     1847     4013
     1848     4014    4                 IF GIVEN_COMMAND_WINDOW THEN DO;

   4014  1 000132   200011 234100                    SZN     GIVEN_COMMAND_WINDOW,,AUTO
         1 000133   000143 605000 1                  TPL     s:4020

     1849     4015    4                    IF VD_COMMAND_WINDOW$ ~=

   4015  1 000134   000000 236000 xsym               LDQ     VD_COMMAND_WINDOW$
         1 000135   000040 116100                    CMPQ    32,,PR0
         1 000136   000145 600000 1                  TZE     s:4024

     1850     4016    4                      PORT.LEVEL.INTERNAL$ (%LVL_LOWER) THEN
     1851     4017    4                       CALL VDG$ESCREECH;

   4017  1 000137   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000140   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000141   000000 011000                    NOP     0

     1852     4018    4                    END;

   4018  1 000142   000145 710000 1                  TRA     s:4024
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:239  

     1853     4019    3                 ELSE
     1854     4020    3                    VD_CURRENT_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER);

   4020  1 000143   000040 236100                    LDQ     32,,PR0
         1 000144   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

     1855     4021    3                 END CHANGE_WINDOW;

     1856     4022    2              END;

     1857     4023
     1858     4024    1           IF ALTRETURN_WHEN_DONE THEN

   4024  1 000145   200007 234100                    SZN     ALTRETURN_WHEN_DONE,,AUTO
         1 000146   000150 605000 1                  TPL     s:4026

     1859     4025    1              ALTRETURN;

   4025  1 000147   000000 702200 xent               TSX2  ! X66_AALT

     1860     4026    1           RETURN;

   4026  1 000150   000000 702200 xent               TSX2  ! X66_ARET

   4024  1 000151                       NEW_WINDOW_* null
   4024  1 000151                       WCHANGE_FAI* null
   4024  1 000151                       OALLOC_FAIL* null
   4024  1 000151                       DELETE_WIND* null
     1861     4027
     1862     4028
     1863     4029    1   NEW_WINDOW_FAILED: ;
     1864     4030    1   WCHANGE_FAILED: ;
     1865     4031    1   OALLOC_FAILED: ;
     1866     4032    1   DELETE_WINDOW_FAILED: ;
     1867     4033    1           ALTRETURN;

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:240  
   4033  1 000151   000000 702200 xent               TSX2  ! X66_AALT

     1868     4034
     1869     4035
     1870     4036        %EJECT;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:241  
     1871     4037        /*D* NAME: VDA$WREWINDOW
     1872     4038           PARAMETERS:
     1873     4039               WINDOW_NODE - VD$FILE_NODE describing the window being changed
     1874     4040                   from 1dim to 2dim.
     1875     4041               SPEC - FromWindow Spec for calling VDP$WNEW.
     1876     4042           DESCRIPTION:
     1877     4043               Provides an entry point for switching from 1dim to 2dim, so that
     1878     4044               keyins and other TRMCTL parameters get stuffed in the new stream
     1879     4045               from the old window spec.
     1880     4046        */
     1881     4047    1   VDA$WREWINDOW: ENTRY (PORT, SPEC) ALTRET;

   4047  1 000152   000000 700200 xent  VDA$WREWIND* TSX0  ! X66_AUTO_4
         1 000153   000074 000004                    ZERO    60,4

     1882     4048
     1883     4049    1           CALL RE_WINDOW

   4049  1 000154   000364 701000 1                  TSX1    RE_WINDOW
         1 000155   000151 702000 1                  TSX2    NEW_WINDOW_FAILED

     1884     4050    1             ALTRET (WCHANGE_FAILED);
     1885     4051    1           RETURN;

   4051  1 000156   000000 702200 xent               TSX2  ! X66_ARET

     1886     4052        %BOX (TITLE=NEW_WINDOW, PAGE=YES);
              4060    1
              4064    1   /***************************************************************************
              4066    1    *                                                                         *
              4070    1            *                                 NEW_WINDOW                             *
              4072    1            *                                                                        *
              4074    1          ***************************************************************************/

     1887     4078
     1888     4079        /*I* NAME: NEW_WINDOW
     1889     4080            PARAMETERS:
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:242  
     1890     4081                None.
     1891     4082            INPUT:
     1892     4083                PORT, SPEC, and DATA as for main routine.
     1893     4084                WINDOW$SPEC is the VD$WINDOW_SPEC for the new window.
     1894     4085            OUTPUT:
     1895     4086                WINDOW$SPEC.TRMCTL, .EDTCTL, .TABS, .INTRO_1, .INTRO_2, and
     1896     4087                    .KEY_DEFINITION_BUFFER$ will be filled in with values appropriate
     1897     4088                    for this window (based on the window's key).
     1898     4089                The SPEC and DATA components will be written to PORT.
     1899     4090                VDP$WNEW will have done anything necessary with the FEP.
     1900     4091            DESCRIPTION:
     1901     4092                Determine if we're creating the command window or an editing window.
     1902     4093                If it's the command window, we assume there are currently no other
     1903     4094                    windows in 6Edit's "screen".
     1904     4095                If it's an editing window:
     1905     4096                    Make sure there's enough room on the screen for this window.
     1906     4097                    Allocate a VD$STREAM for the window.
     1907     4098                    If the window has an EditBlock, VDA$FOPEN the stream to it.
     1908     4099                Call VDA$PWRITE to write the Spec and Data components.
     1909     4100                Call VDP$WNEW to open the window's DCB and, if appropriate, create the
     1910     4101                    window in the FEP.
     1911     4102                If the FEP created a new window, it will have:
     1912     4103                    o Used the "from-window" (what we call OLD$WINDOW) to obtain
     1913     4104                        "real estate" (space on the terminal screen) for the new
     1914     4105                        window -- the FEP has shrunk the from-window to make room
     1915     4106                        for the new window.
     1916     4107                    o Copied the terminal parameters and IMPs from UC01 to the new
     1917     4108                        window.  But see star #25506; eventually, the FEP may either:
     1918     4109                        o Copy these things from the from-window, in which case our
     1919     4110                            only recourse is to create a new stream for the new window
     1920     4111                            using M$LDEV, which allows us to specify which stream
     1921     4112                            (window) to copy these things from.
     1922     4113                        o Or the FEP may require that we explicitly request that it
     1923     4114                            copy these things from UC01 via a flag in the FPT_OPEN or
     1924     4115                            VLP_WINDOW.
     1925     4116                Search the Equals and Keyins files for values for this window for the
     1926     4117                    terminal control parameters.  We've saved the user's settings for
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:243  
     1927     4118                    UC01 in VD_ORIGINAL_TRMCTL, _EDTCTL, and _TAB, so:
     1928     4119                    For the Equals values, use the global VD$NUMBERs/VD$BUFFERs.  Set
     1929     4120                        the value appropriate for the new window in WINDOW$SPEC.  If the
     1930     4121                        value is different from the user's value for UC01, then also
     1931     4122                        set the "flush" flag for the parameter group.
     1932     4123                    For the Keyins, loop thru the Keyins file.  (For keyins, there can
     1933     4124                        be "no value" for a name, if the value for the name has a
     1934     4125                        length of 0.)  For each keyin, add the new window's keyin
     1935     4126                        definition to the new window's KEY_DEFINITION_BUFFER.
     1936     4127        */
     1937     4128
     1938     4129    1   NEW_WINDOW: PROC ALTRET;

   4129  1 000157   200012 741300       NEW_WINDOW   STX1  ! GIVEN_COMMAND_WINDOW+1,,AUTO

     1939     4130
     1940     4131
     1941     4132
     1942     4133    2   DCL STREAM$ PTR;
     1943     4134    2   DCL EDIT_BLOCK$ PTR;
     1944     4135    2   DCL VD_EVAL$ PTR;
     1945     4136    2   DCL NEXT_EVAL$ PTR;
     1946     4137    2   DCL OLD_WINDOW_NODE$ PTR;
     1947     4138    2   DCL OLD_WINDOW$ PTR;
     1948     4139    2   DCL NEW_WINDOW_KEY$ PTR;
     1949     4140    2   DCL NEW_VALUE$ PTR;
     1950     4141        %VD$LOCATION (NAME=BOF_LOC, STCLASS=AUTO);
     1951     4169    2   DCL KEYINS_PORT$ PTR;
     1952     4170    2   DCL KEYIN_NAME$ PTR;
     1953     4171
     1954     4172
     1955     4173        %VD$STREAM (NAME=STREAM, STCLASS="BASED(STREAM$)");
     1956     4279        %VD$BLOCK_DESC (NAME=EDIT$BLOCK, STCLASS="BASED(EDIT_BLOCK$)");
     1957     4426        %VD$EVAL (NAME=VD$EVAL, STCLASS="BASED(VD_EVAL$)");
     1958     4671        %VD$FILE_NODE (NAME=OLD$WINDOW_NODE, STCLASS="BASED(OLD_WINDOW_NODE$)");
     1959     4764        %VD$WINDOW_SPEC (NAME=OLD$WINDOW, STCLASS="BASED(OLD_WINDOW$)");
     1960     4830        %VD$TEXTC_NUMBER (NAME=NEW$WINDOW_KEY, STCLASS="BASED(NEW_WINDOW_KEY$)");
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:244  
     1961     4844        %VD$BUFFER (NAME=NEW$VALUE_BUFFER, STCLASS="BASED(NEW_VALUE$)");
     1962     4902        %VD$NUMBER (NAME=NEW$VALUE_NUMBER, STCLASS="BASED(NEW_VALUE$)");
     1963     4947        %VD$POINTER (NAME=NEW$VALUE_PTR, STCLASS="BASED(NEW_VALUE$)");
     1964     4992        %VD$PORT (NAME=KEYINS$PORT, STCLASS="BASED(KEYINS_PORT$)");
     1965     5090        %VD$TEXTC (NAME=KEYIN$NAME, STCLASS="BASED(KEYIN_NAME$)");
     1966     5113    2   DCL X SBIN;
     1967     5114    2   DCL 1 VD_EQUALS_INIT(0:0) SYMREF READONLY,
     1968     5115    2         2 KEY$ PTR,
     1969     5116    2         2 SPEC$ PTR,
     1970     5117    2         2 DATA$ PTR,
     1971     5118    2         2 ACCESS$ PTR;
     1972     5119        %VD$NAME_SPEC;
     1973     5167        %VD$BUFFER (NAME=VD$DATA);
     1974     5225
     1975     5226
     1976     5227
     1977     5228    2           IF NOT WINDOW$SPEC.COMMAND THEN

   5228  1 000160   200010 470500                    LDP0    WINDOW_SPEC$,,AUTO
         1 000161   000002 236100                    LDQ     2,,PR0
         1 000162   000400 316003                    CANQ    256,DU
         1 000163   000312 601000 1                  TNZ     s:5274

     1978     5229    3   NEW_EDITING_WINDOW: DO;

   5229  1 000164                       NEW_EDITING* null
     1979     5230                   /* Make sure there's room for this editing window */
     1980     5231    3              OLD_WINDOW_NODE$ = PORT.LEVEL.INTERNAL$ (%LVL_FILE) ->

   5231  1 000164   200003 471500                    LDP1    @PORT,,AUTO
         1 000165   100031 473500                    LDP3    25,,PR1
         1 000166   300013 236100                    LDQ     11,,PR3
         1 000167   200017 756100                    STQ     OLD_WINDOW_NODE$,,AUTO

     1981     5232    3                OLD$WINDOW_NODE.TAIL$;
     1982     5233    3              OLD_WINDOW$ = OLD$WINDOW_NODE.DESC.SPEC.V$;

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:245  
   5233  1 000170   200017 474500                    LDP4    OLD_WINDOW_NODE$,,AUTO
         1 000171   400007 236100                    LDQ     7,,PR4
         1 000172   200020 756100                    STQ     OLD_WINDOW$,,AUTO

     1983     5234    3              IF OLD$WINDOW.COORDS.HEIGHT# < 2*(VD_$WI_BORDER.LENGTH#+1)

   5234  1 000173   200020 475500                    LDP5    OLD_WINDOW$,,AUTO
         1 000174   000002 236000 xsym               LDQ     VD_$WI_BORDER+2
         1 000175   777777 376003                    ANQ     -1,DU
         1 000176   000021 732000                    QRS     17
         1 000177   000002 036007                    ADLQ    2,DL
         1 000200   500005 116100                    CMPQ    5,,PR5
         1 000201   000204 604400 1                  TMOZ    s:5238
         1 000202   000003 235000 xsym               LDA     VD_$SCREEN+3
         1 000203   000556 605400 1                  TPNZ    NO_ROOM_FOR_WINDOW_FAILURE

     1984     5235    3                AND VD_$SCREEN.V# > 0 THEN
     1985     5236    3                 GOTO NO_ROOM_FOR_WINDOW_FAILURE;
     1986     5237                   /* Adjust height if necessary to make it fit */
     1987     5238    3              IF WINDOW$SPEC.COORDS.HEIGHT# > OLD$WINDOW.COORDS.HEIGHT#-2 THEN

   5238  1 000204   500005 236100                    LDQ     5,,PR5
         1 000205   000002 136007                    SBLQ    2,DL
         1 000206   000005 116100                    CMPQ    5,,PR0
         1 000207   000211 605000 1                  TPL     s:5241

     1988     5239    3                 WINDOW$SPEC.COORDS.HEIGHT# = OLD$WINDOW.COORDS.HEIGHT#-2;

   5239  1 000210   000005 756100                    STQ     5,,PR0

     1989     5240
     1990     5241    3              CALL VDG$OALLOC (%CLS_STREAM, STREAM$)

   5241  1 000211   200013 633500                    EPPR3   STREAM$,,AUTO
         1 000212   200071 453500                    STP3    K+22,,AUTO
         1 000213   000001 236000 2                  LDQ     1
         1 000214   200070 756100                    STQ     K+21,,AUTO
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:246  
         1 000215   200070 630500                    EPPR0   K+21,,AUTO
         1 000216   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000217   000000 701000 xent               TSX1    VDG$OALLOC
         1 000220   000564 702000 1                  TSX2    OALLOC_FAILED

     1991     5242    3                ALTRET (OALLOC_FAILED);
     1992     5243    3              WINDOW$SPEC.OPERAND.STREAM$ = STREAM$;

   5243  1 000221   200013 236100                    LDQ     STREAM$,,AUTO
         1 000222   200010 470500                    LDP0    WINDOW_SPEC$,,AUTO
         1 000223   000010 756100                    STQ     8,,PR0

     1993     5244
     1994     5245    3              EDIT_BLOCK$ = WINDOW$SPEC.OPERAND.EDIT_BLOCK$;

   5245  1 000224   000012 236100                    LDQ     10,,PR0
         1 000225   200014 756100                    STQ     EDIT_BLOCK$,,AUTO

     1995     5246    3              IF EDIT_BLOCK$ ~= ADDR(NIL) THEN

   5246  1 000226   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000227   000314 600000 1                  TZE     s:5276

     1996     5247    4   FOPEN_EDIT_BLOCK: DO;

   5247  1 000230                       FOPEN_EDIT_* null
     1997     5248    4                 IF WINDOW$SPEC.OPERAND.EVAL$ = ADDR(NIL) THEN

   5248  1 000230   000013 236100                    LDQ     11,,PR0
         1 000231   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000232   000236 601000 1                  TNZ     s:5250

     1998     5249    4                    CALL VDG$ESCREECH;

   5249  1 000233   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000234   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000235   000000 011000                    NOP     0
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:247  

     1999     5250    4                 CALL VDA$FOPEN (STREAM, EDIT$BLOCK.FILE_KEY, 0,

   5250  1 000236   200014 236100                    LDQ     EDIT_BLOCK$,,AUTO
         1 000237   000025 036003                    ADLQ    21,DU
         1 000240   000002 235000 2                  LDA     2
         1 000241   200072 757100                    STAQ    K+23,,AUTO
         1 000242   200014 236100                    LDQ     EDIT_BLOCK$,,AUTO
         1 000243   000001 036003                    ADLQ    1,DU
         1 000244   200013 235100                    LDA     STREAM$,,AUTO
         1 000245   200070 757100                    STAQ    K+21,,AUTO
         1 000246   200070 630500                    EPPR0   K+21,,AUTO
         1 000247   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000250   000000 701000 xent               TSX1    VDA$FOPEN
         1 000251   000261 702000 1                  TSX2    s:5259

     2000     5251    4                   EDIT$BLOCK.OPTIONS)
     2001     5252    5                 WHENRETURN DO;

     2002     5253                         /* Open succeeded */
     2003     5254    5                    IF EDIT$BLOCK.OPTIONS.EXIST# = %EX_NEW THEN

   5254  1 000252   200014 470500                    LDP0    EDIT_BLOCK$,,AUTO
         1 000253   000027 720100                    LXL0    23,,PR0
         1 000254   000001 100003                    CMPX0   1,DU
         1 000255   000260 601000 1                  TNZ     s:5256

     2004     5255    5                       EDIT$BLOCK.OPTIONS.EXIST# = %EX_OLD;

   5255  1 000256   000002 221003                    LDX1    2,DU
         1 000257   000027 441100                    SXL1    23,,PR0

     2005     5256    5                    END;   /* WhenReturn */

   5256  1 000260   000311 710000 1                  TRA     s:5272

     2006     5257    5                 WHENALTRETURN DO;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:248  

     2007     5258                         /* Open failed:  remove the EditBlock */
     2008     5259    5                    CALL VDG$OFREE (EDIT$BLOCK)

   5259  1 000261   200014 630500                    EPPR0   EDIT_BLOCK$,,AUTO
         1 000262   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000263   000000 701000 xent               TSX1    VDG$OFREE
         1 000264   000564 702000 1                  TSX2    OALLOC_FAILED

     2009     5260    5                      ALTRET (OFREE_FAILED);
     2010     5261    5                    WINDOW$SPEC.OPERAND.EDIT_BLOCK$ = ADDR(NIL);

   5261  1 000265   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000266   200010 470500                    LDP0    WINDOW_SPEC$,,AUTO
         1 000267   000012 756100                    STQ     10,,PR0

     2011     5262    5                    VD_EVAL$ = WINDOW$SPEC.OPERAND.EVAL$;

   5262  1 000270   000013 236100                    LDQ     11,,PR0
         1 000271   200015 756100                    STQ     VD_EVAL$,,AUTO

     2012     5263    5                    WINDOW$SPEC.OPERAND.EVAL$ = ADDR(NIL);

   5263  1 000272   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000273   000013 756100                    STQ     11,,PR0

     2013     5264    6                    DO WHILE VD_EVAL$ ~= ADDR(NIL);

   5264  1 000274   000306 710000 1                  TRA     s:5269

     2014     5265    6                       NEXT_EVAL$ = VD$EVAL.BLINK$;

   5265  1 000275   200015 470500                    LDP0    VD_EVAL$,,AUTO
         1 000276   000001 236100                    LDQ     1,,PR0
         1 000277   200016 756100                    STQ     NEXT_EVAL$,,AUTO

     2015     5266    6                       CALL VDG$OFREE (VD$EVAL)
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:249  

   5266  1 000300   200015 630500                    EPPR0   VD_EVAL$,,AUTO
         1 000301   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000302   000000 701000 xent               TSX1    VDG$OFREE
         1 000303   000564 702000 1                  TSX2    OALLOC_FAILED

     2016     5267    6                         ALTRET (OFREE_FAILED);
     2017     5268    6                       VD_EVAL$ = NEXT_EVAL$;

   5268  1 000304   200016 236100                    LDQ     NEXT_EVAL$,,AUTO
         1 000305   200015 756100                    STQ     VD_EVAL$,,AUTO

     2018     5269    6                       END;

   5269  1 000306   200015 236100                    LDQ     VD_EVAL$,,AUTO
         1 000307   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000310   000275 601000 1                  TNZ     s:5265

     2019     5270    5                    END;   /* WhenAltreturn */

     2020     5271    4                 END FOPEN_EDIT_BLOCK;

     2021     5272    3              END NEW_EDITING_WINDOW;

   5272  1 000311   000314 710000 1                  TRA     s:5276

     2022     5273
     2023     5274    2           ELSE OLD_WINDOW$ = ADDR(NIL);

   5274  1 000312   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000313   200020 756100                    STQ     OLD_WINDOW$,,AUTO

     2024     5275
     2025     5276    2           CALL VDA$PWRITE (PORT, %LVL_LOWER, SPEC, DATA)

   5276  1 000314   200004 237100                    LDAQ    @SPEC,,AUTO
         1 000315   200072 757100                    STAQ    K+23,,AUTO
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:250  
         1 000316   000003 236000 2                  LDQ     3
         1 000317   200003 235100                    LDA     @PORT,,AUTO
         1 000320   200070 757100                    STAQ    K+21,,AUTO
         1 000321   200070 630500                    EPPR0   K+21,,AUTO
         1 000322   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000323   000000 701000 xent               TSX1    VDA$PWRITE
         1 000324   000564 702000 1                  TSX2    OALLOC_FAILED

     2026     5277    2             ALTRET (PWRITE_FAILED);
     2027     5278                /* We lost our Spec!! Get it back! */
     2028     5279    2           WINDOW_SPEC$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER) ->

   5279  1 000325   200003 470500                    LDP0    @PORT,,AUTO
         1 000326   000040 471500                    LDP1    32,,PR0
         1 000327   100007 236100                    LDQ     7,,PR1
         1 000330   200010 756100                    STQ     WINDOW_SPEC$,,AUTO

     2029     5280    2             VD$FILE_NODE.DESC.SPEC.V$;
     2030     5281
     2031     5282    3           IF WINDOW$SPEC.COMMAND THEN DO;

   5282  1 000331   200010 473500                    LDP3    WINDOW_SPEC$,,AUTO
         1 000332   300002 236100                    LDQ     2,,PR3
         1 000333   000400 316003                    CANQ    256,DU
         1 000334   000347 600000 1                  TZE     s:5288

     2032     5283    3              IF VD_COMMAND_WINDOW$ ~= ADDR(NIL) THEN

   5283  1 000335   000000 236000 xsym               LDQ     VD_COMMAND_WINDOW$
         1 000336   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000337   000343 600000 1                  TZE     s:5285

     2033     5284    3                 CALL VDG$ESCREECH;

   5284  1 000340   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000341   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000342   000000 011000                    NOP     0
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:251  

     2034     5285    3              VD_COMMAND_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER);

   5285  1 000343   200003 470500                    LDP0    @PORT,,AUTO
         1 000344   000040 236100                    LDQ     32,,PR0
         1 000345   000000 756000 xsym               STQ     VD_COMMAND_WINDOW$

     2035     5286    3              END;

   5286  1 000346   000351 710000 1                  TRA     s:5306

     2036     5287    2           ELSE
     2037     5288    2              VD_CURRENT_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER);

   5288  1 000347   000040 236100                    LDQ     32,,PR0
         1 000350   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

     2038     5289
     2039     5290                /*
     2040     5291                *  VD_CURRENT_WINDOW$ must be set for the new window
     2041     5292                *     before we call VDP$WNEW.
     2042     5293                */
     2043     5294
     2044     5295                /*
     2045     5296                *   Set the terminal control parameters for the new window.
     2046     5297                */
     2047     5298                %GETKEY (KEY=PORT.CURRENT.KEY, INDX="%(LVL_LOWER-1)",
     2048     5299                PTR=NEW_WINDOW_KEY$);

   5306  1 000351   000012 720100                    LXL0    10,,PR0
         1 000352   000002 100003                    CMPX0   2,DU
         1 000353   000360 601000 1                  TNZ     s:5306+7

   5306  1 000354   000013 471500                    LDP1    11,,PR0
         1 000355   100002 633500                    EPPR3   2,,PR1
         1 000356   200021 453500                    STP3    NEW_WINDOW_KEY$,,AUTO
         1 000357   000363 710000 1                  TRA     s:5310
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:252  

   5306  1 000360   200003 236100                    LDQ     @PORT,,AUTO
         1 000361   000013 036003                    ADLQ    11,DU
         1 000362   200021 756100                    STQ     NEW_WINDOW_KEY$,,AUTO

     2049     5309
     2050     5310    2           GOTO GET_PARMS;

   5310  1 000363   000404 710000 1                  TRA     GET_PARMS

     2051     5311    2   RE_WINDOW: ENTRY ALTRET;

   5311  1 000364   200012 741300       RE_WINDOW    STX1  ! GIVEN_COMMAND_WINDOW+1,,AUTO

     2052     5312                %GETKEY (KEY="ADDR(PORT)->VD$FILE_NODE.DESC.KEY",
     2053     5313                PTR=NEW_WINDOW_KEY$);

   5320  1 000365   200003 470500                    LDP0    @PORT,,AUTO
         1 000366   000004 720100                    LXL0    4,,PR0
         1 000367   000002 100003                    CMPX0   2,DU
         1 000370   000375 601000 1                  TNZ     s:5320+8

   5320  1 000371   000005 471500                    LDP1    5,,PR0
         1 000372   100002 633500                    EPPR3   2,,PR1
         1 000373   200021 453500                    STP3    NEW_WINDOW_KEY$,,AUTO
         1 000374   000400 710000 1                  TRA     s:5323

   5320  1 000375   200003 236100                    LDQ     @PORT,,AUTO
         1 000376   000005 036003                    ADLQ    5,DU
         1 000377   200021 756100                    STQ     NEW_WINDOW_KEY$,,AUTO

     2054     5323    2           WINDOW_SPEC$ = ADDR(PORT)-> VD$FILE_NODE.DESC.SPEC.V$;

   5323  1 000400   000007 236100                    LDQ     7,,PR0
         1 000401   200010 756100                    STQ     WINDOW_SPEC$,,AUTO

     2055     5324    2           OLD_WINDOW$ = ADDR(SPEC);
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:253  

   5324  1 000402   200004 236100                    LDQ     @SPEC,,AUTO
         1 000403   200020 756100                    STQ     OLD_WINDOW$,,AUTO

   5324  1 000404                       GET_PARMS    null
     2056     5325    2   GET_PARMS:;
     2057     5326    2           X = 0;

   5326  1 000404   200036 450100                    STZ     X,,AUTO

     2058     5327    3           DO UNTIL VD_EQUALS_INIT.KEY$(X) = ADDR(NIL);

     2059     5328    4              IF VD_EQUALS_INIT.SPEC$(X)->VD$NAME_SPEC.WINDOWABLE THEN DO;

   5328  1 000405   200036 235100                    LDA     X,,AUTO
         1 000406   000002 735000                    ALS     2
         1 000407   000001 470405 xsym               LDP0    VD_EQUALS_INIT+1,AL
         1 000410   000003 236100                    LDQ     3,,PR0
         1 000411   400000 316007                    CANQ    -131072,DL
         1 000412   000441 600000 1                  TZE     s:5336

     2060     5329    4                 CALL FIND_VALUE_FOR_WINDOW (VD_EQUALS_INIT.DATA$(X)->VD$DATA);

   5329  1 000413   000002 471405 xsym               LDP1    VD_EQUALS_INIT+2,AL
         1 000414   200041 451500                    STP1    SPEC_CLEAR+3,,AUTO
         1 000415   000566 701000 1                  TSX1    FIND_VALUE_FOR_WINDOW
         1 000416   000000 011000                    NOP     0

     2061     5330    4                 IF NEW$VALUE_BUFFER.LENGTH# > 0

   5330  1 000417   200022 470500                    LDP0    NEW_VALUE$,,AUTO
         1 000420   000002 220100                    LDX0    2,,PR0
         1 000421   000425 605400 1                  TPNZ    s:5332
         1 000422   000000 221100                    LDX1    0,,PR0
         1 000423   000004 101003                    CMPX1   4,DU
         1 000424   000441 601000 1                  TNZ     s:5336

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:254  
     2062     5331    4                   OR NEW$VALUE_BUFFER.OBJECT.CLASS# = %CLS_BUFFER THEN
     2063     5332    4                    CALL VDP$NEQUALS_1_WINDOW

   5332  1 000425   200036 235100                    LDA     X,,AUTO
         1 000426   000002 735000                    ALS     2
         1 000427   000001 471405 xsym               LDP1    VD_EQUALS_INIT+1,AL
         1 000430   200010 236100                    LDQ     WINDOW_SPEC$,,AUTO
         1 000431   200072 756100                    STQ     K+23,,AUTO
         1 000432   200022 236100                    LDQ     NEW_VALUE$,,AUTO
         1 000433   200071 756100                    STQ     K+22,,AUTO
         1 000434   200070 451500                    STP1    K+21,,AUTO
         1 000435   200070 630500                    EPPR0   K+21,,AUTO
         1 000436   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000437   000000 701000 xent               TSX1    VDP$NEQUALS_1_WINDOW
         1 000440   000000 011000                    NOP     0

     2064     5333    4                      (VD_EQUALS_INIT.SPEC$(X)->VD$NAME_SPEC,
     2065     5334    4                      NEW$VALUE_BUFFER, WINDOW$SPEC);
     2066     5335    4                 END;

     2067     5336    3              X = X + 1;

   5336  1 000441   200036 054100                    AOS     X,,AUTO

     2068     5337    3              END;

   5337  1 000442   200036 235100                    LDA     X,,AUTO
         1 000443   000002 735000                    ALS     2
         1 000444   000000 236005 xsym               LDQ     VD_EQUALS_INIT,AL
         1 000445   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000446   000405 601000 1                  TNZ     s:5328

     2069     5338                /*N*
     2070     5339                *N* We should check NEW$VALUE_BUFFER.LENGTH# to see if it's 0, and
     2071     5340                *N*   if so, ignore it.  This is because, for most windowable names,
     2072     5341                *N*   a 0-length entry is just a place-holder in the value-chain,
     2073     5342                *N*   and doesn't represent an actual value.
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:255  
     2074     5343                *N* However, for $INTRO_1 and $INTRO_2, we need some way to represent
     2075     5344                *N*   both:
     2076     5345                *N*     The place-holder in the value-chain; and
     2077     5346                *N*     An empty string as a value (so user can remove an introducer).
     2078     5347                *N* The correct thing to do is to have some indication in the
     2079     5348                *N*   value-chain entries that they are dummy entries, without using
     2080     5349                *N*   the value's string-length do indicate this.
     2081     5350                *N* For now, the user can't remove an introducer, only change it to
     2082     5351                *N*   something else.
     2083     5352                *N*/
     2084     5353
     2085     5354                /*
     2086     5355                * Tell the Fep about the window
     2087     5356                */
     2088     5357    2           CALL VDP$WNEW (WINDOW$SPEC, OLD$WINDOW)

   5357  1 000447   200020 236100                    LDQ     OLD_WINDOW$,,AUTO
         1 000450   200010 235100                    LDA     WINDOW_SPEC$,,AUTO
         1 000451   200070 757100                    STAQ    K+21,,AUTO
         1 000452   200070 630500                    EPPR0   K+21,,AUTO
         1 000453   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000454   000000 701000 xent               TSX1    VDP$WNEW
         1 000455   000564 702000 1                  TSX2    OALLOC_FAILED

     2089     5358    2             ALTRET (WNEW_FAILED);
     2090     5359
     2091     5360                /*
     2092     5361                * Forget keyins if there's not really any windows (yet).
     2093     5362                */
     2094     5363    2           IF VD_$SCREEN.V# = 0 THEN RETURN;

   5363  1 000456   000003 235000 xsym               LDA     VD_$SCREEN+3
         1 000457   000462 601000 1                  TNZ     s:5369

   5363  1 000460   200012 221300                    LDX1  ! GIVEN_COMMAND_WINDOW+1,,AUTO
         1 000461   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:256  
     2095     5364
     2096     5365                /*
     2097     5366                *   Set the keyins for the new window.
     2098     5367                *  On the first VDA$LREAD call, position to BOF.
     2099     5368                */
     2100     5369    2           BOF_LOC = %CLEAR;

   5369  1 000462   000100 100400                    MLR     fill='000'O
         1 000463   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000464   200023 000044                    ADSC9   BOF_LOC,,AUTO            cn=0,n=36

     2101     5370    2           CALL VDA$LREAD (KEYINS$STREAM, BOF_LOC, 0, %TRUE)

   5370  1 000465   000004 237000 2                  LDAQ    4
         1 000466   200072 757100                    STAQ    K+23,,AUTO
         1 000467   200023 630500                    EPPR0   BOF_LOC,,AUTO
         1 000470   200071 450500                    STP0    K+22,,AUTO
         1 000471   000004 236000 xsym               LDQ     VD_6E+4
         1 000472   200070 756100                    STQ     K+21,,AUTO
         1 000473   200070 630500                    EPPR0   K+21,,AUTO
         1 000474   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000475   000000 701000 xent               TSX1    VDA$LREAD
         1 000476   000564 702000 1                  TSX2    OALLOC_FAILED

     2102     5371    2             ALTRET (LREAD_FAILED);
     2103     5372    2           KEYINS_PORT$ = KEYINS$STREAM.PORT$;

   5372  1 000477   000004 470400 xsym               LDP0    VD_6E+4
         1 000500   000001 236100                    LDQ     1,,PR0
         1 000501   200034 756100                    STQ     KEYINS_PORT$,,AUTO

     2104     5373
     2105     5374    2   EACH_KEYIN:
     2106     5375    3           DO WHILE NOT KEYINS$STREAM.CURRENT.EOF;

   5375  1 000502   000550 710000 1     EACH_KEYIN   TRA     s:5397

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:257  
     2107     5376    3              CALL FIND_VALUE_FOR_WINDOW (KEYINS$PORT.LEVEL.DATA$ (%LVL_LOWER) ->
              5376                       VD$DATA);

   5376  1 000503   200034 470500                    LDP0    KEYINS_PORT$,,AUTO
         1 000504   000036 471500                    LDP1    30,,PR0
         1 000505   200041 451500                    STP1    SPEC_CLEAR+3,,AUTO
         1 000506   000566 701000 1                  TSX1    FIND_VALUE_FOR_WINDOW
         1 000507   000000 011000                    NOP     0

     2108     5377    4              IF NEW$VALUE_BUFFER.LENGTH# > 0 THEN DO;

   5377  1 000510   200022 470500                    LDP0    NEW_VALUE$,,AUTO
         1 000511   000002 220100                    LDX0    2,,PR0
         1 000512   000537 604400 1                  TMOZ    s:5395

     2109     5378                      %GETKEY (KEY=KEYINS$PORT.CURRENT.KEY, INDX="%(LVL_LOWER-1)",
     2110     5379                      PTR=KEYIN_NAME$);

   5386  1 000513   200034 471500                    LDP1    KEYINS_PORT$,,AUTO
         1 000514   100012 721100                    LXL1    10,,PR1
         1 000515   000002 101003                    CMPX1   2,DU
         1 000516   000523 601000 1                  TNZ     s:5386+8

   5386  1 000517   100013 473500                    LDP3    11,,PR1
         1 000520   300002 634500                    EPPR4   2,,PR3
         1 000521   200035 454500                    STP4    KEYIN_NAME$,,AUTO
         1 000522   000526 710000 1                  TRA     s:5389

   5386  1 000523   200034 236100                    LDQ     KEYINS_PORT$,,AUTO
         1 000524   000013 036003                    ADLQ    11,DU
         1 000525   200035 756100                    STQ     KEYIN_NAME$,,AUTO

     2111     5389    4                 CALL VDP$NKEYIN_1_WINDOW (KEYIN$NAME, NEW$VALUE_BUFFER,

   5389  1 000526   200010 236100                    LDQ     WINDOW_SPEC$,,AUTO
         1 000527   200072 756100                    STQ     K+23,,AUTO
         1 000530   200022 236100                    LDQ     NEW_VALUE$,,AUTO
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:258  
         1 000531   200035 235100                    LDA     KEYIN_NAME$,,AUTO
         1 000532   200070 757100                    STAQ    K+21,,AUTO
         1 000533   200070 630500                    EPPR0   K+21,,AUTO
         1 000534   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000535   000000 701000 xent               TSX1    VDP$NKEYIN_1_WINDOW
         1 000536   000564 702000 1                  TSX2    OALLOC_FAILED

     2112     5390    4                   WINDOW$SPEC)
     2113     5391    4                   ALTRET (NKEYIN_FAILED);
     2114     5392    4                 END;

     2115     5393
     2116     5394                   /* Read next KEYIN */
     2117     5395    3              CALL VDA$LREAD (KEYINS$STREAM, , 1, %TRUE)

   5395  1 000537   000006 237000 2                  LDAQ    6
         1 000540   200072 757100                    STAQ    K+23,,AUTO
         1 000541   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000542   000004 235000 xsym               LDA     VD_6E+4
         1 000543   200070 757100                    STAQ    K+21,,AUTO
         1 000544   200070 630500                    EPPR0   K+21,,AUTO
         1 000545   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000546   000000 701000 xent               TSX1    VDA$LREAD
         1 000547   000564 702000 1                  TSX2    OALLOC_FAILED

     2118     5396    3                ALTRET (LREAD_FAILED);
     2119     5397    3              END EACH_KEYIN;

   5397  1 000550   000004 470400 xsym               LDP0    VD_6E+4
         1 000551   000016 236100                    LDQ     14,,PR0
         1 000552   400000 316007                    CANQ    -131072,DL
         1 000553   000503 600000 1                  TZE     s:5376

     2120     5398
     2121     5399    2           RETURN;

   5399  1 000554   200012 221300                    LDX1  ! GIVEN_COMMAND_WINDOW+1,,AUTO
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:259  
         1 000555   000001 702211                    TSX2  ! 1,X1

     2122     5400
     2123     5401
     2124     5402
     2125     5403    2   NO_ROOM_FOR_WINDOW_FAILURE:
     2126     5404    2           CALL VDG$ERRMSG (%E$NO_ROOM_FOR_WINDOW);

   5404  1 000556   000011 630400 2     NO_ROOM_FOR* EPPR0   9
         1 000557   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000560   000000 701000 xent               TSX1    VDG$ERRMSG
         1 000561   000000 011000                    NOP     0

     2127     5405    2           ALTRETURN;

   5405  1 000562   200012 221300                    LDX1  ! GIVEN_COMMAND_WINDOW+1,,AUTO
         1 000563   000000 702211                    TSX2  ! 0,X1

   5391  1 000564                       OALLOC_FAIL* null
   5391  1 000564                       OFREE_FAILED null
   5391  1 000564                       OCOPY_FAILED null
   5391  1 000564                       PFLUSH_FAIL* null
   5391  1 000564                       PWRITE_FAIL* null
     2128     5406
     2129     5407
     2130     5408    2   OALLOC_FAILED: ;
     2131     5409    2   OFREE_FAILED: ;
     2132     5410    2   OCOPY_FAILED: ;
     2133     5411    2   PFLUSH_FAILED: ;
     2134     5412    2   PWRITE_FAILED: ;
     2135     5413    2   WNEW_FAILED: ;

   5413  1 000564                       WNEW_FAILED  null
   5413  1 000564                       LREAD_FAILED null
   5413  1 000564                       NKEYIN_FAIL* null
     2136     5414    2   LREAD_FAILED: ;
     2137     5415    2   NKEYIN_FAILED: ;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:260  
     2138     5416    2           ALTRETURN;

   5416  1 000564   200012 221300                    LDX1  ! GIVEN_COMMAND_WINDOW+1,,AUTO
         1 000565   000000 702211                    TSX2  ! 0,X1

     2139     5417
     2140     5418        %BOX (TITLE=FIND_VALUE_FOR_WINDOW);

              5430    2   /***************************************************************************
              5432    2    *                                                                         *
              5436    2            *                           FIND_VALUE_FOR_WINDOW                        *
              5438    2            *                                                                        *
              5440    2          ***************************************************************************/

     2141     5444
     2142     5445        /*I** NAME: FIND_VALUE_FOR_WINDOW
     2143     5446            PARAMETER:
     2144     5447                VALUE_CHAIN - VD$NUMBER or VD$BUFFER (or any other "buffer_object") for
     2145     5448                    the value for a terminal parameter or KEYIN name.
     2146     5449                    This is the root of a chain of values, where each value in the chain
     2147     5450                    is for a specific window or group of windows, based on their
     2148     5451                    type and key:
     2149     5452                        First entry in chain:  For all windows.
     2150     5453                        Second entry in chain:  For all editing windows (overrides the
     2151     5454                            first entry).
     2152     5455                        Successive entry in chain:  For specific windows, where
     2153     5456                            entry "e" in the chain is for the window whose key
     2154     5457                            is "e"-%WI_KEY_OFFSET.  A value in this set overrides
     2155     5458                            values in the first or second entries in the chain.
     2156     5459                    Note on 0-length buffer_objects:  these may appear in the chain
     2157     5460                    simply as place-holders.  If so, they do NOT represent a value
     2158     5461                    for this parameter/KEYIN.  Thus, there may be no value for this
     2159     5462                    parameter/KEYIN at all, in which case this routine will return
     2160     5463                    a 0-length buffer_object.
     2161     5464            INPUT:
     2162     5465                NEW$WINDOW_KEY - key for the window.
     2163     5466                WINDOW$SPEC.COMMAND - %TRUE if the window is a command window;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:261  
     2164     5467                    %FALSE otherwise.
     2165     5468                NEW_VALUE$ - An uninitialized result pointer.
     2166     5469            OUTPUT:
     2167     5470                VALUE$ will point to the appropriate VD$NUMBER/BUFFER for the window.
     2168     5471                    If this NUMBER/BUFFER has a .LENGTH# of 0, then there is no value
     2169     5472                    (window-specific or otherwise) for this window in this value-chain.
     2170     5473            DESCRIPTION:
     2171     5474                Search the VALUE_CHAIN for the value appropriate for the window,
     2172     5475                based on KEY and COMMAND.
     2173     5476        */
     2174     5477
     2175     5478    2   FIND_VALUE_FOR_WINDOW: PROC (VALUE_CHAIN);

   5478  1 000566   200040 741300       FIND_VALUE_* STX1  ! SPEC_CLEAR+2,,AUTO

     2176     5479
     2177     5480        %VD$BUFFER (NAME=VALUE_CHAIN, STCLASS=PARAM);
     2178     5538
     2179     5539
     2180     5540    3   DCL CURR_ENTRY$ PTR;
     2181     5541    3   DCL K SBIN;
     2182     5542
     2183     5543
     2184     5544        %VD$BUFFER (NAME=CURR$ENTRY, STCLASS="BASED(CURR_ENTRY$)");
     2185     5602
     2186     5603
     2187     5604    3           NEW_VALUE$ = ADDR(VALUE_CHAIN);

   5604  1 000567   200041 236100                    LDQ     @VALUE_CHAIN,,AUTO
         1 000570   200022 756100                    STQ     NEW_VALUE$,,AUTO

     2188     5605
     2189     5606    3           CURR_ENTRY$ = VALUE_CHAIN.FLINK$;

   5606  1 000571   200041 470500                    LDP0    @VALUE_CHAIN,,AUTO
         1 000572   000001 236100                    LDQ     1,,PR0
         1 000573   200042 756100                    STQ     CURR_ENTRY$,,AUTO
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:262  

     2190     5607    3           IF CURR_ENTRY$ = ADDR(NIL) THEN

   5607  1 000574   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000575   000577 601000 1                  TNZ     s:5609

     2191     5608    3              RETURN;  /* No values for the editing windows */

   5608  1 000576   000001 702211                    TSX2  ! 1,X1

     2192     5609    3           IF CURR$ENTRY.LENGTH# > 0 AND NOT WINDOW$SPEC.COMMAND THEN

   5609  1 000577   200042 471500                    LDP1    CURR_ENTRY$,,AUTO
         1 000600   100002 220100                    LDX0    2,,PR1
         1 000601   000610 604400 1                  TMOZ    s:5612
         1 000602   200010 473500                    LDP3    WINDOW_SPEC$,,AUTO
         1 000603   300002 236100                    LDQ     2,,PR3
         1 000604   000400 316003                    CANQ    256,DU
         1 000605   000610 601000 1                  TNZ     s:5612

     2193     5610    3              NEW_VALUE$ = CURR_ENTRY$;    /* Newest guess */

   5610  1 000606   200042 236100                    LDQ     CURR_ENTRY$,,AUTO
         1 000607   200022 756100                    STQ     NEW_VALUE$,,AUTO

     2194     5611
     2195     5612    4           DO K = NEW$WINDOW_KEY.BYTES# DOWNTO 0;

   5612  1 000610   200021 473500                    LDP3    NEW_WINDOW_KEY$,,AUTO
         1 000611   300000 236100                    LDQ     0,,PR3
         1 000612   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 000613   200043 756100                    STQ     K,,AUTO
         1 000614   000626 710000 1                  TRA     s:5616+2

     2196     5613    4              CURR_ENTRY$ = CURR$ENTRY.FLINK$;

   5613  1 000615   200042 470500                    LDP0    CURR_ENTRY$,,AUTO
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:263  
         1 000616   000001 236100                    LDQ     1,,PR0
         1 000617   200042 756100                    STQ     CURR_ENTRY$,,AUTO

     2197     5614    4              IF CURR_ENTRY$ = ADDR(NIL) THEN

   5614  1 000620   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000621   000624 601000 1                  TNZ     s:5616

     2198     5615    4                 RETURN;       /* No value for this specific window */

   5615  1 000622   200040 221300                    LDX1  ! SPEC_CLEAR+2,,AUTO
         1 000623   000001 702211                    TSX2  ! 1,X1

     2199     5616    4              END;

   5616  1 000624   000001 336007                    LCQ     1,DL
         1 000625   200043 056100                    ASQ     K,,AUTO
         1 000626   200043 235100                    LDA     K,,AUTO
         1 000627   000615 605000 1                  TPL     s:5613

     2200     5617    3           IF CURR$ENTRY.LENGTH# > 0 THEN

   5617  1 000630   200042 470500                    LDP0    CURR_ENTRY$,,AUTO
         1 000631   000002 220100                    LDX0    2,,PR0
         1 000632   000635 604400 1                  TMOZ    s:5620

     2201     5618    3              NEW_VALUE$ = CURR_ENTRY$;    /* This is it */

   5618  1 000633   200042 236100                    LDQ     CURR_ENTRY$,,AUTO
         1 000634   200022 756100                    STQ     NEW_VALUE$,,AUTO

     2202     5619
     2203     5620    3           RETURN;

   5620  1 000635   200040 221300                    LDX1  ! SPEC_CLEAR+2,,AUTO
         1 000636   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:264  
     2204     5621
     2205     5622    3   END FIND_VALUE_FOR_WINDOW;
     2206     5623
     2207     5624    2   END NEW_WINDOW;
     2208     5625
     2209     5626        %BOX (TITLE=DELETE_WINDOW, PAGE=YES);
              5634    2
              5638    2   /***************************************************************************
              5640    2    *                                                                         *
              5644    2            *                               DELETE_WINDOW                            *
              5646    2            *                                                                        *
              5648    2          ***************************************************************************/

     2210     5652
     2211     5653        /*I* NAME: DELETE_WINDOW
     2212     5654            PARAMETERS:
     2213     5655                None.
     2214     5656            INPUT:
     2215     5657                PORT, SPEC, and DATA as for main routine.
     2216     5658            OUTPUT:
     2217     5659                The file node to which PORT is currently positioned will be deleted
     2218     5660                    from the file.
     2219     5661            DESCRIPTION:
     2220     5662                Determine if we're deleting the command window or an editing window.
     2221     5663                Call VDP$WREMOVE to close the window's DCB.
     2222     5664                If we're deleting the current window, find a new editing window to be
     2223     5665                    the current window.  If we're deleting the only editing window,
     2224     5666                    then turn VD_2DIM off, and "change" the command window to
     2225     5667                    serial (1-dimensional) mode.
     2226     5668                Call VDA$PDELETE to delete the node from the Windows file.
     2227     5669        */
     2228     5670
     2229     5671    1   DELETE_WINDOW: PROC ALTRET;

   5671  1 000637   200012 741300       DELETE_WIND* STX1  ! GIVEN_COMMAND_WINDOW+1,,AUTO

     2230     5672
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:265  
     2231     5673
     2232     5674        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);
     2233     5743    2   DCL COUNT SBIN;
     2234     5744        %VD$WINDOW_SPEC (NAME=SPEC_CLEAR, STCLASS=AUTO);
     2235     5810
     2236     5811        %VD$STREAM;
     2237     5917
     2238     5918
     2239     5919
     2240     5920    2           SPEC_CLEAR = %CLEAR;

   5920  1 000640   000100 100400                    MLR     fill='000'O
         1 000641   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000642   200036 000144                    ADSC9   SPEC_CLEAR,,AUTO         cn=0,n=100

     2241     5921    2           WINDOW_SPEC$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER) ->

   5921  1 000643   200003 470500                    LDP0    @PORT,,AUTO
         1 000644   000040 471500                    LDP1    32,,PR0
         1 000645   100007 236100                    LDQ     7,,PR1
         1 000646   200010 756100                    STQ     WINDOW_SPEC$,,AUTO

     2242     5922    2             VD$FILE_NODE.DESC.SPEC.V$;
     2243     5923        /* Release space to editing windows until there are no more */
     2244     5924    2           IF PORT.LEVEL.INTERNAL$ (%LVL_LOWER) ->

   5924  1 000647   100001 236100                    LDQ     1,,PR1
         1 000650   000000 116000 xsym               CMPQ    VD_COMMAND_WINDOW$
         1 000651   000660 601000 1                  TNZ     s:5929
         1 000652   100002 236100                    LDQ     2,,PR1
         1 000653   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000654   000660 600000 1                  TZE     s:5929

     2245     5925    2             VD$FILE_NODE.BLINK$ = VD_COMMAND_WINDOW$ AND
     2246     5926    2             PORT.LEVEL.INTERNAL$ (%LVL_LOWER) ->
     2247     5927    2             VD$FILE_NODE.FLINK$ ~= ADDR(NIL) THEN
     2248     5928    2              WINDOW$SPEC.COORDS.LINE# = -1;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:266  

   5928  1 000655   000001 335007                    LCA     1,DL
         1 000656   200010 473500                    LDP3    WINDOW_SPEC$,,AUTO
         1 000657   300003 755100                    STA     3,,PR3

     2249     5929    2           CALL VDP$WCHANGE (PORT.LEVEL.INTERNAL$ (%LVL_LOWER) -> VD$FILE_NODE,

   5929  1 000660   000040 471500                    LDP1    32,,PR0
         1 000661   200036 633500                    EPPR3   SPEC_CLEAR,,AUTO
         1 000662   200071 453500                    STP3    K+22,,AUTO
         1 000663   200070 451500                    STP1    K+21,,AUTO
         1 000664   200070 630500                    EPPR0   K+21,,AUTO
         1 000665   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000666   000000 701000 xent               TSX1    VDP$WCHANGE
         1 000667   000774 702000 1                  TSX2    WREMOVE_FAILED

     2250     5930    2             SPEC_CLEAR) ALTRET (WCHANGE_FAILED);
     2251     5931    2           IF WINDOW$SPEC.OPERAND.STREAM$ ~= ADDR(NIL) THEN

   5931  1 000670   200010 470500                    LDP0    WINDOW_SPEC$,,AUTO
         1 000671   000010 236100                    LDQ     8,,PR0
         1 000672   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000673   000702 600000 1                  TZE     s:5935

     2252     5932    2              CALL VDA$FCLOSE (WINDOW$SPEC.OPERAND.STREAM$ -> VD$STREAM)

   5932  1 000674   000010 471500                    LDP1    8,,PR0
         1 000675   200070 451500                    STP1    K+21,,AUTO
         1 000676   200070 630500                    EPPR0   K+21,,AUTO
         1 000677   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000700   000000 701000 xent               TSX1    VDA$FCLOSE
         1 000701   000774 702000 1                  TSX2    WREMOVE_FAILED

     2253     5933    2                ALTRET (FCLOSE_FAILED);
     2254     5934
     2255     5935    2           CALL VDP$WREMOVE (WINDOW$SPEC)

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:267  
   5935  1 000702   200010 630500                    EPPR0   WINDOW_SPEC$,,AUTO
         1 000703   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000704   000000 701000 xent               TSX1    VDP$WREMOVE
         1 000705   000774 702000 1                  TSX2    WREMOVE_FAILED

     2256     5936    2             ALTRET (WREMOVE_FAILED);
     2257     5937
     2258     5938    2           IF VD_CURRENT_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER) THEN

   5938  1 000706   200003 470500                    LDP0    @PORT,,AUTO
         1 000707   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         1 000710   000040 116100                    CMPQ    32,,PR0
         1 000711   000727 601000 1                  TNZ     s:5951

     2259     5939    3   FIND_NEW_CURRENT_WINDOW: DO;

   5939  1 000712                       FIND_NEW_CU* null
     2260     5940                   /* Deleting current editing window:  find new one */
     2261     5941    3              VD_CURRENT_WINDOW$ = VD_CURRENT_WINDOW$ -> VD$FILE_NODE.FLINK$;

   5941  1 000712   000000 471400 xsym               LDP1    VD_CURRENT_WINDOW$
         1 000713   100002 236100                    LDQ     2,,PR1
         1 000714   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

     2262     5942    3              IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN

   5942  1 000715   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000716   000723 601000 1                  TNZ     s:5945

     2263     5943    3                 VD_CURRENT_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_FILE) ->

   5943  1 000717   000031 471500                    LDP1    25,,PR0
         1 000720   100012 473500                    LDP3    10,,PR1
         1 000721   300002 236100                    LDQ     2,,PR3
         1 000722   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

     2264     5944    3                   VD$FILE_NODE.HEAD$ -> VD$FILE_NODE.FLINK$;
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:268  
     2265     5945    4              IF VD_CURRENT_WINDOW$ = PORT.LEVEL.INTERNAL$ (%LVL_LOWER) THEN DO;

   5945  1 000723   000040 116100                    CMPQ    32,,PR0
         1 000724   000727 601000 1                  TNZ     s:5951

     2266     5946                      /* Deleting the only editing window */
     2267     5947    4                 VD_CURRENT_WINDOW$ = ADDR(NIL);

   5947  1 000725   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000726   000000 756000 xsym               STQ     VD_CURRENT_WINDOW$

     2268     5948    4                 END;

     2269     5949    3              END;

     2270     5950
     2271     5951    3           IF PORT.LEVEL.INTERNAL$ (%LVL_LOWER) = VD_COMMAND_WINDOW$ THEN DO;

   5951  1 000727   000040 236100                    LDQ     32,,PR0
         1 000730   000000 116000 xsym               CMPQ    VD_COMMAND_WINDOW$
         1 000731   000734 601000 1                  TNZ     s:5956

     2272     5952                   /* Deleting the command window */
     2273     5953    3              VD_COMMAND_WINDOW$ = ADDR(NIL);

   5953  1 000732   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000733   000000 756000 xsym               STQ     VD_COMMAND_WINDOW$

     2274     5954    3              END;

     2275     5955
     2276     5956    2           CALL VDG$OCOPY_LOCATION (PORT.CURRENT, DEL_RANGE.START)

   5956  1 000734   200013 631500                    EPPR1   DEL_RANGE,,AUTO
         1 000735   200071 451500                    STP1    K+22,,AUTO
         1 000736   200003 236100                    LDQ     @PORT,,AUTO
         1 000737   000012 036003                    ADLQ    10,DU
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:269  
         1 000740   200070 756100                    STQ     K+21,,AUTO
         1 000741   200070 630500                    EPPR0   K+21,,AUTO
         1 000742   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000743   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 000744   000774 702000 1                  TSX2    WREMOVE_FAILED

     2277     5957    2             ALTRET (OCOPY_LOCATION_FAILED);
     2278     5958    2           DEL_RANGE.ENDD = DEL_RANGE.START;

   5958  1 000745   000100 100500                    MLR     fill='000'O
         1 000746   200013 000044                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=36
         1 000747   200024 000044                    ADSC9   BOF_LOC+1,,AUTO          cn=0,n=36

     2279     5959
     2280     5960    2           CALL VDA$PDELETE (PORT, DEL_RANGE, %LVL_LOWER, COUNT)

   5960  1 000750   200035 630500                    EPPR0   COUNT,,AUTO
         1 000751   200073 450500                    STP0    K+24,,AUTO
         1 000752   000003 236000 2                  LDQ     3
         1 000753   200072 756100                    STQ     K+23,,AUTO
         1 000754   200013 631500                    EPPR1   DEL_RANGE,,AUTO
         1 000755   200071 451500                    STP1    K+22,,AUTO
         1 000756   200003 236100                    LDQ     @PORT,,AUTO
         1 000757   200070 756100                    STQ     K+21,,AUTO
         1 000760   200070 630500                    EPPR0   K+21,,AUTO
         1 000761   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000762   000000 701000 xent               TSX1    VDA$PDELETE
         1 000763   000774 702000 1                  TSX2    WREMOVE_FAILED

     2281     5961    2             ALTRET (PDELETE_FAILED);
     2282     5962
     2283     5963    2           CALL VDG$OCLEAR_LOCATION (DEL_RANGE.START)

   5963  1 000764   200013 630500                    EPPR0   DEL_RANGE,,AUTO
         1 000765   200070 450500                    STP0    K+21,,AUTO
         1 000766   200070 630500                    EPPR0   K+21,,AUTO
         1 000767   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:270  
         1 000770   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 000771   000774 702000 1                  TSX2    WREMOVE_FAILED

     2284     5964    2             ALTRET (OCLEAR_LOCATION_FAILED);
     2285     5965
     2286     5966    2           RETURN;

   5966  1 000772   200012 221300                    LDX1  ! GIVEN_COMMAND_WINDOW+1,,AUTO
         1 000773   000001 702211                    TSX2  ! 1,X1

   5958  1 000774                       WREMOVE_FAI* null
   5958  1 000774                       FCLOSE_FAIL* null
   5958  1 000774                       WCHANGE_FAI* null
   5958  1 000774                       OCOPY_LOCAT* null
   5958  1 000774                       PDELETE_FAI* null
     2287     5967
     2288     5968
     2289     5969
     2290     5970    2   WREMOVE_FAILED: ;
     2291     5971    2   FCLOSE_FAILED: ;
     2292     5972    2   WCHANGE_FAILED: ;
     2293     5973    2   OCOPY_LOCATION_FAILED: ;
     2294     5974    2   PDELETE_FAILED: ;
     2295     5975    2   OCLEAR_LOCATION_FAILED: ;

   5975  1 000774                       OCLEAR_LOCA* null
     2296     5976    2           ALTRETURN;

   5976  1 000774   200012 221300                    LDX1  ! GIVEN_COMMAND_WINDOW+1,,AUTO
         1 000775   000000 702211                    TSX2  ! 0,X1
     2297     5977
     2298     5978    2   END DELETE_WINDOW;
     2299     5979
     2300     5980    1   END VDA$WWINDOWS;

PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:271  
--  Include file information  --

   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$WWINDOWS.
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:272  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @DATA                      6-0-0/w PTR         r     1 @NODE_EXISTS
     3-0-0/w PTR         r     1 @PORT                      4-0-0/w PTR         r     1 @SPEC
    41-0-0/w PTR         r     1 @VALUE_CHAIN               7-0-0/w BIT         r     1 ALTRETURN_WHEN_DONE
    23-0-0/w STRC(324)   r     1 BOF_LOC                   35-0-0/w SBIN        r     1 COUNT
    42-0-0/w PTR         r     1 CURR_ENTRY$               *0-0-0/w ASTR(90)    r     1 DATA
    13-0-0/w STRC(648)   r     1 DEL_RANGE                 14-0-0/w PTR         r     1 EDIT_BLOCK$
    11-0-0/w BIT         r     1 GIVEN_COMMAND_WINDOW      43-0-0/w SBIN        r     1 K
    34-0-0/w PTR         r     1 KEYINS_PORT$              35-0-0/w PTR         r     1 KEYIN_NAME$
    22-0-0/w PTR         r     1 NEW_VALUE$                21-0-0/w PTR         r     1 NEW_WINDOW_KEY$
    16-0-0/w PTR         r     1 NEXT_EVAL$                *0-0-0/w BIT         r     1 NODE_EXISTS
    20-0-0/w PTR         r     1 OLD_WINDOW$               17-0-0/w PTR         r     1 OLD_WINDOW_NODE$
    *0-0-0/w STRC(1944)  r     1 PORT                      *0-0-0/w STRC(72)    r     1 SPEC
    36-0-0/w STRC(900)   r     1 SPEC_CLEAR                13-0-0/w PTR         r     1 STREAM$
    *0-0-0/w ASTR(90)    r     1 VALUE_CHAIN               15-0-0/w PTR         r     1 VD_EVAL$
    10-0-0/w PTR         r     1 WINDOW_SPEC$              36-0-0/w SBIN        r     1 X

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$SCREEN                 0-0-0/w ASTR(90)    r     1 VD_$WI_BORDER
     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w PTR         r     1 VD_COMMAND_WINDOW$
     0-0-0/w PTR         r     1 VD_CURRENT_WINDOW$         0-0-0/w SBIN        r     1 VD_EDITING_WINDOWS
     0-0-0/w STRC(144)   r     1 VD_EQUALS_INIT(0:0)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:273  

     0-0-0/w ASTR(90)    r     1 CURR$ENTRY                 0-0-0/w STRC(936)   r     1 EDIT$BLOCK
     0-0-0/w ASTR(9)     r     1 KEYIN$NAME                 0-0-0/w STRC(1944)  r     1 KEYINS$PORT
     0-0-0/w STRC(864)   r     1 KEYINS$STREAM              0-0-0/w ASTR(90)    r     1 NEW$VALUE_BUFFER
     0-0-0/w STRC        r     1 NEW$WINDOW_KEY             0-0-0/w STRC(900)   r     1 OLD$WINDOW
     0-0-0/w STRC(468)   r     1 OLD$WINDOW_NODE            0-0-0/w STRC(864)   r     1 STREAM
     0-0-0/w ASTR(90)    r     1 VD$DATA                    0-0-0/w STRC(2124)  r     1 VD$EVAL
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w STRC(252)   r     1 VD$NAME_SPEC
     0-0-0/w STRC(864)   r     1 VD$STREAM                  0-0-0/w ASTR(9)     r     1 VD$TEXTC
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE            0-0-0/w STRC(900)   r     1 WINDOW$SPEC


   Procedure VDA$WWINDOWS requires 510 words for executable code.
   Procedure VDA$WWINDOWS requires 60 words of local(AUTO) storage.

    No errors detected in file VDA$WRITERS.:VDA5TSI    .
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:274  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:275  
          MINI XREF LISTING

ALTRETURN_WHEN_DONE
      3527**DCL      3950<<ASSIGN   4024>>IF
BOF_LOC IN PROCEDURE NEW_WINDOW
      4149**DCL      5369<<ASSIGN   5370<>CALL
COUNT IN PROCEDURE DELETE_WINDOW
      5743**DCL      5960<>CALL
CURR$ENTRY.FLINK$ IN PROCEDURE FIND_VALUE_FOR_WINDOW
      5595**DCL      5613>>ASSIGN
CURR$ENTRY.LENGTH# IN PROCEDURE FIND_VALUE_FOR_WINDOW
      5595**DCL      5597--IMP-SIZ  5609>>IF       5617>>IF
CURR_ENTRY$ IN PROCEDURE FIND_VALUE_FOR_WINDOW
      5540**DCL      5569--IMP-PTR  5606<<ASSIGN   5607>>IF       5609>>IF       5610>>ASSIGN   5613<<ASSIGN
      5613>>ASSIGN   5614>>IF       5617>>IF       5618>>ASSIGN
DATA
      3279**DCL       154--PROC     5276<>CALL
DATA.LENGTH#
      3305**DCL      3307--IMP-SIZ  5276>>CALL
DELETE_WINDOW
      5671**PROC     3967--CALL
DELETE_WINDOW_FAILED
      4024**LABEL    3967--CALLALT
DEL_RANGE IN PROCEDURE DELETE_WINDOW
      5682**DCL      5960<>CALL
DEL_RANGE.ENDD IN PROCEDURE DELETE_WINDOW
      5724**DCL      5958<<ASSIGN
DEL_RANGE.START IN PROCEDURE DELETE_WINDOW
      5696**DCL      5956<>CALL     5958>>ASSIGN   5963<>CALL
EDIT$BLOCK IN PROCEDURE NEW_WINDOW
      4287**DCL      5259<>CALL
EDIT$BLOCK.FILE_KEY IN PROCEDURE NEW_WINDOW
      4323**DCL      5250<>CALL
EDIT$BLOCK.OPTIONS IN PROCEDURE NEW_WINDOW
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:276  
      4406**DCL      5250<>CALL
EDIT$BLOCK.OPTIONS.EXIST# IN PROCEDURE NEW_WINDOW
      4409**DCL      5254>>IF       5255<<ASSIGN
EDIT_BLOCK$ IN PROCEDURE NEW_WINDOW
      4134**DCL      4287--IMP-PTR  5245<<ASSIGN   5246>>IF       5250>>CALL     5250>>CALL     5254>>IF
      5255>>ASSIGN   5259>>CALL
FCLOSE_FAILED IN PROCEDURE DELETE_WINDOW
      5958**LABEL    5932--CALLALT
FIND_VALUE_FOR_WINDOW IN PROCEDURE NEW_WINDOW
      5478**PROC     5329--CALL     5376--CALL
GET_PARMS IN PROCEDURE NEW_WINDOW
      5324**LABEL    5310--GOTO
GIVEN_COMMAND_WINDOW
      3529**DCL      4008<<ASSIGN   4014>>IF
K IN PROCEDURE FIND_VALUE_FOR_WINDOW
      5541**DCL      5612<<DOINDEX
KEYIN$NAME IN PROCEDURE NEW_WINDOW
      5098**DCL      5389<>CALL
KEYIN$NAME.LENGTH# IN PROCEDURE NEW_WINDOW
      5106**DCL      5108--IMP-SIZ  5389>>CALL
KEYINS$PORT.CURRENT.KEY.REP# IN PROCEDURE NEW_WINDOW
      5067**DCL      5386>>IF
KEYINS$PORT.CURRENT.KEY.V$ IN PROCEDURE NEW_WINDOW
      5067**DCL      5386>>ASSIGN   5386--ASSIGN
KEYINS$PORT.LEVEL.DATA$ IN PROCEDURE NEW_WINDOW
      5087**DCL      5376>>CALL     5376>>CALL
KEYINS$STREAM
      3606**DCL      5370<>CALL     5395<>CALL
KEYINS$STREAM.CURRENT.EOF
      3673**DCL      5375>>DOWHILE
KEYINS$STREAM.PORT$
      3632**DCL      5372>>ASSIGN
KEYINS_PORT$ IN PROCEDURE NEW_WINDOW
      4169**DCL      5000--IMP-PTR  5372<<ASSIGN   5376>>CALL     5376>>CALL     5386>>IF       5386>>ASSIGN
      5386>>ASSIGN
KEYIN_NAME$ IN PROCEDURE NEW_WINDOW
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:277  
      4170**DCL      5098--IMP-PTR  5386<<ASSIGN   5386<<ASSIGN   5389>>CALL     5389>>CALL
LREAD_FAILED IN PROCEDURE NEW_WINDOW
      5413**LABEL    5370--CALLALT  5395--CALLALT
NEW$VALUE_BUFFER IN PROCEDURE NEW_WINDOW
      4869**DCL      5332<>CALL     5389<>CALL
NEW$VALUE_BUFFER.LENGTH# IN PROCEDURE NEW_WINDOW
      4895**DCL      4897--IMP-SIZ  5330>>IF       5332>>CALL     5377>>IF       5389>>CALL
NEW$VALUE_BUFFER.OBJECT.CLASS# IN PROCEDURE NEW_WINDOW
      4893**DCL      5330>>IF
NEW$WINDOW_KEY.BYTES# IN PROCEDURE NEW_WINDOW
      4842**DCL      5612>>DOINDEX
NEW_VALUE$ IN PROCEDURE NEW_WINDOW
      4140**DCL      4869--IMP-PTR  4910--IMP-PTR  4963--IMP-PTR  5330>>IF       5330>>IF       5332>>CALL
      5332>>CALL     5377>>IF       5389>>CALL     5389>>CALL     5604<<ASSIGN   5610<<ASSIGN   5618<<ASSIGN
NEW_WINDOW
      4129**PROC     3975--CALL
NEW_WINDOW_FAILED
      4024**LABEL    3975--CALLALT
NEW_WINDOW_KEY$ IN PROCEDURE NEW_WINDOW
      4139**DCL      4838--IMP-PTR  5306<<ASSIGN   5306<<ASSIGN   5320<<ASSIGN   5320<<ASSIGN   5612>>DOINDEX
NEXT_EVAL$ IN PROCEDURE NEW_WINDOW
      4136**DCL      5265<<ASSIGN   5268>>ASSIGN
NKEYIN_FAILED IN PROCEDURE NEW_WINDOW
      5413**LABEL    5389--CALLALT
NODE_EXISTS
      3312**DCL       154--PROC     3966>>IF       3974>>IF
NO_ROOM_FOR_WINDOW_FAILURE IN PROCEDURE NEW_WINDOW
      5404**LABEL    5236--GOTO
OALLOC_FAILED IN PROCEDURE NEW_WINDOW
      5391**LABEL    5241--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE DELETE_WINDOW
      5975**LABEL    5963--CALLALT
OCOPY_LOCATION_FAILED IN PROCEDURE DELETE_WINDOW
      5958**LABEL    5956--CALLALT
OFREE_FAILED IN PROCEDURE NEW_WINDOW
      5391**LABEL    5259--CALLALT  5266--CALLALT
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:278  
OLD$WINDOW IN PROCEDURE NEW_WINDOW
      4772**DCL      5357<>CALL
OLD$WINDOW.COORDS.HEIGHT# IN PROCEDURE NEW_WINDOW
      4799**DCL      5234>>IF       5238>>IF       5239>>ASSIGN
OLD$WINDOW_NODE.DESC.SPEC.V$ IN PROCEDURE NEW_WINDOW
      4758**DCL      5233>>ASSIGN
OLD$WINDOW_NODE.TAIL$ IN PROCEDURE NEW_WINDOW
      4762**DCL      5231>>ASSIGN
OLD_WINDOW$ IN PROCEDURE NEW_WINDOW
      4138**DCL      4772--IMP-PTR  5233<<ASSIGN   5234>>IF       5238>>IF       5239>>ASSIGN   5274<<ASSIGN
      5324<<ASSIGN   5357>>CALL
OLD_WINDOW_NODE$ IN PROCEDURE NEW_WINDOW
      4137**DCL      4679--IMP-PTR  5231<<ASSIGN   5233>>ASSIGN
PDELETE_FAILED IN PROCEDURE DELETE_WINDOW
      5958**LABEL    5960--CALLALT
PORT
      3150**DCL       154--PROC     4047--ENTRY    5276<>CALL     5320--IF       5320--ASSIGN   5320--ASSIGN
      5323--ASSIGN   5960<>CALL
PORT.CURRENT
      3203**DCL      5956<>CALL
PORT.CURRENT.KEY.REP#
      3217**DCL      5306>>IF
PORT.CURRENT.KEY.V$
      3217**DCL      5306>>ASSIGN   5306--ASSIGN
PORT.LEVEL.INTERNAL$
      3237**DCL      3969>>ASSIGN   4002>>ASSIGN   4002>>IF       4002>>CALL     4002>>CALL     4009>>CALL
      4015>>IF       4020>>ASSIGN   5231>>ASSIGN   5279>>ASSIGN   5285>>ASSIGN   5288>>ASSIGN   5921>>ASSIGN
      5924>>IF       5924>>IF       5929>>CALL     5938>>IF       5943>>ASSIGN   5945>>IF       5951>>IF
PORT.LEVEL.SPEC
      3233**DCL      3986<<ASSIGN   4002<<ASSIGN
PORT.LEVEL.SPEC.REP#
      3235**DCL      3985>>IF
PORT.LEVEL.SPEC.V$
      3235**DCL      3985>>CALL     3985>>CALL     4002<>CALL
PORT.LEVEL.SPEC_MODIFIED
      3237**DCL      4012<<ASSIGN
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:279  
PWRITE_FAILED IN PROCEDURE NEW_WINDOW
      5391**LABEL    5276--CALLALT
RE_WINDOW IN PROCEDURE NEW_WINDOW
      5311**ENTRY    4049--CALL
SPEC
      3248**DCL       154--PROC     3951--IF       4047--ENTRY    5276<>CALL     5324--ASSIGN
SPEC.REP#
      3252**DCL      3961>>IF
SPEC.V$
      3252**DCL      3961>>ASSIGN   3961--ASSIGN   3973>>ASSIGN
SPEC_CLEAR IN PROCEDURE DELETE_WINDOW
      5752**DCL      5920<<ASSIGN   5929<>CALL
STREAM IN PROCEDURE NEW_WINDOW
      4181**DCL      5250<>CALL
STREAM$ IN PROCEDURE NEW_WINDOW
      4133**DCL      4181--IMP-PTR  5241<>CALL     5243>>ASSIGN   5250>>CALL
VALUE_CHAIN IN PROCEDURE FIND_VALUE_FOR_WINDOW
      5505**DCL      5478--PROC     5604--ASSIGN
VALUE_CHAIN.FLINK$ IN PROCEDURE FIND_VALUE_FOR_WINDOW
      5531**DCL      5606>>ASSIGN
VALUE_CHAIN.LENGTH# IN PROCEDURE FIND_VALUE_FOR_WINDOW
      5531**DCL      5533--IMP-SIZ
VD$DATA IN PROCEDURE NEW_WINDOW
      5192**DCL      5329<>CALL     5376<>CALL
VD$DATA.LENGTH# IN PROCEDURE NEW_WINDOW
      5218**DCL      5220--IMP-SIZ  5329>>CALL     5376>>CALL
VD$EVAL IN PROCEDURE NEW_WINDOW
      4434**DCL      5266<>CALL
VD$EVAL.BLINK$ IN PROCEDURE NEW_WINDOW
      4460**DCL      5265>>ASSIGN
VD$FILE_NODE
      3712**DCL      4009<>CALL     5929<>CALL
VD$FILE_NODE.BLINK$
      3738**DCL      5924>>IF
VD$FILE_NODE.COUNT#
      3795**DCL      3969>>ASSIGN
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:280  
VD$FILE_NODE.DESC.KEY.REP#
      3777**DCL      5320>>IF
VD$FILE_NODE.DESC.KEY.V$
      3777**DCL      5320>>ASSIGN   5320--ASSIGN
VD$FILE_NODE.DESC.SPEC
      3789**DCL      4002>>ASSIGN
VD$FILE_NODE.DESC.SPEC.REP#
      3791**DCL      4002>>IF
VD$FILE_NODE.DESC.SPEC.V$
      3791**DCL      4002>>CALL     4002>>CALL     5279>>ASSIGN   5323>>ASSIGN   5921>>ASSIGN
VD$FILE_NODE.FLINK$
      3738**DCL      5924>>IF       5941>>ASSIGN   5943>>ASSIGN
VD$FILE_NODE.HEAD$
      3795**DCL      5943>>ASSIGN
VD$NAME_SPEC IN PROCEDURE NEW_WINDOW
      5135**DCL      5332<>CALL
VD$NAME_SPEC.WINDOWABLE IN PROCEDURE NEW_WINDOW
      5163**DCL      5328>>IF
VD$STREAM IN PROCEDURE DELETE_WINDOW
      5819**DCL      5932<>CALL
VD$TEXTC.LENGTH#
      3940**DCL      3942--IMP-SIZ  3965>>IF
VD$TEXTC_REMOTE
      3888**DCL      3985<>CALL     4002<>CALL
VD$TEXTC_REMOTE.LENGTH#
      3917**DCL      3919--IMP-SIZ  3961--ASSIGN   3985>>CALL     4002>>CALL     5306--ASSIGN   5320--ASSIGN
      5386--ASSIGN
VDA$FCLOSE
      3315**DCL-ENT  5932--CALL
VDA$FOPEN
      3316**DCL-ENT  5250--CALL
VDA$LREAD
      3317**DCL-ENT  5370--CALL     5395--CALL
VDA$PDELETE
      3319**DCL-ENT  5960--CALL
VDA$PWRITE
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:281  
      3318**DCL-ENT  5276--CALL
VDG$ERRMSG
      3327**DCL-ENT  5404--CALL
VDG$ESCREECH
      3332**DCL-ENT  4017--CALL     5249--CALL     5284--CALL
VDG$OALLOC
      3326**DCL-ENT  5241--CALL
VDG$OCLEAR_LOCATION
      3331**DCL-ENT  5963--CALL
VDG$OCOPY
      3329**DCL-ENT  4002--CALL
VDG$OCOPY_LOCATION
      3330**DCL-ENT  5956--CALL
VDG$OFREE
      3328**DCL-ENT  3985--CALL     5259--CALL     5266--CALL
VDP$NEQUALS_1_WINDOW
      3324**DCL-ENT  5332--CALL
VDP$NKEYIN_1_WINDOW
      3325**DCL-ENT  5389--CALL
VDP$WCHANGE
      3322**DCL-ENT  4009--CALL     5929--CALL
VDP$WNEW
      3321**DCL-ENT  5357--CALL
VDP$WREMOVE
      3323**DCL-ENT  5935--CALL
VD_$SCREEN.V#
      3463**DCL      5234>>IF       5363>>IF
VD_$WI_BORDER.LENGTH#
      3517**DCL      3519--IMP-SIZ  5234>>IF
VD_6E.KEYINS$
      3349**DCL      3606--IMP-PTR  5370>>CALL     5372>>ASSIGN   5375>>DOWHILE  5395>>CALL
VD_COMMAND_WINDOW$
      3373**DCL      4015>>IF       5283>>IF       5285<<ASSIGN   5924>>IF       5951>>IF       5953<<ASSIGN
VD_CURRENT_WINDOW$
      3372**DCL      4020<<ASSIGN   5288<<ASSIGN   5938>>IF       5941<<ASSIGN   5941>>ASSIGN   5942>>IF
      5943<<ASSIGN   5945>>IF       5947<<ASSIGN
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:282  
VD_EDITING_WINDOWS
      3375**DCL      3969<<ASSIGN   3977<<ASSIGN   3977>>ASSIGN
VD_EQUALS_INIT.DATA$ IN PROCEDURE NEW_WINDOW
      5117**DCL      5329>>CALL     5329>>CALL
VD_EQUALS_INIT.KEY$ IN PROCEDURE NEW_WINDOW
      5115**DCL      5327>>DOUNTIL
VD_EQUALS_INIT.SPEC$ IN PROCEDURE NEW_WINDOW
      5116**DCL      5328>>IF       5332>>CALL
VD_EVAL$ IN PROCEDURE NEW_WINDOW
      4135**DCL      4434--IMP-PTR  5262<<ASSIGN   5264>>DOWHILE  5265>>ASSIGN   5266>>CALL     5268<<ASSIGN
WCHANGE_FAILED
      4024**LABEL    4009--CALLALT  4049--CALLALT
WCHANGE_FAILED IN PROCEDURE DELETE_WINDOW
      5958**LABEL    5929--CALLALT
WINDOW$SPEC
      3540**DCL      4009<>CALL     5332<>CALL     5357<>CALL     5389<>CALL     5935<>CALL
WINDOW$SPEC.COMMAND
      3566**DCL      4008>>ASSIGN   5228>>IF       5282>>IF       5609>>IF
WINDOW$SPEC.COORDS.HEIGHT#
      3567**DCL      5238>>IF       5239<<ASSIGN
WINDOW$SPEC.COORDS.LINE#
      3566**DCL      5928<<ASSIGN
WINDOW$SPEC.OPERAND.EDIT_BLOCK$
      3581**DCL      5245>>ASSIGN   5261<<ASSIGN
WINDOW$SPEC.OPERAND.EVAL$
      3581**DCL      5248>>IF       5262>>ASSIGN   5263<<ASSIGN
WINDOW$SPEC.OPERAND.STREAM$
      3581**DCL      5243<<ASSIGN   5931>>IF       5932>>CALL
WINDOW_SPEC$
      3528**DCL      3540--IMP-PTR  3961<<ASSIGN   3961<<ASSIGN   3965>>IF       3973<<ASSIGN   4008>>ASSIGN
      4009>>CALL     5228>>IF       5238>>IF       5239>>ASSIGN   5243>>ASSIGN   5245>>ASSIGN   5248>>IF
      5261>>ASSIGN   5262>>ASSIGN   5263>>ASSIGN   5279<<ASSIGN   5282>>IF       5323<<ASSIGN   5332>>CALL
      5357>>CALL     5389>>CALL     5609>>IF       5921<<ASSIGN   5928>>ASSIGN   5931>>IF       5932>>CALL
      5935>>CALL
WNEW_FAILED IN PROCEDURE NEW_WINDOW
      5413**LABEL    5357--CALLALT
PL6.E3A0      #002=VDA$WWINDOWS File=VDA$WRITERS.:VDA5TSI                        FRI 07/04/97 11:10 Page:283  
WREMOVE_FAILED IN PROCEDURE DELETE_WINDOW
      5958**LABEL    5935--CALLALT
X IN PROCEDURE NEW_WINDOW
      5113**DCL      5326<<ASSIGN   5327>>DOUNTIL  5328>>IF       5329>>CALL     5329>>CALL     5332>>CALL
      5336<<ASSIGN   5336>>ASSIGN
