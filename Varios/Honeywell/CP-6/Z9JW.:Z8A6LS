VERSION A06

PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:1    
        1        1        /*M* Z9JW$CHECK_PTR  -- Tests for invalid pointers.                 */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*
        8        8             NAME: Z9JW$CHECK_PTR
        9        9          PURPOSE: To check the validity of pointers entered by users of the
       10       10                   interactive treewalker.  If a bad pointer is discovered;
       11       11                   the attempt is made to recover and restart the treewalker.
       12       12        */
       13       13
       14       14        Z9JW$CHECK_PTR: PROC( ID$ ) ALTRET;
       15       15
       16       16            %INCLUDE Z8A_SYS_FILE;
       17     6291            %EQU PHASE = 6;
       18     6292            %INCLUDE Z8A_DEFC;
       19     6360            %INCLUDE Z8A_NAMES;
       20     8160            %INCLUDE Z8A_ILL;
       21     8853
       22     8854            %FPT_TRAP  (ERRORS = Z9JW$ABORT, IPR = TRAP, MEMORY = TRAP,
       23     8855                        MISSING_PAGE = TRAP, MISSING_SEG  = TRAP,
       24     8856                        SECURITY_1 = TRAP, SECURITY_2 = TRAP );
       25     8879
       26     8880            %FPT_TRAP  ( FPTN = FPT_UNTRAP, IPR = ABORT, MEMORY = ABORT,
       27     8881                           MISSING_PAGE = ABORT, MISSING_SEG  = ABORT,
       28     8882                           SECURITY_1 = ABORT, SECURITY_2 = ABORT );
       29     8905
       30     8906    1       DCL ID$            PTR;
       31     8907    1       DCL ID             UBIN HALF;
       32     8908    1       DCL DUMMY$         PTR EXT;
       33     8909    1       DCL ABORT          BIT(1) EXT;
       34     8910    1       DCL Z9JW$ABORT     ENTRY ASYNC;
       35     8911
       36     8912    1       CALL M$TRAP(FPT_TRAP);
       37     8913
PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:2    
       38     8914    1       ABORT = FALSE;
       39     8915    1       DUMMY$ = ID$;
       40     8916    1       ID = DUMMY$-> ILL.ID;
       41     8917    1       CALL M$TRAP( FPT_UNTRAP );
       42     8918    1       IF ABORT THEN
       43     8919    1         ALTRETURN;
       44     8920    1       ELSE
       45     8921    1         RETURN;
       46     8922    1   END Z9JW$CHECK_PTR;
       47     8923        %EOD;

PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:3    
--  Include file information  --

   Z8A_ILL.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_NAMES.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z9JW$CHECK_PTR.

   Procedure Z9JW$CHECK_PTR requires 19 words for executable code.
   Procedure Z9JW$CHECK_PTR requires 6 words of local(AUTO) storage.

PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:4    

 Object Unit name= Z9JW$CHECK_PTR                             File name= Z9JW.:Z8A6TOU
 UTS= AUG 09 '97 14:06:09.64 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none     1      1  ITERATION
    2  LblCom even  none     1      1  ILL$
    3  LblCom even  none     5      5  ILL_
    4   Data  even  none    20     24  Z9JW$CHECK_PTR
    5  LblCom even  none     1      1  DUMMY$
    6  LblCom even  none     1      1  ABORT
    7   Proc  even  none    19     23  Z9JW$CHECK_PTR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     7      0   yes    yes     yes      Std        1  Z9JW$CHECK_PTR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          Async      0 Z9JW$ABORT
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:5    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    NAMES                            r    ILL_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:6    


        1        1        /*M* Z9JW$CHECK_PTR  -- Tests for invalid pointers.                 */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*
        8        8             NAME: Z9JW$CHECK_PTR
        9        9          PURPOSE: To check the validity of pointers entered by users of the
       10       10                   interactive treewalker.  If a bad pointer is discovered;
       11       11                   the attempt is made to recover and restart the treewalker.
       12       12        */
       13       13
       14       14        Z9JW$CHECK_PTR: PROC( ID$ ) ALTRET;

     14  7 000000   000000 700200 xent  Z9JW$CHECK_* TSX0  ! X66_AUTO_1
         7 000001   000006 000001                    ZERO    6,1

       15       15
       16       16            %INCLUDE Z8A_SYS_FILE;
       17     6291            %EQU PHASE = 6;
       18     6292            %INCLUDE Z8A_DEFC;
       19     6360            %INCLUDE Z8A_NAMES;
       20     8160            %INCLUDE Z8A_ILL;
       21     8853
       22     8854            %FPT_TRAP  (ERRORS = Z9JW$ABORT, IPR = TRAP, MEMORY = TRAP,
       23     8855                        MISSING_PAGE = TRAP, MISSING_SEG  = TRAP,
       24     8856                        SECURITY_1 = TRAP, SECURITY_2 = TRAP );
       25     8879
       26     8880            %FPT_TRAP  ( FPTN = FPT_UNTRAP, IPR = ABORT, MEMORY = ABORT,
       27     8881                           MISSING_PAGE = ABORT, MISSING_SEG  = ABORT,
       28     8882                           SECURITY_1 = ABORT, SECURITY_2 = ABORT );
       29     8905
       30     8906    1       DCL ID$            PTR;
       31     8907    1       DCL ID             UBIN HALF;
       32     8908    1       DCL DUMMY$         PTR EXT;
PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:7    
       33     8909    1       DCL ABORT          BIT(1) EXT;
       34     8910    1       DCL Z9JW$ABORT     ENTRY ASYNC;
       35     8911
       36     8912    1       CALL M$TRAP(FPT_TRAP);

   8912  7 000002   000000 630400 4                  EPPR0   FPT_TRAP
         7 000003   010004 713400                    CLIMB   4100
         7 000004   400400 401760                    pmme    nvectors=2

       37     8913
       38     8914    1       ABORT = FALSE;

   8914  7 000005   000000 450000 6                  STZ     ABORT

       39     8915    1       DUMMY$ = ID$;

   8915  7 000006   200003 470500                    LDP0    @ID$,,AUTO
         7 000007   000000 236100                    LDQ     0,,PR0
         7 000010   000000 756000 5                  STQ     DUMMY$

       40     8916    1       ID = DUMMY$-> ILL.ID;

   8916  7 000011   000000 471400 5                  LDP1    DUMMY$
         7 000012   100000 220100                    LDX0    0,,PR1
         7 000013   200004 740100                    STX0    ID,,AUTO

       41     8917    1       CALL M$TRAP( FPT_UNTRAP );

   8917  7 000014   000012 630400 4                  EPPR0   FPT_UNTRAP
         7 000015   010004 713400                    CLIMB   4100
         7 000016   400400 401760                    pmme    nvectors=2

       42     8918    1       IF ABORT THEN

   8918  7 000017   000000 234000 6                  SZN     ABORT
         7 000020   000022 605000 7                  TPL     s:8921

PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:8    
       43     8919    1         ALTRETURN;

   8919  7 000021   000000 702200 xent               TSX2  ! X66_AALT

       44     8920    1       ELSE
       45     8921    1         RETURN;

   8921  7 000022   000000 702200 xent               TSX2  ! X66_ARET
       46     8922    1   END Z9JW$CHECK_PTR;
       47     8923        %EOD;

PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:9    
--  Include file information  --

   Z8A_ILL.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_NAMES.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z9JW$CHECK_PTR.
PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:10   

 **** Variables and constants ****

  ****  Section 001 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 002 LblCom ILL$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ILL$

  ****  Section 003 LblCom ILL_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ILL_

  ****  Section 004  Data  Z9JW$CHECK_PTR

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 FPT_TRAP                  12-0-0/d STRC(360)   r     1 FPT_UNTRAP

  ****  Section 005 LblCom DUMMY$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 DUMMY$

PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:11   
  ****  Section 006 LblCom ABORT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 ABORT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ID$                       4-0-0/w UBIN(18)    r     1 ID
    *0-0-0/w PTR         r     1 ID$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 ILL_STEP(0:144)            0-0-0/c CHAR(12)          1 NAMES(0:599)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)         1 ACCEPT_DISPLAY             0-0-0/w STRC(108)         1 BINARY_ILL
     0-0-0/w STRC(144)         1 BRANCH_ILL                 0-0-0/w STRC(216)         1 CCOSU
     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(108)         1 CODED_MOVE
     0-0-0/w STRC(72)          1 CONT                       0-0-0/w STRC(144)         1 DEFLB
     0-0-0/w STRC(144)         1 DOEND                      0-0-0/w STRC(396)         1 DO_N
     0-0-0/w STRC(180)         1 DV4I                       0-0-0/w STRC(180)         1 ENTRY_ILL
     0-0-0/w STRC(108)         1 EVALU                      0-0-0/w STRC(144)         1 GO
     0-0-0/w STRC(180)   r     1 ILL                        0-0-0/w STRC              1 ILL_NO_OPS
     0-0-0/w STRC(108)         1 LINOI                      0-0-0N  NULL        r     1 M$UC
     0-0-0/w STRC(72)          1 MFILL                      0-0-0/w STRC(180)         1 MULTI_GO
PL6.E3A0      #001=Z9JW$CHECK_PTR File=Z9JW.:Z8A6TSI                             SAT 08/09/97 14:06 Page:12   
     0-0-0/w STRC(180)         1 MVEAL                      0-0-0/w STRC(108)         1 MVFIL
     0-0-0/w STRC(72)          1 MVIIS                      0-0-0/w STRC(180)         1 OS_CALL
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w STRC(216)         1 PFORM
     0-0-0/w STRC(144)         1 PINC                       0-0-0/w STRC(144)         1 PREOFF
     0-0-0/w STRC(108)         1 PRESET                     0-0-0/w STRC(144)         1 P_A_PRESET
     0-0-0/w STRC(144)         1 P_P_PRESET                 0-0-0/w STRC(144)         1 REMEM
     0-0-0/w STRC(144)         1 SCOPE                      0-0-0/w STRC(216)         1 SEARCH_
     0-0-0/w STRC(72)          1 STP2                       0-0-0/w STRC(144)         1 TRINARY_ILL
     0-0-0/w STRC(72)          1 UNARY_ILL                  0-0-0/w STRC(216)         1 USER_CALL
     0-0-0/w STRC(108)         1 VAL                        0-0-0/w STRC(108)         1 VAL_END
     0-0-0/w STRC(72)          1 WHEN


   Procedure Z9JW$CHECK_PTR requires 19 words for executable code.
   Procedure Z9JW$CHECK_PTR requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=Z9JW$ABORT File=Z9JW.:Z8A6TSI                                 SAT 08/09/97 14:07 Page:13   
       48        1        /*T***********************************************************/
       49        2        /*T*                                                         */
       50        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       51        4        /*T*                                                         */
       52        5        /*T***********************************************************/
       53        6        Z9JW$ABORT: PROC ASYNC;
       54        7
       55        8            %INCLUDE Z8A_SYS_FILE;
       56     6283
       57     6284            %SUB TRUE    = "'1'B";
       58     6285    1       DCL ABORT      BIT(1) EXT;
       59     6286    1       DCL DUMMY$     PTR    EXT;
       60     6287
       61     6288    1       ABORT = TRUE;
       62     6289    1       DUMMY$ = ADDR(DUMMY$);
       63     6290    1       CALL M$TRTN;
       64     6291    1   END Z9JW$ABORT; /* proc */
       65     6292        %EJECT;
PL6.E3A0      #002=Z9JW$ABORT File=Z9JW.:Z8A6TSI                                 SAT 08/09/97 14:07 Page:14   

PL6.E3A0      #002=Z9JW$ABORT File=Z9JW.:Z8A6TSI                                 SAT 08/09/97 14:07 Page:15   
--  Include file information  --

   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z9JW$ABORT.

   Procedure Z9JW$ABORT requires 9 words for executable code.
   Procedure Z9JW$ABORT requires 4 words of local(AUTO) storage.

    No errors detected in file Z9JW.:Z8A6TSI    .

PL6.E3A0      #002=Z9JW$ABORT File=Z9JW.:Z8A6TSI                                 SAT 08/09/97 14:07 Page:16   

 Object Unit name= Z9JW$ABORT                                 File name= Z9JW.:Z8A6TOU
 UTS= AUG 09 '97 14:07:12.72 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none     1      1  ABORT
    2  LblCom even  none     1      1  DUMMY$
    3   Proc  even  none     9     11  Z9JW$ABORT
    4  RoData even  none     1      1  Z9JW$ABORT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes     Async       0  Z9JW$ABORT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AAUTO
                       nStd      0 X66_AARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC
PL6.E3A0      #002=Z9JW$ABORT File=Z9JW.:Z8A6TSI                                 SAT 08/09/97 14:07 Page:17   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=Z9JW$ABORT File=Z9JW.:Z8A6TSI                                 SAT 08/09/97 14:07 Page:18   


       48        1        /*T***********************************************************/
       49        2        /*T*                                                         */
       50        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       51        4        /*T*                                                         */
       52        5        /*T***********************************************************/
       53        6        Z9JW$ABORT: PROC ASYNC;

      6  3 000000   000000 700200 xent  Z9JW$ABORT   TSX0  ! X66_AAUTO
         3 000001   000004 000000                    ZERO    4,0

       54        7
       55        8            %INCLUDE Z8A_SYS_FILE;
       56     6283
       57     6284            %SUB TRUE    = "'1'B";
       58     6285    1       DCL ABORT      BIT(1) EXT;
       59     6286    1       DCL DUMMY$     PTR    EXT;
       60     6287
       61     6288    1       ABORT = TRUE;

   6288  3 000002   400000 236003                    LDQ     -131072,DU
         3 000003   000000 756000 1                  STQ     ABORT

       62     6289    1       DUMMY$ = ADDR(DUMMY$);

   6289  3 000004   000000 236000 4                  LDQ     0
         3 000005   000000 756000 2                  STQ     DUMMY$

       63     6290    1       CALL M$TRTN;

   6290  3 000006   010012 713400                    CLIMB   4106
         3 000007   000000 401760                    pmme    nvectors=0

       64     6291    1   END Z9JW$ABORT; /* proc */

   6291  3 000010   000000 702200 xent               TSX2  ! X66_AARET
       65     6292        %EJECT;
PL6.E3A0      #002=Z9JW$ABORT File=Z9JW.:Z8A6TSI                                 SAT 08/09/97 14:07 Page:19   

PL6.E3A0      #002=Z9JW$ABORT File=Z9JW.:Z8A6TSI                                 SAT 08/09/97 14:07 Page:20   
--  Include file information  --

   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z9JW$ABORT.
PL6.E3A0      #002=Z9JW$ABORT File=Z9JW.:Z8A6TSI                                 SAT 08/09/97 14:07 Page:21   

 **** Variables and constants ****

  ****  Section 001 LblCom ABORT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 ABORT

  ****  Section 002 LblCom DUMMY$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 DUMMY$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$UC


   Procedure Z9JW$ABORT requires 9 words for executable code.
   Procedure Z9JW$ABORT requires 4 words of local(AUTO) storage.

    No errors detected in file Z9JW.:Z8A6TSI    .
